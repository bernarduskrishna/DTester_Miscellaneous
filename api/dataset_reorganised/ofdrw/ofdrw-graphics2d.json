{"/bernard/dataset_construction/prep/repos/ofdrw/ofdrw-graphics2d/src/main/java/org/ofdrw/graphics2d/OFDGraphicsDocument.java":{"class_content":["package org.ofdrw.graphics2d;\n","\n","import org.ofdrw.core.attachment.Attachments;\n","import org.ofdrw.core.attachment.CT_Attachment;\n","import org.ofdrw.core.basicStructure.doc.CT_CommonData;\n","import org.ofdrw.core.basicStructure.doc.CT_PageArea;\n","import org.ofdrw.core.basicStructure.doc.Document;\n","import org.ofdrw.core.basicStructure.ofd.DocBody;\n","import org.ofdrw.core.basicStructure.ofd.OFD;\n","import org.ofdrw.core.basicStructure.ofd.docInfo.CT_DocInfo;\n","import org.ofdrw.core.basicStructure.pageTree.Page;\n","import org.ofdrw.core.basicStructure.pageTree.Pages;\n","import org.ofdrw.core.basicStructure.res.CT_MultiMedia;\n","import org.ofdrw.core.basicStructure.res.MediaType;\n","import org.ofdrw.core.basicType.ST_ID;\n","import org.ofdrw.core.basicType.ST_Loc;\n","import org.ofdrw.core.pageDescription.drawParam.CT_DrawParam;\n","import org.ofdrw.gv.GlobalVar;\n","import org.ofdrw.pkg.container.*;\n","\n","import javax.imageio.ImageIO;\n","import java.awt.*;\n","import java.awt.image.BufferedImage;\n","import java.io.*;\n","import java.nio.file.Files;\n","import java.nio.file.Path;\n","import java.nio.file.StandardCopyOption;\n","import java.time.LocalDate;\n","import java.time.LocalDateTime;\n","import java.util.UUID;\n","import java.util.concurrent.atomic.AtomicInteger;\n","\n","/**\n"," * 图形OFD文档对象\n"," *\n"," * @author 权观宇\n"," * @since 2023-1-18 09:45:18\n"," */\n","public class OFDGraphicsDocument implements Closeable {\n","    /**\n","     * 打包后OFD文档存放路径\n","     */\n","    private Path outPath;\n","\n","    /**\n","     * 打包后OFD文档流\n","     */\n","    private OutputStream outputStream;\n","\n","    /**\n","     * 文档是否已经关闭\n","     * true 表示已经关闭，false 表示未关闭\n","     */\n","    private boolean closed = false;\n","\n","    /**\n","     * OFD 打包\n","     */\n","    public final OFDDir ofdDir;\n","\n","    /**\n","     * 当前文档中所有对象使用标识的最大值。\n","     * 初始值为 0。MaxUnitID主要用于文档编辑，\n","     * 在向文档增加一个新对象时，需要分配一个\n","     * 新的标识符，新标识符取值宜为 MaxUnitID + 1，\n","     * 同时需要修改此 MaxUnitID值。\n","     */\n","    public final AtomicInteger MaxUnitID;\n","\n","\n","    /**\n","     * 文档属性信息，该对象会在初始化是被创建并且添加到文档中\n","     * 此处只是保留引用，为了方便操作。\n","     */\n","    public CT_CommonData cdata;\n","\n","\n","    /**\n","     * OFD文档对象\n","     */\n","    public final Document document;\n","\n","    /**\n","     * 附件列表\n","     * <p>\n","     * null表示没有附件\n","     */\n","    public Attachments attachments;\n","\n","    /**\n","     * 正在操作的文档目录\n","     */\n","    public final DocDir docDir;\n","\n","    /**\n","     * 资源管理器\n","     */\n","    public final ResManager resMgr;\n","\n","    /**\n","     * 在指定路径位置上创建一个OFD文件\n","     *\n","     * @param outPath OFD输出路径\n","     */\n","    public OFDGraphicsDocument(Path outPath) {\n","        this();\n","        if (outPath == null) {\n","            throw new IllegalArgumentException(\"OFD文件存储路径(outPath)为空\");\n","        }\n","        if (Files.isDirectory(outPath)) {\n","            throw new IllegalArgumentException(\"OFD文件存储路径(outPath)不能是目录\");\n","        }\n","        if (!Files.exists(outPath.toAbsolutePath().getParent())) {\n","            throw new IllegalArgumentException(\"OFD文件存储路径(outPath)上级目录 [\" + outPath.getParent().toAbsolutePath() + \"] 不存在\");\n","        }\n","        this.outPath = outPath;\n","    }\n","\n","    /**\n","     * 在指定路径位置上创建一个OFD文件流\n","     *\n","     * @param outputStream OFD输出流，应由调用者负责关闭。\n","     */\n","    public OFDGraphicsDocument(OutputStream outputStream) {\n","        this();\n","        if (outputStream == null) {\n","            throw new IllegalArgumentException(\"OFD文件流(outputStream)为空\");\n","        }\n","        this.outputStream = outputStream;\n","    }\n","\n","    /**\n","     * 文档初始化构造器\n","     */\n","    private OFDGraphicsDocument() {\n","\n","\n","        // 初始化文档对象\n","        CT_DocInfo docInfo = new CT_DocInfo()\n","                .setDocID(UUID.randomUUID())\n","                .setCreationDate(LocalDate.now())\n","                .setCreator(\"OFD R&W\")\n","                .setCreatorVersion(GlobalVar.Version);\n","        DocBody docBody = new DocBody()\n","                .setDocInfo(docInfo)\n","                .setDocRoot(new ST_Loc(\"Doc_0/Document.xml\"));\n","        OFD ofd = new OFD().addDocBody(docBody);\n","\n","\n","        // 创建一个低层次的文档对象\n","        document = new Document();\n","        cdata = new CT_CommonData();\n","        // 默认页面大小为A4\n","        CT_PageArea defaultPageSize = new CT_PageArea()\n","                .setPhysicalBox(0, 0, 210d, 297d)\n","                .setApplicationBox(0, 0, 210d, 297d);\n","        // 默认使用RGB颜色空间所以此处不设置颜色空间\n","        // 设置页面属性\n","        cdata.setPageArea(defaultPageSize);\n","        document.setCommonData(cdata)\n","                // 空的页面引用集合，该集合将会在解析虚拟页面时得到填充\n","                .setPages(new Pages());\n","\n","        ofdDir = OFDDir.newOFD()\n","                .setOfd(ofd);\n","        // 创建一个新的文档\n","        DocDir docDir = ofdDir.newDoc();\n","        this.docDir = docDir;\n","        docDir.setDocument(document);\n","\n","        MaxUnitID = new AtomicInteger(0);\n","        this.resMgr = new ResManager(this.docDir, MaxUnitID);\n","    }\n","\n","    /**\n","     * 创建页面，单位毫米\n","     *\n","     * @param width  页面宽度，单位：毫米\n","     * @param height 页面高度，单位：毫米\n","     * @return 2D图形绘制对象\n","     */\n","    public OFDPageGraphics2D newPage(double width, double height) {\n","        CT_PageArea size = new CT_PageArea()\n","                .setPhysicalBox(0, 0, width, height)\n","                .setApplicationBox(0, 0, width, height);\n","        return newPage(size);\n","    }\n","\n","    /**\n","     * 创建新页面，返回该页面2D图形对象\n","     *\n","     * @param pageSize 页面大小配置\n","     * @return 2D图形绘制对象\n","     */\n","    public OFDPageGraphics2D newPage(CT_PageArea pageSize) {\n","        final Pages pages = document.getPages();\n","        // 如果存在Pages那么获取，不存在那么创建\n","        final PagesDir pagesDir = docDir.obtainPages();\n","\n","        // 创建页面容器\n","        PageDir pageDir = pagesDir.newPageDir();\n","        String pageLoc = String.format(\"Pages/Page_%d/Content.xml\", pageDir.getIndex());\n","        ST_ID pageID = new ST_ID(MaxUnitID.incrementAndGet());\n","        final Page page = new Page(pageID, ST_Loc.getInstance(pageLoc));\n","        pages.addPage(page);\n","\n","        // 创建页面对象\n","        org.ofdrw.core.basicStructure.pageObj.Page pageObj = new org.ofdrw.core.basicStructure.pageObj.Page();\n","        if (pageSize != null) {\n","            pageObj.setArea(pageSize);\n","        } else {\n","            pageSize = this.cdata.getPageArea();\n","        }\n","        pageDir.setContent(pageObj);\n","\n","        return new OFDPageGraphics2D(this, pageID, pageDir, pageObj, pageSize.getBox());\n","    }\n","\n","    /**\n","     * 添加图片资源\n","     *\n","     * @param img 图片渲染对象\n","     * @return 资源ID\n","     * @throws RuntimeException 图片转写IO异常\n","     */\n","    public ST_ID addResImg(Image img) {\n","        if (img == null) {\n","            return null;\n","        }\n","        final ResDir resDir = docDir.obtainRes();\n","        final Path resDirPath = resDir.getContainerPath();\n","        final File imgFile;\n","        try {\n","            imgFile = File.createTempFile(\"res\", \".png\", resDirPath.toFile());\n","            BufferedImage bi;\n","            if (img instanceof BufferedImage) {\n","                bi = (BufferedImage) img;\n","            } else {\n","                bi = new BufferedImage(img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB);\n","                Graphics g2 = bi.getGraphics();\n","                g2.drawImage(img, 0, 0, null);\n","                g2.dispose();\n","            }\n","            ImageIO.write(bi, \"png\", imgFile);\n","        } catch (IOException e) {\n","            throw new RuntimeException(\"graphics2d 图片写入IO异常\", e);\n","        }\n","\n","        // 将文件加入资源容器中\n","        // 创建图片对象，为了保持透明图片的兼容性采用PNG格式\n","        CT_MultiMedia multiMedia = new CT_MultiMedia()\n","                .setType(MediaType.Image)\n","                .setFormat(\"PNG\")\n","                .setMediaFile(resDir.getAbsLoc().cat(imgFile.getName()));\n","\n","        return resMgr.addRawWithCache(multiMedia);\n","    }\n","\n","    /**\n","     * 添加绘制参数至资源文件中\n","     *\n","     * @param dp 绘制参数\n","     * @return 资源对象ID\n","     */\n","    public ST_ID addDrawParam(CT_DrawParam dp) {\n","        return resMgr.addRawWithCache(dp);\n","    }\n","\n","    /**\n","     * 生成新的文档内对象ID\n","     *\n","     * @return 文档内对象ID\n","     */\n","    public ST_ID newID() {\n","        return new ST_ID(MaxUnitID.incrementAndGet());\n","    }\n","\n","\n","    /**\n","     * 向文档中添加附件文件\n","     * <p>\n","     * 如果名称相同原有附件将会被替换\n","     *\n","     * @param file 附件文件路径\n","     * @return 加入后的文件附件对象ID\n","     * @throws IOException 文件操作异常\n","     */\n","    public ST_ID addAttachment(Path file) throws IOException {\n","        if (file == null || Files.notExists(file)) {\n","            return null;\n","        }\n","\n","        // 创建附件列表文件\n","        if (attachments == null) {\n","            attachments = new Attachments();\n","            docDir.putObj(DocDir.Attachments, attachments);\n","            document.setAttachments(docDir.getAbsLoc().cat(DocDir.Attachments));\n","        }\n","\n","        String fileName = file.getFileName().toString();\n","\n","        // 计算附件所占用的空间，单位KB。\n","        double size = (double) Files.size(file) / 1024d;\n","\n","        CT_Attachment ctAttachment = new CT_Attachment()\n","                .setAttachmentName(fileName)\n","                .setCreationDate(LocalDateTime.now())\n","                .setSize(size);\n","        ST_ID id = new ST_ID(MaxUnitID.incrementAndGet());\n","        ctAttachment.setObjID(id);\n","\n","        // 添加附件到资源\n","        file = docDir.addResourceWithPath(file);\n","        // 构造附件文件存放路径\n","        ST_Loc loc = docDir.getRes().getAbsLoc().cat(file.getFileName().toString());\n","        ctAttachment.setFileLoc(loc);\n","        // 加入附件记录到列表文件\n","        attachments.addAttachment(ctAttachment);\n","        return id;\n","    }\n","\n","    /**\n","     * 向文档中添加附件文件\n","     * <p>\n","     * 如果已经存在同名文件则替换\n","     *\n","     * @param attObj 文件名\n","     * @param input  附件流\n","     * @return 加入后的文件附件对象ID\n","     * @throws IOException 文件操作异常\n","     */\n","    public ST_ID addAttachment(CT_Attachment attObj, InputStream input) throws IOException {\n","        if (attObj == null || input == null) {\n","            return null;\n","        }\n","\n","        String filename = attObj.getAttachmentName();\n","        if (filename == null || filename.length() == 0) {\n","            return null;\n","        }\n","\n","        // 创建附件列表文件\n","        if (attachments == null) {\n","            attachments = new Attachments();\n","            docDir.putObj(DocDir.Attachments, attachments);\n","            document.setAttachments(ST_Loc.getInstance(DocDir.Attachments));\n","        }\n","\n","        // 添加附件到资源\n","        Path target = docDir.obtainRes().getContainerPath().resolve(filename);\n","        Files.copy(input, target, StandardCopyOption.REPLACE_EXISTING);\n","        // 计算附件所占用的空间，单位KB。\n","        double size = (double) Files.size(target) / 1024d;\n","\n","        // 构造附件文件存放路径\n","        ST_Loc loc = docDir.obtainRes().getAbsLoc().cat(filename);\n","        attObj.setSize(size).setFileLoc(loc);\n","        ST_ID id = new ST_ID(MaxUnitID.incrementAndGet());\n","        attObj.setObjID(id);\n","\n","        // 加入附件记录到列表文件\n","        attachments.addAttachment(attObj);\n","        return id;\n","    }\n","\n","\n","    @Override\n","    public void close() throws IOException {\n","        // 文档已经 close 或者 MaxUnitID == 0 说明没有添加任何对象，不需要生成OFD文档\n","        if (this.closed || MaxUnitID.get() == 0) {\n","            return;\n","        } else {\n","            closed = true;\n","        }\n","\n","        try {\n","            // 设置最大对象ID\n","            cdata.setMaxUnitID(MaxUnitID.get());\n","            // final. 执行打包程序\n","            if (outPath != null) {\n","                ofdDir.jar(outPath.toAbsolutePath());\n","            } else if (outputStream != null) {\n","                ofdDir.jar(outputStream);\n","            } else {\n","                throw new IllegalArgumentException(\"OFD文档输出地址错误或没有设置输出流\");\n","            }\n","        } finally {\n","            if (ofdDir != null) {\n","                // 清除在生成OFD过程中的工作区产生的文件\n","                ofdDir.clean();\n","            }\n","        }\n","    }\n","}\n"],"test_content":["package org.ofdrw.graphics2d;\n","\n","import org.junit.jupiter.api.Test;\n","\n","import java.nio.file.Path;\n","import java.nio.file.Paths;\n","\n","class OFDGraphicsDocumentTest {\n","\n","    @Test\n","    void newPage() throws Exception {\n","        final Path dst = Paths.get(\"target/2d.ofd\");\n","        try (OFDGraphicsDocument doc = new OFDGraphicsDocument(dst)) {\n","            OFDPageGraphics2D g = doc.newPage(null);\n","\n","        }\n","        System.out.println(\">> \"+ dst.toAbsolutePath());\n","    }\n","}"],"method_lines_dic":{"OFDGraphicsDocument::::newPage(double,double)":[182,187],"OFDGraphicsDocument::::addResImg(java.awt.Image)":[226,257],"OFDGraphicsDocument::::newID()":[274,276],"OFDGraphicsDocument::::addAttachment(java.nio.file.Path)":[288,320],"OFDGraphicsDocument::::close()":[367,393]},"test_method_lines_dic":{"OFDGraphicsDocumentTest::::newPage()":[10,18]},"reverse_method_lines_dic":{"182":"OFDGraphicsDocument::::newPage(double,double)","183":"OFDGraphicsDocument::::newPage(double,double)","184":"OFDGraphicsDocument::::newPage(double,double)","185":"OFDGraphicsDocument::::newPage(double,double)","186":"OFDGraphicsDocument::::newPage(double,double)","187":"OFDGraphicsDocument::::newPage(double,double)","226":"OFDGraphicsDocument::::addResImg(java.awt.Image)","227":"OFDGraphicsDocument::::addResImg(java.awt.Image)","228":"OFDGraphicsDocument::::addResImg(java.awt.Image)","229":"OFDGraphicsDocument::::addResImg(java.awt.Image)","230":"OFDGraphicsDocument::::addResImg(java.awt.Image)","231":"OFDGraphicsDocument::::addResImg(java.awt.Image)","232":"OFDGraphicsDocument::::addResImg(java.awt.Image)","233":"OFDGraphicsDocument::::addResImg(java.awt.Image)","234":"OFDGraphicsDocument::::addResImg(java.awt.Image)","235":"OFDGraphicsDocument::::addResImg(java.awt.Image)","236":"OFDGraphicsDocument::::addResImg(java.awt.Image)","237":"OFDGraphicsDocument::::addResImg(java.awt.Image)","238":"OFDGraphicsDocument::::addResImg(java.awt.Image)","239":"OFDGraphicsDocument::::addResImg(java.awt.Image)","240":"OFDGraphicsDocument::::addResImg(java.awt.Image)","241":"OFDGraphicsDocument::::addResImg(java.awt.Image)","242":"OFDGraphicsDocument::::addResImg(java.awt.Image)","243":"OFDGraphicsDocument::::addResImg(java.awt.Image)","244":"OFDGraphicsDocument::::addResImg(java.awt.Image)","245":"OFDGraphicsDocument::::addResImg(java.awt.Image)","246":"OFDGraphicsDocument::::addResImg(java.awt.Image)","247":"OFDGraphicsDocument::::addResImg(java.awt.Image)","248":"OFDGraphicsDocument::::addResImg(java.awt.Image)","249":"OFDGraphicsDocument::::addResImg(java.awt.Image)","250":"OFDGraphicsDocument::::addResImg(java.awt.Image)","251":"OFDGraphicsDocument::::addResImg(java.awt.Image)","252":"OFDGraphicsDocument::::addResImg(java.awt.Image)","253":"OFDGraphicsDocument::::addResImg(java.awt.Image)","254":"OFDGraphicsDocument::::addResImg(java.awt.Image)","255":"OFDGraphicsDocument::::addResImg(java.awt.Image)","256":"OFDGraphicsDocument::::addResImg(java.awt.Image)","257":"OFDGraphicsDocument::::addResImg(java.awt.Image)","274":"OFDGraphicsDocument::::newID()","275":"OFDGraphicsDocument::::newID()","276":"OFDGraphicsDocument::::newID()","288":"OFDGraphicsDocument::::addAttachment(java.nio.file.Path)","289":"OFDGraphicsDocument::::addAttachment(java.nio.file.Path)","290":"OFDGraphicsDocument::::addAttachment(java.nio.file.Path)","291":"OFDGraphicsDocument::::addAttachment(java.nio.file.Path)","292":"OFDGraphicsDocument::::addAttachment(java.nio.file.Path)","293":"OFDGraphicsDocument::::addAttachment(java.nio.file.Path)","294":"OFDGraphicsDocument::::addAttachment(java.nio.file.Path)","295":"OFDGraphicsDocument::::addAttachment(java.nio.file.Path)","296":"OFDGraphicsDocument::::addAttachment(java.nio.file.Path)","297":"OFDGraphicsDocument::::addAttachment(java.nio.file.Path)","298":"OFDGraphicsDocument::::addAttachment(java.nio.file.Path)","299":"OFDGraphicsDocument::::addAttachment(java.nio.file.Path)","300":"OFDGraphicsDocument::::addAttachment(java.nio.file.Path)","301":"OFDGraphicsDocument::::addAttachment(java.nio.file.Path)","302":"OFDGraphicsDocument::::addAttachment(java.nio.file.Path)","303":"OFDGraphicsDocument::::addAttachment(java.nio.file.Path)","304":"OFDGraphicsDocument::::addAttachment(java.nio.file.Path)","305":"OFDGraphicsDocument::::addAttachment(java.nio.file.Path)","306":"OFDGraphicsDocument::::addAttachment(java.nio.file.Path)","307":"OFDGraphicsDocument::::addAttachment(java.nio.file.Path)","308":"OFDGraphicsDocument::::addAttachment(java.nio.file.Path)","309":"OFDGraphicsDocument::::addAttachment(java.nio.file.Path)","310":"OFDGraphicsDocument::::addAttachment(java.nio.file.Path)","311":"OFDGraphicsDocument::::addAttachment(java.nio.file.Path)","312":"OFDGraphicsDocument::::addAttachment(java.nio.file.Path)","313":"OFDGraphicsDocument::::addAttachment(java.nio.file.Path)","314":"OFDGraphicsDocument::::addAttachment(java.nio.file.Path)","315":"OFDGraphicsDocument::::addAttachment(java.nio.file.Path)","316":"OFDGraphicsDocument::::addAttachment(java.nio.file.Path)","317":"OFDGraphicsDocument::::addAttachment(java.nio.file.Path)","318":"OFDGraphicsDocument::::addAttachment(java.nio.file.Path)","319":"OFDGraphicsDocument::::addAttachment(java.nio.file.Path)","320":"OFDGraphicsDocument::::addAttachment(java.nio.file.Path)","367":"OFDGraphicsDocument::::close()","368":"OFDGraphicsDocument::::close()","369":"OFDGraphicsDocument::::close()","370":"OFDGraphicsDocument::::close()","371":"OFDGraphicsDocument::::close()","372":"OFDGraphicsDocument::::close()","373":"OFDGraphicsDocument::::close()","374":"OFDGraphicsDocument::::close()","375":"OFDGraphicsDocument::::close()","376":"OFDGraphicsDocument::::close()","377":"OFDGraphicsDocument::::close()","378":"OFDGraphicsDocument::::close()","379":"OFDGraphicsDocument::::close()","380":"OFDGraphicsDocument::::close()","381":"OFDGraphicsDocument::::close()","382":"OFDGraphicsDocument::::close()","383":"OFDGraphicsDocument::::close()","384":"OFDGraphicsDocument::::close()","385":"OFDGraphicsDocument::::close()","386":"OFDGraphicsDocument::::close()","387":"OFDGraphicsDocument::::close()","388":"OFDGraphicsDocument::::close()","389":"OFDGraphicsDocument::::close()","390":"OFDGraphicsDocument::::close()","391":"OFDGraphicsDocument::::close()","392":"OFDGraphicsDocument::::close()","393":"OFDGraphicsDocument::::close()"},"test_reverse_method_lines_dic":{"10":"OFDGraphicsDocumentTest::::newPage()","11":"OFDGraphicsDocumentTest::::newPage()","12":"OFDGraphicsDocumentTest::::newPage()","13":"OFDGraphicsDocumentTest::::newPage()","14":"OFDGraphicsDocumentTest::::newPage()","15":"OFDGraphicsDocumentTest::::newPage()","16":"OFDGraphicsDocumentTest::::newPage()","17":"OFDGraphicsDocumentTest::::newPage()","18":"OFDGraphicsDocumentTest::::newPage()"},"tests":[{"test_lines":[10,18],"covered_lines":[54,106,107,110,113,116,117,135,139,140,141,142,143,144,145,146,147,151,152,154,155,156,159,160,162,164,165,167,168,169,171,172,173,196,198,201,202,203,204,205,208,209,212,214,216,275,370,373,378,380,381,388,390,393],"label":"<<UNRECOGNISED_METHOD>>"}]},"/bernard/dataset_construction/prep/repos/ofdrw/ofdrw-graphics2d/src/main/java/org/ofdrw/graphics2d/OFDPageGraphics2D.java":{"class_content":["package org.ofdrw.graphics2d;\n","\n","import org.ofdrw.core.basicStructure.pageObj.Content;\n","import org.ofdrw.core.basicStructure.pageObj.Page;\n","import org.ofdrw.core.basicStructure.pageObj.layer.CT_Layer;\n","import org.ofdrw.core.basicStructure.pageObj.layer.Type;\n","import org.ofdrw.core.basicStructure.pageObj.layer.block.CT_PageBlock;\n","import org.ofdrw.core.basicStructure.pageObj.layer.block.ImageObject;\n","import org.ofdrw.core.basicType.ST_Array;\n","import org.ofdrw.core.basicType.ST_Box;\n","import org.ofdrw.core.basicType.ST_ID;\n","import org.ofdrw.core.basicType.ST_RefID;\n","import org.ofdrw.core.graph.pathObj.AbbreviatedData;\n","import org.ofdrw.core.graph.pathObj.CT_Path;\n","import org.ofdrw.core.pageDescription.clips.CT_Clip;\n","import org.ofdrw.core.pageDescription.clips.Clips;\n","import org.ofdrw.pkg.container.PageDir;\n","\n","import java.awt.*;\n","import java.awt.font.FontRenderContext;\n","import java.awt.font.GlyphVector;\n","import java.awt.font.TextLayout;\n","import java.awt.geom.*;\n","import java.awt.image.*;\n","import java.awt.image.renderable.RenderableImage;\n","import java.text.AttributedCharacterIterator;\n","import java.util.Hashtable;\n","import java.util.Map;\n","\n","/**\n"," * OFD 2D图形，实现AWT Graphics2D API。\n"," * 通过图形绘制生成OFD。\n"," * <p>\n"," * 在 PageGraphics2D 中所有接口参数单位均为 毫米(mm)。\n"," *\n"," * @author 权观宇\n"," * @since 2023-01-18 10:07:52\n"," */\n","public class OFDPageGraphics2D extends Graphics2D {\n","    /**\n","     * 文档上下文\n","     */\n","    private final OFDGraphicsDocument doc;\n","\n","    /**\n","     * 所属页面容器\n","     */\n","    private final PageDir pageDir;\n","\n","    /**\n","     * 页面对象\n","     */\n","    private final Page pageObj;\n","\n","    /**\n","     * 页面内容容器\n","     */\n","    private final CT_PageBlock container;\n","\n","\n","    /**\n","     * 绘制属性\n","     * <p>\n","     * 对 paint 与 stroke 都会反映到 DrawParam\n","     * <p>\n","     * stroke、fill 或 drawString 时，如果DrawParam与上次的不一样，则添加\n","     */\n","    private final OFDGraphics2DDrawParam drawParam;\n","\n","    /**\n","     * 绘制空间大小\n","     */\n","    private final ST_Box size;\n","\n","    /**\n","     * 页面在页树中的对象ID\n","     */\n","    public final ST_ID pageID;\n","\n","    /**\n","     * 设备配置对象\n","     * <p>\n","     * 用于兼容AWT接口\n","     */\n","    private OFDPageGraphicsConfiguration devConfig;\n","\n","    /**\n","     * 用于创建合适的字体规格\n","     */\n","    private final Graphics2D fmg;\n","\n","    /**\n","     * 创建2D图形对象\n","     *\n","     * @param doc     文档上下文\n","     * @param pageID  页对象ID\n","     * @param pageDir 页面目录\n","     * @param pageObj 页面对象\n","     * @param box     绘制空间大小\n","     */\n","    OFDPageGraphics2D(OFDGraphicsDocument doc, ST_ID pageID, PageDir pageDir, Page pageObj, ST_Box box) {\n","\n","        BufferedImage bi = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB);\n","        fmg = bi.createGraphics();\n","\n","        this.doc = doc;\n","        this.pageID = pageID;\n","        this.pageDir = pageDir;\n","        this.pageObj = pageObj;\n","        this.size = box;\n","        this.drawParam = new OFDGraphics2DDrawParam(doc, box);\n","\n","        // 页面内容\n","        final Content content = new Content();\n","        pageObj.setContent(content);\n","\n","        // 页层\n","        CT_Layer ctlayer = new CT_Layer();\n","        ctlayer.setType(Type.Body);\n","        ctlayer.setObjID(doc.newID());\n","        // 添加页面内容\n","        content.addLayer(ctlayer);\n","\n","        // 创建容器\n","        container = new CT_PageBlock();\n","        container.setObjID(doc.newID());\n","        // 添加到页面层\n","        ctlayer.addPageBlock(container);\n","    }\n","\n","    /**\n","     * 复制当前绘制上下文，并创建新的绘制上下文\n","     *\n","     * @param parent 复制对象\n","     */\n","    private OFDPageGraphics2D(OFDPageGraphics2D parent) {\n","        this.doc = parent.doc;\n","        this.pageID = parent.pageID;\n","        this.pageDir = parent.pageDir;\n","        this.pageObj = parent.pageObj;\n","        this.container = parent.container;\n","        this.size = parent.size.clone();\n","        this.drawParam = parent.drawParam.clone();\n","        this.devConfig = parent.devConfig;\n","        this.fmg = parent.fmg;\n","    }\n","\n","\n","    /**\n","     * 绘制图形\n","     *\n","     * @param s 图形\n","     */\n","    @Override\n","    public void draw(Shape s) {\n","        if (s == null) {\n","            return;\n","        }\n","\n","        // 将用户空间图形变换为设备空间坐标\n","        if (!this.drawParam.ctm.isIdentity()) {\n","            s = this.drawParam.ctm.createTransformedShape(s);\n","        }\n","\n","        final AbbreviatedData pData = OFDShapes.path(s);\n","        if (pData.size() == 0) {\n","            // 没有绘制参数时不填充\n","            return;\n","        }\n","\n","        CT_Path pathObj = new CT_Path();\n","        pathObj.setBoundary(this.size);\n","        pathObj.setStroke(true);\n","        pathObj.setAbbreviatedData(pData);\n","\n","        // 如果存在裁剪区域，设置裁剪\n","        if (this.drawParam.clip != null) {\n","            Clips clips = makeClip(s, new AffineTransform(this.drawParam.ctm));\n","            pathObj.setClips(clips);\n","        }\n","\n","        // 构造绘制参数\n","        ST_RefID dpId = this.drawParam.makeDrawParam();\n","        pathObj.setDrawParam(dpId);\n","\n","        container.addPageBlock(pathObj.toObj(doc.newID()));\n","    }\n","\n","\n","    /**\n","     * 使用当前的 字体(Font) 以及 画笔参数(Paint) 在指定位置上绘制文字\n","     * <p>\n","     * 文字将转换为图形路径绘制填充在OFD页面上\n","     * <p>\n","     * 第一个文字的基线坐标为传入的(x,y)参数位置。\n","     * <p>\n","     * 文字绘制的将被裁剪矩阵(clip)、变换矩阵影响。\n","     *\n","     * @param str 待绘制文字序列\n","     * @param x   首个文字基线X坐标\n","     * @param y   首个文字基线Y坐标\n","     */\n","    @Override\n","    public void drawString(String str, int x, int y) {\n","        GlyphVector gv = getFont().createGlyphVector(getFontRenderContext(), str);\n","        drawGlyphVector(gv, x, y);\n","    }\n","\n","    /**\n","     * 使用当前的 字体(Font) 以及 画笔参数(Paint) 在指定位置上绘制文字\n","     * <p>\n","     * 文字将转换为图形路径绘制填充在OFD页面上\n","     * <p>\n","     * 第一个文字的基线坐标为传入的(x,y)参数位置。\n","     * <p>\n","     * 文字绘制的将被裁剪矩阵(clip)、变换矩阵影响。\n","     *\n","     * @param str 待绘制文字序列\n","     * @param x   首个文字基线X坐标\n","     * @param y   首个文字基线Y坐标\n","     */\n","    @Override\n","    public void drawString(String str, float x, float y) {\n","        GlyphVector gv = getFont().createGlyphVector(getFontRenderContext(), str);\n","        drawGlyphVector(gv, x, y);\n","    }\n","\n","    /**\n","     * 使用迭代器绘制文字图形\n","     * <p>\n","     * 文字图形的绘制将绘制将受到画笔参数(Paint) 、被裁剪矩阵(clip)、变换矩阵影响（CTM）。\n","     * <p>\n","     * 第一个文字图形的基线坐标为传入的(x,y)参数位置。\n","     *\n","     * @param iterator 待绘制文本的迭代器\n","     * @param x        首个文字基线X坐标\n","     * @param y        首个文字基线Y坐标\n","     */\n","    @Override\n","    public void drawString(AttributedCharacterIterator iterator, int x, int y) {\n","        TextLayout layout = new TextLayout(iterator, getFontRenderContext());\n","        layout.draw(this, x, y);\n","    }\n","\n","    /**\n","     * 使用迭代器绘制文字图形\n","     * <p>\n","     * 文字图形的绘制将绘制将受到画笔参数(Paint) 、被裁剪矩阵(clip)、变换矩阵影响（CTM）。\n","     * <p>\n","     * 第一个文字图形的基线坐标为传入的(x,y)参数位置。\n","     *\n","     * @param iterator 待绘制文本的迭代器\n","     * @param x        首个文字基线X坐标\n","     * @param y        首个文字基线Y坐标\n","     */\n","    @Override\n","    public void drawString(AttributedCharacterIterator iterator, float x, float y) {\n","        TextLayout layout = new TextLayout(iterator, getFontRenderContext());\n","        layout.draw(this, x, y);\n","    }\n","\n","    /**\n","     * 在指定位置上绘制绘制图形路径数据，\n","     * <p>\n","     * 图形的绘制将绘制将受到画笔参数(Paint) 、被裁剪矩阵(clip)、变换矩阵影响（CTM）。\n","     * <p>\n","     * 第一个文字的基线坐标为传入的(x,y)参数位置。\n","     *\n","     * @param g 路径向量数据\n","     * @param x 图形绘制位置X坐标\n","     * @param y 图形绘制位置Y坐标\n","     */\n","    @Override\n","    public void drawGlyphVector(GlyphVector g, float x, float y) {\n","        Shape glyphOutline = g.getOutline(x, y);\n","        fill(glyphOutline);\n","    }\n","\n","    /**\n","     * 在指定坐标位置上绘制图片\n","     * <p>\n","     * 绘制的图片大小为图元原始大小\n","     *\n","     * @param img      待绘制图片\n","     * @param x        图片左上角 X坐标\n","     * @param y        图片左上角 Y坐标\n","     * @param observer 不使用\n","     * @return 固定值 true\n","     */\n","    @Override\n","    public boolean drawImage(Image img, int x, int y, ImageObserver observer) {\n","        if (img == null) {\n","            return true;\n","        }\n","        int w = img.getWidth(observer);\n","        if (w < 0) {\n","            return false;\n","        }\n","        int h = img.getHeight(observer);\n","        if (h < 0) {\n","            return false;\n","        }\n","        return drawImage(img, x, y, w, h, observer);\n","    }\n","\n","    /**\n","     * 将图片绘制于指定矩形区域内\n","     *\n","     * @param img      待绘制的图片\n","     * @param x        矩形左上角 X坐标\n","     * @param y        矩形左上角 Y坐标\n","     * @param width    矩形宽度\n","     * @param height   矩形高度\n","     * @param observer 忽略\n","     * @return 固定值 true\n","     */\n","    @Override\n","    public boolean drawImage(Image img, int x, int y, int width, int height, ImageObserver observer) {\n","        if (img == null) {\n","            return true;\n","        }\n","\n","        // 保存图片放置之前变换矩阵\n","        AffineTransform before = getTransform();\n","        // 计算缩放后的图片应用变换矩阵，并作为当前的变换矩阵\n","        AffineTransform imgCTM = new AffineTransform(before);\n","        imgCTM.concatenate(new AffineTransform(width, 0, 0, height, x, y));\n","\n","        /*\n","         * 构造图片图元\n","         */\n","        ST_ID objId = this.doc.addResImg(img);\n","        ImageObject imgObj = new ImageObject(doc.newID());\n","        imgObj.setCTM(trans(imgCTM));\n","        imgObj.setResourceID(objId.ref());\n","        // 由于Canvas是使用整个画布绘制元素，\n","        // 因此每个元素绘制时的边界也是整个画布大小。\n","        imgObj.setBoundary(this.size);\n","        // 透明度\n","        if (this.drawParam.gColor instanceof Color) {\n","            int alpha = ((Color) this.drawParam.gColor).getAlpha();\n","            if (alpha != 255) {\n","                imgObj.setAlpha(alpha);\n","            }\n","        }\n","\n","        ST_RefID dpId = this.drawParam.makeDrawParam();\n","        imgObj.setDrawParam(dpId);\n","\n","        // 如果存在裁剪区域，那么取裁剪区域与变换后图形的交集作为绘制内容\n","        if (this.drawParam.clip != null) {\n","            // 图片缩放后在画布上的路径\n","            // 说明：图片是通过一个 (x: 0,y: 0,w: 1,h: 1)的矩形通过变换矩阵放置到OFD上\n","            Shape imgShape = imgCTM.createTransformedShape(new Rectangle2D.Double(0, 0, 1, 1));\n","            Clips clips = makeClip(imgShape, imgCTM);\n","            imgObj.setClips(clips);\n","        }\n","        container.addPageBlock(imgObj);\n","        return true;\n","    }\n","\n","    /**\n","     * 在指定位置绘制图片\n","     * <p>\n","     * 图片保持原有大小，图片的透明部分将会使用指定颜色填充\n","     *\n","     * @param img      待绘制的图片\n","     * @param x        矩形左上角 X坐标\n","     * @param y        矩形左上角 Y坐标\n","     * @param bgcolor  背景颜色，用于填充图片透明部分\n","     * @param observer 忽略\n","     * @return 固定值 true\n","     */\n","    @Override\n","    public boolean drawImage(Image img, int x, int y, Color bgcolor, ImageObserver observer) {\n","        if (img == null) {\n","            return true;\n","        }\n","        int w = img.getWidth(null);\n","        if (w < 0) {\n","            return false;\n","        }\n","        int h = img.getHeight(null);\n","        if (h < 0) {\n","            return false;\n","        }\n","        return drawImage(img, x, y, w, h, bgcolor, observer);\n","    }\n","\n","    /**\n","     * 在指定矩形区域内绘制图片\n","     * <p>\n","     * 图片将伸缩至矩形区域大小，图片的透明部分将会使用指定颜色填充\n","     *\n","     * @param img      待绘制的图片\n","     * @param x        矩形左上角 X坐标\n","     * @param y        矩形左上角 Y坐标\n","     * @param width    矩形宽度\n","     * @param height   矩形高度\n","     * @param bgcolor  背景颜色，用于填充图片透明部分\n","     * @param observer 忽略\n","     * @return 固定值 true\n","     */\n","    @Override\n","    public boolean drawImage(Image img, int x, int y, int width, int height, Color bgcolor, ImageObserver observer) {\n","        Paint saved = getPaint();\n","        setPaint(bgcolor);\n","        fillRect(x, y, width, height);\n","        setPaint(saved);\n","        return drawImage(img, x, y, width, height, observer);\n","    }\n","\n","    /**\n","     * 绘制图片内某个矩形区域 到 画布的某个指定矩形区域，图片将会缩放适应目标区域\n","     *\n","     * @param img      待绘制图片\n","     * @param dx1      画布内 矩形左上角 X坐标（目的坐标）\n","     * @param dy1      画布内 矩形左上角 Y坐标（目的坐标）\n","     * @param dx2      画布内 矩形右下角 X坐标（目的坐标）\n","     * @param dy2      画布内 矩形右下角 Y坐标（目的坐标）\n","     * @param sx1      图片内 矩形左上角 X坐标（源坐标）\n","     * @param sy1      图片内 矩形左上角 Y坐标（源坐标）\n","     * @param sx2      图片内 矩形右下角 X坐标（源坐标）\n","     * @param sy2      图片内 矩形右下角 Y坐标（源坐标）\n","     * @param observer 忽略\n","     * @return 固定值 true\n","     */\n","    @Override\n","    public boolean drawImage(Image img, int dx1, int dy1, int dx2, int dy2, int sx1, int sy1, int sx2, int sy2, ImageObserver observer) {\n","        int w = dx2 - dx1;\n","        int h = dy2 - dy1;\n","        BufferedImage img2 = new BufferedImage(w, h, BufferedImage.TYPE_INT_ARGB);\n","        Graphics2D g2 = img2.createGraphics();\n","        g2.drawImage(img, 0, 0, w, h, sx1, sy1, sx2, sy2, null);\n","        return drawImage(img2, dx1, dy1, null);\n","    }\n","\n","    /**\n","     * 绘制图片内某个矩形区域 到 画布的某个指定矩形区域\n","     * <p>\n","     * 图片将会缩放适应目标区域，图片的透明部分将会使用指定颜色填充\n","     *\n","     * @param img      待绘制图片\n","     * @param dx1      画布内 矩形左上角 X坐标（目的坐标）\n","     * @param dy1      画布内 矩形左上角 Y坐标（目的坐标）\n","     * @param dx2      画布内 矩形右下角 X坐标（目的坐标）\n","     * @param dy2      画布内 矩形右下角 Y坐标（目的坐标）\n","     * @param sx1      图片内 矩形左上角 X坐标（源坐标）\n","     * @param sy1      图片内 矩形左上角 Y坐标（源坐标）\n","     * @param sx2      图片内 矩形右下角 X坐标（源坐标）\n","     * @param sy2      图片内 矩形右下角 Y坐标（源坐标）\n","     * @param bgcolor  背景颜色，用于填充透明部分\n","     * @param observer 忽略\n","     * @return 固定值 true\n","     */\n","    @Override\n","    public boolean drawImage(Image img, int dx1, int dy1, int dx2, int dy2, int sx1, int sy1, int sx2, int sy2, Color bgcolor, ImageObserver observer) {\n","        Paint saved = getPaint();\n","        setPaint(bgcolor);\n","        fillRect(dx1, dy1, dx2 - dx1, dy2 - dy1);\n","        setPaint(saved);\n","        return drawImage(img, dx1, dy1, dx2, dy2, sx1, sy1, sx2, sy2, observer);\n","    }\n","\n","\n","    /**\n","     * 通过变换矩阵在指定位置绘制图像\n","     *\n","     * @param img   待绘制的图像（可渲染图像接口）\n","     * @param xform 变换矩阵，指定图像绘制方式\n","     * @param obs   忽略\n","     * @return true\n","     */\n","    @Override\n","    public boolean drawImage(Image img, AffineTransform xform, ImageObserver obs) {\n","        AffineTransform old = this.getTransform();\n","        if (xform != null) {\n","            this.transform(xform);\n","        }\n","        boolean res = drawImage(img, 0, 0, obs);\n","        if (xform != null) {\n","            this.setTransform(old);\n","        }\n","        return res;\n","    }\n","\n","    /**\n","     * 在画布指定位置绘制图像，在绘制前将会使用 {@link BufferedImageOp} 过滤图像\n","     * <p>\n","     * 等价于\n","     * <pre>\n","     *       img1 = op.filter(img, null);\n","     *       drawImage(img1, new AffineTransform(1f,0f,0f,1f,x,y), null);\n","     * </pre>\n","     *\n","     * @param img 待绘制图像\n","     * @param op  图片渲染前的过滤器\n","     * @param x   图片左上角X坐标\n","     * @param y   图片左上角Y坐标\n","     */\n","    @Override\n","    public void drawImage(BufferedImage img, BufferedImageOp op, int x, int y) {\n","        BufferedImage img1 = img;\n","        if (op != null) {\n","            img1 = op.filter(img, null);\n","        }\n","        drawImage(img1, new AffineTransform(1f, 0f, 0f, 1f, x, y), null);\n","    }\n","\n","    /**\n","     * 通过变换矩阵在指定位置绘制图像\n","     *\n","     * @param img   待绘制的图像（可渲染图像接口）\n","     * @param xform 变换矩阵，指定图像绘制方式\n","     */\n","    @Override\n","    public void drawRenderedImage(RenderedImage img, AffineTransform xform) {\n","        if (img == null) {\n","            return;\n","        }\n","        BufferedImage bufferedImage = convert2Img(img);\n","        drawImage(bufferedImage, xform, null);\n","    }\n","\n","    /**\n","     * 通过变换矩阵在指定位置绘制图像\n","     *\n","     * @param img   待绘制的图像（可渲染图像接口）\n","     * @param xform 变换矩阵，指定图像绘制方式\n","     */\n","    @Override\n","    public void drawRenderableImage(RenderableImage img, AffineTransform xform) {\n","        if (img == null) {\n","            return;\n","        }\n","        RenderedImage rImg = img.createDefaultRendering();\n","        drawRenderedImage(rImg, xform);\n","    }\n","\n","\n","    /**\n","     * 填充图形\n","     *\n","     * @param s Java图形\n","     */\n","    @Override\n","    public void fill(Shape s) {\n","        if (s == null) {\n","            return;\n","        }\n","        // 将用户空间图形变换为设备空间坐标\n","        if (!this.drawParam.ctm.isIdentity()) {\n","            s = this.drawParam.ctm.createTransformedShape(s);\n","        }\n","\n","        final AbbreviatedData pData = OFDShapes.path(s);\n","        if (pData.size() == 0) {\n","            // 没有绘制参数时不填充\n","            return;\n","        }\n","\n","        CT_Path pathObj = new CT_Path();\n","        pathObj.setBoundary(this.size);\n","        pathObj.setFill(true);\n","        pathObj.setStroke(false);\n","        pathObj.setAbbreviatedData(pData);\n","        // 如果存在裁剪区域，设置裁剪\n","        if (this.drawParam.clip != null) {\n","            Clips clips = makeClip(s, new AffineTransform(this.drawParam.ctm));\n","            pathObj.setClips(clips);\n","        }\n","\n","        // 构造绘制参数\n","        ST_RefID dpId = this.drawParam.makeDrawParam();\n","        pathObj.setDrawParam(dpId);\n","\n","        container.addPageBlock(pathObj.toObj(doc.newID()));\n","\n","    }\n","\n","    /**\n","     * 检查在设备空间内容 指定的矩形区域是否与 指定形状存在交集。\n","     * <p>\n","     * onStroke 为false，表示检查指定形状整体是否与指定矩形相交。\n","     * <p>\n","     * onStroke 为true，表示检查指定形状的描边整体是否与指定矩形相交。\n","     *\n","     * @param rect     矩形区域\n","     * @param s        待检查的图形形状\n","     * @param onStroke 相交检查方式，true - 描边区域是否相交； false - 整个形状是否相交\n","     * @return true - 相交；false - 不相交\n","     */\n","    @Override\n","    public boolean hit(Rectangle rect, Shape s, boolean onStroke) {\n","        if (onStroke) {\n","            s = this.drawParam.gStroke.createStrokedShape(s);\n","        }\n","        s = this.drawParam.ctm.createTransformedShape(s);\n","        return s.intersects(rect);\n","    }\n","\n","    /**\n","     * 获取设备图形配置对象\n","     *\n","     * @return OFD页面虚拟图形配置对象\n","     */\n","    @Override\n","    public GraphicsConfiguration getDeviceConfiguration() {\n","        if (this.devConfig == null) {\n","            this.devConfig = new OFDPageGraphicsConfiguration(size.getWidth(), size.getHeight());\n","        }\n","        return this.devConfig;\n","    }\n","\n","    /**\n","     * 设置像素合成模式\n","     * <p>\n","     * 该方法原用于在设备绘制图像时，当前绘制的像素与原位置上已经存在的像素颜色的合成方式。\n","     * OFD中没有对应的合成效果，仅做兼容性实现。\n","     *\n","     * @param comp 合成方式\n","     */\n","    @Override\n","    public void setComposite(Composite comp) {\n","        this.drawParam.composite = comp;\n","    }\n","\n","    /**\n","     * 设置绘制参数\n","     *\n","     * @param paint 设置画笔颜色，用于填充和描边\n","     */\n","    @Override\n","    public void setPaint(Paint paint) {\n","        this.drawParam.setColor(paint);\n","    }\n","\n","    /**\n","     * 设置描边属性\n","     *\n","     * @param s 描边属性参数\n","     */\n","    @Override\n","    public void setStroke(Stroke s) {\n","        this.drawParam.setStroke(s);\n","    }\n","\n","    /**\n","     * 设置绘制器参数\n","     *\n","     * @param hintKey   参数名\n","     * @param hintValue 参数值\n","     */\n","    @Override\n","    public void setRenderingHint(RenderingHints.Key hintKey, Object hintValue) {\n","        this.drawParam.fontRenderCtx = null;\n","        this.drawParam.hints.put(hintKey, hintValue);\n","    }\n","\n","    /**\n","     * 获取绘制器参数值（为了兼容接口，无实际用途）\n","     *\n","     * @param hintKey 参数名\n","     * @return 可能为空\n","     */\n","    @Override\n","    public Object getRenderingHint(RenderingHints.Key hintKey) {\n","        return this.drawParam.hints.get(hintKey);\n","    }\n","\n","    /**\n","     * 替换绘制器参数（为了兼容接口，无实际用途）\n","     *\n","     * @param hints 新参数\n","     */\n","    @Override\n","    public void setRenderingHints(Map<?, ?> hints) {\n","        this.drawParam.fontRenderCtx = null;\n","        this.drawParam.hints.clear();\n","        this.drawParam.hints.putAll(hints);\n","    }\n","\n","    /**\n","     * 添加绘制器参数（为了兼容接口，无实际用途）\n","     *\n","     * @param hints 键值对\n","     */\n","    @Override\n","    public void addRenderingHints(Map<?, ?> hints) {\n","        this.drawParam.fontRenderCtx = null;\n","        this.drawParam.hints.putAll(hints);\n","    }\n","\n","    /**\n","     * 获取当前绘制器参数信息（为了兼容接口，无实际用途）\n","     *\n","     * @return 参数信息（只读）\n","     */\n","    @Override\n","    public RenderingHints getRenderingHints() {\n","        return (RenderingHints) this.drawParam.hints.clone();\n","    }\n","\n","    /**\n","     * 复制当前绘制上下文为新的上下文\n","     *\n","     * @return 复制的绘制上下文对象\n","     */\n","    @Override\n","    public Graphics create() {\n","        return new OFDPageGraphics2D(this);\n","    }\n","\n","    /**\n","     * 返回前景色\n","     *\n","     * @return 颜色，可能为null\n","     */\n","    @Override\n","    public Color getColor() {\n","        return this.drawParam.gForeground;\n","    }\n","\n","    /**\n","     * 设置前景色\n","     *\n","     * @param c 颜色\n","     */\n","    @Override\n","    public void setColor(Color c) {\n","        if (c == null) {\n","            return;\n","        }\n","        this.drawParam.setForeground(c);\n","    }\n","\n","    /**\n","     * setPaintMode 不实现\n","     */\n","    @Override\n","    public void setPaintMode() {\n","        // 不实现\n","    }\n","\n","    /**\n","     * setXORMode 不实现\n","     *\n","     * @param c1 the XOR alternation color\n","     */\n","    @Override\n","    public void setXORMode(Color c1) {\n","        // 不实现\n","    }\n","\n","    /**\n","     * 获取当前字体\n","     *\n","     * @return 字体\n","     */\n","    @Override\n","    public Font getFont() {\n","        return this.drawParam.font;\n","    }\n","\n","    /**\n","     * 设置绘图上下文的字体\n","     *\n","     * @param font 字体\n","     */\n","    @Override\n","    public void setFont(Font font) {\n","        this.drawParam.font = font;\n","    }\n","\n","    /**\n","     * 获取特定字体的字体规格\n","     *\n","     * @param f 特定字体\n","     * @return 字体规格\n","     */\n","    @Override\n","    public FontMetrics getFontMetrics(Font f) {\n","        return fmg.getFontMetrics(f);\n","    }\n","\n","    /**\n","     * 获取裁剪区域的外接矩形大小\n","     *\n","     * @return 裁剪区域外接矩形，可能为null\n","     */\n","    @Override\n","    public Rectangle getClipBounds() {\n","        Shape c = getClip();\n","        if (c == null) {\n","            return null;\n","        } else {\n","            return c.getBounds();\n","        }\n","    }\n","\n","    /**\n","     * 设置矩形裁剪区域\n","     *\n","     * @param x      裁剪矩形区域X坐标\n","     * @param y      裁剪矩形区域Y坐标\n","     * @param width  裁剪矩形矩形宽度\n","     * @param height 裁剪矩形矩形高度\n","     */\n","    @Override\n","    public void clipRect(int x, int y, int width, int height) {\n","        clip(new Rectangle2D.Double(x, y, width, height));\n","    }\n","\n","    /**\n","     * 设置矩形裁剪区域\n","     * <p>\n","     * 若已经存在裁剪区域那么旧的裁剪区域将会被新的裁剪区域覆盖\n","     *\n","     * @param x      裁剪矩形区域X坐标\n","     * @param y      裁剪矩形区域Y坐标\n","     * @param width  裁剪矩形矩形宽度\n","     * @param height 裁剪矩形矩形高度\n","     */\n","    @Override\n","    public void setClip(int x, int y, int width, int height) {\n","        setClip(new Rectangle2D.Double(x, y, width, height));\n","    }\n","\n","    /**\n","     * 获取裁剪区域\n","     *\n","     * @return 裁剪区域，可能为null\n","     */\n","    @Override\n","    public Shape getClip() {\n","        return this.drawParam.clip;\n","    }\n","\n","    /**\n","     * 设置裁剪区域\n","     * <p>\n","     * 若已经存在裁剪区域，那么新的裁剪区域与旧的裁剪区域取交集。\n","     *\n","     * @param s 裁剪区域，如果为 null 则清除裁剪区域\n","     */\n","    @Override\n","    public void clip(Shape s) {\n","        if (s == null) {\n","            this.drawParam.clip = null;\n","            return;\n","        }\n","\n","        // 如果不是单位矩阵则对路径进行变换\n","        if (!this.drawParam.ctm.isIdentity()) {\n","            s = this.drawParam.ctm.createTransformedShape(s);\n","        }\n","\n","        if (this.drawParam.clip == null) {\n","            this.drawParam.clip = new Area(s);\n","        } else {\n","            this.drawParam.clip.intersect(new Area(s));\n","        }\n","    }\n","\n","\n","    /**\n","     * 设置裁剪区域\n","     * <p>\n","     * 若已经存在裁剪区域那么旧的裁剪区域将会被新的裁剪区域覆盖\n","     *\n","     * @param s 裁剪区域，为null时表示清空裁剪区域\n","     */\n","    @Override\n","    public void setClip(Shape s) {\n","        if (s == null) {\n","            this.drawParam.clip = null;\n","            return;\n","        }\n","\n","        // 如果不是单位矩阵则对路径进行变换\n","        if (!this.drawParam.ctm.isIdentity()) {\n","            s = this.drawParam.ctm.createTransformedShape(s);\n","        }\n","        this.drawParam.clip = new Area(s);\n","    }\n","\n","    /**\n","     * 复制矩形区域\n","     *\n","     * @param x      the <i>x</i> coordinate of the source rectangle.\n","     * @param y      the <i>y</i> coordinate of the source rectangle.\n","     * @param width  the width of the source rectangle.\n","     * @param height the height of the source rectangle.\n","     * @param dx     the horizontal distance to copy the pixels.\n","     * @param dy     the vertical distance to copy the pixels.\n","     */\n","    @Override\n","    public void copyArea(int x, int y, int width, int height, int dx, int dy) {\n","        // 不予实现\n","    }\n","\n","    /**\n","     * 画线\n","     *\n","     * @param x1 起点X\n","     * @param y1 起点Y\n","     * @param x2 终点X\n","     * @param y2 终点Y\n","     */\n","    @Override\n","    public void drawLine(int x1, int y1, int x2, int y2) {\n","        draw(new Line2D.Double(x1, y1, x2, y2));\n","    }\n","\n","    /**\n","     * 填充矩形区域\n","     *\n","     * @param x      矩形区域左上角坐标X\n","     * @param y      矩形区域左上角坐标Y\n","     * @param width  矩形宽度\n","     * @param height 矩形高度\n","     */\n","    @Override\n","    public void fillRect(int x, int y, int width, int height) {\n","        fill(new Rectangle2D.Double(x, y, width, height));\n","    }\n","\n","    /**\n","     * 描边矩形\n","     *\n","     * @param x      矩形区域左上角坐标X\n","     * @param y      矩形区域左上角坐标Y\n","     * @param width  矩形宽度\n","     * @param height 矩形高度\n","     */\n","    @Override\n","    public void drawRect(int x, int y, int width, int height) {\n","        if ((width <= 0) || (height <= 0)) {\n","            return;\n","        }\n","        draw(new Rectangle2D.Double(x, y, width, height));\n","    }\n","\n","    /**\n","     * 使用背景色填充矩形区域\n","     *\n","     * @param x      填充区域矩形左上角 X 坐标\n","     * @param y      填充区域矩形左上角 X 坐标\n","     * @param width  矩形宽度\n","     * @param height 矩形高度\n","     */\n","    @Override\n","    public void clearRect(int x, int y, int width, int height) {\n","        if (this.drawParam.gBackground == null) {\n","            return;\n","        }\n","        Paint saved = getPaint();\n","        setPaint(this.drawParam.gBackground);\n","        fillRect(x, y, width, height);\n","        setPaint(saved);\n","    }\n","\n","    /**\n","     * 绘制圆角矩形\n","     *\n","     * @param x         矩形左上角X坐标\n","     * @param y         矩形左上角Y坐标\n","     * @param width     矩形宽度\n","     * @param height    矩形高度\n","     * @param arcWidth  水平圆角半径\n","     * @param arcHeight 垂直圆角半径\n","     */\n","    @Override\n","    public void drawRoundRect(int x, int y, int width, int height, int arcWidth, int arcHeight) {\n","        draw(new RoundRectangle2D.Double(x, y, width, height, arcWidth, arcHeight));\n","    }\n","\n","    /**\n","     * 填充圆角矩形\n","     *\n","     * @param x         矩形左上角X坐标\n","     * @param y         矩形左上角Y坐标\n","     * @param width     矩形宽度\n","     * @param height    矩形高度\n","     * @param arcWidth  水平圆角半径\n","     * @param arcHeight 垂直圆角半径\n","     */\n","    @Override\n","    public void fillRoundRect(int x, int y, int width, int height, int arcWidth, int arcHeight) {\n","        fill(new RoundRectangle2D.Double(x, y, width, height, arcWidth, arcHeight));\n","    }\n","\n","    /**\n","     * 使用当前颜色在矩形区域内描边椭圆形\n","     *\n","     * @param x      矩形区域左上角 X 坐标\n","     * @param y      矩形区域左上角 Y 坐标\n","     * @param width  矩形区域宽度\n","     * @param height 矩形区域高度\n","     */\n","    @Override\n","    public void drawOval(int x, int y, int width, int height) {\n","        draw(new Ellipse2D.Double(x, y, width, height));\n","    }\n","\n","    /**\n","     * 使用当前颜色在矩形区域内填充椭圆形\n","     *\n","     * @param x      矩形区域左上角 X 坐标\n","     * @param y      矩形区域左上角 Y 坐标\n","     * @param width  矩形区域宽度\n","     * @param height 矩形区域高度\n","     */\n","    @Override\n","    public void fillOval(int x, int y, int width, int height) {\n","        fill(new Ellipse2D.Double(x, y, width, height));\n","    }\n","\n","    /**\n","     * 在矩形区域内绘制圆弧\n","     * <p>\n","     * 注意：0度位于时钟3点钟位置，正数角度表示顺时针旋转，负数为逆时针，圆形位于矩形中心。\n","     *\n","     * @param x          矩形区域左上角 X 坐标\n","     * @param y          矩形区域左上角 Y 坐标\n","     * @param width      矩形区域宽度\n","     * @param height     矩形区域高度\n","     * @param startAngle 圆弧开始角度\n","     * @param arcAngle   圆弧结束角度\n","     */\n","    @Override\n","    public void drawArc(int x, int y, int width, int height, int startAngle, int arcAngle) {\n","        draw(new Arc2D.Double(x, y, width, height, startAngle, arcAngle, Arc2D.OPEN));\n","    }\n","\n","    /**\n","     * 在矩形区域内填充扇形\n","     * <p>\n","     * 注意：0度位于时钟3点钟位置，正数角度表示顺时针旋转，负数为逆时针，圆形位于矩形中心。\n","     * <p>\n","     * 圆弧起点和终点为圆心\n","     *\n","     * @param x          矩形区域左上角 X 坐标\n","     * @param y          矩形区域左上角 Y 坐标\n","     * @param width      矩形区域宽度\n","     * @param height     矩形区域高度\n","     * @param startAngle 圆弧开始角度\n","     * @param arcAngle   圆弧结束角度\n","     */\n","    @Override\n","    public void fillArc(int x, int y, int width, int height, int startAngle, int arcAngle) {\n","        fill(new Arc2D.Double(x, y, width, height, startAngle, arcAngle, Arc2D.PIE));\n","    }\n","\n","    /**\n","     * 绘制折线\n","     * <p>\n","     * 注意绘制的折线是一个不闭合的图形\n","     *\n","     * @param xPoints 折点 X坐标 序列\n","     * @param yPoints 折点 Y坐标 序列\n","     * @param nPoints 折点总数\n","     */\n","    @Override\n","    public void drawPolyline(int[] xPoints, int[] yPoints, int nPoints) {\n","        GeneralPath p = new GeneralPath();\n","        p.moveTo(xPoints[0], yPoints[0]);\n","        for (int i = 1; i < nPoints; i++) {\n","            p.lineTo(xPoints[i], yPoints[i]);\n","        }\n","        draw(p);\n","    }\n","\n","    /**\n","     * 使用当前颜色和描边属性描边多边形\n","     *\n","     * @param xPoints 多边形 X坐标 序列\n","     * @param yPoints 多边形 Y坐标 序列\n","     * @param nPoints 多边形点数量\n","     */\n","    @Override\n","    public void drawPolygon(int[] xPoints, int[] yPoints, int nPoints) {\n","        GeneralPath p = new GeneralPath();\n","        p.moveTo(xPoints[0], yPoints[0]);\n","        for (int i = 1; i < nPoints; i++) {\n","            p.lineTo(xPoints[i], yPoints[i]);\n","        }\n","        p.closePath();\n","        draw(p);\n","    }\n","\n","    /**\n","     * 使用当前颜色填充多边形\n","     *\n","     * @param xPoints 多边形 X坐标 序列\n","     * @param yPoints 多边形 Y坐标 序列\n","     * @param nPoints 多边形点数量\n","     */\n","    @Override\n","    public void fillPolygon(int[] xPoints, int[] yPoints, int nPoints) {\n","        GeneralPath p = new GeneralPath();\n","        p.moveTo(xPoints[0], yPoints[0]);\n","        for (int i = 1; i < nPoints; i++) {\n","            p.lineTo(xPoints[i], yPoints[i]);\n","        }\n","        p.closePath();\n","        fill(p);\n","    }\n","\n","    /**\n","     * 平移原点坐标\n","     *\n","     * @param x x方向的平移距离\n","     * @param y y方向的平移距离\n","     */\n","    @Override\n","    public void translate(int x, int y) {\n","        translate(x, (double) y);\n","        this.drawParam.ref = null;\n","    }\n","\n","    /**\n","     * 平移原点\n","     *\n","     * @param tx x方向的平移距离\n","     * @param ty y方向的平移距离\n","     */\n","    @Override\n","    public void translate(double tx, double ty) {\n","        this.drawParam.ctm.translate(tx, ty);\n","        this.drawParam.ref = null;\n","    }\n","\n","    /**\n","     * 绕原点旋转画布\n","     *\n","     * @param theta 旋转角度，计算方式为 {@code theta = angle * Math.PI / 180 }，负数表示逆时针。\n","     */\n","    @Override\n","    public void rotate(double theta) {\n","        this.drawParam.ctm.rotate(theta);\n","        this.drawParam.ref = null;\n","    }\n","\n","    /**\n","     * 绕指定点旋转画布\n","     * <p>\n","     * 等价于\n","     * <pre>\n","     *          translate(x, y);\n","     *          rotate(theta);\n","     *          translate(-x, -y);\n","     * </pre>\n","     *\n","     * @param theta 旋转角度，计算方式为 {@code theta = angle * Math.PI / 180 }，负数表示逆时针。\n","     * @param x     旋转点X坐标\n","     * @param y     旋转点Y坐标\n","     */\n","    @Override\n","    public void rotate(double theta, double x, double y) {\n","        translate(x, y);\n","        rotate(theta);\n","        translate(-x, -y);\n","        this.drawParam.ref = null;\n","    }\n","\n","    /**\n","     * 坐标缩放\n","     *\n","     * @param sx 缩放当前绘图的宽度 (1=100%, 0.5=50%, 2=200%, 依次类推)\n","     * @param sy 缩放当前绘图的高度 (1=100%, 0.5=50%, 2=200%, 依次类推)\n","     */\n","    @Override\n","    public void scale(double sx, double sy) {\n","        this.drawParam.ctm.scale(sx, sy);\n","        this.drawParam.ref = null;\n","    }\n","\n","    /**\n","     * 切变\n","     *\n","     * @param shx X方向切变角度\n","     * @param shy Y方向切变角度\n","     */\n","    @Override\n","    public void shear(double shx, double shy) {\n","        this.drawParam.ctm.shear(shx, shy);\n","        this.drawParam.ref = null;\n","    }\n","\n","    /**\n","     * 图形变换\n","     *\n","     * @param tx 变换矩阵\n","     */\n","    @Override\n","    public void transform(AffineTransform tx) {\n","        if (tx == null) {\n","            return;\n","        }\n","        this.drawParam.ctm.concatenate(tx);\n","        this.drawParam.ref = null;\n","    }\n","\n","    /**\n","     * 设置变换矩阵\n","     *\n","     * @param tx 变换矩阵\n","     */\n","    @Override\n","    public void setTransform(AffineTransform tx) {\n","        if (tx == null) {\n","            tx = new AffineTransform();\n","        }\n","        this.drawParam.ctm = new AffineTransform(tx);\n","        this.drawParam.ref = null;\n","    }\n","\n","    /**\n","     * 返回当前的变换矩阵\n","     *\n","     * @return 变换矩阵\n","     */\n","    @Override\n","    public AffineTransform getTransform() {\n","        return new AffineTransform(this.drawParam.ctm);\n","    }\n","\n","    /**\n","     * 获取绘制参数\n","     *\n","     * @return 绘制参数\n","     */\n","    @Override\n","    public Paint getPaint() {\n","        return this.drawParam.gColor;\n","    }\n","\n","    /**\n","     * 获取像素合成模式\n","     * <p>\n","     * 该属性只是为了兼容AWT接口保留，并无实际用途。\n","     *\n","     * @return 获取像素合成模式\n","     */\n","    @Override\n","    public Composite getComposite() {\n","        return this.drawParam.composite;\n","    }\n","\n","    /**\n","     * 设置背景颜色\n","     *\n","     * @param color 该颜色将用于 <code>clearRect</code> 清空区域\n","     */\n","    @Override\n","    public void setBackground(Color color) {\n","        this.drawParam.gBackground = color;\n","    }\n","\n","    /**\n","     * 获取背景颜色\n","     *\n","     * @return 背景颜色\n","     */\n","    @Override\n","    public Color getBackground() {\n","        return this.drawParam.gBackground;\n","    }\n","\n","    /**\n","     * 获取描边属性\n","     *\n","     * @return 描述属性 {@link BasicStroke}\n","     */\n","    @Override\n","    public Stroke getStroke() {\n","        return this.drawParam.gStroke;\n","    }\n","\n","    /**\n","     * 获取绘制上下文中的字体绘制上下文\n","     *\n","     * @return 字体绘制上下文\n","     */\n","    @Override\n","    public FontRenderContext getFontRenderContext() {\n","        return this.drawParam.getFontRenderContext();\n","    }\n","\n","\n","    /**\n","     * 销毁绘制上下文\n","     */\n","    @Override\n","    public void dispose() {\n","\n","    }\n","\n","    /**\n","     * 构造裁剪区域\n","     * <p>\n","     * 如果图形完全处于裁剪区域中，那么不裁剪\n","     *\n","     * @param s      图形对象\n","     * @param objCTM 对象当前的变换矩阵\n","     * @return 裁剪区 或 null（图形完全处于裁剪区）\n","     */\n","    private Clips makeClip(Shape s, AffineTransform objCTM) {\n","        Rectangle2D bounds = s.getBounds2D();\n","\n","        // 由于 double 的特性存在精度误差，为了减少由精度误差造成 contains 判断错误\n","        // 这里将原始矩形缩小较小的偏差 10^-6，保证边界区域也能较好的处理。\n","        double w = bounds.getWidth() - 0.000001;\n","        double h = bounds.getHeight() - 0.000001;\n","        bounds = new Rectangle2D.Double(\n","                bounds.getX() + 0.000001,\n","                bounds.getY() + 0.000001,\n","                w < 0 ? 0 : w,\n","                h < 0 ? 0 : h);\n","        if (this.drawParam.clip.contains(bounds)){\n","            // 若图形外边框都处于裁剪区域内部，那么忽略裁剪区域\n","        }else {\n","            Clips clips = new Clips();\n","            org.ofdrw.core.pageDescription.clips.Area area = new org.ofdrw.core.pageDescription.clips.Area();\n","            CT_Path clipObj = new CT_Path().setAbbreviatedData(OFDShapes.path(new GeneralPath(this.drawParam.clip)));\n","            clipObj.setFill(true);\n","            clipObj.setBoundary(this.size);\n","            try {\n","                // 由于图元内的裁剪区域受到图元的变换矩阵影响，\n","                // 而裁剪区域是位于未受到变换的原始画布上的区域，\n","                // 因此在图元内部的裁剪区为需要叠加一个图元内变换的逆变换，\n","                // 才可以实现向外部空间的映射。\n","                AffineTransform inverse = objCTM.createInverse();\n","                clipObj.setCTM(trans(inverse));\n","                area.setClipObj(clipObj);\n","                clips.addClip(new CT_Clip().addArea(area));\n","                return clips;\n","            } catch (NoninvertibleTransformException e) {\n","                // 初等变换都可逆，若非初等变换那么忽略裁剪区\n","            }\n","        }\n","        return null;\n","    }\n","\n","    /**\n","     * 将可渲染对象转换为缓存图像\n","     *\n","     * @param img 可渲染对象\n","     * @return 缓存图像\n","     */\n","    private BufferedImage convert2Img(RenderedImage img) {\n","        if (img instanceof BufferedImage) {\n","            return (BufferedImage) img;\n","        }\n","        final int width = img.getWidth();\n","        final int height = img.getHeight();\n","        final ColorModel cm = img.getColorModel();\n","        final boolean isAlphaPremultiplied = cm.isAlphaPremultiplied();\n","\n","        final WritableRaster raster = cm.createCompatibleWritableRaster(width, height);\n","\n","        final Hashtable<String, Object> properties = new Hashtable<>();\n","        String[] keys = img.getPropertyNames();\n","        if (keys != null) {\n","            for (String key : keys) {\n","                properties.put(key, img.getProperty(key));\n","            }\n","        }\n","        final BufferedImage result = new BufferedImage(cm, raster, isAlphaPremultiplied, properties);\n","        img.copyData(raster);\n","        return result;\n","    }\n","\n","    /**\n","     * 转为AWT变换矩阵 {@link AffineTransform} 为 OFD 类型变换矩阵{@link ST_Array}\n","     *\n","     * @param tx AWT变换矩阵\n","     * @return OFD ST_Array\n","     */\n","    public ST_Array trans(AffineTransform tx) {\n","          /*\n","            m00 m10 0    a b 0\n","            m01 m11 0  = c d 0\n","            m02 m12 1    e f 1\n","       */\n","        return new ST_Array(tx.getScaleX(), tx.getShearY(), tx.getShearX(), tx.getScaleY(), tx.getTranslateX(), tx.getTranslateY());\n","    }\n","}\n"],"test_content":["package org.ofdrw.graphics2d;\n","\n","import org.junit.jupiter.api.Test;\n","import org.ofdrw.pkg.tool.ElemCup;\n","\n","import javax.imageio.ImageIO;\n","import java.awt.*;\n","import java.awt.geom.*;\n","import java.awt.image.BufferedImage;\n","import java.nio.file.Path;\n","import java.nio.file.Paths;\n","\n","import static org.junit.jupiter.api.Assertions.assertEquals;\n","\n","class OFDPageGraphics2DTest {\n","\n","    /**\n","     * 轴向渐变填充\n","     */\n","    @Test\n","    void linearGradientPaint() throws Exception {\n","        final Path dst = Paths.get(\"target/linearGradientPaint.ofd\");\n","        try (OFDGraphicsDocument doc = new OFDGraphicsDocument(dst)) {\n","            OFDPageGraphics2D g = doc.newPage(null);\n","\n","            Point2D start = new Point2D.Float(0, 0);\n","            Point2D end = new Point2D.Float(50, 50);\n","            float[] dist = {0.0f, 0.2f, 1.0f};\n","            Color[] colors = {Color.RED, Color.WHITE, Color.BLUE};\n","            LinearGradientPaint p =\n","                    new LinearGradientPaint(start, end, dist, colors);\n","            g.setPaint(p);\n","            g.fillRect(0, 0, 50, 50);\n","        }\n","        System.out.println(\">> \" + dst.toAbsolutePath());\n","    }\n","\n","    /**\n","     * 矩形描边\n","     */\n","\n","    @Test\n","    void drawRoundRect() throws Exception {\n","        final Path dst = Paths.get(\"target/drawRoundRect.ofd\");\n","        try (OFDGraphicsDocument doc = new OFDGraphicsDocument(dst)) {\n","            OFDPageGraphics2D g = doc.newPage(null);\n","            g.drawRoundRect(10, 10, 20, 40, 5, 5);\n","        }\n","        System.out.println(\">> \" + dst.toAbsolutePath());\n","    }\n","\n","    /**\n","     * 填充圆角矩形\n","     */\n","    @Test\n","    void fillRoundRect() throws Exception {\n","        final Path dst = Paths.get(\"target/fillRoundRect.ofd\");\n","        try (OFDGraphicsDocument doc = new OFDGraphicsDocument(dst)) {\n","            OFDPageGraphics2D g = doc.newPage(200, 200);\n","            g.setColor(Color.red);\n","            g.fillRoundRect(150, 50, 100, 100, 50, 25);\n","        }\n","        System.out.println(\">> \" + dst.toAbsolutePath());\n","    }\n","\n","\n","    /**\n","     * 自定义图形和描边样式\n","     */\n","    @Test\n","    void draw() throws Exception {\n","        final Path dst = Paths.get(\"target/draw.ofd\");\n","        try (OFDGraphicsDocument doc = new OFDGraphicsDocument(dst)) {\n","            OFDPageGraphics2D g = doc.newPage(null);\n","            int[] x2Points = {0, 100, 0, 100};\n","            int[] y2Points = {0, 50, 50, 0};\n","            GeneralPath polyline = new GeneralPath(GeneralPath.WIND_EVEN_ODD, x2Points.length);\n","            polyline.moveTo(x2Points[0], y2Points[0]);\n","            for (int index = 1; index < x2Points.length; index++) {\n","                polyline.lineTo(x2Points[index], y2Points[index]);\n","            }\n","            polyline.closePath();\n","\n","            g.draw(polyline);\n","        }\n","        System.out.println(\">> \" + dst.toAbsolutePath());\n","    }\n","\n","    /**\n","     * 描边\n","     */\n","    @Test\n","    void drawStroke() throws Exception {\n","        final Path dst = Paths.get(\"target/drawStroke.ofd\");\n","        try (OFDGraphicsDocument doc = new OFDGraphicsDocument(dst)) {\n","            OFDPageGraphics2D g2 = doc.newPage(500, 500);\n","            final BasicStroke dashed =\n","                    new BasicStroke(1.0f,\n","                            BasicStroke.CAP_BUTT,\n","                            BasicStroke.JOIN_MITER,\n","                            10.0f, new float[]{10.0f}, 0.0f);\n","            g2.setStroke(dashed);\n","            g2.draw(new RoundRectangle2D.Double(10, 10, 400, 100, 10, 10));\n","        }\n","        System.out.println(\">> \" + dst.toAbsolutePath());\n","    }\n","\n","    /**\n","     * 圆弧填充\n","     */\n","    @Test\n","    void drawArc() throws Exception {\n","        final Path dst = Paths.get(\"target/drawArc.ofd\");\n","        try (OFDGraphicsDocument doc = new OFDGraphicsDocument(dst)) {\n","            OFDPageGraphics2D g = doc.newPage(500, 500);\n","            g.setPaint(Color.RED);\n","            g.fillArc(20, 20, 200, 200, 200, 200);\n","        }\n","        System.out.println(\">> \" + dst.toAbsolutePath());\n","    }\n","\n","    /**\n","     * 绘制圆弧\n","     */\n","    @Test\n","    void fillArc() throws Exception {\n","        final Path dst = Paths.get(\"target/fillArc.ofd\");\n","        try (OFDGraphicsDocument doc = new OFDGraphicsDocument(dst)) {\n","            OFDPageGraphics2D g = doc.newPage(null);\n","            g.setPaint(Color.RED);\n","            g.fillArc(10, 10, 200, 200, 50, 50);\n","        }\n","        System.out.println(\">> \" + dst.toAbsolutePath());\n","    }\n","\n","    /**\n","     * 清空指定区域\n","     */\n","    @Test\n","    void clearRect() throws Exception {\n","        final Path dst = Paths.get(\"target/clearRect.ofd\");\n","        try (OFDGraphicsDocument doc = new OFDGraphicsDocument(dst)) {\n","            OFDPageGraphics2D g = doc.newPage(null);\n","            g.setPaint(Color.RED);\n","            g.fillArc(0, 0, 100, 100, 0, 360);\n","            g.clearRect(30, 30, 10, 10);\n","        }\n","        System.out.println(\">> \" + dst.toAbsolutePath());\n","    }\n","\n","    /**\n","     * 填充椭圆\n","     */\n","    @Test\n","    void fillOval() throws Exception {\n","        final Path dst = Paths.get(\"target/fillOval.ofd\");\n","        try (OFDGraphicsDocument doc = new OFDGraphicsDocument(dst)) {\n","            OFDPageGraphics2D g = doc.newPage(null);\n","            g.setPaint(Color.RED);\n","            g.fillOval(25, 25, 120, 60);\n","        }\n","        System.out.println(\">> \" + dst.toAbsolutePath());\n","    }\n","\n","    /**\n","     * 描边椭圆\n","     */\n","    @Test\n","    void drawOval() throws Exception {\n","        final Path dst = Paths.get(\"target/drawOval.ofd\");\n","        try (OFDGraphicsDocument doc = new OFDGraphicsDocument(dst)) {\n","            OFDPageGraphics2D g = doc.newPage(null);\n","            g.setPaint(Color.RED);\n","            g.drawOval(25, 25, 120, 60);\n","        }\n","        System.out.println(\">> \" + dst.toAbsolutePath());\n","    }\n","\n","    /**\n","     * 折线\n","     */\n","    @Test\n","    void drawPolyline() throws Exception {\n","        final Path dst = Paths.get(\"target/drawPolyline.ofd\");\n","        try (OFDGraphicsDocument doc = new OFDGraphicsDocument(dst)) {\n","            OFDPageGraphics2D g = doc.newPage(null);\n","            g.setPaint(Color.RED);\n","            int[] xs = {25, 75, 125, 85, 125, 75, 25, 65};\n","            int[] ys = {50, 90, 50, 100, 150, 110, 150, 100};\n","            g.drawPolyline(xs, ys, 8);\n","        }\n","        System.out.println(\">> \" + dst.toAbsolutePath());\n","    }\n","\n","    /**\n","     * 自定义多边形描边\n","     */\n","    @Test\n","    void drawPolygon() throws Exception {\n","        final Path dst = Paths.get(\"target/drawPolygon.ofd\");\n","        try (OFDGraphicsDocument doc = new OFDGraphicsDocument(dst)) {\n","            OFDPageGraphics2D g = doc.newPage(null);\n","            g.setPaint(Color.RED);\n","            int[] xpoints = {25, 145, 25, 145, 25};\n","            int[] ypoints = {25, 25, 145, 145, 25};\n","            int npoints = 5;\n","\n","            g.drawPolygon(xpoints, ypoints, npoints);\n","        }\n","        System.out.println(\">> \" + dst.toAbsolutePath());\n","    }\n","\n","    /**\n","     * 自定义多边形填充\n","     */\n","    @Test\n","    void fillPolygon() throws Exception {\n","        final Path dst = Paths.get(\"target/fillPolygon.ofd\");\n","        try (OFDGraphicsDocument doc = new OFDGraphicsDocument(dst)) {\n","            OFDPageGraphics2D g = doc.newPage(null);\n","            g.setPaint(Color.RED);\n","            int[] xpoints = {25, 145, 25, 145, 25};\n","            int[] ypoints = {25, 25, 145, 145, 25};\n","            int npoints = 5;\n","\n","            g.fillPolygon(xpoints, ypoints, npoints);\n","        }\n","        System.out.println(\">> \" + dst.toAbsolutePath());\n","    }\n","\n","\n","    @Test\n","    void drawImage() throws Exception {\n","        final Path dst = Paths.get(\"target/drawImage.ofd\");\n","        try (OFDGraphicsDocument doc = new OFDGraphicsDocument(dst)) {\n","            OFDPageGraphics2D g = doc.newPage(500, 500);\n","            Path file = Paths.get(\"src/test/resources\", \"eg_tulip.jpg\");\n","            BufferedImage img1 = ImageIO.read(file.toFile());\n","\n","            int width = img1.getWidth(null);\n","            int height = img1.getHeight(null);\n","            g.drawImage(img1, 10, 10, width, height, null);\n","        }\n","        System.out.println(\">> \" + dst.toAbsolutePath());\n","    }\n","\n","    @Test\n","    void drawImage2() throws Exception {\n","        final Path dst = Paths.get(\"target/drawImage2.ofd\");\n","        try (OFDGraphicsDocument doc = new OFDGraphicsDocument(dst)) {\n","            OFDPageGraphics2D g = doc.newPage(500, 500);\n","            Path file = Paths.get(\"src/test/resources\", \"eg_tulip.jpg\");\n","            BufferedImage img1 = ImageIO.read(file.toFile());\n","\n","            g.drawImage(img1, 10, 10, null);\n","        }\n","        System.out.println(\">> \" + dst.toAbsolutePath());\n","    }\n","\n","    @Test\n","    void drawImageAffineTransform() throws Exception {\n","        final Path dst = Paths.get(\"target/drawImageAffineTransform.ofd\");\n","        try (OFDGraphicsDocument doc = new OFDGraphicsDocument(dst)) {\n","            OFDPageGraphics2D g = doc.newPage(500, 500);\n","            Path file = Paths.get(\"src/test/resources\", \"eg_tulip.jpg\");\n","            BufferedImage img1 = ImageIO.read(file.toFile());\n","\n","            g.drawImage(img1, null, 10, 10);\n","            g.setPaint(Color.RED);\n","            g.fillRect(0, 0, 30, 30);\n","        }\n","        System.out.println(\">> \" + dst.toAbsolutePath());\n","    }\n","\n","\n","    /**\n","     * 背景颜色填充透明图片\n","     */\n","    @Test\n","    void drawImageBackground() throws Exception {\n","        final Path dst = Paths.get(\"target/drawImageBackground.ofd\");\n","        try (OFDGraphicsDocument doc = new OFDGraphicsDocument(dst)) {\n","            OFDPageGraphics2D g = doc.newPage(500, 500);\n","            Path file = Paths.get(\"src/test/resources\", \"empty.png\");\n","            BufferedImage img1 = ImageIO.read(file.toFile());\n","\n","            g.drawImage(img1, 10, 10, 400, 400, Color.red, null);\n","        }\n","        System.out.println(\">> \" + dst.toAbsolutePath());\n","    }\n","\n","    @Test\n","    void drawImageBackground2() throws Exception {\n","        final Path dst = Paths.get(\"target/drawImageBackground2.ofd\");\n","        try (OFDGraphicsDocument doc = new OFDGraphicsDocument(dst)) {\n","            OFDPageGraphics2D g = doc.newPage(500, 500);\n","            Path file = Paths.get(\"src/test/resources\", \"empty.png\");\n","            BufferedImage img1 = ImageIO.read(file.toFile());\n","\n","            g.drawImage(img1, 10, 10, Color.red, null);\n","        }\n","        System.out.println(\">> \" + dst.toAbsolutePath());\n","    }\n","\n","    /**\n","     * 绘制部分图片到页面\n","     */\n","    @Test\n","    void drawImagePiece() throws Exception {\n","        final Path dst = Paths.get(\"target/drawImagePiece.ofd\");\n","        try (OFDGraphicsDocument doc = new OFDGraphicsDocument(dst)) {\n","            OFDPageGraphics2D g = doc.newPage(500, 500);\n","            Path file = Paths.get(\"src/test/resources\", \"empty.png\");\n","            BufferedImage img1 = ImageIO.read(file.toFile());\n","\n","            g.drawImage(img1, 0, 0, 200, 200, 200, 200, 400, 400, null);\n","        }\n","        System.out.println(\">> \" + dst.toAbsolutePath());\n","    }\n","\n","    @Test\n","    void drawImagePieceColor() throws Exception {\n","        final Path dst = Paths.get(\"target/drawImagePieceColor.ofd\");\n","        try (OFDGraphicsDocument doc = new OFDGraphicsDocument(dst)) {\n","            OFDPageGraphics2D g = doc.newPage(500, 500);\n","            Path file = Paths.get(\"src/test/resources\", \"empty.png\");\n","            BufferedImage img1 = ImageIO.read(file.toFile());\n","\n","            g.drawImage(img1, 0, 0, 200, 200, 200, 200, 400, 400, Color.RED, null);\n","        }\n","        System.out.println(\">> \" + dst.toAbsolutePath());\n","    }\n","\n","    /**\n","     * 平移\n","     */\n","    @Test\n","    void translate() throws Exception {\n","        final Path dst = Paths.get(\"target/translate.ofd\");\n","        try (OFDGraphicsDocument doc = new OFDGraphicsDocument(dst)) {\n","            OFDPageGraphics2D g = doc.newPage(200, 200);\n","            g.translate(50, 50);\n","            g.setColor(Color.red);\n","            g.fillRect(0, 0, 20, 20);\n","        }\n","        System.out.println(\">> \" + dst.toAbsolutePath());\n","    }\n","\n","    /**\n","     * 旋转\n","     */\n","    @Test\n","    void rotate() throws Exception {\n","        final Path dst = Paths.get(\"target/rotate.ofd\");\n","        try (OFDGraphicsDocument doc = new OFDGraphicsDocument(dst)) {\n","            OFDPageGraphics2D g = doc.newPage(200, 200);\n","            g.setColor(Color.red);\n","            g.rotate(45 * Math.PI / 180d);\n","            g.fillRect(0, 0, 20, 20);\n","        }\n","        System.out.println(\">> \" + dst.toAbsolutePath());\n","    }\n","\n","    /**\n","     * 饶某点旋转画布\n","     */\n","    @Test\n","    void rotate2() throws Exception {\n","        final Path dst = Paths.get(\"target/rotate2.ofd\");\n","        try (OFDGraphicsDocument doc = new OFDGraphicsDocument(dst)) {\n","            OFDPageGraphics2D g = doc.newPage(200, 200);\n","            g.setColor(Color.red);\n","            g.rotate(45 * Math.PI / 180d, 100, 100);\n","            g.fillRect(100, 100, 50, 50);\n","        }\n","        System.out.println(\">> \" + dst.toAbsolutePath());\n","    }\n","\n","    @Test\n","    void translateRotate() throws Exception {\n","        final Path dst = Paths.get(\"target/translateRotate.ofd\");\n","        try (OFDGraphicsDocument doc = new OFDGraphicsDocument(dst)) {\n","            OFDPageGraphics2D g = doc.newPage(200, 200);\n","            g.setColor(Color.red);\n","            g.translate(100, 100);\n","            g.rotate(45 * Math.PI / 180d);\n","            g.fillRect(0, 0, 50, 50);\n","        }\n","        System.out.println(\">> \" + dst.toAbsolutePath());\n","    }\n","\n","    /**\n","     * 缩放\n","     */\n","    @Test\n","    void scale() throws Exception {\n","        final Path dst = Paths.get(\"target/scale.ofd\");\n","        try (OFDGraphicsDocument doc = new OFDGraphicsDocument(dst)) {\n","            OFDPageGraphics2D g = doc.newPage(200, 200);\n","            g.setColor(Color.red);\n","            g.scale(2, 2);\n","            g.drawRect(0, 0, 10, 10);\n","            g.scale(2, 2);\n","            g.drawRect(0, 0, 10, 10);\n","        }\n","        System.out.println(\">> \" + dst.toAbsolutePath());\n","    }\n","\n","\n","    /**\n","     * 切变\n","     */\n","    @Test\n","    void shear() throws Exception {\n","        final Path dst = Paths.get(\"target/shear.ofd\");\n","        try (OFDGraphicsDocument doc = new OFDGraphicsDocument(dst)) {\n","            OFDPageGraphics2D g = doc.newPage(200, 200);\n","            g.setColor(Color.red);\n","            g.shear(10 * Math.PI / 180d, 10 * Math.PI / 180d);\n","            g.fillRect(0, 0, 50, 50);\n","        }\n","        System.out.println(\">> \" + dst.toAbsolutePath());\n","    }\n","\n","    /**\n","     * 获取但前变换矩阵\n","     */\n","    @Test\n","    void getTransform() throws Exception {\n","        final Path dst = Paths.get(\"target/getTransform.ofd\");\n","        try (OFDGraphicsDocument doc = new OFDGraphicsDocument(dst)) {\n","            OFDPageGraphics2D g = doc.newPage(200, 200);\n","            g.setColor(Color.RED);\n","\n","            g.shear(10 * Math.PI / 180d, 10 * Math.PI / 180d);\n","            g.translate(100, 100);\n","            g.rotate(45 * Math.PI / 180d);\n","            g.fillRect(0, 0, 50, 50);\n","\n","            AffineTransform tx = g.getTransform();\n","            String actual = String.format(\"%.2f %.2f %.2f %.2f %.2f %.2f\",\n","                    tx.getScaleX(), tx.getShearY(),\n","                    tx.getShearX(), tx.getScaleY(),\n","                    tx.getTranslateX(), tx.getTranslateY()\n","            );\n","            String expect = \"0.83 0.83 -0.58 0.58 117.45 117.45\";\n","            System.out.println(actual);\n","            assertEquals(expect, actual);\n","        }\n","    }\n","\n","    /**\n","     * 应用变换矩阵\n","     */\n","    @Test\n","    void transform() throws Exception {\n","        final Path dst = Paths.get(\"target/transform.ofd\");\n","        try (OFDGraphicsDocument doc = new OFDGraphicsDocument(dst)) {\n","            OFDPageGraphics2D g = doc.newPage(200, 200);\n","\n","            g.translate(10, 10);\n","            g.transform(new AffineTransform(\n","                    0.83, 0.83,\n","                    -0.58, 0.58,\n","                    117.45, 117.45));\n","            AffineTransform tx = g.getTransform();\n","            String actual = String.format(\"%.2f %.2f %.2f %.2f %.2f %.2f\",\n","                    tx.getScaleX(), tx.getShearY(),\n","                    tx.getShearX(), tx.getScaleY(),\n","                    tx.getTranslateX(), tx.getTranslateY()\n","            );\n","            String expect = \"0.83 0.83 -0.58 0.58 127.45 127.45\";\n","            System.out.println(actual);\n","            assertEquals(expect, actual);\n","        }\n","    }\n","\n","    /**\n","     * 裁剪区域\n","     */\n","    @Test\n","    void setClip() throws Exception {\n","        final Path dst = Paths.get(\"target/clip.ofd\");\n","        try (OFDGraphicsDocument doc = new OFDGraphicsDocument(dst)) {\n","            OFDPageGraphics2D g = doc.newPage(500, 500);\n","//            Path file = Paths.get(\"src/test/resources\", \"eg_tulip.jpg\");\n","//            g.translate(100,100);\n","            g.setPaint(Color.RED);\n","            g.translate(100, 100);\n","            g.setClip(new Rectangle2D.Double(0, 0, 200, 200));\n","            g.fillArc(0, 0, 400, 400, 0, 360);\n","        }\n","        System.out.println(\">> \" + dst.toAbsolutePath());\n","    }\n","\n","    /**\n","     * 文字绘制测试\n","     */\n","    @Test\n","    void drawString() throws Exception {\n","        final Path dst = Paths.get(\"target/drawString.ofd\");\n","        try (OFDGraphicsDocument doc = new OFDGraphicsDocument(dst)) {\n","            OFDPageGraphics2D g = doc.newPage(500, 500);\n","\n","            g.setPaint(Color.RED);\n","            g.drawString(\"你好OFD R&W Hello \", 40, 120);\n","        }\n","        System.out.println(\">> \" + dst.toAbsolutePath());\n","    }\n","\n","    /**\n","     * 径向渐变测试\n","     */\n","    @Test\n","    void setPaintRadialGradientPaint() throws Exception {\n","        final Path dst = Paths.get(\"target/setPaintRadialGradientPaint.ofd\");\n","        try (OFDGraphicsDocument doc = new OFDGraphicsDocument(dst)) {\n","            OFDPageGraphics2D g = doc.newPage(500, 500);\n","\n","            Color[] colors = {Color.red, Color.green, Color.blue};\n","            float[] dist = {0.0f, 0.5f, 1.0f};\n","            Point2D center = new Point2D.Float(0.5f * 500, 0.5f * 500);\n","\n","            RadialGradientPaint p =\n","                    new RadialGradientPaint(center, 0.5f * 500, dist, colors);\n","            g.setPaint(p);\n","            g.fillRect(0, 0, 500, 500);\n","        }\n","        System.out.println(\">> \" + dst.toAbsolutePath());\n","    }\n","\n","    /**\n","     * 裁剪区域的变换 与 图元变换\n","     */\n","    @Test\n","    void clipAndCTM() throws Exception {\n","        ElemCup.ENABLE_DEBUG_PRINT = true;\n","        final Path dst = Paths.get(\"target/clipAndCTM.ofd\");\n","        try (OFDGraphicsDocument doc = new OFDGraphicsDocument(dst)) {\n","            OFDPageGraphics2D g = doc.newPage(500, 500);\n","\n","\n","            g.setColor(Color.WHITE);\n","            g.fillRect(0, 0, 500, 500);\n","\n","            g.setColor(Color.RED);\n","            g.translate(100, 100);\n","            g.clipRect(0, 0, 100, 100);\n","            g.fillRect(0, 0, 100, 100);\n","\n","            g.rotate(45 * Math.PI / 180d);\n","            g.setColor(Color.YELLOW);\n","            g.fillRect(0, 0, 100, 100);\n","        }\n","        System.out.println(\">> \" + dst.toAbsolutePath());\n","    }\n","\n","    /**\n","     * 裁剪区域的变换 与 图元变换\n","     */\n","    @Test\n","    void clips() throws Exception {\n","        ElemCup.ENABLE_DEBUG_PRINT = true;\n","        final Path dst = Paths.get(\"target/clips.ofd\");\n","        try (OFDGraphicsDocument doc = new OFDGraphicsDocument(dst)) {\n","            OFDPageGraphics2D g = doc.newPage(500, 500);\n","\n","            g.setColor(Color.RED);\n","            g.translate(100, 100);\n","            g.fillRect(0, 0, 100, 100);\n","            g.clipRect(0, 0, 100, 100);\n","\n","            g.setColor(Color.BLUE);\n","            g.translate(-50, -50);\n","            g.fillRect(0, 0, 100, 100);\n","        }\n","        System.out.println(\">> \" + dst.toAbsolutePath());\n","    }\n","\n","\n","    /**\n","     * 裁剪区域的变换 与 图元变换\n","     */\n","    @Test\n","    void complexCTMSetAndReset() throws Exception {\n","        ElemCup.ENABLE_DEBUG_PRINT = true;\n","        final Path dst = Paths.get(\"target/complexCTMSetAndReset.ofd\");\n","        try (OFDGraphicsDocument doc = new OFDGraphicsDocument(dst)) {\n","            OFDPageGraphics2D g = doc.newPage(500, 500);\n","\n","            g.rotate(90 * Math.PI / 180d);\n","            g.translate(100, 0);\n","            g.setColor(Color.RED);\n","            g.fillRect(0, -50, 100, 50);\n","\n","            g.setTransform(new AffineTransform());\n","            g.translate(100, 0);\n","            g.rotate(90 * Math.PI / 180d);\n","            g.setColor(Color.BLUE);\n","            g.fillRect(0, -50, 100, 50);\n","        }\n","        System.out.println(\">> \" + dst.toAbsolutePath());\n","    }\n","\n","    @Test\n","    void drawImageWithCTM() throws Exception {\n","        final Path dst = Paths.get(\"target/drawImageWithCTM.ofd\");\n","        try (OFDGraphicsDocument doc = new OFDGraphicsDocument(dst)) {\n","            OFDPageGraphics2D g = doc.newPage(500, 500);\n","            Path file = Paths.get(\"src/test/resources\", \"eg_tulip.jpg\");\n","            BufferedImage img1 = ImageIO.read(file.toFile());\n","            g.translate(400, 0);\n","            g.rotate(90 * Math.PI / 180d);\n","            g.drawImage(img1, 10, 10, null);\n","        }\n","        System.out.println(\">> \" + dst.toAbsolutePath());\n","    }\n","\n","\n","    @Test\n","    void clipImg() throws Exception {\n","        ElemCup.ENABLE_DEBUG_PRINT = true;\n","        final Path dst = Paths.get(\"target/clipImg.ofd\");\n","        final Path file = Paths.get(\"src/test/resources\", \"eg_tulip.jpg\");\n","        BufferedImage img1 = ImageIO.read(file.toFile());\n","\n","        try (OFDGraphicsDocument doc = new OFDGraphicsDocument(dst)) {\n","            OFDPageGraphics2D g = doc.newPage(500, 500);\n","            g.setClip(100, 100, 100, 100);\n","            g.rotate(10 * Math.PI / 180d);\n","            g.drawImage(img1, 100, 100, null);\n","        }\n","        System.out.println(\">> \" + dst.toAbsolutePath());\n","    }\n","\n","\n","\n","    @Test\n","    void clip() throws Exception {\n","        ElemCup.ENABLE_DEBUG_PRINT = true;\n","        final Path dst = Paths.get(\"target/clipLarge.ofd\");\n","\n","        try (OFDGraphicsDocument doc = new OFDGraphicsDocument(dst)) {\n","            OFDPageGraphics2D g = doc.newPage(500, 500);\n","\n","            // 处于裁剪区内部\n","            g.setClip(0, 0, 300,300);\n","            g.setColor(Color.BLUE);\n","            g.fillRect(10, 10, 50, 50);\n","\n","            // 与裁剪区相交\n","            g.setClip(null);\n","            g.setClip(0, 100, 100,100);\n","            g.setColor(Color.RED);\n","            g.fillRect(50, 150, 200, 200);\n","\n","            // 与裁剪区不相交\n","            g.setClip(null);\n","            g.setClip(0, 300, 100,100);\n","            g.setColor(Color.RED);\n","            g.fillRect(400, 400, 50, 50);\n","\n","        }\n","        System.out.println(\">> \" + dst.toAbsolutePath());\n","    }\n","\n","    @Test\n","    void intersects() {\n","        Rectangle2D.Double large = new Rectangle2D.Double(0, 0, 200, 200);\n","        Rectangle2D.Double small = new Rectangle2D.Double(50, 50, 50, 50);\n","        Rectangle2D.Double a2 = new Rectangle2D.Double(100, 0, 200, 200);\n","        Rectangle2D.Double remote = new Rectangle2D.Double(1000, 1000, 10, 10);\n","\n","//        System.out.println(large.intersects(remote));\n","        System.out.println(large.intersects(remote));\n","//        System.out.println(large.intersects(small));\n","//        System.out.println(large.contains(small));\n","//        System.out.println(large.intersects(a2));\n","    }\n","\n","}"],"method_lines_dic":{"OFDPageGraphics2D::::draw(java.awt.Shape)":[154,187],"OFDPageGraphics2D::::drawString(java.lang.String,int,int)":[203,207],"OFDPageGraphics2D::::drawString(java.lang.String,float,float)":[222,226],"OFDPageGraphics2D::::drawString(java.text.AttributedCharacterIterator,int,int)":[239,243],"OFDPageGraphics2D::::drawString(java.text.AttributedCharacterIterator,float,float)":[256,260],"OFDPageGraphics2D::::drawGlyphVector(java.awt.font.GlyphVector,float,float)":[273,277],"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)":[290,304],"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)":[317,360],"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,java.awt.Color,java.awt.image.ImageObserver)":[374,388],"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.Color,java.awt.image.ImageObserver)":[404,411],"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.image.ImageObserver)":[428,436],"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.Color,java.awt.image.ImageObserver)":[456,463],"OFDPageGraphics2D::::drawImage(java.awt.Image,java.awt.geom.AffineTransform,java.awt.image.ImageObserver)":[474,485],"OFDPageGraphics2D::::drawImage(java.awt.image.BufferedImage,java.awt.image.BufferedImageOp,int,int)":[501,508],"OFDPageGraphics2D::::drawRenderedImage(java.awt.image.RenderedImage,java.awt.geom.AffineTransform)":[516,523],"OFDPageGraphics2D::::drawRenderableImage(java.awt.image.renderable.RenderableImage,java.awt.geom.AffineTransform)":[531,538],"OFDPageGraphics2D::::fill(java.awt.Shape)":[546,579],"OFDPageGraphics2D::::hit(java.awt.Rectangle,java.awt.Shape,boolean)":[593,600],"OFDPageGraphics2D::::getDeviceConfiguration()":[607,613],"OFDPageGraphics2D::::setComposite(java.awt.Composite)":[623,626],"OFDPageGraphics2D::::setPaint(java.awt.Paint)":[633,636],"OFDPageGraphics2D::::setStroke(java.awt.Stroke)":[643,646],"OFDPageGraphics2D::::setRenderingHint(java.awt.RenderingHints.Key,java.lang.Object)":[654,658],"OFDPageGraphics2D::::getRenderingHint(java.awt.RenderingHints.Key)":[666,669],"OFDPageGraphics2D::::setRenderingHints(java.util.Map<?, ?>)":[676,681],"OFDPageGraphics2D::::addRenderingHints(java.util.Map<?, ?>)":[688,692],"OFDPageGraphics2D::::getRenderingHints()":[699,702],"OFDPageGraphics2D::::create()":[709,712],"OFDPageGraphics2D::::getColor()":[719,722],"OFDPageGraphics2D::::setColor(java.awt.Color)":[729,735],"OFDPageGraphics2D::::setPaintMode()":[740,743],"OFDPageGraphics2D::::setXORMode(java.awt.Color)":[750,753],"OFDPageGraphics2D::::getFont()":[760,763],"OFDPageGraphics2D::::setFont(java.awt.Font)":[770,773],"OFDPageGraphics2D::::getFontMetrics(java.awt.Font)":[781,784],"OFDPageGraphics2D::::getClipBounds()":[791,799],"OFDPageGraphics2D::::clipRect(int,int,int,int)":[809,812],"OFDPageGraphics2D::::setClip(int,int,int,int)":[824,827],"OFDPageGraphics2D::::getClip()":[834,837],"OFDPageGraphics2D::::clip(java.awt.Shape)":[846,863],"OFDPageGraphics2D::::setClip(java.awt.Shape)":[873,885],"OFDPageGraphics2D::::copyArea(int,int,int,int,int,int)":[897,900],"OFDPageGraphics2D::::drawLine(int,int,int,int)":[910,913],"OFDPageGraphics2D::::fillRect(int,int,int,int)":[923,926],"OFDPageGraphics2D::::drawRect(int,int,int,int)":[936,942],"OFDPageGraphics2D::::clearRect(int,int,int,int)":[952,961],"OFDPageGraphics2D::::drawRoundRect(int,int,int,int,int,int)":[973,976],"OFDPageGraphics2D::::fillRoundRect(int,int,int,int,int,int)":[988,991],"OFDPageGraphics2D::::drawOval(int,int,int,int)":[1001,1004],"OFDPageGraphics2D::::fillOval(int,int,int,int)":[1014,1017],"OFDPageGraphics2D::::drawArc(int,int,int,int,int,int)":[1031,1034],"OFDPageGraphics2D::::fillArc(int,int,int,int,int,int)":[1050,1053],"OFDPageGraphics2D::::drawPolyline(int[],int[],int)":[1064,1072],"OFDPageGraphics2D::::drawPolygon(int[],int[],int)":[1081,1090],"OFDPageGraphics2D::::fillPolygon(int[],int[],int)":[1099,1108],"OFDPageGraphics2D::::translate(int,int)":[1116,1120],"OFDPageGraphics2D::::translate(double,double)":[1128,1132],"OFDPageGraphics2D::::rotate(double)":[1139,1143],"OFDPageGraphics2D::::rotate(double,double,double)":[1159,1165],"OFDPageGraphics2D::::scale(double,double)":[1173,1177],"OFDPageGraphics2D::::shear(double,double)":[1185,1189],"OFDPageGraphics2D::::transform(java.awt.geom.AffineTransform)":[1196,1203],"OFDPageGraphics2D::::setTransform(java.awt.geom.AffineTransform)":[1210,1217],"OFDPageGraphics2D::::getTransform()":[1224,1227],"OFDPageGraphics2D::::getPaint()":[1234,1237],"OFDPageGraphics2D::::getComposite()":[1246,1249],"OFDPageGraphics2D::::setBackground(java.awt.Color)":[1256,1259],"OFDPageGraphics2D::::getBackground()":[1266,1269],"OFDPageGraphics2D::::getStroke()":[1276,1279],"OFDPageGraphics2D::::getFontRenderContext()":[1286,1289],"OFDPageGraphics2D::::dispose()":[1295,1298],"OFDPageGraphics2D::::makeClip(java.awt.Shape,java.awt.geom.AffineTransform)":[1309,1344],"OFDPageGraphics2D::::convert2Img(java.awt.image.RenderedImage)":[1352,1373],"OFDPageGraphics2D::::trans(java.awt.geom.AffineTransform)":[1381,1388]},"test_method_lines_dic":{"OFDPageGraphics2DTest::::linearGradientPaint()":[20,36],"OFDPageGraphics2DTest::::drawRoundRect()":[42,50],"OFDPageGraphics2DTest::::fillRoundRect()":[55,64],"OFDPageGraphics2DTest::::draw()":[70,87],"OFDPageGraphics2DTest::::drawStroke()":[92,106],"OFDPageGraphics2DTest::::drawArc()":[111,120],"OFDPageGraphics2DTest::::fillArc()":[125,134],"OFDPageGraphics2DTest::::clearRect()":[139,149],"OFDPageGraphics2DTest::::fillOval()":[154,163],"OFDPageGraphics2DTest::::drawOval()":[168,177],"OFDPageGraphics2DTest::::drawPolyline()":[182,193],"OFDPageGraphics2DTest::::drawPolygon()":[198,211],"OFDPageGraphics2DTest::::fillPolygon()":[216,229],"OFDPageGraphics2DTest::::drawImage()":[232,245],"OFDPageGraphics2DTest::::drawImage2()":[247,258],"OFDPageGraphics2DTest::::drawImageAffineTransform()":[260,273],"OFDPageGraphics2DTest::::drawImageBackground()":[279,290],"OFDPageGraphics2DTest::::drawImageBackground2()":[292,303],"OFDPageGraphics2DTest::::drawImagePiece()":[308,319],"OFDPageGraphics2DTest::::drawImagePieceColor()":[321,332],"OFDPageGraphics2DTest::::translate()":[337,347],"OFDPageGraphics2DTest::::rotate()":[352,362],"OFDPageGraphics2DTest::::rotate2()":[367,377],"OFDPageGraphics2DTest::::translateRotate()":[379,390],"OFDPageGraphics2DTest::::scale()":[395,407],"OFDPageGraphics2DTest::::shear()":[413,423],"OFDPageGraphics2DTest::::getTransform()":[428,450],"OFDPageGraphics2DTest::::transform()":[455,476],"OFDPageGraphics2DTest::::setClip()":[481,494],"OFDPageGraphics2DTest::::drawString()":[499,509],"OFDPageGraphics2DTest::::setPaintRadialGradientPaint()":[514,530],"OFDPageGraphics2DTest::::clipAndCTM()":[535,556],"OFDPageGraphics2DTest::::clips()":[561,578],"OFDPageGraphics2DTest::::complexCTMSetAndReset()":[584,603],"OFDPageGraphics2DTest::::drawImageWithCTM()":[605,617],"OFDPageGraphics2DTest::::clipImg()":[620,634],"OFDPageGraphics2DTest::::clip()":[638,665],"OFDPageGraphics2DTest::::intersects()":[667,679]},"reverse_method_lines_dic":{"154":"OFDPageGraphics2D::::draw(java.awt.Shape)","155":"OFDPageGraphics2D::::draw(java.awt.Shape)","156":"OFDPageGraphics2D::::draw(java.awt.Shape)","157":"OFDPageGraphics2D::::draw(java.awt.Shape)","158":"OFDPageGraphics2D::::draw(java.awt.Shape)","159":"OFDPageGraphics2D::::draw(java.awt.Shape)","160":"OFDPageGraphics2D::::draw(java.awt.Shape)","161":"OFDPageGraphics2D::::draw(java.awt.Shape)","162":"OFDPageGraphics2D::::draw(java.awt.Shape)","163":"OFDPageGraphics2D::::draw(java.awt.Shape)","164":"OFDPageGraphics2D::::draw(java.awt.Shape)","165":"OFDPageGraphics2D::::draw(java.awt.Shape)","166":"OFDPageGraphics2D::::draw(java.awt.Shape)","167":"OFDPageGraphics2D::::draw(java.awt.Shape)","168":"OFDPageGraphics2D::::draw(java.awt.Shape)","169":"OFDPageGraphics2D::::draw(java.awt.Shape)","170":"OFDPageGraphics2D::::draw(java.awt.Shape)","171":"OFDPageGraphics2D::::draw(java.awt.Shape)","172":"OFDPageGraphics2D::::draw(java.awt.Shape)","173":"OFDPageGraphics2D::::draw(java.awt.Shape)","174":"OFDPageGraphics2D::::draw(java.awt.Shape)","175":"OFDPageGraphics2D::::draw(java.awt.Shape)","176":"OFDPageGraphics2D::::draw(java.awt.Shape)","177":"OFDPageGraphics2D::::draw(java.awt.Shape)","178":"OFDPageGraphics2D::::draw(java.awt.Shape)","179":"OFDPageGraphics2D::::draw(java.awt.Shape)","180":"OFDPageGraphics2D::::draw(java.awt.Shape)","181":"OFDPageGraphics2D::::draw(java.awt.Shape)","182":"OFDPageGraphics2D::::draw(java.awt.Shape)","183":"OFDPageGraphics2D::::draw(java.awt.Shape)","184":"OFDPageGraphics2D::::draw(java.awt.Shape)","185":"OFDPageGraphics2D::::draw(java.awt.Shape)","186":"OFDPageGraphics2D::::draw(java.awt.Shape)","187":"OFDPageGraphics2D::::draw(java.awt.Shape)","203":"OFDPageGraphics2D::::drawString(java.lang.String,int,int)","204":"OFDPageGraphics2D::::drawString(java.lang.String,int,int)","205":"OFDPageGraphics2D::::drawString(java.lang.String,int,int)","206":"OFDPageGraphics2D::::drawString(java.lang.String,int,int)","207":"OFDPageGraphics2D::::drawString(java.lang.String,int,int)","222":"OFDPageGraphics2D::::drawString(java.lang.String,float,float)","223":"OFDPageGraphics2D::::drawString(java.lang.String,float,float)","224":"OFDPageGraphics2D::::drawString(java.lang.String,float,float)","225":"OFDPageGraphics2D::::drawString(java.lang.String,float,float)","226":"OFDPageGraphics2D::::drawString(java.lang.String,float,float)","239":"OFDPageGraphics2D::::drawString(java.text.AttributedCharacterIterator,int,int)","240":"OFDPageGraphics2D::::drawString(java.text.AttributedCharacterIterator,int,int)","241":"OFDPageGraphics2D::::drawString(java.text.AttributedCharacterIterator,int,int)","242":"OFDPageGraphics2D::::drawString(java.text.AttributedCharacterIterator,int,int)","243":"OFDPageGraphics2D::::drawString(java.text.AttributedCharacterIterator,int,int)","256":"OFDPageGraphics2D::::drawString(java.text.AttributedCharacterIterator,float,float)","257":"OFDPageGraphics2D::::drawString(java.text.AttributedCharacterIterator,float,float)","258":"OFDPageGraphics2D::::drawString(java.text.AttributedCharacterIterator,float,float)","259":"OFDPageGraphics2D::::drawString(java.text.AttributedCharacterIterator,float,float)","260":"OFDPageGraphics2D::::drawString(java.text.AttributedCharacterIterator,float,float)","273":"OFDPageGraphics2D::::drawGlyphVector(java.awt.font.GlyphVector,float,float)","274":"OFDPageGraphics2D::::drawGlyphVector(java.awt.font.GlyphVector,float,float)","275":"OFDPageGraphics2D::::drawGlyphVector(java.awt.font.GlyphVector,float,float)","276":"OFDPageGraphics2D::::drawGlyphVector(java.awt.font.GlyphVector,float,float)","277":"OFDPageGraphics2D::::drawGlyphVector(java.awt.font.GlyphVector,float,float)","290":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)","291":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)","292":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)","293":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)","294":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)","295":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)","296":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)","297":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)","298":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)","299":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)","300":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)","301":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)","302":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)","303":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)","304":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)","317":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)","318":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)","319":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)","320":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)","321":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)","322":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)","323":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)","324":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)","325":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)","326":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)","327":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)","328":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)","329":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)","330":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)","331":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)","332":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)","333":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)","334":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)","335":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)","336":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)","337":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)","338":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)","339":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)","340":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)","341":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)","342":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)","343":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)","344":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)","345":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)","346":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)","347":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)","348":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)","349":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)","350":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)","351":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)","352":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)","353":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)","354":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)","355":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)","356":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)","357":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)","358":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)","359":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)","360":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)","374":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,java.awt.Color,java.awt.image.ImageObserver)","375":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,java.awt.Color,java.awt.image.ImageObserver)","376":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,java.awt.Color,java.awt.image.ImageObserver)","377":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,java.awt.Color,java.awt.image.ImageObserver)","378":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,java.awt.Color,java.awt.image.ImageObserver)","379":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,java.awt.Color,java.awt.image.ImageObserver)","380":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,java.awt.Color,java.awt.image.ImageObserver)","381":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,java.awt.Color,java.awt.image.ImageObserver)","382":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,java.awt.Color,java.awt.image.ImageObserver)","383":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,java.awt.Color,java.awt.image.ImageObserver)","384":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,java.awt.Color,java.awt.image.ImageObserver)","385":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,java.awt.Color,java.awt.image.ImageObserver)","386":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,java.awt.Color,java.awt.image.ImageObserver)","387":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,java.awt.Color,java.awt.image.ImageObserver)","388":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,java.awt.Color,java.awt.image.ImageObserver)","404":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.Color,java.awt.image.ImageObserver)","405":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.Color,java.awt.image.ImageObserver)","406":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.Color,java.awt.image.ImageObserver)","407":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.Color,java.awt.image.ImageObserver)","408":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.Color,java.awt.image.ImageObserver)","409":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.Color,java.awt.image.ImageObserver)","410":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.Color,java.awt.image.ImageObserver)","411":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.Color,java.awt.image.ImageObserver)","428":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.image.ImageObserver)","429":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.image.ImageObserver)","430":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.image.ImageObserver)","431":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.image.ImageObserver)","432":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.image.ImageObserver)","433":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.image.ImageObserver)","434":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.image.ImageObserver)","435":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.image.ImageObserver)","436":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.image.ImageObserver)","456":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.Color,java.awt.image.ImageObserver)","457":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.Color,java.awt.image.ImageObserver)","458":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.Color,java.awt.image.ImageObserver)","459":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.Color,java.awt.image.ImageObserver)","460":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.Color,java.awt.image.ImageObserver)","461":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.Color,java.awt.image.ImageObserver)","462":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.Color,java.awt.image.ImageObserver)","463":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.Color,java.awt.image.ImageObserver)","474":"OFDPageGraphics2D::::drawImage(java.awt.Image,java.awt.geom.AffineTransform,java.awt.image.ImageObserver)","475":"OFDPageGraphics2D::::drawImage(java.awt.Image,java.awt.geom.AffineTransform,java.awt.image.ImageObserver)","476":"OFDPageGraphics2D::::drawImage(java.awt.Image,java.awt.geom.AffineTransform,java.awt.image.ImageObserver)","477":"OFDPageGraphics2D::::drawImage(java.awt.Image,java.awt.geom.AffineTransform,java.awt.image.ImageObserver)","478":"OFDPageGraphics2D::::drawImage(java.awt.Image,java.awt.geom.AffineTransform,java.awt.image.ImageObserver)","479":"OFDPageGraphics2D::::drawImage(java.awt.Image,java.awt.geom.AffineTransform,java.awt.image.ImageObserver)","480":"OFDPageGraphics2D::::drawImage(java.awt.Image,java.awt.geom.AffineTransform,java.awt.image.ImageObserver)","481":"OFDPageGraphics2D::::drawImage(java.awt.Image,java.awt.geom.AffineTransform,java.awt.image.ImageObserver)","482":"OFDPageGraphics2D::::drawImage(java.awt.Image,java.awt.geom.AffineTransform,java.awt.image.ImageObserver)","483":"OFDPageGraphics2D::::drawImage(java.awt.Image,java.awt.geom.AffineTransform,java.awt.image.ImageObserver)","484":"OFDPageGraphics2D::::drawImage(java.awt.Image,java.awt.geom.AffineTransform,java.awt.image.ImageObserver)","485":"OFDPageGraphics2D::::drawImage(java.awt.Image,java.awt.geom.AffineTransform,java.awt.image.ImageObserver)","501":"OFDPageGraphics2D::::drawImage(java.awt.image.BufferedImage,java.awt.image.BufferedImageOp,int,int)","502":"OFDPageGraphics2D::::drawImage(java.awt.image.BufferedImage,java.awt.image.BufferedImageOp,int,int)","503":"OFDPageGraphics2D::::drawImage(java.awt.image.BufferedImage,java.awt.image.BufferedImageOp,int,int)","504":"OFDPageGraphics2D::::drawImage(java.awt.image.BufferedImage,java.awt.image.BufferedImageOp,int,int)","505":"OFDPageGraphics2D::::drawImage(java.awt.image.BufferedImage,java.awt.image.BufferedImageOp,int,int)","506":"OFDPageGraphics2D::::drawImage(java.awt.image.BufferedImage,java.awt.image.BufferedImageOp,int,int)","507":"OFDPageGraphics2D::::drawImage(java.awt.image.BufferedImage,java.awt.image.BufferedImageOp,int,int)","508":"OFDPageGraphics2D::::drawImage(java.awt.image.BufferedImage,java.awt.image.BufferedImageOp,int,int)","516":"OFDPageGraphics2D::::drawRenderedImage(java.awt.image.RenderedImage,java.awt.geom.AffineTransform)","517":"OFDPageGraphics2D::::drawRenderedImage(java.awt.image.RenderedImage,java.awt.geom.AffineTransform)","518":"OFDPageGraphics2D::::drawRenderedImage(java.awt.image.RenderedImage,java.awt.geom.AffineTransform)","519":"OFDPageGraphics2D::::drawRenderedImage(java.awt.image.RenderedImage,java.awt.geom.AffineTransform)","520":"OFDPageGraphics2D::::drawRenderedImage(java.awt.image.RenderedImage,java.awt.geom.AffineTransform)","521":"OFDPageGraphics2D::::drawRenderedImage(java.awt.image.RenderedImage,java.awt.geom.AffineTransform)","522":"OFDPageGraphics2D::::drawRenderedImage(java.awt.image.RenderedImage,java.awt.geom.AffineTransform)","523":"OFDPageGraphics2D::::drawRenderedImage(java.awt.image.RenderedImage,java.awt.geom.AffineTransform)","531":"OFDPageGraphics2D::::drawRenderableImage(java.awt.image.renderable.RenderableImage,java.awt.geom.AffineTransform)","532":"OFDPageGraphics2D::::drawRenderableImage(java.awt.image.renderable.RenderableImage,java.awt.geom.AffineTransform)","533":"OFDPageGraphics2D::::drawRenderableImage(java.awt.image.renderable.RenderableImage,java.awt.geom.AffineTransform)","534":"OFDPageGraphics2D::::drawRenderableImage(java.awt.image.renderable.RenderableImage,java.awt.geom.AffineTransform)","535":"OFDPageGraphics2D::::drawRenderableImage(java.awt.image.renderable.RenderableImage,java.awt.geom.AffineTransform)","536":"OFDPageGraphics2D::::drawRenderableImage(java.awt.image.renderable.RenderableImage,java.awt.geom.AffineTransform)","537":"OFDPageGraphics2D::::drawRenderableImage(java.awt.image.renderable.RenderableImage,java.awt.geom.AffineTransform)","538":"OFDPageGraphics2D::::drawRenderableImage(java.awt.image.renderable.RenderableImage,java.awt.geom.AffineTransform)","546":"OFDPageGraphics2D::::fill(java.awt.Shape)","547":"OFDPageGraphics2D::::fill(java.awt.Shape)","548":"OFDPageGraphics2D::::fill(java.awt.Shape)","549":"OFDPageGraphics2D::::fill(java.awt.Shape)","550":"OFDPageGraphics2D::::fill(java.awt.Shape)","551":"OFDPageGraphics2D::::fill(java.awt.Shape)","552":"OFDPageGraphics2D::::fill(java.awt.Shape)","553":"OFDPageGraphics2D::::fill(java.awt.Shape)","554":"OFDPageGraphics2D::::fill(java.awt.Shape)","555":"OFDPageGraphics2D::::fill(java.awt.Shape)","556":"OFDPageGraphics2D::::fill(java.awt.Shape)","557":"OFDPageGraphics2D::::fill(java.awt.Shape)","558":"OFDPageGraphics2D::::fill(java.awt.Shape)","559":"OFDPageGraphics2D::::fill(java.awt.Shape)","560":"OFDPageGraphics2D::::fill(java.awt.Shape)","561":"OFDPageGraphics2D::::fill(java.awt.Shape)","562":"OFDPageGraphics2D::::fill(java.awt.Shape)","563":"OFDPageGraphics2D::::fill(java.awt.Shape)","564":"OFDPageGraphics2D::::fill(java.awt.Shape)","565":"OFDPageGraphics2D::::fill(java.awt.Shape)","566":"OFDPageGraphics2D::::fill(java.awt.Shape)","567":"OFDPageGraphics2D::::fill(java.awt.Shape)","568":"OFDPageGraphics2D::::fill(java.awt.Shape)","569":"OFDPageGraphics2D::::fill(java.awt.Shape)","570":"OFDPageGraphics2D::::fill(java.awt.Shape)","571":"OFDPageGraphics2D::::fill(java.awt.Shape)","572":"OFDPageGraphics2D::::fill(java.awt.Shape)","573":"OFDPageGraphics2D::::fill(java.awt.Shape)","574":"OFDPageGraphics2D::::fill(java.awt.Shape)","575":"OFDPageGraphics2D::::fill(java.awt.Shape)","576":"OFDPageGraphics2D::::fill(java.awt.Shape)","577":"OFDPageGraphics2D::::fill(java.awt.Shape)","578":"OFDPageGraphics2D::::fill(java.awt.Shape)","579":"OFDPageGraphics2D::::fill(java.awt.Shape)","593":"OFDPageGraphics2D::::hit(java.awt.Rectangle,java.awt.Shape,boolean)","594":"OFDPageGraphics2D::::hit(java.awt.Rectangle,java.awt.Shape,boolean)","595":"OFDPageGraphics2D::::hit(java.awt.Rectangle,java.awt.Shape,boolean)","596":"OFDPageGraphics2D::::hit(java.awt.Rectangle,java.awt.Shape,boolean)","597":"OFDPageGraphics2D::::hit(java.awt.Rectangle,java.awt.Shape,boolean)","598":"OFDPageGraphics2D::::hit(java.awt.Rectangle,java.awt.Shape,boolean)","599":"OFDPageGraphics2D::::hit(java.awt.Rectangle,java.awt.Shape,boolean)","600":"OFDPageGraphics2D::::hit(java.awt.Rectangle,java.awt.Shape,boolean)","607":"OFDPageGraphics2D::::getDeviceConfiguration()","608":"OFDPageGraphics2D::::getDeviceConfiguration()","609":"OFDPageGraphics2D::::getDeviceConfiguration()","610":"OFDPageGraphics2D::::getDeviceConfiguration()","611":"OFDPageGraphics2D::::getDeviceConfiguration()","612":"OFDPageGraphics2D::::getDeviceConfiguration()","613":"OFDPageGraphics2D::::getDeviceConfiguration()","623":"OFDPageGraphics2D::::setComposite(java.awt.Composite)","624":"OFDPageGraphics2D::::setComposite(java.awt.Composite)","625":"OFDPageGraphics2D::::setComposite(java.awt.Composite)","626":"OFDPageGraphics2D::::setComposite(java.awt.Composite)","633":"OFDPageGraphics2D::::setPaint(java.awt.Paint)","634":"OFDPageGraphics2D::::setPaint(java.awt.Paint)","635":"OFDPageGraphics2D::::setPaint(java.awt.Paint)","636":"OFDPageGraphics2D::::setPaint(java.awt.Paint)","643":"OFDPageGraphics2D::::setStroke(java.awt.Stroke)","644":"OFDPageGraphics2D::::setStroke(java.awt.Stroke)","645":"OFDPageGraphics2D::::setStroke(java.awt.Stroke)","646":"OFDPageGraphics2D::::setStroke(java.awt.Stroke)","654":"OFDPageGraphics2D::::setRenderingHint(java.awt.RenderingHints.Key,java.lang.Object)","655":"OFDPageGraphics2D::::setRenderingHint(java.awt.RenderingHints.Key,java.lang.Object)","656":"OFDPageGraphics2D::::setRenderingHint(java.awt.RenderingHints.Key,java.lang.Object)","657":"OFDPageGraphics2D::::setRenderingHint(java.awt.RenderingHints.Key,java.lang.Object)","658":"OFDPageGraphics2D::::setRenderingHint(java.awt.RenderingHints.Key,java.lang.Object)","666":"OFDPageGraphics2D::::getRenderingHint(java.awt.RenderingHints.Key)","667":"OFDPageGraphics2D::::getRenderingHint(java.awt.RenderingHints.Key)","668":"OFDPageGraphics2D::::getRenderingHint(java.awt.RenderingHints.Key)","669":"OFDPageGraphics2D::::getRenderingHint(java.awt.RenderingHints.Key)","676":"OFDPageGraphics2D::::setRenderingHints(java.util.Map<?, ?>)","677":"OFDPageGraphics2D::::setRenderingHints(java.util.Map<?, ?>)","678":"OFDPageGraphics2D::::setRenderingHints(java.util.Map<?, ?>)","679":"OFDPageGraphics2D::::setRenderingHints(java.util.Map<?, ?>)","680":"OFDPageGraphics2D::::setRenderingHints(java.util.Map<?, ?>)","681":"OFDPageGraphics2D::::setRenderingHints(java.util.Map<?, ?>)","688":"OFDPageGraphics2D::::addRenderingHints(java.util.Map<?, ?>)","689":"OFDPageGraphics2D::::addRenderingHints(java.util.Map<?, ?>)","690":"OFDPageGraphics2D::::addRenderingHints(java.util.Map<?, ?>)","691":"OFDPageGraphics2D::::addRenderingHints(java.util.Map<?, ?>)","692":"OFDPageGraphics2D::::addRenderingHints(java.util.Map<?, ?>)","699":"OFDPageGraphics2D::::getRenderingHints()","700":"OFDPageGraphics2D::::getRenderingHints()","701":"OFDPageGraphics2D::::getRenderingHints()","702":"OFDPageGraphics2D::::getRenderingHints()","709":"OFDPageGraphics2D::::create()","710":"OFDPageGraphics2D::::create()","711":"OFDPageGraphics2D::::create()","712":"OFDPageGraphics2D::::create()","719":"OFDPageGraphics2D::::getColor()","720":"OFDPageGraphics2D::::getColor()","721":"OFDPageGraphics2D::::getColor()","722":"OFDPageGraphics2D::::getColor()","729":"OFDPageGraphics2D::::setColor(java.awt.Color)","730":"OFDPageGraphics2D::::setColor(java.awt.Color)","731":"OFDPageGraphics2D::::setColor(java.awt.Color)","732":"OFDPageGraphics2D::::setColor(java.awt.Color)","733":"OFDPageGraphics2D::::setColor(java.awt.Color)","734":"OFDPageGraphics2D::::setColor(java.awt.Color)","735":"OFDPageGraphics2D::::setColor(java.awt.Color)","740":"OFDPageGraphics2D::::setPaintMode()","741":"OFDPageGraphics2D::::setPaintMode()","742":"OFDPageGraphics2D::::setPaintMode()","743":"OFDPageGraphics2D::::setPaintMode()","750":"OFDPageGraphics2D::::setXORMode(java.awt.Color)","751":"OFDPageGraphics2D::::setXORMode(java.awt.Color)","752":"OFDPageGraphics2D::::setXORMode(java.awt.Color)","753":"OFDPageGraphics2D::::setXORMode(java.awt.Color)","760":"OFDPageGraphics2D::::getFont()","761":"OFDPageGraphics2D::::getFont()","762":"OFDPageGraphics2D::::getFont()","763":"OFDPageGraphics2D::::getFont()","770":"OFDPageGraphics2D::::setFont(java.awt.Font)","771":"OFDPageGraphics2D::::setFont(java.awt.Font)","772":"OFDPageGraphics2D::::setFont(java.awt.Font)","773":"OFDPageGraphics2D::::setFont(java.awt.Font)","781":"OFDPageGraphics2D::::getFontMetrics(java.awt.Font)","782":"OFDPageGraphics2D::::getFontMetrics(java.awt.Font)","783":"OFDPageGraphics2D::::getFontMetrics(java.awt.Font)","784":"OFDPageGraphics2D::::getFontMetrics(java.awt.Font)","791":"OFDPageGraphics2D::::getClipBounds()","792":"OFDPageGraphics2D::::getClipBounds()","793":"OFDPageGraphics2D::::getClipBounds()","794":"OFDPageGraphics2D::::getClipBounds()","795":"OFDPageGraphics2D::::getClipBounds()","796":"OFDPageGraphics2D::::getClipBounds()","797":"OFDPageGraphics2D::::getClipBounds()","798":"OFDPageGraphics2D::::getClipBounds()","799":"OFDPageGraphics2D::::getClipBounds()","809":"OFDPageGraphics2D::::clipRect(int,int,int,int)","810":"OFDPageGraphics2D::::clipRect(int,int,int,int)","811":"OFDPageGraphics2D::::clipRect(int,int,int,int)","812":"OFDPageGraphics2D::::clipRect(int,int,int,int)","824":"OFDPageGraphics2D::::setClip(int,int,int,int)","825":"OFDPageGraphics2D::::setClip(int,int,int,int)","826":"OFDPageGraphics2D::::setClip(int,int,int,int)","827":"OFDPageGraphics2D::::setClip(int,int,int,int)","834":"OFDPageGraphics2D::::getClip()","835":"OFDPageGraphics2D::::getClip()","836":"OFDPageGraphics2D::::getClip()","837":"OFDPageGraphics2D::::getClip()","846":"OFDPageGraphics2D::::clip(java.awt.Shape)","847":"OFDPageGraphics2D::::clip(java.awt.Shape)","848":"OFDPageGraphics2D::::clip(java.awt.Shape)","849":"OFDPageGraphics2D::::clip(java.awt.Shape)","850":"OFDPageGraphics2D::::clip(java.awt.Shape)","851":"OFDPageGraphics2D::::clip(java.awt.Shape)","852":"OFDPageGraphics2D::::clip(java.awt.Shape)","853":"OFDPageGraphics2D::::clip(java.awt.Shape)","854":"OFDPageGraphics2D::::clip(java.awt.Shape)","855":"OFDPageGraphics2D::::clip(java.awt.Shape)","856":"OFDPageGraphics2D::::clip(java.awt.Shape)","857":"OFDPageGraphics2D::::clip(java.awt.Shape)","858":"OFDPageGraphics2D::::clip(java.awt.Shape)","859":"OFDPageGraphics2D::::clip(java.awt.Shape)","860":"OFDPageGraphics2D::::clip(java.awt.Shape)","861":"OFDPageGraphics2D::::clip(java.awt.Shape)","862":"OFDPageGraphics2D::::clip(java.awt.Shape)","863":"OFDPageGraphics2D::::clip(java.awt.Shape)","873":"OFDPageGraphics2D::::setClip(java.awt.Shape)","874":"OFDPageGraphics2D::::setClip(java.awt.Shape)","875":"OFDPageGraphics2D::::setClip(java.awt.Shape)","876":"OFDPageGraphics2D::::setClip(java.awt.Shape)","877":"OFDPageGraphics2D::::setClip(java.awt.Shape)","878":"OFDPageGraphics2D::::setClip(java.awt.Shape)","879":"OFDPageGraphics2D::::setClip(java.awt.Shape)","880":"OFDPageGraphics2D::::setClip(java.awt.Shape)","881":"OFDPageGraphics2D::::setClip(java.awt.Shape)","882":"OFDPageGraphics2D::::setClip(java.awt.Shape)","883":"OFDPageGraphics2D::::setClip(java.awt.Shape)","884":"OFDPageGraphics2D::::setClip(java.awt.Shape)","885":"OFDPageGraphics2D::::setClip(java.awt.Shape)","897":"OFDPageGraphics2D::::copyArea(int,int,int,int,int,int)","898":"OFDPageGraphics2D::::copyArea(int,int,int,int,int,int)","899":"OFDPageGraphics2D::::copyArea(int,int,int,int,int,int)","900":"OFDPageGraphics2D::::copyArea(int,int,int,int,int,int)","910":"OFDPageGraphics2D::::drawLine(int,int,int,int)","911":"OFDPageGraphics2D::::drawLine(int,int,int,int)","912":"OFDPageGraphics2D::::drawLine(int,int,int,int)","913":"OFDPageGraphics2D::::drawLine(int,int,int,int)","923":"OFDPageGraphics2D::::fillRect(int,int,int,int)","924":"OFDPageGraphics2D::::fillRect(int,int,int,int)","925":"OFDPageGraphics2D::::fillRect(int,int,int,int)","926":"OFDPageGraphics2D::::fillRect(int,int,int,int)","936":"OFDPageGraphics2D::::drawRect(int,int,int,int)","937":"OFDPageGraphics2D::::drawRect(int,int,int,int)","938":"OFDPageGraphics2D::::drawRect(int,int,int,int)","939":"OFDPageGraphics2D::::drawRect(int,int,int,int)","940":"OFDPageGraphics2D::::drawRect(int,int,int,int)","941":"OFDPageGraphics2D::::drawRect(int,int,int,int)","942":"OFDPageGraphics2D::::drawRect(int,int,int,int)","952":"OFDPageGraphics2D::::clearRect(int,int,int,int)","953":"OFDPageGraphics2D::::clearRect(int,int,int,int)","954":"OFDPageGraphics2D::::clearRect(int,int,int,int)","955":"OFDPageGraphics2D::::clearRect(int,int,int,int)","956":"OFDPageGraphics2D::::clearRect(int,int,int,int)","957":"OFDPageGraphics2D::::clearRect(int,int,int,int)","958":"OFDPageGraphics2D::::clearRect(int,int,int,int)","959":"OFDPageGraphics2D::::clearRect(int,int,int,int)","960":"OFDPageGraphics2D::::clearRect(int,int,int,int)","961":"OFDPageGraphics2D::::clearRect(int,int,int,int)","973":"OFDPageGraphics2D::::drawRoundRect(int,int,int,int,int,int)","974":"OFDPageGraphics2D::::drawRoundRect(int,int,int,int,int,int)","975":"OFDPageGraphics2D::::drawRoundRect(int,int,int,int,int,int)","976":"OFDPageGraphics2D::::drawRoundRect(int,int,int,int,int,int)","988":"OFDPageGraphics2D::::fillRoundRect(int,int,int,int,int,int)","989":"OFDPageGraphics2D::::fillRoundRect(int,int,int,int,int,int)","990":"OFDPageGraphics2D::::fillRoundRect(int,int,int,int,int,int)","991":"OFDPageGraphics2D::::fillRoundRect(int,int,int,int,int,int)","1001":"OFDPageGraphics2D::::drawOval(int,int,int,int)","1002":"OFDPageGraphics2D::::drawOval(int,int,int,int)","1003":"OFDPageGraphics2D::::drawOval(int,int,int,int)","1004":"OFDPageGraphics2D::::drawOval(int,int,int,int)","1014":"OFDPageGraphics2D::::fillOval(int,int,int,int)","1015":"OFDPageGraphics2D::::fillOval(int,int,int,int)","1016":"OFDPageGraphics2D::::fillOval(int,int,int,int)","1017":"OFDPageGraphics2D::::fillOval(int,int,int,int)","1031":"OFDPageGraphics2D::::drawArc(int,int,int,int,int,int)","1032":"OFDPageGraphics2D::::drawArc(int,int,int,int,int,int)","1033":"OFDPageGraphics2D::::drawArc(int,int,int,int,int,int)","1034":"OFDPageGraphics2D::::drawArc(int,int,int,int,int,int)","1050":"OFDPageGraphics2D::::fillArc(int,int,int,int,int,int)","1051":"OFDPageGraphics2D::::fillArc(int,int,int,int,int,int)","1052":"OFDPageGraphics2D::::fillArc(int,int,int,int,int,int)","1053":"OFDPageGraphics2D::::fillArc(int,int,int,int,int,int)","1064":"OFDPageGraphics2D::::drawPolyline(int[],int[],int)","1065":"OFDPageGraphics2D::::drawPolyline(int[],int[],int)","1066":"OFDPageGraphics2D::::drawPolyline(int[],int[],int)","1067":"OFDPageGraphics2D::::drawPolyline(int[],int[],int)","1068":"OFDPageGraphics2D::::drawPolyline(int[],int[],int)","1069":"OFDPageGraphics2D::::drawPolyline(int[],int[],int)","1070":"OFDPageGraphics2D::::drawPolyline(int[],int[],int)","1071":"OFDPageGraphics2D::::drawPolyline(int[],int[],int)","1072":"OFDPageGraphics2D::::drawPolyline(int[],int[],int)","1081":"OFDPageGraphics2D::::drawPolygon(int[],int[],int)","1082":"OFDPageGraphics2D::::drawPolygon(int[],int[],int)","1083":"OFDPageGraphics2D::::drawPolygon(int[],int[],int)","1084":"OFDPageGraphics2D::::drawPolygon(int[],int[],int)","1085":"OFDPageGraphics2D::::drawPolygon(int[],int[],int)","1086":"OFDPageGraphics2D::::drawPolygon(int[],int[],int)","1087":"OFDPageGraphics2D::::drawPolygon(int[],int[],int)","1088":"OFDPageGraphics2D::::drawPolygon(int[],int[],int)","1089":"OFDPageGraphics2D::::drawPolygon(int[],int[],int)","1090":"OFDPageGraphics2D::::drawPolygon(int[],int[],int)","1099":"OFDPageGraphics2D::::fillPolygon(int[],int[],int)","1100":"OFDPageGraphics2D::::fillPolygon(int[],int[],int)","1101":"OFDPageGraphics2D::::fillPolygon(int[],int[],int)","1102":"OFDPageGraphics2D::::fillPolygon(int[],int[],int)","1103":"OFDPageGraphics2D::::fillPolygon(int[],int[],int)","1104":"OFDPageGraphics2D::::fillPolygon(int[],int[],int)","1105":"OFDPageGraphics2D::::fillPolygon(int[],int[],int)","1106":"OFDPageGraphics2D::::fillPolygon(int[],int[],int)","1107":"OFDPageGraphics2D::::fillPolygon(int[],int[],int)","1108":"OFDPageGraphics2D::::fillPolygon(int[],int[],int)","1116":"OFDPageGraphics2D::::translate(int,int)","1117":"OFDPageGraphics2D::::translate(int,int)","1118":"OFDPageGraphics2D::::translate(int,int)","1119":"OFDPageGraphics2D::::translate(int,int)","1120":"OFDPageGraphics2D::::translate(int,int)","1128":"OFDPageGraphics2D::::translate(double,double)","1129":"OFDPageGraphics2D::::translate(double,double)","1130":"OFDPageGraphics2D::::translate(double,double)","1131":"OFDPageGraphics2D::::translate(double,double)","1132":"OFDPageGraphics2D::::translate(double,double)","1139":"OFDPageGraphics2D::::rotate(double)","1140":"OFDPageGraphics2D::::rotate(double)","1141":"OFDPageGraphics2D::::rotate(double)","1142":"OFDPageGraphics2D::::rotate(double)","1143":"OFDPageGraphics2D::::rotate(double)","1159":"OFDPageGraphics2D::::rotate(double,double,double)","1160":"OFDPageGraphics2D::::rotate(double,double,double)","1161":"OFDPageGraphics2D::::rotate(double,double,double)","1162":"OFDPageGraphics2D::::rotate(double,double,double)","1163":"OFDPageGraphics2D::::rotate(double,double,double)","1164":"OFDPageGraphics2D::::rotate(double,double,double)","1165":"OFDPageGraphics2D::::rotate(double,double,double)","1173":"OFDPageGraphics2D::::scale(double,double)","1174":"OFDPageGraphics2D::::scale(double,double)","1175":"OFDPageGraphics2D::::scale(double,double)","1176":"OFDPageGraphics2D::::scale(double,double)","1177":"OFDPageGraphics2D::::scale(double,double)","1185":"OFDPageGraphics2D::::shear(double,double)","1186":"OFDPageGraphics2D::::shear(double,double)","1187":"OFDPageGraphics2D::::shear(double,double)","1188":"OFDPageGraphics2D::::shear(double,double)","1189":"OFDPageGraphics2D::::shear(double,double)","1196":"OFDPageGraphics2D::::transform(java.awt.geom.AffineTransform)","1197":"OFDPageGraphics2D::::transform(java.awt.geom.AffineTransform)","1198":"OFDPageGraphics2D::::transform(java.awt.geom.AffineTransform)","1199":"OFDPageGraphics2D::::transform(java.awt.geom.AffineTransform)","1200":"OFDPageGraphics2D::::transform(java.awt.geom.AffineTransform)","1201":"OFDPageGraphics2D::::transform(java.awt.geom.AffineTransform)","1202":"OFDPageGraphics2D::::transform(java.awt.geom.AffineTransform)","1203":"OFDPageGraphics2D::::transform(java.awt.geom.AffineTransform)","1210":"OFDPageGraphics2D::::setTransform(java.awt.geom.AffineTransform)","1211":"OFDPageGraphics2D::::setTransform(java.awt.geom.AffineTransform)","1212":"OFDPageGraphics2D::::setTransform(java.awt.geom.AffineTransform)","1213":"OFDPageGraphics2D::::setTransform(java.awt.geom.AffineTransform)","1214":"OFDPageGraphics2D::::setTransform(java.awt.geom.AffineTransform)","1215":"OFDPageGraphics2D::::setTransform(java.awt.geom.AffineTransform)","1216":"OFDPageGraphics2D::::setTransform(java.awt.geom.AffineTransform)","1217":"OFDPageGraphics2D::::setTransform(java.awt.geom.AffineTransform)","1224":"OFDPageGraphics2D::::getTransform()","1225":"OFDPageGraphics2D::::getTransform()","1226":"OFDPageGraphics2D::::getTransform()","1227":"OFDPageGraphics2D::::getTransform()","1234":"OFDPageGraphics2D::::getPaint()","1235":"OFDPageGraphics2D::::getPaint()","1236":"OFDPageGraphics2D::::getPaint()","1237":"OFDPageGraphics2D::::getPaint()","1246":"OFDPageGraphics2D::::getComposite()","1247":"OFDPageGraphics2D::::getComposite()","1248":"OFDPageGraphics2D::::getComposite()","1249":"OFDPageGraphics2D::::getComposite()","1256":"OFDPageGraphics2D::::setBackground(java.awt.Color)","1257":"OFDPageGraphics2D::::setBackground(java.awt.Color)","1258":"OFDPageGraphics2D::::setBackground(java.awt.Color)","1259":"OFDPageGraphics2D::::setBackground(java.awt.Color)","1266":"OFDPageGraphics2D::::getBackground()","1267":"OFDPageGraphics2D::::getBackground()","1268":"OFDPageGraphics2D::::getBackground()","1269":"OFDPageGraphics2D::::getBackground()","1276":"OFDPageGraphics2D::::getStroke()","1277":"OFDPageGraphics2D::::getStroke()","1278":"OFDPageGraphics2D::::getStroke()","1279":"OFDPageGraphics2D::::getStroke()","1286":"OFDPageGraphics2D::::getFontRenderContext()","1287":"OFDPageGraphics2D::::getFontRenderContext()","1288":"OFDPageGraphics2D::::getFontRenderContext()","1289":"OFDPageGraphics2D::::getFontRenderContext()","1295":"OFDPageGraphics2D::::dispose()","1296":"OFDPageGraphics2D::::dispose()","1297":"OFDPageGraphics2D::::dispose()","1298":"OFDPageGraphics2D::::dispose()","1309":"OFDPageGraphics2D::::makeClip(java.awt.Shape,java.awt.geom.AffineTransform)","1310":"OFDPageGraphics2D::::makeClip(java.awt.Shape,java.awt.geom.AffineTransform)","1311":"OFDPageGraphics2D::::makeClip(java.awt.Shape,java.awt.geom.AffineTransform)","1312":"OFDPageGraphics2D::::makeClip(java.awt.Shape,java.awt.geom.AffineTransform)","1313":"OFDPageGraphics2D::::makeClip(java.awt.Shape,java.awt.geom.AffineTransform)","1314":"OFDPageGraphics2D::::makeClip(java.awt.Shape,java.awt.geom.AffineTransform)","1315":"OFDPageGraphics2D::::makeClip(java.awt.Shape,java.awt.geom.AffineTransform)","1316":"OFDPageGraphics2D::::makeClip(java.awt.Shape,java.awt.geom.AffineTransform)","1317":"OFDPageGraphics2D::::makeClip(java.awt.Shape,java.awt.geom.AffineTransform)","1318":"OFDPageGraphics2D::::makeClip(java.awt.Shape,java.awt.geom.AffineTransform)","1319":"OFDPageGraphics2D::::makeClip(java.awt.Shape,java.awt.geom.AffineTransform)","1320":"OFDPageGraphics2D::::makeClip(java.awt.Shape,java.awt.geom.AffineTransform)","1321":"OFDPageGraphics2D::::makeClip(java.awt.Shape,java.awt.geom.AffineTransform)","1322":"OFDPageGraphics2D::::makeClip(java.awt.Shape,java.awt.geom.AffineTransform)","1323":"OFDPageGraphics2D::::makeClip(java.awt.Shape,java.awt.geom.AffineTransform)","1324":"OFDPageGraphics2D::::makeClip(java.awt.Shape,java.awt.geom.AffineTransform)","1325":"OFDPageGraphics2D::::makeClip(java.awt.Shape,java.awt.geom.AffineTransform)","1326":"OFDPageGraphics2D::::makeClip(java.awt.Shape,java.awt.geom.AffineTransform)","1327":"OFDPageGraphics2D::::makeClip(java.awt.Shape,java.awt.geom.AffineTransform)","1328":"OFDPageGraphics2D::::makeClip(java.awt.Shape,java.awt.geom.AffineTransform)","1329":"OFDPageGraphics2D::::makeClip(java.awt.Shape,java.awt.geom.AffineTransform)","1330":"OFDPageGraphics2D::::makeClip(java.awt.Shape,java.awt.geom.AffineTransform)","1331":"OFDPageGraphics2D::::makeClip(java.awt.Shape,java.awt.geom.AffineTransform)","1332":"OFDPageGraphics2D::::makeClip(java.awt.Shape,java.awt.geom.AffineTransform)","1333":"OFDPageGraphics2D::::makeClip(java.awt.Shape,java.awt.geom.AffineTransform)","1334":"OFDPageGraphics2D::::makeClip(java.awt.Shape,java.awt.geom.AffineTransform)","1335":"OFDPageGraphics2D::::makeClip(java.awt.Shape,java.awt.geom.AffineTransform)","1336":"OFDPageGraphics2D::::makeClip(java.awt.Shape,java.awt.geom.AffineTransform)","1337":"OFDPageGraphics2D::::makeClip(java.awt.Shape,java.awt.geom.AffineTransform)","1338":"OFDPageGraphics2D::::makeClip(java.awt.Shape,java.awt.geom.AffineTransform)","1339":"OFDPageGraphics2D::::makeClip(java.awt.Shape,java.awt.geom.AffineTransform)","1340":"OFDPageGraphics2D::::makeClip(java.awt.Shape,java.awt.geom.AffineTransform)","1341":"OFDPageGraphics2D::::makeClip(java.awt.Shape,java.awt.geom.AffineTransform)","1342":"OFDPageGraphics2D::::makeClip(java.awt.Shape,java.awt.geom.AffineTransform)","1343":"OFDPageGraphics2D::::makeClip(java.awt.Shape,java.awt.geom.AffineTransform)","1344":"OFDPageGraphics2D::::makeClip(java.awt.Shape,java.awt.geom.AffineTransform)","1352":"OFDPageGraphics2D::::convert2Img(java.awt.image.RenderedImage)","1353":"OFDPageGraphics2D::::convert2Img(java.awt.image.RenderedImage)","1354":"OFDPageGraphics2D::::convert2Img(java.awt.image.RenderedImage)","1355":"OFDPageGraphics2D::::convert2Img(java.awt.image.RenderedImage)","1356":"OFDPageGraphics2D::::convert2Img(java.awt.image.RenderedImage)","1357":"OFDPageGraphics2D::::convert2Img(java.awt.image.RenderedImage)","1358":"OFDPageGraphics2D::::convert2Img(java.awt.image.RenderedImage)","1359":"OFDPageGraphics2D::::convert2Img(java.awt.image.RenderedImage)","1360":"OFDPageGraphics2D::::convert2Img(java.awt.image.RenderedImage)","1361":"OFDPageGraphics2D::::convert2Img(java.awt.image.RenderedImage)","1362":"OFDPageGraphics2D::::convert2Img(java.awt.image.RenderedImage)","1363":"OFDPageGraphics2D::::convert2Img(java.awt.image.RenderedImage)","1364":"OFDPageGraphics2D::::convert2Img(java.awt.image.RenderedImage)","1365":"OFDPageGraphics2D::::convert2Img(java.awt.image.RenderedImage)","1366":"OFDPageGraphics2D::::convert2Img(java.awt.image.RenderedImage)","1367":"OFDPageGraphics2D::::convert2Img(java.awt.image.RenderedImage)","1368":"OFDPageGraphics2D::::convert2Img(java.awt.image.RenderedImage)","1369":"OFDPageGraphics2D::::convert2Img(java.awt.image.RenderedImage)","1370":"OFDPageGraphics2D::::convert2Img(java.awt.image.RenderedImage)","1371":"OFDPageGraphics2D::::convert2Img(java.awt.image.RenderedImage)","1372":"OFDPageGraphics2D::::convert2Img(java.awt.image.RenderedImage)","1373":"OFDPageGraphics2D::::convert2Img(java.awt.image.RenderedImage)","1381":"OFDPageGraphics2D::::trans(java.awt.geom.AffineTransform)","1382":"OFDPageGraphics2D::::trans(java.awt.geom.AffineTransform)","1383":"OFDPageGraphics2D::::trans(java.awt.geom.AffineTransform)","1384":"OFDPageGraphics2D::::trans(java.awt.geom.AffineTransform)","1385":"OFDPageGraphics2D::::trans(java.awt.geom.AffineTransform)","1386":"OFDPageGraphics2D::::trans(java.awt.geom.AffineTransform)","1387":"OFDPageGraphics2D::::trans(java.awt.geom.AffineTransform)","1388":"OFDPageGraphics2D::::trans(java.awt.geom.AffineTransform)"},"test_reverse_method_lines_dic":{"20":"OFDPageGraphics2DTest::::linearGradientPaint()","21":"OFDPageGraphics2DTest::::linearGradientPaint()","22":"OFDPageGraphics2DTest::::linearGradientPaint()","23":"OFDPageGraphics2DTest::::linearGradientPaint()","24":"OFDPageGraphics2DTest::::linearGradientPaint()","25":"OFDPageGraphics2DTest::::linearGradientPaint()","26":"OFDPageGraphics2DTest::::linearGradientPaint()","27":"OFDPageGraphics2DTest::::linearGradientPaint()","28":"OFDPageGraphics2DTest::::linearGradientPaint()","29":"OFDPageGraphics2DTest::::linearGradientPaint()","30":"OFDPageGraphics2DTest::::linearGradientPaint()","31":"OFDPageGraphics2DTest::::linearGradientPaint()","32":"OFDPageGraphics2DTest::::linearGradientPaint()","33":"OFDPageGraphics2DTest::::linearGradientPaint()","34":"OFDPageGraphics2DTest::::linearGradientPaint()","35":"OFDPageGraphics2DTest::::linearGradientPaint()","36":"OFDPageGraphics2DTest::::linearGradientPaint()","42":"OFDPageGraphics2DTest::::drawRoundRect()","43":"OFDPageGraphics2DTest::::drawRoundRect()","44":"OFDPageGraphics2DTest::::drawRoundRect()","45":"OFDPageGraphics2DTest::::drawRoundRect()","46":"OFDPageGraphics2DTest::::drawRoundRect()","47":"OFDPageGraphics2DTest::::drawRoundRect()","48":"OFDPageGraphics2DTest::::drawRoundRect()","49":"OFDPageGraphics2DTest::::drawRoundRect()","50":"OFDPageGraphics2DTest::::drawRoundRect()","55":"OFDPageGraphics2DTest::::fillRoundRect()","56":"OFDPageGraphics2DTest::::fillRoundRect()","57":"OFDPageGraphics2DTest::::fillRoundRect()","58":"OFDPageGraphics2DTest::::fillRoundRect()","59":"OFDPageGraphics2DTest::::fillRoundRect()","60":"OFDPageGraphics2DTest::::fillRoundRect()","61":"OFDPageGraphics2DTest::::fillRoundRect()","62":"OFDPageGraphics2DTest::::fillRoundRect()","63":"OFDPageGraphics2DTest::::fillRoundRect()","64":"OFDPageGraphics2DTest::::fillRoundRect()","70":"OFDPageGraphics2DTest::::draw()","71":"OFDPageGraphics2DTest::::draw()","72":"OFDPageGraphics2DTest::::draw()","73":"OFDPageGraphics2DTest::::draw()","74":"OFDPageGraphics2DTest::::draw()","75":"OFDPageGraphics2DTest::::draw()","76":"OFDPageGraphics2DTest::::draw()","77":"OFDPageGraphics2DTest::::draw()","78":"OFDPageGraphics2DTest::::draw()","79":"OFDPageGraphics2DTest::::draw()","80":"OFDPageGraphics2DTest::::draw()","81":"OFDPageGraphics2DTest::::draw()","82":"OFDPageGraphics2DTest::::draw()","83":"OFDPageGraphics2DTest::::draw()","84":"OFDPageGraphics2DTest::::draw()","85":"OFDPageGraphics2DTest::::draw()","86":"OFDPageGraphics2DTest::::draw()","87":"OFDPageGraphics2DTest::::draw()","92":"OFDPageGraphics2DTest::::drawStroke()","93":"OFDPageGraphics2DTest::::drawStroke()","94":"OFDPageGraphics2DTest::::drawStroke()","95":"OFDPageGraphics2DTest::::drawStroke()","96":"OFDPageGraphics2DTest::::drawStroke()","97":"OFDPageGraphics2DTest::::drawStroke()","98":"OFDPageGraphics2DTest::::drawStroke()","99":"OFDPageGraphics2DTest::::drawStroke()","100":"OFDPageGraphics2DTest::::drawStroke()","101":"OFDPageGraphics2DTest::::drawStroke()","102":"OFDPageGraphics2DTest::::drawStroke()","103":"OFDPageGraphics2DTest::::drawStroke()","104":"OFDPageGraphics2DTest::::drawStroke()","105":"OFDPageGraphics2DTest::::drawStroke()","106":"OFDPageGraphics2DTest::::drawStroke()","111":"OFDPageGraphics2DTest::::drawArc()","112":"OFDPageGraphics2DTest::::drawArc()","113":"OFDPageGraphics2DTest::::drawArc()","114":"OFDPageGraphics2DTest::::drawArc()","115":"OFDPageGraphics2DTest::::drawArc()","116":"OFDPageGraphics2DTest::::drawArc()","117":"OFDPageGraphics2DTest::::drawArc()","118":"OFDPageGraphics2DTest::::drawArc()","119":"OFDPageGraphics2DTest::::drawArc()","120":"OFDPageGraphics2DTest::::drawArc()","125":"OFDPageGraphics2DTest::::fillArc()","126":"OFDPageGraphics2DTest::::fillArc()","127":"OFDPageGraphics2DTest::::fillArc()","128":"OFDPageGraphics2DTest::::fillArc()","129":"OFDPageGraphics2DTest::::fillArc()","130":"OFDPageGraphics2DTest::::fillArc()","131":"OFDPageGraphics2DTest::::fillArc()","132":"OFDPageGraphics2DTest::::fillArc()","133":"OFDPageGraphics2DTest::::fillArc()","134":"OFDPageGraphics2DTest::::fillArc()","139":"OFDPageGraphics2DTest::::clearRect()","140":"OFDPageGraphics2DTest::::clearRect()","141":"OFDPageGraphics2DTest::::clearRect()","142":"OFDPageGraphics2DTest::::clearRect()","143":"OFDPageGraphics2DTest::::clearRect()","144":"OFDPageGraphics2DTest::::clearRect()","145":"OFDPageGraphics2DTest::::clearRect()","146":"OFDPageGraphics2DTest::::clearRect()","147":"OFDPageGraphics2DTest::::clearRect()","148":"OFDPageGraphics2DTest::::clearRect()","149":"OFDPageGraphics2DTest::::clearRect()","154":"OFDPageGraphics2DTest::::fillOval()","155":"OFDPageGraphics2DTest::::fillOval()","156":"OFDPageGraphics2DTest::::fillOval()","157":"OFDPageGraphics2DTest::::fillOval()","158":"OFDPageGraphics2DTest::::fillOval()","159":"OFDPageGraphics2DTest::::fillOval()","160":"OFDPageGraphics2DTest::::fillOval()","161":"OFDPageGraphics2DTest::::fillOval()","162":"OFDPageGraphics2DTest::::fillOval()","163":"OFDPageGraphics2DTest::::fillOval()","168":"OFDPageGraphics2DTest::::drawOval()","169":"OFDPageGraphics2DTest::::drawOval()","170":"OFDPageGraphics2DTest::::drawOval()","171":"OFDPageGraphics2DTest::::drawOval()","172":"OFDPageGraphics2DTest::::drawOval()","173":"OFDPageGraphics2DTest::::drawOval()","174":"OFDPageGraphics2DTest::::drawOval()","175":"OFDPageGraphics2DTest::::drawOval()","176":"OFDPageGraphics2DTest::::drawOval()","177":"OFDPageGraphics2DTest::::drawOval()","182":"OFDPageGraphics2DTest::::drawPolyline()","183":"OFDPageGraphics2DTest::::drawPolyline()","184":"OFDPageGraphics2DTest::::drawPolyline()","185":"OFDPageGraphics2DTest::::drawPolyline()","186":"OFDPageGraphics2DTest::::drawPolyline()","187":"OFDPageGraphics2DTest::::drawPolyline()","188":"OFDPageGraphics2DTest::::drawPolyline()","189":"OFDPageGraphics2DTest::::drawPolyline()","190":"OFDPageGraphics2DTest::::drawPolyline()","191":"OFDPageGraphics2DTest::::drawPolyline()","192":"OFDPageGraphics2DTest::::drawPolyline()","193":"OFDPageGraphics2DTest::::drawPolyline()","198":"OFDPageGraphics2DTest::::drawPolygon()","199":"OFDPageGraphics2DTest::::drawPolygon()","200":"OFDPageGraphics2DTest::::drawPolygon()","201":"OFDPageGraphics2DTest::::drawPolygon()","202":"OFDPageGraphics2DTest::::drawPolygon()","203":"OFDPageGraphics2DTest::::drawPolygon()","204":"OFDPageGraphics2DTest::::drawPolygon()","205":"OFDPageGraphics2DTest::::drawPolygon()","206":"OFDPageGraphics2DTest::::drawPolygon()","207":"OFDPageGraphics2DTest::::drawPolygon()","208":"OFDPageGraphics2DTest::::drawPolygon()","209":"OFDPageGraphics2DTest::::drawPolygon()","210":"OFDPageGraphics2DTest::::drawPolygon()","211":"OFDPageGraphics2DTest::::drawPolygon()","216":"OFDPageGraphics2DTest::::fillPolygon()","217":"OFDPageGraphics2DTest::::fillPolygon()","218":"OFDPageGraphics2DTest::::fillPolygon()","219":"OFDPageGraphics2DTest::::fillPolygon()","220":"OFDPageGraphics2DTest::::fillPolygon()","221":"OFDPageGraphics2DTest::::fillPolygon()","222":"OFDPageGraphics2DTest::::fillPolygon()","223":"OFDPageGraphics2DTest::::fillPolygon()","224":"OFDPageGraphics2DTest::::fillPolygon()","225":"OFDPageGraphics2DTest::::fillPolygon()","226":"OFDPageGraphics2DTest::::fillPolygon()","227":"OFDPageGraphics2DTest::::fillPolygon()","228":"OFDPageGraphics2DTest::::fillPolygon()","229":"OFDPageGraphics2DTest::::fillPolygon()","232":"OFDPageGraphics2DTest::::drawImage()","233":"OFDPageGraphics2DTest::::drawImage()","234":"OFDPageGraphics2DTest::::drawImage()","235":"OFDPageGraphics2DTest::::drawImage()","236":"OFDPageGraphics2DTest::::drawImage()","237":"OFDPageGraphics2DTest::::drawImage()","238":"OFDPageGraphics2DTest::::drawImage()","239":"OFDPageGraphics2DTest::::drawImage()","240":"OFDPageGraphics2DTest::::drawImage()","241":"OFDPageGraphics2DTest::::drawImage()","242":"OFDPageGraphics2DTest::::drawImage()","243":"OFDPageGraphics2DTest::::drawImage()","244":"OFDPageGraphics2DTest::::drawImage()","245":"OFDPageGraphics2DTest::::drawImage()","247":"OFDPageGraphics2DTest::::drawImage2()","248":"OFDPageGraphics2DTest::::drawImage2()","249":"OFDPageGraphics2DTest::::drawImage2()","250":"OFDPageGraphics2DTest::::drawImage2()","251":"OFDPageGraphics2DTest::::drawImage2()","252":"OFDPageGraphics2DTest::::drawImage2()","253":"OFDPageGraphics2DTest::::drawImage2()","254":"OFDPageGraphics2DTest::::drawImage2()","255":"OFDPageGraphics2DTest::::drawImage2()","256":"OFDPageGraphics2DTest::::drawImage2()","257":"OFDPageGraphics2DTest::::drawImage2()","258":"OFDPageGraphics2DTest::::drawImage2()","260":"OFDPageGraphics2DTest::::drawImageAffineTransform()","261":"OFDPageGraphics2DTest::::drawImageAffineTransform()","262":"OFDPageGraphics2DTest::::drawImageAffineTransform()","263":"OFDPageGraphics2DTest::::drawImageAffineTransform()","264":"OFDPageGraphics2DTest::::drawImageAffineTransform()","265":"OFDPageGraphics2DTest::::drawImageAffineTransform()","266":"OFDPageGraphics2DTest::::drawImageAffineTransform()","267":"OFDPageGraphics2DTest::::drawImageAffineTransform()","268":"OFDPageGraphics2DTest::::drawImageAffineTransform()","269":"OFDPageGraphics2DTest::::drawImageAffineTransform()","270":"OFDPageGraphics2DTest::::drawImageAffineTransform()","271":"OFDPageGraphics2DTest::::drawImageAffineTransform()","272":"OFDPageGraphics2DTest::::drawImageAffineTransform()","273":"OFDPageGraphics2DTest::::drawImageAffineTransform()","279":"OFDPageGraphics2DTest::::drawImageBackground()","280":"OFDPageGraphics2DTest::::drawImageBackground()","281":"OFDPageGraphics2DTest::::drawImageBackground()","282":"OFDPageGraphics2DTest::::drawImageBackground()","283":"OFDPageGraphics2DTest::::drawImageBackground()","284":"OFDPageGraphics2DTest::::drawImageBackground()","285":"OFDPageGraphics2DTest::::drawImageBackground()","286":"OFDPageGraphics2DTest::::drawImageBackground()","287":"OFDPageGraphics2DTest::::drawImageBackground()","288":"OFDPageGraphics2DTest::::drawImageBackground()","289":"OFDPageGraphics2DTest::::drawImageBackground()","290":"OFDPageGraphics2DTest::::drawImageBackground()","292":"OFDPageGraphics2DTest::::drawImageBackground2()","293":"OFDPageGraphics2DTest::::drawImageBackground2()","294":"OFDPageGraphics2DTest::::drawImageBackground2()","295":"OFDPageGraphics2DTest::::drawImageBackground2()","296":"OFDPageGraphics2DTest::::drawImageBackground2()","297":"OFDPageGraphics2DTest::::drawImageBackground2()","298":"OFDPageGraphics2DTest::::drawImageBackground2()","299":"OFDPageGraphics2DTest::::drawImageBackground2()","300":"OFDPageGraphics2DTest::::drawImageBackground2()","301":"OFDPageGraphics2DTest::::drawImageBackground2()","302":"OFDPageGraphics2DTest::::drawImageBackground2()","303":"OFDPageGraphics2DTest::::drawImageBackground2()","308":"OFDPageGraphics2DTest::::drawImagePiece()","309":"OFDPageGraphics2DTest::::drawImagePiece()","310":"OFDPageGraphics2DTest::::drawImagePiece()","311":"OFDPageGraphics2DTest::::drawImagePiece()","312":"OFDPageGraphics2DTest::::drawImagePiece()","313":"OFDPageGraphics2DTest::::drawImagePiece()","314":"OFDPageGraphics2DTest::::drawImagePiece()","315":"OFDPageGraphics2DTest::::drawImagePiece()","316":"OFDPageGraphics2DTest::::drawImagePiece()","317":"OFDPageGraphics2DTest::::drawImagePiece()","318":"OFDPageGraphics2DTest::::drawImagePiece()","319":"OFDPageGraphics2DTest::::drawImagePiece()","321":"OFDPageGraphics2DTest::::drawImagePieceColor()","322":"OFDPageGraphics2DTest::::drawImagePieceColor()","323":"OFDPageGraphics2DTest::::drawImagePieceColor()","324":"OFDPageGraphics2DTest::::drawImagePieceColor()","325":"OFDPageGraphics2DTest::::drawImagePieceColor()","326":"OFDPageGraphics2DTest::::drawImagePieceColor()","327":"OFDPageGraphics2DTest::::drawImagePieceColor()","328":"OFDPageGraphics2DTest::::drawImagePieceColor()","329":"OFDPageGraphics2DTest::::drawImagePieceColor()","330":"OFDPageGraphics2DTest::::drawImagePieceColor()","331":"OFDPageGraphics2DTest::::drawImagePieceColor()","332":"OFDPageGraphics2DTest::::drawImagePieceColor()","337":"OFDPageGraphics2DTest::::translate()","338":"OFDPageGraphics2DTest::::translate()","339":"OFDPageGraphics2DTest::::translate()","340":"OFDPageGraphics2DTest::::translate()","341":"OFDPageGraphics2DTest::::translate()","342":"OFDPageGraphics2DTest::::translate()","343":"OFDPageGraphics2DTest::::translate()","344":"OFDPageGraphics2DTest::::translate()","345":"OFDPageGraphics2DTest::::translate()","346":"OFDPageGraphics2DTest::::translate()","347":"OFDPageGraphics2DTest::::translate()","352":"OFDPageGraphics2DTest::::rotate()","353":"OFDPageGraphics2DTest::::rotate()","354":"OFDPageGraphics2DTest::::rotate()","355":"OFDPageGraphics2DTest::::rotate()","356":"OFDPageGraphics2DTest::::rotate()","357":"OFDPageGraphics2DTest::::rotate()","358":"OFDPageGraphics2DTest::::rotate()","359":"OFDPageGraphics2DTest::::rotate()","360":"OFDPageGraphics2DTest::::rotate()","361":"OFDPageGraphics2DTest::::rotate()","362":"OFDPageGraphics2DTest::::rotate()","367":"OFDPageGraphics2DTest::::rotate2()","368":"OFDPageGraphics2DTest::::rotate2()","369":"OFDPageGraphics2DTest::::rotate2()","370":"OFDPageGraphics2DTest::::rotate2()","371":"OFDPageGraphics2DTest::::rotate2()","372":"OFDPageGraphics2DTest::::rotate2()","373":"OFDPageGraphics2DTest::::rotate2()","374":"OFDPageGraphics2DTest::::rotate2()","375":"OFDPageGraphics2DTest::::rotate2()","376":"OFDPageGraphics2DTest::::rotate2()","377":"OFDPageGraphics2DTest::::rotate2()","379":"OFDPageGraphics2DTest::::translateRotate()","380":"OFDPageGraphics2DTest::::translateRotate()","381":"OFDPageGraphics2DTest::::translateRotate()","382":"OFDPageGraphics2DTest::::translateRotate()","383":"OFDPageGraphics2DTest::::translateRotate()","384":"OFDPageGraphics2DTest::::translateRotate()","385":"OFDPageGraphics2DTest::::translateRotate()","386":"OFDPageGraphics2DTest::::translateRotate()","387":"OFDPageGraphics2DTest::::translateRotate()","388":"OFDPageGraphics2DTest::::translateRotate()","389":"OFDPageGraphics2DTest::::translateRotate()","390":"OFDPageGraphics2DTest::::translateRotate()","395":"OFDPageGraphics2DTest::::scale()","396":"OFDPageGraphics2DTest::::scale()","397":"OFDPageGraphics2DTest::::scale()","398":"OFDPageGraphics2DTest::::scale()","399":"OFDPageGraphics2DTest::::scale()","400":"OFDPageGraphics2DTest::::scale()","401":"OFDPageGraphics2DTest::::scale()","402":"OFDPageGraphics2DTest::::scale()","403":"OFDPageGraphics2DTest::::scale()","404":"OFDPageGraphics2DTest::::scale()","405":"OFDPageGraphics2DTest::::scale()","406":"OFDPageGraphics2DTest::::scale()","407":"OFDPageGraphics2DTest::::scale()","413":"OFDPageGraphics2DTest::::shear()","414":"OFDPageGraphics2DTest::::shear()","415":"OFDPageGraphics2DTest::::shear()","416":"OFDPageGraphics2DTest::::shear()","417":"OFDPageGraphics2DTest::::shear()","418":"OFDPageGraphics2DTest::::shear()","419":"OFDPageGraphics2DTest::::shear()","420":"OFDPageGraphics2DTest::::shear()","421":"OFDPageGraphics2DTest::::shear()","422":"OFDPageGraphics2DTest::::shear()","423":"OFDPageGraphics2DTest::::shear()","428":"OFDPageGraphics2DTest::::getTransform()","429":"OFDPageGraphics2DTest::::getTransform()","430":"OFDPageGraphics2DTest::::getTransform()","431":"OFDPageGraphics2DTest::::getTransform()","432":"OFDPageGraphics2DTest::::getTransform()","433":"OFDPageGraphics2DTest::::getTransform()","434":"OFDPageGraphics2DTest::::getTransform()","435":"OFDPageGraphics2DTest::::getTransform()","436":"OFDPageGraphics2DTest::::getTransform()","437":"OFDPageGraphics2DTest::::getTransform()","438":"OFDPageGraphics2DTest::::getTransform()","439":"OFDPageGraphics2DTest::::getTransform()","440":"OFDPageGraphics2DTest::::getTransform()","441":"OFDPageGraphics2DTest::::getTransform()","442":"OFDPageGraphics2DTest::::getTransform()","443":"OFDPageGraphics2DTest::::getTransform()","444":"OFDPageGraphics2DTest::::getTransform()","445":"OFDPageGraphics2DTest::::getTransform()","446":"OFDPageGraphics2DTest::::getTransform()","447":"OFDPageGraphics2DTest::::getTransform()","448":"OFDPageGraphics2DTest::::getTransform()","449":"OFDPageGraphics2DTest::::getTransform()","450":"OFDPageGraphics2DTest::::getTransform()","455":"OFDPageGraphics2DTest::::transform()","456":"OFDPageGraphics2DTest::::transform()","457":"OFDPageGraphics2DTest::::transform()","458":"OFDPageGraphics2DTest::::transform()","459":"OFDPageGraphics2DTest::::transform()","460":"OFDPageGraphics2DTest::::transform()","461":"OFDPageGraphics2DTest::::transform()","462":"OFDPageGraphics2DTest::::transform()","463":"OFDPageGraphics2DTest::::transform()","464":"OFDPageGraphics2DTest::::transform()","465":"OFDPageGraphics2DTest::::transform()","466":"OFDPageGraphics2DTest::::transform()","467":"OFDPageGraphics2DTest::::transform()","468":"OFDPageGraphics2DTest::::transform()","469":"OFDPageGraphics2DTest::::transform()","470":"OFDPageGraphics2DTest::::transform()","471":"OFDPageGraphics2DTest::::transform()","472":"OFDPageGraphics2DTest::::transform()","473":"OFDPageGraphics2DTest::::transform()","474":"OFDPageGraphics2DTest::::transform()","475":"OFDPageGraphics2DTest::::transform()","476":"OFDPageGraphics2DTest::::transform()","481":"OFDPageGraphics2DTest::::setClip()","482":"OFDPageGraphics2DTest::::setClip()","483":"OFDPageGraphics2DTest::::setClip()","484":"OFDPageGraphics2DTest::::setClip()","485":"OFDPageGraphics2DTest::::setClip()","486":"OFDPageGraphics2DTest::::setClip()","487":"OFDPageGraphics2DTest::::setClip()","488":"OFDPageGraphics2DTest::::setClip()","489":"OFDPageGraphics2DTest::::setClip()","490":"OFDPageGraphics2DTest::::setClip()","491":"OFDPageGraphics2DTest::::setClip()","492":"OFDPageGraphics2DTest::::setClip()","493":"OFDPageGraphics2DTest::::setClip()","494":"OFDPageGraphics2DTest::::setClip()","499":"OFDPageGraphics2DTest::::drawString()","500":"OFDPageGraphics2DTest::::drawString()","501":"OFDPageGraphics2DTest::::drawString()","502":"OFDPageGraphics2DTest::::drawString()","503":"OFDPageGraphics2DTest::::drawString()","504":"OFDPageGraphics2DTest::::drawString()","505":"OFDPageGraphics2DTest::::drawString()","506":"OFDPageGraphics2DTest::::drawString()","507":"OFDPageGraphics2DTest::::drawString()","508":"OFDPageGraphics2DTest::::drawString()","509":"OFDPageGraphics2DTest::::drawString()","514":"OFDPageGraphics2DTest::::setPaintRadialGradientPaint()","515":"OFDPageGraphics2DTest::::setPaintRadialGradientPaint()","516":"OFDPageGraphics2DTest::::setPaintRadialGradientPaint()","517":"OFDPageGraphics2DTest::::setPaintRadialGradientPaint()","518":"OFDPageGraphics2DTest::::setPaintRadialGradientPaint()","519":"OFDPageGraphics2DTest::::setPaintRadialGradientPaint()","520":"OFDPageGraphics2DTest::::setPaintRadialGradientPaint()","521":"OFDPageGraphics2DTest::::setPaintRadialGradientPaint()","522":"OFDPageGraphics2DTest::::setPaintRadialGradientPaint()","523":"OFDPageGraphics2DTest::::setPaintRadialGradientPaint()","524":"OFDPageGraphics2DTest::::setPaintRadialGradientPaint()","525":"OFDPageGraphics2DTest::::setPaintRadialGradientPaint()","526":"OFDPageGraphics2DTest::::setPaintRadialGradientPaint()","527":"OFDPageGraphics2DTest::::setPaintRadialGradientPaint()","528":"OFDPageGraphics2DTest::::setPaintRadialGradientPaint()","529":"OFDPageGraphics2DTest::::setPaintRadialGradientPaint()","530":"OFDPageGraphics2DTest::::setPaintRadialGradientPaint()","535":"OFDPageGraphics2DTest::::clipAndCTM()","536":"OFDPageGraphics2DTest::::clipAndCTM()","537":"OFDPageGraphics2DTest::::clipAndCTM()","538":"OFDPageGraphics2DTest::::clipAndCTM()","539":"OFDPageGraphics2DTest::::clipAndCTM()","540":"OFDPageGraphics2DTest::::clipAndCTM()","541":"OFDPageGraphics2DTest::::clipAndCTM()","542":"OFDPageGraphics2DTest::::clipAndCTM()","543":"OFDPageGraphics2DTest::::clipAndCTM()","544":"OFDPageGraphics2DTest::::clipAndCTM()","545":"OFDPageGraphics2DTest::::clipAndCTM()","546":"OFDPageGraphics2DTest::::clipAndCTM()","547":"OFDPageGraphics2DTest::::clipAndCTM()","548":"OFDPageGraphics2DTest::::clipAndCTM()","549":"OFDPageGraphics2DTest::::clipAndCTM()","550":"OFDPageGraphics2DTest::::clipAndCTM()","551":"OFDPageGraphics2DTest::::clipAndCTM()","552":"OFDPageGraphics2DTest::::clipAndCTM()","553":"OFDPageGraphics2DTest::::clipAndCTM()","554":"OFDPageGraphics2DTest::::clipAndCTM()","555":"OFDPageGraphics2DTest::::clipAndCTM()","556":"OFDPageGraphics2DTest::::clipAndCTM()","561":"OFDPageGraphics2DTest::::clips()","562":"OFDPageGraphics2DTest::::clips()","563":"OFDPageGraphics2DTest::::clips()","564":"OFDPageGraphics2DTest::::clips()","565":"OFDPageGraphics2DTest::::clips()","566":"OFDPageGraphics2DTest::::clips()","567":"OFDPageGraphics2DTest::::clips()","568":"OFDPageGraphics2DTest::::clips()","569":"OFDPageGraphics2DTest::::clips()","570":"OFDPageGraphics2DTest::::clips()","571":"OFDPageGraphics2DTest::::clips()","572":"OFDPageGraphics2DTest::::clips()","573":"OFDPageGraphics2DTest::::clips()","574":"OFDPageGraphics2DTest::::clips()","575":"OFDPageGraphics2DTest::::clips()","576":"OFDPageGraphics2DTest::::clips()","577":"OFDPageGraphics2DTest::::clips()","578":"OFDPageGraphics2DTest::::clips()","584":"OFDPageGraphics2DTest::::complexCTMSetAndReset()","585":"OFDPageGraphics2DTest::::complexCTMSetAndReset()","586":"OFDPageGraphics2DTest::::complexCTMSetAndReset()","587":"OFDPageGraphics2DTest::::complexCTMSetAndReset()","588":"OFDPageGraphics2DTest::::complexCTMSetAndReset()","589":"OFDPageGraphics2DTest::::complexCTMSetAndReset()","590":"OFDPageGraphics2DTest::::complexCTMSetAndReset()","591":"OFDPageGraphics2DTest::::complexCTMSetAndReset()","592":"OFDPageGraphics2DTest::::complexCTMSetAndReset()","593":"OFDPageGraphics2DTest::::complexCTMSetAndReset()","594":"OFDPageGraphics2DTest::::complexCTMSetAndReset()","595":"OFDPageGraphics2DTest::::complexCTMSetAndReset()","596":"OFDPageGraphics2DTest::::complexCTMSetAndReset()","597":"OFDPageGraphics2DTest::::complexCTMSetAndReset()","598":"OFDPageGraphics2DTest::::complexCTMSetAndReset()","599":"OFDPageGraphics2DTest::::complexCTMSetAndReset()","600":"OFDPageGraphics2DTest::::complexCTMSetAndReset()","601":"OFDPageGraphics2DTest::::complexCTMSetAndReset()","602":"OFDPageGraphics2DTest::::complexCTMSetAndReset()","603":"OFDPageGraphics2DTest::::complexCTMSetAndReset()","605":"OFDPageGraphics2DTest::::drawImageWithCTM()","606":"OFDPageGraphics2DTest::::drawImageWithCTM()","607":"OFDPageGraphics2DTest::::drawImageWithCTM()","608":"OFDPageGraphics2DTest::::drawImageWithCTM()","609":"OFDPageGraphics2DTest::::drawImageWithCTM()","610":"OFDPageGraphics2DTest::::drawImageWithCTM()","611":"OFDPageGraphics2DTest::::drawImageWithCTM()","612":"OFDPageGraphics2DTest::::drawImageWithCTM()","613":"OFDPageGraphics2DTest::::drawImageWithCTM()","614":"OFDPageGraphics2DTest::::drawImageWithCTM()","615":"OFDPageGraphics2DTest::::drawImageWithCTM()","616":"OFDPageGraphics2DTest::::drawImageWithCTM()","617":"OFDPageGraphics2DTest::::drawImageWithCTM()","620":"OFDPageGraphics2DTest::::clipImg()","621":"OFDPageGraphics2DTest::::clipImg()","622":"OFDPageGraphics2DTest::::clipImg()","623":"OFDPageGraphics2DTest::::clipImg()","624":"OFDPageGraphics2DTest::::clipImg()","625":"OFDPageGraphics2DTest::::clipImg()","626":"OFDPageGraphics2DTest::::clipImg()","627":"OFDPageGraphics2DTest::::clipImg()","628":"OFDPageGraphics2DTest::::clipImg()","629":"OFDPageGraphics2DTest::::clipImg()","630":"OFDPageGraphics2DTest::::clipImg()","631":"OFDPageGraphics2DTest::::clipImg()","632":"OFDPageGraphics2DTest::::clipImg()","633":"OFDPageGraphics2DTest::::clipImg()","634":"OFDPageGraphics2DTest::::clipImg()","638":"OFDPageGraphics2DTest::::clip()","639":"OFDPageGraphics2DTest::::clip()","640":"OFDPageGraphics2DTest::::clip()","641":"OFDPageGraphics2DTest::::clip()","642":"OFDPageGraphics2DTest::::clip()","643":"OFDPageGraphics2DTest::::clip()","644":"OFDPageGraphics2DTest::::clip()","645":"OFDPageGraphics2DTest::::clip()","646":"OFDPageGraphics2DTest::::clip()","647":"OFDPageGraphics2DTest::::clip()","648":"OFDPageGraphics2DTest::::clip()","649":"OFDPageGraphics2DTest::::clip()","650":"OFDPageGraphics2DTest::::clip()","651":"OFDPageGraphics2DTest::::clip()","652":"OFDPageGraphics2DTest::::clip()","653":"OFDPageGraphics2DTest::::clip()","654":"OFDPageGraphics2DTest::::clip()","655":"OFDPageGraphics2DTest::::clip()","656":"OFDPageGraphics2DTest::::clip()","657":"OFDPageGraphics2DTest::::clip()","658":"OFDPageGraphics2DTest::::clip()","659":"OFDPageGraphics2DTest::::clip()","660":"OFDPageGraphics2DTest::::clip()","661":"OFDPageGraphics2DTest::::clip()","662":"OFDPageGraphics2DTest::::clip()","663":"OFDPageGraphics2DTest::::clip()","664":"OFDPageGraphics2DTest::::clip()","665":"OFDPageGraphics2DTest::::clip()","667":"OFDPageGraphics2DTest::::intersects()","668":"OFDPageGraphics2DTest::::intersects()","669":"OFDPageGraphics2DTest::::intersects()","670":"OFDPageGraphics2DTest::::intersects()","671":"OFDPageGraphics2DTest::::intersects()","672":"OFDPageGraphics2DTest::::intersects()","673":"OFDPageGraphics2DTest::::intersects()","674":"OFDPageGraphics2DTest::::intersects()","675":"OFDPageGraphics2DTest::::intersects()","676":"OFDPageGraphics2DTest::::intersects()","677":"OFDPageGraphics2DTest::::intersects()","678":"OFDPageGraphics2DTest::::intersects()","679":"OFDPageGraphics2DTest::::intersects()"},"tests":[{"test_lines":[20,36],"covered_lines":[101,103,104,106,107,108,109,110,111,114,115,118,119,120,122,125,126,128,129,548,552,556,557,562,563,564,565,566,568,574,575,577,579,635,636,925,926],"label":"OFDPageGraphics2D::::setPaint(java.awt.Paint)"},{"test_lines":[42,50],"covered_lines":[101,103,104,106,107,108,109,110,111,114,115,118,119,120,122,125,126,128,129,156,161,165,166,171,172,173,174,177,183,184,186,187,975,976],"label":"OFDPageGraphics2D::::drawRoundRect(int,int,int,int,int,int)"},{"test_lines":[55,64],"covered_lines":[101,103,104,106,107,108,109,110,111,114,115,118,119,120,122,125,126,128,129,548,552,556,557,562,563,564,565,566,568,574,575,577,579,731,734,735,990,991],"label":"OFDPageGraphics2D::::fillRoundRect(int,int,int,int,int,int)"},{"test_lines":[70,87],"covered_lines":[101,103,104,106,107,108,109,110,111,114,115,118,119,120,122,125,126,128,129,156,161,165,166,171,172,173,174,177,183,184,186,187],"label":"OFDPageGraphics2D::::draw(java.awt.Shape)"},{"test_lines":[92,106],"covered_lines":[101,103,104,106,107,108,109,110,111,114,115,118,119,120,122,125,126,128,129,156,161,165,166,171,172,173,174,177,183,184,186,187,645,646],"label":"OFDPageGraphics2D::::draw(java.awt.Shape)"},{"test_lines":[111,120],"covered_lines":[101,103,104,106,107,108,109,110,111,114,115,118,119,120,122,125,126,128,129,548,552,556,557,562,563,564,565,566,568,574,575,577,579,635,636,1052,1053],"label":"OFDPageGraphics2D::::fillArc(int,int,int,int,int,int)"},{"test_lines":[125,134],"covered_lines":[101,103,104,106,107,108,109,110,111,114,115,118,119,120,122,125,126,128,129,548,552,556,557,562,563,564,565,566,568,574,575,577,579,635,636,1052,1053],"label":"OFDPageGraphics2D::::fillArc(int,int,int,int,int,int)"},{"test_lines":[139,149],"covered_lines":[101,103,104,106,107,108,109,110,111,114,115,118,119,120,122,125,126,128,129,548,552,556,557,562,563,564,565,566,568,574,575,577,579,635,636,925,926,954,957,958,959,960,961,1052,1053,1236],"label":"OFDPageGraphics2D::::clearRect(int,int,int,int)"},{"test_lines":[154,163],"covered_lines":[101,103,104,106,107,108,109,110,111,114,115,118,119,120,122,125,126,128,129,548,552,556,557,562,563,564,565,566,568,574,575,577,579,635,636,1016,1017],"label":"OFDPageGraphics2D::::fillOval(int,int,int,int)"},{"test_lines":[168,177],"covered_lines":[101,103,104,106,107,108,109,110,111,114,115,118,119,120,122,125,126,128,129,156,161,165,166,171,172,173,174,177,183,184,186,187,635,636,1003,1004],"label":"OFDPageGraphics2D::::drawOval(int,int,int,int)"},{"test_lines":[182,193],"covered_lines":[101,103,104,106,107,108,109,110,111,114,115,118,119,120,122,125,126,128,129,156,161,165,166,171,172,173,174,177,183,184,186,187,635,636,1066,1067,1068,1069,1071,1072],"label":"OFDPageGraphics2D::::drawPolyline(int[],int[],int)"},{"test_lines":[198,211],"covered_lines":[101,103,104,106,107,108,109,110,111,114,115,118,119,120,122,125,126,128,129,156,161,165,166,171,172,173,174,177,183,184,186,187,635,636,1083,1084,1085,1086,1088,1089,1090],"label":"OFDPageGraphics2D::::drawPolygon(int[],int[],int)"},{"test_lines":[216,229],"covered_lines":[101,103,104,106,107,108,109,110,111,114,115,118,119,120,122,125,126,128,129,548,552,556,557,562,563,564,565,566,568,574,575,577,579,635,636,1101,1102,1103,1104,1106,1107,1108],"label":"OFDPageGraphics2D::::fillPolygon(int[],int[],int)"},{"test_lines":[232,245],"covered_lines":[101,103,104,106,107,108,109,110,111,114,115,118,119,120,122,125,126,128,129,319,324,326,327,332,333,334,335,338,340,341,342,347,348,351,358,359,1226,1387],"label":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)"},{"test_lines":[247,258],"covered_lines":[101,103,104,106,107,108,109,110,111,114,115,118,119,120,122,125,126,128,129,292,295,296,299,300,303,319,324,326,327,332,333,334,335,338,340,341,342,347,348,351,358,359,1226,1387],"label":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"},{"test_lines":[260,273],"covered_lines":[101,103,104,106,107,108,109,110,111,114,115,118,119,120,122,125,126,128,129,292,295,296,299,300,303,319,324,326,327,332,333,334,335,338,340,341,342,347,348,351,358,359,476,477,478,480,481,482,484,503,504,507,508,548,552,556,557,562,563,564,565,566,568,574,575,577,579,635,636,925,926,1198,1201,1202,1203,1212,1215,1216,1217,1226,1387],"label":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"},{"test_lines":[279,290],"covered_lines":[101,103,104,106,107,108,109,110,111,114,115,118,119,120,122,125,126,128,129,319,324,326,327,332,333,334,335,338,340,341,342,347,348,351,358,359,406,407,408,409,410,548,552,556,557,562,563,564,565,566,568,574,575,577,579,635,636,925,926,1226,1236,1387],"label":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.Color,java.awt.image.ImageObserver)"},{"test_lines":[292,303],"covered_lines":[101,103,104,106,107,108,109,110,111,114,115,118,119,120,122,125,126,128,129,319,324,326,327,332,333,334,335,338,340,341,342,347,348,351,358,359,376,379,380,383,384,387,406,407,408,409,410,548,552,556,557,562,563,564,565,566,568,574,575,577,579,635,636,925,926,1226,1236,1387],"label":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,java.awt.Color,java.awt.image.ImageObserver)"},{"test_lines":[308,319],"covered_lines":[101,103,104,106,107,108,109,110,111,114,115,118,119,120,122,125,126,128,129,292,295,296,299,300,303,319,324,326,327,332,333,334,335,338,340,341,342,347,348,351,358,359,430,431,432,433,434,435,1226,1387],"label":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.image.ImageObserver)"},{"test_lines":[321,332],"covered_lines":[101,103,104,106,107,108,109,110,111,114,115,118,119,120,122,125,126,128,129,292,295,296,299,300,303,319,324,326,327,332,333,334,335,338,340,341,342,347,348,351,358,359,430,431,432,433,434,435,458,459,460,461,462,548,552,556,557,562,563,564,565,566,568,574,575,577,579,635,636,925,926,1226,1236,1387],"label":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.Color,java.awt.image.ImageObserver)"},{"test_lines":[337,347],"covered_lines":[101,103,104,106,107,108,109,110,111,114,115,118,119,120,122,125,126,128,129,548,552,553,556,557,562,563,564,565,566,568,574,575,577,579,731,734,735,925,926,1118,1119,1120,1130,1131,1132],"label":"OFDPageGraphics2D::::translate(int,int)"},{"test_lines":[352,362],"covered_lines":[101,103,104,106,107,108,109,110,111,114,115,118,119,120,122,125,126,128,129,548,552,553,556,557,562,563,564,565,566,568,574,575,577,579,731,734,735,925,926,1141,1142,1143],"label":"OFDPageGraphics2D::::rotate(double)"},{"test_lines":[367,377],"covered_lines":[101,103,104,106,107,108,109,110,111,114,115,118,119,120,122,125,126,128,129,548,552,553,556,557,562,563,564,565,566,568,574,575,577,579,731,734,735,925,926,1130,1131,1132,1141,1142,1143,1161,1162,1163,1164,1165],"label":"OFDPageGraphics2D::::rotate(double)"},{"test_lines":[379,390],"covered_lines":[101,103,104,106,107,108,109,110,111,114,115,118,119,120,122,125,126,128,129,548,552,553,556,557,562,563,564,565,566,568,574,575,577,579,731,734,735,925,926,1118,1119,1120,1130,1131,1132,1141,1142,1143],"label":"OFDPageGraphics2D::::rotate(double)"},{"test_lines":[395,407],"covered_lines":[101,103,104,106,107,108,109,110,111,114,115,118,119,120,122,125,126,128,129,156,161,162,165,166,171,172,173,174,177,183,184,186,187,731,734,735,938,941,942,1175,1176,1177],"label":"OFDPageGraphics2D::::scale(double,double)"},{"test_lines":[413,423],"covered_lines":[101,103,104,106,107,108,109,110,111,114,115,118,119,120,122,125,126,128,129,548,552,553,556,557,562,563,564,565,566,568,574,575,577,579,731,734,735,925,926,1187,1188,1189],"label":"OFDPageGraphics2D::::shear(double,double)"},{"test_lines":[428,450],"covered_lines":[101,103,104,106,107,108,109,110,111,114,115,118,119,120,122,125,126,128,129,548,552,553,556,557,562,563,564,565,566,568,574,575,577,579,731,734,735,925,926,1118,1119,1120,1130,1131,1132,1141,1142,1143,1187,1188,1189,1226],"label":"OFDPageGraphics2D::::getTransform()"},{"test_lines":[455,476],"covered_lines":[101,103,104,106,107,108,109,110,111,114,115,118,119,120,122,125,126,128,129,1118,1119,1120,1130,1131,1132,1198,1201,1202,1203,1226],"label":"OFDPageGraphics2D::::transform(java.awt.geom.AffineTransform)"},{"test_lines":[481,494],"covered_lines":[101,103,104,106,107,108,109,110,111,114,115,118,119,120,122,125,126,128,129,548,552,553,556,557,562,563,564,565,566,568,569,570,574,575,577,579,635,636,875,881,882,884,885,1052,1053,1118,1119,1120,1130,1131,1132,1310,1314,1315,1316,1317,1318,1321,1324,1325,1326,1327,1328,1334,1335,1336,1337,1338,1387],"label":"OFDPageGraphics2D::::setClip(java.awt.Shape)"},{"test_lines":[499,509],"covered_lines":[101,103,104,106,107,108,109,110,111,114,115,118,119,120,122,125,126,128,129,205,206,207,275,276,277,548,552,556,557,562,563,564,565,566,568,574,575,577,579,635,636,762,1288],"label":"OFDPageGraphics2D::::drawString(java.lang.String,int,int)"},{"test_lines":[514,530],"covered_lines":[101,103,104,106,107,108,109,110,111,114,115,118,119,120,122,125,126,128,129,548,552,556,557,562,563,564,565,566,568,574,575,577,579,635,636,925,926],"label":"OFDPageGraphics2D::::setPaint(java.awt.Paint)"},{"test_lines":[535,556],"covered_lines":[101,103,104,106,107,108,109,110,111,114,115,118,119,120,122,125,126,128,129,548,552,553,556,557,562,563,564,565,566,568,569,570,574,575,577,579,731,734,735,811,812,848,854,855,858,859,863,925,926,1118,1119,1120,1130,1131,1132,1141,1142,1143,1310,1314,1315,1316,1317,1318,1321,1324,1325,1326,1327,1328,1334,1335,1336,1337,1338,1343,1387],"label":"OFDPageGraphics2D::::clipRect(int,int,int,int)"},{"test_lines":[561,578],"covered_lines":[101,103,104,106,107,108,109,110,111,114,115,118,119,120,122,125,126,128,129,548,552,553,556,557,562,563,564,565,566,568,569,570,574,575,577,579,731,734,735,811,812,848,854,855,858,859,863,925,926,1118,1119,1120,1130,1131,1132,1310,1314,1315,1316,1317,1318,1321,1324,1325,1326,1327,1328,1334,1335,1336,1337,1338,1387],"label":"OFDPageGraphics2D::::clipRect(int,int,int,int)"},{"test_lines":[584,603],"covered_lines":[101,103,104,106,107,108,109,110,111,114,115,118,119,120,122,125,126,128,129,548,552,553,556,557,562,563,564,565,566,568,574,575,577,579,731,734,735,925,926,1118,1119,1120,1130,1131,1132,1141,1142,1143,1212,1215,1216,1217],"label":"OFDPageGraphics2D::::setTransform(java.awt.geom.AffineTransform)"},{"test_lines":[605,617],"covered_lines":[101,103,104,106,107,108,109,110,111,114,115,118,119,120,122,125,126,128,129,292,295,296,299,300,303,319,324,326,327,332,333,334,335,338,340,341,342,347,348,351,358,359,1118,1119,1120,1130,1131,1132,1141,1142,1143,1226,1387],"label":"OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"},{"test_lines":[620,634],"covered_lines":[101,103,104,106,107,108,109,110,111,114,115,118,119,120,122,125,126,128,129,292,295,296,299,300,303,319,324,326,327,332,333,334,335,338,340,341,342,347,348,351,354,355,356,358,359,826,827,875,881,884,885,1141,1142,1143,1226,1310,1314,1315,1316,1317,1318,1321,1324,1325,1326,1327,1328,1334,1335,1336,1337,1338,1387],"label":"OFDPageGraphics2D::::setClip(int,int,int,int)"},{"test_lines":[638,665],"covered_lines":[101,103,104,106,107,108,109,110,111,114,115,118,119,120,122,125,126,128,129,548,552,556,557,562,563,564,565,566,568,569,570,574,575,577,579,731,734,735,826,827,875,876,877,881,884,885,925,926,1310,1314,1315,1316,1317,1318,1321,1324,1325,1326,1327,1328,1334,1335,1336,1337,1338,1343,1387]}]}}