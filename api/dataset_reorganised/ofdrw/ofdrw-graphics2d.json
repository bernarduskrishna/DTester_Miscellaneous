{
  "/bernard/dataset_construction/prep/repos/ofdrw/ofdrw-graphics2d/src/main/java/org/ofdrw/graphics2d/OFDGraphicsDocument.java": {
    "class_content": [
      "package org.ofdrw.graphics2d;\n",
      "\n",
      "import org.ofdrw.core.attachment.Attachments;\n",
      "import org.ofdrw.core.attachment.CT_Attachment;\n",
      "import org.ofdrw.core.basicStructure.doc.CT_CommonData;\n",
      "import org.ofdrw.core.basicStructure.doc.CT_PageArea;\n",
      "import org.ofdrw.core.basicStructure.doc.Document;\n",
      "import org.ofdrw.core.basicStructure.ofd.DocBody;\n",
      "import org.ofdrw.core.basicStructure.ofd.OFD;\n",
      "import org.ofdrw.core.basicStructure.ofd.docInfo.CT_DocInfo;\n",
      "import org.ofdrw.core.basicStructure.pageTree.Page;\n",
      "import org.ofdrw.core.basicStructure.pageTree.Pages;\n",
      "import org.ofdrw.core.basicStructure.res.CT_MultiMedia;\n",
      "import org.ofdrw.core.basicStructure.res.MediaType;\n",
      "import org.ofdrw.core.basicType.ST_ID;\n",
      "import org.ofdrw.core.basicType.ST_Loc;\n",
      "import org.ofdrw.core.pageDescription.drawParam.CT_DrawParam;\n",
      "import org.ofdrw.gv.GlobalVar;\n",
      "import org.ofdrw.pkg.container.*;\n",
      "\n",
      "import javax.imageio.ImageIO;\n",
      "import java.awt.*;\n",
      "import java.awt.image.BufferedImage;\n",
      "import java.io.*;\n",
      "import java.nio.file.Files;\n",
      "import java.nio.file.Path;\n",
      "import java.nio.file.StandardCopyOption;\n",
      "import java.time.LocalDate;\n",
      "import java.time.LocalDateTime;\n",
      "import java.util.UUID;\n",
      "import java.util.concurrent.atomic.AtomicInteger;\n",
      "\n",
      "/**\n",
      " * \u56fe\u5f62OFD\u6587\u6863\u5bf9\u8c61\n",
      " *\n",
      " * @author \u6743\u89c2\u5b87\n",
      " * @since 2023-1-18 09:45:18\n",
      " */\n",
      "public class OFDGraphicsDocument implements Closeable {\n",
      "    /**\n",
      "     * \u6253\u5305\u540eOFD\u6587\u6863\u5b58\u653e\u8def\u5f84\n",
      "     */\n",
      "    private Path outPath;\n",
      "\n",
      "    /**\n",
      "     * \u6253\u5305\u540eOFD\u6587\u6863\u6d41\n",
      "     */\n",
      "    private OutputStream outputStream;\n",
      "\n",
      "    /**\n",
      "     * \u6587\u6863\u662f\u5426\u5df2\u7ecf\u5173\u95ed\n",
      "     * true \u8868\u793a\u5df2\u7ecf\u5173\u95ed\uff0cfalse \u8868\u793a\u672a\u5173\u95ed\n",
      "     */\n",
      "    private boolean closed = false;\n",
      "\n",
      "    /**\n",
      "     * OFD \u6253\u5305\n",
      "     */\n",
      "    public final OFDDir ofdDir;\n",
      "\n",
      "    /**\n",
      "     * \u5f53\u524d\u6587\u6863\u4e2d\u6240\u6709\u5bf9\u8c61\u4f7f\u7528\u6807\u8bc6\u7684\u6700\u5927\u503c\u3002\n",
      "     * \u521d\u59cb\u503c\u4e3a 0\u3002MaxUnitID\u4e3b\u8981\u7528\u4e8e\u6587\u6863\u7f16\u8f91\uff0c\n",
      "     * \u5728\u5411\u6587\u6863\u589e\u52a0\u4e00\u4e2a\u65b0\u5bf9\u8c61\u65f6\uff0c\u9700\u8981\u5206\u914d\u4e00\u4e2a\n",
      "     * \u65b0\u7684\u6807\u8bc6\u7b26\uff0c\u65b0\u6807\u8bc6\u7b26\u53d6\u503c\u5b9c\u4e3a MaxUnitID + 1\uff0c\n",
      "     * \u540c\u65f6\u9700\u8981\u4fee\u6539\u6b64 MaxUnitID\u503c\u3002\n",
      "     */\n",
      "    public final AtomicInteger MaxUnitID;\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u6587\u6863\u5c5e\u6027\u4fe1\u606f\uff0c\u8be5\u5bf9\u8c61\u4f1a\u5728\u521d\u59cb\u5316\u662f\u88ab\u521b\u5efa\u5e76\u4e14\u6dfb\u52a0\u5230\u6587\u6863\u4e2d\n",
      "     * \u6b64\u5904\u53ea\u662f\u4fdd\u7559\u5f15\u7528\uff0c\u4e3a\u4e86\u65b9\u4fbf\u64cd\u4f5c\u3002\n",
      "     */\n",
      "    public CT_CommonData cdata;\n",
      "\n",
      "\n",
      "    /**\n",
      "     * OFD\u6587\u6863\u5bf9\u8c61\n",
      "     */\n",
      "    public final Document document;\n",
      "\n",
      "    /**\n",
      "     * \u9644\u4ef6\u5217\u8868\n",
      "     * <p>\n",
      "     * null\u8868\u793a\u6ca1\u6709\u9644\u4ef6\n",
      "     */\n",
      "    public Attachments attachments;\n",
      "\n",
      "    /**\n",
      "     * \u6b63\u5728\u64cd\u4f5c\u7684\u6587\u6863\u76ee\u5f55\n",
      "     */\n",
      "    public final DocDir docDir;\n",
      "\n",
      "    /**\n",
      "     * \u8d44\u6e90\u7ba1\u7406\u5668\n",
      "     */\n",
      "    public final ResManager resMgr;\n",
      "\n",
      "    /**\n",
      "     * \u5728\u6307\u5b9a\u8def\u5f84\u4f4d\u7f6e\u4e0a\u521b\u5efa\u4e00\u4e2aOFD\u6587\u4ef6\n",
      "     *\n",
      "     * @param outPath OFD\u8f93\u51fa\u8def\u5f84\n",
      "     */\n",
      "    public OFDGraphicsDocument(Path outPath) {\n",
      "        this();\n",
      "        if (outPath == null) {\n",
      "            throw new IllegalArgumentException(\"OFD\u6587\u4ef6\u5b58\u50a8\u8def\u5f84(outPath)\u4e3a\u7a7a\");\n",
      "        }\n",
      "        if (Files.isDirectory(outPath)) {\n",
      "            throw new IllegalArgumentException(\"OFD\u6587\u4ef6\u5b58\u50a8\u8def\u5f84(outPath)\u4e0d\u80fd\u662f\u76ee\u5f55\");\n",
      "        }\n",
      "        if (!Files.exists(outPath.toAbsolutePath().getParent())) {\n",
      "            throw new IllegalArgumentException(\"OFD\u6587\u4ef6\u5b58\u50a8\u8def\u5f84(outPath)\u4e0a\u7ea7\u76ee\u5f55 [\" + outPath.getParent().toAbsolutePath() + \"] \u4e0d\u5b58\u5728\");\n",
      "        }\n",
      "        this.outPath = outPath;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u5728\u6307\u5b9a\u8def\u5f84\u4f4d\u7f6e\u4e0a\u521b\u5efa\u4e00\u4e2aOFD\u6587\u4ef6\u6d41\n",
      "     *\n",
      "     * @param outputStream OFD\u8f93\u51fa\u6d41\uff0c\u5e94\u7531\u8c03\u7528\u8005\u8d1f\u8d23\u5173\u95ed\u3002\n",
      "     */\n",
      "    public OFDGraphicsDocument(OutputStream outputStream) {\n",
      "        this();\n",
      "        if (outputStream == null) {\n",
      "            throw new IllegalArgumentException(\"OFD\u6587\u4ef6\u6d41(outputStream)\u4e3a\u7a7a\");\n",
      "        }\n",
      "        this.outputStream = outputStream;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u6587\u6863\u521d\u59cb\u5316\u6784\u9020\u5668\n",
      "     */\n",
      "    private OFDGraphicsDocument() {\n",
      "\n",
      "\n",
      "        // \u521d\u59cb\u5316\u6587\u6863\u5bf9\u8c61\n",
      "        CT_DocInfo docInfo = new CT_DocInfo()\n",
      "                .setDocID(UUID.randomUUID())\n",
      "                .setCreationDate(LocalDate.now())\n",
      "                .setCreator(\"OFD R&W\")\n",
      "                .setCreatorVersion(GlobalVar.Version);\n",
      "        DocBody docBody = new DocBody()\n",
      "                .setDocInfo(docInfo)\n",
      "                .setDocRoot(new ST_Loc(\"Doc_0/Document.xml\"));\n",
      "        OFD ofd = new OFD().addDocBody(docBody);\n",
      "\n",
      "\n",
      "        // \u521b\u5efa\u4e00\u4e2a\u4f4e\u5c42\u6b21\u7684\u6587\u6863\u5bf9\u8c61\n",
      "        document = new Document();\n",
      "        cdata = new CT_CommonData();\n",
      "        // \u9ed8\u8ba4\u9875\u9762\u5927\u5c0f\u4e3aA4\n",
      "        CT_PageArea defaultPageSize = new CT_PageArea()\n",
      "                .setPhysicalBox(0, 0, 210d, 297d)\n",
      "                .setApplicationBox(0, 0, 210d, 297d);\n",
      "        // \u9ed8\u8ba4\u4f7f\u7528RGB\u989c\u8272\u7a7a\u95f4\u6240\u4ee5\u6b64\u5904\u4e0d\u8bbe\u7f6e\u989c\u8272\u7a7a\u95f4\n",
      "        // \u8bbe\u7f6e\u9875\u9762\u5c5e\u6027\n",
      "        cdata.setPageArea(defaultPageSize);\n",
      "        document.setCommonData(cdata)\n",
      "                // \u7a7a\u7684\u9875\u9762\u5f15\u7528\u96c6\u5408\uff0c\u8be5\u96c6\u5408\u5c06\u4f1a\u5728\u89e3\u6790\u865a\u62df\u9875\u9762\u65f6\u5f97\u5230\u586b\u5145\n",
      "                .setPages(new Pages());\n",
      "\n",
      "        ofdDir = OFDDir.newOFD()\n",
      "                .setOfd(ofd);\n",
      "        // \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u6587\u6863\n",
      "        DocDir docDir = ofdDir.newDoc();\n",
      "        this.docDir = docDir;\n",
      "        docDir.setDocument(document);\n",
      "\n",
      "        MaxUnitID = new AtomicInteger(0);\n",
      "        this.resMgr = new ResManager(this.docDir, MaxUnitID);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u521b\u5efa\u9875\u9762\uff0c\u5355\u4f4d\u6beb\u7c73\n",
      "     *\n",
      "     * @param width  \u9875\u9762\u5bbd\u5ea6\uff0c\u5355\u4f4d\uff1a\u6beb\u7c73\n",
      "     * @param height \u9875\u9762\u9ad8\u5ea6\uff0c\u5355\u4f4d\uff1a\u6beb\u7c73\n",
      "     * @return 2D\u56fe\u5f62\u7ed8\u5236\u5bf9\u8c61\n",
      "     */\n",
      "    public OFDPageGraphics2D newPage(double width, double height) {\n",
      "        CT_PageArea size = new CT_PageArea()\n",
      "                .setPhysicalBox(0, 0, width, height)\n",
      "                .setApplicationBox(0, 0, width, height);\n",
      "        return newPage(size);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u521b\u5efa\u65b0\u9875\u9762\uff0c\u8fd4\u56de\u8be5\u9875\u97622D\u56fe\u5f62\u5bf9\u8c61\n",
      "     *\n",
      "     * @param pageSize \u9875\u9762\u5927\u5c0f\u914d\u7f6e\n",
      "     * @return 2D\u56fe\u5f62\u7ed8\u5236\u5bf9\u8c61\n",
      "     */\n",
      "    public OFDPageGraphics2D newPage(CT_PageArea pageSize) {\n",
      "        final Pages pages = document.getPages();\n",
      "        // \u5982\u679c\u5b58\u5728Pages\u90a3\u4e48\u83b7\u53d6\uff0c\u4e0d\u5b58\u5728\u90a3\u4e48\u521b\u5efa\n",
      "        final PagesDir pagesDir = docDir.obtainPages();\n",
      "\n",
      "        // \u521b\u5efa\u9875\u9762\u5bb9\u5668\n",
      "        PageDir pageDir = pagesDir.newPageDir();\n",
      "        String pageLoc = String.format(\"Pages/Page_%d/Content.xml\", pageDir.getIndex());\n",
      "        ST_ID pageID = new ST_ID(MaxUnitID.incrementAndGet());\n",
      "        final Page page = new Page(pageID, ST_Loc.getInstance(pageLoc));\n",
      "        pages.addPage(page);\n",
      "\n",
      "        // \u521b\u5efa\u9875\u9762\u5bf9\u8c61\n",
      "        org.ofdrw.core.basicStructure.pageObj.Page pageObj = new org.ofdrw.core.basicStructure.pageObj.Page();\n",
      "        if (pageSize != null) {\n",
      "            pageObj.setArea(pageSize);\n",
      "        } else {\n",
      "            pageSize = this.cdata.getPageArea();\n",
      "        }\n",
      "        pageDir.setContent(pageObj);\n",
      "\n",
      "        return new OFDPageGraphics2D(this, pageID, pageDir, pageObj, pageSize.getBox());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u6dfb\u52a0\u56fe\u7247\u8d44\u6e90\n",
      "     *\n",
      "     * @param img \u56fe\u7247\u6e32\u67d3\u5bf9\u8c61\n",
      "     * @return \u8d44\u6e90ID\n",
      "     * @throws RuntimeException \u56fe\u7247\u8f6c\u5199IO\u5f02\u5e38\n",
      "     */\n",
      "    public ST_ID addResImg(Image img) {\n",
      "        if (img == null) {\n",
      "            return null;\n",
      "        }\n",
      "        final ResDir resDir = docDir.obtainRes();\n",
      "        final Path resDirPath = resDir.getContainerPath();\n",
      "        final File imgFile;\n",
      "        try {\n",
      "            imgFile = File.createTempFile(\"res\", \".png\", resDirPath.toFile());\n",
      "            BufferedImage bi;\n",
      "            if (img instanceof BufferedImage) {\n",
      "                bi = (BufferedImage) img;\n",
      "            } else {\n",
      "                bi = new BufferedImage(img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB);\n",
      "                Graphics g2 = bi.getGraphics();\n",
      "                g2.drawImage(img, 0, 0, null);\n",
      "                g2.dispose();\n",
      "            }\n",
      "            ImageIO.write(bi, \"png\", imgFile);\n",
      "        } catch (IOException e) {\n",
      "            throw new RuntimeException(\"graphics2d \u56fe\u7247\u5199\u5165IO\u5f02\u5e38\", e);\n",
      "        }\n",
      "\n",
      "        // \u5c06\u6587\u4ef6\u52a0\u5165\u8d44\u6e90\u5bb9\u5668\u4e2d\n",
      "        // \u521b\u5efa\u56fe\u7247\u5bf9\u8c61\uff0c\u4e3a\u4e86\u4fdd\u6301\u900f\u660e\u56fe\u7247\u7684\u517c\u5bb9\u6027\u91c7\u7528PNG\u683c\u5f0f\n",
      "        CT_MultiMedia multiMedia = new CT_MultiMedia()\n",
      "                .setType(MediaType.Image)\n",
      "                .setFormat(\"PNG\")\n",
      "                .setMediaFile(resDir.getAbsLoc().cat(imgFile.getName()));\n",
      "\n",
      "        return resMgr.addRawWithCache(multiMedia);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u6dfb\u52a0\u7ed8\u5236\u53c2\u6570\u81f3\u8d44\u6e90\u6587\u4ef6\u4e2d\n",
      "     *\n",
      "     * @param dp \u7ed8\u5236\u53c2\u6570\n",
      "     * @return \u8d44\u6e90\u5bf9\u8c61ID\n",
      "     */\n",
      "    public ST_ID addDrawParam(CT_DrawParam dp) {\n",
      "        return resMgr.addRawWithCache(dp);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u751f\u6210\u65b0\u7684\u6587\u6863\u5185\u5bf9\u8c61ID\n",
      "     *\n",
      "     * @return \u6587\u6863\u5185\u5bf9\u8c61ID\n",
      "     */\n",
      "    public ST_ID newID() {\n",
      "        return new ST_ID(MaxUnitID.incrementAndGet());\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u5411\u6587\u6863\u4e2d\u6dfb\u52a0\u9644\u4ef6\u6587\u4ef6\n",
      "     * <p>\n",
      "     * \u5982\u679c\u540d\u79f0\u76f8\u540c\u539f\u6709\u9644\u4ef6\u5c06\u4f1a\u88ab\u66ff\u6362\n",
      "     *\n",
      "     * @param file \u9644\u4ef6\u6587\u4ef6\u8def\u5f84\n",
      "     * @return \u52a0\u5165\u540e\u7684\u6587\u4ef6\u9644\u4ef6\u5bf9\u8c61ID\n",
      "     * @throws IOException \u6587\u4ef6\u64cd\u4f5c\u5f02\u5e38\n",
      "     */\n",
      "    public ST_ID addAttachment(Path file) throws IOException {\n",
      "        if (file == null || Files.notExists(file)) {\n",
      "            return null;\n",
      "        }\n",
      "\n",
      "        // \u521b\u5efa\u9644\u4ef6\u5217\u8868\u6587\u4ef6\n",
      "        if (attachments == null) {\n",
      "            attachments = new Attachments();\n",
      "            docDir.putObj(DocDir.Attachments, attachments);\n",
      "            document.setAttachments(docDir.getAbsLoc().cat(DocDir.Attachments));\n",
      "        }\n",
      "\n",
      "        String fileName = file.getFileName().toString();\n",
      "\n",
      "        // \u8ba1\u7b97\u9644\u4ef6\u6240\u5360\u7528\u7684\u7a7a\u95f4\uff0c\u5355\u4f4dKB\u3002\n",
      "        double size = (double) Files.size(file) / 1024d;\n",
      "\n",
      "        CT_Attachment ctAttachment = new CT_Attachment()\n",
      "                .setAttachmentName(fileName)\n",
      "                .setCreationDate(LocalDateTime.now())\n",
      "                .setSize(size);\n",
      "        ST_ID id = new ST_ID(MaxUnitID.incrementAndGet());\n",
      "        ctAttachment.setObjID(id);\n",
      "\n",
      "        // \u6dfb\u52a0\u9644\u4ef6\u5230\u8d44\u6e90\n",
      "        file = docDir.addResourceWithPath(file);\n",
      "        // \u6784\u9020\u9644\u4ef6\u6587\u4ef6\u5b58\u653e\u8def\u5f84\n",
      "        ST_Loc loc = docDir.getRes().getAbsLoc().cat(file.getFileName().toString());\n",
      "        ctAttachment.setFileLoc(loc);\n",
      "        // \u52a0\u5165\u9644\u4ef6\u8bb0\u5f55\u5230\u5217\u8868\u6587\u4ef6\n",
      "        attachments.addAttachment(ctAttachment);\n",
      "        return id;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u5411\u6587\u6863\u4e2d\u6dfb\u52a0\u9644\u4ef6\u6587\u4ef6\n",
      "     * <p>\n",
      "     * \u5982\u679c\u5df2\u7ecf\u5b58\u5728\u540c\u540d\u6587\u4ef6\u5219\u66ff\u6362\n",
      "     *\n",
      "     * @param attObj \u6587\u4ef6\u540d\n",
      "     * @param input  \u9644\u4ef6\u6d41\n",
      "     * @return \u52a0\u5165\u540e\u7684\u6587\u4ef6\u9644\u4ef6\u5bf9\u8c61ID\n",
      "     * @throws IOException \u6587\u4ef6\u64cd\u4f5c\u5f02\u5e38\n",
      "     */\n",
      "    public ST_ID addAttachment(CT_Attachment attObj, InputStream input) throws IOException {\n",
      "        if (attObj == null || input == null) {\n",
      "            return null;\n",
      "        }\n",
      "\n",
      "        String filename = attObj.getAttachmentName();\n",
      "        if (filename == null || filename.length() == 0) {\n",
      "            return null;\n",
      "        }\n",
      "\n",
      "        // \u521b\u5efa\u9644\u4ef6\u5217\u8868\u6587\u4ef6\n",
      "        if (attachments == null) {\n",
      "            attachments = new Attachments();\n",
      "            docDir.putObj(DocDir.Attachments, attachments);\n",
      "            document.setAttachments(ST_Loc.getInstance(DocDir.Attachments));\n",
      "        }\n",
      "\n",
      "        // \u6dfb\u52a0\u9644\u4ef6\u5230\u8d44\u6e90\n",
      "        Path target = docDir.obtainRes().getContainerPath().resolve(filename);\n",
      "        Files.copy(input, target, StandardCopyOption.REPLACE_EXISTING);\n",
      "        // \u8ba1\u7b97\u9644\u4ef6\u6240\u5360\u7528\u7684\u7a7a\u95f4\uff0c\u5355\u4f4dKB\u3002\n",
      "        double size = (double) Files.size(target) / 1024d;\n",
      "\n",
      "        // \u6784\u9020\u9644\u4ef6\u6587\u4ef6\u5b58\u653e\u8def\u5f84\n",
      "        ST_Loc loc = docDir.obtainRes().getAbsLoc().cat(filename);\n",
      "        attObj.setSize(size).setFileLoc(loc);\n",
      "        ST_ID id = new ST_ID(MaxUnitID.incrementAndGet());\n",
      "        attObj.setObjID(id);\n",
      "\n",
      "        // \u52a0\u5165\u9644\u4ef6\u8bb0\u5f55\u5230\u5217\u8868\u6587\u4ef6\n",
      "        attachments.addAttachment(attObj);\n",
      "        return id;\n",
      "    }\n",
      "\n",
      "\n",
      "    @Override\n",
      "    public void close() throws IOException {\n",
      "        // \u6587\u6863\u5df2\u7ecf close \u6216\u8005 MaxUnitID == 0 \u8bf4\u660e\u6ca1\u6709\u6dfb\u52a0\u4efb\u4f55\u5bf9\u8c61\uff0c\u4e0d\u9700\u8981\u751f\u6210OFD\u6587\u6863\n",
      "        if (this.closed || MaxUnitID.get() == 0) {\n",
      "            return;\n",
      "        } else {\n",
      "            closed = true;\n",
      "        }\n",
      "\n",
      "        try {\n",
      "            // \u8bbe\u7f6e\u6700\u5927\u5bf9\u8c61ID\n",
      "            cdata.setMaxUnitID(MaxUnitID.get());\n",
      "            // final. \u6267\u884c\u6253\u5305\u7a0b\u5e8f\n",
      "            if (outPath != null) {\n",
      "                ofdDir.jar(outPath.toAbsolutePath());\n",
      "            } else if (outputStream != null) {\n",
      "                ofdDir.jar(outputStream);\n",
      "            } else {\n",
      "                throw new IllegalArgumentException(\"OFD\u6587\u6863\u8f93\u51fa\u5730\u5740\u9519\u8bef\u6216\u6ca1\u6709\u8bbe\u7f6e\u8f93\u51fa\u6d41\");\n",
      "            }\n",
      "        } finally {\n",
      "            if (ofdDir != null) {\n",
      "                // \u6e05\u9664\u5728\u751f\u6210OFD\u8fc7\u7a0b\u4e2d\u7684\u5de5\u4f5c\u533a\u4ea7\u751f\u7684\u6587\u4ef6\n",
      "                ofdDir.clean();\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package org.ofdrw.graphics2d;\n",
      "\n",
      "import org.junit.jupiter.api.Test;\n",
      "\n",
      "import java.nio.file.Path;\n",
      "import java.nio.file.Paths;\n",
      "\n",
      "class OFDGraphicsDocumentTest {\n",
      "\n",
      "    @Test\n",
      "    void newPage() throws Exception {\n",
      "        final Path dst = Paths.get(\"target/2d.ofd\");\n",
      "        try (OFDGraphicsDocument doc = new OFDGraphicsDocument(dst)) {\n",
      "            OFDPageGraphics2D g = doc.newPage(null);\n",
      "\n",
      "        }\n",
      "        System.out.println(\">> \"+ dst.toAbsolutePath());\n",
      "    }\n",
      "}"
    ],
    "method_lines_dic": {
      "OFDGraphicsDocument::::newPage(double,double)": [
        182,
        187
      ],
      "OFDGraphicsDocument::::addResImg(java.awt.Image)": [
        226,
        257
      ],
      "OFDGraphicsDocument::::newID()": [
        274,
        276
      ],
      "OFDGraphicsDocument::::addAttachment(java.nio.file.Path)": [
        288,
        320
      ],
      "OFDGraphicsDocument::::close()": [
        367,
        393
      ]
    },
    "test_method_lines_dic": {
      "OFDGraphicsDocumentTest::::newPage()": [
        10,
        18
      ]
    },
    "reverse_method_lines_dic": {
      "182": "OFDGraphicsDocument::::newPage(double,double)",
      "183": "OFDGraphicsDocument::::newPage(double,double)",
      "184": "OFDGraphicsDocument::::newPage(double,double)",
      "185": "OFDGraphicsDocument::::newPage(double,double)",
      "186": "OFDGraphicsDocument::::newPage(double,double)",
      "187": "OFDGraphicsDocument::::newPage(double,double)",
      "226": "OFDGraphicsDocument::::addResImg(java.awt.Image)",
      "227": "OFDGraphicsDocument::::addResImg(java.awt.Image)",
      "228": "OFDGraphicsDocument::::addResImg(java.awt.Image)",
      "229": "OFDGraphicsDocument::::addResImg(java.awt.Image)",
      "230": "OFDGraphicsDocument::::addResImg(java.awt.Image)",
      "231": "OFDGraphicsDocument::::addResImg(java.awt.Image)",
      "232": "OFDGraphicsDocument::::addResImg(java.awt.Image)",
      "233": "OFDGraphicsDocument::::addResImg(java.awt.Image)",
      "234": "OFDGraphicsDocument::::addResImg(java.awt.Image)",
      "235": "OFDGraphicsDocument::::addResImg(java.awt.Image)",
      "236": "OFDGraphicsDocument::::addResImg(java.awt.Image)",
      "237": "OFDGraphicsDocument::::addResImg(java.awt.Image)",
      "238": "OFDGraphicsDocument::::addResImg(java.awt.Image)",
      "239": "OFDGraphicsDocument::::addResImg(java.awt.Image)",
      "240": "OFDGraphicsDocument::::addResImg(java.awt.Image)",
      "241": "OFDGraphicsDocument::::addResImg(java.awt.Image)",
      "242": "OFDGraphicsDocument::::addResImg(java.awt.Image)",
      "243": "OFDGraphicsDocument::::addResImg(java.awt.Image)",
      "244": "OFDGraphicsDocument::::addResImg(java.awt.Image)",
      "245": "OFDGraphicsDocument::::addResImg(java.awt.Image)",
      "246": "OFDGraphicsDocument::::addResImg(java.awt.Image)",
      "247": "OFDGraphicsDocument::::addResImg(java.awt.Image)",
      "248": "OFDGraphicsDocument::::addResImg(java.awt.Image)",
      "249": "OFDGraphicsDocument::::addResImg(java.awt.Image)",
      "250": "OFDGraphicsDocument::::addResImg(java.awt.Image)",
      "251": "OFDGraphicsDocument::::addResImg(java.awt.Image)",
      "252": "OFDGraphicsDocument::::addResImg(java.awt.Image)",
      "253": "OFDGraphicsDocument::::addResImg(java.awt.Image)",
      "254": "OFDGraphicsDocument::::addResImg(java.awt.Image)",
      "255": "OFDGraphicsDocument::::addResImg(java.awt.Image)",
      "256": "OFDGraphicsDocument::::addResImg(java.awt.Image)",
      "257": "OFDGraphicsDocument::::addResImg(java.awt.Image)",
      "274": "OFDGraphicsDocument::::newID()",
      "275": "OFDGraphicsDocument::::newID()",
      "276": "OFDGraphicsDocument::::newID()",
      "288": "OFDGraphicsDocument::::addAttachment(java.nio.file.Path)",
      "289": "OFDGraphicsDocument::::addAttachment(java.nio.file.Path)",
      "290": "OFDGraphicsDocument::::addAttachment(java.nio.file.Path)",
      "291": "OFDGraphicsDocument::::addAttachment(java.nio.file.Path)",
      "292": "OFDGraphicsDocument::::addAttachment(java.nio.file.Path)",
      "293": "OFDGraphicsDocument::::addAttachment(java.nio.file.Path)",
      "294": "OFDGraphicsDocument::::addAttachment(java.nio.file.Path)",
      "295": "OFDGraphicsDocument::::addAttachment(java.nio.file.Path)",
      "296": "OFDGraphicsDocument::::addAttachment(java.nio.file.Path)",
      "297": "OFDGraphicsDocument::::addAttachment(java.nio.file.Path)",
      "298": "OFDGraphicsDocument::::addAttachment(java.nio.file.Path)",
      "299": "OFDGraphicsDocument::::addAttachment(java.nio.file.Path)",
      "300": "OFDGraphicsDocument::::addAttachment(java.nio.file.Path)",
      "301": "OFDGraphicsDocument::::addAttachment(java.nio.file.Path)",
      "302": "OFDGraphicsDocument::::addAttachment(java.nio.file.Path)",
      "303": "OFDGraphicsDocument::::addAttachment(java.nio.file.Path)",
      "304": "OFDGraphicsDocument::::addAttachment(java.nio.file.Path)",
      "305": "OFDGraphicsDocument::::addAttachment(java.nio.file.Path)",
      "306": "OFDGraphicsDocument::::addAttachment(java.nio.file.Path)",
      "307": "OFDGraphicsDocument::::addAttachment(java.nio.file.Path)",
      "308": "OFDGraphicsDocument::::addAttachment(java.nio.file.Path)",
      "309": "OFDGraphicsDocument::::addAttachment(java.nio.file.Path)",
      "310": "OFDGraphicsDocument::::addAttachment(java.nio.file.Path)",
      "311": "OFDGraphicsDocument::::addAttachment(java.nio.file.Path)",
      "312": "OFDGraphicsDocument::::addAttachment(java.nio.file.Path)",
      "313": "OFDGraphicsDocument::::addAttachment(java.nio.file.Path)",
      "314": "OFDGraphicsDocument::::addAttachment(java.nio.file.Path)",
      "315": "OFDGraphicsDocument::::addAttachment(java.nio.file.Path)",
      "316": "OFDGraphicsDocument::::addAttachment(java.nio.file.Path)",
      "317": "OFDGraphicsDocument::::addAttachment(java.nio.file.Path)",
      "318": "OFDGraphicsDocument::::addAttachment(java.nio.file.Path)",
      "319": "OFDGraphicsDocument::::addAttachment(java.nio.file.Path)",
      "320": "OFDGraphicsDocument::::addAttachment(java.nio.file.Path)",
      "367": "OFDGraphicsDocument::::close()",
      "368": "OFDGraphicsDocument::::close()",
      "369": "OFDGraphicsDocument::::close()",
      "370": "OFDGraphicsDocument::::close()",
      "371": "OFDGraphicsDocument::::close()",
      "372": "OFDGraphicsDocument::::close()",
      "373": "OFDGraphicsDocument::::close()",
      "374": "OFDGraphicsDocument::::close()",
      "375": "OFDGraphicsDocument::::close()",
      "376": "OFDGraphicsDocument::::close()",
      "377": "OFDGraphicsDocument::::close()",
      "378": "OFDGraphicsDocument::::close()",
      "379": "OFDGraphicsDocument::::close()",
      "380": "OFDGraphicsDocument::::close()",
      "381": "OFDGraphicsDocument::::close()",
      "382": "OFDGraphicsDocument::::close()",
      "383": "OFDGraphicsDocument::::close()",
      "384": "OFDGraphicsDocument::::close()",
      "385": "OFDGraphicsDocument::::close()",
      "386": "OFDGraphicsDocument::::close()",
      "387": "OFDGraphicsDocument::::close()",
      "388": "OFDGraphicsDocument::::close()",
      "389": "OFDGraphicsDocument::::close()",
      "390": "OFDGraphicsDocument::::close()",
      "391": "OFDGraphicsDocument::::close()",
      "392": "OFDGraphicsDocument::::close()",
      "393": "OFDGraphicsDocument::::close()"
    },
    "test_reverse_method_lines_dic": {
      "10": "OFDGraphicsDocumentTest::::newPage()",
      "11": "OFDGraphicsDocumentTest::::newPage()",
      "12": "OFDGraphicsDocumentTest::::newPage()",
      "13": "OFDGraphicsDocumentTest::::newPage()",
      "14": "OFDGraphicsDocumentTest::::newPage()",
      "15": "OFDGraphicsDocumentTest::::newPage()",
      "16": "OFDGraphicsDocumentTest::::newPage()",
      "17": "OFDGraphicsDocumentTest::::newPage()",
      "18": "OFDGraphicsDocumentTest::::newPage()"
    },
    "tests": [
      {
        "test_lines": [
          10,
          18
        ],
        "covered_lines": [
          54,
          106,
          107,
          110,
          113,
          116,
          117,
          135,
          139,
          140,
          141,
          142,
          143,
          144,
          145,
          146,
          147,
          151,
          152,
          154,
          155,
          156,
          159,
          160,
          162,
          164,
          165,
          167,
          168,
          169,
          171,
          172,
          173,
          196,
          198,
          201,
          202,
          203,
          204,
          205,
          208,
          209,
          212,
          214,
          216,
          275,
          370,
          373,
          378,
          380,
          381,
          388,
          390,
          393
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/ofdrw/ofdrw-graphics2d/src/main/java/org/ofdrw/graphics2d/OFDPageGraphics2D.java": {
    "class_content": [
      "package org.ofdrw.graphics2d;\n",
      "\n",
      "import org.ofdrw.core.basicStructure.pageObj.Content;\n",
      "import org.ofdrw.core.basicStructure.pageObj.Page;\n",
      "import org.ofdrw.core.basicStructure.pageObj.layer.CT_Layer;\n",
      "import org.ofdrw.core.basicStructure.pageObj.layer.Type;\n",
      "import org.ofdrw.core.basicStructure.pageObj.layer.block.CT_PageBlock;\n",
      "import org.ofdrw.core.basicStructure.pageObj.layer.block.ImageObject;\n",
      "import org.ofdrw.core.basicType.ST_Array;\n",
      "import org.ofdrw.core.basicType.ST_Box;\n",
      "import org.ofdrw.core.basicType.ST_ID;\n",
      "import org.ofdrw.core.basicType.ST_RefID;\n",
      "import org.ofdrw.core.graph.pathObj.AbbreviatedData;\n",
      "import org.ofdrw.core.graph.pathObj.CT_Path;\n",
      "import org.ofdrw.core.pageDescription.clips.CT_Clip;\n",
      "import org.ofdrw.core.pageDescription.clips.Clips;\n",
      "import org.ofdrw.pkg.container.PageDir;\n",
      "\n",
      "import java.awt.*;\n",
      "import java.awt.font.FontRenderContext;\n",
      "import java.awt.font.GlyphVector;\n",
      "import java.awt.font.TextLayout;\n",
      "import java.awt.geom.*;\n",
      "import java.awt.image.*;\n",
      "import java.awt.image.renderable.RenderableImage;\n",
      "import java.text.AttributedCharacterIterator;\n",
      "import java.util.Hashtable;\n",
      "import java.util.Map;\n",
      "\n",
      "/**\n",
      " * OFD 2D\u56fe\u5f62\uff0c\u5b9e\u73b0AWT Graphics2D API\u3002\n",
      " * \u901a\u8fc7\u56fe\u5f62\u7ed8\u5236\u751f\u6210OFD\u3002\n",
      " * <p>\n",
      " * \u5728 PageGraphics2D \u4e2d\u6240\u6709\u63a5\u53e3\u53c2\u6570\u5355\u4f4d\u5747\u4e3a \u6beb\u7c73(mm)\u3002\n",
      " *\n",
      " * @author \u6743\u89c2\u5b87\n",
      " * @since 2023-01-18 10:07:52\n",
      " */\n",
      "public class OFDPageGraphics2D extends Graphics2D {\n",
      "    /**\n",
      "     * \u6587\u6863\u4e0a\u4e0b\u6587\n",
      "     */\n",
      "    private final OFDGraphicsDocument doc;\n",
      "\n",
      "    /**\n",
      "     * \u6240\u5c5e\u9875\u9762\u5bb9\u5668\n",
      "     */\n",
      "    private final PageDir pageDir;\n",
      "\n",
      "    /**\n",
      "     * \u9875\u9762\u5bf9\u8c61\n",
      "     */\n",
      "    private final Page pageObj;\n",
      "\n",
      "    /**\n",
      "     * \u9875\u9762\u5185\u5bb9\u5bb9\u5668\n",
      "     */\n",
      "    private final CT_PageBlock container;\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u7ed8\u5236\u5c5e\u6027\n",
      "     * <p>\n",
      "     * \u5bf9 paint \u4e0e stroke \u90fd\u4f1a\u53cd\u6620\u5230 DrawParam\n",
      "     * <p>\n",
      "     * stroke\u3001fill \u6216 drawString \u65f6\uff0c\u5982\u679cDrawParam\u4e0e\u4e0a\u6b21\u7684\u4e0d\u4e00\u6837\uff0c\u5219\u6dfb\u52a0\n",
      "     */\n",
      "    private final OFDGraphics2DDrawParam drawParam;\n",
      "\n",
      "    /**\n",
      "     * \u7ed8\u5236\u7a7a\u95f4\u5927\u5c0f\n",
      "     */\n",
      "    private final ST_Box size;\n",
      "\n",
      "    /**\n",
      "     * \u9875\u9762\u5728\u9875\u6811\u4e2d\u7684\u5bf9\u8c61ID\n",
      "     */\n",
      "    public final ST_ID pageID;\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u5907\u914d\u7f6e\u5bf9\u8c61\n",
      "     * <p>\n",
      "     * \u7528\u4e8e\u517c\u5bb9AWT\u63a5\u53e3\n",
      "     */\n",
      "    private OFDPageGraphicsConfiguration devConfig;\n",
      "\n",
      "    /**\n",
      "     * \u7528\u4e8e\u521b\u5efa\u5408\u9002\u7684\u5b57\u4f53\u89c4\u683c\n",
      "     */\n",
      "    private final Graphics2D fmg;\n",
      "\n",
      "    /**\n",
      "     * \u521b\u5efa2D\u56fe\u5f62\u5bf9\u8c61\n",
      "     *\n",
      "     * @param doc     \u6587\u6863\u4e0a\u4e0b\u6587\n",
      "     * @param pageID  \u9875\u5bf9\u8c61ID\n",
      "     * @param pageDir \u9875\u9762\u76ee\u5f55\n",
      "     * @param pageObj \u9875\u9762\u5bf9\u8c61\n",
      "     * @param box     \u7ed8\u5236\u7a7a\u95f4\u5927\u5c0f\n",
      "     */\n",
      "    OFDPageGraphics2D(OFDGraphicsDocument doc, ST_ID pageID, PageDir pageDir, Page pageObj, ST_Box box) {\n",
      "\n",
      "        BufferedImage bi = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB);\n",
      "        fmg = bi.createGraphics();\n",
      "\n",
      "        this.doc = doc;\n",
      "        this.pageID = pageID;\n",
      "        this.pageDir = pageDir;\n",
      "        this.pageObj = pageObj;\n",
      "        this.size = box;\n",
      "        this.drawParam = new OFDGraphics2DDrawParam(doc, box);\n",
      "\n",
      "        // \u9875\u9762\u5185\u5bb9\n",
      "        final Content content = new Content();\n",
      "        pageObj.setContent(content);\n",
      "\n",
      "        // \u9875\u5c42\n",
      "        CT_Layer ctlayer = new CT_Layer();\n",
      "        ctlayer.setType(Type.Body);\n",
      "        ctlayer.setObjID(doc.newID());\n",
      "        // \u6dfb\u52a0\u9875\u9762\u5185\u5bb9\n",
      "        content.addLayer(ctlayer);\n",
      "\n",
      "        // \u521b\u5efa\u5bb9\u5668\n",
      "        container = new CT_PageBlock();\n",
      "        container.setObjID(doc.newID());\n",
      "        // \u6dfb\u52a0\u5230\u9875\u9762\u5c42\n",
      "        ctlayer.addPageBlock(container);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u590d\u5236\u5f53\u524d\u7ed8\u5236\u4e0a\u4e0b\u6587\uff0c\u5e76\u521b\u5efa\u65b0\u7684\u7ed8\u5236\u4e0a\u4e0b\u6587\n",
      "     *\n",
      "     * @param parent \u590d\u5236\u5bf9\u8c61\n",
      "     */\n",
      "    private OFDPageGraphics2D(OFDPageGraphics2D parent) {\n",
      "        this.doc = parent.doc;\n",
      "        this.pageID = parent.pageID;\n",
      "        this.pageDir = parent.pageDir;\n",
      "        this.pageObj = parent.pageObj;\n",
      "        this.container = parent.container;\n",
      "        this.size = parent.size.clone();\n",
      "        this.drawParam = parent.drawParam.clone();\n",
      "        this.devConfig = parent.devConfig;\n",
      "        this.fmg = parent.fmg;\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u7ed8\u5236\u56fe\u5f62\n",
      "     *\n",
      "     * @param s \u56fe\u5f62\n",
      "     */\n",
      "    @Override\n",
      "    public void draw(Shape s) {\n",
      "        if (s == null) {\n",
      "            return;\n",
      "        }\n",
      "\n",
      "        // \u5c06\u7528\u6237\u7a7a\u95f4\u56fe\u5f62\u53d8\u6362\u4e3a\u8bbe\u5907\u7a7a\u95f4\u5750\u6807\n",
      "        if (!this.drawParam.ctm.isIdentity()) {\n",
      "            s = this.drawParam.ctm.createTransformedShape(s);\n",
      "        }\n",
      "\n",
      "        final AbbreviatedData pData = OFDShapes.path(s);\n",
      "        if (pData.size() == 0) {\n",
      "            // \u6ca1\u6709\u7ed8\u5236\u53c2\u6570\u65f6\u4e0d\u586b\u5145\n",
      "            return;\n",
      "        }\n",
      "\n",
      "        CT_Path pathObj = new CT_Path();\n",
      "        pathObj.setBoundary(this.size);\n",
      "        pathObj.setStroke(true);\n",
      "        pathObj.setAbbreviatedData(pData);\n",
      "\n",
      "        // \u5982\u679c\u5b58\u5728\u88c1\u526a\u533a\u57df\uff0c\u8bbe\u7f6e\u88c1\u526a\n",
      "        if (this.drawParam.clip != null) {\n",
      "            Clips clips = makeClip(s, new AffineTransform(this.drawParam.ctm));\n",
      "            pathObj.setClips(clips);\n",
      "        }\n",
      "\n",
      "        // \u6784\u9020\u7ed8\u5236\u53c2\u6570\n",
      "        ST_RefID dpId = this.drawParam.makeDrawParam();\n",
      "        pathObj.setDrawParam(dpId);\n",
      "\n",
      "        container.addPageBlock(pathObj.toObj(doc.newID()));\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u4f7f\u7528\u5f53\u524d\u7684 \u5b57\u4f53(Font) \u4ee5\u53ca \u753b\u7b14\u53c2\u6570(Paint) \u5728\u6307\u5b9a\u4f4d\u7f6e\u4e0a\u7ed8\u5236\u6587\u5b57\n",
      "     * <p>\n",
      "     * \u6587\u5b57\u5c06\u8f6c\u6362\u4e3a\u56fe\u5f62\u8def\u5f84\u7ed8\u5236\u586b\u5145\u5728OFD\u9875\u9762\u4e0a\n",
      "     * <p>\n",
      "     * \u7b2c\u4e00\u4e2a\u6587\u5b57\u7684\u57fa\u7ebf\u5750\u6807\u4e3a\u4f20\u5165\u7684(x,y)\u53c2\u6570\u4f4d\u7f6e\u3002\n",
      "     * <p>\n",
      "     * \u6587\u5b57\u7ed8\u5236\u7684\u5c06\u88ab\u88c1\u526a\u77e9\u9635(clip)\u3001\u53d8\u6362\u77e9\u9635\u5f71\u54cd\u3002\n",
      "     *\n",
      "     * @param str \u5f85\u7ed8\u5236\u6587\u5b57\u5e8f\u5217\n",
      "     * @param x   \u9996\u4e2a\u6587\u5b57\u57fa\u7ebfX\u5750\u6807\n",
      "     * @param y   \u9996\u4e2a\u6587\u5b57\u57fa\u7ebfY\u5750\u6807\n",
      "     */\n",
      "    @Override\n",
      "    public void drawString(String str, int x, int y) {\n",
      "        GlyphVector gv = getFont().createGlyphVector(getFontRenderContext(), str);\n",
      "        drawGlyphVector(gv, x, y);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u4f7f\u7528\u5f53\u524d\u7684 \u5b57\u4f53(Font) \u4ee5\u53ca \u753b\u7b14\u53c2\u6570(Paint) \u5728\u6307\u5b9a\u4f4d\u7f6e\u4e0a\u7ed8\u5236\u6587\u5b57\n",
      "     * <p>\n",
      "     * \u6587\u5b57\u5c06\u8f6c\u6362\u4e3a\u56fe\u5f62\u8def\u5f84\u7ed8\u5236\u586b\u5145\u5728OFD\u9875\u9762\u4e0a\n",
      "     * <p>\n",
      "     * \u7b2c\u4e00\u4e2a\u6587\u5b57\u7684\u57fa\u7ebf\u5750\u6807\u4e3a\u4f20\u5165\u7684(x,y)\u53c2\u6570\u4f4d\u7f6e\u3002\n",
      "     * <p>\n",
      "     * \u6587\u5b57\u7ed8\u5236\u7684\u5c06\u88ab\u88c1\u526a\u77e9\u9635(clip)\u3001\u53d8\u6362\u77e9\u9635\u5f71\u54cd\u3002\n",
      "     *\n",
      "     * @param str \u5f85\u7ed8\u5236\u6587\u5b57\u5e8f\u5217\n",
      "     * @param x   \u9996\u4e2a\u6587\u5b57\u57fa\u7ebfX\u5750\u6807\n",
      "     * @param y   \u9996\u4e2a\u6587\u5b57\u57fa\u7ebfY\u5750\u6807\n",
      "     */\n",
      "    @Override\n",
      "    public void drawString(String str, float x, float y) {\n",
      "        GlyphVector gv = getFont().createGlyphVector(getFontRenderContext(), str);\n",
      "        drawGlyphVector(gv, x, y);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u4f7f\u7528\u8fed\u4ee3\u5668\u7ed8\u5236\u6587\u5b57\u56fe\u5f62\n",
      "     * <p>\n",
      "     * \u6587\u5b57\u56fe\u5f62\u7684\u7ed8\u5236\u5c06\u7ed8\u5236\u5c06\u53d7\u5230\u753b\u7b14\u53c2\u6570(Paint) \u3001\u88ab\u88c1\u526a\u77e9\u9635(clip)\u3001\u53d8\u6362\u77e9\u9635\u5f71\u54cd\uff08CTM\uff09\u3002\n",
      "     * <p>\n",
      "     * \u7b2c\u4e00\u4e2a\u6587\u5b57\u56fe\u5f62\u7684\u57fa\u7ebf\u5750\u6807\u4e3a\u4f20\u5165\u7684(x,y)\u53c2\u6570\u4f4d\u7f6e\u3002\n",
      "     *\n",
      "     * @param iterator \u5f85\u7ed8\u5236\u6587\u672c\u7684\u8fed\u4ee3\u5668\n",
      "     * @param x        \u9996\u4e2a\u6587\u5b57\u57fa\u7ebfX\u5750\u6807\n",
      "     * @param y        \u9996\u4e2a\u6587\u5b57\u57fa\u7ebfY\u5750\u6807\n",
      "     */\n",
      "    @Override\n",
      "    public void drawString(AttributedCharacterIterator iterator, int x, int y) {\n",
      "        TextLayout layout = new TextLayout(iterator, getFontRenderContext());\n",
      "        layout.draw(this, x, y);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u4f7f\u7528\u8fed\u4ee3\u5668\u7ed8\u5236\u6587\u5b57\u56fe\u5f62\n",
      "     * <p>\n",
      "     * \u6587\u5b57\u56fe\u5f62\u7684\u7ed8\u5236\u5c06\u7ed8\u5236\u5c06\u53d7\u5230\u753b\u7b14\u53c2\u6570(Paint) \u3001\u88ab\u88c1\u526a\u77e9\u9635(clip)\u3001\u53d8\u6362\u77e9\u9635\u5f71\u54cd\uff08CTM\uff09\u3002\n",
      "     * <p>\n",
      "     * \u7b2c\u4e00\u4e2a\u6587\u5b57\u56fe\u5f62\u7684\u57fa\u7ebf\u5750\u6807\u4e3a\u4f20\u5165\u7684(x,y)\u53c2\u6570\u4f4d\u7f6e\u3002\n",
      "     *\n",
      "     * @param iterator \u5f85\u7ed8\u5236\u6587\u672c\u7684\u8fed\u4ee3\u5668\n",
      "     * @param x        \u9996\u4e2a\u6587\u5b57\u57fa\u7ebfX\u5750\u6807\n",
      "     * @param y        \u9996\u4e2a\u6587\u5b57\u57fa\u7ebfY\u5750\u6807\n",
      "     */\n",
      "    @Override\n",
      "    public void drawString(AttributedCharacterIterator iterator, float x, float y) {\n",
      "        TextLayout layout = new TextLayout(iterator, getFontRenderContext());\n",
      "        layout.draw(this, x, y);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u5728\u6307\u5b9a\u4f4d\u7f6e\u4e0a\u7ed8\u5236\u7ed8\u5236\u56fe\u5f62\u8def\u5f84\u6570\u636e\uff0c\n",
      "     * <p>\n",
      "     * \u56fe\u5f62\u7684\u7ed8\u5236\u5c06\u7ed8\u5236\u5c06\u53d7\u5230\u753b\u7b14\u53c2\u6570(Paint) \u3001\u88ab\u88c1\u526a\u77e9\u9635(clip)\u3001\u53d8\u6362\u77e9\u9635\u5f71\u54cd\uff08CTM\uff09\u3002\n",
      "     * <p>\n",
      "     * \u7b2c\u4e00\u4e2a\u6587\u5b57\u7684\u57fa\u7ebf\u5750\u6807\u4e3a\u4f20\u5165\u7684(x,y)\u53c2\u6570\u4f4d\u7f6e\u3002\n",
      "     *\n",
      "     * @param g \u8def\u5f84\u5411\u91cf\u6570\u636e\n",
      "     * @param x \u56fe\u5f62\u7ed8\u5236\u4f4d\u7f6eX\u5750\u6807\n",
      "     * @param y \u56fe\u5f62\u7ed8\u5236\u4f4d\u7f6eY\u5750\u6807\n",
      "     */\n",
      "    @Override\n",
      "    public void drawGlyphVector(GlyphVector g, float x, float y) {\n",
      "        Shape glyphOutline = g.getOutline(x, y);\n",
      "        fill(glyphOutline);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u5728\u6307\u5b9a\u5750\u6807\u4f4d\u7f6e\u4e0a\u7ed8\u5236\u56fe\u7247\n",
      "     * <p>\n",
      "     * \u7ed8\u5236\u7684\u56fe\u7247\u5927\u5c0f\u4e3a\u56fe\u5143\u539f\u59cb\u5927\u5c0f\n",
      "     *\n",
      "     * @param img      \u5f85\u7ed8\u5236\u56fe\u7247\n",
      "     * @param x        \u56fe\u7247\u5de6\u4e0a\u89d2 X\u5750\u6807\n",
      "     * @param y        \u56fe\u7247\u5de6\u4e0a\u89d2 Y\u5750\u6807\n",
      "     * @param observer \u4e0d\u4f7f\u7528\n",
      "     * @return \u56fa\u5b9a\u503c true\n",
      "     */\n",
      "    @Override\n",
      "    public boolean drawImage(Image img, int x, int y, ImageObserver observer) {\n",
      "        if (img == null) {\n",
      "            return true;\n",
      "        }\n",
      "        int w = img.getWidth(observer);\n",
      "        if (w < 0) {\n",
      "            return false;\n",
      "        }\n",
      "        int h = img.getHeight(observer);\n",
      "        if (h < 0) {\n",
      "            return false;\n",
      "        }\n",
      "        return drawImage(img, x, y, w, h, observer);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u5c06\u56fe\u7247\u7ed8\u5236\u4e8e\u6307\u5b9a\u77e9\u5f62\u533a\u57df\u5185\n",
      "     *\n",
      "     * @param img      \u5f85\u7ed8\u5236\u7684\u56fe\u7247\n",
      "     * @param x        \u77e9\u5f62\u5de6\u4e0a\u89d2 X\u5750\u6807\n",
      "     * @param y        \u77e9\u5f62\u5de6\u4e0a\u89d2 Y\u5750\u6807\n",
      "     * @param width    \u77e9\u5f62\u5bbd\u5ea6\n",
      "     * @param height   \u77e9\u5f62\u9ad8\u5ea6\n",
      "     * @param observer \u5ffd\u7565\n",
      "     * @return \u56fa\u5b9a\u503c true\n",
      "     */\n",
      "    @Override\n",
      "    public boolean drawImage(Image img, int x, int y, int width, int height, ImageObserver observer) {\n",
      "        if (img == null) {\n",
      "            return true;\n",
      "        }\n",
      "\n",
      "        // \u4fdd\u5b58\u56fe\u7247\u653e\u7f6e\u4e4b\u524d\u53d8\u6362\u77e9\u9635\n",
      "        AffineTransform before = getTransform();\n",
      "        // \u8ba1\u7b97\u7f29\u653e\u540e\u7684\u56fe\u7247\u5e94\u7528\u53d8\u6362\u77e9\u9635\uff0c\u5e76\u4f5c\u4e3a\u5f53\u524d\u7684\u53d8\u6362\u77e9\u9635\n",
      "        AffineTransform imgCTM = new AffineTransform(before);\n",
      "        imgCTM.concatenate(new AffineTransform(width, 0, 0, height, x, y));\n",
      "\n",
      "        /*\n",
      "         * \u6784\u9020\u56fe\u7247\u56fe\u5143\n",
      "         */\n",
      "        ST_ID objId = this.doc.addResImg(img);\n",
      "        ImageObject imgObj = new ImageObject(doc.newID());\n",
      "        imgObj.setCTM(trans(imgCTM));\n",
      "        imgObj.setResourceID(objId.ref());\n",
      "        // \u7531\u4e8eCanvas\u662f\u4f7f\u7528\u6574\u4e2a\u753b\u5e03\u7ed8\u5236\u5143\u7d20\uff0c\n",
      "        // \u56e0\u6b64\u6bcf\u4e2a\u5143\u7d20\u7ed8\u5236\u65f6\u7684\u8fb9\u754c\u4e5f\u662f\u6574\u4e2a\u753b\u5e03\u5927\u5c0f\u3002\n",
      "        imgObj.setBoundary(this.size);\n",
      "        // \u900f\u660e\u5ea6\n",
      "        if (this.drawParam.gColor instanceof Color) {\n",
      "            int alpha = ((Color) this.drawParam.gColor).getAlpha();\n",
      "            if (alpha != 255) {\n",
      "                imgObj.setAlpha(alpha);\n",
      "            }\n",
      "        }\n",
      "\n",
      "        ST_RefID dpId = this.drawParam.makeDrawParam();\n",
      "        imgObj.setDrawParam(dpId);\n",
      "\n",
      "        // \u5982\u679c\u5b58\u5728\u88c1\u526a\u533a\u57df\uff0c\u90a3\u4e48\u53d6\u88c1\u526a\u533a\u57df\u4e0e\u53d8\u6362\u540e\u56fe\u5f62\u7684\u4ea4\u96c6\u4f5c\u4e3a\u7ed8\u5236\u5185\u5bb9\n",
      "        if (this.drawParam.clip != null) {\n",
      "            // \u56fe\u7247\u7f29\u653e\u540e\u5728\u753b\u5e03\u4e0a\u7684\u8def\u5f84\n",
      "            // \u8bf4\u660e\uff1a\u56fe\u7247\u662f\u901a\u8fc7\u4e00\u4e2a (x: 0,y: 0,w: 1,h: 1)\u7684\u77e9\u5f62\u901a\u8fc7\u53d8\u6362\u77e9\u9635\u653e\u7f6e\u5230OFD\u4e0a\n",
      "            Shape imgShape = imgCTM.createTransformedShape(new Rectangle2D.Double(0, 0, 1, 1));\n",
      "            Clips clips = makeClip(imgShape, imgCTM);\n",
      "            imgObj.setClips(clips);\n",
      "        }\n",
      "        container.addPageBlock(imgObj);\n",
      "        return true;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u5728\u6307\u5b9a\u4f4d\u7f6e\u7ed8\u5236\u56fe\u7247\n",
      "     * <p>\n",
      "     * \u56fe\u7247\u4fdd\u6301\u539f\u6709\u5927\u5c0f\uff0c\u56fe\u7247\u7684\u900f\u660e\u90e8\u5206\u5c06\u4f1a\u4f7f\u7528\u6307\u5b9a\u989c\u8272\u586b\u5145\n",
      "     *\n",
      "     * @param img      \u5f85\u7ed8\u5236\u7684\u56fe\u7247\n",
      "     * @param x        \u77e9\u5f62\u5de6\u4e0a\u89d2 X\u5750\u6807\n",
      "     * @param y        \u77e9\u5f62\u5de6\u4e0a\u89d2 Y\u5750\u6807\n",
      "     * @param bgcolor  \u80cc\u666f\u989c\u8272\uff0c\u7528\u4e8e\u586b\u5145\u56fe\u7247\u900f\u660e\u90e8\u5206\n",
      "     * @param observer \u5ffd\u7565\n",
      "     * @return \u56fa\u5b9a\u503c true\n",
      "     */\n",
      "    @Override\n",
      "    public boolean drawImage(Image img, int x, int y, Color bgcolor, ImageObserver observer) {\n",
      "        if (img == null) {\n",
      "            return true;\n",
      "        }\n",
      "        int w = img.getWidth(null);\n",
      "        if (w < 0) {\n",
      "            return false;\n",
      "        }\n",
      "        int h = img.getHeight(null);\n",
      "        if (h < 0) {\n",
      "            return false;\n",
      "        }\n",
      "        return drawImage(img, x, y, w, h, bgcolor, observer);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u5728\u6307\u5b9a\u77e9\u5f62\u533a\u57df\u5185\u7ed8\u5236\u56fe\u7247\n",
      "     * <p>\n",
      "     * \u56fe\u7247\u5c06\u4f38\u7f29\u81f3\u77e9\u5f62\u533a\u57df\u5927\u5c0f\uff0c\u56fe\u7247\u7684\u900f\u660e\u90e8\u5206\u5c06\u4f1a\u4f7f\u7528\u6307\u5b9a\u989c\u8272\u586b\u5145\n",
      "     *\n",
      "     * @param img      \u5f85\u7ed8\u5236\u7684\u56fe\u7247\n",
      "     * @param x        \u77e9\u5f62\u5de6\u4e0a\u89d2 X\u5750\u6807\n",
      "     * @param y        \u77e9\u5f62\u5de6\u4e0a\u89d2 Y\u5750\u6807\n",
      "     * @param width    \u77e9\u5f62\u5bbd\u5ea6\n",
      "     * @param height   \u77e9\u5f62\u9ad8\u5ea6\n",
      "     * @param bgcolor  \u80cc\u666f\u989c\u8272\uff0c\u7528\u4e8e\u586b\u5145\u56fe\u7247\u900f\u660e\u90e8\u5206\n",
      "     * @param observer \u5ffd\u7565\n",
      "     * @return \u56fa\u5b9a\u503c true\n",
      "     */\n",
      "    @Override\n",
      "    public boolean drawImage(Image img, int x, int y, int width, int height, Color bgcolor, ImageObserver observer) {\n",
      "        Paint saved = getPaint();\n",
      "        setPaint(bgcolor);\n",
      "        fillRect(x, y, width, height);\n",
      "        setPaint(saved);\n",
      "        return drawImage(img, x, y, width, height, observer);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u7ed8\u5236\u56fe\u7247\u5185\u67d0\u4e2a\u77e9\u5f62\u533a\u57df \u5230 \u753b\u5e03\u7684\u67d0\u4e2a\u6307\u5b9a\u77e9\u5f62\u533a\u57df\uff0c\u56fe\u7247\u5c06\u4f1a\u7f29\u653e\u9002\u5e94\u76ee\u6807\u533a\u57df\n",
      "     *\n",
      "     * @param img      \u5f85\u7ed8\u5236\u56fe\u7247\n",
      "     * @param dx1      \u753b\u5e03\u5185 \u77e9\u5f62\u5de6\u4e0a\u89d2 X\u5750\u6807\uff08\u76ee\u7684\u5750\u6807\uff09\n",
      "     * @param dy1      \u753b\u5e03\u5185 \u77e9\u5f62\u5de6\u4e0a\u89d2 Y\u5750\u6807\uff08\u76ee\u7684\u5750\u6807\uff09\n",
      "     * @param dx2      \u753b\u5e03\u5185 \u77e9\u5f62\u53f3\u4e0b\u89d2 X\u5750\u6807\uff08\u76ee\u7684\u5750\u6807\uff09\n",
      "     * @param dy2      \u753b\u5e03\u5185 \u77e9\u5f62\u53f3\u4e0b\u89d2 Y\u5750\u6807\uff08\u76ee\u7684\u5750\u6807\uff09\n",
      "     * @param sx1      \u56fe\u7247\u5185 \u77e9\u5f62\u5de6\u4e0a\u89d2 X\u5750\u6807\uff08\u6e90\u5750\u6807\uff09\n",
      "     * @param sy1      \u56fe\u7247\u5185 \u77e9\u5f62\u5de6\u4e0a\u89d2 Y\u5750\u6807\uff08\u6e90\u5750\u6807\uff09\n",
      "     * @param sx2      \u56fe\u7247\u5185 \u77e9\u5f62\u53f3\u4e0b\u89d2 X\u5750\u6807\uff08\u6e90\u5750\u6807\uff09\n",
      "     * @param sy2      \u56fe\u7247\u5185 \u77e9\u5f62\u53f3\u4e0b\u89d2 Y\u5750\u6807\uff08\u6e90\u5750\u6807\uff09\n",
      "     * @param observer \u5ffd\u7565\n",
      "     * @return \u56fa\u5b9a\u503c true\n",
      "     */\n",
      "    @Override\n",
      "    public boolean drawImage(Image img, int dx1, int dy1, int dx2, int dy2, int sx1, int sy1, int sx2, int sy2, ImageObserver observer) {\n",
      "        int w = dx2 - dx1;\n",
      "        int h = dy2 - dy1;\n",
      "        BufferedImage img2 = new BufferedImage(w, h, BufferedImage.TYPE_INT_ARGB);\n",
      "        Graphics2D g2 = img2.createGraphics();\n",
      "        g2.drawImage(img, 0, 0, w, h, sx1, sy1, sx2, sy2, null);\n",
      "        return drawImage(img2, dx1, dy1, null);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u7ed8\u5236\u56fe\u7247\u5185\u67d0\u4e2a\u77e9\u5f62\u533a\u57df \u5230 \u753b\u5e03\u7684\u67d0\u4e2a\u6307\u5b9a\u77e9\u5f62\u533a\u57df\n",
      "     * <p>\n",
      "     * \u56fe\u7247\u5c06\u4f1a\u7f29\u653e\u9002\u5e94\u76ee\u6807\u533a\u57df\uff0c\u56fe\u7247\u7684\u900f\u660e\u90e8\u5206\u5c06\u4f1a\u4f7f\u7528\u6307\u5b9a\u989c\u8272\u586b\u5145\n",
      "     *\n",
      "     * @param img      \u5f85\u7ed8\u5236\u56fe\u7247\n",
      "     * @param dx1      \u753b\u5e03\u5185 \u77e9\u5f62\u5de6\u4e0a\u89d2 X\u5750\u6807\uff08\u76ee\u7684\u5750\u6807\uff09\n",
      "     * @param dy1      \u753b\u5e03\u5185 \u77e9\u5f62\u5de6\u4e0a\u89d2 Y\u5750\u6807\uff08\u76ee\u7684\u5750\u6807\uff09\n",
      "     * @param dx2      \u753b\u5e03\u5185 \u77e9\u5f62\u53f3\u4e0b\u89d2 X\u5750\u6807\uff08\u76ee\u7684\u5750\u6807\uff09\n",
      "     * @param dy2      \u753b\u5e03\u5185 \u77e9\u5f62\u53f3\u4e0b\u89d2 Y\u5750\u6807\uff08\u76ee\u7684\u5750\u6807\uff09\n",
      "     * @param sx1      \u56fe\u7247\u5185 \u77e9\u5f62\u5de6\u4e0a\u89d2 X\u5750\u6807\uff08\u6e90\u5750\u6807\uff09\n",
      "     * @param sy1      \u56fe\u7247\u5185 \u77e9\u5f62\u5de6\u4e0a\u89d2 Y\u5750\u6807\uff08\u6e90\u5750\u6807\uff09\n",
      "     * @param sx2      \u56fe\u7247\u5185 \u77e9\u5f62\u53f3\u4e0b\u89d2 X\u5750\u6807\uff08\u6e90\u5750\u6807\uff09\n",
      "     * @param sy2      \u56fe\u7247\u5185 \u77e9\u5f62\u53f3\u4e0b\u89d2 Y\u5750\u6807\uff08\u6e90\u5750\u6807\uff09\n",
      "     * @param bgcolor  \u80cc\u666f\u989c\u8272\uff0c\u7528\u4e8e\u586b\u5145\u900f\u660e\u90e8\u5206\n",
      "     * @param observer \u5ffd\u7565\n",
      "     * @return \u56fa\u5b9a\u503c true\n",
      "     */\n",
      "    @Override\n",
      "    public boolean drawImage(Image img, int dx1, int dy1, int dx2, int dy2, int sx1, int sy1, int sx2, int sy2, Color bgcolor, ImageObserver observer) {\n",
      "        Paint saved = getPaint();\n",
      "        setPaint(bgcolor);\n",
      "        fillRect(dx1, dy1, dx2 - dx1, dy2 - dy1);\n",
      "        setPaint(saved);\n",
      "        return drawImage(img, dx1, dy1, dx2, dy2, sx1, sy1, sx2, sy2, observer);\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u901a\u8fc7\u53d8\u6362\u77e9\u9635\u5728\u6307\u5b9a\u4f4d\u7f6e\u7ed8\u5236\u56fe\u50cf\n",
      "     *\n",
      "     * @param img   \u5f85\u7ed8\u5236\u7684\u56fe\u50cf\uff08\u53ef\u6e32\u67d3\u56fe\u50cf\u63a5\u53e3\uff09\n",
      "     * @param xform \u53d8\u6362\u77e9\u9635\uff0c\u6307\u5b9a\u56fe\u50cf\u7ed8\u5236\u65b9\u5f0f\n",
      "     * @param obs   \u5ffd\u7565\n",
      "     * @return true\n",
      "     */\n",
      "    @Override\n",
      "    public boolean drawImage(Image img, AffineTransform xform, ImageObserver obs) {\n",
      "        AffineTransform old = this.getTransform();\n",
      "        if (xform != null) {\n",
      "            this.transform(xform);\n",
      "        }\n",
      "        boolean res = drawImage(img, 0, 0, obs);\n",
      "        if (xform != null) {\n",
      "            this.setTransform(old);\n",
      "        }\n",
      "        return res;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u5728\u753b\u5e03\u6307\u5b9a\u4f4d\u7f6e\u7ed8\u5236\u56fe\u50cf\uff0c\u5728\u7ed8\u5236\u524d\u5c06\u4f1a\u4f7f\u7528 {@link BufferedImageOp} \u8fc7\u6ee4\u56fe\u50cf\n",
      "     * <p>\n",
      "     * \u7b49\u4ef7\u4e8e\n",
      "     * <pre>\n",
      "     *       img1 = op.filter(img, null);\n",
      "     *       drawImage(img1, new AffineTransform(1f,0f,0f,1f,x,y), null);\n",
      "     * </pre>\n",
      "     *\n",
      "     * @param img \u5f85\u7ed8\u5236\u56fe\u50cf\n",
      "     * @param op  \u56fe\u7247\u6e32\u67d3\u524d\u7684\u8fc7\u6ee4\u5668\n",
      "     * @param x   \u56fe\u7247\u5de6\u4e0a\u89d2X\u5750\u6807\n",
      "     * @param y   \u56fe\u7247\u5de6\u4e0a\u89d2Y\u5750\u6807\n",
      "     */\n",
      "    @Override\n",
      "    public void drawImage(BufferedImage img, BufferedImageOp op, int x, int y) {\n",
      "        BufferedImage img1 = img;\n",
      "        if (op != null) {\n",
      "            img1 = op.filter(img, null);\n",
      "        }\n",
      "        drawImage(img1, new AffineTransform(1f, 0f, 0f, 1f, x, y), null);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u901a\u8fc7\u53d8\u6362\u77e9\u9635\u5728\u6307\u5b9a\u4f4d\u7f6e\u7ed8\u5236\u56fe\u50cf\n",
      "     *\n",
      "     * @param img   \u5f85\u7ed8\u5236\u7684\u56fe\u50cf\uff08\u53ef\u6e32\u67d3\u56fe\u50cf\u63a5\u53e3\uff09\n",
      "     * @param xform \u53d8\u6362\u77e9\u9635\uff0c\u6307\u5b9a\u56fe\u50cf\u7ed8\u5236\u65b9\u5f0f\n",
      "     */\n",
      "    @Override\n",
      "    public void drawRenderedImage(RenderedImage img, AffineTransform xform) {\n",
      "        if (img == null) {\n",
      "            return;\n",
      "        }\n",
      "        BufferedImage bufferedImage = convert2Img(img);\n",
      "        drawImage(bufferedImage, xform, null);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u901a\u8fc7\u53d8\u6362\u77e9\u9635\u5728\u6307\u5b9a\u4f4d\u7f6e\u7ed8\u5236\u56fe\u50cf\n",
      "     *\n",
      "     * @param img   \u5f85\u7ed8\u5236\u7684\u56fe\u50cf\uff08\u53ef\u6e32\u67d3\u56fe\u50cf\u63a5\u53e3\uff09\n",
      "     * @param xform \u53d8\u6362\u77e9\u9635\uff0c\u6307\u5b9a\u56fe\u50cf\u7ed8\u5236\u65b9\u5f0f\n",
      "     */\n",
      "    @Override\n",
      "    public void drawRenderableImage(RenderableImage img, AffineTransform xform) {\n",
      "        if (img == null) {\n",
      "            return;\n",
      "        }\n",
      "        RenderedImage rImg = img.createDefaultRendering();\n",
      "        drawRenderedImage(rImg, xform);\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u586b\u5145\u56fe\u5f62\n",
      "     *\n",
      "     * @param s Java\u56fe\u5f62\n",
      "     */\n",
      "    @Override\n",
      "    public void fill(Shape s) {\n",
      "        if (s == null) {\n",
      "            return;\n",
      "        }\n",
      "        // \u5c06\u7528\u6237\u7a7a\u95f4\u56fe\u5f62\u53d8\u6362\u4e3a\u8bbe\u5907\u7a7a\u95f4\u5750\u6807\n",
      "        if (!this.drawParam.ctm.isIdentity()) {\n",
      "            s = this.drawParam.ctm.createTransformedShape(s);\n",
      "        }\n",
      "\n",
      "        final AbbreviatedData pData = OFDShapes.path(s);\n",
      "        if (pData.size() == 0) {\n",
      "            // \u6ca1\u6709\u7ed8\u5236\u53c2\u6570\u65f6\u4e0d\u586b\u5145\n",
      "            return;\n",
      "        }\n",
      "\n",
      "        CT_Path pathObj = new CT_Path();\n",
      "        pathObj.setBoundary(this.size);\n",
      "        pathObj.setFill(true);\n",
      "        pathObj.setStroke(false);\n",
      "        pathObj.setAbbreviatedData(pData);\n",
      "        // \u5982\u679c\u5b58\u5728\u88c1\u526a\u533a\u57df\uff0c\u8bbe\u7f6e\u88c1\u526a\n",
      "        if (this.drawParam.clip != null) {\n",
      "            Clips clips = makeClip(s, new AffineTransform(this.drawParam.ctm));\n",
      "            pathObj.setClips(clips);\n",
      "        }\n",
      "\n",
      "        // \u6784\u9020\u7ed8\u5236\u53c2\u6570\n",
      "        ST_RefID dpId = this.drawParam.makeDrawParam();\n",
      "        pathObj.setDrawParam(dpId);\n",
      "\n",
      "        container.addPageBlock(pathObj.toObj(doc.newID()));\n",
      "\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u68c0\u67e5\u5728\u8bbe\u5907\u7a7a\u95f4\u5185\u5bb9 \u6307\u5b9a\u7684\u77e9\u5f62\u533a\u57df\u662f\u5426\u4e0e \u6307\u5b9a\u5f62\u72b6\u5b58\u5728\u4ea4\u96c6\u3002\n",
      "     * <p>\n",
      "     * onStroke \u4e3afalse\uff0c\u8868\u793a\u68c0\u67e5\u6307\u5b9a\u5f62\u72b6\u6574\u4f53\u662f\u5426\u4e0e\u6307\u5b9a\u77e9\u5f62\u76f8\u4ea4\u3002\n",
      "     * <p>\n",
      "     * onStroke \u4e3atrue\uff0c\u8868\u793a\u68c0\u67e5\u6307\u5b9a\u5f62\u72b6\u7684\u63cf\u8fb9\u6574\u4f53\u662f\u5426\u4e0e\u6307\u5b9a\u77e9\u5f62\u76f8\u4ea4\u3002\n",
      "     *\n",
      "     * @param rect     \u77e9\u5f62\u533a\u57df\n",
      "     * @param s        \u5f85\u68c0\u67e5\u7684\u56fe\u5f62\u5f62\u72b6\n",
      "     * @param onStroke \u76f8\u4ea4\u68c0\u67e5\u65b9\u5f0f\uff0ctrue - \u63cf\u8fb9\u533a\u57df\u662f\u5426\u76f8\u4ea4\uff1b false - \u6574\u4e2a\u5f62\u72b6\u662f\u5426\u76f8\u4ea4\n",
      "     * @return true - \u76f8\u4ea4\uff1bfalse - \u4e0d\u76f8\u4ea4\n",
      "     */\n",
      "    @Override\n",
      "    public boolean hit(Rectangle rect, Shape s, boolean onStroke) {\n",
      "        if (onStroke) {\n",
      "            s = this.drawParam.gStroke.createStrokedShape(s);\n",
      "        }\n",
      "        s = this.drawParam.ctm.createTransformedShape(s);\n",
      "        return s.intersects(rect);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u8bbe\u5907\u56fe\u5f62\u914d\u7f6e\u5bf9\u8c61\n",
      "     *\n",
      "     * @return OFD\u9875\u9762\u865a\u62df\u56fe\u5f62\u914d\u7f6e\u5bf9\u8c61\n",
      "     */\n",
      "    @Override\n",
      "    public GraphicsConfiguration getDeviceConfiguration() {\n",
      "        if (this.devConfig == null) {\n",
      "            this.devConfig = new OFDPageGraphicsConfiguration(size.getWidth(), size.getHeight());\n",
      "        }\n",
      "        return this.devConfig;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u50cf\u7d20\u5408\u6210\u6a21\u5f0f\n",
      "     * <p>\n",
      "     * \u8be5\u65b9\u6cd5\u539f\u7528\u4e8e\u5728\u8bbe\u5907\u7ed8\u5236\u56fe\u50cf\u65f6\uff0c\u5f53\u524d\u7ed8\u5236\u7684\u50cf\u7d20\u4e0e\u539f\u4f4d\u7f6e\u4e0a\u5df2\u7ecf\u5b58\u5728\u7684\u50cf\u7d20\u989c\u8272\u7684\u5408\u6210\u65b9\u5f0f\u3002\n",
      "     * OFD\u4e2d\u6ca1\u6709\u5bf9\u5e94\u7684\u5408\u6210\u6548\u679c\uff0c\u4ec5\u505a\u517c\u5bb9\u6027\u5b9e\u73b0\u3002\n",
      "     *\n",
      "     * @param comp \u5408\u6210\u65b9\u5f0f\n",
      "     */\n",
      "    @Override\n",
      "    public void setComposite(Composite comp) {\n",
      "        this.drawParam.composite = comp;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u7ed8\u5236\u53c2\u6570\n",
      "     *\n",
      "     * @param paint \u8bbe\u7f6e\u753b\u7b14\u989c\u8272\uff0c\u7528\u4e8e\u586b\u5145\u548c\u63cf\u8fb9\n",
      "     */\n",
      "    @Override\n",
      "    public void setPaint(Paint paint) {\n",
      "        this.drawParam.setColor(paint);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u63cf\u8fb9\u5c5e\u6027\n",
      "     *\n",
      "     * @param s \u63cf\u8fb9\u5c5e\u6027\u53c2\u6570\n",
      "     */\n",
      "    @Override\n",
      "    public void setStroke(Stroke s) {\n",
      "        this.drawParam.setStroke(s);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u7ed8\u5236\u5668\u53c2\u6570\n",
      "     *\n",
      "     * @param hintKey   \u53c2\u6570\u540d\n",
      "     * @param hintValue \u53c2\u6570\u503c\n",
      "     */\n",
      "    @Override\n",
      "    public void setRenderingHint(RenderingHints.Key hintKey, Object hintValue) {\n",
      "        this.drawParam.fontRenderCtx = null;\n",
      "        this.drawParam.hints.put(hintKey, hintValue);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u7ed8\u5236\u5668\u53c2\u6570\u503c\uff08\u4e3a\u4e86\u517c\u5bb9\u63a5\u53e3\uff0c\u65e0\u5b9e\u9645\u7528\u9014\uff09\n",
      "     *\n",
      "     * @param hintKey \u53c2\u6570\u540d\n",
      "     * @return \u53ef\u80fd\u4e3a\u7a7a\n",
      "     */\n",
      "    @Override\n",
      "    public Object getRenderingHint(RenderingHints.Key hintKey) {\n",
      "        return this.drawParam.hints.get(hintKey);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u66ff\u6362\u7ed8\u5236\u5668\u53c2\u6570\uff08\u4e3a\u4e86\u517c\u5bb9\u63a5\u53e3\uff0c\u65e0\u5b9e\u9645\u7528\u9014\uff09\n",
      "     *\n",
      "     * @param hints \u65b0\u53c2\u6570\n",
      "     */\n",
      "    @Override\n",
      "    public void setRenderingHints(Map<?, ?> hints) {\n",
      "        this.drawParam.fontRenderCtx = null;\n",
      "        this.drawParam.hints.clear();\n",
      "        this.drawParam.hints.putAll(hints);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u6dfb\u52a0\u7ed8\u5236\u5668\u53c2\u6570\uff08\u4e3a\u4e86\u517c\u5bb9\u63a5\u53e3\uff0c\u65e0\u5b9e\u9645\u7528\u9014\uff09\n",
      "     *\n",
      "     * @param hints \u952e\u503c\u5bf9\n",
      "     */\n",
      "    @Override\n",
      "    public void addRenderingHints(Map<?, ?> hints) {\n",
      "        this.drawParam.fontRenderCtx = null;\n",
      "        this.drawParam.hints.putAll(hints);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u5f53\u524d\u7ed8\u5236\u5668\u53c2\u6570\u4fe1\u606f\uff08\u4e3a\u4e86\u517c\u5bb9\u63a5\u53e3\uff0c\u65e0\u5b9e\u9645\u7528\u9014\uff09\n",
      "     *\n",
      "     * @return \u53c2\u6570\u4fe1\u606f\uff08\u53ea\u8bfb\uff09\n",
      "     */\n",
      "    @Override\n",
      "    public RenderingHints getRenderingHints() {\n",
      "        return (RenderingHints) this.drawParam.hints.clone();\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u590d\u5236\u5f53\u524d\u7ed8\u5236\u4e0a\u4e0b\u6587\u4e3a\u65b0\u7684\u4e0a\u4e0b\u6587\n",
      "     *\n",
      "     * @return \u590d\u5236\u7684\u7ed8\u5236\u4e0a\u4e0b\u6587\u5bf9\u8c61\n",
      "     */\n",
      "    @Override\n",
      "    public Graphics create() {\n",
      "        return new OFDPageGraphics2D(this);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8fd4\u56de\u524d\u666f\u8272\n",
      "     *\n",
      "     * @return \u989c\u8272\uff0c\u53ef\u80fd\u4e3anull\n",
      "     */\n",
      "    @Override\n",
      "    public Color getColor() {\n",
      "        return this.drawParam.gForeground;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u524d\u666f\u8272\n",
      "     *\n",
      "     * @param c \u989c\u8272\n",
      "     */\n",
      "    @Override\n",
      "    public void setColor(Color c) {\n",
      "        if (c == null) {\n",
      "            return;\n",
      "        }\n",
      "        this.drawParam.setForeground(c);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * setPaintMode \u4e0d\u5b9e\u73b0\n",
      "     */\n",
      "    @Override\n",
      "    public void setPaintMode() {\n",
      "        // \u4e0d\u5b9e\u73b0\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * setXORMode \u4e0d\u5b9e\u73b0\n",
      "     *\n",
      "     * @param c1 the XOR alternation color\n",
      "     */\n",
      "    @Override\n",
      "    public void setXORMode(Color c1) {\n",
      "        // \u4e0d\u5b9e\u73b0\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u5f53\u524d\u5b57\u4f53\n",
      "     *\n",
      "     * @return \u5b57\u4f53\n",
      "     */\n",
      "    @Override\n",
      "    public Font getFont() {\n",
      "        return this.drawParam.font;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u7ed8\u56fe\u4e0a\u4e0b\u6587\u7684\u5b57\u4f53\n",
      "     *\n",
      "     * @param font \u5b57\u4f53\n",
      "     */\n",
      "    @Override\n",
      "    public void setFont(Font font) {\n",
      "        this.drawParam.font = font;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u7279\u5b9a\u5b57\u4f53\u7684\u5b57\u4f53\u89c4\u683c\n",
      "     *\n",
      "     * @param f \u7279\u5b9a\u5b57\u4f53\n",
      "     * @return \u5b57\u4f53\u89c4\u683c\n",
      "     */\n",
      "    @Override\n",
      "    public FontMetrics getFontMetrics(Font f) {\n",
      "        return fmg.getFontMetrics(f);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u88c1\u526a\u533a\u57df\u7684\u5916\u63a5\u77e9\u5f62\u5927\u5c0f\n",
      "     *\n",
      "     * @return \u88c1\u526a\u533a\u57df\u5916\u63a5\u77e9\u5f62\uff0c\u53ef\u80fd\u4e3anull\n",
      "     */\n",
      "    @Override\n",
      "    public Rectangle getClipBounds() {\n",
      "        Shape c = getClip();\n",
      "        if (c == null) {\n",
      "            return null;\n",
      "        } else {\n",
      "            return c.getBounds();\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u77e9\u5f62\u88c1\u526a\u533a\u57df\n",
      "     *\n",
      "     * @param x      \u88c1\u526a\u77e9\u5f62\u533a\u57dfX\u5750\u6807\n",
      "     * @param y      \u88c1\u526a\u77e9\u5f62\u533a\u57dfY\u5750\u6807\n",
      "     * @param width  \u88c1\u526a\u77e9\u5f62\u77e9\u5f62\u5bbd\u5ea6\n",
      "     * @param height \u88c1\u526a\u77e9\u5f62\u77e9\u5f62\u9ad8\u5ea6\n",
      "     */\n",
      "    @Override\n",
      "    public void clipRect(int x, int y, int width, int height) {\n",
      "        clip(new Rectangle2D.Double(x, y, width, height));\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u77e9\u5f62\u88c1\u526a\u533a\u57df\n",
      "     * <p>\n",
      "     * \u82e5\u5df2\u7ecf\u5b58\u5728\u88c1\u526a\u533a\u57df\u90a3\u4e48\u65e7\u7684\u88c1\u526a\u533a\u57df\u5c06\u4f1a\u88ab\u65b0\u7684\u88c1\u526a\u533a\u57df\u8986\u76d6\n",
      "     *\n",
      "     * @param x      \u88c1\u526a\u77e9\u5f62\u533a\u57dfX\u5750\u6807\n",
      "     * @param y      \u88c1\u526a\u77e9\u5f62\u533a\u57dfY\u5750\u6807\n",
      "     * @param width  \u88c1\u526a\u77e9\u5f62\u77e9\u5f62\u5bbd\u5ea6\n",
      "     * @param height \u88c1\u526a\u77e9\u5f62\u77e9\u5f62\u9ad8\u5ea6\n",
      "     */\n",
      "    @Override\n",
      "    public void setClip(int x, int y, int width, int height) {\n",
      "        setClip(new Rectangle2D.Double(x, y, width, height));\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u88c1\u526a\u533a\u57df\n",
      "     *\n",
      "     * @return \u88c1\u526a\u533a\u57df\uff0c\u53ef\u80fd\u4e3anull\n",
      "     */\n",
      "    @Override\n",
      "    public Shape getClip() {\n",
      "        return this.drawParam.clip;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u88c1\u526a\u533a\u57df\n",
      "     * <p>\n",
      "     * \u82e5\u5df2\u7ecf\u5b58\u5728\u88c1\u526a\u533a\u57df\uff0c\u90a3\u4e48\u65b0\u7684\u88c1\u526a\u533a\u57df\u4e0e\u65e7\u7684\u88c1\u526a\u533a\u57df\u53d6\u4ea4\u96c6\u3002\n",
      "     *\n",
      "     * @param s \u88c1\u526a\u533a\u57df\uff0c\u5982\u679c\u4e3a null \u5219\u6e05\u9664\u88c1\u526a\u533a\u57df\n",
      "     */\n",
      "    @Override\n",
      "    public void clip(Shape s) {\n",
      "        if (s == null) {\n",
      "            this.drawParam.clip = null;\n",
      "            return;\n",
      "        }\n",
      "\n",
      "        // \u5982\u679c\u4e0d\u662f\u5355\u4f4d\u77e9\u9635\u5219\u5bf9\u8def\u5f84\u8fdb\u884c\u53d8\u6362\n",
      "        if (!this.drawParam.ctm.isIdentity()) {\n",
      "            s = this.drawParam.ctm.createTransformedShape(s);\n",
      "        }\n",
      "\n",
      "        if (this.drawParam.clip == null) {\n",
      "            this.drawParam.clip = new Area(s);\n",
      "        } else {\n",
      "            this.drawParam.clip.intersect(new Area(s));\n",
      "        }\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u88c1\u526a\u533a\u57df\n",
      "     * <p>\n",
      "     * \u82e5\u5df2\u7ecf\u5b58\u5728\u88c1\u526a\u533a\u57df\u90a3\u4e48\u65e7\u7684\u88c1\u526a\u533a\u57df\u5c06\u4f1a\u88ab\u65b0\u7684\u88c1\u526a\u533a\u57df\u8986\u76d6\n",
      "     *\n",
      "     * @param s \u88c1\u526a\u533a\u57df\uff0c\u4e3anull\u65f6\u8868\u793a\u6e05\u7a7a\u88c1\u526a\u533a\u57df\n",
      "     */\n",
      "    @Override\n",
      "    public void setClip(Shape s) {\n",
      "        if (s == null) {\n",
      "            this.drawParam.clip = null;\n",
      "            return;\n",
      "        }\n",
      "\n",
      "        // \u5982\u679c\u4e0d\u662f\u5355\u4f4d\u77e9\u9635\u5219\u5bf9\u8def\u5f84\u8fdb\u884c\u53d8\u6362\n",
      "        if (!this.drawParam.ctm.isIdentity()) {\n",
      "            s = this.drawParam.ctm.createTransformedShape(s);\n",
      "        }\n",
      "        this.drawParam.clip = new Area(s);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u590d\u5236\u77e9\u5f62\u533a\u57df\n",
      "     *\n",
      "     * @param x      the <i>x</i> coordinate of the source rectangle.\n",
      "     * @param y      the <i>y</i> coordinate of the source rectangle.\n",
      "     * @param width  the width of the source rectangle.\n",
      "     * @param height the height of the source rectangle.\n",
      "     * @param dx     the horizontal distance to copy the pixels.\n",
      "     * @param dy     the vertical distance to copy the pixels.\n",
      "     */\n",
      "    @Override\n",
      "    public void copyArea(int x, int y, int width, int height, int dx, int dy) {\n",
      "        // \u4e0d\u4e88\u5b9e\u73b0\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u753b\u7ebf\n",
      "     *\n",
      "     * @param x1 \u8d77\u70b9X\n",
      "     * @param y1 \u8d77\u70b9Y\n",
      "     * @param x2 \u7ec8\u70b9X\n",
      "     * @param y2 \u7ec8\u70b9Y\n",
      "     */\n",
      "    @Override\n",
      "    public void drawLine(int x1, int y1, int x2, int y2) {\n",
      "        draw(new Line2D.Double(x1, y1, x2, y2));\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u586b\u5145\u77e9\u5f62\u533a\u57df\n",
      "     *\n",
      "     * @param x      \u77e9\u5f62\u533a\u57df\u5de6\u4e0a\u89d2\u5750\u6807X\n",
      "     * @param y      \u77e9\u5f62\u533a\u57df\u5de6\u4e0a\u89d2\u5750\u6807Y\n",
      "     * @param width  \u77e9\u5f62\u5bbd\u5ea6\n",
      "     * @param height \u77e9\u5f62\u9ad8\u5ea6\n",
      "     */\n",
      "    @Override\n",
      "    public void fillRect(int x, int y, int width, int height) {\n",
      "        fill(new Rectangle2D.Double(x, y, width, height));\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u63cf\u8fb9\u77e9\u5f62\n",
      "     *\n",
      "     * @param x      \u77e9\u5f62\u533a\u57df\u5de6\u4e0a\u89d2\u5750\u6807X\n",
      "     * @param y      \u77e9\u5f62\u533a\u57df\u5de6\u4e0a\u89d2\u5750\u6807Y\n",
      "     * @param width  \u77e9\u5f62\u5bbd\u5ea6\n",
      "     * @param height \u77e9\u5f62\u9ad8\u5ea6\n",
      "     */\n",
      "    @Override\n",
      "    public void drawRect(int x, int y, int width, int height) {\n",
      "        if ((width <= 0) || (height <= 0)) {\n",
      "            return;\n",
      "        }\n",
      "        draw(new Rectangle2D.Double(x, y, width, height));\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u4f7f\u7528\u80cc\u666f\u8272\u586b\u5145\u77e9\u5f62\u533a\u57df\n",
      "     *\n",
      "     * @param x      \u586b\u5145\u533a\u57df\u77e9\u5f62\u5de6\u4e0a\u89d2 X \u5750\u6807\n",
      "     * @param y      \u586b\u5145\u533a\u57df\u77e9\u5f62\u5de6\u4e0a\u89d2 X \u5750\u6807\n",
      "     * @param width  \u77e9\u5f62\u5bbd\u5ea6\n",
      "     * @param height \u77e9\u5f62\u9ad8\u5ea6\n",
      "     */\n",
      "    @Override\n",
      "    public void clearRect(int x, int y, int width, int height) {\n",
      "        if (this.drawParam.gBackground == null) {\n",
      "            return;\n",
      "        }\n",
      "        Paint saved = getPaint();\n",
      "        setPaint(this.drawParam.gBackground);\n",
      "        fillRect(x, y, width, height);\n",
      "        setPaint(saved);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u7ed8\u5236\u5706\u89d2\u77e9\u5f62\n",
      "     *\n",
      "     * @param x         \u77e9\u5f62\u5de6\u4e0a\u89d2X\u5750\u6807\n",
      "     * @param y         \u77e9\u5f62\u5de6\u4e0a\u89d2Y\u5750\u6807\n",
      "     * @param width     \u77e9\u5f62\u5bbd\u5ea6\n",
      "     * @param height    \u77e9\u5f62\u9ad8\u5ea6\n",
      "     * @param arcWidth  \u6c34\u5e73\u5706\u89d2\u534a\u5f84\n",
      "     * @param arcHeight \u5782\u76f4\u5706\u89d2\u534a\u5f84\n",
      "     */\n",
      "    @Override\n",
      "    public void drawRoundRect(int x, int y, int width, int height, int arcWidth, int arcHeight) {\n",
      "        draw(new RoundRectangle2D.Double(x, y, width, height, arcWidth, arcHeight));\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u586b\u5145\u5706\u89d2\u77e9\u5f62\n",
      "     *\n",
      "     * @param x         \u77e9\u5f62\u5de6\u4e0a\u89d2X\u5750\u6807\n",
      "     * @param y         \u77e9\u5f62\u5de6\u4e0a\u89d2Y\u5750\u6807\n",
      "     * @param width     \u77e9\u5f62\u5bbd\u5ea6\n",
      "     * @param height    \u77e9\u5f62\u9ad8\u5ea6\n",
      "     * @param arcWidth  \u6c34\u5e73\u5706\u89d2\u534a\u5f84\n",
      "     * @param arcHeight \u5782\u76f4\u5706\u89d2\u534a\u5f84\n",
      "     */\n",
      "    @Override\n",
      "    public void fillRoundRect(int x, int y, int width, int height, int arcWidth, int arcHeight) {\n",
      "        fill(new RoundRectangle2D.Double(x, y, width, height, arcWidth, arcHeight));\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u4f7f\u7528\u5f53\u524d\u989c\u8272\u5728\u77e9\u5f62\u533a\u57df\u5185\u63cf\u8fb9\u692d\u5706\u5f62\n",
      "     *\n",
      "     * @param x      \u77e9\u5f62\u533a\u57df\u5de6\u4e0a\u89d2 X \u5750\u6807\n",
      "     * @param y      \u77e9\u5f62\u533a\u57df\u5de6\u4e0a\u89d2 Y \u5750\u6807\n",
      "     * @param width  \u77e9\u5f62\u533a\u57df\u5bbd\u5ea6\n",
      "     * @param height \u77e9\u5f62\u533a\u57df\u9ad8\u5ea6\n",
      "     */\n",
      "    @Override\n",
      "    public void drawOval(int x, int y, int width, int height) {\n",
      "        draw(new Ellipse2D.Double(x, y, width, height));\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u4f7f\u7528\u5f53\u524d\u989c\u8272\u5728\u77e9\u5f62\u533a\u57df\u5185\u586b\u5145\u692d\u5706\u5f62\n",
      "     *\n",
      "     * @param x      \u77e9\u5f62\u533a\u57df\u5de6\u4e0a\u89d2 X \u5750\u6807\n",
      "     * @param y      \u77e9\u5f62\u533a\u57df\u5de6\u4e0a\u89d2 Y \u5750\u6807\n",
      "     * @param width  \u77e9\u5f62\u533a\u57df\u5bbd\u5ea6\n",
      "     * @param height \u77e9\u5f62\u533a\u57df\u9ad8\u5ea6\n",
      "     */\n",
      "    @Override\n",
      "    public void fillOval(int x, int y, int width, int height) {\n",
      "        fill(new Ellipse2D.Double(x, y, width, height));\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u5728\u77e9\u5f62\u533a\u57df\u5185\u7ed8\u5236\u5706\u5f27\n",
      "     * <p>\n",
      "     * \u6ce8\u610f\uff1a0\u5ea6\u4f4d\u4e8e\u65f6\u949f3\u70b9\u949f\u4f4d\u7f6e\uff0c\u6b63\u6570\u89d2\u5ea6\u8868\u793a\u987a\u65f6\u9488\u65cb\u8f6c\uff0c\u8d1f\u6570\u4e3a\u9006\u65f6\u9488\uff0c\u5706\u5f62\u4f4d\u4e8e\u77e9\u5f62\u4e2d\u5fc3\u3002\n",
      "     *\n",
      "     * @param x          \u77e9\u5f62\u533a\u57df\u5de6\u4e0a\u89d2 X \u5750\u6807\n",
      "     * @param y          \u77e9\u5f62\u533a\u57df\u5de6\u4e0a\u89d2 Y \u5750\u6807\n",
      "     * @param width      \u77e9\u5f62\u533a\u57df\u5bbd\u5ea6\n",
      "     * @param height     \u77e9\u5f62\u533a\u57df\u9ad8\u5ea6\n",
      "     * @param startAngle \u5706\u5f27\u5f00\u59cb\u89d2\u5ea6\n",
      "     * @param arcAngle   \u5706\u5f27\u7ed3\u675f\u89d2\u5ea6\n",
      "     */\n",
      "    @Override\n",
      "    public void drawArc(int x, int y, int width, int height, int startAngle, int arcAngle) {\n",
      "        draw(new Arc2D.Double(x, y, width, height, startAngle, arcAngle, Arc2D.OPEN));\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u5728\u77e9\u5f62\u533a\u57df\u5185\u586b\u5145\u6247\u5f62\n",
      "     * <p>\n",
      "     * \u6ce8\u610f\uff1a0\u5ea6\u4f4d\u4e8e\u65f6\u949f3\u70b9\u949f\u4f4d\u7f6e\uff0c\u6b63\u6570\u89d2\u5ea6\u8868\u793a\u987a\u65f6\u9488\u65cb\u8f6c\uff0c\u8d1f\u6570\u4e3a\u9006\u65f6\u9488\uff0c\u5706\u5f62\u4f4d\u4e8e\u77e9\u5f62\u4e2d\u5fc3\u3002\n",
      "     * <p>\n",
      "     * \u5706\u5f27\u8d77\u70b9\u548c\u7ec8\u70b9\u4e3a\u5706\u5fc3\n",
      "     *\n",
      "     * @param x          \u77e9\u5f62\u533a\u57df\u5de6\u4e0a\u89d2 X \u5750\u6807\n",
      "     * @param y          \u77e9\u5f62\u533a\u57df\u5de6\u4e0a\u89d2 Y \u5750\u6807\n",
      "     * @param width      \u77e9\u5f62\u533a\u57df\u5bbd\u5ea6\n",
      "     * @param height     \u77e9\u5f62\u533a\u57df\u9ad8\u5ea6\n",
      "     * @param startAngle \u5706\u5f27\u5f00\u59cb\u89d2\u5ea6\n",
      "     * @param arcAngle   \u5706\u5f27\u7ed3\u675f\u89d2\u5ea6\n",
      "     */\n",
      "    @Override\n",
      "    public void fillArc(int x, int y, int width, int height, int startAngle, int arcAngle) {\n",
      "        fill(new Arc2D.Double(x, y, width, height, startAngle, arcAngle, Arc2D.PIE));\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u7ed8\u5236\u6298\u7ebf\n",
      "     * <p>\n",
      "     * \u6ce8\u610f\u7ed8\u5236\u7684\u6298\u7ebf\u662f\u4e00\u4e2a\u4e0d\u95ed\u5408\u7684\u56fe\u5f62\n",
      "     *\n",
      "     * @param xPoints \u6298\u70b9 X\u5750\u6807 \u5e8f\u5217\n",
      "     * @param yPoints \u6298\u70b9 Y\u5750\u6807 \u5e8f\u5217\n",
      "     * @param nPoints \u6298\u70b9\u603b\u6570\n",
      "     */\n",
      "    @Override\n",
      "    public void drawPolyline(int[] xPoints, int[] yPoints, int nPoints) {\n",
      "        GeneralPath p = new GeneralPath();\n",
      "        p.moveTo(xPoints[0], yPoints[0]);\n",
      "        for (int i = 1; i < nPoints; i++) {\n",
      "            p.lineTo(xPoints[i], yPoints[i]);\n",
      "        }\n",
      "        draw(p);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u4f7f\u7528\u5f53\u524d\u989c\u8272\u548c\u63cf\u8fb9\u5c5e\u6027\u63cf\u8fb9\u591a\u8fb9\u5f62\n",
      "     *\n",
      "     * @param xPoints \u591a\u8fb9\u5f62 X\u5750\u6807 \u5e8f\u5217\n",
      "     * @param yPoints \u591a\u8fb9\u5f62 Y\u5750\u6807 \u5e8f\u5217\n",
      "     * @param nPoints \u591a\u8fb9\u5f62\u70b9\u6570\u91cf\n",
      "     */\n",
      "    @Override\n",
      "    public void drawPolygon(int[] xPoints, int[] yPoints, int nPoints) {\n",
      "        GeneralPath p = new GeneralPath();\n",
      "        p.moveTo(xPoints[0], yPoints[0]);\n",
      "        for (int i = 1; i < nPoints; i++) {\n",
      "            p.lineTo(xPoints[i], yPoints[i]);\n",
      "        }\n",
      "        p.closePath();\n",
      "        draw(p);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u4f7f\u7528\u5f53\u524d\u989c\u8272\u586b\u5145\u591a\u8fb9\u5f62\n",
      "     *\n",
      "     * @param xPoints \u591a\u8fb9\u5f62 X\u5750\u6807 \u5e8f\u5217\n",
      "     * @param yPoints \u591a\u8fb9\u5f62 Y\u5750\u6807 \u5e8f\u5217\n",
      "     * @param nPoints \u591a\u8fb9\u5f62\u70b9\u6570\u91cf\n",
      "     */\n",
      "    @Override\n",
      "    public void fillPolygon(int[] xPoints, int[] yPoints, int nPoints) {\n",
      "        GeneralPath p = new GeneralPath();\n",
      "        p.moveTo(xPoints[0], yPoints[0]);\n",
      "        for (int i = 1; i < nPoints; i++) {\n",
      "            p.lineTo(xPoints[i], yPoints[i]);\n",
      "        }\n",
      "        p.closePath();\n",
      "        fill(p);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u5e73\u79fb\u539f\u70b9\u5750\u6807\n",
      "     *\n",
      "     * @param x x\u65b9\u5411\u7684\u5e73\u79fb\u8ddd\u79bb\n",
      "     * @param y y\u65b9\u5411\u7684\u5e73\u79fb\u8ddd\u79bb\n",
      "     */\n",
      "    @Override\n",
      "    public void translate(int x, int y) {\n",
      "        translate(x, (double) y);\n",
      "        this.drawParam.ref = null;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u5e73\u79fb\u539f\u70b9\n",
      "     *\n",
      "     * @param tx x\u65b9\u5411\u7684\u5e73\u79fb\u8ddd\u79bb\n",
      "     * @param ty y\u65b9\u5411\u7684\u5e73\u79fb\u8ddd\u79bb\n",
      "     */\n",
      "    @Override\n",
      "    public void translate(double tx, double ty) {\n",
      "        this.drawParam.ctm.translate(tx, ty);\n",
      "        this.drawParam.ref = null;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u7ed5\u539f\u70b9\u65cb\u8f6c\u753b\u5e03\n",
      "     *\n",
      "     * @param theta \u65cb\u8f6c\u89d2\u5ea6\uff0c\u8ba1\u7b97\u65b9\u5f0f\u4e3a {@code theta = angle * Math.PI / 180 }\uff0c\u8d1f\u6570\u8868\u793a\u9006\u65f6\u9488\u3002\n",
      "     */\n",
      "    @Override\n",
      "    public void rotate(double theta) {\n",
      "        this.drawParam.ctm.rotate(theta);\n",
      "        this.drawParam.ref = null;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u7ed5\u6307\u5b9a\u70b9\u65cb\u8f6c\u753b\u5e03\n",
      "     * <p>\n",
      "     * \u7b49\u4ef7\u4e8e\n",
      "     * <pre>\n",
      "     *          translate(x, y);\n",
      "     *          rotate(theta);\n",
      "     *          translate(-x, -y);\n",
      "     * </pre>\n",
      "     *\n",
      "     * @param theta \u65cb\u8f6c\u89d2\u5ea6\uff0c\u8ba1\u7b97\u65b9\u5f0f\u4e3a {@code theta = angle * Math.PI / 180 }\uff0c\u8d1f\u6570\u8868\u793a\u9006\u65f6\u9488\u3002\n",
      "     * @param x     \u65cb\u8f6c\u70b9X\u5750\u6807\n",
      "     * @param y     \u65cb\u8f6c\u70b9Y\u5750\u6807\n",
      "     */\n",
      "    @Override\n",
      "    public void rotate(double theta, double x, double y) {\n",
      "        translate(x, y);\n",
      "        rotate(theta);\n",
      "        translate(-x, -y);\n",
      "        this.drawParam.ref = null;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u5750\u6807\u7f29\u653e\n",
      "     *\n",
      "     * @param sx \u7f29\u653e\u5f53\u524d\u7ed8\u56fe\u7684\u5bbd\u5ea6 (1=100%, 0.5=50%, 2=200%, \u4f9d\u6b21\u7c7b\u63a8)\n",
      "     * @param sy \u7f29\u653e\u5f53\u524d\u7ed8\u56fe\u7684\u9ad8\u5ea6 (1=100%, 0.5=50%, 2=200%, \u4f9d\u6b21\u7c7b\u63a8)\n",
      "     */\n",
      "    @Override\n",
      "    public void scale(double sx, double sy) {\n",
      "        this.drawParam.ctm.scale(sx, sy);\n",
      "        this.drawParam.ref = null;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u5207\u53d8\n",
      "     *\n",
      "     * @param shx X\u65b9\u5411\u5207\u53d8\u89d2\u5ea6\n",
      "     * @param shy Y\u65b9\u5411\u5207\u53d8\u89d2\u5ea6\n",
      "     */\n",
      "    @Override\n",
      "    public void shear(double shx, double shy) {\n",
      "        this.drawParam.ctm.shear(shx, shy);\n",
      "        this.drawParam.ref = null;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u56fe\u5f62\u53d8\u6362\n",
      "     *\n",
      "     * @param tx \u53d8\u6362\u77e9\u9635\n",
      "     */\n",
      "    @Override\n",
      "    public void transform(AffineTransform tx) {\n",
      "        if (tx == null) {\n",
      "            return;\n",
      "        }\n",
      "        this.drawParam.ctm.concatenate(tx);\n",
      "        this.drawParam.ref = null;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u53d8\u6362\u77e9\u9635\n",
      "     *\n",
      "     * @param tx \u53d8\u6362\u77e9\u9635\n",
      "     */\n",
      "    @Override\n",
      "    public void setTransform(AffineTransform tx) {\n",
      "        if (tx == null) {\n",
      "            tx = new AffineTransform();\n",
      "        }\n",
      "        this.drawParam.ctm = new AffineTransform(tx);\n",
      "        this.drawParam.ref = null;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8fd4\u56de\u5f53\u524d\u7684\u53d8\u6362\u77e9\u9635\n",
      "     *\n",
      "     * @return \u53d8\u6362\u77e9\u9635\n",
      "     */\n",
      "    @Override\n",
      "    public AffineTransform getTransform() {\n",
      "        return new AffineTransform(this.drawParam.ctm);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u7ed8\u5236\u53c2\u6570\n",
      "     *\n",
      "     * @return \u7ed8\u5236\u53c2\u6570\n",
      "     */\n",
      "    @Override\n",
      "    public Paint getPaint() {\n",
      "        return this.drawParam.gColor;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u50cf\u7d20\u5408\u6210\u6a21\u5f0f\n",
      "     * <p>\n",
      "     * \u8be5\u5c5e\u6027\u53ea\u662f\u4e3a\u4e86\u517c\u5bb9AWT\u63a5\u53e3\u4fdd\u7559\uff0c\u5e76\u65e0\u5b9e\u9645\u7528\u9014\u3002\n",
      "     *\n",
      "     * @return \u83b7\u53d6\u50cf\u7d20\u5408\u6210\u6a21\u5f0f\n",
      "     */\n",
      "    @Override\n",
      "    public Composite getComposite() {\n",
      "        return this.drawParam.composite;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u80cc\u666f\u989c\u8272\n",
      "     *\n",
      "     * @param color \u8be5\u989c\u8272\u5c06\u7528\u4e8e <code>clearRect</code> \u6e05\u7a7a\u533a\u57df\n",
      "     */\n",
      "    @Override\n",
      "    public void setBackground(Color color) {\n",
      "        this.drawParam.gBackground = color;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u80cc\u666f\u989c\u8272\n",
      "     *\n",
      "     * @return \u80cc\u666f\u989c\u8272\n",
      "     */\n",
      "    @Override\n",
      "    public Color getBackground() {\n",
      "        return this.drawParam.gBackground;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u63cf\u8fb9\u5c5e\u6027\n",
      "     *\n",
      "     * @return \u63cf\u8ff0\u5c5e\u6027 {@link BasicStroke}\n",
      "     */\n",
      "    @Override\n",
      "    public Stroke getStroke() {\n",
      "        return this.drawParam.gStroke;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u7ed8\u5236\u4e0a\u4e0b\u6587\u4e2d\u7684\u5b57\u4f53\u7ed8\u5236\u4e0a\u4e0b\u6587\n",
      "     *\n",
      "     * @return \u5b57\u4f53\u7ed8\u5236\u4e0a\u4e0b\u6587\n",
      "     */\n",
      "    @Override\n",
      "    public FontRenderContext getFontRenderContext() {\n",
      "        return this.drawParam.getFontRenderContext();\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u9500\u6bc1\u7ed8\u5236\u4e0a\u4e0b\u6587\n",
      "     */\n",
      "    @Override\n",
      "    public void dispose() {\n",
      "\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u6784\u9020\u88c1\u526a\u533a\u57df\n",
      "     * <p>\n",
      "     * \u5982\u679c\u56fe\u5f62\u5b8c\u5168\u5904\u4e8e\u88c1\u526a\u533a\u57df\u4e2d\uff0c\u90a3\u4e48\u4e0d\u88c1\u526a\n",
      "     *\n",
      "     * @param s      \u56fe\u5f62\u5bf9\u8c61\n",
      "     * @param objCTM \u5bf9\u8c61\u5f53\u524d\u7684\u53d8\u6362\u77e9\u9635\n",
      "     * @return \u88c1\u526a\u533a \u6216 null\uff08\u56fe\u5f62\u5b8c\u5168\u5904\u4e8e\u88c1\u526a\u533a\uff09\n",
      "     */\n",
      "    private Clips makeClip(Shape s, AffineTransform objCTM) {\n",
      "        Rectangle2D bounds = s.getBounds2D();\n",
      "\n",
      "        // \u7531\u4e8e double \u7684\u7279\u6027\u5b58\u5728\u7cbe\u5ea6\u8bef\u5dee\uff0c\u4e3a\u4e86\u51cf\u5c11\u7531\u7cbe\u5ea6\u8bef\u5dee\u9020\u6210 contains \u5224\u65ad\u9519\u8bef\n",
      "        // \u8fd9\u91cc\u5c06\u539f\u59cb\u77e9\u5f62\u7f29\u5c0f\u8f83\u5c0f\u7684\u504f\u5dee 10^-6\uff0c\u4fdd\u8bc1\u8fb9\u754c\u533a\u57df\u4e5f\u80fd\u8f83\u597d\u7684\u5904\u7406\u3002\n",
      "        double w = bounds.getWidth() - 0.000001;\n",
      "        double h = bounds.getHeight() - 0.000001;\n",
      "        bounds = new Rectangle2D.Double(\n",
      "                bounds.getX() + 0.000001,\n",
      "                bounds.getY() + 0.000001,\n",
      "                w < 0 ? 0 : w,\n",
      "                h < 0 ? 0 : h);\n",
      "        if (this.drawParam.clip.contains(bounds)){\n",
      "            // \u82e5\u56fe\u5f62\u5916\u8fb9\u6846\u90fd\u5904\u4e8e\u88c1\u526a\u533a\u57df\u5185\u90e8\uff0c\u90a3\u4e48\u5ffd\u7565\u88c1\u526a\u533a\u57df\n",
      "        }else {\n",
      "            Clips clips = new Clips();\n",
      "            org.ofdrw.core.pageDescription.clips.Area area = new org.ofdrw.core.pageDescription.clips.Area();\n",
      "            CT_Path clipObj = new CT_Path().setAbbreviatedData(OFDShapes.path(new GeneralPath(this.drawParam.clip)));\n",
      "            clipObj.setFill(true);\n",
      "            clipObj.setBoundary(this.size);\n",
      "            try {\n",
      "                // \u7531\u4e8e\u56fe\u5143\u5185\u7684\u88c1\u526a\u533a\u57df\u53d7\u5230\u56fe\u5143\u7684\u53d8\u6362\u77e9\u9635\u5f71\u54cd\uff0c\n",
      "                // \u800c\u88c1\u526a\u533a\u57df\u662f\u4f4d\u4e8e\u672a\u53d7\u5230\u53d8\u6362\u7684\u539f\u59cb\u753b\u5e03\u4e0a\u7684\u533a\u57df\uff0c\n",
      "                // \u56e0\u6b64\u5728\u56fe\u5143\u5185\u90e8\u7684\u88c1\u526a\u533a\u4e3a\u9700\u8981\u53e0\u52a0\u4e00\u4e2a\u56fe\u5143\u5185\u53d8\u6362\u7684\u9006\u53d8\u6362\uff0c\n",
      "                // \u624d\u53ef\u4ee5\u5b9e\u73b0\u5411\u5916\u90e8\u7a7a\u95f4\u7684\u6620\u5c04\u3002\n",
      "                AffineTransform inverse = objCTM.createInverse();\n",
      "                clipObj.setCTM(trans(inverse));\n",
      "                area.setClipObj(clipObj);\n",
      "                clips.addClip(new CT_Clip().addArea(area));\n",
      "                return clips;\n",
      "            } catch (NoninvertibleTransformException e) {\n",
      "                // \u521d\u7b49\u53d8\u6362\u90fd\u53ef\u9006\uff0c\u82e5\u975e\u521d\u7b49\u53d8\u6362\u90a3\u4e48\u5ffd\u7565\u88c1\u526a\u533a\n",
      "            }\n",
      "        }\n",
      "        return null;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u5c06\u53ef\u6e32\u67d3\u5bf9\u8c61\u8f6c\u6362\u4e3a\u7f13\u5b58\u56fe\u50cf\n",
      "     *\n",
      "     * @param img \u53ef\u6e32\u67d3\u5bf9\u8c61\n",
      "     * @return \u7f13\u5b58\u56fe\u50cf\n",
      "     */\n",
      "    private BufferedImage convert2Img(RenderedImage img) {\n",
      "        if (img instanceof BufferedImage) {\n",
      "            return (BufferedImage) img;\n",
      "        }\n",
      "        final int width = img.getWidth();\n",
      "        final int height = img.getHeight();\n",
      "        final ColorModel cm = img.getColorModel();\n",
      "        final boolean isAlphaPremultiplied = cm.isAlphaPremultiplied();\n",
      "\n",
      "        final WritableRaster raster = cm.createCompatibleWritableRaster(width, height);\n",
      "\n",
      "        final Hashtable<String, Object> properties = new Hashtable<>();\n",
      "        String[] keys = img.getPropertyNames();\n",
      "        if (keys != null) {\n",
      "            for (String key : keys) {\n",
      "                properties.put(key, img.getProperty(key));\n",
      "            }\n",
      "        }\n",
      "        final BufferedImage result = new BufferedImage(cm, raster, isAlphaPremultiplied, properties);\n",
      "        img.copyData(raster);\n",
      "        return result;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8f6c\u4e3aAWT\u53d8\u6362\u77e9\u9635 {@link AffineTransform} \u4e3a OFD \u7c7b\u578b\u53d8\u6362\u77e9\u9635{@link ST_Array}\n",
      "     *\n",
      "     * @param tx AWT\u53d8\u6362\u77e9\u9635\n",
      "     * @return OFD ST_Array\n",
      "     */\n",
      "    public ST_Array trans(AffineTransform tx) {\n",
      "          /*\n",
      "            m00 m10 0    a b 0\n",
      "            m01 m11 0  = c d 0\n",
      "            m02 m12 1    e f 1\n",
      "       */\n",
      "        return new ST_Array(tx.getScaleX(), tx.getShearY(), tx.getShearX(), tx.getScaleY(), tx.getTranslateX(), tx.getTranslateY());\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package org.ofdrw.graphics2d;\n",
      "\n",
      "import org.junit.jupiter.api.Test;\n",
      "import org.ofdrw.pkg.tool.ElemCup;\n",
      "\n",
      "import javax.imageio.ImageIO;\n",
      "import java.awt.*;\n",
      "import java.awt.geom.*;\n",
      "import java.awt.image.BufferedImage;\n",
      "import java.nio.file.Path;\n",
      "import java.nio.file.Paths;\n",
      "\n",
      "import static org.junit.jupiter.api.Assertions.assertEquals;\n",
      "\n",
      "class OFDPageGraphics2DTest {\n",
      "\n",
      "    /**\n",
      "     * \u8f74\u5411\u6e10\u53d8\u586b\u5145\n",
      "     */\n",
      "    @Test\n",
      "    void linearGradientPaint() throws Exception {\n",
      "        final Path dst = Paths.get(\"target/linearGradientPaint.ofd\");\n",
      "        try (OFDGraphicsDocument doc = new OFDGraphicsDocument(dst)) {\n",
      "            OFDPageGraphics2D g = doc.newPage(null);\n",
      "\n",
      "            Point2D start = new Point2D.Float(0, 0);\n",
      "            Point2D end = new Point2D.Float(50, 50);\n",
      "            float[] dist = {0.0f, 0.2f, 1.0f};\n",
      "            Color[] colors = {Color.RED, Color.WHITE, Color.BLUE};\n",
      "            LinearGradientPaint p =\n",
      "                    new LinearGradientPaint(start, end, dist, colors);\n",
      "            g.setPaint(p);\n",
      "            g.fillRect(0, 0, 50, 50);\n",
      "        }\n",
      "        System.out.println(\">> \" + dst.toAbsolutePath());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u77e9\u5f62\u63cf\u8fb9\n",
      "     */\n",
      "\n",
      "    @Test\n",
      "    void drawRoundRect() throws Exception {\n",
      "        final Path dst = Paths.get(\"target/drawRoundRect.ofd\");\n",
      "        try (OFDGraphicsDocument doc = new OFDGraphicsDocument(dst)) {\n",
      "            OFDPageGraphics2D g = doc.newPage(null);\n",
      "            g.drawRoundRect(10, 10, 20, 40, 5, 5);\n",
      "        }\n",
      "        System.out.println(\">> \" + dst.toAbsolutePath());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u586b\u5145\u5706\u89d2\u77e9\u5f62\n",
      "     */\n",
      "    @Test\n",
      "    void fillRoundRect() throws Exception {\n",
      "        final Path dst = Paths.get(\"target/fillRoundRect.ofd\");\n",
      "        try (OFDGraphicsDocument doc = new OFDGraphicsDocument(dst)) {\n",
      "            OFDPageGraphics2D g = doc.newPage(200, 200);\n",
      "            g.setColor(Color.red);\n",
      "            g.fillRoundRect(150, 50, 100, 100, 50, 25);\n",
      "        }\n",
      "        System.out.println(\">> \" + dst.toAbsolutePath());\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u81ea\u5b9a\u4e49\u56fe\u5f62\u548c\u63cf\u8fb9\u6837\u5f0f\n",
      "     */\n",
      "    @Test\n",
      "    void draw() throws Exception {\n",
      "        final Path dst = Paths.get(\"target/draw.ofd\");\n",
      "        try (OFDGraphicsDocument doc = new OFDGraphicsDocument(dst)) {\n",
      "            OFDPageGraphics2D g = doc.newPage(null);\n",
      "            int[] x2Points = {0, 100, 0, 100};\n",
      "            int[] y2Points = {0, 50, 50, 0};\n",
      "            GeneralPath polyline = new GeneralPath(GeneralPath.WIND_EVEN_ODD, x2Points.length);\n",
      "            polyline.moveTo(x2Points[0], y2Points[0]);\n",
      "            for (int index = 1; index < x2Points.length; index++) {\n",
      "                polyline.lineTo(x2Points[index], y2Points[index]);\n",
      "            }\n",
      "            polyline.closePath();\n",
      "\n",
      "            g.draw(polyline);\n",
      "        }\n",
      "        System.out.println(\">> \" + dst.toAbsolutePath());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u63cf\u8fb9\n",
      "     */\n",
      "    @Test\n",
      "    void drawStroke() throws Exception {\n",
      "        final Path dst = Paths.get(\"target/drawStroke.ofd\");\n",
      "        try (OFDGraphicsDocument doc = new OFDGraphicsDocument(dst)) {\n",
      "            OFDPageGraphics2D g2 = doc.newPage(500, 500);\n",
      "            final BasicStroke dashed =\n",
      "                    new BasicStroke(1.0f,\n",
      "                            BasicStroke.CAP_BUTT,\n",
      "                            BasicStroke.JOIN_MITER,\n",
      "                            10.0f, new float[]{10.0f}, 0.0f);\n",
      "            g2.setStroke(dashed);\n",
      "            g2.draw(new RoundRectangle2D.Double(10, 10, 400, 100, 10, 10));\n",
      "        }\n",
      "        System.out.println(\">> \" + dst.toAbsolutePath());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u5706\u5f27\u586b\u5145\n",
      "     */\n",
      "    @Test\n",
      "    void drawArc() throws Exception {\n",
      "        final Path dst = Paths.get(\"target/drawArc.ofd\");\n",
      "        try (OFDGraphicsDocument doc = new OFDGraphicsDocument(dst)) {\n",
      "            OFDPageGraphics2D g = doc.newPage(500, 500);\n",
      "            g.setPaint(Color.RED);\n",
      "            g.fillArc(20, 20, 200, 200, 200, 200);\n",
      "        }\n",
      "        System.out.println(\">> \" + dst.toAbsolutePath());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u7ed8\u5236\u5706\u5f27\n",
      "     */\n",
      "    @Test\n",
      "    void fillArc() throws Exception {\n",
      "        final Path dst = Paths.get(\"target/fillArc.ofd\");\n",
      "        try (OFDGraphicsDocument doc = new OFDGraphicsDocument(dst)) {\n",
      "            OFDPageGraphics2D g = doc.newPage(null);\n",
      "            g.setPaint(Color.RED);\n",
      "            g.fillArc(10, 10, 200, 200, 50, 50);\n",
      "        }\n",
      "        System.out.println(\">> \" + dst.toAbsolutePath());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u6e05\u7a7a\u6307\u5b9a\u533a\u57df\n",
      "     */\n",
      "    @Test\n",
      "    void clearRect() throws Exception {\n",
      "        final Path dst = Paths.get(\"target/clearRect.ofd\");\n",
      "        try (OFDGraphicsDocument doc = new OFDGraphicsDocument(dst)) {\n",
      "            OFDPageGraphics2D g = doc.newPage(null);\n",
      "            g.setPaint(Color.RED);\n",
      "            g.fillArc(0, 0, 100, 100, 0, 360);\n",
      "            g.clearRect(30, 30, 10, 10);\n",
      "        }\n",
      "        System.out.println(\">> \" + dst.toAbsolutePath());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u586b\u5145\u692d\u5706\n",
      "     */\n",
      "    @Test\n",
      "    void fillOval() throws Exception {\n",
      "        final Path dst = Paths.get(\"target/fillOval.ofd\");\n",
      "        try (OFDGraphicsDocument doc = new OFDGraphicsDocument(dst)) {\n",
      "            OFDPageGraphics2D g = doc.newPage(null);\n",
      "            g.setPaint(Color.RED);\n",
      "            g.fillOval(25, 25, 120, 60);\n",
      "        }\n",
      "        System.out.println(\">> \" + dst.toAbsolutePath());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u63cf\u8fb9\u692d\u5706\n",
      "     */\n",
      "    @Test\n",
      "    void drawOval() throws Exception {\n",
      "        final Path dst = Paths.get(\"target/drawOval.ofd\");\n",
      "        try (OFDGraphicsDocument doc = new OFDGraphicsDocument(dst)) {\n",
      "            OFDPageGraphics2D g = doc.newPage(null);\n",
      "            g.setPaint(Color.RED);\n",
      "            g.drawOval(25, 25, 120, 60);\n",
      "        }\n",
      "        System.out.println(\">> \" + dst.toAbsolutePath());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u6298\u7ebf\n",
      "     */\n",
      "    @Test\n",
      "    void drawPolyline() throws Exception {\n",
      "        final Path dst = Paths.get(\"target/drawPolyline.ofd\");\n",
      "        try (OFDGraphicsDocument doc = new OFDGraphicsDocument(dst)) {\n",
      "            OFDPageGraphics2D g = doc.newPage(null);\n",
      "            g.setPaint(Color.RED);\n",
      "            int[] xs = {25, 75, 125, 85, 125, 75, 25, 65};\n",
      "            int[] ys = {50, 90, 50, 100, 150, 110, 150, 100};\n",
      "            g.drawPolyline(xs, ys, 8);\n",
      "        }\n",
      "        System.out.println(\">> \" + dst.toAbsolutePath());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u81ea\u5b9a\u4e49\u591a\u8fb9\u5f62\u63cf\u8fb9\n",
      "     */\n",
      "    @Test\n",
      "    void drawPolygon() throws Exception {\n",
      "        final Path dst = Paths.get(\"target/drawPolygon.ofd\");\n",
      "        try (OFDGraphicsDocument doc = new OFDGraphicsDocument(dst)) {\n",
      "            OFDPageGraphics2D g = doc.newPage(null);\n",
      "            g.setPaint(Color.RED);\n",
      "            int[] xpoints = {25, 145, 25, 145, 25};\n",
      "            int[] ypoints = {25, 25, 145, 145, 25};\n",
      "            int npoints = 5;\n",
      "\n",
      "            g.drawPolygon(xpoints, ypoints, npoints);\n",
      "        }\n",
      "        System.out.println(\">> \" + dst.toAbsolutePath());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u81ea\u5b9a\u4e49\u591a\u8fb9\u5f62\u586b\u5145\n",
      "     */\n",
      "    @Test\n",
      "    void fillPolygon() throws Exception {\n",
      "        final Path dst = Paths.get(\"target/fillPolygon.ofd\");\n",
      "        try (OFDGraphicsDocument doc = new OFDGraphicsDocument(dst)) {\n",
      "            OFDPageGraphics2D g = doc.newPage(null);\n",
      "            g.setPaint(Color.RED);\n",
      "            int[] xpoints = {25, 145, 25, 145, 25};\n",
      "            int[] ypoints = {25, 25, 145, 145, 25};\n",
      "            int npoints = 5;\n",
      "\n",
      "            g.fillPolygon(xpoints, ypoints, npoints);\n",
      "        }\n",
      "        System.out.println(\">> \" + dst.toAbsolutePath());\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    void drawImage() throws Exception {\n",
      "        final Path dst = Paths.get(\"target/drawImage.ofd\");\n",
      "        try (OFDGraphicsDocument doc = new OFDGraphicsDocument(dst)) {\n",
      "            OFDPageGraphics2D g = doc.newPage(500, 500);\n",
      "            Path file = Paths.get(\"src/test/resources\", \"eg_tulip.jpg\");\n",
      "            BufferedImage img1 = ImageIO.read(file.toFile());\n",
      "\n",
      "            int width = img1.getWidth(null);\n",
      "            int height = img1.getHeight(null);\n",
      "            g.drawImage(img1, 10, 10, width, height, null);\n",
      "        }\n",
      "        System.out.println(\">> \" + dst.toAbsolutePath());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void drawImage2() throws Exception {\n",
      "        final Path dst = Paths.get(\"target/drawImage2.ofd\");\n",
      "        try (OFDGraphicsDocument doc = new OFDGraphicsDocument(dst)) {\n",
      "            OFDPageGraphics2D g = doc.newPage(500, 500);\n",
      "            Path file = Paths.get(\"src/test/resources\", \"eg_tulip.jpg\");\n",
      "            BufferedImage img1 = ImageIO.read(file.toFile());\n",
      "\n",
      "            g.drawImage(img1, 10, 10, null);\n",
      "        }\n",
      "        System.out.println(\">> \" + dst.toAbsolutePath());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void drawImageAffineTransform() throws Exception {\n",
      "        final Path dst = Paths.get(\"target/drawImageAffineTransform.ofd\");\n",
      "        try (OFDGraphicsDocument doc = new OFDGraphicsDocument(dst)) {\n",
      "            OFDPageGraphics2D g = doc.newPage(500, 500);\n",
      "            Path file = Paths.get(\"src/test/resources\", \"eg_tulip.jpg\");\n",
      "            BufferedImage img1 = ImageIO.read(file.toFile());\n",
      "\n",
      "            g.drawImage(img1, null, 10, 10);\n",
      "            g.setPaint(Color.RED);\n",
      "            g.fillRect(0, 0, 30, 30);\n",
      "        }\n",
      "        System.out.println(\">> \" + dst.toAbsolutePath());\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u80cc\u666f\u989c\u8272\u586b\u5145\u900f\u660e\u56fe\u7247\n",
      "     */\n",
      "    @Test\n",
      "    void drawImageBackground() throws Exception {\n",
      "        final Path dst = Paths.get(\"target/drawImageBackground.ofd\");\n",
      "        try (OFDGraphicsDocument doc = new OFDGraphicsDocument(dst)) {\n",
      "            OFDPageGraphics2D g = doc.newPage(500, 500);\n",
      "            Path file = Paths.get(\"src/test/resources\", \"empty.png\");\n",
      "            BufferedImage img1 = ImageIO.read(file.toFile());\n",
      "\n",
      "            g.drawImage(img1, 10, 10, 400, 400, Color.red, null);\n",
      "        }\n",
      "        System.out.println(\">> \" + dst.toAbsolutePath());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void drawImageBackground2() throws Exception {\n",
      "        final Path dst = Paths.get(\"target/drawImageBackground2.ofd\");\n",
      "        try (OFDGraphicsDocument doc = new OFDGraphicsDocument(dst)) {\n",
      "            OFDPageGraphics2D g = doc.newPage(500, 500);\n",
      "            Path file = Paths.get(\"src/test/resources\", \"empty.png\");\n",
      "            BufferedImage img1 = ImageIO.read(file.toFile());\n",
      "\n",
      "            g.drawImage(img1, 10, 10, Color.red, null);\n",
      "        }\n",
      "        System.out.println(\">> \" + dst.toAbsolutePath());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u7ed8\u5236\u90e8\u5206\u56fe\u7247\u5230\u9875\u9762\n",
      "     */\n",
      "    @Test\n",
      "    void drawImagePiece() throws Exception {\n",
      "        final Path dst = Paths.get(\"target/drawImagePiece.ofd\");\n",
      "        try (OFDGraphicsDocument doc = new OFDGraphicsDocument(dst)) {\n",
      "            OFDPageGraphics2D g = doc.newPage(500, 500);\n",
      "            Path file = Paths.get(\"src/test/resources\", \"empty.png\");\n",
      "            BufferedImage img1 = ImageIO.read(file.toFile());\n",
      "\n",
      "            g.drawImage(img1, 0, 0, 200, 200, 200, 200, 400, 400, null);\n",
      "        }\n",
      "        System.out.println(\">> \" + dst.toAbsolutePath());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void drawImagePieceColor() throws Exception {\n",
      "        final Path dst = Paths.get(\"target/drawImagePieceColor.ofd\");\n",
      "        try (OFDGraphicsDocument doc = new OFDGraphicsDocument(dst)) {\n",
      "            OFDPageGraphics2D g = doc.newPage(500, 500);\n",
      "            Path file = Paths.get(\"src/test/resources\", \"empty.png\");\n",
      "            BufferedImage img1 = ImageIO.read(file.toFile());\n",
      "\n",
      "            g.drawImage(img1, 0, 0, 200, 200, 200, 200, 400, 400, Color.RED, null);\n",
      "        }\n",
      "        System.out.println(\">> \" + dst.toAbsolutePath());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u5e73\u79fb\n",
      "     */\n",
      "    @Test\n",
      "    void translate() throws Exception {\n",
      "        final Path dst = Paths.get(\"target/translate.ofd\");\n",
      "        try (OFDGraphicsDocument doc = new OFDGraphicsDocument(dst)) {\n",
      "            OFDPageGraphics2D g = doc.newPage(200, 200);\n",
      "            g.translate(50, 50);\n",
      "            g.setColor(Color.red);\n",
      "            g.fillRect(0, 0, 20, 20);\n",
      "        }\n",
      "        System.out.println(\">> \" + dst.toAbsolutePath());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u65cb\u8f6c\n",
      "     */\n",
      "    @Test\n",
      "    void rotate() throws Exception {\n",
      "        final Path dst = Paths.get(\"target/rotate.ofd\");\n",
      "        try (OFDGraphicsDocument doc = new OFDGraphicsDocument(dst)) {\n",
      "            OFDPageGraphics2D g = doc.newPage(200, 200);\n",
      "            g.setColor(Color.red);\n",
      "            g.rotate(45 * Math.PI / 180d);\n",
      "            g.fillRect(0, 0, 20, 20);\n",
      "        }\n",
      "        System.out.println(\">> \" + dst.toAbsolutePath());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u9976\u67d0\u70b9\u65cb\u8f6c\u753b\u5e03\n",
      "     */\n",
      "    @Test\n",
      "    void rotate2() throws Exception {\n",
      "        final Path dst = Paths.get(\"target/rotate2.ofd\");\n",
      "        try (OFDGraphicsDocument doc = new OFDGraphicsDocument(dst)) {\n",
      "            OFDPageGraphics2D g = doc.newPage(200, 200);\n",
      "            g.setColor(Color.red);\n",
      "            g.rotate(45 * Math.PI / 180d, 100, 100);\n",
      "            g.fillRect(100, 100, 50, 50);\n",
      "        }\n",
      "        System.out.println(\">> \" + dst.toAbsolutePath());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void translateRotate() throws Exception {\n",
      "        final Path dst = Paths.get(\"target/translateRotate.ofd\");\n",
      "        try (OFDGraphicsDocument doc = new OFDGraphicsDocument(dst)) {\n",
      "            OFDPageGraphics2D g = doc.newPage(200, 200);\n",
      "            g.setColor(Color.red);\n",
      "            g.translate(100, 100);\n",
      "            g.rotate(45 * Math.PI / 180d);\n",
      "            g.fillRect(0, 0, 50, 50);\n",
      "        }\n",
      "        System.out.println(\">> \" + dst.toAbsolutePath());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u7f29\u653e\n",
      "     */\n",
      "    @Test\n",
      "    void scale() throws Exception {\n",
      "        final Path dst = Paths.get(\"target/scale.ofd\");\n",
      "        try (OFDGraphicsDocument doc = new OFDGraphicsDocument(dst)) {\n",
      "            OFDPageGraphics2D g = doc.newPage(200, 200);\n",
      "            g.setColor(Color.red);\n",
      "            g.scale(2, 2);\n",
      "            g.drawRect(0, 0, 10, 10);\n",
      "            g.scale(2, 2);\n",
      "            g.drawRect(0, 0, 10, 10);\n",
      "        }\n",
      "        System.out.println(\">> \" + dst.toAbsolutePath());\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u5207\u53d8\n",
      "     */\n",
      "    @Test\n",
      "    void shear() throws Exception {\n",
      "        final Path dst = Paths.get(\"target/shear.ofd\");\n",
      "        try (OFDGraphicsDocument doc = new OFDGraphicsDocument(dst)) {\n",
      "            OFDPageGraphics2D g = doc.newPage(200, 200);\n",
      "            g.setColor(Color.red);\n",
      "            g.shear(10 * Math.PI / 180d, 10 * Math.PI / 180d);\n",
      "            g.fillRect(0, 0, 50, 50);\n",
      "        }\n",
      "        System.out.println(\">> \" + dst.toAbsolutePath());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u4f46\u524d\u53d8\u6362\u77e9\u9635\n",
      "     */\n",
      "    @Test\n",
      "    void getTransform() throws Exception {\n",
      "        final Path dst = Paths.get(\"target/getTransform.ofd\");\n",
      "        try (OFDGraphicsDocument doc = new OFDGraphicsDocument(dst)) {\n",
      "            OFDPageGraphics2D g = doc.newPage(200, 200);\n",
      "            g.setColor(Color.RED);\n",
      "\n",
      "            g.shear(10 * Math.PI / 180d, 10 * Math.PI / 180d);\n",
      "            g.translate(100, 100);\n",
      "            g.rotate(45 * Math.PI / 180d);\n",
      "            g.fillRect(0, 0, 50, 50);\n",
      "\n",
      "            AffineTransform tx = g.getTransform();\n",
      "            String actual = String.format(\"%.2f %.2f %.2f %.2f %.2f %.2f\",\n",
      "                    tx.getScaleX(), tx.getShearY(),\n",
      "                    tx.getShearX(), tx.getScaleY(),\n",
      "                    tx.getTranslateX(), tx.getTranslateY()\n",
      "            );\n",
      "            String expect = \"0.83 0.83 -0.58 0.58 117.45 117.45\";\n",
      "            System.out.println(actual);\n",
      "            assertEquals(expect, actual);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u5e94\u7528\u53d8\u6362\u77e9\u9635\n",
      "     */\n",
      "    @Test\n",
      "    void transform() throws Exception {\n",
      "        final Path dst = Paths.get(\"target/transform.ofd\");\n",
      "        try (OFDGraphicsDocument doc = new OFDGraphicsDocument(dst)) {\n",
      "            OFDPageGraphics2D g = doc.newPage(200, 200);\n",
      "\n",
      "            g.translate(10, 10);\n",
      "            g.transform(new AffineTransform(\n",
      "                    0.83, 0.83,\n",
      "                    -0.58, 0.58,\n",
      "                    117.45, 117.45));\n",
      "            AffineTransform tx = g.getTransform();\n",
      "            String actual = String.format(\"%.2f %.2f %.2f %.2f %.2f %.2f\",\n",
      "                    tx.getScaleX(), tx.getShearY(),\n",
      "                    tx.getShearX(), tx.getScaleY(),\n",
      "                    tx.getTranslateX(), tx.getTranslateY()\n",
      "            );\n",
      "            String expect = \"0.83 0.83 -0.58 0.58 127.45 127.45\";\n",
      "            System.out.println(actual);\n",
      "            assertEquals(expect, actual);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u88c1\u526a\u533a\u57df\n",
      "     */\n",
      "    @Test\n",
      "    void setClip() throws Exception {\n",
      "        final Path dst = Paths.get(\"target/clip.ofd\");\n",
      "        try (OFDGraphicsDocument doc = new OFDGraphicsDocument(dst)) {\n",
      "            OFDPageGraphics2D g = doc.newPage(500, 500);\n",
      "//            Path file = Paths.get(\"src/test/resources\", \"eg_tulip.jpg\");\n",
      "//            g.translate(100,100);\n",
      "            g.setPaint(Color.RED);\n",
      "            g.translate(100, 100);\n",
      "            g.setClip(new Rectangle2D.Double(0, 0, 200, 200));\n",
      "            g.fillArc(0, 0, 400, 400, 0, 360);\n",
      "        }\n",
      "        System.out.println(\">> \" + dst.toAbsolutePath());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u6587\u5b57\u7ed8\u5236\u6d4b\u8bd5\n",
      "     */\n",
      "    @Test\n",
      "    void drawString() throws Exception {\n",
      "        final Path dst = Paths.get(\"target/drawString.ofd\");\n",
      "        try (OFDGraphicsDocument doc = new OFDGraphicsDocument(dst)) {\n",
      "            OFDPageGraphics2D g = doc.newPage(500, 500);\n",
      "\n",
      "            g.setPaint(Color.RED);\n",
      "            g.drawString(\"\u4f60\u597dOFD R&W Hello \", 40, 120);\n",
      "        }\n",
      "        System.out.println(\">> \" + dst.toAbsolutePath());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u5f84\u5411\u6e10\u53d8\u6d4b\u8bd5\n",
      "     */\n",
      "    @Test\n",
      "    void setPaintRadialGradientPaint() throws Exception {\n",
      "        final Path dst = Paths.get(\"target/setPaintRadialGradientPaint.ofd\");\n",
      "        try (OFDGraphicsDocument doc = new OFDGraphicsDocument(dst)) {\n",
      "            OFDPageGraphics2D g = doc.newPage(500, 500);\n",
      "\n",
      "            Color[] colors = {Color.red, Color.green, Color.blue};\n",
      "            float[] dist = {0.0f, 0.5f, 1.0f};\n",
      "            Point2D center = new Point2D.Float(0.5f * 500, 0.5f * 500);\n",
      "\n",
      "            RadialGradientPaint p =\n",
      "                    new RadialGradientPaint(center, 0.5f * 500, dist, colors);\n",
      "            g.setPaint(p);\n",
      "            g.fillRect(0, 0, 500, 500);\n",
      "        }\n",
      "        System.out.println(\">> \" + dst.toAbsolutePath());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u88c1\u526a\u533a\u57df\u7684\u53d8\u6362 \u4e0e \u56fe\u5143\u53d8\u6362\n",
      "     */\n",
      "    @Test\n",
      "    void clipAndCTM() throws Exception {\n",
      "        ElemCup.ENABLE_DEBUG_PRINT = true;\n",
      "        final Path dst = Paths.get(\"target/clipAndCTM.ofd\");\n",
      "        try (OFDGraphicsDocument doc = new OFDGraphicsDocument(dst)) {\n",
      "            OFDPageGraphics2D g = doc.newPage(500, 500);\n",
      "\n",
      "\n",
      "            g.setColor(Color.WHITE);\n",
      "            g.fillRect(0, 0, 500, 500);\n",
      "\n",
      "            g.setColor(Color.RED);\n",
      "            g.translate(100, 100);\n",
      "            g.clipRect(0, 0, 100, 100);\n",
      "            g.fillRect(0, 0, 100, 100);\n",
      "\n",
      "            g.rotate(45 * Math.PI / 180d);\n",
      "            g.setColor(Color.YELLOW);\n",
      "            g.fillRect(0, 0, 100, 100);\n",
      "        }\n",
      "        System.out.println(\">> \" + dst.toAbsolutePath());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u88c1\u526a\u533a\u57df\u7684\u53d8\u6362 \u4e0e \u56fe\u5143\u53d8\u6362\n",
      "     */\n",
      "    @Test\n",
      "    void clips() throws Exception {\n",
      "        ElemCup.ENABLE_DEBUG_PRINT = true;\n",
      "        final Path dst = Paths.get(\"target/clips.ofd\");\n",
      "        try (OFDGraphicsDocument doc = new OFDGraphicsDocument(dst)) {\n",
      "            OFDPageGraphics2D g = doc.newPage(500, 500);\n",
      "\n",
      "            g.setColor(Color.RED);\n",
      "            g.translate(100, 100);\n",
      "            g.fillRect(0, 0, 100, 100);\n",
      "            g.clipRect(0, 0, 100, 100);\n",
      "\n",
      "            g.setColor(Color.BLUE);\n",
      "            g.translate(-50, -50);\n",
      "            g.fillRect(0, 0, 100, 100);\n",
      "        }\n",
      "        System.out.println(\">> \" + dst.toAbsolutePath());\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u88c1\u526a\u533a\u57df\u7684\u53d8\u6362 \u4e0e \u56fe\u5143\u53d8\u6362\n",
      "     */\n",
      "    @Test\n",
      "    void complexCTMSetAndReset() throws Exception {\n",
      "        ElemCup.ENABLE_DEBUG_PRINT = true;\n",
      "        final Path dst = Paths.get(\"target/complexCTMSetAndReset.ofd\");\n",
      "        try (OFDGraphicsDocument doc = new OFDGraphicsDocument(dst)) {\n",
      "            OFDPageGraphics2D g = doc.newPage(500, 500);\n",
      "\n",
      "            g.rotate(90 * Math.PI / 180d);\n",
      "            g.translate(100, 0);\n",
      "            g.setColor(Color.RED);\n",
      "            g.fillRect(0, -50, 100, 50);\n",
      "\n",
      "            g.setTransform(new AffineTransform());\n",
      "            g.translate(100, 0);\n",
      "            g.rotate(90 * Math.PI / 180d);\n",
      "            g.setColor(Color.BLUE);\n",
      "            g.fillRect(0, -50, 100, 50);\n",
      "        }\n",
      "        System.out.println(\">> \" + dst.toAbsolutePath());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void drawImageWithCTM() throws Exception {\n",
      "        final Path dst = Paths.get(\"target/drawImageWithCTM.ofd\");\n",
      "        try (OFDGraphicsDocument doc = new OFDGraphicsDocument(dst)) {\n",
      "            OFDPageGraphics2D g = doc.newPage(500, 500);\n",
      "            Path file = Paths.get(\"src/test/resources\", \"eg_tulip.jpg\");\n",
      "            BufferedImage img1 = ImageIO.read(file.toFile());\n",
      "            g.translate(400, 0);\n",
      "            g.rotate(90 * Math.PI / 180d);\n",
      "            g.drawImage(img1, 10, 10, null);\n",
      "        }\n",
      "        System.out.println(\">> \" + dst.toAbsolutePath());\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    void clipImg() throws Exception {\n",
      "        ElemCup.ENABLE_DEBUG_PRINT = true;\n",
      "        final Path dst = Paths.get(\"target/clipImg.ofd\");\n",
      "        final Path file = Paths.get(\"src/test/resources\", \"eg_tulip.jpg\");\n",
      "        BufferedImage img1 = ImageIO.read(file.toFile());\n",
      "\n",
      "        try (OFDGraphicsDocument doc = new OFDGraphicsDocument(dst)) {\n",
      "            OFDPageGraphics2D g = doc.newPage(500, 500);\n",
      "            g.setClip(100, 100, 100, 100);\n",
      "            g.rotate(10 * Math.PI / 180d);\n",
      "            g.drawImage(img1, 100, 100, null);\n",
      "        }\n",
      "        System.out.println(\">> \" + dst.toAbsolutePath());\n",
      "    }\n",
      "\n",
      "\n",
      "\n",
      "    @Test\n",
      "    void clip() throws Exception {\n",
      "        ElemCup.ENABLE_DEBUG_PRINT = true;\n",
      "        final Path dst = Paths.get(\"target/clipLarge.ofd\");\n",
      "\n",
      "        try (OFDGraphicsDocument doc = new OFDGraphicsDocument(dst)) {\n",
      "            OFDPageGraphics2D g = doc.newPage(500, 500);\n",
      "\n",
      "            // \u5904\u4e8e\u88c1\u526a\u533a\u5185\u90e8\n",
      "            g.setClip(0, 0, 300,300);\n",
      "            g.setColor(Color.BLUE);\n",
      "            g.fillRect(10, 10, 50, 50);\n",
      "\n",
      "            // \u4e0e\u88c1\u526a\u533a\u76f8\u4ea4\n",
      "            g.setClip(null);\n",
      "            g.setClip(0, 100, 100,100);\n",
      "            g.setColor(Color.RED);\n",
      "            g.fillRect(50, 150, 200, 200);\n",
      "\n",
      "            // \u4e0e\u88c1\u526a\u533a\u4e0d\u76f8\u4ea4\n",
      "            g.setClip(null);\n",
      "            g.setClip(0, 300, 100,100);\n",
      "            g.setColor(Color.RED);\n",
      "            g.fillRect(400, 400, 50, 50);\n",
      "\n",
      "        }\n",
      "        System.out.println(\">> \" + dst.toAbsolutePath());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void intersects() {\n",
      "        Rectangle2D.Double large = new Rectangle2D.Double(0, 0, 200, 200);\n",
      "        Rectangle2D.Double small = new Rectangle2D.Double(50, 50, 50, 50);\n",
      "        Rectangle2D.Double a2 = new Rectangle2D.Double(100, 0, 200, 200);\n",
      "        Rectangle2D.Double remote = new Rectangle2D.Double(1000, 1000, 10, 10);\n",
      "\n",
      "//        System.out.println(large.intersects(remote));\n",
      "        System.out.println(large.intersects(remote));\n",
      "//        System.out.println(large.intersects(small));\n",
      "//        System.out.println(large.contains(small));\n",
      "//        System.out.println(large.intersects(a2));\n",
      "    }\n",
      "\n",
      "}"
    ],
    "method_lines_dic": {
      "OFDPageGraphics2D::::draw(java.awt.Shape)": [
        154,
        187
      ],
      "OFDPageGraphics2D::::drawString(java.lang.String,int,int)": [
        203,
        207
      ],
      "OFDPageGraphics2D::::drawString(java.lang.String,float,float)": [
        222,
        226
      ],
      "OFDPageGraphics2D::::drawString(java.text.AttributedCharacterIterator,int,int)": [
        239,
        243
      ],
      "OFDPageGraphics2D::::drawString(java.text.AttributedCharacterIterator,float,float)": [
        256,
        260
      ],
      "OFDPageGraphics2D::::drawGlyphVector(java.awt.font.GlyphVector,float,float)": [
        273,
        277
      ],
      "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)": [
        290,
        304
      ],
      "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)": [
        317,
        360
      ],
      "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,java.awt.Color,java.awt.image.ImageObserver)": [
        374,
        388
      ],
      "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.Color,java.awt.image.ImageObserver)": [
        404,
        411
      ],
      "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.image.ImageObserver)": [
        428,
        436
      ],
      "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.Color,java.awt.image.ImageObserver)": [
        456,
        463
      ],
      "OFDPageGraphics2D::::drawImage(java.awt.Image,java.awt.geom.AffineTransform,java.awt.image.ImageObserver)": [
        474,
        485
      ],
      "OFDPageGraphics2D::::drawImage(java.awt.image.BufferedImage,java.awt.image.BufferedImageOp,int,int)": [
        501,
        508
      ],
      "OFDPageGraphics2D::::drawRenderedImage(java.awt.image.RenderedImage,java.awt.geom.AffineTransform)": [
        516,
        523
      ],
      "OFDPageGraphics2D::::drawRenderableImage(java.awt.image.renderable.RenderableImage,java.awt.geom.AffineTransform)": [
        531,
        538
      ],
      "OFDPageGraphics2D::::fill(java.awt.Shape)": [
        546,
        579
      ],
      "OFDPageGraphics2D::::hit(java.awt.Rectangle,java.awt.Shape,boolean)": [
        593,
        600
      ],
      "OFDPageGraphics2D::::getDeviceConfiguration()": [
        607,
        613
      ],
      "OFDPageGraphics2D::::setComposite(java.awt.Composite)": [
        623,
        626
      ],
      "OFDPageGraphics2D::::setPaint(java.awt.Paint)": [
        633,
        636
      ],
      "OFDPageGraphics2D::::setStroke(java.awt.Stroke)": [
        643,
        646
      ],
      "OFDPageGraphics2D::::setRenderingHint(java.awt.RenderingHints.Key,java.lang.Object)": [
        654,
        658
      ],
      "OFDPageGraphics2D::::getRenderingHint(java.awt.RenderingHints.Key)": [
        666,
        669
      ],
      "OFDPageGraphics2D::::setRenderingHints(java.util.Map<?, ?>)": [
        676,
        681
      ],
      "OFDPageGraphics2D::::addRenderingHints(java.util.Map<?, ?>)": [
        688,
        692
      ],
      "OFDPageGraphics2D::::getRenderingHints()": [
        699,
        702
      ],
      "OFDPageGraphics2D::::create()": [
        709,
        712
      ],
      "OFDPageGraphics2D::::getColor()": [
        719,
        722
      ],
      "OFDPageGraphics2D::::setColor(java.awt.Color)": [
        729,
        735
      ],
      "OFDPageGraphics2D::::setPaintMode()": [
        740,
        743
      ],
      "OFDPageGraphics2D::::setXORMode(java.awt.Color)": [
        750,
        753
      ],
      "OFDPageGraphics2D::::getFont()": [
        760,
        763
      ],
      "OFDPageGraphics2D::::setFont(java.awt.Font)": [
        770,
        773
      ],
      "OFDPageGraphics2D::::getFontMetrics(java.awt.Font)": [
        781,
        784
      ],
      "OFDPageGraphics2D::::getClipBounds()": [
        791,
        799
      ],
      "OFDPageGraphics2D::::clipRect(int,int,int,int)": [
        809,
        812
      ],
      "OFDPageGraphics2D::::setClip(int,int,int,int)": [
        824,
        827
      ],
      "OFDPageGraphics2D::::getClip()": [
        834,
        837
      ],
      "OFDPageGraphics2D::::clip(java.awt.Shape)": [
        846,
        863
      ],
      "OFDPageGraphics2D::::setClip(java.awt.Shape)": [
        873,
        885
      ],
      "OFDPageGraphics2D::::copyArea(int,int,int,int,int,int)": [
        897,
        900
      ],
      "OFDPageGraphics2D::::drawLine(int,int,int,int)": [
        910,
        913
      ],
      "OFDPageGraphics2D::::fillRect(int,int,int,int)": [
        923,
        926
      ],
      "OFDPageGraphics2D::::drawRect(int,int,int,int)": [
        936,
        942
      ],
      "OFDPageGraphics2D::::clearRect(int,int,int,int)": [
        952,
        961
      ],
      "OFDPageGraphics2D::::drawRoundRect(int,int,int,int,int,int)": [
        973,
        976
      ],
      "OFDPageGraphics2D::::fillRoundRect(int,int,int,int,int,int)": [
        988,
        991
      ],
      "OFDPageGraphics2D::::drawOval(int,int,int,int)": [
        1001,
        1004
      ],
      "OFDPageGraphics2D::::fillOval(int,int,int,int)": [
        1014,
        1017
      ],
      "OFDPageGraphics2D::::drawArc(int,int,int,int,int,int)": [
        1031,
        1034
      ],
      "OFDPageGraphics2D::::fillArc(int,int,int,int,int,int)": [
        1050,
        1053
      ],
      "OFDPageGraphics2D::::drawPolyline(int[],int[],int)": [
        1064,
        1072
      ],
      "OFDPageGraphics2D::::drawPolygon(int[],int[],int)": [
        1081,
        1090
      ],
      "OFDPageGraphics2D::::fillPolygon(int[],int[],int)": [
        1099,
        1108
      ],
      "OFDPageGraphics2D::::translate(int,int)": [
        1116,
        1120
      ],
      "OFDPageGraphics2D::::translate(double,double)": [
        1128,
        1132
      ],
      "OFDPageGraphics2D::::rotate(double)": [
        1139,
        1143
      ],
      "OFDPageGraphics2D::::rotate(double,double,double)": [
        1159,
        1165
      ],
      "OFDPageGraphics2D::::scale(double,double)": [
        1173,
        1177
      ],
      "OFDPageGraphics2D::::shear(double,double)": [
        1185,
        1189
      ],
      "OFDPageGraphics2D::::transform(java.awt.geom.AffineTransform)": [
        1196,
        1203
      ],
      "OFDPageGraphics2D::::setTransform(java.awt.geom.AffineTransform)": [
        1210,
        1217
      ],
      "OFDPageGraphics2D::::getTransform()": [
        1224,
        1227
      ],
      "OFDPageGraphics2D::::getPaint()": [
        1234,
        1237
      ],
      "OFDPageGraphics2D::::getComposite()": [
        1246,
        1249
      ],
      "OFDPageGraphics2D::::setBackground(java.awt.Color)": [
        1256,
        1259
      ],
      "OFDPageGraphics2D::::getBackground()": [
        1266,
        1269
      ],
      "OFDPageGraphics2D::::getStroke()": [
        1276,
        1279
      ],
      "OFDPageGraphics2D::::getFontRenderContext()": [
        1286,
        1289
      ],
      "OFDPageGraphics2D::::dispose()": [
        1295,
        1298
      ],
      "OFDPageGraphics2D::::makeClip(java.awt.Shape,java.awt.geom.AffineTransform)": [
        1309,
        1344
      ],
      "OFDPageGraphics2D::::convert2Img(java.awt.image.RenderedImage)": [
        1352,
        1373
      ],
      "OFDPageGraphics2D::::trans(java.awt.geom.AffineTransform)": [
        1381,
        1388
      ]
    },
    "test_method_lines_dic": {
      "OFDPageGraphics2DTest::::linearGradientPaint()": [
        20,
        36
      ],
      "OFDPageGraphics2DTest::::drawRoundRect()": [
        42,
        50
      ],
      "OFDPageGraphics2DTest::::fillRoundRect()": [
        55,
        64
      ],
      "OFDPageGraphics2DTest::::draw()": [
        70,
        87
      ],
      "OFDPageGraphics2DTest::::drawStroke()": [
        92,
        106
      ],
      "OFDPageGraphics2DTest::::drawArc()": [
        111,
        120
      ],
      "OFDPageGraphics2DTest::::fillArc()": [
        125,
        134
      ],
      "OFDPageGraphics2DTest::::clearRect()": [
        139,
        149
      ],
      "OFDPageGraphics2DTest::::fillOval()": [
        154,
        163
      ],
      "OFDPageGraphics2DTest::::drawOval()": [
        168,
        177
      ],
      "OFDPageGraphics2DTest::::drawPolyline()": [
        182,
        193
      ],
      "OFDPageGraphics2DTest::::drawPolygon()": [
        198,
        211
      ],
      "OFDPageGraphics2DTest::::fillPolygon()": [
        216,
        229
      ],
      "OFDPageGraphics2DTest::::drawImage()": [
        232,
        245
      ],
      "OFDPageGraphics2DTest::::drawImage2()": [
        247,
        258
      ],
      "OFDPageGraphics2DTest::::drawImageAffineTransform()": [
        260,
        273
      ],
      "OFDPageGraphics2DTest::::drawImageBackground()": [
        279,
        290
      ],
      "OFDPageGraphics2DTest::::drawImageBackground2()": [
        292,
        303
      ],
      "OFDPageGraphics2DTest::::drawImagePiece()": [
        308,
        319
      ],
      "OFDPageGraphics2DTest::::drawImagePieceColor()": [
        321,
        332
      ],
      "OFDPageGraphics2DTest::::translate()": [
        337,
        347
      ],
      "OFDPageGraphics2DTest::::rotate()": [
        352,
        362
      ],
      "OFDPageGraphics2DTest::::rotate2()": [
        367,
        377
      ],
      "OFDPageGraphics2DTest::::translateRotate()": [
        379,
        390
      ],
      "OFDPageGraphics2DTest::::scale()": [
        395,
        407
      ],
      "OFDPageGraphics2DTest::::shear()": [
        413,
        423
      ],
      "OFDPageGraphics2DTest::::getTransform()": [
        428,
        450
      ],
      "OFDPageGraphics2DTest::::transform()": [
        455,
        476
      ],
      "OFDPageGraphics2DTest::::setClip()": [
        481,
        494
      ],
      "OFDPageGraphics2DTest::::drawString()": [
        499,
        509
      ],
      "OFDPageGraphics2DTest::::setPaintRadialGradientPaint()": [
        514,
        530
      ],
      "OFDPageGraphics2DTest::::clipAndCTM()": [
        535,
        556
      ],
      "OFDPageGraphics2DTest::::clips()": [
        561,
        578
      ],
      "OFDPageGraphics2DTest::::complexCTMSetAndReset()": [
        584,
        603
      ],
      "OFDPageGraphics2DTest::::drawImageWithCTM()": [
        605,
        617
      ],
      "OFDPageGraphics2DTest::::clipImg()": [
        620,
        634
      ],
      "OFDPageGraphics2DTest::::clip()": [
        638,
        665
      ],
      "OFDPageGraphics2DTest::::intersects()": [
        667,
        679
      ]
    },
    "reverse_method_lines_dic": {
      "154": "OFDPageGraphics2D::::draw(java.awt.Shape)",
      "155": "OFDPageGraphics2D::::draw(java.awt.Shape)",
      "156": "OFDPageGraphics2D::::draw(java.awt.Shape)",
      "157": "OFDPageGraphics2D::::draw(java.awt.Shape)",
      "158": "OFDPageGraphics2D::::draw(java.awt.Shape)",
      "159": "OFDPageGraphics2D::::draw(java.awt.Shape)",
      "160": "OFDPageGraphics2D::::draw(java.awt.Shape)",
      "161": "OFDPageGraphics2D::::draw(java.awt.Shape)",
      "162": "OFDPageGraphics2D::::draw(java.awt.Shape)",
      "163": "OFDPageGraphics2D::::draw(java.awt.Shape)",
      "164": "OFDPageGraphics2D::::draw(java.awt.Shape)",
      "165": "OFDPageGraphics2D::::draw(java.awt.Shape)",
      "166": "OFDPageGraphics2D::::draw(java.awt.Shape)",
      "167": "OFDPageGraphics2D::::draw(java.awt.Shape)",
      "168": "OFDPageGraphics2D::::draw(java.awt.Shape)",
      "169": "OFDPageGraphics2D::::draw(java.awt.Shape)",
      "170": "OFDPageGraphics2D::::draw(java.awt.Shape)",
      "171": "OFDPageGraphics2D::::draw(java.awt.Shape)",
      "172": "OFDPageGraphics2D::::draw(java.awt.Shape)",
      "173": "OFDPageGraphics2D::::draw(java.awt.Shape)",
      "174": "OFDPageGraphics2D::::draw(java.awt.Shape)",
      "175": "OFDPageGraphics2D::::draw(java.awt.Shape)",
      "176": "OFDPageGraphics2D::::draw(java.awt.Shape)",
      "177": "OFDPageGraphics2D::::draw(java.awt.Shape)",
      "178": "OFDPageGraphics2D::::draw(java.awt.Shape)",
      "179": "OFDPageGraphics2D::::draw(java.awt.Shape)",
      "180": "OFDPageGraphics2D::::draw(java.awt.Shape)",
      "181": "OFDPageGraphics2D::::draw(java.awt.Shape)",
      "182": "OFDPageGraphics2D::::draw(java.awt.Shape)",
      "183": "OFDPageGraphics2D::::draw(java.awt.Shape)",
      "184": "OFDPageGraphics2D::::draw(java.awt.Shape)",
      "185": "OFDPageGraphics2D::::draw(java.awt.Shape)",
      "186": "OFDPageGraphics2D::::draw(java.awt.Shape)",
      "187": "OFDPageGraphics2D::::draw(java.awt.Shape)",
      "203": "OFDPageGraphics2D::::drawString(java.lang.String,int,int)",
      "204": "OFDPageGraphics2D::::drawString(java.lang.String,int,int)",
      "205": "OFDPageGraphics2D::::drawString(java.lang.String,int,int)",
      "206": "OFDPageGraphics2D::::drawString(java.lang.String,int,int)",
      "207": "OFDPageGraphics2D::::drawString(java.lang.String,int,int)",
      "222": "OFDPageGraphics2D::::drawString(java.lang.String,float,float)",
      "223": "OFDPageGraphics2D::::drawString(java.lang.String,float,float)",
      "224": "OFDPageGraphics2D::::drawString(java.lang.String,float,float)",
      "225": "OFDPageGraphics2D::::drawString(java.lang.String,float,float)",
      "226": "OFDPageGraphics2D::::drawString(java.lang.String,float,float)",
      "239": "OFDPageGraphics2D::::drawString(java.text.AttributedCharacterIterator,int,int)",
      "240": "OFDPageGraphics2D::::drawString(java.text.AttributedCharacterIterator,int,int)",
      "241": "OFDPageGraphics2D::::drawString(java.text.AttributedCharacterIterator,int,int)",
      "242": "OFDPageGraphics2D::::drawString(java.text.AttributedCharacterIterator,int,int)",
      "243": "OFDPageGraphics2D::::drawString(java.text.AttributedCharacterIterator,int,int)",
      "256": "OFDPageGraphics2D::::drawString(java.text.AttributedCharacterIterator,float,float)",
      "257": "OFDPageGraphics2D::::drawString(java.text.AttributedCharacterIterator,float,float)",
      "258": "OFDPageGraphics2D::::drawString(java.text.AttributedCharacterIterator,float,float)",
      "259": "OFDPageGraphics2D::::drawString(java.text.AttributedCharacterIterator,float,float)",
      "260": "OFDPageGraphics2D::::drawString(java.text.AttributedCharacterIterator,float,float)",
      "273": "OFDPageGraphics2D::::drawGlyphVector(java.awt.font.GlyphVector,float,float)",
      "274": "OFDPageGraphics2D::::drawGlyphVector(java.awt.font.GlyphVector,float,float)",
      "275": "OFDPageGraphics2D::::drawGlyphVector(java.awt.font.GlyphVector,float,float)",
      "276": "OFDPageGraphics2D::::drawGlyphVector(java.awt.font.GlyphVector,float,float)",
      "277": "OFDPageGraphics2D::::drawGlyphVector(java.awt.font.GlyphVector,float,float)",
      "290": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)",
      "291": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)",
      "292": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)",
      "293": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)",
      "294": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)",
      "295": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)",
      "296": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)",
      "297": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)",
      "298": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)",
      "299": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)",
      "300": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)",
      "301": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)",
      "302": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)",
      "303": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)",
      "304": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)",
      "317": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)",
      "318": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)",
      "319": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)",
      "320": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)",
      "321": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)",
      "322": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)",
      "323": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)",
      "324": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)",
      "325": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)",
      "326": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)",
      "327": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)",
      "328": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)",
      "329": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)",
      "330": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)",
      "331": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)",
      "332": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)",
      "333": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)",
      "334": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)",
      "335": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)",
      "336": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)",
      "337": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)",
      "338": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)",
      "339": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)",
      "340": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)",
      "341": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)",
      "342": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)",
      "343": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)",
      "344": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)",
      "345": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)",
      "346": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)",
      "347": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)",
      "348": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)",
      "349": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)",
      "350": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)",
      "351": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)",
      "352": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)",
      "353": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)",
      "354": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)",
      "355": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)",
      "356": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)",
      "357": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)",
      "358": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)",
      "359": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)",
      "360": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)",
      "374": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,java.awt.Color,java.awt.image.ImageObserver)",
      "375": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,java.awt.Color,java.awt.image.ImageObserver)",
      "376": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,java.awt.Color,java.awt.image.ImageObserver)",
      "377": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,java.awt.Color,java.awt.image.ImageObserver)",
      "378": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,java.awt.Color,java.awt.image.ImageObserver)",
      "379": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,java.awt.Color,java.awt.image.ImageObserver)",
      "380": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,java.awt.Color,java.awt.image.ImageObserver)",
      "381": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,java.awt.Color,java.awt.image.ImageObserver)",
      "382": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,java.awt.Color,java.awt.image.ImageObserver)",
      "383": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,java.awt.Color,java.awt.image.ImageObserver)",
      "384": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,java.awt.Color,java.awt.image.ImageObserver)",
      "385": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,java.awt.Color,java.awt.image.ImageObserver)",
      "386": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,java.awt.Color,java.awt.image.ImageObserver)",
      "387": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,java.awt.Color,java.awt.image.ImageObserver)",
      "388": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,java.awt.Color,java.awt.image.ImageObserver)",
      "404": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.Color,java.awt.image.ImageObserver)",
      "405": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.Color,java.awt.image.ImageObserver)",
      "406": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.Color,java.awt.image.ImageObserver)",
      "407": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.Color,java.awt.image.ImageObserver)",
      "408": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.Color,java.awt.image.ImageObserver)",
      "409": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.Color,java.awt.image.ImageObserver)",
      "410": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.Color,java.awt.image.ImageObserver)",
      "411": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,java.awt.Color,java.awt.image.ImageObserver)",
      "428": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.image.ImageObserver)",
      "429": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.image.ImageObserver)",
      "430": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.image.ImageObserver)",
      "431": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.image.ImageObserver)",
      "432": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.image.ImageObserver)",
      "433": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.image.ImageObserver)",
      "434": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.image.ImageObserver)",
      "435": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.image.ImageObserver)",
      "436": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.image.ImageObserver)",
      "456": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.Color,java.awt.image.ImageObserver)",
      "457": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.Color,java.awt.image.ImageObserver)",
      "458": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.Color,java.awt.image.ImageObserver)",
      "459": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.Color,java.awt.image.ImageObserver)",
      "460": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.Color,java.awt.image.ImageObserver)",
      "461": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.Color,java.awt.image.ImageObserver)",
      "462": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.Color,java.awt.image.ImageObserver)",
      "463": "OFDPageGraphics2D::::drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.Color,java.awt.image.ImageObserver)",
      "474": "OFDPageGraphics2D::::drawImage(java.awt.Image,java.awt.geom.AffineTransform,java.awt.image.ImageObserver)",
      "475": "OFDPageGraphics2D::::drawImage(java.awt.Image,java.awt.geom.AffineTransform,java.awt.image.ImageObserver)",
      "476": "OFDPageGraphics2D::::drawImage(java.awt.Image,java.awt.geom.AffineTransform,java.awt.image.ImageObserver)",
      "477": "OFDPageGraphics2D::::drawImage(java.awt.Image,java.awt.geom.AffineTransform,java.awt.image.ImageObserver)",
      "478": "OFDPageGraphics2D::::drawImage(java.awt.Image,java.awt.geom.AffineTransform,java.awt.image.ImageObserver)",
      "479": "OFDPageGraphics2D::::drawImage(java.awt.Image,java.awt.geom.AffineTransform,java.awt.image.ImageObserver)",
      "480": "OFDPageGraphics2D::::drawImage(java.awt.Image,java.awt.geom.AffineTransform,java.awt.image.ImageObserver)",
      "481": "OFDPageGraphics2D::::drawImage(java.awt.Image,java.awt.geom.AffineTransform,java.awt.image.ImageObserver)",
      "482": "OFDPageGraphics2D::::drawImage(java.awt.Image,java.awt.geom.AffineTransform,java.awt.image.ImageObserver)",
      "483": "OFDPageGraphics2D::::drawImage(java.awt.Image,java.awt.geom.AffineTransform,java.awt.image.ImageObserver)",
      "484": "OFDPageGraphics2D::::drawImage(java.awt.Image,java.awt.geom.AffineTransform,java.awt.image.ImageObserver)",
      "485": "OFDPageGraphics2D::::drawImage(java.awt.Image,java.awt.geom.AffineTransform,java.awt.image.ImageObserver)",
      "501": "OFDPageGraphics2D::::drawImage(java.awt.image.BufferedImage,java.awt.image.BufferedImageOp,int,int)",
      "502": "OFDPageGraphics2D::::drawImage(java.awt.image.BufferedImage,java.awt.image.BufferedImageOp,int,int)",
      "503": "OFDPageGraphics2D::::drawImage(java.awt.image.BufferedImage,java.awt.image.BufferedImageOp,int,int)",
      "504": "OFDPageGraphics2D::::drawImage(java.awt.image.BufferedImage,java.awt.image.BufferedImageOp,int,int)",
      "505": "OFDPageGraphics2D::::drawImage(java.awt.image.BufferedImage,java.awt.image.BufferedImageOp,int,int)",
      "506": "OFDPageGraphics2D::::drawImage(java.awt.image.BufferedImage,java.awt.image.BufferedImageOp,int,int)",
      "507": "OFDPageGraphics2D::::drawImage(java.awt.image.BufferedImage,java.awt.image.BufferedImageOp,int,int)",
      "508": "OFDPageGraphics2D::::drawImage(java.awt.image.BufferedImage,java.awt.image.BufferedImageOp,int,int)",
      "516": "OFDPageGraphics2D::::drawRenderedImage(java.awt.image.RenderedImage,java.awt.geom.AffineTransform)",
      "517": "OFDPageGraphics2D::::drawRenderedImage(java.awt.image.RenderedImage,java.awt.geom.AffineTransform)",
      "518": "OFDPageGraphics2D::::drawRenderedImage(java.awt.image.RenderedImage,java.awt.geom.AffineTransform)",
      "519": "OFDPageGraphics2D::::drawRenderedImage(java.awt.image.RenderedImage,java.awt.geom.AffineTransform)",
      "520": "OFDPageGraphics2D::::drawRenderedImage(java.awt.image.RenderedImage,java.awt.geom.AffineTransform)",
      "521": "OFDPageGraphics2D::::drawRenderedImage(java.awt.image.RenderedImage,java.awt.geom.AffineTransform)",
      "522": "OFDPageGraphics2D::::drawRenderedImage(java.awt.image.RenderedImage,java.awt.geom.AffineTransform)",
      "523": "OFDPageGraphics2D::::drawRenderedImage(java.awt.image.RenderedImage,java.awt.geom.AffineTransform)",
      "531": "OFDPageGraphics2D::::drawRenderableImage(java.awt.image.renderable.RenderableImage,java.awt.geom.AffineTransform)",
      "532": "OFDPageGraphics2D::::drawRenderableImage(java.awt.image.renderable.RenderableImage,java.awt.geom.AffineTransform)",
      "533": "OFDPageGraphics2D::::drawRenderableImage(java.awt.image.renderable.RenderableImage,java.awt.geom.AffineTransform)",
      "534": "OFDPageGraphics2D::::drawRenderableImage(java.awt.image.renderable.RenderableImage,java.awt.geom.AffineTransform)",
      "535": "OFDPageGraphics2D::::drawRenderableImage(java.awt.image.renderable.RenderableImage,java.awt.geom.AffineTransform)",
      "536": "OFDPageGraphics2D::::drawRenderableImage(java.awt.image.renderable.RenderableImage,java.awt.geom.AffineTransform)",
      "537": "OFDPageGraphics2D::::drawRenderableImage(java.awt.image.renderable.RenderableImage,java.awt.geom.AffineTransform)",
      "538": "OFDPageGraphics2D::::drawRenderableImage(java.awt.image.renderable.RenderableImage,java.awt.geom.AffineTransform)",
      "546": "OFDPageGraphics2D::::fill(java.awt.Shape)",
      "547": "OFDPageGraphics2D::::fill(java.awt.Shape)",
      "548": "OFDPageGraphics2D::::fill(java.awt.Shape)",
      "549": "OFDPageGraphics2D::::fill(java.awt.Shape)",
      "550": "OFDPageGraphics2D::::fill(java.awt.Shape)",
      "551": "OFDPageGraphics2D::::fill(java.awt.Shape)",
      "552": "OFDPageGraphics2D::::fill(java.awt.Shape)",
      "553": "OFDPageGraphics2D::::fill(java.awt.Shape)",
      "554": "OFDPageGraphics2D::::fill(java.awt.Shape)",
      "555": "OFDPageGraphics2D::::fill(java.awt.Shape)",
      "556": "OFDPageGraphics2D::::fill(java.awt.Shape)",
      "557": "OFDPageGraphics2D::::fill(java.awt.Shape)",
      "558": "OFDPageGraphics2D::::fill(java.awt.Shape)",
      "559": "OFDPageGraphics2D::::fill(java.awt.Shape)",
      "560": "OFDPageGraphics2D::::fill(java.awt.Shape)",
      "561": "OFDPageGraphics2D::::fill(java.awt.Shape)",
      "562": "OFDPageGraphics2D::::fill(java.awt.Shape)",
      "563": "OFDPageGraphics2D::::fill(java.awt.Shape)",
      "564": "OFDPageGraphics2D::::fill(java.awt.Shape)",
      "565": "OFDPageGraphics2D::::fill(java.awt.Shape)",
      "566": "OFDPageGraphics2D::::fill(java.awt.Shape)",
      "567": "OFDPageGraphics2D::::fill(java.awt.Shape)",
      "568": "OFDPageGraphics2D::::fill(java.awt.Shape)",
      "569": "OFDPageGraphics2D::::fill(java.awt.Shape)",
      "570": "OFDPageGraphics2D::::fill(java.awt.Shape)",
      "571": "OFDPageGraphics2D::::fill(java.awt.Shape)",
      "572": "OFDPageGraphics2D::::fill(java.awt.Shape)",
      "573": "OFDPageGraphics2D::::fill(java.awt.Shape)",
      "574": "OFDPageGraphics2D::::fill(java.awt.Shape)",
      "575": "OFDPageGraphics2D::::fill(java.awt.Shape)",
      "576": "OFDPageGraphics2D::::fill(java.awt.Shape)",
      "577": "OFDPageGraphics2D::::fill(java.awt.Shape)",
      "578": "OFDPageGraphics2D::::fill(java.awt.Shape)",
      "579": "OFDPageGraphics2D::::fill(java.awt.Shape)",
      "593": "OFDPageGraphics2D::::hit(java.awt.Rectangle,java.awt.Shape,boolean)",
      "594": "OFDPageGraphics2D::::hit(java.awt.Rectangle,java.awt.Shape,boolean)",
      "595": "OFDPageGraphics2D::::hit(java.awt.Rectangle,java.awt.Shape,boolean)",
      "596": "OFDPageGraphics2D::::hit(java.awt.Rectangle,java.awt.Shape,boolean)",
      "597": "OFDPageGraphics2D::::hit(java.awt.Rectangle,java.awt.Shape,boolean)",
      "598": "OFDPageGraphics2D::::hit(java.awt.Rectangle,java.awt.Shape,boolean)",
      "599": "OFDPageGraphics2D::::hit(java.awt.Rectangle,java.awt.Shape,boolean)",
      "600": "OFDPageGraphics2D::::hit(java.awt.Rectangle,java.awt.Shape,boolean)",
      "607": "OFDPageGraphics2D::::getDeviceConfiguration()",
      "608": "OFDPageGraphics2D::::getDeviceConfiguration()",
      "609": "OFDPageGraphics2D::::getDeviceConfiguration()",
      "610": "OFDPageGraphics2D::::getDeviceConfiguration()",
      "611": "OFDPageGraphics2D::::getDeviceConfiguration()",
      "612": "OFDPageGraphics2D::::getDeviceConfiguration()",
      "613": "OFDPageGraphics2D::::getDeviceConfiguration()",
      "623": "OFDPageGraphics2D::::setComposite(java.awt.Composite)",
      "624": "OFDPageGraphics2D::::setComposite(java.awt.Composite)",
      "625": "OFDPageGraphics2D::::setComposite(java.awt.Composite)",
      "626": "OFDPageGraphics2D::::setComposite(java.awt.Composite)",
      "633": "OFDPageGraphics2D::::setPaint(java.awt.Paint)",
      "634": "OFDPageGraphics2D::::setPaint(java.awt.Paint)",
      "635": "OFDPageGraphics2D::::setPaint(java.awt.Paint)",
      "636": "OFDPageGraphics2D::::setPaint(java.awt.Paint)",
      "643": "OFDPageGraphics2D::::setStroke(java.awt.Stroke)",
      "644": "OFDPageGraphics2D::::setStroke(java.awt.Stroke)",
      "645": "OFDPageGraphics2D::::setStroke(java.awt.Stroke)",
      "646": "OFDPageGraphics2D::::setStroke(java.awt.Stroke)",
      "654": "OFDPageGraphics2D::::setRenderingHint(java.awt.RenderingHints.Key,java.lang.Object)",
      "655": "OFDPageGraphics2D::::setRenderingHint(java.awt.RenderingHints.Key,java.lang.Object)",
      "656": "OFDPageGraphics2D::::setRenderingHint(java.awt.RenderingHints.Key,java.lang.Object)",
      "657": "OFDPageGraphics2D::::setRenderingHint(java.awt.RenderingHints.Key,java.lang.Object)",
      "658": "OFDPageGraphics2D::::setRenderingHint(java.awt.RenderingHints.Key,java.lang.Object)",
      "666": "OFDPageGraphics2D::::getRenderingHint(java.awt.RenderingHints.Key)",
      "667": "OFDPageGraphics2D::::getRenderingHint(java.awt.RenderingHints.Key)",
      "668": "OFDPageGraphics2D::::getRenderingHint(java.awt.RenderingHints.Key)",
      "669": "OFDPageGraphics2D::::getRenderingHint(java.awt.RenderingHints.Key)",
      "676": "OFDPageGraphics2D::::setRenderingHints(java.util.Map<?, ?>)",
      "677": "OFDPageGraphics2D::::setRenderingHints(java.util.Map<?, ?>)",
      "678": "OFDPageGraphics2D::::setRenderingHints(java.util.Map<?, ?>)",
      "679": "OFDPageGraphics2D::::setRenderingHints(java.util.Map<?, ?>)",
      "680": "OFDPageGraphics2D::::setRenderingHints(java.util.Map<?, ?>)",
      "681": "OFDPageGraphics2D::::setRenderingHints(java.util.Map<?, ?>)",
      "688": "OFDPageGraphics2D::::addRenderingHints(java.util.Map<?, ?>)",
      "689": "OFDPageGraphics2D::::addRenderingHints(java.util.Map<?, ?>)",
      "690": "OFDPageGraphics2D::::addRenderingHints(java.util.Map<?, ?>)",
      "691": "OFDPageGraphics2D::::addRenderingHints(java.util.Map<?, ?>)",
      "692": "OFDPageGraphics2D::::addRenderingHints(java.util.Map<?, ?>)",
      "699": "OFDPageGraphics2D::::getRenderingHints()",
      "700": "OFDPageGraphics2D::::getRenderingHints()",
      "701": "OFDPageGraphics2D::::getRenderingHints()",
      "702": "OFDPageGraphics2D::::getRenderingHints()",
      "709": "OFDPageGraphics2D::::create()",
      "710": "OFDPageGraphics2D::::create()",
      "711": "OFDPageGraphics2D::::create()",
      "712": "OFDPageGraphics2D::::create()",
      "719": "OFDPageGraphics2D::::getColor()",
      "720": "OFDPageGraphics2D::::getColor()",
      "721": "OFDPageGraphics2D::::getColor()",
      "722": "OFDPageGraphics2D::::getColor()",
      "729": "OFDPageGraphics2D::::setColor(java.awt.Color)",
      "730": "OFDPageGraphics2D::::setColor(java.awt.Color)",
      "731": "OFDPageGraphics2D::::setColor(java.awt.Color)",
      "732": "OFDPageGraphics2D::::setColor(java.awt.Color)",
      "733": "OFDPageGraphics2D::::setColor(java.awt.Color)",
      "734": "OFDPageGraphics2D::::setColor(java.awt.Color)",
      "735": "OFDPageGraphics2D::::setColor(java.awt.Color)",
      "740": "OFDPageGraphics2D::::setPaintMode()",
      "741": "OFDPageGraphics2D::::setPaintMode()",
      "742": "OFDPageGraphics2D::::setPaintMode()",
      "743": "OFDPageGraphics2D::::setPaintMode()",
      "750": "OFDPageGraphics2D::::setXORMode(java.awt.Color)",
      "751": "OFDPageGraphics2D::::setXORMode(java.awt.Color)",
      "752": "OFDPageGraphics2D::::setXORMode(java.awt.Color)",
      "753": "OFDPageGraphics2D::::setXORMode(java.awt.Color)",
      "760": "OFDPageGraphics2D::::getFont()",
      "761": "OFDPageGraphics2D::::getFont()",
      "762": "OFDPageGraphics2D::::getFont()",
      "763": "OFDPageGraphics2D::::getFont()",
      "770": "OFDPageGraphics2D::::setFont(java.awt.Font)",
      "771": "OFDPageGraphics2D::::setFont(java.awt.Font)",
      "772": "OFDPageGraphics2D::::setFont(java.awt.Font)",
      "773": "OFDPageGraphics2D::::setFont(java.awt.Font)",
      "781": "OFDPageGraphics2D::::getFontMetrics(java.awt.Font)",
      "782": "OFDPageGraphics2D::::getFontMetrics(java.awt.Font)",
      "783": "OFDPageGraphics2D::::getFontMetrics(java.awt.Font)",
      "784": "OFDPageGraphics2D::::getFontMetrics(java.awt.Font)",
      "791": "OFDPageGraphics2D::::getClipBounds()",
      "792": "OFDPageGraphics2D::::getClipBounds()",
      "793": "OFDPageGraphics2D::::getClipBounds()",
      "794": "OFDPageGraphics2D::::getClipBounds()",
      "795": "OFDPageGraphics2D::::getClipBounds()",
      "796": "OFDPageGraphics2D::::getClipBounds()",
      "797": "OFDPageGraphics2D::::getClipBounds()",
      "798": "OFDPageGraphics2D::::getClipBounds()",
      "799": "OFDPageGraphics2D::::getClipBounds()",
      "809": "OFDPageGraphics2D::::clipRect(int,int,int,int)",
      "810": "OFDPageGraphics2D::::clipRect(int,int,int,int)",
      "811": "OFDPageGraphics2D::::clipRect(int,int,int,int)",
      "812": "OFDPageGraphics2D::::clipRect(int,int,int,int)",
      "824": "OFDPageGraphics2D::::setClip(int,int,int,int)",
      "825": "OFDPageGraphics2D::::setClip(int,int,int,int)",
      "826": "OFDPageGraphics2D::::setClip(int,int,int,int)",
      "827": "OFDPageGraphics2D::::setClip(int,int,int,int)",
      "834": "OFDPageGraphics2D::::getClip()",
      "835": "OFDPageGraphics2D::::getClip()",
      "836": "OFDPageGraphics2D::::getClip()",
      "837": "OFDPageGraphics2D::::getClip()",
      "846": "OFDPageGraphics2D::::clip(java.awt.Shape)",
      "847": "OFDPageGraphics2D::::clip(java.awt.Shape)",
      "848": "OFDPageGraphics2D::::clip(java.awt.Shape)",
      "849": "OFDPageGraphics2D::::clip(java.awt.Shape)",
      "850": "OFDPageGraphics2D::::clip(java.awt.Shape)",
      "851": "OFDPageGraphics2D::::clip(java.awt.Shape)",
      "852": "OFDPageGraphics2D::::clip(java.awt.Shape)",
      "853": "OFDPageGraphics2D::::clip(java.awt.Shape)",
      "854": "OFDPageGraphics2D::::clip(java.awt.Shape)",
      "855": "OFDPageGraphics2D::::clip(java.awt.Shape)",
      "856": "OFDPageGraphics2D::::clip(java.awt.Shape)",
      "857": "OFDPageGraphics2D::::clip(java.awt.Shape)",
      "858": "OFDPageGraphics2D::::clip(java.awt.Shape)",
      "859": "OFDPageGraphics2D::::clip(java.awt.Shape)",
      "860": "OFDPageGraphics2D::::clip(java.awt.Shape)",
      "861": "OFDPageGraphics2D::::clip(java.awt.Shape)",
      "862": "OFDPageGraphics2D::::clip(java.awt.Shape)",
      "863": "OFDPageGraphics2D::::clip(java.awt.Shape)",
      "873": "OFDPageGraphics2D::::setClip(java.awt.Shape)",
      "874": "OFDPageGraphics2D::::setClip(java.awt.Shape)",
      "875": "OFDPageGraphics2D::::setClip(java.awt.Shape)",
      "876": "OFDPageGraphics2D::::setClip(java.awt.Shape)",
      "877": "OFDPageGraphics2D::::setClip(java.awt.Shape)",
      "878": "OFDPageGraphics2D::::setClip(java.awt.Shape)",
      "879": "OFDPageGraphics2D::::setClip(java.awt.Shape)",
      "880": "OFDPageGraphics2D::::setClip(java.awt.Shape)",
      "881": "OFDPageGraphics2D::::setClip(java.awt.Shape)",
      "882": "OFDPageGraphics2D::::setClip(java.awt.Shape)",
      "883": "OFDPageGraphics2D::::setClip(java.awt.Shape)",
      "884": "OFDPageGraphics2D::::setClip(java.awt.Shape)",
      "885": "OFDPageGraphics2D::::setClip(java.awt.Shape)",
      "897": "OFDPageGraphics2D::::copyArea(int,int,int,int,int,int)",
      "898": "OFDPageGraphics2D::::copyArea(int,int,int,int,int,int)",
      "899": "OFDPageGraphics2D::::copyArea(int,int,int,int,int,int)",
      "900": "OFDPageGraphics2D::::copyArea(int,int,int,int,int,int)",
      "910": "OFDPageGraphics2D::::drawLine(int,int,int,int)",
      "911": "OFDPageGraphics2D::::drawLine(int,int,int,int)",
      "912": "OFDPageGraphics2D::::drawLine(int,int,int,int)",
      "913": "OFDPageGraphics2D::::drawLine(int,int,int,int)",
      "923": "OFDPageGraphics2D::::fillRect(int,int,int,int)",
      "924": "OFDPageGraphics2D::::fillRect(int,int,int,int)",
      "925": "OFDPageGraphics2D::::fillRect(int,int,int,int)",
      "926": "OFDPageGraphics2D::::fillRect(int,int,int,int)",
      "936": "OFDPageGraphics2D::::drawRect(int,int,int,int)",
      "937": "OFDPageGraphics2D::::drawRect(int,int,int,int)",
      "938": "OFDPageGraphics2D::::drawRect(int,int,int,int)",
      "939": "OFDPageGraphics2D::::drawRect(int,int,int,int)",
      "940": "OFDPageGraphics2D::::drawRect(int,int,int,int)",
      "941": "OFDPageGraphics2D::::drawRect(int,int,int,int)",
      "942": "OFDPageGraphics2D::::drawRect(int,int,int,int)",
      "952": "OFDPageGraphics2D::::clearRect(int,int,int,int)",
      "953": "OFDPageGraphics2D::::clearRect(int,int,int,int)",
      "954": "OFDPageGraphics2D::::clearRect(int,int,int,int)",
      "955": "OFDPageGraphics2D::::clearRect(int,int,int,int)",
      "956": "OFDPageGraphics2D::::clearRect(int,int,int,int)",
      "957": "OFDPageGraphics2D::::clearRect(int,int,int,int)",
      "958": "OFDPageGraphics2D::::clearRect(int,int,int,int)",
      "959": "OFDPageGraphics2D::::clearRect(int,int,int,int)",
      "960": "OFDPageGraphics2D::::clearRect(int,int,int,int)",
      "961": "OFDPageGraphics2D::::clearRect(int,int,int,int)",
      "973": "OFDPageGraphics2D::::drawRoundRect(int,int,int,int,int,int)",
      "974": "OFDPageGraphics2D::::drawRoundRect(int,int,int,int,int,int)",
      "975": "OFDPageGraphics2D::::drawRoundRect(int,int,int,int,int,int)",
      "976": "OFDPageGraphics2D::::drawRoundRect(int,int,int,int,int,int)",
      "988": "OFDPageGraphics2D::::fillRoundRect(int,int,int,int,int,int)",
      "989": "OFDPageGraphics2D::::fillRoundRect(int,int,int,int,int,int)",
      "990": "OFDPageGraphics2D::::fillRoundRect(int,int,int,int,int,int)",
      "991": "OFDPageGraphics2D::::fillRoundRect(int,int,int,int,int,int)",
      "1001": "OFDPageGraphics2D::::drawOval(int,int,int,int)",
      "1002": "OFDPageGraphics2D::::drawOval(int,int,int,int)",
      "1003": "OFDPageGraphics2D::::drawOval(int,int,int,int)",
      "1004": "OFDPageGraphics2D::::drawOval(int,int,int,int)",
      "1014": "OFDPageGraphics2D::::fillOval(int,int,int,int)",
      "1015": "OFDPageGraphics2D::::fillOval(int,int,int,int)",
      "1016": "OFDPageGraphics2D::::fillOval(int,int,int,int)",
      "1017": "OFDPageGraphics2D::::fillOval(int,int,int,int)",
      "1031": "OFDPageGraphics2D::::drawArc(int,int,int,int,int,int)",
      "1032": "OFDPageGraphics2D::::drawArc(int,int,int,int,int,int)",
      "1033": "OFDPageGraphics2D::::drawArc(int,int,int,int,int,int)",
      "1034": "OFDPageGraphics2D::::drawArc(int,int,int,int,int,int)",
      "1050": "OFDPageGraphics2D::::fillArc(int,int,int,int,int,int)",
      "1051": "OFDPageGraphics2D::::fillArc(int,int,int,int,int,int)",
      "1052": "OFDPageGraphics2D::::fillArc(int,int,int,int,int,int)",
      "1053": "OFDPageGraphics2D::::fillArc(int,int,int,int,int,int)",
      "1064": "OFDPageGraphics2D::::drawPolyline(int[],int[],int)",
      "1065": "OFDPageGraphics2D::::drawPolyline(int[],int[],int)",
      "1066": "OFDPageGraphics2D::::drawPolyline(int[],int[],int)",
      "1067": "OFDPageGraphics2D::::drawPolyline(int[],int[],int)",
      "1068": "OFDPageGraphics2D::::drawPolyline(int[],int[],int)",
      "1069": "OFDPageGraphics2D::::drawPolyline(int[],int[],int)",
      "1070": "OFDPageGraphics2D::::drawPolyline(int[],int[],int)",
      "1071": "OFDPageGraphics2D::::drawPolyline(int[],int[],int)",
      "1072": "OFDPageGraphics2D::::drawPolyline(int[],int[],int)",
      "1081": "OFDPageGraphics2D::::drawPolygon(int[],int[],int)",
      "1082": "OFDPageGraphics2D::::drawPolygon(int[],int[],int)",
      "1083": "OFDPageGraphics2D::::drawPolygon(int[],int[],int)",
      "1084": "OFDPageGraphics2D::::drawPolygon(int[],int[],int)",
      "1085": "OFDPageGraphics2D::::drawPolygon(int[],int[],int)",
      "1086": "OFDPageGraphics2D::::drawPolygon(int[],int[],int)",
      "1087": "OFDPageGraphics2D::::drawPolygon(int[],int[],int)",
      "1088": "OFDPageGraphics2D::::drawPolygon(int[],int[],int)",
      "1089": "OFDPageGraphics2D::::drawPolygon(int[],int[],int)",
      "1090": "OFDPageGraphics2D::::drawPolygon(int[],int[],int)",
      "1099": "OFDPageGraphics2D::::fillPolygon(int[],int[],int)",
      "1100": "OFDPageGraphics2D::::fillPolygon(int[],int[],int)",
      "1101": "OFDPageGraphics2D::::fillPolygon(int[],int[],int)",
      "1102": "OFDPageGraphics2D::::fillPolygon(int[],int[],int)",
      "1103": "OFDPageGraphics2D::::fillPolygon(int[],int[],int)",
      "1104": "OFDPageGraphics2D::::fillPolygon(int[],int[],int)",
      "1105": "OFDPageGraphics2D::::fillPolygon(int[],int[],int)",
      "1106": "OFDPageGraphics2D::::fillPolygon(int[],int[],int)",
      "1107": "OFDPageGraphics2D::::fillPolygon(int[],int[],int)",
      "1108": "OFDPageGraphics2D::::fillPolygon(int[],int[],int)",
      "1116": "OFDPageGraphics2D::::translate(int,int)",
      "1117": "OFDPageGraphics2D::::translate(int,int)",
      "1118": "OFDPageGraphics2D::::translate(int,int)",
      "1119": "OFDPageGraphics2D::::translate(int,int)",
      "1120": "OFDPageGraphics2D::::translate(int,int)",
      "1128": "OFDPageGraphics2D::::translate(double,double)",
      "1129": "OFDPageGraphics2D::::translate(double,double)",
      "1130": "OFDPageGraphics2D::::translate(double,double)",
      "1131": "OFDPageGraphics2D::::translate(double,double)",
      "1132": "OFDPageGraphics2D::::translate(double,double)",
      "1139": "OFDPageGraphics2D::::rotate(double)",
      "1140": "OFDPageGraphics2D::::rotate(double)",
      "1141": "OFDPageGraphics2D::::rotate(double)",
      "1142": "OFDPageGraphics2D::::rotate(double)",
      "1143": "OFDPageGraphics2D::::rotate(double)",
      "1159": "OFDPageGraphics2D::::rotate(double,double,double)",
      "1160": "OFDPageGraphics2D::::rotate(double,double,double)",
      "1161": "OFDPageGraphics2D::::rotate(double,double,double)",
      "1162": "OFDPageGraphics2D::::rotate(double,double,double)",
      "1163": "OFDPageGraphics2D::::rotate(double,double,double)",
      "1164": "OFDPageGraphics2D::::rotate(double,double,double)",
      "1165": "OFDPageGraphics2D::::rotate(double,double,double)",
      "1173": "OFDPageGraphics2D::::scale(double,double)",
      "1174": "OFDPageGraphics2D::::scale(double,double)",
      "1175": "OFDPageGraphics2D::::scale(double,double)",
      "1176": "OFDPageGraphics2D::::scale(double,double)",
      "1177": "OFDPageGraphics2D::::scale(double,double)",
      "1185": "OFDPageGraphics2D::::shear(double,double)",
      "1186": "OFDPageGraphics2D::::shear(double,double)",
      "1187": "OFDPageGraphics2D::::shear(double,double)",
      "1188": "OFDPageGraphics2D::::shear(double,double)",
      "1189": "OFDPageGraphics2D::::shear(double,double)",
      "1196": "OFDPageGraphics2D::::transform(java.awt.geom.AffineTransform)",
      "1197": "OFDPageGraphics2D::::transform(java.awt.geom.AffineTransform)",
      "1198": "OFDPageGraphics2D::::transform(java.awt.geom.AffineTransform)",
      "1199": "OFDPageGraphics2D::::transform(java.awt.geom.AffineTransform)",
      "1200": "OFDPageGraphics2D::::transform(java.awt.geom.AffineTransform)",
      "1201": "OFDPageGraphics2D::::transform(java.awt.geom.AffineTransform)",
      "1202": "OFDPageGraphics2D::::transform(java.awt.geom.AffineTransform)",
      "1203": "OFDPageGraphics2D::::transform(java.awt.geom.AffineTransform)",
      "1210": "OFDPageGraphics2D::::setTransform(java.awt.geom.AffineTransform)",
      "1211": "OFDPageGraphics2D::::setTransform(java.awt.geom.AffineTransform)",
      "1212": "OFDPageGraphics2D::::setTransform(java.awt.geom.AffineTransform)",
      "1213": "OFDPageGraphics2D::::setTransform(java.awt.geom.AffineTransform)",
      "1214": "OFDPageGraphics2D::::setTransform(java.awt.geom.AffineTransform)",
      "1215": "OFDPageGraphics2D::::setTransform(java.awt.geom.AffineTransform)",
      "1216": "OFDPageGraphics2D::::setTransform(java.awt.geom.AffineTransform)",
      "1217": "OFDPageGraphics2D::::setTransform(java.awt.geom.AffineTransform)",
      "1224": "OFDPageGraphics2D::::getTransform()",
      "1225": "OFDPageGraphics2D::::getTransform()",
      "1226": "OFDPageGraphics2D::::getTransform()",
      "1227": "OFDPageGraphics2D::::getTransform()",
      "1234": "OFDPageGraphics2D::::getPaint()",
      "1235": "OFDPageGraphics2D::::getPaint()",
      "1236": "OFDPageGraphics2D::::getPaint()",
      "1237": "OFDPageGraphics2D::::getPaint()",
      "1246": "OFDPageGraphics2D::::getComposite()",
      "1247": "OFDPageGraphics2D::::getComposite()",
      "1248": "OFDPageGraphics2D::::getComposite()",
      "1249": "OFDPageGraphics2D::::getComposite()",
      "1256": "OFDPageGraphics2D::::setBackground(java.awt.Color)",
      "1257": "OFDPageGraphics2D::::setBackground(java.awt.Color)",
      "1258": "OFDPageGraphics2D::::setBackground(java.awt.Color)",
      "1259": "OFDPageGraphics2D::::setBackground(java.awt.Color)",
      "1266": "OFDPageGraphics2D::::getBackground()",
      "1267": "OFDPageGraphics2D::::getBackground()",
      "1268": "OFDPageGraphics2D::::getBackground()",
      "1269": "OFDPageGraphics2D::::getBackground()",
      "1276": "OFDPageGraphics2D::::getStroke()",
      "1277": "OFDPageGraphics2D::::getStroke()",
      "1278": "OFDPageGraphics2D::::getStroke()",
      "1279": "OFDPageGraphics2D::::getStroke()",
      "1286": "OFDPageGraphics2D::::getFontRenderContext()",
      "1287": "OFDPageGraphics2D::::getFontRenderContext()",
      "1288": "OFDPageGraphics2D::::getFontRenderContext()",
      "1289": "OFDPageGraphics2D::::getFontRenderContext()",
      "1295": "OFDPageGraphics2D::::dispose()",
      "1296": "OFDPageGraphics2D::::dispose()",
      "1297": "OFDPageGraphics2D::::dispose()",
      "1298": "OFDPageGraphics2D::::dispose()",
      "1309": "OFDPageGraphics2D::::makeClip(java.awt.Shape,java.awt.geom.AffineTransform)",
      "1310": "OFDPageGraphics2D::::makeClip(java.awt.Shape,java.awt.geom.AffineTransform)",
      "1311": "OFDPageGraphics2D::::makeClip(java.awt.Shape,java.awt.geom.AffineTransform)",
      "1312": "OFDPageGraphics2D::::makeClip(java.awt.Shape,java.awt.geom.AffineTransform)",
      "1313": "OFDPageGraphics2D::::makeClip(java.awt.Shape,java.awt.geom.AffineTransform)",
      "1314": "OFDPageGraphics2D::::makeClip(java.awt.Shape,java.awt.geom.AffineTransform)",
      "1315": "OFDPageGraphics2D::::makeClip(java.awt.Shape,java.awt.geom.AffineTransform)",
      "1316": "OFDPageGraphics2D::::makeClip(java.awt.Shape,java.awt.geom.AffineTransform)",
      "1317": "OFDPageGraphics2D::::makeClip(java.awt.Shape,java.awt.geom.AffineTransform)",
      "1318": "OFDPageGraphics2D::::makeClip(java.awt.Shape,java.awt.geom.AffineTransform)",
      "1319": "OFDPageGraphics2D::::makeClip(java.awt.Shape,java.awt.geom.AffineTransform)",
      "1320": "OFDPageGraphics2D::::makeClip(java.awt.Shape,java.awt.geom.AffineTransform)",
      "1321": "OFDPageGraphics2D::::makeClip(java.awt.Shape,java.awt.geom.AffineTransform)",
      "1322": "OFDPageGraphics2D::::makeClip(java.awt.Shape,java.awt.geom.AffineTransform)",
      "1323": "OFDPageGraphics2D::::makeClip(java.awt.Shape,java.awt.geom.AffineTransform)",
      "1324": "OFDPageGraphics2D::::makeClip(java.awt.Shape,java.awt.geom.AffineTransform)",
      "1325": "OFDPageGraphics2D::::makeClip(java.awt.Shape,java.awt.geom.AffineTransform)",
      "1326": "OFDPageGraphics2D::::makeClip(java.awt.Shape,java.awt.geom.AffineTransform)",
      "1327": "OFDPageGraphics2D::::makeClip(java.awt.Shape,java.awt.geom.AffineTransform)",
      "1328": "OFDPageGraphics2D::::makeClip(java.awt.Shape,java.awt.geom.AffineTransform)",
      "1329": "OFDPageGraphics2D::::makeClip(java.awt.Shape,java.awt.geom.AffineTransform)",
      "1330": "OFDPageGraphics2D::::makeClip(java.awt.Shape,java.awt.geom.AffineTransform)",
      "1331": "OFDPageGraphics2D::::makeClip(java.awt.Shape,java.awt.geom.AffineTransform)",
      "1332": "OFDPageGraphics2D::::makeClip(java.awt.Shape,java.awt.geom.AffineTransform)",
      "1333": "OFDPageGraphics2D::::makeClip(java.awt.Shape,java.awt.geom.AffineTransform)",
      "1334": "OFDPageGraphics2D::::makeClip(java.awt.Shape,java.awt.geom.AffineTransform)",
      "1335": "OFDPageGraphics2D::::makeClip(java.awt.Shape,java.awt.geom.AffineTransform)",
      "1336": "OFDPageGraphics2D::::makeClip(java.awt.Shape,java.awt.geom.AffineTransform)",
      "1337": "OFDPageGraphics2D::::makeClip(java.awt.Shape,java.awt.geom.AffineTransform)",
      "1338": "OFDPageGraphics2D::::makeClip(java.awt.Shape,java.awt.geom.AffineTransform)",
      "1339": "OFDPageGraphics2D::::makeClip(java.awt.Shape,java.awt.geom.AffineTransform)",
      "1340": "OFDPageGraphics2D::::makeClip(java.awt.Shape,java.awt.geom.AffineTransform)",
      "1341": "OFDPageGraphics2D::::makeClip(java.awt.Shape,java.awt.geom.AffineTransform)",
      "1342": "OFDPageGraphics2D::::makeClip(java.awt.Shape,java.awt.geom.AffineTransform)",
      "1343": "OFDPageGraphics2D::::makeClip(java.awt.Shape,java.awt.geom.AffineTransform)",
      "1344": "OFDPageGraphics2D::::makeClip(java.awt.Shape,java.awt.geom.AffineTransform)",
      "1352": "OFDPageGraphics2D::::convert2Img(java.awt.image.RenderedImage)",
      "1353": "OFDPageGraphics2D::::convert2Img(java.awt.image.RenderedImage)",
      "1354": "OFDPageGraphics2D::::convert2Img(java.awt.image.RenderedImage)",
      "1355": "OFDPageGraphics2D::::convert2Img(java.awt.image.RenderedImage)",
      "1356": "OFDPageGraphics2D::::convert2Img(java.awt.image.RenderedImage)",
      "1357": "OFDPageGraphics2D::::convert2Img(java.awt.image.RenderedImage)",
      "1358": "OFDPageGraphics2D::::convert2Img(java.awt.image.RenderedImage)",
      "1359": "OFDPageGraphics2D::::convert2Img(java.awt.image.RenderedImage)",
      "1360": "OFDPageGraphics2D::::convert2Img(java.awt.image.RenderedImage)",
      "1361": "OFDPageGraphics2D::::convert2Img(java.awt.image.RenderedImage)",
      "1362": "OFDPageGraphics2D::::convert2Img(java.awt.image.RenderedImage)",
      "1363": "OFDPageGraphics2D::::convert2Img(java.awt.image.RenderedImage)",
      "1364": "OFDPageGraphics2D::::convert2Img(java.awt.image.RenderedImage)",
      "1365": "OFDPageGraphics2D::::convert2Img(java.awt.image.RenderedImage)",
      "1366": "OFDPageGraphics2D::::convert2Img(java.awt.image.RenderedImage)",
      "1367": "OFDPageGraphics2D::::convert2Img(java.awt.image.RenderedImage)",
      "1368": "OFDPageGraphics2D::::convert2Img(java.awt.image.RenderedImage)",
      "1369": "OFDPageGraphics2D::::convert2Img(java.awt.image.RenderedImage)",
      "1370": "OFDPageGraphics2D::::convert2Img(java.awt.image.RenderedImage)",
      "1371": "OFDPageGraphics2D::::convert2Img(java.awt.image.RenderedImage)",
      "1372": "OFDPageGraphics2D::::convert2Img(java.awt.image.RenderedImage)",
      "1373": "OFDPageGraphics2D::::convert2Img(java.awt.image.RenderedImage)",
      "1381": "OFDPageGraphics2D::::trans(java.awt.geom.AffineTransform)",
      "1382": "OFDPageGraphics2D::::trans(java.awt.geom.AffineTransform)",
      "1383": "OFDPageGraphics2D::::trans(java.awt.geom.AffineTransform)",
      "1384": "OFDPageGraphics2D::::trans(java.awt.geom.AffineTransform)",
      "1385": "OFDPageGraphics2D::::trans(java.awt.geom.AffineTransform)",
      "1386": "OFDPageGraphics2D::::trans(java.awt.geom.AffineTransform)",
      "1387": "OFDPageGraphics2D::::trans(java.awt.geom.AffineTransform)",
      "1388": "OFDPageGraphics2D::::trans(java.awt.geom.AffineTransform)"
    },
    "test_reverse_method_lines_dic": {
      "20": "OFDPageGraphics2DTest::::linearGradientPaint()",
      "21": "OFDPageGraphics2DTest::::linearGradientPaint()",
      "22": "OFDPageGraphics2DTest::::linearGradientPaint()",
      "23": "OFDPageGraphics2DTest::::linearGradientPaint()",
      "24": "OFDPageGraphics2DTest::::linearGradientPaint()",
      "25": "OFDPageGraphics2DTest::::linearGradientPaint()",
      "26": "OFDPageGraphics2DTest::::linearGradientPaint()",
      "27": "OFDPageGraphics2DTest::::linearGradientPaint()",
      "28": "OFDPageGraphics2DTest::::linearGradientPaint()",
      "29": "OFDPageGraphics2DTest::::linearGradientPaint()",
      "30": "OFDPageGraphics2DTest::::linearGradientPaint()",
      "31": "OFDPageGraphics2DTest::::linearGradientPaint()",
      "32": "OFDPageGraphics2DTest::::linearGradientPaint()",
      "33": "OFDPageGraphics2DTest::::linearGradientPaint()",
      "34": "OFDPageGraphics2DTest::::linearGradientPaint()",
      "35": "OFDPageGraphics2DTest::::linearGradientPaint()",
      "36": "OFDPageGraphics2DTest::::linearGradientPaint()",
      "42": "OFDPageGraphics2DTest::::drawRoundRect()",
      "43": "OFDPageGraphics2DTest::::drawRoundRect()",
      "44": "OFDPageGraphics2DTest::::drawRoundRect()",
      "45": "OFDPageGraphics2DTest::::drawRoundRect()",
      "46": "OFDPageGraphics2DTest::::drawRoundRect()",
      "47": "OFDPageGraphics2DTest::::drawRoundRect()",
      "48": "OFDPageGraphics2DTest::::drawRoundRect()",
      "49": "OFDPageGraphics2DTest::::drawRoundRect()",
      "50": "OFDPageGraphics2DTest::::drawRoundRect()",
      "55": "OFDPageGraphics2DTest::::fillRoundRect()",
      "56": "OFDPageGraphics2DTest::::fillRoundRect()",
      "57": "OFDPageGraphics2DTest::::fillRoundRect()",
      "58": "OFDPageGraphics2DTest::::fillRoundRect()",
      "59": "OFDPageGraphics2DTest::::fillRoundRect()",
      "60": "OFDPageGraphics2DTest::::fillRoundRect()",
      "61": "OFDPageGraphics2DTest::::fillRoundRect()",
      "62": "OFDPageGraphics2DTest::::fillRoundRect()",
      "63": "OFDPageGraphics2DTest::::fillRoundRect()",
      "64": "OFDPageGraphics2DTest::::fillRoundRect()",
      "70": "OFDPageGraphics2DTest::::draw()",
      "71": "OFDPageGraphics2DTest::::draw()",
      "72": "OFDPageGraphics2DTest::::draw()",
      "73": "OFDPageGraphics2DTest::::draw()",
      "74": "OFDPageGraphics2DTest::::draw()",
      "75": "OFDPageGraphics2DTest::::draw()",
      "76": "OFDPageGraphics2DTest::::draw()",
      "77": "OFDPageGraphics2DTest::::draw()",
      "78": "OFDPageGraphics2DTest::::draw()",
      "79": "OFDPageGraphics2DTest::::draw()",
      "80": "OFDPageGraphics2DTest::::draw()",
      "81": "OFDPageGraphics2DTest::::draw()",
      "82": "OFDPageGraphics2DTest::::draw()",
      "83": "OFDPageGraphics2DTest::::draw()",
      "84": "OFDPageGraphics2DTest::::draw()",
      "85": "OFDPageGraphics2DTest::::draw()",
      "86": "OFDPageGraphics2DTest::::draw()",
      "87": "OFDPageGraphics2DTest::::draw()",
      "92": "OFDPageGraphics2DTest::::drawStroke()",
      "93": "OFDPageGraphics2DTest::::drawStroke()",
      "94": "OFDPageGraphics2DTest::::drawStroke()",
      "95": "OFDPageGraphics2DTest::::drawStroke()",
      "96": "OFDPageGraphics2DTest::::drawStroke()",
      "97": "OFDPageGraphics2DTest::::drawStroke()",
      "98": "OFDPageGraphics2DTest::::drawStroke()",
      "99": "OFDPageGraphics2DTest::::drawStroke()",
      "100": "OFDPageGraphics2DTest::::drawStroke()",
      "101": "OFDPageGraphics2DTest::::drawStroke()",
      "102": "OFDPageGraphics2DTest::::drawStroke()",
      "103": "OFDPageGraphics2DTest::::drawStroke()",
      "104": "OFDPageGraphics2DTest::::drawStroke()",
      "105": "OFDPageGraphics2DTest::::drawStroke()",
      "106": "OFDPageGraphics2DTest::::drawStroke()",
      "111": "OFDPageGraphics2DTest::::drawArc()",
      "112": "OFDPageGraphics2DTest::::drawArc()",
      "113": "OFDPageGraphics2DTest::::drawArc()",
      "114": "OFDPageGraphics2DTest::::drawArc()",
      "115": "OFDPageGraphics2DTest::::drawArc()",
      "116": "OFDPageGraphics2DTest::::drawArc()",
      "117": "OFDPageGraphics2DTest::::drawArc()",
      "118": "OFDPageGraphics2DTest::::drawArc()",
      "119": "OFDPageGraphics2DTest::::drawArc()",
      "120": "OFDPageGraphics2DTest::::drawArc()",
      "125": "OFDPageGraphics2DTest::::fillArc()",
      "126": "OFDPageGraphics2DTest::::fillArc()",
      "127": "OFDPageGraphics2DTest::::fillArc()",
      "128": "OFDPageGraphics2DTest::::fillArc()",
      "129": "OFDPageGraphics2DTest::::fillArc()",
      "130": "OFDPageGraphics2DTest::::fillArc()",
      "131": "OFDPageGraphics2DTest::::fillArc()",
      "132": "OFDPageGraphics2DTest::::fillArc()",
      "133": "OFDPageGraphics2DTest::::fillArc()",
      "134": "OFDPageGraphics2DTest::::fillArc()",
      "139": "OFDPageGraphics2DTest::::clearRect()",
      "140": "OFDPageGraphics2DTest::::clearRect()",
      "141": "OFDPageGraphics2DTest::::clearRect()",
      "142": "OFDPageGraphics2DTest::::clearRect()",
      "143": "OFDPageGraphics2DTest::::clearRect()",
      "144": "OFDPageGraphics2DTest::::clearRect()",
      "145": "OFDPageGraphics2DTest::::clearRect()",
      "146": "OFDPageGraphics2DTest::::clearRect()",
      "147": "OFDPageGraphics2DTest::::clearRect()",
      "148": "OFDPageGraphics2DTest::::clearRect()",
      "149": "OFDPageGraphics2DTest::::clearRect()",
      "154": "OFDPageGraphics2DTest::::fillOval()",
      "155": "OFDPageGraphics2DTest::::fillOval()",
      "156": "OFDPageGraphics2DTest::::fillOval()",
      "157": "OFDPageGraphics2DTest::::fillOval()",
      "158": "OFDPageGraphics2DTest::::fillOval()",
      "159": "OFDPageGraphics2DTest::::fillOval()",
      "160": "OFDPageGraphics2DTest::::fillOval()",
      "161": "OFDPageGraphics2DTest::::fillOval()",
      "162": "OFDPageGraphics2DTest::::fillOval()",
      "163": "OFDPageGraphics2DTest::::fillOval()",
      "168": "OFDPageGraphics2DTest::::drawOval()",
      "169": "OFDPageGraphics2DTest::::drawOval()",
      "170": "OFDPageGraphics2DTest::::drawOval()",
      "171": "OFDPageGraphics2DTest::::drawOval()",
      "172": "OFDPageGraphics2DTest::::drawOval()",
      "173": "OFDPageGraphics2DTest::::drawOval()",
      "174": "OFDPageGraphics2DTest::::drawOval()",
      "175": "OFDPageGraphics2DTest::::drawOval()",
      "176": "OFDPageGraphics2DTest::::drawOval()",
      "177": "OFDPageGraphics2DTest::::drawOval()",
      "182": "OFDPageGraphics2DTest::::drawPolyline()",
      "183": "OFDPageGraphics2DTest::::drawPolyline()",
      "184": "OFDPageGraphics2DTest::::drawPolyline()",
      "185": "OFDPageGraphics2DTest::::drawPolyline()",
      "186": "OFDPageGraphics2DTest::::drawPolyline()",
      "187": "OFDPageGraphics2DTest::::drawPolyline()",
      "188": "OFDPageGraphics2DTest::::drawPolyline()",
      "189": "OFDPageGraphics2DTest::::drawPolyline()",
      "190": "OFDPageGraphics2DTest::::drawPolyline()",
      "191": "OFDPageGraphics2DTest::::drawPolyline()",
      "192": "OFDPageGraphics2DTest::::drawPolyline()",
      "193": "OFDPageGraphics2DTest::::drawPolyline()",
      "198": "OFDPageGraphics2DTest::::drawPolygon()",
      "199": "OFDPageGraphics2DTest::::drawPolygon()",
      "200": "OFDPageGraphics2DTest::::drawPolygon()",
      "201": "OFDPageGraphics2DTest::::drawPolygon()",
      "202": "OFDPageGraphics2DTest::::drawPolygon()",
      "203": "OFDPageGraphics2DTest::::drawPolygon()",
      "204": "OFDPageGraphics2DTest::::drawPolygon()",
      "205": "OFDPageGraphics2DTest::::drawPolygon()",
      "206": "OFDPageGraphics2DTest::::drawPolygon()",
      "207": "OFDPageGraphics2DTest::::drawPolygon()",
      "208": "OFDPageGraphics2DTest::::drawPolygon()",
      "209": "OFDPageGraphics2DTest::::drawPolygon()",
      "210": "OFDPageGraphics2DTest::::drawPolygon()",
      "211": "OFDPageGraphics2DTest::::drawPolygon()",
      "216": "OFDPageGraphics2DTest::::fillPolygon()",
      "217": "OFDPageGraphics2DTest::::fillPolygon()",
      "218": "OFDPageGraphics2DTest::::fillPolygon()",
      "219": "OFDPageGraphics2DTest::::fillPolygon()",
      "220": "OFDPageGraphics2DTest::::fillPolygon()",
      "221": "OFDPageGraphics2DTest::::fillPolygon()",
      "222": "OFDPageGraphics2DTest::::fillPolygon()",
      "223": "OFDPageGraphics2DTest::::fillPolygon()",
      "224": "OFDPageGraphics2DTest::::fillPolygon()",
      "225": "OFDPageGraphics2DTest::::fillPolygon()",
      "226": "OFDPageGraphics2DTest::::fillPolygon()",
      "227": "OFDPageGraphics2DTest::::fillPolygon()",
      "228": "OFDPageGraphics2DTest::::fillPolygon()",
      "229": "OFDPageGraphics2DTest::::fillPolygon()",
      "232": "OFDPageGraphics2DTest::::drawImage()",
      "233": "OFDPageGraphics2DTest::::drawImage()",
      "234": "OFDPageGraphics2DTest::::drawImage()",
      "235": "OFDPageGraphics2DTest::::drawImage()",
      "236": "OFDPageGraphics2DTest::::drawImage()",
      "237": "OFDPageGraphics2DTest::::drawImage()",
      "238": "OFDPageGraphics2DTest::::drawImage()",
      "239": "OFDPageGraphics2DTest::::drawImage()",
      "240": "OFDPageGraphics2DTest::::drawImage()",
      "241": "OFDPageGraphics2DTest::::drawImage()",
      "242": "OFDPageGraphics2DTest::::drawImage()",
      "243": "OFDPageGraphics2DTest::::drawImage()",
      "244": "OFDPageGraphics2DTest::::drawImage()",
      "245": "OFDPageGraphics2DTest::::drawImage()",
      "247": "OFDPageGraphics2DTest::::drawImage2()",
      "248": "OFDPageGraphics2DTest::::drawImage2()",
      "249": "OFDPageGraphics2DTest::::drawImage2()",
      "250": "OFDPageGraphics2DTest::::drawImage2()",
      "251": "OFDPageGraphics2DTest::::drawImage2()",
      "252": "OFDPageGraphics2DTest::::drawImage2()",
      "253": "OFDPageGraphics2DTest::::drawImage2()",
      "254": "OFDPageGraphics2DTest::::drawImage2()",
      "255": "OFDPageGraphics2DTest::::drawImage2()",
      "256": "OFDPageGraphics2DTest::::drawImage2()",
      "257": "OFDPageGraphics2DTest::::drawImage2()",
      "258": "OFDPageGraphics2DTest::::drawImage2()",
      "260": "OFDPageGraphics2DTest::::drawImageAffineTransform()",
      "261": "OFDPageGraphics2DTest::::drawImageAffineTransform()",
      "262": "OFDPageGraphics2DTest::::drawImageAffineTransform()",
      "263": "OFDPageGraphics2DTest::::drawImageAffineTransform()",
      "264": "OFDPageGraphics2DTest::::drawImageAffineTransform()",
      "265": "OFDPageGraphics2DTest::::drawImageAffineTransform()",
      "266": "OFDPageGraphics2DTest::::drawImageAffineTransform()",
      "267": "OFDPageGraphics2DTest::::drawImageAffineTransform()",
      "268": "OFDPageGraphics2DTest::::drawImageAffineTransform()",
      "269": "OFDPageGraphics2DTest::::drawImageAffineTransform()",
      "270": "OFDPageGraphics2DTest::::drawImageAffineTransform()",
      "271": "OFDPageGraphics2DTest::::drawImageAffineTransform()",
      "272": "OFDPageGraphics2DTest::::drawImageAffineTransform()",
      "273": "OFDPageGraphics2DTest::::drawImageAffineTransform()",
      "279": "OFDPageGraphics2DTest::::drawImageBackground()",
      "280": "OFDPageGraphics2DTest::::drawImageBackground()",
      "281": "OFDPageGraphics2DTest::::drawImageBackground()",
      "282": "OFDPageGraphics2DTest::::drawImageBackground()",
      "283": "OFDPageGraphics2DTest::::drawImageBackground()",
      "284": "OFDPageGraphics2DTest::::drawImageBackground()",
      "285": "OFDPageGraphics2DTest::::drawImageBackground()",
      "286": "OFDPageGraphics2DTest::::drawImageBackground()",
      "287": "OFDPageGraphics2DTest::::drawImageBackground()",
      "288": "OFDPageGraphics2DTest::::drawImageBackground()",
      "289": "OFDPageGraphics2DTest::::drawImageBackground()",
      "290": "OFDPageGraphics2DTest::::drawImageBackground()",
      "292": "OFDPageGraphics2DTest::::drawImageBackground2()",
      "293": "OFDPageGraphics2DTest::::drawImageBackground2()",
      "294": "OFDPageGraphics2DTest::::drawImageBackground2()",
      "295": "OFDPageGraphics2DTest::::drawImageBackground2()",
      "296": "OFDPageGraphics2DTest::::drawImageBackground2()",
      "297": "OFDPageGraphics2DTest::::drawImageBackground2()",
      "298": "OFDPageGraphics2DTest::::drawImageBackground2()",
      "299": "OFDPageGraphics2DTest::::drawImageBackground2()",
      "300": "OFDPageGraphics2DTest::::drawImageBackground2()",
      "301": "OFDPageGraphics2DTest::::drawImageBackground2()",
      "302": "OFDPageGraphics2DTest::::drawImageBackground2()",
      "303": "OFDPageGraphics2DTest::::drawImageBackground2()",
      "308": "OFDPageGraphics2DTest::::drawImagePiece()",
      "309": "OFDPageGraphics2DTest::::drawImagePiece()",
      "310": "OFDPageGraphics2DTest::::drawImagePiece()",
      "311": "OFDPageGraphics2DTest::::drawImagePiece()",
      "312": "OFDPageGraphics2DTest::::drawImagePiece()",
      "313": "OFDPageGraphics2DTest::::drawImagePiece()",
      "314": "OFDPageGraphics2DTest::::drawImagePiece()",
      "315": "OFDPageGraphics2DTest::::drawImagePiece()",
      "316": "OFDPageGraphics2DTest::::drawImagePiece()",
      "317": "OFDPageGraphics2DTest::::drawImagePiece()",
      "318": "OFDPageGraphics2DTest::::drawImagePiece()",
      "319": "OFDPageGraphics2DTest::::drawImagePiece()",
      "321": "OFDPageGraphics2DTest::::drawImagePieceColor()",
      "322": "OFDPageGraphics2DTest::::drawImagePieceColor()",
      "323": "OFDPageGraphics2DTest::::drawImagePieceColor()",
      "324": "OFDPageGraphics2DTest::::drawImagePieceColor()",
      "325": "OFDPageGraphics2DTest::::drawImagePieceColor()",
      "326": "OFDPageGraphics2DTest::::drawImagePieceColor()",
      "327": "OFDPageGraphics2DTest::::drawImagePieceColor()",
      "328": "OFDPageGraphics2DTest::::drawImagePieceColor()",
      "329": "OFDPageGraphics2DTest::::drawImagePieceColor()",
      "330": "OFDPageGraphics2DTest::::drawImagePieceColor()",
      "331": "OFDPageGraphics2DTest::::drawImagePieceColor()",
      "332": "OFDPageGraphics2DTest::::drawImagePieceColor()",
      "337": "OFDPageGraphics2DTest::::translate()",
      "338": "OFDPageGraphics2DTest::::translate()",
      "339": "OFDPageGraphics2DTest::::translate()",
      "340": "OFDPageGraphics2DTest::::translate()",
      "341": "OFDPageGraphics2DTest::::translate()",
      "342": "OFDPageGraphics2DTest::::translate()",
      "343": "OFDPageGraphics2DTest::::translate()",
      "344": "OFDPageGraphics2DTest::::translate()",
      "345": "OFDPageGraphics2DTest::::translate()",
      "346": "OFDPageGraphics2DTest::::translate()",
      "347": "OFDPageGraphics2DTest::::translate()",
      "352": "OFDPageGraphics2DTest::::rotate()",
      "353": "OFDPageGraphics2DTest::::rotate()",
      "354": "OFDPageGraphics2DTest::::rotate()",
      "355": "OFDPageGraphics2DTest::::rotate()",
      "356": "OFDPageGraphics2DTest::::rotate()",
      "357": "OFDPageGraphics2DTest::::rotate()",
      "358": "OFDPageGraphics2DTest::::rotate()",
      "359": "OFDPageGraphics2DTest::::rotate()",
      "360": "OFDPageGraphics2DTest::::rotate()",
      "361": "OFDPageGraphics2DTest::::rotate()",
      "362": "OFDPageGraphics2DTest::::rotate()",
      "367": "OFDPageGraphics2DTest::::rotate2()",
      "368": "OFDPageGraphics2DTest::::rotate2()",
      "369": "OFDPageGraphics2DTest::::rotate2()",
      "370": "OFDPageGraphics2DTest::::rotate2()",
      "371": "OFDPageGraphics2DTest::::rotate2()",
      "372": "OFDPageGraphics2DTest::::rotate2()",
      "373": "OFDPageGraphics2DTest::::rotate2()",
      "374": "OFDPageGraphics2DTest::::rotate2()",
      "375": "OFDPageGraphics2DTest::::rotate2()",
      "376": "OFDPageGraphics2DTest::::rotate2()",
      "377": "OFDPageGraphics2DTest::::rotate2()",
      "379": "OFDPageGraphics2DTest::::translateRotate()",
      "380": "OFDPageGraphics2DTest::::translateRotate()",
      "381": "OFDPageGraphics2DTest::::translateRotate()",
      "382": "OFDPageGraphics2DTest::::translateRotate()",
      "383": "OFDPageGraphics2DTest::::translateRotate()",
      "384": "OFDPageGraphics2DTest::::translateRotate()",
      "385": "OFDPageGraphics2DTest::::translateRotate()",
      "386": "OFDPageGraphics2DTest::::translateRotate()",
      "387": "OFDPageGraphics2DTest::::translateRotate()",
      "388": "OFDPageGraphics2DTest::::translateRotate()",
      "389": "OFDPageGraphics2DTest::::translateRotate()",
      "390": "OFDPageGraphics2DTest::::translateRotate()",
      "395": "OFDPageGraphics2DTest::::scale()",
      "396": "OFDPageGraphics2DTest::::scale()",
      "397": "OFDPageGraphics2DTest::::scale()",
      "398": "OFDPageGraphics2DTest::::scale()",
      "399": "OFDPageGraphics2DTest::::scale()",
      "400": "OFDPageGraphics2DTest::::scale()",
      "401": "OFDPageGraphics2DTest::::scale()",
      "402": "OFDPageGraphics2DTest::::scale()",
      "403": "OFDPageGraphics2DTest::::scale()",
      "404": "OFDPageGraphics2DTest::::scale()",
      "405": "OFDPageGraphics2DTest::::scale()",
      "406": "OFDPageGraphics2DTest::::scale()",
      "407": "OFDPageGraphics2DTest::::scale()",
      "413": "OFDPageGraphics2DTest::::shear()",
      "414": "OFDPageGraphics2DTest::::shear()",
      "415": "OFDPageGraphics2DTest::::shear()",
      "416": "OFDPageGraphics2DTest::::shear()",
      "417": "OFDPageGraphics2DTest::::shear()",
      "418": "OFDPageGraphics2DTest::::shear()",
      "419": "OFDPageGraphics2DTest::::shear()",
      "420": "OFDPageGraphics2DTest::::shear()",
      "421": "OFDPageGraphics2DTest::::shear()",
      "422": "OFDPageGraphics2DTest::::shear()",
      "423": "OFDPageGraphics2DTest::::shear()",
      "428": "OFDPageGraphics2DTest::::getTransform()",
      "429": "OFDPageGraphics2DTest::::getTransform()",
      "430": "OFDPageGraphics2DTest::::getTransform()",
      "431": "OFDPageGraphics2DTest::::getTransform()",
      "432": "OFDPageGraphics2DTest::::getTransform()",
      "433": "OFDPageGraphics2DTest::::getTransform()",
      "434": "OFDPageGraphics2DTest::::getTransform()",
      "435": "OFDPageGraphics2DTest::::getTransform()",
      "436": "OFDPageGraphics2DTest::::getTransform()",
      "437": "OFDPageGraphics2DTest::::getTransform()",
      "438": "OFDPageGraphics2DTest::::getTransform()",
      "439": "OFDPageGraphics2DTest::::getTransform()",
      "440": "OFDPageGraphics2DTest::::getTransform()",
      "441": "OFDPageGraphics2DTest::::getTransform()",
      "442": "OFDPageGraphics2DTest::::getTransform()",
      "443": "OFDPageGraphics2DTest::::getTransform()",
      "444": "OFDPageGraphics2DTest::::getTransform()",
      "445": "OFDPageGraphics2DTest::::getTransform()",
      "446": "OFDPageGraphics2DTest::::getTransform()",
      "447": "OFDPageGraphics2DTest::::getTransform()",
      "448": "OFDPageGraphics2DTest::::getTransform()",
      "449": "OFDPageGraphics2DTest::::getTransform()",
      "450": "OFDPageGraphics2DTest::::getTransform()",
      "455": "OFDPageGraphics2DTest::::transform()",
      "456": "OFDPageGraphics2DTest::::transform()",
      "457": "OFDPageGraphics2DTest::::transform()",
      "458": "OFDPageGraphics2DTest::::transform()",
      "459": "OFDPageGraphics2DTest::::transform()",
      "460": "OFDPageGraphics2DTest::::transform()",
      "461": "OFDPageGraphics2DTest::::transform()",
      "462": "OFDPageGraphics2DTest::::transform()",
      "463": "OFDPageGraphics2DTest::::transform()",
      "464": "OFDPageGraphics2DTest::::transform()",
      "465": "OFDPageGraphics2DTest::::transform()",
      "466": "OFDPageGraphics2DTest::::transform()",
      "467": "OFDPageGraphics2DTest::::transform()",
      "468": "OFDPageGraphics2DTest::::transform()",
      "469": "OFDPageGraphics2DTest::::transform()",
      "470": "OFDPageGraphics2DTest::::transform()",
      "471": "OFDPageGraphics2DTest::::transform()",
      "472": "OFDPageGraphics2DTest::::transform()",
      "473": "OFDPageGraphics2DTest::::transform()",
      "474": "OFDPageGraphics2DTest::::transform()",
      "475": "OFDPageGraphics2DTest::::transform()",
      "476": "OFDPageGraphics2DTest::::transform()",
      "481": "OFDPageGraphics2DTest::::setClip()",
      "482": "OFDPageGraphics2DTest::::setClip()",
      "483": "OFDPageGraphics2DTest::::setClip()",
      "484": "OFDPageGraphics2DTest::::setClip()",
      "485": "OFDPageGraphics2DTest::::setClip()",
      "486": "OFDPageGraphics2DTest::::setClip()",
      "487": "OFDPageGraphics2DTest::::setClip()",
      "488": "OFDPageGraphics2DTest::::setClip()",
      "489": "OFDPageGraphics2DTest::::setClip()",
      "490": "OFDPageGraphics2DTest::::setClip()",
      "491": "OFDPageGraphics2DTest::::setClip()",
      "492": "OFDPageGraphics2DTest::::setClip()",
      "493": "OFDPageGraphics2DTest::::setClip()",
      "494": "OFDPageGraphics2DTest::::setClip()",
      "499": "OFDPageGraphics2DTest::::drawString()",
      "500": "OFDPageGraphics2DTest::::drawString()",
      "501": "OFDPageGraphics2DTest::::drawString()",
      "502": "OFDPageGraphics2DTest::::drawString()",
      "503": "OFDPageGraphics2DTest::::drawString()",
      "504": "OFDPageGraphics2DTest::::drawString()",
      "505": "OFDPageGraphics2DTest::::drawString()",
      "506": "OFDPageGraphics2DTest::::drawString()",
      "507": "OFDPageGraphics2DTest::::drawString()",
      "508": "OFDPageGraphics2DTest::::drawString()",
      "509": "OFDPageGraphics2DTest::::drawString()",
      "514": "OFDPageGraphics2DTest::::setPaintRadialGradientPaint()",
      "515": "OFDPageGraphics2DTest::::setPaintRadialGradientPaint()",
      "516": "OFDPageGraphics2DTest::::setPaintRadialGradientPaint()",
      "517": "OFDPageGraphics2DTest::::setPaintRadialGradientPaint()",
      "518": "OFDPageGraphics2DTest::::setPaintRadialGradientPaint()",
      "519": "OFDPageGraphics2DTest::::setPaintRadialGradientPaint()",
      "520": "OFDPageGraphics2DTest::::setPaintRadialGradientPaint()",
      "521": "OFDPageGraphics2DTest::::setPaintRadialGradientPaint()",
      "522": "OFDPageGraphics2DTest::::setPaintRadialGradientPaint()",
      "523": "OFDPageGraphics2DTest::::setPaintRadialGradientPaint()",
      "524": "OFDPageGraphics2DTest::::setPaintRadialGradientPaint()",
      "525": "OFDPageGraphics2DTest::::setPaintRadialGradientPaint()",
      "526": "OFDPageGraphics2DTest::::setPaintRadialGradientPaint()",
      "527": "OFDPageGraphics2DTest::::setPaintRadialGradientPaint()",
      "528": "OFDPageGraphics2DTest::::setPaintRadialGradientPaint()",
      "529": "OFDPageGraphics2DTest::::setPaintRadialGradientPaint()",
      "530": "OFDPageGraphics2DTest::::setPaintRadialGradientPaint()",
      "535": "OFDPageGraphics2DTest::::clipAndCTM()",
      "536": "OFDPageGraphics2DTest::::clipAndCTM()",
      "537": "OFDPageGraphics2DTest::::clipAndCTM()",
      "538": "OFDPageGraphics2DTest::::clipAndCTM()",
      "539": "OFDPageGraphics2DTest::::clipAndCTM()",
      "540": "OFDPageGraphics2DTest::::clipAndCTM()",
      "541": "OFDPageGraphics2DTest::::clipAndCTM()",
      "542": "OFDPageGraphics2DTest::::clipAndCTM()",
      "543": "OFDPageGraphics2DTest::::clipAndCTM()",
      "544": "OFDPageGraphics2DTest::::clipAndCTM()",
      "545": "OFDPageGraphics2DTest::::clipAndCTM()",
      "546": "OFDPageGraphics2DTest::::clipAndCTM()",
      "547": "OFDPageGraphics2DTest::::clipAndCTM()",
      "548": "OFDPageGraphics2DTest::::clipAndCTM()",
      "549": "OFDPageGraphics2DTest::::clipAndCTM()",
      "550": "OFDPageGraphics2DTest::::clipAndCTM()",
      "551": "OFDPageGraphics2DTest::::clipAndCTM()",
      "552": "OFDPageGraphics2DTest::::clipAndCTM()",
      "553": "OFDPageGraphics2DTest::::clipAndCTM()",
      "554": "OFDPageGraphics2DTest::::clipAndCTM()",
      "555": "OFDPageGraphics2DTest::::clipAndCTM()",
      "556": "OFDPageGraphics2DTest::::clipAndCTM()",
      "561": "OFDPageGraphics2DTest::::clips()",
      "562": "OFDPageGraphics2DTest::::clips()",
      "563": "OFDPageGraphics2DTest::::clips()",
      "564": "OFDPageGraphics2DTest::::clips()",
      "565": "OFDPageGraphics2DTest::::clips()",
      "566": "OFDPageGraphics2DTest::::clips()",
      "567": "OFDPageGraphics2DTest::::clips()",
      "568": "OFDPageGraphics2DTest::::clips()",
      "569": "OFDPageGraphics2DTest::::clips()",
      "570": "OFDPageGraphics2DTest::::clips()",
      "571": "OFDPageGraphics2DTest::::clips()",
      "572": "OFDPageGraphics2DTest::::clips()",
      "573": "OFDPageGraphics2DTest::::clips()",
      "574": "OFDPageGraphics2DTest::::clips()",
      "575": "OFDPageGraphics2DTest::::clips()",
      "576": "OFDPageGraphics2DTest::::clips()",
      "577": "OFDPageGraphics2DTest::::clips()",
      "578": "OFDPageGraphics2DTest::::clips()",
      "584": "OFDPageGraphics2DTest::::complexCTMSetAndReset()",
      "585": "OFDPageGraphics2DTest::::complexCTMSetAndReset()",
      "586": "OFDPageGraphics2DTest::::complexCTMSetAndReset()",
      "587": "OFDPageGraphics2DTest::::complexCTMSetAndReset()",
      "588": "OFDPageGraphics2DTest::::complexCTMSetAndReset()",
      "589": "OFDPageGraphics2DTest::::complexCTMSetAndReset()",
      "590": "OFDPageGraphics2DTest::::complexCTMSetAndReset()",
      "591": "OFDPageGraphics2DTest::::complexCTMSetAndReset()",
      "592": "OFDPageGraphics2DTest::::complexCTMSetAndReset()",
      "593": "OFDPageGraphics2DTest::::complexCTMSetAndReset()",
      "594": "OFDPageGraphics2DTest::::complexCTMSetAndReset()",
      "595": "OFDPageGraphics2DTest::::complexCTMSetAndReset()",
      "596": "OFDPageGraphics2DTest::::complexCTMSetAndReset()",
      "597": "OFDPageGraphics2DTest::::complexCTMSetAndReset()",
      "598": "OFDPageGraphics2DTest::::complexCTMSetAndReset()",
      "599": "OFDPageGraphics2DTest::::complexCTMSetAndReset()",
      "600": "OFDPageGraphics2DTest::::complexCTMSetAndReset()",
      "601": "OFDPageGraphics2DTest::::complexCTMSetAndReset()",
      "602": "OFDPageGraphics2DTest::::complexCTMSetAndReset()",
      "603": "OFDPageGraphics2DTest::::complexCTMSetAndReset()",
      "605": "OFDPageGraphics2DTest::::drawImageWithCTM()",
      "606": "OFDPageGraphics2DTest::::drawImageWithCTM()",
      "607": "OFDPageGraphics2DTest::::drawImageWithCTM()",
      "608": "OFDPageGraphics2DTest::::drawImageWithCTM()",
      "609": "OFDPageGraphics2DTest::::drawImageWithCTM()",
      "610": "OFDPageGraphics2DTest::::drawImageWithCTM()",
      "611": "OFDPageGraphics2DTest::::drawImageWithCTM()",
      "612": "OFDPageGraphics2DTest::::drawImageWithCTM()",
      "613": "OFDPageGraphics2DTest::::drawImageWithCTM()",
      "614": "OFDPageGraphics2DTest::::drawImageWithCTM()",
      "615": "OFDPageGraphics2DTest::::drawImageWithCTM()",
      "616": "OFDPageGraphics2DTest::::drawImageWithCTM()",
      "617": "OFDPageGraphics2DTest::::drawImageWithCTM()",
      "620": "OFDPageGraphics2DTest::::clipImg()",
      "621": "OFDPageGraphics2DTest::::clipImg()",
      "622": "OFDPageGraphics2DTest::::clipImg()",
      "623": "OFDPageGraphics2DTest::::clipImg()",
      "624": "OFDPageGraphics2DTest::::clipImg()",
      "625": "OFDPageGraphics2DTest::::clipImg()",
      "626": "OFDPageGraphics2DTest::::clipImg()",
      "627": "OFDPageGraphics2DTest::::clipImg()",
      "628": "OFDPageGraphics2DTest::::clipImg()",
      "629": "OFDPageGraphics2DTest::::clipImg()",
      "630": "OFDPageGraphics2DTest::::clipImg()",
      "631": "OFDPageGraphics2DTest::::clipImg()",
      "632": "OFDPageGraphics2DTest::::clipImg()",
      "633": "OFDPageGraphics2DTest::::clipImg()",
      "634": "OFDPageGraphics2DTest::::clipImg()",
      "638": "OFDPageGraphics2DTest::::clip()",
      "639": "OFDPageGraphics2DTest::::clip()",
      "640": "OFDPageGraphics2DTest::::clip()",
      "641": "OFDPageGraphics2DTest::::clip()",
      "642": "OFDPageGraphics2DTest::::clip()",
      "643": "OFDPageGraphics2DTest::::clip()",
      "644": "OFDPageGraphics2DTest::::clip()",
      "645": "OFDPageGraphics2DTest::::clip()",
      "646": "OFDPageGraphics2DTest::::clip()",
      "647": "OFDPageGraphics2DTest::::clip()",
      "648": "OFDPageGraphics2DTest::::clip()",
      "649": "OFDPageGraphics2DTest::::clip()",
      "650": "OFDPageGraphics2DTest::::clip()",
      "651": "OFDPageGraphics2DTest::::clip()",
      "652": "OFDPageGraphics2DTest::::clip()",
      "653": "OFDPageGraphics2DTest::::clip()",
      "654": "OFDPageGraphics2DTest::::clip()",
      "655": "OFDPageGraphics2DTest::::clip()",
      "656": "OFDPageGraphics2DTest::::clip()",
      "657": "OFDPageGraphics2DTest::::clip()",
      "658": "OFDPageGraphics2DTest::::clip()",
      "659": "OFDPageGraphics2DTest::::clip()",
      "660": "OFDPageGraphics2DTest::::clip()",
      "661": "OFDPageGraphics2DTest::::clip()",
      "662": "OFDPageGraphics2DTest::::clip()",
      "663": "OFDPageGraphics2DTest::::clip()",
      "664": "OFDPageGraphics2DTest::::clip()",
      "665": "OFDPageGraphics2DTest::::clip()",
      "667": "OFDPageGraphics2DTest::::intersects()",
      "668": "OFDPageGraphics2DTest::::intersects()",
      "669": "OFDPageGraphics2DTest::::intersects()",
      "670": "OFDPageGraphics2DTest::::intersects()",
      "671": "OFDPageGraphics2DTest::::intersects()",
      "672": "OFDPageGraphics2DTest::::intersects()",
      "673": "OFDPageGraphics2DTest::::intersects()",
      "674": "OFDPageGraphics2DTest::::intersects()",
      "675": "OFDPageGraphics2DTest::::intersects()",
      "676": "OFDPageGraphics2DTest::::intersects()",
      "677": "OFDPageGraphics2DTest::::intersects()",
      "678": "OFDPageGraphics2DTest::::intersects()",
      "679": "OFDPageGraphics2DTest::::intersects()"
    },
    "tests": [
      {
        "test_lines": [
          20,
          36
        ],
        "covered_lines": [
          101,
          103,
          104,
          106,
          107,
          108,
          109,
          110,
          111,
          114,
          115,
          118,
          119,
          120,
          122,
          125,
          126,
          128,
          129,
          548,
          552,
          556,
          557,
          562,
          563,
          564,
          565,
          566,
          568,
          574,
          575,
          577,
          579,
          635,
          636,
          925,
          926
        ]
      },
      {
        "test_lines": [
          42,
          50
        ],
        "covered_lines": [
          101,
          103,
          104,
          106,
          107,
          108,
          109,
          110,
          111,
          114,
          115,
          118,
          119,
          120,
          122,
          125,
          126,
          128,
          129,
          156,
          161,
          165,
          166,
          171,
          172,
          173,
          174,
          177,
          183,
          184,
          186,
          187,
          975,
          976
        ]
      },
      {
        "test_lines": [
          55,
          64
        ],
        "covered_lines": [
          101,
          103,
          104,
          106,
          107,
          108,
          109,
          110,
          111,
          114,
          115,
          118,
          119,
          120,
          122,
          125,
          126,
          128,
          129,
          548,
          552,
          556,
          557,
          562,
          563,
          564,
          565,
          566,
          568,
          574,
          575,
          577,
          579,
          731,
          734,
          735,
          990,
          991
        ]
      },
      {
        "test_lines": [
          70,
          87
        ],
        "covered_lines": [
          101,
          103,
          104,
          106,
          107,
          108,
          109,
          110,
          111,
          114,
          115,
          118,
          119,
          120,
          122,
          125,
          126,
          128,
          129,
          156,
          161,
          165,
          166,
          171,
          172,
          173,
          174,
          177,
          183,
          184,
          186,
          187
        ]
      },
      {
        "test_lines": [
          92,
          106
        ],
        "covered_lines": [
          101,
          103,
          104,
          106,
          107,
          108,
          109,
          110,
          111,
          114,
          115,
          118,
          119,
          120,
          122,
          125,
          126,
          128,
          129,
          156,
          161,
          165,
          166,
          171,
          172,
          173,
          174,
          177,
          183,
          184,
          186,
          187,
          645,
          646
        ]
      },
      {
        "test_lines": [
          111,
          120
        ],
        "covered_lines": [
          101,
          103,
          104,
          106,
          107,
          108,
          109,
          110,
          111,
          114,
          115,
          118,
          119,
          120,
          122,
          125,
          126,
          128,
          129,
          548,
          552,
          556,
          557,
          562,
          563,
          564,
          565,
          566,
          568,
          574,
          575,
          577,
          579,
          635,
          636,
          1052,
          1053
        ]
      },
      {
        "test_lines": [
          125,
          134
        ],
        "covered_lines": [
          101,
          103,
          104,
          106,
          107,
          108,
          109,
          110,
          111,
          114,
          115,
          118,
          119,
          120,
          122,
          125,
          126,
          128,
          129,
          548,
          552,
          556,
          557,
          562,
          563,
          564,
          565,
          566,
          568,
          574,
          575,
          577,
          579,
          635,
          636,
          1052,
          1053
        ]
      },
      {
        "test_lines": [
          139,
          149
        ],
        "covered_lines": [
          101,
          103,
          104,
          106,
          107,
          108,
          109,
          110,
          111,
          114,
          115,
          118,
          119,
          120,
          122,
          125,
          126,
          128,
          129,
          548,
          552,
          556,
          557,
          562,
          563,
          564,
          565,
          566,
          568,
          574,
          575,
          577,
          579,
          635,
          636,
          925,
          926,
          954,
          957,
          958,
          959,
          960,
          961,
          1052,
          1053,
          1236
        ]
      },
      {
        "test_lines": [
          154,
          163
        ],
        "covered_lines": [
          101,
          103,
          104,
          106,
          107,
          108,
          109,
          110,
          111,
          114,
          115,
          118,
          119,
          120,
          122,
          125,
          126,
          128,
          129,
          548,
          552,
          556,
          557,
          562,
          563,
          564,
          565,
          566,
          568,
          574,
          575,
          577,
          579,
          635,
          636,
          1016,
          1017
        ]
      },
      {
        "test_lines": [
          168,
          177
        ],
        "covered_lines": [
          101,
          103,
          104,
          106,
          107,
          108,
          109,
          110,
          111,
          114,
          115,
          118,
          119,
          120,
          122,
          125,
          126,
          128,
          129,
          156,
          161,
          165,
          166,
          171,
          172,
          173,
          174,
          177,
          183,
          184,
          186,
          187,
          635,
          636,
          1003,
          1004
        ]
      },
      {
        "test_lines": [
          182,
          193
        ],
        "covered_lines": [
          101,
          103,
          104,
          106,
          107,
          108,
          109,
          110,
          111,
          114,
          115,
          118,
          119,
          120,
          122,
          125,
          126,
          128,
          129,
          156,
          161,
          165,
          166,
          171,
          172,
          173,
          174,
          177,
          183,
          184,
          186,
          187,
          635,
          636,
          1066,
          1067,
          1068,
          1069,
          1071,
          1072
        ]
      },
      {
        "test_lines": [
          198,
          211
        ],
        "covered_lines": [
          101,
          103,
          104,
          106,
          107,
          108,
          109,
          110,
          111,
          114,
          115,
          118,
          119,
          120,
          122,
          125,
          126,
          128,
          129,
          156,
          161,
          165,
          166,
          171,
          172,
          173,
          174,
          177,
          183,
          184,
          186,
          187,
          635,
          636,
          1083,
          1084,
          1085,
          1086,
          1088,
          1089,
          1090
        ]
      },
      {
        "test_lines": [
          216,
          229
        ],
        "covered_lines": [
          101,
          103,
          104,
          106,
          107,
          108,
          109,
          110,
          111,
          114,
          115,
          118,
          119,
          120,
          122,
          125,
          126,
          128,
          129,
          548,
          552,
          556,
          557,
          562,
          563,
          564,
          565,
          566,
          568,
          574,
          575,
          577,
          579,
          635,
          636,
          1101,
          1102,
          1103,
          1104,
          1106,
          1107,
          1108
        ]
      },
      {
        "test_lines": [
          232,
          245
        ],
        "covered_lines": [
          101,
          103,
          104,
          106,
          107,
          108,
          109,
          110,
          111,
          114,
          115,
          118,
          119,
          120,
          122,
          125,
          126,
          128,
          129,
          319,
          324,
          326,
          327,
          332,
          333,
          334,
          335,
          338,
          340,
          341,
          342,
          347,
          348,
          351,
          358,
          359,
          1226,
          1387
        ]
      },
      {
        "test_lines": [
          247,
          258
        ],
        "covered_lines": [
          101,
          103,
          104,
          106,
          107,
          108,
          109,
          110,
          111,
          114,
          115,
          118,
          119,
          120,
          122,
          125,
          126,
          128,
          129,
          292,
          295,
          296,
          299,
          300,
          303,
          319,
          324,
          326,
          327,
          332,
          333,
          334,
          335,
          338,
          340,
          341,
          342,
          347,
          348,
          351,
          358,
          359,
          1226,
          1387
        ]
      },
      {
        "test_lines": [
          260,
          273
        ],
        "covered_lines": [
          101,
          103,
          104,
          106,
          107,
          108,
          109,
          110,
          111,
          114,
          115,
          118,
          119,
          120,
          122,
          125,
          126,
          128,
          129,
          292,
          295,
          296,
          299,
          300,
          303,
          319,
          324,
          326,
          327,
          332,
          333,
          334,
          335,
          338,
          340,
          341,
          342,
          347,
          348,
          351,
          358,
          359,
          476,
          477,
          478,
          480,
          481,
          482,
          484,
          503,
          504,
          507,
          508,
          548,
          552,
          556,
          557,
          562,
          563,
          564,
          565,
          566,
          568,
          574,
          575,
          577,
          579,
          635,
          636,
          925,
          926,
          1198,
          1201,
          1202,
          1203,
          1212,
          1215,
          1216,
          1217,
          1226,
          1387
        ]
      },
      {
        "test_lines": [
          279,
          290
        ],
        "covered_lines": [
          101,
          103,
          104,
          106,
          107,
          108,
          109,
          110,
          111,
          114,
          115,
          118,
          119,
          120,
          122,
          125,
          126,
          128,
          129,
          319,
          324,
          326,
          327,
          332,
          333,
          334,
          335,
          338,
          340,
          341,
          342,
          347,
          348,
          351,
          358,
          359,
          406,
          407,
          408,
          409,
          410,
          548,
          552,
          556,
          557,
          562,
          563,
          564,
          565,
          566,
          568,
          574,
          575,
          577,
          579,
          635,
          636,
          925,
          926,
          1226,
          1236,
          1387
        ]
      },
      {
        "test_lines": [
          292,
          303
        ],
        "covered_lines": [
          101,
          103,
          104,
          106,
          107,
          108,
          109,
          110,
          111,
          114,
          115,
          118,
          119,
          120,
          122,
          125,
          126,
          128,
          129,
          319,
          324,
          326,
          327,
          332,
          333,
          334,
          335,
          338,
          340,
          341,
          342,
          347,
          348,
          351,
          358,
          359,
          376,
          379,
          380,
          383,
          384,
          387,
          406,
          407,
          408,
          409,
          410,
          548,
          552,
          556,
          557,
          562,
          563,
          564,
          565,
          566,
          568,
          574,
          575,
          577,
          579,
          635,
          636,
          925,
          926,
          1226,
          1236,
          1387
        ]
      },
      {
        "test_lines": [
          308,
          319
        ],
        "covered_lines": [
          101,
          103,
          104,
          106,
          107,
          108,
          109,
          110,
          111,
          114,
          115,
          118,
          119,
          120,
          122,
          125,
          126,
          128,
          129,
          292,
          295,
          296,
          299,
          300,
          303,
          319,
          324,
          326,
          327,
          332,
          333,
          334,
          335,
          338,
          340,
          341,
          342,
          347,
          348,
          351,
          358,
          359,
          430,
          431,
          432,
          433,
          434,
          435,
          1226,
          1387
        ]
      },
      {
        "test_lines": [
          321,
          332
        ],
        "covered_lines": [
          101,
          103,
          104,
          106,
          107,
          108,
          109,
          110,
          111,
          114,
          115,
          118,
          119,
          120,
          122,
          125,
          126,
          128,
          129,
          292,
          295,
          296,
          299,
          300,
          303,
          319,
          324,
          326,
          327,
          332,
          333,
          334,
          335,
          338,
          340,
          341,
          342,
          347,
          348,
          351,
          358,
          359,
          430,
          431,
          432,
          433,
          434,
          435,
          458,
          459,
          460,
          461,
          462,
          548,
          552,
          556,
          557,
          562,
          563,
          564,
          565,
          566,
          568,
          574,
          575,
          577,
          579,
          635,
          636,
          925,
          926,
          1226,
          1236,
          1387
        ]
      },
      {
        "test_lines": [
          337,
          347
        ],
        "covered_lines": [
          101,
          103,
          104,
          106,
          107,
          108,
          109,
          110,
          111,
          114,
          115,
          118,
          119,
          120,
          122,
          125,
          126,
          128,
          129,
          548,
          552,
          553,
          556,
          557,
          562,
          563,
          564,
          565,
          566,
          568,
          574,
          575,
          577,
          579,
          731,
          734,
          735,
          925,
          926,
          1118,
          1119,
          1120,
          1130,
          1131,
          1132
        ]
      },
      {
        "test_lines": [
          352,
          362
        ],
        "covered_lines": [
          101,
          103,
          104,
          106,
          107,
          108,
          109,
          110,
          111,
          114,
          115,
          118,
          119,
          120,
          122,
          125,
          126,
          128,
          129,
          548,
          552,
          553,
          556,
          557,
          562,
          563,
          564,
          565,
          566,
          568,
          574,
          575,
          577,
          579,
          731,
          734,
          735,
          925,
          926,
          1141,
          1142,
          1143
        ]
      },
      {
        "test_lines": [
          367,
          377
        ],
        "covered_lines": [
          101,
          103,
          104,
          106,
          107,
          108,
          109,
          110,
          111,
          114,
          115,
          118,
          119,
          120,
          122,
          125,
          126,
          128,
          129,
          548,
          552,
          553,
          556,
          557,
          562,
          563,
          564,
          565,
          566,
          568,
          574,
          575,
          577,
          579,
          731,
          734,
          735,
          925,
          926,
          1130,
          1131,
          1132,
          1141,
          1142,
          1143,
          1161,
          1162,
          1163,
          1164,
          1165
        ]
      },
      {
        "test_lines": [
          379,
          390
        ],
        "covered_lines": [
          101,
          103,
          104,
          106,
          107,
          108,
          109,
          110,
          111,
          114,
          115,
          118,
          119,
          120,
          122,
          125,
          126,
          128,
          129,
          548,
          552,
          553,
          556,
          557,
          562,
          563,
          564,
          565,
          566,
          568,
          574,
          575,
          577,
          579,
          731,
          734,
          735,
          925,
          926,
          1118,
          1119,
          1120,
          1130,
          1131,
          1132,
          1141,
          1142,
          1143
        ]
      },
      {
        "test_lines": [
          395,
          407
        ],
        "covered_lines": [
          101,
          103,
          104,
          106,
          107,
          108,
          109,
          110,
          111,
          114,
          115,
          118,
          119,
          120,
          122,
          125,
          126,
          128,
          129,
          156,
          161,
          162,
          165,
          166,
          171,
          172,
          173,
          174,
          177,
          183,
          184,
          186,
          187,
          731,
          734,
          735,
          938,
          941,
          942,
          1175,
          1176,
          1177
        ]
      },
      {
        "test_lines": [
          413,
          423
        ],
        "covered_lines": [
          101,
          103,
          104,
          106,
          107,
          108,
          109,
          110,
          111,
          114,
          115,
          118,
          119,
          120,
          122,
          125,
          126,
          128,
          129,
          548,
          552,
          553,
          556,
          557,
          562,
          563,
          564,
          565,
          566,
          568,
          574,
          575,
          577,
          579,
          731,
          734,
          735,
          925,
          926,
          1187,
          1188,
          1189
        ]
      },
      {
        "test_lines": [
          428,
          450
        ],
        "covered_lines": [
          101,
          103,
          104,
          106,
          107,
          108,
          109,
          110,
          111,
          114,
          115,
          118,
          119,
          120,
          122,
          125,
          126,
          128,
          129,
          548,
          552,
          553,
          556,
          557,
          562,
          563,
          564,
          565,
          566,
          568,
          574,
          575,
          577,
          579,
          731,
          734,
          735,
          925,
          926,
          1118,
          1119,
          1120,
          1130,
          1131,
          1132,
          1141,
          1142,
          1143,
          1187,
          1188,
          1189,
          1226
        ]
      },
      {
        "test_lines": [
          455,
          476
        ],
        "covered_lines": [
          101,
          103,
          104,
          106,
          107,
          108,
          109,
          110,
          111,
          114,
          115,
          118,
          119,
          120,
          122,
          125,
          126,
          128,
          129,
          1118,
          1119,
          1120,
          1130,
          1131,
          1132,
          1198,
          1201,
          1202,
          1203,
          1226
        ]
      },
      {
        "test_lines": [
          481,
          494
        ],
        "covered_lines": [
          101,
          103,
          104,
          106,
          107,
          108,
          109,
          110,
          111,
          114,
          115,
          118,
          119,
          120,
          122,
          125,
          126,
          128,
          129,
          548,
          552,
          553,
          556,
          557,
          562,
          563,
          564,
          565,
          566,
          568,
          569,
          570,
          574,
          575,
          577,
          579,
          635,
          636,
          875,
          881,
          882,
          884,
          885,
          1052,
          1053,
          1118,
          1119,
          1120,
          1130,
          1131,
          1132,
          1310,
          1314,
          1315,
          1316,
          1317,
          1318,
          1321,
          1324,
          1325,
          1326,
          1327,
          1328,
          1334,
          1335,
          1336,
          1337,
          1338,
          1387
        ]
      },
      {
        "test_lines": [
          499,
          509
        ],
        "covered_lines": [
          101,
          103,
          104,
          106,
          107,
          108,
          109,
          110,
          111,
          114,
          115,
          118,
          119,
          120,
          122,
          125,
          126,
          128,
          129,
          205,
          206,
          207,
          275,
          276,
          277,
          548,
          552,
          556,
          557,
          562,
          563,
          564,
          565,
          566,
          568,
          574,
          575,
          577,
          579,
          635,
          636,
          762,
          1288
        ]
      },
      {
        "test_lines": [
          514,
          530
        ],
        "covered_lines": [
          101,
          103,
          104,
          106,
          107,
          108,
          109,
          110,
          111,
          114,
          115,
          118,
          119,
          120,
          122,
          125,
          126,
          128,
          129,
          548,
          552,
          556,
          557,
          562,
          563,
          564,
          565,
          566,
          568,
          574,
          575,
          577,
          579,
          635,
          636,
          925,
          926
        ]
      },
      {
        "test_lines": [
          535,
          556
        ],
        "covered_lines": [
          101,
          103,
          104,
          106,
          107,
          108,
          109,
          110,
          111,
          114,
          115,
          118,
          119,
          120,
          122,
          125,
          126,
          128,
          129,
          548,
          552,
          553,
          556,
          557,
          562,
          563,
          564,
          565,
          566,
          568,
          569,
          570,
          574,
          575,
          577,
          579,
          731,
          734,
          735,
          811,
          812,
          848,
          854,
          855,
          858,
          859,
          863,
          925,
          926,
          1118,
          1119,
          1120,
          1130,
          1131,
          1132,
          1141,
          1142,
          1143,
          1310,
          1314,
          1315,
          1316,
          1317,
          1318,
          1321,
          1324,
          1325,
          1326,
          1327,
          1328,
          1334,
          1335,
          1336,
          1337,
          1338,
          1343,
          1387
        ]
      },
      {
        "test_lines": [
          561,
          578
        ],
        "covered_lines": [
          101,
          103,
          104,
          106,
          107,
          108,
          109,
          110,
          111,
          114,
          115,
          118,
          119,
          120,
          122,
          125,
          126,
          128,
          129,
          548,
          552,
          553,
          556,
          557,
          562,
          563,
          564,
          565,
          566,
          568,
          569,
          570,
          574,
          575,
          577,
          579,
          731,
          734,
          735,
          811,
          812,
          848,
          854,
          855,
          858,
          859,
          863,
          925,
          926,
          1118,
          1119,
          1120,
          1130,
          1131,
          1132,
          1310,
          1314,
          1315,
          1316,
          1317,
          1318,
          1321,
          1324,
          1325,
          1326,
          1327,
          1328,
          1334,
          1335,
          1336,
          1337,
          1338,
          1387
        ]
      },
      {
        "test_lines": [
          584,
          603
        ],
        "covered_lines": [
          101,
          103,
          104,
          106,
          107,
          108,
          109,
          110,
          111,
          114,
          115,
          118,
          119,
          120,
          122,
          125,
          126,
          128,
          129,
          548,
          552,
          553,
          556,
          557,
          562,
          563,
          564,
          565,
          566,
          568,
          574,
          575,
          577,
          579,
          731,
          734,
          735,
          925,
          926,
          1118,
          1119,
          1120,
          1130,
          1131,
          1132,
          1141,
          1142,
          1143,
          1212,
          1215,
          1216,
          1217
        ]
      },
      {
        "test_lines": [
          605,
          617
        ],
        "covered_lines": [
          101,
          103,
          104,
          106,
          107,
          108,
          109,
          110,
          111,
          114,
          115,
          118,
          119,
          120,
          122,
          125,
          126,
          128,
          129,
          292,
          295,
          296,
          299,
          300,
          303,
          319,
          324,
          326,
          327,
          332,
          333,
          334,
          335,
          338,
          340,
          341,
          342,
          347,
          348,
          351,
          358,
          359,
          1118,
          1119,
          1120,
          1130,
          1131,
          1132,
          1141,
          1142,
          1143,
          1226,
          1387
        ]
      },
      {
        "test_lines": [
          620,
          634
        ],
        "covered_lines": [
          101,
          103,
          104,
          106,
          107,
          108,
          109,
          110,
          111,
          114,
          115,
          118,
          119,
          120,
          122,
          125,
          126,
          128,
          129,
          292,
          295,
          296,
          299,
          300,
          303,
          319,
          324,
          326,
          327,
          332,
          333,
          334,
          335,
          338,
          340,
          341,
          342,
          347,
          348,
          351,
          354,
          355,
          356,
          358,
          359,
          826,
          827,
          875,
          881,
          884,
          885,
          1141,
          1142,
          1143,
          1226,
          1310,
          1314,
          1315,
          1316,
          1317,
          1318,
          1321,
          1324,
          1325,
          1326,
          1327,
          1328,
          1334,
          1335,
          1336,
          1337,
          1338,
          1387
        ]
      },
      {
        "test_lines": [
          638,
          665
        ],
        "covered_lines": [
          101,
          103,
          104,
          106,
          107,
          108,
          109,
          110,
          111,
          114,
          115,
          118,
          119,
          120,
          122,
          125,
          126,
          128,
          129,
          548,
          552,
          556,
          557,
          562,
          563,
          564,
          565,
          566,
          568,
          569,
          570,
          574,
          575,
          577,
          579,
          731,
          734,
          735,
          826,
          827,
          875,
          876,
          877,
          881,
          884,
          885,
          925,
          926,
          1310,
          1314,
          1315,
          1316,
          1317,
          1318,
          1321,
          1324,
          1325,
          1326,
          1327,
          1328,
          1334,
          1335,
          1336,
          1337,
          1338,
          1343,
          1387
        ]
      }
    ]
  }
}