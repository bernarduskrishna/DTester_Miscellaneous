{"/bernard/dataset_construction/prep/repos/ofdrw/ofdrw-sign/src/main/java/org/ofdrw/sign/NumberFormatAtomicSignID.java":{"class_content":["package org.ofdrw.sign;\n","\n","import java.util.concurrent.atomic.AtomicInteger;\n","import java.util.regex.Matcher;\n","import java.util.regex.Pattern;\n","\n","/**\n"," * 数字格式的自增的签名ID\n"," * <p>\n"," * 启用前缀格式为： \"NNN\"，例如：'001'\n"," * <p>\n"," * 关闭前缀格式为： \"N\"，例如：'1' （默认）\n"," *\n"," * @author 权观宇\n"," * @since 2020-04-17 04:20:15\n"," */\n","public class NumberFormatAtomicSignID implements SignIDProvider {\n","    /**\n","     * 签名ID自增提供者\n","     */\n","    private final AtomicInteger provider;\n","\n","    /**\n","     * 是否增加0前缀\n","     * <p>\n","     * 默认关闭0前缀\n","     */\n","    private boolean enableZeroPrefix = false;\n","\n","    public NumberFormatAtomicSignID() {\n","        provider = new AtomicInteger(0);\n","    }\n","\n","    /**\n","     * 创建数字构造器\n","     *\n","     * @param enableZeroPrefix 是否启用前缀0，启用后ID格式为'00N'\n","     */\n","    public NumberFormatAtomicSignID(boolean enableZeroPrefix) {\n","        provider = new AtomicInteger(0);\n","        this.enableZeroPrefix = enableZeroPrefix;\n","    }\n","\n","    /**\n","     * 创建指定最大签名ID 签名ID提供器\n","     *\n","     * @param maxSignID 最大签名ID字符串\n","     */\n","    public NumberFormatAtomicSignID(String maxSignID) {\n","        int maxSignIDNum = this.parse(maxSignID);\n","        provider = new AtomicInteger(maxSignIDNum);\n","    }\n","\n","\n","    /**\n","     * 设置当前最大签名ID值\n","     * <p>\n","     * 实现者需要自己解析该字符串，并设置内置计数器\n","     *\n","     * @param maxSignId 当前最大签名ID格式字符串\n","     */\n","    @Override\n","    public void setCurrentMaxSignId(String maxSignId) {\n","        int maxSignIDNum = this.parse(maxSignId);\n","        provider.set(maxSignIDNum);\n","    }\n","\n","    /**\n","     * 增长并获取签名ID\n","     *\n","     * @return 签名ID，形如：'001'\n","     */\n","    @Override\n","    public String incrementAndGet() {\n","        int newSignID = provider.incrementAndGet();\n","        if (enableZeroPrefix) {\n","            return String.format(\"%03d\", newSignID);\n","        } else {\n","            return String.valueOf(newSignID);\n","        }\n","    }\n","\n","    /**\n","     * 获取当前签名ID\n","     *\n","     * @return 签名ID\n","     */\n","    @Override\n","    public String get() {\n","        int maxSignId = provider.get();\n","        if (enableZeroPrefix) {\n","            return String.format(\"%03d\", maxSignId);\n","        } else {\n","            return String.valueOf(maxSignId);\n","        }\n","    }\n","\n","    /**\n","     * 解析出电子签名的ID数字\n","     *\n","     * @param id ID字符串\n","     * @return ID数字\n","     */\n","    @Override\n","    public int parse(String id) {\n","        return Integer.parseInt(id);\n","    }\n","\n","\n","    /**\n","     * 开关是否启用 0前缀\n","     *\n","     * @param enableZeroPrefix true - 启用0前缀； false - 关闭\n","     */\n","    public void setEnableZeroPrefix(boolean enableZeroPrefix) {\n","        this.enableZeroPrefix = enableZeroPrefix;\n","    }\n","\n","    /**\n","     * 是否启用0前缀\n","     *\n","     * @return true - 启用0前缀\n","     */\n","    public boolean isEnableZeroPrefix() {\n","        return enableZeroPrefix;\n","    }\n","}\n"],"test_content":["package org.ofdrw.sign;\n","\n","import org.junit.jupiter.api.Test;\n","\n","import static org.junit.jupiter.api.Assertions.*;\n","\n","/**\n"," * @author 权观宇\n"," * @since 2020-08-24 20:40:54\n"," */\n","class NumberFormatAtomicSignIDTest {\n","    @Test\n","    void constructNumberFormatAtomicSignID() {\n","        NumberFormatAtomicSignID nfas = new NumberFormatAtomicSignID(\"s001\");\n","        String s = nfas.incrementAndGet();\n","        assertEquals(\"002\", s);\n","    }\n","\n","    @Test\n","    void setCurrentMaxSignId() {\n","        NumberFormatAtomicSignID val = new NumberFormatAtomicSignID();\n","        val.setCurrentMaxSignId(\"003\");\n","        String actual = val.get();\n","        assertEquals(\"003\", actual);\n","    }\n","\n","    @Test\n","    void incrementAndGet() {\n","        NumberFormatAtomicSignID val = new NumberFormatAtomicSignID();\n","        String actual = val.incrementAndGet();\n","        assertEquals(\"001\", actual);\n","    }\n","\n","    @Test\n","    void get() {\n","        NumberFormatAtomicSignID val = new NumberFormatAtomicSignID();\n","        String actual = val.get();\n","        assertEquals(\"000\", actual);\n","    }\n","\n","    @Test\n","    void parse() {\n","        NumberFormatAtomicSignID val = new NumberFormatAtomicSignID();\n","        int actual = val.parse(\"079\");\n","        assertEquals(79, actual);\n","    }\n","}"],"method_lines_dic":{"NumberFormatAtomicSignID::::setCurrentMaxSignId(java.lang.String)":[62,66],"NumberFormatAtomicSignID::::incrementAndGet()":[73,81],"NumberFormatAtomicSignID::::get()":[88,96],"NumberFormatAtomicSignID::::parse(java.lang.String)":[104,107],"NumberFormatAtomicSignID::::setEnableZeroPrefix(boolean)":[115,117],"NumberFormatAtomicSignID::::isEnableZeroPrefix()":[124,126]},"test_method_lines_dic":{"NumberFormatAtomicSignIDTest::::constructNumberFormatAtomicSignID()":[12,17],"NumberFormatAtomicSignIDTest::::setCurrentMaxSignId()":[19,25],"NumberFormatAtomicSignIDTest::::incrementAndGet()":[27,32],"NumberFormatAtomicSignIDTest::::get()":[34,39],"NumberFormatAtomicSignIDTest::::parse()":[41,46]},"reverse_method_lines_dic":{"62":"NumberFormatAtomicSignID::::setCurrentMaxSignId(java.lang.String)","63":"NumberFormatAtomicSignID::::setCurrentMaxSignId(java.lang.String)","64":"NumberFormatAtomicSignID::::setCurrentMaxSignId(java.lang.String)","65":"NumberFormatAtomicSignID::::setCurrentMaxSignId(java.lang.String)","66":"NumberFormatAtomicSignID::::setCurrentMaxSignId(java.lang.String)","73":"NumberFormatAtomicSignID::::incrementAndGet()","74":"NumberFormatAtomicSignID::::incrementAndGet()","75":"NumberFormatAtomicSignID::::incrementAndGet()","76":"NumberFormatAtomicSignID::::incrementAndGet()","77":"NumberFormatAtomicSignID::::incrementAndGet()","78":"NumberFormatAtomicSignID::::incrementAndGet()","79":"NumberFormatAtomicSignID::::incrementAndGet()","80":"NumberFormatAtomicSignID::::incrementAndGet()","81":"NumberFormatAtomicSignID::::incrementAndGet()","88":"NumberFormatAtomicSignID::::get()","89":"NumberFormatAtomicSignID::::get()","90":"NumberFormatAtomicSignID::::get()","91":"NumberFormatAtomicSignID::::get()","92":"NumberFormatAtomicSignID::::get()","93":"NumberFormatAtomicSignID::::get()","94":"NumberFormatAtomicSignID::::get()","95":"NumberFormatAtomicSignID::::get()","96":"NumberFormatAtomicSignID::::get()","104":"NumberFormatAtomicSignID::::parse(java.lang.String)","105":"NumberFormatAtomicSignID::::parse(java.lang.String)","106":"NumberFormatAtomicSignID::::parse(java.lang.String)","107":"NumberFormatAtomicSignID::::parse(java.lang.String)","115":"NumberFormatAtomicSignID::::setEnableZeroPrefix(boolean)","116":"NumberFormatAtomicSignID::::setEnableZeroPrefix(boolean)","117":"NumberFormatAtomicSignID::::setEnableZeroPrefix(boolean)","124":"NumberFormatAtomicSignID::::isEnableZeroPrefix()","125":"NumberFormatAtomicSignID::::isEnableZeroPrefix()","126":"NumberFormatAtomicSignID::::isEnableZeroPrefix()"},"test_reverse_method_lines_dic":{"12":"NumberFormatAtomicSignIDTest::::constructNumberFormatAtomicSignID()","13":"NumberFormatAtomicSignIDTest::::constructNumberFormatAtomicSignID()","14":"NumberFormatAtomicSignIDTest::::constructNumberFormatAtomicSignID()","15":"NumberFormatAtomicSignIDTest::::constructNumberFormatAtomicSignID()","16":"NumberFormatAtomicSignIDTest::::constructNumberFormatAtomicSignID()","17":"NumberFormatAtomicSignIDTest::::constructNumberFormatAtomicSignID()","19":"NumberFormatAtomicSignIDTest::::setCurrentMaxSignId()","20":"NumberFormatAtomicSignIDTest::::setCurrentMaxSignId()","21":"NumberFormatAtomicSignIDTest::::setCurrentMaxSignId()","22":"NumberFormatAtomicSignIDTest::::setCurrentMaxSignId()","23":"NumberFormatAtomicSignIDTest::::setCurrentMaxSignId()","24":"NumberFormatAtomicSignIDTest::::setCurrentMaxSignId()","25":"NumberFormatAtomicSignIDTest::::setCurrentMaxSignId()","27":"NumberFormatAtomicSignIDTest::::incrementAndGet()","28":"NumberFormatAtomicSignIDTest::::incrementAndGet()","29":"NumberFormatAtomicSignIDTest::::incrementAndGet()","30":"NumberFormatAtomicSignIDTest::::incrementAndGet()","31":"NumberFormatAtomicSignIDTest::::incrementAndGet()","32":"NumberFormatAtomicSignIDTest::::incrementAndGet()","34":"NumberFormatAtomicSignIDTest::::get()","35":"NumberFormatAtomicSignIDTest::::get()","36":"NumberFormatAtomicSignIDTest::::get()","37":"NumberFormatAtomicSignIDTest::::get()","38":"NumberFormatAtomicSignIDTest::::get()","39":"NumberFormatAtomicSignIDTest::::get()","41":"NumberFormatAtomicSignIDTest::::parse()","42":"NumberFormatAtomicSignIDTest::::parse()","43":"NumberFormatAtomicSignIDTest::::parse()","44":"NumberFormatAtomicSignIDTest::::parse()","45":"NumberFormatAtomicSignIDTest::::parse()","46":"NumberFormatAtomicSignIDTest::::parse()"},"tests":[{"test_lines":[41,46],"covered_lines":[28,30,31,32,106],"label":"NumberFormatAtomicSignID::::parse(java.lang.String)"}]},"/bernard/dataset_construction/prep/repos/ofdrw/ofdrw-sign/src/main/java/org/ofdrw/sign/StandFormatAtomicSignID.java":{"class_content":["package org.ofdrw.sign;\n","\n","import java.util.concurrent.atomic.AtomicInteger;\n","import java.util.regex.Matcher;\n","import java.util.regex.Pattern;\n","\n","/**\n"," * 自增的签名ID\n"," *\n"," * @author 权观宇\n"," * @since 2020-04-17 04:20:15\n"," */\n","public class StandFormatAtomicSignID implements SignIDProvider {\n","\n","    /**\n","     * 签名ID自增提供者\n","     */\n","    private final AtomicInteger provider;\n","\n","    public StandFormatAtomicSignID() {\n","        provider = new AtomicInteger(0);\n","    }\n","\n","    /**\n","     * 创建指定最大签名ID 签名ID提供器\n","     *\n","     * @param maxSignID 最大签名ID字符串\n","     */\n","    public StandFormatAtomicSignID(String maxSignID) {\n","        int maxSignIDNum = this.parse(maxSignID);\n","        provider = new AtomicInteger(maxSignIDNum);\n","    }\n","\n","\n","    /**\n","     * 设置当前最大签名ID值\n","     * <p>\n","     * 实现者需要自己解析该字符串，并设置内置计数器\n","     *\n","     * @param maxSignId 当前最大签名ID格式字符串\n","     */\n","    @Override\n","    public void setCurrentMaxSignId(String maxSignId) {\n","        int maxSignIDNum = this.parse(maxSignId);\n","        provider.set(maxSignIDNum);\n","    }\n","\n","    /**\n","     * 增长并获取签名ID\n","     *\n","     * @return 签名ID，形如：'s001'\n","     */\n","    @Override\n","    public String incrementAndGet() {\n","        int newSignID = provider.incrementAndGet();\n","        return String.format(\"s%03d\", newSignID);\n","    }\n","\n","    /**\n","     * 获取当前签名ID\n","     * @return 签名ID\n","     */\n","    @Override\n","    public String get(){\n","        int maxSignId = provider.get();\n","        return String.format(\"s%03d\", maxSignId);\n","    }\n","\n","    /**\n","     * 解析出电子签名的ID数字\n","     *\n","     * @param id ID字符串\n","     * @return ID数字\n","     */\n","    @Override\n","    public int parse(String id) {\n","        return SignIdParser.parseIndex(id);\n","    }\n","\n","}\n"],"test_content":["package org.ofdrw.sign;\n","\n","import org.junit.jupiter.api.Test;\n","\n","import java.util.regex.Matcher;\n","\n","import static org.junit.jupiter.api.Assertions.*;\n","\n","class StandFormatAtomicSignIDTest {\n","    @Test\n","    public void testPattern() {\n","        String str = \"s001\";\n","        Matcher m = StandFormatAtomicSignID.IDPattern.matcher(str);\n","        if (m.find()) {\n","            String idNumStr = m.group(1);\n","            System.out.println(idNumStr);\n","            System.out.println(Integer.parseInt(idNumStr));\n","        }\n","    }\n","\n","    @Test\n","    public void incrementAndGet() {\n","        StandFormatAtomicSignID standFormatAtomicSignID = new StandFormatAtomicSignID();\n","        String s = standFormatAtomicSignID.incrementAndGet();\n","        assertEquals(\"s001\", s);\n","    }\n","\n","    @Test\n","    public void constructTest(){\n","        StandFormatAtomicSignID standFormatAtomicSignID = new StandFormatAtomicSignID(\"s776\");\n","        String s = standFormatAtomicSignID.incrementAndGet();\n","        assertEquals(\"s777\", s);\n","    }\n","}"],"method_lines_dic":{"StandFormatAtomicSignID::::setCurrentMaxSignId(java.lang.String)":[42,46],"StandFormatAtomicSignID::::incrementAndGet()":[53,57],"StandFormatAtomicSignID::::get()":[63,67],"StandFormatAtomicSignID::::parse(java.lang.String)":[75,78]},"test_method_lines_dic":{"StandFormatAtomicSignIDTest::::testPattern()":[10,19],"StandFormatAtomicSignIDTest::::incrementAndGet()":[21,26],"StandFormatAtomicSignIDTest::::constructTest()":[28,33]},"reverse_method_lines_dic":{"42":"StandFormatAtomicSignID::::setCurrentMaxSignId(java.lang.String)","43":"StandFormatAtomicSignID::::setCurrentMaxSignId(java.lang.String)","44":"StandFormatAtomicSignID::::setCurrentMaxSignId(java.lang.String)","45":"StandFormatAtomicSignID::::setCurrentMaxSignId(java.lang.String)","46":"StandFormatAtomicSignID::::setCurrentMaxSignId(java.lang.String)","53":"StandFormatAtomicSignID::::incrementAndGet()","54":"StandFormatAtomicSignID::::incrementAndGet()","55":"StandFormatAtomicSignID::::incrementAndGet()","56":"StandFormatAtomicSignID::::incrementAndGet()","57":"StandFormatAtomicSignID::::incrementAndGet()","63":"StandFormatAtomicSignID::::get()","64":"StandFormatAtomicSignID::::get()","65":"StandFormatAtomicSignID::::get()","66":"StandFormatAtomicSignID::::get()","67":"StandFormatAtomicSignID::::get()","75":"StandFormatAtomicSignID::::parse(java.lang.String)","76":"StandFormatAtomicSignID::::parse(java.lang.String)","77":"StandFormatAtomicSignID::::parse(java.lang.String)","78":"StandFormatAtomicSignID::::parse(java.lang.String)"},"test_reverse_method_lines_dic":{"10":"StandFormatAtomicSignIDTest::::testPattern()","11":"StandFormatAtomicSignIDTest::::testPattern()","12":"StandFormatAtomicSignIDTest::::testPattern()","13":"StandFormatAtomicSignIDTest::::testPattern()","14":"StandFormatAtomicSignIDTest::::testPattern()","15":"StandFormatAtomicSignIDTest::::testPattern()","16":"StandFormatAtomicSignIDTest::::testPattern()","17":"StandFormatAtomicSignIDTest::::testPattern()","18":"StandFormatAtomicSignIDTest::::testPattern()","19":"StandFormatAtomicSignIDTest::::testPattern()","21":"StandFormatAtomicSignIDTest::::incrementAndGet()","22":"StandFormatAtomicSignIDTest::::incrementAndGet()","23":"StandFormatAtomicSignIDTest::::incrementAndGet()","24":"StandFormatAtomicSignIDTest::::incrementAndGet()","25":"StandFormatAtomicSignIDTest::::incrementAndGet()","26":"StandFormatAtomicSignIDTest::::incrementAndGet()","28":"StandFormatAtomicSignIDTest::::constructTest()","29":"StandFormatAtomicSignIDTest::::constructTest()","30":"StandFormatAtomicSignIDTest::::constructTest()","31":"StandFormatAtomicSignIDTest::::constructTest()","32":"StandFormatAtomicSignIDTest::::constructTest()","33":"StandFormatAtomicSignIDTest::::constructTest()"},"tests":[{"test_lines":[21,26],"covered_lines":[20,21,22,55,56],"label":"StandFormatAtomicSignID::::incrementAndGet()"},{"test_lines":[28,33],"covered_lines":[29,30,31,32,55,56,77],"label":"<<UNRECOGNISED_METHOD>>"}]},"/bernard/dataset_construction/prep/repos/ofdrw/ofdrw-sign/src/main/java/org/ofdrw/sign/SignIdParser.java":{"class_content":["package org.ofdrw.sign;\n","\n","import java.util.regex.Matcher;\n","\n","/**\n"," * 签名ID解析器\n"," *\n"," * @author 权观宇\n"," * @since 2020-10-13 19:38:50\n"," */\n","public class SignIdParser {\n","\n","    /**\n","     * 解析出电子签名的ID数字\n","     * <p>\n","     * 支持标准推荐样式s'NNN'、sN、N三种类型签名ID的解析\n","     *\n","     * @param id ID字符串\n","     * @return ID数字\n","     */\n","    public static int parseIndex(String id) {\n","        Matcher m = SignIDProvider.IDPattern.matcher(id);\n","        if (m.find()) {\n","            String idNumStr = m.group(1);\n","            return Integer.parseInt(idNumStr);\n","        } else {\n","            return Integer.parseInt(id);\n","        }\n","    }\n","}\n"],"test_content":["package org.ofdrw.sign;\n","\n","import org.junit.jupiter.api.Test;\n","\n","import static org.junit.jupiter.api.Assertions.*;\n","\n","/**\n"," * 签名ID解析器\n"," * @author 权观宇\n"," * @since 2020-10-13 19:39:56\n"," */\n","class SignIdParserTest {\n","\n","    @Test\n","    void parseIndex() {\n","        int id = SignIdParser.parseIndex(\"s776\");\n","        assertEquals(776, id);\n","    }\n","}"],"method_lines_dic":{"SignIdParser::::parseIndex(java.lang.String)":[21,29]},"test_method_lines_dic":{"SignIdParserTest::::parseIndex()":[14,18]},"reverse_method_lines_dic":{"21":"SignIdParser::::parseIndex(java.lang.String)","22":"SignIdParser::::parseIndex(java.lang.String)","23":"SignIdParser::::parseIndex(java.lang.String)","24":"SignIdParser::::parseIndex(java.lang.String)","25":"SignIdParser::::parseIndex(java.lang.String)","26":"SignIdParser::::parseIndex(java.lang.String)","27":"SignIdParser::::parseIndex(java.lang.String)","28":"SignIdParser::::parseIndex(java.lang.String)","29":"SignIdParser::::parseIndex(java.lang.String)"},"test_reverse_method_lines_dic":{"14":"SignIdParserTest::::parseIndex()","15":"SignIdParserTest::::parseIndex()","16":"SignIdParserTest::::parseIndex()","17":"SignIdParserTest::::parseIndex()","18":"SignIdParserTest::::parseIndex()"},"tests":[{"test_lines":[14,18],"covered_lines":[22,23,24,25],"label":"SignIdParser::::parseIndex(java.lang.String)"}]},"/bernard/dataset_construction/prep/repos/ofdrw/ofdrw-sign/src/main/java/org/ofdrw/sign/OFDSigner.java":{"class_content":["package org.ofdrw.sign;\n","\n","\n","import org.apache.commons.io.FilenameUtils;\n","import org.dom4j.DocumentException;\n","import org.ofdrw.core.basicType.ST_Loc;\n","import org.ofdrw.core.signatures.SigType;\n","import org.ofdrw.core.signatures.Signatures;\n","import org.ofdrw.core.signatures.appearance.Seal;\n","import org.ofdrw.core.signatures.range.Reference;\n","import org.ofdrw.core.signatures.range.References;\n","import org.ofdrw.core.signatures.sig.Parameters;\n","import org.ofdrw.core.signatures.sig.Provider;\n","import org.ofdrw.core.signatures.sig.Signature;\n","import org.ofdrw.core.signatures.sig.SignedInfo;\n","import org.ofdrw.gv.GlobalVar;\n","import org.ofdrw.pkg.container.OFDDir;\n","import org.ofdrw.pkg.container.SignDir;\n","import org.ofdrw.pkg.container.SignsDir;\n","import org.ofdrw.reader.BadOFDException;\n","import org.ofdrw.reader.OFDReader;\n","import org.ofdrw.reader.ResourceLocator;\n","import org.ofdrw.sign.stamppos.StampAppearance;\n","\n","import java.io.*;\n","import java.nio.file.*;\n","import java.nio.file.attribute.BasicFileAttributes;\n","import java.security.DigestInputStream;\n","import java.security.GeneralSecurityException;\n","import java.security.MessageDigest;\n","import java.time.LocalDateTime;\n","import java.time.format.DateTimeFormatter;\n","import java.util.LinkedList;\n","import java.util.List;\n","\n","/**\n"," * OFD文档数字签章引擎\n"," * <p>\n"," * 签章和验证操作均针对于OFD文档中的第一个文档\n"," *\n"," * @author 权观宇\n"," * @since 2020-04-17 02:11:56\n"," */\n","public class OFDSigner implements Closeable {\n","\n","\n","    /**\n","     * 时间日期格式\n","     */\n","    public static final DateTimeFormatter DF = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\n","\n","    /**\n","     * @return OFDRW 签名提供者\n","     */\n","    public static Provider OFDRW_Provider() {\n","        return new Provider()\n","                .setProviderName(\"ofdrw-sign\")\n","                .setCompany(\"ofdrw\")\n","                .setVersion(GlobalVar.Version);\n","    }\n","\n","    /**\n","     * OFD虚拟容器\n","     */\n","    private OFDDir ofdDir;\n","    /**\n","     * OFD解析器\n","     */\n","    private OFDReader reader;\n","\n","    /**\n","     * 最大签名ID提供者\n","     */\n","    private SignIDProvider MaxSignID;\n","\n","    /**\n","     * 数字签名模式\n","     * <p>\n","     * 默认：保护整个文档的数字签名模式\n","     */\n","    private SignMode signMode;\n","\n","    /**\n","     * 签名扩展属性\n","     */\n","    private Parameters parameters;\n","\n","    /**\n","     * 签名列表文件绝对路径\n","     * <p>\n","     * 为空 - 表示需要更新主入口文件OFD.xml；\n","     */\n","    private ST_Loc signaturesLoc;\n","\n","    /**\n","     * 签章外观列表\n","     */\n","    private List<StampAppearance> apList;\n","\n","\n","    /**\n","     * 待保护的文件的过滤器\n","     * <p>\n","     * 该过滤器会在签章之前调用，它会遍历OFD内的\n","     * 每一个文件，由过滤器的结果来决定是否需要加入到签章保护范围中去。\n","     */\n","    private ProtectFileFilter protectFileFilter;\n","\n","\n","    /**\n","     * 签名实现容器\n","     */\n","    private ExtendSignatureContainer signContainer;\n","\n","    /**\n","     * 电子签名后文件保存位置\n","     */\n","    private Path out;\n","\n","    /**\n","     * 电子签名后文件输出流\n","     */\n","    private OutputStream outStream;\n","\n","    /**\n","     * 是否已经执行exeSign\n","     */\n","    private boolean hasSign;\n","\n","    /**\n","     * 【2.0 版增加】\n","     * 此签名基于的签名标识符，一旦签名标注的该属性，则验证时应同时验证“基”签名\n","     */\n","    private String relativeID = null;\n","\n","\n","    /**\n","     * 不允许调用无参数构造器\n","     */\n","    private OFDSigner() {\n","    }\n","\n","    /**\n","     * 创建OFD签名对象\n","     * <p>\n","     * 默认使用数字类型的ID构造器提供电子签章的ID\n","     *\n","     * @param reader    OFD解析器\n","     * @param outStream 电子签名后文件保存位置\n","     * @throws SignatureTerminateException 签名终止异常\n","     * @since 2022-6-24 23:21:18\n","     */\n","    public OFDSigner(OFDReader reader, OutputStream outStream) throws SignatureTerminateException {\n","        if (reader == null) {\n","            throw new IllegalArgumentException(\"OFD解析器（reader）为空\");\n","        }\n","        if (outStream == null) {\n","            throw new IllegalArgumentException(\"电子签名后文件输出流（outStream）为空\");\n","        }\n","\n","\n","        this.outStream = outStream;\n","        setProperty(reader, new NumberFormatAtomicSignID(false));\n","    }\n","\n","\n","    /**\n","     * 创建OFD签名对象\n","     *\n","     * @param reader     OFD解析器\n","     * @param outStream  电子签名后文件保存位置\n","     * @param idProvider 签名文件ID提供器\n","     * @throws SignatureTerminateException 签名终止异常\n","     * @since 2020-08-24 20:35:45\n","     */\n","    public OFDSigner(OFDReader reader, OutputStream outStream, SignIDProvider idProvider) throws SignatureTerminateException {\n","        if (reader == null) {\n","            throw new IllegalArgumentException(\"OFD解析器（reader）为空\");\n","        }\n","        if (outStream == null) {\n","            throw new IllegalArgumentException(\"电子签名后文件输出流（outStream）为空\");\n","        }\n","        if (idProvider == null) {\n","            throw new IllegalArgumentException(\"签名文件ID提供器（idProvider）为空\");\n","        }\n","\n","        this.outStream = outStream;\n","        setProperty(reader, idProvider);\n","    }\n","\n","    /**\n","     * 创建OFD签名对象\n","     *\n","     * @param reader     OFD解析器\n","     * @param out        电子签名后文件保存位置\n","     * @param idProvider 签名文件ID提供器\n","     * @throws SignatureTerminateException 签名终止异常\n","     * @since 2020-08-24 20:35:45\n","     */\n","    public OFDSigner(OFDReader reader, Path out, SignIDProvider idProvider) throws SignatureTerminateException {\n","        if (reader == null) {\n","            throw new IllegalArgumentException(\"OFD解析器（reader）为空\");\n","        }\n","        if (out == null) {\n","            throw new IllegalArgumentException(\"电子签名后文件保存位置（out）为空\");\n","        }\n","        if (idProvider == null) {\n","            throw new IllegalArgumentException(\"签名文件ID提供器（idProvider）为空\");\n","        }\n","\n","        this.out = out;\n","        setProperty(reader, idProvider);\n","    }\n","\n","    /**\n","     * 数据初始化\n","     */\n","    private void setProperty(OFDReader reader, SignIDProvider idProvider) throws SignatureTerminateException {\n","        this.reader = reader;\n","        this.ofdDir = reader.getOFDDir();\n","        this.hasSign = false;\n","        // 初始化从0起的最大签名ID，如果源文档中已经存在签名文件的情况\n","        // 会在preChecker 设置为当前文件最大ID\n","        this.MaxSignID = idProvider;\n","        apList = new LinkedList<>();\n","        // 默认采用 保护整个文档的数字签名模式\n","        signMode = SignMode.WholeProtected;\n","        signaturesLoc = null;\n","        // 执行签名预检查\n","        preChecker();\n","    }\n","\n","    /**\n","     * 创建OFD签名对象\n","     * <p>\n","     * 默认使用： s'NNN'格式解析和生成签名ID\n","     *\n","     * @param reader OFD解析器\n","     * @param out    电子签名后文件保存位置\n","     * @throws SignatureTerminateException 签名终止异常\n","     */\n","    public OFDSigner(OFDReader reader, Path out) throws SignatureTerminateException {\n","        this(reader, out, new StandFormatAtomicSignID());\n","    }\n","\n","    /**\n","     * 获取签章模式\n","     *\n","     * @return 签章模式\n","     */\n","    public SignMode getSignMode() {\n","        return signMode;\n","    }\n","\n","    /**\n","     * 设置签章模式\n","     *\n","     * @param signMode 签章模式\n","     * @return this\n","     */\n","    public OFDSigner setSignMode(SignMode signMode) {\n","        if (signMode == null) {\n","            signMode = SignMode.WholeProtected;\n","        }\n","        this.signMode = signMode;\n","        return this;\n","    }\n","\n","    /**\n","     * 设置电子签名实现容器\n","     *\n","     * @param signContainer 实现容器\n","     * @return this\n","     */\n","    public OFDSigner setSignContainer(ExtendSignatureContainer signContainer) {\n","        if (signContainer == null) {\n","            throw new IllegalArgumentException(\"签名实现容器（signContainer）为空\");\n","        }\n","        this.signContainer = signContainer;\n","        return this;\n","    }\n","\n","    /**\n","     * 增加签章外观位置\n","     *\n","     * @param sa 签章外观位置\n","     * @return this\n","     */\n","    public OFDSigner addApPos(StampAppearance sa) {\n","        if (sa == null) {\n","            return this;\n","        }\n","        this.apList.add(sa);\n","        return this;\n","    }\n","\n","    /**\n","     * OFD文档预检查\n","     * <p>\n","     * 1. 是否需要根性OFD.xml。\n","     * <p>\n","     * 2. 是否可以继续数字签名，如果Signatures.xml被包含到SignInfo中，那么则不能再继续签名。\n","     *\n","     * @throws SignatureTerminateException 不允许继续签名\n","     */\n","    private void preChecker() throws SignatureTerminateException {\n","        ResourceLocator rl = reader.getResourceLocator();\n","        try {\n","            rl.save();\n","            rl.cd(\"/\");\n","            // 获取Doc_0 的签名列表文件位置\n","            signaturesLoc = reader.getDefaultDocSignaturesPath();\n","            // 如果OFD.xml 不含有签名列表文件路径，那么设置需要更新\n","            // 如果  Signature.xml 文件不存在时候，也需要重新创建\n","            if (signaturesLoc == null || (!rl.exist(signaturesLoc.toString()))) {\n","                // 最大签名ID从0起的\n","                return;\n","            }\n","            // 获取签名列表对象\n","            Signatures signatures = rl.get(signaturesLoc, Signatures::new);\n","\n","            // 载入文档中已有的最大签名ID\n","            String maxSignId = signatures.getMaxSignId();\n","            // 重新设置当前最大签名ID\n","            this.MaxSignID.setCurrentMaxSignId(maxSignId);\n","\n","            // 获取签名文件所在路径\n","            String parent = signaturesLoc.parent();\n","            // 切换工作路径到签名容器中\n","            rl.cd(parent);\n","            List<org.ofdrw.core.signatures.Signature> signatureList = signatures.getSignatures();\n","            // 遍历所有签名容器，判断保护文件中是否包含Signatures.xml\n","            for (org.ofdrw.core.signatures.Signature sig : signatureList) {\n","                ST_Loc baseLoc = sig.getBaseLoc();\n","                Signature sigObj = rl.get(baseLoc, Signature::new);\n","                References refList = sigObj.getSignedInfo().getReferences();\n","                if (refList.hasFile(signaturesLoc.getLoc())) {\n","                    throw new SignatureTerminateException(\"签名列表文件（Signatures.xml）已经被保护，文档不允许继续追加签名\");\n","                }\n","            }\n","        } catch (FileNotFoundException | DocumentException e) {\n","            throw new BadOFDException(\"错误OFD结构和文件格式\", e);\n","        } finally {\n","            rl.restore();\n","        }\n","    }\n","\n","\n","    /**\n","     * 获取文档中待杂凑文件流\n","     *\n","     * @return 文件信息流\n","     */\n","    private List<ToDigestFileInfo> toBeDigestFileList() throws IOException {\n","        List<ToDigestFileInfo> res = new LinkedList<>();\n","\n","        // 获取OFD容器在文件系统中的路径\n","        Path containerPath = ofdDir.getContainerPath();\n","        // 文件系统中的容器Unix类型绝对路径，如：\"/home/root/tmp\"\n","        String sysRoot = FilenameUtils.separatorsToUnix(containerPath.toAbsolutePath().toString());\n","        // 遍历OFD文件目录中的所有文件\n","        Files.walkFileTree(containerPath, new SimpleFileVisitor<Path>() {\n","            @Override\n","            public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) {\n","                // 路径转换为Unix类型的绝对路径\n","                String abxFilePath = FilenameUtils.separatorsToUnix(file.toAbsolutePath().toString());\n","                // 替换文件系统的根路径，这样就为容器系统中的绝对路径\n","                abxFilePath = abxFilePath.replace(sysRoot, \"\");\n","                final ToDigestFileInfo fileInfo = new ToDigestFileInfo(abxFilePath, file);\n","                // 执行文件的过滤行为通过过滤器选择出需要保护的文档。\n","                try {\n","                    if (protectFileFilter != null && !protectFileFilter.filter(fileInfo.getAbsPath())) {\n","                        return FileVisitResult.CONTINUE;\n","                    }\n","                } catch (Exception ignore) {\n","                }\n","                // 如果采用继续签章模式，那么跳过对 Signatures.xml 的文件\n","                if (signMode == SignMode.ContinueSign\n","                        && abxFilePath.equals(signaturesLoc.getLoc())) {\n","                    return FileVisitResult.CONTINUE;\n","                }\n","                // 构造加入文件信息列表\n","                res.add(fileInfo);\n","                return FileVisitResult.CONTINUE;\n","            }\n","        });\n","        return res;\n","    }\n","\n","\n","    /**\n","     * 签名或签章执行器\n","     * <p>\n","     * 1. 构造签名列表。\n","     * <p>\n","     * 2. 计算保护文件杂凑值，设置签章显示位置、印章，构造签名文件。\n","     * <p>\n","     * 3. 计算签名值。\n","     *\n","     * @return Signatures 列表对象\n","     * @throws BadOFDException          文件解析失败，或文件不存在\n","     * @throws IOException              签名和文件读写过程中的IO异常\n","     * @throws GeneralSecurityException 签名异常\n","     */\n","    public Signatures exeSign() throws IOException, GeneralSecurityException {\n","        if (signContainer == null) {\n","            throw new IllegalArgumentException(\"签名实现容器（signContainer）为空，请提供签名实现容器\");\n","        }\n","        hasSign = true;\n","        // 获取数字签名存储目录\n","        SignsDir signsDir = ofdDir.obtainDocDefault().obtainSigns();\n","        // 创建签名容器\n","        SignDir signDir = signsDir.newSignDir();\n","\n","        /*\n","         * 1. 获取签名列表文件对象\n","         *\n","         * 先尝试获取已经存在的 签名列表文件 Signatures.xml\n","         * 根据需要可能需要更新OFD.xml\n","         */\n","        Signatures signListObj = reader.getDefaultSignatures();\n","        if (signaturesLoc == null || signListObj == null) {\n","            signListObj = new Signatures();\n","            signsDir.setSignatures(signListObj);\n","\n","            // 构造签名列表文件路径\n","            signaturesLoc = signsDir.getAbsLoc()\n","                    .cat(SignsDir.SignaturesFileName);\n","            // 设置OFD.xml 的签名列表文件入口\n","            try {\n","                ofdDir.getOfd().getDocBody().setSignatures(signaturesLoc);\n","                // 将更新了的OFD.xml更新到文件系统中\n","                ofdDir.flushFileByName(OFDDir.OFDFileName);\n","            } catch (DocumentException e) {\n","                throw new BadOFDException(\"OFD.xml 文件解析失败\");\n","            }\n","        }\n","\n","        /*\n","         * 2. 向签名列表文件中加入数字签名记录\n","         *\n","         * 如果签名列表文件不存在那么创建，如果已经存在那么更新到文件系统\n","         */\n","        // 签名文件\n","        ST_Loc signatureLoc = signDir.getAbsLoc().cat(SignDir.SignatureFileName);\n","        // 构造列表文件中的签名记录\n","        final org.ofdrw.core.signatures.Signature signatureRecord = new org.ofdrw.core.signatures.Signature()\n","                // 设置ID\n","                .setID(MaxSignID.incrementAndGet())\n","                // 设置数字签名类型\n","                .setType(signContainer.getSignType())\n","                // 设置签名文件位置\n","                .setBaseLoc(signatureLoc);\n","        if (this.relativeID != null && this.relativeID.trim().length() > 0) {\n","            signatureRecord.setRelative(this.relativeID);\n","        }\n","        // 放入签名列表中\n","        signListObj.addSignature(signatureRecord);\n","        /*\n","         * 3. 构建签名文件对象\n","         *\n","         * - 设置算法\n","         * - 设置提供者\n","         * - 计算保护文件摘要值\n","         * - 签名文件构造\n","         */\n","        Path signatureFilePath = buildSignature(signsDir, signDir, signListObj);\n","        /*\n","         * 4. 计算数字签名获取签名值\n","         */\n","        // 设置签章原文的保护信息为：签名文件容器中绝对路径。\n","        String propertyInfo = signDir.getAbsLoc().cat(SignDir.SignatureFileName).toString();\n","        // 调用容器提供方法计算签章值。\n","        byte[] signedValue;\n","        try (InputStream inData = Files.newInputStream(signatureFilePath)) {\n","            signedValue = signContainer.sign(inData, propertyInfo);\n","        }\n","        Path signedValuePath = Paths.get(signDir.getSysAbsPath(), SignDir.SignedValueFileName);\n","        // 将签名值写入到 SignedValue.dat中\n","        Files.write(signedValuePath, signedValue);\n","        return signListObj;\n","    }\n","\n","    /**\n","     * 构造一个签名文件\n","     * <p>\n","     * 并写入到签名容器中\n","     *\n","     * @param signsDir    签名容器\n","     * @param signDir     签名资源容器\n","     * @param signListObj 签名列表描述对象\n","     * @return 签名文件文件系统路径\n","     * @throws SignatureException 签名异常\n","     * @throws IOException        文件读写IO操作异常\n","     */\n","    private Path buildSignature(SignsDir signsDir,\n","                                SignDir signDir,\n","                                Signatures signListObj) throws IOException, SignatureException {\n","        // 构造签名信息\n","        SignedInfo signedInfo = new SignedInfo()\n","                // 设置签名模块提供者信息\n","                .setProvider(OFDRW_Provider())\n","                // 设置签名方法\n","                .setSignatureMethod(signContainer.getSignAlgOID())\n","                // 设置签名扩展属性\n","                .setParameters(parameters)\n","                // 设置签名时间\n","                .setSignatureDateTime(DF.format(LocalDateTime.now()));\n","\n","        // 如果是电子签章，那么设置电子印章\n","        final ST_Loc signDirAbsLoc = signDir.getAbsLoc();\n","        if (signContainer.getSignType() == SigType.Seal) {\n","            // 获取电子印章二进制字节\n","            byte[] sealBin = signContainer.getSeal();\n","            // 由于电子印章参数为可选参数，这里移除非空检查\n","            if (sealBin != null && sealBin.length != 0) {\n","                Path sealPath = Paths.get(signDir.getSysAbsPath(), SignDir.SealFileName);\n","                // 将电子印章写入文件\n","                Files.write(sealPath, sealBin);\n","                // 构造印章信息\n","                Seal seal = new Seal().setBaseLoc(signDirAbsLoc.cat(SignDir.SealFileName));\n","                signedInfo.setSeal(seal);\n","            }\n","        }\n","\n","        // 加入签名关联的外观\n","        if (!apList.isEmpty()) {\n","            for (StampAppearance sa : apList) {\n","                // 解析除外观注解然后加入签名信息中\n","                sa.getAppearance(reader, MaxSignID).forEach(signedInfo::addStampAnnot);\n","            }\n","        }\n","\n","        /*\n","         * 结束了所有需要分配的签名ID\n","         *\n","         * 写入了除了签名值文件之外的所有文件\n","         *\n","         * - 设置签名列表描述对象的最大ID\n","         * - 将签名列表文件更新到文件系统\n","         */\n","        signListObj.setMaxSignId(MaxSignID.get());\n","        signsDir.flushFileByName(SignsDir.SignaturesFileName);\n","\n","        /*\n","         * 计算并设置所保护的所有文件的摘要\n","         */\n","        MessageDigest md = signContainer.getDigestFnc();\n","        References references = new References()\n","                // 设置摘要方法\n","                .setCheckMethod(md.getAlgorithm());\n","        // 获取要被保护的文件信息序列\n","        List<ToDigestFileInfo> toDigestFileInfos = toBeDigestFileList();\n","        for (ToDigestFileInfo fileInfo : toDigestFileInfos) {\n","            // 计算文件杂凑值\n","            byte[] digest = calculateFileDigest(md, fileInfo.getSysPath());\n","            // 重置杂凑函数\n","            md.reset();\n","            Reference ref = new Reference()\n","                    .setFileRef(fileInfo.getAbsPath())\n","                    .setCheckValue(digest);\n","            references.addReference(ref);\n","        }\n","        // 设置摘要列表，完成\"签名要保护的原文及本次签名相关的信息\"的构造\n","        signedInfo.setReferences(references);\n","\n","        /*\n","         * 完成 签名描述文件的根节点 构造\n","         *\n","         * 序列化为文件写入到文件系统\n","         */\n","        Signature signature = new Signature()\n","                // 设置签名数据文件位置\n","                .setSignedValue(signDirAbsLoc.cat(SignDir.SignedValueFileName))\n","                .setSignedInfo(signedInfo);\n","        signDir.setSignature(signature);\n","        // 将签名描述文件根节点写入到文件系统中\n","        signDir.flushFileByName(SignDir.SignatureFileName);\n","        // 获取写入文件的操作系统路径\n","        return Paths.get(signDir.getSysAbsPath(), SignDir.SignatureFileName);\n","    }\n","\n","    /**\n","     * 使用多次读取计算文件杂凑值\n","     * <p>\n","     * 减少内存使用\n","     *\n","     * @param md   杂凑计算函数\n","     * @param path 文件路径\n","     * @return 杂凑值\n","     * @throws IOException IO读写异常\n","     */\n","    private byte[] calculateFileDigest(MessageDigest md, Path path) throws IOException {\n","        try (InputStream in = Files.newInputStream(path);\n","             DigestInputStream dis = new DigestInputStream(in, md)) {\n","            byte[] buffer = new byte[4096];\n","            // 根据缓存读入\n","            while (dis.read(buffer) > -1) ;\n","            // 计算最终文件杂凑值\n","            return md.digest();\n","        }\n","    }\n","\n","    /**\n","     * 进行签名/章\n","     * <p>\n","     * 然后关闭文档\n","     *\n","     * @throws IOException 打包文件过程中IO异常\n","     */\n","    @Override\n","    public void close() throws IOException {\n","        if (!hasSign) {\n","            throw new IllegalStateException(\"请先执行 exeSign在关闭引擎完成数字签名。\");\n","        }\n","        // 打包电子签名后的OFD文件\n","        if (out != null) {\n","            ofdDir.jar(out);\n","        } else if (outStream != null) {\n","            ofdDir.jar(outStream);\n","        } else {\n","            throw new IllegalArgumentException(\"OFD文档输出目录错误或没有设置输出流\");\n","        }\n","        // 关闭OFD解析器\n","        reader.close();\n","    }\n","\n","    /**\n","     * 设置 文件过滤器\n","     * <p>\n","     * 通过过滤器来实现选择需要保护的文件\n","     *\n","     * @param filter 过滤器\n","     * @return this\n","     */\n","    public OFDSigner setProtectFileFilter(ProtectFileFilter filter) {\n","        this.protectFileFilter = filter;\n","        return this;\n","    }\n","\n","    /**\n","     * 【可选 OFD 2.0】\n","     * 设置 此签名基于的签名标识符\n","     * <p>\n","     * 一旦签名标注的该属性，则验证时应同时验证“基”签名\n","     *\n","     * @param id “基”签名ID\n","     * @return this\n","     */\n","    public OFDSigner setRelative(String id) {\n","        this.relativeID = id;\n","        return this;\n","    }\n","\n","    /**\n","     * 设置签名扩展属性\n","     *\n","     * @param parameters 扩展属性\n","     * @return this\n","     */\n","    public OFDSigner setParameters(Parameters parameters) {\n","        this.parameters = parameters;\n","        return this;\n","    }\n","}\n"],"test_content":["package org.ofdrw.sign;\n","\n","import org.junit.jupiter.api.Assertions;\n","import org.junit.jupiter.api.Test;\n","import org.ofdrw.core.signatures.Signatures;\n","import org.ofdrw.gm.cert.PKCS12Tools;\n","import org.ofdrw.gm.ses.v4.SESeal;\n","import org.ofdrw.reader.OFDReader;\n","import org.ofdrw.sign.signContainer.SESV4Container;\n","import org.ofdrw.sign.stamppos.NormalStampPos;\n","import org.ofdrw.sign.verify.OFDValidator;\n","import org.ofdrw.sign.verify.container.SESV4ValidateContainer;\n","\n","import java.io.IOException;\n","import java.nio.file.Files;\n","import java.nio.file.Path;\n","import java.nio.file.Paths;\n","import java.security.GeneralSecurityException;\n","import java.security.PrivateKey;\n","import java.security.cert.Certificate;\n","\n","/**\n"," * OFD签名引擎测试\n"," *\n"," * @author 权观宇\n"," * @since 2020-04-18 11:10:43\n"," */\n","class OFDSignerTest {\n","\n","    /**\n","     * 测试文档中没有Doc_0 只有Doc_1的情况签章\n","     *\n","     * @throws GeneralSecurityException _\n","     * @throws IOException              _\n","     */\n","    @Test\n","    void testOnlyDoc1Sign() throws GeneralSecurityException, IOException {\n","        Path userP12Path = Paths.get(\"src/test/resources\", \"USER.p12\");\n","        Path sealPath = Paths.get(\"src/test/resources\", \"UserV4.esl\");\n","\n","        PrivateKey prvKey = PKCS12Tools.ReadPrvKey(userP12Path, \"private\", \"777777\");\n","        Certificate signCert = PKCS12Tools.ReadUserCert(userP12Path, \"private\", \"777777\");\n","        SESeal seal = SESeal.getInstance(Files.readAllBytes(sealPath));\n","\n","        Path src = Paths.get(\"src/test/resources\", \"doc1File.ofd\");\n","        Path out = Paths.get(\"target/Doc1FileSigned.ofd\");\n","\n","        // 1. 构造签名引擎\n","        try (OFDReader reader = new OFDReader(src);\n","             OFDSigner signer = new OFDSigner(reader, out, new NumberFormatAtomicSignID())\n","        ) {\n","            SESV4Container signContainer = new SESV4Container(prvKey, seal, signCert);\n","            // 2. 设置签名模式\n","            signer.setSignMode(SignMode.WholeProtected);\n","            // 3. 设置签名使用的扩展签名容器\n","            signer.setSignContainer(signContainer);\n","            // 4. 设置显示位置\n","            signer.addApPos(new NormalStampPos(1, 50, 50, 40, 40));\n","            // 5. 执行签名\n","            signer.exeSign();\n","            // 6. 关闭签名引擎，生成文档。\n","        }\n","        // 验证\n","        try (OFDReader reader = new OFDReader(out);\n","             OFDValidator validator = new OFDValidator(reader)) {\n","            validator.setValidator(new SESV4ValidateContainer());\n","            validator.exeValidate();\n","            System.out.println(\">> 验证通过\");\n","        }\n","\n","    }\n","\n","    /**\n","     * 已经有印章的情况下再追加签章\n","     *\n","     * @throws GeneralSecurityException _\n","     * @throws IOException              _\n","     */\n","    @Test\n","    void reSignTest() throws GeneralSecurityException, IOException {\n","        Path userP12Path = Paths.get(\"src/test/resources\", \"USER.p12\");\n","        Path sealPath = Paths.get(\"src/test/resources\", \"UserV4.esl\");\n","\n","        PrivateKey prvKey = PKCS12Tools.ReadPrvKey(userP12Path, \"private\", \"777777\");\n","        Certificate signCert = PKCS12Tools.ReadUserCert(userP12Path, \"private\", \"777777\");\n","        SESeal seal = SESeal.getInstance(Files.readAllBytes(sealPath));\n","\n","        Path src = Paths.get(\"src/test/resources\", \"signedFile.ofd\");\n","        Path out = Paths.get(\"target/ReSign.ofd\");\n","\n","        // 1. 构造签名引擎\n","        try (OFDReader reader = new OFDReader(src);\n","             OFDSigner signer = new OFDSigner(reader, out, new NumberFormatAtomicSignID())\n","        ) {\n","            SESV4Container signContainer = new SESV4Container(prvKey, seal, signCert);\n","            // 2. 设置签名模式\n","            signer.setSignMode(SignMode.WholeProtected);\n","            // 3. 设置签名使用的扩展签名容器\n","            signer.setSignContainer(signContainer);\n","            // 4. 设置显示位置\n","            signer.addApPos(new NormalStampPos(1, 50, 50, 40, 40));\n","            // 5. 执行签名\n","            signer.exeSign();\n","            // 6. 关闭签名引擎，生成文档。\n","        }\n","\n","        // 验证\n","        try (OFDReader reader = new OFDReader(out);\n","             OFDValidator validator = new OFDValidator(reader)) {\n","            validator.setValidator(new SESV4ValidateContainer());\n","            validator.exeValidate();\n","            System.out.println(\">> 验证通过\");\n","        }\n","    }\n","\n","    /**\n","     * 文档全保护状态下签章测试，应该抛出异常\n","     *\n","     * @throws GeneralSecurityException _\n","     * @throws IOException              _\n","     */\n","    @Test\n","    void reSignExceptionTest() throws GeneralSecurityException, IOException {\n","        Path userP12Path = Paths.get(\"src/test/resources\", \"USER.p12\");\n","        Path sealPath = Paths.get(\"src/test/resources\", \"UserV4.esl\");\n","\n","        PrivateKey prvKey = PKCS12Tools.ReadPrvKey(userP12Path, \"private\", \"777777\");\n","        Certificate signCert = PKCS12Tools.ReadUserCert(userP12Path, \"private\", \"777777\");\n","        SESeal seal = SESeal.getInstance(Files.readAllBytes(sealPath));\n","\n","        Path src = Paths.get(\"src/test/resources\", \"allprotected.ofd\");\n","        Path out = Paths.get(\"target/ReSignException.ofd\");\n","        Assertions.assertThrows(SignatureTerminateException.class, () -> {\n","            // 1. 构造签名引擎\n","            try (OFDReader reader = new OFDReader(src);\n","                 OFDSigner signer = new OFDSigner(reader, out, new NumberFormatAtomicSignID())\n","            ) {\n","                SESV4Container signContainer = new SESV4Container(prvKey, seal, signCert);\n","                // 2. 设置签名模式\n","                signer.setSignMode(SignMode.WholeProtected);\n","                // 3. 设置签名使用的扩展签名容器\n","                signer.setSignContainer(signContainer);\n","                // 4. 设置显示位置\n","                signer.addApPos(new NormalStampPos(1, 50, 50, 40, 40));\n","                // 5. 执行签名\n","                signer.exeSign();\n","                // 6. 关闭签名引擎，生成文档。\n","            }\n","        });\n","    }\n","\n","    /**\n","     * 过滤需要被保护的文件\n","     */\n","    @Test\n","    void setProtectFileFilter() throws IOException, GeneralSecurityException {\n","        Path userP12Path = Paths.get(\"src/test/resources\", \"USER.p12\");\n","        Path sealPath = Paths.get(\"src/test/resources\", \"UserV4.esl\");\n","\n","        PrivateKey prvKey = PKCS12Tools.ReadPrvKey(userP12Path, \"private\", \"777777\");\n","        Certificate signCert = PKCS12Tools.ReadUserCert(userP12Path, \"private\", \"777777\");\n","        SESeal seal = SESeal.getInstance(Files.readAllBytes(sealPath));\n","\n","        Path src = Paths.get(\"src/test/resources\", \"helloworld.ofd\");\n","        Path out = Paths.get(\"target/filter_ed.ofd\");\n","        // 1. 构造签名引擎\n","        try (OFDReader reader = new OFDReader(src);\n","//             OFDSigner signer = new OFDSigner(reader, out)\n","             OFDSigner signer = new OFDSigner(reader, out, new NumberFormatAtomicSignID())\n","        ) {\n","            SESV4Container signContainer = new SESV4Container(prvKey, seal, signCert);\n","            // 2. 设置签名模式\n","//            signer.setSignMode(SignMode.WholeProtected);\n","            signer.setSignMode(SignMode.ContinueSign);\n","            // 3. 设置签名使用的扩展签名容器\n","            signer.setSignContainer(signContainer);\n","            // 4. 设置显示位置\n","            signer.addApPos(new NormalStampPos(1, 50, 50, 40, 40));\n","            signer.setProtectFileFilter(absPath -> {\n","                System.out.println(\">> Filter protect file Path: \" + absPath);\n","                if (\"/OFD.xml\".equals(absPath.toString())) {\n","                    return false;\n","                }\n","                return true;\n","            });\n","            // 5. 执行签名\n","            signer.exeSign();\n","            // 6. 关闭签名引擎，生成文档。\n","        }\n","        System.out.println(\">> 生成文件位置: \" + out.toAbsolutePath().toAbsolutePath());\n","\n","    }\n","\n","    /**\n","     * 设置本次签名的“基”签名，形成链式验证\n","     */\n","    @Test\n","    void setRelative() throws GeneralSecurityException, IOException {\n","        Path userP12Path = Paths.get(\"src/test/resources\", \"USER.p12\");\n","        Path sealPath = Paths.get(\"src/test/resources\", \"UserV4.esl\");\n","\n","        PrivateKey prvKey = PKCS12Tools.ReadPrvKey(userP12Path, \"private\", \"777777\");\n","        Certificate signCert = PKCS12Tools.ReadUserCert(userP12Path, \"private\", \"777777\");\n","        SESeal seal = SESeal.getInstance(Files.readAllBytes(sealPath));\n","\n","        Path src = Paths.get(\"src/test/resources\", \"signedFile.ofd\");\n","        Path out = Paths.get(\"target/linked_verify.ofd\");\n","\n","        // 1. 构造签名引擎\n","        try (OFDReader reader = new OFDReader(src);\n","             OFDSigner signer = new OFDSigner(reader, out, new NumberFormatAtomicSignID())\n","        ) {\n","            SESV4Container signContainer = new SESV4Container(prvKey, seal, signCert);\n","            // 2. 设置签名模式\n","            signer.setSignMode(SignMode.WholeProtected);\n","            // 3. 设置签名使用的扩展签名容器\n","            signer.setSignContainer(signContainer);\n","            // 4. 设置显示位置\n","            signer.addApPos(new NormalStampPos(1, 50, 50, 40, 40));\n","\n","            // 借助Reader获取已经存在签名的信息\n","            final Signatures signatures = reader.getDefaultSignatures();\n","            // 获取第一个签名的ID\n","            final String relativeId = signatures.getSignatures().get(0).getID();\n","            // 设置 关联的ID，形成链式验证\n","            signer.setRelative(relativeId);\n","            // 5. 执行签名\n","            signer.exeSign();\n","            // 6. 关闭签名引擎，生成文档。\n","        }\n","        System.out.println(\">> 生成文件位置: \" + out.toAbsolutePath().toAbsolutePath());\n","    }\n","\n","    /**\n","     * 测试不标准的命名空间签名\n","     */\n","    @Test\n","    public void testNoStdNs() throws GeneralSecurityException, IOException {\n","        Path userP12Path = Paths.get(\"src/test/resources\", \"USER.p12\");\n","        Path sealPath = Paths.get(\"src/test/resources\", \"UserV4.esl\");\n","\n","        PrivateKey prvKey = PKCS12Tools.ReadPrvKey(userP12Path, \"private\", \"777777\");\n","        Certificate signCert = PKCS12Tools.ReadUserCert(userP12Path, \"private\", \"777777\");\n","        SESeal seal = SESeal.getInstance(Files.readAllBytes(sealPath));\n","\n","        Path src = Paths.get(\"src/test/resources\", \"namespace_no_std.ofd\");\n","        Path out = Paths.get(\"target/namespace_no_std_signed.ofd\");\n","        // 1. 构造签名引擎\n","        try (OFDReader reader = new OFDReader(src);\n","             OFDSigner signer = new OFDSigner(reader, out, new NumberFormatAtomicSignID())\n","        ) {\n","            SESV4Container signContainer = new SESV4Container(prvKey, seal, signCert);\n","            // 2. 设置签名模式\n","//            signer.setSignMode(SignMode.WholeProtected);\n","            signer.setSignMode(SignMode.ContinueSign);\n","            // 3. 设置签名使用的扩展签名容器\n","            signer.setSignContainer(signContainer);\n","            // 4. 设置显示位置\n","            signer.addApPos(new NormalStampPos(1, 50, 50, 40, 40));\n","            // 5. 执行签名\n","            signer.exeSign();\n","            // 6. 关闭签名引擎，生成文档。\n","        }\n","        System.out.println(\">> 生成文件位置: \" + out.toAbsolutePath().toAbsolutePath());\n","    }\n","\n","}"],"method_lines_dic":{"OFDSigner::::OFDRW_Provider()":[55,60],"OFDSigner::::getSignMode()":[251,253],"OFDSigner::::setSignMode(org.ofdrw.sign.SignMode)":[261,267],"OFDSigner::::setSignContainer(org.ofdrw.sign.ExtendSignatureContainer)":[275,281],"OFDSigner::::addApPos(org.ofdrw.sign.stamppos.StampAppearance)":[289,295],"OFDSigner::::preChecker()":[306,346],"OFDSigner::::toBeDigestFileList()":[354,388],"OFDSigner::::exeSign()":[405,482],"OFDSigner::::calculateFileDigest(java.security.MessageDigest,java.nio.file.Path)":[593,602],"OFDSigner::::close()":[611,626],"OFDSigner::::setProtectFileFilter(org.ofdrw.sign.ProtectFileFilter)":[636,639],"OFDSigner::::setRelative(java.lang.String)":[650,653]},"test_method_lines_dic":{"OFDSignerTest::::testOnlyDoc1Sign()":[36,71],"OFDSignerTest::::reSignTest()":[79,114],"OFDSignerTest::::reSignExceptionTest()":[122,150],"OFDSignerTest::::setProtectFileFilter()":[155,192],"OFDSignerTest::::setRelative()":[197,232],"OFDSignerTest::::testNoStdNs()":[237,265]},"reverse_method_lines_dic":{"55":"OFDSigner::::OFDRW_Provider()","56":"OFDSigner::::OFDRW_Provider()","57":"OFDSigner::::OFDRW_Provider()","58":"OFDSigner::::OFDRW_Provider()","59":"OFDSigner::::OFDRW_Provider()","60":"OFDSigner::::OFDRW_Provider()","251":"OFDSigner::::getSignMode()","252":"OFDSigner::::getSignMode()","253":"OFDSigner::::getSignMode()","261":"OFDSigner::::setSignMode(org.ofdrw.sign.SignMode)","262":"OFDSigner::::setSignMode(org.ofdrw.sign.SignMode)","263":"OFDSigner::::setSignMode(org.ofdrw.sign.SignMode)","264":"OFDSigner::::setSignMode(org.ofdrw.sign.SignMode)","265":"OFDSigner::::setSignMode(org.ofdrw.sign.SignMode)","266":"OFDSigner::::setSignMode(org.ofdrw.sign.SignMode)","267":"OFDSigner::::setSignMode(org.ofdrw.sign.SignMode)","275":"OFDSigner::::setSignContainer(org.ofdrw.sign.ExtendSignatureContainer)","276":"OFDSigner::::setSignContainer(org.ofdrw.sign.ExtendSignatureContainer)","277":"OFDSigner::::setSignContainer(org.ofdrw.sign.ExtendSignatureContainer)","278":"OFDSigner::::setSignContainer(org.ofdrw.sign.ExtendSignatureContainer)","279":"OFDSigner::::setSignContainer(org.ofdrw.sign.ExtendSignatureContainer)","280":"OFDSigner::::setSignContainer(org.ofdrw.sign.ExtendSignatureContainer)","281":"OFDSigner::::setSignContainer(org.ofdrw.sign.ExtendSignatureContainer)","289":"OFDSigner::::addApPos(org.ofdrw.sign.stamppos.StampAppearance)","290":"OFDSigner::::addApPos(org.ofdrw.sign.stamppos.StampAppearance)","291":"OFDSigner::::addApPos(org.ofdrw.sign.stamppos.StampAppearance)","292":"OFDSigner::::addApPos(org.ofdrw.sign.stamppos.StampAppearance)","293":"OFDSigner::::addApPos(org.ofdrw.sign.stamppos.StampAppearance)","294":"OFDSigner::::addApPos(org.ofdrw.sign.stamppos.StampAppearance)","295":"OFDSigner::::addApPos(org.ofdrw.sign.stamppos.StampAppearance)","306":"OFDSigner::::preChecker()","307":"OFDSigner::::preChecker()","308":"OFDSigner::::preChecker()","309":"OFDSigner::::preChecker()","310":"OFDSigner::::preChecker()","311":"OFDSigner::::preChecker()","312":"OFDSigner::::preChecker()","313":"OFDSigner::::preChecker()","314":"OFDSigner::::preChecker()","315":"OFDSigner::::preChecker()","316":"OFDSigner::::preChecker()","317":"OFDSigner::::preChecker()","318":"OFDSigner::::preChecker()","319":"OFDSigner::::preChecker()","320":"OFDSigner::::preChecker()","321":"OFDSigner::::preChecker()","322":"OFDSigner::::preChecker()","323":"OFDSigner::::preChecker()","324":"OFDSigner::::preChecker()","325":"OFDSigner::::preChecker()","326":"OFDSigner::::preChecker()","327":"OFDSigner::::preChecker()","328":"OFDSigner::::preChecker()","329":"OFDSigner::::preChecker()","330":"OFDSigner::::preChecker()","331":"OFDSigner::::preChecker()","332":"OFDSigner::::preChecker()","333":"OFDSigner::::preChecker()","334":"OFDSigner::::preChecker()","335":"OFDSigner::::preChecker()","336":"OFDSigner::::preChecker()","337":"OFDSigner::::preChecker()","338":"OFDSigner::::preChecker()","339":"OFDSigner::::preChecker()","340":"OFDSigner::::preChecker()","341":"OFDSigner::::preChecker()","342":"OFDSigner::::preChecker()","343":"OFDSigner::::preChecker()","344":"OFDSigner::::preChecker()","345":"OFDSigner::::preChecker()","346":"OFDSigner::::preChecker()","354":"OFDSigner::::toBeDigestFileList()","355":"OFDSigner::::toBeDigestFileList()","356":"OFDSigner::::toBeDigestFileList()","357":"OFDSigner::::toBeDigestFileList()","358":"OFDSigner::::toBeDigestFileList()","359":"OFDSigner::::toBeDigestFileList()","360":"OFDSigner::::toBeDigestFileList()","361":"OFDSigner::::toBeDigestFileList()","362":"OFDSigner::::toBeDigestFileList()","363":"OFDSigner::::toBeDigestFileList()","364":"OFDSigner::::toBeDigestFileList()","365":"OFDSigner::::toBeDigestFileList()","366":"OFDSigner::::toBeDigestFileList()","367":"OFDSigner::::toBeDigestFileList()","368":"OFDSigner::::toBeDigestFileList()","369":"OFDSigner::::toBeDigestFileList()","370":"OFDSigner::::toBeDigestFileList()","371":"OFDSigner::::toBeDigestFileList()","372":"OFDSigner::::toBeDigestFileList()","373":"OFDSigner::::toBeDigestFileList()","374":"OFDSigner::::toBeDigestFileList()","375":"OFDSigner::::toBeDigestFileList()","376":"OFDSigner::::toBeDigestFileList()","377":"OFDSigner::::toBeDigestFileList()","378":"OFDSigner::::toBeDigestFileList()","379":"OFDSigner::::toBeDigestFileList()","380":"OFDSigner::::toBeDigestFileList()","381":"OFDSigner::::toBeDigestFileList()","382":"OFDSigner::::toBeDigestFileList()","383":"OFDSigner::::toBeDigestFileList()","384":"OFDSigner::::toBeDigestFileList()","385":"OFDSigner::::toBeDigestFileList()","386":"OFDSigner::::toBeDigestFileList()","387":"OFDSigner::::toBeDigestFileList()","388":"OFDSigner::::toBeDigestFileList()","405":"OFDSigner::::exeSign()","406":"OFDSigner::::exeSign()","407":"OFDSigner::::exeSign()","408":"OFDSigner::::exeSign()","409":"OFDSigner::::exeSign()","410":"OFDSigner::::exeSign()","411":"OFDSigner::::exeSign()","412":"OFDSigner::::exeSign()","413":"OFDSigner::::exeSign()","414":"OFDSigner::::exeSign()","415":"OFDSigner::::exeSign()","416":"OFDSigner::::exeSign()","417":"OFDSigner::::exeSign()","418":"OFDSigner::::exeSign()","419":"OFDSigner::::exeSign()","420":"OFDSigner::::exeSign()","421":"OFDSigner::::exeSign()","422":"OFDSigner::::exeSign()","423":"OFDSigner::::exeSign()","424":"OFDSigner::::exeSign()","425":"OFDSigner::::exeSign()","426":"OFDSigner::::exeSign()","427":"OFDSigner::::exeSign()","428":"OFDSigner::::exeSign()","429":"OFDSigner::::exeSign()","430":"OFDSigner::::exeSign()","431":"OFDSigner::::exeSign()","432":"OFDSigner::::exeSign()","433":"OFDSigner::::exeSign()","434":"OFDSigner::::exeSign()","435":"OFDSigner::::exeSign()","436":"OFDSigner::::exeSign()","437":"OFDSigner::::exeSign()","438":"OFDSigner::::exeSign()","439":"OFDSigner::::exeSign()","440":"OFDSigner::::exeSign()","441":"OFDSigner::::exeSign()","442":"OFDSigner::::exeSign()","443":"OFDSigner::::exeSign()","444":"OFDSigner::::exeSign()","445":"OFDSigner::::exeSign()","446":"OFDSigner::::exeSign()","447":"OFDSigner::::exeSign()","448":"OFDSigner::::exeSign()","449":"OFDSigner::::exeSign()","450":"OFDSigner::::exeSign()","451":"OFDSigner::::exeSign()","452":"OFDSigner::::exeSign()","453":"OFDSigner::::exeSign()","454":"OFDSigner::::exeSign()","455":"OFDSigner::::exeSign()","456":"OFDSigner::::exeSign()","457":"OFDSigner::::exeSign()","458":"OFDSigner::::exeSign()","459":"OFDSigner::::exeSign()","460":"OFDSigner::::exeSign()","461":"OFDSigner::::exeSign()","462":"OFDSigner::::exeSign()","463":"OFDSigner::::exeSign()","464":"OFDSigner::::exeSign()","465":"OFDSigner::::exeSign()","466":"OFDSigner::::exeSign()","467":"OFDSigner::::exeSign()","468":"OFDSigner::::exeSign()","469":"OFDSigner::::exeSign()","470":"OFDSigner::::exeSign()","471":"OFDSigner::::exeSign()","472":"OFDSigner::::exeSign()","473":"OFDSigner::::exeSign()","474":"OFDSigner::::exeSign()","475":"OFDSigner::::exeSign()","476":"OFDSigner::::exeSign()","477":"OFDSigner::::exeSign()","478":"OFDSigner::::exeSign()","479":"OFDSigner::::exeSign()","480":"OFDSigner::::exeSign()","481":"OFDSigner::::exeSign()","482":"OFDSigner::::exeSign()","593":"OFDSigner::::calculateFileDigest(java.security.MessageDigest,java.nio.file.Path)","594":"OFDSigner::::calculateFileDigest(java.security.MessageDigest,java.nio.file.Path)","595":"OFDSigner::::calculateFileDigest(java.security.MessageDigest,java.nio.file.Path)","596":"OFDSigner::::calculateFileDigest(java.security.MessageDigest,java.nio.file.Path)","597":"OFDSigner::::calculateFileDigest(java.security.MessageDigest,java.nio.file.Path)","598":"OFDSigner::::calculateFileDigest(java.security.MessageDigest,java.nio.file.Path)","599":"OFDSigner::::calculateFileDigest(java.security.MessageDigest,java.nio.file.Path)","600":"OFDSigner::::calculateFileDigest(java.security.MessageDigest,java.nio.file.Path)","601":"OFDSigner::::calculateFileDigest(java.security.MessageDigest,java.nio.file.Path)","602":"OFDSigner::::calculateFileDigest(java.security.MessageDigest,java.nio.file.Path)","611":"OFDSigner::::close()","612":"OFDSigner::::close()","613":"OFDSigner::::close()","614":"OFDSigner::::close()","615":"OFDSigner::::close()","616":"OFDSigner::::close()","617":"OFDSigner::::close()","618":"OFDSigner::::close()","619":"OFDSigner::::close()","620":"OFDSigner::::close()","621":"OFDSigner::::close()","622":"OFDSigner::::close()","623":"OFDSigner::::close()","624":"OFDSigner::::close()","625":"OFDSigner::::close()","626":"OFDSigner::::close()","636":"OFDSigner::::setProtectFileFilter(org.ofdrw.sign.ProtectFileFilter)","637":"OFDSigner::::setProtectFileFilter(org.ofdrw.sign.ProtectFileFilter)","638":"OFDSigner::::setProtectFileFilter(org.ofdrw.sign.ProtectFileFilter)","639":"OFDSigner::::setProtectFileFilter(org.ofdrw.sign.ProtectFileFilter)","650":"OFDSigner::::setRelative(java.lang.String)","651":"OFDSigner::::setRelative(java.lang.String)","652":"OFDSigner::::setRelative(java.lang.String)","653":"OFDSigner::::setRelative(java.lang.String)"},"test_reverse_method_lines_dic":{"36":"OFDSignerTest::::testOnlyDoc1Sign()","37":"OFDSignerTest::::testOnlyDoc1Sign()","38":"OFDSignerTest::::testOnlyDoc1Sign()","39":"OFDSignerTest::::testOnlyDoc1Sign()","40":"OFDSignerTest::::testOnlyDoc1Sign()","41":"OFDSignerTest::::testOnlyDoc1Sign()","42":"OFDSignerTest::::testOnlyDoc1Sign()","43":"OFDSignerTest::::testOnlyDoc1Sign()","44":"OFDSignerTest::::testOnlyDoc1Sign()","45":"OFDSignerTest::::testOnlyDoc1Sign()","46":"OFDSignerTest::::testOnlyDoc1Sign()","47":"OFDSignerTest::::testOnlyDoc1Sign()","48":"OFDSignerTest::::testOnlyDoc1Sign()","49":"OFDSignerTest::::testOnlyDoc1Sign()","50":"OFDSignerTest::::testOnlyDoc1Sign()","51":"OFDSignerTest::::testOnlyDoc1Sign()","52":"OFDSignerTest::::testOnlyDoc1Sign()","53":"OFDSignerTest::::testOnlyDoc1Sign()","54":"OFDSignerTest::::testOnlyDoc1Sign()","55":"OFDSignerTest::::testOnlyDoc1Sign()","56":"OFDSignerTest::::testOnlyDoc1Sign()","57":"OFDSignerTest::::testOnlyDoc1Sign()","58":"OFDSignerTest::::testOnlyDoc1Sign()","59":"OFDSignerTest::::testOnlyDoc1Sign()","60":"OFDSignerTest::::testOnlyDoc1Sign()","61":"OFDSignerTest::::testOnlyDoc1Sign()","62":"OFDSignerTest::::testOnlyDoc1Sign()","63":"OFDSignerTest::::testOnlyDoc1Sign()","64":"OFDSignerTest::::testOnlyDoc1Sign()","65":"OFDSignerTest::::testOnlyDoc1Sign()","66":"OFDSignerTest::::testOnlyDoc1Sign()","67":"OFDSignerTest::::testOnlyDoc1Sign()","68":"OFDSignerTest::::testOnlyDoc1Sign()","69":"OFDSignerTest::::testOnlyDoc1Sign()","70":"OFDSignerTest::::testOnlyDoc1Sign()","71":"OFDSignerTest::::testOnlyDoc1Sign()","79":"OFDSignerTest::::reSignTest()","80":"OFDSignerTest::::reSignTest()","81":"OFDSignerTest::::reSignTest()","82":"OFDSignerTest::::reSignTest()","83":"OFDSignerTest::::reSignTest()","84":"OFDSignerTest::::reSignTest()","85":"OFDSignerTest::::reSignTest()","86":"OFDSignerTest::::reSignTest()","87":"OFDSignerTest::::reSignTest()","88":"OFDSignerTest::::reSignTest()","89":"OFDSignerTest::::reSignTest()","90":"OFDSignerTest::::reSignTest()","91":"OFDSignerTest::::reSignTest()","92":"OFDSignerTest::::reSignTest()","93":"OFDSignerTest::::reSignTest()","94":"OFDSignerTest::::reSignTest()","95":"OFDSignerTest::::reSignTest()","96":"OFDSignerTest::::reSignTest()","97":"OFDSignerTest::::reSignTest()","98":"OFDSignerTest::::reSignTest()","99":"OFDSignerTest::::reSignTest()","100":"OFDSignerTest::::reSignTest()","101":"OFDSignerTest::::reSignTest()","102":"OFDSignerTest::::reSignTest()","103":"OFDSignerTest::::reSignTest()","104":"OFDSignerTest::::reSignTest()","105":"OFDSignerTest::::reSignTest()","106":"OFDSignerTest::::reSignTest()","107":"OFDSignerTest::::reSignTest()","108":"OFDSignerTest::::reSignTest()","109":"OFDSignerTest::::reSignTest()","110":"OFDSignerTest::::reSignTest()","111":"OFDSignerTest::::reSignTest()","112":"OFDSignerTest::::reSignTest()","113":"OFDSignerTest::::reSignTest()","114":"OFDSignerTest::::reSignTest()","122":"OFDSignerTest::::reSignExceptionTest()","123":"OFDSignerTest::::reSignExceptionTest()","124":"OFDSignerTest::::reSignExceptionTest()","125":"OFDSignerTest::::reSignExceptionTest()","126":"OFDSignerTest::::reSignExceptionTest()","127":"OFDSignerTest::::reSignExceptionTest()","128":"OFDSignerTest::::reSignExceptionTest()","129":"OFDSignerTest::::reSignExceptionTest()","130":"OFDSignerTest::::reSignExceptionTest()","131":"OFDSignerTest::::reSignExceptionTest()","132":"OFDSignerTest::::reSignExceptionTest()","133":"OFDSignerTest::::reSignExceptionTest()","134":"OFDSignerTest::::reSignExceptionTest()","135":"OFDSignerTest::::reSignExceptionTest()","136":"OFDSignerTest::::reSignExceptionTest()","137":"OFDSignerTest::::reSignExceptionTest()","138":"OFDSignerTest::::reSignExceptionTest()","139":"OFDSignerTest::::reSignExceptionTest()","140":"OFDSignerTest::::reSignExceptionTest()","141":"OFDSignerTest::::reSignExceptionTest()","142":"OFDSignerTest::::reSignExceptionTest()","143":"OFDSignerTest::::reSignExceptionTest()","144":"OFDSignerTest::::reSignExceptionTest()","145":"OFDSignerTest::::reSignExceptionTest()","146":"OFDSignerTest::::reSignExceptionTest()","147":"OFDSignerTest::::reSignExceptionTest()","148":"OFDSignerTest::::reSignExceptionTest()","149":"OFDSignerTest::::reSignExceptionTest()","150":"OFDSignerTest::::reSignExceptionTest()","155":"OFDSignerTest::::setProtectFileFilter()","156":"OFDSignerTest::::setProtectFileFilter()","157":"OFDSignerTest::::setProtectFileFilter()","158":"OFDSignerTest::::setProtectFileFilter()","159":"OFDSignerTest::::setProtectFileFilter()","160":"OFDSignerTest::::setProtectFileFilter()","161":"OFDSignerTest::::setProtectFileFilter()","162":"OFDSignerTest::::setProtectFileFilter()","163":"OFDSignerTest::::setProtectFileFilter()","164":"OFDSignerTest::::setProtectFileFilter()","165":"OFDSignerTest::::setProtectFileFilter()","166":"OFDSignerTest::::setProtectFileFilter()","167":"OFDSignerTest::::setProtectFileFilter()","168":"OFDSignerTest::::setProtectFileFilter()","169":"OFDSignerTest::::setProtectFileFilter()","170":"OFDSignerTest::::setProtectFileFilter()","171":"OFDSignerTest::::setProtectFileFilter()","172":"OFDSignerTest::::setProtectFileFilter()","173":"OFDSignerTest::::setProtectFileFilter()","174":"OFDSignerTest::::setProtectFileFilter()","175":"OFDSignerTest::::setProtectFileFilter()","176":"OFDSignerTest::::setProtectFileFilter()","177":"OFDSignerTest::::setProtectFileFilter()","178":"OFDSignerTest::::setProtectFileFilter()","179":"OFDSignerTest::::setProtectFileFilter()","180":"OFDSignerTest::::setProtectFileFilter()","181":"OFDSignerTest::::setProtectFileFilter()","182":"OFDSignerTest::::setProtectFileFilter()","183":"OFDSignerTest::::setProtectFileFilter()","184":"OFDSignerTest::::setProtectFileFilter()","185":"OFDSignerTest::::setProtectFileFilter()","186":"OFDSignerTest::::setProtectFileFilter()","187":"OFDSignerTest::::setProtectFileFilter()","188":"OFDSignerTest::::setProtectFileFilter()","189":"OFDSignerTest::::setProtectFileFilter()","190":"OFDSignerTest::::setProtectFileFilter()","191":"OFDSignerTest::::setProtectFileFilter()","192":"OFDSignerTest::::setProtectFileFilter()","197":"OFDSignerTest::::setRelative()","198":"OFDSignerTest::::setRelative()","199":"OFDSignerTest::::setRelative()","200":"OFDSignerTest::::setRelative()","201":"OFDSignerTest::::setRelative()","202":"OFDSignerTest::::setRelative()","203":"OFDSignerTest::::setRelative()","204":"OFDSignerTest::::setRelative()","205":"OFDSignerTest::::setRelative()","206":"OFDSignerTest::::setRelative()","207":"OFDSignerTest::::setRelative()","208":"OFDSignerTest::::setRelative()","209":"OFDSignerTest::::setRelative()","210":"OFDSignerTest::::setRelative()","211":"OFDSignerTest::::setRelative()","212":"OFDSignerTest::::setRelative()","213":"OFDSignerTest::::setRelative()","214":"OFDSignerTest::::setRelative()","215":"OFDSignerTest::::setRelative()","216":"OFDSignerTest::::setRelative()","217":"OFDSignerTest::::setRelative()","218":"OFDSignerTest::::setRelative()","219":"OFDSignerTest::::setRelative()","220":"OFDSignerTest::::setRelative()","221":"OFDSignerTest::::setRelative()","222":"OFDSignerTest::::setRelative()","223":"OFDSignerTest::::setRelative()","224":"OFDSignerTest::::setRelative()","225":"OFDSignerTest::::setRelative()","226":"OFDSignerTest::::setRelative()","227":"OFDSignerTest::::setRelative()","228":"OFDSignerTest::::setRelative()","229":"OFDSignerTest::::setRelative()","230":"OFDSignerTest::::setRelative()","231":"OFDSignerTest::::setRelative()","232":"OFDSignerTest::::setRelative()","237":"OFDSignerTest::::testNoStdNs()","238":"OFDSignerTest::::testNoStdNs()","239":"OFDSignerTest::::testNoStdNs()","240":"OFDSignerTest::::testNoStdNs()","241":"OFDSignerTest::::testNoStdNs()","242":"OFDSignerTest::::testNoStdNs()","243":"OFDSignerTest::::testNoStdNs()","244":"OFDSignerTest::::testNoStdNs()","245":"OFDSignerTest::::testNoStdNs()","246":"OFDSignerTest::::testNoStdNs()","247":"OFDSignerTest::::testNoStdNs()","248":"OFDSignerTest::::testNoStdNs()","249":"OFDSignerTest::::testNoStdNs()","250":"OFDSignerTest::::testNoStdNs()","251":"OFDSignerTest::::testNoStdNs()","252":"OFDSignerTest::::testNoStdNs()","253":"OFDSignerTest::::testNoStdNs()","254":"OFDSignerTest::::testNoStdNs()","255":"OFDSignerTest::::testNoStdNs()","256":"OFDSignerTest::::testNoStdNs()","257":"OFDSignerTest::::testNoStdNs()","258":"OFDSignerTest::::testNoStdNs()","259":"OFDSignerTest::::testNoStdNs()","260":"OFDSignerTest::::testNoStdNs()","261":"OFDSignerTest::::testNoStdNs()","262":"OFDSignerTest::::testNoStdNs()","263":"OFDSignerTest::::testNoStdNs()","264":"OFDSignerTest::::testNoStdNs()","265":"OFDSignerTest::::testNoStdNs()"},"tests":[{"test_lines":[36,71],"covered_lines":[50,56,57,58,59,134,200,201,204,207,211,212,213,219,220,221,224,225,227,228,230,231,262,265,266,276,279,280,290,293,294,307,309,310,312,315,317,344,355,358,360,362,366,368,369,372,376,378,383,384,387,406,409,411,413,421,422,423,424,427,428,431,433,436,445,447,449,451,453,454,458,467,472,475,476,477,478,480,481,500,502,504,506,508,511,512,514,516,517,519,521,522,527,528,530,531,542,543,548,549,551,553,554,556,558,559,560,561,562,563,565,572,574,575,576,578,580,594,595,596,598,600,601,613,617,618,625,626],"label":"OFDSigner::::exeSign()"},{"test_lines":[79,114],"covered_lines":[50,56,57,58,59,134,200,201,204,207,211,212,213,219,220,221,224,225,227,228,230,231,262,265,266,276,279,280,290,293,294,307,309,310,312,315,320,323,325,328,330,331,333,334,335,336,337,340,344,345,346,355,358,360,362,366,368,369,372,376,378,383,384,387,406,409,411,413,421,422,445,447,449,451,453,454,458,467,472,475,476,477,478,480,481,500,502,504,506,508,511,512,514,516,517,519,521,522,527,528,530,531,542,543,548,549,551,553,554,556,558,559,560,561,562,563,565,572,574,575,576,578,580,594,595,596,598,600,601,613,617,618,625,626],"label":"OFDSigner::::exeSign()"},{"test_lines":[122,150],"covered_lines":[50,134,200,201,204,207,211,219,220,221,224,225,227,228,307,309,310,312,315,320,323,325,328,330,331,333,334,335,336,337,338,344,345],"label":"OFDSigner::::preChecker()"},{"test_lines":[155,192],"covered_lines":[50,56,57,58,59,134,200,201,204,207,211,212,213,219,220,221,224,225,227,228,230,231,262,265,266,276,279,280,290,293,294,307,309,310,312,315,317,344,355,358,360,362,366,368,369,372,373,376,378,379,380,383,384,387,406,409,411,413,421,422,423,424,427,428,431,433,436,445,447,449,451,453,454,458,467,472,475,476,477,478,480,481,500,502,504,506,508,511,512,514,516,517,519,521,522,527,528,530,531,542,543,548,549,551,553,554,556,558,559,560,561,562,563,565,572,574,575,576,578,580,594,595,596,598,600,601,613,617,618,625,626,637,638],"label":"OFDSigner::::exeSign()"},{"test_lines":[197,232],"covered_lines":[50,56,57,58,59,134,200,201,204,207,211,212,213,219,220,221,224,225,227,228,230,231,262,265,266,276,279,280,290,293,294,307,309,310,312,315,320,323,325,328,330,331,333,334,335,336,337,340,344,345,346,355,358,360,362,366,368,369,372,376,378,383,384,387,406,409,411,413,421,422,445,447,449,451,453,454,455,458,467,472,475,476,477,478,480,481,500,502,504,506,508,511,512,514,516,517,519,521,522,527,528,530,531,542,543,548,549,551,553,554,556,558,559,560,561,562,563,565,572,574,575,576,578,580,594,595,596,598,600,601,613,617,618,625,626,651,652],"label":"OFDSigner::::exeSign()"},{"test_lines":[237,265],"covered_lines":[50,56,57,58,59,134,200,201,204,207,211,212,213,219,220,221,224,225,227,228,230,231,262,265,266,276,279,280,290,293,294,307,309,310,312,315,317,344,355,358,360,362,366,368,369,372,376,378,379,380,383,384,387,406,409,411,413,421,422,423,424,427,428,431,433,436,445,447,449,451,453,454,458,467,472,475,476,477,478,480,481,500,502,504,506,508,511,512,514,516,517,519,521,522,527,528,530,531,542,543,548,549,551,553,554,556,558,559,560,561,562,563,565,572,574,575,576,578,580,594,595,596,598,600,601,613,617,618,625,626],"label":"OFDSigner::::exeSign()"}]},"/bernard/dataset_construction/prep/repos/ofdrw/ofdrw-sign/src/main/java/org/ofdrw/sign/SignCleaner.java":{"class_content":["package org.ofdrw.sign;\n","\n","import org.dom4j.DocumentException;\n","import org.ofdrw.core.basicStructure.ofd.DocBody;\n","import org.ofdrw.core.basicStructure.ofd.OFD;\n","import org.ofdrw.core.basicType.ST_Loc;\n","import org.ofdrw.pkg.container.OFDDir;\n","import org.ofdrw.pkg.container.VirtualContainer;\n","import org.ofdrw.reader.OFDReader;\n","import org.ofdrw.reader.ResourceLocator;\n","\n","import java.io.IOException;\n","import java.nio.file.Files;\n","import java.nio.file.Path;\n","\n","/**\n"," * 数字签名清除工具\n"," *\n"," * @author 权观宇\n"," * @since 2021-05-24 20:02:56\n"," */\n","public class SignCleaner {\n","    /**\n","     * OFD解析器\n","     */\n","    private OFDReader reader;\n","\n","    /**\n","     * 输出位置\n","     */\n","    private Path out;\n","\n","    private SignCleaner() {\n","    }\n","\n","    /**\n","     * 构造实例\n","     *\n","     * @param reader 解析器\n","     * @param out    清空后输出的位置\n","     */\n","    public SignCleaner(OFDReader reader, Path out) {\n","        if (reader == null) {\n","            throw new IllegalArgumentException(\"OFD解析器(reader)为空\");\n","        }\n","        if (out == null) {\n","            throw new IllegalArgumentException(\"输出位置(out)为空\");\n","        }\n","        this.reader = reader;\n","        this.out = out;\n","    }\n","\n","    /**\n","     * 所有文档中所有全部数字签名\n","     * <p>\n","     * 该操作会关闭Reader\n","     *\n","     * @throws IOException 文件操作异常\n","     * @throws DocumentException 文档结构无法解析\n","     */\n","    public void clean() throws IOException, DocumentException {\n","        final OFDDir ofdDir = reader.getOFDDir();\n","        OFD ofd = ofdDir.getOfd();\n","        final ResourceLocator rl = reader.getResourceLocator();\n","        for (DocBody docBody : ofd.getDocBodies()) {\n","            // 1. 获取并删除签名列表文件入口\n","            final ST_Loc signListFileLoc = docBody.getSignatures();\n","            // 删除\n","            docBody.removeOFDElemByNames(\"Signatures\");\n","            if (signListFileLoc == null) {\n","                continue;\n","            }\n","            Path signaturesXMLFile = rl.getFile(signListFileLoc);\n","            // 2. save 进入签名列表文件目录\n","            String parent = signListFileLoc.parent();\n","            // 3. 判断上一级目录名称\n","            final VirtualContainer container = rl.getContainer(parent);\n","            if (\"Signs\".equalsIgnoreCase(container.getContainerName())) {\n","                container.clean();\n","            }\n","            // 某些不规范的文件Signatures.xml 不在Signs目录下，因此需要删除签名列表文件\n","            if (Files.exists(signaturesXMLFile)) {\n","                Files.delete(signaturesXMLFile);\n","            }\n","            // 4. 打包输出文件\n","            ofdDir.jar(out.toAbsolutePath());\n","        }\n","    }\n","}\n"],"test_content":["package org.ofdrw.sign;\n","\n","import org.dom4j.DocumentException;\n","import org.junit.jupiter.api.Test;\n","import org.ofdrw.reader.OFDReader;\n","\n","import java.io.IOException;\n","import java.nio.file.Path;\n","import java.nio.file.Paths;\n","\n","import static org.junit.jupiter.api.Assertions.*;\n","\n","/**\n"," * 测试清空电子签名\n"," *\n"," * @author 权观宇\n"," * @since 2021-05-24 20:38:21\n"," */\n","class SignCleanerTest {\n","\n","    /**\n","     * 清空电子签名\n","     */\n","    @Test\n","    void clean() throws IOException, DocumentException {\n","        Path src = Paths.get(\"src/test/resources\", \"v4signed.ofd\");\n","        Path out = Paths.get(\"target\", \"remove_sign.ofd\");\n","        // 1. 创建 OFD解析器\n","        try (OFDReader reader = new OFDReader(src)) {\n","            // 2. 构造签名清理工具\n","            SignCleaner sCleaner = new SignCleaner(reader, out);\n","            // 3. 清空所有电子签名\n","            sCleaner.clean();\n","        }\n","        // 4. 关闭 Reader，这里使用 try finally 语法自动 Close Reader\n","        System.out.println(\"生成文档位置: \" + out.toAbsolutePath());\n","\n","    }\n","}"],"method_lines_dic":{"SignCleaner::::clean()":[61,88]},"test_method_lines_dic":{"SignCleanerTest::::clean()":[24,38]},"reverse_method_lines_dic":{"61":"SignCleaner::::clean()","62":"SignCleaner::::clean()","63":"SignCleaner::::clean()","64":"SignCleaner::::clean()","65":"SignCleaner::::clean()","66":"SignCleaner::::clean()","67":"SignCleaner::::clean()","68":"SignCleaner::::clean()","69":"SignCleaner::::clean()","70":"SignCleaner::::clean()","71":"SignCleaner::::clean()","72":"SignCleaner::::clean()","73":"SignCleaner::::clean()","74":"SignCleaner::::clean()","75":"SignCleaner::::clean()","76":"SignCleaner::::clean()","77":"SignCleaner::::clean()","78":"SignCleaner::::clean()","79":"SignCleaner::::clean()","80":"SignCleaner::::clean()","81":"SignCleaner::::clean()","82":"SignCleaner::::clean()","83":"SignCleaner::::clean()","84":"SignCleaner::::clean()","85":"SignCleaner::::clean()","86":"SignCleaner::::clean()","87":"SignCleaner::::clean()","88":"SignCleaner::::clean()"},"test_reverse_method_lines_dic":{"24":"SignCleanerTest::::clean()","25":"SignCleanerTest::::clean()","26":"SignCleanerTest::::clean()","27":"SignCleanerTest::::clean()","28":"SignCleanerTest::::clean()","29":"SignCleanerTest::::clean()","30":"SignCleanerTest::::clean()","31":"SignCleanerTest::::clean()","32":"SignCleanerTest::::clean()","33":"SignCleanerTest::::clean()","34":"SignCleanerTest::::clean()","35":"SignCleanerTest::::clean()","36":"SignCleanerTest::::clean()","37":"SignCleanerTest::::clean()","38":"SignCleanerTest::::clean()"},"tests":[{"test_lines":[24,38],"covered_lines":[42,43,46,49,50,51,62,63,64,65,67,69,70,73,75,77,78,79,82,86,87,88],"label":"SignCleaner::::clean()"}]},"/bernard/dataset_construction/prep/repos/ofdrw/ofdrw-sign/src/main/java/org/ofdrw/sign/signContainer/GBT35275PKCS9DSContainer.java":{"class_content":["package org.ofdrw.sign.signContainer;\n","\n","import org.apache.commons.io.IOUtils;\n","import org.bouncycastle.asn1.ASN1ObjectIdentifier;\n","import org.bouncycastle.asn1.gm.GMObjectIdentifiers;\n","import org.bouncycastle.jcajce.provider.digest.SM3;\n","import org.bouncycastle.jce.provider.BouncyCastleProvider;\n","import org.jetbrains.annotations.NotNull;\n","import org.ofdrw.core.signatures.SigType;\n","import org.ofdrw.gm.sm2strut.ContentInfo;\n","import org.ofdrw.gm.sm2strut.OIDs;\n","import org.ofdrw.gm.sm2strut.SignedData;\n","import org.ofdrw.gm.sm2strut.builder.PKCS9SignedDataBuilder;\n","import org.ofdrw.sign.ExtendSignatureContainer;\n","\n","import java.io.IOException;\n","import java.io.InputStream;\n","import java.security.GeneralSecurityException;\n","import java.security.MessageDigest;\n","import java.security.PrivateKey;\n","import java.security.Signature;\n","import java.security.cert.Certificate;\n","\n","/**\n"," * 根据 GM/T 0099-2020 及 PKCS#7 CMS 签名\n"," * <p>\n"," * 注该方法与{@link GBT35275DSContainer} 不同，签名对象为SignInfo中的 authenticatedAttributes字段，\n"," * authenticatedAttributes为一个CMS PKCS#9表示含签名时间、原文杂凑值的键值对结构。\n"," * <p>\n"," * 该格式为数科验证兼容格式。\n"," *\n"," * @author 权观宇\n"," * @since 2022-6-24 21:42:59\n"," */\n","public class GBT35275PKCS9DSContainer implements ExtendSignatureContainer {\n","\n","    /**\n","     * 签名私钥\n","     */\n","    private final PrivateKey prvKey;\n","\n","    /**\n","     * 私钥对应公钥的证书\n","     */\n","    private final Certificate cert;\n","\n","    /**\n","     * 创建数字签名容器\n","     * <p>\n","     * 签名值数据应遵循 GB/T 35275\n","     *\n","     * @param cert   SM2签名证书，应符合GB/T 20518\n","     * @param prvKey 私钥\n","     */\n","    public GBT35275PKCS9DSContainer(@NotNull Certificate cert, @NotNull PrivateKey prvKey) {\n","        if (cert == null) {\n","            throw new IllegalArgumentException(\"签名使用证书（cert）不能为空\");\n","        }\n","        if (prvKey == null) {\n","            throw new IllegalArgumentException(\"签名使用私钥（prvKey）不能为空\");\n","        }\n","        this.cert = cert;\n","        this.prvKey = prvKey;\n","    }\n","\n","    /**\n","     * SM3摘要算法功能\n","     *\n","     * @return SM3摘要算法功能\n","     */\n","    @Override\n","    public MessageDigest getDigestFnc() {\n","        return new SM3.Digest();\n","    }\n","\n","    /**\n","     * SM2WithSM3\n","     *\n","     * @return 签名方法OID\n","     */\n","    @Override\n","    public ASN1ObjectIdentifier getSignAlgOID() {\n","        return GMObjectIdentifiers.sm2sign_with_sm3;\n","    }\n","\n","    /**\n","     * 对待签名数据签名\n","     *\n","     * @param inData       待签名数据流\n","     * @param propertyInfo 忽略\n","     * @return 签名结果值\n","     * @throws IOException       IO流读取异常\n","     * @throws SecurityException 签名计算异常\n","     */\n","    @Override\n","    public byte[] sign(InputStream inData, String propertyInfo) throws GeneralSecurityException, IOException {\n","        // e) 根据签名方案，使用操作人签名的私钥对杂凑值进行数字签名\n","        Signature signatureFnc = Signature.getInstance(\n","                GMObjectIdentifiers.sm2sign_with_sm3.toString(),\n","                new BouncyCastleProvider());\n","        signatureFnc.initSign(prvKey);\n","        byte[] plaintext = IOUtils.toByteArray(inData);\n","        // 执行签名产生签名值\n","        final SignedData signedData = PKCS9SignedDataBuilder.signedData(plaintext, signatureFnc, this.cert, null);\n","        ContentInfo contentInfo = new ContentInfo(OIDs.signedData, signedData);\n","        return contentInfo.getEncoded();\n","    }\n","\n","    /**\n","     * 电子签名不提供印章\n","     *\n","     * @return null\n","     * @throws IOException 获取印章IO异常\n","     */\n","    @Override\n","    public byte[] getSeal() throws IOException {\n","        return null;\n","    }\n","\n","    /**\n","     * 获取签名节点类型\n","     *\n","     * @return 签名节点类型\n","     */\n","    @Override\n","    public SigType getSignType() {\n","        return SigType.Sign;\n","    }\n","}\n"],"test_content":["package org.ofdrw.sign.signContainer;\n","\n","import org.bouncycastle.jce.provider.BouncyCastleProvider;\n","import org.junit.jupiter.api.Test;\n","import org.ofdrw.gm.cert.PEMLoader;\n","import org.ofdrw.reader.OFDReader;\n","import org.ofdrw.sign.ExtendSignatureContainer;\n","import org.ofdrw.sign.NumberFormatAtomicSignID;\n","import org.ofdrw.sign.OFDSigner;\n","\n","import java.io.IOException;\n","import java.nio.file.Path;\n","import java.nio.file.Paths;\n","import java.security.GeneralSecurityException;\n","import java.security.PrivateKey;\n","import java.security.Security;\n","import java.security.cert.Certificate;\n","\n","import static org.junit.jupiter.api.Assertions.*;\n","\n","/**\n"," * 测试数科兼容的PKCS#7 CMS 签名格式\n"," *\n"," * @author 权观宇\n"," * @since 2022-06-24 22:40:45\n"," */\n","class GBT35275PKCS9DSContainerTest {\n","    /**\n","     * 测试数科兼容的数字签名\n","     */\n","    @Test\n","    void sign() throws GeneralSecurityException, IOException {\n","        Security.addProvider(new BouncyCastleProvider());\n","\n","        Path certPemFile = Paths.get(\"src/test/resources\", \"sign_cert.pem\");\n","        Path keyPemFile = Paths.get(\"src/test/resources\", \"sign_key.pem\");\n","        final PrivateKey privateKey = PEMLoader.loadPrivateKey(keyPemFile);\n","        final Certificate certificate = PEMLoader.loadCert(certPemFile);\n","\n","        Path src = Paths.get(\"src/test/resources\", \"helloworld.ofd\");\n","        Path out = Paths.get(\"target/GB35275PKCS9DigitalSign.ofd\");\n","        // 1. 构造签名引擎\n","        try (OFDReader reader = new OFDReader(src);\n","             OFDSigner signer = new OFDSigner(reader, out,  new NumberFormatAtomicSignID())) {\n","            ExtendSignatureContainer signContainer = new GBT35275PKCS9DSContainer(certificate, privateKey);\n","            // 3. 设置签名使用的扩展签名容器\n","            signer.setSignContainer(signContainer);\n","            // 4. 执行签名\n","            signer.exeSign();\n","            // 5. 关闭签名引擎，生成文档。\n","        }\n","        System.out.println(\">> 生成文件位置: \" + out.toAbsolutePath().toAbsolutePath());\n","    }\n","}"],"method_lines_dic":{"GBT35275PKCS9DSContainer::::getDigestFnc()":[71,74],"GBT35275PKCS9DSContainer::::getSignAlgOID()":[81,84],"GBT35275PKCS9DSContainer::::sign(java.io.InputStream,java.lang.String)":[95,107],"GBT35275PKCS9DSContainer::::getSeal()":[115,118],"GBT35275PKCS9DSContainer::::getSignType()":[125,128]},"test_method_lines_dic":{"GBT35275PKCS9DSContainerTest::::sign()":[31,53]},"reverse_method_lines_dic":{"71":"GBT35275PKCS9DSContainer::::getDigestFnc()","72":"GBT35275PKCS9DSContainer::::getDigestFnc()","73":"GBT35275PKCS9DSContainer::::getDigestFnc()","74":"GBT35275PKCS9DSContainer::::getDigestFnc()","81":"GBT35275PKCS9DSContainer::::getSignAlgOID()","82":"GBT35275PKCS9DSContainer::::getSignAlgOID()","83":"GBT35275PKCS9DSContainer::::getSignAlgOID()","84":"GBT35275PKCS9DSContainer::::getSignAlgOID()","95":"GBT35275PKCS9DSContainer::::sign(java.io.InputStream,java.lang.String)","96":"GBT35275PKCS9DSContainer::::sign(java.io.InputStream,java.lang.String)","97":"GBT35275PKCS9DSContainer::::sign(java.io.InputStream,java.lang.String)","98":"GBT35275PKCS9DSContainer::::sign(java.io.InputStream,java.lang.String)","99":"GBT35275PKCS9DSContainer::::sign(java.io.InputStream,java.lang.String)","100":"GBT35275PKCS9DSContainer::::sign(java.io.InputStream,java.lang.String)","101":"GBT35275PKCS9DSContainer::::sign(java.io.InputStream,java.lang.String)","102":"GBT35275PKCS9DSContainer::::sign(java.io.InputStream,java.lang.String)","103":"GBT35275PKCS9DSContainer::::sign(java.io.InputStream,java.lang.String)","104":"GBT35275PKCS9DSContainer::::sign(java.io.InputStream,java.lang.String)","105":"GBT35275PKCS9DSContainer::::sign(java.io.InputStream,java.lang.String)","106":"GBT35275PKCS9DSContainer::::sign(java.io.InputStream,java.lang.String)","107":"GBT35275PKCS9DSContainer::::sign(java.io.InputStream,java.lang.String)","115":"GBT35275PKCS9DSContainer::::getSeal()","116":"GBT35275PKCS9DSContainer::::getSeal()","117":"GBT35275PKCS9DSContainer::::getSeal()","118":"GBT35275PKCS9DSContainer::::getSeal()","125":"GBT35275PKCS9DSContainer::::getSignType()","126":"GBT35275PKCS9DSContainer::::getSignType()","127":"GBT35275PKCS9DSContainer::::getSignType()","128":"GBT35275PKCS9DSContainer::::getSignType()"},"test_reverse_method_lines_dic":{"31":"GBT35275PKCS9DSContainerTest::::sign()","32":"GBT35275PKCS9DSContainerTest::::sign()","33":"GBT35275PKCS9DSContainerTest::::sign()","34":"GBT35275PKCS9DSContainerTest::::sign()","35":"GBT35275PKCS9DSContainerTest::::sign()","36":"GBT35275PKCS9DSContainerTest::::sign()","37":"GBT35275PKCS9DSContainerTest::::sign()","38":"GBT35275PKCS9DSContainerTest::::sign()","39":"GBT35275PKCS9DSContainerTest::::sign()","40":"GBT35275PKCS9DSContainerTest::::sign()","41":"GBT35275PKCS9DSContainerTest::::sign()","42":"GBT35275PKCS9DSContainerTest::::sign()","43":"GBT35275PKCS9DSContainerTest::::sign()","44":"GBT35275PKCS9DSContainerTest::::sign()","45":"GBT35275PKCS9DSContainerTest::::sign()","46":"GBT35275PKCS9DSContainerTest::::sign()","47":"GBT35275PKCS9DSContainerTest::::sign()","48":"GBT35275PKCS9DSContainerTest::::sign()","49":"GBT35275PKCS9DSContainerTest::::sign()","50":"GBT35275PKCS9DSContainerTest::::sign()","51":"GBT35275PKCS9DSContainerTest::::sign()","52":"GBT35275PKCS9DSContainerTest::::sign()","53":"GBT35275PKCS9DSContainerTest::::sign()"},"tests":[{"test_lines":[31,53],"covered_lines":[55,56,59,62,63,64,73,83,98,99,101,102,104,105,106,127],"label":"<<NO FOCAL METHOD>>"}]},"/bernard/dataset_construction/prep/repos/ofdrw/ofdrw-sign/src/main/java/org/ofdrw/sign/signContainer/SESV4Container.java":{"class_content":["package org.ofdrw.sign.signContainer;\n","\n","import org.apache.commons.io.IOUtils;\n","import org.bouncycastle.asn1.ASN1BitString;\n","import org.bouncycastle.asn1.ASN1GeneralizedTime;\n","import org.bouncycastle.asn1.ASN1ObjectIdentifier;\n","import org.bouncycastle.asn1.DERBitString;\n","import org.bouncycastle.asn1.gm.GMObjectIdentifiers;\n","import org.bouncycastle.jcajce.provider.digest.SM3;\n","import org.bouncycastle.jce.provider.BouncyCastleProvider;\n","import org.ofdrw.core.signatures.SigType;\n","import org.ofdrw.gm.ses.v1.SES_Header;\n","import org.ofdrw.gm.ses.v4.SES_Signature;\n","import org.ofdrw.gm.ses.v4.SESeal;\n","import org.ofdrw.gm.ses.v4.TBS_Sign;\n","import org.ofdrw.sign.ExtendSignatureContainer;\n","import org.ofdrw.sign.timestamp.TimeStampHook;\n","\n","import java.io.IOException;\n","import java.io.InputStream;\n","import java.security.GeneralSecurityException;\n","import java.security.MessageDigest;\n","import java.security.PrivateKey;\n","import java.security.Signature;\n","import java.security.cert.Certificate;\n","import java.util.Date;\n","import java.util.Locale;\n","\n","/**\n"," * 《GB/T 38540-2020 信息安全技术 安全电子签章密码技术规范》 电子签章数据生成扩展容器\n"," * <p>\n"," * 注意：该容器仅用于测试，电子签章请使用符合国家规范具有国家型号证书的设备进行！\n"," *\n"," * @author 权观宇\n"," * @since 2020-04-21 01:22:47\n"," */\n","public class SESV4Container implements ExtendSignatureContainer {\n","    /**\n","     * 签名使用的私钥\n","     */\n","    private final PrivateKey privateKey;\n","\n","    /**\n","     * 电子印章\n","     */\n","    private final SESeal seal;\n","\n","    /**\n","     * 签章使用的证书\n","     */\n","    private final Certificate certificate;\n","\n","    /**\n","     * 时间戳hook对象\n","     */\n","    private TimeStampHook timeStampHook;\n","\n","    /**\n","     * V1版本的电子签章容器构造\n","     *\n","     * @param privateKey 签名使用的私钥\n","     * @param seal       电子印章\n","     * @param signCert   签章用户证书\n","     */\n","    public SESV4Container(PrivateKey privateKey, SESeal seal, Certificate signCert) {\n","        this.privateKey = privateKey;\n","        this.seal = seal;\n","        this.certificate = signCert;\n","    }\n","\n","    /**\n","     * V1版本的电子签章容器构造\n","     *\n","     * @param privateKey    签名使用的私钥\n","     * @param seal          电子印章\n","     * @param signCert      签章用户证书\n","     * @param timeStampHook 时间戳Hook\n","     */\n","    public SESV4Container(PrivateKey privateKey, SESeal seal, Certificate signCert, TimeStampHook timeStampHook) {\n","        this.privateKey = privateKey;\n","        this.seal = seal;\n","        this.certificate = signCert;\n","        this.timeStampHook = timeStampHook;\n","    }\n","\n","    /**\n","     * 提供文件的摘要算法功能\n","     *\n","     * @return 摘要算法功能\n","     */\n","    @Override\n","    public MessageDigest getDigestFnc() {\n","        return new SM3.Digest();\n","    }\n","\n","    /**\n","     * 签名方法OID\n","     *\n","     * @return 签名方法OID\n","     */\n","    @Override\n","    public ASN1ObjectIdentifier getSignAlgOID() {\n","        return GMObjectIdentifiers.sm2sign_with_sm3;\n","    }\n","\n","    /**\n","     * 设置TimeStampHook\n","     *\n","     * @param timeStampHook hook对象\n","     */\n","    public void setTimeStampHook(TimeStampHook timeStampHook) {\n","        this.timeStampHook = timeStampHook;\n","    }\n","\n","    /**\n","     * 对待签名数据进行电子签章\n","     * <p>\n","     * 注意：该方法不符合《GM/T 0031-2014 安全电子签章密码技术规范》 流程规范，生成的电子签章\n","     * 不具有效力，请使用符合国家标准具有型号证书的设备产生电子签章数据。\n","     * <p>\n","     * 该方法只用于测试调试。\n","     *\n","     * @param inData       待签名数据流\n","     * @param propertyInfo 签章属性信息\n","     * @return 签名或签章结果值\n","     * @throws IOException              流操作异常\n","     * @throws GeneralSecurityException 签名计算异常\n","     */\n","    @Override\n","    public byte[] sign(InputStream inData, String propertyInfo) throws IOException, GeneralSecurityException {\n","\n","        MessageDigest md = getDigestFnc();\n","        // 签名原文杂凑值，也就是Signature.xml 文件的杂凑值\n","        byte[] dataHash = md.digest(IOUtils.toByteArray(inData));\n","\n","        TBS_Sign toSign = new TBS_Sign()\n","                .setVersion(SES_Header.V4)\n","                .setEseal(seal)\n","                .setTimeInfo(new ASN1GeneralizedTime(new Date(), Locale.CHINA))\n","                .setDataHash(dataHash)\n","                .setPropertyInfo(propertyInfo);\n","\n","        Signature sg = Signature.getInstance(\"SM3WithSM2\", new BouncyCastleProvider());\n","        sg.initSign(privateKey);\n","        sg.update(toSign.getEncoded(\"DER\"));\n","        final byte[] sigVal = sg.sign();\n","        SES_Signature signature = new SES_Signature()\n","                .setToSign(toSign)\n","                .setCert(certificate)\n","                .setSignatureAlgID(GMObjectIdentifiers.sm2sign_with_sm3)\n","                .setSignature(sigVal);\n","\n","        if (timeStampHook != null) {\n","            byte[] timeStamp = timeStampHook.apply(sigVal);\n","            if (timeStamp != null) {\n","                signature.setTimeStamp(new DERBitString(timeStamp));\n","            }\n","        }\n","\n","        return signature.getEncoded(\"DER\");\n","    }\n","\n","    /**\n","     * 设置时间戳hook\n","     *\n","     * @param timeStampHook 传入得时间戳hook\n","     */\n","    public void setTimestampHook(TimeStampHook timeStampHook) {\n","        this.timeStampHook = timeStampHook;\n","    }\n","\n","    /**\n","     * 获取电子印章二进制编码\n","     * <p>\n","     * 如果{@link #getSignType()} 返还类型为{@link SigType#Sign}那么请返回null\n","     *\n","     * @return 电子印章二进制编码\n","     * @throws IOException 获取印章IO异常\n","     */\n","    @Override\n","    public byte[] getSeal() throws IOException {\n","        return seal.getEncoded(\"DER\");\n","    }\n","\n","    /**\n","     * 获取签名节点类型\n","     *\n","     * @return 签名节点类型\n","     */\n","    @Override\n","    public SigType getSignType() {\n","        return SigType.Seal;\n","    }\n","}\n"],"test_content":["package org.ofdrw.sign.signContainer;\n","\n","import org.junit.jupiter.api.Test;\n","import org.ofdrw.gm.cert.PKCS12Tools;\n","import org.ofdrw.gm.ses.v4.SESeal;\n","import org.ofdrw.reader.OFDReader;\n","import org.ofdrw.sign.NumberFormatAtomicSignID;\n","import org.ofdrw.sign.OFDSigner;\n","import org.ofdrw.sign.SignMode;\n","import org.ofdrw.sign.stamppos.NormalStampPos;\n","\n","import java.io.IOException;\n","import java.nio.file.Files;\n","import java.nio.file.Path;\n","import java.nio.file.Paths;\n","import java.security.GeneralSecurityException;\n","import java.security.PrivateKey;\n","import java.security.cert.Certificate;\n","\n","import static org.junit.jupiter.api.Assertions.*;\n","\n","class SESV4ContainerTest {\n","    @Test\n","    public void sign() throws GeneralSecurityException, IOException {\n","        Path userP12Path = Paths.get(\"src/test/resources\", \"USER.p12\");\n","        Path sealPath = Paths.get(\"src/test/resources\", \"UserV4.esl\");\n","\n","        PrivateKey prvKey = PKCS12Tools.ReadPrvKey(userP12Path, \"private\", \"777777\");\n","        Certificate signCert = PKCS12Tools.ReadUserCert(userP12Path, \"private\", \"777777\");\n","        SESeal seal = SESeal.getInstance(Files.readAllBytes(sealPath));\n","\n","        Path src = Paths.get(\"src/test/resources\", \"helloworld.ofd\");\n","        Path out = Paths.get(\"target/SESV4SignDoc.ofd\");\n","        // 1. 构造签名引擎\n","        try (OFDReader reader = new OFDReader(src);\n","//             OFDSigner signer = new OFDSigner(reader, out)\n","             OFDSigner signer = new OFDSigner(reader, out, new NumberFormatAtomicSignID())\n","        ) {\n","            SESV4Container signContainer = new SESV4Container(prvKey, seal, signCert);\n","            // 2. 设置签名模式\n","//            signer.setSignMode(SignMode.WholeProtected);\n","            signer.setSignMode(SignMode.ContinueSign);\n","            // 3. 设置签名使用的扩展签名容器\n","            signer.setSignContainer(signContainer);\n","            // 4. 设置显示位置\n","            signer.addApPos(new NormalStampPos(1, 50, 50, 40, 40));\n","            // 5. 执行签名\n","            signer.exeSign();\n","            // 6. 关闭签名引擎，生成文档。\n","        }\n","        System.out.println(\">> 生成文件位置: \" + out.toAbsolutePath().toAbsolutePath());\n","    }\n","\n","}"],"method_lines_dic":{"SESV4Container::::getDigestFnc()":[91,94],"SESV4Container::::getSignAlgOID()":[101,104],"SESV4Container::::setTimeStampHook(org.ofdrw.sign.timestamp.TimeStampHook)":[111,113],"SESV4Container::::sign(java.io.InputStream,java.lang.String)":[129,161],"SESV4Container::::setTimestampHook(org.ofdrw.sign.timestamp.TimeStampHook)":[168,170],"SESV4Container::::getSeal()":[180,183],"SESV4Container::::getSignType()":[190,193]},"test_method_lines_dic":{"SESV4ContainerTest::::sign()":[23,52]},"reverse_method_lines_dic":{"91":"SESV4Container::::getDigestFnc()","92":"SESV4Container::::getDigestFnc()","93":"SESV4Container::::getDigestFnc()","94":"SESV4Container::::getDigestFnc()","101":"SESV4Container::::getSignAlgOID()","102":"SESV4Container::::getSignAlgOID()","103":"SESV4Container::::getSignAlgOID()","104":"SESV4Container::::getSignAlgOID()","111":"SESV4Container::::setTimeStampHook(org.ofdrw.sign.timestamp.TimeStampHook)","112":"SESV4Container::::setTimeStampHook(org.ofdrw.sign.timestamp.TimeStampHook)","113":"SESV4Container::::setTimeStampHook(org.ofdrw.sign.timestamp.TimeStampHook)","129":"SESV4Container::::sign(java.io.InputStream,java.lang.String)","130":"SESV4Container::::sign(java.io.InputStream,java.lang.String)","131":"SESV4Container::::sign(java.io.InputStream,java.lang.String)","132":"SESV4Container::::sign(java.io.InputStream,java.lang.String)","133":"SESV4Container::::sign(java.io.InputStream,java.lang.String)","134":"SESV4Container::::sign(java.io.InputStream,java.lang.String)","135":"SESV4Container::::sign(java.io.InputStream,java.lang.String)","136":"SESV4Container::::sign(java.io.InputStream,java.lang.String)","137":"SESV4Container::::sign(java.io.InputStream,java.lang.String)","138":"SESV4Container::::sign(java.io.InputStream,java.lang.String)","139":"SESV4Container::::sign(java.io.InputStream,java.lang.String)","140":"SESV4Container::::sign(java.io.InputStream,java.lang.String)","141":"SESV4Container::::sign(java.io.InputStream,java.lang.String)","142":"SESV4Container::::sign(java.io.InputStream,java.lang.String)","143":"SESV4Container::::sign(java.io.InputStream,java.lang.String)","144":"SESV4Container::::sign(java.io.InputStream,java.lang.String)","145":"SESV4Container::::sign(java.io.InputStream,java.lang.String)","146":"SESV4Container::::sign(java.io.InputStream,java.lang.String)","147":"SESV4Container::::sign(java.io.InputStream,java.lang.String)","148":"SESV4Container::::sign(java.io.InputStream,java.lang.String)","149":"SESV4Container::::sign(java.io.InputStream,java.lang.String)","150":"SESV4Container::::sign(java.io.InputStream,java.lang.String)","151":"SESV4Container::::sign(java.io.InputStream,java.lang.String)","152":"SESV4Container::::sign(java.io.InputStream,java.lang.String)","153":"SESV4Container::::sign(java.io.InputStream,java.lang.String)","154":"SESV4Container::::sign(java.io.InputStream,java.lang.String)","155":"SESV4Container::::sign(java.io.InputStream,java.lang.String)","156":"SESV4Container::::sign(java.io.InputStream,java.lang.String)","157":"SESV4Container::::sign(java.io.InputStream,java.lang.String)","158":"SESV4Container::::sign(java.io.InputStream,java.lang.String)","159":"SESV4Container::::sign(java.io.InputStream,java.lang.String)","160":"SESV4Container::::sign(java.io.InputStream,java.lang.String)","161":"SESV4Container::::sign(java.io.InputStream,java.lang.String)","168":"SESV4Container::::setTimestampHook(org.ofdrw.sign.timestamp.TimeStampHook)","169":"SESV4Container::::setTimestampHook(org.ofdrw.sign.timestamp.TimeStampHook)","170":"SESV4Container::::setTimestampHook(org.ofdrw.sign.timestamp.TimeStampHook)","180":"SESV4Container::::getSeal()","181":"SESV4Container::::getSeal()","182":"SESV4Container::::getSeal()","183":"SESV4Container::::getSeal()","190":"SESV4Container::::getSignType()","191":"SESV4Container::::getSignType()","192":"SESV4Container::::getSignType()","193":"SESV4Container::::getSignType()"},"test_reverse_method_lines_dic":{"23":"SESV4ContainerTest::::sign()","24":"SESV4ContainerTest::::sign()","25":"SESV4ContainerTest::::sign()","26":"SESV4ContainerTest::::sign()","27":"SESV4ContainerTest::::sign()","28":"SESV4ContainerTest::::sign()","29":"SESV4ContainerTest::::sign()","30":"SESV4ContainerTest::::sign()","31":"SESV4ContainerTest::::sign()","32":"SESV4ContainerTest::::sign()","33":"SESV4ContainerTest::::sign()","34":"SESV4ContainerTest::::sign()","35":"SESV4ContainerTest::::sign()","36":"SESV4ContainerTest::::sign()","37":"SESV4ContainerTest::::sign()","38":"SESV4ContainerTest::::sign()","39":"SESV4ContainerTest::::sign()","40":"SESV4ContainerTest::::sign()","41":"SESV4ContainerTest::::sign()","42":"SESV4ContainerTest::::sign()","43":"SESV4ContainerTest::::sign()","44":"SESV4ContainerTest::::sign()","45":"SESV4ContainerTest::::sign()","46":"SESV4ContainerTest::::sign()","47":"SESV4ContainerTest::::sign()","48":"SESV4ContainerTest::::sign()","49":"SESV4ContainerTest::::sign()","50":"SESV4ContainerTest::::sign()","51":"SESV4ContainerTest::::sign()","52":"SESV4ContainerTest::::sign()"},"tests":[{"test_lines":[23,52],"covered_lines":[65,66,67,68,69,93,103,132,134,136,137,138,139,140,141,143,144,145,146,147,148,149,150,151,153,160,182,192],"label":"<<NO FOCAL METHOD>>"}]},"/bernard/dataset_construction/prep/repos/ofdrw/ofdrw-sign/src/main/java/org/ofdrw/sign/signContainer/GBT35275DSContainer.java":{"class_content":["package org.ofdrw.sign.signContainer;\n","\n","import org.apache.commons.io.IOUtils;\n","import org.bouncycastle.asn1.ASN1ObjectIdentifier;\n","import org.bouncycastle.asn1.gm.GMObjectIdentifiers;\n","import org.bouncycastle.jcajce.provider.digest.SM3;\n","import org.bouncycastle.jce.provider.BouncyCastleProvider;\n","import org.bouncycastle.util.encoders.Base64;\n","import org.jetbrains.annotations.NotNull;\n","import org.ofdrw.core.signatures.SigType;\n","import org.ofdrw.gm.sm2strut.ContentInfo;\n","import org.ofdrw.gm.sm2strut.OIDs;\n","import org.ofdrw.gm.sm2strut.SignedData;\n","import org.ofdrw.gm.sm2strut.builder.SignedDataBuilder;\n","import org.ofdrw.sign.ExtendSignatureContainer;\n","\n","import java.io.IOException;\n","import java.io.InputStream;\n","import java.security.GeneralSecurityException;\n","import java.security.MessageDigest;\n","import java.security.PrivateKey;\n","import java.security.Signature;\n","import java.security.cert.Certificate;\n","\n","/**\n"," * 根据 GM/T 0099-2020 7.2.2 数据格式要求\n"," * <p>\n"," * b) 签名类型为数字签名且签名算法使用SM2时，签名值数据应遵循 GB/T 35275\n"," *\n"," * @author 权观宇\n"," * @since 2021-8-9 16:15:16\n"," */\n","public class GBT35275DSContainer implements ExtendSignatureContainer {\n","\n","    /**\n","     * 签名私钥\n","     */\n","    private final PrivateKey prvKey;\n","\n","    /**\n","     * 私钥对应公钥的证书\n","     */\n","    private final Certificate cert;\n","\n","    /**\n","     * 是否需要将文件Hash值进行Base64编码\n","     * <p>\n","     * 该参数用于兼容非规范的签名原文被Base64编码的待签名原文\n","     */\n","    private boolean enableFileHashBase64;\n","\n","    /**\n","     * 创建数字签名容器\n","     * <p>\n","     * 签名值数据应遵循 GB/T 35275\n","     *\n","     * @param cert   SM2签名证书，应符合GB/T 20518\n","     * @param prvKey 私钥\n","     */\n","    public GBT35275DSContainer(@NotNull Certificate cert, @NotNull PrivateKey prvKey) {\n","        if (cert == null) {\n","            throw new IllegalArgumentException(\"签名使用证书（cert）不能为空\");\n","        }\n","        if (prvKey == null) {\n","            throw new IllegalArgumentException(\"签名使用私钥（prvKey）不能为空\");\n","        }\n","        this.cert = cert;\n","        this.prvKey = prvKey;\n","        this.enableFileHashBase64 = false;\n","    }\n","\n","    /**\n","     * SM3摘要算法功能\n","     *\n","     * @return SM3摘要算法功能\n","     */\n","    @Override\n","    public MessageDigest getDigestFnc() {\n","        return new SM3.Digest();\n","    }\n","\n","    /**\n","     * SM2WithSM3\n","     *\n","     * @return 签名方法OID\n","     */\n","    @Override\n","    public ASN1ObjectIdentifier getSignAlgOID() {\n","        return GMObjectIdentifiers.sm2sign_with_sm3;\n","    }\n","\n","    /**\n","     * 对待签名数据签名\n","     *\n","     * @param inData       待签名数据流\n","     * @param propertyInfo 忽略\n","     * @return 签名结果值\n","     * @throws IOException       IO流读取异常\n","     * @throws SecurityException 签名计算异常\n","     */\n","    @Override\n","    public byte[] sign(InputStream inData, String propertyInfo) throws GeneralSecurityException, IOException {\n","        // 计算原文摘要\n","        MessageDigest md = new SM3.Digest();\n","        // d) 调用杂凑算法计算签名文件的杂凑值\n","        byte[] plaintext = md.digest(IOUtils.toByteArray(inData));\n","        if (this.enableFileHashBase64) {\n","            plaintext = Base64.encode(plaintext);\n","        }\n","\n","        // e) 根据签名方案，使用操作人签名的私钥对杂凑值进行数字签名\n","        Signature signatureFnc = Signature.getInstance(\n","                GMObjectIdentifiers.sm2sign_with_sm3.toString(),\n","                new BouncyCastleProvider());\n","        signatureFnc.initSign(prvKey);\n","        signatureFnc.update(plaintext);\n","        // 执行签名产生签名值\n","        final byte[] signature = signatureFnc.sign();\n","        final SignedData signedData = SignedDataBuilder.signedData(plaintext, signature, this.cert);\n","        ContentInfo contentInfo = new ContentInfo(OIDs.signedData, signedData);\n","        return contentInfo.getEncoded();\n","    }\n","\n","    /**\n","     * 电子签名不提供印章\n","     *\n","     * @return null\n","     * @throws IOException 获取印章IO异常\n","     */\n","    @Override\n","    public byte[] getSeal() throws IOException {\n","        return null;\n","    }\n","\n","    /**\n","     * 获取签名节点类型\n","     *\n","     * @return 签名节点类型\n","     */\n","    @Override\n","    public SigType getSignType() {\n","        return SigType.Sign;\n","    }\n","\n","    /**\n","     * 是否对文件摘要值进行Base64编码\n","     * <p>\n","     * Base64编码后的内容将会为待签名原文被签名\n","     * <p>\n","     * 该开关用于兼容部分阅读器只支持签名原文的文件Hash的Base64的情况。\n","     *\n","     * @param state 开关，true - 开启、false - 关闭\n","     */\n","    public void setEnableFileHashBase64(boolean state) {\n","        this.enableFileHashBase64 = state;\n","    }\n","}\n"],"test_content":["package org.ofdrw.sign.signContainer;\n","\n","import org.bouncycastle.cert.X509CertificateHolder;\n","import org.bouncycastle.cert.jcajce.JcaX509CertificateConverter;\n","import org.bouncycastle.jce.provider.BouncyCastleProvider;\n","import org.bouncycastle.openssl.PEMKeyPair;\n","import org.bouncycastle.openssl.PEMParser;\n","import org.bouncycastle.openssl.jcajce.JcaPEMKeyConverter;\n","import org.junit.jupiter.api.Test;\n","import org.ofdrw.gm.cert.PEMLoader;\n","import org.ofdrw.reader.OFDReader;\n","import org.ofdrw.sign.OFDSigner;\n","\n","import java.io.IOException;\n","import java.io.InputStream;\n","import java.io.InputStreamReader;\n","import java.nio.file.Files;\n","import java.nio.file.Path;\n","import java.nio.file.Paths;\n","import java.security.GeneralSecurityException;\n","import java.security.PrivateKey;\n","import java.security.Security;\n","import java.security.cert.Certificate;\n","import java.security.cert.X509Certificate;\n","\n","/**\n"," * @author 权观宇\n"," * @since 2021-08-09 16:08:42\n"," */\n","class GBT35275DSContainerTest {\n","\n","    /**\n","     * 测试符合 GB/T 35275 的签名\n","     */\n","    @Test\n","    void sign() throws GeneralSecurityException, IOException {\n","        Security.addProvider(new BouncyCastleProvider());\n","\n","        Path certPemFile = Paths.get(\"src/test/resources\", \"sign_cert.pem\");\n","        Path keyPemFile = Paths.get(\"src/test/resources\", \"sign_key.pem\");\n","        final PrivateKey privateKey = PEMLoader.loadPrivateKey(keyPemFile);\n","        final Certificate certificate = PEMLoader.loadCert(certPemFile);\n","\n","        Path src = Paths.get(\"src/test/resources\", \"helloworld.ofd\");\n","        Path out = Paths.get(\"target/GB35275DigitalSign.ofd\");\n","        // 1. 构造签名引擎\n","        try (OFDReader reader = new OFDReader(src);\n","             OFDSigner signer = new OFDSigner(reader, out)) {\n","            GBT35275DSContainer signContainer = new GBT35275DSContainer(certificate, privateKey);\n","//            // 该参数用于兼容部分阅读只支持对Hash结果的Base64签名\n","//            signContainer.setEnableFileHashBase64(true);\n","            // 3. 设置签名使用的扩展签名容器\n","            signer.setSignContainer(signContainer);\n","            // 4. 执行签名\n","            signer.exeSign();\n","            // 5. 关闭签名引擎，生成文档。\n","        }\n","        System.out.println(\">> 生成文件位置: \" + out.toAbsolutePath().toAbsolutePath());\n","    }\n","\n","}"],"method_lines_dic":{"GBT35275DSContainer::::getDigestFnc()":[77,80],"GBT35275DSContainer::::getSignAlgOID()":[87,90],"GBT35275DSContainer::::sign(java.io.InputStream,java.lang.String)":[101,122],"GBT35275DSContainer::::getSeal()":[130,133],"GBT35275DSContainer::::getSignType()":[140,143],"GBT35275DSContainer::::setEnableFileHashBase64(boolean)":[154,156]},"test_method_lines_dic":{"GBT35275DSContainerTest::::sign()":[35,59]},"reverse_method_lines_dic":{"77":"GBT35275DSContainer::::getDigestFnc()","78":"GBT35275DSContainer::::getDigestFnc()","79":"GBT35275DSContainer::::getDigestFnc()","80":"GBT35275DSContainer::::getDigestFnc()","87":"GBT35275DSContainer::::getSignAlgOID()","88":"GBT35275DSContainer::::getSignAlgOID()","89":"GBT35275DSContainer::::getSignAlgOID()","90":"GBT35275DSContainer::::getSignAlgOID()","101":"GBT35275DSContainer::::sign(java.io.InputStream,java.lang.String)","102":"GBT35275DSContainer::::sign(java.io.InputStream,java.lang.String)","103":"GBT35275DSContainer::::sign(java.io.InputStream,java.lang.String)","104":"GBT35275DSContainer::::sign(java.io.InputStream,java.lang.String)","105":"GBT35275DSContainer::::sign(java.io.InputStream,java.lang.String)","106":"GBT35275DSContainer::::sign(java.io.InputStream,java.lang.String)","107":"GBT35275DSContainer::::sign(java.io.InputStream,java.lang.String)","108":"GBT35275DSContainer::::sign(java.io.InputStream,java.lang.String)","109":"GBT35275DSContainer::::sign(java.io.InputStream,java.lang.String)","110":"GBT35275DSContainer::::sign(java.io.InputStream,java.lang.String)","111":"GBT35275DSContainer::::sign(java.io.InputStream,java.lang.String)","112":"GBT35275DSContainer::::sign(java.io.InputStream,java.lang.String)","113":"GBT35275DSContainer::::sign(java.io.InputStream,java.lang.String)","114":"GBT35275DSContainer::::sign(java.io.InputStream,java.lang.String)","115":"GBT35275DSContainer::::sign(java.io.InputStream,java.lang.String)","116":"GBT35275DSContainer::::sign(java.io.InputStream,java.lang.String)","117":"GBT35275DSContainer::::sign(java.io.InputStream,java.lang.String)","118":"GBT35275DSContainer::::sign(java.io.InputStream,java.lang.String)","119":"GBT35275DSContainer::::sign(java.io.InputStream,java.lang.String)","120":"GBT35275DSContainer::::sign(java.io.InputStream,java.lang.String)","121":"GBT35275DSContainer::::sign(java.io.InputStream,java.lang.String)","122":"GBT35275DSContainer::::sign(java.io.InputStream,java.lang.String)","130":"GBT35275DSContainer::::getSeal()","131":"GBT35275DSContainer::::getSeal()","132":"GBT35275DSContainer::::getSeal()","133":"GBT35275DSContainer::::getSeal()","140":"GBT35275DSContainer::::getSignType()","141":"GBT35275DSContainer::::getSignType()","142":"GBT35275DSContainer::::getSignType()","143":"GBT35275DSContainer::::getSignType()","154":"GBT35275DSContainer::::setEnableFileHashBase64(boolean)","155":"GBT35275DSContainer::::setEnableFileHashBase64(boolean)","156":"GBT35275DSContainer::::setEnableFileHashBase64(boolean)"},"test_reverse_method_lines_dic":{"35":"GBT35275DSContainerTest::::sign()","36":"GBT35275DSContainerTest::::sign()","37":"GBT35275DSContainerTest::::sign()","38":"GBT35275DSContainerTest::::sign()","39":"GBT35275DSContainerTest::::sign()","40":"GBT35275DSContainerTest::::sign()","41":"GBT35275DSContainerTest::::sign()","42":"GBT35275DSContainerTest::::sign()","43":"GBT35275DSContainerTest::::sign()","44":"GBT35275DSContainerTest::::sign()","45":"GBT35275DSContainerTest::::sign()","46":"GBT35275DSContainerTest::::sign()","47":"GBT35275DSContainerTest::::sign()","48":"GBT35275DSContainerTest::::sign()","49":"GBT35275DSContainerTest::::sign()","50":"GBT35275DSContainerTest::::sign()","51":"GBT35275DSContainerTest::::sign()","52":"GBT35275DSContainerTest::::sign()","53":"GBT35275DSContainerTest::::sign()","54":"GBT35275DSContainerTest::::sign()","55":"GBT35275DSContainerTest::::sign()","56":"GBT35275DSContainerTest::::sign()","57":"GBT35275DSContainerTest::::sign()","58":"GBT35275DSContainerTest::::sign()","59":"GBT35275DSContainerTest::::sign()"},"tests":[{"test_lines":[35,59],"covered_lines":[60,61,64,67,68,69,70,79,89,104,106,107,112,113,115,116,118,119,120,121,142],"label":"<<NO FOCAL METHOD>>"}]},"/bernard/dataset_construction/prep/repos/ofdrw/ofdrw-sign/src/main/java/org/ofdrw/sign/signContainer/SESV1Container.java":{"class_content":["package org.ofdrw.sign.signContainer;\n","\n","import org.apache.commons.io.IOUtils;\n","import org.bouncycastle.asn1.*;\n","import org.bouncycastle.asn1.gm.GMObjectIdentifiers;\n","import org.bouncycastle.jcajce.provider.digest.SM3;\n","import org.bouncycastle.jce.provider.BouncyCastleProvider;\n","import org.ofdrw.core.signatures.SigType;\n","import org.ofdrw.gm.ses.v1.SES_Signature;\n","import org.ofdrw.gm.ses.v1.SESeal;\n","import org.ofdrw.gm.ses.v1.TBS_Sign;\n","import org.ofdrw.sign.ExtendSignatureContainer;\n","\n","import java.io.IOException;\n","import java.io.InputStream;\n","import java.nio.charset.StandardCharsets;\n","import java.security.*;\n","import java.security.cert.Certificate;\n","import java.text.SimpleDateFormat;\n","import java.time.Instant;\n","import java.time.LocalDateTime;\n","import java.time.format.DateTimeFormatter;\n","import java.util.Date;\n","import java.util.Locale;\n","\n","/**\n"," * 《GM/T 0031-2014 安全电子签章密码技术规范》 电子签章数据生成扩展容器\n"," * <p>\n"," * 注意：该容器仅用于测试，电子签章请使用符合国家规范具有国家型号证书的设备进行！\n"," *\n"," * @author 权观宇\n"," * @since 2020-04-21 01:22:47\n"," */\n","public class SESV1Container implements ExtendSignatureContainer {\n","    /**\n","     * 签名使用的私钥\n","     */\n","    private final PrivateKey privateKey;\n","\n","    /**\n","     * 电子印章\n","     */\n","    private final SESeal seal;\n","\n","    /**\n","     * 签章使用的证书\n","     */\n","    private final Certificate certificate;\n","\n","\n","    /**\n","     * V1版本的电子签章容器构造\n","     *\n","     * @param privateKey 签名使用的私钥\n","     * @param seal       电子印章\n","     * @param signCert   签章用户证书\n","     */\n","    public SESV1Container(PrivateKey privateKey, SESeal seal, Certificate signCert) {\n","        this.privateKey = privateKey;\n","        this.seal = seal;\n","        this.certificate = signCert;\n","    }\n","\n","    /**\n","     * 提供文件的摘要算法功能\n","     *\n","     * @return 摘要算法功能\n","     */\n","    @Override\n","    public MessageDigest getDigestFnc() {\n","        return new SM3.Digest();\n","    }\n","\n","    /**\n","     * 签名方法OID\n","     *\n","     * @return 签名方法OID\n","     */\n","    @Override\n","    public ASN1ObjectIdentifier getSignAlgOID() {\n","        return GMObjectIdentifiers.sm2sign_with_sm3;\n","    }\n","\n","    /**\n","     * 对待签名数据进行电子签章\n","     * <p>\n","     * 注意：该方法不符合《GM/T 0031-2014 安全电子签章密码技术规范》 流程规范，生成的电子签章\n","     * 不具有效力，请使用符合国家标准具有型号证书的设备产生电子签章数据。\n","     * <p>\n","     * 该方法只用于测试调试。\n","     *\n","     * @param inData       待签名数据流\n","     * @param propertyInfo 签章属性信息\n","     * @return 签名或签章结果值\n","     * @throws IOException              流操作异常\n","     * @throws GeneralSecurityException 签名计算异常\n","     */\n","    @Override\n","    public byte[] sign(InputStream inData, String propertyInfo) throws IOException, GeneralSecurityException {\n","\n","        MessageDigest md = getDigestFnc();\n","        // 签名原文杂凑值，也就是Signature.xml 文件的杂凑值\n","        byte[] digest = md.digest(IOUtils.toByteArray(inData));\n","\n","        // 签名时间\n","        byte[] signUTCTime = LocalDateTime.now()\n","                .format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\"))\n","                .getBytes(StandardCharsets.UTF_8);\n","//        ASN1UTCTime signUTCTime = new ASN1UTCTime(new Date(), Locale.CHINA);\n","        TBS_Sign tbsSign = new TBS_Sign()\n","                .setVersion(new ASN1Integer(1))\n","                .setEseal(seal)\n","                .setTimeInfo(new DERBitString(signUTCTime))\n","                .setDataHash(new DERBitString(digest))\n","                .setPropertyInfo(new DERIA5String(propertyInfo))\n","                .setCert(new DEROctetString(certificate.getEncoded()))\n","                .setSignatureAlgorithm(GMObjectIdentifiers.sm2sign_with_sm3);\n","        Signature signature = Signature.getInstance(\"SM3withSm2\", new BouncyCastleProvider());\n","        signature.initSign(privateKey);\n","        signature.update(tbsSign.getEncoded(\"DER\"));\n","        byte[] sign = signature.sign();\n","        SES_Signature sesSignature = new SES_Signature(tbsSign, new DERBitString(sign));\n","        return sesSignature.getEncoded(\"DER\");\n","    }\n","\n","    /**\n","     * 获取电子印章二进制编码\n","     * <p>\n","     * 如果{@link #getSignType()} 返还类型为{@link SigType#Sign}那么请返回null\n","     *\n","     * @return 电子印章二进制编码\n","     * @throws IOException 获取印章IO异常\n","     */\n","    @Override\n","    public byte[] getSeal() throws IOException {\n","        return seal.getEncoded(\"DER\");\n","    }\n","\n","    /**\n","     * 获取签名节点类型\n","     *\n","     * @return 签名节点类型\n","     */\n","    @Override\n","    public SigType getSignType() {\n","        return SigType.Seal;\n","    }\n","}\n"],"test_content":["package org.ofdrw.sign.signContainer;\n","\n","import org.junit.jupiter.api.Test;\n","import org.ofdrw.gm.cert.PKCS12Tools;\n","import org.ofdrw.gm.ses.v1.SESeal;\n","import org.ofdrw.reader.OFDReader;\n","import org.ofdrw.sign.NumberFormatAtomicSignID;\n","import org.ofdrw.sign.OFDSigner;\n","import org.ofdrw.sign.SignMode;\n","import org.ofdrw.sign.stamppos.NormalStampPos;\n","\n","import java.io.IOException;\n","import java.nio.file.Files;\n","import java.nio.file.Path;\n","import java.nio.file.Paths;\n","import java.security.GeneralSecurityException;\n","import java.security.PrivateKey;\n","import java.security.cert.Certificate;\n","\n","import static org.junit.jupiter.api.Assertions.*;\n","\n","/**\n"," * 测试V1版本的电子签章\n"," *\n"," * @author 权观宇\n"," * @since 2020-04-21 01:59:21\n"," */\n","class SESV1ContainerTest {\n","\n","    @Test\n","    public void sign() throws GeneralSecurityException, IOException {\n","        Path userP12Path = Paths.get(\"src/test/resources\", \"USER.p12\");\n","        Path sealPath = Paths.get(\"src/test/resources\", \"UserV1.esl\");\n","\n","        PrivateKey prvKey = PKCS12Tools.ReadPrvKey(userP12Path, \"private\", \"777777\");\n","        Certificate signCert = PKCS12Tools.ReadUserCert(userP12Path, \"private\", \"777777\");\n","        SESeal seal = SESeal.getInstance(Files.readAllBytes(sealPath));\n","\n","        Path src = Paths.get(\"src/test/resources\", \"helloworld.ofd\");\n","        Path out = Paths.get(\"target/SESV1SignDoc.ofd\");\n","        // 1. 构造签名引擎\n","        try (OFDReader reader = new OFDReader(src);\n","             OFDSigner signer = new OFDSigner(reader, out)\n","//             OFDSigner signer = new OFDSigner(reader, out, new NumberFormatAtomicSignID()\n","        ) {\n","            SESV1Container signContainer = new SESV1Container(prvKey, seal, signCert);\n","            // 2. 设置签名模式\n","//            signer.setSignMode(SignMode.WholeProtected);\n","            signer.setSignMode(SignMode.ContinueSign);\n","            // 3. 设置签名使用的扩展签名容器\n","            signer.setSignContainer(signContainer);\n","            // 4. 设置显示位置\n","            signer.addApPos(new NormalStampPos(1, 50, 50, 40, 40));\n","            // 5. 执行签名\n","            signer.exeSign();\n","            // 6. 关闭签名引擎，生成文档。\n","        }\n","        System.out.println(\">> 生成文件位置: \" + out.toAbsolutePath().toAbsolutePath());\n","    }\n","\n","}"],"method_lines_dic":{"SESV1Container::::getDigestFnc()":[69,72],"SESV1Container::::getSignAlgOID()":[79,82],"SESV1Container::::sign(java.io.InputStream,java.lang.String)":[98,124],"SESV1Container::::getSeal()":[134,137],"SESV1Container::::getSignType()":[144,147]},"test_method_lines_dic":{"SESV1ContainerTest::::sign()":[30,59]},"reverse_method_lines_dic":{"69":"SESV1Container::::getDigestFnc()","70":"SESV1Container::::getDigestFnc()","71":"SESV1Container::::getDigestFnc()","72":"SESV1Container::::getDigestFnc()","79":"SESV1Container::::getSignAlgOID()","80":"SESV1Container::::getSignAlgOID()","81":"SESV1Container::::getSignAlgOID()","82":"SESV1Container::::getSignAlgOID()","98":"SESV1Container::::sign(java.io.InputStream,java.lang.String)","99":"SESV1Container::::sign(java.io.InputStream,java.lang.String)","100":"SESV1Container::::sign(java.io.InputStream,java.lang.String)","101":"SESV1Container::::sign(java.io.InputStream,java.lang.String)","102":"SESV1Container::::sign(java.io.InputStream,java.lang.String)","103":"SESV1Container::::sign(java.io.InputStream,java.lang.String)","104":"SESV1Container::::sign(java.io.InputStream,java.lang.String)","105":"SESV1Container::::sign(java.io.InputStream,java.lang.String)","106":"SESV1Container::::sign(java.io.InputStream,java.lang.String)","107":"SESV1Container::::sign(java.io.InputStream,java.lang.String)","108":"SESV1Container::::sign(java.io.InputStream,java.lang.String)","109":"SESV1Container::::sign(java.io.InputStream,java.lang.String)","110":"SESV1Container::::sign(java.io.InputStream,java.lang.String)","111":"SESV1Container::::sign(java.io.InputStream,java.lang.String)","112":"SESV1Container::::sign(java.io.InputStream,java.lang.String)","113":"SESV1Container::::sign(java.io.InputStream,java.lang.String)","114":"SESV1Container::::sign(java.io.InputStream,java.lang.String)","115":"SESV1Container::::sign(java.io.InputStream,java.lang.String)","116":"SESV1Container::::sign(java.io.InputStream,java.lang.String)","117":"SESV1Container::::sign(java.io.InputStream,java.lang.String)","118":"SESV1Container::::sign(java.io.InputStream,java.lang.String)","119":"SESV1Container::::sign(java.io.InputStream,java.lang.String)","120":"SESV1Container::::sign(java.io.InputStream,java.lang.String)","121":"SESV1Container::::sign(java.io.InputStream,java.lang.String)","122":"SESV1Container::::sign(java.io.InputStream,java.lang.String)","123":"SESV1Container::::sign(java.io.InputStream,java.lang.String)","124":"SESV1Container::::sign(java.io.InputStream,java.lang.String)","134":"SESV1Container::::getSeal()","135":"SESV1Container::::getSeal()","136":"SESV1Container::::getSeal()","137":"SESV1Container::::getSeal()","144":"SESV1Container::::getSignType()","145":"SESV1Container::::getSignType()","146":"SESV1Container::::getSignType()","147":"SESV1Container::::getSignType()"},"test_reverse_method_lines_dic":{"30":"SESV1ContainerTest::::sign()","31":"SESV1ContainerTest::::sign()","32":"SESV1ContainerTest::::sign()","33":"SESV1ContainerTest::::sign()","34":"SESV1ContainerTest::::sign()","35":"SESV1ContainerTest::::sign()","36":"SESV1ContainerTest::::sign()","37":"SESV1ContainerTest::::sign()","38":"SESV1ContainerTest::::sign()","39":"SESV1ContainerTest::::sign()","40":"SESV1ContainerTest::::sign()","41":"SESV1ContainerTest::::sign()","42":"SESV1ContainerTest::::sign()","43":"SESV1ContainerTest::::sign()","44":"SESV1ContainerTest::::sign()","45":"SESV1ContainerTest::::sign()","46":"SESV1ContainerTest::::sign()","47":"SESV1ContainerTest::::sign()","48":"SESV1ContainerTest::::sign()","49":"SESV1ContainerTest::::sign()","50":"SESV1ContainerTest::::sign()","51":"SESV1ContainerTest::::sign()","52":"SESV1ContainerTest::::sign()","53":"SESV1ContainerTest::::sign()","54":"SESV1ContainerTest::::sign()","55":"SESV1ContainerTest::::sign()","56":"SESV1ContainerTest::::sign()","57":"SESV1ContainerTest::::sign()","58":"SESV1ContainerTest::::sign()","59":"SESV1ContainerTest::::sign()"},"tests":[{"test_lines":[30,59],"covered_lines":[58,59,60,61,62,71,81,101,103,106,107,108,110,111,112,113,114,115,116,117,118,119,120,121,122,123,136,146],"label":"<<NO FOCAL METHOD>>"}]},"/bernard/dataset_construction/prep/repos/ofdrw/ofdrw-sign/src/main/java/org/ofdrw/sign/signContainer/DigitalSignContainer.java":{"class_content":["package org.ofdrw.sign.signContainer;\n","\n","import org.apache.commons.io.IOUtils;\n","import org.bouncycastle.asn1.ASN1ObjectIdentifier;\n","import org.bouncycastle.asn1.gm.GMObjectIdentifiers;\n","import org.bouncycastle.jcajce.provider.digest.SM3;\n","import org.bouncycastle.jce.provider.BouncyCastleProvider;\n","import org.ofdrw.core.signatures.SigType;\n","import org.ofdrw.sign.ExtendSignatureContainer;\n","\n","import java.io.IOException;\n","import java.io.InputStream;\n","import java.security.*;\n","\n","/**\n"," * 国密SM2withSM3数字签名实现容器\n"," * @deprecated OFD的数字签名应符合 《GB/T 35275》  {@link GBT35275DSContainer}\n"," *\n"," * @author 权观宇\n"," * @since 2020-04-20 12:26:33\n"," */\n","@Deprecated\n","public class DigitalSignContainer implements ExtendSignatureContainer {\n","\n","    /**\n","     * 签名私钥\n","     */\n","    private final PrivateKey prvKey;\n","\n","    public DigitalSignContainer(PrivateKey prvKey) {\n","        if (prvKey == null) {\n","            throw new IllegalArgumentException(\"签名使用私钥（prvKey）不能为空\");\n","        }\n","        this.prvKey = prvKey;\n","    }\n","\n","    /**\n","     * SM3摘要算法功能\n","     *\n","     * @return SM3摘要算法功能\n","     */\n","    @Override\n","    public MessageDigest getDigestFnc() {\n","        return new SM3.Digest();\n","    }\n","\n","    /**\n","     * SM2WithSM3\n","     *\n","     * @return 签名方法OID\n","     */\n","    @Override\n","    public ASN1ObjectIdentifier getSignAlgOID() {\n","        return GMObjectIdentifiers.sm2sign_with_sm3;\n","    }\n","\n","    /**\n","     * 对待签名数据签名\n","     *\n","     * @param inData       待签名数据流\n","     * @param propertyInfo 忽略\n","     * @return 签名结果值\n","     * @throws IOException       IO流读取异常\n","     * @throws SecurityException 签名计算异常\n","     */\n","    @Override\n","    public byte[] sign(InputStream inData, String propertyInfo) throws GeneralSecurityException, IOException {\n","        Signature signatureFnc = Signature.getInstance(\n","                GMObjectIdentifiers.sm2sign_with_sm3.toString(),\n","                new BouncyCastleProvider());\n","        signatureFnc.initSign(prvKey);\n","        signatureFnc.update(IOUtils.toByteArray(inData));\n","        return signatureFnc.sign();\n","    }\n","\n","    /**\n","     * 电子签名不提供印章\n","     *\n","     * @return null\n","     * @throws IOException 获取印章IO异常\n","     */\n","    @Override\n","    public byte[] getSeal() throws IOException {\n","        return null;\n","    }\n","\n","    /**\n","     * 获取签名节点类型\n","     *\n","     * @return 签名节点类型\n","     */\n","    @Override\n","    public SigType getSignType() {\n","        return SigType.Sign;\n","    }\n","}\n"],"test_content":["package org.ofdrw.sign.signContainer;\n","\n","import org.junit.jupiter.api.Test;\n","import org.ofdrw.gm.cert.PKCS12Tools;\n","import org.ofdrw.reader.OFDReader;\n","import org.ofdrw.sign.OFDSigner;\n","import org.ofdrw.sign.SignMode;\n","\n","import java.io.IOException;\n","import java.nio.file.Path;\n","import java.nio.file.Paths;\n","import java.security.GeneralSecurityException;\n","import java.security.PrivateKey;\n","\n","/**\n"," * 数据签名演示\n"," *\n"," * @author 权观宇\n"," * @since 2020-04-22 03:16:01\n"," */\n","class DigitalSignContainerTest {\n","\n","    /**\n","     * OFD电子签名演示\n","     */\n","    @Test\n","    void testDigestSign() throws GeneralSecurityException, IOException {\n","        Path userP12Path = Paths.get(\"src/test/resources\", \"USER.p12\");\n","        PrivateKey prvKey = PKCS12Tools.ReadPrvKey(userP12Path, \"private\", \"777777\");\n","\n","        Path src = Paths.get(\"src/test/resources\", \"helloworld.ofd\");\n","        Path out = Paths.get(\"target/DigitalSign.ofd\");\n","        // 1. 构造签名引擎\n","        try (OFDReader reader = new OFDReader(src);\n","             OFDSigner signer = new OFDSigner(reader, out)) {\n","            DigitalSignContainer signContainer = new DigitalSignContainer(prvKey);\n","            // 2. 设置签名模式\n","//            signer.setSignMode(SignMode.WholeProtected);\n","            signer.setSignMode(SignMode.ContinueSign);\n","            // 3. 设置签名使用的扩展签名容器\n","            signer.setSignContainer(signContainer);\n","            // 4. 执行签名\n","            signer.exeSign();\n","            // 5. 关闭签名引擎，生成文档。\n","        }\n","        System.out.println(\">> 生成文件位置: \" + out.toAbsolutePath().toAbsolutePath());\n","    }\n","\n","}"],"method_lines_dic":{"DigitalSignContainer::::getDigestFnc()":[42,45],"DigitalSignContainer::::getSignAlgOID()":[52,55],"DigitalSignContainer::::sign(java.io.InputStream,java.lang.String)":[66,74],"DigitalSignContainer::::getSeal()":[82,85],"DigitalSignContainer::::getSignType()":[92,95]},"test_method_lines_dic":{"DigitalSignContainerTest::::testDigestSign()":[26,47]},"reverse_method_lines_dic":{"42":"DigitalSignContainer::::getDigestFnc()","43":"DigitalSignContainer::::getDigestFnc()","44":"DigitalSignContainer::::getDigestFnc()","45":"DigitalSignContainer::::getDigestFnc()","52":"DigitalSignContainer::::getSignAlgOID()","53":"DigitalSignContainer::::getSignAlgOID()","54":"DigitalSignContainer::::getSignAlgOID()","55":"DigitalSignContainer::::getSignAlgOID()","66":"DigitalSignContainer::::sign(java.io.InputStream,java.lang.String)","67":"DigitalSignContainer::::sign(java.io.InputStream,java.lang.String)","68":"DigitalSignContainer::::sign(java.io.InputStream,java.lang.String)","69":"DigitalSignContainer::::sign(java.io.InputStream,java.lang.String)","70":"DigitalSignContainer::::sign(java.io.InputStream,java.lang.String)","71":"DigitalSignContainer::::sign(java.io.InputStream,java.lang.String)","72":"DigitalSignContainer::::sign(java.io.InputStream,java.lang.String)","73":"DigitalSignContainer::::sign(java.io.InputStream,java.lang.String)","74":"DigitalSignContainer::::sign(java.io.InputStream,java.lang.String)","82":"DigitalSignContainer::::getSeal()","83":"DigitalSignContainer::::getSeal()","84":"DigitalSignContainer::::getSeal()","85":"DigitalSignContainer::::getSeal()","92":"DigitalSignContainer::::getSignType()","93":"DigitalSignContainer::::getSignType()","94":"DigitalSignContainer::::getSignType()","95":"DigitalSignContainer::::getSignType()"},"test_reverse_method_lines_dic":{"26":"DigitalSignContainerTest::::testDigestSign()","27":"DigitalSignContainerTest::::testDigestSign()","28":"DigitalSignContainerTest::::testDigestSign()","29":"DigitalSignContainerTest::::testDigestSign()","30":"DigitalSignContainerTest::::testDigestSign()","31":"DigitalSignContainerTest::::testDigestSign()","32":"DigitalSignContainerTest::::testDigestSign()","33":"DigitalSignContainerTest::::testDigestSign()","34":"DigitalSignContainerTest::::testDigestSign()","35":"DigitalSignContainerTest::::testDigestSign()","36":"DigitalSignContainerTest::::testDigestSign()","37":"DigitalSignContainerTest::::testDigestSign()","38":"DigitalSignContainerTest::::testDigestSign()","39":"DigitalSignContainerTest::::testDigestSign()","40":"DigitalSignContainerTest::::testDigestSign()","41":"DigitalSignContainerTest::::testDigestSign()","42":"DigitalSignContainerTest::::testDigestSign()","43":"DigitalSignContainerTest::::testDigestSign()","44":"DigitalSignContainerTest::::testDigestSign()","45":"DigitalSignContainerTest::::testDigestSign()","46":"DigitalSignContainerTest::::testDigestSign()","47":"DigitalSignContainerTest::::testDigestSign()"},"tests":[{"test_lines":[26,47],"covered_lines":[30,31,34,35,44,54,68,69,71,72,73,94],"label":"DigitalSignContainer::::sign(java.io.InputStream,java.lang.String)"}]},"/bernard/dataset_construction/prep/repos/ofdrw/ofdrw-sign/src/main/java/org/ofdrw/sign/stamppos/RidingStampPos.java":{"class_content":["package org.ofdrw.sign.stamppos;\n","\n","import org.ofdrw.core.basicStructure.pageObj.Page;\n","import org.ofdrw.core.basicType.ST_Box;\n","import org.ofdrw.core.basicType.ST_RefID;\n","import org.ofdrw.core.signatures.appearance.StampAnnot;\n","import org.ofdrw.reader.OFDReader;\n","import org.ofdrw.sign.SignIDProvider;\n","\n","import java.util.ArrayList;\n","import java.util.List;\n","\n","/**\n"," * 骑缝章位置\n"," * <p>\n"," * 默认图章放在边的正中央\n"," *\n"," * @author 权观宇\n"," * @since 2020-04-18 10:07:08\n"," */\n","public class RidingStampPos implements StampAppearance {\n","    /**\n","     * 默认骑缝章以右侧边作为骑缝的位置\n","     */\n","    private Side side;\n","\n","    /**\n","     * 图章整章宽度\n","     * <p>\n","     * 单位毫米mm\n","     */\n","    private double width;\n","\n","    /**\n","     * 图章整章高度\n","     * <p>\n","     * 单位毫米mm\n","     */\n","    private double height;\n","\n","    /**\n","     * 图章在边上距离原地最近的边的偏移坐标\n","     * <p>\n","     * 单位毫米mm\n","     * <p>\n","     * 默认居中，为null\n","     */\n","    private Double offset = null;\n","\n","    /**\n","     * 图章在边上的margin\n","     * <p>\n","     * 单位毫米mm\n","     * <p>\n","     * 默认为0\n","     */\n","    private double margin = 0;\n","\n","    /**\n","     * 图章指定切割等份数量\n","     * <p>\n","     * 如果页面数量大于切割数量，印章将会重复。\n","     * <p>\n","     * 单位份\n","     * <p>\n","     * 默认以页数，为0\n","     */\n","    private int clipNumber = 0;\n","\n","    /**\n","     * 右侧边居中骑缝章\n","     *\n","     * @param width  章宽度，单位毫米mm\n","     * @param height 章高度，单位毫米mm\n","     */\n","    public RidingStampPos(double width, double height) {\n","        this.width = width;\n","        this.height = height;\n","        side = Side.Right;\n","    }\n","\n","    /**\n","     * 居中骑缝章\n","     *\n","     * @param side   指定图章所处的边\n","     * @param width  章宽度，单位毫米mm\n","     * @param height 章高度，单位毫米mm\n","     */\n","    public RidingStampPos(Side side, double width, double height) {\n","        this.side = side;\n","        this.width = width;\n","        this.height = height;\n","    }\n","\n","    /**\n","     * 指定图章在边上的相对位置\n","     *\n","     * @param side   指定图章所处的边\n","     * @param offset 相对于原点最近的边的顶点位置，null则默认居中\n","     * @param width  章宽度，单位毫米mm\n","     * @param height 章高度，单位毫米mm\n","     */\n","    public RidingStampPos(Side side, Double offset, double width, double height) {\n","        this.side = side;\n","        this.width = width;\n","        this.height = height;\n","        this.offset = offset;\n","    }\n","\n","    /**\n","     * 指定图章在边上的相对位置\n","     *\n","     * @param side   指定图章所处的边\n","     * @param offset 相对于原点最近的边的顶点位置，null则默认居中\n","     * @param width  章宽度，单位毫米mm\n","     * @param height 章高度，单位毫米mm\n","     * @param margin 页边距，单位毫米mm\n","     */\n","    public RidingStampPos(Side side, Double offset, double width, double height, double margin) {\n","        this.side = side;\n","        this.width = width;\n","        this.height = height;\n","        this.offset = offset;\n","        this.margin = margin;\n","    }\n","\n","    /**\n","     * 指定图章在边上的相对位置\n","     *\n","     * @param side       指定图章所处的边\n","     * @param offset     相对于原点最近的边的顶点位置，null则默认居中\n","     * @param clipNumber 指定切割份数\n","     * @param width      章宽度，单位毫米mm\n","     * @param height     章高度，单位毫米mm\n","     * @param margin     页边距，单位毫米mm\n","     */\n","    public RidingStampPos(Side side, Double offset, Integer clipNumber, double width, double height, double margin) {\n","        this.side = side;\n","        this.width = width;\n","        this.height = height;\n","        this.offset = offset;\n","        this.margin = margin;\n","        this.clipNumber = clipNumber;\n","    }\n","\n","\n","    public Side getSide() {\n","        return side;\n","    }\n","\n","    public RidingStampPos setSide(Side side) {\n","        this.side = side;\n","        return this;\n","    }\n","\n","    public double getWidth() {\n","        return width;\n","    }\n","\n","    public RidingStampPos setWidth(double width) {\n","        this.width = width;\n","        return this;\n","    }\n","\n","    public double getHeight() {\n","        return height;\n","    }\n","\n","    public RidingStampPos setHeight(double height) {\n","        this.height = height;\n","        return this;\n","    }\n","\n","    public Double getOffset() {\n","        return offset;\n","    }\n","\n","    public RidingStampPos setOffset(Double offset) {\n","        this.offset = offset;\n","        return this;\n","    }\n","\n","    public double getMargin() {\n","        return margin;\n","    }\n","\n","    public RidingStampPos setMargin(double margin) {\n","        this.margin = margin;\n","        return this;\n","    }\n","\n","    public int getClipNumber() {\n","        return clipNumber;\n","    }\n","\n","    public RidingStampPos setClipNumber(int clipNumber) {\n","        this.clipNumber = clipNumber;\n","        return this;\n","    }\n","\n","    @Override\n","    public List<StampAnnot> getAppearance(OFDReader ctx, SignIDProvider idProvider) {\n","\n","        // 总页码数\n","        int numPage = ctx.getNumberOfPages();\n","        List<StampAnnot> res = new ArrayList<>(numPage);\n","        boolean isClipNumber = this.clipNumber > 0 && this.clipNumber < numPage;\n","        int leftClipNumber = 0;\n","        if (side == Side.Right || side == Side.Left) {\n","            // 按页码平分印章图片\n","            double itemWith = this.width / numPage;\n","            if (isClipNumber) {\n","                itemWith = this.width / clipNumber;\n","                leftClipNumber = numPage % this.clipNumber;\n","                if (leftClipNumber == 1) {\n","                    leftClipNumber = this.clipNumber + 1;\n","                }\n","            }\n","            for (int i = 0; i < numPage; i++) {\n","                int index = leftClipNumber == 0 ? i : (leftClipNumber + i - numPage);\n","                if (numPage - i <= leftClipNumber) {\n","                    clipNumber = leftClipNumber;\n","                    itemWith = this.width / clipNumber;\n","                }\n","                Page page = ctx.getPage(i + 1);\n","                ST_Box pageSize = ctx.getPageSize(page);\n","                double x;\n","                ST_Box clip = null;\n","                if (side == Side.Right) {\n","                    x = pageSize.getWidth() - itemWith * (i + 1) - margin;\n","                    clip = new ST_Box(i * itemWith, 0, itemWith, this.height);\n","                    if (isClipNumber) {\n","                        x = pageSize.getWidth() - (Math.floorMod(index, clipNumber) + 1) * itemWith - margin;\n","                        clip = new ST_Box(Math.floorMod(index, clipNumber) * itemWith, 0, itemWith, this.height);\n","                    }\n","                } else {\n","                    x = 0 - itemWith * (numPage - 1 - i) + margin;\n","                    clip = new ST_Box((numPage - 1 - i) * itemWith, 0, itemWith, this.height);\n","                    if (isClipNumber) {\n","                        x = 0 - itemWith * (Math.floorMod(index, clipNumber)) + margin;\n","                        clip = new ST_Box(Math.floorMod(index, clipNumber) * itemWith, 0, itemWith, this.height);\n","                    }\n","                }\n","\n","                double y;\n","                if (this.offset == null) {\n","                    // 居中\n","                    y = pageSize.getHeight() / 2 - this.height / 2;\n","                } else {\n","                    y = this.offset;\n","                }\n","\n","                ST_RefID ref = ctx.getPageObjectId(i + 1).ref();\n","                StampAnnot annot = new StampAnnot()\n","                        .setID(idProvider.incrementAndGet())\n","                        .setBoundary(new ST_Box(x, y, this.width, this.height))\n","                        .setPageRef(ref)\n","                        .setClip(clip);\n","                res.add(annot);\n","            }\n","        } else {\n","            double itemHeight = this.height / numPage;\n","            if (isClipNumber) {\n","                itemHeight = this.height / clipNumber;\n","                leftClipNumber = numPage % this.clipNumber;\n","                if (leftClipNumber == 1) {\n","                    leftClipNumber = this.clipNumber + 1;\n","                }\n","            }\n","            for (int i = 0; i < numPage; i++) {\n","                int index = leftClipNumber == 0 ? i : (leftClipNumber + i - numPage);\n","                if (numPage - i <= leftClipNumber) {\n","                    clipNumber = leftClipNumber;\n","                    itemHeight = this.width / clipNumber;\n","                }\n","                Page page = ctx.getPage(i + 1);\n","                ST_Box pageSize = ctx.getPageSize(page);\n","\n","                double x;\n","                if (this.offset == null) {\n","                    // 居中\n","                    x = pageSize.getWidth() / 2 - this.width / 2;\n","                } else {\n","                    x = this.offset;\n","                }\n","\n","                double y;\n","                ST_Box clip = null;\n","                if (side == Side.Bottom) {\n","                    y = pageSize.getHeight() - itemHeight * (i + 1) - margin;\n","                    clip = new ST_Box(0, itemHeight * i, this.width, itemHeight);\n","                    if (isClipNumber) {\n","                        y = pageSize.getHeight() - (Math.floorMod(index, clipNumber) + 1) * itemHeight - margin;\n","                        clip = new ST_Box(0, itemHeight * Math.floorMod(index, clipNumber), this.width, itemHeight);\n","                    }\n","\n","                } else {\n","                    y = 0 - itemHeight * (numPage - 1 - i) + margin;\n","                    clip = new ST_Box(0, (numPage - 1 - i) * itemHeight, this.width, itemHeight);\n","                    if (isClipNumber) {\n","                        y = 0 - itemHeight * Math.floorMod(index, clipNumber) + margin;\n","                        clip = new ST_Box(0, Math.floorMod(index, clipNumber) * itemHeight, this.width, itemHeight);\n","                    }\n","                }\n","                ST_RefID ref = ctx.getPageObjectId(i + 1).ref();\n","                StampAnnot annot = new StampAnnot()\n","                        .setID(idProvider.incrementAndGet())\n","                        .setBoundary(new ST_Box(x, y, this.width, this.height))\n","                        .setPageRef(ref)\n","                        .setClip(clip);\n","                res.add(annot);\n","            }\n","\n","        }\n","        return res;\n","    }\n","}"],"test_content":["package org.ofdrw.sign.stamppos;\n","\n","import org.junit.jupiter.api.Test;\n","import org.ofdrw.gm.cert.PKCS12Tools;\n","import org.ofdrw.gm.ses.v4.SESeal;\n","import org.ofdrw.reader.OFDReader;\n","import org.ofdrw.sign.NumberFormatAtomicSignID;\n","import org.ofdrw.sign.OFDSigner;\n","import org.ofdrw.sign.SignMode;\n","import org.ofdrw.sign.signContainer.SESV4Container;\n","\n","import java.io.IOException;\n","import java.nio.file.Files;\n","import java.nio.file.Path;\n","import java.nio.file.Paths;\n","import java.security.GeneralSecurityException;\n","import java.security.PrivateKey;\n","import java.security.cert.Certificate;\n","\n","import static org.junit.jupiter.api.Assertions.*;\n","\n","/**\n"," * 骑缝章测试\n"," *\n"," * @author 权观宇\n"," * @since 2020-04-25 12:31:43\n"," */\n","class RidingStampPosTest {\n","\n","    @Test\n","    public void rideRight() throws GeneralSecurityException, IOException {\n","        Path userP12Path = Paths.get(\"src/test/resources\", \"USER.p12\");\n","        Path sealPath = Paths.get(\"src/test/resources\", \"UserV4.esl\");\n","\n","        PrivateKey prvKey = PKCS12Tools.ReadPrvKey(userP12Path, \"private\", \"777777\");\n","        Certificate signCert = PKCS12Tools.ReadUserCert(userP12Path, \"private\", \"777777\");\n","        SESeal seal = SESeal.getInstance(Files.readAllBytes(sealPath));\n","\n","        Path src = Paths.get(\"src/test/resources\", \"VPage7.ofd\");\n","        Path out = Paths.get(\"target/V4RideRight.ofd\");\n","        // 1. 构造签名引擎\n","        try (OFDReader reader = new OFDReader(src);\n","             OFDSigner signer = new OFDSigner(reader, out)) {\n","            SESV4Container signContainer = new SESV4Container(prvKey, seal, signCert);\n","            // 2. 设置签名模式\n","            signer.setSignMode(SignMode.WholeProtected);\n","            // 3. 设置签名使用的扩展签名容器\n","            signer.setSignContainer(signContainer);\n","            // 4. 设置显示位置\n","            signer.addApPos(new RidingStampPos(Side.Right, 40.0, 40, 40));\n","            // 5. 执行签名\n","            signer.exeSign();\n","            // 6. 关闭签名引擎，生成文档。\n","        }\n","        System.out.println(\">> 生成文件位置: \" + out.toAbsolutePath().toAbsolutePath());\n","    }\n","\n","    @Test\n","    public void rideLeft() throws GeneralSecurityException, IOException {\n","        Path userP12Path = Paths.get(\"src/test/resources\", \"USER.p12\");\n","        Path sealPath = Paths.get(\"src/test/resources\", \"UserV4.esl\");\n","\n","        PrivateKey prvKey = PKCS12Tools.ReadPrvKey(userP12Path, \"private\", \"777777\");\n","        Certificate signCert = PKCS12Tools.ReadUserCert(userP12Path, \"private\", \"777777\");\n","        SESeal seal = SESeal.getInstance(Files.readAllBytes(sealPath));\n","\n","        Path src = Paths.get(\"src/test/resources\", \"VPage7.ofd\");\n","        Path out = Paths.get(\"target/V4RideLeft.ofd\");\n","        // 1. 构造签名引擎\n","        try (OFDReader reader = new OFDReader(src);\n","             OFDSigner signer = new OFDSigner(reader, out)) {\n","            SESV4Container signContainer = new SESV4Container(prvKey, seal, signCert);\n","            // 2. 设置签名模式\n","            signer.setSignMode(SignMode.WholeProtected);\n","            // 3. 设置签名使用的扩展签名容器\n","            signer.setSignContainer(signContainer);\n","            // 4. 设置显示位置\n","            signer.addApPos(new RidingStampPos(Side.Left, 40.0, 40, 40));\n","            // 5. 执行签名\n","            signer.exeSign();\n","            // 6. 关闭签名引擎，生成文档。\n","        }\n","        System.out.println(\">> 生成文件位置: \" + out.toAbsolutePath().toAbsolutePath());\n","    }\n","\n","    @Test\n","    public void rideBottom() throws GeneralSecurityException, IOException {\n","        Path userP12Path = Paths.get(\"src/test/resources\", \"USER.p12\");\n","        Path sealPath = Paths.get(\"src/test/resources\", \"UserV4.esl\");\n","\n","        PrivateKey prvKey = PKCS12Tools.ReadPrvKey(userP12Path, \"private\", \"777777\");\n","        Certificate signCert = PKCS12Tools.ReadUserCert(userP12Path, \"private\", \"777777\");\n","        SESeal seal = SESeal.getInstance(Files.readAllBytes(sealPath));\n","\n","        Path src = Paths.get(\"src/test/resources\", \"VPage7.ofd\");\n","        Path out = Paths.get(\"target/V4RideBottom.ofd\");\n","        // 1. 构造签名引擎\n","        try (OFDReader reader = new OFDReader(src);\n","             OFDSigner signer = new OFDSigner(reader, out)) {\n","            SESV4Container signContainer = new SESV4Container(prvKey, seal, signCert);\n","            // 2. 设置签名模式\n","            signer.setSignMode(SignMode.WholeProtected);\n","            // 3. 设置签名使用的扩展签名容器\n","            signer.setSignContainer(signContainer);\n","            // 4. 设置显示位置\n","            signer.addApPos(new RidingStampPos(Side.Bottom, 40.0, 40, 40));\n","            // 5. 执行签名\n","            signer.exeSign();\n","            // 6. 关闭签名引擎，生成文档。\n","        }\n","        System.out.println(\">> 生成文件位置: \" + out.toAbsolutePath().toAbsolutePath());\n","    }\n","\n","    @Test\n","    public void rideTop() throws GeneralSecurityException, IOException {\n","        Path userP12Path = Paths.get(\"src/test/resources\", \"USER.p12\");\n","        Path sealPath = Paths.get(\"src/test/resources\", \"UserV4.esl\");\n","\n","        PrivateKey prvKey = PKCS12Tools.ReadPrvKey(userP12Path, \"private\", \"777777\");\n","        Certificate signCert = PKCS12Tools.ReadUserCert(userP12Path, \"private\", \"777777\");\n","        SESeal seal = SESeal.getInstance(Files.readAllBytes(sealPath));\n","\n","        Path src = Paths.get(\"src/test/resources\", \"VPage7.ofd\");\n","        Path out = Paths.get(\"target/V4RideTop.ofd\");\n","        // 1. 构造签名引擎\n","        try (OFDReader reader = new OFDReader(src);\n","             OFDSigner signer = new OFDSigner(reader, out)) {\n","            SESV4Container signContainer = new SESV4Container(prvKey, seal, signCert);\n","            // 2. 设置签名模式\n","            signer.setSignMode(SignMode.WholeProtected);\n","            // 3. 设置签名使用的扩展签名容器\n","            signer.setSignContainer(signContainer);\n","            // 4. 设置显示位置\n","            signer.addApPos(new RidingStampPos(Side.Top, 40.0, 40, 40));\n","            // 5. 执行签名\n","            signer.exeSign();\n","            // 6. 关闭签名引擎，生成文档。\n","        }\n","        System.out.println(\">> 生成文件位置: \" + out.toAbsolutePath().toAbsolutePath());\n","    }\n","\n","    @Test\n","    public void rideRightOffset() throws GeneralSecurityException, IOException {\n","        Path userP12Path = Paths.get(\"src/test/resources\", \"USER.p12\");\n","        Path sealPath = Paths.get(\"src/test/resources\", \"UserV4.esl\");\n","\n","        PrivateKey prvKey = PKCS12Tools.ReadPrvKey(userP12Path, \"private\", \"777777\");\n","        Certificate signCert = PKCS12Tools.ReadUserCert(userP12Path, \"private\", \"777777\");\n","        SESeal seal = SESeal.getInstance(Files.readAllBytes(sealPath));\n","\n","        Path src = Paths.get(\"src/test/resources\", \"VPage7.ofd\");\n","        Path out = Paths.get(\"target/V4RideRightOffset.ofd\");\n","        // 1. 构造签名引擎\n","        try (OFDReader reader = new OFDReader(src);\n","             OFDSigner signer = new OFDSigner(reader, out, new NumberFormatAtomicSignID())) {\n","            SESV4Container signContainer = new SESV4Container(prvKey, seal, signCert);\n","            // 2. 设置签名模式\n","            signer.setSignMode(SignMode.WholeProtected);\n","            // 3. 设置签名使用的扩展签名容器\n","            signer.setSignContainer(signContainer);\n","            // 4. 设置显示位置\n","            signer.addApPos(new RidingStampPos(Side.Right, 10d, 40, 40));\n","            // 5. 执行签名\n","            signer.exeSign();\n","            // 6. 关闭签名引擎，生成文档。\n","        }\n","        System.out.println(\">> 生成文件位置: \" + out.toAbsolutePath().toAbsolutePath());\n","    }\n","\n","    @Test\n","    public void rideTopOffset() throws GeneralSecurityException, IOException {\n","        Path userP12Path = Paths.get(\"src/test/resources\", \"USER.p12\");\n","        Path sealPath = Paths.get(\"src/test/resources\", \"UserV4.esl\");\n","\n","        PrivateKey prvKey = PKCS12Tools.ReadPrvKey(userP12Path, \"private\", \"777777\");\n","        Certificate signCert = PKCS12Tools.ReadUserCert(userP12Path, \"private\", \"777777\");\n","        SESeal seal = SESeal.getInstance(Files.readAllBytes(sealPath));\n","\n","        Path src = Paths.get(\"src/test/resources\", \"VPage7.ofd\");\n","        Path out = Paths.get(\"target/V4RideTopOffset.ofd\");\n","        // 1. 构造签名引擎\n","        try (OFDReader reader = new OFDReader(src);\n","             OFDSigner signer = new OFDSigner(reader, out,new NumberFormatAtomicSignID())) {\n","            SESV4Container signContainer = new SESV4Container(prvKey, seal, signCert);\n","            // 2. 设置签名模式\n","            signer.setSignMode(SignMode.WholeProtected);\n","            // 3. 设置签名使用的扩展签名容器\n","            signer.setSignContainer(signContainer);\n","            // 4. 设置显示位置\n","            signer.addApPos(new RidingStampPos(Side.Top, 10d, 40, 40));\n","            // 5. 执行签名\n","            signer.exeSign();\n","            // 6. 关闭签名引擎，生成文档。\n","        }\n","        System.out.println(\">> 生成文件位置: \" + out.toAbsolutePath().toAbsolutePath());\n","    }\n","\n","    @Test\n","    public void rideRightOffsetMaginClipNumber() throws GeneralSecurityException, IOException {\n","        Path userP12Path = Paths.get(\"src/test/resources\", \"USER.p12\");\n","        Path sealPath = Paths.get(\"src/test/resources\", \"UserV4.esl\");\n","\n","        PrivateKey prvKey = PKCS12Tools.ReadPrvKey(userP12Path, \"private\", \"777777\");\n","        Certificate signCert = PKCS12Tools.ReadUserCert(userP12Path, \"private\", \"777777\");\n","        SESeal seal = SESeal.getInstance(Files.readAllBytes(sealPath));\n","\n","        Path src = Paths.get(\"src/test/resources\", \"VPage7.ofd\");\n","        Path out = Paths.get(\"target/V4RideRightOffsetMaginClipNumber.ofd\");\n","        // 1. 构造签名引擎\n","        try (OFDReader reader = new OFDReader(src);\n","             OFDSigner signer = new OFDSigner(reader, out, new NumberFormatAtomicSignID())) {\n","            SESV4Container signContainer = new SESV4Container(prvKey, seal, signCert);\n","            // 2. 设置签名模式\n","            signer.setSignMode(SignMode.WholeProtected);\n","            // 3. 设置签名使用的扩展签名容器\n","            signer.setSignContainer(signContainer);\n","            // 4. 设置显示位置\n","            signer.addApPos(new RidingStampPos(Side.Right, 10d, 3, 40, 40, 1));\n","            // 5. 执行签名\n","            signer.exeSign();\n","            // 6. 关闭签名引擎，生成文档。\n","        }\n","        System.out.println(\">> 生成文件位置: \" + out.toAbsolutePath().toAbsolutePath());\n","    }\n","\n","\n","    @Test\n","    public void rideCuttingOnRight() throws GeneralSecurityException, IOException {\n","        Path userP12Path = Paths.get(\"src/test/resources\", \"USER.p12\");\n","        Path sealPath = Paths.get(\"src/test/resources\", \"UserV4.esl\");\n","\n","        PrivateKey prvKey = PKCS12Tools.ReadPrvKey(userP12Path, \"private\", \"777777\");\n","        Certificate signCert = PKCS12Tools.ReadUserCert(userP12Path, \"private\", \"777777\");\n","        SESeal seal = SESeal.getInstance(Files.readAllBytes(sealPath));\n","\n","        Path src = Paths.get(\"src/test/resources\", \"VPage7.ofd\");\n","        Path out = Paths.get(\"target/V4RideRightOffsetMaginClipNumber.ofd\");\n","        // 1. 构造签名引擎\n","        try (OFDReader reader = new OFDReader(src);\n","             OFDSigner signer = new OFDSigner(reader, out, new NumberFormatAtomicSignID())) {\n","            SESV4Container signContainer = new SESV4Container(prvKey, seal, signCert);\n","            // 2. 设置签名模式\n","            signer.setSignMode(SignMode.WholeProtected);\n","            // 3. 设置签名使用的扩展签名容器\n","            signer.setSignContainer(signContainer);\n","            // 4. 设置显示位置\n","            signer.addApPos(new CuttingRideStampPos(Side.Right, null, 40, 40, 0, null));\n","            // 5. 执行签名\n","            signer.exeSign();\n","            // 6. 关闭签名引擎，生成文档。\n","        }\n","        System.out.println(\">> 生成文件位置: \" + out.toAbsolutePath().toAbsolutePath());\n","    }\n","}"],"method_lines_dic":{"RidingStampPos::::getSide()":[147,149],"RidingStampPos::::setSide(org.ofdrw.sign.stamppos.Side)":[151,154],"RidingStampPos::::getWidth()":[156,158],"RidingStampPos::::setWidth(double)":[160,163],"RidingStampPos::::getHeight()":[165,167],"RidingStampPos::::setHeight(double)":[169,172],"RidingStampPos::::getOffset()":[174,176],"RidingStampPos::::setOffset(java.lang.Double)":[178,181],"RidingStampPos::::getMargin()":[183,185],"RidingStampPos::::setMargin(double)":[187,190],"RidingStampPos::::getClipNumber()":[192,194],"RidingStampPos::::setClipNumber(int)":[196,199]},"test_method_lines_dic":{"RidingStampPosTest::::rideRight()":[30,56],"RidingStampPosTest::::rideLeft()":[58,84],"RidingStampPosTest::::rideBottom()":[86,112],"RidingStampPosTest::::rideTop()":[114,140],"RidingStampPosTest::::rideRightOffset()":[142,168],"RidingStampPosTest::::rideTopOffset()":[170,196],"RidingStampPosTest::::rideRightOffsetMaginClipNumber()":[198,224],"RidingStampPosTest::::rideCuttingOnRight()":[227,253]},"reverse_method_lines_dic":{"147":"RidingStampPos::::getSide()","148":"RidingStampPos::::getSide()","149":"RidingStampPos::::getSide()","151":"RidingStampPos::::setSide(org.ofdrw.sign.stamppos.Side)","152":"RidingStampPos::::setSide(org.ofdrw.sign.stamppos.Side)","153":"RidingStampPos::::setSide(org.ofdrw.sign.stamppos.Side)","154":"RidingStampPos::::setSide(org.ofdrw.sign.stamppos.Side)","156":"RidingStampPos::::getWidth()","157":"RidingStampPos::::getWidth()","158":"RidingStampPos::::getWidth()","160":"RidingStampPos::::setWidth(double)","161":"RidingStampPos::::setWidth(double)","162":"RidingStampPos::::setWidth(double)","163":"RidingStampPos::::setWidth(double)","165":"RidingStampPos::::getHeight()","166":"RidingStampPos::::getHeight()","167":"RidingStampPos::::getHeight()","169":"RidingStampPos::::setHeight(double)","170":"RidingStampPos::::setHeight(double)","171":"RidingStampPos::::setHeight(double)","172":"RidingStampPos::::setHeight(double)","174":"RidingStampPos::::getOffset()","175":"RidingStampPos::::getOffset()","176":"RidingStampPos::::getOffset()","178":"RidingStampPos::::setOffset(java.lang.Double)","179":"RidingStampPos::::setOffset(java.lang.Double)","180":"RidingStampPos::::setOffset(java.lang.Double)","181":"RidingStampPos::::setOffset(java.lang.Double)","183":"RidingStampPos::::getMargin()","184":"RidingStampPos::::getMargin()","185":"RidingStampPos::::getMargin()","187":"RidingStampPos::::setMargin(double)","188":"RidingStampPos::::setMargin(double)","189":"RidingStampPos::::setMargin(double)","190":"RidingStampPos::::setMargin(double)","192":"RidingStampPos::::getClipNumber()","193":"RidingStampPos::::getClipNumber()","194":"RidingStampPos::::getClipNumber()","196":"RidingStampPos::::setClipNumber(int)","197":"RidingStampPos::::setClipNumber(int)","198":"RidingStampPos::::setClipNumber(int)","199":"RidingStampPos::::setClipNumber(int)"},"test_reverse_method_lines_dic":{"30":"RidingStampPosTest::::rideRight()","31":"RidingStampPosTest::::rideRight()","32":"RidingStampPosTest::::rideRight()","33":"RidingStampPosTest::::rideRight()","34":"RidingStampPosTest::::rideRight()","35":"RidingStampPosTest::::rideRight()","36":"RidingStampPosTest::::rideRight()","37":"RidingStampPosTest::::rideRight()","38":"RidingStampPosTest::::rideRight()","39":"RidingStampPosTest::::rideRight()","40":"RidingStampPosTest::::rideRight()","41":"RidingStampPosTest::::rideRight()","42":"RidingStampPosTest::::rideRight()","43":"RidingStampPosTest::::rideRight()","44":"RidingStampPosTest::::rideRight()","45":"RidingStampPosTest::::rideRight()","46":"RidingStampPosTest::::rideRight()","47":"RidingStampPosTest::::rideRight()","48":"RidingStampPosTest::::rideRight()","49":"RidingStampPosTest::::rideRight()","50":"RidingStampPosTest::::rideRight()","51":"RidingStampPosTest::::rideRight()","52":"RidingStampPosTest::::rideRight()","53":"RidingStampPosTest::::rideRight()","54":"RidingStampPosTest::::rideRight()","55":"RidingStampPosTest::::rideRight()","56":"RidingStampPosTest::::rideRight()","58":"RidingStampPosTest::::rideLeft()","59":"RidingStampPosTest::::rideLeft()","60":"RidingStampPosTest::::rideLeft()","61":"RidingStampPosTest::::rideLeft()","62":"RidingStampPosTest::::rideLeft()","63":"RidingStampPosTest::::rideLeft()","64":"RidingStampPosTest::::rideLeft()","65":"RidingStampPosTest::::rideLeft()","66":"RidingStampPosTest::::rideLeft()","67":"RidingStampPosTest::::rideLeft()","68":"RidingStampPosTest::::rideLeft()","69":"RidingStampPosTest::::rideLeft()","70":"RidingStampPosTest::::rideLeft()","71":"RidingStampPosTest::::rideLeft()","72":"RidingStampPosTest::::rideLeft()","73":"RidingStampPosTest::::rideLeft()","74":"RidingStampPosTest::::rideLeft()","75":"RidingStampPosTest::::rideLeft()","76":"RidingStampPosTest::::rideLeft()","77":"RidingStampPosTest::::rideLeft()","78":"RidingStampPosTest::::rideLeft()","79":"RidingStampPosTest::::rideLeft()","80":"RidingStampPosTest::::rideLeft()","81":"RidingStampPosTest::::rideLeft()","82":"RidingStampPosTest::::rideLeft()","83":"RidingStampPosTest::::rideLeft()","84":"RidingStampPosTest::::rideLeft()","86":"RidingStampPosTest::::rideBottom()","87":"RidingStampPosTest::::rideBottom()","88":"RidingStampPosTest::::rideBottom()","89":"RidingStampPosTest::::rideBottom()","90":"RidingStampPosTest::::rideBottom()","91":"RidingStampPosTest::::rideBottom()","92":"RidingStampPosTest::::rideBottom()","93":"RidingStampPosTest::::rideBottom()","94":"RidingStampPosTest::::rideBottom()","95":"RidingStampPosTest::::rideBottom()","96":"RidingStampPosTest::::rideBottom()","97":"RidingStampPosTest::::rideBottom()","98":"RidingStampPosTest::::rideBottom()","99":"RidingStampPosTest::::rideBottom()","100":"RidingStampPosTest::::rideBottom()","101":"RidingStampPosTest::::rideBottom()","102":"RidingStampPosTest::::rideBottom()","103":"RidingStampPosTest::::rideBottom()","104":"RidingStampPosTest::::rideBottom()","105":"RidingStampPosTest::::rideBottom()","106":"RidingStampPosTest::::rideBottom()","107":"RidingStampPosTest::::rideBottom()","108":"RidingStampPosTest::::rideBottom()","109":"RidingStampPosTest::::rideBottom()","110":"RidingStampPosTest::::rideBottom()","111":"RidingStampPosTest::::rideBottom()","112":"RidingStampPosTest::::rideBottom()","114":"RidingStampPosTest::::rideTop()","115":"RidingStampPosTest::::rideTop()","116":"RidingStampPosTest::::rideTop()","117":"RidingStampPosTest::::rideTop()","118":"RidingStampPosTest::::rideTop()","119":"RidingStampPosTest::::rideTop()","120":"RidingStampPosTest::::rideTop()","121":"RidingStampPosTest::::rideTop()","122":"RidingStampPosTest::::rideTop()","123":"RidingStampPosTest::::rideTop()","124":"RidingStampPosTest::::rideTop()","125":"RidingStampPosTest::::rideTop()","126":"RidingStampPosTest::::rideTop()","127":"RidingStampPosTest::::rideTop()","128":"RidingStampPosTest::::rideTop()","129":"RidingStampPosTest::::rideTop()","130":"RidingStampPosTest::::rideTop()","131":"RidingStampPosTest::::rideTop()","132":"RidingStampPosTest::::rideTop()","133":"RidingStampPosTest::::rideTop()","134":"RidingStampPosTest::::rideTop()","135":"RidingStampPosTest::::rideTop()","136":"RidingStampPosTest::::rideTop()","137":"RidingStampPosTest::::rideTop()","138":"RidingStampPosTest::::rideTop()","139":"RidingStampPosTest::::rideTop()","140":"RidingStampPosTest::::rideTop()","142":"RidingStampPosTest::::rideRightOffset()","143":"RidingStampPosTest::::rideRightOffset()","144":"RidingStampPosTest::::rideRightOffset()","145":"RidingStampPosTest::::rideRightOffset()","146":"RidingStampPosTest::::rideRightOffset()","147":"RidingStampPosTest::::rideRightOffset()","148":"RidingStampPosTest::::rideRightOffset()","149":"RidingStampPosTest::::rideRightOffset()","150":"RidingStampPosTest::::rideRightOffset()","151":"RidingStampPosTest::::rideRightOffset()","152":"RidingStampPosTest::::rideRightOffset()","153":"RidingStampPosTest::::rideRightOffset()","154":"RidingStampPosTest::::rideRightOffset()","155":"RidingStampPosTest::::rideRightOffset()","156":"RidingStampPosTest::::rideRightOffset()","157":"RidingStampPosTest::::rideRightOffset()","158":"RidingStampPosTest::::rideRightOffset()","159":"RidingStampPosTest::::rideRightOffset()","160":"RidingStampPosTest::::rideRightOffset()","161":"RidingStampPosTest::::rideRightOffset()","162":"RidingStampPosTest::::rideRightOffset()","163":"RidingStampPosTest::::rideRightOffset()","164":"RidingStampPosTest::::rideRightOffset()","165":"RidingStampPosTest::::rideRightOffset()","166":"RidingStampPosTest::::rideRightOffset()","167":"RidingStampPosTest::::rideRightOffset()","168":"RidingStampPosTest::::rideRightOffset()","170":"RidingStampPosTest::::rideTopOffset()","171":"RidingStampPosTest::::rideTopOffset()","172":"RidingStampPosTest::::rideTopOffset()","173":"RidingStampPosTest::::rideTopOffset()","174":"RidingStampPosTest::::rideTopOffset()","175":"RidingStampPosTest::::rideTopOffset()","176":"RidingStampPosTest::::rideTopOffset()","177":"RidingStampPosTest::::rideTopOffset()","178":"RidingStampPosTest::::rideTopOffset()","179":"RidingStampPosTest::::rideTopOffset()","180":"RidingStampPosTest::::rideTopOffset()","181":"RidingStampPosTest::::rideTopOffset()","182":"RidingStampPosTest::::rideTopOffset()","183":"RidingStampPosTest::::rideTopOffset()","184":"RidingStampPosTest::::rideTopOffset()","185":"RidingStampPosTest::::rideTopOffset()","186":"RidingStampPosTest::::rideTopOffset()","187":"RidingStampPosTest::::rideTopOffset()","188":"RidingStampPosTest::::rideTopOffset()","189":"RidingStampPosTest::::rideTopOffset()","190":"RidingStampPosTest::::rideTopOffset()","191":"RidingStampPosTest::::rideTopOffset()","192":"RidingStampPosTest::::rideTopOffset()","193":"RidingStampPosTest::::rideTopOffset()","194":"RidingStampPosTest::::rideTopOffset()","195":"RidingStampPosTest::::rideTopOffset()","196":"RidingStampPosTest::::rideTopOffset()","198":"RidingStampPosTest::::rideRightOffsetMaginClipNumber()","199":"RidingStampPosTest::::rideRightOffsetMaginClipNumber()","200":"RidingStampPosTest::::rideRightOffsetMaginClipNumber()","201":"RidingStampPosTest::::rideRightOffsetMaginClipNumber()","202":"RidingStampPosTest::::rideRightOffsetMaginClipNumber()","203":"RidingStampPosTest::::rideRightOffsetMaginClipNumber()","204":"RidingStampPosTest::::rideRightOffsetMaginClipNumber()","205":"RidingStampPosTest::::rideRightOffsetMaginClipNumber()","206":"RidingStampPosTest::::rideRightOffsetMaginClipNumber()","207":"RidingStampPosTest::::rideRightOffsetMaginClipNumber()","208":"RidingStampPosTest::::rideRightOffsetMaginClipNumber()","209":"RidingStampPosTest::::rideRightOffsetMaginClipNumber()","210":"RidingStampPosTest::::rideRightOffsetMaginClipNumber()","211":"RidingStampPosTest::::rideRightOffsetMaginClipNumber()","212":"RidingStampPosTest::::rideRightOffsetMaginClipNumber()","213":"RidingStampPosTest::::rideRightOffsetMaginClipNumber()","214":"RidingStampPosTest::::rideRightOffsetMaginClipNumber()","215":"RidingStampPosTest::::rideRightOffsetMaginClipNumber()","216":"RidingStampPosTest::::rideRightOffsetMaginClipNumber()","217":"RidingStampPosTest::::rideRightOffsetMaginClipNumber()","218":"RidingStampPosTest::::rideRightOffsetMaginClipNumber()","219":"RidingStampPosTest::::rideRightOffsetMaginClipNumber()","220":"RidingStampPosTest::::rideRightOffsetMaginClipNumber()","221":"RidingStampPosTest::::rideRightOffsetMaginClipNumber()","222":"RidingStampPosTest::::rideRightOffsetMaginClipNumber()","223":"RidingStampPosTest::::rideRightOffsetMaginClipNumber()","224":"RidingStampPosTest::::rideRightOffsetMaginClipNumber()","227":"RidingStampPosTest::::rideCuttingOnRight()","228":"RidingStampPosTest::::rideCuttingOnRight()","229":"RidingStampPosTest::::rideCuttingOnRight()","230":"RidingStampPosTest::::rideCuttingOnRight()","231":"RidingStampPosTest::::rideCuttingOnRight()","232":"RidingStampPosTest::::rideCuttingOnRight()","233":"RidingStampPosTest::::rideCuttingOnRight()","234":"RidingStampPosTest::::rideCuttingOnRight()","235":"RidingStampPosTest::::rideCuttingOnRight()","236":"RidingStampPosTest::::rideCuttingOnRight()","237":"RidingStampPosTest::::rideCuttingOnRight()","238":"RidingStampPosTest::::rideCuttingOnRight()","239":"RidingStampPosTest::::rideCuttingOnRight()","240":"RidingStampPosTest::::rideCuttingOnRight()","241":"RidingStampPosTest::::rideCuttingOnRight()","242":"RidingStampPosTest::::rideCuttingOnRight()","243":"RidingStampPosTest::::rideCuttingOnRight()","244":"RidingStampPosTest::::rideCuttingOnRight()","245":"RidingStampPosTest::::rideCuttingOnRight()","246":"RidingStampPosTest::::rideCuttingOnRight()","247":"RidingStampPosTest::::rideCuttingOnRight()","248":"RidingStampPosTest::::rideCuttingOnRight()","249":"RidingStampPosTest::::rideCuttingOnRight()","250":"RidingStampPosTest::::rideCuttingOnRight()","251":"RidingStampPosTest::::rideCuttingOnRight()","252":"RidingStampPosTest::::rideCuttingOnRight()","253":"RidingStampPosTest::::rideCuttingOnRight()"},"tests":[{"test_lines":[30,56],"covered_lines":[48,57,68,103,104,105,106,107,108,205,206,207,208,209,211,212,219,220,221,225,226,228,229,230,231,232,246,250,253,254,255,256,257,258,259,261,315],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[58,84],"covered_lines":[48,57,68,103,104,105,106,107,108,205,206,207,208,209,211,212,219,220,221,225,226,228,229,237,238,239,246,250,253,254,255,256,257,258,259,261,315],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[86,112],"covered_lines":[48,57,68,103,104,105,106,107,108,205,206,207,208,209,262,263,270,271,272,276,277,280,284,288,289,290,291,292,305,306,307,308,309,310,311,315],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[114,140],"covered_lines":[48,57,68,103,104,105,106,107,108,205,206,207,208,209,262,263,270,271,272,276,277,280,284,288,289,298,299,300,305,306,307,308,309,310,311,315],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[142,168],"covered_lines":[48,57,68,103,104,105,106,107,108,205,206,207,208,209,211,212,219,220,221,225,226,228,229,230,231,232,246,250,253,254,255,256,257,258,259,261,315],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[170,196],"covered_lines":[48,57,68,103,104,105,106,107,108,205,206,207,208,209,262,263,270,271,272,276,277,280,284,288,289,298,299,300,305,306,307,308,309,310,311,315],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[198,224],"covered_lines":[48,57,68,137,138,139,140,141,142,143,144,205,206,207,208,209,211,212,213,214,215,219,220,221,222,223,225,226,228,229,230,231,232,233,234,246,250,253,254,255,256,257,258,259,261,315],"label":"<<NO FOCAL METHOD>>"}]}}