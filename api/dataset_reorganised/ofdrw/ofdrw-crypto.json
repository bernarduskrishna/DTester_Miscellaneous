{
  "/bernard/dataset_construction/prep/repos/ofdrw/ofdrw-crypto/src/main/java/org/ofdrw/crypto/OFDEncryptor.java": {
    "class_content": [
      "package org.ofdrw.crypto;\n",
      "\n",
      "import org.apache.commons.io.FileUtils;\n",
      "import org.bouncycastle.crypto.CipherParameters;\n",
      "import org.bouncycastle.crypto.CryptoException;\n",
      "import org.bouncycastle.crypto.InvalidCipherTextException;\n",
      "import org.bouncycastle.crypto.engines.SM4Engine;\n",
      "import org.bouncycastle.crypto.modes.CBCBlockCipher;\n",
      "import org.bouncycastle.crypto.paddings.PKCS7Padding;\n",
      "import org.bouncycastle.crypto.paddings.PaddedBufferedBlockCipher;\n",
      "import org.bouncycastle.crypto.params.KeyParameter;\n",
      "import org.bouncycastle.crypto.params.ParametersWithIV;\n",
      "import org.dom4j.Element;\n",
      "import org.jetbrains.annotations.NotNull;\n",
      "import org.jetbrains.annotations.Nullable;\n",
      "import org.ofdrw.core.crypto.ProtectionCaseID;\n",
      "import org.ofdrw.core.crypto.encryt.*;\n",
      "import org.ofdrw.core.signatures.sig.Parameters;\n",
      "import org.ofdrw.crypto.enryptor.UserFEKEncryptor;\n",
      "import org.ofdrw.gv.GlobalVar;\n",
      "import org.ofdrw.pkg.container.OFDDir;\n",
      "import org.ofdrw.pkg.tool.ElemCup;\n",
      "import org.ofdrw.reader.ZipUtil;\n",
      "\n",
      "import java.io.*;\n",
      "import java.nio.file.Files;\n",
      "import java.nio.file.Path;\n",
      "import java.security.GeneralSecurityException;\n",
      "import java.security.SecureRandom;\n",
      "import java.time.LocalDateTime;\n",
      "import java.util.ArrayList;\n",
      "import java.util.List;\n",
      "import java.util.stream.Collectors;\n",
      "\n",
      "/**\n",
      " * OFD\u52a0\u5bc6\u5668\n",
      " *\n",
      " * @author \u6743\u89c2\u5b87\n",
      " * @since 2021-07-13 18:10:12\n",
      " */\n",
      "public class OFDEncryptor implements Closeable {\n",
      "\n",
      "\n",
      "    /**\n",
      "     * OFD\u865a\u62df\u5bb9\u5668\u6839\u76ee\u5f55\n",
      "     */\n",
      "    private final OFDDir ofdDir;\n",
      "\n",
      "    /**\n",
      "     * \u52a0\u5bc6\u540e\u6587\u4ef6\u8f93\u51fa\u4f4d\u7f6e\n",
      "     */\n",
      "    private Path dest;\n",
      "\n",
      "    /**\n",
      "     * \u5de5\u4f5c\u8fc7\u7a0b\u4e2d\u7684\u5de5\u4f5c\u76ee\u5f55\n",
      "     * <p>\n",
      "     * \u7528\u4e8e\u5b58\u653e\u89e3\u538b\u540e\u7684OFD\u6587\u6863\u5bb9\u5668\u5185\u5bb9\n",
      "     */\n",
      "    private Path workDir;\n",
      "\n",
      "    /**\n",
      "     * \u662f\u5426\u5df2\u7ecf\u5173\u95ed\n",
      "     */\n",
      "    private boolean closed;\n",
      "\n",
      "    /**\n",
      "     * \u968f\u673a\u6e90\n",
      "     * <p>\n",
      "     * \u9ed8\u8ba4\u4f7f\u7528\u8f6f\u4ef6\u968f\u673a\u6e90\n",
      "     */\n",
      "    private SecureRandom random;\n",
      "\n",
      "    /**\n",
      "     * CBC\u6a21\u5f0f\u5206\u5757\u52a0\u5bc6\uff0c\u586b\u5145\u6a21\u5f0fPKCS#7\n",
      "     */\n",
      "    private PaddedBufferedBlockCipher blockCipher;\n",
      "\n",
      "    /**\n",
      "     * \u7528\u6237\u63d0\u4f9b\u7684\u52a0\u5bc6\u5668\u5217\u8868\n",
      "     */\n",
      "    private List<UserFEKEncryptor> userEncryptorList;\n",
      "\n",
      "    /**\n",
      "     * \u5bb9\u5668\u6587\u4ef6\u8fc7\u6ee4\u5668\n",
      "     * <p>\n",
      "     * \u7528\u4e8e\u5224\u65ad\u6587\u4ef6\u662f\u5426\u9700\u8981\u88ab\u52a0\u5bc6\uff0c\u8fd4\u56defalse\u8868\u793a\u4e0d\u9700\u8981\u52a0\u5bc6\n",
      "     */\n",
      "    private ContainerFileFilter cfFilter;\n",
      "\n",
      "    /**\n",
      "     * \u52a0\u5bc6\u64cd\u4f5c\u7684\u9644\u52a0\u63cf\u8ff0\u96c6\u5408\n",
      "     */\n",
      "    private Parameters parameters;\n",
      "\n",
      "    private OFDEncryptor() {\n",
      "        this.ofdDir = null;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u521b\u5efaOFD\u52a0\u5bc6\u5668\n",
      "     *\n",
      "     * @param ofdFile \u5f85\u52a0\u5bc6\u7684OFD\u6587\u4ef6\u8def\u5f84\n",
      "     * @param dest    \u52a0\u5bc6\u540e\u7684OFD\u8def\u5f84\n",
      "     * @throws IOException IO\u64cd\u4f5c\u5f02\u5e38\n",
      "     */\n",
      "    public OFDEncryptor(@NotNull Path ofdFile, @NotNull Path dest) throws IOException {\n",
      "        if (ofdFile == null || Files.notExists(ofdFile)) {\n",
      "            throw new IllegalArgumentException(\"\u6587\u4ef6\u4f4d\u7f6e(ofdFile)\u4e0d\u6b63\u786e\");\n",
      "        }\n",
      "        if (dest == null) {\n",
      "            throw new IllegalArgumentException(\"\u52a0\u5bc6\u540e\u6587\u4ef6\u4f4d\u7f6e(out)\u4e3a\u7a7a\");\n",
      "        }\n",
      "        this.dest = dest;\n",
      "        this.workDir = Files.createTempDirectory(\"ofd-tmp-\");\n",
      "        // \u89e3\u538b\u6587\u6863\uff0c\u5230\u4e34\u65f6\u7684\u5de5\u4f5c\u76ee\u5f55\n",
      "        ZipUtil.unZipFiles(ofdFile.toFile(), this.workDir.toAbsolutePath() + File.separator);\n",
      "        this.userEncryptorList = new ArrayList<>(3);\n",
      "        this.ofdDir = new OFDDir(workDir.toAbsolutePath());\n",
      "        this.random = new SecureRandom();\n",
      "        this.blockCipher = new PaddedBufferedBlockCipher(new CBCBlockCipher(new SM4Engine()), new PKCS7Padding());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u6dfb\u52a0\u52a0\u5bc6\u7528\u6237\n",
      "     *\n",
      "     * @param encryptor \u52a0\u5bc6\u7528\u6237\u7684\u52a0\u5bc6\u5668\n",
      "     * @return this\n",
      "     */\n",
      "    public OFDEncryptor addUser(@NotNull UserFEKEncryptor encryptor) {\n",
      "        if (encryptor == null) {\n",
      "            return this;\n",
      "        }\n",
      "        this.userEncryptorList.add(encryptor);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u968f\u673a\u6e90\n",
      "     *\n",
      "     * @param random \u968f\u673a\u6e90\n",
      "     * @return this\n",
      "     */\n",
      "    public OFDEncryptor setRandom(@NotNull SecureRandom random) {\n",
      "        if (random == null) {\n",
      "            return this;\n",
      "        }\n",
      "        this.random = random;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e \u5bb9\u5668\u6587\u4ef6\u8fc7\u6ee4\u5668\n",
      "     * <p>\n",
      "     * \u8be5\u8fc7\u6ee4\u5668\u7528\u4e8e\u51b3\u5b9a\u54ea\u4e9b\u6587\u4ef6\u5c06\u4f1a\u88ab\u52a0\u5bc6\n",
      "     * <p>\n",
      "     * \u8fc7\u6ee4\u5668\u7ed3\u679c\u4e3afalse \u90a3\u4e48\u8be5\u6587\u4ef6\u5c06\u4e0d\u4f1a\u88ab\u52a0\u5bc6\n",
      "     *\n",
      "     * @param filter \u8fc7\u6ee4\u5668\n",
      "     * @return this\n",
      "     */\n",
      "    public OFDEncryptor setContainerFileFilter(ContainerFileFilter filter) {\n",
      "        if (filter == null) {\n",
      "            return this;\n",
      "        }\n",
      "        this.cfFilter = filter;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u6267\u884c\u52a0\u5bc6\n",
      "     *\n",
      "     * @return this\n",
      "     * @throws IOException              \u52a0\u5bc6\n",
      "     * @throws CryptoException          \u52a0\u5bc6\u5f02\u5e38\n",
      "     * @throws GeneralSecurityException \u8bc1\u4e66\u89e3\u6790\u5f02\u5e38\n",
      "     */\n",
      "    public OFDEncryptor encrypt() throws IOException, CryptoException, GeneralSecurityException {\n",
      "        if (this.userEncryptorList.isEmpty()) {\n",
      "            throw new IllegalArgumentException(\"\u6ca1\u6709\u53ef\u7528\u52a0\u5bc6\u7528\u6237(UserFEKEncryptor)\");\n",
      "        }\n",
      "        if (!Files.exists(this.dest)) {\n",
      "            Files.createDirectories(this.dest.getParent());\n",
      "        }\n",
      "        // \u83b7\u53d6 \u89e3\u5bc6\u5165\u53e3\u6587\u4ef6\u5bf9\u8c61\u3002\n",
      "        final Encryptions encryptions = this.ofdDir.obtainEncryptions();\n",
      "        // \u83b7\u53d6\u65b0\u7684\u52a0\u5bc6\u6807\u8bc6\u7b26\uff1a\u5185\u6700\u5927 \u52a0\u5bc6\u6807\u8bc6\u7b26 + 1\n",
      "        final String id = Integer.toString(encryptions.maxID() + 1);\n",
      "\n",
      "        // \u5f85\u52a0\u5bc6\u6587\u4ef6\u5217\u8868\n",
      "        final List<ContainerPath> tbEncArr = this.getToBeEncFiles();\n",
      "        // \u52a0\u5bc6\u5757\u5927\u5c0f\n",
      "        int blockSize = blockCipher.getBlockSize();\n",
      "        byte[] fek = new byte[blockSize];\n",
      "        byte[] iv = new byte[blockSize];\n",
      "        // a) \u751f\u6210\u7528\u4e8eZIP\u5305\u5185\u6587\u4ef6\u52a0\u5bc6\u7684\u5bf9\u79f0\u5bc6\u94a5\n",
      "        random.nextBytes(fek);\n",
      "        random.nextBytes(iv);\n",
      "        ParametersWithIV keyParam = new ParametersWithIV(new KeyParameter(fek), iv);\n",
      "\n",
      "        // b) \u6839\u636e\u52a0\u5bc6\u65b9\u6848\uff0c\u4f7f\u7528\u6b65\u9aa4 a)\u751f\u6210\u7684\u6587\u4ef6\u52a0\u5bc6\u5bf9\u79f0\u5bc6\u94a5\u8c03\u7528\u5bf9\u79f0\u5bc6\u7801\u7b97\u6cd5\u52a0\u5bc6\u5305\u5185\u6587\u4ef6\u5e76\u5199\u5165ZIP\u5305\u5185\uff1b\n",
      "        // c) \u6839\u636e\u52a0\u5bc6\u65b9\u6848\uff0c\u5bf9\u5df2\u7ecf\u751f\u6210\u5bc6\u6587\u7684\u660e\u6587\u6587\u4ef6\u8fdb\u884c\u5904\u7406\uff0c\u90e8\u5206\u5199\u5165ZIP\u5305\uff1b\n",
      "        final EncryptEntries encryptEntries = this.encryptFiles(tbEncArr, keyParam);\n",
      "        encryptEntries.setID(id);\n",
      "        // d) \u7ec4\u88c5\u660e\u5bc6\u6587\u6620\u5c04\u8868\u6587\u4ef6\uff0c\u6839\u636e\u52a0\u5bc6\u65b9\u6848\u5bf9\u9f50\u8fdb\u884c\u52a0\u5bc6\u540e\u6216\u76f4\u63a5\u5199\u5165ZIP\u5305\u3002\n",
      "        final ContainerPath entriesMapCp = encryptElement(encryptEntries, \"entriesmap.dat\", keyParam);\n",
      "        // e) \u7ec4\u88c5\u52a0\u5bc6\u5165\u53e3\u6587\u4ef6\uff0c\u660e\u6587\u5199\u5165ZIP\u5305\u5185\n",
      "        CT_EncryptInfo encryptInfo = newEncryptInfo(id);\n",
      "        encryptions.addEncryptInfo(encryptInfo);\n",
      "        encryptInfo.setEncryptScope(\"All\");\n",
      "        // \u5bc6\u94a5\u63cf\u8ff0\u6587\u4ef6\u4f4d\u7f6e\u914d\u7f6e\n",
      "        final ContainerPath decryptseedCp = ContainerPath.newDatFile(\"decryptseed\", this.workDir.toAbsolutePath());\n",
      "        encryptInfo.setDecryptSeedLoc(decryptseedCp.getPath());\n",
      "        // \u660e\u5bc6\u6587\u6620\u5c04\u8868\u6216\u5176\u52a0\u5bc6\u540e\u7684\u6587\u4ef6\u5b58\u50a8\u7684\u8def\u5f84\n",
      "        encryptInfo.setEntriesMapLoc(entriesMapCp.getPath());\n",
      "        // \u521b\u5efa\u5bc6\u94a5\u63cf\u8ff0\u6587\u4ef6\n",
      "        DecyptSeed decyptSeedObj = new DecyptSeed()\n",
      "                .setID(id)\n",
      "                .setExtendParams(new ExtendParams());\n",
      "        // f) \u6839\u636e\u52a0\u5bc6\u65b9\u6848\uff0c\u5bf9\u6587\u4ef6\u52a0\u5bc6\u5bf9\u79f0\u5bc6\u94a5\u8fdb\u884c\u5bc6\u94a5\u5305\u88c5\u6216\u975e\u5bf9\u79f0\u52a0\u5bc6\u751f\u6210\u6587\u4ef6\u5bf9\u79f0\u52a0\u5bc6\u7684\u5305\u88c5\u5bc6\u94a5\uff1b\n",
      "        String encryptCaseId = null;\n",
      "        for (UserFEKEncryptor fekEncryptor : userEncryptorList) {\n",
      "            if (encryptCaseId == null) {\n",
      "                encryptCaseId = fekEncryptor.encryptCaseId();\n",
      "            }\n",
      "            // \u52a0\u5bc6 \u6587\u4ef6\u52a0\u5bc6\u5bf9\u79f0\u5bc6\u94a5\uff0c\u751f\u6210\n",
      "            final UserInfo userInfo = fekEncryptor.encrypt(fek, iv);\n",
      "\n",
      "            // \u5982\u679c\u662f\u8bc1\u4e66\u52a0\u5bc6\uff0c\u9700\u8981\u83b7\u53d6\u8bc1\u4e66\n",
      "            if (ProtectionCaseID.EncryptGMCert.getId().equals(fekEncryptor.encryptCaseId())) {\n",
      "                // \u8bc1\u4e66\u52a0\u5bc6\u4f7f\u7528\u7684\u8bc1\u4e66\n",
      "                final byte[] certBin = fekEncryptor.userCert();\n",
      "                if (certBin == null || certBin.length == 0) {\n",
      "                    throw new CryptoException(\"\u65e0\u6cd5\u83b7\u53d6\u52a0\u5bc6\u8bc1\u4e66\");\n",
      "                }\n",
      "                userInfo.setUserCert(certBin);\n",
      "            }\n",
      "            decyptSeedObj.addUserInfo(userInfo);\n",
      "            // g) \u5982\u679c\u7535\u5b50\u6587\u4ef6\u8bbf\u95ee\u8005\u4e3a\u591a\u4eba\uff0c\u5219\u91cd\u590d 7.3.4 \u7684\u6b65\u9aa4 e)\uff1b\n",
      "        }\n",
      "        // h) \u7ec4\u88c5\u5bc6\u94a5\u63cf\u8ff0\u6587\u4ef6\uff0c\u5e76\u5199\u5165ZIP\u5305\u3002\n",
      "        ElemCup.dump(decyptSeedObj, decryptseedCp.getAbs());\n",
      "\n",
      "        // \u6267\u884c\u6253\u5305\u7a0b\u5e8f\n",
      "        this.ofdDir.jar(dest);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u521b\u5efa \u52a0\u5bc6\u63cf\u8ff0\u4fe1\u606f\n",
      "     *\n",
      "     * @param id \u52a0\u5bc6\u64cd\u4f5c\u6807\u8bc6\n",
      "     * @return \u52a0\u5bc6\u63cf\u8ff0\u4fe1\u606f\n",
      "     */\n",
      "    private CT_EncryptInfo newEncryptInfo(String id) {\n",
      "        CT_EncryptInfo encryptInfo = new CT_EncryptInfo().setID(id);\n",
      "        if (this.parameters != null) {\n",
      "            // \u8bbe\u7f6e \u52a0\u5bc6\u64cd\u4f5c\u7684\u9644\u52a0\u63cf\u8ff0\u96c6\u5408\n",
      "            encryptInfo.setParameters(this.parameters);\n",
      "        }\n",
      "\n",
      "        // \u8bbe\u7f6e\u63d0\u4f9b\u8005\u4fe1\u606f\n",
      "        final Provider provider = new Provider();\n",
      "        provider.setCompany(\"ofdrw.org\")\n",
      "                .setProviderName(\"ofdrw-crypto\")\n",
      "                .setVersion(GlobalVar.Version);\n",
      "        encryptInfo.setProvider(provider);\n",
      "        // \u8bbe\u7f6e\u52a0\u5bc6\u65f6\u95f4\n",
      "        encryptInfo.setEncryptDate(LocalDateTime.now());\n",
      "\n",
      "        return encryptInfo;\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u5f85\u52a0\u5bc6\u6587\u4ef6\u5217\u8868\n",
      "     * <p>\n",
      "     * \u6267\u884c\u8fc7\u6ee4\u5668\u8fc7\u6ee4\u6587\u4ef6\n",
      "     *\n",
      "     * @return \u5f85\u52a0\u5bc6\u6587\u4ef6\u5217\u8868\n",
      "     * @throws IOException IO\u8bfb\u5199\u5f02\u5e38\n",
      "     */\n",
      "    private List<ContainerPath> getToBeEncFiles() throws IOException {\n",
      "        return Files.walk(this.workDir)\n",
      "                // \u79fb\u9664\u76ee\u5f55\u6587\u4ef6\n",
      "                .filter(Files::isRegularFile)\n",
      "                // \u901a\u8fc7\u8fc7\u6ee4\u5668\u8fc7\u6ee4\u52a0\u5bc6\u5f97\u5230\u6587\u4ef6\n",
      "                .map((path) -> {\n",
      "                    String cfPath = path.toAbsolutePath().toString()\n",
      "                            .replace(this.workDir.toAbsolutePath().toString(), \"\")\n",
      "                            .replace(\"\\\\\", \"/\");\n",
      "                    return new ContainerPath(cfPath, path);\n",
      "                })\n",
      "                .filter((cf) -> {\n",
      "                    if (this.cfFilter == null) {\n",
      "                        return true;\n",
      "                    }\n",
      "                    // \u8fc7\u6ee4\n",
      "                    return this.cfFilter.filter(cf.getPath(), cf.getAbs());\n",
      "                }).collect(Collectors.toList());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u52a0\u5bc6\u6587\u4ef6\n",
      "     *\n",
      "     * @param tbEncArr \u5f85\u52a0\u5bc6\u6587\u4ef6\u5217\u8868\n",
      "     * @param keyParam \u52a0\u5bc6\u5bc6\u94a5\u53c2\u6570\n",
      "     * @return \u660e\u5bc6\u6587\u6620\u5c04\u8868\n",
      "     * @throws IOException                \u6587\u4ef6\u8bfb\u5199\u5f02\u5e38\n",
      "     * @throws InvalidCipherTextException \u52a0\u5bc6\u8fc7\u7a0b\u4e2d\u5f02\u5e38\n",
      "     */\n",
      "    private EncryptEntries encryptFiles(List<ContainerPath> tbEncArr, ParametersWithIV keyParam) throws IOException, InvalidCipherTextException {\n",
      "        // \u521b\u5efa\u660e\u5bc6\u6587\u6620\u5c04\u8868\n",
      "        EncryptEntries entriesMap = new EncryptEntries();\n",
      "        for (ContainerPath plaintextCp : tbEncArr) {\n",
      "            // \u6839\u636e\u52a0\u5bc6\u65b9\u6848\uff0c\u4f7f\u7528\u6b65\u9aa4 a)\u751f\u6210\u7684\u6587\u4ef6\u52a0\u5bc6\u5bf9\u79f0\u5bc6\u94a5\u8c03\u7528\u5bf9\u79f0\u5bc6\u7801\u7b97\u6cd5\u52a0\u5bc6\u5305\u5185\u6587\u4ef6\u5e76\u5199\u5165ZIP\u5305\u5185\n",
      "            // \u5e76\u4e14\u5bf9\u5df2\u7ecf\u751f\u6210\u5bc6\u6587\u7684\u660e\u6587\u6587\u4ef6\u8fdb\u884c\u5220\u9664\uff1b\n",
      "            final ContainerPath encryptedCp = encryptFile(plaintextCp, keyParam);\n",
      "            // \u6dfb\u52a0\u660e\u5bc6\u6587\u6620\u5c04\u8868\u7684\u6620\u5c04\u5173\u7cfb\n",
      "            entriesMap.addEncryptEntry(plaintextCp.getPath(), encryptedCp.getPath());\n",
      "        }\n",
      "        return entriesMap;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u52a0\u5bc6\u5355\u4e2a\u6587\u4ef6\n",
      "     * <p>\n",
      "     * \u52a0\u5bc6\u540e\u539f\u6587\u4ef6\u5c06\u88ab\u5220\u9664\n",
      "     *\n",
      "     * @param plaintextCp \u5f85\u52a0\u5bc6\u5bb9\u5668\u5185\u6587\u4ef6\n",
      "     * @param keyParam    \u52a0\u5bc6\u5bc6\u94a5\n",
      "     * @return \u52a0\u5bc6\u540e\u6587\u4ef6\u5728\u5bb9\u5668\u5185\u7684\u4f4d\u7f6e\n",
      "     * @throws IOException                \u6587\u4ef6\u8bfb\u5199\u5f02\u5e38\n",
      "     * @throws InvalidCipherTextException \u52a0\u5bc6\u8fd0\u7b97\u5f02\u5e38\n",
      "     */\n",
      "    private ContainerPath encryptFile(ContainerPath plaintextCp, CipherParameters keyParam) throws IOException, InvalidCipherTextException {\n",
      "        int bytesProcessed = 0;\n",
      "        int len = 0;\n",
      "        byte[] buffIn = new byte[4096];\n",
      "        byte[] buffOut = new byte[4096 + this.blockCipher.getBlockSize()];\n",
      "        // \u521b\u5efa\u52a0\u5bc6\u540e\u7684\u6587\u4ef6\n",
      "        final ContainerPath encryptedCp = plaintextCp.createEncryptedFile();\n",
      "        try (InputStream in = Files.newInputStream(plaintextCp.getAbs());\n",
      "             OutputStream out = Files.newOutputStream(encryptedCp.getAbs())) {\n",
      "            this.blockCipher.init(true, keyParam);\n",
      "            while ((len = in.read(buffIn)) != -1) {\n",
      "                // \u5206\u5757\u52a0\u5bc6\n",
      "                bytesProcessed = this.blockCipher.processBytes(buffIn, 0, len, buffOut, 0);\n",
      "                if (bytesProcessed > 0) {\n",
      "                    out.write(buffOut, 0, bytesProcessed);\n",
      "                }\n",
      "            }\n",
      "            // \u6267\u884c\u6700\u540e\u4e00\u4e2a\u5206\u5757\u7684\u52a0\u5bc6\u548c\u586b\u5145\n",
      "            bytesProcessed = this.blockCipher.doFinal(buffOut, 0);\n",
      "            out.write(buffOut, 0, bytesProcessed);\n",
      "            this.blockCipher.reset();\n",
      "        }\n",
      "        // \u52a0\u5bc6\u5b8c\u6210\u540e\uff0c\u5220\u9664\u6e90\u6587\u4ef6\n",
      "        Files.delete(plaintextCp.getAbs());\n",
      "        return encryptedCp;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u52a0\u5bc6OFD\u5bf9\u8c61\n",
      "     *\n",
      "     * @param obj      OFD\u5bf9\u8c61\n",
      "     * @param outPath  \u52a0\u5bc6\u540e\u5b58\u653e\u8def\u5f84\uff0c\u5bb9\u5668\u5185\u8def\u5f84\n",
      "     * @param keyParam \u52a0\u5bc6\u5bc6\u94a5\n",
      "     * @return \u52a0\u5bc6\u540e\u6587\u4ef6\u5728\u5bb9\u5668\u7684\u8def\u5f84\n",
      "     * @throws IOException                \u6587\u4ef6\u8bfb\u5199\u5f02\u5e38\n",
      "     * @throws InvalidCipherTextException \u52a0\u5bc6\u8fd0\u7b97\u5f02\u5e38\n",
      "     */\n",
      "    private ContainerPath encryptElement(Element obj, String outPath, CipherParameters keyParam) throws IOException, InvalidCipherTextException {\n",
      "        if (outPath.startsWith(\"/\")) {\n",
      "            outPath = outPath.substring(1);\n",
      "        }\n",
      "        // \u521b\u5efa\u52a0\u5bc6\u540e\u4fdd\u5b58\u7684\u6587\u4ef6\u8def\u5f84\n",
      "        final ContainerPath res = ContainerPath.newDatFile(outPath, workDir);\n",
      "\n",
      "        int len = 0;\n",
      "        int bytesProcessed = 0;\n",
      "        byte[] buffIn = new byte[4096];\n",
      "        byte[] buffOut = new byte[4096 + this.blockCipher.getBlockSize()];\n",
      "        ByteArrayInputStream in = new ByteArrayInputStream(ElemCup.dump(obj));\n",
      "        this.blockCipher.init(true, keyParam);\n",
      "        try (OutputStream out = Files.newOutputStream(res.getAbs())) {\n",
      "            while ((len = in.read(buffIn)) != -1) {\n",
      "                // \u5206\u5757\u52a0\u5bc6\n",
      "                bytesProcessed = this.blockCipher.processBytes(buffIn, 0, len, buffOut, 0);\n",
      "                if (bytesProcessed > 0) {\n",
      "                    out.write(buffOut, 0, bytesProcessed);\n",
      "                }\n",
      "            }\n",
      "            // \u6267\u884c\u6700\u540e\u4e00\u4e2a\u5206\u5757\u7684\u52a0\u5bc6\u548c\u586b\u5145\n",
      "            bytesProcessed = this.blockCipher.doFinal(buffOut, 0);\n",
      "            out.write(buffOut, 0, bytesProcessed);\n",
      "            this.blockCipher.reset();\n",
      "        }\n",
      "        return res;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6 \u52a0\u5bc6\u64cd\u4f5c\u7684\u9644\u52a0\u63cf\u8ff0\u96c6\u5408\n",
      "     *\n",
      "     * @return \u52a0\u5bc6\u64cd\u4f5c\u7684\u9644\u52a0\u63cf\u8ff0\u96c6\u5408\uff0c\u53ef\u80fd\u4e3a\u7a7a\n",
      "     */\n",
      "    @Nullable\n",
      "    public Parameters getParameters() {\n",
      "        return parameters;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e \u52a0\u5bc6\u64cd\u4f5c\u7684\u9644\u52a0\u63cf\u8ff0\u96c6\u5408\n",
      "     *\n",
      "     * @param parameters \u52a0\u5bc6\u64cd\u4f5c\u7684\u9644\u52a0\u63cf\u8ff0\u96c6\u5408\uff0c\u53ef\u80fd\u4e3a\u7a7a\n",
      "     * @return this\n",
      "     */\n",
      "    public OFDEncryptor setParameters(Parameters parameters) {\n",
      "        this.parameters = parameters;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u5173\u95ed\u6587\u6863\n",
      "     * <p>\n",
      "     * \u5220\u9664\u5de5\u4f5c\u533a\n",
      "     *\n",
      "     * @throws IOException \u5de5\u4f5c\u533a\u5220\u9664\u5f02\u5e38\n",
      "     */\n",
      "    @Override\n",
      "    public void close() throws IOException {\n",
      "        if (closed) {\n",
      "            return;\n",
      "        }\n",
      "        closed = true;\n",
      "        if (workDir != null && Files.exists(workDir)) {\n",
      "            try {\n",
      "                FileUtils.deleteDirectory(workDir.toFile());\n",
      "            } catch (IOException e) {\n",
      "                throw new IOException(\"\u65e0\u6cd5\u5220\u9664Reader\u7684\u5de5\u4f5c\u7a7a\u95f4\uff0c\u539f\u56e0\uff1a\" + e.getMessage(), e);\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package org.ofdrw.crypto;\n",
      "\n",
      "import org.bouncycastle.crypto.CryptoException;\n",
      "import org.bouncycastle.crypto.engines.SM4Engine;\n",
      "import org.bouncycastle.crypto.modes.CBCBlockCipher;\n",
      "import org.bouncycastle.crypto.paddings.PKCS7Padding;\n",
      "import org.bouncycastle.crypto.paddings.PaddedBufferedBlockCipher;\n",
      "import org.bouncycastle.crypto.params.KeyParameter;\n",
      "import org.bouncycastle.crypto.params.ParametersWithIV;\n",
      "import org.jetbrains.annotations.NotNull;\n",
      "import org.jetbrains.annotations.Nullable;\n",
      "import org.junit.jupiter.api.Test;\n",
      "import org.ofdrw.crypto.enryptor.UserCertEncryptor;\n",
      "import org.ofdrw.crypto.enryptor.UserFEKEncryptor;\n",
      "import org.ofdrw.crypto.enryptor.UserPasswordEncryptor;\n",
      "import org.ofdrw.gm.cert.PEMLoader;\n",
      "\n",
      "import java.io.IOException;\n",
      "import java.io.InputStream;\n",
      "import java.io.OutputStream;\n",
      "import java.nio.file.Files;\n",
      "import java.nio.file.Path;\n",
      "import java.nio.file.Paths;\n",
      "import java.security.GeneralSecurityException;\n",
      "import java.security.SecureRandom;\n",
      "import java.security.cert.Certificate;\n",
      "\n",
      "/**\n",
      " * @author \u6743\u89c2\u5b87\n",
      " * @since 2021-07-15 18:20:18\n",
      " */\n",
      "class OFDEncryptorTest {\n",
      "\n",
      "    @Test\n",
      "    public void ofCase() throws Exception {\n",
      "        SecureRandom random = new SecureRandom();\n",
      "        PaddedBufferedBlockCipher blockCipher = new PaddedBufferedBlockCipher(new CBCBlockCipher(new SM4Engine()), new PKCS7Padding());\n",
      "        final int blockSize = blockCipher.getBlockSize();\n",
      "        byte[] fek = new byte[blockSize];\n",
      "        byte[] iv = new byte[blockSize];\n",
      "        random.nextBytes(fek);\n",
      "        random.nextBytes(iv);\n",
      "        ParametersWithIV keyParam = new ParametersWithIV(new KeyParameter(fek), iv);\n",
      "        blockCipher.init(true,keyParam);\n",
      "\n",
      "        Path src = Paths.get(\"src/test/resources/byte16.bin\");\n",
      "        Path dst = Paths.get(\"target/byte16.enc\");\n",
      "\n",
      "        byte[] buffIn = new byte[1024];\n",
      "        byte[] buffOut = new byte[1024 + blockSize];\n",
      "\n",
      "        int len = 0;\n",
      "        try(final InputStream in = Files.newInputStream(src);\n",
      "            final OutputStream out = Files.newOutputStream(dst)){\n",
      "            int bytesProcessed = 0;\n",
      "            while ((len = in.read(buffIn)) != -1) {\n",
      "                bytesProcessed = blockCipher.processBytes(buffIn, 0, len, buffOut, 0);\n",
      "                if (bytesProcessed > 0){\n",
      "                    out.write(buffOut, 0, bytesProcessed);\n",
      "                }\n",
      "            }\n",
      "            bytesProcessed = blockCipher.doFinal(buffOut, 0);\n",
      "            out.write(buffOut, 0, bytesProcessed);\n",
      "            blockCipher.reset();\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void encryptPassword() throws IOException, CryptoException, GeneralSecurityException {\n",
      "        Path src = Paths.get(\"src/test/resources/hello.ofd\");\n",
      "        Path out = Paths.get(\"target/hello-enc.ofd\");\n",
      "        try (OFDEncryptor ofdEncryptor = new OFDEncryptor(src, out)) {\n",
      "            final UserFEKEncryptor encryptor = new UserPasswordEncryptor(\"777\", \"12345678\");\n",
      "            ofdEncryptor.addUser(encryptor);\n",
      "            ofdEncryptor.encrypt();\n",
      "        }\n",
      "        System.out.println(\">> \" + out.toAbsolutePath().toString());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void encryptCert() throws IOException, CryptoException, GeneralSecurityException {\n",
      "        Path src = Paths.get(\"src/test/resources/hello.ofd\");\n",
      "        Path out = Paths.get(\"target/hello-enc.ofd\");\n",
      "        Path certPath  =  Paths.get(\"src/test/resources\", \"sign_cert.pem\");\n",
      "        final Certificate certificate = PEMLoader.loadCert(certPath);\n",
      "\n",
      "        try (OFDEncryptor ofdEncryptor = new OFDEncryptor(src, out)) {\n",
      "            final UserFEKEncryptor encryptor = new UserCertEncryptor(\"777\", certificate);\n",
      "            ofdEncryptor.addUser(encryptor);\n",
      "            ofdEncryptor.encrypt();\n",
      "        }\n",
      "        System.out.println(\">> \" + out.toAbsolutePath());\n",
      "    }\n",
      "}"
    ],
    "method_lines_dic": {
      "OFDEncryptor::::addUser(org.ofdrw.crypto.enryptor.UserFEKEncryptor)": [
        129,
        135
      ],
      "OFDEncryptor::::setRandom(java.security.SecureRandom)": [
        143,
        149
      ],
      "OFDEncryptor::::setContainerFileFilter(org.ofdrw.crypto.ContainerFileFilter)": [
        161,
        167
      ],
      "OFDEncryptor::::encrypt()": [
        177,
        246
      ],
      "OFDEncryptor::::newEncryptInfo(java.lang.String)": [
        254,
        271
      ],
      "OFDEncryptor::::getToBeEncFiles()": [
        282,
        300
      ],
      "OFDEncryptor::::getParameters()": [
        406,
        409
      ],
      "OFDEncryptor::::close()": [
        429,
        442
      ]
    },
    "test_method_lines_dic": {
      "OFDEncryptorTest::::ofCase()": [
        34,
        66
      ],
      "OFDEncryptorTest::::encryptPassword()": [
        68,
        78
      ],
      "OFDEncryptorTest::::encryptCert()": [
        80,
        93
      ]
    },
    "reverse_method_lines_dic": {
      "129": "OFDEncryptor::::addUser(org.ofdrw.crypto.enryptor.UserFEKEncryptor)",
      "130": "OFDEncryptor::::addUser(org.ofdrw.crypto.enryptor.UserFEKEncryptor)",
      "131": "OFDEncryptor::::addUser(org.ofdrw.crypto.enryptor.UserFEKEncryptor)",
      "132": "OFDEncryptor::::addUser(org.ofdrw.crypto.enryptor.UserFEKEncryptor)",
      "133": "OFDEncryptor::::addUser(org.ofdrw.crypto.enryptor.UserFEKEncryptor)",
      "134": "OFDEncryptor::::addUser(org.ofdrw.crypto.enryptor.UserFEKEncryptor)",
      "135": "OFDEncryptor::::addUser(org.ofdrw.crypto.enryptor.UserFEKEncryptor)",
      "143": "OFDEncryptor::::setRandom(java.security.SecureRandom)",
      "144": "OFDEncryptor::::setRandom(java.security.SecureRandom)",
      "145": "OFDEncryptor::::setRandom(java.security.SecureRandom)",
      "146": "OFDEncryptor::::setRandom(java.security.SecureRandom)",
      "147": "OFDEncryptor::::setRandom(java.security.SecureRandom)",
      "148": "OFDEncryptor::::setRandom(java.security.SecureRandom)",
      "149": "OFDEncryptor::::setRandom(java.security.SecureRandom)",
      "161": "OFDEncryptor::::setContainerFileFilter(org.ofdrw.crypto.ContainerFileFilter)",
      "162": "OFDEncryptor::::setContainerFileFilter(org.ofdrw.crypto.ContainerFileFilter)",
      "163": "OFDEncryptor::::setContainerFileFilter(org.ofdrw.crypto.ContainerFileFilter)",
      "164": "OFDEncryptor::::setContainerFileFilter(org.ofdrw.crypto.ContainerFileFilter)",
      "165": "OFDEncryptor::::setContainerFileFilter(org.ofdrw.crypto.ContainerFileFilter)",
      "166": "OFDEncryptor::::setContainerFileFilter(org.ofdrw.crypto.ContainerFileFilter)",
      "167": "OFDEncryptor::::setContainerFileFilter(org.ofdrw.crypto.ContainerFileFilter)",
      "177": "OFDEncryptor::::encrypt()",
      "178": "OFDEncryptor::::encrypt()",
      "179": "OFDEncryptor::::encrypt()",
      "180": "OFDEncryptor::::encrypt()",
      "181": "OFDEncryptor::::encrypt()",
      "182": "OFDEncryptor::::encrypt()",
      "183": "OFDEncryptor::::encrypt()",
      "184": "OFDEncryptor::::encrypt()",
      "185": "OFDEncryptor::::encrypt()",
      "186": "OFDEncryptor::::encrypt()",
      "187": "OFDEncryptor::::encrypt()",
      "188": "OFDEncryptor::::encrypt()",
      "189": "OFDEncryptor::::encrypt()",
      "190": "OFDEncryptor::::encrypt()",
      "191": "OFDEncryptor::::encrypt()",
      "192": "OFDEncryptor::::encrypt()",
      "193": "OFDEncryptor::::encrypt()",
      "194": "OFDEncryptor::::encrypt()",
      "195": "OFDEncryptor::::encrypt()",
      "196": "OFDEncryptor::::encrypt()",
      "197": "OFDEncryptor::::encrypt()",
      "198": "OFDEncryptor::::encrypt()",
      "199": "OFDEncryptor::::encrypt()",
      "200": "OFDEncryptor::::encrypt()",
      "201": "OFDEncryptor::::encrypt()",
      "202": "OFDEncryptor::::encrypt()",
      "203": "OFDEncryptor::::encrypt()",
      "204": "OFDEncryptor::::encrypt()",
      "205": "OFDEncryptor::::encrypt()",
      "206": "OFDEncryptor::::encrypt()",
      "207": "OFDEncryptor::::encrypt()",
      "208": "OFDEncryptor::::encrypt()",
      "209": "OFDEncryptor::::encrypt()",
      "210": "OFDEncryptor::::encrypt()",
      "211": "OFDEncryptor::::encrypt()",
      "212": "OFDEncryptor::::encrypt()",
      "213": "OFDEncryptor::::encrypt()",
      "214": "OFDEncryptor::::encrypt()",
      "215": "OFDEncryptor::::encrypt()",
      "216": "OFDEncryptor::::encrypt()",
      "217": "OFDEncryptor::::encrypt()",
      "218": "OFDEncryptor::::encrypt()",
      "219": "OFDEncryptor::::encrypt()",
      "220": "OFDEncryptor::::encrypt()",
      "221": "OFDEncryptor::::encrypt()",
      "222": "OFDEncryptor::::encrypt()",
      "223": "OFDEncryptor::::encrypt()",
      "224": "OFDEncryptor::::encrypt()",
      "225": "OFDEncryptor::::encrypt()",
      "226": "OFDEncryptor::::encrypt()",
      "227": "OFDEncryptor::::encrypt()",
      "228": "OFDEncryptor::::encrypt()",
      "229": "OFDEncryptor::::encrypt()",
      "230": "OFDEncryptor::::encrypt()",
      "231": "OFDEncryptor::::encrypt()",
      "232": "OFDEncryptor::::encrypt()",
      "233": "OFDEncryptor::::encrypt()",
      "234": "OFDEncryptor::::encrypt()",
      "235": "OFDEncryptor::::encrypt()",
      "236": "OFDEncryptor::::encrypt()",
      "237": "OFDEncryptor::::encrypt()",
      "238": "OFDEncryptor::::encrypt()",
      "239": "OFDEncryptor::::encrypt()",
      "240": "OFDEncryptor::::encrypt()",
      "241": "OFDEncryptor::::encrypt()",
      "242": "OFDEncryptor::::encrypt()",
      "243": "OFDEncryptor::::encrypt()",
      "244": "OFDEncryptor::::encrypt()",
      "245": "OFDEncryptor::::encrypt()",
      "246": "OFDEncryptor::::encrypt()",
      "254": "OFDEncryptor::::newEncryptInfo(java.lang.String)",
      "255": "OFDEncryptor::::newEncryptInfo(java.lang.String)",
      "256": "OFDEncryptor::::newEncryptInfo(java.lang.String)",
      "257": "OFDEncryptor::::newEncryptInfo(java.lang.String)",
      "258": "OFDEncryptor::::newEncryptInfo(java.lang.String)",
      "259": "OFDEncryptor::::newEncryptInfo(java.lang.String)",
      "260": "OFDEncryptor::::newEncryptInfo(java.lang.String)",
      "261": "OFDEncryptor::::newEncryptInfo(java.lang.String)",
      "262": "OFDEncryptor::::newEncryptInfo(java.lang.String)",
      "263": "OFDEncryptor::::newEncryptInfo(java.lang.String)",
      "264": "OFDEncryptor::::newEncryptInfo(java.lang.String)",
      "265": "OFDEncryptor::::newEncryptInfo(java.lang.String)",
      "266": "OFDEncryptor::::newEncryptInfo(java.lang.String)",
      "267": "OFDEncryptor::::newEncryptInfo(java.lang.String)",
      "268": "OFDEncryptor::::newEncryptInfo(java.lang.String)",
      "269": "OFDEncryptor::::newEncryptInfo(java.lang.String)",
      "270": "OFDEncryptor::::newEncryptInfo(java.lang.String)",
      "271": "OFDEncryptor::::newEncryptInfo(java.lang.String)",
      "282": "OFDEncryptor::::getToBeEncFiles()",
      "283": "OFDEncryptor::::getToBeEncFiles()",
      "284": "OFDEncryptor::::getToBeEncFiles()",
      "285": "OFDEncryptor::::getToBeEncFiles()",
      "286": "OFDEncryptor::::getToBeEncFiles()",
      "287": "OFDEncryptor::::getToBeEncFiles()",
      "288": "OFDEncryptor::::getToBeEncFiles()",
      "289": "OFDEncryptor::::getToBeEncFiles()",
      "290": "OFDEncryptor::::getToBeEncFiles()",
      "291": "OFDEncryptor::::getToBeEncFiles()",
      "292": "OFDEncryptor::::getToBeEncFiles()",
      "293": "OFDEncryptor::::getToBeEncFiles()",
      "294": "OFDEncryptor::::getToBeEncFiles()",
      "295": "OFDEncryptor::::getToBeEncFiles()",
      "296": "OFDEncryptor::::getToBeEncFiles()",
      "297": "OFDEncryptor::::getToBeEncFiles()",
      "298": "OFDEncryptor::::getToBeEncFiles()",
      "299": "OFDEncryptor::::getToBeEncFiles()",
      "300": "OFDEncryptor::::getToBeEncFiles()",
      "406": "OFDEncryptor::::getParameters()",
      "407": "OFDEncryptor::::getParameters()",
      "408": "OFDEncryptor::::getParameters()",
      "409": "OFDEncryptor::::getParameters()",
      "429": "OFDEncryptor::::close()",
      "430": "OFDEncryptor::::close()",
      "431": "OFDEncryptor::::close()",
      "432": "OFDEncryptor::::close()",
      "433": "OFDEncryptor::::close()",
      "434": "OFDEncryptor::::close()",
      "435": "OFDEncryptor::::close()",
      "436": "OFDEncryptor::::close()",
      "437": "OFDEncryptor::::close()",
      "438": "OFDEncryptor::::close()",
      "439": "OFDEncryptor::::close()",
      "440": "OFDEncryptor::::close()",
      "441": "OFDEncryptor::::close()",
      "442": "OFDEncryptor::::close()"
    },
    "test_reverse_method_lines_dic": {
      "34": "OFDEncryptorTest::::ofCase()",
      "35": "OFDEncryptorTest::::ofCase()",
      "36": "OFDEncryptorTest::::ofCase()",
      "37": "OFDEncryptorTest::::ofCase()",
      "38": "OFDEncryptorTest::::ofCase()",
      "39": "OFDEncryptorTest::::ofCase()",
      "40": "OFDEncryptorTest::::ofCase()",
      "41": "OFDEncryptorTest::::ofCase()",
      "42": "OFDEncryptorTest::::ofCase()",
      "43": "OFDEncryptorTest::::ofCase()",
      "44": "OFDEncryptorTest::::ofCase()",
      "45": "OFDEncryptorTest::::ofCase()",
      "46": "OFDEncryptorTest::::ofCase()",
      "47": "OFDEncryptorTest::::ofCase()",
      "48": "OFDEncryptorTest::::ofCase()",
      "49": "OFDEncryptorTest::::ofCase()",
      "50": "OFDEncryptorTest::::ofCase()",
      "51": "OFDEncryptorTest::::ofCase()",
      "52": "OFDEncryptorTest::::ofCase()",
      "53": "OFDEncryptorTest::::ofCase()",
      "54": "OFDEncryptorTest::::ofCase()",
      "55": "OFDEncryptorTest::::ofCase()",
      "56": "OFDEncryptorTest::::ofCase()",
      "57": "OFDEncryptorTest::::ofCase()",
      "58": "OFDEncryptorTest::::ofCase()",
      "59": "OFDEncryptorTest::::ofCase()",
      "60": "OFDEncryptorTest::::ofCase()",
      "61": "OFDEncryptorTest::::ofCase()",
      "62": "OFDEncryptorTest::::ofCase()",
      "63": "OFDEncryptorTest::::ofCase()",
      "64": "OFDEncryptorTest::::ofCase()",
      "65": "OFDEncryptorTest::::ofCase()",
      "66": "OFDEncryptorTest::::ofCase()",
      "68": "OFDEncryptorTest::::encryptPassword()",
      "69": "OFDEncryptorTest::::encryptPassword()",
      "70": "OFDEncryptorTest::::encryptPassword()",
      "71": "OFDEncryptorTest::::encryptPassword()",
      "72": "OFDEncryptorTest::::encryptPassword()",
      "73": "OFDEncryptorTest::::encryptPassword()",
      "74": "OFDEncryptorTest::::encryptPassword()",
      "75": "OFDEncryptorTest::::encryptPassword()",
      "76": "OFDEncryptorTest::::encryptPassword()",
      "77": "OFDEncryptorTest::::encryptPassword()",
      "78": "OFDEncryptorTest::::encryptPassword()",
      "80": "OFDEncryptorTest::::encryptCert()",
      "81": "OFDEncryptorTest::::encryptCert()",
      "82": "OFDEncryptorTest::::encryptCert()",
      "83": "OFDEncryptorTest::::encryptCert()",
      "84": "OFDEncryptorTest::::encryptCert()",
      "85": "OFDEncryptorTest::::encryptCert()",
      "86": "OFDEncryptorTest::::encryptCert()",
      "87": "OFDEncryptorTest::::encryptCert()",
      "88": "OFDEncryptorTest::::encryptCert()",
      "89": "OFDEncryptorTest::::encryptCert()",
      "90": "OFDEncryptorTest::::encryptCert()",
      "91": "OFDEncryptorTest::::encryptCert()",
      "92": "OFDEncryptorTest::::encryptCert()",
      "93": "OFDEncryptorTest::::encryptCert()"
    },
    "tests": [
      {
        "test_lines": [
          68,
          78
        ],
        "covered_lines": [
          106,
          107,
          110,
          113,
          114,
          116,
          117,
          118,
          119,
          120,
          121,
          130,
          133,
          134,
          178,
          181,
          182,
          185,
          187,
          190,
          192,
          193,
          194,
          196,
          197,
          198,
          202,
          203,
          205,
          207,
          208,
          209,
          211,
          212,
          214,
          216,
          217,
          218,
          220,
          221,
          222,
          223,
          226,
          229,
          237,
          239,
          241,
          244,
          245,
          255,
          256,
          262,
          263,
          264,
          265,
          266,
          268,
          270,
          283,
          285,
          287,
          288,
          289,
          290,
          291,
          293,
          294,
          295,
          299,
          313,
          314,
          317,
          319,
          320,
          321,
          336,
          337,
          338,
          339,
          341,
          342,
          343,
          344,
          345,
          347,
          348,
          349,
          353,
          354,
          355,
          356,
          358,
          359,
          373,
          377,
          379,
          380,
          381,
          382,
          383,
          384,
          385,
          386,
          388,
          389,
          390,
          394,
          395,
          396,
          397,
          398,
          431,
          434,
          435,
          437,
          440,
          442
        ]
      },
      {
        "test_lines": [
          80,
          93
        ],
        "covered_lines": [
          106,
          107,
          110,
          113,
          114,
          116,
          117,
          118,
          119,
          120,
          121,
          130,
          133,
          134,
          178,
          181,
          182,
          185,
          187,
          190,
          192,
          193,
          194,
          196,
          197,
          198,
          202,
          203,
          205,
          207,
          208,
          209,
          211,
          212,
          214,
          216,
          217,
          218,
          220,
          221,
          222,
          223,
          226,
          229,
          231,
          232,
          235,
          237,
          239,
          241,
          244,
          245,
          255,
          256,
          262,
          263,
          264,
          265,
          266,
          268,
          270,
          283,
          285,
          287,
          288,
          289,
          290,
          291,
          293,
          294,
          295,
          299,
          313,
          314,
          317,
          319,
          320,
          321,
          336,
          337,
          338,
          339,
          341,
          342,
          343,
          344,
          345,
          347,
          348,
          349,
          353,
          354,
          355,
          356,
          358,
          359,
          373,
          377,
          379,
          380,
          381,
          382,
          383,
          384,
          385,
          386,
          388,
          389,
          390,
          394,
          395,
          396,
          397,
          398,
          431,
          434,
          435,
          437,
          440,
          442
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/ofdrw/ofdrw-crypto/src/main/java/org/ofdrw/crypto/ContainerPath.java": {
    "class_content": [
      "package org.ofdrw.crypto;\n",
      "\n",
      "import org.ofdrw.core.basicType.ST_Loc;\n",
      "\n",
      "import java.io.IOException;\n",
      "import java.nio.file.Files;\n",
      "import java.nio.file.Path;\n",
      "\n",
      "/**\n",
      " * \u6587\u4ef6\u5728\u5bb9\u5668\u4e2d\u7684\u8def\u5f84\n",
      " *\n",
      " * @author \u6743\u89c2\u5b87\n",
      " * @since 2021-07-15 18:57:45\n",
      " */\n",
      "public class ContainerPath {\n",
      "    /**\n",
      "     * \u5bb9\u5668\u5185\u7edd\u5bf9\u8def\u5f84\n",
      "     */\n",
      "    private String path;\n",
      "    /**\n",
      "     * \u6587\u4ef6\u7cfb\u7edf\u5185\u7edd\u5bf9\u8def\u5f84\n",
      "     */\n",
      "    private Path abs;\n",
      "\n",
      "    private ContainerPath() {\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u521b\u5efa  \u6587\u4ef6\u5728\u5bb9\u5668\u4e2d\u7684\u8def\u5f84\n",
      "     *\n",
      "     * @param path \u5bb9\u5668\u5185\u7edd\u5bf9\u8def\u5f84\n",
      "     * @param abs  \u6587\u4ef6\u7cfb\u7edf\u5185\u7edd\u5bf9\u8def\u5f84\n",
      "     */\n",
      "    public ContainerPath(String path, Path abs) {\n",
      "        this.path = path;\n",
      "        this.abs = abs;\n",
      "    }\n",
      "\n",
      "    public String getPath() {\n",
      "        return path;\n",
      "    }\n",
      "\n",
      "    public Path getAbs() {\n",
      "        return abs;\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u521b\u5efa\u52a0\u5bc6\u540e\u7684\u6587\u4ef6\u8def\u5f84\uff08\u7a7a\uff09\n",
      "     * <p>\n",
      "     * \u8f93\u51fa\u52a0\u5bc6\u6587\u4ef6\u547d\u540d\u89c4\u5219 \u539f\u6587\u4ef6\u540d\u5168\u5c0f\u5199 + .dat \u540e\u7f00\uff0c\u5982\u679c\u91cd\u590d\uff0c\u90a3\u4e48\u5728\u6587\u4ef6\u540d\u540e\u9762\u589e\u52a0\u540e\u7f00\n",
      "     *\n",
      "     * @return \u521b\u5efa\u52a0\u5bc6\u540e\u8f93\u51fa\u6587\u4ef6\n",
      "     * @throws IOException \u6587\u4ef6\u64cd\u4f5c\u5f02\u5e38\n",
      "     */\n",
      "    public ContainerPath createEncryptedFile() throws IOException {\n",
      "        return newDatFile(this.path, abs.toAbsolutePath().getParent());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u521b\u5efa \u540e\u7f00\u4e3a.dat \u7684\u6587\u4ef6\n",
      "     * <p>\n",
      "     * \u52a0\u5bc6\u6587\u4ef6\u4e3a \u539f\u6587\u4ef6 \u540e\u7f00\u6539\u4e3a .dat\n",
      "     * \u82e5\u6587\u4ef6\u5b58\u5728\uff0c\u5219\u5728\u6587\u4ef6\u540d\u540e\u8ffd\u52a0\u4e0b\u6ed1\u7ebf\u5e8f\u53f7 _N\n",
      "     *\n",
      "     * @param cAbs   \u5bb9\u5668\u5185\u7edd\u5bf9\u8def\u5f84\n",
      "     * @param parent \u751f\u6210\u7684\u52a0\u5bc6\u6587\u4ef6\u5b58\u50a8\u76ee\u5f55\n",
      "     * @return \u5bb9\u5668\u8def\u5f84\u5bf9\u8c61\n",
      "     * @throws IOException \u6587\u4ef6\u64cd\u4f5c\u5f02\u5e38\n",
      "     */\n",
      "    public static ContainerPath newDatFile(String cAbs, Path parent) throws IOException {\n",
      "        if (cAbs.charAt(0) != '/') {\n",
      "            cAbs = '/' + cAbs;\n",
      "        }\n",
      "        if (Files.notExists(parent)) {\n",
      "            Files.createDirectories(parent);\n",
      "        }\n",
      "        final ST_Loc containerLoc = ST_Loc.getInstance(cAbs);\n",
      "        // \u83b7\u53d6\u6587\u4ef6\u540d\n",
      "        String originalName = containerLoc.getFileName();\n",
      "        int off = originalName.lastIndexOf('.');\n",
      "        String name = originalName;\n",
      "        if (off != -1) {\n",
      "            name = originalName.substring(0, off);\n",
      "        }\n",
      "        String encFileName = name.toLowerCase() + \".dat\";\n",
      "        Path resPath = parent.resolve(encFileName);\n",
      "        int cnt = 1;\n",
      "        // \u8f93\u51fa\u52a0\u5bc6\u6587\u4ef6\u547d\u540d\u89c4\u5219 \u539f\u6587\u4ef6\u540d\u5168\u5c0f\u5199 + .dat \u540e\u7f00\uff0c\u5982\u679c\u91cd\u590d\uff0c\u90a3\u4e48\u5728\u6587\u4ef6\u540d\u540e\u9762\u589e\u52a0\u540e\u7f00\n",
      "        while (Files.exists(resPath)) {\n",
      "            encFileName = name.toLowerCase() + \"_\" + cnt + \".dat\";\n",
      "            resPath = parent.resolve(encFileName);\n",
      "            cnt++;\n",
      "        }\n",
      "        // \u521b\u5efa\u6587\u4ef6\n",
      "        Files.createFile(resPath);\n",
      "        return new ContainerPath(containerLoc.parent() + \"/\" + encFileName, resPath);\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package org.ofdrw.crypto;\n",
      "\n",
      "import org.junit.jupiter.api.Test;\n",
      "\n",
      "import java.io.IOException;\n",
      "import java.io.InputStream;\n",
      "import java.io.OutputStream;\n",
      "import java.nio.charset.StandardCharsets;\n",
      "import java.nio.file.Files;\n",
      "import java.nio.file.Path;\n",
      "import java.nio.file.Paths;\n",
      "\n",
      "import static org.junit.jupiter.api.Assertions.*;\n",
      "\n",
      "/**\n",
      " * @author \u6743\u89c2\u5b87\n",
      " * @since 2021-07-19 19:19:41\n",
      " */\n",
      "class ContainerPathTest {\n",
      "\n",
      "    @Test\n",
      "    void createEncryptedFile() throws IOException {\n",
      "\n",
      "        Path src = Paths.get(\"target/Doc_0/Page_0/Content.xml\");\n",
      "        Files.createDirectories(src.getParent());\n",
      "        try (OutputStream out = Files.newOutputStream(src);) {\n",
      "            out.write(\"Hello\".getBytes(StandardCharsets.UTF_8));\n",
      "        }\n",
      "\n",
      "        ContainerPath cp = new ContainerPath(\"/Doc_0/Page_0/Content.xml\", src);\n",
      "        final ContainerPath actual = cp.createEncryptedFile();\n",
      "        Path encryptedFile = actual.getAbs();\n",
      "        assertTrue(Files.exists(encryptedFile));\n",
      "        assertEquals(\"/Doc_0/Page_0/content.dat\", actual.getPath());\n",
      "        System.out.println(actual.getPath());\n",
      "        System.out.println(encryptedFile.toAbsolutePath());\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    public void resolve() throws Exception {\n",
      "        Path src = Paths.get(\"\");\n",
      "        final Path resolve = src.resolve(\"not/exist/dir\");\n",
      "        System.out.println(Files.notExists(resolve));\n",
      "        System.out.println(resolve.toAbsolutePath());\n",
      "    }\n",
      "}"
    ],
    "method_lines_dic": {
      "ContainerPath::::getPath()": [
        39,
        41
      ],
      "ContainerPath::::getAbs()": [
        43,
        45
      ],
      "ContainerPath::::createEncryptedFile()": [
        56,
        58
      ],
      "ContainerPath::::newDatFile(java.lang.String,java.nio.file.Path)": [
        71,
        98
      ]
    },
    "test_method_lines_dic": {
      "ContainerPathTest::::createEncryptedFile()": [
        21,
        37
      ],
      "ContainerPathTest::::resolve()": [
        40,
        46
      ]
    },
    "reverse_method_lines_dic": {
      "39": "ContainerPath::::getPath()",
      "40": "ContainerPath::::getPath()",
      "41": "ContainerPath::::getPath()",
      "43": "ContainerPath::::getAbs()",
      "44": "ContainerPath::::getAbs()",
      "45": "ContainerPath::::getAbs()",
      "56": "ContainerPath::::createEncryptedFile()",
      "57": "ContainerPath::::createEncryptedFile()",
      "58": "ContainerPath::::createEncryptedFile()",
      "71": "ContainerPath::::newDatFile(java.lang.String,java.nio.file.Path)",
      "72": "ContainerPath::::newDatFile(java.lang.String,java.nio.file.Path)",
      "73": "ContainerPath::::newDatFile(java.lang.String,java.nio.file.Path)",
      "74": "ContainerPath::::newDatFile(java.lang.String,java.nio.file.Path)",
      "75": "ContainerPath::::newDatFile(java.lang.String,java.nio.file.Path)",
      "76": "ContainerPath::::newDatFile(java.lang.String,java.nio.file.Path)",
      "77": "ContainerPath::::newDatFile(java.lang.String,java.nio.file.Path)",
      "78": "ContainerPath::::newDatFile(java.lang.String,java.nio.file.Path)",
      "79": "ContainerPath::::newDatFile(java.lang.String,java.nio.file.Path)",
      "80": "ContainerPath::::newDatFile(java.lang.String,java.nio.file.Path)",
      "81": "ContainerPath::::newDatFile(java.lang.String,java.nio.file.Path)",
      "82": "ContainerPath::::newDatFile(java.lang.String,java.nio.file.Path)",
      "83": "ContainerPath::::newDatFile(java.lang.String,java.nio.file.Path)",
      "84": "ContainerPath::::newDatFile(java.lang.String,java.nio.file.Path)",
      "85": "ContainerPath::::newDatFile(java.lang.String,java.nio.file.Path)",
      "86": "ContainerPath::::newDatFile(java.lang.String,java.nio.file.Path)",
      "87": "ContainerPath::::newDatFile(java.lang.String,java.nio.file.Path)",
      "88": "ContainerPath::::newDatFile(java.lang.String,java.nio.file.Path)",
      "89": "ContainerPath::::newDatFile(java.lang.String,java.nio.file.Path)",
      "90": "ContainerPath::::newDatFile(java.lang.String,java.nio.file.Path)",
      "91": "ContainerPath::::newDatFile(java.lang.String,java.nio.file.Path)",
      "92": "ContainerPath::::newDatFile(java.lang.String,java.nio.file.Path)",
      "93": "ContainerPath::::newDatFile(java.lang.String,java.nio.file.Path)",
      "94": "ContainerPath::::newDatFile(java.lang.String,java.nio.file.Path)",
      "95": "ContainerPath::::newDatFile(java.lang.String,java.nio.file.Path)",
      "96": "ContainerPath::::newDatFile(java.lang.String,java.nio.file.Path)",
      "97": "ContainerPath::::newDatFile(java.lang.String,java.nio.file.Path)",
      "98": "ContainerPath::::newDatFile(java.lang.String,java.nio.file.Path)"
    },
    "test_reverse_method_lines_dic": {
      "21": "ContainerPathTest::::createEncryptedFile()",
      "22": "ContainerPathTest::::createEncryptedFile()",
      "23": "ContainerPathTest::::createEncryptedFile()",
      "24": "ContainerPathTest::::createEncryptedFile()",
      "25": "ContainerPathTest::::createEncryptedFile()",
      "26": "ContainerPathTest::::createEncryptedFile()",
      "27": "ContainerPathTest::::createEncryptedFile()",
      "28": "ContainerPathTest::::createEncryptedFile()",
      "29": "ContainerPathTest::::createEncryptedFile()",
      "30": "ContainerPathTest::::createEncryptedFile()",
      "31": "ContainerPathTest::::createEncryptedFile()",
      "32": "ContainerPathTest::::createEncryptedFile()",
      "33": "ContainerPathTest::::createEncryptedFile()",
      "34": "ContainerPathTest::::createEncryptedFile()",
      "35": "ContainerPathTest::::createEncryptedFile()",
      "36": "ContainerPathTest::::createEncryptedFile()",
      "37": "ContainerPathTest::::createEncryptedFile()",
      "40": "ContainerPathTest::::resolve()",
      "41": "ContainerPathTest::::resolve()",
      "42": "ContainerPathTest::::resolve()",
      "43": "ContainerPathTest::::resolve()",
      "44": "ContainerPathTest::::resolve()",
      "45": "ContainerPathTest::::resolve()",
      "46": "ContainerPathTest::::resolve()"
    },
    "tests": [
      {
        "test_lines": [
          21,
          37
        ],
        "covered_lines": [
          34,
          35,
          36,
          37,
          40,
          44,
          57,
          72,
          75,
          78,
          80,
          81,
          82,
          83,
          84,
          86,
          87,
          88,
          90,
          96,
          97
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/ofdrw/ofdrw-crypto/src/main/java/org/ofdrw/crypto/integrity/OFDIntegrityVerifier.java": {
    "class_content": [
      "package org.ofdrw.crypto.integrity;\n",
      "\n",
      "import org.apache.commons.io.FileUtils;\n",
      "import org.dom4j.DocumentException;\n",
      "import org.dom4j.Element;\n",
      "import org.ofdrw.core.Holder;\n",
      "import org.ofdrw.core.basicType.ST_Loc;\n",
      "import org.ofdrw.core.integrity.FileList;\n",
      "import org.ofdrw.core.integrity.OFDEntries;\n",
      "import org.ofdrw.pkg.container.OFDDir;\n",
      "import org.ofdrw.pkg.tool.ElemCup;\n",
      "import org.ofdrw.reader.ZipUtil;\n",
      "\n",
      "import java.io.File;\n",
      "import java.io.IOException;\n",
      "import java.nio.file.*;\n",
      "import java.security.GeneralSecurityException;\n",
      "import java.util.HashSet;\n",
      "import java.util.Set;\n",
      "\n",
      "/**\n",
      " * OFD\u5b8c\u6574\u6027\u534f\u8bae\u6821\u9a8c\n",
      " * <p>\n",
      " * \u534f\u8bae\u9075\u5faa\u300aGB/T 0099\u300b 7.4.6 \u6821\u9a8c\u6d41\u7a0b\n",
      " *\n",
      " * @author \u6743\u89c2\u5b87\n",
      " * @since 2021-08-23 19:44:54\n",
      " */\n",
      "public class OFDIntegrityVerifier {\n",
      "\n",
      "    public OFDIntegrityVerifier() {\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u6267\u884cOFD\u7684\u5b8c\u6574\u6027\u6821\u9a8c\u6d41\u7a0b\n",
      "     *\n",
      "     * @param in       \u5f85\u6821\u9a8c\u7684OFD\u6587\u4ef6\u8def\u5f84\n",
      "     * @param verifier \u7b7e\u540d\u503c\u9a8c\u8bc1\u5668\n",
      "     * @return \u6821\u9a8c\u7ed3\u679c\uff1atrue - \u6587\u4ef6\u5b8c\u6574\u4e14\u6ca1\u6709\u5939\u5e26\uff1bfalse - \u6587\u4ef6\u5b58\u5728\u5939\u5e26\n",
      "     * @throws IOException              \u6587\u4ef6\u4e0d\u5b58\u5728\u6216IO\u64cd\u4f5c\u5f02\u5e38\n",
      "     * @throws GeneralSecurityException \u5b89\u5168\u8ba1\u7b97\u5f02\u5e38\n",
      "     * @throws DocumentException        \u65e0\u6cd5\u89e3\u6790\u6587\u6863\u5185\u5bb9\uff0c\u53ef\u80fd\u662f\u6587\u4ef6\u683c\u5f0f\u4e0d\u6b63\u786e\n",
      "     */\n",
      "    public boolean integrity(Path in, ProtectVerifier verifier) throws IOException, GeneralSecurityException, DocumentException {\n",
      "        if (in == null || Files.notExists(in)) {\n",
      "            throw new IllegalArgumentException(\"\u5f85\u6821\u9a8c\u7684OFD\u6587\u4ef6\u8def\u5f84(in)\u4e3a\u7a7a\u6216\u4e0d\u5b58\u5728\");\n",
      "        }\n",
      "        if (verifier == null) {\n",
      "            throw new IllegalArgumentException(\"\u7b7e\u540d\u503c\u9a8c\u8bc1\u5668(verifier)\u4e3a\u7a7a\");\n",
      "        }\n",
      "\n",
      "        Path workDir = null;\n",
      "        try {\n",
      "            workDir = Files.createTempDirectory(\"ofd-tmp-\");\n",
      "            // \u89e3\u538b\u6587\u6863\uff0c\u5230\u4e34\u65f6\u7684\u5de5\u4f5c\u76ee\u5f55\n",
      "            ZipUtil.unZipFiles(in.toFile(), workDir.toAbsolutePath() + File.separator);\n",
      "            OFDDir ofdDir = new OFDDir(workDir.toAbsolutePath());\n",
      "            // a) \u8bfb\u53d6\u5b8c\u6574\u6027\u4fdd\u62a4\u63cf\u8ff0\u6587\u4ef6\n",
      "            // \u6b64\u5904\u5982\u679c\u6587\u4ef6\u4e0d\u5b58\u5728\u4f1a\u629b\u51faFNE\u5f02\u5e38\n",
      "            final Path ofdEntriesPath = ofdDir.getFile(OFDDir.OFDEntriesFileName);\n",
      "            // b) \u6839\u636e\u7b7e\u540d\u65b9\u6848\uff0c\u8c03\u7528\u6742\u51d1\u7b97\u6cd5\u8ba1\u7b97\u5b8c\u6574\u6027\u4fdd\u62a4\u6587\u4ef6\u5f97\u5230\u6742\u51d1\u503c\n",
      "            // c) \u8bfb\u53d6\u7b7e\u540d\u503c\u6587\u4ef6\uff0c\u8fdb\u884c\u7b7e\u540d\u9a8c\u8bc1\n",
      "            final Element e = ElemCup.inject(ofdEntriesPath);\n",
      "            OFDEntries ofdEntries = new OFDEntries(e);\n",
      "            final ST_Loc signedValueLoc = ofdEntries.getSignedValueLoc();\n",
      "            final Path sigValuePath = Paths.get(workDir.toString(), signedValueLoc.toString());\n",
      "            final byte[] signedValue = Files.readAllBytes(sigValuePath);\n",
      "            // \u8c03\u7528\u6742\u51d1\u7b97\u6cd5\u8ba1\u7b97\u5b8c\u6574\u6027\u4fdd\u62a4\u6587\u4ef6\u5f97\u5230\u6742\u51d1\u503c\uff0c\u8fdb\u884c\u7b7e\u540d\u9a8c\u8bc1\n",
      "            boolean integrity = verifier.digestThenVerify(ofdEntriesPath, signedValue);\n",
      "            // \u4e3a\u4e86\u4fdd\u8bc1\u6ca1\u6709\u800c\u5916\u5939\u5e26\u7684\u6587\u4ef6\u8fd8\u9700\u8981\uff0c\u6839\u636e\u6587\u4ef6\u8868\u548c\u793a\u4f8b\u5305\u5185\u7684\u6587\u4ef6\u8fdb\u884c\u5bf9\u6bd4\n",
      "            boolean hasExtraFile = checkNoExtraFile(ofdDir, ofdEntries);\n",
      "            return integrity && hasExtraFile;\n",
      "        } finally {\n",
      "            if (workDir != null) {\n",
      "                // \u5220\u9664\u7528\u4e8e\u6821\u9a8c\u7684\u4e34\u65f6\u76ee\u5f55\n",
      "                FileUtils.deleteDirectory(workDir.toFile());\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u68c0\u67e5\u662f\u5426\u5b58\u5728 \u9632\u6b62\u5939\u5e26\u6587\u4ef6\u5217\u8868 \u4e2d\u5b58\u5728\u7684\u5939\u5e26\u6587\u4ef6\n",
      "     *\n",
      "     * @param ofdDir     OFD\u5bb9\u5668\n",
      "     * @param ofdEntries \u5b8c\u6574\u6027\u4fdd\u62a4\u63cf\u8ff0\u5bf9\u8c61\n",
      "     * @return true - \u6ca1\u6709\u5939\u5e26; false - \u5b58\u5728\u5939\u5e26\n",
      "     */\n",
      "    private boolean checkNoExtraFile(OFDDir ofdDir, OFDEntries ofdEntries) throws IOException {\n",
      "        final FileList fileList = ofdEntries.getFileList();\n",
      "        // \u5efa\u7acb\u6587\u4ef6MAP \u7528\u4e8e\u68c0\u67e5\u6620\u5c04\u60c5\u51b5\n",
      "        Set<String> pkgFileSet = new HashSet<>();\n",
      "        fileList.getFiles().forEach((f) -> {\n",
      "            String loc = f.getFileLoc().toString();\n",
      "            if (loc.charAt(0) != '/') {\n",
      "                loc = String.format(\"/%s\", loc);\n",
      "            }\n",
      "            pkgFileSet.add(loc);\n",
      "        });\n",
      "        // \u7b7e\u540d\u503c\u6587\u4ef6\u4e5f\u52a0\u5165 Set\u4e2d\u7528\u4e8e\u68c0\u67e5\n",
      "        final ST_Loc signedValueLoc = ofdEntries.getSignedValueLoc();\n",
      "        String loc = signedValueLoc.toString();\n",
      "        if (loc.charAt(0) != '/') {\n",
      "            loc = String.format(\"/%s\", loc);\n",
      "        }\n",
      "        pkgFileSet.add(loc);\n",
      "\n",
      "        Holder<String> invalidFileLocHolder = new Holder<>(null);\n",
      "        // \u904d\u5386\u5305\u5185\u51fa\u73b0\u7684\u6240\u6709\u6587\u4ef6\n",
      "        ofdDir.walk(((pkgAbsPath, path) -> {\n",
      "            // \u5ffd\u7565\u9632\u6b62\u5939\u5e26\u6587\u4ef6\u672c\u8eab\n",
      "            if (\"/OFDEntries.xml\".equals(pkgAbsPath)){\n",
      "                return true;\n",
      "            }\n",
      "             boolean exist = pkgFileSet.contains(pkgAbsPath);\n",
      "            if (!exist) {\n",
      "                // \u6587\u4ef6\u4e0d\u5728 \u5b8c\u6574\u6027\u4fdd\u62a4\u6587\u4ef6\u5217\u8868\u4e2d\uff0c\u90a3\u4e48\u8ba4\u4e3a\u662f\u53d1\u751f\u4e86\u6587\u4ef6\u7684\u5939\u5e26\n",
      "                invalidFileLocHolder.value = pkgAbsPath;\n",
      "                // \u505c\u6b62\u6587\u4ef6\u7684\u7ee7\u7eed\u904d\u5386\n",
      "                return false;\n",
      "            }\n",
      "            return true;\n",
      "        }));\n",
      "        // \u5982\u679c\u975e\u6cd5\u6587\u4ef6\u8def\u5f84\u4e3a\u7a7a\u8868\u793a\u6ca1\u6709\u51fa\u73b0\u5939\u5e26\u60c5\u51b5\n",
      "        return invalidFileLocHolder.value == null;\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package org.ofdrw.crypto.integrity;\n",
      "\n",
      "import org.dom4j.DocumentException;\n",
      "import org.junit.jupiter.api.Test;\n",
      "\n",
      "import java.io.IOException;\n",
      "import java.nio.file.Path;\n",
      "import java.nio.file.Paths;\n",
      "import java.security.GeneralSecurityException;\n",
      "\n",
      "import static org.junit.jupiter.api.Assertions.*;\n",
      "\n",
      "/**\n",
      " * \u6d4b\u8bd5\u9a8c\u8bc1OFD\u5b8c\u6574\u6027\n",
      " *\n",
      " * @author \u6743\u89c2\u5b87\n",
      " * @since 2021-08-24 19:45:25\n",
      " */\n",
      "class OFDIntegrityVerifierTest {\n",
      "\n",
      "    /**\n",
      "     * \u5b8c\u6574\u6027\u9a8c\u8bc1\u6d4b\u8bd5\u7528\u4f8b\n",
      "     */\n",
      "    @Test\n",
      "    void integrity() throws GeneralSecurityException, IOException, DocumentException {\n",
      "        Path in = Paths.get(\"src/test/resources/hello-integrity.ofd\");\n",
      "        // 1. \u521b\u5efaOFD\u5b8c\u6574\u6027\u9a8c\u8bc1\u5668\u3002\n",
      "        OFDIntegrityVerifier ofdIntegrityVerifier = new OFDIntegrityVerifier();\n",
      "        // 2. \u521b\u5efa\u7528\u4e8e\u9a8c\u8bc1\u7b7e\u540d\u503c\u7684\u9a8c\u8bc1\u5668\u3002\n",
      "        GMProtectVerifier gmProtectVerifier = new GMProtectVerifier();\n",
      "        // 3. \u6267\u884c\u5b8c\u6574\u6027\u9a8c\u8bc1\uff0c\u83b7\u53d6\u9a8c\u8bc1\u7ed3\u679c\u3002\n",
      "        final boolean integrity = ofdIntegrityVerifier.integrity(in, gmProtectVerifier);\n",
      "        System.out.println(\">> OFD\u5b8c\u6574\u6027\u6821\u9a8c: \" + integrity);\n",
      "        assertTrue(integrity);\n",
      "    }\n",
      "\n",
      "}"
    ],
    "method_lines_dic": {
      "OFDIntegrityVerifier::::integrity(java.nio.file.Path,org.ofdrw.crypto.integrity.ProtectVerifier)": [
        44,
        79
      ]
    },
    "test_method_lines_dic": {
      "OFDIntegrityVerifierTest::::integrity()": [
        24,
        35
      ]
    },
    "reverse_method_lines_dic": {
      "44": "OFDIntegrityVerifier::::integrity(java.nio.file.Path,org.ofdrw.crypto.integrity.ProtectVerifier)",
      "45": "OFDIntegrityVerifier::::integrity(java.nio.file.Path,org.ofdrw.crypto.integrity.ProtectVerifier)",
      "46": "OFDIntegrityVerifier::::integrity(java.nio.file.Path,org.ofdrw.crypto.integrity.ProtectVerifier)",
      "47": "OFDIntegrityVerifier::::integrity(java.nio.file.Path,org.ofdrw.crypto.integrity.ProtectVerifier)",
      "48": "OFDIntegrityVerifier::::integrity(java.nio.file.Path,org.ofdrw.crypto.integrity.ProtectVerifier)",
      "49": "OFDIntegrityVerifier::::integrity(java.nio.file.Path,org.ofdrw.crypto.integrity.ProtectVerifier)",
      "50": "OFDIntegrityVerifier::::integrity(java.nio.file.Path,org.ofdrw.crypto.integrity.ProtectVerifier)",
      "51": "OFDIntegrityVerifier::::integrity(java.nio.file.Path,org.ofdrw.crypto.integrity.ProtectVerifier)",
      "52": "OFDIntegrityVerifier::::integrity(java.nio.file.Path,org.ofdrw.crypto.integrity.ProtectVerifier)",
      "53": "OFDIntegrityVerifier::::integrity(java.nio.file.Path,org.ofdrw.crypto.integrity.ProtectVerifier)",
      "54": "OFDIntegrityVerifier::::integrity(java.nio.file.Path,org.ofdrw.crypto.integrity.ProtectVerifier)",
      "55": "OFDIntegrityVerifier::::integrity(java.nio.file.Path,org.ofdrw.crypto.integrity.ProtectVerifier)",
      "56": "OFDIntegrityVerifier::::integrity(java.nio.file.Path,org.ofdrw.crypto.integrity.ProtectVerifier)",
      "57": "OFDIntegrityVerifier::::integrity(java.nio.file.Path,org.ofdrw.crypto.integrity.ProtectVerifier)",
      "58": "OFDIntegrityVerifier::::integrity(java.nio.file.Path,org.ofdrw.crypto.integrity.ProtectVerifier)",
      "59": "OFDIntegrityVerifier::::integrity(java.nio.file.Path,org.ofdrw.crypto.integrity.ProtectVerifier)",
      "60": "OFDIntegrityVerifier::::integrity(java.nio.file.Path,org.ofdrw.crypto.integrity.ProtectVerifier)",
      "61": "OFDIntegrityVerifier::::integrity(java.nio.file.Path,org.ofdrw.crypto.integrity.ProtectVerifier)",
      "62": "OFDIntegrityVerifier::::integrity(java.nio.file.Path,org.ofdrw.crypto.integrity.ProtectVerifier)",
      "63": "OFDIntegrityVerifier::::integrity(java.nio.file.Path,org.ofdrw.crypto.integrity.ProtectVerifier)",
      "64": "OFDIntegrityVerifier::::integrity(java.nio.file.Path,org.ofdrw.crypto.integrity.ProtectVerifier)",
      "65": "OFDIntegrityVerifier::::integrity(java.nio.file.Path,org.ofdrw.crypto.integrity.ProtectVerifier)",
      "66": "OFDIntegrityVerifier::::integrity(java.nio.file.Path,org.ofdrw.crypto.integrity.ProtectVerifier)",
      "67": "OFDIntegrityVerifier::::integrity(java.nio.file.Path,org.ofdrw.crypto.integrity.ProtectVerifier)",
      "68": "OFDIntegrityVerifier::::integrity(java.nio.file.Path,org.ofdrw.crypto.integrity.ProtectVerifier)",
      "69": "OFDIntegrityVerifier::::integrity(java.nio.file.Path,org.ofdrw.crypto.integrity.ProtectVerifier)",
      "70": "OFDIntegrityVerifier::::integrity(java.nio.file.Path,org.ofdrw.crypto.integrity.ProtectVerifier)",
      "71": "OFDIntegrityVerifier::::integrity(java.nio.file.Path,org.ofdrw.crypto.integrity.ProtectVerifier)",
      "72": "OFDIntegrityVerifier::::integrity(java.nio.file.Path,org.ofdrw.crypto.integrity.ProtectVerifier)",
      "73": "OFDIntegrityVerifier::::integrity(java.nio.file.Path,org.ofdrw.crypto.integrity.ProtectVerifier)",
      "74": "OFDIntegrityVerifier::::integrity(java.nio.file.Path,org.ofdrw.crypto.integrity.ProtectVerifier)",
      "75": "OFDIntegrityVerifier::::integrity(java.nio.file.Path,org.ofdrw.crypto.integrity.ProtectVerifier)",
      "76": "OFDIntegrityVerifier::::integrity(java.nio.file.Path,org.ofdrw.crypto.integrity.ProtectVerifier)",
      "77": "OFDIntegrityVerifier::::integrity(java.nio.file.Path,org.ofdrw.crypto.integrity.ProtectVerifier)",
      "78": "OFDIntegrityVerifier::::integrity(java.nio.file.Path,org.ofdrw.crypto.integrity.ProtectVerifier)",
      "79": "OFDIntegrityVerifier::::integrity(java.nio.file.Path,org.ofdrw.crypto.integrity.ProtectVerifier)"
    },
    "test_reverse_method_lines_dic": {
      "24": "OFDIntegrityVerifierTest::::integrity()",
      "25": "OFDIntegrityVerifierTest::::integrity()",
      "26": "OFDIntegrityVerifierTest::::integrity()",
      "27": "OFDIntegrityVerifierTest::::integrity()",
      "28": "OFDIntegrityVerifierTest::::integrity()",
      "29": "OFDIntegrityVerifierTest::::integrity()",
      "30": "OFDIntegrityVerifierTest::::integrity()",
      "31": "OFDIntegrityVerifierTest::::integrity()",
      "32": "OFDIntegrityVerifierTest::::integrity()",
      "33": "OFDIntegrityVerifierTest::::integrity()",
      "34": "OFDIntegrityVerifierTest::::integrity()",
      "35": "OFDIntegrityVerifierTest::::integrity()"
    },
    "tests": [
      {
        "test_lines": [
          24,
          35
        ],
        "covered_lines": [
          31,
          32,
          45,
          48,
          52,
          54,
          56,
          57,
          60,
          63,
          64,
          65,
          66,
          67,
          69,
          71,
          72,
          74,
          76,
          89,
          91,
          92,
          93,
          94,
          97,
          98,
          100,
          101,
          102,
          105,
          107,
          109,
          111,
          112,
          114,
          115,
          121,
          124
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/ofdrw/ofdrw-crypto/src/main/java/org/ofdrw/crypto/integrity/OFDIntegrity.java": {
    "class_content": [
      "package org.ofdrw.crypto.integrity;\n",
      "\n",
      "import org.apache.commons.io.FileUtils;\n",
      "import org.apache.commons.io.FilenameUtils;\n",
      "import org.jetbrains.annotations.NotNull;\n",
      "import org.ofdrw.core.basicType.ST_Loc;\n",
      "import org.ofdrw.core.integrity.FileList;\n",
      "import org.ofdrw.core.integrity.OFDEntries;\n",
      "import org.ofdrw.gv.GlobalVar;\n",
      "import org.ofdrw.pkg.container.OFDDir;\n",
      "import org.ofdrw.pkg.tool.ElemCup;\n",
      "import org.ofdrw.reader.ZipUtil;\n",
      "\n",
      "import java.io.Closeable;\n",
      "import java.io.File;\n",
      "import java.io.IOException;\n",
      "import java.nio.file.FileVisitResult;\n",
      "import java.nio.file.Files;\n",
      "import java.nio.file.Path;\n",
      "import java.nio.file.SimpleFileVisitor;\n",
      "import java.nio.file.attribute.BasicFileAttributes;\n",
      "import java.security.GeneralSecurityException;\n",
      "import java.time.LocalDateTime;\n",
      "import java.util.concurrent.atomic.AtomicInteger;\n",
      "\n",
      "/**\n",
      " * OFD\u5b8c\u6574\u6027\u4fdd\u62a4\u534f\u8bae\u5b9e\u73b0\n",
      " *\n",
      " * @author \u6743\u89c2\u5b87\n",
      " * @since 2021-08-17 19:41:53\n",
      " */\n",
      "public class OFDIntegrity implements Closeable {\n",
      "    /**\n",
      "     * OFD\u865a\u62df\u5bb9\u5668\u6839\u76ee\u5f55\n",
      "     */\n",
      "    private OFDDir ofdDir;\n",
      "\n",
      "    /**\n",
      "     * \u52a0\u5bc6\u540e\u6587\u4ef6\u8f93\u51fa\u4f4d\u7f6e\n",
      "     */\n",
      "    private Path dest;\n",
      "\n",
      "    /**\n",
      "     * \u5de5\u4f5c\u8fc7\u7a0b\u4e2d\u7684\u5de5\u4f5c\u76ee\u5f55\n",
      "     * <p>\n",
      "     * \u7528\u4e8e\u5b58\u653e\u89e3\u538b\u540e\u7684OFD\u6587\u6863\u5bb9\u5668\u5185\u5bb9\n",
      "     */\n",
      "    private Path workDir;\n",
      "\n",
      "    private boolean closed;\n",
      "\n",
      "    private AtomicInteger idProvider;\n",
      "\n",
      "    public OFDIntegrity(@NotNull Path ofdFile, @NotNull Path dest) throws IOException {\n",
      "        if (ofdFile == null || Files.notExists(ofdFile)) {\n",
      "            throw new IllegalArgumentException(\"\u5f85\u4fdd\u62a4\u6587\u4ef6\u4f4d\u7f6e(ofdFile)\u4e0d\u6b63\u786e\");\n",
      "        }\n",
      "        if (dest == null) {\n",
      "            throw new IllegalArgumentException(\"\u5b8c\u6574\u6027\u4fdd\u62a4\u6587\u4ef6\u8f93\u51fa\u4f4d\u7f6e(out)\u4e3a\u7a7a\");\n",
      "        }\n",
      "        idProvider = new AtomicInteger(0);\n",
      "        this.dest = dest;\n",
      "        this.workDir = Files.createTempDirectory(\"ofd-tmp-\");\n",
      "        // \u89e3\u538b\u6587\u6863\uff0c\u5230\u4e34\u65f6\u7684\u5de5\u4f5c\u76ee\u5f55\n",
      "        ZipUtil.unZipFiles(ofdFile.toFile(), this.workDir.toAbsolutePath() + File.separator);\n",
      "        this.ofdDir = new OFDDir(workDir.toAbsolutePath());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u5bf9\u6587\u4ef6\u5b9e\u884c\u5b8c\u6574\u6027\u4fdd\u62a4\n",
      "     * <p>\n",
      "     * \u8bf7\u5728\u5b8c\u6210\u4fdd\u62a4\u540e\u52a1\u5fc5\u8c03\u7528{@link #close()} \u4ee5\u6e05\u9664\u5de5\u4f5c\u8fc7\u7a0b\u4e2d\u7684\u4e34\u65f6\u6587\u4ef6\uff01\n",
      "     *\n",
      "     * @param signer \u7b7e\u540d\u5b9e\u73b0\n",
      "     * @throws IOException IO\u64cd\u4f5c\u5f02\u5e38\n",
      "     * @throws GeneralSecurityException \u5bc6\u7801\u8fd0\u7b97\u76f8\u5173\u95ee\u9898\n",
      "     */\n",
      "    public void protect(@NotNull ProtectSigner signer) throws IOException, GeneralSecurityException {\n",
      "        if (signer == null) {\n",
      "            throw new IllegalArgumentException(\"\u8bf7\u63d0\u4f9b \u7b7e\u540d\u5b9e\u73b0\");\n",
      "        }\n",
      "        final FileList fileList = new FileList();\n",
      "        final OFDEntries ofdEntries = new OFDEntries()\n",
      "                .setID(String.valueOf(this.idProvider.incrementAndGet()))\n",
      "                .setCreatorName(\"ofdrw-crypto\")\n",
      "                .setVersion(GlobalVar.Version)\n",
      "                .setCreationDate(LocalDateTime.now());\n",
      "\n",
      "        ofdEntries.setSignedValueLoc(ST_Loc.getInstance(\"/signedvalue.dat\"))\n",
      "                .setFileList(fileList);\n",
      "\n",
      "        Path ofdEntriesPath = this.workDir.resolve(\"OFDEntries.xml\");\n",
      "        Path signedValuePath = this.workDir.resolve(\"signedvalue.dat\");\n",
      "        // a) \u786e\u8ba4\u6587\u4ef6\u5305\u5185\u7684\u6240\u6709\u6587\u4ef6\n",
      "        // \u6587\u4ef6\u7cfb\u7edf\u4e2d\u7684\u5bb9\u5668Unix\u7c7b\u578b\u7edd\u5bf9\u8def\u5f84\uff0c\u5982\uff1a\"/home/root/tmp\"\n",
      "        String sysRoot = FilenameUtils.separatorsToUnix(this.workDir.toAbsolutePath().toString());\n",
      "        Files.walkFileTree(this.workDir, new SimpleFileVisitor<Path>() {\n",
      "            @Override\n",
      "            public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) {\n",
      "                // \u8def\u5f84\u8f6c\u6362\u4e3aUnix\u7c7b\u578b\u7684\u7edd\u5bf9\u8def\u5f84\n",
      "                String abxFilePath = FilenameUtils.separatorsToUnix(file.toAbsolutePath().toString());\n",
      "                // \u66ff\u6362\u6587\u4ef6\u7cfb\u7edf\u7684\u6839\u8def\u5f84\uff0c\u8fd9\u6837\u5c31\u4e3a\u5bb9\u5668\u7cfb\u7edf\u4e2d\u7684\u7edd\u5bf9\u8def\u5f84\n",
      "                abxFilePath = abxFilePath.replace(sysRoot, \"\");\n",
      "                String id = String.valueOf(idProvider.incrementAndGet());\n",
      "                // b) \u7ec4\u88c5 \u7b7e\u540d\u5b8c\u6574\u6027\u4fdd\u62a4\u6587\u4ef6\n",
      "                fileList.addFile(id, abxFilePath);\n",
      "                return FileVisitResult.CONTINUE;\n",
      "            }\n",
      "        });\n",
      "        // \u628a\u6e05\u5355\u5199\u5165\u6587\u4ef6\n",
      "        ElemCup.dump(ofdEntries, ofdEntriesPath);\n",
      "        // c) \u6839\u636e\u7b7e\u540d\u65b9\u6848\uff0c\u8ba1\u7b97\u5b8c\u6574\u6027\u4fdd\u62a4\u6587\u4ef6\u7684\u6742\u51d1\u503c\uff1b\n",
      "        // d) \u6839\u636e\u7b7e\u540d\u65b9\u6848\uff0c\u4f7f\u7528\u7248\u5f0f\u6587\u4ef6\u5408\u6210\u8005\u7684\u7b7e\u540d\u79c1\u94a5\u5bf9\u6742\u51d1\u503c\u8fdb\u884c\u6570\u5b57\u7b7e\u540d\uff1b\n",
      "        // \u6267\u884c\u7b7e\u540d\n",
      "        final byte[] signature = signer.digestThenSign(ofdEntriesPath);\n",
      "        // e) \u5c06\u6570\u5b57\u7b7e\u540d\u7ed3\u679c\u5199\u5165\u7b7e\u540d\u503c\u6587\u4ef6\n",
      "        // \u628a\u7b7e\u540d\u503c\u5199\u5165\u6587\u4ef6\n",
      "        Files.write(signedValuePath, signature);\n",
      "        // \u6267\u884c\u6253\u5305\u7a0b\u5e8f\n",
      "        this.ofdDir.jar(dest);\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u8bf7\u52a1\u5fc5\u5728\u7a0b\u5e8f\u7ed3\u675f\u65f6\u8c03\u7528\u8be5\u65b9\u6cd5\u91ca\u653e\n",
      "     * <p>\n",
      "     * \u5de5\u4f5c\u8fc7\u7a0b\u4e2d\u4ea7\u751f\u7684\u4e34\u65f6\u6587\u4ef6\n",
      "     *\n",
      "     * @throws IOException \u6587\u4ef6\u5220\u9664IO\u5f02\u5e38\n",
      "     */\n",
      "    @Override\n",
      "    public void close() throws IOException {\n",
      "        if (closed) {\n",
      "            return;\n",
      "        }\n",
      "        closed = true;\n",
      "        if (workDir != null && Files.exists(workDir)) {\n",
      "            try {\n",
      "                FileUtils.deleteDirectory(workDir.toFile());\n",
      "            } catch (IOException e) {\n",
      "                throw new IOException(\"\u65e0\u6cd5\u5220\u9664Reader\u7684\u5de5\u4f5c\u7a7a\u95f4\uff0c\u539f\u56e0\uff1a\" + e.getMessage(), e);\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package org.ofdrw.crypto.integrity;\n",
      "\n",
      "import org.bouncycastle.jce.provider.BouncyCastleProvider;\n",
      "import org.junit.jupiter.api.Test;\n",
      "import org.ofdrw.crypto.OFDEncryptor;\n",
      "import org.ofdrw.crypto.enryptor.UserFEKEncryptor;\n",
      "import org.ofdrw.crypto.enryptor.UserPasswordEncryptor;\n",
      "import org.ofdrw.gm.cert.PEMLoader;\n",
      "\n",
      "import java.io.IOException;\n",
      "import java.nio.file.Path;\n",
      "import java.nio.file.Paths;\n",
      "import java.security.GeneralSecurityException;\n",
      "import java.security.PrivateKey;\n",
      "import java.security.Security;\n",
      "import java.security.cert.Certificate;\n",
      "\n",
      "import static org.junit.jupiter.api.Assertions.*;\n",
      "\n",
      "/**\n",
      " * OFD\u5b8c\u6574\u6027\u4fdd\u62a4\u534f\u8bae\n",
      " *\n",
      " * @author \u6743\u89c2\u5b87\n",
      " * @since 2021-08-17 20:09:59\n",
      " */\n",
      "class OFDIntegrityTest {\n",
      "\n",
      "    /**\n",
      "     * \u5b8c\u6574\u6027\u4fdd\u62a4\u793a\u4f8b\n",
      "     */\n",
      "    @Test\n",
      "    void protect() throws IOException, GeneralSecurityException {\n",
      "        Security.addProvider(new BouncyCastleProvider());\n",
      "\n",
      "        Path src = Paths.get(\"src/test/resources/hello.ofd\");\n",
      "        Path out = Paths.get(\"target/hello-integrity.ofd\");\n",
      "\n",
      "        Path certPemFile = Paths.get(\"src/test/resources\", \"sign_cert.pem\");\n",
      "        Path keyPemFile = Paths.get(\"src/test/resources\", \"sign_key.pem\");\n",
      "\n",
      "        // 1. \u51c6\u5907 \u7b7e\u540d\u79c1\u94a5 \u548c \u7b7e\u540d\u8bc1\u4e66\n",
      "        final PrivateKey privateKey = PEMLoader.loadPrivateKey(keyPemFile);\n",
      "        final Certificate certificate = PEMLoader.loadCert(certPemFile);\n",
      "\n",
      "        // 2. \u521b\u5efa\u5b8c\u6574\u6027\u4fdd\u62a4\u5bf9\u8c61\n",
      "        try (OFDIntegrity ofdIntegrity = new OFDIntegrity(src, out)) {\n",
      "            // 3. \u521b\u5efa\u7b7e\u540d\u5b9e\u73b0\u5bb9\u5668\n",
      "            GMProtectSigner gmSigner = new GMProtectSigner(privateKey, certificate);\n",
      "            // 4. \u6267\u884c\u5b8c\u6574\u6027\u4fdd\u62a4\n",
      "            ofdIntegrity.protect(gmSigner);\n",
      "        }\n",
      "        // 5. \u5173\u95ed\u5bf9\u8c61\uff0c\u6e05\u9664\u4e34\u65f6\u6587\u4ef6 try()\n",
      "        System.out.println(\">> \" + out.toAbsolutePath());\n",
      "    }\n",
      "}"
    ],
    "method_lines_dic": {
      "OFDIntegrity::::protect(org.ofdrw.crypto.integrity.ProtectSigner)": [
        78,
        121
      ],
      "OFDIntegrity::::close()": [
        131,
        144
      ]
    },
    "test_method_lines_dic": {
      "OFDIntegrityTest::::protect()": [
        31,
        54
      ]
    },
    "reverse_method_lines_dic": {
      "78": "OFDIntegrity::::protect(org.ofdrw.crypto.integrity.ProtectSigner)",
      "79": "OFDIntegrity::::protect(org.ofdrw.crypto.integrity.ProtectSigner)",
      "80": "OFDIntegrity::::protect(org.ofdrw.crypto.integrity.ProtectSigner)",
      "81": "OFDIntegrity::::protect(org.ofdrw.crypto.integrity.ProtectSigner)",
      "82": "OFDIntegrity::::protect(org.ofdrw.crypto.integrity.ProtectSigner)",
      "83": "OFDIntegrity::::protect(org.ofdrw.crypto.integrity.ProtectSigner)",
      "84": "OFDIntegrity::::protect(org.ofdrw.crypto.integrity.ProtectSigner)",
      "85": "OFDIntegrity::::protect(org.ofdrw.crypto.integrity.ProtectSigner)",
      "86": "OFDIntegrity::::protect(org.ofdrw.crypto.integrity.ProtectSigner)",
      "87": "OFDIntegrity::::protect(org.ofdrw.crypto.integrity.ProtectSigner)",
      "88": "OFDIntegrity::::protect(org.ofdrw.crypto.integrity.ProtectSigner)",
      "89": "OFDIntegrity::::protect(org.ofdrw.crypto.integrity.ProtectSigner)",
      "90": "OFDIntegrity::::protect(org.ofdrw.crypto.integrity.ProtectSigner)",
      "91": "OFDIntegrity::::protect(org.ofdrw.crypto.integrity.ProtectSigner)",
      "92": "OFDIntegrity::::protect(org.ofdrw.crypto.integrity.ProtectSigner)",
      "93": "OFDIntegrity::::protect(org.ofdrw.crypto.integrity.ProtectSigner)",
      "94": "OFDIntegrity::::protect(org.ofdrw.crypto.integrity.ProtectSigner)",
      "95": "OFDIntegrity::::protect(org.ofdrw.crypto.integrity.ProtectSigner)",
      "96": "OFDIntegrity::::protect(org.ofdrw.crypto.integrity.ProtectSigner)",
      "97": "OFDIntegrity::::protect(org.ofdrw.crypto.integrity.ProtectSigner)",
      "98": "OFDIntegrity::::protect(org.ofdrw.crypto.integrity.ProtectSigner)",
      "99": "OFDIntegrity::::protect(org.ofdrw.crypto.integrity.ProtectSigner)",
      "100": "OFDIntegrity::::protect(org.ofdrw.crypto.integrity.ProtectSigner)",
      "101": "OFDIntegrity::::protect(org.ofdrw.crypto.integrity.ProtectSigner)",
      "102": "OFDIntegrity::::protect(org.ofdrw.crypto.integrity.ProtectSigner)",
      "103": "OFDIntegrity::::protect(org.ofdrw.crypto.integrity.ProtectSigner)",
      "104": "OFDIntegrity::::protect(org.ofdrw.crypto.integrity.ProtectSigner)",
      "105": "OFDIntegrity::::protect(org.ofdrw.crypto.integrity.ProtectSigner)",
      "106": "OFDIntegrity::::protect(org.ofdrw.crypto.integrity.ProtectSigner)",
      "107": "OFDIntegrity::::protect(org.ofdrw.crypto.integrity.ProtectSigner)",
      "108": "OFDIntegrity::::protect(org.ofdrw.crypto.integrity.ProtectSigner)",
      "109": "OFDIntegrity::::protect(org.ofdrw.crypto.integrity.ProtectSigner)",
      "110": "OFDIntegrity::::protect(org.ofdrw.crypto.integrity.ProtectSigner)",
      "111": "OFDIntegrity::::protect(org.ofdrw.crypto.integrity.ProtectSigner)",
      "112": "OFDIntegrity::::protect(org.ofdrw.crypto.integrity.ProtectSigner)",
      "113": "OFDIntegrity::::protect(org.ofdrw.crypto.integrity.ProtectSigner)",
      "114": "OFDIntegrity::::protect(org.ofdrw.crypto.integrity.ProtectSigner)",
      "115": "OFDIntegrity::::protect(org.ofdrw.crypto.integrity.ProtectSigner)",
      "116": "OFDIntegrity::::protect(org.ofdrw.crypto.integrity.ProtectSigner)",
      "117": "OFDIntegrity::::protect(org.ofdrw.crypto.integrity.ProtectSigner)",
      "118": "OFDIntegrity::::protect(org.ofdrw.crypto.integrity.ProtectSigner)",
      "119": "OFDIntegrity::::protect(org.ofdrw.crypto.integrity.ProtectSigner)",
      "120": "OFDIntegrity::::protect(org.ofdrw.crypto.integrity.ProtectSigner)",
      "121": "OFDIntegrity::::protect(org.ofdrw.crypto.integrity.ProtectSigner)",
      "131": "OFDIntegrity::::close()",
      "132": "OFDIntegrity::::close()",
      "133": "OFDIntegrity::::close()",
      "134": "OFDIntegrity::::close()",
      "135": "OFDIntegrity::::close()",
      "136": "OFDIntegrity::::close()",
      "137": "OFDIntegrity::::close()",
      "138": "OFDIntegrity::::close()",
      "139": "OFDIntegrity::::close()",
      "140": "OFDIntegrity::::close()",
      "141": "OFDIntegrity::::close()",
      "142": "OFDIntegrity::::close()",
      "143": "OFDIntegrity::::close()",
      "144": "OFDIntegrity::::close()"
    },
    "test_reverse_method_lines_dic": {
      "31": "OFDIntegrityTest::::protect()",
      "32": "OFDIntegrityTest::::protect()",
      "33": "OFDIntegrityTest::::protect()",
      "34": "OFDIntegrityTest::::protect()",
      "35": "OFDIntegrityTest::::protect()",
      "36": "OFDIntegrityTest::::protect()",
      "37": "OFDIntegrityTest::::protect()",
      "38": "OFDIntegrityTest::::protect()",
      "39": "OFDIntegrityTest::::protect()",
      "40": "OFDIntegrityTest::::protect()",
      "41": "OFDIntegrityTest::::protect()",
      "42": "OFDIntegrityTest::::protect()",
      "43": "OFDIntegrityTest::::protect()",
      "44": "OFDIntegrityTest::::protect()",
      "45": "OFDIntegrityTest::::protect()",
      "46": "OFDIntegrityTest::::protect()",
      "47": "OFDIntegrityTest::::protect()",
      "48": "OFDIntegrityTest::::protect()",
      "49": "OFDIntegrityTest::::protect()",
      "50": "OFDIntegrityTest::::protect()",
      "51": "OFDIntegrityTest::::protect()",
      "52": "OFDIntegrityTest::::protect()",
      "53": "OFDIntegrityTest::::protect()",
      "54": "OFDIntegrityTest::::protect()"
    },
    "tests": [
      {
        "test_lines": [
          31,
          54
        ],
        "covered_lines": [
          54,
          55,
          58,
          61,
          62,
          63,
          65,
          66,
          67,
          79,
          82,
          83,
          84,
          85,
          86,
          87,
          89,
          90,
          92,
          93,
          96,
          97,
          101,
          103,
          104,
          106,
          107,
          111,
          115,
          118,
          120,
          121,
          133,
          136,
          137,
          139,
          142,
          144
        ]
      }
    ]
  }
}