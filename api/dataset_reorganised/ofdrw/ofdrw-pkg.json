{"/bernard/dataset_construction/prep/repos/ofdrw/ofdrw-pkg/src/main/java/org/ofdrw/pkg/tool/OFDNameSpaceModifier.java": {"class_content": ["package org.ofdrw.pkg.tool;\n", "\n", "import org.dom4j.Document;\n", "import org.dom4j.Element;\n", "import org.dom4j.Namespace;\n", "import org.dom4j.VisitorSupport;\n", "import org.dom4j.tree.DefaultElement;\n", "import org.ofdrw.core.Const;\n", "\n", "/**\n", " * \u547d\u540d\u7a7a\u95f4\u53d8\u66f4\n", " *\n", " * @author \u6743\u89c2\u5b87\n", " * @since 2020-10-15 20:01:20\n", " */\n", "public class OFDNameSpaceModifier extends VisitorSupport {\n", "    /**\n", "     * \u671f\u671b\u53d8\u66f4\u7684\u547d\u540d\u7a7a\u95f4\n", "     */\n", "    private Namespace expectNs;\n", "\n", "    /**\n", "     * \u6307\u5b9a\u53d8\u66f4\u7684\u547d\u540d\u7a7a\u95f4\n", "     *\n", "     * @param namespace \u671f\u671b\u53d8\u66f4\u7684\u65b0\u7684\u547d\u540d\u7a7a\u95f4\n", "     */\n", "    public OFDNameSpaceModifier(Namespace namespace) {\n", "        if (namespace == null) {\n", "            namespace = Const.OFD_NAMESPACE;\n", "        }\n", "        expectNs = namespace;\n", "    }\n", "\n", "    /**\n", "     * \u4f7f\u7528\u9ed8\u8ba4\u7684\u547d\u540d\u7a7a\u95f4\u53d8\u66f4\u5143\u7d20\u7684\u547d\u540d\u7a7a\u95f4\n", "     * <p>\n", "     * \u9ed8\u8ba4\u547d\u540d\u7a7a\u95f4\u4e3a: xmlns:ofd=\"http://www.ofdspec.org/2016\n", "     */\n", "    public OFDNameSpaceModifier() {\n", "        this(Const.OFD_NAMESPACE);\n", "    }\n", "\n", "    /**\n", "     * \u6839\u8282\u70b9\u904d\u5386\n", "     *\n", "     * @param document \u6839\u8282\u70b9\u5bf9\u8c61\n", "     */\n", "    public void visit(Document document) {\n", "        final DefaultElement rootElement = (DefaultElement) document.getRootElement();\n", "        if (rootElement == null) {\n", "            return;\n", "        }\n", "        // \u5982\u679c\u547d\u540d\u7a7a\u95f4\u4e0d\u540c\uff0c\u90a3\u4e48\u66f4\u65b0\u547d\u540d\u7a7a\u95f4\n", "        if(!nsEqual(rootElement)){\n", "            rootElement.setNamespace(this.expectNs);\n", "            rootElement.additionalNamespaces().clear();\n", "        }\n", "    }\n", "\n", "    /**\n", "     * \u547d\u540d\u7a7a\u95f4\u904d\u5386\n", "     *\n", "     * @param namespace \u547d\u540d\u7a7a\u95f4\n", "     */\n", "    public void visit(Namespace namespace) {\n", "        // \u5220\u9664\u547d\u540d\u7a7a\u95f4\n", "        namespace.detach();\n", "    }\n", "\n", "\n", "//    public void visit(Attribute node) {\n", "//        if (node.toString().contains(\"xmlns\") || node.toString().contains(\"ofd:\")) {\n", "//            node.detach();\n", "//        }\n", "//    }\n", "\n", "    /**\n", "     * \u6839\u8282\u70b9\u4e0b\u7684\u5b50\u8282\u70b9\u904d\u5386\n", "     *\n", "     * @param node \u5b50\u8282\u70b9\n", "     */\n", "    public void visit(Element node) {\n", "        if (node instanceof DefaultElement) {\n", "            final DefaultElement element = (DefaultElement) node;\n", "            if (!nsEqual(element)){\n", "                element.setNamespace(this.expectNs);\n", "            }\n", "        }\n", "    }\n", "\n", "    public Namespace getExpectNs() {\n", "        return expectNs;\n", "    }\n", "\n", "    /**\n", "     * \u547d\u540d\u7a7a\u95f4\u662f\u5426\u4e00\u81f4\n", "     *\n", "     * @param e \u9700\u8981\u6bd4\u8f83\u7684\u5143\u7d20\n", "     * @return true - \u4e00\u81f4\uff1bfalse - \u4e0d\u4e00\u81f4\n", "     */\n", "    private boolean nsEqual(Element e) {\n", "        final Namespace n = e.getNamespace();\n", "        return expectNs.getPrefix().equals(n.getPrefix()) && expectNs.getText().equals(n.getText());\n", "    }\n", "}\n"], "test_content": ["package org.ofdrw.pkg.tool;\n", "\n", "import org.dom4j.Document;\n", "import org.dom4j.DocumentException;\n", "import org.dom4j.io.SAXReader;\n", "import org.junit.jupiter.api.Test;\n", "\n", "import static org.junit.jupiter.api.Assertions.*;\n", "\n", "/**\n", " * @author \u6743\u89c2\u5b87\n", " * @since 2021-07-27 20:01:26\n", " */\n", "class OFDNameSpaceModifierTest {\n", "\n", "    @Test\n", "    void visit() throws DocumentException {\n", "        String src = \"src/test/resources/namespace_case.xml\";\n", "        SAXReader reader = new SAXReader();\n", "        Document document = reader.read(src);\n", "\n", "        // \u4fee\u6539\u5df2\u7ecf\u5b58\u5728\u7684\u547d\u540d\u7a7a\u95f4\u4e3a\u6307\u5b9a\u547d\u540d\u7a7a\u95f4\n", "        document.accept(new OFDNameSpaceModifier());\n", "        System.out.println(document.asXML());\n", "    }\n", "}"], "method_lines_dic": {"OFDNameSpaceModifier::::getExpectNs()": [91, 93]}, "test_method_lines_dic": {"OFDNameSpaceModifierTest::::visit()": [16, 25]}, "reverse_method_lines_dic": {"91": "OFDNameSpaceModifier::::getExpectNs()", "92": "OFDNameSpaceModifier::::getExpectNs()", "93": "OFDNameSpaceModifier::::getExpectNs()"}, "test_reverse_method_lines_dic": {"16": "OFDNameSpaceModifierTest::::visit()", "17": "OFDNameSpaceModifierTest::::visit()", "18": "OFDNameSpaceModifierTest::::visit()", "19": "OFDNameSpaceModifierTest::::visit()", "20": "OFDNameSpaceModifierTest::::visit()", "21": "OFDNameSpaceModifierTest::::visit()", "22": "OFDNameSpaceModifierTest::::visit()", "23": "OFDNameSpaceModifierTest::::visit()", "24": "OFDNameSpaceModifierTest::::visit()", "25": "OFDNameSpaceModifierTest::::visit()"}, "tests": [{"test_lines": [16, 25], "covered_lines": [27, 28, 31, 32, 40, 41, 49, 50, 54, 55, 56, 58, 83, 84, 85, 86, 89, 102, 103]}]}, "/bernard/dataset_construction/prep/repos/ofdrw/ofdrw-pkg/src/main/java/org/ofdrw/pkg/container/TempsDir.java": {"class_content": ["package org.ofdrw.pkg.container;\n", "\n", "import org.dom4j.DocumentException;\n", "import org.dom4j.Element;\n", "import org.ofdrw.core.Holder;\n", "import org.ofdrw.core.basicStructure.pageObj.Page;\n", "import org.ofdrw.core.basicType.ST_Loc;\n", "\n", "import java.io.FileNotFoundException;\n", "import java.io.IOException;\n", "import java.nio.file.Files;\n", "import java.nio.file.Path;\n", "import java.util.regex.Pattern;\n", "import java.util.stream.Stream;\n", "\n", "/**\n", " * \u6a21\u677f\u6587\u4ef6\u5b58\u653e\u76ee\u5f55\n", " *\n", " * @author \u6743\u89c2\u5b87\n", " * @since 2020-4-3 19:41:32\n", " */\n", "public class TempsDir extends VirtualContainer {\n", "\n", "    public static final String TempFilePrefix = \"Temp_\";\n", "\n", "    public static final Pattern TempFileNameRegex = Pattern.compile(\"Temp_(\\\\d+).xml\");\n", "\n", "    private int maxTempIndex = -1;\n", "\n", "    public TempsDir(Path fullDir) throws IllegalArgumentException {\n", "        super(fullDir);\n", "    }\n", "\n", "    /**\n", "     * \u5411\u76ee\u5f55\u4e2d\u52a0\u5165\u6a21\u677f\u6587\u4ef6\n", "     * <p>\n", "     * \u52a0\u5165\u7684\u8d44\u6e90\u5c06\u4f1a\u88ab\u590d\u5236\u5230\u6307\u5b9a\u76ee\u5f55\uff0c\u4e0e\u539f\u6709\u6587\u4ef6\n", "     *\n", "     * @param res \u8d44\u6e90\n", "     * @return this\n", "     * @throws IOException \u6587\u4ef6\u590d\u5236\u8fc7\u7a0b\u4e2d\u53d1\u751f\u7684\u5f02\u5e38\n", "     */\n", "    public TempsDir add(Path res) throws IOException {\n", "        if (Files.notExists(res)) {\n", "            return this;\n", "        }\n", "        this.putFile(res);\n", "        return this;\n", "    }\n", "\n", "    /**\n", "     * \u5411\u76ee\u5f55\u4e2d\u52a0\u5165\u6a21\u677f\u9875\u9762\n", "     *\n", "     * @param fileName \u6a21\u677f\u6587\u4ef6\u540d\u79f0\n", "     * @param page     \u6a21\u677f\u9875\u9762\n", "     * @return \u52a0\u5165\u9875\u9762\u7684\u5bb9\u5668\u5185\u7edd\u5bf9\u8def\u5f84\n", "     */\n", "    public ST_Loc add(String fileName, Page page) {\n", "        this.putObj(fileName, page);\n", "        return this.getAbsLoc().cat(fileName);\n", "    }\n", "\n", "    /**\n", "     * \u5411\u5bb9\u5668\u5185\u52a0\u5165\u6a21\u677f\n", "     *\n", "     * @param page \u6a21\u677f\u9875\u9762\n", "     * @return \u6a21\u677f\u7684\u5bb9\u5668\u5185\u7edd\u5bf9\u8def\u5f84\n", "     * @throws IOException \u6587\u4ef6\u8bfb\u5199\u5f02\u5e38\n", "     */\n", "    public ST_Loc add(Page page) throws IOException {\n", "        if (page == null) {\n", "            return null;\n", "        }\n", "        this.maxTempIndex = getMaxTempIndex() + 1;\n", "        String fileName = String.format(\"%s%d.xml\", TempFilePrefix, maxTempIndex);\n", "        return add(fileName, page);\n", "    }\n", "\n", "    /**\n", "     * \u6839\u636e\u6587\u4ef6\u540d\u83b7\u53d6\u6a21\u677f\u9875\u9762\u5bf9\u8c61\n", "     *\n", "     * @param fileName \u6587\u4ef6\u540d\n", "     * @return \u6a21\u677f\u539f\u9875\u9762\n", "     * @throws DocumentException     \u6587\u6863\u65e0\u6cd5\u89e3\u6790\n", "     * @throws FileNotFoundException \u6587\u4ef6\u4e0d\u5b58\u5728\n", "     */\n", "    public Page get(String fileName) throws DocumentException, FileNotFoundException {\n", "        final Element element = this.getObj(fileName);\n", "        return new Page(element);\n", "    }\n", "\n", "    /**\n", "     * \u83b7\u53d6\u5f53\u524d\u5bb9\u5668\u5185\u6700\u5927\u7684\u6a21\u677f\u6587\u4ef6\u7d22\u5f15\u53f7\n", "     *\n", "     * @return \u7d22\u5f15\u6570\u5b57\n", "     * @throws IOException \u6587\u4ef6\u8bfb\u53d6\u5f02\u5e38\n", "     */\n", "    public Integer getMaxTempIndex() throws IOException {\n", "        if (maxTempIndex < 0) {\n", "            Holder<Integer> maxIndexHolder = new Holder<>(-1);\n", "            try (Stream<Path> stream = Files.list(this.getContainerPath())) {\n", "                stream.forEach((item) -> {\n", "                    String fileName = item.getFileName().toString().toLowerCase();\n", "                    // \u4e0d\u662f\u76ee\u5f55 \u5e76\u4e14 \u6587\u4ef6\u540d\u4ee5 Annot_ \u5f00\u5934\n", "                    if (fileName.startsWith(TempFilePrefix.toLowerCase())) {\n", "                        String numStr = fileName.replace(TempFilePrefix.toLowerCase(), \"\")\n", "                                .split(\"\\\\.\")[0];\n", "                        try {\n", "                            int n = Integer.parseInt(numStr);\n", "                            if (n > maxIndexHolder.value) {\n", "                                maxIndexHolder.value = n;\n", "                            }\n", "                        } catch (NumberFormatException e) {\n", "                            // ignore\n", "                        }\n", "                    }\n", "                });\n", "            }\n", "            maxTempIndex = maxIndexHolder.value;\n", "        }\n", "        return maxTempIndex;\n", "    }\n", "}\n"], "test_content": ["package org.ofdrw.pkg.container;\n", "\n", "import org.junit.jupiter.api.Test;\n", "\n", "import java.util.regex.Matcher;\n", "\n", "import static org.junit.jupiter.api.Assertions.*;\n", "\n", "/**\n", " * @author \u6743\u89c2\u5b87\n", " * @since 2021-06-17 18:58:51\n", " */\n", "class TempsDirTest {\n", "\n", "\n", "    @Test\n", "    public void testRegx() throws Exception {\n", "        String c1 = \"Temp_0.xml\";\n", "        Matcher m = TempsDir.TempFileNameRegex.matcher(c1);\n", "        assertTrue(m.find());\n", "        System.out.println(m.group(1));\n", "\n", "        String c2 = \"Temp_NN.xml\";\n", "        m = TempsDir.TempFileNameRegex.matcher(c2);\n", "        assertFalse(m.find());\n", "\n", "        String c3 = \"some_page.xml\";\n", "        m = TempsDir.TempFileNameRegex.matcher(c3);\n", "        assertFalse(m.find());\n", "    }\n", "}"], "method_lines_dic": {"TempsDir::::add(java.nio.file.Path)": [43, 49], "TempsDir::::get(java.lang.String)": [87, 90], "TempsDir::::getMaxTempIndex()": [98, 122]}, "test_method_lines_dic": {"TempsDirTest::::testRegx()": [16, 30]}, "reverse_method_lines_dic": {"43": "TempsDir::::add(java.nio.file.Path)", "44": "TempsDir::::add(java.nio.file.Path)", "45": "TempsDir::::add(java.nio.file.Path)", "46": "TempsDir::::add(java.nio.file.Path)", "47": "TempsDir::::add(java.nio.file.Path)", "48": "TempsDir::::add(java.nio.file.Path)", "49": "TempsDir::::add(java.nio.file.Path)", "87": "TempsDir::::get(java.lang.String)", "88": "TempsDir::::get(java.lang.String)", "89": "TempsDir::::get(java.lang.String)", "90": "TempsDir::::get(java.lang.String)", "98": "TempsDir::::getMaxTempIndex()", "99": "TempsDir::::getMaxTempIndex()", "100": "TempsDir::::getMaxTempIndex()", "101": "TempsDir::::getMaxTempIndex()", "102": "TempsDir::::getMaxTempIndex()", "103": "TempsDir::::getMaxTempIndex()", "104": "TempsDir::::getMaxTempIndex()", "105": "TempsDir::::getMaxTempIndex()", "106": "TempsDir::::getMaxTempIndex()", "107": "TempsDir::::getMaxTempIndex()", "108": "TempsDir::::getMaxTempIndex()", "109": "TempsDir::::getMaxTempIndex()", "110": "TempsDir::::getMaxTempIndex()", "111": "TempsDir::::getMaxTempIndex()", "112": "TempsDir::::getMaxTempIndex()", "113": "TempsDir::::getMaxTempIndex()", "114": "TempsDir::::getMaxTempIndex()", "115": "TempsDir::::getMaxTempIndex()", "116": "TempsDir::::getMaxTempIndex()", "117": "TempsDir::::getMaxTempIndex()", "118": "TempsDir::::getMaxTempIndex()", "119": "TempsDir::::getMaxTempIndex()", "120": "TempsDir::::getMaxTempIndex()", "121": "TempsDir::::getMaxTempIndex()", "122": "TempsDir::::getMaxTempIndex()"}, "test_reverse_method_lines_dic": {"16": "TempsDirTest::::testRegx()", "17": "TempsDirTest::::testRegx()", "18": "TempsDirTest::::testRegx()", "19": "TempsDirTest::::testRegx()", "20": "TempsDirTest::::testRegx()", "21": "TempsDirTest::::testRegx()", "22": "TempsDirTest::::testRegx()", "23": "TempsDirTest::::testRegx()", "24": "TempsDirTest::::testRegx()", "25": "TempsDirTest::::testRegx()", "26": "TempsDirTest::::testRegx()", "27": "TempsDirTest::::testRegx()", "28": "TempsDirTest::::testRegx()", "29": "TempsDirTest::::testRegx()", "30": "TempsDirTest::::testRegx()"}, "tests": [{"test_lines": [16, 30], "covered_lines": [26]}]}, "/bernard/dataset_construction/prep/repos/ofdrw/ofdrw-pkg/src/main/java/org/ofdrw/pkg/container/VirtualContainer.java": {"class_content": ["package org.ofdrw.pkg.container;\n", "\n", "import org.apache.commons.io.FileUtils;\n", "import org.bouncycastle.jcajce.provider.digest.SM3;\n", "import org.dom4j.DocumentException;\n", "import org.dom4j.Element;\n", "import org.ofdrw.core.DefaultElementProxy;\n", "import org.ofdrw.core.basicType.ST_Loc;\n", "import org.ofdrw.pkg.tool.ElemCup;\n", "\n", "import java.io.*;\n", "import java.nio.file.Files;\n", "import java.nio.file.Path;\n", "import java.nio.file.Paths;\n", "import java.nio.file.StandardOpenOption;\n", "import java.security.MessageDigest;\n", "import java.text.SimpleDateFormat;\n", "import java.util.Arrays;\n", "import java.util.Date;\n", "import java.util.HashMap;\n", "import java.util.Map;\n", "import java.util.function.Function;\n", "\n", "/**\n", " * \u865a\u62df\u5bb9\u5668\u5bf9\u8c61\n", " *\n", " * @author \u6743\u89c2\u5b87\n", " * @since 2020-04-02 19:01:04\n", " */\n", "public class VirtualContainer implements Closeable {\n", "\n", "    /**\n", "     * \u6587\u4ef6\u6839\u8def\u5f84(\u5b8c\u6574\u8def\u5f84\u5305\u542b\u5f53\u524d\u6587\u4ef6\u540d)\n", "     */\n", "    private String fullPath;\n", "\n", "    /**\n", "     * \u76ee\u5f55\u540d\u79f0\n", "     */\n", "    private String name;\n", "\n", "    /**\n", "     * \u6240\u5c5e\u5bb9\u5668\n", "     */\n", "    private VirtualContainer parent;\n", "\n", "    /**\n", "     * \u6587\u4ef6\u7f13\u5b58\n", "     */\n", "    private Map<String, Element> fileCache;\n", "\n", "    /**\n", "     * \u7528\u4e8e\u4fdd\u5b58\u8bfb\u53d6\u5230\u7684\u6587\u4ef6\u7684Hash\n", "     * \u56e0\u4e3a\u8bfb\u53d6\u64cd\u4f5c\u5bfc\u81f4\u6587\u6863\u52a0\u8f7d\u5230\u7f13\u5b58\uff0c\n", "     * \u4f46\u662f\u6587\u4ef6\u5728flush\u65f6\u5019\uff0c\u53cd\u5e8f\u5217\u4e22\u5931\u683c\u5f0f\u5b57\u7b26\u7b49\n", "     * \u5bfc\u81f4\u6587\u4ef6\u6539\u52a8\u3002\n", "     */\n", "    private Map<String, byte[]> fileSrcHash;\n", "    private MessageDigest digest;\n", "\n", "    /**\n", "     * \u76ee\u5f55\u4e2d\u7684\u865a\u62df\u5bb9\u5668\u7f13\u5b58\n", "     */\n", "    private Map<String, VirtualContainer> dirCache;\n", "\n", "\n", "    /**\n", "     * \u83b7\u53d6\u865a\u62df\u5bb9\u5668\u7684\u540d\u79f0\n", "     *\n", "     * @return \u540d\u79f0\n", "     */\n", "    public String getContainerName() {\n", "        return name;\n", "    }\n", "\n", "    private VirtualContainer() {\n", "        fileCache = new HashMap<>(7);\n", "        dirCache = new HashMap<>(5);\n", "        fileSrcHash = new HashMap<>(7);\n", "        digest = null;\n", "        this.parent = this;\n", "    }\n", "\n", "    /**\n", "     * \u901a\u8fc7\u5b8c\u6574\u8def\u5f84\u6784\u9020\u4e00\u4e2a\u865a\u62df\u5bb9\u5668\n", "     *\n", "     * @param fullDir \u5bb9\u5668\u5b8c\u6574\u8def\u5f84\n", "     * @throws IllegalArgumentException \u53c2\u6570\u9519\u8bef\n", "     */\n", "    public VirtualContainer(Path fullDir) throws IllegalArgumentException {\n", "        this();\n", "        if (fullDir == null) {\n", "            throw new IllegalArgumentException(\"\u5b8c\u6574\u8def\u5f84(fullDir)\u4e3a\u7a7a\");\n", "        }\n", "        // \u76ee\u5f55\u4e0d\u5b58\u5728\u6216\u4e0d\u662f\u4e00\u4e2a\u76ee\u5f55\n", "        if (Files.notExists(fullDir) || !Files.isDirectory(fullDir)) {\n", "            try {\n", "                // \u521b\u5efa\u76ee\u5f55\n", "                fullDir = Files.createDirectories(fullDir);\n", "            } catch (IOException e) {\n", "                throw new RuntimeException(\"\u65e0\u6cd5\u521b\u5efa\u6307\u5b9a\u76ee\u5f55\", e);\n", "            }\n", "        }\n", "        this.fullPath = fullDir.toAbsolutePath().toString();\n", "        this.name = fullDir.getFileName().toString();\n", "\n", "    }\n", "\n", "    /**\n", "     * \u521b\u5efa\u4e00\u4e2a\u865a\u62df\u5bb9\u5668\n", "     *\n", "     * @param parent  \u6839\u76ee\u5f55\n", "     * @param dirName \u65b0\u5efa\u76ee\u5f55\u7684\u540d\u79f0\n", "     * @throws IllegalArgumentException \u53c2\u6570\u5f02\u5e38\n", "     */\n", "    public VirtualContainer(Path parent, String dirName) throws IllegalArgumentException {\n", "        this();\n", "        if (parent == null) {\n", "            throw new IllegalArgumentException(\"\u6839\u8def\u5f84(parent)\u4e3a\u7a7a\");\n", "        }\n", "        Path fullPath = Paths.get(parent.toAbsolutePath().toString(), dirName);\n", "        if (Files.notExists(fullPath) || !Files.isDirectory(fullPath)) {\n", "            try {\n", "                fullPath = Files.createDirectories(fullPath);\n", "            } catch (IOException e) {\n", "                throw new RuntimeException(\"\u65e0\u6cd5\u521b\u5efa\u6307\u5b9a\u76ee\u5f55\", e);\n", "            }\n", "        }\n", "        if (!Files.isDirectory(parent)) {\n", "            throw new IllegalStateException(\"\u8bf7\u4f20\u5165\u57fa\u7840\u76ee\u5f55\u8def\u5f84\uff0c\u800c\u4e0d\u662f\u6587\u4ef6\");\n", "        }\n", "        this.fullPath = fullPath.toAbsolutePath().toString();\n", "        this.name = dirName;\n", "    }\n", "\n", "    /**\n", "     * \u83b7\u53d6\u5f53\u524d\u5bb9\u5668\u5b8c\u6574\u8def\u5f84\n", "     *\n", "     * @return \u5bb9\u5668\u5b8c\u6574\u8def\u5f84\uff08\u7edd\u5bf9\u8def\u5f84\uff09\n", "     */\n", "    public String getSysAbsPath() {\n", "        return fullPath;\n", "    }\n", "\n", "    /**\n", "     * \u5411\u865a\u62df\u5bb9\u5668\u4e2d\u52a0\u5165\u6587\u4ef6\n", "     *\n", "     * @param file \u6587\u4ef6\u8def\u5f84\u5bf9\u8c61\n", "     * @return this\n", "     * @throws IOException IO\u5f02\u5e38\n", "     */\n", "    public VirtualContainer putFile(Path file) throws IOException {\n", "        putFileWithPath(file);\n", "        return this;\n", "    }\n", "\n", "    /**\n", "     * \u5411\u865a\u62df\u5bb9\u5668\u4e2d\u52a0\u5165\u6587\u4ef6\uff0c\u5e76\u83b7\u53d6\u6587\u4ef6\u5728\u5bb9\u5668\u4e2d\u7684\u7edd\u5bf9\u8def\u5f84\n", "     *\n", "     * @param file \u6587\u4ef6\u8def\u5f84\u5bf9\u8c61\n", "     * @return null \u6216 \u6587\u4ef6\u5728\u5bb9\u5668\u4e2d\u7684\u7edd\u5bf9\u8def\u5f84\n", "     * @throws IOException IO\u5f02\u5e38\n", "     */\n", "    public Path putFileWithPath(Path file) throws IOException {\n", "        if (file == null || Files.notExists(file) || Files.isDirectory(file)) {\n", "            // \u4e3a\u7a7a\u6216\u662f\u4e00\u4e2a\u6587\u4ef6\u5939\uff0c\u6216\u8005\u4e0d\u5b58\u5728\n", "            return null;\n", "        }\n", "        String fileName = file.getFileName().toString();\n", "        Path target = Paths.get(fullPath, fileName);\n", "        // \u5982\u679c\u6587\u4ef6\u5df2\u7ecf\u5728\u76ee\u5f55\u4e2d\u90a3\u4e48\u4e0d\u505a\u4efb\u4f55\u4e8b\u60c5\n", "        if (Files.exists(target) || target.toAbsolutePath().toString()\n", "                .equals(file.toAbsolutePath().toString())) {\n", "            if (FileUtils.contentEquals(target.toFile(), file.toFile())) {\n", "                // \u4e24\u4e2a\u6587\u4ef6\u4e00\u81f4\uff0c\u90a3\u4e48\u4e0d\u505a\u4efb\u4f55\u6539\u53d8\uff0c\u8fd4\u56de\u5df2\u7ecf\u5b58\u5728\u7684\u6587\u4ef6\u8def\u5f84\n", "                return target;\n", "            } else {\n", "                // \u4fee\u6539\u66f4\u540d\u6587\u4ef6\u540d\u79f0\uff0c\u6dfb\u52a0\u524d\u7f00\u65f6\u95f4\u9632\u6b62\u51b2\u7a81\n", "                String prefix = new SimpleDateFormat(\"yyyyMMddHHmmss_\").format(new Date());\n", "                target = Paths.get(fullPath, prefix + fileName);\n", "            }\n", "        }\n", "        // \u590d\u5236\u6587\u4ef6\u5230\u6307\u5b9a\u76ee\u5f55\n", "        Files.copy(file, target);\n", "        return target;\n", "    }\n", "\n", "    /**\n", "     * \u5411\u865a\u62df\u5bb9\u5668\u4e2d\u76f4\u63a5\u52a0\u5165\u6d41\u7c7b\u578b\u8d44\u6e90\n", "     * <p>\n", "     * \u6839\u636e\u63d0\u4f9b\u6587\u4ef6\u540d\u79f0\u521b\u5efa\u6587\u4ef6\n", "     * <p>\n", "     * \u8f93\u5165\u6d41\u5185\u5bb9\u5c06\u76f4\u63a5\u5199\u5165\u6587\u4ef6\u5185\uff0c\u4e0d\u505a\u68c0\u67e5\n", "     * <p>\n", "     * \u82e5\u6587\u4ef6\u5df2\u7ecf\u5b58\u5728\uff0c\u90a3\u4e48\u5c06\u4f1a\u8986\u76d6\u539f\u6587\u4ef6\uff01\n", "     *\n", "     * @param fileName \u6587\u4ef6\u540d\u79f0\n", "     * @param in       \u8f93\u5165\u6d41\uff0c\u6d41\u7684\u5173\u95ed\u5e94\u7531\u8c03\u7528\u8005\u8d1f\u8d23\n", "     * @return this\n", "     * @throws IOException \u6587\u4ef6\u590d\u5236\u5f02\u5e38\n", "     */\n", "    public VirtualContainer addRaw(String fileName, InputStream in) throws IOException {\n", "        Path target = Paths.get(fullPath, fileName);\n", "        byte[] buffer = new byte[4096];\n", "        int n = 0;\n", "        try (final OutputStream out = Files.newOutputStream(\n", "                target,\n", "                StandardOpenOption.CREATE,\n", "                StandardOpenOption.TRUNCATE_EXISTING)) {\n", "            while ((n = in.read(buffer)) != -1) {\n", "                out.write(buffer, 0, n);\n", "            }\n", "        }\n", "        return this;\n", "    }\n", "\n", "    /**\n", "     * \u5411\u865a\u62df\u5bb9\u5668\u52a0\u5165\u5bf9\u8c61\n", "     *\n", "     * @param fileName \u6587\u4ef6\u540d\n", "     * @param element  \u5143\u7d20\u5bf9\u8c61\n", "     * @return this\n", "     */\n", "    public VirtualContainer putObj(String fileName, Element element) {\n", "        if (fileName == null || fileName.length() == 0) {\n", "            throw new IllegalArgumentException(\"\u6587\u4ef6\u540d\u4e0d\u80fd\u4e3a\u7a7a\");\n", "        }\n", "        if (element == null) {\n", "            return this;\n", "        }\n", "        while (element instanceof DefaultElementProxy) {\n", "            // \u5982\u679c\u662f\u4ee3\u7406\u5143\u7d20\u5bf9\u8c61\u90a3\u4e48\u53d6\u51fa\u88ab\u4ee3\u7406\u7684\u5bf9\u8c61\u5b58\u50a8\n", "            element = ((DefaultElementProxy) element).getProxy();\n", "        }\n", "        fileCache.put(fileName, element);\n", "        return this;\n", "    }\n", "\n", "    /**\n", "     * \u901a\u8fc7\u8def\u5f84\u83b7\u53d6\u5143\u7d20\n", "     * <p>\n", "     * \u4f8b\u5982\uff1a\n", "     * <p>\n", "     * \u5f53\u524d <pre>/Doc_0/Pages\uff0c\u83b7\u53d6 /Doc_0/Pages/Page_0/Content.xml \u7ed3\u679c Page Element</pre>\n", "     * <p>\n", "     * \u5f53\u524d <pre>/Doc_0/Tpl \u7ed3\u679c \u83b7\u53d6 /Doc_0/Pages/Page_0/Content.xml \u7ed3\u679c null</pre>\n", "     * <p>\n", "     * \u5f53\u524d <pre>/Doc_0/Pages \u7ed3\u679c \u83b7\u53d6 Page_0/Content.xml \u7ed3\u679c Page Element</pre>\n", "     *\n", "     * @param loc \u5143\u7d20\u6240\u5728\u8def\u5f84\uff0c\u652f\u6301\u76f8\u5bf9\u8def\u5f84\uff0c\u82e5\u662f\u7edd\u5bf9\u8def\u5f84\u4e14\u4e0d\u5728\u5f53\u524d\u5bb9\u5668\u4e2d\uff0c\u90a3\u4e48\u8fd4\u56denull\n", "     * @return \u5143\u7d20\u5bf9\u8c61\uff0c\u4e0d\u5b58\u5728\u8fd4\u56denull\n", "     * @throws DocumentException \u5143\u7d20\u5e8f\u5217\u5316\u5f02\u5e38\n", "     */\n", "    public Element getObj(ST_Loc loc) throws DocumentException {\n", "        if (loc == null || loc.isEmpty()) {\n", "            return null;\n", "        }\n", "        String[] dst = loc.parts();\n", "        // \u5224\u65ad\u662f\u5426\u662f\u8ddf\u5143\u7d20\u5e76\u4e14\u5177\u6709\u76f8\u540c\u7684\u524d\u7f00\n", "        if (loc.isRootPath()) {\n", "            String[] current = getAbsLoc().parts();\n", "            // \u68c0\u67e5 dst \u662f\u5426\u5305\u542b\u5168\u90e8 current\u6bcf\u4e2a\u5143\u7d20\n", "            for (int i = 0; i < current.length; i++) {\n", "                if (current[i].equals(dst[i]) == false) {\n", "                    // \u5904\u4e8e\u4e0d\u540c\u524d\u7f00\u4e2d\n", "                    return null;\n", "                }\n", "            }\n", "            // \u8f6c\u6362\u4e3a\u76f8\u5bf9\u8def\u5f84\n", "            String[] relative = new String[dst.length - current.length];\n", "            for (int i = current.length; i < dst.length; i++) {\n", "                relative[i - current.length] = dst[i];\n", "            }\n", "            dst = relative;\n", "        }\n", "        // \u901a\u8fc7\u76f8\u5bf9\u8def\u5f84\u83b7\u53d6\u5143\u7d20\n", "        return getObj(dst);\n", "    }\n", "\n", "    /**\n", "     * \u901a\u8fc7\u8def\u5f84\u83b7\u53d6\u5143\u7d20\n", "     *\n", "     * @param relativeDst \u76f8\u5bf9\u8def\u5f84\uff0c[\"a\",\"b\", \"content.xml\"]\n", "     * @return \u5143\u7d20\u5bf9\u8c61\uff0c\u82e5\u6587\u4ef6\u8def\u5f84\u4e0d\u5b58\u5728\u5219\u8fd4\u56denull\n", "     * @throws DocumentException \u6587\u4ef6\u89e3\u6790\u5f02\u5e38\n", "     */\n", "    private Element getObj(String[] relativeDst) throws DocumentException {\n", "        if (relativeDst == null || relativeDst.length == 0) {\n", "            return null;\n", "        }\n", "        if (relativeDst.length == 1) {\n", "            // \u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u4e14\u4e3a\u7a7a\u65e0\u6cd5\u627e\u5230\n", "            if (relativeDst[0].isEmpty()) {\n", "                return null;\n", "            }\n", "            // \u53ea\u6709\u4e00\u4e2a\u5143\u7d20\uff0c\u5219\u4ece\u7f13\u5b58\u4e2d\u83b7\u53d6\n", "            try {\n", "                return getObj(relativeDst[0]);\n", "            } catch (FileNotFoundException e) {\n", "                // \u627e\u4e0d\u5230\u6587\u4ef6\n", "                return null;\n", "            }\n", "        }\n", "\n", "        try {\n", "            VirtualContainer child = getContainer(relativeDst[0], VirtualContainer::new);\n", "            // \u79fb\u9664\u5b50\u5143\u7d20\n", "            String[] sub = Arrays.copyOfRange(relativeDst, 1, relativeDst.length);\n", "            // \u9012\u5f52\u83b7\u53d6\n", "            return child.getObj(sub);\n", "        } catch (FileNotFoundException e) {\n", "            return null;\n", "        }\n", "    }\n", "\n", "    /**\n", "     * \u901a\u8fc7\u8def\u5f84\u83b7\u53d6\u6587\u4ef6\n", "     * <p>\n", "     * \u6ce8\u610f\u5728\u6587\u6863\u5c1a\u672a\u5173\u95ed\u4e4b\u524d\uff0c\u83b7\u53d6\u7684\u5143\u7d20\u5bf9\u8c61\u662f\u7f13\u5b58\u7684\uff0c\u6b64\u65f6\u82e5\u83b7\u53d6\u6587\u4ef6\u5c06\u4f1a\u51fa\u73b0 FileNotFoundException\u3002\n", "     * <p>\n", "     * \u83b7\u53d6\u83b7\u53d6\u65f6\u82e5\u4f7f\u7528\u7edd\u5bf9\u8def\u5f84\uff0c\u4e0e\u5f53\u524d\u76ee\u5f55\u6ca1\u6709\u76f8\u540c\u7684\u524d\u7f00\u5219\u8fd4\u56denull\u3002\n", "     * <p>\n", "     * \u4f8b\u5982\uff1a\n", "     * <p>\n", "     * \u5f53\u524d <pre>/Doc_0/Pages\uff0c\u83b7\u53d6 /Doc_0/Pages/Page_0/Content.xml \u7ed3\u679c Content.xml</pre>\n", "     * <p>\n", "     * \u5f53\u524d <pre>/Doc_0/Pages\uff0c\u83b7\u53d6 /Doc_0/Pages/Page_0/Content.xml \u7ed3\u679c null</pre>\n", "     * <p>\n", "     * \u5f53\u524d <pre>/Doc_0/Pages\uff0c\u83b7\u53d6 Page_0/Content.xml \u7ed3\u679c Content.xml</pre>\n", "     *\n", "     * @param loc \u6587\u4ef6\u8def\u5f84\uff0c\u53ef\u4ee5\u662f\u76f8\u5bf9\u8def\u5f84\uff0c\u4e5f\u53ef\u4ee5\u662f\u7edd\u5bf9\u8def\u5f84\u3002\n", "     * @return \u6587\u4ef6\u8def\u5f84 \u6216 \u6587\u4ef6\u4e0d\u5b58\u5728\u8fd4\u56denull\u3002\n", "     */\n", "    public Path getFile(ST_Loc loc) {\n", "        if (loc == null) {\n", "            return null;\n", "        }\n", "        // \u7a7a\u8868\u793a\u83b7\u53d6\u4f46\u524d\u5bb9\u5668\u8def\u5f84\n", "        if (loc.isEmpty()) {\n", "            return getContainerPath();\n", "        }\n", "        String[] dst = loc.parts();\n", "        boolean isRoot = loc.isRootPath();\n", "\n", "        // \u82e5\u662f\u6839\u8def\u5f84\uff0c\u5219\u5224\u65ad\u662f\u5426\u5177\u6709\u76f8\u540c\u524d\u7f00\uff0c\u7136\u540e\u8f6c\u6362\u4e3a\u76f8\u5bf9\u8def\u5f84\n", "        if (isRoot) {\n", "            String[] current = getAbsLoc().parts();\n", "            // \u68c0\u67e5 dst \u662f\u5426\u5305\u542b\u5168\u90e8 current\u6bcf\u4e2a\u5143\u7d20\n", "            for (int i = 0; i < current.length; i++) {\n", "                if (current[i].equals(dst[i]) == false) {\n", "                    // \u5904\u4e8e\u4e0d\u540c\u524d\u7f00\u4e2d\n", "                    return null;\n", "                }\n", "            }\n", "            // \u8f6c\u6362\u4e3a\u76f8\u5bf9\u8def\u5f84\n", "            String[] relative = new String[dst.length - current.length];\n", "            for (int i = current.length; i < dst.length; i++) {\n", "                relative[i - current.length] = dst[i];\n", "            }\n", "            dst = relative;\n", "        }\n", "        // \u76f8\u5bf9\u8def\u5f84\u4e3a\u7a7a\u8868\u793a\u83b7\u53d6\u5f53\u524d\u5bb9\u5668\u8def\u5f84\n", "        if (dst.length == 0) {\n", "            return getContainerPath();\n", "        }\n", "        // \u5728\u76f8\u540c\u76ee\u5f55\u4e2d\u5219\u7ec4\u88c5\n", "        Path res = Paths.get(fullPath, dst);\n", "        if (Files.notExists(res)) {\n", "            return null;\n", "        }\n", "        return res;\n", "    }\n", "\n", "    /**\n", "     * \u901a\u8fc7\u6587\u4ef6\u540d\u83b7\u53d6\u5143\u7d20\u5bf9\u8c61\n", "     *\n", "     * @param fileName \u6587\u4ef6\u540d\n", "     * @return \u5143\u7d20\u5bf9\u8c61\uff08\u4e0d\u542b\u4ee3\u7406\uff09\n", "     * @throws FileNotFoundException \u6587\u4ef6\u4e0d\u5b58\u5728\n", "     * @throws DocumentException     \u5143\u7d20\u5e8f\u5217\u5316\u5f02\u5e38\n", "     */\n", "    public Element getObj(String fileName) throws FileNotFoundException, DocumentException {\n", "        if (fileName == null || fileName.length() == 0) {\n", "            throw new IllegalArgumentException(\"\u6587\u4ef6\u540d\u4e0d\u80fd\u4e3a\u7a7a\");\n", "        }\n", "        Element element = fileCache.get(fileName);\n", "        if (element == null) {\n", "            // \u7f13\u5b58\u4e2d\u4e0d\u5b58\u5728\uff0c\u4ece\u6587\u4ef6\u76ee\u5f55\u4e2d\u5c1d\u8bd5\u8bfb\u53d6\n", "            Path file = getFile(fileName);\n", "            // \u53cd\u5e8f\u5217\u5316\u6587\u4ef6\u4e3a\u5bf9\u8c61\n", "            element = ElemCup.inject(file);\n", "            // \u8ba1\u7b97\u5e76\u5b58\u50a8\u521a\u8bfb\u53d6\u5230\u5bf9\u8c61\u5e8f\u5217\u5316\u540e\u7684Hash\n", "            fileSrcHash.put(fileName, objectHash(element));\n", "            // \u4ece\u6587\u4ef6\u52a0\u8f7d\u5143\u7d20\uff0c\u90a3\u4e48\u7f13\u5b58\u8be5\u5143\u7d20\u5bf9\u8c61\n", "            fileCache.put(fileName, element);\n", "        }\n", "        return element;\n", "    }\n", "\n", "    /**\n", "     * \u8ba1\u7b97\u83b7\u53d6\u7684\u5bf9\u8c61\u7684\u5e8f\u5217\u5316Hash\u503c\n", "     *\n", "     * @param element \u6587\u6863\u5bf9\u8c61\n", "     * @return Hash\n", "     * @throws DocumentException \u6587\u6863\u8bfb\u53d6\u548c\u8ba1\u7b97\u8fc7\u7a0b\u4e2d\u5f02\u5e38\n", "     */\n", "    private byte[] objectHash(Element element) throws DocumentException {\n", "        try {\n", "            if (digest == null) {\n", "                digest = new SM3.Digest();\n", "            }\n", "            byte[] bin = ElemCup.dump(element);\n", "            digest.reset();\n", "            digest.update(bin);\n", "            return digest.digest();\n", "        } catch (IOException e) {\n", "            throw new DocumentException(\"\u6587\u6863\u8ba1\u7b97\u6458\u8981\u8fc7\u7a0b\u4e2d\u5f02\u5e38\", e);\n", "        }\n", "    }\n", "\n", "    /**\n", "     * \u5224\u65ad\u6587\u4ef6\u662f\u5426\u6539\u52a8\n", "     *\n", "     * @param filename \u6587\u4ef6\u540d\n", "     * @param element  \u6587\u4ef6\u5bf9\u8c61\n", "     * @return true - \u5df2\u7ecf\u88ab\u6539\u52a8;false - \u672a\u6539\u52a8\n", "     */\n", "    private boolean fileChanged(String filename, Element element) {\n", "        if (digest == null) {\n", "            return true;\n", "        }\n", "        byte[] srcHash = fileSrcHash.get(filename);\n", "        if (srcHash == null) {\n", "            return true;\n", "        }\n", "        try {\n", "            byte[] nowHash = objectHash(element);\n", "            return !Arrays.equals(srcHash, nowHash);\n", "        } catch (DocumentException e) {\n", "            throw new RuntimeException(e);\n", "        }\n", "    }\n", "\n", "    /**\n", "     * \u83b7\u53d6\u5bb9\u5668\u4e2d\u7684\u6587\u4ef6\u5bf9\u8c61\n", "     *\n", "     * @param fileName \u6587\u4ef6\u540d\u79f0\n", "     * @return \u6587\u4ef6\u8def\u5f84\u5bf9\u8c61\n", "     * @throws FileNotFoundException \u6587\u4ef6\u4e0d\u5b58\u5728\n", "     */\n", "    public Path getFile(String fileName) throws FileNotFoundException {\n", "        if (fileName == null || fileName.length() == 0) {\n", "            throw new IllegalArgumentException(\"\u6587\u4ef6\u540d\u4e3a\u7a7a\");\n", "        }\n", "        Path res = Paths.get(fullPath, fileName);\n", "        if (Files.isDirectory(res) || Files.notExists(res)) {\n", "            throw new FileNotFoundException(\"\u65e0\u6cd5\u5728\u76ee\u5f55: \" + fullPath + \"\u4e2d\u627e\u5230\uff0c\u6587\u4ef6 [ \" + fileName + \" ]\");\n", "        }\n", "        return res;\n", "    }\n", "\n", "\n", "    /**\n", "     * \u83b7\u53d6\u4e00\u4e2a\u865a\u62df\u5bb9\u5668\u5bf9\u8c61\n", "     * <p>\n", "     * \u5982\u679c\u5bb9\u5668\u5b58\u5728\uff0c\u90a3\u4e48\u53d6\u51fa\u5143\u7d20\n", "     * <p>\n", "     * \u5982\u679c\u5bb9\u5668\u4e0d\u5b58\u5728\uff0c\u90a3\u4e48\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5bf9\u8c61\n", "     *\n", "     * @param name   \u5bb9\u5668\u540d\u79f0\n", "     * @param mapper \u5bb9\u5668\u6784\u9020\u5668\u5f15\u7528\n", "     * @param <R>    \u5bb9\u5668\u5b50\u7c7b\n", "     * @return \u65b0\u5efa\u6216\u5df2\u7ecf\u5b58\u5728\u7684\u5bb9\u5668\n", "     */\n", "    @SuppressWarnings(\"unchecked\")\n", "    public <R extends VirtualContainer> R obtainContainer(String name, Function<Path, R> mapper) {\n", "        if (name == null || name.length() == 0) {\n", "            throw new IllegalArgumentException(\"\u5bb9\u5668\u540d\u79f0\uff08name\uff09\u4e3a\u7a7a\");\n", "        }\n", "        if (mapper == null) {\n", "            throw new IllegalArgumentException(\"\u5bb9\u5668\u6784\u5efa\u5bf9\u8c61\uff08mapper\uff09\u4e3a\u7a7a\");\n", "        }\n", "        // \u68c0\u67e5\u7f13\u5b58\n", "        VirtualContainer target = dirCache.get(name);\n", "        if (target == null) {\n", "            Path p = Paths.get(fullPath, name);\n", "            // \u5982\u679c\u76ee\u5f55\u4e0d\u5b58\u5728\u90a3\u4e48\u521b\u5efa\uff0c\u5982\u679c\u5df2\u7ecf\u5b58\u5728\u90a3\u4e48\u5c31\u662f\u52a0\u8f7d\n", "            R ct = mapper.apply(p);\n", "            // \u8bbe\u7f6e\u7236\u6bcd\u8def\u5f84\n", "            ct.setParent(this);\n", "            // \u52a0\u5165\u7f13\u5b58\u4e2d\n", "            dirCache.put(name, ct);\n", "            return ct;\n", "        } else {\n", "            return (R) target;\n", "        }\n", "    }\n", "\n", "    /**\n", "     * \u83b7\u53d6\u865a\u62df\u5bb9\u5668\n", "     *\n", "     * @param <R>    \u5bb9\u5668\u5b50\u7c7b\n", "     * @param name   \u5bb9\u5668\u540d\u79f0\n", "     * @param mapper \u5bb9\u5668\u6784\u9020\u5668\u5f15\u7528\n", "     * @return \u5bb9\u5668\u5bf9\u8c61\n", "     * @throws FileNotFoundException \u6587\u4ef6\u4e0d\u5b58\u5728\n", "     */\n", "    public <R extends VirtualContainer> R getContainer(String name, Function<Path, R> mapper) throws FileNotFoundException {\n", "        Path p = Paths.get(fullPath, name);\n", "        if (Files.notExists(p) || !Files.isDirectory(p)) {\n", "            throw new FileNotFoundException(\"\u5bb9\u5668\u5185\u65e0\u6cd5\u627e\u540d\u4e3a\uff1a\" + name + \"\u76ee\u5f55\");\n", "        }\n", "\n", "        // \u68c0\u67e5\u7f13\u5b58\n", "        VirtualContainer target = dirCache.get(name);\n", "        if (target == null) {\n", "            // \u8c03\u7528\u6307\u5b9a\u6784\u9020\u5668\u521b\u5efa\u5bb9\u5668\u5bf9\u8c61\n", "            R ct = mapper.apply(p);\n", "            // \u8bbe\u7f6e\u6240\u5c5e\u5bb9\u5668\u4e3a\u521b\u5efa\u8005\n", "            ct.setParent(this);\n", "            // \u52a0\u5165\u7f13\u5b58\u4e2d\n", "            dirCache.put(name, ct);\n", "            return ct;\n", "        } else {\n", "            return (R) target;\n", "        }\n", "    }\n", "\n", "    /**\n", "     * \u83b7\u53d6\u8be5\u5bb9\u5668\u6240\u5c5e\u5bb9\u5668\n", "     *\n", "     * @return \u6240\u5c5e\u5bb9\u5668\u5bf9\u8c61\n", "     */\n", "    public VirtualContainer getParent() {\n", "        return parent;\n", "    }\n", "\n", "    /**\n", "     * \u8bbe\u7f6e\u6240\u5c5e\u5bb9\u5668\n", "     *\n", "     * @param parent \u5bb9\u5668\n", "     * @return this\n", "     */\n", "    protected VirtualContainer setParent(VirtualContainer parent) {\n", "        this.parent = parent;\n", "        return this;\n", "    }\n", "\n", "    /**\n", "     * \u83b7\u53d6\u865a\u62df\u5bb9\u5668\u6240\u5904\u7684\u6587\u4ef6\u7cfb\u7edf\u8def\u5f84\n", "     *\n", "     * @return \u6587\u4ef6\u7cfb\u7edf\u8def\u5f84\n", "     */\n", "    public Path getContainerPath() {\n", "        return Paths.get(fullPath);\n", "    }\n", "\n", "    /**\n", "     * \u5224\u65ad\u6587\u4ef6\u6216\u5bf9\u8c61\u662f\u5426\u5b58\u5728\uff08\u9519\u8bef\u7684\u51fd\u6570\u540d\u79f0\uff09\n", "     *\n", "     * @param fileName \u6587\u4ef6\u540d\u79f0\n", "     * @return true - \u5b58\u5728;false - \u4e0d\u5b58\u5728\n", "     * @deprecated {@link #exist(String)}\n", "     */\n", "    @Deprecated\n", "    public boolean exit(String fileName) {\n", "        return exist(fileName);\n", "    }\n", "\n", "    /**\n", "     * \u5224\u65ad\u6587\u4ef6\u6216\u5bf9\u8c61\u662f\u5426\u5b58\u5728\n", "     *\n", "     * @param fileName \u6587\u4ef6\u540d\u79f0\n", "     * @return true - \u5b58\u5728;false - \u4e0d\u5b58\u5728\n", "     */\n", "    public boolean exist(String fileName) {\n", "        if (fileName == null || fileName.length() == 0) {\n", "            return false;\n", "        }\n", "        Element element = fileCache.get(fileName);\n", "        if (element == null) {\n", "            // \u7f13\u5b58\u4e2d\u4e0d\u5b58\u5728\uff0c\u4ece\u6587\u4ef6\u76ee\u5f55\u4e2d\u5c1d\u8bd5\u8bfb\u53d6\n", "            Path res = Paths.get(fullPath, fileName);\n", "            return !Files.isDirectory(res) && !Files.notExists(res);\n", "        } else {\n", "            return true;\n", "        }\n", "    }\n", "\n", "    /**\n", "     * \u5220\u9664\u6587\u4ef6\n", "     * <p>\n", "     * \u6ce8\u610f\u8be5\u65b9\u6cd5\u53ea\u80fd\u5220\u9664\u5f53\u524d\u5bb9\u5668\u4e2d\u7684\u6587\u4ef6\uff0c\u4e0d\u80fd\u5220\u9664\u5b50\u5bb9\u5668\u4e2d\u7684\u6587\u4ef6\u3002\n", "     *\n", "     * @param fileName \u6587\u4ef6\u540d\u79f0\n", "     * @throws IOException \u6587\u4ef6\u5220\u9664\u5f02\u5e38\n", "     */\n", "    public void deleteFile(String fileName) throws IOException {\n", "        if (fileName == null || fileName.length() == 0) {\n", "            return;\n", "        }\n", "        fileCache.remove(fileName);\n", "        Path res = Paths.get(fullPath, fileName);\n", "        // \u68c0\u67e5\u662f\u5426\u5177\u6709\u76f8\u540c\u524d\u7f00\uff0c\u9632\u6b62\u8def\u5f84\u653b\u51fb\n", "        if (res.toAbsolutePath().toString().startsWith(fullPath)) {\n", "            // \u5220\u9664\u6587\u4ef6\n", "            Files.delete(res);\n", "        }\n", "    }\n", "\n", "\n", "    /**\n", "     * \u5220\u9664\u6574\u4e2a\u865a\u62df\u5bb9\u5668\n", "     */\n", "    public void clean() {\n", "        try {\n", "            Path path = getContainerPath();\n", "            // \u5220\u9664\u6574\u4e2a\u6587\u4ef6\u76ee\u5f55\n", "            if (Files.exists(path)) {\n", "                FileUtils.deleteDirectory(path.toFile());\n", "            }\n", "            this.fileCache.clear();\n", "            this.dirCache.clear();\n", "        } catch (Exception e) {\n", "            System.err.println(\"\u5bb9\u5668\u5220\u9664\u5f02\u5e38: \" + e.getMessage());\n", "        }\n", "    }\n", "\n", "    /**\n", "     * \u5c06\u7f13\u5b58\u4e2d\u7684\u5bf9\u8c61\u5199\u5165\u5230\u6587\u4ef6\u7cfb\u7edf\u4e2d\n", "     *\n", "     * @throws IOException \u6587\u4ef6\u8bfb\u5199IO\u5f02\u5e38\n", "     */\n", "    public void flush() throws IOException {\n", "        // \u5237\u65b0\u5143\u7d20\u5bf9\u8c61\u5230\u6307\u5b9a\u76ee\u5f55\n", "        for (Map.Entry<String, Element> kv : fileCache.entrySet()) {\n", "            String filename = kv.getKey();\n", "            Path filePath = Paths.get(fullPath, filename);\n", "            Element element = kv.getValue();\n", "            // \u5e8f\u5217\u5316\u4e3a\u6587\u4ef6\n", "            // \u68c0\u67e5\u6587\u4ef6\u662f\u5426\u88ab\u4fee\u6539\uff0c\u53ea\u6709\u88ab\u4fee\u6539\u7684\u6587\u4ef6\u624d\u80fd\u591f\u975eflush\n", "            if (fileChanged(filename, element)) {\n", "                ElemCup.dumpUpNS(element, filePath);\n", "            }\n", "        }\n", "        // \u9012\u5f52\u7684\u5237\u65b0\u5bb9\u5668\u4e2d\u5305\u542b\u7684\u5176\u4ed6\u5bb9\u5668\n", "        for (VirtualContainer container : dirCache.values()) {\n", "            container.flush();\n", "        }\n", "        fileCache.clear();\n", "        dirCache.clear();\n", "    }\n", "\n", "    /**\n", "     * \u4ece\u7f13\u5b58\u4e2d\u5237\u65b0\u6307\u5b9a\u5bb9\u5668\u5230\u6587\u4ef6\u7cfb\u7edf\u4e2d\n", "     *\n", "     * @param name \u5bb9\u5668\u540d\u79f0\n", "     * @return this\n", "     * @throws IOException \u5199\u5165\u6587\u4ef6IO\u5f02\u5e38\n", "     */\n", "    public VirtualContainer flushContainerByName(String name) throws IOException {\n", "        if (name == null || name.trim().isEmpty()) {\n", "            return this;\n", "        }\n", "        VirtualContainer virtualContainer = dirCache.get(name);\n", "        if (virtualContainer != null) {\n", "            virtualContainer.flush();\n", "        }\n", "        return this;\n", "    }\n", "\n", "    /**\n", "     * \u4ece\u7f13\u5b58\u5c06\u6307\u5b9a\u5bf9\u8c61\u5199\u5165\u5230\u6587\u4ef6\u7cfb\u7edf\u4e2d\n", "     *\n", "     * @param name \u6587\u4ef6\u540d\u79f0\n", "     * @return this\n", "     * @throws IOException \u5199\u5165\u6587\u4ef6IO\u5f02\u5e38\n", "     */\n", "    public VirtualContainer flushFileByName(String name) throws IOException {\n", "        if (name == null || name.trim().isEmpty()) {\n", "            return this;\n", "        }\n", "        Element element = fileCache.get(name);\n", "        if (element != null) {\n", "            Path filePath = Paths.get(fullPath, name);\n", "            // \u68c0\u67e5\u6587\u4ef6\u662f\u5426\u88ab\u4fee\u6539\uff0c\u53ea\u6709\u88ab\u4fee\u6539\u7684\u6587\u4ef6\u624d\u80fd\u591f\u975eflush\n", "            if (fileChanged(name, element)) {\n", "                ElemCup.dumpUpNS(element, filePath);\n", "            }\n", "        }\n", "        return this;\n", "    }\n", "\n", "    /**\n", "     * \u83b7\u53d6\u5728\u5bb9\u5668\u4e2d\u7684\u7edd\u5bf9\u8def\u5f84\n", "     *\n", "     * @return \u7edd\u5bf9\u8def\u5f84\u5bf9\u8c61\n", "     */\n", "    public ST_Loc getAbsLoc() {\n", "        ST_Loc absRes = null;\n", "        if (parent == this) {\n", "            absRes = new ST_Loc(\"/\");\n", "        } else {\n", "            absRes = parent.getAbsLoc().cat(this.name);\n", "        }\n", "        return absRes;\n", "    }\n", "\n", "    /**\n", "     * \u5411\u865a\u62df\u5bb9\u5668\u4e2d\u52a0\u5165\u6587\u4ef6\n", "     *\n", "     * @param fileName \u6587\u4ef6\u540d\u79f0\n", "     * @param in      \u8f93\u5165\u6d41\uff0c\u6d41\u7684\u5173\u95ed\u5e94\u7531\u8c03\u7528\u8005\u8d1f\u8d23\n", "     * @throws IOException \u6587\u4ef6\u590d\u5236\u5f02\u5e38\n", "     */\n", "    public void putFile(String fileName, InputStream in) throws IOException {\n", "        Path target = Paths.get(fullPath, fileName);\n", "        byte[] buffer = new byte[4096];\n", "        int n = 0;\n", "        try (OutputStream out = Files.newOutputStream(\n", "                target,\n", "                StandardOpenOption.CREATE,\n", "                StandardOpenOption.TRUNCATE_EXISTING)) {\n", "            while ((n = in.read(buffer)) != -1) {\n", "                out.write(buffer, 0, n);\n", "            }\n", "        }\n", "    }\n", "\n", "    /**\n", "     * \u5411\u865a\u62df\u5bb9\u5668\u4e2d\u52a0\u5165\u6587\u4ef6\n", "     * @param fileName \u6587\u4ef6\u540d\u79f0\n", "     * @param data    \u6570\u636e\u5185\u5bb9\n", "     * @throws IOException \u6587\u4ef6\u5199\u5165\u5f02\u5e38\n", "     */\n", "    public void putFile(String fileName, byte[] data) throws IOException {\n", "        if (data == null || data.length == 0) {\n", "            data = new byte[0];\n", "        }\n", "        Path target = Paths.get(fullPath, fileName);\n", "        try (OutputStream out = Files.newOutputStream(\n", "                target,\n", "                StandardOpenOption.CREATE,\n", "                StandardOpenOption.TRUNCATE_EXISTING)) {\n", "            out.write(data);\n", "        }\n", "    }\n", "\n", "\n", "\n", "    @Override\n", "    public void close() throws IOException {\n", "        // \u5220\u9664\u5de5\u4f5c\u8fc7\u7a0b\u4e2d\u5b58\u653e\u4e8e\u865a\u62df\u5bb9\u5668\u4e2d\u7684\u6587\u4ef6\u548c\u76ee\u5f55\n", "        flush();\n", "    }\n", "\n", "\n", "}\n"], "test_content": ["package org.ofdrw.pkg.container;\n", "\n", "import org.apache.commons.io.FileUtils;\n", "import org.dom4j.DocumentException;\n", "import org.dom4j.Element;\n", "import org.junit.jupiter.api.Assertions;\n", "import org.junit.jupiter.api.BeforeEach;\n", "import org.junit.jupiter.api.Test;\n", "import org.ofdrw.core.OFDElement;\n", "import org.ofdrw.core.basicStructure.doc.CT_PageArea;\n", "import org.ofdrw.core.basicStructure.doc.Document;\n", "import org.ofdrw.core.basicStructure.ofd.OFD;\n", "import org.ofdrw.core.basicStructure.pageObj.Page;\n", "import org.ofdrw.core.basicType.ST_Loc;\n", "import org.ofdrw.pkg.tool.ElemCup;\n", "\n", "import java.io.File;\n", "import java.io.IOException;\n", "import java.nio.file.Files;\n", "import java.nio.file.Path;\n", "import java.nio.file.Paths;\n", "import java.util.Arrays;\n", "\n", "/**\n", " * @author \u6743\u89c2\u5b87\n", " * @since 2020-04-02 20:00:50\n", " */\n", "class VirtualContainerTest {\n", "\n", "    /**\n", "     * \u6d4b\u8bd5\u865a\u62df\u5bb9\u5668\n", "     */\n", "    private VirtualContainer vc;\n", "\n", "    final static String target = \"target/VirtualContainer\";\n", "\n", "    @BeforeEach\n", "    public void init() throws IOException {\n", "        Path path = Paths.get(target);\n", "        if (Files.exists(path)) {\n", "            FileUtils.deleteDirectory(path.toFile());\n", "        } else {\n", "            path = Files.createDirectories(path);\n", "        }\n", "        vc = new VirtualContainer(path);\n", "    }\n", "\n", "    @Test\n", "    void putFile() throws IOException {\n", "        final String fileName = \"testimg.png\";\n", "        Path path = Paths.get(\"src/test/resources\", fileName);\n", "        vc.putFile(path);\n", "        Assertions.assertTrue(Files.exists(Paths.get(target, fileName)));\n", "\n", "        // \u91cd\u590d\u653e\u7f6e\u76f8\u540c\u6587\u4ef6\n", "        vc.flush();\n", "        Path fileCopy = Paths.get(\"target\", fileName);\n", "        Files.deleteIfExists(fileCopy);\n", "        Files.copy(path, fileCopy);\n", "        vc.putFile(fileCopy);\n", "\n", "        // \u540c\u540d\u4e0d\u540c\u5185\u5bb9\u6587\u4ef6\n", "        Files.delete(fileCopy);\n", "        Files.copy(Paths.get(\"src/test/resources/StampImg.png\"), fileCopy);\n", "        // \u91cd\u547d\u540d\n", "        vc.putFile(fileCopy);\n", "\n", "    }\n", "\n", "    @Test\n", "    void getFile() throws IOException {\n", "        final String fileName = \"testimg.png\";\n", "        Path path = Paths.get(\"src/test/resources\", fileName);\n", "        vc.putFile(path);\n", "\n", "        Path file = vc.getFile(fileName);\n", "        final byte[] bytes = Files.readAllBytes(file);\n", "        final byte[] bytes1 = Files.readAllBytes(path);\n", "        Assertions.assertArrayEquals(bytes, bytes1);\n", "    }\n", "\n", "    @Test\n", "    void putObj() throws DocumentException, IOException {\n", "        String fileName = \"Content.xml\";\n", "        Path path = Paths.get(\"src/test/resources\", fileName);\n", "        Element inject = ElemCup.inject(path);\n", "        inject.add(OFDElement.getInstance(\"TestEmptyElem\"));\n", "        vc.putObj(\"C.xml\", inject);\n", "        vc.flush();\n", "        System.out.println(vc.getSysAbsPath());\n", "        Assertions.assertTrue(Files.exists(Paths.get(target, \"C.xml\")));\n", "\n", "    }\n", "\n", "    @Test\n", "    void getObj() throws IOException, DocumentException {\n", "        String fileName = \"Content.xml\";\n", "        Path path = Paths.get(\"src/test/resources\", fileName);\n", "        vc.putFile(path);\n", "        Element obj = vc.getObj(fileName);\n", "        Assertions.assertEquals(\"ofd:Page\", obj.getQualifiedName());\n", "    }\n", "\n", "    @Test\n", "    void getContainerName() {\n", "        Assertions.assertEquals(\"VirtualContainer\", vc.getContainerName());\n", "    }\n", "\n", "    @Test\n", "    void obtainContainer() throws IOException {\n", "        // \u521b\u5efa\u4e00\u4e2a\u5bb9\u5668\n", "        VirtualContainer pages = vc.obtainContainer(\"Pages\", VirtualContainer::new);\n", "        Assertions.assertTrue(Files.exists(Paths.get(target, \"Pages\")));\n", "\n", "        Path path = Paths.get(target);\n", "        VirtualContainer vc2 = new VirtualContainer(path);\n", "        VirtualContainer pages1 = vc2.getContainer(\"Pages\", VirtualContainer::new);\n", "        Assertions.assertNotNull(pages1);\n", "    }\n", "\n", "    @Test\n", "    void getAbsLoc() {\n", "        Assertions.assertEquals(\"/\", vc.getAbsLoc().toString());\n", "\n", "        PagesDir pages = vc.obtainContainer(\"Pages\", PagesDir::new);\n", "        Assertions.assertEquals(\"/Pages\", pages.getAbsLoc().toString());\n", "\n", "        PageDir pageDir = pages.newPageDir();\n", "        Assertions.assertEquals(\"/Pages/Page_0\", pageDir.getAbsLoc().toString());\n", "    }\n", "\n", "\n", "    /**\n", "     * \u6d4b\u8bd5\u6587\u4ef6\u5728\u8bfb\u53d6\u540e\u6ca1\u6709\u6539\u52a8\uff0c\u662f\u5426\u4f1a\u5f71\u54cd\u6587\u6863\u4e2d\u6587\u4ef6\n", "     *\n", "     * @throws IOException       no happen\n", "     * @throws DocumentException no happen\n", "     */\n", "    @Test\n", "    void testReadFileNoChange() throws IOException, DocumentException {\n", "        Path docPath = Paths.get(\"src/test/resources/Document.xml\");\n", "        VirtualContainer doc_0 = vc.obtainContainer(\"Doc_0\", VirtualContainer::new);\n", "        doc_0.putFile(docPath);\n", "        vc.close();\n", "\n", "        VirtualContainer newVc = new VirtualContainer(Paths.get(target));\n", "        DocDir docDir0 = newVc.obtainContainer(\"Doc_0\", DocDir::new);\n", "        Document document = docDir0.getDocument();\n", "        System.out.println(document.elements().size());\n", "        newVc.close();\n", "\n", "        Path vcDocPath = Paths.get(target + \"/Doc_0/Document.xml\");\n", "        byte[] before = Files.readAllBytes(docPath);\n", "        byte[] after = Files.readAllBytes(vcDocPath);\n", "\n", "        Assertions.assertTrue(Arrays.equals(before, after));\n", "\n", "    }\n", "\n", "    @Test\n", "    void testGetFile() throws IOException {\n", "        FileUtils.deleteDirectory(new File(\"target/vc_get/\"));\n", "        Files.createDirectories(Paths.get(\"target/vc_get/aaa/bc/fff\"));\n", "        Files.createDirectories(Paths.get(\"target/vc_get/aaabc\"));\n", "//        Files.createDirectories(Paths.get(\"target/aaabc\"));\n", "        Files.createFile(Paths.get(\"target/vc_get/aaabc/1.txt\"));\n", "        Files.createFile(Paths.get(\"target/vc_get/aaa/bc/2.txt\"));\n", "        Files.createFile(Paths.get(\"target/vc_get/aaa/bc/fff/3.txt\"));\n", "         /*\n", "        loc: /aaabc\n", "        current: /aaa\n", "        \u6709\u5982\u4e0b\u8def\u5f84\n", "        /aaabc\n", "        /aaa/bc\n", "         */\n", "        VirtualContainer vc = new VirtualContainer(Paths.get(\"target/vc_get/\"));\n", "        ST_Loc loc = new ST_Loc(\"/aaabc/1.txt\");\n", "        Path res = vc.getFile(loc);\n", "        Assertions.assertNotNull(res);\n", "\n", "        loc = new ST_Loc(\"aaa/bc/2.txt\");\n", "        res = vc.getFile(loc);\n", "        Assertions.assertNotNull(res);\n", "\n", "        loc = new ST_Loc(\"\");\n", "        res = vc.getFile(loc);\n", "        Assertions.assertNotNull(res);\n", "\n", "        VirtualContainer aaa = vc.getContainer(\"aaa\", VirtualContainer::new);\n", "        loc = new ST_Loc(\"bc/2.txt\");\n", "        res = aaa.getFile(loc);\n", "        Assertions.assertNotNull(res);\n", "\n", "        VirtualContainer bc = aaa.getContainer(\"bc\", VirtualContainer::new);\n", "        loc = new ST_Loc(\"/aaa/bc/fff/3.txt\");\n", "        res = bc.getFile(loc);\n", "        Assertions.assertNotNull(res);\n", "\n", "        loc = new ST_Loc(\"fff/3.txt\");\n", "        res = bc.getFile(loc);\n", "        Assertions.assertNotNull(res);\n", "\n", "        loc = new ST_Loc(\"/aaa/bc\");\n", "        res = bc.getFile(loc);\n", "        Assertions.assertNotNull(res);\n", "\n", "        loc = new ST_Loc(\"/aaa/bc/\");\n", "        res = bc.getFile(loc);\n", "        Assertions.assertNotNull(res);\n", "\n", "    }\n", "\n", "    @Test\n", "    void testGetObj()throws Exception {\n", "        FileUtils.deleteDirectory(new File(\"target/vc_get_obj/\"));\n", "        Files.createDirectories(Paths.get(\"target/vc_get_obj/Doc_0/Pages/Page_0/\"));\n", "        Files.createDirectories(Paths.get(\"target/vc_get_obj/Doc_0/PagesPage_0/\"));\n", "        Files.createDirectories(Paths.get(\"target/vc_get_obj/Doc_0/Pages/Page_1/\"));\n", "\n", "        Page page1 = new Page();\n", "        page1.setArea(new CT_PageArea(10, 10, 10,10));\n", "        Page page2= new Page();\n", "        page2.setArea(new CT_PageArea(20, 20, 20,20));\n", "\n", "        ElemCup.dump(page1, Paths.get(\"target/vc_get_obj/Doc_0/Pages/Page_0/Content.xml\"));\n", "        ElemCup.dump(page2, Paths.get(\"target/vc_get_obj/Doc_0/Pages/Page_1/Content.xml\"));\n", "        OFD doc = new OFD();\n", "        ElemCup.dump(doc, Paths.get(\"target/vc_get_obj/Doc_0/PagesPage_0/Content.xml\"));\n", "\n", "\n", "        VirtualContainer vc = new VirtualContainer(Paths.get(\"target/vc_get_obj/\"));\n", "        ST_Loc loc = new ST_Loc(\"/Doc_0/Pages/Page_0/Content.xml\");\n", "        Element res = vc.getObj(loc);\n", "        Assertions.assertNotNull(res);\n", "\n", "        loc = new ST_Loc(\"/Doc_0//Pages//Page_0/Content.xml\");\n", "        res = vc.getObj(loc);\n", "        Assertions.assertNotNull(res);\n", "\n", "        loc = new ST_Loc(\"Doc_0/Pages/Page_0/Content.xml\");\n", "        res = vc.getObj(loc);\n", "        Assertions.assertNotNull(res);\n", "\n", "\n", "        loc = new ST_Loc(\"/Doc_0/PagesPage_0/Content.xml\");\n", "        res = vc.getObj(loc);\n", "        Assertions.assertEquals(\"ofd:OFD\", res.getQualifiedName());\n", "\n", "        VirtualContainer doc_0 = vc.getContainer(\"Doc_0\", VirtualContainer::new);\n", "        VirtualContainer pages = doc_0.getContainer(\"Pages\", VirtualContainer::new);\n", "\n", "        loc = new ST_Loc(\"/Doc_0/Pages/Page_0/Content.xml\");\n", "        res = pages.getObj(loc);\n", "        Assertions.assertEquals(\"ofd:Page\", res.getQualifiedName());\n", "\n", "        loc = new ST_Loc(\"Page_0/Content.xml\");\n", "        res = pages.getObj(loc);\n", "        Assertions.assertEquals(\"ofd:Page\", res.getQualifiedName());\n", "\n", "        loc = new ST_Loc(\"/Doc_0/PagesPage_0/Content.xml\");\n", "        res = pages.getObj(loc);\n", "        Assertions.assertNull(res);\n", "\n", "        loc = new ST_Loc(\"PagesPage_0/Content.xml\");\n", "        res = pages.getObj(loc);\n", "        Assertions.assertNull(res);\n", "\n", "        loc = new ST_Loc(\"Page_1\");\n", "        res = pages.getObj(loc);\n", "        Assertions.assertNull(res);\n", "    }\n", "}"], "method_lines_dic": {"VirtualContainer::::getContainerName()": [72, 74], "VirtualContainer::::getSysAbsPath()": [141, 143], "VirtualContainer::::putFile(java.nio.file.Path)": [152, 155], "VirtualContainer::::putFileWithPath(java.nio.file.Path)": [164, 186], "VirtualContainer::::addRaw(java.lang.String,java.io.InputStream)": [202, 215], "VirtualContainer::::getObj(java.lang.String[])": [287, 314], "VirtualContainer::::getObj(java.lang.String)": [382, 398], "VirtualContainer::::getFile(java.lang.String)": [451, 460], "VirtualContainer::::obtainContainer(java.lang.String,java.util.function.Function<java.nio.file.Path, R>)": [475, 497], "VirtualContainer::::getContainer(java.lang.String,java.util.function.Function<java.nio.file.Path, R>)": [508, 527], "VirtualContainer::::getParent()": [534, 536], "VirtualContainer::::setParent(org.ofdrw.pkg.container.VirtualContainer)": [544, 547], "VirtualContainer::::getContainerPath()": [554, 556], "VirtualContainer::::exit(java.lang.String)": [565, 568], "VirtualContainer::::exist(java.lang.String)": [576, 588], "VirtualContainer::::deleteFile(java.lang.String)": [598, 609], "VirtualContainer::::clean()": [615, 627], "VirtualContainer::::flush()": [634, 652], "VirtualContainer::::flushContainerByName(java.lang.String)": [661, 670], "VirtualContainer::::flushFileByName(java.lang.String)": [679, 692], "VirtualContainer::::getAbsLoc()": [699, 707], "VirtualContainer::::putFile(java.lang.String,java.io.InputStream)": [716, 728], "VirtualContainer::::putFile(java.lang.String,byte[])": [736, 747], "VirtualContainer::::close()": [751, 755]}, "test_method_lines_dic": {"VirtualContainerTest::::init()": [37, 46], "VirtualContainerTest::::putFile()": [48, 68], "VirtualContainerTest::::getFile()": [70, 80], "VirtualContainerTest::::putObj()": [82, 93], "VirtualContainerTest::::getObj()": [95, 102], "VirtualContainerTest::::getContainerName()": [104, 107], "VirtualContainerTest::::obtainContainer()": [109, 119], "VirtualContainerTest::::getAbsLoc()": [121, 130], "VirtualContainerTest::::testReadFileNoChange()": [139, 158], "VirtualContainerTest::::testGetFile()": [160, 211], "VirtualContainerTest::::testGetObj()": [213, 271]}, "reverse_method_lines_dic": {"72": "VirtualContainer::::getContainerName()", "73": "VirtualContainer::::getContainerName()", "74": "VirtualContainer::::getContainerName()", "141": "VirtualContainer::::getSysAbsPath()", "142": "VirtualContainer::::getSysAbsPath()", "143": "VirtualContainer::::getSysAbsPath()", "152": "VirtualContainer::::putFile(java.nio.file.Path)", "153": "VirtualContainer::::putFile(java.nio.file.Path)", "154": "VirtualContainer::::putFile(java.nio.file.Path)", "155": "VirtualContainer::::putFile(java.nio.file.Path)", "164": "VirtualContainer::::putFileWithPath(java.nio.file.Path)", "165": "VirtualContainer::::putFileWithPath(java.nio.file.Path)", "166": "VirtualContainer::::putFileWithPath(java.nio.file.Path)", "167": "VirtualContainer::::putFileWithPath(java.nio.file.Path)", "168": "VirtualContainer::::putFileWithPath(java.nio.file.Path)", "169": "VirtualContainer::::putFileWithPath(java.nio.file.Path)", "170": "VirtualContainer::::putFileWithPath(java.nio.file.Path)", "171": "VirtualContainer::::putFileWithPath(java.nio.file.Path)", "172": "VirtualContainer::::putFileWithPath(java.nio.file.Path)", "173": "VirtualContainer::::putFileWithPath(java.nio.file.Path)", "174": "VirtualContainer::::putFileWithPath(java.nio.file.Path)", "175": "VirtualContainer::::putFileWithPath(java.nio.file.Path)", "176": "VirtualContainer::::putFileWithPath(java.nio.file.Path)", "177": "VirtualContainer::::putFileWithPath(java.nio.file.Path)", "178": "VirtualContainer::::putFileWithPath(java.nio.file.Path)", "179": "VirtualContainer::::putFileWithPath(java.nio.file.Path)", "180": "VirtualContainer::::putFileWithPath(java.nio.file.Path)", "181": "VirtualContainer::::putFileWithPath(java.nio.file.Path)", "182": "VirtualContainer::::putFileWithPath(java.nio.file.Path)", "183": "VirtualContainer::::putFileWithPath(java.nio.file.Path)", "184": "VirtualContainer::::putFileWithPath(java.nio.file.Path)", "185": "VirtualContainer::::putFileWithPath(java.nio.file.Path)", "186": "VirtualContainer::::putFileWithPath(java.nio.file.Path)", "202": "VirtualContainer::::addRaw(java.lang.String,java.io.InputStream)", "203": "VirtualContainer::::addRaw(java.lang.String,java.io.InputStream)", "204": "VirtualContainer::::addRaw(java.lang.String,java.io.InputStream)", "205": "VirtualContainer::::addRaw(java.lang.String,java.io.InputStream)", "206": "VirtualContainer::::addRaw(java.lang.String,java.io.InputStream)", "207": "VirtualContainer::::addRaw(java.lang.String,java.io.InputStream)", "208": "VirtualContainer::::addRaw(java.lang.String,java.io.InputStream)", "209": "VirtualContainer::::addRaw(java.lang.String,java.io.InputStream)", "210": "VirtualContainer::::addRaw(java.lang.String,java.io.InputStream)", "211": "VirtualContainer::::addRaw(java.lang.String,java.io.InputStream)", "212": "VirtualContainer::::addRaw(java.lang.String,java.io.InputStream)", "213": "VirtualContainer::::addRaw(java.lang.String,java.io.InputStream)", "214": "VirtualContainer::::addRaw(java.lang.String,java.io.InputStream)", "215": "VirtualContainer::::addRaw(java.lang.String,java.io.InputStream)", "287": "VirtualContainer::::getObj(java.lang.String[])", "288": "VirtualContainer::::getObj(java.lang.String[])", "289": "VirtualContainer::::getObj(java.lang.String[])", "290": "VirtualContainer::::getObj(java.lang.String[])", "291": "VirtualContainer::::getObj(java.lang.String[])", "292": "VirtualContainer::::getObj(java.lang.String[])", "293": "VirtualContainer::::getObj(java.lang.String[])", "294": "VirtualContainer::::getObj(java.lang.String[])", "295": "VirtualContainer::::getObj(java.lang.String[])", "296": "VirtualContainer::::getObj(java.lang.String[])", "297": "VirtualContainer::::getObj(java.lang.String[])", "298": "VirtualContainer::::getObj(java.lang.String[])", "299": "VirtualContainer::::getObj(java.lang.String[])", "300": "VirtualContainer::::getObj(java.lang.String[])", "301": "VirtualContainer::::getObj(java.lang.String[])", "302": "VirtualContainer::::getObj(java.lang.String[])", "303": "VirtualContainer::::getObj(java.lang.String[])", "304": "VirtualContainer::::getObj(java.lang.String[])", "305": "VirtualContainer::::getObj(java.lang.String[])", "306": "VirtualContainer::::getObj(java.lang.String[])", "307": "VirtualContainer::::getObj(java.lang.String[])", "308": "VirtualContainer::::getObj(java.lang.String[])", "309": "VirtualContainer::::getObj(java.lang.String[])", "310": "VirtualContainer::::getObj(java.lang.String[])", "311": "VirtualContainer::::getObj(java.lang.String[])", "312": "VirtualContainer::::getObj(java.lang.String[])", "313": "VirtualContainer::::getObj(java.lang.String[])", "314": "VirtualContainer::::getObj(java.lang.String[])", "382": "VirtualContainer::::getObj(java.lang.String)", "383": "VirtualContainer::::getObj(java.lang.String)", "384": "VirtualContainer::::getObj(java.lang.String)", "385": "VirtualContainer::::getObj(java.lang.String)", "386": "VirtualContainer::::getObj(java.lang.String)", "387": "VirtualContainer::::getObj(java.lang.String)", "388": "VirtualContainer::::getObj(java.lang.String)", "389": "VirtualContainer::::getObj(java.lang.String)", "390": "VirtualContainer::::getObj(java.lang.String)", "391": "VirtualContainer::::getObj(java.lang.String)", "392": "VirtualContainer::::getObj(java.lang.String)", "393": "VirtualContainer::::getObj(java.lang.String)", "394": "VirtualContainer::::getObj(java.lang.String)", "395": "VirtualContainer::::getObj(java.lang.String)", "396": "VirtualContainer::::getObj(java.lang.String)", "397": "VirtualContainer::::getObj(java.lang.String)", "398": "VirtualContainer::::getObj(java.lang.String)", "451": "VirtualContainer::::getFile(java.lang.String)", "452": "VirtualContainer::::getFile(java.lang.String)", "453": "VirtualContainer::::getFile(java.lang.String)", "454": "VirtualContainer::::getFile(java.lang.String)", "455": "VirtualContainer::::getFile(java.lang.String)", "456": "VirtualContainer::::getFile(java.lang.String)", "457": "VirtualContainer::::getFile(java.lang.String)", "458": "VirtualContainer::::getFile(java.lang.String)", "459": "VirtualContainer::::getFile(java.lang.String)", "460": "VirtualContainer::::getFile(java.lang.String)", "475": "VirtualContainer::::obtainContainer(java.lang.String,java.util.function.Function<java.nio.file.Path, R>)", "476": "VirtualContainer::::obtainContainer(java.lang.String,java.util.function.Function<java.nio.file.Path, R>)", "477": "VirtualContainer::::obtainContainer(java.lang.String,java.util.function.Function<java.nio.file.Path, R>)", "478": "VirtualContainer::::obtainContainer(java.lang.String,java.util.function.Function<java.nio.file.Path, R>)", "479": "VirtualContainer::::obtainContainer(java.lang.String,java.util.function.Function<java.nio.file.Path, R>)", "480": "VirtualContainer::::obtainContainer(java.lang.String,java.util.function.Function<java.nio.file.Path, R>)", "481": "VirtualContainer::::obtainContainer(java.lang.String,java.util.function.Function<java.nio.file.Path, R>)", "482": "VirtualContainer::::obtainContainer(java.lang.String,java.util.function.Function<java.nio.file.Path, R>)", "483": "VirtualContainer::::obtainContainer(java.lang.String,java.util.function.Function<java.nio.file.Path, R>)", "484": "VirtualContainer::::obtainContainer(java.lang.String,java.util.function.Function<java.nio.file.Path, R>)", "485": "VirtualContainer::::obtainContainer(java.lang.String,java.util.function.Function<java.nio.file.Path, R>)", "486": "VirtualContainer::::obtainContainer(java.lang.String,java.util.function.Function<java.nio.file.Path, R>)", "487": "VirtualContainer::::obtainContainer(java.lang.String,java.util.function.Function<java.nio.file.Path, R>)", "488": "VirtualContainer::::obtainContainer(java.lang.String,java.util.function.Function<java.nio.file.Path, R>)", "489": "VirtualContainer::::obtainContainer(java.lang.String,java.util.function.Function<java.nio.file.Path, R>)", "490": "VirtualContainer::::obtainContainer(java.lang.String,java.util.function.Function<java.nio.file.Path, R>)", "491": "VirtualContainer::::obtainContainer(java.lang.String,java.util.function.Function<java.nio.file.Path, R>)", "492": "VirtualContainer::::obtainContainer(java.lang.String,java.util.function.Function<java.nio.file.Path, R>)", "493": "VirtualContainer::::obtainContainer(java.lang.String,java.util.function.Function<java.nio.file.Path, R>)", "494": "VirtualContainer::::obtainContainer(java.lang.String,java.util.function.Function<java.nio.file.Path, R>)", "495": "VirtualContainer::::obtainContainer(java.lang.String,java.util.function.Function<java.nio.file.Path, R>)", "496": "VirtualContainer::::obtainContainer(java.lang.String,java.util.function.Function<java.nio.file.Path, R>)", "497": "VirtualContainer::::obtainContainer(java.lang.String,java.util.function.Function<java.nio.file.Path, R>)", "508": "VirtualContainer::::getContainer(java.lang.String,java.util.function.Function<java.nio.file.Path, R>)", "509": "VirtualContainer::::getContainer(java.lang.String,java.util.function.Function<java.nio.file.Path, R>)", "510": "VirtualContainer::::getContainer(java.lang.String,java.util.function.Function<java.nio.file.Path, R>)", "511": "VirtualContainer::::getContainer(java.lang.String,java.util.function.Function<java.nio.file.Path, R>)", "512": "VirtualContainer::::getContainer(java.lang.String,java.util.function.Function<java.nio.file.Path, R>)", "513": "VirtualContainer::::getContainer(java.lang.String,java.util.function.Function<java.nio.file.Path, R>)", "514": "VirtualContainer::::getContainer(java.lang.String,java.util.function.Function<java.nio.file.Path, R>)", "515": "VirtualContainer::::getContainer(java.lang.String,java.util.function.Function<java.nio.file.Path, R>)", "516": "VirtualContainer::::getContainer(java.lang.String,java.util.function.Function<java.nio.file.Path, R>)", "517": "VirtualContainer::::getContainer(java.lang.String,java.util.function.Function<java.nio.file.Path, R>)", "518": "VirtualContainer::::getContainer(java.lang.String,java.util.function.Function<java.nio.file.Path, R>)", "519": "VirtualContainer::::getContainer(java.lang.String,java.util.function.Function<java.nio.file.Path, R>)", "520": "VirtualContainer::::getContainer(java.lang.String,java.util.function.Function<java.nio.file.Path, R>)", "521": "VirtualContainer::::getContainer(java.lang.String,java.util.function.Function<java.nio.file.Path, R>)", "522": "VirtualContainer::::getContainer(java.lang.String,java.util.function.Function<java.nio.file.Path, R>)", "523": "VirtualContainer::::getContainer(java.lang.String,java.util.function.Function<java.nio.file.Path, R>)", "524": "VirtualContainer::::getContainer(java.lang.String,java.util.function.Function<java.nio.file.Path, R>)", "525": "VirtualContainer::::getContainer(java.lang.String,java.util.function.Function<java.nio.file.Path, R>)", "526": "VirtualContainer::::getContainer(java.lang.String,java.util.function.Function<java.nio.file.Path, R>)", "527": "VirtualContainer::::getContainer(java.lang.String,java.util.function.Function<java.nio.file.Path, R>)", "534": "VirtualContainer::::getParent()", "535": "VirtualContainer::::getParent()", "536": "VirtualContainer::::getParent()", "544": "VirtualContainer::::setParent(org.ofdrw.pkg.container.VirtualContainer)", "545": "VirtualContainer::::setParent(org.ofdrw.pkg.container.VirtualContainer)", "546": "VirtualContainer::::setParent(org.ofdrw.pkg.container.VirtualContainer)", "547": "VirtualContainer::::setParent(org.ofdrw.pkg.container.VirtualContainer)", "554": "VirtualContainer::::getContainerPath()", "555": "VirtualContainer::::getContainerPath()", "556": "VirtualContainer::::getContainerPath()", "565": "VirtualContainer::::exit(java.lang.String)", "566": "VirtualContainer::::exit(java.lang.String)", "567": "VirtualContainer::::exit(java.lang.String)", "568": "VirtualContainer::::exit(java.lang.String)", "576": "VirtualContainer::::exist(java.lang.String)", "577": "VirtualContainer::::exist(java.lang.String)", "578": "VirtualContainer::::exist(java.lang.String)", "579": "VirtualContainer::::exist(java.lang.String)", "580": "VirtualContainer::::exist(java.lang.String)", "581": "VirtualContainer::::exist(java.lang.String)", "582": "VirtualContainer::::exist(java.lang.String)", "583": "VirtualContainer::::exist(java.lang.String)", "584": "VirtualContainer::::exist(java.lang.String)", "585": "VirtualContainer::::exist(java.lang.String)", "586": "VirtualContainer::::exist(java.lang.String)", "587": "VirtualContainer::::exist(java.lang.String)", "588": "VirtualContainer::::exist(java.lang.String)", "598": "VirtualContainer::::deleteFile(java.lang.String)", "599": "VirtualContainer::::deleteFile(java.lang.String)", "600": "VirtualContainer::::deleteFile(java.lang.String)", "601": "VirtualContainer::::deleteFile(java.lang.String)", "602": "VirtualContainer::::deleteFile(java.lang.String)", "603": "VirtualContainer::::deleteFile(java.lang.String)", "604": "VirtualContainer::::deleteFile(java.lang.String)", "605": "VirtualContainer::::deleteFile(java.lang.String)", "606": "VirtualContainer::::deleteFile(java.lang.String)", "607": "VirtualContainer::::deleteFile(java.lang.String)", "608": "VirtualContainer::::deleteFile(java.lang.String)", "609": "VirtualContainer::::deleteFile(java.lang.String)", "615": "VirtualContainer::::clean()", "616": "VirtualContainer::::clean()", "617": "VirtualContainer::::clean()", "618": "VirtualContainer::::clean()", "619": "VirtualContainer::::clean()", "620": "VirtualContainer::::clean()", "621": "VirtualContainer::::clean()", "622": "VirtualContainer::::clean()", "623": "VirtualContainer::::clean()", "624": "VirtualContainer::::clean()", "625": "VirtualContainer::::clean()", "626": "VirtualContainer::::clean()", "627": "VirtualContainer::::clean()", "634": "VirtualContainer::::flush()", "635": "VirtualContainer::::flush()", "636": "VirtualContainer::::flush()", "637": "VirtualContainer::::flush()", "638": "VirtualContainer::::flush()", "639": "VirtualContainer::::flush()", "640": "VirtualContainer::::flush()", "641": "VirtualContainer::::flush()", "642": "VirtualContainer::::flush()", "643": "VirtualContainer::::flush()", "644": "VirtualContainer::::flush()", "645": "VirtualContainer::::flush()", "646": "VirtualContainer::::flush()", "647": "VirtualContainer::::flush()", "648": "VirtualContainer::::flush()", "649": "VirtualContainer::::flush()", "650": "VirtualContainer::::flush()", "651": "VirtualContainer::::flush()", "652": "VirtualContainer::::flush()", "661": "VirtualContainer::::flushContainerByName(java.lang.String)", "662": "VirtualContainer::::flushContainerByName(java.lang.String)", "663": "VirtualContainer::::flushContainerByName(java.lang.String)", "664": "VirtualContainer::::flushContainerByName(java.lang.String)", "665": "VirtualContainer::::flushContainerByName(java.lang.String)", "666": "VirtualContainer::::flushContainerByName(java.lang.String)", "667": "VirtualContainer::::flushContainerByName(java.lang.String)", "668": "VirtualContainer::::flushContainerByName(java.lang.String)", "669": "VirtualContainer::::flushContainerByName(java.lang.String)", "670": "VirtualContainer::::flushContainerByName(java.lang.String)", "679": "VirtualContainer::::flushFileByName(java.lang.String)", "680": "VirtualContainer::::flushFileByName(java.lang.String)", "681": "VirtualContainer::::flushFileByName(java.lang.String)", "682": "VirtualContainer::::flushFileByName(java.lang.String)", "683": "VirtualContainer::::flushFileByName(java.lang.String)", "684": "VirtualContainer::::flushFileByName(java.lang.String)", "685": "VirtualContainer::::flushFileByName(java.lang.String)", "686": "VirtualContainer::::flushFileByName(java.lang.String)", "687": "VirtualContainer::::flushFileByName(java.lang.String)", "688": "VirtualContainer::::flushFileByName(java.lang.String)", "689": "VirtualContainer::::flushFileByName(java.lang.String)", "690": "VirtualContainer::::flushFileByName(java.lang.String)", "691": "VirtualContainer::::flushFileByName(java.lang.String)", "692": "VirtualContainer::::flushFileByName(java.lang.String)", "699": "VirtualContainer::::getAbsLoc()", "700": "VirtualContainer::::getAbsLoc()", "701": "VirtualContainer::::getAbsLoc()", "702": "VirtualContainer::::getAbsLoc()", "703": "VirtualContainer::::getAbsLoc()", "704": "VirtualContainer::::getAbsLoc()", "705": "VirtualContainer::::getAbsLoc()", "706": "VirtualContainer::::getAbsLoc()", "707": "VirtualContainer::::getAbsLoc()", "716": "VirtualContainer::::putFile(java.lang.String,java.io.InputStream)", "717": "VirtualContainer::::putFile(java.lang.String,java.io.InputStream)", "718": "VirtualContainer::::putFile(java.lang.String,java.io.InputStream)", "719": "VirtualContainer::::putFile(java.lang.String,java.io.InputStream)", "720": "VirtualContainer::::putFile(java.lang.String,java.io.InputStream)", "721": "VirtualContainer::::putFile(java.lang.String,java.io.InputStream)", "722": "VirtualContainer::::putFile(java.lang.String,java.io.InputStream)", "723": "VirtualContainer::::putFile(java.lang.String,java.io.InputStream)", "724": "VirtualContainer::::putFile(java.lang.String,java.io.InputStream)", "725": "VirtualContainer::::putFile(java.lang.String,java.io.InputStream)", "726": "VirtualContainer::::putFile(java.lang.String,java.io.InputStream)", "727": "VirtualContainer::::putFile(java.lang.String,java.io.InputStream)", "728": "VirtualContainer::::putFile(java.lang.String,java.io.InputStream)", "736": "VirtualContainer::::putFile(java.lang.String,byte[])", "737": "VirtualContainer::::putFile(java.lang.String,byte[])", "738": "VirtualContainer::::putFile(java.lang.String,byte[])", "739": "VirtualContainer::::putFile(java.lang.String,byte[])", "740": "VirtualContainer::::putFile(java.lang.String,byte[])", "741": "VirtualContainer::::putFile(java.lang.String,byte[])", "742": "VirtualContainer::::putFile(java.lang.String,byte[])", "743": "VirtualContainer::::putFile(java.lang.String,byte[])", "744": "VirtualContainer::::putFile(java.lang.String,byte[])", "745": "VirtualContainer::::putFile(java.lang.String,byte[])", "746": "VirtualContainer::::putFile(java.lang.String,byte[])", "747": "VirtualContainer::::putFile(java.lang.String,byte[])", "751": "VirtualContainer::::close()", "752": "VirtualContainer::::close()", "753": "VirtualContainer::::close()", "754": "VirtualContainer::::close()", "755": "VirtualContainer::::close()"}, "test_reverse_method_lines_dic": {"37": "VirtualContainerTest::::init()", "38": "VirtualContainerTest::::init()", "39": "VirtualContainerTest::::init()", "40": "VirtualContainerTest::::init()", "41": "VirtualContainerTest::::init()", "42": "VirtualContainerTest::::init()", "43": "VirtualContainerTest::::init()", "44": "VirtualContainerTest::::init()", "45": "VirtualContainerTest::::init()", "46": "VirtualContainerTest::::init()", "48": "VirtualContainerTest::::putFile()", "49": "VirtualContainerTest::::putFile()", "50": "VirtualContainerTest::::putFile()", "51": "VirtualContainerTest::::putFile()", "52": "VirtualContainerTest::::putFile()", "53": "VirtualContainerTest::::putFile()", "54": "VirtualContainerTest::::putFile()", "55": "VirtualContainerTest::::putFile()", "56": "VirtualContainerTest::::putFile()", "57": "VirtualContainerTest::::putFile()", "58": "VirtualContainerTest::::putFile()", "59": "VirtualContainerTest::::putFile()", "60": "VirtualContainerTest::::putFile()", "61": "VirtualContainerTest::::putFile()", "62": "VirtualContainerTest::::putFile()", "63": "VirtualContainerTest::::putFile()", "64": "VirtualContainerTest::::putFile()", "65": "VirtualContainerTest::::putFile()", "66": "VirtualContainerTest::::putFile()", "67": "VirtualContainerTest::::putFile()", "68": "VirtualContainerTest::::putFile()", "70": "VirtualContainerTest::::getFile()", "71": "VirtualContainerTest::::getFile()", "72": "VirtualContainerTest::::getFile()", "73": "VirtualContainerTest::::getFile()", "74": "VirtualContainerTest::::getFile()", "75": "VirtualContainerTest::::getFile()", "76": "VirtualContainerTest::::getFile()", "77": "VirtualContainerTest::::getFile()", "78": "VirtualContainerTest::::getFile()", "79": "VirtualContainerTest::::getFile()", "80": "VirtualContainerTest::::getFile()", "82": "VirtualContainerTest::::putObj()", "83": "VirtualContainerTest::::putObj()", "84": "VirtualContainerTest::::putObj()", "85": "VirtualContainerTest::::putObj()", "86": "VirtualContainerTest::::putObj()", "87": "VirtualContainerTest::::putObj()", "88": "VirtualContainerTest::::putObj()", "89": "VirtualContainerTest::::putObj()", "90": "VirtualContainerTest::::putObj()", "91": "VirtualContainerTest::::putObj()", "92": "VirtualContainerTest::::putObj()", "93": "VirtualContainerTest::::putObj()", "95": "VirtualContainerTest::::getObj()", "96": "VirtualContainerTest::::getObj()", "97": "VirtualContainerTest::::getObj()", "98": "VirtualContainerTest::::getObj()", "99": "VirtualContainerTest::::getObj()", "100": "VirtualContainerTest::::getObj()", "101": "VirtualContainerTest::::getObj()", "102": "VirtualContainerTest::::getObj()", "104": "VirtualContainerTest::::getContainerName()", "105": "VirtualContainerTest::::getContainerName()", "106": "VirtualContainerTest::::getContainerName()", "107": "VirtualContainerTest::::getContainerName()", "109": "VirtualContainerTest::::obtainContainer()", "110": "VirtualContainerTest::::obtainContainer()", "111": "VirtualContainerTest::::obtainContainer()", "112": "VirtualContainerTest::::obtainContainer()", "113": "VirtualContainerTest::::obtainContainer()", "114": "VirtualContainerTest::::obtainContainer()", "115": "VirtualContainerTest::::obtainContainer()", "116": "VirtualContainerTest::::obtainContainer()", "117": "VirtualContainerTest::::obtainContainer()", "118": "VirtualContainerTest::::obtainContainer()", "119": "VirtualContainerTest::::obtainContainer()", "121": "VirtualContainerTest::::getAbsLoc()", "122": "VirtualContainerTest::::getAbsLoc()", "123": "VirtualContainerTest::::getAbsLoc()", "124": "VirtualContainerTest::::getAbsLoc()", "125": "VirtualContainerTest::::getAbsLoc()", "126": "VirtualContainerTest::::getAbsLoc()", "127": "VirtualContainerTest::::getAbsLoc()", "128": "VirtualContainerTest::::getAbsLoc()", "129": "VirtualContainerTest::::getAbsLoc()", "130": "VirtualContainerTest::::getAbsLoc()", "139": "VirtualContainerTest::::testReadFileNoChange()", "140": "VirtualContainerTest::::testReadFileNoChange()", "141": "VirtualContainerTest::::testReadFileNoChange()", "142": "VirtualContainerTest::::testReadFileNoChange()", "143": "VirtualContainerTest::::testReadFileNoChange()", "144": "VirtualContainerTest::::testReadFileNoChange()", "145": "VirtualContainerTest::::testReadFileNoChange()", "146": "VirtualContainerTest::::testReadFileNoChange()", "147": "VirtualContainerTest::::testReadFileNoChange()", "148": "VirtualContainerTest::::testReadFileNoChange()", "149": "VirtualContainerTest::::testReadFileNoChange()", "150": "VirtualContainerTest::::testReadFileNoChange()", "151": "VirtualContainerTest::::testReadFileNoChange()", "152": "VirtualContainerTest::::testReadFileNoChange()", "153": "VirtualContainerTest::::testReadFileNoChange()", "154": "VirtualContainerTest::::testReadFileNoChange()", "155": "VirtualContainerTest::::testReadFileNoChange()", "156": "VirtualContainerTest::::testReadFileNoChange()", "157": "VirtualContainerTest::::testReadFileNoChange()", "158": "VirtualContainerTest::::testReadFileNoChange()", "160": "VirtualContainerTest::::testGetFile()", "161": "VirtualContainerTest::::testGetFile()", "162": "VirtualContainerTest::::testGetFile()", "163": "VirtualContainerTest::::testGetFile()", "164": "VirtualContainerTest::::testGetFile()", "165": "VirtualContainerTest::::testGetFile()", "166": "VirtualContainerTest::::testGetFile()", "167": "VirtualContainerTest::::testGetFile()", "168": "VirtualContainerTest::::testGetFile()", "169": "VirtualContainerTest::::testGetFile()", "170": "VirtualContainerTest::::testGetFile()", "171": "VirtualContainerTest::::testGetFile()", "172": "VirtualContainerTest::::testGetFile()", "173": "VirtualContainerTest::::testGetFile()", "174": "VirtualContainerTest::::testGetFile()", "175": "VirtualContainerTest::::testGetFile()", "176": "VirtualContainerTest::::testGetFile()", "177": "VirtualContainerTest::::testGetFile()", "178": "VirtualContainerTest::::testGetFile()", "179": "VirtualContainerTest::::testGetFile()", "180": "VirtualContainerTest::::testGetFile()", "181": "VirtualContainerTest::::testGetFile()", "182": "VirtualContainerTest::::testGetFile()", "183": "VirtualContainerTest::::testGetFile()", "184": "VirtualContainerTest::::testGetFile()", "185": "VirtualContainerTest::::testGetFile()", "186": "VirtualContainerTest::::testGetFile()", "187": "VirtualContainerTest::::testGetFile()", "188": "VirtualContainerTest::::testGetFile()", "189": "VirtualContainerTest::::testGetFile()", "190": "VirtualContainerTest::::testGetFile()", "191": "VirtualContainerTest::::testGetFile()", "192": "VirtualContainerTest::::testGetFile()", "193": "VirtualContainerTest::::testGetFile()", "194": "VirtualContainerTest::::testGetFile()", "195": "VirtualContainerTest::::testGetFile()", "196": "VirtualContainerTest::::testGetFile()", "197": "VirtualContainerTest::::testGetFile()", "198": "VirtualContainerTest::::testGetFile()", "199": "VirtualContainerTest::::testGetFile()", "200": "VirtualContainerTest::::testGetFile()", "201": "VirtualContainerTest::::testGetFile()", "202": "VirtualContainerTest::::testGetFile()", "203": "VirtualContainerTest::::testGetFile()", "204": "VirtualContainerTest::::testGetFile()", "205": "VirtualContainerTest::::testGetFile()", "206": "VirtualContainerTest::::testGetFile()", "207": "VirtualContainerTest::::testGetFile()", "208": "VirtualContainerTest::::testGetFile()", "209": "VirtualContainerTest::::testGetFile()", "210": "VirtualContainerTest::::testGetFile()", "211": "VirtualContainerTest::::testGetFile()", "213": "VirtualContainerTest::::testGetObj()", "214": "VirtualContainerTest::::testGetObj()", "215": "VirtualContainerTest::::testGetObj()", "216": "VirtualContainerTest::::testGetObj()", "217": "VirtualContainerTest::::testGetObj()", "218": "VirtualContainerTest::::testGetObj()", "219": "VirtualContainerTest::::testGetObj()", "220": "VirtualContainerTest::::testGetObj()", "221": "VirtualContainerTest::::testGetObj()", "222": "VirtualContainerTest::::testGetObj()", "223": "VirtualContainerTest::::testGetObj()", "224": "VirtualContainerTest::::testGetObj()", "225": "VirtualContainerTest::::testGetObj()", "226": "VirtualContainerTest::::testGetObj()", "227": "VirtualContainerTest::::testGetObj()", "228": "VirtualContainerTest::::testGetObj()", "229": "VirtualContainerTest::::testGetObj()", "230": "VirtualContainerTest::::testGetObj()", "231": "VirtualContainerTest::::testGetObj()", "232": "VirtualContainerTest::::testGetObj()", "233": "VirtualContainerTest::::testGetObj()", "234": "VirtualContainerTest::::testGetObj()", "235": "VirtualContainerTest::::testGetObj()", "236": "VirtualContainerTest::::testGetObj()", "237": "VirtualContainerTest::::testGetObj()", "238": "VirtualContainerTest::::testGetObj()", "239": "VirtualContainerTest::::testGetObj()", "240": "VirtualContainerTest::::testGetObj()", "241": "VirtualContainerTest::::testGetObj()", "242": "VirtualContainerTest::::testGetObj()", "243": "VirtualContainerTest::::testGetObj()", "244": "VirtualContainerTest::::testGetObj()", "245": "VirtualContainerTest::::testGetObj()", "246": "VirtualContainerTest::::testGetObj()", "247": "VirtualContainerTest::::testGetObj()", "248": "VirtualContainerTest::::testGetObj()", "249": "VirtualContainerTest::::testGetObj()", "250": "VirtualContainerTest::::testGetObj()", "251": "VirtualContainerTest::::testGetObj()", "252": "VirtualContainerTest::::testGetObj()", "253": "VirtualContainerTest::::testGetObj()", "254": "VirtualContainerTest::::testGetObj()", "255": "VirtualContainerTest::::testGetObj()", "256": "VirtualContainerTest::::testGetObj()", "257": "VirtualContainerTest::::testGetObj()", "258": "VirtualContainerTest::::testGetObj()", "259": "VirtualContainerTest::::testGetObj()", "260": "VirtualContainerTest::::testGetObj()", "261": "VirtualContainerTest::::testGetObj()", "262": "VirtualContainerTest::::testGetObj()", "263": "VirtualContainerTest::::testGetObj()", "264": "VirtualContainerTest::::testGetObj()", "265": "VirtualContainerTest::::testGetObj()", "266": "VirtualContainerTest::::testGetObj()", "267": "VirtualContainerTest::::testGetObj()", "268": "VirtualContainerTest::::testGetObj()", "269": "VirtualContainerTest::::testGetObj()", "270": "VirtualContainerTest::::testGetObj()", "271": "VirtualContainerTest::::testGetObj()"}, "tests": [{"test_lines": [48, 68], "covered_lines": [76, 77, 78, 79, 80, 81, 82, 91, 92, 96, 104, 105, 107, 153, 154, 165, 169, 170, 172, 173, 174, 176, 179, 180, 184, 185, 636, 647, 650, 651, 652]}, {"test_lines": [70, 80], "covered_lines": [76, 77, 78, 79, 80, 81, 82, 91, 92, 96, 104, 105, 107, 153, 154, 165, 169, 170, 172, 173, 184, 185, 452, 455, 456, 459]}, {"test_lines": [82, 93], "covered_lines": [76, 77, 78, 79, 80, 81, 82, 91, 92, 96, 104, 105, 107, 142, 225, 228, 231, 235, 236, 429, 430, 636, 637, 638, 639, 642, 643, 645, 647, 650, 651, 652]}, {"test_lines": [95, 102], "covered_lines": [76, 77, 78, 79, 80, 81, 82, 91, 92, 96, 104, 105, 107, 153, 154, 165, 169, 170, 172, 173, 184, 185, 383, 386, 387, 389, 391, 393, 395, 397, 409, 410, 412, 413, 414, 415, 452, 455, 456, 459]}, {"test_lines": [104, 107], "covered_lines": [73, 76, 77, 78, 79, 80, 81, 82, 91, 92, 96, 104, 105, 107]}, {"test_lines": [109, 119], "covered_lines": [76, 77, 78, 79, 80, 81, 82, 91, 92, 96, 99, 102, 104, 105, 107, 477, 480, 484, 485, 486, 488, 490, 492, 493, 509, 510, 515, 516, 518, 520, 522, 523, 545, 546]}, {"test_lines": [121, 130], "covered_lines": [73, 76, 77, 78, 79, 80, 81, 82, 91, 92, 96, 99, 102, 104, 105, 107, 142, 477, 480, 484, 485, 486, 488, 490, 492, 493, 545, 546, 700, 701, 702, 704, 706]}, {"test_lines": [139, 158], "covered_lines": [73, 76, 77, 78, 79, 80, 81, 82, 91, 92, 96, 99, 102, 104, 105, 107, 153, 154, 165, 169, 170, 172, 173, 184, 185, 383, 386, 387, 389, 391, 393, 395, 397, 409, 410, 412, 413, 414, 415, 429, 432, 433, 437, 438, 452, 455, 456, 459, 477, 480, 484, 485, 486, 488, 490, 492, 493, 545, 546, 636, 637, 638, 639, 642, 645, 647, 648, 649, 650, 651, 652, 754, 755]}, {"test_lines": [160, 211], "covered_lines": [76, 77, 78, 79, 80, 81, 82, 91, 92, 96, 104, 105, 107, 335, 339, 340, 342, 343, 346, 347, 349, 350, 356, 357, 358, 360, 363, 364, 367, 368, 371, 509, 510, 515, 516, 518, 520, 522, 523, 545, 546, 555, 700, 701, 702, 704, 706]}, {"test_lines": [213, 271], "covered_lines": [76, 77, 78, 79, 80, 81, 82, 91, 92, 96, 104, 105, 107, 255, 258, 260, 261, 263, 264, 266, 270, 271, 272, 274, 277, 288, 291, 293, 298, 299, 301, 306, 308, 310, 311, 312, 383, 386, 387, 389, 391, 393, 395, 397, 409, 410, 412, 413, 414, 415, 452, 455, 456, 457, 459, 509, 510, 511, 515, 516, 518, 520, 522, 523, 525, 545, 546, 700, 701, 702, 704, 706]}]}, "/bernard/dataset_construction/prep/repos/ofdrw/ofdrw-pkg/src/main/java/org/ofdrw/pkg/container/OFDDir.java": {"class_content": ["package org.ofdrw.pkg.container;\n", "\n", "import net.lingala.zip4j.ZipFile;\n", "import org.apache.commons.io.FilenameUtils;\n", "import org.dom4j.DocumentException;\n", "import org.dom4j.Element;\n", "import org.jetbrains.annotations.Nullable;\n", "import org.ofdrw.core.basicStructure.ofd.DocBody;\n", "import org.ofdrw.core.basicStructure.ofd.OFD;\n", "import org.ofdrw.core.basicType.ST_Loc;\n", "import org.ofdrw.core.crypto.encryt.Encryptions;\n", "\n", "import java.io.*;\n", "import java.nio.file.FileVisitResult;\n", "import java.nio.file.Files;\n", "import java.nio.file.Path;\n", "import java.nio.file.SimpleFileVisitor;\n", "import java.nio.file.attribute.BasicFileAttributes;\n", "import java.nio.file.attribute.FileTime;\n", "import java.util.List;\n", "import java.util.zip.ZipEntry;\n", "import java.util.zip.ZipOutputStream;\n", "\n", "\n", "/**\n", " * OFD\u6587\u6863\u5bf9\u8c61\n", " * <p>\n", " * \u8bf7\u663e\u793a\u7684\u8c03\u7528Close\u6216clean\u65b9\u6cd5\u6e05\u9664\u5de5\u4f5c\u8fc7\u7a0b\u4e2d\u7684\u6587\u4ef6\u548c\u76ee\u5f55\n", " *\n", " * @author \u6743\u89c2\u5b87\n", " * @since 2020-01-18 13:00:45\n", " */\n", "public class OFDDir extends VirtualContainer {\n", "\n", "    /**\n", "     * OFD\u6587\u6863\u4e3b\u5165\u53e3\u6587\u4ef6\u540d\u79f0\n", "     */\n", "    public static final String OFDFileName = \"OFD.xml\";\n", "    /**\n", "     * \u89e3\u5bc6\u5165\u53e3\u6587\u4ef6\u540d\u79f0\n", "     */\n", "    public static final String EncryptionsFileName = \"Encryptions.xml\";\n", "\n", "    /**\n", "     * OFD\u9632\u6b62\u5939\u5e26\u6587\u4ef6\n", "     */\n", "    public static final String OFDEntriesFileName = \"OFDEntries.xml\";\n", "\n", "    /**\n", "     * \u6700\u5927\u6587\u6863\u7d22\u5f15 + 1\n", "     */\n", "    private int maxDocIndex = 0;\n", "\n", "    /**\n", "     * \u65b0\u5efa\u4e00\u4e2aOFD\u6587\u6863\n", "     *\n", "     * @return OFD\u6587\u6863\n", "     */\n", "    public static OFDDir newOFD() {\n", "        try {\n", "            Path tempDirectory = Files.createTempDirectory(\"ofd-tmp-\");\n", "//            System.out.println(\">> \u5de5\u4f5c\u76ee\u5f55: \" + tempDirectory.toAbsolutePath());\n", "            return new OFDDir(tempDirectory);\n", "        } catch (IOException e) {\n", "            throw new RuntimeException(\"\u65e0\u6cd5\u521b\u5efaOFD\u865a\u62df\u5bb9\u5668\u5de5\u4f5c\u7a7a\u95f4\uff0c\u539f\u56e0\uff1a\" + e.getMessage(), e);\n", "        }\n", "    }\n", "\n", "    /**\n", "     * \u6307\u5b9a\u8def\u5f84\u521b\u5efa\u6216\u8bfb\u53d6OFD\u6587\u6863\u5bb9\u5668\n", "     * <p>\n", "     * \u5982\u679c\u5bb9\u5668\u6587\u6863\u5df2\u7ecf\u5b58\u5728\uff0c\u90a3\u4e48\u8bfb\u53d6\n", "     * <p>\n", "     * \u5982\u679c\u6587\u6863\u4e0d\u5b58\u5728\u90a3\u4e48\u521b\u5efa\u4e00\u4e2a\u6587\u6863\n", "     *\n", "     * @param fullDir \u5b8c\u6574\u8def\u5f84\n", "     * @throws IllegalArgumentException \u8def\u5f84\u53c2\u6570\u5f02\u5e38\n", "     */\n", "    public OFDDir(Path fullDir) throws IllegalArgumentException {\n", "        super(fullDir);\n", "        initContainer();\n", "    }\n", "\n", "    /**\n", "     * \u5bb9\u5668\u521d\u59cb\u5316\n", "     */\n", "    private void initContainer() {\n", "        File fullDirFile = new File(getSysAbsPath());\n", "        File[] files = fullDirFile.listFiles();\n", "        if (files != null) {\n", "            // \u904d\u5386\u5bb9\u5668\u4e2d\u5df2\u7ecf\u6709\u7684\u6587\u6863\u76ee\u5f55\uff0c\u521d\u59cb\u6587\u6863\u6570\u91cf\n", "            for (File f : files) {\n", "                // \u6587\u6863\u76ee\u5f55\u540d\u4e3a\uff1a Doc_N\n", "                if (f.getName().startsWith(DocDir.DocContainerPrefix)) {\n", "                    String numb = f.getName().replace(DocDir.DocContainerPrefix, \"\");\n", "                    int num = Integer.parseInt(numb);\n", "                    if (maxDocIndex <= num) {\n", "                        maxDocIndex = num + 1;\n", "                    }\n", "                }\n", "            }\n", "        }\n", "    }\n", "\n", "    /**\n", "     * \u83b7\u53d6\n", "     *\n", "     * @return \u6587\u6863\u4e3b\u5165\u53e3\u6587\u4ef6\u5bf9\u8c61\n", "     * @throws FileNotFoundException \u6587\u6863\u4e3b\u5165\u53e3\u6587\u4ef6\u4e0d\u5b58\u5728\n", "     * @throws DocumentException     \u6587\u6863\u4e3b\u5165\u53e3\u6587\u4ef6\u89e3\u6790\u5f02\u5e38\n", "     */\n", "    public OFD getOfd() throws FileNotFoundException, DocumentException {\n", "        Element obj = this.getObj(OFDFileName);\n", "        return new OFD(obj);\n", "    }\n", "\n", "    /**\n", "     * \u8bbe\u7f6e  \u6587\u6863\u4e3b\u5165\u53e3\u6587\u4ef6\u5bf9\u8c61\n", "     *\n", "     * @param ofd \u6587\u6863\u4e3b\u5165\u53e3\u6587\u4ef6\u5bf9\u8c61\n", "     * @return this\n", "     */\n", "    public OFDDir setOfd(OFD ofd) {\n", "        this.putObj(OFDFileName, ofd);\n", "        return this;\n", "    }\n", "\n", "    /**\n", "     * \u83b7\u53d6 \u89e3\u5bc6\u5165\u53e3\u6587\u4ef6\n", "     * <p>\n", "     * \u5982\u679c\u6587\u4ef6\u4e0d\u5b58\u5728\u90a3\u4e48\u521b\u5efa\u65b0\u7684\u6587\u4ef6\n", "     *\n", "     * @return \u89e3\u5bc6\u5165\u53e3\u6587\u4ef6\n", "     */\n", "    public Encryptions obtainEncryptions() {\n", "        Encryptions encryptions = null;\n", "        try {\n", "            encryptions = this.getEncryptions();\n", "        } catch (DocumentException e) {\n", "            throw new RuntimeException(\"\u65e0\u6cd5\u89e3\u6790\u89e3\u5bc6\u5165\u53e3\u6587\u4ef6\", e);\n", "        }\n", "        if (encryptions == null) {\n", "            encryptions = new Encryptions();\n", "            // \u6dfb\u52a0\u5230OFD\u5bb9\u5668\u5185\n", "            this.setEncryptions(encryptions);\n", "        }\n", "        return encryptions;\n", "    }\n", "\n", "    /**\n", "     * \u83b7\u53d6 \u89e3\u5bc6\u5165\u53e3\u6587\u4ef6\n", "     *\n", "     * @return \u89e3\u5bc6\u5165\u53e3\u6587\u4ef6 \u6216 null\uff08\u4e0d\u5b58\u5728\uff09\n", "     * @throws DocumentException \u89e3\u5bc6\u5165\u53e3\u6587\u4ef6\u65e0\u6cd5\u89e3\u6790\n", "     */\n", "    @Nullable\n", "    public Encryptions getEncryptions() throws DocumentException {\n", "        try {\n", "            Element obj = this.getObj(EncryptionsFileName);\n", "            if (obj == null) {\n", "                return null;\n", "            }\n", "            return new Encryptions(obj);\n", "        } catch (FileNotFoundException e) {\n", "            return null;\n", "        }\n", "    }\n", "\n", "    /**\n", "     * \u8bbe\u7f6e \u89e3\u5bc6\u5165\u53e3\u6587\u4ef6\n", "     *\n", "     * @param encryptions \u89e3\u5bc6\u5165\u53e3\u6587\u4ef6\n", "     * @return this\n", "     */\n", "    public OFDDir setEncryptions(Encryptions encryptions) {\n", "        if (encryptions == null) {\n", "            return this;\n", "        }\n", "        this.putObj(EncryptionsFileName, encryptions);\n", "        return this;\n", "    }\n", "\n", "    /**\n", "     * \u65b0\u5efa\u4e00\u4e2a\u6587\u6863\u5bb9\u5668\n", "     *\n", "     * @return \u65b0\u5efa\u7684\u6587\u6863\u5bb9\u5668\n", "     */\n", "    public DocDir newDoc() {\n", "        String name = DocDir.DocContainerPrefix + maxDocIndex;\n", "        maxDocIndex++;\n", "        return this.obtainContainer(name, DocDir::new);\n", "    }\n", "\n", "    /**\n", "     * \u83b7\u53d6\u6307\u5b9aIndex\u7684\u6587\u6863\n", "     * <p>\n", "     * \u5982\u679c\u6587\u6863\u4e0d\u5b58\u5728\u90a3\u4e48\u521b\u5efa\n", "     *\n", "     * @param index index\n", "     * @return \u6587\u6863\u5bb9\u5668\n", "     */\n", "    public DocDir obtainDoc(int index) {\n", "        String name = DocDir.DocContainerPrefix + index;\n", "        if (index >= maxDocIndex) {\n", "            maxDocIndex = index + 1;\n", "        }\n", "        return this.obtainContainer(name, DocDir::new);\n", "    }\n", "\n", "    /**\n", "     * \u83b7\u53d6OFD\u6587\u6863\u4e2d\u6700\u65b0\u7684\u6587\u6863\u76ee\u5f55\n", "     * <p>\n", "     * \u4e00\u822c\u6765\u8bf4\u5e8f\u53f7\u6700\u5927\u7684\u6700\u65b0 Doc_N\n", "     *\n", "     * @return \u6587\u6863\u76ee\u5f55\n", "     */\n", "    public DocDir getLatestDir() {\n", "        String name = DocDir.DocContainerPrefix + (maxDocIndex - 1);\n", "        return this.obtainContainer(name, DocDir::new);\n", "    }\n", "\n", "    /**\n", "     * \u901a\u8fc7\u6587\u6863\u7d22\u5f15\u83b7\u53d6\u6587\u6863\u5bb9\u5668\n", "     *\n", "     * @param index \u6587\u6863\u7d22\u5f15\n", "     * @return \u6587\u6863\u5bb9\u5668\n", "     * @throws FileNotFoundException \u6307\u5b9a\u7d22\u5f15\u7684\u6587\u6863\u5bb9\u5668\u4e0d\u5b58\u5728\n", "     */\n", "    public DocDir getDocByIndex(int index) throws FileNotFoundException {\n", "        String name = DocDir.DocContainerPrefix + index;\n", "        return this.getContainer(name, DocDir::new);\n", "    }\n", "\n", "    public DocDir getDocDir(String name) throws FileNotFoundException {\n", "        return this.getContainer(name, DocDir::new);\n", "    }\n", "\n", "    /**\n", "     * \u83b7\u53d6\u7b2c\u4e00\u4e2a\u6587\u6863\u5bb9\u5668\u4f5c\u4e3a\u9ed8\u8ba4\n", "     *\n", "     * @return \u7b2c\u4e00\u4e2a\u6587\u6863\u5bb9\u5668\n", "     */\n", "    public DocDir obtainDocDefault() {\n", "        if (exist(OFDFileName)) {\n", "            // \u68c0\u67e5OFDFileName\u662f\u5426\u5df2\u7ecf\u5b58\u5728\uff0c\u5982\u679c\u5b58\u5728\u90a3\u4e48\u5927\u53ef\u80fd\u6027\u662f\u8bfb\u53d6\u64cd\u4f5c\n", "            // \u5728\u8bfb\u6a21\u5f0f\u4e0b\uff0c\u901a\u8fc7OFD.xml \u6700\u540e\u4e00\u4e2aDocBody\u8282\u70b9\u4e2d\u7684DocRoot\u4f5c\u4e3a\u9ed8\u8ba4\u6587\u6863\n", "            // \u5982\u679c\u83b7\u53d6\u5931\u8d25\u90a3\u4e48\uff0c\u5c1d\u8bd5\u83b7\u53d6Doc_0\n", "            OFD ofd;\n", "            try {\n", "                ofd = getOfd();\n", "                final List<DocBody> docBodies = ofd.getDocBodies();\n", "                if (!docBodies.isEmpty()) {\n", "                    final DocBody docBody = docBodies.get(docBodies.size() - 1);\n", "                    ST_Loc docRoot = docBody.getDocRoot();\n", "                    return this.obtainContainer(docRoot.parent(), DocDir::new);\n", "                }\n", "            } catch (FileNotFoundException | DocumentException e) {\n", "                throw new RuntimeException(\"OFD.xml \u6587\u4ef6\u89e3\u6790\u5931\u8d25\");\n", "            }\n", "        }\n", "        return obtainDoc(0);\n", "    }\n", "\n", "\n", "    /**\n", "     * \u6253\u5305\u6210OFD\u5e76\u8f93\u51fa\u5230\u6d41\n", "     * <p>\n", "     * 1. \u521b\u5efa\u6587\u4ef6\u5939\u590d\u5236\u6587\u4ef6\n", "     * 2. \u6253\u5305\n", "     * 3. \u5220\u9664\u4e34\u65f6\u6587\u4ef6\n", "     * <p>\n", "     * \u4f7f\u7528\u64cd\u4f5c\u7cfb\u7edf\u4e34\u65f6\u6587\u4ef6\u5939\u4f5c\u4e3a\u8f93\u51fa\u6d41\u6570\u636e\n", "     *\n", "     * @param outStream \u8f93\u51fa\u6d41\n", "     * @throws IOException IO\u5f02\u5e38\n", "     */\n", "    public void jar(OutputStream outStream) throws IOException {\n", "        if (outStream == null) {\n", "            throw new IllegalArgumentException(\"\u751f\u6210OFD\u6587\u4ef6\u8f93\u51fa\u6d41\uff08outStream\uff09\u4e0d\u80fd\u4e3a\u7a7a\");\n", "        }\n", "        // \u5237\u5165\u7f13\u5b58\u4e2d\u7684\u5185\u5bb9\n", "        this.flush();\n", "        //\u6253\u5305\n", "        ZipOutputStream zip = new ZipOutputStream(outStream);\n", "        FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis());\n", "        zip(getSysAbsPath(), \"\", fileTime, zip);\n", "        zip.finish();\n", "        outStream.flush();\n", "    }\n", "\n", "    /**\n", "     * \u6253\u5305OFD\u6587\u4ef6\n", "     *\n", "     * @param workDirPath OFD\u865a\u62df\u5bb9\u5668\u76ee\u5f55\n", "     * @param dir         \u538b\u7f29\u5305\u5185\u6839\u76ee\u5f55\n", "     * @param fileTime    \u6587\u4ef6\u65f6\u95f4\n", "     * @param zip         \u8f93\u51fa\u6d41\n", "     * @throws IOException IO\u5f02\u5e38\n", "     */\n", "    private void zip(String workDirPath, String dir, FileTime fileTime, ZipOutputStream zip) throws IOException {\n", "        final File[] files = new File(workDirPath).listFiles();\n", "        if (files == null) {\n", "            throw new RuntimeException(\"\u76ee\u5f55\u4e2d\u6ca1\u6709\u4efb\u4f55\u6587\u4ef6\u65e0\u6cd5\u6253\u5305\");\n", "        }\n", "        for (File f : files) {\n", "            String entryName = f.getName();\n", "            if (dir != null && !\"\".equals(dir)) {\n", "                entryName = dir + entryName;\n", "            }\n", "            if (f.isDirectory()) {\n", "                entryName += \"/\";\n", "            }\n", "\n", "            putEntry(zip, fileTime, entryName);\n", "\n", "            if (f.isDirectory()) {\n", "                zip(f.getAbsolutePath(), entryName, fileTime, zip);\n", "            } else {\n", "                writeStream(zip, f);\n", "            }\n", "        }\n", "    }\n", "\n", "    /**\n", "     * \u5199\u6587\u4ef6\u6d41\n", "     */\n", "    private void writeStream(ZipOutputStream zip, File f) throws IOException {\n", "        try (InputStream fileStream = new BufferedInputStream(new FileInputStream(f))) {\n", "            byte[] buffer = new byte[1024];\n", "            int i;\n", "            while ((i = fileStream.read(buffer)) > 0) {\n", "                zip.write(buffer, 0, i);\n", "            }\n", "            zip.flush();\n", "            zip.closeEntry();\n", "        }\n", "    }\n", "\n", "    /**\n", "     * \u6dfb\u52a0Entry\n", "     */\n", "    private void putEntry(ZipOutputStream zip, FileTime fileTime, String entryName) throws IOException {\n", "        ZipEntry entry = new ZipEntry(entryName);\n", "        entry.setCreationTime(fileTime);\n", "        entry.setLastAccessTime(fileTime);\n", "        entry.setLastModifiedTime(fileTime);\n", "        zip.putNextEntry(entry);\n", "    }\n", "\n", "    /**\n", "     * \u6253\u5305\u6210OFD\n", "     * <p>\n", "     * 1. \u521b\u5efa\u6587\u4ef6\u5939\u590d\u5236\u6587\u4ef6\n", "     * 2. \u6253\u5305\n", "     * 3. \u5220\u9664\u4e34\u65f6\u6587\u4ef6\n", "     * <p>\n", "     * \u4f7f\u7528\u64cd\u4f5c\u7cfb\u7edf\u4e34\u65f6\u6587\u4ef6\u5939\u4f5c\u4e3a\u751f\u6210OFD\u6587\u4ef6\u7684\u4e34\u65f6\u8def\u5f84\n", "     *\n", "     * @param filePath OFD\u6587\u4ef6\u540d\u79f0\u8def\u5f84\uff08\u542b\u540e\u7f00\u540d\uff09\n", "     * @throws IOException IO\u5f02\u5e38\n", "     */\n", "    public void jar(Path filePath) throws IOException {\n", "        if (filePath == null) {\n", "            throw new IllegalArgumentException(\"\u751f\u6210OFD\u6587\u4ef6\u8def\u5f84\uff08fileName\uff09\u4e0d\u80fd\u4e3a\u7a7a\");\n", "        }\n", "        if (Files.exists(filePath)) {\n", "            Files.delete(filePath);\n", "        }\n", "        // \u5237\u5165\u7f13\u5b58\u4e2d\u7684\u5185\u5bb9\n", "        this.flush();\n", "        String fullOfFilePath = filePath.toAbsolutePath().toString();\n", "        // \u6253\u5305OFD\u6587\u4ef6\n", "        this.zip(getSysAbsPath(), fullOfFilePath);\n", "    }\n", "\n", "    /**\n", "     * \u6253\u5305OFD\u6587\u4ef6\n", "     *\n", "     * @param workDirPath    OFD\u865a\u62df\u5bb9\u5668\u76ee\u5f55\n", "     * @param fullOfFilePath \u751f\u6210\u6587\u4ef6\u7684\u5b8c\u6574\u8def\u5f84\uff08\u5305\u542b\u540e\u7f00\u7684\u8def\u5f84\uff09\n", "     * @throws IOException IO\u5f02\u5e38\n", "     */\n", "    private void zip(String workDirPath, String fullOfFilePath) throws IOException {\n", "        ZipFile ofdFile = new ZipFile(fullOfFilePath);\n", "        final File[] files = new File(workDirPath).listFiles();\n", "        if (files == null) {\n", "            throw new RuntimeException(\"\u76ee\u5f55\u4e2d\u6ca1\u6709\u4efb\u4f55\u6587\u4ef6\u65e0\u6cd5\u6253\u5305\");\n", "        }\n", "        for (File f : files) {\n", "            if (f.isDirectory()) {\n", "                ofdFile.addFolder(f);\n", "            } else {\n", "                ofdFile.addFile(f);\n", "            }\n", "        }\n", "    }\n", "\n", "    /**\n", "     * \u904d\u5386OFD\u6587\u4ef6\u5305\u5185\u7684\u6240\u6709\u6587\u4ef6\n", "     *\n", "     * @param iterator OFD\u5305\u5185\u6587\u4ef6\u8fed\u4ee3\u5668\n", "     * @throws IOException \u6587\u4ef6\u8bfb\u5199\u5f02\u5e38\n", "     */\n", "    public void walk(OFDPackageFileIterator iterator) throws IOException {\n", "        if (iterator == null) {\n", "            throw new IllegalArgumentException(\"\u5305\u5185\u6587\u4ef6\u8fed\u4ee3\u5668(iterator)\u4e3a\u7a7a\");\n", "        }\n", "        String sysRoot = FilenameUtils.separatorsToUnix(this.getSysAbsPath());\n", "        Files.walkFileTree(this.getContainerPath(), new SimpleFileVisitor<Path>() {\n", "            @Override\n", "            public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) {\n", "                // \u8def\u5f84\u8f6c\u6362\u4e3aUnix\u7c7b\u578b\u7684\u7edd\u5bf9\u8def\u5f84\n", "                String abxFilePath = FilenameUtils.separatorsToUnix(file.toAbsolutePath().toString());\n", "                // \u66ff\u6362\u6587\u4ef6\u7cfb\u7edf\u7684\u6839\u8def\u5f84\uff0c\u8fd9\u6837\u5c31\u4e3a\u5bb9\u5668\u7cfb\u7edf\u4e2d\u7684\u7edd\u5bf9\u8def\u5f84\n", "                abxFilePath = abxFilePath.replace(sysRoot, \"\");\n", "                final boolean continueIterator = iterator.visit(abxFilePath, file);\n", "                if (!continueIterator) {\n", "                    return FileVisitResult.TERMINATE;\n", "                }\n", "                return FileVisitResult.CONTINUE;\n", "            }\n", "        });\n", "    }\n", "}\n"], "test_content": ["package org.ofdrw.pkg.container;\n", "\n", "import org.apache.commons.io.FileUtils;\n", "import org.junit.jupiter.api.Assertions;\n", "import org.junit.jupiter.api.Test;\n", "import org.ofdrw.pkg.container.content.DocumentContent;\n", "import org.ofdrw.pkg.container.content.OFDContent;\n", "import org.ofdrw.pkg.container.content.PageContent;\n", "import org.ofdrw.pkg.container.content.PublicResContent;\n", "\n", "\n", "import java.io.IOException;\n", "import java.nio.file.Files;\n", "import java.nio.file.Path;\n", "import java.nio.file.Paths;\n", "\n", "\n", "class OFDDirTest {\n", "    Path p = Paths.get(\"target/TestOFD\");\n", "    Path font = Paths.get(\"src/test/resources\", \"NotoSerifCJKsc-Medium.otf\");\n", "\n", "    OFDDir build() throws IOException {\n", "        FileUtils.deleteDirectory(p.toFile());\n", "        OFDDir ofdDir = new OFDDir(p)\n", "                .setOfd(OFDContent.ofd());\n", "        final DocDir docDir = ofdDir.newDoc()\n", "                .addResource(font)\n", "                .setPublicRes(PublicResContent.res())\n", "                .setDocument(DocumentContent.doc());\n", "        PagesDir ps = docDir.obtainPages();\n", "        ps.newPageDir().setContent(PageContent.page());\n", "        return ofdDir;\n", "    }\n", "\n", "    OFDDir build2() throws IOException {\n", "        FileUtils.deleteDirectory(p.toFile());\n", "        OFDDir ofdDir = new OFDDir(p)\n", "                .setOfd(OFDContent.ofd());\n", "        final DocDir docDir = ofdDir.newDoc()\n", "                .setPublicRes(PublicResContent.resSysFont())\n", "                .setDocument(DocumentContent.doc());\n", "        PagesDir ps = docDir.obtainPages();\n", "        ps.newPageDir().setContent(PageContent.page());\n", "        return ofdDir;\n", "    }\n", "\n", "    @Test\n", "    void collect() throws IOException {\n", "        build().flush();\n", "        System.out.println(p.toAbsolutePath());\n", "    }\n", "\n", "    @Test\n", "    void jar() throws IOException {\n", "        final OFDDir ofdDir = build();\n", "        Path res = Paths.get(\"target/helloworld.ofd\");\n", "        ofdDir.jar(res);\n", "        ofdDir.clean();\n", "        Assertions.assertTrue(Files.notExists(p));\n", "    }\n", "\n", "\n", "    @Test\n", "    void jarChinese() throws IOException {\n", "        final OFDDir ofdDir = build2();\n", "        Path res = Paths.get(\"target/chineseDirFile.ofd\");\n", "\n", "        DocDir docDir = ofdDir.obtainDocDefault();\n", "        VirtualContainer resDir = docDir.obtainContainer(\"Res\", VirtualContainer::new );\n", "        VirtualContainer dirC = resDir.obtainContainer(\"\u8fd9\u662f\u4e00\u4e2a\u4e2d\u6587\u76ee\u5f55\", VirtualContainer::new);\n", "        Path tempFile = Files.createTempFile(\"\", \"\");\n", "        Files.write(tempFile, \"\u6587\u4ef6\u4e2d\u6709\u4e00\u4e9b\u4e2d\u6587\".getBytes());\n", "        tempFile = Files.move(tempFile, tempFile.resolveSibling(\"\u6570\u636e\u6587\u4ef6.txt\"));\n", "        dirC.putFile(tempFile);\n", "\n", "        ofdDir.jar(res);\n", "        ofdDir.clean();\n", "        Files.delete(tempFile);\n", "        Assertions.assertTrue(Files.notExists(p));\n", "    }\n", "}"], "method_lines_dic": {"OFDDir::::newOFD()": [59, 67], "OFDDir::::initContainer()": [87, 103], "OFDDir::::getOfd()": [112, 115], "OFDDir::::obtainEncryptions()": [135, 148], "OFDDir::::getEncryptions()": [156, 167], "OFDDir::::newDoc()": [188, 192], "OFDDir::::obtainDoc(int)": [202, 208], "OFDDir::::getLatestDir()": [217, 220], "OFDDir::::getDocByIndex(int)": [229, 232], "OFDDir::::getDocDir(java.lang.String)": [234, 236], "OFDDir::::obtainDocDefault()": [243, 262], "OFDDir::::jar(java.io.OutputStream)": [277, 289], "OFDDir::::zip(java.lang.String,java.lang.String,java.nio.file.attribute.FileTime,java.util.zip.ZipOutputStream)": [300, 322], "OFDDir::::writeStream(java.util.zip.ZipOutputStream,java.io.File)": [327, 337], "OFDDir::::putEntry(java.util.zip.ZipOutputStream,java.nio.file.attribute.FileTime,java.lang.String)": [342, 348], "OFDDir::::jar(java.nio.file.Path)": [362, 374], "OFDDir::::zip(java.lang.String,java.lang.String)": [383, 396], "OFDDir::::walk(org.ofdrw.pkg.container.OFDPackageFileIterator)": [404, 423]}, "test_method_lines_dic": {"OFDDirTest::::build()": [22, 33], "OFDDirTest::::build2()": [35, 45], "OFDDirTest::::collect()": [47, 51], "OFDDirTest::::jar()": [53, 60], "OFDDirTest::::jarChinese()": [63, 80]}, "reverse_method_lines_dic": {"59": "OFDDir::::newOFD()", "60": "OFDDir::::newOFD()", "61": "OFDDir::::newOFD()", "62": "OFDDir::::newOFD()", "63": "OFDDir::::newOFD()", "64": "OFDDir::::newOFD()", "65": "OFDDir::::newOFD()", "66": "OFDDir::::newOFD()", "67": "OFDDir::::newOFD()", "87": "OFDDir::::initContainer()", "88": "OFDDir::::initContainer()", "89": "OFDDir::::initContainer()", "90": "OFDDir::::initContainer()", "91": "OFDDir::::initContainer()", "92": "OFDDir::::initContainer()", "93": "OFDDir::::initContainer()", "94": "OFDDir::::initContainer()", "95": "OFDDir::::initContainer()", "96": "OFDDir::::initContainer()", "97": "OFDDir::::initContainer()", "98": "OFDDir::::initContainer()", "99": "OFDDir::::initContainer()", "100": "OFDDir::::initContainer()", "101": "OFDDir::::initContainer()", "102": "OFDDir::::initContainer()", "103": "OFDDir::::initContainer()", "112": "OFDDir::::getOfd()", "113": "OFDDir::::getOfd()", "114": "OFDDir::::getOfd()", "115": "OFDDir::::getOfd()", "135": "OFDDir::::obtainEncryptions()", "136": "OFDDir::::obtainEncryptions()", "137": "OFDDir::::obtainEncryptions()", "138": "OFDDir::::obtainEncryptions()", "139": "OFDDir::::obtainEncryptions()", "140": "OFDDir::::obtainEncryptions()", "141": "OFDDir::::obtainEncryptions()", "142": "OFDDir::::obtainEncryptions()", "143": "OFDDir::::obtainEncryptions()", "144": "OFDDir::::obtainEncryptions()", "145": "OFDDir::::obtainEncryptions()", "146": "OFDDir::::obtainEncryptions()", "147": "OFDDir::::obtainEncryptions()", "148": "OFDDir::::obtainEncryptions()", "156": "OFDDir::::getEncryptions()", "157": "OFDDir::::getEncryptions()", "158": "OFDDir::::getEncryptions()", "159": "OFDDir::::getEncryptions()", "160": "OFDDir::::getEncryptions()", "161": "OFDDir::::getEncryptions()", "162": "OFDDir::::getEncryptions()", "163": "OFDDir::::getEncryptions()", "164": "OFDDir::::getEncryptions()", "165": "OFDDir::::getEncryptions()", "166": "OFDDir::::getEncryptions()", "167": "OFDDir::::getEncryptions()", "188": "OFDDir::::newDoc()", "189": "OFDDir::::newDoc()", "190": "OFDDir::::newDoc()", "191": "OFDDir::::newDoc()", "192": "OFDDir::::newDoc()", "202": "OFDDir::::obtainDoc(int)", "203": "OFDDir::::obtainDoc(int)", "204": "OFDDir::::obtainDoc(int)", "205": "OFDDir::::obtainDoc(int)", "206": "OFDDir::::obtainDoc(int)", "207": "OFDDir::::obtainDoc(int)", "208": "OFDDir::::obtainDoc(int)", "217": "OFDDir::::getLatestDir()", "218": "OFDDir::::getLatestDir()", "219": "OFDDir::::getLatestDir()", "220": "OFDDir::::getLatestDir()", "229": "OFDDir::::getDocByIndex(int)", "230": "OFDDir::::getDocByIndex(int)", "231": "OFDDir::::getDocByIndex(int)", "232": "OFDDir::::getDocByIndex(int)", "234": "OFDDir::::getDocDir(java.lang.String)", "235": "OFDDir::::getDocDir(java.lang.String)", "236": "OFDDir::::getDocDir(java.lang.String)", "243": "OFDDir::::obtainDocDefault()", "244": "OFDDir::::obtainDocDefault()", "245": "OFDDir::::obtainDocDefault()", "246": "OFDDir::::obtainDocDefault()", "247": "OFDDir::::obtainDocDefault()", "248": "OFDDir::::obtainDocDefault()", "249": "OFDDir::::obtainDocDefault()", "250": "OFDDir::::obtainDocDefault()", "251": "OFDDir::::obtainDocDefault()", "252": "OFDDir::::obtainDocDefault()", "253": "OFDDir::::obtainDocDefault()", "254": "OFDDir::::obtainDocDefault()", "255": "OFDDir::::obtainDocDefault()", "256": "OFDDir::::obtainDocDefault()", "257": "OFDDir::::obtainDocDefault()", "258": "OFDDir::::obtainDocDefault()", "259": "OFDDir::::obtainDocDefault()", "260": "OFDDir::::obtainDocDefault()", "261": "OFDDir::::obtainDocDefault()", "262": "OFDDir::::obtainDocDefault()", "277": "OFDDir::::jar(java.io.OutputStream)", "278": "OFDDir::::jar(java.io.OutputStream)", "279": "OFDDir::::jar(java.io.OutputStream)", "280": "OFDDir::::jar(java.io.OutputStream)", "281": "OFDDir::::jar(java.io.OutputStream)", "282": "OFDDir::::jar(java.io.OutputStream)", "283": "OFDDir::::jar(java.io.OutputStream)", "284": "OFDDir::::jar(java.io.OutputStream)", "285": "OFDDir::::jar(java.io.OutputStream)", "286": "OFDDir::::jar(java.io.OutputStream)", "287": "OFDDir::::jar(java.io.OutputStream)", "288": "OFDDir::::jar(java.io.OutputStream)", "289": "OFDDir::::jar(java.io.OutputStream)", "300": "OFDDir::::zip(java.lang.String,java.lang.String,java.nio.file.attribute.FileTime,java.util.zip.ZipOutputStream)", "301": "OFDDir::::zip(java.lang.String,java.lang.String,java.nio.file.attribute.FileTime,java.util.zip.ZipOutputStream)", "302": "OFDDir::::zip(java.lang.String,java.lang.String,java.nio.file.attribute.FileTime,java.util.zip.ZipOutputStream)", "303": "OFDDir::::zip(java.lang.String,java.lang.String,java.nio.file.attribute.FileTime,java.util.zip.ZipOutputStream)", "304": "OFDDir::::zip(java.lang.String,java.lang.String,java.nio.file.attribute.FileTime,java.util.zip.ZipOutputStream)", "305": "OFDDir::::zip(java.lang.String,java.lang.String,java.nio.file.attribute.FileTime,java.util.zip.ZipOutputStream)", "306": "OFDDir::::zip(java.lang.String,java.lang.String,java.nio.file.attribute.FileTime,java.util.zip.ZipOutputStream)", "307": "OFDDir::::zip(java.lang.String,java.lang.String,java.nio.file.attribute.FileTime,java.util.zip.ZipOutputStream)", "308": "OFDDir::::zip(java.lang.String,java.lang.String,java.nio.file.attribute.FileTime,java.util.zip.ZipOutputStream)", "309": "OFDDir::::zip(java.lang.String,java.lang.String,java.nio.file.attribute.FileTime,java.util.zip.ZipOutputStream)", "310": "OFDDir::::zip(java.lang.String,java.lang.String,java.nio.file.attribute.FileTime,java.util.zip.ZipOutputStream)", "311": "OFDDir::::zip(java.lang.String,java.lang.String,java.nio.file.attribute.FileTime,java.util.zip.ZipOutputStream)", "312": "OFDDir::::zip(java.lang.String,java.lang.String,java.nio.file.attribute.FileTime,java.util.zip.ZipOutputStream)", "313": "OFDDir::::zip(java.lang.String,java.lang.String,java.nio.file.attribute.FileTime,java.util.zip.ZipOutputStream)", "314": "OFDDir::::zip(java.lang.String,java.lang.String,java.nio.file.attribute.FileTime,java.util.zip.ZipOutputStream)", "315": "OFDDir::::zip(java.lang.String,java.lang.String,java.nio.file.attribute.FileTime,java.util.zip.ZipOutputStream)", "316": "OFDDir::::zip(java.lang.String,java.lang.String,java.nio.file.attribute.FileTime,java.util.zip.ZipOutputStream)", "317": "OFDDir::::zip(java.lang.String,java.lang.String,java.nio.file.attribute.FileTime,java.util.zip.ZipOutputStream)", "318": "OFDDir::::zip(java.lang.String,java.lang.String,java.nio.file.attribute.FileTime,java.util.zip.ZipOutputStream)", "319": "OFDDir::::zip(java.lang.String,java.lang.String,java.nio.file.attribute.FileTime,java.util.zip.ZipOutputStream)", "320": "OFDDir::::zip(java.lang.String,java.lang.String,java.nio.file.attribute.FileTime,java.util.zip.ZipOutputStream)", "321": "OFDDir::::zip(java.lang.String,java.lang.String,java.nio.file.attribute.FileTime,java.util.zip.ZipOutputStream)", "322": "OFDDir::::zip(java.lang.String,java.lang.String,java.nio.file.attribute.FileTime,java.util.zip.ZipOutputStream)", "327": "OFDDir::::writeStream(java.util.zip.ZipOutputStream,java.io.File)", "328": "OFDDir::::writeStream(java.util.zip.ZipOutputStream,java.io.File)", "329": "OFDDir::::writeStream(java.util.zip.ZipOutputStream,java.io.File)", "330": "OFDDir::::writeStream(java.util.zip.ZipOutputStream,java.io.File)", "331": "OFDDir::::writeStream(java.util.zip.ZipOutputStream,java.io.File)", "332": "OFDDir::::writeStream(java.util.zip.ZipOutputStream,java.io.File)", "333": "OFDDir::::writeStream(java.util.zip.ZipOutputStream,java.io.File)", "334": "OFDDir::::writeStream(java.util.zip.ZipOutputStream,java.io.File)", "335": "OFDDir::::writeStream(java.util.zip.ZipOutputStream,java.io.File)", "336": "OFDDir::::writeStream(java.util.zip.ZipOutputStream,java.io.File)", "337": "OFDDir::::writeStream(java.util.zip.ZipOutputStream,java.io.File)", "342": "OFDDir::::putEntry(java.util.zip.ZipOutputStream,java.nio.file.attribute.FileTime,java.lang.String)", "343": "OFDDir::::putEntry(java.util.zip.ZipOutputStream,java.nio.file.attribute.FileTime,java.lang.String)", "344": "OFDDir::::putEntry(java.util.zip.ZipOutputStream,java.nio.file.attribute.FileTime,java.lang.String)", "345": "OFDDir::::putEntry(java.util.zip.ZipOutputStream,java.nio.file.attribute.FileTime,java.lang.String)", "346": "OFDDir::::putEntry(java.util.zip.ZipOutputStream,java.nio.file.attribute.FileTime,java.lang.String)", "347": "OFDDir::::putEntry(java.util.zip.ZipOutputStream,java.nio.file.attribute.FileTime,java.lang.String)", "348": "OFDDir::::putEntry(java.util.zip.ZipOutputStream,java.nio.file.attribute.FileTime,java.lang.String)", "362": "OFDDir::::jar(java.nio.file.Path)", "363": "OFDDir::::jar(java.nio.file.Path)", "364": "OFDDir::::jar(java.nio.file.Path)", "365": "OFDDir::::jar(java.nio.file.Path)", "366": "OFDDir::::jar(java.nio.file.Path)", "367": "OFDDir::::jar(java.nio.file.Path)", "368": "OFDDir::::jar(java.nio.file.Path)", "369": "OFDDir::::jar(java.nio.file.Path)", "370": "OFDDir::::jar(java.nio.file.Path)", "371": "OFDDir::::jar(java.nio.file.Path)", "372": "OFDDir::::jar(java.nio.file.Path)", "373": "OFDDir::::jar(java.nio.file.Path)", "374": "OFDDir::::jar(java.nio.file.Path)", "383": "OFDDir::::zip(java.lang.String,java.lang.String)", "384": "OFDDir::::zip(java.lang.String,java.lang.String)", "385": "OFDDir::::zip(java.lang.String,java.lang.String)", "386": "OFDDir::::zip(java.lang.String,java.lang.String)", "387": "OFDDir::::zip(java.lang.String,java.lang.String)", "388": "OFDDir::::zip(java.lang.String,java.lang.String)", "389": "OFDDir::::zip(java.lang.String,java.lang.String)", "390": "OFDDir::::zip(java.lang.String,java.lang.String)", "391": "OFDDir::::zip(java.lang.String,java.lang.String)", "392": "OFDDir::::zip(java.lang.String,java.lang.String)", "393": "OFDDir::::zip(java.lang.String,java.lang.String)", "394": "OFDDir::::zip(java.lang.String,java.lang.String)", "395": "OFDDir::::zip(java.lang.String,java.lang.String)", "396": "OFDDir::::zip(java.lang.String,java.lang.String)", "404": "OFDDir::::walk(org.ofdrw.pkg.container.OFDPackageFileIterator)", "405": "OFDDir::::walk(org.ofdrw.pkg.container.OFDPackageFileIterator)", "406": "OFDDir::::walk(org.ofdrw.pkg.container.OFDPackageFileIterator)", "407": "OFDDir::::walk(org.ofdrw.pkg.container.OFDPackageFileIterator)", "408": "OFDDir::::walk(org.ofdrw.pkg.container.OFDPackageFileIterator)", "409": "OFDDir::::walk(org.ofdrw.pkg.container.OFDPackageFileIterator)", "410": "OFDDir::::walk(org.ofdrw.pkg.container.OFDPackageFileIterator)", "411": "OFDDir::::walk(org.ofdrw.pkg.container.OFDPackageFileIterator)", "412": "OFDDir::::walk(org.ofdrw.pkg.container.OFDPackageFileIterator)", "413": "OFDDir::::walk(org.ofdrw.pkg.container.OFDPackageFileIterator)", "414": "OFDDir::::walk(org.ofdrw.pkg.container.OFDPackageFileIterator)", "415": "OFDDir::::walk(org.ofdrw.pkg.container.OFDPackageFileIterator)", "416": "OFDDir::::walk(org.ofdrw.pkg.container.OFDPackageFileIterator)", "417": "OFDDir::::walk(org.ofdrw.pkg.container.OFDPackageFileIterator)", "418": "OFDDir::::walk(org.ofdrw.pkg.container.OFDPackageFileIterator)", "419": "OFDDir::::walk(org.ofdrw.pkg.container.OFDPackageFileIterator)", "420": "OFDDir::::walk(org.ofdrw.pkg.container.OFDPackageFileIterator)", "421": "OFDDir::::walk(org.ofdrw.pkg.container.OFDPackageFileIterator)", "422": "OFDDir::::walk(org.ofdrw.pkg.container.OFDPackageFileIterator)", "423": "OFDDir::::walk(org.ofdrw.pkg.container.OFDPackageFileIterator)"}, "test_reverse_method_lines_dic": {"22": "OFDDirTest::::build()", "23": "OFDDirTest::::build()", "24": "OFDDirTest::::build()", "25": "OFDDirTest::::build()", "26": "OFDDirTest::::build()", "27": "OFDDirTest::::build()", "28": "OFDDirTest::::build()", "29": "OFDDirTest::::build()", "30": "OFDDirTest::::build()", "31": "OFDDirTest::::build()", "32": "OFDDirTest::::build()", "33": "OFDDirTest::::build()", "35": "OFDDirTest::::build2()", "36": "OFDDirTest::::build2()", "37": "OFDDirTest::::build2()", "38": "OFDDirTest::::build2()", "39": "OFDDirTest::::build2()", "40": "OFDDirTest::::build2()", "41": "OFDDirTest::::build2()", "42": "OFDDirTest::::build2()", "43": "OFDDirTest::::build2()", "44": "OFDDirTest::::build2()", "45": "OFDDirTest::::build2()", "47": "OFDDirTest::::collect()", "48": "OFDDirTest::::collect()", "49": "OFDDirTest::::collect()", "50": "OFDDirTest::::collect()", "51": "OFDDirTest::::collect()", "53": "OFDDirTest::::jar()", "54": "OFDDirTest::::jar()", "55": "OFDDirTest::::jar()", "56": "OFDDirTest::::jar()", "57": "OFDDirTest::::jar()", "58": "OFDDirTest::::jar()", "59": "OFDDirTest::::jar()", "60": "OFDDirTest::::jar()", "63": "OFDDirTest::::jarChinese()", "64": "OFDDirTest::::jarChinese()", "65": "OFDDirTest::::jarChinese()", "66": "OFDDirTest::::jarChinese()", "67": "OFDDirTest::::jarChinese()", "68": "OFDDirTest::::jarChinese()", "69": "OFDDirTest::::jarChinese()", "70": "OFDDirTest::::jarChinese()", "71": "OFDDirTest::::jarChinese()", "72": "OFDDirTest::::jarChinese()", "73": "OFDDirTest::::jarChinese()", "74": "OFDDirTest::::jarChinese()", "75": "OFDDirTest::::jarChinese()", "76": "OFDDirTest::::jarChinese()", "77": "OFDDirTest::::jarChinese()", "78": "OFDDirTest::::jarChinese()", "79": "OFDDirTest::::jarChinese()", "80": "OFDDirTest::::jarChinese()"}, "tests": [{"test_lines": [47, 51], "covered_lines": [52, 80, 81, 82, 88, 89, 90, 92, 103, 124, 125, 189, 190, 191]}, {"test_lines": [53, 60], "covered_lines": [52, 80, 81, 82, 88, 89, 90, 92, 103, 124, 125, 189, 190, 191, 363, 366, 370, 371, 373, 374, 384, 385, 386, 389, 390, 391, 393, 396]}, {"test_lines": [63, 80], "covered_lines": [52, 80, 81, 82, 88, 89, 90, 92, 103, 113, 114, 124, 125, 189, 190, 191, 244, 250, 251, 252, 253, 254, 255, 363, 366, 370, 371, 373, 374, 384, 385, 386, 389, 390, 391, 393, 396]}]}, "/bernard/dataset_construction/prep/repos/ofdrw/ofdrw-pkg/src/main/java/org/ofdrw/pkg/container/PageDir.java": {"class_content": ["package org.ofdrw.pkg.container;\n", "\n", "import org.dom4j.DocumentException;\n", "import org.dom4j.Element;\n", "import org.ofdrw.core.Holder;\n", "import org.ofdrw.core.annotation.pageannot.PageAnnot;\n", "import org.ofdrw.core.basicStructure.pageObj.Page;\n", "import org.ofdrw.core.basicStructure.res.Res;\n", "import org.ofdrw.core.basicType.ST_Loc;\n", "\n", "import java.io.FileNotFoundException;\n", "import java.io.IOException;\n", "import java.nio.file.Files;\n", "import java.nio.file.Path;\n", "import java.util.HashMap;\n", "import java.util.Map;\n", "import java.util.regex.Pattern;\n", "import java.util.stream.Stream;\n", "\n", "/**\n", " * \u9875\u9762\u76ee\u5f55\u5bb9\u5668\n", " *\n", " * @author \u6743\u89c2\u5b87\n", " * @since 2020-01-18 03:05:23\n", " */\n", "public class PageDir extends VirtualContainer {\n", "\n", "    public static final Pattern AnnotFileRegex = Pattern.compile(\"Annot_(\\\\d+).xml\");\n", "\n", "    /**\n", "     * \u9875\u9762\u5bb9\u5668\u540d\u79f0\u524d\u7f00\n", "     */\n", "    public static final String PageContainerPrefix = \"Page_\";\n", "\n", "    /**\n", "     * \u9875\u9762\u63cf\u8ff0\u6587\u4ef6\u540d\u79f0\n", "     */\n", "    public static final String ContentFileName = \"Content.xml\";\n", "\n", "    /**\n", "     * \u8bb0\u5f55\u4e86\u8d44\u6e90\u63cf\u8ff0\u6587\u4ef6\u540d\u79f0\n", "     */\n", "    public static final String PageResFileName = \"PageRes.xml\";\n", "\n", "    /**\n", "     * \u8bb0\u5f55\u4e86\u9875\u9762\u5173\u8054\u7684\u6ce8\u89e3\u5bf9\u8c61\n", "     */\n", "    public static final String AnnotationFileName = \"Annotation.xml\";\n", "\n", "    /**\n", "     * \u6ce8\u91ca\u6587\u4ef6\u524d\u7f00\n", "     * <p>\n", "     * GMT0099 OFD 2.0\n", "     */\n", "    public static final String AnnotFilePrefix = \"Annot_\";\n", "\n", "\n", "    /**\n", "     * \u4ee3\u8868OFD  \u9875\u9762\u7d22\u5f15\u53f7\n", "     * <p>\n", "     * index \u4ece 0 \u5f00\u59cb\u53d6\n", "     */\n", "    private int index = 0;\n", "\n", "\n", "    /**\n", "     * \u6700\u5927\u6ce8\u91ca\u6587\u4ef6\u5bf9\u8c61\u7d22\u5f15\n", "     * <p>\n", "     * \u5728\u5411Page_N\u4e2d\u52a0\u5165\u6ce8\u91ca\u65f6\u4f7f\u7528\n", "     */\n", "    private Integer maxAnnotIndex = -1;\n", "\n", "\n", "    public PageDir(Path fullDir) throws IllegalArgumentException {\n", "        super(fullDir);\n", "        String indexStr = this.getContainerName().replace(PageContainerPrefix, \"\");\n", "        try {\n", "            this.index = Integer.parseInt(indexStr);\n", "        } catch (NumberFormatException e) {\n", "            clean();\n", "            throw new IllegalArgumentException(\"\u4e0d\u5408\u6cd5\u7684\u6587\u4ef6\u76ee\u5f55\u540d\u79f0\uff1a\" + this.getContainerName() + \"\uff0c\u76ee\u5f55\u540d\u79f0\u5e94\u4e3a Page_N\");\n", "        }\n", "    }\n", "\n", "\n", "    /**\n", "     * \u83b7\u53d6\u9875\u9762\u7d22\u5f15\n", "     *\n", "     * @return \u9875\u9762\u7d22\u5f15\n", "     */\n", "    public Integer getIndex() {\n", "        return index;\n", "    }\n", "\n", "    /**\n", "     * \u83b7\u53d6\u9875\u9762\u8d44\u6e90\u63cf\u8ff0\u6587\u4ef6\n", "     *\n", "     * @return \u9875\u9762\u8d44\u6e90\u63cf\u8ff0\u6587\u4ef6\n", "     * @throws FileNotFoundException \u8d44\u6e90\u6587\u4ef6\u4e0d\u5b58\u5728\n", "     * @throws DocumentException     \u8d44\u6e90\u6587\u4ef6\u89e3\u6790\u5931\u8d25\n", "     */\n", "    public Res getPageRes() throws FileNotFoundException, DocumentException {\n", "        Element obj = this.getObj(PageResFileName);\n", "        return new Res(obj);\n", "    }\n", "\n", "    /**\n", "     * \u8bbe\u7f6e\u9875\u9762\u8d44\u6e90\u63cf\u8ff0\u5bf9\u8c61\n", "     *\n", "     * @param pageRes \u9875\u9762\u8d44\u6e90\u63cf\u8ff0\u5bf9\u8c61\n", "     * @return this\n", "     */\n", "    public PageDir setPageRes(Res pageRes) {\n", "        this.putObj(PageResFileName, pageRes);\n", "        return this;\n", "    }\n", "\n", "    /**\n", "     * \u83b7\u53d6\u5206\u9875\u6ce8\u91ca\u6587\u4ef6\n", "     *\n", "     * @return \u5206\u9875\u6ce8\u91ca\u6587\u4ef6\n", "     * @throws FileNotFoundException \u63cf\u8ff0\u6587\u4ef6\u4e0d\u5b58\u5728\n", "     * @throws DocumentException     \u63cf\u8ff0\u6587\u4ef6\u5185\u5bb9\u9519\u8bef\n", "     */\n", "    public PageAnnot getPageAnnot() throws FileNotFoundException, DocumentException {\n", "        Element obj = this.getObj(AnnotationFileName);\n", "        return new PageAnnot(obj);\n", "    }\n", "\n", "    /**\n", "     * \u6839\u636e\u9875\u9762\u6ce8\u91ca\u6587\u4ef6\u7684\u540d\u79f0\u524d\u7f00\u83b7\u53d6\u8be5\u76ee\u5f55\u4e0b\u6240\u6709\u6ce8\u91ca\u5bf9\u8c61\n", "     * <p>\n", "     * \u6ce8\u91ca\u6587\u4ef6\u524d\u7f00\uff1a Annot_M.xml\n", "     * <p>\n", "     * Key: \u6587\u4ef6\u540d\n", "     * Value: \u6ce8\u91ca\u5bf9\u8c61\n", "     *\n", "     * @return \u5bb9\u5668\u5185\u6240\u6709\u6ce8\u91ca\u5bf9\u8c61\n", "     * @throws IOException \u6587\u4ef6\u8bfb\u5f02\u5e38\n", "     */\n", "    public Map<String, PageAnnot> getPageAnnots() throws IOException {\n", "        Map<String, PageAnnot> res = new HashMap<>();\n", "        // \u8fc7\u6ee4\u51fa\u6ce8\u91ca\u6587\u4ef6\n", "        try (Stream<Path> stream = Files.list(this.getContainerPath())) {\n", "            stream.filter((item) -> {\n", "                String fileName = item.getFileName().toString().toLowerCase();\n", "                // \u4e0d\u662f\u76ee\u5f55 \u5e76\u4e14 \u6587\u4ef6\u540d\u4ee5 Annot_ \u5f00\u5934\n", "                return Files.isRegularFile(item)\n", "                        && fileName.startsWith(AnnotFilePrefix.toLowerCase())\n", "                        && fileName.endsWith(\".xml\");\n", "            }).forEach(item -> {\n", "                Element obj = null;\n", "                try {\n", "                    obj = this.getObj(AnnotationFileName);\n", "                } catch (Exception e) {\n", "                    // ignore\n", "                    obj = null;\n", "                }\n", "                if (obj != null) {\n", "                    res.put(item.getFileName().toString(), new PageAnnot(obj));\n", "                }\n", "            });\n", "        }\n", "\n", "        return res;\n", "    }\n", "\n", "    /**\n", "     * \u8bbe\u7f6e\u5206\u9875\u6ce8\u91ca\u6587\u4ef6\n", "     *\n", "     * @param pageAnnot \u5206\u9875\u6ce8\u91ca\u6587\u4ef6\n", "     * @return this\n", "     */\n", "    public PageDir setPageAnnot(PageAnnot pageAnnot) {\n", "        this.putObj(AnnotationFileName, pageAnnot);\n", "        return this;\n", "    }\n", "\n", "    /**\n", "     * \u83b7\u53d6\u9875\u9762\u8d44\u6e90\u76ee\u5f55\n", "     * <p>\n", "     * \u5982\u679c\u76ee\u5f55\u4e0d\u5b58\u5728\u5219\u521b\u5efa\n", "     *\n", "     * @return \u8d44\u6e90\u76ee\u5f55\u5bb9\u5668\n", "     */\n", "    public ResDir obtainRes() {\n", "        return this.obtainContainer(\"Res\", ResDir::new);\n", "    }\n", "\n", "    /**\n", "     * \u83b7\u53d6\u8d44\u6e90\u6587\u4ef6\u865a\u62df\u5bb9\u5668\n", "     *\n", "     * @return \u83b7\u53d6\u8d44\u6e90\u76ee\u5f55\n", "     * @throws FileNotFoundException \u8be5\u9875\u9762\u6ca1\u6709\u8d44\u6e90\u6587\u4ef6\u76ee\u5f55\n", "     */\n", "    public ResDir getResDir() throws FileNotFoundException {\n", "        return this.getContainer(\"Res\", ResDir::new);\n", "    }\n", "\n", "    /**\n", "     * \u5411\u9875\u9762\u4e2d\u589e\u52a0\u9875\u9762\u8d44\u6e90\n", "     *\n", "     * @param resource \u8d44\u6e90\n", "     * @return this\n", "     * @throws IOException \u6587\u4ef6\u590d\u5236\u8fc7\u7a0b\u4e2d\u53d1\u751f\u5f02\u5e38\n", "     */\n", "    public PageDir add(Path resource) throws IOException {\n", "        // \u5982\u679c\u5b58\u5728\u90a3\u4e48\u83b7\u53d6\u5bb9\u5668\uff0c\u4e0d\u5b58\u5728\u5219\u521b\u5efa\u5bb9\u5668\n", "        obtainRes().add(resource);\n", "        return this;\n", "    }\n", "\n", "    /**\n", "     * \u5411\u9875\u9762\u52a0\u5165\u65b0\u7684\u6ce8\u91ca\u6587\u4ef6\n", "     *\n", "     * @param pageAnnot \u6ce8\u91ca\u5bf9\u8c61\n", "     * @return \u6ce8\u91ca\u6587\u4ef6\u5bb9\u5668\u5185\u7edd\u5bf9\u8def\u5f84\n", "     * @throws IOException \u6587\u4ef6\u590d\u5236\u8fc7\u7a0b\u4e2d\u53d1\u751f\u5f02\u5e38\n", "     */\n", "    public ST_Loc addAnnot(PageAnnot pageAnnot) throws IOException {\n", "        if (pageAnnot == null) {\n", "            return null;\n", "        }\n", "        // \u83b7\u53d6\u5f53\u524d\u76ee\u5f55\u4e2d\u6700\u5927\u7684\u6ce8\u91ca\u6587\u4ef6\u7d22\u5f15\u53f7\uff0c\u7136\u540e+1 \u4f5c\u4e3a\u65b0\u7684\u6587\u4ef6\u7d22\u5f15\n", "        maxAnnotIndex = getMaxAnnotFileIndex() + 1;\n", "        String fileName = AnnotFilePrefix + maxAnnotIndex + \".xml\";\n", "        return addAnnot(fileName, pageAnnot);\n", "    }\n", "\n", "    /**\n", "     * \u5411\u9875\u9762\u5185\u6dfb\u52a0\u6ce8\u91ca\u6587\u4ef6\n", "     *\n", "     * @param fileName  \u6587\u4ef6\u540d\u79f0\n", "     * @param pageAnnot \u6ce8\u91ca\n", "     * @return \u6ce8\u91ca\u6587\u4ef6\u5bb9\u5668\u5185\u7edd\u5bf9\u8def\u5f84\n", "     */\n", "    public ST_Loc addAnnot(String fileName, PageAnnot pageAnnot) {\n", "        this.putObj(fileName, pageAnnot);\n", "        return this.getAbsLoc().cat(fileName);\n", "    }\n", "\n", "    /**\n", "     * \u83b7\u53d6\u5f53Page_N\u5bb9\u5668\u4e2d\u6700\u5927\u7684\u6ce8\u91ca\u6587\u4ef6\u7d22\u5f15\u53f7\n", "     *\n", "     * @return \u7d22\u5f15\u6570\u5b57\n", "     * @throws IOException \u6587\u4ef6\u8bfb\u53d6\u5f02\u5e38\n", "     */\n", "    public Integer getMaxAnnotFileIndex() throws IOException {\n", "        if (maxAnnotIndex < 0) {\n", "            Holder<Integer> maxIndexHolder = new Holder<>(-1);\n", "            try (Stream<Path> stream = Files.list(this.getContainerPath())) {\n", "                stream.forEach((item) -> {\n", "                    String fileName = item.getFileName().toString().toLowerCase();\n", "                    // \u4e0d\u662f\u76ee\u5f55 \u5e76\u4e14 \u6587\u4ef6\u540d\u4ee5 Annot_ \u5f00\u5934\n", "                    if (fileName.startsWith(AnnotFilePrefix.toLowerCase())) {\n", "                        String numStr = fileName.replace(AnnotFilePrefix.toLowerCase(), \"\")\n", "                                .split(\"\\\\.\")[0];\n", "                        try {\n", "                            int n = Integer.parseInt(numStr);\n", "                            if (n > maxIndexHolder.value) {\n", "                                maxIndexHolder.value = n;\n", "                            }\n", "                        } catch (NumberFormatException e) {\n", "                            // ignore\n", "                        }\n", "                    }\n", "                });\n", "            }\n", "            maxAnnotIndex = maxIndexHolder.value;\n", "        }\n", "        return maxAnnotIndex;\n", "    }\n", "\n", "    /**\n", "     * \u83b7\u53d6\u9875\u9762\u8d44\u6e90\n", "     *\n", "     * @param name \u8d44\u6e90\u540d\u79f0\uff0c\u5305\u542b\u540e\u7f00\n", "     * @return \u8d44\u6e90\u8def\u5f84\uff0c\u5982\u679c\u8d44\u6e90\u4e0d\u5b58\u5728\u5219\u4e3anull\n", "     * @throws FileNotFoundException \u6587\u4ef6\u4e0d\u5b58\u5728\n", "     */\n", "    public Path get(String name) throws FileNotFoundException {\n", "        // \u5982\u679c\u5b58\u5728\u90a3\u4e48\u83b7\u53d6\u5bb9\u5668\uff0c\u4e0d\u5b58\u5728\u5219\u521b\u5efa\u5bb9\u5668\n", "        return obtainRes().getFile(name);\n", "    }\n", "\n", "\n", "    /**\n", "     * \u83b7\u53d6\u9875\u9762\u63cf\u8ff0\u5bf9\u8c61\n", "     *\n", "     * @return \u9875\u9762\u63cf\u8ff0\n", "     * @throws FileNotFoundException \u63cf\u8ff0\u6587\u4ef6\u4e0d\u5b58\u5728\n", "     * @throws DocumentException     \u63cf\u8ff0\u6587\u4ef6\u5185\u5bb9\u9519\u8bef\n", "     */\n", "    public Page getContent() throws FileNotFoundException, DocumentException {\n", "        Element obj = this.getObj(ContentFileName);\n", "        return new Page(obj);\n", "    }\n", "\n", "    /**\n", "     * \u8bbe\u7f6e\u9875\u9762\u63cf\u8ff0\n", "     *\n", "     * @param content \u9875\u9762\u63cf\u8ff0\n", "     * @return this\n", "     */\n", "    public PageDir setContent(Page content) {\n", "        this.putObj(ContentFileName, content);\n", "        return this;\n", "    }\n", "\n", "}\n"], "test_content": ["package org.ofdrw.pkg.container;\n", "\n", "import org.junit.jupiter.api.Assertions;\n", "import org.junit.jupiter.api.AssertionsKt;\n", "import org.junit.jupiter.api.Test;\n", "import org.ofdrw.core.annotation.pageannot.PageAnnot;\n", "import org.ofdrw.core.basicType.ST_Loc;\n", "import org.ofdrw.pkg.container.content.PageContent;\n", "\n", "import java.io.File;\n", "import java.io.IOException;\n", "import java.nio.file.Files;\n", "import java.nio.file.Path;\n", "import java.nio.file.Paths;\n", "import java.util.Comparator;\n", "import java.util.stream.Stream;\n", "\n", "class PageDirTest {\n", "    @Test\n", "    void collect() throws IOException {\n", "        Path p = Paths.get(\"target/Page_0\");\n", "        PageDir pageDir = new PageDir(p)\n", "                .setContent(PageContent.page());\n", "        pageDir.flush();\n", "    }\n", "\n", "    @Test\n", "    void err(){\n", "        Path p = Paths.get(\"target/Page_AA\");\n", "        Assertions.assertThrows( IllegalArgumentException.class, () -> {\n", "            PageDir pageDir = new PageDir(p)\n", "                    .setContent(PageContent.page());\n", "            pageDir.flush();\n", "        });\n", "        Assertions.assertTrue(Files.notExists(p));\n", "    }\n", "\n", "    @Test\n", "    void addAnnot() throws IOException {\n", "        Path p = Paths.get(\"target/Page_0\");\n", "        PageAnnot pa = new PageAnnot();\n", "        PageDir pd1 = new PageDir(p);\n", "        pd1.clean();\n", "\n", "        pd1 = new PageDir(p);\n", "        ST_Loc annotLoc = pd1.addAnnot(pa);\n", "        // test case 1 \u4e0d\u5b58\u5728\n", "        pd1.flush();\n", "        Assertions.assertEquals(annotLoc.getFileName(),\"Annot_0.xml\");\n", "        pd1.clean();\n", "\n", "        // test case 2 \u4e0d\u89c4\u5219\u6587\u4ef6\u540d\uff0c\u5982 Annot_Text.xml\n", "        pd1 = new PageDir(p);\n", "        pd1.putObj(\"Annot_Text.xml\", pa);\n", "        pd1.flush();\n", "        annotLoc = pd1.addAnnot(pa);\n", "        ST_Loc   annotLoc2 = pd1.addAnnot(pa);\n", "        pd1.flush();\n", "        Assertions.assertEquals(annotLoc.getFileName(),\"Annot_0.xml\");\n", "        Assertions.assertEquals(annotLoc2.getFileName(),\"Annot_1.xml\");\n", "\n", "    }\n", "\n", "}"], "method_lines_dic": {"PageDir::::getIndex()": [91, 93], "PageDir::::getPageRes()": [102, 105], "PageDir::::getPageAnnot()": [125, 128], "PageDir::::getPageAnnots()": [141, 166], "PageDir::::obtainRes()": [186, 188], "PageDir::::getResDir()": [196, 198], "PageDir::::add(java.nio.file.Path)": [207, 211], "PageDir::::getMaxAnnotFileIndex()": [248, 272], "PageDir::::get(java.lang.String)": [281, 284], "PageDir::::getContent()": [294, 297]}, "test_method_lines_dic": {"PageDirTest::::collect()": [19, 25], "PageDirTest::::err()": [27, 36], "PageDirTest::::addAnnot()": [38, 62]}, "reverse_method_lines_dic": {"91": "PageDir::::getIndex()", "92": "PageDir::::getIndex()", "93": "PageDir::::getIndex()", "102": "PageDir::::getPageRes()", "103": "PageDir::::getPageRes()", "104": "PageDir::::getPageRes()", "105": "PageDir::::getPageRes()", "125": "PageDir::::getPageAnnot()", "126": "PageDir::::getPageAnnot()", "127": "PageDir::::getPageAnnot()", "128": "PageDir::::getPageAnnot()", "141": "PageDir::::getPageAnnots()", "142": "PageDir::::getPageAnnots()", "143": "PageDir::::getPageAnnots()", "144": "PageDir::::getPageAnnots()", "145": "PageDir::::getPageAnnots()", "146": "PageDir::::getPageAnnots()", "147": "PageDir::::getPageAnnots()", "148": "PageDir::::getPageAnnots()", "149": "PageDir::::getPageAnnots()", "150": "PageDir::::getPageAnnots()", "151": "PageDir::::getPageAnnots()", "152": "PageDir::::getPageAnnots()", "153": "PageDir::::getPageAnnots()", "154": "PageDir::::getPageAnnots()", "155": "PageDir::::getPageAnnots()", "156": "PageDir::::getPageAnnots()", "157": "PageDir::::getPageAnnots()", "158": "PageDir::::getPageAnnots()", "159": "PageDir::::getPageAnnots()", "160": "PageDir::::getPageAnnots()", "161": "PageDir::::getPageAnnots()", "162": "PageDir::::getPageAnnots()", "163": "PageDir::::getPageAnnots()", "164": "PageDir::::getPageAnnots()", "165": "PageDir::::getPageAnnots()", "166": "PageDir::::getPageAnnots()", "186": "PageDir::::obtainRes()", "187": "PageDir::::obtainRes()", "188": "PageDir::::obtainRes()", "196": "PageDir::::getResDir()", "197": "PageDir::::getResDir()", "198": "PageDir::::getResDir()", "207": "PageDir::::add(java.nio.file.Path)", "208": "PageDir::::add(java.nio.file.Path)", "209": "PageDir::::add(java.nio.file.Path)", "210": "PageDir::::add(java.nio.file.Path)", "211": "PageDir::::add(java.nio.file.Path)", "248": "PageDir::::getMaxAnnotFileIndex()", "249": "PageDir::::getMaxAnnotFileIndex()", "250": "PageDir::::getMaxAnnotFileIndex()", "251": "PageDir::::getMaxAnnotFileIndex()", "252": "PageDir::::getMaxAnnotFileIndex()", "253": "PageDir::::getMaxAnnotFileIndex()", "254": "PageDir::::getMaxAnnotFileIndex()", "255": "PageDir::::getMaxAnnotFileIndex()", "256": "PageDir::::getMaxAnnotFileIndex()", "257": "PageDir::::getMaxAnnotFileIndex()", "258": "PageDir::::getMaxAnnotFileIndex()", "259": "PageDir::::getMaxAnnotFileIndex()", "260": "PageDir::::getMaxAnnotFileIndex()", "261": "PageDir::::getMaxAnnotFileIndex()", "262": "PageDir::::getMaxAnnotFileIndex()", "263": "PageDir::::getMaxAnnotFileIndex()", "264": "PageDir::::getMaxAnnotFileIndex()", "265": "PageDir::::getMaxAnnotFileIndex()", "266": "PageDir::::getMaxAnnotFileIndex()", "267": "PageDir::::getMaxAnnotFileIndex()", "268": "PageDir::::getMaxAnnotFileIndex()", "269": "PageDir::::getMaxAnnotFileIndex()", "270": "PageDir::::getMaxAnnotFileIndex()", "271": "PageDir::::getMaxAnnotFileIndex()", "272": "PageDir::::getMaxAnnotFileIndex()", "281": "PageDir::::get(java.lang.String)", "282": "PageDir::::get(java.lang.String)", "283": "PageDir::::get(java.lang.String)", "284": "PageDir::::get(java.lang.String)", "294": "PageDir::::getContent()", "295": "PageDir::::getContent()", "296": "PageDir::::getContent()", "297": "PageDir::::getContent()"}, "test_reverse_method_lines_dic": {"19": "PageDirTest::::collect()", "20": "PageDirTest::::collect()", "21": "PageDirTest::::collect()", "22": "PageDirTest::::collect()", "23": "PageDirTest::::collect()", "24": "PageDirTest::::collect()", "25": "PageDirTest::::collect()", "27": "PageDirTest::::err()", "28": "PageDirTest::::err()", "29": "PageDirTest::::err()", "30": "PageDirTest::::err()", "31": "PageDirTest::::err()", "32": "PageDirTest::::err()", "33": "PageDirTest::::err()", "34": "PageDirTest::::err()", "35": "PageDirTest::::err()", "36": "PageDirTest::::err()", "38": "PageDirTest::::addAnnot()", "39": "PageDirTest::::addAnnot()", "40": "PageDirTest::::addAnnot()", "41": "PageDirTest::::addAnnot()", "42": "PageDirTest::::addAnnot()", "43": "PageDirTest::::addAnnot()", "44": "PageDirTest::::addAnnot()", "45": "PageDirTest::::addAnnot()", "46": "PageDirTest::::addAnnot()", "47": "PageDirTest::::addAnnot()", "48": "PageDirTest::::addAnnot()", "49": "PageDirTest::::addAnnot()", "50": "PageDirTest::::addAnnot()", "51": "PageDirTest::::addAnnot()", "52": "PageDirTest::::addAnnot()", "53": "PageDirTest::::addAnnot()", "54": "PageDirTest::::addAnnot()", "55": "PageDirTest::::addAnnot()", "56": "PageDirTest::::addAnnot()", "57": "PageDirTest::::addAnnot()", "58": "PageDirTest::::addAnnot()", "59": "PageDirTest::::addAnnot()", "60": "PageDirTest::::addAnnot()", "61": "PageDirTest::::addAnnot()", "62": "PageDirTest::::addAnnot()"}, "tests": [{"test_lines": [19, 25], "covered_lines": [28, 63, 71, 75, 76, 78, 82, 83, 306, 307]}, {"test_lines": [27, 36], "covered_lines": [28, 63, 71, 75, 76, 79, 80, 81]}, {"test_lines": [38, 62], "covered_lines": [28, 63, 71, 75, 76, 78, 82, 83, 221, 225, 226, 227, 238, 239, 249, 250, 251, 252, 253, 255, 256, 257, 263, 267, 268, 269, 271]}]}, "/bernard/dataset_construction/prep/repos/ofdrw/ofdrw-pkg/src/main/java/org/ofdrw/pkg/container/DocDir.java": {"class_content": ["package org.ofdrw.pkg.container;\n", "\n", "import org.dom4j.DocumentException;\n", "import org.dom4j.Element;\n", "import org.ofdrw.core.annotation.Annotations;\n", "import org.ofdrw.core.basicStructure.doc.Document;\n", "import org.ofdrw.core.basicStructure.res.Res;\n", "\n", "import java.io.FileNotFoundException;\n", "import java.io.IOException;\n", "import java.nio.file.Path;\n", "\n", "/**\n", " * \u6587\u6863\u5bb9\u5668\n", " *\n", " * @author \u6743\u89c2\u5b87\n", " * @since 2020-01-18 03:57:59\n", " */\n", "public class DocDir extends VirtualContainer {\n", "\n", "    /**\n", "     * \u6587\u6863\u5bb9\u5668\u540d\u79f0\u524d\u7f00\n", "     */\n", "    public static final String DocContainerPrefix = \"Doc_\";\n", "\n", "    /**\n", "     * \u6587\u6863\u7684\u6839\u8282\u70b9\u63cf\u8ff0\u6587\u4ef6\u540d\u79f0\n", "     */\n", "    public static final String DocumentFileName = \"Document.xml\";\n", "\n", "    /**\n", "     * \u6587\u6863\u516c\u5171\u8d44\u6e90\u7d22\u5f15\u63cf\u8ff0\u6587\u4ef6\u540d\u79f0\n", "     */\n", "    public static final String PublicResFileName = \"PublicRes.xml\";\n", "\n", "    /**\n", "     * \u6587\u6863\u81ea\u8eab\u8d44\u6e90\u7d22\u5f15\u63cf\u8ff0\u6587\u4ef6\u540d\u79f0\n", "     */\n", "    public static final String DocumentResFileName = \"DocumentRes.xml\";\n", "\n", "    /**\n", "     * \u6570\u5b57\u7b7e\u540d\u5bb9\u5668\u540d\u79f0\n", "     */\n", "    public static final String SignsDir = \"Signs\";\n", "\n", "    /**\n", "     * \u6570\u5b57\u7b7e\u540d\u5bb9\u5668\u540d\u79f0\u524d\u7f00\n", "     */\n", "    public static final String SignContainerPrefix = \"Sign_\";\n", "\n", "    /**\n", "     * \u81ea\u5b9a\u4e49\u6807\u7b7e\u5bb9\u5668\u540d\u79f0\n", "     * <p>\n", "     * GMT0099 OFD 2.0\n", "     */\n", "    public static final String TagsDir = \"Tags\";\n", "\n", "    /**\n", "     * \u4e34\u65f6\u6587\u4ef6\u5bb9\u5668\n", "     * <p>\n", "     * OFD 2.0\n", "     */\n", "    public static final String TempsDir = \"Temps\";\n", "\n", "\n", "    /**\n", "     * \u9875\u9762\u5bb9\u5668\n", "     */\n", "    public static final String PagesDir = \"Pages\";\n", "\n", "    /**\n", "     * \u9875\u9762\u5bb9\u5668\u540d\u79f0\u524d\u7f00\n", "     */\n", "    public static final String PageContainerPrefix = \"Page_\";\n", "\n", "    /**\n", "     * \u8d44\u6e90\u5bb9\u5668\n", "     */\n", "    public static final String ResDir = \"Res\";\n", "\n", "    /**\n", "     * \u6ce8\u91ca\u6587\u4ef6\u865a\u62df\u5bb9\u5668\n", "     * <p>\n", "     * GMT0099 OFD 2.0\n", "     */\n", "    public static final String AnnotsDir = \"Annots\";\n", "\n", "\n", "    /**\n", "     * \u6ce8\u91ca\u5165\u53e3\u6587\u4ef6\u540d\u79f0\n", "     */\n", "    public static final String AnnotationsFileName = \"Annotations.xml\";\n", "\n", "    /**\n", "     * \u9644\u4ef6\u5165\u53e3\u6587\u4ef6\u540d\u79f0\n", "     */\n", "    public static final String Attachments = \"Attachments.xml\";\n", "\n", "    /**\n", "     * \u8868\u793a\u7b2c\u51e0\u4efd\u6587\u6863\uff0c\u4ece0\u5f00\u59cb\n", "     */\n", "    private int index = 0;\n", "\n", "\n", "    public DocDir(Path fullDir) throws IllegalArgumentException {\n", "        super(fullDir);\n", "        // \u6807\u51c6\u7684\u7b7e\u540d\u76ee\u5f55\u540d\u4e3a Sign_N (N\u4ee3\u8868\u7b2c\u51e0\u4e2a\u7b7e\u540d)\n", "        String indexStr = this.getContainerName()\n", "                .replace(DocContainerPrefix, \"\");\n", "        try {\n", "            index = Integer.parseInt(indexStr);\n", "        } catch (NumberFormatException e) {\n", "            clean();\n", "            throw new IllegalArgumentException(\"\u4e0d\u5408\u6cd5\u7684\u6587\u4ef6\u76ee\u5f55\u540d\u79f0\uff1a\" + this.getContainerName() + \"\uff0c\u76ee\u5f55\u540d\u79f0\u5e94\u4e3a Doc_N\");\n", "        }\n", "    }\n", "\n", "    /**\n", "     * \u83b7\u53d6\u6587\u6863\u7d22\u5f15\n", "     *\n", "     * @return \u6587\u6863\u7f16\u53f7\uff08\u7528\u4e8e\u8868\u793a\u7b2c\u51e0\u4e2a\uff09 \uff0c\u4ece0\u8d77\n", "     */\n", "    public Integer getIndex() {\n", "        return index;\n", "    }\n", "\n", "    /**\n", "     * \u83b7\u53d6\u6587\u6863\u7684\u6839\u8282\u70b9\n", "     *\n", "     * @return \u6587\u6863\u7684\u6839\u8282\u70b9\n", "     * @throws FileNotFoundException \u6587\u6863\u7684\u6839\u8282\u70b9\u6587\u4ef6\u4e0d\u5b58\u5728\n", "     * @throws DocumentException     \u6587\u6863\u7684\u6839\u8282\u70b9\u6587\u4ef6\u89e3\u6790\u5f02\u5e38\n", "     */\n", "    public Document getDocument() throws FileNotFoundException, DocumentException {\n", "        Element obj = this.getObj(DocumentFileName);\n", "        return new Document(obj);\n", "    }\n", "\n", "    /**\n", "     * \u8bbe\u7f6e \u6587\u6863\u7684\u6839\u8282\u70b9\n", "     *\n", "     * @param document \u6587\u6863\u7684\u6839\u8282\u70b9\n", "     * @return this\n", "     */\n", "    public DocDir setDocument(Document document) {\n", "        this.putObj(DocumentFileName, document);\n", "        return this;\n", "    }\n", "\n", "    /**\n", "     * \u83b7\u53d6\u6587\u6863\u516c\u5171\u8d44\u6e90\u7d22\u5f15\n", "     *\n", "     * @return \u6587\u6863\u516c\u5171\u8d44\u6e90\u7d22\u5f15\n", "     * @throws FileNotFoundException \u6587\u6863\u516c\u5171\u8d44\u6e90\u7d22\u5f15\u6587\u4ef6\u4e0d\u5b58\u5728\n", "     * @throws DocumentException     \u6587\u6863\u516c\u5171\u8d44\u6e90\u7d22\u5f15\u6587\u4ef6\u89e3\u6790\u5f02\u5e38\n", "     */\n", "    public Res getPublicRes() throws FileNotFoundException, DocumentException {\n", "        Element obj = this.getObj(PublicResFileName);\n", "        return new Res(obj);\n", "    }\n", "\n", "    /**\n", "     * \u8bbe\u7f6e \u6587\u6863\u516c\u5171\u8d44\u6e90\u7d22\u5f15\n", "     *\n", "     * @param publicRes \u6587\u6863\u516c\u5171\u8d44\u6e90\u7d22\u5f15\n", "     * @return this\n", "     */\n", "    public DocDir setPublicRes(Res publicRes) {\n", "        this.putObj(PublicResFileName, publicRes);\n", "        return this;\n", "    }\n", "\n", "    /**\n", "     * \u83b7\u53d6\u6587\u6863\u81ea\u8eab\u8d44\u6e90\u7d22\u5f15\u5bf9\u8c61\n", "     *\n", "     * @return \u6587\u6863\u81ea\u8eab\u8d44\u6e90\u7d22\u5f15\u5bf9\u8c61\n", "     * @throws FileNotFoundException \u6587\u6863\u81ea\u8eab\u8d44\u6e90\u7d22\u5f15\u6587\u4ef6\u4e0d\u5b58\u5728\n", "     * @throws DocumentException     \u6587\u6863\u81ea\u8eab\u8d44\u6e90\u7d22\u5f15\u6587\u4ef6\u89e3\u6790\u5f02\u5e38\n", "     */\n", "    public Res getDocumentRes() throws FileNotFoundException, DocumentException {\n", "        Element obj = this.getObj(DocumentResFileName);\n", "        return new Res(obj);\n", "    }\n", "\n", "\n", "    /**\n", "     * \u83b7\u53d6\u6ce8\u91ca\u5217\u8868\u5bf9\u8c61\n", "     *\n", "     * @return \u6ce8\u91ca\u5217\u8868\u5bf9\u8c61\n", "     * @throws FileNotFoundException \u6587\u6863\u81ea\u8eab\u8d44\u6e90\u7d22\u5f15\u6587\u4ef6\u4e0d\u5b58\u5728\n", "     * @throws DocumentException     \u6587\u6863\u81ea\u8eab\u8d44\u6e90\u7d22\u5f15\u6587\u4ef6\u89e3\u6790\u5f02\u5e38\n", "     */\n", "    public Annotations getAnnotations() throws FileNotFoundException, DocumentException {\n", "        Element obj = this.getObj(AnnotationsFileName);\n", "        return new Annotations(obj);\n", "    }\n", "\n", "    /**\n", "     * \u8bbe\u7f6e\u6ce8\u91ca\u5217\u8868\u5bf9\u8c61\n", "     * <p>\n", "     * \u63a8\u8350\u4f7f\u7528 {@link  org.ofdrw.pkg.container.AnnotsDir#setAnnotations(Annotations)}\n", "     *\n", "     * @param annotations \u6ce8\u91ca\u5217\u8868\u5bf9\u8c61\n", "     * @return \u6ce8\u91ca\u5217\u8868\u5bf9\u8c61\n", "     */\n", "    public DocDir setAnnotations(Annotations annotations) {\n", "        this.putObj(AnnotationsFileName, annotations);\n", "        return this;\n", "    }\n", "\n", "    /**\n", "     * \u8bbe\u7f6e \u6587\u6863\u81ea\u8eab\u8d44\u6e90\u7d22\u5f15\n", "     *\n", "     * @param documentRes \u6587\u6863\u81ea\u8eab\u8d44\u6e90\u7d22\u5f15\n", "     * @return this\n", "     */\n", "    public DocDir setDocumentRes(Res documentRes) {\n", "        this.putObj(DocumentResFileName, documentRes);\n", "        return this;\n", "    }\n", "\n", "    /**\n", "     * \u83b7\u53d6\u8d44\u6e90\u5bb9\u5668\n", "     *\n", "     * @return \u8d44\u6e90\u5bb9\u5668\n", "     * @throws FileNotFoundException \u8d44\u6e90\u5bb9\u5668\u4e0d\u5b58\u5728\n", "     */\n", "    public ResDir getRes() throws FileNotFoundException {\n", "        return this.getContainer(DocDir.ResDir, ResDir::new);\n", "    }\n", "\n", "\n", "    /**\n", "     * \u83b7\u53d6 \u8d44\u6e90\u6587\u4ef6\u5939\n", "     * <p>\n", "     * \u5982\u679c\u8d44\u6e90\u6587\u4ef6\u4e0d\u5b58\u5728\u5219\u521b\u5efa\n", "     *\n", "     * @return \u8d44\u6e90\u76ee\u5f55\n", "     */\n", "    public ResDir obtainRes() {\n", "        return this.obtainContainer(DocDir.ResDir, ResDir::new);\n", "    }\n", "\n", "    /**\n", "     * \u83b7\u53d6 \u6570\u5b57\u7b7e\u540d\u5b58\u50a8\u76ee\u5f55\n", "     *\n", "     * @return \u6570\u5b57\u7b7e\u540d\u5b58\u50a8\u76ee\u5f55\n", "     * @throws FileNotFoundException \u6570\u5b57\u7b7e\u540d\u5b58\u50a8\u76ee\u5f55\u4e0d\u5b58\u5728\n", "     */\n", "    public SignsDir getSigns() throws FileNotFoundException {\n", "        return this.getContainer(DocDir.SignsDir, SignsDir::new);\n", "    }\n", "\n", "    /**\n", "     * \u83b7\u53d6 \u6570\u5b57\u7b7e\u540d\u5b58\u50a8\u76ee\u5f55\n", "     * <p>\n", "     * \u5982\u679c\u6570\u5b57\u7b7e\u540d\u5b58\u50a8\u76ee\u5f55\u4e0d\u5b58\u5728\u5219\u521b\u5efa\n", "     *\n", "     * @return \u6570\u5b57\u7b7e\u540d\u5b58\u50a8\u76ee\u5f55\n", "     */\n", "    public SignsDir obtainSigns() {\n", "        return this.obtainContainer(DocDir.SignsDir, SignsDir::new);\n", "    }\n", "\n", "    /**\n", "     * \u83b7\u53d6 \u9875\u9762\u5b58\u50a8\u76ee\u5f55\n", "     *\n", "     * @return \u9875\u9762\u5b58\u50a8\u76ee\u5f55\n", "     * @throws FileNotFoundException \u9875\u9762\u5b58\u50a8\u76ee\u5f55\u4e0d\u5b58\u5728\n", "     */\n", "    public PagesDir getPages() throws FileNotFoundException {\n", "        return this.getContainer(DocDir.PagesDir, PagesDir::new);\n", "    }\n", "\n", "    /**\n", "     * \u83b7\u53d6 \u9875\u9762\u5b58\u50a8\u76ee\u5f55\n", "     * <p>\n", "     * \u5982\u679c\u9875\u9762\u5b58\u50a8\u76ee\u5f55\u5219\u4f1a\u521b\u5efa\n", "     *\n", "     * @return \u9875\u9762\u5b58\u50a8\u76ee\u5f55\n", "     */\n", "    public PagesDir obtainPages() {\n", "        return this.obtainContainer(DocDir.PagesDir, PagesDir::new);\n", "    }\n", "\n", "    /**\n", "     * \u83b7\u53d6 \u81ea\u5b9a\u4e49\u6807\u7b7e\u5bb9\u5668\n", "     * <p>\n", "     * \u5982\u679c\u76ee\u5f55\u4e0d\u5b58\u5728\u5219\u4f1a\u521b\u5efa\n", "     * <p>\n", "     * GMT0099 OFD 2.0\n", "     *\n", "     * @return \u81ea\u5b9a\u4e49\u6807\u7b7e\u5bb9\u5668\n", "     */\n", "    public VirtualContainer obtainTags() {\n", "        return this.obtainContainer(DocDir.TagsDir, VirtualContainer::new);\n", "    }\n", "\n", "    /**\n", "     * \u83b7\u53d6 \u81ea\u5b9a\u4e49\u6807\u7b7e\u5bb9\u5668\n", "     * <p>\n", "     * GMT0099 OFD 2.0\n", "     *\n", "     * @return \u81ea\u5b9a\u4e49\u6807\u7b7e\u5bb9\u5668\n", "     * @throws FileNotFoundException \u9875\u9762\u5b58\u50a8\u76ee\u5f55\u4e0d\u5b58\u5728\n", "     */\n", "    public VirtualContainer getTags() throws FileNotFoundException {\n", "        return this.getContainer(DocDir.TagsDir, VirtualContainer::new);\n", "    }\n", "\n", "    /**\n", "     * \u83b7\u53d6 \u6a21\u677f\u5bb9\u5668\n", "     * <p>\n", "     * \u5982\u679c\u76ee\u5f55\u4e0d\u5b58\u5728\u5219\u4f1a\u521b\u5efa\n", "     * <p>\n", "     * GMT0099 OFD 2.0\n", "     *\n", "     * @return \u6a21\u677f\u5bb9\u5668\n", "     */\n", "    public TempsDir obtainTemps() {\n", "        return this.obtainContainer(DocDir.TempsDir, TempsDir::new);\n", "    }\n", "\n", "    /**\n", "     * \u83b7\u53d6 \u6a21\u677f\u5bb9\u5668\n", "     * <p>\n", "     * GMT0099 OFD 2.0\n", "     *\n", "     * @return \u6a21\u677f\u5bb9\u5668\n", "     * @throws FileNotFoundException \u9875\u9762\u5b58\u50a8\u76ee\u5f55\u4e0d\u5b58\u5728\n", "     */\n", "    public TempsDir getTemps() throws FileNotFoundException {\n", "        return this.getContainer(DocDir.TempsDir, TempsDir::new);\n", "    }\n", "\n", "    /**\n", "     * \u83b7\u53d6 \u6ce8\u91ca\u5bb9\u5668\n", "     * <p>\n", "     * \u5982\u679c\u76ee\u5f55\u4e0d\u5b58\u5728\u5219\u4f1a\u521b\u5efa\n", "     * <p>\n", "     * GMT0099 OFD 2.0\n", "     *\n", "     * @return \u6ce8\u91ca\u5bb9\u5668\n", "     */\n", "    public AnnotsDir obtainAnnots() {\n", "        return this.obtainContainer(DocDir.AnnotsDir, AnnotsDir::new);\n", "    }\n", "\n", "    /**\n", "     * \u83b7\u53d6 \u6ce8\u91ca\u5bb9\u5668\n", "     * <p>\n", "     * GMT0099 OFD 2.0\n", "     *\n", "     * @return \u6ce8\u91ca\u5bb9\u5668\n", "     * @throws FileNotFoundException \u9875\u9762\u5b58\u50a8\u76ee\u5f55\u4e0d\u5b58\u5728\n", "     */\n", "    public AnnotsDir getAnnots() throws FileNotFoundException {\n", "        return this.getContainer(DocDir.AnnotsDir, AnnotsDir::new);\n", "    }\n", "\n", "\n", "    /**\n", "     * \u589e\u52a0\u8d44\u6e90\n", "     *\n", "     * @param resource \u8d44\u6e90\n", "     * @return this\n", "     * @throws IOException \u6587\u4ef6\u590d\u5236\u8fc7\u7a0b\u4e2dIO\u5f02\u5e38\n", "     */\n", "    public DocDir addResource(Path resource) throws IOException {\n", "        obtainRes().add(resource);\n", "        return this;\n", "    }\n", "\n", "    /**\n", "     * \u589e\u52a0\u8d44\u6e90 \u5e76\u8fd4\u56de\u8d44\u6e90\u5728\u6587\u6863\u4e2d\u7684\u7edd\u5bf9\u8def\u5f84\n", "     *\n", "     * @param resource \u8d44\u6e90\n", "     * @return \u6587\u4ef6\u590d\u5236\u540e\u7684\u7edd\u5bf9\u8def\u5f84\n", "     * @throws IOException \u6587\u4ef6\u590d\u5236\u8fc7\u7a0b\u4e2dIO\u5f02\u5e38\n", "     */\n", "    public Path addResourceWithPath(Path resource) throws IOException {\n", "        return obtainRes().addWithPath(resource);\n", "    }\n", "\n", "    /**\n", "     * \u83b7\u53d6\u8d44\u6e90\n", "     *\n", "     * @param name \u8d44\u6e90\u540d\u79f0\uff08\u5305\u542b\u540e\u7f00\u540d\u79f0\uff09\n", "     * @return \u8d44\u6e90\n", "     * @throws FileNotFoundException \u8d44\u6e90\u4e0d\u5b58\u5728\n", "     */\n", "    public Path getResource(String name) throws FileNotFoundException {\n", "        return obtainRes().get(name);\n", "    }\n", "}\n"], "test_content": ["package org.ofdrw.pkg.container;\n", "\n", "import org.junit.jupiter.api.Assertions;\n", "import org.junit.jupiter.api.Test;\n", "import org.ofdrw.pkg.container.content.DocumentContent;\n", "import org.ofdrw.pkg.container.content.PageContent;\n", "import org.ofdrw.pkg.container.content.PublicResContent;\n", "\n", "import java.io.IOException;\n", "import java.nio.file.Path;\n", "import java.nio.file.Paths;\n", "\n", "class DocDirTest {\n", "    @Test\n", "    void collect() throws IOException {\n", "        Path p = Paths.get(\"target/Doc_0\");\n", "        Path font = Paths.get(\"src/test/resources\", \"NotoSerifCJKsc-Medium.otf\");\n", "        DocDir docDir = new DocDir(p)\n", "                .addResource(font)\n", "                .setPublicRes(PublicResContent.res())\n", "                .setDocument(DocumentContent.doc());\n", "        PagesDir ps = docDir.obtainPages();\n", "        ps.newPageDir().setContent(PageContent.page());\n", "        docDir.flush();\n", "    }\n", "    @Test\n", "    void err(){\n", "        Assertions.assertThrows(IllegalArgumentException.class, () -> {\n", "            Path p = Paths.get(\"target/Doc_AAA\");\n", "            DocDir docDir = new DocDir(p);\n", "        });\n", "    }\n", "}"], "method_lines_dic": {"DocDir::::getIndex()": [123, 125], "DocDir::::getDocument()": [134, 137], "DocDir::::getPublicRes()": [157, 160], "DocDir::::getDocumentRes()": [180, 183], "DocDir::::getAnnotations()": [193, 196], "DocDir::::getRes()": [228, 230], "DocDir::::obtainRes()": [240, 242], "DocDir::::getSigns()": [250, 252], "DocDir::::obtainSigns()": [261, 263], "DocDir::::getPages()": [271, 273], "DocDir::::obtainPages()": [282, 284], "DocDir::::obtainTags()": [295, 297], "DocDir::::getTags()": [307, 309], "DocDir::::obtainTemps()": [320, 322], "DocDir::::getTemps()": [332, 334], "DocDir::::obtainAnnots()": [345, 347], "DocDir::::getAnnots()": [357, 359], "DocDir::::addResource(java.nio.file.Path)": [369, 372], "DocDir::::addResourceWithPath(java.nio.file.Path)": [381, 383], "DocDir::::getResource(java.lang.String)": [392, 394]}, "test_method_lines_dic": {"DocDirTest::::collect()": [14, 25], "DocDirTest::::err()": [26, 32]}, "reverse_method_lines_dic": {"123": "DocDir::::getIndex()", "124": "DocDir::::getIndex()", "125": "DocDir::::getIndex()", "134": "DocDir::::getDocument()", "135": "DocDir::::getDocument()", "136": "DocDir::::getDocument()", "137": "DocDir::::getDocument()", "157": "DocDir::::getPublicRes()", "158": "DocDir::::getPublicRes()", "159": "DocDir::::getPublicRes()", "160": "DocDir::::getPublicRes()", "180": "DocDir::::getDocumentRes()", "181": "DocDir::::getDocumentRes()", "182": "DocDir::::getDocumentRes()", "183": "DocDir::::getDocumentRes()", "193": "DocDir::::getAnnotations()", "194": "DocDir::::getAnnotations()", "195": "DocDir::::getAnnotations()", "196": "DocDir::::getAnnotations()", "228": "DocDir::::getRes()", "229": "DocDir::::getRes()", "230": "DocDir::::getRes()", "240": "DocDir::::obtainRes()", "241": "DocDir::::obtainRes()", "242": "DocDir::::obtainRes()", "250": "DocDir::::getSigns()", "251": "DocDir::::getSigns()", "252": "DocDir::::getSigns()", "261": "DocDir::::obtainSigns()", "262": "DocDir::::obtainSigns()", "263": "DocDir::::obtainSigns()", "271": "DocDir::::getPages()", "272": "DocDir::::getPages()", "273": "DocDir::::getPages()", "282": "DocDir::::obtainPages()", "283": "DocDir::::obtainPages()", "284": "DocDir::::obtainPages()", "295": "DocDir::::obtainTags()", "296": "DocDir::::obtainTags()", "297": "DocDir::::obtainTags()", "307": "DocDir::::getTags()", "308": "DocDir::::getTags()", "309": "DocDir::::getTags()", "320": "DocDir::::obtainTemps()", "321": "DocDir::::obtainTemps()", "322": "DocDir::::obtainTemps()", "332": "DocDir::::getTemps()", "333": "DocDir::::getTemps()", "334": "DocDir::::getTemps()", "345": "DocDir::::obtainAnnots()", "346": "DocDir::::obtainAnnots()", "347": "DocDir::::obtainAnnots()", "357": "DocDir::::getAnnots()", "358": "DocDir::::getAnnots()", "359": "DocDir::::getAnnots()", "369": "DocDir::::addResource(java.nio.file.Path)", "370": "DocDir::::addResource(java.nio.file.Path)", "371": "DocDir::::addResource(java.nio.file.Path)", "372": "DocDir::::addResource(java.nio.file.Path)", "381": "DocDir::::addResourceWithPath(java.nio.file.Path)", "382": "DocDir::::addResourceWithPath(java.nio.file.Path)", "383": "DocDir::::addResourceWithPath(java.nio.file.Path)", "392": "DocDir::::getResource(java.lang.String)", "393": "DocDir::::getResource(java.lang.String)", "394": "DocDir::::getResource(java.lang.String)"}, "test_reverse_method_lines_dic": {"14": "DocDirTest::::collect()", "15": "DocDirTest::::collect()", "16": "DocDirTest::::collect()", "17": "DocDirTest::::collect()", "18": "DocDirTest::::collect()", "19": "DocDirTest::::collect()", "20": "DocDirTest::::collect()", "21": "DocDirTest::::collect()", "22": "DocDirTest::::collect()", "23": "DocDirTest::::collect()", "24": "DocDirTest::::collect()", "25": "DocDirTest::::collect()", "26": "DocDirTest::::err()", "27": "DocDirTest::::err()", "28": "DocDirTest::::err()", "29": "DocDirTest::::err()", "30": "DocDirTest::::err()", "31": "DocDirTest::::err()", "32": "DocDirTest::::err()"}, "tests": [{"test_lines": [14, 25], "covered_lines": [102, 106, 108, 109, 111, 115, 116, 146, 147, 169, 170, 241, 283, 370, 371]}, {"test_lines": [26, 32], "covered_lines": [102, 106, 108, 109, 112, 113, 114]}]}, "/bernard/dataset_construction/prep/repos/ofdrw/ofdrw-pkg/src/main/java/org/ofdrw/pkg/container/PagesDir.java": {"class_content": ["package org.ofdrw.pkg.container;\n", "\n", "import java.io.File;\n", "import java.io.FileNotFoundException;\n", "import java.nio.file.Path;\n", "\n", "/**\n", " * \u9875\u9762\u5bb9\u5668\n", " *\n", " * @author \u6743\u89c2\u5b87\n", " * @since 2020-01-18 03:34:34\n", " */\n", "public class PagesDir extends VirtualContainer {\n", "    /**\n", "     * \u6700\u5927\u9875\u9762\u7d22\u5f15 + 1\n", "     * <p>\n", "     * index + 1\n", "     */\n", "    private int maxPageIndex = 0;\n", "\n", "\n", "    public PagesDir(Path fullDir) throws IllegalArgumentException {\n", "        super(fullDir);\n", "        initContainer();\n", "    }\n", "\n", "    /**\n", "     * \u521d\u59cb\u5316\u5bb9\u5668\n", "     */\n", "    private void initContainer() {\n", "        File fullDirFile = new File(getSysAbsPath());\n", "        File[] files = fullDirFile.listFiles();\n", "        if (files != null) {\n", "            // \u904d\u5386\u5bb9\u5668\u4e2d\u5df2\u7ecf\u6709\u7684\u9875\u9762\u76ee\u5f55\uff0c\u521d\u59cb\u9875\u9762\u6570\u91cf\n", "            for (File f : files) {\n", "                // \u7b7e\u540d\u76ee\u5f55\u540d\u4e3a\uff1a Page_N\n", "                if (f.getName().startsWith(PageDir.PageContainerPrefix)) {\n", "                    String numb = f.getName().replace(PageDir.PageContainerPrefix, \"\");\n", "                    int num = Integer.parseInt(numb);\n", "                    if (maxPageIndex <= num) {\n", "                        maxPageIndex = num + 1;\n", "                    }\n", "                }\n", "            }\n", "        }\n", "    }\n", "\n", "    /**\n", "     * \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u9875\u9762\u5bb9\u5668\n", "     *\n", "     * @return \u9875\u9762\u5bb9\u5668\n", "     */\n", "    public PageDir newPageDir() {\n", "        String name = PageDir.PageContainerPrefix + maxPageIndex;\n", "        maxPageIndex++;\n", "        // \u521b\u5efa\u5bb9\u5668\n", "        return this.obtainContainer(name, PageDir::new);\n", "    }\n", "\n", "    /**\n", "     * \u83b7\u53d6\u7d22\u5f15\u7684\u9875\u9762\u5bb9\u5668\n", "     * <p>\n", "     * \u9875\u7801 = index + 1\n", "     *\n", "     * @param index \u7d22\u5f15\uff08\u4ece0\u5f00\u59cb\uff09\n", "     * @return \u6307\u5b9a\u7d22\u5f15\u9875\u9762\u5bb9\u5668\n", "     * @throws FileNotFoundException \u65e0\u6cd5\u627e\u5230\u6307\u5b9a\u7d22\u5f15\u9875\u9762\n", "     */\n", "    public PageDir getByIndex(int index) throws FileNotFoundException {\n", "        String containerName = PageDir.PageContainerPrefix + index;\n", "        return this.getContainer(containerName, PageDir::new);\n", "    }\n", "    public PageDir getPageDir(String containerName) throws FileNotFoundException {\n", "        return this.getContainer(containerName, PageDir::new);\n", "    }\n", "}\n"], "test_content": ["package org.ofdrw.pkg.container;\n", "\n", "import org.junit.jupiter.api.Test;\n", "import org.ofdrw.pkg.container.content.PageContent;\n", "\n", "import java.io.IOException;\n", "import java.nio.file.Path;\n", "import java.nio.file.Paths;\n", "\n", "class PagesDirTest {\n", "\n", "    @Test\n", "    void collect() throws IOException {\n", "        Path p = Paths.get(\"target/Pages\");\n", "        PagesDir ps = new PagesDir(p);\n", "        ps.newPageDir().setContent(PageContent.page());\n", "        ps.flush();\n", "        System.out.println(p.toAbsolutePath().toString());\n", "    }\n", "}"], "method_lines_dic": {"PagesDir::::initContainer()": [30, 46], "PagesDir::::newPageDir()": [53, 58], "PagesDir::::getByIndex(int)": [69, 72], "PagesDir::::getPageDir(java.lang.String)": [73, 75]}, "test_method_lines_dic": {"PagesDirTest::::collect()": [12, 19]}, "reverse_method_lines_dic": {"30": "PagesDir::::initContainer()", "31": "PagesDir::::initContainer()", "32": "PagesDir::::initContainer()", "33": "PagesDir::::initContainer()", "34": "PagesDir::::initContainer()", "35": "PagesDir::::initContainer()", "36": "PagesDir::::initContainer()", "37": "PagesDir::::initContainer()", "38": "PagesDir::::initContainer()", "39": "PagesDir::::initContainer()", "40": "PagesDir::::initContainer()", "41": "PagesDir::::initContainer()", "42": "PagesDir::::initContainer()", "43": "PagesDir::::initContainer()", "44": "PagesDir::::initContainer()", "45": "PagesDir::::initContainer()", "46": "PagesDir::::initContainer()", "53": "PagesDir::::newPageDir()", "54": "PagesDir::::newPageDir()", "55": "PagesDir::::newPageDir()", "56": "PagesDir::::newPageDir()", "57": "PagesDir::::newPageDir()", "58": "PagesDir::::newPageDir()", "69": "PagesDir::::getByIndex(int)", "70": "PagesDir::::getByIndex(int)", "71": "PagesDir::::getByIndex(int)", "72": "PagesDir::::getByIndex(int)", "73": "PagesDir::::getPageDir(java.lang.String)", "74": "PagesDir::::getPageDir(java.lang.String)", "75": "PagesDir::::getPageDir(java.lang.String)"}, "test_reverse_method_lines_dic": {"12": "PagesDirTest::::collect()", "13": "PagesDirTest::::collect()", "14": "PagesDirTest::::collect()", "15": "PagesDirTest::::collect()", "16": "PagesDirTest::::collect()", "17": "PagesDirTest::::collect()", "18": "PagesDirTest::::collect()", "19": "PagesDirTest::::collect()"}, "tests": [{"test_lines": [12, 19], "covered_lines": [19, 23, 24, 25, 31, 32, 33, 35, 46, 54, 55, 57]}]}, "/bernard/dataset_construction/prep/repos/ofdrw/ofdrw-pkg/src/main/java/org/ofdrw/pkg/container/ResDir.java": {"class_content": ["package org.ofdrw.pkg.container;\n", "\n", "import java.io.FileNotFoundException;\n", "import java.io.IOException;\n", "import java.nio.file.Files;\n", "import java.nio.file.Path;\n", "\n", "/**\n", " * \u8d44\u6e90\u76ee\u5f55\n", " *\n", " * @author \u6743\u89c2\u5b87\n", " * @since 2020-4-3 19:41:32\n", " */\n", "public class ResDir extends VirtualContainer {\n", "\n", "    public ResDir(Path fullDir) throws IllegalArgumentException {\n", "        super(fullDir);\n", "    }\n", "\n", "    /**\n", "     * \u5411\u76ee\u5f55\u4e2d\u52a0\u5165\u8d44\u6e90\n", "     * <p>\n", "     * \u52a0\u5165\u7684\u8d44\u6e90\u5c06\u4f1a\u88ab\u590d\u5236\u5230\u6307\u5b9a\u76ee\u5f55\uff0c\u4e0e\u539f\u6709\u8d44\u6e90\u65e0\u5173\u3002\n", "     * <p>\n", "     * \u82e5\u5b58\u5728\u540c\u540d\u6587\u4ef6\uff0c\u90a3\u4e48\u88ab\u52a0\u5165\u6587\u4ef6\u5c06\u91cd\u547d\u540d\uff0c\u82e5\u4f60\u9700\u8981\u83b7\u53d6\u91cd\u540d\u540e\u7684\u6587\u4ef6\u4fe1\u606f\u8bf7\u4f7f\u7528 {@link #putFileWithPath(Path)}\n", "     *\n", "     * @param res \u8d44\u6e90\n", "     * @return this\n", "     * @throws IOException \u6587\u4ef6\u590d\u5236\u8fc7\u7a0b\u4e2d\u53d1\u751f\u7684\u5f02\u5e38\n", "     */\n", "    public ResDir add(Path res) throws IOException {\n", "        if (res == null || Files.notExists(res)) {\n", "            return this;\n", "        }\n", "        this.putFile(res);\n", "        return this;\n", "    }\n", "\n", "    /**\n", "     * \u5411\u76ee\u5f55\u4e2d\u52a0\u5165\u8d44\u6e90\n", "     * <p>\n", "     * \u52a0\u5165\u7684\u8d44\u6e90\u5c06\u4f1a\u88ab\u590d\u5236\u5230\u6307\u5b9a\u76ee\u5f55\uff0c\u4e0e\u539f\u6709\u8d44\u6e90\u65e0\u5173\n", "     * <p>\n", "     * \u82e5\u5b58\u5728\u540c\u540d\u6587\u4ef6\uff0c\u90a3\u4e48\u88ab\u52a0\u5165\u6587\u4ef6\u5c06\u91cd\u547d\u540d\uff0c\u91cd\u540d\u540e\u7684\u6587\u4ef6\u4ee5\u8fd4\u8fd8\u503c\u5f62\u5f0f\u8fd4\u56de\u3002\n", "     *\n", "     * @param res \u8d44\u6e90\n", "     * @return \u52a0\u5165\u540e\u6587\u4ef6\u5728\u5bb9\u5668\u7684\u7edd\u5bf9\u8def\u5f84\n", "     * @throws IOException \u6587\u4ef6\u590d\u5236\u8fc7\u7a0b\u4e2d\u53d1\u751f\u7684\u5f02\u5e38\n", "     */\n", "    public Path addWithPath(Path res) throws IOException {\n", "        if (res == null || Files.notExists(res)) {\n", "            return null;\n", "        }\n", "        return this.putFileWithPath(res);\n", "    }\n", "\n", "\n", "    /**\n", "     * \u83b7\u53d6\u5bb9\u5668\u4e2d\u7684\u8d44\u6e90\n", "     *\n", "     * @param name \u8d44\u6e90\u540d\u79f0\uff08\u5305\u542b\u540e\u7f00\uff09\n", "     * @return \u5bb9\u5668\u4e2d\u7684\u8d44\u6e90\u8def\u5f84\n", "     * @throws FileNotFoundException \u6587\u4ef6\u4e0d\u5b58\u5728\n", "     */\n", "    public Path get(String name) throws FileNotFoundException {\n", "        return getFile(name);\n", "    }\n", "}\n"], "test_content": ["package org.ofdrw.pkg.container;\n", "\n", "import org.junit.jupiter.api.Test;\n", "\n", "import java.io.IOException;\n", "import java.nio.file.Path;\n", "import java.nio.file.Paths;\n", "\n", "class ResDirTest {\n", "\n", "    @Test\n", "    void collect() throws IOException {\n", "        Path path = Paths.get(\"src/test/resources\", \"NotoSerifCJKsc-Medium.otf\");\n", "        Path p = Paths.get(\"target/ResTest\");\n", "        ResDir res = new ResDir(p)\n", "                .add(path);\n", "        res.flush();\n", "        System.out.println(\"\u751f\u6210\u76ee\u5f55\u4f4d\u7f6e: \" +res.getSysAbsPath());\n", "    }\n", "}"], "method_lines_dic": {"ResDir::::add(java.nio.file.Path)": [31, 37], "ResDir::::addWithPath(java.nio.file.Path)": [50, 55], "ResDir::::get(java.lang.String)": [65, 67]}, "test_method_lines_dic": {"ResDirTest::::collect()": [11, 19]}, "reverse_method_lines_dic": {"31": "ResDir::::add(java.nio.file.Path)", "32": "ResDir::::add(java.nio.file.Path)", "33": "ResDir::::add(java.nio.file.Path)", "34": "ResDir::::add(java.nio.file.Path)", "35": "ResDir::::add(java.nio.file.Path)", "36": "ResDir::::add(java.nio.file.Path)", "37": "ResDir::::add(java.nio.file.Path)", "50": "ResDir::::addWithPath(java.nio.file.Path)", "51": "ResDir::::addWithPath(java.nio.file.Path)", "52": "ResDir::::addWithPath(java.nio.file.Path)", "53": "ResDir::::addWithPath(java.nio.file.Path)", "54": "ResDir::::addWithPath(java.nio.file.Path)", "55": "ResDir::::addWithPath(java.nio.file.Path)", "65": "ResDir::::get(java.lang.String)", "66": "ResDir::::get(java.lang.String)", "67": "ResDir::::get(java.lang.String)"}, "test_reverse_method_lines_dic": {"11": "ResDirTest::::collect()", "12": "ResDirTest::::collect()", "13": "ResDirTest::::collect()", "14": "ResDirTest::::collect()", "15": "ResDirTest::::collect()", "16": "ResDirTest::::collect()", "17": "ResDirTest::::collect()", "18": "ResDirTest::::collect()", "19": "ResDirTest::::collect()"}, "tests": [{"test_lines": [11, 19], "covered_lines": [17, 18, 32, 35, 36]}]}, "/bernard/dataset_construction/prep/repos/ofdrw/ofdrw-pkg/src/main/java/org/ofdrw/pkg/container/SignsDir.java": {"class_content": ["package org.ofdrw.pkg.container;\n", "\n", "import org.dom4j.DocumentException;\n", "import org.dom4j.Element;\n", "import org.ofdrw.core.signatures.Signatures;\n", "\n", "import java.io.File;\n", "import java.io.FileNotFoundException;\n", "import java.nio.file.Path;\n", "\n", "/**\n", " * \u7b7e\u540d\u5bb9\u5668\n", " *\n", " * @author \u6743\u89c2\u5b87\n", " * @since 2020-01-18 03:34:34\n", " */\n", "public class SignsDir extends VirtualContainer {\n", "\n", "    /**\n", "     * \u7b7e\u540dIndex\u6700\u5927\u503c + 1\n", "     * <p>\n", "     * \u4e5f\u5c31\u662f\u7b7e\u540d\u5bb9\u5668\u6570\u91cf\uff0c\u56e0\u4e3a\u7b7e\u540d\u5bb9\u5668Index\u4ece0\u8d77\u7b97\n", "     */\n", "    private int maxSignIndex = 0;\n", "\n", "    /**\n", "     * \u7b7e\u540d\u5217\u8868\u6587\u4ef6\u540d\u79f0\n", "     */\n", "    public static final String SignaturesFileName = \"Signatures.xml\";\n", "\n", "\n", "    public SignsDir(Path fullDir) throws IllegalArgumentException {\n", "        super(fullDir);\n", "        initContainer();\n", "    }\n", "\n", "    /**\n", "     * \u521d\u59cb\u5316\u5bb9\u5668\n", "     */\n", "    private void initContainer() {\n", "        File fullDirFile = new File(getSysAbsPath());\n", "        File[] files = fullDirFile.listFiles();\n", "        if (files != null) {\n", "            // \u904d\u5386\u5bb9\u5668\u4e2d\u5df2\u7ecf\u6709\u7684\u7b7e\u540d\u76ee\u5f55\uff0c\u521d\u59cb\u7b7e\u540d\u6570\u91cf\n", "            for (File f : files) {\n", "                String dirName = f.getName();\n", "                // \u7b7e\u540d\u76ee\u5f55\u540d\u4e3a\uff1a Sign_N\n", "                if (dirName.startsWith(SignDir.SignContainerPrefix)) {\n", "                    String numb = dirName.replace(SignDir.SignContainerPrefix, \"\");\n", "                    int num = Integer.parseInt(numb);\n", "                    if (maxSignIndex <= num) {\n", "                        maxSignIndex = num + 1;\n", "                    }\n", "                }\n", "            }\n", "        }\n", "    }\n", "\n", "    /**\n", "     * \u83b7\u53d6 \u7b7e\u540d\u5217\u8868\u6587\u4ef6\n", "     *\n", "     * @return \u7b7e\u540d\u5217\u8868\u6587\u4ef6\n", "     * @throws FileNotFoundException \u5bb9\u5668\u4e2d\u4e0d\u5b58\u5728\u8be5\u6587\u4ef6\n", "     * @throws DocumentException     XML\u6587\u4ef6\u89e3\u6790\u5f02\u5e38\uff0c\u53ef\u80fd\u662f\u683c\u5f0f\u4e0d\u6b63\u786e\n", "     */\n", "    public Signatures getSignatures() throws FileNotFoundException, DocumentException {\n", "        Element element = this.getObj(SignaturesFileName);\n", "        return new Signatures(element);\n", "    }\n", "\n", "    /**\n", "     * \u8bbe\u7f6e \u7b7e\u540d\u5217\u8868\u6587\u4ef6\n", "     *\n", "     * @param signatures \u7b7e\u540d\u5217\u8868\u6587\u4ef6\n", "     * @return this\n", "     */\n", "    public SignsDir setSignatures(Signatures signatures) {\n", "        this.putObj(SignaturesFileName, signatures);\n", "        return this;\n", "    }\n", "\n", "    /**\n", "     * \u521b\u5efa\u4e00\u4e2a\u7b7e\u540d/\u7ae0\u865a\u62df\u5bb9\u5668\n", "     *\n", "     * @return \u7b7e\u540d/\u7ae0\u865a\u62df\u5bb9\u5668\n", "     */\n", "    public SignDir newSignDir() {\n", "        // \u65b0\u7684\u7b7e\u540d\u5bb9\u5668\u4e00\u5b9a\u662f\u6700\u5927Index\uff0c\u5e76\u4e14\u6b64\u65f6\u76ee\u5f55\u4e2d\u5e76\u4e0d\u5b58\u5728\u8be5\u76ee\u5f55\n", "        String name = SignDir.SignContainerPrefix + maxSignIndex;\n", "        maxSignIndex++;\n", "        // \u521b\u5efa\u5bb9\u5668\n", "        return this.obtainContainer(name, SignDir::new);\n", "    }\n", "\n", "    /**\n", "     * \u83b7\u53d6\u6307\u5b9a\u7b7e\u540d\u5bb9\u5668\n", "     *\n", "     * @param index \u7b2c\u51e0\u4e2a\u7b7e\u540d\n", "     * @return \u7b7e\u540d\u5bb9\u5668\n", "     * @throws FileNotFoundException \u6307\u5b9a\u7684\u7b7e\u540d\u5bb9\u5668\u4e0d\u5b58\u5728\n", "     */\n", "    public SignDir getByIndex(Integer index) throws FileNotFoundException {\n", "        if (index == null || index <= 0) {\n", "            throw new NumberFormatException(\"\u7b7e\u540d\u5bb9\u5668index\u5fc5\u987b\u5927\u4e8e0\");\n", "        }\n", "        String containerName = SignDir.SignContainerPrefix + index;\n", "        return this.getContainer(containerName, SignDir::new);\n", "    }\n", "    public SignDir getSignDir(String containerName) throws FileNotFoundException {\n", "        return this.getContainer(containerName, SignDir::new);\n", "    }\n", "}\n"], "test_content": ["package org.ofdrw.pkg.container;\n", "\n", "import org.apache.commons.io.FileUtils;\n", "import org.junit.jupiter.api.Test;\n", "\n", "import java.io.IOException;\n", "import java.nio.file.Files;\n", "import java.nio.file.Path;\n", "import java.nio.file.Paths;\n", "\n", "import static org.junit.jupiter.api.Assertions.*;\n", "\n", "/**\n", " * @author \u6743\u89c2\u5b87\n", " * @since 2020-04-18 14:23:23\n", " */\n", "class SignsDirTest {\n", "\n", "    @Test\n", "    void newSignDir() throws IOException {\n", "        Path root = Paths.get(\"target/Signs\");\n", "        if (Files.exists(root)) {\n", "            FileUtils.deleteDirectory(root.toFile());\n", "        }\n", "        Files.createDirectory(root);\n", "        SignsDir signsDir = new SignsDir(root);\n", "        SignDir signDir = signsDir.newSignDir();\n", "\n", "        assertEquals(\"Sign_0\", signDir.getContainerName());\n", "\n", "    }\n", "}"], "method_lines_dic": {"SignsDir::::initContainer()": [40, 57], "SignsDir::::getSignatures()": [66, 69], "SignsDir::::newSignDir()": [87, 93], "SignsDir::::getByIndex(java.lang.Integer)": [102, 108], "SignsDir::::getSignDir(java.lang.String)": [109, 111]}, "test_method_lines_dic": {"SignsDirTest::::newSignDir()": [19, 31]}, "reverse_method_lines_dic": {"40": "SignsDir::::initContainer()", "41": "SignsDir::::initContainer()", "42": "SignsDir::::initContainer()", "43": "SignsDir::::initContainer()", "44": "SignsDir::::initContainer()", "45": "SignsDir::::initContainer()", "46": "SignsDir::::initContainer()", "47": "SignsDir::::initContainer()", "48": "SignsDir::::initContainer()", "49": "SignsDir::::initContainer()", "50": "SignsDir::::initContainer()", "51": "SignsDir::::initContainer()", "52": "SignsDir::::initContainer()", "53": "SignsDir::::initContainer()", "54": "SignsDir::::initContainer()", "55": "SignsDir::::initContainer()", "56": "SignsDir::::initContainer()", "57": "SignsDir::::initContainer()", "66": "SignsDir::::getSignatures()", "67": "SignsDir::::getSignatures()", "68": "SignsDir::::getSignatures()", "69": "SignsDir::::getSignatures()", "87": "SignsDir::::newSignDir()", "88": "SignsDir::::newSignDir()", "89": "SignsDir::::newSignDir()", "90": "SignsDir::::newSignDir()", "91": "SignsDir::::newSignDir()", "92": "SignsDir::::newSignDir()", "93": "SignsDir::::newSignDir()", "102": "SignsDir::::getByIndex(java.lang.Integer)", "103": "SignsDir::::getByIndex(java.lang.Integer)", "104": "SignsDir::::getByIndex(java.lang.Integer)", "105": "SignsDir::::getByIndex(java.lang.Integer)", "106": "SignsDir::::getByIndex(java.lang.Integer)", "107": "SignsDir::::getByIndex(java.lang.Integer)", "108": "SignsDir::::getByIndex(java.lang.Integer)", "109": "SignsDir::::getSignDir(java.lang.String)", "110": "SignsDir::::getSignDir(java.lang.String)", "111": "SignsDir::::getSignDir(java.lang.String)"}, "test_reverse_method_lines_dic": {"19": "SignsDirTest::::newSignDir()", "20": "SignsDirTest::::newSignDir()", "21": "SignsDirTest::::newSignDir()", "22": "SignsDirTest::::newSignDir()", "23": "SignsDirTest::::newSignDir()", "24": "SignsDirTest::::newSignDir()", "25": "SignsDirTest::::newSignDir()", "26": "SignsDirTest::::newSignDir()", "27": "SignsDirTest::::newSignDir()", "28": "SignsDirTest::::newSignDir()", "29": "SignsDirTest::::newSignDir()", "30": "SignsDirTest::::newSignDir()", "31": "SignsDirTest::::newSignDir()"}, "tests": [{"test_lines": [19, 31], "covered_lines": [24, 33, 34, 35, 41, 42, 43, 45, 57, 89, 90, 92]}]}}