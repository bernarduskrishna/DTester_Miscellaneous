{"/bernard/dataset_construction/prep/repos/ofdrw/ofdrw-tool/src/main/java/org/ofdrw/tool/merge/OFDPageDeleter.java": {"class_content": ["package org.ofdrw.tool.merge;\n", "\n", "\n", "import org.dom4j.DocumentException;\n", "import org.ofdrw.core.basicStructure.doc.Document;\n", "import org.ofdrw.core.basicStructure.ofd.DocBody;\n", "import org.ofdrw.core.basicStructure.ofd.OFD;\n", "import org.ofdrw.core.basicStructure.ofd.docInfo.CT_DocInfo;\n", "import org.ofdrw.core.basicStructure.pageTree.Page;\n", "import org.ofdrw.core.basicStructure.pageTree.Pages;\n", "import org.ofdrw.core.basicType.ST_Loc;\n", "import org.ofdrw.pkg.container.OFDDir;\n", "import org.ofdrw.reader.OFDReader;\n", "import org.ofdrw.reader.ResourceLocator;\n", "\n", "import java.io.Closeable;\n", "import java.io.IOException;\n", "import java.nio.file.Path;\n", "import java.time.LocalDate;\n", "import java.util.ArrayList;\n", "import java.util.List;\n", "\n", "/**\n", " * OFD\u6587\u6863\u9875\u9762\u5220\u9664\u5668\n", " * <p>\n", " * \u8be5\u5220\u9664\u5668\u4ec5\u5220\u9664\u6587\u6863\u6811\u4e2d\u7684\u9875\u9762\u8282\u70b9\uff0c\u4e0d\u4f1a\u5220\u9664\u76f8\u5173\u8d44\u6e90\u548c\u9875\u9762\u5bf9\u8c61 Content.xml\n", " *\n", " * @author \u6743\u89c2\u5b87\n", " * @since 2023-8-2 19:31:00\n", " */\n", "public class OFDPageDeleter implements Closeable {\n", "\n", "    /**\n", "     * OFD\u6587\u6863\u865a\u62df\u5bb9\u5668\n", "     */\n", "    private final OFDDir ofdDir;\n", "    /**\n", "     * OFD.xml \u4e3b\u5165\u53e3\n", "     */\n", "    private final OFD ofd;\n", "    /**\n", "     * OFD\u6587\u6863\u6839\u8282\u70b9\n", "     */\n", "    private final Document ofdRoot;\n", "\n", "    /**\n", "     * OFD\u89e3\u6790\u5668\n", "     */\n", "    private final OFDReader reader;\n", "    /**\n", "     * \u8f93\u51fa\u8def\u5f84\n", "     */\n", "    private final Path outPath;\n", "\n", "    /**\n", "     * \u521b\u5efaOFD\u6587\u6863\u9875\u9762\u5220\u9664\u5668\n", "     *\n", "     * @param src OFD\u6587\u4ef6\u8def\u5f84\n", "     * @param out \u5220\u9664\u540e\u6587\u4ef6\u8def\u5f84\n", "     * @throws IOException       \u6587\u4ef6\u89e3\u6790\u5f02\u5e38\n", "     * @throws DocumentException \u6587\u6863\u7ed3\u6784\u65e0\u6cd5\u89e3\u6790\n", "     */\n", "    public OFDPageDeleter(Path src, Path out) throws IOException, DocumentException {\n", "        if (src == null || !src.toFile().exists()) {\n", "            throw new IllegalArgumentException(\"OFD\u6587\u4ef6\u4e0d\u5b58\u5728\");\n", "        }\n", "        if (out == null) {\n", "            throw new IllegalArgumentException(\"\u8f93\u51fa\u8def\u5f84\uff08out\uff09\u4e3a\u7a7a\");\n", "        }\n", "\n", "        this.reader = new OFDReader(src);\n", "        this.outPath = out;\n", "        this.ofdDir = reader.getOFDDir();\n", "        this.ofd = ofdDir.getOfd();\n", "        // \u8d44\u6e90\u5b9a\u4f4d\u5668\n", "        ResourceLocator rl = reader.getResourceLocator();\n", "        DocBody docBody = ofd.getDocBody();\n", "        // \u627e\u5230 Document.xml\u6587\u4ef6\u5e76\u4e14\u5e8f\u5217\u5316\n", "        ST_Loc docRoot = docBody.getDocRoot();\n", "        this.ofdRoot = rl.get(docRoot, Document::new);\n", "    }\n", "\n", "\n", "    /**\n", "     * \u5220\u9664\u6307\u5b9a\u7d22\u5f15\u7684\u9875\u9762\n", "     *\n", "     * @param indexes \u9875\u9762\u7d22\u5f15\u5217\u8868\uff08\u4ece0\u8d77\uff09\n", "     * @return this\n", "     */\n", "    public OFDPageDeleter delete(int... indexes) {\n", "        if (indexes == null || indexes.length == 0) {\n", "            return this;\n", "        }\n", "        Pages pages = this.ofdRoot.getPages();\n", "        List<Page> tbd = new ArrayList<>();\n", "        for (int index : indexes) {\n", "            for (int i = 0; i < pages.getPages().size(); i++) {\n", "                if (i == index) {\n", "                    tbd.add(pages.getPageByIndex(i));\n", "                }\n", "            }\n", "        }\n", "        for (Page page : tbd) {\n", "            pages.remove(page);\n", "        }\n", "        return this;\n", "    }\n", "\n", "\n", "    /**\n", "     * \u4fdd\u5b58\u5220\u9664\u540e\u7684\u6587\u6863\uff0c\u5e76\u5173\u95ed\u5220\u9664\u5668\n", "     * <p>\n", "     * \u6ce8\u610f\uff1a\u8bf7\u5728\u6240\u6709\u64cd\u4f5c\u5b8c\u6210\u540e\u8c03\u7528\u8be5\u65b9\u6cd5\uff0c\u5426\u5219\u65e0\u6cd5\u5220\u9664\u9875\u9762\u3002\n", "     *\n", "     * @throws IOException \u6587\u4ef6\u8bfb\u5199\u5f02\u5e38\n", "     */\n", "    @Override\n", "    public void close() throws IOException {\n", "        DocBody docBody = ofd.getDocBody();\n", "        CT_DocInfo docInfo = docBody.getDocInfo();\n", "        // \u8bbe\u7f6e\u6587\u6863\u4fee\u6539\u65f6\u95f4\n", "        docInfo.setModDate(LocalDate.now());\n", "\n", "        // final. \u6267\u884c\u6253\u5305\u7a0b\u5e8f\n", "        if (outPath != null) {\n", "            ofdDir.jar(outPath.toAbsolutePath());\n", "        }\n", "\n", "        if (reader != null) {\n", "            reader.close();\n", "        }\n", "    }\n", "}\n"], "test_content": ["package org.ofdrw.tool.merge;\n", "\n", "import org.junit.jupiter.api.Test;\n", "\n", "import java.nio.file.Path;\n", "import java.nio.file.Paths;\n", "\n", "\n", "/**\n", " * \u6587\u6863\u9875\u9762\u5220\u9664\u6d4b\u8bd5\n", " */\n", "class OFDPageDeleterTest {\n", "\n", "    /**\n", "     * \u6587\u6863\u9875\u9762\u5220\u9664\u793a\u4f8b\n", "     */\n", "    @Test\n", "    void delete() throws Exception {\n", "        Path srcP = Paths.get(\"src/test/resources\", \"Page5.ofd\");\n", "        Path outP = Paths.get(\"target/page_deleted.ofd\");\n", "        try (OFDPageDeleter deleter = new OFDPageDeleter(srcP, outP)) {\n", "            deleter.delete(0, 1, 2);\n", "        }\n", "        System.out.println(\">> \u751f\u6210\u6587\u6863\u4f4d\u7f6e\uff1a\" + outP.toAbsolutePath());\n", "    }\n", "}"], "method_lines_dic": {"OFDPageDeleter::::delete(int[])": [90, 107], "OFDPageDeleter::::close()": [117, 132]}, "test_method_lines_dic": {"OFDPageDeleterTest::::delete()": [17, 25]}, "reverse_method_lines_dic": {"90": "OFDPageDeleter::::delete(int[])", "91": "OFDPageDeleter::::delete(int[])", "92": "OFDPageDeleter::::delete(int[])", "93": "OFDPageDeleter::::delete(int[])", "94": "OFDPageDeleter::::delete(int[])", "95": "OFDPageDeleter::::delete(int[])", "96": "OFDPageDeleter::::delete(int[])", "97": "OFDPageDeleter::::delete(int[])", "98": "OFDPageDeleter::::delete(int[])", "99": "OFDPageDeleter::::delete(int[])", "100": "OFDPageDeleter::::delete(int[])", "101": "OFDPageDeleter::::delete(int[])", "102": "OFDPageDeleter::::delete(int[])", "103": "OFDPageDeleter::::delete(int[])", "104": "OFDPageDeleter::::delete(int[])", "105": "OFDPageDeleter::::delete(int[])", "106": "OFDPageDeleter::::delete(int[])", "107": "OFDPageDeleter::::delete(int[])", "117": "OFDPageDeleter::::close()", "118": "OFDPageDeleter::::close()", "119": "OFDPageDeleter::::close()", "120": "OFDPageDeleter::::close()", "121": "OFDPageDeleter::::close()", "122": "OFDPageDeleter::::close()", "123": "OFDPageDeleter::::close()", "124": "OFDPageDeleter::::close()", "125": "OFDPageDeleter::::close()", "126": "OFDPageDeleter::::close()", "127": "OFDPageDeleter::::close()", "128": "OFDPageDeleter::::close()", "129": "OFDPageDeleter::::close()", "130": "OFDPageDeleter::::close()", "131": "OFDPageDeleter::::close()", "132": "OFDPageDeleter::::close()"}, "test_reverse_method_lines_dic": {"17": "OFDPageDeleterTest::::delete()", "18": "OFDPageDeleterTest::::delete()", "19": "OFDPageDeleterTest::::delete()", "20": "OFDPageDeleterTest::::delete()", "21": "OFDPageDeleterTest::::delete()", "22": "OFDPageDeleterTest::::delete()", "23": "OFDPageDeleterTest::::delete()", "24": "OFDPageDeleterTest::::delete()", "25": "OFDPageDeleterTest::::delete()"}, "tests": [{"test_lines": [17, 25], "covered_lines": [63, 64, 67, 71, 72, 73, 74, 76, 77, 79, 80, 81, 91, 94, 95, 96, 97, 98, 99, 103, 104, 105, 106, 119, 120, 122, 125, 126, 129, 130, 132]}]}, "/bernard/dataset_construction/prep/repos/ofdrw/ofdrw-tool/src/main/java/org/ofdrw/tool/merge/OFDMerger.java": {"class_content": ["package org.ofdrw.tool.merge;\n", "\n", "\n", "import org.bouncycastle.jcajce.provider.digest.SM3;\n", "import org.bouncycastle.util.encoders.Hex;\n", "import org.dom4j.*;\n", "import org.ofdrw.core.OFDElement;\n", "import org.ofdrw.core.annotation.Annotations;\n", "import org.ofdrw.core.annotation.pageannot.AnnPage;\n", "import org.ofdrw.core.annotation.pageannot.PageAnnot;\n", "import org.ofdrw.core.basicStructure.doc.CT_PageArea;\n", "import org.ofdrw.core.basicStructure.pageObj.CT_TemplatePage;\n", "import org.ofdrw.core.basicStructure.pageObj.Template;\n", "import org.ofdrw.core.basicStructure.pageTree.Page;\n", "import org.ofdrw.core.basicStructure.pageTree.Pages;\n", "import org.ofdrw.core.basicStructure.res.CT_MultiMedia;\n", "import org.ofdrw.core.basicType.ST_ID;\n", "import org.ofdrw.core.basicType.ST_Loc;\n", "import org.ofdrw.core.basicType.ST_RefID;\n", "import org.ofdrw.core.compositeObj.CT_VectorG;\n", "import org.ofdrw.core.pageDescription.color.colorSpace.CT_ColorSpace;\n", "import org.ofdrw.core.pageDescription.drawParam.CT_DrawParam;\n", "import org.ofdrw.core.text.font.CT_Font;\n", "import org.ofdrw.pkg.container.*;\n", "import org.ofdrw.reader.ResourceLocator;\n", "import org.ofdrw.reader.model.TemplatePageEntity;\n", "\n", "import java.io.Closeable;\n", "import java.io.FileNotFoundException;\n", "import java.io.IOException;\n", "import java.io.InputStream;\n", "import java.nio.file.Files;\n", "import java.nio.file.Path;\n", "import java.util.ArrayList;\n", "import java.util.HashMap;\n", "import java.util.List;\n", "import java.util.Map;\n", "import java.util.concurrent.atomic.AtomicInteger;\n", "\n", "/**\n", " * \u6587\u6863\u5408\u5e76\u5de5\u5177\n", " *\n", " * @author \u6743\u89c2\u5b87\n", " * @since 2021-11-08 20:49:36\n", " */\n", "public class OFDMerger implements Closeable {\n", "\n", "    /**\n", "     * \u65b0\u9875\u9762\u5217\u8868\n", "     * <p>\n", "     * \u6bcf\u4e00\u4e2a\u5143\u7d20\u4ee3\u8868\u65b0\u6587\u6863\u4e2d\u7684\u4e00\u9875\n", "     */\n", "    public final ArrayList<PageEntry> pageArr;\n", "    /**\n", "     * \u6587\u6863\u4e0a\u4e0b\u6587\u6620\u5c04\n", "     */\n", "    private final Map<String, DocContext> docCtxMap;\n", "\n", "\n", "    /**\n", "     * \u5408\u5e76\u540e\u751f\u6210\u6587\u6863\u4f4d\u7f6e\n", "     */\n", "    private final Path dest;\n", "\n", "    /**\n", "     * \u5408\u5e76\u7684\u76ee\u6807\u6587\u6863\uff0c\u4ec5\u5728\u5408\u5e76\u65f6\u8bbe\u7f6e\n", "     * \u5728\u5408\u5e76\u5b8c\u6210\u540e\u5c06\u4f1a\u88ab\u6253\u5305\u5b58\u50a8\n", "     */\n", "    private BareOFDDoc ofdDoc;\n", "\n", "    /**\n", "     * \u6ce8\u91ca\u5165\u53e3\u6587\u4ef6\n", "     */\n", "    private Annotations newDocAnnotations = null;\n", "    /**\n", "     * \u6ce8\u91ca\u76ee\u5f55\n", "     */\n", "    private AnnotsDir annotsDir = null;\n", "\n", "\n", "    /**\n", "     * \u8d44\u6e90\u6587\u4ef6\u54c8\u5e0c\u8868\n", "     * <p>\n", "     * Key: \u6587\u4ef6SM3 Hash Hex\n", "     * Value: \u6587\u4ef6\u5728\u65b0\u6587\u6863\u4e2d\u7684\u6587\u4ef6\u540d\n", "     */\n", "    private final Map<String, ST_Loc> resFileHashTable;\n", "\n", "\n", "    /**\n", "     * \u6a21\u677f\u9875\u9762\u6620\u5c04\u8868\n", "     * <p>\n", "     * Key: \u6a21\u677f\u9875\u5bf9\u8c61ID\n", "     * Value: \u6a21\u677f\u9875\u9762\u5bf9\u8c61\n", "     */\n", "    private final Map<String, CT_TemplatePage> tplPageMap;\n", "\n", "    private final AtomicInteger resFileCounter;\n", "    /**\n", "     * - Layer \u7684 DrawParam\n", "     * - \u6bcf\u4e2a\u56fe\u50cf\u5bf9\u8c61\u90fd\u53ef\u80fd\u542b\u6709 DrawParam \u5f15\u7528\n", "     * - Color \u4e2d Pattern CellContent Thumbnail \u5f15\u7528\n", "     * - Color \u4e2d ColorSpace \u5f15\u7528\n", "     * - Image \u4e2d ResourceID\u3001Substitution\u3001ImageMask\n", "     * - Text \u4e2d Font\n", "     * - Composite \u590d\u5408\u5bf9\u8c61 \u4e2d ResourceID\n", "     * Res\u8d44\u6e90\u4e2d\u7684 CompositeGraphUnit CT_VectorG\uff1aThumbnail\u3001Substitution\n", "     */\n", "    private static final Map<String, XPath> AttrQueries = new HashMap<String, XPath>() {{\n", "        this.put(\"Font\", DocumentHelper.createXPath(\"//*[@Font]\"));\n", "        this.put(\"ResourceID\", DocumentHelper.createXPath(\"//*[@ResourceID]\"));\n", "        this.put(\"Substitution\", DocumentHelper.createXPath(\"//*[@Substitution]\"));\n", "        this.put(\"ImageMask\", DocumentHelper.createXPath(\"//*[@ImageMask]\"));\n", "        this.put(\"Thumbnail\", DocumentHelper.createXPath(\"//*[@Thumbnail]\"));\n", "        this.put(\"DrawParam\", DocumentHelper.createXPath(\"//*[@DrawParam]\"));\n", "        this.put(\"ColorSpace\", DocumentHelper.createXPath(\"//*[@ColorSpace]\"));\n", "    }};\n", "\n", "    public OFDMerger(Path dest) {\n", "        if (dest == null) {\n", "            throw new IllegalArgumentException(\"\u5408\u5e76\u7ed3\u679c\u8def\u5f84(dest)\u4e3a\u7a7a\");\n", "        }\n", "        pageArr = new ArrayList<>(10);\n", "        docCtxMap = new HashMap<>();\n", "        this.dest = dest;\n", "        final Path parent = dest.getParent();\n", "        if (parent == null || !Files.exists(parent)) {\n", "            throw new IllegalArgumentException(\"OFD\u6587\u4ef6\u5b58\u50a8\u8def\u5f84(dest)\u4e0a\u7ea7\u76ee\u5f55 [\" + parent + \"] \u4e0d\u5b58\u5728\");\n", "        }\n", "        resFileHashTable = new HashMap<>(3);\n", "        tplPageMap = new HashMap<>(2);\n", "        resFileCounter = new AtomicInteger(0);\n", "    }\n", "\n", "\n", "    /**\n", "     * \u5411\u5408\u5e76\u6587\u4ef6\u4e2d\u6dfb\u52a0\u9875\u9762\n", "     *\n", "     * @param filepath    \u5f85\u5408\u5e76\u7684OFD\u6587\u4ef6\u8def\u5f84\n", "     * @param pageIndexes \u9875\u9762\u5e8f\u5e8f\u5217\uff0c\u5982\u679c\u4e3a\u7a7a\u8868\u793a\u6240\u6709\u9875\u9762\uff08\u9875\u7801\u4ece1\u5f00\u59cb\uff09\n", "     * @return this\n", "     * @throws IOException \u9875\u9762\u8bfb\u5199\u5f02\u5e38\n", "     */\n", "    public OFDMerger add(Path filepath, int... pageIndexes) throws IOException {\n", "        String key = filepath.toAbsolutePath().getFileName().toString();\n", "        DocContext ctx = docCtxMap.get(key);\n", "        // \u7f13\u5b58\u4e2d\u6ca1\u6709\u8be5\u6587\u4ef6\u6620\u5c04\n", "        if (ctx == null) {\n", "            // \u52a0\u8f7d\u6587\u4ef6\u4e0a\u4e0b\u6587\n", "            ctx = new DocContext(filepath);\n", "            docCtxMap.put(key, ctx);\n", "        }\n", "        // \u6ca1\u6709\u4f20\u9012\u9875\u7801\u65f6\u8ba4\u4e3a\u9700\u8981\u8ffd\u52a0\u6240\u6709\u9875\u9762\n", "        if (pageIndexes == null || pageIndexes.length == 0) {\n", "            int numberOfPages = ctx.reader.getNumberOfPages();\n", "            pageIndexes = new int[numberOfPages];\n", "            for (int i = 0; i < pageIndexes.length; i++) {\n", "                pageIndexes[i] = i + 1;\n", "            }\n", "        }\n", "        // \u8ffd\u52a0\u5185\u5bb9\u5230\u9875\u9762\u5217\u8868\u4e2d\n", "        for (int pageIndex : pageIndexes) {\n", "            pageArr.add(new PageEntry(pageIndex, ctx));\n", "        }\n", "        return this;\n", "    }\n", "\n", "    /**\n", "     * \u5411\u5408\u5e76\u6587\u4ef6\u4e2d\u6dfb\u52a0\u9875\u9762\n", "     * <p>\n", "     * \u901a\u8fc7\u8be5\u65b9\u6cd5\u53ef\u4ee5\u8be6\u7ec6\u8bbe\u7f6e\u9875\u9762\u8fc1\u79fb\u65f6\u7684\u5c5e\u6027\u53c2\u6570\n", "     *\n", "     * @param pages \u9875\u9762\u5bf9\u8c61\n", "     * @return this\n", "     */\n", "    public OFDMerger add(PageEntry... pages) {\n", "        if (pages == null) {\n", "            return this;\n", "        }\n", "        for (PageEntry page : pages) {\n", "            if (page.docCtx == null || page.docCtx.filepath == null) {\n", "                continue;\n", "            }\n", "            String key = page.docCtx.filepath.toAbsolutePath().getFileName().toString();\n", "            // \u7f13\u5b58\u4e2d\u6ca1\u6709\u8be5\u6587\u4ef6\u6620\u5c04\n", "            if (!docCtxMap.containsKey(key)) {\n", "                docCtxMap.put(key, page.docCtx);\n", "            }\n", "\n", "            pageArr.add(page);\n", "        }\n", "\n", "        return this;\n", "    }\n", "\n", "    /**\n", "     * \u6267\u884c\u5408\u5e76\n", "     */\n", "    private void doMerge() throws IOException, DocumentException {\n", "        // \u5220\u9664\u539f\u6765\u5b58\u5728\u7684\u95ee\u9898\n", "        if (Files.exists(dest)) {\n", "            Files.delete(dest);\n", "        }\n", "        // \u521b\u5efa\u65b0\u6587\u6863\n", "        try (final BareOFDDoc ofdDoc = new BareOFDDoc(dest)) {\n", "            this.ofdDoc = ofdDoc;\n", "            final Pages pages = ofdDoc.document.getPages();\n", "            // \u5982\u679c\u5b58\u5728Pages\u90a3\u4e48\u83b7\u53d6\uff0c\u4e0d\u5b58\u5728\u90a3\u4e48\u521b\u5efa\n", "            final PagesDir pagesDir = ofdDoc.docDir.obtainPages();\n", "            for (final PageEntry pageEntry : pageArr) {\n", "                // \u53d60\u6587\u6863\u5bf9\u8c61\n", "                final CT_PageArea docDefaultArea = new CT_PageArea((Element) pageEntry.docCtx.getDefaultArea(0).clone());\n", "                org.ofdrw.core.basicStructure.pageObj.Page page = null;\n", "                ST_ID oldPageID = null;\n", "                ST_ID newPageID = null;\n", "                // \u89e3\u6790\u539fOFD\u9875\u9762\u7684Content.xml \u4e3aPage\u5bf9\u8c61\n", "                try {\n", "                    // \u83b7\u53d6\u9875\u9762\u5728\u539f\u6587\u6863\u4e2d\u7684\u5bf9\u8c61ID\n", "                    oldPageID = pageEntry.docCtx.reader.getPageObjectId(pageEntry.pageIndex);\n", "\n", "                    Element copy = (Element) pageEntry.docCtx.reader.getPage(pageEntry.pageIndex).clone();\n", "                    final Document document = DocumentHelper.createDocument();\n", "                    document.add(copy);\n", "                    page = new org.ofdrw.core.basicStructure.pageObj.Page(copy);\n", "                } catch (NumberFormatException e) {\n", "                    // \u5ffd\u7565\u9875\u7801\u975e\u6cd5\u7684\u9875\u9762\u590d\u5236\n", "                    continue;\n", "                }\n", "\n", "                // \u82e5\u5f53\u524d\u9875\u9762\u7684\u9875\u9762\u533a\u57df\u7684\u5927\u5c0f\u548c\u4f4d\u7f6e\u4e3a\u7a7a\uff0c\u5219\u4f7f\u7528\u6587\u6863\u9ed8\u8ba4\u7684\u5c3a\u5bf8\n", "                if (page.getArea() == null) {\n", "                    page.setArea(docDefaultArea);\n", "                }\n", "\n", "                // \u521b\u5efa\u9875\u9762\u5bb9\u5668\n", "                PageDir pageDir = pagesDir.newPageDir();\n", "                String pageLoc = String.format(\"Pages/Page_%d/Content.xml\", pageDir.getIndex());\n", "                // \u5c06\u521b\u5efa\u7684\u9875\u9762\u52a0\u5165 Document.xml \u4e2d\u7684 Pages \u5185\n", "                final Page newPageItem = new Page(this.ofdDoc.MaxUnitID.incrementAndGet(), pageLoc);\n", "                pages.addPage(newPageItem);\n", "                // \u83b7\u53d6\u9875\u9762\u5728\u65b0\u6587\u6863\u4e2d\u7684ID\n", "                newPageID = newPageItem.getID();\n", "\n", "                // \u8fc1\u79fb\u9875\u9762\u6a21\u677f\n", "                if (pageEntry.copyTemplate) {\n", "                    // \u9875\u9762\u6a21\u677f\u7684\u8fc1\u79fb\u7684\u66ff\u6362\n", "                    final List<Template> pageTplArr = page.getTemplates();\n", "                    for (Template tplObj : pageTplArr) {\n", "                        // \u8fc1\u79fb\u9875\u9762\n", "                        ST_RefID tplNewId = pageTplMigrate(pageEntry.docCtx, tplObj);\n", "                        tplObj.setTemplateID(tplNewId);\n", "                    }\n", "                }\n", "\n", "                // \u901a\u8fc7XML \u9009\u4e2d\u4e0e\u8d44\u6e90\u6709\u5173\u5bf9\u8c61\uff0c\u5e76\u5b9e\u73b0\u8d44\u6e90\u8fc1\u79fb\u548c\u5f15\u7528\u66ff\u6362\n", "                domMigrate(pageEntry.docCtx, page);\n", "                // \u628a\u66ff\u6362\u540e\u5f97\u5230\u9875\u9762\u653e\u5165\u9875\u9762\u5bb9\u5668\u4e2d\n", "                pageDir.setContent(page);\n", "\n", "                // \u8fc1\u79fb\u6ce8\u91ca\n", "                if (pageEntry.copyAnnotations && oldPageID != null && newPageID != null) {\n", "                    String pageDirName = pageDir.getContainerName();\n", "                    pageAnnotationMigrate(pageEntry.docCtx, oldPageID, newPageID, pageDirName);\n", "                }\n", "            }\n", "        }\n", "    }\n", "\n", "    /**\n", "     * \u9875\u9762\u6ce8\u91ca\u8fc1\u79fb\u5230\u65b0\u6587\u6863\uff0c\u82e5\u9875\u9762\u65e0\u6ce8\u91ca\u5219\u8df3\u8fc7\u3002\n", "     *\n", "     * @param docCtx           \u6587\u6863\u4e0a\u4e0b\u6587\n", "     * @param oldPageID        \u539f\u9875\u9762ID\n", "     * @param newPageID        \u8fc1\u79fb\u540e\u9875\u9762ID\n", "     * @param pageAnnotDirName \u9875\u9762\u6240\u5904\u5bb9\u5668\u540d\u79f0\uff0c\u683c\u5f0f\u4e3aPage_N\n", "     */\n", "    private void pageAnnotationMigrate(DocContext docCtx, ST_ID oldPageID, ST_ID newPageID, String pageAnnotDirName) throws IOException {\n", "        final ResourceLocator rl = docCtx.reader.getResourceLocator();\n", "        try {\n", "            rl.save();\n", "            org.ofdrw.core.basicStructure.doc.Document srcDoc = docCtx.reader.cdDefaultDoc();\n", "            // \u83b7\u53d6 \u6ce8\u91ca\u5165\u53e3\u6587\u4ef6 Annotations.xml\n", "            ST_Loc srcAnnotListPath = srcDoc.getAnnotations();\n", "            if (srcAnnotListPath == null || !(rl.exist(srcAnnotListPath.toString()))) {\n", "                return;\n", "            }\n", "            Annotations annotList = rl.get(srcAnnotListPath, Annotations::new);\n", "            if (annotList == null) {\n", "                return;\n", "            }\n", "            // \u83b7\u53d6\u6307\u5b9a\u9875\u9762\u7684\u6ce8\u91ca\n", "            AnnPage annPage = annotList.getByPageId(oldPageID.toString());\n", "            if (annPage == null || annPage.getFileLoc() == null) {\n", "                return;\n", "            }\n", "            // \u8fdb\u5165 \u6ce8\u91ca\u5165\u53e3\u6587\u4ef6 \u6240\u5728\u76ee\u5f55\n", "            rl.cd(srcAnnotListPath.parent());\n", "            // \u89e3\u6790\u5e76\u83b7\u53d6 \u5206\u9875\u6ce8\u91ca\u6587\u4ef6\n", "            PageAnnot pageAnnot = rl.get(annPage.getFileLoc(), PageAnnot::new);\n", "            if (pageAnnot == null) {\n", "                return;\n", "            }\n", "            Element copy = (Element) pageAnnot.clone();;\n", "            final Document document = DocumentHelper.createDocument();\n", "            document.add(copy);\n", "            pageAnnot = new PageAnnot(copy);\n", "\n", "            if (this.newDocAnnotations == null) {\n", "                // \u521b\u5efa\u6ce8\u91ca\u76ee\u5f55 /Doc_0/Annots/\n", "                this.annotsDir = this.ofdDoc.docDir.obtainAnnots();\n", "                // \u521b\u5efa\u6ce8\u91ca\u5165\u53e3\u6587\u4ef6 /Doc_0/Annots/Annotations.xml\n", "                this.newDocAnnotations = new Annotations();\n", "                this.annotsDir.setAnnotations(this.newDocAnnotations);\n", "                this.ofdDoc.document.setAnnotations(this.annotsDir.getAbsLoc().cat(DocDir.AnnotationsFileName));\n", "            }\n", "\n", "            // \u83b7\u53d6\u9875\u9762\u6ce8\u91ca\u5bb9\u5668 /Doc_0/Annots/Page_N/ \uff0c\u4e0d\u5b58\u5728\u5219\u521b\u5efa\n", "            PageDir pageDir = annotsDir.obtainContainer(pageAnnotDirName, PageDir::new);\n", "            // \u5411\u5bb9\u5668\u4e2d\u52a0\u5165 \u5206\u9875\u6ce8\u91ca\u6587\u4ef6 /Doc_0/Annots/Page_N/Annot_N.xml\n", "            ST_Loc pageAnnotPath = pageDir.addAnnot(pageAnnot);\n", "            // \u8bbe\u7f6e\u65b0\u6587\u6863\u4e2d\u7684\u9875\u9762ID\n", "            AnnPage annotItem = new AnnPage().setPageID(newPageID).setFileLoc(pageAnnotPath);\n", "            this.newDocAnnotations.addPage(annotItem);\n", "\n", "            // \u8fc1\u79fb\u6ce8\u91ca\u4e2d\u8d44\u6e90\n", "            domMigrate(docCtx, pageAnnot);\n", "        } catch (FileNotFoundException | DocumentException e) {\n", "            System.err.println(\"\u9875\u9762\u6ce8\u91ca\u8fc1\u79fb\u5931\u8d25\uff1a\" + e.getMessage());\n", "        } finally {\n", "            // \u8fd8\u539f\u539f\u6709\u5de5\u4f5c\u533a\n", "            rl.restore();\n", "        }\n", "    }\n", "\n", "    /**\n", "     * \u9875\u9762\u6a21\u677f\u8fc1\u79fb\u5230\u65b0\u6587\u6863\n", "     * <p>\n", "     * \u82e5\u6a21\u677f\u5df2\u7ecf\u8fc1\u79fb\u8fc7\uff0c\u90a3\u4e48\u76f4\u63a5\u8fd4\u56de\u8fc1\u79fb\u540e\u7684\u9875\u9762ID\n", "     *\n", "     * @param docCtx \u539f\u6587\u6863\u4e0a\u4e0b\u6587\n", "     * @param tplObj \u9875\u9762\u6a21\u677f\u4fe1\u606f\u5bf9\u8c61\n", "     * @return \u8fc1\u79fb\u540e\u6a21\u677f\u9875\u9762\u5728\u65b0\u6587\u6863\u4e2d\u7684\u5f15\u7528ID\n", "     * @throws IOException \u6587\u4ef6\u590d\u5236\u5f02\u5e38\n", "     */\n", "    private ST_RefID pageTplMigrate(DocContext docCtx, Template tplObj) throws IOException {\n", "        final String oldId = tplObj.getTemplateID().toString();\n", "        CT_TemplatePage templatePage = tplPageMap.get(oldId);\n", "        if (templatePage != null) {\n", "            // \u9875\u9762\u5df2\u7ecf\u590d\u5236\u8fc7\n", "            // \u5982\u679c\u6a21\u677fID\u4e00\u6837\uff0c\u4f46\u662f\u6a21\u677f\u5185\u5bb9\u4e0d\u4e00\u6837\n", "            if (templatePage.asXML().equals(tplObj.asXML())) {\n", "                return templatePage.getID().ref();\n", "            }\n", "        }\n", "\n", "        // \u4ece\u6587\u6863\u4e2d\u52a0\u8f7d\u6a21\u677f\u9875\u9762\u5b9e\u4f53\n", "        final TemplatePageEntity entity = docCtx.reader.getTemplate(oldId);\n", "        // \u590d\u5236\u6a21\u677f\u9875\u9762\n", "        org.ofdrw.core.basicStructure.pageObj.Page pageObj = entity.getPage();\n", "        Element copy = (Element) pageObj.clone();\n", "        final Document document = DocumentHelper.createDocument();\n", "        document.add(copy);\n", "        pageObj = new org.ofdrw.core.basicStructure.pageObj.Page(copy);\n", "\n", "        templatePage = entity.getTplInfo();\n", "        templatePage.setParent(null);\n", "\n", "        // \u8fc1\u79fb\u6a21\u677f\u9875\u9762\u4e2d\u76f8\u5173\u7684\u8d44\u6e90\uff0c\u5e76\u66ff\u6362\u6a21\u677f\u9875\u9762\u4e2dID\n", "        domMigrate(docCtx, pageObj);\n", "        // \u5199\u5165\u5230\u6a21\u677f\u5bb9\u5668\u4e2d\uff0c\u5e76\u66f4\u65b0\u6a21\u677f\u4fe1\u606f\u5bf9\u8c61\n", "        final ST_Loc tplPageLoc = ofdDoc.docDir.obtainTemps().add(pageObj);\n", "        templatePage.setBaseLoc(tplPageLoc);\n", "\n", "        // \u5206\u914d\u65b0\u6587\u6863\u7684ID\uff0c\u5e76\u6dfb\u52a0\u5230\u65b0\u6587\u6863\u4e2d\u7684CommonData\n", "        ST_ID newId = new ST_ID(ofdDoc.MaxUnitID.incrementAndGet());\n", "        templatePage.setID(newId);\n", "        ofdDoc.cdata.addTemplatePage(templatePage);\n", "\n", "        // \u7f13\u5b58\u5e76\u8fd4\u56de\u6587\u4ef6\u5f15\u7528\n", "        tplPageMap.put(oldId, templatePage);\n", "        return newId.ref();\n", "    }\n", "\n", "\n", "    /**\n", "     * DOM\u5143\u7d20\u8282\u70b9\u7684\u8d44\u6e90\u8fc1\u79fb\n", "     * <p>\n", "     * \u68c0\u67e5DOM\u8282\u70b9\u4e0b\u6240\u6709\u5f15\u7528\u8d44\u6e90\uff0c\u5e76\u5c06\u8d44\u6e90\u8fc1\u79fb\u5230\u65b0\u6587\u6863\u4e2d\n", "     * \u66f4\u65b0DOM\u5f15\u7528ID\n", "     * <p>\n", "     * \u91cd\u65b0\u5206\u914d\u5bf9\u8c61ID\n", "     *\n", "     * @param docCtx DOM\u76f8\u5173\u7684\u6587\u6863\u4e0a\u4e0b\u6587\n", "     * @param dom    \u5f85\u8fc1\u79fbDOM\n", "     * @throws IOException \u6587\u4ef6\u8bfb\u53d6\u6216\u590d\u5236\u5f02\u5e38\n", "     */\n", "    private void domMigrate(DocContext docCtx, Element dom) throws IOException {\n", "        List<Node> nodes;\n", "        for (Map.Entry<String, XPath> entry : AttrQueries.entrySet()) {\n", "            nodes = entry.getValue().selectNodes(dom);\n", "            if (nodes.isEmpty()) {\n", "                continue;\n", "            }\n", "            String attrName = entry.getKey();\n", "            for (Node node : nodes) {\n", "                if (node instanceof Element) {\n", "                    Element element = (Element) node;\n", "                    // \u83b7\u53d6\u539f\u8d44\u6e90ID\n", "                    final String oldResId = element.attributeValue(attrName);\n", "                    // \u8fc1\u79fb\u8d44\u6e90\u5230\u65b0\u6587\u6863\uff0c\u5e76\u8fd4\u56de\u65b0\u6587\u6863\u4e2d\u8be5\u8d44\u6e90\u7684ID\n", "                    long newResId = resMigrate(docCtx, oldResId);\n", "                    // \u8bbe\u7f6e\u65b0\u7684\u8d44\u6e90ID\n", "                    element.addAttribute(attrName, Long.toString(newResId));\n", "                }\n", "            }\n", "        }\n", "\n", "        // \u4fee\u6539DOM\u4e2d\u539f\u6709\u7684\u5bf9\u8c61ID\u4e3a\u65b0\u9875\u9762\u7684\u5bf9\u8c61ID\n", "        final List<Node> objArr = dom.selectNodes(\"//*[@ID]\");\n", "        for (Node node : objArr) {\n", "            if (node instanceof Element) {\n", "                Element element = (Element) node;\n", "                // \u8bbe\u7f6e\u65b0\u7684\u5bf9\u8c61ID\n", "                element.addAttribute(\"ID\", Integer.toString(ofdDoc.MaxUnitID.incrementAndGet()));\n", "            }\n", "        }\n", "    }\n", "\n", "    /**\n", "     * \u4ece\u539f\u6587\u5f53\u8fc1\u79fb\u8d44\u6e90\u5230\u65b0\u9875\u9762\n", "     *\n", "     * @param docCtx   \u88ab\u8fc1\u79fb\u7684\u9875\u9762\u6587\u6863\u4e0a\u4e0b\u6587\n", "     * @param oldResId \u8d44\u6e90ID\n", "     * @return \u8d44\u6e90\u5728\u65b0\u6587\u6863\u4e2d\u7684ID, 0\u6807\u8bc6\u6ca1\u6709\u627e\u5230\u8d44\u6e90\n", "     * @throws IOException \u6587\u4ef6\u8bfb\u53d6\u6216\u590d\u5236\u9519\u8bef\n", "     */\n", "    private long resMigrate(DocContext docCtx, String oldResId) throws IOException {\n", "        final OFDElement resObj = docCtx.resMgt.get(oldResId);\n", "        if (resObj == null) {\n", "            return 0;\n", "        }\n", "        final ResourceLocator rl = docCtx.reader.getResourceLocator();\n", "\n", "        // \u68c0\u67e5\u7f13\u5b58\uff0c\u9632\u6b62\u91cd\u590d\u8fc1\u79fb\n", "        final OFDElement cache = docCtx.resOldNewMap.get(oldResId);\n", "        if (cache != null) {\n", "            return cache.getObjID().getId();\n", "        }\n", "        // \u7f13\u5b58\u5bf9\u8c61\n", "        docCtx.resOldNewMap.put(oldResId, resObj);\n", "        resObj.setParent(null);\n", "        if (resObj instanceof CT_ColorSpace) {\n", "            CT_ColorSpace cs = (CT_ColorSpace) resObj;\n", "            ST_Loc profile = cs.getProfile();\n", "            if (profile != null) {\n", "                // \u590d\u5236\u8d44\u6e90\u5230\u65b0\u7684\u6587\u6863\u4e2d\n", "                Path filepath = rl.getFile(profile);\n", "                profile = copyResFile(filepath);\n", "                cs.setProfile(profile);\n", "            }\n", "            ofdDoc.prm.addRawWithCache(cs);\n", "        } else if (resObj instanceof CT_DrawParam) {\n", "            CT_DrawParam dp = (CT_DrawParam) resObj;\n", "            ofdDoc.prm.addRawWithCache(dp);\n", "        } else if (resObj instanceof CT_Font) {\n", "            CT_Font f = (CT_Font) resObj;\n", "            ST_Loc fontFileLoc = f.getFontFile();\n", "            if (fontFileLoc != null) {\n", "                // \u590d\u5236\u8d44\u6e90\u5230\u65b0\u7684\u6587\u6863\u4e2d\n", "                Path filepath = rl.getFile(fontFileLoc);\n", "                fontFileLoc = copyResFile(filepath);\n", "                f.setFontFile(fontFileLoc);\n", "            }\n", "            ofdDoc.prm.addRawWithCache(f);\n", "        } else if (resObj instanceof CT_MultiMedia) {\n", "            CT_MultiMedia mm = (CT_MultiMedia) resObj;\n", "            ST_Loc mediaFileLoc = mm.getMediaFile();\n", "            if (mediaFileLoc != null) {\n", "                // \u590d\u5236\u8d44\u6e90\u5230\u65b0\u7684\u6587\u6863\u4e2d\n", "                Path filepath = rl.getFile(mediaFileLoc);\n", "                mediaFileLoc = copyResFile(filepath);\n", "                mm.setMediaFile(mediaFileLoc);\n", "            }\n", "\n", "            ofdDoc.prm.addRawWithCache(mm);\n", "        } else if (resObj instanceof CT_VectorG) {\n", "            CT_VectorG vg = (CT_VectorG) resObj;\n", "            final Document d = DocumentHelper.createDocument();\n", "            d.add(vg);\n", "\n", "            // \u77e2\u91cf\u56fe\u50cf\uff0c\u7b49\u4e8e\u4e00\u4e2aDOM \u8fd0\u884c\u8fc1\u79fb\u7a0b\u5e8f\uff0c\u5411\u8fc1\u79fb\u77e2\u91cf\u56fe\u50cf\u5185\u90e8\u7684\u8d44\u6e90\uff0c\u518d\u8fc1\u8be5\u8d44\u6e90\u672c\u8eab\u3002\n", "            domMigrate(docCtx, vg);\n", "            ofdDoc.prm.addRawWithCache(vg);\n", "        } else {\n", "            // \u672a\u77e5\u7684\u8d44\u6e90\u7c7b\u578b\u4e0d\u8fdb\u884c\u8fc1\u79fb\n", "            return 0;\n", "        }\n", "\n", "        return resObj.getObjID().getId();\n", "    }\n", "\n", "    /**\n", "     * \u590d\u5236\u8d44\u6e90\u5230\u65b0\u6587\u6863\n", "     * <p>\n", "     * \u590d\u5236\u524d\u5c06\u4f1a\u8ba1\u7b97\u6587\u6863\u7684Hash\u5e76\u7f13\u5b58\u9632\u6b62\u91cd\u590d\n", "     * <p>\n", "     * \u590d\u5236\u540e\u7684\u6587\u6863\u540d\u79f0\u4e3a\u6587\u4ef6\u7684Hash\u503c\n", "     *\n", "     * @param filepath \u6587\u4ef6\u8def\u5f84\n", "     * @return \u590d\u5236\u540e\u57fa\u4e8e\u8d44\u6e90\u5bb9\u5668\u7684\u76f8\u5bf9\u8def\u5f84\n", "     * @throws IOException \u6587\u4ef6\u8bfb\u53d6\u590d\u5236\u5f02\u5e38\n", "     */\n", "    private ST_Loc copyResFile(Path filepath) throws IOException {\n", "        // \u8ba1\u7b97\u6587\u4ef6\u7684\u6458\u8981\u503c\n", "        SM3.Digest digest = new SM3.Digest();\n", "        byte[] buff = new byte[4096];\n", "        int n = 0;\n", "        try (final InputStream in = Files.newInputStream(filepath)) {\n", "            while ((n = in.read(buff)) != -1) {\n", "                digest.update(buff, 0, n);\n", "            }\n", "        }\n", "        String hash = Hex.toHexString(digest.digest());\n", "\n", "        // \u68c0\u67e5\u8be5\u6587\u4ef6\u662f\u5426\u5df2\u7ecf\u88ab\u8fc1\u79fb\u8fc7\n", "        final ST_Loc resLoc = resFileHashTable.get(hash);\n", "        if (resLoc != null) {\n", "            return resLoc;\n", "        }\n", "\n", "        // \u91cd\u547d\u540d\u6587\u4ef6\u4e3a\u6587\u4ef6\u8ba1\u6570\u5668\uff0c\u4fdd\u7559\u540e\u7f00\u540d\n", "        String fileName = filepath.getFileName().toString();\n", "        int off = fileName.lastIndexOf('.');\n", "        if (off != -1) {\n", "            fileName = resFileCounter.incrementAndGet() + fileName.substring(off);\n", "        } else {\n", "            fileName = Integer.toString(resFileCounter.incrementAndGet());\n", "        }\n", "\n", "        final ResDir resDir = ofdDoc.docDir.obtainRes();\n", "        // \u590d\u5236\u6587\u4ef6\u5230\u65b0\u6587\u4ef6\u5bb9\u7684\u8d44\u6e90\u5bb9\u5668\u4e2d\n", "        try (final InputStream in = Files.newInputStream(filepath)) {\n", "            resDir.addRaw(fileName, in);\n", "        }\n", "        final ST_Loc res = new ST_Loc(fileName);\n", "        // \u7f13\u5b58\uff0c\u8fd4\u56de\u6587\u4ef6\u540d\u79f0\uff08\u57fa\u4e8eRes\u5bb9\u5668\u7684\u76f8\u5bf9\u8def\u5f84\uff09\n", "        resFileHashTable.put(hash, res);\n", "        return res;\n", "    }\n", "\n", "    @Override\n", "    public void close() throws IOException {\n", "        // \u53ea\u6709\u5728\u65b0\u6587\u6863\u4e2d\u542b\u6709\u9875\u9762\u65f6\u624d\u5141\u8bb8\u8fd0\u884c\u5408\u5e76\u8fdb\u7a0b\n", "        if (!pageArr.isEmpty()) {\n", "            try {\n", "                doMerge();\n", "            } catch (DocumentException e) {\n", "                throw new IOException(e);\n", "            }\n", "        }\n", "        // \u5173\u95ed\u5df2\u7ecf\u6253\u5f00\u7684\u6587\u6863\u4e0a\u4e0b\u6587\n", "        for (DocContext docContext : docCtxMap.values()) {\n", "            docContext.close();\n", "        }\n", "    }\n", "\n", "\n", "}\n"], "test_content": ["package org.ofdrw.tool.merge;\n", "\n", "import org.dom4j.DocumentHelper;\n", "import org.junit.jupiter.api.Test;\n", "\n", "import java.io.IOException;\n", "import java.nio.file.Path;\n", "import java.nio.file.Paths;\n", "\n", "import static org.junit.jupiter.api.Assertions.*;\n", "\n", "/**\n", " * \u9875\u9762\u8fc1\u79fb\u6d4b\u8bd5\n", " *\n", " * @author \u6743\u89c2\u5b87\n", " * @since 2021-11-10 21:15:31\n", " */\n", "class OFDMergerTest {\n", "\n", "    /**\n", "     * \u6d4b\u8bd5\u6c34\u5370\u8fc1\u79fb\n", "     */\n", "    @Test\n", "    void testMergerWatermark() throws IOException {\n", "        Path dst = Paths.get(\"target/merge_watermark.ofd\");\n", "        Path d1Path = Paths.get(\"src/test/resources\", \"hello_watermark.ofd\");\n", "        Path d2Path = Paths.get(\"src/test/resources\", \"Page5.ofd\");\n", "\n", "        try (OFDMerger ofdMerger = new OFDMerger(dst)) {\n", "            ofdMerger.add(d1Path);\n", "            ofdMerger.add(d2Path);\n", "            ofdMerger.add(d1Path);\n", "        }\n", "        System.out.println(dst.toAbsolutePath());\n", "    }\n", "\n", "\n", "    @Test\n", "    void add() throws IOException {\n", "        Path dst = Paths.get(\"target/n1.ofd\");\n", "        Path d1Path = Paths.get(\"../ofdrw-converter/src/test/resources/\", \"y.ofd\");\n", "        Path d2Path = Paths.get(\"../ofdrw-converter/src/test/resources/\", \"\u53d1\u7968\u793a\u4f8b.ofd\");\n", "\n", "        try (OFDMerger ofdMerger = new OFDMerger(dst)) {\n", "            ofdMerger.add(d1Path, 2);\n", "            ofdMerger.add(d2Path, 1);\n", "            ofdMerger.add(d1Path, 1);\n", "        }\n", "    }\n", "\n", "    @Test\n", "    void add2() throws IOException {\n", "        Path dst = Paths.get(\"target/n2.ofd\");\n", "        Path d1Path = Paths.get(\"../ofdrw-converter/src/test/resources/\", \"y.ofd\");\n", "        Path d2Path = Paths.get(\"../ofdrw-converter/src/test/resources/\", \"\u53d1\u7968\u793a\u4f8b.ofd\");\n", "\n", "        try (OFDMerger ofdMerger = new OFDMerger(dst)) {\n", "            ofdMerger.add(d1Path, 1, 1);\n", "            ofdMerger.add(d2Path);\n", "            ofdMerger.add(d1Path);\n", "        }\n", "    }\n", "}"], "method_lines_dic": {"OFDMerger::::add(java.nio.file.Path,int[])": [144, 166], "OFDMerger::::add(org.ofdrw.tool.merge.PageEntry[])": [176, 194], "OFDMerger::::doMerge()": [199, 267], "OFDMerger::::resMigrate(org.ofdrw.tool.merge.DocContext,java.lang.String)": [437, 500], "OFDMerger::::copyResFile(java.nio.file.Path)": [513, 549], "OFDMerger::::close()": [551, 565]}, "test_method_lines_dic": {"OFDMergerTest::::testMergerWatermark()": [23, 35], "OFDMergerTest::::add()": [38, 49], "OFDMergerTest::::add2()": [51, 62]}, "reverse_method_lines_dic": {"144": "OFDMerger::::add(java.nio.file.Path,int[])", "145": "OFDMerger::::add(java.nio.file.Path,int[])", "146": "OFDMerger::::add(java.nio.file.Path,int[])", "147": "OFDMerger::::add(java.nio.file.Path,int[])", "148": "OFDMerger::::add(java.nio.file.Path,int[])", "149": "OFDMerger::::add(java.nio.file.Path,int[])", "150": "OFDMerger::::add(java.nio.file.Path,int[])", "151": "OFDMerger::::add(java.nio.file.Path,int[])", "152": "OFDMerger::::add(java.nio.file.Path,int[])", "153": "OFDMerger::::add(java.nio.file.Path,int[])", "154": "OFDMerger::::add(java.nio.file.Path,int[])", "155": "OFDMerger::::add(java.nio.file.Path,int[])", "156": "OFDMerger::::add(java.nio.file.Path,int[])", "157": "OFDMerger::::add(java.nio.file.Path,int[])", "158": "OFDMerger::::add(java.nio.file.Path,int[])", "159": "OFDMerger::::add(java.nio.file.Path,int[])", "160": "OFDMerger::::add(java.nio.file.Path,int[])", "161": "OFDMerger::::add(java.nio.file.Path,int[])", "162": "OFDMerger::::add(java.nio.file.Path,int[])", "163": "OFDMerger::::add(java.nio.file.Path,int[])", "164": "OFDMerger::::add(java.nio.file.Path,int[])", "165": "OFDMerger::::add(java.nio.file.Path,int[])", "166": "OFDMerger::::add(java.nio.file.Path,int[])", "176": "OFDMerger::::add(org.ofdrw.tool.merge.PageEntry[])", "177": "OFDMerger::::add(org.ofdrw.tool.merge.PageEntry[])", "178": "OFDMerger::::add(org.ofdrw.tool.merge.PageEntry[])", "179": "OFDMerger::::add(org.ofdrw.tool.merge.PageEntry[])", "180": "OFDMerger::::add(org.ofdrw.tool.merge.PageEntry[])", "181": "OFDMerger::::add(org.ofdrw.tool.merge.PageEntry[])", "182": "OFDMerger::::add(org.ofdrw.tool.merge.PageEntry[])", "183": "OFDMerger::::add(org.ofdrw.tool.merge.PageEntry[])", "184": "OFDMerger::::add(org.ofdrw.tool.merge.PageEntry[])", "185": "OFDMerger::::add(org.ofdrw.tool.merge.PageEntry[])", "186": "OFDMerger::::add(org.ofdrw.tool.merge.PageEntry[])", "187": "OFDMerger::::add(org.ofdrw.tool.merge.PageEntry[])", "188": "OFDMerger::::add(org.ofdrw.tool.merge.PageEntry[])", "189": "OFDMerger::::add(org.ofdrw.tool.merge.PageEntry[])", "190": "OFDMerger::::add(org.ofdrw.tool.merge.PageEntry[])", "191": "OFDMerger::::add(org.ofdrw.tool.merge.PageEntry[])", "192": "OFDMerger::::add(org.ofdrw.tool.merge.PageEntry[])", "193": "OFDMerger::::add(org.ofdrw.tool.merge.PageEntry[])", "194": "OFDMerger::::add(org.ofdrw.tool.merge.PageEntry[])", "199": "OFDMerger::::doMerge()", "200": "OFDMerger::::doMerge()", "201": "OFDMerger::::doMerge()", "202": "OFDMerger::::doMerge()", "203": "OFDMerger::::doMerge()", "204": "OFDMerger::::doMerge()", "205": "OFDMerger::::doMerge()", "206": "OFDMerger::::doMerge()", "207": "OFDMerger::::doMerge()", "208": "OFDMerger::::doMerge()", "209": "OFDMerger::::doMerge()", "210": "OFDMerger::::doMerge()", "211": "OFDMerger::::doMerge()", "212": "OFDMerger::::doMerge()", "213": "OFDMerger::::doMerge()", "214": "OFDMerger::::doMerge()", "215": "OFDMerger::::doMerge()", "216": "OFDMerger::::doMerge()", "217": "OFDMerger::::doMerge()", "218": "OFDMerger::::doMerge()", "219": "OFDMerger::::doMerge()", "220": "OFDMerger::::doMerge()", "221": "OFDMerger::::doMerge()", "222": "OFDMerger::::doMerge()", "223": "OFDMerger::::doMerge()", "224": "OFDMerger::::doMerge()", "225": "OFDMerger::::doMerge()", "226": "OFDMerger::::doMerge()", "227": "OFDMerger::::doMerge()", "228": "OFDMerger::::doMerge()", "229": "OFDMerger::::doMerge()", "230": "OFDMerger::::doMerge()", "231": "OFDMerger::::doMerge()", "232": "OFDMerger::::doMerge()", "233": "OFDMerger::::doMerge()", "234": "OFDMerger::::doMerge()", "235": "OFDMerger::::doMerge()", "236": "OFDMerger::::doMerge()", "237": "OFDMerger::::doMerge()", "238": "OFDMerger::::doMerge()", "239": "OFDMerger::::doMerge()", "240": "OFDMerger::::doMerge()", "241": "OFDMerger::::doMerge()", "242": "OFDMerger::::doMerge()", "243": "OFDMerger::::doMerge()", "244": "OFDMerger::::doMerge()", "245": "OFDMerger::::doMerge()", "246": "OFDMerger::::doMerge()", "247": "OFDMerger::::doMerge()", "248": "OFDMerger::::doMerge()", "249": "OFDMerger::::doMerge()", "250": "OFDMerger::::doMerge()", "251": "OFDMerger::::doMerge()", "252": "OFDMerger::::doMerge()", "253": "OFDMerger::::doMerge()", "254": "OFDMerger::::doMerge()", "255": "OFDMerger::::doMerge()", "256": "OFDMerger::::doMerge()", "257": "OFDMerger::::doMerge()", "258": "OFDMerger::::doMerge()", "259": "OFDMerger::::doMerge()", "260": "OFDMerger::::doMerge()", "261": "OFDMerger::::doMerge()", "262": "OFDMerger::::doMerge()", "263": "OFDMerger::::doMerge()", "264": "OFDMerger::::doMerge()", "265": "OFDMerger::::doMerge()", "266": "OFDMerger::::doMerge()", "267": "OFDMerger::::doMerge()", "437": "OFDMerger::::resMigrate(org.ofdrw.tool.merge.DocContext,java.lang.String)", "438": "OFDMerger::::resMigrate(org.ofdrw.tool.merge.DocContext,java.lang.String)", "439": "OFDMerger::::resMigrate(org.ofdrw.tool.merge.DocContext,java.lang.String)", "440": "OFDMerger::::resMigrate(org.ofdrw.tool.merge.DocContext,java.lang.String)", "441": "OFDMerger::::resMigrate(org.ofdrw.tool.merge.DocContext,java.lang.String)", "442": "OFDMerger::::resMigrate(org.ofdrw.tool.merge.DocContext,java.lang.String)", "443": "OFDMerger::::resMigrate(org.ofdrw.tool.merge.DocContext,java.lang.String)", "444": "OFDMerger::::resMigrate(org.ofdrw.tool.merge.DocContext,java.lang.String)", "445": "OFDMerger::::resMigrate(org.ofdrw.tool.merge.DocContext,java.lang.String)", "446": "OFDMerger::::resMigrate(org.ofdrw.tool.merge.DocContext,java.lang.String)", "447": "OFDMerger::::resMigrate(org.ofdrw.tool.merge.DocContext,java.lang.String)", "448": "OFDMerger::::resMigrate(org.ofdrw.tool.merge.DocContext,java.lang.String)", "449": "OFDMerger::::resMigrate(org.ofdrw.tool.merge.DocContext,java.lang.String)", "450": "OFDMerger::::resMigrate(org.ofdrw.tool.merge.DocContext,java.lang.String)", "451": "OFDMerger::::resMigrate(org.ofdrw.tool.merge.DocContext,java.lang.String)", "452": "OFDMerger::::resMigrate(org.ofdrw.tool.merge.DocContext,java.lang.String)", "453": "OFDMerger::::resMigrate(org.ofdrw.tool.merge.DocContext,java.lang.String)", "454": "OFDMerger::::resMigrate(org.ofdrw.tool.merge.DocContext,java.lang.String)", "455": "OFDMerger::::resMigrate(org.ofdrw.tool.merge.DocContext,java.lang.String)", "456": "OFDMerger::::resMigrate(org.ofdrw.tool.merge.DocContext,java.lang.String)", "457": "OFDMerger::::resMigrate(org.ofdrw.tool.merge.DocContext,java.lang.String)", "458": "OFDMerger::::resMigrate(org.ofdrw.tool.merge.DocContext,java.lang.String)", "459": "OFDMerger::::resMigrate(org.ofdrw.tool.merge.DocContext,java.lang.String)", "460": "OFDMerger::::resMigrate(org.ofdrw.tool.merge.DocContext,java.lang.String)", "461": "OFDMerger::::resMigrate(org.ofdrw.tool.merge.DocContext,java.lang.String)", "462": "OFDMerger::::resMigrate(org.ofdrw.tool.merge.DocContext,java.lang.String)", "463": "OFDMerger::::resMigrate(org.ofdrw.tool.merge.DocContext,java.lang.String)", "464": "OFDMerger::::resMigrate(org.ofdrw.tool.merge.DocContext,java.lang.String)", "465": "OFDMerger::::resMigrate(org.ofdrw.tool.merge.DocContext,java.lang.String)", "466": "OFDMerger::::resMigrate(org.ofdrw.tool.merge.DocContext,java.lang.String)", "467": "OFDMerger::::resMigrate(org.ofdrw.tool.merge.DocContext,java.lang.String)", "468": "OFDMerger::::resMigrate(org.ofdrw.tool.merge.DocContext,java.lang.String)", "469": "OFDMerger::::resMigrate(org.ofdrw.tool.merge.DocContext,java.lang.String)", "470": "OFDMerger::::resMigrate(org.ofdrw.tool.merge.DocContext,java.lang.String)", "471": "OFDMerger::::resMigrate(org.ofdrw.tool.merge.DocContext,java.lang.String)", "472": "OFDMerger::::resMigrate(org.ofdrw.tool.merge.DocContext,java.lang.String)", "473": "OFDMerger::::resMigrate(org.ofdrw.tool.merge.DocContext,java.lang.String)", "474": "OFDMerger::::resMigrate(org.ofdrw.tool.merge.DocContext,java.lang.String)", "475": "OFDMerger::::resMigrate(org.ofdrw.tool.merge.DocContext,java.lang.String)", "476": "OFDMerger::::resMigrate(org.ofdrw.tool.merge.DocContext,java.lang.String)", "477": "OFDMerger::::resMigrate(org.ofdrw.tool.merge.DocContext,java.lang.String)", "478": "OFDMerger::::resMigrate(org.ofdrw.tool.merge.DocContext,java.lang.String)", "479": "OFDMerger::::resMigrate(org.ofdrw.tool.merge.DocContext,java.lang.String)", "480": "OFDMerger::::resMigrate(org.ofdrw.tool.merge.DocContext,java.lang.String)", "481": "OFDMerger::::resMigrate(org.ofdrw.tool.merge.DocContext,java.lang.String)", "482": "OFDMerger::::resMigrate(org.ofdrw.tool.merge.DocContext,java.lang.String)", "483": "OFDMerger::::resMigrate(org.ofdrw.tool.merge.DocContext,java.lang.String)", "484": "OFDMerger::::resMigrate(org.ofdrw.tool.merge.DocContext,java.lang.String)", "485": "OFDMerger::::resMigrate(org.ofdrw.tool.merge.DocContext,java.lang.String)", "486": "OFDMerger::::resMigrate(org.ofdrw.tool.merge.DocContext,java.lang.String)", "487": "OFDMerger::::resMigrate(org.ofdrw.tool.merge.DocContext,java.lang.String)", "488": "OFDMerger::::resMigrate(org.ofdrw.tool.merge.DocContext,java.lang.String)", "489": "OFDMerger::::resMigrate(org.ofdrw.tool.merge.DocContext,java.lang.String)", "490": "OFDMerger::::resMigrate(org.ofdrw.tool.merge.DocContext,java.lang.String)", "491": "OFDMerger::::resMigrate(org.ofdrw.tool.merge.DocContext,java.lang.String)", "492": "OFDMerger::::resMigrate(org.ofdrw.tool.merge.DocContext,java.lang.String)", "493": "OFDMerger::::resMigrate(org.ofdrw.tool.merge.DocContext,java.lang.String)", "494": "OFDMerger::::resMigrate(org.ofdrw.tool.merge.DocContext,java.lang.String)", "495": "OFDMerger::::resMigrate(org.ofdrw.tool.merge.DocContext,java.lang.String)", "496": "OFDMerger::::resMigrate(org.ofdrw.tool.merge.DocContext,java.lang.String)", "497": "OFDMerger::::resMigrate(org.ofdrw.tool.merge.DocContext,java.lang.String)", "498": "OFDMerger::::resMigrate(org.ofdrw.tool.merge.DocContext,java.lang.String)", "499": "OFDMerger::::resMigrate(org.ofdrw.tool.merge.DocContext,java.lang.String)", "500": "OFDMerger::::resMigrate(org.ofdrw.tool.merge.DocContext,java.lang.String)", "513": "OFDMerger::::copyResFile(java.nio.file.Path)", "514": "OFDMerger::::copyResFile(java.nio.file.Path)", "515": "OFDMerger::::copyResFile(java.nio.file.Path)", "516": "OFDMerger::::copyResFile(java.nio.file.Path)", "517": "OFDMerger::::copyResFile(java.nio.file.Path)", "518": "OFDMerger::::copyResFile(java.nio.file.Path)", "519": "OFDMerger::::copyResFile(java.nio.file.Path)", "520": "OFDMerger::::copyResFile(java.nio.file.Path)", "521": "OFDMerger::::copyResFile(java.nio.file.Path)", "522": "OFDMerger::::copyResFile(java.nio.file.Path)", "523": "OFDMerger::::copyResFile(java.nio.file.Path)", "524": "OFDMerger::::copyResFile(java.nio.file.Path)", "525": "OFDMerger::::copyResFile(java.nio.file.Path)", "526": "OFDMerger::::copyResFile(java.nio.file.Path)", "527": "OFDMerger::::copyResFile(java.nio.file.Path)", "528": "OFDMerger::::copyResFile(java.nio.file.Path)", "529": "OFDMerger::::copyResFile(java.nio.file.Path)", "530": "OFDMerger::::copyResFile(java.nio.file.Path)", "531": "OFDMerger::::copyResFile(java.nio.file.Path)", "532": "OFDMerger::::copyResFile(java.nio.file.Path)", "533": "OFDMerger::::copyResFile(java.nio.file.Path)", "534": "OFDMerger::::copyResFile(java.nio.file.Path)", "535": "OFDMerger::::copyResFile(java.nio.file.Path)", "536": "OFDMerger::::copyResFile(java.nio.file.Path)", "537": "OFDMerger::::copyResFile(java.nio.file.Path)", "538": "OFDMerger::::copyResFile(java.nio.file.Path)", "539": "OFDMerger::::copyResFile(java.nio.file.Path)", "540": "OFDMerger::::copyResFile(java.nio.file.Path)", "541": "OFDMerger::::copyResFile(java.nio.file.Path)", "542": "OFDMerger::::copyResFile(java.nio.file.Path)", "543": "OFDMerger::::copyResFile(java.nio.file.Path)", "544": "OFDMerger::::copyResFile(java.nio.file.Path)", "545": "OFDMerger::::copyResFile(java.nio.file.Path)", "546": "OFDMerger::::copyResFile(java.nio.file.Path)", "547": "OFDMerger::::copyResFile(java.nio.file.Path)", "548": "OFDMerger::::copyResFile(java.nio.file.Path)", "549": "OFDMerger::::copyResFile(java.nio.file.Path)", "551": "OFDMerger::::close()", "552": "OFDMerger::::close()", "553": "OFDMerger::::close()", "554": "OFDMerger::::close()", "555": "OFDMerger::::close()", "556": "OFDMerger::::close()", "557": "OFDMerger::::close()", "558": "OFDMerger::::close()", "559": "OFDMerger::::close()", "560": "OFDMerger::::close()", "561": "OFDMerger::::close()", "562": "OFDMerger::::close()", "563": "OFDMerger::::close()", "564": "OFDMerger::::close()", "565": "OFDMerger::::close()"}, "test_reverse_method_lines_dic": {"23": "OFDMergerTest::::testMergerWatermark()", "24": "OFDMergerTest::::testMergerWatermark()", "25": "OFDMergerTest::::testMergerWatermark()", "26": "OFDMergerTest::::testMergerWatermark()", "27": "OFDMergerTest::::testMergerWatermark()", "28": "OFDMergerTest::::testMergerWatermark()", "29": "OFDMergerTest::::testMergerWatermark()", "30": "OFDMergerTest::::testMergerWatermark()", "31": "OFDMergerTest::::testMergerWatermark()", "32": "OFDMergerTest::::testMergerWatermark()", "33": "OFDMergerTest::::testMergerWatermark()", "34": "OFDMergerTest::::testMergerWatermark()", "35": "OFDMergerTest::::testMergerWatermark()", "38": "OFDMergerTest::::add()", "39": "OFDMergerTest::::add()", "40": "OFDMergerTest::::add()", "41": "OFDMergerTest::::add()", "42": "OFDMergerTest::::add()", "43": "OFDMergerTest::::add()", "44": "OFDMergerTest::::add()", "45": "OFDMergerTest::::add()", "46": "OFDMergerTest::::add()", "47": "OFDMergerTest::::add()", "48": "OFDMergerTest::::add()", "49": "OFDMergerTest::::add()", "51": "OFDMergerTest::::add2()", "52": "OFDMergerTest::::add2()", "53": "OFDMergerTest::::add2()", "54": "OFDMergerTest::::add2()", "55": "OFDMergerTest::::add2()", "56": "OFDMergerTest::::add2()", "57": "OFDMergerTest::::add2()", "58": "OFDMergerTest::::add2()", "59": "OFDMergerTest::::add2()", "60": "OFDMergerTest::::add2()", "61": "OFDMergerTest::::add2()", "62": "OFDMergerTest::::add2()"}, "tests": [{"test_lines": [23, 35], "covered_lines": [74, 78, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 123, 124, 125, 126, 127, 130, 131, 132, 133, 145, 146, 148, 150, 151, 154, 155, 156, 157, 158, 162, 163, 165, 201, 205, 206, 207, 209, 210, 212, 213, 214, 215, 219, 221, 222, 223, 224, 228, 231, 232, 236, 237, 239, 240, 242, 245, 247, 248, 256, 258, 261, 262, 263, 265, 266, 267, 278, 280, 281, 283, 284, 285, 287, 288, 292, 293, 297, 299, 300, 303, 304, 305, 306, 308, 310, 312, 313, 314, 318, 320, 322, 323, 326, 331, 332, 333, 399, 400, 401, 402, 404, 405, 406, 407, 409, 411, 413, 415, 416, 419, 420, 421, 422, 424, 426, 427, 438, 439, 442, 445, 446, 447, 450, 451, 452, 462, 463, 464, 465, 466, 467, 468, 474, 475, 499, 554, 556, 559, 562, 563, 564, 565]}]}}