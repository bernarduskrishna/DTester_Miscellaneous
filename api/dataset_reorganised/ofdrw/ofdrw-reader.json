{
  "/bernard/dataset_construction/prep/repos/ofdrw/ofdrw-reader/src/main/java/org/ofdrw/reader/ZipUtil.java": {
    "class_content": [
      "package org.ofdrw.reader;\n",
      "\n",
      "import org.apache.commons.compress.archivers.ArchiveEntry;\n",
      "import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;\n",
      "import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;\n",
      "import org.apache.commons.compress.archivers.zip.ZipExtraField;\n",
      "import org.apache.commons.compress.archivers.zip.ZipFile;\n",
      "import org.apache.commons.compress.utils.IOUtils;\n",
      "\n",
      "import java.io.*;\n",
      "import java.nio.file.Files;\n",
      "\n",
      "/**\n",
      " * ZIP \u6587\u4ef6\u89e3\u538b\u5de5\u5177\n",
      " */\n",
      "public class ZipUtil {\n",
      "    /**\n",
      "     * \u8bbe\u7f6e \u89e3\u538b\u8bb8\u53ef\u6700\u5927\u5b57\u8282\u6570\n",
      "     *\n",
      "     * @param size \u538b\u7f29\u6587\u4ef6\u89e3\u538b\u6700\u5927\u5927\u5c0f,\u9ed8\u8ba4\u503c\uff1a 100M\n",
      "     * @deprecated \u91c7\u7528apache compress \u9ed8\u8ba4\u7b56\u7565\n",
      "     */\n",
      "    @Deprecated\n",
      "    public static void setMaxSize(long size) {\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u89e3\u538b\u9ed8\u8ba4\u5b57\u7b26\u96c6\n",
      "     * <p>\n",
      "     * \u7528\u4e8e\u89e3\u51b3\u4e2d\u6587\u5b57\u7b26\u96c6\u4e71\u7801\u95ee\u9898\n",
      "     *\n",
      "     * @param charset \u5b57\u7b26\u96c6\uff0c\u5982 GBK\u3001UTF8 \u7b49\n",
      "     */\n",
      "    public static void setDefaultCharset(String charset) {\n",
      "        ZipUtil.charset = charset;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u9ed8\u8ba4\u5b57\u7b26\u96c6\uff1aUTF8\n",
      "     */\n",
      "    private static String charset = \"UTF8\";\n",
      "\n",
      "    /**\n",
      "     * \u89e3\u538b\u5230\u6307\u5b9a\u76ee\u5f55\n",
      "     *\n",
      "     * @param zipPath \u9700\u8981\u89e3\u538b\u7684\u6587\u4ef6\u8def\u5f84\n",
      "     * @param descDir \u89e3\u538b\u5230\u76ee\u5f55\n",
      "     * @throws IOException \u6587\u4ef6\u64cd\u4f5cIO\u5f02\u5e38\n",
      "     */\n",
      "    public static void unZipFiles(String zipPath, String descDir) throws IOException {\n",
      "        unZipFiles(new File(zipPath), descDir);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u89e3\u538b\u6587\u4ef6\u5230\u6307\u5b9a\u76ee\u5f55\n",
      "     *\n",
      "     * @param src     \u538b\u7f29\u6587\u4ef6\u6d41\n",
      "     * @param descDir \u89e3\u538b\u5230\u76ee\u5f55\n",
      "     * @throws IOException \u6587\u4ef6\u64cd\u4f5cIO\u5f02\u5e38\n",
      "     */\n",
      "    public static void unZipFiles(InputStream src, String descDir) throws IOException {\n",
      "        unZipFileByApacheCommonCompress(src, descDir);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u89e3\u538b\u6587\u4ef6\u5230\u6307\u5b9a\u76ee\u5f55\n",
      "     *\n",
      "     * @param zipFile \u9700\u8981\u89e3\u538b\u7684\u6587\u4ef6\n",
      "     * @param descDir \u89e3\u538b\u5230\u76ee\u5f55\n",
      "     * @throws IOException \u6587\u4ef6\u64cd\u4f5cIO\u5f02\u5e38\n",
      "     */\n",
      "    public static void unZipFiles(File zipFile, String descDir) throws IOException {\n",
      "        unZipFileByApacheCommonCompress(zipFile, descDir);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u6821\u9a8c\u6587\u4ef6\u8def\u5f84\u662f\u5426\u5728\u671f\u671b\u7684\u6587\u4ef6\u76ee\u5f55\u4e0b\n",
      "     *\n",
      "     * @param targetDir \u671f\u671b\u89e3\u538b\u76ee\u5f55\n",
      "     * @param filePath  \u6587\u4ef6\u8def\u5f84\n",
      "     * @throws IOException \u6587\u4ef6\u64cd\u4f5cIO\u5f02\u5e38\n",
      "     */\n",
      "    private static void pathValid(String targetDir, String filePath) throws IOException {\n",
      "        if (!filePath.startsWith(targetDir))\n",
      "            throw new IOException(String.format(\"\u4e0d\u5408\u6cd5\u7684\u8def\u5f84\uff1a%s\", filePath));\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u4f7f\u7528apache common compress\u5e93 \u89e3\u538bzipFile\uff0c\u80fd\u652f\u6301\u66f4\u591azip\u5305\u89e3\u538b\u7684\u7279\u6027\n",
      "     *\n",
      "     * @param srcFile \u5e26\u89e3\u538b\u7684\u6e90\u6587\u4ef6\n",
      "     * @param descDir \u89e3\u538b\u5230\u76ee\u5f55\n",
      "     * @throws IOException IO\u5f02\u5e38\n",
      "     */\n",
      "    public static void unZipFileByApacheCommonCompress(File srcFile, String descDir) throws IOException {\n",
      "        if (srcFile == null || srcFile.exists() == false) {\n",
      "            throw new IOException(\"\u89e3\u538b\u6587\u4ef6\u4e0d\u5b58\u5728: \" + srcFile);\n",
      "        }\n",
      "        try (FileInputStream fin = new FileInputStream(srcFile)) {\n",
      "            unZipFileByApacheCommonCompress(fin, descDir);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * apache common compress\u5e93 \u89e3\u538bzipFile\n",
      "     *\n",
      "     * @param src     \u5e26\u89e3\u538b\u7684\u6e90\u6587\u4ef6\u6d41\n",
      "     * @param descDir \u89e3\u538b\u5230\u76ee\u5f55\n",
      "     * @throws IOException IO\u5f02\u5e38\n",
      "     */\n",
      "    public static void unZipFileByApacheCommonCompress(InputStream src, String descDir) throws IOException {\n",
      "        File pathFile = new File(descDir).getCanonicalFile();\n",
      "        if (!pathFile.exists() && !pathFile.mkdirs()) {\n",
      "            throw new IOException(\"\u89e3\u538b\u76ee\u5f55\u521b\u5efa\u5931\u8d25: \" + pathFile);\n",
      "        }\n",
      "\n",
      "        try (ZipArchiveInputStream zipFile = new ZipArchiveInputStream(src,charset,false,true)) {\n",
      "            ZipArchiveEntry entry = null;\n",
      "            while ((entry = (ZipArchiveEntry)zipFile.getNextEntry()) != null) {\n",
      "                File f = new File(pathFile, entry.getName()).getCanonicalFile();\n",
      "                //\u6821\u9a8c\u8def\u5f84\u5408\u6cd5\u6027\n",
      "                pathValid(pathFile.getAbsolutePath(), f.getAbsolutePath());\n",
      "\n",
      "                if (entry.isDirectory()) {\n",
      "                    if (!f.isDirectory() && !f.mkdirs()) {\n",
      "                        throw new IOException(\"failed to create directory \" + f);\n",
      "                    }\n",
      "                } else {\n",
      "                    File parent = f.getParentFile();\n",
      "                    if (!parent.isDirectory() && !parent.mkdirs()) {\n",
      "                        throw new IOException(\"failed to create directory \" + parent);\n",
      "                    }\n",
      "                    try (OutputStream o = Files.newOutputStream(f.toPath())) {\n",
      "                        IOUtils.copy(zipFile, o);\n",
      "                    }\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package org.ofdrw.reader;\n",
      "\n",
      "import org.junit.jupiter.api.Test;\n",
      "\n",
      "import java.nio.file.Path;\n",
      "import java.nio.file.Paths;\n",
      "\n",
      "import static org.junit.jupiter.api.Assertions.*;\n",
      "\n",
      "class ZipUtilTest {\n",
      "\n",
      "    @Test\n",
      "    void unZipFiles() throws Exception {\n",
      "        Path src = Paths.get(\"src/test/resources/DOC_0.zip\");\n",
      "        Path dst = Paths.get(\"target\", \"DOC_0_copy\");\n",
      "        ZipUtil.setDefaultCharset(\"GBK\");\n",
      "        ZipUtil.unZipFiles(src.toFile(), dst.toAbsolutePath().getFileName().toString());\n",
      "    }\n",
      "}"
    ],
    "method_lines_dic": {
      "ZipUtil::::setMaxSize(long)": [
        23,
        25
      ],
      "ZipUtil::::setDefaultCharset(java.lang.String)": [
        34,
        36
      ],
      "ZipUtil::::unZipFiles(java.lang.String,java.lang.String)": [
        50,
        52
      ],
      "ZipUtil::::unZipFiles(java.io.InputStream,java.lang.String)": [
        61,
        63
      ],
      "ZipUtil::::unZipFiles(java.io.File,java.lang.String)": [
        72,
        74
      ],
      "ZipUtil::::pathValid(java.lang.String,java.lang.String)": [
        83,
        86
      ],
      "ZipUtil::::unZipFileByApacheCommonCompress(java.io.File,java.lang.String)": [
        95,
        102
      ],
      "ZipUtil::::unZipFileByApacheCommonCompress(java.io.InputStream,java.lang.String)": [
        111,
        139
      ]
    },
    "test_method_lines_dic": {
      "ZipUtilTest::::unZipFiles()": [
        12,
        18
      ]
    },
    "reverse_method_lines_dic": {
      "23": "ZipUtil::::setMaxSize(long)",
      "24": "ZipUtil::::setMaxSize(long)",
      "25": "ZipUtil::::setMaxSize(long)",
      "34": "ZipUtil::::setDefaultCharset(java.lang.String)",
      "35": "ZipUtil::::setDefaultCharset(java.lang.String)",
      "36": "ZipUtil::::setDefaultCharset(java.lang.String)",
      "50": "ZipUtil::::unZipFiles(java.lang.String,java.lang.String)",
      "51": "ZipUtil::::unZipFiles(java.lang.String,java.lang.String)",
      "52": "ZipUtil::::unZipFiles(java.lang.String,java.lang.String)",
      "61": "ZipUtil::::unZipFiles(java.io.InputStream,java.lang.String)",
      "62": "ZipUtil::::unZipFiles(java.io.InputStream,java.lang.String)",
      "63": "ZipUtil::::unZipFiles(java.io.InputStream,java.lang.String)",
      "72": "ZipUtil::::unZipFiles(java.io.File,java.lang.String)",
      "73": "ZipUtil::::unZipFiles(java.io.File,java.lang.String)",
      "74": "ZipUtil::::unZipFiles(java.io.File,java.lang.String)",
      "83": "ZipUtil::::pathValid(java.lang.String,java.lang.String)",
      "84": "ZipUtil::::pathValid(java.lang.String,java.lang.String)",
      "85": "ZipUtil::::pathValid(java.lang.String,java.lang.String)",
      "86": "ZipUtil::::pathValid(java.lang.String,java.lang.String)",
      "95": "ZipUtil::::unZipFileByApacheCommonCompress(java.io.File,java.lang.String)",
      "96": "ZipUtil::::unZipFileByApacheCommonCompress(java.io.File,java.lang.String)",
      "97": "ZipUtil::::unZipFileByApacheCommonCompress(java.io.File,java.lang.String)",
      "98": "ZipUtil::::unZipFileByApacheCommonCompress(java.io.File,java.lang.String)",
      "99": "ZipUtil::::unZipFileByApacheCommonCompress(java.io.File,java.lang.String)",
      "100": "ZipUtil::::unZipFileByApacheCommonCompress(java.io.File,java.lang.String)",
      "101": "ZipUtil::::unZipFileByApacheCommonCompress(java.io.File,java.lang.String)",
      "102": "ZipUtil::::unZipFileByApacheCommonCompress(java.io.File,java.lang.String)",
      "111": "ZipUtil::::unZipFileByApacheCommonCompress(java.io.InputStream,java.lang.String)",
      "112": "ZipUtil::::unZipFileByApacheCommonCompress(java.io.InputStream,java.lang.String)",
      "113": "ZipUtil::::unZipFileByApacheCommonCompress(java.io.InputStream,java.lang.String)",
      "114": "ZipUtil::::unZipFileByApacheCommonCompress(java.io.InputStream,java.lang.String)",
      "115": "ZipUtil::::unZipFileByApacheCommonCompress(java.io.InputStream,java.lang.String)",
      "116": "ZipUtil::::unZipFileByApacheCommonCompress(java.io.InputStream,java.lang.String)",
      "117": "ZipUtil::::unZipFileByApacheCommonCompress(java.io.InputStream,java.lang.String)",
      "118": "ZipUtil::::unZipFileByApacheCommonCompress(java.io.InputStream,java.lang.String)",
      "119": "ZipUtil::::unZipFileByApacheCommonCompress(java.io.InputStream,java.lang.String)",
      "120": "ZipUtil::::unZipFileByApacheCommonCompress(java.io.InputStream,java.lang.String)",
      "121": "ZipUtil::::unZipFileByApacheCommonCompress(java.io.InputStream,java.lang.String)",
      "122": "ZipUtil::::unZipFileByApacheCommonCompress(java.io.InputStream,java.lang.String)",
      "123": "ZipUtil::::unZipFileByApacheCommonCompress(java.io.InputStream,java.lang.String)",
      "124": "ZipUtil::::unZipFileByApacheCommonCompress(java.io.InputStream,java.lang.String)",
      "125": "ZipUtil::::unZipFileByApacheCommonCompress(java.io.InputStream,java.lang.String)",
      "126": "ZipUtil::::unZipFileByApacheCommonCompress(java.io.InputStream,java.lang.String)",
      "127": "ZipUtil::::unZipFileByApacheCommonCompress(java.io.InputStream,java.lang.String)",
      "128": "ZipUtil::::unZipFileByApacheCommonCompress(java.io.InputStream,java.lang.String)",
      "129": "ZipUtil::::unZipFileByApacheCommonCompress(java.io.InputStream,java.lang.String)",
      "130": "ZipUtil::::unZipFileByApacheCommonCompress(java.io.InputStream,java.lang.String)",
      "131": "ZipUtil::::unZipFileByApacheCommonCompress(java.io.InputStream,java.lang.String)",
      "132": "ZipUtil::::unZipFileByApacheCommonCompress(java.io.InputStream,java.lang.String)",
      "133": "ZipUtil::::unZipFileByApacheCommonCompress(java.io.InputStream,java.lang.String)",
      "134": "ZipUtil::::unZipFileByApacheCommonCompress(java.io.InputStream,java.lang.String)",
      "135": "ZipUtil::::unZipFileByApacheCommonCompress(java.io.InputStream,java.lang.String)",
      "136": "ZipUtil::::unZipFileByApacheCommonCompress(java.io.InputStream,java.lang.String)",
      "137": "ZipUtil::::unZipFileByApacheCommonCompress(java.io.InputStream,java.lang.String)",
      "138": "ZipUtil::::unZipFileByApacheCommonCompress(java.io.InputStream,java.lang.String)",
      "139": "ZipUtil::::unZipFileByApacheCommonCompress(java.io.InputStream,java.lang.String)"
    },
    "test_reverse_method_lines_dic": {
      "12": "ZipUtilTest::::unZipFiles()",
      "13": "ZipUtilTest::::unZipFiles()",
      "14": "ZipUtilTest::::unZipFiles()",
      "15": "ZipUtilTest::::unZipFiles()",
      "16": "ZipUtilTest::::unZipFiles()",
      "17": "ZipUtilTest::::unZipFiles()",
      "18": "ZipUtilTest::::unZipFiles()"
    },
    "tests": [
      {
        "test_lines": [
          12,
          18
        ],
        "covered_lines": [
          35,
          36,
          41,
          73,
          74,
          84,
          86,
          96,
          99,
          100,
          101,
          102,
          112,
          113,
          117,
          118,
          119,
          120,
          122,
          124,
          125,
          129,
          130,
          133,
          134,
          135,
          137,
          138,
          139
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/ofdrw/ofdrw-reader/src/main/java/org/ofdrw/reader/ResourceLocator.java": {
    "class_content": [
      "package org.ofdrw.reader;\n",
      "\n",
      "import org.dom4j.DocumentException;\n",
      "import org.dom4j.Element;\n",
      "import org.ofdrw.core.basicType.ST_Loc;\n",
      "import org.ofdrw.pkg.container.*;\n",
      "\n",
      "import java.io.FileNotFoundException;\n",
      "import java.nio.file.Files;\n",
      "import java.nio.file.Path;\n",
      "import java.nio.file.Paths;\n",
      "import java.util.LinkedList;\n",
      "import java.util.List;\n",
      "import java.util.function.Function;\n",
      "import java.util.regex.Pattern;\n",
      "\n",
      "/**\n",
      " * \u8d44\u6e90\u5b9a\u4f4d\u5668\n",
      " * <p>\n",
      " * \u901a\u8fc7\u7ed9\u4e0e\u7684\u8d44\u6e90\u5730\u5740\u83b7\u53d6\u5bf9\u5e94\u7684\u8d44\u6e90\u6587\u4ef6\u6216\u5bf9\u8c61\n",
      " *\n",
      " * @author \u6743\u89c2\u5b87\n",
      " * @since 2020-04-08 20:05:14\n",
      " */\n",
      "public class ResourceLocator {\n",
      "\n",
      "    /**\n",
      "     * \u8def\u5f84\u5339\u914d\u6b63\u5219\u5217\u8868\n",
      "     */\n",
      "    public static Pattern PtDoc = Pattern.compile(\"/(Doc_\\\\d+)\");\n",
      "    public static Pattern PtSigns = Pattern.compile(\"/(Doc_\\\\d+)/Signs\");\n",
      "    public static Pattern PtSign = Pattern.compile(\"/(Doc_\\\\d+)/Signs/(Sign_\\\\d+)\");\n",
      "    public static Pattern PtPages = Pattern.compile(\"/(Doc_\\\\d+)/Pages\");\n",
      "    public static Pattern PtPage = Pattern.compile(\"/(Doc_\\\\d+)/Pages/(Page_\\\\d+)\");\n",
      "    public static Pattern PtPageRes = Pattern.compile(\"/(Doc_\\\\d+)/Pages/(Page_\\\\d+)/Res\");\n",
      "    public static Pattern PtDocRes = Pattern.compile(\"/(Doc_\\\\d+)/Res\");\n",
      "\n",
      "    /**\n",
      "     * \u8d44\u6e90\u5bb9\u5668\n",
      "     * <p>\n",
      "     * \u8be5\u5bb9\u5668\u5e26\u6709\u7f13\u5b58\u529f\u80fd\n",
      "     */\n",
      "    private OFDDir ofdDir;\n",
      "\n",
      "    /**\n",
      "     * \u5f53\u524d\u76ee\u5f55\n",
      "     */\n",
      "    private LinkedList<String> workDir = new LinkedList<>();\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u4fdd\u5b58\u7684\u8def\u5f84\u6808\n",
      "     * <p>\n",
      "     * \u6bcf\u6b21\u8c03\u7528Save\u90fd\u4f1a\u5165\u6808\n",
      "     */\n",
      "    private LinkedList<LinkedList<String>> savedStack = new LinkedList<>();\n",
      "\n",
      "\n",
      "    private ResourceLocator() {\n",
      "    }\n",
      "\n",
      "    public ResourceLocator(OFDDir ofdDir) {\n",
      "        this.ofdDir = ofdDir;\n",
      "        // \u9ed8\u8ba4\u5de5\u4f5c\u76ee\u5f55\u4e3aOFD\u5bb9\u5668\u7684\u6839\u76ee\u5f55\n",
      "        this.workDir.add(\"/\");\n",
      "    }\n",
      "\n",
      "    /***\n",
      "     * \u901a\u8fc7\u865a\u62df\u5bb9\u5668\u521b\u5efa\u8d44\u6e90\u52a0\u8f7d\u5668\n",
      "     *\n",
      "     * \u521b\u5efa\u8d44\u6e90\u52a0\u8f7d\u5668\u7684\u540c\u65f6\u5207\u6362\u8def\u5f84\u81f3\u865a\u62df\u5bb9\u5668\u7684\u76ee\u5f55\n",
      "     *\n",
      "     * @param vc \u865a\u62df\u5bb9\u5668\n",
      "     */\n",
      "    public ResourceLocator(VirtualContainer vc) {\n",
      "        VirtualContainer p = vc;\n",
      "        // \u627e\u5230\u6839\u8def\u5f84\n",
      "        while (p != p.getParent()) {\n",
      "            p = p.getParent();\n",
      "        }\n",
      "        if ((p instanceof OFDDir) == false) {\n",
      "            throw new IllegalArgumentException(\"\u6839\u8def\u5f84\u4e0d\u662f OFDDir\");\n",
      "        }\n",
      "        this.ofdDir = (OFDDir) p;\n",
      "        this.cd(vc.getAbsLoc().getLoc());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u4fdd\u5b58\u5f53\u524d\u5de5\u4f5c\u8def\u5f84\n",
      "     *\n",
      "     * @return this\n",
      "     */\n",
      "    public ResourceLocator save() {\n",
      "        LinkedList<String> toBeSaveWd = new LinkedList<>(workDir);\n",
      "        // \u5165\u6808\n",
      "        savedStack.addFirst(toBeSaveWd);\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8fd8\u539f\u539f\u6709\u5de5\u4f5c\u533a\n",
      "     * <p>\n",
      "     * \u5982\u679c\u6ca1\u6709\u4fdd\u5b58\u8fc7\u5de5\u4f5c\u533a\uff0c\u90a3\u4e48\u4e0d\u4f1a\u9020\u6210\u4efb\u4f55\u5f71\u54cd\n",
      "     *\n",
      "     * @return this\n",
      "     */\n",
      "    public ResourceLocator restore() {\n",
      "        if (!savedStack.isEmpty()) {\n",
      "            workDir.clear();\n",
      "            // \u51fa\u6808\n",
      "            LinkedList<String> lastSaved = savedStack.removeFirst();\n",
      "            workDir.addAll(lastSaved);\n",
      "        }\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8f6c\u6362\u8def\u5f84\u5bf9\u8c61\u4e3a\u7edd\u5bf9\u8def\u5f84\u5b57\u7b26\u4e32\n",
      "     *\n",
      "     * @param path \u8def\u5f84\u5bf9\u8c61\n",
      "     * @return \u7edd\u5bf9\u8def\u5f84\u5b57\u7b26\u4e32\n",
      "     */\n",
      "    public String toAbsolutePath(ST_Loc path) {\n",
      "        if (path == null) {\n",
      "            return pwd();\n",
      "        }\n",
      "        return toAbsolutePath(path.getLoc());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8def\u5f84\u8f6c\u6362\u4e3a\u7edd\u5bf9\u8def\u5f84\n",
      "     *\n",
      "     * @param path \u5bb9\u5668\u8def\u5f84\n",
      "     * @return \u7edd\u5bf9\u8def\u5f84\u5b57\u7b26\u4e32\n",
      "     */\n",
      "    public String toAbsolutePath(String path) {\n",
      "        if (path == null || path.trim().isEmpty()) {\n",
      "            return pwd();\n",
      "        }\n",
      "        LinkedList<String> workDirCopy = new LinkedList<>(workDir);\n",
      "        if (path.startsWith(\"/\")) {\n",
      "            workDirCopy.clear();\n",
      "            workDirCopy.add(\"/\");\n",
      "        }\n",
      "        for (String item : path.split(\"/\")) {\n",
      "            item = item.trim();\n",
      "            if (item.equals(\".\") || item.isEmpty()) {\n",
      "                // \u8868\u793a\u4f46\u524d\u76ee\u5f55\u4e0d\u505a\u4efb\u4f55\u64cd\u4f5c\n",
      "                continue;\n",
      "            } else if (item.equals(\"..\")) {\n",
      "                workDirCopy.removeLast();\n",
      "                if (workDirCopy.isEmpty()) {\n",
      "                    workDirCopy.add(\"/\");\n",
      "                }\n",
      "            } else {\n",
      "                workDirCopy.add(item);\n",
      "            }\n",
      "        }\n",
      "        return pwd(workDirCopy);\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u91cd\u7f6e\u5de5\u4f5c\u8def\u5f84\n",
      "     * <p>\n",
      "     * \u91cd\u7f6e\u540e\u5c06\u56de\u5230\u6839\u8def\u5f84\n",
      "     *\n",
      "     * @return this\n",
      "     */\n",
      "    public ResourceLocator restWd() {\n",
      "        return cd(\"/\");\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u5207\u6362\u5230\u5236\u5b9a\u7684\u865a\u62df\u5bb9\u5668\u76ee\u5f55\u4e0b\n",
      "     *\n",
      "     * @param vc \u865a\u62df\u5bb9\u5668\n",
      "     * @return this\n",
      "     */\n",
      "    public ResourceLocator cd(VirtualContainer vc) {\n",
      "        if (vc == null) {\n",
      "            throw new IllegalArgumentException(\"\u6539\u53d8\u76ee\u5f55\u7684\u5bb9\u5668\u5bf9\u8c61\uff08vc\uff09\u4e3a\u7a7a\");\n",
      "        }\n",
      "        return cd(vc.getAbsLoc().getLoc());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u6539\u53d8\u76ee\u5f55  Change Directory\n",
      "     *\n",
      "     * @param path \u8def\u5f84\u4f4d\u7f6e\n",
      "     * @return this\n",
      "     * @throws ErrorPathException \u8def\u5f84\u4e0d\u5b58\u5728\n",
      "     */\n",
      "    public ResourceLocator cd(String path) {\n",
      "        return cd(workDir, path);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u6539\u53d8\u76ee\u5f55  Change Directory\n",
      "     * <p>\n",
      "     * \u8def\u5f84\u6700\u540e\u5982\u679c\u662f\u76ee\u5f55\u4e5f\u4e0d\u52a0 \"/\"\n",
      "     *\n",
      "     * @param path    \u8def\u5f84\u4f4d\u7f6e\n",
      "     * @param workDir \u5df2\u6709\u5de5\u4f5c\u76ee\u5f55\n",
      "     * @return this\n",
      "     * @throws ErrorPathException \u8def\u5f84\u4e0d\u5b58\u5728\n",
      "     */\n",
      "    public ResourceLocator cd(LinkedList<String> workDir, String path) {\n",
      "        if (path == null || path.equals(\"\")) {\n",
      "            return this;\n",
      "        }\n",
      "        path = path.trim();\n",
      "        if (path.equals(\"/\")) {\n",
      "            workDir.clear();\n",
      "            workDir.add(\"/\");\n",
      "            return this;\n",
      "        }\n",
      "        // \u8f6c\u6362\u8def\u5f84\u4e3a\u7edd\u5bf9\u8def\u5f84\n",
      "        String absPath = toAbsolutePath(path);\n",
      "        String ofwTmp = ofdDir.getSysAbsPath();\n",
      "        Path sysPath = Paths.get(ofwTmp + absPath);\n",
      "        if (Files.exists(sysPath) && Files.isDirectory(sysPath)) {\n",
      "            // \u5237\u65b0\u5de5\u4f5c\u533a\u5230\u6307\u5b9a\u533a\u57df\n",
      "            workDir.clear();\n",
      "            workDir.add(\"/\");\n",
      "            for (String item : absPath.split(\"/\")) {\n",
      "                item = item.trim();\n",
      "                if (item.isEmpty()) {\n",
      "                    continue;\n",
      "                }\n",
      "                workDir.add(item);\n",
      "            }\n",
      "        } else {\n",
      "            // \u5982\u679c\u8def\u5f84\u4e0d\u5b58\u5728\uff0c\u90a3\u4e48\u62a5\u9519\n",
      "            throw new ErrorPathException(\"\u65e0\u6cd5\u5207\u6362\u8def\u5f84\u5230\" + path + \"\uff0c\u76ee\u5f55\u4e0d\u5b58\u5728\u3002\");\n",
      "        }\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8def\u5f84\u662f\u5426\u5b58\u5728\n",
      "     *\n",
      "     * @param path \u672b\u7aef\u8def\u5f84\n",
      "     * @return true -\u5b58\u5728\uff0cfalse - \u4e0d\u5b58\u5728\n",
      "     */\n",
      "    public boolean exist(String path) {\n",
      "        String ofwTmp = ofdDir.getSysAbsPath();\n",
      "        String fullPath = \"\";\n",
      "        if (path.startsWith(\"/\")) {\n",
      "            // \u7edd\u5bf9\u8def\u5f84\n",
      "            fullPath = ofwTmp + path;\n",
      "        } else {\n",
      "            // \u76f8\u5bf9\u8def\u5f84\n",
      "            fullPath = Paths.get(ofwTmp, pwd(), path).toAbsolutePath().toString();\n",
      "        }\n",
      "        return Files.exists(Paths.get(fullPath));\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u5224\u65ad\u8def\u5f84\u662f\u5426\u5b58\u5728\n",
      "     *\n",
      "     * @param workDir \u8def\u5f84\u96c6\u5408\n",
      "     * @return true -\u5b58\u5728\uff0cfalse - \u4e0d\u5b58\u5728\n",
      "     */\n",
      "    public boolean exist(LinkedList<String> workDir) {\n",
      "        String pwd = pwd(workDir);\n",
      "        String ofwTmp = ofdDir.getSysAbsPath();\n",
      "        Path path = Paths.get(ofwTmp + pwd);\n",
      "        return Files.exists(path);\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u5224\u65ad\u8def\u5f84\u662f\u5426\u5b58\u5728\n",
      "     *\n",
      "     * @param workDir \u5de5\u4f5c\u8def\u5f84\n",
      "     * @return true -\u5b58\u5728\uff0cfalse - \u4e0d\u5b58\u5728\n",
      "     */\n",
      "    public boolean dirExit(LinkedList<String> workDir) {\n",
      "        String pwd = pwd(workDir);\n",
      "        String ofwTmp = ofdDir.getSysAbsPath();\n",
      "        Path path = Paths.get(ofwTmp + pwd);\n",
      "        return Files.exists(path) && Files.isDirectory(path);\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u6253\u5370\u5de5\u4f5c\u76ee\u5f55 Print Work Directory\n",
      "     * <p>\n",
      "     * \u8def\u5f84\u6700\u540e\u5982\u679c\u662f\u76ee\u5f55\u4e5f\u4e0d\u52a0 \"/\"\n",
      "     *\n",
      "     * @return \u5de5\u4f5c\u76ee\u5f55\u8def\u5f84\n",
      "     */\n",
      "    public String pwd() {\n",
      "        return pwd(this.workDir);\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u6253\u5370\u5de5\u4f5c\u76ee\u5f55 Print Work Directory\n",
      "     *\n",
      "     * @param workDir \u5de5\u4f5c\u76ee\u5f55\n",
      "     * @return \u5de5\u4f5c\u76ee\u5f55\u8def\u5f84\n",
      "     */\n",
      "    public String pwd(List<String> workDir) {\n",
      "        if (workDir.size() == 1) {\n",
      "            return \"/\";\n",
      "        }\n",
      "        StringBuilder sb = new StringBuilder();\n",
      "        for (int i = 0, len = workDir.size(); i < len; i++) {\n",
      "            String item = workDir.get(i);\n",
      "            item = item.trim();\n",
      "            if (item.isEmpty()) {\n",
      "                continue;\n",
      "            }\n",
      "            sb.append(item);\n",
      "            // \u6700\u540e\u4e00\u4e2a\u8def\u5f84\u4e0d\u52a0\"/\"\n",
      "            if (!item.equals(\"/\") && (i != len - 1)) {\n",
      "                sb.append(\"/\");\n",
      "            }\n",
      "        }\n",
      "        return sb.toString();\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u4ee5\u5f53\u524d\u8def\u5f84\u4e3a\u57fa\u7840\u7684\u5bb9\u5668\u5185\u7edd\u5bf9\u8def\u5f84\n",
      "     *\n",
      "     * @param to \u76ee\u6807\u8def\u5f84\n",
      "     * @return \u5bb9\u5668\u5185\u7edd\u5bf9\u8def\u5f84\n",
      "     */\n",
      "    public ST_Loc getAbsTo(ST_Loc to) {\n",
      "        if (to == null) {\n",
      "            return new ST_Loc(pwd());\n",
      "        }\n",
      "        String loc = to.getLoc();\n",
      "        if (loc.startsWith(\"/\")) {\n",
      "            return new ST_Loc(loc);\n",
      "        }\n",
      "\n",
      "        // \u67e5\u8be2\u5de5\u4f5c\u76ee\u5f55\n",
      "        LinkedList<String> wd = new LinkedList<>(this.workDir);\n",
      "        // \u6587\u4ef6\u540d\u79f0\n",
      "        String fileName;\n",
      "        int indexOf = loc.lastIndexOf('/');\n",
      "        if (indexOf != -1) {\n",
      "            // \u5207\u6362\u5de5\u4f5c\u76ee\u5f55\n",
      "            this.cd(wd, loc.substring(0, indexOf + 1));\n",
      "            fileName = loc.substring(indexOf + 1);\n",
      "        } else {\n",
      "            fileName = loc;\n",
      "        }\n",
      "        String p = pwd(wd);\n",
      "        if (p.endsWith(\"/\")) {\n",
      "            loc = p + fileName;\n",
      "        } else {\n",
      "            loc = p + \"/\" + fileName;\n",
      "        }\n",
      "        return new ST_Loc(loc);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u6839\u636e\u8def\u5f84\u83b7\u53d6\u83b7\u53d6\u5bf9\u5e94\u7684\u8d44\u6e90\u5bf9\u8c61\n",
      "     *\n",
      "     * @param loc    \u8def\u5f84\u5730\u5740\n",
      "     * @param mapper \u5bf9\u8c61\u6620\u5c04\u6784\u9020\u5668\n",
      "     * @param <R>    \u6620\u5c04\u5bf9\u8c61\n",
      "     * @return \u5bf9\u8c61\n",
      "     * @throws FileNotFoundException \u6587\u4ef6\u4e0d\u5b58\u5728\n",
      "     * @throws DocumentException     \u6587\u4ef6\u89e3\u6790\u5f02\u5e38\n",
      "     */\n",
      "    public <R> R get(ST_Loc loc, Function<Element, R> mapper) throws FileNotFoundException, DocumentException {\n",
      "        return get(loc.getLoc(), mapper);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u6839\u636e\u8def\u5f84\u83b7\u53d6\u83b7\u53d6\u5bf9\u5e94\u7684\u8d44\u6e90\u5bf9\u8c61\n",
      "     *\n",
      "     * @param loc    \u8def\u5f84\u5730\u5740\n",
      "     * @param mapper \u5bf9\u8c61\u6620\u5c04\u6784\u9020\u5668\n",
      "     * @param <R>    \u6620\u5c04\u5bf9\u8c61\n",
      "     * @return \u5bf9\u8c61\n",
      "     * @throws FileNotFoundException \u6587\u4ef6\u4e0d\u5b58\u5728\n",
      "     * @throws DocumentException     \u6587\u4ef6\u89e3\u6790\u5f02\u5e38\n",
      "     */\n",
      "    public <R> R get(String loc, Function<Element, R> mapper) throws FileNotFoundException, DocumentException {\n",
      "        if (loc == null || loc.trim().equals(\"\")) {\n",
      "            throw new FileNotFoundException(\"\u8def\u5f84\u4e3a\u7a7a\uff08loc\uff09\");\n",
      "        }\n",
      "        // \u67e5\u8be2\u5de5\u4f5c\u76ee\u5f55\n",
      "        LinkedList<String> wd = new LinkedList<>(this.workDir);\n",
      "        // \u6587\u4ef6\u540d\u79f0\n",
      "        String fileName;\n",
      "        int indexOf = loc.lastIndexOf('/');\n",
      "        if (indexOf != -1) {\n",
      "            // \u5207\u6362\u5de5\u4f5c\u76ee\u5f55\n",
      "            this.cd(wd, loc.substring(0, indexOf + 1));\n",
      "            fileName = loc.substring(indexOf + 1);\n",
      "        } else {\n",
      "            fileName = loc;\n",
      "        }\n",
      "        // \u67e5\u627e\u5e76\u83b7\u53d6\u6587\u4ef6\u6240\u5904\u8def\u5f84\n",
      "        VirtualContainer vc = getContainer(wd);\n",
      "        Element element = vc.getObj(fileName);\n",
      "        return mapper.apply(element);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u8def\u5f84\u4e0b\u7684\u6587\u4ef6\n",
      "     *\n",
      "     * @param stLoc \u8def\u5f84\n",
      "     * @return \u7cfb\u7edf\u6587\u4ef6\u8def\u5f84\n",
      "     * @throws FileNotFoundException \u6587\u4ef6\u6216\u8def\u5f84\u4e0d\u5b58\u5728\n",
      "     */\n",
      "    public Path getFile(ST_Loc stLoc) throws FileNotFoundException {\n",
      "        String loc = stLoc.getLoc();\n",
      "        return getFile(loc);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u8def\u5f84\u4e0b\u7684\u6587\u4ef6\n",
      "     *\n",
      "     * @param loc \u8def\u5f84\n",
      "     * @return \u7cfb\u7edf\u6587\u4ef6\u8def\u5f84\n",
      "     * @throws FileNotFoundException \u6587\u4ef6\u6216\u8def\u5f84\u4e0d\u5b58\u5728\n",
      "     */\n",
      "    public Path getFile(String loc) throws FileNotFoundException {\n",
      "        if (loc == null || loc.trim().equals(\"\")) {\n",
      "            throw new FileNotFoundException(\"\u8def\u5f84\u4e3a\u7a7a\uff08loc\uff09\");\n",
      "        }\n",
      "        // \u67e5\u8be2\u5de5\u4f5c\u76ee\u5f55\n",
      "        LinkedList<String> wd = new LinkedList<>(this.workDir);\n",
      "        // \u6587\u4ef6\u540d\u79f0\n",
      "        String fileName;\n",
      "        int indexOf = loc.lastIndexOf('/');\n",
      "        if (indexOf != -1) {\n",
      "            // \u5207\u6362\u5de5\u4f5c\u76ee\u5f55\n",
      "            this.cd(wd, loc.substring(0, indexOf + 1));\n",
      "            fileName = loc.substring(indexOf + 1);\n",
      "        } else {\n",
      "            fileName = loc;\n",
      "        }\n",
      "        // \u67e5\u627e\u5e76\u83b7\u53d6\u6587\u4ef6\u6240\u5904\u8def\u5f84\n",
      "        VirtualContainer vc = getContainer(wd);\n",
      "        return vc.getFile(fileName);\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u901a\u8fc7\u8def\u5f84\u83b7\u53d6\u5bb9\u5668\n",
      "     *\n",
      "     * @param workDir \u8def\u5f84\u5e8f\u5217\n",
      "     * @return \u865a\u62df\u5bb9\u5668\n",
      "     * @throws FileNotFoundException \u8def\u5f84\u4e0d\u5b58\u5728\n",
      "     */\n",
      "    public VirtualContainer getContainer(LinkedList<String> workDir) throws FileNotFoundException {\n",
      "        VirtualContainer vc = ofdDir;\n",
      "        for (String item : workDir) {\n",
      "            if (item.equals(\"/\")) {\n",
      "                continue;\n",
      "            } else if (item.startsWith(\"Doc_\")) {\n",
      "                vc = vc.getContainer(item, DocDir::new);\n",
      "            } else if (item.equals(\"Signs\")) {\n",
      "                vc = vc.getContainer(item, SignsDir::new);\n",
      "            } else if (item.startsWith(\"Sign_\")) {\n",
      "                vc = vc.getContainer(item, SignDir::new);\n",
      "            } else if (item.equals(\"Pages\")) {\n",
      "                vc = vc.getContainer(item, PagesDir::new);\n",
      "            } else if (item.startsWith(\"Page_\")) {\n",
      "                vc = vc.getContainer(item, PageDir::new);\n",
      "            } else if (item.equals(\"Res\")) {\n",
      "                vc = vc.getContainer(item, ResDir::new);\n",
      "            } else if (item.startsWith(\"Temp_\")) {\n",
      "                vc = vc.getContainer(item, TempsDir::new);\n",
      "            } else {\n",
      "                vc = vc.getContainer(item, VirtualContainer::new);\n",
      "            }\n",
      "        }\n",
      "        return vc;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u6839\u636e\u8def\u5f84\u83b7\u53d6\u865a\u62df\u5bb9\u5668\u5bf9\u8c61\n",
      "     * <p>\n",
      "     * \u83b7\u53d6\u7684\u540c\u65f6\u4f1a\u7f13\u5b58\u6574\u4e2a\u5bb9\u5668\u94fe\u8def\n",
      "     *\n",
      "     * @param containerPath \u5bb9\u5668\u76ee\u5f55\n",
      "     * @return \u865a\u62df\u5bb9\u5668\n",
      "     * @throws FileNotFoundException \u8def\u5f84\u4e0d\u5b58\u5728\n",
      "     */\n",
      "    public VirtualContainer getContainer(String containerPath) throws FileNotFoundException {\n",
      "        this.save();\n",
      "        try {\n",
      "            this.cd(containerPath);\n",
      "            return getContainer(this.workDir);\n",
      "        } finally {\n",
      "            this.restore();\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public String toString() {\n",
      "        return pwd();\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package org.ofdrw.reader;\n",
      "\n",
      "import org.dom4j.DocumentException;\n",
      "import org.junit.jupiter.api.Test;\n",
      "import org.ofdrw.core.basicStructure.doc.Document;\n",
      "import org.ofdrw.core.basicStructure.ofd.OFD;\n",
      "import org.ofdrw.core.basicStructure.pageObj.Page;\n",
      "import org.ofdrw.core.basicType.ST_Loc;\n",
      "import org.ofdrw.pkg.container.DocDir;\n",
      "import org.ofdrw.pkg.container.OFDDir;\n",
      "import org.ofdrw.pkg.container.PageDir;\n",
      "\n",
      "import java.io.FileNotFoundException;\n",
      "import java.io.IOException;\n",
      "import java.nio.file.Files;\n",
      "import java.nio.file.Path;\n",
      "import java.nio.file.Paths;\n",
      "import java.util.regex.Matcher;\n",
      "import java.util.regex.Pattern;\n",
      "\n",
      "import static org.junit.jupiter.api.Assertions.*;\n",
      "\n",
      "/**\n",
      " * @author \u6743\u89c2\u5b87\n",
      " * @since 2020-04-08 21:48:36\n",
      " */\n",
      "class ResourceLocatorTest {\n",
      "    private Path src = Paths.get(\"src/test/resources/helloworld.ofd\");\n",
      "\n",
      "    @Test\n",
      "    public void toAbsolutePath() throws IOException {\n",
      "        try (OFDReader reader = new OFDReader(src)) {\n",
      "            OFDDir ofdDir = reader.getOFDDir();\n",
      "            ResourceLocator rl = new ResourceLocator(ofdDir);\n",
      "            rl.cd(\"/Doc_0/Pages/Page_0\");\n",
      "\n",
      "            String absPath = rl.toAbsolutePath(\"../../Signs/Signatures.xml\");\n",
      "            System.out.println(absPath);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void getAbsTo() throws IOException, DocumentException {\n",
      "        try (OFDReader reader = new OFDReader(src)) {\n",
      "            OFDDir ofdDir = reader.getOFDDir();\n",
      "            ResourceLocator rl = new ResourceLocator(ofdDir);\n",
      "            rl.cd(\"/Doc_0\");\n",
      "            Document document = rl.get(\"Document.xml\", Document::new);\n",
      "            ST_Loc pageLoc = document.getPages().getPageByIndex(0).getBaseLoc();\n",
      "\n",
      "            ST_Loc abs = rl.getAbsTo(pageLoc);\n",
      "            assertEquals(\"/Doc_0/Pages/Page_0/Content.xml\", abs.toString());\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void ConstructWithVC() throws IOException {\n",
      "        try (OFDReader reader = new OFDReader(src)) {\n",
      "            OFDDir ofdDir = reader.getOFDDir();\n",
      "            PageDir pageDir = ofdDir.obtainDocDefault().getPages().getByIndex(0);\n",
      "\n",
      "            ResourceLocator rl = new ResourceLocator(pageDir);\n",
      "            assertEquals(\"/Doc_0/Pages/Page_0\", rl.pwd());\n",
      "\n",
      "            rl.cd(\"/Doc_0/Res\");\n",
      "            Path file = rl.getFile(new ST_Loc(\"NotoSerifCJKsc-Regular.otf\"));\n",
      "            assertTrue(Files.exists(file));\n",
      "\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void testCd() throws IOException {\n",
      "        try (OFDReader reader = new OFDReader(src)) {\n",
      "            OFDDir ofdDir = reader.getOFDDir();\n",
      "\n",
      "            ResourceLocator rl = new ResourceLocator(ofdDir);\n",
      "            rl.cd(\"/Doc_0/Pages/\");\n",
      "            assertEquals(\"/Doc_0/Pages\", rl.pwd());\n",
      "\n",
      "            rl.restWd();\n",
      "            assertEquals(\"/\", rl.pwd());\n",
      "\n",
      "            rl.cd(\"../\");\n",
      "            assertEquals(\"/\", rl.pwd());\n",
      "\n",
      "            rl.cd(\"./Doc_0/../\");\n",
      "            assertEquals(\"/\", rl.pwd());\n",
      "\n",
      "            rl.cd(\"Doc_0/Pages/Page_0\");\n",
      "            assertEquals(\"/Doc_0/Pages/Page_0\", rl.pwd());\n",
      "\n",
      "            /*\n",
      "             * \u4fdd\u5b58\u548c\u6062\u590d\u8def\u5f84\u6d4b\u8bd5\n",
      "             */\n",
      "            rl.save();\n",
      "            rl.cd(\"/\");\n",
      "            rl.restore();\n",
      "            assertEquals(\"/Doc_0/Pages/Page_0\", rl.pwd());\n",
      "\n",
      "            /*\n",
      "             * \u591a\u6b21\u4fdd\u5b58\u6808\u6d4b\u8bd5\n",
      "             */\n",
      "            rl.save();\n",
      "            rl.cd(\"/Doc_0\");\n",
      "            rl.save();\n",
      "            rl.cd(\"Pages\");\n",
      "            assertEquals(\"/Doc_0/Pages\", rl.pwd());\n",
      "            rl.restore();\n",
      "            assertEquals(\"/Doc_0\", rl.pwd());\n",
      "            rl.restore();\n",
      "            assertEquals(\"/Doc_0/Pages/Page_0\", rl.pwd());\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void matchTest() {\n",
      "        String p = \"/Doc_0\";\n",
      "        assertTrue(ResourceLocator.PtDoc.matcher(p).matches());\n",
      "        p = \"/Doc_0/\";\n",
      "        assertFalse(ResourceLocator.PtDoc.matcher(p).matches());\n",
      "        p = \"/Doc_0/Signs\";\n",
      "        assertTrue(ResourceLocator.PtSigns.matcher(p).matches());\n",
      "        p = \"/Doc_0/Signs/Sign_9\";\n",
      "        assertTrue(ResourceLocator.PtSign.matcher(p).matches());\n",
      "        p = \"/Doc_0/Pages\";\n",
      "        assertTrue(ResourceLocator.PtPages.matcher(p).matches());\n",
      "        p = \"/Doc_0/Pages/Page_11\";\n",
      "        assertTrue(ResourceLocator.PtPage.matcher(p).matches());\n",
      "        p = \"/Doc_0/Pages/Page_09/Res\";\n",
      "        assertTrue(ResourceLocator.PtPageRes.matcher(p).matches());\n",
      "        p = \"/Doc_0/Res\";\n",
      "        assertTrue(ResourceLocator.PtDocRes.matcher(p).matches());\n",
      "        p = \"/Doc_0/Pages/Page_09/Res\";\n",
      "        Matcher m = ResourceLocator.PtPageRes.matcher(p);\n",
      "        m.find();\n",
      "        assertEquals(\"Doc_0\", m.group(1));\n",
      "        assertEquals(\"Page_09\", m.group(2));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void get() throws IOException, DocumentException {\n",
      "        assertThrows(FileNotFoundException.class, () -> {\n",
      "            try (OFDReader reader = new OFDReader(src)) {\n",
      "                OFDDir ofdDir = reader.getOFDDir();\n",
      "                ResourceLocator rl = new ResourceLocator(ofdDir);\n",
      "                OFD ofd = rl.get(ST_Loc.getInstance(\"Doc_0/OFD.xml\"), OFD::new);\n",
      "            }\n",
      "        });\n",
      "        try (OFDReader reader = new OFDReader(src)) {\n",
      "            OFDDir ofdDir = reader.getOFDDir();\n",
      "            ResourceLocator rl = new ResourceLocator(ofdDir);\n",
      "            OFD ofd = rl.get(\"OFD.xml\", OFD::new);\n",
      "            assertEquals(\"6b9c7c83cff048e7b427ef0567f3e065\", ofd.getDocBody().getDocInfo().getDocID());\n",
      "            // \u68c0\u67e5\u7f13\u5b58\u662f\u5426\u751f\u6548\n",
      "            assertEquals(ofd.getProxy(), ofdDir.getOfd().getProxy());\n",
      "            Page page = rl.get(\"/Doc_0/Pages/Page_0/Content.xml\", Page::new);\n",
      "            assertEquals(page.getProxy(),\n",
      "                    ofdDir.getDocDir(\"Doc_0\")\n",
      "                            .getPages()\n",
      "                            .getByIndex(0)\n",
      "                            .getContent()\n",
      "                            .getProxy());\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void getFile() {\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void testExist() {\n",
      "        String ofwTmp = Paths.get(\"\").toAbsolutePath().toString();\n",
      "        String pwd = \"/print/working/directory\";\n",
      "        String path = \"path/to/attachment\";\n",
      "        String fullPath = Paths.get(ofwTmp, pwd, path).toAbsolutePath().toString();\n",
      "        System.out.println(fullPath);\n",
      "    }\n",
      "}"
    ],
    "method_lines_dic": {
      "ResourceLocator::::save()": [
        93,
        98
      ],
      "ResourceLocator::::restore()": [
        107,
        115
      ],
      "ResourceLocator::::toAbsolutePath(java.lang.String)": [
        136,
        160
      ],
      "ResourceLocator::::restWd()": [
        170,
        172
      ],
      "ResourceLocator::::cd(java.lang.String)": [
        195,
        197
      ],
      "ResourceLocator::::cd(java.util.LinkedList<java.lang.String>,java.lang.String)": [
        209,
        239
      ],
      "ResourceLocator::::exist(java.lang.String)": [
        247,
        258
      ],
      "ResourceLocator::::exist(java.util.LinkedList<java.lang.String>)": [
        266,
        271
      ],
      "ResourceLocator::::dirExit(java.util.LinkedList<java.lang.String>)": [
        280,
        285
      ],
      "ResourceLocator::::pwd()": [
        295,
        297
      ],
      "ResourceLocator::::pwd(java.util.List<java.lang.String>)": [
        306,
        324
      ],
      "ResourceLocator::::getFile(java.lang.String)": [
        428,
        447
      ],
      "ResourceLocator::::getContainer(java.util.LinkedList<java.lang.String>)": [
        457,
        481
      ],
      "ResourceLocator::::getContainer(java.lang.String)": [
        492,
        500
      ],
      "ResourceLocator::::toString()": [
        502,
        505
      ]
    },
    "test_method_lines_dic": {
      "ResourceLocatorTest::::toAbsolutePath()": [
        30,
        40
      ],
      "ResourceLocatorTest::::getAbsTo()": [
        42,
        54
      ],
      "ResourceLocatorTest::::ConstructWithVC()": [
        56,
        70
      ],
      "ResourceLocatorTest::::testCd()": [
        72,
        114
      ],
      "ResourceLocatorTest::::matchTest()": [
        116,
        139
      ],
      "ResourceLocatorTest::::get()": [
        141,
        165
      ],
      "ResourceLocatorTest::::getFile()": [
        167,
        169
      ],
      "ResourceLocatorTest::::testExist()": [
        171,
        178
      ]
    },
    "reverse_method_lines_dic": {
      "93": "ResourceLocator::::save()",
      "94": "ResourceLocator::::save()",
      "95": "ResourceLocator::::save()",
      "96": "ResourceLocator::::save()",
      "97": "ResourceLocator::::save()",
      "98": "ResourceLocator::::save()",
      "107": "ResourceLocator::::restore()",
      "108": "ResourceLocator::::restore()",
      "109": "ResourceLocator::::restore()",
      "110": "ResourceLocator::::restore()",
      "111": "ResourceLocator::::restore()",
      "112": "ResourceLocator::::restore()",
      "113": "ResourceLocator::::restore()",
      "114": "ResourceLocator::::restore()",
      "115": "ResourceLocator::::restore()",
      "136": "ResourceLocator::::toAbsolutePath(java.lang.String)",
      "137": "ResourceLocator::::toAbsolutePath(java.lang.String)",
      "138": "ResourceLocator::::toAbsolutePath(java.lang.String)",
      "139": "ResourceLocator::::toAbsolutePath(java.lang.String)",
      "140": "ResourceLocator::::toAbsolutePath(java.lang.String)",
      "141": "ResourceLocator::::toAbsolutePath(java.lang.String)",
      "142": "ResourceLocator::::toAbsolutePath(java.lang.String)",
      "143": "ResourceLocator::::toAbsolutePath(java.lang.String)",
      "144": "ResourceLocator::::toAbsolutePath(java.lang.String)",
      "145": "ResourceLocator::::toAbsolutePath(java.lang.String)",
      "146": "ResourceLocator::::toAbsolutePath(java.lang.String)",
      "147": "ResourceLocator::::toAbsolutePath(java.lang.String)",
      "148": "ResourceLocator::::toAbsolutePath(java.lang.String)",
      "149": "ResourceLocator::::toAbsolutePath(java.lang.String)",
      "150": "ResourceLocator::::toAbsolutePath(java.lang.String)",
      "151": "ResourceLocator::::toAbsolutePath(java.lang.String)",
      "152": "ResourceLocator::::toAbsolutePath(java.lang.String)",
      "153": "ResourceLocator::::toAbsolutePath(java.lang.String)",
      "154": "ResourceLocator::::toAbsolutePath(java.lang.String)",
      "155": "ResourceLocator::::toAbsolutePath(java.lang.String)",
      "156": "ResourceLocator::::toAbsolutePath(java.lang.String)",
      "157": "ResourceLocator::::toAbsolutePath(java.lang.String)",
      "158": "ResourceLocator::::toAbsolutePath(java.lang.String)",
      "159": "ResourceLocator::::toAbsolutePath(java.lang.String)",
      "160": "ResourceLocator::::toAbsolutePath(java.lang.String)",
      "170": "ResourceLocator::::restWd()",
      "171": "ResourceLocator::::restWd()",
      "172": "ResourceLocator::::restWd()",
      "195": "ResourceLocator::::cd(java.lang.String)",
      "196": "ResourceLocator::::cd(java.lang.String)",
      "197": "ResourceLocator::::cd(java.lang.String)",
      "209": "ResourceLocator::::cd(java.util.LinkedList<java.lang.String>,java.lang.String)",
      "210": "ResourceLocator::::cd(java.util.LinkedList<java.lang.String>,java.lang.String)",
      "211": "ResourceLocator::::cd(java.util.LinkedList<java.lang.String>,java.lang.String)",
      "212": "ResourceLocator::::cd(java.util.LinkedList<java.lang.String>,java.lang.String)",
      "213": "ResourceLocator::::cd(java.util.LinkedList<java.lang.String>,java.lang.String)",
      "214": "ResourceLocator::::cd(java.util.LinkedList<java.lang.String>,java.lang.String)",
      "215": "ResourceLocator::::cd(java.util.LinkedList<java.lang.String>,java.lang.String)",
      "216": "ResourceLocator::::cd(java.util.LinkedList<java.lang.String>,java.lang.String)",
      "217": "ResourceLocator::::cd(java.util.LinkedList<java.lang.String>,java.lang.String)",
      "218": "ResourceLocator::::cd(java.util.LinkedList<java.lang.String>,java.lang.String)",
      "219": "ResourceLocator::::cd(java.util.LinkedList<java.lang.String>,java.lang.String)",
      "220": "ResourceLocator::::cd(java.util.LinkedList<java.lang.String>,java.lang.String)",
      "221": "ResourceLocator::::cd(java.util.LinkedList<java.lang.String>,java.lang.String)",
      "222": "ResourceLocator::::cd(java.util.LinkedList<java.lang.String>,java.lang.String)",
      "223": "ResourceLocator::::cd(java.util.LinkedList<java.lang.String>,java.lang.String)",
      "224": "ResourceLocator::::cd(java.util.LinkedList<java.lang.String>,java.lang.String)",
      "225": "ResourceLocator::::cd(java.util.LinkedList<java.lang.String>,java.lang.String)",
      "226": "ResourceLocator::::cd(java.util.LinkedList<java.lang.String>,java.lang.String)",
      "227": "ResourceLocator::::cd(java.util.LinkedList<java.lang.String>,java.lang.String)",
      "228": "ResourceLocator::::cd(java.util.LinkedList<java.lang.String>,java.lang.String)",
      "229": "ResourceLocator::::cd(java.util.LinkedList<java.lang.String>,java.lang.String)",
      "230": "ResourceLocator::::cd(java.util.LinkedList<java.lang.String>,java.lang.String)",
      "231": "ResourceLocator::::cd(java.util.LinkedList<java.lang.String>,java.lang.String)",
      "232": "ResourceLocator::::cd(java.util.LinkedList<java.lang.String>,java.lang.String)",
      "233": "ResourceLocator::::cd(java.util.LinkedList<java.lang.String>,java.lang.String)",
      "234": "ResourceLocator::::cd(java.util.LinkedList<java.lang.String>,java.lang.String)",
      "235": "ResourceLocator::::cd(java.util.LinkedList<java.lang.String>,java.lang.String)",
      "236": "ResourceLocator::::cd(java.util.LinkedList<java.lang.String>,java.lang.String)",
      "237": "ResourceLocator::::cd(java.util.LinkedList<java.lang.String>,java.lang.String)",
      "238": "ResourceLocator::::cd(java.util.LinkedList<java.lang.String>,java.lang.String)",
      "239": "ResourceLocator::::cd(java.util.LinkedList<java.lang.String>,java.lang.String)",
      "247": "ResourceLocator::::exist(java.lang.String)",
      "248": "ResourceLocator::::exist(java.lang.String)",
      "249": "ResourceLocator::::exist(java.lang.String)",
      "250": "ResourceLocator::::exist(java.lang.String)",
      "251": "ResourceLocator::::exist(java.lang.String)",
      "252": "ResourceLocator::::exist(java.lang.String)",
      "253": "ResourceLocator::::exist(java.lang.String)",
      "254": "ResourceLocator::::exist(java.lang.String)",
      "255": "ResourceLocator::::exist(java.lang.String)",
      "256": "ResourceLocator::::exist(java.lang.String)",
      "257": "ResourceLocator::::exist(java.lang.String)",
      "258": "ResourceLocator::::exist(java.lang.String)",
      "266": "ResourceLocator::::exist(java.util.LinkedList<java.lang.String>)",
      "267": "ResourceLocator::::exist(java.util.LinkedList<java.lang.String>)",
      "268": "ResourceLocator::::exist(java.util.LinkedList<java.lang.String>)",
      "269": "ResourceLocator::::exist(java.util.LinkedList<java.lang.String>)",
      "270": "ResourceLocator::::exist(java.util.LinkedList<java.lang.String>)",
      "271": "ResourceLocator::::exist(java.util.LinkedList<java.lang.String>)",
      "280": "ResourceLocator::::dirExit(java.util.LinkedList<java.lang.String>)",
      "281": "ResourceLocator::::dirExit(java.util.LinkedList<java.lang.String>)",
      "282": "ResourceLocator::::dirExit(java.util.LinkedList<java.lang.String>)",
      "283": "ResourceLocator::::dirExit(java.util.LinkedList<java.lang.String>)",
      "284": "ResourceLocator::::dirExit(java.util.LinkedList<java.lang.String>)",
      "285": "ResourceLocator::::dirExit(java.util.LinkedList<java.lang.String>)",
      "295": "ResourceLocator::::pwd()",
      "296": "ResourceLocator::::pwd()",
      "297": "ResourceLocator::::pwd()",
      "306": "ResourceLocator::::pwd(java.util.List<java.lang.String>)",
      "307": "ResourceLocator::::pwd(java.util.List<java.lang.String>)",
      "308": "ResourceLocator::::pwd(java.util.List<java.lang.String>)",
      "309": "ResourceLocator::::pwd(java.util.List<java.lang.String>)",
      "310": "ResourceLocator::::pwd(java.util.List<java.lang.String>)",
      "311": "ResourceLocator::::pwd(java.util.List<java.lang.String>)",
      "312": "ResourceLocator::::pwd(java.util.List<java.lang.String>)",
      "313": "ResourceLocator::::pwd(java.util.List<java.lang.String>)",
      "314": "ResourceLocator::::pwd(java.util.List<java.lang.String>)",
      "315": "ResourceLocator::::pwd(java.util.List<java.lang.String>)",
      "316": "ResourceLocator::::pwd(java.util.List<java.lang.String>)",
      "317": "ResourceLocator::::pwd(java.util.List<java.lang.String>)",
      "318": "ResourceLocator::::pwd(java.util.List<java.lang.String>)",
      "319": "ResourceLocator::::pwd(java.util.List<java.lang.String>)",
      "320": "ResourceLocator::::pwd(java.util.List<java.lang.String>)",
      "321": "ResourceLocator::::pwd(java.util.List<java.lang.String>)",
      "322": "ResourceLocator::::pwd(java.util.List<java.lang.String>)",
      "323": "ResourceLocator::::pwd(java.util.List<java.lang.String>)",
      "324": "ResourceLocator::::pwd(java.util.List<java.lang.String>)",
      "428": "ResourceLocator::::getFile(java.lang.String)",
      "429": "ResourceLocator::::getFile(java.lang.String)",
      "430": "ResourceLocator::::getFile(java.lang.String)",
      "431": "ResourceLocator::::getFile(java.lang.String)",
      "432": "ResourceLocator::::getFile(java.lang.String)",
      "433": "ResourceLocator::::getFile(java.lang.String)",
      "434": "ResourceLocator::::getFile(java.lang.String)",
      "435": "ResourceLocator::::getFile(java.lang.String)",
      "436": "ResourceLocator::::getFile(java.lang.String)",
      "437": "ResourceLocator::::getFile(java.lang.String)",
      "438": "ResourceLocator::::getFile(java.lang.String)",
      "439": "ResourceLocator::::getFile(java.lang.String)",
      "440": "ResourceLocator::::getFile(java.lang.String)",
      "441": "ResourceLocator::::getFile(java.lang.String)",
      "442": "ResourceLocator::::getFile(java.lang.String)",
      "443": "ResourceLocator::::getFile(java.lang.String)",
      "444": "ResourceLocator::::getFile(java.lang.String)",
      "445": "ResourceLocator::::getFile(java.lang.String)",
      "446": "ResourceLocator::::getFile(java.lang.String)",
      "447": "ResourceLocator::::getFile(java.lang.String)",
      "457": "ResourceLocator::::getContainer(java.util.LinkedList<java.lang.String>)",
      "458": "ResourceLocator::::getContainer(java.util.LinkedList<java.lang.String>)",
      "459": "ResourceLocator::::getContainer(java.util.LinkedList<java.lang.String>)",
      "460": "ResourceLocator::::getContainer(java.util.LinkedList<java.lang.String>)",
      "461": "ResourceLocator::::getContainer(java.util.LinkedList<java.lang.String>)",
      "462": "ResourceLocator::::getContainer(java.util.LinkedList<java.lang.String>)",
      "463": "ResourceLocator::::getContainer(java.util.LinkedList<java.lang.String>)",
      "464": "ResourceLocator::::getContainer(java.util.LinkedList<java.lang.String>)",
      "465": "ResourceLocator::::getContainer(java.util.LinkedList<java.lang.String>)",
      "466": "ResourceLocator::::getContainer(java.util.LinkedList<java.lang.String>)",
      "467": "ResourceLocator::::getContainer(java.util.LinkedList<java.lang.String>)",
      "468": "ResourceLocator::::getContainer(java.util.LinkedList<java.lang.String>)",
      "469": "ResourceLocator::::getContainer(java.util.LinkedList<java.lang.String>)",
      "470": "ResourceLocator::::getContainer(java.util.LinkedList<java.lang.String>)",
      "471": "ResourceLocator::::getContainer(java.util.LinkedList<java.lang.String>)",
      "472": "ResourceLocator::::getContainer(java.util.LinkedList<java.lang.String>)",
      "473": "ResourceLocator::::getContainer(java.util.LinkedList<java.lang.String>)",
      "474": "ResourceLocator::::getContainer(java.util.LinkedList<java.lang.String>)",
      "475": "ResourceLocator::::getContainer(java.util.LinkedList<java.lang.String>)",
      "476": "ResourceLocator::::getContainer(java.util.LinkedList<java.lang.String>)",
      "477": "ResourceLocator::::getContainer(java.util.LinkedList<java.lang.String>)",
      "478": "ResourceLocator::::getContainer(java.util.LinkedList<java.lang.String>)",
      "479": "ResourceLocator::::getContainer(java.util.LinkedList<java.lang.String>)",
      "480": "ResourceLocator::::getContainer(java.util.LinkedList<java.lang.String>)",
      "481": "ResourceLocator::::getContainer(java.util.LinkedList<java.lang.String>)",
      "492": "ResourceLocator::::getContainer(java.lang.String)",
      "493": "ResourceLocator::::getContainer(java.lang.String)",
      "494": "ResourceLocator::::getContainer(java.lang.String)",
      "495": "ResourceLocator::::getContainer(java.lang.String)",
      "496": "ResourceLocator::::getContainer(java.lang.String)",
      "497": "ResourceLocator::::getContainer(java.lang.String)",
      "498": "ResourceLocator::::getContainer(java.lang.String)",
      "499": "ResourceLocator::::getContainer(java.lang.String)",
      "500": "ResourceLocator::::getContainer(java.lang.String)",
      "502": "ResourceLocator::::toString()",
      "503": "ResourceLocator::::toString()",
      "504": "ResourceLocator::::toString()",
      "505": "ResourceLocator::::toString()"
    },
    "test_reverse_method_lines_dic": {
      "30": "ResourceLocatorTest::::toAbsolutePath()",
      "31": "ResourceLocatorTest::::toAbsolutePath()",
      "32": "ResourceLocatorTest::::toAbsolutePath()",
      "33": "ResourceLocatorTest::::toAbsolutePath()",
      "34": "ResourceLocatorTest::::toAbsolutePath()",
      "35": "ResourceLocatorTest::::toAbsolutePath()",
      "36": "ResourceLocatorTest::::toAbsolutePath()",
      "37": "ResourceLocatorTest::::toAbsolutePath()",
      "38": "ResourceLocatorTest::::toAbsolutePath()",
      "39": "ResourceLocatorTest::::toAbsolutePath()",
      "40": "ResourceLocatorTest::::toAbsolutePath()",
      "42": "ResourceLocatorTest::::getAbsTo()",
      "43": "ResourceLocatorTest::::getAbsTo()",
      "44": "ResourceLocatorTest::::getAbsTo()",
      "45": "ResourceLocatorTest::::getAbsTo()",
      "46": "ResourceLocatorTest::::getAbsTo()",
      "47": "ResourceLocatorTest::::getAbsTo()",
      "48": "ResourceLocatorTest::::getAbsTo()",
      "49": "ResourceLocatorTest::::getAbsTo()",
      "50": "ResourceLocatorTest::::getAbsTo()",
      "51": "ResourceLocatorTest::::getAbsTo()",
      "52": "ResourceLocatorTest::::getAbsTo()",
      "53": "ResourceLocatorTest::::getAbsTo()",
      "54": "ResourceLocatorTest::::getAbsTo()",
      "56": "ResourceLocatorTest::::ConstructWithVC()",
      "57": "ResourceLocatorTest::::ConstructWithVC()",
      "58": "ResourceLocatorTest::::ConstructWithVC()",
      "59": "ResourceLocatorTest::::ConstructWithVC()",
      "60": "ResourceLocatorTest::::ConstructWithVC()",
      "61": "ResourceLocatorTest::::ConstructWithVC()",
      "62": "ResourceLocatorTest::::ConstructWithVC()",
      "63": "ResourceLocatorTest::::ConstructWithVC()",
      "64": "ResourceLocatorTest::::ConstructWithVC()",
      "65": "ResourceLocatorTest::::ConstructWithVC()",
      "66": "ResourceLocatorTest::::ConstructWithVC()",
      "67": "ResourceLocatorTest::::ConstructWithVC()",
      "68": "ResourceLocatorTest::::ConstructWithVC()",
      "69": "ResourceLocatorTest::::ConstructWithVC()",
      "70": "ResourceLocatorTest::::ConstructWithVC()",
      "72": "ResourceLocatorTest::::testCd()",
      "73": "ResourceLocatorTest::::testCd()",
      "74": "ResourceLocatorTest::::testCd()",
      "75": "ResourceLocatorTest::::testCd()",
      "76": "ResourceLocatorTest::::testCd()",
      "77": "ResourceLocatorTest::::testCd()",
      "78": "ResourceLocatorTest::::testCd()",
      "79": "ResourceLocatorTest::::testCd()",
      "80": "ResourceLocatorTest::::testCd()",
      "81": "ResourceLocatorTest::::testCd()",
      "82": "ResourceLocatorTest::::testCd()",
      "83": "ResourceLocatorTest::::testCd()",
      "84": "ResourceLocatorTest::::testCd()",
      "85": "ResourceLocatorTest::::testCd()",
      "86": "ResourceLocatorTest::::testCd()",
      "87": "ResourceLocatorTest::::testCd()",
      "88": "ResourceLocatorTest::::testCd()",
      "89": "ResourceLocatorTest::::testCd()",
      "90": "ResourceLocatorTest::::testCd()",
      "91": "ResourceLocatorTest::::testCd()",
      "92": "ResourceLocatorTest::::testCd()",
      "93": "ResourceLocatorTest::::testCd()",
      "94": "ResourceLocatorTest::::testCd()",
      "95": "ResourceLocatorTest::::testCd()",
      "96": "ResourceLocatorTest::::testCd()",
      "97": "ResourceLocatorTest::::testCd()",
      "98": "ResourceLocatorTest::::testCd()",
      "99": "ResourceLocatorTest::::testCd()",
      "100": "ResourceLocatorTest::::testCd()",
      "101": "ResourceLocatorTest::::testCd()",
      "102": "ResourceLocatorTest::::testCd()",
      "103": "ResourceLocatorTest::::testCd()",
      "104": "ResourceLocatorTest::::testCd()",
      "105": "ResourceLocatorTest::::testCd()",
      "106": "ResourceLocatorTest::::testCd()",
      "107": "ResourceLocatorTest::::testCd()",
      "108": "ResourceLocatorTest::::testCd()",
      "109": "ResourceLocatorTest::::testCd()",
      "110": "ResourceLocatorTest::::testCd()",
      "111": "ResourceLocatorTest::::testCd()",
      "112": "ResourceLocatorTest::::testCd()",
      "113": "ResourceLocatorTest::::testCd()",
      "114": "ResourceLocatorTest::::testCd()",
      "116": "ResourceLocatorTest::::matchTest()",
      "117": "ResourceLocatorTest::::matchTest()",
      "118": "ResourceLocatorTest::::matchTest()",
      "119": "ResourceLocatorTest::::matchTest()",
      "120": "ResourceLocatorTest::::matchTest()",
      "121": "ResourceLocatorTest::::matchTest()",
      "122": "ResourceLocatorTest::::matchTest()",
      "123": "ResourceLocatorTest::::matchTest()",
      "124": "ResourceLocatorTest::::matchTest()",
      "125": "ResourceLocatorTest::::matchTest()",
      "126": "ResourceLocatorTest::::matchTest()",
      "127": "ResourceLocatorTest::::matchTest()",
      "128": "ResourceLocatorTest::::matchTest()",
      "129": "ResourceLocatorTest::::matchTest()",
      "130": "ResourceLocatorTest::::matchTest()",
      "131": "ResourceLocatorTest::::matchTest()",
      "132": "ResourceLocatorTest::::matchTest()",
      "133": "ResourceLocatorTest::::matchTest()",
      "134": "ResourceLocatorTest::::matchTest()",
      "135": "ResourceLocatorTest::::matchTest()",
      "136": "ResourceLocatorTest::::matchTest()",
      "137": "ResourceLocatorTest::::matchTest()",
      "138": "ResourceLocatorTest::::matchTest()",
      "139": "ResourceLocatorTest::::matchTest()",
      "141": "ResourceLocatorTest::::get()",
      "142": "ResourceLocatorTest::::get()",
      "143": "ResourceLocatorTest::::get()",
      "144": "ResourceLocatorTest::::get()",
      "145": "ResourceLocatorTest::::get()",
      "146": "ResourceLocatorTest::::get()",
      "147": "ResourceLocatorTest::::get()",
      "148": "ResourceLocatorTest::::get()",
      "149": "ResourceLocatorTest::::get()",
      "150": "ResourceLocatorTest::::get()",
      "151": "ResourceLocatorTest::::get()",
      "152": "ResourceLocatorTest::::get()",
      "153": "ResourceLocatorTest::::get()",
      "154": "ResourceLocatorTest::::get()",
      "155": "ResourceLocatorTest::::get()",
      "156": "ResourceLocatorTest::::get()",
      "157": "ResourceLocatorTest::::get()",
      "158": "ResourceLocatorTest::::get()",
      "159": "ResourceLocatorTest::::get()",
      "160": "ResourceLocatorTest::::get()",
      "161": "ResourceLocatorTest::::get()",
      "162": "ResourceLocatorTest::::get()",
      "163": "ResourceLocatorTest::::get()",
      "164": "ResourceLocatorTest::::get()",
      "165": "ResourceLocatorTest::::get()",
      "167": "ResourceLocatorTest::::getFile()",
      "168": "ResourceLocatorTest::::getFile()",
      "169": "ResourceLocatorTest::::getFile()",
      "171": "ResourceLocatorTest::::testExist()",
      "172": "ResourceLocatorTest::::testExist()",
      "173": "ResourceLocatorTest::::testExist()",
      "174": "ResourceLocatorTest::::testExist()",
      "175": "ResourceLocatorTest::::testExist()",
      "176": "ResourceLocatorTest::::testExist()",
      "177": "ResourceLocatorTest::::testExist()",
      "178": "ResourceLocatorTest::::testExist()"
    },
    "tests": [
      {
        "test_lines": [
          30,
          40
        ],
        "covered_lines": [
          30,
          31,
          32,
          33,
          34,
          35,
          36,
          48,
          56,
          62,
          63,
          65,
          66,
          94,
          96,
          97,
          108,
          109,
          111,
          112,
          114,
          137,
          140,
          141,
          142,
          143,
          145,
          146,
          147,
          149,
          150,
          151,
          152,
          156,
          159,
          196,
          210,
          211,
          213,
          214,
          220,
          221,
          222,
          223,
          225,
          226,
          227,
          228,
          229,
          230,
          232,
          238,
          307,
          310,
          311,
          312,
          313,
          314,
          317,
          319,
          320,
          323,
          374,
          388,
          392,
          395,
          396,
          398,
          399,
          401,
          404,
          405,
          406,
          458,
          459,
          460,
          461,
          462,
          463,
          479,
          480
        ]
      },
      {
        "test_lines": [
          42,
          54
        ],
        "covered_lines": [
          30,
          31,
          32,
          33,
          34,
          35,
          36,
          48,
          56,
          62,
          63,
          65,
          66,
          94,
          96,
          97,
          108,
          109,
          111,
          112,
          114,
          137,
          140,
          141,
          142,
          143,
          145,
          146,
          147,
          149,
          150,
          156,
          159,
          196,
          210,
          211,
          213,
          214,
          220,
          221,
          222,
          223,
          225,
          226,
          227,
          228,
          229,
          230,
          232,
          238,
          307,
          310,
          311,
          312,
          313,
          314,
          317,
          319,
          320,
          323,
          334,
          337,
          338,
          343,
          346,
          347,
          349,
          350,
          354,
          355,
          358,
          360,
          374,
          388,
          392,
          395,
          396,
          398,
          399,
          401,
          404,
          405,
          406,
          458,
          459,
          460,
          461,
          462,
          463,
          479,
          480
        ]
      },
      {
        "test_lines": [
          72,
          114
        ],
        "covered_lines": [
          30,
          31,
          32,
          33,
          34,
          35,
          36,
          48,
          56,
          62,
          63,
          65,
          66,
          94,
          96,
          97,
          108,
          109,
          111,
          112,
          114,
          137,
          140,
          141,
          142,
          143,
          145,
          146,
          147,
          149,
          150,
          151,
          152,
          153,
          156,
          159,
          171,
          196,
          210,
          211,
          213,
          214,
          215,
          216,
          217,
          220,
          221,
          222,
          223,
          225,
          226,
          227,
          228,
          229,
          230,
          232,
          238,
          296,
          307,
          308,
          310,
          311,
          312,
          313,
          314,
          317,
          319,
          320,
          323,
          374,
          388,
          392,
          395,
          396,
          398,
          399,
          401,
          404,
          405,
          406,
          458,
          459,
          460,
          461,
          462,
          463,
          479,
          480
        ]
      },
      {
        "test_lines": [
          116,
          139
        ],
        "covered_lines": [
          30,
          31,
          32,
          33,
          34,
          35,
          36
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/ofdrw/ofdrw-reader/src/main/java/org/ofdrw/reader/OFDReader.java": {
    "class_content": [
      "package org.ofdrw.reader;\n",
      "\n",
      "import org.apache.commons.io.FileUtils;\n",
      "import org.dom4j.DocumentException;\n",
      "import org.ofdrw.core.OFDElement;\n",
      "import org.ofdrw.core.annotation.Annotations;\n",
      "import org.ofdrw.core.annotation.pageannot.AnnPage;\n",
      "import org.ofdrw.core.annotation.pageannot.PageAnnot;\n",
      "import org.ofdrw.core.attachment.Attachments;\n",
      "import org.ofdrw.core.attachment.CT_Attachment;\n",
      "import org.ofdrw.core.basicStructure.doc.CT_CommonData;\n",
      "import org.ofdrw.core.basicStructure.doc.CT_PageArea;\n",
      "import org.ofdrw.core.basicStructure.doc.Document;\n",
      "import org.ofdrw.core.basicStructure.ofd.DocBody;\n",
      "import org.ofdrw.core.basicStructure.pageObj.CT_TemplatePage;\n",
      "import org.ofdrw.core.basicStructure.pageObj.Page;\n",
      "import org.ofdrw.core.basicStructure.pageObj.Template;\n",
      "import org.ofdrw.core.basicStructure.pageObj.layer.Type;\n",
      "import org.ofdrw.core.basicStructure.pageTree.Pages;\n",
      "import org.ofdrw.core.basicType.ST_Box;\n",
      "import org.ofdrw.core.basicType.ST_ID;\n",
      "import org.ofdrw.core.basicType.ST_Loc;\n",
      "import org.ofdrw.core.signatures.Signature;\n",
      "import org.ofdrw.core.signatures.Signatures;\n",
      "import org.ofdrw.gm.ses.parse.SESVersionHolder;\n",
      "import org.ofdrw.gm.ses.parse.VersionParser;\n",
      "import org.ofdrw.pkg.container.DocDir;\n",
      "import org.ofdrw.pkg.container.OFDDir;\n",
      "import org.ofdrw.reader.model.AnnotionEntity;\n",
      "import org.ofdrw.reader.model.StampAnnotEntity;\n",
      "import org.ofdrw.reader.model.TemplatePageEntity;\n",
      "\n",
      "import java.io.*;\n",
      "import java.nio.file.Files;\n",
      "import java.nio.file.Path;\n",
      "import java.nio.file.Paths;\n",
      "import java.util.ArrayList;\n",
      "import java.util.Collections;\n",
      "import java.util.List;\n",
      "\n",
      "/**\n",
      " * OFD\u89e3\u6790\u5668\n",
      " *\n",
      " * @author \u6743\u89c2\u5b87\n",
      " * @since 2020-04-01 21:39:25\n",
      " */\n",
      "public class OFDReader implements Closeable {\n",
      "\n",
      "    /**\n",
      "     * Reader\u5de5\u4f5c\u8fc7\u7a0b\u4e2d\u7684\u5de5\u4f5c\u76ee\u5f55\n",
      "     * <p>\n",
      "     * \u7528\u4e8e\u5b58\u653e\u89e3\u538b\u540e\u7684OFD\u6587\u6863\u5bb9\u5668\u5185\u5bb9\n",
      "     */\n",
      "    private Path workDir;\n",
      "\n",
      "    /**\n",
      "     * OFD\u865a\u62df\u5bb9\u5668\u5bf9\u8c61\n",
      "     */\n",
      "    private OFDDir ofdDir;\n",
      "\n",
      "    /**\n",
      "     * \u8d44\u6e90\u5b9a\u4f4d\u5668\n",
      "     * <p>\n",
      "     * \u89e3\u6790\u8def\u5f84\u83b7\u53d6\u8d44\u6e90\n",
      "     */\n",
      "    protected ResourceLocator rl;\n",
      "\n",
      "    /**\n",
      "     * \u662f\u5426\u5df2\u7ecf\u5173\u95ed\u6587\u6863\n",
      "     */\n",
      "    private boolean closed = false;\n",
      "\n",
      "    /**\n",
      "     * \u8d44\u6e90\u52a0\u8f7d\u5668\n",
      "     */\n",
      "    private ResourceManage resMgt;\n",
      "\n",
      "    private OFDReader() {\n",
      "    }\n",
      "\n",
      "    public Path getWorkDir() {\n",
      "        return workDir;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e OFD\u89e3\u538b\u540e\u6700\u5927\u5360\u7528\u6587\u4ef6\u5927\u5c0f\n",
      "     * <p>\n",
      "     * \u9ed8\u8ba4\u503c\uff1a 100MB\n",
      "     *\n",
      "     * @param size \u89e3\u538b\u6587\u4ef6\u5927\u5c0f\uff0c\u5355\u4f4d\u5b57\u8282\uff08Byte\uff09\n",
      "     */\n",
      "    public static void setZipFileMaxSize(long size) {\n",
      "        ZipUtil.setMaxSize(size);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u6784\u9020\u4e00\u4e2a OFDReader\n",
      "     *\n",
      "     * @param ofdFile OFD\u6587\u4ef6\n",
      "     * @throws IOException OFD\u6587\u4ef6\u64cd\u4f5cIO\u5f02\u5e38\n",
      "     */\n",
      "    public OFDReader(Path ofdFile) throws IOException {\n",
      "        if (ofdFile == null || Files.notExists(ofdFile)) {\n",
      "            throw new IllegalArgumentException(\"\u6587\u4ef6\u4f4d\u7f6e(ofdFile)\u4e0d\u6b63\u786e\");\n",
      "        }\n",
      "        workDir = Files.createTempDirectory(\"ofd-tmp-\");\n",
      "        // \u89e3\u538b\u6587\u6863\uff0c\u5230\u4e34\u65f6\u7684\u5de5\u4f5c\u76ee\u5f55\n",
      "        ZipUtil.unZipFileByApacheCommonCompress(ofdFile.toFile(), workDir.toAbsolutePath().toString() + File.separator);\n",
      "        ofdDir = new OFDDir(workDir);\n",
      "        // \u521b\u5efa\u8d44\u6e90\u5b9a\u4f4d\u5668\n",
      "        rl = new ResourceLocator(ofdDir);\n",
      "        resMgt = new ResourceManage(this);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u6784\u9020\u4e00\u4e2a OFDReader\n",
      "     *\n",
      "     * @param ofdFileLoc OFD\u6587\u4ef6\u4f4d\u7f6e\uff0c\u4f8b\u5982\uff1a\u201d/home/user/myofd.ofd\u201c\n",
      "     * @throws IOException OFD\u6587\u4ef6\u64cd\u4f5cIO\u5f02\u5e38\n",
      "     */\n",
      "    public OFDReader(String ofdFileLoc) throws IOException {\n",
      "        this(Paths.get(ofdFileLoc));\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u6784\u9020\u4e00\u4e2a OFDReader\n",
      "     *\n",
      "     * @param stream OFD\u6587\u4ef6\u8f93\u5165\u6d41\uff0c\u6d41\u7531\u8c03\u7528\u8005\u8d1f\u8d23\u5173\u95ed\u3002\n",
      "     * @throws IOException OFD\u6587\u4ef6\u64cd\u4f5cIO\u5f02\u5e38\n",
      "     */\n",
      "    public OFDReader(InputStream stream) throws IOException {\n",
      "        if (stream == null) {\n",
      "            throw new IllegalArgumentException(\"\u6587\u4ef6\u8f93\u5165\u6d41(stream)\u4e0d\u6b63\u786e\");\n",
      "        }\n",
      "        workDir = Files.createTempDirectory(\"ofd-tmp-\");\n",
      "        // \u89e3\u538b\u6587\u6863\uff0c\u5230\u4e34\u65f6\u7684\u5de5\u4f5c\u76ee\u5f55\n",
      "        ZipUtil.unZipFileByApacheCommonCompress(stream, workDir.toAbsolutePath().toString() + File.separator);\n",
      "        ofdDir = new OFDDir(workDir);\n",
      "        // \u521b\u5efa\u8d44\u6e90\u5b9a\u4f4d\u5668\n",
      "        rl = new ResourceLocator(ofdDir);\n",
      "        resMgt = new ResourceManage(this);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u56e0\u4e00\u4e9bofd\u6587\u4ef6\u65e0\u6cd5\u4f7f\u7528ZipUtil\u89e3\u538b\u7f29\uff0c\u53ef\u4ee5\u8ba9\u7528\u6237\u81ea\u5df1\u5728\u5916\u9762\u89e3\u538b\u7f29\u597d\u540e\uff0c\u4f20\u5165\u6839\u76ee\u5f55\u521b\u5efa\n",
      "     * \u4f8b\u5982\u7528\u6237\u53ef\u4ee5\u4f7f\u7528unzip\u6216\u8005unar\u7b49\u547d\u4ee4\u884c\u65b9\u5f0f\u89e3\u538b\u7f29\uff0c\u56e0\u6b64\u901a\u8fc7\u53c2\u6570\u63a7\u5236\u662f\u5426\u5220\u9664\u76ee\u5f55\u3002\n",
      "     *\n",
      "     * @param unzippedPathRoot \u5df2\u7ecf\u89e3\u538b\u7684OFD\u6839\u76ee\u5f55\u4f4d\u7f6e\n",
      "     * @param deleteOnClose    \u9000\u51fa\u65f6\u662f\u5426\u5220\u9664 unzippedPathRoot \u6587\u4ef6\uff0c true - \u9000\u51fa\u65f6\u5220\u9664\uff1bfalse - \u4e0d\u5220\u9664\n",
      "     */\n",
      "    public OFDReader(String unzippedPathRoot, boolean deleteOnClose) {\n",
      "        workDir = Paths.get(unzippedPathRoot);\n",
      "        if (Files.notExists(workDir) || !Files.isDirectory(workDir)) {\n",
      "            throw new IllegalArgumentException(\"\u6587\u4ef6\u4f4d\u7f6e(unzippedPathRoot)\u4e0d\u6b63\u786e\");\n",
      "        }\n",
      "        ofdDir = new OFDDir(workDir);\n",
      "        // \u521b\u5efa\u8d44\u6e90\u5b9a\u4f4d\u5668\n",
      "        rl = new ResourceLocator(ofdDir);\n",
      "        // \u901a\u8fc7\u53c2\u6570\u6765\u6307\u5b9a\u662f\u5426\u5220\u9664\u5916\u90e8\u6587\u6863\uff0c\u4fdd\u8bc1\u8c01\u521b\u5efa\u7684\u76ee\u5f55\u8c01\u8d1f\u8d23\u8fd9\u4e2a\u539f\u5219\n",
      "        if (!deleteOnClose) {\n",
      "            closed = true;\n",
      "        }\n",
      "        resMgt = new ResourceManage(this);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u6587\u6863\u865a\u62df\u5bb9\u5668\n",
      "     *\n",
      "     * @return OFD\u6587\u6863\u865a\u62df\u5bb9\u5668\n",
      "     */\n",
      "    public OFDDir getOFDDir() {\n",
      "        return ofdDir;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u9ed8\u8ba4\u6587\u6863Doc_0\u4e2d\u7684\u7b7e\u540d\u5217\u8868\u6587\u4ef6\u7684\u7edd\u5bf9\u8def\u5f84\n",
      "     *\n",
      "     * @return \u7b7e\u540d\u5217\u8868\u6587\u4ef6\u7edd\u5bf9\u8def\u5f84\n",
      "     * @throws BadOFDException \u9519\u8befOFD\u7ed3\u6784\u548c\u6587\u4ef6\u683c\u5f0f\u5bfc\u81f4\u7ed3\u6784\u65e0\u6cd5\u89e3\u6790\n",
      "     */\n",
      "    public ST_Loc getDefaultDocSignaturesPath() {\n",
      "        try {\n",
      "            rl.save();\n",
      "            rl.cd(\"/\");\n",
      "            DocBody docBody = ofdDir.getOfd().getDocBody();\n",
      "            // \u7b7e\u540d\u5217\u8868\u6587\u4ef6\u8def\u5f84\n",
      "            ST_Loc loc = docBody.getSignatures();\n",
      "            if (loc == null) {\n",
      "                return null;\n",
      "            }\n",
      "            // \u8f6c\u5316\u4e3a\u7edd\u5bf9\u8def\u5f84\n",
      "            String signListFileAbsPath = rl.toAbsolutePath(loc);\n",
      "            return ST_Loc.getInstance(signListFileAbsPath);\n",
      "        } catch (FileNotFoundException | DocumentException e) {\n",
      "            throw new BadOFDException(\"\u9519\u8befOFD\u7ed3\u6784\u548c\u6587\u4ef6\u683c\u5f0f\", e);\n",
      "        } finally {\n",
      "            rl.restore();\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u9ed8\u8ba4\u7684\u7b7e\u540d\u5217\u8868\u5bf9\u8c61\n",
      "     * <p>\n",
      "     * \u5982\u679c\u6587\u4ef6\u4e0d\u5b58\u5728\u5219\u8fd4\u8fd8null\n",
      "     *\n",
      "     * @return \u7b7e\u540d\u5217\u8868\u5bf9\u8c61\n",
      "     */\n",
      "    public Signatures getDefaultSignatures() {\n",
      "        ST_Loc signaturesLoc = getDefaultDocSignaturesPath();\n",
      "        // \u6587\u4ef6\u4e2d\u4e0d\u5b58\u5728 Signatures.xml \u6216\u662f \u8def\u57fa\u4e0a\u7684\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u90fd\u8ba4\u4e3a\u6587\u4ef6\u4e0d\u5b58\u5728\n",
      "        if (signaturesLoc == null || !(rl.exist(signaturesLoc.toString()))) {\n",
      "            return null;\n",
      "//            throw new BadOFDException(\"OFD\u6587\u6863\u4e2d\u4e0d\u5b58\u5728Signatures.xml\");\n",
      "        }\n",
      "        // \u83b7\u53d6\u7b7e\u540d\u5217\u8868\u5bf9\u8c61\n",
      "        try {\n",
      "            return rl.get(signaturesLoc, Signatures::new);\n",
      "        } catch (FileNotFoundException | DocumentException e) {\n",
      "            throw new BadOFDException(\"\u9519\u8befOFD\u7ed3\u6784\u548c\u6587\u4ef6\u683c\u5f0f\", e);\n",
      "        }\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u6587\u6863\u662f\u5426\u5305\u542b\u6570\u5b57\u7b7e\u540d\n",
      "     *\n",
      "     * @return true - \u542b\u6709\uff1bfalse - \u4e0d\u542b\uff1b\n",
      "     */\n",
      "    public boolean hasSignature() {\n",
      "        DocBody docBody = null;\n",
      "        try {\n",
      "            docBody = ofdDir.getOfd().getDocBody();\n",
      "            ST_Loc signaturesLoc = docBody.getSignatures();\n",
      "            return signaturesLoc != null;\n",
      "        } catch (FileNotFoundException | DocumentException e) {\n",
      "            throw new BadOFDException(\"\u9519\u8befOFD\u7ed3\u6784\u548c\u6587\u4ef6\u683c\u5f0f\", e);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u6ce8\u89e3\u5217\u8868\u6587\u4ef6\u5bf9\u8c61\n",
      "     * <p>\n",
      "     * \u5982\u679c\u6587\u6863\u4e2d\u6ca1\u6709\u6ce8\u91ca\u6587\u4ef6\uff0c\u90a3\u4e48\u8fd4\u8fd8null\n",
      "     *\n",
      "     * @return \u6ce8\u89e3\u5217\u8868\u6587\u4ef6\u5bf9\u8c61\u6216null\n",
      "     */\n",
      "    public Annotations getAnnotations() {\n",
      "        try {\n",
      "            // \u8def\u5f84\u89e3\u6790\u5bf9\u8c61\u83b7\u53d6\u5e76\u7f13\u5b58\u865a\u62df\u5bb9\u5668\n",
      "            Document document = cdDefaultDoc();\n",
      "\n",
      "            ST_Loc annotations = document.getAnnotations();\n",
      "            if (annotations == null || !(rl.exist(annotations.toString()))) {\n",
      "                return null;\n",
      "            }\n",
      "            return rl.get(annotations, Annotations::new);\n",
      "        } catch (FileNotFoundException | DocumentException e) {\n",
      "            throw new BadOFDException(\"OFD\u89e3\u6790\u5931\u8d25\uff0c\u539f\u56e0:\" + e.getMessage(), e);\n",
      "        } finally {\n",
      "            // \u8fd8\u539f\u539f\u6709\u5de5\u4f5c\u533a\n",
      "            rl.restore();\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6OFD\u542b\u6709\u7684\u603b\u9875\u9762\u6570\u91cf\n",
      "     *\n",
      "     * @return \u603b\u9875\u6570\n",
      "     */\n",
      "    public int getNumberOfPages() {\n",
      "        try {\n",
      "            // \u8def\u5f84\u89e3\u6790\u5bf9\u8c61\u83b7\u53d6\u5e76\u7f13\u5b58\u865a\u62df\u5bb9\u5668\n",
      "            Document document = cdDefaultDoc();\n",
      "            Pages pages = document.getPages();\n",
      "            return pages.getSize();\n",
      "        } catch (FileNotFoundException | DocumentException e) {\n",
      "            throw new BadOFDException(\"OFD\u89e3\u6790\u5931\u8d25\uff0c\u539f\u56e0:\" + e.getMessage(), e);\n",
      "        } finally {\n",
      "            // \u8fd8\u539f\u539f\u6709\u5de5\u4f5c\u533a\n",
      "            rl.restore();\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u9875\u9762\u4fe1\u606f\n",
      "     *\n",
      "     * @param pageNum \u9875\u7801\uff0c\u4ece1\u5f00\u59cb\n",
      "     * @return \u9875\u9762\u4fe1\u606f\n",
      "     */\n",
      "    public PageInfo getPageInfo(int pageNum) {\n",
      "        if (pageNum <= 0) {\n",
      "            throw new NumberFormatException(\"\u9875\u7801(pageNum)\u4e0d\u80fd\u5c0f\u4e8e0\");\n",
      "        }\n",
      "        try {\n",
      "            rl.save();\n",
      "            int index = pageNum - 1;\n",
      "            // \u8def\u5f84\u89e3\u6790\u5bf9\u8c61\u83b7\u53d6\u5e76\u7f13\u5b58\u865a\u62df\u5bb9\u5668\n",
      "            Document document = cdDefaultDoc();\n",
      "            Pages pages = document.getPages();\n",
      "            List<org.ofdrw.core.basicStructure.pageTree.Page> pageList = pages.getPages();\n",
      "            if (index >= pageList.size()) {\n",
      "                throw new NumberFormatException(pageNum + \"\u8d85\u8fc7\u6700\u5927\u9875\u7801:\" + pageList.size());\n",
      "            }\n",
      "            // \u83b7\u53d6\u9875\u9762\u7684\u8def\u5f84\n",
      "            ST_Loc pageLoc = pageList.get(index).getBaseLoc();\n",
      "\n",
      "            Page obj = rl.get(pageLoc, Page::new);\n",
      "            // \u83b7\u53d6\u9875\u9762\u7684\u5bb9\u5668\u7edd\u5bf9\u8def\u5f84\n",
      "            pageLoc = rl.getAbsTo(pageLoc);\n",
      "            ST_Box pageSize = getPageSize(obj);\n",
      "\n",
      "            // \u52a0\u8f7d\u6a21\u677f\n",
      "            ArrayList<TemplatePageEntity> templatePages = new ArrayList<>();\n",
      "            for (Template item : obj.getTemplates()) {\n",
      "                TemplatePageEntity template = getTemplate(item.getTemplateID().toString());\n",
      "                Type type = Type.getInstance(item.attributeValue(\"ZOrder\"));\n",
      "                template.setOrder(type);\n",
      "                templatePages.add(template);\n",
      "            }\n",
      "\n",
      "            // Page_N \u6570\u7ec4\n",
      "            int n = index;\n",
      "            String pageNName = new ST_Loc(pageLoc.parent()).getFileName().toLowerCase();\n",
      "            if (pageNName.matches(\"page_\\\\d+\")) {\n",
      "                try {\n",
      "                    n = Integer.parseInt(pageNName.replace(\"page_\", \"\"));\n",
      "                } catch (NumberFormatException e) {\n",
      "                    // ignore\n",
      "                }\n",
      "            }\n",
      "\n",
      "            return new PageInfo()\n",
      "                    .setIndex(pageNum)\n",
      "                    .setId(pageList.get(index).getID())\n",
      "                    .setObj(obj)\n",
      "                    .setSize(pageSize.clone())\n",
      "                    .setPageAbsLoc(pageLoc)\n",
      "                    .setTemplates(templatePages)\n",
      "                    .setPageN(n);\n",
      "        } catch (FileNotFoundException | DocumentException e) {\n",
      "\n",
      "            throw new RuntimeException(\"OFD\u89e3\u6790\u5931\u8d25\uff0c\u539f\u56e0:\" + e.getMessage(), e);\n",
      "        } finally {\n",
      "            // \u8fd8\u539f\u539f\u6709\u5de5\u4f5c\u533a\n",
      "            rl.restore();\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6 \u9875\u9762\u4fe1\u606f\u96c6\u5408\n",
      "     *\n",
      "     * @return \u9875\u9762\u4fe1\u606f\u96c6\u5408\n",
      "     */\n",
      "    public List<PageInfo> getPageList() {\n",
      "        // \u83b7\u53d6\u603b\u9875\u7801\u6570\n",
      "        final int numberOfPages = getNumberOfPages();\n",
      "        List<PageInfo> res = new ArrayList<>(numberOfPages);\n",
      "        for (int i = 0; i < numberOfPages; i++) {\n",
      "            PageInfo pageInfo = getPageInfo(i + 1);\n",
      "            res.add(pageInfo);\n",
      "        }\n",
      "        return res;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u89e3\u6790\u9875\u9762\u6a21\u677f\u5bf9\u8c61\n",
      "     *\n",
      "     * @param id \u6a21\u677fID\n",
      "     * @return \u6a21\u677f\u5b9e\u4f53\uff0c\u5982\u679c\u6a21\u677f\u4e0d\u5b58\u5728\u8fd4\u8fd8null\n",
      "     */\n",
      "    public TemplatePageEntity getTemplate(String id) {\n",
      "        if (id == null || id.trim().length() == 0) {\n",
      "            return null;\n",
      "        }\n",
      "        try {\n",
      "            final Document document = cdDefaultDoc();\n",
      "            final CT_CommonData commonData = document.getCommonData();\n",
      "            TemplatePageEntity res = null;\n",
      "            for (CT_TemplatePage item : commonData.getTemplatePages()) {\n",
      "                String itemId = item.getID().toString();\n",
      "                if (id.equals(itemId)) {\n",
      "                    ST_Loc loc = item.getBaseLoc();\n",
      "                    if (loc == null) {\n",
      "                        break;\n",
      "                    }\n",
      "                    // \u52a0\u8f7d\u6a21\u677f\u5185\u5bb9\n",
      "                    Page page = rl.get(loc, Page::new);\n",
      "                    res = new TemplatePageEntity(item, page);\n",
      "                    break;\n",
      "                }\n",
      "            }\n",
      "            return res;\n",
      "        } catch (DocumentException | FileNotFoundException e) {\n",
      "            return null;\n",
      "        } finally {\n",
      "            rl.restore();\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u5207\u6362\u76ee\u5f55\u5230\u6307\u5b9a\u7684\u6587\u6863\u4e0b\n",
      "     * <p>\n",
      "     * \u8be5\u64cd\u4f5c\u5c06\u4f1a\u5bfc\u81f4\u8d44\u6e90\u52a0\u8f7d\u5668\u53d8\u66f4\u76ee\u5f55\n",
      "     * <p>\n",
      "     * \u5982\u679c\u9700\u8981\u6062\u590d\u88ab\u5207\u6362\u7684\u76ee\u5f55\u8bf7\u4e3b\u52a8\u5728\u5916\u90e8\u8c03\u7528restore\n",
      "     *\n",
      "     * @param numOfDoc \u6587\u6863\u5e8f\u53f7\n",
      "     * @return \u6587\u6863\u5bf9\u8c61\n",
      "     * @throws DocumentException     \u6587\u6863\u89e3\u6790\u5f02\u5e38\n",
      "     * @throws FileNotFoundException Document.xml\u6587\u6863\u4e0d\u5b58\u5728\n",
      "     */\n",
      "    public Document cdDoc(int numOfDoc) throws DocumentException, FileNotFoundException {\n",
      "        rl.save();\n",
      "        rl.cd(\"/\");\n",
      "        DocBody docBody = ofdDir.getOfd().getDocBody(numOfDoc);\n",
      "        ST_Loc docRoot = docBody.getDocRoot();\n",
      "        final Document document = rl.get(docRoot, Document::new);\n",
      "        // \u8def\u5f84\u89e3\u6790\u5bf9\u8c61\u83b7\u53d6\u5e76\u7f13\u5b58\u865a\u62df\u5bb9\u5668\n",
      "        rl.cd(docRoot.parent());\n",
      "        return document;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u6587\u6863\u5bf9\u8c61\n",
      "     *\n",
      "     * @param numOfDoc \u6587\u6863\u5e8f\u53f7\n",
      "     * @return \u6587\u6863\u5bf9\u8c61\n",
      "     * @throws DocumentException     \u6587\u6863\u89e3\u6790\u5f02\u5e38\n",
      "     * @throws FileNotFoundException Document.xml\u6587\u6863\u4e0d\u5b58\u5728\n",
      "     */\n",
      "    public Document getDoc(int numOfDoc) throws DocumentException, FileNotFoundException {\n",
      "        rl.save();\n",
      "        try {\n",
      "            rl.cd(\"/\");\n",
      "            DocBody docBody = ofdDir.getOfd().getDocBody(numOfDoc);\n",
      "            ST_Loc docRoot = docBody.getDocRoot();\n",
      "            return rl.get(docRoot, Document::new);\n",
      "        } finally {\n",
      "            rl.restore();\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u5207\u6362\u76ee\u5f55\u5230\u9ed8\u8ba4\u7684\u6587\u6863\u76ee\u5f55\u4e0b\u4e0b\n",
      "     * <p>\n",
      "     * \u8be5\u64cd\u4f5c\u5c06\u4f1a\u5bfc\u81f4\u8d44\u6e90\u52a0\u8f7d\u5668\u53d8\u66f4\u76ee\u5f55\n",
      "     * <p>\n",
      "     * \u5982\u679c\u9700\u8981\u6062\u590d\u88ab\u5207\u6362\u7684\u76ee\u5f55\u8bf7\u4e3b\u52a8\u5728\u5916\u90e8\u8c03\u7528restore\n",
      "     *\n",
      "     * @return \u6587\u6863\u5bf9\u8c61\n",
      "     * @throws DocumentException     \u6587\u6863\u89e3\u6790\u5f02\u5e38\n",
      "     * @throws FileNotFoundException Document.xml\u6587\u6863\u4e0d\u5b58\u5728\n",
      "     */\n",
      "    public Document cdDefaultDoc() throws DocumentException, FileNotFoundException {\n",
      "        return cdDoc(0);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u9875\u9762\u7269\u7406\u5927\u5c0f\n",
      "     * <p>\n",
      "     * \u5982\u679c\u9875\u9762\u6ca1\u6709\u5b9a\u4e49\u9875\u9762\u533a\u57df\uff0c\u5219\u4f7f\u7528\u6587\u4ef6 CommonData\u4e2d\u7684\u5b9a\u4e49\n",
      "     *\n",
      "     * @param page \u9875\u9762\u5bf9\u8c61\uff0cnull \u8868\u793a\u83b7\u53d6\u9ed8\u8ba4\u7269\u7406\u9875\u9762\u5927\u5c0f\u3002\n",
      "     * @return \u9875\u9762\u7269\u7406\u5927\u5c0f\n",
      "     */\n",
      "    public ST_Box getPageSize(Page page) {\n",
      "        CT_PageArea pageArea = getPageArea(page);\n",
      "        if (pageArea == null) {\n",
      "            // \u627e\u4e0d\u5230\u5c31\u8fd4\u56de A4\n",
      "            return new ST_Box(0, 0, 210d, 297d);\n",
      "        }\n",
      "        return pageArea.getBox();\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6 \u9875\u9762\u533a\u57df\n",
      "     *\n",
      "     * @param num \u9875\u7801\uff0c\u4ece1\u8d77\uff0c\u82e5\u9875\u7801\u5b58\u5728\u6216\u8d85\u8fc7\u6700\u5927\u6700\u5c0f\u9875\u7801\u5219\u8fd4\u8fd8\u9ed8\u8ba4\u9875\u9762\u533a\u57df\u3002\n",
      "     * @return \u9875\u9762\u533a\u57df\n",
      "     */\n",
      "    public CT_PageArea getPageArea(int num) {\n",
      "        final Page page = getPage(num);\n",
      "        return getPageArea(page);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u9875\u9762\u7269\u7406\u5927\u5c0f\n",
      "     *\n",
      "     * @param num \u9875\u7801\uff0c\u4ece1\u8d77\uff0c\u5f53\u9875\u7801\u4e0d\u5b58\u5728\u65f6\u8fd4\u56de\u6587\u6863\u4e2d\u7684\u9ed8\u8ba4 \u9875\u9762\u7269\u7406\u5927\u5c0f\u3002\n",
      "     * @return \u9875\u9762\u7269\u7406\u5c3a\u5bf8\n",
      "     */\n",
      "    public ST_Box getPageSize(int num) {\n",
      "        final Page page = getPage(num);\n",
      "        return getPageSize(page);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6 \u9875\u9762\u533a\u57df\n",
      "     *\n",
      "     * @param page \u9875\u9762\u5bf9\u8c61\uff0c\u82e5\u4e3anull \u5219\u8fd4\u56de\u6587\u6863\u9ed8\u8ba4\u9875\u9762\u533a\u57df\u5927\u5c0f\u3002\n",
      "     * @return \u9875\u9762\u533a\u57df\n",
      "     */\n",
      "    public CT_PageArea getPageArea(Page page) {\n",
      "        CT_PageArea res = null;\n",
      "        if (page != null) {\n",
      "            // \u9875\u9762\u5b58\u5728\u65f6\uff0c\u4ece\u9875\u9762\u4e2d\u8bfb\u53d6\u533a\u57df\u4fe1\u606f\uff0c\n",
      "            if (page.getArea() != null) {\n",
      "                return page.getArea();\n",
      "            }\n",
      "            CT_PageArea tplArea = null;\n",
      "            int biggestOrder = -1;\n",
      "            // \u4ece\u6a21\u677f\u4e2d\u83b7\u53d6\n",
      "            for (Template item : page.getTemplates()) {\n",
      "                TemplatePageEntity template = getTemplate(item.getTemplateID().toString());\n",
      "                if (template == null || template.getPage() == null) continue;\n",
      "                CT_PageArea area = template.getPage().getArea();\n",
      "                int order = template.getZOrder().order();\n",
      "\n",
      "                if (area != null && order > biggestOrder && area.getBox() != null) {\n",
      "                    tplArea = area;\n",
      "                    biggestOrder = order;\n",
      "                }\n",
      "            }\n",
      "            res = tplArea;\n",
      "        }\n",
      "\n",
      "        // \u82e5\u4e0d\u5b58\u5728\u5219\u901a\u8fc7\u89e3\u6790\u6587\u6863\u4e2d\u7684\u9ed8\u8ba4\u53c2\u6570\u83b7\u53d6\uff0c\u4ece\u6587\u6863\u4fe1\u606f\u4e2d\u83b7\u53d6\u3002\n",
      "        if (res == null) {\n",
      "            Document document;\n",
      "            try {\n",
      "                document = ofdDir.obtainDocDefault().getDocument();\n",
      "            } catch (FileNotFoundException | DocumentException e) {\n",
      "                throw new BadOFDException(\"OFD\u89e3\u6790\u5931\u8d25\uff0c\u539f\u56e0:\" + e.getMessage(), e);\n",
      "            }\n",
      "            CT_CommonData commonData = document.getCommonData();\n",
      "            res = commonData.getPageArea();\n",
      "        }\n",
      "        if (res == null) {\n",
      "            // \u5f53\u65e0\u6cd5\u627e\u5230\u533a\u57df\u65f6\uff0c\u4f7f\u7528A4\u5927\u5c0f\uff0c\u4ee5\u517c\u5bb9\u9632\u6b62\u540e\u7eed\u89e3\u6790NPE\u3002\n",
      "            return new CT_PageArea(0, 0, 210d, 297d);\n",
      "        }\n",
      "        return res;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u901a\u8fc7\u9875\u9762\u9875\u7801\u83b7\u53d6\u9875\u9762\u5bf9\u8c61\n",
      "     *\n",
      "     * @param pageNum \u9875\u7801\uff0c\u4ece1\u8d77\n",
      "     * @return \u9875\u9762\u5bf9\u8c61\n",
      "     * @throws NumberFormatException \u9875\u7801\u5c0f\u4e8e1\n",
      "     * @throws RuntimeException      \u8def\u5f84\u4e0d\u5b58\u5728\uff0c\u6216\u6587\u6863\u89e3\u6790\u5f02\u5e38\n",
      "     */\n",
      "    public Page getPage(int pageNum) {\n",
      "        ST_Loc pageLoc = getPageAbsLoc(pageNum);\n",
      "        try {\n",
      "            return rl.get(pageLoc, Page::new);\n",
      "        } catch (FileNotFoundException | DocumentException e) {\n",
      "            throw new RuntimeException(\"OFD\u89e3\u6790\u5931\u8d25\uff0c\u539f\u56e0:\" + e.getMessage(), e);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u5236\u5b9a\u9875\u7801\u9875\u9762\u6587\u4ef6\u7684\u5728\u6587\u6863\u4e2d\u7684\u7edd\u5bf9\u8def\u5f84 \uff08\u4ee5 \"/\" \u5f00\u5934\uff09\n",
      "     *\n",
      "     * @param pageNum \u9875\u7801\n",
      "     * @return \u9875\u9762\u6587\u4ef6\u7684\u5728\u6587\u6863\u4e2d\u7684\u7edd\u5bf9\u8def\u5f84\n",
      "     * @throws NumberFormatException \u9875\u7801\u5c0f\u4e8e1\n",
      "     * @throws RuntimeException      \u8def\u5f84\u4e0d\u5b58\u5728\n",
      "     */\n",
      "    public ST_Loc getPageAbsLoc(int pageNum) {\n",
      "        if (pageNum <= 0) {\n",
      "            throw new NumberFormatException(\"\u9875\u7801(pageNum)\u4e0d\u80fd\u5c0f\u4e8e0\");\n",
      "        }\n",
      "        try {\n",
      "            rl.save();\n",
      "            int index = pageNum - 1;\n",
      "            // \u8def\u5f84\u89e3\u6790\u5bf9\u8c61\u83b7\u53d6\u5e76\u7f13\u5b58\u865a\u62df\u5bb9\u5668\n",
      "            Document document = cdDefaultDoc();\n",
      "            Pages pages = document.getPages();\n",
      "            List<org.ofdrw.core.basicStructure.pageTree.Page> pageList = pages.getPages();\n",
      "            if (index >= pageList.size()) {\n",
      "                throw new NumberFormatException(pageNum + \"\u8d85\u8fc7\u6700\u5927\u9875\u7801:\" + pageList.size());\n",
      "            }\n",
      "            // \u83b7\u53d6\u9875\u9762\u7684\u8def\u5f84\n",
      "            ST_Loc pageLoc = pageList.get(index).getBaseLoc();\n",
      "            String absolutePath = rl.toAbsolutePath(pageLoc);\n",
      "            return ST_Loc.getInstance(absolutePath);\n",
      "        } catch (FileNotFoundException | DocumentException e) {\n",
      "            throw new RuntimeException(\"OFD\u89e3\u6790\u5931\u8d25\uff0c\u539f\u56e0:\" + e.getMessage(), e);\n",
      "        } finally {\n",
      "            // \u8fd8\u539f\u539f\u6709\u5de5\u4f5c\u533a\n",
      "            rl.restore();\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u9875\u9762\u7684\u5bf9\u8c61ID\n",
      "     *\n",
      "     * @param pageNum \u9875\u7801\n",
      "     * @return \u5bf9\u8c61ID\n",
      "     */\n",
      "    public ST_ID getPageObjectId(int pageNum) {\n",
      "        if (pageNum <= 0) {\n",
      "            throw new NumberFormatException(\"\u9875\u7801(pageNum)\u4e0d\u80fd\u5c0f\u4e8e0\");\n",
      "        }\n",
      "        try {\n",
      "            rl.save();\n",
      "            int index = pageNum - 1;\n",
      "            // \u8def\u5f84\u89e3\u6790\u5bf9\u8c61\u83b7\u53d6\u5e76\u7f13\u5b58\u865a\u62df\u5bb9\u5668\n",
      "            Document document = cdDefaultDoc();\n",
      "            Pages pages = document.getPages();\n",
      "            List<org.ofdrw.core.basicStructure.pageTree.Page> pageList = pages.getPages();\n",
      "            if (index >= pageList.size()) {\n",
      "                throw new NumberFormatException(pageNum + \"\u8d85\u8fc7\u6700\u5927\u9875\u7801:\" + pageList.size());\n",
      "            }\n",
      "            // \u83b7\u53d6\u9875\u9762\u7684\u8def\u5f84\n",
      "            org.ofdrw.core.basicStructure.pageTree.Page page = pageList.get(index);\n",
      "            if (page.getID() == null) {\n",
      "                return null;\n",
      "            }\n",
      "            return page.getID();\n",
      "        } catch (FileNotFoundException | DocumentException e) {\n",
      "            throw new RuntimeException(\"OFD\u89e3\u6790\u5931\u8d25\uff0c\u539f\u56e0:\" + e.getMessage(), e);\n",
      "        } finally {\n",
      "            // \u8fd8\u539f\u539f\u6709\u5de5\u4f5c\u533a\n",
      "            rl.restore();\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u8d44\u6e90\u5b9a\u4f4d\u5668\n",
      "     *\n",
      "     * @return \u8d44\u6e90\u5b9a\u4f4d\u5668\n",
      "     */\n",
      "    public ResourceLocator getResourceLocator() {\n",
      "        return rl;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u6240\u6709\u9644\u4ef6\u5bf9\u8c61\n",
      "     * <p>\n",
      "     * \u6ce8\u610f\u8be5\u5bf9\u8c61\u5747\u4e3a\u53ea\u8bfb\n",
      "     *\n",
      "     * @return \u9644\u4ef6\u6570\u7ec4\uff0c\u5982\u679c\u6ca1\u6709\u9644\u4ef6\u8fd4\u8fd8\u7a7a\u6570\u7ec4\n",
      "     * @throws BadOFDException \u6587\u6863\u7ed3\u6784\u635f\u574f\n",
      "     */\n",
      "    public List<CT_Attachment> getAttachmentList() {\n",
      "        rl.save();\n",
      "        try {\n",
      "            DocDir docDir = ofdDir.obtainDocDefault();\n",
      "            rl.cd(docDir);\n",
      "            Document document = null;\n",
      "            Attachments attachments = null;\n",
      "            try {\n",
      "                document = docDir.getDocument();\n",
      "            } catch (FileNotFoundException | DocumentException e) {\n",
      "                throw new BadOFDException(e);\n",
      "            }\n",
      "            ST_Loc attachmentsLoc = document.getAttachments();\n",
      "            if (attachmentsLoc == null || (!rl.exist(attachmentsLoc.toString()))) {\n",
      "                return new ArrayList<>();\n",
      "            }\n",
      "            try {\n",
      "                // \u83b7\u53d6\u9644\u4ef6\u76ee\u5f55\n",
      "                attachments = rl.get(attachmentsLoc, Attachments::new);\n",
      "            } catch (FileNotFoundException | DocumentException e) {\n",
      "                System.err.println(\">> \u65e0\u6cd5\u83b7\u53d6\u6216\u89e3\u6790Attachments.xml: \" + e.getMessage());\n",
      "                return new ArrayList<>();\n",
      "            }\n",
      "\n",
      "            String parent = attachmentsLoc.parent();\n",
      "            if (parent != null) {\n",
      "                rl.cd(parent);\n",
      "            }\n",
      "\n",
      "            List<CT_Attachment> res = attachments.getAttachments();\n",
      "            if (!res.isEmpty()) {\n",
      "                // \u8bbe\u7f6e\u6587\u4ef6\u4e3a\u7edd\u5bf9\u8def\u5f84\uff0c\u5916\u90e8\u8bfb\u53d6\u65f6\u5de5\u4f5c\u8def\u5f84\u4e0d\u6b63\u786e\u5bfc\u81f4\u7684\u6587\u4ef6\u4e0d\u5b58\u5728\u3002\n",
      "                for (CT_Attachment item : res) {\n",
      "                    item.setFileLoc(rl.getAbsTo(item.getFileLoc()));\n",
      "                }\n",
      "            }\n",
      "            return res;\n",
      "        } finally {\n",
      "            rl.restore();\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u9644\u4ef6\u6587\u4ef6\n",
      "     * <p>\n",
      "     * \u6ce8\u610f\uff1a\u8be5\u6587\u4ef6\u4f1a\u5728Close Reader\u65f6\u5019\u88ab\u5220\u9664\uff0c\u8bf7\u5728\u4e4b\u524d\u590d\u5236\u5230\u5176\u4ed6\u5730\u65b9\n",
      "     *\n",
      "     * @param attachment \u9644\u4ef6\u4fe1\u606f\n",
      "     * @return \u9644\u4ef6\u6587\u4ef6\u8def\u5f84\n",
      "     */\n",
      "    public Path getAttachmentFile(CT_Attachment attachment) {\n",
      "        if (attachment == null) {\n",
      "            return null;\n",
      "        }\n",
      "        ST_Loc fileLoc = attachment.getFileLoc();\n",
      "        try {\n",
      "            return rl.getFile(fileLoc);\n",
      "        } catch (FileNotFoundException e) {\n",
      "            System.err.println(\">> \u65e0\u6cd5\u6839\u636e\u9644\u4ef6\u5bf9\u8c61\u7684\u63cf\u8ff0\u83b7\u53d6\u5230\u9644\u4ef6: \" + fileLoc.toString());\n",
      "            return null;\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u9644\u4ef6\u5bf9\u8c61\n",
      "     * <p>\n",
      "     * \u8be5\u65b9\u6cd5\u4e0d\u4f1a\u6062\u590d\u8d44\u6e90\u5b9a\u4f4d\u5668\n",
      "     *\n",
      "     * @param name \u9644\u4ef6\u540d\u79f0\n",
      "     * @return \u9644\u4ef6\u5bf9\u8c61\n",
      "     */\n",
      "    public CT_Attachment getAttachment(String name) {\n",
      "        if (name == null || name.trim().length() == 0) {\n",
      "            return null;\n",
      "        }\n",
      "\n",
      "        List<CT_Attachment> attachmentList = this.getAttachmentList();\n",
      "\n",
      "        for (CT_Attachment attachment : attachmentList) {\n",
      "            // \u5bfb\u627e\u5339\u914d\u540d\u79f0\u7684\u9644\u4ef6\n",
      "            if (attachment.getAttachmentName().equals(name)) {\n",
      "                return attachment;\n",
      "            }\n",
      "        }\n",
      "        return null;\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u9644\u4ef6\u6587\u4ef6\n",
      "     * <p>\n",
      "     * \u6ce8\u610f\uff1a\u8be5\u6587\u4ef6\u4f1a\u5728Close Reader\u65f6\u5019\u88ab\u5220\u9664\uff0c\u8bf7\u5728\u4e4b\u524d\u590d\u5236\u5230\u5176\u4ed6\u5730\u65b9\n",
      "     *\n",
      "     * @param name \u9644\u4ef6\u540d\u79f0\n",
      "     * @return \u9644\u4ef6\u6587\u4ef6\u8def\u5f84\n",
      "     */\n",
      "    public Path getAttachmentFile(String name) {\n",
      "        if (name == null || name.trim().length() == 0) {\n",
      "            return null;\n",
      "        }\n",
      "        rl.save();\n",
      "        try {\n",
      "            CT_Attachment attachment = getAttachment(name, rl);\n",
      "            if (attachment == null) {\n",
      "                return null;\n",
      "            }\n",
      "            ST_Loc fileLoc = attachment.getFileLoc();\n",
      "            try {\n",
      "                return rl.getFile(fileLoc);\n",
      "            } catch (FileNotFoundException e) {\n",
      "                System.err.println(\">> \u65e0\u6cd5\u6839\u636e\u9644\u4ef6\u5bf9\u8c61\u7684\u63cf\u8ff0\u83b7\u53d6\u5230\u9644\u4ef6: \" + fileLoc.toString());\n",
      "                return null;\n",
      "            }\n",
      "        } finally {\n",
      "            rl.restore();\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u9644\u4ef6\u5bf9\u8c61\n",
      "     * <p>\n",
      "     * \u8be5\u65b9\u6cd5\u4e0d\u4f1a\u6062\u590d\u8d44\u6e90\u5b9a\u4f4d\u5668\n",
      "     *\n",
      "     * @param name \u9644\u4ef6\u540d\u79f0\n",
      "     * @param rl   \u8d44\u6e90\u5b9a\u4f4d\u5668\n",
      "     * @return \u9644\u4ef6\u5bf9\u8c61\n",
      "     */\n",
      "    private CT_Attachment getAttachment(String name, ResourceLocator rl) {\n",
      "        if (name == null || name.trim().length() == 0) {\n",
      "            return null;\n",
      "        }\n",
      "\n",
      "        DocDir docDir = ofdDir.obtainDocDefault();\n",
      "        rl.cd(docDir);\n",
      "        Document document = null;\n",
      "        Attachments attachments = null;\n",
      "        try {\n",
      "            document = docDir.getDocument();\n",
      "        } catch (FileNotFoundException | DocumentException e) {\n",
      "            throw new BadOFDException(e);\n",
      "        }\n",
      "        ST_Loc attachmentsLoc = document.getAttachments();\n",
      "        if (attachmentsLoc == null || (!rl.exist(attachmentsLoc.toString()))) {\n",
      "            // \u6587\u6863\u4e2d\u6ca1\u6709\u9644\u4ef6\u76ee\u5f55\u6587\u4ef6\n",
      "            return null;\n",
      "        }\n",
      "        try {\n",
      "            // \u83b7\u53d6\u9644\u4ef6\u76ee\u5f55\n",
      "            attachments = rl.get(attachmentsLoc, Attachments::new);\n",
      "        } catch (FileNotFoundException | DocumentException e) {\n",
      "            System.err.println(\">> \u65e0\u6cd5\u83b7\u53d6\u6216\u89e3\u6790Attachments.xml: \" + e.getMessage());\n",
      "            return null;\n",
      "        }\n",
      "\n",
      "        String parent = attachmentsLoc.parent();\n",
      "        if (parent != null) {\n",
      "            rl.cd(parent);\n",
      "        }\n",
      "\n",
      "        for (CT_Attachment attachment : attachments.getAttachments()) {\n",
      "            // \u5bfb\u627e\u5339\u914d\u540d\u79f0\u7684\u9644\u4ef6\n",
      "            if (attachment.getAttachmentName().equals(name)) {\n",
      "                return attachment;\n",
      "            }\n",
      "        }\n",
      "        return null;\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u9ed8\u8ba4\u6587\u6863\u4e2d\u7684\u7b7e\u7ae0\u4fe1\u606f\n",
      "     *\n",
      "     * @return \u7b7e\u7ae0\u4fe1\u606f\n",
      "     */\n",
      "    public List<StampAnnotEntity> getStampAnnots() {\n",
      "        if (!hasSignature()) {\n",
      "            // \u6ca1\u6709\u7b7e\u540d\u7684\u60c5\u51b5\u4e0b\u8fd4\u8fd8\u7a7a\u96c6\u5408\uff0c\u9632\u6b62NPE\n",
      "            return Collections.emptyList();\n",
      "        }\n",
      "\n",
      "        try {\n",
      "            rl.save();\n",
      "            // \u7b7e\u540d\u5217\u8868\n",
      "            final Signatures sigFileList = getDefaultSignatures();\n",
      "            if (sigFileList == null) {\n",
      "                return Collections.emptyList();\n",
      "            }\n",
      "            ST_Loc signaturesLoc = getDefaultDocSignaturesPath();\n",
      "            // \u5207\u6362\u76ee\u5f55\u5230 Signatures.xml\u6240\u5728\u76ee\u5f55\n",
      "            rl.cd(signaturesLoc.parent());\n",
      "            final List<Signature> sigInfoList = sigFileList.getSignatures();\n",
      "            List<StampAnnotEntity> res = new ArrayList<>(sigInfoList.size());\n",
      "            for (Signature sigInfoItem : sigInfoList) {\n",
      "                ST_Loc signatureBaseLoc = sigInfoItem.getBaseLoc();\n",
      "                rl.save();\n",
      "                try {\n",
      "                    // \u7b7e\u540d\u63cf\u8ff0\u6587\u4ef6\n",
      "                    final org.ofdrw.core.signatures.sig.Signature sigDesp = rl.get(signatureBaseLoc, org.ofdrw.core.signatures.sig.Signature::new);\n",
      "                    try {\n",
      "                        rl.cd(signatureBaseLoc.parent());\n",
      "                        ST_Loc signedValueLoc = sigDesp.getSignedValue();\n",
      "\n",
      "                        rl.cd(signedValueLoc.parent());\n",
      "                        // \u83b7\u53d6\u7b7e\u540d\u503c\u6587\u4ef6\n",
      "                        final Path signedValueFile = rl.getFile(signedValueLoc);\n",
      "                        // \u89e3\u6790\u7535\u5b50\u5370\u7ae0\n",
      "                        SESVersionHolder v = VersionParser.parseSES_SignatureVersion(Files.readAllBytes(signedValueFile));\n",
      "                        res.add(new StampAnnotEntity(v, sigDesp.getSignedInfo()));\n",
      "//                        SESVersionHolder sealHolder = null;\n",
      "//                        if (sigDesp.getSignedInfo().getSeal() != null) {\n",
      "//                            ST_Loc sealLoc = sigDesp.getSignedInfo().getSeal().getBaseLoc();\n",
      "//                            rl.cd(signatureBaseLoc.parent());\n",
      "//                            rl.cd(sealLoc.parent());\n",
      "//                            final Path sealFile = rl.getFile(sealLoc);\n",
      "//                            sealHolder = VersionParser.parseSES_SealVersion(Files.readAllBytes(sealFile));\n",
      "//                        }\n",
      "//                        res.add(new StampAnnotEntity(v, sealHolder, sigDesp.getSignedInfo()));\n",
      "                    } finally {\n",
      "                        rl.restore();\n",
      "                    }\n",
      "                } catch (Exception ignored) {\n",
      "                    // \u5ffd\u7565\u9519\u8bef\uff1a\n",
      "                    //      \u6587\u4ef6\u4e0d\u5b58\u5728\n",
      "                    //      \u65e0\u6cd5\u89e3\u6790\u7684\u5370\u7ae0\uff0c\u56e0\u4e3a\u7b7e\u540d\u503c\u53ef\u80fd\u662f \u7535\u5b50\u7b7e\u540d\u503c\n",
      "                }\n",
      "            }\n",
      "            return res;\n",
      "        } finally {\n",
      "            rl.restore();\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u9ed8\u8ba4\u6587\u6863\u4e2d\u7684\u6240\u6709\u6ce8\u91ca\u4fe1\u606f\n",
      "     *\n",
      "     * @return \u6ce8\u91ca\u5b9e\u4f53\u4fe1\u606f\u5217\u8868\n",
      "     */\n",
      "    public List<AnnotionEntity> getAnnotationEntities() {\n",
      "        try {\n",
      "            // \u8def\u5f84\u89e3\u6790\u5bf9\u8c61\u83b7\u53d6\u5e76\u7f13\u5b58\u865a\u62df\u5bb9\u5668\n",
      "            Document document = cdDefaultDoc();\n",
      "            final ST_Loc annInfosLoc = document.getAnnotations();\n",
      "            if (annInfosLoc == null || (!rl.exist(annInfosLoc.toString()))) {\n",
      "                return Collections.emptyList();\n",
      "            }\n",
      "            Annotations annotations = rl.get(annInfosLoc, Annotations::new);\n",
      "            if (annotations == null) {\n",
      "                return Collections.emptyList();\n",
      "            }\n",
      "            // \u5207\u6362\u76ee\u5f55\u5230 Annotations.xml\u6240\u5728\u6587\u4ef6\u76ee\u5f55\n",
      "            rl.cd(annInfosLoc.parent());\n",
      "            try {\n",
      "                List<AnnPage> annPages = annotations.getPages();\n",
      "                List<AnnotionEntity> res = new ArrayList<>(annPages.size());\n",
      "                for (AnnPage annPage : annPages) {\n",
      "                    try {\n",
      "                        final ST_Loc fileLoc = annPage.getFileLoc();\n",
      "                        final PageAnnot pageAnnot = rl.get(fileLoc, PageAnnot::new);\n",
      "                        res.add(new AnnotionEntity(annPage.getPageID().toString(), pageAnnot.getAnnots()));\n",
      "                    } catch (Exception ignore) {\n",
      "                        // \u5ffd\u7565\u65e0\u6cd5\u52a0\u8f7d\u7684\u6ce8\u91ca\u6587\u4ef6\uff0c\u5c3d\u529b\u800c\u4e3a\n",
      "                    }\n",
      "                }\n",
      "                return res;\n",
      "            } finally {\n",
      "                rl.restore();\n",
      "            }\n",
      "        } catch (DocumentException | FileNotFoundException e) {\n",
      "            throw new RuntimeException(\"OFD\u89e3\u6790\u5931\u8d25\uff0c\u539f\u56e0:\" + e.getMessage(), e);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u8d44\u6e90\u7ba1\u7406\u5668\n",
      "     * <p>\n",
      "     * \u8d44\u6e90\u7ba1\u7406\u5668\u83b7\u53d6\u5230\u7684\u5bf9\u8c61\u5747\u4e3a\u53ea\u8bfb\u5bf9\u8c61\n",
      "     *\n",
      "     * @return \u8d44\u6e90\u7ba1\u7406\u5668\n",
      "     */\n",
      "    public ResourceManage getResMgt() {\n",
      "        return resMgt;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u542f\u7528\u6216\u5173\u95ed\u547d\u540d\u7a7a\u95f4\u4e25\u683c\u89e3\u6790\u6a21\u5f0f\n",
      "     * <p>\n",
      "     * \u542f\u7528\u4e25\u683c\u6a21\u5f0f\u540e\u5c06\u4f1a\u5ffd\u7565\u975eofd\u547d\u540d\u7a7a\u95f4\u7684\u5143\u7d20\u3002\n",
      "     * <p>\n",
      "     * \u9ed8\u8ba4\uff1a\u5173\u95ed\u4e25\u683c\u6a21\u5f0f\n",
      "     *\n",
      "     * @param enable true - \u542f\u7528; false - \u517c\u5bb9\u6a21\u5f0f\uff08\u9ed8\u8ba4\uff09\uff0c\u517c\u5bb9ofd\u547d\u540d\u7a7a\u95f4\n",
      "     */\n",
      "    public static void setNamespaceStrictMode(boolean enable) {\n",
      "        OFDElement.NSStrictMode = enable;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u5173\u95ed\u6587\u6863\n",
      "     * <p>\n",
      "     * \u5220\u9664\u5de5\u4f5c\u533a\n",
      "     *\n",
      "     * @throws IOException \u5de5\u4f5c\u533a\u5220\u9664\u5f02\u5e38\n",
      "     */\n",
      "    @Override\n",
      "    public void close() throws IOException {\n",
      "        if (closed) {\n",
      "            return;\n",
      "        }\n",
      "        closed = true;\n",
      "        if (workDir != null && Files.exists(workDir)) {\n",
      "            try {\n",
      "                FileUtils.forceDelete(workDir.toFile());\n",
      "            } catch (IOException e) {\n",
      "                throw new IOException(\"\u65e0\u6cd5\u5220\u9664Reader\u7684\u5de5\u4f5c\u7a7a\u95f4\uff0c\u539f\u56e0\uff1a\" + e.getMessage(), e);\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package org.ofdrw.reader;\n",
      "\n",
      "import org.dom4j.DocumentException;\n",
      "import org.junit.jupiter.api.Assertions;\n",
      "import org.junit.jupiter.api.Test;\n",
      "import org.ofdrw.core.attachment.CT_Attachment;\n",
      "import org.ofdrw.core.basicStructure.ofd.DocBody;\n",
      "import org.ofdrw.core.basicStructure.ofd.OFD;\n",
      "import org.ofdrw.core.basicStructure.ofd.docInfo.CT_DocInfo;\n",
      "import org.ofdrw.core.basicStructure.pageObj.Page;\n",
      "import org.ofdrw.core.basicType.ST_Box;\n",
      "import org.ofdrw.pkg.container.DocDir;\n",
      "import org.ofdrw.pkg.container.OFDDir;\n",
      "import org.ofdrw.pkg.container.ResDir;\n",
      "import org.ofdrw.pkg.container.VirtualContainer;\n",
      "import org.ofdrw.reader.model.StampAnnotEntity;\n",
      "\n",
      "import java.io.ByteArrayInputStream;\n",
      "import java.io.File;\n",
      "import java.io.FileInputStream;\n",
      "import java.io.IOException;\n",
      "import java.nio.file.Files;\n",
      "import java.nio.file.Path;\n",
      "import java.nio.file.Paths;\n",
      "import java.time.LocalDate;\n",
      "import java.util.List;\n",
      "\n",
      "\n",
      "import static org.junit.jupiter.api.Assertions.*;\n",
      "\n",
      "/**\n",
      " * @author \u6743\u89c2\u5b87\n",
      " * @since 2020-04-07 19:32:19\n",
      " */\n",
      "class OFDReaderTest {\n",
      "\n",
      "    private Path src = Paths.get(\"src/test/resources/helloworld.ofd\");\n",
      "\n",
      "    @Test\n",
      "    void testChineseDirName() throws IOException {\n",
      "        Path src = Paths.get(\"src/test/resources/chineseDir_windows.ofd\");\n",
      "        try (OFDReader reader = new OFDReader(src);) {\n",
      "            System.out.println(reader.getWorkDir().toAbsolutePath());\n",
      "            OFDDir ofdDir = reader.getOFDDir();\n",
      "            DocDir docDir = ofdDir.obtainDocDefault();\n",
      "            ResDir res = docDir.getRes();\n",
      "            VirtualContainer chineseDirName = res.getContainer(\"\u8fd9\u662f\u4e00\u4e2a\u4e2d\u6587\u76ee\u5f55\", VirtualContainer::new);\n",
      "            assertNotNull(chineseDirName);\n",
      "\n",
      "            Path file = chineseDirName.getFile(\"\u6570\u636e\u6587\u4ef6.txt\");\n",
      "            byte[] contentBin = Files.readAllBytes(file);\n",
      "            final String content = new String(contentBin);\n",
      "            System.out.println(content);\n",
      "            assertEquals(\"\u6587\u4ef6\u4e2d\u6709\u4e00\u4e9b\u4e2d\u6587\", content);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u9644\u4ef6\u5bf9\u8c61\n",
      "     *\n",
      "     * @throws IOException\n",
      "     */\n",
      "    @Test\n",
      "    void getAttachment() throws IOException {\n",
      "        Path src = Paths.get(\"src/test/resources/AddAttachment.ofd\");\n",
      "\n",
      "        try (OFDReader reader = new OFDReader(src)) {\n",
      "            CT_Attachment attachment = reader.getAttachment(\"AAABBB\");\n",
      "            Assertions.assertNull(attachment);\n",
      "\n",
      "            Path file = reader.getAttachmentFile(\"AAABBB\");\n",
      "            Assertions.assertNull(file);\n",
      "\n",
      "            file = reader.getAttachmentFile(\"Gao\");\n",
      "            Assertions.assertTrue(Files.exists(file));\n",
      "\n",
      "        }\n",
      "\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    void oFDReader() throws IOException {\n",
      "        assertThrows(IllegalArgumentException.class, () -> {\n",
      "            OFDReader reader = new OFDReader(Paths.get(\"target/null.ofd\"));\n",
      "        });\n",
      "        OFDReader reader = new OFDReader(src);\n",
      "        Path workDir = reader.getWorkDir();\n",
      "        System.out.println(workDir.toAbsolutePath().toString());\n",
      "        assertTrue(Files.exists(workDir));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void close() throws IOException {\n",
      "        Path p;\n",
      "        try (OFDReader reader = new OFDReader(src)) {\n",
      "            p = reader.getWorkDir();\n",
      "            System.out.println(\">> \" + p.toAbsolutePath().toString());\n",
      "        }\n",
      "        assertTrue(Files.notExists(p));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void getOFDDir() throws IOException, DocumentException {\n",
      "        try (OFDReader reader = new OFDReader(src)) {\n",
      "            OFDDir ofdDir = reader.getOFDDir();\n",
      "            OFD ofd = ofdDir.getOfd();\n",
      "            String docID = ofd.getDocBody().getDocInfo().getDocID();\n",
      "            assertEquals(\"220c5913ebfe4f6e8070dabd3647f157\", docID);\n",
      "        }\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    void getPage() throws IOException {\n",
      "        try (OFDReader reader = new OFDReader(src)) {\n",
      "            OFDDir ofdDir = reader.getOFDDir();\n",
      "            Page page = reader.getPage(1);\n",
      "            assertEquals(1, page.getContent().getLayers().size());\n",
      "        }\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    public void testReader() throws Exception {\n",
      "        Path src = Paths.get(\"src/test/resources/helloworld.ofd\");\n",
      "        byte[] ofdSrc = Files.readAllBytes(src);\n",
      "        Path fileTemp = Files.createTempDirectory(\"ofd_tmp\");\n",
      "\n",
      "        String tempDirBuilder = fileTemp.toFile().getAbsolutePath() +\n",
      "                File.separator +\n",
      "                fileTemp.toFile().getName() +\n",
      "                \"_src.OFD\";\n",
      "        Path srcPath = Paths.get(tempDirBuilder);\n",
      "        Files.write(srcPath, ofdSrc);\n",
      "        OFDReader reader = new OFDReader(srcPath);\n",
      "        //reader.close();\n",
      "\n",
      "        Files.delete(srcPath);\n",
      "        Files.delete(fileTemp);\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u4f4e\u5c42\u6b21\u7684\u6587\u6863\u64cd\u4f5c\n",
      "     *\n",
      "     * @throws IOException       IO\u5f02\u5e38\n",
      "     * @throws DocumentException \u6587\u6863\u89e3\u6790\u5f02\u5e38\n",
      "     */\n",
      "    @Test\n",
      "    void lowLevelOp() throws IOException, DocumentException {\n",
      "        Path out = Paths.get(\"target/EditTitleAuthor.ofd\");\n",
      "        try (OFDReader reader = new OFDReader(src)) {\n",
      "            OFDDir ofdDir = reader.getOFDDir();\n",
      "            OFD ofd = ofdDir.getOfd();\n",
      "            DocBody docBody = ofd.getDocBody();\n",
      "            CT_DocInfo docInfo = docBody.getDocInfo();\n",
      "            System.out.println(\">> \u6587\u6863\u6807\u9898\uff1a[\" + docInfo.getTile() + \"] -> [Hello World]\");\n",
      "            System.out.println(\">> \u6587\u6863\u4f5c\u8005\uff1a[\" + docInfo.getAuthor() + \"] -> [\u6743\u89c2\u5b87]\");\n",
      "            docInfo.setTile(\"Hello World\");\n",
      "            docInfo.setAuthor(\"\u6743\u89c2\u5b87\");\n",
      "            docInfo.setModDate(LocalDate.now());\n",
      "            // \u91cd\u65b0\u6253\u5305\u4e3aOFD\u6587\u6863\n",
      "            ofdDir.jar(out);\n",
      "        }\n",
      "        System.out.println(\">> \u6587\u6863\u751f\u6210\u4f4d\u7f6e\uff1a\" + out.toAbsolutePath().toString());\n",
      "\n",
      "        // \u9a8c\u8bc1\n",
      "        try (OFDReader reader = new OFDReader(out)) {\n",
      "            OFDDir ofdDir = reader.getOFDDir();\n",
      "            OFD ofd = ofdDir.getOfd();\n",
      "            DocBody docBody = ofd.getDocBody();\n",
      "            CT_DocInfo docInfo = docBody.getDocInfo();\n",
      "            assertEquals(docInfo.getTile(), \"Hello World\");\n",
      "            assertEquals(docInfo.getAuthor(), \"\u6743\u89c2\u5b87\");\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void getStampAnnots() throws IOException {\n",
      "        Path path = Paths.get(\"src/test/resources/\u53d1\u7968\u793a\u4f8b.ofd\");\n",
      "        try (OFDReader ofdReader = new OFDReader(path)) {\n",
      "            final List<StampAnnotEntity> stampAnnots = ofdReader.getStampAnnots();\n",
      "            System.out.println(stampAnnots.size());\n",
      "            assertEquals(1, stampAnnots.size());\n",
      "        }\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    void getPageSize() throws Exception {\n",
      "        Path path = Paths.get(\"src/test/resources/\u53d1\u7968\u793a\u4f8b.ofd\");\n",
      "        try (OFDReader reader = new OFDReader(path)) {\n",
      "            final ST_Box pageSize = reader.getPageSize(1);\n",
      "            System.out.println(pageSize);\n",
      "        }\n",
      "    }\n",
      "}"
    ],
    "method_lines_dic": {
      "OFDReader::::getWorkDir()": [
        81,
        83
      ],
      "OFDReader::::setZipFileMaxSize(long)": [
        92,
        94
      ],
      "OFDReader::::getOFDDir()": [
        171,
        173
      ],
      "OFDReader::::getDefaultDocSignaturesPath()": [
        181,
        199
      ],
      "OFDReader::::getDefaultSignatures()": [
        208,
        221
      ],
      "OFDReader::::hasSignature()": [
        229,
        238
      ],
      "OFDReader::::getAnnotations()": [
        247,
        263
      ],
      "OFDReader::::getNumberOfPages()": [
        270,
        282
      ],
      "OFDReader::::getPageInfo(int)": [
        290,
        347
      ],
      "OFDReader::::getPageList()": [
        354,
        363
      ],
      "OFDReader::::getTemplate(java.lang.String)": [
        371,
        398
      ],
      "OFDReader::::cdDoc(int)": [
        412,
        421
      ],
      "OFDReader::::getDoc(int)": [
        431,
        441
      ],
      "OFDReader::::cdDefaultDoc()": [
        454,
        456
      ],
      "OFDReader::::getPageArea(int)": [
        482,
        485
      ],
      "OFDReader::::getPageSize(int)": [
        493,
        496
      ],
      "OFDReader::::getPage(int)": [
        554,
        561
      ],
      "OFDReader::::getPageAbsLoc(int)": [
        571,
        595
      ],
      "OFDReader::::getPageObjectId(int)": [
        603,
        629
      ],
      "OFDReader::::getResourceLocator()": [
        636,
        638
      ],
      "OFDReader::::getAttachmentList()": [
        648,
        688
      ],
      "OFDReader::::getAttachment(java.lang.String)": [
        719,
        733
      ],
      "OFDReader::::getAttachmentFile(java.lang.String)": [
        744,
        764
      ],
      "OFDReader::::getAttachment(java.lang.String,org.ofdrw.reader.ResourceLocator)": [
        775,
        814
      ],
      "OFDReader::::getStampAnnots()": [
        822,
        878
      ],
      "OFDReader::::getAnnotationEntities()": [
        885,
        918
      ],
      "OFDReader::::getResMgt()": [
        927,
        929
      ],
      "OFDReader::::setNamespaceStrictMode(boolean)": [
        940,
        942
      ],
      "OFDReader::::close()": [
        951,
        964
      ]
    },
    "test_method_lines_dic": {
      "OFDReaderTest::::testChineseDirName()": [
        39,
        56
      ],
      "OFDReaderTest::::getAttachment()": [
        63,
        79
      ],
      "OFDReaderTest::::oFDReader()": [
        82,
        91
      ],
      "OFDReaderTest::::close()": [
        93,
        101
      ],
      "OFDReaderTest::::getOFDDir()": [
        103,
        111
      ],
      "OFDReaderTest::::getPage()": [
        114,
        121
      ],
      "OFDReaderTest::::testReader()": [
        124,
        141
      ],
      "OFDReaderTest::::lowLevelOp()": [
        150,
        177
      ],
      "OFDReaderTest::::getStampAnnots()": [
        179,
        187
      ],
      "OFDReaderTest::::getPageSize()": [
        190,
        197
      ]
    },
    "reverse_method_lines_dic": {
      "81": "OFDReader::::getWorkDir()",
      "82": "OFDReader::::getWorkDir()",
      "83": "OFDReader::::getWorkDir()",
      "92": "OFDReader::::setZipFileMaxSize(long)",
      "93": "OFDReader::::setZipFileMaxSize(long)",
      "94": "OFDReader::::setZipFileMaxSize(long)",
      "171": "OFDReader::::getOFDDir()",
      "172": "OFDReader::::getOFDDir()",
      "173": "OFDReader::::getOFDDir()",
      "181": "OFDReader::::getDefaultDocSignaturesPath()",
      "182": "OFDReader::::getDefaultDocSignaturesPath()",
      "183": "OFDReader::::getDefaultDocSignaturesPath()",
      "184": "OFDReader::::getDefaultDocSignaturesPath()",
      "185": "OFDReader::::getDefaultDocSignaturesPath()",
      "186": "OFDReader::::getDefaultDocSignaturesPath()",
      "187": "OFDReader::::getDefaultDocSignaturesPath()",
      "188": "OFDReader::::getDefaultDocSignaturesPath()",
      "189": "OFDReader::::getDefaultDocSignaturesPath()",
      "190": "OFDReader::::getDefaultDocSignaturesPath()",
      "191": "OFDReader::::getDefaultDocSignaturesPath()",
      "192": "OFDReader::::getDefaultDocSignaturesPath()",
      "193": "OFDReader::::getDefaultDocSignaturesPath()",
      "194": "OFDReader::::getDefaultDocSignaturesPath()",
      "195": "OFDReader::::getDefaultDocSignaturesPath()",
      "196": "OFDReader::::getDefaultDocSignaturesPath()",
      "197": "OFDReader::::getDefaultDocSignaturesPath()",
      "198": "OFDReader::::getDefaultDocSignaturesPath()",
      "199": "OFDReader::::getDefaultDocSignaturesPath()",
      "208": "OFDReader::::getDefaultSignatures()",
      "209": "OFDReader::::getDefaultSignatures()",
      "210": "OFDReader::::getDefaultSignatures()",
      "211": "OFDReader::::getDefaultSignatures()",
      "212": "OFDReader::::getDefaultSignatures()",
      "213": "OFDReader::::getDefaultSignatures()",
      "214": "OFDReader::::getDefaultSignatures()",
      "215": "OFDReader::::getDefaultSignatures()",
      "216": "OFDReader::::getDefaultSignatures()",
      "217": "OFDReader::::getDefaultSignatures()",
      "218": "OFDReader::::getDefaultSignatures()",
      "219": "OFDReader::::getDefaultSignatures()",
      "220": "OFDReader::::getDefaultSignatures()",
      "221": "OFDReader::::getDefaultSignatures()",
      "229": "OFDReader::::hasSignature()",
      "230": "OFDReader::::hasSignature()",
      "231": "OFDReader::::hasSignature()",
      "232": "OFDReader::::hasSignature()",
      "233": "OFDReader::::hasSignature()",
      "234": "OFDReader::::hasSignature()",
      "235": "OFDReader::::hasSignature()",
      "236": "OFDReader::::hasSignature()",
      "237": "OFDReader::::hasSignature()",
      "238": "OFDReader::::hasSignature()",
      "247": "OFDReader::::getAnnotations()",
      "248": "OFDReader::::getAnnotations()",
      "249": "OFDReader::::getAnnotations()",
      "250": "OFDReader::::getAnnotations()",
      "251": "OFDReader::::getAnnotations()",
      "252": "OFDReader::::getAnnotations()",
      "253": "OFDReader::::getAnnotations()",
      "254": "OFDReader::::getAnnotations()",
      "255": "OFDReader::::getAnnotations()",
      "256": "OFDReader::::getAnnotations()",
      "257": "OFDReader::::getAnnotations()",
      "258": "OFDReader::::getAnnotations()",
      "259": "OFDReader::::getAnnotations()",
      "260": "OFDReader::::getAnnotations()",
      "261": "OFDReader::::getAnnotations()",
      "262": "OFDReader::::getAnnotations()",
      "263": "OFDReader::::getAnnotations()",
      "270": "OFDReader::::getNumberOfPages()",
      "271": "OFDReader::::getNumberOfPages()",
      "272": "OFDReader::::getNumberOfPages()",
      "273": "OFDReader::::getNumberOfPages()",
      "274": "OFDReader::::getNumberOfPages()",
      "275": "OFDReader::::getNumberOfPages()",
      "276": "OFDReader::::getNumberOfPages()",
      "277": "OFDReader::::getNumberOfPages()",
      "278": "OFDReader::::getNumberOfPages()",
      "279": "OFDReader::::getNumberOfPages()",
      "280": "OFDReader::::getNumberOfPages()",
      "281": "OFDReader::::getNumberOfPages()",
      "282": "OFDReader::::getNumberOfPages()",
      "290": "OFDReader::::getPageInfo(int)",
      "291": "OFDReader::::getPageInfo(int)",
      "292": "OFDReader::::getPageInfo(int)",
      "293": "OFDReader::::getPageInfo(int)",
      "294": "OFDReader::::getPageInfo(int)",
      "295": "OFDReader::::getPageInfo(int)",
      "296": "OFDReader::::getPageInfo(int)",
      "297": "OFDReader::::getPageInfo(int)",
      "298": "OFDReader::::getPageInfo(int)",
      "299": "OFDReader::::getPageInfo(int)",
      "300": "OFDReader::::getPageInfo(int)",
      "301": "OFDReader::::getPageInfo(int)",
      "302": "OFDReader::::getPageInfo(int)",
      "303": "OFDReader::::getPageInfo(int)",
      "304": "OFDReader::::getPageInfo(int)",
      "305": "OFDReader::::getPageInfo(int)",
      "306": "OFDReader::::getPageInfo(int)",
      "307": "OFDReader::::getPageInfo(int)",
      "308": "OFDReader::::getPageInfo(int)",
      "309": "OFDReader::::getPageInfo(int)",
      "310": "OFDReader::::getPageInfo(int)",
      "311": "OFDReader::::getPageInfo(int)",
      "312": "OFDReader::::getPageInfo(int)",
      "313": "OFDReader::::getPageInfo(int)",
      "314": "OFDReader::::getPageInfo(int)",
      "315": "OFDReader::::getPageInfo(int)",
      "316": "OFDReader::::getPageInfo(int)",
      "317": "OFDReader::::getPageInfo(int)",
      "318": "OFDReader::::getPageInfo(int)",
      "319": "OFDReader::::getPageInfo(int)",
      "320": "OFDReader::::getPageInfo(int)",
      "321": "OFDReader::::getPageInfo(int)",
      "322": "OFDReader::::getPageInfo(int)",
      "323": "OFDReader::::getPageInfo(int)",
      "324": "OFDReader::::getPageInfo(int)",
      "325": "OFDReader::::getPageInfo(int)",
      "326": "OFDReader::::getPageInfo(int)",
      "327": "OFDReader::::getPageInfo(int)",
      "328": "OFDReader::::getPageInfo(int)",
      "329": "OFDReader::::getPageInfo(int)",
      "330": "OFDReader::::getPageInfo(int)",
      "331": "OFDReader::::getPageInfo(int)",
      "332": "OFDReader::::getPageInfo(int)",
      "333": "OFDReader::::getPageInfo(int)",
      "334": "OFDReader::::getPageInfo(int)",
      "335": "OFDReader::::getPageInfo(int)",
      "336": "OFDReader::::getPageInfo(int)",
      "337": "OFDReader::::getPageInfo(int)",
      "338": "OFDReader::::getPageInfo(int)",
      "339": "OFDReader::::getPageInfo(int)",
      "340": "OFDReader::::getPageInfo(int)",
      "341": "OFDReader::::getPageInfo(int)",
      "342": "OFDReader::::getPageInfo(int)",
      "343": "OFDReader::::getPageInfo(int)",
      "344": "OFDReader::::getPageInfo(int)",
      "345": "OFDReader::::getPageInfo(int)",
      "346": "OFDReader::::getPageInfo(int)",
      "347": "OFDReader::::getPageInfo(int)",
      "354": "OFDReader::::getPageList()",
      "355": "OFDReader::::getPageList()",
      "356": "OFDReader::::getPageList()",
      "357": "OFDReader::::getPageList()",
      "358": "OFDReader::::getPageList()",
      "359": "OFDReader::::getPageList()",
      "360": "OFDReader::::getPageList()",
      "361": "OFDReader::::getPageList()",
      "362": "OFDReader::::getPageList()",
      "363": "OFDReader::::getPageList()",
      "371": "OFDReader::::getTemplate(java.lang.String)",
      "372": "OFDReader::::getTemplate(java.lang.String)",
      "373": "OFDReader::::getTemplate(java.lang.String)",
      "374": "OFDReader::::getTemplate(java.lang.String)",
      "375": "OFDReader::::getTemplate(java.lang.String)",
      "376": "OFDReader::::getTemplate(java.lang.String)",
      "377": "OFDReader::::getTemplate(java.lang.String)",
      "378": "OFDReader::::getTemplate(java.lang.String)",
      "379": "OFDReader::::getTemplate(java.lang.String)",
      "380": "OFDReader::::getTemplate(java.lang.String)",
      "381": "OFDReader::::getTemplate(java.lang.String)",
      "382": "OFDReader::::getTemplate(java.lang.String)",
      "383": "OFDReader::::getTemplate(java.lang.String)",
      "384": "OFDReader::::getTemplate(java.lang.String)",
      "385": "OFDReader::::getTemplate(java.lang.String)",
      "386": "OFDReader::::getTemplate(java.lang.String)",
      "387": "OFDReader::::getTemplate(java.lang.String)",
      "388": "OFDReader::::getTemplate(java.lang.String)",
      "389": "OFDReader::::getTemplate(java.lang.String)",
      "390": "OFDReader::::getTemplate(java.lang.String)",
      "391": "OFDReader::::getTemplate(java.lang.String)",
      "392": "OFDReader::::getTemplate(java.lang.String)",
      "393": "OFDReader::::getTemplate(java.lang.String)",
      "394": "OFDReader::::getTemplate(java.lang.String)",
      "395": "OFDReader::::getTemplate(java.lang.String)",
      "396": "OFDReader::::getTemplate(java.lang.String)",
      "397": "OFDReader::::getTemplate(java.lang.String)",
      "398": "OFDReader::::getTemplate(java.lang.String)",
      "412": "OFDReader::::cdDoc(int)",
      "413": "OFDReader::::cdDoc(int)",
      "414": "OFDReader::::cdDoc(int)",
      "415": "OFDReader::::cdDoc(int)",
      "416": "OFDReader::::cdDoc(int)",
      "417": "OFDReader::::cdDoc(int)",
      "418": "OFDReader::::cdDoc(int)",
      "419": "OFDReader::::cdDoc(int)",
      "420": "OFDReader::::cdDoc(int)",
      "421": "OFDReader::::cdDoc(int)",
      "431": "OFDReader::::getDoc(int)",
      "432": "OFDReader::::getDoc(int)",
      "433": "OFDReader::::getDoc(int)",
      "434": "OFDReader::::getDoc(int)",
      "435": "OFDReader::::getDoc(int)",
      "436": "OFDReader::::getDoc(int)",
      "437": "OFDReader::::getDoc(int)",
      "438": "OFDReader::::getDoc(int)",
      "439": "OFDReader::::getDoc(int)",
      "440": "OFDReader::::getDoc(int)",
      "441": "OFDReader::::getDoc(int)",
      "454": "OFDReader::::cdDefaultDoc()",
      "455": "OFDReader::::cdDefaultDoc()",
      "456": "OFDReader::::cdDefaultDoc()",
      "482": "OFDReader::::getPageArea(int)",
      "483": "OFDReader::::getPageArea(int)",
      "484": "OFDReader::::getPageArea(int)",
      "485": "OFDReader::::getPageArea(int)",
      "493": "OFDReader::::getPageSize(int)",
      "494": "OFDReader::::getPageSize(int)",
      "495": "OFDReader::::getPageSize(int)",
      "496": "OFDReader::::getPageSize(int)",
      "554": "OFDReader::::getPage(int)",
      "555": "OFDReader::::getPage(int)",
      "556": "OFDReader::::getPage(int)",
      "557": "OFDReader::::getPage(int)",
      "558": "OFDReader::::getPage(int)",
      "559": "OFDReader::::getPage(int)",
      "560": "OFDReader::::getPage(int)",
      "561": "OFDReader::::getPage(int)",
      "571": "OFDReader::::getPageAbsLoc(int)",
      "572": "OFDReader::::getPageAbsLoc(int)",
      "573": "OFDReader::::getPageAbsLoc(int)",
      "574": "OFDReader::::getPageAbsLoc(int)",
      "575": "OFDReader::::getPageAbsLoc(int)",
      "576": "OFDReader::::getPageAbsLoc(int)",
      "577": "OFDReader::::getPageAbsLoc(int)",
      "578": "OFDReader::::getPageAbsLoc(int)",
      "579": "OFDReader::::getPageAbsLoc(int)",
      "580": "OFDReader::::getPageAbsLoc(int)",
      "581": "OFDReader::::getPageAbsLoc(int)",
      "582": "OFDReader::::getPageAbsLoc(int)",
      "583": "OFDReader::::getPageAbsLoc(int)",
      "584": "OFDReader::::getPageAbsLoc(int)",
      "585": "OFDReader::::getPageAbsLoc(int)",
      "586": "OFDReader::::getPageAbsLoc(int)",
      "587": "OFDReader::::getPageAbsLoc(int)",
      "588": "OFDReader::::getPageAbsLoc(int)",
      "589": "OFDReader::::getPageAbsLoc(int)",
      "590": "OFDReader::::getPageAbsLoc(int)",
      "591": "OFDReader::::getPageAbsLoc(int)",
      "592": "OFDReader::::getPageAbsLoc(int)",
      "593": "OFDReader::::getPageAbsLoc(int)",
      "594": "OFDReader::::getPageAbsLoc(int)",
      "595": "OFDReader::::getPageAbsLoc(int)",
      "603": "OFDReader::::getPageObjectId(int)",
      "604": "OFDReader::::getPageObjectId(int)",
      "605": "OFDReader::::getPageObjectId(int)",
      "606": "OFDReader::::getPageObjectId(int)",
      "607": "OFDReader::::getPageObjectId(int)",
      "608": "OFDReader::::getPageObjectId(int)",
      "609": "OFDReader::::getPageObjectId(int)",
      "610": "OFDReader::::getPageObjectId(int)",
      "611": "OFDReader::::getPageObjectId(int)",
      "612": "OFDReader::::getPageObjectId(int)",
      "613": "OFDReader::::getPageObjectId(int)",
      "614": "OFDReader::::getPageObjectId(int)",
      "615": "OFDReader::::getPageObjectId(int)",
      "616": "OFDReader::::getPageObjectId(int)",
      "617": "OFDReader::::getPageObjectId(int)",
      "618": "OFDReader::::getPageObjectId(int)",
      "619": "OFDReader::::getPageObjectId(int)",
      "620": "OFDReader::::getPageObjectId(int)",
      "621": "OFDReader::::getPageObjectId(int)",
      "622": "OFDReader::::getPageObjectId(int)",
      "623": "OFDReader::::getPageObjectId(int)",
      "624": "OFDReader::::getPageObjectId(int)",
      "625": "OFDReader::::getPageObjectId(int)",
      "626": "OFDReader::::getPageObjectId(int)",
      "627": "OFDReader::::getPageObjectId(int)",
      "628": "OFDReader::::getPageObjectId(int)",
      "629": "OFDReader::::getPageObjectId(int)",
      "636": "OFDReader::::getResourceLocator()",
      "637": "OFDReader::::getResourceLocator()",
      "638": "OFDReader::::getResourceLocator()",
      "648": "OFDReader::::getAttachmentList()",
      "649": "OFDReader::::getAttachmentList()",
      "650": "OFDReader::::getAttachmentList()",
      "651": "OFDReader::::getAttachmentList()",
      "652": "OFDReader::::getAttachmentList()",
      "653": "OFDReader::::getAttachmentList()",
      "654": "OFDReader::::getAttachmentList()",
      "655": "OFDReader::::getAttachmentList()",
      "656": "OFDReader::::getAttachmentList()",
      "657": "OFDReader::::getAttachmentList()",
      "658": "OFDReader::::getAttachmentList()",
      "659": "OFDReader::::getAttachmentList()",
      "660": "OFDReader::::getAttachmentList()",
      "661": "OFDReader::::getAttachmentList()",
      "662": "OFDReader::::getAttachmentList()",
      "663": "OFDReader::::getAttachmentList()",
      "664": "OFDReader::::getAttachmentList()",
      "665": "OFDReader::::getAttachmentList()",
      "666": "OFDReader::::getAttachmentList()",
      "667": "OFDReader::::getAttachmentList()",
      "668": "OFDReader::::getAttachmentList()",
      "669": "OFDReader::::getAttachmentList()",
      "670": "OFDReader::::getAttachmentList()",
      "671": "OFDReader::::getAttachmentList()",
      "672": "OFDReader::::getAttachmentList()",
      "673": "OFDReader::::getAttachmentList()",
      "674": "OFDReader::::getAttachmentList()",
      "675": "OFDReader::::getAttachmentList()",
      "676": "OFDReader::::getAttachmentList()",
      "677": "OFDReader::::getAttachmentList()",
      "678": "OFDReader::::getAttachmentList()",
      "679": "OFDReader::::getAttachmentList()",
      "680": "OFDReader::::getAttachmentList()",
      "681": "OFDReader::::getAttachmentList()",
      "682": "OFDReader::::getAttachmentList()",
      "683": "OFDReader::::getAttachmentList()",
      "684": "OFDReader::::getAttachmentList()",
      "685": "OFDReader::::getAttachmentList()",
      "686": "OFDReader::::getAttachmentList()",
      "687": "OFDReader::::getAttachmentList()",
      "688": "OFDReader::::getAttachmentList()",
      "719": "OFDReader::::getAttachment(java.lang.String)",
      "720": "OFDReader::::getAttachment(java.lang.String)",
      "721": "OFDReader::::getAttachment(java.lang.String)",
      "722": "OFDReader::::getAttachment(java.lang.String)",
      "723": "OFDReader::::getAttachment(java.lang.String)",
      "724": "OFDReader::::getAttachment(java.lang.String)",
      "725": "OFDReader::::getAttachment(java.lang.String)",
      "726": "OFDReader::::getAttachment(java.lang.String)",
      "727": "OFDReader::::getAttachment(java.lang.String)",
      "728": "OFDReader::::getAttachment(java.lang.String)",
      "729": "OFDReader::::getAttachment(java.lang.String)",
      "730": "OFDReader::::getAttachment(java.lang.String)",
      "731": "OFDReader::::getAttachment(java.lang.String)",
      "732": "OFDReader::::getAttachment(java.lang.String)",
      "733": "OFDReader::::getAttachment(java.lang.String)",
      "744": "OFDReader::::getAttachmentFile(java.lang.String)",
      "745": "OFDReader::::getAttachmentFile(java.lang.String)",
      "746": "OFDReader::::getAttachmentFile(java.lang.String)",
      "747": "OFDReader::::getAttachmentFile(java.lang.String)",
      "748": "OFDReader::::getAttachmentFile(java.lang.String)",
      "749": "OFDReader::::getAttachmentFile(java.lang.String)",
      "750": "OFDReader::::getAttachmentFile(java.lang.String)",
      "751": "OFDReader::::getAttachmentFile(java.lang.String)",
      "752": "OFDReader::::getAttachmentFile(java.lang.String)",
      "753": "OFDReader::::getAttachmentFile(java.lang.String)",
      "754": "OFDReader::::getAttachmentFile(java.lang.String)",
      "755": "OFDReader::::getAttachmentFile(java.lang.String)",
      "756": "OFDReader::::getAttachmentFile(java.lang.String)",
      "757": "OFDReader::::getAttachmentFile(java.lang.String)",
      "758": "OFDReader::::getAttachmentFile(java.lang.String)",
      "759": "OFDReader::::getAttachmentFile(java.lang.String)",
      "760": "OFDReader::::getAttachmentFile(java.lang.String)",
      "761": "OFDReader::::getAttachmentFile(java.lang.String)",
      "762": "OFDReader::::getAttachmentFile(java.lang.String)",
      "763": "OFDReader::::getAttachmentFile(java.lang.String)",
      "764": "OFDReader::::getAttachmentFile(java.lang.String)",
      "775": "OFDReader::::getAttachment(java.lang.String,org.ofdrw.reader.ResourceLocator)",
      "776": "OFDReader::::getAttachment(java.lang.String,org.ofdrw.reader.ResourceLocator)",
      "777": "OFDReader::::getAttachment(java.lang.String,org.ofdrw.reader.ResourceLocator)",
      "778": "OFDReader::::getAttachment(java.lang.String,org.ofdrw.reader.ResourceLocator)",
      "779": "OFDReader::::getAttachment(java.lang.String,org.ofdrw.reader.ResourceLocator)",
      "780": "OFDReader::::getAttachment(java.lang.String,org.ofdrw.reader.ResourceLocator)",
      "781": "OFDReader::::getAttachment(java.lang.String,org.ofdrw.reader.ResourceLocator)",
      "782": "OFDReader::::getAttachment(java.lang.String,org.ofdrw.reader.ResourceLocator)",
      "783": "OFDReader::::getAttachment(java.lang.String,org.ofdrw.reader.ResourceLocator)",
      "784": "OFDReader::::getAttachment(java.lang.String,org.ofdrw.reader.ResourceLocator)",
      "785": "OFDReader::::getAttachment(java.lang.String,org.ofdrw.reader.ResourceLocator)",
      "786": "OFDReader::::getAttachment(java.lang.String,org.ofdrw.reader.ResourceLocator)",
      "787": "OFDReader::::getAttachment(java.lang.String,org.ofdrw.reader.ResourceLocator)",
      "788": "OFDReader::::getAttachment(java.lang.String,org.ofdrw.reader.ResourceLocator)",
      "789": "OFDReader::::getAttachment(java.lang.String,org.ofdrw.reader.ResourceLocator)",
      "790": "OFDReader::::getAttachment(java.lang.String,org.ofdrw.reader.ResourceLocator)",
      "791": "OFDReader::::getAttachment(java.lang.String,org.ofdrw.reader.ResourceLocator)",
      "792": "OFDReader::::getAttachment(java.lang.String,org.ofdrw.reader.ResourceLocator)",
      "793": "OFDReader::::getAttachment(java.lang.String,org.ofdrw.reader.ResourceLocator)",
      "794": "OFDReader::::getAttachment(java.lang.String,org.ofdrw.reader.ResourceLocator)",
      "795": "OFDReader::::getAttachment(java.lang.String,org.ofdrw.reader.ResourceLocator)",
      "796": "OFDReader::::getAttachment(java.lang.String,org.ofdrw.reader.ResourceLocator)",
      "797": "OFDReader::::getAttachment(java.lang.String,org.ofdrw.reader.ResourceLocator)",
      "798": "OFDReader::::getAttachment(java.lang.String,org.ofdrw.reader.ResourceLocator)",
      "799": "OFDReader::::getAttachment(java.lang.String,org.ofdrw.reader.ResourceLocator)",
      "800": "OFDReader::::getAttachment(java.lang.String,org.ofdrw.reader.ResourceLocator)",
      "801": "OFDReader::::getAttachment(java.lang.String,org.ofdrw.reader.ResourceLocator)",
      "802": "OFDReader::::getAttachment(java.lang.String,org.ofdrw.reader.ResourceLocator)",
      "803": "OFDReader::::getAttachment(java.lang.String,org.ofdrw.reader.ResourceLocator)",
      "804": "OFDReader::::getAttachment(java.lang.String,org.ofdrw.reader.ResourceLocator)",
      "805": "OFDReader::::getAttachment(java.lang.String,org.ofdrw.reader.ResourceLocator)",
      "806": "OFDReader::::getAttachment(java.lang.String,org.ofdrw.reader.ResourceLocator)",
      "807": "OFDReader::::getAttachment(java.lang.String,org.ofdrw.reader.ResourceLocator)",
      "808": "OFDReader::::getAttachment(java.lang.String,org.ofdrw.reader.ResourceLocator)",
      "809": "OFDReader::::getAttachment(java.lang.String,org.ofdrw.reader.ResourceLocator)",
      "810": "OFDReader::::getAttachment(java.lang.String,org.ofdrw.reader.ResourceLocator)",
      "811": "OFDReader::::getAttachment(java.lang.String,org.ofdrw.reader.ResourceLocator)",
      "812": "OFDReader::::getAttachment(java.lang.String,org.ofdrw.reader.ResourceLocator)",
      "813": "OFDReader::::getAttachment(java.lang.String,org.ofdrw.reader.ResourceLocator)",
      "814": "OFDReader::::getAttachment(java.lang.String,org.ofdrw.reader.ResourceLocator)",
      "822": "OFDReader::::getStampAnnots()",
      "823": "OFDReader::::getStampAnnots()",
      "824": "OFDReader::::getStampAnnots()",
      "825": "OFDReader::::getStampAnnots()",
      "826": "OFDReader::::getStampAnnots()",
      "827": "OFDReader::::getStampAnnots()",
      "828": "OFDReader::::getStampAnnots()",
      "829": "OFDReader::::getStampAnnots()",
      "830": "OFDReader::::getStampAnnots()",
      "831": "OFDReader::::getStampAnnots()",
      "832": "OFDReader::::getStampAnnots()",
      "833": "OFDReader::::getStampAnnots()",
      "834": "OFDReader::::getStampAnnots()",
      "835": "OFDReader::::getStampAnnots()",
      "836": "OFDReader::::getStampAnnots()",
      "837": "OFDReader::::getStampAnnots()",
      "838": "OFDReader::::getStampAnnots()",
      "839": "OFDReader::::getStampAnnots()",
      "840": "OFDReader::::getStampAnnots()",
      "841": "OFDReader::::getStampAnnots()",
      "842": "OFDReader::::getStampAnnots()",
      "843": "OFDReader::::getStampAnnots()",
      "844": "OFDReader::::getStampAnnots()",
      "845": "OFDReader::::getStampAnnots()",
      "846": "OFDReader::::getStampAnnots()",
      "847": "OFDReader::::getStampAnnots()",
      "848": "OFDReader::::getStampAnnots()",
      "849": "OFDReader::::getStampAnnots()",
      "850": "OFDReader::::getStampAnnots()",
      "851": "OFDReader::::getStampAnnots()",
      "852": "OFDReader::::getStampAnnots()",
      "853": "OFDReader::::getStampAnnots()",
      "854": "OFDReader::::getStampAnnots()",
      "855": "OFDReader::::getStampAnnots()",
      "856": "OFDReader::::getStampAnnots()",
      "857": "OFDReader::::getStampAnnots()",
      "858": "OFDReader::::getStampAnnots()",
      "859": "OFDReader::::getStampAnnots()",
      "860": "OFDReader::::getStampAnnots()",
      "861": "OFDReader::::getStampAnnots()",
      "862": "OFDReader::::getStampAnnots()",
      "863": "OFDReader::::getStampAnnots()",
      "864": "OFDReader::::getStampAnnots()",
      "865": "OFDReader::::getStampAnnots()",
      "866": "OFDReader::::getStampAnnots()",
      "867": "OFDReader::::getStampAnnots()",
      "868": "OFDReader::::getStampAnnots()",
      "869": "OFDReader::::getStampAnnots()",
      "870": "OFDReader::::getStampAnnots()",
      "871": "OFDReader::::getStampAnnots()",
      "872": "OFDReader::::getStampAnnots()",
      "873": "OFDReader::::getStampAnnots()",
      "874": "OFDReader::::getStampAnnots()",
      "875": "OFDReader::::getStampAnnots()",
      "876": "OFDReader::::getStampAnnots()",
      "877": "OFDReader::::getStampAnnots()",
      "878": "OFDReader::::getStampAnnots()",
      "885": "OFDReader::::getAnnotationEntities()",
      "886": "OFDReader::::getAnnotationEntities()",
      "887": "OFDReader::::getAnnotationEntities()",
      "888": "OFDReader::::getAnnotationEntities()",
      "889": "OFDReader::::getAnnotationEntities()",
      "890": "OFDReader::::getAnnotationEntities()",
      "891": "OFDReader::::getAnnotationEntities()",
      "892": "OFDReader::::getAnnotationEntities()",
      "893": "OFDReader::::getAnnotationEntities()",
      "894": "OFDReader::::getAnnotationEntities()",
      "895": "OFDReader::::getAnnotationEntities()",
      "896": "OFDReader::::getAnnotationEntities()",
      "897": "OFDReader::::getAnnotationEntities()",
      "898": "OFDReader::::getAnnotationEntities()",
      "899": "OFDReader::::getAnnotationEntities()",
      "900": "OFDReader::::getAnnotationEntities()",
      "901": "OFDReader::::getAnnotationEntities()",
      "902": "OFDReader::::getAnnotationEntities()",
      "903": "OFDReader::::getAnnotationEntities()",
      "904": "OFDReader::::getAnnotationEntities()",
      "905": "OFDReader::::getAnnotationEntities()",
      "906": "OFDReader::::getAnnotationEntities()",
      "907": "OFDReader::::getAnnotationEntities()",
      "908": "OFDReader::::getAnnotationEntities()",
      "909": "OFDReader::::getAnnotationEntities()",
      "910": "OFDReader::::getAnnotationEntities()",
      "911": "OFDReader::::getAnnotationEntities()",
      "912": "OFDReader::::getAnnotationEntities()",
      "913": "OFDReader::::getAnnotationEntities()",
      "914": "OFDReader::::getAnnotationEntities()",
      "915": "OFDReader::::getAnnotationEntities()",
      "916": "OFDReader::::getAnnotationEntities()",
      "917": "OFDReader::::getAnnotationEntities()",
      "918": "OFDReader::::getAnnotationEntities()",
      "927": "OFDReader::::getResMgt()",
      "928": "OFDReader::::getResMgt()",
      "929": "OFDReader::::getResMgt()",
      "940": "OFDReader::::setNamespaceStrictMode(boolean)",
      "941": "OFDReader::::setNamespaceStrictMode(boolean)",
      "942": "OFDReader::::setNamespaceStrictMode(boolean)",
      "951": "OFDReader::::close()",
      "952": "OFDReader::::close()",
      "953": "OFDReader::::close()",
      "954": "OFDReader::::close()",
      "955": "OFDReader::::close()",
      "956": "OFDReader::::close()",
      "957": "OFDReader::::close()",
      "958": "OFDReader::::close()",
      "959": "OFDReader::::close()",
      "960": "OFDReader::::close()",
      "961": "OFDReader::::close()",
      "962": "OFDReader::::close()",
      "963": "OFDReader::::close()",
      "964": "OFDReader::::close()"
    },
    "test_reverse_method_lines_dic": {
      "39": "OFDReaderTest::::testChineseDirName()",
      "40": "OFDReaderTest::::testChineseDirName()",
      "41": "OFDReaderTest::::testChineseDirName()",
      "42": "OFDReaderTest::::testChineseDirName()",
      "43": "OFDReaderTest::::testChineseDirName()",
      "44": "OFDReaderTest::::testChineseDirName()",
      "45": "OFDReaderTest::::testChineseDirName()",
      "46": "OFDReaderTest::::testChineseDirName()",
      "47": "OFDReaderTest::::testChineseDirName()",
      "48": "OFDReaderTest::::testChineseDirName()",
      "49": "OFDReaderTest::::testChineseDirName()",
      "50": "OFDReaderTest::::testChineseDirName()",
      "51": "OFDReaderTest::::testChineseDirName()",
      "52": "OFDReaderTest::::testChineseDirName()",
      "53": "OFDReaderTest::::testChineseDirName()",
      "54": "OFDReaderTest::::testChineseDirName()",
      "55": "OFDReaderTest::::testChineseDirName()",
      "56": "OFDReaderTest::::testChineseDirName()",
      "63": "OFDReaderTest::::getAttachment()",
      "64": "OFDReaderTest::::getAttachment()",
      "65": "OFDReaderTest::::getAttachment()",
      "66": "OFDReaderTest::::getAttachment()",
      "67": "OFDReaderTest::::getAttachment()",
      "68": "OFDReaderTest::::getAttachment()",
      "69": "OFDReaderTest::::getAttachment()",
      "70": "OFDReaderTest::::getAttachment()",
      "71": "OFDReaderTest::::getAttachment()",
      "72": "OFDReaderTest::::getAttachment()",
      "73": "OFDReaderTest::::getAttachment()",
      "74": "OFDReaderTest::::getAttachment()",
      "75": "OFDReaderTest::::getAttachment()",
      "76": "OFDReaderTest::::getAttachment()",
      "77": "OFDReaderTest::::getAttachment()",
      "78": "OFDReaderTest::::getAttachment()",
      "79": "OFDReaderTest::::getAttachment()",
      "82": "OFDReaderTest::::oFDReader()",
      "83": "OFDReaderTest::::oFDReader()",
      "84": "OFDReaderTest::::oFDReader()",
      "85": "OFDReaderTest::::oFDReader()",
      "86": "OFDReaderTest::::oFDReader()",
      "87": "OFDReaderTest::::oFDReader()",
      "88": "OFDReaderTest::::oFDReader()",
      "89": "OFDReaderTest::::oFDReader()",
      "90": "OFDReaderTest::::oFDReader()",
      "91": "OFDReaderTest::::oFDReader()",
      "93": "OFDReaderTest::::close()",
      "94": "OFDReaderTest::::close()",
      "95": "OFDReaderTest::::close()",
      "96": "OFDReaderTest::::close()",
      "97": "OFDReaderTest::::close()",
      "98": "OFDReaderTest::::close()",
      "99": "OFDReaderTest::::close()",
      "100": "OFDReaderTest::::close()",
      "101": "OFDReaderTest::::close()",
      "103": "OFDReaderTest::::getOFDDir()",
      "104": "OFDReaderTest::::getOFDDir()",
      "105": "OFDReaderTest::::getOFDDir()",
      "106": "OFDReaderTest::::getOFDDir()",
      "107": "OFDReaderTest::::getOFDDir()",
      "108": "OFDReaderTest::::getOFDDir()",
      "109": "OFDReaderTest::::getOFDDir()",
      "110": "OFDReaderTest::::getOFDDir()",
      "111": "OFDReaderTest::::getOFDDir()",
      "114": "OFDReaderTest::::getPage()",
      "115": "OFDReaderTest::::getPage()",
      "116": "OFDReaderTest::::getPage()",
      "117": "OFDReaderTest::::getPage()",
      "118": "OFDReaderTest::::getPage()",
      "119": "OFDReaderTest::::getPage()",
      "120": "OFDReaderTest::::getPage()",
      "121": "OFDReaderTest::::getPage()",
      "124": "OFDReaderTest::::testReader()",
      "125": "OFDReaderTest::::testReader()",
      "126": "OFDReaderTest::::testReader()",
      "127": "OFDReaderTest::::testReader()",
      "128": "OFDReaderTest::::testReader()",
      "129": "OFDReaderTest::::testReader()",
      "130": "OFDReaderTest::::testReader()",
      "131": "OFDReaderTest::::testReader()",
      "132": "OFDReaderTest::::testReader()",
      "133": "OFDReaderTest::::testReader()",
      "134": "OFDReaderTest::::testReader()",
      "135": "OFDReaderTest::::testReader()",
      "136": "OFDReaderTest::::testReader()",
      "137": "OFDReaderTest::::testReader()",
      "138": "OFDReaderTest::::testReader()",
      "139": "OFDReaderTest::::testReader()",
      "140": "OFDReaderTest::::testReader()",
      "141": "OFDReaderTest::::testReader()",
      "150": "OFDReaderTest::::lowLevelOp()",
      "151": "OFDReaderTest::::lowLevelOp()",
      "152": "OFDReaderTest::::lowLevelOp()",
      "153": "OFDReaderTest::::lowLevelOp()",
      "154": "OFDReaderTest::::lowLevelOp()",
      "155": "OFDReaderTest::::lowLevelOp()",
      "156": "OFDReaderTest::::lowLevelOp()",
      "157": "OFDReaderTest::::lowLevelOp()",
      "158": "OFDReaderTest::::lowLevelOp()",
      "159": "OFDReaderTest::::lowLevelOp()",
      "160": "OFDReaderTest::::lowLevelOp()",
      "161": "OFDReaderTest::::lowLevelOp()",
      "162": "OFDReaderTest::::lowLevelOp()",
      "163": "OFDReaderTest::::lowLevelOp()",
      "164": "OFDReaderTest::::lowLevelOp()",
      "165": "OFDReaderTest::::lowLevelOp()",
      "166": "OFDReaderTest::::lowLevelOp()",
      "167": "OFDReaderTest::::lowLevelOp()",
      "168": "OFDReaderTest::::lowLevelOp()",
      "169": "OFDReaderTest::::lowLevelOp()",
      "170": "OFDReaderTest::::lowLevelOp()",
      "171": "OFDReaderTest::::lowLevelOp()",
      "172": "OFDReaderTest::::lowLevelOp()",
      "173": "OFDReaderTest::::lowLevelOp()",
      "174": "OFDReaderTest::::lowLevelOp()",
      "175": "OFDReaderTest::::lowLevelOp()",
      "176": "OFDReaderTest::::lowLevelOp()",
      "177": "OFDReaderTest::::lowLevelOp()",
      "179": "OFDReaderTest::::getStampAnnots()",
      "180": "OFDReaderTest::::getStampAnnots()",
      "181": "OFDReaderTest::::getStampAnnots()",
      "182": "OFDReaderTest::::getStampAnnots()",
      "183": "OFDReaderTest::::getStampAnnots()",
      "184": "OFDReaderTest::::getStampAnnots()",
      "185": "OFDReaderTest::::getStampAnnots()",
      "186": "OFDReaderTest::::getStampAnnots()",
      "187": "OFDReaderTest::::getStampAnnots()",
      "190": "OFDReaderTest::::getPageSize()",
      "191": "OFDReaderTest::::getPageSize()",
      "192": "OFDReaderTest::::getPageSize()",
      "193": "OFDReaderTest::::getPageSize()",
      "194": "OFDReaderTest::::getPageSize()",
      "195": "OFDReaderTest::::getPageSize()",
      "196": "OFDReaderTest::::getPageSize()",
      "197": "OFDReaderTest::::getPageSize()"
    },
    "tests": [
      {
        "test_lines": [
          63,
          79
        ],
        "covered_lines": [
          71,
          102,
          103,
          106,
          108,
          109,
          111,
          112,
          113,
          172,
          637,
          649,
          651,
          652,
          653,
          654,
          656,
          659,
          660,
          661,
          666,
          670,
          672,
          673,
          674,
          677,
          678,
          680,
          681,
          682,
          684,
          686,
          720,
          724,
          726,
          728,
          731,
          732,
          745,
          748,
          750,
          751,
          752,
          754,
          756,
          762,
          776,
          780,
          781,
          782,
          783,
          785,
          788,
          789,
          790,
          796,
          800,
          802,
          803,
          804,
          807,
          809,
          810,
          812,
          813,
          953,
          956,
          957,
          959,
          962,
          964
        ]
      },
      {
        "test_lines": [
          82,
          91
        ],
        "covered_lines": [
          71,
          82,
          102,
          103,
          104,
          106,
          108,
          109,
          111,
          112,
          113,
          172,
          637
        ]
      },
      {
        "test_lines": [
          93,
          101
        ],
        "covered_lines": [
          71,
          82,
          102,
          103,
          106,
          108,
          109,
          111,
          112,
          113,
          172,
          637,
          953,
          956,
          957,
          959,
          962,
          964
        ]
      },
      {
        "test_lines": [
          103,
          111
        ],
        "covered_lines": [
          71,
          102,
          103,
          106,
          108,
          109,
          111,
          112,
          113,
          172,
          637,
          953,
          956,
          957,
          959,
          962,
          964
        ]
      },
      {
        "test_lines": [
          114,
          121
        ],
        "covered_lines": [
          71,
          102,
          103,
          106,
          108,
          109,
          111,
          112,
          113,
          172,
          413,
          414,
          415,
          416,
          417,
          419,
          420,
          455,
          555,
          557,
          572,
          576,
          577,
          579,
          580,
          581,
          582,
          586,
          587,
          588,
          593,
          637,
          953,
          956,
          957,
          959,
          962,
          964
        ]
      },
      {
        "test_lines": [
          124,
          141
        ],
        "covered_lines": [
          71,
          102,
          103,
          106,
          108,
          109,
          111,
          112,
          113,
          172,
          637
        ]
      },
      {
        "test_lines": [
          150,
          177
        ],
        "covered_lines": [
          71,
          102,
          103,
          106,
          108,
          109,
          111,
          112,
          113,
          172,
          637,
          953,
          956,
          957,
          959,
          962,
          964
        ]
      },
      {
        "test_lines": [
          179,
          187
        ],
        "covered_lines": [
          71,
          102,
          103,
          106,
          108,
          109,
          111,
          112,
          113,
          172,
          183,
          184,
          185,
          187,
          188,
          192,
          193,
          197,
          209,
          211,
          217,
          230,
          232,
          233,
          234,
          637,
          823,
          829,
          831,
          832,
          835,
          837,
          838,
          839,
          840,
          841,
          842,
          845,
          847,
          848,
          850,
          852,
          854,
          855,
          866,
          867,
          872,
          873,
          874,
          876,
          953,
          956,
          957,
          959,
          962,
          964
        ]
      },
      {
        "test_lines": [
          190,
          197
        ],
        "covered_lines": [
          71,
          102,
          103,
          106,
          108,
          109,
          111,
          112,
          113,
          172,
          413,
          414,
          415,
          416,
          417,
          419,
          420,
          455,
          467,
          468,
          472,
          494,
          495,
          505,
          506,
          508,
          509,
          555,
          557,
          572,
          576,
          577,
          579,
          580,
          581,
          582,
          586,
          587,
          588,
          593,
          637,
          953,
          956,
          957,
          959,
          962,
          964
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/ofdrw/ofdrw-reader/src/main/java/org/ofdrw/reader/ContentExtractor.java": {
    "class_content": [
      "package org.ofdrw.reader;\n",
      "\n",
      "import org.ofdrw.core.basicStructure.pageObj.Content;\n",
      "import org.ofdrw.core.basicStructure.pageObj.layer.CT_Layer;\n",
      "import org.ofdrw.core.basicStructure.pageObj.layer.PageBlockType;\n",
      "import org.ofdrw.core.basicStructure.pageObj.layer.block.CT_PageBlock;\n",
      "import org.ofdrw.core.basicStructure.pageObj.layer.block.TextObject;\n",
      "import org.ofdrw.core.text.TextCode;\n",
      "import org.ofdrw.reader.extractor.ExtractorFilter;\n",
      "\n",
      "import java.util.Collections;\n",
      "import java.util.LinkedList;\n",
      "import java.util.List;\n",
      "\n",
      "/**\n",
      " * \u5185\u5bb9\u62bd\u53d6\u5668\n",
      " *\n",
      " * @author \u6743\u89c2\u5b87, minghu-zhang\n",
      " * @since 2020-09-21 22:53:09\n",
      " */\n",
      "public class ContentExtractor {\n",
      "    /**\n",
      "     * \u89e3\u6790\u7ed3\u679c\u63a5\u6536\u5668\n",
      "     */\n",
      "    @FunctionalInterface\n",
      "    static public interface Receiver {\n",
      "        /**\n",
      "         * \u5904\u7406\u89e3\u6790\u5b8c\u6210\u7684\u6587\u672c\n",
      "         *\n",
      "         * @param pageNum  \u9875\u7801\n",
      "         * @param contents \u62bd\u53d6\u5f97\u5230\u7684\u9875\u9762\u6587\u5b57\u5185\u5bb9\n",
      "         */\n",
      "        void process(int pageNum, List<String> contents);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * OFD\u89e3\u6790\u5668\n",
      "     */\n",
      "    private OFDReader reader;\n",
      "    /**\n",
      "     * \u6587\u672c\u62bd\u53d6\u8fc7\u6ee4\u5668\n",
      "     */\n",
      "    private ExtractorFilter filter;\n",
      "\n",
      "    private ContentExtractor() {\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u6784\u9020\u6587\u5b57\u62bd\u53d6\u5668\n",
      "     *\n",
      "     * @param reader OFD\u89e3\u6790\u5668\n",
      "     */\n",
      "    public ContentExtractor(OFDReader reader) {\n",
      "        this.reader = reader;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u6784\u9020\u6587\u5b57\u62bd\u53d6\u5668\n",
      "     *\n",
      "     * @param filter \u6587\u672c\u62bd\u53d6\u8fc7\u6ee4\u5668\n",
      "     * @param reader OFD\u89e3\u6790\u5668\n",
      "     */\n",
      "    public ContentExtractor(OFDReader reader, ExtractorFilter filter) {\n",
      "        this.reader = reader;\n",
      "        this.filter = filter;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u62bd\u53d6\u6307\u5b9a\u9875\u9762\u5185\u7684\u6240\u6709\u6587\u5b57\n",
      "     *\n",
      "     * @param pageNum \u9875\u7801\uff0c\u4ece1\u5f00\u59cb\n",
      "     * @return \u9875\u9762\u5185\u5bb9\u7684\u6240\u6709\u6587\u672c\u5185\u5bb9\u5e8f\u5217\n",
      "     */\n",
      "    public List<String> getPageContent(int pageNum) {\n",
      "        Content ofdContentObj = reader.getPage(pageNum).getContent();\n",
      "        if (ofdContentObj == null) {\n",
      "            return Collections.emptyList();\n",
      "        }\n",
      "\n",
      "        List<String> txtContentList = new LinkedList<>();\n",
      "        List<CT_Layer> layers = ofdContentObj.getLayers();\n",
      "        // \u5982\u679c\u9875\u9762\u542b\u6709\u591a\u4e2a\u5c42\u90a3\u4e48\u5206\u5c42\u904d\u5386\n",
      "        for (CT_Layer layer : layers) {\n",
      "            // \u904d\u5386\u6240\u6709\u9875\u5757\n",
      "            pageBlockHandle(txtContentList, layer.getPageBlocks());\n",
      "        }\n",
      "        return txtContentList;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u62bd\u53d6\u6307\u5b9a\u9875\u9762\u5185\u7684\u6240\u6709\u6587\u5b57Text\u5bf9\u8c61\n",
      "     *\n",
      "     * @param pageNum \u9875\u7801\uff0c\u4ece1\u5f00\u59cb\n",
      "     * @return \u9875\u9762\u5185\u5bb9\u7684\u6240\u6709\u6587\u672c\u5185\u5bb9\u5e8f\u5217\n",
      "     */\n",
      "    public List<TextObject> getPageTextObject(int pageNum) {\n",
      "        Content ofdContentObj = reader.getPage(pageNum).getContent();\n",
      "        if (ofdContentObj == null) {\n",
      "            return Collections.emptyList();\n",
      "        }\n",
      "\n",
      "        List<TextObject> txtContentList = new LinkedList<>();\n",
      "        List<CT_Layer> layers = ofdContentObj.getLayers();\n",
      "        // \u5982\u679c\u9875\u9762\u542b\u6709\u591a\u4e2a\u5c42\u90a3\u4e48\u5206\u5c42\u904d\u5386\n",
      "        for (CT_Layer layer : layers) {\n",
      "            // \u904d\u5386\u6240\u6709\u9875\u5757\n",
      "            pageBlockTextObjectHandle(txtContentList, layer.getPageBlocks());\n",
      "        }\n",
      "        return txtContentList;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u9875\u5757\u5904\u7406\n",
      "     *\n",
      "     * @param txtContentList \u6587\u672c\u5217\u8868\n",
      "     * @param pageBlocks     \u9875\u5757\u5217\u8868\n",
      "     */\n",
      "    private void pageBlockHandle(List<String> txtContentList, List<PageBlockType> pageBlocks) {\n",
      "        for (PageBlockType block : pageBlocks) {\n",
      "            // \u627e\u51fa\u6240\u6709\u7684\u6587\u5b57\u5bf9\u8c61\n",
      "            if (block instanceof TextObject) {\n",
      "                TextObject text = (TextObject) block;\n",
      "                List<TextCode> textCodes = text.getTextCodes();\n",
      "                for (TextCode code : textCodes) {\n",
      "                    if (filter != null) {\n",
      "                        String allowText = filter.getAllowText(text, code);\n",
      "                        if(allowText != null && !\"\".equals(allowText.trim())) {\n",
      "                            txtContentList.add(allowText);\n",
      "                        }\n",
      "                    } else {\n",
      "                        txtContentList.add(code.getContent());\n",
      "                    }\n",
      "                }\n",
      "            } else if (block instanceof CT_PageBlock) {\n",
      "                CT_PageBlock ctPageBlock = (CT_PageBlock) block;\n",
      "                pageBlockHandle(txtContentList, ctPageBlock.getPageBlocks());\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u9875\u5757\u5904\u7406\n",
      "     *\n",
      "     * @param textObjectList \u6587\u672c\u5bf9\u8c61\u5217\u8868\n",
      "     * @param pageBlocks     \u9875\u5757\u5217\u8868\n",
      "     */\n",
      "    private void pageBlockTextObjectHandle(List<TextObject> textObjectList, List<PageBlockType> pageBlocks) {\n",
      "        for (PageBlockType block : pageBlocks) {\n",
      "            // \u627e\u51fa\u6240\u6709\u7684\u6587\u5b57\u5bf9\u8c61\n",
      "            if (block instanceof TextObject) {\n",
      "                TextObject text = (TextObject) block;\n",
      "                List<TextCode> textCodes = text.getTextCodes();\n",
      "                if (filter != null) {\n",
      "                    for (TextCode code : textCodes) {\n",
      "                        String allowText = filter.getAllowText(text, code);\n",
      "                        if(allowText != null && !\"\".equals(allowText.trim())) {\n",
      "                            textObjectList.add(text);\n",
      "                            break;\n",
      "                        }\n",
      "                    }\n",
      "                }else{\n",
      "                    textObjectList.add(text);\n",
      "                }\n",
      "            } else if (block instanceof CT_PageBlock) {\n",
      "                CT_PageBlock ctPageBlock = (CT_PageBlock) block;\n",
      "                pageBlockTextObjectHandle(textObjectList, ctPageBlock.getPageBlocks());\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6OFD\u5185\u7684\u6240\u6709\u6587\u672c\u5185\u5bb9\n",
      "     *\n",
      "     * @return OFD\u4e2d\u6240\u6709\u6587\u672c\u5185\u5bb9\n",
      "     */\n",
      "    public List<String> extractAll() {\n",
      "        int numberOfPages = reader.getNumberOfPages();\n",
      "        List<String> txtContentList = new LinkedList<>();\n",
      "        for (int pageNum = 1; pageNum <= numberOfPages; pageNum++) {\n",
      "            List<String> pageContent = getPageContent(pageNum);\n",
      "            if (pageContent != null && !pageContent.isEmpty()) {\n",
      "                txtContentList.addAll(pageContent);\n",
      "            }\n",
      "        }\n",
      "        return txtContentList;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6OFD\u5185\u7684\u6240\u6709TextObject\n",
      "     *\n",
      "     * @return OFD\u4e2d\u6240\u6709\u6587\u672c\u5bf9\u8c61\n",
      "     */\n",
      "    public List<TextObject> extractAllTextObject() {\n",
      "        int numberOfPages = reader.getNumberOfPages();\n",
      "        List<TextObject> txtObjectList = new LinkedList<>();\n",
      "        for (int pageNum = 1; pageNum <= numberOfPages; pageNum++) {\n",
      "            List<TextObject> pageTextObject = getPageTextObject(pageNum);\n",
      "            if (pageTextObject != null && !pageTextObject.isEmpty()) {\n",
      "                txtObjectList.addAll(pageTextObject);\n",
      "            }\n",
      "        }\n",
      "        return txtObjectList;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u904d\u5386\u6240\u6709\u9875\u9762\n",
      "     *\n",
      "     * @param e \u63a5\u53d7\n",
      "     */\n",
      "    public void traverse(Receiver e) {\n",
      "        int numberOfPages = reader.getNumberOfPages();\n",
      "        for (int pageNum = 1; pageNum <= numberOfPages; pageNum++) {\n",
      "            List<String> pageContent = getPageContent(pageNum);\n",
      "            if (pageContent != null && !pageContent.isEmpty() && e != null) {\n",
      "                e.process(pageNum, pageContent);\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package org.ofdrw.reader;\n",
      "\n",
      "import org.junit.jupiter.api.Test;\n",
      "import org.ofdrw.core.basicStructure.doc.CT_PageArea;\n",
      "import org.ofdrw.core.basicStructure.pageObj.Page;\n",
      "import org.ofdrw.core.basicType.ST_Box;\n",
      "import org.ofdrw.reader.extractor.ExtractorFilter;\n",
      "import org.ofdrw.reader.extractor.RegionTextExtractorFilter;\n",
      "\n",
      "import java.awt.*;\n",
      "import java.io.IOException;\n",
      "import java.nio.file.Path;\n",
      "import java.nio.file.Paths;\n",
      "import java.util.List;\n",
      "\n",
      "import static org.junit.jupiter.api.Assertions.assertEquals;\n",
      "\n",
      "/**\n",
      " * \u5185\u5bb9\u62bd\u53d6\u6d4b\u8bd5\u7528\u4f8b\n",
      " *\n",
      " * @since 2020-09-21 23:09:24\n",
      " */\n",
      "class ContentExtractorTest {\n",
      "\n",
      "    private Path src = Paths.get(\"src/test/resources/helloworld.ofd\");\n",
      "\n",
      "    /**\n",
      "     * \u63d0\u53d6\u6307\u5b9a\u9875\u9762\u7684\u6587\u672c\n",
      "     */\n",
      "    @Test\n",
      "    void getPageContent() throws IOException {\n",
      "        try (OFDReader reader = new OFDReader(src)) {\n",
      "            ContentExtractor extractor = new ContentExtractor(reader);\n",
      "\n",
      "            List<String> pageContent = extractor.getPageContent(1);\n",
      "            System.out.println(pageContent);\n",
      "            assertEquals(pageContent.size(), 1);\n",
      "            assertEquals(\"\u4f60\u597d\u5440\uff0cOFD Reader&Writer\uff01\", pageContent.get(0));\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u63d0\u53d6\u77e9\u5f62\u533a\u57df\u5185\u7684\u6587\u5b57\n",
      "     */\n",
      "    @Test\n",
      "    void extractByFilter() throws IOException {\n",
      "        try (OFDReader reader = new OFDReader(\"src/test/resources/keyword.ofd\")) {\n",
      "            CT_PageArea area = reader.getPage(1).getArea();\n",
      "            System.out.println(area.getPhysicalBox());\n",
      "            Rectangle rectangle = new Rectangle(0, 0, 283, 120);\n",
      "            ExtractorFilter filter = new RegionTextExtractorFilter(rectangle);\n",
      "            ContentExtractor extractor = new ContentExtractor(reader, filter);\n",
      "\n",
      "            List<String> pageContent = extractor.getPageContent(1);\n",
      "            System.out.println(pageContent);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u63d0\u53d6\u6240\u6709\u9875\u9762\u51fa\u73b0\u7684\u6587\u672c\n",
      "     */\n",
      "    @Test\n",
      "    void extractAll() throws IOException {\n",
      "        try (OFDReader reader = new OFDReader(src)) {\n",
      "            ContentExtractor extractor = new ContentExtractor(reader);\n",
      "\n",
      "            List<String> pageContent = extractor.extractAll();\n",
      "            System.out.println(pageContent);\n",
      "            assertEquals(pageContent.size(), 1);\n",
      "            assertEquals(\"\u4f60\u597d\u5440\uff0cOFD Reader&Writer\uff01\", pageContent.get(0));\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u542b\u6709PageBlock\u5305\u88f9\u7684\u5bf9\u8c61\u7684\u6587\u5b57\u63d0\u53d6\u6d4b\u8bd5\n",
      "     */\n",
      "    @Test\n",
      "    void extractAllPageBlock() throws IOException {\n",
      "        Path src = Paths.get(\"src/test/resources/helloworld_with_pageblock.ofd\");\n",
      "        try (OFDReader reader = new OFDReader(src)) {\n",
      "            ContentExtractor extractor = new ContentExtractor(reader);\n",
      "\n",
      "            List<String> pageContent = extractor.extractAll();\n",
      "            System.out.println(pageContent);\n",
      "            assertEquals(pageContent.size(), 1);\n",
      "            assertEquals(\"\u4f60\u597d\u5440\uff0cOFD Reader&Writer\uff01\", pageContent.get(0));\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u9875\u9762\u5185\u5bb9\u8fed\u4ee3\u5668\uff0c\u901a\u8fc7\u8fed\u4ee3\u5668\u53ef\u4ee5\u5b9e\u73b0\u5bf9\u6bcf\u4e00\u9875\u7684\u5185\u5bb9\u5904\u7406\n",
      "     */\n",
      "    @Test\n",
      "    void traverse() throws IOException {\n",
      "        try (OFDReader reader = new OFDReader(src)) {\n",
      "            ContentExtractor extractor = new ContentExtractor(reader);\n",
      "            extractor.traverse((pageNum, contents) -> {\n",
      "                // \u5728\u8fd9\u91cc\u4f60\u53ef\u4ee5\u505a\u4e9b\u4f60\u559c\u6b22\u7684\u4e8b\u60c5\n",
      "                assertEquals(contents.size(), 1);\n",
      "                assertEquals(\"\u4f60\u597d\u5440\uff0cOFD Reader&Writer\uff01\", contents.get(0));\n",
      "            });\n",
      "        }\n",
      "    }\n",
      "}"
    ],
    "method_lines_dic": {
      "ContentExtractor.Receiver::::process(int,java.util.List<java.lang.String>)": [
        33,
        33
      ],
      "ContentExtractor::::getPageContent(int)": [
        74,
        88
      ],
      "ContentExtractor::::getPageTextObject(int)": [
        96,
        110
      ],
      "ContentExtractor::::extractAll()": [
        176,
        186
      ],
      "ContentExtractor::::extractAllTextObject()": [
        193,
        203
      ],
      "ContentExtractor::::traverse(org.ofdrw.reader.ContentExtractor.Receiver)": [
        210,
        218
      ]
    },
    "test_method_lines_dic": {
      "ContentExtractorTest::::getPageContent()": [
        30,
        40
      ],
      "ContentExtractorTest::::extractByFilter()": [
        45,
        57
      ],
      "ContentExtractorTest::::extractAll()": [
        62,
        72
      ],
      "ContentExtractorTest::::extractAllPageBlock()": [
        77,
        88
      ],
      "ContentExtractorTest::::traverse()": [
        93,
        103
      ]
    },
    "reverse_method_lines_dic": {
      "33": "ContentExtractor.Receiver::::process(int,java.util.List<java.lang.String>)",
      "74": "ContentExtractor::::getPageContent(int)",
      "75": "ContentExtractor::::getPageContent(int)",
      "76": "ContentExtractor::::getPageContent(int)",
      "77": "ContentExtractor::::getPageContent(int)",
      "78": "ContentExtractor::::getPageContent(int)",
      "79": "ContentExtractor::::getPageContent(int)",
      "80": "ContentExtractor::::getPageContent(int)",
      "81": "ContentExtractor::::getPageContent(int)",
      "82": "ContentExtractor::::getPageContent(int)",
      "83": "ContentExtractor::::getPageContent(int)",
      "84": "ContentExtractor::::getPageContent(int)",
      "85": "ContentExtractor::::getPageContent(int)",
      "86": "ContentExtractor::::getPageContent(int)",
      "87": "ContentExtractor::::getPageContent(int)",
      "88": "ContentExtractor::::getPageContent(int)",
      "96": "ContentExtractor::::getPageTextObject(int)",
      "97": "ContentExtractor::::getPageTextObject(int)",
      "98": "ContentExtractor::::getPageTextObject(int)",
      "99": "ContentExtractor::::getPageTextObject(int)",
      "100": "ContentExtractor::::getPageTextObject(int)",
      "101": "ContentExtractor::::getPageTextObject(int)",
      "102": "ContentExtractor::::getPageTextObject(int)",
      "103": "ContentExtractor::::getPageTextObject(int)",
      "104": "ContentExtractor::::getPageTextObject(int)",
      "105": "ContentExtractor::::getPageTextObject(int)",
      "106": "ContentExtractor::::getPageTextObject(int)",
      "107": "ContentExtractor::::getPageTextObject(int)",
      "108": "ContentExtractor::::getPageTextObject(int)",
      "109": "ContentExtractor::::getPageTextObject(int)",
      "110": "ContentExtractor::::getPageTextObject(int)",
      "176": "ContentExtractor::::extractAll()",
      "177": "ContentExtractor::::extractAll()",
      "178": "ContentExtractor::::extractAll()",
      "179": "ContentExtractor::::extractAll()",
      "180": "ContentExtractor::::extractAll()",
      "181": "ContentExtractor::::extractAll()",
      "182": "ContentExtractor::::extractAll()",
      "183": "ContentExtractor::::extractAll()",
      "184": "ContentExtractor::::extractAll()",
      "185": "ContentExtractor::::extractAll()",
      "186": "ContentExtractor::::extractAll()",
      "193": "ContentExtractor::::extractAllTextObject()",
      "194": "ContentExtractor::::extractAllTextObject()",
      "195": "ContentExtractor::::extractAllTextObject()",
      "196": "ContentExtractor::::extractAllTextObject()",
      "197": "ContentExtractor::::extractAllTextObject()",
      "198": "ContentExtractor::::extractAllTextObject()",
      "199": "ContentExtractor::::extractAllTextObject()",
      "200": "ContentExtractor::::extractAllTextObject()",
      "201": "ContentExtractor::::extractAllTextObject()",
      "202": "ContentExtractor::::extractAllTextObject()",
      "203": "ContentExtractor::::extractAllTextObject()",
      "210": "ContentExtractor::::traverse(org.ofdrw.reader.ContentExtractor.Receiver)",
      "211": "ContentExtractor::::traverse(org.ofdrw.reader.ContentExtractor.Receiver)",
      "212": "ContentExtractor::::traverse(org.ofdrw.reader.ContentExtractor.Receiver)",
      "213": "ContentExtractor::::traverse(org.ofdrw.reader.ContentExtractor.Receiver)",
      "214": "ContentExtractor::::traverse(org.ofdrw.reader.ContentExtractor.Receiver)",
      "215": "ContentExtractor::::traverse(org.ofdrw.reader.ContentExtractor.Receiver)",
      "216": "ContentExtractor::::traverse(org.ofdrw.reader.ContentExtractor.Receiver)",
      "217": "ContentExtractor::::traverse(org.ofdrw.reader.ContentExtractor.Receiver)",
      "218": "ContentExtractor::::traverse(org.ofdrw.reader.ContentExtractor.Receiver)"
    },
    "test_reverse_method_lines_dic": {
      "30": "ContentExtractorTest::::getPageContent()",
      "31": "ContentExtractorTest::::getPageContent()",
      "32": "ContentExtractorTest::::getPageContent()",
      "33": "ContentExtractorTest::::getPageContent()",
      "34": "ContentExtractorTest::::getPageContent()",
      "35": "ContentExtractorTest::::getPageContent()",
      "36": "ContentExtractorTest::::getPageContent()",
      "37": "ContentExtractorTest::::getPageContent()",
      "38": "ContentExtractorTest::::getPageContent()",
      "39": "ContentExtractorTest::::getPageContent()",
      "40": "ContentExtractorTest::::getPageContent()",
      "45": "ContentExtractorTest::::extractByFilter()",
      "46": "ContentExtractorTest::::extractByFilter()",
      "47": "ContentExtractorTest::::extractByFilter()",
      "48": "ContentExtractorTest::::extractByFilter()",
      "49": "ContentExtractorTest::::extractByFilter()",
      "50": "ContentExtractorTest::::extractByFilter()",
      "51": "ContentExtractorTest::::extractByFilter()",
      "52": "ContentExtractorTest::::extractByFilter()",
      "53": "ContentExtractorTest::::extractByFilter()",
      "54": "ContentExtractorTest::::extractByFilter()",
      "55": "ContentExtractorTest::::extractByFilter()",
      "56": "ContentExtractorTest::::extractByFilter()",
      "57": "ContentExtractorTest::::extractByFilter()",
      "62": "ContentExtractorTest::::extractAll()",
      "63": "ContentExtractorTest::::extractAll()",
      "64": "ContentExtractorTest::::extractAll()",
      "65": "ContentExtractorTest::::extractAll()",
      "66": "ContentExtractorTest::::extractAll()",
      "67": "ContentExtractorTest::::extractAll()",
      "68": "ContentExtractorTest::::extractAll()",
      "69": "ContentExtractorTest::::extractAll()",
      "70": "ContentExtractorTest::::extractAll()",
      "71": "ContentExtractorTest::::extractAll()",
      "72": "ContentExtractorTest::::extractAll()",
      "77": "ContentExtractorTest::::extractAllPageBlock()",
      "78": "ContentExtractorTest::::extractAllPageBlock()",
      "79": "ContentExtractorTest::::extractAllPageBlock()",
      "80": "ContentExtractorTest::::extractAllPageBlock()",
      "81": "ContentExtractorTest::::extractAllPageBlock()",
      "82": "ContentExtractorTest::::extractAllPageBlock()",
      "83": "ContentExtractorTest::::extractAllPageBlock()",
      "84": "ContentExtractorTest::::extractAllPageBlock()",
      "85": "ContentExtractorTest::::extractAllPageBlock()",
      "86": "ContentExtractorTest::::extractAllPageBlock()",
      "87": "ContentExtractorTest::::extractAllPageBlock()",
      "88": "ContentExtractorTest::::extractAllPageBlock()",
      "93": "ContentExtractorTest::::traverse()",
      "94": "ContentExtractorTest::::traverse()",
      "95": "ContentExtractorTest::::traverse()",
      "96": "ContentExtractorTest::::traverse()",
      "97": "ContentExtractorTest::::traverse()",
      "98": "ContentExtractorTest::::traverse()",
      "99": "ContentExtractorTest::::traverse()",
      "100": "ContentExtractorTest::::traverse()",
      "101": "ContentExtractorTest::::traverse()",
      "102": "ContentExtractorTest::::traverse()",
      "103": "ContentExtractorTest::::traverse()"
    },
    "tests": [
      {
        "test_lines": [
          30,
          40
        ],
        "covered_lines": [
          53,
          54,
          55,
          75,
          76,
          80,
          81,
          83,
          85,
          86,
          87,
          119,
          121,
          122,
          123,
          124,
          125,
          131,
          133,
          134,
          138,
          139
        ]
      },
      {
        "test_lines": [
          45,
          57
        ],
        "covered_lines": [
          63,
          64,
          65,
          66,
          75,
          76,
          80,
          81,
          83,
          85,
          86,
          87,
          119,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          130,
          133,
          134,
          138,
          139
        ]
      },
      {
        "test_lines": [
          62,
          72
        ],
        "covered_lines": [
          53,
          54,
          55,
          75,
          76,
          80,
          81,
          83,
          85,
          86,
          87,
          119,
          121,
          122,
          123,
          124,
          125,
          131,
          133,
          134,
          138,
          139,
          177,
          178,
          179,
          180,
          181,
          182,
          185
        ]
      },
      {
        "test_lines": [
          77,
          88
        ],
        "covered_lines": [
          53,
          54,
          55,
          75,
          76,
          80,
          81,
          83,
          85,
          86,
          87,
          119,
          121,
          122,
          123,
          124,
          125,
          131,
          133,
          134,
          135,
          136,
          138,
          139,
          177,
          178,
          179,
          180,
          181,
          182,
          185
        ]
      },
      {
        "test_lines": [
          93,
          103
        ],
        "covered_lines": [
          53,
          54,
          55,
          75,
          76,
          80,
          81,
          83,
          85,
          86,
          87,
          119,
          121,
          122,
          123,
          124,
          125,
          131,
          133,
          134,
          138,
          139,
          211,
          212,
          213,
          214,
          215,
          218
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/ofdrw/ofdrw-reader/src/main/java/org/ofdrw/reader/tools/NameSpaceModifier.java": {
    "class_content": [
      "package org.ofdrw.reader.tools;\n",
      "\n",
      "import org.dom4j.Document;\n",
      "import org.dom4j.Element;\n",
      "import org.dom4j.Namespace;\n",
      "import org.dom4j.VisitorSupport;\n",
      "import org.dom4j.tree.DefaultElement;\n",
      "import org.ofdrw.core.Const;\n",
      "\n",
      "/**\n",
      " * \u547d\u540d\u7a7a\u95f4\u53d8\u66f4\n",
      " *\n",
      " * @author \u6743\u89c2\u5b87\n",
      " * @since 2020-10-15 20:01:20\n",
      " * @deprecated {@link org.ofdrw.pkg.tool.OFDNameSpaceModifier}\n",
      " */\n",
      "@Deprecated\n",
      "public class NameSpaceModifier extends VisitorSupport {\n",
      "    /**\n",
      "     * \u671f\u671b\u53d8\u66f4\u7684\u547d\u540d\u7a7a\u95f4\n",
      "     */\n",
      "    private Namespace expectNs;\n",
      "\n",
      "    /**\n",
      "     * \u6307\u5b9a\u53d8\u66f4\u7684\u547d\u540d\u7a7a\u95f4\n",
      "     *\n",
      "     * @param namespace \u671f\u671b\u53d8\u66f4\u7684\u65b0\u7684\u547d\u540d\u7a7a\u95f4\n",
      "     */\n",
      "    public NameSpaceModifier(Namespace namespace) {\n",
      "        if (namespace == null) {\n",
      "            namespace = Const.OFD_NAMESPACE;\n",
      "        }\n",
      "        expectNs = namespace;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u4f7f\u7528\u9ed8\u8ba4\u7684\u547d\u540d\u7a7a\u95f4\u53d8\u66f4\u5143\u7d20\u7684\u547d\u540d\u7a7a\u95f4\n",
      "     * <p>\n",
      "     * \u9ed8\u8ba4\u547d\u540d\u7a7a\u95f4\u4e3a: xmlns:ofd=\"http://www.ofdspec.org/2016\n",
      "     */\n",
      "    public NameSpaceModifier() {\n",
      "        this(Const.OFD_NAMESPACE);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u6839\u8282\u70b9\u904d\u5386\n",
      "     *\n",
      "     * @param document \u6839\u8282\u70b9\u5bf9\u8c61\n",
      "     */\n",
      "    public void visit(Document document) {\n",
      "        document.getRootElement().additionalNamespaces().clear();\n",
      "        ((DefaultElement) document.getRootElement()).setNamespace(this.expectNs);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u547d\u540d\u7a7a\u95f4\u904d\u5386\n",
      "     *\n",
      "     * @param namespace \u547d\u540d\u7a7a\u95f4\n",
      "     */\n",
      "    public void visit(Namespace namespace) {\n",
      "        // \u5220\u9664\u547d\u540d\u7a7a\u95f4\n",
      "        namespace.detach();\n",
      "    }\n",
      "\n",
      "\n",
      "//    public void visit(Attribute node) {\n",
      "//        if (node.toString().contains(\"xmlns\") || node.toString().contains(\"ofd:\")) {\n",
      "//            node.detach();\n",
      "//        }\n",
      "//    }\n",
      "\n",
      "    /**\n",
      "     * \u6839\u8282\u70b9\u4e0b\u7684\u5b50\u8282\u70b9\u904d\u5386\n",
      "     *\n",
      "     * @param node \u5b50\u8282\u70b9\n",
      "     */\n",
      "    public void visit(Element node) {\n",
      "        if (node instanceof DefaultElement) {\n",
      "            ((DefaultElement) node).setNamespace(this.expectNs);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u8bbe\u7f6e\u671f\u671b\u53d8\u66f4\u5230\u7684\u547d\u540d\u7a7a\u95f4\n",
      "     *\n",
      "     * @param expectNs \u547d\u540d\u7a7a\u95f4\n",
      "     * @return this\n",
      "     */\n",
      "    public NameSpaceModifier setExpectNs(Namespace expectNs) {\n",
      "        this.expectNs = expectNs;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    public Namespace getExpectNs() {\n",
      "        return expectNs;\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package org.ofdrw.reader.tools;\n",
      "\n",
      "import org.dom4j.Document;\n",
      "import org.dom4j.DocumentException;\n",
      "import org.dom4j.io.SAXReader;\n",
      "import org.junit.jupiter.api.Test;\n",
      "\n",
      "import static org.junit.jupiter.api.Assertions.*;\n",
      "\n",
      "/**\n",
      " * @author \u6743\u89c2\u5b87\n",
      " * @since 2020-10-15 20:04:22\n",
      " */\n",
      "class NameSpaceModifierTest {\n",
      "\n",
      "    @Test\n",
      "    void visit() throws DocumentException {\n",
      "        String src = \"src/test/resources/namespace_case.xml\";\n",
      "        SAXReader reader = new SAXReader();\n",
      "        Document document = reader.read(src);\n",
      "\n",
      "        // \u4fee\u6539\u5df2\u7ecf\u5b58\u5728\u7684\u547d\u540d\u7a7a\u95f4\u4e3a\u6307\u5b9a\u547d\u540d\u7a7a\u95f4\n",
      "        document.accept(new NameSpaceModifier());\n",
      "        System.out.println(document.asXML());\n",
      "    }\n",
      "}"
    ],
    "method_lines_dic": {
      "NameSpaceModifier::::getExpectNs()": [
        94,
        96
      ]
    },
    "test_method_lines_dic": {
      "NameSpaceModifierTest::::visit()": [
        16,
        25
      ]
    },
    "reverse_method_lines_dic": {
      "94": "NameSpaceModifier::::getExpectNs()",
      "95": "NameSpaceModifier::::getExpectNs()",
      "96": "NameSpaceModifier::::getExpectNs()"
    },
    "test_reverse_method_lines_dic": {
      "16": "NameSpaceModifierTest::::visit()",
      "17": "NameSpaceModifierTest::::visit()",
      "18": "NameSpaceModifierTest::::visit()",
      "19": "NameSpaceModifierTest::::visit()",
      "20": "NameSpaceModifierTest::::visit()",
      "21": "NameSpaceModifierTest::::visit()",
      "22": "NameSpaceModifierTest::::visit()",
      "23": "NameSpaceModifierTest::::visit()",
      "24": "NameSpaceModifierTest::::visit()",
      "25": "NameSpaceModifierTest::::visit()"
    },
    "tests": [
      {
        "test_lines": [
          16,
          25
        ],
        "covered_lines": [
          29,
          30,
          33,
          34,
          42,
          43,
          51,
          52,
          53,
          62,
          63,
          78,
          79,
          81
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/ofdrw/ofdrw-reader/src/main/java/org/ofdrw/reader/tools/NameSpaceCleaner.java": {
    "class_content": [
      "package org.ofdrw.reader.tools;\n",
      "\n",
      "import org.dom4j.Document;\n",
      "import org.dom4j.Element;\n",
      "import org.dom4j.Namespace;\n",
      "import org.dom4j.VisitorSupport;\n",
      "import org.dom4j.tree.DefaultElement;\n",
      "\n",
      "/**\n",
      " * \u547d\u540d\u7a7a\u95f4\u6e05\u7406\u7c7b\n",
      " * <p>\n",
      " * \u7528\u4e8e\u6e05\u7406\u5df2\u7ecf\u5b58\u5728\u7684\u547d\u540d\u7a7a\u95f4\n",
      " *\n",
      " * @author libra19911018\n",
      " * @since 2020-10-15 19:38:15\n",
      " */\n",
      "public class NameSpaceCleaner extends VisitorSupport {\n",
      "    public void visit(Document document) {\n",
      "        ((DefaultElement) document.getRootElement()).setNamespace(Namespace.NO_NAMESPACE);\n",
      "        document.getRootElement().additionalNamespaces().clear();\n",
      "    }\n",
      "\n",
      "    public void visit(Namespace namespace) {\n",
      "        namespace.detach();\n",
      "    }\n",
      "\n",
      "//    public void visit(Attribute node) {\n",
      "//        if (node.toString().contains(\"xmlns\") || node.toString().contains(\"ofd:\")) {\n",
      "//            node.detach();\n",
      "//        }\n",
      "//    }\n",
      "\n",
      "    public void visit(Element node) {\n",
      "        if (node instanceof DefaultElement) {\n",
      "            ((DefaultElement) node).setNamespace(Namespace.NO_NAMESPACE);\n",
      "        }\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "package org.ofdrw.reader.tools;\n",
      "\n",
      "import org.dom4j.Document;\n",
      "import org.dom4j.DocumentException;\n",
      "import org.dom4j.io.SAXReader;\n",
      "import org.junit.jupiter.api.Test;\n",
      "\n",
      "import static org.junit.jupiter.api.Assertions.*;\n",
      "\n",
      "/**\n",
      " * \u6e05\u7406\u5df2\u7ecf\u5b58\u5728\u7684\u547d\u540d\u7a7a\u95f4\n",
      " *\n",
      " * @author \u6743\u89c2\u5b87\n",
      " * @since 2020-10-15 19:39:20\n",
      " */\n",
      "class NameSpaceCleanerTest {\n",
      "\n",
      "    @Test\n",
      "    void visit() throws DocumentException {\n",
      "        String src = \"src/test/resources/namespace_case.xml\";\n",
      "        SAXReader reader = new SAXReader();\n",
      "        Document document = reader.read(src);\n",
      "        // \u6e05\u7a7a\u6839\u8282\u70b9\u4e0a\u5df2\u7ecf\u5b58\u5728\u7684\u547d\u540d\u7a7a\u95f4\n",
      "        document.accept(new NameSpaceCleaner());\n",
      "\n",
      "        System.out.println(document.asXML());\n",
      "\n",
      "    }\n",
      "}"
    ],
    "method_lines_dic": {},
    "test_method_lines_dic": {
      "NameSpaceCleanerTest::::visit()": [
        18,
        28
      ]
    },
    "reverse_method_lines_dic": {},
    "test_reverse_method_lines_dic": {
      "18": "NameSpaceCleanerTest::::visit()",
      "19": "NameSpaceCleanerTest::::visit()",
      "20": "NameSpaceCleanerTest::::visit()",
      "21": "NameSpaceCleanerTest::::visit()",
      "22": "NameSpaceCleanerTest::::visit()",
      "23": "NameSpaceCleanerTest::::visit()",
      "24": "NameSpaceCleanerTest::::visit()",
      "25": "NameSpaceCleanerTest::::visit()",
      "26": "NameSpaceCleanerTest::::visit()",
      "27": "NameSpaceCleanerTest::::visit()",
      "28": "NameSpaceCleanerTest::::visit()"
    },
    "tests": [
      {
        "test_lines": [
          18,
          28
        ],
        "covered_lines": [
          17,
          19,
          20,
          21,
          34,
          35,
          37
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/ofdrw/ofdrw-reader/src/main/java/org/ofdrw/reader/keyword/KeywordExtractor.java": {
    "class_content": [
      "package org.ofdrw.reader.keyword;\n",
      "\n",
      "import org.dom4j.DocumentException;\n",
      "import org.ofdrw.core.Const;\n",
      "import org.ofdrw.core.basicStructure.doc.Document;\n",
      "import org.ofdrw.core.basicStructure.ofd.OFD;\n",
      "import org.ofdrw.core.basicStructure.pageObj.CT_TemplatePage;\n",
      "import org.ofdrw.core.basicStructure.pageObj.Content;\n",
      "import org.ofdrw.core.basicStructure.pageObj.Page;\n",
      "import org.ofdrw.core.basicStructure.pageObj.Template;\n",
      "import org.ofdrw.core.basicStructure.pageObj.layer.CT_Layer;\n",
      "import org.ofdrw.core.basicStructure.pageObj.layer.PageBlockType;\n",
      "import org.ofdrw.core.basicStructure.pageObj.layer.block.CT_PageBlock;\n",
      "import org.ofdrw.core.basicStructure.pageObj.layer.block.TextObject;\n",
      "import org.ofdrw.core.basicStructure.res.Res;\n",
      "import org.ofdrw.core.basicStructure.res.resources.Fonts;\n",
      "import org.ofdrw.core.basicType.*;\n",
      "import org.ofdrw.core.text.TextCode;\n",
      "import org.ofdrw.core.text.font.CT_Font;\n",
      "import org.ofdrw.core.text.text.CT_Text;\n",
      "import org.ofdrw.reader.DeltaTool;\n",
      "import org.ofdrw.reader.OFDReader;\n",
      "import org.ofdrw.reader.ResourceLocator;\n",
      "\n",
      "import java.awt.*;\n",
      "import java.awt.font.FontRenderContext;\n",
      "import java.awt.font.TextAttribute;\n",
      "import java.awt.geom.AffineTransform;\n",
      "import java.io.FileNotFoundException;\n",
      "import java.util.ArrayList;\n",
      "import java.util.HashMap;\n",
      "import java.util.List;\n",
      "import java.util.Map;\n",
      "\n",
      "/**\n",
      " * \u5173\u952e\u5b57\u62bd\u53d6\n",
      " *\n",
      " * @author minghu-zhang\n",
      " * @since 16:25 2020/9/26\n",
      " */\n",
      "@SuppressWarnings(\"unchecked\")\n",
      "public class KeywordExtractor {\n",
      "\n",
      "    /**\n",
      "     * \u6bcf\u6beb\u7c73\u7684point\u5355\u4f4d\n",
      "     * 1 point / 2.83464567 \u2248 0.35277778 mm\n",
      "     */\n",
      "    private static final float POINT_PER_MM = 72 / 25.4f;\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u5173\u952e\u5b57\u5750\u6807\u5217\u8868(\u5750\u6807\u5355\u4f4d\u6beb\u7c73mm)\n",
      "     *\n",
      "     * @param reader  OFD\u89e3\u6790\u5668\n",
      "     * @param keyword \u5173\u952e\u5b57\n",
      "     * @return \u5173\u952e\u5b57\u5750\u6807\u5217\u8868\n",
      "     * @throws FileNotFoundException \u6587\u4ef6\u4e0d\u5b58\u5728\u5f02\u5e38\n",
      "     * @throws DocumentException     \u6587\u6863\u89e3\u6790\u5f02\u5e38\n",
      "     */\n",
      "    public static List<KeywordPosition> getKeyWordPositionList(OFDReader reader, String keyword) throws FileNotFoundException, DocumentException {\n",
      "        return getKeyWordPositionList(reader, keyword, null);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u5173\u952e\u5b57\u5750\u6807\u5217\u8868(\u5750\u6807\u5355\u4f4d\u6beb\u7c73mm)\n",
      "     *\n",
      "     * @param reader   OFD\u89e3\u6790\u5668\n",
      "     * @param keywords \u5173\u952e\u5b57\u5217\u8868\n",
      "     * @return \u5173\u952e\u5b57\u5750\u6807\u5217\u8868\n",
      "     * @throws FileNotFoundException \u6587\u4ef6\u4e0d\u5b58\u5728\u5f02\u5e38\n",
      "     * @throws DocumentException     \u6587\u6863\u89e3\u6790\u5f02\u5e38\n",
      "     */\n",
      "    public static List<KeywordPosition> getKeyWordPositionList(OFDReader reader, String[] keywords) throws FileNotFoundException, DocumentException {\n",
      "        return getKeyWordPositionList(reader, keywords, null);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u5173\u952e\u5b57\u5750\u6807\u5217\u8868(\u5750\u6807\u5355\u4f4d\u6beb\u7c73mm)\n",
      "     *\n",
      "     * @param reader  OFD\u89e3\u6790\u5668\n",
      "     * @param keyword \u5173\u952e\u5b57\n",
      "     * @param pages   \u8981\u68c0\u7d22\u7684\u9875\u7801\uff0c\u4ece1\u5f00\u59cb\uff0c\u4e0d\u8d85\u8fc7\u6700\u5927\u9875\u7801\n",
      "     * @return \u5173\u952e\u5b57\u5750\u6807\u5217\u8868\n",
      "     * @throws FileNotFoundException \u6587\u4ef6\u4e0d\u5b58\u5728\u5f02\u5e38\n",
      "     * @throws DocumentException     \u6587\u6863\u89e3\u6790\u5f02\u5e38\n",
      "     */\n",
      "    public static List<KeywordPosition> getKeyWordPositionList(OFDReader reader, String keyword, int[] pages) throws FileNotFoundException, DocumentException {\n",
      "        return getKeyWordPositionList(reader, new String[]{keyword}, pages);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u5173\u952e\u5b57\u5750\u6807\u5217\u8868(\u5750\u6807\u5355\u4f4d\u6beb\u7c73mm)\n",
      "     *\n",
      "     * @param reader   OFD\u89e3\u6790\u5668\n",
      "     * @param keywords \u5173\u952e\u5b57\u5217\u8868\n",
      "     * @param pages    \u8981\u68c0\u7d22\u7684\u9875\u7801\uff0c\u4ece1\u5f00\u59cb\uff0c\u4e0d\u8d85\u8fc7\u6700\u5927\u9875\u7801\n",
      "     * @return \u5173\u952e\u5b57\u5750\u6807\u5217\u8868\n",
      "     * @throws FileNotFoundException \u6587\u4ef6\u4e0d\u5b58\u5728\u5f02\u5e38\n",
      "     * @throws DocumentException     \u6587\u6863\u89e3\u6790\u5f02\u5e38\n",
      "     */\n",
      "    public static List<KeywordPosition> getKeyWordPositionList(OFDReader reader, String[] keywords, int[] pages) throws FileNotFoundException, DocumentException {\n",
      "        Map<TextCode, KeywordResource> boundaryMapping = new HashMap<>(8);\n",
      "\n",
      "        ResourceLocator locator = reader.getResourceLocator();\n",
      "        //\u521b\u5efaOFD\u548cDocument\u5bf9\u8c61\n",
      "        OFD ofd = locator.get(Const.INDEX_FILE, OFD::new);\n",
      "        String docFile = ofd.getDocBody().getDocRoot().getLoc();\n",
      "        Document document = locator.get(docFile, Document::new);\n",
      "        //\u6570\u636e\u76ee\u5f55\n",
      "        String dataDir = docFile.split(\"/\")[0];\n",
      "\n",
      "        //\u83b7\u53d6\u5b57\u4f53\u6620\u5c04\u5bf9\u8c61\n",
      "        Map<ST_ID, CT_Font> fontMapping = getFontMapping(locator, dataDir, document);\n",
      "\n",
      "        //\u83b7\u53d6\u6a21\u677f\u5b57\u5178\n",
      "        Map<ST_ID, Page> templatePage = getTemplatePage(locator, dataDir, document);\n",
      "\n",
      "        //\u521b\u5efa\u6587\u5b57\u5b9a\u4f4d\u5217\u8868\n",
      "        List<TextCode> textCodeList = new ArrayList<>();\n",
      "        int numberOfPages = reader.getNumberOfPages();\n",
      "\n",
      "        boolean hasPageLimit = pages != null && pages.length > 0;\n",
      "        if (hasPageLimit) {\n",
      "            for (int page : pages) {\n",
      "                if (page < 1 || page > numberOfPages) {\n",
      "                    throw new IllegalArgumentException(String.format(\"\u9875\u7801\u4e0d\u6b63\u786e\uff0c\u652f\u6301\u8303\u56f4[%d-%d]\", 1, numberOfPages));\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "        for (int page = 1; page <= numberOfPages; page++) {\n",
      "            if (hasPageLimit) {\n",
      "                for (int i : pages) {\n",
      "                    if (i == page) {\n",
      "                        preparedContextData(reader, textCodeList, boundaryMapping, fontMapping, templatePage, page);\n",
      "                        break;\n",
      "                    }\n",
      "                }\n",
      "            } else {\n",
      "                preparedContextData(reader, textCodeList, boundaryMapping, fontMapping, templatePage, page);\n",
      "            }\n",
      "        }\n",
      "\n",
      "        List<KeywordPosition> positionList = new ArrayList<>();\n",
      "        //\u5904\u7406\u6587\u5b57\u5b9a\u4f4d\n",
      "        for (int i = 0; i < textCodeList.size(); i++) {\n",
      "            TextCode textCode = textCodeList.get(i);\n",
      "            if (textCode != null) {\n",
      "                String content = textCode.getContent();\n",
      "                if (content != null && !\"\".equals(content.trim())) {\n",
      "                    for (String keyword : keywords) {\n",
      "                        int textIndex = content.indexOf(keyword);\n",
      "                        if (textIndex != -1) {\n",
      "                            //\u5b8c\u6574\u5305\u542b\u5173\u952e\u5b57\n",
      "                            addNormalKeyword(keyword, boundaryMapping, positionList, textCode, textIndex);\n",
      "                        } else if (keyword.indexOf(content) == 0 && i != textCodeList.size() - 1) {\n",
      "                            //\u524d\u7f00\u5339\u914d\u5173\u952e\u5b57\n",
      "                            addPrefixBreakTextCodeList(keyword, boundaryMapping, textCodeList, positionList, i, textCode);\n",
      "                        } else {\n",
      "                            int startIndex = checkPostfixMatch(content, keyword);\n",
      "                            //\u540e\u7f00\u5339\u914d\u5173\u952e\u5b57\n",
      "                            if (startIndex != -1) {\n",
      "                                addPostfixBreakTextCodeList(keyword, boundaryMapping, textCodeList, positionList, i, startIndex, textCode);\n",
      "                            }\n",
      "                        }\n",
      "                    }\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "\n",
      "        return positionList;\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u68c0\u67e5\u540e\u7f00\u5339\u914d\n",
      "     *\n",
      "     * @param content \u5f85\u5339\u914d\u6587\u672c\n",
      "     * @param keyword \u5173\u952e\u5b57\n",
      "     * @return \u662f/\u5426 \u5339\u914d\n",
      "     */\n",
      "    private static int checkPostfixMatch(String content, String keyword) {\n",
      "        int startIndex;\n",
      "        boolean match = true;\n",
      "        if ((startIndex = content.lastIndexOf(keyword.charAt(0))) != -1) {\n",
      "            for (int j = startIndex, k = 0; j < content.length(); j++, k++) {\n",
      "                if (content.charAt(j) != keyword.charAt(k)) {\n",
      "                    match = false;\n",
      "                    break;\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "        return match ? startIndex : -1;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u5904\u7406\u540e\u7f00\u5339\u914d\u65ad\u5b57\u65ad\u884c\u6587\u672c\u5b9a\u4f4d\u5173\u952e\u5b57\n",
      "     *\n",
      "     * @param keyword         \u5173\u952e\u5b57\u5b57\u7b26\u4e32\n",
      "     * @param boundaryMapping \u6620\u5c04\u5bf9\u8c61\n",
      "     * @param textCodeList    \u6587\u672c\u5b9a\u4f4d\u5217\u8868\n",
      "     * @param positionList    \u5173\u952e\u5b57\u4f4d\u7f6e\u5217\u8868\n",
      "     * @param textCodeIndex   TextCode\u4f4d\u7f6e\n",
      "     * @param startIndex      TextCode\u6587\u672c\u8d77\u59cb\u4f4d\u7f6e\n",
      "     * @param textCode        \u7b2c\u4e00\u4e2a\u6587\u5b57\u5b9a\u4f4d\n",
      "     */\n",
      "    private static void addPostfixBreakTextCodeList(String keyword, Map<TextCode, KeywordResource> boundaryMapping, List<TextCode> textCodeList,\n",
      "                                                    List<KeywordPosition> positionList, int textCodeIndex, int startIndex, TextCode textCode) {\n",
      "        //\u6587\u5b57\u5b9a\u4f4d\u5408\u5e76\u5217\u8868\n",
      "        List<TextCode> mergeTextCodeList = new ArrayList<>();\n",
      "        //\u52a0\u5165\u5408\u5e76\u5217\u8868\n",
      "        mergeTextCodeList.add(textCode);\n",
      "        //\u5339\u914d\u4e0b\u4e00\u4e2a\u5b57\n",
      "        searchNextText(keyword, textCodeList, mergeTextCodeList, boundaryMapping, textCodeIndex, textCode.getContent().substring(startIndex), textCode);\n",
      "        //\u5224\u65ad\u662f\u5426\u5305\u542b\n",
      "        StringBuilder builder = new StringBuilder();\n",
      "        for (TextCode code : mergeTextCodeList) {\n",
      "            builder.append(code.getContent());\n",
      "        }\n",
      "        if (builder.indexOf(keyword) != -1) {\n",
      "            mergeKeywordPosition(keyword, startIndex, positionList, mergeTextCodeList, boundaryMapping);\n",
      "        }\n",
      "\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u5904\u7406\u524d\u7f00\u5339\u914d\u65ad\u5b57\u65ad\u884c\u6587\u672c\u5b9a\u4f4d\u5173\u952e\u5b57\n",
      "     *\n",
      "     * @param keyword         \u5173\u952e\u5b57\u5b57\u7b26\u4e32\n",
      "     * @param boundaryMapping \u6620\u5c04\u5bf9\u8c61\n",
      "     * @param textCodeList    \u6587\u672c\u5b9a\u4f4d\u5217\u8868\n",
      "     * @param positionList    \u5173\u952e\u5b57\u4f4d\u7f6e\u5217\u8868\n",
      "     * @param textCodeIndex   \u5b9a\u4f4d\u8d77\u59cb\u4f4d\u7f6e\n",
      "     * @param textCode        \u7b2c\u4e00\u4e2a\u6587\u5b57\u5b9a\u4f4d\n",
      "     */\n",
      "    private static void addPrefixBreakTextCodeList(String keyword, Map<TextCode, KeywordResource> boundaryMapping, List<TextCode> textCodeList,\n",
      "                                                   List<KeywordPosition> positionList, int textCodeIndex, TextCode textCode) {\n",
      "        //\u6587\u5b57\u5b9a\u4f4d\u5408\u5e76\u5217\u8868\n",
      "        List<TextCode> mergeTextCodeList = new ArrayList<>();\n",
      "        //\u52a0\u5165\u5408\u5e76\u5217\u8868\n",
      "        mergeTextCodeList.add(textCode);\n",
      "        //\u5339\u914d\u4e0b\u4e00\u4e2a\u5b57\n",
      "        searchNextText(keyword, textCodeList, mergeTextCodeList, boundaryMapping, textCodeIndex, textCode.getContent(), textCode);\n",
      "        //\u5224\u65ad\u662f\u5426\u5305\u542b\n",
      "        StringBuilder builder = new StringBuilder();\n",
      "        for (TextCode code : mergeTextCodeList) {\n",
      "            builder.append(code.getContent());\n",
      "        }\n",
      "        if (builder.indexOf(keyword) != -1) {\n",
      "            mergeKeywordPosition(keyword, 0, positionList, mergeTextCodeList, boundaryMapping);\n",
      "        }\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * \u68c0\u7d22\u4e0b\u4e00\u4e2a\u6587\u672c\u5b9a\u4f4d\u8282\u70b9\n",
      "     *\n",
      "     * @param keyword           \u5173\u952e\u5b57\u5b57\u7b26\u4e32\n",
      "     * @param textCodeList      \u6587\u672c\u5b9a\u4f4d\u5217\u8868\n",
      "     * @param mergeTextCodeList \u5408\u5e76\u7684TextCode\u5217\u8868\n",
      "     * @param boundaryMapping   \u6587\u672c\u8d44\u6e90\u6620\u5c04\u5bf9\u8c61\n",
      "     * @param textCodeIndex     TextCode\u4f4d\u7f6e\n",
      "     * @param firstMatchString  \u6700\u5148\u5339\u914d\u5b57\u7b26\u4e32\n",
      "     * @param textCode          \u7b2c\u4e00\u4e2a\u5339\u914d\u6587\u5b57\n",
      "     */\n",
      "    private static void searchNextText(String keyword, List<TextCode> textCodeList, List<TextCode> mergeTextCodeList,\n",
      "                                       Map<TextCode, KeywordResource> boundaryMapping, int textCodeIndex, String firstMatchString,\n",
      "                                       TextCode textCode) {\n",
      "        StringBuilder mergeText = new StringBuilder(firstMatchString);\n",
      "        KeywordResource kr = boundaryMapping.get(textCode);\n",
      "        if (kr != null) {\n",
      "            int currentPage = kr.getPage();\n",
      "            for (int j = textCodeIndex + 1; j < textCodeList.size(); j++) {\n",
      "                TextCode next = textCodeList.get(j);\n",
      "                if (\"\".equals(next.getContent().trim())) {\n",
      "                    continue;\n",
      "                }\n",
      "                KeywordResource nextKr = boundaryMapping.get(next);\n",
      "                if (nextKr != null) {\n",
      "                    //\u4e0d\u662f\u540c\u4e00\u9875\u5219\u4e0d\u5b9a\u4f4d\n",
      "                    if (currentPage != nextKr.getPage()) {\n",
      "                        break;\n",
      "                    }\n",
      "                    //\u81ea\u7136\u987a\u5e8f\u68c0\u7d22\n",
      "                    mergeText.append(next.getContent());\n",
      "                    String mergeTextString = mergeText.toString();\n",
      "                    if (mergeTextString.equals(keyword) || mergeTextString.startsWith(keyword)) {\n",
      "                        mergeTextCodeList.add(next);\n",
      "                        break;\n",
      "                    }\n",
      "                    if (keyword.startsWith(mergeTextString)) {\n",
      "                        mergeTextCodeList.add(next);\n",
      "                    } else {\n",
      "                        break;\n",
      "                    }\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u5904\u7406\u6b63\u5e38\u5173\u952e\u5b57\n",
      "     *\n",
      "     * @param keyword         [in]\u5173\u952e\u5b57\n",
      "     * @param boundaryMapping [in]\u6620\u5c04\u5bf9\u8c61\n",
      "     * @param positionList    [out]\u4f4d\u7f6e\u5217\u8868\n",
      "     * @param textCode        [in]\u6587\u5b57\u5b9a\u4f4d\n",
      "     * @param textIndex       [in]\u6587\u672c\u7d22\u5f15\n",
      "     */\n",
      "    private static void addNormalKeyword(String keyword, Map<TextCode, KeywordResource> boundaryMapping, List<KeywordPosition> positionList,\n",
      "                                         TextCode textCode, int textIndex) {\n",
      "        KeywordResource kr = boundaryMapping.get(textCode);\n",
      "        if (kr != null) {\n",
      "            CT_Text ctText = kr.getText();\n",
      "            if (ctText.getBoundary() != null) {\n",
      "                String content = textCode.getContent();\n",
      "                boolean hasNextKeyword = true;\n",
      "\n",
      "                while (hasNextKeyword) {\n",
      "                    double fHeight = strHeight(keyword, getFont(ctText, kr.getFont()));\n",
      "                    List<Float> deltaX = DeltaTool.getDelta(textCode.getDeltaX(), textCode.getContent().length());\n",
      "                    List<Float> deltaY = DeltaTool.getDelta(textCode.getDeltaY(), textCode.getContent().length());\n",
      "\n",
      "                    KeywordPosition position;\n",
      "                    ST_Array ctm = ctText.getCTM();\n",
      "                    int keywordLength = keyword.length();\n",
      "                    if (ctm != null) {\n",
      "                        position = getCtmKeywordPosition(textCode, textIndex, kr.getPage(), ctText, fHeight, ctm, deltaX, deltaY, keywordLength);\n",
      "                    } else {\n",
      "                        position = getKeywordPosition(textCode, textIndex, kr.getPage(), ctText, fHeight, deltaX, deltaY, keywordLength);\n",
      "                    }\n",
      "\n",
      "                    position.setKeyword(keyword);\n",
      "                    positionList.add(position);\n",
      "\n",
      "                    textIndex = content.indexOf(keyword, textIndex + keywordLength);\n",
      "                    hasNextKeyword = textIndex != -1;\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6CTM\u540e\u7684\u5173\u952e\u5b57\u4f4d\u7f6e\n",
      "     *\n",
      "     * @param textCode      \u6587\u5b57\u5b9a\u4f4d\n",
      "     * @param textIndex     \u6587\u672c\u7d22\u5f15\n",
      "     * @param page          \u6587\u672c\u8d44\u6e90\n",
      "     * @param ctText        \u6587\u5b57\u5bf9\u8c61\n",
      "     * @param height        \u5b57\u4f53\u9ad8\u5ea6\n",
      "     * @param ctm           CTM\u5bf9\u8c61\n",
      "     * @param deltaX        X\u504f\u79fb\n",
      "     * @param deltaY        Y\u504f\u79fb\n",
      "     * @param keywordLength \u6587\u672c\u957f\u5ea6\n",
      "     * @return \u5173\u952e\u5b57\u4f4d\u7f6e\n",
      "     */\n",
      "    private static KeywordPosition getCtmKeywordPosition(TextCode textCode, int textIndex, int page, CT_Text ctText, double height,\n",
      "                                                         ST_Array ctm, List<Float> deltaX, List<Float> deltaY, int keywordLength) {\n",
      "\n",
      "        double[] matrix = getMatrix(ctm);\n",
      "        double x = textCode.getX();\n",
      "        double y = textCode.getY();\n",
      "\n",
      "        for (int i = 0; i < textIndex; i++) {\n",
      "            if (deltaX.size() > i) {\n",
      "                x += deltaX.get(i);\n",
      "            }\n",
      "            if (deltaY.size() > i) {\n",
      "                y += deltaY.get(i);\n",
      "            }\n",
      "        }\n",
      "\n",
      "        double stringWidth = getStringWidth(textIndex, keywordLength, deltaX, ctText.getSize());\n",
      "\n",
      "        ST_Pos leftTop = transform(matrix, x, y - height);\n",
      "        ST_Pos leftBottom = transform(matrix, x, y);\n",
      "        ST_Pos rightTop = transform(matrix, x + stringWidth, y - height);\n",
      "        ST_Pos rightBottom = transform(matrix, x + stringWidth, y);\n",
      "\n",
      "        ST_Box ctmBox = mergePos(leftTop, leftBottom, rightTop, rightBottom);\n",
      "\n",
      "        ctmBox.setTopLeftX(ctmBox.getTopLeftX() + ctText.getBoundary().getTopLeftX());\n",
      "        ctmBox.setTopLeftY(ctmBox.getTopLeftY() + ctText.getBoundary().getTopLeftY());\n",
      "\n",
      "        return new KeywordPosition(page, ctmBox);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u5408\u5e76\u5750\u6807\n",
      "     *\n",
      "     * @param posList \u5750\u6807\u5217\u8868\n",
      "     * @return \u77e9\u5f62\u6846\n",
      "     */\n",
      "    private static ST_Box mergePos(ST_Pos... posList) {\n",
      "        double topLeftX = 0, topLeftY = 0, bottomRightX = 0, bottomRightY = 0;\n",
      "\n",
      "        for (int i = 0; i < posList.length; i++) {\n",
      "            ST_Pos pos = posList[i];\n",
      "            if (i == 0) {\n",
      "                topLeftX = bottomRightX = pos.getX();\n",
      "                topLeftY = bottomRightY = pos.getY();\n",
      "            }\n",
      "            if (topLeftX > pos.getX()) {\n",
      "                topLeftX = pos.getX();\n",
      "            }\n",
      "            if (topLeftY > pos.getY()) {\n",
      "                topLeftY = pos.getY();\n",
      "            }\n",
      "            if (bottomRightX < pos.getX()) {\n",
      "                bottomRightX = pos.getX();\n",
      "            }\n",
      "            if (bottomRightY < pos.getY()) {\n",
      "                bottomRightY = pos.getY();\n",
      "            }\n",
      "        }\n",
      "        return new ST_Box(topLeftX, topLeftY, bottomRightX - topLeftX, bottomRightY - topLeftY);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u5750\u6807\u8f6c\u6362\n",
      "     *\n",
      "     * @param matrix \u77e9\u9635\u6570\u7ec4\n",
      "     * @param sx     \u539f\u59cbX\n",
      "     * @param sy     \u539f\u59cbY\n",
      "     * @return \u8ba1\u7b97\u540e\u4f4d\u7f6e\n",
      "     */\n",
      "    private static ST_Pos transform(double[] matrix, double sx, double sy) {\n",
      "        double x = matrix[0] * sx + matrix[2] * sy + matrix[4];\n",
      "        double y = matrix[1] * sx + matrix[3] * sy + matrix[5];\n",
      "        return new ST_Pos(x, y);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6Matrix\u6570\u636e\n",
      "     *\n",
      "     * @param ctm ctm\u5bf9\u8c61\n",
      "     * @return \u77e9\u9635\u5bf9\u8c61\n",
      "     */\n",
      "    private static double[] getMatrix(ST_Array ctm) {\n",
      "        List<String> ctmArray = ctm.getArray();\n",
      "        double[] matrix = new double[ctmArray.size()];\n",
      "        for (int i = 0; i < ctmArray.size(); i++) {\n",
      "            matrix[i] = Double.parseDouble(ctmArray.get(i));\n",
      "        }\n",
      "        return matrix;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u5408\u5e76\u5173\u952e\u5b57\u4f4d\u7f6e\u5bf9\u8c61\n",
      "     *\n",
      "     * @param keyword         \u5173\u952e\u5b57\n",
      "     * @param firstStartIndex \u7b2c\u4e00\u4e2a\u5173\u952e\u5b57\u8d77\u59cb\u5339\u914d\u4f4d\u7f6e\n",
      "     * @param positionList    \u68c0\u7d22\u5230\u7684\u5173\u952e\u5b57\u5217\u8868\n",
      "     * @param textCodeList    \u5408\u5e76\u5217\u8868\n",
      "     * @param boundaryMapping \u5916\u63a5\u77e9\u5f62\u6620\u5c04\n",
      "     */\n",
      "    private static void mergeKeywordPosition(String keyword, int firstStartIndex, List<KeywordPosition> positionList, List<TextCode> textCodeList,\n",
      "                                             Map<TextCode, KeywordResource> boundaryMapping) {\n",
      "        List<ST_Box> boxList = new ArrayList<>();\n",
      "//        FontMetrics fontMetrics = null;\n",
      "        int page = 0, totalLength = 0, keywordLength = keyword.length();\n",
      "\n",
      "        for (int i = 0; i < textCodeList.size(); i++) {\n",
      "            TextCode textCode = textCodeList.get(i);\n",
      "            int textLength = textCode.getContent().length();\n",
      "            KeywordResource kr = boundaryMapping.get(textCode);\n",
      "            if (kr != null) {\n",
      "                CT_Text ctText = kr.getText();\n",
      "                if (page == 0) {\n",
      "                    page = kr.getPage();\n",
      "                }\n",
      "                if (ctText != null && ctText.getBoundary() != null) {\n",
      "                    if (i == 0 && firstStartIndex > 0) {\n",
      "                        textLength = totalLength = textCode.getContent().length() - firstStartIndex;\n",
      "                    } else {\n",
      "                        if ((totalLength + textLength) > keywordLength) {\n",
      "                            textLength = keywordLength - totalLength;\n",
      "                        } else {\n",
      "                            totalLength += textCode.getContent().length();\n",
      "                        }\n",
      "                    }\n",
      "\n",
      "                    List<Float> deltaX = DeltaTool.getDelta(textCode.getDeltaX(), textCode.getContent().length());\n",
      "                    List<Float> deltaY = DeltaTool.getDelta(textCode.getDeltaY(), textCode.getContent().length());\n",
      "\n",
      "                    double width;\n",
      "                    if (i == 0 && firstStartIndex > 0) {\n",
      "                        width = getStringWidth(firstStartIndex, textLength, deltaX, ctText.getSize());\n",
      "                    } else {\n",
      "                        width = getStringWidth(0, textLength, deltaX, ctText.getSize());\n",
      "                    }\n",
      "\n",
      "                    if (width == 0) {\n",
      "                        width = kr.getText().getSize();\n",
      "                    }\n",
      "\n",
      "                    double height = strHeight(keyword, getFont(ctText, kr.getFont()));\n",
      "\n",
      "                    ST_Pos basePoint;\n",
      "                    ST_Array ctm = ctText.getCTM();\n",
      "                    if (ctm != null) {\n",
      "                        double[] matrix = getMatrix(ctm);\n",
      "                        double x = textCode.getX() == null ? 0 : textCode.getX();\n",
      "                        double y = textCode.getY() == null ? 0 : textCode.getY();\n",
      "                        if (i == 0 && firstStartIndex > 0 && deltaX.size() > 0) {\n",
      "                            for (int j = 0; j < firstStartIndex; j++) {\n",
      "                                x += deltaX.get(j);\n",
      "                            }\n",
      "                        }\n",
      "                        if (i == 0 && firstStartIndex > 0 && deltaY.size() > 0) {\n",
      "                            for (int j = 0; j < firstStartIndex; j++) {\n",
      "                                y += deltaY.get(j);\n",
      "                            }\n",
      "                        }\n",
      "                        ST_Pos leftBottom = transform(matrix, x, y);\n",
      "                        ST_Pos rightTop = transform(matrix, x + width, y - height);\n",
      "\n",
      "                        ST_Pos position = ctText.getBoundary().getTopLeftPos();\n",
      "\n",
      "                        ST_Box box = mergePos(leftBottom, rightTop);\n",
      "                        box.setTopLeftX(position.getX() + box.getTopLeftX());\n",
      "                        box.setTopLeftY(position.getY() + box.getTopLeftY());\n",
      "\n",
      "                        boxList.add(box);\n",
      "                    } else {\n",
      "                        basePoint = getLeftBottomPos(ctText.getBoundary(), textCode, deltaX, deltaY, 0);\n",
      "                        if (i == 0 && firstStartIndex > 0 && deltaX.size() > 0) {\n",
      "                            for (int j = 0; j < firstStartIndex; j++) {\n",
      "                                basePoint.setX(basePoint.getX() + deltaX.get(j));\n",
      "                            }\n",
      "                        }\n",
      "                        if (i == 0 && firstStartIndex > 0 && deltaY.size() > 0) {\n",
      "                            for (int j = 0; j < firstStartIndex; j++) {\n",
      "                                basePoint.setY(basePoint.getY() + deltaY.get(j));\n",
      "                            }\n",
      "                        }\n",
      "                        boxList.add(new ST_Box(basePoint.getX(), basePoint.getY() - height, width, height));\n",
      "                    }\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "        if (boxList.size() > 0) {\n",
      "            KeywordPosition position = new KeywordPosition(page, mergeBox(boxList));\n",
      "            position.setKeyword(keyword);\n",
      "            positionList.add(position);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u5408\u5e76Box\n",
      "     *\n",
      "     * @param boxList \u76d2\u5b50\u5217\u8868\n",
      "     */\n",
      "    private static ST_Box mergeBox(List<ST_Box> boxList) {\n",
      "        double topLeftX = 0, topLeftY = 0, bottomRightX = 0, bottomRightY = 0;\n",
      "\n",
      "        for (int i = 0; i < boxList.size(); i++) {\n",
      "            ST_Box box = boxList.get(i);\n",
      "            if (i == 0) {\n",
      "                topLeftX = box.getTopLeftX();\n",
      "                topLeftY = box.getTopLeftY();\n",
      "            } else {\n",
      "                if (box.getTopLeftX() < topLeftX) {\n",
      "                    topLeftX = box.getTopLeftX();\n",
      "                }\n",
      "                if (box.getTopLeftY() < topLeftY) {\n",
      "                    topLeftY = box.getTopLeftY();\n",
      "                }\n",
      "            }\n",
      "            if ((box.getTopLeftX() + box.getWidth()) > bottomRightX) {\n",
      "                bottomRightX = box.getTopLeftX() + box.getWidth();\n",
      "            }\n",
      "            if ((box.getTopLeftY() + box.getHeight()) > bottomRightY) {\n",
      "                bottomRightY = box.getTopLeftY() + box.getHeight();\n",
      "            }\n",
      "        }\n",
      "\n",
      "        return new ST_Box(topLeftX, topLeftY, bottomRightX - topLeftX, bottomRightY - topLeftY);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u6a21\u677f\u9875\u6570\u636e\n",
      "     *\n",
      "     * @param locator  \u8d44\u6e90\u5b9a\u4f4d\u5668\n",
      "     * @param dataDir  Document File\u8def\u5f84\n",
      "     * @param document \u6587\u6863\u5bf9\u8c61\n",
      "     * @throws FileNotFoundException \u6587\u4ef6\u4e0d\u5b58\u5728\u5f02\u5e38\n",
      "     * @throws DocumentException     \u6587\u6863\u89e3\u6790\u5f02\u5e38\n",
      "     */\n",
      "    private static Map<ST_ID, Page> getTemplatePage(ResourceLocator locator, String dataDir, Document document)\n",
      "            throws FileNotFoundException, DocumentException {\n",
      "        Map<ST_ID, Page> templatePage = new HashMap<>(8);\n",
      "\n",
      "        //\u521b\u5efa\u6a21\u677f\u5b57\u4f53\u5bf9\u8c61\n",
      "        for (CT_TemplatePage tp : document.getCommonData().getTemplatePages()) {\n",
      "            String templateFile = dataDir + \"/\" + tp.getBaseLoc();\n",
      "            Page page = locator.get(templateFile, Page::new);\n",
      "            templatePage.put(tp.getID(), page);\n",
      "        }\n",
      "\n",
      "        return templatePage;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u521b\u5efa\u5173\u952e\u5b57\u4f4d\u7f6e\u5bf9\u8c61\n",
      "     *\n",
      "     * @param textCode      \u6587\u5b57\u5b9a\u4f4d\u5bf9\u8c61\n",
      "     * @param textIndex     \u6587\u672c\u7d22\u5f15\n",
      "     * @param page          \u9875\u7801\n",
      "     * @param ctText        \u6587\u5b57\u5bf9\u8c61\n",
      "     * @param lineHeight    \u5b57\u4f53\u9ad8\u5ea6\n",
      "     * @param deltaX        X\u504f\u79fb\n",
      "     * @param deltaY        Y\u504f\u79fb\n",
      "     * @param keywordLength \u6587\u672c\u957f\u5ea6\n",
      "     * @return \u5173\u952e\u5b57\u5bf9\u8c61\n",
      "     */\n",
      "    private static KeywordPosition getKeywordPosition(TextCode textCode, int textIndex, int page, CT_Text ctText, double lineHeight,\n",
      "                                                      List<Float> deltaX, List<Float> deltaY, int keywordLength) {\n",
      "\n",
      "        ST_Pos position = ctText.getBoundary().getTopLeftPos();\n",
      "\n",
      "        double positionX = position.getX() == null ? 0 : position.getX();\n",
      "        double positionY = position.getY() == null ? 0 : position.getY();\n",
      "\n",
      "        double x = (textCode.getX() == null ? 0 : textCode.getX()) + positionX;\n",
      "        double y = (textCode.getY() == null ? 0 : textCode.getY()) + positionY;\n",
      "\n",
      "        double maxX = Double.MIN_VALUE;\n",
      "        double maxY = Double.MIN_VALUE;\n",
      "        double minX = Double.MAX_VALUE;\n",
      "        double minY = Double.MAX_VALUE;\n",
      "        for (int i = 0; i < textIndex + keywordLength; i++) {\n",
      "            if (i >= textIndex) {\n",
      "                // \u7b2c\u4e00\u4e2a\u6709\u6548\u5b57\u7b26\u5f00\u59cb\n",
      "                maxX = Math.max(maxX, x);\n",
      "                maxY = Math.max(maxY, y);\n",
      "                minX = Math.min(minX, x);\n",
      "                minY = Math.min(minY, y);\n",
      "            }\n",
      "\n",
      "            if (deltaX.size() > i) {\n",
      "                x += deltaX.get(i);\n",
      "            }\n",
      "            if (deltaY.size() > i) {\n",
      "                y += deltaY.get(i);\n",
      "            }\n",
      "        }\n",
      "\n",
      "        double w = maxX - minX + ctText.getSize();\n",
      "        double h = maxY - minY + lineHeight;\n",
      "        // Top Left\n",
      "        double tlx = minX;\n",
      "        double tly = minY - lineHeight;\n",
      "\n",
      "\n",
      "        return new KeywordPosition(page, new ST_Box(tlx, tly, w, h));\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u5b57\u4f53\u9ad8\u5ea6\n",
      "     *\n",
      "     * @param str  \u5f85\u6d4b\u91cf\u6587\u5b57\n",
      "     * @param font \u5b57\u4f53\n",
      "     * @return \u9ad8\u5ea6\n",
      "     */\n",
      "    private static Double strHeight(String str, Font font) {\n",
      "        FontRenderContext frc =\n",
      "                new FontRenderContext(new AffineTransform(), true, true);\n",
      "        return font.getStringBounds(str, frc).getHeight() / POINT_PER_MM;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u6587\u672c\u5bbd\u5ea6\uff0c\u5355\u4f4d\u6beb\u7c73(mm)\n",
      "     *\n",
      "     * @param textIndex     \u6587\u5b57\u7d22\u5f15\n",
      "     * @param keywordLength \u6587\u672c\u957f\u5ea6\n",
      "     * @param deltaX        X\u504f\u79fb\u91cf\n",
      "     * @param fontSize      \u6587\u5b57\u5b57\u53f7\n",
      "     * @return \u6587\u672c\u5bbd\u5ea6\n",
      "     */\n",
      "    private static double getStringWidth(int textIndex, int keywordLength, List<Float> deltaX, Double fontSize) {\n",
      "        double width = fontSize;\n",
      "        for (int i = textIndex; i < textIndex + keywordLength - 1 && i < deltaX.size(); i++) {\n",
      "            width += deltaX.get(i);\n",
      "        }\n",
      "        return width;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u5b57\u4f53\n",
      "     *\n",
      "     * @param ctText \u6587\u5b57\u5bf9\u8c61\n",
      "     * @param ctFont \u5b57\u5f62\u5bf9\u8c61\n",
      "     * @return \u5b57\u4f53\u5bf9\u8c61\n",
      "     */\n",
      "    private static Font getFont(CT_Text ctText, CT_Font ctFont) {\n",
      "        if (ctFont == null) {\n",
      "            ctFont = new CT_Font(\"\u9ed1\u4f53\");\n",
      "        }\n",
      "\n",
      "        Font font;\n",
      "        int fontSize = (int) (ctText.getSize() * POINT_PER_MM);\n",
      "        if (ctText.getItalic()) {\n",
      "            font = new Font(ctFont.getFontName(), Font.ITALIC, fontSize);\n",
      "        } else {\n",
      "            font = new Font(ctFont.getFontName(), Font.PLAIN, fontSize);\n",
      "        }\n",
      "\n",
      "        Map attributes = font.getAttributes();\n",
      "        if (ctText.getHScale() != null) {\n",
      "            attributes.put(TextAttribute.WIDTH, ctText.getHScale());\n",
      "        }\n",
      "\n",
      "        if (ctText.getWeight() != null) {\n",
      "            attributes.put(TextAttribute.WEIGHT, ctText.getWeight().getWeight() / 100);\n",
      "        }\n",
      "\n",
      "        return Font.getFont(attributes);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u5de6\u4e0b\u89d2\u4f4d\u7f6e\n",
      "     *\n",
      "     * @param boundary  \u77e9\u5f62\u6846\n",
      "     * @param textCode  \u6587\u5b57\u5b9a\u4f4d\n",
      "     * @param deltaX    X\u504f\u79fb\n",
      "     * @param deltaY    Y\u504f\u79fb\n",
      "     * @param textIndex \u6587\u5b57\u7d22\u5f15\n",
      "     * @return \u5de6\u4e0b\u89d2\u5750\u6807\n",
      "     */\n",
      "    private static ST_Pos getLeftBottomPos(ST_Box boundary, TextCode textCode, List<Float> deltaX, List<Float> deltaY, int textIndex) {\n",
      "        ST_Pos position = boundary.getTopLeftPos();\n",
      "\n",
      "        double positionX = position.getX() == null ? 0 : position.getX();\n",
      "        double positionY = position.getY() == null ? 0 : position.getY();\n",
      "\n",
      "        double x = (textCode.getX() == null ? 0 : textCode.getX()) + positionX;\n",
      "        double y = (textCode.getY() == null ? 0 : textCode.getY()) + positionY;\n",
      "\n",
      "        for (int i = 0; i < textIndex; i++) {\n",
      "            if (deltaX.size() > i) {\n",
      "                x += deltaX.get(i);\n",
      "            }\n",
      "            if (deltaY.size() > i) {\n",
      "                y += deltaY.get(i);\n",
      "            }\n",
      "        }\n",
      "\n",
      "        return ST_Pos.getInstance(x, y);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u9884\u5904\u7406\u6570\u636e\n",
      "     *\n",
      "     * @param reader          OFD\u89e3\u6790\u5668\n",
      "     * @param textCodeList    \u6587\u672c\u5217\u8868\n",
      "     * @param boundaryMapping \u5916\u63a5\u77e9\u5f62\u6620\u5c04\n",
      "     * @param fontMapping     \u5b57\u4f53\u6620\u5c04\u5bf9\u8c61\n",
      "     * @param templatePageMap \u6a21\u677f\u6570\u636e\n",
      "     * @param pageNumber      \u9875\u7801\n",
      "     */\n",
      "    private static void preparedContextData(OFDReader reader, List<TextCode> textCodeList, Map<TextCode, KeywordResource> boundaryMapping,\n",
      "                                            Map<ST_ID, CT_Font> fontMapping, Map<ST_ID, Page> templatePageMap, int pageNumber) {\n",
      "        Page page = reader.getPage(pageNumber);\n",
      "        List<CT_Layer> layers = new ArrayList<>(0);\n",
      "        Content content = page.getContent();\n",
      "        if (content != null) {\n",
      "            // \u83b7\u53d6\u6a21\u677f\u9875\u6b63\u6587\u5c42\n",
      "            layers = content.getLayers();\n",
      "        }\n",
      "\n",
      "        for (Template tpl : page.getTemplates()) {\n",
      "            //\u83b7\u53d6\u6a21\u677f\u9875\n",
      "            Page templatePage = null;\n",
      "            if (tpl != null) {\n",
      "                ST_ID templateId = tpl.getTemplateID().getRefId();\n",
      "                if (templatePageMap.containsKey(templateId)) {\n",
      "                    templatePage = templatePageMap.get(templateId);\n",
      "                }\n",
      "            }\n",
      "\n",
      "            //\u6dfb\u52a0\u6a21\u677f\u5c42\n",
      "            if (templatePage != null) {\n",
      "                Content tplContent = templatePage.getContent();\n",
      "                if (tplContent != null) {\n",
      "                    layers.addAll(tplContent.getLayers());\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "        //\u521b\u5efa\u5b57\u578b\u6620\u5c04\u5173\u7cfb\n",
      "        for (CT_Layer layer : layers) {\n",
      "            pageBlockHandle(textCodeList, boundaryMapping, fontMapping, pageNumber, layer.getPageBlocks());\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u9875\u9762\u5757\u5904\u7406\n",
      "     *\n",
      "     * @param textCodeList    \u6587\u672c\u5217\u8868\n",
      "     * @param boundaryMapping \u5916\u63a5\u77e9\u5f62\u6620\u5c04\n",
      "     * @param fontMapping     \u5b57\u4f53\u6620\u5c04\u5bf9\u8c61\n",
      "     * @param pageNumber      \u9875\u7801\n",
      "     * @param pageBlocks      \u9875\u5757\u5217\u8868\n",
      "     */\n",
      "    private static void pageBlockHandle(List<TextCode> textCodeList, Map<TextCode, KeywordResource> boundaryMapping, Map<ST_ID, CT_Font> fontMapping,\n",
      "                                        int pageNumber, List<PageBlockType> pageBlocks) {\n",
      "        for (PageBlockType block : pageBlocks) {\n",
      "            if (block instanceof TextObject) {\n",
      "                TextObject text = (TextObject) block;\n",
      "                CT_Font font = fontMapping.get(text.getFont().getRefId());\n",
      "                KeywordResource kr;\n",
      "\n",
      "                for (TextCode code : text.getTextCodes()) {\n",
      "                    kr = new KeywordResource();\n",
      "                    kr.setPage(pageNumber);\n",
      "                    kr.setFont(font);\n",
      "                    kr.setText(text);\n",
      "\n",
      "                    textCodeList.add(code);\n",
      "                    boundaryMapping.put(code, kr);\n",
      "                }\n",
      "            } else if (block instanceof CT_PageBlock) {\n",
      "                CT_PageBlock ctPageBlock = (CT_PageBlock) block;\n",
      "                pageBlockHandle(textCodeList, boundaryMapping, fontMapping, pageNumber, ctPageBlock.getPageBlocks());\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u5b57\u4f53\u6620\u5c04\u5bf9\u8c61\n",
      "     *\n",
      "     * @param locator  \u8d44\u6e90\u5b9a\u4f4d\u5668\n",
      "     * @param dataDir  Document File\u8def\u5f84\n",
      "     * @param document \u6587\u6863\u5bf9\u8c61\n",
      "     * @throws FileNotFoundException \u6587\u4ef6\u4e0d\u5b58\u5728\u5f02\u5e38\n",
      "     * @throws DocumentException     \u6587\u6863\u89e3\u6790\u5f02\u5e38\n",
      "     */\n",
      "    private static Map<ST_ID, CT_Font> getFontMapping(ResourceLocator locator, String dataDir, Document document)\n",
      "            throws FileNotFoundException, DocumentException {\n",
      "        Map<ST_ID, CT_Font> fontMapping = new HashMap<>(8);\n",
      "        //\u8d44\u6e90\u4f4d\u7f6e\n",
      "        ST_Loc publicRes = document.getCommonData().getPublicRes();\n",
      "        if (publicRes != null) {\n",
      "            String resFile = dataDir + \"/\" + publicRes.getLoc();\n",
      "            Res res = locator.get(resFile, Res::new);\n",
      "            List<Fonts> fontsList = res.getFonts();\n",
      "            for (Fonts font : fontsList) {\n",
      "                List<CT_Font> ctFontList = font.getFonts();\n",
      "                for (CT_Font ctFont : ctFontList) {\n",
      "                    fontMapping.put(ctFont.getID(), ctFont);\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "        return fontMapping;\n",
      "    }\n",
      "\n",
      "}\n"
    ],
    "test_content": [
      "package org.ofdrw.reader.keyword;\n",
      "\n",
      "import org.dom4j.DocumentException;\n",
      "import org.junit.jupiter.api.Test;\n",
      "import org.ofdrw.core.basicType.ST_Box;\n",
      "import org.ofdrw.reader.OFDReader;\n",
      "\n",
      "import java.io.IOException;\n",
      "import java.nio.file.Path;\n",
      "import java.nio.file.Paths;\n",
      "import java.util.List;\n",
      "\n",
      "import static org.junit.jupiter.api.Assertions.assertEquals;\n",
      "\n",
      "/**\n",
      " * \u5173\u952e\u5b57\u62bd\u53d6 \u8c03\u7528\u793a\u4f8b\n",
      " *\n",
      " * @author \u6743\u89c2\u5b87\n",
      " * @since 2020-10-13 19:27:52\n",
      " */\n",
      "class KeywordExtractorTest {\n",
      "\n",
      "    @Test\n",
      "    void testKeyword() throws IOException, DocumentException {\n",
      "        Path src = Paths.get(\"src/test/resources/multiKeywordInTextCode.ofd\");\n",
      "        String keyword = \"\u6253\u53d1\";\n",
      "\n",
      "        try (OFDReader reader = new OFDReader(src)) {\n",
      "            List<KeywordPosition> positionList = KeywordExtractor.getKeyWordPositionList(reader, keyword);\n",
      "            assertEquals(7, positionList.size());\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u5173\u952e\u5b57\u5728\u6587\u6863\u4e2d\u5750\u6807\n",
      "     */\n",
      "    @Test\n",
      "    void getKeyWordPositionList() throws IOException, DocumentException {\n",
      "\n",
      "        Path src = Paths.get(\"src/test/resources/keyword.ofd\");\n",
      "        String keyword = \"\u529e\u7406\";\n",
      "\n",
      "        try (OFDReader reader = new OFDReader(src)) {\n",
      "            List<KeywordPosition> positionList = KeywordExtractor.getKeyWordPositionList(reader, keyword);\n",
      "            assertEquals(positionList.size(), 1);\n",
      "            KeywordPosition keywordPos = positionList.get(0);\n",
      "            assertEquals(keywordPos.getPage(), 1);\n",
      "            ST_Box box = keywordPos.getBox();\n",
      "            for (KeywordPosition pos : positionList) {\n",
      "                System.out.println(pos);\n",
      "            }\n",
      "//            // \u8bef\u5dee\u4fdd\u6301\u57280.1\n",
      "//            assertEquals(\"131.9\", String.format(\"%.1f\", box.getTopLeftX()));\n",
      "//            assertEquals(\"87.9\", String.format(\"%.1f\", box.getTopLeftY()));\n",
      "//            assertEquals(\"22.3\", String.format(\"%.1f\", box.getWidth()));\n",
      "//            assertEquals(\"22.3\", String.format(\"%.1f\", box.getHeight()));\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u83b7\u53d6\u5173\u952e\u5b57\u5728\u6587\u6863\u4e2d\u5750\u6807\n",
      "     */\n",
      "    @Test\n",
      "    void getMultiKeyWordPositionList() throws IOException, DocumentException {\n",
      "        Path src = Paths.get(\"src/test/resources/keyword.ofd\");\n",
      "        String[] keywords = {\"\u529e\u7406\", \"\u4e0d\u52a8\u4ea7\u6743\"};\n",
      "\n",
      "        try (OFDReader reader = new OFDReader(src)) {\n",
      "            List<KeywordPosition> positionList = KeywordExtractor.getKeyWordPositionList(reader, keywords);\n",
      "            assertEquals(positionList.size(), 3);\n",
      "            for (KeywordPosition keywordPosition : positionList) {\n",
      "                System.out.println(keywordPosition);\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    void testKeyword2() throws IOException, DocumentException {\n",
      "        Path src = Paths.get(\"src/test/resources/keyword2.ofd\");\n",
      "        String keyword = \"\u9a6c\u4e0a\u878d\";\n",
      "\n",
      "        try (OFDReader reader = new OFDReader(src)) {\n",
      "            List<KeywordPosition> positionList = KeywordExtractor.getKeyWordPositionList(reader, keyword);\n",
      "\n",
      "            for (KeywordPosition keywordPosition : positionList) {\n",
      "                assertEquals(keyword, keywordPosition.getKeyword());\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "}"
    ],
    "method_lines_dic": {
      "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String)": [
        59,
        61
      ],
      "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String[])": [
        72,
        74
      ],
      "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String,int[])": [
        86,
        88
      ],
      "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String[],int[])": [
        100,
        170
      ],
      "KeywordExtractor::::checkPostfixMatch(java.lang.String,java.lang.String)": [
        180,
        192
      ],
      "KeywordExtractor::::transform(double[],double,double)": [
        425,
        429
      ],
      "KeywordExtractor::::strHeight(java.lang.String,java.awt.Font)": [
        664,
        668
      ],
      "KeywordExtractor::::getStringWidth(int,int,java.util.List<java.lang.Float>,java.lang.Double)": [
        679,
        685
      ]
    },
    "test_method_lines_dic": {
      "KeywordExtractorTest::::testKeyword()": [
        23,
        32
      ],
      "KeywordExtractorTest::::getKeyWordPositionList()": [
        37,
        58
      ],
      "KeywordExtractorTest::::getMultiKeyWordPositionList()": [
        63,
        75
      ],
      "KeywordExtractorTest::::testKeyword2()": [
        77,
        89
      ]
    },
    "reverse_method_lines_dic": {
      "59": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String)",
      "60": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String)",
      "61": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String)",
      "72": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String[])",
      "73": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String[])",
      "74": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String[])",
      "86": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String,int[])",
      "87": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String,int[])",
      "88": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String,int[])",
      "100": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String[],int[])",
      "101": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String[],int[])",
      "102": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String[],int[])",
      "103": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String[],int[])",
      "104": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String[],int[])",
      "105": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String[],int[])",
      "106": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String[],int[])",
      "107": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String[],int[])",
      "108": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String[],int[])",
      "109": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String[],int[])",
      "110": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String[],int[])",
      "111": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String[],int[])",
      "112": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String[],int[])",
      "113": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String[],int[])",
      "114": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String[],int[])",
      "115": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String[],int[])",
      "116": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String[],int[])",
      "117": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String[],int[])",
      "118": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String[],int[])",
      "119": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String[],int[])",
      "120": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String[],int[])",
      "121": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String[],int[])",
      "122": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String[],int[])",
      "123": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String[],int[])",
      "124": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String[],int[])",
      "125": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String[],int[])",
      "126": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String[],int[])",
      "127": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String[],int[])",
      "128": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String[],int[])",
      "129": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String[],int[])",
      "130": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String[],int[])",
      "131": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String[],int[])",
      "132": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String[],int[])",
      "133": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String[],int[])",
      "134": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String[],int[])",
      "135": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String[],int[])",
      "136": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String[],int[])",
      "137": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String[],int[])",
      "138": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String[],int[])",
      "139": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String[],int[])",
      "140": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String[],int[])",
      "141": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String[],int[])",
      "142": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String[],int[])",
      "143": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String[],int[])",
      "144": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String[],int[])",
      "145": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String[],int[])",
      "146": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String[],int[])",
      "147": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String[],int[])",
      "148": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String[],int[])",
      "149": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String[],int[])",
      "150": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String[],int[])",
      "151": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String[],int[])",
      "152": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String[],int[])",
      "153": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String[],int[])",
      "154": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String[],int[])",
      "155": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String[],int[])",
      "156": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String[],int[])",
      "157": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String[],int[])",
      "158": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String[],int[])",
      "159": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String[],int[])",
      "160": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String[],int[])",
      "161": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String[],int[])",
      "162": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String[],int[])",
      "163": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String[],int[])",
      "164": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String[],int[])",
      "165": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String[],int[])",
      "166": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String[],int[])",
      "167": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String[],int[])",
      "168": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String[],int[])",
      "169": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String[],int[])",
      "170": "KeywordExtractor::::getKeyWordPositionList(org.ofdrw.reader.OFDReader,java.lang.String[],int[])",
      "180": "KeywordExtractor::::checkPostfixMatch(java.lang.String,java.lang.String)",
      "181": "KeywordExtractor::::checkPostfixMatch(java.lang.String,java.lang.String)",
      "182": "KeywordExtractor::::checkPostfixMatch(java.lang.String,java.lang.String)",
      "183": "KeywordExtractor::::checkPostfixMatch(java.lang.String,java.lang.String)",
      "184": "KeywordExtractor::::checkPostfixMatch(java.lang.String,java.lang.String)",
      "185": "KeywordExtractor::::checkPostfixMatch(java.lang.String,java.lang.String)",
      "186": "KeywordExtractor::::checkPostfixMatch(java.lang.String,java.lang.String)",
      "187": "KeywordExtractor::::checkPostfixMatch(java.lang.String,java.lang.String)",
      "188": "KeywordExtractor::::checkPostfixMatch(java.lang.String,java.lang.String)",
      "189": "KeywordExtractor::::checkPostfixMatch(java.lang.String,java.lang.String)",
      "190": "KeywordExtractor::::checkPostfixMatch(java.lang.String,java.lang.String)",
      "191": "KeywordExtractor::::checkPostfixMatch(java.lang.String,java.lang.String)",
      "192": "KeywordExtractor::::checkPostfixMatch(java.lang.String,java.lang.String)",
      "425": "KeywordExtractor::::transform(double[],double,double)",
      "426": "KeywordExtractor::::transform(double[],double,double)",
      "427": "KeywordExtractor::::transform(double[],double,double)",
      "428": "KeywordExtractor::::transform(double[],double,double)",
      "429": "KeywordExtractor::::transform(double[],double,double)",
      "664": "KeywordExtractor::::strHeight(java.lang.String,java.awt.Font)",
      "665": "KeywordExtractor::::strHeight(java.lang.String,java.awt.Font)",
      "666": "KeywordExtractor::::strHeight(java.lang.String,java.awt.Font)",
      "667": "KeywordExtractor::::strHeight(java.lang.String,java.awt.Font)",
      "668": "KeywordExtractor::::strHeight(java.lang.String,java.awt.Font)",
      "679": "KeywordExtractor::::getStringWidth(int,int,java.util.List<java.lang.Float>,java.lang.Double)",
      "680": "KeywordExtractor::::getStringWidth(int,int,java.util.List<java.lang.Float>,java.lang.Double)",
      "681": "KeywordExtractor::::getStringWidth(int,int,java.util.List<java.lang.Float>,java.lang.Double)",
      "682": "KeywordExtractor::::getStringWidth(int,int,java.util.List<java.lang.Float>,java.lang.Double)",
      "683": "KeywordExtractor::::getStringWidth(int,int,java.util.List<java.lang.Float>,java.lang.Double)",
      "684": "KeywordExtractor::::getStringWidth(int,int,java.util.List<java.lang.Float>,java.lang.Double)",
      "685": "KeywordExtractor::::getStringWidth(int,int,java.util.List<java.lang.Float>,java.lang.Double)"
    },
    "test_reverse_method_lines_dic": {
      "23": "KeywordExtractorTest::::testKeyword()",
      "24": "KeywordExtractorTest::::testKeyword()",
      "25": "KeywordExtractorTest::::testKeyword()",
      "26": "KeywordExtractorTest::::testKeyword()",
      "27": "KeywordExtractorTest::::testKeyword()",
      "28": "KeywordExtractorTest::::testKeyword()",
      "29": "KeywordExtractorTest::::testKeyword()",
      "30": "KeywordExtractorTest::::testKeyword()",
      "31": "KeywordExtractorTest::::testKeyword()",
      "32": "KeywordExtractorTest::::testKeyword()",
      "37": "KeywordExtractorTest::::getKeyWordPositionList()",
      "38": "KeywordExtractorTest::::getKeyWordPositionList()",
      "39": "KeywordExtractorTest::::getKeyWordPositionList()",
      "40": "KeywordExtractorTest::::getKeyWordPositionList()",
      "41": "KeywordExtractorTest::::getKeyWordPositionList()",
      "42": "KeywordExtractorTest::::getKeyWordPositionList()",
      "43": "KeywordExtractorTest::::getKeyWordPositionList()",
      "44": "KeywordExtractorTest::::getKeyWordPositionList()",
      "45": "KeywordExtractorTest::::getKeyWordPositionList()",
      "46": "KeywordExtractorTest::::getKeyWordPositionList()",
      "47": "KeywordExtractorTest::::getKeyWordPositionList()",
      "48": "KeywordExtractorTest::::getKeyWordPositionList()",
      "49": "KeywordExtractorTest::::getKeyWordPositionList()",
      "50": "KeywordExtractorTest::::getKeyWordPositionList()",
      "51": "KeywordExtractorTest::::getKeyWordPositionList()",
      "52": "KeywordExtractorTest::::getKeyWordPositionList()",
      "53": "KeywordExtractorTest::::getKeyWordPositionList()",
      "54": "KeywordExtractorTest::::getKeyWordPositionList()",
      "55": "KeywordExtractorTest::::getKeyWordPositionList()",
      "56": "KeywordExtractorTest::::getKeyWordPositionList()",
      "57": "KeywordExtractorTest::::getKeyWordPositionList()",
      "58": "KeywordExtractorTest::::getKeyWordPositionList()",
      "63": "KeywordExtractorTest::::getMultiKeyWordPositionList()",
      "64": "KeywordExtractorTest::::getMultiKeyWordPositionList()",
      "65": "KeywordExtractorTest::::getMultiKeyWordPositionList()",
      "66": "KeywordExtractorTest::::getMultiKeyWordPositionList()",
      "67": "KeywordExtractorTest::::getMultiKeyWordPositionList()",
      "68": "KeywordExtractorTest::::getMultiKeyWordPositionList()",
      "69": "KeywordExtractorTest::::getMultiKeyWordPositionList()",
      "70": "KeywordExtractorTest::::getMultiKeyWordPositionList()",
      "71": "KeywordExtractorTest::::getMultiKeyWordPositionList()",
      "72": "KeywordExtractorTest::::getMultiKeyWordPositionList()",
      "73": "KeywordExtractorTest::::getMultiKeyWordPositionList()",
      "74": "KeywordExtractorTest::::getMultiKeyWordPositionList()",
      "75": "KeywordExtractorTest::::getMultiKeyWordPositionList()",
      "77": "KeywordExtractorTest::::testKeyword2()",
      "78": "KeywordExtractorTest::::testKeyword2()",
      "79": "KeywordExtractorTest::::testKeyword2()",
      "80": "KeywordExtractorTest::::testKeyword2()",
      "81": "KeywordExtractorTest::::testKeyword2()",
      "82": "KeywordExtractorTest::::testKeyword2()",
      "83": "KeywordExtractorTest::::testKeyword2()",
      "84": "KeywordExtractorTest::::testKeyword2()",
      "85": "KeywordExtractorTest::::testKeyword2()",
      "86": "KeywordExtractorTest::::testKeyword2()",
      "87": "KeywordExtractorTest::::testKeyword2()",
      "88": "KeywordExtractorTest::::testKeyword2()",
      "89": "KeywordExtractorTest::::testKeyword2()"
    },
    "tests": [
      {
        "test_lines": [
          23,
          32
        ],
        "covered_lines": [
          60,
          87,
          101,
          103,
          105,
          106,
          107,
          109,
          112,
          115,
          118,
          119,
          121,
          122,
          129,
          130,
          138,
          142,
          144,
          145,
          146,
          147,
          148,
          149,
          150,
          151,
          153,
          169,
          310,
          311,
          312,
          313,
          314,
          315,
          317,
          318,
          319,
          320,
          323,
          324,
          325,
          328,
          331,
          332,
          334,
          335,
          336,
          339,
          590,
          593,
          599,
          618,
          620,
          621,
          623,
          624,
          626,
          627,
          628,
          629,
          630,
          631,
          633,
          634,
          635,
          636,
          639,
          640,
          642,
          647,
          648,
          650,
          651,
          654,
          665,
          667,
          695,
          700,
          701,
          704,
          707,
          708,
          709,
          712,
          713,
          716,
          762,
          763,
          764,
          765,
          767,
          770,
          789,
          790,
          791,
          792,
          805,
          806,
          807,
          808,
          811,
          812,
          813,
          814,
          815,
          817,
          818,
          819,
          820,
          824,
          825,
          838,
          840,
          841,
          842,
          843,
          844,
          845,
          846,
          847,
          848,
          849,
          850,
          852
        ]
      },
      {
        "test_lines": [
          37,
          58
        ],
        "covered_lines": [
          60,
          87,
          101,
          103,
          105,
          106,
          107,
          109,
          112,
          115,
          118,
          119,
          121,
          122,
          129,
          130,
          138,
          142,
          144,
          145,
          146,
          147,
          148,
          149,
          150,
          151,
          153,
          154,
          158,
          160,
          169,
          182,
          183,
          191,
          310,
          311,
          312,
          313,
          314,
          315,
          317,
          318,
          319,
          320,
          323,
          324,
          325,
          326,
          331,
          332,
          334,
          335,
          336,
          339,
          358,
          359,
          360,
          362,
          363,
          364,
          366,
          371,
          373,
          374,
          375,
          376,
          378,
          380,
          381,
          383,
          393,
          395,
          396,
          397,
          398,
          399,
          401,
          404,
          405,
          407,
          408,
          410,
          411,
          414,
          426,
          427,
          428,
          438,
          439,
          440,
          441,
          443,
          590,
          593,
          594,
          595,
          596,
          597,
          599,
          665,
          667,
          680,
          681,
          682,
          684,
          695,
          700,
          701,
          704,
          707,
          708,
          709,
          712,
          713,
          716,
          762,
          763,
          764,
          765,
          767,
          770,
          772,
          773,
          774,
          775,
          776,
          781,
          782,
          783,
          784,
          787,
          789,
          790,
          791,
          792,
          805,
          806,
          807,
          808,
          811,
          812,
          813,
          814,
          815,
          817,
          818,
          819,
          820,
          824,
          825,
          838,
          840,
          841,
          842,
          843,
          844,
          845,
          846,
          847,
          848,
          849,
          850,
          852
        ]
      },
      {
        "test_lines": [
          63,
          75
        ],
        "covered_lines": [
          73,
          101,
          103,
          105,
          106,
          107,
          109,
          112,
          115,
          118,
          119,
          121,
          122,
          129,
          130,
          138,
          142,
          144,
          145,
          146,
          147,
          148,
          149,
          150,
          151,
          153,
          154,
          158,
          160,
          169,
          182,
          183,
          184,
          185,
          186,
          187,
          191,
          310,
          311,
          312,
          313,
          314,
          315,
          317,
          318,
          319,
          320,
          323,
          324,
          325,
          326,
          328,
          331,
          332,
          334,
          335,
          336,
          339,
          358,
          359,
          360,
          362,
          363,
          364,
          366,
          371,
          373,
          374,
          375,
          376,
          378,
          380,
          381,
          383,
          393,
          395,
          396,
          397,
          398,
          399,
          401,
          404,
          405,
          407,
          408,
          410,
          411,
          414,
          426,
          427,
          428,
          438,
          439,
          440,
          441,
          443,
          590,
          593,
          594,
          595,
          596,
          597,
          599,
          618,
          620,
          621,
          623,
          624,
          626,
          627,
          628,
          629,
          630,
          631,
          633,
          634,
          635,
          636,
          639,
          640,
          642,
          643,
          647,
          648,
          650,
          651,
          654,
          665,
          667,
          680,
          681,
          682,
          684,
          695,
          700,
          701,
          704,
          707,
          708,
          709,
          712,
          713,
          716,
          762,
          763,
          764,
          765,
          767,
          770,
          772,
          773,
          774,
          775,
          776,
          781,
          782,
          783,
          784,
          787,
          789,
          790,
          791,
          792,
          805,
          806,
          807,
          808,
          811,
          812,
          813,
          814,
          815,
          817,
          818,
          819,
          820,
          824,
          825,
          838,
          840,
          841,
          842,
          843,
          844,
          845,
          846,
          847,
          848,
          849,
          850,
          852
        ]
      },
      {
        "test_lines": [
          77,
          89
        ],
        "covered_lines": [
          60,
          87,
          101,
          103,
          105,
          106,
          107,
          109,
          112,
          115,
          118,
          119,
          121,
          122,
          129,
          130,
          138,
          142,
          144,
          145,
          146,
          147,
          148,
          149,
          150,
          151,
          153,
          154,
          158,
          160,
          161,
          169,
          182,
          183,
          184,
          185,
          191,
          208,
          210,
          212,
          214,
          215,
          216,
          217,
          218,
          219,
          222,
          267,
          268,
          269,
          270,
          271,
          272,
          273,
          276,
          277,
          279,
          283,
          284,
          285,
          286,
          287,
          297,
          310,
          311,
          312,
          313,
          314,
          315,
          317,
          318,
          319,
          320,
          323,
          324,
          325,
          328,
          331,
          332,
          334,
          335,
          336,
          339,
          457,
          459,
          461,
          462,
          463,
          464,
          465,
          466,
          467,
          468,
          470,
          471,
          472,
          474,
          475,
          481,
          482,
          485,
          486,
          488,
          491,
          495,
          498,
          499,
          524,
          525,
          526,
          527,
          530,
          535,
          540,
          541,
          542,
          543,
          545,
          553,
          555,
          556,
          557,
          558,
          559,
          561,
          564,
          568,
          569,
          571,
          572,
          576,
          590,
          593,
          599,
          618,
          620,
          621,
          623,
          624,
          626,
          627,
          628,
          629,
          630,
          631,
          633,
          634,
          635,
          636,
          639,
          640,
          642,
          647,
          648,
          650,
          651,
          654,
          665,
          667,
          680,
          681,
          682,
          684,
          695,
          700,
          701,
          704,
          707,
          708,
          709,
          712,
          713,
          716,
          730,
          732,
          733,
          735,
          736,
          738,
          747,
          762,
          763,
          764,
          765,
          767,
          770,
          789,
          790,
          791,
          792,
          805,
          806,
          807,
          808,
          811,
          812,
          813,
          814,
          815,
          817,
          818,
          819,
          820,
          824,
          825,
          838,
          840,
          841,
          842,
          843,
          844,
          845,
          846,
          847,
          848,
          849,
          850,
          852
        ]
      }
    ]
  }
}