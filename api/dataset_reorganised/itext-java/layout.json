{
  "/bernard/dataset_construction/prep/repos/itext-java/layout/src/main/java/com/itextpdf/layout/Document.java": {
    "class_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.layout;\n",
      "\n",
      "import com.itextpdf.kernel.exceptions.PdfException;\n",
      "import com.itextpdf.kernel.geom.PageSize;\n",
      "import com.itextpdf.kernel.geom.Rectangle;\n",
      "import com.itextpdf.kernel.pdf.PdfDocument;\n",
      "import com.itextpdf.layout.element.AreaBreak;\n",
      "import com.itextpdf.layout.element.IBlockElement;\n",
      "import com.itextpdf.layout.element.IElement;\n",
      "import com.itextpdf.layout.element.ILargeElement;\n",
      "import com.itextpdf.layout.exceptions.LayoutExceptionMessageConstant;\n",
      "import com.itextpdf.layout.properties.Property;\n",
      "import com.itextpdf.layout.renderer.DocumentRenderer;\n",
      "import com.itextpdf.layout.renderer.IRenderer;\n",
      "import com.itextpdf.layout.renderer.RootRenderer;\n",
      "\n",
      "/**\n",
      " * Document is the default root element when creating a self-sufficient PDF. It\n",
      " * mainly operates high-level operations e.g. setting page size and rotation,\n",
      " * adding elements, and writing text at specific coordinates. It has no\n",
      " * knowledge of the actual PDF concepts and syntax.\n",
      " * <p>\n",
      " * A {@link Document}'s rendering behavior can be modified by extending\n",
      " * {@link DocumentRenderer} and setting an instance of this newly created with\n",
      " * {@link #setRenderer(com.itextpdf.layout.renderer.DocumentRenderer) }.\n",
      " */\n",
      "public class Document extends RootElement<Document> {\n",
      "\n",
      "    /**\n",
      "     * Creates a document from a {@link PdfDocument}. Initializes the first page\n",
      "     * with the {@link PdfDocument}'s current default {@link PageSize}.\n",
      "     *\n",
      "     * @param pdfDoc the in-memory representation of the PDF document\n",
      "     */\n",
      "    public Document(PdfDocument pdfDoc) {\n",
      "        this(pdfDoc, pdfDoc.getDefaultPageSize());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Creates a document from a {@link PdfDocument} with a manually set {@link\n",
      "     * PageSize}.\n",
      "     *\n",
      "     * @param pdfDoc   the in-memory representation of the PDF document\n",
      "     * @param pageSize the page size\n",
      "     */\n",
      "    public Document(PdfDocument pdfDoc, PageSize pageSize) {\n",
      "        this(pdfDoc, pageSize, true);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Creates a document from a {@link PdfDocument} with a manually set {@link\n",
      "     * PageSize}.\n",
      "     *\n",
      "     * @param pdfDoc         the in-memory representation of the PDF document\n",
      "     * @param pageSize       the page size\n",
      "     * @param immediateFlush if true, write pages and page-related instructions\n",
      "     *                       to the {@link PdfDocument} as soon as possible.\n",
      "     */\n",
      "    public Document(PdfDocument pdfDoc, PageSize pageSize, boolean immediateFlush) {\n",
      "        super();\n",
      "        this.pdfDocument = pdfDoc;\n",
      "        this.pdfDocument.setDefaultPageSize(pageSize);\n",
      "        this.immediateFlush = immediateFlush;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Closes the document and associated PdfDocument.\n",
      "     */\n",
      "    @Override\n",
      "    public void close() {\n",
      "        if (rootRenderer != null) {\n",
      "            rootRenderer.close();\n",
      "        }\n",
      "        pdfDocument.close();\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Terminates the current element, usually a page. Sets the next element\n",
      "     * to be the size specified in the argument.\n",
      "     *\n",
      "     * @param areaBreak an {@link AreaBreak}, optionally with a specified size\n",
      "     * @return this element\n",
      "     */\n",
      "    public Document add(AreaBreak areaBreak) {\n",
      "        checkClosingStatus();\n",
      "        childElements.add(areaBreak);\n",
      "        ensureRootRendererNotNull().addChild(areaBreak.createRendererSubTree());\n",
      "        if (immediateFlush) {\n",
      "            childElements.remove(childElements.size() - 1);\n",
      "        }\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public Document add(IBlockElement element) {\n",
      "        checkClosingStatus();\n",
      "        super.add(element);\n",
      "        if (element instanceof ILargeElement) {\n",
      "            ((ILargeElement) element).setDocument(this);\n",
      "            ((ILargeElement) element).flushContent();\n",
      "        }\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Gets PDF document.\n",
      "     *\n",
      "     * @return the in-memory representation of the PDF document\n",
      "     */\n",
      "    public PdfDocument getPdfDocument() {\n",
      "        return pdfDocument;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Changes the {@link DocumentRenderer} at runtime. Use this to customize\n",
      "     * the Document's {@link IRenderer} behavior.\n",
      "     *\n",
      "     * @param documentRenderer the DocumentRenderer to set\n",
      "     */\n",
      "    public void setRenderer(DocumentRenderer documentRenderer) {\n",
      "        this.rootRenderer = documentRenderer;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Forces all registered renderers (including child element renderers) to\n",
      "     * flush their contents to the content stream.\n",
      "     */\n",
      "    public void flush() {\n",
      "        rootRenderer.flush();\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Performs an entire recalculation of the document flow, taking into\n",
      "     * account all its current child elements. May become very\n",
      "     * resource-intensive for large documents.\n",
      "     * <p>\n",
      "     * Do not use when you have set {@link #immediateFlush} to <code>true</code>.\n",
      "     */\n",
      "    public void relayout() {\n",
      "        if (immediateFlush) {\n",
      "            throw new IllegalStateException(\"Operation not supported with immediate flush\");\n",
      "        }\n",
      "\n",
      "        if (rootRenderer instanceof DocumentRenderer) {\n",
      "            ((DocumentRenderer) rootRenderer).getTargetCounterHandler().prepareHandlerToRelayout();\n",
      "        }\n",
      "\n",
      "        IRenderer nextRelayoutRenderer = rootRenderer != null ? rootRenderer.getNextRenderer() : null;\n",
      "        if (nextRelayoutRenderer == null || !(nextRelayoutRenderer instanceof RootRenderer)) {\n",
      "            nextRelayoutRenderer = new DocumentRenderer(this, immediateFlush);\n",
      "        }\n",
      "\n",
      "        // Even though #relayout() only makes sense when immediateFlush=false and therefore no elements\n",
      "        // should have been written to document, still empty pages are created during layout process\n",
      "        // because we need to know the effective page size which may differ from page to page.\n",
      "        // Therefore, we remove all the pages that might have been created before proceeding to relayout elements.\n",
      "        while (pdfDocument.getNumberOfPages() > 0) {\n",
      "            pdfDocument.removePage(pdfDocument.getNumberOfPages());\n",
      "        }\n",
      "\n",
      "        rootRenderer = (RootRenderer) nextRelayoutRenderer;\n",
      "        for (IElement element : childElements) {\n",
      "            createAndAddRendererSubTree(element);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Gets the left margin, measured in points\n",
      "     *\n",
      "     * @return a <code>float</code> containing the left margin value\n",
      "     */\n",
      "    public float getLeftMargin() {\n",
      "        Float property = this.<Float>getProperty(Property.MARGIN_LEFT);\n",
      "        return (float) (property != null ? property : this.<Float>getDefaultProperty(Property.MARGIN_LEFT));\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Sets the left margin, measured in points\n",
      "     *\n",
      "     * @param leftMargin a <code>float</code> containing the new left margin value\n",
      "     */\n",
      "    public void setLeftMargin(float leftMargin) {\n",
      "        setProperty(Property.MARGIN_LEFT, leftMargin);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Gets the right margin, measured in points\n",
      "     *\n",
      "     * @return a <code>float</code> containing the right margin value\n",
      "     */\n",
      "    public float getRightMargin() {\n",
      "        Float property = this.<Float>getProperty(Property.MARGIN_RIGHT);\n",
      "        return (float) (property != null ? property : this.<Float>getDefaultProperty(Property.MARGIN_RIGHT));\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Sets the right margin, measured in points\n",
      "     *\n",
      "     * @param rightMargin a <code>float</code> containing the new right margin value\n",
      "     */\n",
      "    public void setRightMargin(float rightMargin) {\n",
      "        setProperty(Property.MARGIN_RIGHT, rightMargin);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Gets the top margin, measured in points\n",
      "     *\n",
      "     * @return a <code>float</code> containing the top margin value\n",
      "     */\n",
      "    public float getTopMargin() {\n",
      "        Float property = this.<Float>getProperty(Property.MARGIN_TOP);\n",
      "        return (float) (property != null ? property : this.<Float>getDefaultProperty(Property.MARGIN_TOP));\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Sets the top margin, measured in points\n",
      "     *\n",
      "     * @param topMargin a <code>float</code> containing the new top margin value\n",
      "     */\n",
      "    public void setTopMargin(float topMargin) {\n",
      "        setProperty(Property.MARGIN_TOP, topMargin);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Gets the bottom margin, measured in points\n",
      "     *\n",
      "     * @return a <code>float</code> containing the bottom margin value\n",
      "     */\n",
      "    public float getBottomMargin() {\n",
      "        Float property = this.<Float>getProperty(Property.MARGIN_BOTTOM);\n",
      "        return (float) (property != null ? property : this.<Float>getDefaultProperty(Property.MARGIN_BOTTOM));\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Sets the bottom margin, measured in points\n",
      "     *\n",
      "     * @param bottomMargin a <code>float</code> containing the new bottom margin value\n",
      "     */\n",
      "    public void setBottomMargin(float bottomMargin) {\n",
      "        setProperty(Property.MARGIN_BOTTOM, bottomMargin);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Convenience method to set all margins with one method.\n",
      "     *\n",
      "     * @param topMargin    the upper margin\n",
      "     * @param rightMargin  the right margin\n",
      "     * @param leftMargin   the left margin\n",
      "     * @param bottomMargin the lower margin\n",
      "     */\n",
      "    public void setMargins(float topMargin, float rightMargin, float bottomMargin, float leftMargin) {\n",
      "        setTopMargin(topMargin);\n",
      "        setRightMargin(rightMargin);\n",
      "        setBottomMargin(bottomMargin);\n",
      "        setLeftMargin(leftMargin);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Returns the area that will actually be used to write on the page, given\n",
      "     * the current margins. Does not have any side effects on the document.\n",
      "     *\n",
      "     * @param pageSize the size of the page to\n",
      "     * @return a {@link Rectangle} with the required dimensions and origin point\n",
      "     */\n",
      "    public Rectangle getPageEffectiveArea(PageSize pageSize) {\n",
      "        float x = pageSize.getLeft() + getLeftMargin();\n",
      "        float y = pageSize.getBottom() + getBottomMargin();\n",
      "        float width = pageSize.getWidth() - getLeftMargin() - getRightMargin();\n",
      "        float height = pageSize.getHeight() - getBottomMargin() - getTopMargin();\n",
      "        return new Rectangle(x, y, width, height);\n",
      "    }\n",
      "\n",
      "\n",
      "    @Override\n",
      "    public <T1> T1 getDefaultProperty(int property) {\n",
      "        switch (property) {\n",
      "            case Property.FONT:\n",
      "                if (getPdfDocument().getConformanceLevel() != null) {\n",
      "                    return (T1) (Object) getPdfDocument().getDefaultFont();\n",
      "                }\n",
      "                return super.<T1>getDefaultProperty(property);\n",
      "            case Property.MARGIN_BOTTOM:\n",
      "            case Property.MARGIN_LEFT:\n",
      "            case Property.MARGIN_RIGHT:\n",
      "            case Property.MARGIN_TOP:\n",
      "                return (T1) (Object) 36f;\n",
      "            default:\n",
      "                return super.<T1>getDefaultProperty(property);\n",
      "        }\n",
      "    }\n",
      "\n",
      "\n",
      "    @Override\n",
      "    protected RootRenderer ensureRootRendererNotNull() {\n",
      "        if (rootRenderer == null)\n",
      "            rootRenderer = new DocumentRenderer(this, immediateFlush);\n",
      "        return rootRenderer;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Checks whether a method is invoked at the closed document\n",
      "     */\n",
      "    protected void checkClosingStatus() {\n",
      "        if (getPdfDocument().isClosed()) {\n",
      "            throw new PdfException(LayoutExceptionMessageConstant.DOCUMENT_CLOSED_IT_IS_IMPOSSIBLE_TO_EXECUTE_ACTION);\n",
      "        }\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.layout;\n",
      "\n",
      "import com.itextpdf.commons.actions.AbstractProductProcessITextEvent;\n",
      "import com.itextpdf.commons.actions.EventManager;\n",
      "import com.itextpdf.commons.actions.sequence.AbstractIdentifiableElement;\n",
      "import com.itextpdf.commons.actions.sequence.SequenceId;\n",
      "import com.itextpdf.commons.actions.sequence.SequenceIdManager;\n",
      "import com.itextpdf.io.source.ByteArrayOutputStream;\n",
      "import com.itextpdf.kernel.actions.events.ITextCoreProductEvent;\n",
      "import com.itextpdf.kernel.exceptions.PdfException;\n",
      "import com.itextpdf.kernel.geom.Rectangle;\n",
      "import com.itextpdf.kernel.pdf.PdfDocument;\n",
      "import com.itextpdf.kernel.pdf.PdfWriter;\n",
      "import com.itextpdf.kernel.pdf.xobject.PdfFormXObject;\n",
      "import com.itextpdf.layout.element.AreaBreak;\n",
      "import com.itextpdf.layout.element.IBlockElement;\n",
      "import com.itextpdf.layout.element.Image;\n",
      "import com.itextpdf.layout.element.Paragraph;\n",
      "import com.itextpdf.layout.exceptions.LayoutExceptionMessageConstant;\n",
      "import com.itextpdf.layout.testutil.TestConfigurationEvent;\n",
      "import com.itextpdf.layout.testutil.TestProductEvent;\n",
      "import com.itextpdf.test.ExtendedITextTest;\n",
      "import com.itextpdf.test.annotations.type.UnitTest;\n",
      "\n",
      "import java.util.List;\n",
      "import org.junit.Assert;\n",
      "import org.junit.Test;\n",
      "import org.junit.experimental.categories.Category;\n",
      "\n",
      "@Category(UnitTest.class)\n",
      "public class DocumentTest extends ExtendedITextTest {\n",
      "\n",
      "    private static final TestConfigurationEvent CONFIGURATION_ACCESS = new TestConfigurationEvent();\n",
      "\n",
      "    @Test\n",
      "    public void executeActionInClosedDocTest() {\n",
      "        PdfDocument pdfDoc = new PdfDocument(new PdfWriter(new ByteArrayOutputStream()));\n",
      "        Document document = new Document(pdfDoc);\n",
      "        Paragraph paragraph = new Paragraph(\"test\");\n",
      "        document.add(paragraph);\n",
      "        document.close();\n",
      "        Exception exception = Assert.assertThrows(PdfException.class,\n",
      "                () -> document.checkClosingStatus());\n",
      "        Assert.assertEquals(LayoutExceptionMessageConstant.DOCUMENT_CLOSED_IT_IS_IMPOSSIBLE_TO_EXECUTE_ACTION,\n",
      "                exception.getMessage());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void addBlockElemMethodLinkingTest() {\n",
      "        try (Document doc = new Document(new PdfDocument(new PdfWriter(new ByteArrayOutputStream())))) {\n",
      "            SequenceId sequenceId = new SequenceId();\n",
      "            EventManager.getInstance().onEvent(new TestProductEvent(sequenceId));\n",
      "\n",
      "            IBlockElement blockElement = new Paragraph(\"some text\");\n",
      "            SequenceIdManager.setSequenceId((AbstractIdentifiableElement) blockElement, sequenceId);\n",
      "            doc.add(blockElement);\n",
      "\n",
      "            List<AbstractProductProcessITextEvent> events = CONFIGURATION_ACCESS.getPublicEvents(\n",
      "                    doc.getPdfDocument().getDocumentIdWrapper());\n",
      "            // Second event was linked by adding block element method\n",
      "            Assert.assertEquals(2, events.size());\n",
      "\n",
      "            Assert.assertTrue(events.get(0) instanceof ITextCoreProductEvent);\n",
      "            Assert.assertTrue(events.get(1) instanceof TestProductEvent);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void addAreaBreakElemMethodLinkingTest() {\n",
      "        try (Document doc = new Document(new PdfDocument(new PdfWriter(new ByteArrayOutputStream())))) {\n",
      "            SequenceId sequenceId = new SequenceId();\n",
      "            EventManager.getInstance().onEvent(new TestProductEvent(sequenceId));\n",
      "\n",
      "            AreaBreak areaBreak = new AreaBreak();\n",
      "            SequenceIdManager.setSequenceId(areaBreak, sequenceId);\n",
      "            doc.add(areaBreak);\n",
      "\n",
      "            List<AbstractProductProcessITextEvent> events = CONFIGURATION_ACCESS.getPublicEvents(\n",
      "                    doc.getPdfDocument().getDocumentIdWrapper());\n",
      "            Assert.assertEquals(1, events.size());\n",
      "\n",
      "            Assert.assertTrue(events.get(0) instanceof ITextCoreProductEvent);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void addImageElemMethodLinkingTest() {\n",
      "        try (Document doc = new Document(new PdfDocument(new PdfWriter(new ByteArrayOutputStream())))) {\n",
      "            SequenceId sequenceId = new SequenceId();\n",
      "            EventManager.getInstance().onEvent(new TestProductEvent(sequenceId));\n",
      "\n",
      "            Image image = new Image(new PdfFormXObject(new Rectangle(10, 10)));\n",
      "            SequenceIdManager.setSequenceId(image, sequenceId);\n",
      "            doc.add(image);\n",
      "\n",
      "            List<AbstractProductProcessITextEvent> events = CONFIGURATION_ACCESS.getPublicEvents(\n",
      "                    doc.getPdfDocument().getDocumentIdWrapper());\n",
      "            // Second event was linked by adding block element\n",
      "            Assert.assertEquals(2, events.size());\n",
      "\n",
      "            Assert.assertTrue(events.get(0) instanceof ITextCoreProductEvent);\n",
      "            Assert.assertTrue(events.get(1) instanceof TestProductEvent);\n",
      "        }\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "Document::::close()": [
        91,
        97
      ],
      "Document::::add(com.itextpdf.layout.element.AreaBreak)": [
        106,
        114
      ],
      "Document::::add(com.itextpdf.layout.element.IBlockElement)": [
        116,
        125
      ],
      "Document::::getPdfDocument()": [
        132,
        134
      ],
      "Document::::setRenderer(com.itextpdf.layout.renderer.DocumentRenderer)": [
        142,
        144
      ],
      "Document::::flush()": [
        150,
        152
      ],
      "Document::::relayout()": [
        161,
        187
      ],
      "Document::::getLeftMargin()": [
        194,
        197
      ],
      "Document::::setLeftMargin(float)": [
        204,
        206
      ],
      "Document::::getRightMargin()": [
        213,
        216
      ],
      "Document::::setRightMargin(float)": [
        223,
        225
      ],
      "Document::::getTopMargin()": [
        232,
        235
      ],
      "Document::::setTopMargin(float)": [
        242,
        244
      ],
      "Document::::getBottomMargin()": [
        251,
        254
      ],
      "Document::::setBottomMargin(float)": [
        261,
        263
      ],
      "Document::::setMargins(float,float,float,float)": [
        273,
        278
      ],
      "Document::::getDefaultProperty(int)": [
        296,
        312
      ],
      "Document::::ensureRootRendererNotNull()": [
        315,
        320
      ],
      "Document::::checkClosingStatus()": [
        325,
        329
      ]
    },
    "test_method_lines_dic": {
      "DocumentTest::::executeActionInClosedDocTest()": [
        57,
        68
      ],
      "DocumentTest::::addBlockElemMethodLinkingTest()": [
        70,
        88
      ],
      "DocumentTest::::addAreaBreakElemMethodLinkingTest()": [
        90,
        106
      ],
      "DocumentTest::::addImageElemMethodLinkingTest()": [
        108,
        126
      ]
    },
    "reverse_method_lines_dic": {
      "91": "Document::::close()",
      "92": "Document::::close()",
      "93": "Document::::close()",
      "94": "Document::::close()",
      "95": "Document::::close()",
      "96": "Document::::close()",
      "97": "Document::::close()",
      "106": "Document::::add(com.itextpdf.layout.element.AreaBreak)",
      "107": "Document::::add(com.itextpdf.layout.element.AreaBreak)",
      "108": "Document::::add(com.itextpdf.layout.element.AreaBreak)",
      "109": "Document::::add(com.itextpdf.layout.element.AreaBreak)",
      "110": "Document::::add(com.itextpdf.layout.element.AreaBreak)",
      "111": "Document::::add(com.itextpdf.layout.element.AreaBreak)",
      "112": "Document::::add(com.itextpdf.layout.element.AreaBreak)",
      "113": "Document::::add(com.itextpdf.layout.element.AreaBreak)",
      "114": "Document::::add(com.itextpdf.layout.element.AreaBreak)",
      "116": "Document::::add(com.itextpdf.layout.element.IBlockElement)",
      "117": "Document::::add(com.itextpdf.layout.element.IBlockElement)",
      "118": "Document::::add(com.itextpdf.layout.element.IBlockElement)",
      "119": "Document::::add(com.itextpdf.layout.element.IBlockElement)",
      "120": "Document::::add(com.itextpdf.layout.element.IBlockElement)",
      "121": "Document::::add(com.itextpdf.layout.element.IBlockElement)",
      "122": "Document::::add(com.itextpdf.layout.element.IBlockElement)",
      "123": "Document::::add(com.itextpdf.layout.element.IBlockElement)",
      "124": "Document::::add(com.itextpdf.layout.element.IBlockElement)",
      "125": "Document::::add(com.itextpdf.layout.element.IBlockElement)",
      "132": "Document::::getPdfDocument()",
      "133": "Document::::getPdfDocument()",
      "134": "Document::::getPdfDocument()",
      "142": "Document::::setRenderer(com.itextpdf.layout.renderer.DocumentRenderer)",
      "143": "Document::::setRenderer(com.itextpdf.layout.renderer.DocumentRenderer)",
      "144": "Document::::setRenderer(com.itextpdf.layout.renderer.DocumentRenderer)",
      "150": "Document::::flush()",
      "151": "Document::::flush()",
      "152": "Document::::flush()",
      "161": "Document::::relayout()",
      "162": "Document::::relayout()",
      "163": "Document::::relayout()",
      "164": "Document::::relayout()",
      "165": "Document::::relayout()",
      "166": "Document::::relayout()",
      "167": "Document::::relayout()",
      "168": "Document::::relayout()",
      "169": "Document::::relayout()",
      "170": "Document::::relayout()",
      "171": "Document::::relayout()",
      "172": "Document::::relayout()",
      "173": "Document::::relayout()",
      "174": "Document::::relayout()",
      "175": "Document::::relayout()",
      "176": "Document::::relayout()",
      "177": "Document::::relayout()",
      "178": "Document::::relayout()",
      "179": "Document::::relayout()",
      "180": "Document::::relayout()",
      "181": "Document::::relayout()",
      "182": "Document::::relayout()",
      "183": "Document::::relayout()",
      "184": "Document::::relayout()",
      "185": "Document::::relayout()",
      "186": "Document::::relayout()",
      "187": "Document::::relayout()",
      "194": "Document::::getLeftMargin()",
      "195": "Document::::getLeftMargin()",
      "196": "Document::::getLeftMargin()",
      "197": "Document::::getLeftMargin()",
      "204": "Document::::setLeftMargin(float)",
      "205": "Document::::setLeftMargin(float)",
      "206": "Document::::setLeftMargin(float)",
      "213": "Document::::getRightMargin()",
      "214": "Document::::getRightMargin()",
      "215": "Document::::getRightMargin()",
      "216": "Document::::getRightMargin()",
      "223": "Document::::setRightMargin(float)",
      "224": "Document::::setRightMargin(float)",
      "225": "Document::::setRightMargin(float)",
      "232": "Document::::getTopMargin()",
      "233": "Document::::getTopMargin()",
      "234": "Document::::getTopMargin()",
      "235": "Document::::getTopMargin()",
      "242": "Document::::setTopMargin(float)",
      "243": "Document::::setTopMargin(float)",
      "244": "Document::::setTopMargin(float)",
      "251": "Document::::getBottomMargin()",
      "252": "Document::::getBottomMargin()",
      "253": "Document::::getBottomMargin()",
      "254": "Document::::getBottomMargin()",
      "261": "Document::::setBottomMargin(float)",
      "262": "Document::::setBottomMargin(float)",
      "263": "Document::::setBottomMargin(float)",
      "273": "Document::::setMargins(float,float,float,float)",
      "274": "Document::::setMargins(float,float,float,float)",
      "275": "Document::::setMargins(float,float,float,float)",
      "276": "Document::::setMargins(float,float,float,float)",
      "277": "Document::::setMargins(float,float,float,float)",
      "278": "Document::::setMargins(float,float,float,float)",
      "296": "Document::::getDefaultProperty(int)",
      "297": "Document::::getDefaultProperty(int)",
      "298": "Document::::getDefaultProperty(int)",
      "299": "Document::::getDefaultProperty(int)",
      "300": "Document::::getDefaultProperty(int)",
      "301": "Document::::getDefaultProperty(int)",
      "302": "Document::::getDefaultProperty(int)",
      "303": "Document::::getDefaultProperty(int)",
      "304": "Document::::getDefaultProperty(int)",
      "305": "Document::::getDefaultProperty(int)",
      "306": "Document::::getDefaultProperty(int)",
      "307": "Document::::getDefaultProperty(int)",
      "308": "Document::::getDefaultProperty(int)",
      "309": "Document::::getDefaultProperty(int)",
      "310": "Document::::getDefaultProperty(int)",
      "311": "Document::::getDefaultProperty(int)",
      "312": "Document::::getDefaultProperty(int)",
      "315": "Document::::ensureRootRendererNotNull()",
      "316": "Document::::ensureRootRendererNotNull()",
      "317": "Document::::ensureRootRendererNotNull()",
      "318": "Document::::ensureRootRendererNotNull()",
      "319": "Document::::ensureRootRendererNotNull()",
      "320": "Document::::ensureRootRendererNotNull()",
      "325": "Document::::checkClosingStatus()",
      "326": "Document::::checkClosingStatus()",
      "327": "Document::::checkClosingStatus()",
      "328": "Document::::checkClosingStatus()",
      "329": "Document::::checkClosingStatus()"
    },
    "test_reverse_method_lines_dic": {
      "57": "DocumentTest::::executeActionInClosedDocTest()",
      "58": "DocumentTest::::executeActionInClosedDocTest()",
      "59": "DocumentTest::::executeActionInClosedDocTest()",
      "60": "DocumentTest::::executeActionInClosedDocTest()",
      "61": "DocumentTest::::executeActionInClosedDocTest()",
      "62": "DocumentTest::::executeActionInClosedDocTest()",
      "63": "DocumentTest::::executeActionInClosedDocTest()",
      "64": "DocumentTest::::executeActionInClosedDocTest()",
      "65": "DocumentTest::::executeActionInClosedDocTest()",
      "66": "DocumentTest::::executeActionInClosedDocTest()",
      "67": "DocumentTest::::executeActionInClosedDocTest()",
      "68": "DocumentTest::::executeActionInClosedDocTest()",
      "70": "DocumentTest::::addBlockElemMethodLinkingTest()",
      "71": "DocumentTest::::addBlockElemMethodLinkingTest()",
      "72": "DocumentTest::::addBlockElemMethodLinkingTest()",
      "73": "DocumentTest::::addBlockElemMethodLinkingTest()",
      "74": "DocumentTest::::addBlockElemMethodLinkingTest()",
      "75": "DocumentTest::::addBlockElemMethodLinkingTest()",
      "76": "DocumentTest::::addBlockElemMethodLinkingTest()",
      "77": "DocumentTest::::addBlockElemMethodLinkingTest()",
      "78": "DocumentTest::::addBlockElemMethodLinkingTest()",
      "79": "DocumentTest::::addBlockElemMethodLinkingTest()",
      "80": "DocumentTest::::addBlockElemMethodLinkingTest()",
      "81": "DocumentTest::::addBlockElemMethodLinkingTest()",
      "82": "DocumentTest::::addBlockElemMethodLinkingTest()",
      "83": "DocumentTest::::addBlockElemMethodLinkingTest()",
      "84": "DocumentTest::::addBlockElemMethodLinkingTest()",
      "85": "DocumentTest::::addBlockElemMethodLinkingTest()",
      "86": "DocumentTest::::addBlockElemMethodLinkingTest()",
      "87": "DocumentTest::::addBlockElemMethodLinkingTest()",
      "88": "DocumentTest::::addBlockElemMethodLinkingTest()",
      "90": "DocumentTest::::addAreaBreakElemMethodLinkingTest()",
      "91": "DocumentTest::::addAreaBreakElemMethodLinkingTest()",
      "92": "DocumentTest::::addAreaBreakElemMethodLinkingTest()",
      "93": "DocumentTest::::addAreaBreakElemMethodLinkingTest()",
      "94": "DocumentTest::::addAreaBreakElemMethodLinkingTest()",
      "95": "DocumentTest::::addAreaBreakElemMethodLinkingTest()",
      "96": "DocumentTest::::addAreaBreakElemMethodLinkingTest()",
      "97": "DocumentTest::::addAreaBreakElemMethodLinkingTest()",
      "98": "DocumentTest::::addAreaBreakElemMethodLinkingTest()",
      "99": "DocumentTest::::addAreaBreakElemMethodLinkingTest()",
      "100": "DocumentTest::::addAreaBreakElemMethodLinkingTest()",
      "101": "DocumentTest::::addAreaBreakElemMethodLinkingTest()",
      "102": "DocumentTest::::addAreaBreakElemMethodLinkingTest()",
      "103": "DocumentTest::::addAreaBreakElemMethodLinkingTest()",
      "104": "DocumentTest::::addAreaBreakElemMethodLinkingTest()",
      "105": "DocumentTest::::addAreaBreakElemMethodLinkingTest()",
      "106": "DocumentTest::::addAreaBreakElemMethodLinkingTest()",
      "108": "DocumentTest::::addImageElemMethodLinkingTest()",
      "109": "DocumentTest::::addImageElemMethodLinkingTest()",
      "110": "DocumentTest::::addImageElemMethodLinkingTest()",
      "111": "DocumentTest::::addImageElemMethodLinkingTest()",
      "112": "DocumentTest::::addImageElemMethodLinkingTest()",
      "113": "DocumentTest::::addImageElemMethodLinkingTest()",
      "114": "DocumentTest::::addImageElemMethodLinkingTest()",
      "115": "DocumentTest::::addImageElemMethodLinkingTest()",
      "116": "DocumentTest::::addImageElemMethodLinkingTest()",
      "117": "DocumentTest::::addImageElemMethodLinkingTest()",
      "118": "DocumentTest::::addImageElemMethodLinkingTest()",
      "119": "DocumentTest::::addImageElemMethodLinkingTest()",
      "120": "DocumentTest::::addImageElemMethodLinkingTest()",
      "121": "DocumentTest::::addImageElemMethodLinkingTest()",
      "122": "DocumentTest::::addImageElemMethodLinkingTest()",
      "123": "DocumentTest::::addImageElemMethodLinkingTest()",
      "124": "DocumentTest::::addImageElemMethodLinkingTest()",
      "125": "DocumentTest::::addImageElemMethodLinkingTest()",
      "126": "DocumentTest::::addImageElemMethodLinkingTest()"
    },
    "tests": [
      {
        "test_lines": [
          57,
          68
        ],
        "covered_lines": [
          58,
          59,
          69,
          70,
          82,
          83,
          84,
          85,
          86,
          93,
          94,
          96,
          97,
          118,
          119,
          120,
          124,
          133,
          298,
          300,
          303,
          308,
          310,
          317,
          318,
          319,
          326,
          327,
          329
        ]
      },
      {
        "test_lines": [
          70,
          88
        ],
        "covered_lines": [
          58,
          59,
          69,
          70,
          82,
          83,
          84,
          85,
          86,
          93,
          94,
          96,
          97,
          118,
          119,
          120,
          124,
          133,
          298,
          300,
          303,
          308,
          310,
          317,
          318,
          319,
          326,
          329
        ]
      },
      {
        "test_lines": [
          90,
          106
        ],
        "covered_lines": [
          58,
          59,
          69,
          70,
          82,
          83,
          84,
          85,
          86,
          93,
          94,
          96,
          97,
          107,
          108,
          109,
          110,
          111,
          113,
          133,
          298,
          308,
          310,
          317,
          318,
          319,
          326,
          329
        ]
      },
      {
        "test_lines": [
          108,
          126
        ],
        "covered_lines": [
          58,
          59,
          69,
          70,
          82,
          83,
          84,
          85,
          86,
          93,
          94,
          96,
          97,
          133,
          298,
          308,
          310,
          317,
          318,
          319
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/itext-java/layout/src/main/java/com/itextpdf/layout/Canvas.java": {
    "class_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.layout;\n",
      "\n",
      "import com.itextpdf.io.logs.IoLogMessageConstant;\n",
      "import com.itextpdf.kernel.exceptions.PdfException;\n",
      "import com.itextpdf.kernel.geom.Rectangle;\n",
      "import com.itextpdf.kernel.pdf.PdfDocument;\n",
      "import com.itextpdf.kernel.pdf.PdfPage;\n",
      "import com.itextpdf.kernel.pdf.canvas.PdfCanvas;\n",
      "import com.itextpdf.kernel.pdf.xobject.PdfFormXObject;\n",
      "import com.itextpdf.layout.element.IElement;\n",
      "import com.itextpdf.layout.exceptions.LayoutExceptionMessageConstant;\n",
      "import com.itextpdf.layout.renderer.CanvasRenderer;\n",
      "import com.itextpdf.layout.renderer.IRenderer;\n",
      "import com.itextpdf.layout.renderer.RootRenderer;\n",
      "import org.slf4j.Logger;\n",
      "import org.slf4j.LoggerFactory;\n",
      "\n",
      "/**\n",
      " * This class is used for adding content directly onto a specified {@link PdfCanvas}.\n",
      " * {@link Canvas} does not know the concept of a page, so it can't reflow to a 'next' {@link Canvas}.\n",
      " *\n",
      " * This class effectively acts as a bridge between the high-level <em>layout</em>\n",
      " * API and the low-level <em>kernel</em> API.\n",
      " */\n",
      "public class Canvas extends RootElement<Canvas> {\n",
      "\n",
      "    protected PdfCanvas pdfCanvas;\n",
      "    protected Rectangle rootArea;\n",
      "\n",
      "    /**\n",
      "     * Is initialized and used only when Canvas element autotagging is enabled, see {@link #enableAutoTagging(PdfPage)}.\n",
      "     * It is also used to determine if autotagging is enabled.\n",
      "     */\n",
      "    protected PdfPage page;\n",
      "\n",
      "    private boolean isCanvasOfPage;\n",
      "\n",
      "    /**\n",
      "     * Creates a new Canvas to manipulate a specific page content stream. The given page shall not be flushed:\n",
      "     * drawing on flushed pages is impossible because their content is already written to the output stream.\n",
      "     * Use this constructor to be able to add {@link com.itextpdf.layout.element.Link} elements on it\n",
      "     * (using any other constructor would result in inability to add PDF annotations, based on which, for example, links work).\n",
      "     * <p>\n",
      "     * If the {@link PdfDocument#isTagged()} is true, using this constructor would automatically enable\n",
      "     * the tagging for the content. Regarding tagging the effect is the same as using {@link #enableAutoTagging(PdfPage)}.\n",
      "     *\n",
      "     * @param page the page on which this canvas will be rendered, shall not be flushed (see {@link PdfPage#isFlushed()}).\n",
      "     * @param rootArea the maximum area that the Canvas may write upon\n",
      "     */\n",
      "    public Canvas(PdfPage page, Rectangle rootArea) {\n",
      "        this(initPdfCanvasOrThrowIfPageIsFlushed(page), rootArea);\n",
      "        this.enableAutoTagging(page);\n",
      "        this.isCanvasOfPage = true;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Creates a new Canvas to manipulate a specific content stream, which might be for example a page\n",
      "     * or {@link PdfFormXObject} stream.\n",
      "     *\n",
      "     * @param pdfCanvas the low-level content stream writer\n",
      "     * @param rootArea the maximum area that the Canvas may write upon\n",
      "     */\n",
      "    public Canvas(PdfCanvas pdfCanvas, Rectangle rootArea) {\n",
      "        super();\n",
      "        this.pdfDocument = pdfCanvas.getDocument();\n",
      "        this.pdfCanvas = pdfCanvas;\n",
      "        this.rootArea = rootArea;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Creates a new Canvas to manipulate a specific document and page.\n",
      "     *\n",
      "     * @param pdfCanvas         The low-level content stream writer\n",
      "     * @param rootArea          The maximum area that the Canvas may write upon\n",
      "     * @param immediateFlush    Whether to flush the canvas immediately after operations, false otherwise\n",
      "     */\n",
      "    public Canvas(PdfCanvas pdfCanvas, Rectangle rootArea, boolean immediateFlush) {\n",
      "        this(pdfCanvas, rootArea);\n",
      "        this.immediateFlush = immediateFlush;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Creates a new Canvas to manipulate a specific {@link PdfFormXObject}.\n",
      "     *\n",
      "     * @param formXObject the form\n",
      "     * @param pdfDocument the document that the resulting content stream will be written to\n",
      "     */\n",
      "    public Canvas(PdfFormXObject formXObject, PdfDocument pdfDocument) {\n",
      "        this(new PdfCanvas(formXObject, pdfDocument), formXObject.getBBox().toRectangle());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Gets the {@link PdfDocument} for this canvas.\n",
      "     * @return the document that the resulting content stream will be written to\n",
      "     */\n",
      "    public PdfDocument getPdfDocument() {\n",
      "        return pdfDocument;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Gets the root area rectangle.\n",
      "     * @return the maximum area that the Canvas may write upon\n",
      "     */\n",
      "    public Rectangle getRootArea() {\n",
      "        return rootArea;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Gets the {@link PdfCanvas}.\n",
      "     * @return the low-level content stream writer\n",
      "     */\n",
      "    public PdfCanvas getPdfCanvas() {\n",
      "        return pdfCanvas;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Sets the {@link IRenderer} for this Canvas.\n",
      "     *\n",
      "     * @param canvasRenderer a renderer specific for canvas operations\n",
      "     */\n",
      "    public void setRenderer(CanvasRenderer canvasRenderer) {\n",
      "        this.rootRenderer = canvasRenderer;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * The page on which this canvas will be rendered.\n",
      "     * @return the specified {@link PdfPage} instance, might be null if this the page was not set.\n",
      "     */\n",
      "    public PdfPage getPage() {\n",
      "        return page;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Enables canvas content autotagging. By default it is disabled.\n",
      "     * @param page the page, on which this canvas will be rendered.\n",
      "     */\n",
      "    public void enableAutoTagging(PdfPage page) {\n",
      "        if (isCanvasOfPage() && this.page != page) {\n",
      "            Logger logger = LoggerFactory.getLogger(Canvas.class);\n",
      "            logger.error(IoLogMessageConstant.PASSED_PAGE_SHALL_BE_ON_WHICH_CANVAS_WILL_BE_RENDERED);\n",
      "        }\n",
      "        this.page = page;\n",
      "        this.pdfCanvas.setDrawingOnPage(this.isAutoTaggingEnabled());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * @return true if autotagging of canvas content is enabled. Default value - false.\n",
      "     */\n",
      "    public boolean isAutoTaggingEnabled() {\n",
      "        return page != null;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Defines if the canvas is exactly the direct content of the page. This is known definitely only if\n",
      "     * this instance was created by {@link Canvas#Canvas(PdfPage, Rectangle)} constructor overload,\n",
      "     * otherwise this method returns false.\n",
      "     * @return true if the canvas on which this instance performs drawing is directly the canvas of the page;\n",
      "     * false if the instance of this class was created not with {@link Canvas#Canvas(PdfPage, Rectangle)} constructor overload.\n",
      "     */\n",
      "    public boolean isCanvasOfPage() {\n",
      "        return isCanvasOfPage;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Performs an entire recalculation of the element flow on the canvas,\n",
      "     * taking into account all its current child elements. May become very\n",
      "     * resource-intensive for large documents.\n",
      "     *\n",
      "     * Do not use when you have set {@link #immediateFlush} to <code>true</code>.\n",
      "     */\n",
      "    public void relayout() {\n",
      "        if (immediateFlush) {\n",
      "            throw new IllegalStateException(\"Operation not supported with immediate flush\");\n",
      "        }\n",
      "\n",
      "        IRenderer nextRelayoutRenderer = rootRenderer != null ? rootRenderer.getNextRenderer() : null;\n",
      "        if (nextRelayoutRenderer == null || !(nextRelayoutRenderer instanceof RootRenderer)) {\n",
      "            nextRelayoutRenderer = new CanvasRenderer(this, immediateFlush);\n",
      "        }\n",
      "        rootRenderer = (RootRenderer) nextRelayoutRenderer;\n",
      "        for (IElement element : childElements) {\n",
      "            createAndAddRendererSubTree(element);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Forces all registered renderers (including child element renderers) to\n",
      "     * flush their contents to the content stream.\n",
      "     */\n",
      "    public void flush() {\n",
      "        rootRenderer.flush();\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Closes the {@link Canvas}. Although not completely necessary in all cases, it is still recommended to call this\n",
      "     * method when you are done working with {@link Canvas} object, as due to some properties set there might be some\n",
      "     * 'hanging' elements, which are waiting other elements to be added and processed. {@link #close()} tells the\n",
      "     * {@link Canvas} that no more elements will be added and it is time to finish processing all the elements.\n",
      "     */\n",
      "    @Override\n",
      "    public void close() {\n",
      "        if (rootRenderer != null) {\n",
      "            rootRenderer.close();\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    protected RootRenderer ensureRootRendererNotNull() {\n",
      "        if (rootRenderer == null)\n",
      "            rootRenderer = new CanvasRenderer(this, immediateFlush);\n",
      "        return rootRenderer;\n",
      "    }\n",
      "\n",
      "    private static PdfCanvas initPdfCanvasOrThrowIfPageIsFlushed(PdfPage page) {\n",
      "        if (page.isFlushed()) {\n",
      "            throw new PdfException(LayoutExceptionMessageConstant.CANNOT_DRAW_ELEMENTS_ON_ALREADY_FLUSHED_PAGES);\n",
      "        }\n",
      "        return new PdfCanvas(page);\n",
      "    }\n",
      "\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.layout;\n",
      "\n",
      "import com.itextpdf.io.logs.IoLogMessageConstant;\n",
      "import com.itextpdf.commons.actions.EventManager;\n",
      "import com.itextpdf.commons.actions.AbstractProductProcessITextEvent;\n",
      "import com.itextpdf.commons.actions.sequence.AbstractIdentifiableElement;\n",
      "import com.itextpdf.commons.actions.sequence.SequenceId;\n",
      "import com.itextpdf.commons.actions.sequence.SequenceIdManager;\n",
      "import com.itextpdf.kernel.colors.ColorConstants;\n",
      "import com.itextpdf.kernel.actions.events.ITextCoreProductEvent;\n",
      "import com.itextpdf.kernel.geom.Rectangle;\n",
      "import com.itextpdf.kernel.pdf.PdfDocument;\n",
      "import com.itextpdf.kernel.pdf.PdfPage;\n",
      "import com.itextpdf.kernel.pdf.PdfResources;\n",
      "import com.itextpdf.kernel.pdf.PdfStream;\n",
      "import com.itextpdf.kernel.pdf.PdfWriter;\n",
      "import com.itextpdf.kernel.pdf.action.PdfAction;\n",
      "import com.itextpdf.kernel.pdf.canvas.PdfCanvas;\n",
      "import com.itextpdf.kernel.pdf.xobject.PdfFormXObject;\n",
      "import com.itextpdf.kernel.utils.CompareTool;\n",
      "import com.itextpdf.layout.element.Div;\n",
      "import com.itextpdf.layout.element.IBlockElement;\n",
      "import com.itextpdf.layout.element.Image;\n",
      "import com.itextpdf.layout.element.Link;\n",
      "import com.itextpdf.layout.element.ListItem;\n",
      "import com.itextpdf.layout.element.Paragraph;\n",
      "import com.itextpdf.layout.properties.ListNumberingType;\n",
      "import com.itextpdf.layout.properties.Property;\n",
      "import com.itextpdf.layout.testutil.TestConfigurationEvent;\n",
      "import com.itextpdf.layout.testutil.TestProductEvent;\n",
      "import com.itextpdf.test.ExtendedITextTest;\n",
      "import com.itextpdf.test.annotations.LogMessage;\n",
      "import com.itextpdf.test.annotations.LogMessages;\n",
      "import com.itextpdf.test.annotations.type.IntegrationTest;\n",
      "\n",
      "import java.io.ByteArrayOutputStream;\n",
      "import java.io.IOException;\n",
      "import java.util.List;\n",
      "import org.junit.Assert;\n",
      "import org.junit.BeforeClass;\n",
      "import org.junit.Test;\n",
      "import org.junit.experimental.categories.Category;\n",
      "\n",
      "@Category(IntegrationTest.class)\n",
      "public class CanvasTest extends ExtendedITextTest {\n",
      "    private static final TestConfigurationEvent CONFIGURATION_ACCESS = new TestConfigurationEvent();\n",
      "\n",
      "    private static final String SOURCE_FOLDER = \"./src/test/resources/com/itextpdf/layout/CanvasTest/\";\n",
      "    private static final String DESTINATION_FOLDER = \"./target/test/com/itextpdf/layout/CanvasTest/\";\n",
      "\n",
      "    @BeforeClass\n",
      "    public static void beforeClass() {\n",
      "        createOrClearDestinationFolder(DESTINATION_FOLDER);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    @LogMessages(messages = @LogMessage(messageTemplate = IoLogMessageConstant.UNABLE_TO_APPLY_PAGE_DEPENDENT_PROP_UNKNOWN_PAGE_ON_WHICH_ELEMENT_IS_DRAWN))\n",
      "    public void canvasNoPageLinkTest() throws IOException, InterruptedException {\n",
      "        String testName = \"canvasNoPageLinkTest\";\n",
      "        String out = DESTINATION_FOLDER + testName + \".pdf\";\n",
      "        String cmp = SOURCE_FOLDER + \"cmp_\" + testName + \".pdf\";\n",
      "        PdfDocument pdf = new PdfDocument(new PdfWriter(out));\n",
      "        PdfPage page = pdf.addNewPage();\n",
      "        Rectangle pageSize = page.getPageSize();\n",
      "        PdfCanvas pdfCanvas = new PdfCanvas(page.getLastContentStream(), page.getResources(), pdf);\n",
      "        Rectangle rectangle = new Rectangle(\n",
      "                pageSize.getX() + 36,\n",
      "                pageSize.getTop() - 80,\n",
      "                pageSize.getWidth() - 72,\n",
      "                50);\n",
      "\n",
      "        Canvas canvas = new Canvas(pdfCanvas, rectangle);\n",
      "        canvas.add(\n",
      "                new Paragraph(\n",
      "                        new Link(\"Google link!\", PdfAction.createURI(\"https://www.google.com\"))\n",
      "                                .setUnderline()\n",
      "                                .setFontColor(ColorConstants.BLUE)));\n",
      "        canvas.close();\n",
      "        pdf.close();\n",
      "\n",
      "        Assert.assertNull(new CompareTool().compareByContent(out, cmp, DESTINATION_FOLDER));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void canvasWithPageLinkTest() throws IOException, InterruptedException {\n",
      "        String testName = \"canvasWithPageLinkTest\";\n",
      "        String out = DESTINATION_FOLDER + testName + \".pdf\";\n",
      "        String cmp = SOURCE_FOLDER + \"cmp_\" + testName + \".pdf\";\n",
      "        PdfDocument pdf = new PdfDocument(new PdfWriter(out));\n",
      "        PdfPage page = pdf.addNewPage();\n",
      "        Rectangle pageSize = page.getPageSize();\n",
      "        Rectangle rectangle = new Rectangle(\n",
      "                pageSize.getX() + 36,\n",
      "                pageSize.getTop() - 80,\n",
      "                pageSize.getWidth() - 72,\n",
      "                50);\n",
      "\n",
      "        Canvas canvas = new Canvas(page, rectangle);\n",
      "        canvas.add(\n",
      "                new Paragraph(\n",
      "                        new Link(\"Google link!\", PdfAction.createURI(\"https://www.google.com\"))\n",
      "                                .setUnderline()\n",
      "                                .setFontColor(ColorConstants.BLUE)));\n",
      "        canvas.close();\n",
      "        pdf.close();\n",
      "\n",
      "        Assert.assertNull(new CompareTool().compareByContent(out, cmp, DESTINATION_FOLDER));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void listItemWithoutMarginsInCanvasTest() throws IOException, InterruptedException {\n",
      "        String testName = \"listItemWithoutMarginsInCanvasTest\";\n",
      "        String out = DESTINATION_FOLDER + testName + \".pdf\";\n",
      "        String cmp = SOURCE_FOLDER + \"cmp_\" + testName + \".pdf\";\n",
      "        PdfDocument pdf = new PdfDocument(new PdfWriter(out));\n",
      "        PdfPage page = pdf.addNewPage();\n",
      "        Rectangle pageSize = page.getPageSize();\n",
      "\n",
      "        Canvas canvas = new Canvas(page, pageSize);\n",
      "        com.itextpdf.layout.element.List list = new com.itextpdf.layout.element.List();\n",
      "        list.setListSymbol(ListNumberingType.DECIMAL);\n",
      "        list.add(new ListItem(\"list item 1\"));\n",
      "        list.add(new ListItem(\"list item 2\"));\n",
      "        canvas.add(list);\n",
      "        canvas.close();\n",
      "        pdf.close();\n",
      "\n",
      "        Assert.assertNull(new CompareTool().compareByContent(out, cmp, DESTINATION_FOLDER));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void notApplyingMarginsInCanvasTest() throws IOException, InterruptedException {\n",
      "        String testName = \"notApplyingMarginsInCanvasTest\";\n",
      "        String out = DESTINATION_FOLDER + testName + \".pdf\";\n",
      "        String cmp = SOURCE_FOLDER + \"cmp_\" + testName + \".pdf\";\n",
      "        PdfDocument pdf = new PdfDocument(new PdfWriter(out));\n",
      "        PdfPage page = pdf.addNewPage();\n",
      "        Rectangle pageSize = page.getPageSize();\n",
      "\n",
      "        Canvas canvas = new Canvas(page, pageSize);\n",
      "        canvas.setProperty(Property.MARGIN_LEFT, 36);\n",
      "        canvas.add(new Paragraph(\"Hello\"));\n",
      "        canvas.close();\n",
      "        pdf.close();\n",
      "\n",
      "        Assert.assertNull(new CompareTool().compareByContent(out, cmp, DESTINATION_FOLDER));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void nullableMarginsInCanvasRendererTest() throws IOException, InterruptedException {\n",
      "        String testName = \"nullableMarginsInCanvasRenderer\";\n",
      "        String out = DESTINATION_FOLDER + testName + \".pdf\";\n",
      "        String cmp = SOURCE_FOLDER + \"cmp_\" + testName + \".pdf\";\n",
      "        PdfDocument pdf = new PdfDocument(new PdfWriter(out));\n",
      "        PdfPage page = pdf.addNewPage();\n",
      "        Rectangle pageSize = page.getPageSize();\n",
      "\n",
      "        Canvas canvas = new Canvas(page, pageSize);\n",
      "        canvas.setProperty(Property.MARGIN_LEFT, null);\n",
      "        canvas.add(new Paragraph(\"Hello\"));\n",
      "        canvas.close();\n",
      "        pdf.close();\n",
      "\n",
      "        Assert.assertNull(new CompareTool().compareByContent(out, cmp, DESTINATION_FOLDER));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void canvasWithPageEnableTaggingTest01() throws IOException, InterruptedException {\n",
      "        String testName = \"canvasWithPageEnableTaggingTest01\";\n",
      "        String out = DESTINATION_FOLDER + testName + \".pdf\";\n",
      "        String cmp = SOURCE_FOLDER + \"cmp_\" + testName + \".pdf\";\n",
      "        PdfDocument pdf = new PdfDocument(new PdfWriter(out));\n",
      "\n",
      "        pdf.setTagged();\n",
      "\n",
      "        PdfPage page = pdf.addNewPage();\n",
      "        Rectangle pageSize = page.getPageSize();\n",
      "        Rectangle rectangle = new Rectangle(\n",
      "                pageSize.getX() + 36,\n",
      "                pageSize.getTop() - 80,\n",
      "                pageSize.getWidth() - 72,\n",
      "                50);\n",
      "\n",
      "        Canvas canvas = new Canvas(page, rectangle);\n",
      "        canvas.add(\n",
      "                new Paragraph(\n",
      "                        new Link(\"Google link!\", PdfAction.createURI(\"https://www.google.com\"))\n",
      "                                .setUnderline()\n",
      "                                .setFontColor(ColorConstants.BLUE)));\n",
      "        canvas.close();\n",
      "        pdf.close();\n",
      "\n",
      "        Assert.assertNull(new CompareTool().compareByContent(out, cmp, DESTINATION_FOLDER));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    @LogMessages(messages = {@LogMessage(messageTemplate = IoLogMessageConstant.UNABLE_TO_APPLY_PAGE_DEPENDENT_PROP_UNKNOWN_PAGE_ON_WHICH_ELEMENT_IS_DRAWN),\n",
      "            @LogMessage(messageTemplate = IoLogMessageConstant.PASSED_PAGE_SHALL_BE_ON_WHICH_CANVAS_WILL_BE_RENDERED)})\n",
      "    public void canvasWithPageEnableTaggingTest02() throws IOException, InterruptedException {\n",
      "        String testName = \"canvasWithPageEnableTaggingTest02\";\n",
      "        String out = DESTINATION_FOLDER + testName + \".pdf\";\n",
      "        String cmp = SOURCE_FOLDER + \"cmp_\" + testName + \".pdf\";\n",
      "        PdfDocument pdf = new PdfDocument(new PdfWriter(out));\n",
      "\n",
      "        pdf.setTagged();\n",
      "\n",
      "        PdfPage page = pdf.addNewPage();\n",
      "        Rectangle pageSize = page.getPageSize();\n",
      "        Rectangle rectangle = new Rectangle(\n",
      "                pageSize.getX() + 36,\n",
      "                pageSize.getTop() - 80,\n",
      "                pageSize.getWidth() - 72,\n",
      "                50);\n",
      "\n",
      "        Canvas canvas = new Canvas(page, rectangle);\n",
      "\n",
      "        // This will disable tagging and also prevent annotations addition. Created tagged document is invalid. Expected log message.\n",
      "        canvas.enableAutoTagging(null);\n",
      "\n",
      "        canvas.add(\n",
      "                new Paragraph(\n",
      "                        new Link(\"Google link!\", PdfAction.createURI(\"https://www.google.com\"))\n",
      "                                .setUnderline()\n",
      "                                .setFontColor(ColorConstants.BLUE)));\n",
      "        canvas.close();\n",
      "        pdf.close();\n",
      "\n",
      "        Assert.assertNull(new CompareTool().compareByContent(out, cmp, DESTINATION_FOLDER));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void elementWithAbsolutePositioningInCanvasTest() throws IOException, InterruptedException {\n",
      "        String testName = \"elementWithAbsolutePositioningInCanvas\";\n",
      "        String out = DESTINATION_FOLDER + testName + \".pdf\";\n",
      "        String cmp = SOURCE_FOLDER + \"cmp_\" + testName + \".pdf\";\n",
      "\n",
      "        try (PdfDocument pdf = new PdfDocument(new PdfWriter(out))) {\n",
      "            pdf.addNewPage();\n",
      "            Canvas canvas = new Canvas(new PdfCanvas(pdf.getFirstPage()),\n",
      "                    new Rectangle(120, 650, 60, 80));\n",
      "\n",
      "            Div notFittingDiv = new Div().setWidth(100)\n",
      "                    .add(new Paragraph(\"Paragraph in Div with Not set position\"));\n",
      "            canvas.add(notFittingDiv);\n",
      "\n",
      "            Div divWithPosition = new Div().setFixedPosition(120, 300, 80);\n",
      "            divWithPosition.add(new Paragraph(\"Paragraph in Div with set position\"));\n",
      "            canvas.add(divWithPosition);\n",
      "\n",
      "            canvas.close();\n",
      "        }\n",
      "\n",
      "        Assert.assertNull(new CompareTool().compareByContent(out, cmp, DESTINATION_FOLDER));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    //TODO: DEVSIX-4820 (discuss the displaying of element with absolute position)\n",
      "    @LogMessages(messages = {@LogMessage(messageTemplate = IoLogMessageConstant.CANVAS_ALREADY_FULL_ELEMENT_WILL_BE_SKIPPED)})\n",
      "    public void parentElemWithAbsolPositionKidNotSuitCanvasTest() throws IOException, InterruptedException {\n",
      "        String testName = \"parentElemWithAbsolPositionKidNotSuitCanvas\";\n",
      "        String out = DESTINATION_FOLDER + testName + \".pdf\";\n",
      "        String cmp = SOURCE_FOLDER + \"cmp_\" + testName + \".pdf\";\n",
      "\n",
      "        try (PdfDocument pdf = new PdfDocument(new PdfWriter(out))) {\n",
      "            pdf.addNewPage();\n",
      "\n",
      "            Canvas canvas = new Canvas(new PdfCanvas(pdf.getFirstPage()),\n",
      "                    new Rectangle(120, 650, 55, 80));\n",
      "\n",
      "            Div notFittingDiv = new Div().setWidth(100).add(new Paragraph(\"Paragraph in Div with Not set position\"));\n",
      "            canvas.add(notFittingDiv);\n",
      "\n",
      "            Div divWithPosition = new Div().setFixedPosition(120, 300, 80);\n",
      "            divWithPosition.add(new Paragraph(\"Paragraph in Div with set position\"));\n",
      "            canvas.add(divWithPosition);\n",
      "\n",
      "            canvas.close();\n",
      "        }\n",
      "\n",
      "        Assert.assertNull(new CompareTool().compareByContent(out, cmp, DESTINATION_FOLDER));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    //TODO: DEVSIX-4820 (NullPointerException on processing absolutely positioned elements in small canvas area)\n",
      "    public void nestedElementWithAbsolutePositioningInCanvasTest() throws IOException, InterruptedException {\n",
      "        String testName = \"nestedElementWithAbsolutePositioningInCanvas\";\n",
      "        String out = DESTINATION_FOLDER + testName + \".pdf\";\n",
      "        String cmp = SOURCE_FOLDER + \"cmp_\" + testName + \".pdf\";\n",
      "\n",
      "        try (PdfDocument pdf = new PdfDocument(new PdfWriter(out))) {\n",
      "            pdf.addNewPage();\n",
      "\n",
      "            Canvas canvas = new Canvas(new PdfCanvas(pdf.getFirstPage()),\n",
      "                    new Rectangle(120, 650, 55, 80));\n",
      "\n",
      "            Div notFittingDiv = new Div().setWidth(100).add(new Paragraph(\"Paragraph in Div with Not set position\"));\n",
      "\n",
      "            Div divWithPosition = new Div().setFixedPosition(50, 20, 80);\n",
      "            divWithPosition.add(new Paragraph(\"Paragraph in Div with set position\"));\n",
      "\n",
      "            notFittingDiv.add(divWithPosition);\n",
      "\n",
      "            Assert.assertThrows(NullPointerException.class, () -> canvas.add(notFittingDiv));\n",
      "            canvas.close();\n",
      "        }\n",
      "\n",
      "        Assert.assertNull(new CompareTool().compareByContent(out, cmp, DESTINATION_FOLDER));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void addBlockElemMethodLinkingTest() {\n",
      "        try (PdfDocument pdfDocument = new PdfDocument(new PdfWriter(new ByteArrayOutputStream()))) {\n",
      "            pdfDocument.addNewPage();\n",
      "\n",
      "            SequenceId sequenceId = new SequenceId();\n",
      "            EventManager.getInstance().onEvent(new TestProductEvent(sequenceId));\n",
      "\n",
      "            IBlockElement blockElement = new Paragraph(\"some text\");\n",
      "            SequenceIdManager.setSequenceId((AbstractIdentifiableElement) blockElement, sequenceId);\n",
      "            List<AbstractProductProcessITextEvent> events;\n",
      "            try (Canvas canvas = new Canvas(pdfDocument.getPage(1), new Rectangle(0, 0, 200, 200))) {\n",
      "                canvas.add(blockElement);\n",
      "                events = CONFIGURATION_ACCESS.getPublicEvents(\n",
      "                        canvas.getPdfDocument().getDocumentIdWrapper());\n",
      "            }\n",
      "\n",
      "            // Second event was linked by adding block element method\n",
      "            Assert.assertEquals(2, events.size());\n",
      "\n",
      "            Assert.assertTrue(events.get(0) instanceof ITextCoreProductEvent);\n",
      "            Assert.assertTrue(events.get(1) instanceof TestProductEvent);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void addImageElemMethodLinkingTest() {\n",
      "        try (PdfDocument pdfDocument = new PdfDocument(new PdfWriter(new ByteArrayOutputStream()))) {\n",
      "            pdfDocument.addNewPage();\n",
      "\n",
      "            SequenceId sequenceId = new SequenceId();\n",
      "            EventManager.getInstance().onEvent(new TestProductEvent(sequenceId));\n",
      "\n",
      "            Image image = new Image(new PdfFormXObject(new Rectangle(10, 10)));\n",
      "            SequenceIdManager.setSequenceId(image, sequenceId);\n",
      "            List<AbstractProductProcessITextEvent> events;\n",
      "            try (Canvas canvas = new Canvas(pdfDocument.getPage(1), new Rectangle(0, 0, 200, 200))) {\n",
      "                canvas.add(image);\n",
      "                events = CONFIGURATION_ACCESS.getPublicEvents(\n",
      "                        canvas.getPdfDocument().getDocumentIdWrapper());\n",
      "            }\n",
      "\n",
      "            // Second event was linked by adding block element method\n",
      "            Assert.assertEquals(2, events.size());\n",
      "\n",
      "            Assert.assertTrue(events.get(0) instanceof ITextCoreProductEvent);\n",
      "            Assert.assertTrue(events.get(1) instanceof TestProductEvent);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void drawingOnPageReuseCanvas() {\n",
      "        try (PdfDocument pdfDocument = new PdfDocument(new PdfWriter(new ByteArrayOutputStream()))) {\n",
      "            ExposedPdfCanvas canvas = new ExposedPdfCanvas(pdfDocument.addNewPage());\n",
      "            Assert.assertTrue(canvas.getDrawingOnPage());\n",
      "            try (Canvas canvas1 = new Canvas(canvas, new Rectangle(200, 200, 200, 200))) {\n",
      "                Assert.assertTrue(((ExposedPdfCanvas) canvas1.pdfCanvas).getDrawingOnPage());\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void notDrawingOnPageReuseCanvas() {\n",
      "        try (PdfDocument pdfDocument = new PdfDocument(new PdfWriter(new ByteArrayOutputStream()))) {\n",
      "            PdfStream stream = new PdfStream();\n",
      "            ExposedPdfCanvas canvas = new ExposedPdfCanvas(stream, new PdfResources(), pdfDocument);\n",
      "            Assert.assertFalse(canvas.getDrawingOnPage());\n",
      "            try (Canvas canvas1 = new Canvas(canvas, new Rectangle(200, 200, 200, 200))) {\n",
      "                Assert.assertFalse(((ExposedPdfCanvas) canvas1.pdfCanvas).getDrawingOnPage());\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    static class ExposedPdfCanvas extends PdfCanvas{\n",
      "\n",
      "        public ExposedPdfCanvas(PdfStream contentStream, PdfResources resources, PdfDocument document) {\n",
      "            super(contentStream, resources, document);\n",
      "        }\n",
      "\n",
      "        public ExposedPdfCanvas(PdfPage page) {\n",
      "            super(page);\n",
      "        }\n",
      "\n",
      "\n",
      "        public boolean getDrawingOnPage(){\n",
      "            return this.drawingOnPage;\n",
      "        }\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "Canvas::::getPdfDocument()": [
        118,
        120
      ],
      "Canvas::::getRootArea()": [
        126,
        128
      ],
      "Canvas::::getPdfCanvas()": [
        134,
        136
      ],
      "Canvas::::setRenderer(com.itextpdf.layout.renderer.CanvasRenderer)": [
        143,
        145
      ],
      "Canvas::::getPage()": [
        151,
        153
      ],
      "Canvas::::isAutoTaggingEnabled()": [
        171,
        173
      ],
      "Canvas::::isCanvasOfPage()": [
        182,
        184
      ],
      "Canvas::::relayout()": [
        193,
        206
      ],
      "Canvas::::flush()": [
        212,
        214
      ],
      "Canvas::::close()": [
        222,
        227
      ],
      "Canvas::::ensureRootRendererNotNull()": [
        229,
        234
      ]
    },
    "test_method_lines_dic": {
      "CanvasTest::::beforeClass()": [
        73,
        76
      ],
      "CanvasTest::::canvasNoPageLinkTest()": [
        78,
        104
      ],
      "CanvasTest::::canvasWithPageLinkTest()": [
        106,
        130
      ],
      "CanvasTest::::listItemWithoutMarginsInCanvasTest()": [
        132,
        151
      ],
      "CanvasTest::::notApplyingMarginsInCanvasTest()": [
        153,
        169
      ],
      "CanvasTest::::nullableMarginsInCanvasRendererTest()": [
        171,
        187
      ],
      "CanvasTest::::canvasWithPageEnableTaggingTest01()": [
        189,
        216
      ],
      "CanvasTest::::canvasWithPageEnableTaggingTest02()": [
        218,
        251
      ],
      "CanvasTest::::elementWithAbsolutePositioningInCanvasTest()": [
        253,
        276
      ],
      "CanvasTest::::parentElemWithAbsolPositionKidNotSuitCanvasTest()": [
        278,
        303
      ],
      "CanvasTest::::nestedElementWithAbsolutePositioningInCanvasTest()": [
        305,
        330
      ],
      "CanvasTest::::addBlockElemMethodLinkingTest()": [
        332,
        355
      ],
      "CanvasTest::::addImageElemMethodLinkingTest()": [
        357,
        380
      ],
      "CanvasTest::::drawingOnPageReuseCanvas()": [
        382,
        391
      ],
      "CanvasTest::::notDrawingOnPageReuseCanvas()": [
        393,
        403
      ],
      "CanvasTest.ExposedPdfCanvas::::getDrawingOnPage()": [
        416,
        418
      ]
    },
    "reverse_method_lines_dic": {
      "118": "Canvas::::getPdfDocument()",
      "119": "Canvas::::getPdfDocument()",
      "120": "Canvas::::getPdfDocument()",
      "126": "Canvas::::getRootArea()",
      "127": "Canvas::::getRootArea()",
      "128": "Canvas::::getRootArea()",
      "134": "Canvas::::getPdfCanvas()",
      "135": "Canvas::::getPdfCanvas()",
      "136": "Canvas::::getPdfCanvas()",
      "143": "Canvas::::setRenderer(com.itextpdf.layout.renderer.CanvasRenderer)",
      "144": "Canvas::::setRenderer(com.itextpdf.layout.renderer.CanvasRenderer)",
      "145": "Canvas::::setRenderer(com.itextpdf.layout.renderer.CanvasRenderer)",
      "151": "Canvas::::getPage()",
      "152": "Canvas::::getPage()",
      "153": "Canvas::::getPage()",
      "171": "Canvas::::isAutoTaggingEnabled()",
      "172": "Canvas::::isAutoTaggingEnabled()",
      "173": "Canvas::::isAutoTaggingEnabled()",
      "182": "Canvas::::isCanvasOfPage()",
      "183": "Canvas::::isCanvasOfPage()",
      "184": "Canvas::::isCanvasOfPage()",
      "193": "Canvas::::relayout()",
      "194": "Canvas::::relayout()",
      "195": "Canvas::::relayout()",
      "196": "Canvas::::relayout()",
      "197": "Canvas::::relayout()",
      "198": "Canvas::::relayout()",
      "199": "Canvas::::relayout()",
      "200": "Canvas::::relayout()",
      "201": "Canvas::::relayout()",
      "202": "Canvas::::relayout()",
      "203": "Canvas::::relayout()",
      "204": "Canvas::::relayout()",
      "205": "Canvas::::relayout()",
      "206": "Canvas::::relayout()",
      "212": "Canvas::::flush()",
      "213": "Canvas::::flush()",
      "214": "Canvas::::flush()",
      "222": "Canvas::::close()",
      "223": "Canvas::::close()",
      "224": "Canvas::::close()",
      "225": "Canvas::::close()",
      "226": "Canvas::::close()",
      "227": "Canvas::::close()",
      "229": "Canvas::::ensureRootRendererNotNull()",
      "230": "Canvas::::ensureRootRendererNotNull()",
      "231": "Canvas::::ensureRootRendererNotNull()",
      "232": "Canvas::::ensureRootRendererNotNull()",
      "233": "Canvas::::ensureRootRendererNotNull()",
      "234": "Canvas::::ensureRootRendererNotNull()"
    },
    "test_reverse_method_lines_dic": {
      "73": "CanvasTest::::beforeClass()",
      "74": "CanvasTest::::beforeClass()",
      "75": "CanvasTest::::beforeClass()",
      "76": "CanvasTest::::beforeClass()",
      "78": "CanvasTest::::canvasNoPageLinkTest()",
      "79": "CanvasTest::::canvasNoPageLinkTest()",
      "80": "CanvasTest::::canvasNoPageLinkTest()",
      "81": "CanvasTest::::canvasNoPageLinkTest()",
      "82": "CanvasTest::::canvasNoPageLinkTest()",
      "83": "CanvasTest::::canvasNoPageLinkTest()",
      "84": "CanvasTest::::canvasNoPageLinkTest()",
      "85": "CanvasTest::::canvasNoPageLinkTest()",
      "86": "CanvasTest::::canvasNoPageLinkTest()",
      "87": "CanvasTest::::canvasNoPageLinkTest()",
      "88": "CanvasTest::::canvasNoPageLinkTest()",
      "89": "CanvasTest::::canvasNoPageLinkTest()",
      "90": "CanvasTest::::canvasNoPageLinkTest()",
      "91": "CanvasTest::::canvasNoPageLinkTest()",
      "92": "CanvasTest::::canvasNoPageLinkTest()",
      "93": "CanvasTest::::canvasNoPageLinkTest()",
      "94": "CanvasTest::::canvasNoPageLinkTest()",
      "95": "CanvasTest::::canvasNoPageLinkTest()",
      "96": "CanvasTest::::canvasNoPageLinkTest()",
      "97": "CanvasTest::::canvasNoPageLinkTest()",
      "98": "CanvasTest::::canvasNoPageLinkTest()",
      "99": "CanvasTest::::canvasNoPageLinkTest()",
      "100": "CanvasTest::::canvasNoPageLinkTest()",
      "101": "CanvasTest::::canvasNoPageLinkTest()",
      "102": "CanvasTest::::canvasNoPageLinkTest()",
      "103": "CanvasTest::::canvasNoPageLinkTest()",
      "104": "CanvasTest::::canvasNoPageLinkTest()",
      "106": "CanvasTest::::canvasWithPageLinkTest()",
      "107": "CanvasTest::::canvasWithPageLinkTest()",
      "108": "CanvasTest::::canvasWithPageLinkTest()",
      "109": "CanvasTest::::canvasWithPageLinkTest()",
      "110": "CanvasTest::::canvasWithPageLinkTest()",
      "111": "CanvasTest::::canvasWithPageLinkTest()",
      "112": "CanvasTest::::canvasWithPageLinkTest()",
      "113": "CanvasTest::::canvasWithPageLinkTest()",
      "114": "CanvasTest::::canvasWithPageLinkTest()",
      "115": "CanvasTest::::canvasWithPageLinkTest()",
      "116": "CanvasTest::::canvasWithPageLinkTest()",
      "117": "CanvasTest::::canvasWithPageLinkTest()",
      "118": "CanvasTest::::canvasWithPageLinkTest()",
      "119": "CanvasTest::::canvasWithPageLinkTest()",
      "120": "CanvasTest::::canvasWithPageLinkTest()",
      "121": "CanvasTest::::canvasWithPageLinkTest()",
      "122": "CanvasTest::::canvasWithPageLinkTest()",
      "123": "CanvasTest::::canvasWithPageLinkTest()",
      "124": "CanvasTest::::canvasWithPageLinkTest()",
      "125": "CanvasTest::::canvasWithPageLinkTest()",
      "126": "CanvasTest::::canvasWithPageLinkTest()",
      "127": "CanvasTest::::canvasWithPageLinkTest()",
      "128": "CanvasTest::::canvasWithPageLinkTest()",
      "129": "CanvasTest::::canvasWithPageLinkTest()",
      "130": "CanvasTest::::canvasWithPageLinkTest()",
      "132": "CanvasTest::::listItemWithoutMarginsInCanvasTest()",
      "133": "CanvasTest::::listItemWithoutMarginsInCanvasTest()",
      "134": "CanvasTest::::listItemWithoutMarginsInCanvasTest()",
      "135": "CanvasTest::::listItemWithoutMarginsInCanvasTest()",
      "136": "CanvasTest::::listItemWithoutMarginsInCanvasTest()",
      "137": "CanvasTest::::listItemWithoutMarginsInCanvasTest()",
      "138": "CanvasTest::::listItemWithoutMarginsInCanvasTest()",
      "139": "CanvasTest::::listItemWithoutMarginsInCanvasTest()",
      "140": "CanvasTest::::listItemWithoutMarginsInCanvasTest()",
      "141": "CanvasTest::::listItemWithoutMarginsInCanvasTest()",
      "142": "CanvasTest::::listItemWithoutMarginsInCanvasTest()",
      "143": "CanvasTest::::listItemWithoutMarginsInCanvasTest()",
      "144": "CanvasTest::::listItemWithoutMarginsInCanvasTest()",
      "145": "CanvasTest::::listItemWithoutMarginsInCanvasTest()",
      "146": "CanvasTest::::listItemWithoutMarginsInCanvasTest()",
      "147": "CanvasTest::::listItemWithoutMarginsInCanvasTest()",
      "148": "CanvasTest::::listItemWithoutMarginsInCanvasTest()",
      "149": "CanvasTest::::listItemWithoutMarginsInCanvasTest()",
      "150": "CanvasTest::::listItemWithoutMarginsInCanvasTest()",
      "151": "CanvasTest::::listItemWithoutMarginsInCanvasTest()",
      "153": "CanvasTest::::notApplyingMarginsInCanvasTest()",
      "154": "CanvasTest::::notApplyingMarginsInCanvasTest()",
      "155": "CanvasTest::::notApplyingMarginsInCanvasTest()",
      "156": "CanvasTest::::notApplyingMarginsInCanvasTest()",
      "157": "CanvasTest::::notApplyingMarginsInCanvasTest()",
      "158": "CanvasTest::::notApplyingMarginsInCanvasTest()",
      "159": "CanvasTest::::notApplyingMarginsInCanvasTest()",
      "160": "CanvasTest::::notApplyingMarginsInCanvasTest()",
      "161": "CanvasTest::::notApplyingMarginsInCanvasTest()",
      "162": "CanvasTest::::notApplyingMarginsInCanvasTest()",
      "163": "CanvasTest::::notApplyingMarginsInCanvasTest()",
      "164": "CanvasTest::::notApplyingMarginsInCanvasTest()",
      "165": "CanvasTest::::notApplyingMarginsInCanvasTest()",
      "166": "CanvasTest::::notApplyingMarginsInCanvasTest()",
      "167": "CanvasTest::::notApplyingMarginsInCanvasTest()",
      "168": "CanvasTest::::notApplyingMarginsInCanvasTest()",
      "169": "CanvasTest::::notApplyingMarginsInCanvasTest()",
      "171": "CanvasTest::::nullableMarginsInCanvasRendererTest()",
      "172": "CanvasTest::::nullableMarginsInCanvasRendererTest()",
      "173": "CanvasTest::::nullableMarginsInCanvasRendererTest()",
      "174": "CanvasTest::::nullableMarginsInCanvasRendererTest()",
      "175": "CanvasTest::::nullableMarginsInCanvasRendererTest()",
      "176": "CanvasTest::::nullableMarginsInCanvasRendererTest()",
      "177": "CanvasTest::::nullableMarginsInCanvasRendererTest()",
      "178": "CanvasTest::::nullableMarginsInCanvasRendererTest()",
      "179": "CanvasTest::::nullableMarginsInCanvasRendererTest()",
      "180": "CanvasTest::::nullableMarginsInCanvasRendererTest()",
      "181": "CanvasTest::::nullableMarginsInCanvasRendererTest()",
      "182": "CanvasTest::::nullableMarginsInCanvasRendererTest()",
      "183": "CanvasTest::::nullableMarginsInCanvasRendererTest()",
      "184": "CanvasTest::::nullableMarginsInCanvasRendererTest()",
      "185": "CanvasTest::::nullableMarginsInCanvasRendererTest()",
      "186": "CanvasTest::::nullableMarginsInCanvasRendererTest()",
      "187": "CanvasTest::::nullableMarginsInCanvasRendererTest()",
      "189": "CanvasTest::::canvasWithPageEnableTaggingTest01()",
      "190": "CanvasTest::::canvasWithPageEnableTaggingTest01()",
      "191": "CanvasTest::::canvasWithPageEnableTaggingTest01()",
      "192": "CanvasTest::::canvasWithPageEnableTaggingTest01()",
      "193": "CanvasTest::::canvasWithPageEnableTaggingTest01()",
      "194": "CanvasTest::::canvasWithPageEnableTaggingTest01()",
      "195": "CanvasTest::::canvasWithPageEnableTaggingTest01()",
      "196": "CanvasTest::::canvasWithPageEnableTaggingTest01()",
      "197": "CanvasTest::::canvasWithPageEnableTaggingTest01()",
      "198": "CanvasTest::::canvasWithPageEnableTaggingTest01()",
      "199": "CanvasTest::::canvasWithPageEnableTaggingTest01()",
      "200": "CanvasTest::::canvasWithPageEnableTaggingTest01()",
      "201": "CanvasTest::::canvasWithPageEnableTaggingTest01()",
      "202": "CanvasTest::::canvasWithPageEnableTaggingTest01()",
      "203": "CanvasTest::::canvasWithPageEnableTaggingTest01()",
      "204": "CanvasTest::::canvasWithPageEnableTaggingTest01()",
      "205": "CanvasTest::::canvasWithPageEnableTaggingTest01()",
      "206": "CanvasTest::::canvasWithPageEnableTaggingTest01()",
      "207": "CanvasTest::::canvasWithPageEnableTaggingTest01()",
      "208": "CanvasTest::::canvasWithPageEnableTaggingTest01()",
      "209": "CanvasTest::::canvasWithPageEnableTaggingTest01()",
      "210": "CanvasTest::::canvasWithPageEnableTaggingTest01()",
      "211": "CanvasTest::::canvasWithPageEnableTaggingTest01()",
      "212": "CanvasTest::::canvasWithPageEnableTaggingTest01()",
      "213": "CanvasTest::::canvasWithPageEnableTaggingTest01()",
      "214": "CanvasTest::::canvasWithPageEnableTaggingTest01()",
      "215": "CanvasTest::::canvasWithPageEnableTaggingTest01()",
      "216": "CanvasTest::::canvasWithPageEnableTaggingTest01()",
      "218": "CanvasTest::::canvasWithPageEnableTaggingTest02()",
      "219": "CanvasTest::::canvasWithPageEnableTaggingTest02()",
      "220": "CanvasTest::::canvasWithPageEnableTaggingTest02()",
      "221": "CanvasTest::::canvasWithPageEnableTaggingTest02()",
      "222": "CanvasTest::::canvasWithPageEnableTaggingTest02()",
      "223": "CanvasTest::::canvasWithPageEnableTaggingTest02()",
      "224": "CanvasTest::::canvasWithPageEnableTaggingTest02()",
      "225": "CanvasTest::::canvasWithPageEnableTaggingTest02()",
      "226": "CanvasTest::::canvasWithPageEnableTaggingTest02()",
      "227": "CanvasTest::::canvasWithPageEnableTaggingTest02()",
      "228": "CanvasTest::::canvasWithPageEnableTaggingTest02()",
      "229": "CanvasTest::::canvasWithPageEnableTaggingTest02()",
      "230": "CanvasTest::::canvasWithPageEnableTaggingTest02()",
      "231": "CanvasTest::::canvasWithPageEnableTaggingTest02()",
      "232": "CanvasTest::::canvasWithPageEnableTaggingTest02()",
      "233": "CanvasTest::::canvasWithPageEnableTaggingTest02()",
      "234": "CanvasTest::::canvasWithPageEnableTaggingTest02()",
      "235": "CanvasTest::::canvasWithPageEnableTaggingTest02()",
      "236": "CanvasTest::::canvasWithPageEnableTaggingTest02()",
      "237": "CanvasTest::::canvasWithPageEnableTaggingTest02()",
      "238": "CanvasTest::::canvasWithPageEnableTaggingTest02()",
      "239": "CanvasTest::::canvasWithPageEnableTaggingTest02()",
      "240": "CanvasTest::::canvasWithPageEnableTaggingTest02()",
      "241": "CanvasTest::::canvasWithPageEnableTaggingTest02()",
      "242": "CanvasTest::::canvasWithPageEnableTaggingTest02()",
      "243": "CanvasTest::::canvasWithPageEnableTaggingTest02()",
      "244": "CanvasTest::::canvasWithPageEnableTaggingTest02()",
      "245": "CanvasTest::::canvasWithPageEnableTaggingTest02()",
      "246": "CanvasTest::::canvasWithPageEnableTaggingTest02()",
      "247": "CanvasTest::::canvasWithPageEnableTaggingTest02()",
      "248": "CanvasTest::::canvasWithPageEnableTaggingTest02()",
      "249": "CanvasTest::::canvasWithPageEnableTaggingTest02()",
      "250": "CanvasTest::::canvasWithPageEnableTaggingTest02()",
      "251": "CanvasTest::::canvasWithPageEnableTaggingTest02()",
      "253": "CanvasTest::::elementWithAbsolutePositioningInCanvasTest()",
      "254": "CanvasTest::::elementWithAbsolutePositioningInCanvasTest()",
      "255": "CanvasTest::::elementWithAbsolutePositioningInCanvasTest()",
      "256": "CanvasTest::::elementWithAbsolutePositioningInCanvasTest()",
      "257": "CanvasTest::::elementWithAbsolutePositioningInCanvasTest()",
      "258": "CanvasTest::::elementWithAbsolutePositioningInCanvasTest()",
      "259": "CanvasTest::::elementWithAbsolutePositioningInCanvasTest()",
      "260": "CanvasTest::::elementWithAbsolutePositioningInCanvasTest()",
      "261": "CanvasTest::::elementWithAbsolutePositioningInCanvasTest()",
      "262": "CanvasTest::::elementWithAbsolutePositioningInCanvasTest()",
      "263": "CanvasTest::::elementWithAbsolutePositioningInCanvasTest()",
      "264": "CanvasTest::::elementWithAbsolutePositioningInCanvasTest()",
      "265": "CanvasTest::::elementWithAbsolutePositioningInCanvasTest()",
      "266": "CanvasTest::::elementWithAbsolutePositioningInCanvasTest()",
      "267": "CanvasTest::::elementWithAbsolutePositioningInCanvasTest()",
      "268": "CanvasTest::::elementWithAbsolutePositioningInCanvasTest()",
      "269": "CanvasTest::::elementWithAbsolutePositioningInCanvasTest()",
      "270": "CanvasTest::::elementWithAbsolutePositioningInCanvasTest()",
      "271": "CanvasTest::::elementWithAbsolutePositioningInCanvasTest()",
      "272": "CanvasTest::::elementWithAbsolutePositioningInCanvasTest()",
      "273": "CanvasTest::::elementWithAbsolutePositioningInCanvasTest()",
      "274": "CanvasTest::::elementWithAbsolutePositioningInCanvasTest()",
      "275": "CanvasTest::::elementWithAbsolutePositioningInCanvasTest()",
      "276": "CanvasTest::::elementWithAbsolutePositioningInCanvasTest()",
      "278": "CanvasTest::::parentElemWithAbsolPositionKidNotSuitCanvasTest()",
      "279": "CanvasTest::::parentElemWithAbsolPositionKidNotSuitCanvasTest()",
      "280": "CanvasTest::::parentElemWithAbsolPositionKidNotSuitCanvasTest()",
      "281": "CanvasTest::::parentElemWithAbsolPositionKidNotSuitCanvasTest()",
      "282": "CanvasTest::::parentElemWithAbsolPositionKidNotSuitCanvasTest()",
      "283": "CanvasTest::::parentElemWithAbsolPositionKidNotSuitCanvasTest()",
      "284": "CanvasTest::::parentElemWithAbsolPositionKidNotSuitCanvasTest()",
      "285": "CanvasTest::::parentElemWithAbsolPositionKidNotSuitCanvasTest()",
      "286": "CanvasTest::::parentElemWithAbsolPositionKidNotSuitCanvasTest()",
      "287": "CanvasTest::::parentElemWithAbsolPositionKidNotSuitCanvasTest()",
      "288": "CanvasTest::::parentElemWithAbsolPositionKidNotSuitCanvasTest()",
      "289": "CanvasTest::::parentElemWithAbsolPositionKidNotSuitCanvasTest()",
      "290": "CanvasTest::::parentElemWithAbsolPositionKidNotSuitCanvasTest()",
      "291": "CanvasTest::::parentElemWithAbsolPositionKidNotSuitCanvasTest()",
      "292": "CanvasTest::::parentElemWithAbsolPositionKidNotSuitCanvasTest()",
      "293": "CanvasTest::::parentElemWithAbsolPositionKidNotSuitCanvasTest()",
      "294": "CanvasTest::::parentElemWithAbsolPositionKidNotSuitCanvasTest()",
      "295": "CanvasTest::::parentElemWithAbsolPositionKidNotSuitCanvasTest()",
      "296": "CanvasTest::::parentElemWithAbsolPositionKidNotSuitCanvasTest()",
      "297": "CanvasTest::::parentElemWithAbsolPositionKidNotSuitCanvasTest()",
      "298": "CanvasTest::::parentElemWithAbsolPositionKidNotSuitCanvasTest()",
      "299": "CanvasTest::::parentElemWithAbsolPositionKidNotSuitCanvasTest()",
      "300": "CanvasTest::::parentElemWithAbsolPositionKidNotSuitCanvasTest()",
      "301": "CanvasTest::::parentElemWithAbsolPositionKidNotSuitCanvasTest()",
      "302": "CanvasTest::::parentElemWithAbsolPositionKidNotSuitCanvasTest()",
      "303": "CanvasTest::::parentElemWithAbsolPositionKidNotSuitCanvasTest()",
      "305": "CanvasTest::::nestedElementWithAbsolutePositioningInCanvasTest()",
      "306": "CanvasTest::::nestedElementWithAbsolutePositioningInCanvasTest()",
      "307": "CanvasTest::::nestedElementWithAbsolutePositioningInCanvasTest()",
      "308": "CanvasTest::::nestedElementWithAbsolutePositioningInCanvasTest()",
      "309": "CanvasTest::::nestedElementWithAbsolutePositioningInCanvasTest()",
      "310": "CanvasTest::::nestedElementWithAbsolutePositioningInCanvasTest()",
      "311": "CanvasTest::::nestedElementWithAbsolutePositioningInCanvasTest()",
      "312": "CanvasTest::::nestedElementWithAbsolutePositioningInCanvasTest()",
      "313": "CanvasTest::::nestedElementWithAbsolutePositioningInCanvasTest()",
      "314": "CanvasTest::::nestedElementWithAbsolutePositioningInCanvasTest()",
      "315": "CanvasTest::::nestedElementWithAbsolutePositioningInCanvasTest()",
      "316": "CanvasTest::::nestedElementWithAbsolutePositioningInCanvasTest()",
      "317": "CanvasTest::::nestedElementWithAbsolutePositioningInCanvasTest()",
      "318": "CanvasTest::::nestedElementWithAbsolutePositioningInCanvasTest()",
      "319": "CanvasTest::::nestedElementWithAbsolutePositioningInCanvasTest()",
      "320": "CanvasTest::::nestedElementWithAbsolutePositioningInCanvasTest()",
      "321": "CanvasTest::::nestedElementWithAbsolutePositioningInCanvasTest()",
      "322": "CanvasTest::::nestedElementWithAbsolutePositioningInCanvasTest()",
      "323": "CanvasTest::::nestedElementWithAbsolutePositioningInCanvasTest()",
      "324": "CanvasTest::::nestedElementWithAbsolutePositioningInCanvasTest()",
      "325": "CanvasTest::::nestedElementWithAbsolutePositioningInCanvasTest()",
      "326": "CanvasTest::::nestedElementWithAbsolutePositioningInCanvasTest()",
      "327": "CanvasTest::::nestedElementWithAbsolutePositioningInCanvasTest()",
      "328": "CanvasTest::::nestedElementWithAbsolutePositioningInCanvasTest()",
      "329": "CanvasTest::::nestedElementWithAbsolutePositioningInCanvasTest()",
      "330": "CanvasTest::::nestedElementWithAbsolutePositioningInCanvasTest()",
      "332": "CanvasTest::::addBlockElemMethodLinkingTest()",
      "333": "CanvasTest::::addBlockElemMethodLinkingTest()",
      "334": "CanvasTest::::addBlockElemMethodLinkingTest()",
      "335": "CanvasTest::::addBlockElemMethodLinkingTest()",
      "336": "CanvasTest::::addBlockElemMethodLinkingTest()",
      "337": "CanvasTest::::addBlockElemMethodLinkingTest()",
      "338": "CanvasTest::::addBlockElemMethodLinkingTest()",
      "339": "CanvasTest::::addBlockElemMethodLinkingTest()",
      "340": "CanvasTest::::addBlockElemMethodLinkingTest()",
      "341": "CanvasTest::::addBlockElemMethodLinkingTest()",
      "342": "CanvasTest::::addBlockElemMethodLinkingTest()",
      "343": "CanvasTest::::addBlockElemMethodLinkingTest()",
      "344": "CanvasTest::::addBlockElemMethodLinkingTest()",
      "345": "CanvasTest::::addBlockElemMethodLinkingTest()",
      "346": "CanvasTest::::addBlockElemMethodLinkingTest()",
      "347": "CanvasTest::::addBlockElemMethodLinkingTest()",
      "348": "CanvasTest::::addBlockElemMethodLinkingTest()",
      "349": "CanvasTest::::addBlockElemMethodLinkingTest()",
      "350": "CanvasTest::::addBlockElemMethodLinkingTest()",
      "351": "CanvasTest::::addBlockElemMethodLinkingTest()",
      "352": "CanvasTest::::addBlockElemMethodLinkingTest()",
      "353": "CanvasTest::::addBlockElemMethodLinkingTest()",
      "354": "CanvasTest::::addBlockElemMethodLinkingTest()",
      "355": "CanvasTest::::addBlockElemMethodLinkingTest()",
      "357": "CanvasTest::::addImageElemMethodLinkingTest()",
      "358": "CanvasTest::::addImageElemMethodLinkingTest()",
      "359": "CanvasTest::::addImageElemMethodLinkingTest()",
      "360": "CanvasTest::::addImageElemMethodLinkingTest()",
      "361": "CanvasTest::::addImageElemMethodLinkingTest()",
      "362": "CanvasTest::::addImageElemMethodLinkingTest()",
      "363": "CanvasTest::::addImageElemMethodLinkingTest()",
      "364": "CanvasTest::::addImageElemMethodLinkingTest()",
      "365": "CanvasTest::::addImageElemMethodLinkingTest()",
      "366": "CanvasTest::::addImageElemMethodLinkingTest()",
      "367": "CanvasTest::::addImageElemMethodLinkingTest()",
      "368": "CanvasTest::::addImageElemMethodLinkingTest()",
      "369": "CanvasTest::::addImageElemMethodLinkingTest()",
      "370": "CanvasTest::::addImageElemMethodLinkingTest()",
      "371": "CanvasTest::::addImageElemMethodLinkingTest()",
      "372": "CanvasTest::::addImageElemMethodLinkingTest()",
      "373": "CanvasTest::::addImageElemMethodLinkingTest()",
      "374": "CanvasTest::::addImageElemMethodLinkingTest()",
      "375": "CanvasTest::::addImageElemMethodLinkingTest()",
      "376": "CanvasTest::::addImageElemMethodLinkingTest()",
      "377": "CanvasTest::::addImageElemMethodLinkingTest()",
      "378": "CanvasTest::::addImageElemMethodLinkingTest()",
      "379": "CanvasTest::::addImageElemMethodLinkingTest()",
      "380": "CanvasTest::::addImageElemMethodLinkingTest()",
      "382": "CanvasTest::::drawingOnPageReuseCanvas()",
      "383": "CanvasTest::::drawingOnPageReuseCanvas()",
      "384": "CanvasTest::::drawingOnPageReuseCanvas()",
      "385": "CanvasTest::::drawingOnPageReuseCanvas()",
      "386": "CanvasTest::::drawingOnPageReuseCanvas()",
      "387": "CanvasTest::::drawingOnPageReuseCanvas()",
      "388": "CanvasTest::::drawingOnPageReuseCanvas()",
      "389": "CanvasTest::::drawingOnPageReuseCanvas()",
      "390": "CanvasTest::::drawingOnPageReuseCanvas()",
      "391": "CanvasTest::::drawingOnPageReuseCanvas()",
      "393": "CanvasTest::::notDrawingOnPageReuseCanvas()",
      "394": "CanvasTest::::notDrawingOnPageReuseCanvas()",
      "395": "CanvasTest::::notDrawingOnPageReuseCanvas()",
      "396": "CanvasTest::::notDrawingOnPageReuseCanvas()",
      "397": "CanvasTest::::notDrawingOnPageReuseCanvas()",
      "398": "CanvasTest::::notDrawingOnPageReuseCanvas()",
      "399": "CanvasTest::::notDrawingOnPageReuseCanvas()",
      "400": "CanvasTest::::notDrawingOnPageReuseCanvas()",
      "401": "CanvasTest::::notDrawingOnPageReuseCanvas()",
      "402": "CanvasTest::::notDrawingOnPageReuseCanvas()",
      "403": "CanvasTest::::notDrawingOnPageReuseCanvas()",
      "416": "CanvasTest.ExposedPdfCanvas::::getDrawingOnPage()",
      "417": "CanvasTest.ExposedPdfCanvas::::getDrawingOnPage()",
      "418": "CanvasTest.ExposedPdfCanvas::::getDrawingOnPage()"
    },
    "tests": [
      {
        "test_lines": [
          78,
          104
        ],
        "covered_lines": [
          86,
          87,
          88,
          89,
          90,
          119,
          127,
          135,
          183,
          224,
          225,
          227,
          231,
          232,
          233
        ]
      },
      {
        "test_lines": [
          106,
          130
        ],
        "covered_lines": [
          73,
          74,
          75,
          76,
          86,
          87,
          88,
          89,
          90,
          119,
          127,
          135,
          152,
          160,
          164,
          165,
          166,
          172,
          183,
          224,
          225,
          227,
          231,
          232,
          233,
          237,
          240
        ]
      },
      {
        "test_lines": [
          132,
          151
        ],
        "covered_lines": [
          73,
          74,
          75,
          76,
          86,
          87,
          88,
          89,
          90,
          119,
          127,
          135,
          152,
          160,
          164,
          165,
          166,
          172,
          183,
          224,
          225,
          227,
          231,
          232,
          233,
          237,
          240
        ]
      },
      {
        "test_lines": [
          153,
          169
        ],
        "covered_lines": [
          73,
          74,
          75,
          76,
          86,
          87,
          88,
          89,
          90,
          119,
          127,
          135,
          152,
          160,
          164,
          165,
          166,
          172,
          183,
          224,
          225,
          227,
          231,
          232,
          233,
          237,
          240
        ]
      },
      {
        "test_lines": [
          171,
          187
        ],
        "covered_lines": [
          73,
          74,
          75,
          76,
          86,
          87,
          88,
          89,
          90,
          119,
          127,
          135,
          152,
          160,
          164,
          165,
          166,
          172,
          183,
          224,
          225,
          227,
          231,
          232,
          233,
          237,
          240
        ]
      },
      {
        "test_lines": [
          189,
          216
        ],
        "covered_lines": [
          73,
          74,
          75,
          76,
          86,
          87,
          88,
          89,
          90,
          119,
          127,
          135,
          152,
          160,
          164,
          165,
          166,
          172,
          183,
          224,
          225,
          227,
          231,
          232,
          233,
          237,
          240
        ]
      },
      {
        "test_lines": [
          218,
          251
        ],
        "covered_lines": [
          73,
          74,
          75,
          76,
          86,
          87,
          88,
          89,
          90,
          119,
          127,
          135,
          152,
          160,
          161,
          162,
          164,
          165,
          166,
          172,
          183,
          224,
          225,
          227,
          231,
          232,
          233,
          237,
          240
        ]
      },
      {
        "test_lines": [
          253,
          276
        ],
        "covered_lines": [
          86,
          87,
          88,
          89,
          90,
          119,
          127,
          135,
          183,
          224,
          225,
          227,
          231,
          232,
          233
        ]
      },
      {
        "test_lines": [
          278,
          303
        ],
        "covered_lines": [
          86,
          87,
          88,
          89,
          90,
          119,
          127,
          135,
          183,
          224,
          225,
          227,
          231,
          232,
          233
        ]
      },
      {
        "test_lines": [
          305,
          330
        ],
        "covered_lines": [
          86,
          87,
          88,
          89,
          90,
          119,
          127,
          135,
          183,
          224,
          225,
          227,
          231,
          232,
          233
        ]
      },
      {
        "test_lines": [
          332,
          355
        ],
        "covered_lines": [
          73,
          74,
          75,
          76,
          86,
          87,
          88,
          89,
          90,
          119,
          127,
          135,
          152,
          160,
          164,
          165,
          166,
          172,
          183,
          224,
          225,
          227,
          231,
          232,
          233,
          237,
          240
        ]
      },
      {
        "test_lines": [
          357,
          380
        ],
        "covered_lines": [
          73,
          74,
          75,
          76,
          86,
          87,
          88,
          89,
          90,
          119,
          127,
          135,
          152,
          160,
          164,
          165,
          166,
          172,
          183,
          224,
          225,
          227,
          231,
          232,
          233,
          237,
          240
        ]
      },
      {
        "test_lines": [
          382,
          391
        ],
        "covered_lines": [
          86,
          87,
          88,
          89,
          90,
          224,
          227
        ]
      },
      {
        "test_lines": [
          393,
          403
        ],
        "covered_lines": [
          86,
          87,
          88,
          89,
          90,
          224,
          227
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/itext-java/layout/src/main/java/com/itextpdf/layout/layout/LayoutArea.java": {
    "class_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.layout.layout;\n",
      "\n",
      "import com.itextpdf.io.util.HashCode;\n",
      "import com.itextpdf.kernel.geom.Rectangle;\n",
      "import com.itextpdf.commons.utils.MessageFormatUtil;\n",
      "\n",
      "/**\n",
      " * Represents the area for content {@link com.itextpdf.layout.renderer.IRenderer#layout(LayoutContext) layouting}.\n",
      " */\n",
      "public class LayoutArea implements Cloneable {\n",
      "\n",
      "    /**\n",
      "     * The number of page on which the area is located.\n",
      "     */\n",
      "    protected int pageNumber;\n",
      "    /**\n",
      "     * The area's bounding box\n",
      "     */\n",
      "    protected Rectangle bBox;\n",
      "\n",
      "    /**\n",
      "     * Creates the area for content {@link com.itextpdf.layout.renderer.IRenderer#layout(LayoutContext) layouting}.\n",
      "     *\n",
      "     * @param pageNumber the number of page on which the area is located.\n",
      "     * @param bBox the area's bounding box\n",
      "     */\n",
      "    public LayoutArea(int pageNumber, Rectangle bBox) {\n",
      "        this.pageNumber = pageNumber;\n",
      "        this.bBox = bBox;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Gets the number of page on which the area is located.\n",
      "     *\n",
      "     * @return page number\n",
      "     */\n",
      "    public int getPageNumber() {\n",
      "        return pageNumber;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Gets the {@link Rectangle box} which bounds the area.\n",
      "     *\n",
      "     * @return the bounding box\n",
      "     */\n",
      "    public Rectangle getBBox() {\n",
      "        return bBox;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Sets the {@link Rectangle box} which bounds the area.\n",
      "     *\n",
      "     * @param bbox the area's bounding box\n",
      "     */\n",
      "    public void setBBox(Rectangle bbox) {\n",
      "        this.bBox = bbox;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Creates a \"deep copy\" of this LayoutArea, meaning the object returned by this method will be independent\n",
      "     * of the object being cloned.\n",
      "     *\n",
      "     * @return the copied LayoutArea.\n",
      "     */\n",
      "    @Override\n",
      "    public LayoutArea clone() {\n",
      "        try {\n",
      "            LayoutArea clone = (LayoutArea) super.clone();\n",
      "            // super.clone performs a \"shallow-copy\", therefore it's needed to copy non-primitive fields manually.\n",
      "            clone.bBox = bBox.clone();\n",
      "            return clone;\n",
      "        } catch (CloneNotSupportedException e) {\n",
      "            // should never happen since Cloneable is implemented\n",
      "            return null;\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * {@inheritDoc}\n",
      "     */\n",
      "    @Override\n",
      "    public boolean equals(Object obj) {\n",
      "        if (getClass() != obj.getClass()) {\n",
      "            return false;\n",
      "        }\n",
      "        LayoutArea that = (LayoutArea) obj;\n",
      "        return pageNumber == that.pageNumber && bBox.equalsWithEpsilon(that.bBox);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * {@inheritDoc}\n",
      "     */\n",
      "    @Override\n",
      "    public int hashCode() {\n",
      "        HashCode hashCode = new HashCode();\n",
      "        hashCode.append(pageNumber).\n",
      "                append(bBox.hashCode());\n",
      "        return hashCode.hashCode();\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * {@inheritDoc}\n",
      "     */\n",
      "    @Override\n",
      "    public String toString() {\n",
      "        return MessageFormatUtil.format(\"{0}, page {1}\", bBox.toString(), pageNumber);\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.layout.layout;\n",
      "\n",
      "import com.itextpdf.kernel.geom.Rectangle;\n",
      "import com.itextpdf.test.ExtendedITextTest;\n",
      "import com.itextpdf.test.annotations.type.UnitTest;\n",
      "import org.junit.Assert;\n",
      "import org.junit.Test;\n",
      "import org.junit.experimental.categories.Category;\n",
      "\n",
      "@Category(UnitTest.class)\n",
      "public class LayoutAreaTest extends ExtendedITextTest {\n",
      "\n",
      "    @Test\n",
      "    public void cloneTest() {\n",
      "        RootLayoutArea originalRootLayoutArea = new RootLayoutArea(1, new Rectangle(5, 10, 15, 20));\n",
      "        originalRootLayoutArea.emptyArea = false;\n",
      "        LayoutArea cloneAsLayoutArea = ((LayoutArea) originalRootLayoutArea).clone();\n",
      "        RootLayoutArea cloneAsRootLayoutArea = (RootLayoutArea) originalRootLayoutArea.clone();\n",
      "\n",
      "        Assert.assertTrue((originalRootLayoutArea).getBBox() != cloneAsLayoutArea.getBBox());\n",
      "\n",
      "        Assert.assertEquals(RootLayoutArea.class, cloneAsRootLayoutArea.getClass());\n",
      "\n",
      "        Assert.assertEquals(RootLayoutArea.class, cloneAsLayoutArea.getClass());\n",
      "        Assert.assertFalse(((RootLayoutArea) cloneAsLayoutArea).isEmptyArea());\n",
      "    }\n",
      "\n",
      "\n",
      "}\n"
    ],
    "method_lines_dic": {
      "LayoutArea::::getPageNumber()": [
        59,
        61
      ],
      "LayoutArea::::getBBox()": [
        68,
        70
      ],
      "LayoutArea::::clone()": [
        87,
        98
      ],
      "LayoutArea::::equals(java.lang.Object)": [
        103,
        110
      ],
      "LayoutArea::::hashCode()": [
        115,
        121
      ],
      "LayoutArea::::toString()": [
        126,
        129
      ]
    },
    "test_method_lines_dic": {
      "LayoutAreaTest::::cloneTest()": [
        35,
        48
      ]
    },
    "reverse_method_lines_dic": {
      "59": "LayoutArea::::getPageNumber()",
      "60": "LayoutArea::::getPageNumber()",
      "61": "LayoutArea::::getPageNumber()",
      "68": "LayoutArea::::getBBox()",
      "69": "LayoutArea::::getBBox()",
      "70": "LayoutArea::::getBBox()",
      "87": "LayoutArea::::clone()",
      "88": "LayoutArea::::clone()",
      "89": "LayoutArea::::clone()",
      "90": "LayoutArea::::clone()",
      "91": "LayoutArea::::clone()",
      "92": "LayoutArea::::clone()",
      "93": "LayoutArea::::clone()",
      "94": "LayoutArea::::clone()",
      "95": "LayoutArea::::clone()",
      "96": "LayoutArea::::clone()",
      "97": "LayoutArea::::clone()",
      "98": "LayoutArea::::clone()",
      "103": "LayoutArea::::equals(java.lang.Object)",
      "104": "LayoutArea::::equals(java.lang.Object)",
      "105": "LayoutArea::::equals(java.lang.Object)",
      "106": "LayoutArea::::equals(java.lang.Object)",
      "107": "LayoutArea::::equals(java.lang.Object)",
      "108": "LayoutArea::::equals(java.lang.Object)",
      "109": "LayoutArea::::equals(java.lang.Object)",
      "110": "LayoutArea::::equals(java.lang.Object)",
      "115": "LayoutArea::::hashCode()",
      "116": "LayoutArea::::hashCode()",
      "117": "LayoutArea::::hashCode()",
      "118": "LayoutArea::::hashCode()",
      "119": "LayoutArea::::hashCode()",
      "120": "LayoutArea::::hashCode()",
      "121": "LayoutArea::::hashCode()",
      "126": "LayoutArea::::toString()",
      "127": "LayoutArea::::toString()",
      "128": "LayoutArea::::toString()",
      "129": "LayoutArea::::toString()"
    },
    "test_reverse_method_lines_dic": {
      "35": "LayoutAreaTest::::cloneTest()",
      "36": "LayoutAreaTest::::cloneTest()",
      "37": "LayoutAreaTest::::cloneTest()",
      "38": "LayoutAreaTest::::cloneTest()",
      "39": "LayoutAreaTest::::cloneTest()",
      "40": "LayoutAreaTest::::cloneTest()",
      "41": "LayoutAreaTest::::cloneTest()",
      "42": "LayoutAreaTest::::cloneTest()",
      "43": "LayoutAreaTest::::cloneTest()",
      "44": "LayoutAreaTest::::cloneTest()",
      "45": "LayoutAreaTest::::cloneTest()",
      "46": "LayoutAreaTest::::cloneTest()",
      "47": "LayoutAreaTest::::cloneTest()",
      "48": "LayoutAreaTest::::cloneTest()"
    },
    "tests": [
      {
        "test_lines": [
          35,
          48
        ],
        "covered_lines": [
          49,
          50,
          51,
          52,
          69,
          90,
          92,
          93
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/itext-java/layout/src/main/java/com/itextpdf/layout/element/MulticolContainer.java": {
    "class_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.layout.element;\n",
      "\n",
      "import com.itextpdf.layout.renderer.IRenderer;\n",
      "import com.itextpdf.layout.renderer.MulticolRenderer;\n",
      "\n",
      "/**\n",
      " * represents a container of the column objects.\n",
      " */\n",
      "public class MulticolContainer extends Div {\n",
      "\n",
      "    /**\n",
      "     * Creates new {@link MulticolContainer} instance.\n",
      "     */\n",
      "    public MulticolContainer() {\n",
      "        super();\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    protected IRenderer makeNewRenderer() {\n",
      "        return new MulticolRenderer(this);\n",
      "    }\n",
      "\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.layout.element;\n",
      "\n",
      "import com.itextpdf.commons.utils.PlaceHolderTextUtil;\n",
      "import com.itextpdf.commons.utils.PlaceHolderTextUtil.PlaceHolderTextBy;\n",
      "import com.itextpdf.io.image.ImageDataFactory;\n",
      "import com.itextpdf.io.source.ByteArrayOutputStream;\n",
      "import com.itextpdf.io.util.UrlUtil;\n",
      "import com.itextpdf.kernel.colors.Color;\n",
      "import com.itextpdf.kernel.colors.ColorConstants;\n",
      "import com.itextpdf.kernel.pdf.PdfDocument;\n",
      "import com.itextpdf.kernel.pdf.PdfWriter;\n",
      "import com.itextpdf.kernel.pdf.xobject.PdfImageXObject;\n",
      "import com.itextpdf.kernel.utils.CompareTool;\n",
      "import com.itextpdf.layout.Document;\n",
      "import com.itextpdf.layout.borders.Border;\n",
      "import com.itextpdf.layout.borders.SolidBorder;\n",
      "import com.itextpdf.layout.exceptions.LayoutExceptionMessageConstant;\n",
      "import com.itextpdf.layout.logs.LayoutLogMessageConstant;\n",
      "import com.itextpdf.layout.properties.Background;\n",
      "import com.itextpdf.layout.properties.HorizontalAlignment;\n",
      "import com.itextpdf.layout.properties.Property;\n",
      "import com.itextpdf.layout.properties.UnitValue;\n",
      "import com.itextpdf.test.ExtendedITextTest;\n",
      "import com.itextpdf.test.LogLevelConstants;\n",
      "import com.itextpdf.test.annotations.LogMessage;\n",
      "import com.itextpdf.test.annotations.LogMessages;\n",
      "import com.itextpdf.test.annotations.type.IntegrationTest;\n",
      "\n",
      "import java.io.IOException;\n",
      "import java.net.MalformedURLException;\n",
      "import java.util.function.Consumer;\n",
      "import org.junit.Assert;\n",
      "import org.junit.BeforeClass;\n",
      "import org.junit.Ignore;\n",
      "import org.junit.Test;\n",
      "import org.junit.experimental.categories.Category;\n",
      "\n",
      "@Category(IntegrationTest.class)\n",
      "public class MulticolContainerTest extends ExtendedITextTest {\n",
      "    public static final String SOURCE_FOLDER = \"./src/test/resources/com/itextpdf/layout/MulticolContainerTest/\";\n",
      "    public static final String DESTINATION_FOLDER = \"./target/test/com/itextpdf/layout/MulticolContainerTest/\";\n",
      "\n",
      "    private static final float DEFAULT_PADDING = 40F;\n",
      "    private static final float DEFAULT_MARGIN = 100F;\n",
      "    private static final Color DEFAULT_BACKGROUND_COLOR = ColorConstants.CYAN;\n",
      "    private static final Border DEFAULT_BORDER = new SolidBorder(ColorConstants.RED, 5F);\n",
      "\n",
      "    @BeforeClass\n",
      "    public static void beforeClass() {\n",
      "        createDestinationFolder(DESTINATION_FOLDER);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void paragraphColumnContainerTest() throws IOException, InterruptedException {\n",
      "        executeTest(\"paragraphColumnContainerTest\", ctx -> {\n",
      "            ctx.setProperty(Property.COLUMN_COUNT, 3);\n",
      "            Paragraph paragraph = new Paragraph(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, \" +\n",
      "                    \"sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, \" +\n",
      "                    \"quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute \" +\n",
      "                    \"irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. \" +\n",
      "                    \"Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim \" +\n",
      "                    \"id est laborum.\");\n",
      "            ctx.add(paragraph);\n",
      "        }, false);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void divColumnContainerTest() throws IOException, InterruptedException {\n",
      "        executeTest(\"divColumnContainerTest\", ctx -> {\n",
      "            ctx.setProperty(Property.COLUMN_COUNT, 2);\n",
      "            Div div = new Div();\n",
      "            div.setProperty(Property.MARGIN_TOP, UnitValue.createPointValue(50));\n",
      "            div.setProperty(Property.BORDER, new SolidBorder(2));\n",
      "            div.setProperty(Property.PADDING_LEFT, UnitValue.createPointValue(40));\n",
      "            div.setProperty(Property.BACKGROUND, new Background(ColorConstants.LIGHT_GRAY));\n",
      "            div.setProperty(Property.WIDTH, UnitValue.createPointValue(450));\n",
      "            div.setProperty(Property.HEIGHT, UnitValue.createPointValue(500));\n",
      "            ctx.add(div);\n",
      "        }, false);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void columnedDivInsideTableTest() throws IOException, InterruptedException {\n",
      "        String outFileName = DESTINATION_FOLDER + \"columnedDivInsideTableTest.pdf\";\n",
      "        String cmpFileName = SOURCE_FOLDER + \"cmp_columnedDivInsideTableTest.pdf\";\n",
      "\n",
      "        try (Document document = new Document(new PdfDocument(new PdfWriter(outFileName)))) {\n",
      "            Table table = new Table(2);\n",
      "            Div columnContainer = new MulticolContainer();\n",
      "            columnContainer.setProperty(Property.COLUMN_COUNT, 3);\n",
      "            Paragraph paragraph = new Paragraph(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, \" +\n",
      "                    \"sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, \" +\n",
      "                    \"quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute \" +\n",
      "                    \"irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. \" +\n",
      "                    \"Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim \" +\n",
      "                    \"id est laborum.\");\n",
      "            columnContainer.add(paragraph);\n",
      "            table.addCell(columnContainer);\n",
      "            table.addCell(new Cell());\n",
      "            document.add(table);\n",
      "        }\n",
      "        Assert.assertNull(new CompareTool().compareByContent(outFileName, cmpFileName, DESTINATION_FOLDER, \"diff\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void continuousColumContainerParagraphMarginTopBottom() throws IOException, InterruptedException {\n",
      "        executeTest(\"continuousColumContainerParagraphMarginTopBottom\", ctx -> {\n",
      "            ctx.setProperty(Property.COLUMN_COUNT, 2);\n",
      "            ctx.setBackgroundColor(DEFAULT_BACKGROUND_COLOR);\n",
      "            ctx.setMarginTop(DEFAULT_MARGIN * 1.25F);\n",
      "            ctx.setMarginBottom(DEFAULT_MARGIN);\n",
      "            ctx.add(new Paragraph(PlaceHolderTextUtil.getPlaceHolderText(PlaceHolderTextBy.WORDS, 400)));\n",
      "        });\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void continuousColumContainerParagraphPaddingTopBottom() throws IOException, InterruptedException {\n",
      "        executeTest(\"continuousColumContainerPaddingTopBottom\", ctx -> {\n",
      "            ctx.setProperty(Property.COLUMN_COUNT, 3);\n",
      "            ctx.setBackgroundColor(DEFAULT_BACKGROUND_COLOR);\n",
      "            ctx.setPaddingTop(DEFAULT_PADDING);\n",
      "            ctx.setPaddingBottom(DEFAULT_PADDING * 2F);\n",
      "            ctx.add(new Paragraph(PlaceHolderTextUtil.getPlaceHolderText(PlaceHolderTextBy.WORDS, 400)));\n",
      "        });\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void continuousColumContainerParagraphBorder() throws IOException, InterruptedException {\n",
      "        executeTest(\"continuousColumContainerParagraphBorder\", ctx -> {\n",
      "            ctx.setProperty(Property.COLUMN_COUNT, 3);\n",
      "            ctx.setBackgroundColor(DEFAULT_BACKGROUND_COLOR);\n",
      "            ctx.setBorder(DEFAULT_BORDER);\n",
      "            ctx.add(new Paragraph(PlaceHolderTextUtil.getPlaceHolderText(PlaceHolderTextBy.WORDS, 400)));\n",
      "        });\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    public void continuousColumContainerParagraphAll() throws IOException, InterruptedException {\n",
      "        executeTest(\"continuousColumContainerParagraphAll\", ctx -> {\n",
      "            ctx.setProperty(Property.COLUMN_COUNT, 3);\n",
      "            ctx.setBackgroundColor(DEFAULT_BACKGROUND_COLOR);\n",
      "            ctx.setBorder(DEFAULT_BORDER);\n",
      "            ctx.setMarginTop(DEFAULT_MARGIN);\n",
      "            ctx.setPaddingTop(DEFAULT_PADDING);\n",
      "            ctx.setMarginBottom(DEFAULT_MARGIN);\n",
      "            ctx.setPaddingBottom(DEFAULT_PADDING);\n",
      "            ctx.add(new Paragraph(PlaceHolderTextUtil.getPlaceHolderText(PlaceHolderTextBy.WORDS, 300)));\n",
      "        });\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void continuousColumContainerParagraphAllChildStart() throws IOException, InterruptedException {\n",
      "        executeTest(\"continuousColumContainerParagraphAllChildStart\", ctx -> {\n",
      "            ctx.setProperty(Property.COLUMN_COUNT, 3);\n",
      "            ctx.setBackgroundColor(DEFAULT_BACKGROUND_COLOR);\n",
      "            ctx.setBorder(DEFAULT_BORDER);\n",
      "            ctx.setMarginTop(DEFAULT_MARGIN);\n",
      "            ctx.setPaddingTop(DEFAULT_PADDING);\n",
      "            ctx.setMarginBottom(DEFAULT_MARGIN);\n",
      "            ctx.setPaddingBottom(DEFAULT_PADDING);\n",
      "            Paragraph paragraph = new Paragraph(PlaceHolderTextUtil.getPlaceHolderText(PlaceHolderTextBy.WORDS, 300));\n",
      "            paragraph.setBorder(new SolidBorder(ColorConstants.RED, 2));\n",
      "            paragraph.setMarginTop(200);\n",
      "            paragraph.setPaddingTop(40);\n",
      "            paragraph.setBackgroundColor(ColorConstants.PINK);\n",
      "            ctx.add(paragraph);\n",
      "        });\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void continuousColumContainerParagraphAllChildEnd() throws IOException, InterruptedException {\n",
      "        executeTest(\"continuousColumContainerParagraphAllChildEnd\", ctx -> {\n",
      "            ctx.setProperty(Property.COLUMN_COUNT, 3);\n",
      "            ctx.setBackgroundColor(DEFAULT_BACKGROUND_COLOR);\n",
      "            ctx.setBorder(DEFAULT_BORDER);\n",
      "            ctx.setMarginTop(DEFAULT_MARGIN);\n",
      "            ctx.setPaddingTop(DEFAULT_PADDING);\n",
      "            ctx.setMarginBottom(DEFAULT_MARGIN);\n",
      "            ctx.setPaddingBottom(DEFAULT_PADDING);\n",
      "            Paragraph paragraph = new Paragraph(PlaceHolderTextUtil.getPlaceHolderText(PlaceHolderTextBy.WORDS, 300));\n",
      "            paragraph.setBorder(new SolidBorder(ColorConstants.RED, 2));\n",
      "            paragraph.setMarginBottom(200);\n",
      "            paragraph.setPaddingBottom(40);\n",
      "            paragraph.setBackgroundColor(ColorConstants.PINK);\n",
      "            ctx.add(paragraph);\n",
      "        });\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void continuousColumContainerParagraphOverflowShouldShow() throws IOException, InterruptedException {\n",
      "        executeTest(\"continuousColumContainerParagraphOverflowShouldShow\", ctx -> {\n",
      "            ctx.setProperty(Property.COLUMN_COUNT, 3);\n",
      "            ctx.setBackgroundColor(DEFAULT_BACKGROUND_COLOR);\n",
      "            ctx.setBorder(DEFAULT_BORDER);\n",
      "            ctx.setMarginTop(DEFAULT_MARGIN);\n",
      "            ctx.setPaddingTop(DEFAULT_PADDING);\n",
      "            ctx.setMarginBottom(DEFAULT_MARGIN);\n",
      "            ctx.setPaddingBottom(DEFAULT_PADDING);\n",
      "            ctx.add(new Paragraph(PlaceHolderTextUtil.getPlaceHolderText(PlaceHolderTextBy.WORDS, 8000)));\n",
      "        });\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void extraLargeColumnParagraphTest() throws IOException, InterruptedException {\n",
      "        executeTest(\"extraLargeColumnParagraphTest\", ctx -> {\n",
      "            ctx.setProperty(Property.COLUMN_COUNT, 3);\n",
      "            ctx.setBackgroundColor(DEFAULT_BACKGROUND_COLOR);\n",
      "            ctx.setBorder(DEFAULT_BORDER);\n",
      "            ctx.setMarginTop(DEFAULT_MARGIN);\n",
      "            ctx.setPaddingTop(DEFAULT_PADDING);\n",
      "            ctx.setMarginBottom(DEFAULT_MARGIN);\n",
      "            ctx.setPaddingBottom(DEFAULT_PADDING);\n",
      "            ctx.add(new Paragraph(PlaceHolderTextUtil.getPlaceHolderText(PlaceHolderTextBy.WORDS, 15000)));\n",
      "        });\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void largeColumnParagraphWithMarginTest() throws IOException, InterruptedException {\n",
      "        executeTest(\"largeColumnParagraphWithMarginTest\", ctx -> {\n",
      "            ctx.setProperty(Property.COLUMN_COUNT, 3);\n",
      "            ctx.setBackgroundColor(DEFAULT_BACKGROUND_COLOR);\n",
      "            ctx.setMarginTop(DEFAULT_MARGIN);\n",
      "            ctx.setMarginBottom(DEFAULT_MARGIN);\n",
      "            ctx.add(new Paragraph(PlaceHolderTextUtil.getPlaceHolderText(PlaceHolderTextBy.WORDS, 8000)));\n",
      "        });\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void largeColumnParagraphWithPaddingTest() throws IOException, InterruptedException {\n",
      "        executeTest(\"largeColumnParagraphWithPaddingTest\", ctx -> {\n",
      "            ctx.setProperty(Property.COLUMN_COUNT, 3);\n",
      "            ctx.setBackgroundColor(DEFAULT_BACKGROUND_COLOR);\n",
      "            ctx.setPaddingTop(DEFAULT_PADDING);\n",
      "            ctx.setPaddingBottom(DEFAULT_PADDING);\n",
      "            ctx.add(new Paragraph(PlaceHolderTextUtil.getPlaceHolderText(PlaceHolderTextBy.WORDS, 8000)));\n",
      "        });\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void largeColumnParagraphWithBorderTest() throws IOException, InterruptedException {\n",
      "        executeTest(\"largeColumnParagraphWithBorderTest\", ctx -> {\n",
      "            ctx.setProperty(Property.COLUMN_COUNT, 3);\n",
      "            ctx.setBackgroundColor(DEFAULT_BACKGROUND_COLOR);\n",
      "            ctx.setBorder(new SolidBorder(ColorConstants.GREEN, 50));\n",
      "            ctx.add(new Paragraph(PlaceHolderTextUtil.getPlaceHolderText(PlaceHolderTextBy.WORDS, 8000)));\n",
      "        });\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void continuousColumContainerMultipleElementsMarginTop() throws IOException, InterruptedException {\n",
      "        executeTest(\"continuousColumContainerMultipleElementsMarginTop\", ctx -> {\n",
      "            ctx.setProperty(Property.COLUMN_COUNT, 3);\n",
      "            ctx.setBackgroundColor(DEFAULT_BACKGROUND_COLOR);\n",
      "            Div pseudoContainer = new Div();\n",
      "            for (int i = 0; i < 30; i++) {\n",
      "                pseudoContainer.add(new Paragraph(\"\" + i));\n",
      "            }\n",
      "            ctx.setMarginTop(DEFAULT_MARGIN);\n",
      "            ctx.add(pseudoContainer);\n",
      "        });\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void continuousColumContainerMultipleElementsMarginBottom() throws IOException, InterruptedException {\n",
      "        executeTest(\"continuousColumContainerMultipleElementsMarginBottom\", ctx -> {\n",
      "            ctx.setProperty(Property.COLUMN_COUNT, 3);\n",
      "            ctx.setBackgroundColor(DEFAULT_BACKGROUND_COLOR);\n",
      "            Div pseudoContainer = new Div();\n",
      "            pseudoContainer.setBackgroundColor(ColorConstants.YELLOW);\n",
      "            for (int i = 0; i < 30; i++) {\n",
      "                pseudoContainer.add(new Paragraph(\"\" + i));\n",
      "            }\n",
      "            ctx.setMarginBottom(30);\n",
      "            ctx.add(pseudoContainer);\n",
      "        });\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void continuousColumContainerInnerBackgroundColorAndBorder() throws IOException, InterruptedException {\n",
      "        executeTest(\"continuousColumContainerInnerBackgroundColor\", ctx -> {\n",
      "            ctx.setProperty(Property.COLUMN_COUNT, 3);\n",
      "            ctx.setBorder(new SolidBorder(ColorConstants.GREEN, 2));\n",
      "            ctx.setBackgroundColor(DEFAULT_BACKGROUND_COLOR);\n",
      "            ctx.add(new Paragraph(PlaceHolderTextUtil.getPlaceHolderText(PlaceHolderTextBy.WORDS, 400))\n",
      "                    .setBackgroundColor(ColorConstants.YELLOW)\n",
      "                    .setMarginTop(DEFAULT_MARGIN)\n",
      "                    .setBorder(new SolidBorder(ColorConstants.RED, 2))\n",
      "            );\n",
      "            ctx.setMarginBottom(DEFAULT_MARGIN);\n",
      "        });\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    public void continuousColumContainerMultipleElementsPaddingTop() throws IOException, InterruptedException {\n",
      "        executeTest(\"continuousColumContainerMultipleElementsPaddingTop\", ctx -> {\n",
      "            ctx.setProperty(Property.COLUMN_COUNT, 3);\n",
      "            ctx.setBackgroundColor(DEFAULT_BACKGROUND_COLOR);\n",
      "            Div pseudoContainer = new Div();\n",
      "            for (int i = 0; i < 30; i++) {\n",
      "                pseudoContainer.add(new Paragraph(\"\" + i));\n",
      "            }\n",
      "            ctx.setPaddingTop(DEFAULT_PADDING);\n",
      "            ctx.add(pseudoContainer);\n",
      "        });\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void continuousColumContainerMultipleElementsPaddingBottom() throws IOException, InterruptedException {\n",
      "        executeTest(\"continuousColumContainerMultipleElementsPaddingBottom\", ctx -> {\n",
      "            ctx.setProperty(Property.COLUMN_COUNT, 3);\n",
      "            ctx.setBackgroundColor(DEFAULT_BACKGROUND_COLOR);\n",
      "            Div pseudoContainer = new Div();\n",
      "            for (int i = 0; i < 30; i++) {\n",
      "                pseudoContainer.add(new Paragraph(\"\" + i));\n",
      "            }\n",
      "            ctx.setPaddingBottom(DEFAULT_PADDING);\n",
      "            ctx.add(pseudoContainer);\n",
      "        });\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void continuousColumContainerMultipleElementsBorder() throws IOException, InterruptedException {\n",
      "        executeTest(\"continuousColumContainerMultipleElementsBorder\", ctx -> {\n",
      "            ctx.setProperty(Property.COLUMN_COUNT, 3);\n",
      "            ctx.setBackgroundColor(DEFAULT_BACKGROUND_COLOR);\n",
      "            Div pseudoContainer = new Div();\n",
      "            for (int i = 0; i < 30; i++) {\n",
      "                pseudoContainer.add(new Paragraph(\"\" + i));\n",
      "            }\n",
      "            ctx.setBorder(DEFAULT_BORDER);\n",
      "            ctx.add(pseudoContainer);\n",
      "        });\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    @LogMessages(messages = {\n",
      "            @LogMessage(messageTemplate = LayoutLogMessageConstant.ELEMENT_DOES_NOT_FIT_AREA, logLevel =\n",
      "                    LogLevelConstants.WARN)})\n",
      "    public void multicolElementWithKeepTogetherTest() throws IOException, InterruptedException {\n",
      "        executeTest(\"multicolElementWithKeepTogether\", ctx -> {\n",
      "            ctx.setProperty(Property.COLUMN_COUNT, 3);\n",
      "            ctx.setBackgroundColor(DEFAULT_BACKGROUND_COLOR);\n",
      "            Div pseudoContainer = new Div();\n",
      "            for (int i = 0; i < 30; i++) {\n",
      "                pseudoContainer.add(new Paragraph(\"\" + i));\n",
      "            }\n",
      "            ctx.setProperty(Property.KEEP_TOGETHER, true);\n",
      "            ctx.add(pseudoContainer);\n",
      "        });\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    @LogMessages(messages = {\n",
      "            @LogMessage(messageTemplate = LayoutLogMessageConstant.ELEMENT_DOES_NOT_FIT_AREA, logLevel =\n",
      "                    LogLevelConstants.WARN)})\n",
      "    public void allChildrenOfMulticolElementWithKeepTogetherTest() throws IOException, InterruptedException {\n",
      "        executeTest(\"allChildrenOfMulticolElementWithKeepTogether\", ctx -> {\n",
      "            ctx.setProperty(Property.COLUMN_COUNT, 3);\n",
      "            ctx.setBackgroundColor(DEFAULT_BACKGROUND_COLOR);\n",
      "            Div pseudoContainer = new Div();\n",
      "            for (int i = 0; i < 30; i++) {\n",
      "                pseudoContainer.add(new Paragraph(\"\" + i));\n",
      "            }\n",
      "            pseudoContainer.setProperty(Property.KEEP_TOGETHER, true);\n",
      "            ctx.add(pseudoContainer);\n",
      "        });\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void childOfMulticolElementWithKeepTogetherTest() throws IOException, InterruptedException {\n",
      "        executeTest(\"childOfMulticolElementWithKeepTogether\", ctx -> {\n",
      "            ctx.setProperty(Property.COLUMN_COUNT, 3);\n",
      "            ctx.setBackgroundColor(DEFAULT_BACKGROUND_COLOR);\n",
      "            Div pseudoContainer = new Div();\n",
      "            for (int i = 0; i < 7; i++) {\n",
      "                pseudoContainer.add(new Paragraph(\"\" + i));\n",
      "            }\n",
      "            Div temp = new Div();\n",
      "            temp.add(new Paragraph(\"7 keep\"));\n",
      "            temp.add(new Paragraph(\"8 keep\"));\n",
      "            temp.add(new Paragraph(\"9 keep\"));\n",
      "            temp.add(new Paragraph(\"10 keep\"));\n",
      "            temp.add(new Paragraph(\"11 keep\"));\n",
      "            temp.setProperty(Property.KEEP_TOGETHER, true);\n",
      "            pseudoContainer.add(temp);\n",
      "\n",
      "            for (int i = 12; i < 30; i++) {\n",
      "                pseudoContainer.add(new Paragraph(\"\" + i));\n",
      "            }\n",
      "            ctx.add(pseudoContainer);\n",
      "        });\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void childrenOfMulticolElementWithKeepTogetherTest() throws IOException, InterruptedException {\n",
      "        executeTest(\"childrenOfMulticolElementWithKeepTogether\", ctx -> {\n",
      "            ctx.setProperty(Property.COLUMN_COUNT, 3);\n",
      "            ctx.setBackgroundColor(DEFAULT_BACKGROUND_COLOR);\n",
      "            Div pseudoContainer = new Div();\n",
      "            for (int i = 0; i < 7; i++) {\n",
      "                pseudoContainer.add(new Paragraph(\"\" + i));\n",
      "            }\n",
      "            Div temp = new Div();\n",
      "            temp.add(new Paragraph(\"7 keep\"));\n",
      "            temp.add(new Paragraph(\"8 keep\"));\n",
      "            temp.add(new Paragraph(\"9 keep\"));\n",
      "            temp.add(new Paragraph(\"10 keep\"));\n",
      "            temp.add(new Paragraph(\"11 keep\"));\n",
      "            temp.setProperty(Property.KEEP_TOGETHER, Boolean.TRUE);\n",
      "            pseudoContainer.add(temp);\n",
      "\n",
      "            for (int i = 12; i < 19; i++) {\n",
      "                pseudoContainer.add(new Paragraph(\"\" + i));\n",
      "            }\n",
      "            temp = new Div();\n",
      "            temp.add(new Paragraph(\"19 keep\"));\n",
      "            temp.add(new Paragraph(\"20 keep\"));\n",
      "            temp.add(new Paragraph(\"21 keep\"));\n",
      "            temp.add(new Paragraph(\"22 keep\"));\n",
      "            temp.add(new Paragraph(\"23 keep\"));\n",
      "            temp.add(new Paragraph(\"24 keep\"));\n",
      "            temp.add(new Paragraph(\"25 keep\"));\n",
      "            temp.setProperty(Property.KEEP_TOGETHER, Boolean.TRUE);\n",
      "            pseudoContainer.add(temp);\n",
      "\n",
      "            for (int i = 26; i < 30; i++) {\n",
      "                pseudoContainer.add(new Paragraph(\"\" + i));\n",
      "            }\n",
      "            ctx.add(pseudoContainer);\n",
      "        });\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void singleParagraphMultiPageTest() throws IOException, InterruptedException {\n",
      "        String outFileName = DESTINATION_FOLDER + \"singleParagraphMultiPageTest.pdf\";\n",
      "        String cmpFileName = SOURCE_FOLDER + \"cmp_singleParagraphMultiPageTest.pdf\";\n",
      "\n",
      "        try (Document document = new Document(new PdfDocument(new PdfWriter(outFileName)))) {\n",
      "            document.add(createFirstPageFiller());\n",
      "            Div columnContainer = new MulticolContainer();\n",
      "            columnContainer.setProperty(Property.COLUMN_COUNT, 3);\n",
      "\n",
      "            Paragraph paragraph = new Paragraph(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, \" +\n",
      "                    \"sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, \" +\n",
      "                    \"quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute \" +\n",
      "                    \"irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. \" +\n",
      "                    \"Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim \" +\n",
      "                    \"id est laborum.\");\n",
      "\n",
      "            columnContainer.add(paragraph);\n",
      "\n",
      "            document.add(columnContainer);\n",
      "        }\n",
      "        Assert.assertNull(new CompareTool().compareByContent(outFileName, cmpFileName, DESTINATION_FOLDER, \"diff\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void singleParagraphWithBorderMultiPageTest() throws IOException, InterruptedException {\n",
      "        String outFileName = DESTINATION_FOLDER + \"singleParagraphWithBorderMultiPageTest.pdf\";\n",
      "        String cmpFileName = SOURCE_FOLDER + \"cmp_singleParagraphWithBorderMultiPageTest.pdf\";\n",
      "\n",
      "        try (Document document = new Document(new PdfDocument(new PdfWriter(outFileName)))) {\n",
      "            document.add(createFirstPageFiller());\n",
      "            Div columnContainer = new MulticolContainer();\n",
      "            columnContainer.setProperty(Property.COLUMN_COUNT, 3);\n",
      "\n",
      "            Paragraph paragraph = new Paragraph(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, \" +\n",
      "                    \"sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, \" +\n",
      "                    \"quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute \" +\n",
      "                    \"irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. \" +\n",
      "                    \"Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim \" +\n",
      "                    \"id est laborum.\");\n",
      "            paragraph.setBorder(new SolidBorder(2));\n",
      "\n",
      "            columnContainer.setBorder(new SolidBorder(ColorConstants.RED, 3));\n",
      "            columnContainer.add(paragraph);\n",
      "\n",
      "            document.add(columnContainer);\n",
      "        }\n",
      "        Assert.assertNull(new CompareTool().compareByContent(outFileName, cmpFileName, DESTINATION_FOLDER, \"diff\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void paragraphWithImagesMultiPageTest() throws IOException, InterruptedException {\n",
      "        String outFileName = DESTINATION_FOLDER + \"paragraphWithImagesMultiPageTest.pdf\";\n",
      "        String cmpFileName = SOURCE_FOLDER + \"cmp_paragraphWithImagesMultiPageTest.pdf\";\n",
      "\n",
      "        try (Document document = new Document(new PdfDocument(new PdfWriter(outFileName)))) {\n",
      "            document.add(createFirstPageFiller());\n",
      "            Div columnContainer = new MulticolContainer();\n",
      "            columnContainer.setProperty(Property.COLUMN_COUNT, 3);\n",
      "\n",
      "            Paragraph paragraph = new Paragraph(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, \" +\n",
      "                    \"sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, \");\n",
      "            paragraph.setBorder(new SolidBorder(2));\n",
      "            PdfImageXObject xObject = new PdfImageXObject(\n",
      "                    ImageDataFactory.createPng(UrlUtil.toURL(SOURCE_FOLDER + \"placeholder_100x100.png\")));\n",
      "            Image image1 = new Image(xObject, 20);\n",
      "            Image image2 = new Image(xObject, 150);\n",
      "            Image image3 = new Image(xObject, 100).setHorizontalAlignment(HorizontalAlignment.RIGHT);\n",
      "\n",
      "            columnContainer.setBorder(new SolidBorder(ColorConstants.RED, 3));\n",
      "            Div div = new Div();\n",
      "            div.add(paragraph);\n",
      "            div.add(image1);\n",
      "            div.add(image2);\n",
      "            div.add(image3);\n",
      "            columnContainer.add(div);\n",
      "\n",
      "            document.add(columnContainer);\n",
      "        }\n",
      "        Assert.assertNull(new CompareTool().compareByContent(outFileName, cmpFileName, DESTINATION_FOLDER, \"diff\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void overflowImageBetweenParagraphsTest() throws IOException, InterruptedException {\n",
      "        executeTest(\"overflowImageBetweenParagraphsTest\", ctx -> {\n",
      "            ctx.setProperty(Property.COLUMN_COUNT, 3);\n",
      "\n",
      "            Paragraph paragraph = new Paragraph(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, \" +\n",
      "                    \"sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, \");\n",
      "            paragraph.setBorder(new SolidBorder(2));\n",
      "            Image image = createImage(SOURCE_FOLDER + \"placeholder_100x100.png\", 200);\n",
      "            Paragraph paragraph2 = new Paragraph(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, \" +\n",
      "                    \"sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, \");\n",
      "            paragraph2.setBorder(new SolidBorder(ColorConstants.BLUE, 2));\n",
      "\n",
      "            ctx.setBorder(new SolidBorder(ColorConstants.RED, 3));\n",
      "            Div div = new Div();\n",
      "            div.add(paragraph);\n",
      "            div.add(image);\n",
      "            div.add(paragraph2);\n",
      "            ctx.add(div);\n",
      "        }, false);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void overflowingImageWithParagraphTest() throws IOException, InterruptedException {\n",
      "        executeTest(\"overflowingImageWithParagraphMultipageTest\", ctx -> {\n",
      "            ctx.setProperty(Property.COLUMN_COUNT, 3);\n",
      "\n",
      "            Paragraph paragraph = new Paragraph(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, \" +\n",
      "                    \"sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, \");\n",
      "            paragraph.setBorder(new SolidBorder(2));\n",
      "            Image image = createImage(SOURCE_FOLDER + \"placeholder_100x100.png\", 200);\n",
      "\n",
      "            ctx.setBorder(new SolidBorder(ColorConstants.RED, 3));\n",
      "            Div div = new Div();\n",
      "            div.add(image);\n",
      "            div.add(paragraph);\n",
      "            ctx.add(div);\n",
      "        }, false);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void overflowImageWithForcedPlacementTest() throws IOException, InterruptedException {\n",
      "        executeTest(\"overflowImageWithForcedPlacementTest\", ctx -> {\n",
      "            ctx.setProperty(Property.COLUMN_COUNT, 3);\n",
      "\n",
      "            Paragraph paragraph = new Paragraph(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, \" +\n",
      "                    \"sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, \");\n",
      "            paragraph.setBorder(new SolidBorder(2));\n",
      "            Image image = createImage(SOURCE_FOLDER + \"placeholder_100x100.png\", 200);\n",
      "            image.setProperty(Property.FORCED_PLACEMENT, Boolean.TRUE);\n",
      "            Paragraph paragraph2 = new Paragraph(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, \" +\n",
      "                    \"sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, \");\n",
      "            paragraph2.setBorder(new SolidBorder(ColorConstants.BLUE, 2));\n",
      "\n",
      "            ctx.setBorder(new SolidBorder(ColorConstants.RED, 3));\n",
      "            Div div = new Div();\n",
      "            div.add(paragraph);\n",
      "            div.add(image);\n",
      "            div.add(paragraph2);\n",
      "            ctx.add(div);\n",
      "        }, false);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void imageForcedPlacementAndKeepTogetherTest() throws IOException, InterruptedException {\n",
      "        executeTest(\"imageForcedPlacementAndKeepTogetherTest\", ctx -> {\n",
      "            ctx.setProperty(Property.COLUMN_COUNT, 3);\n",
      "\n",
      "            Paragraph paragraph = new Paragraph(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, \" +\n",
      "                    \"sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, \");\n",
      "            paragraph.setBorder(new SolidBorder(ColorConstants.GREEN, 2));\n",
      "\n",
      "            Image image = createImage(SOURCE_FOLDER + \"placeholder_100x100.png\", 200);\n",
      "            image.setProperty(Property.FORCED_PLACEMENT, Boolean.TRUE);\n",
      "            Paragraph paragraph2 = new Paragraph(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, \" +\n",
      "                    \"sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, \");\n",
      "            paragraph2.setBorder(new SolidBorder(ColorConstants.BLUE, 2));\n",
      "            Div child = new Div();\n",
      "            child.setBorder(new SolidBorder(ColorConstants.BLACK, 2));\n",
      "            child.setKeepTogether(true);\n",
      "            child.add(image);\n",
      "            child.add(paragraph2);\n",
      "\n",
      "            ctx.setBorder(new SolidBorder(ColorConstants.RED, 3));\n",
      "            Div div = new Div();\n",
      "            div.add(paragraph);\n",
      "            div.add(child);\n",
      "            ctx.add(div);\n",
      "        }, false);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    @LogMessages(messages = {@LogMessage(messageTemplate = LayoutLogMessageConstant.ELEMENT_DOES_NOT_FIT_AREA)})\n",
      "    public void imageBiggerThanPageTest() throws IOException, InterruptedException {\n",
      "        executeTest(\"imageBiggerThanPageTest\", ctx -> {\n",
      "            ctx.setProperty(Property.COLUMN_COUNT, 3);\n",
      "\n",
      "            Paragraph paragraph = new Paragraph(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, \" +\n",
      "                    \"sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, \");\n",
      "            paragraph.setBorder(new SolidBorder(2));\n",
      "            Image image = createImage(SOURCE_FOLDER + \"placeholder_100x100.png\", 800);\n",
      "\n",
      "            ctx.setBorder(new SolidBorder(ColorConstants.RED, 3));\n",
      "            Div div = new Div();\n",
      "            div.add(image);\n",
      "            div.add(paragraph);\n",
      "            ctx.add(div);\n",
      "        }, false);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void overflowingDivWithParagraphMultipageTest() throws IOException, InterruptedException {\n",
      "        String outFileName = DESTINATION_FOLDER + \"overflowingDivWithParagraphMultipageTest.pdf\";\n",
      "        String cmpFileName = SOURCE_FOLDER + \"cmp_overflowingDivWithParagraphMultipageTest.pdf\";\n",
      "\n",
      "        try (Document document = new Document(new PdfDocument(new PdfWriter(outFileName)))) {\n",
      "            document.add(createFirstPageFiller());\n",
      "            Div columnContainer = new MulticolContainer();\n",
      "            columnContainer.setProperty(Property.COLUMN_COUNT, 3);\n",
      "\n",
      "            Paragraph paragraph = new Paragraph(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, \" +\n",
      "                    \"sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, \");\n",
      "            paragraph.setBorder(new SolidBorder(2));\n",
      "            Div columnDiv = new Div();\n",
      "            columnDiv.setProperty(Property.BORDER, new SolidBorder(1));\n",
      "            columnDiv.setProperty(Property.BACKGROUND, new Background(ColorConstants.BLUE));\n",
      "            columnDiv.setProperty(Property.KEEP_TOGETHER, Boolean.TRUE);\n",
      "            columnDiv.setProperty(Property.WIDTH, UnitValue.createPointValue(50));\n",
      "            columnDiv.setProperty(Property.HEIGHT, UnitValue.createPointValue(150));\n",
      "\n",
      "            columnContainer.setBorder(new SolidBorder(ColorConstants.RED, 3));\n",
      "            Div div = new Div();\n",
      "            div.add(paragraph);\n",
      "            div.add(columnDiv);\n",
      "            columnContainer.add(div);\n",
      "\n",
      "            document.add(columnContainer);\n",
      "        }\n",
      "        Assert.assertNull(new CompareTool().compareByContent(outFileName, cmpFileName, DESTINATION_FOLDER, \"diff\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void marginCantFitCurrentPageTest() throws IOException, InterruptedException {\n",
      "        String outFileName = DESTINATION_FOLDER + \"marginCantFitCurrentPageTest.pdf\";\n",
      "        String cmpFileName = SOURCE_FOLDER + \"cmp_marginCantFitCurrentPageTest.pdf\";\n",
      "\n",
      "        try (Document document = new Document(new PdfDocument(new PdfWriter(outFileName)))) {\n",
      "            document.add(createFirstPageFiller());\n",
      "            Div columnContainer = new MulticolContainer();\n",
      "            columnContainer.setProperty(Property.COLUMN_COUNT, 3);\n",
      "\n",
      "            Paragraph paragraph = new Paragraph(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, \" +\n",
      "                    \"sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, \");\n",
      "            paragraph.setBorder(new SolidBorder(2));\n",
      "            Div columnDiv = new Div();\n",
      "            columnDiv.setProperty(Property.BORDER, new SolidBorder(1));\n",
      "            columnDiv.setProperty(Property.BACKGROUND, new Background(ColorConstants.BLUE));\n",
      "            columnDiv.setProperty(Property.KEEP_TOGETHER, Boolean.TRUE);\n",
      "            columnDiv.setProperty(Property.MARGIN_BOTTOM, UnitValue.createPointValue(40));\n",
      "            columnDiv.setProperty(Property.WIDTH, UnitValue.createPointValue(60));\n",
      "            columnDiv.setProperty(Property.HEIGHT, UnitValue.createPointValue(60));\n",
      "\n",
      "            columnContainer.setBorder(new SolidBorder(ColorConstants.RED, 3));\n",
      "            Div div = new Div();\n",
      "            div.add(columnDiv);\n",
      "            div.add(paragraph);\n",
      "            columnContainer.add(div);\n",
      "\n",
      "            document.add(columnContainer);\n",
      "        }\n",
      "        Assert.assertNull(new CompareTool().compareByContent(outFileName, cmpFileName, DESTINATION_FOLDER, \"diff\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void paddingCantFitCurrentPageTest() throws IOException, InterruptedException {\n",
      "        String outFileName = DESTINATION_FOLDER + \"paddingCantFitCurrentPageTest.pdf\";\n",
      "        String cmpFileName = SOURCE_FOLDER + \"cmp_paddingCantFitCurrentPageTest.pdf\";\n",
      "\n",
      "        try (Document document = new Document(new PdfDocument(new PdfWriter(outFileName)))) {\n",
      "            document.add(createFirstPageFiller());\n",
      "            Div columnContainer = new MulticolContainer();\n",
      "            columnContainer.setProperty(Property.COLUMN_COUNT, 3);\n",
      "\n",
      "            Paragraph paragraph = new Paragraph(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, \" +\n",
      "                    \"sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, \");\n",
      "            paragraph.setBorder(new SolidBorder(2));\n",
      "            Div columnDiv = new Div();\n",
      "            columnDiv.setProperty(Property.BORDER, new SolidBorder(1));\n",
      "            columnDiv.setProperty(Property.BACKGROUND, new Background(ColorConstants.BLUE));\n",
      "            columnDiv.setProperty(Property.KEEP_TOGETHER, Boolean.TRUE);\n",
      "            columnDiv.setProperty(Property.PADDING_BOTTOM, UnitValue.createPointValue(40));\n",
      "            columnDiv.setProperty(Property.WIDTH, UnitValue.createPointValue(60));\n",
      "            columnDiv.setProperty(Property.HEIGHT, UnitValue.createPointValue(60));\n",
      "\n",
      "            columnContainer.setBorder(new SolidBorder(ColorConstants.RED, 3));\n",
      "            Div div = new Div();\n",
      "            div.add(columnDiv);\n",
      "            div.add(paragraph);\n",
      "            columnContainer.add(div);\n",
      "\n",
      "            document.add(columnContainer);\n",
      "        }\n",
      "        Assert.assertNull(new CompareTool().compareByContent(outFileName, cmpFileName, DESTINATION_FOLDER, \"diff\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    @LogMessages(messages = {@LogMessage(messageTemplate = LayoutLogMessageConstant.ELEMENT_DOES_NOT_FIT_AREA)})\n",
      "    public void keepTogetherBlockingLayoutTest() throws IOException, InterruptedException {\n",
      "        String outFileName = DESTINATION_FOLDER + \"keepTogetherBlockingLayoutTest.pdf\";\n",
      "        String cmpFileName = SOURCE_FOLDER + \"cmp_keepTogetherBlockingLayoutTest.pdf\";\n",
      "\n",
      "        try (Document document = new Document(new PdfDocument(new PdfWriter(outFileName)))) {\n",
      "            document.add(createFirstPageFiller());\n",
      "            Div columnContainer = new MulticolContainer();\n",
      "            columnContainer.setProperty(Property.COLUMN_COUNT, 3);\n",
      "\n",
      "            Paragraph paragraph = new Paragraph(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, \" +\n",
      "                    \"sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, \" +\n",
      "                    \"quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute \" +\n",
      "                    \"irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. \" +\n",
      "                    \"Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim \" +\n",
      "                    \"id est laborum.\");\n",
      "            paragraph.setBorder(new SolidBorder(2));\n",
      "            paragraph.setFontSize(20);\n",
      "            paragraph.setProperty(Property.KEEP_TOGETHER, Boolean.TRUE);\n",
      "\n",
      "            columnContainer.setBorder(new SolidBorder(ColorConstants.RED, 3));\n",
      "            Div div = new Div();\n",
      "            div.add(paragraph);\n",
      "            columnContainer.add(div);\n",
      "\n",
      "            document.add(columnContainer);\n",
      "        }\n",
      "        Assert.assertNull(new CompareTool().compareByContent(outFileName, cmpFileName, DESTINATION_FOLDER, \"diff\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void continuousColumContainerSetWidth() throws IOException, InterruptedException {\n",
      "        executeTest(\"continuousColumContainerSetWidth\", ctx -> {\n",
      "            ctx.setProperty(Property.COLUMN_COUNT, 3);\n",
      "            ctx.setWidth(300);\n",
      "            ctx.setBackgroundColor(DEFAULT_BACKGROUND_COLOR);\n",
      "            Div pseudoContainer = new Div();\n",
      "            for (int i = 0; i < 30; i++) {\n",
      "                pseudoContainer.add(new Paragraph(\"\" + i));\n",
      "            }\n",
      "            ctx.setBorder(DEFAULT_BORDER);\n",
      "            ctx.add(pseudoContainer);\n",
      "        });\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void continuousColumContainerSetHeightBigger() throws IOException, InterruptedException {\n",
      "        executeTest(\"continuousColumContainerSetHeightBigger\", ctx -> {\n",
      "            ctx.setProperty(Property.COLUMN_COUNT, 3);\n",
      "            ctx.setHeight(600);\n",
      "            ctx.setBackgroundColor(DEFAULT_BACKGROUND_COLOR);\n",
      "            ctx.add(new Paragraph(PlaceHolderTextUtil.getPlaceHolderText(PlaceHolderTextBy.WORDS, 400)));\n",
      "            ctx.setBorder(DEFAULT_BORDER);\n",
      "        });\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void widthBorderTest() throws IOException, InterruptedException {\n",
      "        executeTest(\"widthBorderTest\", ctx -> {\n",
      "            ctx.setProperty(Property.COLUMN_COUNT, 3);\n",
      "            ctx.setBackgroundColor(DEFAULT_BACKGROUND_COLOR);\n",
      "            ctx.setBorder(new SolidBorder(ColorConstants.RED, 20));\n",
      "            ctx.setWidth(300);\n",
      "            ctx.add(new Paragraph(PlaceHolderTextUtil.getPlaceHolderText(PlaceHolderTextBy.WORDS, 100)));\n",
      "        });\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void heightBorderTest() throws IOException, InterruptedException {\n",
      "        executeTest(\"heightBorderTest\", ctx -> {\n",
      "            ctx.setProperty(Property.COLUMN_COUNT, 3);\n",
      "            //content should be clipped\n",
      "            ctx.setHeight(150);\n",
      "            ctx.setBackgroundColor(DEFAULT_BACKGROUND_COLOR);\n",
      "            ctx.add(new Paragraph(PlaceHolderTextUtil.getPlaceHolderText(PlaceHolderTextBy.WORDS, 400)));\n",
      "            ctx.setBorder(new SolidBorder(ColorConstants.RED, 20));\n",
      "        });\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void widthPaddingTest() throws IOException, InterruptedException {\n",
      "        executeTest(\"widthPaddingTest\", ctx -> {\n",
      "            ctx.setProperty(Property.COLUMN_COUNT, 3);\n",
      "            ctx.setBackgroundColor(DEFAULT_BACKGROUND_COLOR);\n",
      "            ctx.setPadding(DEFAULT_PADDING);\n",
      "            ctx.setBorder(DEFAULT_BORDER);\n",
      "            ctx.setWidth(400);\n",
      "            ctx.add(new Paragraph(PlaceHolderTextUtil.getPlaceHolderText(PlaceHolderTextBy.WORDS, 100)));\n",
      "        });\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void heightPaddingTest() throws IOException, InterruptedException {\n",
      "        executeTest(\"heightPaddingTest\", ctx -> {\n",
      "            ctx.setProperty(Property.COLUMN_COUNT, 3);\n",
      "            //content should be clipped\n",
      "            ctx.setHeight(200);\n",
      "            ctx.setBackgroundColor(DEFAULT_BACKGROUND_COLOR);\n",
      "            ctx.add(new Paragraph(PlaceHolderTextUtil.getPlaceHolderText(PlaceHolderTextBy.WORDS, 400)));\n",
      "            ctx.setPadding(DEFAULT_PADDING);\n",
      "            ctx.setBorder(DEFAULT_BORDER);\n",
      "        });\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    public void heightMarginTest() throws IOException, InterruptedException {\n",
      "        executeTest(\"heightMarginTest\", ctx -> {\n",
      "            ctx.setProperty(Property.COLUMN_COUNT, 3);\n",
      "\n",
      "            //content should be clipped\n",
      "            ctx.setHeight(200);\n",
      "            ctx.setBackgroundColor(DEFAULT_BACKGROUND_COLOR);\n",
      "            ctx.add(new Paragraph(PlaceHolderTextUtil.getPlaceHolderText(PlaceHolderTextBy.WORDS, 400)));\n",
      "            ctx.setMargin(40);\n",
      "            ctx.setBorder(DEFAULT_BORDER);\n",
      "        });\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    public void widthMarginTest() throws IOException, InterruptedException {\n",
      "        executeTest(\"widthMarginTest\", ctx -> {\n",
      "            ctx.setProperty(Property.COLUMN_COUNT, 3);\n",
      "            ctx.setBackgroundColor(DEFAULT_BACKGROUND_COLOR);\n",
      "            ctx.setMargin(40);\n",
      "            ctx.setBorder(DEFAULT_BORDER);\n",
      "            ctx.setWidth(400);\n",
      "            ctx.add(new Paragraph(PlaceHolderTextUtil.getPlaceHolderText(PlaceHolderTextBy.WORDS, 100)));\n",
      "        });\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    public void widthHeightMarginTest() throws IOException, InterruptedException {\n",
      "        executeTest(\"widthHeightMarginTest\", ctx -> {\n",
      "            ctx.setProperty(Property.COLUMN_COUNT, 3);\n",
      "            ctx.setBackgroundColor(DEFAULT_BACKGROUND_COLOR);\n",
      "            ctx.setMargin(60);\n",
      "            ctx.setBorder(DEFAULT_BORDER);\n",
      "            ctx.setWidth(400);\n",
      "            ctx.setHeight(400);\n",
      "            ctx.add(new Paragraph(PlaceHolderTextUtil.getPlaceHolderText(PlaceHolderTextBy.WORDS, 100)));\n",
      "        });\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void minHeightTest() throws IOException, InterruptedException {\n",
      "        executeTest(\"minHeightTest\", ctx -> {\n",
      "            ctx.setProperty(Property.COLUMN_COUNT, 3);\n",
      "            ctx.setBackgroundColor(DEFAULT_BACKGROUND_COLOR);\n",
      "            ctx.setMargin(60);\n",
      "            ctx.setBorder(DEFAULT_BORDER);\n",
      "            ctx.setMinHeight(200);\n",
      "            ctx.add(new Paragraph(PlaceHolderTextUtil.getPlaceHolderText(PlaceHolderTextBy.WORDS, 10)));\n",
      "        });\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    public void maxHeightTest() throws IOException, InterruptedException {\n",
      "        executeTest(\"maxHeightTest\", ctx -> {\n",
      "            ctx.setProperty(Property.COLUMN_COUNT, 3);\n",
      "            ctx.setBackgroundColor(DEFAULT_BACKGROUND_COLOR);\n",
      "            ctx.setMargin(60);\n",
      "            ctx.setBorder(DEFAULT_BORDER);\n",
      "            ctx.setMaxHeight(200);\n",
      "            ctx.add(new Paragraph(PlaceHolderTextUtil.getPlaceHolderText(PlaceHolderTextBy.WORDS, 10)));\n",
      "        });\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void minWidth() throws IOException, InterruptedException {\n",
      "        executeTest(\"minWidth\", ctx -> {\n",
      "            ctx.setProperty(Property.COLUMN_COUNT, 3);\n",
      "            ctx.setBackgroundColor(DEFAULT_BACKGROUND_COLOR);\n",
      "            ctx.setBorder(DEFAULT_BORDER);\n",
      "            ctx.setMinWidth(200);\n",
      "            ctx.add(new Paragraph(PlaceHolderTextUtil.getPlaceHolderText(PlaceHolderTextBy.WORDS, 200)));\n",
      "        });\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void minWidthBiggerThenPage() throws IOException, InterruptedException {\n",
      "        executeTest(\"minWidthBiggerThenPage\", ctx -> {\n",
      "            ctx.setProperty(Property.COLUMN_COUNT, 3);\n",
      "            ctx.setBackgroundColor(DEFAULT_BACKGROUND_COLOR);\n",
      "            ctx.setBorder(DEFAULT_BORDER);\n",
      "            ctx.setMinWidth(2000);\n",
      "            ctx.add(new Paragraph(PlaceHolderTextUtil.getPlaceHolderText(PlaceHolderTextBy.WORDS, 200)));\n",
      "        });\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void maxWidth() throws IOException, InterruptedException {\n",
      "        executeTest(\"maxWidth\", ctx -> {\n",
      "            ctx.setProperty(Property.COLUMN_COUNT, 3);\n",
      "            ctx.setBackgroundColor(DEFAULT_BACKGROUND_COLOR);\n",
      "            ctx.setBorder(DEFAULT_BORDER);\n",
      "            ctx.setMaxWidth(200);\n",
      "            ctx.add(new Paragraph(PlaceHolderTextUtil.getPlaceHolderText(PlaceHolderTextBy.WORDS, 200)));\n",
      "        });\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    public void widthMultiPage() throws IOException, InterruptedException {\n",
      "        String testName = \"widthMultiPage\";\n",
      "        String filename = DESTINATION_FOLDER + testName + \".pdf\";\n",
      "        String cmpName = SOURCE_FOLDER + \"cmp_\" + testName + \".pdf\";\n",
      "        try (PdfDocument pdfDoc = new PdfDocument(new com.itextpdf.kernel.pdf.PdfWriter(filename))) {\n",
      "            Document doc = new Document(pdfDoc);\n",
      "\n",
      "            MulticolContainer container = new MulticolContainer();\n",
      "            container.setProperty(Property.COLUMN_COUNT, 3);\n",
      "            container.setBackgroundColor(DEFAULT_BACKGROUND_COLOR);\n",
      "            container.setBorder(DEFAULT_BORDER);\n",
      "            container.setWidth(400);\n",
      "            container.add(new Paragraph(PlaceHolderTextUtil.getPlaceHolderText(PlaceHolderTextBy.WORDS, 150)));\n",
      "            doc.add(new Paragraph(\"ELEMENT ABOVE\").setHeight(600).setBackgroundColor(ColorConstants.YELLOW));\n",
      "            doc.add(container);\n",
      "            doc.add(new Paragraph(\"ELEMENT BELOW\").setBackgroundColor(ColorConstants.YELLOW));\n",
      "        }\n",
      "        CompareTool compareTool = new CompareTool();\n",
      "        Assert.assertNull(compareTool.compareByContent(filename, cmpName, DESTINATION_FOLDER, \"diff_\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    @Ignore(\"DEVSIX-7630\")\n",
      "    public void heightMultiPage() throws IOException, InterruptedException {\n",
      "        String testName = \"heightMultiPage\";\n",
      "        String filename = DESTINATION_FOLDER + testName + \".pdf\";\n",
      "        String cmpName = SOURCE_FOLDER + \"cmp_\" + testName + \".pdf\";\n",
      "        try (PdfDocument pdfDoc = new PdfDocument(new com.itextpdf.kernel.pdf.PdfWriter(filename))) {\n",
      "            Document doc = new Document(pdfDoc);\n",
      "\n",
      "            MulticolContainer container = new MulticolContainer();\n",
      "            container.setProperty(Property.COLUMN_COUNT, 3);\n",
      "            container.setBackgroundColor(DEFAULT_BACKGROUND_COLOR);\n",
      "            container.setBorder(DEFAULT_BORDER);\n",
      "            container.setHeight(600);\n",
      "            container.add(new Paragraph(PlaceHolderTextUtil.getPlaceHolderText(PlaceHolderTextBy.WORDS, 150)));\n",
      "            doc.add(new Paragraph(\"ELEMENT ABOVE\").setHeight(600).setBackgroundColor(ColorConstants.YELLOW));\n",
      "            doc.add(container);\n",
      "            doc.add(new Paragraph(\"ELEMENT BELOW\").setBackgroundColor(ColorConstants.YELLOW));\n",
      "        }\n",
      "        CompareTool compareTool = new CompareTool();\n",
      "        Assert.assertNull(compareTool.compareByContent(filename, cmpName, DESTINATION_FOLDER, \"diff_\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void continuousColumContainerSetHeightSmaller() throws IOException, InterruptedException {\n",
      "        executeTest(\"continuousColumContainerSetHeightSmaller\", ctx -> {\n",
      "            ctx.setProperty(Property.COLUMN_COUNT, 3);\n",
      "            //content should be clipped\n",
      "            ctx.setHeight(50);\n",
      "            ctx.setBackgroundColor(DEFAULT_BACKGROUND_COLOR);\n",
      "            ctx.add(new Paragraph(PlaceHolderTextUtil.getPlaceHolderText(PlaceHolderTextBy.WORDS, 400)));\n",
      "            ctx.setBorder(DEFAULT_BORDER);\n",
      "        });\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void paragraphWithColumnWidthTest() throws IOException, InterruptedException {\n",
      "        String outFileName = DESTINATION_FOLDER + \"paragraphWithColumnWidthTest.pdf\";\n",
      "        String cmpFileName = SOURCE_FOLDER + \"cmp_paragraphWithColumnWidthTest.pdf\";\n",
      "\n",
      "        try (Document document = new Document(new PdfDocument(new PdfWriter(outFileName)))) {\n",
      "            Div columnContainer = new MulticolContainer();\n",
      "            columnContainer.setProperty(Property.COLUMN_WIDTH, 200.0f);\n",
      "            Paragraph paragraph = createDummyParagraph();\n",
      "            columnContainer.add(paragraph);\n",
      "            document.add(columnContainer);\n",
      "        }\n",
      "        //expecting 2 columns with ~260px width each\n",
      "        Assert.assertNull(new CompareTool().compareByContent(outFileName, cmpFileName, DESTINATION_FOLDER, \"diff\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void paragraphWithColumnWidthAndColumnCountTest() throws IOException, InterruptedException {\n",
      "        String outFileName = DESTINATION_FOLDER + \"paragraphWithColumnWidthAndColumnCountTest.pdf\";\n",
      "        String cmpFileName = SOURCE_FOLDER + \"cmp_paragraphWithColumnWidthAndColumnCountTest.pdf\";\n",
      "\n",
      "        try (Document document = new Document(new PdfDocument(new PdfWriter(outFileName)))) {\n",
      "            Div columnContainer = new MulticolContainer();\n",
      "            //column width is ignored in this case, because column-count requires higher width\n",
      "            columnContainer.setProperty(Property.COLUMN_WIDTH, 100.0f);\n",
      "            columnContainer.setProperty(Property.COLUMN_COUNT, 2);\n",
      "            Paragraph paragraph = createDummyParagraph();\n",
      "            columnContainer.add(paragraph);\n",
      "            document.add(columnContainer);\n",
      "        }\n",
      "        Assert.assertNull(new CompareTool().compareByContent(outFileName, cmpFileName, DESTINATION_FOLDER, \"diff\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void paragraphWithInvalidColumnValuesTest() {\n",
      "\n",
      "        try (Document document = new Document(new PdfDocument(new PdfWriter(new ByteArrayOutputStream())))) {\n",
      "            Div columnContainer = new MulticolContainer();\n",
      "            //column width is ignored in this case, because column-count requires higher width\n",
      "            columnContainer.setProperty(Property.COLUMN_WIDTH, -30.0f);\n",
      "            columnContainer.setProperty(Property.COLUMN_COUNT, -2);\n",
      "            columnContainer.setProperty(Property.COLUMN_GAP, -20.0f);\n",
      "            Paragraph paragraph = createDummyParagraph();\n",
      "            columnContainer.add(paragraph);\n",
      "            Throwable exception = Assert.assertThrows(IllegalStateException.class, () -> document.add(columnContainer));\n",
      "            Assert.assertEquals(LayoutExceptionMessageConstant.INVALID_COLUMN_PROPERTIES, exception.getMessage());\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void paragraphWithColumnWidthAndGapTest() throws IOException, InterruptedException {\n",
      "        String outFileName = DESTINATION_FOLDER + \"paragraphWithColumnWidthAndGapTest.pdf\";\n",
      "        String cmpFileName = SOURCE_FOLDER + \"cmp_paragraphWithColumnWidthAndGapTest.pdf\";\n",
      "\n",
      "        try (Document document = new Document(new PdfDocument(new PdfWriter(outFileName)))) {\n",
      "            Div columnContainer = new MulticolContainer();\n",
      "            columnContainer.setProperty(Property.COLUMN_WIDTH, 100.0f);\n",
      "            columnContainer.setProperty(Property.COLUMN_GAP, 100.0f);\n",
      "            Paragraph paragraph = createDummyParagraph();\n",
      "            columnContainer.add(paragraph);\n",
      "            document.add(columnContainer);\n",
      "        }\n",
      "        Assert.assertNull(new CompareTool().compareByContent(outFileName, cmpFileName, DESTINATION_FOLDER, \"diff\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void paragraphWithColumnCountAndGapTest() throws IOException, InterruptedException {\n",
      "        String outFileName = DESTINATION_FOLDER + \"paragraphWithColumnCountAndGapTest.pdf\";\n",
      "        String cmpFileName = SOURCE_FOLDER + \"cmp_paragraphWithColumnCountAndGapTest.pdf\";\n",
      "\n",
      "        try (Document document = new Document(new PdfDocument(new PdfWriter(outFileName)))) {\n",
      "            Div columnContainer = new MulticolContainer();\n",
      "            columnContainer.setProperty(Property.COLUMN_COUNT, 5);\n",
      "            columnContainer.setProperty(Property.COLUMN_GAP, 50.0f);\n",
      "            Paragraph paragraph = createDummyParagraph();\n",
      "            columnContainer.add(paragraph);\n",
      "            document.add(columnContainer);\n",
      "        }\n",
      "        Assert.assertNull(new CompareTool().compareByContent(outFileName, cmpFileName, DESTINATION_FOLDER, \"diff\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void paragraphWithSimpleSolidColumnGapTest() throws IOException, InterruptedException {\n",
      "        String outFileName = DESTINATION_FOLDER + \"paragraphWithSimpleStyledColumnGapTest.pdf\";\n",
      "        String cmpFileName = SOURCE_FOLDER + \"cmp_paragraphWithSimpleStyledColumnGapTest.pdf\";\n",
      "\n",
      "        try (Document document = new Document(new PdfDocument(new PdfWriter(outFileName)))) {\n",
      "            Div columnContainer = new MulticolContainer();\n",
      "            columnContainer.setProperty(Property.COLUMN_COUNT, 5);\n",
      "            columnContainer.setProperty(Property.COLUMN_GAP, 50.0f);\n",
      "            columnContainer.setProperty(Property.COLUMN_GAP_BORDER, new SolidBorder(50));\n",
      "            Paragraph paragraph = createDummyParagraph();\n",
      "            columnContainer.add(paragraph);\n",
      "            document.add(columnContainer);\n",
      "        }\n",
      "        Assert.assertNull(new CompareTool().compareByContent(outFileName, cmpFileName, DESTINATION_FOLDER, \"diff\"));\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    public void divWithSimpleSolidColumnGapTest() throws IOException, InterruptedException {\n",
      "        String outFileName = DESTINATION_FOLDER + \"divWithSimpleStyledColumnGapTest.pdf\";\n",
      "        String cmpFileName = SOURCE_FOLDER + \"cmp_divWithSimpleStyledColumnGapTest.pdf\";\n",
      "\n",
      "        try (Document document = new Document(new PdfDocument(new PdfWriter(outFileName)))) {\n",
      "            Div columnContainer = new MulticolContainer();\n",
      "            columnContainer.setProperty(Property.COLUMN_COUNT, 5);\n",
      "            columnContainer.setProperty(Property.COLUMN_GAP, 50.0f);\n",
      "            columnContainer.setProperty(Property.COLUMN_GAP_BORDER, new SolidBorder(50));\n",
      "            Div div = new Div();\n",
      "            for (int i = 0; i < 20; i++) {\n",
      "                Paragraph paragraph = new Paragraph(\"Hello world! \" + i);\n",
      "                div.add(paragraph);\n",
      "            }\n",
      "            columnContainer.add(div);\n",
      "            document.add(columnContainer);\n",
      "        }\n",
      "        Assert.assertNull(new CompareTool().compareByContent(outFileName, cmpFileName, DESTINATION_FOLDER, \"diff\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void paragraphWithNegativeValueSolidColumnGapTest() throws IOException, InterruptedException {\n",
      "        String outFileName = DESTINATION_FOLDER + \"paragraphWithNegativeValueSolidColumnGapTest.pdf\";\n",
      "        String cmpFileName = SOURCE_FOLDER + \"cmp_paragraphWithNegativeValueSolidColumnGapTest.pdf\";\n",
      "\n",
      "        try (Document document = new Document(new PdfDocument(new PdfWriter(outFileName)))) {\n",
      "            Div columnContainer = new MulticolContainer();\n",
      "            columnContainer.setProperty(Property.COLUMN_COUNT, 5);\n",
      "            columnContainer.setProperty(Property.COLUMN_GAP_BORDER, new SolidBorder(0));\n",
      "            Paragraph paragraph = createDummyParagraph();\n",
      "            columnContainer.add(paragraph);\n",
      "            document.add(columnContainer);\n",
      "        }\n",
      "        Assert.assertNull(new CompareTool().compareByContent(outFileName, cmpFileName, DESTINATION_FOLDER, \"diff\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void paragraphWithBiggerValueSolidColumnGapTest() throws IOException, InterruptedException {\n",
      "        String outFileName = DESTINATION_FOLDER + \"paragraphWithBiggerValueSolidColumnGapTest.pdf\";\n",
      "        String cmpFileName = SOURCE_FOLDER + \"cmp_paragraphWithBiggerValueSolidColumnGapTest.pdf\";\n",
      "\n",
      "        try (Document document = new Document(new PdfDocument(new PdfWriter(outFileName)))) {\n",
      "            Div columnContainer = new MulticolContainer();\n",
      "            columnContainer.setProperty(Property.COLUMN_COUNT, 5);\n",
      "            columnContainer.setProperty(Property.COLUMN_GAP_BORDER, new SolidBorder(600));\n",
      "            Paragraph paragraph = createDummyParagraph();\n",
      "            columnContainer.add(paragraph);\n",
      "            document.add(columnContainer);\n",
      "        }\n",
      "        Assert.assertNull(new CompareTool().compareByContent(outFileName, cmpFileName, DESTINATION_FOLDER, \"diff\"));\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    public void paragraphWithNullValueSolidColumnGapTest() throws IOException, InterruptedException {\n",
      "        String outFileName = DESTINATION_FOLDER + \"paragraphWithNullValueSolidColumnGapTest.pdf\";\n",
      "        String cmpFileName = SOURCE_FOLDER + \"cmp_paragraphWithNullValueSolidColumnGapTest.pdf\";\n",
      "\n",
      "        try (Document document = new Document(new PdfDocument(new PdfWriter(outFileName)))) {\n",
      "            Div columnContainer = new MulticolContainer();\n",
      "            columnContainer.setProperty(Property.COLUMN_COUNT, 5);\n",
      "            columnContainer.setProperty(Property.COLUMN_GAP_BORDER, null);\n",
      "            Paragraph paragraph = createDummyParagraph();\n",
      "            columnContainer.add(paragraph);\n",
      "            document.add(columnContainer);\n",
      "        }\n",
      "        Assert.assertNull(new CompareTool().compareByContent(outFileName, cmpFileName, DESTINATION_FOLDER, \"diff\"));\n",
      "    }\n",
      "    private void executeTest(String testName, Consumer<MulticolContainer> executor, boolean wrapByP)\n",
      "            throws IOException, InterruptedException {\n",
      "        String filename = DESTINATION_FOLDER + testName + \".pdf\";\n",
      "        String cmpName = SOURCE_FOLDER + \"cmp_\" + testName + \".pdf\";\n",
      "        try (PdfDocument pdfDoc = new PdfDocument(new com.itextpdf.kernel.pdf.PdfWriter(filename))) {\n",
      "            Document doc = new Document(pdfDoc);\n",
      "\n",
      "            MulticolContainer container = new MulticolContainer();\n",
      "            executor.accept(container);\n",
      "\n",
      "            if (wrapByP) {\n",
      "                doc.add(new Paragraph(\"ELEMENT ABOVE\").setBackgroundColor(ColorConstants.YELLOW));\n",
      "            }\n",
      "            doc.add(container);\n",
      "            if (wrapByP) {\n",
      "                doc.add(new Paragraph(\"ELEMENT BELOW\").setBackgroundColor(ColorConstants.YELLOW));\n",
      "            }\n",
      "        }\n",
      "        CompareTool compareTool = new CompareTool();\n",
      "        Assert.assertNull(compareTool.compareByContent(filename, cmpName, DESTINATION_FOLDER, \"diff_\"));\n",
      "    }\n",
      "\n",
      "    private void executeTest(String testName, Consumer<MulticolContainer> executor) throws IOException, InterruptedException {\n",
      "       executeTest(testName, executor, true);\n",
      "    }\n",
      "\n",
      "    private Image createImage(String path, float width) {\n",
      "        PdfImageXObject xObject = null;\n",
      "        try {\n",
      "            xObject = new PdfImageXObject(ImageDataFactory.create(path));\n",
      "        } catch (MalformedURLException e) {\n",
      "            throw new RuntimeException(e.getMessage());\n",
      "        }\n",
      "        return new Image(xObject, width);\n",
      "    }\n",
      "\n",
      "    private static Paragraph createDummyParagraph() {\n",
      "        return new Paragraph(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, \" +\n",
      "                \"sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, \" +\n",
      "                \"quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute \" +\n",
      "                \"irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. \" +\n",
      "                \"Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim \" +\n",
      "                \"id est laborum.\");\n",
      "    }\n",
      "\n",
      "    private static Div createFirstPageFiller() {\n",
      "        Div firstPageFiller = new Div();\n",
      "        firstPageFiller.setProperty(Property.MARGIN_TOP, UnitValue.createPointValue(50));\n",
      "        firstPageFiller.setProperty(Property.BORDER, new SolidBorder(1));\n",
      "        firstPageFiller.setProperty(Property.PADDING_LEFT, UnitValue.createPointValue(20));\n",
      "        firstPageFiller.setProperty(Property.BACKGROUND, new Background(ColorConstants.LIGHT_GRAY));\n",
      "        firstPageFiller.setProperty(Property.WIDTH, UnitValue.createPointValue(450));\n",
      "        firstPageFiller.setProperty(Property.HEIGHT, UnitValue.createPointValue(650));\n",
      "        return firstPageFiller;\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "MulticolContainer::::makeNewRenderer()": [
        40,
        43
      ]
    },
    "test_method_lines_dic": {
      "MulticolContainerTest::::beforeClass()": [
        70,
        73
      ],
      "MulticolContainerTest::::paragraphColumnContainerTest()": [
        75,
        87
      ],
      "MulticolContainerTest::::divColumnContainerTest()": [
        89,
        102
      ],
      "MulticolContainerTest::::columnedDivInsideTableTest()": [
        104,
        125
      ],
      "MulticolContainerTest::::continuousColumContainerParagraphMarginTopBottom()": [
        127,
        136
      ],
      "MulticolContainerTest::::continuousColumContainerParagraphPaddingTopBottom()": [
        138,
        147
      ],
      "MulticolContainerTest::::continuousColumContainerParagraphBorder()": [
        149,
        157
      ],
      "MulticolContainerTest::::continuousColumContainerParagraphAll()": [
        160,
        172
      ],
      "MulticolContainerTest::::continuousColumContainerParagraphAllChildStart()": [
        174,
        191
      ],
      "MulticolContainerTest::::continuousColumContainerParagraphAllChildEnd()": [
        193,
        210
      ],
      "MulticolContainerTest::::continuousColumContainerParagraphOverflowShouldShow()": [
        212,
        224
      ],
      "MulticolContainerTest::::extraLargeColumnParagraphTest()": [
        226,
        238
      ],
      "MulticolContainerTest::::largeColumnParagraphWithMarginTest()": [
        240,
        249
      ],
      "MulticolContainerTest::::largeColumnParagraphWithPaddingTest()": [
        251,
        260
      ],
      "MulticolContainerTest::::largeColumnParagraphWithBorderTest()": [
        262,
        270
      ],
      "MulticolContainerTest::::continuousColumContainerMultipleElementsMarginTop()": [
        272,
        284
      ],
      "MulticolContainerTest::::continuousColumContainerMultipleElementsMarginBottom()": [
        286,
        299
      ],
      "MulticolContainerTest::::continuousColumContainerInnerBackgroundColorAndBorder()": [
        301,
        314
      ],
      "MulticolContainerTest::::continuousColumContainerMultipleElementsPaddingTop()": [
        317,
        329
      ],
      "MulticolContainerTest::::continuousColumContainerMultipleElementsPaddingBottom()": [
        331,
        343
      ],
      "MulticolContainerTest::::continuousColumContainerMultipleElementsBorder()": [
        345,
        357
      ],
      "MulticolContainerTest::::multicolElementWithKeepTogetherTest()": [
        359,
        374
      ],
      "MulticolContainerTest::::allChildrenOfMulticolElementWithKeepTogetherTest()": [
        376,
        391
      ],
      "MulticolContainerTest::::childOfMulticolElementWithKeepTogetherTest()": [
        393,
        416
      ],
      "MulticolContainerTest::::childrenOfMulticolElementWithKeepTogetherTest()": [
        418,
        455
      ],
      "MulticolContainerTest::::singleParagraphMultiPageTest()": [
        457,
        479
      ],
      "MulticolContainerTest::::singleParagraphWithBorderMultiPageTest()": [
        481,
        505
      ],
      "MulticolContainerTest::::paragraphWithImagesMultiPageTest()": [
        507,
        537
      ],
      "MulticolContainerTest::::overflowImageBetweenParagraphsTest()": [
        539,
        559
      ],
      "MulticolContainerTest::::overflowingImageWithParagraphTest()": [
        561,
        577
      ],
      "MulticolContainerTest::::overflowImageWithForcedPlacementTest()": [
        579,
        600
      ],
      "MulticolContainerTest::::imageForcedPlacementAndKeepTogetherTest()": [
        602,
        628
      ],
      "MulticolContainerTest::::imageBiggerThanPageTest()": [
        630,
        647
      ],
      "MulticolContainerTest::::overflowingDivWithParagraphMultipageTest()": [
        649,
        678
      ],
      "MulticolContainerTest::::marginCantFitCurrentPageTest()": [
        680,
        710
      ],
      "MulticolContainerTest::::paddingCantFitCurrentPageTest()": [
        712,
        742
      ],
      "MulticolContainerTest::::keepTogetherBlockingLayoutTest()": [
        744,
        773
      ],
      "MulticolContainerTest::::continuousColumContainerSetWidth()": [
        775,
        788
      ],
      "MulticolContainerTest::::continuousColumContainerSetHeightBigger()": [
        790,
        799
      ],
      "MulticolContainerTest::::widthBorderTest()": [
        801,
        810
      ],
      "MulticolContainerTest::::heightBorderTest()": [
        812,
        822
      ],
      "MulticolContainerTest::::widthPaddingTest()": [
        824,
        834
      ],
      "MulticolContainerTest::::heightPaddingTest()": [
        836,
        847
      ],
      "MulticolContainerTest::::heightMarginTest()": [
        850,
        862
      ],
      "MulticolContainerTest::::widthMarginTest()": [
        865,
        875
      ],
      "MulticolContainerTest::::widthHeightMarginTest()": [
        878,
        889
      ],
      "MulticolContainerTest::::minHeightTest()": [
        891,
        901
      ],
      "MulticolContainerTest::::maxHeightTest()": [
        904,
        914
      ],
      "MulticolContainerTest::::minWidth()": [
        916,
        925
      ],
      "MulticolContainerTest::::minWidthBiggerThenPage()": [
        927,
        936
      ],
      "MulticolContainerTest::::maxWidth()": [
        938,
        947
      ],
      "MulticolContainerTest::::widthMultiPage()": [
        950,
        970
      ],
      "MulticolContainerTest::::heightMultiPage()": [
        972,
        993
      ],
      "MulticolContainerTest::::continuousColumContainerSetHeightSmaller()": [
        995,
        1005
      ],
      "MulticolContainerTest::::paragraphWithColumnWidthTest()": [
        1007,
        1021
      ],
      "MulticolContainerTest::::paragraphWithColumnWidthAndColumnCountTest()": [
        1023,
        1038
      ],
      "MulticolContainerTest::::paragraphWithInvalidColumnValuesTest()": [
        1040,
        1054
      ],
      "MulticolContainerTest::::paragraphWithColumnWidthAndGapTest()": [
        1056,
        1070
      ],
      "MulticolContainerTest::::paragraphWithColumnCountAndGapTest()": [
        1072,
        1086
      ],
      "MulticolContainerTest::::paragraphWithSimpleSolidColumnGapTest()": [
        1088,
        1103
      ],
      "MulticolContainerTest::::divWithSimpleSolidColumnGapTest()": [
        1106,
        1125
      ],
      "MulticolContainerTest::::paragraphWithNegativeValueSolidColumnGapTest()": [
        1127,
        1141
      ],
      "MulticolContainerTest::::paragraphWithBiggerValueSolidColumnGapTest()": [
        1143,
        1157
      ],
      "MulticolContainerTest::::paragraphWithNullValueSolidColumnGapTest()": [
        1160,
        1174
      ],
      "MulticolContainerTest::::createImage(java.lang.String,float)": [
        1201,
        1209
      ],
      "MulticolContainerTest::::createDummyParagraph()": [
        1211,
        1218
      ],
      "MulticolContainerTest::::createFirstPageFiller()": [
        1220,
        1229
      ]
    },
    "reverse_method_lines_dic": {
      "40": "MulticolContainer::::makeNewRenderer()",
      "41": "MulticolContainer::::makeNewRenderer()",
      "42": "MulticolContainer::::makeNewRenderer()",
      "43": "MulticolContainer::::makeNewRenderer()"
    },
    "test_reverse_method_lines_dic": {
      "70": "MulticolContainerTest::::beforeClass()",
      "71": "MulticolContainerTest::::beforeClass()",
      "72": "MulticolContainerTest::::beforeClass()",
      "73": "MulticolContainerTest::::beforeClass()",
      "75": "MulticolContainerTest::::paragraphColumnContainerTest()",
      "76": "MulticolContainerTest::::paragraphColumnContainerTest()",
      "77": "MulticolContainerTest::::paragraphColumnContainerTest()",
      "78": "MulticolContainerTest::::paragraphColumnContainerTest()",
      "79": "MulticolContainerTest::::paragraphColumnContainerTest()",
      "80": "MulticolContainerTest::::paragraphColumnContainerTest()",
      "81": "MulticolContainerTest::::paragraphColumnContainerTest()",
      "82": "MulticolContainerTest::::paragraphColumnContainerTest()",
      "83": "MulticolContainerTest::::paragraphColumnContainerTest()",
      "84": "MulticolContainerTest::::paragraphColumnContainerTest()",
      "85": "MulticolContainerTest::::paragraphColumnContainerTest()",
      "86": "MulticolContainerTest::::paragraphColumnContainerTest()",
      "87": "MulticolContainerTest::::paragraphColumnContainerTest()",
      "89": "MulticolContainerTest::::divColumnContainerTest()",
      "90": "MulticolContainerTest::::divColumnContainerTest()",
      "91": "MulticolContainerTest::::divColumnContainerTest()",
      "92": "MulticolContainerTest::::divColumnContainerTest()",
      "93": "MulticolContainerTest::::divColumnContainerTest()",
      "94": "MulticolContainerTest::::divColumnContainerTest()",
      "95": "MulticolContainerTest::::divColumnContainerTest()",
      "96": "MulticolContainerTest::::divColumnContainerTest()",
      "97": "MulticolContainerTest::::divColumnContainerTest()",
      "98": "MulticolContainerTest::::divColumnContainerTest()",
      "99": "MulticolContainerTest::::divColumnContainerTest()",
      "100": "MulticolContainerTest::::divColumnContainerTest()",
      "101": "MulticolContainerTest::::divColumnContainerTest()",
      "102": "MulticolContainerTest::::divColumnContainerTest()",
      "104": "MulticolContainerTest::::columnedDivInsideTableTest()",
      "105": "MulticolContainerTest::::columnedDivInsideTableTest()",
      "106": "MulticolContainerTest::::columnedDivInsideTableTest()",
      "107": "MulticolContainerTest::::columnedDivInsideTableTest()",
      "108": "MulticolContainerTest::::columnedDivInsideTableTest()",
      "109": "MulticolContainerTest::::columnedDivInsideTableTest()",
      "110": "MulticolContainerTest::::columnedDivInsideTableTest()",
      "111": "MulticolContainerTest::::columnedDivInsideTableTest()",
      "112": "MulticolContainerTest::::columnedDivInsideTableTest()",
      "113": "MulticolContainerTest::::columnedDivInsideTableTest()",
      "114": "MulticolContainerTest::::columnedDivInsideTableTest()",
      "115": "MulticolContainerTest::::columnedDivInsideTableTest()",
      "116": "MulticolContainerTest::::columnedDivInsideTableTest()",
      "117": "MulticolContainerTest::::columnedDivInsideTableTest()",
      "118": "MulticolContainerTest::::columnedDivInsideTableTest()",
      "119": "MulticolContainerTest::::columnedDivInsideTableTest()",
      "120": "MulticolContainerTest::::columnedDivInsideTableTest()",
      "121": "MulticolContainerTest::::columnedDivInsideTableTest()",
      "122": "MulticolContainerTest::::columnedDivInsideTableTest()",
      "123": "MulticolContainerTest::::columnedDivInsideTableTest()",
      "124": "MulticolContainerTest::::columnedDivInsideTableTest()",
      "125": "MulticolContainerTest::::columnedDivInsideTableTest()",
      "127": "MulticolContainerTest::::continuousColumContainerParagraphMarginTopBottom()",
      "128": "MulticolContainerTest::::continuousColumContainerParagraphMarginTopBottom()",
      "129": "MulticolContainerTest::::continuousColumContainerParagraphMarginTopBottom()",
      "130": "MulticolContainerTest::::continuousColumContainerParagraphMarginTopBottom()",
      "131": "MulticolContainerTest::::continuousColumContainerParagraphMarginTopBottom()",
      "132": "MulticolContainerTest::::continuousColumContainerParagraphMarginTopBottom()",
      "133": "MulticolContainerTest::::continuousColumContainerParagraphMarginTopBottom()",
      "134": "MulticolContainerTest::::continuousColumContainerParagraphMarginTopBottom()",
      "135": "MulticolContainerTest::::continuousColumContainerParagraphMarginTopBottom()",
      "136": "MulticolContainerTest::::continuousColumContainerParagraphMarginTopBottom()",
      "138": "MulticolContainerTest::::continuousColumContainerParagraphPaddingTopBottom()",
      "139": "MulticolContainerTest::::continuousColumContainerParagraphPaddingTopBottom()",
      "140": "MulticolContainerTest::::continuousColumContainerParagraphPaddingTopBottom()",
      "141": "MulticolContainerTest::::continuousColumContainerParagraphPaddingTopBottom()",
      "142": "MulticolContainerTest::::continuousColumContainerParagraphPaddingTopBottom()",
      "143": "MulticolContainerTest::::continuousColumContainerParagraphPaddingTopBottom()",
      "144": "MulticolContainerTest::::continuousColumContainerParagraphPaddingTopBottom()",
      "145": "MulticolContainerTest::::continuousColumContainerParagraphPaddingTopBottom()",
      "146": "MulticolContainerTest::::continuousColumContainerParagraphPaddingTopBottom()",
      "147": "MulticolContainerTest::::continuousColumContainerParagraphPaddingTopBottom()",
      "149": "MulticolContainerTest::::continuousColumContainerParagraphBorder()",
      "150": "MulticolContainerTest::::continuousColumContainerParagraphBorder()",
      "151": "MulticolContainerTest::::continuousColumContainerParagraphBorder()",
      "152": "MulticolContainerTest::::continuousColumContainerParagraphBorder()",
      "153": "MulticolContainerTest::::continuousColumContainerParagraphBorder()",
      "154": "MulticolContainerTest::::continuousColumContainerParagraphBorder()",
      "155": "MulticolContainerTest::::continuousColumContainerParagraphBorder()",
      "156": "MulticolContainerTest::::continuousColumContainerParagraphBorder()",
      "157": "MulticolContainerTest::::continuousColumContainerParagraphBorder()",
      "160": "MulticolContainerTest::::continuousColumContainerParagraphAll()",
      "161": "MulticolContainerTest::::continuousColumContainerParagraphAll()",
      "162": "MulticolContainerTest::::continuousColumContainerParagraphAll()",
      "163": "MulticolContainerTest::::continuousColumContainerParagraphAll()",
      "164": "MulticolContainerTest::::continuousColumContainerParagraphAll()",
      "165": "MulticolContainerTest::::continuousColumContainerParagraphAll()",
      "166": "MulticolContainerTest::::continuousColumContainerParagraphAll()",
      "167": "MulticolContainerTest::::continuousColumContainerParagraphAll()",
      "168": "MulticolContainerTest::::continuousColumContainerParagraphAll()",
      "169": "MulticolContainerTest::::continuousColumContainerParagraphAll()",
      "170": "MulticolContainerTest::::continuousColumContainerParagraphAll()",
      "171": "MulticolContainerTest::::continuousColumContainerParagraphAll()",
      "172": "MulticolContainerTest::::continuousColumContainerParagraphAll()",
      "174": "MulticolContainerTest::::continuousColumContainerParagraphAllChildStart()",
      "175": "MulticolContainerTest::::continuousColumContainerParagraphAllChildStart()",
      "176": "MulticolContainerTest::::continuousColumContainerParagraphAllChildStart()",
      "177": "MulticolContainerTest::::continuousColumContainerParagraphAllChildStart()",
      "178": "MulticolContainerTest::::continuousColumContainerParagraphAllChildStart()",
      "179": "MulticolContainerTest::::continuousColumContainerParagraphAllChildStart()",
      "180": "MulticolContainerTest::::continuousColumContainerParagraphAllChildStart()",
      "181": "MulticolContainerTest::::continuousColumContainerParagraphAllChildStart()",
      "182": "MulticolContainerTest::::continuousColumContainerParagraphAllChildStart()",
      "183": "MulticolContainerTest::::continuousColumContainerParagraphAllChildStart()",
      "184": "MulticolContainerTest::::continuousColumContainerParagraphAllChildStart()",
      "185": "MulticolContainerTest::::continuousColumContainerParagraphAllChildStart()",
      "186": "MulticolContainerTest::::continuousColumContainerParagraphAllChildStart()",
      "187": "MulticolContainerTest::::continuousColumContainerParagraphAllChildStart()",
      "188": "MulticolContainerTest::::continuousColumContainerParagraphAllChildStart()",
      "189": "MulticolContainerTest::::continuousColumContainerParagraphAllChildStart()",
      "190": "MulticolContainerTest::::continuousColumContainerParagraphAllChildStart()",
      "191": "MulticolContainerTest::::continuousColumContainerParagraphAllChildStart()",
      "193": "MulticolContainerTest::::continuousColumContainerParagraphAllChildEnd()",
      "194": "MulticolContainerTest::::continuousColumContainerParagraphAllChildEnd()",
      "195": "MulticolContainerTest::::continuousColumContainerParagraphAllChildEnd()",
      "196": "MulticolContainerTest::::continuousColumContainerParagraphAllChildEnd()",
      "197": "MulticolContainerTest::::continuousColumContainerParagraphAllChildEnd()",
      "198": "MulticolContainerTest::::continuousColumContainerParagraphAllChildEnd()",
      "199": "MulticolContainerTest::::continuousColumContainerParagraphAllChildEnd()",
      "200": "MulticolContainerTest::::continuousColumContainerParagraphAllChildEnd()",
      "201": "MulticolContainerTest::::continuousColumContainerParagraphAllChildEnd()",
      "202": "MulticolContainerTest::::continuousColumContainerParagraphAllChildEnd()",
      "203": "MulticolContainerTest::::continuousColumContainerParagraphAllChildEnd()",
      "204": "MulticolContainerTest::::continuousColumContainerParagraphAllChildEnd()",
      "205": "MulticolContainerTest::::continuousColumContainerParagraphAllChildEnd()",
      "206": "MulticolContainerTest::::continuousColumContainerParagraphAllChildEnd()",
      "207": "MulticolContainerTest::::continuousColumContainerParagraphAllChildEnd()",
      "208": "MulticolContainerTest::::continuousColumContainerParagraphAllChildEnd()",
      "209": "MulticolContainerTest::::continuousColumContainerParagraphAllChildEnd()",
      "210": "MulticolContainerTest::::continuousColumContainerParagraphAllChildEnd()",
      "212": "MulticolContainerTest::::continuousColumContainerParagraphOverflowShouldShow()",
      "213": "MulticolContainerTest::::continuousColumContainerParagraphOverflowShouldShow()",
      "214": "MulticolContainerTest::::continuousColumContainerParagraphOverflowShouldShow()",
      "215": "MulticolContainerTest::::continuousColumContainerParagraphOverflowShouldShow()",
      "216": "MulticolContainerTest::::continuousColumContainerParagraphOverflowShouldShow()",
      "217": "MulticolContainerTest::::continuousColumContainerParagraphOverflowShouldShow()",
      "218": "MulticolContainerTest::::continuousColumContainerParagraphOverflowShouldShow()",
      "219": "MulticolContainerTest::::continuousColumContainerParagraphOverflowShouldShow()",
      "220": "MulticolContainerTest::::continuousColumContainerParagraphOverflowShouldShow()",
      "221": "MulticolContainerTest::::continuousColumContainerParagraphOverflowShouldShow()",
      "222": "MulticolContainerTest::::continuousColumContainerParagraphOverflowShouldShow()",
      "223": "MulticolContainerTest::::continuousColumContainerParagraphOverflowShouldShow()",
      "224": "MulticolContainerTest::::continuousColumContainerParagraphOverflowShouldShow()",
      "226": "MulticolContainerTest::::extraLargeColumnParagraphTest()",
      "227": "MulticolContainerTest::::extraLargeColumnParagraphTest()",
      "228": "MulticolContainerTest::::extraLargeColumnParagraphTest()",
      "229": "MulticolContainerTest::::extraLargeColumnParagraphTest()",
      "230": "MulticolContainerTest::::extraLargeColumnParagraphTest()",
      "231": "MulticolContainerTest::::extraLargeColumnParagraphTest()",
      "232": "MulticolContainerTest::::extraLargeColumnParagraphTest()",
      "233": "MulticolContainerTest::::extraLargeColumnParagraphTest()",
      "234": "MulticolContainerTest::::extraLargeColumnParagraphTest()",
      "235": "MulticolContainerTest::::extraLargeColumnParagraphTest()",
      "236": "MulticolContainerTest::::extraLargeColumnParagraphTest()",
      "237": "MulticolContainerTest::::extraLargeColumnParagraphTest()",
      "238": "MulticolContainerTest::::extraLargeColumnParagraphTest()",
      "240": "MulticolContainerTest::::largeColumnParagraphWithMarginTest()",
      "241": "MulticolContainerTest::::largeColumnParagraphWithMarginTest()",
      "242": "MulticolContainerTest::::largeColumnParagraphWithMarginTest()",
      "243": "MulticolContainerTest::::largeColumnParagraphWithMarginTest()",
      "244": "MulticolContainerTest::::largeColumnParagraphWithMarginTest()",
      "245": "MulticolContainerTest::::largeColumnParagraphWithMarginTest()",
      "246": "MulticolContainerTest::::largeColumnParagraphWithMarginTest()",
      "247": "MulticolContainerTest::::largeColumnParagraphWithMarginTest()",
      "248": "MulticolContainerTest::::largeColumnParagraphWithMarginTest()",
      "249": "MulticolContainerTest::::largeColumnParagraphWithMarginTest()",
      "251": "MulticolContainerTest::::largeColumnParagraphWithPaddingTest()",
      "252": "MulticolContainerTest::::largeColumnParagraphWithPaddingTest()",
      "253": "MulticolContainerTest::::largeColumnParagraphWithPaddingTest()",
      "254": "MulticolContainerTest::::largeColumnParagraphWithPaddingTest()",
      "255": "MulticolContainerTest::::largeColumnParagraphWithPaddingTest()",
      "256": "MulticolContainerTest::::largeColumnParagraphWithPaddingTest()",
      "257": "MulticolContainerTest::::largeColumnParagraphWithPaddingTest()",
      "258": "MulticolContainerTest::::largeColumnParagraphWithPaddingTest()",
      "259": "MulticolContainerTest::::largeColumnParagraphWithPaddingTest()",
      "260": "MulticolContainerTest::::largeColumnParagraphWithPaddingTest()",
      "262": "MulticolContainerTest::::largeColumnParagraphWithBorderTest()",
      "263": "MulticolContainerTest::::largeColumnParagraphWithBorderTest()",
      "264": "MulticolContainerTest::::largeColumnParagraphWithBorderTest()",
      "265": "MulticolContainerTest::::largeColumnParagraphWithBorderTest()",
      "266": "MulticolContainerTest::::largeColumnParagraphWithBorderTest()",
      "267": "MulticolContainerTest::::largeColumnParagraphWithBorderTest()",
      "268": "MulticolContainerTest::::largeColumnParagraphWithBorderTest()",
      "269": "MulticolContainerTest::::largeColumnParagraphWithBorderTest()",
      "270": "MulticolContainerTest::::largeColumnParagraphWithBorderTest()",
      "272": "MulticolContainerTest::::continuousColumContainerMultipleElementsMarginTop()",
      "273": "MulticolContainerTest::::continuousColumContainerMultipleElementsMarginTop()",
      "274": "MulticolContainerTest::::continuousColumContainerMultipleElementsMarginTop()",
      "275": "MulticolContainerTest::::continuousColumContainerMultipleElementsMarginTop()",
      "276": "MulticolContainerTest::::continuousColumContainerMultipleElementsMarginTop()",
      "277": "MulticolContainerTest::::continuousColumContainerMultipleElementsMarginTop()",
      "278": "MulticolContainerTest::::continuousColumContainerMultipleElementsMarginTop()",
      "279": "MulticolContainerTest::::continuousColumContainerMultipleElementsMarginTop()",
      "280": "MulticolContainerTest::::continuousColumContainerMultipleElementsMarginTop()",
      "281": "MulticolContainerTest::::continuousColumContainerMultipleElementsMarginTop()",
      "282": "MulticolContainerTest::::continuousColumContainerMultipleElementsMarginTop()",
      "283": "MulticolContainerTest::::continuousColumContainerMultipleElementsMarginTop()",
      "284": "MulticolContainerTest::::continuousColumContainerMultipleElementsMarginTop()",
      "286": "MulticolContainerTest::::continuousColumContainerMultipleElementsMarginBottom()",
      "287": "MulticolContainerTest::::continuousColumContainerMultipleElementsMarginBottom()",
      "288": "MulticolContainerTest::::continuousColumContainerMultipleElementsMarginBottom()",
      "289": "MulticolContainerTest::::continuousColumContainerMultipleElementsMarginBottom()",
      "290": "MulticolContainerTest::::continuousColumContainerMultipleElementsMarginBottom()",
      "291": "MulticolContainerTest::::continuousColumContainerMultipleElementsMarginBottom()",
      "292": "MulticolContainerTest::::continuousColumContainerMultipleElementsMarginBottom()",
      "293": "MulticolContainerTest::::continuousColumContainerMultipleElementsMarginBottom()",
      "294": "MulticolContainerTest::::continuousColumContainerMultipleElementsMarginBottom()",
      "295": "MulticolContainerTest::::continuousColumContainerMultipleElementsMarginBottom()",
      "296": "MulticolContainerTest::::continuousColumContainerMultipleElementsMarginBottom()",
      "297": "MulticolContainerTest::::continuousColumContainerMultipleElementsMarginBottom()",
      "298": "MulticolContainerTest::::continuousColumContainerMultipleElementsMarginBottom()",
      "299": "MulticolContainerTest::::continuousColumContainerMultipleElementsMarginBottom()",
      "301": "MulticolContainerTest::::continuousColumContainerInnerBackgroundColorAndBorder()",
      "302": "MulticolContainerTest::::continuousColumContainerInnerBackgroundColorAndBorder()",
      "303": "MulticolContainerTest::::continuousColumContainerInnerBackgroundColorAndBorder()",
      "304": "MulticolContainerTest::::continuousColumContainerInnerBackgroundColorAndBorder()",
      "305": "MulticolContainerTest::::continuousColumContainerInnerBackgroundColorAndBorder()",
      "306": "MulticolContainerTest::::continuousColumContainerInnerBackgroundColorAndBorder()",
      "307": "MulticolContainerTest::::continuousColumContainerInnerBackgroundColorAndBorder()",
      "308": "MulticolContainerTest::::continuousColumContainerInnerBackgroundColorAndBorder()",
      "309": "MulticolContainerTest::::continuousColumContainerInnerBackgroundColorAndBorder()",
      "310": "MulticolContainerTest::::continuousColumContainerInnerBackgroundColorAndBorder()",
      "311": "MulticolContainerTest::::continuousColumContainerInnerBackgroundColorAndBorder()",
      "312": "MulticolContainerTest::::continuousColumContainerInnerBackgroundColorAndBorder()",
      "313": "MulticolContainerTest::::continuousColumContainerInnerBackgroundColorAndBorder()",
      "314": "MulticolContainerTest::::continuousColumContainerInnerBackgroundColorAndBorder()",
      "317": "MulticolContainerTest::::continuousColumContainerMultipleElementsPaddingTop()",
      "318": "MulticolContainerTest::::continuousColumContainerMultipleElementsPaddingTop()",
      "319": "MulticolContainerTest::::continuousColumContainerMultipleElementsPaddingTop()",
      "320": "MulticolContainerTest::::continuousColumContainerMultipleElementsPaddingTop()",
      "321": "MulticolContainerTest::::continuousColumContainerMultipleElementsPaddingTop()",
      "322": "MulticolContainerTest::::continuousColumContainerMultipleElementsPaddingTop()",
      "323": "MulticolContainerTest::::continuousColumContainerMultipleElementsPaddingTop()",
      "324": "MulticolContainerTest::::continuousColumContainerMultipleElementsPaddingTop()",
      "325": "MulticolContainerTest::::continuousColumContainerMultipleElementsPaddingTop()",
      "326": "MulticolContainerTest::::continuousColumContainerMultipleElementsPaddingTop()",
      "327": "MulticolContainerTest::::continuousColumContainerMultipleElementsPaddingTop()",
      "328": "MulticolContainerTest::::continuousColumContainerMultipleElementsPaddingTop()",
      "329": "MulticolContainerTest::::continuousColumContainerMultipleElementsPaddingTop()",
      "331": "MulticolContainerTest::::continuousColumContainerMultipleElementsPaddingBottom()",
      "332": "MulticolContainerTest::::continuousColumContainerMultipleElementsPaddingBottom()",
      "333": "MulticolContainerTest::::continuousColumContainerMultipleElementsPaddingBottom()",
      "334": "MulticolContainerTest::::continuousColumContainerMultipleElementsPaddingBottom()",
      "335": "MulticolContainerTest::::continuousColumContainerMultipleElementsPaddingBottom()",
      "336": "MulticolContainerTest::::continuousColumContainerMultipleElementsPaddingBottom()",
      "337": "MulticolContainerTest::::continuousColumContainerMultipleElementsPaddingBottom()",
      "338": "MulticolContainerTest::::continuousColumContainerMultipleElementsPaddingBottom()",
      "339": "MulticolContainerTest::::continuousColumContainerMultipleElementsPaddingBottom()",
      "340": "MulticolContainerTest::::continuousColumContainerMultipleElementsPaddingBottom()",
      "341": "MulticolContainerTest::::continuousColumContainerMultipleElementsPaddingBottom()",
      "342": "MulticolContainerTest::::continuousColumContainerMultipleElementsPaddingBottom()",
      "343": "MulticolContainerTest::::continuousColumContainerMultipleElementsPaddingBottom()",
      "345": "MulticolContainerTest::::continuousColumContainerMultipleElementsBorder()",
      "346": "MulticolContainerTest::::continuousColumContainerMultipleElementsBorder()",
      "347": "MulticolContainerTest::::continuousColumContainerMultipleElementsBorder()",
      "348": "MulticolContainerTest::::continuousColumContainerMultipleElementsBorder()",
      "349": "MulticolContainerTest::::continuousColumContainerMultipleElementsBorder()",
      "350": "MulticolContainerTest::::continuousColumContainerMultipleElementsBorder()",
      "351": "MulticolContainerTest::::continuousColumContainerMultipleElementsBorder()",
      "352": "MulticolContainerTest::::continuousColumContainerMultipleElementsBorder()",
      "353": "MulticolContainerTest::::continuousColumContainerMultipleElementsBorder()",
      "354": "MulticolContainerTest::::continuousColumContainerMultipleElementsBorder()",
      "355": "MulticolContainerTest::::continuousColumContainerMultipleElementsBorder()",
      "356": "MulticolContainerTest::::continuousColumContainerMultipleElementsBorder()",
      "357": "MulticolContainerTest::::continuousColumContainerMultipleElementsBorder()",
      "359": "MulticolContainerTest::::multicolElementWithKeepTogetherTest()",
      "360": "MulticolContainerTest::::multicolElementWithKeepTogetherTest()",
      "361": "MulticolContainerTest::::multicolElementWithKeepTogetherTest()",
      "362": "MulticolContainerTest::::multicolElementWithKeepTogetherTest()",
      "363": "MulticolContainerTest::::multicolElementWithKeepTogetherTest()",
      "364": "MulticolContainerTest::::multicolElementWithKeepTogetherTest()",
      "365": "MulticolContainerTest::::multicolElementWithKeepTogetherTest()",
      "366": "MulticolContainerTest::::multicolElementWithKeepTogetherTest()",
      "367": "MulticolContainerTest::::multicolElementWithKeepTogetherTest()",
      "368": "MulticolContainerTest::::multicolElementWithKeepTogetherTest()",
      "369": "MulticolContainerTest::::multicolElementWithKeepTogetherTest()",
      "370": "MulticolContainerTest::::multicolElementWithKeepTogetherTest()",
      "371": "MulticolContainerTest::::multicolElementWithKeepTogetherTest()",
      "372": "MulticolContainerTest::::multicolElementWithKeepTogetherTest()",
      "373": "MulticolContainerTest::::multicolElementWithKeepTogetherTest()",
      "374": "MulticolContainerTest::::multicolElementWithKeepTogetherTest()",
      "376": "MulticolContainerTest::::allChildrenOfMulticolElementWithKeepTogetherTest()",
      "377": "MulticolContainerTest::::allChildrenOfMulticolElementWithKeepTogetherTest()",
      "378": "MulticolContainerTest::::allChildrenOfMulticolElementWithKeepTogetherTest()",
      "379": "MulticolContainerTest::::allChildrenOfMulticolElementWithKeepTogetherTest()",
      "380": "MulticolContainerTest::::allChildrenOfMulticolElementWithKeepTogetherTest()",
      "381": "MulticolContainerTest::::allChildrenOfMulticolElementWithKeepTogetherTest()",
      "382": "MulticolContainerTest::::allChildrenOfMulticolElementWithKeepTogetherTest()",
      "383": "MulticolContainerTest::::allChildrenOfMulticolElementWithKeepTogetherTest()",
      "384": "MulticolContainerTest::::allChildrenOfMulticolElementWithKeepTogetherTest()",
      "385": "MulticolContainerTest::::allChildrenOfMulticolElementWithKeepTogetherTest()",
      "386": "MulticolContainerTest::::allChildrenOfMulticolElementWithKeepTogetherTest()",
      "387": "MulticolContainerTest::::allChildrenOfMulticolElementWithKeepTogetherTest()",
      "388": "MulticolContainerTest::::allChildrenOfMulticolElementWithKeepTogetherTest()",
      "389": "MulticolContainerTest::::allChildrenOfMulticolElementWithKeepTogetherTest()",
      "390": "MulticolContainerTest::::allChildrenOfMulticolElementWithKeepTogetherTest()",
      "391": "MulticolContainerTest::::allChildrenOfMulticolElementWithKeepTogetherTest()",
      "393": "MulticolContainerTest::::childOfMulticolElementWithKeepTogetherTest()",
      "394": "MulticolContainerTest::::childOfMulticolElementWithKeepTogetherTest()",
      "395": "MulticolContainerTest::::childOfMulticolElementWithKeepTogetherTest()",
      "396": "MulticolContainerTest::::childOfMulticolElementWithKeepTogetherTest()",
      "397": "MulticolContainerTest::::childOfMulticolElementWithKeepTogetherTest()",
      "398": "MulticolContainerTest::::childOfMulticolElementWithKeepTogetherTest()",
      "399": "MulticolContainerTest::::childOfMulticolElementWithKeepTogetherTest()",
      "400": "MulticolContainerTest::::childOfMulticolElementWithKeepTogetherTest()",
      "401": "MulticolContainerTest::::childOfMulticolElementWithKeepTogetherTest()",
      "402": "MulticolContainerTest::::childOfMulticolElementWithKeepTogetherTest()",
      "403": "MulticolContainerTest::::childOfMulticolElementWithKeepTogetherTest()",
      "404": "MulticolContainerTest::::childOfMulticolElementWithKeepTogetherTest()",
      "405": "MulticolContainerTest::::childOfMulticolElementWithKeepTogetherTest()",
      "406": "MulticolContainerTest::::childOfMulticolElementWithKeepTogetherTest()",
      "407": "MulticolContainerTest::::childOfMulticolElementWithKeepTogetherTest()",
      "408": "MulticolContainerTest::::childOfMulticolElementWithKeepTogetherTest()",
      "409": "MulticolContainerTest::::childOfMulticolElementWithKeepTogetherTest()",
      "410": "MulticolContainerTest::::childOfMulticolElementWithKeepTogetherTest()",
      "411": "MulticolContainerTest::::childOfMulticolElementWithKeepTogetherTest()",
      "412": "MulticolContainerTest::::childOfMulticolElementWithKeepTogetherTest()",
      "413": "MulticolContainerTest::::childOfMulticolElementWithKeepTogetherTest()",
      "414": "MulticolContainerTest::::childOfMulticolElementWithKeepTogetherTest()",
      "415": "MulticolContainerTest::::childOfMulticolElementWithKeepTogetherTest()",
      "416": "MulticolContainerTest::::childOfMulticolElementWithKeepTogetherTest()",
      "418": "MulticolContainerTest::::childrenOfMulticolElementWithKeepTogetherTest()",
      "419": "MulticolContainerTest::::childrenOfMulticolElementWithKeepTogetherTest()",
      "420": "MulticolContainerTest::::childrenOfMulticolElementWithKeepTogetherTest()",
      "421": "MulticolContainerTest::::childrenOfMulticolElementWithKeepTogetherTest()",
      "422": "MulticolContainerTest::::childrenOfMulticolElementWithKeepTogetherTest()",
      "423": "MulticolContainerTest::::childrenOfMulticolElementWithKeepTogetherTest()",
      "424": "MulticolContainerTest::::childrenOfMulticolElementWithKeepTogetherTest()",
      "425": "MulticolContainerTest::::childrenOfMulticolElementWithKeepTogetherTest()",
      "426": "MulticolContainerTest::::childrenOfMulticolElementWithKeepTogetherTest()",
      "427": "MulticolContainerTest::::childrenOfMulticolElementWithKeepTogetherTest()",
      "428": "MulticolContainerTest::::childrenOfMulticolElementWithKeepTogetherTest()",
      "429": "MulticolContainerTest::::childrenOfMulticolElementWithKeepTogetherTest()",
      "430": "MulticolContainerTest::::childrenOfMulticolElementWithKeepTogetherTest()",
      "431": "MulticolContainerTest::::childrenOfMulticolElementWithKeepTogetherTest()",
      "432": "MulticolContainerTest::::childrenOfMulticolElementWithKeepTogetherTest()",
      "433": "MulticolContainerTest::::childrenOfMulticolElementWithKeepTogetherTest()",
      "434": "MulticolContainerTest::::childrenOfMulticolElementWithKeepTogetherTest()",
      "435": "MulticolContainerTest::::childrenOfMulticolElementWithKeepTogetherTest()",
      "436": "MulticolContainerTest::::childrenOfMulticolElementWithKeepTogetherTest()",
      "437": "MulticolContainerTest::::childrenOfMulticolElementWithKeepTogetherTest()",
      "438": "MulticolContainerTest::::childrenOfMulticolElementWithKeepTogetherTest()",
      "439": "MulticolContainerTest::::childrenOfMulticolElementWithKeepTogetherTest()",
      "440": "MulticolContainerTest::::childrenOfMulticolElementWithKeepTogetherTest()",
      "441": "MulticolContainerTest::::childrenOfMulticolElementWithKeepTogetherTest()",
      "442": "MulticolContainerTest::::childrenOfMulticolElementWithKeepTogetherTest()",
      "443": "MulticolContainerTest::::childrenOfMulticolElementWithKeepTogetherTest()",
      "444": "MulticolContainerTest::::childrenOfMulticolElementWithKeepTogetherTest()",
      "445": "MulticolContainerTest::::childrenOfMulticolElementWithKeepTogetherTest()",
      "446": "MulticolContainerTest::::childrenOfMulticolElementWithKeepTogetherTest()",
      "447": "MulticolContainerTest::::childrenOfMulticolElementWithKeepTogetherTest()",
      "448": "MulticolContainerTest::::childrenOfMulticolElementWithKeepTogetherTest()",
      "449": "MulticolContainerTest::::childrenOfMulticolElementWithKeepTogetherTest()",
      "450": "MulticolContainerTest::::childrenOfMulticolElementWithKeepTogetherTest()",
      "451": "MulticolContainerTest::::childrenOfMulticolElementWithKeepTogetherTest()",
      "452": "MulticolContainerTest::::childrenOfMulticolElementWithKeepTogetherTest()",
      "453": "MulticolContainerTest::::childrenOfMulticolElementWithKeepTogetherTest()",
      "454": "MulticolContainerTest::::childrenOfMulticolElementWithKeepTogetherTest()",
      "455": "MulticolContainerTest::::childrenOfMulticolElementWithKeepTogetherTest()",
      "457": "MulticolContainerTest::::singleParagraphMultiPageTest()",
      "458": "MulticolContainerTest::::singleParagraphMultiPageTest()",
      "459": "MulticolContainerTest::::singleParagraphMultiPageTest()",
      "460": "MulticolContainerTest::::singleParagraphMultiPageTest()",
      "461": "MulticolContainerTest::::singleParagraphMultiPageTest()",
      "462": "MulticolContainerTest::::singleParagraphMultiPageTest()",
      "463": "MulticolContainerTest::::singleParagraphMultiPageTest()",
      "464": "MulticolContainerTest::::singleParagraphMultiPageTest()",
      "465": "MulticolContainerTest::::singleParagraphMultiPageTest()",
      "466": "MulticolContainerTest::::singleParagraphMultiPageTest()",
      "467": "MulticolContainerTest::::singleParagraphMultiPageTest()",
      "468": "MulticolContainerTest::::singleParagraphMultiPageTest()",
      "469": "MulticolContainerTest::::singleParagraphMultiPageTest()",
      "470": "MulticolContainerTest::::singleParagraphMultiPageTest()",
      "471": "MulticolContainerTest::::singleParagraphMultiPageTest()",
      "472": "MulticolContainerTest::::singleParagraphMultiPageTest()",
      "473": "MulticolContainerTest::::singleParagraphMultiPageTest()",
      "474": "MulticolContainerTest::::singleParagraphMultiPageTest()",
      "475": "MulticolContainerTest::::singleParagraphMultiPageTest()",
      "476": "MulticolContainerTest::::singleParagraphMultiPageTest()",
      "477": "MulticolContainerTest::::singleParagraphMultiPageTest()",
      "478": "MulticolContainerTest::::singleParagraphMultiPageTest()",
      "479": "MulticolContainerTest::::singleParagraphMultiPageTest()",
      "481": "MulticolContainerTest::::singleParagraphWithBorderMultiPageTest()",
      "482": "MulticolContainerTest::::singleParagraphWithBorderMultiPageTest()",
      "483": "MulticolContainerTest::::singleParagraphWithBorderMultiPageTest()",
      "484": "MulticolContainerTest::::singleParagraphWithBorderMultiPageTest()",
      "485": "MulticolContainerTest::::singleParagraphWithBorderMultiPageTest()",
      "486": "MulticolContainerTest::::singleParagraphWithBorderMultiPageTest()",
      "487": "MulticolContainerTest::::singleParagraphWithBorderMultiPageTest()",
      "488": "MulticolContainerTest::::singleParagraphWithBorderMultiPageTest()",
      "489": "MulticolContainerTest::::singleParagraphWithBorderMultiPageTest()",
      "490": "MulticolContainerTest::::singleParagraphWithBorderMultiPageTest()",
      "491": "MulticolContainerTest::::singleParagraphWithBorderMultiPageTest()",
      "492": "MulticolContainerTest::::singleParagraphWithBorderMultiPageTest()",
      "493": "MulticolContainerTest::::singleParagraphWithBorderMultiPageTest()",
      "494": "MulticolContainerTest::::singleParagraphWithBorderMultiPageTest()",
      "495": "MulticolContainerTest::::singleParagraphWithBorderMultiPageTest()",
      "496": "MulticolContainerTest::::singleParagraphWithBorderMultiPageTest()",
      "497": "MulticolContainerTest::::singleParagraphWithBorderMultiPageTest()",
      "498": "MulticolContainerTest::::singleParagraphWithBorderMultiPageTest()",
      "499": "MulticolContainerTest::::singleParagraphWithBorderMultiPageTest()",
      "500": "MulticolContainerTest::::singleParagraphWithBorderMultiPageTest()",
      "501": "MulticolContainerTest::::singleParagraphWithBorderMultiPageTest()",
      "502": "MulticolContainerTest::::singleParagraphWithBorderMultiPageTest()",
      "503": "MulticolContainerTest::::singleParagraphWithBorderMultiPageTest()",
      "504": "MulticolContainerTest::::singleParagraphWithBorderMultiPageTest()",
      "505": "MulticolContainerTest::::singleParagraphWithBorderMultiPageTest()",
      "507": "MulticolContainerTest::::paragraphWithImagesMultiPageTest()",
      "508": "MulticolContainerTest::::paragraphWithImagesMultiPageTest()",
      "509": "MulticolContainerTest::::paragraphWithImagesMultiPageTest()",
      "510": "MulticolContainerTest::::paragraphWithImagesMultiPageTest()",
      "511": "MulticolContainerTest::::paragraphWithImagesMultiPageTest()",
      "512": "MulticolContainerTest::::paragraphWithImagesMultiPageTest()",
      "513": "MulticolContainerTest::::paragraphWithImagesMultiPageTest()",
      "514": "MulticolContainerTest::::paragraphWithImagesMultiPageTest()",
      "515": "MulticolContainerTest::::paragraphWithImagesMultiPageTest()",
      "516": "MulticolContainerTest::::paragraphWithImagesMultiPageTest()",
      "517": "MulticolContainerTest::::paragraphWithImagesMultiPageTest()",
      "518": "MulticolContainerTest::::paragraphWithImagesMultiPageTest()",
      "519": "MulticolContainerTest::::paragraphWithImagesMultiPageTest()",
      "520": "MulticolContainerTest::::paragraphWithImagesMultiPageTest()",
      "521": "MulticolContainerTest::::paragraphWithImagesMultiPageTest()",
      "522": "MulticolContainerTest::::paragraphWithImagesMultiPageTest()",
      "523": "MulticolContainerTest::::paragraphWithImagesMultiPageTest()",
      "524": "MulticolContainerTest::::paragraphWithImagesMultiPageTest()",
      "525": "MulticolContainerTest::::paragraphWithImagesMultiPageTest()",
      "526": "MulticolContainerTest::::paragraphWithImagesMultiPageTest()",
      "527": "MulticolContainerTest::::paragraphWithImagesMultiPageTest()",
      "528": "MulticolContainerTest::::paragraphWithImagesMultiPageTest()",
      "529": "MulticolContainerTest::::paragraphWithImagesMultiPageTest()",
      "530": "MulticolContainerTest::::paragraphWithImagesMultiPageTest()",
      "531": "MulticolContainerTest::::paragraphWithImagesMultiPageTest()",
      "532": "MulticolContainerTest::::paragraphWithImagesMultiPageTest()",
      "533": "MulticolContainerTest::::paragraphWithImagesMultiPageTest()",
      "534": "MulticolContainerTest::::paragraphWithImagesMultiPageTest()",
      "535": "MulticolContainerTest::::paragraphWithImagesMultiPageTest()",
      "536": "MulticolContainerTest::::paragraphWithImagesMultiPageTest()",
      "537": "MulticolContainerTest::::paragraphWithImagesMultiPageTest()",
      "539": "MulticolContainerTest::::overflowImageBetweenParagraphsTest()",
      "540": "MulticolContainerTest::::overflowImageBetweenParagraphsTest()",
      "541": "MulticolContainerTest::::overflowImageBetweenParagraphsTest()",
      "542": "MulticolContainerTest::::overflowImageBetweenParagraphsTest()",
      "543": "MulticolContainerTest::::overflowImageBetweenParagraphsTest()",
      "544": "MulticolContainerTest::::overflowImageBetweenParagraphsTest()",
      "545": "MulticolContainerTest::::overflowImageBetweenParagraphsTest()",
      "546": "MulticolContainerTest::::overflowImageBetweenParagraphsTest()",
      "547": "MulticolContainerTest::::overflowImageBetweenParagraphsTest()",
      "548": "MulticolContainerTest::::overflowImageBetweenParagraphsTest()",
      "549": "MulticolContainerTest::::overflowImageBetweenParagraphsTest()",
      "550": "MulticolContainerTest::::overflowImageBetweenParagraphsTest()",
      "551": "MulticolContainerTest::::overflowImageBetweenParagraphsTest()",
      "552": "MulticolContainerTest::::overflowImageBetweenParagraphsTest()",
      "553": "MulticolContainerTest::::overflowImageBetweenParagraphsTest()",
      "554": "MulticolContainerTest::::overflowImageBetweenParagraphsTest()",
      "555": "MulticolContainerTest::::overflowImageBetweenParagraphsTest()",
      "556": "MulticolContainerTest::::overflowImageBetweenParagraphsTest()",
      "557": "MulticolContainerTest::::overflowImageBetweenParagraphsTest()",
      "558": "MulticolContainerTest::::overflowImageBetweenParagraphsTest()",
      "559": "MulticolContainerTest::::overflowImageBetweenParagraphsTest()",
      "561": "MulticolContainerTest::::overflowingImageWithParagraphTest()",
      "562": "MulticolContainerTest::::overflowingImageWithParagraphTest()",
      "563": "MulticolContainerTest::::overflowingImageWithParagraphTest()",
      "564": "MulticolContainerTest::::overflowingImageWithParagraphTest()",
      "565": "MulticolContainerTest::::overflowingImageWithParagraphTest()",
      "566": "MulticolContainerTest::::overflowingImageWithParagraphTest()",
      "567": "MulticolContainerTest::::overflowingImageWithParagraphTest()",
      "568": "MulticolContainerTest::::overflowingImageWithParagraphTest()",
      "569": "MulticolContainerTest::::overflowingImageWithParagraphTest()",
      "570": "MulticolContainerTest::::overflowingImageWithParagraphTest()",
      "571": "MulticolContainerTest::::overflowingImageWithParagraphTest()",
      "572": "MulticolContainerTest::::overflowingImageWithParagraphTest()",
      "573": "MulticolContainerTest::::overflowingImageWithParagraphTest()",
      "574": "MulticolContainerTest::::overflowingImageWithParagraphTest()",
      "575": "MulticolContainerTest::::overflowingImageWithParagraphTest()",
      "576": "MulticolContainerTest::::overflowingImageWithParagraphTest()",
      "577": "MulticolContainerTest::::overflowingImageWithParagraphTest()",
      "579": "MulticolContainerTest::::overflowImageWithForcedPlacementTest()",
      "580": "MulticolContainerTest::::overflowImageWithForcedPlacementTest()",
      "581": "MulticolContainerTest::::overflowImageWithForcedPlacementTest()",
      "582": "MulticolContainerTest::::overflowImageWithForcedPlacementTest()",
      "583": "MulticolContainerTest::::overflowImageWithForcedPlacementTest()",
      "584": "MulticolContainerTest::::overflowImageWithForcedPlacementTest()",
      "585": "MulticolContainerTest::::overflowImageWithForcedPlacementTest()",
      "586": "MulticolContainerTest::::overflowImageWithForcedPlacementTest()",
      "587": "MulticolContainerTest::::overflowImageWithForcedPlacementTest()",
      "588": "MulticolContainerTest::::overflowImageWithForcedPlacementTest()",
      "589": "MulticolContainerTest::::overflowImageWithForcedPlacementTest()",
      "590": "MulticolContainerTest::::overflowImageWithForcedPlacementTest()",
      "591": "MulticolContainerTest::::overflowImageWithForcedPlacementTest()",
      "592": "MulticolContainerTest::::overflowImageWithForcedPlacementTest()",
      "593": "MulticolContainerTest::::overflowImageWithForcedPlacementTest()",
      "594": "MulticolContainerTest::::overflowImageWithForcedPlacementTest()",
      "595": "MulticolContainerTest::::overflowImageWithForcedPlacementTest()",
      "596": "MulticolContainerTest::::overflowImageWithForcedPlacementTest()",
      "597": "MulticolContainerTest::::overflowImageWithForcedPlacementTest()",
      "598": "MulticolContainerTest::::overflowImageWithForcedPlacementTest()",
      "599": "MulticolContainerTest::::overflowImageWithForcedPlacementTest()",
      "600": "MulticolContainerTest::::overflowImageWithForcedPlacementTest()",
      "602": "MulticolContainerTest::::imageForcedPlacementAndKeepTogetherTest()",
      "603": "MulticolContainerTest::::imageForcedPlacementAndKeepTogetherTest()",
      "604": "MulticolContainerTest::::imageForcedPlacementAndKeepTogetherTest()",
      "605": "MulticolContainerTest::::imageForcedPlacementAndKeepTogetherTest()",
      "606": "MulticolContainerTest::::imageForcedPlacementAndKeepTogetherTest()",
      "607": "MulticolContainerTest::::imageForcedPlacementAndKeepTogetherTest()",
      "608": "MulticolContainerTest::::imageForcedPlacementAndKeepTogetherTest()",
      "609": "MulticolContainerTest::::imageForcedPlacementAndKeepTogetherTest()",
      "610": "MulticolContainerTest::::imageForcedPlacementAndKeepTogetherTest()",
      "611": "MulticolContainerTest::::imageForcedPlacementAndKeepTogetherTest()",
      "612": "MulticolContainerTest::::imageForcedPlacementAndKeepTogetherTest()",
      "613": "MulticolContainerTest::::imageForcedPlacementAndKeepTogetherTest()",
      "614": "MulticolContainerTest::::imageForcedPlacementAndKeepTogetherTest()",
      "615": "MulticolContainerTest::::imageForcedPlacementAndKeepTogetherTest()",
      "616": "MulticolContainerTest::::imageForcedPlacementAndKeepTogetherTest()",
      "617": "MulticolContainerTest::::imageForcedPlacementAndKeepTogetherTest()",
      "618": "MulticolContainerTest::::imageForcedPlacementAndKeepTogetherTest()",
      "619": "MulticolContainerTest::::imageForcedPlacementAndKeepTogetherTest()",
      "620": "MulticolContainerTest::::imageForcedPlacementAndKeepTogetherTest()",
      "621": "MulticolContainerTest::::imageForcedPlacementAndKeepTogetherTest()",
      "622": "MulticolContainerTest::::imageForcedPlacementAndKeepTogetherTest()",
      "623": "MulticolContainerTest::::imageForcedPlacementAndKeepTogetherTest()",
      "624": "MulticolContainerTest::::imageForcedPlacementAndKeepTogetherTest()",
      "625": "MulticolContainerTest::::imageForcedPlacementAndKeepTogetherTest()",
      "626": "MulticolContainerTest::::imageForcedPlacementAndKeepTogetherTest()",
      "627": "MulticolContainerTest::::imageForcedPlacementAndKeepTogetherTest()",
      "628": "MulticolContainerTest::::imageForcedPlacementAndKeepTogetherTest()",
      "630": "MulticolContainerTest::::imageBiggerThanPageTest()",
      "631": "MulticolContainerTest::::imageBiggerThanPageTest()",
      "632": "MulticolContainerTest::::imageBiggerThanPageTest()",
      "633": "MulticolContainerTest::::imageBiggerThanPageTest()",
      "634": "MulticolContainerTest::::imageBiggerThanPageTest()",
      "635": "MulticolContainerTest::::imageBiggerThanPageTest()",
      "636": "MulticolContainerTest::::imageBiggerThanPageTest()",
      "637": "MulticolContainerTest::::imageBiggerThanPageTest()",
      "638": "MulticolContainerTest::::imageBiggerThanPageTest()",
      "639": "MulticolContainerTest::::imageBiggerThanPageTest()",
      "640": "MulticolContainerTest::::imageBiggerThanPageTest()",
      "641": "MulticolContainerTest::::imageBiggerThanPageTest()",
      "642": "MulticolContainerTest::::imageBiggerThanPageTest()",
      "643": "MulticolContainerTest::::imageBiggerThanPageTest()",
      "644": "MulticolContainerTest::::imageBiggerThanPageTest()",
      "645": "MulticolContainerTest::::imageBiggerThanPageTest()",
      "646": "MulticolContainerTest::::imageBiggerThanPageTest()",
      "647": "MulticolContainerTest::::imageBiggerThanPageTest()",
      "649": "MulticolContainerTest::::overflowingDivWithParagraphMultipageTest()",
      "650": "MulticolContainerTest::::overflowingDivWithParagraphMultipageTest()",
      "651": "MulticolContainerTest::::overflowingDivWithParagraphMultipageTest()",
      "652": "MulticolContainerTest::::overflowingDivWithParagraphMultipageTest()",
      "653": "MulticolContainerTest::::overflowingDivWithParagraphMultipageTest()",
      "654": "MulticolContainerTest::::overflowingDivWithParagraphMultipageTest()",
      "655": "MulticolContainerTest::::overflowingDivWithParagraphMultipageTest()",
      "656": "MulticolContainerTest::::overflowingDivWithParagraphMultipageTest()",
      "657": "MulticolContainerTest::::overflowingDivWithParagraphMultipageTest()",
      "658": "MulticolContainerTest::::overflowingDivWithParagraphMultipageTest()",
      "659": "MulticolContainerTest::::overflowingDivWithParagraphMultipageTest()",
      "660": "MulticolContainerTest::::overflowingDivWithParagraphMultipageTest()",
      "661": "MulticolContainerTest::::overflowingDivWithParagraphMultipageTest()",
      "662": "MulticolContainerTest::::overflowingDivWithParagraphMultipageTest()",
      "663": "MulticolContainerTest::::overflowingDivWithParagraphMultipageTest()",
      "664": "MulticolContainerTest::::overflowingDivWithParagraphMultipageTest()",
      "665": "MulticolContainerTest::::overflowingDivWithParagraphMultipageTest()",
      "666": "MulticolContainerTest::::overflowingDivWithParagraphMultipageTest()",
      "667": "MulticolContainerTest::::overflowingDivWithParagraphMultipageTest()",
      "668": "MulticolContainerTest::::overflowingDivWithParagraphMultipageTest()",
      "669": "MulticolContainerTest::::overflowingDivWithParagraphMultipageTest()",
      "670": "MulticolContainerTest::::overflowingDivWithParagraphMultipageTest()",
      "671": "MulticolContainerTest::::overflowingDivWithParagraphMultipageTest()",
      "672": "MulticolContainerTest::::overflowingDivWithParagraphMultipageTest()",
      "673": "MulticolContainerTest::::overflowingDivWithParagraphMultipageTest()",
      "674": "MulticolContainerTest::::overflowingDivWithParagraphMultipageTest()",
      "675": "MulticolContainerTest::::overflowingDivWithParagraphMultipageTest()",
      "676": "MulticolContainerTest::::overflowingDivWithParagraphMultipageTest()",
      "677": "MulticolContainerTest::::overflowingDivWithParagraphMultipageTest()",
      "678": "MulticolContainerTest::::overflowingDivWithParagraphMultipageTest()",
      "680": "MulticolContainerTest::::marginCantFitCurrentPageTest()",
      "681": "MulticolContainerTest::::marginCantFitCurrentPageTest()",
      "682": "MulticolContainerTest::::marginCantFitCurrentPageTest()",
      "683": "MulticolContainerTest::::marginCantFitCurrentPageTest()",
      "684": "MulticolContainerTest::::marginCantFitCurrentPageTest()",
      "685": "MulticolContainerTest::::marginCantFitCurrentPageTest()",
      "686": "MulticolContainerTest::::marginCantFitCurrentPageTest()",
      "687": "MulticolContainerTest::::marginCantFitCurrentPageTest()",
      "688": "MulticolContainerTest::::marginCantFitCurrentPageTest()",
      "689": "MulticolContainerTest::::marginCantFitCurrentPageTest()",
      "690": "MulticolContainerTest::::marginCantFitCurrentPageTest()",
      "691": "MulticolContainerTest::::marginCantFitCurrentPageTest()",
      "692": "MulticolContainerTest::::marginCantFitCurrentPageTest()",
      "693": "MulticolContainerTest::::marginCantFitCurrentPageTest()",
      "694": "MulticolContainerTest::::marginCantFitCurrentPageTest()",
      "695": "MulticolContainerTest::::marginCantFitCurrentPageTest()",
      "696": "MulticolContainerTest::::marginCantFitCurrentPageTest()",
      "697": "MulticolContainerTest::::marginCantFitCurrentPageTest()",
      "698": "MulticolContainerTest::::marginCantFitCurrentPageTest()",
      "699": "MulticolContainerTest::::marginCantFitCurrentPageTest()",
      "700": "MulticolContainerTest::::marginCantFitCurrentPageTest()",
      "701": "MulticolContainerTest::::marginCantFitCurrentPageTest()",
      "702": "MulticolContainerTest::::marginCantFitCurrentPageTest()",
      "703": "MulticolContainerTest::::marginCantFitCurrentPageTest()",
      "704": "MulticolContainerTest::::marginCantFitCurrentPageTest()",
      "705": "MulticolContainerTest::::marginCantFitCurrentPageTest()",
      "706": "MulticolContainerTest::::marginCantFitCurrentPageTest()",
      "707": "MulticolContainerTest::::marginCantFitCurrentPageTest()",
      "708": "MulticolContainerTest::::marginCantFitCurrentPageTest()",
      "709": "MulticolContainerTest::::marginCantFitCurrentPageTest()",
      "710": "MulticolContainerTest::::marginCantFitCurrentPageTest()",
      "712": "MulticolContainerTest::::paddingCantFitCurrentPageTest()",
      "713": "MulticolContainerTest::::paddingCantFitCurrentPageTest()",
      "714": "MulticolContainerTest::::paddingCantFitCurrentPageTest()",
      "715": "MulticolContainerTest::::paddingCantFitCurrentPageTest()",
      "716": "MulticolContainerTest::::paddingCantFitCurrentPageTest()",
      "717": "MulticolContainerTest::::paddingCantFitCurrentPageTest()",
      "718": "MulticolContainerTest::::paddingCantFitCurrentPageTest()",
      "719": "MulticolContainerTest::::paddingCantFitCurrentPageTest()",
      "720": "MulticolContainerTest::::paddingCantFitCurrentPageTest()",
      "721": "MulticolContainerTest::::paddingCantFitCurrentPageTest()",
      "722": "MulticolContainerTest::::paddingCantFitCurrentPageTest()",
      "723": "MulticolContainerTest::::paddingCantFitCurrentPageTest()",
      "724": "MulticolContainerTest::::paddingCantFitCurrentPageTest()",
      "725": "MulticolContainerTest::::paddingCantFitCurrentPageTest()",
      "726": "MulticolContainerTest::::paddingCantFitCurrentPageTest()",
      "727": "MulticolContainerTest::::paddingCantFitCurrentPageTest()",
      "728": "MulticolContainerTest::::paddingCantFitCurrentPageTest()",
      "729": "MulticolContainerTest::::paddingCantFitCurrentPageTest()",
      "730": "MulticolContainerTest::::paddingCantFitCurrentPageTest()",
      "731": "MulticolContainerTest::::paddingCantFitCurrentPageTest()",
      "732": "MulticolContainerTest::::paddingCantFitCurrentPageTest()",
      "733": "MulticolContainerTest::::paddingCantFitCurrentPageTest()",
      "734": "MulticolContainerTest::::paddingCantFitCurrentPageTest()",
      "735": "MulticolContainerTest::::paddingCantFitCurrentPageTest()",
      "736": "MulticolContainerTest::::paddingCantFitCurrentPageTest()",
      "737": "MulticolContainerTest::::paddingCantFitCurrentPageTest()",
      "738": "MulticolContainerTest::::paddingCantFitCurrentPageTest()",
      "739": "MulticolContainerTest::::paddingCantFitCurrentPageTest()",
      "740": "MulticolContainerTest::::paddingCantFitCurrentPageTest()",
      "741": "MulticolContainerTest::::paddingCantFitCurrentPageTest()",
      "742": "MulticolContainerTest::::paddingCantFitCurrentPageTest()",
      "744": "MulticolContainerTest::::keepTogetherBlockingLayoutTest()",
      "745": "MulticolContainerTest::::keepTogetherBlockingLayoutTest()",
      "746": "MulticolContainerTest::::keepTogetherBlockingLayoutTest()",
      "747": "MulticolContainerTest::::keepTogetherBlockingLayoutTest()",
      "748": "MulticolContainerTest::::keepTogetherBlockingLayoutTest()",
      "749": "MulticolContainerTest::::keepTogetherBlockingLayoutTest()",
      "750": "MulticolContainerTest::::keepTogetherBlockingLayoutTest()",
      "751": "MulticolContainerTest::::keepTogetherBlockingLayoutTest()",
      "752": "MulticolContainerTest::::keepTogetherBlockingLayoutTest()",
      "753": "MulticolContainerTest::::keepTogetherBlockingLayoutTest()",
      "754": "MulticolContainerTest::::keepTogetherBlockingLayoutTest()",
      "755": "MulticolContainerTest::::keepTogetherBlockingLayoutTest()",
      "756": "MulticolContainerTest::::keepTogetherBlockingLayoutTest()",
      "757": "MulticolContainerTest::::keepTogetherBlockingLayoutTest()",
      "758": "MulticolContainerTest::::keepTogetherBlockingLayoutTest()",
      "759": "MulticolContainerTest::::keepTogetherBlockingLayoutTest()",
      "760": "MulticolContainerTest::::keepTogetherBlockingLayoutTest()",
      "761": "MulticolContainerTest::::keepTogetherBlockingLayoutTest()",
      "762": "MulticolContainerTest::::keepTogetherBlockingLayoutTest()",
      "763": "MulticolContainerTest::::keepTogetherBlockingLayoutTest()",
      "764": "MulticolContainerTest::::keepTogetherBlockingLayoutTest()",
      "765": "MulticolContainerTest::::keepTogetherBlockingLayoutTest()",
      "766": "MulticolContainerTest::::keepTogetherBlockingLayoutTest()",
      "767": "MulticolContainerTest::::keepTogetherBlockingLayoutTest()",
      "768": "MulticolContainerTest::::keepTogetherBlockingLayoutTest()",
      "769": "MulticolContainerTest::::keepTogetherBlockingLayoutTest()",
      "770": "MulticolContainerTest::::keepTogetherBlockingLayoutTest()",
      "771": "MulticolContainerTest::::keepTogetherBlockingLayoutTest()",
      "772": "MulticolContainerTest::::keepTogetherBlockingLayoutTest()",
      "773": "MulticolContainerTest::::keepTogetherBlockingLayoutTest()",
      "775": "MulticolContainerTest::::continuousColumContainerSetWidth()",
      "776": "MulticolContainerTest::::continuousColumContainerSetWidth()",
      "777": "MulticolContainerTest::::continuousColumContainerSetWidth()",
      "778": "MulticolContainerTest::::continuousColumContainerSetWidth()",
      "779": "MulticolContainerTest::::continuousColumContainerSetWidth()",
      "780": "MulticolContainerTest::::continuousColumContainerSetWidth()",
      "781": "MulticolContainerTest::::continuousColumContainerSetWidth()",
      "782": "MulticolContainerTest::::continuousColumContainerSetWidth()",
      "783": "MulticolContainerTest::::continuousColumContainerSetWidth()",
      "784": "MulticolContainerTest::::continuousColumContainerSetWidth()",
      "785": "MulticolContainerTest::::continuousColumContainerSetWidth()",
      "786": "MulticolContainerTest::::continuousColumContainerSetWidth()",
      "787": "MulticolContainerTest::::continuousColumContainerSetWidth()",
      "788": "MulticolContainerTest::::continuousColumContainerSetWidth()",
      "790": "MulticolContainerTest::::continuousColumContainerSetHeightBigger()",
      "791": "MulticolContainerTest::::continuousColumContainerSetHeightBigger()",
      "792": "MulticolContainerTest::::continuousColumContainerSetHeightBigger()",
      "793": "MulticolContainerTest::::continuousColumContainerSetHeightBigger()",
      "794": "MulticolContainerTest::::continuousColumContainerSetHeightBigger()",
      "795": "MulticolContainerTest::::continuousColumContainerSetHeightBigger()",
      "796": "MulticolContainerTest::::continuousColumContainerSetHeightBigger()",
      "797": "MulticolContainerTest::::continuousColumContainerSetHeightBigger()",
      "798": "MulticolContainerTest::::continuousColumContainerSetHeightBigger()",
      "799": "MulticolContainerTest::::continuousColumContainerSetHeightBigger()",
      "801": "MulticolContainerTest::::widthBorderTest()",
      "802": "MulticolContainerTest::::widthBorderTest()",
      "803": "MulticolContainerTest::::widthBorderTest()",
      "804": "MulticolContainerTest::::widthBorderTest()",
      "805": "MulticolContainerTest::::widthBorderTest()",
      "806": "MulticolContainerTest::::widthBorderTest()",
      "807": "MulticolContainerTest::::widthBorderTest()",
      "808": "MulticolContainerTest::::widthBorderTest()",
      "809": "MulticolContainerTest::::widthBorderTest()",
      "810": "MulticolContainerTest::::widthBorderTest()",
      "812": "MulticolContainerTest::::heightBorderTest()",
      "813": "MulticolContainerTest::::heightBorderTest()",
      "814": "MulticolContainerTest::::heightBorderTest()",
      "815": "MulticolContainerTest::::heightBorderTest()",
      "816": "MulticolContainerTest::::heightBorderTest()",
      "817": "MulticolContainerTest::::heightBorderTest()",
      "818": "MulticolContainerTest::::heightBorderTest()",
      "819": "MulticolContainerTest::::heightBorderTest()",
      "820": "MulticolContainerTest::::heightBorderTest()",
      "821": "MulticolContainerTest::::heightBorderTest()",
      "822": "MulticolContainerTest::::heightBorderTest()",
      "824": "MulticolContainerTest::::widthPaddingTest()",
      "825": "MulticolContainerTest::::widthPaddingTest()",
      "826": "MulticolContainerTest::::widthPaddingTest()",
      "827": "MulticolContainerTest::::widthPaddingTest()",
      "828": "MulticolContainerTest::::widthPaddingTest()",
      "829": "MulticolContainerTest::::widthPaddingTest()",
      "830": "MulticolContainerTest::::widthPaddingTest()",
      "831": "MulticolContainerTest::::widthPaddingTest()",
      "832": "MulticolContainerTest::::widthPaddingTest()",
      "833": "MulticolContainerTest::::widthPaddingTest()",
      "834": "MulticolContainerTest::::widthPaddingTest()",
      "836": "MulticolContainerTest::::heightPaddingTest()",
      "837": "MulticolContainerTest::::heightPaddingTest()",
      "838": "MulticolContainerTest::::heightPaddingTest()",
      "839": "MulticolContainerTest::::heightPaddingTest()",
      "840": "MulticolContainerTest::::heightPaddingTest()",
      "841": "MulticolContainerTest::::heightPaddingTest()",
      "842": "MulticolContainerTest::::heightPaddingTest()",
      "843": "MulticolContainerTest::::heightPaddingTest()",
      "844": "MulticolContainerTest::::heightPaddingTest()",
      "845": "MulticolContainerTest::::heightPaddingTest()",
      "846": "MulticolContainerTest::::heightPaddingTest()",
      "847": "MulticolContainerTest::::heightPaddingTest()",
      "850": "MulticolContainerTest::::heightMarginTest()",
      "851": "MulticolContainerTest::::heightMarginTest()",
      "852": "MulticolContainerTest::::heightMarginTest()",
      "853": "MulticolContainerTest::::heightMarginTest()",
      "854": "MulticolContainerTest::::heightMarginTest()",
      "855": "MulticolContainerTest::::heightMarginTest()",
      "856": "MulticolContainerTest::::heightMarginTest()",
      "857": "MulticolContainerTest::::heightMarginTest()",
      "858": "MulticolContainerTest::::heightMarginTest()",
      "859": "MulticolContainerTest::::heightMarginTest()",
      "860": "MulticolContainerTest::::heightMarginTest()",
      "861": "MulticolContainerTest::::heightMarginTest()",
      "862": "MulticolContainerTest::::heightMarginTest()",
      "865": "MulticolContainerTest::::widthMarginTest()",
      "866": "MulticolContainerTest::::widthMarginTest()",
      "867": "MulticolContainerTest::::widthMarginTest()",
      "868": "MulticolContainerTest::::widthMarginTest()",
      "869": "MulticolContainerTest::::widthMarginTest()",
      "870": "MulticolContainerTest::::widthMarginTest()",
      "871": "MulticolContainerTest::::widthMarginTest()",
      "872": "MulticolContainerTest::::widthMarginTest()",
      "873": "MulticolContainerTest::::widthMarginTest()",
      "874": "MulticolContainerTest::::widthMarginTest()",
      "875": "MulticolContainerTest::::widthMarginTest()",
      "878": "MulticolContainerTest::::widthHeightMarginTest()",
      "879": "MulticolContainerTest::::widthHeightMarginTest()",
      "880": "MulticolContainerTest::::widthHeightMarginTest()",
      "881": "MulticolContainerTest::::widthHeightMarginTest()",
      "882": "MulticolContainerTest::::widthHeightMarginTest()",
      "883": "MulticolContainerTest::::widthHeightMarginTest()",
      "884": "MulticolContainerTest::::widthHeightMarginTest()",
      "885": "MulticolContainerTest::::widthHeightMarginTest()",
      "886": "MulticolContainerTest::::widthHeightMarginTest()",
      "887": "MulticolContainerTest::::widthHeightMarginTest()",
      "888": "MulticolContainerTest::::widthHeightMarginTest()",
      "889": "MulticolContainerTest::::widthHeightMarginTest()",
      "891": "MulticolContainerTest::::minHeightTest()",
      "892": "MulticolContainerTest::::minHeightTest()",
      "893": "MulticolContainerTest::::minHeightTest()",
      "894": "MulticolContainerTest::::minHeightTest()",
      "895": "MulticolContainerTest::::minHeightTest()",
      "896": "MulticolContainerTest::::minHeightTest()",
      "897": "MulticolContainerTest::::minHeightTest()",
      "898": "MulticolContainerTest::::minHeightTest()",
      "899": "MulticolContainerTest::::minHeightTest()",
      "900": "MulticolContainerTest::::minHeightTest()",
      "901": "MulticolContainerTest::::minHeightTest()",
      "904": "MulticolContainerTest::::maxHeightTest()",
      "905": "MulticolContainerTest::::maxHeightTest()",
      "906": "MulticolContainerTest::::maxHeightTest()",
      "907": "MulticolContainerTest::::maxHeightTest()",
      "908": "MulticolContainerTest::::maxHeightTest()",
      "909": "MulticolContainerTest::::maxHeightTest()",
      "910": "MulticolContainerTest::::maxHeightTest()",
      "911": "MulticolContainerTest::::maxHeightTest()",
      "912": "MulticolContainerTest::::maxHeightTest()",
      "913": "MulticolContainerTest::::maxHeightTest()",
      "914": "MulticolContainerTest::::maxHeightTest()",
      "916": "MulticolContainerTest::::minWidth()",
      "917": "MulticolContainerTest::::minWidth()",
      "918": "MulticolContainerTest::::minWidth()",
      "919": "MulticolContainerTest::::minWidth()",
      "920": "MulticolContainerTest::::minWidth()",
      "921": "MulticolContainerTest::::minWidth()",
      "922": "MulticolContainerTest::::minWidth()",
      "923": "MulticolContainerTest::::minWidth()",
      "924": "MulticolContainerTest::::minWidth()",
      "925": "MulticolContainerTest::::minWidth()",
      "927": "MulticolContainerTest::::minWidthBiggerThenPage()",
      "928": "MulticolContainerTest::::minWidthBiggerThenPage()",
      "929": "MulticolContainerTest::::minWidthBiggerThenPage()",
      "930": "MulticolContainerTest::::minWidthBiggerThenPage()",
      "931": "MulticolContainerTest::::minWidthBiggerThenPage()",
      "932": "MulticolContainerTest::::minWidthBiggerThenPage()",
      "933": "MulticolContainerTest::::minWidthBiggerThenPage()",
      "934": "MulticolContainerTest::::minWidthBiggerThenPage()",
      "935": "MulticolContainerTest::::minWidthBiggerThenPage()",
      "936": "MulticolContainerTest::::minWidthBiggerThenPage()",
      "938": "MulticolContainerTest::::maxWidth()",
      "939": "MulticolContainerTest::::maxWidth()",
      "940": "MulticolContainerTest::::maxWidth()",
      "941": "MulticolContainerTest::::maxWidth()",
      "942": "MulticolContainerTest::::maxWidth()",
      "943": "MulticolContainerTest::::maxWidth()",
      "944": "MulticolContainerTest::::maxWidth()",
      "945": "MulticolContainerTest::::maxWidth()",
      "946": "MulticolContainerTest::::maxWidth()",
      "947": "MulticolContainerTest::::maxWidth()",
      "950": "MulticolContainerTest::::widthMultiPage()",
      "951": "MulticolContainerTest::::widthMultiPage()",
      "952": "MulticolContainerTest::::widthMultiPage()",
      "953": "MulticolContainerTest::::widthMultiPage()",
      "954": "MulticolContainerTest::::widthMultiPage()",
      "955": "MulticolContainerTest::::widthMultiPage()",
      "956": "MulticolContainerTest::::widthMultiPage()",
      "957": "MulticolContainerTest::::widthMultiPage()",
      "958": "MulticolContainerTest::::widthMultiPage()",
      "959": "MulticolContainerTest::::widthMultiPage()",
      "960": "MulticolContainerTest::::widthMultiPage()",
      "961": "MulticolContainerTest::::widthMultiPage()",
      "962": "MulticolContainerTest::::widthMultiPage()",
      "963": "MulticolContainerTest::::widthMultiPage()",
      "964": "MulticolContainerTest::::widthMultiPage()",
      "965": "MulticolContainerTest::::widthMultiPage()",
      "966": "MulticolContainerTest::::widthMultiPage()",
      "967": "MulticolContainerTest::::widthMultiPage()",
      "968": "MulticolContainerTest::::widthMultiPage()",
      "969": "MulticolContainerTest::::widthMultiPage()",
      "970": "MulticolContainerTest::::widthMultiPage()",
      "972": "MulticolContainerTest::::heightMultiPage()",
      "973": "MulticolContainerTest::::heightMultiPage()",
      "974": "MulticolContainerTest::::heightMultiPage()",
      "975": "MulticolContainerTest::::heightMultiPage()",
      "976": "MulticolContainerTest::::heightMultiPage()",
      "977": "MulticolContainerTest::::heightMultiPage()",
      "978": "MulticolContainerTest::::heightMultiPage()",
      "979": "MulticolContainerTest::::heightMultiPage()",
      "980": "MulticolContainerTest::::heightMultiPage()",
      "981": "MulticolContainerTest::::heightMultiPage()",
      "982": "MulticolContainerTest::::heightMultiPage()",
      "983": "MulticolContainerTest::::heightMultiPage()",
      "984": "MulticolContainerTest::::heightMultiPage()",
      "985": "MulticolContainerTest::::heightMultiPage()",
      "986": "MulticolContainerTest::::heightMultiPage()",
      "987": "MulticolContainerTest::::heightMultiPage()",
      "988": "MulticolContainerTest::::heightMultiPage()",
      "989": "MulticolContainerTest::::heightMultiPage()",
      "990": "MulticolContainerTest::::heightMultiPage()",
      "991": "MulticolContainerTest::::heightMultiPage()",
      "992": "MulticolContainerTest::::heightMultiPage()",
      "993": "MulticolContainerTest::::heightMultiPage()",
      "995": "MulticolContainerTest::::continuousColumContainerSetHeightSmaller()",
      "996": "MulticolContainerTest::::continuousColumContainerSetHeightSmaller()",
      "997": "MulticolContainerTest::::continuousColumContainerSetHeightSmaller()",
      "998": "MulticolContainerTest::::continuousColumContainerSetHeightSmaller()",
      "999": "MulticolContainerTest::::continuousColumContainerSetHeightSmaller()",
      "1000": "MulticolContainerTest::::continuousColumContainerSetHeightSmaller()",
      "1001": "MulticolContainerTest::::continuousColumContainerSetHeightSmaller()",
      "1002": "MulticolContainerTest::::continuousColumContainerSetHeightSmaller()",
      "1003": "MulticolContainerTest::::continuousColumContainerSetHeightSmaller()",
      "1004": "MulticolContainerTest::::continuousColumContainerSetHeightSmaller()",
      "1005": "MulticolContainerTest::::continuousColumContainerSetHeightSmaller()",
      "1007": "MulticolContainerTest::::paragraphWithColumnWidthTest()",
      "1008": "MulticolContainerTest::::paragraphWithColumnWidthTest()",
      "1009": "MulticolContainerTest::::paragraphWithColumnWidthTest()",
      "1010": "MulticolContainerTest::::paragraphWithColumnWidthTest()",
      "1011": "MulticolContainerTest::::paragraphWithColumnWidthTest()",
      "1012": "MulticolContainerTest::::paragraphWithColumnWidthTest()",
      "1013": "MulticolContainerTest::::paragraphWithColumnWidthTest()",
      "1014": "MulticolContainerTest::::paragraphWithColumnWidthTest()",
      "1015": "MulticolContainerTest::::paragraphWithColumnWidthTest()",
      "1016": "MulticolContainerTest::::paragraphWithColumnWidthTest()",
      "1017": "MulticolContainerTest::::paragraphWithColumnWidthTest()",
      "1018": "MulticolContainerTest::::paragraphWithColumnWidthTest()",
      "1019": "MulticolContainerTest::::paragraphWithColumnWidthTest()",
      "1020": "MulticolContainerTest::::paragraphWithColumnWidthTest()",
      "1021": "MulticolContainerTest::::paragraphWithColumnWidthTest()",
      "1023": "MulticolContainerTest::::paragraphWithColumnWidthAndColumnCountTest()",
      "1024": "MulticolContainerTest::::paragraphWithColumnWidthAndColumnCountTest()",
      "1025": "MulticolContainerTest::::paragraphWithColumnWidthAndColumnCountTest()",
      "1026": "MulticolContainerTest::::paragraphWithColumnWidthAndColumnCountTest()",
      "1027": "MulticolContainerTest::::paragraphWithColumnWidthAndColumnCountTest()",
      "1028": "MulticolContainerTest::::paragraphWithColumnWidthAndColumnCountTest()",
      "1029": "MulticolContainerTest::::paragraphWithColumnWidthAndColumnCountTest()",
      "1030": "MulticolContainerTest::::paragraphWithColumnWidthAndColumnCountTest()",
      "1031": "MulticolContainerTest::::paragraphWithColumnWidthAndColumnCountTest()",
      "1032": "MulticolContainerTest::::paragraphWithColumnWidthAndColumnCountTest()",
      "1033": "MulticolContainerTest::::paragraphWithColumnWidthAndColumnCountTest()",
      "1034": "MulticolContainerTest::::paragraphWithColumnWidthAndColumnCountTest()",
      "1035": "MulticolContainerTest::::paragraphWithColumnWidthAndColumnCountTest()",
      "1036": "MulticolContainerTest::::paragraphWithColumnWidthAndColumnCountTest()",
      "1037": "MulticolContainerTest::::paragraphWithColumnWidthAndColumnCountTest()",
      "1038": "MulticolContainerTest::::paragraphWithColumnWidthAndColumnCountTest()",
      "1040": "MulticolContainerTest::::paragraphWithInvalidColumnValuesTest()",
      "1041": "MulticolContainerTest::::paragraphWithInvalidColumnValuesTest()",
      "1042": "MulticolContainerTest::::paragraphWithInvalidColumnValuesTest()",
      "1043": "MulticolContainerTest::::paragraphWithInvalidColumnValuesTest()",
      "1044": "MulticolContainerTest::::paragraphWithInvalidColumnValuesTest()",
      "1045": "MulticolContainerTest::::paragraphWithInvalidColumnValuesTest()",
      "1046": "MulticolContainerTest::::paragraphWithInvalidColumnValuesTest()",
      "1047": "MulticolContainerTest::::paragraphWithInvalidColumnValuesTest()",
      "1048": "MulticolContainerTest::::paragraphWithInvalidColumnValuesTest()",
      "1049": "MulticolContainerTest::::paragraphWithInvalidColumnValuesTest()",
      "1050": "MulticolContainerTest::::paragraphWithInvalidColumnValuesTest()",
      "1051": "MulticolContainerTest::::paragraphWithInvalidColumnValuesTest()",
      "1052": "MulticolContainerTest::::paragraphWithInvalidColumnValuesTest()",
      "1053": "MulticolContainerTest::::paragraphWithInvalidColumnValuesTest()",
      "1054": "MulticolContainerTest::::paragraphWithInvalidColumnValuesTest()",
      "1056": "MulticolContainerTest::::paragraphWithColumnWidthAndGapTest()",
      "1057": "MulticolContainerTest::::paragraphWithColumnWidthAndGapTest()",
      "1058": "MulticolContainerTest::::paragraphWithColumnWidthAndGapTest()",
      "1059": "MulticolContainerTest::::paragraphWithColumnWidthAndGapTest()",
      "1060": "MulticolContainerTest::::paragraphWithColumnWidthAndGapTest()",
      "1061": "MulticolContainerTest::::paragraphWithColumnWidthAndGapTest()",
      "1062": "MulticolContainerTest::::paragraphWithColumnWidthAndGapTest()",
      "1063": "MulticolContainerTest::::paragraphWithColumnWidthAndGapTest()",
      "1064": "MulticolContainerTest::::paragraphWithColumnWidthAndGapTest()",
      "1065": "MulticolContainerTest::::paragraphWithColumnWidthAndGapTest()",
      "1066": "MulticolContainerTest::::paragraphWithColumnWidthAndGapTest()",
      "1067": "MulticolContainerTest::::paragraphWithColumnWidthAndGapTest()",
      "1068": "MulticolContainerTest::::paragraphWithColumnWidthAndGapTest()",
      "1069": "MulticolContainerTest::::paragraphWithColumnWidthAndGapTest()",
      "1070": "MulticolContainerTest::::paragraphWithColumnWidthAndGapTest()",
      "1072": "MulticolContainerTest::::paragraphWithColumnCountAndGapTest()",
      "1073": "MulticolContainerTest::::paragraphWithColumnCountAndGapTest()",
      "1074": "MulticolContainerTest::::paragraphWithColumnCountAndGapTest()",
      "1075": "MulticolContainerTest::::paragraphWithColumnCountAndGapTest()",
      "1076": "MulticolContainerTest::::paragraphWithColumnCountAndGapTest()",
      "1077": "MulticolContainerTest::::paragraphWithColumnCountAndGapTest()",
      "1078": "MulticolContainerTest::::paragraphWithColumnCountAndGapTest()",
      "1079": "MulticolContainerTest::::paragraphWithColumnCountAndGapTest()",
      "1080": "MulticolContainerTest::::paragraphWithColumnCountAndGapTest()",
      "1081": "MulticolContainerTest::::paragraphWithColumnCountAndGapTest()",
      "1082": "MulticolContainerTest::::paragraphWithColumnCountAndGapTest()",
      "1083": "MulticolContainerTest::::paragraphWithColumnCountAndGapTest()",
      "1084": "MulticolContainerTest::::paragraphWithColumnCountAndGapTest()",
      "1085": "MulticolContainerTest::::paragraphWithColumnCountAndGapTest()",
      "1086": "MulticolContainerTest::::paragraphWithColumnCountAndGapTest()",
      "1088": "MulticolContainerTest::::paragraphWithSimpleSolidColumnGapTest()",
      "1089": "MulticolContainerTest::::paragraphWithSimpleSolidColumnGapTest()",
      "1090": "MulticolContainerTest::::paragraphWithSimpleSolidColumnGapTest()",
      "1091": "MulticolContainerTest::::paragraphWithSimpleSolidColumnGapTest()",
      "1092": "MulticolContainerTest::::paragraphWithSimpleSolidColumnGapTest()",
      "1093": "MulticolContainerTest::::paragraphWithSimpleSolidColumnGapTest()",
      "1094": "MulticolContainerTest::::paragraphWithSimpleSolidColumnGapTest()",
      "1095": "MulticolContainerTest::::paragraphWithSimpleSolidColumnGapTest()",
      "1096": "MulticolContainerTest::::paragraphWithSimpleSolidColumnGapTest()",
      "1097": "MulticolContainerTest::::paragraphWithSimpleSolidColumnGapTest()",
      "1098": "MulticolContainerTest::::paragraphWithSimpleSolidColumnGapTest()",
      "1099": "MulticolContainerTest::::paragraphWithSimpleSolidColumnGapTest()",
      "1100": "MulticolContainerTest::::paragraphWithSimpleSolidColumnGapTest()",
      "1101": "MulticolContainerTest::::paragraphWithSimpleSolidColumnGapTest()",
      "1102": "MulticolContainerTest::::paragraphWithSimpleSolidColumnGapTest()",
      "1103": "MulticolContainerTest::::paragraphWithSimpleSolidColumnGapTest()",
      "1106": "MulticolContainerTest::::divWithSimpleSolidColumnGapTest()",
      "1107": "MulticolContainerTest::::divWithSimpleSolidColumnGapTest()",
      "1108": "MulticolContainerTest::::divWithSimpleSolidColumnGapTest()",
      "1109": "MulticolContainerTest::::divWithSimpleSolidColumnGapTest()",
      "1110": "MulticolContainerTest::::divWithSimpleSolidColumnGapTest()",
      "1111": "MulticolContainerTest::::divWithSimpleSolidColumnGapTest()",
      "1112": "MulticolContainerTest::::divWithSimpleSolidColumnGapTest()",
      "1113": "MulticolContainerTest::::divWithSimpleSolidColumnGapTest()",
      "1114": "MulticolContainerTest::::divWithSimpleSolidColumnGapTest()",
      "1115": "MulticolContainerTest::::divWithSimpleSolidColumnGapTest()",
      "1116": "MulticolContainerTest::::divWithSimpleSolidColumnGapTest()",
      "1117": "MulticolContainerTest::::divWithSimpleSolidColumnGapTest()",
      "1118": "MulticolContainerTest::::divWithSimpleSolidColumnGapTest()",
      "1119": "MulticolContainerTest::::divWithSimpleSolidColumnGapTest()",
      "1120": "MulticolContainerTest::::divWithSimpleSolidColumnGapTest()",
      "1121": "MulticolContainerTest::::divWithSimpleSolidColumnGapTest()",
      "1122": "MulticolContainerTest::::divWithSimpleSolidColumnGapTest()",
      "1123": "MulticolContainerTest::::divWithSimpleSolidColumnGapTest()",
      "1124": "MulticolContainerTest::::divWithSimpleSolidColumnGapTest()",
      "1125": "MulticolContainerTest::::divWithSimpleSolidColumnGapTest()",
      "1127": "MulticolContainerTest::::paragraphWithNegativeValueSolidColumnGapTest()",
      "1128": "MulticolContainerTest::::paragraphWithNegativeValueSolidColumnGapTest()",
      "1129": "MulticolContainerTest::::paragraphWithNegativeValueSolidColumnGapTest()",
      "1130": "MulticolContainerTest::::paragraphWithNegativeValueSolidColumnGapTest()",
      "1131": "MulticolContainerTest::::paragraphWithNegativeValueSolidColumnGapTest()",
      "1132": "MulticolContainerTest::::paragraphWithNegativeValueSolidColumnGapTest()",
      "1133": "MulticolContainerTest::::paragraphWithNegativeValueSolidColumnGapTest()",
      "1134": "MulticolContainerTest::::paragraphWithNegativeValueSolidColumnGapTest()",
      "1135": "MulticolContainerTest::::paragraphWithNegativeValueSolidColumnGapTest()",
      "1136": "MulticolContainerTest::::paragraphWithNegativeValueSolidColumnGapTest()",
      "1137": "MulticolContainerTest::::paragraphWithNegativeValueSolidColumnGapTest()",
      "1138": "MulticolContainerTest::::paragraphWithNegativeValueSolidColumnGapTest()",
      "1139": "MulticolContainerTest::::paragraphWithNegativeValueSolidColumnGapTest()",
      "1140": "MulticolContainerTest::::paragraphWithNegativeValueSolidColumnGapTest()",
      "1141": "MulticolContainerTest::::paragraphWithNegativeValueSolidColumnGapTest()",
      "1143": "MulticolContainerTest::::paragraphWithBiggerValueSolidColumnGapTest()",
      "1144": "MulticolContainerTest::::paragraphWithBiggerValueSolidColumnGapTest()",
      "1145": "MulticolContainerTest::::paragraphWithBiggerValueSolidColumnGapTest()",
      "1146": "MulticolContainerTest::::paragraphWithBiggerValueSolidColumnGapTest()",
      "1147": "MulticolContainerTest::::paragraphWithBiggerValueSolidColumnGapTest()",
      "1148": "MulticolContainerTest::::paragraphWithBiggerValueSolidColumnGapTest()",
      "1149": "MulticolContainerTest::::paragraphWithBiggerValueSolidColumnGapTest()",
      "1150": "MulticolContainerTest::::paragraphWithBiggerValueSolidColumnGapTest()",
      "1151": "MulticolContainerTest::::paragraphWithBiggerValueSolidColumnGapTest()",
      "1152": "MulticolContainerTest::::paragraphWithBiggerValueSolidColumnGapTest()",
      "1153": "MulticolContainerTest::::paragraphWithBiggerValueSolidColumnGapTest()",
      "1154": "MulticolContainerTest::::paragraphWithBiggerValueSolidColumnGapTest()",
      "1155": "MulticolContainerTest::::paragraphWithBiggerValueSolidColumnGapTest()",
      "1156": "MulticolContainerTest::::paragraphWithBiggerValueSolidColumnGapTest()",
      "1157": "MulticolContainerTest::::paragraphWithBiggerValueSolidColumnGapTest()",
      "1160": "MulticolContainerTest::::paragraphWithNullValueSolidColumnGapTest()",
      "1161": "MulticolContainerTest::::paragraphWithNullValueSolidColumnGapTest()",
      "1162": "MulticolContainerTest::::paragraphWithNullValueSolidColumnGapTest()",
      "1163": "MulticolContainerTest::::paragraphWithNullValueSolidColumnGapTest()",
      "1164": "MulticolContainerTest::::paragraphWithNullValueSolidColumnGapTest()",
      "1165": "MulticolContainerTest::::paragraphWithNullValueSolidColumnGapTest()",
      "1166": "MulticolContainerTest::::paragraphWithNullValueSolidColumnGapTest()",
      "1167": "MulticolContainerTest::::paragraphWithNullValueSolidColumnGapTest()",
      "1168": "MulticolContainerTest::::paragraphWithNullValueSolidColumnGapTest()",
      "1169": "MulticolContainerTest::::paragraphWithNullValueSolidColumnGapTest()",
      "1170": "MulticolContainerTest::::paragraphWithNullValueSolidColumnGapTest()",
      "1171": "MulticolContainerTest::::paragraphWithNullValueSolidColumnGapTest()",
      "1172": "MulticolContainerTest::::paragraphWithNullValueSolidColumnGapTest()",
      "1173": "MulticolContainerTest::::paragraphWithNullValueSolidColumnGapTest()",
      "1174": "MulticolContainerTest::::paragraphWithNullValueSolidColumnGapTest()",
      "1201": "MulticolContainerTest::::createImage(java.lang.String,float)",
      "1202": "MulticolContainerTest::::createImage(java.lang.String,float)",
      "1203": "MulticolContainerTest::::createImage(java.lang.String,float)",
      "1204": "MulticolContainerTest::::createImage(java.lang.String,float)",
      "1205": "MulticolContainerTest::::createImage(java.lang.String,float)",
      "1206": "MulticolContainerTest::::createImage(java.lang.String,float)",
      "1207": "MulticolContainerTest::::createImage(java.lang.String,float)",
      "1208": "MulticolContainerTest::::createImage(java.lang.String,float)",
      "1209": "MulticolContainerTest::::createImage(java.lang.String,float)",
      "1211": "MulticolContainerTest::::createDummyParagraph()",
      "1212": "MulticolContainerTest::::createDummyParagraph()",
      "1213": "MulticolContainerTest::::createDummyParagraph()",
      "1214": "MulticolContainerTest::::createDummyParagraph()",
      "1215": "MulticolContainerTest::::createDummyParagraph()",
      "1216": "MulticolContainerTest::::createDummyParagraph()",
      "1217": "MulticolContainerTest::::createDummyParagraph()",
      "1218": "MulticolContainerTest::::createDummyParagraph()",
      "1220": "MulticolContainerTest::::createFirstPageFiller()",
      "1221": "MulticolContainerTest::::createFirstPageFiller()",
      "1222": "MulticolContainerTest::::createFirstPageFiller()",
      "1223": "MulticolContainerTest::::createFirstPageFiller()",
      "1224": "MulticolContainerTest::::createFirstPageFiller()",
      "1225": "MulticolContainerTest::::createFirstPageFiller()",
      "1226": "MulticolContainerTest::::createFirstPageFiller()",
      "1227": "MulticolContainerTest::::createFirstPageFiller()",
      "1228": "MulticolContainerTest::::createFirstPageFiller()",
      "1229": "MulticolContainerTest::::createFirstPageFiller()"
    },
    "tests": [
      {
        "test_lines": [
          75,
          87
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          89,
          102
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          104,
          125
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          127,
          136
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          138,
          147
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          149,
          157
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          160,
          172
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          174,
          191
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          193,
          210
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          212,
          224
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          226,
          238
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          240,
          249
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          251,
          260
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          262,
          270
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          272,
          284
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          286,
          299
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          301,
          314
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          317,
          329
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          331,
          343
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          345,
          357
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          359,
          374
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          376,
          391
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          393,
          416
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          418,
          455
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          457,
          479
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          481,
          505
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          507,
          537
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          539,
          559
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          561,
          577
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          579,
          600
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          602,
          628
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          630,
          647
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          649,
          678
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          680,
          710
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          712,
          742
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          744,
          773
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          775,
          788
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          790,
          799
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          801,
          810
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          812,
          822
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          824,
          834
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          836,
          847
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          850,
          862
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          865,
          875
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          878,
          889
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          891,
          901
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          904,
          914
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          916,
          925
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          927,
          936
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          938,
          947
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          950,
          970
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          995,
          1005
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          1007,
          1021
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          1023,
          1038
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          1040,
          1054
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          1056,
          1070
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          1072,
          1086
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          1088,
          1103
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          1106,
          1125
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          1127,
          1141
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          1143,
          1157
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          1160,
          1174
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/itext-java/layout/src/main/java/com/itextpdf/layout/element/FlexContainer.java": {
    "class_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.layout.element;\n",
      "\n",
      "import com.itextpdf.layout.renderer.FlexContainerRenderer;\n",
      "import com.itextpdf.layout.renderer.IRenderer;\n",
      "\n",
      "/**\n",
      " * A {@link FlexContainer} represents a container of the flex objects.\n",
      " */\n",
      "class FlexContainer extends Div {\n",
      "\n",
      "    /**\n",
      "     * Creates new {@link FlexContainer} instance.\n",
      "     */\n",
      "    public FlexContainer() {\n",
      "        super();\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    protected IRenderer makeNewRenderer() {\n",
      "        return new FlexContainerRenderer(this);\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.layout.element;\n",
      "\n",
      "import com.itextpdf.io.image.ImageDataFactory;\n",
      "import com.itextpdf.io.logs.IoLogMessageConstant;\n",
      "import com.itextpdf.kernel.colors.ColorConstants;\n",
      "import com.itextpdf.kernel.pdf.PdfDocument;\n",
      "import com.itextpdf.kernel.pdf.PdfWriter;\n",
      "import com.itextpdf.kernel.utils.CompareTool;\n",
      "import com.itextpdf.layout.Document;\n",
      "import com.itextpdf.layout.Style;\n",
      "import com.itextpdf.layout.borders.SolidBorder;\n",
      "import com.itextpdf.layout.logs.LayoutLogMessageConstant;\n",
      "import com.itextpdf.layout.properties.*;\n",
      "import com.itextpdf.test.ExtendedITextTest;\n",
      "import com.itextpdf.test.annotations.LogMessage;\n",
      "import com.itextpdf.test.annotations.LogMessages;\n",
      "import com.itextpdf.test.annotations.type.IntegrationTest;\n",
      "\n",
      "import java.io.IOException;\n",
      "import java.util.Arrays;\n",
      "import org.junit.Assert;\n",
      "import org.junit.BeforeClass;\n",
      "import org.junit.Test;\n",
      "import org.junit.experimental.categories.Category;\n",
      "import org.junit.runner.RunWith;\n",
      "import org.junit.runners.Parameterized;\n",
      "\n",
      "@RunWith(Parameterized.class)\n",
      "@Category(IntegrationTest.class)\n",
      "public class FlexContainerTest extends ExtendedITextTest {\n",
      "    public static final String sourceFolder = \"./src/test/resources/com/itextpdf/layout/FlexContainerTest/\";\n",
      "    public static final String destinationFolder = \"./target/test/com/itextpdf/layout/FlexContainerTest/\";\n",
      "\n",
      "    private AlignmentPropertyValue alignItemsValue;\n",
      "    private JustifyContent justifyContentValue;\n",
      "    private FlexWrapPropertyValue wrapValue;\n",
      "    private FlexDirectionPropertyValue directionValue;\n",
      "    private Integer comparisonPdfId;\n",
      "\n",
      "    @BeforeClass\n",
      "    public static void beforeClass() {\n",
      "        createDestinationFolder(destinationFolder);\n",
      "    }\n",
      "\n",
      "    public FlexContainerTest(Object alignItemsValue, Object justifyContentValue, Object wrapValue,\n",
      "                             Object directionValue, Object comparisonPdfId) {\n",
      "        this.alignItemsValue = (AlignmentPropertyValue) alignItemsValue;\n",
      "        this.justifyContentValue = (JustifyContent) justifyContentValue;\n",
      "        this.wrapValue = (FlexWrapPropertyValue) wrapValue;\n",
      "        this.directionValue = (FlexDirectionPropertyValue) directionValue;\n",
      "        this.comparisonPdfId = (Integer) comparisonPdfId;\n",
      "    }\n",
      "\n",
      "    @Parameterized.Parameters(name = \"{index}: align-items: {0}; justify-content: {1}; flex-wrap: {2}; flex-direction: {3}\")\n",
      "    public static Iterable<Object[]> alignItemsAndJustifyContentProperties() {\n",
      "        return Arrays.asList(new Object[][]{\n",
      "                {AlignmentPropertyValue.FLEX_START, JustifyContent.FLEX_START, FlexWrapPropertyValue.NOWRAP,\n",
      "                        FlexDirectionPropertyValue.ROW, 1},\n",
      "                {AlignmentPropertyValue.FLEX_END, JustifyContent.FLEX_END, FlexWrapPropertyValue.NOWRAP,\n",
      "                        FlexDirectionPropertyValue.ROW, 2},\n",
      "                {AlignmentPropertyValue.CENTER, JustifyContent.CENTER, FlexWrapPropertyValue.NOWRAP,\n",
      "                        FlexDirectionPropertyValue.ROW, 3},\n",
      "                {AlignmentPropertyValue.STRETCH, JustifyContent.CENTER, FlexWrapPropertyValue.NOWRAP,\n",
      "                        FlexDirectionPropertyValue.ROW, 4},\n",
      "                {AlignmentPropertyValue.FLEX_START, JustifyContent.FLEX_START, FlexWrapPropertyValue.WRAP,\n",
      "                        FlexDirectionPropertyValue.ROW, 5},\n",
      "                {AlignmentPropertyValue.FLEX_END, JustifyContent.FLEX_END, FlexWrapPropertyValue.WRAP,\n",
      "                        FlexDirectionPropertyValue.ROW_REVERSE, 6},\n",
      "                {AlignmentPropertyValue.CENTER, JustifyContent.CENTER, FlexWrapPropertyValue.WRAP,\n",
      "                        FlexDirectionPropertyValue.ROW, 7},\n",
      "                {AlignmentPropertyValue.STRETCH, JustifyContent.CENTER, FlexWrapPropertyValue.WRAP,\n",
      "                        FlexDirectionPropertyValue.ROW_REVERSE, 8},\n",
      "                {AlignmentPropertyValue.FLEX_START, JustifyContent.FLEX_START, FlexWrapPropertyValue.WRAP_REVERSE,\n",
      "                        FlexDirectionPropertyValue.ROW_REVERSE, 9},\n",
      "                {AlignmentPropertyValue.FLEX_END, JustifyContent.FLEX_END, FlexWrapPropertyValue.WRAP_REVERSE,\n",
      "                        FlexDirectionPropertyValue.ROW, 10},\n",
      "                {AlignmentPropertyValue.CENTER, JustifyContent.CENTER, FlexWrapPropertyValue.WRAP_REVERSE,\n",
      "                        FlexDirectionPropertyValue.ROW_REVERSE, 11},\n",
      "                {AlignmentPropertyValue.STRETCH, JustifyContent.CENTER, FlexWrapPropertyValue.WRAP_REVERSE,\n",
      "                        FlexDirectionPropertyValue.ROW, 12},\n",
      "        });\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void defaultFlexContainerTest() throws IOException, InterruptedException {\n",
      "        String outFileName = destinationFolder + \"defaultFlexContainerTest\" + comparisonPdfId + \".pdf\";\n",
      "        String cmpFileName = sourceFolder + \"cmp_defaultFlexContainerTest\" + comparisonPdfId + \".pdf\";\n",
      "        PdfDocument pdfDocument = new PdfDocument(new PdfWriter(outFileName));\n",
      "\n",
      "        Document document = new Document(pdfDocument);\n",
      "\n",
      "        Div flexContainer = createFlexContainer();\n",
      "        flexContainer.setProperty(Property.MARGIN_TOP, UnitValue.createPointValue(50));\n",
      "        flexContainer.setProperty(Property.BORDER, new SolidBorder(2));\n",
      "        flexContainer.setProperty(Property.PADDING_LEFT, UnitValue.createPointValue(40));\n",
      "        flexContainer.setProperty(Property.BACKGROUND, new Background(ColorConstants.LIGHT_GRAY));\n",
      "\n",
      "        Div innerDiv = new Div();\n",
      "        innerDiv.add(createNewDiv()).add(createNewDiv());\n",
      "        innerDiv.setProperty(Property.BACKGROUND, new Background(ColorConstants.GREEN));\n",
      "        flexContainer.add(createNewDiv()).add(createNewDiv()).add(innerDiv).add(createNewDiv()).add(createNewDiv());\n",
      "\n",
      "        document.add(flexContainer);\n",
      "\n",
      "        document.close();\n",
      "\n",
      "        Assert.assertNull(new CompareTool().compareByContent(outFileName, cmpFileName, destinationFolder, \"diff\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void flexContainerFixedHeightWidthTest() throws IOException, InterruptedException {\n",
      "        String outFileName = destinationFolder + \"flexContainerFixedHeightWidthTest\" + comparisonPdfId + \".pdf\";\n",
      "        String cmpFileName = sourceFolder + \"cmp_flexContainerFixedHeightWidthTest\" + comparisonPdfId + \".pdf\";\n",
      "        PdfDocument pdfDocument = new PdfDocument(new PdfWriter(outFileName));\n",
      "\n",
      "        Document document = new Document(pdfDocument);\n",
      "\n",
      "        Div flexContainer = createFlexContainer();\n",
      "        flexContainer.setProperty(Property.MARGIN_TOP, UnitValue.createPointValue(50));\n",
      "        flexContainer.setProperty(Property.BORDER, new SolidBorder(2));\n",
      "        flexContainer.setProperty(Property.PADDING_LEFT, UnitValue.createPointValue(40));\n",
      "        flexContainer.setProperty(Property.BACKGROUND, new Background(ColorConstants.LIGHT_GRAY));\n",
      "        flexContainer.setProperty(Property.WIDTH, UnitValue.createPointValue(450));\n",
      "        flexContainer.setProperty(Property.HEIGHT, UnitValue.createPointValue(500));\n",
      "\n",
      "        Div innerDiv = new Div();\n",
      "        innerDiv.add(createNewDiv().setMarginLeft(20)).add(createNewDiv());\n",
      "        innerDiv.setProperty(Property.BACKGROUND, new Background(ColorConstants.GREEN));\n",
      "        flexContainer.add(createNewDiv().setMarginLeft(100)).add(createNewDiv()).add(innerDiv).add(createNewDiv()).add(createNewDiv());\n",
      "\n",
      "        document.add(flexContainer);\n",
      "\n",
      "        document.close();\n",
      "\n",
      "        Assert.assertNull(new CompareTool().compareByContent(outFileName, cmpFileName, destinationFolder, \"diff\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void flexContainerDifferentChildrenTest() throws IOException, InterruptedException {\n",
      "        String outFileName = destinationFolder + \"flexContainerDifferentChildrenTest\" + comparisonPdfId + \".pdf\";\n",
      "        String cmpFileName = sourceFolder + \"cmp_flexContainerDifferentChildrenTest\" + comparisonPdfId + \".pdf\";\n",
      "        PdfDocument pdfDocument = new PdfDocument(new PdfWriter(outFileName));\n",
      "\n",
      "        Document document = new Document(pdfDocument);\n",
      "\n",
      "        Div flexContainer = createFlexContainer();\n",
      "        flexContainer.setProperty(Property.BORDER, new SolidBorder(2));\n",
      "        flexContainer.setProperty(Property.BACKGROUND, new Background(ColorConstants.LIGHT_GRAY));\n",
      "\n",
      "        Div innerDiv = new Div();\n",
      "        innerDiv.add(createNewDiv()).add(createNewDiv()).add(createNewDiv());\n",
      "        innerDiv.setProperty(Property.BACKGROUND, new Background(ColorConstants.GREEN));\n",
      "\n",
      "        Table table = new Table(UnitValue.createPercentArray(new float[] {10, 10, 10}));\n",
      "        for (int i = 0; i < 3; i++) {\n",
      "            table.addCell(\"Hello\");\n",
      "        }\n",
      "\n",
      "        List romanList = new List(ListNumberingType.ROMAN_LOWER).setSymbolIndent(20).\n",
      "                setMarginLeft(25).\n",
      "                add(\"One\").add(\"Two\").add(\"Three\");\n",
      "        romanList.setProperty(Property.BACKGROUND, new Background(ColorConstants.MAGENTA));\n",
      "\n",
      "        flexContainer.add(table).add(new Paragraph(\"Test\")).add(innerDiv).add(romanList).add(new Image(ImageDataFactory.create(sourceFolder + \"img.jpg\")));\n",
      "        document.add(flexContainer);\n",
      "\n",
      "        document.close();\n",
      "\n",
      "        Assert.assertNull(new CompareTool().compareByContent(outFileName, cmpFileName, destinationFolder, \"diff\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    // If height is clipped the behavior strongly depends on the child renderers\n",
      "    // and the results are not expected sometimes\n",
      "    public void flexContainerHeightClippedTest() throws IOException, InterruptedException {\n",
      "        String outFileName = destinationFolder + \"flexContainerHeightClippedTest\" + comparisonPdfId + \".pdf\";\n",
      "        String cmpFileName = sourceFolder + \"cmp_flexContainerHeightClippedTest\" + comparisonPdfId + \".pdf\";\n",
      "        PdfDocument pdfDocument = new PdfDocument(new PdfWriter(outFileName));\n",
      "\n",
      "        Document document = new Document(pdfDocument);\n",
      "\n",
      "        Div flexContainer = createFlexContainer();\n",
      "        flexContainer.setProperty(Property.BORDER, new SolidBorder(2));\n",
      "        flexContainer.setProperty(Property.BACKGROUND, new Background(ColorConstants.LIGHT_GRAY));\n",
      "        flexContainer.setHeight(250);\n",
      "\n",
      "        Div innerDiv = new Div();\n",
      "        innerDiv.add(createNewDiv()).add(createNewDiv()).add(createNewDiv());\n",
      "        innerDiv.setProperty(Property.BACKGROUND, new Background(ColorConstants.GREEN));\n",
      "\n",
      "        Table table = new Table(UnitValue.createPercentArray(new float[] {10, 10, 10}));\n",
      "        for (int i = 0; i < 3; i++) {\n",
      "            table.addCell(\"Hello\");\n",
      "        }\n",
      "\n",
      "        List romanList = new List(ListNumberingType.ROMAN_LOWER).setSymbolIndent(20).\n",
      "                setMarginLeft(25).\n",
      "                add(\"One\").add(\"Two\").add(\"Three\");\n",
      "        romanList.setProperty(Property.BACKGROUND, new Background(ColorConstants.MAGENTA));\n",
      "\n",
      "        flexContainer.add(table).add(new Paragraph(\"Test\")).add(innerDiv).add(romanList).add(new Image(ImageDataFactory.create(sourceFolder + \"img.jpg\")));\n",
      "        document.add(flexContainer);\n",
      "\n",
      "        document.close();\n",
      "\n",
      "        Assert.assertNull(new CompareTool().compareByContent(outFileName, cmpFileName, destinationFolder, \"diff\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    @LogMessages(messages = @LogMessage(messageTemplate = LayoutLogMessageConstant.ELEMENT_DOES_NOT_FIT_AREA), ignore = true)\n",
      "    // TODO DEVSIX-5042 HEIGHT property is ignored when FORCED_PLACEMENT is true\n",
      "    public void flexContainerDifferentChildrenDontFitHorizontallyTest() throws IOException, InterruptedException {\n",
      "        String outFileName = destinationFolder + \"flexContainerDifferentChildrenDontFitHorizontallyTest\" + comparisonPdfId + \".pdf\";\n",
      "        String cmpFileName = sourceFolder + \"cmp_flexContainerDifferentChildrenDontFitHorizontallyTest\" + comparisonPdfId + \".pdf\";\n",
      "        PdfDocument pdfDocument = new PdfDocument(new PdfWriter(outFileName));\n",
      "\n",
      "        Document document = new Document(pdfDocument);\n",
      "\n",
      "        Div flexContainer = createFlexContainer();\n",
      "        flexContainer.setProperty(Property.BORDER, new SolidBorder(2));\n",
      "        flexContainer.setProperty(Property.BACKGROUND, new Background(ColorConstants.LIGHT_GRAY));\n",
      "        flexContainer.setProperty(Property.WIDTH, UnitValue.createPointValue(300));\n",
      "\n",
      "        Div innerDiv = new Div();\n",
      "        innerDiv.add(createNewDiv()).add(createNewDiv()).add(createNewDiv());\n",
      "        innerDiv.setProperty(Property.BACKGROUND, new Background(ColorConstants.GREEN));\n",
      "\n",
      "        Table table = new Table(UnitValue.createPercentArray(new float[] {10, 10, 10}));\n",
      "        for (int i = 0; i < 3; i++) {\n",
      "            table.addCell(\"Hello\");\n",
      "        }\n",
      "\n",
      "        List romanList = new List(ListNumberingType.ROMAN_LOWER).setSymbolIndent(20).\n",
      "                setMarginLeft(25).\n",
      "                add(\"One\").add(\"Two\").add(\"Three\");\n",
      "\n",
      "        flexContainer.add(table).add(new Paragraph(\"Test\")).add(innerDiv).add(romanList).add(new Image(ImageDataFactory.create(sourceFolder + \"img.jpg\")));\n",
      "        document.add(flexContainer);\n",
      "\n",
      "        document.close();\n",
      "\n",
      "        Assert.assertNull(new CompareTool().compareByContent(outFileName, cmpFileName, destinationFolder, \"diff\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    // TODO DEVSIX-5042 HEIGHT property is ignored when FORCED_PLACEMENT is true\n",
      "    public void flexContainerDifferentChildrenDontFitHorizontallyForcedPlacementTest() throws IOException, InterruptedException {\n",
      "        String outFileName = destinationFolder + \"flexContainerDifferentChildrenDontFitHorizontallyForcedPlacementTest\" + comparisonPdfId + \".pdf\";\n",
      "        String cmpFileName = sourceFolder + \"cmp_flexContainerDifferentChildrenDontFitHorizontallyForcedPlacementTest\" + comparisonPdfId + \".pdf\";\n",
      "        PdfDocument pdfDocument = new PdfDocument(new PdfWriter(outFileName));\n",
      "\n",
      "        Document document = new Document(pdfDocument);\n",
      "\n",
      "        Div flexContainer = createFlexContainer();\n",
      "        flexContainer.setProperty(Property.BORDER, new SolidBorder(2));\n",
      "        flexContainer.setProperty(Property.BACKGROUND, new Background(ColorConstants.LIGHT_GRAY));\n",
      "        flexContainer.setProperty(Property.FORCED_PLACEMENT, true);\n",
      "\n",
      "        Div innerDiv = new Div();\n",
      "        innerDiv.add(createNewDiv()).add(createNewDiv()).add(createNewDiv());\n",
      "        innerDiv.setProperty(Property.BACKGROUND, new Background(ColorConstants.GREEN));\n",
      "\n",
      "        Table table = new Table(UnitValue.createPercentArray(new float[] {25, 25, 25, 25}));\n",
      "        for (int i = 0; i < 4; i++) {\n",
      "            table.addCell(\"Hello\");\n",
      "        }\n",
      "\n",
      "        List romanList = new List(ListNumberingType.ROMAN_LOWER).setSymbolIndent(20).\n",
      "                setMarginLeft(25).\n",
      "                add(\"MuchMoreText\").add(\"MuchMoreText\").add(\"MuchMoreText\");\n",
      "\n",
      "        flexContainer.add(table).add(new Paragraph(\"MuchMoreText\")).add(innerDiv).add(romanList).add(new Image(ImageDataFactory.create(sourceFolder + \"img.jpg\")));\n",
      "        document.add(flexContainer);\n",
      "\n",
      "        document.close();\n",
      "\n",
      "        Assert.assertNull(new CompareTool().compareByContent(outFileName, cmpFileName, destinationFolder, \"diff\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    @LogMessages(messages = @LogMessage(messageTemplate = IoLogMessageConstant.CLIP_ELEMENT), ignore = true)\n",
      "    public void flexContainerDifferentChildrenDontFitVerticallyTest() throws IOException, InterruptedException {\n",
      "        String outFileName = destinationFolder + \"flexContainerDifferentChildrenDontFitVerticallyTest\" + comparisonPdfId + \".pdf\";\n",
      "        String cmpFileName = sourceFolder + \"cmp_flexContainerDifferentChildrenDontFitVerticallyTest\" + comparisonPdfId + \".pdf\";\n",
      "        PdfDocument pdfDocument = new PdfDocument(new PdfWriter(outFileName));\n",
      "\n",
      "        Document document = new Document(pdfDocument);\n",
      "\n",
      "        Div flexContainer = createFlexContainer();\n",
      "        flexContainer.setProperty(Property.BORDER, new SolidBorder(2));\n",
      "        flexContainer.setProperty(Property.BACKGROUND, new Background(ColorConstants.LIGHT_GRAY));\n",
      "        flexContainer.setHeight(500);\n",
      "        Div innerDiv = new Div();\n",
      "        innerDiv.add(createNewDiv()).add(createNewDiv()).add(createNewDiv());\n",
      "        innerDiv.setProperty(Property.BACKGROUND, new Background(ColorConstants.GREEN));\n",
      "\n",
      "        Table table = new Table(UnitValue.createPercentArray(new float[] {10, 10, 10}));\n",
      "        for (int i = 0; i < 3; i++) {\n",
      "            table.addCell(\"Hello\");\n",
      "        }\n",
      "\n",
      "        List romanList = new List(ListNumberingType.ROMAN_LOWER).setSymbolIndent(20).\n",
      "                setMarginLeft(25).\n",
      "                add(\"One\").add(\"Two\").add(\"Three\");\n",
      "\n",
      "        flexContainer.add(table).add(new Paragraph(\"Test\")).add(innerDiv).add(romanList).add(new Image(ImageDataFactory.create(sourceFolder + \"img.jpg\")));\n",
      "        Div prevDiv = new Div();\n",
      "        prevDiv.setHeight(480);\n",
      "        prevDiv.setProperty(Property.BACKGROUND, new Background(ColorConstants.RED));\n",
      "        document.add(prevDiv);\n",
      "        document.add(flexContainer);\n",
      "\n",
      "        document.close();\n",
      "\n",
      "        Assert.assertNull(new CompareTool().compareByContent(outFileName, cmpFileName, destinationFolder, \"diff\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    @LogMessages(messages = @LogMessage(messageTemplate = IoLogMessageConstant.CLIP_ELEMENT), ignore = true)\n",
      "    public void flexContainerDifferentChildrenFitContainerDoesNotFitVerticallyTest() throws IOException, InterruptedException {\n",
      "        String outFileName = destinationFolder + \"flexContainerDifferentChildrenFitContainerDoesNotFitVerticallyTest\" + comparisonPdfId + \".pdf\";\n",
      "        String cmpFileName = sourceFolder + \"cmp_flexContainerDifferentChildrenFitContainerDoesNotFitVerticallyTest\" + comparisonPdfId + \".pdf\";\n",
      "        PdfDocument pdfDocument = new PdfDocument(new PdfWriter(outFileName));\n",
      "\n",
      "        Document document = new Document(pdfDocument);\n",
      "\n",
      "        Div flexContainer = createFlexContainer();\n",
      "        flexContainer.setProperty(Property.BORDER, new SolidBorder(2));\n",
      "        flexContainer.setProperty(Property.BACKGROUND, new Background(ColorConstants.LIGHT_GRAY));\n",
      "        flexContainer.setHeight(600);\n",
      "\n",
      "        Div innerDiv = new Div();\n",
      "        innerDiv.add(createNewDiv()).add(createNewDiv()).add(createNewDiv());\n",
      "        innerDiv.setProperty(Property.BACKGROUND, new Background(ColorConstants.GREEN));\n",
      "\n",
      "        Table table = new Table(UnitValue.createPercentArray(new float[] {10, 10, 10}));\n",
      "        for (int i = 0; i < 3; i++) {\n",
      "            table.addCell(\"Hello\");\n",
      "        }\n",
      "\n",
      "        List romanList = new List(ListNumberingType.ROMAN_LOWER).setSymbolIndent(20).\n",
      "                setMarginLeft(25).\n",
      "                add(\"One\").add(\"Two\").add(\"Three\");\n",
      "\n",
      "        flexContainer.add(table).add(new Paragraph(\"Test\")).add(innerDiv).add(romanList).add(new Image(ImageDataFactory.create(sourceFolder + \"img.jpg\")));\n",
      "        Div prevDiv = new Div();\n",
      "        prevDiv.setHeight(400);\n",
      "        prevDiv.setProperty(Property.BACKGROUND, new Background(ColorConstants.RED));\n",
      "        document.add(prevDiv);\n",
      "        document.add(flexContainer);\n",
      "\n",
      "        document.close();\n",
      "\n",
      "        Assert.assertNull(new CompareTool().compareByContent(outFileName, cmpFileName, destinationFolder, \"diff\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void flexContainerDifferentChildrenWithGrowTest() throws IOException, InterruptedException {\n",
      "        String outFileName = destinationFolder + \"flexContainerDifferentChildrenWithGrowTest\" + comparisonPdfId + \".pdf\";\n",
      "        String cmpFileName = sourceFolder + \"cmp_flexContainerDifferentChildrenWithGrowTest\" + comparisonPdfId + \".pdf\";\n",
      "        PdfDocument pdfDocument = new PdfDocument(new PdfWriter(outFileName));\n",
      "\n",
      "        Document document = new Document(pdfDocument);\n",
      "\n",
      "        Div flexContainer = createFlexContainer();\n",
      "        flexContainer.setProperty(Property.BORDER, new SolidBorder(2));\n",
      "        flexContainer.setProperty(Property.BACKGROUND, new Background(ColorConstants.LIGHT_GRAY));\n",
      "\n",
      "        Div innerDiv = new Div();\n",
      "        innerDiv.add(createNewDiv()).add(createNewDiv()).add(createNewDiv());\n",
      "        innerDiv.setProperty(Property.BACKGROUND, new Background(ColorConstants.GREEN));\n",
      "        innerDiv.setProperty(Property.FLEX_GROW, 1f);\n",
      "\n",
      "        Table table = new Table(UnitValue.createPercentArray(new float[] {50, 50}));\n",
      "        for (int i = 0; i < 2; i++) {\n",
      "            table.addCell(\"Hello\");\n",
      "        }\n",
      "        table.setProperty(Property.FLEX_GROW, 1f);\n",
      "\n",
      "        List romanList = new List(ListNumberingType.ROMAN_LOWER).setSymbolIndent(20).\n",
      "                setMarginLeft(25).\n",
      "                add(\"One\").add(\"Two\").add(\"Three\");\n",
      "        romanList.setProperty(Property.FLEX_GROW, 1f);\n",
      "        romanList.setProperty(Property.BACKGROUND, new Background(ColorConstants.MAGENTA));\n",
      "\n",
      "        Image img = new Image(ImageDataFactory.create(sourceFolder + \"img.jpg\"));\n",
      "        img.setProperty(Property.FLEX_GROW, 1f);\n",
      "\n",
      "        flexContainer.add(table).add(innerDiv).add(romanList).add(img);\n",
      "        document.add(flexContainer);\n",
      "\n",
      "        document.close();\n",
      "\n",
      "        Assert.assertNull(new CompareTool().compareByContent(outFileName, cmpFileName, destinationFolder, \"diff\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void flexContainerDifferentChildrenWithFlexBasisTest() throws IOException, InterruptedException {\n",
      "        String outFileName = destinationFolder + \"flexContainerDifferentChildrenWithFlexBasisTest\" + comparisonPdfId + \".pdf\";\n",
      "        String cmpFileName = sourceFolder + \"cmp_flexContainerDifferentChildrenWithFlexBasisTest\" + comparisonPdfId + \".pdf\";\n",
      "        PdfDocument pdfDocument = new PdfDocument(new PdfWriter(outFileName));\n",
      "\n",
      "        Document document = new Document(pdfDocument);\n",
      "\n",
      "        Div flexContainer = createFlexContainer();\n",
      "        flexContainer.setProperty(Property.BORDER, new SolidBorder(2));\n",
      "        flexContainer.setProperty(Property.BACKGROUND, new Background(ColorConstants.LIGHT_GRAY));\n",
      "\n",
      "        Table table = new Table(UnitValue.createPercentArray(new float[] {50, 50}));\n",
      "        for (int i = 0; i < 2; i++) {\n",
      "            table.addCell(\"Hello\");\n",
      "        }\n",
      "        table.setProperty(Property.FLEX_BASIS, UnitValue.createPointValue(150));\n",
      "\n",
      "        List romanList = new List(ListNumberingType.ROMAN_LOWER).setSymbolIndent(20).\n",
      "                setMarginLeft(25).\n",
      "                add(\"One\").add(\"Two\").add(\"Three\");\n",
      "        romanList.setProperty(Property.BACKGROUND, new Background(ColorConstants.MAGENTA));\n",
      "        romanList.setProperty(Property.FLEX_BASIS, UnitValue.createPointValue(100));\n",
      "\n",
      "        Image img = new Image(ImageDataFactory.create(sourceFolder + \"img.jpg\"));\n",
      "        img.setProperty(Property.FLEX_BASIS, UnitValue.createPointValue(150));\n",
      "\n",
      "        flexContainer.add(table).add(romanList).add(img);\n",
      "        document.add(flexContainer);\n",
      "\n",
      "        document.close();\n",
      "\n",
      "        Assert.assertNull(new CompareTool().compareByContent(outFileName, cmpFileName, destinationFolder, \"diff\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void flexContainerDifferentChildrenWithFlexShrinkTest() throws IOException, InterruptedException {\n",
      "        String outFileName = destinationFolder + \"flexContainerDifferentChildrenWithFlexShrinkTest\" + comparisonPdfId + \".pdf\";\n",
      "        String cmpFileName = sourceFolder + \"cmp_flexContainerDifferentChildrenWithFlexShrinkTest\" + comparisonPdfId + \".pdf\";\n",
      "        PdfDocument pdfDocument = new PdfDocument(new PdfWriter(outFileName));\n",
      "\n",
      "        Document document = new Document(pdfDocument);\n",
      "\n",
      "        Div flexContainer = createFlexContainer();\n",
      "        flexContainer.setProperty(Property.BORDER, new SolidBorder(2));\n",
      "        flexContainer.setProperty(Property.BACKGROUND, new Background(ColorConstants.LIGHT_GRAY));\n",
      "\n",
      "        Table table = new Table(UnitValue.createPercentArray(new float[] {50, 50}));\n",
      "        for (int i = 0; i < 2; i++) {\n",
      "            table.addCell(\"Hello\");\n",
      "        }\n",
      "        table.setProperty(Property.FLEX_BASIS, UnitValue.createPointValue(200));\n",
      "        table.setProperty(Property.FLEX_SHRINK, 0f);\n",
      "\n",
      "        List romanList = new List(ListNumberingType.ROMAN_LOWER).setSymbolIndent(20).\n",
      "                setMarginLeft(25).\n",
      "                add(\"One\").add(\"Two\").add(\"Three\");\n",
      "        romanList.setProperty(Property.BACKGROUND, new Background(ColorConstants.MAGENTA));\n",
      "        romanList.setProperty(Property.FLEX_BASIS, UnitValue.createPointValue(200));\n",
      "        romanList.setProperty(Property.FLEX_SHRINK, 0f);\n",
      "\n",
      "        Div div = new Div().add(new Paragraph(\"Test\"));\n",
      "        div.setProperty(Property.BACKGROUND, new Background(ColorConstants.GREEN));\n",
      "        div.setProperty(Property.FLEX_BASIS, UnitValue.createPointValue(200));\n",
      "\n",
      "        flexContainer.add(table).add(romanList).add(div);\n",
      "        document.add(flexContainer);\n",
      "\n",
      "        document.close();\n",
      "\n",
      "        Assert.assertNull(new CompareTool().compareByContent(outFileName, cmpFileName, destinationFolder, \"diff\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void flexContainerInsideFlexContainerTest() throws IOException, InterruptedException {\n",
      "        String outFileName = destinationFolder + \"flexContainerInsideFlexContainerTest\" + comparisonPdfId + \".pdf\";\n",
      "        String cmpFileName = sourceFolder + \"cmp_flexContainerInsideFlexContainerTest\" + comparisonPdfId + \".pdf\";\n",
      "        PdfDocument pdfDocument = new PdfDocument(new PdfWriter(outFileName));\n",
      "\n",
      "        Document document = new Document(pdfDocument);\n",
      "\n",
      "        Div flexContainer = createFlexContainer();\n",
      "        flexContainer.setProperty(Property.BORDER, new SolidBorder(2));\n",
      "        flexContainer.setProperty(Property.BACKGROUND, new Background(ColorConstants.LIGHT_GRAY));\n",
      "\n",
      "        Div innerFlex = new FlexContainer();\n",
      "        innerFlex.add(createNewDiv()).add(createNewDiv()).add(createNewDiv());\n",
      "        for (IElement children : innerFlex.getChildren()) {\n",
      "            children.setProperty(Property.FLEX_GROW, 0.2f);\n",
      "        }\n",
      "        innerFlex.setProperty(Property.BACKGROUND, new Background(ColorConstants.GREEN));\n",
      "        innerFlex.setProperty(Property.FLEX_GROW, 0.7f);\n",
      "\n",
      "        flexContainer.add(innerFlex).add(createNewDiv());\n",
      "        document.add(flexContainer);\n",
      "\n",
      "        document.close();\n",
      "\n",
      "        Assert.assertNull(new CompareTool().compareByContent(outFileName, cmpFileName, destinationFolder, \"diff\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void flexContainerInsideFlexContainerWithHugeBordersTest() throws IOException, InterruptedException {\n",
      "        String outFileName = destinationFolder + \"flexContainerInsideFlexContainerWithHugeBordersTest\" + comparisonPdfId + \".pdf\";\n",
      "        String cmpFileName = sourceFolder + \"cmp_flexContainerInsideFlexContainerWithHugeBordersTest\" + comparisonPdfId + \".pdf\";\n",
      "        PdfDocument pdfDocument = new PdfDocument(new PdfWriter(outFileName));\n",
      "\n",
      "        Document document = new Document(pdfDocument);\n",
      "\n",
      "        Div flexContainer = createFlexContainer();\n",
      "        flexContainer.setProperty(Property.BORDER, new SolidBorder(ColorConstants.BLUE,20));\n",
      "        flexContainer.setProperty(Property.BACKGROUND, new Background(ColorConstants.LIGHT_GRAY));\n",
      "\n",
      "        Div innerFlex = new FlexContainer();\n",
      "        innerFlex.add(createNewDiv()).add(createNewDiv()).add(createNewDiv());\n",
      "        for (IElement children : innerFlex.getChildren()) {\n",
      "            children.setProperty(Property.FLEX_GROW, 1f);\n",
      "            children.setProperty(Property.BORDER, new SolidBorder(ColorConstants.YELLOW,10));\n",
      "        }\n",
      "        innerFlex.setProperty(Property.BACKGROUND, new Background(ColorConstants.RED));\n",
      "        innerFlex.setProperty(Property.FLEX_GROW, 1f);\n",
      "        innerFlex.setProperty(Property.BORDER, new SolidBorder(ColorConstants.RED,15));\n",
      "\n",
      "        flexContainer.add(innerFlex).add(createNewDiv().setBorder(new SolidBorder(ColorConstants.GREEN,10)));\n",
      "        document.add(flexContainer);\n",
      "\n",
      "        document.close();\n",
      "\n",
      "        Assert.assertNull(new CompareTool().compareByContent(outFileName, cmpFileName, destinationFolder, \"diff\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void multipleFlexContainersInsideFlexContainerTest() throws IOException, InterruptedException {\n",
      "        String outFileName = destinationFolder + \"multipleFlexContainersInsideFlexContainerTest\" + comparisonPdfId + \".pdf\";\n",
      "        String cmpFileName = sourceFolder + \"cmp_multipleFlexContainersInsideFlexContainerTest\" + comparisonPdfId + \".pdf\";\n",
      "        PdfDocument pdfDocument = new PdfDocument(new PdfWriter(outFileName));\n",
      "\n",
      "        Document document = new Document(pdfDocument);\n",
      "\n",
      "        Div flexContainer = createFlexContainer();\n",
      "        flexContainer.setProperty(Property.BORDER, new SolidBorder(2));\n",
      "        flexContainer.setProperty(Property.BACKGROUND, new Background(ColorConstants.LIGHT_GRAY));\n",
      "\n",
      "        Div innerFlex1 = new FlexContainer();\n",
      "        innerFlex1.add(createNewDiv()).add(createNewDiv()).add(createNewDiv());\n",
      "        for (IElement children : innerFlex1.getChildren()) {\n",
      "            children.setProperty(Property.FLEX_GROW, 0.2f);\n",
      "        }\n",
      "        innerFlex1.setProperty(Property.BACKGROUND, new Background(ColorConstants.GREEN));\n",
      "        innerFlex1.setProperty(Property.FLEX_GROW, 1f);\n",
      "\n",
      "        Div innerFlex2 = new FlexContainer();\n",
      "        innerFlex2.add(createNewDiv()).add(createNewDiv());\n",
      "        for (IElement children : innerFlex2.getChildren()) {\n",
      "            children.setProperty(Property.FLEX_GROW, 0.3f);\n",
      "        }\n",
      "        innerFlex2.setProperty(Property.BACKGROUND, new Background(ColorConstants.RED));\n",
      "        innerFlex2.setProperty(Property.FLEX_GROW, 2f);\n",
      "\n",
      "        flexContainer.add(innerFlex1).add(innerFlex2);\n",
      "        document.add(flexContainer);\n",
      "\n",
      "        document.close();\n",
      "\n",
      "        Assert.assertNull(new CompareTool().compareByContent(outFileName, cmpFileName, destinationFolder, \"diff\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void multipleFlexContainersWithPredefinedPointWidthsInsideFlexContainerTest() throws IOException, InterruptedException {\n",
      "        String outFileName = destinationFolder + \"multipleFlexContainersWithPredefinedPointWidthsInsideFlexContainerTest\" + comparisonPdfId + \".pdf\";\n",
      "        String cmpFileName = sourceFolder + \"cmp_multipleFlexContainersWithPredefinedPointWidthsInsideFlexContainerTest\" + comparisonPdfId + \".pdf\";\n",
      "        PdfDocument pdfDocument = new PdfDocument(new PdfWriter(outFileName));\n",
      "\n",
      "        Document document = new Document(pdfDocument);\n",
      "\n",
      "        Div flexContainer = createFlexContainer();\n",
      "        flexContainer.setProperty(Property.BORDER, new SolidBorder(2));\n",
      "        flexContainer.setProperty(Property.BACKGROUND, new Background(ColorConstants.LIGHT_GRAY));\n",
      "\n",
      "        Div innerFlex1 = new FlexContainer();\n",
      "        innerFlex1.add(createNewDiv()).add(createNewDiv()).add(createNewDiv());\n",
      "        for (IElement children : innerFlex1.getChildren()) {\n",
      "            children.setProperty(Property.FLEX_GROW, 0.2f);\n",
      "        }\n",
      "        innerFlex1.setProperty(Property.BACKGROUND, new Background(ColorConstants.GREEN));\n",
      "        innerFlex1.setProperty(Property.FLEX_GROW, 1f);\n",
      "        innerFlex1.setWidth(380);\n",
      "\n",
      "        Div innerFlex2 = new FlexContainer();\n",
      "        innerFlex2.add(createNewDiv()).add(createNewDiv());\n",
      "        for (IElement children : innerFlex2.getChildren()) {\n",
      "            children.setProperty(Property.FLEX_GROW, 0.3f);\n",
      "        }\n",
      "        innerFlex2.setProperty(Property.BACKGROUND, new Background(ColorConstants.RED));\n",
      "        innerFlex2.setProperty(Property.FLEX_GROW, 2f);\n",
      "        innerFlex2.setWidth(200);\n",
      "\n",
      "        flexContainer.add(innerFlex1).add(innerFlex2);\n",
      "        document.add(flexContainer);\n",
      "\n",
      "        document.close();\n",
      "\n",
      "        Assert.assertNull(new CompareTool().compareByContent(outFileName, cmpFileName, destinationFolder, \"diff\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void multipleFlexContainersWithPredefinedPercentWidthsInsideFlexContainerTest() throws IOException, InterruptedException {\n",
      "        String outFileName = destinationFolder + \"multipleFlexContainersWithPredefinedPercentWidthsInsideFlexContainerTest\" + comparisonPdfId + \".pdf\";\n",
      "        String cmpFileName = sourceFolder + \"cmp_multipleFlexContainersWithPredefinedPercentWidthsInsideFlexContainerTest\" + comparisonPdfId + \".pdf\";\n",
      "        PdfDocument pdfDocument = new PdfDocument(new PdfWriter(outFileName));\n",
      "\n",
      "        Document document = new Document(pdfDocument);\n",
      "\n",
      "        Div flexContainer = createFlexContainer();\n",
      "        flexContainer.setProperty(Property.BORDER, new SolidBorder(2));\n",
      "        flexContainer.setProperty(Property.BACKGROUND, new Background(ColorConstants.LIGHT_GRAY));\n",
      "\n",
      "        Div innerFlex1 = new FlexContainer();\n",
      "        innerFlex1.add(createNewDiv()).add(createNewDiv()).add(createNewDiv());\n",
      "        for (IElement children : innerFlex1.getChildren()) {\n",
      "            children.setProperty(Property.FLEX_GROW, 0.2f);\n",
      "        }\n",
      "        innerFlex1.setProperty(Property.BACKGROUND, new Background(ColorConstants.GREEN));\n",
      "        innerFlex1.setProperty(Property.FLEX_GROW, 1f);\n",
      "        innerFlex1.setWidth(UnitValue.createPercentValue(40));\n",
      "\n",
      "        Div innerFlex2 = new FlexContainer();\n",
      "        innerFlex2.add(createNewDiv()).add(createNewDiv());\n",
      "        for (IElement children : innerFlex2.getChildren()) {\n",
      "            children.setProperty(Property.FLEX_GROW, 0.3f);\n",
      "        }\n",
      "        innerFlex2.setProperty(Property.BACKGROUND, new Background(ColorConstants.RED));\n",
      "        innerFlex2.setProperty(Property.FLEX_GROW, 2f);\n",
      "        innerFlex2.setWidth(UnitValue.createPercentValue(40));\n",
      "\n",
      "        flexContainer.add(innerFlex1).add(innerFlex2);\n",
      "        document.add(flexContainer);\n",
      "\n",
      "        document.close();\n",
      "\n",
      "        Assert.assertNull(new CompareTool().compareByContent(outFileName, cmpFileName, destinationFolder, \"diff\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    // TODO DEVSIX-5087 Content should not overflow container by default\n",
      "    public void multipleFlexContainersWithPredefinedMinWidthsInsideFlexContainerTest() throws IOException, InterruptedException {\n",
      "        String outFileName = destinationFolder + \"multipleFlexContainersWithPredefinedMinWidthsInsideFlexContainerTest\" + comparisonPdfId + \".pdf\";\n",
      "        String cmpFileName = sourceFolder + \"cmp_multipleFlexContainersWithPredefinedMinWidthsInsideFlexContainerTest\" + comparisonPdfId + \".pdf\";\n",
      "        PdfDocument pdfDocument = new PdfDocument(new PdfWriter(outFileName));\n",
      "\n",
      "        Document document = new Document(pdfDocument);\n",
      "\n",
      "        Div flexContainer = createFlexContainer();\n",
      "        flexContainer.setProperty(Property.BORDER, new SolidBorder(2));\n",
      "        flexContainer.setProperty(Property.BACKGROUND, new Background(ColorConstants.LIGHT_GRAY));\n",
      "\n",
      "        Div innerFlex1 = new FlexContainer();\n",
      "        innerFlex1.add(createNewDiv()).add(createNewDiv()).add(createNewDiv());\n",
      "        for (IElement children : innerFlex1.getChildren()) {\n",
      "            children.setProperty(Property.FLEX_GROW, 0.2f);\n",
      "        }\n",
      "        innerFlex1.setProperty(Property.BACKGROUND, new Background(ColorConstants.GREEN));\n",
      "        innerFlex1.setProperty(Property.FLEX_GROW, 1f);\n",
      "        innerFlex1.setProperty(Property.MIN_WIDTH, UnitValue.createPointValue(380));\n",
      "\n",
      "        Div innerFlex2 = new FlexContainer();\n",
      "        innerFlex2.add(createNewDiv()).add(createNewDiv());\n",
      "        for (IElement children : innerFlex2.getChildren()) {\n",
      "            children.setProperty(Property.FLEX_GROW, 0.3f);\n",
      "        }\n",
      "        innerFlex2.setProperty(Property.BACKGROUND, new Background(ColorConstants.RED));\n",
      "        innerFlex2.setProperty(Property.FLEX_GROW, 2f);\n",
      "        innerFlex2.setProperty(Property.MIN_WIDTH, UnitValue.createPointValue(200));\n",
      "\n",
      "        flexContainer.add(innerFlex1).add(innerFlex2);\n",
      "        document.add(flexContainer);\n",
      "\n",
      "        document.close();\n",
      "\n",
      "        Assert.assertNull(new CompareTool().compareByContent(outFileName, cmpFileName, destinationFolder, \"diff\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void multipleFlexContainersWithPredefinedMaxWidthsInsideFlexContainerTest() throws IOException, InterruptedException {\n",
      "        String outFileName = destinationFolder + \"multipleFlexContainersWithPredefinedMaxWidthsInsideFlexContainerTest\" + comparisonPdfId + \".pdf\";\n",
      "        String cmpFileName = sourceFolder + \"cmp_multipleFlexContainersWithPredefinedMaxWidthsInsideFlexContainerTest\" + comparisonPdfId + \".pdf\";\n",
      "        PdfDocument pdfDocument = new PdfDocument(new PdfWriter(outFileName));\n",
      "\n",
      "        Document document = new Document(pdfDocument);\n",
      "\n",
      "        Div flexContainer = createFlexContainer();\n",
      "        flexContainer.setProperty(Property.BORDER, new SolidBorder(2));\n",
      "        flexContainer.setProperty(Property.BACKGROUND, new Background(ColorConstants.LIGHT_GRAY));\n",
      "\n",
      "        Div innerFlex1 = new FlexContainer();\n",
      "        innerFlex1.add(createNewDiv()).add(createNewDiv()).add(createNewDiv());\n",
      "        for (IElement children : innerFlex1.getChildren()) {\n",
      "            children.setProperty(Property.FLEX_GROW, 0.2f);\n",
      "        }\n",
      "        innerFlex1.setProperty(Property.BACKGROUND, new Background(ColorConstants.GREEN));\n",
      "        innerFlex1.setProperty(Property.FLEX_GROW, 1f);\n",
      "        innerFlex1.setProperty(Property.MAX_WIDTH, UnitValue.createPointValue(200));\n",
      "\n",
      "        Div innerFlex2 = new FlexContainer();\n",
      "        innerFlex2.add(createNewDiv()).add(createNewDiv());\n",
      "        for (IElement children : innerFlex2.getChildren()) {\n",
      "            children.setProperty(Property.FLEX_GROW, 0.3f);\n",
      "        }\n",
      "        innerFlex2.setProperty(Property.BACKGROUND, new Background(ColorConstants.RED));\n",
      "        innerFlex2.setProperty(Property.FLEX_GROW, 2f);\n",
      "        innerFlex2.setProperty(Property.MAX_WIDTH, UnitValue.createPointValue(200));\n",
      "\n",
      "        flexContainer.add(innerFlex1).add(innerFlex2);\n",
      "        document.add(flexContainer);\n",
      "\n",
      "        document.close();\n",
      "\n",
      "        Assert.assertNull(new CompareTool().compareByContent(outFileName, cmpFileName, destinationFolder, \"diff\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void flexContainerFillAvailableAreaTest() throws IOException, InterruptedException {\n",
      "        String outFileName = destinationFolder + \"flexContainerFillAvailableAreaTest\" + comparisonPdfId + \".pdf\";\n",
      "        String cmpFileName = sourceFolder + \"cmp_flexContainerFillAvailableAreaTest\" + comparisonPdfId + \".pdf\";\n",
      "        PdfDocument pdfDocument = new PdfDocument(new PdfWriter(outFileName));\n",
      "\n",
      "        Document document = new Document(pdfDocument);\n",
      "\n",
      "        Div flexContainer = createFlexContainer();\n",
      "        flexContainer.setProperty(Property.BORDER, new SolidBorder(2));\n",
      "        flexContainer.setProperty(Property.BACKGROUND, new Background(ColorConstants.LIGHT_GRAY));\n",
      "        flexContainer.setProperty(Property.FILL_AVAILABLE_AREA, true);\n",
      "\n",
      "        Div innerDiv = new Div();\n",
      "        innerDiv.add(createNewDiv()).add(createNewDiv()).add(createNewDiv());\n",
      "        innerDiv.setProperty(Property.BACKGROUND, new Background(ColorConstants.GREEN));\n",
      "\n",
      "        Table table = new Table(UnitValue.createPercentArray(new float[] {10, 10, 10}));\n",
      "        for (int i = 0; i < 3; i++) {\n",
      "            table.addCell(\"Hello\");\n",
      "        }\n",
      "\n",
      "        List romanList = new List(ListNumberingType.ROMAN_LOWER).setSymbolIndent(20).\n",
      "                setMarginLeft(25).\n",
      "                add(\"One\").add(\"Two\").add(\"Three\");\n",
      "        romanList.setProperty(Property.BACKGROUND, new Background(ColorConstants.MAGENTA));\n",
      "\n",
      "        flexContainer.add(table).add(new Paragraph(\"Test\")).add(innerDiv).add(romanList).add(new Image(ImageDataFactory.create(sourceFolder + \"img.jpg\")));\n",
      "        document.add(flexContainer);\n",
      "\n",
      "        document.close();\n",
      "\n",
      "        Assert.assertNull(new CompareTool().compareByContent(outFileName, cmpFileName, destinationFolder, \"diff\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void flexContainerRotationAngleTest() throws IOException, InterruptedException {\n",
      "        String outFileName = destinationFolder + \"flexContainerRotationAngleTest\" + comparisonPdfId + \".pdf\";\n",
      "        String cmpFileName = sourceFolder + \"cmp_flexContainerRotationAngleTest\" + comparisonPdfId + \".pdf\";\n",
      "        PdfDocument pdfDocument = new PdfDocument(new PdfWriter(outFileName));\n",
      "\n",
      "        Document document = new Document(pdfDocument);\n",
      "\n",
      "        Div flexContainer = createFlexContainer();\n",
      "        flexContainer.setProperty(Property.BORDER, new SolidBorder(2));\n",
      "        flexContainer.setProperty(Property.BACKGROUND, new Background(ColorConstants.LIGHT_GRAY));\n",
      "        flexContainer.setProperty(Property.ROTATION_ANGLE, 20f);\n",
      "\n",
      "        Table table = new Table(UnitValue.createPercentArray(new float[] {10, 10, 10}));\n",
      "        for (int i = 0; i < 3; i++) {\n",
      "            table.addCell(\"Hello\");\n",
      "        }\n",
      "\n",
      "        List romanList = new List(ListNumberingType.ROMAN_LOWER).setSymbolIndent(20).\n",
      "                setMarginLeft(25).\n",
      "                add(\"One\").add(\"Two\").add(\"Three\");\n",
      "        romanList.setProperty(Property.BACKGROUND, new Background(ColorConstants.MAGENTA));\n",
      "\n",
      "        flexContainer.add(table).add(new Paragraph(\"Test\")).add(romanList).add(new Image(ImageDataFactory.create(sourceFolder + \"img.jpg\")));\n",
      "        document.add(flexContainer);\n",
      "\n",
      "        document.close();\n",
      "\n",
      "        Assert.assertNull(new CompareTool().compareByContent(outFileName, cmpFileName, destinationFolder, \"diff\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    // TODO DEVSIX-5174 content should overflow bottom\n",
      "    public void respectFlexContainersHeightTest() throws IOException, InterruptedException {\n",
      "        String outFileName = destinationFolder + \"respectFlexContainersHeightTest\" + comparisonPdfId + \".pdf\";\n",
      "        String cmpFileName = sourceFolder + \"cmp_respectFlexContainersHeightTest\" + comparisonPdfId + \".pdf\";\n",
      "        PdfDocument pdfDocument = new PdfDocument(new PdfWriter(outFileName));\n",
      "\n",
      "        Document document = new Document(pdfDocument);\n",
      "        Style containerStyle = new Style()\n",
      "                .setWidth(60)\n",
      "                .setHeight(50);\n",
      "\n",
      "        Div flexContainer = getFlexContainer(null, containerStyle);\n",
      "        Div flexItem = new Div()\n",
      "                .setBackgroundColor(ColorConstants.BLUE)\n",
      "                .add(new Paragraph(\"h\"))\n",
      "                .add(new Paragraph(\"e\"))\n",
      "                .add(new Paragraph(\"l\"))\n",
      "                .add(new Paragraph(\"l\"))\n",
      "                .add(new Paragraph(\"o\"))\n",
      "                .add(new Paragraph(\"w\"))\n",
      "                .add(new Paragraph(\"o\"))\n",
      "                .add(new Paragraph(\"r\"))\n",
      "                .add(new Paragraph(\"l\"))\n",
      "                .add(new Paragraph(\"d\"));\n",
      "        flexContainer.add(flexItem);\n",
      "        flexContainer.add(new Div().setBackgroundColor(ColorConstants.YELLOW).setWidth(10).setHeight(200));\n",
      "\n",
      "        document.add(flexContainer);\n",
      "\n",
      "        document.close();\n",
      "\n",
      "        Assert.assertNull(new CompareTool().compareByContent(outFileName, cmpFileName, destinationFolder, \"diff\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void respectFlexContainersWidthTest() throws IOException, InterruptedException {\n",
      "        String outFileName = destinationFolder + \"respectFlexContainersWidthTest\" + comparisonPdfId + \".pdf\";\n",
      "        String cmpFileName = sourceFolder + \"cmp_respectFlexContainersWidthTest\" + comparisonPdfId + \".pdf\";\n",
      "        PdfDocument pdfDocument = new PdfDocument(new PdfWriter(outFileName));\n",
      "\n",
      "        Document document = new Document(pdfDocument);\n",
      "\n",
      "        // default (overflow fit)\n",
      "        OverflowPropertyValue overflowX = null;\n",
      "        Style containerStyle = new Style()\n",
      "                .setWidth(60)\n",
      "                .setHeight(200);\n",
      "\n",
      "        Style itemStyle = new Style()\n",
      "                .setWidth(60f)\n",
      "                .setHeight(100f);\n",
      "\n",
      "        Div flexContainer = getFlexContainer(overflowX, containerStyle);\n",
      "        flexContainer\n",
      "                .add(getFlexItem(overflowX, itemStyle))\n",
      "                .add(getFlexItem(overflowX, itemStyle));\n",
      "        document.add(flexContainer);\n",
      "\n",
      "        document.add(new AreaBreak());\n",
      "\n",
      "        // default (overflow visible)\n",
      "        overflowX = OverflowPropertyValue.VISIBLE;\n",
      "        flexContainer = getFlexContainer(overflowX, containerStyle);\n",
      "        flexContainer\n",
      "                .add(getFlexItem(overflowX, itemStyle))\n",
      "                .add(getFlexItem(overflowX, itemStyle));\n",
      "        document.add(flexContainer);\n",
      "\n",
      "        document.close();\n",
      "\n",
      "        Assert.assertNull(new CompareTool().compareByContent(outFileName, cmpFileName, destinationFolder, \"diff\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void flexItemsMinHeightShouldBeOverriddenTest() throws IOException, InterruptedException {\n",
      "        String outFileName = destinationFolder + \"flexItemsMinHeightShouldBeOverriddenTest\" + comparisonPdfId + \".pdf\";\n",
      "        String cmpFileName = sourceFolder + \"cmp_flexItemsMinHeightShouldBeOverriddenTest\" + comparisonPdfId + \".pdf\";\n",
      "        PdfDocument pdfDocument = new PdfDocument(new PdfWriter(outFileName));\n",
      "\n",
      "        Document document = new Document(pdfDocument);\n",
      "\n",
      "        Div flexContainer = createFlexContainer();\n",
      "\n",
      "        flexContainer.add(new Div().setWidth(110).setBackgroundColor(ColorConstants.BLUE).setHeight(100));\n",
      "        flexContainer.add(new Div().setWidth(110).setBackgroundColor(ColorConstants.YELLOW).setMinHeight(20));\n",
      "        document.add(flexContainer);\n",
      "\n",
      "        document.close();\n",
      "\n",
      "        Assert.assertNull(new CompareTool().compareByContent(outFileName, cmpFileName, destinationFolder, \"diff\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void linesMinHeightShouldBeRespectedTest() throws IOException, InterruptedException {\n",
      "        String outFileName = destinationFolder + \"linesMinHeightShouldBeRespectedTest\" + comparisonPdfId + \".pdf\";\n",
      "        String cmpFileName = sourceFolder + \"cmp_linesMinHeightShouldBeRespectedTest\" + comparisonPdfId + \".pdf\";\n",
      "        PdfDocument pdfDocument = new PdfDocument(new PdfWriter(outFileName));\n",
      "\n",
      "        Document document = new Document(pdfDocument);\n",
      "\n",
      "        Div flexContainer = createFlexContainer();\n",
      "        flexContainer.setMinHeight(100);\n",
      "\n",
      "        Div child = new Div().setWidth(110).setBackgroundColor(ColorConstants.BLUE);\n",
      "        child.add(new Paragraph().setWidth(110).setBackgroundColor(ColorConstants.YELLOW));\n",
      "        flexContainer.add(child);\n",
      "\n",
      "        document.add(flexContainer);\n",
      "\n",
      "        document.close();\n",
      "\n",
      "        Assert.assertNull(new CompareTool().compareByContent(outFileName, cmpFileName, destinationFolder, \"diff\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void linesMaxHeightShouldBeRespectedTest() throws IOException, InterruptedException {\n",
      "        String outFileName = destinationFolder + \"linesMaxHeightShouldBeRespectedTest\" + comparisonPdfId + \".pdf\";\n",
      "        String cmpFileName = sourceFolder + \"cmp_linesMaxHeightShouldBeRespectedTest\" + comparisonPdfId + \".pdf\";\n",
      "        PdfDocument pdfDocument = new PdfDocument(new PdfWriter(outFileName));\n",
      "\n",
      "        Document document = new Document(pdfDocument);\n",
      "\n",
      "        Div flexContainer = createFlexContainer();\n",
      "        flexContainer.setMaxHeight(100);\n",
      "\n",
      "        Div child = new Div().setWidth(100).setBackgroundColor(ColorConstants.BLUE).setHeight(150);\n",
      "        child.add(new Paragraph().setWidth(100).setBackgroundColor(ColorConstants.YELLOW));\n",
      "        flexContainer.add(child);\n",
      "\n",
      "        document.add(flexContainer);\n",
      "\n",
      "        document.close();\n",
      "\n",
      "        Assert.assertNull(new CompareTool().compareByContent(outFileName, cmpFileName, destinationFolder, \"diff\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void collapsingMarginsFlexContainerTest() throws IOException, InterruptedException {\n",
      "        String outFileName = destinationFolder + \"collapsingMarginsFlexContainerTest\" + comparisonPdfId + \".pdf\";\n",
      "        String cmpFileName = sourceFolder + \"cmp_collapsingMarginsFlexContainerTest\" + comparisonPdfId + \".pdf\";\n",
      "        PdfDocument pdfDocument = new PdfDocument(new PdfWriter(outFileName));\n",
      "\n",
      "        Document document = new Document(pdfDocument);\n",
      "        document.setProperty(Property.COLLAPSING_MARGINS, true);\n",
      "\n",
      "        Div flexContainer = createFlexContainer();\n",
      "        flexContainer.setProperty(Property.MARGIN_TOP, UnitValue.createPointValue(50));\n",
      "        flexContainer.setProperty(Property.BORDER, new SolidBorder(2));\n",
      "        flexContainer.setProperty(Property.BACKGROUND, new Background(ColorConstants.LIGHT_GRAY));\n",
      "\n",
      "        Div child1 = createNewDiv();\n",
      "        child1.setBackgroundColor(ColorConstants.CYAN);\n",
      "        child1.setMargin(50);\n",
      "\n",
      "        Div child2 = createNewDiv();\n",
      "        child2.setBackgroundColor(ColorConstants.CYAN);\n",
      "        child2.setMargin(50);\n",
      "\n",
      "        flexContainer.add(child1).add(child2);\n",
      "\n",
      "        Div flexContainersSibling = createNewDiv();\n",
      "        flexContainersSibling.setMarginBottom(40);\n",
      "\n",
      "        document.add(flexContainersSibling).add(flexContainer);\n",
      "\n",
      "        document.close();\n",
      "\n",
      "        Assert.assertNull(new CompareTool().compareByContent(outFileName, cmpFileName, destinationFolder, \"diff\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void flexItemBoxSizingTest() throws IOException, InterruptedException {\n",
      "        String outFileName = destinationFolder + \"flexItemBoxSizingTest\" + comparisonPdfId + \".pdf\";\n",
      "        String cmpFileName = sourceFolder + \"cmp_flexItemBoxSizingTest\" + comparisonPdfId + \".pdf\";\n",
      "        PdfDocument pdfDocument = new PdfDocument(new PdfWriter(outFileName));\n",
      "\n",
      "        Document document = new Document(pdfDocument);\n",
      "\n",
      "        Div flexContainer = createFlexContainer();\n",
      "        flexContainer.setProperty(Property.BORDER, new SolidBorder(ColorConstants.BLUE, 30));\n",
      "        flexContainer.setProperty(Property.BACKGROUND, new Background(ColorConstants.LIGHT_GRAY));\n",
      "        flexContainer.setWidth(450);\n",
      "        flexContainer.setHeight(200);\n",
      "\n",
      "        Div innerDiv = new Div();\n",
      "        innerDiv.setWidth(120);\n",
      "        innerDiv.setHeight(120);\n",
      "        innerDiv.setProperty(Property.BOX_SIZING, BoxSizingPropertyValue.BORDER_BOX);\n",
      "        innerDiv.setProperty(Property.BACKGROUND, new Background(ColorConstants.GREEN));\n",
      "        innerDiv.setBorder(new SolidBorder(ColorConstants.RED, 20));\n",
      "        innerDiv.setProperty(Property.FLEX_GROW, 0.3F);\n",
      "\n",
      "        Div innerDiv2 = new Div();\n",
      "        innerDiv2.setProperty(Property.FLEX_BASIS, UnitValue.createPointValue(120));\n",
      "        innerDiv2.setProperty(Property.BOX_SIZING, BoxSizingPropertyValue.BORDER_BOX);\n",
      "        innerDiv2.setProperty(Property.BACKGROUND, new Background(ColorConstants.GREEN));\n",
      "        innerDiv2.setBorder(new SolidBorder(ColorConstants.RED, 20));\n",
      "        innerDiv2.setProperty(Property.FLEX_GROW, 0.3F);\n",
      "\n",
      "        Div innerDiv3 = new Div();\n",
      "        innerDiv3.setProperty(Property.BOX_SIZING, BoxSizingPropertyValue.BORDER_BOX);\n",
      "        innerDiv3.setProperty(Property.BACKGROUND, new Background(ColorConstants.GREEN));\n",
      "        innerDiv3.setBorder(new SolidBorder(ColorConstants.RED, 20));\n",
      "\n",
      "        Div innerDivChild =\n",
      "                new Div().setBorder(new SolidBorder(ColorConstants.ORANGE, 10)).setBackgroundColor(ColorConstants.PINK).setWidth(50).setHeight(50);\n",
      "        innerDivChild.setProperty(Property.BOX_SIZING, BoxSizingPropertyValue.BORDER_BOX);\n",
      "        innerDiv.add(innerDivChild);\n",
      "        innerDiv2.add(innerDivChild);\n",
      "        innerDiv3.add(innerDivChild);\n",
      "\n",
      "        Div divToCompare = new Div().setWidth(450).setHeight(100).setBackgroundColor(ColorConstants.MAGENTA).setMarginTop(50);\n",
      "\n",
      "        flexContainer.add(innerDiv).add(innerDiv2).add(innerDiv3);\n",
      "        document.add(flexContainer).add(divToCompare);\n",
      "        document.close();\n",
      "\n",
      "        Assert.assertNull(new CompareTool().compareByContent(outFileName, cmpFileName, destinationFolder, \"diff\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void flexContainerBoxSizingTest() throws IOException, InterruptedException {\n",
      "        String outFileName = destinationFolder + \"flexContainerBoxSizingTest\" + comparisonPdfId + \".pdf\";\n",
      "        String cmpFileName = sourceFolder + \"cmp_flexContainerBoxSizingTest\" + comparisonPdfId + \".pdf\";\n",
      "        PdfDocument pdfDocument = new PdfDocument(new PdfWriter(outFileName));\n",
      "\n",
      "        Document document = new Document(pdfDocument);\n",
      "\n",
      "        Div flexContainer = createFlexContainer();\n",
      "        flexContainer.setProperty(Property.BORDER, new SolidBorder(ColorConstants.BLUE, 30));\n",
      "        flexContainer.setProperty(Property.BACKGROUND, new Background(ColorConstants.LIGHT_GRAY));\n",
      "        flexContainer.setWidth(450);\n",
      "        flexContainer.setProperty(Property.BOX_SIZING, BoxSizingPropertyValue.BORDER_BOX);\n",
      "\n",
      "        Div innerDiv = new Div();\n",
      "        innerDiv.setWidth(120);\n",
      "        Div innerDivChild =\n",
      "                new Div().setBorder(new SolidBorder(ColorConstants.ORANGE, 10)).setBackgroundColor(ColorConstants.PINK).setWidth(100).setHeight(100);\n",
      "        innerDiv.add(innerDivChild);\n",
      "        innerDiv.setProperty(Property.BACKGROUND, new Background(ColorConstants.GREEN));\n",
      "        innerDiv.setBorder(new SolidBorder(ColorConstants.RED, 20));\n",
      "\n",
      "        Div divToCompare = new Div().setWidth(450).setHeight(100).setBackgroundColor(ColorConstants.MAGENTA).setMarginTop(50);\n",
      "\n",
      "        flexContainer.add(innerDiv).add(createNewDiv());\n",
      "        document.add(flexContainer).add(divToCompare);\n",
      "        document.close();\n",
      "\n",
      "        Assert.assertNull(new CompareTool().compareByContent(outFileName, cmpFileName, destinationFolder, \"diff\"));\n",
      "    }\n",
      "\n",
      "    private Div getFlexContainer(OverflowPropertyValue overflowX, Style style) {\n",
      "        FlexContainer flexContainer = createFlexContainer();\n",
      "        flexContainer\n",
      "                .setBackgroundColor(ColorConstants.GREEN)\n",
      "                .setBorderRight(new SolidBorder(60));\n",
      "        if (null != style) {\n",
      "            flexContainer.addStyle(style);\n",
      "        }\n",
      "        if (null != overflowX) {\n",
      "            flexContainer.setProperty(Property.OVERFLOW_X, overflowX);\n",
      "        }\n",
      "        return flexContainer;\n",
      "    }\n",
      "\n",
      "    private static Div getFlexItem(OverflowPropertyValue overflowX, Style style) {\n",
      "        Div flexItem = new Div();\n",
      "        flexItem.setProperty(Property.FLEX_GROW, 0f);\n",
      "        flexItem.setProperty(Property.FLEX_SHRINK, 0f);\n",
      "        if (null != style) {\n",
      "            flexItem.addStyle(style);\n",
      "        }\n",
      "        flexItem.setBackgroundColor(ColorConstants.BLUE);\n",
      "        if (null != overflowX) {\n",
      "            flexItem.setProperty(Property.OVERFLOW_X, overflowX);\n",
      "        }\n",
      "        return flexItem;\n",
      "    }\n",
      "\n",
      "    private FlexContainer createFlexContainer() {\n",
      "        FlexContainer flexContainer = new FlexContainer();\n",
      "        flexContainer.setProperty(Property.ALIGN_ITEMS, alignItemsValue);\n",
      "        flexContainer.setProperty(Property.JUSTIFY_CONTENT, justifyContentValue);\n",
      "        flexContainer.setProperty(Property.FLEX_WRAP, wrapValue);\n",
      "        flexContainer.setProperty(Property.FLEX_DIRECTION, directionValue);\n",
      "        if (FlexWrapPropertyValue.NOWRAP != wrapValue) {\n",
      "            flexContainer.setWidth(200);\n",
      "        }\n",
      "        return flexContainer;\n",
      "    }\n",
      "\n",
      "    private static Div createNewDiv() {\n",
      "        Div newDiv = new Div();\n",
      "        newDiv.setProperty(Property.BORDER, new SolidBorder(1));\n",
      "        newDiv.setProperty(Property.WIDTH, UnitValue.createPointValue(50));\n",
      "        newDiv.setProperty(Property.HEIGHT, UnitValue.createPointValue(100));\n",
      "        return newDiv;\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "FlexContainer::::makeNewRenderer()": [
        40,
        43
      ]
    },
    "test_method_lines_dic": {
      "FlexContainerTest::::beforeClass()": [
        62,
        65
      ],
      "FlexContainerTest::::alignItemsAndJustifyContentProperties()": [
        76,
        104
      ],
      "FlexContainerTest::::defaultFlexContainerTest()": [
        106,
        130
      ],
      "FlexContainerTest::::flexContainerFixedHeightWidthTest()": [
        132,
        158
      ],
      "FlexContainerTest::::flexContainerDifferentChildrenTest()": [
        160,
        192
      ],
      "FlexContainerTest::::flexContainerHeightClippedTest()": [
        194,
        229
      ],
      "FlexContainerTest::::flexContainerDifferentChildrenDontFitHorizontallyTest()": [
        231,
        265
      ],
      "FlexContainerTest::::flexContainerDifferentChildrenDontFitHorizontallyForcedPlacementTest()": [
        267,
        300
      ],
      "FlexContainerTest::::flexContainerDifferentChildrenDontFitVerticallyTest()": [
        302,
        338
      ],
      "FlexContainerTest::::flexContainerDifferentChildrenFitContainerDoesNotFitVerticallyTest()": [
        340,
        377
      ],
      "FlexContainerTest::::flexContainerDifferentChildrenWithGrowTest()": [
        379,
        417
      ],
      "FlexContainerTest::::flexContainerDifferentChildrenWithFlexBasisTest()": [
        419,
        452
      ],
      "FlexContainerTest::::flexContainerDifferentChildrenWithFlexShrinkTest()": [
        454,
        490
      ],
      "FlexContainerTest::::flexContainerInsideFlexContainerTest()": [
        492,
        518
      ],
      "FlexContainerTest::::flexContainerInsideFlexContainerWithHugeBordersTest()": [
        520,
        548
      ],
      "FlexContainerTest::::multipleFlexContainersInsideFlexContainerTest()": [
        550,
        584
      ],
      "FlexContainerTest::::multipleFlexContainersWithPredefinedPointWidthsInsideFlexContainerTest()": [
        586,
        622
      ],
      "FlexContainerTest::::multipleFlexContainersWithPredefinedPercentWidthsInsideFlexContainerTest()": [
        624,
        660
      ],
      "FlexContainerTest::::multipleFlexContainersWithPredefinedMinWidthsInsideFlexContainerTest()": [
        662,
        699
      ],
      "FlexContainerTest::::multipleFlexContainersWithPredefinedMaxWidthsInsideFlexContainerTest()": [
        701,
        737
      ],
      "FlexContainerTest::::flexContainerFillAvailableAreaTest()": [
        739,
        772
      ],
      "FlexContainerTest::::flexContainerRotationAngleTest()": [
        774,
        803
      ],
      "FlexContainerTest::::respectFlexContainersHeightTest()": [
        805,
        838
      ],
      "FlexContainerTest::::respectFlexContainersWidthTest()": [
        840,
        877
      ],
      "FlexContainerTest::::flexItemsMinHeightShouldBeOverriddenTest()": [
        879,
        896
      ],
      "FlexContainerTest::::linesMinHeightShouldBeRespectedTest()": [
        898,
        918
      ],
      "FlexContainerTest::::linesMaxHeightShouldBeRespectedTest()": [
        920,
        940
      ],
      "FlexContainerTest::::collapsingMarginsFlexContainerTest()": [
        942,
        974
      ],
      "FlexContainerTest::::flexItemBoxSizingTest()": [
        976,
        1024
      ],
      "FlexContainerTest::::flexContainerBoxSizingTest()": [
        1026,
        1055
      ],
      "FlexContainerTest::::createFlexContainer()": [
        1085,
        1095
      ],
      "FlexContainerTest::::createNewDiv()": [
        1097,
        1103
      ]
    },
    "reverse_method_lines_dic": {
      "40": "FlexContainer::::makeNewRenderer()",
      "41": "FlexContainer::::makeNewRenderer()",
      "42": "FlexContainer::::makeNewRenderer()",
      "43": "FlexContainer::::makeNewRenderer()"
    },
    "test_reverse_method_lines_dic": {
      "62": "FlexContainerTest::::beforeClass()",
      "63": "FlexContainerTest::::beforeClass()",
      "64": "FlexContainerTest::::beforeClass()",
      "65": "FlexContainerTest::::beforeClass()",
      "76": "FlexContainerTest::::alignItemsAndJustifyContentProperties()",
      "77": "FlexContainerTest::::alignItemsAndJustifyContentProperties()",
      "78": "FlexContainerTest::::alignItemsAndJustifyContentProperties()",
      "79": "FlexContainerTest::::alignItemsAndJustifyContentProperties()",
      "80": "FlexContainerTest::::alignItemsAndJustifyContentProperties()",
      "81": "FlexContainerTest::::alignItemsAndJustifyContentProperties()",
      "82": "FlexContainerTest::::alignItemsAndJustifyContentProperties()",
      "83": "FlexContainerTest::::alignItemsAndJustifyContentProperties()",
      "84": "FlexContainerTest::::alignItemsAndJustifyContentProperties()",
      "85": "FlexContainerTest::::alignItemsAndJustifyContentProperties()",
      "86": "FlexContainerTest::::alignItemsAndJustifyContentProperties()",
      "87": "FlexContainerTest::::alignItemsAndJustifyContentProperties()",
      "88": "FlexContainerTest::::alignItemsAndJustifyContentProperties()",
      "89": "FlexContainerTest::::alignItemsAndJustifyContentProperties()",
      "90": "FlexContainerTest::::alignItemsAndJustifyContentProperties()",
      "91": "FlexContainerTest::::alignItemsAndJustifyContentProperties()",
      "92": "FlexContainerTest::::alignItemsAndJustifyContentProperties()",
      "93": "FlexContainerTest::::alignItemsAndJustifyContentProperties()",
      "94": "FlexContainerTest::::alignItemsAndJustifyContentProperties()",
      "95": "FlexContainerTest::::alignItemsAndJustifyContentProperties()",
      "96": "FlexContainerTest::::alignItemsAndJustifyContentProperties()",
      "97": "FlexContainerTest::::alignItemsAndJustifyContentProperties()",
      "98": "FlexContainerTest::::alignItemsAndJustifyContentProperties()",
      "99": "FlexContainerTest::::alignItemsAndJustifyContentProperties()",
      "100": "FlexContainerTest::::alignItemsAndJustifyContentProperties()",
      "101": "FlexContainerTest::::alignItemsAndJustifyContentProperties()",
      "102": "FlexContainerTest::::alignItemsAndJustifyContentProperties()",
      "103": "FlexContainerTest::::alignItemsAndJustifyContentProperties()",
      "104": "FlexContainerTest::::alignItemsAndJustifyContentProperties()",
      "106": "FlexContainerTest::::defaultFlexContainerTest()",
      "107": "FlexContainerTest::::defaultFlexContainerTest()",
      "108": "FlexContainerTest::::defaultFlexContainerTest()",
      "109": "FlexContainerTest::::defaultFlexContainerTest()",
      "110": "FlexContainerTest::::defaultFlexContainerTest()",
      "111": "FlexContainerTest::::defaultFlexContainerTest()",
      "112": "FlexContainerTest::::defaultFlexContainerTest()",
      "113": "FlexContainerTest::::defaultFlexContainerTest()",
      "114": "FlexContainerTest::::defaultFlexContainerTest()",
      "115": "FlexContainerTest::::defaultFlexContainerTest()",
      "116": "FlexContainerTest::::defaultFlexContainerTest()",
      "117": "FlexContainerTest::::defaultFlexContainerTest()",
      "118": "FlexContainerTest::::defaultFlexContainerTest()",
      "119": "FlexContainerTest::::defaultFlexContainerTest()",
      "120": "FlexContainerTest::::defaultFlexContainerTest()",
      "121": "FlexContainerTest::::defaultFlexContainerTest()",
      "122": "FlexContainerTest::::defaultFlexContainerTest()",
      "123": "FlexContainerTest::::defaultFlexContainerTest()",
      "124": "FlexContainerTest::::defaultFlexContainerTest()",
      "125": "FlexContainerTest::::defaultFlexContainerTest()",
      "126": "FlexContainerTest::::defaultFlexContainerTest()",
      "127": "FlexContainerTest::::defaultFlexContainerTest()",
      "128": "FlexContainerTest::::defaultFlexContainerTest()",
      "129": "FlexContainerTest::::defaultFlexContainerTest()",
      "130": "FlexContainerTest::::defaultFlexContainerTest()",
      "132": "FlexContainerTest::::flexContainerFixedHeightWidthTest()",
      "133": "FlexContainerTest::::flexContainerFixedHeightWidthTest()",
      "134": "FlexContainerTest::::flexContainerFixedHeightWidthTest()",
      "135": "FlexContainerTest::::flexContainerFixedHeightWidthTest()",
      "136": "FlexContainerTest::::flexContainerFixedHeightWidthTest()",
      "137": "FlexContainerTest::::flexContainerFixedHeightWidthTest()",
      "138": "FlexContainerTest::::flexContainerFixedHeightWidthTest()",
      "139": "FlexContainerTest::::flexContainerFixedHeightWidthTest()",
      "140": "FlexContainerTest::::flexContainerFixedHeightWidthTest()",
      "141": "FlexContainerTest::::flexContainerFixedHeightWidthTest()",
      "142": "FlexContainerTest::::flexContainerFixedHeightWidthTest()",
      "143": "FlexContainerTest::::flexContainerFixedHeightWidthTest()",
      "144": "FlexContainerTest::::flexContainerFixedHeightWidthTest()",
      "145": "FlexContainerTest::::flexContainerFixedHeightWidthTest()",
      "146": "FlexContainerTest::::flexContainerFixedHeightWidthTest()",
      "147": "FlexContainerTest::::flexContainerFixedHeightWidthTest()",
      "148": "FlexContainerTest::::flexContainerFixedHeightWidthTest()",
      "149": "FlexContainerTest::::flexContainerFixedHeightWidthTest()",
      "150": "FlexContainerTest::::flexContainerFixedHeightWidthTest()",
      "151": "FlexContainerTest::::flexContainerFixedHeightWidthTest()",
      "152": "FlexContainerTest::::flexContainerFixedHeightWidthTest()",
      "153": "FlexContainerTest::::flexContainerFixedHeightWidthTest()",
      "154": "FlexContainerTest::::flexContainerFixedHeightWidthTest()",
      "155": "FlexContainerTest::::flexContainerFixedHeightWidthTest()",
      "156": "FlexContainerTest::::flexContainerFixedHeightWidthTest()",
      "157": "FlexContainerTest::::flexContainerFixedHeightWidthTest()",
      "158": "FlexContainerTest::::flexContainerFixedHeightWidthTest()",
      "160": "FlexContainerTest::::flexContainerDifferentChildrenTest()",
      "161": "FlexContainerTest::::flexContainerDifferentChildrenTest()",
      "162": "FlexContainerTest::::flexContainerDifferentChildrenTest()",
      "163": "FlexContainerTest::::flexContainerDifferentChildrenTest()",
      "164": "FlexContainerTest::::flexContainerDifferentChildrenTest()",
      "165": "FlexContainerTest::::flexContainerDifferentChildrenTest()",
      "166": "FlexContainerTest::::flexContainerDifferentChildrenTest()",
      "167": "FlexContainerTest::::flexContainerDifferentChildrenTest()",
      "168": "FlexContainerTest::::flexContainerDifferentChildrenTest()",
      "169": "FlexContainerTest::::flexContainerDifferentChildrenTest()",
      "170": "FlexContainerTest::::flexContainerDifferentChildrenTest()",
      "171": "FlexContainerTest::::flexContainerDifferentChildrenTest()",
      "172": "FlexContainerTest::::flexContainerDifferentChildrenTest()",
      "173": "FlexContainerTest::::flexContainerDifferentChildrenTest()",
      "174": "FlexContainerTest::::flexContainerDifferentChildrenTest()",
      "175": "FlexContainerTest::::flexContainerDifferentChildrenTest()",
      "176": "FlexContainerTest::::flexContainerDifferentChildrenTest()",
      "177": "FlexContainerTest::::flexContainerDifferentChildrenTest()",
      "178": "FlexContainerTest::::flexContainerDifferentChildrenTest()",
      "179": "FlexContainerTest::::flexContainerDifferentChildrenTest()",
      "180": "FlexContainerTest::::flexContainerDifferentChildrenTest()",
      "181": "FlexContainerTest::::flexContainerDifferentChildrenTest()",
      "182": "FlexContainerTest::::flexContainerDifferentChildrenTest()",
      "183": "FlexContainerTest::::flexContainerDifferentChildrenTest()",
      "184": "FlexContainerTest::::flexContainerDifferentChildrenTest()",
      "185": "FlexContainerTest::::flexContainerDifferentChildrenTest()",
      "186": "FlexContainerTest::::flexContainerDifferentChildrenTest()",
      "187": "FlexContainerTest::::flexContainerDifferentChildrenTest()",
      "188": "FlexContainerTest::::flexContainerDifferentChildrenTest()",
      "189": "FlexContainerTest::::flexContainerDifferentChildrenTest()",
      "190": "FlexContainerTest::::flexContainerDifferentChildrenTest()",
      "191": "FlexContainerTest::::flexContainerDifferentChildrenTest()",
      "192": "FlexContainerTest::::flexContainerDifferentChildrenTest()",
      "194": "FlexContainerTest::::flexContainerHeightClippedTest()",
      "195": "FlexContainerTest::::flexContainerHeightClippedTest()",
      "196": "FlexContainerTest::::flexContainerHeightClippedTest()",
      "197": "FlexContainerTest::::flexContainerHeightClippedTest()",
      "198": "FlexContainerTest::::flexContainerHeightClippedTest()",
      "199": "FlexContainerTest::::flexContainerHeightClippedTest()",
      "200": "FlexContainerTest::::flexContainerHeightClippedTest()",
      "201": "FlexContainerTest::::flexContainerHeightClippedTest()",
      "202": "FlexContainerTest::::flexContainerHeightClippedTest()",
      "203": "FlexContainerTest::::flexContainerHeightClippedTest()",
      "204": "FlexContainerTest::::flexContainerHeightClippedTest()",
      "205": "FlexContainerTest::::flexContainerHeightClippedTest()",
      "206": "FlexContainerTest::::flexContainerHeightClippedTest()",
      "207": "FlexContainerTest::::flexContainerHeightClippedTest()",
      "208": "FlexContainerTest::::flexContainerHeightClippedTest()",
      "209": "FlexContainerTest::::flexContainerHeightClippedTest()",
      "210": "FlexContainerTest::::flexContainerHeightClippedTest()",
      "211": "FlexContainerTest::::flexContainerHeightClippedTest()",
      "212": "FlexContainerTest::::flexContainerHeightClippedTest()",
      "213": "FlexContainerTest::::flexContainerHeightClippedTest()",
      "214": "FlexContainerTest::::flexContainerHeightClippedTest()",
      "215": "FlexContainerTest::::flexContainerHeightClippedTest()",
      "216": "FlexContainerTest::::flexContainerHeightClippedTest()",
      "217": "FlexContainerTest::::flexContainerHeightClippedTest()",
      "218": "FlexContainerTest::::flexContainerHeightClippedTest()",
      "219": "FlexContainerTest::::flexContainerHeightClippedTest()",
      "220": "FlexContainerTest::::flexContainerHeightClippedTest()",
      "221": "FlexContainerTest::::flexContainerHeightClippedTest()",
      "222": "FlexContainerTest::::flexContainerHeightClippedTest()",
      "223": "FlexContainerTest::::flexContainerHeightClippedTest()",
      "224": "FlexContainerTest::::flexContainerHeightClippedTest()",
      "225": "FlexContainerTest::::flexContainerHeightClippedTest()",
      "226": "FlexContainerTest::::flexContainerHeightClippedTest()",
      "227": "FlexContainerTest::::flexContainerHeightClippedTest()",
      "228": "FlexContainerTest::::flexContainerHeightClippedTest()",
      "229": "FlexContainerTest::::flexContainerHeightClippedTest()",
      "231": "FlexContainerTest::::flexContainerDifferentChildrenDontFitHorizontallyTest()",
      "232": "FlexContainerTest::::flexContainerDifferentChildrenDontFitHorizontallyTest()",
      "233": "FlexContainerTest::::flexContainerDifferentChildrenDontFitHorizontallyTest()",
      "234": "FlexContainerTest::::flexContainerDifferentChildrenDontFitHorizontallyTest()",
      "235": "FlexContainerTest::::flexContainerDifferentChildrenDontFitHorizontallyTest()",
      "236": "FlexContainerTest::::flexContainerDifferentChildrenDontFitHorizontallyTest()",
      "237": "FlexContainerTest::::flexContainerDifferentChildrenDontFitHorizontallyTest()",
      "238": "FlexContainerTest::::flexContainerDifferentChildrenDontFitHorizontallyTest()",
      "239": "FlexContainerTest::::flexContainerDifferentChildrenDontFitHorizontallyTest()",
      "240": "FlexContainerTest::::flexContainerDifferentChildrenDontFitHorizontallyTest()",
      "241": "FlexContainerTest::::flexContainerDifferentChildrenDontFitHorizontallyTest()",
      "242": "FlexContainerTest::::flexContainerDifferentChildrenDontFitHorizontallyTest()",
      "243": "FlexContainerTest::::flexContainerDifferentChildrenDontFitHorizontallyTest()",
      "244": "FlexContainerTest::::flexContainerDifferentChildrenDontFitHorizontallyTest()",
      "245": "FlexContainerTest::::flexContainerDifferentChildrenDontFitHorizontallyTest()",
      "246": "FlexContainerTest::::flexContainerDifferentChildrenDontFitHorizontallyTest()",
      "247": "FlexContainerTest::::flexContainerDifferentChildrenDontFitHorizontallyTest()",
      "248": "FlexContainerTest::::flexContainerDifferentChildrenDontFitHorizontallyTest()",
      "249": "FlexContainerTest::::flexContainerDifferentChildrenDontFitHorizontallyTest()",
      "250": "FlexContainerTest::::flexContainerDifferentChildrenDontFitHorizontallyTest()",
      "251": "FlexContainerTest::::flexContainerDifferentChildrenDontFitHorizontallyTest()",
      "252": "FlexContainerTest::::flexContainerDifferentChildrenDontFitHorizontallyTest()",
      "253": "FlexContainerTest::::flexContainerDifferentChildrenDontFitHorizontallyTest()",
      "254": "FlexContainerTest::::flexContainerDifferentChildrenDontFitHorizontallyTest()",
      "255": "FlexContainerTest::::flexContainerDifferentChildrenDontFitHorizontallyTest()",
      "256": "FlexContainerTest::::flexContainerDifferentChildrenDontFitHorizontallyTest()",
      "257": "FlexContainerTest::::flexContainerDifferentChildrenDontFitHorizontallyTest()",
      "258": "FlexContainerTest::::flexContainerDifferentChildrenDontFitHorizontallyTest()",
      "259": "FlexContainerTest::::flexContainerDifferentChildrenDontFitHorizontallyTest()",
      "260": "FlexContainerTest::::flexContainerDifferentChildrenDontFitHorizontallyTest()",
      "261": "FlexContainerTest::::flexContainerDifferentChildrenDontFitHorizontallyTest()",
      "262": "FlexContainerTest::::flexContainerDifferentChildrenDontFitHorizontallyTest()",
      "263": "FlexContainerTest::::flexContainerDifferentChildrenDontFitHorizontallyTest()",
      "264": "FlexContainerTest::::flexContainerDifferentChildrenDontFitHorizontallyTest()",
      "265": "FlexContainerTest::::flexContainerDifferentChildrenDontFitHorizontallyTest()",
      "267": "FlexContainerTest::::flexContainerDifferentChildrenDontFitHorizontallyForcedPlacementTest()",
      "268": "FlexContainerTest::::flexContainerDifferentChildrenDontFitHorizontallyForcedPlacementTest()",
      "269": "FlexContainerTest::::flexContainerDifferentChildrenDontFitHorizontallyForcedPlacementTest()",
      "270": "FlexContainerTest::::flexContainerDifferentChildrenDontFitHorizontallyForcedPlacementTest()",
      "271": "FlexContainerTest::::flexContainerDifferentChildrenDontFitHorizontallyForcedPlacementTest()",
      "272": "FlexContainerTest::::flexContainerDifferentChildrenDontFitHorizontallyForcedPlacementTest()",
      "273": "FlexContainerTest::::flexContainerDifferentChildrenDontFitHorizontallyForcedPlacementTest()",
      "274": "FlexContainerTest::::flexContainerDifferentChildrenDontFitHorizontallyForcedPlacementTest()",
      "275": "FlexContainerTest::::flexContainerDifferentChildrenDontFitHorizontallyForcedPlacementTest()",
      "276": "FlexContainerTest::::flexContainerDifferentChildrenDontFitHorizontallyForcedPlacementTest()",
      "277": "FlexContainerTest::::flexContainerDifferentChildrenDontFitHorizontallyForcedPlacementTest()",
      "278": "FlexContainerTest::::flexContainerDifferentChildrenDontFitHorizontallyForcedPlacementTest()",
      "279": "FlexContainerTest::::flexContainerDifferentChildrenDontFitHorizontallyForcedPlacementTest()",
      "280": "FlexContainerTest::::flexContainerDifferentChildrenDontFitHorizontallyForcedPlacementTest()",
      "281": "FlexContainerTest::::flexContainerDifferentChildrenDontFitHorizontallyForcedPlacementTest()",
      "282": "FlexContainerTest::::flexContainerDifferentChildrenDontFitHorizontallyForcedPlacementTest()",
      "283": "FlexContainerTest::::flexContainerDifferentChildrenDontFitHorizontallyForcedPlacementTest()",
      "284": "FlexContainerTest::::flexContainerDifferentChildrenDontFitHorizontallyForcedPlacementTest()",
      "285": "FlexContainerTest::::flexContainerDifferentChildrenDontFitHorizontallyForcedPlacementTest()",
      "286": "FlexContainerTest::::flexContainerDifferentChildrenDontFitHorizontallyForcedPlacementTest()",
      "287": "FlexContainerTest::::flexContainerDifferentChildrenDontFitHorizontallyForcedPlacementTest()",
      "288": "FlexContainerTest::::flexContainerDifferentChildrenDontFitHorizontallyForcedPlacementTest()",
      "289": "FlexContainerTest::::flexContainerDifferentChildrenDontFitHorizontallyForcedPlacementTest()",
      "290": "FlexContainerTest::::flexContainerDifferentChildrenDontFitHorizontallyForcedPlacementTest()",
      "291": "FlexContainerTest::::flexContainerDifferentChildrenDontFitHorizontallyForcedPlacementTest()",
      "292": "FlexContainerTest::::flexContainerDifferentChildrenDontFitHorizontallyForcedPlacementTest()",
      "293": "FlexContainerTest::::flexContainerDifferentChildrenDontFitHorizontallyForcedPlacementTest()",
      "294": "FlexContainerTest::::flexContainerDifferentChildrenDontFitHorizontallyForcedPlacementTest()",
      "295": "FlexContainerTest::::flexContainerDifferentChildrenDontFitHorizontallyForcedPlacementTest()",
      "296": "FlexContainerTest::::flexContainerDifferentChildrenDontFitHorizontallyForcedPlacementTest()",
      "297": "FlexContainerTest::::flexContainerDifferentChildrenDontFitHorizontallyForcedPlacementTest()",
      "298": "FlexContainerTest::::flexContainerDifferentChildrenDontFitHorizontallyForcedPlacementTest()",
      "299": "FlexContainerTest::::flexContainerDifferentChildrenDontFitHorizontallyForcedPlacementTest()",
      "300": "FlexContainerTest::::flexContainerDifferentChildrenDontFitHorizontallyForcedPlacementTest()",
      "302": "FlexContainerTest::::flexContainerDifferentChildrenDontFitVerticallyTest()",
      "303": "FlexContainerTest::::flexContainerDifferentChildrenDontFitVerticallyTest()",
      "304": "FlexContainerTest::::flexContainerDifferentChildrenDontFitVerticallyTest()",
      "305": "FlexContainerTest::::flexContainerDifferentChildrenDontFitVerticallyTest()",
      "306": "FlexContainerTest::::flexContainerDifferentChildrenDontFitVerticallyTest()",
      "307": "FlexContainerTest::::flexContainerDifferentChildrenDontFitVerticallyTest()",
      "308": "FlexContainerTest::::flexContainerDifferentChildrenDontFitVerticallyTest()",
      "309": "FlexContainerTest::::flexContainerDifferentChildrenDontFitVerticallyTest()",
      "310": "FlexContainerTest::::flexContainerDifferentChildrenDontFitVerticallyTest()",
      "311": "FlexContainerTest::::flexContainerDifferentChildrenDontFitVerticallyTest()",
      "312": "FlexContainerTest::::flexContainerDifferentChildrenDontFitVerticallyTest()",
      "313": "FlexContainerTest::::flexContainerDifferentChildrenDontFitVerticallyTest()",
      "314": "FlexContainerTest::::flexContainerDifferentChildrenDontFitVerticallyTest()",
      "315": "FlexContainerTest::::flexContainerDifferentChildrenDontFitVerticallyTest()",
      "316": "FlexContainerTest::::flexContainerDifferentChildrenDontFitVerticallyTest()",
      "317": "FlexContainerTest::::flexContainerDifferentChildrenDontFitVerticallyTest()",
      "318": "FlexContainerTest::::flexContainerDifferentChildrenDontFitVerticallyTest()",
      "319": "FlexContainerTest::::flexContainerDifferentChildrenDontFitVerticallyTest()",
      "320": "FlexContainerTest::::flexContainerDifferentChildrenDontFitVerticallyTest()",
      "321": "FlexContainerTest::::flexContainerDifferentChildrenDontFitVerticallyTest()",
      "322": "FlexContainerTest::::flexContainerDifferentChildrenDontFitVerticallyTest()",
      "323": "FlexContainerTest::::flexContainerDifferentChildrenDontFitVerticallyTest()",
      "324": "FlexContainerTest::::flexContainerDifferentChildrenDontFitVerticallyTest()",
      "325": "FlexContainerTest::::flexContainerDifferentChildrenDontFitVerticallyTest()",
      "326": "FlexContainerTest::::flexContainerDifferentChildrenDontFitVerticallyTest()",
      "327": "FlexContainerTest::::flexContainerDifferentChildrenDontFitVerticallyTest()",
      "328": "FlexContainerTest::::flexContainerDifferentChildrenDontFitVerticallyTest()",
      "329": "FlexContainerTest::::flexContainerDifferentChildrenDontFitVerticallyTest()",
      "330": "FlexContainerTest::::flexContainerDifferentChildrenDontFitVerticallyTest()",
      "331": "FlexContainerTest::::flexContainerDifferentChildrenDontFitVerticallyTest()",
      "332": "FlexContainerTest::::flexContainerDifferentChildrenDontFitVerticallyTest()",
      "333": "FlexContainerTest::::flexContainerDifferentChildrenDontFitVerticallyTest()",
      "334": "FlexContainerTest::::flexContainerDifferentChildrenDontFitVerticallyTest()",
      "335": "FlexContainerTest::::flexContainerDifferentChildrenDontFitVerticallyTest()",
      "336": "FlexContainerTest::::flexContainerDifferentChildrenDontFitVerticallyTest()",
      "337": "FlexContainerTest::::flexContainerDifferentChildrenDontFitVerticallyTest()",
      "338": "FlexContainerTest::::flexContainerDifferentChildrenDontFitVerticallyTest()",
      "340": "FlexContainerTest::::flexContainerDifferentChildrenFitContainerDoesNotFitVerticallyTest()",
      "341": "FlexContainerTest::::flexContainerDifferentChildrenFitContainerDoesNotFitVerticallyTest()",
      "342": "FlexContainerTest::::flexContainerDifferentChildrenFitContainerDoesNotFitVerticallyTest()",
      "343": "FlexContainerTest::::flexContainerDifferentChildrenFitContainerDoesNotFitVerticallyTest()",
      "344": "FlexContainerTest::::flexContainerDifferentChildrenFitContainerDoesNotFitVerticallyTest()",
      "345": "FlexContainerTest::::flexContainerDifferentChildrenFitContainerDoesNotFitVerticallyTest()",
      "346": "FlexContainerTest::::flexContainerDifferentChildrenFitContainerDoesNotFitVerticallyTest()",
      "347": "FlexContainerTest::::flexContainerDifferentChildrenFitContainerDoesNotFitVerticallyTest()",
      "348": "FlexContainerTest::::flexContainerDifferentChildrenFitContainerDoesNotFitVerticallyTest()",
      "349": "FlexContainerTest::::flexContainerDifferentChildrenFitContainerDoesNotFitVerticallyTest()",
      "350": "FlexContainerTest::::flexContainerDifferentChildrenFitContainerDoesNotFitVerticallyTest()",
      "351": "FlexContainerTest::::flexContainerDifferentChildrenFitContainerDoesNotFitVerticallyTest()",
      "352": "FlexContainerTest::::flexContainerDifferentChildrenFitContainerDoesNotFitVerticallyTest()",
      "353": "FlexContainerTest::::flexContainerDifferentChildrenFitContainerDoesNotFitVerticallyTest()",
      "354": "FlexContainerTest::::flexContainerDifferentChildrenFitContainerDoesNotFitVerticallyTest()",
      "355": "FlexContainerTest::::flexContainerDifferentChildrenFitContainerDoesNotFitVerticallyTest()",
      "356": "FlexContainerTest::::flexContainerDifferentChildrenFitContainerDoesNotFitVerticallyTest()",
      "357": "FlexContainerTest::::flexContainerDifferentChildrenFitContainerDoesNotFitVerticallyTest()",
      "358": "FlexContainerTest::::flexContainerDifferentChildrenFitContainerDoesNotFitVerticallyTest()",
      "359": "FlexContainerTest::::flexContainerDifferentChildrenFitContainerDoesNotFitVerticallyTest()",
      "360": "FlexContainerTest::::flexContainerDifferentChildrenFitContainerDoesNotFitVerticallyTest()",
      "361": "FlexContainerTest::::flexContainerDifferentChildrenFitContainerDoesNotFitVerticallyTest()",
      "362": "FlexContainerTest::::flexContainerDifferentChildrenFitContainerDoesNotFitVerticallyTest()",
      "363": "FlexContainerTest::::flexContainerDifferentChildrenFitContainerDoesNotFitVerticallyTest()",
      "364": "FlexContainerTest::::flexContainerDifferentChildrenFitContainerDoesNotFitVerticallyTest()",
      "365": "FlexContainerTest::::flexContainerDifferentChildrenFitContainerDoesNotFitVerticallyTest()",
      "366": "FlexContainerTest::::flexContainerDifferentChildrenFitContainerDoesNotFitVerticallyTest()",
      "367": "FlexContainerTest::::flexContainerDifferentChildrenFitContainerDoesNotFitVerticallyTest()",
      "368": "FlexContainerTest::::flexContainerDifferentChildrenFitContainerDoesNotFitVerticallyTest()",
      "369": "FlexContainerTest::::flexContainerDifferentChildrenFitContainerDoesNotFitVerticallyTest()",
      "370": "FlexContainerTest::::flexContainerDifferentChildrenFitContainerDoesNotFitVerticallyTest()",
      "371": "FlexContainerTest::::flexContainerDifferentChildrenFitContainerDoesNotFitVerticallyTest()",
      "372": "FlexContainerTest::::flexContainerDifferentChildrenFitContainerDoesNotFitVerticallyTest()",
      "373": "FlexContainerTest::::flexContainerDifferentChildrenFitContainerDoesNotFitVerticallyTest()",
      "374": "FlexContainerTest::::flexContainerDifferentChildrenFitContainerDoesNotFitVerticallyTest()",
      "375": "FlexContainerTest::::flexContainerDifferentChildrenFitContainerDoesNotFitVerticallyTest()",
      "376": "FlexContainerTest::::flexContainerDifferentChildrenFitContainerDoesNotFitVerticallyTest()",
      "377": "FlexContainerTest::::flexContainerDifferentChildrenFitContainerDoesNotFitVerticallyTest()",
      "379": "FlexContainerTest::::flexContainerDifferentChildrenWithGrowTest()",
      "380": "FlexContainerTest::::flexContainerDifferentChildrenWithGrowTest()",
      "381": "FlexContainerTest::::flexContainerDifferentChildrenWithGrowTest()",
      "382": "FlexContainerTest::::flexContainerDifferentChildrenWithGrowTest()",
      "383": "FlexContainerTest::::flexContainerDifferentChildrenWithGrowTest()",
      "384": "FlexContainerTest::::flexContainerDifferentChildrenWithGrowTest()",
      "385": "FlexContainerTest::::flexContainerDifferentChildrenWithGrowTest()",
      "386": "FlexContainerTest::::flexContainerDifferentChildrenWithGrowTest()",
      "387": "FlexContainerTest::::flexContainerDifferentChildrenWithGrowTest()",
      "388": "FlexContainerTest::::flexContainerDifferentChildrenWithGrowTest()",
      "389": "FlexContainerTest::::flexContainerDifferentChildrenWithGrowTest()",
      "390": "FlexContainerTest::::flexContainerDifferentChildrenWithGrowTest()",
      "391": "FlexContainerTest::::flexContainerDifferentChildrenWithGrowTest()",
      "392": "FlexContainerTest::::flexContainerDifferentChildrenWithGrowTest()",
      "393": "FlexContainerTest::::flexContainerDifferentChildrenWithGrowTest()",
      "394": "FlexContainerTest::::flexContainerDifferentChildrenWithGrowTest()",
      "395": "FlexContainerTest::::flexContainerDifferentChildrenWithGrowTest()",
      "396": "FlexContainerTest::::flexContainerDifferentChildrenWithGrowTest()",
      "397": "FlexContainerTest::::flexContainerDifferentChildrenWithGrowTest()",
      "398": "FlexContainerTest::::flexContainerDifferentChildrenWithGrowTest()",
      "399": "FlexContainerTest::::flexContainerDifferentChildrenWithGrowTest()",
      "400": "FlexContainerTest::::flexContainerDifferentChildrenWithGrowTest()",
      "401": "FlexContainerTest::::flexContainerDifferentChildrenWithGrowTest()",
      "402": "FlexContainerTest::::flexContainerDifferentChildrenWithGrowTest()",
      "403": "FlexContainerTest::::flexContainerDifferentChildrenWithGrowTest()",
      "404": "FlexContainerTest::::flexContainerDifferentChildrenWithGrowTest()",
      "405": "FlexContainerTest::::flexContainerDifferentChildrenWithGrowTest()",
      "406": "FlexContainerTest::::flexContainerDifferentChildrenWithGrowTest()",
      "407": "FlexContainerTest::::flexContainerDifferentChildrenWithGrowTest()",
      "408": "FlexContainerTest::::flexContainerDifferentChildrenWithGrowTest()",
      "409": "FlexContainerTest::::flexContainerDifferentChildrenWithGrowTest()",
      "410": "FlexContainerTest::::flexContainerDifferentChildrenWithGrowTest()",
      "411": "FlexContainerTest::::flexContainerDifferentChildrenWithGrowTest()",
      "412": "FlexContainerTest::::flexContainerDifferentChildrenWithGrowTest()",
      "413": "FlexContainerTest::::flexContainerDifferentChildrenWithGrowTest()",
      "414": "FlexContainerTest::::flexContainerDifferentChildrenWithGrowTest()",
      "415": "FlexContainerTest::::flexContainerDifferentChildrenWithGrowTest()",
      "416": "FlexContainerTest::::flexContainerDifferentChildrenWithGrowTest()",
      "417": "FlexContainerTest::::flexContainerDifferentChildrenWithGrowTest()",
      "419": "FlexContainerTest::::flexContainerDifferentChildrenWithFlexBasisTest()",
      "420": "FlexContainerTest::::flexContainerDifferentChildrenWithFlexBasisTest()",
      "421": "FlexContainerTest::::flexContainerDifferentChildrenWithFlexBasisTest()",
      "422": "FlexContainerTest::::flexContainerDifferentChildrenWithFlexBasisTest()",
      "423": "FlexContainerTest::::flexContainerDifferentChildrenWithFlexBasisTest()",
      "424": "FlexContainerTest::::flexContainerDifferentChildrenWithFlexBasisTest()",
      "425": "FlexContainerTest::::flexContainerDifferentChildrenWithFlexBasisTest()",
      "426": "FlexContainerTest::::flexContainerDifferentChildrenWithFlexBasisTest()",
      "427": "FlexContainerTest::::flexContainerDifferentChildrenWithFlexBasisTest()",
      "428": "FlexContainerTest::::flexContainerDifferentChildrenWithFlexBasisTest()",
      "429": "FlexContainerTest::::flexContainerDifferentChildrenWithFlexBasisTest()",
      "430": "FlexContainerTest::::flexContainerDifferentChildrenWithFlexBasisTest()",
      "431": "FlexContainerTest::::flexContainerDifferentChildrenWithFlexBasisTest()",
      "432": "FlexContainerTest::::flexContainerDifferentChildrenWithFlexBasisTest()",
      "433": "FlexContainerTest::::flexContainerDifferentChildrenWithFlexBasisTest()",
      "434": "FlexContainerTest::::flexContainerDifferentChildrenWithFlexBasisTest()",
      "435": "FlexContainerTest::::flexContainerDifferentChildrenWithFlexBasisTest()",
      "436": "FlexContainerTest::::flexContainerDifferentChildrenWithFlexBasisTest()",
      "437": "FlexContainerTest::::flexContainerDifferentChildrenWithFlexBasisTest()",
      "438": "FlexContainerTest::::flexContainerDifferentChildrenWithFlexBasisTest()",
      "439": "FlexContainerTest::::flexContainerDifferentChildrenWithFlexBasisTest()",
      "440": "FlexContainerTest::::flexContainerDifferentChildrenWithFlexBasisTest()",
      "441": "FlexContainerTest::::flexContainerDifferentChildrenWithFlexBasisTest()",
      "442": "FlexContainerTest::::flexContainerDifferentChildrenWithFlexBasisTest()",
      "443": "FlexContainerTest::::flexContainerDifferentChildrenWithFlexBasisTest()",
      "444": "FlexContainerTest::::flexContainerDifferentChildrenWithFlexBasisTest()",
      "445": "FlexContainerTest::::flexContainerDifferentChildrenWithFlexBasisTest()",
      "446": "FlexContainerTest::::flexContainerDifferentChildrenWithFlexBasisTest()",
      "447": "FlexContainerTest::::flexContainerDifferentChildrenWithFlexBasisTest()",
      "448": "FlexContainerTest::::flexContainerDifferentChildrenWithFlexBasisTest()",
      "449": "FlexContainerTest::::flexContainerDifferentChildrenWithFlexBasisTest()",
      "450": "FlexContainerTest::::flexContainerDifferentChildrenWithFlexBasisTest()",
      "451": "FlexContainerTest::::flexContainerDifferentChildrenWithFlexBasisTest()",
      "452": "FlexContainerTest::::flexContainerDifferentChildrenWithFlexBasisTest()",
      "454": "FlexContainerTest::::flexContainerDifferentChildrenWithFlexShrinkTest()",
      "455": "FlexContainerTest::::flexContainerDifferentChildrenWithFlexShrinkTest()",
      "456": "FlexContainerTest::::flexContainerDifferentChildrenWithFlexShrinkTest()",
      "457": "FlexContainerTest::::flexContainerDifferentChildrenWithFlexShrinkTest()",
      "458": "FlexContainerTest::::flexContainerDifferentChildrenWithFlexShrinkTest()",
      "459": "FlexContainerTest::::flexContainerDifferentChildrenWithFlexShrinkTest()",
      "460": "FlexContainerTest::::flexContainerDifferentChildrenWithFlexShrinkTest()",
      "461": "FlexContainerTest::::flexContainerDifferentChildrenWithFlexShrinkTest()",
      "462": "FlexContainerTest::::flexContainerDifferentChildrenWithFlexShrinkTest()",
      "463": "FlexContainerTest::::flexContainerDifferentChildrenWithFlexShrinkTest()",
      "464": "FlexContainerTest::::flexContainerDifferentChildrenWithFlexShrinkTest()",
      "465": "FlexContainerTest::::flexContainerDifferentChildrenWithFlexShrinkTest()",
      "466": "FlexContainerTest::::flexContainerDifferentChildrenWithFlexShrinkTest()",
      "467": "FlexContainerTest::::flexContainerDifferentChildrenWithFlexShrinkTest()",
      "468": "FlexContainerTest::::flexContainerDifferentChildrenWithFlexShrinkTest()",
      "469": "FlexContainerTest::::flexContainerDifferentChildrenWithFlexShrinkTest()",
      "470": "FlexContainerTest::::flexContainerDifferentChildrenWithFlexShrinkTest()",
      "471": "FlexContainerTest::::flexContainerDifferentChildrenWithFlexShrinkTest()",
      "472": "FlexContainerTest::::flexContainerDifferentChildrenWithFlexShrinkTest()",
      "473": "FlexContainerTest::::flexContainerDifferentChildrenWithFlexShrinkTest()",
      "474": "FlexContainerTest::::flexContainerDifferentChildrenWithFlexShrinkTest()",
      "475": "FlexContainerTest::::flexContainerDifferentChildrenWithFlexShrinkTest()",
      "476": "FlexContainerTest::::flexContainerDifferentChildrenWithFlexShrinkTest()",
      "477": "FlexContainerTest::::flexContainerDifferentChildrenWithFlexShrinkTest()",
      "478": "FlexContainerTest::::flexContainerDifferentChildrenWithFlexShrinkTest()",
      "479": "FlexContainerTest::::flexContainerDifferentChildrenWithFlexShrinkTest()",
      "480": "FlexContainerTest::::flexContainerDifferentChildrenWithFlexShrinkTest()",
      "481": "FlexContainerTest::::flexContainerDifferentChildrenWithFlexShrinkTest()",
      "482": "FlexContainerTest::::flexContainerDifferentChildrenWithFlexShrinkTest()",
      "483": "FlexContainerTest::::flexContainerDifferentChildrenWithFlexShrinkTest()",
      "484": "FlexContainerTest::::flexContainerDifferentChildrenWithFlexShrinkTest()",
      "485": "FlexContainerTest::::flexContainerDifferentChildrenWithFlexShrinkTest()",
      "486": "FlexContainerTest::::flexContainerDifferentChildrenWithFlexShrinkTest()",
      "487": "FlexContainerTest::::flexContainerDifferentChildrenWithFlexShrinkTest()",
      "488": "FlexContainerTest::::flexContainerDifferentChildrenWithFlexShrinkTest()",
      "489": "FlexContainerTest::::flexContainerDifferentChildrenWithFlexShrinkTest()",
      "490": "FlexContainerTest::::flexContainerDifferentChildrenWithFlexShrinkTest()",
      "492": "FlexContainerTest::::flexContainerInsideFlexContainerTest()",
      "493": "FlexContainerTest::::flexContainerInsideFlexContainerTest()",
      "494": "FlexContainerTest::::flexContainerInsideFlexContainerTest()",
      "495": "FlexContainerTest::::flexContainerInsideFlexContainerTest()",
      "496": "FlexContainerTest::::flexContainerInsideFlexContainerTest()",
      "497": "FlexContainerTest::::flexContainerInsideFlexContainerTest()",
      "498": "FlexContainerTest::::flexContainerInsideFlexContainerTest()",
      "499": "FlexContainerTest::::flexContainerInsideFlexContainerTest()",
      "500": "FlexContainerTest::::flexContainerInsideFlexContainerTest()",
      "501": "FlexContainerTest::::flexContainerInsideFlexContainerTest()",
      "502": "FlexContainerTest::::flexContainerInsideFlexContainerTest()",
      "503": "FlexContainerTest::::flexContainerInsideFlexContainerTest()",
      "504": "FlexContainerTest::::flexContainerInsideFlexContainerTest()",
      "505": "FlexContainerTest::::flexContainerInsideFlexContainerTest()",
      "506": "FlexContainerTest::::flexContainerInsideFlexContainerTest()",
      "507": "FlexContainerTest::::flexContainerInsideFlexContainerTest()",
      "508": "FlexContainerTest::::flexContainerInsideFlexContainerTest()",
      "509": "FlexContainerTest::::flexContainerInsideFlexContainerTest()",
      "510": "FlexContainerTest::::flexContainerInsideFlexContainerTest()",
      "511": "FlexContainerTest::::flexContainerInsideFlexContainerTest()",
      "512": "FlexContainerTest::::flexContainerInsideFlexContainerTest()",
      "513": "FlexContainerTest::::flexContainerInsideFlexContainerTest()",
      "514": "FlexContainerTest::::flexContainerInsideFlexContainerTest()",
      "515": "FlexContainerTest::::flexContainerInsideFlexContainerTest()",
      "516": "FlexContainerTest::::flexContainerInsideFlexContainerTest()",
      "517": "FlexContainerTest::::flexContainerInsideFlexContainerTest()",
      "518": "FlexContainerTest::::flexContainerInsideFlexContainerTest()",
      "520": "FlexContainerTest::::flexContainerInsideFlexContainerWithHugeBordersTest()",
      "521": "FlexContainerTest::::flexContainerInsideFlexContainerWithHugeBordersTest()",
      "522": "FlexContainerTest::::flexContainerInsideFlexContainerWithHugeBordersTest()",
      "523": "FlexContainerTest::::flexContainerInsideFlexContainerWithHugeBordersTest()",
      "524": "FlexContainerTest::::flexContainerInsideFlexContainerWithHugeBordersTest()",
      "525": "FlexContainerTest::::flexContainerInsideFlexContainerWithHugeBordersTest()",
      "526": "FlexContainerTest::::flexContainerInsideFlexContainerWithHugeBordersTest()",
      "527": "FlexContainerTest::::flexContainerInsideFlexContainerWithHugeBordersTest()",
      "528": "FlexContainerTest::::flexContainerInsideFlexContainerWithHugeBordersTest()",
      "529": "FlexContainerTest::::flexContainerInsideFlexContainerWithHugeBordersTest()",
      "530": "FlexContainerTest::::flexContainerInsideFlexContainerWithHugeBordersTest()",
      "531": "FlexContainerTest::::flexContainerInsideFlexContainerWithHugeBordersTest()",
      "532": "FlexContainerTest::::flexContainerInsideFlexContainerWithHugeBordersTest()",
      "533": "FlexContainerTest::::flexContainerInsideFlexContainerWithHugeBordersTest()",
      "534": "FlexContainerTest::::flexContainerInsideFlexContainerWithHugeBordersTest()",
      "535": "FlexContainerTest::::flexContainerInsideFlexContainerWithHugeBordersTest()",
      "536": "FlexContainerTest::::flexContainerInsideFlexContainerWithHugeBordersTest()",
      "537": "FlexContainerTest::::flexContainerInsideFlexContainerWithHugeBordersTest()",
      "538": "FlexContainerTest::::flexContainerInsideFlexContainerWithHugeBordersTest()",
      "539": "FlexContainerTest::::flexContainerInsideFlexContainerWithHugeBordersTest()",
      "540": "FlexContainerTest::::flexContainerInsideFlexContainerWithHugeBordersTest()",
      "541": "FlexContainerTest::::flexContainerInsideFlexContainerWithHugeBordersTest()",
      "542": "FlexContainerTest::::flexContainerInsideFlexContainerWithHugeBordersTest()",
      "543": "FlexContainerTest::::flexContainerInsideFlexContainerWithHugeBordersTest()",
      "544": "FlexContainerTest::::flexContainerInsideFlexContainerWithHugeBordersTest()",
      "545": "FlexContainerTest::::flexContainerInsideFlexContainerWithHugeBordersTest()",
      "546": "FlexContainerTest::::flexContainerInsideFlexContainerWithHugeBordersTest()",
      "547": "FlexContainerTest::::flexContainerInsideFlexContainerWithHugeBordersTest()",
      "548": "FlexContainerTest::::flexContainerInsideFlexContainerWithHugeBordersTest()",
      "550": "FlexContainerTest::::multipleFlexContainersInsideFlexContainerTest()",
      "551": "FlexContainerTest::::multipleFlexContainersInsideFlexContainerTest()",
      "552": "FlexContainerTest::::multipleFlexContainersInsideFlexContainerTest()",
      "553": "FlexContainerTest::::multipleFlexContainersInsideFlexContainerTest()",
      "554": "FlexContainerTest::::multipleFlexContainersInsideFlexContainerTest()",
      "555": "FlexContainerTest::::multipleFlexContainersInsideFlexContainerTest()",
      "556": "FlexContainerTest::::multipleFlexContainersInsideFlexContainerTest()",
      "557": "FlexContainerTest::::multipleFlexContainersInsideFlexContainerTest()",
      "558": "FlexContainerTest::::multipleFlexContainersInsideFlexContainerTest()",
      "559": "FlexContainerTest::::multipleFlexContainersInsideFlexContainerTest()",
      "560": "FlexContainerTest::::multipleFlexContainersInsideFlexContainerTest()",
      "561": "FlexContainerTest::::multipleFlexContainersInsideFlexContainerTest()",
      "562": "FlexContainerTest::::multipleFlexContainersInsideFlexContainerTest()",
      "563": "FlexContainerTest::::multipleFlexContainersInsideFlexContainerTest()",
      "564": "FlexContainerTest::::multipleFlexContainersInsideFlexContainerTest()",
      "565": "FlexContainerTest::::multipleFlexContainersInsideFlexContainerTest()",
      "566": "FlexContainerTest::::multipleFlexContainersInsideFlexContainerTest()",
      "567": "FlexContainerTest::::multipleFlexContainersInsideFlexContainerTest()",
      "568": "FlexContainerTest::::multipleFlexContainersInsideFlexContainerTest()",
      "569": "FlexContainerTest::::multipleFlexContainersInsideFlexContainerTest()",
      "570": "FlexContainerTest::::multipleFlexContainersInsideFlexContainerTest()",
      "571": "FlexContainerTest::::multipleFlexContainersInsideFlexContainerTest()",
      "572": "FlexContainerTest::::multipleFlexContainersInsideFlexContainerTest()",
      "573": "FlexContainerTest::::multipleFlexContainersInsideFlexContainerTest()",
      "574": "FlexContainerTest::::multipleFlexContainersInsideFlexContainerTest()",
      "575": "FlexContainerTest::::multipleFlexContainersInsideFlexContainerTest()",
      "576": "FlexContainerTest::::multipleFlexContainersInsideFlexContainerTest()",
      "577": "FlexContainerTest::::multipleFlexContainersInsideFlexContainerTest()",
      "578": "FlexContainerTest::::multipleFlexContainersInsideFlexContainerTest()",
      "579": "FlexContainerTest::::multipleFlexContainersInsideFlexContainerTest()",
      "580": "FlexContainerTest::::multipleFlexContainersInsideFlexContainerTest()",
      "581": "FlexContainerTest::::multipleFlexContainersInsideFlexContainerTest()",
      "582": "FlexContainerTest::::multipleFlexContainersInsideFlexContainerTest()",
      "583": "FlexContainerTest::::multipleFlexContainersInsideFlexContainerTest()",
      "584": "FlexContainerTest::::multipleFlexContainersInsideFlexContainerTest()",
      "586": "FlexContainerTest::::multipleFlexContainersWithPredefinedPointWidthsInsideFlexContainerTest()",
      "587": "FlexContainerTest::::multipleFlexContainersWithPredefinedPointWidthsInsideFlexContainerTest()",
      "588": "FlexContainerTest::::multipleFlexContainersWithPredefinedPointWidthsInsideFlexContainerTest()",
      "589": "FlexContainerTest::::multipleFlexContainersWithPredefinedPointWidthsInsideFlexContainerTest()",
      "590": "FlexContainerTest::::multipleFlexContainersWithPredefinedPointWidthsInsideFlexContainerTest()",
      "591": "FlexContainerTest::::multipleFlexContainersWithPredefinedPointWidthsInsideFlexContainerTest()",
      "592": "FlexContainerTest::::multipleFlexContainersWithPredefinedPointWidthsInsideFlexContainerTest()",
      "593": "FlexContainerTest::::multipleFlexContainersWithPredefinedPointWidthsInsideFlexContainerTest()",
      "594": "FlexContainerTest::::multipleFlexContainersWithPredefinedPointWidthsInsideFlexContainerTest()",
      "595": "FlexContainerTest::::multipleFlexContainersWithPredefinedPointWidthsInsideFlexContainerTest()",
      "596": "FlexContainerTest::::multipleFlexContainersWithPredefinedPointWidthsInsideFlexContainerTest()",
      "597": "FlexContainerTest::::multipleFlexContainersWithPredefinedPointWidthsInsideFlexContainerTest()",
      "598": "FlexContainerTest::::multipleFlexContainersWithPredefinedPointWidthsInsideFlexContainerTest()",
      "599": "FlexContainerTest::::multipleFlexContainersWithPredefinedPointWidthsInsideFlexContainerTest()",
      "600": "FlexContainerTest::::multipleFlexContainersWithPredefinedPointWidthsInsideFlexContainerTest()",
      "601": "FlexContainerTest::::multipleFlexContainersWithPredefinedPointWidthsInsideFlexContainerTest()",
      "602": "FlexContainerTest::::multipleFlexContainersWithPredefinedPointWidthsInsideFlexContainerTest()",
      "603": "FlexContainerTest::::multipleFlexContainersWithPredefinedPointWidthsInsideFlexContainerTest()",
      "604": "FlexContainerTest::::multipleFlexContainersWithPredefinedPointWidthsInsideFlexContainerTest()",
      "605": "FlexContainerTest::::multipleFlexContainersWithPredefinedPointWidthsInsideFlexContainerTest()",
      "606": "FlexContainerTest::::multipleFlexContainersWithPredefinedPointWidthsInsideFlexContainerTest()",
      "607": "FlexContainerTest::::multipleFlexContainersWithPredefinedPointWidthsInsideFlexContainerTest()",
      "608": "FlexContainerTest::::multipleFlexContainersWithPredefinedPointWidthsInsideFlexContainerTest()",
      "609": "FlexContainerTest::::multipleFlexContainersWithPredefinedPointWidthsInsideFlexContainerTest()",
      "610": "FlexContainerTest::::multipleFlexContainersWithPredefinedPointWidthsInsideFlexContainerTest()",
      "611": "FlexContainerTest::::multipleFlexContainersWithPredefinedPointWidthsInsideFlexContainerTest()",
      "612": "FlexContainerTest::::multipleFlexContainersWithPredefinedPointWidthsInsideFlexContainerTest()",
      "613": "FlexContainerTest::::multipleFlexContainersWithPredefinedPointWidthsInsideFlexContainerTest()",
      "614": "FlexContainerTest::::multipleFlexContainersWithPredefinedPointWidthsInsideFlexContainerTest()",
      "615": "FlexContainerTest::::multipleFlexContainersWithPredefinedPointWidthsInsideFlexContainerTest()",
      "616": "FlexContainerTest::::multipleFlexContainersWithPredefinedPointWidthsInsideFlexContainerTest()",
      "617": "FlexContainerTest::::multipleFlexContainersWithPredefinedPointWidthsInsideFlexContainerTest()",
      "618": "FlexContainerTest::::multipleFlexContainersWithPredefinedPointWidthsInsideFlexContainerTest()",
      "619": "FlexContainerTest::::multipleFlexContainersWithPredefinedPointWidthsInsideFlexContainerTest()",
      "620": "FlexContainerTest::::multipleFlexContainersWithPredefinedPointWidthsInsideFlexContainerTest()",
      "621": "FlexContainerTest::::multipleFlexContainersWithPredefinedPointWidthsInsideFlexContainerTest()",
      "622": "FlexContainerTest::::multipleFlexContainersWithPredefinedPointWidthsInsideFlexContainerTest()",
      "624": "FlexContainerTest::::multipleFlexContainersWithPredefinedPercentWidthsInsideFlexContainerTest()",
      "625": "FlexContainerTest::::multipleFlexContainersWithPredefinedPercentWidthsInsideFlexContainerTest()",
      "626": "FlexContainerTest::::multipleFlexContainersWithPredefinedPercentWidthsInsideFlexContainerTest()",
      "627": "FlexContainerTest::::multipleFlexContainersWithPredefinedPercentWidthsInsideFlexContainerTest()",
      "628": "FlexContainerTest::::multipleFlexContainersWithPredefinedPercentWidthsInsideFlexContainerTest()",
      "629": "FlexContainerTest::::multipleFlexContainersWithPredefinedPercentWidthsInsideFlexContainerTest()",
      "630": "FlexContainerTest::::multipleFlexContainersWithPredefinedPercentWidthsInsideFlexContainerTest()",
      "631": "FlexContainerTest::::multipleFlexContainersWithPredefinedPercentWidthsInsideFlexContainerTest()",
      "632": "FlexContainerTest::::multipleFlexContainersWithPredefinedPercentWidthsInsideFlexContainerTest()",
      "633": "FlexContainerTest::::multipleFlexContainersWithPredefinedPercentWidthsInsideFlexContainerTest()",
      "634": "FlexContainerTest::::multipleFlexContainersWithPredefinedPercentWidthsInsideFlexContainerTest()",
      "635": "FlexContainerTest::::multipleFlexContainersWithPredefinedPercentWidthsInsideFlexContainerTest()",
      "636": "FlexContainerTest::::multipleFlexContainersWithPredefinedPercentWidthsInsideFlexContainerTest()",
      "637": "FlexContainerTest::::multipleFlexContainersWithPredefinedPercentWidthsInsideFlexContainerTest()",
      "638": "FlexContainerTest::::multipleFlexContainersWithPredefinedPercentWidthsInsideFlexContainerTest()",
      "639": "FlexContainerTest::::multipleFlexContainersWithPredefinedPercentWidthsInsideFlexContainerTest()",
      "640": "FlexContainerTest::::multipleFlexContainersWithPredefinedPercentWidthsInsideFlexContainerTest()",
      "641": "FlexContainerTest::::multipleFlexContainersWithPredefinedPercentWidthsInsideFlexContainerTest()",
      "642": "FlexContainerTest::::multipleFlexContainersWithPredefinedPercentWidthsInsideFlexContainerTest()",
      "643": "FlexContainerTest::::multipleFlexContainersWithPredefinedPercentWidthsInsideFlexContainerTest()",
      "644": "FlexContainerTest::::multipleFlexContainersWithPredefinedPercentWidthsInsideFlexContainerTest()",
      "645": "FlexContainerTest::::multipleFlexContainersWithPredefinedPercentWidthsInsideFlexContainerTest()",
      "646": "FlexContainerTest::::multipleFlexContainersWithPredefinedPercentWidthsInsideFlexContainerTest()",
      "647": "FlexContainerTest::::multipleFlexContainersWithPredefinedPercentWidthsInsideFlexContainerTest()",
      "648": "FlexContainerTest::::multipleFlexContainersWithPredefinedPercentWidthsInsideFlexContainerTest()",
      "649": "FlexContainerTest::::multipleFlexContainersWithPredefinedPercentWidthsInsideFlexContainerTest()",
      "650": "FlexContainerTest::::multipleFlexContainersWithPredefinedPercentWidthsInsideFlexContainerTest()",
      "651": "FlexContainerTest::::multipleFlexContainersWithPredefinedPercentWidthsInsideFlexContainerTest()",
      "652": "FlexContainerTest::::multipleFlexContainersWithPredefinedPercentWidthsInsideFlexContainerTest()",
      "653": "FlexContainerTest::::multipleFlexContainersWithPredefinedPercentWidthsInsideFlexContainerTest()",
      "654": "FlexContainerTest::::multipleFlexContainersWithPredefinedPercentWidthsInsideFlexContainerTest()",
      "655": "FlexContainerTest::::multipleFlexContainersWithPredefinedPercentWidthsInsideFlexContainerTest()",
      "656": "FlexContainerTest::::multipleFlexContainersWithPredefinedPercentWidthsInsideFlexContainerTest()",
      "657": "FlexContainerTest::::multipleFlexContainersWithPredefinedPercentWidthsInsideFlexContainerTest()",
      "658": "FlexContainerTest::::multipleFlexContainersWithPredefinedPercentWidthsInsideFlexContainerTest()",
      "659": "FlexContainerTest::::multipleFlexContainersWithPredefinedPercentWidthsInsideFlexContainerTest()",
      "660": "FlexContainerTest::::multipleFlexContainersWithPredefinedPercentWidthsInsideFlexContainerTest()",
      "662": "FlexContainerTest::::multipleFlexContainersWithPredefinedMinWidthsInsideFlexContainerTest()",
      "663": "FlexContainerTest::::multipleFlexContainersWithPredefinedMinWidthsInsideFlexContainerTest()",
      "664": "FlexContainerTest::::multipleFlexContainersWithPredefinedMinWidthsInsideFlexContainerTest()",
      "665": "FlexContainerTest::::multipleFlexContainersWithPredefinedMinWidthsInsideFlexContainerTest()",
      "666": "FlexContainerTest::::multipleFlexContainersWithPredefinedMinWidthsInsideFlexContainerTest()",
      "667": "FlexContainerTest::::multipleFlexContainersWithPredefinedMinWidthsInsideFlexContainerTest()",
      "668": "FlexContainerTest::::multipleFlexContainersWithPredefinedMinWidthsInsideFlexContainerTest()",
      "669": "FlexContainerTest::::multipleFlexContainersWithPredefinedMinWidthsInsideFlexContainerTest()",
      "670": "FlexContainerTest::::multipleFlexContainersWithPredefinedMinWidthsInsideFlexContainerTest()",
      "671": "FlexContainerTest::::multipleFlexContainersWithPredefinedMinWidthsInsideFlexContainerTest()",
      "672": "FlexContainerTest::::multipleFlexContainersWithPredefinedMinWidthsInsideFlexContainerTest()",
      "673": "FlexContainerTest::::multipleFlexContainersWithPredefinedMinWidthsInsideFlexContainerTest()",
      "674": "FlexContainerTest::::multipleFlexContainersWithPredefinedMinWidthsInsideFlexContainerTest()",
      "675": "FlexContainerTest::::multipleFlexContainersWithPredefinedMinWidthsInsideFlexContainerTest()",
      "676": "FlexContainerTest::::multipleFlexContainersWithPredefinedMinWidthsInsideFlexContainerTest()",
      "677": "FlexContainerTest::::multipleFlexContainersWithPredefinedMinWidthsInsideFlexContainerTest()",
      "678": "FlexContainerTest::::multipleFlexContainersWithPredefinedMinWidthsInsideFlexContainerTest()",
      "679": "FlexContainerTest::::multipleFlexContainersWithPredefinedMinWidthsInsideFlexContainerTest()",
      "680": "FlexContainerTest::::multipleFlexContainersWithPredefinedMinWidthsInsideFlexContainerTest()",
      "681": "FlexContainerTest::::multipleFlexContainersWithPredefinedMinWidthsInsideFlexContainerTest()",
      "682": "FlexContainerTest::::multipleFlexContainersWithPredefinedMinWidthsInsideFlexContainerTest()",
      "683": "FlexContainerTest::::multipleFlexContainersWithPredefinedMinWidthsInsideFlexContainerTest()",
      "684": "FlexContainerTest::::multipleFlexContainersWithPredefinedMinWidthsInsideFlexContainerTest()",
      "685": "FlexContainerTest::::multipleFlexContainersWithPredefinedMinWidthsInsideFlexContainerTest()",
      "686": "FlexContainerTest::::multipleFlexContainersWithPredefinedMinWidthsInsideFlexContainerTest()",
      "687": "FlexContainerTest::::multipleFlexContainersWithPredefinedMinWidthsInsideFlexContainerTest()",
      "688": "FlexContainerTest::::multipleFlexContainersWithPredefinedMinWidthsInsideFlexContainerTest()",
      "689": "FlexContainerTest::::multipleFlexContainersWithPredefinedMinWidthsInsideFlexContainerTest()",
      "690": "FlexContainerTest::::multipleFlexContainersWithPredefinedMinWidthsInsideFlexContainerTest()",
      "691": "FlexContainerTest::::multipleFlexContainersWithPredefinedMinWidthsInsideFlexContainerTest()",
      "692": "FlexContainerTest::::multipleFlexContainersWithPredefinedMinWidthsInsideFlexContainerTest()",
      "693": "FlexContainerTest::::multipleFlexContainersWithPredefinedMinWidthsInsideFlexContainerTest()",
      "694": "FlexContainerTest::::multipleFlexContainersWithPredefinedMinWidthsInsideFlexContainerTest()",
      "695": "FlexContainerTest::::multipleFlexContainersWithPredefinedMinWidthsInsideFlexContainerTest()",
      "696": "FlexContainerTest::::multipleFlexContainersWithPredefinedMinWidthsInsideFlexContainerTest()",
      "697": "FlexContainerTest::::multipleFlexContainersWithPredefinedMinWidthsInsideFlexContainerTest()",
      "698": "FlexContainerTest::::multipleFlexContainersWithPredefinedMinWidthsInsideFlexContainerTest()",
      "699": "FlexContainerTest::::multipleFlexContainersWithPredefinedMinWidthsInsideFlexContainerTest()",
      "701": "FlexContainerTest::::multipleFlexContainersWithPredefinedMaxWidthsInsideFlexContainerTest()",
      "702": "FlexContainerTest::::multipleFlexContainersWithPredefinedMaxWidthsInsideFlexContainerTest()",
      "703": "FlexContainerTest::::multipleFlexContainersWithPredefinedMaxWidthsInsideFlexContainerTest()",
      "704": "FlexContainerTest::::multipleFlexContainersWithPredefinedMaxWidthsInsideFlexContainerTest()",
      "705": "FlexContainerTest::::multipleFlexContainersWithPredefinedMaxWidthsInsideFlexContainerTest()",
      "706": "FlexContainerTest::::multipleFlexContainersWithPredefinedMaxWidthsInsideFlexContainerTest()",
      "707": "FlexContainerTest::::multipleFlexContainersWithPredefinedMaxWidthsInsideFlexContainerTest()",
      "708": "FlexContainerTest::::multipleFlexContainersWithPredefinedMaxWidthsInsideFlexContainerTest()",
      "709": "FlexContainerTest::::multipleFlexContainersWithPredefinedMaxWidthsInsideFlexContainerTest()",
      "710": "FlexContainerTest::::multipleFlexContainersWithPredefinedMaxWidthsInsideFlexContainerTest()",
      "711": "FlexContainerTest::::multipleFlexContainersWithPredefinedMaxWidthsInsideFlexContainerTest()",
      "712": "FlexContainerTest::::multipleFlexContainersWithPredefinedMaxWidthsInsideFlexContainerTest()",
      "713": "FlexContainerTest::::multipleFlexContainersWithPredefinedMaxWidthsInsideFlexContainerTest()",
      "714": "FlexContainerTest::::multipleFlexContainersWithPredefinedMaxWidthsInsideFlexContainerTest()",
      "715": "FlexContainerTest::::multipleFlexContainersWithPredefinedMaxWidthsInsideFlexContainerTest()",
      "716": "FlexContainerTest::::multipleFlexContainersWithPredefinedMaxWidthsInsideFlexContainerTest()",
      "717": "FlexContainerTest::::multipleFlexContainersWithPredefinedMaxWidthsInsideFlexContainerTest()",
      "718": "FlexContainerTest::::multipleFlexContainersWithPredefinedMaxWidthsInsideFlexContainerTest()",
      "719": "FlexContainerTest::::multipleFlexContainersWithPredefinedMaxWidthsInsideFlexContainerTest()",
      "720": "FlexContainerTest::::multipleFlexContainersWithPredefinedMaxWidthsInsideFlexContainerTest()",
      "721": "FlexContainerTest::::multipleFlexContainersWithPredefinedMaxWidthsInsideFlexContainerTest()",
      "722": "FlexContainerTest::::multipleFlexContainersWithPredefinedMaxWidthsInsideFlexContainerTest()",
      "723": "FlexContainerTest::::multipleFlexContainersWithPredefinedMaxWidthsInsideFlexContainerTest()",
      "724": "FlexContainerTest::::multipleFlexContainersWithPredefinedMaxWidthsInsideFlexContainerTest()",
      "725": "FlexContainerTest::::multipleFlexContainersWithPredefinedMaxWidthsInsideFlexContainerTest()",
      "726": "FlexContainerTest::::multipleFlexContainersWithPredefinedMaxWidthsInsideFlexContainerTest()",
      "727": "FlexContainerTest::::multipleFlexContainersWithPredefinedMaxWidthsInsideFlexContainerTest()",
      "728": "FlexContainerTest::::multipleFlexContainersWithPredefinedMaxWidthsInsideFlexContainerTest()",
      "729": "FlexContainerTest::::multipleFlexContainersWithPredefinedMaxWidthsInsideFlexContainerTest()",
      "730": "FlexContainerTest::::multipleFlexContainersWithPredefinedMaxWidthsInsideFlexContainerTest()",
      "731": "FlexContainerTest::::multipleFlexContainersWithPredefinedMaxWidthsInsideFlexContainerTest()",
      "732": "FlexContainerTest::::multipleFlexContainersWithPredefinedMaxWidthsInsideFlexContainerTest()",
      "733": "FlexContainerTest::::multipleFlexContainersWithPredefinedMaxWidthsInsideFlexContainerTest()",
      "734": "FlexContainerTest::::multipleFlexContainersWithPredefinedMaxWidthsInsideFlexContainerTest()",
      "735": "FlexContainerTest::::multipleFlexContainersWithPredefinedMaxWidthsInsideFlexContainerTest()",
      "736": "FlexContainerTest::::multipleFlexContainersWithPredefinedMaxWidthsInsideFlexContainerTest()",
      "737": "FlexContainerTest::::multipleFlexContainersWithPredefinedMaxWidthsInsideFlexContainerTest()",
      "739": "FlexContainerTest::::flexContainerFillAvailableAreaTest()",
      "740": "FlexContainerTest::::flexContainerFillAvailableAreaTest()",
      "741": "FlexContainerTest::::flexContainerFillAvailableAreaTest()",
      "742": "FlexContainerTest::::flexContainerFillAvailableAreaTest()",
      "743": "FlexContainerTest::::flexContainerFillAvailableAreaTest()",
      "744": "FlexContainerTest::::flexContainerFillAvailableAreaTest()",
      "745": "FlexContainerTest::::flexContainerFillAvailableAreaTest()",
      "746": "FlexContainerTest::::flexContainerFillAvailableAreaTest()",
      "747": "FlexContainerTest::::flexContainerFillAvailableAreaTest()",
      "748": "FlexContainerTest::::flexContainerFillAvailableAreaTest()",
      "749": "FlexContainerTest::::flexContainerFillAvailableAreaTest()",
      "750": "FlexContainerTest::::flexContainerFillAvailableAreaTest()",
      "751": "FlexContainerTest::::flexContainerFillAvailableAreaTest()",
      "752": "FlexContainerTest::::flexContainerFillAvailableAreaTest()",
      "753": "FlexContainerTest::::flexContainerFillAvailableAreaTest()",
      "754": "FlexContainerTest::::flexContainerFillAvailableAreaTest()",
      "755": "FlexContainerTest::::flexContainerFillAvailableAreaTest()",
      "756": "FlexContainerTest::::flexContainerFillAvailableAreaTest()",
      "757": "FlexContainerTest::::flexContainerFillAvailableAreaTest()",
      "758": "FlexContainerTest::::flexContainerFillAvailableAreaTest()",
      "759": "FlexContainerTest::::flexContainerFillAvailableAreaTest()",
      "760": "FlexContainerTest::::flexContainerFillAvailableAreaTest()",
      "761": "FlexContainerTest::::flexContainerFillAvailableAreaTest()",
      "762": "FlexContainerTest::::flexContainerFillAvailableAreaTest()",
      "763": "FlexContainerTest::::flexContainerFillAvailableAreaTest()",
      "764": "FlexContainerTest::::flexContainerFillAvailableAreaTest()",
      "765": "FlexContainerTest::::flexContainerFillAvailableAreaTest()",
      "766": "FlexContainerTest::::flexContainerFillAvailableAreaTest()",
      "767": "FlexContainerTest::::flexContainerFillAvailableAreaTest()",
      "768": "FlexContainerTest::::flexContainerFillAvailableAreaTest()",
      "769": "FlexContainerTest::::flexContainerFillAvailableAreaTest()",
      "770": "FlexContainerTest::::flexContainerFillAvailableAreaTest()",
      "771": "FlexContainerTest::::flexContainerFillAvailableAreaTest()",
      "772": "FlexContainerTest::::flexContainerFillAvailableAreaTest()",
      "774": "FlexContainerTest::::flexContainerRotationAngleTest()",
      "775": "FlexContainerTest::::flexContainerRotationAngleTest()",
      "776": "FlexContainerTest::::flexContainerRotationAngleTest()",
      "777": "FlexContainerTest::::flexContainerRotationAngleTest()",
      "778": "FlexContainerTest::::flexContainerRotationAngleTest()",
      "779": "FlexContainerTest::::flexContainerRotationAngleTest()",
      "780": "FlexContainerTest::::flexContainerRotationAngleTest()",
      "781": "FlexContainerTest::::flexContainerRotationAngleTest()",
      "782": "FlexContainerTest::::flexContainerRotationAngleTest()",
      "783": "FlexContainerTest::::flexContainerRotationAngleTest()",
      "784": "FlexContainerTest::::flexContainerRotationAngleTest()",
      "785": "FlexContainerTest::::flexContainerRotationAngleTest()",
      "786": "FlexContainerTest::::flexContainerRotationAngleTest()",
      "787": "FlexContainerTest::::flexContainerRotationAngleTest()",
      "788": "FlexContainerTest::::flexContainerRotationAngleTest()",
      "789": "FlexContainerTest::::flexContainerRotationAngleTest()",
      "790": "FlexContainerTest::::flexContainerRotationAngleTest()",
      "791": "FlexContainerTest::::flexContainerRotationAngleTest()",
      "792": "FlexContainerTest::::flexContainerRotationAngleTest()",
      "793": "FlexContainerTest::::flexContainerRotationAngleTest()",
      "794": "FlexContainerTest::::flexContainerRotationAngleTest()",
      "795": "FlexContainerTest::::flexContainerRotationAngleTest()",
      "796": "FlexContainerTest::::flexContainerRotationAngleTest()",
      "797": "FlexContainerTest::::flexContainerRotationAngleTest()",
      "798": "FlexContainerTest::::flexContainerRotationAngleTest()",
      "799": "FlexContainerTest::::flexContainerRotationAngleTest()",
      "800": "FlexContainerTest::::flexContainerRotationAngleTest()",
      "801": "FlexContainerTest::::flexContainerRotationAngleTest()",
      "802": "FlexContainerTest::::flexContainerRotationAngleTest()",
      "803": "FlexContainerTest::::flexContainerRotationAngleTest()",
      "805": "FlexContainerTest::::respectFlexContainersHeightTest()",
      "806": "FlexContainerTest::::respectFlexContainersHeightTest()",
      "807": "FlexContainerTest::::respectFlexContainersHeightTest()",
      "808": "FlexContainerTest::::respectFlexContainersHeightTest()",
      "809": "FlexContainerTest::::respectFlexContainersHeightTest()",
      "810": "FlexContainerTest::::respectFlexContainersHeightTest()",
      "811": "FlexContainerTest::::respectFlexContainersHeightTest()",
      "812": "FlexContainerTest::::respectFlexContainersHeightTest()",
      "813": "FlexContainerTest::::respectFlexContainersHeightTest()",
      "814": "FlexContainerTest::::respectFlexContainersHeightTest()",
      "815": "FlexContainerTest::::respectFlexContainersHeightTest()",
      "816": "FlexContainerTest::::respectFlexContainersHeightTest()",
      "817": "FlexContainerTest::::respectFlexContainersHeightTest()",
      "818": "FlexContainerTest::::respectFlexContainersHeightTest()",
      "819": "FlexContainerTest::::respectFlexContainersHeightTest()",
      "820": "FlexContainerTest::::respectFlexContainersHeightTest()",
      "821": "FlexContainerTest::::respectFlexContainersHeightTest()",
      "822": "FlexContainerTest::::respectFlexContainersHeightTest()",
      "823": "FlexContainerTest::::respectFlexContainersHeightTest()",
      "824": "FlexContainerTest::::respectFlexContainersHeightTest()",
      "825": "FlexContainerTest::::respectFlexContainersHeightTest()",
      "826": "FlexContainerTest::::respectFlexContainersHeightTest()",
      "827": "FlexContainerTest::::respectFlexContainersHeightTest()",
      "828": "FlexContainerTest::::respectFlexContainersHeightTest()",
      "829": "FlexContainerTest::::respectFlexContainersHeightTest()",
      "830": "FlexContainerTest::::respectFlexContainersHeightTest()",
      "831": "FlexContainerTest::::respectFlexContainersHeightTest()",
      "832": "FlexContainerTest::::respectFlexContainersHeightTest()",
      "833": "FlexContainerTest::::respectFlexContainersHeightTest()",
      "834": "FlexContainerTest::::respectFlexContainersHeightTest()",
      "835": "FlexContainerTest::::respectFlexContainersHeightTest()",
      "836": "FlexContainerTest::::respectFlexContainersHeightTest()",
      "837": "FlexContainerTest::::respectFlexContainersHeightTest()",
      "838": "FlexContainerTest::::respectFlexContainersHeightTest()",
      "840": "FlexContainerTest::::respectFlexContainersWidthTest()",
      "841": "FlexContainerTest::::respectFlexContainersWidthTest()",
      "842": "FlexContainerTest::::respectFlexContainersWidthTest()",
      "843": "FlexContainerTest::::respectFlexContainersWidthTest()",
      "844": "FlexContainerTest::::respectFlexContainersWidthTest()",
      "845": "FlexContainerTest::::respectFlexContainersWidthTest()",
      "846": "FlexContainerTest::::respectFlexContainersWidthTest()",
      "847": "FlexContainerTest::::respectFlexContainersWidthTest()",
      "848": "FlexContainerTest::::respectFlexContainersWidthTest()",
      "849": "FlexContainerTest::::respectFlexContainersWidthTest()",
      "850": "FlexContainerTest::::respectFlexContainersWidthTest()",
      "851": "FlexContainerTest::::respectFlexContainersWidthTest()",
      "852": "FlexContainerTest::::respectFlexContainersWidthTest()",
      "853": "FlexContainerTest::::respectFlexContainersWidthTest()",
      "854": "FlexContainerTest::::respectFlexContainersWidthTest()",
      "855": "FlexContainerTest::::respectFlexContainersWidthTest()",
      "856": "FlexContainerTest::::respectFlexContainersWidthTest()",
      "857": "FlexContainerTest::::respectFlexContainersWidthTest()",
      "858": "FlexContainerTest::::respectFlexContainersWidthTest()",
      "859": "FlexContainerTest::::respectFlexContainersWidthTest()",
      "860": "FlexContainerTest::::respectFlexContainersWidthTest()",
      "861": "FlexContainerTest::::respectFlexContainersWidthTest()",
      "862": "FlexContainerTest::::respectFlexContainersWidthTest()",
      "863": "FlexContainerTest::::respectFlexContainersWidthTest()",
      "864": "FlexContainerTest::::respectFlexContainersWidthTest()",
      "865": "FlexContainerTest::::respectFlexContainersWidthTest()",
      "866": "FlexContainerTest::::respectFlexContainersWidthTest()",
      "867": "FlexContainerTest::::respectFlexContainersWidthTest()",
      "868": "FlexContainerTest::::respectFlexContainersWidthTest()",
      "869": "FlexContainerTest::::respectFlexContainersWidthTest()",
      "870": "FlexContainerTest::::respectFlexContainersWidthTest()",
      "871": "FlexContainerTest::::respectFlexContainersWidthTest()",
      "872": "FlexContainerTest::::respectFlexContainersWidthTest()",
      "873": "FlexContainerTest::::respectFlexContainersWidthTest()",
      "874": "FlexContainerTest::::respectFlexContainersWidthTest()",
      "875": "FlexContainerTest::::respectFlexContainersWidthTest()",
      "876": "FlexContainerTest::::respectFlexContainersWidthTest()",
      "877": "FlexContainerTest::::respectFlexContainersWidthTest()",
      "879": "FlexContainerTest::::flexItemsMinHeightShouldBeOverriddenTest()",
      "880": "FlexContainerTest::::flexItemsMinHeightShouldBeOverriddenTest()",
      "881": "FlexContainerTest::::flexItemsMinHeightShouldBeOverriddenTest()",
      "882": "FlexContainerTest::::flexItemsMinHeightShouldBeOverriddenTest()",
      "883": "FlexContainerTest::::flexItemsMinHeightShouldBeOverriddenTest()",
      "884": "FlexContainerTest::::flexItemsMinHeightShouldBeOverriddenTest()",
      "885": "FlexContainerTest::::flexItemsMinHeightShouldBeOverriddenTest()",
      "886": "FlexContainerTest::::flexItemsMinHeightShouldBeOverriddenTest()",
      "887": "FlexContainerTest::::flexItemsMinHeightShouldBeOverriddenTest()",
      "888": "FlexContainerTest::::flexItemsMinHeightShouldBeOverriddenTest()",
      "889": "FlexContainerTest::::flexItemsMinHeightShouldBeOverriddenTest()",
      "890": "FlexContainerTest::::flexItemsMinHeightShouldBeOverriddenTest()",
      "891": "FlexContainerTest::::flexItemsMinHeightShouldBeOverriddenTest()",
      "892": "FlexContainerTest::::flexItemsMinHeightShouldBeOverriddenTest()",
      "893": "FlexContainerTest::::flexItemsMinHeightShouldBeOverriddenTest()",
      "894": "FlexContainerTest::::flexItemsMinHeightShouldBeOverriddenTest()",
      "895": "FlexContainerTest::::flexItemsMinHeightShouldBeOverriddenTest()",
      "896": "FlexContainerTest::::flexItemsMinHeightShouldBeOverriddenTest()",
      "898": "FlexContainerTest::::linesMinHeightShouldBeRespectedTest()",
      "899": "FlexContainerTest::::linesMinHeightShouldBeRespectedTest()",
      "900": "FlexContainerTest::::linesMinHeightShouldBeRespectedTest()",
      "901": "FlexContainerTest::::linesMinHeightShouldBeRespectedTest()",
      "902": "FlexContainerTest::::linesMinHeightShouldBeRespectedTest()",
      "903": "FlexContainerTest::::linesMinHeightShouldBeRespectedTest()",
      "904": "FlexContainerTest::::linesMinHeightShouldBeRespectedTest()",
      "905": "FlexContainerTest::::linesMinHeightShouldBeRespectedTest()",
      "906": "FlexContainerTest::::linesMinHeightShouldBeRespectedTest()",
      "907": "FlexContainerTest::::linesMinHeightShouldBeRespectedTest()",
      "908": "FlexContainerTest::::linesMinHeightShouldBeRespectedTest()",
      "909": "FlexContainerTest::::linesMinHeightShouldBeRespectedTest()",
      "910": "FlexContainerTest::::linesMinHeightShouldBeRespectedTest()",
      "911": "FlexContainerTest::::linesMinHeightShouldBeRespectedTest()",
      "912": "FlexContainerTest::::linesMinHeightShouldBeRespectedTest()",
      "913": "FlexContainerTest::::linesMinHeightShouldBeRespectedTest()",
      "914": "FlexContainerTest::::linesMinHeightShouldBeRespectedTest()",
      "915": "FlexContainerTest::::linesMinHeightShouldBeRespectedTest()",
      "916": "FlexContainerTest::::linesMinHeightShouldBeRespectedTest()",
      "917": "FlexContainerTest::::linesMinHeightShouldBeRespectedTest()",
      "918": "FlexContainerTest::::linesMinHeightShouldBeRespectedTest()",
      "920": "FlexContainerTest::::linesMaxHeightShouldBeRespectedTest()",
      "921": "FlexContainerTest::::linesMaxHeightShouldBeRespectedTest()",
      "922": "FlexContainerTest::::linesMaxHeightShouldBeRespectedTest()",
      "923": "FlexContainerTest::::linesMaxHeightShouldBeRespectedTest()",
      "924": "FlexContainerTest::::linesMaxHeightShouldBeRespectedTest()",
      "925": "FlexContainerTest::::linesMaxHeightShouldBeRespectedTest()",
      "926": "FlexContainerTest::::linesMaxHeightShouldBeRespectedTest()",
      "927": "FlexContainerTest::::linesMaxHeightShouldBeRespectedTest()",
      "928": "FlexContainerTest::::linesMaxHeightShouldBeRespectedTest()",
      "929": "FlexContainerTest::::linesMaxHeightShouldBeRespectedTest()",
      "930": "FlexContainerTest::::linesMaxHeightShouldBeRespectedTest()",
      "931": "FlexContainerTest::::linesMaxHeightShouldBeRespectedTest()",
      "932": "FlexContainerTest::::linesMaxHeightShouldBeRespectedTest()",
      "933": "FlexContainerTest::::linesMaxHeightShouldBeRespectedTest()",
      "934": "FlexContainerTest::::linesMaxHeightShouldBeRespectedTest()",
      "935": "FlexContainerTest::::linesMaxHeightShouldBeRespectedTest()",
      "936": "FlexContainerTest::::linesMaxHeightShouldBeRespectedTest()",
      "937": "FlexContainerTest::::linesMaxHeightShouldBeRespectedTest()",
      "938": "FlexContainerTest::::linesMaxHeightShouldBeRespectedTest()",
      "939": "FlexContainerTest::::linesMaxHeightShouldBeRespectedTest()",
      "940": "FlexContainerTest::::linesMaxHeightShouldBeRespectedTest()",
      "942": "FlexContainerTest::::collapsingMarginsFlexContainerTest()",
      "943": "FlexContainerTest::::collapsingMarginsFlexContainerTest()",
      "944": "FlexContainerTest::::collapsingMarginsFlexContainerTest()",
      "945": "FlexContainerTest::::collapsingMarginsFlexContainerTest()",
      "946": "FlexContainerTest::::collapsingMarginsFlexContainerTest()",
      "947": "FlexContainerTest::::collapsingMarginsFlexContainerTest()",
      "948": "FlexContainerTest::::collapsingMarginsFlexContainerTest()",
      "949": "FlexContainerTest::::collapsingMarginsFlexContainerTest()",
      "950": "FlexContainerTest::::collapsingMarginsFlexContainerTest()",
      "951": "FlexContainerTest::::collapsingMarginsFlexContainerTest()",
      "952": "FlexContainerTest::::collapsingMarginsFlexContainerTest()",
      "953": "FlexContainerTest::::collapsingMarginsFlexContainerTest()",
      "954": "FlexContainerTest::::collapsingMarginsFlexContainerTest()",
      "955": "FlexContainerTest::::collapsingMarginsFlexContainerTest()",
      "956": "FlexContainerTest::::collapsingMarginsFlexContainerTest()",
      "957": "FlexContainerTest::::collapsingMarginsFlexContainerTest()",
      "958": "FlexContainerTest::::collapsingMarginsFlexContainerTest()",
      "959": "FlexContainerTest::::collapsingMarginsFlexContainerTest()",
      "960": "FlexContainerTest::::collapsingMarginsFlexContainerTest()",
      "961": "FlexContainerTest::::collapsingMarginsFlexContainerTest()",
      "962": "FlexContainerTest::::collapsingMarginsFlexContainerTest()",
      "963": "FlexContainerTest::::collapsingMarginsFlexContainerTest()",
      "964": "FlexContainerTest::::collapsingMarginsFlexContainerTest()",
      "965": "FlexContainerTest::::collapsingMarginsFlexContainerTest()",
      "966": "FlexContainerTest::::collapsingMarginsFlexContainerTest()",
      "967": "FlexContainerTest::::collapsingMarginsFlexContainerTest()",
      "968": "FlexContainerTest::::collapsingMarginsFlexContainerTest()",
      "969": "FlexContainerTest::::collapsingMarginsFlexContainerTest()",
      "970": "FlexContainerTest::::collapsingMarginsFlexContainerTest()",
      "971": "FlexContainerTest::::collapsingMarginsFlexContainerTest()",
      "972": "FlexContainerTest::::collapsingMarginsFlexContainerTest()",
      "973": "FlexContainerTest::::collapsingMarginsFlexContainerTest()",
      "974": "FlexContainerTest::::collapsingMarginsFlexContainerTest()",
      "976": "FlexContainerTest::::flexItemBoxSizingTest()",
      "977": "FlexContainerTest::::flexItemBoxSizingTest()",
      "978": "FlexContainerTest::::flexItemBoxSizingTest()",
      "979": "FlexContainerTest::::flexItemBoxSizingTest()",
      "980": "FlexContainerTest::::flexItemBoxSizingTest()",
      "981": "FlexContainerTest::::flexItemBoxSizingTest()",
      "982": "FlexContainerTest::::flexItemBoxSizingTest()",
      "983": "FlexContainerTest::::flexItemBoxSizingTest()",
      "984": "FlexContainerTest::::flexItemBoxSizingTest()",
      "985": "FlexContainerTest::::flexItemBoxSizingTest()",
      "986": "FlexContainerTest::::flexItemBoxSizingTest()",
      "987": "FlexContainerTest::::flexItemBoxSizingTest()",
      "988": "FlexContainerTest::::flexItemBoxSizingTest()",
      "989": "FlexContainerTest::::flexItemBoxSizingTest()",
      "990": "FlexContainerTest::::flexItemBoxSizingTest()",
      "991": "FlexContainerTest::::flexItemBoxSizingTest()",
      "992": "FlexContainerTest::::flexItemBoxSizingTest()",
      "993": "FlexContainerTest::::flexItemBoxSizingTest()",
      "994": "FlexContainerTest::::flexItemBoxSizingTest()",
      "995": "FlexContainerTest::::flexItemBoxSizingTest()",
      "996": "FlexContainerTest::::flexItemBoxSizingTest()",
      "997": "FlexContainerTest::::flexItemBoxSizingTest()",
      "998": "FlexContainerTest::::flexItemBoxSizingTest()",
      "999": "FlexContainerTest::::flexItemBoxSizingTest()",
      "1000": "FlexContainerTest::::flexItemBoxSizingTest()",
      "1001": "FlexContainerTest::::flexItemBoxSizingTest()",
      "1002": "FlexContainerTest::::flexItemBoxSizingTest()",
      "1003": "FlexContainerTest::::flexItemBoxSizingTest()",
      "1004": "FlexContainerTest::::flexItemBoxSizingTest()",
      "1005": "FlexContainerTest::::flexItemBoxSizingTest()",
      "1006": "FlexContainerTest::::flexItemBoxSizingTest()",
      "1007": "FlexContainerTest::::flexItemBoxSizingTest()",
      "1008": "FlexContainerTest::::flexItemBoxSizingTest()",
      "1009": "FlexContainerTest::::flexItemBoxSizingTest()",
      "1010": "FlexContainerTest::::flexItemBoxSizingTest()",
      "1011": "FlexContainerTest::::flexItemBoxSizingTest()",
      "1012": "FlexContainerTest::::flexItemBoxSizingTest()",
      "1013": "FlexContainerTest::::flexItemBoxSizingTest()",
      "1014": "FlexContainerTest::::flexItemBoxSizingTest()",
      "1015": "FlexContainerTest::::flexItemBoxSizingTest()",
      "1016": "FlexContainerTest::::flexItemBoxSizingTest()",
      "1017": "FlexContainerTest::::flexItemBoxSizingTest()",
      "1018": "FlexContainerTest::::flexItemBoxSizingTest()",
      "1019": "FlexContainerTest::::flexItemBoxSizingTest()",
      "1020": "FlexContainerTest::::flexItemBoxSizingTest()",
      "1021": "FlexContainerTest::::flexItemBoxSizingTest()",
      "1022": "FlexContainerTest::::flexItemBoxSizingTest()",
      "1023": "FlexContainerTest::::flexItemBoxSizingTest()",
      "1024": "FlexContainerTest::::flexItemBoxSizingTest()",
      "1026": "FlexContainerTest::::flexContainerBoxSizingTest()",
      "1027": "FlexContainerTest::::flexContainerBoxSizingTest()",
      "1028": "FlexContainerTest::::flexContainerBoxSizingTest()",
      "1029": "FlexContainerTest::::flexContainerBoxSizingTest()",
      "1030": "FlexContainerTest::::flexContainerBoxSizingTest()",
      "1031": "FlexContainerTest::::flexContainerBoxSizingTest()",
      "1032": "FlexContainerTest::::flexContainerBoxSizingTest()",
      "1033": "FlexContainerTest::::flexContainerBoxSizingTest()",
      "1034": "FlexContainerTest::::flexContainerBoxSizingTest()",
      "1035": "FlexContainerTest::::flexContainerBoxSizingTest()",
      "1036": "FlexContainerTest::::flexContainerBoxSizingTest()",
      "1037": "FlexContainerTest::::flexContainerBoxSizingTest()",
      "1038": "FlexContainerTest::::flexContainerBoxSizingTest()",
      "1039": "FlexContainerTest::::flexContainerBoxSizingTest()",
      "1040": "FlexContainerTest::::flexContainerBoxSizingTest()",
      "1041": "FlexContainerTest::::flexContainerBoxSizingTest()",
      "1042": "FlexContainerTest::::flexContainerBoxSizingTest()",
      "1043": "FlexContainerTest::::flexContainerBoxSizingTest()",
      "1044": "FlexContainerTest::::flexContainerBoxSizingTest()",
      "1045": "FlexContainerTest::::flexContainerBoxSizingTest()",
      "1046": "FlexContainerTest::::flexContainerBoxSizingTest()",
      "1047": "FlexContainerTest::::flexContainerBoxSizingTest()",
      "1048": "FlexContainerTest::::flexContainerBoxSizingTest()",
      "1049": "FlexContainerTest::::flexContainerBoxSizingTest()",
      "1050": "FlexContainerTest::::flexContainerBoxSizingTest()",
      "1051": "FlexContainerTest::::flexContainerBoxSizingTest()",
      "1052": "FlexContainerTest::::flexContainerBoxSizingTest()",
      "1053": "FlexContainerTest::::flexContainerBoxSizingTest()",
      "1054": "FlexContainerTest::::flexContainerBoxSizingTest()",
      "1055": "FlexContainerTest::::flexContainerBoxSizingTest()",
      "1085": "FlexContainerTest::::createFlexContainer()",
      "1086": "FlexContainerTest::::createFlexContainer()",
      "1087": "FlexContainerTest::::createFlexContainer()",
      "1088": "FlexContainerTest::::createFlexContainer()",
      "1089": "FlexContainerTest::::createFlexContainer()",
      "1090": "FlexContainerTest::::createFlexContainer()",
      "1091": "FlexContainerTest::::createFlexContainer()",
      "1092": "FlexContainerTest::::createFlexContainer()",
      "1093": "FlexContainerTest::::createFlexContainer()",
      "1094": "FlexContainerTest::::createFlexContainer()",
      "1095": "FlexContainerTest::::createFlexContainer()",
      "1097": "FlexContainerTest::::createNewDiv()",
      "1098": "FlexContainerTest::::createNewDiv()",
      "1099": "FlexContainerTest::::createNewDiv()",
      "1100": "FlexContainerTest::::createNewDiv()",
      "1101": "FlexContainerTest::::createNewDiv()",
      "1102": "FlexContainerTest::::createNewDiv()",
      "1103": "FlexContainerTest::::createNewDiv()"
    },
    "tests": [
      {
        "test_lines": [
          106,
          130
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          132,
          158
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          160,
          192
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          194,
          229
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          231,
          265
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          267,
          300
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          302,
          338
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          340,
          377
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          379,
          417
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          419,
          452
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          454,
          490
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          492,
          518
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          520,
          548
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          550,
          584
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          586,
          622
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          624,
          660
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          662,
          699
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          701,
          737
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          739,
          772
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          774,
          803
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          805,
          838
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          840,
          877
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          879,
          896
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          898,
          918
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          920,
          940
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          942,
          974
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          976,
          1024
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          1026,
          1055
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/itext-java/layout/src/main/java/com/itextpdf/layout/element/GridContainer.java": {
    "class_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.layout.element;\n",
      "\n",
      "import com.itextpdf.layout.renderer.GridContainerRenderer;\n",
      "import com.itextpdf.layout.renderer.IRenderer;\n",
      "\n",
      "/**\n",
      " * A {@link GridContainer} represents a container of the css grid object.\n",
      " */\n",
      "public class GridContainer extends Div {\n",
      "\n",
      "    /**\n",
      "     * Creates a new {@link GridContainer} instance.\n",
      "     */\n",
      "    public GridContainer() {\n",
      "        super();\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    protected IRenderer makeNewRenderer() {\n",
      "        return new GridContainerRenderer(this);\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.layout.element;\n",
      "\n",
      "import com.itextpdf.kernel.colors.ColorConstants;\n",
      "import com.itextpdf.kernel.pdf.PdfDocument;\n",
      "import com.itextpdf.kernel.pdf.PdfWriter;\n",
      "import com.itextpdf.kernel.utils.CompareTool;\n",
      "import com.itextpdf.layout.Document;\n",
      "import com.itextpdf.layout.borders.SolidBorder;\n",
      "import com.itextpdf.layout.exceptions.LayoutExceptionMessageConstant;\n",
      "import com.itextpdf.layout.properties.GridFlow;\n",
      "import com.itextpdf.layout.properties.GridValue;\n",
      "import com.itextpdf.layout.properties.Property;\n",
      "import com.itextpdf.test.ExtendedITextTest;\n",
      "import com.itextpdf.test.annotations.type.IntegrationTest;\n",
      "\n",
      "import java.io.IOException;\n",
      "import java.util.ArrayList;\n",
      "import org.junit.Assert;\n",
      "import org.junit.BeforeClass;\n",
      "import org.junit.Test;\n",
      "import org.junit.experimental.categories.Category;\n",
      "\n",
      "@Category(IntegrationTest.class)\n",
      "public class GridContainerTest extends ExtendedITextTest {\n",
      "    public static final String SOURCE_FOLDER = \"./src/test/resources/com/itextpdf/layout/GridContainerTest/\";\n",
      "    public static final String DESTINATION_FOLDER = \"./target/test/com/itextpdf/layout/GridContainerTest/\";\n",
      "\n",
      "    @BeforeClass\n",
      "    public static void beforeClass() {\n",
      "        createDestinationFolder(DESTINATION_FOLDER);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void basicThreeColumnsTest() throws IOException, InterruptedException {\n",
      "        String filename = DESTINATION_FOLDER + \"basicThreeColumnsTest.pdf\";\n",
      "        String cmpName = SOURCE_FOLDER + \"cmp_basicThreeColumnsTest.pdf\";\n",
      "\n",
      "        java.util.List<GridValue> templateColumns = new ArrayList<>();\n",
      "        templateColumns.add(GridValue.createPointValue(150.0f));\n",
      "        templateColumns.add(GridValue.createPointValue(150.0f));\n",
      "        templateColumns.add(GridValue.createPointValue(150.0f));\n",
      "        SolidBorder border = new SolidBorder(ColorConstants.BLUE, 1);\n",
      "\n",
      "        try (Document document = new Document(new PdfDocument(new PdfWriter(filename)))) {\n",
      "            GridContainer grid = new GridContainer();\n",
      "            grid.setProperty(Property.GRID_TEMPLATE_COLUMNS, templateColumns);\n",
      "            for (int i = 0; i < 5; ++i) {\n",
      "                grid.add(new Paragraph(\"Test\" + i).setBorder(border));\n",
      "            }\n",
      "            document.add(grid);\n",
      "        }\n",
      "        Assert.assertNull(new CompareTool().compareByContent(filename, cmpName, DESTINATION_FOLDER, \"diff_\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void basicAutoColumnsTest() throws IOException, InterruptedException {\n",
      "        String filename = DESTINATION_FOLDER + \"basicAutoColumnsTest.pdf\";\n",
      "        String cmpName = SOURCE_FOLDER + \"cmp_basicAutoColumnsTest.pdf\";\n",
      "        SolidBorder border = new SolidBorder(ColorConstants.BLUE, 1);\n",
      "\n",
      "        try (Document document = new Document(new PdfDocument(new PdfWriter(filename)))) {\n",
      "            GridContainer grid = new GridContainer();\n",
      "            grid.setProperty(Property.GRID_AUTO_COLUMNS, GridValue.createPointValue(150.0f));\n",
      "            for (int i = 0; i < 5; ++i) {\n",
      "                grid.add(new Paragraph(\"Test\" + i).setBorder(border));\n",
      "            }\n",
      "            document.add(grid);\n",
      "        }\n",
      "        Assert.assertNull(new CompareTool().compareByContent(filename, cmpName, DESTINATION_FOLDER, \"diff_\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void basicAutoRowsTest() throws IOException, InterruptedException {\n",
      "        String filename = DESTINATION_FOLDER + \"basicAutoRowsTest.pdf\";\n",
      "        String cmpName = SOURCE_FOLDER + \"cmp_basicAutoRowsTest.pdf\";\n",
      "        SolidBorder border = new SolidBorder(ColorConstants.BLUE, 1);\n",
      "\n",
      "        try (Document document = new Document(new PdfDocument(new PdfWriter(filename)))) {\n",
      "            GridContainer grid = new GridContainer();\n",
      "            grid.setProperty(Property.GRID_AUTO_ROWS, GridValue.createPointValue(70.0f));\n",
      "            grid.add(new Paragraph(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, \" +\n",
      "                    \"sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, \" +\n",
      "                    \"quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute \" +\n",
      "                    \"irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. \" +\n",
      "                    \"Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim \" +\n",
      "                    \"id est laborum.\").setBorder(border));\n",
      "            grid.add(new Paragraph(\"test\").setBorder(border));\n",
      "            document.add(grid);\n",
      "        }\n",
      "        Assert.assertNull(new CompareTool().compareByContent(filename, cmpName, DESTINATION_FOLDER, \"diff_\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void basicThreeColumnsWithCustomColumnIndexesTest() throws IOException, InterruptedException {\n",
      "        String filename = DESTINATION_FOLDER + \"basicThreeColumnsWithCustomColumnIndexesTest.pdf\";\n",
      "        String cmpName = SOURCE_FOLDER + \"cmp_basicThreeColumnsWithCustomColumnIndexesTest.pdf\";\n",
      "\n",
      "        java.util.List<GridValue> templateColumns = new ArrayList<>();\n",
      "        templateColumns.add(GridValue.createPointValue(100.0f));\n",
      "        templateColumns.add(GridValue.createPointValue(100.0f));\n",
      "        templateColumns.add(GridValue.createPointValue(100.0f));\n",
      "        SolidBorder border = new SolidBorder(ColorConstants.BLUE, 1);\n",
      "\n",
      "        try (Document document = new Document(new PdfDocument(new PdfWriter(filename)))) {\n",
      "            GridContainer grid = new GridContainer();\n",
      "            grid.setProperty(Property.GRID_TEMPLATE_COLUMNS, templateColumns);\n",
      "            Paragraph paragraph1 = new Paragraph(\"One\").setBorder(border);\n",
      "            paragraph1.setProperty(Property.GRID_COLUMN_START, 1);\n",
      "            paragraph1.setProperty(Property.GRID_COLUMN_END, 3);\n",
      "            grid.add(paragraph1);\n",
      "            grid.add(new Paragraph(\"Two\").setBorder(border));\n",
      "            Paragraph paragraph3 = new Paragraph(\"Three\").setBorder(border);\n",
      "            paragraph3.setProperty(Property.GRID_COLUMN_START, 2);\n",
      "            paragraph3.setProperty(Property.GRID_COLUMN_END, 4);\n",
      "            grid.add(paragraph3);\n",
      "            grid.add(new Paragraph(\"Four\").setBorder(border));\n",
      "            document.add(grid);\n",
      "        }\n",
      "        Assert.assertNull(new CompareTool().compareByContent(filename, cmpName, DESTINATION_FOLDER, \"diff_\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void threeColumnsWithAdjacentWideCellsTest() throws IOException, InterruptedException {\n",
      "        String filename = DESTINATION_FOLDER + \"threeColumnsWithAdjacentWideCellsTest.pdf\";\n",
      "        String cmpName = SOURCE_FOLDER + \"cmp_threeColumnsWithAdjacentWideCellsTest.pdf\";\n",
      "\n",
      "        java.util.List<GridValue> templateColumns = new ArrayList<>();\n",
      "        templateColumns.add(GridValue.createPointValue(100.0f));\n",
      "        templateColumns.add(GridValue.createPointValue(100.0f));\n",
      "        templateColumns.add(GridValue.createPointValue(100.0f));\n",
      "        templateColumns.add(GridValue.createPointValue(100.0f));\n",
      "\n",
      "        try (Document document = new Document(new PdfDocument(new PdfWriter(filename)))) {\n",
      "            SolidBorder border = new SolidBorder(ColorConstants.BLUE, 1);\n",
      "            GridContainer grid = new GridContainer();\n",
      "            grid.setProperty(Property.GRID_TEMPLATE_COLUMNS, templateColumns);\n",
      "            Paragraph paragraph1 = new Paragraph(\"One\");\n",
      "            paragraph1.setProperty(Property.GRID_COLUMN_START, 1);\n",
      "            paragraph1.setProperty(Property.GRID_COLUMN_END, 3);\n",
      "            paragraph1.setBorder(border);\n",
      "            grid.add(paragraph1);\n",
      "            Paragraph paragraph2 = new Paragraph(\"Two\");\n",
      "            paragraph2.setProperty(Property.GRID_COLUMN_START, 3);\n",
      "            paragraph2.setProperty(Property.GRID_COLUMN_END, 5);\n",
      "            paragraph2.setBorder(border);\n",
      "            grid.add(paragraph2);\n",
      "            Paragraph paragraph3 = new Paragraph(\"Three\");\n",
      "            paragraph3.setProperty(Property.GRID_COLUMN_START, 2);\n",
      "            paragraph3.setProperty(Property.GRID_COLUMN_END, 4);\n",
      "            paragraph3.setBorder(border);\n",
      "            grid.add(paragraph3);\n",
      "            grid.add(new Paragraph(\"Four\").setBorder(border));\n",
      "            grid.add(new Paragraph(\"Five\").setBorder(border));\n",
      "            document.add(grid);\n",
      "        }\n",
      "        Assert.assertNull(new CompareTool().compareByContent(filename, cmpName, DESTINATION_FOLDER, \"diff_\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void basicThreeColumnsWithCustomRowIndexesTest() throws IOException, InterruptedException {\n",
      "        String filename = DESTINATION_FOLDER + \"basicThreeColumnsWithCustomRowIndexesTest.pdf\";\n",
      "        String cmpName = SOURCE_FOLDER + \"cmp_basicThreeColumnsWithCustomRowIndexesTest.pdf\";\n",
      "\n",
      "        java.util.List<GridValue> templateColumns = new ArrayList<>();\n",
      "        templateColumns.add(GridValue.createPointValue(100.0f));\n",
      "        templateColumns.add(GridValue.createPointValue(100.0f));\n",
      "        templateColumns.add(GridValue.createPointValue(100.0f));\n",
      "        SolidBorder border = new SolidBorder(ColorConstants.BLUE, 1);\n",
      "\n",
      "        try (Document document = new Document(new PdfDocument(new PdfWriter(filename)))) {\n",
      "            GridContainer grid = new GridContainer();\n",
      "            grid.setProperty(Property.GRID_TEMPLATE_COLUMNS, templateColumns);\n",
      "            Paragraph paragraph1 = new Paragraph(\"One\").setBorder(border);\n",
      "            paragraph1.setProperty(Property.GRID_ROW_START, 1);\n",
      "            paragraph1.setProperty(Property.GRID_ROW_END, 3);\n",
      "            grid.add(paragraph1);\n",
      "            grid.add(new Paragraph(\"Two\").setBorder(border));\n",
      "            Paragraph paragraph3 = new Paragraph(\"Three\").setBorder(border);\n",
      "            paragraph3.setProperty(Property.GRID_ROW_START, 3);\n",
      "            paragraph3.setProperty(Property.GRID_ROW_END, 4);\n",
      "            grid.add(paragraph3);\n",
      "            grid.add(new Paragraph(\"Four\").setBorder(border));\n",
      "            document.add(grid);\n",
      "        }\n",
      "        Assert.assertNull(new CompareTool().compareByContent(filename, cmpName, DESTINATION_FOLDER, \"diff_\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void basicThreeColumnsWithCustomColumnAndRowIndexesTest() throws IOException, InterruptedException {\n",
      "        String filename = DESTINATION_FOLDER + \"basicThreeColumnsWithCustomColumnAndRowIndexesTest.pdf\";\n",
      "        String cmpName = SOURCE_FOLDER + \"cmp_basicThreeColumnsWithCustomColumnAndRowIndexesTest.pdf\";\n",
      "\n",
      "        java.util.List<GridValue> templateColumns = new ArrayList<>();\n",
      "        templateColumns.add(GridValue.createPointValue(100.0f));\n",
      "        templateColumns.add(GridValue.createPointValue(100.0f));\n",
      "        templateColumns.add(GridValue.createPointValue(100.0f));\n",
      "\n",
      "        try (Document document = new Document(new PdfDocument(new PdfWriter(filename)))) {\n",
      "            GridContainer grid = new GridContainer();\n",
      "            SolidBorder border = new SolidBorder(ColorConstants.BLUE, 1);\n",
      "            grid.setProperty(Property.GRID_TEMPLATE_COLUMNS, templateColumns);\n",
      "            Paragraph paragraph1 = new Paragraph(\"One\");\n",
      "            paragraph1.setProperty(Property.GRID_COLUMN_START, 1);\n",
      "            paragraph1.setProperty(Property.GRID_COLUMN_END, 3);\n",
      "            paragraph1.setProperty(Property.GRID_ROW_START, 1);\n",
      "            paragraph1.setProperty(Property.GRID_ROW_END, 3);\n",
      "            paragraph1.setBorder(border);\n",
      "            grid.add(paragraph1);\n",
      "            grid.add(new Paragraph(\"Two\").setBorder(border));\n",
      "            grid.add(new Paragraph(\"Three\").setBorder(border));\n",
      "            grid.add(new Paragraph(\"Four\").setBorder(border));\n",
      "            grid.add(new Paragraph(\"Five\").setBorder(border));\n",
      "            document.add(grid);\n",
      "        }\n",
      "        Assert.assertNull(new CompareTool().compareByContent(filename, cmpName, DESTINATION_FOLDER, \"diff_\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void basicThreeColumnsWithReversedIndexesTest() throws IOException, InterruptedException {\n",
      "        String filename = DESTINATION_FOLDER + \"basicThreeColumnsWithReversedIndexesTest.pdf\";\n",
      "        String cmpName = SOURCE_FOLDER + \"cmp_basicThreeColumnsWithReversedIndexesTest.pdf\";\n",
      "\n",
      "        java.util.List<GridValue> templateColumns = new ArrayList<>();\n",
      "        templateColumns.add(GridValue.createPointValue(100.0f));\n",
      "        templateColumns.add(GridValue.createPointValue(100.0f));\n",
      "        templateColumns.add(GridValue.createPointValue(100.0f));\n",
      "\n",
      "        try (Document document = new Document(new PdfDocument(new PdfWriter(filename)))) {\n",
      "            GridContainer grid = new GridContainer();\n",
      "            SolidBorder border = new SolidBorder(ColorConstants.BLUE, 1);\n",
      "            grid.setProperty(Property.GRID_TEMPLATE_COLUMNS, templateColumns);\n",
      "            Paragraph paragraph1 = new Paragraph(\"One\");\n",
      "            paragraph1.setProperty(Property.GRID_COLUMN_START, 3);\n",
      "            paragraph1.setProperty(Property.GRID_COLUMN_END, 1);\n",
      "            paragraph1.setProperty(Property.GRID_ROW_START, 3);\n",
      "            paragraph1.setProperty(Property.GRID_ROW_END, 1);\n",
      "            paragraph1.setBorder(border);\n",
      "            grid.add(paragraph1);\n",
      "            Paragraph paragraph2 = new Paragraph(\"Two\");\n",
      "            paragraph2.setProperty(Property.GRID_ROW_START, 3);\n",
      "            paragraph2.setProperty(Property.GRID_ROW_END, 1);\n",
      "            paragraph2.setBorder(border);\n",
      "            grid.add(paragraph2);\n",
      "            Paragraph paragraph3 = new Paragraph(\"Three\");\n",
      "            paragraph3.setProperty(Property.GRID_COLUMN_START, 3);\n",
      "            paragraph3.setProperty(Property.GRID_COLUMN_END, 1);\n",
      "            paragraph3.setBorder(border);\n",
      "            grid.add(paragraph3);\n",
      "            grid.add(new Paragraph(\"Four\").setBorder(border));\n",
      "            grid.add(new Paragraph(\"Five\").setBorder(border));\n",
      "            document.add(grid);\n",
      "        }\n",
      "        Assert.assertNull(new CompareTool().compareByContent(filename, cmpName, DESTINATION_FOLDER, \"diff_\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void basicThreeColumnsWithoutColumnEndTest() throws IOException, InterruptedException {\n",
      "        String filename = DESTINATION_FOLDER + \"basicThreeColumnsWithoutColumnEndTest.pdf\";\n",
      "        String cmpName = SOURCE_FOLDER + \"cmp_basicThreeColumnsWithoutColumnEndTest.pdf\";\n",
      "\n",
      "        java.util.List<GridValue> templateColumns = new ArrayList<>();\n",
      "        templateColumns.add(GridValue.createPointValue(100.0f));\n",
      "        templateColumns.add(GridValue.createPointValue(100.0f));\n",
      "        templateColumns.add(GridValue.createPointValue(100.0f));\n",
      "\n",
      "        try (Document document = new Document(new PdfDocument(new PdfWriter(filename)))) {\n",
      "            GridContainer grid = new GridContainer();\n",
      "            SolidBorder border = new SolidBorder(ColorConstants.BLUE, 1);\n",
      "            grid.setProperty(Property.GRID_TEMPLATE_COLUMNS, templateColumns);\n",
      "            Paragraph paragraph1 = new Paragraph(\"One\");\n",
      "            paragraph1.setProperty(Property.GRID_ROW_END, 2);\n",
      "            paragraph1.setBorder(border);\n",
      "            grid.add(paragraph1);\n",
      "            Paragraph paragraph2 = new Paragraph(\"Two\");\n",
      "            paragraph2.setProperty(Property.GRID_ROW_START, 2);\n",
      "            paragraph2.setBorder(border);\n",
      "            grid.add(paragraph2);\n",
      "            Paragraph paragraph3 = new Paragraph(\"Three\");\n",
      "            paragraph3.setProperty(Property.GRID_COLUMN_START, 3);\n",
      "            paragraph3.setBorder(border);\n",
      "            grid.add(paragraph3);\n",
      "            Paragraph paragraph4 = new Paragraph(\"Four\");\n",
      "            paragraph4.setProperty(Property.GRID_COLUMN_END, 3);\n",
      "            paragraph4.setBorder(border);\n",
      "            grid.add(paragraph4);\n",
      "            grid.add(new Paragraph(\"Five\").setBorder(border));\n",
      "            document.add(grid);\n",
      "        }\n",
      "        Assert.assertNull(new CompareTool().compareByContent(filename, cmpName, DESTINATION_FOLDER, \"diff_\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void fixedColumnRowGoesFirstTest() throws IOException, InterruptedException {\n",
      "        String filename = DESTINATION_FOLDER + \"fixedColumnRowGoesFirstTest.pdf\";\n",
      "        String cmpName = SOURCE_FOLDER + \"cmp_fixedColumnRowGoesFirstTest.pdf\";\n",
      "\n",
      "        java.util.List<GridValue> templateColumns = new ArrayList<>();\n",
      "        templateColumns.add(GridValue.createPointValue(100.0f));\n",
      "        templateColumns.add(GridValue.createPointValue(100.0f));\n",
      "        templateColumns.add(GridValue.createPointValue(100.0f));\n",
      "\n",
      "        try (Document document = new Document(new PdfDocument(new PdfWriter(filename)))) {\n",
      "            GridContainer grid = new GridContainer();\n",
      "            SolidBorder border = new SolidBorder(ColorConstants.BLUE, 1);\n",
      "            grid.setProperty(Property.GRID_TEMPLATE_COLUMNS, templateColumns);\n",
      "            Paragraph paragraph1 = new Paragraph(\"One\");\n",
      "            paragraph1.setProperty(Property.GRID_ROW_END, 3);\n",
      "            paragraph1.setBorder(border);\n",
      "            grid.add(paragraph1);\n",
      "            Paragraph paragraph2 = new Paragraph(\"Two\\nTwo\");\n",
      "            paragraph2.setProperty(Property.GRID_ROW_START, 1);\n",
      "            paragraph2.setProperty(Property.GRID_ROW_END, 3);\n",
      "            paragraph2.setBorder(border);\n",
      "            grid.add(paragraph2);\n",
      "            grid.add(new Paragraph(\"Three\").setBorder(border));\n",
      "            grid.add(new Paragraph(\"Four\").setBorder(border));\n",
      "            grid.add(new Paragraph(\"Five\").setBorder(border));\n",
      "\n",
      "            Paragraph paragraph6 = new Paragraph(\"Six\");\n",
      "            paragraph6.setProperty(Property.GRID_COLUMN_START, 3);\n",
      "            paragraph6.setBorder(border);\n",
      "            grid.add(paragraph6);\n",
      "            Paragraph paragraph7 = new Paragraph(\"Seven\");\n",
      "            paragraph7.setProperty(Property.GRID_COLUMN_START, 1);\n",
      "            paragraph7.setProperty(Property.GRID_COLUMN_END, 3);\n",
      "            paragraph7.setBorder(border);\n",
      "            grid.add(paragraph7);\n",
      "            Paragraph paragraph8 = new Paragraph(\"Eight\\nEight\");\n",
      "            paragraph8.setProperty(Property.GRID_COLUMN_START, 1);\n",
      "            paragraph8.setProperty(Property.GRID_COLUMN_END, 3);\n",
      "            paragraph8.setProperty(Property.GRID_ROW_START, 4);\n",
      "            paragraph8.setProperty(Property.GRID_ROW_END, 6);\n",
      "            paragraph8.setBorder(border);\n",
      "            grid.add(paragraph8);\n",
      "\n",
      "            document.add(grid);\n",
      "        }\n",
      "        Assert.assertNull(new CompareTool().compareByContent(filename, cmpName, DESTINATION_FOLDER, \"diff_\"));\n",
      "    }\n",
      "    \n",
      "    @Test\n",
      "    public void overlapWithExistingColumnTest() throws IOException {\n",
      "        String filename = DESTINATION_FOLDER + \"overlapWithExistingColumnTest.pdf\";\n",
      "\n",
      "        java.util.List<GridValue> templateColumns = new ArrayList<>();\n",
      "        templateColumns.add(GridValue.createPointValue(100.0f));\n",
      "        templateColumns.add(GridValue.createPointValue(100.0f));\n",
      "        templateColumns.add(GridValue.createPointValue(100.0f));\n",
      "\n",
      "        try (Document document = new Document(new PdfDocument(new PdfWriter(filename)))) {\n",
      "            GridContainer grid = new GridContainer();\n",
      "            SolidBorder border = new SolidBorder(ColorConstants.BLUE, 1);\n",
      "            grid.setProperty(Property.GRID_TEMPLATE_COLUMNS, templateColumns);\n",
      "            Paragraph paragraph1 = new Paragraph(\"Two\");\n",
      "            paragraph1.setProperty(Property.GRID_COLUMN_START, 1);\n",
      "            paragraph1.setProperty(Property.GRID_COLUMN_END, 2);\n",
      "            paragraph1.setProperty(Property.GRID_ROW_START, 1);\n",
      "            paragraph1.setProperty(Property.GRID_ROW_END, 2);\n",
      "            paragraph1.setBorder(border);\n",
      "            grid.add(paragraph1);\n",
      "            grid.add(new Paragraph(\"Three\").setBorder(border));\n",
      "            grid.add(new Paragraph(\"Four\").setBorder(border));\n",
      "            grid.add(new Paragraph(\"Five\").setBorder(border));\n",
      "            Paragraph paragraph2 = new Paragraph(\"One\");\n",
      "            paragraph2.setProperty(Property.GRID_COLUMN_START, 1);\n",
      "            paragraph2.setProperty(Property.GRID_COLUMN_END, 3);\n",
      "            paragraph2.setProperty(Property.GRID_ROW_START, 1);\n",
      "            paragraph2.setProperty(Property.GRID_ROW_END, 3);\n",
      "            paragraph2.setBorder(border);\n",
      "            grid.add(paragraph2);\n",
      "            Exception e = Assert.assertThrows(IllegalArgumentException.class, () ->\n",
      "                    document.add(grid));\n",
      "            Assert.assertEquals(LayoutExceptionMessageConstant.INVALID_CELL_INDEXES, e.getMessage());\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void basicThreeColumnsWithPtAndPercentTest() throws IOException, InterruptedException {\n",
      "        String filename = DESTINATION_FOLDER + \"basicThreeColumnsWithPtAndPercentTest.pdf\";\n",
      "        String cmpName = SOURCE_FOLDER + \"cmp_basicThreeColumnsWithPtAndPercentTest.pdf\";\n",
      "\n",
      "        java.util.List<GridValue> templateColumns = new ArrayList<>();\n",
      "        templateColumns.add(GridValue.createPercentValue(15.0f));\n",
      "        templateColumns.add(GridValue.createPercentValue(50.0f));\n",
      "        templateColumns.add(GridValue.createPointValue(100.0f));\n",
      "        SolidBorder border = new SolidBorder(ColorConstants.BLUE, 1);\n",
      "        try (Document document = new Document(new PdfDocument(new PdfWriter(filename)))) {\n",
      "            GridContainer grid = new GridContainer();\n",
      "            grid.setProperty(Property.GRID_TEMPLATE_COLUMNS, templateColumns);\n",
      "            for (int i = 0; i < 5; ++i) {\n",
      "                grid.add(new Paragraph(\"Test\" + i).setBorder(border));\n",
      "            }\n",
      "            document.add(grid);\n",
      "        }\n",
      "        Assert.assertNull(new CompareTool().compareByContent(filename, cmpName, DESTINATION_FOLDER, \"diff_\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void thirdColumnNotLayoutedTest() throws IOException, InterruptedException {\n",
      "        String filename = DESTINATION_FOLDER + \"thirdColumnNotLayoutedTest.pdf\";\n",
      "        String cmpName = SOURCE_FOLDER + \"cmp_thirdColumnNotLayoutedTest.pdf\";\n",
      "\n",
      "        java.util.List<GridValue> templateColumns = new ArrayList<>();\n",
      "        templateColumns.add(GridValue.createPointValue(200.0f));\n",
      "        templateColumns.add(GridValue.createPointValue(200.0f));\n",
      "        templateColumns.add(GridValue.createPointValue(200.0f));\n",
      "        SolidBorder border = new SolidBorder(ColorConstants.BLUE, 1);\n",
      "\n",
      "        try (Document document = new Document(new PdfDocument(new PdfWriter(filename)))) {\n",
      "            GridContainer grid = new GridContainer();\n",
      "            grid.setProperty(Property.GRID_TEMPLATE_COLUMNS, templateColumns);\n",
      "            for (int i = 0; i < 5; ++i) {\n",
      "                grid.add(new Paragraph(\"Test\" + i).setBorder(border));\n",
      "            }\n",
      "            document.add(grid);\n",
      "        }\n",
      "        Assert.assertNull(new CompareTool().compareByContent(filename, cmpName, DESTINATION_FOLDER, \"diff_\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void threeColumnsWithSquareAndVerticalCellsTest() throws IOException, InterruptedException {\n",
      "        String filename = DESTINATION_FOLDER + \"threeColumnsWithSquareAndVerticalCellsTest.pdf\";\n",
      "        String cmpName = SOURCE_FOLDER + \"cmp_threeColumnsWithSquareAndVerticalCellsTest.pdf\";\n",
      "\n",
      "        java.util.List<GridValue> templateColumns = new ArrayList<>();\n",
      "        templateColumns.add(GridValue.createPointValue(100.0f));\n",
      "        templateColumns.add(GridValue.createPointValue(100.0f));\n",
      "        templateColumns.add(GridValue.createPointValue(100.0f));\n",
      "\n",
      "        try (Document document = new Document(new PdfDocument(new PdfWriter(filename)))) {\n",
      "            GridContainer grid = new GridContainer();\n",
      "            SolidBorder border = new SolidBorder(ColorConstants.BLUE, 1);\n",
      "            grid.setProperty(Property.GRID_TEMPLATE_COLUMNS, templateColumns);\n",
      "            Paragraph paragraph1 = new Paragraph(\"One\");\n",
      "            paragraph1.setProperty(Property.GRID_COLUMN_START, 1);\n",
      "            paragraph1.setProperty(Property.GRID_COLUMN_END, 3);\n",
      "            paragraph1.setProperty(Property.GRID_ROW_START, 1);\n",
      "            paragraph1.setProperty(Property.GRID_ROW_END, 3);\n",
      "            paragraph1.setBorder(border);\n",
      "            grid.add(paragraph1);\n",
      "            grid.add(new Paragraph(\"Two\").setBorder(border));\n",
      "            Paragraph paragraph3 = new Paragraph(\"Three\");\n",
      "            paragraph3.setProperty(Property.GRID_ROW_START, 2);\n",
      "            paragraph3.setProperty(Property.GRID_ROW_END, 4);\n",
      "            paragraph3.setBorder(border);\n",
      "            grid.add(paragraph3);\n",
      "            grid.add(new Paragraph(\"Four\").setBorder(border));\n",
      "            grid.add(new Paragraph(\"Five\").setBorder(border));\n",
      "            grid.add(new Paragraph(\"Six\").setBorder(border));\n",
      "            document.add(grid);\n",
      "        }\n",
      "        Assert.assertNull(new CompareTool().compareByContent(filename, cmpName, DESTINATION_FOLDER, \"diff_\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void threeColumnsWithSquareCellAndCellWithExplicitHeightTest() throws IOException, InterruptedException {\n",
      "        String filename = DESTINATION_FOLDER + \"threeColumnsWithSquareCellAndCellWithExplicitHeightTest.pdf\";\n",
      "        String cmpName = SOURCE_FOLDER + \"cmp_threeColumnsWithSquareCellAndCellWithExplicitHeightTest.pdf\";\n",
      "\n",
      "        java.util.List<GridValue> templateColumns = new ArrayList<>();\n",
      "        templateColumns.add(GridValue.createPointValue(100.0f));\n",
      "        templateColumns.add(GridValue.createPointValue(100.0f));\n",
      "        templateColumns.add(GridValue.createPointValue(100.0f));\n",
      "\n",
      "        try (Document document = new Document(new PdfDocument(new PdfWriter(filename)))) {\n",
      "            GridContainer grid = new GridContainer();\n",
      "            grid.setBackgroundColor(ColorConstants.GREEN);\n",
      "            SolidBorder border = new SolidBorder(ColorConstants.BLUE, 1);\n",
      "            grid.setProperty(Property.GRID_TEMPLATE_COLUMNS, templateColumns);\n",
      "            Paragraph paragraph1 = new Paragraph(\"One\");\n",
      "            paragraph1.setProperty(Property.GRID_COLUMN_START, 1);\n",
      "            paragraph1.setProperty(Property.GRID_COLUMN_END, 3);\n",
      "            paragraph1.setProperty(Property.GRID_ROW_START, 1);\n",
      "            paragraph1.setProperty(Property.GRID_ROW_END, 3);\n",
      "            paragraph1.setBorder(border).setBackgroundColor(ColorConstants.RED);\n",
      "            grid.add(paragraph1);\n",
      "            grid.add(new Paragraph(\"Two\").setBorder(border).setBackgroundColor(ColorConstants.RED));\n",
      "            grid.add(new Paragraph(\"Three\").setBorder(border).setBackgroundColor(ColorConstants.RED).setHeight(100.0f));\n",
      "            grid.add(new Paragraph(\"Four\").setBorder(border).setBackgroundColor(ColorConstants.RED));\n",
      "            grid.add(new Paragraph(\"Five\").setBorder(border).setBackgroundColor(ColorConstants.RED));\n",
      "            document.add(grid);\n",
      "        }\n",
      "        Assert.assertNull(new CompareTool().compareByContent(filename, cmpName, DESTINATION_FOLDER, \"diff_\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void threeColumnsWithVerticalCellWithSeveralNeighboursToTheLeftTest() throws IOException, InterruptedException {\n",
      "        String filename = DESTINATION_FOLDER + \"threeColumnsWithVerticalCellWithSeveralNeighboursToTheLeftTest.pdf\";\n",
      "        String cmpName = SOURCE_FOLDER + \"cmp_threeColumnsWithVerticalCellWithSeveralNeighboursToTheLeftTest.pdf\";\n",
      "\n",
      "        java.util.List<GridValue> templateColumns = new ArrayList<>();\n",
      "        templateColumns.add(GridValue.createPointValue(100.0f));\n",
      "        templateColumns.add(GridValue.createPointValue(100.0f));\n",
      "        templateColumns.add(GridValue.createPointValue(100.0f));\n",
      "\n",
      "        try (Document document = new Document(new PdfDocument(new PdfWriter(filename)))) {\n",
      "            GridContainer grid = new GridContainer();\n",
      "            SolidBorder border = new SolidBorder(ColorConstants.BLUE, 1);\n",
      "            grid.setProperty(Property.GRID_TEMPLATE_COLUMNS, templateColumns);\n",
      "            Paragraph paragraph1 = new Paragraph(\"One\");\n",
      "            paragraph1.setProperty(Property.GRID_COLUMN_START, 1);\n",
      "            paragraph1.setProperty(Property.GRID_COLUMN_END, 3);\n",
      "            paragraph1.setProperty(Property.GRID_ROW_START, 1);\n",
      "            paragraph1.setProperty(Property.GRID_ROW_END, 3);\n",
      "            paragraph1.setBorder(border).setBackgroundColor(ColorConstants.RED);\n",
      "            grid.add(paragraph1);\n",
      "            grid.add(new Paragraph(\"Two\").setBorder(border).setBackgroundColor(ColorConstants.RED));\n",
      "            Paragraph paragraph3 = new Paragraph(\"Three\");\n",
      "            paragraph3.setProperty(Property.GRID_ROW_START, 2);\n",
      "            paragraph3.setProperty(Property.GRID_ROW_END, 4);\n",
      "            paragraph3.setBorder(border).setBackgroundColor(ColorConstants.RED);\n",
      "            grid.add(paragraph3);\n",
      "            grid.add(new Paragraph(\"Four\").setBorder(border).setBackgroundColor(ColorConstants.RED));\n",
      "            grid.add(new Paragraph(\"Five\").setBorder(border).setBackgroundColor(ColorConstants.RED));\n",
      "            document.add(grid);\n",
      "        }\n",
      "        Assert.assertNull(new CompareTool().compareByContent(filename, cmpName, DESTINATION_FOLDER, \"diff_\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void bigCellMinContentTest() throws IOException, InterruptedException {\n",
      "        String filename = DESTINATION_FOLDER + \"bigCellMinContentTest.pdf\";\n",
      "        String cmpName = SOURCE_FOLDER + \"cmp_bigCellMinContentTest.pdf\";\n",
      "        SolidBorder border = new SolidBorder(ColorConstants.BLUE, 1);\n",
      "        java.util.List<GridValue> templateColumns = new ArrayList<>();\n",
      "        templateColumns.add(GridValue.createMinContentValue());\n",
      "\n",
      "        try (Document document = new Document(new PdfDocument(new PdfWriter(filename)))) {\n",
      "            GridContainer grid = new GridContainer();\n",
      "            grid.setProperty(Property.GRID_TEMPLATE_COLUMNS, templateColumns);\n",
      "            grid.add(new Paragraph(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, \" +\n",
      "                    \"sed do eiusmod tempor incididunt ut labore et dolore\").setBorder(border));\n",
      "            grid.add(new Paragraph(\"test\").setBorder(border));\n",
      "            document.add(grid);\n",
      "        }\n",
      "        Assert.assertNull(new CompareTool().compareByContent(filename, cmpName, DESTINATION_FOLDER, \"diff_\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void columnRowGapTest() throws IOException, InterruptedException {\n",
      "        String filename = DESTINATION_FOLDER + \"columnRowGapTest.pdf\";\n",
      "        String cmpName = SOURCE_FOLDER + \"cmp_columnRowGapTest.pdf\";\n",
      "        java.util.List<GridValue> template = new ArrayList<>();\n",
      "        template.add(GridValue.createPointValue(50.0f));\n",
      "        template.add(GridValue.createPointValue(50.0f));\n",
      "\n",
      "        try (Document document = new Document(new PdfDocument(new PdfWriter(filename)))) {\n",
      "            GridContainer grid = new GridContainer();\n",
      "            grid.setProperty(Property.GRID_TEMPLATE_COLUMNS, template);\n",
      "            grid.setProperty(Property.GRID_TEMPLATE_ROWS, template);\n",
      "            grid.setProperty(Property.GRID_AUTO_ROWS, GridValue.createPointValue(70.0f));\n",
      "            grid.setProperty(Property.COLUMN_GAP, 20.0f);\n",
      "            grid.setProperty(Property.ROW_GAP, 20.0f);\n",
      "            grid.add(new Paragraph(\"One\").setBackgroundColor(ColorConstants.CYAN));\n",
      "            grid.add(new Paragraph(\"Two\").setBackgroundColor(ColorConstants.CYAN));\n",
      "            grid.add(new Paragraph(\"Tree\").setBackgroundColor(ColorConstants.CYAN));\n",
      "            grid.add(new Paragraph(\"Four\").setBackgroundColor(ColorConstants.CYAN));\n",
      "            grid.add(new Paragraph(\"Five\").setBackgroundColor(ColorConstants.CYAN));\n",
      "            grid.add(new Paragraph(\"Six\").setBackgroundColor(ColorConstants.CYAN));\n",
      "            grid.add(new Paragraph(\"Seven\").setBackgroundColor(ColorConstants.CYAN));\n",
      "            document.add(grid);\n",
      "        }\n",
      "        Assert.assertNull(new CompareTool().compareByContent(filename, cmpName, DESTINATION_FOLDER, \"diff_\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void fewBigCellsWithGapTest() throws IOException, InterruptedException {\n",
      "        String filename = DESTINATION_FOLDER + \"fewBigCellsWithGapTest.pdf\";\n",
      "        String cmpName = SOURCE_FOLDER + \"cmp_fewBigCellsWithGapTest.pdf\";\n",
      "        java.util.List<GridValue> template = new ArrayList<>();\n",
      "        template.add(GridValue.createPointValue(50.0f));\n",
      "        template.add(GridValue.createPointValue(50.0f));\n",
      "        template.add(GridValue.createPointValue(50.0f));\n",
      "\n",
      "        try (Document document = new Document(new PdfDocument(new PdfWriter(filename)))) {\n",
      "            GridContainer grid = new GridContainer();\n",
      "            grid.setProperty(Property.GRID_TEMPLATE_COLUMNS, template);\n",
      "            grid.setProperty(Property.GRID_TEMPLATE_ROWS, template);\n",
      "            grid.setProperty(Property.COLUMN_GAP, 10.0f);\n",
      "            grid.setProperty(Property.ROW_GAP, 10.0f);\n",
      "            final Paragraph one = new Paragraph(\"One\").setBackgroundColor(ColorConstants.CYAN);\n",
      "            one.setProperty(Property.GRID_COLUMN_START, 1);\n",
      "            one.setProperty(Property.GRID_COLUMN_END, 3);\n",
      "            one.setProperty(Property.GRID_ROW_START, 1);\n",
      "            one.setProperty(Property.GRID_ROW_END, 3);\n",
      "            grid.add(one);\n",
      "            grid.add(new Paragraph(\"Two\").setBackgroundColor(ColorConstants.CYAN));\n",
      "            grid.add(new Paragraph(\"Tree\").setBackgroundColor(ColorConstants.CYAN));\n",
      "            grid.add(new Paragraph(\"Four\").setBackgroundColor(ColorConstants.CYAN));\n",
      "            final Paragraph five = new Paragraph(\"Five\").setBackgroundColor(ColorConstants.CYAN);\n",
      "            five.setProperty(Property.GRID_COLUMN_START, 1);\n",
      "            five.setProperty(Property.GRID_COLUMN_END, 4);\n",
      "            five.setProperty(Property.GRID_ROW_START, 3);\n",
      "            five.setProperty(Property.GRID_ROW_END, 5);\n",
      "            grid.add(five);\n",
      "            grid.add(new Paragraph(\"Six\").setBackgroundColor(ColorConstants.CYAN));\n",
      "            grid.add(new Paragraph(\"Seven\").setBackgroundColor(ColorConstants.CYAN));\n",
      "            grid.add(new Paragraph(\"Eight\").setBackgroundColor(ColorConstants.CYAN));\n",
      "            grid.add(new Paragraph(\"Nine\").setBackgroundColor(ColorConstants.CYAN));\n",
      "            document.add(grid);\n",
      "        }\n",
      "        Assert.assertNull(new CompareTool().compareByContent(filename, cmpName, DESTINATION_FOLDER, \"diff_\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void columnFlowWithBigCellsTest() throws IOException, InterruptedException {\n",
      "        String filename = DESTINATION_FOLDER + \"columnFlowWithBigCellsTest.pdf\";\n",
      "        String cmpName = SOURCE_FOLDER + \"cmp_columnFlowWithBigCellsTest.pdf\";\n",
      "        java.util.List<GridValue> template = new ArrayList<>();\n",
      "        template.add(GridValue.createPointValue(50.0f));\n",
      "        template.add(GridValue.createPointValue(50.0f));\n",
      "        template.add(GridValue.createPointValue(50.0f));\n",
      "\n",
      "        try (Document document = new Document(new PdfDocument(new PdfWriter(filename)))) {\n",
      "            GridContainer grid = new GridContainer();\n",
      "            grid.setProperty(Property.GRID_FLOW, GridFlow.COLUMN);\n",
      "            grid.setProperty(Property.GRID_TEMPLATE_COLUMNS, template);\n",
      "            grid.setProperty(Property.GRID_TEMPLATE_ROWS, template);\n",
      "            grid.setProperty(Property.COLUMN_GAP, 10.0f);\n",
      "            grid.setProperty(Property.ROW_GAP, 10.0f);\n",
      "            final Paragraph one = new Paragraph(\"One\").setBackgroundColor(ColorConstants.CYAN);\n",
      "            one.setProperty(Property.GRID_COLUMN_START, 1);\n",
      "            one.setProperty(Property.GRID_COLUMN_END, 3);\n",
      "            one.setProperty(Property.GRID_ROW_START, 1);\n",
      "            one.setProperty(Property.GRID_ROW_END, 3);\n",
      "            grid.add(one);\n",
      "            grid.add(new Paragraph(\"Two\").setBackgroundColor(ColorConstants.CYAN));\n",
      "            grid.add(new Paragraph(\"Tree\").setBackgroundColor(ColorConstants.CYAN));\n",
      "            grid.add(new Paragraph(\"Four\").setBackgroundColor(ColorConstants.CYAN));\n",
      "            final Paragraph five = new Paragraph(\"Five\").setBackgroundColor(ColorConstants.CYAN);\n",
      "            five.setProperty(Property.GRID_COLUMN_START, 1);\n",
      "            five.setProperty(Property.GRID_COLUMN_END, 4);\n",
      "            grid.add(five);\n",
      "            grid.add(new Paragraph(\"Six\").setBackgroundColor(ColorConstants.CYAN));\n",
      "            final Paragraph seven = new Paragraph(\"Seven\").setBackgroundColor(ColorConstants.CYAN);\n",
      "            seven.setProperty(Property.GRID_ROW_START, 1);\n",
      "            seven.setProperty(Property.GRID_ROW_END, 4);\n",
      "            grid.add(seven);\n",
      "            grid.add(new Paragraph(\"Eight\").setBackgroundColor(ColorConstants.CYAN));\n",
      "            grid.add(new Paragraph(\"Nine\").setBackgroundColor(ColorConstants.CYAN));\n",
      "            document.add(grid);\n",
      "        }\n",
      "        Assert.assertNull(new CompareTool().compareByContent(filename, cmpName, DESTINATION_FOLDER, \"diff_\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void frInRowsTest() throws IOException, InterruptedException {\n",
      "        String filename = DESTINATION_FOLDER + \"frInRowsTest.pdf\";\n",
      "        String cmpName = SOURCE_FOLDER + \"cmp_frInRowsTest.pdf\";\n",
      "        java.util.List<GridValue> template = new ArrayList<>();\n",
      "        template.add(GridValue.createFlexValue(1f));\n",
      "        template.add(GridValue.createFlexValue(3f));\n",
      "\n",
      "        try (Document document = new Document(new PdfDocument(new PdfWriter(filename)))) {\n",
      "            GridContainer grid = new GridContainer();\n",
      "            grid.setProperty(Property.GRID_TEMPLATE_ROWS, template);\n",
      "            grid.setProperty(Property.ROW_GAP, 20.0f);\n",
      "            grid.add(new Paragraph(\"One\").setBackgroundColor(ColorConstants.CYAN));\n",
      "            grid.add(new Paragraph(\"Two\").setBackgroundColor(ColorConstants.CYAN));\n",
      "            grid.add(new Paragraph(\"Tree\").setBackgroundColor(ColorConstants.CYAN));\n",
      "            document.add(grid);\n",
      "        }\n",
      "        Assert.assertNull(new CompareTool().compareByContent(filename, cmpName, DESTINATION_FOLDER, \"diff_\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void frColumnsTest() throws IOException, InterruptedException {\n",
      "        String filename = DESTINATION_FOLDER + \"frColumnsTest.pdf\";\n",
      "        String cmpName = SOURCE_FOLDER + \"cmp_frColumnsTest.pdf\";\n",
      "\n",
      "        java.util.List<GridValue> templateColumns = new ArrayList<>();\n",
      "        templateColumns.add(GridValue.createFlexValue(1f));\n",
      "        templateColumns.add(GridValue.createAutoValue());\n",
      "        templateColumns.add(GridValue.createFlexValue(3f));\n",
      "        SolidBorder border = new SolidBorder(ColorConstants.BLUE, 1);\n",
      "\n",
      "        try (Document document = new Document(new PdfDocument(new PdfWriter(filename)))) {\n",
      "            GridContainer grid = new GridContainer();\n",
      "            grid.setProperty(Property.GRID_TEMPLATE_COLUMNS, templateColumns);\n",
      "            grid.add(new Paragraph(\"Test1\").setBorder(border));\n",
      "            grid.add(new Paragraph(\"Test2\").setBorder(border));\n",
      "            grid.add(new Paragraph(\"Test3\").setBorder(border));\n",
      "            final Paragraph test4 = new Paragraph(\"Test4Test4Test4Test4Test4 Test4 Test4 Test4 Test4 Test4 Test4 Test4\").setBorder(border);\n",
      "            test4.setProperty(Property.GRID_COLUMN_START, 1);\n",
      "            test4.setProperty(Property.GRID_COLUMN_END, 3);\n",
      "            grid.add(test4);\n",
      "            grid.add(new Paragraph(\"Test5\").setBorder(border));\n",
      "            document.add(grid);\n",
      "        }\n",
      "        Assert.assertNull(new CompareTool().compareByContent(filename, cmpName, DESTINATION_FOLDER, \"diff_\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void columnSpanTest() throws IOException, InterruptedException {\n",
      "        String filename = DESTINATION_FOLDER + \"columnSpanTest.pdf\";\n",
      "        String cmpName = SOURCE_FOLDER + \"cmp_columnSpanTest.pdf\";\n",
      "\n",
      "        java.util.List<GridValue> templateColumns = new ArrayList<>();\n",
      "        templateColumns.add(GridValue.createPointValue(100.0f));\n",
      "        templateColumns.add(GridValue.createPointValue(100.0f));\n",
      "        templateColumns.add(GridValue.createPointValue(100.0f));\n",
      "        SolidBorder border = new SolidBorder(ColorConstants.BLUE, 1);\n",
      "\n",
      "        try (Document document = new Document(new PdfDocument(new PdfWriter(filename)))) {\n",
      "            GridContainer grid = new GridContainer();\n",
      "            grid.setProperty(Property.GRID_TEMPLATE_COLUMNS, templateColumns);\n",
      "            Paragraph paragraph1 = new Paragraph(\"One\").setBorder(border);\n",
      "            paragraph1.setProperty(Property.GRID_COLUMN_START, 1);\n",
      "            paragraph1.setProperty(Property.GRID_COLUMN_SPAN, 2);\n",
      "            grid.add(paragraph1);\n",
      "            grid.add(new Paragraph(\"Two\").setBorder(border));\n",
      "            grid.add(new Paragraph(\"Three\").setBorder(border));\n",
      "            grid.add(new Paragraph(\"Four\").setBorder(border));\n",
      "            document.add(grid);\n",
      "        }\n",
      "        Assert.assertNull(new CompareTool().compareByContent(filename, cmpName, DESTINATION_FOLDER, \"diff_\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void rowSpanTest() throws IOException, InterruptedException {\n",
      "        String filename = DESTINATION_FOLDER + \"rowSpanTest.pdf\";\n",
      "        String cmpName = SOURCE_FOLDER + \"cmp_rowSpanTest.pdf\";\n",
      "\n",
      "        java.util.List<GridValue> template = new ArrayList<>();\n",
      "        template.add(GridValue.createPointValue(100.0f));\n",
      "        template.add(GridValue.createPointValue(100.0f));\n",
      "        template.add(GridValue.createPointValue(100.0f));\n",
      "        SolidBorder border = new SolidBorder(ColorConstants.BLUE, 1);\n",
      "\n",
      "        try (Document document = new Document(new PdfDocument(new PdfWriter(filename)))) {\n",
      "            GridContainer grid = new GridContainer();\n",
      "            grid.setProperty(Property.GRID_TEMPLATE_COLUMNS, template);\n",
      "            grid.setProperty(Property.GRID_TEMPLATE_ROWS, template);\n",
      "            Paragraph paragraph1 = new Paragraph(\"One\").setBorder(border);\n",
      "            paragraph1.setProperty(Property.GRID_ROW_SPAN, 2);\n",
      "            paragraph1.setProperty(Property.GRID_ROW_END, 3);\n",
      "            grid.add(paragraph1);\n",
      "            grid.add(new Paragraph(\"Two\").setBorder(border));\n",
      "            grid.add(new Paragraph(\"Three\").setBorder(border));\n",
      "            grid.add(new Paragraph(\"Four\").setBorder(border));\n",
      "            document.add(grid);\n",
      "        }\n",
      "        Assert.assertNull(new CompareTool().compareByContent(filename, cmpName, DESTINATION_FOLDER, \"diff_\"));\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "GridContainer::::makeNewRenderer()": [
        40,
        43
      ]
    },
    "test_method_lines_dic": {
      "GridContainerTest::::beforeClass()": [
        50,
        53
      ],
      "GridContainerTest::::basicThreeColumnsTest()": [
        55,
        75
      ],
      "GridContainerTest::::basicAutoColumnsTest()": [
        77,
        92
      ],
      "GridContainerTest::::basicAutoRowsTest()": [
        94,
        113
      ],
      "GridContainerTest::::basicThreeColumnsWithCustomColumnIndexesTest()": [
        115,
        142
      ],
      "GridContainerTest::::threeColumnsWithAdjacentWideCellsTest()": [
        144,
        179
      ],
      "GridContainerTest::::basicThreeColumnsWithCustomRowIndexesTest()": [
        181,
        208
      ],
      "GridContainerTest::::basicThreeColumnsWithCustomColumnAndRowIndexesTest()": [
        210,
        238
      ],
      "GridContainerTest::::basicThreeColumnsWithReversedIndexesTest()": [
        240,
        276
      ],
      "GridContainerTest::::basicThreeColumnsWithoutColumnEndTest()": [
        278,
        312
      ],
      "GridContainerTest::::fixedColumnRowGoesFirstTest()": [
        314,
        361
      ],
      "GridContainerTest::::overlapWithExistingColumnTest()": [
        363,
        397
      ],
      "GridContainerTest::::basicThreeColumnsWithPtAndPercentTest()": [
        399,
        418
      ],
      "GridContainerTest::::thirdColumnNotLayoutedTest()": [
        420,
        440
      ],
      "GridContainerTest::::threeColumnsWithSquareAndVerticalCellsTest()": [
        442,
        475
      ],
      "GridContainerTest::::threeColumnsWithSquareCellAndCellWithExplicitHeightTest()": [
        477,
        506
      ],
      "GridContainerTest::::threeColumnsWithVerticalCellWithSeveralNeighboursToTheLeftTest()": [
        508,
        540
      ],
      "GridContainerTest::::bigCellMinContentTest()": [
        542,
        559
      ],
      "GridContainerTest::::columnRowGapTest()": [
        561,
        586
      ],
      "GridContainerTest::::fewBigCellsWithGapTest()": [
        588,
        625
      ],
      "GridContainerTest::::columnFlowWithBigCellsTest()": [
        627,
        666
      ],
      "GridContainerTest::::frInRowsTest()": [
        668,
        686
      ],
      "GridContainerTest::::frColumnsTest()": [
        688,
        713
      ],
      "GridContainerTest::::columnSpanTest()": [
        715,
        739
      ],
      "GridContainerTest::::rowSpanTest()": [
        741,
        766
      ]
    },
    "reverse_method_lines_dic": {
      "40": "GridContainer::::makeNewRenderer()",
      "41": "GridContainer::::makeNewRenderer()",
      "42": "GridContainer::::makeNewRenderer()",
      "43": "GridContainer::::makeNewRenderer()"
    },
    "test_reverse_method_lines_dic": {
      "50": "GridContainerTest::::beforeClass()",
      "51": "GridContainerTest::::beforeClass()",
      "52": "GridContainerTest::::beforeClass()",
      "53": "GridContainerTest::::beforeClass()",
      "55": "GridContainerTest::::basicThreeColumnsTest()",
      "56": "GridContainerTest::::basicThreeColumnsTest()",
      "57": "GridContainerTest::::basicThreeColumnsTest()",
      "58": "GridContainerTest::::basicThreeColumnsTest()",
      "59": "GridContainerTest::::basicThreeColumnsTest()",
      "60": "GridContainerTest::::basicThreeColumnsTest()",
      "61": "GridContainerTest::::basicThreeColumnsTest()",
      "62": "GridContainerTest::::basicThreeColumnsTest()",
      "63": "GridContainerTest::::basicThreeColumnsTest()",
      "64": "GridContainerTest::::basicThreeColumnsTest()",
      "65": "GridContainerTest::::basicThreeColumnsTest()",
      "66": "GridContainerTest::::basicThreeColumnsTest()",
      "67": "GridContainerTest::::basicThreeColumnsTest()",
      "68": "GridContainerTest::::basicThreeColumnsTest()",
      "69": "GridContainerTest::::basicThreeColumnsTest()",
      "70": "GridContainerTest::::basicThreeColumnsTest()",
      "71": "GridContainerTest::::basicThreeColumnsTest()",
      "72": "GridContainerTest::::basicThreeColumnsTest()",
      "73": "GridContainerTest::::basicThreeColumnsTest()",
      "74": "GridContainerTest::::basicThreeColumnsTest()",
      "75": "GridContainerTest::::basicThreeColumnsTest()",
      "77": "GridContainerTest::::basicAutoColumnsTest()",
      "78": "GridContainerTest::::basicAutoColumnsTest()",
      "79": "GridContainerTest::::basicAutoColumnsTest()",
      "80": "GridContainerTest::::basicAutoColumnsTest()",
      "81": "GridContainerTest::::basicAutoColumnsTest()",
      "82": "GridContainerTest::::basicAutoColumnsTest()",
      "83": "GridContainerTest::::basicAutoColumnsTest()",
      "84": "GridContainerTest::::basicAutoColumnsTest()",
      "85": "GridContainerTest::::basicAutoColumnsTest()",
      "86": "GridContainerTest::::basicAutoColumnsTest()",
      "87": "GridContainerTest::::basicAutoColumnsTest()",
      "88": "GridContainerTest::::basicAutoColumnsTest()",
      "89": "GridContainerTest::::basicAutoColumnsTest()",
      "90": "GridContainerTest::::basicAutoColumnsTest()",
      "91": "GridContainerTest::::basicAutoColumnsTest()",
      "92": "GridContainerTest::::basicAutoColumnsTest()",
      "94": "GridContainerTest::::basicAutoRowsTest()",
      "95": "GridContainerTest::::basicAutoRowsTest()",
      "96": "GridContainerTest::::basicAutoRowsTest()",
      "97": "GridContainerTest::::basicAutoRowsTest()",
      "98": "GridContainerTest::::basicAutoRowsTest()",
      "99": "GridContainerTest::::basicAutoRowsTest()",
      "100": "GridContainerTest::::basicAutoRowsTest()",
      "101": "GridContainerTest::::basicAutoRowsTest()",
      "102": "GridContainerTest::::basicAutoRowsTest()",
      "103": "GridContainerTest::::basicAutoRowsTest()",
      "104": "GridContainerTest::::basicAutoRowsTest()",
      "105": "GridContainerTest::::basicAutoRowsTest()",
      "106": "GridContainerTest::::basicAutoRowsTest()",
      "107": "GridContainerTest::::basicAutoRowsTest()",
      "108": "GridContainerTest::::basicAutoRowsTest()",
      "109": "GridContainerTest::::basicAutoRowsTest()",
      "110": "GridContainerTest::::basicAutoRowsTest()",
      "111": "GridContainerTest::::basicAutoRowsTest()",
      "112": "GridContainerTest::::basicAutoRowsTest()",
      "113": "GridContainerTest::::basicAutoRowsTest()",
      "115": "GridContainerTest::::basicThreeColumnsWithCustomColumnIndexesTest()",
      "116": "GridContainerTest::::basicThreeColumnsWithCustomColumnIndexesTest()",
      "117": "GridContainerTest::::basicThreeColumnsWithCustomColumnIndexesTest()",
      "118": "GridContainerTest::::basicThreeColumnsWithCustomColumnIndexesTest()",
      "119": "GridContainerTest::::basicThreeColumnsWithCustomColumnIndexesTest()",
      "120": "GridContainerTest::::basicThreeColumnsWithCustomColumnIndexesTest()",
      "121": "GridContainerTest::::basicThreeColumnsWithCustomColumnIndexesTest()",
      "122": "GridContainerTest::::basicThreeColumnsWithCustomColumnIndexesTest()",
      "123": "GridContainerTest::::basicThreeColumnsWithCustomColumnIndexesTest()",
      "124": "GridContainerTest::::basicThreeColumnsWithCustomColumnIndexesTest()",
      "125": "GridContainerTest::::basicThreeColumnsWithCustomColumnIndexesTest()",
      "126": "GridContainerTest::::basicThreeColumnsWithCustomColumnIndexesTest()",
      "127": "GridContainerTest::::basicThreeColumnsWithCustomColumnIndexesTest()",
      "128": "GridContainerTest::::basicThreeColumnsWithCustomColumnIndexesTest()",
      "129": "GridContainerTest::::basicThreeColumnsWithCustomColumnIndexesTest()",
      "130": "GridContainerTest::::basicThreeColumnsWithCustomColumnIndexesTest()",
      "131": "GridContainerTest::::basicThreeColumnsWithCustomColumnIndexesTest()",
      "132": "GridContainerTest::::basicThreeColumnsWithCustomColumnIndexesTest()",
      "133": "GridContainerTest::::basicThreeColumnsWithCustomColumnIndexesTest()",
      "134": "GridContainerTest::::basicThreeColumnsWithCustomColumnIndexesTest()",
      "135": "GridContainerTest::::basicThreeColumnsWithCustomColumnIndexesTest()",
      "136": "GridContainerTest::::basicThreeColumnsWithCustomColumnIndexesTest()",
      "137": "GridContainerTest::::basicThreeColumnsWithCustomColumnIndexesTest()",
      "138": "GridContainerTest::::basicThreeColumnsWithCustomColumnIndexesTest()",
      "139": "GridContainerTest::::basicThreeColumnsWithCustomColumnIndexesTest()",
      "140": "GridContainerTest::::basicThreeColumnsWithCustomColumnIndexesTest()",
      "141": "GridContainerTest::::basicThreeColumnsWithCustomColumnIndexesTest()",
      "142": "GridContainerTest::::basicThreeColumnsWithCustomColumnIndexesTest()",
      "144": "GridContainerTest::::threeColumnsWithAdjacentWideCellsTest()",
      "145": "GridContainerTest::::threeColumnsWithAdjacentWideCellsTest()",
      "146": "GridContainerTest::::threeColumnsWithAdjacentWideCellsTest()",
      "147": "GridContainerTest::::threeColumnsWithAdjacentWideCellsTest()",
      "148": "GridContainerTest::::threeColumnsWithAdjacentWideCellsTest()",
      "149": "GridContainerTest::::threeColumnsWithAdjacentWideCellsTest()",
      "150": "GridContainerTest::::threeColumnsWithAdjacentWideCellsTest()",
      "151": "GridContainerTest::::threeColumnsWithAdjacentWideCellsTest()",
      "152": "GridContainerTest::::threeColumnsWithAdjacentWideCellsTest()",
      "153": "GridContainerTest::::threeColumnsWithAdjacentWideCellsTest()",
      "154": "GridContainerTest::::threeColumnsWithAdjacentWideCellsTest()",
      "155": "GridContainerTest::::threeColumnsWithAdjacentWideCellsTest()",
      "156": "GridContainerTest::::threeColumnsWithAdjacentWideCellsTest()",
      "157": "GridContainerTest::::threeColumnsWithAdjacentWideCellsTest()",
      "158": "GridContainerTest::::threeColumnsWithAdjacentWideCellsTest()",
      "159": "GridContainerTest::::threeColumnsWithAdjacentWideCellsTest()",
      "160": "GridContainerTest::::threeColumnsWithAdjacentWideCellsTest()",
      "161": "GridContainerTest::::threeColumnsWithAdjacentWideCellsTest()",
      "162": "GridContainerTest::::threeColumnsWithAdjacentWideCellsTest()",
      "163": "GridContainerTest::::threeColumnsWithAdjacentWideCellsTest()",
      "164": "GridContainerTest::::threeColumnsWithAdjacentWideCellsTest()",
      "165": "GridContainerTest::::threeColumnsWithAdjacentWideCellsTest()",
      "166": "GridContainerTest::::threeColumnsWithAdjacentWideCellsTest()",
      "167": "GridContainerTest::::threeColumnsWithAdjacentWideCellsTest()",
      "168": "GridContainerTest::::threeColumnsWithAdjacentWideCellsTest()",
      "169": "GridContainerTest::::threeColumnsWithAdjacentWideCellsTest()",
      "170": "GridContainerTest::::threeColumnsWithAdjacentWideCellsTest()",
      "171": "GridContainerTest::::threeColumnsWithAdjacentWideCellsTest()",
      "172": "GridContainerTest::::threeColumnsWithAdjacentWideCellsTest()",
      "173": "GridContainerTest::::threeColumnsWithAdjacentWideCellsTest()",
      "174": "GridContainerTest::::threeColumnsWithAdjacentWideCellsTest()",
      "175": "GridContainerTest::::threeColumnsWithAdjacentWideCellsTest()",
      "176": "GridContainerTest::::threeColumnsWithAdjacentWideCellsTest()",
      "177": "GridContainerTest::::threeColumnsWithAdjacentWideCellsTest()",
      "178": "GridContainerTest::::threeColumnsWithAdjacentWideCellsTest()",
      "179": "GridContainerTest::::threeColumnsWithAdjacentWideCellsTest()",
      "181": "GridContainerTest::::basicThreeColumnsWithCustomRowIndexesTest()",
      "182": "GridContainerTest::::basicThreeColumnsWithCustomRowIndexesTest()",
      "183": "GridContainerTest::::basicThreeColumnsWithCustomRowIndexesTest()",
      "184": "GridContainerTest::::basicThreeColumnsWithCustomRowIndexesTest()",
      "185": "GridContainerTest::::basicThreeColumnsWithCustomRowIndexesTest()",
      "186": "GridContainerTest::::basicThreeColumnsWithCustomRowIndexesTest()",
      "187": "GridContainerTest::::basicThreeColumnsWithCustomRowIndexesTest()",
      "188": "GridContainerTest::::basicThreeColumnsWithCustomRowIndexesTest()",
      "189": "GridContainerTest::::basicThreeColumnsWithCustomRowIndexesTest()",
      "190": "GridContainerTest::::basicThreeColumnsWithCustomRowIndexesTest()",
      "191": "GridContainerTest::::basicThreeColumnsWithCustomRowIndexesTest()",
      "192": "GridContainerTest::::basicThreeColumnsWithCustomRowIndexesTest()",
      "193": "GridContainerTest::::basicThreeColumnsWithCustomRowIndexesTest()",
      "194": "GridContainerTest::::basicThreeColumnsWithCustomRowIndexesTest()",
      "195": "GridContainerTest::::basicThreeColumnsWithCustomRowIndexesTest()",
      "196": "GridContainerTest::::basicThreeColumnsWithCustomRowIndexesTest()",
      "197": "GridContainerTest::::basicThreeColumnsWithCustomRowIndexesTest()",
      "198": "GridContainerTest::::basicThreeColumnsWithCustomRowIndexesTest()",
      "199": "GridContainerTest::::basicThreeColumnsWithCustomRowIndexesTest()",
      "200": "GridContainerTest::::basicThreeColumnsWithCustomRowIndexesTest()",
      "201": "GridContainerTest::::basicThreeColumnsWithCustomRowIndexesTest()",
      "202": "GridContainerTest::::basicThreeColumnsWithCustomRowIndexesTest()",
      "203": "GridContainerTest::::basicThreeColumnsWithCustomRowIndexesTest()",
      "204": "GridContainerTest::::basicThreeColumnsWithCustomRowIndexesTest()",
      "205": "GridContainerTest::::basicThreeColumnsWithCustomRowIndexesTest()",
      "206": "GridContainerTest::::basicThreeColumnsWithCustomRowIndexesTest()",
      "207": "GridContainerTest::::basicThreeColumnsWithCustomRowIndexesTest()",
      "208": "GridContainerTest::::basicThreeColumnsWithCustomRowIndexesTest()",
      "210": "GridContainerTest::::basicThreeColumnsWithCustomColumnAndRowIndexesTest()",
      "211": "GridContainerTest::::basicThreeColumnsWithCustomColumnAndRowIndexesTest()",
      "212": "GridContainerTest::::basicThreeColumnsWithCustomColumnAndRowIndexesTest()",
      "213": "GridContainerTest::::basicThreeColumnsWithCustomColumnAndRowIndexesTest()",
      "214": "GridContainerTest::::basicThreeColumnsWithCustomColumnAndRowIndexesTest()",
      "215": "GridContainerTest::::basicThreeColumnsWithCustomColumnAndRowIndexesTest()",
      "216": "GridContainerTest::::basicThreeColumnsWithCustomColumnAndRowIndexesTest()",
      "217": "GridContainerTest::::basicThreeColumnsWithCustomColumnAndRowIndexesTest()",
      "218": "GridContainerTest::::basicThreeColumnsWithCustomColumnAndRowIndexesTest()",
      "219": "GridContainerTest::::basicThreeColumnsWithCustomColumnAndRowIndexesTest()",
      "220": "GridContainerTest::::basicThreeColumnsWithCustomColumnAndRowIndexesTest()",
      "221": "GridContainerTest::::basicThreeColumnsWithCustomColumnAndRowIndexesTest()",
      "222": "GridContainerTest::::basicThreeColumnsWithCustomColumnAndRowIndexesTest()",
      "223": "GridContainerTest::::basicThreeColumnsWithCustomColumnAndRowIndexesTest()",
      "224": "GridContainerTest::::basicThreeColumnsWithCustomColumnAndRowIndexesTest()",
      "225": "GridContainerTest::::basicThreeColumnsWithCustomColumnAndRowIndexesTest()",
      "226": "GridContainerTest::::basicThreeColumnsWithCustomColumnAndRowIndexesTest()",
      "227": "GridContainerTest::::basicThreeColumnsWithCustomColumnAndRowIndexesTest()",
      "228": "GridContainerTest::::basicThreeColumnsWithCustomColumnAndRowIndexesTest()",
      "229": "GridContainerTest::::basicThreeColumnsWithCustomColumnAndRowIndexesTest()",
      "230": "GridContainerTest::::basicThreeColumnsWithCustomColumnAndRowIndexesTest()",
      "231": "GridContainerTest::::basicThreeColumnsWithCustomColumnAndRowIndexesTest()",
      "232": "GridContainerTest::::basicThreeColumnsWithCustomColumnAndRowIndexesTest()",
      "233": "GridContainerTest::::basicThreeColumnsWithCustomColumnAndRowIndexesTest()",
      "234": "GridContainerTest::::basicThreeColumnsWithCustomColumnAndRowIndexesTest()",
      "235": "GridContainerTest::::basicThreeColumnsWithCustomColumnAndRowIndexesTest()",
      "236": "GridContainerTest::::basicThreeColumnsWithCustomColumnAndRowIndexesTest()",
      "237": "GridContainerTest::::basicThreeColumnsWithCustomColumnAndRowIndexesTest()",
      "238": "GridContainerTest::::basicThreeColumnsWithCustomColumnAndRowIndexesTest()",
      "240": "GridContainerTest::::basicThreeColumnsWithReversedIndexesTest()",
      "241": "GridContainerTest::::basicThreeColumnsWithReversedIndexesTest()",
      "242": "GridContainerTest::::basicThreeColumnsWithReversedIndexesTest()",
      "243": "GridContainerTest::::basicThreeColumnsWithReversedIndexesTest()",
      "244": "GridContainerTest::::basicThreeColumnsWithReversedIndexesTest()",
      "245": "GridContainerTest::::basicThreeColumnsWithReversedIndexesTest()",
      "246": "GridContainerTest::::basicThreeColumnsWithReversedIndexesTest()",
      "247": "GridContainerTest::::basicThreeColumnsWithReversedIndexesTest()",
      "248": "GridContainerTest::::basicThreeColumnsWithReversedIndexesTest()",
      "249": "GridContainerTest::::basicThreeColumnsWithReversedIndexesTest()",
      "250": "GridContainerTest::::basicThreeColumnsWithReversedIndexesTest()",
      "251": "GridContainerTest::::basicThreeColumnsWithReversedIndexesTest()",
      "252": "GridContainerTest::::basicThreeColumnsWithReversedIndexesTest()",
      "253": "GridContainerTest::::basicThreeColumnsWithReversedIndexesTest()",
      "254": "GridContainerTest::::basicThreeColumnsWithReversedIndexesTest()",
      "255": "GridContainerTest::::basicThreeColumnsWithReversedIndexesTest()",
      "256": "GridContainerTest::::basicThreeColumnsWithReversedIndexesTest()",
      "257": "GridContainerTest::::basicThreeColumnsWithReversedIndexesTest()",
      "258": "GridContainerTest::::basicThreeColumnsWithReversedIndexesTest()",
      "259": "GridContainerTest::::basicThreeColumnsWithReversedIndexesTest()",
      "260": "GridContainerTest::::basicThreeColumnsWithReversedIndexesTest()",
      "261": "GridContainerTest::::basicThreeColumnsWithReversedIndexesTest()",
      "262": "GridContainerTest::::basicThreeColumnsWithReversedIndexesTest()",
      "263": "GridContainerTest::::basicThreeColumnsWithReversedIndexesTest()",
      "264": "GridContainerTest::::basicThreeColumnsWithReversedIndexesTest()",
      "265": "GridContainerTest::::basicThreeColumnsWithReversedIndexesTest()",
      "266": "GridContainerTest::::basicThreeColumnsWithReversedIndexesTest()",
      "267": "GridContainerTest::::basicThreeColumnsWithReversedIndexesTest()",
      "268": "GridContainerTest::::basicThreeColumnsWithReversedIndexesTest()",
      "269": "GridContainerTest::::basicThreeColumnsWithReversedIndexesTest()",
      "270": "GridContainerTest::::basicThreeColumnsWithReversedIndexesTest()",
      "271": "GridContainerTest::::basicThreeColumnsWithReversedIndexesTest()",
      "272": "GridContainerTest::::basicThreeColumnsWithReversedIndexesTest()",
      "273": "GridContainerTest::::basicThreeColumnsWithReversedIndexesTest()",
      "274": "GridContainerTest::::basicThreeColumnsWithReversedIndexesTest()",
      "275": "GridContainerTest::::basicThreeColumnsWithReversedIndexesTest()",
      "276": "GridContainerTest::::basicThreeColumnsWithReversedIndexesTest()",
      "278": "GridContainerTest::::basicThreeColumnsWithoutColumnEndTest()",
      "279": "GridContainerTest::::basicThreeColumnsWithoutColumnEndTest()",
      "280": "GridContainerTest::::basicThreeColumnsWithoutColumnEndTest()",
      "281": "GridContainerTest::::basicThreeColumnsWithoutColumnEndTest()",
      "282": "GridContainerTest::::basicThreeColumnsWithoutColumnEndTest()",
      "283": "GridContainerTest::::basicThreeColumnsWithoutColumnEndTest()",
      "284": "GridContainerTest::::basicThreeColumnsWithoutColumnEndTest()",
      "285": "GridContainerTest::::basicThreeColumnsWithoutColumnEndTest()",
      "286": "GridContainerTest::::basicThreeColumnsWithoutColumnEndTest()",
      "287": "GridContainerTest::::basicThreeColumnsWithoutColumnEndTest()",
      "288": "GridContainerTest::::basicThreeColumnsWithoutColumnEndTest()",
      "289": "GridContainerTest::::basicThreeColumnsWithoutColumnEndTest()",
      "290": "GridContainerTest::::basicThreeColumnsWithoutColumnEndTest()",
      "291": "GridContainerTest::::basicThreeColumnsWithoutColumnEndTest()",
      "292": "GridContainerTest::::basicThreeColumnsWithoutColumnEndTest()",
      "293": "GridContainerTest::::basicThreeColumnsWithoutColumnEndTest()",
      "294": "GridContainerTest::::basicThreeColumnsWithoutColumnEndTest()",
      "295": "GridContainerTest::::basicThreeColumnsWithoutColumnEndTest()",
      "296": "GridContainerTest::::basicThreeColumnsWithoutColumnEndTest()",
      "297": "GridContainerTest::::basicThreeColumnsWithoutColumnEndTest()",
      "298": "GridContainerTest::::basicThreeColumnsWithoutColumnEndTest()",
      "299": "GridContainerTest::::basicThreeColumnsWithoutColumnEndTest()",
      "300": "GridContainerTest::::basicThreeColumnsWithoutColumnEndTest()",
      "301": "GridContainerTest::::basicThreeColumnsWithoutColumnEndTest()",
      "302": "GridContainerTest::::basicThreeColumnsWithoutColumnEndTest()",
      "303": "GridContainerTest::::basicThreeColumnsWithoutColumnEndTest()",
      "304": "GridContainerTest::::basicThreeColumnsWithoutColumnEndTest()",
      "305": "GridContainerTest::::basicThreeColumnsWithoutColumnEndTest()",
      "306": "GridContainerTest::::basicThreeColumnsWithoutColumnEndTest()",
      "307": "GridContainerTest::::basicThreeColumnsWithoutColumnEndTest()",
      "308": "GridContainerTest::::basicThreeColumnsWithoutColumnEndTest()",
      "309": "GridContainerTest::::basicThreeColumnsWithoutColumnEndTest()",
      "310": "GridContainerTest::::basicThreeColumnsWithoutColumnEndTest()",
      "311": "GridContainerTest::::basicThreeColumnsWithoutColumnEndTest()",
      "312": "GridContainerTest::::basicThreeColumnsWithoutColumnEndTest()",
      "314": "GridContainerTest::::fixedColumnRowGoesFirstTest()",
      "315": "GridContainerTest::::fixedColumnRowGoesFirstTest()",
      "316": "GridContainerTest::::fixedColumnRowGoesFirstTest()",
      "317": "GridContainerTest::::fixedColumnRowGoesFirstTest()",
      "318": "GridContainerTest::::fixedColumnRowGoesFirstTest()",
      "319": "GridContainerTest::::fixedColumnRowGoesFirstTest()",
      "320": "GridContainerTest::::fixedColumnRowGoesFirstTest()",
      "321": "GridContainerTest::::fixedColumnRowGoesFirstTest()",
      "322": "GridContainerTest::::fixedColumnRowGoesFirstTest()",
      "323": "GridContainerTest::::fixedColumnRowGoesFirstTest()",
      "324": "GridContainerTest::::fixedColumnRowGoesFirstTest()",
      "325": "GridContainerTest::::fixedColumnRowGoesFirstTest()",
      "326": "GridContainerTest::::fixedColumnRowGoesFirstTest()",
      "327": "GridContainerTest::::fixedColumnRowGoesFirstTest()",
      "328": "GridContainerTest::::fixedColumnRowGoesFirstTest()",
      "329": "GridContainerTest::::fixedColumnRowGoesFirstTest()",
      "330": "GridContainerTest::::fixedColumnRowGoesFirstTest()",
      "331": "GridContainerTest::::fixedColumnRowGoesFirstTest()",
      "332": "GridContainerTest::::fixedColumnRowGoesFirstTest()",
      "333": "GridContainerTest::::fixedColumnRowGoesFirstTest()",
      "334": "GridContainerTest::::fixedColumnRowGoesFirstTest()",
      "335": "GridContainerTest::::fixedColumnRowGoesFirstTest()",
      "336": "GridContainerTest::::fixedColumnRowGoesFirstTest()",
      "337": "GridContainerTest::::fixedColumnRowGoesFirstTest()",
      "338": "GridContainerTest::::fixedColumnRowGoesFirstTest()",
      "339": "GridContainerTest::::fixedColumnRowGoesFirstTest()",
      "340": "GridContainerTest::::fixedColumnRowGoesFirstTest()",
      "341": "GridContainerTest::::fixedColumnRowGoesFirstTest()",
      "342": "GridContainerTest::::fixedColumnRowGoesFirstTest()",
      "343": "GridContainerTest::::fixedColumnRowGoesFirstTest()",
      "344": "GridContainerTest::::fixedColumnRowGoesFirstTest()",
      "345": "GridContainerTest::::fixedColumnRowGoesFirstTest()",
      "346": "GridContainerTest::::fixedColumnRowGoesFirstTest()",
      "347": "GridContainerTest::::fixedColumnRowGoesFirstTest()",
      "348": "GridContainerTest::::fixedColumnRowGoesFirstTest()",
      "349": "GridContainerTest::::fixedColumnRowGoesFirstTest()",
      "350": "GridContainerTest::::fixedColumnRowGoesFirstTest()",
      "351": "GridContainerTest::::fixedColumnRowGoesFirstTest()",
      "352": "GridContainerTest::::fixedColumnRowGoesFirstTest()",
      "353": "GridContainerTest::::fixedColumnRowGoesFirstTest()",
      "354": "GridContainerTest::::fixedColumnRowGoesFirstTest()",
      "355": "GridContainerTest::::fixedColumnRowGoesFirstTest()",
      "356": "GridContainerTest::::fixedColumnRowGoesFirstTest()",
      "357": "GridContainerTest::::fixedColumnRowGoesFirstTest()",
      "358": "GridContainerTest::::fixedColumnRowGoesFirstTest()",
      "359": "GridContainerTest::::fixedColumnRowGoesFirstTest()",
      "360": "GridContainerTest::::fixedColumnRowGoesFirstTest()",
      "361": "GridContainerTest::::fixedColumnRowGoesFirstTest()",
      "363": "GridContainerTest::::overlapWithExistingColumnTest()",
      "364": "GridContainerTest::::overlapWithExistingColumnTest()",
      "365": "GridContainerTest::::overlapWithExistingColumnTest()",
      "366": "GridContainerTest::::overlapWithExistingColumnTest()",
      "367": "GridContainerTest::::overlapWithExistingColumnTest()",
      "368": "GridContainerTest::::overlapWithExistingColumnTest()",
      "369": "GridContainerTest::::overlapWithExistingColumnTest()",
      "370": "GridContainerTest::::overlapWithExistingColumnTest()",
      "371": "GridContainerTest::::overlapWithExistingColumnTest()",
      "372": "GridContainerTest::::overlapWithExistingColumnTest()",
      "373": "GridContainerTest::::overlapWithExistingColumnTest()",
      "374": "GridContainerTest::::overlapWithExistingColumnTest()",
      "375": "GridContainerTest::::overlapWithExistingColumnTest()",
      "376": "GridContainerTest::::overlapWithExistingColumnTest()",
      "377": "GridContainerTest::::overlapWithExistingColumnTest()",
      "378": "GridContainerTest::::overlapWithExistingColumnTest()",
      "379": "GridContainerTest::::overlapWithExistingColumnTest()",
      "380": "GridContainerTest::::overlapWithExistingColumnTest()",
      "381": "GridContainerTest::::overlapWithExistingColumnTest()",
      "382": "GridContainerTest::::overlapWithExistingColumnTest()",
      "383": "GridContainerTest::::overlapWithExistingColumnTest()",
      "384": "GridContainerTest::::overlapWithExistingColumnTest()",
      "385": "GridContainerTest::::overlapWithExistingColumnTest()",
      "386": "GridContainerTest::::overlapWithExistingColumnTest()",
      "387": "GridContainerTest::::overlapWithExistingColumnTest()",
      "388": "GridContainerTest::::overlapWithExistingColumnTest()",
      "389": "GridContainerTest::::overlapWithExistingColumnTest()",
      "390": "GridContainerTest::::overlapWithExistingColumnTest()",
      "391": "GridContainerTest::::overlapWithExistingColumnTest()",
      "392": "GridContainerTest::::overlapWithExistingColumnTest()",
      "393": "GridContainerTest::::overlapWithExistingColumnTest()",
      "394": "GridContainerTest::::overlapWithExistingColumnTest()",
      "395": "GridContainerTest::::overlapWithExistingColumnTest()",
      "396": "GridContainerTest::::overlapWithExistingColumnTest()",
      "397": "GridContainerTest::::overlapWithExistingColumnTest()",
      "399": "GridContainerTest::::basicThreeColumnsWithPtAndPercentTest()",
      "400": "GridContainerTest::::basicThreeColumnsWithPtAndPercentTest()",
      "401": "GridContainerTest::::basicThreeColumnsWithPtAndPercentTest()",
      "402": "GridContainerTest::::basicThreeColumnsWithPtAndPercentTest()",
      "403": "GridContainerTest::::basicThreeColumnsWithPtAndPercentTest()",
      "404": "GridContainerTest::::basicThreeColumnsWithPtAndPercentTest()",
      "405": "GridContainerTest::::basicThreeColumnsWithPtAndPercentTest()",
      "406": "GridContainerTest::::basicThreeColumnsWithPtAndPercentTest()",
      "407": "GridContainerTest::::basicThreeColumnsWithPtAndPercentTest()",
      "408": "GridContainerTest::::basicThreeColumnsWithPtAndPercentTest()",
      "409": "GridContainerTest::::basicThreeColumnsWithPtAndPercentTest()",
      "410": "GridContainerTest::::basicThreeColumnsWithPtAndPercentTest()",
      "411": "GridContainerTest::::basicThreeColumnsWithPtAndPercentTest()",
      "412": "GridContainerTest::::basicThreeColumnsWithPtAndPercentTest()",
      "413": "GridContainerTest::::basicThreeColumnsWithPtAndPercentTest()",
      "414": "GridContainerTest::::basicThreeColumnsWithPtAndPercentTest()",
      "415": "GridContainerTest::::basicThreeColumnsWithPtAndPercentTest()",
      "416": "GridContainerTest::::basicThreeColumnsWithPtAndPercentTest()",
      "417": "GridContainerTest::::basicThreeColumnsWithPtAndPercentTest()",
      "418": "GridContainerTest::::basicThreeColumnsWithPtAndPercentTest()",
      "420": "GridContainerTest::::thirdColumnNotLayoutedTest()",
      "421": "GridContainerTest::::thirdColumnNotLayoutedTest()",
      "422": "GridContainerTest::::thirdColumnNotLayoutedTest()",
      "423": "GridContainerTest::::thirdColumnNotLayoutedTest()",
      "424": "GridContainerTest::::thirdColumnNotLayoutedTest()",
      "425": "GridContainerTest::::thirdColumnNotLayoutedTest()",
      "426": "GridContainerTest::::thirdColumnNotLayoutedTest()",
      "427": "GridContainerTest::::thirdColumnNotLayoutedTest()",
      "428": "GridContainerTest::::thirdColumnNotLayoutedTest()",
      "429": "GridContainerTest::::thirdColumnNotLayoutedTest()",
      "430": "GridContainerTest::::thirdColumnNotLayoutedTest()",
      "431": "GridContainerTest::::thirdColumnNotLayoutedTest()",
      "432": "GridContainerTest::::thirdColumnNotLayoutedTest()",
      "433": "GridContainerTest::::thirdColumnNotLayoutedTest()",
      "434": "GridContainerTest::::thirdColumnNotLayoutedTest()",
      "435": "GridContainerTest::::thirdColumnNotLayoutedTest()",
      "436": "GridContainerTest::::thirdColumnNotLayoutedTest()",
      "437": "GridContainerTest::::thirdColumnNotLayoutedTest()",
      "438": "GridContainerTest::::thirdColumnNotLayoutedTest()",
      "439": "GridContainerTest::::thirdColumnNotLayoutedTest()",
      "440": "GridContainerTest::::thirdColumnNotLayoutedTest()",
      "442": "GridContainerTest::::threeColumnsWithSquareAndVerticalCellsTest()",
      "443": "GridContainerTest::::threeColumnsWithSquareAndVerticalCellsTest()",
      "444": "GridContainerTest::::threeColumnsWithSquareAndVerticalCellsTest()",
      "445": "GridContainerTest::::threeColumnsWithSquareAndVerticalCellsTest()",
      "446": "GridContainerTest::::threeColumnsWithSquareAndVerticalCellsTest()",
      "447": "GridContainerTest::::threeColumnsWithSquareAndVerticalCellsTest()",
      "448": "GridContainerTest::::threeColumnsWithSquareAndVerticalCellsTest()",
      "449": "GridContainerTest::::threeColumnsWithSquareAndVerticalCellsTest()",
      "450": "GridContainerTest::::threeColumnsWithSquareAndVerticalCellsTest()",
      "451": "GridContainerTest::::threeColumnsWithSquareAndVerticalCellsTest()",
      "452": "GridContainerTest::::threeColumnsWithSquareAndVerticalCellsTest()",
      "453": "GridContainerTest::::threeColumnsWithSquareAndVerticalCellsTest()",
      "454": "GridContainerTest::::threeColumnsWithSquareAndVerticalCellsTest()",
      "455": "GridContainerTest::::threeColumnsWithSquareAndVerticalCellsTest()",
      "456": "GridContainerTest::::threeColumnsWithSquareAndVerticalCellsTest()",
      "457": "GridContainerTest::::threeColumnsWithSquareAndVerticalCellsTest()",
      "458": "GridContainerTest::::threeColumnsWithSquareAndVerticalCellsTest()",
      "459": "GridContainerTest::::threeColumnsWithSquareAndVerticalCellsTest()",
      "460": "GridContainerTest::::threeColumnsWithSquareAndVerticalCellsTest()",
      "461": "GridContainerTest::::threeColumnsWithSquareAndVerticalCellsTest()",
      "462": "GridContainerTest::::threeColumnsWithSquareAndVerticalCellsTest()",
      "463": "GridContainerTest::::threeColumnsWithSquareAndVerticalCellsTest()",
      "464": "GridContainerTest::::threeColumnsWithSquareAndVerticalCellsTest()",
      "465": "GridContainerTest::::threeColumnsWithSquareAndVerticalCellsTest()",
      "466": "GridContainerTest::::threeColumnsWithSquareAndVerticalCellsTest()",
      "467": "GridContainerTest::::threeColumnsWithSquareAndVerticalCellsTest()",
      "468": "GridContainerTest::::threeColumnsWithSquareAndVerticalCellsTest()",
      "469": "GridContainerTest::::threeColumnsWithSquareAndVerticalCellsTest()",
      "470": "GridContainerTest::::threeColumnsWithSquareAndVerticalCellsTest()",
      "471": "GridContainerTest::::threeColumnsWithSquareAndVerticalCellsTest()",
      "472": "GridContainerTest::::threeColumnsWithSquareAndVerticalCellsTest()",
      "473": "GridContainerTest::::threeColumnsWithSquareAndVerticalCellsTest()",
      "474": "GridContainerTest::::threeColumnsWithSquareAndVerticalCellsTest()",
      "475": "GridContainerTest::::threeColumnsWithSquareAndVerticalCellsTest()",
      "477": "GridContainerTest::::threeColumnsWithSquareCellAndCellWithExplicitHeightTest()",
      "478": "GridContainerTest::::threeColumnsWithSquareCellAndCellWithExplicitHeightTest()",
      "479": "GridContainerTest::::threeColumnsWithSquareCellAndCellWithExplicitHeightTest()",
      "480": "GridContainerTest::::threeColumnsWithSquareCellAndCellWithExplicitHeightTest()",
      "481": "GridContainerTest::::threeColumnsWithSquareCellAndCellWithExplicitHeightTest()",
      "482": "GridContainerTest::::threeColumnsWithSquareCellAndCellWithExplicitHeightTest()",
      "483": "GridContainerTest::::threeColumnsWithSquareCellAndCellWithExplicitHeightTest()",
      "484": "GridContainerTest::::threeColumnsWithSquareCellAndCellWithExplicitHeightTest()",
      "485": "GridContainerTest::::threeColumnsWithSquareCellAndCellWithExplicitHeightTest()",
      "486": "GridContainerTest::::threeColumnsWithSquareCellAndCellWithExplicitHeightTest()",
      "487": "GridContainerTest::::threeColumnsWithSquareCellAndCellWithExplicitHeightTest()",
      "488": "GridContainerTest::::threeColumnsWithSquareCellAndCellWithExplicitHeightTest()",
      "489": "GridContainerTest::::threeColumnsWithSquareCellAndCellWithExplicitHeightTest()",
      "490": "GridContainerTest::::threeColumnsWithSquareCellAndCellWithExplicitHeightTest()",
      "491": "GridContainerTest::::threeColumnsWithSquareCellAndCellWithExplicitHeightTest()",
      "492": "GridContainerTest::::threeColumnsWithSquareCellAndCellWithExplicitHeightTest()",
      "493": "GridContainerTest::::threeColumnsWithSquareCellAndCellWithExplicitHeightTest()",
      "494": "GridContainerTest::::threeColumnsWithSquareCellAndCellWithExplicitHeightTest()",
      "495": "GridContainerTest::::threeColumnsWithSquareCellAndCellWithExplicitHeightTest()",
      "496": "GridContainerTest::::threeColumnsWithSquareCellAndCellWithExplicitHeightTest()",
      "497": "GridContainerTest::::threeColumnsWithSquareCellAndCellWithExplicitHeightTest()",
      "498": "GridContainerTest::::threeColumnsWithSquareCellAndCellWithExplicitHeightTest()",
      "499": "GridContainerTest::::threeColumnsWithSquareCellAndCellWithExplicitHeightTest()",
      "500": "GridContainerTest::::threeColumnsWithSquareCellAndCellWithExplicitHeightTest()",
      "501": "GridContainerTest::::threeColumnsWithSquareCellAndCellWithExplicitHeightTest()",
      "502": "GridContainerTest::::threeColumnsWithSquareCellAndCellWithExplicitHeightTest()",
      "503": "GridContainerTest::::threeColumnsWithSquareCellAndCellWithExplicitHeightTest()",
      "504": "GridContainerTest::::threeColumnsWithSquareCellAndCellWithExplicitHeightTest()",
      "505": "GridContainerTest::::threeColumnsWithSquareCellAndCellWithExplicitHeightTest()",
      "506": "GridContainerTest::::threeColumnsWithSquareCellAndCellWithExplicitHeightTest()",
      "508": "GridContainerTest::::threeColumnsWithVerticalCellWithSeveralNeighboursToTheLeftTest()",
      "509": "GridContainerTest::::threeColumnsWithVerticalCellWithSeveralNeighboursToTheLeftTest()",
      "510": "GridContainerTest::::threeColumnsWithVerticalCellWithSeveralNeighboursToTheLeftTest()",
      "511": "GridContainerTest::::threeColumnsWithVerticalCellWithSeveralNeighboursToTheLeftTest()",
      "512": "GridContainerTest::::threeColumnsWithVerticalCellWithSeveralNeighboursToTheLeftTest()",
      "513": "GridContainerTest::::threeColumnsWithVerticalCellWithSeveralNeighboursToTheLeftTest()",
      "514": "GridContainerTest::::threeColumnsWithVerticalCellWithSeveralNeighboursToTheLeftTest()",
      "515": "GridContainerTest::::threeColumnsWithVerticalCellWithSeveralNeighboursToTheLeftTest()",
      "516": "GridContainerTest::::threeColumnsWithVerticalCellWithSeveralNeighboursToTheLeftTest()",
      "517": "GridContainerTest::::threeColumnsWithVerticalCellWithSeveralNeighboursToTheLeftTest()",
      "518": "GridContainerTest::::threeColumnsWithVerticalCellWithSeveralNeighboursToTheLeftTest()",
      "519": "GridContainerTest::::threeColumnsWithVerticalCellWithSeveralNeighboursToTheLeftTest()",
      "520": "GridContainerTest::::threeColumnsWithVerticalCellWithSeveralNeighboursToTheLeftTest()",
      "521": "GridContainerTest::::threeColumnsWithVerticalCellWithSeveralNeighboursToTheLeftTest()",
      "522": "GridContainerTest::::threeColumnsWithVerticalCellWithSeveralNeighboursToTheLeftTest()",
      "523": "GridContainerTest::::threeColumnsWithVerticalCellWithSeveralNeighboursToTheLeftTest()",
      "524": "GridContainerTest::::threeColumnsWithVerticalCellWithSeveralNeighboursToTheLeftTest()",
      "525": "GridContainerTest::::threeColumnsWithVerticalCellWithSeveralNeighboursToTheLeftTest()",
      "526": "GridContainerTest::::threeColumnsWithVerticalCellWithSeveralNeighboursToTheLeftTest()",
      "527": "GridContainerTest::::threeColumnsWithVerticalCellWithSeveralNeighboursToTheLeftTest()",
      "528": "GridContainerTest::::threeColumnsWithVerticalCellWithSeveralNeighboursToTheLeftTest()",
      "529": "GridContainerTest::::threeColumnsWithVerticalCellWithSeveralNeighboursToTheLeftTest()",
      "530": "GridContainerTest::::threeColumnsWithVerticalCellWithSeveralNeighboursToTheLeftTest()",
      "531": "GridContainerTest::::threeColumnsWithVerticalCellWithSeveralNeighboursToTheLeftTest()",
      "532": "GridContainerTest::::threeColumnsWithVerticalCellWithSeveralNeighboursToTheLeftTest()",
      "533": "GridContainerTest::::threeColumnsWithVerticalCellWithSeveralNeighboursToTheLeftTest()",
      "534": "GridContainerTest::::threeColumnsWithVerticalCellWithSeveralNeighboursToTheLeftTest()",
      "535": "GridContainerTest::::threeColumnsWithVerticalCellWithSeveralNeighboursToTheLeftTest()",
      "536": "GridContainerTest::::threeColumnsWithVerticalCellWithSeveralNeighboursToTheLeftTest()",
      "537": "GridContainerTest::::threeColumnsWithVerticalCellWithSeveralNeighboursToTheLeftTest()",
      "538": "GridContainerTest::::threeColumnsWithVerticalCellWithSeveralNeighboursToTheLeftTest()",
      "539": "GridContainerTest::::threeColumnsWithVerticalCellWithSeveralNeighboursToTheLeftTest()",
      "540": "GridContainerTest::::threeColumnsWithVerticalCellWithSeveralNeighboursToTheLeftTest()",
      "542": "GridContainerTest::::bigCellMinContentTest()",
      "543": "GridContainerTest::::bigCellMinContentTest()",
      "544": "GridContainerTest::::bigCellMinContentTest()",
      "545": "GridContainerTest::::bigCellMinContentTest()",
      "546": "GridContainerTest::::bigCellMinContentTest()",
      "547": "GridContainerTest::::bigCellMinContentTest()",
      "548": "GridContainerTest::::bigCellMinContentTest()",
      "549": "GridContainerTest::::bigCellMinContentTest()",
      "550": "GridContainerTest::::bigCellMinContentTest()",
      "551": "GridContainerTest::::bigCellMinContentTest()",
      "552": "GridContainerTest::::bigCellMinContentTest()",
      "553": "GridContainerTest::::bigCellMinContentTest()",
      "554": "GridContainerTest::::bigCellMinContentTest()",
      "555": "GridContainerTest::::bigCellMinContentTest()",
      "556": "GridContainerTest::::bigCellMinContentTest()",
      "557": "GridContainerTest::::bigCellMinContentTest()",
      "558": "GridContainerTest::::bigCellMinContentTest()",
      "559": "GridContainerTest::::bigCellMinContentTest()",
      "561": "GridContainerTest::::columnRowGapTest()",
      "562": "GridContainerTest::::columnRowGapTest()",
      "563": "GridContainerTest::::columnRowGapTest()",
      "564": "GridContainerTest::::columnRowGapTest()",
      "565": "GridContainerTest::::columnRowGapTest()",
      "566": "GridContainerTest::::columnRowGapTest()",
      "567": "GridContainerTest::::columnRowGapTest()",
      "568": "GridContainerTest::::columnRowGapTest()",
      "569": "GridContainerTest::::columnRowGapTest()",
      "570": "GridContainerTest::::columnRowGapTest()",
      "571": "GridContainerTest::::columnRowGapTest()",
      "572": "GridContainerTest::::columnRowGapTest()",
      "573": "GridContainerTest::::columnRowGapTest()",
      "574": "GridContainerTest::::columnRowGapTest()",
      "575": "GridContainerTest::::columnRowGapTest()",
      "576": "GridContainerTest::::columnRowGapTest()",
      "577": "GridContainerTest::::columnRowGapTest()",
      "578": "GridContainerTest::::columnRowGapTest()",
      "579": "GridContainerTest::::columnRowGapTest()",
      "580": "GridContainerTest::::columnRowGapTest()",
      "581": "GridContainerTest::::columnRowGapTest()",
      "582": "GridContainerTest::::columnRowGapTest()",
      "583": "GridContainerTest::::columnRowGapTest()",
      "584": "GridContainerTest::::columnRowGapTest()",
      "585": "GridContainerTest::::columnRowGapTest()",
      "586": "GridContainerTest::::columnRowGapTest()",
      "588": "GridContainerTest::::fewBigCellsWithGapTest()",
      "589": "GridContainerTest::::fewBigCellsWithGapTest()",
      "590": "GridContainerTest::::fewBigCellsWithGapTest()",
      "591": "GridContainerTest::::fewBigCellsWithGapTest()",
      "592": "GridContainerTest::::fewBigCellsWithGapTest()",
      "593": "GridContainerTest::::fewBigCellsWithGapTest()",
      "594": "GridContainerTest::::fewBigCellsWithGapTest()",
      "595": "GridContainerTest::::fewBigCellsWithGapTest()",
      "596": "GridContainerTest::::fewBigCellsWithGapTest()",
      "597": "GridContainerTest::::fewBigCellsWithGapTest()",
      "598": "GridContainerTest::::fewBigCellsWithGapTest()",
      "599": "GridContainerTest::::fewBigCellsWithGapTest()",
      "600": "GridContainerTest::::fewBigCellsWithGapTest()",
      "601": "GridContainerTest::::fewBigCellsWithGapTest()",
      "602": "GridContainerTest::::fewBigCellsWithGapTest()",
      "603": "GridContainerTest::::fewBigCellsWithGapTest()",
      "604": "GridContainerTest::::fewBigCellsWithGapTest()",
      "605": "GridContainerTest::::fewBigCellsWithGapTest()",
      "606": "GridContainerTest::::fewBigCellsWithGapTest()",
      "607": "GridContainerTest::::fewBigCellsWithGapTest()",
      "608": "GridContainerTest::::fewBigCellsWithGapTest()",
      "609": "GridContainerTest::::fewBigCellsWithGapTest()",
      "610": "GridContainerTest::::fewBigCellsWithGapTest()",
      "611": "GridContainerTest::::fewBigCellsWithGapTest()",
      "612": "GridContainerTest::::fewBigCellsWithGapTest()",
      "613": "GridContainerTest::::fewBigCellsWithGapTest()",
      "614": "GridContainerTest::::fewBigCellsWithGapTest()",
      "615": "GridContainerTest::::fewBigCellsWithGapTest()",
      "616": "GridContainerTest::::fewBigCellsWithGapTest()",
      "617": "GridContainerTest::::fewBigCellsWithGapTest()",
      "618": "GridContainerTest::::fewBigCellsWithGapTest()",
      "619": "GridContainerTest::::fewBigCellsWithGapTest()",
      "620": "GridContainerTest::::fewBigCellsWithGapTest()",
      "621": "GridContainerTest::::fewBigCellsWithGapTest()",
      "622": "GridContainerTest::::fewBigCellsWithGapTest()",
      "623": "GridContainerTest::::fewBigCellsWithGapTest()",
      "624": "GridContainerTest::::fewBigCellsWithGapTest()",
      "625": "GridContainerTest::::fewBigCellsWithGapTest()",
      "627": "GridContainerTest::::columnFlowWithBigCellsTest()",
      "628": "GridContainerTest::::columnFlowWithBigCellsTest()",
      "629": "GridContainerTest::::columnFlowWithBigCellsTest()",
      "630": "GridContainerTest::::columnFlowWithBigCellsTest()",
      "631": "GridContainerTest::::columnFlowWithBigCellsTest()",
      "632": "GridContainerTest::::columnFlowWithBigCellsTest()",
      "633": "GridContainerTest::::columnFlowWithBigCellsTest()",
      "634": "GridContainerTest::::columnFlowWithBigCellsTest()",
      "635": "GridContainerTest::::columnFlowWithBigCellsTest()",
      "636": "GridContainerTest::::columnFlowWithBigCellsTest()",
      "637": "GridContainerTest::::columnFlowWithBigCellsTest()",
      "638": "GridContainerTest::::columnFlowWithBigCellsTest()",
      "639": "GridContainerTest::::columnFlowWithBigCellsTest()",
      "640": "GridContainerTest::::columnFlowWithBigCellsTest()",
      "641": "GridContainerTest::::columnFlowWithBigCellsTest()",
      "642": "GridContainerTest::::columnFlowWithBigCellsTest()",
      "643": "GridContainerTest::::columnFlowWithBigCellsTest()",
      "644": "GridContainerTest::::columnFlowWithBigCellsTest()",
      "645": "GridContainerTest::::columnFlowWithBigCellsTest()",
      "646": "GridContainerTest::::columnFlowWithBigCellsTest()",
      "647": "GridContainerTest::::columnFlowWithBigCellsTest()",
      "648": "GridContainerTest::::columnFlowWithBigCellsTest()",
      "649": "GridContainerTest::::columnFlowWithBigCellsTest()",
      "650": "GridContainerTest::::columnFlowWithBigCellsTest()",
      "651": "GridContainerTest::::columnFlowWithBigCellsTest()",
      "652": "GridContainerTest::::columnFlowWithBigCellsTest()",
      "653": "GridContainerTest::::columnFlowWithBigCellsTest()",
      "654": "GridContainerTest::::columnFlowWithBigCellsTest()",
      "655": "GridContainerTest::::columnFlowWithBigCellsTest()",
      "656": "GridContainerTest::::columnFlowWithBigCellsTest()",
      "657": "GridContainerTest::::columnFlowWithBigCellsTest()",
      "658": "GridContainerTest::::columnFlowWithBigCellsTest()",
      "659": "GridContainerTest::::columnFlowWithBigCellsTest()",
      "660": "GridContainerTest::::columnFlowWithBigCellsTest()",
      "661": "GridContainerTest::::columnFlowWithBigCellsTest()",
      "662": "GridContainerTest::::columnFlowWithBigCellsTest()",
      "663": "GridContainerTest::::columnFlowWithBigCellsTest()",
      "664": "GridContainerTest::::columnFlowWithBigCellsTest()",
      "665": "GridContainerTest::::columnFlowWithBigCellsTest()",
      "666": "GridContainerTest::::columnFlowWithBigCellsTest()",
      "668": "GridContainerTest::::frInRowsTest()",
      "669": "GridContainerTest::::frInRowsTest()",
      "670": "GridContainerTest::::frInRowsTest()",
      "671": "GridContainerTest::::frInRowsTest()",
      "672": "GridContainerTest::::frInRowsTest()",
      "673": "GridContainerTest::::frInRowsTest()",
      "674": "GridContainerTest::::frInRowsTest()",
      "675": "GridContainerTest::::frInRowsTest()",
      "676": "GridContainerTest::::frInRowsTest()",
      "677": "GridContainerTest::::frInRowsTest()",
      "678": "GridContainerTest::::frInRowsTest()",
      "679": "GridContainerTest::::frInRowsTest()",
      "680": "GridContainerTest::::frInRowsTest()",
      "681": "GridContainerTest::::frInRowsTest()",
      "682": "GridContainerTest::::frInRowsTest()",
      "683": "GridContainerTest::::frInRowsTest()",
      "684": "GridContainerTest::::frInRowsTest()",
      "685": "GridContainerTest::::frInRowsTest()",
      "686": "GridContainerTest::::frInRowsTest()",
      "688": "GridContainerTest::::frColumnsTest()",
      "689": "GridContainerTest::::frColumnsTest()",
      "690": "GridContainerTest::::frColumnsTest()",
      "691": "GridContainerTest::::frColumnsTest()",
      "692": "GridContainerTest::::frColumnsTest()",
      "693": "GridContainerTest::::frColumnsTest()",
      "694": "GridContainerTest::::frColumnsTest()",
      "695": "GridContainerTest::::frColumnsTest()",
      "696": "GridContainerTest::::frColumnsTest()",
      "697": "GridContainerTest::::frColumnsTest()",
      "698": "GridContainerTest::::frColumnsTest()",
      "699": "GridContainerTest::::frColumnsTest()",
      "700": "GridContainerTest::::frColumnsTest()",
      "701": "GridContainerTest::::frColumnsTest()",
      "702": "GridContainerTest::::frColumnsTest()",
      "703": "GridContainerTest::::frColumnsTest()",
      "704": "GridContainerTest::::frColumnsTest()",
      "705": "GridContainerTest::::frColumnsTest()",
      "706": "GridContainerTest::::frColumnsTest()",
      "707": "GridContainerTest::::frColumnsTest()",
      "708": "GridContainerTest::::frColumnsTest()",
      "709": "GridContainerTest::::frColumnsTest()",
      "710": "GridContainerTest::::frColumnsTest()",
      "711": "GridContainerTest::::frColumnsTest()",
      "712": "GridContainerTest::::frColumnsTest()",
      "713": "GridContainerTest::::frColumnsTest()",
      "715": "GridContainerTest::::columnSpanTest()",
      "716": "GridContainerTest::::columnSpanTest()",
      "717": "GridContainerTest::::columnSpanTest()",
      "718": "GridContainerTest::::columnSpanTest()",
      "719": "GridContainerTest::::columnSpanTest()",
      "720": "GridContainerTest::::columnSpanTest()",
      "721": "GridContainerTest::::columnSpanTest()",
      "722": "GridContainerTest::::columnSpanTest()",
      "723": "GridContainerTest::::columnSpanTest()",
      "724": "GridContainerTest::::columnSpanTest()",
      "725": "GridContainerTest::::columnSpanTest()",
      "726": "GridContainerTest::::columnSpanTest()",
      "727": "GridContainerTest::::columnSpanTest()",
      "728": "GridContainerTest::::columnSpanTest()",
      "729": "GridContainerTest::::columnSpanTest()",
      "730": "GridContainerTest::::columnSpanTest()",
      "731": "GridContainerTest::::columnSpanTest()",
      "732": "GridContainerTest::::columnSpanTest()",
      "733": "GridContainerTest::::columnSpanTest()",
      "734": "GridContainerTest::::columnSpanTest()",
      "735": "GridContainerTest::::columnSpanTest()",
      "736": "GridContainerTest::::columnSpanTest()",
      "737": "GridContainerTest::::columnSpanTest()",
      "738": "GridContainerTest::::columnSpanTest()",
      "739": "GridContainerTest::::columnSpanTest()",
      "741": "GridContainerTest::::rowSpanTest()",
      "742": "GridContainerTest::::rowSpanTest()",
      "743": "GridContainerTest::::rowSpanTest()",
      "744": "GridContainerTest::::rowSpanTest()",
      "745": "GridContainerTest::::rowSpanTest()",
      "746": "GridContainerTest::::rowSpanTest()",
      "747": "GridContainerTest::::rowSpanTest()",
      "748": "GridContainerTest::::rowSpanTest()",
      "749": "GridContainerTest::::rowSpanTest()",
      "750": "GridContainerTest::::rowSpanTest()",
      "751": "GridContainerTest::::rowSpanTest()",
      "752": "GridContainerTest::::rowSpanTest()",
      "753": "GridContainerTest::::rowSpanTest()",
      "754": "GridContainerTest::::rowSpanTest()",
      "755": "GridContainerTest::::rowSpanTest()",
      "756": "GridContainerTest::::rowSpanTest()",
      "757": "GridContainerTest::::rowSpanTest()",
      "758": "GridContainerTest::::rowSpanTest()",
      "759": "GridContainerTest::::rowSpanTest()",
      "760": "GridContainerTest::::rowSpanTest()",
      "761": "GridContainerTest::::rowSpanTest()",
      "762": "GridContainerTest::::rowSpanTest()",
      "763": "GridContainerTest::::rowSpanTest()",
      "764": "GridContainerTest::::rowSpanTest()",
      "765": "GridContainerTest::::rowSpanTest()",
      "766": "GridContainerTest::::rowSpanTest()"
    },
    "tests": [
      {
        "test_lines": [
          55,
          75
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          77,
          92
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          94,
          113
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          115,
          142
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          144,
          179
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          181,
          208
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          210,
          238
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          240,
          276
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          278,
          312
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          314,
          361
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          363,
          397
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          399,
          418
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          420,
          440
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          442,
          475
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          477,
          506
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          508,
          540
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          542,
          559
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          561,
          586
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          588,
          625
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          627,
          666
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          668,
          686
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          688,
          713
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          715,
          739
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      },
      {
        "test_lines": [
          741,
          766
        ],
        "covered_lines": [
          37,
          38,
          42
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/itext-java/layout/src/main/java/com/itextpdf/layout/splitting/BreakAllSplitCharacters.java": {
    "class_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.layout.splitting;\n",
      "\n",
      "import com.itextpdf.io.font.otf.Glyph;\n",
      "import com.itextpdf.io.font.otf.GlyphLine;\n",
      "import com.itextpdf.io.util.TextUtil;\n",
      "\n",
      "/**\n",
      " * The implementation of {@link ISplitCharacters} that allows breaking within words.\n",
      " */\n",
      "public class BreakAllSplitCharacters implements ISplitCharacters {\n",
      "\n",
      "    @Override\n",
      "    public boolean isSplitCharacter(GlyphLine text, int glyphPos) {\n",
      "        if (text.size() - 1 == glyphPos) {\n",
      "            return true;\n",
      "        }\n",
      "\n",
      "        Glyph glyphToCheck = text.get(glyphPos);\n",
      "        if (!glyphToCheck.hasValidUnicode()) {\n",
      "            return true;\n",
      "        }\n",
      "        int charCode = glyphToCheck.getUnicode();\n",
      "\n",
      "        Glyph nextGlyph = text.get(glyphPos + 1);\n",
      "        if (!nextGlyph.hasValidUnicode()) {\n",
      "            return true;\n",
      "        }\n",
      "\n",
      "        boolean nextGlyphIsLetterOrDigit = TextUtil.isLetterOrDigit(nextGlyph);\n",
      "        boolean nextGlyphIsMark = TextUtil.isMark(nextGlyph);\n",
      "\n",
      "        boolean currentGlyphIsDefaultSplitCharacter = charCode <= ' ' || charCode == '-' || charCode == '\\u2010'\n",
      "                // block of whitespaces\n",
      "                || (charCode >= 0x2002 && charCode <= 0x200b);\n",
      "\n",
      "        return (currentGlyphIsDefaultSplitCharacter || nextGlyphIsLetterOrDigit || nextGlyphIsMark)\n",
      "                && !TextUtil.isNonBreakingHyphen(glyphToCheck);\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.layout.splitting;\n",
      "\n",
      "import com.itextpdf.io.font.otf.Glyph;\n",
      "import com.itextpdf.io.font.otf.GlyphLine;\n",
      "import com.itextpdf.test.ExtendedITextTest;\n",
      "import com.itextpdf.test.annotations.type.UnitTest;\n",
      "\n",
      "import java.util.ArrayList;\n",
      "import java.util.List;\n",
      "import org.junit.Assert;\n",
      "import org.junit.Test;\n",
      "import org.junit.experimental.categories.Category;\n",
      "\n",
      "@Category(UnitTest.class)\n",
      "public class BreakAllSplitCharactersTest extends ExtendedITextTest {\n",
      "\n",
      "    private static final char charWithFalse = '\\u201b';\n",
      "\n",
      "    @Test\n",
      "    public void lastCharTest() {\n",
      "        Assert.assertFalse(isSplitCharacter(new int[]{charWithFalse, charWithFalse, charWithFalse}, 1));\n",
      "        Assert.assertTrue(isSplitCharacter(new int[]{charWithFalse, charWithFalse, charWithFalse}, 2));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void currentIsNotUnicodeTest() {\n",
      "        Assert.assertTrue(isSplitCharacter(new int[]{charWithFalse, -1, charWithFalse}, 1));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void nextIsNotUnicodeTest() {\n",
      "        Assert.assertTrue(isSplitCharacter(new int[]{charWithFalse, charWithFalse, -1}, 1));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void beforeSpaceTest() {\n",
      "        Assert.assertTrue(isSplitCharacter(new int[]{'a', 'a', ' '}, 0));\n",
      "        Assert.assertFalse(isSplitCharacter(new int[]{'a', 'a', ' '}, 1));\n",
      "        Assert.assertTrue(isSplitCharacter(new int[]{'a', ' ', ' '}, 1));\n",
      "        Assert.assertTrue(isSplitCharacter(new int[]{'a', '-', ' '}, 1));\n",
      "        Assert.assertTrue(isSplitCharacter(new int[]{'a', '\\u2010', ' '}, 1));\n",
      "        Assert.assertTrue(isSplitCharacter(new int[]{'a', '\\u2004', ' '}, 1));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void beforeSymbolTest() {\n",
      "        Assert.assertFalse(isSplitCharacter(new int[]{charWithFalse, charWithFalse}, 0));\n",
      "        Assert.assertTrue(isSplitCharacter(new int[]{charWithFalse, 'a'}, 0));\n",
      "        // non spacing mark\n",
      "        Assert.assertTrue(isSplitCharacter(new int[]{charWithFalse, '\\u0303'}, 0));\n",
      "        // combining mark\n",
      "        Assert.assertTrue(isSplitCharacter(new int[]{charWithFalse, '\\u093e'}, 0));\n",
      "        // enclosing mark\n",
      "        Assert.assertTrue(isSplitCharacter(new int[]{charWithFalse, '\\u0488'}, 0));\n",
      "    }\n",
      "\n",
      "    private static boolean isSplitCharacter(int[] unicodes, int glyphPosition) {\n",
      "        return new BreakAllSplitCharacters().isSplitCharacter(createGlyphLine(unicodes), glyphPosition);\n",
      "    }\n",
      "\n",
      "    private static GlyphLine createGlyphLine(int[] unicodes) {\n",
      "        List<Glyph> glyphs = new ArrayList<>();\n",
      "        for (int unicode : unicodes) {\n",
      "            glyphs.add(new Glyph(1, unicode));\n",
      "        }\n",
      "        return new GlyphLine(glyphs);\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {},
    "test_method_lines_dic": {
      "BreakAllSplitCharactersTest::::lastCharTest()": [
        41,
        45
      ],
      "BreakAllSplitCharactersTest::::currentIsNotUnicodeTest()": [
        47,
        50
      ],
      "BreakAllSplitCharactersTest::::nextIsNotUnicodeTest()": [
        52,
        55
      ],
      "BreakAllSplitCharactersTest::::beforeSpaceTest()": [
        57,
        65
      ],
      "BreakAllSplitCharactersTest::::beforeSymbolTest()": [
        67,
        77
      ],
      "BreakAllSplitCharactersTest::::isSplitCharacter(int[],int)": [
        79,
        81
      ],
      "BreakAllSplitCharactersTest::::createGlyphLine(int[])": [
        83,
        89
      ]
    },
    "reverse_method_lines_dic": {},
    "test_reverse_method_lines_dic": {
      "41": "BreakAllSplitCharactersTest::::lastCharTest()",
      "42": "BreakAllSplitCharactersTest::::lastCharTest()",
      "43": "BreakAllSplitCharactersTest::::lastCharTest()",
      "44": "BreakAllSplitCharactersTest::::lastCharTest()",
      "45": "BreakAllSplitCharactersTest::::lastCharTest()",
      "47": "BreakAllSplitCharactersTest::::currentIsNotUnicodeTest()",
      "48": "BreakAllSplitCharactersTest::::currentIsNotUnicodeTest()",
      "49": "BreakAllSplitCharactersTest::::currentIsNotUnicodeTest()",
      "50": "BreakAllSplitCharactersTest::::currentIsNotUnicodeTest()",
      "52": "BreakAllSplitCharactersTest::::nextIsNotUnicodeTest()",
      "53": "BreakAllSplitCharactersTest::::nextIsNotUnicodeTest()",
      "54": "BreakAllSplitCharactersTest::::nextIsNotUnicodeTest()",
      "55": "BreakAllSplitCharactersTest::::nextIsNotUnicodeTest()",
      "57": "BreakAllSplitCharactersTest::::beforeSpaceTest()",
      "58": "BreakAllSplitCharactersTest::::beforeSpaceTest()",
      "59": "BreakAllSplitCharactersTest::::beforeSpaceTest()",
      "60": "BreakAllSplitCharactersTest::::beforeSpaceTest()",
      "61": "BreakAllSplitCharactersTest::::beforeSpaceTest()",
      "62": "BreakAllSplitCharactersTest::::beforeSpaceTest()",
      "63": "BreakAllSplitCharactersTest::::beforeSpaceTest()",
      "64": "BreakAllSplitCharactersTest::::beforeSpaceTest()",
      "65": "BreakAllSplitCharactersTest::::beforeSpaceTest()",
      "67": "BreakAllSplitCharactersTest::::beforeSymbolTest()",
      "68": "BreakAllSplitCharactersTest::::beforeSymbolTest()",
      "69": "BreakAllSplitCharactersTest::::beforeSymbolTest()",
      "70": "BreakAllSplitCharactersTest::::beforeSymbolTest()",
      "71": "BreakAllSplitCharactersTest::::beforeSymbolTest()",
      "72": "BreakAllSplitCharactersTest::::beforeSymbolTest()",
      "73": "BreakAllSplitCharactersTest::::beforeSymbolTest()",
      "74": "BreakAllSplitCharactersTest::::beforeSymbolTest()",
      "75": "BreakAllSplitCharactersTest::::beforeSymbolTest()",
      "76": "BreakAllSplitCharactersTest::::beforeSymbolTest()",
      "77": "BreakAllSplitCharactersTest::::beforeSymbolTest()",
      "79": "BreakAllSplitCharactersTest::::isSplitCharacter(int[],int)",
      "80": "BreakAllSplitCharactersTest::::isSplitCharacter(int[],int)",
      "81": "BreakAllSplitCharactersTest::::isSplitCharacter(int[],int)",
      "83": "BreakAllSplitCharactersTest::::createGlyphLine(int[])",
      "84": "BreakAllSplitCharactersTest::::createGlyphLine(int[])",
      "85": "BreakAllSplitCharactersTest::::createGlyphLine(int[])",
      "86": "BreakAllSplitCharactersTest::::createGlyphLine(int[])",
      "87": "BreakAllSplitCharactersTest::::createGlyphLine(int[])",
      "88": "BreakAllSplitCharactersTest::::createGlyphLine(int[])",
      "89": "BreakAllSplitCharactersTest::::createGlyphLine(int[])"
    },
    "tests": [
      {
        "test_lines": [
          41,
          45
        ],
        "covered_lines": [
          32,
          36,
          37,
          40,
          41,
          44,
          46,
          47,
          51,
          52,
          54,
          58,
          59
        ]
      },
      {
        "test_lines": [
          47,
          50
        ],
        "covered_lines": [
          32,
          36,
          40,
          41,
          42
        ]
      },
      {
        "test_lines": [
          52,
          55
        ],
        "covered_lines": [
          32,
          36,
          40,
          41,
          44,
          46,
          47,
          48
        ]
      },
      {
        "test_lines": [
          57,
          65
        ],
        "covered_lines": [
          32,
          36,
          40,
          41,
          44,
          46,
          47,
          51,
          52,
          54,
          58,
          59
        ]
      },
      {
        "test_lines": [
          67,
          77
        ],
        "covered_lines": [
          32,
          36,
          40,
          41,
          44,
          46,
          47,
          51,
          52,
          54,
          58,
          59
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/itext-java/layout/src/main/java/com/itextpdf/layout/splitting/KeepAllSplitCharacters.java": {
    "class_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.layout.splitting;\n",
      "\n",
      "import com.itextpdf.io.font.otf.GlyphLine;\n",
      "\n",
      "/**\n",
      " * The implementation of {@link ISplitCharacters} that prevents breaking within words.\n",
      " */\n",
      "public class KeepAllSplitCharacters implements ISplitCharacters {\n",
      "\n",
      "    @Override\n",
      "    public boolean isSplitCharacter(GlyphLine text, int glyphPos) {\n",
      "        if (!text.get(glyphPos).hasValidUnicode()) {\n",
      "            return false;\n",
      "        }\n",
      "        int charCode = text.get(glyphPos).getUnicode();\n",
      "        //Check if a hyphen proceeds a digit to denote negative value\n",
      "        // TODO: DEVSIX-4863 why is glyphPos == 0? negative value could be preceded by a whitespace!\n",
      "        if ((glyphPos == 0) && (charCode == '-') && (text.size() - 1 > glyphPos) && (isADigitChar(text, glyphPos + 1))) {\n",
      "            return false;\n",
      "        }\n",
      "\n",
      "        return charCode <= ' ' || charCode == '-' || charCode == '\\u2010'\n",
      "                // block of whitespaces\n",
      "                || (charCode >= 0x2002 && charCode <= 0x200b);\n",
      "    }\n",
      "\n",
      "    private static boolean isADigitChar(GlyphLine text, int glyphPos) {\n",
      "        return Character.isDigit(text.get(glyphPos).getChars()[0]);\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.layout.splitting;\n",
      "\n",
      "import com.itextpdf.io.font.otf.Glyph;\n",
      "import com.itextpdf.io.font.otf.GlyphLine;\n",
      "import com.itextpdf.test.ExtendedITextTest;\n",
      "import com.itextpdf.test.annotations.type.UnitTest;\n",
      "\n",
      "import java.util.ArrayList;\n",
      "import java.util.List;\n",
      "import org.junit.Assert;\n",
      "import org.junit.Test;\n",
      "import org.junit.experimental.categories.Category;\n",
      "\n",
      "@Category(UnitTest.class)\n",
      "public class KeepAllSplitCharactersTest extends ExtendedITextTest {\n",
      "\n",
      "    @Test\n",
      "    public void dashAtStartTest() {\n",
      "        Assert.assertTrue(isSplitCharacter(new int[]{'-', 'a'}, 0));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void minusSignAtStartTest() {\n",
      "        Assert.assertFalse(isSplitCharacter(new int[]{'-', '5'}, 0));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void dashBeforeLetterInTheMiddleTest() {\n",
      "        Assert.assertTrue(isSplitCharacter(new int[]{'a', ' ', '-', 'a'}, 2));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    // TODO: DEVSIX-4863 minus sign for digests should not be split\n",
      "    public void minusSignInTheMiddleTest() {\n",
      "        Assert.assertTrue(isSplitCharacter(new int[]{'a', ' ', '-', '5'}, 2));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void dashBeforeDigitInTheMiddleTest() {\n",
      "        Assert.assertTrue(isSplitCharacter(new int[]{'a', 'a', '-', '5'}, 2));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void dashAtTheEndTest() {\n",
      "        int[] unicodes = new int[]{'a', '-'};\n",
      "        Assert.assertTrue(isSplitCharacter(unicodes, unicodes.length - 1));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void dashCharacterTest() {\n",
      "        Assert.assertTrue(isSplitCharacter(new int[]{'a', '-', 'a'}, 1));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void noUnicodeTest() {\n",
      "        Assert.assertFalse(isSplitCharacter(new int[]{'a', -1, 'a'}, 1));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void unicode2010CharacterTest() {\n",
      "        Assert.assertTrue(isSplitCharacter(new int[]{'a', '\\u2010', 'a'}, 1));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void unicode2003CharacterTest() {\n",
      "        Assert.assertTrue(isSplitCharacter(new int[]{'a', '\\u2003', 'a'}, 1));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void unicode2e81CharacterTest() {\n",
      "        Assert.assertFalse(isSplitCharacter(new int[]{'a', '\\u2e81', 'a'}, 1));\n",
      "    }\n",
      "\n",
      "    private static boolean isSplitCharacter(int[] unicodes, int glyphPosition) {\n",
      "        return new KeepAllSplitCharacters().isSplitCharacter(createGlyphLine(unicodes), glyphPosition);\n",
      "    }\n",
      "\n",
      "    private static GlyphLine createGlyphLine(int[] unicodes) {\n",
      "        List<Glyph> glyphs = new ArrayList<>();\n",
      "        for (int unicode : unicodes) {\n",
      "            glyphs.add(new Glyph(1, unicode));\n",
      "        }\n",
      "        return new GlyphLine(glyphs);\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {},
    "test_method_lines_dic": {
      "KeepAllSplitCharactersTest::::dashAtStartTest()": [
        39,
        42
      ],
      "KeepAllSplitCharactersTest::::minusSignAtStartTest()": [
        44,
        47
      ],
      "KeepAllSplitCharactersTest::::dashBeforeLetterInTheMiddleTest()": [
        49,
        52
      ],
      "KeepAllSplitCharactersTest::::minusSignInTheMiddleTest()": [
        54,
        58
      ],
      "KeepAllSplitCharactersTest::::dashBeforeDigitInTheMiddleTest()": [
        60,
        63
      ],
      "KeepAllSplitCharactersTest::::dashAtTheEndTest()": [
        65,
        69
      ],
      "KeepAllSplitCharactersTest::::dashCharacterTest()": [
        71,
        74
      ],
      "KeepAllSplitCharactersTest::::noUnicodeTest()": [
        76,
        79
      ],
      "KeepAllSplitCharactersTest::::unicode2010CharacterTest()": [
        81,
        84
      ],
      "KeepAllSplitCharactersTest::::unicode2003CharacterTest()": [
        86,
        89
      ],
      "KeepAllSplitCharactersTest::::unicode2e81CharacterTest()": [
        91,
        94
      ],
      "KeepAllSplitCharactersTest::::isSplitCharacter(int[],int)": [
        96,
        98
      ],
      "KeepAllSplitCharactersTest::::createGlyphLine(int[])": [
        100,
        106
      ]
    },
    "reverse_method_lines_dic": {},
    "test_reverse_method_lines_dic": {
      "39": "KeepAllSplitCharactersTest::::dashAtStartTest()",
      "40": "KeepAllSplitCharactersTest::::dashAtStartTest()",
      "41": "KeepAllSplitCharactersTest::::dashAtStartTest()",
      "42": "KeepAllSplitCharactersTest::::dashAtStartTest()",
      "44": "KeepAllSplitCharactersTest::::minusSignAtStartTest()",
      "45": "KeepAllSplitCharactersTest::::minusSignAtStartTest()",
      "46": "KeepAllSplitCharactersTest::::minusSignAtStartTest()",
      "47": "KeepAllSplitCharactersTest::::minusSignAtStartTest()",
      "49": "KeepAllSplitCharactersTest::::dashBeforeLetterInTheMiddleTest()",
      "50": "KeepAllSplitCharactersTest::::dashBeforeLetterInTheMiddleTest()",
      "51": "KeepAllSplitCharactersTest::::dashBeforeLetterInTheMiddleTest()",
      "52": "KeepAllSplitCharactersTest::::dashBeforeLetterInTheMiddleTest()",
      "54": "KeepAllSplitCharactersTest::::minusSignInTheMiddleTest()",
      "55": "KeepAllSplitCharactersTest::::minusSignInTheMiddleTest()",
      "56": "KeepAllSplitCharactersTest::::minusSignInTheMiddleTest()",
      "57": "KeepAllSplitCharactersTest::::minusSignInTheMiddleTest()",
      "58": "KeepAllSplitCharactersTest::::minusSignInTheMiddleTest()",
      "60": "KeepAllSplitCharactersTest::::dashBeforeDigitInTheMiddleTest()",
      "61": "KeepAllSplitCharactersTest::::dashBeforeDigitInTheMiddleTest()",
      "62": "KeepAllSplitCharactersTest::::dashBeforeDigitInTheMiddleTest()",
      "63": "KeepAllSplitCharactersTest::::dashBeforeDigitInTheMiddleTest()",
      "65": "KeepAllSplitCharactersTest::::dashAtTheEndTest()",
      "66": "KeepAllSplitCharactersTest::::dashAtTheEndTest()",
      "67": "KeepAllSplitCharactersTest::::dashAtTheEndTest()",
      "68": "KeepAllSplitCharactersTest::::dashAtTheEndTest()",
      "69": "KeepAllSplitCharactersTest::::dashAtTheEndTest()",
      "71": "KeepAllSplitCharactersTest::::dashCharacterTest()",
      "72": "KeepAllSplitCharactersTest::::dashCharacterTest()",
      "73": "KeepAllSplitCharactersTest::::dashCharacterTest()",
      "74": "KeepAllSplitCharactersTest::::dashCharacterTest()",
      "76": "KeepAllSplitCharactersTest::::noUnicodeTest()",
      "77": "KeepAllSplitCharactersTest::::noUnicodeTest()",
      "78": "KeepAllSplitCharactersTest::::noUnicodeTest()",
      "79": "KeepAllSplitCharactersTest::::noUnicodeTest()",
      "81": "KeepAllSplitCharactersTest::::unicode2010CharacterTest()",
      "82": "KeepAllSplitCharactersTest::::unicode2010CharacterTest()",
      "83": "KeepAllSplitCharactersTest::::unicode2010CharacterTest()",
      "84": "KeepAllSplitCharactersTest::::unicode2010CharacterTest()",
      "86": "KeepAllSplitCharactersTest::::unicode2003CharacterTest()",
      "87": "KeepAllSplitCharactersTest::::unicode2003CharacterTest()",
      "88": "KeepAllSplitCharactersTest::::unicode2003CharacterTest()",
      "89": "KeepAllSplitCharactersTest::::unicode2003CharacterTest()",
      "91": "KeepAllSplitCharactersTest::::unicode2e81CharacterTest()",
      "92": "KeepAllSplitCharactersTest::::unicode2e81CharacterTest()",
      "93": "KeepAllSplitCharactersTest::::unicode2e81CharacterTest()",
      "94": "KeepAllSplitCharactersTest::::unicode2e81CharacterTest()",
      "96": "KeepAllSplitCharactersTest::::isSplitCharacter(int[],int)",
      "97": "KeepAllSplitCharactersTest::::isSplitCharacter(int[],int)",
      "98": "KeepAllSplitCharactersTest::::isSplitCharacter(int[],int)",
      "100": "KeepAllSplitCharactersTest::::createGlyphLine(int[])",
      "101": "KeepAllSplitCharactersTest::::createGlyphLine(int[])",
      "102": "KeepAllSplitCharactersTest::::createGlyphLine(int[])",
      "103": "KeepAllSplitCharactersTest::::createGlyphLine(int[])",
      "104": "KeepAllSplitCharactersTest::::createGlyphLine(int[])",
      "105": "KeepAllSplitCharactersTest::::createGlyphLine(int[])",
      "106": "KeepAllSplitCharactersTest::::createGlyphLine(int[])"
    },
    "tests": [
      {
        "test_lines": [
          39,
          42
        ],
        "covered_lines": [
          30,
          34,
          37,
          40,
          44,
          50
        ]
      },
      {
        "test_lines": [
          44,
          47
        ],
        "covered_lines": [
          30,
          34,
          37,
          40,
          41,
          50
        ]
      },
      {
        "test_lines": [
          49,
          52
        ],
        "covered_lines": [
          30,
          34,
          37,
          40,
          44
        ]
      },
      {
        "test_lines": [
          54,
          58
        ],
        "covered_lines": [
          30,
          34,
          37,
          40,
          44
        ]
      },
      {
        "test_lines": [
          60,
          63
        ],
        "covered_lines": [
          30,
          34,
          37,
          40,
          44
        ]
      },
      {
        "test_lines": [
          65,
          69
        ],
        "covered_lines": [
          30,
          34,
          37,
          40,
          44
        ]
      },
      {
        "test_lines": [
          71,
          74
        ],
        "covered_lines": [
          30,
          34,
          37,
          40,
          44
        ]
      },
      {
        "test_lines": [
          76,
          79
        ],
        "covered_lines": [
          30,
          34,
          35
        ]
      },
      {
        "test_lines": [
          81,
          84
        ],
        "covered_lines": [
          30,
          34,
          37,
          40,
          44
        ]
      },
      {
        "test_lines": [
          86,
          89
        ],
        "covered_lines": [
          30,
          34,
          37,
          40,
          44
        ]
      },
      {
        "test_lines": [
          91,
          94
        ],
        "covered_lines": [
          30,
          34,
          37,
          40,
          44
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/itext-java/layout/src/main/java/com/itextpdf/layout/properties/Transform.java": {
    "class_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.layout.properties;\n",
      "\n",
      "import com.itextpdf.kernel.geom.AffineTransform;\n",
      "\n",
      "import java.util.ArrayList;\n",
      "import java.util.List;\n",
      "\n",
      "/**\n",
      " * This class is used to store and process multiple {@code transform} css property before drawing.\n",
      " */\n",
      "public class Transform {\n",
      "    private List<SingleTransform> multipleTransform;\n",
      "\n",
      "    /**\n",
      "     * Creates a new {@link Transform} instance.\n",
      "     *\n",
      "     * @param length the amount of {@link SingleTransform} instances that this {@link Transform} instant shall contain and be able to process\n",
      "     */\n",
      "    public Transform(int length) {\n",
      "        multipleTransform = new ArrayList<SingleTransform>(length);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Adds a {@link SingleTransform} in a list of single transforms to process later.\n",
      "     *\n",
      "     * @param singleTransform a {@link SingleTransform} instance\n",
      "     */\n",
      "    public void addSingleTransform(SingleTransform singleTransform) {\n",
      "        multipleTransform.add(singleTransform);\n",
      "    }\n",
      "\n",
      "    private List<SingleTransform> getMultipleTransform() {\n",
      "        return multipleTransform;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Converts the {@link Transform} instance, i.e. the list of {@link SingleTransform} instances,\n",
      "     * to the equivalent {@link AffineTransform} instance relatively to the available area,\n",
      "     * including resolving of percent values to point values.\n",
      "     *\n",
      "     * @param t      a {@link Transform} instance to convert\n",
      "     * @param width  the width of available area, the point value of which is equivalent to 100% for percentage resolving\n",
      "     * @param height the height of available area, the point value of which is equivalent to 100% for percentage resolving\n",
      "     * @return resulting affine transformation instance, accumulated from {@link Transform}\n",
      "     */\n",
      "    public static AffineTransform getAffineTransform(Transform t, float width, float height) {\n",
      "        List<SingleTransform> multipleTransform = t.getMultipleTransform();\n",
      "        AffineTransform affineTransform = new AffineTransform();\n",
      "        for (int k = multipleTransform.size() - 1; k >= 0; k--) {\n",
      "            SingleTransform transform = multipleTransform.get(k);\n",
      "            float[] floats = new float[6];\n",
      "            for (int i = 0; i < 4; i++)\n",
      "                floats[i] = transform.getFloats()[i];\n",
      "            for (int i = 4; i < 6; i++)\n",
      "                floats[i] = transform.getUnitValues()[i - 4].getUnitType() == UnitValue.POINT ?\n",
      "                        transform.getUnitValues()[i - 4].getValue() : transform.getUnitValues()[i - 4].getValue() / 100 * (i == 4 ? width : height);\n",
      "            affineTransform.preConcatenate(new AffineTransform(floats));\n",
      "        }\n",
      "        return affineTransform;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * This class is used to store one {@code transform} function.\n",
      "     */\n",
      "    public static class SingleTransform {\n",
      "        private float a, b, c, d;\n",
      "        private UnitValue tx, ty;\n",
      "\n",
      "        /**\n",
      "         * Creates a default {@link SingleTransform} instance equivalent to no transform.\n",
      "         */\n",
      "        public SingleTransform() {\n",
      "            this.a = 1;\n",
      "            this.b = 0;\n",
      "            this.c = 0;\n",
      "            this.d = 1;\n",
      "            this.tx = new UnitValue(UnitValue.POINT, 0);\n",
      "            this.ty = new UnitValue(UnitValue.POINT, 0);\n",
      "        }\n",
      "\n",
      "        /**\n",
      "         * Creates a {@link SingleTransform} instance.\n",
      "         *\n",
      "         * @param a  horizontal scaling\n",
      "         * @param b  vertical skewing\n",
      "         * @param c  horizontal skewing\n",
      "         * @param d  vertical scaling\n",
      "         * @param tx horizontal translation\n",
      "         * @param ty vertical translation\n",
      "         */\n",
      "        public SingleTransform(float a, float b, float c, float d, UnitValue tx, UnitValue ty) {\n",
      "            this.a = a;\n",
      "            this.b = b;\n",
      "            this.c = c;\n",
      "            this.d = d;\n",
      "            this.tx = tx;\n",
      "            this.ty = ty;\n",
      "        }\n",
      "\n",
      "        /**\n",
      "         * Gets an array of values corresponding to transformation, i.e. scaling and skewing.\n",
      "         *\n",
      "         * @return an array of floats\n",
      "         */\n",
      "        public float[] getFloats() {\n",
      "            return new float[]{a, b, c, d};\n",
      "        }\n",
      "\n",
      "        /**\n",
      "         * Gets an array of values corresponding to translation.\n",
      "         *\n",
      "         * @return an array of {@link UnitValue}-s\n",
      "         */\n",
      "        public UnitValue[] getUnitValues() {\n",
      "            return new UnitValue[]{tx, ty};\n",
      "        }\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.layout.properties;\n",
      "\n",
      "import com.itextpdf.kernel.geom.AffineTransform;\n",
      "\n",
      "import com.itextpdf.test.ExtendedITextTest;\n",
      "import com.itextpdf.test.annotations.type.UnitTest;\n",
      "import org.junit.Assert;\n",
      "import org.junit.Test;\n",
      "import org.junit.experimental.categories.Category;\n",
      "\n",
      "@Category(UnitTest.class)\n",
      "public class TransformTest extends ExtendedITextTest {\n",
      "    // AffineTransform.TYPE_UNKNOWN\n",
      "    private static final float type = -1;\n",
      "\n",
      "    @Test\n",
      "    public void createDefaultSingleTransformTest() {\n",
      "        Transform.SingleTransform defaultSingleTransform = new Transform.SingleTransform();\n",
      "        UnitValue[] defaultUnitValues = defaultSingleTransform.getUnitValues();\n",
      "        Assert.assertArrayEquals(new float[] {1f, 0f, 0f, 1f}, defaultSingleTransform.getFloats(), 0);\n",
      "        Assert.assertEquals(2, defaultUnitValues.length);\n",
      "        Assert.assertEquals(UnitValue.createPointValue(0), defaultUnitValues[0]);\n",
      "        Assert.assertEquals(UnitValue.createPointValue(0), defaultUnitValues[1]);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void getAffineTransformPercentPointUnitValuesTest() {\n",
      "        Assert.assertEquals(new AffineTransform(new float[] {-2f, 3f, -4f, -5f, 12f, 30f, type}),\n",
      "                getAffineTransform(UnitValue.PERCENT, UnitValue.POINT));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void getAffineTransformPointPercentUnitValuesTest() {\n",
      "        Assert.assertEquals(new AffineTransform(new float[] {-2f, 3f, -4f, -5f, 20f, 24f, type}),\n",
      "                getAffineTransform(UnitValue.POINT, UnitValue.PERCENT));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void getAffineTransformPercentPercentUnitValuesTest() {\n",
      "        Assert.assertEquals(new AffineTransform(new float[] {-2f, 3f, -4f, -5f, 12f, 24f, type}),\n",
      "                getAffineTransform(UnitValue.PERCENT, UnitValue.PERCENT));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void getAffineTransformPointPointUnitValuesTest() {\n",
      "        Assert.assertEquals(new AffineTransform(new float[] {-2f, 3f, -4f, -5f, 20f, 30f, type}),\n",
      "                getAffineTransform(UnitValue.POINT, UnitValue.POINT));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void getAffineTransformDiffSingleTransformTest() {\n",
      "        final float txUnitValue = 20f;\n",
      "        final float tyUnitValue2 = 30f;\n",
      "        Transform transform = new Transform(4);\n",
      "        transform.addSingleTransform(createSingleTransform(UnitValue.createPercentValue(txUnitValue),\n",
      "                UnitValue.createPointValue(tyUnitValue2)));\n",
      "        transform.addSingleTransform(createSingleTransform(UnitValue.createPointValue(txUnitValue),\n",
      "                UnitValue.createPercentValue(tyUnitValue2)));\n",
      "        transform.addSingleTransform(\n",
      "                createSingleTransform(UnitValue.createPercentValue(txUnitValue),\n",
      "                        UnitValue.createPercentValue(tyUnitValue2)));\n",
      "        transform.addSingleTransform(createSingleTransform(UnitValue.createPointValue(txUnitValue),\n",
      "                UnitValue.createPointValue(tyUnitValue2)));\n",
      "        Assert.assertEquals(new AffineTransform(new float[] {-524f, -105f, 140f, -419f, -788f, 2220f, type}),\n",
      "                Transform.getAffineTransform(transform, 60f, 80f));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void getAffineTransformOneSingleTransformFewTimesTest() {\n",
      "        Transform transform = new Transform(4);\n",
      "        Transform.SingleTransform singleTransform = createSingleTransform(UnitValue.createPointValue(20f),\n",
      "                UnitValue.createPointValue(30f));\n",
      "        transform.addSingleTransform(singleTransform);\n",
      "        transform.addSingleTransform(singleTransform);\n",
      "        transform.addSingleTransform(singleTransform);\n",
      "        transform.addSingleTransform(singleTransform);\n",
      "        Assert.assertEquals(new AffineTransform(new float[] {-524f, -105f, 140f, -419f, -700f, 2100f, type}),\n",
      "                Transform.getAffineTransform(transform, 60f, 60f));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void getAffineTransformDifferentWidthHeightTest() {\n",
      "        Transform transform = new Transform(1);\n",
      "        transform.addSingleTransform(createSingleTransform(UnitValue.createPercentValue(20f),\n",
      "                UnitValue.createPercentValue(30f)));\n",
      "        Assert.assertEquals(new AffineTransform(new float[] {-2f, 3f, -4f, -5f, -10f, -6f, type}),\n",
      "                Transform.getAffineTransform(transform, -50f, -20f));\n",
      "        Assert.assertEquals(new AffineTransform(new float[] {-2f, 3f, -4f, -5f, 10f, -6f, type}),\n",
      "                Transform.getAffineTransform(transform, 50f, -20f));\n",
      "        Assert.assertEquals(new AffineTransform(new float[] {-2f, 3f, -4f, -5f, -10f, 6f, type}),\n",
      "                Transform.getAffineTransform(transform, -50f, 20f));\n",
      "        Assert.assertEquals(new AffineTransform(new float[] {-2f, 3f, -4f, -5f, 10f, 6f, type}),\n",
      "                Transform.getAffineTransform(transform, 50f, 20f));\n",
      "    }\n",
      "\n",
      "    private static AffineTransform getAffineTransform(int txUnitValueType, int tyUnitValueType) {\n",
      "        final float txUnitValue = 20f;\n",
      "        final float tyUnitValue = 30f;\n",
      "        final float width = 60f;\n",
      "        final float height = 80f;\n",
      "\n",
      "        // create Transform\n",
      "        Transform transform = new Transform(1);\n",
      "        transform.addSingleTransform(createSingleTransform(new UnitValue(txUnitValueType, txUnitValue),\n",
      "                new UnitValue(tyUnitValueType, tyUnitValue)));\n",
      "\n",
      "        // get AffineTransform\n",
      "        return Transform.getAffineTransform(transform, width, height);\n",
      "    }\n",
      "\n",
      "    private static Transform.SingleTransform createSingleTransform(UnitValue xUnitVal, UnitValue yUnitVal) {\n",
      "        final float a = -2f;\n",
      "        final float b = 3f;\n",
      "        final float c = -4f;\n",
      "        final float d = -5f;\n",
      "        return new Transform.SingleTransform(a, b, c, d, xUnitVal, yUnitVal);\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "Transform::::addSingleTransform(com.itextpdf.layout.properties.Transform.SingleTransform)": [
        50,
        52
      ],
      "Transform::::getMultipleTransform()": [
        54,
        56
      ],
      "Transform::::getAffineTransform(com.itextpdf.layout.properties.Transform,float,float)": [
        68,
        82
      ],
      "Transform.SingleTransform::::getFloats()": [
        127,
        129
      ],
      "Transform.SingleTransform::::getUnitValues()": [
        136,
        138
      ]
    },
    "test_method_lines_dic": {
      "TransformTest::::createDefaultSingleTransformTest()": [
        38,
        46
      ],
      "TransformTest::::getAffineTransformPercentPointUnitValuesTest()": [
        48,
        52
      ],
      "TransformTest::::getAffineTransformPointPercentUnitValuesTest()": [
        54,
        58
      ],
      "TransformTest::::getAffineTransformPercentPercentUnitValuesTest()": [
        60,
        64
      ],
      "TransformTest::::getAffineTransformPointPointUnitValuesTest()": [
        66,
        70
      ],
      "TransformTest::::getAffineTransformDiffSingleTransformTest()": [
        72,
        88
      ],
      "TransformTest::::getAffineTransformOneSingleTransformFewTimesTest()": [
        90,
        101
      ],
      "TransformTest::::getAffineTransformDifferentWidthHeightTest()": [
        103,
        116
      ],
      "TransformTest::::getAffineTransform(int,int)": [
        118,
        131
      ]
    },
    "reverse_method_lines_dic": {
      "50": "Transform::::addSingleTransform(com.itextpdf.layout.properties.Transform.SingleTransform)",
      "51": "Transform::::addSingleTransform(com.itextpdf.layout.properties.Transform.SingleTransform)",
      "52": "Transform::::addSingleTransform(com.itextpdf.layout.properties.Transform.SingleTransform)",
      "54": "Transform::::getMultipleTransform()",
      "55": "Transform::::getMultipleTransform()",
      "56": "Transform::::getMultipleTransform()",
      "68": "Transform::::getAffineTransform(com.itextpdf.layout.properties.Transform,float,float)",
      "69": "Transform::::getAffineTransform(com.itextpdf.layout.properties.Transform,float,float)",
      "70": "Transform::::getAffineTransform(com.itextpdf.layout.properties.Transform,float,float)",
      "71": "Transform::::getAffineTransform(com.itextpdf.layout.properties.Transform,float,float)",
      "72": "Transform::::getAffineTransform(com.itextpdf.layout.properties.Transform,float,float)",
      "73": "Transform::::getAffineTransform(com.itextpdf.layout.properties.Transform,float,float)",
      "74": "Transform::::getAffineTransform(com.itextpdf.layout.properties.Transform,float,float)",
      "75": "Transform::::getAffineTransform(com.itextpdf.layout.properties.Transform,float,float)",
      "76": "Transform::::getAffineTransform(com.itextpdf.layout.properties.Transform,float,float)",
      "77": "Transform::::getAffineTransform(com.itextpdf.layout.properties.Transform,float,float)",
      "78": "Transform::::getAffineTransform(com.itextpdf.layout.properties.Transform,float,float)",
      "79": "Transform::::getAffineTransform(com.itextpdf.layout.properties.Transform,float,float)",
      "80": "Transform::::getAffineTransform(com.itextpdf.layout.properties.Transform,float,float)",
      "81": "Transform::::getAffineTransform(com.itextpdf.layout.properties.Transform,float,float)",
      "82": "Transform::::getAffineTransform(com.itextpdf.layout.properties.Transform,float,float)",
      "127": "Transform.SingleTransform::::getFloats()",
      "128": "Transform.SingleTransform::::getFloats()",
      "129": "Transform.SingleTransform::::getFloats()",
      "136": "Transform.SingleTransform::::getUnitValues()",
      "137": "Transform.SingleTransform::::getUnitValues()",
      "138": "Transform.SingleTransform::::getUnitValues()"
    },
    "test_reverse_method_lines_dic": {
      "38": "TransformTest::::createDefaultSingleTransformTest()",
      "39": "TransformTest::::createDefaultSingleTransformTest()",
      "40": "TransformTest::::createDefaultSingleTransformTest()",
      "41": "TransformTest::::createDefaultSingleTransformTest()",
      "42": "TransformTest::::createDefaultSingleTransformTest()",
      "43": "TransformTest::::createDefaultSingleTransformTest()",
      "44": "TransformTest::::createDefaultSingleTransformTest()",
      "45": "TransformTest::::createDefaultSingleTransformTest()",
      "46": "TransformTest::::createDefaultSingleTransformTest()",
      "48": "TransformTest::::getAffineTransformPercentPointUnitValuesTest()",
      "49": "TransformTest::::getAffineTransformPercentPointUnitValuesTest()",
      "50": "TransformTest::::getAffineTransformPercentPointUnitValuesTest()",
      "51": "TransformTest::::getAffineTransformPercentPointUnitValuesTest()",
      "52": "TransformTest::::getAffineTransformPercentPointUnitValuesTest()",
      "54": "TransformTest::::getAffineTransformPointPercentUnitValuesTest()",
      "55": "TransformTest::::getAffineTransformPointPercentUnitValuesTest()",
      "56": "TransformTest::::getAffineTransformPointPercentUnitValuesTest()",
      "57": "TransformTest::::getAffineTransformPointPercentUnitValuesTest()",
      "58": "TransformTest::::getAffineTransformPointPercentUnitValuesTest()",
      "60": "TransformTest::::getAffineTransformPercentPercentUnitValuesTest()",
      "61": "TransformTest::::getAffineTransformPercentPercentUnitValuesTest()",
      "62": "TransformTest::::getAffineTransformPercentPercentUnitValuesTest()",
      "63": "TransformTest::::getAffineTransformPercentPercentUnitValuesTest()",
      "64": "TransformTest::::getAffineTransformPercentPercentUnitValuesTest()",
      "66": "TransformTest::::getAffineTransformPointPointUnitValuesTest()",
      "67": "TransformTest::::getAffineTransformPointPointUnitValuesTest()",
      "68": "TransformTest::::getAffineTransformPointPointUnitValuesTest()",
      "69": "TransformTest::::getAffineTransformPointPointUnitValuesTest()",
      "70": "TransformTest::::getAffineTransformPointPointUnitValuesTest()",
      "72": "TransformTest::::getAffineTransformDiffSingleTransformTest()",
      "73": "TransformTest::::getAffineTransformDiffSingleTransformTest()",
      "74": "TransformTest::::getAffineTransformDiffSingleTransformTest()",
      "75": "TransformTest::::getAffineTransformDiffSingleTransformTest()",
      "76": "TransformTest::::getAffineTransformDiffSingleTransformTest()",
      "77": "TransformTest::::getAffineTransformDiffSingleTransformTest()",
      "78": "TransformTest::::getAffineTransformDiffSingleTransformTest()",
      "79": "TransformTest::::getAffineTransformDiffSingleTransformTest()",
      "80": "TransformTest::::getAffineTransformDiffSingleTransformTest()",
      "81": "TransformTest::::getAffineTransformDiffSingleTransformTest()",
      "82": "TransformTest::::getAffineTransformDiffSingleTransformTest()",
      "83": "TransformTest::::getAffineTransformDiffSingleTransformTest()",
      "84": "TransformTest::::getAffineTransformDiffSingleTransformTest()",
      "85": "TransformTest::::getAffineTransformDiffSingleTransformTest()",
      "86": "TransformTest::::getAffineTransformDiffSingleTransformTest()",
      "87": "TransformTest::::getAffineTransformDiffSingleTransformTest()",
      "88": "TransformTest::::getAffineTransformDiffSingleTransformTest()",
      "90": "TransformTest::::getAffineTransformOneSingleTransformFewTimesTest()",
      "91": "TransformTest::::getAffineTransformOneSingleTransformFewTimesTest()",
      "92": "TransformTest::::getAffineTransformOneSingleTransformFewTimesTest()",
      "93": "TransformTest::::getAffineTransformOneSingleTransformFewTimesTest()",
      "94": "TransformTest::::getAffineTransformOneSingleTransformFewTimesTest()",
      "95": "TransformTest::::getAffineTransformOneSingleTransformFewTimesTest()",
      "96": "TransformTest::::getAffineTransformOneSingleTransformFewTimesTest()",
      "97": "TransformTest::::getAffineTransformOneSingleTransformFewTimesTest()",
      "98": "TransformTest::::getAffineTransformOneSingleTransformFewTimesTest()",
      "99": "TransformTest::::getAffineTransformOneSingleTransformFewTimesTest()",
      "100": "TransformTest::::getAffineTransformOneSingleTransformFewTimesTest()",
      "101": "TransformTest::::getAffineTransformOneSingleTransformFewTimesTest()",
      "103": "TransformTest::::getAffineTransformDifferentWidthHeightTest()",
      "104": "TransformTest::::getAffineTransformDifferentWidthHeightTest()",
      "105": "TransformTest::::getAffineTransformDifferentWidthHeightTest()",
      "106": "TransformTest::::getAffineTransformDifferentWidthHeightTest()",
      "107": "TransformTest::::getAffineTransformDifferentWidthHeightTest()",
      "108": "TransformTest::::getAffineTransformDifferentWidthHeightTest()",
      "109": "TransformTest::::getAffineTransformDifferentWidthHeightTest()",
      "110": "TransformTest::::getAffineTransformDifferentWidthHeightTest()",
      "111": "TransformTest::::getAffineTransformDifferentWidthHeightTest()",
      "112": "TransformTest::::getAffineTransformDifferentWidthHeightTest()",
      "113": "TransformTest::::getAffineTransformDifferentWidthHeightTest()",
      "114": "TransformTest::::getAffineTransformDifferentWidthHeightTest()",
      "115": "TransformTest::::getAffineTransformDifferentWidthHeightTest()",
      "116": "TransformTest::::getAffineTransformDifferentWidthHeightTest()",
      "118": "TransformTest::::getAffineTransform(int,int)",
      "119": "TransformTest::::getAffineTransform(int,int)",
      "120": "TransformTest::::getAffineTransform(int,int)",
      "121": "TransformTest::::getAffineTransform(int,int)",
      "122": "TransformTest::::getAffineTransform(int,int)",
      "123": "TransformTest::::getAffineTransform(int,int)",
      "124": "TransformTest::::getAffineTransform(int,int)",
      "125": "TransformTest::::getAffineTransform(int,int)",
      "126": "TransformTest::::getAffineTransform(int,int)",
      "127": "TransformTest::::getAffineTransform(int,int)",
      "128": "TransformTest::::getAffineTransform(int,int)",
      "129": "TransformTest::::getAffineTransform(int,int)",
      "130": "TransformTest::::getAffineTransform(int,int)",
      "131": "TransformTest::::getAffineTransform(int,int)"
    },
    "tests": [
      {
        "test_lines": [
          38,
          46
        ],
        "covered_lines": [
          94,
          95,
          96,
          97,
          98,
          99,
          100,
          101,
          128,
          137
        ]
      },
      {
        "test_lines": [
          48,
          52
        ],
        "covered_lines": [
          41,
          42,
          43,
          51,
          52,
          55,
          69,
          70,
          71,
          72,
          73,
          74,
          75,
          76,
          77,
          78,
          79,
          81,
          113,
          114,
          115,
          116,
          117,
          118,
          119,
          120,
          128,
          137
        ]
      },
      {
        "test_lines": [
          54,
          58
        ],
        "covered_lines": [
          41,
          42,
          43,
          51,
          52,
          55,
          69,
          70,
          71,
          72,
          73,
          74,
          75,
          76,
          77,
          78,
          79,
          81,
          113,
          114,
          115,
          116,
          117,
          118,
          119,
          120,
          128,
          137
        ]
      },
      {
        "test_lines": [
          60,
          64
        ],
        "covered_lines": [
          41,
          42,
          43,
          51,
          52,
          55,
          69,
          70,
          71,
          72,
          73,
          74,
          75,
          76,
          77,
          78,
          79,
          81,
          113,
          114,
          115,
          116,
          117,
          118,
          119,
          120,
          128,
          137
        ]
      },
      {
        "test_lines": [
          66,
          70
        ],
        "covered_lines": [
          41,
          42,
          43,
          51,
          52,
          55,
          69,
          70,
          71,
          72,
          73,
          74,
          75,
          76,
          77,
          78,
          79,
          81,
          113,
          114,
          115,
          116,
          117,
          118,
          119,
          120,
          128,
          137
        ]
      },
      {
        "test_lines": [
          72,
          88
        ],
        "covered_lines": [
          41,
          42,
          43,
          51,
          52,
          55,
          69,
          70,
          71,
          72,
          73,
          74,
          75,
          76,
          77,
          78,
          79,
          81,
          113,
          114,
          115,
          116,
          117,
          118,
          119,
          120,
          128,
          137
        ]
      },
      {
        "test_lines": [
          90,
          101
        ],
        "covered_lines": [
          41,
          42,
          43,
          51,
          52,
          55,
          69,
          70,
          71,
          72,
          73,
          74,
          75,
          76,
          77,
          78,
          79,
          81,
          113,
          114,
          115,
          116,
          117,
          118,
          119,
          120,
          128,
          137
        ]
      },
      {
        "test_lines": [
          103,
          116
        ],
        "covered_lines": [
          41,
          42,
          43,
          51,
          52,
          55,
          69,
          70,
          71,
          72,
          73,
          74,
          75,
          76,
          77,
          78,
          79,
          81,
          113,
          114,
          115,
          116,
          117,
          118,
          119,
          120,
          128,
          137
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/itext-java/layout/src/main/java/com/itextpdf/layout/properties/ContinuousContainer.java": {
    "class_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.layout.properties;\n",
      "\n",
      "import com.itextpdf.layout.IPropertyContainer;\n",
      "import com.itextpdf.layout.borders.Border;\n",
      "import com.itextpdf.layout.renderer.AbstractRenderer;\n",
      "import com.itextpdf.layout.renderer.IRenderer;\n",
      "\n",
      "import java.util.HashMap;\n",
      "\n",
      "/**\n",
      " * This class is used to store properties of the renderer that are needed to be removed/reapplied.\n",
      " * THis is used for processing continuous container property.\n",
      " * This behavior is used when we want to simulate a continuous appearance over multiple pages.\n",
      " * This means that only for the first and last page the margins, paddings and borders are applied.\n",
      " * On the first page the top properties are applied and on the last page the bottom properties are applied.\n",
      " */\n",
      "public final class ContinuousContainer {\n",
      "\n",
      "    /**\n",
      "     * Properties needed to be removed/added for continuous container.\n",
      "     */\n",
      "    private static final int[] PROPERTIES_NEEDED_FOR_CONTINUOUS_CONTAINER = {Property.MARGIN_BOTTOM,\n",
      "            Property.BORDER_BOTTOM,\n",
      "            Property.PADDING_BOTTOM, Property.BORDER};\n",
      "    private final HashMap<Integer, Object> properties = new HashMap<>();\n",
      "\n",
      "\n",
      "    /**\n",
      "     * Creates a new {@link ContinuousContainer} instance.\n",
      "     *\n",
      "     * @param renderer the renderer that is used to get properties from.\n",
      "     */\n",
      "    private ContinuousContainer(IRenderer renderer) {\n",
      "        for (int property : PROPERTIES_NEEDED_FOR_CONTINUOUS_CONTAINER) {\n",
      "            properties.put(property, renderer.<Object>getProperty(property));\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Removes properties from the overflow renderer that are not needed for continuous container.\n",
      "     *\n",
      "     * @param overFlowRenderer the renderer that is used to remove properties from.\n",
      "     */\n",
      "    public static void clearPropertiesFromOverFlowRenderer(IPropertyContainer overFlowRenderer) {\n",
      "        if (overFlowRenderer == null) {\n",
      "            return;\n",
      "        }\n",
      "        if (Boolean.TRUE.equals(overFlowRenderer.<Boolean>getProperty(Property.TREAT_AS_CONTINUOUS_CONTAINER))) {\n",
      "            overFlowRenderer.setProperty(Property.PADDING_TOP, UnitValue.createPointValue(0));\n",
      "            overFlowRenderer.setProperty(Property.MARGIN_TOP, UnitValue.createPointValue(0));\n",
      "            overFlowRenderer.setProperty(Property.BORDER_TOP, null);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Sets up the needed values in the model element of the renderer.\n",
      "     *\n",
      "     * @param blockRenderer the renderer that is used to set up continuous container.\n",
      "     */\n",
      "    public static void setupContinuousContainerIfNeeded(AbstractRenderer blockRenderer) {\n",
      "        if (Boolean.TRUE.equals(blockRenderer.<Boolean>getProperty(Property.TREAT_AS_CONTINUOUS_CONTAINER))) {\n",
      "            if (!blockRenderer.hasProperty(Property.TREAT_AS_CONTINUOUS_CONTAINER_RESULT)) {\n",
      "                final ContinuousContainer continuousContainer = new ContinuousContainer(blockRenderer);\n",
      "                blockRenderer\n",
      "                        .setProperty(Property.TREAT_AS_CONTINUOUS_CONTAINER_RESULT, continuousContainer);\n",
      "            }\n",
      "            clearPropertiesFromSplitRenderer(blockRenderer);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    private static void clearPropertiesFromSplitRenderer(AbstractRenderer blockRenderer) {\n",
      "        if (blockRenderer == null) {\n",
      "            return;\n",
      "        }\n",
      "        blockRenderer.setProperty(Property.MARGIN_BOTTOM, UnitValue.createPointValue(0));\n",
      "        blockRenderer.setProperty(Property.BORDER_BOTTOM, null);\n",
      "        blockRenderer.setProperty(Property.PADDING_BOTTOM, UnitValue.createPointValue(0));\n",
      "\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Re adds the properties that were removed from the overflow renderer.\n",
      "     *\n",
      "     * @param blockRenderer the renderer that is used to reapply properties.\n",
      "     */\n",
      "    public void reApplyProperties(AbstractRenderer blockRenderer) {\n",
      "        for (int property : PROPERTIES_NEEDED_FOR_CONTINUOUS_CONTAINER) {\n",
      "            blockRenderer.setProperty(property, properties.get(property));\n",
      "        }\n",
      "        final Border allBorders = (Border) properties.get(Property.BORDER);\n",
      "        final Border bottomBorder = (Border) properties.get(Property.BORDER_BOTTOM);\n",
      "        if (allBorders != null && bottomBorder == null) {\n",
      "            blockRenderer.setProperty(Property.BORDER_BOTTOM, allBorders);\n",
      "        }\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.layout.properties;\n",
      "\n",
      "import com.itextpdf.commons.utils.PlaceHolderTextUtil;\n",
      "import com.itextpdf.commons.utils.PlaceHolderTextUtil.PlaceHolderTextBy;\n",
      "import com.itextpdf.kernel.colors.Color;\n",
      "import com.itextpdf.kernel.colors.ColorConstants;\n",
      "import com.itextpdf.kernel.pdf.PdfDocument;\n",
      "import com.itextpdf.kernel.utils.CompareTool;\n",
      "import com.itextpdf.layout.Document;\n",
      "import com.itextpdf.layout.borders.Border;\n",
      "import com.itextpdf.layout.borders.SolidBorder;\n",
      "import com.itextpdf.layout.element.AreaBreak;\n",
      "import com.itextpdf.layout.element.Div;\n",
      "import com.itextpdf.layout.element.IBlockElement;\n",
      "import com.itextpdf.layout.element.List;\n",
      "import com.itextpdf.layout.element.ListItem;\n",
      "import com.itextpdf.layout.element.Paragraph;\n",
      "import com.itextpdf.layout.element.Table;\n",
      "import com.itextpdf.test.ExtendedITextTest;\n",
      "import com.itextpdf.test.annotations.type.IntegrationTest;\n",
      "\n",
      "import java.io.IOException;\n",
      "import java.util.function.Consumer;\n",
      "import org.junit.Assert;\n",
      "import org.junit.BeforeClass;\n",
      "import org.junit.Test;\n",
      "import org.junit.experimental.categories.Category;\n",
      "\n",
      "@Category(IntegrationTest.class)\n",
      "public class ContinuousContainerTest extends ExtendedITextTest {\n",
      "\n",
      "\n",
      "    public static final String SOURCE_FOLDER = \"./src/test/resources/com/itextpdf/layout/ContinuousContainerTest/\";\n",
      "    public static final String DESTINATION_FOLDER = \"./target/test/com/itextpdf/layout/ContinuousContainerTest/\";\n",
      "\n",
      "    private static final float DEFAULT_PADDING = 40F;\n",
      "    private static final float DEFAULT_MARGIN = 100F;\n",
      "    private static final Color DEFAULT_BACKGROUND_COLOR = ColorConstants.CYAN;\n",
      "    private static final Border DEFAULT_BORDER = new SolidBorder(ColorConstants.RED, 5F);\n",
      "\n",
      "    @BeforeClass\n",
      "    public static void beforeClass() {\n",
      "        createDestinationFolder(DESTINATION_FOLDER);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void blockRendererMarginTop() throws IOException, InterruptedException {\n",
      "        executeTest(\"blockRendererMarginTop\", new Div(), ctx -> {\n",
      "            ctx.setBackgroundColor(DEFAULT_BACKGROUND_COLOR);\n",
      "            ctx.setMarginTop(DEFAULT_MARGIN);\n",
      "            for (int i = 0; i < 30; i++) {\n",
      "                ctx.add(new Paragraph(PlaceHolderTextUtil.getPlaceHolderText(PlaceHolderTextBy.WORDS, 5)));\n",
      "            }\n",
      "        });\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void blockRendererMarginBottom() throws IOException, InterruptedException {\n",
      "        executeTest(\"blockRendererMarginBottom\", new Div(), ctx -> {\n",
      "            ctx.setBackgroundColor(DEFAULT_BACKGROUND_COLOR);\n",
      "            ctx.setMarginBottom(DEFAULT_MARGIN);\n",
      "            for (int i = 0; i < 30; i++) {\n",
      "                ctx.add(new Paragraph(PlaceHolderTextUtil.getPlaceHolderText(PlaceHolderTextBy.WORDS, 5)));\n",
      "            }\n",
      "        });\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void blockRendererMarginAll() throws IOException, InterruptedException {\n",
      "        executeTest(\"blockRendererMarginAll\", new Div(), ctx -> {\n",
      "            ctx.setBackgroundColor(DEFAULT_BACKGROUND_COLOR);\n",
      "            ctx.setMargin(100);\n",
      "            for (int i = 0; i < 30; i++) {\n",
      "                ctx.add(new Paragraph(PlaceHolderTextUtil.getPlaceHolderText(PlaceHolderTextBy.WORDS, 5)));\n",
      "            }\n",
      "        });\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void blockRendererPaddingTop() throws IOException, InterruptedException {\n",
      "        executeTest(\"blockRendererPaddingTop\", new Div(), ctx -> {\n",
      "            ctx.setBackgroundColor(DEFAULT_BACKGROUND_COLOR);\n",
      "            ctx.setPaddingTop(DEFAULT_PADDING);\n",
      "            for (int i = 0; i < 30; i++) {\n",
      "                ctx.add(new Paragraph(PlaceHolderTextUtil.getPlaceHolderText(PlaceHolderTextBy.WORDS, 5)));\n",
      "            }\n",
      "        });\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void blockRendererPaddingBottom() throws IOException, InterruptedException {\n",
      "        executeTest(\"blockRendererPaddingBottom\", new Div(), ctx -> {\n",
      "            ctx.setBackgroundColor(DEFAULT_BACKGROUND_COLOR);\n",
      "            ctx.setPaddingBottom(DEFAULT_PADDING);\n",
      "            for (int i = 0; i < 30; i++) {\n",
      "                ctx.add(new Paragraph(PlaceHolderTextUtil.getPlaceHolderText(PlaceHolderTextBy.WORDS, 5)));\n",
      "            }\n",
      "        });\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void blockRendererPaddingAll() throws IOException, InterruptedException {\n",
      "        executeTest(\"blockRendererPaddingAll\", new Div(), ctx -> {\n",
      "            ctx.setBackgroundColor(DEFAULT_BACKGROUND_COLOR);\n",
      "            ctx.setPadding(DEFAULT_PADDING);\n",
      "            for (int i = 0; i < 30; i++) {\n",
      "                ctx.add(new Paragraph(PlaceHolderTextUtil.getPlaceHolderText(PlaceHolderTextBy.WORDS, 5)));\n",
      "            }\n",
      "        });\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void blockRendererBorderTop() throws IOException, InterruptedException {\n",
      "        executeTest(\"blockRendererBorderTop\", new Div(), ctx -> {\n",
      "            ctx.setBackgroundColor(DEFAULT_BACKGROUND_COLOR);\n",
      "            ctx.setBorderTop(DEFAULT_BORDER);\n",
      "            for (int i = 0; i < 30; i++) {\n",
      "                ctx.add(new Paragraph(PlaceHolderTextUtil.getPlaceHolderText(PlaceHolderTextBy.WORDS, 5)));\n",
      "            }\n",
      "        });\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void blockRendererBorderBottom() throws IOException, InterruptedException {\n",
      "        executeTest(\"blockRendererBorderBottom\", new Div(), ctx -> {\n",
      "            ctx.setBackgroundColor(DEFAULT_BACKGROUND_COLOR);\n",
      "            ctx.setBorderBottom(DEFAULT_BORDER);\n",
      "            for (int i = 0; i < 30; i++) {\n",
      "                ctx.add(new Paragraph(PlaceHolderTextUtil.getPlaceHolderText(PlaceHolderTextBy.WORDS, 5)));\n",
      "            }\n",
      "        });\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void blockRendererBorderAll() throws IOException, InterruptedException {\n",
      "        executeTest(\"blockRendererBorderAll\", new Div(), ctx -> {\n",
      "            ctx.setBackgroundColor(DEFAULT_BACKGROUND_COLOR);\n",
      "            ctx.setBorder(DEFAULT_BORDER);\n",
      "            for (int i = 0; i < 30; i++) {\n",
      "                ctx.add(new Paragraph(PlaceHolderTextUtil.getPlaceHolderText(PlaceHolderTextBy.WORDS, 5)));\n",
      "            }\n",
      "        });\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void blockRendererBorderWideAll() throws IOException, InterruptedException {\n",
      "        executeTest(\"blockRendererBorderWideAll\", new Div(), ctx -> {\n",
      "            ctx.setBackgroundColor(DEFAULT_BACKGROUND_COLOR);\n",
      "            ctx.setBorder(new SolidBorder(ColorConstants.GREEN, 50F));\n",
      "            for (int i = 0; i < 30; i++) {\n",
      "                ctx.add(new Paragraph(PlaceHolderTextUtil.getPlaceHolderText(PlaceHolderTextBy.WORDS, 5)));\n",
      "            }\n",
      "        });\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    public void blockRendererMultiPageBorderPaddingMargin() throws IOException, InterruptedException {\n",
      "        executeTest(\"blockRendererMultiPageBorderPaddingMargin\", new Div(), ctx -> {\n",
      "            ctx.setBackgroundColor(DEFAULT_BACKGROUND_COLOR);\n",
      "            ctx.setBorder(DEFAULT_BORDER);\n",
      "            ctx.setMarginTop(DEFAULT_MARGIN);\n",
      "            ctx.setMarginBottom(DEFAULT_MARGIN);\n",
      "            ctx.setPaddingTop(DEFAULT_PADDING);\n",
      "            ctx.setPaddingBottom(DEFAULT_PADDING);\n",
      "            for (int i = 0; i < 100; i++) {\n",
      "                ctx.add(new Paragraph(PlaceHolderTextUtil.getPlaceHolderText(PlaceHolderTextBy.WORDS, 10)));\n",
      "            }\n",
      "        });\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void blockRendererWithComplexInnerElements() throws IOException, InterruptedException {\n",
      "        executeTest(\"blockRendererWithComplexInnerElements\", new Div(), ctx -> {\n",
      "            ctx.setBackgroundColor(DEFAULT_BACKGROUND_COLOR);\n",
      "            ctx.setBorder(DEFAULT_BORDER);\n",
      "            ctx.setMarginTop(40);\n",
      "            ctx.setMarginBottom(80);\n",
      "            ctx.setPaddingTop(40);\n",
      "            ctx.setPaddingBottom(20);\n",
      "            Table table = new Table(3);\n",
      "            for (int i = 0; i < 99; i++) {\n",
      "                table.addCell(new Paragraph(\"Some text\"));\n",
      "            }\n",
      "            ctx.add(table);\n",
      "            ctx.add(new Paragraph(\"Before area break\"));\n",
      "            ctx.add(new AreaBreak());\n",
      "            ctx.add(new AreaBreak());\n",
      "            ctx.add(new Paragraph(\"after area break\"));\n",
      "            List list = new List();\n",
      "            for (int i = 0; i < 150; i++) {\n",
      "                list.add(new ListItem(\"Bing\"));\n",
      "            }\n",
      "            ctx.add(list);\n",
      "\n",
      "        });\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void blockRendererception() throws IOException, InterruptedException {\n",
      "        executeTest(\"blockRenderception\", new Div(), ctx -> {\n",
      "            ctx.setBackgroundColor(DEFAULT_BACKGROUND_COLOR);\n",
      "            ctx.setBorder(DEFAULT_BORDER);\n",
      "            ctx.setMarginTop(DEFAULT_MARGIN / 2);\n",
      "            ctx.setMarginBottom(DEFAULT_MARGIN / 2);\n",
      "            ctx.setPaddingTop(DEFAULT_PADDING / 2);\n",
      "            ctx.setPaddingBottom(DEFAULT_PADDING / 2);\n",
      "            ctx.setPaddingLeft(15);\n",
      "            ctx.setPaddingRight(15);\n",
      "\n",
      "            Div div1 = new Div();\n",
      "            div1.setBackgroundColor(ColorConstants.PINK);\n",
      "            div1.setBorder(new SolidBorder(ColorConstants.BLUE, 3));\n",
      "            div1.setMargin(DEFAULT_MARGIN / 2);\n",
      "            div1.setPadding(DEFAULT_PADDING / 2);\n",
      "\n",
      "            Div div2 = new Div();\n",
      "            div2.setBackgroundColor(ColorConstants.GREEN);\n",
      "            div2.setBorder(new SolidBorder(ColorConstants.RED, 3));\n",
      "            div2.setMargin(DEFAULT_MARGIN / 2);\n",
      "            div2.setPadding(DEFAULT_PADDING / 2);\n",
      "\n",
      "            for (int i = 0; i < 60; i++) {\n",
      "                div2.add(new Paragraph(\"Bing bong\"));\n",
      "            }\n",
      "\n",
      "            div1.add(div2);\n",
      "            ctx.add(div1);\n",
      "\n",
      "        });\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void paragraphRendererMarginTop() throws IOException, InterruptedException {\n",
      "        executeTest(\"paragraphRendererMarginTop\", new Paragraph(), ctx -> {\n",
      "            ctx.setBackgroundColor(DEFAULT_BACKGROUND_COLOR);\n",
      "            ctx.setMarginTop(DEFAULT_MARGIN);\n",
      "            ctx.add(PlaceHolderTextUtil.getPlaceHolderText(PlaceHolderTextBy.WORDS, 1500));\n",
      "        });\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void paragraphRendererMarginBottom() throws IOException, InterruptedException {\n",
      "        executeTest(\"paragraphRendererMarginBottom\", new Paragraph(), ctx -> {\n",
      "            ctx.setBackgroundColor(DEFAULT_BACKGROUND_COLOR);\n",
      "            ctx.setMarginBottom(DEFAULT_MARGIN);\n",
      "            final int amountOfWords = 1000;\n",
      "            ctx.add(PlaceHolderTextUtil.getPlaceHolderText(PlaceHolderTextBy.WORDS, amountOfWords));\n",
      "        });\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void paragraphRendererMarginAll() throws IOException, InterruptedException {\n",
      "        executeTest(\"paragraphRendererMarginAll\", new Paragraph(), ctx -> {\n",
      "            ctx.setBackgroundColor(DEFAULT_BACKGROUND_COLOR);\n",
      "            ctx.setMargin(DEFAULT_MARGIN);\n",
      "            final int amountOfWords = 1000;\n",
      "            ctx.add(PlaceHolderTextUtil.getPlaceHolderText(PlaceHolderTextBy.WORDS, amountOfWords));\n",
      "        });\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void paragraphRendererFitsWithoutMarginButWeTriggerOverflow()\n",
      "            throws IOException, InterruptedException {\n",
      "        executeTest(\"paragraphRendererFitsWithoutMarginButWeTriggerOverflow\", new Paragraph(), ctx -> {\n",
      "            ctx.setBackgroundColor(DEFAULT_BACKGROUND_COLOR);\n",
      "            //just the right amount of words to fit the paragraph on the page\n",
      "            final int amountOfWords = 900;\n",
      "            //trigger overflow\n",
      "            ctx.setMarginTop(20);\n",
      "            ctx.add(PlaceHolderTextUtil.getPlaceHolderText(PlaceHolderTextBy.WORDS, amountOfWords));\n",
      "        });\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    public void paragraphRendererFitsWithoutPaddingButWeTriggerOverflow()\n",
      "            throws IOException, InterruptedException {\n",
      "        executeTest(\"paragraphRendererFitsWithoutPaddingButWeTriggerOverflow\", new Paragraph(), ctx -> {\n",
      "            ctx.setBackgroundColor(DEFAULT_BACKGROUND_COLOR);\n",
      "            //just the right amount of words to fit the paragraph on the page\n",
      "            final int amountOfWords = 900;\n",
      "            //trigger overflow with small padding\n",
      "            ctx.setPaddingTop(20);\n",
      "            ctx.add(PlaceHolderTextUtil.getPlaceHolderText(PlaceHolderTextBy.WORDS, amountOfWords));\n",
      "        });\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    public void paragraphRendererFitsWithoutBorderButWeTriggerOverflow()\n",
      "            throws IOException, InterruptedException {\n",
      "        executeTest(\"paragraphRendererFitsWithoutBorderButWeTriggerOverflow\", new Paragraph(), ctx -> {\n",
      "            ctx.setBackgroundColor(DEFAULT_BACKGROUND_COLOR);\n",
      "            //just the right amount of words to fit the paragraph on the page\n",
      "            final int amountOfWords = 900;\n",
      "            //trigger overflow\n",
      "            ctx.setBorder(new SolidBorder(ColorConstants.RED, 8));\n",
      "            ctx.add(PlaceHolderTextUtil.getPlaceHolderText(PlaceHolderTextBy.WORDS, amountOfWords));\n",
      "        });\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void paragraphRendererPaddingTop() throws IOException, InterruptedException {\n",
      "        executeTest(\"paragraphRendererPaddingTop\", new Paragraph(), ctx -> {\n",
      "            ctx.setBackgroundColor(DEFAULT_BACKGROUND_COLOR);\n",
      "            ctx.setPaddingTop(DEFAULT_PADDING);\n",
      "            final int amountOfWords = 1000;\n",
      "            ctx.add(PlaceHolderTextUtil.getPlaceHolderText(PlaceHolderTextBy.WORDS, amountOfWords));\n",
      "        });\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void paragraphRendererPaddingBottom() throws IOException, InterruptedException {\n",
      "        executeTest(\"paragraphRendererPaddingBottom\", new Paragraph(), ctx -> {\n",
      "            ctx.setBackgroundColor(DEFAULT_BACKGROUND_COLOR);\n",
      "            ctx.setPaddingBottom(DEFAULT_PADDING);\n",
      "            final int amountOfWords = 1000;\n",
      "            ctx.add(PlaceHolderTextUtil.getPlaceHolderText(PlaceHolderTextBy.WORDS, amountOfWords));\n",
      "        });\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void paragraphRendererPaddingAll() throws IOException, InterruptedException {\n",
      "        executeTest(\"paragraphRendererPaddingAll\", new Paragraph(), ctx -> {\n",
      "            ctx.setBackgroundColor(DEFAULT_BACKGROUND_COLOR);\n",
      "            ctx.setPadding(DEFAULT_PADDING);\n",
      "            final int amountOfWords = 1000;\n",
      "            ctx.add(PlaceHolderTextUtil.getPlaceHolderText(PlaceHolderTextBy.WORDS, amountOfWords));\n",
      "        });\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void paragraphRendererBorderTop() throws IOException, InterruptedException {\n",
      "        executeTest(\"paragraphRendererBorderTop\", new Paragraph(), ctx -> {\n",
      "            ctx.setBackgroundColor(DEFAULT_BACKGROUND_COLOR);\n",
      "            ctx.setBorderTop(DEFAULT_BORDER);\n",
      "            final int amountOfWords = 1000;\n",
      "            ctx.add(PlaceHolderTextUtil.getPlaceHolderText(PlaceHolderTextBy.WORDS, amountOfWords));\n",
      "        });\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void paragraphRendererBorderBottom() throws IOException, InterruptedException {\n",
      "        executeTest(\"paragraphRendererBorderBottom\", new Paragraph(), ctx -> {\n",
      "            ctx.setBackgroundColor(DEFAULT_BACKGROUND_COLOR);\n",
      "            ctx.setBorderBottom(DEFAULT_BORDER);\n",
      "            final int amountOfWords = 1000;\n",
      "            ctx.add(PlaceHolderTextUtil.getPlaceHolderText(PlaceHolderTextBy.WORDS, amountOfWords));\n",
      "        });\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void paragraphRendererBorderAll() throws IOException, InterruptedException {\n",
      "        executeTest(\"paragraphRendererBorderAll\", new Paragraph(), ctx -> {\n",
      "            ctx.setBackgroundColor(DEFAULT_BACKGROUND_COLOR);\n",
      "            ctx.setBorder(DEFAULT_BORDER);\n",
      "            final int amountOfWords = 1000;\n",
      "            ctx.add(PlaceHolderTextUtil.getPlaceHolderText(PlaceHolderTextBy.WORDS, amountOfWords));\n",
      "        });\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    public void paragraphRendererWideBorderAll() throws IOException, InterruptedException {\n",
      "        executeTest(\"paragraphRendererWideBorderAll\", new Paragraph(), ctx -> {\n",
      "            ctx.setBackgroundColor(DEFAULT_BACKGROUND_COLOR);\n",
      "            ctx.setBorder(new SolidBorder(ColorConstants.GREEN, 25));\n",
      "            final int amountOfWords = 1000;\n",
      "            ctx.add(PlaceHolderTextUtil.getPlaceHolderText(PlaceHolderTextBy.WORDS, amountOfWords));\n",
      "        });\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void paragraphRendererBorderMarginPadding() throws IOException, InterruptedException {\n",
      "        executeTest(\"paragraphRendererBorderMarginPadding\", new Paragraph(), ctx -> {\n",
      "            ctx.setBackgroundColor(DEFAULT_BACKGROUND_COLOR);\n",
      "            ctx.setPadding(DEFAULT_PADDING);\n",
      "            ctx.setMargin(DEFAULT_MARGIN);\n",
      "            ctx.setBorder(DEFAULT_BORDER);\n",
      "            final int amountOfWords = 1000;\n",
      "            ctx.add(PlaceHolderTextUtil.getPlaceHolderText(PlaceHolderTextBy.WORDS, amountOfWords));\n",
      "        });\n",
      "    }\n",
      "\n",
      "    private <T extends IBlockElement> void executeTest(String testName, T container, Consumer<T> executor)\n",
      "            throws IOException, InterruptedException {\n",
      "        String filename = DESTINATION_FOLDER + testName + \".pdf\";\n",
      "        String cmpName = SOURCE_FOLDER + \"cmp_\" + testName + \".pdf\";\n",
      "        try (PdfDocument pdfDoc = new PdfDocument(new com.itextpdf.kernel.pdf.PdfWriter(filename))) {\n",
      "            Document doc = new Document(pdfDoc);\n",
      "\n",
      "            container.setProperty(Property.TREAT_AS_CONTINUOUS_CONTAINER, true);\n",
      "            executor.accept(container);\n",
      "\n",
      "            doc.add(new Paragraph(\"ELEMENT ABOVE\").setBackgroundColor(ColorConstants.YELLOW));\n",
      "            doc.add(container);\n",
      "            doc.add(new Paragraph(\"ELEMENT BELOW\").setBackgroundColor(ColorConstants.YELLOW));\n",
      "        }\n",
      "        CompareTool compareTool = new CompareTool();\n",
      "        Assert.assertNull(compareTool.compareByContent(filename, cmpName, DESTINATION_FOLDER, \"diff_\"));\n",
      "    }\n",
      "\n",
      "}\n"
    ],
    "method_lines_dic": {
      "ContinuousContainer::::clearPropertiesFromOverFlowRenderer(com.itextpdf.layout.IPropertyContainer)": [
        66,
        75
      ],
      "ContinuousContainer::::setupContinuousContainerIfNeeded(com.itextpdf.layout.renderer.AbstractRenderer)": [
        82,
        91
      ],
      "ContinuousContainer::::clearPropertiesFromSplitRenderer(com.itextpdf.layout.renderer.AbstractRenderer)": [
        93,
        101
      ],
      "ContinuousContainer::::reApplyProperties(com.itextpdf.layout.renderer.AbstractRenderer)": [
        108,
        117
      ]
    },
    "test_method_lines_dic": {
      "ContinuousContainerTest::::beforeClass()": [
        63,
        66
      ],
      "ContinuousContainerTest::::blockRendererMarginTop()": [
        68,
        77
      ],
      "ContinuousContainerTest::::blockRendererMarginBottom()": [
        79,
        88
      ],
      "ContinuousContainerTest::::blockRendererMarginAll()": [
        90,
        99
      ],
      "ContinuousContainerTest::::blockRendererPaddingTop()": [
        101,
        110
      ],
      "ContinuousContainerTest::::blockRendererPaddingBottom()": [
        112,
        121
      ],
      "ContinuousContainerTest::::blockRendererPaddingAll()": [
        123,
        132
      ],
      "ContinuousContainerTest::::blockRendererBorderTop()": [
        134,
        143
      ],
      "ContinuousContainerTest::::blockRendererBorderBottom()": [
        145,
        154
      ],
      "ContinuousContainerTest::::blockRendererBorderAll()": [
        156,
        165
      ],
      "ContinuousContainerTest::::blockRendererBorderWideAll()": [
        167,
        176
      ],
      "ContinuousContainerTest::::blockRendererMultiPageBorderPaddingMargin()": [
        179,
        192
      ],
      "ContinuousContainerTest::::blockRendererWithComplexInnerElements()": [
        194,
        219
      ],
      "ContinuousContainerTest::::blockRendererception()": [
        221,
        253
      ],
      "ContinuousContainerTest::::paragraphRendererMarginTop()": [
        255,
        262
      ],
      "ContinuousContainerTest::::paragraphRendererMarginBottom()": [
        264,
        272
      ],
      "ContinuousContainerTest::::paragraphRendererMarginAll()": [
        274,
        282
      ],
      "ContinuousContainerTest::::paragraphRendererFitsWithoutMarginButWeTriggerOverflow()": [
        284,
        295
      ],
      "ContinuousContainerTest::::paragraphRendererFitsWithoutPaddingButWeTriggerOverflow()": [
        298,
        309
      ],
      "ContinuousContainerTest::::paragraphRendererFitsWithoutBorderButWeTriggerOverflow()": [
        312,
        323
      ],
      "ContinuousContainerTest::::paragraphRendererPaddingTop()": [
        325,
        333
      ],
      "ContinuousContainerTest::::paragraphRendererPaddingBottom()": [
        335,
        343
      ],
      "ContinuousContainerTest::::paragraphRendererPaddingAll()": [
        345,
        353
      ],
      "ContinuousContainerTest::::paragraphRendererBorderTop()": [
        355,
        363
      ],
      "ContinuousContainerTest::::paragraphRendererBorderBottom()": [
        365,
        373
      ],
      "ContinuousContainerTest::::paragraphRendererBorderAll()": [
        375,
        383
      ],
      "ContinuousContainerTest::::paragraphRendererWideBorderAll()": [
        386,
        394
      ],
      "ContinuousContainerTest::::paragraphRendererBorderMarginPadding()": [
        396,
        406
      ],
      "ContinuousContainerTest::::executeTest(java.lang.String,T,java.util.function.Consumer<T>)": [
        408,
        424
      ]
    },
    "reverse_method_lines_dic": {
      "66": "ContinuousContainer::::clearPropertiesFromOverFlowRenderer(com.itextpdf.layout.IPropertyContainer)",
      "67": "ContinuousContainer::::clearPropertiesFromOverFlowRenderer(com.itextpdf.layout.IPropertyContainer)",
      "68": "ContinuousContainer::::clearPropertiesFromOverFlowRenderer(com.itextpdf.layout.IPropertyContainer)",
      "69": "ContinuousContainer::::clearPropertiesFromOverFlowRenderer(com.itextpdf.layout.IPropertyContainer)",
      "70": "ContinuousContainer::::clearPropertiesFromOverFlowRenderer(com.itextpdf.layout.IPropertyContainer)",
      "71": "ContinuousContainer::::clearPropertiesFromOverFlowRenderer(com.itextpdf.layout.IPropertyContainer)",
      "72": "ContinuousContainer::::clearPropertiesFromOverFlowRenderer(com.itextpdf.layout.IPropertyContainer)",
      "73": "ContinuousContainer::::clearPropertiesFromOverFlowRenderer(com.itextpdf.layout.IPropertyContainer)",
      "74": "ContinuousContainer::::clearPropertiesFromOverFlowRenderer(com.itextpdf.layout.IPropertyContainer)",
      "75": "ContinuousContainer::::clearPropertiesFromOverFlowRenderer(com.itextpdf.layout.IPropertyContainer)",
      "82": "ContinuousContainer::::setupContinuousContainerIfNeeded(com.itextpdf.layout.renderer.AbstractRenderer)",
      "83": "ContinuousContainer::::setupContinuousContainerIfNeeded(com.itextpdf.layout.renderer.AbstractRenderer)",
      "84": "ContinuousContainer::::setupContinuousContainerIfNeeded(com.itextpdf.layout.renderer.AbstractRenderer)",
      "85": "ContinuousContainer::::setupContinuousContainerIfNeeded(com.itextpdf.layout.renderer.AbstractRenderer)",
      "86": "ContinuousContainer::::setupContinuousContainerIfNeeded(com.itextpdf.layout.renderer.AbstractRenderer)",
      "87": "ContinuousContainer::::setupContinuousContainerIfNeeded(com.itextpdf.layout.renderer.AbstractRenderer)",
      "88": "ContinuousContainer::::setupContinuousContainerIfNeeded(com.itextpdf.layout.renderer.AbstractRenderer)",
      "89": "ContinuousContainer::::setupContinuousContainerIfNeeded(com.itextpdf.layout.renderer.AbstractRenderer)",
      "90": "ContinuousContainer::::setupContinuousContainerIfNeeded(com.itextpdf.layout.renderer.AbstractRenderer)",
      "91": "ContinuousContainer::::setupContinuousContainerIfNeeded(com.itextpdf.layout.renderer.AbstractRenderer)",
      "93": "ContinuousContainer::::clearPropertiesFromSplitRenderer(com.itextpdf.layout.renderer.AbstractRenderer)",
      "94": "ContinuousContainer::::clearPropertiesFromSplitRenderer(com.itextpdf.layout.renderer.AbstractRenderer)",
      "95": "ContinuousContainer::::clearPropertiesFromSplitRenderer(com.itextpdf.layout.renderer.AbstractRenderer)",
      "96": "ContinuousContainer::::clearPropertiesFromSplitRenderer(com.itextpdf.layout.renderer.AbstractRenderer)",
      "97": "ContinuousContainer::::clearPropertiesFromSplitRenderer(com.itextpdf.layout.renderer.AbstractRenderer)",
      "98": "ContinuousContainer::::clearPropertiesFromSplitRenderer(com.itextpdf.layout.renderer.AbstractRenderer)",
      "99": "ContinuousContainer::::clearPropertiesFromSplitRenderer(com.itextpdf.layout.renderer.AbstractRenderer)",
      "100": "ContinuousContainer::::clearPropertiesFromSplitRenderer(com.itextpdf.layout.renderer.AbstractRenderer)",
      "101": "ContinuousContainer::::clearPropertiesFromSplitRenderer(com.itextpdf.layout.renderer.AbstractRenderer)",
      "108": "ContinuousContainer::::reApplyProperties(com.itextpdf.layout.renderer.AbstractRenderer)",
      "109": "ContinuousContainer::::reApplyProperties(com.itextpdf.layout.renderer.AbstractRenderer)",
      "110": "ContinuousContainer::::reApplyProperties(com.itextpdf.layout.renderer.AbstractRenderer)",
      "111": "ContinuousContainer::::reApplyProperties(com.itextpdf.layout.renderer.AbstractRenderer)",
      "112": "ContinuousContainer::::reApplyProperties(com.itextpdf.layout.renderer.AbstractRenderer)",
      "113": "ContinuousContainer::::reApplyProperties(com.itextpdf.layout.renderer.AbstractRenderer)",
      "114": "ContinuousContainer::::reApplyProperties(com.itextpdf.layout.renderer.AbstractRenderer)",
      "115": "ContinuousContainer::::reApplyProperties(com.itextpdf.layout.renderer.AbstractRenderer)",
      "116": "ContinuousContainer::::reApplyProperties(com.itextpdf.layout.renderer.AbstractRenderer)",
      "117": "ContinuousContainer::::reApplyProperties(com.itextpdf.layout.renderer.AbstractRenderer)"
    },
    "test_reverse_method_lines_dic": {
      "63": "ContinuousContainerTest::::beforeClass()",
      "64": "ContinuousContainerTest::::beforeClass()",
      "65": "ContinuousContainerTest::::beforeClass()",
      "66": "ContinuousContainerTest::::beforeClass()",
      "68": "ContinuousContainerTest::::blockRendererMarginTop()",
      "69": "ContinuousContainerTest::::blockRendererMarginTop()",
      "70": "ContinuousContainerTest::::blockRendererMarginTop()",
      "71": "ContinuousContainerTest::::blockRendererMarginTop()",
      "72": "ContinuousContainerTest::::blockRendererMarginTop()",
      "73": "ContinuousContainerTest::::blockRendererMarginTop()",
      "74": "ContinuousContainerTest::::blockRendererMarginTop()",
      "75": "ContinuousContainerTest::::blockRendererMarginTop()",
      "76": "ContinuousContainerTest::::blockRendererMarginTop()",
      "77": "ContinuousContainerTest::::blockRendererMarginTop()",
      "79": "ContinuousContainerTest::::blockRendererMarginBottom()",
      "80": "ContinuousContainerTest::::blockRendererMarginBottom()",
      "81": "ContinuousContainerTest::::blockRendererMarginBottom()",
      "82": "ContinuousContainerTest::::blockRendererMarginBottom()",
      "83": "ContinuousContainerTest::::blockRendererMarginBottom()",
      "84": "ContinuousContainerTest::::blockRendererMarginBottom()",
      "85": "ContinuousContainerTest::::blockRendererMarginBottom()",
      "86": "ContinuousContainerTest::::blockRendererMarginBottom()",
      "87": "ContinuousContainerTest::::blockRendererMarginBottom()",
      "88": "ContinuousContainerTest::::blockRendererMarginBottom()",
      "90": "ContinuousContainerTest::::blockRendererMarginAll()",
      "91": "ContinuousContainerTest::::blockRendererMarginAll()",
      "92": "ContinuousContainerTest::::blockRendererMarginAll()",
      "93": "ContinuousContainerTest::::blockRendererMarginAll()",
      "94": "ContinuousContainerTest::::blockRendererMarginAll()",
      "95": "ContinuousContainerTest::::blockRendererMarginAll()",
      "96": "ContinuousContainerTest::::blockRendererMarginAll()",
      "97": "ContinuousContainerTest::::blockRendererMarginAll()",
      "98": "ContinuousContainerTest::::blockRendererMarginAll()",
      "99": "ContinuousContainerTest::::blockRendererMarginAll()",
      "101": "ContinuousContainerTest::::blockRendererPaddingTop()",
      "102": "ContinuousContainerTest::::blockRendererPaddingTop()",
      "103": "ContinuousContainerTest::::blockRendererPaddingTop()",
      "104": "ContinuousContainerTest::::blockRendererPaddingTop()",
      "105": "ContinuousContainerTest::::blockRendererPaddingTop()",
      "106": "ContinuousContainerTest::::blockRendererPaddingTop()",
      "107": "ContinuousContainerTest::::blockRendererPaddingTop()",
      "108": "ContinuousContainerTest::::blockRendererPaddingTop()",
      "109": "ContinuousContainerTest::::blockRendererPaddingTop()",
      "110": "ContinuousContainerTest::::blockRendererPaddingTop()",
      "112": "ContinuousContainerTest::::blockRendererPaddingBottom()",
      "113": "ContinuousContainerTest::::blockRendererPaddingBottom()",
      "114": "ContinuousContainerTest::::blockRendererPaddingBottom()",
      "115": "ContinuousContainerTest::::blockRendererPaddingBottom()",
      "116": "ContinuousContainerTest::::blockRendererPaddingBottom()",
      "117": "ContinuousContainerTest::::blockRendererPaddingBottom()",
      "118": "ContinuousContainerTest::::blockRendererPaddingBottom()",
      "119": "ContinuousContainerTest::::blockRendererPaddingBottom()",
      "120": "ContinuousContainerTest::::blockRendererPaddingBottom()",
      "121": "ContinuousContainerTest::::blockRendererPaddingBottom()",
      "123": "ContinuousContainerTest::::blockRendererPaddingAll()",
      "124": "ContinuousContainerTest::::blockRendererPaddingAll()",
      "125": "ContinuousContainerTest::::blockRendererPaddingAll()",
      "126": "ContinuousContainerTest::::blockRendererPaddingAll()",
      "127": "ContinuousContainerTest::::blockRendererPaddingAll()",
      "128": "ContinuousContainerTest::::blockRendererPaddingAll()",
      "129": "ContinuousContainerTest::::blockRendererPaddingAll()",
      "130": "ContinuousContainerTest::::blockRendererPaddingAll()",
      "131": "ContinuousContainerTest::::blockRendererPaddingAll()",
      "132": "ContinuousContainerTest::::blockRendererPaddingAll()",
      "134": "ContinuousContainerTest::::blockRendererBorderTop()",
      "135": "ContinuousContainerTest::::blockRendererBorderTop()",
      "136": "ContinuousContainerTest::::blockRendererBorderTop()",
      "137": "ContinuousContainerTest::::blockRendererBorderTop()",
      "138": "ContinuousContainerTest::::blockRendererBorderTop()",
      "139": "ContinuousContainerTest::::blockRendererBorderTop()",
      "140": "ContinuousContainerTest::::blockRendererBorderTop()",
      "141": "ContinuousContainerTest::::blockRendererBorderTop()",
      "142": "ContinuousContainerTest::::blockRendererBorderTop()",
      "143": "ContinuousContainerTest::::blockRendererBorderTop()",
      "145": "ContinuousContainerTest::::blockRendererBorderBottom()",
      "146": "ContinuousContainerTest::::blockRendererBorderBottom()",
      "147": "ContinuousContainerTest::::blockRendererBorderBottom()",
      "148": "ContinuousContainerTest::::blockRendererBorderBottom()",
      "149": "ContinuousContainerTest::::blockRendererBorderBottom()",
      "150": "ContinuousContainerTest::::blockRendererBorderBottom()",
      "151": "ContinuousContainerTest::::blockRendererBorderBottom()",
      "152": "ContinuousContainerTest::::blockRendererBorderBottom()",
      "153": "ContinuousContainerTest::::blockRendererBorderBottom()",
      "154": "ContinuousContainerTest::::blockRendererBorderBottom()",
      "156": "ContinuousContainerTest::::blockRendererBorderAll()",
      "157": "ContinuousContainerTest::::blockRendererBorderAll()",
      "158": "ContinuousContainerTest::::blockRendererBorderAll()",
      "159": "ContinuousContainerTest::::blockRendererBorderAll()",
      "160": "ContinuousContainerTest::::blockRendererBorderAll()",
      "161": "ContinuousContainerTest::::blockRendererBorderAll()",
      "162": "ContinuousContainerTest::::blockRendererBorderAll()",
      "163": "ContinuousContainerTest::::blockRendererBorderAll()",
      "164": "ContinuousContainerTest::::blockRendererBorderAll()",
      "165": "ContinuousContainerTest::::blockRendererBorderAll()",
      "167": "ContinuousContainerTest::::blockRendererBorderWideAll()",
      "168": "ContinuousContainerTest::::blockRendererBorderWideAll()",
      "169": "ContinuousContainerTest::::blockRendererBorderWideAll()",
      "170": "ContinuousContainerTest::::blockRendererBorderWideAll()",
      "171": "ContinuousContainerTest::::blockRendererBorderWideAll()",
      "172": "ContinuousContainerTest::::blockRendererBorderWideAll()",
      "173": "ContinuousContainerTest::::blockRendererBorderWideAll()",
      "174": "ContinuousContainerTest::::blockRendererBorderWideAll()",
      "175": "ContinuousContainerTest::::blockRendererBorderWideAll()",
      "176": "ContinuousContainerTest::::blockRendererBorderWideAll()",
      "179": "ContinuousContainerTest::::blockRendererMultiPageBorderPaddingMargin()",
      "180": "ContinuousContainerTest::::blockRendererMultiPageBorderPaddingMargin()",
      "181": "ContinuousContainerTest::::blockRendererMultiPageBorderPaddingMargin()",
      "182": "ContinuousContainerTest::::blockRendererMultiPageBorderPaddingMargin()",
      "183": "ContinuousContainerTest::::blockRendererMultiPageBorderPaddingMargin()",
      "184": "ContinuousContainerTest::::blockRendererMultiPageBorderPaddingMargin()",
      "185": "ContinuousContainerTest::::blockRendererMultiPageBorderPaddingMargin()",
      "186": "ContinuousContainerTest::::blockRendererMultiPageBorderPaddingMargin()",
      "187": "ContinuousContainerTest::::blockRendererMultiPageBorderPaddingMargin()",
      "188": "ContinuousContainerTest::::blockRendererMultiPageBorderPaddingMargin()",
      "189": "ContinuousContainerTest::::blockRendererMultiPageBorderPaddingMargin()",
      "190": "ContinuousContainerTest::::blockRendererMultiPageBorderPaddingMargin()",
      "191": "ContinuousContainerTest::::blockRendererMultiPageBorderPaddingMargin()",
      "192": "ContinuousContainerTest::::blockRendererMultiPageBorderPaddingMargin()",
      "194": "ContinuousContainerTest::::blockRendererWithComplexInnerElements()",
      "195": "ContinuousContainerTest::::blockRendererWithComplexInnerElements()",
      "196": "ContinuousContainerTest::::blockRendererWithComplexInnerElements()",
      "197": "ContinuousContainerTest::::blockRendererWithComplexInnerElements()",
      "198": "ContinuousContainerTest::::blockRendererWithComplexInnerElements()",
      "199": "ContinuousContainerTest::::blockRendererWithComplexInnerElements()",
      "200": "ContinuousContainerTest::::blockRendererWithComplexInnerElements()",
      "201": "ContinuousContainerTest::::blockRendererWithComplexInnerElements()",
      "202": "ContinuousContainerTest::::blockRendererWithComplexInnerElements()",
      "203": "ContinuousContainerTest::::blockRendererWithComplexInnerElements()",
      "204": "ContinuousContainerTest::::blockRendererWithComplexInnerElements()",
      "205": "ContinuousContainerTest::::blockRendererWithComplexInnerElements()",
      "206": "ContinuousContainerTest::::blockRendererWithComplexInnerElements()",
      "207": "ContinuousContainerTest::::blockRendererWithComplexInnerElements()",
      "208": "ContinuousContainerTest::::blockRendererWithComplexInnerElements()",
      "209": "ContinuousContainerTest::::blockRendererWithComplexInnerElements()",
      "210": "ContinuousContainerTest::::blockRendererWithComplexInnerElements()",
      "211": "ContinuousContainerTest::::blockRendererWithComplexInnerElements()",
      "212": "ContinuousContainerTest::::blockRendererWithComplexInnerElements()",
      "213": "ContinuousContainerTest::::blockRendererWithComplexInnerElements()",
      "214": "ContinuousContainerTest::::blockRendererWithComplexInnerElements()",
      "215": "ContinuousContainerTest::::blockRendererWithComplexInnerElements()",
      "216": "ContinuousContainerTest::::blockRendererWithComplexInnerElements()",
      "217": "ContinuousContainerTest::::blockRendererWithComplexInnerElements()",
      "218": "ContinuousContainerTest::::blockRendererWithComplexInnerElements()",
      "219": "ContinuousContainerTest::::blockRendererWithComplexInnerElements()",
      "221": "ContinuousContainerTest::::blockRendererception()",
      "222": "ContinuousContainerTest::::blockRendererception()",
      "223": "ContinuousContainerTest::::blockRendererception()",
      "224": "ContinuousContainerTest::::blockRendererception()",
      "225": "ContinuousContainerTest::::blockRendererception()",
      "226": "ContinuousContainerTest::::blockRendererception()",
      "227": "ContinuousContainerTest::::blockRendererception()",
      "228": "ContinuousContainerTest::::blockRendererception()",
      "229": "ContinuousContainerTest::::blockRendererception()",
      "230": "ContinuousContainerTest::::blockRendererception()",
      "231": "ContinuousContainerTest::::blockRendererception()",
      "232": "ContinuousContainerTest::::blockRendererception()",
      "233": "ContinuousContainerTest::::blockRendererception()",
      "234": "ContinuousContainerTest::::blockRendererception()",
      "235": "ContinuousContainerTest::::blockRendererception()",
      "236": "ContinuousContainerTest::::blockRendererception()",
      "237": "ContinuousContainerTest::::blockRendererception()",
      "238": "ContinuousContainerTest::::blockRendererception()",
      "239": "ContinuousContainerTest::::blockRendererception()",
      "240": "ContinuousContainerTest::::blockRendererception()",
      "241": "ContinuousContainerTest::::blockRendererception()",
      "242": "ContinuousContainerTest::::blockRendererception()",
      "243": "ContinuousContainerTest::::blockRendererception()",
      "244": "ContinuousContainerTest::::blockRendererception()",
      "245": "ContinuousContainerTest::::blockRendererception()",
      "246": "ContinuousContainerTest::::blockRendererception()",
      "247": "ContinuousContainerTest::::blockRendererception()",
      "248": "ContinuousContainerTest::::blockRendererception()",
      "249": "ContinuousContainerTest::::blockRendererception()",
      "250": "ContinuousContainerTest::::blockRendererception()",
      "251": "ContinuousContainerTest::::blockRendererception()",
      "252": "ContinuousContainerTest::::blockRendererception()",
      "253": "ContinuousContainerTest::::blockRendererception()",
      "255": "ContinuousContainerTest::::paragraphRendererMarginTop()",
      "256": "ContinuousContainerTest::::paragraphRendererMarginTop()",
      "257": "ContinuousContainerTest::::paragraphRendererMarginTop()",
      "258": "ContinuousContainerTest::::paragraphRendererMarginTop()",
      "259": "ContinuousContainerTest::::paragraphRendererMarginTop()",
      "260": "ContinuousContainerTest::::paragraphRendererMarginTop()",
      "261": "ContinuousContainerTest::::paragraphRendererMarginTop()",
      "262": "ContinuousContainerTest::::paragraphRendererMarginTop()",
      "264": "ContinuousContainerTest::::paragraphRendererMarginBottom()",
      "265": "ContinuousContainerTest::::paragraphRendererMarginBottom()",
      "266": "ContinuousContainerTest::::paragraphRendererMarginBottom()",
      "267": "ContinuousContainerTest::::paragraphRendererMarginBottom()",
      "268": "ContinuousContainerTest::::paragraphRendererMarginBottom()",
      "269": "ContinuousContainerTest::::paragraphRendererMarginBottom()",
      "270": "ContinuousContainerTest::::paragraphRendererMarginBottom()",
      "271": "ContinuousContainerTest::::paragraphRendererMarginBottom()",
      "272": "ContinuousContainerTest::::paragraphRendererMarginBottom()",
      "274": "ContinuousContainerTest::::paragraphRendererMarginAll()",
      "275": "ContinuousContainerTest::::paragraphRendererMarginAll()",
      "276": "ContinuousContainerTest::::paragraphRendererMarginAll()",
      "277": "ContinuousContainerTest::::paragraphRendererMarginAll()",
      "278": "ContinuousContainerTest::::paragraphRendererMarginAll()",
      "279": "ContinuousContainerTest::::paragraphRendererMarginAll()",
      "280": "ContinuousContainerTest::::paragraphRendererMarginAll()",
      "281": "ContinuousContainerTest::::paragraphRendererMarginAll()",
      "282": "ContinuousContainerTest::::paragraphRendererMarginAll()",
      "284": "ContinuousContainerTest::::paragraphRendererFitsWithoutMarginButWeTriggerOverflow()",
      "285": "ContinuousContainerTest::::paragraphRendererFitsWithoutMarginButWeTriggerOverflow()",
      "286": "ContinuousContainerTest::::paragraphRendererFitsWithoutMarginButWeTriggerOverflow()",
      "287": "ContinuousContainerTest::::paragraphRendererFitsWithoutMarginButWeTriggerOverflow()",
      "288": "ContinuousContainerTest::::paragraphRendererFitsWithoutMarginButWeTriggerOverflow()",
      "289": "ContinuousContainerTest::::paragraphRendererFitsWithoutMarginButWeTriggerOverflow()",
      "290": "ContinuousContainerTest::::paragraphRendererFitsWithoutMarginButWeTriggerOverflow()",
      "291": "ContinuousContainerTest::::paragraphRendererFitsWithoutMarginButWeTriggerOverflow()",
      "292": "ContinuousContainerTest::::paragraphRendererFitsWithoutMarginButWeTriggerOverflow()",
      "293": "ContinuousContainerTest::::paragraphRendererFitsWithoutMarginButWeTriggerOverflow()",
      "294": "ContinuousContainerTest::::paragraphRendererFitsWithoutMarginButWeTriggerOverflow()",
      "295": "ContinuousContainerTest::::paragraphRendererFitsWithoutMarginButWeTriggerOverflow()",
      "298": "ContinuousContainerTest::::paragraphRendererFitsWithoutPaddingButWeTriggerOverflow()",
      "299": "ContinuousContainerTest::::paragraphRendererFitsWithoutPaddingButWeTriggerOverflow()",
      "300": "ContinuousContainerTest::::paragraphRendererFitsWithoutPaddingButWeTriggerOverflow()",
      "301": "ContinuousContainerTest::::paragraphRendererFitsWithoutPaddingButWeTriggerOverflow()",
      "302": "ContinuousContainerTest::::paragraphRendererFitsWithoutPaddingButWeTriggerOverflow()",
      "303": "ContinuousContainerTest::::paragraphRendererFitsWithoutPaddingButWeTriggerOverflow()",
      "304": "ContinuousContainerTest::::paragraphRendererFitsWithoutPaddingButWeTriggerOverflow()",
      "305": "ContinuousContainerTest::::paragraphRendererFitsWithoutPaddingButWeTriggerOverflow()",
      "306": "ContinuousContainerTest::::paragraphRendererFitsWithoutPaddingButWeTriggerOverflow()",
      "307": "ContinuousContainerTest::::paragraphRendererFitsWithoutPaddingButWeTriggerOverflow()",
      "308": "ContinuousContainerTest::::paragraphRendererFitsWithoutPaddingButWeTriggerOverflow()",
      "309": "ContinuousContainerTest::::paragraphRendererFitsWithoutPaddingButWeTriggerOverflow()",
      "312": "ContinuousContainerTest::::paragraphRendererFitsWithoutBorderButWeTriggerOverflow()",
      "313": "ContinuousContainerTest::::paragraphRendererFitsWithoutBorderButWeTriggerOverflow()",
      "314": "ContinuousContainerTest::::paragraphRendererFitsWithoutBorderButWeTriggerOverflow()",
      "315": "ContinuousContainerTest::::paragraphRendererFitsWithoutBorderButWeTriggerOverflow()",
      "316": "ContinuousContainerTest::::paragraphRendererFitsWithoutBorderButWeTriggerOverflow()",
      "317": "ContinuousContainerTest::::paragraphRendererFitsWithoutBorderButWeTriggerOverflow()",
      "318": "ContinuousContainerTest::::paragraphRendererFitsWithoutBorderButWeTriggerOverflow()",
      "319": "ContinuousContainerTest::::paragraphRendererFitsWithoutBorderButWeTriggerOverflow()",
      "320": "ContinuousContainerTest::::paragraphRendererFitsWithoutBorderButWeTriggerOverflow()",
      "321": "ContinuousContainerTest::::paragraphRendererFitsWithoutBorderButWeTriggerOverflow()",
      "322": "ContinuousContainerTest::::paragraphRendererFitsWithoutBorderButWeTriggerOverflow()",
      "323": "ContinuousContainerTest::::paragraphRendererFitsWithoutBorderButWeTriggerOverflow()",
      "325": "ContinuousContainerTest::::paragraphRendererPaddingTop()",
      "326": "ContinuousContainerTest::::paragraphRendererPaddingTop()",
      "327": "ContinuousContainerTest::::paragraphRendererPaddingTop()",
      "328": "ContinuousContainerTest::::paragraphRendererPaddingTop()",
      "329": "ContinuousContainerTest::::paragraphRendererPaddingTop()",
      "330": "ContinuousContainerTest::::paragraphRendererPaddingTop()",
      "331": "ContinuousContainerTest::::paragraphRendererPaddingTop()",
      "332": "ContinuousContainerTest::::paragraphRendererPaddingTop()",
      "333": "ContinuousContainerTest::::paragraphRendererPaddingTop()",
      "335": "ContinuousContainerTest::::paragraphRendererPaddingBottom()",
      "336": "ContinuousContainerTest::::paragraphRendererPaddingBottom()",
      "337": "ContinuousContainerTest::::paragraphRendererPaddingBottom()",
      "338": "ContinuousContainerTest::::paragraphRendererPaddingBottom()",
      "339": "ContinuousContainerTest::::paragraphRendererPaddingBottom()",
      "340": "ContinuousContainerTest::::paragraphRendererPaddingBottom()",
      "341": "ContinuousContainerTest::::paragraphRendererPaddingBottom()",
      "342": "ContinuousContainerTest::::paragraphRendererPaddingBottom()",
      "343": "ContinuousContainerTest::::paragraphRendererPaddingBottom()",
      "345": "ContinuousContainerTest::::paragraphRendererPaddingAll()",
      "346": "ContinuousContainerTest::::paragraphRendererPaddingAll()",
      "347": "ContinuousContainerTest::::paragraphRendererPaddingAll()",
      "348": "ContinuousContainerTest::::paragraphRendererPaddingAll()",
      "349": "ContinuousContainerTest::::paragraphRendererPaddingAll()",
      "350": "ContinuousContainerTest::::paragraphRendererPaddingAll()",
      "351": "ContinuousContainerTest::::paragraphRendererPaddingAll()",
      "352": "ContinuousContainerTest::::paragraphRendererPaddingAll()",
      "353": "ContinuousContainerTest::::paragraphRendererPaddingAll()",
      "355": "ContinuousContainerTest::::paragraphRendererBorderTop()",
      "356": "ContinuousContainerTest::::paragraphRendererBorderTop()",
      "357": "ContinuousContainerTest::::paragraphRendererBorderTop()",
      "358": "ContinuousContainerTest::::paragraphRendererBorderTop()",
      "359": "ContinuousContainerTest::::paragraphRendererBorderTop()",
      "360": "ContinuousContainerTest::::paragraphRendererBorderTop()",
      "361": "ContinuousContainerTest::::paragraphRendererBorderTop()",
      "362": "ContinuousContainerTest::::paragraphRendererBorderTop()",
      "363": "ContinuousContainerTest::::paragraphRendererBorderTop()",
      "365": "ContinuousContainerTest::::paragraphRendererBorderBottom()",
      "366": "ContinuousContainerTest::::paragraphRendererBorderBottom()",
      "367": "ContinuousContainerTest::::paragraphRendererBorderBottom()",
      "368": "ContinuousContainerTest::::paragraphRendererBorderBottom()",
      "369": "ContinuousContainerTest::::paragraphRendererBorderBottom()",
      "370": "ContinuousContainerTest::::paragraphRendererBorderBottom()",
      "371": "ContinuousContainerTest::::paragraphRendererBorderBottom()",
      "372": "ContinuousContainerTest::::paragraphRendererBorderBottom()",
      "373": "ContinuousContainerTest::::paragraphRendererBorderBottom()",
      "375": "ContinuousContainerTest::::paragraphRendererBorderAll()",
      "376": "ContinuousContainerTest::::paragraphRendererBorderAll()",
      "377": "ContinuousContainerTest::::paragraphRendererBorderAll()",
      "378": "ContinuousContainerTest::::paragraphRendererBorderAll()",
      "379": "ContinuousContainerTest::::paragraphRendererBorderAll()",
      "380": "ContinuousContainerTest::::paragraphRendererBorderAll()",
      "381": "ContinuousContainerTest::::paragraphRendererBorderAll()",
      "382": "ContinuousContainerTest::::paragraphRendererBorderAll()",
      "383": "ContinuousContainerTest::::paragraphRendererBorderAll()",
      "386": "ContinuousContainerTest::::paragraphRendererWideBorderAll()",
      "387": "ContinuousContainerTest::::paragraphRendererWideBorderAll()",
      "388": "ContinuousContainerTest::::paragraphRendererWideBorderAll()",
      "389": "ContinuousContainerTest::::paragraphRendererWideBorderAll()",
      "390": "ContinuousContainerTest::::paragraphRendererWideBorderAll()",
      "391": "ContinuousContainerTest::::paragraphRendererWideBorderAll()",
      "392": "ContinuousContainerTest::::paragraphRendererWideBorderAll()",
      "393": "ContinuousContainerTest::::paragraphRendererWideBorderAll()",
      "394": "ContinuousContainerTest::::paragraphRendererWideBorderAll()",
      "396": "ContinuousContainerTest::::paragraphRendererBorderMarginPadding()",
      "397": "ContinuousContainerTest::::paragraphRendererBorderMarginPadding()",
      "398": "ContinuousContainerTest::::paragraphRendererBorderMarginPadding()",
      "399": "ContinuousContainerTest::::paragraphRendererBorderMarginPadding()",
      "400": "ContinuousContainerTest::::paragraphRendererBorderMarginPadding()",
      "401": "ContinuousContainerTest::::paragraphRendererBorderMarginPadding()",
      "402": "ContinuousContainerTest::::paragraphRendererBorderMarginPadding()",
      "403": "ContinuousContainerTest::::paragraphRendererBorderMarginPadding()",
      "404": "ContinuousContainerTest::::paragraphRendererBorderMarginPadding()",
      "405": "ContinuousContainerTest::::paragraphRendererBorderMarginPadding()",
      "406": "ContinuousContainerTest::::paragraphRendererBorderMarginPadding()",
      "408": "ContinuousContainerTest::::executeTest(java.lang.String,T,java.util.function.Consumer<T>)",
      "409": "ContinuousContainerTest::::executeTest(java.lang.String,T,java.util.function.Consumer<T>)",
      "410": "ContinuousContainerTest::::executeTest(java.lang.String,T,java.util.function.Consumer<T>)",
      "411": "ContinuousContainerTest::::executeTest(java.lang.String,T,java.util.function.Consumer<T>)",
      "412": "ContinuousContainerTest::::executeTest(java.lang.String,T,java.util.function.Consumer<T>)",
      "413": "ContinuousContainerTest::::executeTest(java.lang.String,T,java.util.function.Consumer<T>)",
      "414": "ContinuousContainerTest::::executeTest(java.lang.String,T,java.util.function.Consumer<T>)",
      "415": "ContinuousContainerTest::::executeTest(java.lang.String,T,java.util.function.Consumer<T>)",
      "416": "ContinuousContainerTest::::executeTest(java.lang.String,T,java.util.function.Consumer<T>)",
      "417": "ContinuousContainerTest::::executeTest(java.lang.String,T,java.util.function.Consumer<T>)",
      "418": "ContinuousContainerTest::::executeTest(java.lang.String,T,java.util.function.Consumer<T>)",
      "419": "ContinuousContainerTest::::executeTest(java.lang.String,T,java.util.function.Consumer<T>)",
      "420": "ContinuousContainerTest::::executeTest(java.lang.String,T,java.util.function.Consumer<T>)",
      "421": "ContinuousContainerTest::::executeTest(java.lang.String,T,java.util.function.Consumer<T>)",
      "422": "ContinuousContainerTest::::executeTest(java.lang.String,T,java.util.function.Consumer<T>)",
      "423": "ContinuousContainerTest::::executeTest(java.lang.String,T,java.util.function.Consumer<T>)",
      "424": "ContinuousContainerTest::::executeTest(java.lang.String,T,java.util.function.Consumer<T>)"
    },
    "tests": [
      {
        "test_lines": [
          68,
          77
        ],
        "covered_lines": [
          44,
          47,
          55,
          56,
          57,
          59,
          67,
          68,
          70,
          71,
          72,
          73,
          75,
          83,
          84,
          85,
          86,
          87,
          89,
          91,
          94,
          97,
          98,
          99,
          101,
          109,
          110,
          112,
          113,
          114,
          117
        ]
      },
      {
        "test_lines": [
          79,
          88
        ],
        "covered_lines": [
          44,
          47,
          55,
          56,
          57,
          59,
          67,
          68,
          70,
          71,
          72,
          73,
          75,
          83,
          84,
          85,
          86,
          87,
          89,
          91,
          94,
          97,
          98,
          99,
          101,
          109,
          110,
          112,
          113,
          114,
          117
        ]
      },
      {
        "test_lines": [
          90,
          99
        ],
        "covered_lines": [
          44,
          47,
          55,
          56,
          57,
          59,
          67,
          68,
          70,
          71,
          72,
          73,
          75,
          83,
          84,
          85,
          86,
          87,
          89,
          91,
          94,
          97,
          98,
          99,
          101,
          109,
          110,
          112,
          113,
          114,
          117
        ]
      },
      {
        "test_lines": [
          101,
          110
        ],
        "covered_lines": [
          44,
          47,
          55,
          56,
          57,
          59,
          67,
          68,
          70,
          71,
          72,
          73,
          75,
          83,
          84,
          85,
          86,
          87,
          89,
          91,
          94,
          97,
          98,
          99,
          101,
          109,
          110,
          112,
          113,
          114,
          117
        ]
      },
      {
        "test_lines": [
          112,
          121
        ],
        "covered_lines": [
          44,
          47,
          55,
          56,
          57,
          59,
          67,
          68,
          70,
          71,
          72,
          73,
          75,
          83,
          84,
          85,
          86,
          87,
          89,
          91,
          94,
          97,
          98,
          99,
          101,
          109,
          110,
          112,
          113,
          114,
          117
        ]
      },
      {
        "test_lines": [
          123,
          132
        ],
        "covered_lines": [
          44,
          47,
          55,
          56,
          57,
          59,
          67,
          68,
          70,
          71,
          72,
          73,
          75,
          83,
          84,
          85,
          86,
          87,
          89,
          91,
          94,
          97,
          98,
          99,
          101,
          109,
          110,
          112,
          113,
          114,
          117
        ]
      },
      {
        "test_lines": [
          134,
          143
        ],
        "covered_lines": [
          44,
          47,
          55,
          56,
          57,
          59,
          67,
          68,
          70,
          71,
          72,
          73,
          75,
          83,
          84,
          85,
          86,
          87,
          89,
          91,
          94,
          97,
          98,
          99,
          101,
          109,
          110,
          112,
          113,
          114,
          117
        ]
      },
      {
        "test_lines": [
          145,
          154
        ],
        "covered_lines": [
          44,
          47,
          55,
          56,
          57,
          59,
          67,
          68,
          70,
          71,
          72,
          73,
          75,
          83,
          84,
          85,
          86,
          87,
          89,
          91,
          94,
          97,
          98,
          99,
          101,
          109,
          110,
          112,
          113,
          114,
          117
        ]
      },
      {
        "test_lines": [
          156,
          165
        ],
        "covered_lines": [
          44,
          47,
          55,
          56,
          57,
          59,
          67,
          68,
          70,
          71,
          72,
          73,
          75,
          83,
          84,
          85,
          86,
          87,
          89,
          91,
          94,
          97,
          98,
          99,
          101,
          109,
          110,
          112,
          113,
          114,
          115,
          117
        ]
      },
      {
        "test_lines": [
          167,
          176
        ],
        "covered_lines": [
          44,
          47,
          55,
          56,
          57,
          59,
          67,
          68,
          70,
          71,
          72,
          73,
          75,
          83,
          84,
          85,
          86,
          87,
          89,
          91,
          94,
          97,
          98,
          99,
          101,
          109,
          110,
          112,
          113,
          114,
          115,
          117
        ]
      },
      {
        "test_lines": [
          179,
          192
        ],
        "covered_lines": [
          44,
          47,
          55,
          56,
          57,
          59,
          67,
          68,
          70,
          71,
          72,
          73,
          75,
          83,
          84,
          85,
          86,
          87,
          89,
          91,
          94,
          97,
          98,
          99,
          101,
          109,
          110,
          112,
          113,
          114,
          115,
          117
        ]
      },
      {
        "test_lines": [
          194,
          219
        ],
        "covered_lines": [
          44,
          47,
          55,
          56,
          57,
          59,
          67,
          68,
          70,
          71,
          72,
          73,
          75,
          83,
          84,
          85,
          86,
          87,
          89,
          91,
          94,
          97,
          98,
          99,
          101,
          109,
          110,
          112,
          113,
          114,
          115,
          117
        ]
      },
      {
        "test_lines": [
          221,
          253
        ],
        "covered_lines": [
          44,
          47,
          55,
          56,
          57,
          59,
          67,
          68,
          70,
          71,
          72,
          73,
          75,
          83,
          84,
          85,
          86,
          87,
          89,
          91,
          94,
          97,
          98,
          99,
          101,
          109,
          110,
          112,
          113,
          114,
          115,
          117
        ]
      },
      {
        "test_lines": [
          255,
          262
        ],
        "covered_lines": [
          44,
          47,
          55,
          56,
          57,
          59,
          67,
          68,
          70,
          71,
          72,
          73,
          75,
          83,
          84,
          85,
          86,
          87,
          89,
          91,
          94,
          97,
          98,
          99,
          101,
          109,
          110,
          112,
          113,
          114,
          117
        ]
      },
      {
        "test_lines": [
          264,
          272
        ],
        "covered_lines": [
          44,
          47,
          55,
          56,
          57,
          59,
          67,
          68,
          70,
          71,
          72,
          73,
          75,
          83,
          84,
          85,
          86,
          87,
          89,
          91,
          94,
          97,
          98,
          99,
          101,
          109,
          110,
          112,
          113,
          114,
          117
        ]
      },
      {
        "test_lines": [
          274,
          282
        ],
        "covered_lines": [
          44,
          47,
          55,
          56,
          57,
          59,
          67,
          68,
          70,
          71,
          72,
          73,
          75,
          83,
          84,
          85,
          86,
          87,
          89,
          91,
          94,
          97,
          98,
          99,
          101,
          109,
          110,
          112,
          113,
          114,
          117
        ]
      },
      {
        "test_lines": [
          284,
          295
        ],
        "covered_lines": [
          44,
          47,
          55,
          56,
          57,
          59,
          67,
          68,
          70,
          71,
          72,
          73,
          75,
          83,
          84,
          85,
          86,
          87,
          89,
          91,
          94,
          97,
          98,
          99,
          101,
          109,
          110,
          112,
          113,
          114,
          117
        ]
      },
      {
        "test_lines": [
          298,
          309
        ],
        "covered_lines": [
          44,
          47,
          55,
          56,
          57,
          59,
          67,
          68,
          70,
          71,
          72,
          73,
          75,
          83,
          84,
          85,
          86,
          87,
          89,
          91,
          94,
          97,
          98,
          99,
          101,
          109,
          110,
          112,
          113,
          114,
          117
        ]
      },
      {
        "test_lines": [
          312,
          323
        ],
        "covered_lines": [
          44,
          47,
          55,
          56,
          57,
          59,
          67,
          68,
          70,
          71,
          72,
          73,
          75,
          83,
          84,
          85,
          86,
          87,
          89,
          91,
          94,
          97,
          98,
          99,
          101,
          109,
          110,
          112,
          113,
          114,
          115,
          117
        ]
      },
      {
        "test_lines": [
          325,
          333
        ],
        "covered_lines": [
          44,
          47,
          55,
          56,
          57,
          59,
          67,
          68,
          70,
          71,
          72,
          73,
          75,
          83,
          84,
          85,
          86,
          87,
          89,
          91,
          94,
          97,
          98,
          99,
          101,
          109,
          110,
          112,
          113,
          114,
          117
        ]
      },
      {
        "test_lines": [
          335,
          343
        ],
        "covered_lines": [
          44,
          47,
          55,
          56,
          57,
          59,
          67,
          68,
          70,
          71,
          72,
          73,
          75,
          83,
          84,
          85,
          86,
          87,
          89,
          91,
          94,
          97,
          98,
          99,
          101,
          109,
          110,
          112,
          113,
          114,
          117
        ]
      },
      {
        "test_lines": [
          345,
          353
        ],
        "covered_lines": [
          44,
          47,
          55,
          56,
          57,
          59,
          67,
          68,
          70,
          71,
          72,
          73,
          75,
          83,
          84,
          85,
          86,
          87,
          89,
          91,
          94,
          97,
          98,
          99,
          101,
          109,
          110,
          112,
          113,
          114,
          117
        ]
      },
      {
        "test_lines": [
          355,
          363
        ],
        "covered_lines": [
          44,
          47,
          55,
          56,
          57,
          59,
          67,
          68,
          70,
          71,
          72,
          73,
          75,
          83,
          84,
          85,
          86,
          87,
          89,
          91,
          94,
          97,
          98,
          99,
          101,
          109,
          110,
          112,
          113,
          114,
          117
        ]
      },
      {
        "test_lines": [
          365,
          373
        ],
        "covered_lines": [
          44,
          47,
          55,
          56,
          57,
          59,
          67,
          68,
          70,
          71,
          72,
          73,
          75,
          83,
          84,
          85,
          86,
          87,
          89,
          91,
          94,
          97,
          98,
          99,
          101,
          109,
          110,
          112,
          113,
          114,
          117
        ]
      },
      {
        "test_lines": [
          375,
          383
        ],
        "covered_lines": [
          44,
          47,
          55,
          56,
          57,
          59,
          67,
          68,
          70,
          71,
          72,
          73,
          75,
          83,
          84,
          85,
          86,
          87,
          89,
          91,
          94,
          97,
          98,
          99,
          101,
          109,
          110,
          112,
          113,
          114,
          115,
          117
        ]
      },
      {
        "test_lines": [
          386,
          394
        ],
        "covered_lines": [
          44,
          47,
          55,
          56,
          57,
          59,
          67,
          68,
          70,
          71,
          72,
          73,
          75,
          83,
          84,
          85,
          86,
          87,
          89,
          91,
          94,
          97,
          98,
          99,
          101,
          109,
          110,
          112,
          113,
          114,
          115,
          117
        ]
      },
      {
        "test_lines": [
          396,
          406
        ],
        "covered_lines": [
          44,
          47,
          55,
          56,
          57,
          59,
          67,
          68,
          70,
          71,
          72,
          73,
          75,
          83,
          84,
          85,
          86,
          87,
          89,
          91,
          94,
          97,
          98,
          99,
          101,
          109,
          110,
          112,
          113,
          114,
          115,
          117
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/itext-java/layout/src/main/java/com/itextpdf/layout/properties/BackgroundSize.java": {
    "class_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.layout.properties;\n",
      "\n",
      "/**\n",
      " * Class to hold background-size property.\n",
      " */\n",
      "public class BackgroundSize {\n",
      "\n",
      "    /**\n",
      "     * Width size for this image. If {@link UnitValue} is in percent, then width depends on the area of the element.\n",
      "     */\n",
      "    private UnitValue backgroundWidthSize;\n",
      "    /**\n",
      "     * Height size for this image. If {@link UnitValue} is in percent, then height depends on the area of the element.\n",
      "     */\n",
      "    private UnitValue backgroundHeightSize;\n",
      "    /**\n",
      "     * Image covers the entire area and its size may be more than the area.\n",
      "     */\n",
      "    private boolean cover;\n",
      "    /**\n",
      "     * Image hsd a maximum size but not larger than the area.\n",
      "     */\n",
      "    private boolean contain;\n",
      "\n",
      "    /**\n",
      "     * Creates a new {@link BackgroundSize} instance.\n",
      "     * The \"cover\" and \"contain\" properties are not set.\n",
      "     */\n",
      "    public BackgroundSize() {\n",
      "        cover = false;\n",
      "        contain = false;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Clears all current properties and sets new width and height values. One of the parameters\n",
      "     * can be null. Note that in this case null property will be scaled so that it becomes\n",
      "     * proportionally equal with the non-null value. If both parameters are set to null, then\n",
      "     * the default image size will be used.\n",
      "     *\n",
      "     * @param width a {@link UnitValue} object\n",
      "     * @param height a {@link UnitValue} object\n",
      "     */\n",
      "    public void setBackgroundSizeToValues(UnitValue width, UnitValue height) {\n",
      "        // See also BackgroundSizeCalculationUtil#calculateBackgroundImageSize\n",
      "        clear();\n",
      "        this.backgroundWidthSize = width;\n",
      "        this.backgroundHeightSize = height;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Clears all size values and sets the \"contain\" property {@code true}.\n",
      "     *\n",
      "     * @see BackgroundSize#contain\n",
      "     */\n",
      "    public void setBackgroundSizeToContain() {\n",
      "        clear();\n",
      "        contain = true;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Clears all size values and sets the \"cover\" property {@code true}.\n",
      "     *\n",
      "     * @see BackgroundSize#cover\n",
      "     */\n",
      "    public void setBackgroundSizeToCover() {\n",
      "        clear();\n",
      "        cover = true;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Gets the background width property of the image.\n",
      "     *\n",
      "     * @return the {@link UnitValue} width for this image.\n",
      "     * @see BackgroundSize#backgroundWidthSize\n",
      "     */\n",
      "    public UnitValue getBackgroundWidthSize() {\n",
      "        return backgroundWidthSize;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Gets the background height property of the image.\n",
      "     *\n",
      "     * @return the {@link UnitValue} height for this image.\n",
      "     * @see BackgroundSize#backgroundHeightSize\n",
      "     */\n",
      "    public UnitValue getBackgroundHeightSize() {\n",
      "        return backgroundHeightSize;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Returns is size has specific property.\n",
      "     *\n",
      "     * @return {@code true} if size set to \"contain\" or \"cover\", otherwise false.\n",
      "     */\n",
      "    public boolean isSpecificSize() {\n",
      "        return contain || cover;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Returns value of the \"contain\" property.\n",
      "     *\n",
      "     * @return {@code true} if property \"contain\" is set to the size, otherwise false.\n",
      "     * @see BackgroundSize#contain\n",
      "     */\n",
      "    public boolean isContain() {\n",
      "        return contain;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Returns value of the \"cover\" property.\n",
      "     *\n",
      "     * @return {@code true} if property \"cover\" is set to the size, otherwise false.\n",
      "     * @see BackgroundSize#cover\n",
      "     */\n",
      "    public boolean isCover() {\n",
      "        return cover;\n",
      "    }\n",
      "\n",
      "    private void clear() {\n",
      "        contain = false;\n",
      "        cover = false;\n",
      "        backgroundWidthSize = null;\n",
      "        backgroundHeightSize = null;\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.layout.properties;\n",
      "\n",
      "import com.itextpdf.test.ExtendedITextTest;\n",
      "import com.itextpdf.test.annotations.type.UnitTest;\n",
      "\n",
      "import org.junit.Assert;\n",
      "import org.junit.Test;\n",
      "import org.junit.experimental.categories.Category;\n",
      "\n",
      "@Category(UnitTest.class)\n",
      "public class BackgroundSizeTest extends ExtendedITextTest {\n",
      "\n",
      "    @Test\n",
      "    public void constructorTest() {\n",
      "        final BackgroundSize size = new BackgroundSize();\n",
      "\n",
      "        Assert.assertFalse(size.isContain());\n",
      "        Assert.assertFalse(size.isCover());\n",
      "        Assert.assertNull(size.getBackgroundWidthSize());\n",
      "        Assert.assertNull(size.getBackgroundHeightSize());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void clearAndSetToCoverTest() {\n",
      "        final BackgroundSize size = new BackgroundSize();\n",
      "\n",
      "        size.setBackgroundSizeToValues(UnitValue.createPointValue(10), UnitValue.createPointValue(10));\n",
      "        size.setBackgroundSizeToCover();\n",
      "\n",
      "        Assert.assertFalse(size.isContain());\n",
      "        Assert.assertTrue(size.isCover());\n",
      "        Assert.assertNull(size.getBackgroundWidthSize());\n",
      "        Assert.assertNull(size.getBackgroundHeightSize());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void clearAndSetToContainTest() {\n",
      "        final BackgroundSize size = new BackgroundSize();\n",
      "\n",
      "        size.setBackgroundSizeToValues(UnitValue.createPointValue(10), UnitValue.createPointValue(10));\n",
      "        size.setBackgroundSizeToContain();\n",
      "\n",
      "        Assert.assertTrue(size.isContain());\n",
      "        Assert.assertFalse(size.isCover());\n",
      "        Assert.assertNull(size.getBackgroundWidthSize());\n",
      "        Assert.assertNull(size.getBackgroundHeightSize());\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "BackgroundSize::::setBackgroundSizeToValues(com.itextpdf.layout.properties.UnitValue,com.itextpdf.layout.properties.UnitValue)": [
        65,
        70
      ],
      "BackgroundSize::::setBackgroundSizeToContain()": [
        77,
        80
      ],
      "BackgroundSize::::setBackgroundSizeToCover()": [
        87,
        90
      ],
      "BackgroundSize::::getBackgroundWidthSize()": [
        98,
        100
      ],
      "BackgroundSize::::getBackgroundHeightSize()": [
        108,
        110
      ],
      "BackgroundSize::::isSpecificSize()": [
        117,
        119
      ],
      "BackgroundSize::::isContain()": [
        127,
        129
      ],
      "BackgroundSize::::isCover()": [
        137,
        139
      ],
      "BackgroundSize::::clear()": [
        141,
        146
      ]
    },
    "test_method_lines_dic": {
      "BackgroundSizeTest::::constructorTest()": [
        35,
        43
      ],
      "BackgroundSizeTest::::clearAndSetToCoverTest()": [
        45,
        56
      ],
      "BackgroundSizeTest::::clearAndSetToContainTest()": [
        58,
        69
      ]
    },
    "reverse_method_lines_dic": {
      "65": "BackgroundSize::::setBackgroundSizeToValues(com.itextpdf.layout.properties.UnitValue,com.itextpdf.layout.properties.UnitValue)",
      "66": "BackgroundSize::::setBackgroundSizeToValues(com.itextpdf.layout.properties.UnitValue,com.itextpdf.layout.properties.UnitValue)",
      "67": "BackgroundSize::::setBackgroundSizeToValues(com.itextpdf.layout.properties.UnitValue,com.itextpdf.layout.properties.UnitValue)",
      "68": "BackgroundSize::::setBackgroundSizeToValues(com.itextpdf.layout.properties.UnitValue,com.itextpdf.layout.properties.UnitValue)",
      "69": "BackgroundSize::::setBackgroundSizeToValues(com.itextpdf.layout.properties.UnitValue,com.itextpdf.layout.properties.UnitValue)",
      "70": "BackgroundSize::::setBackgroundSizeToValues(com.itextpdf.layout.properties.UnitValue,com.itextpdf.layout.properties.UnitValue)",
      "77": "BackgroundSize::::setBackgroundSizeToContain()",
      "78": "BackgroundSize::::setBackgroundSizeToContain()",
      "79": "BackgroundSize::::setBackgroundSizeToContain()",
      "80": "BackgroundSize::::setBackgroundSizeToContain()",
      "87": "BackgroundSize::::setBackgroundSizeToCover()",
      "88": "BackgroundSize::::setBackgroundSizeToCover()",
      "89": "BackgroundSize::::setBackgroundSizeToCover()",
      "90": "BackgroundSize::::setBackgroundSizeToCover()",
      "98": "BackgroundSize::::getBackgroundWidthSize()",
      "99": "BackgroundSize::::getBackgroundWidthSize()",
      "100": "BackgroundSize::::getBackgroundWidthSize()",
      "108": "BackgroundSize::::getBackgroundHeightSize()",
      "109": "BackgroundSize::::getBackgroundHeightSize()",
      "110": "BackgroundSize::::getBackgroundHeightSize()",
      "117": "BackgroundSize::::isSpecificSize()",
      "118": "BackgroundSize::::isSpecificSize()",
      "119": "BackgroundSize::::isSpecificSize()",
      "127": "BackgroundSize::::isContain()",
      "128": "BackgroundSize::::isContain()",
      "129": "BackgroundSize::::isContain()",
      "137": "BackgroundSize::::isCover()",
      "138": "BackgroundSize::::isCover()",
      "139": "BackgroundSize::::isCover()",
      "141": "BackgroundSize::::clear()",
      "142": "BackgroundSize::::clear()",
      "143": "BackgroundSize::::clear()",
      "144": "BackgroundSize::::clear()",
      "145": "BackgroundSize::::clear()",
      "146": "BackgroundSize::::clear()"
    },
    "test_reverse_method_lines_dic": {
      "35": "BackgroundSizeTest::::constructorTest()",
      "36": "BackgroundSizeTest::::constructorTest()",
      "37": "BackgroundSizeTest::::constructorTest()",
      "38": "BackgroundSizeTest::::constructorTest()",
      "39": "BackgroundSizeTest::::constructorTest()",
      "40": "BackgroundSizeTest::::constructorTest()",
      "41": "BackgroundSizeTest::::constructorTest()",
      "42": "BackgroundSizeTest::::constructorTest()",
      "43": "BackgroundSizeTest::::constructorTest()",
      "45": "BackgroundSizeTest::::clearAndSetToCoverTest()",
      "46": "BackgroundSizeTest::::clearAndSetToCoverTest()",
      "47": "BackgroundSizeTest::::clearAndSetToCoverTest()",
      "48": "BackgroundSizeTest::::clearAndSetToCoverTest()",
      "49": "BackgroundSizeTest::::clearAndSetToCoverTest()",
      "50": "BackgroundSizeTest::::clearAndSetToCoverTest()",
      "51": "BackgroundSizeTest::::clearAndSetToCoverTest()",
      "52": "BackgroundSizeTest::::clearAndSetToCoverTest()",
      "53": "BackgroundSizeTest::::clearAndSetToCoverTest()",
      "54": "BackgroundSizeTest::::clearAndSetToCoverTest()",
      "55": "BackgroundSizeTest::::clearAndSetToCoverTest()",
      "56": "BackgroundSizeTest::::clearAndSetToCoverTest()",
      "58": "BackgroundSizeTest::::clearAndSetToContainTest()",
      "59": "BackgroundSizeTest::::clearAndSetToContainTest()",
      "60": "BackgroundSizeTest::::clearAndSetToContainTest()",
      "61": "BackgroundSizeTest::::clearAndSetToContainTest()",
      "62": "BackgroundSizeTest::::clearAndSetToContainTest()",
      "63": "BackgroundSizeTest::::clearAndSetToContainTest()",
      "64": "BackgroundSizeTest::::clearAndSetToContainTest()",
      "65": "BackgroundSizeTest::::clearAndSetToContainTest()",
      "66": "BackgroundSizeTest::::clearAndSetToContainTest()",
      "67": "BackgroundSizeTest::::clearAndSetToContainTest()",
      "68": "BackgroundSizeTest::::clearAndSetToContainTest()",
      "69": "BackgroundSizeTest::::clearAndSetToContainTest()"
    },
    "tests": [
      {
        "test_lines": [
          35,
          43
        ],
        "covered_lines": [
          51,
          52,
          53,
          54,
          99,
          109,
          128,
          138
        ]
      },
      {
        "test_lines": [
          45,
          56
        ],
        "covered_lines": [
          51,
          52,
          53,
          54,
          67,
          68,
          69,
          70,
          88,
          89,
          90,
          99,
          109,
          128,
          138,
          142,
          143,
          144,
          145,
          146
        ]
      },
      {
        "test_lines": [
          58,
          69
        ],
        "covered_lines": [
          51,
          52,
          53,
          54,
          67,
          68,
          69,
          70,
          78,
          79,
          80,
          99,
          109,
          128,
          138,
          142,
          143,
          144,
          145,
          146
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/itext-java/layout/src/main/java/com/itextpdf/layout/properties/Property.java": {
    "class_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.layout.properties;\n",
      "\n",
      "import com.itextpdf.layout.IPropertyContainer;\n",
      "\n",
      "/**\n",
      " * An enum of property names that are used for graphical properties of layout\n",
      " * elements. The {@link IPropertyContainer} performs the same function as an\n",
      " * {@link java.util.Map}, with the values of {@link Property} as its potential keys.\n",
      " */\n",
      "public final class Property {\n",
      "\n",
      "    public static final int ACTION = 1;\n",
      "    public static final int ALIGN_CONTENT = 130;\n",
      "    public static final int ALIGN_ITEMS = 134;\n",
      "    public static final int ALIGN_SELF = 129;\n",
      "\n",
      "    // This property is needed for form field appearance with right-to-left text. By setting true we avoid writing\n",
      "    // /ActualText and /ReversedChars to form field appearance streams because this resulted in Acrobat showing\n",
      "    // an empty appearance in such cases.\n",
      "    public static final int APPEARANCE_STREAM_LAYOUT = 82;\n",
      "\n",
      "    public static final int AREA_BREAK_TYPE = 2;\n",
      "    public static final int AUTO_SCALE = 3;\n",
      "    public static final int AUTO_SCALE_HEIGHT = 4;\n",
      "    public static final int AUTO_SCALE_WIDTH = 5;\n",
      "    public static final int BACKGROUND = 6;\n",
      "    public static final int BACKGROUND_IMAGE = 90;\n",
      "    public static final int BASE_DIRECTION = 7;\n",
      "    public static final int BOLD_SIMULATION = 8;\n",
      "    public static final int BORDER = 9;\n",
      "    public static final int BORDER_BOTTOM = 10;\n",
      "    public static final int BORDER_BOTTOM_LEFT_RADIUS = 113;\n",
      "    public static final int BORDER_BOTTOM_RIGHT_RADIUS = 112;\n",
      "    public static final int BORDER_COLLAPSE = 114;\n",
      "    public static final int BORDER_LEFT = 11;\n",
      "    public static final int BORDER_RADIUS = 101;\n",
      "    public static final int BORDER_RIGHT = 12;\n",
      "    public static final int BORDER_TOP = 13;\n",
      "    public static final int BORDER_TOP_LEFT_RADIUS = 110;\n",
      "    public static final int BORDER_TOP_RIGHT_RADIUS = 111;\n",
      "    public static final int BOTTOM = 14;\n",
      "    public static final int BOX_SIZING = 105;\n",
      "    public static final int CAPTION_SIDE = 119;\n",
      "    public static final int CHARACTER_SPACING = 15;\n",
      "    public static final int CLEAR = 100;\n",
      "    public static final int COLLAPSING_MARGINS = 89;\n",
      "    public static final int COLSPAN = 16;\n",
      "    public static final int COLUMN_COUNT = 138;\n",
      "    public static final int COLUMN_WIDTH = 142;\n",
      "    public static final int COLUMN_GAP = 143;\n",
      "    public static final int COLUMN_GAP_BORDER = 144;\n",
      "    /**\n",
      "     * Can be either destination name (id) as String or\n",
      "     * a Tuple2(String, PdfDictionary) where String is destination name (id) and PdfDictionary is a dictionary of\n",
      "     * goto PdfAction. This second variant allow to create structure destination in tagged pdf.\n",
      "     */\n",
      "    public static final int DESTINATION = 17;\n",
      "    public static final int FILL_AVAILABLE_AREA = 86;\n",
      "    public static final int FILL_AVAILABLE_AREA_ON_SPLIT = 87;\n",
      "    public static final int FIRST_LINE_INDENT = 18;\n",
      "    public static final int FLEX_BASIS = 131;\n",
      "    public static final int FLEX_GROW = 132;\n",
      "    public static final int FLEX_SHRINK = 127;\n",
      "    public static final int FLEX_WRAP = 128;\n",
      "    public static final int FLEX_DIRECTION = 139;\n",
      "\n",
      "    public static final int FLOAT = 99;\n",
      "    public static final int FLUSH_ON_DRAW = 19;\n",
      "\n",
      "    /**\n",
      "     * Font family as String or PdfFont shall be set.\n",
      "     *\n",
      "     * @see com.itextpdf.io.font.constants.StandardFontFamilies\n",
      "     */\n",
      "    public static final int FONT = 20;\n",
      "    public static final int FONT_COLOR = 21;\n",
      "    public static final int FONT_KERNING = 22;\n",
      "    /**\n",
      "     * String value. 'normal'|'italic'|'oblique'\n",
      "     * Note, this property will be applied only if {@link #FONT} has String[] value.\n",
      "     */\n",
      "    public static final int FONT_STYLE = 94;\n",
      "    /**\n",
      "     * String value. 'normal'|'bold'|number\n",
      "     * Note, this property will be applied only if {@link #FONT} has String[] value.\n",
      "     */\n",
      "    public static final int FONT_WEIGHT = 95;\n",
      "    public static final int FONT_SCRIPT = 23;\n",
      "    /**\n",
      "     * Shall be instance of {@link com.itextpdf.layout.font.FontProvider}\n",
      "     */\n",
      "    public static final int FONT_PROVIDER = 91;\n",
      "    /**\n",
      "     * Shall be instance of {@link com.itextpdf.layout.font.FontSet}.\n",
      "     */\n",
      "    public static final int FONT_SET = 98;\n",
      "    public static final int FONT_SIZE = 24;\n",
      "    public static final int FORCED_PLACEMENT = 26;\n",
      "    public static final int FULL = 25;\n",
      "    public static final int GRID_COLUMN_END = 147;\n",
      "    public static final int GRID_COLUMN_START = 148;\n",
      "    public static final int GRID_COLUMN_SPAN = 155;\n",
      "    public static final int GRID_ROW_END = 149;\n",
      "    public static final int GRID_ROW_START = 150;\n",
      "    public static final int GRID_ROW_SPAN = 156;\n",
      "    public static final int GRID_TEMPLATE_COLUMNS = 145;\n",
      "    public static final int GRID_TEMPLATE_ROWS = 146;\n",
      "    public static final int GRID_AUTO_ROWS = 151;\n",
      "    public static final int GRID_AUTO_COLUMNS = 152;\n",
      "    public static final int GRID_FLOW = 154;\n",
      "    public static final int HEIGHT = 27;\n",
      "    public static final int HORIZONTAL_ALIGNMENT = 28;\n",
      "    public static final int HORIZONTAL_BORDER_SPACING = 115;\n",
      "    /**\n",
      "     * Value of 1 is equivalent to no scaling\n",
      "     **/\n",
      "    public static final int HORIZONTAL_SCALING = 29;\n",
      "    public static final int HYPHENATION = 30;\n",
      "    public static final int ID = 126;\n",
      "    public static final int IGNORE_FOOTER = 96;\n",
      "    public static final int IGNORE_HEADER = 97;\n",
      "    public static final int ITALIC_SIMULATION = 31;\n",
      "    public static final int JUSTIFY_CONTENT = 133;\n",
      "    public static final int KEEP_TOGETHER = 32;\n",
      "    public static final int KEEP_WITH_NEXT = 81;\n",
      "    public static final int LEADING = 33;\n",
      "    public static final int LEFT = 34;\n",
      "    public static final int LINE_DRAWER = 35;\n",
      "    public static final int LINE_HEIGHT = 124;\n",
      "    public static final int LINK_ANNOTATION = 88;\n",
      "    public static final int LIST_START = 36;\n",
      "    public static final int LIST_SYMBOL = 37;\n",
      "    public static final int LIST_SYMBOL_ALIGNMENT = 38;\n",
      "    public static final int LIST_SYMBOL_INDENT = 39;\n",
      "    public static final int LIST_SYMBOL_ORDINAL_VALUE = 120;\n",
      "    public static final int LIST_SYMBOL_PRE_TEXT = 41;\n",
      "    public static final int LIST_SYMBOL_POSITION = 83;\n",
      "    public static final int LIST_SYMBOL_POST_TEXT = 42;\n",
      "    public static final int LIST_SYMBOLS_INITIALIZED = 40;\n",
      "    public static final int MARGIN_BOTTOM = 43;\n",
      "    public static final int MARGIN_LEFT = 44;\n",
      "    public static final int MARGIN_RIGHT = 45;\n",
      "    public static final int MARGIN_TOP = 46;\n",
      "    public static final int MAX_HEIGHT = 84;\n",
      "    public static final int MAX_WIDTH = 79;\n",
      "    public static final int META_INFO = 135;\n",
      "    public static final int MIN_HEIGHT = 85;\n",
      "    public static final int MIN_WIDTH = 80;\n",
      "    public static final int NO_SOFT_WRAP_INLINE = 118;\n",
      "\n",
      "    public static final int OBJECT_FIT = 125;\n",
      "    public static final int OPACITY = 92;\n",
      "    public static final int ORPHANS_CONTROL = 121;\n",
      "    public static final int OUTLINE = 106;\n",
      "    public static final int OUTLINE_OFFSET = 107;\n",
      "    public static final int OVERFLOW_WRAP = 102;\n",
      "    public static final int OVERFLOW_X = 103;\n",
      "    public static final int OVERFLOW_Y = 104;\n",
      "    public static final int PADDING_BOTTOM = 47;\n",
      "    public static final int PADDING_LEFT = 48;\n",
      "    public static final int PADDING_RIGHT = 49;\n",
      "    public static final int PADDING_TOP = 50;\n",
      "    public static final int PAGE_NUMBER = 51;\n",
      "    public static final int POSITION = 52;\n",
      "    public static final int RENDERING_MODE = 123;\n",
      "    public static final int RIGHT = 54;\n",
      "    public static final int ROTATION_ANGLE = 55;\n",
      "    public static final int ROTATION_INITIAL_HEIGHT = 56;\n",
      "    public static final int ROTATION_INITIAL_WIDTH = 57;\n",
      "    public static final int ROTATION_POINT_X = 58;\n",
      "    public static final int ROTATION_POINT_Y = 59;\n",
      "    public static final int ROWSPAN = 60;\n",
      "    public static final int ROW_GAP = 153;\n",
      "    public static final int SPACING_RATIO = 61;\n",
      "    public static final int SPLIT_CHARACTERS = 62;\n",
      "    public static final int STROKE_COLOR = 63;\n",
      "    public static final int STROKE_WIDTH = 64;\n",
      "    public static final int SKEW = 65;\n",
      "    public static final int TABLE_LAYOUT = 93;\n",
      "    public static final int TAB_ANCHOR = 66;\n",
      "    public static final int TAB_DEFAULT = 67;\n",
      "    public static final int TAB_LEADER = 68;\n",
      "    public static final int TAB_STOPS = 69;\n",
      "    public static final int TAGGING_HELPER = 108;\n",
      "    public static final int TAGGING_HINT_KEY = 109;\n",
      "    public static final int TEXT_ALIGNMENT = 70;\n",
      "    /**\n",
      "     * Use values from {@link com.itextpdf.kernel.pdf.canvas.PdfCanvasConstants.TextRenderingMode}.\n",
      "     */\n",
      "    public static final int TEXT_RENDERING_MODE = 71;\n",
      "    public static final int TEXT_RISE = 72;\n",
      "    public static final int TOP = 73;\n",
      "    public static final int TRANSFORM = 53;\n",
      "    public static final int TYPOGRAPHY_CONFIG = 117;\n",
      "    public static final int UNDERLINE = 74;\n",
      "    public static final int VERTICAL_ALIGNMENT = 75;\n",
      "    public static final int VERTICAL_BORDER_SPACING = 116;\n",
      "    public static final int INLINE_VERTICAL_ALIGNMENT = 136;\n",
      "\n",
      "    /**\n",
      "     * Value of 1 is equivalent to no scaling\n",
      "     **/\n",
      "    public static final int VERTICAL_SCALING = 76;\n",
      "    public static final int WIDOWS_CONTROL = 122;\n",
      "    public static final int WIDTH = 77;\n",
      "    public static final int WORD_SPACING = 78;\n",
      "    public static final int ADD_MARKED_CONTENT_TEXT = 137;\n",
      "    public static final int TREAT_AS_CONTINUOUS_CONTAINER = 140;\n",
      "    public static final int TREAT_AS_CONTINUOUS_CONTAINER_RESULT = 141;\n",
      "\n",
      "    /**\n",
      "     * Some properties must be passed to {@link IPropertyContainer} objects that\n",
      "     * are lower in the document's hierarchy. Most inherited properties are\n",
      "     * related to textual operations. Indicates whether or not this type of property is inheritable.\n",
      "     */\n",
      "    private static final boolean[] INHERITED_PROPERTIES;\n",
      "    private static final int MAX_INHERITED_PROPERTY_ID = 156;\n",
      "\n",
      "    static {\n",
      "        INHERITED_PROPERTIES = new boolean[MAX_INHERITED_PROPERTY_ID + 1];\n",
      "\n",
      "        INHERITED_PROPERTIES[Property.APPEARANCE_STREAM_LAYOUT] = true;\n",
      "        INHERITED_PROPERTIES[Property.BASE_DIRECTION] = true;\n",
      "        INHERITED_PROPERTIES[Property.BOLD_SIMULATION] = true;\n",
      "        INHERITED_PROPERTIES[Property.CAPTION_SIDE] = true;\n",
      "        INHERITED_PROPERTIES[Property.CHARACTER_SPACING] = true;\n",
      "        INHERITED_PROPERTIES[Property.COLLAPSING_MARGINS] = true;\n",
      "        INHERITED_PROPERTIES[Property.FIRST_LINE_INDENT] = true;\n",
      "        INHERITED_PROPERTIES[Property.FONT] = true;\n",
      "        INHERITED_PROPERTIES[Property.FONT_COLOR] = true;\n",
      "        INHERITED_PROPERTIES[Property.FONT_KERNING] = true;\n",
      "        INHERITED_PROPERTIES[Property.FONT_PROVIDER] = true;\n",
      "        INHERITED_PROPERTIES[Property.FONT_SET] = true;\n",
      "        INHERITED_PROPERTIES[Property.FONT_SCRIPT] = true;\n",
      "        INHERITED_PROPERTIES[Property.FONT_SIZE] = true;\n",
      "        INHERITED_PROPERTIES[Property.FONT_STYLE] = true;\n",
      "        INHERITED_PROPERTIES[Property.FONT_WEIGHT] = true;\n",
      "        INHERITED_PROPERTIES[Property.FORCED_PLACEMENT] = true;\n",
      "        INHERITED_PROPERTIES[Property.HYPHENATION] = true;\n",
      "        INHERITED_PROPERTIES[Property.ITALIC_SIMULATION] = true;\n",
      "        INHERITED_PROPERTIES[Property.KEEP_TOGETHER] = true;\n",
      "        INHERITED_PROPERTIES[Property.LEADING] = true;\n",
      "        INHERITED_PROPERTIES[Property.NO_SOFT_WRAP_INLINE] = true;\n",
      "        INHERITED_PROPERTIES[Property.ORPHANS_CONTROL] = true;\n",
      "        INHERITED_PROPERTIES[Property.SPACING_RATIO] = true;\n",
      "        INHERITED_PROPERTIES[Property.SPLIT_CHARACTERS] = true;\n",
      "        INHERITED_PROPERTIES[Property.STROKE_COLOR] = true;\n",
      "        INHERITED_PROPERTIES[Property.STROKE_WIDTH] = true;\n",
      "        INHERITED_PROPERTIES[Property.TEXT_ALIGNMENT] = true;\n",
      "        INHERITED_PROPERTIES[Property.TEXT_RENDERING_MODE] = true;\n",
      "        INHERITED_PROPERTIES[Property.TEXT_RISE] = true;\n",
      "        INHERITED_PROPERTIES[Property.UNDERLINE] = true;\n",
      "        INHERITED_PROPERTIES[Property.WIDOWS_CONTROL] = true;\n",
      "        INHERITED_PROPERTIES[Property.WORD_SPACING] = true;\n",
      "        INHERITED_PROPERTIES[Property.TAGGING_HELPER] = true;\n",
      "        INHERITED_PROPERTIES[Property.TYPOGRAPHY_CONFIG] = true;\n",
      "        INHERITED_PROPERTIES[Property.RENDERING_MODE] = true;\n",
      "        INHERITED_PROPERTIES[Property.LINE_HEIGHT] = true;\n",
      "        INHERITED_PROPERTIES[Property.OVERFLOW_WRAP] = true;\n",
      "        INHERITED_PROPERTIES[Property.META_INFO] = true;\n",
      "        INHERITED_PROPERTIES[Property.ADD_MARKED_CONTENT_TEXT] = true;\n",
      "        INHERITED_PROPERTIES[Property.TREAT_AS_CONTINUOUS_CONTAINER] = true;\n",
      "    }\n",
      "\n",
      "    private Property() {\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * This method checks whether a Property, in order to be picked up by the\n",
      "     * rendering engine, must be defined on the current element or renderer\n",
      "     * (<code>return false</code>), or may be defined in one of its parent\n",
      "     * elements or renderers (<code>return true</code>).\n",
      "     *\n",
      "     * @param property the ID, defined in this class, of the property to check\n",
      "     * @return whether the property type is inheritable\n",
      "     */\n",
      "    public static boolean isPropertyInherited(int property) {\n",
      "        return property >= 0 && property <= MAX_INHERITED_PROPERTY_ID && INHERITED_PROPERTIES[property];\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.layout.properties;\n",
      "\n",
      "import com.itextpdf.test.ExtendedITextTest;\n",
      "import com.itextpdf.test.annotations.type.UnitTest;\n",
      "\n",
      "import java.lang.reflect.Field;\n",
      "import com.itextpdf.commons.utils.MessageFormatUtil;\n",
      "import java.util.HashSet;\n",
      "import java.util.Set;\n",
      "\n",
      "import org.junit.Assert;\n",
      "import org.junit.Test;\n",
      "import org.junit.experimental.categories.Category;\n",
      "\n",
      "@Category(UnitTest.class)\n",
      "public class PropertyTest extends ExtendedITextTest {\n",
      "\n",
      "    @Test\n",
      "    public void propertyUniquenessTest() throws IllegalAccessException {\n",
      "        Set<Integer> fieldValues = new HashSet<>();\n",
      "        int maxFieldValue = 1;\n",
      "        for (Field field : Property.class.getFields()) {\n",
      "            if (field.getType() == int.class) {\n",
      "                int value = (int) field.get(null);\n",
      "                maxFieldValue = Math.max(maxFieldValue, value);\n",
      "                if (fieldValues.contains(value)) {\n",
      "                    Assert.fail(MessageFormatUtil.format(\"Multiple fields with same value: {0}\", value));\n",
      "                }\n",
      "                fieldValues.add(value);\n",
      "            }\n",
      "        }\n",
      "\n",
      "        for (int i = 1; i <= maxFieldValue; i++) {\n",
      "            if (!fieldValues.contains(i)) {\n",
      "                Assert.fail(MessageFormatUtil.format(\"Missing value: {0}\", i));\n",
      "            }\n",
      "        }\n",
      "\n",
      "        System.out.println(MessageFormatUtil.format(\"Max field value: {0}\", maxFieldValue));\n",
      "    }\n",
      "\n",
      "}\n"
    ],
    "method_lines_dic": {
      "Property::::isPropertyInherited(int)": [
        299,
        301
      ]
    },
    "test_method_lines_dic": {
      "PropertyTest::::propertyUniquenessTest()": [
        40,
        62
      ]
    },
    "reverse_method_lines_dic": {
      "299": "Property::::isPropertyInherited(int)",
      "300": "Property::::isPropertyInherited(int)",
      "301": "Property::::isPropertyInherited(int)"
    },
    "test_reverse_method_lines_dic": {
      "40": "PropertyTest::::propertyUniquenessTest()",
      "41": "PropertyTest::::propertyUniquenessTest()",
      "42": "PropertyTest::::propertyUniquenessTest()",
      "43": "PropertyTest::::propertyUniquenessTest()",
      "44": "PropertyTest::::propertyUniquenessTest()",
      "45": "PropertyTest::::propertyUniquenessTest()",
      "46": "PropertyTest::::propertyUniquenessTest()",
      "47": "PropertyTest::::propertyUniquenessTest()",
      "48": "PropertyTest::::propertyUniquenessTest()",
      "49": "PropertyTest::::propertyUniquenessTest()",
      "50": "PropertyTest::::propertyUniquenessTest()",
      "51": "PropertyTest::::propertyUniquenessTest()",
      "52": "PropertyTest::::propertyUniquenessTest()",
      "53": "PropertyTest::::propertyUniquenessTest()",
      "54": "PropertyTest::::propertyUniquenessTest()",
      "55": "PropertyTest::::propertyUniquenessTest()",
      "56": "PropertyTest::::propertyUniquenessTest()",
      "57": "PropertyTest::::propertyUniquenessTest()",
      "58": "PropertyTest::::propertyUniquenessTest()",
      "59": "PropertyTest::::propertyUniquenessTest()",
      "60": "PropertyTest::::propertyUniquenessTest()",
      "61": "PropertyTest::::propertyUniquenessTest()",
      "62": "PropertyTest::::propertyUniquenessTest()"
    },
    "tests": [
      {
        "test_lines": [
          40,
          62
        ],
        "covered_lines": [
          242,
          244,
          245,
          246,
          247,
          248,
          249,
          250,
          251,
          252,
          253,
          254,
          255,
          256,
          257,
          258,
          259,
          260,
          261,
          262,
          263,
          264,
          265,
          266,
          267,
          268,
          269,
          270,
          271,
          272,
          273,
          274,
          275,
          276,
          277,
          278,
          279,
          280,
          281,
          282,
          283,
          284,
          285
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/itext-java/layout/src/main/java/com/itextpdf/layout/properties/GridValue.java": {
    "class_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.layout.properties;\n",
      "\n",
      "/**\n",
      " * A specialized class that holds a value for grid-template-columns/rows and\n",
      " * grid-auto-columns/rows properties and the type it is measured in.\n",
      " */\n",
      "public class GridValue {\n",
      "    private static final GridValue MIN_CONTENT_VALUE = new GridValue(SizingValueType.MIN_CONTENT);\n",
      "    private static final GridValue MAX_CONTENT_VALUE = new GridValue(SizingValueType.MAX_CONTENT);\n",
      "    private static final GridValue AUTO_VALUE = new GridValue(SizingValueType.AUTO);\n",
      "\n",
      "    private SizingValueType type;\n",
      "    private Float value;\n",
      "\n",
      "    private GridValue() {\n",
      "       // Do nothing\n",
      "    }\n",
      "\n",
      "    private GridValue(SizingValueType type) {\n",
      "        this.type = type;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Creates an instance of {@link GridValue} with point value.\n",
      "     *\n",
      "     * @param value the point value\n",
      "     *\n",
      "     * @return the grid value instance\n",
      "     */\n",
      "    public static GridValue createPointValue(float value) {\n",
      "        GridValue result = new GridValue();\n",
      "        result.type = SizingValueType.POINT;\n",
      "        result.value = value;\n",
      "        return result;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Creates an instance of {@link GridValue} with percent value.\n",
      "     *\n",
      "     * @param value the percent value\n",
      "     *\n",
      "     * @return the grid value instance\n",
      "     */\n",
      "    public static GridValue createPercentValue(float value) {\n",
      "        GridValue result = new GridValue();\n",
      "        result.type = SizingValueType.PERCENT;\n",
      "        result.value = value;\n",
      "        return result;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Creates an instance of {@link GridValue} with min-content value.\n",
      "     *\n",
      "     * @return the grid value instance\n",
      "     */\n",
      "    public static GridValue createMinContentValue() {\n",
      "        return MIN_CONTENT_VALUE;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Creates an instance of {@link GridValue} with max-content value.\n",
      "     *\n",
      "     * @return the grid value instance\n",
      "     */\n",
      "    public static GridValue createMaxContentValue() {\n",
      "        return MAX_CONTENT_VALUE;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Creates an instance of {@link GridValue} with auto value.\n",
      "     *\n",
      "     * @return the grid value instance\n",
      "     */\n",
      "    public static GridValue createAutoValue() {\n",
      "        return AUTO_VALUE;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Creates an instance of {@link GridValue} with flexible value.\n",
      "     *\n",
      "     * @param value the flexible value\n",
      "     *\n",
      "     * @return the grid value instance\n",
      "     */\n",
      "    public static GridValue createFlexValue(float value) {\n",
      "        GridValue result = new GridValue();\n",
      "        result.type = SizingValueType.FLEX;\n",
      "        result.value = value;\n",
      "        return result;\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * Checks whether the value is absolute.\n",
      "     *\n",
      "     * @return {@code true} if absolute, {@code false} otherwise\n",
      "     */\n",
      "    public boolean isPointValue() {\n",
      "        return type == SizingValueType.POINT;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Checks whether the value is percent.\n",
      "     *\n",
      "     * @return {@code true} if percent, {@code false} otherwise\n",
      "     */\n",
      "    public boolean isPercentValue() {\n",
      "        return type == SizingValueType.PERCENT;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Checks whether the value is auto.\n",
      "     *\n",
      "     * @return {@code true} if auto, {@code false} otherwise\n",
      "     */\n",
      "    public boolean isAutoValue() {\n",
      "        return type == SizingValueType.AUTO;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Checks whether the value is min-content.\n",
      "     *\n",
      "     * @return {@code true} if min-content, {@code false} otherwise\n",
      "     */\n",
      "    public boolean isMinContentValue() {\n",
      "        return type == SizingValueType.MIN_CONTENT;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Checks whether the value is max-content.\n",
      "     *\n",
      "     * @return {@code true} if max-content, {@code false} otherwise\n",
      "     */\n",
      "    public boolean isMaxContentValue() {\n",
      "        return type == SizingValueType.MAX_CONTENT;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Checks whether the value is flexible.\n",
      "     *\n",
      "     * @return {@code true} if flexible, {@code false} otherwise\n",
      "     */\n",
      "    public boolean isFlexibleValue() {\n",
      "        return type == SizingValueType.FLEX;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Gets value, if exists.\n",
      "     *\n",
      "     * @return the value, or {@code null} if there is no value\n",
      "     */\n",
      "    public Float getValue() {\n",
      "        return value;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Enum of sizing value types.\n",
      "     */\n",
      "    private enum SizingValueType {\n",
      "        /**\n",
      "         * Type which presents absolute point value.\n",
      "         */\n",
      "        POINT,\n",
      "        /**\n",
      "         * Type which presents relative percent value.\n",
      "         */\n",
      "        PERCENT,\n",
      "        /**\n",
      "         * Type which presents relative auto value.\n",
      "         */\n",
      "        AUTO,\n",
      "        /**\n",
      "         * Type which presents relative min content value.\n",
      "         */\n",
      "        MIN_CONTENT,\n",
      "        /**\n",
      "         * Type which presents relative max content value.\n",
      "         */\n",
      "        MAX_CONTENT,\n",
      "        /**\n",
      "         * Type which presents relative fit content function value.\n",
      "         */\n",
      "        FIT_CONTENT,\n",
      "        /**\n",
      "         * Type which presents relative flexible value.\n",
      "         */\n",
      "        FLEX\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.layout.properties;\n",
      "\n",
      "import com.itextpdf.test.ExtendedITextTest;\n",
      "import com.itextpdf.test.annotations.type.UnitTest;\n",
      "\n",
      "import org.junit.Assert;\n",
      "import org.junit.Test;\n",
      "import org.junit.experimental.categories.Category;\n",
      "\n",
      "@Category(UnitTest.class)\n",
      "public class GridValueTest extends ExtendedITextTest {\n",
      "    @Test\n",
      "    public void unitValueTest() {\n",
      "        GridValue value = GridValue.createPointValue(3.2f);\n",
      "        Assert.assertTrue(value.isPointValue());\n",
      "        Assert.assertEquals(3.2f, value.getValue(), 0.00001);\n",
      "\n",
      "        value = GridValue.createPercentValue(30f);\n",
      "        Assert.assertTrue(value.isPercentValue());\n",
      "        Assert.assertEquals(30, value.getValue(), 0.00001);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void minMaxContentTest() {\n",
      "        GridValue value = GridValue.createMinContentValue();\n",
      "        Assert.assertTrue(value.isMinContentValue());\n",
      "        Assert.assertNull(value.getValue());\n",
      "\n",
      "        value = GridValue.createMaxContentValue();\n",
      "        Assert.assertTrue(value.isMaxContentValue());\n",
      "        Assert.assertNull(value.getValue());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void autoTest() {\n",
      "        GridValue value = GridValue.createAutoValue();\n",
      "        Assert.assertTrue(value.isAutoValue());\n",
      "        Assert.assertNull(value.getValue());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void flexValueTest() {\n",
      "        GridValue value = GridValue.createFlexValue(1.5f);\n",
      "        Assert.assertTrue(value.isFlexibleValue());\n",
      "        Assert.assertEquals(1.5f, (float) value.getValue(), 0.00001);\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "GridValue::::createPointValue(float)": [
        52,
        57
      ],
      "GridValue::::createPercentValue(float)": [
        66,
        71
      ],
      "GridValue::::createMinContentValue()": [
        78,
        80
      ],
      "GridValue::::createMaxContentValue()": [
        87,
        89
      ],
      "GridValue::::createAutoValue()": [
        96,
        98
      ],
      "GridValue::::createFlexValue(float)": [
        107,
        112
      ],
      "GridValue::::isPointValue()": [
        120,
        122
      ],
      "GridValue::::isPercentValue()": [
        129,
        131
      ],
      "GridValue::::isAutoValue()": [
        138,
        140
      ],
      "GridValue::::isMinContentValue()": [
        147,
        149
      ],
      "GridValue::::isMaxContentValue()": [
        156,
        158
      ],
      "GridValue::::isFlexibleValue()": [
        165,
        167
      ],
      "GridValue::::getValue()": [
        174,
        176
      ]
    },
    "test_method_lines_dic": {
      "GridValueTest::::unitValueTest()": [
        34,
        43
      ],
      "GridValueTest::::minMaxContentTest()": [
        45,
        54
      ],
      "GridValueTest::::autoTest()": [
        56,
        61
      ],
      "GridValueTest::::flexValueTest()": [
        63,
        68
      ]
    },
    "reverse_method_lines_dic": {
      "52": "GridValue::::createPointValue(float)",
      "53": "GridValue::::createPointValue(float)",
      "54": "GridValue::::createPointValue(float)",
      "55": "GridValue::::createPointValue(float)",
      "56": "GridValue::::createPointValue(float)",
      "57": "GridValue::::createPointValue(float)",
      "66": "GridValue::::createPercentValue(float)",
      "67": "GridValue::::createPercentValue(float)",
      "68": "GridValue::::createPercentValue(float)",
      "69": "GridValue::::createPercentValue(float)",
      "70": "GridValue::::createPercentValue(float)",
      "71": "GridValue::::createPercentValue(float)",
      "78": "GridValue::::createMinContentValue()",
      "79": "GridValue::::createMinContentValue()",
      "80": "GridValue::::createMinContentValue()",
      "87": "GridValue::::createMaxContentValue()",
      "88": "GridValue::::createMaxContentValue()",
      "89": "GridValue::::createMaxContentValue()",
      "96": "GridValue::::createAutoValue()",
      "97": "GridValue::::createAutoValue()",
      "98": "GridValue::::createAutoValue()",
      "107": "GridValue::::createFlexValue(float)",
      "108": "GridValue::::createFlexValue(float)",
      "109": "GridValue::::createFlexValue(float)",
      "110": "GridValue::::createFlexValue(float)",
      "111": "GridValue::::createFlexValue(float)",
      "112": "GridValue::::createFlexValue(float)",
      "120": "GridValue::::isPointValue()",
      "121": "GridValue::::isPointValue()",
      "122": "GridValue::::isPointValue()",
      "129": "GridValue::::isPercentValue()",
      "130": "GridValue::::isPercentValue()",
      "131": "GridValue::::isPercentValue()",
      "138": "GridValue::::isAutoValue()",
      "139": "GridValue::::isAutoValue()",
      "140": "GridValue::::isAutoValue()",
      "147": "GridValue::::isMinContentValue()",
      "148": "GridValue::::isMinContentValue()",
      "149": "GridValue::::isMinContentValue()",
      "156": "GridValue::::isMaxContentValue()",
      "157": "GridValue::::isMaxContentValue()",
      "158": "GridValue::::isMaxContentValue()",
      "165": "GridValue::::isFlexibleValue()",
      "166": "GridValue::::isFlexibleValue()",
      "167": "GridValue::::isFlexibleValue()",
      "174": "GridValue::::getValue()",
      "175": "GridValue::::getValue()",
      "176": "GridValue::::getValue()"
    },
    "test_reverse_method_lines_dic": {
      "34": "GridValueTest::::unitValueTest()",
      "35": "GridValueTest::::unitValueTest()",
      "36": "GridValueTest::::unitValueTest()",
      "37": "GridValueTest::::unitValueTest()",
      "38": "GridValueTest::::unitValueTest()",
      "39": "GridValueTest::::unitValueTest()",
      "40": "GridValueTest::::unitValueTest()",
      "41": "GridValueTest::::unitValueTest()",
      "42": "GridValueTest::::unitValueTest()",
      "43": "GridValueTest::::unitValueTest()",
      "45": "GridValueTest::::minMaxContentTest()",
      "46": "GridValueTest::::minMaxContentTest()",
      "47": "GridValueTest::::minMaxContentTest()",
      "48": "GridValueTest::::minMaxContentTest()",
      "49": "GridValueTest::::minMaxContentTest()",
      "50": "GridValueTest::::minMaxContentTest()",
      "51": "GridValueTest::::minMaxContentTest()",
      "52": "GridValueTest::::minMaxContentTest()",
      "53": "GridValueTest::::minMaxContentTest()",
      "54": "GridValueTest::::minMaxContentTest()",
      "56": "GridValueTest::::autoTest()",
      "57": "GridValueTest::::autoTest()",
      "58": "GridValueTest::::autoTest()",
      "59": "GridValueTest::::autoTest()",
      "60": "GridValueTest::::autoTest()",
      "61": "GridValueTest::::autoTest()",
      "63": "GridValueTest::::flexValueTest()",
      "64": "GridValueTest::::flexValueTest()",
      "65": "GridValueTest::::flexValueTest()",
      "66": "GridValueTest::::flexValueTest()",
      "67": "GridValueTest::::flexValueTest()",
      "68": "GridValueTest::::flexValueTest()"
    },
    "tests": [
      {
        "test_lines": [
          34,
          43
        ],
        "covered_lines": [
          30,
          31,
          32,
          37,
          39,
          41,
          42,
          43,
          53,
          54,
          55,
          56,
          67,
          68,
          69,
          70,
          121,
          130,
          175,
          181,
          185,
          189,
          193,
          197,
          201,
          205,
          209
        ]
      },
      {
        "test_lines": [
          45,
          54
        ],
        "covered_lines": [
          30,
          31,
          32,
          41,
          42,
          43,
          79,
          88,
          148,
          157,
          175,
          181,
          185,
          189,
          193,
          197,
          201,
          205,
          209
        ]
      },
      {
        "test_lines": [
          56,
          61
        ],
        "covered_lines": [
          30,
          31,
          32,
          41,
          42,
          43,
          97,
          139,
          175,
          181,
          185,
          189,
          193,
          197,
          201,
          205,
          209
        ]
      },
      {
        "test_lines": [
          63,
          68
        ],
        "covered_lines": [
          30,
          31,
          32,
          37,
          39,
          41,
          42,
          43,
          108,
          109,
          110,
          111,
          166,
          175,
          181,
          185,
          189,
          193,
          197,
          201,
          205,
          209
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/itext-java/layout/src/main/java/com/itextpdf/layout/font/Range.java": {
    "class_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.layout.font;\n",
      "\n",
      "import java.util.ArrayList;\n",
      "import java.util.Arrays;\n",
      "import java.util.Collections;\n",
      "import java.util.List;\n",
      "\n",
      "/**\n",
      " * Class represents ordered list of {@link SubRange}.\n",
      " * This class is used in {@link FontInfo} as internal field and in one of the overloads of\n",
      " * the {@link com.itextpdf.layout.font.FontProvider#addFont(String, String, Range)} method as range\n",
      " * of characters to be used in font.\n",
      " *\n",
      " * <p>\n",
      " * To create a custom Range instance {@link RangeBuilder} shall be used.\n",
      " */\n",
      "public class Range {\n",
      "\n",
      "    //ordered sub-ranges\n",
      "    private SubRange[] ranges;\n",
      "\n",
      "    private Range() {\n",
      "    }\n",
      "\n",
      "    Range(List<SubRange> ranges) {\n",
      "        if (ranges.size() == 0) {\n",
      "            throw new IllegalArgumentException(\"Ranges shall not be empty\");\n",
      "        }\n",
      "        this.ranges = normalizeSubRanges(ranges);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Binary search over ordered segments.\n",
      "     *\n",
      "     * @param n numeric character reference based on the character's Unicode code point\n",
      "     * @return true if this Range contains the specified code point, otherwise false\n",
      "     */\n",
      "    public boolean contains(int n) {\n",
      "        int low = 0;\n",
      "        int high = ranges.length - 1;\n",
      "\n",
      "        while (low <= high) {\n",
      "            int mid = (low + high) >>> 1;\n",
      "            if (ranges[mid].compareTo(n) < 0)\n",
      "                low = mid + 1;\n",
      "            else if (ranges[mid].compareTo(n) > 0)\n",
      "                high = mid - 1;\n",
      "            else\n",
      "                return true;\n",
      "        }\n",
      "        return false;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public boolean equals(Object o) {\n",
      "        if (this == o) return true;\n",
      "        if (o == null || getClass() != o.getClass()) return false;\n",
      "        Range range = (Range) o;\n",
      "        return Arrays.equals(ranges, range.ranges);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public int hashCode() {\n",
      "        return Arrays.hashCode(ranges);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public String toString() {\n",
      "        return Arrays.toString(ranges);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Order ranges. Replace with a union of ranges in case of overlap.\n",
      "     *\n",
      "     * @param ranges Unsorted list of sub-ranges.\n",
      "     * @return ordered and normalized sub-ranges.\n",
      "     */\n",
      "    private static SubRange[] normalizeSubRanges(List<SubRange> ranges) {\n",
      "        //Ranges will not be modified, let's create a union of sub-ranges.\n",
      "        //1. Sort ranges by start point.\n",
      "        Collections.sort(ranges);\n",
      "        List<SubRange> union = new ArrayList<>(ranges.size());\n",
      "\n",
      "        assert ranges.size() > 0;\n",
      "        SubRange curr = ranges.get(0);\n",
      "        union.add(curr);\n",
      "        for (int i = 1; i < ranges.size(); i++) {\n",
      "            SubRange next = ranges.get(i);\n",
      "            //assume that curr.low <= next.low\n",
      "            if (next.low <= curr.high) {\n",
      "                //union, update curr\n",
      "                if (next.high > curr.high)\n",
      "                    curr.high = next.high;\n",
      "            } else {\n",
      "                //add a new sub-range.\n",
      "                curr = next;\n",
      "                union.add(curr);\n",
      "            }\n",
      "        }\n",
      "\n",
      "        return union.toArray(new SubRange[0]);\n",
      "    }\n",
      "\n",
      "    static class SubRange implements Comparable<SubRange> {\n",
      "        int low;\n",
      "        int high;\n",
      "\n",
      "        SubRange(int low, int high) {\n",
      "            this.low = low;\n",
      "            this.high = high;\n",
      "        }\n",
      "\n",
      "        @Override\n",
      "        public int compareTo(SubRange o) {\n",
      "            return low - o.low;\n",
      "        }\n",
      "\n",
      "        public int compareTo(int n) {\n",
      "            if (n < low) return 1;\n",
      "            if (n > high) return -1;\n",
      "            return 0;\n",
      "        }\n",
      "\n",
      "        @Override\n",
      "        public boolean equals(Object o) {\n",
      "            if (this == o) return true;\n",
      "            if (o == null || getClass() != o.getClass()) return false;\n",
      "            SubRange subRange = (SubRange) o;\n",
      "            return low == subRange.low &&\n",
      "                    high == subRange.high;\n",
      "        }\n",
      "\n",
      "        @Override\n",
      "        public int hashCode() {\n",
      "            return 31 * low + high;\n",
      "        }\n",
      "\n",
      "        @Override\n",
      "        public String toString() {\n",
      "            return \"(\" + low + \"; \" + high +')';\n",
      "        }\n",
      "    }\n",
      "\n",
      "    static class FullRange extends Range {\n",
      "        FullRange() {\n",
      "            super();\n",
      "        }\n",
      "\n",
      "        @Override\n",
      "        public boolean contains(int uni) {\n",
      "            return true;\n",
      "        }\n",
      "\n",
      "        @Override\n",
      "        public boolean equals(Object o) {\n",
      "            return this == o;\n",
      "        }\n",
      "\n",
      "        @Override\n",
      "        public int hashCode() {\n",
      "            return 1;\n",
      "        }\n",
      "\n",
      "        @Override\n",
      "        public String toString() {\n",
      "            return \"[FullRange]\";\n",
      "        }\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.layout.font;\n",
      "\n",
      "import com.itextpdf.test.ExtendedITextTest;\n",
      "import com.itextpdf.test.annotations.type.UnitTest;\n",
      "\n",
      "import org.junit.Assert;\n",
      "import org.junit.Test;\n",
      "import org.junit.experimental.categories.Category;\n",
      "import java.util.Random;\n",
      "\n",
      "@Category(UnitTest.class)\n",
      "public class RangeTest extends ExtendedITextTest {\n",
      "\n",
      "    @Test\n",
      "    public void testWrongRange() {\n",
      "        Assert.assertThrows(IllegalArgumentException.class, () -> new RangeBuilder().addRange(11, 10));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testWrongRangeSize() {\n",
      "        Assert.assertThrows(IllegalArgumentException.class, () -> new RangeBuilder().create());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testFullRange() {\n",
      "        Assert.assertTrue(RangeBuilder.getFullRange().contains(new Random().nextInt()));\n",
      "\n",
      "        Assert.assertTrue(RangeBuilder.getFullRange().equals(RangeBuilder.getFullRange()));\n",
      "\n",
      "        Assert.assertTrue(RangeBuilder.getFullRange() == RangeBuilder.getFullRange());\n",
      "\n",
      "        Assert.assertFalse(RangeBuilder.getFullRange().equals(new RangeBuilder().addRange(1).create()));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testHashCodeAndEquals() {\n",
      "\n",
      "        Range range = new RangeBuilder((char) 25, (char) 26)\n",
      "                .addRange(1, 5)\n",
      "                .addRange(4, 7)\n",
      "                .create();\n",
      "\n",
      "        Range range2 = new RangeBuilder(25, 26)\n",
      "                .addRange((char) 1, (char) 7)\n",
      "                .create();\n",
      "\n",
      "\n",
      "        Assert.assertTrue(range.hashCode() == range2.hashCode());\n",
      "        Assert.assertTrue(range.equals(range2));\n",
      "        Assert.assertEquals(range.toString(), range2.toString());\n",
      "\n",
      "        Range range3 = new RangeBuilder(25)\n",
      "                .addRange((char) 26)\n",
      "                .addRange((char) 1, (char) 7)\n",
      "                .create();\n",
      "\n",
      "        Assert.assertFalse(range2.hashCode() == range3.hashCode());\n",
      "        Assert.assertFalse(range2.equals(range3));\n",
      "        Assert.assertNotEquals(range2.toString(), range3.toString());\n",
      "\n",
      "        Range range4 = new RangeBuilder(26)\n",
      "                .addRange((char) 25)\n",
      "                .addRange((char) 1, (char) 4)\n",
      "                .addRange((char) 3, (char) 7)\n",
      "                .create();\n",
      "\n",
      "        Assert.assertTrue(range3.hashCode() == range4.hashCode());\n",
      "        Assert.assertTrue(range3.equals(range4));\n",
      "        Assert.assertEquals(range3.toString(), range4.toString());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testUnionAndContains() {\n",
      "        Range range = new RangeBuilder((char) 25, (char) 27)\n",
      "                .addRange(2, 10)\n",
      "                .addRange(0, 20)\n",
      "                .addRange(1, 19)\n",
      "                .addRange(33, 40)\n",
      "                .addRange(0, 5)\n",
      "                .addRange(20, 22)\n",
      "                .addRange(8, 15)\n",
      "                .addRange(25, 30)\n",
      "                .create();\n",
      "        Assert.assertEquals(\"[(0; 22), (25; 30), (33; 40)]\", range.toString());\n",
      "\n",
      "        Assert.assertTrue(range.contains(0));\n",
      "        Assert.assertTrue(range.contains(10));\n",
      "        Assert.assertTrue(range.contains(22));\n",
      "        Assert.assertTrue(range.contains(25));\n",
      "        Assert.assertTrue(range.contains(27));\n",
      "        Assert.assertTrue(range.contains(30));\n",
      "        Assert.assertTrue(range.contains(33));\n",
      "        Assert.assertTrue(range.contains(34));\n",
      "        Assert.assertTrue(range.contains(40));\n",
      "\n",
      "        Assert.assertFalse(range.contains(-1));\n",
      "        Assert.assertFalse(range.contains(23));\n",
      "        Assert.assertFalse(range.contains(31));\n",
      "        Assert.assertFalse(range.contains(32));\n",
      "        Assert.assertFalse(range.contains(41));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testSingles() {\n",
      "        Range range = new RangeBuilder((char) 1)\n",
      "                .addRange(2)\n",
      "                .addRange(3)\n",
      "                .addRange(6)\n",
      "                .create();\n",
      "        Assert.assertEquals(\"[(1; 1), (2; 2), (3; 3), (6; 6)]\", range.toString());\n",
      "\n",
      "        Assert.assertTrue(range.contains(1));\n",
      "        Assert.assertTrue(range.contains(2));\n",
      "        Assert.assertTrue(range.contains(3));\n",
      "        Assert.assertTrue(range.contains(6));\n",
      "\n",
      "        Assert.assertFalse(range.contains(0));\n",
      "        Assert.assertFalse(range.contains(5));\n",
      "        Assert.assertFalse(range.contains(7));\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "Range::::contains(int)": [
        60,
        74
      ],
      "Range::::equals(java.lang.Object)": [
        76,
        82
      ],
      "Range::::hashCode()": [
        84,
        87
      ],
      "Range::::toString()": [
        89,
        92
      ],
      "Range::::normalizeSubRanges(java.util.List<com.itextpdf.layout.font.Range.SubRange>)": [
        100,
        124
      ],
      "Range.SubRange::::compareTo(com.itextpdf.layout.font.Range.SubRange)": [
        135,
        138
      ],
      "Range.SubRange::::compareTo(int)": [
        140,
        144
      ],
      "Range.SubRange::::equals(java.lang.Object)": [
        146,
        153
      ],
      "Range.SubRange::::hashCode()": [
        155,
        158
      ],
      "Range.SubRange::::toString()": [
        160,
        163
      ],
      "Range.FullRange::::contains(int)": [
        171,
        174
      ],
      "Range.FullRange::::equals(java.lang.Object)": [
        176,
        179
      ],
      "Range.FullRange::::hashCode()": [
        181,
        184
      ],
      "Range.FullRange::::toString()": [
        186,
        189
      ]
    },
    "test_method_lines_dic": {
      "RangeTest::::testWrongRange()": [
        36,
        39
      ],
      "RangeTest::::testWrongRangeSize()": [
        41,
        44
      ],
      "RangeTest::::testFullRange()": [
        46,
        55
      ],
      "RangeTest::::testHashCodeAndEquals()": [
        57,
        92
      ],
      "RangeTest::::testUnionAndContains()": [
        94,
        123
      ],
      "RangeTest::::testSingles()": [
        125,
        142
      ]
    },
    "reverse_method_lines_dic": {
      "60": "Range::::contains(int)",
      "61": "Range::::contains(int)",
      "62": "Range::::contains(int)",
      "63": "Range::::contains(int)",
      "64": "Range::::contains(int)",
      "65": "Range::::contains(int)",
      "66": "Range::::contains(int)",
      "67": "Range::::contains(int)",
      "68": "Range::::contains(int)",
      "69": "Range::::contains(int)",
      "70": "Range::::contains(int)",
      "71": "Range::::contains(int)",
      "72": "Range::::contains(int)",
      "73": "Range::::contains(int)",
      "74": "Range::::contains(int)",
      "76": "Range::::equals(java.lang.Object)",
      "77": "Range::::equals(java.lang.Object)",
      "78": "Range::::equals(java.lang.Object)",
      "79": "Range::::equals(java.lang.Object)",
      "80": "Range::::equals(java.lang.Object)",
      "81": "Range::::equals(java.lang.Object)",
      "82": "Range::::equals(java.lang.Object)",
      "84": "Range::::hashCode()",
      "85": "Range::::hashCode()",
      "86": "Range::::hashCode()",
      "87": "Range::::hashCode()",
      "89": "Range::::toString()",
      "90": "Range::::toString()",
      "91": "Range::::toString()",
      "92": "Range::::toString()",
      "100": "Range::::normalizeSubRanges(java.util.List<com.itextpdf.layout.font.Range.SubRange>)",
      "101": "Range::::normalizeSubRanges(java.util.List<com.itextpdf.layout.font.Range.SubRange>)",
      "102": "Range::::normalizeSubRanges(java.util.List<com.itextpdf.layout.font.Range.SubRange>)",
      "103": "Range::::normalizeSubRanges(java.util.List<com.itextpdf.layout.font.Range.SubRange>)",
      "104": "Range::::normalizeSubRanges(java.util.List<com.itextpdf.layout.font.Range.SubRange>)",
      "105": "Range::::normalizeSubRanges(java.util.List<com.itextpdf.layout.font.Range.SubRange>)",
      "106": "Range::::normalizeSubRanges(java.util.List<com.itextpdf.layout.font.Range.SubRange>)",
      "107": "Range::::normalizeSubRanges(java.util.List<com.itextpdf.layout.font.Range.SubRange>)",
      "108": "Range::::normalizeSubRanges(java.util.List<com.itextpdf.layout.font.Range.SubRange>)",
      "109": "Range::::normalizeSubRanges(java.util.List<com.itextpdf.layout.font.Range.SubRange>)",
      "110": "Range::::normalizeSubRanges(java.util.List<com.itextpdf.layout.font.Range.SubRange>)",
      "111": "Range::::normalizeSubRanges(java.util.List<com.itextpdf.layout.font.Range.SubRange>)",
      "112": "Range::::normalizeSubRanges(java.util.List<com.itextpdf.layout.font.Range.SubRange>)",
      "113": "Range::::normalizeSubRanges(java.util.List<com.itextpdf.layout.font.Range.SubRange>)",
      "114": "Range::::normalizeSubRanges(java.util.List<com.itextpdf.layout.font.Range.SubRange>)",
      "115": "Range::::normalizeSubRanges(java.util.List<com.itextpdf.layout.font.Range.SubRange>)",
      "116": "Range::::normalizeSubRanges(java.util.List<com.itextpdf.layout.font.Range.SubRange>)",
      "117": "Range::::normalizeSubRanges(java.util.List<com.itextpdf.layout.font.Range.SubRange>)",
      "118": "Range::::normalizeSubRanges(java.util.List<com.itextpdf.layout.font.Range.SubRange>)",
      "119": "Range::::normalizeSubRanges(java.util.List<com.itextpdf.layout.font.Range.SubRange>)",
      "120": "Range::::normalizeSubRanges(java.util.List<com.itextpdf.layout.font.Range.SubRange>)",
      "121": "Range::::normalizeSubRanges(java.util.List<com.itextpdf.layout.font.Range.SubRange>)",
      "122": "Range::::normalizeSubRanges(java.util.List<com.itextpdf.layout.font.Range.SubRange>)",
      "123": "Range::::normalizeSubRanges(java.util.List<com.itextpdf.layout.font.Range.SubRange>)",
      "124": "Range::::normalizeSubRanges(java.util.List<com.itextpdf.layout.font.Range.SubRange>)",
      "135": "Range.SubRange::::compareTo(com.itextpdf.layout.font.Range.SubRange)",
      "136": "Range.SubRange::::compareTo(com.itextpdf.layout.font.Range.SubRange)",
      "137": "Range.SubRange::::compareTo(com.itextpdf.layout.font.Range.SubRange)",
      "138": "Range.SubRange::::compareTo(com.itextpdf.layout.font.Range.SubRange)",
      "140": "Range.SubRange::::compareTo(int)",
      "141": "Range.SubRange::::compareTo(int)",
      "142": "Range.SubRange::::compareTo(int)",
      "143": "Range.SubRange::::compareTo(int)",
      "144": "Range.SubRange::::compareTo(int)",
      "146": "Range.SubRange::::equals(java.lang.Object)",
      "147": "Range.SubRange::::equals(java.lang.Object)",
      "148": "Range.SubRange::::equals(java.lang.Object)",
      "149": "Range.SubRange::::equals(java.lang.Object)",
      "150": "Range.SubRange::::equals(java.lang.Object)",
      "151": "Range.SubRange::::equals(java.lang.Object)",
      "152": "Range.SubRange::::equals(java.lang.Object)",
      "153": "Range.SubRange::::equals(java.lang.Object)",
      "155": "Range.SubRange::::hashCode()",
      "156": "Range.SubRange::::hashCode()",
      "157": "Range.SubRange::::hashCode()",
      "158": "Range.SubRange::::hashCode()",
      "160": "Range.SubRange::::toString()",
      "161": "Range.SubRange::::toString()",
      "162": "Range.SubRange::::toString()",
      "163": "Range.SubRange::::toString()",
      "171": "Range.FullRange::::contains(int)",
      "172": "Range.FullRange::::contains(int)",
      "173": "Range.FullRange::::contains(int)",
      "174": "Range.FullRange::::contains(int)",
      "176": "Range.FullRange::::equals(java.lang.Object)",
      "177": "Range.FullRange::::equals(java.lang.Object)",
      "178": "Range.FullRange::::equals(java.lang.Object)",
      "179": "Range.FullRange::::equals(java.lang.Object)",
      "181": "Range.FullRange::::hashCode()",
      "182": "Range.FullRange::::hashCode()",
      "183": "Range.FullRange::::hashCode()",
      "184": "Range.FullRange::::hashCode()",
      "186": "Range.FullRange::::toString()",
      "187": "Range.FullRange::::toString()",
      "188": "Range.FullRange::::toString()",
      "189": "Range.FullRange::::toString()"
    },
    "test_reverse_method_lines_dic": {
      "36": "RangeTest::::testWrongRange()",
      "37": "RangeTest::::testWrongRange()",
      "38": "RangeTest::::testWrongRange()",
      "39": "RangeTest::::testWrongRange()",
      "41": "RangeTest::::testWrongRangeSize()",
      "42": "RangeTest::::testWrongRangeSize()",
      "43": "RangeTest::::testWrongRangeSize()",
      "44": "RangeTest::::testWrongRangeSize()",
      "46": "RangeTest::::testFullRange()",
      "47": "RangeTest::::testFullRange()",
      "48": "RangeTest::::testFullRange()",
      "49": "RangeTest::::testFullRange()",
      "50": "RangeTest::::testFullRange()",
      "51": "RangeTest::::testFullRange()",
      "52": "RangeTest::::testFullRange()",
      "53": "RangeTest::::testFullRange()",
      "54": "RangeTest::::testFullRange()",
      "55": "RangeTest::::testFullRange()",
      "57": "RangeTest::::testHashCodeAndEquals()",
      "58": "RangeTest::::testHashCodeAndEquals()",
      "59": "RangeTest::::testHashCodeAndEquals()",
      "60": "RangeTest::::testHashCodeAndEquals()",
      "61": "RangeTest::::testHashCodeAndEquals()",
      "62": "RangeTest::::testHashCodeAndEquals()",
      "63": "RangeTest::::testHashCodeAndEquals()",
      "64": "RangeTest::::testHashCodeAndEquals()",
      "65": "RangeTest::::testHashCodeAndEquals()",
      "66": "RangeTest::::testHashCodeAndEquals()",
      "67": "RangeTest::::testHashCodeAndEquals()",
      "68": "RangeTest::::testHashCodeAndEquals()",
      "69": "RangeTest::::testHashCodeAndEquals()",
      "70": "RangeTest::::testHashCodeAndEquals()",
      "71": "RangeTest::::testHashCodeAndEquals()",
      "72": "RangeTest::::testHashCodeAndEquals()",
      "73": "RangeTest::::testHashCodeAndEquals()",
      "74": "RangeTest::::testHashCodeAndEquals()",
      "75": "RangeTest::::testHashCodeAndEquals()",
      "76": "RangeTest::::testHashCodeAndEquals()",
      "77": "RangeTest::::testHashCodeAndEquals()",
      "78": "RangeTest::::testHashCodeAndEquals()",
      "79": "RangeTest::::testHashCodeAndEquals()",
      "80": "RangeTest::::testHashCodeAndEquals()",
      "81": "RangeTest::::testHashCodeAndEquals()",
      "82": "RangeTest::::testHashCodeAndEquals()",
      "83": "RangeTest::::testHashCodeAndEquals()",
      "84": "RangeTest::::testHashCodeAndEquals()",
      "85": "RangeTest::::testHashCodeAndEquals()",
      "86": "RangeTest::::testHashCodeAndEquals()",
      "87": "RangeTest::::testHashCodeAndEquals()",
      "88": "RangeTest::::testHashCodeAndEquals()",
      "89": "RangeTest::::testHashCodeAndEquals()",
      "90": "RangeTest::::testHashCodeAndEquals()",
      "91": "RangeTest::::testHashCodeAndEquals()",
      "92": "RangeTest::::testHashCodeAndEquals()",
      "94": "RangeTest::::testUnionAndContains()",
      "95": "RangeTest::::testUnionAndContains()",
      "96": "RangeTest::::testUnionAndContains()",
      "97": "RangeTest::::testUnionAndContains()",
      "98": "RangeTest::::testUnionAndContains()",
      "99": "RangeTest::::testUnionAndContains()",
      "100": "RangeTest::::testUnionAndContains()",
      "101": "RangeTest::::testUnionAndContains()",
      "102": "RangeTest::::testUnionAndContains()",
      "103": "RangeTest::::testUnionAndContains()",
      "104": "RangeTest::::testUnionAndContains()",
      "105": "RangeTest::::testUnionAndContains()",
      "106": "RangeTest::::testUnionAndContains()",
      "107": "RangeTest::::testUnionAndContains()",
      "108": "RangeTest::::testUnionAndContains()",
      "109": "RangeTest::::testUnionAndContains()",
      "110": "RangeTest::::testUnionAndContains()",
      "111": "RangeTest::::testUnionAndContains()",
      "112": "RangeTest::::testUnionAndContains()",
      "113": "RangeTest::::testUnionAndContains()",
      "114": "RangeTest::::testUnionAndContains()",
      "115": "RangeTest::::testUnionAndContains()",
      "116": "RangeTest::::testUnionAndContains()",
      "117": "RangeTest::::testUnionAndContains()",
      "118": "RangeTest::::testUnionAndContains()",
      "119": "RangeTest::::testUnionAndContains()",
      "120": "RangeTest::::testUnionAndContains()",
      "121": "RangeTest::::testUnionAndContains()",
      "122": "RangeTest::::testUnionAndContains()",
      "123": "RangeTest::::testUnionAndContains()",
      "125": "RangeTest::::testSingles()",
      "126": "RangeTest::::testSingles()",
      "127": "RangeTest::::testSingles()",
      "128": "RangeTest::::testSingles()",
      "129": "RangeTest::::testSingles()",
      "130": "RangeTest::::testSingles()",
      "131": "RangeTest::::testSingles()",
      "132": "RangeTest::::testSingles()",
      "133": "RangeTest::::testSingles()",
      "134": "RangeTest::::testSingles()",
      "135": "RangeTest::::testSingles()",
      "136": "RangeTest::::testSingles()",
      "137": "RangeTest::::testSingles()",
      "138": "RangeTest::::testSingles()",
      "139": "RangeTest::::testSingles()",
      "140": "RangeTest::::testSingles()",
      "141": "RangeTest::::testSingles()",
      "142": "RangeTest::::testSingles()"
    },
    "tests": [
      {
        "test_lines": [
          36,
          39
        ],
        "covered_lines": [
          39,
          44,
          45,
          168,
          169
        ]
      },
      {
        "test_lines": [
          41,
          44
        ],
        "covered_lines": [
          39,
          44,
          45,
          47,
          48,
          49,
          168,
          169
        ]
      },
      {
        "test_lines": [
          46,
          55
        ],
        "covered_lines": [
          39,
          44,
          45,
          47,
          48,
          51,
          52,
          103,
          104,
          106,
          107,
          108,
          109,
          123,
          130,
          131,
          132,
          133,
          168,
          169,
          173,
          178
        ]
      },
      {
        "test_lines": [
          57,
          92
        ],
        "covered_lines": [
          39,
          44,
          45,
          47,
          48,
          51,
          52,
          78,
          79,
          80,
          81,
          86,
          91,
          103,
          104,
          106,
          107,
          108,
          109,
          110,
          112,
          114,
          115,
          118,
          119,
          123,
          130,
          131,
          132,
          133,
          137,
          148,
          149,
          150,
          151,
          157,
          162,
          168,
          169
        ]
      },
      {
        "test_lines": [
          94,
          123
        ],
        "covered_lines": [
          39,
          44,
          45,
          47,
          48,
          51,
          52,
          61,
          62,
          64,
          65,
          66,
          67,
          68,
          69,
          71,
          72,
          73,
          91,
          103,
          104,
          106,
          107,
          108,
          109,
          110,
          112,
          114,
          115,
          118,
          119,
          123,
          130,
          131,
          132,
          133,
          137,
          141,
          142,
          143,
          162,
          168,
          169
        ]
      },
      {
        "test_lines": [
          125,
          142
        ],
        "covered_lines": [
          39,
          44,
          45,
          47,
          48,
          51,
          52,
          61,
          62,
          64,
          65,
          66,
          67,
          68,
          69,
          71,
          72,
          73,
          91,
          103,
          104,
          106,
          107,
          108,
          109,
          110,
          112,
          118,
          119,
          123,
          130,
          131,
          132,
          133,
          137,
          141,
          142,
          143,
          162,
          168,
          169
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/itext-java/layout/src/main/java/com/itextpdf/layout/font/FontCharacteristics.java": {
    "class_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.layout.font;\n",
      "\n",
      "public final class FontCharacteristics {\n",
      "\n",
      "    private boolean isItalic = false;\n",
      "    private boolean isBold = false;\n",
      "    private short fontWeight = 400;\n",
      "    private boolean undefined = true;\n",
      "    private boolean isMonospace = false;\n",
      "\n",
      "    public FontCharacteristics() {\n",
      "    }\n",
      "\n",
      "    public FontCharacteristics(FontCharacteristics other) {\n",
      "        this();\n",
      "        this.isItalic = other.isItalic;\n",
      "        this.isBold = other.isBold;\n",
      "        this.fontWeight = other.fontWeight;\n",
      "        this.undefined = other.undefined;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Sets preferred font weight\n",
      "     *\n",
      "     * @param fw font weight in css notation.\n",
      "     * @see com.itextpdf.io.font.constants.FontWeights\n",
      "     * @return this instance.\n",
      "     */\n",
      "    public FontCharacteristics setFontWeight(short fw) {\n",
      "        if (fw > 0) {\n",
      "            this.fontWeight = FontCharacteristicsUtils.normalizeFontWeight(fw);\n",
      "            modified();\n",
      "        }\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    public FontCharacteristics setFontWeight(String fw) {\n",
      "        return setFontWeight(FontCharacteristicsUtils.parseFontWeight(fw));\n",
      "    }\n",
      "\n",
      "    public FontCharacteristics setBoldFlag(boolean isBold) {\n",
      "        this.isBold = isBold;\n",
      "        if (this.isBold) modified();\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    public FontCharacteristics setItalicFlag(boolean isItalic) {\n",
      "        this.isItalic = isItalic;\n",
      "        if (this.isItalic) modified();\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    public FontCharacteristics setMonospaceFlag(boolean isMonospace) {\n",
      "        this.isMonospace = isMonospace;\n",
      "        if (this.isMonospace) modified();\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Set font style\n",
      "     * @param fs shall be 'normal', 'italic' or 'oblique'.\n",
      "     * @return this element\n",
      "     */\n",
      "    public FontCharacteristics setFontStyle(String fs) {\n",
      "        if (fs != null && fs.length() > 0) {\n",
      "            fs = fs.trim().toLowerCase();\n",
      "            if (\"normal\".equals(fs)) {\n",
      "                isItalic = false;\n",
      "            } else if (\"italic\".equals(fs) || \"oblique\".equals(fs)) {\n",
      "                isItalic = true;\n",
      "            }\n",
      "        }\n",
      "        if (isItalic) modified();\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    public boolean isItalic() {\n",
      "        return isItalic;\n",
      "    }\n",
      "\n",
      "    public boolean isBold() {\n",
      "        return isBold || fontWeight > 500;\n",
      "    }\n",
      "\n",
      "    public boolean isMonospace() {\n",
      "        return isMonospace;\n",
      "    }\n",
      "\n",
      "    public short getFontWeight() {\n",
      "        return fontWeight;\n",
      "    }\n",
      "\n",
      "    public boolean isUndefined() {\n",
      "        return undefined;\n",
      "    }\n",
      "\n",
      "    private void modified() {\n",
      "        undefined = false;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public boolean equals(Object o) {\n",
      "        if (this == o) return true;\n",
      "        if (o == null || getClass() != o.getClass()) return false;\n",
      "\n",
      "        FontCharacteristics that = (FontCharacteristics) o;\n",
      "\n",
      "        return isItalic == that.isItalic\n",
      "                && isBold == that.isBold\n",
      "                && fontWeight == that.fontWeight;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public int hashCode() {\n",
      "        int result = (isItalic ? 1 : 0);\n",
      "        result = 31 * result + (isBold ? 1 : 0);\n",
      "        result = 31 * result + (int) fontWeight;\n",
      "        return result;\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.layout.font;\n",
      "\n",
      "import com.itextpdf.test.ExtendedITextTest;\n",
      "import com.itextpdf.test.annotations.type.UnitTest;\n",
      "\n",
      "import org.junit.Assert;\n",
      "import org.junit.Test;\n",
      "import org.junit.experimental.categories.Category;\n",
      "\n",
      "@Category(UnitTest.class)\n",
      "public class FontCharacteristicsTest extends ExtendedITextTest {\n",
      "    @Test\n",
      "    public void testDefaultFontCharacteristics() {\n",
      "        FontCharacteristics fontCharacteristics = new FontCharacteristics();\n",
      "        Assert.assertFalse(fontCharacteristics.isItalic());\n",
      "        Assert.assertFalse(fontCharacteristics.isBold());\n",
      "        Assert.assertFalse(fontCharacteristics.isMonospace());\n",
      "        Assert.assertTrue(fontCharacteristics.isUndefined());\n",
      "        Assert.assertEquals(400, fontCharacteristics.getFontWeight());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testPositiveFontWeight() {\n",
      "        FontCharacteristics fontCharacteristics = new FontCharacteristics();\n",
      "\n",
      "        fontCharacteristics.setFontWeight((short) 50);\n",
      "        Assert.assertEquals(100, fontCharacteristics.getFontWeight());\n",
      "        Assert.assertFalse(fontCharacteristics.isUndefined());\n",
      "\n",
      "        fontCharacteristics.setFontWeight((short) 120);\n",
      "        Assert.assertEquals(100, fontCharacteristics.getFontWeight());\n",
      "        Assert.assertFalse(fontCharacteristics.isUndefined());\n",
      "\n",
      "        fontCharacteristics.setFontWeight((short) 340);\n",
      "        Assert.assertEquals(300, fontCharacteristics.getFontWeight());\n",
      "        Assert.assertFalse(fontCharacteristics.isUndefined());\n",
      "\n",
      "        fontCharacteristics.setFontWeight((short) 550);\n",
      "        Assert.assertEquals(500, fontCharacteristics.getFontWeight());\n",
      "        Assert.assertFalse(fontCharacteristics.isUndefined());\n",
      "\n",
      "        fontCharacteristics.setFontWeight((short) 885);\n",
      "        Assert.assertEquals(800, fontCharacteristics.getFontWeight());\n",
      "        Assert.assertFalse(fontCharacteristics.isUndefined());\n",
      "\n",
      "        fontCharacteristics.setFontWeight((short) 20000);\n",
      "        Assert.assertEquals(900, fontCharacteristics.getFontWeight());\n",
      "        Assert.assertFalse(fontCharacteristics.isUndefined());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testIncorrectFontWeight() {\n",
      "        FontCharacteristics fontCharacteristics = new FontCharacteristics();\n",
      "\n",
      "        fontCharacteristics.setFontWeight((short) 0);\n",
      "        Assert.assertEquals(400, fontCharacteristics.getFontWeight());\n",
      "        Assert.assertTrue(fontCharacteristics.isUndefined());\n",
      "\n",
      "        fontCharacteristics.setFontWeight((short) -500);\n",
      "        Assert.assertEquals(400, fontCharacteristics.getFontWeight());\n",
      "        Assert.assertTrue(fontCharacteristics.isUndefined());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testBoldFlag() {\n",
      "        FontCharacteristics fontCharacteristics = new FontCharacteristics();\n",
      "\n",
      "        Assert.assertFalse(fontCharacteristics.isBold());\n",
      "        Assert.assertTrue(fontCharacteristics.isUndefined());\n",
      "\n",
      "        fontCharacteristics.setBoldFlag(true);\n",
      "        Assert.assertTrue(fontCharacteristics.isBold());\n",
      "        Assert.assertFalse(fontCharacteristics.isUndefined());\n",
      "\n",
      "        fontCharacteristics = new FontCharacteristics();\n",
      "\n",
      "        fontCharacteristics.setBoldFlag(false);\n",
      "        Assert.assertFalse(fontCharacteristics.isBold());\n",
      "        Assert.assertTrue(fontCharacteristics.isUndefined());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testItalicFlag() {\n",
      "        FontCharacteristics fontCharacteristics = new FontCharacteristics();\n",
      "\n",
      "        Assert.assertFalse(fontCharacteristics.isItalic());\n",
      "        Assert.assertTrue(fontCharacteristics.isUndefined());\n",
      "\n",
      "        fontCharacteristics.setItalicFlag(true);\n",
      "        Assert.assertTrue(fontCharacteristics.isItalic());\n",
      "        Assert.assertFalse(fontCharacteristics.isUndefined());\n",
      "\n",
      "        fontCharacteristics = new FontCharacteristics();\n",
      "\n",
      "        fontCharacteristics.setItalicFlag(false);\n",
      "        Assert.assertFalse(fontCharacteristics.isItalic());\n",
      "        Assert.assertTrue(fontCharacteristics.isUndefined());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testMonospaceFlag() {\n",
      "        FontCharacteristics fontCharacteristics = new FontCharacteristics();\n",
      "\n",
      "        Assert.assertFalse(fontCharacteristics.isMonospace());\n",
      "        Assert.assertTrue(fontCharacteristics.isUndefined());\n",
      "\n",
      "        fontCharacteristics.setMonospaceFlag(true);\n",
      "        Assert.assertTrue(fontCharacteristics.isMonospace());\n",
      "        Assert.assertFalse(fontCharacteristics.isUndefined());\n",
      "\n",
      "        fontCharacteristics = new FontCharacteristics();\n",
      "\n",
      "        fontCharacteristics.setMonospaceFlag(false);\n",
      "        Assert.assertFalse(fontCharacteristics.isMonospace());\n",
      "        Assert.assertTrue(fontCharacteristics.isUndefined());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testIncorrectFontStyle() {\n",
      "        FontCharacteristics fontCharacteristics = new FontCharacteristics();\n",
      "        fontCharacteristics.setFontStyle(null);\n",
      "        Assert.assertFalse(fontCharacteristics.isItalic());\n",
      "        Assert.assertTrue(fontCharacteristics.isUndefined());\n",
      "\n",
      "        fontCharacteristics.setFontStyle(\"dsodkodkopsdkod\");\n",
      "        Assert.assertFalse(fontCharacteristics.isItalic());\n",
      "        Assert.assertTrue(fontCharacteristics.isUndefined());\n",
      "\n",
      "        fontCharacteristics.setFontStyle(\"\");\n",
      "        Assert.assertFalse(fontCharacteristics.isItalic());\n",
      "        Assert.assertTrue(fontCharacteristics.isUndefined());\n",
      "\n",
      "        fontCharacteristics.setFontStyle(\"-1\");\n",
      "        Assert.assertFalse(fontCharacteristics.isItalic());\n",
      "        Assert.assertTrue(fontCharacteristics.isUndefined());\n",
      "\n",
      "        fontCharacteristics.setFontStyle(\"bold\");\n",
      "        Assert.assertFalse(fontCharacteristics.isItalic());\n",
      "        Assert.assertTrue(fontCharacteristics.isUndefined());\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    public void testAllowedFontStyle() {\n",
      "        FontCharacteristics fontCharacteristics = new FontCharacteristics();\n",
      "        Assert.assertFalse(fontCharacteristics.isItalic());\n",
      "        Assert.assertTrue(fontCharacteristics.isUndefined());\n",
      "\n",
      "        fontCharacteristics = new FontCharacteristics();\n",
      "        fontCharacteristics.setFontStyle(\"normal\");\n",
      "        Assert.assertFalse(fontCharacteristics.isItalic());\n",
      "        Assert.assertTrue(fontCharacteristics.isUndefined());\n",
      "\n",
      "        fontCharacteristics = new FontCharacteristics();\n",
      "        fontCharacteristics.setFontStyle(\"oblique\");\n",
      "        Assert.assertTrue(fontCharacteristics.isItalic());\n",
      "        Assert.assertFalse(fontCharacteristics.isUndefined());\n",
      "\n",
      "        fontCharacteristics = new FontCharacteristics();\n",
      "        fontCharacteristics.setFontStyle(\"italic\");\n",
      "        Assert.assertTrue(fontCharacteristics.isItalic());\n",
      "        Assert.assertFalse(fontCharacteristics.isUndefined());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testEquals() {\n",
      "        FontCharacteristics fontCharacteristics = new FontCharacteristics();\n",
      "        fontCharacteristics.setFontStyle(\"italic\");\n",
      "        fontCharacteristics.setFontWeight((short) 300);\n",
      "\n",
      "        FontCharacteristics sameFontCharacteristics = new FontCharacteristics();\n",
      "        sameFontCharacteristics.setFontStyle(\"italic\");\n",
      "        sameFontCharacteristics.setFontWeight((short) 300);\n",
      "        Assert.assertTrue(fontCharacteristics.equals(sameFontCharacteristics));\n",
      "\n",
      "        FontCharacteristics copyFontCharacteristics = new FontCharacteristics(fontCharacteristics);\n",
      "        Assert.assertTrue(fontCharacteristics.equals(copyFontCharacteristics));\n",
      "\n",
      "        FontCharacteristics diffFontCharacteristics = new FontCharacteristics();\n",
      "        fontCharacteristics.setBoldFlag(true);\n",
      "        fontCharacteristics.setFontWeight((short) 800);\n",
      "        Assert.assertFalse(fontCharacteristics.equals(diffFontCharacteristics));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testHashCode() {\n",
      "        FontCharacteristics fontCharacteristics = new FontCharacteristics();\n",
      "        fontCharacteristics.setFontStyle(\"italic\");\n",
      "        fontCharacteristics.setFontWeight((short) 300);\n",
      "\n",
      "        FontCharacteristics sameFontCharacteristics = new FontCharacteristics();\n",
      "        sameFontCharacteristics.setFontStyle(\"italic\");\n",
      "        sameFontCharacteristics.setFontWeight((short) 300);\n",
      "        Assert.assertEquals(fontCharacteristics.hashCode(), sameFontCharacteristics.hashCode());\n",
      "\n",
      "        FontCharacteristics copyFontCharacteristics = new FontCharacteristics(fontCharacteristics);\n",
      "        Assert.assertEquals(fontCharacteristics.hashCode(), copyFontCharacteristics.hashCode());\n",
      "\n",
      "        FontCharacteristics diffFontCharacteristics = new FontCharacteristics();\n",
      "        fontCharacteristics.setBoldFlag(true);\n",
      "        fontCharacteristics.setFontWeight((short) 800);\n",
      "        Assert.assertNotEquals(fontCharacteristics.hashCode(), diffFontCharacteristics.hashCode());\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "FontCharacteristics::::setFontWeight(short)": [
        51,
        57
      ],
      "FontCharacteristics::::setFontWeight(java.lang.String)": [
        59,
        61
      ],
      "FontCharacteristics::::setBoldFlag(boolean)": [
        63,
        67
      ],
      "FontCharacteristics::::setItalicFlag(boolean)": [
        69,
        73
      ],
      "FontCharacteristics::::setMonospaceFlag(boolean)": [
        75,
        79
      ],
      "FontCharacteristics::::setFontStyle(java.lang.String)": [
        86,
        97
      ],
      "FontCharacteristics::::isItalic()": [
        99,
        101
      ],
      "FontCharacteristics::::isBold()": [
        103,
        105
      ],
      "FontCharacteristics::::isMonospace()": [
        107,
        109
      ],
      "FontCharacteristics::::getFontWeight()": [
        111,
        113
      ],
      "FontCharacteristics::::isUndefined()": [
        115,
        117
      ],
      "FontCharacteristics::::modified()": [
        119,
        121
      ],
      "FontCharacteristics::::equals(java.lang.Object)": [
        123,
        133
      ],
      "FontCharacteristics::::hashCode()": [
        135,
        141
      ]
    },
    "test_method_lines_dic": {
      "FontCharacteristicsTest::::testDefaultFontCharacteristics()": [
        34,
        42
      ],
      "FontCharacteristicsTest::::testPositiveFontWeight()": [
        44,
        71
      ],
      "FontCharacteristicsTest::::testIncorrectFontWeight()": [
        73,
        84
      ],
      "FontCharacteristicsTest::::testBoldFlag()": [
        86,
        102
      ],
      "FontCharacteristicsTest::::testItalicFlag()": [
        104,
        120
      ],
      "FontCharacteristicsTest::::testMonospaceFlag()": [
        122,
        138
      ],
      "FontCharacteristicsTest::::testIncorrectFontStyle()": [
        140,
        162
      ],
      "FontCharacteristicsTest::::testAllowedFontStyle()": [
        165,
        185
      ],
      "FontCharacteristicsTest::::testEquals()": [
        187,
        205
      ],
      "FontCharacteristicsTest::::testHashCode()": [
        207,
        225
      ]
    },
    "reverse_method_lines_dic": {
      "51": "FontCharacteristics::::setFontWeight(short)",
      "52": "FontCharacteristics::::setFontWeight(short)",
      "53": "FontCharacteristics::::setFontWeight(short)",
      "54": "FontCharacteristics::::setFontWeight(short)",
      "55": "FontCharacteristics::::setFontWeight(short)",
      "56": "FontCharacteristics::::setFontWeight(short)",
      "57": "FontCharacteristics::::setFontWeight(short)",
      "59": "FontCharacteristics::::setFontWeight(java.lang.String)",
      "60": "FontCharacteristics::::setFontWeight(java.lang.String)",
      "61": "FontCharacteristics::::setFontWeight(java.lang.String)",
      "63": "FontCharacteristics::::setBoldFlag(boolean)",
      "64": "FontCharacteristics::::setBoldFlag(boolean)",
      "65": "FontCharacteristics::::setBoldFlag(boolean)",
      "66": "FontCharacteristics::::setBoldFlag(boolean)",
      "67": "FontCharacteristics::::setBoldFlag(boolean)",
      "69": "FontCharacteristics::::setItalicFlag(boolean)",
      "70": "FontCharacteristics::::setItalicFlag(boolean)",
      "71": "FontCharacteristics::::setItalicFlag(boolean)",
      "72": "FontCharacteristics::::setItalicFlag(boolean)",
      "73": "FontCharacteristics::::setItalicFlag(boolean)",
      "75": "FontCharacteristics::::setMonospaceFlag(boolean)",
      "76": "FontCharacteristics::::setMonospaceFlag(boolean)",
      "77": "FontCharacteristics::::setMonospaceFlag(boolean)",
      "78": "FontCharacteristics::::setMonospaceFlag(boolean)",
      "79": "FontCharacteristics::::setMonospaceFlag(boolean)",
      "86": "FontCharacteristics::::setFontStyle(java.lang.String)",
      "87": "FontCharacteristics::::setFontStyle(java.lang.String)",
      "88": "FontCharacteristics::::setFontStyle(java.lang.String)",
      "89": "FontCharacteristics::::setFontStyle(java.lang.String)",
      "90": "FontCharacteristics::::setFontStyle(java.lang.String)",
      "91": "FontCharacteristics::::setFontStyle(java.lang.String)",
      "92": "FontCharacteristics::::setFontStyle(java.lang.String)",
      "93": "FontCharacteristics::::setFontStyle(java.lang.String)",
      "94": "FontCharacteristics::::setFontStyle(java.lang.String)",
      "95": "FontCharacteristics::::setFontStyle(java.lang.String)",
      "96": "FontCharacteristics::::setFontStyle(java.lang.String)",
      "97": "FontCharacteristics::::setFontStyle(java.lang.String)",
      "99": "FontCharacteristics::::isItalic()",
      "100": "FontCharacteristics::::isItalic()",
      "101": "FontCharacteristics::::isItalic()",
      "103": "FontCharacteristics::::isBold()",
      "104": "FontCharacteristics::::isBold()",
      "105": "FontCharacteristics::::isBold()",
      "107": "FontCharacteristics::::isMonospace()",
      "108": "FontCharacteristics::::isMonospace()",
      "109": "FontCharacteristics::::isMonospace()",
      "111": "FontCharacteristics::::getFontWeight()",
      "112": "FontCharacteristics::::getFontWeight()",
      "113": "FontCharacteristics::::getFontWeight()",
      "115": "FontCharacteristics::::isUndefined()",
      "116": "FontCharacteristics::::isUndefined()",
      "117": "FontCharacteristics::::isUndefined()",
      "119": "FontCharacteristics::::modified()",
      "120": "FontCharacteristics::::modified()",
      "121": "FontCharacteristics::::modified()",
      "123": "FontCharacteristics::::equals(java.lang.Object)",
      "124": "FontCharacteristics::::equals(java.lang.Object)",
      "125": "FontCharacteristics::::equals(java.lang.Object)",
      "126": "FontCharacteristics::::equals(java.lang.Object)",
      "127": "FontCharacteristics::::equals(java.lang.Object)",
      "128": "FontCharacteristics::::equals(java.lang.Object)",
      "129": "FontCharacteristics::::equals(java.lang.Object)",
      "130": "FontCharacteristics::::equals(java.lang.Object)",
      "131": "FontCharacteristics::::equals(java.lang.Object)",
      "132": "FontCharacteristics::::equals(java.lang.Object)",
      "133": "FontCharacteristics::::equals(java.lang.Object)",
      "135": "FontCharacteristics::::hashCode()",
      "136": "FontCharacteristics::::hashCode()",
      "137": "FontCharacteristics::::hashCode()",
      "138": "FontCharacteristics::::hashCode()",
      "139": "FontCharacteristics::::hashCode()",
      "140": "FontCharacteristics::::hashCode()",
      "141": "FontCharacteristics::::hashCode()"
    },
    "test_reverse_method_lines_dic": {
      "34": "FontCharacteristicsTest::::testDefaultFontCharacteristics()",
      "35": "FontCharacteristicsTest::::testDefaultFontCharacteristics()",
      "36": "FontCharacteristicsTest::::testDefaultFontCharacteristics()",
      "37": "FontCharacteristicsTest::::testDefaultFontCharacteristics()",
      "38": "FontCharacteristicsTest::::testDefaultFontCharacteristics()",
      "39": "FontCharacteristicsTest::::testDefaultFontCharacteristics()",
      "40": "FontCharacteristicsTest::::testDefaultFontCharacteristics()",
      "41": "FontCharacteristicsTest::::testDefaultFontCharacteristics()",
      "42": "FontCharacteristicsTest::::testDefaultFontCharacteristics()",
      "44": "FontCharacteristicsTest::::testPositiveFontWeight()",
      "45": "FontCharacteristicsTest::::testPositiveFontWeight()",
      "46": "FontCharacteristicsTest::::testPositiveFontWeight()",
      "47": "FontCharacteristicsTest::::testPositiveFontWeight()",
      "48": "FontCharacteristicsTest::::testPositiveFontWeight()",
      "49": "FontCharacteristicsTest::::testPositiveFontWeight()",
      "50": "FontCharacteristicsTest::::testPositiveFontWeight()",
      "51": "FontCharacteristicsTest::::testPositiveFontWeight()",
      "52": "FontCharacteristicsTest::::testPositiveFontWeight()",
      "53": "FontCharacteristicsTest::::testPositiveFontWeight()",
      "54": "FontCharacteristicsTest::::testPositiveFontWeight()",
      "55": "FontCharacteristicsTest::::testPositiveFontWeight()",
      "56": "FontCharacteristicsTest::::testPositiveFontWeight()",
      "57": "FontCharacteristicsTest::::testPositiveFontWeight()",
      "58": "FontCharacteristicsTest::::testPositiveFontWeight()",
      "59": "FontCharacteristicsTest::::testPositiveFontWeight()",
      "60": "FontCharacteristicsTest::::testPositiveFontWeight()",
      "61": "FontCharacteristicsTest::::testPositiveFontWeight()",
      "62": "FontCharacteristicsTest::::testPositiveFontWeight()",
      "63": "FontCharacteristicsTest::::testPositiveFontWeight()",
      "64": "FontCharacteristicsTest::::testPositiveFontWeight()",
      "65": "FontCharacteristicsTest::::testPositiveFontWeight()",
      "66": "FontCharacteristicsTest::::testPositiveFontWeight()",
      "67": "FontCharacteristicsTest::::testPositiveFontWeight()",
      "68": "FontCharacteristicsTest::::testPositiveFontWeight()",
      "69": "FontCharacteristicsTest::::testPositiveFontWeight()",
      "70": "FontCharacteristicsTest::::testPositiveFontWeight()",
      "71": "FontCharacteristicsTest::::testPositiveFontWeight()",
      "73": "FontCharacteristicsTest::::testIncorrectFontWeight()",
      "74": "FontCharacteristicsTest::::testIncorrectFontWeight()",
      "75": "FontCharacteristicsTest::::testIncorrectFontWeight()",
      "76": "FontCharacteristicsTest::::testIncorrectFontWeight()",
      "77": "FontCharacteristicsTest::::testIncorrectFontWeight()",
      "78": "FontCharacteristicsTest::::testIncorrectFontWeight()",
      "79": "FontCharacteristicsTest::::testIncorrectFontWeight()",
      "80": "FontCharacteristicsTest::::testIncorrectFontWeight()",
      "81": "FontCharacteristicsTest::::testIncorrectFontWeight()",
      "82": "FontCharacteristicsTest::::testIncorrectFontWeight()",
      "83": "FontCharacteristicsTest::::testIncorrectFontWeight()",
      "84": "FontCharacteristicsTest::::testIncorrectFontWeight()",
      "86": "FontCharacteristicsTest::::testBoldFlag()",
      "87": "FontCharacteristicsTest::::testBoldFlag()",
      "88": "FontCharacteristicsTest::::testBoldFlag()",
      "89": "FontCharacteristicsTest::::testBoldFlag()",
      "90": "FontCharacteristicsTest::::testBoldFlag()",
      "91": "FontCharacteristicsTest::::testBoldFlag()",
      "92": "FontCharacteristicsTest::::testBoldFlag()",
      "93": "FontCharacteristicsTest::::testBoldFlag()",
      "94": "FontCharacteristicsTest::::testBoldFlag()",
      "95": "FontCharacteristicsTest::::testBoldFlag()",
      "96": "FontCharacteristicsTest::::testBoldFlag()",
      "97": "FontCharacteristicsTest::::testBoldFlag()",
      "98": "FontCharacteristicsTest::::testBoldFlag()",
      "99": "FontCharacteristicsTest::::testBoldFlag()",
      "100": "FontCharacteristicsTest::::testBoldFlag()",
      "101": "FontCharacteristicsTest::::testBoldFlag()",
      "102": "FontCharacteristicsTest::::testBoldFlag()",
      "104": "FontCharacteristicsTest::::testItalicFlag()",
      "105": "FontCharacteristicsTest::::testItalicFlag()",
      "106": "FontCharacteristicsTest::::testItalicFlag()",
      "107": "FontCharacteristicsTest::::testItalicFlag()",
      "108": "FontCharacteristicsTest::::testItalicFlag()",
      "109": "FontCharacteristicsTest::::testItalicFlag()",
      "110": "FontCharacteristicsTest::::testItalicFlag()",
      "111": "FontCharacteristicsTest::::testItalicFlag()",
      "112": "FontCharacteristicsTest::::testItalicFlag()",
      "113": "FontCharacteristicsTest::::testItalicFlag()",
      "114": "FontCharacteristicsTest::::testItalicFlag()",
      "115": "FontCharacteristicsTest::::testItalicFlag()",
      "116": "FontCharacteristicsTest::::testItalicFlag()",
      "117": "FontCharacteristicsTest::::testItalicFlag()",
      "118": "FontCharacteristicsTest::::testItalicFlag()",
      "119": "FontCharacteristicsTest::::testItalicFlag()",
      "120": "FontCharacteristicsTest::::testItalicFlag()",
      "122": "FontCharacteristicsTest::::testMonospaceFlag()",
      "123": "FontCharacteristicsTest::::testMonospaceFlag()",
      "124": "FontCharacteristicsTest::::testMonospaceFlag()",
      "125": "FontCharacteristicsTest::::testMonospaceFlag()",
      "126": "FontCharacteristicsTest::::testMonospaceFlag()",
      "127": "FontCharacteristicsTest::::testMonospaceFlag()",
      "128": "FontCharacteristicsTest::::testMonospaceFlag()",
      "129": "FontCharacteristicsTest::::testMonospaceFlag()",
      "130": "FontCharacteristicsTest::::testMonospaceFlag()",
      "131": "FontCharacteristicsTest::::testMonospaceFlag()",
      "132": "FontCharacteristicsTest::::testMonospaceFlag()",
      "133": "FontCharacteristicsTest::::testMonospaceFlag()",
      "134": "FontCharacteristicsTest::::testMonospaceFlag()",
      "135": "FontCharacteristicsTest::::testMonospaceFlag()",
      "136": "FontCharacteristicsTest::::testMonospaceFlag()",
      "137": "FontCharacteristicsTest::::testMonospaceFlag()",
      "138": "FontCharacteristicsTest::::testMonospaceFlag()",
      "140": "FontCharacteristicsTest::::testIncorrectFontStyle()",
      "141": "FontCharacteristicsTest::::testIncorrectFontStyle()",
      "142": "FontCharacteristicsTest::::testIncorrectFontStyle()",
      "143": "FontCharacteristicsTest::::testIncorrectFontStyle()",
      "144": "FontCharacteristicsTest::::testIncorrectFontStyle()",
      "145": "FontCharacteristicsTest::::testIncorrectFontStyle()",
      "146": "FontCharacteristicsTest::::testIncorrectFontStyle()",
      "147": "FontCharacteristicsTest::::testIncorrectFontStyle()",
      "148": "FontCharacteristicsTest::::testIncorrectFontStyle()",
      "149": "FontCharacteristicsTest::::testIncorrectFontStyle()",
      "150": "FontCharacteristicsTest::::testIncorrectFontStyle()",
      "151": "FontCharacteristicsTest::::testIncorrectFontStyle()",
      "152": "FontCharacteristicsTest::::testIncorrectFontStyle()",
      "153": "FontCharacteristicsTest::::testIncorrectFontStyle()",
      "154": "FontCharacteristicsTest::::testIncorrectFontStyle()",
      "155": "FontCharacteristicsTest::::testIncorrectFontStyle()",
      "156": "FontCharacteristicsTest::::testIncorrectFontStyle()",
      "157": "FontCharacteristicsTest::::testIncorrectFontStyle()",
      "158": "FontCharacteristicsTest::::testIncorrectFontStyle()",
      "159": "FontCharacteristicsTest::::testIncorrectFontStyle()",
      "160": "FontCharacteristicsTest::::testIncorrectFontStyle()",
      "161": "FontCharacteristicsTest::::testIncorrectFontStyle()",
      "162": "FontCharacteristicsTest::::testIncorrectFontStyle()",
      "165": "FontCharacteristicsTest::::testAllowedFontStyle()",
      "166": "FontCharacteristicsTest::::testAllowedFontStyle()",
      "167": "FontCharacteristicsTest::::testAllowedFontStyle()",
      "168": "FontCharacteristicsTest::::testAllowedFontStyle()",
      "169": "FontCharacteristicsTest::::testAllowedFontStyle()",
      "170": "FontCharacteristicsTest::::testAllowedFontStyle()",
      "171": "FontCharacteristicsTest::::testAllowedFontStyle()",
      "172": "FontCharacteristicsTest::::testAllowedFontStyle()",
      "173": "FontCharacteristicsTest::::testAllowedFontStyle()",
      "174": "FontCharacteristicsTest::::testAllowedFontStyle()",
      "175": "FontCharacteristicsTest::::testAllowedFontStyle()",
      "176": "FontCharacteristicsTest::::testAllowedFontStyle()",
      "177": "FontCharacteristicsTest::::testAllowedFontStyle()",
      "178": "FontCharacteristicsTest::::testAllowedFontStyle()",
      "179": "FontCharacteristicsTest::::testAllowedFontStyle()",
      "180": "FontCharacteristicsTest::::testAllowedFontStyle()",
      "181": "FontCharacteristicsTest::::testAllowedFontStyle()",
      "182": "FontCharacteristicsTest::::testAllowedFontStyle()",
      "183": "FontCharacteristicsTest::::testAllowedFontStyle()",
      "184": "FontCharacteristicsTest::::testAllowedFontStyle()",
      "185": "FontCharacteristicsTest::::testAllowedFontStyle()",
      "187": "FontCharacteristicsTest::::testEquals()",
      "188": "FontCharacteristicsTest::::testEquals()",
      "189": "FontCharacteristicsTest::::testEquals()",
      "190": "FontCharacteristicsTest::::testEquals()",
      "191": "FontCharacteristicsTest::::testEquals()",
      "192": "FontCharacteristicsTest::::testEquals()",
      "193": "FontCharacteristicsTest::::testEquals()",
      "194": "FontCharacteristicsTest::::testEquals()",
      "195": "FontCharacteristicsTest::::testEquals()",
      "196": "FontCharacteristicsTest::::testEquals()",
      "197": "FontCharacteristicsTest::::testEquals()",
      "198": "FontCharacteristicsTest::::testEquals()",
      "199": "FontCharacteristicsTest::::testEquals()",
      "200": "FontCharacteristicsTest::::testEquals()",
      "201": "FontCharacteristicsTest::::testEquals()",
      "202": "FontCharacteristicsTest::::testEquals()",
      "203": "FontCharacteristicsTest::::testEquals()",
      "204": "FontCharacteristicsTest::::testEquals()",
      "205": "FontCharacteristicsTest::::testEquals()",
      "207": "FontCharacteristicsTest::::testHashCode()",
      "208": "FontCharacteristicsTest::::testHashCode()",
      "209": "FontCharacteristicsTest::::testHashCode()",
      "210": "FontCharacteristicsTest::::testHashCode()",
      "211": "FontCharacteristicsTest::::testHashCode()",
      "212": "FontCharacteristicsTest::::testHashCode()",
      "213": "FontCharacteristicsTest::::testHashCode()",
      "214": "FontCharacteristicsTest::::testHashCode()",
      "215": "FontCharacteristicsTest::::testHashCode()",
      "216": "FontCharacteristicsTest::::testHashCode()",
      "217": "FontCharacteristicsTest::::testHashCode()",
      "218": "FontCharacteristicsTest::::testHashCode()",
      "219": "FontCharacteristicsTest::::testHashCode()",
      "220": "FontCharacteristicsTest::::testHashCode()",
      "221": "FontCharacteristicsTest::::testHashCode()",
      "222": "FontCharacteristicsTest::::testHashCode()",
      "223": "FontCharacteristicsTest::::testHashCode()",
      "224": "FontCharacteristicsTest::::testHashCode()",
      "225": "FontCharacteristicsTest::::testHashCode()"
    },
    "tests": [
      {
        "test_lines": [
          34,
          42
        ],
        "covered_lines": [
          27,
          28,
          29,
          30,
          31,
          33,
          34,
          100,
          104,
          108,
          112,
          116
        ]
      },
      {
        "test_lines": [
          44,
          71
        ],
        "covered_lines": [
          27,
          28,
          29,
          30,
          31,
          33,
          34,
          52,
          53,
          54,
          56,
          112,
          116,
          120,
          121
        ]
      },
      {
        "test_lines": [
          73,
          84
        ],
        "covered_lines": [
          27,
          28,
          29,
          30,
          31,
          33,
          34,
          52,
          56,
          112,
          116
        ]
      },
      {
        "test_lines": [
          86,
          102
        ],
        "covered_lines": [
          27,
          28,
          29,
          30,
          31,
          33,
          34,
          64,
          65,
          66,
          104,
          116,
          120,
          121
        ]
      },
      {
        "test_lines": [
          104,
          120
        ],
        "covered_lines": [
          27,
          28,
          29,
          30,
          31,
          33,
          34,
          70,
          71,
          72,
          100,
          116,
          120,
          121
        ]
      },
      {
        "test_lines": [
          122,
          138
        ],
        "covered_lines": [
          27,
          28,
          29,
          30,
          31,
          33,
          34,
          76,
          77,
          78,
          108,
          116,
          120,
          121
        ]
      },
      {
        "test_lines": [
          140,
          162
        ],
        "covered_lines": [
          27,
          28,
          29,
          30,
          31,
          33,
          34,
          87,
          88,
          89,
          91,
          95,
          96,
          100,
          116
        ]
      },
      {
        "test_lines": [
          165,
          185
        ],
        "covered_lines": [
          27,
          28,
          29,
          30,
          31,
          33,
          34,
          87,
          88,
          89,
          90,
          91,
          92,
          95,
          96,
          100,
          116,
          120,
          121
        ]
      },
      {
        "test_lines": [
          187,
          205
        ],
        "covered_lines": [
          27,
          28,
          29,
          30,
          31,
          33,
          34,
          37,
          38,
          39,
          40,
          41,
          42,
          52,
          53,
          54,
          56,
          64,
          65,
          66,
          87,
          88,
          89,
          91,
          92,
          95,
          96,
          120,
          121,
          125,
          126,
          128,
          130
        ]
      },
      {
        "test_lines": [
          207,
          225
        ],
        "covered_lines": [
          27,
          28,
          29,
          30,
          31,
          33,
          34,
          37,
          38,
          39,
          40,
          41,
          42,
          52,
          53,
          54,
          56,
          64,
          65,
          66,
          87,
          88,
          89,
          91,
          92,
          95,
          96,
          120,
          121,
          137,
          138,
          139,
          140
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/itext-java/layout/src/main/java/com/itextpdf/layout/font/FontCharacteristicsUtils.java": {
    "class_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.layout.font;\n",
      "\n",
      "import com.itextpdf.io.font.constants.FontWeights;\n",
      "\n",
      "final class FontCharacteristicsUtils {\n",
      "\n",
      "    static short normalizeFontWeight(short fw) {\n",
      "        fw = (short) ((fw/100)*100);\n",
      "        if (fw < FontWeights.THIN) return FontWeights.THIN;\n",
      "        if (fw > FontWeights.BLACK) return FontWeights.BLACK;\n",
      "        return fw;\n",
      "    }\n",
      "\n",
      "    static short parseFontWeight(String fw) {\n",
      "        if (fw == null || fw.length() == 0) {\n",
      "            return -1;\n",
      "        }\n",
      "        fw = fw.trim().toLowerCase();\n",
      "        switch (fw) {\n",
      "            case \"bold\":\n",
      "                return FontWeights.BOLD;\n",
      "            case \"normal\":\n",
      "                return FontWeights.NORMAL;\n",
      "            default:\n",
      "                try {\n",
      "                    return normalizeFontWeight((short) Integer.parseInt(fw));\n",
      "                } catch (NumberFormatException ignored) {\n",
      "                    return -1;\n",
      "                }\n",
      "        }\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.layout.font;\n",
      "\n",
      "import com.itextpdf.test.ExtendedITextTest;\n",
      "import com.itextpdf.test.annotations.type.UnitTest;\n",
      "\n",
      "import org.junit.Assert;\n",
      "import org.junit.Test;\n",
      "import org.junit.experimental.categories.Category;\n",
      "\n",
      "@Category(UnitTest.class)\n",
      "public class FontCharacteristicsUtilsTest extends ExtendedITextTest {\n",
      "    @Test\n",
      "    public void testNormalizingThinFontWeight() {\n",
      "        Assert.assertEquals(100, FontCharacteristicsUtils.normalizeFontWeight((short) -10000));\n",
      "\n",
      "        Assert.assertEquals(100, FontCharacteristicsUtils.normalizeFontWeight((short) 0));\n",
      "\n",
      "        Assert.assertEquals(100, FontCharacteristicsUtils.normalizeFontWeight((short) 50));\n",
      "\n",
      "        Assert.assertEquals(100, FontCharacteristicsUtils.normalizeFontWeight((short) 100));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testNormalizingHeavyFontWeight() {\n",
      "        Assert.assertEquals(900, FontCharacteristicsUtils.normalizeFontWeight((short) 900));\n",
      "\n",
      "        Assert.assertEquals(900, FontCharacteristicsUtils.normalizeFontWeight((short) 1600));\n",
      "\n",
      "        Assert.assertEquals(900, FontCharacteristicsUtils.normalizeFontWeight((short) 23000));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testNormalizingNormalFontWeight() {\n",
      "        Assert.assertEquals(200, FontCharacteristicsUtils.normalizeFontWeight((short) 220));\n",
      "\n",
      "        Assert.assertEquals(400, FontCharacteristicsUtils.normalizeFontWeight((short) 456));\n",
      "\n",
      "        Assert.assertEquals(500, FontCharacteristicsUtils.normalizeFontWeight((short) 550));\n",
      "\n",
      "        Assert.assertEquals(600, FontCharacteristicsUtils.normalizeFontWeight((short) 620));\n",
      "\n",
      "        Assert.assertEquals(700, FontCharacteristicsUtils.normalizeFontWeight((short) 780));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testParsingIncorrectFontWeight() {\n",
      "        Assert.assertEquals((short) -1, FontCharacteristicsUtils.parseFontWeight(\"\"));\n",
      "\n",
      "        Assert.assertEquals((short) -1, FontCharacteristicsUtils.parseFontWeight(null));\n",
      "\n",
      "        Assert.assertEquals((short) -1, FontCharacteristicsUtils.parseFontWeight(\"dfgdgdfgdfgdf\"));\n",
      "\n",
      "        Assert.assertEquals((short) -1, FontCharacteristicsUtils.parseFontWeight(\"italic\"));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testParsingNumberFontWeight() {\n",
      "        Assert.assertEquals((short) 100, FontCharacteristicsUtils.parseFontWeight(\"-1\"));\n",
      "\n",
      "        Assert.assertEquals((short) 100, FontCharacteristicsUtils.parseFontWeight(\"50\"));\n",
      "\n",
      "        Assert.assertEquals((short) 300, FontCharacteristicsUtils.parseFontWeight(\"360\"));\n",
      "\n",
      "        Assert.assertEquals((short) 900, FontCharacteristicsUtils.parseFontWeight(\"25000\"));\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    public void testParseAllowedFontWeight() {\n",
      "        Assert.assertEquals((short) 400, FontCharacteristicsUtils.parseFontWeight(\"normal\"));\n",
      "\n",
      "        Assert.assertEquals((short) 700, FontCharacteristicsUtils.parseFontWeight(\"bold\"));\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "FontCharacteristicsUtils::::normalizeFontWeight(short)": [
        29,
        34
      ],
      "FontCharacteristicsUtils::::parseFontWeight(java.lang.String)": [
        36,
        53
      ]
    },
    "test_method_lines_dic": {
      "FontCharacteristicsUtilsTest::::testNormalizingThinFontWeight()": [
        34,
        43
      ],
      "FontCharacteristicsUtilsTest::::testNormalizingHeavyFontWeight()": [
        45,
        52
      ],
      "FontCharacteristicsUtilsTest::::testNormalizingNormalFontWeight()": [
        54,
        65
      ],
      "FontCharacteristicsUtilsTest::::testParsingIncorrectFontWeight()": [
        67,
        76
      ],
      "FontCharacteristicsUtilsTest::::testParsingNumberFontWeight()": [
        78,
        87
      ],
      "FontCharacteristicsUtilsTest::::testParseAllowedFontWeight()": [
        90,
        95
      ]
    },
    "reverse_method_lines_dic": {
      "29": "FontCharacteristicsUtils::::normalizeFontWeight(short)",
      "30": "FontCharacteristicsUtils::::normalizeFontWeight(short)",
      "31": "FontCharacteristicsUtils::::normalizeFontWeight(short)",
      "32": "FontCharacteristicsUtils::::normalizeFontWeight(short)",
      "33": "FontCharacteristicsUtils::::normalizeFontWeight(short)",
      "34": "FontCharacteristicsUtils::::normalizeFontWeight(short)",
      "36": "FontCharacteristicsUtils::::parseFontWeight(java.lang.String)",
      "37": "FontCharacteristicsUtils::::parseFontWeight(java.lang.String)",
      "38": "FontCharacteristicsUtils::::parseFontWeight(java.lang.String)",
      "39": "FontCharacteristicsUtils::::parseFontWeight(java.lang.String)",
      "40": "FontCharacteristicsUtils::::parseFontWeight(java.lang.String)",
      "41": "FontCharacteristicsUtils::::parseFontWeight(java.lang.String)",
      "42": "FontCharacteristicsUtils::::parseFontWeight(java.lang.String)",
      "43": "FontCharacteristicsUtils::::parseFontWeight(java.lang.String)",
      "44": "FontCharacteristicsUtils::::parseFontWeight(java.lang.String)",
      "45": "FontCharacteristicsUtils::::parseFontWeight(java.lang.String)",
      "46": "FontCharacteristicsUtils::::parseFontWeight(java.lang.String)",
      "47": "FontCharacteristicsUtils::::parseFontWeight(java.lang.String)",
      "48": "FontCharacteristicsUtils::::parseFontWeight(java.lang.String)",
      "49": "FontCharacteristicsUtils::::parseFontWeight(java.lang.String)",
      "50": "FontCharacteristicsUtils::::parseFontWeight(java.lang.String)",
      "51": "FontCharacteristicsUtils::::parseFontWeight(java.lang.String)",
      "52": "FontCharacteristicsUtils::::parseFontWeight(java.lang.String)",
      "53": "FontCharacteristicsUtils::::parseFontWeight(java.lang.String)"
    },
    "test_reverse_method_lines_dic": {
      "34": "FontCharacteristicsUtilsTest::::testNormalizingThinFontWeight()",
      "35": "FontCharacteristicsUtilsTest::::testNormalizingThinFontWeight()",
      "36": "FontCharacteristicsUtilsTest::::testNormalizingThinFontWeight()",
      "37": "FontCharacteristicsUtilsTest::::testNormalizingThinFontWeight()",
      "38": "FontCharacteristicsUtilsTest::::testNormalizingThinFontWeight()",
      "39": "FontCharacteristicsUtilsTest::::testNormalizingThinFontWeight()",
      "40": "FontCharacteristicsUtilsTest::::testNormalizingThinFontWeight()",
      "41": "FontCharacteristicsUtilsTest::::testNormalizingThinFontWeight()",
      "42": "FontCharacteristicsUtilsTest::::testNormalizingThinFontWeight()",
      "43": "FontCharacteristicsUtilsTest::::testNormalizingThinFontWeight()",
      "45": "FontCharacteristicsUtilsTest::::testNormalizingHeavyFontWeight()",
      "46": "FontCharacteristicsUtilsTest::::testNormalizingHeavyFontWeight()",
      "47": "FontCharacteristicsUtilsTest::::testNormalizingHeavyFontWeight()",
      "48": "FontCharacteristicsUtilsTest::::testNormalizingHeavyFontWeight()",
      "49": "FontCharacteristicsUtilsTest::::testNormalizingHeavyFontWeight()",
      "50": "FontCharacteristicsUtilsTest::::testNormalizingHeavyFontWeight()",
      "51": "FontCharacteristicsUtilsTest::::testNormalizingHeavyFontWeight()",
      "52": "FontCharacteristicsUtilsTest::::testNormalizingHeavyFontWeight()",
      "54": "FontCharacteristicsUtilsTest::::testNormalizingNormalFontWeight()",
      "55": "FontCharacteristicsUtilsTest::::testNormalizingNormalFontWeight()",
      "56": "FontCharacteristicsUtilsTest::::testNormalizingNormalFontWeight()",
      "57": "FontCharacteristicsUtilsTest::::testNormalizingNormalFontWeight()",
      "58": "FontCharacteristicsUtilsTest::::testNormalizingNormalFontWeight()",
      "59": "FontCharacteristicsUtilsTest::::testNormalizingNormalFontWeight()",
      "60": "FontCharacteristicsUtilsTest::::testNormalizingNormalFontWeight()",
      "61": "FontCharacteristicsUtilsTest::::testNormalizingNormalFontWeight()",
      "62": "FontCharacteristicsUtilsTest::::testNormalizingNormalFontWeight()",
      "63": "FontCharacteristicsUtilsTest::::testNormalizingNormalFontWeight()",
      "64": "FontCharacteristicsUtilsTest::::testNormalizingNormalFontWeight()",
      "65": "FontCharacteristicsUtilsTest::::testNormalizingNormalFontWeight()",
      "67": "FontCharacteristicsUtilsTest::::testParsingIncorrectFontWeight()",
      "68": "FontCharacteristicsUtilsTest::::testParsingIncorrectFontWeight()",
      "69": "FontCharacteristicsUtilsTest::::testParsingIncorrectFontWeight()",
      "70": "FontCharacteristicsUtilsTest::::testParsingIncorrectFontWeight()",
      "71": "FontCharacteristicsUtilsTest::::testParsingIncorrectFontWeight()",
      "72": "FontCharacteristicsUtilsTest::::testParsingIncorrectFontWeight()",
      "73": "FontCharacteristicsUtilsTest::::testParsingIncorrectFontWeight()",
      "74": "FontCharacteristicsUtilsTest::::testParsingIncorrectFontWeight()",
      "75": "FontCharacteristicsUtilsTest::::testParsingIncorrectFontWeight()",
      "76": "FontCharacteristicsUtilsTest::::testParsingIncorrectFontWeight()",
      "78": "FontCharacteristicsUtilsTest::::testParsingNumberFontWeight()",
      "79": "FontCharacteristicsUtilsTest::::testParsingNumberFontWeight()",
      "80": "FontCharacteristicsUtilsTest::::testParsingNumberFontWeight()",
      "81": "FontCharacteristicsUtilsTest::::testParsingNumberFontWeight()",
      "82": "FontCharacteristicsUtilsTest::::testParsingNumberFontWeight()",
      "83": "FontCharacteristicsUtilsTest::::testParsingNumberFontWeight()",
      "84": "FontCharacteristicsUtilsTest::::testParsingNumberFontWeight()",
      "85": "FontCharacteristicsUtilsTest::::testParsingNumberFontWeight()",
      "86": "FontCharacteristicsUtilsTest::::testParsingNumberFontWeight()",
      "87": "FontCharacteristicsUtilsTest::::testParsingNumberFontWeight()",
      "90": "FontCharacteristicsUtilsTest::::testParseAllowedFontWeight()",
      "91": "FontCharacteristicsUtilsTest::::testParseAllowedFontWeight()",
      "92": "FontCharacteristicsUtilsTest::::testParseAllowedFontWeight()",
      "93": "FontCharacteristicsUtilsTest::::testParseAllowedFontWeight()",
      "94": "FontCharacteristicsUtilsTest::::testParseAllowedFontWeight()",
      "95": "FontCharacteristicsUtilsTest::::testParseAllowedFontWeight()"
    },
    "tests": [
      {
        "test_lines": [
          34,
          43
        ],
        "covered_lines": [
          30,
          31,
          32,
          33
        ]
      },
      {
        "test_lines": [
          45,
          52
        ],
        "covered_lines": [
          30,
          31,
          32,
          33
        ]
      },
      {
        "test_lines": [
          54,
          65
        ],
        "covered_lines": [
          30,
          31,
          32,
          33
        ]
      },
      {
        "test_lines": [
          67,
          76
        ],
        "covered_lines": [
          37,
          38,
          40,
          41,
          49,
          50
        ]
      },
      {
        "test_lines": [
          78,
          87
        ],
        "covered_lines": [
          30,
          31,
          32,
          33,
          37,
          40,
          41,
          48
        ]
      },
      {
        "test_lines": [
          90,
          95
        ],
        "covered_lines": [
          37,
          40,
          41,
          43,
          45
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/itext-java/layout/src/main/java/com/itextpdf/layout/font/selectorstrategy/BestMatchFontSelectorStrategy.java": {
    "class_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.layout.font.selectorstrategy;\n",
      "\n",
      "import com.itextpdf.layout.font.FontProvider;\n",
      "import com.itextpdf.layout.font.FontSelector;\n",
      "import com.itextpdf.layout.font.FontSet;\n",
      "\n",
      "/**\n",
      " * The class implements strategy where the best font for each symbol is used if possible.\n",
      " */\n",
      "public class BestMatchFontSelectorStrategy extends AbstractFontSelectorStrategy {\n",
      "\n",
      "    /**\n",
      "     * Creates a new instance of {@link BestMatchFontSelectorStrategy}.\n",
      "     *\n",
      "     * @param fontProvider the font provider\n",
      "     * @param fontSelector the font selector\n",
      "     * @param additionalFonts the set of fonts to be used additionally to the fonts added to font provider.\n",
      "     */\n",
      "    public BestMatchFontSelectorStrategy(FontProvider fontProvider, FontSelector fontSelector,\n",
      "            FontSet additionalFonts) {\n",
      "        super(fontProvider, fontSelector, additionalFonts);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * {@inheritDoc}\n",
      "     */\n",
      "    @Override\n",
      "    protected boolean isCurrentFontCheckRequired() {\n",
      "        return true;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * The factory for {@link BestMatchFontSelectorStrategy}.\n",
      "     */\n",
      "    public static final class BestMatchFontSelectorStrategyFactory implements IFontSelectorStrategyFactory {\n",
      "        /**\n",
      "         * {@inheritDoc}\n",
      "         */\n",
      "        @Override\n",
      "        public IFontSelectorStrategy createFontSelectorStrategy(FontProvider fontProvider, FontSelector fontSelector,\n",
      "                FontSet additionalFonts) {\n",
      "            return new BestMatchFontSelectorStrategy(fontProvider, fontSelector, additionalFonts);\n",
      "        }\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.layout.font.selectorstrategy;\n",
      "\n",
      "import com.itextpdf.commons.datastructures.Tuple2;\n",
      "import com.itextpdf.io.font.otf.GlyphLine;\n",
      "import com.itextpdf.kernel.font.PdfFont;\n",
      "import com.itextpdf.layout.font.selectorstrategy.BestMatchFontSelectorStrategy.BestMatchFontSelectorStrategyFactory;\n",
      "import com.itextpdf.test.ExtendedITextTest;\n",
      "import com.itextpdf.test.annotations.type.UnitTest;\n",
      "\n",
      "import java.util.List;\n",
      "import org.junit.Assert;\n",
      "import org.junit.Test;\n",
      "import org.junit.experimental.categories.Category;\n",
      "\n",
      "@Category(UnitTest.class)\n",
      "public class BestMatchFontSelectorStrategyTest extends ExtendedITextTest {\n",
      "    @Test\n",
      "    public void twoDiacriticsInRowTest() {\n",
      "        IFontSelectorStrategy strategy = FontSelectorTestsUtil.createStrategyWithFreeSansAndTNR(new BestMatchFontSelectorStrategyFactory());\n",
      "\n",
      "        final List<Tuple2<GlyphLine, PdfFont>> result = strategy.getGlyphLines(\n",
      "                \"L with accent: \\u004f\\u0301\\u0302 abc\");\n",
      "        Assert.assertEquals(3, result.size());\n",
      "        Assert.assertEquals(\"L with accent: \", result.get(0).getFirst().toString());\n",
      "        Assert.assertEquals(\"\\u004f\\u0301\\u0302\", result.get(1).getFirst().toString());\n",
      "        Assert.assertEquals(\" abc\", result.get(2).getFirst().toString());\n",
      "        // Diacritics and symbol were separated, but the font is the same\n",
      "        Assert.assertEquals(result.get(0).getSecond(), result.get(2).getSecond());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void oneDiacriticTest() {\n",
      "        IFontSelectorStrategy strategy = FontSelectorTestsUtil.createStrategyWithFreeSansAndTNR(new BestMatchFontSelectorStrategyFactory());\n",
      "\n",
      "        final List<Tuple2<GlyphLine, PdfFont>> result = strategy.getGlyphLines(\n",
      "                \"L with accent: \\u004f\\u0302 abc\");\n",
      "        Assert.assertEquals(3, result.size());\n",
      "        Assert.assertEquals(\"L with accent: \", result.get(0).getFirst().toString());\n",
      "        Assert.assertEquals(\"\\u004f\\u0302\", result.get(1).getFirst().toString());\n",
      "        Assert.assertEquals(\" abc\", result.get(2).getFirst().toString());\n",
      "        Assert.assertNotEquals(result.get(0).getSecond(), result.get(1).getSecond());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void oneDiacriticWithUnsupportedFontTest() {\n",
      "        IFontSelectorStrategy strategy = FontSelectorTestsUtil.createStrategyWithTNR(new BestMatchFontSelectorStrategyFactory());\n",
      "\n",
      "        final List<Tuple2<GlyphLine, PdfFont>> result = strategy.getGlyphLines(\n",
      "                \"L with accent: \\u004f\\u0302 abc\");\n",
      "        Assert.assertEquals(3, result.size());\n",
      "        Assert.assertEquals(\"L with accent: \\u004f\", result.get(0).getFirst().toString());\n",
      "        Assert.assertEquals(\"\", result.get(1).getFirst().toString());\n",
      "        Assert.assertEquals(\" abc\", result.get(2).getFirst().toString());\n",
      "        Assert.assertEquals(result.get(0).getSecond(), result.get(2).getSecond());\n",
      "        Assert.assertEquals(result.get(0).getSecond(), result.get(1).getSecond());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void diacriticFontDoesnotContainPreviousSymbolTest() {\n",
      "        IFontSelectorStrategy strategy = FontSelectorTestsUtil.createStrategyWithNotoSans(new BestMatchFontSelectorStrategyFactory());\n",
      "\n",
      "        final List<Tuple2<GlyphLine, PdfFont>> result = strategy.getGlyphLines(\n",
      "                \"\u041c\u0438\\u0301\u0440\u044a (m\u00edr\u0259)\");\n",
      "        Assert.assertEquals(6, result.size());\n",
      "        Assert.assertEquals(\"\u041c\u0438\", result.get(0).getFirst().toString());\n",
      "        Assert.assertEquals(\"\\u0301\", result.get(1).getFirst().toString());\n",
      "        Assert.assertEquals(\"\u0440\u044a\", result.get(2).getFirst().toString());\n",
      "        Assert.assertEquals(\" (m\u00edr\", result.get(3).getFirst().toString());\n",
      "        Assert.assertEquals(\"\u0259\", result.get(4).getFirst().toString());\n",
      "        Assert.assertEquals(\")\", result.get(5).getFirst().toString());\n",
      "        Assert.assertEquals(result.get(0).getSecond(), result.get(2).getSecond());\n",
      "        Assert.assertEquals(result.get(2).getSecond(), result.get(3).getSecond());\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    public void oneDiacriticWithOneSupportedFontTest() {\n",
      "        IFontSelectorStrategy strategy = FontSelectorTestsUtil.createStrategyWithFreeSans(new BestMatchFontSelectorStrategyFactory());\n",
      "\n",
      "        final List<Tuple2<GlyphLine, PdfFont>> result = strategy.getGlyphLines(\n",
      "                \"L with accent: \\u004f\\u0302 abc\");\n",
      "        Assert.assertEquals(1, result.size());\n",
      "        Assert.assertEquals(\"L with accent: \\u004f\\u0302 abc\", result.get(0).getFirst().toString());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void surrogatePairsTest() {\n",
      "        IFontSelectorStrategy strategy = FontSelectorTestsUtil.createStrategyWithOldItalic(new BestMatchFontSelectorStrategyFactory());\n",
      "\n",
      "        // this text contains three successive surrogate pairs\n",
      "        final List<Tuple2<GlyphLine, PdfFont>> result = strategy.getGlyphLines(\n",
      "                \"text \\uD800\\uDF10\\uD800\\uDF00\\uD800\\uDF11 text\");\n",
      "        Assert.assertEquals(3, result.size());\n",
      "        Assert.assertEquals(\"text\", result.get(0).getFirst().toString());\n",
      "        Assert.assertEquals(\" \\uD800\\uDF10\\uD800\\uDF00\\uD800\\uDF11 \", result.get(1).getFirst().toString());\n",
      "        Assert.assertEquals(\"text\", result.get(2).getFirst().toString());\n",
      "        Assert.assertEquals(result.get(0).getSecond(), result.get(2).getSecond());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void simpleThreeFontTest() {\n",
      "        IFontSelectorStrategy strategy = FontSelectorTestsUtil.createStrategyWithLimitedThreeFonts(new BestMatchFontSelectorStrategyFactory());\n",
      "\n",
      "        final List<Tuple2<GlyphLine, PdfFont>> result = strategy.getGlyphLines(\"abcdefxyz\");\n",
      "        Assert.assertEquals(3, result.size());\n",
      "        Assert.assertEquals(\"abc\", result.get(0).getFirst().toString());\n",
      "        Assert.assertEquals(\"def\", result.get(1).getFirst().toString());\n",
      "        Assert.assertEquals(\"xyz\", result.get(2).getFirst().toString());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void threeFontWithSpacesTest() {\n",
      "        IFontSelectorStrategy strategy = FontSelectorTestsUtil.createStrategyWithLimitedThreeFonts(new BestMatchFontSelectorStrategyFactory());\n",
      "\n",
      "        final List<Tuple2<GlyphLine, PdfFont>> result = strategy.getGlyphLines(\" axadefa \");\n",
      "        Assert.assertEquals(6, result.size());\n",
      "        Assert.assertEquals(\" a\", result.get(0).getFirst().toString());\n",
      "        Assert.assertEquals(\"x\", result.get(1).getFirst().toString());\n",
      "        Assert.assertEquals(\"a\", result.get(2).getFirst().toString());\n",
      "        Assert.assertEquals(\"def\", result.get(3).getFirst().toString());\n",
      "        Assert.assertEquals(\"a\", result.get(4).getFirst().toString());\n",
      "        Assert.assertEquals(\" \", result.get(5).getFirst().toString());\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "BestMatchFontSelectorStrategy::::isCurrentFontCheckRequired()": [
        49,
        52
      ],
      "BestMatchFontSelectorStrategy.BestMatchFontSelectorStrategyFactory::::createFontSelectorStrategy(com.itextpdf.layout.font.FontProvider,com.itextpdf.layout.font.FontSelector,com.itextpdf.layout.font.FontSet)": [
        61,
        65
      ]
    },
    "test_method_lines_dic": {
      "BestMatchFontSelectorStrategyTest::::twoDiacriticsInRowTest()": [
        39,
        51
      ],
      "BestMatchFontSelectorStrategyTest::::oneDiacriticTest()": [
        53,
        64
      ],
      "BestMatchFontSelectorStrategyTest::::oneDiacriticWithUnsupportedFontTest()": [
        66,
        78
      ],
      "BestMatchFontSelectorStrategyTest::::diacriticFontDoesnotContainPreviousSymbolTest()": [
        80,
        95
      ],
      "BestMatchFontSelectorStrategyTest::::oneDiacriticWithOneSupportedFontTest()": [
        98,
        106
      ],
      "BestMatchFontSelectorStrategyTest::::surrogatePairsTest()": [
        108,
        120
      ],
      "BestMatchFontSelectorStrategyTest::::simpleThreeFontTest()": [
        122,
        131
      ],
      "BestMatchFontSelectorStrategyTest::::threeFontWithSpacesTest()": [
        133,
        145
      ]
    },
    "reverse_method_lines_dic": {
      "49": "BestMatchFontSelectorStrategy::::isCurrentFontCheckRequired()",
      "50": "BestMatchFontSelectorStrategy::::isCurrentFontCheckRequired()",
      "51": "BestMatchFontSelectorStrategy::::isCurrentFontCheckRequired()",
      "52": "BestMatchFontSelectorStrategy::::isCurrentFontCheckRequired()",
      "61": "BestMatchFontSelectorStrategy.BestMatchFontSelectorStrategyFactory::::createFontSelectorStrategy(com.itextpdf.layout.font.FontProvider,com.itextpdf.layout.font.FontSelector,com.itextpdf.layout.font.FontSet)",
      "62": "BestMatchFontSelectorStrategy.BestMatchFontSelectorStrategyFactory::::createFontSelectorStrategy(com.itextpdf.layout.font.FontProvider,com.itextpdf.layout.font.FontSelector,com.itextpdf.layout.font.FontSet)",
      "63": "BestMatchFontSelectorStrategy.BestMatchFontSelectorStrategyFactory::::createFontSelectorStrategy(com.itextpdf.layout.font.FontProvider,com.itextpdf.layout.font.FontSelector,com.itextpdf.layout.font.FontSet)",
      "64": "BestMatchFontSelectorStrategy.BestMatchFontSelectorStrategyFactory::::createFontSelectorStrategy(com.itextpdf.layout.font.FontProvider,com.itextpdf.layout.font.FontSelector,com.itextpdf.layout.font.FontSet)",
      "65": "BestMatchFontSelectorStrategy.BestMatchFontSelectorStrategyFactory::::createFontSelectorStrategy(com.itextpdf.layout.font.FontProvider,com.itextpdf.layout.font.FontSelector,com.itextpdf.layout.font.FontSet)"
    },
    "test_reverse_method_lines_dic": {
      "39": "BestMatchFontSelectorStrategyTest::::twoDiacriticsInRowTest()",
      "40": "BestMatchFontSelectorStrategyTest::::twoDiacriticsInRowTest()",
      "41": "BestMatchFontSelectorStrategyTest::::twoDiacriticsInRowTest()",
      "42": "BestMatchFontSelectorStrategyTest::::twoDiacriticsInRowTest()",
      "43": "BestMatchFontSelectorStrategyTest::::twoDiacriticsInRowTest()",
      "44": "BestMatchFontSelectorStrategyTest::::twoDiacriticsInRowTest()",
      "45": "BestMatchFontSelectorStrategyTest::::twoDiacriticsInRowTest()",
      "46": "BestMatchFontSelectorStrategyTest::::twoDiacriticsInRowTest()",
      "47": "BestMatchFontSelectorStrategyTest::::twoDiacriticsInRowTest()",
      "48": "BestMatchFontSelectorStrategyTest::::twoDiacriticsInRowTest()",
      "49": "BestMatchFontSelectorStrategyTest::::twoDiacriticsInRowTest()",
      "50": "BestMatchFontSelectorStrategyTest::::twoDiacriticsInRowTest()",
      "51": "BestMatchFontSelectorStrategyTest::::twoDiacriticsInRowTest()",
      "53": "BestMatchFontSelectorStrategyTest::::oneDiacriticTest()",
      "54": "BestMatchFontSelectorStrategyTest::::oneDiacriticTest()",
      "55": "BestMatchFontSelectorStrategyTest::::oneDiacriticTest()",
      "56": "BestMatchFontSelectorStrategyTest::::oneDiacriticTest()",
      "57": "BestMatchFontSelectorStrategyTest::::oneDiacriticTest()",
      "58": "BestMatchFontSelectorStrategyTest::::oneDiacriticTest()",
      "59": "BestMatchFontSelectorStrategyTest::::oneDiacriticTest()",
      "60": "BestMatchFontSelectorStrategyTest::::oneDiacriticTest()",
      "61": "BestMatchFontSelectorStrategyTest::::oneDiacriticTest()",
      "62": "BestMatchFontSelectorStrategyTest::::oneDiacriticTest()",
      "63": "BestMatchFontSelectorStrategyTest::::oneDiacriticTest()",
      "64": "BestMatchFontSelectorStrategyTest::::oneDiacriticTest()",
      "66": "BestMatchFontSelectorStrategyTest::::oneDiacriticWithUnsupportedFontTest()",
      "67": "BestMatchFontSelectorStrategyTest::::oneDiacriticWithUnsupportedFontTest()",
      "68": "BestMatchFontSelectorStrategyTest::::oneDiacriticWithUnsupportedFontTest()",
      "69": "BestMatchFontSelectorStrategyTest::::oneDiacriticWithUnsupportedFontTest()",
      "70": "BestMatchFontSelectorStrategyTest::::oneDiacriticWithUnsupportedFontTest()",
      "71": "BestMatchFontSelectorStrategyTest::::oneDiacriticWithUnsupportedFontTest()",
      "72": "BestMatchFontSelectorStrategyTest::::oneDiacriticWithUnsupportedFontTest()",
      "73": "BestMatchFontSelectorStrategyTest::::oneDiacriticWithUnsupportedFontTest()",
      "74": "BestMatchFontSelectorStrategyTest::::oneDiacriticWithUnsupportedFontTest()",
      "75": "BestMatchFontSelectorStrategyTest::::oneDiacriticWithUnsupportedFontTest()",
      "76": "BestMatchFontSelectorStrategyTest::::oneDiacriticWithUnsupportedFontTest()",
      "77": "BestMatchFontSelectorStrategyTest::::oneDiacriticWithUnsupportedFontTest()",
      "78": "BestMatchFontSelectorStrategyTest::::oneDiacriticWithUnsupportedFontTest()",
      "80": "BestMatchFontSelectorStrategyTest::::diacriticFontDoesnotContainPreviousSymbolTest()",
      "81": "BestMatchFontSelectorStrategyTest::::diacriticFontDoesnotContainPreviousSymbolTest()",
      "82": "BestMatchFontSelectorStrategyTest::::diacriticFontDoesnotContainPreviousSymbolTest()",
      "83": "BestMatchFontSelectorStrategyTest::::diacriticFontDoesnotContainPreviousSymbolTest()",
      "84": "BestMatchFontSelectorStrategyTest::::diacriticFontDoesnotContainPreviousSymbolTest()",
      "85": "BestMatchFontSelectorStrategyTest::::diacriticFontDoesnotContainPreviousSymbolTest()",
      "86": "BestMatchFontSelectorStrategyTest::::diacriticFontDoesnotContainPreviousSymbolTest()",
      "87": "BestMatchFontSelectorStrategyTest::::diacriticFontDoesnotContainPreviousSymbolTest()",
      "88": "BestMatchFontSelectorStrategyTest::::diacriticFontDoesnotContainPreviousSymbolTest()",
      "89": "BestMatchFontSelectorStrategyTest::::diacriticFontDoesnotContainPreviousSymbolTest()",
      "90": "BestMatchFontSelectorStrategyTest::::diacriticFontDoesnotContainPreviousSymbolTest()",
      "91": "BestMatchFontSelectorStrategyTest::::diacriticFontDoesnotContainPreviousSymbolTest()",
      "92": "BestMatchFontSelectorStrategyTest::::diacriticFontDoesnotContainPreviousSymbolTest()",
      "93": "BestMatchFontSelectorStrategyTest::::diacriticFontDoesnotContainPreviousSymbolTest()",
      "94": "BestMatchFontSelectorStrategyTest::::diacriticFontDoesnotContainPreviousSymbolTest()",
      "95": "BestMatchFontSelectorStrategyTest::::diacriticFontDoesnotContainPreviousSymbolTest()",
      "98": "BestMatchFontSelectorStrategyTest::::oneDiacriticWithOneSupportedFontTest()",
      "99": "BestMatchFontSelectorStrategyTest::::oneDiacriticWithOneSupportedFontTest()",
      "100": "BestMatchFontSelectorStrategyTest::::oneDiacriticWithOneSupportedFontTest()",
      "101": "BestMatchFontSelectorStrategyTest::::oneDiacriticWithOneSupportedFontTest()",
      "102": "BestMatchFontSelectorStrategyTest::::oneDiacriticWithOneSupportedFontTest()",
      "103": "BestMatchFontSelectorStrategyTest::::oneDiacriticWithOneSupportedFontTest()",
      "104": "BestMatchFontSelectorStrategyTest::::oneDiacriticWithOneSupportedFontTest()",
      "105": "BestMatchFontSelectorStrategyTest::::oneDiacriticWithOneSupportedFontTest()",
      "106": "BestMatchFontSelectorStrategyTest::::oneDiacriticWithOneSupportedFontTest()",
      "108": "BestMatchFontSelectorStrategyTest::::surrogatePairsTest()",
      "109": "BestMatchFontSelectorStrategyTest::::surrogatePairsTest()",
      "110": "BestMatchFontSelectorStrategyTest::::surrogatePairsTest()",
      "111": "BestMatchFontSelectorStrategyTest::::surrogatePairsTest()",
      "112": "BestMatchFontSelectorStrategyTest::::surrogatePairsTest()",
      "113": "BestMatchFontSelectorStrategyTest::::surrogatePairsTest()",
      "114": "BestMatchFontSelectorStrategyTest::::surrogatePairsTest()",
      "115": "BestMatchFontSelectorStrategyTest::::surrogatePairsTest()",
      "116": "BestMatchFontSelectorStrategyTest::::surrogatePairsTest()",
      "117": "BestMatchFontSelectorStrategyTest::::surrogatePairsTest()",
      "118": "BestMatchFontSelectorStrategyTest::::surrogatePairsTest()",
      "119": "BestMatchFontSelectorStrategyTest::::surrogatePairsTest()",
      "120": "BestMatchFontSelectorStrategyTest::::surrogatePairsTest()",
      "122": "BestMatchFontSelectorStrategyTest::::simpleThreeFontTest()",
      "123": "BestMatchFontSelectorStrategyTest::::simpleThreeFontTest()",
      "124": "BestMatchFontSelectorStrategyTest::::simpleThreeFontTest()",
      "125": "BestMatchFontSelectorStrategyTest::::simpleThreeFontTest()",
      "126": "BestMatchFontSelectorStrategyTest::::simpleThreeFontTest()",
      "127": "BestMatchFontSelectorStrategyTest::::simpleThreeFontTest()",
      "128": "BestMatchFontSelectorStrategyTest::::simpleThreeFontTest()",
      "129": "BestMatchFontSelectorStrategyTest::::simpleThreeFontTest()",
      "130": "BestMatchFontSelectorStrategyTest::::simpleThreeFontTest()",
      "131": "BestMatchFontSelectorStrategyTest::::simpleThreeFontTest()",
      "133": "BestMatchFontSelectorStrategyTest::::threeFontWithSpacesTest()",
      "134": "BestMatchFontSelectorStrategyTest::::threeFontWithSpacesTest()",
      "135": "BestMatchFontSelectorStrategyTest::::threeFontWithSpacesTest()",
      "136": "BestMatchFontSelectorStrategyTest::::threeFontWithSpacesTest()",
      "137": "BestMatchFontSelectorStrategyTest::::threeFontWithSpacesTest()",
      "138": "BestMatchFontSelectorStrategyTest::::threeFontWithSpacesTest()",
      "139": "BestMatchFontSelectorStrategyTest::::threeFontWithSpacesTest()",
      "140": "BestMatchFontSelectorStrategyTest::::threeFontWithSpacesTest()",
      "141": "BestMatchFontSelectorStrategyTest::::threeFontWithSpacesTest()",
      "142": "BestMatchFontSelectorStrategyTest::::threeFontWithSpacesTest()",
      "143": "BestMatchFontSelectorStrategyTest::::threeFontWithSpacesTest()",
      "144": "BestMatchFontSelectorStrategyTest::::threeFontWithSpacesTest()",
      "145": "BestMatchFontSelectorStrategyTest::::threeFontWithSpacesTest()"
    },
    "tests": [
      {
        "test_lines": [
          39,
          51
        ],
        "covered_lines": [
          43,
          44,
          51,
          57,
          64
        ]
      },
      {
        "test_lines": [
          53,
          64
        ],
        "covered_lines": [
          43,
          44,
          51,
          57,
          64
        ]
      },
      {
        "test_lines": [
          66,
          78
        ],
        "covered_lines": [
          43,
          44,
          51,
          57,
          64
        ]
      },
      {
        "test_lines": [
          80,
          95
        ],
        "covered_lines": [
          43,
          44,
          51,
          57,
          64
        ]
      },
      {
        "test_lines": [
          98,
          106
        ],
        "covered_lines": [
          43,
          44,
          51,
          57,
          64
        ]
      },
      {
        "test_lines": [
          108,
          120
        ],
        "covered_lines": [
          43,
          44,
          51,
          57,
          64
        ]
      },
      {
        "test_lines": [
          122,
          131
        ],
        "covered_lines": [
          43,
          44,
          51,
          57,
          64
        ]
      },
      {
        "test_lines": [
          133,
          145
        ],
        "covered_lines": [
          43,
          44,
          51,
          57,
          64
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/itext-java/layout/src/main/java/com/itextpdf/layout/font/selectorstrategy/FirstMatchFontSelectorStrategy.java": {
    "class_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.layout.font.selectorstrategy;\n",
      "\n",
      "import com.itextpdf.layout.font.FontProvider;\n",
      "import com.itextpdf.layout.font.FontSelector;\n",
      "import com.itextpdf.layout.font.FontSet;\n",
      "\n",
      "/**\n",
      " * The class implements strategy where the first matched font is used to render as many glyphs as possible.\n",
      " */\n",
      "public class FirstMatchFontSelectorStrategy extends AbstractFontSelectorStrategy {\n",
      "\n",
      "    /**\n",
      "     * Creates a new instance of {@link FirstMatchFontSelectorStrategy}.\n",
      "     *\n",
      "     * @param fontProvider the font provider\n",
      "     * @param fontSelector the font selector\n",
      "     * @param additionalFonts the set of fonts to be used additionally to the fonts added to font provider.\n",
      "     */\n",
      "    public FirstMatchFontSelectorStrategy(FontProvider fontProvider, FontSelector fontSelector,\n",
      "            FontSet additionalFonts) {\n",
      "        super(fontProvider, fontSelector, additionalFonts);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * {@inheritDoc}\n",
      "     */\n",
      "    @Override\n",
      "    protected boolean isCurrentFontCheckRequired() {\n",
      "        return false;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * The factory for {@link FirstMatchFontSelectorStrategy}.\n",
      "     */\n",
      "    public static final class FirstMathFontSelectorStrategyFactory implements IFontSelectorStrategyFactory {\n",
      "        /**\n",
      "         * {@inheritDoc}\n",
      "         */\n",
      "        @Override\n",
      "        public IFontSelectorStrategy createFontSelectorStrategy(FontProvider fontProvider, FontSelector fontSelector,\n",
      "                FontSet additionalFonts) {\n",
      "            return new FirstMatchFontSelectorStrategy(fontProvider, fontSelector, additionalFonts);\n",
      "        }\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.layout.font.selectorstrategy;\n",
      "\n",
      "import com.itextpdf.commons.datastructures.Tuple2;\n",
      "import com.itextpdf.io.font.otf.GlyphLine;\n",
      "import com.itextpdf.kernel.font.PdfFont;\n",
      "import com.itextpdf.layout.font.selectorstrategy.FirstMatchFontSelectorStrategy.FirstMathFontSelectorStrategyFactory;\n",
      "import com.itextpdf.test.ExtendedITextTest;\n",
      "import com.itextpdf.test.annotations.type.UnitTest;\n",
      "\n",
      "import java.util.List;\n",
      "import org.junit.Assert;\n",
      "import org.junit.Test;\n",
      "import org.junit.experimental.categories.Category;\n",
      "\n",
      "@Category(UnitTest.class)\n",
      "public class FirstMatchFontSelectorStrategyTest extends ExtendedITextTest {\n",
      "    @Test\n",
      "    public void twoDiacriticsInRowTest() {\n",
      "        IFontSelectorStrategy strategy = FontSelectorTestsUtil.createStrategyWithFreeSansAndTNR(new FirstMathFontSelectorStrategyFactory());\n",
      "\n",
      "        final List<Tuple2<GlyphLine, PdfFont>> result = strategy.getGlyphLines(\n",
      "                \"L with accent: \\u004f\\u0301\\u0302 abc\");\n",
      "        Assert.assertEquals(2, result.size());\n",
      "        Assert.assertEquals(\"L with accent: \", result.get(0).getFirst().toString());\n",
      "        Assert.assertEquals(\"\\u004f\\u0301\\u0302 abc\", result.get(1).getFirst().toString());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void oneDiacriticTest() {\n",
      "        IFontSelectorStrategy strategy = FontSelectorTestsUtil.createStrategyWithFreeSansAndTNR(new FirstMathFontSelectorStrategyFactory());\n",
      "\n",
      "        final List<Tuple2<GlyphLine, PdfFont>> result = strategy.getGlyphLines(\n",
      "                \"L with accent: \\u004f\\u0302 abc\");\n",
      "        Assert.assertEquals(2, result.size());\n",
      "        Assert.assertEquals(\"L with accent: \", result.get(0).getFirst().toString());\n",
      "        Assert.assertEquals(\"\\u004f\\u0302 abc\", result.get(1).getFirst().toString());\n",
      "        Assert.assertNotEquals(result.get(0).getSecond(), result.get(1).getSecond());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void diacriticFontDoesnotContainPreviousSymbolTest() {\n",
      "        IFontSelectorStrategy strategy = FontSelectorTestsUtil.createStrategyWithNotoSans(new FirstMathFontSelectorStrategyFactory());\n",
      "\n",
      "        final List<Tuple2<GlyphLine, PdfFont>> result = strategy.getGlyphLines(\n",
      "                \"\u041c\u0438\\u0301\u0440\u044a (m\u00edr\u0259)\");\n",
      "        Assert.assertEquals(6, result.size());\n",
      "        Assert.assertEquals(\"\u041c\u0438\", result.get(0).getFirst().toString());\n",
      "        Assert.assertEquals(\"\\u0301\", result.get(1).getFirst().toString());\n",
      "        Assert.assertEquals(\"\u0440\u044a (\", result.get(2).getFirst().toString());\n",
      "        Assert.assertEquals(\"m\u00edr\", result.get(3).getFirst().toString());\n",
      "        Assert.assertEquals(\"\u0259\", result.get(4).getFirst().toString());\n",
      "        Assert.assertEquals(\")\", result.get(5).getFirst().toString());\n",
      "        Assert.assertEquals(result.get(0).getSecond(), result.get(2).getSecond());\n",
      "        Assert.assertEquals(result.get(2).getSecond(), result.get(3).getSecond());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void oneDiacriticWithUnsupportedFontTest() {\n",
      "        IFontSelectorStrategy strategy = FontSelectorTestsUtil.createStrategyWithTNR(new FirstMathFontSelectorStrategyFactory());\n",
      "\n",
      "        final List<Tuple2<GlyphLine, PdfFont>> result = strategy.getGlyphLines(\n",
      "                \"L with accent: \\u004f\\u0302 abc\");\n",
      "        Assert.assertEquals(3, result.size());\n",
      "        Assert.assertEquals(\"L with accent: \\u004f\", result.get(0).getFirst().toString());\n",
      "        Assert.assertEquals(\"\", result.get(1).getFirst().toString());\n",
      "        Assert.assertEquals(\" abc\", result.get(2).getFirst().toString());\n",
      "        Assert.assertEquals(result.get(0).getSecond(), result.get(2).getSecond());\n",
      "        Assert.assertEquals(result.get(0).getSecond(), result.get(1).getSecond());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void oneDiacriticWithOneSupportedFontTest() {\n",
      "        IFontSelectorStrategy strategy = FontSelectorTestsUtil.createStrategyWithFreeSans(new FirstMathFontSelectorStrategyFactory());\n",
      "\n",
      "        final List<Tuple2<GlyphLine, PdfFont>> result = strategy.getGlyphLines(\n",
      "                \"L with accent: \\u004f\\u0302 abc\");\n",
      "        Assert.assertEquals(1, result.size());\n",
      "        Assert.assertEquals(\"L with accent: \\u004f\\u0302 abc\", result.get(0).getFirst().toString());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void surrogatePairsTest() {\n",
      "        IFontSelectorStrategy strategy = FontSelectorTestsUtil.createStrategyWithOldItalic(new FirstMathFontSelectorStrategyFactory());\n",
      "\n",
      "        // this text contains three successive surrogate pairs\n",
      "        final List<Tuple2<GlyphLine, PdfFont>> result = strategy.getGlyphLines(\n",
      "                \"text \\uD800\\uDF10\\uD800\\uDF00\\uD800\\uDF11 text\");\n",
      "        Assert.assertEquals(3, result.size());\n",
      "        Assert.assertEquals(\"text \", result.get(0).getFirst().toString());\n",
      "        Assert.assertEquals(\"\\uD800\\uDF10\\uD800\\uDF00\\uD800\\uDF11 \", result.get(1).getFirst().toString());\n",
      "        Assert.assertEquals(\"text\", result.get(2).getFirst().toString());\n",
      "        Assert.assertEquals(result.get(0).getSecond(), result.get(2).getSecond());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void simpleThreeFontTest() {\n",
      "        IFontSelectorStrategy strategy = FontSelectorTestsUtil.createStrategyWithLimitedThreeFonts(new FirstMathFontSelectorStrategyFactory());\n",
      "\n",
      "        final List<Tuple2<GlyphLine, PdfFont>> result = strategy.getGlyphLines(\"abcdefxyz\");\n",
      "        Assert.assertEquals(1, result.size());\n",
      "        Assert.assertEquals(\"abcdefxyz\", result.get(0).getFirst().toString());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void threeFontWithSpacesTest() {\n",
      "        IFontSelectorStrategy strategy = FontSelectorTestsUtil.createStrategyWithLimitedThreeFonts(new FirstMathFontSelectorStrategyFactory());\n",
      "\n",
      "        final List<Tuple2<GlyphLine, PdfFont>> result = strategy.getGlyphLines(\" axadefa \");\n",
      "        Assert.assertEquals(1, result.size());\n",
      "        Assert.assertEquals(\" axadefa \", result.get(0).getFirst().toString());\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "FirstMatchFontSelectorStrategy::::isCurrentFontCheckRequired()": [
        49,
        52
      ],
      "FirstMatchFontSelectorStrategy.FirstMathFontSelectorStrategyFactory::::createFontSelectorStrategy(com.itextpdf.layout.font.FontProvider,com.itextpdf.layout.font.FontSelector,com.itextpdf.layout.font.FontSet)": [
        61,
        65
      ]
    },
    "test_method_lines_dic": {
      "FirstMatchFontSelectorStrategyTest::::twoDiacriticsInRowTest()": [
        39,
        48
      ],
      "FirstMatchFontSelectorStrategyTest::::oneDiacriticTest()": [
        50,
        60
      ],
      "FirstMatchFontSelectorStrategyTest::::diacriticFontDoesnotContainPreviousSymbolTest()": [
        62,
        77
      ],
      "FirstMatchFontSelectorStrategyTest::::oneDiacriticWithUnsupportedFontTest()": [
        79,
        91
      ],
      "FirstMatchFontSelectorStrategyTest::::oneDiacriticWithOneSupportedFontTest()": [
        93,
        101
      ],
      "FirstMatchFontSelectorStrategyTest::::surrogatePairsTest()": [
        103,
        115
      ],
      "FirstMatchFontSelectorStrategyTest::::simpleThreeFontTest()": [
        117,
        124
      ],
      "FirstMatchFontSelectorStrategyTest::::threeFontWithSpacesTest()": [
        126,
        133
      ]
    },
    "reverse_method_lines_dic": {
      "49": "FirstMatchFontSelectorStrategy::::isCurrentFontCheckRequired()",
      "50": "FirstMatchFontSelectorStrategy::::isCurrentFontCheckRequired()",
      "51": "FirstMatchFontSelectorStrategy::::isCurrentFontCheckRequired()",
      "52": "FirstMatchFontSelectorStrategy::::isCurrentFontCheckRequired()",
      "61": "FirstMatchFontSelectorStrategy.FirstMathFontSelectorStrategyFactory::::createFontSelectorStrategy(com.itextpdf.layout.font.FontProvider,com.itextpdf.layout.font.FontSelector,com.itextpdf.layout.font.FontSet)",
      "62": "FirstMatchFontSelectorStrategy.FirstMathFontSelectorStrategyFactory::::createFontSelectorStrategy(com.itextpdf.layout.font.FontProvider,com.itextpdf.layout.font.FontSelector,com.itextpdf.layout.font.FontSet)",
      "63": "FirstMatchFontSelectorStrategy.FirstMathFontSelectorStrategyFactory::::createFontSelectorStrategy(com.itextpdf.layout.font.FontProvider,com.itextpdf.layout.font.FontSelector,com.itextpdf.layout.font.FontSet)",
      "64": "FirstMatchFontSelectorStrategy.FirstMathFontSelectorStrategyFactory::::createFontSelectorStrategy(com.itextpdf.layout.font.FontProvider,com.itextpdf.layout.font.FontSelector,com.itextpdf.layout.font.FontSet)",
      "65": "FirstMatchFontSelectorStrategy.FirstMathFontSelectorStrategyFactory::::createFontSelectorStrategy(com.itextpdf.layout.font.FontProvider,com.itextpdf.layout.font.FontSelector,com.itextpdf.layout.font.FontSet)"
    },
    "test_reverse_method_lines_dic": {
      "39": "FirstMatchFontSelectorStrategyTest::::twoDiacriticsInRowTest()",
      "40": "FirstMatchFontSelectorStrategyTest::::twoDiacriticsInRowTest()",
      "41": "FirstMatchFontSelectorStrategyTest::::twoDiacriticsInRowTest()",
      "42": "FirstMatchFontSelectorStrategyTest::::twoDiacriticsInRowTest()",
      "43": "FirstMatchFontSelectorStrategyTest::::twoDiacriticsInRowTest()",
      "44": "FirstMatchFontSelectorStrategyTest::::twoDiacriticsInRowTest()",
      "45": "FirstMatchFontSelectorStrategyTest::::twoDiacriticsInRowTest()",
      "46": "FirstMatchFontSelectorStrategyTest::::twoDiacriticsInRowTest()",
      "47": "FirstMatchFontSelectorStrategyTest::::twoDiacriticsInRowTest()",
      "48": "FirstMatchFontSelectorStrategyTest::::twoDiacriticsInRowTest()",
      "50": "FirstMatchFontSelectorStrategyTest::::oneDiacriticTest()",
      "51": "FirstMatchFontSelectorStrategyTest::::oneDiacriticTest()",
      "52": "FirstMatchFontSelectorStrategyTest::::oneDiacriticTest()",
      "53": "FirstMatchFontSelectorStrategyTest::::oneDiacriticTest()",
      "54": "FirstMatchFontSelectorStrategyTest::::oneDiacriticTest()",
      "55": "FirstMatchFontSelectorStrategyTest::::oneDiacriticTest()",
      "56": "FirstMatchFontSelectorStrategyTest::::oneDiacriticTest()",
      "57": "FirstMatchFontSelectorStrategyTest::::oneDiacriticTest()",
      "58": "FirstMatchFontSelectorStrategyTest::::oneDiacriticTest()",
      "59": "FirstMatchFontSelectorStrategyTest::::oneDiacriticTest()",
      "60": "FirstMatchFontSelectorStrategyTest::::oneDiacriticTest()",
      "62": "FirstMatchFontSelectorStrategyTest::::diacriticFontDoesnotContainPreviousSymbolTest()",
      "63": "FirstMatchFontSelectorStrategyTest::::diacriticFontDoesnotContainPreviousSymbolTest()",
      "64": "FirstMatchFontSelectorStrategyTest::::diacriticFontDoesnotContainPreviousSymbolTest()",
      "65": "FirstMatchFontSelectorStrategyTest::::diacriticFontDoesnotContainPreviousSymbolTest()",
      "66": "FirstMatchFontSelectorStrategyTest::::diacriticFontDoesnotContainPreviousSymbolTest()",
      "67": "FirstMatchFontSelectorStrategyTest::::diacriticFontDoesnotContainPreviousSymbolTest()",
      "68": "FirstMatchFontSelectorStrategyTest::::diacriticFontDoesnotContainPreviousSymbolTest()",
      "69": "FirstMatchFontSelectorStrategyTest::::diacriticFontDoesnotContainPreviousSymbolTest()",
      "70": "FirstMatchFontSelectorStrategyTest::::diacriticFontDoesnotContainPreviousSymbolTest()",
      "71": "FirstMatchFontSelectorStrategyTest::::diacriticFontDoesnotContainPreviousSymbolTest()",
      "72": "FirstMatchFontSelectorStrategyTest::::diacriticFontDoesnotContainPreviousSymbolTest()",
      "73": "FirstMatchFontSelectorStrategyTest::::diacriticFontDoesnotContainPreviousSymbolTest()",
      "74": "FirstMatchFontSelectorStrategyTest::::diacriticFontDoesnotContainPreviousSymbolTest()",
      "75": "FirstMatchFontSelectorStrategyTest::::diacriticFontDoesnotContainPreviousSymbolTest()",
      "76": "FirstMatchFontSelectorStrategyTest::::diacriticFontDoesnotContainPreviousSymbolTest()",
      "77": "FirstMatchFontSelectorStrategyTest::::diacriticFontDoesnotContainPreviousSymbolTest()",
      "79": "FirstMatchFontSelectorStrategyTest::::oneDiacriticWithUnsupportedFontTest()",
      "80": "FirstMatchFontSelectorStrategyTest::::oneDiacriticWithUnsupportedFontTest()",
      "81": "FirstMatchFontSelectorStrategyTest::::oneDiacriticWithUnsupportedFontTest()",
      "82": "FirstMatchFontSelectorStrategyTest::::oneDiacriticWithUnsupportedFontTest()",
      "83": "FirstMatchFontSelectorStrategyTest::::oneDiacriticWithUnsupportedFontTest()",
      "84": "FirstMatchFontSelectorStrategyTest::::oneDiacriticWithUnsupportedFontTest()",
      "85": "FirstMatchFontSelectorStrategyTest::::oneDiacriticWithUnsupportedFontTest()",
      "86": "FirstMatchFontSelectorStrategyTest::::oneDiacriticWithUnsupportedFontTest()",
      "87": "FirstMatchFontSelectorStrategyTest::::oneDiacriticWithUnsupportedFontTest()",
      "88": "FirstMatchFontSelectorStrategyTest::::oneDiacriticWithUnsupportedFontTest()",
      "89": "FirstMatchFontSelectorStrategyTest::::oneDiacriticWithUnsupportedFontTest()",
      "90": "FirstMatchFontSelectorStrategyTest::::oneDiacriticWithUnsupportedFontTest()",
      "91": "FirstMatchFontSelectorStrategyTest::::oneDiacriticWithUnsupportedFontTest()",
      "93": "FirstMatchFontSelectorStrategyTest::::oneDiacriticWithOneSupportedFontTest()",
      "94": "FirstMatchFontSelectorStrategyTest::::oneDiacriticWithOneSupportedFontTest()",
      "95": "FirstMatchFontSelectorStrategyTest::::oneDiacriticWithOneSupportedFontTest()",
      "96": "FirstMatchFontSelectorStrategyTest::::oneDiacriticWithOneSupportedFontTest()",
      "97": "FirstMatchFontSelectorStrategyTest::::oneDiacriticWithOneSupportedFontTest()",
      "98": "FirstMatchFontSelectorStrategyTest::::oneDiacriticWithOneSupportedFontTest()",
      "99": "FirstMatchFontSelectorStrategyTest::::oneDiacriticWithOneSupportedFontTest()",
      "100": "FirstMatchFontSelectorStrategyTest::::oneDiacriticWithOneSupportedFontTest()",
      "101": "FirstMatchFontSelectorStrategyTest::::oneDiacriticWithOneSupportedFontTest()",
      "103": "FirstMatchFontSelectorStrategyTest::::surrogatePairsTest()",
      "104": "FirstMatchFontSelectorStrategyTest::::surrogatePairsTest()",
      "105": "FirstMatchFontSelectorStrategyTest::::surrogatePairsTest()",
      "106": "FirstMatchFontSelectorStrategyTest::::surrogatePairsTest()",
      "107": "FirstMatchFontSelectorStrategyTest::::surrogatePairsTest()",
      "108": "FirstMatchFontSelectorStrategyTest::::surrogatePairsTest()",
      "109": "FirstMatchFontSelectorStrategyTest::::surrogatePairsTest()",
      "110": "FirstMatchFontSelectorStrategyTest::::surrogatePairsTest()",
      "111": "FirstMatchFontSelectorStrategyTest::::surrogatePairsTest()",
      "112": "FirstMatchFontSelectorStrategyTest::::surrogatePairsTest()",
      "113": "FirstMatchFontSelectorStrategyTest::::surrogatePairsTest()",
      "114": "FirstMatchFontSelectorStrategyTest::::surrogatePairsTest()",
      "115": "FirstMatchFontSelectorStrategyTest::::surrogatePairsTest()",
      "117": "FirstMatchFontSelectorStrategyTest::::simpleThreeFontTest()",
      "118": "FirstMatchFontSelectorStrategyTest::::simpleThreeFontTest()",
      "119": "FirstMatchFontSelectorStrategyTest::::simpleThreeFontTest()",
      "120": "FirstMatchFontSelectorStrategyTest::::simpleThreeFontTest()",
      "121": "FirstMatchFontSelectorStrategyTest::::simpleThreeFontTest()",
      "122": "FirstMatchFontSelectorStrategyTest::::simpleThreeFontTest()",
      "123": "FirstMatchFontSelectorStrategyTest::::simpleThreeFontTest()",
      "124": "FirstMatchFontSelectorStrategyTest::::simpleThreeFontTest()",
      "126": "FirstMatchFontSelectorStrategyTest::::threeFontWithSpacesTest()",
      "127": "FirstMatchFontSelectorStrategyTest::::threeFontWithSpacesTest()",
      "128": "FirstMatchFontSelectorStrategyTest::::threeFontWithSpacesTest()",
      "129": "FirstMatchFontSelectorStrategyTest::::threeFontWithSpacesTest()",
      "130": "FirstMatchFontSelectorStrategyTest::::threeFontWithSpacesTest()",
      "131": "FirstMatchFontSelectorStrategyTest::::threeFontWithSpacesTest()",
      "132": "FirstMatchFontSelectorStrategyTest::::threeFontWithSpacesTest()",
      "133": "FirstMatchFontSelectorStrategyTest::::threeFontWithSpacesTest()"
    },
    "tests": [
      {
        "test_lines": [
          39,
          48
        ],
        "covered_lines": [
          43,
          44,
          51,
          57,
          64
        ]
      },
      {
        "test_lines": [
          50,
          60
        ],
        "covered_lines": [
          43,
          44,
          51,
          57,
          64
        ]
      },
      {
        "test_lines": [
          62,
          77
        ],
        "covered_lines": [
          43,
          44,
          51,
          57,
          64
        ]
      },
      {
        "test_lines": [
          79,
          91
        ],
        "covered_lines": [
          43,
          44,
          51,
          57,
          64
        ]
      },
      {
        "test_lines": [
          93,
          101
        ],
        "covered_lines": [
          43,
          44,
          51,
          57,
          64
        ]
      },
      {
        "test_lines": [
          103,
          115
        ],
        "covered_lines": [
          43,
          44,
          51,
          57,
          64
        ]
      },
      {
        "test_lines": [
          117,
          124
        ],
        "covered_lines": [
          43,
          44,
          51,
          57,
          64
        ]
      },
      {
        "test_lines": [
          126,
          133
        ],
        "covered_lines": [
          43,
          44,
          51,
          57,
          64
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/itext-java/layout/src/main/java/com/itextpdf/layout/margincollapse/MarginsCollapseHandler.java": {
    "class_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.layout.margincollapse;\n",
      "\n",
      "import com.itextpdf.io.logs.IoLogMessageConstant;\n",
      "import com.itextpdf.commons.utils.MessageFormatUtil;\n",
      "import com.itextpdf.kernel.geom.Rectangle;\n",
      "import com.itextpdf.layout.IPropertyContainer;\n",
      "import com.itextpdf.layout.properties.FloatPropertyValue;\n",
      "import com.itextpdf.layout.properties.Property;\n",
      "import com.itextpdf.layout.properties.UnitValue;\n",
      "import com.itextpdf.layout.renderer.AbstractRenderer;\n",
      "import com.itextpdf.layout.renderer.BlockFormattingContextUtil;\n",
      "import com.itextpdf.layout.renderer.BlockRenderer;\n",
      "import com.itextpdf.layout.renderer.CellRenderer;\n",
      "import com.itextpdf.layout.renderer.IRenderer;\n",
      "import com.itextpdf.layout.renderer.LineRenderer;\n",
      "import com.itextpdf.layout.renderer.TableRenderer;\n",
      "import org.slf4j.Logger;\n",
      "import org.slf4j.LoggerFactory;\n",
      "\n",
      "import java.util.ArrayList;\n",
      "import java.util.List;\n",
      "\n",
      "/**\n",
      " * Rules of the margins collapsing are taken from Mozilla Developer Network:\n",
      " * https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Box_Model/Mastering_margin_collapsing\n",
      " * See also:\n",
      " * https://www.w3.org/TR/CSS2/box.html#collapsing-margins\n",
      " */\n",
      "public class MarginsCollapseHandler {\n",
      "    private IRenderer renderer;\n",
      "    private MarginsCollapseInfo collapseInfo;\n",
      "\n",
      "    private MarginsCollapseInfo childMarginInfo;\n",
      "    private MarginsCollapseInfo prevChildMarginInfo;\n",
      "    private int firstNotEmptyKidIndex = 0;\n",
      "\n",
      "    private int processedChildrenNum = 0;\n",
      "    private List<IRenderer> rendererChildren = new ArrayList<>();\n",
      "\n",
      "    // Layout box and collapse info are saved before processing the next kid, in order to be able to restore it in case\n",
      "    // the next kid is not placed. These values are not null only between startChildMarginsHandling and endChildMarginsHandling calls.\n",
      "    private Rectangle backupLayoutBox;\n",
      "    private MarginsCollapseInfo backupCollapseInfo;\n",
      "\n",
      "    private boolean lastKidCollapsedAfterHasClearanceApplied;\n",
      "\n",
      "    public MarginsCollapseHandler(IRenderer renderer, MarginsCollapseInfo marginsCollapseInfo) {\n",
      "        this.renderer = renderer;\n",
      "        this.collapseInfo = marginsCollapseInfo != null ? marginsCollapseInfo : new MarginsCollapseInfo();\n",
      "    }\n",
      "\n",
      "    public void processFixedHeightAdjustment(float heightDelta) {\n",
      "        collapseInfo.setBufferSpaceOnTop(collapseInfo.getBufferSpaceOnTop() + heightDelta);\n",
      "        collapseInfo.setBufferSpaceOnBottom(collapseInfo.getBufferSpaceOnBottom() + heightDelta);\n",
      "    }\n",
      "\n",
      "    public MarginsCollapseInfo startChildMarginsHandling(IRenderer child, Rectangle layoutBox) {\n",
      "        if (backupLayoutBox != null) {\n",
      "            // this should happen only if previous kid was floated\n",
      "            restoreLayoutBoxAfterFailedLayoutAttempt(layoutBox);\n",
      "            removeRendererChild(--processedChildrenNum);\n",
      "            childMarginInfo = null;\n",
      "        }\n",
      "\n",
      "        rendererChildren.add(child);\n",
      "\n",
      "        int childIndex = processedChildrenNum++;\n",
      "\n",
      "        // If renderer is floated, prepare layout box as if it was inline,\n",
      "        // however it will be restored from backup when next kid processing will start.\n",
      "        boolean childIsBlockElement = !rendererIsFloated(child) && isBlockElement(child);\n",
      "\n",
      "        backupLayoutBox = layoutBox.clone();\n",
      "        backupCollapseInfo = new MarginsCollapseInfo();\n",
      "        collapseInfo.copyTo(backupCollapseInfo);\n",
      "\n",
      "        prepareBoxForLayoutAttempt(layoutBox, childIndex, childIsBlockElement);\n",
      "\n",
      "        if (childIsBlockElement) {\n",
      "            childMarginInfo = createMarginsInfoForBlockChild(childIndex);\n",
      "        }\n",
      "        return this.childMarginInfo;\n",
      "    }\n",
      "\n",
      "    public void applyClearance(float clearHeightCorrection) {\n",
      "        // Actually, clearance is applied only in case margins were not enough,\n",
      "        // however I wasn't able to notice difference in browsers behaviour.\n",
      "        // Also, iText behaviour concerning margins self collapsing and clearance differs from browsers in some cases.\n",
      "        collapseInfo.setClearanceApplied(true);\n",
      "        collapseInfo.getCollapseBefore().joinMargin(clearHeightCorrection);\n",
      "    }\n",
      "\n",
      "    private MarginsCollapseInfo createMarginsInfoForBlockChild(int childIndex) {\n",
      "        boolean ignoreChildTopMargin = false;\n",
      "        // always assume that current child might be the last on this area\n",
      "        boolean ignoreChildBottomMargin = lastChildMarginAdjoinedToParent(renderer);\n",
      "        if (childIndex == firstNotEmptyKidIndex) {\n",
      "            ignoreChildTopMargin = firstChildMarginAdjoinedToParent(renderer);\n",
      "        }\n",
      "\n",
      "        MarginsCollapse childCollapseBefore;\n",
      "        if (childIndex == 0) {\n",
      "            MarginsCollapse parentCollapseBefore = collapseInfo.getCollapseBefore();\n",
      "            childCollapseBefore = ignoreChildTopMargin ? parentCollapseBefore : new MarginsCollapse();\n",
      "        } else {\n",
      "            MarginsCollapse prevChildCollapseAfter = prevChildMarginInfo != null ? prevChildMarginInfo.getOwnCollapseAfter() : null;\n",
      "            childCollapseBefore = prevChildCollapseAfter != null ? prevChildCollapseAfter : new MarginsCollapse();\n",
      "        }\n",
      "\n",
      "        MarginsCollapse parentCollapseAfter = collapseInfo.getCollapseAfter().clone();\n",
      "        MarginsCollapse childCollapseAfter = ignoreChildBottomMargin ? parentCollapseAfter : new MarginsCollapse();\n",
      "        MarginsCollapseInfo childMarginsInfo = new MarginsCollapseInfo(ignoreChildTopMargin, ignoreChildBottomMargin, childCollapseBefore, childCollapseAfter);\n",
      "        if (ignoreChildTopMargin && childIndex == firstNotEmptyKidIndex) {\n",
      "            childMarginsInfo.setBufferSpaceOnTop(collapseInfo.getBufferSpaceOnTop());\n",
      "        }\n",
      "        if (ignoreChildBottomMargin) {\n",
      "            childMarginsInfo.setBufferSpaceOnBottom(collapseInfo.getBufferSpaceOnBottom());\n",
      "        }\n",
      "        return childMarginsInfo;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * This method shall be called after child occupied area is included into parent occupied area.\n",
      "     *\n",
      "     * @param layoutBox available area for child and its siblings layout. It might be adjusted inside the method\n",
      "     */\n",
      "    public void endChildMarginsHandling(Rectangle layoutBox) {\n",
      "        int childIndex = processedChildrenNum - 1;\n",
      "        if (rendererIsFloated(getRendererChild(childIndex))) {\n",
      "            return;\n",
      "        }\n",
      "\n",
      "        if (childMarginInfo != null) {\n",
      "            if (firstNotEmptyKidIndex == childIndex && childMarginInfo.isSelfCollapsing()) {\n",
      "                firstNotEmptyKidIndex = childIndex + 1;\n",
      "            }\n",
      "            collapseInfo.setSelfCollapsing(collapseInfo.isSelfCollapsing() && childMarginInfo.isSelfCollapsing());\n",
      "\n",
      "            lastKidCollapsedAfterHasClearanceApplied = childMarginInfo.isSelfCollapsing() && childMarginInfo.isClearanceApplied();\n",
      "        } else {\n",
      "            lastKidCollapsedAfterHasClearanceApplied = false;\n",
      "            collapseInfo.setSelfCollapsing(false);\n",
      "        }\n",
      "\n",
      "        if (prevChildMarginInfo != null) {\n",
      "            fixPrevChildOccupiedArea(childIndex);\n",
      "\n",
      "            updateCollapseBeforeIfPrevKidIsFirstAndSelfCollapsed(prevChildMarginInfo.getOwnCollapseAfter());\n",
      "        }\n",
      "\n",
      "        if (firstNotEmptyKidIndex == childIndex && firstChildMarginAdjoinedToParent(renderer)) {\n",
      "            if (!collapseInfo.isSelfCollapsing()) {\n",
      "                getRidOfCollapseArtifactsAtopOccupiedArea();\n",
      "                if (childMarginInfo != null) {\n",
      "                    processUsedChildBufferSpaceOnTop(layoutBox);\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "\n",
      "        prevChildMarginInfo = childMarginInfo;\n",
      "        childMarginInfo = null;\n",
      "\n",
      "        backupLayoutBox = null;\n",
      "        backupCollapseInfo = null;\n",
      "    }\n",
      "\n",
      "    public void startMarginsCollapse(Rectangle parentBBox) {\n",
      "        collapseInfo.getCollapseBefore().joinMargin(defineTopMarginValueForCollapse(renderer));\n",
      "        collapseInfo.getCollapseAfter().joinMargin(defineBottomMarginValueForCollapse(renderer));\n",
      "\n",
      "        if (!firstChildMarginAdjoinedToParent(renderer)) {\n",
      "            float topIndent = collapseInfo.getCollapseBefore().getCollapsedMarginsSize();\n",
      "            applyTopMargin(parentBBox, topIndent);\n",
      "        }\n",
      "        if (!lastChildMarginAdjoinedToParent(renderer)) {\n",
      "            float bottomIndent = collapseInfo.getCollapseAfter().getCollapsedMarginsSize();\n",
      "            applyBottomMargin(parentBBox, bottomIndent);\n",
      "        }\n",
      "\n",
      "        // ignore current margins for now\n",
      "        ignoreModelTopMargin(renderer);\n",
      "        ignoreModelBottomMargin(renderer);\n",
      "    }\n",
      "\n",
      "    public void endMarginsCollapse(Rectangle layoutBox) {\n",
      "        if (backupLayoutBox != null) {\n",
      "            restoreLayoutBoxAfterFailedLayoutAttempt(layoutBox);\n",
      "        }\n",
      "\n",
      "        if (prevChildMarginInfo != null) {\n",
      "            updateCollapseBeforeIfPrevKidIsFirstAndSelfCollapsed(prevChildMarginInfo.getCollapseAfter());\n",
      "        }\n",
      "\n",
      "        boolean couldBeSelfCollapsing = MarginsCollapseHandler.marginsCouldBeSelfCollapsing(renderer) && !lastKidCollapsedAfterHasClearanceApplied;\n",
      "        boolean blockHasNoKidsWithContent = collapseInfo.isSelfCollapsing();\n",
      "        if (firstChildMarginAdjoinedToParent(renderer)) {\n",
      "            if (blockHasNoKidsWithContent && !couldBeSelfCollapsing) {\n",
      "                addNotYetAppliedTopMargin(layoutBox);\n",
      "            }\n",
      "        }\n",
      "        collapseInfo.setSelfCollapsing(collapseInfo.isSelfCollapsing() && couldBeSelfCollapsing);\n",
      "\n",
      "        if (!blockHasNoKidsWithContent && lastKidCollapsedAfterHasClearanceApplied) {\n",
      "            applySelfCollapsedKidMarginWithClearance(layoutBox);\n",
      "        }\n",
      "\n",
      "        MarginsCollapse ownCollapseAfter;\n",
      "        boolean lastChildMarginJoinedToParent = prevChildMarginInfo != null && prevChildMarginInfo.isIgnoreOwnMarginBottom() && !lastKidCollapsedAfterHasClearanceApplied;\n",
      "        if (lastChildMarginJoinedToParent) {\n",
      "            ownCollapseAfter = prevChildMarginInfo.getOwnCollapseAfter();\n",
      "        } else {\n",
      "            ownCollapseAfter = new MarginsCollapse();\n",
      "        }\n",
      "        ownCollapseAfter.joinMargin(defineBottomMarginValueForCollapse(renderer));\n",
      "        collapseInfo.setOwnCollapseAfter(ownCollapseAfter);\n",
      "\n",
      "        if (collapseInfo.isSelfCollapsing()) {\n",
      "            if (prevChildMarginInfo != null) {\n",
      "                collapseInfo.setCollapseAfter(prevChildMarginInfo.getCollapseAfter());\n",
      "            } else {\n",
      "                collapseInfo.getCollapseAfter().joinMargin(collapseInfo.getCollapseBefore());\n",
      "                collapseInfo.getOwnCollapseAfter().joinMargin(collapseInfo.getCollapseBefore());\n",
      "            }\n",
      "            if (!collapseInfo.isIgnoreOwnMarginBottom() && !collapseInfo.isIgnoreOwnMarginTop()) {\n",
      "                float collapsedMargins = collapseInfo.getCollapseAfter().getCollapsedMarginsSize();\n",
      "                overrideModelBottomMargin(renderer, collapsedMargins);\n",
      "            }\n",
      "        } else {\n",
      "            MarginsCollapse marginsCollapseBefore = collapseInfo.getCollapseBefore();\n",
      "            if (!collapseInfo.isIgnoreOwnMarginTop()) {\n",
      "                float collapsedMargins = marginsCollapseBefore.getCollapsedMarginsSize();\n",
      "                overrideModelTopMargin(renderer, collapsedMargins);\n",
      "            }\n",
      "\n",
      "            if (lastChildMarginJoinedToParent) {\n",
      "                collapseInfo.setCollapseAfter(prevChildMarginInfo.getCollapseAfter());\n",
      "            }\n",
      "            if (!collapseInfo.isIgnoreOwnMarginBottom()) {\n",
      "                float collapsedMargins = collapseInfo.getCollapseAfter().getCollapsedMarginsSize();\n",
      "                overrideModelBottomMargin(renderer, collapsedMargins);\n",
      "            }\n",
      "        }\n",
      "\n",
      "        if (lastChildMarginAdjoinedToParent(renderer) && (prevChildMarginInfo != null || blockHasNoKidsWithContent)) {\n",
      "            // Adjust layout box here in order to make it represent the available area left.\n",
      "            float collapsedMargins = collapseInfo.getCollapseAfter().getCollapsedMarginsSize();\n",
      "\n",
      "            // May be in case of self-collapsed margins it would make more sense to apply this value to topMargin,\n",
      "            // because that way the layout box would represent the area left after the empty self-collapsed block, not\n",
      "            // before it. However at the same time any considerations about the layout (i.e. content) area in case\n",
      "            // of the self-collapsed block seem to be invalid, because self-collapsed block shall have content area\n",
      "            // of zero height.\n",
      "            applyBottomMargin(layoutBox, collapsedMargins);\n",
      "        }\n",
      "\n",
      "    }\n",
      "\n",
      "    private void updateCollapseBeforeIfPrevKidIsFirstAndSelfCollapsed(MarginsCollapse collapseAfter) {\n",
      "        if (prevChildMarginInfo.isSelfCollapsing() && prevChildMarginInfo.isIgnoreOwnMarginTop()) {\n",
      "            // prevChildMarginInfo.isIgnoreOwnMarginTop() is true only if it's the first kid and is adjoined to parent margin\n",
      "            collapseInfo.getCollapseBefore().joinMargin(collapseAfter);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    private void prepareBoxForLayoutAttempt(Rectangle layoutBox, int childIndex, boolean childIsBlockElement) {\n",
      "        if (prevChildMarginInfo != null) {\n",
      "            boolean prevChildHasAppliedCollapseAfter = !prevChildMarginInfo.isIgnoreOwnMarginBottom()\n",
      "                    && (!prevChildMarginInfo.isSelfCollapsing() || !prevChildMarginInfo.isIgnoreOwnMarginTop());\n",
      "            if (prevChildHasAppliedCollapseAfter) {\n",
      "                layoutBox.setHeight(layoutBox.getHeight() + prevChildMarginInfo.getCollapseAfter().getCollapsedMarginsSize());\n",
      "            }\n",
      "\n",
      "            boolean prevChildCanApplyCollapseAfter = !prevChildMarginInfo.isSelfCollapsing() || !prevChildMarginInfo.isIgnoreOwnMarginTop();\n",
      "            if (!childIsBlockElement && prevChildCanApplyCollapseAfter) {\n",
      "                MarginsCollapse ownCollapseAfter = prevChildMarginInfo.getOwnCollapseAfter();\n",
      "                float ownCollapsedMargins = ownCollapseAfter == null ? 0 : ownCollapseAfter.getCollapsedMarginsSize();\n",
      "                layoutBox.setHeight(layoutBox.getHeight() - ownCollapsedMargins);\n",
      "            }\n",
      "        } else if (childIndex > firstNotEmptyKidIndex) {\n",
      "            if (lastChildMarginAdjoinedToParent(renderer)) {\n",
      "                // restore layout box after inline element\n",
      "                // used space shall be always less or equal to collapsedMarginAfter size\n",
      "                float bottomIndent = collapseInfo.getCollapseAfter().getCollapsedMarginsSize() - collapseInfo.getUsedBufferSpaceOnBottom();\n",
      "                collapseInfo.setBufferSpaceOnBottom(collapseInfo.getBufferSpaceOnBottom() + collapseInfo.getUsedBufferSpaceOnBottom());\n",
      "                collapseInfo.setUsedBufferSpaceOnBottom(0);\n",
      "                layoutBox.setY(layoutBox.getY() - bottomIndent);\n",
      "                layoutBox.setHeight(layoutBox.getHeight() + bottomIndent);\n",
      "            }\n",
      "\n",
      "        }\n",
      "\n",
      "        if (!childIsBlockElement) {\n",
      "            if (childIndex == firstNotEmptyKidIndex && firstChildMarginAdjoinedToParent(renderer)) {\n",
      "                float topIndent = collapseInfo.getCollapseBefore().getCollapsedMarginsSize();\n",
      "                applyTopMargin(layoutBox, topIndent);\n",
      "            }\n",
      "\n",
      "            // if not adjoined - bottom margin have been already applied on startMarginsCollapse\n",
      "            if (lastChildMarginAdjoinedToParent(renderer)) {\n",
      "                float bottomIndent = collapseInfo.getCollapseAfter().getCollapsedMarginsSize();\n",
      "                applyBottomMargin(layoutBox, bottomIndent);\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    private void restoreLayoutBoxAfterFailedLayoutAttempt(Rectangle layoutBox) {\n",
      "        layoutBox.setX(backupLayoutBox.getX()).setY(backupLayoutBox.getY())\n",
      "                .setWidth(backupLayoutBox.getWidth()).setHeight(backupLayoutBox.getHeight());\n",
      "        backupCollapseInfo.copyTo(collapseInfo);\n",
      "\n",
      "        backupLayoutBox = null;\n",
      "        backupCollapseInfo = null;\n",
      "    }\n",
      "\n",
      "    private void applyTopMargin(Rectangle box, float topIndent) {\n",
      "        float bufferLeftoversOnTop = collapseInfo.getBufferSpaceOnTop() - topIndent;\n",
      "        float usedTopBuffer = bufferLeftoversOnTop > 0 ? topIndent : collapseInfo.getBufferSpaceOnTop();\n",
      "        collapseInfo.setUsedBufferSpaceOnTop(usedTopBuffer);\n",
      "        subtractUsedTopBufferFromBottomBuffer(usedTopBuffer);\n",
      "\n",
      "        if (bufferLeftoversOnTop >= 0) {\n",
      "            collapseInfo.setBufferSpaceOnTop(bufferLeftoversOnTop);\n",
      "            box.moveDown(topIndent);\n",
      "        } else {\n",
      "            box.moveDown(collapseInfo.getBufferSpaceOnTop());\n",
      "            collapseInfo.setBufferSpaceOnTop(0);\n",
      "            box.setHeight(box.getHeight() + bufferLeftoversOnTop);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    private void applyBottomMargin(Rectangle box, float bottomIndent) {\n",
      "        // Here we don't subtract used buffer space from topBuffer, because every kid is assumed to be\n",
      "        // the last one on the page, and so every kid always has parent's bottom buffer, however only the true last kid\n",
      "        // uses it for real. Also, bottom margin are always applied after top margins, so it doesn't matter anyway.\n",
      "\n",
      "        float bottomIndentLeftovers = bottomIndent - collapseInfo.getBufferSpaceOnBottom();\n",
      "        if (bottomIndentLeftovers < 0) {\n",
      "            collapseInfo.setUsedBufferSpaceOnBottom(bottomIndent);\n",
      "            collapseInfo.setBufferSpaceOnBottom(-bottomIndentLeftovers);\n",
      "        } else {\n",
      "            collapseInfo.setUsedBufferSpaceOnBottom(collapseInfo.getBufferSpaceOnBottom());\n",
      "            collapseInfo.setBufferSpaceOnBottom(0);\n",
      "            box.setY(box.getY() + bottomIndentLeftovers);\n",
      "            box.setHeight(box.getHeight() - bottomIndentLeftovers);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    private void processUsedChildBufferSpaceOnTop(Rectangle layoutBox) {\n",
      "        float childUsedBufferSpaceOnTop = childMarginInfo.getUsedBufferSpaceOnTop();\n",
      "        if (childUsedBufferSpaceOnTop > 0) {\n",
      "            if (childUsedBufferSpaceOnTop > collapseInfo.getBufferSpaceOnTop()) {\n",
      "                childUsedBufferSpaceOnTop = collapseInfo.getBufferSpaceOnTop();\n",
      "            }\n",
      "\n",
      "            collapseInfo.setBufferSpaceOnTop(collapseInfo.getBufferSpaceOnTop() - childUsedBufferSpaceOnTop);\n",
      "            collapseInfo.setUsedBufferSpaceOnTop(childUsedBufferSpaceOnTop);\n",
      "            // usage of top buffer space on child is expressed by moving layout box down instead of making it smaller,\n",
      "            // so in order to process next kids correctly, we need to move parent layout box also\n",
      "            layoutBox.moveDown(childUsedBufferSpaceOnTop);\n",
      "\n",
      "            subtractUsedTopBufferFromBottomBuffer(childUsedBufferSpaceOnTop);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    private void subtractUsedTopBufferFromBottomBuffer(float usedTopBuffer) {\n",
      "        if (collapseInfo.getBufferSpaceOnTop() > collapseInfo.getBufferSpaceOnBottom()) {\n",
      "            float bufferLeftoversOnTop = collapseInfo.getBufferSpaceOnTop() - usedTopBuffer;\n",
      "            if (bufferLeftoversOnTop < collapseInfo.getBufferSpaceOnBottom()) {\n",
      "                collapseInfo.setBufferSpaceOnBottom(bufferLeftoversOnTop);\n",
      "            }\n",
      "        } else {\n",
      "            collapseInfo.setBufferSpaceOnBottom(collapseInfo.getBufferSpaceOnBottom() - usedTopBuffer);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    private void fixPrevChildOccupiedArea(int childIndex) {\n",
      "        IRenderer prevRenderer = getRendererChild(childIndex - 1);\n",
      "\n",
      "        Rectangle bBox = prevRenderer.getOccupiedArea().getBBox();\n",
      "\n",
      "        boolean prevChildHasAppliedCollapseAfter = !prevChildMarginInfo.isIgnoreOwnMarginBottom()\n",
      "                && (!prevChildMarginInfo.isSelfCollapsing() || !prevChildMarginInfo.isIgnoreOwnMarginTop());\n",
      "\n",
      "        if (prevChildHasAppliedCollapseAfter) {\n",
      "            float bottomMargin = prevChildMarginInfo.getCollapseAfter().getCollapsedMarginsSize();\n",
      "            bBox.setHeight(bBox.getHeight() - bottomMargin);\n",
      "            bBox.moveUp(bottomMargin);\n",
      "            ignoreModelBottomMargin(prevRenderer);\n",
      "        }\n",
      "\n",
      "        boolean isNotBlockChild = !isBlockElement(getRendererChild(childIndex));\n",
      "        boolean prevChildCanApplyCollapseAfter = !prevChildMarginInfo.isSelfCollapsing() || !prevChildMarginInfo.isIgnoreOwnMarginTop();\n",
      "        if (isNotBlockChild && prevChildCanApplyCollapseAfter) {\n",
      "            float ownCollapsedMargins = prevChildMarginInfo.getOwnCollapseAfter().getCollapsedMarginsSize();\n",
      "            bBox.setHeight(bBox.getHeight() + ownCollapsedMargins);\n",
      "            bBox.moveDown(ownCollapsedMargins);\n",
      "            overrideModelBottomMargin(prevRenderer, ownCollapsedMargins);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    private void addNotYetAppliedTopMargin(Rectangle layoutBox) {\n",
      "        // normally, space for margins is added when content is met, however if all kids were self-collapsing (i.e.\n",
      "        // had no content) or if there were no kids, we need to add it when no more adjoining margins will be met\n",
      "        float indentTop = collapseInfo.getCollapseBefore().getCollapsedMarginsSize();\n",
      "        renderer.getOccupiedArea().getBBox().moveDown(indentTop);\n",
      "\n",
      "        // Even though all kids have been already drawn, we still need to adjust layout box here\n",
      "        // in order to make it represent the available area for element content (e.g. needed for fixed height elements).\n",
      "        applyTopMargin(layoutBox, indentTop);\n",
      "    }\n",
      "\n",
      "    // Actually, this should be taken into account when layouting a kid and assuming it's the last one on page.\n",
      "    // However it's not feasible, because\n",
      "    // - before kid layout, we don't know if it's self-collapsing or if we have applied clearance to it;\n",
      "    // - this might be very difficult to correctly change kid and parent occupy area, based on if it's\n",
      "    // the last kid on page or not;\n",
      "    // - in the worst case scenario (which is kinda rare) page last kid (self-collapsed and with clearance)\n",
      "    // margin applying would result in margins page overflow, which will not be visible except\n",
      "    // margins would be visually less than expected.\n",
      "    private void applySelfCollapsedKidMarginWithClearance(Rectangle layoutBox) {\n",
      "        // Self-collapsed kid margin with clearance will not be applied to parent top margin\n",
      "        // if parent is not self-collapsing. It's self-collapsing kid, thus we just can\n",
      "        // add this area to occupied area of parent.\n",
      "        float clearedKidMarginWithClearance = prevChildMarginInfo.getOwnCollapseAfter().getCollapsedMarginsSize();\n",
      "        renderer.getOccupiedArea().getBBox().\n",
      "                increaseHeight(clearedKidMarginWithClearance)\n",
      "                .moveDown(clearedKidMarginWithClearance);\n",
      "\n",
      "        layoutBox.decreaseHeight(clearedKidMarginWithClearance);\n",
      "    }\n",
      "\n",
      "    private IRenderer getRendererChild(int index) {\n",
      "        return rendererChildren.get(index);\n",
      "    }\n",
      "\n",
      "    private IRenderer removeRendererChild(int index) {\n",
      "        return rendererChildren.remove(index);\n",
      "    }\n",
      "\n",
      "    private void getRidOfCollapseArtifactsAtopOccupiedArea() {\n",
      "        Rectangle bBox = renderer.getOccupiedArea().getBBox();\n",
      "        bBox.decreaseHeight(collapseInfo.getCollapseBefore().getCollapsedMarginsSize());\n",
      "    }\n",
      "\n",
      "    private static boolean marginsCouldBeSelfCollapsing(IRenderer renderer) {\n",
      "        return !(renderer instanceof TableRenderer)\n",
      "                && !rendererIsFloated(renderer)\n",
      "                && !hasBottomBorders(renderer) && !hasTopBorders(renderer)\n",
      "                && !hasBottomPadding(renderer) && !hasTopPadding(renderer) && !hasPositiveHeight(renderer)\n",
      "                // inline block\n",
      "                && !(isBlockElement(renderer) && renderer instanceof AbstractRenderer && ((AbstractRenderer) renderer).getParent() instanceof LineRenderer);\n",
      "    }\n",
      "\n",
      "    private static boolean firstChildMarginAdjoinedToParent(IRenderer parent) {\n",
      "        return !BlockFormattingContextUtil.isRendererCreateBfc(parent)\n",
      "                && !(parent instanceof TableRenderer)\n",
      "                && !hasTopBorders(parent) && !hasTopPadding(parent);\n",
      "    }\n",
      "\n",
      "    private static boolean lastChildMarginAdjoinedToParent(IRenderer parent) {\n",
      "        return !BlockFormattingContextUtil.isRendererCreateBfc(parent)\n",
      "                && !(parent instanceof TableRenderer)\n",
      "                && !hasBottomBorders(parent) && !hasBottomPadding(parent) && !hasHeightProp(parent);\n",
      "    }\n",
      "\n",
      "    private static boolean isBlockElement(IRenderer renderer) {\n",
      "        return renderer instanceof BlockRenderer || renderer instanceof TableRenderer;\n",
      "    }\n",
      "\n",
      "    private static boolean hasHeightProp(IRenderer renderer) {\n",
      "        // in mozilla and chrome height always prevents margins collapse in all cases.\n",
      "        return renderer.getModelElement().hasProperty(Property.HEIGHT);\n",
      "\n",
      "        // \"min-height\" property affects margins collapse differently in chrome and mozilla. While in chrome, this property\n",
      "        // seems to not have any effect on collapsing margins at all (child margins collapse with parent margins even if\n",
      "        // there is a considerable space between them due to the min-height property on parent), mozilla behaves better\n",
      "        // and collapse happens only in case min-height of parent is less than actual height of the content and therefore\n",
      "        // collapse really should happen. However even in mozilla, if parent has min-height which is a little bigger then\n",
      "        // it's content actual height and margin collapse doesn't happen, in this case the child's margin is not shown fully however.\n",
      "        //\n",
      "        // || styles.containsKey(CssConstants.MIN_HEIGHT)\n",
      "\n",
      "        // \"max-height\" doesn't seem to affect margins collapse in any way at least in chrome.\n",
      "        // In mozilla it affects collapsing when parent's max-height is less than children actual height,\n",
      "        // in this case collapse doesn't happen. However, at the moment in iText we won't show anything at all if\n",
      "        // kid's height is bigger than parent's max-height, therefore this logic is irrelevant now anyway.\n",
      "        //\n",
      "        // || (includingMaxHeight && styles.containsKey(CssConstants.MAX_HEIGHT));\n",
      "    }\n",
      "\n",
      "    private static boolean hasPositiveHeight(IRenderer renderer) {\n",
      "        float height = renderer.getOccupiedArea().getBBox().getHeight();\n",
      "\n",
      "        if (height == 0) {\n",
      "            UnitValue heightPropVal = renderer.<UnitValue>getProperty(Property.HEIGHT);\n",
      "            UnitValue minHeightPropVal = renderer.<UnitValue>getProperty(Property.MIN_HEIGHT);\n",
      "            height = minHeightPropVal != null\n",
      "                    ? (float) minHeightPropVal.getValue()\n",
      "                    : heightPropVal != null ? (float) heightPropVal.getValue() : 0;\n",
      "        }\n",
      "        return height > 0;\n",
      "    }\n",
      "\n",
      "    private static boolean hasTopPadding(IRenderer renderer) {\n",
      "        return MarginsCollapseHandler.hasPadding(renderer, Property.PADDING_TOP);\n",
      "    }\n",
      "\n",
      "    private static boolean hasBottomPadding(IRenderer renderer) {\n",
      "        return MarginsCollapseHandler.hasPadding(renderer, Property.PADDING_BOTTOM);\n",
      "    }\n",
      "\n",
      "    private static boolean hasTopBorders(IRenderer renderer) {\n",
      "        return MarginsCollapseHandler.hasBorders(renderer, Property.BORDER_TOP);\n",
      "    }\n",
      "\n",
      "    private static boolean hasBottomBorders(IRenderer renderer) {\n",
      "        return MarginsCollapseHandler.hasBorders(renderer, Property.BORDER_BOTTOM);\n",
      "    }\n",
      "\n",
      "    private static boolean rendererIsFloated(IRenderer renderer) {\n",
      "        if (renderer == null) {\n",
      "            return false;\n",
      "        }\n",
      "        FloatPropertyValue floatPropertyValue = renderer.<FloatPropertyValue>getProperty(Property.FLOAT);\n",
      "        return floatPropertyValue != null && !floatPropertyValue.equals(FloatPropertyValue.NONE);\n",
      "    }\n",
      "\n",
      "    private static float defineTopMarginValueForCollapse(IRenderer renderer) {\n",
      "        return MarginsCollapseHandler.defineMarginValueForCollapse(renderer, Property.MARGIN_TOP);\n",
      "    }\n",
      "\n",
      "    private static void ignoreModelTopMargin(IRenderer renderer) {\n",
      "        MarginsCollapseHandler.overrideModelTopMargin(renderer, 0f);\n",
      "    }\n",
      "\n",
      "    private static void overrideModelTopMargin(IRenderer renderer, float collapsedMargins) {\n",
      "        MarginsCollapseHandler.overrideModelMargin(renderer, Property.MARGIN_TOP, collapsedMargins);\n",
      "    }\n",
      "\n",
      "    private static float defineBottomMarginValueForCollapse(IRenderer renderer) {\n",
      "        return MarginsCollapseHandler.defineMarginValueForCollapse(renderer, Property.MARGIN_BOTTOM);\n",
      "    }\n",
      "\n",
      "    private static void ignoreModelBottomMargin(IRenderer renderer) {\n",
      "        MarginsCollapseHandler.overrideModelBottomMargin(renderer, 0f);\n",
      "    }\n",
      "\n",
      "    private static void overrideModelBottomMargin(IRenderer renderer, float collapsedMargins) {\n",
      "        MarginsCollapseHandler.overrideModelMargin(renderer, Property.MARGIN_BOTTOM, collapsedMargins);\n",
      "    }\n",
      "\n",
      "    private static float defineMarginValueForCollapse(IRenderer renderer, int property) {\n",
      "        UnitValue marginUV = renderer.getModelElement().<UnitValue>getProperty(property);\n",
      "        if (null != marginUV && !marginUV.isPointValue()) {\n",
      "            Logger logger = LoggerFactory.getLogger(MarginsCollapseHandler.class);\n",
      "            logger.error(MessageFormatUtil.format(IoLogMessageConstant.PROPERTY_IN_PERCENTS_NOT_SUPPORTED,\n",
      "                    property));\n",
      "        }\n",
      "        return marginUV != null && !(renderer instanceof CellRenderer) ? marginUV.getValue() : 0;\n",
      "    }\n",
      "\n",
      "    private static void overrideModelMargin(IRenderer renderer, int property, float collapsedMargins) {\n",
      "        renderer.setProperty(property, UnitValue.createPointValue(collapsedMargins));\n",
      "    }\n",
      "\n",
      "    private static boolean hasPadding(IRenderer renderer, int property) {\n",
      "        UnitValue padding = renderer.getModelElement().<UnitValue>getProperty(property);\n",
      "        if (null != padding && !padding.isPointValue()) {\n",
      "            Logger logger = LoggerFactory.getLogger(MarginsCollapseHandler.class);\n",
      "            logger.error(MessageFormatUtil.format(IoLogMessageConstant.PROPERTY_IN_PERCENTS_NOT_SUPPORTED,\n",
      "                    property));\n",
      "        }\n",
      "        return padding != null && padding.getValue() > 0;\n",
      "    }\n",
      "\n",
      "    private static boolean hasBorders(IRenderer renderer, int property) {\n",
      "        IPropertyContainer modelElement = renderer.getModelElement();\n",
      "        return modelElement.hasProperty(property) || modelElement.hasProperty(Property.BORDER);\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.layout.margincollapse;\n",
      "\n",
      "import com.itextpdf.io.logs.IoLogMessageConstant;\n",
      "import com.itextpdf.kernel.geom.Rectangle;\n",
      "import com.itextpdf.layout.element.Paragraph;\n",
      "import com.itextpdf.layout.properties.Property;\n",
      "import com.itextpdf.layout.properties.UnitValue;\n",
      "import com.itextpdf.layout.renderer.ParagraphRenderer;\n",
      "import com.itextpdf.test.AssertUtil;\n",
      "import com.itextpdf.test.ExtendedITextTest;\n",
      "import com.itextpdf.test.annotations.LogMessage;\n",
      "import com.itextpdf.test.annotations.LogMessages;\n",
      "import com.itextpdf.test.annotations.type.UnitTest;\n",
      "\n",
      "import org.junit.Test;\n",
      "import org.junit.experimental.categories.Category;\n",
      "\n",
      "@Category(UnitTest.class)\n",
      "public class MarginsCollapseHandlerTest extends ExtendedITextTest {\n",
      "\n",
      "    @Test\n",
      "    @LogMessages(messages = {\n",
      "            @LogMessage(messageTemplate = IoLogMessageConstant.PROPERTY_IN_PERCENTS_NOT_SUPPORTED, count = 2)\n",
      "    })\n",
      "    // This test's aim is to test message logging.\n",
      "    public void testDefiningMarginCollapse() {\n",
      "        ParagraphRenderer paragraphRenderer = new ParagraphRenderer(new Paragraph());\n",
      "        Rectangle rectangle = new Rectangle(0f, 0f);\n",
      "        paragraphRenderer.getModelElement().setProperty(Property.MARGIN_TOP, UnitValue.createPercentValue(0f));\n",
      "        paragraphRenderer.getModelElement().setProperty(Property.MARGIN_BOTTOM, UnitValue.createPercentValue(0f));\n",
      "\n",
      "        MarginsCollapseHandler marginsCollapseHandler = new MarginsCollapseHandler(paragraphRenderer, null);\n",
      "        AssertUtil.doesNotThrow(() -> marginsCollapseHandler.startMarginsCollapse(rectangle));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    @LogMessages(messages = {\n",
      "            @LogMessage(messageTemplate = IoLogMessageConstant.PROPERTY_IN_PERCENTS_NOT_SUPPORTED, count = 2)\n",
      "    })\n",
      "    // This test's aim is to test message logging.\n",
      "    public void testHasPadding() {\n",
      "        ParagraphRenderer paragraphRenderer = new ParagraphRenderer(new Paragraph());\n",
      "        Rectangle rectangle = new Rectangle(0f, 0f);\n",
      "        paragraphRenderer.getModelElement().setProperty(Property.PADDING_TOP, UnitValue.createPercentValue(0f));\n",
      "        paragraphRenderer.getModelElement().setProperty(Property.PADDING_BOTTOM, UnitValue.createPercentValue(0f));\n",
      "\n",
      "        MarginsCollapseHandler marginsCollapseHandler = new MarginsCollapseHandler(paragraphRenderer, null);\n",
      "        AssertUtil.doesNotThrow(() -> marginsCollapseHandler.startMarginsCollapse(rectangle));\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "MarginsCollapseHandler::::processFixedHeightAdjustment(float)": [
        74,
        77
      ],
      "MarginsCollapseHandler::::applyClearance(float)": [
        107,
        113
      ],
      "MarginsCollapseHandler::::createMarginsInfoForBlockChild(int)": [
        115,
        142
      ],
      "MarginsCollapseHandler::::updateCollapseBeforeIfPrevKidIsFirstAndSelfCollapsed(com.itextpdf.layout.margincollapse.MarginsCollapse)": [
        280,
        285
      ],
      "MarginsCollapseHandler::::subtractUsedTopBufferFromBottomBuffer(float)": [
        387,
        396
      ],
      "MarginsCollapseHandler::::fixPrevChildOccupiedArea(int)": [
        398,
        421
      ],
      "MarginsCollapseHandler::::getRendererChild(int)": [
        454,
        456
      ],
      "MarginsCollapseHandler::::removeRendererChild(int)": [
        458,
        460
      ],
      "MarginsCollapseHandler::::getRidOfCollapseArtifactsAtopOccupiedArea()": [
        462,
        465
      ],
      "MarginsCollapseHandler::::marginsCouldBeSelfCollapsing(com.itextpdf.layout.renderer.IRenderer)": [
        467,
        474
      ],
      "MarginsCollapseHandler::::firstChildMarginAdjoinedToParent(com.itextpdf.layout.renderer.IRenderer)": [
        476,
        480
      ],
      "MarginsCollapseHandler::::lastChildMarginAdjoinedToParent(com.itextpdf.layout.renderer.IRenderer)": [
        482,
        486
      ],
      "MarginsCollapseHandler::::isBlockElement(com.itextpdf.layout.renderer.IRenderer)": [
        488,
        490
      ],
      "MarginsCollapseHandler::::hasHeightProp(com.itextpdf.layout.renderer.IRenderer)": [
        492,
        511
      ],
      "MarginsCollapseHandler::::hasPositiveHeight(com.itextpdf.layout.renderer.IRenderer)": [
        513,
        524
      ],
      "MarginsCollapseHandler::::hasTopPadding(com.itextpdf.layout.renderer.IRenderer)": [
        526,
        528
      ],
      "MarginsCollapseHandler::::hasBottomPadding(com.itextpdf.layout.renderer.IRenderer)": [
        530,
        532
      ],
      "MarginsCollapseHandler::::hasTopBorders(com.itextpdf.layout.renderer.IRenderer)": [
        534,
        536
      ],
      "MarginsCollapseHandler::::hasBottomBorders(com.itextpdf.layout.renderer.IRenderer)": [
        538,
        540
      ],
      "MarginsCollapseHandler::::rendererIsFloated(com.itextpdf.layout.renderer.IRenderer)": [
        542,
        548
      ],
      "MarginsCollapseHandler::::defineTopMarginValueForCollapse(com.itextpdf.layout.renderer.IRenderer)": [
        550,
        552
      ],
      "MarginsCollapseHandler::::ignoreModelTopMargin(com.itextpdf.layout.renderer.IRenderer)": [
        554,
        556
      ],
      "MarginsCollapseHandler::::overrideModelTopMargin(com.itextpdf.layout.renderer.IRenderer,float)": [
        558,
        560
      ],
      "MarginsCollapseHandler::::defineBottomMarginValueForCollapse(com.itextpdf.layout.renderer.IRenderer)": [
        562,
        564
      ],
      "MarginsCollapseHandler::::ignoreModelBottomMargin(com.itextpdf.layout.renderer.IRenderer)": [
        566,
        568
      ],
      "MarginsCollapseHandler::::overrideModelBottomMargin(com.itextpdf.layout.renderer.IRenderer,float)": [
        570,
        572
      ],
      "MarginsCollapseHandler::::defineMarginValueForCollapse(com.itextpdf.layout.renderer.IRenderer,int)": [
        574,
        582
      ],
      "MarginsCollapseHandler::::overrideModelMargin(com.itextpdf.layout.renderer.IRenderer,int,float)": [
        584,
        586
      ],
      "MarginsCollapseHandler::::hasPadding(com.itextpdf.layout.renderer.IRenderer,int)": [
        588,
        596
      ],
      "MarginsCollapseHandler::::hasBorders(com.itextpdf.layout.renderer.IRenderer,int)": [
        598,
        601
      ]
    },
    "test_method_lines_dic": {
      "MarginsCollapseHandlerTest::::testDefiningMarginCollapse()": [
        43,
        56
      ],
      "MarginsCollapseHandlerTest::::testHasPadding()": [
        58,
        71
      ]
    },
    "reverse_method_lines_dic": {
      "74": "MarginsCollapseHandler::::processFixedHeightAdjustment(float)",
      "75": "MarginsCollapseHandler::::processFixedHeightAdjustment(float)",
      "76": "MarginsCollapseHandler::::processFixedHeightAdjustment(float)",
      "77": "MarginsCollapseHandler::::processFixedHeightAdjustment(float)",
      "107": "MarginsCollapseHandler::::applyClearance(float)",
      "108": "MarginsCollapseHandler::::applyClearance(float)",
      "109": "MarginsCollapseHandler::::applyClearance(float)",
      "110": "MarginsCollapseHandler::::applyClearance(float)",
      "111": "MarginsCollapseHandler::::applyClearance(float)",
      "112": "MarginsCollapseHandler::::applyClearance(float)",
      "113": "MarginsCollapseHandler::::applyClearance(float)",
      "115": "MarginsCollapseHandler::::createMarginsInfoForBlockChild(int)",
      "116": "MarginsCollapseHandler::::createMarginsInfoForBlockChild(int)",
      "117": "MarginsCollapseHandler::::createMarginsInfoForBlockChild(int)",
      "118": "MarginsCollapseHandler::::createMarginsInfoForBlockChild(int)",
      "119": "MarginsCollapseHandler::::createMarginsInfoForBlockChild(int)",
      "120": "MarginsCollapseHandler::::createMarginsInfoForBlockChild(int)",
      "121": "MarginsCollapseHandler::::createMarginsInfoForBlockChild(int)",
      "122": "MarginsCollapseHandler::::createMarginsInfoForBlockChild(int)",
      "123": "MarginsCollapseHandler::::createMarginsInfoForBlockChild(int)",
      "124": "MarginsCollapseHandler::::createMarginsInfoForBlockChild(int)",
      "125": "MarginsCollapseHandler::::createMarginsInfoForBlockChild(int)",
      "126": "MarginsCollapseHandler::::createMarginsInfoForBlockChild(int)",
      "127": "MarginsCollapseHandler::::createMarginsInfoForBlockChild(int)",
      "128": "MarginsCollapseHandler::::createMarginsInfoForBlockChild(int)",
      "129": "MarginsCollapseHandler::::createMarginsInfoForBlockChild(int)",
      "130": "MarginsCollapseHandler::::createMarginsInfoForBlockChild(int)",
      "131": "MarginsCollapseHandler::::createMarginsInfoForBlockChild(int)",
      "132": "MarginsCollapseHandler::::createMarginsInfoForBlockChild(int)",
      "133": "MarginsCollapseHandler::::createMarginsInfoForBlockChild(int)",
      "134": "MarginsCollapseHandler::::createMarginsInfoForBlockChild(int)",
      "135": "MarginsCollapseHandler::::createMarginsInfoForBlockChild(int)",
      "136": "MarginsCollapseHandler::::createMarginsInfoForBlockChild(int)",
      "137": "MarginsCollapseHandler::::createMarginsInfoForBlockChild(int)",
      "138": "MarginsCollapseHandler::::createMarginsInfoForBlockChild(int)",
      "139": "MarginsCollapseHandler::::createMarginsInfoForBlockChild(int)",
      "140": "MarginsCollapseHandler::::createMarginsInfoForBlockChild(int)",
      "141": "MarginsCollapseHandler::::createMarginsInfoForBlockChild(int)",
      "142": "MarginsCollapseHandler::::createMarginsInfoForBlockChild(int)",
      "280": "MarginsCollapseHandler::::updateCollapseBeforeIfPrevKidIsFirstAndSelfCollapsed(com.itextpdf.layout.margincollapse.MarginsCollapse)",
      "281": "MarginsCollapseHandler::::updateCollapseBeforeIfPrevKidIsFirstAndSelfCollapsed(com.itextpdf.layout.margincollapse.MarginsCollapse)",
      "282": "MarginsCollapseHandler::::updateCollapseBeforeIfPrevKidIsFirstAndSelfCollapsed(com.itextpdf.layout.margincollapse.MarginsCollapse)",
      "283": "MarginsCollapseHandler::::updateCollapseBeforeIfPrevKidIsFirstAndSelfCollapsed(com.itextpdf.layout.margincollapse.MarginsCollapse)",
      "284": "MarginsCollapseHandler::::updateCollapseBeforeIfPrevKidIsFirstAndSelfCollapsed(com.itextpdf.layout.margincollapse.MarginsCollapse)",
      "285": "MarginsCollapseHandler::::updateCollapseBeforeIfPrevKidIsFirstAndSelfCollapsed(com.itextpdf.layout.margincollapse.MarginsCollapse)",
      "387": "MarginsCollapseHandler::::subtractUsedTopBufferFromBottomBuffer(float)",
      "388": "MarginsCollapseHandler::::subtractUsedTopBufferFromBottomBuffer(float)",
      "389": "MarginsCollapseHandler::::subtractUsedTopBufferFromBottomBuffer(float)",
      "390": "MarginsCollapseHandler::::subtractUsedTopBufferFromBottomBuffer(float)",
      "391": "MarginsCollapseHandler::::subtractUsedTopBufferFromBottomBuffer(float)",
      "392": "MarginsCollapseHandler::::subtractUsedTopBufferFromBottomBuffer(float)",
      "393": "MarginsCollapseHandler::::subtractUsedTopBufferFromBottomBuffer(float)",
      "394": "MarginsCollapseHandler::::subtractUsedTopBufferFromBottomBuffer(float)",
      "395": "MarginsCollapseHandler::::subtractUsedTopBufferFromBottomBuffer(float)",
      "396": "MarginsCollapseHandler::::subtractUsedTopBufferFromBottomBuffer(float)",
      "398": "MarginsCollapseHandler::::fixPrevChildOccupiedArea(int)",
      "399": "MarginsCollapseHandler::::fixPrevChildOccupiedArea(int)",
      "400": "MarginsCollapseHandler::::fixPrevChildOccupiedArea(int)",
      "401": "MarginsCollapseHandler::::fixPrevChildOccupiedArea(int)",
      "402": "MarginsCollapseHandler::::fixPrevChildOccupiedArea(int)",
      "403": "MarginsCollapseHandler::::fixPrevChildOccupiedArea(int)",
      "404": "MarginsCollapseHandler::::fixPrevChildOccupiedArea(int)",
      "405": "MarginsCollapseHandler::::fixPrevChildOccupiedArea(int)",
      "406": "MarginsCollapseHandler::::fixPrevChildOccupiedArea(int)",
      "407": "MarginsCollapseHandler::::fixPrevChildOccupiedArea(int)",
      "408": "MarginsCollapseHandler::::fixPrevChildOccupiedArea(int)",
      "409": "MarginsCollapseHandler::::fixPrevChildOccupiedArea(int)",
      "410": "MarginsCollapseHandler::::fixPrevChildOccupiedArea(int)",
      "411": "MarginsCollapseHandler::::fixPrevChildOccupiedArea(int)",
      "412": "MarginsCollapseHandler::::fixPrevChildOccupiedArea(int)",
      "413": "MarginsCollapseHandler::::fixPrevChildOccupiedArea(int)",
      "414": "MarginsCollapseHandler::::fixPrevChildOccupiedArea(int)",
      "415": "MarginsCollapseHandler::::fixPrevChildOccupiedArea(int)",
      "416": "MarginsCollapseHandler::::fixPrevChildOccupiedArea(int)",
      "417": "MarginsCollapseHandler::::fixPrevChildOccupiedArea(int)",
      "418": "MarginsCollapseHandler::::fixPrevChildOccupiedArea(int)",
      "419": "MarginsCollapseHandler::::fixPrevChildOccupiedArea(int)",
      "420": "MarginsCollapseHandler::::fixPrevChildOccupiedArea(int)",
      "421": "MarginsCollapseHandler::::fixPrevChildOccupiedArea(int)",
      "454": "MarginsCollapseHandler::::getRendererChild(int)",
      "455": "MarginsCollapseHandler::::getRendererChild(int)",
      "456": "MarginsCollapseHandler::::getRendererChild(int)",
      "458": "MarginsCollapseHandler::::removeRendererChild(int)",
      "459": "MarginsCollapseHandler::::removeRendererChild(int)",
      "460": "MarginsCollapseHandler::::removeRendererChild(int)",
      "462": "MarginsCollapseHandler::::getRidOfCollapseArtifactsAtopOccupiedArea()",
      "463": "MarginsCollapseHandler::::getRidOfCollapseArtifactsAtopOccupiedArea()",
      "464": "MarginsCollapseHandler::::getRidOfCollapseArtifactsAtopOccupiedArea()",
      "465": "MarginsCollapseHandler::::getRidOfCollapseArtifactsAtopOccupiedArea()",
      "467": "MarginsCollapseHandler::::marginsCouldBeSelfCollapsing(com.itextpdf.layout.renderer.IRenderer)",
      "468": "MarginsCollapseHandler::::marginsCouldBeSelfCollapsing(com.itextpdf.layout.renderer.IRenderer)",
      "469": "MarginsCollapseHandler::::marginsCouldBeSelfCollapsing(com.itextpdf.layout.renderer.IRenderer)",
      "470": "MarginsCollapseHandler::::marginsCouldBeSelfCollapsing(com.itextpdf.layout.renderer.IRenderer)",
      "471": "MarginsCollapseHandler::::marginsCouldBeSelfCollapsing(com.itextpdf.layout.renderer.IRenderer)",
      "472": "MarginsCollapseHandler::::marginsCouldBeSelfCollapsing(com.itextpdf.layout.renderer.IRenderer)",
      "473": "MarginsCollapseHandler::::marginsCouldBeSelfCollapsing(com.itextpdf.layout.renderer.IRenderer)",
      "474": "MarginsCollapseHandler::::marginsCouldBeSelfCollapsing(com.itextpdf.layout.renderer.IRenderer)",
      "476": "MarginsCollapseHandler::::firstChildMarginAdjoinedToParent(com.itextpdf.layout.renderer.IRenderer)",
      "477": "MarginsCollapseHandler::::firstChildMarginAdjoinedToParent(com.itextpdf.layout.renderer.IRenderer)",
      "478": "MarginsCollapseHandler::::firstChildMarginAdjoinedToParent(com.itextpdf.layout.renderer.IRenderer)",
      "479": "MarginsCollapseHandler::::firstChildMarginAdjoinedToParent(com.itextpdf.layout.renderer.IRenderer)",
      "480": "MarginsCollapseHandler::::firstChildMarginAdjoinedToParent(com.itextpdf.layout.renderer.IRenderer)",
      "482": "MarginsCollapseHandler::::lastChildMarginAdjoinedToParent(com.itextpdf.layout.renderer.IRenderer)",
      "483": "MarginsCollapseHandler::::lastChildMarginAdjoinedToParent(com.itextpdf.layout.renderer.IRenderer)",
      "484": "MarginsCollapseHandler::::lastChildMarginAdjoinedToParent(com.itextpdf.layout.renderer.IRenderer)",
      "485": "MarginsCollapseHandler::::lastChildMarginAdjoinedToParent(com.itextpdf.layout.renderer.IRenderer)",
      "486": "MarginsCollapseHandler::::lastChildMarginAdjoinedToParent(com.itextpdf.layout.renderer.IRenderer)",
      "488": "MarginsCollapseHandler::::isBlockElement(com.itextpdf.layout.renderer.IRenderer)",
      "489": "MarginsCollapseHandler::::isBlockElement(com.itextpdf.layout.renderer.IRenderer)",
      "490": "MarginsCollapseHandler::::isBlockElement(com.itextpdf.layout.renderer.IRenderer)",
      "492": "MarginsCollapseHandler::::hasHeightProp(com.itextpdf.layout.renderer.IRenderer)",
      "493": "MarginsCollapseHandler::::hasHeightProp(com.itextpdf.layout.renderer.IRenderer)",
      "494": "MarginsCollapseHandler::::hasHeightProp(com.itextpdf.layout.renderer.IRenderer)",
      "495": "MarginsCollapseHandler::::hasHeightProp(com.itextpdf.layout.renderer.IRenderer)",
      "496": "MarginsCollapseHandler::::hasHeightProp(com.itextpdf.layout.renderer.IRenderer)",
      "497": "MarginsCollapseHandler::::hasHeightProp(com.itextpdf.layout.renderer.IRenderer)",
      "498": "MarginsCollapseHandler::::hasHeightProp(com.itextpdf.layout.renderer.IRenderer)",
      "499": "MarginsCollapseHandler::::hasHeightProp(com.itextpdf.layout.renderer.IRenderer)",
      "500": "MarginsCollapseHandler::::hasHeightProp(com.itextpdf.layout.renderer.IRenderer)",
      "501": "MarginsCollapseHandler::::hasHeightProp(com.itextpdf.layout.renderer.IRenderer)",
      "502": "MarginsCollapseHandler::::hasHeightProp(com.itextpdf.layout.renderer.IRenderer)",
      "503": "MarginsCollapseHandler::::hasHeightProp(com.itextpdf.layout.renderer.IRenderer)",
      "504": "MarginsCollapseHandler::::hasHeightProp(com.itextpdf.layout.renderer.IRenderer)",
      "505": "MarginsCollapseHandler::::hasHeightProp(com.itextpdf.layout.renderer.IRenderer)",
      "506": "MarginsCollapseHandler::::hasHeightProp(com.itextpdf.layout.renderer.IRenderer)",
      "507": "MarginsCollapseHandler::::hasHeightProp(com.itextpdf.layout.renderer.IRenderer)",
      "508": "MarginsCollapseHandler::::hasHeightProp(com.itextpdf.layout.renderer.IRenderer)",
      "509": "MarginsCollapseHandler::::hasHeightProp(com.itextpdf.layout.renderer.IRenderer)",
      "510": "MarginsCollapseHandler::::hasHeightProp(com.itextpdf.layout.renderer.IRenderer)",
      "511": "MarginsCollapseHandler::::hasHeightProp(com.itextpdf.layout.renderer.IRenderer)",
      "513": "MarginsCollapseHandler::::hasPositiveHeight(com.itextpdf.layout.renderer.IRenderer)",
      "514": "MarginsCollapseHandler::::hasPositiveHeight(com.itextpdf.layout.renderer.IRenderer)",
      "515": "MarginsCollapseHandler::::hasPositiveHeight(com.itextpdf.layout.renderer.IRenderer)",
      "516": "MarginsCollapseHandler::::hasPositiveHeight(com.itextpdf.layout.renderer.IRenderer)",
      "517": "MarginsCollapseHandler::::hasPositiveHeight(com.itextpdf.layout.renderer.IRenderer)",
      "518": "MarginsCollapseHandler::::hasPositiveHeight(com.itextpdf.layout.renderer.IRenderer)",
      "519": "MarginsCollapseHandler::::hasPositiveHeight(com.itextpdf.layout.renderer.IRenderer)",
      "520": "MarginsCollapseHandler::::hasPositiveHeight(com.itextpdf.layout.renderer.IRenderer)",
      "521": "MarginsCollapseHandler::::hasPositiveHeight(com.itextpdf.layout.renderer.IRenderer)",
      "522": "MarginsCollapseHandler::::hasPositiveHeight(com.itextpdf.layout.renderer.IRenderer)",
      "523": "MarginsCollapseHandler::::hasPositiveHeight(com.itextpdf.layout.renderer.IRenderer)",
      "524": "MarginsCollapseHandler::::hasPositiveHeight(com.itextpdf.layout.renderer.IRenderer)",
      "526": "MarginsCollapseHandler::::hasTopPadding(com.itextpdf.layout.renderer.IRenderer)",
      "527": "MarginsCollapseHandler::::hasTopPadding(com.itextpdf.layout.renderer.IRenderer)",
      "528": "MarginsCollapseHandler::::hasTopPadding(com.itextpdf.layout.renderer.IRenderer)",
      "530": "MarginsCollapseHandler::::hasBottomPadding(com.itextpdf.layout.renderer.IRenderer)",
      "531": "MarginsCollapseHandler::::hasBottomPadding(com.itextpdf.layout.renderer.IRenderer)",
      "532": "MarginsCollapseHandler::::hasBottomPadding(com.itextpdf.layout.renderer.IRenderer)",
      "534": "MarginsCollapseHandler::::hasTopBorders(com.itextpdf.layout.renderer.IRenderer)",
      "535": "MarginsCollapseHandler::::hasTopBorders(com.itextpdf.layout.renderer.IRenderer)",
      "536": "MarginsCollapseHandler::::hasTopBorders(com.itextpdf.layout.renderer.IRenderer)",
      "538": "MarginsCollapseHandler::::hasBottomBorders(com.itextpdf.layout.renderer.IRenderer)",
      "539": "MarginsCollapseHandler::::hasBottomBorders(com.itextpdf.layout.renderer.IRenderer)",
      "540": "MarginsCollapseHandler::::hasBottomBorders(com.itextpdf.layout.renderer.IRenderer)",
      "542": "MarginsCollapseHandler::::rendererIsFloated(com.itextpdf.layout.renderer.IRenderer)",
      "543": "MarginsCollapseHandler::::rendererIsFloated(com.itextpdf.layout.renderer.IRenderer)",
      "544": "MarginsCollapseHandler::::rendererIsFloated(com.itextpdf.layout.renderer.IRenderer)",
      "545": "MarginsCollapseHandler::::rendererIsFloated(com.itextpdf.layout.renderer.IRenderer)",
      "546": "MarginsCollapseHandler::::rendererIsFloated(com.itextpdf.layout.renderer.IRenderer)",
      "547": "MarginsCollapseHandler::::rendererIsFloated(com.itextpdf.layout.renderer.IRenderer)",
      "548": "MarginsCollapseHandler::::rendererIsFloated(com.itextpdf.layout.renderer.IRenderer)",
      "550": "MarginsCollapseHandler::::defineTopMarginValueForCollapse(com.itextpdf.layout.renderer.IRenderer)",
      "551": "MarginsCollapseHandler::::defineTopMarginValueForCollapse(com.itextpdf.layout.renderer.IRenderer)",
      "552": "MarginsCollapseHandler::::defineTopMarginValueForCollapse(com.itextpdf.layout.renderer.IRenderer)",
      "554": "MarginsCollapseHandler::::ignoreModelTopMargin(com.itextpdf.layout.renderer.IRenderer)",
      "555": "MarginsCollapseHandler::::ignoreModelTopMargin(com.itextpdf.layout.renderer.IRenderer)",
      "556": "MarginsCollapseHandler::::ignoreModelTopMargin(com.itextpdf.layout.renderer.IRenderer)",
      "558": "MarginsCollapseHandler::::overrideModelTopMargin(com.itextpdf.layout.renderer.IRenderer,float)",
      "559": "MarginsCollapseHandler::::overrideModelTopMargin(com.itextpdf.layout.renderer.IRenderer,float)",
      "560": "MarginsCollapseHandler::::overrideModelTopMargin(com.itextpdf.layout.renderer.IRenderer,float)",
      "562": "MarginsCollapseHandler::::defineBottomMarginValueForCollapse(com.itextpdf.layout.renderer.IRenderer)",
      "563": "MarginsCollapseHandler::::defineBottomMarginValueForCollapse(com.itextpdf.layout.renderer.IRenderer)",
      "564": "MarginsCollapseHandler::::defineBottomMarginValueForCollapse(com.itextpdf.layout.renderer.IRenderer)",
      "566": "MarginsCollapseHandler::::ignoreModelBottomMargin(com.itextpdf.layout.renderer.IRenderer)",
      "567": "MarginsCollapseHandler::::ignoreModelBottomMargin(com.itextpdf.layout.renderer.IRenderer)",
      "568": "MarginsCollapseHandler::::ignoreModelBottomMargin(com.itextpdf.layout.renderer.IRenderer)",
      "570": "MarginsCollapseHandler::::overrideModelBottomMargin(com.itextpdf.layout.renderer.IRenderer,float)",
      "571": "MarginsCollapseHandler::::overrideModelBottomMargin(com.itextpdf.layout.renderer.IRenderer,float)",
      "572": "MarginsCollapseHandler::::overrideModelBottomMargin(com.itextpdf.layout.renderer.IRenderer,float)",
      "574": "MarginsCollapseHandler::::defineMarginValueForCollapse(com.itextpdf.layout.renderer.IRenderer,int)",
      "575": "MarginsCollapseHandler::::defineMarginValueForCollapse(com.itextpdf.layout.renderer.IRenderer,int)",
      "576": "MarginsCollapseHandler::::defineMarginValueForCollapse(com.itextpdf.layout.renderer.IRenderer,int)",
      "577": "MarginsCollapseHandler::::defineMarginValueForCollapse(com.itextpdf.layout.renderer.IRenderer,int)",
      "578": "MarginsCollapseHandler::::defineMarginValueForCollapse(com.itextpdf.layout.renderer.IRenderer,int)",
      "579": "MarginsCollapseHandler::::defineMarginValueForCollapse(com.itextpdf.layout.renderer.IRenderer,int)",
      "580": "MarginsCollapseHandler::::defineMarginValueForCollapse(com.itextpdf.layout.renderer.IRenderer,int)",
      "581": "MarginsCollapseHandler::::defineMarginValueForCollapse(com.itextpdf.layout.renderer.IRenderer,int)",
      "582": "MarginsCollapseHandler::::defineMarginValueForCollapse(com.itextpdf.layout.renderer.IRenderer,int)",
      "584": "MarginsCollapseHandler::::overrideModelMargin(com.itextpdf.layout.renderer.IRenderer,int,float)",
      "585": "MarginsCollapseHandler::::overrideModelMargin(com.itextpdf.layout.renderer.IRenderer,int,float)",
      "586": "MarginsCollapseHandler::::overrideModelMargin(com.itextpdf.layout.renderer.IRenderer,int,float)",
      "588": "MarginsCollapseHandler::::hasPadding(com.itextpdf.layout.renderer.IRenderer,int)",
      "589": "MarginsCollapseHandler::::hasPadding(com.itextpdf.layout.renderer.IRenderer,int)",
      "590": "MarginsCollapseHandler::::hasPadding(com.itextpdf.layout.renderer.IRenderer,int)",
      "591": "MarginsCollapseHandler::::hasPadding(com.itextpdf.layout.renderer.IRenderer,int)",
      "592": "MarginsCollapseHandler::::hasPadding(com.itextpdf.layout.renderer.IRenderer,int)",
      "593": "MarginsCollapseHandler::::hasPadding(com.itextpdf.layout.renderer.IRenderer,int)",
      "594": "MarginsCollapseHandler::::hasPadding(com.itextpdf.layout.renderer.IRenderer,int)",
      "595": "MarginsCollapseHandler::::hasPadding(com.itextpdf.layout.renderer.IRenderer,int)",
      "596": "MarginsCollapseHandler::::hasPadding(com.itextpdf.layout.renderer.IRenderer,int)",
      "598": "MarginsCollapseHandler::::hasBorders(com.itextpdf.layout.renderer.IRenderer,int)",
      "599": "MarginsCollapseHandler::::hasBorders(com.itextpdf.layout.renderer.IRenderer,int)",
      "600": "MarginsCollapseHandler::::hasBorders(com.itextpdf.layout.renderer.IRenderer,int)",
      "601": "MarginsCollapseHandler::::hasBorders(com.itextpdf.layout.renderer.IRenderer,int)"
    },
    "test_reverse_method_lines_dic": {
      "43": "MarginsCollapseHandlerTest::::testDefiningMarginCollapse()",
      "44": "MarginsCollapseHandlerTest::::testDefiningMarginCollapse()",
      "45": "MarginsCollapseHandlerTest::::testDefiningMarginCollapse()",
      "46": "MarginsCollapseHandlerTest::::testDefiningMarginCollapse()",
      "47": "MarginsCollapseHandlerTest::::testDefiningMarginCollapse()",
      "48": "MarginsCollapseHandlerTest::::testDefiningMarginCollapse()",
      "49": "MarginsCollapseHandlerTest::::testDefiningMarginCollapse()",
      "50": "MarginsCollapseHandlerTest::::testDefiningMarginCollapse()",
      "51": "MarginsCollapseHandlerTest::::testDefiningMarginCollapse()",
      "52": "MarginsCollapseHandlerTest::::testDefiningMarginCollapse()",
      "53": "MarginsCollapseHandlerTest::::testDefiningMarginCollapse()",
      "54": "MarginsCollapseHandlerTest::::testDefiningMarginCollapse()",
      "55": "MarginsCollapseHandlerTest::::testDefiningMarginCollapse()",
      "56": "MarginsCollapseHandlerTest::::testDefiningMarginCollapse()",
      "58": "MarginsCollapseHandlerTest::::testHasPadding()",
      "59": "MarginsCollapseHandlerTest::::testHasPadding()",
      "60": "MarginsCollapseHandlerTest::::testHasPadding()",
      "61": "MarginsCollapseHandlerTest::::testHasPadding()",
      "62": "MarginsCollapseHandlerTest::::testHasPadding()",
      "63": "MarginsCollapseHandlerTest::::testHasPadding()",
      "64": "MarginsCollapseHandlerTest::::testHasPadding()",
      "65": "MarginsCollapseHandlerTest::::testHasPadding()",
      "66": "MarginsCollapseHandlerTest::::testHasPadding()",
      "67": "MarginsCollapseHandlerTest::::testHasPadding()",
      "68": "MarginsCollapseHandlerTest::::testHasPadding()",
      "69": "MarginsCollapseHandlerTest::::testHasPadding()",
      "70": "MarginsCollapseHandlerTest::::testHasPadding()",
      "71": "MarginsCollapseHandlerTest::::testHasPadding()"
    },
    "tests": [
      {
        "test_lines": [
          43,
          56
        ],
        "covered_lines": [
          57,
          59,
          60,
          69,
          70,
          71,
          72,
          190,
          191,
          193,
          197,
          203,
          204,
          205,
          477,
          479,
          483,
          485,
          494,
          527,
          531,
          535,
          539,
          551,
          555,
          556,
          559,
          560,
          563,
          567,
          568,
          571,
          572,
          575,
          576,
          577,
          578,
          579,
          581,
          585,
          586,
          589,
          590,
          595,
          599,
          600
        ]
      },
      {
        "test_lines": [
          58,
          71
        ],
        "covered_lines": [
          57,
          59,
          60,
          69,
          70,
          71,
          72,
          190,
          191,
          193,
          197,
          203,
          204,
          205,
          477,
          479,
          483,
          485,
          494,
          527,
          531,
          535,
          539,
          551,
          555,
          556,
          559,
          560,
          563,
          567,
          568,
          571,
          572,
          575,
          576,
          581,
          585,
          586,
          589,
          590,
          591,
          592,
          593,
          595,
          599,
          600
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/itext-java/layout/src/main/java/com/itextpdf/layout/renderer/FlexUtil.java": {
    "class_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.layout.renderer;\n",
      "\n",
      "import com.itextpdf.io.logs.IoLogMessageConstant;\n",
      "import com.itextpdf.kernel.geom.Rectangle;\n",
      "import com.itextpdf.layout.exceptions.LayoutExceptionMessageConstant;\n",
      "import com.itextpdf.layout.layout.LayoutArea;\n",
      "import com.itextpdf.layout.layout.LayoutContext;\n",
      "import com.itextpdf.layout.layout.LayoutResult;\n",
      "import com.itextpdf.layout.minmaxwidth.MinMaxWidth;\n",
      "import com.itextpdf.layout.properties.AlignmentPropertyValue;\n",
      "import com.itextpdf.layout.properties.FlexDirectionPropertyValue;\n",
      "import com.itextpdf.layout.properties.FlexWrapPropertyValue;\n",
      "import com.itextpdf.layout.properties.InlineVerticalAlignmentType;\n",
      "import com.itextpdf.layout.properties.JustifyContent;\n",
      "import com.itextpdf.layout.properties.Property;\n",
      "import com.itextpdf.layout.properties.UnitValue;\n",
      "\n",
      "import java.util.Collections;\n",
      "\n",
      "import org.slf4j.Logger;\n",
      "import org.slf4j.LoggerFactory;\n",
      "\n",
      "import java.util.ArrayList;\n",
      "import java.util.List;\n",
      "\n",
      "final class FlexUtil {\n",
      "\n",
      "    private static final float EPSILON = 0.0001F;\n",
      "\n",
      "    private static final float FLEX_GROW_INITIAL_VALUE = 0F;\n",
      "\n",
      "    private static final float FLEX_SHRINK_INITIAL_VALUE = 1F;\n",
      "\n",
      "    private static final Logger logger = LoggerFactory.getLogger(FlexUtil.class);\n",
      "\n",
      "    private FlexUtil() {\n",
      "        // Do nothing\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Performs flex layout algorithm.\n",
      "     *\n",
      "     * <p>\n",
      "     * The algorithm could be found here:\n",
      "     * {@see https://www.w3.org/TR/css-flexbox-1/#layout-algorithm}\n",
      "     *\n",
      "     * @param flexContainerBBox     bounding box in which flex container should be rendered\n",
      "     * @param flexContainerRenderer flex container's renderer\n",
      "     * @return list of lines\n",
      "     */\n",
      "    public static List<List<FlexItemInfo>> calculateChildrenRectangles(Rectangle flexContainerBBox,\n",
      "                                                                       FlexContainerRenderer flexContainerRenderer) {\n",
      "        Rectangle layoutBox = flexContainerBBox.clone();\n",
      "        flexContainerRenderer.applyMarginsBordersPaddings(layoutBox, false);\n",
      "\n",
      "        // 9.2. Line Length Determination\n",
      "\n",
      "        // 2. Determine the available main and cross space for the flex items.\n",
      "\n",
      "        // TODO DEVSIX-5001 min-content and max-content as width are not supported\n",
      "        // if that dimension of the flex container is being sized under a min or max-content constraint,\n",
      "        // the available space in that dimension is that constraint;\n",
      "\n",
      "        final float mainSize = getMainSize(flexContainerRenderer, layoutBox);\n",
      "\n",
      "        // We need to have crossSize only if its value is definite.\n",
      "        Float[] crossSizes = getCrossSizes(flexContainerRenderer, layoutBox);\n",
      "        Float crossSize = crossSizes[0];\n",
      "        Float minCrossSize = crossSizes[1];\n",
      "        Float maxCrossSize = crossSizes[2];\n",
      "\n",
      "        float layoutBoxCrossSize = isColumnDirection(flexContainerRenderer) ?\n",
      "                layoutBox.getWidth() : layoutBox.getHeight();\n",
      "        layoutBoxCrossSize = crossSize == null ? layoutBoxCrossSize : Math.min((float) crossSize, layoutBoxCrossSize);\n",
      "        List<FlexItemCalculationInfo> flexItemCalculationInfos =\n",
      "                createFlexItemCalculationInfos(flexContainerRenderer, mainSize, layoutBoxCrossSize);\n",
      "\n",
      "        determineFlexBasisAndHypotheticalMainSizeForFlexItems(flexItemCalculationInfos, layoutBoxCrossSize,\n",
      "                isColumnDirection(flexContainerRenderer));\n",
      "\n",
      "        // 9.3. Main Size Determination\n",
      "\n",
      "        // 5. Collect flex items into flex lines:\n",
      "        final boolean isSingleLine = !flexContainerRenderer.hasProperty(Property.FLEX_WRAP)\n",
      "                || FlexWrapPropertyValue.NOWRAP == flexContainerRenderer.<FlexWrapPropertyValue>getProperty(\n",
      "                Property.FLEX_WRAP);\n",
      "\n",
      "        List<List<FlexItemCalculationInfo>> lines =\n",
      "                collectFlexItemsIntoFlexLines(flexItemCalculationInfos, isColumnDirection(flexContainerRenderer) ?\n",
      "                        Math.min(mainSize, layoutBox.getHeight()) : mainSize, isSingleLine);\n",
      "\n",
      "        // 6. Resolve the flexible lengths of all the flex items to find their used main size.\n",
      "        // See \u00a79.7 Resolving Flexible Lengths.\n",
      "\n",
      "        // 9.7. Resolving Flexible Lengths\n",
      "        // First, calculate max line size. For column container it should be the default size if width is not set.\n",
      "        // For row container it is not used currently.\n",
      "        float maxHypotheticalMainSize = 0;\n",
      "        for (List<FlexItemCalculationInfo> line : lines) {\n",
      "            float hypotheticalMainSizesSum = 0;\n",
      "            for (FlexItemCalculationInfo info : line) {\n",
      "                hypotheticalMainSizesSum += info.getOuterMainSize(info.hypotheticalMainSize);\n",
      "            }\n",
      "            maxHypotheticalMainSize = Math.max(maxHypotheticalMainSize, hypotheticalMainSizesSum);\n",
      "        }\n",
      "        final float containerMainSize = getMainSize(flexContainerRenderer,\n",
      "                new Rectangle(isColumnDirection(flexContainerRenderer) ? 0 : maxHypotheticalMainSize,\n",
      "                        isColumnDirection(flexContainerRenderer) ? maxHypotheticalMainSize : 0));\n",
      "        if (isColumnDirection(flexContainerRenderer)) {\n",
      "            resolveFlexibleLengths(lines, layoutBox.getHeight(), containerMainSize);\n",
      "        } else {\n",
      "            resolveFlexibleLengths(lines, mainSize);\n",
      "        }\n",
      "\n",
      "        // 9.4. Cross Size Determination\n",
      "\n",
      "        // 7. Determine the hypothetical cross size of each item by\n",
      "        // performing layout with the used main size and the available space, treating auto as fit-content.\n",
      "        determineHypotheticalCrossSizeForFlexItems(lines, isColumnDirection(flexContainerRenderer), layoutBoxCrossSize);\n",
      "\n",
      "        // 8. Calculate the cross size of each flex line.\n",
      "        List<Float> lineCrossSizes = calculateCrossSizeOfEachFlexLine(lines, minCrossSize, crossSize, maxCrossSize);\n",
      "\n",
      "        // If the flex container is single-line, then clamp the line\u2019s cross-size to be within\n",
      "        // the container\u2019s computed min and max cross sizes. Note that if CSS 2.1\u2019s definition of min/max-width/height\n",
      "        // applied more generally, this behavior would fall out automatically.\n",
      "\n",
      "        // 9. Handle 'align-content: stretch'.\n",
      "        Float currentCrossSize = isColumnDirection(flexContainerRenderer) ? new Float(layoutBoxCrossSize) : crossSize;\n",
      "        handleAlignContentStretch(flexContainerRenderer, lines, currentCrossSize, lineCrossSizes, layoutBox);\n",
      "\n",
      "        // TODO DEVSIX-2090 visibility-collapse items are not supported\n",
      "        // 10. Collapse visibility:collapse items.\n",
      "\n",
      "        // 11. Determine the used cross size of each flex item.\n",
      "        determineUsedCrossSizeOfEachFlexItem(lines, lineCrossSizes, flexContainerRenderer);\n",
      "\n",
      "        // 9.5. Main-Axis Alignment\n",
      "        // 12. Align the items along the main-axis per justify-content.\n",
      "        applyJustifyContent(lines, flexContainerRenderer, isColumnDirection(flexContainerRenderer) ?\n",
      "                layoutBox.getHeight() : mainSize, containerMainSize);\n",
      "\n",
      "        // 9.6. Cross-Axis Alignment\n",
      "\n",
      "        // TODO DEVSIX-5002 margin: auto is not supported\n",
      "        // 13. Resolve cross-axis auto margins\n",
      "\n",
      "        // 14. Align all flex items along the cross-axis\n",
      "        applyAlignItemsAndAlignSelf(lines, flexContainerRenderer, lineCrossSizes);\n",
      "\n",
      "        // 15. Determine the flex container\u2019s used cross size\n",
      "\n",
      "        // TODO DEVSIX-5164 16. Align all flex lines per align-content.\n",
      "\n",
      "        // Convert FlexItemCalculationInfo's into FlexItemInfo's\n",
      "        List<List<FlexItemInfo>> layoutTable = new ArrayList<>();\n",
      "        for (List<FlexItemCalculationInfo> line : lines) {\n",
      "            List<FlexItemInfo> layoutLine = new ArrayList<>();\n",
      "            for (FlexItemCalculationInfo info : line) {\n",
      "                layoutLine.add(new FlexItemInfo(info.renderer, info.toRectangle()));\n",
      "            }\n",
      "            layoutTable.add(layoutLine);\n",
      "        }\n",
      "\n",
      "        return layoutTable;\n",
      "    }\n",
      "\n",
      "    static boolean isColumnDirection(FlexContainerRenderer renderer) {\n",
      "        FlexDirectionPropertyValue flexDir = (FlexDirectionPropertyValue) renderer.\n",
      "                <FlexDirectionPropertyValue>getProperty(Property.FLEX_DIRECTION, FlexDirectionPropertyValue.ROW);\n",
      "        return FlexDirectionPropertyValue.COLUMN == flexDir || FlexDirectionPropertyValue.COLUMN_REVERSE == flexDir;\n",
      "    }\n",
      "\n",
      "    static float getMainSize(FlexContainerRenderer renderer, Rectangle layoutBox) {\n",
      "        final boolean isColumnDirection = isColumnDirection(renderer);\n",
      "\n",
      "        float layoutBoxMainSize;\n",
      "        Float mainSize;\n",
      "\n",
      "        Float maxDimension = null;\n",
      "        Float minDimension = null;\n",
      "        if (isColumnDirection) {\n",
      "            layoutBoxMainSize = layoutBox.getHeight();\n",
      "            mainSize = renderer.retrieveHeight();\n",
      "            maxDimension = resolveUnitValue(renderer, Property.MAX_HEIGHT, layoutBoxMainSize);\n",
      "            minDimension = resolveUnitValue(renderer, Property.MIN_HEIGHT, layoutBoxMainSize);\n",
      "        } else {\n",
      "            layoutBoxMainSize = layoutBox.getWidth();\n",
      "            mainSize = renderer.retrieveWidth(layoutBoxMainSize);\n",
      "            maxDimension = resolveUnitValue(renderer, Property.MAX_WIDTH, layoutBoxMainSize);\n",
      "            minDimension = resolveUnitValue(renderer, Property.MIN_WIDTH, layoutBoxMainSize);\n",
      "        }\n",
      "\n",
      "        // TODO DEVSIX-5001 min-content and max-content as width are not supported\n",
      "        // if that dimension of the flex container is being sized under a min or max-content constraint,\n",
      "        // the available space in that dimension is that constraint;\n",
      "\n",
      "        if (mainSize == null) {\n",
      "            mainSize = layoutBoxMainSize;\n",
      "        }\n",
      "        if (minDimension != null && minDimension > mainSize) {\n",
      "            mainSize = minDimension;\n",
      "        }\n",
      "\n",
      "        if (maxDimension != null && (minDimension == null || maxDimension > minDimension) && maxDimension < mainSize) {\n",
      "            mainSize = maxDimension;\n",
      "        }\n",
      "\n",
      "        return (float) mainSize;\n",
      "    }\n",
      "\n",
      "    private static Float resolveUnitValue(FlexContainerRenderer renderer, int property, float baseValue) {\n",
      "        UnitValue value = renderer.getPropertyAsUnitValue(property);\n",
      "        if (value == null) {\n",
      "            return null;\n",
      "        }\n",
      "        if (value.isPercentValue()) {\n",
      "            return value.getValue() / 100 * baseValue;\n",
      "        }\n",
      "        return value.getValue();\n",
      "    }\n",
      "\n",
      "    private static Float[] getCrossSizes(FlexContainerRenderer renderer, Rectangle layoutBox) {\n",
      "        final boolean isColumnDirection = isColumnDirection(renderer);\n",
      "\n",
      "        return new Float[]{\n",
      "                isColumnDirection ? renderer.retrieveWidth(layoutBox.getWidth()) : renderer.retrieveHeight(),\n",
      "                isColumnDirection ? renderer.retrieveMinWidth(layoutBox.getWidth()) : renderer.retrieveMinHeight(),\n",
      "                isColumnDirection ? renderer.retrieveMaxWidth(layoutBox.getWidth()) : renderer.retrieveMaxHeight()\n",
      "        };\n",
      "    }\n",
      "\n",
      "    static void determineFlexBasisAndHypotheticalMainSizeForFlexItems(\n",
      "            List<FlexItemCalculationInfo> flexItemCalculationInfos, float crossSize, boolean isColumnDirection) {\n",
      "        for (FlexItemCalculationInfo info : flexItemCalculationInfos) {\n",
      "            // 3. Determine the flex base size and hypothetical main size of each item:\n",
      "\n",
      "            AbstractRenderer renderer = info.renderer;\n",
      "\n",
      "            // TODO DEVSIX-5001 content as width are not supported\n",
      "            // B. If the flex item has ...\n",
      "            // an intrinsic aspect ratio,\n",
      "            // a used flex basis of content, and\n",
      "            // a definite cross size,\n",
      "            // then the flex base size is calculated from its inner cross size\n",
      "            // and the flex item\u2019s intrinsic aspect ratio.\n",
      "            Float definiteCrossSize = null;\n",
      "            if (renderer.hasAspectRatio()) {\n",
      "                definiteCrossSize = isColumnDirection ?\n",
      "                        renderer.retrieveWidth(crossSize) : renderer.retrieveHeight();\n",
      "            }\n",
      "            if (info.flexBasisContent && definiteCrossSize != null) {\n",
      "                float aspectRatio = (float) renderer.getAspectRatio();\n",
      "                info.flexBaseSize = isColumnDirection ?\n",
      "                        (float) definiteCrossSize / aspectRatio : (float) definiteCrossSize * aspectRatio;\n",
      "            } else {\n",
      "                // A. If the item has a definite used flex basis, that\u2019s the flex base size.\n",
      "                info.flexBaseSize = info.flexBasis;\n",
      "            }\n",
      "\n",
      "            // TODO DEVSIX-5001 content as width is not supported\n",
      "            // C. If the used flex basis is content or depends on its available space,\n",
      "            // and the flex container is being sized under a min-content or max-content constraint\n",
      "            // (e.g. when performing automatic table layout [CSS21]), size the item under that constraint.\n",
      "            // The flex base size is the item\u2019s resulting main size.\n",
      "\n",
      "            // TODO DEVSIX-5001 content as width is not supported\n",
      "            // Otherwise, if the used flex basis is content or depends on its available space,\n",
      "            // the available main size is infinite, and the flex item\u2019s inline axis is parallel to the main axis,\n",
      "            // lay the item out using the rules for a box in an orthogonal flow [CSS3-WRITING-MODES].\n",
      "            // The flex base size is the item\u2019s max-content main size.\n",
      "\n",
      "            // TODO DEVSIX-5001 max-content as width is not supported\n",
      "            // Otherwise, size the item into the available space using its used flex basis in place of its main size,\n",
      "            // treating a value of content as max-content. If a cross size is needed to determine the main size\n",
      "            // (e.g. when the flex item\u2019s main size is in its block axis)\n",
      "            // and the flex item\u2019s cross size is auto and not definite,\n",
      "            // in this calculation use fit-content as the flex item\u2019s cross size.\n",
      "            // The flex base size is the item\u2019s resulting main size.\n",
      "\n",
      "            // The hypothetical main size is the item\u2019s flex base size clamped\n",
      "            // according to its used min and max main sizes (and flooring the content box size at zero).\n",
      "            info.hypotheticalMainSize = Math.max(\n",
      "                    0,\n",
      "                    Math.min(\n",
      "                            Math.max(info.minContent, info.flexBaseSize),\n",
      "                            info.maxContent));\n",
      "            // Each item in the flex line has a target main size, initially set to its flex base size\n",
      "            info.mainSize = info.hypotheticalMainSize;\n",
      "\n",
      "            // Note: We assume that it was resolved on some upper level\n",
      "            // 4. Determine the main size of the flex container\n",
      "        }\n",
      "    }\n",
      "\n",
      "    static List<List<FlexItemCalculationInfo>> collectFlexItemsIntoFlexLines(\n",
      "            List<FlexItemCalculationInfo> flexItemCalculationInfos, float mainSize, boolean isSingleLine) {\n",
      "        List<List<FlexItemCalculationInfo>> lines = new ArrayList<>();\n",
      "        List<FlexItemCalculationInfo> currentLineInfos = new ArrayList<>();\n",
      "\n",
      "        if (isSingleLine) {\n",
      "            currentLineInfos.addAll(flexItemCalculationInfos);\n",
      "        } else {\n",
      "            float occupiedLineSpace = 0;\n",
      "            for (FlexItemCalculationInfo info : flexItemCalculationInfos) {\n",
      "                occupiedLineSpace += info.getOuterMainSize(info.hypotheticalMainSize);\n",
      "                if (occupiedLineSpace > mainSize + EPSILON) {\n",
      "                    // If the very first uncollected item wouldn\u2019t fit, collect just it into the line.\n",
      "                    if (currentLineInfos.isEmpty()) {\n",
      "                        currentLineInfos.add(info);\n",
      "                        lines.add(currentLineInfos);\n",
      "                        currentLineInfos = new ArrayList<>();\n",
      "                        occupiedLineSpace = 0;\n",
      "                    } else {\n",
      "                        lines.add(currentLineInfos);\n",
      "                        currentLineInfos = new ArrayList<>();\n",
      "                        currentLineInfos.add(info);\n",
      "                        occupiedLineSpace = info.getOuterMainSize(info.hypotheticalMainSize);\n",
      "                    }\n",
      "                } else {\n",
      "                    currentLineInfos.add(info);\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "\n",
      "        // the last line should be added\n",
      "        if (!currentLineInfos.isEmpty()) {\n",
      "            lines.add(currentLineInfos);\n",
      "        }\n",
      "\n",
      "        return lines;\n",
      "    }\n",
      "\n",
      "    static void resolveFlexibleLengths(List<List<FlexItemCalculationInfo>> lines, float mainSize) {\n",
      "        for (List<FlexItemCalculationInfo> line : lines) {\n",
      "\n",
      "            // 1. Determine the used flex factor.\n",
      "            float hypotheticalMainSizesSum = 0;\n",
      "            for (FlexItemCalculationInfo info : line) {\n",
      "                hypotheticalMainSizesSum += info.getOuterMainSize(info.hypotheticalMainSize);\n",
      "            }\n",
      "\n",
      "            // if the sum is less than the flex container\u2019s inner main size,\n",
      "            // use the flex grow factor for the rest of this algorithm; otherwise, use the flex shrink factor.\n",
      "            boolean isFlexGrow = hypotheticalMainSizesSum < mainSize;\n",
      "            // 2. Size inflexible items.\n",
      "            for (FlexItemCalculationInfo info : line) {\n",
      "                if (isFlexGrow) {\n",
      "                    if (isZero(info.flexGrow) || info.flexBaseSize > info.hypotheticalMainSize) {\n",
      "                        info.mainSize = info.hypotheticalMainSize;\n",
      "                        info.isFrozen = true;\n",
      "                    }\n",
      "                } else {\n",
      "                    if (isZero(info.flexShrink) || info.flexBaseSize < info.hypotheticalMainSize) {\n",
      "                        info.mainSize = info.hypotheticalMainSize;\n",
      "                        info.isFrozen = true;\n",
      "                    }\n",
      "                }\n",
      "            }\n",
      "\n",
      "            // 3. Calculate initial free space.\n",
      "            float initialFreeSpace = calculateFreeSpace(line, mainSize);\n",
      "\n",
      "            // 4. Loop:\n",
      "            // a. Check for flexible items\n",
      "            while (hasFlexibleItems(line)) {\n",
      "\n",
      "                // b. Calculate the remaining free space as for initial free space, above.\n",
      "                float remainingFreeSpace = calculateFreeSpace(line, mainSize);\n",
      "                float flexFactorSum = 0;\n",
      "                for (FlexItemCalculationInfo info : line) {\n",
      "                    if (!info.isFrozen) {\n",
      "                        flexFactorSum += isFlexGrow ? info.flexGrow : info.flexShrink;\n",
      "                    }\n",
      "                }\n",
      "                // If the sum of the unfrozen flex items\u2019 flex factors is less than one,\n",
      "                // multiply the initial free space by this sum.\n",
      "                // If the magnitude of this value is less than the magnitude of the remaining free space,\n",
      "                // use this as the remaining free space.\n",
      "                if (flexFactorSum < 1 && Math.abs(remainingFreeSpace) > Math.abs(initialFreeSpace * flexFactorSum)) {\n",
      "                    remainingFreeSpace = initialFreeSpace * flexFactorSum;\n",
      "                }\n",
      "\n",
      "                // c. Distribute free space proportional to the flex factors\n",
      "                if (!isZero(remainingFreeSpace)) {\n",
      "                    float scaledFlexShrinkFactorsSum = 0;\n",
      "                    for (FlexItemCalculationInfo info : line) {\n",
      "                        if (!info.isFrozen) {\n",
      "                            if (isFlexGrow) {\n",
      "                                float ratio = info.flexGrow / flexFactorSum;\n",
      "                                info.mainSize = info.flexBaseSize + remainingFreeSpace * ratio;\n",
      "                            } else {\n",
      "                                info.scaledFlexShrinkFactor = info.flexShrink * info.flexBaseSize;\n",
      "                                scaledFlexShrinkFactorsSum += info.scaledFlexShrinkFactor;\n",
      "                            }\n",
      "                        }\n",
      "                    }\n",
      "\n",
      "                    if (!isZero(scaledFlexShrinkFactorsSum)) {\n",
      "                        for (FlexItemCalculationInfo info : line) {\n",
      "                            if (!info.isFrozen && !isFlexGrow) {\n",
      "                                float ratio = info.scaledFlexShrinkFactor / scaledFlexShrinkFactorsSum;\n",
      "                                info.mainSize =\n",
      "                                        info.flexBaseSize - Math.abs(remainingFreeSpace) * ratio;\n",
      "                            }\n",
      "                        }\n",
      "                    }\n",
      "                } else {\n",
      "                    // This is not mentioned in the algo, however we must initialize main size (target main size)\n",
      "                    for (FlexItemCalculationInfo info : line) {\n",
      "                        if (!info.isFrozen) {\n",
      "                            info.mainSize = info.flexBaseSize;\n",
      "                        }\n",
      "                    }\n",
      "                }\n",
      "                // d. Fix min/max violations.\n",
      "                float sum = 0;\n",
      "                for (FlexItemCalculationInfo info : line) {\n",
      "                    if (!info.isFrozen) {\n",
      "                        // Clamp each non-frozen item\u2019s target main size by its used min and max main sizes\n",
      "                        // and floor its content-box size at zero.\n",
      "                        float clampedSize = Math\n",
      "                                .min(Math.max(info.mainSize, info.minContent), info.maxContent);\n",
      "                        if (info.mainSize > clampedSize) {\n",
      "                            info.isMaxViolated = true;\n",
      "                        } else if (info.mainSize < clampedSize) {\n",
      "                            info.isMinViolated = true;\n",
      "                        }\n",
      "                        sum += clampedSize - info.mainSize;\n",
      "                        info.mainSize = clampedSize;\n",
      "                    }\n",
      "                }\n",
      "                for (FlexItemCalculationInfo info : line) {\n",
      "                    if (!info.isFrozen) {\n",
      "                        if (isZero(sum)\n",
      "                                || (0 < sum && info.isMinViolated)\n",
      "                                || (0 > sum && info.isMaxViolated)) {\n",
      "                            info.isFrozen = true;\n",
      "                        }\n",
      "                    }\n",
      "                }\n",
      "            }\n",
      "\n",
      "            // 9.5. Main-Axis Alignment\n",
      "\n",
      "            // 12. Distribute any remaining free space.\n",
      "\n",
      "            // Once any of the to-do remarks below is resolved, one should add a corresponding block,\n",
      "            // which will be triggered if 0 < remaining free space\n",
      "            // TODO DEVSIX-5002 margin: auto is not supported\n",
      "            // If the remaining free space is positive and at least one main-axis margin on this line is auto,\n",
      "            // distribute the free space equally among these margins. Otherwise, set all auto margins to zero.\n",
      "        }\n",
      "    }\n",
      "\n",
      "    private static void resolveFlexibleLengths(List<List<FlexItemCalculationInfo>> lines, float layoutBoxSize,\n",
      "                                               float containerSize) {\n",
      "        resolveFlexibleLengths(lines, containerSize);\n",
      "        if (lines.size() == 1 && layoutBoxSize < containerSize - EPSILON) {\n",
      "            List<FlexItemCalculationInfo> lineToRecalculate = new ArrayList<>();\n",
      "            float mainSize = 0;\n",
      "            for (FlexItemCalculationInfo itemInfo : lines.get(0)) {\n",
      "                mainSize += itemInfo.getOuterMainSize(itemInfo.mainSize);\n",
      "                if (mainSize < layoutBoxSize - EPSILON) {\n",
      "                    itemInfo.isFrozen = false;\n",
      "                    lineToRecalculate.add(itemInfo);\n",
      "                } else {\n",
      "                    break;\n",
      "                }\n",
      "            }\n",
      "            if (lineToRecalculate.size() > 0) {\n",
      "                List<List<FlexItemCalculationInfo>> updatedLines = new ArrayList<>();\n",
      "                updatedLines.add(lineToRecalculate);\n",
      "                resolveFlexibleLengths(updatedLines, layoutBoxSize);\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    static void determineHypotheticalCrossSizeForFlexItems(List<List<FlexItemCalculationInfo>> lines,\n",
      "                                                           boolean isColumnDirection, float crossSize) {\n",
      "        for (List<FlexItemCalculationInfo> line : lines) {\n",
      "            for (FlexItemCalculationInfo info : line) {\n",
      "                determineHypotheticalCrossSizeForFlexItem(info, isColumnDirection, crossSize);\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    private static void determineHypotheticalCrossSizeForFlexItem(FlexItemCalculationInfo info,\n",
      "                                                                  boolean isColumnDirection, float crossSize) {\n",
      "        if (info.renderer instanceof FlexContainerRenderer &&\n",
      "                ((FlexContainerRenderer) info.renderer).getHypotheticalCrossSize(info.mainSize) != null) {\n",
      "            // Take from cache\n",
      "            info.hypotheticalCrossSize = ((FlexContainerRenderer) info.renderer)\n",
      "                    .getHypotheticalCrossSize(info.mainSize).floatValue();\n",
      "        } else if (isColumnDirection) {\n",
      "            MinMaxWidth minMaxWidth = info.renderer.getMinMaxWidth();\n",
      "            info.hypotheticalCrossSize = info.getInnerCrossSize(\n",
      "                    Math.max(Math.min(minMaxWidth.getMaxWidth(), crossSize), minMaxWidth.getMinWidth()));\n",
      "            // Cache hypotheticalCrossSize for FlexContainerRenderer\n",
      "            if (info.renderer instanceof FlexContainerRenderer) {\n",
      "                ((FlexContainerRenderer) info.renderer).setHypotheticalCrossSize(info.mainSize,\n",
      "                        info.hypotheticalCrossSize);\n",
      "            }\n",
      "        } else {\n",
      "            UnitValue prevMainSize = info.renderer.<UnitValue>replaceOwnProperty(Property.WIDTH,\n",
      "                    UnitValue.createPointValue(info.mainSize));\n",
      "            UnitValue prevMinMainSize = info.renderer.<UnitValue>replaceOwnProperty(Property.MIN_WIDTH, null);\n",
      "            info.renderer.setProperty(Property.INLINE_VERTICAL_ALIGNMENT, InlineVerticalAlignmentType.BOTTOM);\n",
      "            LayoutResult result = info.renderer.layout(new LayoutContext(\n",
      "                    new LayoutArea(0, new Rectangle(AbstractRenderer.INF, AbstractRenderer.INF))));\n",
      "            info.renderer.returnBackOwnProperty(Property.MIN_WIDTH, prevMinMainSize);\n",
      "            info.renderer.returnBackOwnProperty(Property.WIDTH, prevMainSize);\n",
      "            // Since main size is clamped with min-width, we do expect the result to be full\n",
      "            if (result.getStatus() == LayoutResult.FULL) {\n",
      "                info.hypotheticalCrossSize = info.getInnerCrossSize(result.getOccupiedArea().getBBox().getHeight());\n",
      "                // Cache hypotheticalCrossSize for FlexContainerRenderer\n",
      "                if (info.renderer instanceof FlexContainerRenderer) {\n",
      "                    ((FlexContainerRenderer) info.renderer).setHypotheticalCrossSize(info.mainSize,\n",
      "                            info.hypotheticalCrossSize);\n",
      "                }\n",
      "            } else {\n",
      "                logger.error(IoLogMessageConstant.FLEX_ITEM_LAYOUT_RESULT_IS_NOT_FULL);\n",
      "                info.hypotheticalCrossSize = 0;\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    static List<Float> calculateColumnDirectionCrossSizes(List<List<FlexItemInfo>> lines) {\n",
      "        List<Float> lineCrossSizes = new ArrayList<>();\n",
      "            for (List<FlexItemInfo> line : lines) {\n",
      "                float flexLinesCrossSize = 0;\n",
      "                float largestCrossSize = 0;\n",
      "                for (FlexItemInfo info : line) {\n",
      "                    // TODO DEVSIX-5002 Flex items whose cross-axis margins are both auto shouldn't be collected\n",
      "                    // TODO DEVSIX-5038 Support BASELINE as align-self\n",
      "                    largestCrossSize = Math.max(largestCrossSize, info.getRectangle().getWidth());\n",
      "                    flexLinesCrossSize = Math.max(0, largestCrossSize);\n",
      "                }\n",
      "                lineCrossSizes.add(flexLinesCrossSize);\n",
      "            }\n",
      "        return lineCrossSizes;\n",
      "    }\n",
      "\n",
      "    static List<Float> calculateCrossSizeOfEachFlexLine(List<List<FlexItemCalculationInfo>> lines,\n",
      "                                                        Float minCrossSize, Float crossSize, Float maxCrossSize) {\n",
      "        boolean isSingleLine = lines.size() == 1;\n",
      "        List<Float> lineCrossSizes = new ArrayList<>();\n",
      "        if (isSingleLine && crossSize != null) {\n",
      "            lineCrossSizes.add((float) crossSize);\n",
      "        } else {\n",
      "            for (List<FlexItemCalculationInfo> line : lines) {\n",
      "                float flexLinesCrossSize = 0;\n",
      "\n",
      "                float largestHypotheticalCrossSize = 0;\n",
      "                for (FlexItemCalculationInfo info : line) {\n",
      "                    // 1. Collect all the flex items whose inline-axis is parallel to the main-axis,\n",
      "                    // whose align-self is baseline, and whose cross-axis margins are both non-auto.\n",
      "                    // Find the largest of the distances between each item\u2019s baseline and\n",
      "                    // its hypothetical outer cross-start edge, and the largest of the distances\n",
      "                    // between each item\u2019s baseline and its hypothetical outer cross-end edge, and sum these two values.\n",
      "                    // TODO DEVSIX-5002 margin: auto is not supported => \"cross-axis margins are both non-auto\" is true\n",
      "                    // TODO DEVSIX-5038 Support BASELINE as align-self\n",
      "\n",
      "                    // 2. Among all the items not collected by the previous step,\n",
      "                    // find the largest outer hypothetical cross size.\n",
      "                    if (largestHypotheticalCrossSize < info.getOuterCrossSize(info.hypotheticalCrossSize)) {\n",
      "                        largestHypotheticalCrossSize = info.getOuterCrossSize(info.hypotheticalCrossSize);\n",
      "                    }\n",
      "                    flexLinesCrossSize = Math.max(0, largestHypotheticalCrossSize);\n",
      "                }\n",
      "\n",
      "                // 3. If the flex container is single-line, then clamp the line\u2019s cross-size to be\n",
      "                // within the container\u2019s computed min and max cross sizes\n",
      "                if (isSingleLine) {\n",
      "                    if (null != minCrossSize) {\n",
      "                        flexLinesCrossSize = Math.max((float) minCrossSize, flexLinesCrossSize);\n",
      "                    }\n",
      "                    if (null != maxCrossSize) {\n",
      "                        flexLinesCrossSize = Math.min((float) maxCrossSize, flexLinesCrossSize);\n",
      "                    }\n",
      "                }\n",
      "                lineCrossSizes.add(flexLinesCrossSize);\n",
      "            }\n",
      "        }\n",
      "        return lineCrossSizes;\n",
      "    }\n",
      "\n",
      "    static void handleAlignContentStretch(FlexContainerRenderer flexContainerRenderer,\n",
      "                                          List<List<FlexItemCalculationInfo>> lines,\n",
      "                                          Float crossSize, List<Float> lineCrossSizes, Rectangle layoutBox) {\n",
      "        AlignmentPropertyValue alignContent =\n",
      "                (AlignmentPropertyValue) flexContainerRenderer.<AlignmentPropertyValue>getProperty(\n",
      "                        Property.ALIGN_CONTENT, AlignmentPropertyValue.STRETCH);\n",
      "        if (crossSize != null && alignContent == AlignmentPropertyValue.STRETCH) {\n",
      "            // Line order becomes important for alignment\n",
      "            if (flexContainerRenderer.isWrapReverse()) {\n",
      "                Collections.reverse(lineCrossSizes);\n",
      "                Collections.reverse(lines);\n",
      "            }\n",
      "            List<Float> currentPageLineCrossSizes =\n",
      "                    retrieveCurrentPageLineCrossSizes(flexContainerRenderer, lines, lineCrossSizes, crossSize, layoutBox);\n",
      "            if (currentPageLineCrossSizes.size() > 0) {\n",
      "                float flexLinesCrossSizesSum = 0;\n",
      "                for (float size : currentPageLineCrossSizes) {\n",
      "                    flexLinesCrossSizesSum += size;\n",
      "                }\n",
      "                if (flexLinesCrossSizesSum < crossSize - EPSILON) {\n",
      "                    float addition = ((float) crossSize - flexLinesCrossSizesSum) / currentPageLineCrossSizes.size();\n",
      "                    for (int i = 0; i < currentPageLineCrossSizes.size(); i++) {\n",
      "                        lineCrossSizes.set(i, lineCrossSizes.get(i) + addition);\n",
      "                    }\n",
      "                }\n",
      "            }\n",
      "            // Reverse back\n",
      "            if (flexContainerRenderer.isWrapReverse()) {\n",
      "                Collections.reverse(lineCrossSizes);\n",
      "                Collections.reverse(lines);\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    static void determineUsedCrossSizeOfEachFlexItem(List<List<FlexItemCalculationInfo>> lines,\n",
      "                                                     List<Float> lineCrossSizes, FlexContainerRenderer flexContainerRenderer) {\n",
      "        final boolean isColumnDirection = isColumnDirection(flexContainerRenderer);\n",
      "        AlignmentPropertyValue alignItems =\n",
      "                (AlignmentPropertyValue) flexContainerRenderer.<AlignmentPropertyValue>getProperty(\n",
      "                        Property.ALIGN_ITEMS, AlignmentPropertyValue.STRETCH);\n",
      "\n",
      "        assert lines.size() == lineCrossSizes.size();\n",
      "\n",
      "        for (int i = 0; i < lines.size(); i++) {\n",
      "            for (FlexItemCalculationInfo info : lines.get(i)) {\n",
      "                // TODO DEVSIX-5002 margin: auto is not supported\n",
      "                // If a flex item has align-self: stretch, its computed cross size property is auto,\n",
      "                // and neither of its cross-axis margins are auto,\n",
      "                // the used outer cross size is the used cross size of its flex line,\n",
      "                // clamped according to the item\u2019s used min and max cross sizes.\n",
      "                // Otherwise, the used cross size is the item\u2019s hypothetical cross size.\n",
      "                // Note that this step doesn't affect the main size of the flex item, even if it has aspect ratio.\n",
      "                // Also note that for some reason browsers do not respect such a rule from the specification\n",
      "                AbstractRenderer infoRenderer = info.renderer;\n",
      "                AlignmentPropertyValue alignSelf =\n",
      "                        (AlignmentPropertyValue) infoRenderer.<AlignmentPropertyValue>getProperty(\n",
      "                                Property.ALIGN_SELF, alignItems);\n",
      "                // TODO DEVSIX-5002 Stretch value shall be ignored if margin auto for cross axis is set\n",
      "                boolean definiteCrossSize = isColumnDirection ?\n",
      "                        info.renderer.hasProperty(Property.WIDTH) : info.renderer.hasProperty(Property.HEIGHT);\n",
      "                if ((alignSelf == AlignmentPropertyValue.STRETCH || alignSelf == AlignmentPropertyValue.NORMAL)\n",
      "                        && !definiteCrossSize) {\n",
      "                    info.crossSize = info.getInnerCrossSize(lineCrossSizes.get(i));\n",
      "                    Float maxCrossSize = isColumnDirection ?\n",
      "                            infoRenderer.retrieveMaxWidth(lineCrossSizes.get(i)) : infoRenderer.retrieveMaxHeight();\n",
      "                    if (maxCrossSize != null) {\n",
      "                        info.crossSize = Math.min((float) maxCrossSize, info.crossSize);\n",
      "                    }\n",
      "                    Float minCrossSize = isColumnDirection ?\n",
      "                            infoRenderer.retrieveMinWidth(lineCrossSizes.get(i)) : infoRenderer.retrieveMinHeight();\n",
      "                    if (minCrossSize != null) {\n",
      "                        info.crossSize = Math.max((float) minCrossSize, info.crossSize);\n",
      "                    }\n",
      "                } else {\n",
      "                    info.crossSize = info.hypotheticalCrossSize;\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    private static Float retrieveMaxHeightForMainDirection(AbstractRenderer renderer) {\n",
      "        Float maxHeight = renderer.retrieveMaxHeight();\n",
      "        return renderer.hasProperty(Property.MAX_HEIGHT) ? maxHeight : null;\n",
      "    }\n",
      "\n",
      "    private static Float retrieveMinHeightForMainDirection(AbstractRenderer renderer) {\n",
      "        Float minHeight = renderer.retrieveMinHeight();\n",
      "        return renderer.hasProperty(Property.MIN_HEIGHT) && renderer.<UnitValue>getProperty(Property.MIN_HEIGHT) != null ?\n",
      "                minHeight : null;\n",
      "    }\n",
      "\n",
      "    private static void applyAlignItemsAndAlignSelf(List<List<FlexItemCalculationInfo>> lines,\n",
      "                                                    FlexContainerRenderer renderer, List<Float> lineCrossSizes) {\n",
      "        final boolean isColumnDirection = isColumnDirection(renderer);\n",
      "        AlignmentPropertyValue itemsAlignment = (AlignmentPropertyValue) renderer.<AlignmentPropertyValue>getProperty(\n",
      "                Property.ALIGN_ITEMS, AlignmentPropertyValue.STRETCH);\n",
      "\n",
      "        assert lines.size() == lineCrossSizes.size();\n",
      "\n",
      "        // Line order becomes important for counting nextLineShift\n",
      "        if (renderer.isWrapReverse()) {\n",
      "            Collections.reverse(lines);\n",
      "            Collections.reverse(lineCrossSizes);\n",
      "        }\n",
      "\n",
      "        float lineShift;\n",
      "        float nextLineShift = 0;\n",
      "        for (int i = 0; i < lines.size(); ++i) {\n",
      "            lineShift = nextLineShift;\n",
      "            List<FlexItemCalculationInfo> line = lines.get(i);\n",
      "            float lineCrossSize = lineCrossSizes.get(i);\n",
      "            // Used to calculate an extra space between the right/bottom point of the current line and left/top point\n",
      "            // of the next line\n",
      "            nextLineShift = lineCrossSize - line.get(0).getOuterCrossSize(line.get(0).crossSize);\n",
      "            for (FlexItemCalculationInfo itemInfo : line) {\n",
      "                if (isColumnDirection) {\n",
      "                    itemInfo.xShift = lineShift;\n",
      "                } else {\n",
      "                    itemInfo.yShift = lineShift;\n",
      "                }\n",
      "\n",
      "                AlignmentPropertyValue selfAlignment =\n",
      "                        (AlignmentPropertyValue) itemInfo.renderer.<AlignmentPropertyValue>getProperty(\n",
      "                                Property.ALIGN_SELF, itemsAlignment);\n",
      "\n",
      "                final float freeSpace = lineCrossSize - itemInfo.getOuterCrossSize(itemInfo.crossSize);\n",
      "                nextLineShift = Math.min(nextLineShift, freeSpace);\n",
      "\n",
      "                switch (selfAlignment) {\n",
      "                    case SELF_END:\n",
      "                    case END:\n",
      "                        if (isColumnDirection) {\n",
      "                            itemInfo.xShift += freeSpace;\n",
      "                        } else {\n",
      "                            itemInfo.yShift += freeSpace;\n",
      "                        }\n",
      "                        nextLineShift = 0;\n",
      "                        break;\n",
      "                    case FLEX_END:\n",
      "                        if (!renderer.isWrapReverse()) {\n",
      "                            if (isColumnDirection) {\n",
      "                                itemInfo.xShift += freeSpace;\n",
      "                            } else {\n",
      "                                itemInfo.yShift += freeSpace;\n",
      "                            }\n",
      "                            nextLineShift = 0;\n",
      "                        }\n",
      "                        break;\n",
      "                    case CENTER:\n",
      "                        if (isColumnDirection) {\n",
      "                            itemInfo.xShift += freeSpace / 2;\n",
      "                        } else {\n",
      "                            itemInfo.yShift += freeSpace / 2;\n",
      "                        }\n",
      "                        nextLineShift = Math.min(nextLineShift, freeSpace / 2);\n",
      "                        break;\n",
      "                    case FLEX_START:\n",
      "                        if (renderer.isWrapReverse()) {\n",
      "                            if (isColumnDirection) {\n",
      "                                itemInfo.xShift += freeSpace;\n",
      "                            } else {\n",
      "                                itemInfo.yShift += freeSpace;\n",
      "                            }\n",
      "                            nextLineShift = 0;\n",
      "                        }\n",
      "                        break;\n",
      "                    case START:\n",
      "                    case BASELINE:\n",
      "                    case SELF_START:\n",
      "                    case STRETCH:\n",
      "                    case NORMAL:\n",
      "                    default:\n",
      "                        // We don't need to do anything in these cases\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "\n",
      "        // Reverse back\n",
      "        if (renderer.isWrapReverse()) {\n",
      "            Collections.reverse(lines);\n",
      "            Collections.reverse(lineCrossSizes);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    private static void applyJustifyContent(List<List<FlexItemCalculationInfo>> lines,\n",
      "                                            FlexContainerRenderer renderer, float mainSize, float containerMainSize) {\n",
      "        JustifyContent justifyContent = (JustifyContent) renderer.<JustifyContent>getProperty(\n",
      "                Property.JUSTIFY_CONTENT, JustifyContent.FLEX_START);\n",
      "\n",
      "        boolean containsFixedHeight = containerMainSize > 0;\n",
      "        boolean isFixedHeightAppliedOnTheCurrentPage = containsFixedHeight && containerMainSize < mainSize;\n",
      "        if (renderer.isWrapReverse()) {\n",
      "            Collections.reverse(lines);\n",
      "        }\n",
      "        for (List<FlexItemCalculationInfo> line : lines) {\n",
      "            float childrenMainSize = 0;\n",
      "            // Items order becomes important for justification\n",
      "            boolean isColumnReverse = FlexDirectionPropertyValue.COLUMN_REVERSE ==\n",
      "                    renderer.<FlexDirectionPropertyValue>getProperty(Property.FLEX_DIRECTION, null);\n",
      "            if (isColumnReverse) {\n",
      "                Collections.reverse(line);\n",
      "            }\n",
      "            List<FlexItemCalculationInfo> lineToJustify = new ArrayList<>();\n",
      "            for (int i = 0; i < line.size(); ++i) {\n",
      "                FlexItemCalculationInfo itemInfo = line.get(i);\n",
      "                if (i != 0 && isColumnDirection(renderer) && !isFixedHeightAppliedOnTheCurrentPage &&\n",
      "                        lines.size() == 1 &&\n",
      "                        childrenMainSize + itemInfo.getOuterMainSize(itemInfo.mainSize) > mainSize + EPSILON) {\n",
      "                    break;\n",
      "                }\n",
      "                childrenMainSize += itemInfo.getOuterMainSize(itemInfo.mainSize);\n",
      "                lineToJustify.add(itemInfo);\n",
      "            }\n",
      "            // Reverse back\n",
      "            if (isColumnReverse) {\n",
      "                Collections.reverse(line);\n",
      "                Collections.reverse(lineToJustify);\n",
      "            }\n",
      "            float freeSpace = 0;\n",
      "            if (!isColumnDirection(renderer)) {\n",
      "                freeSpace = mainSize - childrenMainSize;\n",
      "            } else if (containsFixedHeight) {\n",
      "                // In case of column direction we should align only if container contains fixed height\n",
      "                freeSpace = isFixedHeightAppliedOnTheCurrentPage ? containerMainSize - childrenMainSize :\n",
      "                        Math.max(0, mainSize - childrenMainSize);\n",
      "            }\n",
      "            renderer.getFlexItemMainDirector().applyJustifyContent(lineToJustify, justifyContent, freeSpace);\n",
      "        }\n",
      "        if (renderer.isWrapReverse()) {\n",
      "            Collections.reverse(lines);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    private static float calculateFreeSpace(final List<FlexItemCalculationInfo> line, final float initialFreeSpace) {\n",
      "        float result = initialFreeSpace;\n",
      "        for (FlexItemCalculationInfo info : line) {\n",
      "            if (info.isFrozen) {\n",
      "                result -= info.getOuterMainSize(info.mainSize);\n",
      "            } else {\n",
      "                result -= info.getOuterMainSize(info.flexBaseSize);\n",
      "            }\n",
      "        }\n",
      "        return result;\n",
      "    }\n",
      "\n",
      "    private static boolean hasFlexibleItems(final List<FlexItemCalculationInfo> line) {\n",
      "        for (FlexItemCalculationInfo info : line) {\n",
      "            if (!info.isFrozen) {\n",
      "                return true;\n",
      "            }\n",
      "        }\n",
      "        return false;\n",
      "    }\n",
      "\n",
      "    static boolean isZero(final float value) {\n",
      "        return Math.abs(value) < EPSILON;\n",
      "    }\n",
      "\n",
      "    private static List<FlexItemCalculationInfo> createFlexItemCalculationInfos(\n",
      "            FlexContainerRenderer flexContainerRenderer, float flexContainerMainSize, float crossSize) {\n",
      "        final List<IRenderer> childRenderers = flexContainerRenderer.getChildRenderers();\n",
      "        final List<FlexItemCalculationInfo> flexItems = new ArrayList<>();\n",
      "        for (final IRenderer renderer : childRenderers) {\n",
      "            if (renderer instanceof AbstractRenderer) {\n",
      "                AbstractRenderer abstractRenderer = (AbstractRenderer) renderer;\n",
      "\n",
      "                // TODO DEVSIX-5091 improve determining of the flex base size when flex-basis: content\n",
      "                float maxMainSize = calculateMaxMainSize(abstractRenderer, flexContainerMainSize,\n",
      "                        isColumnDirection(flexContainerRenderer), crossSize);\n",
      "                float flexBasis;\n",
      "                boolean flexBasisContent = false;\n",
      "                if (renderer.<UnitValue>getProperty(Property.FLEX_BASIS) == null) {\n",
      "                    flexBasis = maxMainSize;\n",
      "                    flexBasisContent = true;\n",
      "                } else {\n",
      "                    // For column layout layoutBox height should not be taken into account while calculating flexBasis\n",
      "                    // in percents. If flex container doesn't have a definite size, flex basis percents should not be\n",
      "                    // taken into account.\n",
      "                    final float containerMainSize = isColumnDirection(flexContainerRenderer) ?\n",
      "                            getMainSize(flexContainerRenderer, new Rectangle(0, 0)) : flexContainerMainSize;\n",
      "                    flexBasis = (float) abstractRenderer.retrieveUnitValue(containerMainSize, Property.FLEX_BASIS);\n",
      "                    if (AbstractRenderer.isBorderBoxSizing(abstractRenderer)) {\n",
      "                        flexBasis -= AbstractRenderer.calculatePaddingBorderWidth(abstractRenderer);\n",
      "                    }\n",
      "                }\n",
      "                flexBasis = Math.max(flexBasis, 0);\n",
      "\n",
      "                float flexGrow = (float) renderer.<Float>getProperty(Property.FLEX_GROW, FLEX_GROW_INITIAL_VALUE);\n",
      "\n",
      "                float flexShrink = (float) renderer.<Float>getProperty(Property.FLEX_SHRINK, FLEX_SHRINK_INITIAL_VALUE);\n",
      "\n",
      "                final FlexItemCalculationInfo flexItemInfo = new FlexItemCalculationInfo((AbstractRenderer) renderer,\n",
      "                        flexBasis, flexGrow, flexShrink, flexContainerMainSize, flexBasisContent,\n",
      "                        isColumnDirection(flexContainerRenderer), crossSize);\n",
      "\n",
      "                flexItems.add(flexItemInfo);\n",
      "            }\n",
      "        }\n",
      "        return flexItems;\n",
      "    }\n",
      "\n",
      "    private static float calculateMaxMainSize(AbstractRenderer flexItemRenderer, float flexContainerMainSize,\n",
      "                                              boolean isColumnDirection, float crossSize) {\n",
      "        Float maxMainSize;\n",
      "        if (flexItemRenderer instanceof TableRenderer) {\n",
      "            // TODO DEVSIX-5214 we can't call TableRenderer#retrieveWidth method as far as it can throw NPE\n",
      "            if (isColumnDirection) {\n",
      "                Float itemRendererMaxHeight = flexItemRenderer.retrieveMaxHeight();\n",
      "                maxMainSize = itemRendererMaxHeight;\n",
      "                if (maxMainSize == null) {\n",
      "                    maxMainSize = calculateHeight(flexItemRenderer, crossSize);\n",
      "                }\n",
      "            } else {\n",
      "                maxMainSize = new Float(flexItemRenderer.getMinMaxWidth().getMaxWidth());\n",
      "            }\n",
      "            if (isColumnDirection) {\n",
      "                maxMainSize = flexItemRenderer.applyMarginsBordersPaddings(\n",
      "                        new Rectangle(0, (float) maxMainSize), false).getHeight();\n",
      "            } else {\n",
      "                maxMainSize = flexItemRenderer.applyMarginsBordersPaddings(\n",
      "                        new Rectangle((float) maxMainSize, 0), false).getWidth();\n",
      "            }\n",
      "        } else {\n",
      "            // We need to retrieve width and max-width manually because this methods take into account box-sizing\n",
      "            maxMainSize = isColumnDirection ?\n",
      "                    flexItemRenderer.retrieveHeight() : flexItemRenderer.retrieveWidth(flexContainerMainSize);\n",
      "            if (maxMainSize == null) {\n",
      "                maxMainSize = isColumnDirection ? retrieveMaxHeightForMainDirection(flexItemRenderer) :\n",
      "                        flexItemRenderer.retrieveMaxWidth(flexContainerMainSize);\n",
      "            }\n",
      "            if (maxMainSize == null) {\n",
      "                if (flexItemRenderer instanceof ImageRenderer) {\n",
      "                    // TODO DEVSIX-5269 getMinMaxWidth doesn't always return the original image width\n",
      "                    maxMainSize = isColumnDirection ? ((ImageRenderer) flexItemRenderer).getImageHeight()\n",
      "                            : ((ImageRenderer) flexItemRenderer).getImageWidth();\n",
      "                } else {\n",
      "                    if (isColumnDirection) {\n",
      "                        Float height = retrieveMaxHeightForMainDirection(flexItemRenderer);\n",
      "                        if (height == null) {\n",
      "                            height = calculateHeight(flexItemRenderer, crossSize);\n",
      "                        }\n",
      "                        maxMainSize = flexItemRenderer.applyMarginsBordersPaddings(\n",
      "                                new Rectangle(0, (float) height), false).getHeight();\n",
      "                    } else {\n",
      "                        maxMainSize = flexItemRenderer.applyMarginsBordersPaddings(\n",
      "                                new Rectangle(flexItemRenderer.getMinMaxWidth().getMaxWidth(), 0), false).getWidth();\n",
      "                    }\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "        return (float) maxMainSize;\n",
      "    }\n",
      "\n",
      "    private static List<Float> retrieveCurrentPageLineCrossSizes(FlexContainerRenderer flexContainerRenderer,\n",
      "                                                                 List<List<FlexItemCalculationInfo>> lines,\n",
      "                                                                 List<Float> lineCrossSizes, Float crossSize,\n",
      "                                                                 Rectangle layoutBox) {\n",
      "        float mainSize = getMainSize(flexContainerRenderer, new Rectangle(0, 0));\n",
      "        boolean isColumnDirectionWithPagination = isColumnDirection(flexContainerRenderer) &&\n",
      "                (mainSize < EPSILON || mainSize > layoutBox.getHeight() + EPSILON);\n",
      "        if (!isColumnDirectionWithPagination || crossSize == null) {\n",
      "            return lineCrossSizes;\n",
      "        }\n",
      "\n",
      "        List<Float> currentPageLineCrossSizes = new ArrayList<>();\n",
      "        float flexLinesCrossSizesSum = 0;\n",
      "        for (int i = 0; i < lineCrossSizes.size(); ++i) {\n",
      "            float size = lineCrossSizes.get(i);\n",
      "            if (flexLinesCrossSizesSum + size > crossSize + EPSILON ||\n",
      "                    lines.get(i).get(0).mainSize > layoutBox.getHeight() + EPSILON) {\n",
      "                if (i == 0) {\n",
      "                    // We should add first line anyway\n",
      "                    currentPageLineCrossSizes.add(size);\n",
      "                }\n",
      "                break;\n",
      "            }\n",
      "            flexLinesCrossSizesSum += size;\n",
      "            currentPageLineCrossSizes.add(size);\n",
      "        }\n",
      "        return currentPageLineCrossSizes;\n",
      "    }\n",
      "\n",
      "    private static float calculateHeight(AbstractRenderer flexItemRenderer, float width) {\n",
      "        LayoutResult result = flexItemRenderer.layout(new LayoutContext(\n",
      "                new LayoutArea(1, new Rectangle(width, AbstractRenderer.INF))));\n",
      "        return result.getStatus() == LayoutResult.NOTHING ? 0 : result.getOccupiedArea().getBBox().getHeight();\n",
      "    }\n",
      "\n",
      "    static class FlexItemCalculationInfo {\n",
      "        AbstractRenderer renderer;\n",
      "        float flexBasis;\n",
      "        float flexShrink;\n",
      "        float flexGrow;\n",
      "        float minContent;\n",
      "        float maxContent;\n",
      "\n",
      "        float mainSize;\n",
      "        float crossSize;\n",
      "\n",
      "        float xShift;\n",
      "        float yShift;\n",
      "\n",
      "        // Calculation-related fields\n",
      "\n",
      "        float scaledFlexShrinkFactor;\n",
      "        boolean isFrozen = false;\n",
      "        boolean isMinViolated = false;\n",
      "        boolean isMaxViolated = false;\n",
      "        float flexBaseSize;\n",
      "        float hypotheticalMainSize;\n",
      "        float hypotheticalCrossSize;\n",
      "        boolean flexBasisContent;\n",
      "        boolean isColumnDirection;\n",
      "\n",
      "        public FlexItemCalculationInfo(AbstractRenderer renderer, float flexBasis,\n",
      "                                       float flexGrow, float flexShrink, float areaMainSize, boolean flexBasisContent,\n",
      "                                       boolean isColumnDirection, float crossSize) {\n",
      "            this.isColumnDirection = isColumnDirection;\n",
      "            this.flexBasisContent = flexBasisContent;\n",
      "            this.renderer = renderer;\n",
      "            this.flexBasis = flexBasis;\n",
      "            if (flexShrink < 0) {\n",
      "                throw new IllegalArgumentException(LayoutExceptionMessageConstant.FLEX_SHRINK_CANNOT_BE_NEGATIVE);\n",
      "            }\n",
      "            this.flexShrink = flexShrink;\n",
      "            if (flexGrow < 0) {\n",
      "                throw new IllegalArgumentException(LayoutExceptionMessageConstant.FLEX_GROW_CANNOT_BE_NEGATIVE);\n",
      "            }\n",
      "            this.flexGrow = flexGrow;\n",
      "            Float definiteMinContent = isColumnDirection ?\n",
      "                    retrieveMinHeightForMainDirection(renderer) : renderer.retrieveMinWidth(areaMainSize);\n",
      "            // null means that min-width property is not set or has auto value. In both cases we should calculate it\n",
      "            this.minContent = definiteMinContent == null ?\n",
      "                    calculateMinContentAuto(areaMainSize, crossSize) : (float) definiteMinContent;\n",
      "            Float maxMainSize = isColumnDirection ?\n",
      "                    retrieveMaxHeightForMainDirection(this.renderer) : this.renderer.retrieveMaxWidth(areaMainSize);\n",
      "            // As for now we assume that max width should be calculated so\n",
      "            this.maxContent = maxMainSize == null ? AbstractRenderer.INF : (float) maxMainSize;\n",
      "        }\n",
      "\n",
      "        public Rectangle toRectangle() {\n",
      "            return isColumnDirection ?\n",
      "                    new Rectangle(xShift, yShift, getOuterCrossSize(crossSize), getOuterMainSize(mainSize)) :\n",
      "                    new Rectangle(xShift, yShift, getOuterMainSize(mainSize), getOuterCrossSize(crossSize));\n",
      "        }\n",
      "\n",
      "        float getOuterMainSize(float size) {\n",
      "            return isColumnDirection ?\n",
      "                    renderer.applyMarginsBordersPaddings(new Rectangle(0, size), true).getHeight() :\n",
      "                    renderer.applyMarginsBordersPaddings(new Rectangle(size, 0), true).getWidth();\n",
      "        }\n",
      "\n",
      "        float getInnerMainSize(float size) {\n",
      "            return isColumnDirection ?\n",
      "                    renderer.applyMarginsBordersPaddings(new Rectangle(0, size), false).getHeight() :\n",
      "                    renderer.applyMarginsBordersPaddings(new Rectangle(size, 0), false).getWidth();\n",
      "        }\n",
      "\n",
      "        float getOuterCrossSize(float size) {\n",
      "            return isColumnDirection ?\n",
      "                    renderer.applyMarginsBordersPaddings(new Rectangle(size, 0), true).getWidth() :\n",
      "                    renderer.applyMarginsBordersPaddings(new Rectangle(0, size), true).getHeight();\n",
      "        }\n",
      "\n",
      "        float getInnerCrossSize(float size) {\n",
      "            return isColumnDirection ?\n",
      "                    renderer.applyMarginsBordersPaddings(new Rectangle(size, 0), false).getWidth() :\n",
      "                    renderer.applyMarginsBordersPaddings(new Rectangle(0, size), false).getHeight();\n",
      "        }\n",
      "\n",
      "        private float calculateMinContentAuto(float flexContainerMainSize, float crossSize) {\n",
      "            // Automatic Minimum Size of Flex Items https://www.w3.org/TR/css-flexbox-1/#content-based-minimum-size\n",
      "            Float specifiedSizeSuggestion = calculateSpecifiedSizeSuggestion(flexContainerMainSize);\n",
      "            float contentSizeSuggestion = calculateContentSizeSuggestion(flexContainerMainSize, crossSize);\n",
      "            if (renderer.hasAspectRatio() && specifiedSizeSuggestion == null) {\n",
      "                // However, if the box has an aspect ratio and no specified size,\n",
      "                // its content-based minimum size is the smaller of its content size suggestion\n",
      "                // and its transferred size suggestion\n",
      "                Float transferredSizeSuggestion = calculateTransferredSizeSuggestion(flexContainerMainSize);\n",
      "                if (transferredSizeSuggestion == null) {\n",
      "                    return contentSizeSuggestion;\n",
      "                } else {\n",
      "                    return Math.min(contentSizeSuggestion, (float) transferredSizeSuggestion);\n",
      "                }\n",
      "            } else if (specifiedSizeSuggestion == null) {\n",
      "                // If the box has neither a specified size suggestion nor an aspect ratio,\n",
      "                // its content-based minimum size is the content size suggestion.\n",
      "                return contentSizeSuggestion;\n",
      "            } else {\n",
      "                // In general, the content-based minimum size of a flex item is the smaller\n",
      "                // of its content size suggestion and its specified size suggestion\n",
      "                return Math.min(contentSizeSuggestion, (float) specifiedSizeSuggestion);\n",
      "            }\n",
      "        }\n",
      "\n",
      "        /**\n",
      "         * If the item has an intrinsic aspect ratio and its computed cross size property is definite,\n",
      "         * then the transferred size suggestion is that size (clamped by its min and max cross size properties\n",
      "         * if they are definite), converted through the aspect ratio. It is otherwise undefined.\n",
      "         *\n",
      "         * @return transferred size suggestion if it can be calculated, null otherwise\n",
      "         */\n",
      "        private Float calculateTransferredSizeSuggestion(float flexContainerMainSize) {\n",
      "            Float transferredSizeSuggestion = null;\n",
      "            Float crossSize = isColumnDirection ?\n",
      "                    renderer.retrieveWidth(flexContainerMainSize) : renderer.retrieveHeight();\n",
      "            if (renderer.hasAspectRatio() && crossSize != null) {\n",
      "                transferredSizeSuggestion = crossSize * renderer.getAspectRatio();\n",
      "\n",
      "                transferredSizeSuggestion = clampValueByCrossSizesConvertedThroughAspectRatio(\n",
      "                        (float) transferredSizeSuggestion, flexContainerMainSize);\n",
      "            }\n",
      "            return transferredSizeSuggestion;\n",
      "        }\n",
      "\n",
      "        /**\n",
      "         * If the item\u2019s computed main size property is definite,\n",
      "         * then the specified size suggestion is that size (clamped by its max main size property if it\u2019s definite).\n",
      "         * It is otherwise undefined.\n",
      "         *\n",
      "         * @param flexContainerMainSize the width of the flex container\n",
      "         * @return specified size suggestion if it's definite, null otherwise\n",
      "         */\n",
      "        private Float calculateSpecifiedSizeSuggestion(float flexContainerMainSize) {\n",
      "            Float mainSizeSuggestion = null;\n",
      "            if (isColumnDirection) {\n",
      "                if (renderer.hasProperty(Property.HEIGHT)) {\n",
      "                    mainSizeSuggestion = renderer.retrieveHeight();\n",
      "                }\n",
      "            } else {\n",
      "                if (renderer.hasProperty(Property.WIDTH)) {\n",
      "                    mainSizeSuggestion = renderer.retrieveWidth(flexContainerMainSize);\n",
      "                }\n",
      "            }\n",
      "\n",
      "            return mainSizeSuggestion;\n",
      "        }\n",
      "\n",
      "        /**\n",
      "         * The content size suggestion is the min-content size in the main axis, clamped, if it has an aspect ratio,\n",
      "         * by any definite min and max cross size properties converted through the aspect ratio,\n",
      "         * and then further clamped by the max main size property if that is definite.\n",
      "         *\n",
      "         * @param flexContainerMainSize the width of the flex container\n",
      "         * @return content size suggestion\n",
      "         */\n",
      "        private float calculateContentSizeSuggestion(float flexContainerMainSize, float crossSize) {\n",
      "            final UnitValue rendererWidth = renderer.<UnitValue>replaceOwnProperty(Property.WIDTH, null);\n",
      "            final UnitValue rendererHeight = renderer.<UnitValue>replaceOwnProperty(Property.HEIGHT, null);\n",
      "            float minContentSize;\n",
      "            if (isColumnDirection) {\n",
      "                Float height = retrieveMinHeightForMainDirection(renderer);\n",
      "                if (height == null) {\n",
      "                    height = calculateHeight(renderer, crossSize);\n",
      "                }\n",
      "                minContentSize = getInnerMainSize((float) height);\n",
      "            } else {\n",
      "                MinMaxWidth minMaxWidth = renderer.getMinMaxWidth();\n",
      "                minContentSize = getInnerMainSize(minMaxWidth.getMinWidth());\n",
      "            }\n",
      "            renderer.returnBackOwnProperty(Property.HEIGHT, rendererHeight);\n",
      "            renderer.returnBackOwnProperty(Property.WIDTH, rendererWidth);\n",
      "\n",
      "            if (renderer.hasAspectRatio()) {\n",
      "                minContentSize =\n",
      "                        clampValueByCrossSizesConvertedThroughAspectRatio(minContentSize, flexContainerMainSize);\n",
      "            }\n",
      "            Float maxMainSize = isColumnDirection ? retrieveMaxHeightForMainDirection(renderer)\n",
      "                    : renderer.retrieveMaxWidth(flexContainerMainSize);\n",
      "            if (maxMainSize == null) {\n",
      "                maxMainSize = AbstractRenderer.INF;\n",
      "            }\n",
      "\n",
      "            return Math.min(minContentSize, (float) maxMainSize);\n",
      "        }\n",
      "\n",
      "        private float clampValueByCrossSizesConvertedThroughAspectRatio(float value, float flexContainerMainSize) {\n",
      "            Float maxCrossSize = isColumnDirection ?\n",
      "                    renderer.retrieveMaxWidth(flexContainerMainSize) : renderer.retrieveMaxHeight();\n",
      "            if (maxCrossSize == null ||\n",
      "                    !renderer.hasProperty(isColumnDirection ? Property.MAX_WIDTH : Property.MAX_HEIGHT)) {\n",
      "                maxCrossSize = AbstractRenderer.INF;\n",
      "            }\n",
      "            Float minCrossSize = isColumnDirection\n",
      "                    ? renderer.retrieveMinWidth(flexContainerMainSize) : renderer.retrieveMinHeight();\n",
      "            if (minCrossSize == null\n",
      "                    || !renderer.hasProperty(isColumnDirection ? Property.MIN_WIDTH : Property.MIN_HEIGHT)) {\n",
      "                minCrossSize = 0F;\n",
      "            }\n",
      "\n",
      "            return Math.min(\n",
      "                    Math.max((float) (minCrossSize * renderer.getAspectRatio()), value),\n",
      "                    (float) (maxCrossSize * renderer.getAspectRatio()));\n",
      "        }\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.layout.renderer;\n",
      "\n",
      "import com.itextpdf.io.font.constants.StandardFontFamilies;\n",
      "import com.itextpdf.io.font.constants.StandardFonts;\n",
      "import com.itextpdf.io.image.ImageDataFactory;\n",
      "import com.itextpdf.kernel.geom.PageSize;\n",
      "import com.itextpdf.kernel.geom.Rectangle;\n",
      "import com.itextpdf.kernel.pdf.PdfDocument;\n",
      "import com.itextpdf.kernel.pdf.PdfWriter;\n",
      "import com.itextpdf.kernel.pdf.xobject.PdfFormXObject;\n",
      "import com.itextpdf.layout.Document;\n",
      "import com.itextpdf.layout.Style;\n",
      "import com.itextpdf.layout.borders.SolidBorder;\n",
      "import com.itextpdf.layout.element.Div;\n",
      "import com.itextpdf.layout.element.IBlockElement;\n",
      "import com.itextpdf.layout.element.IElement;\n",
      "import com.itextpdf.layout.element.Image;\n",
      "import com.itextpdf.layout.element.Paragraph;\n",
      "import com.itextpdf.layout.font.FontProvider;\n",
      "import com.itextpdf.layout.properties.AlignmentPropertyValue;\n",
      "import com.itextpdf.layout.properties.FlexDirectionPropertyValue;\n",
      "import com.itextpdf.layout.properties.FlexWrapPropertyValue;\n",
      "import com.itextpdf.layout.properties.JustifyContent;\n",
      "import com.itextpdf.layout.properties.Property;\n",
      "import com.itextpdf.layout.properties.UnitValue;\n",
      "import com.itextpdf.test.ExtendedITextTest;\n",
      "import com.itextpdf.test.annotations.type.UnitTest;\n",
      "\n",
      "import java.io.ByteArrayOutputStream;\n",
      "import java.net.MalformedURLException;\n",
      "import java.util.ArrayList;\n",
      "import java.util.Arrays;\n",
      "import java.util.List;\n",
      "\n",
      "import org.junit.Assert;\n",
      "import org.junit.Test;\n",
      "import org.junit.experimental.categories.Category;\n",
      "\n",
      "@Category(UnitTest.class)\n",
      "public class FlexUtilTest extends ExtendedITextTest {\n",
      "\n",
      "    /* To see integration tests for flex algorithm go to FlexAlgoTest in html2pdf module.\n",
      "    The names are preserved: one can go to FlexAlgoTest and see the corresponding tests, but be aware that with\n",
      "    time they might change and we will not maintain such correspondence */\n",
      "\n",
      "    private static final float EPS = 0.001f;\n",
      "\n",
      "    private static final Style DEFAULT_STYLE;\n",
      "    private static final Style WRAP_STYLE;\n",
      "    private static final Style COLUMN_STYLE;\n",
      "\n",
      "    private static final List<UnitValue> NULL_FLEX_BASIS_LIST;\n",
      "\n",
      "    private static final String SOURCE_FOLDER = \"./src/test/resources/com/itextpdf/layout/FlexUtilTest/\";\n",
      "\n",
      "    static {\n",
      "        DEFAULT_STYLE = new Style().setWidth(400).setHeight(100);\n",
      "\n",
      "        WRAP_STYLE = new Style().setWidth(400).setHeight(100);\n",
      "        WRAP_STYLE.setProperty(Property.FLEX_WRAP, FlexWrapPropertyValue.WRAP);\n",
      "\n",
      "        COLUMN_STYLE = new Style().setWidth(100).setHeight(400);\n",
      "        COLUMN_STYLE.setProperty(Property.FLEX_DIRECTION, FlexDirectionPropertyValue.COLUMN);\n",
      "\n",
      "        NULL_FLEX_BASIS_LIST = new ArrayList<UnitValue>();\n",
      "        for (int i = 0; i < 3; i++) {\n",
      "            NULL_FLEX_BASIS_LIST.add(null);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void defaultTest01() {\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                NULL_FLEX_BASIS_LIST,\n",
      "                Arrays.asList(1f, 1f, 1f),\n",
      "                Arrays.asList(0f, 0f, 0f)\n",
      "        );\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertFalse(rectangleTable.isEmpty());\n",
      "        for (List<FlexItemInfo> line : rectangleTable) {\n",
      "            for (FlexItemInfo flexItemInfo : line) {\n",
      "                Assert.assertEquals(400f / 3, flexItemInfo.getRectangle().getWidth(), EPS);\n",
      "                Assert.assertEquals(100.0f, flexItemInfo.getRectangle().getHeight(), EPS);\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void item1BasisGtWidthGrow0Shrink01Test01() {\n",
      "        Rectangle bBox = new Rectangle(545, 842);\n",
      "        List<UnitValue> flexBasisValues = Arrays.<UnitValue>asList(\n",
      "                UnitValue.createPointValue(150f),\n",
      "                UnitValue.createPointValue(50f)\n",
      "        );\n",
      "\n",
      "        Div div = new Div().setWidth(100).setHeight(100);\n",
      "\n",
      "        DocumentRenderer documentRenderer = new DocumentRenderer(\n",
      "                new Document(new PdfDocument(new PdfWriter(new ByteArrayOutputStream()))));\n",
      "\n",
      "        FlexContainerRenderer flexContainerRenderer = new FlexContainerRenderer(div);\n",
      "        flexContainerRenderer.setParent(documentRenderer);\n",
      "        div.setNextRenderer(flexContainerRenderer);\n",
      "\n",
      "        for (UnitValue flexBasisValue : flexBasisValues) {\n",
      "            Div flexItem = new Div().add(new Paragraph(\"x\"));\n",
      "            AbstractRenderer flexItemRenderer = (AbstractRenderer) flexItem.createRendererSubTree()\n",
      "                    .setParent(flexContainerRenderer);\n",
      "            flexItemRenderer.setProperty(Property.FLEX_GROW, 0f);\n",
      "            flexItemRenderer.setProperty(Property.FLEX_SHRINK, 0.1f);\n",
      "            flexItemRenderer.setProperty(Property.FLEX_BASIS, flexBasisValue);\n",
      "            flexContainerRenderer.addChild(flexItemRenderer);\n",
      "        }\n",
      "\n",
      "        List<List<FlexItemInfo>> rectangleTable =\n",
      "                FlexUtil.calculateChildrenRectangles(bBox, (FlexContainerRenderer) div.getRenderer());\n",
      "\n",
      "        Assert.assertEquals(135f, rectangleTable.get(0).get(0).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(45f, rectangleTable.get(0).get(1).getRectangle().getWidth(), EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void differentBasisGrow1Shrink0MarginBorderPaddingOnContainerTest01() {\n",
      "        Style style = new Style()\n",
      "                .setWidth(100)\n",
      "                .setHeight(100)\n",
      "                .setMargin(15)\n",
      "                .setBorder(new SolidBorder(10))\n",
      "                .setPadding(50);\n",
      "\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                style,\n",
      "                Arrays.<UnitValue>asList(UnitValue.createPointArray(new float[]{10f, 20f, 30f})),\n",
      "                Arrays.asList(1f, 1f, 1f),\n",
      "                Arrays.asList(0f, 0f, 0f)\n",
      "        );\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertFalse(rectangleTable.isEmpty());\n",
      "\n",
      "        Assert.assertEquals(23.333334f, rectangleTable.get(0).get(0).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(33.333336f, rectangleTable.get(0).get(1).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(43.333336f, rectangleTable.get(0).get(2).getRectangle().getWidth(), EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void differentBasisGrow1Shrink0MarginBorderPaddingOnContainerNoWidthTest01() {\n",
      "        Style style = new Style()\n",
      "                .setMargin(15)\n",
      "                .setBorder(new SolidBorder(10))\n",
      "                .setPadding(5);\n",
      "\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                style,\n",
      "                Arrays.<UnitValue>asList(UnitValue.createPointArray(new float[]{50f, 100f, 150f})),\n",
      "                Arrays.asList(1f, 1f, 1f),\n",
      "                Arrays.asList(0f, 0f, 0f)\n",
      "        );\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertFalse(rectangleTable.isEmpty());\n",
      "\n",
      "        Assert.assertEquals(104.333336f, rectangleTable.get(0).get(0).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(154.33334f, rectangleTable.get(0).get(1).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(204.33334f, rectangleTable.get(0).get(2).getRectangle().getWidth(), EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void simpleStretchTest01() {\n",
      "        Style stretchStyle = new Style(WRAP_STYLE);\n",
      "        stretchStyle.setProperty(Property.ALIGN_CONTENT, AlignmentPropertyValue.STRETCH);\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                stretchStyle,\n",
      "                Arrays.<UnitValue>asList(UnitValue.createPointValue(100f)),\n",
      "                Arrays.asList(0f),\n",
      "                Arrays.asList(0f)\n",
      "        );\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertFalse(rectangleTable.isEmpty());\n",
      "        for (List<FlexItemInfo> line : rectangleTable) {\n",
      "            for (FlexItemInfo flexItemInfo : line) {\n",
      "                Assert.assertEquals(100f, flexItemInfo.getRectangle().getWidth(), EPS);\n",
      "                Assert.assertEquals(100.0f, flexItemInfo.getRectangle().getHeight(), EPS);\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void basis100Grow0Shrink0ColumnTest() {\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                COLUMN_STYLE,\n",
      "                Arrays.<UnitValue>asList(UnitValue.createPointValue(100f), UnitValue.createPointValue(100f), UnitValue.createPointValue(100f)),\n",
      "                Arrays.asList(0f, 0f, 0f),\n",
      "                Arrays.asList(0f, 0f, 0f)\n",
      "        );\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertFalse(rectangleTable.isEmpty());\n",
      "        for (List<FlexItemInfo> line : rectangleTable) {\n",
      "            for (FlexItemInfo flexItemInfo : line) {\n",
      "                Assert.assertEquals(100.0f, flexItemInfo.getRectangle().getWidth(), EPS);\n",
      "                Assert.assertEquals(100.0f, flexItemInfo.getRectangle().getHeight(), EPS);\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void basis100Grow1Shrink0ColumnTest() {\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                COLUMN_STYLE,\n",
      "                Arrays.<UnitValue>asList(UnitValue.createPointValue(100f), UnitValue.createPointValue(100f), UnitValue.createPointValue(100f)),\n",
      "                Arrays.asList(1f, 1f, 1f),\n",
      "                Arrays.asList(0f, 0f, 0f)\n",
      "        );\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertFalse(rectangleTable.isEmpty());\n",
      "        for (List<FlexItemInfo> line : rectangleTable) {\n",
      "            for (FlexItemInfo flexItemInfo : line) {\n",
      "                Assert.assertEquals(100.0f, flexItemInfo.getRectangle().getWidth(), EPS);\n",
      "                Assert.assertEquals(133.3333f, flexItemInfo.getRectangle().getHeight(), EPS);\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void basis100Grow01Shrink0ColumnTest() {\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                COLUMN_STYLE,\n",
      "                Arrays.<UnitValue>asList(UnitValue.createPointValue(100f), UnitValue.createPointValue(100f), UnitValue.createPointValue(100f)),\n",
      "                Arrays.asList(0.1f, 0.1f, 0.1f),\n",
      "                Arrays.asList(0f, 0f, 0f)\n",
      "        );\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertFalse(rectangleTable.isEmpty());\n",
      "        for (List<FlexItemInfo> line : rectangleTable) {\n",
      "            for (FlexItemInfo flexItemInfo : line) {\n",
      "                Assert.assertEquals(100.0f, flexItemInfo.getRectangle().getWidth(), EPS);\n",
      "                Assert.assertEquals(110.0f, flexItemInfo.getRectangle().getHeight(), EPS);\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void basis200Grow0Shrink1ColumnTest() {\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                COLUMN_STYLE,\n",
      "                Arrays.<UnitValue>asList(UnitValue.createPointValue(200f), UnitValue.createPointValue(200f), UnitValue.createPointValue(200f)),\n",
      "                Arrays.asList(0f, 0f, 0f),\n",
      "                Arrays.asList(1f, 1f, 1f)\n",
      "        );\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertFalse(rectangleTable.isEmpty());\n",
      "        for (List<FlexItemInfo> line : rectangleTable) {\n",
      "            for (FlexItemInfo flexItemInfo : line) {\n",
      "                Assert.assertEquals(100.0f, flexItemInfo.getRectangle().getWidth(), EPS);\n",
      "                Assert.assertEquals(133.33333f, flexItemInfo.getRectangle().getHeight(), EPS);\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void basis100Grow0CustomShrinkContainerHeight50ColumnTest() {\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                new Style(COLUMN_STYLE).setHeight(50),\n",
      "                Arrays.<UnitValue>asList(UnitValue.createPointValue(100f), UnitValue.createPointValue(100f)),\n",
      "                Arrays.asList(0f, 0f),\n",
      "                Arrays.asList(1f, 3f)\n",
      "        );\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertFalse(rectangleTable.isEmpty());\n",
      "        for (List<FlexItemInfo> line : rectangleTable) {\n",
      "            for (FlexItemInfo flexItemInfo : line) {\n",
      "                Assert.assertEquals(100.0f, flexItemInfo.getRectangle().getWidth(), EPS);\n",
      "            }\n",
      "        }\n",
      "\n",
      "        // Expected because content of the element cannot be less than this value\n",
      "        Assert.assertEquals(25.9375f, rectangleTable.get(0).get(0).getRectangle().getHeight(), EPS);\n",
      "        Assert.assertEquals(25.9375f, rectangleTable.get(0).get(1).getRectangle().getHeight(), EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void basis200Grow0CustomShrinkColumnTest1() {\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                COLUMN_STYLE,\n",
      "                Arrays.<UnitValue>asList(UnitValue.createPointValue(200f), UnitValue.createPointValue(200f), UnitValue.createPointValue(200f)),\n",
      "                Arrays.asList(0f, 0f, 0f),\n",
      "                Arrays.asList(0f, 1f, 3f)\n",
      "        );\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertFalse(rectangleTable.isEmpty());\n",
      "        for (List<FlexItemInfo> line : rectangleTable) {\n",
      "            for (FlexItemInfo flexItemInfo : line) {\n",
      "                Assert.assertEquals(100.0f, flexItemInfo.getRectangle().getWidth(), EPS);\n",
      "            }\n",
      "        }\n",
      "\n",
      "        Assert.assertEquals(200f, rectangleTable.get(0).get(0).getRectangle().getHeight(), EPS);\n",
      "        Assert.assertEquals(150f, rectangleTable.get(0).get(1).getRectangle().getHeight(), EPS);\n",
      "        Assert.assertEquals(50f, rectangleTable.get(0).get(2).getRectangle().getHeight(), EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void basis200Grow0Shrink01ColumnTest() {\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                COLUMN_STYLE,\n",
      "                Arrays.<UnitValue>asList(UnitValue.createPointValue(200f), UnitValue.createPointValue(200f), UnitValue.createPointValue(200f)),\n",
      "                Arrays.asList(0f, 0f, 0f),\n",
      "                Arrays.asList(0.1f, 0.1f, 0.1f)\n",
      "        );\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertFalse(rectangleTable.isEmpty());\n",
      "        for (List<FlexItemInfo> line : rectangleTable) {\n",
      "            for (FlexItemInfo flexItemInfo : line) {\n",
      "                Assert.assertEquals(100.0f, flexItemInfo.getRectangle().getWidth(), EPS);\n",
      "                Assert.assertEquals(180f, flexItemInfo.getRectangle().getHeight(), EPS);\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void basis200Height150Grow0Shrink1ColumnTest() {\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                COLUMN_STYLE,\n",
      "                Arrays.<UnitValue>asList(UnitValue.createPointValue(200f), UnitValue.createPointValue(200f), UnitValue.createPointValue(200f)),\n",
      "                Arrays.asList(0f, 0f, 0f),\n",
      "                Arrays.asList(1f, 1f, 1f),\n",
      "                new Style().setHeight(UnitValue.createPointValue(150))\n",
      "        );\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertFalse(rectangleTable.isEmpty());\n",
      "        for (List<FlexItemInfo> line : rectangleTable) {\n",
      "            for (FlexItemInfo flexItemInfo : line) {\n",
      "                Assert.assertEquals(100.0f, flexItemInfo.getRectangle().getWidth(), EPS);\n",
      "                Assert.assertEquals(133.3333f, flexItemInfo.getRectangle().getHeight(), EPS);\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void basis100Height150Grow1Shrink0ColumnTest() {\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                COLUMN_STYLE,\n",
      "                Arrays.<UnitValue>asList(UnitValue.createPointValue(100f), UnitValue.createPointValue(100f), UnitValue.createPointValue(100f)),\n",
      "                Arrays.asList(1f, 1f, 1f),\n",
      "                Arrays.asList(0f, 0f, 0f),\n",
      "                new Style().setHeight(UnitValue.createPointValue(150))\n",
      "        );\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertFalse(rectangleTable.isEmpty());\n",
      "        for (List<FlexItemInfo> line : rectangleTable) {\n",
      "            for (FlexItemInfo flexItemInfo : line) {\n",
      "                Assert.assertEquals(100.0f, flexItemInfo.getRectangle().getWidth(), EPS);\n",
      "                Assert.assertEquals(133.3333f, flexItemInfo.getRectangle().getHeight(), EPS);\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void basis100Height50Grow1Shrink0ColumnTest() {\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                COLUMN_STYLE,\n",
      "                Arrays.<UnitValue>asList(UnitValue.createPointValue(100f), UnitValue.createPointValue(100f), UnitValue.createPointValue(100f)),\n",
      "                Arrays.asList(1f, 1f, 1f),\n",
      "                Arrays.asList(0f, 0f, 0f),\n",
      "                new Style().setHeight(UnitValue.createPointValue(50))\n",
      "        );\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertFalse(rectangleTable.isEmpty());\n",
      "        for (List<FlexItemInfo> line : rectangleTable) {\n",
      "            for (FlexItemInfo flexItemInfo : line) {\n",
      "                Assert.assertEquals(100.0f, flexItemInfo.getRectangle().getWidth(), EPS);\n",
      "                Assert.assertEquals(133.3333f, flexItemInfo.getRectangle().getHeight(), EPS);\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void basis100MaxHeight100Grow1Shrink0ColumnTest() {\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                COLUMN_STYLE,\n",
      "                Arrays.<UnitValue>asList(UnitValue.createPointValue(100f), UnitValue.createPointValue(100f), UnitValue.createPointValue(100f)),\n",
      "                Arrays.asList(1f, 1f, 1f),\n",
      "                Arrays.asList(0f, 0f, 0f),\n",
      "                new Style().setMaxHeight(UnitValue.createPointValue(100))\n",
      "        );\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertFalse(rectangleTable.isEmpty());\n",
      "        for (List<FlexItemInfo> line : rectangleTable) {\n",
      "            for (FlexItemInfo flexItemInfo : line) {\n",
      "                Assert.assertEquals(100.0f, flexItemInfo.getRectangle().getWidth(), EPS);\n",
      "                Assert.assertEquals(100.0f, flexItemInfo.getRectangle().getHeight(), EPS);\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void basis200MinHeight150Grow0Shrink1ColumnTest() {\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                COLUMN_STYLE,\n",
      "                Arrays.<UnitValue>asList(UnitValue.createPointValue(200f), UnitValue.createPointValue(200f), UnitValue.createPointValue(200f)),\n",
      "                Arrays.asList(0f, 0f, 0f),\n",
      "                Arrays.asList(1f, 1f, 1f),\n",
      "                new Style().setMinHeight(UnitValue.createPointValue(150))\n",
      "        );\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertFalse(rectangleTable.isEmpty());\n",
      "        for (List<FlexItemInfo> line : rectangleTable) {\n",
      "            for (FlexItemInfo flexItemInfo : line) {\n",
      "                Assert.assertEquals(100f, flexItemInfo.getRectangle().getWidth(), EPS);\n",
      "                Assert.assertEquals(150f, flexItemInfo.getRectangle().getHeight(), EPS);\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void usualDirectionColumnWithDefiniteWidthTest() {\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                COLUMN_STYLE,\n",
      "                Arrays.<UnitValue>asList(UnitValue.createPointValue(100f), UnitValue.createPointValue(100f), UnitValue.createPointValue(100f)),\n",
      "                Arrays.asList(1f, 1f, 1f),\n",
      "                Arrays.asList(0f, 0f, 0f),\n",
      "                new Style().setWidth(UnitValue.createPointValue(50))\n",
      "        );\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertFalse(rectangleTable.isEmpty());\n",
      "        for (List<FlexItemInfo> line : rectangleTable) {\n",
      "            for (FlexItemInfo flexItemInfo : line) {\n",
      "                Assert.assertEquals(50.0f, flexItemInfo.getRectangle().getWidth(), EPS);\n",
      "                Assert.assertEquals(133.3333f, flexItemInfo.getRectangle().getHeight(), EPS);\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void usualDirectionColumnWithDefiniteMaxWidthTest() {\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                COLUMN_STYLE,\n",
      "                Arrays.<UnitValue>asList(UnitValue.createPointValue(100f), UnitValue.createPointValue(100f), UnitValue.createPointValue(100f)),\n",
      "                Arrays.asList(1f, 1f, 1f),\n",
      "                Arrays.asList(0f, 0f, 0f),\n",
      "                new Style().setMaxWidth(UnitValue.createPointValue(50))\n",
      "        );\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertFalse(rectangleTable.isEmpty());\n",
      "        for (List<FlexItemInfo> line : rectangleTable) {\n",
      "            for (FlexItemInfo flexItemInfo : line) {\n",
      "                Assert.assertEquals(50.0f, flexItemInfo.getRectangle().getWidth(), EPS);\n",
      "                Assert.assertEquals(133.3333f, flexItemInfo.getRectangle().getHeight(), EPS);\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void usualDirectionColumnWithDefiniteMinWidthTest() {\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                COLUMN_STYLE,\n",
      "                Arrays.<UnitValue>asList(UnitValue.createPointValue(100f), UnitValue.createPointValue(100f), UnitValue.createPointValue(100f)),\n",
      "                Arrays.asList(1f, 1f, 1f),\n",
      "                Arrays.asList(0f, 0f, 0f),\n",
      "                new Style().setMinWidth(UnitValue.createPointValue(150))\n",
      "        );\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertFalse(rectangleTable.isEmpty());\n",
      "        for (List<FlexItemInfo> line : rectangleTable) {\n",
      "            for (FlexItemInfo flexItemInfo : line) {\n",
      "                Assert.assertEquals(150.0f, flexItemInfo.getRectangle().getWidth(), EPS);\n",
      "                Assert.assertEquals(133.3333f, flexItemInfo.getRectangle().getHeight(), EPS);\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void directionColumnWithoutBasisWithDefiniteHeightTest() {\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                COLUMN_STYLE,\n",
      "                NULL_FLEX_BASIS_LIST,\n",
      "                Arrays.asList(1f, 1f, 1f),\n",
      "                Arrays.asList(0f, 0f, 0f),\n",
      "                new Style().setHeight(UnitValue.createPointValue(50))\n",
      "        );\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertFalse(rectangleTable.isEmpty());\n",
      "        for (List<FlexItemInfo> line : rectangleTable) {\n",
      "            for (FlexItemInfo flexItemInfo : line) {\n",
      "                Assert.assertEquals(100.0f, flexItemInfo.getRectangle().getWidth(), EPS);\n",
      "                Assert.assertEquals(133.33333f, flexItemInfo.getRectangle().getHeight(), EPS);\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void directionColumnWithWrapElementsToGrowTest() {\n",
      "        Style columnWrapStyle = new Style(WRAP_STYLE);\n",
      "        columnWrapStyle.setProperty(Property.FLEX_DIRECTION, FlexDirectionPropertyValue.COLUMN);\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                columnWrapStyle,\n",
      "                Arrays.<UnitValue>asList(UnitValue.createPointValue(75f), UnitValue.createPointValue(75f), UnitValue.createPointValue(75f)),\n",
      "                Arrays.asList(1f, 1f, 1f),\n",
      "                Arrays.asList(0f, 0f, 0f)\n",
      "        );\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertEquals(3, rectangleTable.size());\n",
      "\n",
      "        for (List<FlexItemInfo> line : rectangleTable) {\n",
      "            for (FlexItemInfo flexItemInfo : line) {\n",
      "                Assert.assertEquals(133.33333f, flexItemInfo.getRectangle().getWidth(), EPS);\n",
      "                Assert.assertEquals(100.0f, flexItemInfo.getRectangle().getHeight(), EPS);\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void directionColumnWithWrapElementsNotToGrowTest() {\n",
      "        Style columnWrapStyle = new Style(WRAP_STYLE);\n",
      "        columnWrapStyle.setProperty(Property.FLEX_DIRECTION, FlexDirectionPropertyValue.COLUMN);\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                columnWrapStyle,\n",
      "                Arrays.<UnitValue>asList(UnitValue.createPointValue(75f), UnitValue.createPointValue(75f), UnitValue.createPointValue(75f)),\n",
      "                Arrays.asList(0f, 0f, 0f),\n",
      "                Arrays.asList(0f, 0f, 0f)\n",
      "        );\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertEquals(3, rectangleTable.size());\n",
      "\n",
      "        for (List<FlexItemInfo> line : rectangleTable) {\n",
      "            for (FlexItemInfo flexItemInfo : line) {\n",
      "                Assert.assertEquals(133.33333f, flexItemInfo.getRectangle().getWidth(), EPS);\n",
      "                Assert.assertEquals(75.0f, flexItemInfo.getRectangle().getHeight(), EPS);\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void directionColumnWithWrapElementsToShrinkTest() {\n",
      "        Style columnWrapStyle = new Style(WRAP_STYLE);\n",
      "        columnWrapStyle.setProperty(Property.FLEX_DIRECTION, FlexDirectionPropertyValue.COLUMN);\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                columnWrapStyle,\n",
      "                Arrays.<UnitValue>asList(UnitValue.createPointValue(120f), UnitValue.createPointValue(120f), UnitValue.createPointValue(120f)),\n",
      "                Arrays.asList(0f, 0f, 0f),\n",
      "                Arrays.asList(1f, 1f, 1f)\n",
      "        );\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertEquals(3, rectangleTable.size());\n",
      "\n",
      "        for (List<FlexItemInfo> line : rectangleTable) {\n",
      "            for (FlexItemInfo flexItemInfo : line) {\n",
      "                Assert.assertEquals(133.33333f, flexItemInfo.getRectangle().getWidth(), EPS);\n",
      "                Assert.assertEquals(100.0f, flexItemInfo.getRectangle().getHeight(), EPS);\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void directionColumnWithWrapElementsNotToShrinkTest() {\n",
      "        Style columnWrapStyle = new Style(WRAP_STYLE);\n",
      "        columnWrapStyle.setProperty(Property.FLEX_DIRECTION, FlexDirectionPropertyValue.COLUMN);\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                columnWrapStyle,\n",
      "                Arrays.<UnitValue>asList(UnitValue.createPointValue(120f), UnitValue.createPointValue(120f), UnitValue.createPointValue(120f)),\n",
      "                Arrays.asList(0f, 0f, 0f),\n",
      "                Arrays.asList(0f, 0f, 0f)\n",
      "        );\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertEquals(3, rectangleTable.size());\n",
      "\n",
      "        for (List<FlexItemInfo> line : rectangleTable) {\n",
      "            for (FlexItemInfo flexItemInfo : line) {\n",
      "                Assert.assertEquals(133.33333f, flexItemInfo.getRectangle().getWidth(), EPS);\n",
      "                Assert.assertEquals(120.0f, flexItemInfo.getRectangle().getHeight(), EPS);\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void directionColumnWithWrapDefiniteWidthAndHeightTest() {\n",
      "        Style columnWrapStyle = new Style(WRAP_STYLE);\n",
      "        columnWrapStyle.setProperty(Property.FLEX_DIRECTION, FlexDirectionPropertyValue.COLUMN);\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                columnWrapStyle,\n",
      "                Arrays.<UnitValue>asList(UnitValue.createPointValue(75f), UnitValue.createPointValue(75f), UnitValue.createPointValue(75f)),\n",
      "                Arrays.asList(0f, 0f, 0f),\n",
      "                Arrays.asList(0f, 0f, 0f),\n",
      "                new Style().setWidth(100f).setHeight(120f)\n",
      "        );\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertEquals(3, rectangleTable.size());\n",
      "\n",
      "        for (List<FlexItemInfo> line : rectangleTable) {\n",
      "            for (FlexItemInfo flexItemInfo : line) {\n",
      "                Assert.assertEquals(100.0f, flexItemInfo.getRectangle().getWidth(), EPS);\n",
      "                Assert.assertEquals(75.0f, flexItemInfo.getRectangle().getHeight(), EPS);\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void directionColumnWithWrapWithAlignItemsAndJustifyContentTest() {\n",
      "        Style columnWrapStyle = new Style(WRAP_STYLE);\n",
      "        columnWrapStyle.setProperty(Property.FLEX_DIRECTION, FlexDirectionPropertyValue.COLUMN);\n",
      "        columnWrapStyle.setProperty(Property.ALIGN_ITEMS, AlignmentPropertyValue.FLEX_START);\n",
      "        columnWrapStyle.setProperty(Property.JUSTIFY_CONTENT, JustifyContent.FLEX_END);\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                columnWrapStyle,\n",
      "                Arrays.<UnitValue>asList(UnitValue.createPointValue(75f), UnitValue.createPointValue(75f), UnitValue.createPointValue(75f)),\n",
      "                Arrays.asList(0f, 0f, 0f),\n",
      "                Arrays.asList(0f, 0f, 0f)\n",
      "        );\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertEquals(3, rectangleTable.size());\n",
      "\n",
      "        for (int i = 0; i < rectangleTable.size(); ++i) {\n",
      "            List<FlexItemInfo> line = rectangleTable.get(i);\n",
      "            for (FlexItemInfo flexItemInfo : line) {\n",
      "                Assert.assertEquals(6.0f, flexItemInfo.getRectangle().getWidth(), EPS);\n",
      "                Assert.assertEquals(75.0f, flexItemInfo.getRectangle().getHeight(), EPS);\n",
      "                Assert.assertEquals(i == 0 ? 0.0f : 127.33334, flexItemInfo.getRectangle().getX(), EPS);\n",
      "                Assert.assertEquals(25.0f, flexItemInfo.getRectangle().getY(), EPS);\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void directionColumnWithAlignItemsAndJustifyContentTest1() {\n",
      "        Style columnWrapStyle = new Style(COLUMN_STYLE);\n",
      "        columnWrapStyle.setProperty(Property.ALIGN_ITEMS, AlignmentPropertyValue.FLEX_START);\n",
      "        columnWrapStyle.setProperty(Property.JUSTIFY_CONTENT, JustifyContent.FLEX_END);\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                columnWrapStyle,\n",
      "                Arrays.<UnitValue>asList(UnitValue.createPointValue(75f), UnitValue.createPointValue(75f), UnitValue.createPointValue(75f)),\n",
      "                Arrays.asList(0f, 0f, 0f),\n",
      "                Arrays.asList(0f, 0f, 0f)\n",
      "        );\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertFalse(rectangleTable.isEmpty());\n",
      "        for (List<FlexItemInfo> line : rectangleTable) {\n",
      "            for (FlexItemInfo flexItemInfo : line) {\n",
      "                Assert.assertEquals(6.0f, flexItemInfo.getRectangle().getWidth(), EPS);\n",
      "                Assert.assertEquals(75.0f, flexItemInfo.getRectangle().getHeight(), EPS);\n",
      "                Assert.assertEquals(0.0f, flexItemInfo.getRectangle().getX(), EPS);\n",
      "            }\n",
      "            Assert.assertEquals(175.0f, line.get(0).getRectangle().getY(), EPS);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void directionColumnWithAlignItemsAndJustifyContentTest2() {\n",
      "        Style columnWrapStyle = new Style(COLUMN_STYLE);\n",
      "        columnWrapStyle.setProperty(Property.ALIGN_ITEMS, AlignmentPropertyValue.CENTER);\n",
      "        columnWrapStyle.setProperty(Property.JUSTIFY_CONTENT, JustifyContent.FLEX_START);\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                columnWrapStyle,\n",
      "                Arrays.<UnitValue>asList(UnitValue.createPointValue(75f), UnitValue.createPointValue(75f), UnitValue.createPointValue(75f)),\n",
      "                Arrays.asList(0f, 0f, 0f),\n",
      "                Arrays.asList(0f, 0f, 0f)\n",
      "        );\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertFalse(rectangleTable.isEmpty());\n",
      "        for (List<FlexItemInfo> line : rectangleTable) {\n",
      "            for (FlexItemInfo flexItemInfo : line) {\n",
      "                Assert.assertEquals(6.0f, flexItemInfo.getRectangle().getWidth(), EPS);\n",
      "                Assert.assertEquals(75.0f, flexItemInfo.getRectangle().getHeight(), EPS);\n",
      "                Assert.assertEquals(47.0f, flexItemInfo.getRectangle().getX(), EPS);\n",
      "                Assert.assertEquals(0.0f, flexItemInfo.getRectangle().getY(), EPS);\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void directionColumnWithAlignItemsAndJustifyContentTest3() {\n",
      "        Style columnWrapStyle = new Style(COLUMN_STYLE);\n",
      "        columnWrapStyle.setProperty(Property.ALIGN_ITEMS, AlignmentPropertyValue.FLEX_END);\n",
      "        columnWrapStyle.setProperty(Property.JUSTIFY_CONTENT, JustifyContent.CENTER);\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                columnWrapStyle,\n",
      "                Arrays.<UnitValue>asList(UnitValue.createPointValue(75f), UnitValue.createPointValue(75f), UnitValue.createPointValue(75f)),\n",
      "                Arrays.asList(0f, 0f, 0f),\n",
      "                Arrays.asList(0f, 0f, 0f)\n",
      "        );\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertFalse(rectangleTable.isEmpty());\n",
      "        for (List<FlexItemInfo> line : rectangleTable) {\n",
      "            for (FlexItemInfo flexItemInfo : line) {\n",
      "                Assert.assertEquals(6.0f, flexItemInfo.getRectangle().getWidth(), EPS);\n",
      "                Assert.assertEquals(75.0f, flexItemInfo.getRectangle().getHeight(), EPS);\n",
      "                Assert.assertEquals(94.0f, flexItemInfo.getRectangle().getX(), EPS);\n",
      "            }\n",
      "            Assert.assertEquals(87.5f, line.get(0).getRectangle().getY(), EPS);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void imgAsFlexItemTest01() throws MalformedURLException {\n",
      "        Rectangle bBox = new Rectangle(575, 842);\n",
      "        List<UnitValue> flexBasisValues = Arrays.<UnitValue>asList(\n",
      "                UnitValue.createPointValue(50f),\n",
      "                UnitValue.createPointValue(30f)\n",
      "        );\n",
      "\n",
      "        Div div = new Div().setWidth(100).setHeight(100);\n",
      "\n",
      "        DocumentRenderer documentRenderer = new DocumentRenderer(\n",
      "                new Document(new PdfDocument(new PdfWriter(new ByteArrayOutputStream()))));\n",
      "\n",
      "        FlexContainerRenderer flexContainerRenderer = new FlexContainerRenderer(div);\n",
      "        flexContainerRenderer.setParent(documentRenderer);\n",
      "        div.setNextRenderer(flexContainerRenderer);\n",
      "\n",
      "        flexContainerRenderer.setProperty(Property.FLEX_DIRECTION, FlexDirectionPropertyValue.COLUMN);\n",
      "\n",
      "        for (int i = 0; i < flexBasisValues.size(); i++) {\n",
      "            IElement flexItem = (i == 0)\n",
      "                    ? (IElement) new Image(ImageDataFactory.create(SOURCE_FOLDER + \"itis.jpg\"))\n",
      "                    : (IElement) new Div().add(new Paragraph(Integer.toString(i)));\n",
      "            flexItem.setProperty(Property.FLEX_GROW, 0f);\n",
      "            flexItem.setProperty(Property.FLEX_SHRINK, 0f);\n",
      "            flexItem.setProperty(Property.FLEX_BASIS, flexBasisValues.get(i));\n",
      "            if (i == 0) {\n",
      "                flexItem.setProperty(Property.MAX_HEIGHT, UnitValue.createPointValue(40));\n",
      "                div.add((Image) flexItem);\n",
      "            } else {\n",
      "                div.add((IBlockElement) flexItem);\n",
      "            }\n",
      "            AbstractRenderer flexItemRenderer = (AbstractRenderer) flexItem.createRendererSubTree().setParent(flexContainerRenderer);\n",
      "            flexContainerRenderer.addChild(flexItemRenderer);\n",
      "        }\n",
      "\n",
      "        List<List<FlexItemInfo>> rectangleTable =\n",
      "                FlexUtil.calculateChildrenRectangles(bBox, (FlexContainerRenderer) div.getRenderer());\n",
      "\n",
      "        Assert.assertEquals(100f, rectangleTable.get(0).get(0).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(100f, rectangleTable.get(0).get(1).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(40f, rectangleTable.get(0).get(0).getRectangle().getHeight(), EPS);\n",
      "        Assert.assertEquals(30f, rectangleTable.get(0).get(1).getRectangle().getHeight(), EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void basisGtWidthGrow0Shrink0Test01() {\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                WRAP_STYLE,\n",
      "                Arrays.<UnitValue>asList(UnitValue.createPointValue(500f)),\n",
      "                Arrays.asList(0f),\n",
      "                Arrays.asList(0f)\n",
      "        );\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertFalse(rectangleTable.isEmpty());\n",
      "        for (List<FlexItemInfo> line : rectangleTable) {\n",
      "            for (FlexItemInfo flexItemInfo : line) {\n",
      "                Assert.assertEquals(500f, flexItemInfo.getRectangle().getWidth(), EPS);\n",
      "                Assert.assertEquals(100.0f, flexItemInfo.getRectangle().getHeight(), EPS);\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void basisGtWidthGrow0Shrink1Test01() {\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                WRAP_STYLE,\n",
      "                Arrays.<UnitValue>asList(UnitValue.createPointValue(500f)),\n",
      "                Arrays.asList(0f),\n",
      "                Arrays.asList(1f)\n",
      "        );\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertFalse(rectangleTable.isEmpty());\n",
      "        for (List<FlexItemInfo> line : rectangleTable) {\n",
      "            for (FlexItemInfo flexItemInfo : line) {\n",
      "                Assert.assertEquals(400f, flexItemInfo.getRectangle().getWidth(), EPS);\n",
      "                Assert.assertEquals(100.0f, flexItemInfo.getRectangle().getHeight(), EPS);\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void basisMinGrow0Shrink1Item2Grow05Test01() {\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                NULL_FLEX_BASIS_LIST,\n",
      "                Arrays.asList(0f, 0.5f, 0f),\n",
      "                Arrays.asList(1f, 1f, 1f));\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertFalse(rectangleTable.isEmpty());\n",
      "        for (int i = 0; i < rectangleTable.size(); i++) {\n",
      "            FlexItemInfo flexItemInfo = rectangleTable.get(0).get(i);\n",
      "            Assert.assertEquals(i == 1 ? 197 : 6f, flexItemInfo.getRectangle().getWidth(), EPS);\n",
      "            Assert.assertEquals(100.0f, flexItemInfo.getRectangle().getHeight(), EPS);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void basisMinGrow0Shrink1Item2Grow2Test01() {\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                NULL_FLEX_BASIS_LIST,\n",
      "                Arrays.asList(0f, 2f, 0f),\n",
      "                Arrays.asList(1f, 1f, 1f));\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertFalse(rectangleTable.isEmpty());\n",
      "        for (int i = 0; i < rectangleTable.size(); i++) {\n",
      "            FlexItemInfo flexItemInfo = rectangleTable.get(0).get(i);\n",
      "            Assert.assertEquals(i == 1 ? 388f : 6f, flexItemInfo.getRectangle().getWidth(), EPS);\n",
      "            Assert.assertEquals(100.0f, flexItemInfo.getRectangle().getHeight(), EPS);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void basisMinGrow2Shrink1Test01() {\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                NULL_FLEX_BASIS_LIST,\n",
      "                Arrays.asList(2f, 2f, 2f),\n",
      "                Arrays.asList(1f, 1f, 1f));\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertFalse(rectangleTable.isEmpty());\n",
      "        for (List<FlexItemInfo> line : rectangleTable) {\n",
      "            for (FlexItemInfo flexItemInfo : line) {\n",
      "                Assert.assertEquals(400f / 3, flexItemInfo.getRectangle().getWidth(), EPS);\n",
      "                Assert.assertEquals(100.0f, flexItemInfo.getRectangle().getHeight(), EPS);\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void basisMinGrow05SumGt1Shrink1Test01() {\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                NULL_FLEX_BASIS_LIST,\n",
      "                Arrays.asList(0.5f, 0.5f, 0.5f),\n",
      "                Arrays.asList(1f, 1f, 1f));\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertFalse(rectangleTable.isEmpty());\n",
      "        for (List<FlexItemInfo> line : rectangleTable) {\n",
      "            for (FlexItemInfo flexItemInfo : line) {\n",
      "                Assert.assertEquals(400f / 3, flexItemInfo.getRectangle().getWidth(), EPS);\n",
      "                Assert.assertEquals(100.0f, flexItemInfo.getRectangle().getHeight(), EPS);\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void basisMinGrow01SumLt1Shrink1Test01() {\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                NULL_FLEX_BASIS_LIST,\n",
      "                Arrays.asList(0.1f, 0.1f, 0.1f),\n",
      "                Arrays.asList(1f, 1f, 1f));\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertFalse(rectangleTable.isEmpty());\n",
      "        for (List<FlexItemInfo> line : rectangleTable) {\n",
      "            for (FlexItemInfo flexItemInfo : line) {\n",
      "                Assert.assertEquals(44.2f, flexItemInfo.getRectangle().getWidth(), EPS);\n",
      "                Assert.assertEquals(100.0f, flexItemInfo.getRectangle().getHeight(), EPS);\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void basisMinGrow0Shrink05SumGt1Test01() {\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                NULL_FLEX_BASIS_LIST,\n",
      "                Arrays.asList(0f, 0f, 0f),\n",
      "                Arrays.asList(0.5f, 0.5f, 0.5f));\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertFalse(rectangleTable.isEmpty());\n",
      "        for (List<FlexItemInfo> line : rectangleTable) {\n",
      "            for (FlexItemInfo flexItemInfo : line) {\n",
      "                Assert.assertEquals(6f, flexItemInfo.getRectangle().getWidth(), EPS);\n",
      "                Assert.assertEquals(100.0f, flexItemInfo.getRectangle().getHeight(), EPS);\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void basisMinGrow0Shrink01SumLt1Test01() {\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                NULL_FLEX_BASIS_LIST,\n",
      "                Arrays.asList(0f, 0f, 0f),\n",
      "                Arrays.asList(0.1f, 0.1f, 0.1f));\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertFalse(rectangleTable.isEmpty());\n",
      "        for (List<FlexItemInfo> line : rectangleTable) {\n",
      "            for (FlexItemInfo flexItemInfo : line) {\n",
      "                Assert.assertEquals(6f, flexItemInfo.getRectangle().getWidth(), EPS);\n",
      "                Assert.assertEquals(100.0f, flexItemInfo.getRectangle().getHeight(), EPS);\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void basis50SumLtWidthGrow0Shrink1Test01() {\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                Arrays.<UnitValue>asList(\n",
      "                        UnitValue.createPointValue(50f),\n",
      "                        UnitValue.createPointValue(50f),\n",
      "                        UnitValue.createPointValue(50f)),\n",
      "                Arrays.asList(0f, 0f, 0f),\n",
      "                Arrays.asList(1f, 1f, 1f)\n",
      "        );\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertFalse(rectangleTable.isEmpty());\n",
      "        for (List<FlexItemInfo> line : rectangleTable) {\n",
      "            for (FlexItemInfo flexItemInfo : line) {\n",
      "                Assert.assertEquals(50f, flexItemInfo.getRectangle().getWidth(), EPS);\n",
      "                Assert.assertEquals(100.0f, flexItemInfo.getRectangle().getHeight(), EPS);\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void basis250SumGtWidthGrow0Shrink1Test01() {\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                Arrays.<UnitValue>asList(\n",
      "                        UnitValue.createPointValue(250f),\n",
      "                        UnitValue.createPointValue(250f),\n",
      "                        UnitValue.createPointValue(250f)),\n",
      "                Arrays.asList(0f, 0f, 0f),\n",
      "                Arrays.asList(1f, 1f, 1f)\n",
      "        );\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertFalse(rectangleTable.isEmpty());\n",
      "        for (List<FlexItemInfo> line : rectangleTable) {\n",
      "            for (FlexItemInfo flexItemInfo : line) {\n",
      "                Assert.assertEquals(400f / 3, flexItemInfo.getRectangle().getWidth(), EPS);\n",
      "                Assert.assertEquals(100.0f, flexItemInfo.getRectangle().getHeight(), EPS);\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void differentBasisSumLtWidthGrow0Shrink1Test01() {\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                Arrays.<UnitValue>asList(\n",
      "                        UnitValue.createPointValue(50f),\n",
      "                        UnitValue.createPointValue(80f),\n",
      "                        UnitValue.createPointValue(100f)),\n",
      "                Arrays.asList(0f, 0f, 0f),\n",
      "                Arrays.asList(1f, 1f, 1f)\n",
      "        );\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertFalse(rectangleTable.isEmpty());\n",
      "        for (List<FlexItemInfo> line : rectangleTable) {\n",
      "            for (FlexItemInfo flexItemInfo : line) {\n",
      "                Assert.assertEquals(100.0f, flexItemInfo.getRectangle().getHeight(), EPS);\n",
      "            }\n",
      "        }\n",
      "        Assert.assertEquals(50f, rectangleTable.get(0).get(0).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(80f, rectangleTable.get(0).get(1).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(100f, rectangleTable.get(0).get(2).getRectangle().getWidth(), EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void differentBasisSumLtWidthGrow1Shrink1Test01() {\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                Arrays.<UnitValue>asList(\n",
      "                        UnitValue.createPointValue(50f),\n",
      "                        UnitValue.createPointValue(80f),\n",
      "                        UnitValue.createPointValue(100f)),\n",
      "                Arrays.asList(1f, 1f, 1f),\n",
      "                Arrays.asList(1f, 1f, 1f)\n",
      "        );\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertFalse(rectangleTable.isEmpty());\n",
      "        for (List<FlexItemInfo> line : rectangleTable) {\n",
      "            for (FlexItemInfo flexItemInfo : line) {\n",
      "                Assert.assertEquals(100.0f, flexItemInfo.getRectangle().getHeight(), EPS);\n",
      "            }\n",
      "        }\n",
      "        Assert.assertEquals(106.66667f, rectangleTable.get(0).get(0).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(136.66667f, rectangleTable.get(0).get(1).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(156.66667f, rectangleTable.get(0).get(2).getRectangle().getWidth(), EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void differentBasisSumLtWidthGrow1Shrink0Item2MarginBorderPadding30Test01() {\n",
      "        Rectangle bBox = new Rectangle(575, 842);\n",
      "        List<UnitValue> flexBasisValues = Arrays.<UnitValue>asList(\n",
      "                UnitValue.createPointValue(50f),\n",
      "                UnitValue.createPointValue(80f),\n",
      "                UnitValue.createPointValue(100f)\n",
      "        );\n",
      "\n",
      "        Div div = new Div().setWidth(400).setHeight(100);\n",
      "\n",
      "        DocumentRenderer documentRenderer = new DocumentRenderer(\n",
      "                new Document(new PdfDocument(new PdfWriter(new ByteArrayOutputStream()))));\n",
      "\n",
      "        FlexContainerRenderer flexContainerRenderer = new FlexContainerRenderer(div);\n",
      "        flexContainerRenderer.setParent(documentRenderer);\n",
      "        div.setNextRenderer(flexContainerRenderer);\n",
      "\n",
      "        for (int i = 0; i < flexBasisValues.size(); i++) {\n",
      "            Div flexItem = new Div().add(new Paragraph(\"x\"));\n",
      "            if (1 == i) {\n",
      "                flexItem.setMargin(10).setBorder(new SolidBorder(15)).setPadding(5);\n",
      "            }\n",
      "            AbstractRenderer flexItemRenderer = (AbstractRenderer) flexItem.createRendererSubTree()\n",
      "                    .setParent(flexContainerRenderer);\n",
      "            flexItemRenderer.setProperty(Property.FLEX_GROW, 1f);\n",
      "            flexItemRenderer.setProperty(Property.FLEX_SHRINK, 0f);\n",
      "            flexItemRenderer.setProperty(Property.FLEX_BASIS, flexBasisValues.get(i));\n",
      "            div.add(flexItem);\n",
      "            flexContainerRenderer.addChild(flexItemRenderer);\n",
      "        }\n",
      "\n",
      "        List<List<FlexItemInfo>> rectangleTable =\n",
      "                FlexUtil.calculateChildrenRectangles(bBox, (FlexContainerRenderer) div.getRenderer());\n",
      "\n",
      "        Assert.assertEquals(86.66667f, rectangleTable.get(0).get(0).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(176.66667f, rectangleTable.get(0).get(1).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(136.66667f, rectangleTable.get(0).get(2).getRectangle().getWidth(), EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void differentBasisSumLtWidthGrow1Shrink1Item2MarginBorderPadding30Test01() {\n",
      "        Rectangle bBox = new Rectangle(575, 842);\n",
      "        List<UnitValue> flexBasisValues = Arrays.<UnitValue>asList(\n",
      "                UnitValue.createPointValue(50f),\n",
      "                UnitValue.createPointValue(80f),\n",
      "                UnitValue.createPointValue(100f)\n",
      "        );\n",
      "\n",
      "        Div div = new Div().setWidth(200).setHeight(100);\n",
      "\n",
      "        DocumentRenderer documentRenderer = new DocumentRenderer(\n",
      "                new Document(new PdfDocument(new PdfWriter(new ByteArrayOutputStream()))));\n",
      "\n",
      "        FlexContainerRenderer flexContainerRenderer = new FlexContainerRenderer(div);\n",
      "        flexContainerRenderer.setParent(documentRenderer);\n",
      "        div.setNextRenderer(flexContainerRenderer);\n",
      "\n",
      "        for (int i = 0; i < flexBasisValues.size(); i++) {\n",
      "            Div flexItem = new Div().add(new Paragraph(\"x\"));\n",
      "            if (1 == i) {\n",
      "                flexItem.setMargin(10).setBorder(new SolidBorder(15)).setPadding(5);\n",
      "            }\n",
      "            AbstractRenderer flexItemRenderer = (AbstractRenderer) flexItem.createRendererSubTree()\n",
      "                    .setParent(documentRenderer);\n",
      "            flexItemRenderer.setProperty(Property.FLEX_GROW, 1f);\n",
      "            flexItemRenderer.setProperty(Property.FLEX_SHRINK, 1f);\n",
      "            flexItemRenderer.setProperty(Property.FLEX_BASIS, flexBasisValues.get(i));\n",
      "            flexContainerRenderer.addChild(flexItemRenderer);\n",
      "        }\n",
      "\n",
      "        List<List<FlexItemInfo>> rectangleTable =\n",
      "                FlexUtil.calculateChildrenRectangles(bBox, (FlexContainerRenderer) div.getRenderer());\n",
      "\n",
      "        Assert.assertEquals(30.434784f, rectangleTable.get(0).get(0).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(108.69565f, rectangleTable.get(0).get(1).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(60.869568f, rectangleTable.get(0).get(2).getRectangle().getWidth(), EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void ltWidthGrow0Shrink1Item2MarginBorderPadding30Test01() {\n",
      "        Rectangle bBox = new Rectangle(575, 842);\n",
      "        List<UnitValue> flexBasisValues = Arrays.<UnitValue>asList(\n",
      "                UnitValue.createPointValue(50f),\n",
      "                UnitValue.createPointValue(50f),\n",
      "                UnitValue.createPointValue(50f)\n",
      "        );\n",
      "\n",
      "        Div div = new Div().setWidth(200).setHeight(300);\n",
      "\n",
      "        DocumentRenderer documentRenderer = new DocumentRenderer(\n",
      "                new Document(new PdfDocument(new PdfWriter(new ByteArrayOutputStream()))));\n",
      "\n",
      "        FlexContainerRenderer flexContainerRenderer = new FlexContainerRenderer(div);\n",
      "        flexContainerRenderer.setParent(documentRenderer);\n",
      "        flexContainerRenderer.setProperty(Property.FLEX_WRAP, FlexWrapPropertyValue.WRAP);\n",
      "        div.setNextRenderer(flexContainerRenderer);\n",
      "\n",
      "        for (int i = 0; i < flexBasisValues.size(); i++) {\n",
      "            Div flexItem = new Div().add(new Paragraph(\"x\"));\n",
      "            if (1 == i) {\n",
      "                flexItem.setMargin(10).setBorder(new SolidBorder(15)).setPadding(5);\n",
      "                flexItem.setHeight(50);\n",
      "            }\n",
      "            AbstractRenderer flexItemRenderer = (AbstractRenderer) flexItem.createRendererSubTree()\n",
      "                    .setParent(documentRenderer);\n",
      "            flexItemRenderer.setProperty(Property.FLEX_GROW, 0f);\n",
      "            flexItemRenderer.setProperty(Property.FLEX_SHRINK, 1f);\n",
      "            flexItemRenderer.setProperty(Property.FLEX_BASIS, flexBasisValues.get(i));\n",
      "            flexContainerRenderer.addChild(flexItemRenderer);\n",
      "        }\n",
      "\n",
      "        List<List<FlexItemInfo>> rectangleTable =\n",
      "                FlexUtil.calculateChildrenRectangles(bBox, (FlexContainerRenderer) div.getRenderer());\n",
      "\n",
      "        Assert.assertEquals(192.03125f, rectangleTable.get(0).get(0).getRectangle().getHeight(), EPS);\n",
      "        Assert.assertEquals(110.0f, rectangleTable.get(0).get(1).getRectangle().getHeight(), EPS);\n",
      "        Assert.assertEquals(107.96875f, rectangleTable.get(1).get(0).getRectangle().getHeight(), EPS);\n",
      "\n",
      "        Assert.assertEquals(50.0f, rectangleTable.get(0).get(0).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(110.0f, rectangleTable.get(0).get(1).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(50.0f, rectangleTable.get(1).get(0).getRectangle().getWidth(), EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterTest() {\n",
      "        Rectangle bBox = new Rectangle(575, 842);\n",
      "        List<UnitValue> flexBasisValues = Arrays.<UnitValue>asList(\n",
      "                UnitValue.createPointValue(50f),\n",
      "                UnitValue.createPointValue(50f),\n",
      "                UnitValue.createPointValue(50f)\n",
      "        );\n",
      "\n",
      "        Div div = new Div().setWidth(200).setHeight(300);\n",
      "\n",
      "        DocumentRenderer documentRenderer = new DocumentRenderer(\n",
      "                new Document(new PdfDocument(new PdfWriter(new ByteArrayOutputStream()))));\n",
      "\n",
      "        FlexContainerRenderer flexContainerRenderer = new FlexContainerRenderer(div);\n",
      "        flexContainerRenderer.setParent(documentRenderer);\n",
      "        flexContainerRenderer.setProperty(Property.FLEX_WRAP, FlexWrapPropertyValue.WRAP);\n",
      "        flexContainerRenderer.setProperty(Property.JUSTIFY_CONTENT, JustifyContent.CENTER);\n",
      "        flexContainerRenderer.setProperty(Property.ALIGN_ITEMS, AlignmentPropertyValue.CENTER);\n",
      "        div.setNextRenderer(flexContainerRenderer);\n",
      "\n",
      "        for (int i = 0; i < flexBasisValues.size(); i++) {\n",
      "            Div flexItem = new Div().add(new Paragraph(\"x\"));\n",
      "            if (1 == i) {\n",
      "                flexItem.setMargin(10).setBorder(new SolidBorder(15)).setPadding(5);\n",
      "                flexItem.setHeight(50);\n",
      "            }\n",
      "            AbstractRenderer flexItemRenderer = (AbstractRenderer) flexItem.createRendererSubTree()\n",
      "                    .setParent(documentRenderer);\n",
      "            flexItemRenderer.setProperty(Property.FLEX_GROW, 0f);\n",
      "            flexItemRenderer.setProperty(Property.FLEX_SHRINK, 1f);\n",
      "            flexItemRenderer.setProperty(Property.FLEX_BASIS, flexBasisValues.get(i));\n",
      "            flexContainerRenderer.addChild(flexItemRenderer);\n",
      "        }\n",
      "\n",
      "        List<List<FlexItemInfo>> rectangleTable =\n",
      "                FlexUtil.calculateChildrenRectangles(bBox, (FlexContainerRenderer) div.getRenderer());\n",
      "\n",
      "        Assert.assertEquals(25.9375f, rectangleTable.get(0).get(0).getRectangle().getHeight(), EPS);\n",
      "        Assert.assertEquals(110.0f, rectangleTable.get(0).get(1).getRectangle().getHeight(), EPS);\n",
      "        Assert.assertEquals(25.9375f, rectangleTable.get(1).get(0).getRectangle().getHeight(), EPS);\n",
      "\n",
      "        Assert.assertEquals(50.0f, rectangleTable.get(0).get(0).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(110.0f, rectangleTable.get(0).get(1).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(50.0f, rectangleTable.get(1).get(0).getRectangle().getWidth(), EPS);\n",
      "\n",
      "        Assert.assertEquals(20.0f, rectangleTable.get(0).get(0).getRectangle().getX(), EPS);\n",
      "        Assert.assertEquals(0f, rectangleTable.get(0).get(1).getRectangle().getX(), EPS);\n",
      "        Assert.assertEquals(75.0f, rectangleTable.get(1).get(0).getRectangle().getX(), EPS);\n",
      "\n",
      "        Assert.assertEquals(83.046875f, rectangleTable.get(0).get(0).getRectangle().getY(), EPS);\n",
      "        Assert.assertEquals(41.015625f, rectangleTable.get(0).get(1).getRectangle().getY(), EPS);\n",
      "        Assert.assertEquals(82.03125f, rectangleTable.get(1).get(0).getRectangle().getY(), EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexStartTest() {\n",
      "        JustifyContent[] justifyContentValues = {\n",
      "                JustifyContent.NORMAL,\n",
      "                JustifyContent.START,\n",
      "                JustifyContent.STRETCH,\n",
      "                JustifyContent.LEFT,\n",
      "                JustifyContent.SELF_START,\n",
      "                JustifyContent.FLEX_START\n",
      "        };\n",
      "        AlignmentPropertyValue[] alignItemsValues = {\n",
      "                AlignmentPropertyValue.START,\n",
      "                AlignmentPropertyValue.SELF_START,\n",
      "                AlignmentPropertyValue.BASELINE,\n",
      "                AlignmentPropertyValue.SELF_START,\n",
      "                AlignmentPropertyValue.FLEX_START,\n",
      "                AlignmentPropertyValue.FLEX_START\n",
      "        };\n",
      "        for (int j = 0; j < justifyContentValues.length; ++j) {\n",
      "            Rectangle bBox = new Rectangle(575, 842);\n",
      "            List<UnitValue> flexBasisValues = Arrays.<UnitValue>asList(\n",
      "                    UnitValue.createPointValue(50f),\n",
      "                    UnitValue.createPointValue(50f),\n",
      "                    UnitValue.createPointValue(50f)\n",
      "            );\n",
      "\n",
      "            Div div = new Div().setWidth(200).setHeight(300);\n",
      "\n",
      "            DocumentRenderer documentRenderer = new DocumentRenderer(\n",
      "                    new Document(new PdfDocument(new PdfWriter(new ByteArrayOutputStream()))));\n",
      "\n",
      "            FlexContainerRenderer flexContainerRenderer = new FlexContainerRenderer(div);\n",
      "            flexContainerRenderer.setParent(documentRenderer);\n",
      "            flexContainerRenderer.setProperty(Property.FLEX_WRAP, FlexWrapPropertyValue.WRAP);\n",
      "            flexContainerRenderer.setProperty(Property.JUSTIFY_CONTENT, justifyContentValues[j]);\n",
      "            flexContainerRenderer.setProperty(Property.ALIGN_ITEMS, alignItemsValues[j]);\n",
      "            div.setNextRenderer(flexContainerRenderer);\n",
      "\n",
      "            for (int i = 0; i < flexBasisValues.size(); i++) {\n",
      "                Div flexItem = new Div().add(new Paragraph(\"x\"));\n",
      "                if (1 == i) {\n",
      "                    flexItem.setMargin(10).setBorder(new SolidBorder(15)).setPadding(5);\n",
      "                    flexItem.setHeight(50);\n",
      "                }\n",
      "                AbstractRenderer flexItemRenderer = (AbstractRenderer) flexItem.createRendererSubTree()\n",
      "                        .setParent(documentRenderer);\n",
      "                flexItemRenderer.setProperty(Property.FLEX_GROW, 0f);\n",
      "                flexItemRenderer.setProperty(Property.FLEX_SHRINK, 1f);\n",
      "                flexItemRenderer.setProperty(Property.FLEX_BASIS, flexBasisValues.get(i));\n",
      "                flexContainerRenderer.addChild(flexItemRenderer);\n",
      "            }\n",
      "\n",
      "            List<List<FlexItemInfo>> rectangleTable =\n",
      "                    FlexUtil.calculateChildrenRectangles(bBox, (FlexContainerRenderer) div.getRenderer());\n",
      "\n",
      "            Assert.assertEquals(25.9375f, rectangleTable.get(0).get(0).getRectangle().getHeight(), EPS);\n",
      "            Assert.assertEquals(110.0f, rectangleTable.get(0).get(1).getRectangle().getHeight(), EPS);\n",
      "            Assert.assertEquals(25.9375f, rectangleTable.get(1).get(0).getRectangle().getHeight(), EPS);\n",
      "\n",
      "            Assert.assertEquals(50.0f, rectangleTable.get(0).get(0).getRectangle().getWidth(), EPS);\n",
      "            Assert.assertEquals(110.0f, rectangleTable.get(0).get(1).getRectangle().getWidth(), EPS);\n",
      "            Assert.assertEquals(50.0f, rectangleTable.get(1).get(0).getRectangle().getWidth(), EPS);\n",
      "\n",
      "            Assert.assertEquals(0f, rectangleTable.get(0).get(0).getRectangle().getX(), EPS);\n",
      "            Assert.assertEquals(0f, rectangleTable.get(0).get(1).getRectangle().getX(), EPS);\n",
      "            Assert.assertEquals(0f, rectangleTable.get(1).get(0).getRectangle().getX(), EPS);\n",
      "\n",
      "            Assert.assertEquals(0f, rectangleTable.get(0).get(0).getRectangle().getY(), EPS);\n",
      "            Assert.assertEquals(0f, rectangleTable.get(0).get(1).getRectangle().getY(), EPS);\n",
      "            Assert.assertEquals(82.03125f, rectangleTable.get(1).get(0).getRectangle().getY(), EPS);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexEndTest() {\n",
      "        JustifyContent[] justifyContentValues = {\n",
      "                JustifyContent.END,\n",
      "                JustifyContent.RIGHT,\n",
      "                JustifyContent.SELF_END,\n",
      "                JustifyContent.FLEX_END\n",
      "        };\n",
      "        AlignmentPropertyValue[] alignItemsValues = {\n",
      "                AlignmentPropertyValue.END,\n",
      "                AlignmentPropertyValue.SELF_END,\n",
      "                AlignmentPropertyValue.FLEX_END,\n",
      "                AlignmentPropertyValue.FLEX_END\n",
      "        };\n",
      "        for (int j = 0; j < justifyContentValues.length; ++j) {\n",
      "            Rectangle bBox = new Rectangle(575, 842);\n",
      "            List<UnitValue> flexBasisValues = Arrays.<UnitValue>asList(\n",
      "                    UnitValue.createPointValue(50f),\n",
      "                    UnitValue.createPointValue(50f),\n",
      "                    UnitValue.createPointValue(50f)\n",
      "            );\n",
      "\n",
      "            Div div = new Div().setWidth(200).setHeight(300);\n",
      "\n",
      "            DocumentRenderer documentRenderer = new DocumentRenderer(\n",
      "                    new Document(new PdfDocument(new PdfWriter(new ByteArrayOutputStream()))));\n",
      "\n",
      "            FlexContainerRenderer flexContainerRenderer = new FlexContainerRenderer(div);\n",
      "            flexContainerRenderer.setParent(documentRenderer);\n",
      "            flexContainerRenderer.setProperty(Property.FLEX_WRAP, FlexWrapPropertyValue.WRAP);\n",
      "            flexContainerRenderer.setProperty(Property.JUSTIFY_CONTENT, justifyContentValues[j]);\n",
      "            flexContainerRenderer.setProperty(Property.ALIGN_ITEMS, alignItemsValues[j]);\n",
      "            div.setNextRenderer(flexContainerRenderer);\n",
      "\n",
      "            for (int i = 0; i < flexBasisValues.size(); i++) {\n",
      "                Div flexItem = new Div().add(new Paragraph(\"x\"));\n",
      "                if (1 == i) {\n",
      "                    flexItem.setMargin(10).setBorder(new SolidBorder(15)).setPadding(5);\n",
      "                    flexItem.setHeight(50);\n",
      "                }\n",
      "                AbstractRenderer flexItemRenderer = (AbstractRenderer) flexItem.createRendererSubTree()\n",
      "                        .setParent(documentRenderer);\n",
      "                flexItemRenderer.setProperty(Property.FLEX_GROW, 0f);\n",
      "                flexItemRenderer.setProperty(Property.FLEX_SHRINK, 1f);\n",
      "                flexItemRenderer.setProperty(Property.FLEX_BASIS, flexBasisValues.get(i));\n",
      "                flexContainerRenderer.addChild(flexItemRenderer);\n",
      "            }\n",
      "\n",
      "            List<List<FlexItemInfo>> rectangleTable =\n",
      "                    FlexUtil.calculateChildrenRectangles(bBox, (FlexContainerRenderer) div.getRenderer());\n",
      "\n",
      "            Assert.assertEquals(25.9375f, rectangleTable.get(0).get(0).getRectangle().getHeight(), EPS);\n",
      "            Assert.assertEquals(110.0f, rectangleTable.get(0).get(1).getRectangle().getHeight(), EPS);\n",
      "            Assert.assertEquals(25.9375f, rectangleTable.get(1).get(0).getRectangle().getHeight(), EPS);\n",
      "\n",
      "            Assert.assertEquals(50.0f, rectangleTable.get(0).get(0).getRectangle().getWidth(), EPS);\n",
      "            Assert.assertEquals(110.0f, rectangleTable.get(0).get(1).getRectangle().getWidth(), EPS);\n",
      "            Assert.assertEquals(50.0f, rectangleTable.get(1).get(0).getRectangle().getWidth(), EPS);\n",
      "\n",
      "            Assert.assertEquals(40.0f, rectangleTable.get(0).get(0).getRectangle().getX(), EPS);\n",
      "            Assert.assertEquals(0f, rectangleTable.get(0).get(1).getRectangle().getX(), EPS);\n",
      "            Assert.assertEquals(150.0f, rectangleTable.get(1).get(0).getRectangle().getX(), EPS);\n",
      "\n",
      "            Assert.assertEquals(166.09375f, rectangleTable.get(0).get(0).getRectangle().getY(), EPS);\n",
      "            Assert.assertEquals(82.03125f, rectangleTable.get(0).get(1).getRectangle().getY(), EPS);\n",
      "            Assert.assertEquals(82.03125f, rectangleTable.get(1).get(0).getRectangle().getY(), EPS);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void ltWidthGrow0Shrink1Item2MBP30AlignItemsStretchTest() {\n",
      "        AlignmentPropertyValue[] alignItemsValues = {\n",
      "                AlignmentPropertyValue.STRETCH,\n",
      "                AlignmentPropertyValue.NORMAL\n",
      "        };\n",
      "        for (AlignmentPropertyValue alignItemsValue : alignItemsValues) {\n",
      "            Rectangle bBox = new Rectangle(575, 842);\n",
      "            List<UnitValue> flexBasisValues = Arrays.<UnitValue>asList(\n",
      "                    UnitValue.createPointValue(50f),\n",
      "                    UnitValue.createPointValue(50f),\n",
      "                    UnitValue.createPointValue(50f)\n",
      "            );\n",
      "\n",
      "            Div div = new Div().setWidth(200).setHeight(300);\n",
      "\n",
      "            DocumentRenderer documentRenderer = new DocumentRenderer(\n",
      "                    new Document(new PdfDocument(new PdfWriter(new ByteArrayOutputStream()))));\n",
      "\n",
      "            FlexContainerRenderer flexContainerRenderer = new FlexContainerRenderer(div);\n",
      "            flexContainerRenderer.setParent(documentRenderer);\n",
      "            flexContainerRenderer.setProperty(Property.FLEX_WRAP, FlexWrapPropertyValue.WRAP);\n",
      "            flexContainerRenderer.setProperty(Property.ALIGN_ITEMS, alignItemsValue);\n",
      "            div.setNextRenderer(flexContainerRenderer);\n",
      "\n",
      "            for (int i = 0; i < flexBasisValues.size(); i++) {\n",
      "                Div flexItem = new Div().add(new Paragraph(\"x\"));\n",
      "                if (1 == i) {\n",
      "                    flexItem.setMargin(10).setBorder(new SolidBorder(15)).setPadding(5);\n",
      "                    flexItem.setHeight(50);\n",
      "                }\n",
      "                AbstractRenderer flexItemRenderer = (AbstractRenderer) flexItem.createRendererSubTree()\n",
      "                        .setParent(documentRenderer);\n",
      "                flexItemRenderer.setProperty(Property.FLEX_GROW, 0f);\n",
      "                flexItemRenderer.setProperty(Property.FLEX_SHRINK, 1f);\n",
      "                flexItemRenderer.setProperty(Property.FLEX_BASIS, flexBasisValues.get(i));\n",
      "                flexContainerRenderer.addChild(flexItemRenderer);\n",
      "            }\n",
      "\n",
      "            List<List<FlexItemInfo>> rectangleTable =\n",
      "                    FlexUtil.calculateChildrenRectangles(bBox, (FlexContainerRenderer) div.getRenderer());\n",
      "\n",
      "            Assert.assertEquals(192.03125f, rectangleTable.get(0).get(0).getRectangle().getHeight(), EPS);\n",
      "            Assert.assertEquals(110.0f, rectangleTable.get(0).get(1).getRectangle().getHeight(), EPS);\n",
      "            Assert.assertEquals(107.96875f, rectangleTable.get(1).get(0).getRectangle().getHeight(), EPS);\n",
      "\n",
      "            Assert.assertEquals(50.0f, rectangleTable.get(0).get(0).getRectangle().getWidth(), EPS);\n",
      "            Assert.assertEquals(110.0f, rectangleTable.get(0).get(1).getRectangle().getWidth(), EPS);\n",
      "            Assert.assertEquals(50.0f, rectangleTable.get(1).get(0).getRectangle().getWidth(), EPS);\n",
      "\n",
      "            Assert.assertEquals(0f, rectangleTable.get(0).get(0).getRectangle().getX(), EPS);\n",
      "            Assert.assertEquals(0f, rectangleTable.get(0).get(1).getRectangle().getX(), EPS);\n",
      "            Assert.assertEquals(0f, rectangleTable.get(1).get(0).getRectangle().getX(), EPS);\n",
      "\n",
      "            Assert.assertEquals(0f, rectangleTable.get(0).get(0).getRectangle().getY(), EPS);\n",
      "            Assert.assertEquals(0f, rectangleTable.get(0).get(1).getRectangle().getY(), EPS);\n",
      "            Assert.assertEquals(0f, rectangleTable.get(1).get(0).getRectangle().getY(), EPS);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterDontFitTest() {\n",
      "        Rectangle bBox = new Rectangle(575, 842);\n",
      "        List<UnitValue> flexBasisValues = Arrays.<UnitValue>asList(\n",
      "                UnitValue.createPointValue(100f),\n",
      "                UnitValue.createPointValue(100f),\n",
      "                UnitValue.createPointValue(100f)\n",
      "        );\n",
      "\n",
      "        Div div = new Div().setWidth(200).setHeight(200);\n",
      "\n",
      "        DocumentRenderer documentRenderer = new DocumentRenderer(\n",
      "                new Document(new PdfDocument(new PdfWriter(new ByteArrayOutputStream()))));\n",
      "\n",
      "        FlexContainerRenderer flexContainerRenderer = new FlexContainerRenderer(div);\n",
      "        flexContainerRenderer.setParent(documentRenderer);\n",
      "        flexContainerRenderer.setProperty(Property.JUSTIFY_CONTENT, JustifyContent.CENTER);\n",
      "        flexContainerRenderer.setProperty(Property.ALIGN_ITEMS, AlignmentPropertyValue.CENTER);\n",
      "        div.setNextRenderer(flexContainerRenderer);\n",
      "\n",
      "        for (int i = 0; i < flexBasisValues.size(); i++) {\n",
      "            Div flexItem = new Div().add(new Paragraph(\"x\"));\n",
      "            if (1 == i) {\n",
      "                flexItem.setMargin(10).setBorder(new SolidBorder(15)).setPadding(5);\n",
      "                flexItem.setHeight(220);\n",
      "            }\n",
      "            AbstractRenderer flexItemRenderer = (AbstractRenderer) flexItem.createRendererSubTree()\n",
      "                    .setParent(documentRenderer);\n",
      "            flexItemRenderer.setProperty(Property.FLEX_GROW, 0f);\n",
      "            flexItemRenderer.setProperty(Property.FLEX_SHRINK, 0f);\n",
      "            flexItemRenderer.setProperty(Property.FLEX_BASIS, flexBasisValues.get(i));\n",
      "            flexContainerRenderer.addChild(flexItemRenderer);\n",
      "        }\n",
      "\n",
      "        List<List<FlexItemInfo>> rectangleTable =\n",
      "                FlexUtil.calculateChildrenRectangles(bBox, (FlexContainerRenderer) div.getRenderer());\n",
      "\n",
      "        Assert.assertEquals(25.9375f, rectangleTable.get(0).get(0).getRectangle().getHeight(), EPS);\n",
      "        Assert.assertEquals(280.0f, rectangleTable.get(0).get(1).getRectangle().getHeight(), EPS);\n",
      "        Assert.assertEquals(25.9375f, rectangleTable.get(0).get(2).getRectangle().getHeight(), EPS);\n",
      "\n",
      "        Assert.assertEquals(100.0f, rectangleTable.get(0).get(0).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(160.0f, rectangleTable.get(0).get(1).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(100.0f, rectangleTable.get(0).get(2).getRectangle().getWidth(), EPS);\n",
      "\n",
      "        Assert.assertEquals(-80.0f, rectangleTable.get(0).get(0).getRectangle().getX(), EPS);\n",
      "        Assert.assertEquals(0f, rectangleTable.get(0).get(1).getRectangle().getX(), EPS);\n",
      "        Assert.assertEquals(0f, rectangleTable.get(0).get(2).getRectangle().getX(), EPS);\n",
      "\n",
      "        Assert.assertEquals(87.03125f, rectangleTable.get(0).get(0).getRectangle().getY(), EPS);\n",
      "        Assert.assertEquals(-40.0f, rectangleTable.get(0).get(1).getRectangle().getY(), EPS);\n",
      "        Assert.assertEquals(87.03125f, rectangleTable.get(0).get(2).getRectangle().getY(), EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void differentBasisSumLtWidthGrow1Shrink1Item2MuchContentTest01() {\n",
      "        Rectangle bBox = new Rectangle(575, 842);\n",
      "        List<UnitValue> flexBasisValues = Arrays.<UnitValue>asList(\n",
      "                UnitValue.createPointValue(37.5f),\n",
      "                UnitValue.createPointValue(60f),\n",
      "                UnitValue.createPointValue(75f)\n",
      "        );\n",
      "\n",
      "        Div div = new Div().setWidth(300).setHeight(100);\n",
      "\n",
      "        // We use Courier as a monotype font to ensure that min width calculated by iText\n",
      "        // is more or less the same as the width calculated by browsers\n",
      "        FontProvider provider = new FontProvider();\n",
      "        provider.getFontSet().addFont(StandardFonts.COURIER, null, \"courier\");\n",
      "\n",
      "        DocumentRenderer documentRenderer = new DocumentRenderer(\n",
      "                new Document(new PdfDocument(new PdfWriter(new ByteArrayOutputStream()))));\n",
      "        documentRenderer.setProperty(Property.FONT_PROVIDER, provider);\n",
      "\n",
      "        FlexContainerRenderer flexContainerRenderer = new FlexContainerRenderer(div);\n",
      "        flexContainerRenderer.setParent(documentRenderer);\n",
      "        div.setNextRenderer(flexContainerRenderer);\n",
      "\n",
      "        for (int i = 0; i < flexBasisValues.size(); i++) {\n",
      "            Div flexItem = new Div().add(new Paragraph(1 == i ? \"2222222222222222222222222\" : Integer.toString(i)));\n",
      "            if (1 == i) {\n",
      "                flexItem.setFontFamily(StandardFontFamilies.COURIER);\n",
      "            }\n",
      "            AbstractRenderer flexItemRenderer = (AbstractRenderer) flexItem.createRendererSubTree()\n",
      "                    .setParent(flexContainerRenderer);\n",
      "            flexItemRenderer.setProperty(Property.FLEX_GROW, 1f);\n",
      "            flexItemRenderer.setProperty(Property.FLEX_SHRINK, 1f);\n",
      "            flexItemRenderer.setProperty(Property.FLEX_BASIS, flexBasisValues.get(i));\n",
      "            flexContainerRenderer.addChild(flexItemRenderer);\n",
      "        }\n",
      "\n",
      "        List<List<FlexItemInfo>> rectangleTable =\n",
      "                FlexUtil.calculateChildrenRectangles(bBox, (FlexContainerRenderer) div.getRenderer());\n",
      "\n",
      "        Assert.assertEquals(41.250023f, rectangleTable.get(0).get(0).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(179.99995f, rectangleTable.get(0).get(1).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(78.75002f, rectangleTable.get(0).get(2).getRectangle().getWidth(), EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthLtBasisTest01() {\n",
      "        Rectangle bBox = new Rectangle(575, 842);\n",
      "        List<UnitValue> flexBasisValues = Arrays.<UnitValue>asList(\n",
      "                UnitValue.createPointValue(37.5f),\n",
      "                UnitValue.createPointValue(60f),\n",
      "                UnitValue.createPointValue(75f)\n",
      "        );\n",
      "\n",
      "        Div div = new Div().setWidth(300).setHeight(100);\n",
      "\n",
      "        // We use Courier as a monotype font to ensure that min width calculated by iText\n",
      "        // is more or less the same as the width calculated by browsers\n",
      "        FontProvider provider = new FontProvider();\n",
      "        provider.getFontSet().addFont(StandardFonts.COURIER, null, \"courier\");\n",
      "\n",
      "        DocumentRenderer documentRenderer = new DocumentRenderer(\n",
      "                new Document(new PdfDocument(new PdfWriter(new ByteArrayOutputStream()))));\n",
      "        documentRenderer.setProperty(Property.FONT_PROVIDER, provider);\n",
      "\n",
      "        FlexContainerRenderer flexContainerRenderer = new FlexContainerRenderer(div);\n",
      "        flexContainerRenderer.setParent(documentRenderer);\n",
      "        div.setNextRenderer(flexContainerRenderer);\n",
      "\n",
      "        for (int i = 0; i < flexBasisValues.size(); i++) {\n",
      "            Div flexItem = new Div().add(new Paragraph(1 == i ? \"2222222222222222222222222\" : Integer.toString(i)));\n",
      "            if (1 == i) {\n",
      "                flexItem\n",
      "                        .setFontFamily(StandardFontFamilies.COURIER)\n",
      "                        .setMinWidth(37.5f);\n",
      "            }\n",
      "            AbstractRenderer flexItemRenderer = (AbstractRenderer) flexItem.createRendererSubTree()\n",
      "                    .setParent(flexContainerRenderer);\n",
      "            flexItemRenderer.setProperty(Property.FLEX_GROW, 1f);\n",
      "            flexItemRenderer.setProperty(Property.FLEX_SHRINK, 1f);\n",
      "            flexItemRenderer.setProperty(Property.FLEX_BASIS, flexBasisValues.get(i));\n",
      "            flexContainerRenderer.addChild(flexItemRenderer);\n",
      "        }\n",
      "\n",
      "        List<List<FlexItemInfo>> rectangleTable =\n",
      "                FlexUtil.calculateChildrenRectangles(bBox, (FlexContainerRenderer) div.getRenderer());\n",
      "\n",
      "        Assert.assertEquals(80f, rectangleTable.get(0).get(0).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(102.5f, rectangleTable.get(0).get(1).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(117.5f, rectangleTable.get(0).get(2).getRectangle().getWidth(), EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest01() {\n",
      "        Rectangle bBox = new Rectangle(575, 842);\n",
      "        List<UnitValue> flexBasisValues = Arrays.<UnitValue>asList(\n",
      "                UnitValue.createPointValue(50f),\n",
      "                UnitValue.createPointValue(80f),\n",
      "                UnitValue.createPointValue(100f)\n",
      "        );\n",
      "\n",
      "        Div div = new Div().setWidth(400).setHeight(100);\n",
      "\n",
      "        DocumentRenderer documentRenderer = new DocumentRenderer(\n",
      "                new Document(new PdfDocument(new PdfWriter(new ByteArrayOutputStream()))));\n",
      "\n",
      "        FlexContainerRenderer flexContainerRenderer = new FlexContainerRenderer(div);\n",
      "        flexContainerRenderer.setParent(documentRenderer);\n",
      "        div.setNextRenderer(flexContainerRenderer);\n",
      "\n",
      "        for (int i = 0; i < flexBasisValues.size(); i++) {\n",
      "            Div flexItem = new Div().add(new Paragraph(Integer.toString(i)));\n",
      "            if (1 == i) {\n",
      "                flexItem.setMaxWidth(50f);\n",
      "            }\n",
      "            AbstractRenderer flexItemRenderer = (AbstractRenderer) flexItem.createRendererSubTree()\n",
      "                    .setParent(flexContainerRenderer);\n",
      "            flexItemRenderer.setProperty(Property.FLEX_GROW, 1f);\n",
      "            flexItemRenderer.setProperty(Property.FLEX_SHRINK, 1f);\n",
      "            flexItemRenderer.setProperty(Property.FLEX_BASIS, flexBasisValues.get(i));\n",
      "\n",
      "            flexContainerRenderer.addChild(flexItemRenderer);\n",
      "        }\n",
      "\n",
      "        List<List<FlexItemInfo>> rectangleTable =\n",
      "                FlexUtil.calculateChildrenRectangles(bBox, (FlexContainerRenderer) div.getRenderer());\n",
      "\n",
      "        Assert.assertEquals(150f, rectangleTable.get(0).get(0).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(50f, rectangleTable.get(0).get(1).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(200f, rectangleTable.get(0).get(2).getRectangle().getWidth(), EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest02() {\n",
      "        Rectangle bBox = new Rectangle(575, 842);\n",
      "        List<UnitValue> flexBasisValues = Arrays.<UnitValue>asList(\n",
      "                UnitValue.createPointValue(50f),\n",
      "                UnitValue.createPointValue(80f),\n",
      "                UnitValue.createPointValue(100f)\n",
      "        );\n",
      "\n",
      "        Div div = new Div().setWidth(100).setHeight(100);\n",
      "\n",
      "        DocumentRenderer documentRenderer = new DocumentRenderer(\n",
      "                new Document(new PdfDocument(new PdfWriter(new ByteArrayOutputStream()))));\n",
      "\n",
      "        FlexContainerRenderer flexContainerRenderer = new FlexContainerRenderer(div);\n",
      "        flexContainerRenderer.setParent(documentRenderer);\n",
      "        div.setNextRenderer(flexContainerRenderer);\n",
      "\n",
      "        for (int i = 0; i < flexBasisValues.size(); i++) {\n",
      "            Div flexItem = new Div().add(new Paragraph(Integer.toString(i)));\n",
      "            if (1 == i) {\n",
      "                flexItem.setMaxWidth(30f);\n",
      "            }\n",
      "            AbstractRenderer flexItemRenderer = (AbstractRenderer) flexItem.createRendererSubTree()\n",
      "                    .setParent(documentRenderer);\n",
      "            flexItemRenderer.setProperty(Property.FLEX_GROW, 1f);\n",
      "            flexItemRenderer.setProperty(Property.FLEX_SHRINK, 1f);\n",
      "            flexItemRenderer.setProperty(Property.FLEX_BASIS, flexBasisValues.get(i));\n",
      "            flexItemRenderer.setParent(flexContainerRenderer);\n",
      "            flexContainerRenderer.addChild(flexItemRenderer);\n",
      "        }\n",
      "\n",
      "        List<List<FlexItemInfo>> rectangleTable =\n",
      "                FlexUtil.calculateChildrenRectangles(bBox, (FlexContainerRenderer) div.getRenderer());\n",
      "\n",
      "        Assert.assertEquals(23.333332f, rectangleTable.get(0).get(0).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(30f, rectangleTable.get(0).get(1).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(46.666664f, rectangleTable.get(0).get(2).getRectangle().getWidth(), EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest03() {\n",
      "        Rectangle bBox = new Rectangle(575, 842);\n",
      "        List<UnitValue> flexBasisValues = Arrays.<UnitValue>asList(\n",
      "                UnitValue.createPointValue(7f),\n",
      "                UnitValue.createPointValue(80f),\n",
      "                UnitValue.createPointValue(7f)\n",
      "        );\n",
      "\n",
      "        Div div = new Div().setWidth(100).setHeight(100);\n",
      "\n",
      "        DocumentRenderer documentRenderer = new DocumentRenderer(\n",
      "                new Document(new PdfDocument(new PdfWriter(new ByteArrayOutputStream()))));\n",
      "\n",
      "        FlexContainerRenderer flexContainerRenderer = new FlexContainerRenderer(div);\n",
      "        flexContainerRenderer.setParent(documentRenderer);\n",
      "        div.setNextRenderer(flexContainerRenderer);\n",
      "\n",
      "        for (int i = 0; i < flexBasisValues.size(); i++) {\n",
      "            Div flexItem = new Div().add(new Paragraph(Integer.toString(i)));\n",
      "            if (1 == i) {\n",
      "                flexItem.setMaxWidth(30f);\n",
      "            }\n",
      "            AbstractRenderer flexItemRenderer = (AbstractRenderer) flexItem.createRendererSubTree()\n",
      "                    .setParent(flexContainerRenderer);\n",
      "            flexItemRenderer.setProperty(Property.FLEX_GROW, 1f);\n",
      "            flexItemRenderer.setProperty(Property.FLEX_SHRINK, 1f);\n",
      "            flexItemRenderer.setProperty(Property.FLEX_BASIS, flexBasisValues.get(i));\n",
      "            flexContainerRenderer.addChild(flexItemRenderer);\n",
      "        }\n",
      "\n",
      "        List<List<FlexItemInfo>> rectangleTable =\n",
      "                FlexUtil.calculateChildrenRectangles(bBox, (FlexContainerRenderer) div.getRenderer());\n",
      "\n",
      "        Assert.assertEquals(35f, rectangleTable.get(0).get(0).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(30f, rectangleTable.get(0).get(1).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(35f, rectangleTable.get(0).get(2).getRectangle().getWidth(), EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void differentBasisSumGtWidthGrow1Shrink1Item1MinWidthGtBasisTest01() {\n",
      "        Rectangle bBox = new Rectangle(575, 842);\n",
      "        List<UnitValue> flexBasisValues = Arrays.<UnitValue>asList(\n",
      "                UnitValue.createPointValue(100f),\n",
      "                UnitValue.createPointValue(150f),\n",
      "                UnitValue.createPointValue(200f)\n",
      "        );\n",
      "\n",
      "        Div div = new Div().setWidth(400).setHeight(100);\n",
      "\n",
      "        DocumentRenderer documentRenderer = new DocumentRenderer(\n",
      "                new Document(new PdfDocument(new PdfWriter(new ByteArrayOutputStream()))));\n",
      "\n",
      "        FlexContainerRenderer flexContainerRenderer = new FlexContainerRenderer(div);\n",
      "        flexContainerRenderer.setParent(documentRenderer);\n",
      "        div.setNextRenderer(flexContainerRenderer);\n",
      "\n",
      "        for (int i = 0; i < flexBasisValues.size(); i++) {\n",
      "            Div flexItem = new Div().add(new Paragraph(Integer.toString(i)));\n",
      "            if (0 == i) {\n",
      "                flexItem.setMinWidth(150f);\n",
      "            }\n",
      "            AbstractRenderer flexItemRenderer = (AbstractRenderer) flexItem.createRendererSubTree()\n",
      "                    .setParent(flexContainerRenderer);\n",
      "            flexItemRenderer.setProperty(Property.FLEX_GROW, 1f);\n",
      "            flexItemRenderer.setProperty(Property.FLEX_SHRINK, 1f);\n",
      "            flexItemRenderer.setProperty(Property.FLEX_BASIS, flexBasisValues.get(i));\n",
      "            div.add(flexItem);\n",
      "            flexContainerRenderer.addChild(flexItemRenderer);\n",
      "        }\n",
      "\n",
      "        List<List<FlexItemInfo>> rectangleTable =\n",
      "                FlexUtil.calculateChildrenRectangles(bBox, (FlexContainerRenderer) div.getRenderer());\n",
      "\n",
      "        Assert.assertEquals(150f, rectangleTable.get(0).get(0).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(107.14285f, rectangleTable.get(0).get(1).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(142.85715f, rectangleTable.get(0).get(2).getRectangle().getWidth(), EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void imgGtUsedWidthTest01() throws MalformedURLException {\n",
      "        Rectangle bBox = new Rectangle(575, 842);\n",
      "        List<UnitValue> flexBasisValues = Arrays.<UnitValue>asList(\n",
      "                UnitValue.createPointValue(50f),\n",
      "                UnitValue.createPointValue(30f)\n",
      "        );\n",
      "\n",
      "        Div div = new Div().setWidth(100).setHeight(100);\n",
      "\n",
      "        DocumentRenderer documentRenderer = new DocumentRenderer(\n",
      "                new Document(new PdfDocument(new PdfWriter(new ByteArrayOutputStream()))));\n",
      "\n",
      "        FlexContainerRenderer flexContainerRenderer = new FlexContainerRenderer(div);\n",
      "        flexContainerRenderer.setParent(documentRenderer);\n",
      "        div.setNextRenderer(flexContainerRenderer);\n",
      "\n",
      "        for (int i = 0; i < flexBasisValues.size(); i++) {\n",
      "            IElement flexItem = (0 == i)\n",
      "                    ? (IElement) new Image(ImageDataFactory.create(SOURCE_FOLDER + \"itis.jpg\"))\n",
      "                    : (IElement) new Div().add(new Paragraph(Integer.toString(i)));\n",
      "            if (0 == i) {\n",
      "                flexItem.setProperty(Property.MAX_WIDTH, UnitValue.createPointValue(50f));\n",
      "                div.add((Image) flexItem);\n",
      "            } else {\n",
      "                div.add((IBlockElement) flexItem);\n",
      "            }\n",
      "            AbstractRenderer flexItemRenderer = (AbstractRenderer) flexItem.createRendererSubTree()\n",
      "                    .setParent(flexContainerRenderer);\n",
      "            flexItemRenderer.setProperty(Property.FLEX_GROW, 0f);\n",
      "            flexItemRenderer.setProperty(Property.FLEX_SHRINK, 0f);\n",
      "            flexItemRenderer.setProperty(Property.FLEX_BASIS, flexBasisValues.get(i));\n",
      "            flexContainerRenderer.addChild(flexItemRenderer);\n",
      "        }\n",
      "\n",
      "        List<List<FlexItemInfo>> rectangleTable =\n",
      "                FlexUtil.calculateChildrenRectangles(bBox, (FlexContainerRenderer) div.getRenderer());\n",
      "\n",
      "        Assert.assertEquals(50f, rectangleTable.get(0).get(0).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(30f, rectangleTable.get(0).get(1).getRectangle().getWidth(), EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest01() {\n",
      "        Rectangle bBox = new Rectangle(575, 842);\n",
      "        List<UnitValue> flexBasisValues = Arrays.<UnitValue>asList(\n",
      "                UnitValue.createPointValue(37.5f),\n",
      "                UnitValue.createPointValue(60f),\n",
      "                UnitValue.createPointValue(75f)\n",
      "        );\n",
      "\n",
      "        Div div = new Div().setWidth(300).setHeight(100);\n",
      "\n",
      "        // We use Courier as a monotype font to ensure that min width calculated by iText\n",
      "        // is more or less the same as the width calculated by browsers\n",
      "        FontProvider provider = new FontProvider();\n",
      "        provider.getFontSet().addFont(StandardFonts.COURIER, null, \"courier\");\n",
      "\n",
      "        DocumentRenderer documentRenderer = new DocumentRenderer(\n",
      "                new Document(new PdfDocument(new PdfWriter(new ByteArrayOutputStream()))));\n",
      "        documentRenderer.setProperty(Property.FONT_PROVIDER, provider);\n",
      "\n",
      "        FlexContainerRenderer flexContainerRenderer = new FlexContainerRenderer(div);\n",
      "        flexContainerRenderer.setParent(documentRenderer);\n",
      "        div.setNextRenderer(flexContainerRenderer);\n",
      "\n",
      "        for (int i = 0; i < flexBasisValues.size(); i++) {\n",
      "            Div flexItem = new Div().add(new Paragraph(1 == i ? \"2222222222222222222222222\" : Integer.toString(i)));\n",
      "            if (1 == i) {\n",
      "                flexItem\n",
      "                        .setFontFamily(StandardFontFamilies.COURIER)\n",
      "                        .setMinWidth(75f);\n",
      "            }\n",
      "            AbstractRenderer flexItemRenderer = (AbstractRenderer) flexItem.createRendererSubTree()\n",
      "                    .setParent(flexContainerRenderer);\n",
      "            flexItemRenderer.setProperty(Property.FLEX_GROW, 1f);\n",
      "            flexItemRenderer.setProperty(Property.FLEX_SHRINK, 1f);\n",
      "            flexItemRenderer.setProperty(Property.FLEX_BASIS, flexBasisValues.get(i));\n",
      "            flexContainerRenderer.addChild(flexItemRenderer);\n",
      "        }\n",
      "\n",
      "        List<List<FlexItemInfo>> rectangleTable =\n",
      "                FlexUtil.calculateChildrenRectangles(bBox, (FlexContainerRenderer) div.getRenderer());\n",
      "\n",
      "        Assert.assertEquals(80f, rectangleTable.get(0).get(0).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(102.5f, rectangleTable.get(0).get(1).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(117.5f, rectangleTable.get(0).get(2).getRectangle().getWidth(), EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void basis1Grow0Test01() {\n",
      "        Rectangle bBox = new Rectangle(575, 842);\n",
      "        List<UnitValue> flexBasisValues = Arrays.<UnitValue>asList(\n",
      "                UnitValue.createPointValue(1f),\n",
      "                UnitValue.createPointValue(30f)\n",
      "        );\n",
      "\n",
      "        Div div = new Div().setWidth(100).setHeight(100);\n",
      "\n",
      "        // We use Courier as a monotype font to ensure that min width calculated by iText\n",
      "        // is more or less the same as the width calculated by browsers\n",
      "        FontProvider provider = new FontProvider();\n",
      "        provider.getFontSet().addFont(StandardFonts.COURIER, null, \"courier\");\n",
      "\n",
      "        DocumentRenderer documentRenderer = new DocumentRenderer(\n",
      "                new Document(new PdfDocument(new PdfWriter(new ByteArrayOutputStream()))));\n",
      "        documentRenderer.setProperty(Property.FONT_PROVIDER, provider);\n",
      "\n",
      "        FlexContainerRenderer flexContainerRenderer = new FlexContainerRenderer(div);\n",
      "        flexContainerRenderer.setParent(documentRenderer);\n",
      "        div.setNextRenderer(flexContainerRenderer);\n",
      "\n",
      "        for (int i = 0; i < flexBasisValues.size(); i++) {\n",
      "            Div flexItem = new Div().add(new Paragraph(Integer.toString(i)))\n",
      "                    .setFontFamily(StandardFontFamilies.COURIER);\n",
      "            if (0 == i) {\n",
      "                flexItem.setFontSize(100f);\n",
      "            }\n",
      "            AbstractRenderer flexItemRenderer = (AbstractRenderer) flexItem.createRendererSubTree()\n",
      "                    .setParent(flexContainerRenderer);\n",
      "            flexItemRenderer.setProperty(Property.FLEX_GROW, 0f);\n",
      "            flexItemRenderer.setProperty(Property.FLEX_SHRINK, 0f);\n",
      "            flexItemRenderer.setProperty(Property.FLEX_BASIS, flexBasisValues.get(i));\n",
      "            div.add(flexItem);\n",
      "            flexContainerRenderer.addChild(flexItemRenderer);\n",
      "        }\n",
      "\n",
      "        List<List<FlexItemInfo>> rectangleTable =\n",
      "                FlexUtil.calculateChildrenRectangles(bBox, (FlexContainerRenderer) div.getRenderer());\n",
      "\n",
      "        Assert.assertEquals(60f, rectangleTable.get(0).get(0).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(30f, rectangleTable.get(0).get(1).getRectangle().getWidth(), EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest02() {\n",
      "        Rectangle bBox = new Rectangle(575, 842);\n",
      "        List<UnitValue> flexBasisValues = Arrays.<UnitValue>asList(\n",
      "                UnitValue.createPointValue(37.5f),\n",
      "                UnitValue.createPointValue(60f),\n",
      "                UnitValue.createPointValue(75f)\n",
      "        );\n",
      "\n",
      "        Div div = new Div().setWidth(300).setHeight(100);\n",
      "\n",
      "        // We use Courier as a monotype font to ensure that min width calculated by iText\n",
      "        // is more or less the same as the width calculated by browsers\n",
      "        FontProvider provider = new FontProvider();\n",
      "        provider.getFontSet().addFont(StandardFonts.COURIER, null, \"courier\");\n",
      "\n",
      "        DocumentRenderer documentRenderer = new DocumentRenderer(\n",
      "                new Document(new PdfDocument(new PdfWriter(new ByteArrayOutputStream()))));\n",
      "        documentRenderer.setProperty(Property.FONT_PROVIDER, provider);\n",
      "\n",
      "        FlexContainerRenderer flexContainerRenderer = new FlexContainerRenderer(div);\n",
      "        flexContainerRenderer.setParent(documentRenderer);\n",
      "        div.setNextRenderer(flexContainerRenderer);\n",
      "\n",
      "        for (int i = 0; i < flexBasisValues.size(); i++) {\n",
      "            Div flexItem = new Div().add(new Paragraph(1 == i ? \"2222222222222222222222222\" : Integer.toString(i)));\n",
      "            if (1 == i) {\n",
      "                flexItem\n",
      "                        .setFontFamily(StandardFontFamilies.COURIER)\n",
      "                        .setMinWidth(150f);\n",
      "            }\n",
      "            AbstractRenderer flexItemRenderer = (AbstractRenderer) flexItem.createRendererSubTree()\n",
      "                    .setParent(flexContainerRenderer);\n",
      "            flexItemRenderer.setProperty(Property.FLEX_GROW, 1f);\n",
      "            flexItemRenderer.setProperty(Property.FLEX_SHRINK, 1f);\n",
      "            flexItemRenderer.setProperty(Property.FLEX_BASIS, flexBasisValues.get(i));\n",
      "            flexContainerRenderer.addChild(flexItemRenderer);\n",
      "        }\n",
      "\n",
      "        List<List<FlexItemInfo>> rectangleTable =\n",
      "                FlexUtil.calculateChildrenRectangles(bBox, (FlexContainerRenderer) div.getRenderer());\n",
      "\n",
      "        Assert.assertEquals(56.25f, rectangleTable.get(0).get(0).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(150f, rectangleTable.get(0).get(1).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(93.75f, rectangleTable.get(0).get(2).getRectangle().getWidth(), EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest03() {\n",
      "        Rectangle bBox = new Rectangle(575, 842);\n",
      "        List<UnitValue> flexBasisValues = Arrays.<UnitValue>asList(\n",
      "                UnitValue.createPointValue(112.5f),\n",
      "                UnitValue.createPointValue(60f),\n",
      "                UnitValue.createPointValue(187.5f)\n",
      "        );\n",
      "\n",
      "        Div div = new Div().setWidth(300).setHeight(100);\n",
      "\n",
      "        // We use Courier as a monotype font to ensure that min width calculated by iText\n",
      "        // is more or less the same as the width calculated by browsers\n",
      "        FontProvider provider = new FontProvider();\n",
      "        provider.getFontSet().addFont(StandardFonts.COURIER, null, \"courier\");\n",
      "\n",
      "        DocumentRenderer documentRenderer = new DocumentRenderer(\n",
      "                new Document(new PdfDocument(new PdfWriter(new ByteArrayOutputStream()))));\n",
      "        documentRenderer.setProperty(Property.FONT_PROVIDER, provider);\n",
      "\n",
      "        FlexContainerRenderer flexContainerRenderer = new FlexContainerRenderer(div);\n",
      "        flexContainerRenderer.setParent(documentRenderer);\n",
      "        div.setNextRenderer(flexContainerRenderer);\n",
      "\n",
      "        for (int i = 0; i < flexBasisValues.size(); i++) {\n",
      "            Div flexItem = new Div().add(new Paragraph(1 == i ? \"2222222222222222222222222\" : Integer.toString(i)));\n",
      "            if (1 == i) {\n",
      "                flexItem\n",
      "                        .setFontFamily(StandardFontFamilies.COURIER)\n",
      "                        .setMinWidth(150f);\n",
      "            }\n",
      "            AbstractRenderer flexItemRenderer = (AbstractRenderer) flexItem.createRendererSubTree()\n",
      "                    .setParent(flexContainerRenderer);\n",
      "            flexItemRenderer.setProperty(Property.FLEX_GROW, 1f);\n",
      "            flexItemRenderer.setProperty(Property.FLEX_SHRINK, 1f);\n",
      "            flexItemRenderer.setProperty(Property.FLEX_BASIS, flexBasisValues.get(i));\n",
      "            flexContainerRenderer.addChild(flexItemRenderer);\n",
      "        }\n",
      "\n",
      "        List<List<FlexItemInfo>> rectangleTable =\n",
      "                FlexUtil.calculateChildrenRectangles(bBox, (FlexContainerRenderer) div.getRenderer());\n",
      "\n",
      "        Assert.assertEquals(56.25f, rectangleTable.get(0).get(0).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(150f, rectangleTable.get(0).get(1).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(93.75f, rectangleTable.get(0).get(2).getRectangle().getWidth(), EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void differentBasisSumEqWidthGrow1Shrink1Item2Basis0Test01() {\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                WRAP_STYLE,\n",
      "                Arrays.<UnitValue>asList(\n",
      "                        UnitValue.createPointValue(400f),\n",
      "                        UnitValue.createPointValue(0f),\n",
      "                        UnitValue.createPointValue(100f)),\n",
      "                Arrays.asList(1f, 1f, 1f),\n",
      "                Arrays.asList(1f, 1f, 1f)\n",
      "        );\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertFalse(rectangleTable.isEmpty());\n",
      "\n",
      "        Assert.assertEquals(1, rectangleTable.get(0).size());\n",
      "        Assert.assertEquals(2, rectangleTable.get(1).size());\n",
      "\n",
      "        for (List<FlexItemInfo> line : rectangleTable) {\n",
      "            for (FlexItemInfo flexItemInfo : line) {\n",
      "                Assert.assertEquals(50.0f, flexItemInfo.getRectangle().getHeight(), EPS);\n",
      "            }\n",
      "        }\n",
      "\n",
      "        Assert.assertEquals(400f, rectangleTable.get(0).get(0).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(150f, rectangleTable.get(1).get(0).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(250f, rectangleTable.get(1).get(1).getRectangle().getWidth(), EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void differentBasisSumEqWidthGrow1Shrink1Item2Basis0NoContentTest02() {\n",
      "        Rectangle bBox = new Rectangle(575, 842);\n",
      "        List<UnitValue> flexBasisValues = Arrays.<UnitValue>asList(\n",
      "                UnitValue.createPointValue(400f),\n",
      "                UnitValue.createPointValue(0f),\n",
      "                UnitValue.createPointValue(100f)\n",
      "        );\n",
      "\n",
      "        Div div = new Div().setWidth(400).setHeight(100);\n",
      "        div.setProperty(Property.FLEX_WRAP, FlexWrapPropertyValue.WRAP);\n",
      "\n",
      "        DocumentRenderer documentRenderer = new DocumentRenderer(\n",
      "                new Document(new PdfDocument(new PdfWriter(new ByteArrayOutputStream()))));\n",
      "\n",
      "        FlexContainerRenderer flexContainerRenderer = new FlexContainerRenderer(div);\n",
      "        div.setNextRenderer(flexContainerRenderer);\n",
      "\n",
      "        for (int i = 0; i < flexBasisValues.size(); i++) {\n",
      "            Div flexItem = new Div();\n",
      "            if (1 != i) {\n",
      "                flexItem.add(new Paragraph(Integer.toString(i)));\n",
      "            }\n",
      "            AbstractRenderer flexItemRenderer = (AbstractRenderer) flexItem.createRendererSubTree()\n",
      "                    .setParent(documentRenderer);\n",
      "            flexItemRenderer.setProperty(Property.FLEX_GROW, 1f);\n",
      "            flexItemRenderer.setProperty(Property.FLEX_SHRINK, 1f);\n",
      "            flexItemRenderer.setProperty(Property.FLEX_BASIS, flexBasisValues.get(i));\n",
      "            div.add(flexItem);\n",
      "            flexContainerRenderer.addChild(flexItemRenderer);\n",
      "        }\n",
      "\n",
      "        List<List<FlexItemInfo>> rectangleTable =\n",
      "                FlexUtil.calculateChildrenRectangles(bBox, (FlexContainerRenderer) div.getRenderer());\n",
      "\n",
      "        Assert.assertEquals(2, rectangleTable.get(0).size());\n",
      "        Assert.assertEquals(1, rectangleTable.get(1).size());\n",
      "\n",
      "        Assert.assertEquals(400f, rectangleTable.get(0).get(0).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(0f, rectangleTable.get(0).get(1).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(400f, rectangleTable.get(1).get(0).getRectangle().getWidth(), EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void differentBasisSumLtWidthGrow0Shrink0Test01() {\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                Arrays.<UnitValue>asList(\n",
      "                        UnitValue.createPointValue(50f),\n",
      "                        UnitValue.createPointValue(80f),\n",
      "                        UnitValue.createPointValue(100f)),\n",
      "                Arrays.asList(0f, 0f, 0f),\n",
      "                Arrays.asList(0f, 0f, 0f)\n",
      "        );\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertFalse(rectangleTable.isEmpty());\n",
      "        for (List<FlexItemInfo> line : rectangleTable) {\n",
      "            for (FlexItemInfo flexItemInfo : line) {\n",
      "                Assert.assertEquals(100.0f, flexItemInfo.getRectangle().getHeight(), EPS);\n",
      "            }\n",
      "        }\n",
      "        Assert.assertEquals(50f, rectangleTable.get(0).get(0).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(80f, rectangleTable.get(0).get(1).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(100f, rectangleTable.get(0).get(2).getRectangle().getWidth(), EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void differentBasisSumLtWidthGrow0Shrink0Item2Grow2Test01() {\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                Arrays.<UnitValue>asList(\n",
      "                        UnitValue.createPointValue(50f),\n",
      "                        UnitValue.createPointValue(80f),\n",
      "                        UnitValue.createPointValue(100f)),\n",
      "                Arrays.asList(0f, 2f, 0f),\n",
      "                Arrays.asList(0f, 0f, 0f)\n",
      "        );\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertFalse(rectangleTable.isEmpty());\n",
      "        for (List<FlexItemInfo> line : rectangleTable) {\n",
      "            for (FlexItemInfo flexItemInfo : line) {\n",
      "                Assert.assertEquals(100.0f, flexItemInfo.getRectangle().getHeight(), EPS);\n",
      "            }\n",
      "        }\n",
      "        Assert.assertEquals(50f, rectangleTable.get(0).get(0).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(250f, rectangleTable.get(0).get(1).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(100f, rectangleTable.get(0).get(2).getRectangle().getWidth(), EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void differentBasisSumLtWidthGrow1Shrink0Test01() {\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                Arrays.<UnitValue>asList(\n",
      "                        UnitValue.createPointValue(50f),\n",
      "                        UnitValue.createPointValue(80f),\n",
      "                        UnitValue.createPointValue(100f)),\n",
      "                Arrays.asList(1f, 1f, 1f),\n",
      "                Arrays.asList(0f, 0f, 0f)\n",
      "        );\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertFalse(rectangleTable.isEmpty());\n",
      "        for (List<FlexItemInfo> line : rectangleTable) {\n",
      "            for (FlexItemInfo flexItemInfo : line) {\n",
      "                Assert.assertEquals(100.0f, flexItemInfo.getRectangle().getHeight(), EPS);\n",
      "            }\n",
      "        }\n",
      "        Assert.assertEquals(106.66667f, rectangleTable.get(0).get(0).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(136.66667f, rectangleTable.get(0).get(1).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(156.66667f, rectangleTable.get(0).get(2).getRectangle().getWidth(), EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void differentBasisSumGtWidthGrow0Shrink1Test01() {\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                Arrays.<UnitValue>asList(\n",
      "                        UnitValue.createPointValue(100f),\n",
      "                        UnitValue.createPointValue(200f),\n",
      "                        UnitValue.createPointValue(300f)),\n",
      "                Arrays.asList(0f, 0f, 0f),\n",
      "                Arrays.asList(1f, 1f, 1f)\n",
      "        );\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertFalse(rectangleTable.isEmpty());\n",
      "        for (List<FlexItemInfo> line : rectangleTable) {\n",
      "            for (FlexItemInfo flexItemInfo : line) {\n",
      "                Assert.assertEquals(100.0f, flexItemInfo.getRectangle().getHeight(), EPS);\n",
      "            }\n",
      "        }\n",
      "        Assert.assertEquals(200f / 3, rectangleTable.get(0).get(0).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(400f / 3, rectangleTable.get(0).get(1).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(600f / 3, rectangleTable.get(0).get(2).getRectangle().getWidth(), EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void differentBasisSumGtWidthGrow0Shrink05Test01() {\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                Arrays.<UnitValue>asList(\n",
      "                        UnitValue.createPointValue(100f),\n",
      "                        UnitValue.createPointValue(200f),\n",
      "                        UnitValue.createPointValue(300f)),\n",
      "                Arrays.asList(0f, 0f, 0f),\n",
      "                Arrays.asList(0.5f, 0.5f, 0.5f)\n",
      "        );\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertFalse(rectangleTable.isEmpty());\n",
      "        for (List<FlexItemInfo> line : rectangleTable) {\n",
      "            for (FlexItemInfo flexItemInfo : line) {\n",
      "                Assert.assertEquals(100.0f, flexItemInfo.getRectangle().getHeight(), EPS);\n",
      "            }\n",
      "        }\n",
      "        Assert.assertEquals(200f / 3, rectangleTable.get(0).get(0).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(400f / 3, rectangleTable.get(0).get(1).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(600f / 3, rectangleTable.get(0).get(2).getRectangle().getWidth(), EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void differentBasisSumGtWidthGrow0Shrink01Test01() {\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                Arrays.<UnitValue>asList(\n",
      "                        UnitValue.createPointValue(100f),\n",
      "                        UnitValue.createPointValue(200f),\n",
      "                        UnitValue.createPointValue(300f)),\n",
      "                Arrays.asList(0f, 0f, 0f),\n",
      "                Arrays.asList(0.1f, 0.1f, 0.1f)\n",
      "        );\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertFalse(rectangleTable.isEmpty());\n",
      "        for (List<FlexItemInfo> line : rectangleTable) {\n",
      "            for (FlexItemInfo flexItemInfo : line) {\n",
      "                Assert.assertEquals(100.0f, flexItemInfo.getRectangle().getHeight(), EPS);\n",
      "            }\n",
      "        }\n",
      "        Assert.assertEquals(90f, rectangleTable.get(0).get(0).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(180f, rectangleTable.get(0).get(1).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(270f, rectangleTable.get(0).get(2).getRectangle().getWidth(), EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void differentBasisSumGtWidthGrow0Shrink5Test01() {\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                Arrays.<UnitValue>asList(\n",
      "                        UnitValue.createPointValue(100f),\n",
      "                        UnitValue.createPointValue(200f),\n",
      "                        UnitValue.createPointValue(300f)),\n",
      "                Arrays.asList(0f, 0f, 0f),\n",
      "                Arrays.asList(5f, 5f, 5f)\n",
      "        );\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertFalse(rectangleTable.isEmpty());\n",
      "        for (List<FlexItemInfo> line : rectangleTable) {\n",
      "            for (FlexItemInfo flexItemInfo : line) {\n",
      "                Assert.assertEquals(100.0f, flexItemInfo.getRectangle().getHeight(), EPS);\n",
      "            }\n",
      "        }\n",
      "        Assert.assertEquals(200f / 3, rectangleTable.get(0).get(0).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(400f / 3, rectangleTable.get(0).get(1).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(600f / 3, rectangleTable.get(0).get(2).getRectangle().getWidth(), EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void differentBasisSumGtWidthGrow1Shrink1Test01() {\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                Arrays.<UnitValue>asList(\n",
      "                        UnitValue.createPointValue(100f),\n",
      "                        UnitValue.createPointValue(200f),\n",
      "                        UnitValue.createPointValue(300f)),\n",
      "                Arrays.asList(1f, 1f, 1f),\n",
      "                Arrays.asList(1f, 1f, 1f)\n",
      "        );\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertFalse(rectangleTable.isEmpty());\n",
      "        for (List<FlexItemInfo> line : rectangleTable) {\n",
      "            for (FlexItemInfo flexItemInfo : line) {\n",
      "                Assert.assertEquals(100.0f, flexItemInfo.getRectangle().getHeight(), EPS);\n",
      "            }\n",
      "        }\n",
      "        Assert.assertEquals(200f / 3, rectangleTable.get(0).get(0).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(400f / 3, rectangleTable.get(0).get(1).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(600f / 3, rectangleTable.get(0).get(2).getRectangle().getWidth(), EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void differentBasisSumGtWidthGrow1Shrink1Item3Shrink50Test01() {\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                Arrays.<UnitValue>asList(\n",
      "                        UnitValue.createPointValue(100f),\n",
      "                        UnitValue.createPointValue(200f),\n",
      "                        UnitValue.createPointValue(300f)),\n",
      "                Arrays.asList(1f, 1f, 1f),\n",
      "                Arrays.asList(1f, 1f, 50f)\n",
      "        );\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertFalse(rectangleTable.isEmpty());\n",
      "        for (List<FlexItemInfo> line : rectangleTable) {\n",
      "            for (FlexItemInfo flexItemInfo : line) {\n",
      "                Assert.assertEquals(100.0f, flexItemInfo.getRectangle().getHeight(), EPS);\n",
      "            }\n",
      "        }\n",
      "        Assert.assertEquals(98.69281f, rectangleTable.get(0).get(0).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(197.38562f, rectangleTable.get(0).get(1).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(103.92157f, rectangleTable.get(0).get(2).getRectangle().getWidth(), EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void differentBasisSumGtWidthGrow1Shrink1Item3Shrink5Test01() {\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                Arrays.<UnitValue>asList(\n",
      "                        UnitValue.createPointValue(100f),\n",
      "                        UnitValue.createPointValue(200f),\n",
      "                        UnitValue.createPointValue(300f)),\n",
      "                Arrays.asList(1f, 1f, 1f),\n",
      "                Arrays.asList(1f, 1f, 5f)\n",
      "        );\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertFalse(rectangleTable.isEmpty());\n",
      "        for (List<FlexItemInfo> line : rectangleTable) {\n",
      "            for (FlexItemInfo flexItemInfo : line) {\n",
      "                Assert.assertEquals(100.0f, flexItemInfo.getRectangle().getHeight(), EPS);\n",
      "            }\n",
      "        }\n",
      "        Assert.assertEquals(88.888885f, rectangleTable.get(0).get(0).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(177.77777f, rectangleTable.get(0).get(1).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(133.33334f, rectangleTable.get(0).get(2).getRectangle().getWidth(), EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void differentBasisSumGtWidthGrow0Shrink0Test01() {\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                Arrays.<UnitValue>asList(\n",
      "                        UnitValue.createPointValue(100f),\n",
      "                        UnitValue.createPointValue(200f),\n",
      "                        UnitValue.createPointValue(300f)),\n",
      "                Arrays.asList(0f, 0f, 0f),\n",
      "                Arrays.asList(0f, 0f, 0f)\n",
      "        );\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertFalse(rectangleTable.isEmpty());\n",
      "        for (List<FlexItemInfo> line : rectangleTable) {\n",
      "            for (FlexItemInfo flexItemInfo : line) {\n",
      "                Assert.assertEquals(100.0f, flexItemInfo.getRectangle().getHeight(), EPS);\n",
      "            }\n",
      "        }\n",
      "        Assert.assertEquals(100f, rectangleTable.get(0).get(0).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(200f, rectangleTable.get(0).get(1).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(300f, rectangleTable.get(0).get(2).getRectangle().getWidth(), EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void differentBasisSumGtWidthGrow1Shrink0Test01() {\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                Arrays.<UnitValue>asList(\n",
      "                        UnitValue.createPointValue(100f),\n",
      "                        UnitValue.createPointValue(200f),\n",
      "                        UnitValue.createPointValue(300f)),\n",
      "                Arrays.asList(1f, 1f, 1f),\n",
      "                Arrays.asList(0f, 0f, 0f)\n",
      "        );\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertFalse(rectangleTable.isEmpty());\n",
      "        for (List<FlexItemInfo> line : rectangleTable) {\n",
      "            for (FlexItemInfo flexItemInfo : line) {\n",
      "                Assert.assertEquals(100.0f, flexItemInfo.getRectangle().getHeight(), EPS);\n",
      "            }\n",
      "        }\n",
      "        Assert.assertEquals(100f, rectangleTable.get(0).get(0).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(200f, rectangleTable.get(0).get(1).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(300f, rectangleTable.get(0).get(2).getRectangle().getWidth(), EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void basis250SumGtWidthGrow0Shrink1WrapTest01() {\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                WRAP_STYLE,\n",
      "                Arrays.<UnitValue>asList(\n",
      "                        UnitValue.createPointValue(250f),\n",
      "                        UnitValue.createPointValue(250f),\n",
      "                        UnitValue.createPointValue(250f)),\n",
      "                Arrays.asList(0f, 0f, 0f),\n",
      "                Arrays.asList(1f, 1f, 1f)\n",
      "        );\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertFalse(rectangleTable.isEmpty());\n",
      "        for (List<FlexItemInfo> line : rectangleTable) {\n",
      "            for (FlexItemInfo flexItemInfo : line) {\n",
      "                Assert.assertEquals(250f, flexItemInfo.getRectangle().getWidth(), EPS);\n",
      "                Assert.assertEquals(33.333332f, flexItemInfo.getRectangle().getHeight(), EPS);\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void differentBasisSumGtWidthGrow0Shrink1WrapTest01() {\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                WRAP_STYLE,\n",
      "                Arrays.<UnitValue>asList(\n",
      "                        UnitValue.createPointValue(100f),\n",
      "                        UnitValue.createPointValue(200f),\n",
      "                        UnitValue.createPointValue(300f)),\n",
      "                Arrays.asList(0f, 0f, 0f),\n",
      "                Arrays.asList(1f, 1f, 1f)\n",
      "        );\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertFalse(rectangleTable.isEmpty());\n",
      "        for (List<FlexItemInfo> line : rectangleTable) {\n",
      "            for (FlexItemInfo flexItemInfo : line) {\n",
      "                Assert.assertEquals(50.0f, flexItemInfo.getRectangle().getHeight(), EPS);\n",
      "            }\n",
      "        }\n",
      "        Assert.assertEquals(100f, rectangleTable.get(0).get(0).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(200f, rectangleTable.get(0).get(1).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(300f, rectangleTable.get(1).get(0).getRectangle().getWidth(), EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void differentBasisSumGtWidthGrow0Shrink05WrapTest01() {\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                WRAP_STYLE,\n",
      "                Arrays.<UnitValue>asList(\n",
      "                        UnitValue.createPointValue(100f),\n",
      "                        UnitValue.createPointValue(200f),\n",
      "                        UnitValue.createPointValue(300f)),\n",
      "                Arrays.asList(0f, 0f, 0f),\n",
      "                Arrays.asList(0.5f, 0.5f, 0.5f)\n",
      "        );\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertFalse(rectangleTable.isEmpty());\n",
      "        for (List<FlexItemInfo> line : rectangleTable) {\n",
      "            for (FlexItemInfo flexItemInfo : line) {\n",
      "                Assert.assertEquals(50.0f, flexItemInfo.getRectangle().getHeight(), EPS);\n",
      "            }\n",
      "        }\n",
      "        Assert.assertEquals(100f, rectangleTable.get(0).get(0).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(200f, rectangleTable.get(0).get(1).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(300f, rectangleTable.get(1).get(0).getRectangle().getWidth(), EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void differentBasisSumGtWidthGrow0Shrink01WrapTest01() {\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                WRAP_STYLE,\n",
      "                Arrays.<UnitValue>asList(\n",
      "                        UnitValue.createPointValue(100f),\n",
      "                        UnitValue.createPointValue(200f),\n",
      "                        UnitValue.createPointValue(300f)),\n",
      "                Arrays.asList(0f, 0f, 0f),\n",
      "                Arrays.asList(0.1f, 0.1f, 0.1f)\n",
      "        );\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertFalse(rectangleTable.isEmpty());\n",
      "        for (List<FlexItemInfo> line : rectangleTable) {\n",
      "            for (FlexItemInfo flexItemInfo : line) {\n",
      "                Assert.assertEquals(50.0f, flexItemInfo.getRectangle().getHeight(), EPS);\n",
      "            }\n",
      "        }\n",
      "        Assert.assertEquals(100f, rectangleTable.get(0).get(0).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(200f, rectangleTable.get(0).get(1).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(300f, rectangleTable.get(1).get(0).getRectangle().getWidth(), EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void differentBasisSumGtWidthGrow0Shrink5WrapTest01() {\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                WRAP_STYLE,\n",
      "                Arrays.<UnitValue>asList(\n",
      "                        UnitValue.createPointValue(100f),\n",
      "                        UnitValue.createPointValue(200f),\n",
      "                        UnitValue.createPointValue(300f)),\n",
      "                Arrays.asList(0f, 0f, 0f),\n",
      "                Arrays.asList(5f, 5f, 5f)\n",
      "        );\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertFalse(rectangleTable.isEmpty());\n",
      "        for (List<FlexItemInfo> line : rectangleTable) {\n",
      "            for (FlexItemInfo flexItemInfo : line) {\n",
      "                Assert.assertEquals(50.0f, flexItemInfo.getRectangle().getHeight(), EPS);\n",
      "            }\n",
      "        }\n",
      "        Assert.assertEquals(100f, rectangleTable.get(0).get(0).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(200f, rectangleTable.get(0).get(1).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(300f, rectangleTable.get(1).get(0).getRectangle().getWidth(), EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void differentBasisSumGtWidthGrow1Shrink1WrapTest01() {\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                WRAP_STYLE,\n",
      "                Arrays.<UnitValue>asList(\n",
      "                        UnitValue.createPointValue(100f),\n",
      "                        UnitValue.createPointValue(200f),\n",
      "                        UnitValue.createPointValue(300f)),\n",
      "                Arrays.asList(1f, 1f, 1f),\n",
      "                Arrays.asList(1f, 1f, 1f)\n",
      "        );\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertFalse(rectangleTable.isEmpty());\n",
      "        for (List<FlexItemInfo> line : rectangleTable) {\n",
      "            for (FlexItemInfo flexItemInfo : line) {\n",
      "                Assert.assertEquals(50.0f, flexItemInfo.getRectangle().getHeight(), EPS);\n",
      "            }\n",
      "        }\n",
      "        Assert.assertEquals(150f, rectangleTable.get(0).get(0).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(250f, rectangleTable.get(0).get(1).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(400f, rectangleTable.get(1).get(0).getRectangle().getWidth(), EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void differentBasisSumGtWidthGrow1Shrink1Item3Shrink50WrapTest01() {\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                WRAP_STYLE,\n",
      "                Arrays.<UnitValue>asList(\n",
      "                        UnitValue.createPointValue(100f),\n",
      "                        UnitValue.createPointValue(200f),\n",
      "                        UnitValue.createPointValue(300f)),\n",
      "                Arrays.asList(1f, 1f, 1f),\n",
      "                Arrays.asList(1f, 1f, 50f)\n",
      "        );\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertFalse(rectangleTable.isEmpty());\n",
      "        for (List<FlexItemInfo> line : rectangleTable) {\n",
      "            for (FlexItemInfo flexItemInfo : line) {\n",
      "                Assert.assertEquals(50.0f, flexItemInfo.getRectangle().getHeight(), EPS);\n",
      "            }\n",
      "        }\n",
      "        Assert.assertEquals(150f, rectangleTable.get(0).get(0).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(250f, rectangleTable.get(0).get(1).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(400f, rectangleTable.get(1).get(0).getRectangle().getWidth(), EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void differentBasisSumGtWidthGrow1Shrink1Item3Shrink5WrapTest01() {\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                WRAP_STYLE,\n",
      "                Arrays.<UnitValue>asList(\n",
      "                        UnitValue.createPointValue(100f),\n",
      "                        UnitValue.createPointValue(200f),\n",
      "                        UnitValue.createPointValue(300f)),\n",
      "                Arrays.asList(1f, 1f, 1f),\n",
      "                Arrays.asList(1f, 1f, 5f)\n",
      "        );\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertFalse(rectangleTable.isEmpty());\n",
      "        for (List<FlexItemInfo> line : rectangleTable) {\n",
      "            for (FlexItemInfo flexItemInfo : line) {\n",
      "                Assert.assertEquals(50.0f, flexItemInfo.getRectangle().getHeight(), EPS);\n",
      "            }\n",
      "        }\n",
      "        Assert.assertEquals(150f, rectangleTable.get(0).get(0).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(250f, rectangleTable.get(0).get(1).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(400f, rectangleTable.get(1).get(0).getRectangle().getWidth(), EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void differentBasisSumGtWidthGrow0Shrink0WrapTest01() {\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                WRAP_STYLE,\n",
      "                Arrays.<UnitValue>asList(\n",
      "                        UnitValue.createPointValue(100f),\n",
      "                        UnitValue.createPointValue(200f),\n",
      "                        UnitValue.createPointValue(300f)),\n",
      "                Arrays.asList(0f, 0f, 0f),\n",
      "                Arrays.asList(0f, 0f, 0f)\n",
      "        );\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertFalse(rectangleTable.isEmpty());\n",
      "        for (List<FlexItemInfo> line : rectangleTable) {\n",
      "            for (FlexItemInfo flexItemInfo : line) {\n",
      "                Assert.assertEquals(50.0f, flexItemInfo.getRectangle().getHeight(), EPS);\n",
      "            }\n",
      "        }\n",
      "        Assert.assertEquals(100f, rectangleTable.get(0).get(0).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(200f, rectangleTable.get(0).get(1).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(300f, rectangleTable.get(1).get(0).getRectangle().getWidth(), EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void differentBasisSumGtWidthGrow1Shrink0WrapTest01() {\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                WRAP_STYLE,\n",
      "                Arrays.<UnitValue>asList(\n",
      "                        UnitValue.createPointValue(100f),\n",
      "                        UnitValue.createPointValue(200f),\n",
      "                        UnitValue.createPointValue(300f)),\n",
      "                Arrays.asList(1f, 1f, 1f),\n",
      "                Arrays.asList(0f, 0f, 0f)\n",
      "        );\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertFalse(rectangleTable.isEmpty());\n",
      "        for (List<FlexItemInfo> line : rectangleTable) {\n",
      "            for (FlexItemInfo flexItemInfo : line) {\n",
      "                Assert.assertEquals(50.0f, flexItemInfo.getRectangle().getHeight(), EPS);\n",
      "            }\n",
      "        }\n",
      "        Assert.assertEquals(150f, rectangleTable.get(0).get(0).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(250f, rectangleTable.get(0).get(1).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(400f, rectangleTable.get(1).get(0).getRectangle().getWidth(), EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void differentBasisPercentSumLtWidthGrow0Shrink1Test01() {\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                Arrays.<UnitValue>asList(\n",
      "                        UnitValue.createPercentValue(10),\n",
      "                        UnitValue.createPercentValue(20),\n",
      "                        UnitValue.createPercentValue(30)),\n",
      "                Arrays.asList(0f, 0f, 0f),\n",
      "                Arrays.asList(1f, 1f, 1f)\n",
      "        );\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertFalse(rectangleTable.isEmpty());\n",
      "        for (List<FlexItemInfo> line : rectangleTable) {\n",
      "            for (FlexItemInfo flexItemInfo : line) {\n",
      "                Assert.assertEquals(100.0f, flexItemInfo.getRectangle().getHeight(), EPS);\n",
      "            }\n",
      "        }\n",
      "        Assert.assertEquals(40f, rectangleTable.get(0).get(0).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(80f, rectangleTable.get(0).get(1).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(120f, rectangleTable.get(0).get(2).getRectangle().getWidth(), EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void differentBasisPercentSumLtWidthGrow1Shrink1Test01() {\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                Arrays.<UnitValue>asList(\n",
      "                        UnitValue.createPercentValue(10),\n",
      "                        UnitValue.createPercentValue(20),\n",
      "                        UnitValue.createPercentValue(30)),\n",
      "                Arrays.asList(1f, 1f, 1f),\n",
      "                Arrays.asList(1f, 1f, 1f)\n",
      "        );\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertFalse(rectangleTable.isEmpty());\n",
      "        for (List<FlexItemInfo> line : rectangleTable) {\n",
      "            for (FlexItemInfo flexItemInfo : line) {\n",
      "                Assert.assertEquals(100.0f, flexItemInfo.getRectangle().getHeight(), EPS);\n",
      "            }\n",
      "        }\n",
      "        Assert.assertEquals(93.333336f, rectangleTable.get(0).get(0).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(133.33333f, rectangleTable.get(0).get(1).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(173.33333f, rectangleTable.get(0).get(2).getRectangle().getWidth(), EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void differentBasisPercentSumLtWidthGrow0Shrink0Test01() {\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                Arrays.<UnitValue>asList(\n",
      "                        UnitValue.createPercentValue(10),\n",
      "                        UnitValue.createPercentValue(20),\n",
      "                        UnitValue.createPercentValue(30)),\n",
      "                Arrays.asList(0f, 0f, 0f),\n",
      "                Arrays.asList(0f, 0f, 0f)\n",
      "        );\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertFalse(rectangleTable.isEmpty());\n",
      "        for (List<FlexItemInfo> line : rectangleTable) {\n",
      "            for (FlexItemInfo flexItemInfo : line) {\n",
      "                Assert.assertEquals(100.0f, flexItemInfo.getRectangle().getHeight(), EPS);\n",
      "            }\n",
      "        }\n",
      "        Assert.assertEquals(40f, rectangleTable.get(0).get(0).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(80f, rectangleTable.get(0).get(1).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(120f, rectangleTable.get(0).get(2).getRectangle().getWidth(), EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void differentBasisPercentSumLtWidthGrow0Shrink0Item2Grow2Test01() {\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                Arrays.<UnitValue>asList(\n",
      "                        UnitValue.createPercentValue(10),\n",
      "                        UnitValue.createPercentValue(20),\n",
      "                        UnitValue.createPercentValue(30)),\n",
      "                Arrays.asList(0f, 2f, 0f),\n",
      "                Arrays.asList(0f, 0f, 0f)\n",
      "        );\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertFalse(rectangleTable.isEmpty());\n",
      "        for (List<FlexItemInfo> line : rectangleTable) {\n",
      "            for (FlexItemInfo flexItemInfo : line) {\n",
      "                Assert.assertEquals(100.0f, flexItemInfo.getRectangle().getHeight(), EPS);\n",
      "            }\n",
      "        }\n",
      "        Assert.assertEquals(40f, rectangleTable.get(0).get(0).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(240f, rectangleTable.get(0).get(1).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(120f, rectangleTable.get(0).get(2).getRectangle().getWidth(), EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void differentBasisPercentSumLtWidthGrow1Shrink0Test01() {\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                Arrays.<UnitValue>asList(\n",
      "                        UnitValue.createPercentValue(10),\n",
      "                        UnitValue.createPercentValue(20),\n",
      "                        UnitValue.createPercentValue(30)),\n",
      "                Arrays.asList(1f, 1f, 1f),\n",
      "                Arrays.asList(0f, 0f, 0f)\n",
      "        );\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertFalse(rectangleTable.isEmpty());\n",
      "        for (List<FlexItemInfo> line : rectangleTable) {\n",
      "            for (FlexItemInfo flexItemInfo : line) {\n",
      "                Assert.assertEquals(100.0f, flexItemInfo.getRectangle().getHeight(), EPS);\n",
      "            }\n",
      "        }\n",
      "        Assert.assertEquals(93.333336f, rectangleTable.get(0).get(0).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(133.33333f, rectangleTable.get(0).get(1).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(173.33333f, rectangleTable.get(0).get(2).getRectangle().getWidth(), EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void differentBasisPercentSumGtWidthGrow0Shrink1Test01() {\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                Arrays.<UnitValue>asList(\n",
      "                        UnitValue.createPercentValue(30),\n",
      "                        UnitValue.createPercentValue(40),\n",
      "                        UnitValue.createPercentValue(50)),\n",
      "                Arrays.asList(0f, 0f, 0f),\n",
      "                Arrays.asList(1f, 1f, 1f)\n",
      "        );\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertFalse(rectangleTable.isEmpty());\n",
      "        for (List<FlexItemInfo> line : rectangleTable) {\n",
      "            for (FlexItemInfo flexItemInfo : line) {\n",
      "                Assert.assertEquals(100.0f, flexItemInfo.getRectangle().getHeight(), EPS);\n",
      "            }\n",
      "        }\n",
      "        Assert.assertEquals(300f / 3, rectangleTable.get(0).get(0).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(400f / 3, rectangleTable.get(0).get(1).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(500f / 3, rectangleTable.get(0).get(2).getRectangle().getWidth(), EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void differentBasisPercentSumGtWidthGrow0Shrink05Test01() {\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                Arrays.<UnitValue>asList(\n",
      "                        UnitValue.createPercentValue(30),\n",
      "                        UnitValue.createPercentValue(40),\n",
      "                        UnitValue.createPercentValue(50)),\n",
      "                Arrays.asList(0f, 0f, 0f),\n",
      "                Arrays.asList(0.5f, 0.5f, 0.5f)\n",
      "        );\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertFalse(rectangleTable.isEmpty());\n",
      "        for (List<FlexItemInfo> line : rectangleTable) {\n",
      "            for (FlexItemInfo flexItemInfo : line) {\n",
      "                Assert.assertEquals(100.0f, flexItemInfo.getRectangle().getHeight(), EPS);\n",
      "            }\n",
      "        }\n",
      "        Assert.assertEquals(100f, rectangleTable.get(0).get(0).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(400f / 3, rectangleTable.get(0).get(1).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(500f / 3, rectangleTable.get(0).get(2).getRectangle().getWidth(), EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void differentBasisPercentSumGtWidthGrow0Shrink01Test01() {\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                Arrays.<UnitValue>asList(\n",
      "                        UnitValue.createPercentValue(30),\n",
      "                        UnitValue.createPercentValue(40),\n",
      "                        UnitValue.createPercentValue(50)),\n",
      "                Arrays.asList(0f, 0f, 0f),\n",
      "                Arrays.asList(0.1f, 0.1f, 0.1f)\n",
      "        );\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertFalse(rectangleTable.isEmpty());\n",
      "        for (List<FlexItemInfo> line : rectangleTable) {\n",
      "            for (FlexItemInfo flexItemInfo : line) {\n",
      "                Assert.assertEquals(100.0f, flexItemInfo.getRectangle().getHeight(), EPS);\n",
      "            }\n",
      "        }\n",
      "        Assert.assertEquals(114f, rectangleTable.get(0).get(0).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(152f, rectangleTable.get(0).get(1).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(190f, rectangleTable.get(0).get(2).getRectangle().getWidth(), EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void differentBasisPercentSumGtWidthGrow0Shrink5Test01() {\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                Arrays.<UnitValue>asList(\n",
      "                        UnitValue.createPercentValue(30),\n",
      "                        UnitValue.createPercentValue(40),\n",
      "                        UnitValue.createPercentValue(50)),\n",
      "                Arrays.asList(0f, 0f, 0f),\n",
      "                Arrays.asList(5f, 5f, 5f)\n",
      "        );\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertFalse(rectangleTable.isEmpty());\n",
      "        for (List<FlexItemInfo> line : rectangleTable) {\n",
      "            for (FlexItemInfo flexItemInfo : line) {\n",
      "                Assert.assertEquals(100.0f, flexItemInfo.getRectangle().getHeight(), EPS);\n",
      "            }\n",
      "        }\n",
      "        Assert.assertEquals(300f / 3, rectangleTable.get(0).get(0).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(400f / 3, rectangleTable.get(0).get(1).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(500f / 3, rectangleTable.get(0).get(2).getRectangle().getWidth(), EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void differentBasisPercentSumGtWidthGrow1Shrink1Test01() {\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                Arrays.<UnitValue>asList(\n",
      "                        UnitValue.createPercentValue(30),\n",
      "                        UnitValue.createPercentValue(40),\n",
      "                        UnitValue.createPercentValue(50)),\n",
      "                Arrays.asList(1f, 1f, 1f),\n",
      "                Arrays.asList(1f, 1f, 1f)\n",
      "        );\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertFalse(rectangleTable.isEmpty());\n",
      "        for (List<FlexItemInfo> line : rectangleTable) {\n",
      "            for (FlexItemInfo flexItemInfo : line) {\n",
      "                Assert.assertEquals(100.0f, flexItemInfo.getRectangle().getHeight(), EPS);\n",
      "            }\n",
      "        }\n",
      "        Assert.assertEquals(300f / 3, rectangleTable.get(0).get(0).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(400f / 3, rectangleTable.get(0).get(1).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(500f / 3, rectangleTable.get(0).get(2).getRectangle().getWidth(), EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void differentBasisPercentSumGtWidthGrow1Shrink1Item3Shrink50Test01() {\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                Arrays.<UnitValue>asList(\n",
      "                        UnitValue.createPercentValue(30),\n",
      "                        UnitValue.createPercentValue(40),\n",
      "                        UnitValue.createPercentValue(50)),\n",
      "                Arrays.asList(1f, 1f, 1f),\n",
      "                Arrays.asList(1f, 1f, 50f)\n",
      "        );\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertFalse(rectangleTable.isEmpty());\n",
      "        for (List<FlexItemInfo> line : rectangleTable) {\n",
      "            for (FlexItemInfo flexItemInfo : line) {\n",
      "                Assert.assertEquals(100.0f, flexItemInfo.getRectangle().getHeight(), EPS);\n",
      "            }\n",
      "        }\n",
      "        Assert.assertEquals(119.06615f, rectangleTable.get(0).get(0).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(158.75487f, rectangleTable.get(0).get(1).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(122.178986f, rectangleTable.get(0).get(2).getRectangle().getWidth(), EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void differentBasisPercentSumGtWidthGrow1Shrink1Item3Shrink5Test01() {\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                Arrays.<UnitValue>asList(\n",
      "                        UnitValue.createPercentValue(30),\n",
      "                        UnitValue.createPercentValue(40),\n",
      "                        UnitValue.createPercentValue(50)),\n",
      "                Arrays.asList(1f, 1f, 1f),\n",
      "                Arrays.asList(1f, 1f, 5f)\n",
      "        );\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertFalse(rectangleTable.isEmpty());\n",
      "        for (List<FlexItemInfo> line : rectangleTable) {\n",
      "            for (FlexItemInfo flexItemInfo : line) {\n",
      "                Assert.assertEquals(100.0f, flexItemInfo.getRectangle().getHeight(), EPS);\n",
      "            }\n",
      "        }\n",
      "        Assert.assertEquals(112.5f, rectangleTable.get(0).get(0).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(150f, rectangleTable.get(0).get(1).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(137.5f, rectangleTable.get(0).get(2).getRectangle().getWidth(), EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void differentBasisPercentSumGtWidthGrow0Shrink0Test01() {\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                Arrays.<UnitValue>asList(\n",
      "                        UnitValue.createPercentValue(30),\n",
      "                        UnitValue.createPercentValue(40),\n",
      "                        UnitValue.createPercentValue(50)),\n",
      "                Arrays.asList(0f, 0f, 0f),\n",
      "                Arrays.asList(0f, 0f, 0f)\n",
      "        );\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertFalse(rectangleTable.isEmpty());\n",
      "        for (List<FlexItemInfo> line : rectangleTable) {\n",
      "            for (FlexItemInfo flexItemInfo : line) {\n",
      "                Assert.assertEquals(100.0f, flexItemInfo.getRectangle().getHeight(), EPS);\n",
      "            }\n",
      "        }\n",
      "        Assert.assertEquals(120f, rectangleTable.get(0).get(0).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(160f, rectangleTable.get(0).get(1).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(200f, rectangleTable.get(0).get(2).getRectangle().getWidth(), EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void differentBasisPercentSumGtWidthGrow1Shrink0Test01() {\n",
      "        List<List<FlexItemInfo>> rectangleTable = testFlex(\n",
      "                Arrays.<UnitValue>asList(\n",
      "                        UnitValue.createPercentValue(30),\n",
      "                        UnitValue.createPercentValue(40),\n",
      "                        UnitValue.createPercentValue(50)),\n",
      "                Arrays.asList(1f, 1f, 1f),\n",
      "                Arrays.asList(0f, 0f, 0f)\n",
      "        );\n",
      "\n",
      "        // after checks\n",
      "        Assert.assertFalse(rectangleTable.isEmpty());\n",
      "        for (List<FlexItemInfo> line : rectangleTable) {\n",
      "            for (FlexItemInfo flexItemInfo : line) {\n",
      "                Assert.assertEquals(100.0f, flexItemInfo.getRectangle().getHeight(), EPS);\n",
      "            }\n",
      "        }\n",
      "\n",
      "        Assert.assertEquals(120f, rectangleTable.get(0).get(0).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(160f, rectangleTable.get(0).get(1).getRectangle().getWidth(), EPS);\n",
      "        Assert.assertEquals(200f, rectangleTable.get(0).get(2).getRectangle().getWidth(), EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void calculateMinContentWithMinWidthTest() {\n",
      "        DivRenderer divRenderer = new DivRenderer(new Div());\n",
      "        divRenderer.setProperty(Property.WIDTH, UnitValue.createPointValue(100));\n",
      "        divRenderer.setProperty(Property.MIN_WIDTH, UnitValue.createPointValue(30));\n",
      "\n",
      "        FlexUtil.FlexItemCalculationInfo info = createFlexItemCalculationInfo(divRenderer);\n",
      "        Assert.assertEquals(30f, info.minContent, EPS);\n",
      "\n",
      "        divRenderer.setProperty(Property.WIDTH, UnitValue.createPointValue(30));\n",
      "        divRenderer.setProperty(Property.MIN_WIDTH, UnitValue.createPointValue(100));\n",
      "\n",
      "        info = createFlexItemCalculationInfo(divRenderer);\n",
      "        Assert.assertEquals(100f, info.minContent, EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void calculateMinContentForDivWithContentTest() {\n",
      "        Div div = new Div();\n",
      "        div.add(new Div().setWidth(50));\n",
      "        IRenderer divRenderer = div.createRendererSubTree();\n",
      "\n",
      "        FlexUtil.FlexItemCalculationInfo info = createFlexItemCalculationInfo((AbstractRenderer) divRenderer);\n",
      "        Assert.assertEquals(50.0f, info.minContent, EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void calculateMinContentForDivWithWidthTest() {\n",
      "        DivRenderer divRenderer = new DivRenderer(new Div());\n",
      "        divRenderer.setProperty(Property.WIDTH, UnitValue.createPointValue(100));\n",
      "\n",
      "        FlexUtil.FlexItemCalculationInfo info = createFlexItemCalculationInfo(divRenderer);\n",
      "        Assert.assertEquals(0.0f, info.minContent, EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void calculateMinContentForDivWithWidthAndContentTest() {\n",
      "        Div div = new Div();\n",
      "        div.add(new Div().setWidth(50));\n",
      "        IRenderer divRenderer = div.createRendererSubTree();\n",
      "        divRenderer.setProperty(Property.WIDTH, UnitValue.createPointValue(100));\n",
      "\n",
      "        FlexUtil.FlexItemCalculationInfo info = createFlexItemCalculationInfo((AbstractRenderer) divRenderer);\n",
      "        Assert.assertEquals(50.0f, info.minContent, EPS);\n",
      "\n",
      "        div = new Div();\n",
      "        div.add(new Div().setWidth(150));\n",
      "        divRenderer = div.createRendererSubTree();\n",
      "        divRenderer.setProperty(Property.WIDTH, UnitValue.createPointValue(100));\n",
      "\n",
      "        info = createFlexItemCalculationInfo((AbstractRenderer) divRenderer);\n",
      "        Assert.assertEquals(100.0f, info.minContent, EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void calculateMinContentForDivWithWidthMaxWidthAndContentTest() {\n",
      "        Div div = new Div();\n",
      "        div.add(new Div().setWidth(50));\n",
      "        div.setProperty(Property.MAX_WIDTH, UnitValue.createPointValue(45));\n",
      "        IRenderer divRenderer = div.createRendererSubTree();\n",
      "        divRenderer.setProperty(Property.WIDTH, UnitValue.createPointValue(100));\n",
      "\n",
      "        FlexUtil.FlexItemCalculationInfo info = createFlexItemCalculationInfo((AbstractRenderer) divRenderer);\n",
      "        Assert.assertEquals(45.0f, info.minContent, EPS);\n",
      "\n",
      "        div = new Div();\n",
      "        div.add(new Div().setWidth(150));\n",
      "        div.setProperty(Property.MAX_WIDTH, UnitValue.createPointValue(120));\n",
      "        divRenderer = div.createRendererSubTree();\n",
      "        divRenderer.setProperty(Property.WIDTH, UnitValue.createPointValue(100));\n",
      "\n",
      "        info = createFlexItemCalculationInfo((AbstractRenderer) divRenderer);\n",
      "        Assert.assertEquals(100.0f, info.minContent, EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void calculateMinContentForImageTest() {\n",
      "        Image image = new Image(new PdfFormXObject(new Rectangle(60, 150)));\n",
      "        IRenderer imageRenderer = image.createRendererSubTree();\n",
      "\n",
      "        FlexUtil.FlexItemCalculationInfo info = createFlexItemCalculationInfo((AbstractRenderer) imageRenderer);\n",
      "        Assert.assertEquals(60.0f, info.minContent, EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void calculateMinContentForImageWithHeightTest() {\n",
      "        Image image = new Image(new PdfFormXObject(new Rectangle(60, 150)));\n",
      "        image.setHeight(300);\n",
      "        IRenderer imageRenderer = image.createRendererSubTree();\n",
      "\n",
      "        FlexUtil.FlexItemCalculationInfo info = createFlexItemCalculationInfo((AbstractRenderer) imageRenderer);\n",
      "        Assert.assertEquals(60.0f, info.minContent, EPS);\n",
      "\n",
      "        image = new Image(new PdfFormXObject(new Rectangle(60, 150)));\n",
      "        image.setHeight(100);\n",
      "        imageRenderer = image.createRendererSubTree();\n",
      "\n",
      "        info = createFlexItemCalculationInfo((AbstractRenderer) imageRenderer);\n",
      "        Assert.assertEquals(40.0f, info.minContent, EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void calculateMinContentForImageWithHeightAndMinMaxHeightsTest() {\n",
      "        Image image = new Image(new PdfFormXObject(new Rectangle(60, 150)));\n",
      "        image.setHeight(300);\n",
      "        image.setMinHeight(20);\n",
      "        image.setMaxHeight(100);\n",
      "        IRenderer imageRenderer = image.createRendererSubTree();\n",
      "\n",
      "        FlexUtil.FlexItemCalculationInfo info = createFlexItemCalculationInfo((AbstractRenderer) imageRenderer);\n",
      "        Assert.assertEquals(40.0f, info.minContent, EPS);\n",
      "\n",
      "        image = new Image(new PdfFormXObject(new Rectangle(60, 150)));\n",
      "        image.setHeight(100);\n",
      "        image.setMinHeight(20);\n",
      "        image.setMaxHeight(75);\n",
      "        imageRenderer = image.createRendererSubTree();\n",
      "\n",
      "        info = createFlexItemCalculationInfo((AbstractRenderer) imageRenderer);\n",
      "        Assert.assertEquals(30.0f, info.minContent, EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void calculateMinContentForImageWithHeightAndWidthTest() {\n",
      "        Image image = new Image(new PdfFormXObject(new Rectangle(60, 150)));\n",
      "        image.setHeight(50);\n",
      "        image.setWidth(100);\n",
      "        IRenderer imageRenderer = image.createRendererSubTree();\n",
      "\n",
      "        FlexUtil.FlexItemCalculationInfo info = createFlexItemCalculationInfo((AbstractRenderer) imageRenderer);\n",
      "        Assert.assertEquals(60.0f, info.minContent, EPS);\n",
      "\n",
      "        image = new Image(new PdfFormXObject(new Rectangle(60, 150)));\n",
      "        image.setHeight(50);\n",
      "        image.setWidth(50);\n",
      "        imageRenderer = image.createRendererSubTree();\n",
      "\n",
      "        info = createFlexItemCalculationInfo((AbstractRenderer) imageRenderer);\n",
      "        Assert.assertEquals(50.0f, info.minContent, EPS);\n",
      "    }\n",
      "\n",
      "    private static FlexUtil.FlexItemCalculationInfo createFlexItemCalculationInfo(AbstractRenderer renderer) {\n",
      "        return new FlexUtil.FlexItemCalculationInfo(renderer, 0, 0, 0, 0, false, false, 0);\n",
      "    }\n",
      "\n",
      "    private static List<List<FlexItemInfo>> testFlex(List<UnitValue> flexBasisValues, List<Float> flexGrowValues,\n",
      "                                                     List<Float> flexShrinkValues) {\n",
      "        return testFlex(DEFAULT_STYLE, flexBasisValues, flexGrowValues, flexShrinkValues);\n",
      "    }\n",
      "\n",
      "    private static List<List<FlexItemInfo>> testFlex(Style containerStyle, List<UnitValue> flexBasisValues,\n",
      "                                                     List<Float> flexGrowValues,\n",
      "                                                     List<Float> flexShrinkValues) {\n",
      "        return testFlex(containerStyle, flexBasisValues, flexGrowValues, flexShrinkValues, null);\n",
      "    }\n",
      "\n",
      "    private static List<List<FlexItemInfo>> testFlex(Style containerStyle, List<UnitValue> flexBasisValues,\n",
      "                                                     List<Float> flexGrowValues,\n",
      "                                                     List<Float> flexShrinkValues, Style elementStyle) {\n",
      "        assert flexBasisValues.size() == flexGrowValues.size();\n",
      "        assert flexBasisValues.size() == flexShrinkValues.size();\n",
      "\n",
      "        Rectangle bBox = new Rectangle(PageSize.A4);\n",
      "        bBox.applyMargins(36f, 36f, 36f, 36f, false);\n",
      "\n",
      "        Div div = new Div();\n",
      "        div.addStyle(containerStyle);\n",
      "\n",
      "        DocumentRenderer documentRenderer = new DocumentRenderer(\n",
      "                new Document(new PdfDocument(new PdfWriter(new ByteArrayOutputStream()))));\n",
      "\n",
      "        FlexContainerRenderer flexContainerRenderer = new FlexContainerRenderer(div);\n",
      "        flexContainerRenderer.setParent(documentRenderer);\n",
      "        div.setNextRenderer(flexContainerRenderer);\n",
      "\n",
      "        for (int i = 0; i < flexBasisValues.size(); i++) {\n",
      "            Div flexItem = new Div().add(new Paragraph(\"x\"));\n",
      "            if (elementStyle != null) {\n",
      "                flexItem.addStyle(elementStyle);\n",
      "            }\n",
      "            AbstractRenderer flexItemRenderer = (AbstractRenderer) flexItem.createRendererSubTree()\n",
      "                    .setParent(flexContainerRenderer);\n",
      "\n",
      "            UnitValue flexBasis = null == flexBasisValues.get(i) ? UnitValue\n",
      "                    .createPointValue(flexItemRenderer.getMinMaxWidth().getMinWidth()) : flexBasisValues.get(i);\n",
      "\n",
      "            flexItemRenderer.setProperty(Property.FLEX_GROW, flexGrowValues.get(i));\n",
      "            flexItemRenderer.setProperty(Property.FLEX_SHRINK, flexShrinkValues.get(i));\n",
      "            flexItemRenderer.setProperty(Property.FLEX_BASIS, flexBasis);\n",
      "\n",
      "            div.add(flexItem);\n",
      "            flexContainerRenderer.addChild(flexItemRenderer);\n",
      "        }\n",
      "\n",
      "        return FlexUtil.calculateChildrenRectangles(bBox, (FlexContainerRenderer) div.getRenderer());\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "FlexUtil::::isColumnDirection(com.itextpdf.layout.renderer.FlexContainerRenderer)": [
        190,
        194
      ],
      "FlexUtil::::resolveUnitValue(com.itextpdf.layout.renderer.FlexContainerRenderer,int,float)": [
        234,
        243
      ],
      "FlexUtil::::determineFlexBasisAndHypotheticalMainSizeForFlexItems(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)": [
        255,
        316
      ],
      "FlexUtil::::collectFlexItemsIntoFlexLines(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)": [
        318,
        354
      ],
      "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)": [
        356,
        476
      ],
      "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float,float)": [
        478,
        499
      ],
      "FlexUtil::::determineHypotheticalCrossSizeForFlexItems(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,boolean,float)": [
        501,
        508
      ],
      "FlexUtil::::determineHypotheticalCrossSizeForFlexItem(com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo,boolean,float)": [
        510,
        548
      ],
      "FlexUtil::::calculateColumnDirectionCrossSizes(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>>)": [
        550,
        564
      ],
      "FlexUtil::::calculateCrossSizeOfEachFlexLine(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.lang.Float,java.lang.Float,java.lang.Float)": [
        566,
        608
      ],
      "FlexUtil::::determineUsedCrossSizeOfEachFlexItem(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.util.List<java.lang.Float>,com.itextpdf.layout.renderer.FlexContainerRenderer)": [
        644,
        688
      ],
      "FlexUtil::::retrieveMaxHeightForMainDirection(com.itextpdf.layout.renderer.AbstractRenderer)": [
        690,
        693
      ],
      "FlexUtil::::retrieveMinHeightForMainDirection(com.itextpdf.layout.renderer.AbstractRenderer)": [
        695,
        699
      ],
      "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)": [
        701,
        792
      ],
      "FlexUtil::::applyJustifyContent(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)": [
        794,
        841
      ],
      "FlexUtil::::calculateFreeSpace(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float)": [
        843,
        853
      ],
      "FlexUtil::::hasFlexibleItems(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>)": [
        855,
        862
      ],
      "FlexUtil::::isZero(float)": [
        864,
        866
      ],
      "FlexUtil::::createFlexItemCalculationInfos(com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)": [
        868,
        909
      ],
      "FlexUtil::::calculateMaxMainSize(com.itextpdf.layout.renderer.AbstractRenderer,float,boolean,float)": [
        911,
        961
      ],
      "FlexUtil::::calculateHeight(com.itextpdf.layout.renderer.AbstractRenderer,float)": [
        992,
        996
      ],
      "FlexUtil.FlexItemCalculationInfo::::toRectangle()": [
        1050,
        1054
      ],
      "FlexUtil.FlexItemCalculationInfo::::getOuterMainSize(float)": [
        1056,
        1060
      ],
      "FlexUtil.FlexItemCalculationInfo::::getInnerMainSize(float)": [
        1062,
        1066
      ],
      "FlexUtil.FlexItemCalculationInfo::::getOuterCrossSize(float)": [
        1068,
        1072
      ],
      "FlexUtil.FlexItemCalculationInfo::::getInnerCrossSize(float)": [
        1074,
        1078
      ],
      "FlexUtil.FlexItemCalculationInfo::::calculateMinContentAuto(float,float)": [
        1080,
        1103
      ],
      "FlexUtil.FlexItemCalculationInfo::::calculateTransferredSizeSuggestion(float)": [
        1112,
        1123
      ],
      "FlexUtil.FlexItemCalculationInfo::::calculateSpecifiedSizeSuggestion(float)": [
        1133,
        1146
      ],
      "FlexUtil.FlexItemCalculationInfo::::calculateContentSizeSuggestion(float,float)": [
        1156,
        1184
      ],
      "FlexUtil.FlexItemCalculationInfo::::clampValueByCrossSizesConvertedThroughAspectRatio(float,float)": [
        1186,
        1203
      ]
    },
    "test_method_lines_dic": {
      "FlexUtilTest::::defaultTest01()": [
        93,
        109
      ],
      "FlexUtilTest::::item1BasisGtWidthGrow0Shrink01Test01()": [
        111,
        143
      ],
      "FlexUtilTest::::differentBasisGrow1Shrink0MarginBorderPaddingOnContainerTest01()": [
        145,
        167
      ],
      "FlexUtilTest::::differentBasisGrow1Shrink0MarginBorderPaddingOnContainerNoWidthTest01()": [
        169,
        189
      ],
      "FlexUtilTest::::simpleStretchTest01()": [
        191,
        210
      ],
      "FlexUtilTest::::basis100Grow0Shrink0ColumnTest()": [
        212,
        229
      ],
      "FlexUtilTest::::basis100Grow1Shrink0ColumnTest()": [
        231,
        248
      ],
      "FlexUtilTest::::basis100Grow01Shrink0ColumnTest()": [
        250,
        267
      ],
      "FlexUtilTest::::basis200Grow0Shrink1ColumnTest()": [
        269,
        286
      ],
      "FlexUtilTest::::basis100Grow0CustomShrinkContainerHeight50ColumnTest()": [
        288,
        308
      ],
      "FlexUtilTest::::basis200Grow0CustomShrinkColumnTest1()": [
        310,
        330
      ],
      "FlexUtilTest::::basis200Grow0Shrink01ColumnTest()": [
        332,
        349
      ],
      "FlexUtilTest::::basis200Height150Grow0Shrink1ColumnTest()": [
        351,
        369
      ],
      "FlexUtilTest::::basis100Height150Grow1Shrink0ColumnTest()": [
        371,
        389
      ],
      "FlexUtilTest::::basis100Height50Grow1Shrink0ColumnTest()": [
        391,
        409
      ],
      "FlexUtilTest::::basis100MaxHeight100Grow1Shrink0ColumnTest()": [
        411,
        429
      ],
      "FlexUtilTest::::basis200MinHeight150Grow0Shrink1ColumnTest()": [
        431,
        449
      ],
      "FlexUtilTest::::usualDirectionColumnWithDefiniteWidthTest()": [
        451,
        469
      ],
      "FlexUtilTest::::usualDirectionColumnWithDefiniteMaxWidthTest()": [
        471,
        489
      ],
      "FlexUtilTest::::usualDirectionColumnWithDefiniteMinWidthTest()": [
        491,
        509
      ],
      "FlexUtilTest::::directionColumnWithoutBasisWithDefiniteHeightTest()": [
        511,
        529
      ],
      "FlexUtilTest::::directionColumnWithWrapElementsToGrowTest()": [
        531,
        551
      ],
      "FlexUtilTest::::directionColumnWithWrapElementsNotToGrowTest()": [
        553,
        573
      ],
      "FlexUtilTest::::directionColumnWithWrapElementsToShrinkTest()": [
        575,
        595
      ],
      "FlexUtilTest::::directionColumnWithWrapElementsNotToShrinkTest()": [
        597,
        617
      ],
      "FlexUtilTest::::directionColumnWithWrapDefiniteWidthAndHeightTest()": [
        619,
        640
      ],
      "FlexUtilTest::::directionColumnWithWrapWithAlignItemsAndJustifyContentTest()": [
        642,
        667
      ],
      "FlexUtilTest::::directionColumnWithAlignItemsAndJustifyContentTest1()": [
        669,
        691
      ],
      "FlexUtilTest::::directionColumnWithAlignItemsAndJustifyContentTest2()": [
        693,
        715
      ],
      "FlexUtilTest::::directionColumnWithAlignItemsAndJustifyContentTest3()": [
        717,
        739
      ],
      "FlexUtilTest::::imgAsFlexItemTest01()": [
        741,
        784
      ],
      "FlexUtilTest::::basisGtWidthGrow0Shrink0Test01()": [
        786,
        803
      ],
      "FlexUtilTest::::basisGtWidthGrow0Shrink1Test01()": [
        805,
        822
      ],
      "FlexUtilTest::::basisMinGrow0Shrink1Item2Grow05Test01()": [
        824,
        838
      ],
      "FlexUtilTest::::basisMinGrow0Shrink1Item2Grow2Test01()": [
        840,
        854
      ],
      "FlexUtilTest::::basisMinGrow2Shrink1Test01()": [
        856,
        871
      ],
      "FlexUtilTest::::basisMinGrow05SumGt1Shrink1Test01()": [
        873,
        888
      ],
      "FlexUtilTest::::basisMinGrow01SumLt1Shrink1Test01()": [
        890,
        905
      ],
      "FlexUtilTest::::basisMinGrow0Shrink05SumGt1Test01()": [
        907,
        922
      ],
      "FlexUtilTest::::basisMinGrow0Shrink01SumLt1Test01()": [
        924,
        939
      ],
      "FlexUtilTest::::basis50SumLtWidthGrow0Shrink1Test01()": [
        941,
        960
      ],
      "FlexUtilTest::::basis250SumGtWidthGrow0Shrink1Test01()": [
        962,
        981
      ],
      "FlexUtilTest::::differentBasisSumLtWidthGrow0Shrink1Test01()": [
        983,
        1004
      ],
      "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Test01()": [
        1006,
        1027
      ],
      "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink0Item2MarginBorderPadding30Test01()": [
        1029,
        1067
      ],
      "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MarginBorderPadding30Test01()": [
        1069,
        1106
      ],
      "FlexUtilTest::::ltWidthGrow0Shrink1Item2MarginBorderPadding30Test01()": [
        1108,
        1151
      ],
      "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterTest()": [
        1153,
        1206
      ],
      "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexStartTest()": [
        1208,
        1279
      ],
      "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexEndTest()": [
        1281,
        1348
      ],
      "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30AlignItemsStretchTest()": [
        1350,
        1408
      ],
      "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterDontFitTest()": [
        1410,
        1462
      ],
      "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentTest01()": [
        1464,
        1507
      ],
      "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthLtBasisTest01()": [
        1509,
        1554
      ],
      "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest01()": [
        1556,
        1594
      ],
      "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest02()": [
        1596,
        1634
      ],
      "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest03()": [
        1636,
        1673
      ],
      "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item1MinWidthGtBasisTest01()": [
        1675,
        1713
      ],
      "FlexUtilTest::::imgGtUsedWidthTest01()": [
        1715,
        1755
      ],
      "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest01()": [
        1757,
        1802
      ],
      "FlexUtilTest::::basis1Grow0Test01()": [
        1804,
        1847
      ],
      "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest02()": [
        1849,
        1894
      ],
      "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest03()": [
        1896,
        1941
      ],
      "FlexUtilTest::::differentBasisSumEqWidthGrow1Shrink1Item2Basis0Test01()": [
        1943,
        1970
      ],
      "FlexUtilTest::::differentBasisSumEqWidthGrow1Shrink1Item2Basis0NoContentTest02()": [
        1972,
        2013
      ],
      "FlexUtilTest::::differentBasisSumLtWidthGrow0Shrink0Test01()": [
        2015,
        2036
      ],
      "FlexUtilTest::::differentBasisSumLtWidthGrow0Shrink0Item2Grow2Test01()": [
        2038,
        2059
      ],
      "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink0Test01()": [
        2061,
        2082
      ],
      "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink1Test01()": [
        2084,
        2105
      ],
      "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink05Test01()": [
        2107,
        2128
      ],
      "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink01Test01()": [
        2130,
        2151
      ],
      "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink5Test01()": [
        2153,
        2174
      ],
      "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Test01()": [
        2176,
        2197
      ],
      "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink50Test01()": [
        2199,
        2220
      ],
      "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink5Test01()": [
        2222,
        2243
      ],
      "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink0Test01()": [
        2245,
        2266
      ],
      "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink0Test01()": [
        2268,
        2289
      ],
      "FlexUtilTest::::basis250SumGtWidthGrow0Shrink1WrapTest01()": [
        2291,
        2311
      ],
      "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink1WrapTest01()": [
        2313,
        2335
      ],
      "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink05WrapTest01()": [
        2337,
        2359
      ],
      "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink01WrapTest01()": [
        2361,
        2383
      ],
      "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink5WrapTest01()": [
        2385,
        2407
      ],
      "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1WrapTest01()": [
        2409,
        2431
      ],
      "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink50WrapTest01()": [
        2433,
        2455
      ],
      "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink5WrapTest01()": [
        2457,
        2479
      ],
      "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink0WrapTest01()": [
        2481,
        2503
      ],
      "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink0WrapTest01()": [
        2505,
        2527
      ],
      "FlexUtilTest::::differentBasisPercentSumLtWidthGrow0Shrink1Test01()": [
        2529,
        2550
      ],
      "FlexUtilTest::::differentBasisPercentSumLtWidthGrow1Shrink1Test01()": [
        2552,
        2573
      ],
      "FlexUtilTest::::differentBasisPercentSumLtWidthGrow0Shrink0Test01()": [
        2575,
        2596
      ],
      "FlexUtilTest::::differentBasisPercentSumLtWidthGrow0Shrink0Item2Grow2Test01()": [
        2598,
        2619
      ],
      "FlexUtilTest::::differentBasisPercentSumLtWidthGrow1Shrink0Test01()": [
        2621,
        2642
      ],
      "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink1Test01()": [
        2644,
        2665
      ],
      "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink05Test01()": [
        2667,
        2688
      ],
      "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink01Test01()": [
        2690,
        2711
      ],
      "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink5Test01()": [
        2713,
        2734
      ],
      "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink1Test01()": [
        2736,
        2757
      ],
      "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink1Item3Shrink50Test01()": [
        2759,
        2780
      ],
      "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink1Item3Shrink5Test01()": [
        2782,
        2803
      ],
      "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink0Test01()": [
        2805,
        2826
      ],
      "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink0Test01()": [
        2828,
        2850
      ],
      "FlexUtilTest::::calculateMinContentWithMinWidthTest()": [
        2852,
        2866
      ],
      "FlexUtilTest::::calculateMinContentForDivWithContentTest()": [
        2868,
        2876
      ],
      "FlexUtilTest::::calculateMinContentForDivWithWidthTest()": [
        2878,
        2885
      ],
      "FlexUtilTest::::calculateMinContentForDivWithWidthAndContentTest()": [
        2887,
        2904
      ],
      "FlexUtilTest::::calculateMinContentForDivWithWidthMaxWidthAndContentTest()": [
        2906,
        2925
      ],
      "FlexUtilTest::::calculateMinContentForImageTest()": [
        2927,
        2934
      ],
      "FlexUtilTest::::calculateMinContentForImageWithHeightTest()": [
        2936,
        2951
      ],
      "FlexUtilTest::::calculateMinContentForImageWithHeightAndMinMaxHeightsTest()": [
        2953,
        2972
      ],
      "FlexUtilTest::::calculateMinContentForImageWithHeightAndWidthTest()": [
        2974,
        2991
      ]
    },
    "reverse_method_lines_dic": {
      "190": "FlexUtil::::isColumnDirection(com.itextpdf.layout.renderer.FlexContainerRenderer)",
      "191": "FlexUtil::::isColumnDirection(com.itextpdf.layout.renderer.FlexContainerRenderer)",
      "192": "FlexUtil::::isColumnDirection(com.itextpdf.layout.renderer.FlexContainerRenderer)",
      "193": "FlexUtil::::isColumnDirection(com.itextpdf.layout.renderer.FlexContainerRenderer)",
      "194": "FlexUtil::::isColumnDirection(com.itextpdf.layout.renderer.FlexContainerRenderer)",
      "234": "FlexUtil::::resolveUnitValue(com.itextpdf.layout.renderer.FlexContainerRenderer,int,float)",
      "235": "FlexUtil::::resolveUnitValue(com.itextpdf.layout.renderer.FlexContainerRenderer,int,float)",
      "236": "FlexUtil::::resolveUnitValue(com.itextpdf.layout.renderer.FlexContainerRenderer,int,float)",
      "237": "FlexUtil::::resolveUnitValue(com.itextpdf.layout.renderer.FlexContainerRenderer,int,float)",
      "238": "FlexUtil::::resolveUnitValue(com.itextpdf.layout.renderer.FlexContainerRenderer,int,float)",
      "239": "FlexUtil::::resolveUnitValue(com.itextpdf.layout.renderer.FlexContainerRenderer,int,float)",
      "240": "FlexUtil::::resolveUnitValue(com.itextpdf.layout.renderer.FlexContainerRenderer,int,float)",
      "241": "FlexUtil::::resolveUnitValue(com.itextpdf.layout.renderer.FlexContainerRenderer,int,float)",
      "242": "FlexUtil::::resolveUnitValue(com.itextpdf.layout.renderer.FlexContainerRenderer,int,float)",
      "243": "FlexUtil::::resolveUnitValue(com.itextpdf.layout.renderer.FlexContainerRenderer,int,float)",
      "255": "FlexUtil::::determineFlexBasisAndHypotheticalMainSizeForFlexItems(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "256": "FlexUtil::::determineFlexBasisAndHypotheticalMainSizeForFlexItems(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "257": "FlexUtil::::determineFlexBasisAndHypotheticalMainSizeForFlexItems(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "258": "FlexUtil::::determineFlexBasisAndHypotheticalMainSizeForFlexItems(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "259": "FlexUtil::::determineFlexBasisAndHypotheticalMainSizeForFlexItems(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "260": "FlexUtil::::determineFlexBasisAndHypotheticalMainSizeForFlexItems(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "261": "FlexUtil::::determineFlexBasisAndHypotheticalMainSizeForFlexItems(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "262": "FlexUtil::::determineFlexBasisAndHypotheticalMainSizeForFlexItems(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "263": "FlexUtil::::determineFlexBasisAndHypotheticalMainSizeForFlexItems(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "264": "FlexUtil::::determineFlexBasisAndHypotheticalMainSizeForFlexItems(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "265": "FlexUtil::::determineFlexBasisAndHypotheticalMainSizeForFlexItems(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "266": "FlexUtil::::determineFlexBasisAndHypotheticalMainSizeForFlexItems(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "267": "FlexUtil::::determineFlexBasisAndHypotheticalMainSizeForFlexItems(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "268": "FlexUtil::::determineFlexBasisAndHypotheticalMainSizeForFlexItems(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "269": "FlexUtil::::determineFlexBasisAndHypotheticalMainSizeForFlexItems(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "270": "FlexUtil::::determineFlexBasisAndHypotheticalMainSizeForFlexItems(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "271": "FlexUtil::::determineFlexBasisAndHypotheticalMainSizeForFlexItems(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "272": "FlexUtil::::determineFlexBasisAndHypotheticalMainSizeForFlexItems(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "273": "FlexUtil::::determineFlexBasisAndHypotheticalMainSizeForFlexItems(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "274": "FlexUtil::::determineFlexBasisAndHypotheticalMainSizeForFlexItems(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "275": "FlexUtil::::determineFlexBasisAndHypotheticalMainSizeForFlexItems(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "276": "FlexUtil::::determineFlexBasisAndHypotheticalMainSizeForFlexItems(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "277": "FlexUtil::::determineFlexBasisAndHypotheticalMainSizeForFlexItems(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "278": "FlexUtil::::determineFlexBasisAndHypotheticalMainSizeForFlexItems(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "279": "FlexUtil::::determineFlexBasisAndHypotheticalMainSizeForFlexItems(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "280": "FlexUtil::::determineFlexBasisAndHypotheticalMainSizeForFlexItems(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "281": "FlexUtil::::determineFlexBasisAndHypotheticalMainSizeForFlexItems(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "282": "FlexUtil::::determineFlexBasisAndHypotheticalMainSizeForFlexItems(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "283": "FlexUtil::::determineFlexBasisAndHypotheticalMainSizeForFlexItems(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "284": "FlexUtil::::determineFlexBasisAndHypotheticalMainSizeForFlexItems(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "285": "FlexUtil::::determineFlexBasisAndHypotheticalMainSizeForFlexItems(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "286": "FlexUtil::::determineFlexBasisAndHypotheticalMainSizeForFlexItems(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "287": "FlexUtil::::determineFlexBasisAndHypotheticalMainSizeForFlexItems(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "288": "FlexUtil::::determineFlexBasisAndHypotheticalMainSizeForFlexItems(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "289": "FlexUtil::::determineFlexBasisAndHypotheticalMainSizeForFlexItems(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "290": "FlexUtil::::determineFlexBasisAndHypotheticalMainSizeForFlexItems(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "291": "FlexUtil::::determineFlexBasisAndHypotheticalMainSizeForFlexItems(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "292": "FlexUtil::::determineFlexBasisAndHypotheticalMainSizeForFlexItems(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "293": "FlexUtil::::determineFlexBasisAndHypotheticalMainSizeForFlexItems(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "294": "FlexUtil::::determineFlexBasisAndHypotheticalMainSizeForFlexItems(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "295": "FlexUtil::::determineFlexBasisAndHypotheticalMainSizeForFlexItems(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "296": "FlexUtil::::determineFlexBasisAndHypotheticalMainSizeForFlexItems(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "297": "FlexUtil::::determineFlexBasisAndHypotheticalMainSizeForFlexItems(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "298": "FlexUtil::::determineFlexBasisAndHypotheticalMainSizeForFlexItems(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "299": "FlexUtil::::determineFlexBasisAndHypotheticalMainSizeForFlexItems(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "300": "FlexUtil::::determineFlexBasisAndHypotheticalMainSizeForFlexItems(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "301": "FlexUtil::::determineFlexBasisAndHypotheticalMainSizeForFlexItems(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "302": "FlexUtil::::determineFlexBasisAndHypotheticalMainSizeForFlexItems(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "303": "FlexUtil::::determineFlexBasisAndHypotheticalMainSizeForFlexItems(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "304": "FlexUtil::::determineFlexBasisAndHypotheticalMainSizeForFlexItems(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "305": "FlexUtil::::determineFlexBasisAndHypotheticalMainSizeForFlexItems(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "306": "FlexUtil::::determineFlexBasisAndHypotheticalMainSizeForFlexItems(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "307": "FlexUtil::::determineFlexBasisAndHypotheticalMainSizeForFlexItems(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "308": "FlexUtil::::determineFlexBasisAndHypotheticalMainSizeForFlexItems(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "309": "FlexUtil::::determineFlexBasisAndHypotheticalMainSizeForFlexItems(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "310": "FlexUtil::::determineFlexBasisAndHypotheticalMainSizeForFlexItems(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "311": "FlexUtil::::determineFlexBasisAndHypotheticalMainSizeForFlexItems(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "312": "FlexUtil::::determineFlexBasisAndHypotheticalMainSizeForFlexItems(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "313": "FlexUtil::::determineFlexBasisAndHypotheticalMainSizeForFlexItems(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "314": "FlexUtil::::determineFlexBasisAndHypotheticalMainSizeForFlexItems(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "315": "FlexUtil::::determineFlexBasisAndHypotheticalMainSizeForFlexItems(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "316": "FlexUtil::::determineFlexBasisAndHypotheticalMainSizeForFlexItems(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "318": "FlexUtil::::collectFlexItemsIntoFlexLines(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "319": "FlexUtil::::collectFlexItemsIntoFlexLines(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "320": "FlexUtil::::collectFlexItemsIntoFlexLines(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "321": "FlexUtil::::collectFlexItemsIntoFlexLines(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "322": "FlexUtil::::collectFlexItemsIntoFlexLines(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "323": "FlexUtil::::collectFlexItemsIntoFlexLines(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "324": "FlexUtil::::collectFlexItemsIntoFlexLines(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "325": "FlexUtil::::collectFlexItemsIntoFlexLines(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "326": "FlexUtil::::collectFlexItemsIntoFlexLines(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "327": "FlexUtil::::collectFlexItemsIntoFlexLines(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "328": "FlexUtil::::collectFlexItemsIntoFlexLines(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "329": "FlexUtil::::collectFlexItemsIntoFlexLines(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "330": "FlexUtil::::collectFlexItemsIntoFlexLines(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "331": "FlexUtil::::collectFlexItemsIntoFlexLines(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "332": "FlexUtil::::collectFlexItemsIntoFlexLines(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "333": "FlexUtil::::collectFlexItemsIntoFlexLines(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "334": "FlexUtil::::collectFlexItemsIntoFlexLines(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "335": "FlexUtil::::collectFlexItemsIntoFlexLines(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "336": "FlexUtil::::collectFlexItemsIntoFlexLines(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "337": "FlexUtil::::collectFlexItemsIntoFlexLines(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "338": "FlexUtil::::collectFlexItemsIntoFlexLines(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "339": "FlexUtil::::collectFlexItemsIntoFlexLines(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "340": "FlexUtil::::collectFlexItemsIntoFlexLines(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "341": "FlexUtil::::collectFlexItemsIntoFlexLines(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "342": "FlexUtil::::collectFlexItemsIntoFlexLines(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "343": "FlexUtil::::collectFlexItemsIntoFlexLines(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "344": "FlexUtil::::collectFlexItemsIntoFlexLines(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "345": "FlexUtil::::collectFlexItemsIntoFlexLines(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "346": "FlexUtil::::collectFlexItemsIntoFlexLines(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "347": "FlexUtil::::collectFlexItemsIntoFlexLines(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "348": "FlexUtil::::collectFlexItemsIntoFlexLines(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "349": "FlexUtil::::collectFlexItemsIntoFlexLines(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "350": "FlexUtil::::collectFlexItemsIntoFlexLines(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "351": "FlexUtil::::collectFlexItemsIntoFlexLines(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "352": "FlexUtil::::collectFlexItemsIntoFlexLines(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "353": "FlexUtil::::collectFlexItemsIntoFlexLines(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "354": "FlexUtil::::collectFlexItemsIntoFlexLines(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float,boolean)",
      "356": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "357": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "358": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "359": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "360": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "361": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "362": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "363": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "364": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "365": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "366": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "367": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "368": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "369": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "370": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "371": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "372": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "373": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "374": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "375": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "376": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "377": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "378": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "379": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "380": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "381": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "382": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "383": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "384": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "385": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "386": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "387": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "388": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "389": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "390": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "391": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "392": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "393": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "394": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "395": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "396": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "397": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "398": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "399": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "400": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "401": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "402": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "403": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "404": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "405": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "406": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "407": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "408": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "409": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "410": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "411": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "412": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "413": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "414": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "415": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "416": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "417": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "418": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "419": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "420": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "421": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "422": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "423": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "424": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "425": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "426": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "427": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "428": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "429": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "430": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "431": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "432": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "433": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "434": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "435": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "436": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "437": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "438": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "439": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "440": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "441": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "442": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "443": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "444": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "445": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "446": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "447": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "448": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "449": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "450": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "451": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "452": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "453": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "454": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "455": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "456": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "457": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "458": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "459": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "460": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "461": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "462": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "463": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "464": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "465": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "466": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "467": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "468": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "469": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "470": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "471": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "472": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "473": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "474": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "475": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "476": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float)",
      "478": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float,float)",
      "479": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float,float)",
      "480": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float,float)",
      "481": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float,float)",
      "482": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float,float)",
      "483": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float,float)",
      "484": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float,float)",
      "485": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float,float)",
      "486": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float,float)",
      "487": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float,float)",
      "488": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float,float)",
      "489": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float,float)",
      "490": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float,float)",
      "491": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float,float)",
      "492": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float,float)",
      "493": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float,float)",
      "494": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float,float)",
      "495": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float,float)",
      "496": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float,float)",
      "497": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float,float)",
      "498": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float,float)",
      "499": "FlexUtil::::resolveFlexibleLengths(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,float,float)",
      "501": "FlexUtil::::determineHypotheticalCrossSizeForFlexItems(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,boolean,float)",
      "502": "FlexUtil::::determineHypotheticalCrossSizeForFlexItems(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,boolean,float)",
      "503": "FlexUtil::::determineHypotheticalCrossSizeForFlexItems(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,boolean,float)",
      "504": "FlexUtil::::determineHypotheticalCrossSizeForFlexItems(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,boolean,float)",
      "505": "FlexUtil::::determineHypotheticalCrossSizeForFlexItems(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,boolean,float)",
      "506": "FlexUtil::::determineHypotheticalCrossSizeForFlexItems(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,boolean,float)",
      "507": "FlexUtil::::determineHypotheticalCrossSizeForFlexItems(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,boolean,float)",
      "508": "FlexUtil::::determineHypotheticalCrossSizeForFlexItems(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,boolean,float)",
      "510": "FlexUtil::::determineHypotheticalCrossSizeForFlexItem(com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo,boolean,float)",
      "511": "FlexUtil::::determineHypotheticalCrossSizeForFlexItem(com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo,boolean,float)",
      "512": "FlexUtil::::determineHypotheticalCrossSizeForFlexItem(com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo,boolean,float)",
      "513": "FlexUtil::::determineHypotheticalCrossSizeForFlexItem(com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo,boolean,float)",
      "514": "FlexUtil::::determineHypotheticalCrossSizeForFlexItem(com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo,boolean,float)",
      "515": "FlexUtil::::determineHypotheticalCrossSizeForFlexItem(com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo,boolean,float)",
      "516": "FlexUtil::::determineHypotheticalCrossSizeForFlexItem(com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo,boolean,float)",
      "517": "FlexUtil::::determineHypotheticalCrossSizeForFlexItem(com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo,boolean,float)",
      "518": "FlexUtil::::determineHypotheticalCrossSizeForFlexItem(com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo,boolean,float)",
      "519": "FlexUtil::::determineHypotheticalCrossSizeForFlexItem(com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo,boolean,float)",
      "520": "FlexUtil::::determineHypotheticalCrossSizeForFlexItem(com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo,boolean,float)",
      "521": "FlexUtil::::determineHypotheticalCrossSizeForFlexItem(com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo,boolean,float)",
      "522": "FlexUtil::::determineHypotheticalCrossSizeForFlexItem(com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo,boolean,float)",
      "523": "FlexUtil::::determineHypotheticalCrossSizeForFlexItem(com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo,boolean,float)",
      "524": "FlexUtil::::determineHypotheticalCrossSizeForFlexItem(com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo,boolean,float)",
      "525": "FlexUtil::::determineHypotheticalCrossSizeForFlexItem(com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo,boolean,float)",
      "526": "FlexUtil::::determineHypotheticalCrossSizeForFlexItem(com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo,boolean,float)",
      "527": "FlexUtil::::determineHypotheticalCrossSizeForFlexItem(com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo,boolean,float)",
      "528": "FlexUtil::::determineHypotheticalCrossSizeForFlexItem(com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo,boolean,float)",
      "529": "FlexUtil::::determineHypotheticalCrossSizeForFlexItem(com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo,boolean,float)",
      "530": "FlexUtil::::determineHypotheticalCrossSizeForFlexItem(com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo,boolean,float)",
      "531": "FlexUtil::::determineHypotheticalCrossSizeForFlexItem(com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo,boolean,float)",
      "532": "FlexUtil::::determineHypotheticalCrossSizeForFlexItem(com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo,boolean,float)",
      "533": "FlexUtil::::determineHypotheticalCrossSizeForFlexItem(com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo,boolean,float)",
      "534": "FlexUtil::::determineHypotheticalCrossSizeForFlexItem(com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo,boolean,float)",
      "535": "FlexUtil::::determineHypotheticalCrossSizeForFlexItem(com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo,boolean,float)",
      "536": "FlexUtil::::determineHypotheticalCrossSizeForFlexItem(com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo,boolean,float)",
      "537": "FlexUtil::::determineHypotheticalCrossSizeForFlexItem(com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo,boolean,float)",
      "538": "FlexUtil::::determineHypotheticalCrossSizeForFlexItem(com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo,boolean,float)",
      "539": "FlexUtil::::determineHypotheticalCrossSizeForFlexItem(com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo,boolean,float)",
      "540": "FlexUtil::::determineHypotheticalCrossSizeForFlexItem(com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo,boolean,float)",
      "541": "FlexUtil::::determineHypotheticalCrossSizeForFlexItem(com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo,boolean,float)",
      "542": "FlexUtil::::determineHypotheticalCrossSizeForFlexItem(com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo,boolean,float)",
      "543": "FlexUtil::::determineHypotheticalCrossSizeForFlexItem(com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo,boolean,float)",
      "544": "FlexUtil::::determineHypotheticalCrossSizeForFlexItem(com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo,boolean,float)",
      "545": "FlexUtil::::determineHypotheticalCrossSizeForFlexItem(com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo,boolean,float)",
      "546": "FlexUtil::::determineHypotheticalCrossSizeForFlexItem(com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo,boolean,float)",
      "547": "FlexUtil::::determineHypotheticalCrossSizeForFlexItem(com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo,boolean,float)",
      "548": "FlexUtil::::determineHypotheticalCrossSizeForFlexItem(com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo,boolean,float)",
      "550": "FlexUtil::::calculateColumnDirectionCrossSizes(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>>)",
      "551": "FlexUtil::::calculateColumnDirectionCrossSizes(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>>)",
      "552": "FlexUtil::::calculateColumnDirectionCrossSizes(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>>)",
      "553": "FlexUtil::::calculateColumnDirectionCrossSizes(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>>)",
      "554": "FlexUtil::::calculateColumnDirectionCrossSizes(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>>)",
      "555": "FlexUtil::::calculateColumnDirectionCrossSizes(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>>)",
      "556": "FlexUtil::::calculateColumnDirectionCrossSizes(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>>)",
      "557": "FlexUtil::::calculateColumnDirectionCrossSizes(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>>)",
      "558": "FlexUtil::::calculateColumnDirectionCrossSizes(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>>)",
      "559": "FlexUtil::::calculateColumnDirectionCrossSizes(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>>)",
      "560": "FlexUtil::::calculateColumnDirectionCrossSizes(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>>)",
      "561": "FlexUtil::::calculateColumnDirectionCrossSizes(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>>)",
      "562": "FlexUtil::::calculateColumnDirectionCrossSizes(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>>)",
      "563": "FlexUtil::::calculateColumnDirectionCrossSizes(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>>)",
      "564": "FlexUtil::::calculateColumnDirectionCrossSizes(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>>)",
      "566": "FlexUtil::::calculateCrossSizeOfEachFlexLine(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.lang.Float,java.lang.Float,java.lang.Float)",
      "567": "FlexUtil::::calculateCrossSizeOfEachFlexLine(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.lang.Float,java.lang.Float,java.lang.Float)",
      "568": "FlexUtil::::calculateCrossSizeOfEachFlexLine(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.lang.Float,java.lang.Float,java.lang.Float)",
      "569": "FlexUtil::::calculateCrossSizeOfEachFlexLine(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.lang.Float,java.lang.Float,java.lang.Float)",
      "570": "FlexUtil::::calculateCrossSizeOfEachFlexLine(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.lang.Float,java.lang.Float,java.lang.Float)",
      "571": "FlexUtil::::calculateCrossSizeOfEachFlexLine(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.lang.Float,java.lang.Float,java.lang.Float)",
      "572": "FlexUtil::::calculateCrossSizeOfEachFlexLine(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.lang.Float,java.lang.Float,java.lang.Float)",
      "573": "FlexUtil::::calculateCrossSizeOfEachFlexLine(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.lang.Float,java.lang.Float,java.lang.Float)",
      "574": "FlexUtil::::calculateCrossSizeOfEachFlexLine(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.lang.Float,java.lang.Float,java.lang.Float)",
      "575": "FlexUtil::::calculateCrossSizeOfEachFlexLine(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.lang.Float,java.lang.Float,java.lang.Float)",
      "576": "FlexUtil::::calculateCrossSizeOfEachFlexLine(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.lang.Float,java.lang.Float,java.lang.Float)",
      "577": "FlexUtil::::calculateCrossSizeOfEachFlexLine(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.lang.Float,java.lang.Float,java.lang.Float)",
      "578": "FlexUtil::::calculateCrossSizeOfEachFlexLine(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.lang.Float,java.lang.Float,java.lang.Float)",
      "579": "FlexUtil::::calculateCrossSizeOfEachFlexLine(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.lang.Float,java.lang.Float,java.lang.Float)",
      "580": "FlexUtil::::calculateCrossSizeOfEachFlexLine(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.lang.Float,java.lang.Float,java.lang.Float)",
      "581": "FlexUtil::::calculateCrossSizeOfEachFlexLine(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.lang.Float,java.lang.Float,java.lang.Float)",
      "582": "FlexUtil::::calculateCrossSizeOfEachFlexLine(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.lang.Float,java.lang.Float,java.lang.Float)",
      "583": "FlexUtil::::calculateCrossSizeOfEachFlexLine(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.lang.Float,java.lang.Float,java.lang.Float)",
      "584": "FlexUtil::::calculateCrossSizeOfEachFlexLine(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.lang.Float,java.lang.Float,java.lang.Float)",
      "585": "FlexUtil::::calculateCrossSizeOfEachFlexLine(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.lang.Float,java.lang.Float,java.lang.Float)",
      "586": "FlexUtil::::calculateCrossSizeOfEachFlexLine(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.lang.Float,java.lang.Float,java.lang.Float)",
      "587": "FlexUtil::::calculateCrossSizeOfEachFlexLine(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.lang.Float,java.lang.Float,java.lang.Float)",
      "588": "FlexUtil::::calculateCrossSizeOfEachFlexLine(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.lang.Float,java.lang.Float,java.lang.Float)",
      "589": "FlexUtil::::calculateCrossSizeOfEachFlexLine(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.lang.Float,java.lang.Float,java.lang.Float)",
      "590": "FlexUtil::::calculateCrossSizeOfEachFlexLine(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.lang.Float,java.lang.Float,java.lang.Float)",
      "591": "FlexUtil::::calculateCrossSizeOfEachFlexLine(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.lang.Float,java.lang.Float,java.lang.Float)",
      "592": "FlexUtil::::calculateCrossSizeOfEachFlexLine(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.lang.Float,java.lang.Float,java.lang.Float)",
      "593": "FlexUtil::::calculateCrossSizeOfEachFlexLine(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.lang.Float,java.lang.Float,java.lang.Float)",
      "594": "FlexUtil::::calculateCrossSizeOfEachFlexLine(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.lang.Float,java.lang.Float,java.lang.Float)",
      "595": "FlexUtil::::calculateCrossSizeOfEachFlexLine(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.lang.Float,java.lang.Float,java.lang.Float)",
      "596": "FlexUtil::::calculateCrossSizeOfEachFlexLine(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.lang.Float,java.lang.Float,java.lang.Float)",
      "597": "FlexUtil::::calculateCrossSizeOfEachFlexLine(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.lang.Float,java.lang.Float,java.lang.Float)",
      "598": "FlexUtil::::calculateCrossSizeOfEachFlexLine(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.lang.Float,java.lang.Float,java.lang.Float)",
      "599": "FlexUtil::::calculateCrossSizeOfEachFlexLine(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.lang.Float,java.lang.Float,java.lang.Float)",
      "600": "FlexUtil::::calculateCrossSizeOfEachFlexLine(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.lang.Float,java.lang.Float,java.lang.Float)",
      "601": "FlexUtil::::calculateCrossSizeOfEachFlexLine(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.lang.Float,java.lang.Float,java.lang.Float)",
      "602": "FlexUtil::::calculateCrossSizeOfEachFlexLine(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.lang.Float,java.lang.Float,java.lang.Float)",
      "603": "FlexUtil::::calculateCrossSizeOfEachFlexLine(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.lang.Float,java.lang.Float,java.lang.Float)",
      "604": "FlexUtil::::calculateCrossSizeOfEachFlexLine(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.lang.Float,java.lang.Float,java.lang.Float)",
      "605": "FlexUtil::::calculateCrossSizeOfEachFlexLine(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.lang.Float,java.lang.Float,java.lang.Float)",
      "606": "FlexUtil::::calculateCrossSizeOfEachFlexLine(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.lang.Float,java.lang.Float,java.lang.Float)",
      "607": "FlexUtil::::calculateCrossSizeOfEachFlexLine(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.lang.Float,java.lang.Float,java.lang.Float)",
      "608": "FlexUtil::::calculateCrossSizeOfEachFlexLine(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.lang.Float,java.lang.Float,java.lang.Float)",
      "644": "FlexUtil::::determineUsedCrossSizeOfEachFlexItem(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.util.List<java.lang.Float>,com.itextpdf.layout.renderer.FlexContainerRenderer)",
      "645": "FlexUtil::::determineUsedCrossSizeOfEachFlexItem(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.util.List<java.lang.Float>,com.itextpdf.layout.renderer.FlexContainerRenderer)",
      "646": "FlexUtil::::determineUsedCrossSizeOfEachFlexItem(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.util.List<java.lang.Float>,com.itextpdf.layout.renderer.FlexContainerRenderer)",
      "647": "FlexUtil::::determineUsedCrossSizeOfEachFlexItem(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.util.List<java.lang.Float>,com.itextpdf.layout.renderer.FlexContainerRenderer)",
      "648": "FlexUtil::::determineUsedCrossSizeOfEachFlexItem(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.util.List<java.lang.Float>,com.itextpdf.layout.renderer.FlexContainerRenderer)",
      "649": "FlexUtil::::determineUsedCrossSizeOfEachFlexItem(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.util.List<java.lang.Float>,com.itextpdf.layout.renderer.FlexContainerRenderer)",
      "650": "FlexUtil::::determineUsedCrossSizeOfEachFlexItem(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.util.List<java.lang.Float>,com.itextpdf.layout.renderer.FlexContainerRenderer)",
      "651": "FlexUtil::::determineUsedCrossSizeOfEachFlexItem(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.util.List<java.lang.Float>,com.itextpdf.layout.renderer.FlexContainerRenderer)",
      "652": "FlexUtil::::determineUsedCrossSizeOfEachFlexItem(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.util.List<java.lang.Float>,com.itextpdf.layout.renderer.FlexContainerRenderer)",
      "653": "FlexUtil::::determineUsedCrossSizeOfEachFlexItem(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.util.List<java.lang.Float>,com.itextpdf.layout.renderer.FlexContainerRenderer)",
      "654": "FlexUtil::::determineUsedCrossSizeOfEachFlexItem(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.util.List<java.lang.Float>,com.itextpdf.layout.renderer.FlexContainerRenderer)",
      "655": "FlexUtil::::determineUsedCrossSizeOfEachFlexItem(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.util.List<java.lang.Float>,com.itextpdf.layout.renderer.FlexContainerRenderer)",
      "656": "FlexUtil::::determineUsedCrossSizeOfEachFlexItem(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.util.List<java.lang.Float>,com.itextpdf.layout.renderer.FlexContainerRenderer)",
      "657": "FlexUtil::::determineUsedCrossSizeOfEachFlexItem(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.util.List<java.lang.Float>,com.itextpdf.layout.renderer.FlexContainerRenderer)",
      "658": "FlexUtil::::determineUsedCrossSizeOfEachFlexItem(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.util.List<java.lang.Float>,com.itextpdf.layout.renderer.FlexContainerRenderer)",
      "659": "FlexUtil::::determineUsedCrossSizeOfEachFlexItem(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.util.List<java.lang.Float>,com.itextpdf.layout.renderer.FlexContainerRenderer)",
      "660": "FlexUtil::::determineUsedCrossSizeOfEachFlexItem(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.util.List<java.lang.Float>,com.itextpdf.layout.renderer.FlexContainerRenderer)",
      "661": "FlexUtil::::determineUsedCrossSizeOfEachFlexItem(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.util.List<java.lang.Float>,com.itextpdf.layout.renderer.FlexContainerRenderer)",
      "662": "FlexUtil::::determineUsedCrossSizeOfEachFlexItem(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.util.List<java.lang.Float>,com.itextpdf.layout.renderer.FlexContainerRenderer)",
      "663": "FlexUtil::::determineUsedCrossSizeOfEachFlexItem(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.util.List<java.lang.Float>,com.itextpdf.layout.renderer.FlexContainerRenderer)",
      "664": "FlexUtil::::determineUsedCrossSizeOfEachFlexItem(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.util.List<java.lang.Float>,com.itextpdf.layout.renderer.FlexContainerRenderer)",
      "665": "FlexUtil::::determineUsedCrossSizeOfEachFlexItem(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.util.List<java.lang.Float>,com.itextpdf.layout.renderer.FlexContainerRenderer)",
      "666": "FlexUtil::::determineUsedCrossSizeOfEachFlexItem(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.util.List<java.lang.Float>,com.itextpdf.layout.renderer.FlexContainerRenderer)",
      "667": "FlexUtil::::determineUsedCrossSizeOfEachFlexItem(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.util.List<java.lang.Float>,com.itextpdf.layout.renderer.FlexContainerRenderer)",
      "668": "FlexUtil::::determineUsedCrossSizeOfEachFlexItem(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.util.List<java.lang.Float>,com.itextpdf.layout.renderer.FlexContainerRenderer)",
      "669": "FlexUtil::::determineUsedCrossSizeOfEachFlexItem(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.util.List<java.lang.Float>,com.itextpdf.layout.renderer.FlexContainerRenderer)",
      "670": "FlexUtil::::determineUsedCrossSizeOfEachFlexItem(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.util.List<java.lang.Float>,com.itextpdf.layout.renderer.FlexContainerRenderer)",
      "671": "FlexUtil::::determineUsedCrossSizeOfEachFlexItem(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.util.List<java.lang.Float>,com.itextpdf.layout.renderer.FlexContainerRenderer)",
      "672": "FlexUtil::::determineUsedCrossSizeOfEachFlexItem(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.util.List<java.lang.Float>,com.itextpdf.layout.renderer.FlexContainerRenderer)",
      "673": "FlexUtil::::determineUsedCrossSizeOfEachFlexItem(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.util.List<java.lang.Float>,com.itextpdf.layout.renderer.FlexContainerRenderer)",
      "674": "FlexUtil::::determineUsedCrossSizeOfEachFlexItem(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.util.List<java.lang.Float>,com.itextpdf.layout.renderer.FlexContainerRenderer)",
      "675": "FlexUtil::::determineUsedCrossSizeOfEachFlexItem(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.util.List<java.lang.Float>,com.itextpdf.layout.renderer.FlexContainerRenderer)",
      "676": "FlexUtil::::determineUsedCrossSizeOfEachFlexItem(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.util.List<java.lang.Float>,com.itextpdf.layout.renderer.FlexContainerRenderer)",
      "677": "FlexUtil::::determineUsedCrossSizeOfEachFlexItem(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.util.List<java.lang.Float>,com.itextpdf.layout.renderer.FlexContainerRenderer)",
      "678": "FlexUtil::::determineUsedCrossSizeOfEachFlexItem(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.util.List<java.lang.Float>,com.itextpdf.layout.renderer.FlexContainerRenderer)",
      "679": "FlexUtil::::determineUsedCrossSizeOfEachFlexItem(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.util.List<java.lang.Float>,com.itextpdf.layout.renderer.FlexContainerRenderer)",
      "680": "FlexUtil::::determineUsedCrossSizeOfEachFlexItem(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.util.List<java.lang.Float>,com.itextpdf.layout.renderer.FlexContainerRenderer)",
      "681": "FlexUtil::::determineUsedCrossSizeOfEachFlexItem(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.util.List<java.lang.Float>,com.itextpdf.layout.renderer.FlexContainerRenderer)",
      "682": "FlexUtil::::determineUsedCrossSizeOfEachFlexItem(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.util.List<java.lang.Float>,com.itextpdf.layout.renderer.FlexContainerRenderer)",
      "683": "FlexUtil::::determineUsedCrossSizeOfEachFlexItem(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.util.List<java.lang.Float>,com.itextpdf.layout.renderer.FlexContainerRenderer)",
      "684": "FlexUtil::::determineUsedCrossSizeOfEachFlexItem(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.util.List<java.lang.Float>,com.itextpdf.layout.renderer.FlexContainerRenderer)",
      "685": "FlexUtil::::determineUsedCrossSizeOfEachFlexItem(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.util.List<java.lang.Float>,com.itextpdf.layout.renderer.FlexContainerRenderer)",
      "686": "FlexUtil::::determineUsedCrossSizeOfEachFlexItem(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.util.List<java.lang.Float>,com.itextpdf.layout.renderer.FlexContainerRenderer)",
      "687": "FlexUtil::::determineUsedCrossSizeOfEachFlexItem(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.util.List<java.lang.Float>,com.itextpdf.layout.renderer.FlexContainerRenderer)",
      "688": "FlexUtil::::determineUsedCrossSizeOfEachFlexItem(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,java.util.List<java.lang.Float>,com.itextpdf.layout.renderer.FlexContainerRenderer)",
      "690": "FlexUtil::::retrieveMaxHeightForMainDirection(com.itextpdf.layout.renderer.AbstractRenderer)",
      "691": "FlexUtil::::retrieveMaxHeightForMainDirection(com.itextpdf.layout.renderer.AbstractRenderer)",
      "692": "FlexUtil::::retrieveMaxHeightForMainDirection(com.itextpdf.layout.renderer.AbstractRenderer)",
      "693": "FlexUtil::::retrieveMaxHeightForMainDirection(com.itextpdf.layout.renderer.AbstractRenderer)",
      "695": "FlexUtil::::retrieveMinHeightForMainDirection(com.itextpdf.layout.renderer.AbstractRenderer)",
      "696": "FlexUtil::::retrieveMinHeightForMainDirection(com.itextpdf.layout.renderer.AbstractRenderer)",
      "697": "FlexUtil::::retrieveMinHeightForMainDirection(com.itextpdf.layout.renderer.AbstractRenderer)",
      "698": "FlexUtil::::retrieveMinHeightForMainDirection(com.itextpdf.layout.renderer.AbstractRenderer)",
      "699": "FlexUtil::::retrieveMinHeightForMainDirection(com.itextpdf.layout.renderer.AbstractRenderer)",
      "701": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "702": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "703": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "704": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "705": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "706": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "707": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "708": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "709": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "710": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "711": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "712": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "713": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "714": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "715": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "716": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "717": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "718": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "719": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "720": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "721": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "722": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "723": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "724": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "725": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "726": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "727": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "728": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "729": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "730": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "731": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "732": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "733": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "734": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "735": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "736": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "737": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "738": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "739": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "740": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "741": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "742": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "743": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "744": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "745": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "746": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "747": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "748": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "749": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "750": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "751": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "752": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "753": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "754": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "755": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "756": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "757": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "758": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "759": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "760": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "761": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "762": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "763": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "764": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "765": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "766": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "767": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "768": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "769": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "770": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "771": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "772": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "773": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "774": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "775": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "776": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "777": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "778": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "779": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "780": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "781": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "782": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "783": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "784": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "785": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "786": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "787": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "788": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "789": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "790": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "791": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "792": "FlexUtil::::applyAlignItemsAndAlignSelf(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,java.util.List<java.lang.Float>)",
      "794": "FlexUtil::::applyJustifyContent(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "795": "FlexUtil::::applyJustifyContent(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "796": "FlexUtil::::applyJustifyContent(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "797": "FlexUtil::::applyJustifyContent(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "798": "FlexUtil::::applyJustifyContent(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "799": "FlexUtil::::applyJustifyContent(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "800": "FlexUtil::::applyJustifyContent(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "801": "FlexUtil::::applyJustifyContent(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "802": "FlexUtil::::applyJustifyContent(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "803": "FlexUtil::::applyJustifyContent(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "804": "FlexUtil::::applyJustifyContent(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "805": "FlexUtil::::applyJustifyContent(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "806": "FlexUtil::::applyJustifyContent(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "807": "FlexUtil::::applyJustifyContent(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "808": "FlexUtil::::applyJustifyContent(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "809": "FlexUtil::::applyJustifyContent(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "810": "FlexUtil::::applyJustifyContent(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "811": "FlexUtil::::applyJustifyContent(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "812": "FlexUtil::::applyJustifyContent(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "813": "FlexUtil::::applyJustifyContent(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "814": "FlexUtil::::applyJustifyContent(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "815": "FlexUtil::::applyJustifyContent(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "816": "FlexUtil::::applyJustifyContent(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "817": "FlexUtil::::applyJustifyContent(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "818": "FlexUtil::::applyJustifyContent(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "819": "FlexUtil::::applyJustifyContent(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "820": "FlexUtil::::applyJustifyContent(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "821": "FlexUtil::::applyJustifyContent(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "822": "FlexUtil::::applyJustifyContent(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "823": "FlexUtil::::applyJustifyContent(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "824": "FlexUtil::::applyJustifyContent(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "825": "FlexUtil::::applyJustifyContent(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "826": "FlexUtil::::applyJustifyContent(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "827": "FlexUtil::::applyJustifyContent(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "828": "FlexUtil::::applyJustifyContent(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "829": "FlexUtil::::applyJustifyContent(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "830": "FlexUtil::::applyJustifyContent(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "831": "FlexUtil::::applyJustifyContent(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "832": "FlexUtil::::applyJustifyContent(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "833": "FlexUtil::::applyJustifyContent(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "834": "FlexUtil::::applyJustifyContent(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "835": "FlexUtil::::applyJustifyContent(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "836": "FlexUtil::::applyJustifyContent(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "837": "FlexUtil::::applyJustifyContent(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "838": "FlexUtil::::applyJustifyContent(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "839": "FlexUtil::::applyJustifyContent(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "840": "FlexUtil::::applyJustifyContent(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "841": "FlexUtil::::applyJustifyContent(java.util.List<java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>>,com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "843": "FlexUtil::::calculateFreeSpace(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float)",
      "844": "FlexUtil::::calculateFreeSpace(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float)",
      "845": "FlexUtil::::calculateFreeSpace(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float)",
      "846": "FlexUtil::::calculateFreeSpace(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float)",
      "847": "FlexUtil::::calculateFreeSpace(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float)",
      "848": "FlexUtil::::calculateFreeSpace(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float)",
      "849": "FlexUtil::::calculateFreeSpace(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float)",
      "850": "FlexUtil::::calculateFreeSpace(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float)",
      "851": "FlexUtil::::calculateFreeSpace(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float)",
      "852": "FlexUtil::::calculateFreeSpace(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float)",
      "853": "FlexUtil::::calculateFreeSpace(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>,float)",
      "855": "FlexUtil::::hasFlexibleItems(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>)",
      "856": "FlexUtil::::hasFlexibleItems(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>)",
      "857": "FlexUtil::::hasFlexibleItems(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>)",
      "858": "FlexUtil::::hasFlexibleItems(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>)",
      "859": "FlexUtil::::hasFlexibleItems(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>)",
      "860": "FlexUtil::::hasFlexibleItems(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>)",
      "861": "FlexUtil::::hasFlexibleItems(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>)",
      "862": "FlexUtil::::hasFlexibleItems(java.util.List<com.itextpdf.layout.renderer.FlexUtil.FlexItemCalculationInfo>)",
      "864": "FlexUtil::::isZero(float)",
      "865": "FlexUtil::::isZero(float)",
      "866": "FlexUtil::::isZero(float)",
      "868": "FlexUtil::::createFlexItemCalculationInfos(com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "869": "FlexUtil::::createFlexItemCalculationInfos(com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "870": "FlexUtil::::createFlexItemCalculationInfos(com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "871": "FlexUtil::::createFlexItemCalculationInfos(com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "872": "FlexUtil::::createFlexItemCalculationInfos(com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "873": "FlexUtil::::createFlexItemCalculationInfos(com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "874": "FlexUtil::::createFlexItemCalculationInfos(com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "875": "FlexUtil::::createFlexItemCalculationInfos(com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "876": "FlexUtil::::createFlexItemCalculationInfos(com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "877": "FlexUtil::::createFlexItemCalculationInfos(com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "878": "FlexUtil::::createFlexItemCalculationInfos(com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "879": "FlexUtil::::createFlexItemCalculationInfos(com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "880": "FlexUtil::::createFlexItemCalculationInfos(com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "881": "FlexUtil::::createFlexItemCalculationInfos(com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "882": "FlexUtil::::createFlexItemCalculationInfos(com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "883": "FlexUtil::::createFlexItemCalculationInfos(com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "884": "FlexUtil::::createFlexItemCalculationInfos(com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "885": "FlexUtil::::createFlexItemCalculationInfos(com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "886": "FlexUtil::::createFlexItemCalculationInfos(com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "887": "FlexUtil::::createFlexItemCalculationInfos(com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "888": "FlexUtil::::createFlexItemCalculationInfos(com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "889": "FlexUtil::::createFlexItemCalculationInfos(com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "890": "FlexUtil::::createFlexItemCalculationInfos(com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "891": "FlexUtil::::createFlexItemCalculationInfos(com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "892": "FlexUtil::::createFlexItemCalculationInfos(com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "893": "FlexUtil::::createFlexItemCalculationInfos(com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "894": "FlexUtil::::createFlexItemCalculationInfos(com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "895": "FlexUtil::::createFlexItemCalculationInfos(com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "896": "FlexUtil::::createFlexItemCalculationInfos(com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "897": "FlexUtil::::createFlexItemCalculationInfos(com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "898": "FlexUtil::::createFlexItemCalculationInfos(com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "899": "FlexUtil::::createFlexItemCalculationInfos(com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "900": "FlexUtil::::createFlexItemCalculationInfos(com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "901": "FlexUtil::::createFlexItemCalculationInfos(com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "902": "FlexUtil::::createFlexItemCalculationInfos(com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "903": "FlexUtil::::createFlexItemCalculationInfos(com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "904": "FlexUtil::::createFlexItemCalculationInfos(com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "905": "FlexUtil::::createFlexItemCalculationInfos(com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "906": "FlexUtil::::createFlexItemCalculationInfos(com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "907": "FlexUtil::::createFlexItemCalculationInfos(com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "908": "FlexUtil::::createFlexItemCalculationInfos(com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "909": "FlexUtil::::createFlexItemCalculationInfos(com.itextpdf.layout.renderer.FlexContainerRenderer,float,float)",
      "911": "FlexUtil::::calculateMaxMainSize(com.itextpdf.layout.renderer.AbstractRenderer,float,boolean,float)",
      "912": "FlexUtil::::calculateMaxMainSize(com.itextpdf.layout.renderer.AbstractRenderer,float,boolean,float)",
      "913": "FlexUtil::::calculateMaxMainSize(com.itextpdf.layout.renderer.AbstractRenderer,float,boolean,float)",
      "914": "FlexUtil::::calculateMaxMainSize(com.itextpdf.layout.renderer.AbstractRenderer,float,boolean,float)",
      "915": "FlexUtil::::calculateMaxMainSize(com.itextpdf.layout.renderer.AbstractRenderer,float,boolean,float)",
      "916": "FlexUtil::::calculateMaxMainSize(com.itextpdf.layout.renderer.AbstractRenderer,float,boolean,float)",
      "917": "FlexUtil::::calculateMaxMainSize(com.itextpdf.layout.renderer.AbstractRenderer,float,boolean,float)",
      "918": "FlexUtil::::calculateMaxMainSize(com.itextpdf.layout.renderer.AbstractRenderer,float,boolean,float)",
      "919": "FlexUtil::::calculateMaxMainSize(com.itextpdf.layout.renderer.AbstractRenderer,float,boolean,float)",
      "920": "FlexUtil::::calculateMaxMainSize(com.itextpdf.layout.renderer.AbstractRenderer,float,boolean,float)",
      "921": "FlexUtil::::calculateMaxMainSize(com.itextpdf.layout.renderer.AbstractRenderer,float,boolean,float)",
      "922": "FlexUtil::::calculateMaxMainSize(com.itextpdf.layout.renderer.AbstractRenderer,float,boolean,float)",
      "923": "FlexUtil::::calculateMaxMainSize(com.itextpdf.layout.renderer.AbstractRenderer,float,boolean,float)",
      "924": "FlexUtil::::calculateMaxMainSize(com.itextpdf.layout.renderer.AbstractRenderer,float,boolean,float)",
      "925": "FlexUtil::::calculateMaxMainSize(com.itextpdf.layout.renderer.AbstractRenderer,float,boolean,float)",
      "926": "FlexUtil::::calculateMaxMainSize(com.itextpdf.layout.renderer.AbstractRenderer,float,boolean,float)",
      "927": "FlexUtil::::calculateMaxMainSize(com.itextpdf.layout.renderer.AbstractRenderer,float,boolean,float)",
      "928": "FlexUtil::::calculateMaxMainSize(com.itextpdf.layout.renderer.AbstractRenderer,float,boolean,float)",
      "929": "FlexUtil::::calculateMaxMainSize(com.itextpdf.layout.renderer.AbstractRenderer,float,boolean,float)",
      "930": "FlexUtil::::calculateMaxMainSize(com.itextpdf.layout.renderer.AbstractRenderer,float,boolean,float)",
      "931": "FlexUtil::::calculateMaxMainSize(com.itextpdf.layout.renderer.AbstractRenderer,float,boolean,float)",
      "932": "FlexUtil::::calculateMaxMainSize(com.itextpdf.layout.renderer.AbstractRenderer,float,boolean,float)",
      "933": "FlexUtil::::calculateMaxMainSize(com.itextpdf.layout.renderer.AbstractRenderer,float,boolean,float)",
      "934": "FlexUtil::::calculateMaxMainSize(com.itextpdf.layout.renderer.AbstractRenderer,float,boolean,float)",
      "935": "FlexUtil::::calculateMaxMainSize(com.itextpdf.layout.renderer.AbstractRenderer,float,boolean,float)",
      "936": "FlexUtil::::calculateMaxMainSize(com.itextpdf.layout.renderer.AbstractRenderer,float,boolean,float)",
      "937": "FlexUtil::::calculateMaxMainSize(com.itextpdf.layout.renderer.AbstractRenderer,float,boolean,float)",
      "938": "FlexUtil::::calculateMaxMainSize(com.itextpdf.layout.renderer.AbstractRenderer,float,boolean,float)",
      "939": "FlexUtil::::calculateMaxMainSize(com.itextpdf.layout.renderer.AbstractRenderer,float,boolean,float)",
      "940": "FlexUtil::::calculateMaxMainSize(com.itextpdf.layout.renderer.AbstractRenderer,float,boolean,float)",
      "941": "FlexUtil::::calculateMaxMainSize(com.itextpdf.layout.renderer.AbstractRenderer,float,boolean,float)",
      "942": "FlexUtil::::calculateMaxMainSize(com.itextpdf.layout.renderer.AbstractRenderer,float,boolean,float)",
      "943": "FlexUtil::::calculateMaxMainSize(com.itextpdf.layout.renderer.AbstractRenderer,float,boolean,float)",
      "944": "FlexUtil::::calculateMaxMainSize(com.itextpdf.layout.renderer.AbstractRenderer,float,boolean,float)",
      "945": "FlexUtil::::calculateMaxMainSize(com.itextpdf.layout.renderer.AbstractRenderer,float,boolean,float)",
      "946": "FlexUtil::::calculateMaxMainSize(com.itextpdf.layout.renderer.AbstractRenderer,float,boolean,float)",
      "947": "FlexUtil::::calculateMaxMainSize(com.itextpdf.layout.renderer.AbstractRenderer,float,boolean,float)",
      "948": "FlexUtil::::calculateMaxMainSize(com.itextpdf.layout.renderer.AbstractRenderer,float,boolean,float)",
      "949": "FlexUtil::::calculateMaxMainSize(com.itextpdf.layout.renderer.AbstractRenderer,float,boolean,float)",
      "950": "FlexUtil::::calculateMaxMainSize(com.itextpdf.layout.renderer.AbstractRenderer,float,boolean,float)",
      "951": "FlexUtil::::calculateMaxMainSize(com.itextpdf.layout.renderer.AbstractRenderer,float,boolean,float)",
      "952": "FlexUtil::::calculateMaxMainSize(com.itextpdf.layout.renderer.AbstractRenderer,float,boolean,float)",
      "953": "FlexUtil::::calculateMaxMainSize(com.itextpdf.layout.renderer.AbstractRenderer,float,boolean,float)",
      "954": "FlexUtil::::calculateMaxMainSize(com.itextpdf.layout.renderer.AbstractRenderer,float,boolean,float)",
      "955": "FlexUtil::::calculateMaxMainSize(com.itextpdf.layout.renderer.AbstractRenderer,float,boolean,float)",
      "956": "FlexUtil::::calculateMaxMainSize(com.itextpdf.layout.renderer.AbstractRenderer,float,boolean,float)",
      "957": "FlexUtil::::calculateMaxMainSize(com.itextpdf.layout.renderer.AbstractRenderer,float,boolean,float)",
      "958": "FlexUtil::::calculateMaxMainSize(com.itextpdf.layout.renderer.AbstractRenderer,float,boolean,float)",
      "959": "FlexUtil::::calculateMaxMainSize(com.itextpdf.layout.renderer.AbstractRenderer,float,boolean,float)",
      "960": "FlexUtil::::calculateMaxMainSize(com.itextpdf.layout.renderer.AbstractRenderer,float,boolean,float)",
      "961": "FlexUtil::::calculateMaxMainSize(com.itextpdf.layout.renderer.AbstractRenderer,float,boolean,float)",
      "992": "FlexUtil::::calculateHeight(com.itextpdf.layout.renderer.AbstractRenderer,float)",
      "993": "FlexUtil::::calculateHeight(com.itextpdf.layout.renderer.AbstractRenderer,float)",
      "994": "FlexUtil::::calculateHeight(com.itextpdf.layout.renderer.AbstractRenderer,float)",
      "995": "FlexUtil::::calculateHeight(com.itextpdf.layout.renderer.AbstractRenderer,float)",
      "996": "FlexUtil::::calculateHeight(com.itextpdf.layout.renderer.AbstractRenderer,float)",
      "1050": "FlexUtil.FlexItemCalculationInfo::::toRectangle()",
      "1051": "FlexUtil.FlexItemCalculationInfo::::toRectangle()",
      "1052": "FlexUtil.FlexItemCalculationInfo::::toRectangle()",
      "1053": "FlexUtil.FlexItemCalculationInfo::::toRectangle()",
      "1054": "FlexUtil.FlexItemCalculationInfo::::toRectangle()",
      "1056": "FlexUtil.FlexItemCalculationInfo::::getOuterMainSize(float)",
      "1057": "FlexUtil.FlexItemCalculationInfo::::getOuterMainSize(float)",
      "1058": "FlexUtil.FlexItemCalculationInfo::::getOuterMainSize(float)",
      "1059": "FlexUtil.FlexItemCalculationInfo::::getOuterMainSize(float)",
      "1060": "FlexUtil.FlexItemCalculationInfo::::getOuterMainSize(float)",
      "1062": "FlexUtil.FlexItemCalculationInfo::::getInnerMainSize(float)",
      "1063": "FlexUtil.FlexItemCalculationInfo::::getInnerMainSize(float)",
      "1064": "FlexUtil.FlexItemCalculationInfo::::getInnerMainSize(float)",
      "1065": "FlexUtil.FlexItemCalculationInfo::::getInnerMainSize(float)",
      "1066": "FlexUtil.FlexItemCalculationInfo::::getInnerMainSize(float)",
      "1068": "FlexUtil.FlexItemCalculationInfo::::getOuterCrossSize(float)",
      "1069": "FlexUtil.FlexItemCalculationInfo::::getOuterCrossSize(float)",
      "1070": "FlexUtil.FlexItemCalculationInfo::::getOuterCrossSize(float)",
      "1071": "FlexUtil.FlexItemCalculationInfo::::getOuterCrossSize(float)",
      "1072": "FlexUtil.FlexItemCalculationInfo::::getOuterCrossSize(float)",
      "1074": "FlexUtil.FlexItemCalculationInfo::::getInnerCrossSize(float)",
      "1075": "FlexUtil.FlexItemCalculationInfo::::getInnerCrossSize(float)",
      "1076": "FlexUtil.FlexItemCalculationInfo::::getInnerCrossSize(float)",
      "1077": "FlexUtil.FlexItemCalculationInfo::::getInnerCrossSize(float)",
      "1078": "FlexUtil.FlexItemCalculationInfo::::getInnerCrossSize(float)",
      "1080": "FlexUtil.FlexItemCalculationInfo::::calculateMinContentAuto(float,float)",
      "1081": "FlexUtil.FlexItemCalculationInfo::::calculateMinContentAuto(float,float)",
      "1082": "FlexUtil.FlexItemCalculationInfo::::calculateMinContentAuto(float,float)",
      "1083": "FlexUtil.FlexItemCalculationInfo::::calculateMinContentAuto(float,float)",
      "1084": "FlexUtil.FlexItemCalculationInfo::::calculateMinContentAuto(float,float)",
      "1085": "FlexUtil.FlexItemCalculationInfo::::calculateMinContentAuto(float,float)",
      "1086": "FlexUtil.FlexItemCalculationInfo::::calculateMinContentAuto(float,float)",
      "1087": "FlexUtil.FlexItemCalculationInfo::::calculateMinContentAuto(float,float)",
      "1088": "FlexUtil.FlexItemCalculationInfo::::calculateMinContentAuto(float,float)",
      "1089": "FlexUtil.FlexItemCalculationInfo::::calculateMinContentAuto(float,float)",
      "1090": "FlexUtil.FlexItemCalculationInfo::::calculateMinContentAuto(float,float)",
      "1091": "FlexUtil.FlexItemCalculationInfo::::calculateMinContentAuto(float,float)",
      "1092": "FlexUtil.FlexItemCalculationInfo::::calculateMinContentAuto(float,float)",
      "1093": "FlexUtil.FlexItemCalculationInfo::::calculateMinContentAuto(float,float)",
      "1094": "FlexUtil.FlexItemCalculationInfo::::calculateMinContentAuto(float,float)",
      "1095": "FlexUtil.FlexItemCalculationInfo::::calculateMinContentAuto(float,float)",
      "1096": "FlexUtil.FlexItemCalculationInfo::::calculateMinContentAuto(float,float)",
      "1097": "FlexUtil.FlexItemCalculationInfo::::calculateMinContentAuto(float,float)",
      "1098": "FlexUtil.FlexItemCalculationInfo::::calculateMinContentAuto(float,float)",
      "1099": "FlexUtil.FlexItemCalculationInfo::::calculateMinContentAuto(float,float)",
      "1100": "FlexUtil.FlexItemCalculationInfo::::calculateMinContentAuto(float,float)",
      "1101": "FlexUtil.FlexItemCalculationInfo::::calculateMinContentAuto(float,float)",
      "1102": "FlexUtil.FlexItemCalculationInfo::::calculateMinContentAuto(float,float)",
      "1103": "FlexUtil.FlexItemCalculationInfo::::calculateMinContentAuto(float,float)",
      "1112": "FlexUtil.FlexItemCalculationInfo::::calculateTransferredSizeSuggestion(float)",
      "1113": "FlexUtil.FlexItemCalculationInfo::::calculateTransferredSizeSuggestion(float)",
      "1114": "FlexUtil.FlexItemCalculationInfo::::calculateTransferredSizeSuggestion(float)",
      "1115": "FlexUtil.FlexItemCalculationInfo::::calculateTransferredSizeSuggestion(float)",
      "1116": "FlexUtil.FlexItemCalculationInfo::::calculateTransferredSizeSuggestion(float)",
      "1117": "FlexUtil.FlexItemCalculationInfo::::calculateTransferredSizeSuggestion(float)",
      "1118": "FlexUtil.FlexItemCalculationInfo::::calculateTransferredSizeSuggestion(float)",
      "1119": "FlexUtil.FlexItemCalculationInfo::::calculateTransferredSizeSuggestion(float)",
      "1120": "FlexUtil.FlexItemCalculationInfo::::calculateTransferredSizeSuggestion(float)",
      "1121": "FlexUtil.FlexItemCalculationInfo::::calculateTransferredSizeSuggestion(float)",
      "1122": "FlexUtil.FlexItemCalculationInfo::::calculateTransferredSizeSuggestion(float)",
      "1123": "FlexUtil.FlexItemCalculationInfo::::calculateTransferredSizeSuggestion(float)",
      "1133": "FlexUtil.FlexItemCalculationInfo::::calculateSpecifiedSizeSuggestion(float)",
      "1134": "FlexUtil.FlexItemCalculationInfo::::calculateSpecifiedSizeSuggestion(float)",
      "1135": "FlexUtil.FlexItemCalculationInfo::::calculateSpecifiedSizeSuggestion(float)",
      "1136": "FlexUtil.FlexItemCalculationInfo::::calculateSpecifiedSizeSuggestion(float)",
      "1137": "FlexUtil.FlexItemCalculationInfo::::calculateSpecifiedSizeSuggestion(float)",
      "1138": "FlexUtil.FlexItemCalculationInfo::::calculateSpecifiedSizeSuggestion(float)",
      "1139": "FlexUtil.FlexItemCalculationInfo::::calculateSpecifiedSizeSuggestion(float)",
      "1140": "FlexUtil.FlexItemCalculationInfo::::calculateSpecifiedSizeSuggestion(float)",
      "1141": "FlexUtil.FlexItemCalculationInfo::::calculateSpecifiedSizeSuggestion(float)",
      "1142": "FlexUtil.FlexItemCalculationInfo::::calculateSpecifiedSizeSuggestion(float)",
      "1143": "FlexUtil.FlexItemCalculationInfo::::calculateSpecifiedSizeSuggestion(float)",
      "1144": "FlexUtil.FlexItemCalculationInfo::::calculateSpecifiedSizeSuggestion(float)",
      "1145": "FlexUtil.FlexItemCalculationInfo::::calculateSpecifiedSizeSuggestion(float)",
      "1146": "FlexUtil.FlexItemCalculationInfo::::calculateSpecifiedSizeSuggestion(float)",
      "1156": "FlexUtil.FlexItemCalculationInfo::::calculateContentSizeSuggestion(float,float)",
      "1157": "FlexUtil.FlexItemCalculationInfo::::calculateContentSizeSuggestion(float,float)",
      "1158": "FlexUtil.FlexItemCalculationInfo::::calculateContentSizeSuggestion(float,float)",
      "1159": "FlexUtil.FlexItemCalculationInfo::::calculateContentSizeSuggestion(float,float)",
      "1160": "FlexUtil.FlexItemCalculationInfo::::calculateContentSizeSuggestion(float,float)",
      "1161": "FlexUtil.FlexItemCalculationInfo::::calculateContentSizeSuggestion(float,float)",
      "1162": "FlexUtil.FlexItemCalculationInfo::::calculateContentSizeSuggestion(float,float)",
      "1163": "FlexUtil.FlexItemCalculationInfo::::calculateContentSizeSuggestion(float,float)",
      "1164": "FlexUtil.FlexItemCalculationInfo::::calculateContentSizeSuggestion(float,float)",
      "1165": "FlexUtil.FlexItemCalculationInfo::::calculateContentSizeSuggestion(float,float)",
      "1166": "FlexUtil.FlexItemCalculationInfo::::calculateContentSizeSuggestion(float,float)",
      "1167": "FlexUtil.FlexItemCalculationInfo::::calculateContentSizeSuggestion(float,float)",
      "1168": "FlexUtil.FlexItemCalculationInfo::::calculateContentSizeSuggestion(float,float)",
      "1169": "FlexUtil.FlexItemCalculationInfo::::calculateContentSizeSuggestion(float,float)",
      "1170": "FlexUtil.FlexItemCalculationInfo::::calculateContentSizeSuggestion(float,float)",
      "1171": "FlexUtil.FlexItemCalculationInfo::::calculateContentSizeSuggestion(float,float)",
      "1172": "FlexUtil.FlexItemCalculationInfo::::calculateContentSizeSuggestion(float,float)",
      "1173": "FlexUtil.FlexItemCalculationInfo::::calculateContentSizeSuggestion(float,float)",
      "1174": "FlexUtil.FlexItemCalculationInfo::::calculateContentSizeSuggestion(float,float)",
      "1175": "FlexUtil.FlexItemCalculationInfo::::calculateContentSizeSuggestion(float,float)",
      "1176": "FlexUtil.FlexItemCalculationInfo::::calculateContentSizeSuggestion(float,float)",
      "1177": "FlexUtil.FlexItemCalculationInfo::::calculateContentSizeSuggestion(float,float)",
      "1178": "FlexUtil.FlexItemCalculationInfo::::calculateContentSizeSuggestion(float,float)",
      "1179": "FlexUtil.FlexItemCalculationInfo::::calculateContentSizeSuggestion(float,float)",
      "1180": "FlexUtil.FlexItemCalculationInfo::::calculateContentSizeSuggestion(float,float)",
      "1181": "FlexUtil.FlexItemCalculationInfo::::calculateContentSizeSuggestion(float,float)",
      "1182": "FlexUtil.FlexItemCalculationInfo::::calculateContentSizeSuggestion(float,float)",
      "1183": "FlexUtil.FlexItemCalculationInfo::::calculateContentSizeSuggestion(float,float)",
      "1184": "FlexUtil.FlexItemCalculationInfo::::calculateContentSizeSuggestion(float,float)",
      "1186": "FlexUtil.FlexItemCalculationInfo::::clampValueByCrossSizesConvertedThroughAspectRatio(float,float)",
      "1187": "FlexUtil.FlexItemCalculationInfo::::clampValueByCrossSizesConvertedThroughAspectRatio(float,float)",
      "1188": "FlexUtil.FlexItemCalculationInfo::::clampValueByCrossSizesConvertedThroughAspectRatio(float,float)",
      "1189": "FlexUtil.FlexItemCalculationInfo::::clampValueByCrossSizesConvertedThroughAspectRatio(float,float)",
      "1190": "FlexUtil.FlexItemCalculationInfo::::clampValueByCrossSizesConvertedThroughAspectRatio(float,float)",
      "1191": "FlexUtil.FlexItemCalculationInfo::::clampValueByCrossSizesConvertedThroughAspectRatio(float,float)",
      "1192": "FlexUtil.FlexItemCalculationInfo::::clampValueByCrossSizesConvertedThroughAspectRatio(float,float)",
      "1193": "FlexUtil.FlexItemCalculationInfo::::clampValueByCrossSizesConvertedThroughAspectRatio(float,float)",
      "1194": "FlexUtil.FlexItemCalculationInfo::::clampValueByCrossSizesConvertedThroughAspectRatio(float,float)",
      "1195": "FlexUtil.FlexItemCalculationInfo::::clampValueByCrossSizesConvertedThroughAspectRatio(float,float)",
      "1196": "FlexUtil.FlexItemCalculationInfo::::clampValueByCrossSizesConvertedThroughAspectRatio(float,float)",
      "1197": "FlexUtil.FlexItemCalculationInfo::::clampValueByCrossSizesConvertedThroughAspectRatio(float,float)",
      "1198": "FlexUtil.FlexItemCalculationInfo::::clampValueByCrossSizesConvertedThroughAspectRatio(float,float)",
      "1199": "FlexUtil.FlexItemCalculationInfo::::clampValueByCrossSizesConvertedThroughAspectRatio(float,float)",
      "1200": "FlexUtil.FlexItemCalculationInfo::::clampValueByCrossSizesConvertedThroughAspectRatio(float,float)",
      "1201": "FlexUtil.FlexItemCalculationInfo::::clampValueByCrossSizesConvertedThroughAspectRatio(float,float)",
      "1202": "FlexUtil.FlexItemCalculationInfo::::clampValueByCrossSizesConvertedThroughAspectRatio(float,float)",
      "1203": "FlexUtil.FlexItemCalculationInfo::::clampValueByCrossSizesConvertedThroughAspectRatio(float,float)"
    },
    "test_reverse_method_lines_dic": {
      "93": "FlexUtilTest::::defaultTest01()",
      "94": "FlexUtilTest::::defaultTest01()",
      "95": "FlexUtilTest::::defaultTest01()",
      "96": "FlexUtilTest::::defaultTest01()",
      "97": "FlexUtilTest::::defaultTest01()",
      "98": "FlexUtilTest::::defaultTest01()",
      "99": "FlexUtilTest::::defaultTest01()",
      "100": "FlexUtilTest::::defaultTest01()",
      "101": "FlexUtilTest::::defaultTest01()",
      "102": "FlexUtilTest::::defaultTest01()",
      "103": "FlexUtilTest::::defaultTest01()",
      "104": "FlexUtilTest::::defaultTest01()",
      "105": "FlexUtilTest::::defaultTest01()",
      "106": "FlexUtilTest::::defaultTest01()",
      "107": "FlexUtilTest::::defaultTest01()",
      "108": "FlexUtilTest::::defaultTest01()",
      "109": "FlexUtilTest::::defaultTest01()",
      "111": "FlexUtilTest::::item1BasisGtWidthGrow0Shrink01Test01()",
      "112": "FlexUtilTest::::item1BasisGtWidthGrow0Shrink01Test01()",
      "113": "FlexUtilTest::::item1BasisGtWidthGrow0Shrink01Test01()",
      "114": "FlexUtilTest::::item1BasisGtWidthGrow0Shrink01Test01()",
      "115": "FlexUtilTest::::item1BasisGtWidthGrow0Shrink01Test01()",
      "116": "FlexUtilTest::::item1BasisGtWidthGrow0Shrink01Test01()",
      "117": "FlexUtilTest::::item1BasisGtWidthGrow0Shrink01Test01()",
      "118": "FlexUtilTest::::item1BasisGtWidthGrow0Shrink01Test01()",
      "119": "FlexUtilTest::::item1BasisGtWidthGrow0Shrink01Test01()",
      "120": "FlexUtilTest::::item1BasisGtWidthGrow0Shrink01Test01()",
      "121": "FlexUtilTest::::item1BasisGtWidthGrow0Shrink01Test01()",
      "122": "FlexUtilTest::::item1BasisGtWidthGrow0Shrink01Test01()",
      "123": "FlexUtilTest::::item1BasisGtWidthGrow0Shrink01Test01()",
      "124": "FlexUtilTest::::item1BasisGtWidthGrow0Shrink01Test01()",
      "125": "FlexUtilTest::::item1BasisGtWidthGrow0Shrink01Test01()",
      "126": "FlexUtilTest::::item1BasisGtWidthGrow0Shrink01Test01()",
      "127": "FlexUtilTest::::item1BasisGtWidthGrow0Shrink01Test01()",
      "128": "FlexUtilTest::::item1BasisGtWidthGrow0Shrink01Test01()",
      "129": "FlexUtilTest::::item1BasisGtWidthGrow0Shrink01Test01()",
      "130": "FlexUtilTest::::item1BasisGtWidthGrow0Shrink01Test01()",
      "131": "FlexUtilTest::::item1BasisGtWidthGrow0Shrink01Test01()",
      "132": "FlexUtilTest::::item1BasisGtWidthGrow0Shrink01Test01()",
      "133": "FlexUtilTest::::item1BasisGtWidthGrow0Shrink01Test01()",
      "134": "FlexUtilTest::::item1BasisGtWidthGrow0Shrink01Test01()",
      "135": "FlexUtilTest::::item1BasisGtWidthGrow0Shrink01Test01()",
      "136": "FlexUtilTest::::item1BasisGtWidthGrow0Shrink01Test01()",
      "137": "FlexUtilTest::::item1BasisGtWidthGrow0Shrink01Test01()",
      "138": "FlexUtilTest::::item1BasisGtWidthGrow0Shrink01Test01()",
      "139": "FlexUtilTest::::item1BasisGtWidthGrow0Shrink01Test01()",
      "140": "FlexUtilTest::::item1BasisGtWidthGrow0Shrink01Test01()",
      "141": "FlexUtilTest::::item1BasisGtWidthGrow0Shrink01Test01()",
      "142": "FlexUtilTest::::item1BasisGtWidthGrow0Shrink01Test01()",
      "143": "FlexUtilTest::::item1BasisGtWidthGrow0Shrink01Test01()",
      "145": "FlexUtilTest::::differentBasisGrow1Shrink0MarginBorderPaddingOnContainerTest01()",
      "146": "FlexUtilTest::::differentBasisGrow1Shrink0MarginBorderPaddingOnContainerTest01()",
      "147": "FlexUtilTest::::differentBasisGrow1Shrink0MarginBorderPaddingOnContainerTest01()",
      "148": "FlexUtilTest::::differentBasisGrow1Shrink0MarginBorderPaddingOnContainerTest01()",
      "149": "FlexUtilTest::::differentBasisGrow1Shrink0MarginBorderPaddingOnContainerTest01()",
      "150": "FlexUtilTest::::differentBasisGrow1Shrink0MarginBorderPaddingOnContainerTest01()",
      "151": "FlexUtilTest::::differentBasisGrow1Shrink0MarginBorderPaddingOnContainerTest01()",
      "152": "FlexUtilTest::::differentBasisGrow1Shrink0MarginBorderPaddingOnContainerTest01()",
      "153": "FlexUtilTest::::differentBasisGrow1Shrink0MarginBorderPaddingOnContainerTest01()",
      "154": "FlexUtilTest::::differentBasisGrow1Shrink0MarginBorderPaddingOnContainerTest01()",
      "155": "FlexUtilTest::::differentBasisGrow1Shrink0MarginBorderPaddingOnContainerTest01()",
      "156": "FlexUtilTest::::differentBasisGrow1Shrink0MarginBorderPaddingOnContainerTest01()",
      "157": "FlexUtilTest::::differentBasisGrow1Shrink0MarginBorderPaddingOnContainerTest01()",
      "158": "FlexUtilTest::::differentBasisGrow1Shrink0MarginBorderPaddingOnContainerTest01()",
      "159": "FlexUtilTest::::differentBasisGrow1Shrink0MarginBorderPaddingOnContainerTest01()",
      "160": "FlexUtilTest::::differentBasisGrow1Shrink0MarginBorderPaddingOnContainerTest01()",
      "161": "FlexUtilTest::::differentBasisGrow1Shrink0MarginBorderPaddingOnContainerTest01()",
      "162": "FlexUtilTest::::differentBasisGrow1Shrink0MarginBorderPaddingOnContainerTest01()",
      "163": "FlexUtilTest::::differentBasisGrow1Shrink0MarginBorderPaddingOnContainerTest01()",
      "164": "FlexUtilTest::::differentBasisGrow1Shrink0MarginBorderPaddingOnContainerTest01()",
      "165": "FlexUtilTest::::differentBasisGrow1Shrink0MarginBorderPaddingOnContainerTest01()",
      "166": "FlexUtilTest::::differentBasisGrow1Shrink0MarginBorderPaddingOnContainerTest01()",
      "167": "FlexUtilTest::::differentBasisGrow1Shrink0MarginBorderPaddingOnContainerTest01()",
      "169": "FlexUtilTest::::differentBasisGrow1Shrink0MarginBorderPaddingOnContainerNoWidthTest01()",
      "170": "FlexUtilTest::::differentBasisGrow1Shrink0MarginBorderPaddingOnContainerNoWidthTest01()",
      "171": "FlexUtilTest::::differentBasisGrow1Shrink0MarginBorderPaddingOnContainerNoWidthTest01()",
      "172": "FlexUtilTest::::differentBasisGrow1Shrink0MarginBorderPaddingOnContainerNoWidthTest01()",
      "173": "FlexUtilTest::::differentBasisGrow1Shrink0MarginBorderPaddingOnContainerNoWidthTest01()",
      "174": "FlexUtilTest::::differentBasisGrow1Shrink0MarginBorderPaddingOnContainerNoWidthTest01()",
      "175": "FlexUtilTest::::differentBasisGrow1Shrink0MarginBorderPaddingOnContainerNoWidthTest01()",
      "176": "FlexUtilTest::::differentBasisGrow1Shrink0MarginBorderPaddingOnContainerNoWidthTest01()",
      "177": "FlexUtilTest::::differentBasisGrow1Shrink0MarginBorderPaddingOnContainerNoWidthTest01()",
      "178": "FlexUtilTest::::differentBasisGrow1Shrink0MarginBorderPaddingOnContainerNoWidthTest01()",
      "179": "FlexUtilTest::::differentBasisGrow1Shrink0MarginBorderPaddingOnContainerNoWidthTest01()",
      "180": "FlexUtilTest::::differentBasisGrow1Shrink0MarginBorderPaddingOnContainerNoWidthTest01()",
      "181": "FlexUtilTest::::differentBasisGrow1Shrink0MarginBorderPaddingOnContainerNoWidthTest01()",
      "182": "FlexUtilTest::::differentBasisGrow1Shrink0MarginBorderPaddingOnContainerNoWidthTest01()",
      "183": "FlexUtilTest::::differentBasisGrow1Shrink0MarginBorderPaddingOnContainerNoWidthTest01()",
      "184": "FlexUtilTest::::differentBasisGrow1Shrink0MarginBorderPaddingOnContainerNoWidthTest01()",
      "185": "FlexUtilTest::::differentBasisGrow1Shrink0MarginBorderPaddingOnContainerNoWidthTest01()",
      "186": "FlexUtilTest::::differentBasisGrow1Shrink0MarginBorderPaddingOnContainerNoWidthTest01()",
      "187": "FlexUtilTest::::differentBasisGrow1Shrink0MarginBorderPaddingOnContainerNoWidthTest01()",
      "188": "FlexUtilTest::::differentBasisGrow1Shrink0MarginBorderPaddingOnContainerNoWidthTest01()",
      "189": "FlexUtilTest::::differentBasisGrow1Shrink0MarginBorderPaddingOnContainerNoWidthTest01()",
      "191": "FlexUtilTest::::simpleStretchTest01()",
      "192": "FlexUtilTest::::simpleStretchTest01()",
      "193": "FlexUtilTest::::simpleStretchTest01()",
      "194": "FlexUtilTest::::simpleStretchTest01()",
      "195": "FlexUtilTest::::simpleStretchTest01()",
      "196": "FlexUtilTest::::simpleStretchTest01()",
      "197": "FlexUtilTest::::simpleStretchTest01()",
      "198": "FlexUtilTest::::simpleStretchTest01()",
      "199": "FlexUtilTest::::simpleStretchTest01()",
      "200": "FlexUtilTest::::simpleStretchTest01()",
      "201": "FlexUtilTest::::simpleStretchTest01()",
      "202": "FlexUtilTest::::simpleStretchTest01()",
      "203": "FlexUtilTest::::simpleStretchTest01()",
      "204": "FlexUtilTest::::simpleStretchTest01()",
      "205": "FlexUtilTest::::simpleStretchTest01()",
      "206": "FlexUtilTest::::simpleStretchTest01()",
      "207": "FlexUtilTest::::simpleStretchTest01()",
      "208": "FlexUtilTest::::simpleStretchTest01()",
      "209": "FlexUtilTest::::simpleStretchTest01()",
      "210": "FlexUtilTest::::simpleStretchTest01()",
      "212": "FlexUtilTest::::basis100Grow0Shrink0ColumnTest()",
      "213": "FlexUtilTest::::basis100Grow0Shrink0ColumnTest()",
      "214": "FlexUtilTest::::basis100Grow0Shrink0ColumnTest()",
      "215": "FlexUtilTest::::basis100Grow0Shrink0ColumnTest()",
      "216": "FlexUtilTest::::basis100Grow0Shrink0ColumnTest()",
      "217": "FlexUtilTest::::basis100Grow0Shrink0ColumnTest()",
      "218": "FlexUtilTest::::basis100Grow0Shrink0ColumnTest()",
      "219": "FlexUtilTest::::basis100Grow0Shrink0ColumnTest()",
      "220": "FlexUtilTest::::basis100Grow0Shrink0ColumnTest()",
      "221": "FlexUtilTest::::basis100Grow0Shrink0ColumnTest()",
      "222": "FlexUtilTest::::basis100Grow0Shrink0ColumnTest()",
      "223": "FlexUtilTest::::basis100Grow0Shrink0ColumnTest()",
      "224": "FlexUtilTest::::basis100Grow0Shrink0ColumnTest()",
      "225": "FlexUtilTest::::basis100Grow0Shrink0ColumnTest()",
      "226": "FlexUtilTest::::basis100Grow0Shrink0ColumnTest()",
      "227": "FlexUtilTest::::basis100Grow0Shrink0ColumnTest()",
      "228": "FlexUtilTest::::basis100Grow0Shrink0ColumnTest()",
      "229": "FlexUtilTest::::basis100Grow0Shrink0ColumnTest()",
      "231": "FlexUtilTest::::basis100Grow1Shrink0ColumnTest()",
      "232": "FlexUtilTest::::basis100Grow1Shrink0ColumnTest()",
      "233": "FlexUtilTest::::basis100Grow1Shrink0ColumnTest()",
      "234": "FlexUtilTest::::basis100Grow1Shrink0ColumnTest()",
      "235": "FlexUtilTest::::basis100Grow1Shrink0ColumnTest()",
      "236": "FlexUtilTest::::basis100Grow1Shrink0ColumnTest()",
      "237": "FlexUtilTest::::basis100Grow1Shrink0ColumnTest()",
      "238": "FlexUtilTest::::basis100Grow1Shrink0ColumnTest()",
      "239": "FlexUtilTest::::basis100Grow1Shrink0ColumnTest()",
      "240": "FlexUtilTest::::basis100Grow1Shrink0ColumnTest()",
      "241": "FlexUtilTest::::basis100Grow1Shrink0ColumnTest()",
      "242": "FlexUtilTest::::basis100Grow1Shrink0ColumnTest()",
      "243": "FlexUtilTest::::basis100Grow1Shrink0ColumnTest()",
      "244": "FlexUtilTest::::basis100Grow1Shrink0ColumnTest()",
      "245": "FlexUtilTest::::basis100Grow1Shrink0ColumnTest()",
      "246": "FlexUtilTest::::basis100Grow1Shrink0ColumnTest()",
      "247": "FlexUtilTest::::basis100Grow1Shrink0ColumnTest()",
      "248": "FlexUtilTest::::basis100Grow1Shrink0ColumnTest()",
      "250": "FlexUtilTest::::basis100Grow01Shrink0ColumnTest()",
      "251": "FlexUtilTest::::basis100Grow01Shrink0ColumnTest()",
      "252": "FlexUtilTest::::basis100Grow01Shrink0ColumnTest()",
      "253": "FlexUtilTest::::basis100Grow01Shrink0ColumnTest()",
      "254": "FlexUtilTest::::basis100Grow01Shrink0ColumnTest()",
      "255": "FlexUtilTest::::basis100Grow01Shrink0ColumnTest()",
      "256": "FlexUtilTest::::basis100Grow01Shrink0ColumnTest()",
      "257": "FlexUtilTest::::basis100Grow01Shrink0ColumnTest()",
      "258": "FlexUtilTest::::basis100Grow01Shrink0ColumnTest()",
      "259": "FlexUtilTest::::basis100Grow01Shrink0ColumnTest()",
      "260": "FlexUtilTest::::basis100Grow01Shrink0ColumnTest()",
      "261": "FlexUtilTest::::basis100Grow01Shrink0ColumnTest()",
      "262": "FlexUtilTest::::basis100Grow01Shrink0ColumnTest()",
      "263": "FlexUtilTest::::basis100Grow01Shrink0ColumnTest()",
      "264": "FlexUtilTest::::basis100Grow01Shrink0ColumnTest()",
      "265": "FlexUtilTest::::basis100Grow01Shrink0ColumnTest()",
      "266": "FlexUtilTest::::basis100Grow01Shrink0ColumnTest()",
      "267": "FlexUtilTest::::basis100Grow01Shrink0ColumnTest()",
      "269": "FlexUtilTest::::basis200Grow0Shrink1ColumnTest()",
      "270": "FlexUtilTest::::basis200Grow0Shrink1ColumnTest()",
      "271": "FlexUtilTest::::basis200Grow0Shrink1ColumnTest()",
      "272": "FlexUtilTest::::basis200Grow0Shrink1ColumnTest()",
      "273": "FlexUtilTest::::basis200Grow0Shrink1ColumnTest()",
      "274": "FlexUtilTest::::basis200Grow0Shrink1ColumnTest()",
      "275": "FlexUtilTest::::basis200Grow0Shrink1ColumnTest()",
      "276": "FlexUtilTest::::basis200Grow0Shrink1ColumnTest()",
      "277": "FlexUtilTest::::basis200Grow0Shrink1ColumnTest()",
      "278": "FlexUtilTest::::basis200Grow0Shrink1ColumnTest()",
      "279": "FlexUtilTest::::basis200Grow0Shrink1ColumnTest()",
      "280": "FlexUtilTest::::basis200Grow0Shrink1ColumnTest()",
      "281": "FlexUtilTest::::basis200Grow0Shrink1ColumnTest()",
      "282": "FlexUtilTest::::basis200Grow0Shrink1ColumnTest()",
      "283": "FlexUtilTest::::basis200Grow0Shrink1ColumnTest()",
      "284": "FlexUtilTest::::basis200Grow0Shrink1ColumnTest()",
      "285": "FlexUtilTest::::basis200Grow0Shrink1ColumnTest()",
      "286": "FlexUtilTest::::basis200Grow0Shrink1ColumnTest()",
      "288": "FlexUtilTest::::basis100Grow0CustomShrinkContainerHeight50ColumnTest()",
      "289": "FlexUtilTest::::basis100Grow0CustomShrinkContainerHeight50ColumnTest()",
      "290": "FlexUtilTest::::basis100Grow0CustomShrinkContainerHeight50ColumnTest()",
      "291": "FlexUtilTest::::basis100Grow0CustomShrinkContainerHeight50ColumnTest()",
      "292": "FlexUtilTest::::basis100Grow0CustomShrinkContainerHeight50ColumnTest()",
      "293": "FlexUtilTest::::basis100Grow0CustomShrinkContainerHeight50ColumnTest()",
      "294": "FlexUtilTest::::basis100Grow0CustomShrinkContainerHeight50ColumnTest()",
      "295": "FlexUtilTest::::basis100Grow0CustomShrinkContainerHeight50ColumnTest()",
      "296": "FlexUtilTest::::basis100Grow0CustomShrinkContainerHeight50ColumnTest()",
      "297": "FlexUtilTest::::basis100Grow0CustomShrinkContainerHeight50ColumnTest()",
      "298": "FlexUtilTest::::basis100Grow0CustomShrinkContainerHeight50ColumnTest()",
      "299": "FlexUtilTest::::basis100Grow0CustomShrinkContainerHeight50ColumnTest()",
      "300": "FlexUtilTest::::basis100Grow0CustomShrinkContainerHeight50ColumnTest()",
      "301": "FlexUtilTest::::basis100Grow0CustomShrinkContainerHeight50ColumnTest()",
      "302": "FlexUtilTest::::basis100Grow0CustomShrinkContainerHeight50ColumnTest()",
      "303": "FlexUtilTest::::basis100Grow0CustomShrinkContainerHeight50ColumnTest()",
      "304": "FlexUtilTest::::basis100Grow0CustomShrinkContainerHeight50ColumnTest()",
      "305": "FlexUtilTest::::basis100Grow0CustomShrinkContainerHeight50ColumnTest()",
      "306": "FlexUtilTest::::basis100Grow0CustomShrinkContainerHeight50ColumnTest()",
      "307": "FlexUtilTest::::basis100Grow0CustomShrinkContainerHeight50ColumnTest()",
      "308": "FlexUtilTest::::basis100Grow0CustomShrinkContainerHeight50ColumnTest()",
      "310": "FlexUtilTest::::basis200Grow0CustomShrinkColumnTest1()",
      "311": "FlexUtilTest::::basis200Grow0CustomShrinkColumnTest1()",
      "312": "FlexUtilTest::::basis200Grow0CustomShrinkColumnTest1()",
      "313": "FlexUtilTest::::basis200Grow0CustomShrinkColumnTest1()",
      "314": "FlexUtilTest::::basis200Grow0CustomShrinkColumnTest1()",
      "315": "FlexUtilTest::::basis200Grow0CustomShrinkColumnTest1()",
      "316": "FlexUtilTest::::basis200Grow0CustomShrinkColumnTest1()",
      "317": "FlexUtilTest::::basis200Grow0CustomShrinkColumnTest1()",
      "318": "FlexUtilTest::::basis200Grow0CustomShrinkColumnTest1()",
      "319": "FlexUtilTest::::basis200Grow0CustomShrinkColumnTest1()",
      "320": "FlexUtilTest::::basis200Grow0CustomShrinkColumnTest1()",
      "321": "FlexUtilTest::::basis200Grow0CustomShrinkColumnTest1()",
      "322": "FlexUtilTest::::basis200Grow0CustomShrinkColumnTest1()",
      "323": "FlexUtilTest::::basis200Grow0CustomShrinkColumnTest1()",
      "324": "FlexUtilTest::::basis200Grow0CustomShrinkColumnTest1()",
      "325": "FlexUtilTest::::basis200Grow0CustomShrinkColumnTest1()",
      "326": "FlexUtilTest::::basis200Grow0CustomShrinkColumnTest1()",
      "327": "FlexUtilTest::::basis200Grow0CustomShrinkColumnTest1()",
      "328": "FlexUtilTest::::basis200Grow0CustomShrinkColumnTest1()",
      "329": "FlexUtilTest::::basis200Grow0CustomShrinkColumnTest1()",
      "330": "FlexUtilTest::::basis200Grow0CustomShrinkColumnTest1()",
      "332": "FlexUtilTest::::basis200Grow0Shrink01ColumnTest()",
      "333": "FlexUtilTest::::basis200Grow0Shrink01ColumnTest()",
      "334": "FlexUtilTest::::basis200Grow0Shrink01ColumnTest()",
      "335": "FlexUtilTest::::basis200Grow0Shrink01ColumnTest()",
      "336": "FlexUtilTest::::basis200Grow0Shrink01ColumnTest()",
      "337": "FlexUtilTest::::basis200Grow0Shrink01ColumnTest()",
      "338": "FlexUtilTest::::basis200Grow0Shrink01ColumnTest()",
      "339": "FlexUtilTest::::basis200Grow0Shrink01ColumnTest()",
      "340": "FlexUtilTest::::basis200Grow0Shrink01ColumnTest()",
      "341": "FlexUtilTest::::basis200Grow0Shrink01ColumnTest()",
      "342": "FlexUtilTest::::basis200Grow0Shrink01ColumnTest()",
      "343": "FlexUtilTest::::basis200Grow0Shrink01ColumnTest()",
      "344": "FlexUtilTest::::basis200Grow0Shrink01ColumnTest()",
      "345": "FlexUtilTest::::basis200Grow0Shrink01ColumnTest()",
      "346": "FlexUtilTest::::basis200Grow0Shrink01ColumnTest()",
      "347": "FlexUtilTest::::basis200Grow0Shrink01ColumnTest()",
      "348": "FlexUtilTest::::basis200Grow0Shrink01ColumnTest()",
      "349": "FlexUtilTest::::basis200Grow0Shrink01ColumnTest()",
      "351": "FlexUtilTest::::basis200Height150Grow0Shrink1ColumnTest()",
      "352": "FlexUtilTest::::basis200Height150Grow0Shrink1ColumnTest()",
      "353": "FlexUtilTest::::basis200Height150Grow0Shrink1ColumnTest()",
      "354": "FlexUtilTest::::basis200Height150Grow0Shrink1ColumnTest()",
      "355": "FlexUtilTest::::basis200Height150Grow0Shrink1ColumnTest()",
      "356": "FlexUtilTest::::basis200Height150Grow0Shrink1ColumnTest()",
      "357": "FlexUtilTest::::basis200Height150Grow0Shrink1ColumnTest()",
      "358": "FlexUtilTest::::basis200Height150Grow0Shrink1ColumnTest()",
      "359": "FlexUtilTest::::basis200Height150Grow0Shrink1ColumnTest()",
      "360": "FlexUtilTest::::basis200Height150Grow0Shrink1ColumnTest()",
      "361": "FlexUtilTest::::basis200Height150Grow0Shrink1ColumnTest()",
      "362": "FlexUtilTest::::basis200Height150Grow0Shrink1ColumnTest()",
      "363": "FlexUtilTest::::basis200Height150Grow0Shrink1ColumnTest()",
      "364": "FlexUtilTest::::basis200Height150Grow0Shrink1ColumnTest()",
      "365": "FlexUtilTest::::basis200Height150Grow0Shrink1ColumnTest()",
      "366": "FlexUtilTest::::basis200Height150Grow0Shrink1ColumnTest()",
      "367": "FlexUtilTest::::basis200Height150Grow0Shrink1ColumnTest()",
      "368": "FlexUtilTest::::basis200Height150Grow0Shrink1ColumnTest()",
      "369": "FlexUtilTest::::basis200Height150Grow0Shrink1ColumnTest()",
      "371": "FlexUtilTest::::basis100Height150Grow1Shrink0ColumnTest()",
      "372": "FlexUtilTest::::basis100Height150Grow1Shrink0ColumnTest()",
      "373": "FlexUtilTest::::basis100Height150Grow1Shrink0ColumnTest()",
      "374": "FlexUtilTest::::basis100Height150Grow1Shrink0ColumnTest()",
      "375": "FlexUtilTest::::basis100Height150Grow1Shrink0ColumnTest()",
      "376": "FlexUtilTest::::basis100Height150Grow1Shrink0ColumnTest()",
      "377": "FlexUtilTest::::basis100Height150Grow1Shrink0ColumnTest()",
      "378": "FlexUtilTest::::basis100Height150Grow1Shrink0ColumnTest()",
      "379": "FlexUtilTest::::basis100Height150Grow1Shrink0ColumnTest()",
      "380": "FlexUtilTest::::basis100Height150Grow1Shrink0ColumnTest()",
      "381": "FlexUtilTest::::basis100Height150Grow1Shrink0ColumnTest()",
      "382": "FlexUtilTest::::basis100Height150Grow1Shrink0ColumnTest()",
      "383": "FlexUtilTest::::basis100Height150Grow1Shrink0ColumnTest()",
      "384": "FlexUtilTest::::basis100Height150Grow1Shrink0ColumnTest()",
      "385": "FlexUtilTest::::basis100Height150Grow1Shrink0ColumnTest()",
      "386": "FlexUtilTest::::basis100Height150Grow1Shrink0ColumnTest()",
      "387": "FlexUtilTest::::basis100Height150Grow1Shrink0ColumnTest()",
      "388": "FlexUtilTest::::basis100Height150Grow1Shrink0ColumnTest()",
      "389": "FlexUtilTest::::basis100Height150Grow1Shrink0ColumnTest()",
      "391": "FlexUtilTest::::basis100Height50Grow1Shrink0ColumnTest()",
      "392": "FlexUtilTest::::basis100Height50Grow1Shrink0ColumnTest()",
      "393": "FlexUtilTest::::basis100Height50Grow1Shrink0ColumnTest()",
      "394": "FlexUtilTest::::basis100Height50Grow1Shrink0ColumnTest()",
      "395": "FlexUtilTest::::basis100Height50Grow1Shrink0ColumnTest()",
      "396": "FlexUtilTest::::basis100Height50Grow1Shrink0ColumnTest()",
      "397": "FlexUtilTest::::basis100Height50Grow1Shrink0ColumnTest()",
      "398": "FlexUtilTest::::basis100Height50Grow1Shrink0ColumnTest()",
      "399": "FlexUtilTest::::basis100Height50Grow1Shrink0ColumnTest()",
      "400": "FlexUtilTest::::basis100Height50Grow1Shrink0ColumnTest()",
      "401": "FlexUtilTest::::basis100Height50Grow1Shrink0ColumnTest()",
      "402": "FlexUtilTest::::basis100Height50Grow1Shrink0ColumnTest()",
      "403": "FlexUtilTest::::basis100Height50Grow1Shrink0ColumnTest()",
      "404": "FlexUtilTest::::basis100Height50Grow1Shrink0ColumnTest()",
      "405": "FlexUtilTest::::basis100Height50Grow1Shrink0ColumnTest()",
      "406": "FlexUtilTest::::basis100Height50Grow1Shrink0ColumnTest()",
      "407": "FlexUtilTest::::basis100Height50Grow1Shrink0ColumnTest()",
      "408": "FlexUtilTest::::basis100Height50Grow1Shrink0ColumnTest()",
      "409": "FlexUtilTest::::basis100Height50Grow1Shrink0ColumnTest()",
      "411": "FlexUtilTest::::basis100MaxHeight100Grow1Shrink0ColumnTest()",
      "412": "FlexUtilTest::::basis100MaxHeight100Grow1Shrink0ColumnTest()",
      "413": "FlexUtilTest::::basis100MaxHeight100Grow1Shrink0ColumnTest()",
      "414": "FlexUtilTest::::basis100MaxHeight100Grow1Shrink0ColumnTest()",
      "415": "FlexUtilTest::::basis100MaxHeight100Grow1Shrink0ColumnTest()",
      "416": "FlexUtilTest::::basis100MaxHeight100Grow1Shrink0ColumnTest()",
      "417": "FlexUtilTest::::basis100MaxHeight100Grow1Shrink0ColumnTest()",
      "418": "FlexUtilTest::::basis100MaxHeight100Grow1Shrink0ColumnTest()",
      "419": "FlexUtilTest::::basis100MaxHeight100Grow1Shrink0ColumnTest()",
      "420": "FlexUtilTest::::basis100MaxHeight100Grow1Shrink0ColumnTest()",
      "421": "FlexUtilTest::::basis100MaxHeight100Grow1Shrink0ColumnTest()",
      "422": "FlexUtilTest::::basis100MaxHeight100Grow1Shrink0ColumnTest()",
      "423": "FlexUtilTest::::basis100MaxHeight100Grow1Shrink0ColumnTest()",
      "424": "FlexUtilTest::::basis100MaxHeight100Grow1Shrink0ColumnTest()",
      "425": "FlexUtilTest::::basis100MaxHeight100Grow1Shrink0ColumnTest()",
      "426": "FlexUtilTest::::basis100MaxHeight100Grow1Shrink0ColumnTest()",
      "427": "FlexUtilTest::::basis100MaxHeight100Grow1Shrink0ColumnTest()",
      "428": "FlexUtilTest::::basis100MaxHeight100Grow1Shrink0ColumnTest()",
      "429": "FlexUtilTest::::basis100MaxHeight100Grow1Shrink0ColumnTest()",
      "431": "FlexUtilTest::::basis200MinHeight150Grow0Shrink1ColumnTest()",
      "432": "FlexUtilTest::::basis200MinHeight150Grow0Shrink1ColumnTest()",
      "433": "FlexUtilTest::::basis200MinHeight150Grow0Shrink1ColumnTest()",
      "434": "FlexUtilTest::::basis200MinHeight150Grow0Shrink1ColumnTest()",
      "435": "FlexUtilTest::::basis200MinHeight150Grow0Shrink1ColumnTest()",
      "436": "FlexUtilTest::::basis200MinHeight150Grow0Shrink1ColumnTest()",
      "437": "FlexUtilTest::::basis200MinHeight150Grow0Shrink1ColumnTest()",
      "438": "FlexUtilTest::::basis200MinHeight150Grow0Shrink1ColumnTest()",
      "439": "FlexUtilTest::::basis200MinHeight150Grow0Shrink1ColumnTest()",
      "440": "FlexUtilTest::::basis200MinHeight150Grow0Shrink1ColumnTest()",
      "441": "FlexUtilTest::::basis200MinHeight150Grow0Shrink1ColumnTest()",
      "442": "FlexUtilTest::::basis200MinHeight150Grow0Shrink1ColumnTest()",
      "443": "FlexUtilTest::::basis200MinHeight150Grow0Shrink1ColumnTest()",
      "444": "FlexUtilTest::::basis200MinHeight150Grow0Shrink1ColumnTest()",
      "445": "FlexUtilTest::::basis200MinHeight150Grow0Shrink1ColumnTest()",
      "446": "FlexUtilTest::::basis200MinHeight150Grow0Shrink1ColumnTest()",
      "447": "FlexUtilTest::::basis200MinHeight150Grow0Shrink1ColumnTest()",
      "448": "FlexUtilTest::::basis200MinHeight150Grow0Shrink1ColumnTest()",
      "449": "FlexUtilTest::::basis200MinHeight150Grow0Shrink1ColumnTest()",
      "451": "FlexUtilTest::::usualDirectionColumnWithDefiniteWidthTest()",
      "452": "FlexUtilTest::::usualDirectionColumnWithDefiniteWidthTest()",
      "453": "FlexUtilTest::::usualDirectionColumnWithDefiniteWidthTest()",
      "454": "FlexUtilTest::::usualDirectionColumnWithDefiniteWidthTest()",
      "455": "FlexUtilTest::::usualDirectionColumnWithDefiniteWidthTest()",
      "456": "FlexUtilTest::::usualDirectionColumnWithDefiniteWidthTest()",
      "457": "FlexUtilTest::::usualDirectionColumnWithDefiniteWidthTest()",
      "458": "FlexUtilTest::::usualDirectionColumnWithDefiniteWidthTest()",
      "459": "FlexUtilTest::::usualDirectionColumnWithDefiniteWidthTest()",
      "460": "FlexUtilTest::::usualDirectionColumnWithDefiniteWidthTest()",
      "461": "FlexUtilTest::::usualDirectionColumnWithDefiniteWidthTest()",
      "462": "FlexUtilTest::::usualDirectionColumnWithDefiniteWidthTest()",
      "463": "FlexUtilTest::::usualDirectionColumnWithDefiniteWidthTest()",
      "464": "FlexUtilTest::::usualDirectionColumnWithDefiniteWidthTest()",
      "465": "FlexUtilTest::::usualDirectionColumnWithDefiniteWidthTest()",
      "466": "FlexUtilTest::::usualDirectionColumnWithDefiniteWidthTest()",
      "467": "FlexUtilTest::::usualDirectionColumnWithDefiniteWidthTest()",
      "468": "FlexUtilTest::::usualDirectionColumnWithDefiniteWidthTest()",
      "469": "FlexUtilTest::::usualDirectionColumnWithDefiniteWidthTest()",
      "471": "FlexUtilTest::::usualDirectionColumnWithDefiniteMaxWidthTest()",
      "472": "FlexUtilTest::::usualDirectionColumnWithDefiniteMaxWidthTest()",
      "473": "FlexUtilTest::::usualDirectionColumnWithDefiniteMaxWidthTest()",
      "474": "FlexUtilTest::::usualDirectionColumnWithDefiniteMaxWidthTest()",
      "475": "FlexUtilTest::::usualDirectionColumnWithDefiniteMaxWidthTest()",
      "476": "FlexUtilTest::::usualDirectionColumnWithDefiniteMaxWidthTest()",
      "477": "FlexUtilTest::::usualDirectionColumnWithDefiniteMaxWidthTest()",
      "478": "FlexUtilTest::::usualDirectionColumnWithDefiniteMaxWidthTest()",
      "479": "FlexUtilTest::::usualDirectionColumnWithDefiniteMaxWidthTest()",
      "480": "FlexUtilTest::::usualDirectionColumnWithDefiniteMaxWidthTest()",
      "481": "FlexUtilTest::::usualDirectionColumnWithDefiniteMaxWidthTest()",
      "482": "FlexUtilTest::::usualDirectionColumnWithDefiniteMaxWidthTest()",
      "483": "FlexUtilTest::::usualDirectionColumnWithDefiniteMaxWidthTest()",
      "484": "FlexUtilTest::::usualDirectionColumnWithDefiniteMaxWidthTest()",
      "485": "FlexUtilTest::::usualDirectionColumnWithDefiniteMaxWidthTest()",
      "486": "FlexUtilTest::::usualDirectionColumnWithDefiniteMaxWidthTest()",
      "487": "FlexUtilTest::::usualDirectionColumnWithDefiniteMaxWidthTest()",
      "488": "FlexUtilTest::::usualDirectionColumnWithDefiniteMaxWidthTest()",
      "489": "FlexUtilTest::::usualDirectionColumnWithDefiniteMaxWidthTest()",
      "491": "FlexUtilTest::::usualDirectionColumnWithDefiniteMinWidthTest()",
      "492": "FlexUtilTest::::usualDirectionColumnWithDefiniteMinWidthTest()",
      "493": "FlexUtilTest::::usualDirectionColumnWithDefiniteMinWidthTest()",
      "494": "FlexUtilTest::::usualDirectionColumnWithDefiniteMinWidthTest()",
      "495": "FlexUtilTest::::usualDirectionColumnWithDefiniteMinWidthTest()",
      "496": "FlexUtilTest::::usualDirectionColumnWithDefiniteMinWidthTest()",
      "497": "FlexUtilTest::::usualDirectionColumnWithDefiniteMinWidthTest()",
      "498": "FlexUtilTest::::usualDirectionColumnWithDefiniteMinWidthTest()",
      "499": "FlexUtilTest::::usualDirectionColumnWithDefiniteMinWidthTest()",
      "500": "FlexUtilTest::::usualDirectionColumnWithDefiniteMinWidthTest()",
      "501": "FlexUtilTest::::usualDirectionColumnWithDefiniteMinWidthTest()",
      "502": "FlexUtilTest::::usualDirectionColumnWithDefiniteMinWidthTest()",
      "503": "FlexUtilTest::::usualDirectionColumnWithDefiniteMinWidthTest()",
      "504": "FlexUtilTest::::usualDirectionColumnWithDefiniteMinWidthTest()",
      "505": "FlexUtilTest::::usualDirectionColumnWithDefiniteMinWidthTest()",
      "506": "FlexUtilTest::::usualDirectionColumnWithDefiniteMinWidthTest()",
      "507": "FlexUtilTest::::usualDirectionColumnWithDefiniteMinWidthTest()",
      "508": "FlexUtilTest::::usualDirectionColumnWithDefiniteMinWidthTest()",
      "509": "FlexUtilTest::::usualDirectionColumnWithDefiniteMinWidthTest()",
      "511": "FlexUtilTest::::directionColumnWithoutBasisWithDefiniteHeightTest()",
      "512": "FlexUtilTest::::directionColumnWithoutBasisWithDefiniteHeightTest()",
      "513": "FlexUtilTest::::directionColumnWithoutBasisWithDefiniteHeightTest()",
      "514": "FlexUtilTest::::directionColumnWithoutBasisWithDefiniteHeightTest()",
      "515": "FlexUtilTest::::directionColumnWithoutBasisWithDefiniteHeightTest()",
      "516": "FlexUtilTest::::directionColumnWithoutBasisWithDefiniteHeightTest()",
      "517": "FlexUtilTest::::directionColumnWithoutBasisWithDefiniteHeightTest()",
      "518": "FlexUtilTest::::directionColumnWithoutBasisWithDefiniteHeightTest()",
      "519": "FlexUtilTest::::directionColumnWithoutBasisWithDefiniteHeightTest()",
      "520": "FlexUtilTest::::directionColumnWithoutBasisWithDefiniteHeightTest()",
      "521": "FlexUtilTest::::directionColumnWithoutBasisWithDefiniteHeightTest()",
      "522": "FlexUtilTest::::directionColumnWithoutBasisWithDefiniteHeightTest()",
      "523": "FlexUtilTest::::directionColumnWithoutBasisWithDefiniteHeightTest()",
      "524": "FlexUtilTest::::directionColumnWithoutBasisWithDefiniteHeightTest()",
      "525": "FlexUtilTest::::directionColumnWithoutBasisWithDefiniteHeightTest()",
      "526": "FlexUtilTest::::directionColumnWithoutBasisWithDefiniteHeightTest()",
      "527": "FlexUtilTest::::directionColumnWithoutBasisWithDefiniteHeightTest()",
      "528": "FlexUtilTest::::directionColumnWithoutBasisWithDefiniteHeightTest()",
      "529": "FlexUtilTest::::directionColumnWithoutBasisWithDefiniteHeightTest()",
      "531": "FlexUtilTest::::directionColumnWithWrapElementsToGrowTest()",
      "532": "FlexUtilTest::::directionColumnWithWrapElementsToGrowTest()",
      "533": "FlexUtilTest::::directionColumnWithWrapElementsToGrowTest()",
      "534": "FlexUtilTest::::directionColumnWithWrapElementsToGrowTest()",
      "535": "FlexUtilTest::::directionColumnWithWrapElementsToGrowTest()",
      "536": "FlexUtilTest::::directionColumnWithWrapElementsToGrowTest()",
      "537": "FlexUtilTest::::directionColumnWithWrapElementsToGrowTest()",
      "538": "FlexUtilTest::::directionColumnWithWrapElementsToGrowTest()",
      "539": "FlexUtilTest::::directionColumnWithWrapElementsToGrowTest()",
      "540": "FlexUtilTest::::directionColumnWithWrapElementsToGrowTest()",
      "541": "FlexUtilTest::::directionColumnWithWrapElementsToGrowTest()",
      "542": "FlexUtilTest::::directionColumnWithWrapElementsToGrowTest()",
      "543": "FlexUtilTest::::directionColumnWithWrapElementsToGrowTest()",
      "544": "FlexUtilTest::::directionColumnWithWrapElementsToGrowTest()",
      "545": "FlexUtilTest::::directionColumnWithWrapElementsToGrowTest()",
      "546": "FlexUtilTest::::directionColumnWithWrapElementsToGrowTest()",
      "547": "FlexUtilTest::::directionColumnWithWrapElementsToGrowTest()",
      "548": "FlexUtilTest::::directionColumnWithWrapElementsToGrowTest()",
      "549": "FlexUtilTest::::directionColumnWithWrapElementsToGrowTest()",
      "550": "FlexUtilTest::::directionColumnWithWrapElementsToGrowTest()",
      "551": "FlexUtilTest::::directionColumnWithWrapElementsToGrowTest()",
      "553": "FlexUtilTest::::directionColumnWithWrapElementsNotToGrowTest()",
      "554": "FlexUtilTest::::directionColumnWithWrapElementsNotToGrowTest()",
      "555": "FlexUtilTest::::directionColumnWithWrapElementsNotToGrowTest()",
      "556": "FlexUtilTest::::directionColumnWithWrapElementsNotToGrowTest()",
      "557": "FlexUtilTest::::directionColumnWithWrapElementsNotToGrowTest()",
      "558": "FlexUtilTest::::directionColumnWithWrapElementsNotToGrowTest()",
      "559": "FlexUtilTest::::directionColumnWithWrapElementsNotToGrowTest()",
      "560": "FlexUtilTest::::directionColumnWithWrapElementsNotToGrowTest()",
      "561": "FlexUtilTest::::directionColumnWithWrapElementsNotToGrowTest()",
      "562": "FlexUtilTest::::directionColumnWithWrapElementsNotToGrowTest()",
      "563": "FlexUtilTest::::directionColumnWithWrapElementsNotToGrowTest()",
      "564": "FlexUtilTest::::directionColumnWithWrapElementsNotToGrowTest()",
      "565": "FlexUtilTest::::directionColumnWithWrapElementsNotToGrowTest()",
      "566": "FlexUtilTest::::directionColumnWithWrapElementsNotToGrowTest()",
      "567": "FlexUtilTest::::directionColumnWithWrapElementsNotToGrowTest()",
      "568": "FlexUtilTest::::directionColumnWithWrapElementsNotToGrowTest()",
      "569": "FlexUtilTest::::directionColumnWithWrapElementsNotToGrowTest()",
      "570": "FlexUtilTest::::directionColumnWithWrapElementsNotToGrowTest()",
      "571": "FlexUtilTest::::directionColumnWithWrapElementsNotToGrowTest()",
      "572": "FlexUtilTest::::directionColumnWithWrapElementsNotToGrowTest()",
      "573": "FlexUtilTest::::directionColumnWithWrapElementsNotToGrowTest()",
      "575": "FlexUtilTest::::directionColumnWithWrapElementsToShrinkTest()",
      "576": "FlexUtilTest::::directionColumnWithWrapElementsToShrinkTest()",
      "577": "FlexUtilTest::::directionColumnWithWrapElementsToShrinkTest()",
      "578": "FlexUtilTest::::directionColumnWithWrapElementsToShrinkTest()",
      "579": "FlexUtilTest::::directionColumnWithWrapElementsToShrinkTest()",
      "580": "FlexUtilTest::::directionColumnWithWrapElementsToShrinkTest()",
      "581": "FlexUtilTest::::directionColumnWithWrapElementsToShrinkTest()",
      "582": "FlexUtilTest::::directionColumnWithWrapElementsToShrinkTest()",
      "583": "FlexUtilTest::::directionColumnWithWrapElementsToShrinkTest()",
      "584": "FlexUtilTest::::directionColumnWithWrapElementsToShrinkTest()",
      "585": "FlexUtilTest::::directionColumnWithWrapElementsToShrinkTest()",
      "586": "FlexUtilTest::::directionColumnWithWrapElementsToShrinkTest()",
      "587": "FlexUtilTest::::directionColumnWithWrapElementsToShrinkTest()",
      "588": "FlexUtilTest::::directionColumnWithWrapElementsToShrinkTest()",
      "589": "FlexUtilTest::::directionColumnWithWrapElementsToShrinkTest()",
      "590": "FlexUtilTest::::directionColumnWithWrapElementsToShrinkTest()",
      "591": "FlexUtilTest::::directionColumnWithWrapElementsToShrinkTest()",
      "592": "FlexUtilTest::::directionColumnWithWrapElementsToShrinkTest()",
      "593": "FlexUtilTest::::directionColumnWithWrapElementsToShrinkTest()",
      "594": "FlexUtilTest::::directionColumnWithWrapElementsToShrinkTest()",
      "595": "FlexUtilTest::::directionColumnWithWrapElementsToShrinkTest()",
      "597": "FlexUtilTest::::directionColumnWithWrapElementsNotToShrinkTest()",
      "598": "FlexUtilTest::::directionColumnWithWrapElementsNotToShrinkTest()",
      "599": "FlexUtilTest::::directionColumnWithWrapElementsNotToShrinkTest()",
      "600": "FlexUtilTest::::directionColumnWithWrapElementsNotToShrinkTest()",
      "601": "FlexUtilTest::::directionColumnWithWrapElementsNotToShrinkTest()",
      "602": "FlexUtilTest::::directionColumnWithWrapElementsNotToShrinkTest()",
      "603": "FlexUtilTest::::directionColumnWithWrapElementsNotToShrinkTest()",
      "604": "FlexUtilTest::::directionColumnWithWrapElementsNotToShrinkTest()",
      "605": "FlexUtilTest::::directionColumnWithWrapElementsNotToShrinkTest()",
      "606": "FlexUtilTest::::directionColumnWithWrapElementsNotToShrinkTest()",
      "607": "FlexUtilTest::::directionColumnWithWrapElementsNotToShrinkTest()",
      "608": "FlexUtilTest::::directionColumnWithWrapElementsNotToShrinkTest()",
      "609": "FlexUtilTest::::directionColumnWithWrapElementsNotToShrinkTest()",
      "610": "FlexUtilTest::::directionColumnWithWrapElementsNotToShrinkTest()",
      "611": "FlexUtilTest::::directionColumnWithWrapElementsNotToShrinkTest()",
      "612": "FlexUtilTest::::directionColumnWithWrapElementsNotToShrinkTest()",
      "613": "FlexUtilTest::::directionColumnWithWrapElementsNotToShrinkTest()",
      "614": "FlexUtilTest::::directionColumnWithWrapElementsNotToShrinkTest()",
      "615": "FlexUtilTest::::directionColumnWithWrapElementsNotToShrinkTest()",
      "616": "FlexUtilTest::::directionColumnWithWrapElementsNotToShrinkTest()",
      "617": "FlexUtilTest::::directionColumnWithWrapElementsNotToShrinkTest()",
      "619": "FlexUtilTest::::directionColumnWithWrapDefiniteWidthAndHeightTest()",
      "620": "FlexUtilTest::::directionColumnWithWrapDefiniteWidthAndHeightTest()",
      "621": "FlexUtilTest::::directionColumnWithWrapDefiniteWidthAndHeightTest()",
      "622": "FlexUtilTest::::directionColumnWithWrapDefiniteWidthAndHeightTest()",
      "623": "FlexUtilTest::::directionColumnWithWrapDefiniteWidthAndHeightTest()",
      "624": "FlexUtilTest::::directionColumnWithWrapDefiniteWidthAndHeightTest()",
      "625": "FlexUtilTest::::directionColumnWithWrapDefiniteWidthAndHeightTest()",
      "626": "FlexUtilTest::::directionColumnWithWrapDefiniteWidthAndHeightTest()",
      "627": "FlexUtilTest::::directionColumnWithWrapDefiniteWidthAndHeightTest()",
      "628": "FlexUtilTest::::directionColumnWithWrapDefiniteWidthAndHeightTest()",
      "629": "FlexUtilTest::::directionColumnWithWrapDefiniteWidthAndHeightTest()",
      "630": "FlexUtilTest::::directionColumnWithWrapDefiniteWidthAndHeightTest()",
      "631": "FlexUtilTest::::directionColumnWithWrapDefiniteWidthAndHeightTest()",
      "632": "FlexUtilTest::::directionColumnWithWrapDefiniteWidthAndHeightTest()",
      "633": "FlexUtilTest::::directionColumnWithWrapDefiniteWidthAndHeightTest()",
      "634": "FlexUtilTest::::directionColumnWithWrapDefiniteWidthAndHeightTest()",
      "635": "FlexUtilTest::::directionColumnWithWrapDefiniteWidthAndHeightTest()",
      "636": "FlexUtilTest::::directionColumnWithWrapDefiniteWidthAndHeightTest()",
      "637": "FlexUtilTest::::directionColumnWithWrapDefiniteWidthAndHeightTest()",
      "638": "FlexUtilTest::::directionColumnWithWrapDefiniteWidthAndHeightTest()",
      "639": "FlexUtilTest::::directionColumnWithWrapDefiniteWidthAndHeightTest()",
      "640": "FlexUtilTest::::directionColumnWithWrapDefiniteWidthAndHeightTest()",
      "642": "FlexUtilTest::::directionColumnWithWrapWithAlignItemsAndJustifyContentTest()",
      "643": "FlexUtilTest::::directionColumnWithWrapWithAlignItemsAndJustifyContentTest()",
      "644": "FlexUtilTest::::directionColumnWithWrapWithAlignItemsAndJustifyContentTest()",
      "645": "FlexUtilTest::::directionColumnWithWrapWithAlignItemsAndJustifyContentTest()",
      "646": "FlexUtilTest::::directionColumnWithWrapWithAlignItemsAndJustifyContentTest()",
      "647": "FlexUtilTest::::directionColumnWithWrapWithAlignItemsAndJustifyContentTest()",
      "648": "FlexUtilTest::::directionColumnWithWrapWithAlignItemsAndJustifyContentTest()",
      "649": "FlexUtilTest::::directionColumnWithWrapWithAlignItemsAndJustifyContentTest()",
      "650": "FlexUtilTest::::directionColumnWithWrapWithAlignItemsAndJustifyContentTest()",
      "651": "FlexUtilTest::::directionColumnWithWrapWithAlignItemsAndJustifyContentTest()",
      "652": "FlexUtilTest::::directionColumnWithWrapWithAlignItemsAndJustifyContentTest()",
      "653": "FlexUtilTest::::directionColumnWithWrapWithAlignItemsAndJustifyContentTest()",
      "654": "FlexUtilTest::::directionColumnWithWrapWithAlignItemsAndJustifyContentTest()",
      "655": "FlexUtilTest::::directionColumnWithWrapWithAlignItemsAndJustifyContentTest()",
      "656": "FlexUtilTest::::directionColumnWithWrapWithAlignItemsAndJustifyContentTest()",
      "657": "FlexUtilTest::::directionColumnWithWrapWithAlignItemsAndJustifyContentTest()",
      "658": "FlexUtilTest::::directionColumnWithWrapWithAlignItemsAndJustifyContentTest()",
      "659": "FlexUtilTest::::directionColumnWithWrapWithAlignItemsAndJustifyContentTest()",
      "660": "FlexUtilTest::::directionColumnWithWrapWithAlignItemsAndJustifyContentTest()",
      "661": "FlexUtilTest::::directionColumnWithWrapWithAlignItemsAndJustifyContentTest()",
      "662": "FlexUtilTest::::directionColumnWithWrapWithAlignItemsAndJustifyContentTest()",
      "663": "FlexUtilTest::::directionColumnWithWrapWithAlignItemsAndJustifyContentTest()",
      "664": "FlexUtilTest::::directionColumnWithWrapWithAlignItemsAndJustifyContentTest()",
      "665": "FlexUtilTest::::directionColumnWithWrapWithAlignItemsAndJustifyContentTest()",
      "666": "FlexUtilTest::::directionColumnWithWrapWithAlignItemsAndJustifyContentTest()",
      "667": "FlexUtilTest::::directionColumnWithWrapWithAlignItemsAndJustifyContentTest()",
      "669": "FlexUtilTest::::directionColumnWithAlignItemsAndJustifyContentTest1()",
      "670": "FlexUtilTest::::directionColumnWithAlignItemsAndJustifyContentTest1()",
      "671": "FlexUtilTest::::directionColumnWithAlignItemsAndJustifyContentTest1()",
      "672": "FlexUtilTest::::directionColumnWithAlignItemsAndJustifyContentTest1()",
      "673": "FlexUtilTest::::directionColumnWithAlignItemsAndJustifyContentTest1()",
      "674": "FlexUtilTest::::directionColumnWithAlignItemsAndJustifyContentTest1()",
      "675": "FlexUtilTest::::directionColumnWithAlignItemsAndJustifyContentTest1()",
      "676": "FlexUtilTest::::directionColumnWithAlignItemsAndJustifyContentTest1()",
      "677": "FlexUtilTest::::directionColumnWithAlignItemsAndJustifyContentTest1()",
      "678": "FlexUtilTest::::directionColumnWithAlignItemsAndJustifyContentTest1()",
      "679": "FlexUtilTest::::directionColumnWithAlignItemsAndJustifyContentTest1()",
      "680": "FlexUtilTest::::directionColumnWithAlignItemsAndJustifyContentTest1()",
      "681": "FlexUtilTest::::directionColumnWithAlignItemsAndJustifyContentTest1()",
      "682": "FlexUtilTest::::directionColumnWithAlignItemsAndJustifyContentTest1()",
      "683": "FlexUtilTest::::directionColumnWithAlignItemsAndJustifyContentTest1()",
      "684": "FlexUtilTest::::directionColumnWithAlignItemsAndJustifyContentTest1()",
      "685": "FlexUtilTest::::directionColumnWithAlignItemsAndJustifyContentTest1()",
      "686": "FlexUtilTest::::directionColumnWithAlignItemsAndJustifyContentTest1()",
      "687": "FlexUtilTest::::directionColumnWithAlignItemsAndJustifyContentTest1()",
      "688": "FlexUtilTest::::directionColumnWithAlignItemsAndJustifyContentTest1()",
      "689": "FlexUtilTest::::directionColumnWithAlignItemsAndJustifyContentTest1()",
      "690": "FlexUtilTest::::directionColumnWithAlignItemsAndJustifyContentTest1()",
      "691": "FlexUtilTest::::directionColumnWithAlignItemsAndJustifyContentTest1()",
      "693": "FlexUtilTest::::directionColumnWithAlignItemsAndJustifyContentTest2()",
      "694": "FlexUtilTest::::directionColumnWithAlignItemsAndJustifyContentTest2()",
      "695": "FlexUtilTest::::directionColumnWithAlignItemsAndJustifyContentTest2()",
      "696": "FlexUtilTest::::directionColumnWithAlignItemsAndJustifyContentTest2()",
      "697": "FlexUtilTest::::directionColumnWithAlignItemsAndJustifyContentTest2()",
      "698": "FlexUtilTest::::directionColumnWithAlignItemsAndJustifyContentTest2()",
      "699": "FlexUtilTest::::directionColumnWithAlignItemsAndJustifyContentTest2()",
      "700": "FlexUtilTest::::directionColumnWithAlignItemsAndJustifyContentTest2()",
      "701": "FlexUtilTest::::directionColumnWithAlignItemsAndJustifyContentTest2()",
      "702": "FlexUtilTest::::directionColumnWithAlignItemsAndJustifyContentTest2()",
      "703": "FlexUtilTest::::directionColumnWithAlignItemsAndJustifyContentTest2()",
      "704": "FlexUtilTest::::directionColumnWithAlignItemsAndJustifyContentTest2()",
      "705": "FlexUtilTest::::directionColumnWithAlignItemsAndJustifyContentTest2()",
      "706": "FlexUtilTest::::directionColumnWithAlignItemsAndJustifyContentTest2()",
      "707": "FlexUtilTest::::directionColumnWithAlignItemsAndJustifyContentTest2()",
      "708": "FlexUtilTest::::directionColumnWithAlignItemsAndJustifyContentTest2()",
      "709": "FlexUtilTest::::directionColumnWithAlignItemsAndJustifyContentTest2()",
      "710": "FlexUtilTest::::directionColumnWithAlignItemsAndJustifyContentTest2()",
      "711": "FlexUtilTest::::directionColumnWithAlignItemsAndJustifyContentTest2()",
      "712": "FlexUtilTest::::directionColumnWithAlignItemsAndJustifyContentTest2()",
      "713": "FlexUtilTest::::directionColumnWithAlignItemsAndJustifyContentTest2()",
      "714": "FlexUtilTest::::directionColumnWithAlignItemsAndJustifyContentTest2()",
      "715": "FlexUtilTest::::directionColumnWithAlignItemsAndJustifyContentTest2()",
      "717": "FlexUtilTest::::directionColumnWithAlignItemsAndJustifyContentTest3()",
      "718": "FlexUtilTest::::directionColumnWithAlignItemsAndJustifyContentTest3()",
      "719": "FlexUtilTest::::directionColumnWithAlignItemsAndJustifyContentTest3()",
      "720": "FlexUtilTest::::directionColumnWithAlignItemsAndJustifyContentTest3()",
      "721": "FlexUtilTest::::directionColumnWithAlignItemsAndJustifyContentTest3()",
      "722": "FlexUtilTest::::directionColumnWithAlignItemsAndJustifyContentTest3()",
      "723": "FlexUtilTest::::directionColumnWithAlignItemsAndJustifyContentTest3()",
      "724": "FlexUtilTest::::directionColumnWithAlignItemsAndJustifyContentTest3()",
      "725": "FlexUtilTest::::directionColumnWithAlignItemsAndJustifyContentTest3()",
      "726": "FlexUtilTest::::directionColumnWithAlignItemsAndJustifyContentTest3()",
      "727": "FlexUtilTest::::directionColumnWithAlignItemsAndJustifyContentTest3()",
      "728": "FlexUtilTest::::directionColumnWithAlignItemsAndJustifyContentTest3()",
      "729": "FlexUtilTest::::directionColumnWithAlignItemsAndJustifyContentTest3()",
      "730": "FlexUtilTest::::directionColumnWithAlignItemsAndJustifyContentTest3()",
      "731": "FlexUtilTest::::directionColumnWithAlignItemsAndJustifyContentTest3()",
      "732": "FlexUtilTest::::directionColumnWithAlignItemsAndJustifyContentTest3()",
      "733": "FlexUtilTest::::directionColumnWithAlignItemsAndJustifyContentTest3()",
      "734": "FlexUtilTest::::directionColumnWithAlignItemsAndJustifyContentTest3()",
      "735": "FlexUtilTest::::directionColumnWithAlignItemsAndJustifyContentTest3()",
      "736": "FlexUtilTest::::directionColumnWithAlignItemsAndJustifyContentTest3()",
      "737": "FlexUtilTest::::directionColumnWithAlignItemsAndJustifyContentTest3()",
      "738": "FlexUtilTest::::directionColumnWithAlignItemsAndJustifyContentTest3()",
      "739": "FlexUtilTest::::directionColumnWithAlignItemsAndJustifyContentTest3()",
      "741": "FlexUtilTest::::imgAsFlexItemTest01()",
      "742": "FlexUtilTest::::imgAsFlexItemTest01()",
      "743": "FlexUtilTest::::imgAsFlexItemTest01()",
      "744": "FlexUtilTest::::imgAsFlexItemTest01()",
      "745": "FlexUtilTest::::imgAsFlexItemTest01()",
      "746": "FlexUtilTest::::imgAsFlexItemTest01()",
      "747": "FlexUtilTest::::imgAsFlexItemTest01()",
      "748": "FlexUtilTest::::imgAsFlexItemTest01()",
      "749": "FlexUtilTest::::imgAsFlexItemTest01()",
      "750": "FlexUtilTest::::imgAsFlexItemTest01()",
      "751": "FlexUtilTest::::imgAsFlexItemTest01()",
      "752": "FlexUtilTest::::imgAsFlexItemTest01()",
      "753": "FlexUtilTest::::imgAsFlexItemTest01()",
      "754": "FlexUtilTest::::imgAsFlexItemTest01()",
      "755": "FlexUtilTest::::imgAsFlexItemTest01()",
      "756": "FlexUtilTest::::imgAsFlexItemTest01()",
      "757": "FlexUtilTest::::imgAsFlexItemTest01()",
      "758": "FlexUtilTest::::imgAsFlexItemTest01()",
      "759": "FlexUtilTest::::imgAsFlexItemTest01()",
      "760": "FlexUtilTest::::imgAsFlexItemTest01()",
      "761": "FlexUtilTest::::imgAsFlexItemTest01()",
      "762": "FlexUtilTest::::imgAsFlexItemTest01()",
      "763": "FlexUtilTest::::imgAsFlexItemTest01()",
      "764": "FlexUtilTest::::imgAsFlexItemTest01()",
      "765": "FlexUtilTest::::imgAsFlexItemTest01()",
      "766": "FlexUtilTest::::imgAsFlexItemTest01()",
      "767": "FlexUtilTest::::imgAsFlexItemTest01()",
      "768": "FlexUtilTest::::imgAsFlexItemTest01()",
      "769": "FlexUtilTest::::imgAsFlexItemTest01()",
      "770": "FlexUtilTest::::imgAsFlexItemTest01()",
      "771": "FlexUtilTest::::imgAsFlexItemTest01()",
      "772": "FlexUtilTest::::imgAsFlexItemTest01()",
      "773": "FlexUtilTest::::imgAsFlexItemTest01()",
      "774": "FlexUtilTest::::imgAsFlexItemTest01()",
      "775": "FlexUtilTest::::imgAsFlexItemTest01()",
      "776": "FlexUtilTest::::imgAsFlexItemTest01()",
      "777": "FlexUtilTest::::imgAsFlexItemTest01()",
      "778": "FlexUtilTest::::imgAsFlexItemTest01()",
      "779": "FlexUtilTest::::imgAsFlexItemTest01()",
      "780": "FlexUtilTest::::imgAsFlexItemTest01()",
      "781": "FlexUtilTest::::imgAsFlexItemTest01()",
      "782": "FlexUtilTest::::imgAsFlexItemTest01()",
      "783": "FlexUtilTest::::imgAsFlexItemTest01()",
      "784": "FlexUtilTest::::imgAsFlexItemTest01()",
      "786": "FlexUtilTest::::basisGtWidthGrow0Shrink0Test01()",
      "787": "FlexUtilTest::::basisGtWidthGrow0Shrink0Test01()",
      "788": "FlexUtilTest::::basisGtWidthGrow0Shrink0Test01()",
      "789": "FlexUtilTest::::basisGtWidthGrow0Shrink0Test01()",
      "790": "FlexUtilTest::::basisGtWidthGrow0Shrink0Test01()",
      "791": "FlexUtilTest::::basisGtWidthGrow0Shrink0Test01()",
      "792": "FlexUtilTest::::basisGtWidthGrow0Shrink0Test01()",
      "793": "FlexUtilTest::::basisGtWidthGrow0Shrink0Test01()",
      "794": "FlexUtilTest::::basisGtWidthGrow0Shrink0Test01()",
      "795": "FlexUtilTest::::basisGtWidthGrow0Shrink0Test01()",
      "796": "FlexUtilTest::::basisGtWidthGrow0Shrink0Test01()",
      "797": "FlexUtilTest::::basisGtWidthGrow0Shrink0Test01()",
      "798": "FlexUtilTest::::basisGtWidthGrow0Shrink0Test01()",
      "799": "FlexUtilTest::::basisGtWidthGrow0Shrink0Test01()",
      "800": "FlexUtilTest::::basisGtWidthGrow0Shrink0Test01()",
      "801": "FlexUtilTest::::basisGtWidthGrow0Shrink0Test01()",
      "802": "FlexUtilTest::::basisGtWidthGrow0Shrink0Test01()",
      "803": "FlexUtilTest::::basisGtWidthGrow0Shrink0Test01()",
      "805": "FlexUtilTest::::basisGtWidthGrow0Shrink1Test01()",
      "806": "FlexUtilTest::::basisGtWidthGrow0Shrink1Test01()",
      "807": "FlexUtilTest::::basisGtWidthGrow0Shrink1Test01()",
      "808": "FlexUtilTest::::basisGtWidthGrow0Shrink1Test01()",
      "809": "FlexUtilTest::::basisGtWidthGrow0Shrink1Test01()",
      "810": "FlexUtilTest::::basisGtWidthGrow0Shrink1Test01()",
      "811": "FlexUtilTest::::basisGtWidthGrow0Shrink1Test01()",
      "812": "FlexUtilTest::::basisGtWidthGrow0Shrink1Test01()",
      "813": "FlexUtilTest::::basisGtWidthGrow0Shrink1Test01()",
      "814": "FlexUtilTest::::basisGtWidthGrow0Shrink1Test01()",
      "815": "FlexUtilTest::::basisGtWidthGrow0Shrink1Test01()",
      "816": "FlexUtilTest::::basisGtWidthGrow0Shrink1Test01()",
      "817": "FlexUtilTest::::basisGtWidthGrow0Shrink1Test01()",
      "818": "FlexUtilTest::::basisGtWidthGrow0Shrink1Test01()",
      "819": "FlexUtilTest::::basisGtWidthGrow0Shrink1Test01()",
      "820": "FlexUtilTest::::basisGtWidthGrow0Shrink1Test01()",
      "821": "FlexUtilTest::::basisGtWidthGrow0Shrink1Test01()",
      "822": "FlexUtilTest::::basisGtWidthGrow0Shrink1Test01()",
      "824": "FlexUtilTest::::basisMinGrow0Shrink1Item2Grow05Test01()",
      "825": "FlexUtilTest::::basisMinGrow0Shrink1Item2Grow05Test01()",
      "826": "FlexUtilTest::::basisMinGrow0Shrink1Item2Grow05Test01()",
      "827": "FlexUtilTest::::basisMinGrow0Shrink1Item2Grow05Test01()",
      "828": "FlexUtilTest::::basisMinGrow0Shrink1Item2Grow05Test01()",
      "829": "FlexUtilTest::::basisMinGrow0Shrink1Item2Grow05Test01()",
      "830": "FlexUtilTest::::basisMinGrow0Shrink1Item2Grow05Test01()",
      "831": "FlexUtilTest::::basisMinGrow0Shrink1Item2Grow05Test01()",
      "832": "FlexUtilTest::::basisMinGrow0Shrink1Item2Grow05Test01()",
      "833": "FlexUtilTest::::basisMinGrow0Shrink1Item2Grow05Test01()",
      "834": "FlexUtilTest::::basisMinGrow0Shrink1Item2Grow05Test01()",
      "835": "FlexUtilTest::::basisMinGrow0Shrink1Item2Grow05Test01()",
      "836": "FlexUtilTest::::basisMinGrow0Shrink1Item2Grow05Test01()",
      "837": "FlexUtilTest::::basisMinGrow0Shrink1Item2Grow05Test01()",
      "838": "FlexUtilTest::::basisMinGrow0Shrink1Item2Grow05Test01()",
      "840": "FlexUtilTest::::basisMinGrow0Shrink1Item2Grow2Test01()",
      "841": "FlexUtilTest::::basisMinGrow0Shrink1Item2Grow2Test01()",
      "842": "FlexUtilTest::::basisMinGrow0Shrink1Item2Grow2Test01()",
      "843": "FlexUtilTest::::basisMinGrow0Shrink1Item2Grow2Test01()",
      "844": "FlexUtilTest::::basisMinGrow0Shrink1Item2Grow2Test01()",
      "845": "FlexUtilTest::::basisMinGrow0Shrink1Item2Grow2Test01()",
      "846": "FlexUtilTest::::basisMinGrow0Shrink1Item2Grow2Test01()",
      "847": "FlexUtilTest::::basisMinGrow0Shrink1Item2Grow2Test01()",
      "848": "FlexUtilTest::::basisMinGrow0Shrink1Item2Grow2Test01()",
      "849": "FlexUtilTest::::basisMinGrow0Shrink1Item2Grow2Test01()",
      "850": "FlexUtilTest::::basisMinGrow0Shrink1Item2Grow2Test01()",
      "851": "FlexUtilTest::::basisMinGrow0Shrink1Item2Grow2Test01()",
      "852": "FlexUtilTest::::basisMinGrow0Shrink1Item2Grow2Test01()",
      "853": "FlexUtilTest::::basisMinGrow0Shrink1Item2Grow2Test01()",
      "854": "FlexUtilTest::::basisMinGrow0Shrink1Item2Grow2Test01()",
      "856": "FlexUtilTest::::basisMinGrow2Shrink1Test01()",
      "857": "FlexUtilTest::::basisMinGrow2Shrink1Test01()",
      "858": "FlexUtilTest::::basisMinGrow2Shrink1Test01()",
      "859": "FlexUtilTest::::basisMinGrow2Shrink1Test01()",
      "860": "FlexUtilTest::::basisMinGrow2Shrink1Test01()",
      "861": "FlexUtilTest::::basisMinGrow2Shrink1Test01()",
      "862": "FlexUtilTest::::basisMinGrow2Shrink1Test01()",
      "863": "FlexUtilTest::::basisMinGrow2Shrink1Test01()",
      "864": "FlexUtilTest::::basisMinGrow2Shrink1Test01()",
      "865": "FlexUtilTest::::basisMinGrow2Shrink1Test01()",
      "866": "FlexUtilTest::::basisMinGrow2Shrink1Test01()",
      "867": "FlexUtilTest::::basisMinGrow2Shrink1Test01()",
      "868": "FlexUtilTest::::basisMinGrow2Shrink1Test01()",
      "869": "FlexUtilTest::::basisMinGrow2Shrink1Test01()",
      "870": "FlexUtilTest::::basisMinGrow2Shrink1Test01()",
      "871": "FlexUtilTest::::basisMinGrow2Shrink1Test01()",
      "873": "FlexUtilTest::::basisMinGrow05SumGt1Shrink1Test01()",
      "874": "FlexUtilTest::::basisMinGrow05SumGt1Shrink1Test01()",
      "875": "FlexUtilTest::::basisMinGrow05SumGt1Shrink1Test01()",
      "876": "FlexUtilTest::::basisMinGrow05SumGt1Shrink1Test01()",
      "877": "FlexUtilTest::::basisMinGrow05SumGt1Shrink1Test01()",
      "878": "FlexUtilTest::::basisMinGrow05SumGt1Shrink1Test01()",
      "879": "FlexUtilTest::::basisMinGrow05SumGt1Shrink1Test01()",
      "880": "FlexUtilTest::::basisMinGrow05SumGt1Shrink1Test01()",
      "881": "FlexUtilTest::::basisMinGrow05SumGt1Shrink1Test01()",
      "882": "FlexUtilTest::::basisMinGrow05SumGt1Shrink1Test01()",
      "883": "FlexUtilTest::::basisMinGrow05SumGt1Shrink1Test01()",
      "884": "FlexUtilTest::::basisMinGrow05SumGt1Shrink1Test01()",
      "885": "FlexUtilTest::::basisMinGrow05SumGt1Shrink1Test01()",
      "886": "FlexUtilTest::::basisMinGrow05SumGt1Shrink1Test01()",
      "887": "FlexUtilTest::::basisMinGrow05SumGt1Shrink1Test01()",
      "888": "FlexUtilTest::::basisMinGrow05SumGt1Shrink1Test01()",
      "890": "FlexUtilTest::::basisMinGrow01SumLt1Shrink1Test01()",
      "891": "FlexUtilTest::::basisMinGrow01SumLt1Shrink1Test01()",
      "892": "FlexUtilTest::::basisMinGrow01SumLt1Shrink1Test01()",
      "893": "FlexUtilTest::::basisMinGrow01SumLt1Shrink1Test01()",
      "894": "FlexUtilTest::::basisMinGrow01SumLt1Shrink1Test01()",
      "895": "FlexUtilTest::::basisMinGrow01SumLt1Shrink1Test01()",
      "896": "FlexUtilTest::::basisMinGrow01SumLt1Shrink1Test01()",
      "897": "FlexUtilTest::::basisMinGrow01SumLt1Shrink1Test01()",
      "898": "FlexUtilTest::::basisMinGrow01SumLt1Shrink1Test01()",
      "899": "FlexUtilTest::::basisMinGrow01SumLt1Shrink1Test01()",
      "900": "FlexUtilTest::::basisMinGrow01SumLt1Shrink1Test01()",
      "901": "FlexUtilTest::::basisMinGrow01SumLt1Shrink1Test01()",
      "902": "FlexUtilTest::::basisMinGrow01SumLt1Shrink1Test01()",
      "903": "FlexUtilTest::::basisMinGrow01SumLt1Shrink1Test01()",
      "904": "FlexUtilTest::::basisMinGrow01SumLt1Shrink1Test01()",
      "905": "FlexUtilTest::::basisMinGrow01SumLt1Shrink1Test01()",
      "907": "FlexUtilTest::::basisMinGrow0Shrink05SumGt1Test01()",
      "908": "FlexUtilTest::::basisMinGrow0Shrink05SumGt1Test01()",
      "909": "FlexUtilTest::::basisMinGrow0Shrink05SumGt1Test01()",
      "910": "FlexUtilTest::::basisMinGrow0Shrink05SumGt1Test01()",
      "911": "FlexUtilTest::::basisMinGrow0Shrink05SumGt1Test01()",
      "912": "FlexUtilTest::::basisMinGrow0Shrink05SumGt1Test01()",
      "913": "FlexUtilTest::::basisMinGrow0Shrink05SumGt1Test01()",
      "914": "FlexUtilTest::::basisMinGrow0Shrink05SumGt1Test01()",
      "915": "FlexUtilTest::::basisMinGrow0Shrink05SumGt1Test01()",
      "916": "FlexUtilTest::::basisMinGrow0Shrink05SumGt1Test01()",
      "917": "FlexUtilTest::::basisMinGrow0Shrink05SumGt1Test01()",
      "918": "FlexUtilTest::::basisMinGrow0Shrink05SumGt1Test01()",
      "919": "FlexUtilTest::::basisMinGrow0Shrink05SumGt1Test01()",
      "920": "FlexUtilTest::::basisMinGrow0Shrink05SumGt1Test01()",
      "921": "FlexUtilTest::::basisMinGrow0Shrink05SumGt1Test01()",
      "922": "FlexUtilTest::::basisMinGrow0Shrink05SumGt1Test01()",
      "924": "FlexUtilTest::::basisMinGrow0Shrink01SumLt1Test01()",
      "925": "FlexUtilTest::::basisMinGrow0Shrink01SumLt1Test01()",
      "926": "FlexUtilTest::::basisMinGrow0Shrink01SumLt1Test01()",
      "927": "FlexUtilTest::::basisMinGrow0Shrink01SumLt1Test01()",
      "928": "FlexUtilTest::::basisMinGrow0Shrink01SumLt1Test01()",
      "929": "FlexUtilTest::::basisMinGrow0Shrink01SumLt1Test01()",
      "930": "FlexUtilTest::::basisMinGrow0Shrink01SumLt1Test01()",
      "931": "FlexUtilTest::::basisMinGrow0Shrink01SumLt1Test01()",
      "932": "FlexUtilTest::::basisMinGrow0Shrink01SumLt1Test01()",
      "933": "FlexUtilTest::::basisMinGrow0Shrink01SumLt1Test01()",
      "934": "FlexUtilTest::::basisMinGrow0Shrink01SumLt1Test01()",
      "935": "FlexUtilTest::::basisMinGrow0Shrink01SumLt1Test01()",
      "936": "FlexUtilTest::::basisMinGrow0Shrink01SumLt1Test01()",
      "937": "FlexUtilTest::::basisMinGrow0Shrink01SumLt1Test01()",
      "938": "FlexUtilTest::::basisMinGrow0Shrink01SumLt1Test01()",
      "939": "FlexUtilTest::::basisMinGrow0Shrink01SumLt1Test01()",
      "941": "FlexUtilTest::::basis50SumLtWidthGrow0Shrink1Test01()",
      "942": "FlexUtilTest::::basis50SumLtWidthGrow0Shrink1Test01()",
      "943": "FlexUtilTest::::basis50SumLtWidthGrow0Shrink1Test01()",
      "944": "FlexUtilTest::::basis50SumLtWidthGrow0Shrink1Test01()",
      "945": "FlexUtilTest::::basis50SumLtWidthGrow0Shrink1Test01()",
      "946": "FlexUtilTest::::basis50SumLtWidthGrow0Shrink1Test01()",
      "947": "FlexUtilTest::::basis50SumLtWidthGrow0Shrink1Test01()",
      "948": "FlexUtilTest::::basis50SumLtWidthGrow0Shrink1Test01()",
      "949": "FlexUtilTest::::basis50SumLtWidthGrow0Shrink1Test01()",
      "950": "FlexUtilTest::::basis50SumLtWidthGrow0Shrink1Test01()",
      "951": "FlexUtilTest::::basis50SumLtWidthGrow0Shrink1Test01()",
      "952": "FlexUtilTest::::basis50SumLtWidthGrow0Shrink1Test01()",
      "953": "FlexUtilTest::::basis50SumLtWidthGrow0Shrink1Test01()",
      "954": "FlexUtilTest::::basis50SumLtWidthGrow0Shrink1Test01()",
      "955": "FlexUtilTest::::basis50SumLtWidthGrow0Shrink1Test01()",
      "956": "FlexUtilTest::::basis50SumLtWidthGrow0Shrink1Test01()",
      "957": "FlexUtilTest::::basis50SumLtWidthGrow0Shrink1Test01()",
      "958": "FlexUtilTest::::basis50SumLtWidthGrow0Shrink1Test01()",
      "959": "FlexUtilTest::::basis50SumLtWidthGrow0Shrink1Test01()",
      "960": "FlexUtilTest::::basis50SumLtWidthGrow0Shrink1Test01()",
      "962": "FlexUtilTest::::basis250SumGtWidthGrow0Shrink1Test01()",
      "963": "FlexUtilTest::::basis250SumGtWidthGrow0Shrink1Test01()",
      "964": "FlexUtilTest::::basis250SumGtWidthGrow0Shrink1Test01()",
      "965": "FlexUtilTest::::basis250SumGtWidthGrow0Shrink1Test01()",
      "966": "FlexUtilTest::::basis250SumGtWidthGrow0Shrink1Test01()",
      "967": "FlexUtilTest::::basis250SumGtWidthGrow0Shrink1Test01()",
      "968": "FlexUtilTest::::basis250SumGtWidthGrow0Shrink1Test01()",
      "969": "FlexUtilTest::::basis250SumGtWidthGrow0Shrink1Test01()",
      "970": "FlexUtilTest::::basis250SumGtWidthGrow0Shrink1Test01()",
      "971": "FlexUtilTest::::basis250SumGtWidthGrow0Shrink1Test01()",
      "972": "FlexUtilTest::::basis250SumGtWidthGrow0Shrink1Test01()",
      "973": "FlexUtilTest::::basis250SumGtWidthGrow0Shrink1Test01()",
      "974": "FlexUtilTest::::basis250SumGtWidthGrow0Shrink1Test01()",
      "975": "FlexUtilTest::::basis250SumGtWidthGrow0Shrink1Test01()",
      "976": "FlexUtilTest::::basis250SumGtWidthGrow0Shrink1Test01()",
      "977": "FlexUtilTest::::basis250SumGtWidthGrow0Shrink1Test01()",
      "978": "FlexUtilTest::::basis250SumGtWidthGrow0Shrink1Test01()",
      "979": "FlexUtilTest::::basis250SumGtWidthGrow0Shrink1Test01()",
      "980": "FlexUtilTest::::basis250SumGtWidthGrow0Shrink1Test01()",
      "981": "FlexUtilTest::::basis250SumGtWidthGrow0Shrink1Test01()",
      "983": "FlexUtilTest::::differentBasisSumLtWidthGrow0Shrink1Test01()",
      "984": "FlexUtilTest::::differentBasisSumLtWidthGrow0Shrink1Test01()",
      "985": "FlexUtilTest::::differentBasisSumLtWidthGrow0Shrink1Test01()",
      "986": "FlexUtilTest::::differentBasisSumLtWidthGrow0Shrink1Test01()",
      "987": "FlexUtilTest::::differentBasisSumLtWidthGrow0Shrink1Test01()",
      "988": "FlexUtilTest::::differentBasisSumLtWidthGrow0Shrink1Test01()",
      "989": "FlexUtilTest::::differentBasisSumLtWidthGrow0Shrink1Test01()",
      "990": "FlexUtilTest::::differentBasisSumLtWidthGrow0Shrink1Test01()",
      "991": "FlexUtilTest::::differentBasisSumLtWidthGrow0Shrink1Test01()",
      "992": "FlexUtilTest::::differentBasisSumLtWidthGrow0Shrink1Test01()",
      "993": "FlexUtilTest::::differentBasisSumLtWidthGrow0Shrink1Test01()",
      "994": "FlexUtilTest::::differentBasisSumLtWidthGrow0Shrink1Test01()",
      "995": "FlexUtilTest::::differentBasisSumLtWidthGrow0Shrink1Test01()",
      "996": "FlexUtilTest::::differentBasisSumLtWidthGrow0Shrink1Test01()",
      "997": "FlexUtilTest::::differentBasisSumLtWidthGrow0Shrink1Test01()",
      "998": "FlexUtilTest::::differentBasisSumLtWidthGrow0Shrink1Test01()",
      "999": "FlexUtilTest::::differentBasisSumLtWidthGrow0Shrink1Test01()",
      "1000": "FlexUtilTest::::differentBasisSumLtWidthGrow0Shrink1Test01()",
      "1001": "FlexUtilTest::::differentBasisSumLtWidthGrow0Shrink1Test01()",
      "1002": "FlexUtilTest::::differentBasisSumLtWidthGrow0Shrink1Test01()",
      "1003": "FlexUtilTest::::differentBasisSumLtWidthGrow0Shrink1Test01()",
      "1004": "FlexUtilTest::::differentBasisSumLtWidthGrow0Shrink1Test01()",
      "1006": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Test01()",
      "1007": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Test01()",
      "1008": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Test01()",
      "1009": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Test01()",
      "1010": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Test01()",
      "1011": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Test01()",
      "1012": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Test01()",
      "1013": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Test01()",
      "1014": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Test01()",
      "1015": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Test01()",
      "1016": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Test01()",
      "1017": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Test01()",
      "1018": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Test01()",
      "1019": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Test01()",
      "1020": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Test01()",
      "1021": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Test01()",
      "1022": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Test01()",
      "1023": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Test01()",
      "1024": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Test01()",
      "1025": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Test01()",
      "1026": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Test01()",
      "1027": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Test01()",
      "1029": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink0Item2MarginBorderPadding30Test01()",
      "1030": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink0Item2MarginBorderPadding30Test01()",
      "1031": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink0Item2MarginBorderPadding30Test01()",
      "1032": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink0Item2MarginBorderPadding30Test01()",
      "1033": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink0Item2MarginBorderPadding30Test01()",
      "1034": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink0Item2MarginBorderPadding30Test01()",
      "1035": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink0Item2MarginBorderPadding30Test01()",
      "1036": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink0Item2MarginBorderPadding30Test01()",
      "1037": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink0Item2MarginBorderPadding30Test01()",
      "1038": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink0Item2MarginBorderPadding30Test01()",
      "1039": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink0Item2MarginBorderPadding30Test01()",
      "1040": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink0Item2MarginBorderPadding30Test01()",
      "1041": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink0Item2MarginBorderPadding30Test01()",
      "1042": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink0Item2MarginBorderPadding30Test01()",
      "1043": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink0Item2MarginBorderPadding30Test01()",
      "1044": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink0Item2MarginBorderPadding30Test01()",
      "1045": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink0Item2MarginBorderPadding30Test01()",
      "1046": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink0Item2MarginBorderPadding30Test01()",
      "1047": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink0Item2MarginBorderPadding30Test01()",
      "1048": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink0Item2MarginBorderPadding30Test01()",
      "1049": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink0Item2MarginBorderPadding30Test01()",
      "1050": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink0Item2MarginBorderPadding30Test01()",
      "1051": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink0Item2MarginBorderPadding30Test01()",
      "1052": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink0Item2MarginBorderPadding30Test01()",
      "1053": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink0Item2MarginBorderPadding30Test01()",
      "1054": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink0Item2MarginBorderPadding30Test01()",
      "1055": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink0Item2MarginBorderPadding30Test01()",
      "1056": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink0Item2MarginBorderPadding30Test01()",
      "1057": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink0Item2MarginBorderPadding30Test01()",
      "1058": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink0Item2MarginBorderPadding30Test01()",
      "1059": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink0Item2MarginBorderPadding30Test01()",
      "1060": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink0Item2MarginBorderPadding30Test01()",
      "1061": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink0Item2MarginBorderPadding30Test01()",
      "1062": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink0Item2MarginBorderPadding30Test01()",
      "1063": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink0Item2MarginBorderPadding30Test01()",
      "1064": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink0Item2MarginBorderPadding30Test01()",
      "1065": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink0Item2MarginBorderPadding30Test01()",
      "1066": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink0Item2MarginBorderPadding30Test01()",
      "1067": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink0Item2MarginBorderPadding30Test01()",
      "1069": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MarginBorderPadding30Test01()",
      "1070": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MarginBorderPadding30Test01()",
      "1071": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MarginBorderPadding30Test01()",
      "1072": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MarginBorderPadding30Test01()",
      "1073": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MarginBorderPadding30Test01()",
      "1074": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MarginBorderPadding30Test01()",
      "1075": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MarginBorderPadding30Test01()",
      "1076": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MarginBorderPadding30Test01()",
      "1077": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MarginBorderPadding30Test01()",
      "1078": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MarginBorderPadding30Test01()",
      "1079": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MarginBorderPadding30Test01()",
      "1080": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MarginBorderPadding30Test01()",
      "1081": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MarginBorderPadding30Test01()",
      "1082": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MarginBorderPadding30Test01()",
      "1083": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MarginBorderPadding30Test01()",
      "1084": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MarginBorderPadding30Test01()",
      "1085": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MarginBorderPadding30Test01()",
      "1086": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MarginBorderPadding30Test01()",
      "1087": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MarginBorderPadding30Test01()",
      "1088": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MarginBorderPadding30Test01()",
      "1089": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MarginBorderPadding30Test01()",
      "1090": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MarginBorderPadding30Test01()",
      "1091": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MarginBorderPadding30Test01()",
      "1092": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MarginBorderPadding30Test01()",
      "1093": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MarginBorderPadding30Test01()",
      "1094": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MarginBorderPadding30Test01()",
      "1095": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MarginBorderPadding30Test01()",
      "1096": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MarginBorderPadding30Test01()",
      "1097": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MarginBorderPadding30Test01()",
      "1098": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MarginBorderPadding30Test01()",
      "1099": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MarginBorderPadding30Test01()",
      "1100": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MarginBorderPadding30Test01()",
      "1101": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MarginBorderPadding30Test01()",
      "1102": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MarginBorderPadding30Test01()",
      "1103": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MarginBorderPadding30Test01()",
      "1104": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MarginBorderPadding30Test01()",
      "1105": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MarginBorderPadding30Test01()",
      "1106": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MarginBorderPadding30Test01()",
      "1108": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MarginBorderPadding30Test01()",
      "1109": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MarginBorderPadding30Test01()",
      "1110": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MarginBorderPadding30Test01()",
      "1111": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MarginBorderPadding30Test01()",
      "1112": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MarginBorderPadding30Test01()",
      "1113": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MarginBorderPadding30Test01()",
      "1114": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MarginBorderPadding30Test01()",
      "1115": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MarginBorderPadding30Test01()",
      "1116": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MarginBorderPadding30Test01()",
      "1117": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MarginBorderPadding30Test01()",
      "1118": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MarginBorderPadding30Test01()",
      "1119": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MarginBorderPadding30Test01()",
      "1120": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MarginBorderPadding30Test01()",
      "1121": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MarginBorderPadding30Test01()",
      "1122": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MarginBorderPadding30Test01()",
      "1123": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MarginBorderPadding30Test01()",
      "1124": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MarginBorderPadding30Test01()",
      "1125": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MarginBorderPadding30Test01()",
      "1126": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MarginBorderPadding30Test01()",
      "1127": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MarginBorderPadding30Test01()",
      "1128": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MarginBorderPadding30Test01()",
      "1129": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MarginBorderPadding30Test01()",
      "1130": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MarginBorderPadding30Test01()",
      "1131": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MarginBorderPadding30Test01()",
      "1132": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MarginBorderPadding30Test01()",
      "1133": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MarginBorderPadding30Test01()",
      "1134": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MarginBorderPadding30Test01()",
      "1135": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MarginBorderPadding30Test01()",
      "1136": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MarginBorderPadding30Test01()",
      "1137": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MarginBorderPadding30Test01()",
      "1138": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MarginBorderPadding30Test01()",
      "1139": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MarginBorderPadding30Test01()",
      "1140": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MarginBorderPadding30Test01()",
      "1141": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MarginBorderPadding30Test01()",
      "1142": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MarginBorderPadding30Test01()",
      "1143": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MarginBorderPadding30Test01()",
      "1144": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MarginBorderPadding30Test01()",
      "1145": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MarginBorderPadding30Test01()",
      "1146": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MarginBorderPadding30Test01()",
      "1147": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MarginBorderPadding30Test01()",
      "1148": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MarginBorderPadding30Test01()",
      "1149": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MarginBorderPadding30Test01()",
      "1150": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MarginBorderPadding30Test01()",
      "1151": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MarginBorderPadding30Test01()",
      "1153": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterTest()",
      "1154": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterTest()",
      "1155": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterTest()",
      "1156": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterTest()",
      "1157": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterTest()",
      "1158": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterTest()",
      "1159": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterTest()",
      "1160": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterTest()",
      "1161": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterTest()",
      "1162": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterTest()",
      "1163": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterTest()",
      "1164": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterTest()",
      "1165": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterTest()",
      "1166": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterTest()",
      "1167": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterTest()",
      "1168": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterTest()",
      "1169": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterTest()",
      "1170": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterTest()",
      "1171": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterTest()",
      "1172": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterTest()",
      "1173": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterTest()",
      "1174": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterTest()",
      "1175": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterTest()",
      "1176": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterTest()",
      "1177": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterTest()",
      "1178": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterTest()",
      "1179": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterTest()",
      "1180": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterTest()",
      "1181": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterTest()",
      "1182": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterTest()",
      "1183": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterTest()",
      "1184": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterTest()",
      "1185": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterTest()",
      "1186": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterTest()",
      "1187": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterTest()",
      "1188": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterTest()",
      "1189": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterTest()",
      "1190": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterTest()",
      "1191": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterTest()",
      "1192": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterTest()",
      "1193": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterTest()",
      "1194": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterTest()",
      "1195": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterTest()",
      "1196": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterTest()",
      "1197": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterTest()",
      "1198": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterTest()",
      "1199": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterTest()",
      "1200": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterTest()",
      "1201": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterTest()",
      "1202": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterTest()",
      "1203": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterTest()",
      "1204": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterTest()",
      "1205": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterTest()",
      "1206": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterTest()",
      "1208": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexStartTest()",
      "1209": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexStartTest()",
      "1210": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexStartTest()",
      "1211": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexStartTest()",
      "1212": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexStartTest()",
      "1213": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexStartTest()",
      "1214": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexStartTest()",
      "1215": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexStartTest()",
      "1216": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexStartTest()",
      "1217": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexStartTest()",
      "1218": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexStartTest()",
      "1219": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexStartTest()",
      "1220": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexStartTest()",
      "1221": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexStartTest()",
      "1222": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexStartTest()",
      "1223": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexStartTest()",
      "1224": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexStartTest()",
      "1225": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexStartTest()",
      "1226": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexStartTest()",
      "1227": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexStartTest()",
      "1228": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexStartTest()",
      "1229": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexStartTest()",
      "1230": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexStartTest()",
      "1231": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexStartTest()",
      "1232": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexStartTest()",
      "1233": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexStartTest()",
      "1234": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexStartTest()",
      "1235": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexStartTest()",
      "1236": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexStartTest()",
      "1237": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexStartTest()",
      "1238": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexStartTest()",
      "1239": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexStartTest()",
      "1240": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexStartTest()",
      "1241": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexStartTest()",
      "1242": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexStartTest()",
      "1243": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexStartTest()",
      "1244": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexStartTest()",
      "1245": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexStartTest()",
      "1246": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexStartTest()",
      "1247": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexStartTest()",
      "1248": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexStartTest()",
      "1249": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexStartTest()",
      "1250": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexStartTest()",
      "1251": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexStartTest()",
      "1252": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexStartTest()",
      "1253": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexStartTest()",
      "1254": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexStartTest()",
      "1255": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexStartTest()",
      "1256": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexStartTest()",
      "1257": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexStartTest()",
      "1258": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexStartTest()",
      "1259": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexStartTest()",
      "1260": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexStartTest()",
      "1261": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexStartTest()",
      "1262": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexStartTest()",
      "1263": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexStartTest()",
      "1264": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexStartTest()",
      "1265": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexStartTest()",
      "1266": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexStartTest()",
      "1267": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexStartTest()",
      "1268": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexStartTest()",
      "1269": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexStartTest()",
      "1270": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexStartTest()",
      "1271": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexStartTest()",
      "1272": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexStartTest()",
      "1273": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexStartTest()",
      "1274": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexStartTest()",
      "1275": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexStartTest()",
      "1276": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexStartTest()",
      "1277": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexStartTest()",
      "1278": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexStartTest()",
      "1279": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexStartTest()",
      "1281": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexEndTest()",
      "1282": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexEndTest()",
      "1283": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexEndTest()",
      "1284": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexEndTest()",
      "1285": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexEndTest()",
      "1286": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexEndTest()",
      "1287": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexEndTest()",
      "1288": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexEndTest()",
      "1289": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexEndTest()",
      "1290": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexEndTest()",
      "1291": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexEndTest()",
      "1292": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexEndTest()",
      "1293": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexEndTest()",
      "1294": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexEndTest()",
      "1295": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexEndTest()",
      "1296": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexEndTest()",
      "1297": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexEndTest()",
      "1298": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexEndTest()",
      "1299": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexEndTest()",
      "1300": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexEndTest()",
      "1301": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexEndTest()",
      "1302": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexEndTest()",
      "1303": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexEndTest()",
      "1304": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexEndTest()",
      "1305": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexEndTest()",
      "1306": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexEndTest()",
      "1307": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexEndTest()",
      "1308": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexEndTest()",
      "1309": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexEndTest()",
      "1310": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexEndTest()",
      "1311": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexEndTest()",
      "1312": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexEndTest()",
      "1313": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexEndTest()",
      "1314": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexEndTest()",
      "1315": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexEndTest()",
      "1316": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexEndTest()",
      "1317": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexEndTest()",
      "1318": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexEndTest()",
      "1319": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexEndTest()",
      "1320": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexEndTest()",
      "1321": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexEndTest()",
      "1322": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexEndTest()",
      "1323": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexEndTest()",
      "1324": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexEndTest()",
      "1325": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexEndTest()",
      "1326": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexEndTest()",
      "1327": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexEndTest()",
      "1328": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexEndTest()",
      "1329": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexEndTest()",
      "1330": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexEndTest()",
      "1331": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexEndTest()",
      "1332": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexEndTest()",
      "1333": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexEndTest()",
      "1334": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexEndTest()",
      "1335": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexEndTest()",
      "1336": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexEndTest()",
      "1337": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexEndTest()",
      "1338": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexEndTest()",
      "1339": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexEndTest()",
      "1340": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexEndTest()",
      "1341": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexEndTest()",
      "1342": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexEndTest()",
      "1343": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexEndTest()",
      "1344": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexEndTest()",
      "1345": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexEndTest()",
      "1346": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexEndTest()",
      "1347": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexEndTest()",
      "1348": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentFlexEndTest()",
      "1350": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30AlignItemsStretchTest()",
      "1351": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30AlignItemsStretchTest()",
      "1352": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30AlignItemsStretchTest()",
      "1353": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30AlignItemsStretchTest()",
      "1354": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30AlignItemsStretchTest()",
      "1355": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30AlignItemsStretchTest()",
      "1356": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30AlignItemsStretchTest()",
      "1357": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30AlignItemsStretchTest()",
      "1358": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30AlignItemsStretchTest()",
      "1359": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30AlignItemsStretchTest()",
      "1360": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30AlignItemsStretchTest()",
      "1361": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30AlignItemsStretchTest()",
      "1362": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30AlignItemsStretchTest()",
      "1363": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30AlignItemsStretchTest()",
      "1364": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30AlignItemsStretchTest()",
      "1365": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30AlignItemsStretchTest()",
      "1366": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30AlignItemsStretchTest()",
      "1367": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30AlignItemsStretchTest()",
      "1368": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30AlignItemsStretchTest()",
      "1369": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30AlignItemsStretchTest()",
      "1370": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30AlignItemsStretchTest()",
      "1371": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30AlignItemsStretchTest()",
      "1372": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30AlignItemsStretchTest()",
      "1373": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30AlignItemsStretchTest()",
      "1374": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30AlignItemsStretchTest()",
      "1375": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30AlignItemsStretchTest()",
      "1376": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30AlignItemsStretchTest()",
      "1377": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30AlignItemsStretchTest()",
      "1378": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30AlignItemsStretchTest()",
      "1379": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30AlignItemsStretchTest()",
      "1380": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30AlignItemsStretchTest()",
      "1381": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30AlignItemsStretchTest()",
      "1382": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30AlignItemsStretchTest()",
      "1383": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30AlignItemsStretchTest()",
      "1384": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30AlignItemsStretchTest()",
      "1385": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30AlignItemsStretchTest()",
      "1386": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30AlignItemsStretchTest()",
      "1387": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30AlignItemsStretchTest()",
      "1388": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30AlignItemsStretchTest()",
      "1389": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30AlignItemsStretchTest()",
      "1390": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30AlignItemsStretchTest()",
      "1391": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30AlignItemsStretchTest()",
      "1392": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30AlignItemsStretchTest()",
      "1393": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30AlignItemsStretchTest()",
      "1394": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30AlignItemsStretchTest()",
      "1395": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30AlignItemsStretchTest()",
      "1396": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30AlignItemsStretchTest()",
      "1397": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30AlignItemsStretchTest()",
      "1398": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30AlignItemsStretchTest()",
      "1399": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30AlignItemsStretchTest()",
      "1400": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30AlignItemsStretchTest()",
      "1401": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30AlignItemsStretchTest()",
      "1402": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30AlignItemsStretchTest()",
      "1403": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30AlignItemsStretchTest()",
      "1404": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30AlignItemsStretchTest()",
      "1405": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30AlignItemsStretchTest()",
      "1406": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30AlignItemsStretchTest()",
      "1407": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30AlignItemsStretchTest()",
      "1408": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30AlignItemsStretchTest()",
      "1410": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterDontFitTest()",
      "1411": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterDontFitTest()",
      "1412": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterDontFitTest()",
      "1413": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterDontFitTest()",
      "1414": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterDontFitTest()",
      "1415": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterDontFitTest()",
      "1416": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterDontFitTest()",
      "1417": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterDontFitTest()",
      "1418": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterDontFitTest()",
      "1419": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterDontFitTest()",
      "1420": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterDontFitTest()",
      "1421": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterDontFitTest()",
      "1422": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterDontFitTest()",
      "1423": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterDontFitTest()",
      "1424": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterDontFitTest()",
      "1425": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterDontFitTest()",
      "1426": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterDontFitTest()",
      "1427": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterDontFitTest()",
      "1428": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterDontFitTest()",
      "1429": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterDontFitTest()",
      "1430": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterDontFitTest()",
      "1431": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterDontFitTest()",
      "1432": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterDontFitTest()",
      "1433": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterDontFitTest()",
      "1434": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterDontFitTest()",
      "1435": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterDontFitTest()",
      "1436": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterDontFitTest()",
      "1437": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterDontFitTest()",
      "1438": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterDontFitTest()",
      "1439": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterDontFitTest()",
      "1440": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterDontFitTest()",
      "1441": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterDontFitTest()",
      "1442": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterDontFitTest()",
      "1443": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterDontFitTest()",
      "1444": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterDontFitTest()",
      "1445": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterDontFitTest()",
      "1446": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterDontFitTest()",
      "1447": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterDontFitTest()",
      "1448": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterDontFitTest()",
      "1449": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterDontFitTest()",
      "1450": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterDontFitTest()",
      "1451": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterDontFitTest()",
      "1452": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterDontFitTest()",
      "1453": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterDontFitTest()",
      "1454": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterDontFitTest()",
      "1455": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterDontFitTest()",
      "1456": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterDontFitTest()",
      "1457": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterDontFitTest()",
      "1458": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterDontFitTest()",
      "1459": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterDontFitTest()",
      "1460": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterDontFitTest()",
      "1461": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterDontFitTest()",
      "1462": "FlexUtilTest::::ltWidthGrow0Shrink1Item2MBP30JustifyContentCenterDontFitTest()",
      "1464": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentTest01()",
      "1465": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentTest01()",
      "1466": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentTest01()",
      "1467": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentTest01()",
      "1468": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentTest01()",
      "1469": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentTest01()",
      "1470": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentTest01()",
      "1471": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentTest01()",
      "1472": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentTest01()",
      "1473": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentTest01()",
      "1474": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentTest01()",
      "1475": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentTest01()",
      "1476": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentTest01()",
      "1477": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentTest01()",
      "1478": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentTest01()",
      "1479": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentTest01()",
      "1480": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentTest01()",
      "1481": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentTest01()",
      "1482": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentTest01()",
      "1483": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentTest01()",
      "1484": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentTest01()",
      "1485": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentTest01()",
      "1486": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentTest01()",
      "1487": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentTest01()",
      "1488": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentTest01()",
      "1489": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentTest01()",
      "1490": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentTest01()",
      "1491": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentTest01()",
      "1492": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentTest01()",
      "1493": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentTest01()",
      "1494": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentTest01()",
      "1495": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentTest01()",
      "1496": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentTest01()",
      "1497": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentTest01()",
      "1498": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentTest01()",
      "1499": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentTest01()",
      "1500": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentTest01()",
      "1501": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentTest01()",
      "1502": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentTest01()",
      "1503": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentTest01()",
      "1504": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentTest01()",
      "1505": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentTest01()",
      "1506": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentTest01()",
      "1507": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentTest01()",
      "1509": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthLtBasisTest01()",
      "1510": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthLtBasisTest01()",
      "1511": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthLtBasisTest01()",
      "1512": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthLtBasisTest01()",
      "1513": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthLtBasisTest01()",
      "1514": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthLtBasisTest01()",
      "1515": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthLtBasisTest01()",
      "1516": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthLtBasisTest01()",
      "1517": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthLtBasisTest01()",
      "1518": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthLtBasisTest01()",
      "1519": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthLtBasisTest01()",
      "1520": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthLtBasisTest01()",
      "1521": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthLtBasisTest01()",
      "1522": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthLtBasisTest01()",
      "1523": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthLtBasisTest01()",
      "1524": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthLtBasisTest01()",
      "1525": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthLtBasisTest01()",
      "1526": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthLtBasisTest01()",
      "1527": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthLtBasisTest01()",
      "1528": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthLtBasisTest01()",
      "1529": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthLtBasisTest01()",
      "1530": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthLtBasisTest01()",
      "1531": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthLtBasisTest01()",
      "1532": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthLtBasisTest01()",
      "1533": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthLtBasisTest01()",
      "1534": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthLtBasisTest01()",
      "1535": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthLtBasisTest01()",
      "1536": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthLtBasisTest01()",
      "1537": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthLtBasisTest01()",
      "1538": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthLtBasisTest01()",
      "1539": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthLtBasisTest01()",
      "1540": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthLtBasisTest01()",
      "1541": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthLtBasisTest01()",
      "1542": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthLtBasisTest01()",
      "1543": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthLtBasisTest01()",
      "1544": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthLtBasisTest01()",
      "1545": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthLtBasisTest01()",
      "1546": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthLtBasisTest01()",
      "1547": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthLtBasisTest01()",
      "1548": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthLtBasisTest01()",
      "1549": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthLtBasisTest01()",
      "1550": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthLtBasisTest01()",
      "1551": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthLtBasisTest01()",
      "1552": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthLtBasisTest01()",
      "1553": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthLtBasisTest01()",
      "1554": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthLtBasisTest01()",
      "1556": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest01()",
      "1557": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest01()",
      "1558": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest01()",
      "1559": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest01()",
      "1560": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest01()",
      "1561": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest01()",
      "1562": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest01()",
      "1563": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest01()",
      "1564": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest01()",
      "1565": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest01()",
      "1566": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest01()",
      "1567": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest01()",
      "1568": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest01()",
      "1569": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest01()",
      "1570": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest01()",
      "1571": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest01()",
      "1572": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest01()",
      "1573": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest01()",
      "1574": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest01()",
      "1575": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest01()",
      "1576": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest01()",
      "1577": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest01()",
      "1578": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest01()",
      "1579": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest01()",
      "1580": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest01()",
      "1581": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest01()",
      "1582": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest01()",
      "1583": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest01()",
      "1584": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest01()",
      "1585": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest01()",
      "1586": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest01()",
      "1587": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest01()",
      "1588": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest01()",
      "1589": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest01()",
      "1590": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest01()",
      "1591": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest01()",
      "1592": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest01()",
      "1593": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest01()",
      "1594": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest01()",
      "1596": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest02()",
      "1597": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest02()",
      "1598": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest02()",
      "1599": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest02()",
      "1600": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest02()",
      "1601": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest02()",
      "1602": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest02()",
      "1603": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest02()",
      "1604": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest02()",
      "1605": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest02()",
      "1606": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest02()",
      "1607": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest02()",
      "1608": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest02()",
      "1609": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest02()",
      "1610": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest02()",
      "1611": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest02()",
      "1612": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest02()",
      "1613": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest02()",
      "1614": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest02()",
      "1615": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest02()",
      "1616": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest02()",
      "1617": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest02()",
      "1618": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest02()",
      "1619": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest02()",
      "1620": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest02()",
      "1621": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest02()",
      "1622": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest02()",
      "1623": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest02()",
      "1624": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest02()",
      "1625": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest02()",
      "1626": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest02()",
      "1627": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest02()",
      "1628": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest02()",
      "1629": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest02()",
      "1630": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest02()",
      "1631": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest02()",
      "1632": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest02()",
      "1633": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest02()",
      "1634": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest02()",
      "1636": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest03()",
      "1637": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest03()",
      "1638": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest03()",
      "1639": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest03()",
      "1640": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest03()",
      "1641": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest03()",
      "1642": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest03()",
      "1643": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest03()",
      "1644": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest03()",
      "1645": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest03()",
      "1646": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest03()",
      "1647": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest03()",
      "1648": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest03()",
      "1649": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest03()",
      "1650": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest03()",
      "1651": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest03()",
      "1652": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest03()",
      "1653": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest03()",
      "1654": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest03()",
      "1655": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest03()",
      "1656": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest03()",
      "1657": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest03()",
      "1658": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest03()",
      "1659": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest03()",
      "1660": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest03()",
      "1661": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest03()",
      "1662": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest03()",
      "1663": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest03()",
      "1664": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest03()",
      "1665": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest03()",
      "1666": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest03()",
      "1667": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest03()",
      "1668": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest03()",
      "1669": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest03()",
      "1670": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest03()",
      "1671": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest03()",
      "1672": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest03()",
      "1673": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MaxWidthLtBasisTest03()",
      "1675": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item1MinWidthGtBasisTest01()",
      "1676": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item1MinWidthGtBasisTest01()",
      "1677": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item1MinWidthGtBasisTest01()",
      "1678": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item1MinWidthGtBasisTest01()",
      "1679": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item1MinWidthGtBasisTest01()",
      "1680": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item1MinWidthGtBasisTest01()",
      "1681": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item1MinWidthGtBasisTest01()",
      "1682": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item1MinWidthGtBasisTest01()",
      "1683": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item1MinWidthGtBasisTest01()",
      "1684": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item1MinWidthGtBasisTest01()",
      "1685": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item1MinWidthGtBasisTest01()",
      "1686": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item1MinWidthGtBasisTest01()",
      "1687": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item1MinWidthGtBasisTest01()",
      "1688": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item1MinWidthGtBasisTest01()",
      "1689": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item1MinWidthGtBasisTest01()",
      "1690": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item1MinWidthGtBasisTest01()",
      "1691": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item1MinWidthGtBasisTest01()",
      "1692": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item1MinWidthGtBasisTest01()",
      "1693": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item1MinWidthGtBasisTest01()",
      "1694": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item1MinWidthGtBasisTest01()",
      "1695": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item1MinWidthGtBasisTest01()",
      "1696": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item1MinWidthGtBasisTest01()",
      "1697": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item1MinWidthGtBasisTest01()",
      "1698": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item1MinWidthGtBasisTest01()",
      "1699": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item1MinWidthGtBasisTest01()",
      "1700": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item1MinWidthGtBasisTest01()",
      "1701": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item1MinWidthGtBasisTest01()",
      "1702": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item1MinWidthGtBasisTest01()",
      "1703": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item1MinWidthGtBasisTest01()",
      "1704": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item1MinWidthGtBasisTest01()",
      "1705": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item1MinWidthGtBasisTest01()",
      "1706": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item1MinWidthGtBasisTest01()",
      "1707": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item1MinWidthGtBasisTest01()",
      "1708": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item1MinWidthGtBasisTest01()",
      "1709": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item1MinWidthGtBasisTest01()",
      "1710": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item1MinWidthGtBasisTest01()",
      "1711": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item1MinWidthGtBasisTest01()",
      "1712": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item1MinWidthGtBasisTest01()",
      "1713": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item1MinWidthGtBasisTest01()",
      "1715": "FlexUtilTest::::imgGtUsedWidthTest01()",
      "1716": "FlexUtilTest::::imgGtUsedWidthTest01()",
      "1717": "FlexUtilTest::::imgGtUsedWidthTest01()",
      "1718": "FlexUtilTest::::imgGtUsedWidthTest01()",
      "1719": "FlexUtilTest::::imgGtUsedWidthTest01()",
      "1720": "FlexUtilTest::::imgGtUsedWidthTest01()",
      "1721": "FlexUtilTest::::imgGtUsedWidthTest01()",
      "1722": "FlexUtilTest::::imgGtUsedWidthTest01()",
      "1723": "FlexUtilTest::::imgGtUsedWidthTest01()",
      "1724": "FlexUtilTest::::imgGtUsedWidthTest01()",
      "1725": "FlexUtilTest::::imgGtUsedWidthTest01()",
      "1726": "FlexUtilTest::::imgGtUsedWidthTest01()",
      "1727": "FlexUtilTest::::imgGtUsedWidthTest01()",
      "1728": "FlexUtilTest::::imgGtUsedWidthTest01()",
      "1729": "FlexUtilTest::::imgGtUsedWidthTest01()",
      "1730": "FlexUtilTest::::imgGtUsedWidthTest01()",
      "1731": "FlexUtilTest::::imgGtUsedWidthTest01()",
      "1732": "FlexUtilTest::::imgGtUsedWidthTest01()",
      "1733": "FlexUtilTest::::imgGtUsedWidthTest01()",
      "1734": "FlexUtilTest::::imgGtUsedWidthTest01()",
      "1735": "FlexUtilTest::::imgGtUsedWidthTest01()",
      "1736": "FlexUtilTest::::imgGtUsedWidthTest01()",
      "1737": "FlexUtilTest::::imgGtUsedWidthTest01()",
      "1738": "FlexUtilTest::::imgGtUsedWidthTest01()",
      "1739": "FlexUtilTest::::imgGtUsedWidthTest01()",
      "1740": "FlexUtilTest::::imgGtUsedWidthTest01()",
      "1741": "FlexUtilTest::::imgGtUsedWidthTest01()",
      "1742": "FlexUtilTest::::imgGtUsedWidthTest01()",
      "1743": "FlexUtilTest::::imgGtUsedWidthTest01()",
      "1744": "FlexUtilTest::::imgGtUsedWidthTest01()",
      "1745": "FlexUtilTest::::imgGtUsedWidthTest01()",
      "1746": "FlexUtilTest::::imgGtUsedWidthTest01()",
      "1747": "FlexUtilTest::::imgGtUsedWidthTest01()",
      "1748": "FlexUtilTest::::imgGtUsedWidthTest01()",
      "1749": "FlexUtilTest::::imgGtUsedWidthTest01()",
      "1750": "FlexUtilTest::::imgGtUsedWidthTest01()",
      "1751": "FlexUtilTest::::imgGtUsedWidthTest01()",
      "1752": "FlexUtilTest::::imgGtUsedWidthTest01()",
      "1753": "FlexUtilTest::::imgGtUsedWidthTest01()",
      "1754": "FlexUtilTest::::imgGtUsedWidthTest01()",
      "1755": "FlexUtilTest::::imgGtUsedWidthTest01()",
      "1757": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest01()",
      "1758": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest01()",
      "1759": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest01()",
      "1760": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest01()",
      "1761": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest01()",
      "1762": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest01()",
      "1763": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest01()",
      "1764": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest01()",
      "1765": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest01()",
      "1766": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest01()",
      "1767": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest01()",
      "1768": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest01()",
      "1769": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest01()",
      "1770": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest01()",
      "1771": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest01()",
      "1772": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest01()",
      "1773": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest01()",
      "1774": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest01()",
      "1775": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest01()",
      "1776": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest01()",
      "1777": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest01()",
      "1778": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest01()",
      "1779": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest01()",
      "1780": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest01()",
      "1781": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest01()",
      "1782": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest01()",
      "1783": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest01()",
      "1784": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest01()",
      "1785": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest01()",
      "1786": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest01()",
      "1787": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest01()",
      "1788": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest01()",
      "1789": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest01()",
      "1790": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest01()",
      "1791": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest01()",
      "1792": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest01()",
      "1793": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest01()",
      "1794": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest01()",
      "1795": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest01()",
      "1796": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest01()",
      "1797": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest01()",
      "1798": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest01()",
      "1799": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest01()",
      "1800": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest01()",
      "1801": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest01()",
      "1802": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest01()",
      "1804": "FlexUtilTest::::basis1Grow0Test01()",
      "1805": "FlexUtilTest::::basis1Grow0Test01()",
      "1806": "FlexUtilTest::::basis1Grow0Test01()",
      "1807": "FlexUtilTest::::basis1Grow0Test01()",
      "1808": "FlexUtilTest::::basis1Grow0Test01()",
      "1809": "FlexUtilTest::::basis1Grow0Test01()",
      "1810": "FlexUtilTest::::basis1Grow0Test01()",
      "1811": "FlexUtilTest::::basis1Grow0Test01()",
      "1812": "FlexUtilTest::::basis1Grow0Test01()",
      "1813": "FlexUtilTest::::basis1Grow0Test01()",
      "1814": "FlexUtilTest::::basis1Grow0Test01()",
      "1815": "FlexUtilTest::::basis1Grow0Test01()",
      "1816": "FlexUtilTest::::basis1Grow0Test01()",
      "1817": "FlexUtilTest::::basis1Grow0Test01()",
      "1818": "FlexUtilTest::::basis1Grow0Test01()",
      "1819": "FlexUtilTest::::basis1Grow0Test01()",
      "1820": "FlexUtilTest::::basis1Grow0Test01()",
      "1821": "FlexUtilTest::::basis1Grow0Test01()",
      "1822": "FlexUtilTest::::basis1Grow0Test01()",
      "1823": "FlexUtilTest::::basis1Grow0Test01()",
      "1824": "FlexUtilTest::::basis1Grow0Test01()",
      "1825": "FlexUtilTest::::basis1Grow0Test01()",
      "1826": "FlexUtilTest::::basis1Grow0Test01()",
      "1827": "FlexUtilTest::::basis1Grow0Test01()",
      "1828": "FlexUtilTest::::basis1Grow0Test01()",
      "1829": "FlexUtilTest::::basis1Grow0Test01()",
      "1830": "FlexUtilTest::::basis1Grow0Test01()",
      "1831": "FlexUtilTest::::basis1Grow0Test01()",
      "1832": "FlexUtilTest::::basis1Grow0Test01()",
      "1833": "FlexUtilTest::::basis1Grow0Test01()",
      "1834": "FlexUtilTest::::basis1Grow0Test01()",
      "1835": "FlexUtilTest::::basis1Grow0Test01()",
      "1836": "FlexUtilTest::::basis1Grow0Test01()",
      "1837": "FlexUtilTest::::basis1Grow0Test01()",
      "1838": "FlexUtilTest::::basis1Grow0Test01()",
      "1839": "FlexUtilTest::::basis1Grow0Test01()",
      "1840": "FlexUtilTest::::basis1Grow0Test01()",
      "1841": "FlexUtilTest::::basis1Grow0Test01()",
      "1842": "FlexUtilTest::::basis1Grow0Test01()",
      "1843": "FlexUtilTest::::basis1Grow0Test01()",
      "1844": "FlexUtilTest::::basis1Grow0Test01()",
      "1845": "FlexUtilTest::::basis1Grow0Test01()",
      "1846": "FlexUtilTest::::basis1Grow0Test01()",
      "1847": "FlexUtilTest::::basis1Grow0Test01()",
      "1849": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest02()",
      "1850": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest02()",
      "1851": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest02()",
      "1852": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest02()",
      "1853": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest02()",
      "1854": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest02()",
      "1855": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest02()",
      "1856": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest02()",
      "1857": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest02()",
      "1858": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest02()",
      "1859": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest02()",
      "1860": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest02()",
      "1861": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest02()",
      "1862": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest02()",
      "1863": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest02()",
      "1864": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest02()",
      "1865": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest02()",
      "1866": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest02()",
      "1867": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest02()",
      "1868": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest02()",
      "1869": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest02()",
      "1870": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest02()",
      "1871": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest02()",
      "1872": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest02()",
      "1873": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest02()",
      "1874": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest02()",
      "1875": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest02()",
      "1876": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest02()",
      "1877": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest02()",
      "1878": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest02()",
      "1879": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest02()",
      "1880": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest02()",
      "1881": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest02()",
      "1882": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest02()",
      "1883": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest02()",
      "1884": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest02()",
      "1885": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest02()",
      "1886": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest02()",
      "1887": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest02()",
      "1888": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest02()",
      "1889": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest02()",
      "1890": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest02()",
      "1891": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest02()",
      "1892": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest02()",
      "1893": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest02()",
      "1894": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest02()",
      "1896": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest03()",
      "1897": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest03()",
      "1898": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest03()",
      "1899": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest03()",
      "1900": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest03()",
      "1901": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest03()",
      "1902": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest03()",
      "1903": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest03()",
      "1904": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest03()",
      "1905": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest03()",
      "1906": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest03()",
      "1907": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest03()",
      "1908": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest03()",
      "1909": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest03()",
      "1910": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest03()",
      "1911": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest03()",
      "1912": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest03()",
      "1913": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest03()",
      "1914": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest03()",
      "1915": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest03()",
      "1916": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest03()",
      "1917": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest03()",
      "1918": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest03()",
      "1919": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest03()",
      "1920": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest03()",
      "1921": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest03()",
      "1922": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest03()",
      "1923": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest03()",
      "1924": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest03()",
      "1925": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest03()",
      "1926": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest03()",
      "1927": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest03()",
      "1928": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest03()",
      "1929": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest03()",
      "1930": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest03()",
      "1931": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest03()",
      "1932": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest03()",
      "1933": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest03()",
      "1934": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest03()",
      "1935": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest03()",
      "1936": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest03()",
      "1937": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest03()",
      "1938": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest03()",
      "1939": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest03()",
      "1940": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest03()",
      "1941": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink1Item2MuchContentSetMinWidthGtBasisTest03()",
      "1943": "FlexUtilTest::::differentBasisSumEqWidthGrow1Shrink1Item2Basis0Test01()",
      "1944": "FlexUtilTest::::differentBasisSumEqWidthGrow1Shrink1Item2Basis0Test01()",
      "1945": "FlexUtilTest::::differentBasisSumEqWidthGrow1Shrink1Item2Basis0Test01()",
      "1946": "FlexUtilTest::::differentBasisSumEqWidthGrow1Shrink1Item2Basis0Test01()",
      "1947": "FlexUtilTest::::differentBasisSumEqWidthGrow1Shrink1Item2Basis0Test01()",
      "1948": "FlexUtilTest::::differentBasisSumEqWidthGrow1Shrink1Item2Basis0Test01()",
      "1949": "FlexUtilTest::::differentBasisSumEqWidthGrow1Shrink1Item2Basis0Test01()",
      "1950": "FlexUtilTest::::differentBasisSumEqWidthGrow1Shrink1Item2Basis0Test01()",
      "1951": "FlexUtilTest::::differentBasisSumEqWidthGrow1Shrink1Item2Basis0Test01()",
      "1952": "FlexUtilTest::::differentBasisSumEqWidthGrow1Shrink1Item2Basis0Test01()",
      "1953": "FlexUtilTest::::differentBasisSumEqWidthGrow1Shrink1Item2Basis0Test01()",
      "1954": "FlexUtilTest::::differentBasisSumEqWidthGrow1Shrink1Item2Basis0Test01()",
      "1955": "FlexUtilTest::::differentBasisSumEqWidthGrow1Shrink1Item2Basis0Test01()",
      "1956": "FlexUtilTest::::differentBasisSumEqWidthGrow1Shrink1Item2Basis0Test01()",
      "1957": "FlexUtilTest::::differentBasisSumEqWidthGrow1Shrink1Item2Basis0Test01()",
      "1958": "FlexUtilTest::::differentBasisSumEqWidthGrow1Shrink1Item2Basis0Test01()",
      "1959": "FlexUtilTest::::differentBasisSumEqWidthGrow1Shrink1Item2Basis0Test01()",
      "1960": "FlexUtilTest::::differentBasisSumEqWidthGrow1Shrink1Item2Basis0Test01()",
      "1961": "FlexUtilTest::::differentBasisSumEqWidthGrow1Shrink1Item2Basis0Test01()",
      "1962": "FlexUtilTest::::differentBasisSumEqWidthGrow1Shrink1Item2Basis0Test01()",
      "1963": "FlexUtilTest::::differentBasisSumEqWidthGrow1Shrink1Item2Basis0Test01()",
      "1964": "FlexUtilTest::::differentBasisSumEqWidthGrow1Shrink1Item2Basis0Test01()",
      "1965": "FlexUtilTest::::differentBasisSumEqWidthGrow1Shrink1Item2Basis0Test01()",
      "1966": "FlexUtilTest::::differentBasisSumEqWidthGrow1Shrink1Item2Basis0Test01()",
      "1967": "FlexUtilTest::::differentBasisSumEqWidthGrow1Shrink1Item2Basis0Test01()",
      "1968": "FlexUtilTest::::differentBasisSumEqWidthGrow1Shrink1Item2Basis0Test01()",
      "1969": "FlexUtilTest::::differentBasisSumEqWidthGrow1Shrink1Item2Basis0Test01()",
      "1970": "FlexUtilTest::::differentBasisSumEqWidthGrow1Shrink1Item2Basis0Test01()",
      "1972": "FlexUtilTest::::differentBasisSumEqWidthGrow1Shrink1Item2Basis0NoContentTest02()",
      "1973": "FlexUtilTest::::differentBasisSumEqWidthGrow1Shrink1Item2Basis0NoContentTest02()",
      "1974": "FlexUtilTest::::differentBasisSumEqWidthGrow1Shrink1Item2Basis0NoContentTest02()",
      "1975": "FlexUtilTest::::differentBasisSumEqWidthGrow1Shrink1Item2Basis0NoContentTest02()",
      "1976": "FlexUtilTest::::differentBasisSumEqWidthGrow1Shrink1Item2Basis0NoContentTest02()",
      "1977": "FlexUtilTest::::differentBasisSumEqWidthGrow1Shrink1Item2Basis0NoContentTest02()",
      "1978": "FlexUtilTest::::differentBasisSumEqWidthGrow1Shrink1Item2Basis0NoContentTest02()",
      "1979": "FlexUtilTest::::differentBasisSumEqWidthGrow1Shrink1Item2Basis0NoContentTest02()",
      "1980": "FlexUtilTest::::differentBasisSumEqWidthGrow1Shrink1Item2Basis0NoContentTest02()",
      "1981": "FlexUtilTest::::differentBasisSumEqWidthGrow1Shrink1Item2Basis0NoContentTest02()",
      "1982": "FlexUtilTest::::differentBasisSumEqWidthGrow1Shrink1Item2Basis0NoContentTest02()",
      "1983": "FlexUtilTest::::differentBasisSumEqWidthGrow1Shrink1Item2Basis0NoContentTest02()",
      "1984": "FlexUtilTest::::differentBasisSumEqWidthGrow1Shrink1Item2Basis0NoContentTest02()",
      "1985": "FlexUtilTest::::differentBasisSumEqWidthGrow1Shrink1Item2Basis0NoContentTest02()",
      "1986": "FlexUtilTest::::differentBasisSumEqWidthGrow1Shrink1Item2Basis0NoContentTest02()",
      "1987": "FlexUtilTest::::differentBasisSumEqWidthGrow1Shrink1Item2Basis0NoContentTest02()",
      "1988": "FlexUtilTest::::differentBasisSumEqWidthGrow1Shrink1Item2Basis0NoContentTest02()",
      "1989": "FlexUtilTest::::differentBasisSumEqWidthGrow1Shrink1Item2Basis0NoContentTest02()",
      "1990": "FlexUtilTest::::differentBasisSumEqWidthGrow1Shrink1Item2Basis0NoContentTest02()",
      "1991": "FlexUtilTest::::differentBasisSumEqWidthGrow1Shrink1Item2Basis0NoContentTest02()",
      "1992": "FlexUtilTest::::differentBasisSumEqWidthGrow1Shrink1Item2Basis0NoContentTest02()",
      "1993": "FlexUtilTest::::differentBasisSumEqWidthGrow1Shrink1Item2Basis0NoContentTest02()",
      "1994": "FlexUtilTest::::differentBasisSumEqWidthGrow1Shrink1Item2Basis0NoContentTest02()",
      "1995": "FlexUtilTest::::differentBasisSumEqWidthGrow1Shrink1Item2Basis0NoContentTest02()",
      "1996": "FlexUtilTest::::differentBasisSumEqWidthGrow1Shrink1Item2Basis0NoContentTest02()",
      "1997": "FlexUtilTest::::differentBasisSumEqWidthGrow1Shrink1Item2Basis0NoContentTest02()",
      "1998": "FlexUtilTest::::differentBasisSumEqWidthGrow1Shrink1Item2Basis0NoContentTest02()",
      "1999": "FlexUtilTest::::differentBasisSumEqWidthGrow1Shrink1Item2Basis0NoContentTest02()",
      "2000": "FlexUtilTest::::differentBasisSumEqWidthGrow1Shrink1Item2Basis0NoContentTest02()",
      "2001": "FlexUtilTest::::differentBasisSumEqWidthGrow1Shrink1Item2Basis0NoContentTest02()",
      "2002": "FlexUtilTest::::differentBasisSumEqWidthGrow1Shrink1Item2Basis0NoContentTest02()",
      "2003": "FlexUtilTest::::differentBasisSumEqWidthGrow1Shrink1Item2Basis0NoContentTest02()",
      "2004": "FlexUtilTest::::differentBasisSumEqWidthGrow1Shrink1Item2Basis0NoContentTest02()",
      "2005": "FlexUtilTest::::differentBasisSumEqWidthGrow1Shrink1Item2Basis0NoContentTest02()",
      "2006": "FlexUtilTest::::differentBasisSumEqWidthGrow1Shrink1Item2Basis0NoContentTest02()",
      "2007": "FlexUtilTest::::differentBasisSumEqWidthGrow1Shrink1Item2Basis0NoContentTest02()",
      "2008": "FlexUtilTest::::differentBasisSumEqWidthGrow1Shrink1Item2Basis0NoContentTest02()",
      "2009": "FlexUtilTest::::differentBasisSumEqWidthGrow1Shrink1Item2Basis0NoContentTest02()",
      "2010": "FlexUtilTest::::differentBasisSumEqWidthGrow1Shrink1Item2Basis0NoContentTest02()",
      "2011": "FlexUtilTest::::differentBasisSumEqWidthGrow1Shrink1Item2Basis0NoContentTest02()",
      "2012": "FlexUtilTest::::differentBasisSumEqWidthGrow1Shrink1Item2Basis0NoContentTest02()",
      "2013": "FlexUtilTest::::differentBasisSumEqWidthGrow1Shrink1Item2Basis0NoContentTest02()",
      "2015": "FlexUtilTest::::differentBasisSumLtWidthGrow0Shrink0Test01()",
      "2016": "FlexUtilTest::::differentBasisSumLtWidthGrow0Shrink0Test01()",
      "2017": "FlexUtilTest::::differentBasisSumLtWidthGrow0Shrink0Test01()",
      "2018": "FlexUtilTest::::differentBasisSumLtWidthGrow0Shrink0Test01()",
      "2019": "FlexUtilTest::::differentBasisSumLtWidthGrow0Shrink0Test01()",
      "2020": "FlexUtilTest::::differentBasisSumLtWidthGrow0Shrink0Test01()",
      "2021": "FlexUtilTest::::differentBasisSumLtWidthGrow0Shrink0Test01()",
      "2022": "FlexUtilTest::::differentBasisSumLtWidthGrow0Shrink0Test01()",
      "2023": "FlexUtilTest::::differentBasisSumLtWidthGrow0Shrink0Test01()",
      "2024": "FlexUtilTest::::differentBasisSumLtWidthGrow0Shrink0Test01()",
      "2025": "FlexUtilTest::::differentBasisSumLtWidthGrow0Shrink0Test01()",
      "2026": "FlexUtilTest::::differentBasisSumLtWidthGrow0Shrink0Test01()",
      "2027": "FlexUtilTest::::differentBasisSumLtWidthGrow0Shrink0Test01()",
      "2028": "FlexUtilTest::::differentBasisSumLtWidthGrow0Shrink0Test01()",
      "2029": "FlexUtilTest::::differentBasisSumLtWidthGrow0Shrink0Test01()",
      "2030": "FlexUtilTest::::differentBasisSumLtWidthGrow0Shrink0Test01()",
      "2031": "FlexUtilTest::::differentBasisSumLtWidthGrow0Shrink0Test01()",
      "2032": "FlexUtilTest::::differentBasisSumLtWidthGrow0Shrink0Test01()",
      "2033": "FlexUtilTest::::differentBasisSumLtWidthGrow0Shrink0Test01()",
      "2034": "FlexUtilTest::::differentBasisSumLtWidthGrow0Shrink0Test01()",
      "2035": "FlexUtilTest::::differentBasisSumLtWidthGrow0Shrink0Test01()",
      "2036": "FlexUtilTest::::differentBasisSumLtWidthGrow0Shrink0Test01()",
      "2038": "FlexUtilTest::::differentBasisSumLtWidthGrow0Shrink0Item2Grow2Test01()",
      "2039": "FlexUtilTest::::differentBasisSumLtWidthGrow0Shrink0Item2Grow2Test01()",
      "2040": "FlexUtilTest::::differentBasisSumLtWidthGrow0Shrink0Item2Grow2Test01()",
      "2041": "FlexUtilTest::::differentBasisSumLtWidthGrow0Shrink0Item2Grow2Test01()",
      "2042": "FlexUtilTest::::differentBasisSumLtWidthGrow0Shrink0Item2Grow2Test01()",
      "2043": "FlexUtilTest::::differentBasisSumLtWidthGrow0Shrink0Item2Grow2Test01()",
      "2044": "FlexUtilTest::::differentBasisSumLtWidthGrow0Shrink0Item2Grow2Test01()",
      "2045": "FlexUtilTest::::differentBasisSumLtWidthGrow0Shrink0Item2Grow2Test01()",
      "2046": "FlexUtilTest::::differentBasisSumLtWidthGrow0Shrink0Item2Grow2Test01()",
      "2047": "FlexUtilTest::::differentBasisSumLtWidthGrow0Shrink0Item2Grow2Test01()",
      "2048": "FlexUtilTest::::differentBasisSumLtWidthGrow0Shrink0Item2Grow2Test01()",
      "2049": "FlexUtilTest::::differentBasisSumLtWidthGrow0Shrink0Item2Grow2Test01()",
      "2050": "FlexUtilTest::::differentBasisSumLtWidthGrow0Shrink0Item2Grow2Test01()",
      "2051": "FlexUtilTest::::differentBasisSumLtWidthGrow0Shrink0Item2Grow2Test01()",
      "2052": "FlexUtilTest::::differentBasisSumLtWidthGrow0Shrink0Item2Grow2Test01()",
      "2053": "FlexUtilTest::::differentBasisSumLtWidthGrow0Shrink0Item2Grow2Test01()",
      "2054": "FlexUtilTest::::differentBasisSumLtWidthGrow0Shrink0Item2Grow2Test01()",
      "2055": "FlexUtilTest::::differentBasisSumLtWidthGrow0Shrink0Item2Grow2Test01()",
      "2056": "FlexUtilTest::::differentBasisSumLtWidthGrow0Shrink0Item2Grow2Test01()",
      "2057": "FlexUtilTest::::differentBasisSumLtWidthGrow0Shrink0Item2Grow2Test01()",
      "2058": "FlexUtilTest::::differentBasisSumLtWidthGrow0Shrink0Item2Grow2Test01()",
      "2059": "FlexUtilTest::::differentBasisSumLtWidthGrow0Shrink0Item2Grow2Test01()",
      "2061": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink0Test01()",
      "2062": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink0Test01()",
      "2063": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink0Test01()",
      "2064": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink0Test01()",
      "2065": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink0Test01()",
      "2066": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink0Test01()",
      "2067": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink0Test01()",
      "2068": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink0Test01()",
      "2069": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink0Test01()",
      "2070": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink0Test01()",
      "2071": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink0Test01()",
      "2072": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink0Test01()",
      "2073": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink0Test01()",
      "2074": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink0Test01()",
      "2075": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink0Test01()",
      "2076": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink0Test01()",
      "2077": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink0Test01()",
      "2078": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink0Test01()",
      "2079": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink0Test01()",
      "2080": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink0Test01()",
      "2081": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink0Test01()",
      "2082": "FlexUtilTest::::differentBasisSumLtWidthGrow1Shrink0Test01()",
      "2084": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink1Test01()",
      "2085": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink1Test01()",
      "2086": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink1Test01()",
      "2087": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink1Test01()",
      "2088": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink1Test01()",
      "2089": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink1Test01()",
      "2090": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink1Test01()",
      "2091": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink1Test01()",
      "2092": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink1Test01()",
      "2093": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink1Test01()",
      "2094": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink1Test01()",
      "2095": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink1Test01()",
      "2096": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink1Test01()",
      "2097": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink1Test01()",
      "2098": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink1Test01()",
      "2099": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink1Test01()",
      "2100": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink1Test01()",
      "2101": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink1Test01()",
      "2102": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink1Test01()",
      "2103": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink1Test01()",
      "2104": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink1Test01()",
      "2105": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink1Test01()",
      "2107": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink05Test01()",
      "2108": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink05Test01()",
      "2109": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink05Test01()",
      "2110": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink05Test01()",
      "2111": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink05Test01()",
      "2112": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink05Test01()",
      "2113": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink05Test01()",
      "2114": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink05Test01()",
      "2115": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink05Test01()",
      "2116": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink05Test01()",
      "2117": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink05Test01()",
      "2118": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink05Test01()",
      "2119": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink05Test01()",
      "2120": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink05Test01()",
      "2121": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink05Test01()",
      "2122": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink05Test01()",
      "2123": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink05Test01()",
      "2124": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink05Test01()",
      "2125": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink05Test01()",
      "2126": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink05Test01()",
      "2127": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink05Test01()",
      "2128": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink05Test01()",
      "2130": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink01Test01()",
      "2131": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink01Test01()",
      "2132": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink01Test01()",
      "2133": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink01Test01()",
      "2134": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink01Test01()",
      "2135": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink01Test01()",
      "2136": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink01Test01()",
      "2137": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink01Test01()",
      "2138": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink01Test01()",
      "2139": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink01Test01()",
      "2140": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink01Test01()",
      "2141": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink01Test01()",
      "2142": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink01Test01()",
      "2143": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink01Test01()",
      "2144": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink01Test01()",
      "2145": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink01Test01()",
      "2146": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink01Test01()",
      "2147": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink01Test01()",
      "2148": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink01Test01()",
      "2149": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink01Test01()",
      "2150": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink01Test01()",
      "2151": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink01Test01()",
      "2153": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink5Test01()",
      "2154": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink5Test01()",
      "2155": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink5Test01()",
      "2156": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink5Test01()",
      "2157": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink5Test01()",
      "2158": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink5Test01()",
      "2159": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink5Test01()",
      "2160": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink5Test01()",
      "2161": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink5Test01()",
      "2162": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink5Test01()",
      "2163": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink5Test01()",
      "2164": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink5Test01()",
      "2165": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink5Test01()",
      "2166": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink5Test01()",
      "2167": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink5Test01()",
      "2168": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink5Test01()",
      "2169": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink5Test01()",
      "2170": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink5Test01()",
      "2171": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink5Test01()",
      "2172": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink5Test01()",
      "2173": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink5Test01()",
      "2174": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink5Test01()",
      "2176": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Test01()",
      "2177": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Test01()",
      "2178": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Test01()",
      "2179": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Test01()",
      "2180": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Test01()",
      "2181": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Test01()",
      "2182": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Test01()",
      "2183": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Test01()",
      "2184": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Test01()",
      "2185": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Test01()",
      "2186": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Test01()",
      "2187": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Test01()",
      "2188": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Test01()",
      "2189": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Test01()",
      "2190": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Test01()",
      "2191": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Test01()",
      "2192": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Test01()",
      "2193": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Test01()",
      "2194": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Test01()",
      "2195": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Test01()",
      "2196": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Test01()",
      "2197": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Test01()",
      "2199": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink50Test01()",
      "2200": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink50Test01()",
      "2201": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink50Test01()",
      "2202": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink50Test01()",
      "2203": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink50Test01()",
      "2204": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink50Test01()",
      "2205": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink50Test01()",
      "2206": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink50Test01()",
      "2207": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink50Test01()",
      "2208": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink50Test01()",
      "2209": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink50Test01()",
      "2210": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink50Test01()",
      "2211": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink50Test01()",
      "2212": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink50Test01()",
      "2213": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink50Test01()",
      "2214": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink50Test01()",
      "2215": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink50Test01()",
      "2216": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink50Test01()",
      "2217": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink50Test01()",
      "2218": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink50Test01()",
      "2219": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink50Test01()",
      "2220": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink50Test01()",
      "2222": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink5Test01()",
      "2223": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink5Test01()",
      "2224": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink5Test01()",
      "2225": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink5Test01()",
      "2226": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink5Test01()",
      "2227": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink5Test01()",
      "2228": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink5Test01()",
      "2229": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink5Test01()",
      "2230": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink5Test01()",
      "2231": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink5Test01()",
      "2232": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink5Test01()",
      "2233": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink5Test01()",
      "2234": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink5Test01()",
      "2235": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink5Test01()",
      "2236": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink5Test01()",
      "2237": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink5Test01()",
      "2238": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink5Test01()",
      "2239": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink5Test01()",
      "2240": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink5Test01()",
      "2241": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink5Test01()",
      "2242": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink5Test01()",
      "2243": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink5Test01()",
      "2245": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink0Test01()",
      "2246": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink0Test01()",
      "2247": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink0Test01()",
      "2248": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink0Test01()",
      "2249": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink0Test01()",
      "2250": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink0Test01()",
      "2251": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink0Test01()",
      "2252": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink0Test01()",
      "2253": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink0Test01()",
      "2254": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink0Test01()",
      "2255": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink0Test01()",
      "2256": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink0Test01()",
      "2257": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink0Test01()",
      "2258": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink0Test01()",
      "2259": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink0Test01()",
      "2260": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink0Test01()",
      "2261": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink0Test01()",
      "2262": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink0Test01()",
      "2263": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink0Test01()",
      "2264": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink0Test01()",
      "2265": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink0Test01()",
      "2266": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink0Test01()",
      "2268": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink0Test01()",
      "2269": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink0Test01()",
      "2270": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink0Test01()",
      "2271": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink0Test01()",
      "2272": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink0Test01()",
      "2273": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink0Test01()",
      "2274": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink0Test01()",
      "2275": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink0Test01()",
      "2276": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink0Test01()",
      "2277": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink0Test01()",
      "2278": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink0Test01()",
      "2279": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink0Test01()",
      "2280": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink0Test01()",
      "2281": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink0Test01()",
      "2282": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink0Test01()",
      "2283": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink0Test01()",
      "2284": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink0Test01()",
      "2285": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink0Test01()",
      "2286": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink0Test01()",
      "2287": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink0Test01()",
      "2288": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink0Test01()",
      "2289": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink0Test01()",
      "2291": "FlexUtilTest::::basis250SumGtWidthGrow0Shrink1WrapTest01()",
      "2292": "FlexUtilTest::::basis250SumGtWidthGrow0Shrink1WrapTest01()",
      "2293": "FlexUtilTest::::basis250SumGtWidthGrow0Shrink1WrapTest01()",
      "2294": "FlexUtilTest::::basis250SumGtWidthGrow0Shrink1WrapTest01()",
      "2295": "FlexUtilTest::::basis250SumGtWidthGrow0Shrink1WrapTest01()",
      "2296": "FlexUtilTest::::basis250SumGtWidthGrow0Shrink1WrapTest01()",
      "2297": "FlexUtilTest::::basis250SumGtWidthGrow0Shrink1WrapTest01()",
      "2298": "FlexUtilTest::::basis250SumGtWidthGrow0Shrink1WrapTest01()",
      "2299": "FlexUtilTest::::basis250SumGtWidthGrow0Shrink1WrapTest01()",
      "2300": "FlexUtilTest::::basis250SumGtWidthGrow0Shrink1WrapTest01()",
      "2301": "FlexUtilTest::::basis250SumGtWidthGrow0Shrink1WrapTest01()",
      "2302": "FlexUtilTest::::basis250SumGtWidthGrow0Shrink1WrapTest01()",
      "2303": "FlexUtilTest::::basis250SumGtWidthGrow0Shrink1WrapTest01()",
      "2304": "FlexUtilTest::::basis250SumGtWidthGrow0Shrink1WrapTest01()",
      "2305": "FlexUtilTest::::basis250SumGtWidthGrow0Shrink1WrapTest01()",
      "2306": "FlexUtilTest::::basis250SumGtWidthGrow0Shrink1WrapTest01()",
      "2307": "FlexUtilTest::::basis250SumGtWidthGrow0Shrink1WrapTest01()",
      "2308": "FlexUtilTest::::basis250SumGtWidthGrow0Shrink1WrapTest01()",
      "2309": "FlexUtilTest::::basis250SumGtWidthGrow0Shrink1WrapTest01()",
      "2310": "FlexUtilTest::::basis250SumGtWidthGrow0Shrink1WrapTest01()",
      "2311": "FlexUtilTest::::basis250SumGtWidthGrow0Shrink1WrapTest01()",
      "2313": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink1WrapTest01()",
      "2314": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink1WrapTest01()",
      "2315": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink1WrapTest01()",
      "2316": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink1WrapTest01()",
      "2317": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink1WrapTest01()",
      "2318": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink1WrapTest01()",
      "2319": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink1WrapTest01()",
      "2320": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink1WrapTest01()",
      "2321": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink1WrapTest01()",
      "2322": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink1WrapTest01()",
      "2323": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink1WrapTest01()",
      "2324": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink1WrapTest01()",
      "2325": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink1WrapTest01()",
      "2326": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink1WrapTest01()",
      "2327": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink1WrapTest01()",
      "2328": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink1WrapTest01()",
      "2329": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink1WrapTest01()",
      "2330": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink1WrapTest01()",
      "2331": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink1WrapTest01()",
      "2332": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink1WrapTest01()",
      "2333": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink1WrapTest01()",
      "2334": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink1WrapTest01()",
      "2335": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink1WrapTest01()",
      "2337": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink05WrapTest01()",
      "2338": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink05WrapTest01()",
      "2339": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink05WrapTest01()",
      "2340": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink05WrapTest01()",
      "2341": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink05WrapTest01()",
      "2342": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink05WrapTest01()",
      "2343": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink05WrapTest01()",
      "2344": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink05WrapTest01()",
      "2345": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink05WrapTest01()",
      "2346": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink05WrapTest01()",
      "2347": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink05WrapTest01()",
      "2348": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink05WrapTest01()",
      "2349": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink05WrapTest01()",
      "2350": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink05WrapTest01()",
      "2351": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink05WrapTest01()",
      "2352": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink05WrapTest01()",
      "2353": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink05WrapTest01()",
      "2354": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink05WrapTest01()",
      "2355": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink05WrapTest01()",
      "2356": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink05WrapTest01()",
      "2357": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink05WrapTest01()",
      "2358": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink05WrapTest01()",
      "2359": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink05WrapTest01()",
      "2361": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink01WrapTest01()",
      "2362": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink01WrapTest01()",
      "2363": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink01WrapTest01()",
      "2364": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink01WrapTest01()",
      "2365": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink01WrapTest01()",
      "2366": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink01WrapTest01()",
      "2367": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink01WrapTest01()",
      "2368": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink01WrapTest01()",
      "2369": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink01WrapTest01()",
      "2370": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink01WrapTest01()",
      "2371": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink01WrapTest01()",
      "2372": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink01WrapTest01()",
      "2373": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink01WrapTest01()",
      "2374": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink01WrapTest01()",
      "2375": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink01WrapTest01()",
      "2376": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink01WrapTest01()",
      "2377": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink01WrapTest01()",
      "2378": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink01WrapTest01()",
      "2379": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink01WrapTest01()",
      "2380": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink01WrapTest01()",
      "2381": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink01WrapTest01()",
      "2382": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink01WrapTest01()",
      "2383": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink01WrapTest01()",
      "2385": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink5WrapTest01()",
      "2386": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink5WrapTest01()",
      "2387": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink5WrapTest01()",
      "2388": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink5WrapTest01()",
      "2389": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink5WrapTest01()",
      "2390": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink5WrapTest01()",
      "2391": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink5WrapTest01()",
      "2392": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink5WrapTest01()",
      "2393": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink5WrapTest01()",
      "2394": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink5WrapTest01()",
      "2395": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink5WrapTest01()",
      "2396": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink5WrapTest01()",
      "2397": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink5WrapTest01()",
      "2398": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink5WrapTest01()",
      "2399": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink5WrapTest01()",
      "2400": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink5WrapTest01()",
      "2401": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink5WrapTest01()",
      "2402": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink5WrapTest01()",
      "2403": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink5WrapTest01()",
      "2404": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink5WrapTest01()",
      "2405": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink5WrapTest01()",
      "2406": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink5WrapTest01()",
      "2407": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink5WrapTest01()",
      "2409": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1WrapTest01()",
      "2410": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1WrapTest01()",
      "2411": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1WrapTest01()",
      "2412": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1WrapTest01()",
      "2413": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1WrapTest01()",
      "2414": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1WrapTest01()",
      "2415": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1WrapTest01()",
      "2416": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1WrapTest01()",
      "2417": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1WrapTest01()",
      "2418": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1WrapTest01()",
      "2419": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1WrapTest01()",
      "2420": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1WrapTest01()",
      "2421": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1WrapTest01()",
      "2422": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1WrapTest01()",
      "2423": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1WrapTest01()",
      "2424": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1WrapTest01()",
      "2425": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1WrapTest01()",
      "2426": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1WrapTest01()",
      "2427": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1WrapTest01()",
      "2428": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1WrapTest01()",
      "2429": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1WrapTest01()",
      "2430": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1WrapTest01()",
      "2431": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1WrapTest01()",
      "2433": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink50WrapTest01()",
      "2434": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink50WrapTest01()",
      "2435": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink50WrapTest01()",
      "2436": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink50WrapTest01()",
      "2437": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink50WrapTest01()",
      "2438": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink50WrapTest01()",
      "2439": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink50WrapTest01()",
      "2440": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink50WrapTest01()",
      "2441": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink50WrapTest01()",
      "2442": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink50WrapTest01()",
      "2443": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink50WrapTest01()",
      "2444": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink50WrapTest01()",
      "2445": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink50WrapTest01()",
      "2446": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink50WrapTest01()",
      "2447": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink50WrapTest01()",
      "2448": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink50WrapTest01()",
      "2449": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink50WrapTest01()",
      "2450": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink50WrapTest01()",
      "2451": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink50WrapTest01()",
      "2452": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink50WrapTest01()",
      "2453": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink50WrapTest01()",
      "2454": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink50WrapTest01()",
      "2455": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink50WrapTest01()",
      "2457": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink5WrapTest01()",
      "2458": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink5WrapTest01()",
      "2459": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink5WrapTest01()",
      "2460": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink5WrapTest01()",
      "2461": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink5WrapTest01()",
      "2462": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink5WrapTest01()",
      "2463": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink5WrapTest01()",
      "2464": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink5WrapTest01()",
      "2465": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink5WrapTest01()",
      "2466": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink5WrapTest01()",
      "2467": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink5WrapTest01()",
      "2468": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink5WrapTest01()",
      "2469": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink5WrapTest01()",
      "2470": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink5WrapTest01()",
      "2471": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink5WrapTest01()",
      "2472": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink5WrapTest01()",
      "2473": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink5WrapTest01()",
      "2474": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink5WrapTest01()",
      "2475": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink5WrapTest01()",
      "2476": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink5WrapTest01()",
      "2477": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink5WrapTest01()",
      "2478": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink5WrapTest01()",
      "2479": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink1Item3Shrink5WrapTest01()",
      "2481": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink0WrapTest01()",
      "2482": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink0WrapTest01()",
      "2483": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink0WrapTest01()",
      "2484": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink0WrapTest01()",
      "2485": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink0WrapTest01()",
      "2486": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink0WrapTest01()",
      "2487": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink0WrapTest01()",
      "2488": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink0WrapTest01()",
      "2489": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink0WrapTest01()",
      "2490": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink0WrapTest01()",
      "2491": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink0WrapTest01()",
      "2492": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink0WrapTest01()",
      "2493": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink0WrapTest01()",
      "2494": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink0WrapTest01()",
      "2495": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink0WrapTest01()",
      "2496": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink0WrapTest01()",
      "2497": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink0WrapTest01()",
      "2498": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink0WrapTest01()",
      "2499": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink0WrapTest01()",
      "2500": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink0WrapTest01()",
      "2501": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink0WrapTest01()",
      "2502": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink0WrapTest01()",
      "2503": "FlexUtilTest::::differentBasisSumGtWidthGrow0Shrink0WrapTest01()",
      "2505": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink0WrapTest01()",
      "2506": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink0WrapTest01()",
      "2507": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink0WrapTest01()",
      "2508": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink0WrapTest01()",
      "2509": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink0WrapTest01()",
      "2510": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink0WrapTest01()",
      "2511": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink0WrapTest01()",
      "2512": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink0WrapTest01()",
      "2513": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink0WrapTest01()",
      "2514": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink0WrapTest01()",
      "2515": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink0WrapTest01()",
      "2516": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink0WrapTest01()",
      "2517": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink0WrapTest01()",
      "2518": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink0WrapTest01()",
      "2519": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink0WrapTest01()",
      "2520": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink0WrapTest01()",
      "2521": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink0WrapTest01()",
      "2522": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink0WrapTest01()",
      "2523": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink0WrapTest01()",
      "2524": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink0WrapTest01()",
      "2525": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink0WrapTest01()",
      "2526": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink0WrapTest01()",
      "2527": "FlexUtilTest::::differentBasisSumGtWidthGrow1Shrink0WrapTest01()",
      "2529": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow0Shrink1Test01()",
      "2530": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow0Shrink1Test01()",
      "2531": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow0Shrink1Test01()",
      "2532": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow0Shrink1Test01()",
      "2533": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow0Shrink1Test01()",
      "2534": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow0Shrink1Test01()",
      "2535": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow0Shrink1Test01()",
      "2536": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow0Shrink1Test01()",
      "2537": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow0Shrink1Test01()",
      "2538": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow0Shrink1Test01()",
      "2539": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow0Shrink1Test01()",
      "2540": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow0Shrink1Test01()",
      "2541": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow0Shrink1Test01()",
      "2542": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow0Shrink1Test01()",
      "2543": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow0Shrink1Test01()",
      "2544": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow0Shrink1Test01()",
      "2545": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow0Shrink1Test01()",
      "2546": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow0Shrink1Test01()",
      "2547": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow0Shrink1Test01()",
      "2548": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow0Shrink1Test01()",
      "2549": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow0Shrink1Test01()",
      "2550": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow0Shrink1Test01()",
      "2552": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow1Shrink1Test01()",
      "2553": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow1Shrink1Test01()",
      "2554": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow1Shrink1Test01()",
      "2555": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow1Shrink1Test01()",
      "2556": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow1Shrink1Test01()",
      "2557": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow1Shrink1Test01()",
      "2558": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow1Shrink1Test01()",
      "2559": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow1Shrink1Test01()",
      "2560": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow1Shrink1Test01()",
      "2561": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow1Shrink1Test01()",
      "2562": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow1Shrink1Test01()",
      "2563": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow1Shrink1Test01()",
      "2564": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow1Shrink1Test01()",
      "2565": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow1Shrink1Test01()",
      "2566": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow1Shrink1Test01()",
      "2567": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow1Shrink1Test01()",
      "2568": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow1Shrink1Test01()",
      "2569": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow1Shrink1Test01()",
      "2570": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow1Shrink1Test01()",
      "2571": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow1Shrink1Test01()",
      "2572": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow1Shrink1Test01()",
      "2573": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow1Shrink1Test01()",
      "2575": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow0Shrink0Test01()",
      "2576": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow0Shrink0Test01()",
      "2577": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow0Shrink0Test01()",
      "2578": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow0Shrink0Test01()",
      "2579": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow0Shrink0Test01()",
      "2580": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow0Shrink0Test01()",
      "2581": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow0Shrink0Test01()",
      "2582": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow0Shrink0Test01()",
      "2583": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow0Shrink0Test01()",
      "2584": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow0Shrink0Test01()",
      "2585": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow0Shrink0Test01()",
      "2586": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow0Shrink0Test01()",
      "2587": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow0Shrink0Test01()",
      "2588": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow0Shrink0Test01()",
      "2589": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow0Shrink0Test01()",
      "2590": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow0Shrink0Test01()",
      "2591": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow0Shrink0Test01()",
      "2592": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow0Shrink0Test01()",
      "2593": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow0Shrink0Test01()",
      "2594": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow0Shrink0Test01()",
      "2595": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow0Shrink0Test01()",
      "2596": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow0Shrink0Test01()",
      "2598": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow0Shrink0Item2Grow2Test01()",
      "2599": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow0Shrink0Item2Grow2Test01()",
      "2600": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow0Shrink0Item2Grow2Test01()",
      "2601": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow0Shrink0Item2Grow2Test01()",
      "2602": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow0Shrink0Item2Grow2Test01()",
      "2603": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow0Shrink0Item2Grow2Test01()",
      "2604": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow0Shrink0Item2Grow2Test01()",
      "2605": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow0Shrink0Item2Grow2Test01()",
      "2606": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow0Shrink0Item2Grow2Test01()",
      "2607": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow0Shrink0Item2Grow2Test01()",
      "2608": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow0Shrink0Item2Grow2Test01()",
      "2609": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow0Shrink0Item2Grow2Test01()",
      "2610": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow0Shrink0Item2Grow2Test01()",
      "2611": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow0Shrink0Item2Grow2Test01()",
      "2612": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow0Shrink0Item2Grow2Test01()",
      "2613": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow0Shrink0Item2Grow2Test01()",
      "2614": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow0Shrink0Item2Grow2Test01()",
      "2615": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow0Shrink0Item2Grow2Test01()",
      "2616": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow0Shrink0Item2Grow2Test01()",
      "2617": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow0Shrink0Item2Grow2Test01()",
      "2618": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow0Shrink0Item2Grow2Test01()",
      "2619": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow0Shrink0Item2Grow2Test01()",
      "2621": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow1Shrink0Test01()",
      "2622": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow1Shrink0Test01()",
      "2623": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow1Shrink0Test01()",
      "2624": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow1Shrink0Test01()",
      "2625": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow1Shrink0Test01()",
      "2626": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow1Shrink0Test01()",
      "2627": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow1Shrink0Test01()",
      "2628": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow1Shrink0Test01()",
      "2629": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow1Shrink0Test01()",
      "2630": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow1Shrink0Test01()",
      "2631": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow1Shrink0Test01()",
      "2632": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow1Shrink0Test01()",
      "2633": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow1Shrink0Test01()",
      "2634": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow1Shrink0Test01()",
      "2635": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow1Shrink0Test01()",
      "2636": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow1Shrink0Test01()",
      "2637": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow1Shrink0Test01()",
      "2638": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow1Shrink0Test01()",
      "2639": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow1Shrink0Test01()",
      "2640": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow1Shrink0Test01()",
      "2641": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow1Shrink0Test01()",
      "2642": "FlexUtilTest::::differentBasisPercentSumLtWidthGrow1Shrink0Test01()",
      "2644": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink1Test01()",
      "2645": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink1Test01()",
      "2646": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink1Test01()",
      "2647": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink1Test01()",
      "2648": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink1Test01()",
      "2649": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink1Test01()",
      "2650": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink1Test01()",
      "2651": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink1Test01()",
      "2652": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink1Test01()",
      "2653": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink1Test01()",
      "2654": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink1Test01()",
      "2655": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink1Test01()",
      "2656": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink1Test01()",
      "2657": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink1Test01()",
      "2658": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink1Test01()",
      "2659": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink1Test01()",
      "2660": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink1Test01()",
      "2661": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink1Test01()",
      "2662": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink1Test01()",
      "2663": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink1Test01()",
      "2664": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink1Test01()",
      "2665": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink1Test01()",
      "2667": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink05Test01()",
      "2668": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink05Test01()",
      "2669": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink05Test01()",
      "2670": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink05Test01()",
      "2671": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink05Test01()",
      "2672": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink05Test01()",
      "2673": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink05Test01()",
      "2674": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink05Test01()",
      "2675": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink05Test01()",
      "2676": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink05Test01()",
      "2677": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink05Test01()",
      "2678": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink05Test01()",
      "2679": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink05Test01()",
      "2680": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink05Test01()",
      "2681": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink05Test01()",
      "2682": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink05Test01()",
      "2683": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink05Test01()",
      "2684": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink05Test01()",
      "2685": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink05Test01()",
      "2686": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink05Test01()",
      "2687": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink05Test01()",
      "2688": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink05Test01()",
      "2690": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink01Test01()",
      "2691": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink01Test01()",
      "2692": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink01Test01()",
      "2693": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink01Test01()",
      "2694": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink01Test01()",
      "2695": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink01Test01()",
      "2696": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink01Test01()",
      "2697": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink01Test01()",
      "2698": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink01Test01()",
      "2699": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink01Test01()",
      "2700": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink01Test01()",
      "2701": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink01Test01()",
      "2702": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink01Test01()",
      "2703": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink01Test01()",
      "2704": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink01Test01()",
      "2705": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink01Test01()",
      "2706": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink01Test01()",
      "2707": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink01Test01()",
      "2708": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink01Test01()",
      "2709": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink01Test01()",
      "2710": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink01Test01()",
      "2711": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink01Test01()",
      "2713": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink5Test01()",
      "2714": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink5Test01()",
      "2715": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink5Test01()",
      "2716": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink5Test01()",
      "2717": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink5Test01()",
      "2718": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink5Test01()",
      "2719": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink5Test01()",
      "2720": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink5Test01()",
      "2721": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink5Test01()",
      "2722": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink5Test01()",
      "2723": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink5Test01()",
      "2724": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink5Test01()",
      "2725": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink5Test01()",
      "2726": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink5Test01()",
      "2727": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink5Test01()",
      "2728": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink5Test01()",
      "2729": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink5Test01()",
      "2730": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink5Test01()",
      "2731": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink5Test01()",
      "2732": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink5Test01()",
      "2733": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink5Test01()",
      "2734": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink5Test01()",
      "2736": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink1Test01()",
      "2737": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink1Test01()",
      "2738": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink1Test01()",
      "2739": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink1Test01()",
      "2740": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink1Test01()",
      "2741": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink1Test01()",
      "2742": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink1Test01()",
      "2743": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink1Test01()",
      "2744": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink1Test01()",
      "2745": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink1Test01()",
      "2746": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink1Test01()",
      "2747": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink1Test01()",
      "2748": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink1Test01()",
      "2749": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink1Test01()",
      "2750": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink1Test01()",
      "2751": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink1Test01()",
      "2752": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink1Test01()",
      "2753": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink1Test01()",
      "2754": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink1Test01()",
      "2755": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink1Test01()",
      "2756": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink1Test01()",
      "2757": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink1Test01()",
      "2759": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink1Item3Shrink50Test01()",
      "2760": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink1Item3Shrink50Test01()",
      "2761": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink1Item3Shrink50Test01()",
      "2762": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink1Item3Shrink50Test01()",
      "2763": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink1Item3Shrink50Test01()",
      "2764": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink1Item3Shrink50Test01()",
      "2765": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink1Item3Shrink50Test01()",
      "2766": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink1Item3Shrink50Test01()",
      "2767": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink1Item3Shrink50Test01()",
      "2768": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink1Item3Shrink50Test01()",
      "2769": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink1Item3Shrink50Test01()",
      "2770": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink1Item3Shrink50Test01()",
      "2771": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink1Item3Shrink50Test01()",
      "2772": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink1Item3Shrink50Test01()",
      "2773": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink1Item3Shrink50Test01()",
      "2774": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink1Item3Shrink50Test01()",
      "2775": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink1Item3Shrink50Test01()",
      "2776": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink1Item3Shrink50Test01()",
      "2777": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink1Item3Shrink50Test01()",
      "2778": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink1Item3Shrink50Test01()",
      "2779": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink1Item3Shrink50Test01()",
      "2780": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink1Item3Shrink50Test01()",
      "2782": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink1Item3Shrink5Test01()",
      "2783": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink1Item3Shrink5Test01()",
      "2784": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink1Item3Shrink5Test01()",
      "2785": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink1Item3Shrink5Test01()",
      "2786": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink1Item3Shrink5Test01()",
      "2787": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink1Item3Shrink5Test01()",
      "2788": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink1Item3Shrink5Test01()",
      "2789": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink1Item3Shrink5Test01()",
      "2790": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink1Item3Shrink5Test01()",
      "2791": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink1Item3Shrink5Test01()",
      "2792": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink1Item3Shrink5Test01()",
      "2793": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink1Item3Shrink5Test01()",
      "2794": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink1Item3Shrink5Test01()",
      "2795": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink1Item3Shrink5Test01()",
      "2796": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink1Item3Shrink5Test01()",
      "2797": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink1Item3Shrink5Test01()",
      "2798": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink1Item3Shrink5Test01()",
      "2799": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink1Item3Shrink5Test01()",
      "2800": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink1Item3Shrink5Test01()",
      "2801": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink1Item3Shrink5Test01()",
      "2802": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink1Item3Shrink5Test01()",
      "2803": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink1Item3Shrink5Test01()",
      "2805": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink0Test01()",
      "2806": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink0Test01()",
      "2807": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink0Test01()",
      "2808": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink0Test01()",
      "2809": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink0Test01()",
      "2810": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink0Test01()",
      "2811": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink0Test01()",
      "2812": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink0Test01()",
      "2813": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink0Test01()",
      "2814": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink0Test01()",
      "2815": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink0Test01()",
      "2816": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink0Test01()",
      "2817": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink0Test01()",
      "2818": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink0Test01()",
      "2819": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink0Test01()",
      "2820": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink0Test01()",
      "2821": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink0Test01()",
      "2822": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink0Test01()",
      "2823": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink0Test01()",
      "2824": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink0Test01()",
      "2825": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink0Test01()",
      "2826": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow0Shrink0Test01()",
      "2828": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink0Test01()",
      "2829": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink0Test01()",
      "2830": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink0Test01()",
      "2831": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink0Test01()",
      "2832": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink0Test01()",
      "2833": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink0Test01()",
      "2834": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink0Test01()",
      "2835": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink0Test01()",
      "2836": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink0Test01()",
      "2837": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink0Test01()",
      "2838": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink0Test01()",
      "2839": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink0Test01()",
      "2840": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink0Test01()",
      "2841": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink0Test01()",
      "2842": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink0Test01()",
      "2843": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink0Test01()",
      "2844": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink0Test01()",
      "2845": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink0Test01()",
      "2846": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink0Test01()",
      "2847": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink0Test01()",
      "2848": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink0Test01()",
      "2849": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink0Test01()",
      "2850": "FlexUtilTest::::differentBasisPercentSumGtWidthGrow1Shrink0Test01()",
      "2852": "FlexUtilTest::::calculateMinContentWithMinWidthTest()",
      "2853": "FlexUtilTest::::calculateMinContentWithMinWidthTest()",
      "2854": "FlexUtilTest::::calculateMinContentWithMinWidthTest()",
      "2855": "FlexUtilTest::::calculateMinContentWithMinWidthTest()",
      "2856": "FlexUtilTest::::calculateMinContentWithMinWidthTest()",
      "2857": "FlexUtilTest::::calculateMinContentWithMinWidthTest()",
      "2858": "FlexUtilTest::::calculateMinContentWithMinWidthTest()",
      "2859": "FlexUtilTest::::calculateMinContentWithMinWidthTest()",
      "2860": "FlexUtilTest::::calculateMinContentWithMinWidthTest()",
      "2861": "FlexUtilTest::::calculateMinContentWithMinWidthTest()",
      "2862": "FlexUtilTest::::calculateMinContentWithMinWidthTest()",
      "2863": "FlexUtilTest::::calculateMinContentWithMinWidthTest()",
      "2864": "FlexUtilTest::::calculateMinContentWithMinWidthTest()",
      "2865": "FlexUtilTest::::calculateMinContentWithMinWidthTest()",
      "2866": "FlexUtilTest::::calculateMinContentWithMinWidthTest()",
      "2868": "FlexUtilTest::::calculateMinContentForDivWithContentTest()",
      "2869": "FlexUtilTest::::calculateMinContentForDivWithContentTest()",
      "2870": "FlexUtilTest::::calculateMinContentForDivWithContentTest()",
      "2871": "FlexUtilTest::::calculateMinContentForDivWithContentTest()",
      "2872": "FlexUtilTest::::calculateMinContentForDivWithContentTest()",
      "2873": "FlexUtilTest::::calculateMinContentForDivWithContentTest()",
      "2874": "FlexUtilTest::::calculateMinContentForDivWithContentTest()",
      "2875": "FlexUtilTest::::calculateMinContentForDivWithContentTest()",
      "2876": "FlexUtilTest::::calculateMinContentForDivWithContentTest()",
      "2878": "FlexUtilTest::::calculateMinContentForDivWithWidthTest()",
      "2879": "FlexUtilTest::::calculateMinContentForDivWithWidthTest()",
      "2880": "FlexUtilTest::::calculateMinContentForDivWithWidthTest()",
      "2881": "FlexUtilTest::::calculateMinContentForDivWithWidthTest()",
      "2882": "FlexUtilTest::::calculateMinContentForDivWithWidthTest()",
      "2883": "FlexUtilTest::::calculateMinContentForDivWithWidthTest()",
      "2884": "FlexUtilTest::::calculateMinContentForDivWithWidthTest()",
      "2885": "FlexUtilTest::::calculateMinContentForDivWithWidthTest()",
      "2887": "FlexUtilTest::::calculateMinContentForDivWithWidthAndContentTest()",
      "2888": "FlexUtilTest::::calculateMinContentForDivWithWidthAndContentTest()",
      "2889": "FlexUtilTest::::calculateMinContentForDivWithWidthAndContentTest()",
      "2890": "FlexUtilTest::::calculateMinContentForDivWithWidthAndContentTest()",
      "2891": "FlexUtilTest::::calculateMinContentForDivWithWidthAndContentTest()",
      "2892": "FlexUtilTest::::calculateMinContentForDivWithWidthAndContentTest()",
      "2893": "FlexUtilTest::::calculateMinContentForDivWithWidthAndContentTest()",
      "2894": "FlexUtilTest::::calculateMinContentForDivWithWidthAndContentTest()",
      "2895": "FlexUtilTest::::calculateMinContentForDivWithWidthAndContentTest()",
      "2896": "FlexUtilTest::::calculateMinContentForDivWithWidthAndContentTest()",
      "2897": "FlexUtilTest::::calculateMinContentForDivWithWidthAndContentTest()",
      "2898": "FlexUtilTest::::calculateMinContentForDivWithWidthAndContentTest()",
      "2899": "FlexUtilTest::::calculateMinContentForDivWithWidthAndContentTest()",
      "2900": "FlexUtilTest::::calculateMinContentForDivWithWidthAndContentTest()",
      "2901": "FlexUtilTest::::calculateMinContentForDivWithWidthAndContentTest()",
      "2902": "FlexUtilTest::::calculateMinContentForDivWithWidthAndContentTest()",
      "2903": "FlexUtilTest::::calculateMinContentForDivWithWidthAndContentTest()",
      "2904": "FlexUtilTest::::calculateMinContentForDivWithWidthAndContentTest()",
      "2906": "FlexUtilTest::::calculateMinContentForDivWithWidthMaxWidthAndContentTest()",
      "2907": "FlexUtilTest::::calculateMinContentForDivWithWidthMaxWidthAndContentTest()",
      "2908": "FlexUtilTest::::calculateMinContentForDivWithWidthMaxWidthAndContentTest()",
      "2909": "FlexUtilTest::::calculateMinContentForDivWithWidthMaxWidthAndContentTest()",
      "2910": "FlexUtilTest::::calculateMinContentForDivWithWidthMaxWidthAndContentTest()",
      "2911": "FlexUtilTest::::calculateMinContentForDivWithWidthMaxWidthAndContentTest()",
      "2912": "FlexUtilTest::::calculateMinContentForDivWithWidthMaxWidthAndContentTest()",
      "2913": "FlexUtilTest::::calculateMinContentForDivWithWidthMaxWidthAndContentTest()",
      "2914": "FlexUtilTest::::calculateMinContentForDivWithWidthMaxWidthAndContentTest()",
      "2915": "FlexUtilTest::::calculateMinContentForDivWithWidthMaxWidthAndContentTest()",
      "2916": "FlexUtilTest::::calculateMinContentForDivWithWidthMaxWidthAndContentTest()",
      "2917": "FlexUtilTest::::calculateMinContentForDivWithWidthMaxWidthAndContentTest()",
      "2918": "FlexUtilTest::::calculateMinContentForDivWithWidthMaxWidthAndContentTest()",
      "2919": "FlexUtilTest::::calculateMinContentForDivWithWidthMaxWidthAndContentTest()",
      "2920": "FlexUtilTest::::calculateMinContentForDivWithWidthMaxWidthAndContentTest()",
      "2921": "FlexUtilTest::::calculateMinContentForDivWithWidthMaxWidthAndContentTest()",
      "2922": "FlexUtilTest::::calculateMinContentForDivWithWidthMaxWidthAndContentTest()",
      "2923": "FlexUtilTest::::calculateMinContentForDivWithWidthMaxWidthAndContentTest()",
      "2924": "FlexUtilTest::::calculateMinContentForDivWithWidthMaxWidthAndContentTest()",
      "2925": "FlexUtilTest::::calculateMinContentForDivWithWidthMaxWidthAndContentTest()",
      "2927": "FlexUtilTest::::calculateMinContentForImageTest()",
      "2928": "FlexUtilTest::::calculateMinContentForImageTest()",
      "2929": "FlexUtilTest::::calculateMinContentForImageTest()",
      "2930": "FlexUtilTest::::calculateMinContentForImageTest()",
      "2931": "FlexUtilTest::::calculateMinContentForImageTest()",
      "2932": "FlexUtilTest::::calculateMinContentForImageTest()",
      "2933": "FlexUtilTest::::calculateMinContentForImageTest()",
      "2934": "FlexUtilTest::::calculateMinContentForImageTest()",
      "2936": "FlexUtilTest::::calculateMinContentForImageWithHeightTest()",
      "2937": "FlexUtilTest::::calculateMinContentForImageWithHeightTest()",
      "2938": "FlexUtilTest::::calculateMinContentForImageWithHeightTest()",
      "2939": "FlexUtilTest::::calculateMinContentForImageWithHeightTest()",
      "2940": "FlexUtilTest::::calculateMinContentForImageWithHeightTest()",
      "2941": "FlexUtilTest::::calculateMinContentForImageWithHeightTest()",
      "2942": "FlexUtilTest::::calculateMinContentForImageWithHeightTest()",
      "2943": "FlexUtilTest::::calculateMinContentForImageWithHeightTest()",
      "2944": "FlexUtilTest::::calculateMinContentForImageWithHeightTest()",
      "2945": "FlexUtilTest::::calculateMinContentForImageWithHeightTest()",
      "2946": "FlexUtilTest::::calculateMinContentForImageWithHeightTest()",
      "2947": "FlexUtilTest::::calculateMinContentForImageWithHeightTest()",
      "2948": "FlexUtilTest::::calculateMinContentForImageWithHeightTest()",
      "2949": "FlexUtilTest::::calculateMinContentForImageWithHeightTest()",
      "2950": "FlexUtilTest::::calculateMinContentForImageWithHeightTest()",
      "2951": "FlexUtilTest::::calculateMinContentForImageWithHeightTest()",
      "2953": "FlexUtilTest::::calculateMinContentForImageWithHeightAndMinMaxHeightsTest()",
      "2954": "FlexUtilTest::::calculateMinContentForImageWithHeightAndMinMaxHeightsTest()",
      "2955": "FlexUtilTest::::calculateMinContentForImageWithHeightAndMinMaxHeightsTest()",
      "2956": "FlexUtilTest::::calculateMinContentForImageWithHeightAndMinMaxHeightsTest()",
      "2957": "FlexUtilTest::::calculateMinContentForImageWithHeightAndMinMaxHeightsTest()",
      "2958": "FlexUtilTest::::calculateMinContentForImageWithHeightAndMinMaxHeightsTest()",
      "2959": "FlexUtilTest::::calculateMinContentForImageWithHeightAndMinMaxHeightsTest()",
      "2960": "FlexUtilTest::::calculateMinContentForImageWithHeightAndMinMaxHeightsTest()",
      "2961": "FlexUtilTest::::calculateMinContentForImageWithHeightAndMinMaxHeightsTest()",
      "2962": "FlexUtilTest::::calculateMinContentForImageWithHeightAndMinMaxHeightsTest()",
      "2963": "FlexUtilTest::::calculateMinContentForImageWithHeightAndMinMaxHeightsTest()",
      "2964": "FlexUtilTest::::calculateMinContentForImageWithHeightAndMinMaxHeightsTest()",
      "2965": "FlexUtilTest::::calculateMinContentForImageWithHeightAndMinMaxHeightsTest()",
      "2966": "FlexUtilTest::::calculateMinContentForImageWithHeightAndMinMaxHeightsTest()",
      "2967": "FlexUtilTest::::calculateMinContentForImageWithHeightAndMinMaxHeightsTest()",
      "2968": "FlexUtilTest::::calculateMinContentForImageWithHeightAndMinMaxHeightsTest()",
      "2969": "FlexUtilTest::::calculateMinContentForImageWithHeightAndMinMaxHeightsTest()",
      "2970": "FlexUtilTest::::calculateMinContentForImageWithHeightAndMinMaxHeightsTest()",
      "2971": "FlexUtilTest::::calculateMinContentForImageWithHeightAndMinMaxHeightsTest()",
      "2972": "FlexUtilTest::::calculateMinContentForImageWithHeightAndMinMaxHeightsTest()",
      "2974": "FlexUtilTest::::calculateMinContentForImageWithHeightAndWidthTest()",
      "2975": "FlexUtilTest::::calculateMinContentForImageWithHeightAndWidthTest()",
      "2976": "FlexUtilTest::::calculateMinContentForImageWithHeightAndWidthTest()",
      "2977": "FlexUtilTest::::calculateMinContentForImageWithHeightAndWidthTest()",
      "2978": "FlexUtilTest::::calculateMinContentForImageWithHeightAndWidthTest()",
      "2979": "FlexUtilTest::::calculateMinContentForImageWithHeightAndWidthTest()",
      "2980": "FlexUtilTest::::calculateMinContentForImageWithHeightAndWidthTest()",
      "2981": "FlexUtilTest::::calculateMinContentForImageWithHeightAndWidthTest()",
      "2982": "FlexUtilTest::::calculateMinContentForImageWithHeightAndWidthTest()",
      "2983": "FlexUtilTest::::calculateMinContentForImageWithHeightAndWidthTest()",
      "2984": "FlexUtilTest::::calculateMinContentForImageWithHeightAndWidthTest()",
      "2985": "FlexUtilTest::::calculateMinContentForImageWithHeightAndWidthTest()",
      "2986": "FlexUtilTest::::calculateMinContentForImageWithHeightAndWidthTest()",
      "2987": "FlexUtilTest::::calculateMinContentForImageWithHeightAndWidthTest()",
      "2988": "FlexUtilTest::::calculateMinContentForImageWithHeightAndWidthTest()",
      "2989": "FlexUtilTest::::calculateMinContentForImageWithHeightAndWidthTest()",
      "2990": "FlexUtilTest::::calculateMinContentForImageWithHeightAndWidthTest()",
      "2991": "FlexUtilTest::::calculateMinContentForImageWithHeightAndWidthTest()"
    },
    "tests": [
      {
        "test_lines": [
          93,
          109
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          134,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          210,
          211,
          212,
          213,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          324,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          371,
          381,
          384,
          388,
          391,
          392,
          393,
          394,
          395,
          397,
          402,
          407,
          408,
          409,
          410,
          411,
          412,
          413,
          414,
          419,
          421,
          430,
          439,
          440,
          441,
          444,
          445,
          446,
          448,
          451,
          452,
          454,
          455,
          456,
          457,
          460,
          463,
          464,
          475,
          476,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          527,
          528,
          529,
          530,
          531,
          533,
          534,
          536,
          537,
          539,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          728,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          830,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          849,
          851,
          852,
          856,
          857,
          858,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          954,
          955,
          960,
          967,
          968,
          969,
          970,
          971,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1053,
          1057,
          1058,
          1059,
          1063,
          1064,
          1065,
          1069,
          1070,
          1071,
          1075,
          1076,
          1077,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          111,
          143
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          134,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          210,
          211,
          212,
          213,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          324,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          376,
          381,
          384,
          388,
          391,
          392,
          393,
          394,
          395,
          397,
          402,
          403,
          407,
          408,
          409,
          410,
          411,
          415,
          416,
          419,
          421,
          422,
          423,
          424,
          425,
          426,
          428,
          430,
          439,
          440,
          441,
          444,
          445,
          446,
          448,
          451,
          452,
          454,
          455,
          456,
          457,
          460,
          463,
          464,
          475,
          476,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          527,
          528,
          529,
          530,
          531,
          533,
          534,
          536,
          537,
          539,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          728,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          830,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          849,
          851,
          852,
          856,
          857,
          858,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          954,
          955,
          960,
          967,
          968,
          969,
          970,
          971,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1053,
          1057,
          1058,
          1059,
          1063,
          1064,
          1065,
          1069,
          1070,
          1071,
          1075,
          1076,
          1077,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          145,
          167
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          134,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          210,
          211,
          212,
          213,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          324,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          371,
          381,
          384,
          388,
          391,
          392,
          393,
          394,
          395,
          397,
          402,
          407,
          408,
          409,
          410,
          411,
          412,
          413,
          414,
          419,
          421,
          430,
          439,
          440,
          441,
          444,
          445,
          446,
          448,
          451,
          452,
          454,
          455,
          456,
          457,
          460,
          463,
          464,
          475,
          476,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          527,
          528,
          529,
          530,
          531,
          533,
          534,
          536,
          537,
          539,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          728,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          830,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          849,
          851,
          852,
          856,
          857,
          858,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          954,
          955,
          960,
          967,
          968,
          969,
          970,
          971,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1053,
          1057,
          1058,
          1059,
          1063,
          1064,
          1065,
          1069,
          1070,
          1071,
          1075,
          1076,
          1077,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          169,
          189
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          134,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          210,
          211,
          212,
          213,
          220,
          221,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          324,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          371,
          381,
          384,
          388,
          391,
          392,
          393,
          394,
          395,
          397,
          402,
          407,
          408,
          409,
          410,
          411,
          412,
          413,
          414,
          419,
          421,
          430,
          439,
          440,
          441,
          444,
          445,
          446,
          448,
          451,
          452,
          454,
          455,
          456,
          457,
          460,
          463,
          464,
          475,
          476,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          527,
          528,
          529,
          530,
          531,
          533,
          534,
          536,
          537,
          539,
          548,
          568,
          569,
          570,
          573,
          574,
          576,
          577,
          588,
          589,
          591,
          592,
          596,
          597,
          600,
          604,
          605,
          607,
          613,
          614,
          616,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          728,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          830,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          849,
          851,
          852,
          856,
          857,
          858,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          954,
          955,
          960,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1053,
          1057,
          1058,
          1059,
          1063,
          1064,
          1065,
          1069,
          1070,
          1071,
          1075,
          1076,
          1077,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          191,
          210
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          134,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          210,
          211,
          212,
          213,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          326,
          327,
          328,
          329,
          343,
          345,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          371,
          372,
          373,
          381,
          384,
          388,
          475,
          476,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          527,
          528,
          529,
          530,
          531,
          533,
          534,
          536,
          537,
          539,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          728,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          830,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          847,
          851,
          852,
          856,
          857,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          954,
          955,
          960,
          967,
          968,
          969,
          970,
          971,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1053,
          1057,
          1058,
          1059,
          1063,
          1064,
          1065,
          1069,
          1070,
          1071,
          1075,
          1076,
          1077,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          212,
          229
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          132,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          205,
          206,
          207,
          208,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          324,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          371,
          372,
          373,
          381,
          384,
          388,
          475,
          476,
          480,
          481,
          499,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          518,
          519,
          520,
          522,
          526,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          691,
          692,
          696,
          697,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          726,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          831,
          833,
          834,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          847,
          851,
          852,
          856,
          857,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          947,
          948,
          949,
          951,
          952,
          953,
          960,
          967,
          968,
          969,
          970,
          971,
          993,
          995,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1057,
          1058,
          1063,
          1064,
          1069,
          1070,
          1075,
          1076,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1136,
          1145,
          1157,
          1158,
          1160,
          1161,
          1162,
          1163,
          1165,
          1166,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          231,
          248
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          132,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          205,
          206,
          207,
          208,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          324,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          371,
          381,
          384,
          388,
          391,
          392,
          393,
          394,
          395,
          397,
          402,
          407,
          408,
          409,
          410,
          411,
          412,
          413,
          414,
          419,
          421,
          430,
          439,
          440,
          441,
          444,
          445,
          446,
          448,
          451,
          452,
          454,
          455,
          456,
          457,
          460,
          463,
          464,
          475,
          476,
          480,
          481,
          499,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          518,
          519,
          520,
          522,
          526,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          691,
          692,
          696,
          697,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          726,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          831,
          833,
          834,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          849,
          851,
          852,
          856,
          857,
          858,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          947,
          948,
          949,
          951,
          952,
          953,
          960,
          967,
          968,
          969,
          970,
          971,
          993,
          995,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1057,
          1058,
          1063,
          1064,
          1069,
          1070,
          1075,
          1076,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1136,
          1145,
          1157,
          1158,
          1160,
          1161,
          1162,
          1163,
          1165,
          1166,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          250,
          267
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          132,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          205,
          206,
          207,
          208,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          324,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          371,
          381,
          384,
          388,
          391,
          392,
          393,
          394,
          395,
          397,
          402,
          403,
          407,
          408,
          409,
          410,
          411,
          412,
          413,
          414,
          419,
          421,
          430,
          439,
          440,
          441,
          444,
          445,
          446,
          448,
          451,
          452,
          454,
          455,
          456,
          457,
          460,
          463,
          464,
          475,
          476,
          480,
          481,
          499,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          518,
          519,
          520,
          522,
          526,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          691,
          692,
          696,
          697,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          726,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          831,
          833,
          834,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          849,
          851,
          852,
          856,
          857,
          858,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          947,
          948,
          949,
          951,
          952,
          953,
          960,
          967,
          968,
          969,
          970,
          971,
          993,
          995,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1057,
          1058,
          1063,
          1064,
          1069,
          1070,
          1075,
          1076,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1136,
          1145,
          1157,
          1158,
          1160,
          1161,
          1162,
          1163,
          1165,
          1166,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          269,
          286
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          132,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          205,
          206,
          207,
          208,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          324,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          376,
          381,
          384,
          388,
          391,
          392,
          393,
          394,
          395,
          397,
          402,
          407,
          408,
          409,
          410,
          411,
          415,
          416,
          419,
          421,
          422,
          423,
          424,
          425,
          426,
          428,
          430,
          439,
          440,
          441,
          444,
          445,
          446,
          448,
          451,
          452,
          454,
          455,
          456,
          457,
          460,
          463,
          464,
          475,
          476,
          480,
          481,
          499,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          518,
          519,
          520,
          522,
          526,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          691,
          692,
          696,
          697,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          726,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          831,
          833,
          834,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          849,
          851,
          852,
          856,
          857,
          858,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          947,
          948,
          949,
          951,
          952,
          953,
          960,
          967,
          968,
          969,
          970,
          971,
          993,
          995,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1057,
          1058,
          1063,
          1064,
          1069,
          1070,
          1075,
          1076,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1136,
          1145,
          1157,
          1158,
          1160,
          1161,
          1162,
          1163,
          1165,
          1166,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          288,
          308
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          132,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          205,
          206,
          207,
          208,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          324,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          376,
          381,
          384,
          388,
          391,
          392,
          393,
          394,
          395,
          397,
          402,
          407,
          408,
          409,
          410,
          411,
          415,
          416,
          419,
          421,
          422,
          423,
          424,
          425,
          426,
          428,
          430,
          439,
          440,
          441,
          444,
          445,
          446,
          448,
          449,
          451,
          452,
          454,
          455,
          456,
          457,
          460,
          463,
          464,
          475,
          476,
          480,
          481,
          499,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          518,
          519,
          520,
          522,
          526,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          691,
          692,
          696,
          697,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          726,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          831,
          833,
          834,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          847,
          849,
          851,
          852,
          856,
          857,
          858,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          947,
          948,
          949,
          951,
          952,
          953,
          960,
          967,
          968,
          969,
          970,
          971,
          993,
          995,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1057,
          1058,
          1063,
          1064,
          1069,
          1070,
          1075,
          1076,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1136,
          1145,
          1157,
          1158,
          1160,
          1161,
          1162,
          1163,
          1165,
          1166,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          310,
          330
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          132,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          205,
          206,
          207,
          208,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          324,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          376,
          377,
          378,
          381,
          384,
          388,
          391,
          392,
          393,
          394,
          395,
          397,
          402,
          407,
          408,
          409,
          410,
          411,
          415,
          416,
          419,
          421,
          422,
          423,
          424,
          425,
          426,
          428,
          430,
          439,
          440,
          441,
          444,
          445,
          446,
          448,
          451,
          452,
          454,
          455,
          456,
          457,
          460,
          463,
          464,
          475,
          476,
          480,
          481,
          499,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          518,
          519,
          520,
          522,
          526,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          691,
          692,
          696,
          697,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          726,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          831,
          833,
          834,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          847,
          849,
          851,
          852,
          856,
          857,
          858,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          947,
          948,
          949,
          951,
          952,
          953,
          960,
          967,
          968,
          969,
          970,
          971,
          993,
          995,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1057,
          1058,
          1063,
          1064,
          1069,
          1070,
          1075,
          1076,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1136,
          1145,
          1157,
          1158,
          1160,
          1161,
          1162,
          1163,
          1165,
          1166,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          332,
          349
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          132,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          205,
          206,
          207,
          208,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          324,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          376,
          381,
          384,
          388,
          391,
          392,
          393,
          394,
          395,
          397,
          402,
          403,
          407,
          408,
          409,
          410,
          411,
          415,
          416,
          419,
          421,
          422,
          423,
          424,
          425,
          426,
          428,
          430,
          439,
          440,
          441,
          444,
          445,
          446,
          448,
          451,
          452,
          454,
          455,
          456,
          457,
          460,
          463,
          464,
          475,
          476,
          480,
          481,
          499,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          518,
          519,
          520,
          522,
          526,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          691,
          692,
          696,
          697,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          726,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          831,
          833,
          834,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          849,
          851,
          852,
          856,
          857,
          858,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          947,
          948,
          949,
          951,
          952,
          953,
          960,
          967,
          968,
          969,
          970,
          971,
          993,
          995,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1057,
          1058,
          1063,
          1064,
          1069,
          1070,
          1075,
          1076,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1136,
          1145,
          1157,
          1158,
          1160,
          1161,
          1162,
          1163,
          1165,
          1166,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          351,
          369
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          132,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          205,
          206,
          207,
          208,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          324,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          376,
          381,
          384,
          388,
          391,
          392,
          393,
          394,
          395,
          397,
          402,
          407,
          408,
          409,
          410,
          411,
          415,
          416,
          419,
          421,
          422,
          423,
          424,
          425,
          426,
          428,
          430,
          439,
          440,
          441,
          444,
          445,
          446,
          448,
          451,
          452,
          454,
          455,
          456,
          457,
          460,
          463,
          464,
          475,
          476,
          480,
          481,
          499,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          518,
          519,
          520,
          522,
          526,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          691,
          692,
          696,
          697,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          726,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          831,
          833,
          834,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          849,
          851,
          852,
          856,
          857,
          858,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          940,
          960,
          967,
          968,
          969,
          970,
          971,
          993,
          995,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1057,
          1058,
          1063,
          1064,
          1069,
          1070,
          1075,
          1076,
          1082,
          1083,
          1084,
          1094,
          1101,
          1134,
          1135,
          1136,
          1137,
          1145,
          1157,
          1158,
          1160,
          1161,
          1162,
          1163,
          1165,
          1166,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          371,
          389
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          132,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          205,
          206,
          207,
          208,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          324,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          371,
          381,
          384,
          388,
          391,
          392,
          393,
          394,
          395,
          397,
          402,
          407,
          408,
          409,
          410,
          411,
          412,
          413,
          414,
          419,
          421,
          430,
          439,
          440,
          441,
          444,
          445,
          446,
          448,
          451,
          452,
          454,
          455,
          456,
          457,
          460,
          463,
          464,
          475,
          476,
          480,
          481,
          499,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          518,
          519,
          520,
          522,
          526,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          691,
          692,
          696,
          697,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          726,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          831,
          833,
          834,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          849,
          851,
          852,
          856,
          857,
          858,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          940,
          960,
          967,
          968,
          969,
          970,
          971,
          993,
          995,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1057,
          1058,
          1063,
          1064,
          1069,
          1070,
          1075,
          1076,
          1082,
          1083,
          1084,
          1094,
          1101,
          1134,
          1135,
          1136,
          1137,
          1145,
          1157,
          1158,
          1160,
          1161,
          1162,
          1163,
          1165,
          1166,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          391,
          409
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          132,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          205,
          206,
          207,
          208,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          324,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          371,
          381,
          384,
          388,
          391,
          392,
          393,
          394,
          395,
          397,
          402,
          407,
          408,
          409,
          410,
          411,
          412,
          413,
          414,
          419,
          421,
          430,
          439,
          440,
          441,
          444,
          445,
          446,
          448,
          451,
          452,
          454,
          455,
          456,
          457,
          460,
          463,
          464,
          475,
          476,
          480,
          481,
          499,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          518,
          519,
          520,
          522,
          526,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          691,
          692,
          696,
          697,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          726,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          831,
          833,
          834,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          849,
          851,
          852,
          856,
          857,
          858,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          940,
          960,
          967,
          968,
          969,
          970,
          971,
          993,
          995,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1057,
          1058,
          1063,
          1064,
          1069,
          1070,
          1075,
          1076,
          1082,
          1083,
          1084,
          1094,
          1101,
          1134,
          1135,
          1136,
          1137,
          1145,
          1157,
          1158,
          1160,
          1161,
          1162,
          1163,
          1165,
          1166,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          411,
          429
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          132,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          205,
          206,
          207,
          208,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          324,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          371,
          381,
          384,
          388,
          391,
          392,
          393,
          394,
          395,
          397,
          402,
          407,
          408,
          409,
          410,
          411,
          412,
          413,
          414,
          419,
          421,
          430,
          439,
          440,
          441,
          444,
          445,
          446,
          447,
          451,
          452,
          454,
          455,
          456,
          457,
          460,
          463,
          464,
          475,
          476,
          480,
          481,
          499,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          518,
          519,
          520,
          522,
          526,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          691,
          692,
          696,
          697,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          726,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          831,
          833,
          834,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          849,
          851,
          852,
          856,
          857,
          858,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          960,
          967,
          968,
          969,
          970,
          971,
          993,
          995,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1057,
          1058,
          1063,
          1064,
          1069,
          1070,
          1075,
          1076,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1136,
          1145,
          1157,
          1158,
          1160,
          1161,
          1162,
          1163,
          1165,
          1166,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1183
        ]
      },
      {
        "test_lines": [
          431,
          449
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          132,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          205,
          206,
          207,
          208,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          324,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          376,
          381,
          384,
          388,
          391,
          392,
          393,
          394,
          395,
          397,
          402,
          407,
          408,
          409,
          410,
          411,
          415,
          416,
          419,
          421,
          422,
          423,
          424,
          425,
          426,
          428,
          430,
          439,
          440,
          441,
          444,
          445,
          446,
          448,
          449,
          451,
          452,
          454,
          455,
          456,
          457,
          460,
          463,
          464,
          475,
          476,
          480,
          481,
          499,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          518,
          519,
          520,
          522,
          526,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          691,
          692,
          696,
          697,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          726,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          831,
          833,
          834,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          849,
          851,
          852,
          856,
          857,
          858,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          947,
          948,
          949,
          951,
          952,
          953,
          960,
          967,
          968,
          969,
          970,
          971,
          993,
          995,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1057,
          1058,
          1069,
          1070,
          1075,
          1076
        ]
      },
      {
        "test_lines": [
          451,
          469
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          132,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          205,
          206,
          207,
          208,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          324,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          371,
          381,
          384,
          388,
          391,
          392,
          393,
          394,
          395,
          397,
          402,
          407,
          408,
          409,
          410,
          411,
          412,
          413,
          414,
          419,
          421,
          430,
          439,
          440,
          441,
          444,
          445,
          446,
          448,
          451,
          452,
          454,
          455,
          456,
          457,
          460,
          463,
          464,
          475,
          476,
          480,
          481,
          499,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          518,
          519,
          520,
          522,
          526,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          684,
          686,
          688,
          691,
          692,
          696,
          697,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          726,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          831,
          833,
          834,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          849,
          851,
          852,
          856,
          857,
          858,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          947,
          948,
          949,
          951,
          952,
          953,
          960,
          967,
          968,
          969,
          970,
          971,
          993,
          995,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1057,
          1058,
          1063,
          1064,
          1069,
          1070,
          1075,
          1076,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1136,
          1145,
          1157,
          1158,
          1160,
          1161,
          1162,
          1163,
          1165,
          1166,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          471,
          489
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          132,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          205,
          206,
          207,
          208,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          324,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          371,
          381,
          384,
          388,
          391,
          392,
          393,
          394,
          395,
          397,
          402,
          407,
          408,
          409,
          410,
          411,
          412,
          413,
          414,
          419,
          421,
          430,
          439,
          440,
          441,
          444,
          445,
          446,
          448,
          451,
          452,
          454,
          455,
          456,
          457,
          460,
          463,
          464,
          475,
          476,
          480,
          481,
          499,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          518,
          519,
          520,
          522,
          526,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          676,
          678,
          679,
          680,
          683,
          686,
          688,
          691,
          692,
          696,
          697,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          726,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          831,
          833,
          834,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          849,
          851,
          852,
          856,
          857,
          858,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          947,
          948,
          949,
          951,
          952,
          953,
          960,
          967,
          968,
          969,
          970,
          971,
          993,
          995,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1057,
          1058,
          1063,
          1064,
          1069,
          1070,
          1075,
          1076,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1136,
          1145,
          1157,
          1158,
          1160,
          1161,
          1162,
          1163,
          1165,
          1166,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          491,
          509
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          132,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          205,
          206,
          207,
          208,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          324,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          371,
          381,
          384,
          388,
          391,
          392,
          393,
          394,
          395,
          397,
          402,
          407,
          408,
          409,
          410,
          411,
          412,
          413,
          414,
          419,
          421,
          430,
          439,
          440,
          441,
          444,
          445,
          446,
          448,
          451,
          452,
          454,
          455,
          456,
          457,
          460,
          463,
          464,
          475,
          476,
          480,
          481,
          499,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          518,
          519,
          520,
          522,
          526,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          681,
          683,
          686,
          688,
          691,
          692,
          696,
          697,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          726,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          831,
          833,
          834,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          849,
          851,
          852,
          856,
          857,
          858,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          947,
          948,
          949,
          951,
          952,
          953,
          960,
          967,
          968,
          969,
          970,
          971,
          993,
          995,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1057,
          1058,
          1063,
          1064,
          1069,
          1070,
          1075,
          1076,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1136,
          1145,
          1157,
          1158,
          1160,
          1161,
          1162,
          1163,
          1165,
          1166,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          511,
          529
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          132,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          205,
          206,
          207,
          208,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          324,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          371,
          381,
          384,
          388,
          391,
          392,
          393,
          394,
          395,
          397,
          402,
          407,
          408,
          409,
          410,
          411,
          412,
          413,
          414,
          419,
          421,
          430,
          439,
          440,
          441,
          444,
          445,
          446,
          448,
          451,
          452,
          454,
          455,
          456,
          457,
          460,
          463,
          464,
          475,
          476,
          480,
          481,
          499,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          518,
          519,
          520,
          522,
          526,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          691,
          692,
          696,
          697,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          726,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          831,
          833,
          834,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          849,
          851,
          852,
          856,
          857,
          858,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          940,
          960,
          967,
          968,
          969,
          970,
          971,
          993,
          995,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1057,
          1058,
          1063,
          1064,
          1069,
          1070,
          1075,
          1076,
          1082,
          1083,
          1084,
          1094,
          1101,
          1134,
          1135,
          1136,
          1137,
          1145,
          1157,
          1158,
          1160,
          1161,
          1162,
          1163,
          1165,
          1166,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          531,
          551
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          132,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          205,
          206,
          207,
          208,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          326,
          327,
          328,
          329,
          331,
          337,
          338,
          339,
          340,
          343,
          345,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          371,
          381,
          384,
          388,
          391,
          392,
          393,
          394,
          395,
          397,
          402,
          407,
          408,
          409,
          410,
          411,
          412,
          413,
          414,
          419,
          421,
          430,
          439,
          440,
          441,
          444,
          445,
          446,
          448,
          451,
          452,
          454,
          455,
          456,
          457,
          460,
          463,
          464,
          475,
          476,
          480,
          481,
          499,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          518,
          519,
          520,
          522,
          526,
          548,
          568,
          569,
          570,
          573,
          574,
          576,
          577,
          588,
          589,
          591,
          592,
          596,
          604,
          605,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          630,
          631,
          632,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          691,
          692,
          696,
          697,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          726,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          831,
          833,
          834,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          849,
          851,
          852,
          856,
          857,
          858,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          947,
          948,
          949,
          951,
          952,
          953,
          960,
          967,
          968,
          969,
          970,
          971,
          993,
          995,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1057,
          1058,
          1063,
          1064,
          1069,
          1070,
          1075,
          1076,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1136,
          1145,
          1157,
          1158,
          1160,
          1161,
          1162,
          1163,
          1165,
          1166,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          553,
          573
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          132,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          205,
          206,
          207,
          208,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          326,
          327,
          328,
          329,
          331,
          337,
          338,
          339,
          340,
          343,
          345,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          371,
          372,
          373,
          381,
          384,
          388,
          475,
          476,
          480,
          481,
          499,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          518,
          519,
          520,
          522,
          526,
          548,
          568,
          569,
          570,
          573,
          574,
          576,
          577,
          588,
          589,
          591,
          592,
          596,
          604,
          605,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          630,
          631,
          632,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          691,
          692,
          696,
          697,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          726,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          831,
          833,
          834,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          847,
          851,
          852,
          856,
          857,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          947,
          948,
          949,
          951,
          952,
          953,
          960,
          967,
          968,
          969,
          970,
          971,
          993,
          995,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1057,
          1058,
          1063,
          1064,
          1069,
          1070,
          1075,
          1076,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1136,
          1145,
          1157,
          1158,
          1160,
          1161,
          1162,
          1163,
          1165,
          1166,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          575,
          595
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          132,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          205,
          206,
          207,
          208,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          326,
          327,
          328,
          329,
          331,
          332,
          333,
          334,
          335,
          345,
          349,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          376,
          381,
          384,
          388,
          391,
          392,
          393,
          394,
          395,
          397,
          402,
          407,
          408,
          409,
          410,
          411,
          415,
          416,
          419,
          421,
          422,
          423,
          424,
          425,
          426,
          428,
          430,
          439,
          440,
          441,
          444,
          445,
          446,
          448,
          451,
          452,
          454,
          455,
          456,
          457,
          460,
          463,
          464,
          475,
          476,
          480,
          481,
          499,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          518,
          519,
          520,
          522,
          526,
          548,
          568,
          569,
          570,
          573,
          574,
          576,
          577,
          588,
          589,
          591,
          592,
          596,
          604,
          605,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          630,
          631,
          632,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          691,
          692,
          696,
          697,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          726,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          831,
          833,
          834,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          849,
          851,
          852,
          856,
          857,
          858,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          947,
          948,
          949,
          951,
          952,
          953,
          960,
          967,
          968,
          969,
          970,
          971,
          993,
          995,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1057,
          1058,
          1063,
          1064,
          1069,
          1070,
          1075,
          1076,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1136,
          1145,
          1157,
          1158,
          1160,
          1161,
          1162,
          1163,
          1165,
          1166,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          597,
          617
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          132,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          205,
          206,
          207,
          208,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          326,
          327,
          328,
          329,
          331,
          332,
          333,
          334,
          335,
          345,
          349,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          376,
          377,
          378,
          381,
          384,
          388,
          475,
          476,
          480,
          481,
          499,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          518,
          519,
          520,
          522,
          526,
          548,
          568,
          569,
          570,
          573,
          574,
          576,
          577,
          588,
          589,
          591,
          592,
          596,
          604,
          605,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          630,
          631,
          632,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          691,
          692,
          696,
          697,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          726,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          831,
          833,
          834,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          847,
          851,
          852,
          856,
          857,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          947,
          948,
          949,
          951,
          952,
          953,
          960,
          967,
          968,
          969,
          970,
          971,
          993,
          995,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1057,
          1058,
          1063,
          1064,
          1069,
          1070,
          1075,
          1076,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1136,
          1145,
          1157,
          1158,
          1160,
          1161,
          1162,
          1163,
          1165,
          1166,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          619,
          640
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          132,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          205,
          206,
          207,
          208,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          326,
          327,
          328,
          329,
          331,
          337,
          338,
          339,
          340,
          343,
          345,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          371,
          372,
          373,
          381,
          384,
          388,
          475,
          476,
          480,
          481,
          499,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          518,
          519,
          520,
          522,
          526,
          548,
          568,
          569,
          570,
          573,
          574,
          576,
          577,
          588,
          589,
          591,
          592,
          596,
          604,
          605,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          630,
          631,
          632,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          684,
          686,
          688,
          691,
          692,
          696,
          697,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          726,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          831,
          833,
          834,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          847,
          851,
          852,
          856,
          857,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          940,
          960,
          967,
          968,
          969,
          970,
          971,
          993,
          995,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1057,
          1058,
          1063,
          1064,
          1069,
          1070,
          1075,
          1076,
          1082,
          1083,
          1084,
          1094,
          1101,
          1134,
          1135,
          1136,
          1137,
          1145,
          1157,
          1158,
          1160,
          1161,
          1162,
          1163,
          1165,
          1166,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          642,
          667
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          132,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          205,
          206,
          207,
          208,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          326,
          327,
          328,
          329,
          331,
          337,
          338,
          339,
          340,
          343,
          345,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          371,
          372,
          373,
          381,
          384,
          388,
          475,
          476,
          480,
          481,
          499,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          518,
          519,
          520,
          522,
          526,
          548,
          568,
          569,
          570,
          573,
          574,
          576,
          577,
          588,
          589,
          591,
          592,
          596,
          604,
          605,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          630,
          631,
          632,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          684,
          686,
          688,
          691,
          692,
          696,
          697,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          726,
          731,
          732,
          735,
          736,
          738,
          767,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          831,
          833,
          834,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          847,
          851,
          852,
          856,
          857,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          947,
          948,
          949,
          951,
          952,
          953,
          960,
          967,
          968,
          969,
          970,
          971,
          993,
          995,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1057,
          1058,
          1063,
          1064,
          1069,
          1070,
          1075,
          1076,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1136,
          1145,
          1157,
          1158,
          1160,
          1161,
          1162,
          1163,
          1165,
          1166,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          669,
          691
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          132,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          205,
          206,
          207,
          208,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          324,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          371,
          372,
          373,
          381,
          384,
          388,
          475,
          476,
          480,
          481,
          499,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          518,
          519,
          520,
          522,
          526,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          684,
          686,
          688,
          691,
          692,
          696,
          697,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          726,
          731,
          732,
          735,
          736,
          738,
          767,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          831,
          833,
          834,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          847,
          851,
          852,
          856,
          857,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          947,
          948,
          949,
          951,
          952,
          953,
          960,
          967,
          968,
          969,
          970,
          971,
          993,
          995,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1057,
          1058,
          1063,
          1064,
          1069,
          1070,
          1075,
          1076,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1136,
          1145,
          1157,
          1158,
          1160,
          1161,
          1162,
          1163,
          1165,
          1166,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          693,
          715
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          132,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          205,
          206,
          207,
          208,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          324,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          371,
          372,
          373,
          381,
          384,
          388,
          475,
          476,
          480,
          481,
          499,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          518,
          519,
          520,
          522,
          526,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          684,
          686,
          688,
          691,
          692,
          696,
          697,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          726,
          731,
          732,
          735,
          736,
          738,
          759,
          760,
          764,
          765,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          831,
          833,
          834,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          847,
          851,
          852,
          856,
          857,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          947,
          948,
          949,
          951,
          952,
          953,
          960,
          967,
          968,
          969,
          970,
          971,
          993,
          995,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1057,
          1058,
          1063,
          1064,
          1069,
          1070,
          1075,
          1076,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1136,
          1145,
          1157,
          1158,
          1160,
          1161,
          1162,
          1163,
          1165,
          1166,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          717,
          739
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          132,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          205,
          206,
          207,
          208,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          324,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          371,
          372,
          373,
          381,
          384,
          388,
          475,
          476,
          480,
          481,
          499,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          518,
          519,
          520,
          522,
          526,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          684,
          686,
          688,
          691,
          692,
          696,
          697,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          726,
          731,
          732,
          735,
          736,
          738,
          749,
          750,
          751,
          755,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          831,
          833,
          834,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          847,
          851,
          852,
          856,
          857,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          947,
          948,
          949,
          951,
          952,
          953,
          960,
          967,
          968,
          969,
          970,
          971,
          993,
          995,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1057,
          1058,
          1063,
          1064,
          1069,
          1070,
          1075,
          1076,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1136,
          1145,
          1157,
          1158,
          1160,
          1161,
          1162,
          1163,
          1165,
          1166,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          741,
          784
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          132,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          205,
          206,
          207,
          208,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          271,
          272,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          324,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          371,
          372,
          373,
          381,
          384,
          388,
          475,
          476,
          480,
          481,
          499,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          518,
          519,
          520,
          522,
          526,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          691,
          692,
          696,
          697,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          726,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          831,
          833,
          834,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          847,
          851,
          852,
          856,
          857,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          947,
          948,
          949,
          951,
          952,
          953,
          960,
          967,
          968,
          969,
          970,
          971,
          993,
          995,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1057,
          1058,
          1063,
          1064,
          1069,
          1070,
          1075,
          1076,
          1082,
          1083,
          1084,
          1088,
          1089,
          1090,
          1094,
          1097,
          1113,
          1114,
          1115,
          1116,
          1122,
          1134,
          1135,
          1136,
          1145,
          1157,
          1158,
          1160,
          1161,
          1162,
          1163,
          1165,
          1166,
          1170,
          1171,
          1173,
          1174,
          1175,
          1177,
          1178,
          1179,
          1180,
          1183,
          1187,
          1188,
          1189,
          1191,
          1193,
          1194,
          1195,
          1197,
          1200,
          1201,
          1202
        ]
      },
      {
        "test_lines": [
          786,
          803
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          134,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          210,
          211,
          212,
          213,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          326,
          327,
          328,
          329,
          331,
          332,
          333,
          334,
          335,
          345,
          349,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          376,
          377,
          378,
          381,
          384,
          388,
          475,
          476,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          527,
          528,
          529,
          530,
          531,
          533,
          534,
          536,
          537,
          539,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          728,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          830,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          847,
          851,
          852,
          856,
          857,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          954,
          955,
          960,
          967,
          968,
          969,
          970,
          971,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1053,
          1057,
          1058,
          1059,
          1063,
          1064,
          1065,
          1069,
          1070,
          1071,
          1075,
          1076,
          1077,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          805,
          822
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          134,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          210,
          211,
          212,
          213,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          326,
          327,
          328,
          329,
          331,
          332,
          333,
          334,
          335,
          345,
          349,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          376,
          381,
          384,
          388,
          391,
          392,
          393,
          394,
          395,
          397,
          402,
          407,
          408,
          409,
          410,
          411,
          415,
          416,
          419,
          421,
          422,
          423,
          424,
          425,
          426,
          428,
          430,
          439,
          440,
          441,
          444,
          445,
          446,
          448,
          451,
          452,
          454,
          455,
          456,
          457,
          460,
          463,
          464,
          475,
          476,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          527,
          528,
          529,
          530,
          531,
          533,
          534,
          536,
          537,
          539,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          728,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          830,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          849,
          851,
          852,
          856,
          857,
          858,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          954,
          955,
          960,
          967,
          968,
          969,
          970,
          971,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1053,
          1057,
          1058,
          1059,
          1063,
          1064,
          1065,
          1069,
          1070,
          1071,
          1075,
          1076,
          1077,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          824,
          838
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          134,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          210,
          211,
          212,
          213,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          324,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          371,
          372,
          373,
          381,
          384,
          388,
          391,
          392,
          393,
          394,
          395,
          397,
          402,
          403,
          407,
          408,
          409,
          410,
          411,
          412,
          413,
          414,
          419,
          421,
          430,
          439,
          440,
          441,
          444,
          445,
          446,
          448,
          451,
          452,
          454,
          455,
          456,
          457,
          460,
          463,
          464,
          475,
          476,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          527,
          528,
          529,
          530,
          531,
          533,
          534,
          536,
          537,
          539,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          728,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          830,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          847,
          849,
          851,
          852,
          856,
          857,
          858,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          954,
          955,
          960,
          967,
          968,
          969,
          970,
          971,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1053,
          1057,
          1058,
          1059,
          1063,
          1064,
          1065,
          1069,
          1070,
          1071,
          1075,
          1076,
          1077,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          840,
          854
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          134,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          210,
          211,
          212,
          213,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          324,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          371,
          372,
          373,
          381,
          384,
          388,
          391,
          392,
          393,
          394,
          395,
          397,
          402,
          407,
          408,
          409,
          410,
          411,
          412,
          413,
          414,
          419,
          421,
          430,
          439,
          440,
          441,
          444,
          445,
          446,
          448,
          451,
          452,
          454,
          455,
          456,
          457,
          460,
          463,
          464,
          475,
          476,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          527,
          528,
          529,
          530,
          531,
          533,
          534,
          536,
          537,
          539,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          728,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          830,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          847,
          849,
          851,
          852,
          856,
          857,
          858,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          954,
          955,
          960,
          967,
          968,
          969,
          970,
          971,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1053,
          1057,
          1058,
          1059,
          1063,
          1064,
          1065,
          1069,
          1070,
          1071,
          1075,
          1076,
          1077,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          856,
          871
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          134,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          210,
          211,
          212,
          213,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          324,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          371,
          381,
          384,
          388,
          391,
          392,
          393,
          394,
          395,
          397,
          402,
          407,
          408,
          409,
          410,
          411,
          412,
          413,
          414,
          419,
          421,
          430,
          439,
          440,
          441,
          444,
          445,
          446,
          448,
          451,
          452,
          454,
          455,
          456,
          457,
          460,
          463,
          464,
          475,
          476,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          527,
          528,
          529,
          530,
          531,
          533,
          534,
          536,
          537,
          539,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          728,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          830,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          849,
          851,
          852,
          856,
          857,
          858,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          954,
          955,
          960,
          967,
          968,
          969,
          970,
          971,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1053,
          1057,
          1058,
          1059,
          1063,
          1064,
          1065,
          1069,
          1070,
          1071,
          1075,
          1076,
          1077,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          873,
          888
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          134,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          210,
          211,
          212,
          213,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          324,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          371,
          381,
          384,
          388,
          391,
          392,
          393,
          394,
          395,
          397,
          402,
          407,
          408,
          409,
          410,
          411,
          412,
          413,
          414,
          419,
          421,
          430,
          439,
          440,
          441,
          444,
          445,
          446,
          448,
          451,
          452,
          454,
          455,
          456,
          457,
          460,
          463,
          464,
          475,
          476,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          527,
          528,
          529,
          530,
          531,
          533,
          534,
          536,
          537,
          539,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          728,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          830,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          849,
          851,
          852,
          856,
          857,
          858,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          954,
          955,
          960,
          967,
          968,
          969,
          970,
          971,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1053,
          1057,
          1058,
          1059,
          1063,
          1064,
          1065,
          1069,
          1070,
          1071,
          1075,
          1076,
          1077,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          890,
          905
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          134,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          210,
          211,
          212,
          213,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          324,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          371,
          381,
          384,
          388,
          391,
          392,
          393,
          394,
          395,
          397,
          402,
          403,
          407,
          408,
          409,
          410,
          411,
          412,
          413,
          414,
          419,
          421,
          430,
          439,
          440,
          441,
          444,
          445,
          446,
          448,
          451,
          452,
          454,
          455,
          456,
          457,
          460,
          463,
          464,
          475,
          476,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          527,
          528,
          529,
          530,
          531,
          533,
          534,
          536,
          537,
          539,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          728,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          830,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          849,
          851,
          852,
          856,
          857,
          858,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          954,
          955,
          960,
          967,
          968,
          969,
          970,
          971,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1053,
          1057,
          1058,
          1059,
          1063,
          1064,
          1065,
          1069,
          1070,
          1071,
          1075,
          1076,
          1077,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          907,
          922
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          134,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          210,
          211,
          212,
          213,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          324,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          371,
          372,
          373,
          381,
          384,
          388,
          475,
          476,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          527,
          528,
          529,
          530,
          531,
          533,
          534,
          536,
          537,
          539,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          728,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          830,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          847,
          851,
          852,
          856,
          857,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          954,
          955,
          960,
          967,
          968,
          969,
          970,
          971,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1053,
          1057,
          1058,
          1059,
          1063,
          1064,
          1065,
          1069,
          1070,
          1071,
          1075,
          1076,
          1077,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          924,
          939
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          134,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          210,
          211,
          212,
          213,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          324,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          371,
          372,
          373,
          381,
          384,
          388,
          475,
          476,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          527,
          528,
          529,
          530,
          531,
          533,
          534,
          536,
          537,
          539,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          728,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          830,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          847,
          851,
          852,
          856,
          857,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          954,
          955,
          960,
          967,
          968,
          969,
          970,
          971,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1053,
          1057,
          1058,
          1059,
          1063,
          1064,
          1065,
          1069,
          1070,
          1071,
          1075,
          1076,
          1077,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          941,
          960
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          134,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          210,
          211,
          212,
          213,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          324,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          371,
          372,
          373,
          381,
          384,
          388,
          475,
          476,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          527,
          528,
          529,
          530,
          531,
          533,
          534,
          536,
          537,
          539,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          728,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          830,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          847,
          851,
          852,
          856,
          857,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          954,
          955,
          960,
          967,
          968,
          969,
          970,
          971,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1053,
          1057,
          1058,
          1059,
          1063,
          1064,
          1065,
          1069,
          1070,
          1071,
          1075,
          1076,
          1077,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          962,
          981
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          134,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          210,
          211,
          212,
          213,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          324,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          376,
          381,
          384,
          388,
          391,
          392,
          393,
          394,
          395,
          397,
          402,
          407,
          408,
          409,
          410,
          411,
          415,
          416,
          419,
          421,
          422,
          423,
          424,
          425,
          426,
          428,
          430,
          439,
          440,
          441,
          444,
          445,
          446,
          448,
          451,
          452,
          454,
          455,
          456,
          457,
          460,
          463,
          464,
          475,
          476,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          527,
          528,
          529,
          530,
          531,
          533,
          534,
          536,
          537,
          539,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          728,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          830,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          849,
          851,
          852,
          856,
          857,
          858,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          954,
          955,
          960,
          967,
          968,
          969,
          970,
          971,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1053,
          1057,
          1058,
          1059,
          1063,
          1064,
          1065,
          1069,
          1070,
          1071,
          1075,
          1076,
          1077,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          983,
          1004
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          134,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          210,
          211,
          212,
          213,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          324,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          371,
          372,
          373,
          381,
          384,
          388,
          475,
          476,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          527,
          528,
          529,
          530,
          531,
          533,
          534,
          536,
          537,
          539,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          728,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          830,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          847,
          851,
          852,
          856,
          857,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          954,
          955,
          960,
          967,
          968,
          969,
          970,
          971,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1053,
          1057,
          1058,
          1059,
          1063,
          1064,
          1065,
          1069,
          1070,
          1071,
          1075,
          1076,
          1077,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          1006,
          1027
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          134,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          210,
          211,
          212,
          213,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          324,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          371,
          381,
          384,
          388,
          391,
          392,
          393,
          394,
          395,
          397,
          402,
          407,
          408,
          409,
          410,
          411,
          412,
          413,
          414,
          419,
          421,
          430,
          439,
          440,
          441,
          444,
          445,
          446,
          448,
          451,
          452,
          454,
          455,
          456,
          457,
          460,
          463,
          464,
          475,
          476,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          527,
          528,
          529,
          530,
          531,
          533,
          534,
          536,
          537,
          539,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          728,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          830,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          849,
          851,
          852,
          856,
          857,
          858,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          954,
          955,
          960,
          967,
          968,
          969,
          970,
          971,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1053,
          1057,
          1058,
          1059,
          1063,
          1064,
          1065,
          1069,
          1070,
          1071,
          1075,
          1076,
          1077,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          1029,
          1067
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          134,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          210,
          211,
          212,
          213,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          324,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          371,
          381,
          384,
          388,
          391,
          392,
          393,
          394,
          395,
          397,
          402,
          407,
          408,
          409,
          410,
          411,
          412,
          413,
          414,
          419,
          421,
          430,
          439,
          440,
          441,
          444,
          445,
          446,
          448,
          451,
          452,
          454,
          455,
          456,
          457,
          460,
          463,
          464,
          475,
          476,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          527,
          528,
          529,
          530,
          531,
          533,
          534,
          536,
          537,
          539,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          728,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          830,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          849,
          851,
          852,
          856,
          857,
          858,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          954,
          955,
          960,
          967,
          968,
          969,
          970,
          971,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1053,
          1057,
          1058,
          1059,
          1063,
          1064,
          1065,
          1069,
          1070,
          1071,
          1075,
          1076,
          1077,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          1069,
          1106
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          134,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          210,
          211,
          212,
          213,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          324,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          376,
          381,
          384,
          388,
          391,
          392,
          393,
          394,
          395,
          397,
          402,
          407,
          408,
          409,
          410,
          411,
          415,
          416,
          419,
          421,
          422,
          423,
          424,
          425,
          426,
          428,
          430,
          439,
          440,
          441,
          444,
          445,
          446,
          448,
          451,
          452,
          454,
          455,
          456,
          457,
          460,
          463,
          464,
          475,
          476,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          527,
          528,
          529,
          530,
          531,
          533,
          534,
          536,
          537,
          539,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          728,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          830,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          849,
          851,
          852,
          856,
          857,
          858,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          954,
          955,
          960,
          967,
          968,
          969,
          970,
          971,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1053,
          1057,
          1058,
          1059,
          1063,
          1064,
          1065,
          1069,
          1070,
          1071,
          1075,
          1076,
          1077,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          1108,
          1151
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          134,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          210,
          211,
          212,
          213,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          326,
          327,
          328,
          329,
          331,
          337,
          338,
          339,
          340,
          343,
          345,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          371,
          372,
          373,
          381,
          384,
          388,
          475,
          476,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          527,
          528,
          529,
          530,
          531,
          533,
          534,
          536,
          537,
          539,
          548,
          568,
          569,
          570,
          573,
          574,
          576,
          577,
          588,
          589,
          591,
          592,
          596,
          604,
          605,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          630,
          631,
          632,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          684,
          686,
          688,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          728,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          830,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          847,
          851,
          852,
          856,
          857,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          954,
          955,
          960,
          967,
          968,
          969,
          970,
          971,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1053,
          1057,
          1058,
          1059,
          1063,
          1064,
          1065,
          1069,
          1070,
          1071,
          1075,
          1076,
          1077,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          1153,
          1206
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          134,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          210,
          211,
          212,
          213,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          326,
          327,
          328,
          329,
          331,
          337,
          338,
          339,
          340,
          343,
          345,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          371,
          372,
          373,
          381,
          384,
          388,
          475,
          476,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          527,
          528,
          529,
          530,
          531,
          533,
          534,
          536,
          537,
          539,
          548,
          568,
          569,
          570,
          573,
          574,
          576,
          577,
          588,
          589,
          591,
          592,
          596,
          604,
          605,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          630,
          631,
          632,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          684,
          686,
          688,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          728,
          731,
          732,
          735,
          736,
          738,
          759,
          762,
          764,
          765,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          830,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          847,
          851,
          852,
          856,
          857,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          954,
          955,
          960,
          967,
          968,
          969,
          970,
          971,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1053,
          1057,
          1058,
          1059,
          1063,
          1064,
          1065,
          1069,
          1070,
          1071,
          1075,
          1076,
          1077,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          1208,
          1279
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          134,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          210,
          211,
          212,
          213,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          326,
          327,
          328,
          329,
          331,
          337,
          338,
          339,
          340,
          343,
          345,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          371,
          372,
          373,
          381,
          384,
          388,
          475,
          476,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          527,
          528,
          529,
          530,
          531,
          533,
          534,
          536,
          537,
          539,
          548,
          568,
          569,
          570,
          573,
          574,
          576,
          577,
          588,
          589,
          591,
          592,
          596,
          604,
          605,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          630,
          631,
          632,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          684,
          686,
          688,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          728,
          731,
          732,
          735,
          736,
          738,
          767,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          830,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          847,
          851,
          852,
          856,
          857,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          954,
          955,
          960,
          967,
          968,
          969,
          970,
          971,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1053,
          1057,
          1058,
          1059,
          1063,
          1064,
          1065,
          1069,
          1070,
          1071,
          1075,
          1076,
          1077,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          1281,
          1348
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          134,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          210,
          211,
          212,
          213,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          326,
          327,
          328,
          329,
          331,
          337,
          338,
          339,
          340,
          343,
          345,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          371,
          372,
          373,
          381,
          384,
          388,
          475,
          476,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          527,
          528,
          529,
          530,
          531,
          533,
          534,
          536,
          537,
          539,
          548,
          568,
          569,
          570,
          573,
          574,
          576,
          577,
          588,
          589,
          591,
          592,
          596,
          604,
          605,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          630,
          631,
          632,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          684,
          686,
          688,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          728,
          731,
          732,
          735,
          736,
          738,
          741,
          744,
          746,
          747,
          749,
          750,
          753,
          755,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          830,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          847,
          851,
          852,
          856,
          857,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          954,
          955,
          960,
          967,
          968,
          969,
          970,
          971,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1053,
          1057,
          1058,
          1059,
          1063,
          1064,
          1065,
          1069,
          1070,
          1071,
          1075,
          1076,
          1077,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          1350,
          1408
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          134,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          210,
          211,
          212,
          213,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          326,
          327,
          328,
          329,
          331,
          337,
          338,
          339,
          340,
          343,
          345,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          371,
          372,
          373,
          381,
          384,
          388,
          475,
          476,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          527,
          528,
          529,
          530,
          531,
          533,
          534,
          536,
          537,
          539,
          548,
          568,
          569,
          570,
          573,
          574,
          576,
          577,
          588,
          589,
          591,
          592,
          596,
          604,
          605,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          630,
          631,
          632,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          684,
          686,
          688,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          728,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          830,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          847,
          851,
          852,
          856,
          857,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          954,
          955,
          960,
          967,
          968,
          969,
          970,
          971,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1053,
          1057,
          1058,
          1059,
          1063,
          1064,
          1065,
          1069,
          1070,
          1071,
          1075,
          1076,
          1077,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          1410,
          1462
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          134,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          210,
          211,
          212,
          213,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          324,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          376,
          377,
          378,
          381,
          384,
          388,
          475,
          476,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          527,
          528,
          529,
          530,
          531,
          533,
          534,
          536,
          537,
          539,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          684,
          686,
          688,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          728,
          731,
          732,
          735,
          736,
          738,
          759,
          762,
          764,
          765,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          830,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          847,
          851,
          852,
          856,
          857,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          954,
          955,
          960,
          967,
          968,
          969,
          970,
          971,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1053,
          1057,
          1058,
          1059,
          1063,
          1064,
          1065,
          1069,
          1070,
          1071,
          1075,
          1076,
          1077,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          1464,
          1507
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          134,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          210,
          211,
          212,
          213,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          324,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          371,
          381,
          384,
          388,
          391,
          392,
          393,
          394,
          395,
          397,
          402,
          407,
          408,
          409,
          410,
          411,
          412,
          413,
          414,
          419,
          421,
          430,
          439,
          440,
          441,
          444,
          445,
          446,
          448,
          449,
          451,
          452,
          454,
          455,
          456,
          457,
          460,
          463,
          464,
          475,
          476,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          527,
          528,
          529,
          530,
          531,
          533,
          534,
          536,
          537,
          539,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          728,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          830,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          847,
          849,
          851,
          852,
          856,
          857,
          858,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          954,
          955,
          960,
          967,
          968,
          969,
          970,
          971,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1053,
          1057,
          1058,
          1059,
          1063,
          1064,
          1065,
          1069,
          1070,
          1071,
          1075,
          1076,
          1077,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          1509,
          1554
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          134,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          210,
          211,
          212,
          213,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          324,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          371,
          381,
          384,
          388,
          391,
          392,
          393,
          394,
          395,
          397,
          402,
          407,
          408,
          409,
          410,
          411,
          412,
          413,
          414,
          419,
          421,
          430,
          439,
          440,
          441,
          444,
          445,
          446,
          448,
          451,
          452,
          454,
          455,
          456,
          457,
          460,
          463,
          464,
          475,
          476,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          527,
          528,
          529,
          530,
          531,
          533,
          534,
          536,
          537,
          539,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          728,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          830,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          849,
          851,
          852,
          856,
          857,
          858,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          954,
          955,
          960,
          967,
          968,
          969,
          970,
          971,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1053,
          1057,
          1058,
          1059,
          1063,
          1064,
          1065,
          1069,
          1070,
          1071,
          1075,
          1076,
          1077,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          1556,
          1594
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          134,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          210,
          211,
          212,
          213,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          324,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          371,
          372,
          373,
          381,
          384,
          388,
          391,
          392,
          393,
          394,
          395,
          397,
          402,
          407,
          408,
          409,
          410,
          411,
          412,
          413,
          414,
          419,
          421,
          430,
          439,
          440,
          441,
          444,
          445,
          446,
          448,
          451,
          452,
          454,
          455,
          456,
          457,
          460,
          463,
          464,
          475,
          476,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          527,
          528,
          529,
          530,
          531,
          533,
          534,
          536,
          537,
          539,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          728,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          830,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          847,
          849,
          851,
          852,
          856,
          857,
          858,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          954,
          955,
          960,
          967,
          968,
          969,
          970,
          971,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1053,
          1057,
          1058,
          1059,
          1063,
          1064,
          1065,
          1069,
          1070,
          1071,
          1075,
          1076,
          1077,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          1596,
          1634
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          134,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          210,
          211,
          212,
          213,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          324,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          376,
          381,
          384,
          388,
          391,
          392,
          393,
          394,
          395,
          397,
          402,
          407,
          408,
          409,
          410,
          411,
          415,
          416,
          419,
          421,
          422,
          423,
          424,
          425,
          426,
          428,
          430,
          439,
          440,
          441,
          444,
          445,
          446,
          447,
          448,
          451,
          452,
          454,
          455,
          456,
          457,
          460,
          463,
          464,
          475,
          476,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          527,
          528,
          529,
          530,
          531,
          533,
          534,
          536,
          537,
          539,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          728,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          830,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          847,
          849,
          851,
          852,
          856,
          857,
          858,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          954,
          955,
          960,
          967,
          968,
          969,
          970,
          971,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1053,
          1057,
          1058,
          1059,
          1063,
          1064,
          1065,
          1069,
          1070,
          1071,
          1075,
          1076,
          1077,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          1636,
          1673
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          134,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          210,
          211,
          212,
          213,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          324,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          371,
          372,
          373,
          381,
          384,
          388,
          391,
          392,
          393,
          394,
          395,
          397,
          402,
          407,
          408,
          409,
          410,
          411,
          412,
          413,
          414,
          419,
          421,
          430,
          439,
          440,
          441,
          444,
          445,
          446,
          448,
          451,
          452,
          454,
          455,
          456,
          457,
          460,
          463,
          464,
          475,
          476,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          527,
          528,
          529,
          530,
          531,
          533,
          534,
          536,
          537,
          539,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          728,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          830,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          847,
          849,
          851,
          852,
          856,
          857,
          858,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          954,
          955,
          960,
          967,
          968,
          969,
          970,
          971,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1053,
          1057,
          1058,
          1059,
          1063,
          1064,
          1065,
          1069,
          1070,
          1071,
          1075,
          1076,
          1077,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          1675,
          1713
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          134,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          210,
          211,
          212,
          213,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          324,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          376,
          377,
          378,
          381,
          384,
          388,
          391,
          392,
          393,
          394,
          395,
          397,
          402,
          407,
          408,
          409,
          410,
          411,
          415,
          416,
          419,
          421,
          422,
          423,
          424,
          425,
          426,
          428,
          430,
          439,
          440,
          441,
          444,
          445,
          446,
          448,
          451,
          452,
          454,
          455,
          456,
          457,
          460,
          463,
          464,
          475,
          476,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          527,
          528,
          529,
          530,
          531,
          533,
          534,
          536,
          537,
          539,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          728,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          830,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          847,
          849,
          851,
          852,
          856,
          857,
          858,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          954,
          955,
          960,
          967,
          968,
          969,
          970,
          971,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1053,
          1057,
          1058,
          1059,
          1063,
          1064,
          1065,
          1069,
          1070,
          1071,
          1075,
          1076,
          1077,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          1715,
          1755
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          134,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          210,
          211,
          212,
          213,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          271,
          272,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          324,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          371,
          372,
          373,
          381,
          384,
          388,
          475,
          476,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          527,
          528,
          529,
          530,
          531,
          533,
          534,
          536,
          537,
          539,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          728,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          830,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          847,
          851,
          852,
          856,
          857,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          954,
          955,
          960,
          967,
          968,
          969,
          970,
          971,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1053,
          1057,
          1058,
          1059,
          1063,
          1064,
          1065,
          1069,
          1070,
          1071,
          1075,
          1076,
          1077,
          1082,
          1083,
          1084,
          1088,
          1089,
          1090,
          1094,
          1097,
          1113,
          1114,
          1115,
          1116,
          1122,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1174,
          1175,
          1177,
          1178,
          1179,
          1180,
          1183,
          1187,
          1188,
          1189,
          1191,
          1193,
          1194,
          1195,
          1197,
          1200,
          1201,
          1202
        ]
      },
      {
        "test_lines": [
          1757,
          1802
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          134,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          210,
          211,
          212,
          213,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          324,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          371,
          381,
          384,
          388,
          391,
          392,
          393,
          394,
          395,
          397,
          402,
          407,
          408,
          409,
          410,
          411,
          412,
          413,
          414,
          419,
          421,
          430,
          439,
          440,
          441,
          444,
          445,
          446,
          448,
          451,
          452,
          454,
          455,
          456,
          457,
          460,
          463,
          464,
          475,
          476,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          527,
          528,
          529,
          530,
          531,
          533,
          534,
          536,
          537,
          539,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          728,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          830,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          849,
          851,
          852,
          856,
          857,
          858,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          954,
          955,
          960,
          967,
          968,
          969,
          970,
          971,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1053,
          1057,
          1058,
          1059,
          1063,
          1064,
          1065,
          1069,
          1070,
          1071,
          1075,
          1076,
          1077,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          1804,
          1847
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          134,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          210,
          211,
          212,
          213,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          324,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          371,
          372,
          373,
          381,
          384,
          388,
          475,
          476,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          527,
          528,
          529,
          530,
          531,
          533,
          534,
          536,
          537,
          539,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          728,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          830,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          847,
          851,
          852,
          856,
          857,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          954,
          955,
          960,
          967,
          968,
          969,
          970,
          971,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1053,
          1057,
          1058,
          1059,
          1063,
          1064,
          1065,
          1069,
          1070,
          1071,
          1075,
          1076,
          1077,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          1849,
          1894
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          134,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          210,
          211,
          212,
          213,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          324,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          371,
          381,
          384,
          388,
          391,
          392,
          393,
          394,
          395,
          397,
          402,
          407,
          408,
          409,
          410,
          411,
          412,
          413,
          414,
          419,
          421,
          430,
          439,
          440,
          441,
          444,
          445,
          446,
          448,
          449,
          451,
          452,
          454,
          455,
          456,
          457,
          460,
          463,
          464,
          475,
          476,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          527,
          528,
          529,
          530,
          531,
          533,
          534,
          536,
          537,
          539,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          728,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          830,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          847,
          849,
          851,
          852,
          856,
          857,
          858,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          954,
          955,
          960,
          967,
          968,
          969,
          970,
          971,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1053,
          1057,
          1058,
          1059,
          1063,
          1064,
          1065,
          1069,
          1070,
          1071,
          1075,
          1076,
          1077,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          1896,
          1941
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          134,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          210,
          211,
          212,
          213,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          324,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          376,
          377,
          378,
          381,
          384,
          388,
          391,
          392,
          393,
          394,
          395,
          397,
          402,
          407,
          408,
          409,
          410,
          411,
          415,
          416,
          419,
          421,
          422,
          423,
          424,
          425,
          426,
          428,
          430,
          439,
          440,
          441,
          444,
          445,
          446,
          448,
          451,
          452,
          454,
          455,
          456,
          457,
          460,
          463,
          464,
          475,
          476,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          527,
          528,
          529,
          530,
          531,
          533,
          534,
          536,
          537,
          539,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          728,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          830,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          847,
          849,
          851,
          852,
          856,
          857,
          858,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          954,
          955,
          960,
          967,
          968,
          969,
          970,
          971,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1053,
          1057,
          1058,
          1059,
          1063,
          1064,
          1065,
          1069,
          1070,
          1071,
          1075,
          1076,
          1077,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          1943,
          1970
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          134,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          210,
          211,
          212,
          213,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          326,
          327,
          328,
          329,
          331,
          337,
          338,
          339,
          340,
          343,
          345,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          371,
          376,
          381,
          384,
          388,
          391,
          392,
          393,
          394,
          395,
          397,
          402,
          407,
          408,
          409,
          410,
          411,
          412,
          413,
          414,
          419,
          421,
          430,
          432,
          433,
          434,
          436,
          439,
          440,
          441,
          444,
          445,
          446,
          448,
          451,
          452,
          454,
          455,
          456,
          457,
          460,
          463,
          464,
          475,
          476,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          527,
          528,
          529,
          530,
          531,
          533,
          534,
          536,
          537,
          539,
          548,
          568,
          569,
          570,
          573,
          574,
          576,
          577,
          588,
          589,
          591,
          592,
          596,
          604,
          605,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          630,
          631,
          632,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          728,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          830,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          849,
          851,
          852,
          856,
          857,
          858,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          954,
          955,
          960,
          967,
          968,
          969,
          970,
          971,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1053,
          1057,
          1058,
          1059,
          1063,
          1064,
          1065,
          1069,
          1070,
          1071,
          1075,
          1076,
          1077,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          1972,
          2013
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          134,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          210,
          211,
          212,
          213,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          326,
          327,
          328,
          329,
          331,
          337,
          338,
          339,
          340,
          343,
          345,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          371,
          376,
          381,
          384,
          388,
          391,
          392,
          393,
          394,
          395,
          397,
          402,
          407,
          408,
          409,
          410,
          411,
          412,
          413,
          414,
          419,
          421,
          430,
          432,
          433,
          434,
          436,
          439,
          440,
          441,
          444,
          445,
          446,
          448,
          451,
          452,
          454,
          455,
          456,
          457,
          460,
          463,
          464,
          475,
          476,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          527,
          528,
          529,
          530,
          531,
          533,
          534,
          536,
          537,
          539,
          548,
          568,
          569,
          570,
          573,
          574,
          576,
          577,
          588,
          589,
          591,
          592,
          596,
          604,
          605,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          630,
          631,
          632,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          728,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          830,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          849,
          851,
          852,
          856,
          857,
          858,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          954,
          955,
          960,
          967,
          968,
          969,
          970,
          971,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1053,
          1057,
          1058,
          1059,
          1063,
          1064,
          1065,
          1069,
          1070,
          1071,
          1075,
          1076,
          1077,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          2015,
          2036
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          134,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          210,
          211,
          212,
          213,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          324,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          371,
          372,
          373,
          381,
          384,
          388,
          475,
          476,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          527,
          528,
          529,
          530,
          531,
          533,
          534,
          536,
          537,
          539,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          728,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          830,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          847,
          851,
          852,
          856,
          857,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          954,
          955,
          960,
          967,
          968,
          969,
          970,
          971,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1053,
          1057,
          1058,
          1059,
          1063,
          1064,
          1065,
          1069,
          1070,
          1071,
          1075,
          1076,
          1077,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          2038,
          2059
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          134,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          210,
          211,
          212,
          213,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          324,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          371,
          372,
          373,
          381,
          384,
          388,
          391,
          392,
          393,
          394,
          395,
          397,
          402,
          407,
          408,
          409,
          410,
          411,
          412,
          413,
          414,
          419,
          421,
          430,
          439,
          440,
          441,
          444,
          445,
          446,
          448,
          451,
          452,
          454,
          455,
          456,
          457,
          460,
          463,
          464,
          475,
          476,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          527,
          528,
          529,
          530,
          531,
          533,
          534,
          536,
          537,
          539,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          728,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          830,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          847,
          849,
          851,
          852,
          856,
          857,
          858,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          954,
          955,
          960,
          967,
          968,
          969,
          970,
          971,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1053,
          1057,
          1058,
          1059,
          1063,
          1064,
          1065,
          1069,
          1070,
          1071,
          1075,
          1076,
          1077,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          2061,
          2082
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          134,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          210,
          211,
          212,
          213,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          324,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          371,
          381,
          384,
          388,
          391,
          392,
          393,
          394,
          395,
          397,
          402,
          407,
          408,
          409,
          410,
          411,
          412,
          413,
          414,
          419,
          421,
          430,
          439,
          440,
          441,
          444,
          445,
          446,
          448,
          451,
          452,
          454,
          455,
          456,
          457,
          460,
          463,
          464,
          475,
          476,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          527,
          528,
          529,
          530,
          531,
          533,
          534,
          536,
          537,
          539,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          728,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          830,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          849,
          851,
          852,
          856,
          857,
          858,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          954,
          955,
          960,
          967,
          968,
          969,
          970,
          971,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1053,
          1057,
          1058,
          1059,
          1063,
          1064,
          1065,
          1069,
          1070,
          1071,
          1075,
          1076,
          1077,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          2084,
          2105
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          134,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          210,
          211,
          212,
          213,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          324,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          376,
          381,
          384,
          388,
          391,
          392,
          393,
          394,
          395,
          397,
          402,
          407,
          408,
          409,
          410,
          411,
          415,
          416,
          419,
          421,
          422,
          423,
          424,
          425,
          426,
          428,
          430,
          439,
          440,
          441,
          444,
          445,
          446,
          448,
          451,
          452,
          454,
          455,
          456,
          457,
          460,
          463,
          464,
          475,
          476,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          527,
          528,
          529,
          530,
          531,
          533,
          534,
          536,
          537,
          539,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          728,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          830,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          849,
          851,
          852,
          856,
          857,
          858,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          954,
          955,
          960,
          967,
          968,
          969,
          970,
          971,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1053,
          1057,
          1058,
          1059,
          1063,
          1064,
          1065,
          1069,
          1070,
          1071,
          1075,
          1076,
          1077,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          2107,
          2128
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          134,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          210,
          211,
          212,
          213,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          324,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          376,
          381,
          384,
          388,
          391,
          392,
          393,
          394,
          395,
          397,
          402,
          407,
          408,
          409,
          410,
          411,
          415,
          416,
          419,
          421,
          422,
          423,
          424,
          425,
          426,
          428,
          430,
          439,
          440,
          441,
          444,
          445,
          446,
          448,
          451,
          452,
          454,
          455,
          456,
          457,
          460,
          463,
          464,
          475,
          476,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          527,
          528,
          529,
          530,
          531,
          533,
          534,
          536,
          537,
          539,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          728,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          830,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          849,
          851,
          852,
          856,
          857,
          858,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          954,
          955,
          960,
          967,
          968,
          969,
          970,
          971,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1053,
          1057,
          1058,
          1059,
          1063,
          1064,
          1065,
          1069,
          1070,
          1071,
          1075,
          1076,
          1077,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          2130,
          2151
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          134,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          210,
          211,
          212,
          213,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          324,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          376,
          381,
          384,
          388,
          391,
          392,
          393,
          394,
          395,
          397,
          402,
          403,
          407,
          408,
          409,
          410,
          411,
          415,
          416,
          419,
          421,
          422,
          423,
          424,
          425,
          426,
          428,
          430,
          439,
          440,
          441,
          444,
          445,
          446,
          448,
          451,
          452,
          454,
          455,
          456,
          457,
          460,
          463,
          464,
          475,
          476,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          527,
          528,
          529,
          530,
          531,
          533,
          534,
          536,
          537,
          539,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          728,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          830,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          849,
          851,
          852,
          856,
          857,
          858,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          954,
          955,
          960,
          967,
          968,
          969,
          970,
          971,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1053,
          1057,
          1058,
          1059,
          1063,
          1064,
          1065,
          1069,
          1070,
          1071,
          1075,
          1076,
          1077,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          2153,
          2174
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          134,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          210,
          211,
          212,
          213,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          324,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          376,
          381,
          384,
          388,
          391,
          392,
          393,
          394,
          395,
          397,
          402,
          407,
          408,
          409,
          410,
          411,
          415,
          416,
          419,
          421,
          422,
          423,
          424,
          425,
          426,
          428,
          430,
          439,
          440,
          441,
          444,
          445,
          446,
          448,
          451,
          452,
          454,
          455,
          456,
          457,
          460,
          463,
          464,
          475,
          476,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          527,
          528,
          529,
          530,
          531,
          533,
          534,
          536,
          537,
          539,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          728,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          830,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          849,
          851,
          852,
          856,
          857,
          858,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          954,
          955,
          960,
          967,
          968,
          969,
          970,
          971,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1053,
          1057,
          1058,
          1059,
          1063,
          1064,
          1065,
          1069,
          1070,
          1071,
          1075,
          1076,
          1077,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          2176,
          2197
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          134,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          210,
          211,
          212,
          213,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          324,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          376,
          381,
          384,
          388,
          391,
          392,
          393,
          394,
          395,
          397,
          402,
          407,
          408,
          409,
          410,
          411,
          415,
          416,
          419,
          421,
          422,
          423,
          424,
          425,
          426,
          428,
          430,
          439,
          440,
          441,
          444,
          445,
          446,
          448,
          451,
          452,
          454,
          455,
          456,
          457,
          460,
          463,
          464,
          475,
          476,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          527,
          528,
          529,
          530,
          531,
          533,
          534,
          536,
          537,
          539,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          728,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          830,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          849,
          851,
          852,
          856,
          857,
          858,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          954,
          955,
          960,
          967,
          968,
          969,
          970,
          971,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1053,
          1057,
          1058,
          1059,
          1063,
          1064,
          1065,
          1069,
          1070,
          1071,
          1075,
          1076,
          1077,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          2199,
          2220
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          134,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          210,
          211,
          212,
          213,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          324,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          376,
          381,
          384,
          388,
          391,
          392,
          393,
          394,
          395,
          397,
          402,
          407,
          408,
          409,
          410,
          411,
          415,
          416,
          419,
          421,
          422,
          423,
          424,
          425,
          426,
          428,
          430,
          439,
          440,
          441,
          444,
          445,
          446,
          448,
          451,
          452,
          454,
          455,
          456,
          457,
          460,
          463,
          464,
          475,
          476,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          527,
          528,
          529,
          530,
          531,
          533,
          534,
          536,
          537,
          539,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          728,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          830,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          849,
          851,
          852,
          856,
          857,
          858,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          954,
          955,
          960,
          967,
          968,
          969,
          970,
          971,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1053,
          1057,
          1058,
          1059,
          1063,
          1064,
          1065,
          1069,
          1070,
          1071,
          1075,
          1076,
          1077,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          2222,
          2243
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          134,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          210,
          211,
          212,
          213,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          324,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          376,
          381,
          384,
          388,
          391,
          392,
          393,
          394,
          395,
          397,
          402,
          407,
          408,
          409,
          410,
          411,
          415,
          416,
          419,
          421,
          422,
          423,
          424,
          425,
          426,
          428,
          430,
          439,
          440,
          441,
          444,
          445,
          446,
          448,
          451,
          452,
          454,
          455,
          456,
          457,
          460,
          463,
          464,
          475,
          476,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          527,
          528,
          529,
          530,
          531,
          533,
          534,
          536,
          537,
          539,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          728,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          830,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          849,
          851,
          852,
          856,
          857,
          858,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          954,
          955,
          960,
          967,
          968,
          969,
          970,
          971,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1053,
          1057,
          1058,
          1059,
          1063,
          1064,
          1065,
          1069,
          1070,
          1071,
          1075,
          1076,
          1077,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          2245,
          2266
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          134,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          210,
          211,
          212,
          213,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          324,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          376,
          377,
          378,
          381,
          384,
          388,
          475,
          476,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          527,
          528,
          529,
          530,
          531,
          533,
          534,
          536,
          537,
          539,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          728,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          830,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          847,
          851,
          852,
          856,
          857,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          954,
          955,
          960,
          967,
          968,
          969,
          970,
          971,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1053,
          1057,
          1058,
          1059,
          1063,
          1064,
          1065,
          1069,
          1070,
          1071,
          1075,
          1076,
          1077,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          2268,
          2289
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          134,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          210,
          211,
          212,
          213,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          324,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          376,
          377,
          378,
          381,
          384,
          388,
          475,
          476,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          527,
          528,
          529,
          530,
          531,
          533,
          534,
          536,
          537,
          539,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          728,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          830,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          847,
          851,
          852,
          856,
          857,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          954,
          955,
          960,
          967,
          968,
          969,
          970,
          971,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1053,
          1057,
          1058,
          1059,
          1063,
          1064,
          1065,
          1069,
          1070,
          1071,
          1075,
          1076,
          1077,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          2291,
          2311
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          134,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          210,
          211,
          212,
          213,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          326,
          327,
          328,
          329,
          331,
          337,
          338,
          339,
          340,
          343,
          345,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          371,
          372,
          373,
          381,
          384,
          388,
          475,
          476,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          527,
          528,
          529,
          530,
          531,
          533,
          534,
          536,
          537,
          539,
          548,
          568,
          569,
          570,
          573,
          574,
          576,
          577,
          588,
          589,
          591,
          592,
          596,
          604,
          605,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          630,
          631,
          632,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          728,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          830,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          847,
          851,
          852,
          856,
          857,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          954,
          955,
          960,
          967,
          968,
          969,
          970,
          971,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1053,
          1057,
          1058,
          1059,
          1063,
          1064,
          1065,
          1069,
          1070,
          1071,
          1075,
          1076,
          1077,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          2313,
          2335
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          134,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          210,
          211,
          212,
          213,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          326,
          327,
          328,
          329,
          331,
          337,
          338,
          339,
          340,
          343,
          345,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          371,
          372,
          373,
          381,
          384,
          388,
          475,
          476,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          527,
          528,
          529,
          530,
          531,
          533,
          534,
          536,
          537,
          539,
          548,
          568,
          569,
          570,
          573,
          574,
          576,
          577,
          588,
          589,
          591,
          592,
          596,
          604,
          605,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          630,
          631,
          632,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          728,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          830,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          847,
          851,
          852,
          856,
          857,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          954,
          955,
          960,
          967,
          968,
          969,
          970,
          971,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1053,
          1057,
          1058,
          1059,
          1063,
          1064,
          1065,
          1069,
          1070,
          1071,
          1075,
          1076,
          1077,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          2337,
          2359
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          134,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          210,
          211,
          212,
          213,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          326,
          327,
          328,
          329,
          331,
          337,
          338,
          339,
          340,
          343,
          345,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          371,
          372,
          373,
          381,
          384,
          388,
          475,
          476,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          527,
          528,
          529,
          530,
          531,
          533,
          534,
          536,
          537,
          539,
          548,
          568,
          569,
          570,
          573,
          574,
          576,
          577,
          588,
          589,
          591,
          592,
          596,
          604,
          605,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          630,
          631,
          632,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          728,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          830,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          847,
          851,
          852,
          856,
          857,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          954,
          955,
          960,
          967,
          968,
          969,
          970,
          971,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1053,
          1057,
          1058,
          1059,
          1063,
          1064,
          1065,
          1069,
          1070,
          1071,
          1075,
          1076,
          1077,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          2361,
          2383
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          134,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          210,
          211,
          212,
          213,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          326,
          327,
          328,
          329,
          331,
          337,
          338,
          339,
          340,
          343,
          345,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          371,
          372,
          373,
          381,
          384,
          388,
          475,
          476,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          527,
          528,
          529,
          530,
          531,
          533,
          534,
          536,
          537,
          539,
          548,
          568,
          569,
          570,
          573,
          574,
          576,
          577,
          588,
          589,
          591,
          592,
          596,
          604,
          605,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          630,
          631,
          632,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          728,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          830,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          847,
          851,
          852,
          856,
          857,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          954,
          955,
          960,
          967,
          968,
          969,
          970,
          971,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1053,
          1057,
          1058,
          1059,
          1063,
          1064,
          1065,
          1069,
          1070,
          1071,
          1075,
          1076,
          1077,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          2385,
          2407
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          134,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          210,
          211,
          212,
          213,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          326,
          327,
          328,
          329,
          331,
          337,
          338,
          339,
          340,
          343,
          345,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          371,
          372,
          373,
          381,
          384,
          388,
          475,
          476,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          527,
          528,
          529,
          530,
          531,
          533,
          534,
          536,
          537,
          539,
          548,
          568,
          569,
          570,
          573,
          574,
          576,
          577,
          588,
          589,
          591,
          592,
          596,
          604,
          605,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          630,
          631,
          632,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          728,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          830,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          847,
          851,
          852,
          856,
          857,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          954,
          955,
          960,
          967,
          968,
          969,
          970,
          971,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1053,
          1057,
          1058,
          1059,
          1063,
          1064,
          1065,
          1069,
          1070,
          1071,
          1075,
          1076,
          1077,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          2409,
          2431
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          134,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          210,
          211,
          212,
          213,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          326,
          327,
          328,
          329,
          331,
          337,
          338,
          339,
          340,
          343,
          345,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          371,
          381,
          384,
          388,
          391,
          392,
          393,
          394,
          395,
          397,
          402,
          407,
          408,
          409,
          410,
          411,
          412,
          413,
          414,
          419,
          421,
          430,
          439,
          440,
          441,
          444,
          445,
          446,
          448,
          451,
          452,
          454,
          455,
          456,
          457,
          460,
          463,
          464,
          475,
          476,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          527,
          528,
          529,
          530,
          531,
          533,
          534,
          536,
          537,
          539,
          548,
          568,
          569,
          570,
          573,
          574,
          576,
          577,
          588,
          589,
          591,
          592,
          596,
          604,
          605,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          630,
          631,
          632,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          728,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          830,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          849,
          851,
          852,
          856,
          857,
          858,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          954,
          955,
          960,
          967,
          968,
          969,
          970,
          971,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1053,
          1057,
          1058,
          1059,
          1063,
          1064,
          1065,
          1069,
          1070,
          1071,
          1075,
          1076,
          1077,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          2433,
          2455
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          134,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          210,
          211,
          212,
          213,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          326,
          327,
          328,
          329,
          331,
          337,
          338,
          339,
          340,
          343,
          345,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          371,
          381,
          384,
          388,
          391,
          392,
          393,
          394,
          395,
          397,
          402,
          407,
          408,
          409,
          410,
          411,
          412,
          413,
          414,
          419,
          421,
          430,
          439,
          440,
          441,
          444,
          445,
          446,
          448,
          451,
          452,
          454,
          455,
          456,
          457,
          460,
          463,
          464,
          475,
          476,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          527,
          528,
          529,
          530,
          531,
          533,
          534,
          536,
          537,
          539,
          548,
          568,
          569,
          570,
          573,
          574,
          576,
          577,
          588,
          589,
          591,
          592,
          596,
          604,
          605,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          630,
          631,
          632,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          728,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          830,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          849,
          851,
          852,
          856,
          857,
          858,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          954,
          955,
          960,
          967,
          968,
          969,
          970,
          971,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1053,
          1057,
          1058,
          1059,
          1063,
          1064,
          1065,
          1069,
          1070,
          1071,
          1075,
          1076,
          1077,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          2457,
          2479
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          134,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          210,
          211,
          212,
          213,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          326,
          327,
          328,
          329,
          331,
          337,
          338,
          339,
          340,
          343,
          345,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          371,
          381,
          384,
          388,
          391,
          392,
          393,
          394,
          395,
          397,
          402,
          407,
          408,
          409,
          410,
          411,
          412,
          413,
          414,
          419,
          421,
          430,
          439,
          440,
          441,
          444,
          445,
          446,
          448,
          451,
          452,
          454,
          455,
          456,
          457,
          460,
          463,
          464,
          475,
          476,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          527,
          528,
          529,
          530,
          531,
          533,
          534,
          536,
          537,
          539,
          548,
          568,
          569,
          570,
          573,
          574,
          576,
          577,
          588,
          589,
          591,
          592,
          596,
          604,
          605,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          630,
          631,
          632,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          728,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          830,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          849,
          851,
          852,
          856,
          857,
          858,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          954,
          955,
          960,
          967,
          968,
          969,
          970,
          971,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1053,
          1057,
          1058,
          1059,
          1063,
          1064,
          1065,
          1069,
          1070,
          1071,
          1075,
          1076,
          1077,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          2481,
          2503
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          134,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          210,
          211,
          212,
          213,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          326,
          327,
          328,
          329,
          331,
          337,
          338,
          339,
          340,
          343,
          345,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          371,
          372,
          373,
          381,
          384,
          388,
          475,
          476,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          527,
          528,
          529,
          530,
          531,
          533,
          534,
          536,
          537,
          539,
          548,
          568,
          569,
          570,
          573,
          574,
          576,
          577,
          588,
          589,
          591,
          592,
          596,
          604,
          605,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          630,
          631,
          632,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          728,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          830,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          847,
          851,
          852,
          856,
          857,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          954,
          955,
          960,
          967,
          968,
          969,
          970,
          971,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1053,
          1057,
          1058,
          1059,
          1063,
          1064,
          1065,
          1069,
          1070,
          1071,
          1075,
          1076,
          1077,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          2505,
          2527
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          134,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          210,
          211,
          212,
          213,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          326,
          327,
          328,
          329,
          331,
          337,
          338,
          339,
          340,
          343,
          345,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          371,
          381,
          384,
          388,
          391,
          392,
          393,
          394,
          395,
          397,
          402,
          407,
          408,
          409,
          410,
          411,
          412,
          413,
          414,
          419,
          421,
          430,
          439,
          440,
          441,
          444,
          445,
          446,
          448,
          451,
          452,
          454,
          455,
          456,
          457,
          460,
          463,
          464,
          475,
          476,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          527,
          528,
          529,
          530,
          531,
          533,
          534,
          536,
          537,
          539,
          548,
          568,
          569,
          570,
          573,
          574,
          576,
          577,
          588,
          589,
          591,
          592,
          596,
          604,
          605,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          630,
          631,
          632,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          728,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          830,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          849,
          851,
          852,
          856,
          857,
          858,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          954,
          955,
          960,
          967,
          968,
          969,
          970,
          971,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1053,
          1057,
          1058,
          1059,
          1063,
          1064,
          1065,
          1069,
          1070,
          1071,
          1075,
          1076,
          1077,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          2529,
          2550
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          134,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          210,
          211,
          212,
          213,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          324,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          371,
          372,
          373,
          381,
          384,
          388,
          475,
          476,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          527,
          528,
          529,
          530,
          531,
          533,
          534,
          536,
          537,
          539,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          728,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          830,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          847,
          851,
          852,
          856,
          857,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          954,
          955,
          960,
          967,
          968,
          969,
          970,
          971,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1053,
          1057,
          1058,
          1059,
          1063,
          1064,
          1065,
          1069,
          1070,
          1071,
          1075,
          1076,
          1077,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          2552,
          2573
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          134,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          210,
          211,
          212,
          213,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          324,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          371,
          381,
          384,
          388,
          391,
          392,
          393,
          394,
          395,
          397,
          402,
          407,
          408,
          409,
          410,
          411,
          412,
          413,
          414,
          419,
          421,
          430,
          439,
          440,
          441,
          444,
          445,
          446,
          448,
          451,
          452,
          454,
          455,
          456,
          457,
          460,
          463,
          464,
          475,
          476,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          527,
          528,
          529,
          530,
          531,
          533,
          534,
          536,
          537,
          539,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          728,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          830,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          849,
          851,
          852,
          856,
          857,
          858,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          954,
          955,
          960,
          967,
          968,
          969,
          970,
          971,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1053,
          1057,
          1058,
          1059,
          1063,
          1064,
          1065,
          1069,
          1070,
          1071,
          1075,
          1076,
          1077,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          2575,
          2596
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          134,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          210,
          211,
          212,
          213,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          324,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          371,
          372,
          373,
          381,
          384,
          388,
          475,
          476,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          527,
          528,
          529,
          530,
          531,
          533,
          534,
          536,
          537,
          539,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          728,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          830,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          847,
          851,
          852,
          856,
          857,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          954,
          955,
          960,
          967,
          968,
          969,
          970,
          971,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1053,
          1057,
          1058,
          1059,
          1063,
          1064,
          1065,
          1069,
          1070,
          1071,
          1075,
          1076,
          1077,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          2598,
          2619
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          134,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          210,
          211,
          212,
          213,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          324,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          371,
          372,
          373,
          381,
          384,
          388,
          391,
          392,
          393,
          394,
          395,
          397,
          402,
          407,
          408,
          409,
          410,
          411,
          412,
          413,
          414,
          419,
          421,
          430,
          439,
          440,
          441,
          444,
          445,
          446,
          448,
          451,
          452,
          454,
          455,
          456,
          457,
          460,
          463,
          464,
          475,
          476,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          527,
          528,
          529,
          530,
          531,
          533,
          534,
          536,
          537,
          539,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          728,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          830,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          847,
          849,
          851,
          852,
          856,
          857,
          858,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          954,
          955,
          960,
          967,
          968,
          969,
          970,
          971,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1053,
          1057,
          1058,
          1059,
          1063,
          1064,
          1065,
          1069,
          1070,
          1071,
          1075,
          1076,
          1077,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          2621,
          2642
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          134,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          210,
          211,
          212,
          213,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          324,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          371,
          381,
          384,
          388,
          391,
          392,
          393,
          394,
          395,
          397,
          402,
          407,
          408,
          409,
          410,
          411,
          412,
          413,
          414,
          419,
          421,
          430,
          439,
          440,
          441,
          444,
          445,
          446,
          448,
          451,
          452,
          454,
          455,
          456,
          457,
          460,
          463,
          464,
          475,
          476,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          527,
          528,
          529,
          530,
          531,
          533,
          534,
          536,
          537,
          539,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          728,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          830,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          849,
          851,
          852,
          856,
          857,
          858,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          954,
          955,
          960,
          967,
          968,
          969,
          970,
          971,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1053,
          1057,
          1058,
          1059,
          1063,
          1064,
          1065,
          1069,
          1070,
          1071,
          1075,
          1076,
          1077,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          2644,
          2665
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          134,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          210,
          211,
          212,
          213,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          324,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          376,
          381,
          384,
          388,
          391,
          392,
          393,
          394,
          395,
          397,
          402,
          407,
          408,
          409,
          410,
          411,
          415,
          416,
          419,
          421,
          422,
          423,
          424,
          425,
          426,
          428,
          430,
          439,
          440,
          441,
          444,
          445,
          446,
          448,
          451,
          452,
          454,
          455,
          456,
          457,
          460,
          463,
          464,
          475,
          476,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          527,
          528,
          529,
          530,
          531,
          533,
          534,
          536,
          537,
          539,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          728,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          830,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          849,
          851,
          852,
          856,
          857,
          858,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          954,
          955,
          960,
          967,
          968,
          969,
          970,
          971,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1053,
          1057,
          1058,
          1059,
          1063,
          1064,
          1065,
          1069,
          1070,
          1071,
          1075,
          1076,
          1077,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          2667,
          2688
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          134,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          210,
          211,
          212,
          213,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          324,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          376,
          381,
          384,
          388,
          391,
          392,
          393,
          394,
          395,
          397,
          402,
          407,
          408,
          409,
          410,
          411,
          415,
          416,
          419,
          421,
          422,
          423,
          424,
          425,
          426,
          428,
          430,
          439,
          440,
          441,
          444,
          445,
          446,
          448,
          451,
          452,
          454,
          455,
          456,
          457,
          460,
          463,
          464,
          475,
          476,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          527,
          528,
          529,
          530,
          531,
          533,
          534,
          536,
          537,
          539,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          728,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          830,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          849,
          851,
          852,
          856,
          857,
          858,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          954,
          955,
          960,
          967,
          968,
          969,
          970,
          971,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1053,
          1057,
          1058,
          1059,
          1063,
          1064,
          1065,
          1069,
          1070,
          1071,
          1075,
          1076,
          1077,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          2690,
          2711
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          134,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          210,
          211,
          212,
          213,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          324,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          376,
          381,
          384,
          388,
          391,
          392,
          393,
          394,
          395,
          397,
          402,
          403,
          407,
          408,
          409,
          410,
          411,
          415,
          416,
          419,
          421,
          422,
          423,
          424,
          425,
          426,
          428,
          430,
          439,
          440,
          441,
          444,
          445,
          446,
          448,
          451,
          452,
          454,
          455,
          456,
          457,
          460,
          463,
          464,
          475,
          476,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          527,
          528,
          529,
          530,
          531,
          533,
          534,
          536,
          537,
          539,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          728,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          830,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          849,
          851,
          852,
          856,
          857,
          858,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          954,
          955,
          960,
          967,
          968,
          969,
          970,
          971,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1053,
          1057,
          1058,
          1059,
          1063,
          1064,
          1065,
          1069,
          1070,
          1071,
          1075,
          1076,
          1077,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          2713,
          2734
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          134,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          210,
          211,
          212,
          213,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          324,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          376,
          381,
          384,
          388,
          391,
          392,
          393,
          394,
          395,
          397,
          402,
          407,
          408,
          409,
          410,
          411,
          415,
          416,
          419,
          421,
          422,
          423,
          424,
          425,
          426,
          428,
          430,
          439,
          440,
          441,
          444,
          445,
          446,
          448,
          451,
          452,
          454,
          455,
          456,
          457,
          460,
          463,
          464,
          475,
          476,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          527,
          528,
          529,
          530,
          531,
          533,
          534,
          536,
          537,
          539,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          728,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          830,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          849,
          851,
          852,
          856,
          857,
          858,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          954,
          955,
          960,
          967,
          968,
          969,
          970,
          971,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1053,
          1057,
          1058,
          1059,
          1063,
          1064,
          1065,
          1069,
          1070,
          1071,
          1075,
          1076,
          1077,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          2736,
          2757
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          134,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          210,
          211,
          212,
          213,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          324,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          376,
          381,
          384,
          388,
          391,
          392,
          393,
          394,
          395,
          397,
          402,
          407,
          408,
          409,
          410,
          411,
          415,
          416,
          419,
          421,
          422,
          423,
          424,
          425,
          426,
          428,
          430,
          439,
          440,
          441,
          444,
          445,
          446,
          448,
          451,
          452,
          454,
          455,
          456,
          457,
          460,
          463,
          464,
          475,
          476,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          527,
          528,
          529,
          530,
          531,
          533,
          534,
          536,
          537,
          539,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          728,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          830,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          849,
          851,
          852,
          856,
          857,
          858,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          954,
          955,
          960,
          967,
          968,
          969,
          970,
          971,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1053,
          1057,
          1058,
          1059,
          1063,
          1064,
          1065,
          1069,
          1070,
          1071,
          1075,
          1076,
          1077,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          2759,
          2780
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          134,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          210,
          211,
          212,
          213,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          324,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          376,
          381,
          384,
          388,
          391,
          392,
          393,
          394,
          395,
          397,
          402,
          407,
          408,
          409,
          410,
          411,
          415,
          416,
          419,
          421,
          422,
          423,
          424,
          425,
          426,
          428,
          430,
          439,
          440,
          441,
          444,
          445,
          446,
          448,
          451,
          452,
          454,
          455,
          456,
          457,
          460,
          463,
          464,
          475,
          476,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          527,
          528,
          529,
          530,
          531,
          533,
          534,
          536,
          537,
          539,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          728,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          830,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          849,
          851,
          852,
          856,
          857,
          858,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          954,
          955,
          960,
          967,
          968,
          969,
          970,
          971,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1053,
          1057,
          1058,
          1059,
          1063,
          1064,
          1065,
          1069,
          1070,
          1071,
          1075,
          1076,
          1077,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          2782,
          2803
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          134,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          210,
          211,
          212,
          213,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          324,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          376,
          381,
          384,
          388,
          391,
          392,
          393,
          394,
          395,
          397,
          402,
          407,
          408,
          409,
          410,
          411,
          415,
          416,
          419,
          421,
          422,
          423,
          424,
          425,
          426,
          428,
          430,
          439,
          440,
          441,
          444,
          445,
          446,
          448,
          451,
          452,
          454,
          455,
          456,
          457,
          460,
          463,
          464,
          475,
          476,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          527,
          528,
          529,
          530,
          531,
          533,
          534,
          536,
          537,
          539,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          728,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          830,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          849,
          851,
          852,
          856,
          857,
          858,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          954,
          955,
          960,
          967,
          968,
          969,
          970,
          971,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1053,
          1057,
          1058,
          1059,
          1063,
          1064,
          1065,
          1069,
          1070,
          1071,
          1075,
          1076,
          1077,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          2805,
          2826
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          134,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          210,
          211,
          212,
          213,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          324,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          376,
          377,
          378,
          381,
          384,
          388,
          475,
          476,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          527,
          528,
          529,
          530,
          531,
          533,
          534,
          536,
          537,
          539,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          728,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          830,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          847,
          851,
          852,
          856,
          857,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          954,
          955,
          960,
          967,
          968,
          969,
          970,
          971,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1053,
          1057,
          1058,
          1059,
          1063,
          1064,
          1065,
          1069,
          1070,
          1071,
          1075,
          1076,
          1077,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          2828,
          2850
        ],
        "covered_lines": [
          48,
          56,
          75,
          76,
          86,
          89,
          90,
          91,
          92,
          94,
          95,
          96,
          97,
          98,
          100,
          101,
          106,
          107,
          110,
          111,
          112,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          134,
          141,
          144,
          151,
          152,
          158,
          162,
          163,
          171,
          178,
          179,
          180,
          181,
          182,
          183,
          184,
          185,
          187,
          191,
          192,
          193,
          197,
          202,
          203,
          204,
          210,
          211,
          212,
          213,
          220,
          223,
          227,
          231,
          235,
          236,
          237,
          246,
          248,
          249,
          250,
          251,
          257,
          260,
          269,
          270,
          274,
          280,
          305,
          307,
          308,
          311,
          315,
          316,
          320,
          321,
          323,
          324,
          349,
          350,
          353,
          357,
          360,
          361,
          362,
          363,
          367,
          369,
          370,
          376,
          377,
          378,
          381,
          384,
          388,
          475,
          476,
          503,
          504,
          505,
          506,
          507,
          508,
          512,
          517,
          527,
          528,
          529,
          530,
          531,
          533,
          534,
          536,
          537,
          539,
          548,
          568,
          569,
          570,
          571,
          607,
          613,
          614,
          616,
          618,
          622,
          623,
          624,
          625,
          626,
          627,
          628,
          629,
          637,
          642,
          646,
          647,
          648,
          651,
          653,
          654,
          663,
          664,
          665,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          678,
          679,
          680,
          683,
          686,
          688,
          703,
          704,
          707,
          710,
          716,
          717,
          718,
          719,
          720,
          723,
          724,
          725,
          728,
          731,
          732,
          735,
          736,
          738,
          784,
          788,
          792,
          796,
          799,
          800,
          801,
          804,
          805,
          807,
          808,
          809,
          812,
          813,
          814,
          815,
          820,
          821,
          824,
          828,
          829,
          830,
          836,
          837,
          838,
          841,
          844,
          845,
          846,
          847,
          851,
          852,
          856,
          857,
          860,
          861,
          865,
          870,
          871,
          872,
          873,
          874,
          877,
          878,
          880,
          881,
          888,
          889,
          890,
          891,
          895,
          897,
          899,
          901,
          903,
          905,
          907,
          908,
          914,
          934,
          935,
          936,
          937,
          938,
          940,
          941,
          946,
          954,
          955,
          960,
          967,
          968,
          969,
          970,
          971,
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1051,
          1052,
          1053,
          1057,
          1058,
          1059,
          1063,
          1064,
          1065,
          1069,
          1070,
          1071,
          1075,
          1076,
          1077,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          2852,
          2866
        ],
        "covered_lines": [
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048
        ]
      },
      {
        "test_lines": [
          2868,
          2876
        ],
        "covered_lines": [
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1063,
          1064,
          1065,
          1082,
          1083,
          1084,
          1094,
          1097,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          2878,
          2885
        ],
        "covered_lines": [
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1063,
          1064,
          1065,
          1082,
          1083,
          1084,
          1094,
          1101,
          1134,
          1135,
          1140,
          1141,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          2887,
          2904
        ],
        "covered_lines": [
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1063,
          1064,
          1065,
          1082,
          1083,
          1084,
          1094,
          1101,
          1134,
          1135,
          1140,
          1141,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1180,
          1183
        ]
      },
      {
        "test_lines": [
          2906,
          2925
        ],
        "covered_lines": [
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1063,
          1064,
          1065,
          1082,
          1083,
          1084,
          1094,
          1101,
          1134,
          1135,
          1140,
          1141,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1177,
          1178,
          1179,
          1183
        ]
      },
      {
        "test_lines": [
          2927,
          2934
        ],
        "covered_lines": [
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1063,
          1064,
          1065,
          1082,
          1083,
          1084,
          1088,
          1089,
          1090,
          1113,
          1114,
          1115,
          1116,
          1122,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1174,
          1175,
          1177,
          1178,
          1179,
          1180,
          1183,
          1187,
          1188,
          1189,
          1191,
          1193,
          1194,
          1195,
          1197,
          1200,
          1201,
          1202
        ]
      },
      {
        "test_lines": [
          2936,
          2951
        ],
        "covered_lines": [
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1063,
          1064,
          1065,
          1082,
          1083,
          1084,
          1088,
          1089,
          1092,
          1113,
          1114,
          1115,
          1116,
          1117,
          1119,
          1120,
          1122,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1174,
          1175,
          1177,
          1178,
          1179,
          1180,
          1183,
          1187,
          1188,
          1189,
          1190,
          1191,
          1193,
          1194,
          1195,
          1196,
          1197,
          1200,
          1201,
          1202
        ]
      },
      {
        "test_lines": [
          2953,
          2972
        ],
        "covered_lines": [
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1063,
          1064,
          1065,
          1082,
          1083,
          1084,
          1088,
          1089,
          1092,
          1113,
          1114,
          1115,
          1116,
          1117,
          1119,
          1120,
          1122,
          1134,
          1135,
          1140,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1174,
          1175,
          1177,
          1178,
          1179,
          1180,
          1183,
          1187,
          1188,
          1189,
          1190,
          1193,
          1194,
          1195,
          1196,
          1200,
          1201,
          1202
        ]
      },
      {
        "test_lines": [
          2974,
          2991
        ],
        "covered_lines": [
          1015,
          1016,
          1017,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1034,
          1035,
          1038,
          1039,
          1040,
          1042,
          1043,
          1044,
          1045,
          1047,
          1048,
          1063,
          1064,
          1065,
          1082,
          1083,
          1084,
          1094,
          1101,
          1134,
          1135,
          1140,
          1141,
          1145,
          1157,
          1158,
          1160,
          1167,
          1168,
          1170,
          1171,
          1173,
          1174,
          1175,
          1177,
          1178,
          1179,
          1180,
          1183,
          1187,
          1188,
          1189,
          1190,
          1191,
          1193,
          1194,
          1195,
          1196,
          1197,
          1200,
          1201,
          1202
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/itext-java/layout/src/main/java/com/itextpdf/layout/renderer/TypographyUtils.java": {
    "class_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.layout.renderer;\n",
      "\n",
      "import com.itextpdf.io.font.FontProgram;\n",
      "import com.itextpdf.io.font.TrueTypeFont;\n",
      "import com.itextpdf.io.font.otf.GlyphLine;\n",
      "import com.itextpdf.commons.actions.sequence.SequenceId;\n",
      "import com.itextpdf.commons.actions.contexts.IMetaInfo;\n",
      "import com.itextpdf.layout.properties.BaseDirection;\n",
      "import com.itextpdf.layout.renderer.typography.AbstractTypographyApplier;\n",
      "import com.itextpdf.layout.renderer.typography.DefaultTypographyApplier;\n",
      "\n",
      "import java.io.IOException;\n",
      "import java.lang.Character.UnicodeScript;\n",
      "import java.lang.reflect.Method;\n",
      "import java.util.Collection;\n",
      "import java.util.List;\n",
      "import java.util.Map;\n",
      "\n",
      "public final class TypographyUtils {\n",
      "\n",
      "    private static final String TYPOGRAPHY_PACKAGE = \"com.itextpdf.typography.\";\n",
      "    private static final String TYPOGRAPHY_APPLIER = \"shaping.TypographyApplier\";\n",
      "\n",
      "    private static final String TYPOGRAPHY_APPLIER_INITIALIZE = \"registerForLayout\";\n",
      "\n",
      "    private static AbstractTypographyApplier applierInstance;\n",
      "\n",
      "    static {\n",
      "        try {\n",
      "            Class<?> type = getTypographyClass(TYPOGRAPHY_PACKAGE + TYPOGRAPHY_APPLIER);\n",
      "            if (type != null) {\n",
      "                Method method = type.getMethod(TYPOGRAPHY_APPLIER_INITIALIZE, new Class[] {});\n",
      "                if (method != null) {\n",
      "                    method.invoke(null, new Object[] {});\n",
      "                }\n",
      "            }\n",
      "        } catch (Exception ignored) {\n",
      "            // do nothing\n",
      "        }\n",
      "        if (applierInstance == null) {\n",
      "            setTypographyApplierInstance(new DefaultTypographyApplier());\n",
      "        }\n",
      "    }\n",
      "\n",
      "    private TypographyUtils() {\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Set {@link AbstractTypographyApplier} instance to use.\n",
      "     *\n",
      "     * @param newInstance the instance to set\n",
      "     */\n",
      "    public static void setTypographyApplierInstance(AbstractTypographyApplier newInstance) {\n",
      "        applierInstance = newInstance;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Checks if layout module can access pdfCalligraph\n",
      "     * @return <code>true</code> if layout can access pdfCalligraph and <code>false</code> otherwise\n",
      "     */\n",
      "    public static boolean isPdfCalligraphAvailable() {\n",
      "        return applierInstance.isPdfCalligraphInstance();\n",
      "    }\n",
      "\n",
      "    public static Collection<Character.UnicodeScript> getSupportedScripts() {\n",
      "        return applierInstance.getSupportedScripts();\n",
      "    }\n",
      "\n",
      "    public static Collection<Character.UnicodeScript> getSupportedScripts(Object typographyConfig) {\n",
      "        return applierInstance.getSupportedScripts(typographyConfig);\n",
      "    }\n",
      "\n",
      "    public static Map<String, byte[]> loadShippedFonts() throws IOException {\n",
      "        return applierInstance.loadShippedFonts();\n",
      "    }\n",
      "\n",
      "    static void applyOtfScript(FontProgram fontProgram, GlyphLine text, UnicodeScript script, Object typographyConfig,\n",
      "            SequenceId sequenceId, IMetaInfo metaInfo) {\n",
      "        applierInstance.applyOtfScript((TrueTypeFont) fontProgram, text, script, typographyConfig,\n",
      "                sequenceId, metaInfo);\n",
      "    }\n",
      "\n",
      "    static void applyKerning(FontProgram fontProgram, GlyphLine text, SequenceId sequenceId, IMetaInfo metaInfo) {\n",
      "        applierInstance.applyKerning(fontProgram, text, sequenceId, metaInfo);\n",
      "    }\n",
      "\n",
      "    static byte[] getBidiLevels(BaseDirection baseDirection, int[] unicodeIds,\n",
      "            SequenceId sequenceId, IMetaInfo metaInfo) {\n",
      "        return applierInstance.getBidiLevels(baseDirection, unicodeIds, sequenceId, metaInfo);\n",
      "    }\n",
      "\n",
      "    static int[] reorderLine(List<LineRenderer.RendererGlyph> line, byte[] lineLevels, byte[] levels) {\n",
      "        return applierInstance.reorderLine(line, lineLevels, levels);\n",
      "    }\n",
      "\n",
      "    static List<Integer> getPossibleBreaks(String str) {\n",
      "        return applierInstance.getPossibleBreaks(str);\n",
      "    }\n",
      "\n",
      "    private static Class<?> getTypographyClass(String typographyClassName) throws ClassNotFoundException {\n",
      "        return Class.forName(typographyClassName);\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.layout.renderer;\n",
      "\n",
      "import com.itextpdf.test.ExtendedITextTest;\n",
      "import com.itextpdf.test.annotations.type.UnitTest;\n",
      "\n",
      "import org.junit.Assert;\n",
      "import org.junit.Test;\n",
      "import org.junit.experimental.categories.Category;\n",
      "\n",
      "@Category(UnitTest.class)\n",
      "public class TypographyUtilsTest extends ExtendedITextTest {\n",
      "\n",
      "    @Test\n",
      "    public void verifyPdfCalligraphIsNotAvailable() {\n",
      "        Assert.assertFalse(TypographyUtils.isPdfCalligraphAvailable());\n",
      "    }\n",
      "\n",
      "}\n"
    ],
    "method_lines_dic": {
      "TypographyUtils::::setTypographyApplierInstance(com.itextpdf.layout.renderer.typography.AbstractTypographyApplier)": [
        75,
        77
      ],
      "TypographyUtils::::isPdfCalligraphAvailable()": [
        83,
        85
      ],
      "TypographyUtils::::getSupportedScripts()": [
        87,
        89
      ],
      "TypographyUtils::::getSupportedScripts(java.lang.Object)": [
        91,
        93
      ],
      "TypographyUtils::::loadShippedFonts()": [
        95,
        97
      ],
      "TypographyUtils::::reorderLine(java.util.List<com.itextpdf.layout.renderer.LineRenderer.RendererGlyph>,byte[],byte[])": [
        114,
        116
      ],
      "TypographyUtils::::getPossibleBreaks(java.lang.String)": [
        118,
        120
      ],
      "TypographyUtils::::getTypographyClass(java.lang.String)": [
        122,
        124
      ]
    },
    "test_method_lines_dic": {
      "TypographyUtilsTest::::verifyPdfCalligraphIsNotAvailable()": [
        35,
        38
      ]
    },
    "reverse_method_lines_dic": {
      "75": "TypographyUtils::::setTypographyApplierInstance(com.itextpdf.layout.renderer.typography.AbstractTypographyApplier)",
      "76": "TypographyUtils::::setTypographyApplierInstance(com.itextpdf.layout.renderer.typography.AbstractTypographyApplier)",
      "77": "TypographyUtils::::setTypographyApplierInstance(com.itextpdf.layout.renderer.typography.AbstractTypographyApplier)",
      "83": "TypographyUtils::::isPdfCalligraphAvailable()",
      "84": "TypographyUtils::::isPdfCalligraphAvailable()",
      "85": "TypographyUtils::::isPdfCalligraphAvailable()",
      "87": "TypographyUtils::::getSupportedScripts()",
      "88": "TypographyUtils::::getSupportedScripts()",
      "89": "TypographyUtils::::getSupportedScripts()",
      "91": "TypographyUtils::::getSupportedScripts(java.lang.Object)",
      "92": "TypographyUtils::::getSupportedScripts(java.lang.Object)",
      "93": "TypographyUtils::::getSupportedScripts(java.lang.Object)",
      "95": "TypographyUtils::::loadShippedFonts()",
      "96": "TypographyUtils::::loadShippedFonts()",
      "97": "TypographyUtils::::loadShippedFonts()",
      "114": "TypographyUtils::::reorderLine(java.util.List<com.itextpdf.layout.renderer.LineRenderer.RendererGlyph>,byte[],byte[])",
      "115": "TypographyUtils::::reorderLine(java.util.List<com.itextpdf.layout.renderer.LineRenderer.RendererGlyph>,byte[],byte[])",
      "116": "TypographyUtils::::reorderLine(java.util.List<com.itextpdf.layout.renderer.LineRenderer.RendererGlyph>,byte[],byte[])",
      "118": "TypographyUtils::::getPossibleBreaks(java.lang.String)",
      "119": "TypographyUtils::::getPossibleBreaks(java.lang.String)",
      "120": "TypographyUtils::::getPossibleBreaks(java.lang.String)",
      "122": "TypographyUtils::::getTypographyClass(java.lang.String)",
      "123": "TypographyUtils::::getTypographyClass(java.lang.String)",
      "124": "TypographyUtils::::getTypographyClass(java.lang.String)"
    },
    "test_reverse_method_lines_dic": {
      "35": "TypographyUtilsTest::::verifyPdfCalligraphIsNotAvailable()",
      "36": "TypographyUtilsTest::::verifyPdfCalligraphIsNotAvailable()",
      "37": "TypographyUtilsTest::::verifyPdfCalligraphIsNotAvailable()",
      "38": "TypographyUtilsTest::::verifyPdfCalligraphIsNotAvailable()"
    },
    "tests": [
      {
        "test_lines": [
          35,
          38
        ],
        "covered_lines": [
          59,
          62,
          63,
          65,
          76,
          77,
          84
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/itext-java/layout/src/main/java/com/itextpdf/layout/renderer/FlexContainerRenderer.java": {
    "class_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.layout.renderer;\n",
      "\n",
      "import com.itextpdf.kernel.geom.Rectangle;\n",
      "import com.itextpdf.layout.borders.Border;\n",
      "import com.itextpdf.layout.element.Div;\n",
      "import com.itextpdf.layout.layout.LayoutArea;\n",
      "import com.itextpdf.layout.layout.LayoutContext;\n",
      "import com.itextpdf.layout.layout.LayoutResult;\n",
      "import com.itextpdf.layout.margincollapse.MarginsCollapseHandler;\n",
      "import com.itextpdf.layout.margincollapse.MarginsCollapseInfo;\n",
      "import com.itextpdf.layout.minmaxwidth.MinMaxWidth;\n",
      "import com.itextpdf.layout.minmaxwidth.MinMaxWidthUtils;\n",
      "import com.itextpdf.layout.properties.AlignmentPropertyValue;\n",
      "import com.itextpdf.layout.properties.BaseDirection;\n",
      "import com.itextpdf.layout.properties.FlexDirectionPropertyValue;\n",
      "import com.itextpdf.layout.properties.FlexWrapPropertyValue;\n",
      "import com.itextpdf.layout.properties.OverflowPropertyValue;\n",
      "import com.itextpdf.layout.properties.Property;\n",
      "import com.itextpdf.layout.properties.UnitValue;\n",
      "\n",
      "import java.util.ArrayList;\n",
      "import java.util.Collections;\n",
      "import java.util.HashMap;\n",
      "import java.util.List;\n",
      "import java.util.Map;\n",
      "import java.util.Set;\n",
      "\n",
      "public class FlexContainerRenderer extends DivRenderer {\n",
      "\n",
      "    /* Used for caching purposes in FlexUtil\n",
      "     * We couldn't find the real use case when this map contains more than 1 entry\n",
      "     * but let it still be a map to be on a safe(r) side\n",
      "     * Map mainSize (always width in our case) - hypotheticalCrossSize\n",
      "     */\n",
      "    private final Map<Float, Float> hypotheticalCrossSizes = new HashMap<>();\n",
      "\n",
      "    private List<List<FlexItemInfo>> lines;\n",
      "\n",
      "    private IFlexItemMainDirector flexItemMainDirector = null;\n",
      "\n",
      "    /**\n",
      "     * Creates a FlexContainerRenderer from its corresponding layout object.\n",
      "     *\n",
      "     * @param modelElement the {@link com.itextpdf.layout.element.Div} which this object should manage\n",
      "     */\n",
      "    public FlexContainerRenderer(Div modelElement) {\n",
      "        super(modelElement);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Gets a new instance of this class to be used as a next renderer, after this renderer is used, if\n",
      "     * {@link #layout(LayoutContext)} is called more than once.\n",
      "     *\n",
      "     * <p>\n",
      "     * If a renderer overflows to the next area, iText uses this method to create a renderer\n",
      "     * for the overflow part. So if one wants to extend {@link FlexContainerRenderer}, one should override\n",
      "     * this method: otherwise the default method will be used and thus the default rather than the custom\n",
      "     * renderer will be created.\n",
      "     *\n",
      "     * @return new renderer instance\n",
      "     */\n",
      "    @Override\n",
      "    public IRenderer getNextRenderer() {\n",
      "        logWarningIfGetNextRendererNotOverridden(FlexContainerRenderer.class, this.getClass());\n",
      "        return new FlexContainerRenderer((Div) modelElement);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * {@inheritDoc}\n",
      "     */\n",
      "    @Override\n",
      "    public LayoutResult layout(LayoutContext layoutContext) {\n",
      "        Rectangle layoutContextRectangle = layoutContext.getArea().getBBox();\n",
      "        setThisAsParent(getChildRenderers());\n",
      "        lines = FlexUtil.calculateChildrenRectangles(layoutContextRectangle, this);\n",
      "        applyWrapReverse();\n",
      "        List<IRenderer> renderers = getFlexItemMainDirector().applyDirection(lines);\n",
      "        removeAllChildRenderers(getChildRenderers());\n",
      "        addAllChildRenderers(renderers);\n",
      "\n",
      "        List<IRenderer> renderersToOverflow = retrieveRenderersToOverflow(layoutContextRectangle);\n",
      "\n",
      "        final List<UnitValue> previousWidths = new ArrayList<>();\n",
      "        final List<UnitValue> previousHeights = new ArrayList<>();\n",
      "        final List<UnitValue> previousMinHeights = new ArrayList<>();\n",
      "        for (final List<FlexItemInfo> line : lines) {\n",
      "            for (final FlexItemInfo itemInfo : line) {\n",
      "                final Rectangle rectangleWithoutBordersMarginsPaddings;\n",
      "                if (AbstractRenderer.isBorderBoxSizing(itemInfo.getRenderer())) {\n",
      "                    rectangleWithoutBordersMarginsPaddings =\n",
      "                            itemInfo.getRenderer().applyMargins(itemInfo.getRectangle().clone(), false);\n",
      "                } else {\n",
      "                    rectangleWithoutBordersMarginsPaddings =\n",
      "                            itemInfo.getRenderer().applyMarginsBordersPaddings(itemInfo.getRectangle().clone(), false);\n",
      "                }\n",
      "\n",
      "                previousWidths.add(itemInfo.getRenderer().<UnitValue>getProperty(Property.WIDTH));\n",
      "                previousHeights.add(itemInfo.getRenderer().<UnitValue>getProperty(Property.HEIGHT));\n",
      "                previousMinHeights.add(itemInfo.getRenderer().<UnitValue>getProperty(Property.MIN_HEIGHT));\n",
      "\n",
      "                itemInfo.getRenderer().setProperty(Property.WIDTH,\n",
      "                        UnitValue.createPointValue(rectangleWithoutBordersMarginsPaddings.getWidth()));\n",
      "                itemInfo.getRenderer().setProperty(Property.HEIGHT,\n",
      "                        UnitValue.createPointValue(rectangleWithoutBordersMarginsPaddings.getHeight()));\n",
      "                // TODO DEVSIX-1895 Once the ticket is closed, there will be no need in setting min-height\n",
      "                // In case element takes less vertical space than expected, we need to make sure\n",
      "                // it is extended to the height predicted by the algo\n",
      "                itemInfo.getRenderer().setProperty(Property.MIN_HEIGHT,\n",
      "                        UnitValue.createPointValue(rectangleWithoutBordersMarginsPaddings.getHeight()));\n",
      "\n",
      "                // Property.HORIZONTAL_ALIGNMENT mustn't play, in flex container items are aligned\n",
      "                // using justify-content and align-items\n",
      "                itemInfo.getRenderer().setProperty(Property.HORIZONTAL_ALIGNMENT, null);\n",
      "            }\n",
      "        }\n",
      "\n",
      "        LayoutResult result = super.layout(layoutContext);\n",
      "        if (!renderersToOverflow.isEmpty()) {\n",
      "            adjustLayoutResultToHandleOverflowRenderers(result, renderersToOverflow);\n",
      "        }\n",
      "\n",
      "        // We must set back widths of the children because multiple layouts are possible\n",
      "        // If flex-grow is less than 1, layout algorithm increases the width of the element based on the initial width\n",
      "        // And if we would not set back widths, every layout flex-item width will grow.\n",
      "        int counter = 0;\n",
      "        for (final List<FlexItemInfo> line : lines) {\n",
      "            for (final FlexItemInfo itemInfo : line) {\n",
      "                itemInfo.getRenderer().setProperty(Property.WIDTH, previousWidths.get(counter));\n",
      "                itemInfo.getRenderer().setProperty(Property.HEIGHT, previousHeights.get(counter));\n",
      "                itemInfo.getRenderer().setProperty(Property.MIN_HEIGHT, previousMinHeights.get(counter));\n",
      "                ++counter;\n",
      "            }\n",
      "        }\n",
      "        return result;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * {@inheritDoc}\n",
      "     */\n",
      "    @Override\n",
      "    public MinMaxWidth getMinMaxWidth() {\n",
      "        final MinMaxWidth minMaxWidth = new MinMaxWidth(calculateAdditionalWidth(this));\n",
      "        final AbstractWidthHandler minMaxWidthHandler = new MaxMaxWidthHandler(minMaxWidth);\n",
      "        if (!setMinMaxWidthBasedOnFixedWidth(minMaxWidth)) {\n",
      "            final Float minWidth = hasAbsoluteUnitValue(Property.MIN_WIDTH) ? retrieveMinWidth(0) : null;\n",
      "            final Float maxWidth = hasAbsoluteUnitValue(Property.MAX_WIDTH) ? retrieveMaxWidth(0) : null;\n",
      "            if (minWidth == null || maxWidth == null) {\n",
      "                findMinMaxWidthIfCorrespondingPropertiesAreNotSet(minMaxWidth, minMaxWidthHandler);\n",
      "            }\n",
      "            if (minWidth != null) {\n",
      "                minMaxWidth.setChildrenMinWidth((float) minWidth);\n",
      "            }\n",
      "            // if max-width was defined explicitly, it shouldn't be overwritten\n",
      "            if (maxWidth == null) {\n",
      "                if (minMaxWidth.getChildrenMinWidth() > minMaxWidth.getChildrenMaxWidth()) {\n",
      "                    minMaxWidth.setChildrenMaxWidth(minMaxWidth.getChildrenMinWidth());\n",
      "                }\n",
      "            } else {\n",
      "                minMaxWidth.setChildrenMaxWidth((float) maxWidth);\n",
      "            }\n",
      "        }\n",
      "\n",
      "        if (this.getPropertyAsFloat(Property.ROTATION_ANGLE) != null) {\n",
      "            return RotationUtils.countRotationMinMaxWidth(minMaxWidth, this);\n",
      "        }\n",
      "\n",
      "        return minMaxWidth;\n",
      "    }\n",
      "\n",
      "    IFlexItemMainDirector getFlexItemMainDirector() {\n",
      "        if (flexItemMainDirector == null) {\n",
      "            flexItemMainDirector = createMainDirector();\n",
      "        }\n",
      "\n",
      "        return flexItemMainDirector;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Check if flex container is wrapped reversely.\n",
      "     *\n",
      "     * @return {@code true} if flex-wrap property is set to wrap-reverse, {@code false} otherwise.\n",
      "     */\n",
      "    boolean isWrapReverse() {\n",
      "        return FlexWrapPropertyValue.WRAP_REVERSE ==\n",
      "                this.<FlexWrapPropertyValue>getProperty(Property.FLEX_WRAP, null);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * {@inheritDoc}\n",
      "     */\n",
      "    @Override\n",
      "    AbstractRenderer[] createSplitAndOverflowRenderers(int childPos, int layoutStatus, LayoutResult childResult,\n",
      "                                                       Map<Integer, IRenderer> waitingFloatsSplitRenderers,\n",
      "                                                       List<IRenderer> waitingOverflowFloatRenderers) {\n",
      "        final AbstractRenderer splitRenderer = createSplitRenderer(layoutStatus);\n",
      "        final AbstractRenderer overflowRenderer = createOverflowRenderer(layoutStatus);\n",
      "\n",
      "        final IRenderer childRenderer = getChildRenderers().get(childPos);\n",
      "        final boolean forcedPlacement = Boolean.TRUE.equals(this.<Boolean>getProperty(Property.FORCED_PLACEMENT));\n",
      "        boolean metChildRenderer = false;\n",
      "        for (int i = 0; i < lines.size(); ++i) {\n",
      "            List<FlexItemInfo> line = lines.get(i);\n",
      "            final boolean isSplitLine = line.stream().anyMatch(flexItem -> flexItem.getRenderer() == childRenderer);\n",
      "            metChildRenderer = metChildRenderer || isSplitLine;\n",
      "\n",
      "            // If the renderer to split is in the current line\n",
      "            if (isSplitLine && !forcedPlacement && layoutStatus == LayoutResult.PARTIAL &&\n",
      "                    (!FlexUtil.isColumnDirection(this) ||\n",
      "                            (i == 0 && line.get(0).getRenderer() == childRenderer))) {\n",
      "                // It has sense to call it also for LayoutResult.NOTHING. And then try to layout remaining renderers\n",
      "                // in line inside fillSplitOverflowRenderersForPartialResult to see if some of them can be left or\n",
      "                // partially left on the first page (in split renderer). But it's not that easy.\n",
      "                // So currently, if the 1st not fully layouted renderer is layouted with LayoutResult.NOTHING,\n",
      "                // the whole line is moved to the next page (overflow renderer).\n",
      "                fillSplitOverflowRenderersForPartialResult(splitRenderer, overflowRenderer, line, childRenderer,\n",
      "                        childResult);\n",
      "                getFlexItemMainDirector().applyDirectionForLine(overflowRenderer.getChildRenderers());\n",
      "            } else {\n",
      "                List<IRenderer> overflowRendererChildren = new ArrayList<IRenderer>();\n",
      "                boolean isSingleColumn = lines.size() == 1 && FlexUtil.isColumnDirection(this);\n",
      "                boolean metChildRendererInLine = false;\n",
      "                for (final FlexItemInfo itemInfo : line) {\n",
      "                    metChildRendererInLine = metChildRendererInLine || itemInfo.getRenderer() == childRenderer;\n",
      "                    if ((!isSingleColumn && metChildRenderer || metChildRendererInLine) && !forcedPlacement) {\n",
      "                        overflowRendererChildren.add(itemInfo.getRenderer());\n",
      "                    } else {\n",
      "                        splitRenderer.addChildRenderer(itemInfo.getRenderer());\n",
      "                    }\n",
      "                }\n",
      "                getFlexItemMainDirector().applyDirectionForLine(overflowRendererChildren);\n",
      "\n",
      "                // If wrapped reversely we should add a line into beginning to correctly recalculate\n",
      "                // and inverse lines while layouting overflowRenderer.\n",
      "                if (isWrapReverse()) {\n",
      "                    overflowRenderer.addAllChildRenderers(0, overflowRendererChildren);\n",
      "                } else {\n",
      "                    overflowRenderer.addAllChildRenderers(overflowRendererChildren);\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "\n",
      "        overflowRenderer.deleteOwnProperty(Property.FORCED_PLACEMENT);\n",
      "\n",
      "        return new AbstractRenderer[]{splitRenderer, overflowRenderer};\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    LayoutResult processNotFullChildResult(LayoutContext layoutContext,\n",
      "                                           Map<Integer, IRenderer> waitingFloatsSplitRenderers,\n",
      "                                           List<IRenderer> waitingOverflowFloatRenderers, boolean wasHeightClipped,\n",
      "                                           List<Rectangle> floatRendererAreas, boolean marginsCollapsingEnabled,\n",
      "                                           float clearHeightCorrection, Border[] borders, UnitValue[] paddings,\n",
      "                                           List<Rectangle> areas, int currentAreaPos, Rectangle layoutBox,\n",
      "                                           Set<Rectangle> nonChildFloatingRendererAreas, IRenderer causeOfNothing,\n",
      "                                           boolean anythingPlaced, int childPos, LayoutResult result) {\n",
      "        final boolean keepTogether = isKeepTogether(causeOfNothing);\n",
      "        if (Boolean.TRUE.equals(getPropertyAsBoolean(Property.FORCED_PLACEMENT)) || wasHeightClipped) {\n",
      "            final AbstractRenderer splitRenderer = keepTogether ? null : createSplitRenderer(result.getStatus());\n",
      "            if (splitRenderer != null) {\n",
      "                splitRenderer.setChildRenderers(getChildRenderers());\n",
      "            }\n",
      "\n",
      "            return new LayoutResult(LayoutResult.FULL,\n",
      "                    getOccupiedAreaInCaseNothingWasWrappedWithFull(result, splitRenderer), splitRenderer, null, null);\n",
      "        }\n",
      "\n",
      "        final AbstractRenderer[] splitAndOverflowRenderers = createSplitAndOverflowRenderers(\n",
      "                childPos, result.getStatus(), result, waitingFloatsSplitRenderers, waitingOverflowFloatRenderers);\n",
      "\n",
      "        AbstractRenderer splitRenderer = splitAndOverflowRenderers[0];\n",
      "        final AbstractRenderer overflowRenderer = splitAndOverflowRenderers[1];\n",
      "        overflowRenderer.deleteOwnProperty(Property.FORCED_PLACEMENT);\n",
      "        updateHeightsOnSplit(wasHeightClipped, splitRenderer, overflowRenderer);\n",
      "\n",
      "        if (isRelativePosition() && !positionedRenderers.isEmpty()) {\n",
      "            overflowRenderer.positionedRenderers = new ArrayList<>(positionedRenderers);\n",
      "        }\n",
      "\n",
      "        if (keepTogether) {\n",
      "            splitRenderer = null;\n",
      "            overflowRenderer.setChildRenderers(getChildRenderers());\n",
      "        }\n",
      "\n",
      "        correctFixedLayout(layoutBox);\n",
      "\n",
      "        applyAbsolutePositionIfNeeded(layoutContext);\n",
      "\n",
      "        applyPaddings(occupiedArea.getBBox(), paddings, true);\n",
      "        applyBorderBox(occupiedArea.getBBox(), borders, true);\n",
      "        applyMargins(occupiedArea.getBBox(), true);\n",
      "        if (splitRenderer == null || splitRenderer.getChildRenderers().isEmpty()) {\n",
      "            return new LayoutResult(LayoutResult.NOTHING, null, null, overflowRenderer,\n",
      "                    result.getCauseOfNothing()).setAreaBreak(result.getAreaBreak());\n",
      "        } else {\n",
      "            return new LayoutResult(LayoutResult.PARTIAL, layoutContext.getArea(), splitRenderer,\n",
      "                    overflowRenderer, null).setAreaBreak(result.getAreaBreak());\n",
      "        }\n",
      "    }\n",
      "\n",
      "    // TODO DEVSIX-5238 Consider this fix (perhaps it should be improved or unified) while working on the ticket\n",
      "    LayoutArea getOccupiedAreaInCaseNothingWasWrappedWithFull(LayoutResult result, IRenderer splitRenderer) {\n",
      "        return null != result.getOccupiedArea() ? result.getOccupiedArea() : splitRenderer.getOccupiedArea();\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    boolean stopLayoutingChildrenIfChildResultNotFull(LayoutResult returnResult) {\n",
      "        return returnResult.getStatus() != LayoutResult.FULL;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * {@inheritDoc}\n",
      "     */\n",
      "    @Override\n",
      "    void recalculateOccupiedAreaAfterChildLayout(Rectangle resultBBox, Float blockMaxHeight) {\n",
      "        final Rectangle oldBBox = occupiedArea.getBBox().clone();\n",
      "        final Rectangle recalculatedRectangle = Rectangle.getCommonRectangle(occupiedArea.getBBox(),\n",
      "                resultBBox);\n",
      "        occupiedArea.getBBox().setY(recalculatedRectangle.getY());\n",
      "        occupiedArea.getBBox().setHeight(recalculatedRectangle.getHeight());\n",
      "        if (oldBBox.getTop() < occupiedArea.getBBox().getTop()) {\n",
      "            occupiedArea.getBBox().decreaseHeight(occupiedArea.getBBox().getTop() - oldBBox.getTop());\n",
      "        }\n",
      "        if (null != blockMaxHeight &&\n",
      "                occupiedArea.getBBox().getHeight() > ((float) blockMaxHeight)) {\n",
      "            occupiedArea.getBBox()\n",
      "                    .moveUp(occupiedArea.getBBox().getHeight() - ((float) blockMaxHeight));\n",
      "            occupiedArea.getBBox().setHeight((float) blockMaxHeight);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    MarginsCollapseInfo startChildMarginsHandling(IRenderer childRenderer,\n",
      "                                                  Rectangle layoutBox, MarginsCollapseHandler marginsCollapseHandler) {\n",
      "        return marginsCollapseHandler.startChildMarginsHandling(null, layoutBox);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    void decreaseLayoutBoxAfterChildPlacement(Rectangle layoutBox, LayoutResult result, IRenderer childRenderer) {\n",
      "        if (FlexUtil.isColumnDirection(this)) {\n",
      "            decreaseLayoutBoxAfterChildPlacementColumnLayout(layoutBox, childRenderer);\n",
      "        } else {\n",
      "            decreaseLayoutBoxAfterChildPlacementRowLayout(layoutBox, result, childRenderer);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    void decreaseLayoutBoxAfterChildPlacementRowLayout(Rectangle layoutBox, LayoutResult result,\n",
      "                                                       IRenderer childRenderer) {\n",
      "        layoutBox.decreaseWidth(result.getOccupiedArea().getBBox().getRight() - layoutBox.getLeft());\n",
      "        layoutBox.setX(result.getOccupiedArea().getBBox().getRight());\n",
      "\n",
      "        List<FlexItemInfo> line = findLine(childRenderer);\n",
      "        final boolean isLastInLine = childRenderer.equals(line.get(line.size() - 1).getRenderer());\n",
      "        // If it was the last renderer in line we have to go to the next line (row)\n",
      "        if (isLastInLine) {\n",
      "            float minBottom = layoutBox.getTop();\n",
      "            float minLeft = layoutBox.getLeft();\n",
      "            float commonWidth = 0;\n",
      "            for (FlexItemInfo item : line) {\n",
      "                minLeft = Math.min(minLeft,\n",
      "                        item.getRenderer().getOccupiedArea().getBBox().getLeft() - item.getRectangle().getLeft());\n",
      "                minBottom = Math.min(minBottom, item.getRenderer().getOccupiedArea().getBBox().getBottom());\n",
      "                commonWidth += item.getRectangle().getLeft() + item.getRenderer().getOccupiedArea().getBBox().getWidth();\n",
      "            }\n",
      "\n",
      "            layoutBox.setX(minLeft);\n",
      "            layoutBox.increaseWidth(commonWidth);\n",
      "            layoutBox.decreaseHeight(layoutBox.getTop() - minBottom);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    void decreaseLayoutBoxAfterChildPlacementColumnLayout(Rectangle layoutBox, IRenderer childRenderer) {\n",
      "        FlexItemInfo childFlexItemInfo = findFlexItemInfo((AbstractRenderer) childRenderer);\n",
      "        layoutBox.decreaseHeight(childFlexItemInfo.getRenderer().getOccupiedArea().getBBox().getHeight() +\n",
      "                childFlexItemInfo.getRectangle().getY());\n",
      "\n",
      "        List<FlexItemInfo> line = findLine(childRenderer);\n",
      "        final boolean isLastInLine = childRenderer.equals(line.get(line.size() - 1).getRenderer());\n",
      "        // If it was the last renderer in line we have to go to the next line (row)\n",
      "        if (isLastInLine) {\n",
      "            float maxWidth = 0;\n",
      "            float commonHeight = 0;\n",
      "            for (FlexItemInfo item : line) {\n",
      "                maxWidth = Math.max(maxWidth, item.getRenderer().getOccupiedArea().getBBox().getWidth()\n",
      "                        + item.getRectangle().getX());\n",
      "                commonHeight += item.getRectangle().getY() + item.getRenderer().getOccupiedArea().getBBox().getHeight();\n",
      "            }\n",
      "            layoutBox.increaseHeight(commonHeight);\n",
      "            layoutBox.decreaseWidth(maxWidth);\n",
      "            layoutBox.moveRight(maxWidth);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    Rectangle recalculateLayoutBoxBeforeChildLayout(Rectangle layoutBox,\n",
      "                                                    IRenderer childRenderer, Rectangle initialLayoutBox) {\n",
      "        Rectangle layoutBoxCopy = layoutBox.clone();\n",
      "        if (childRenderer instanceof AbstractRenderer) {\n",
      "            FlexItemInfo childFlexItemInfo = findFlexItemInfo((AbstractRenderer) childRenderer);\n",
      "            if (childFlexItemInfo != null) {\n",
      "                layoutBoxCopy.decreaseWidth(childFlexItemInfo.getRectangle().getX());\n",
      "                layoutBoxCopy.moveRight(childFlexItemInfo.getRectangle().getX());\n",
      "\n",
      "                layoutBoxCopy.decreaseHeight(childFlexItemInfo.getRectangle().getY());\n",
      "            }\n",
      "        }\n",
      "        return layoutBoxCopy;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    void handleForcedPlacement(boolean anythingPlaced) {\n",
      "        // In (horizontal) FlexContainerRenderer Property.FORCED_PLACEMENT is still valid for other children\n",
      "        // so do nothing\n",
      "    }\n",
      "\n",
      "    void setHypotheticalCrossSize(Float mainSize, Float hypotheticalCrossSize) {\n",
      "        hypotheticalCrossSizes.put(mainSize.floatValue(), hypotheticalCrossSize);\n",
      "    }\n",
      "\n",
      "    Float getHypotheticalCrossSize(Float mainSize) {\n",
      "        return hypotheticalCrossSizes.get(mainSize.floatValue());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Apply wrap-reverse property.\n",
      "     */\n",
      "    private void applyWrapReverse() {\n",
      "        if (!isWrapReverse()) {\n",
      "            return;\n",
      "        }\n",
      "\n",
      "        Collections.reverse(lines);\n",
      "        List<IRenderer> reorderedRendererList = new ArrayList<>();\n",
      "        for (List<FlexItemInfo> line : lines) {\n",
      "            for (FlexItemInfo itemInfo : line) {\n",
      "                reorderedRendererList.add(itemInfo.getRenderer());\n",
      "            }\n",
      "        }\n",
      "\n",
      "        removeAllChildRenderers(getChildRenderers());\n",
      "        addAllChildRenderers(reorderedRendererList);\n",
      "    }\n",
      "\n",
      "    private FlexItemInfo findFlexItemInfo(AbstractRenderer renderer) {\n",
      "        for (List<FlexItemInfo> line : lines) {\n",
      "            for (FlexItemInfo itemInfo : line) {\n",
      "                if (itemInfo.getRenderer().equals(renderer)) {\n",
      "                    return itemInfo;\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "        return null;\n",
      "    }\n",
      "\n",
      "    private List<FlexItemInfo> findLine(IRenderer renderer) {\n",
      "        for (List<FlexItemInfo> line : lines) {\n",
      "            for (FlexItemInfo itemInfo : line) {\n",
      "                if (itemInfo.getRenderer().equals(renderer)) {\n",
      "                    return line;\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "        return null;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    void fixOccupiedAreaIfOverflowedX(OverflowPropertyValue overflowX, Rectangle layoutBox) {\n",
      "        // TODO DEVSIX-5087 Support overflow visible/hidden property correctly\n",
      "        return;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * {@inheritDoc}\n",
      "     */\n",
      "    @Override\n",
      "    public void addChild(IRenderer renderer) {\n",
      "        // TODO DEVSIX-5087 Since overflow-fit is an internal iText overflow value, we do not need to support if\n",
      "        // for html/css objects, such as flex. As for now we will set VISIBLE by default, however, while working\n",
      "        // on the ticket one may come to some more satifactory approach\n",
      "        renderer.setProperty(Property.OVERFLOW_X, OverflowPropertyValue.VISIBLE);\n",
      "        super.addChild(renderer);\n",
      "    }\n",
      "\n",
      "    private static void addSimulateDiv(AbstractRenderer overflowRenderer, float width) {\n",
      "        final IRenderer fakeOverflowRenderer = new DivRenderer(\n",
      "                new Div().setMinWidth(width).setMaxWidth(width));\n",
      "        overflowRenderer.addChildRenderer(fakeOverflowRenderer);\n",
      "    }\n",
      "\n",
      "    private void fillSplitOverflowRenderersForPartialResult(AbstractRenderer splitRenderer,\n",
      "                                                            AbstractRenderer overflowRenderer, List<FlexItemInfo> line, IRenderer childRenderer,\n",
      "                                                            LayoutResult childResult) {\n",
      "        float occupiedSpace = 0;\n",
      "        float maxHeightInLine = 0;\n",
      "        boolean metChildRendererInLine = false;\n",
      "        for (final FlexItemInfo itemInfo : line) {\n",
      "            // Split the line\n",
      "            if (itemInfo.getRenderer() == childRenderer) {\n",
      "                metChildRendererInLine = true;\n",
      "                if (childResult.getSplitRenderer() != null) {\n",
      "                    splitRenderer.addChildRenderer(childResult.getSplitRenderer());\n",
      "                }\n",
      "\n",
      "                if (childResult.getOverflowRenderer() != null) {\n",
      "                    // Get rid of vertical alignment for item with partial result. For column direction, justify-content\n",
      "                    // is applied to the entire line, not the single item, so there is no point in getting rid of it\n",
      "                    if (!FlexUtil.isColumnDirection(this)) {\n",
      "                        childResult.getOverflowRenderer().setProperty(Property.ALIGN_SELF, AlignmentPropertyValue.START);\n",
      "                    }\n",
      "                    overflowRenderer.addChildRenderer(childResult.getOverflowRenderer());\n",
      "                }\n",
      "\n",
      "                // Count the height allowed for the items after the one which was partially layouted\n",
      "                maxHeightInLine = Math.max(maxHeightInLine,\n",
      "                        itemInfo.getRectangle().getY() + itemInfo.getRenderer().getOccupiedAreaBBox().getHeight());\n",
      "            } else if (metChildRendererInLine) {\n",
      "                if (FlexUtil.isColumnDirection(this)) {\n",
      "                    overflowRenderer.addChildRenderer(itemInfo.getRenderer());\n",
      "                    continue;\n",
      "                }\n",
      "                // Process all following renderers in the current line\n",
      "                // We have to layout them to understand what goes where\n",
      "                // x - space occupied by all preceding items\n",
      "                // y - y of current occupied area\n",
      "                // width - item width\n",
      "                // height - allowed height for the item\n",
      "                final Rectangle neighbourBbox = new Rectangle(getOccupiedAreaBBox().getX() + occupiedSpace,\n",
      "                        getOccupiedAreaBBox().getY(),\n",
      "                        itemInfo.getRectangle().getWidth(),\n",
      "                        maxHeightInLine - itemInfo.getRectangle().getY());\n",
      "                final LayoutResult neighbourLayoutResult = itemInfo.getRenderer().layout(new LayoutContext(\n",
      "                        new LayoutArea(childResult.getOccupiedArea().getPageNumber(), neighbourBbox)));\n",
      "                // Handle result\n",
      "                if (neighbourLayoutResult.getStatus() == LayoutResult.PARTIAL &&\n",
      "                        neighbourLayoutResult.getSplitRenderer() != null) {\n",
      "                    splitRenderer.addChildRenderer(neighbourLayoutResult.getSplitRenderer());\n",
      "                } else if (neighbourLayoutResult.getStatus() == LayoutResult.FULL) {\n",
      "                    splitRenderer.addChildRenderer(itemInfo.getRenderer());\n",
      "                } else {\n",
      "                    // LayoutResult.NOTHING\n",
      "                }\n",
      "\n",
      "                if (neighbourLayoutResult.getOverflowRenderer() != null) {\n",
      "                    if (neighbourLayoutResult.getStatus() == LayoutResult.PARTIAL) {\n",
      "                        // Get rid of cross alignment for item with partial result\n",
      "                        neighbourLayoutResult.getOverflowRenderer()\n",
      "                                .setProperty(Property.ALIGN_SELF, AlignmentPropertyValue.START);\n",
      "                    }\n",
      "                    overflowRenderer.addChildRenderer(neighbourLayoutResult.getOverflowRenderer());\n",
      "                } else {\n",
      "                    // Here we might need to still occupy the space on overflow renderer\n",
      "                    addSimulateDiv(overflowRenderer, itemInfo.getRectangle().getWidth());\n",
      "                }\n",
      "            } else {\n",
      "                // Process all preceeding renderers in the current line\n",
      "                // They all were layouted as FULL so add them into split renderer\n",
      "                splitRenderer.addChildRenderer(itemInfo.getRenderer());\n",
      "\n",
      "                // But we also need to occupy the space on overflow renderer\n",
      "                addSimulateDiv(overflowRenderer, itemInfo.getRectangle().getWidth());\n",
      "\n",
      "                // Count the height allowed for the items after the one which was partially layouted\n",
      "                maxHeightInLine = Math.max(maxHeightInLine,\n",
      "                        itemInfo.getRectangle().getY() + itemInfo.getRenderer().getOccupiedAreaBBox().getHeight());\n",
      "            }\n",
      "\n",
      "            // X is nonzero only for the 1st renderer in line serving for alignment adjustments\n",
      "            occupiedSpace += itemInfo.getRectangle().getX() + itemInfo.getRectangle().getWidth();\n",
      "        }\n",
      "    }\n",
      "\n",
      "    private void findMinMaxWidthIfCorrespondingPropertiesAreNotSet(MinMaxWidth minMaxWidth,\n",
      "                                                                   AbstractWidthHandler minMaxWidthHandler) {\n",
      "        float initialMinWidth = minMaxWidth.getChildrenMinWidth();\n",
      "        float initialMaxWidth = minMaxWidth.getChildrenMaxWidth();\n",
      "        if (lines == null || lines.size() == 1) {\n",
      "            findMinMaxWidth(initialMinWidth, initialMaxWidth, minMaxWidthHandler, getChildRenderers());\n",
      "        } else {\n",
      "            for (List<FlexItemInfo> line : lines) {\n",
      "                List<IRenderer> childRenderers = new ArrayList<>();\n",
      "                for (FlexItemInfo itemInfo : line) {\n",
      "                    childRenderers.add(itemInfo.getRenderer());\n",
      "                }\n",
      "                findMinMaxWidth(initialMinWidth, initialMaxWidth, minMaxWidthHandler, childRenderers);\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    private void findMinMaxWidth(float initialMinWidth, float initialMaxWidth, AbstractWidthHandler minMaxWidthHandler,\n",
      "                                 List<IRenderer> childRenderers) {\n",
      "        float maxWidth = initialMaxWidth;\n",
      "        float minWidth = initialMinWidth;\n",
      "        for (final IRenderer childRenderer : childRenderers) {\n",
      "            MinMaxWidth childMinMaxWidth;\n",
      "            childRenderer.setParent(this);\n",
      "            if (childRenderer instanceof AbstractRenderer) {\n",
      "                childMinMaxWidth = ((AbstractRenderer) childRenderer).getMinMaxWidth();\n",
      "            } else {\n",
      "                childMinMaxWidth = MinMaxWidthUtils.countDefaultMinMaxWidth(childRenderer);\n",
      "            }\n",
      "            if (FlexUtil.isColumnDirection(this)) {\n",
      "                maxWidth = Math.max(maxWidth, childMinMaxWidth.getMaxWidth());\n",
      "                minWidth = Math.max(minWidth, childMinMaxWidth.getMinWidth());\n",
      "            } else {\n",
      "                maxWidth += childMinMaxWidth.getMaxWidth();\n",
      "                minWidth += childMinMaxWidth.getMinWidth();\n",
      "            }\n",
      "        }\n",
      "        minMaxWidthHandler.updateMaxChildWidth(maxWidth);\n",
      "        minMaxWidthHandler.updateMinChildWidth(minWidth);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Check if flex container direction is row reverse.\n",
      "     *\n",
      "     * @return {@code true} if flex-direction property is set to row-reverse, {@code false} otherwise.\n",
      "     */\n",
      "    private boolean isRowReverse() {\n",
      "        return FlexDirectionPropertyValue.ROW_REVERSE ==\n",
      "                this.<FlexDirectionPropertyValue>getProperty(Property.FLEX_DIRECTION, null);\n",
      "    }\n",
      "\n",
      "    private boolean isColumnReverse() {\n",
      "        return FlexDirectionPropertyValue.COLUMN_REVERSE ==\n",
      "                this.<FlexDirectionPropertyValue>getProperty(Property.FLEX_DIRECTION, null);\n",
      "    }\n",
      "\n",
      "    private IFlexItemMainDirector createMainDirector() {\n",
      "        if (FlexUtil.isColumnDirection(this)) {\n",
      "            return isColumnReverse()\n",
      "                    ? (IFlexItemMainDirector) new BottomToTopFlexItemMainDirector() :\n",
      "                    new TopToBottomFlexItemMainDirector();\n",
      "        } else {\n",
      "            final boolean isRtlDirection = BaseDirection.RIGHT_TO_LEFT ==\n",
      "                    this.<BaseDirection>getProperty(Property.BASE_DIRECTION, null);\n",
      "            flexItemMainDirector = isRowReverse() ^ isRtlDirection\n",
      "                    ? (IFlexItemMainDirector) new RtlFlexItemMainDirector() : new LtrFlexItemMainDirector();\n",
      "            return flexItemMainDirector;\n",
      "        }\n",
      "    }\n",
      "\n",
      "    private List<IRenderer> retrieveRenderersToOverflow(Rectangle flexContainerBBox) {\n",
      "        List<IRenderer> renderersToOverflow = new ArrayList<>();\n",
      "        Rectangle layoutContextRectangle = flexContainerBBox.clone();\n",
      "        applyMarginsBordersPaddings(layoutContextRectangle, false);\n",
      "        if (FlexUtil.isColumnDirection(this) &&\n",
      "                FlexUtil.getMainSize(this, layoutContextRectangle) >= layoutContextRectangle.getHeight()) {\n",
      "            float commonLineCrossSize = 0;\n",
      "            List<Float> lineCrossSizes = FlexUtil.calculateColumnDirectionCrossSizes(lines);\n",
      "            for (int i = 0; i < lines.size(); ++i) {\n",
      "                commonLineCrossSize += lineCrossSizes.get(i);\n",
      "                if (i > 0 && commonLineCrossSize > layoutContextRectangle.getWidth()) {\n",
      "                    List<IRenderer> lineRenderersToOverflow = new ArrayList<>();\n",
      "                    for (final FlexItemInfo itemInfo : lines.get(i)) {\n",
      "                        lineRenderersToOverflow.add(itemInfo.getRenderer());\n",
      "                    }\n",
      "                    getFlexItemMainDirector().applyDirectionForLine(lineRenderersToOverflow);\n",
      "                    if (isWrapReverse()) {\n",
      "                        renderersToOverflow.addAll(0, lineRenderersToOverflow);\n",
      "                    } else {\n",
      "                        renderersToOverflow.addAll(lineRenderersToOverflow);\n",
      "                    }\n",
      "                    // Those renderers will be handled in adjustLayoutResultToHandleOverflowRenderers method.\n",
      "                    // If we leave these children in multi-page fixed-height flex container, renderers\n",
      "                    // will be drawn to the right outside the container's bounds on the first page\n",
      "                    // (this logic is expected, but needed for the last page only)\n",
      "                    for (IRenderer renderer : renderersToOverflow) {\n",
      "                        childRenderers.remove(renderer);\n",
      "                    }\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "        return renderersToOverflow;\n",
      "    }\n",
      "\n",
      "    private void adjustLayoutResultToHandleOverflowRenderers(LayoutResult result, List<IRenderer> renderersToOverflow) {\n",
      "        if (LayoutResult.FULL == result.getStatus()) {\n",
      "            IRenderer splitRenderer = createSplitRenderer(LayoutResult.PARTIAL);\n",
      "            IRenderer overflowRenderer = createOverflowRenderer(LayoutResult.PARTIAL);\n",
      "            for (IRenderer childRenderer : renderersToOverflow) {\n",
      "                overflowRenderer.addChild(childRenderer);\n",
      "            }\n",
      "            for (IRenderer childRenderer : getChildRenderers()) {\n",
      "                splitRenderer.addChild(childRenderer);\n",
      "            }\n",
      "\n",
      "            result.setStatus(LayoutResult.PARTIAL);\n",
      "            result.setSplitRenderer(splitRenderer);\n",
      "            result.setOverflowRenderer(overflowRenderer);\n",
      "        }\n",
      "        if (LayoutResult.PARTIAL == result.getStatus()) {\n",
      "            IRenderer overflowRenderer = result.getOverflowRenderer();\n",
      "            for (IRenderer childRenderer : renderersToOverflow) {\n",
      "                if (!overflowRenderer.getChildRenderers().contains(childRenderer)) {\n",
      "                    overflowRenderer.addChild(childRenderer);\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.layout.renderer;\n",
      "\n",
      "import com.itextpdf.io.logs.IoLogMessageConstant;\n",
      "import com.itextpdf.kernel.geom.Rectangle;\n",
      "import com.itextpdf.layout.borders.SolidBorder;\n",
      "import com.itextpdf.layout.element.Div;\n",
      "import com.itextpdf.layout.layout.LayoutArea;\n",
      "import com.itextpdf.layout.layout.LayoutContext;\n",
      "import com.itextpdf.layout.layout.LayoutResult;\n",
      "import com.itextpdf.layout.minmaxwidth.MinMaxWidth;\n",
      "import com.itextpdf.layout.properties.FlexWrapPropertyValue;\n",
      "import com.itextpdf.layout.properties.Property;\n",
      "import com.itextpdf.layout.properties.UnitValue;\n",
      "import com.itextpdf.test.ExtendedITextTest;\n",
      "import com.itextpdf.test.annotations.LogMessage;\n",
      "import com.itextpdf.test.annotations.LogMessages;\n",
      "import com.itextpdf.test.annotations.type.UnitTest;\n",
      "\n",
      "import org.junit.Assert;\n",
      "import org.junit.Test;\n",
      "import org.junit.experimental.categories.Category;\n",
      "\n",
      "@Category(UnitTest.class)\n",
      "public class FlexContainerRendererTest extends ExtendedITextTest {\n",
      "    private static float EPS = 0.0001F;\n",
      "\n",
      "    @Test\n",
      "    public void widthNotSetTest() {\n",
      "        FlexContainerRenderer flexRenderer = new FlexContainerRenderer(new Div());\n",
      "        DivRenderer divRenderer = new DivRenderer(new Div());\n",
      "\n",
      "        flexRenderer.addChild(divRenderer);\n",
      "\n",
      "        Assert.assertEquals(0F, flexRenderer.getMinMaxWidth().getMinWidth(), EPS);\n",
      "        Assert.assertEquals(0F, flexRenderer.getMinMaxWidth().getMaxWidth(), EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void widthSetToChildOneChildTest() {\n",
      "        FlexContainerRenderer flexRenderer = new FlexContainerRenderer(new Div());\n",
      "        DivRenderer divRenderer = new DivRenderer(new Div());\n",
      "        divRenderer.setProperty(Property.WIDTH, UnitValue.createPointValue(50));\n",
      "\n",
      "        flexRenderer.addChild(divRenderer);\n",
      "\n",
      "        Assert.assertEquals(50F, flexRenderer.getMinMaxWidth().getMinWidth(), EPS);\n",
      "        Assert.assertEquals(50F, flexRenderer.getMinMaxWidth().getMaxWidth(), EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void widthSetToChildManyChildrenTest() {\n",
      "        FlexContainerRenderer flexRenderer = new FlexContainerRenderer(new Div());\n",
      "        DivRenderer divRenderer1 = new DivRenderer(new Div());\n",
      "        divRenderer1.setProperty(Property.WIDTH, UnitValue.createPointValue(50));\n",
      "        DivRenderer divRenderer2 = new DivRenderer(new Div());\n",
      "        divRenderer2.setProperty(Property.WIDTH, UnitValue.createPointValue(40));\n",
      "        DivRenderer divRenderer3 = new DivRenderer(new Div());\n",
      "        divRenderer3.setProperty(Property.WIDTH, UnitValue.createPointValue(30));\n",
      "        DivRenderer divRenderer4 = new DivRenderer(new Div());\n",
      "        divRenderer4.setProperty(Property.WIDTH, UnitValue.createPointValue(5));\n",
      "\n",
      "        flexRenderer.addChild(divRenderer1);\n",
      "        flexRenderer.addChild(divRenderer2);\n",
      "        flexRenderer.addChild(divRenderer3);\n",
      "        flexRenderer.addChild(divRenderer4);\n",
      "\n",
      "        Assert.assertEquals(125F, flexRenderer.getMinMaxWidth().getMinWidth(), EPS);\n",
      "        Assert.assertEquals(125F, flexRenderer.getMinMaxWidth().getMaxWidth(), EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void widthSetToChildManyChildrenWithBordersMarginsPaddingsTest() {\n",
      "        FlexContainerRenderer flexRenderer = new FlexContainerRenderer(new Div());\n",
      "        DivRenderer divRenderer1 = new DivRenderer(new Div());\n",
      "        divRenderer1.setProperty(Property.WIDTH, UnitValue.createPointValue(50));\n",
      "        divRenderer1.setProperty(Property.BORDER, new SolidBorder(5));\n",
      "        DivRenderer divRenderer2 = new DivRenderer(new Div());\n",
      "        divRenderer2.setProperty(Property.WIDTH, UnitValue.createPointValue(40));\n",
      "        divRenderer2.setProperty(Property.MARGIN_LEFT, UnitValue.createPointValue(10));\n",
      "        DivRenderer divRenderer3 = new DivRenderer(new Div());\n",
      "        divRenderer3.setProperty(Property.WIDTH, UnitValue.createPointValue(30));\n",
      "        divRenderer3.setProperty(Property.PADDING_RIGHT, UnitValue.createPointValue(15));\n",
      "        DivRenderer divRenderer4 = new DivRenderer(new Div());\n",
      "        divRenderer4.setProperty(Property.WIDTH, UnitValue.createPointValue(10));\n",
      "\n",
      "        flexRenderer.addChild(divRenderer1);\n",
      "        flexRenderer.addChild(divRenderer2);\n",
      "        flexRenderer.addChild(divRenderer3);\n",
      "        flexRenderer.addChild(divRenderer4);\n",
      "\n",
      "        Assert.assertEquals(165F, flexRenderer.getMinMaxWidth().getMinWidth(), EPS);\n",
      "        Assert.assertEquals(165F, flexRenderer.getMinMaxWidth().getMaxWidth(), EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void widthSetToFlexRendererAndToChildManyChildrenWithBordersMarginsPaddingsTest() {\n",
      "        FlexContainerRenderer flexRenderer = new FlexContainerRenderer(new Div());\n",
      "        flexRenderer.setProperty(Property.WIDTH, UnitValue.createPointValue(50));\n",
      "\n",
      "        DivRenderer divRenderer1 = new DivRenderer(new Div());\n",
      "        divRenderer1.setProperty(Property.WIDTH, UnitValue.createPointValue(50));\n",
      "        divRenderer1.setProperty(Property.BORDER, new SolidBorder(5));\n",
      "        DivRenderer divRenderer2 = new DivRenderer(new Div());\n",
      "        divRenderer2.setProperty(Property.WIDTH, UnitValue.createPointValue(40));\n",
      "        divRenderer2.setProperty(Property.MARGIN_LEFT, UnitValue.createPointValue(10));\n",
      "        DivRenderer divRenderer3 = new DivRenderer(new Div());\n",
      "        divRenderer3.setProperty(Property.WIDTH, UnitValue.createPointValue(30));\n",
      "        divRenderer3.setProperty(Property.PADDING_RIGHT, UnitValue.createPointValue(15));\n",
      "        DivRenderer divRenderer4 = new DivRenderer(new Div());\n",
      "        divRenderer4.setProperty(Property.WIDTH, UnitValue.createPointValue(10));\n",
      "\n",
      "        flexRenderer.addChild(divRenderer1);\n",
      "        flexRenderer.addChild(divRenderer2);\n",
      "        flexRenderer.addChild(divRenderer3);\n",
      "        flexRenderer.addChild(divRenderer4);\n",
      "\n",
      "        Assert.assertEquals(50F, flexRenderer.getMinMaxWidth().getMinWidth(), EPS);\n",
      "        Assert.assertEquals(50F, flexRenderer.getMinMaxWidth().getMaxWidth(), EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void widthSetToChildManyChildrenFlexRendererWithRotationAngleTest() {\n",
      "        FlexContainerRenderer flexRenderer = new FlexContainerRenderer(new Div());\n",
      "        flexRenderer.setProperty(Property.ROTATION_ANGLE, 10f);\n",
      "\n",
      "        DivRenderer divRenderer1 = new DivRenderer(new Div());\n",
      "        divRenderer1.setProperty(Property.WIDTH, UnitValue.createPointValue(50));\n",
      "        DivRenderer divRenderer2 = new DivRenderer(new Div());\n",
      "        divRenderer2.setProperty(Property.WIDTH, UnitValue.createPointValue(40));\n",
      "        DivRenderer divRenderer3 = new DivRenderer(new Div());\n",
      "        divRenderer3.setProperty(Property.WIDTH, UnitValue.createPointValue(30));\n",
      "        DivRenderer divRenderer4 = new DivRenderer(new Div());\n",
      "        divRenderer4.setProperty(Property.WIDTH, UnitValue.createPointValue(5));\n",
      "\n",
      "        flexRenderer.addChild(divRenderer1);\n",
      "        flexRenderer.addChild(divRenderer2);\n",
      "        flexRenderer.addChild(divRenderer3);\n",
      "        flexRenderer.addChild(divRenderer4);\n",
      "\n",
      "        Assert.assertEquals(104.892334F, flexRenderer.getMinMaxWidth().getMinWidth(), EPS);\n",
      "        Assert.assertEquals(104.892334F, flexRenderer.getMinMaxWidth().getMaxWidth(), EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void widthSetToChildManyChildrenFlexRendererWithMinWidthTest() {\n",
      "        FlexContainerRenderer flexRenderer = new FlexContainerRenderer(new Div());\n",
      "        flexRenderer.setProperty(Property.MIN_WIDTH, UnitValue.createPointValue(71));\n",
      "\n",
      "        DivRenderer divRenderer1 = new DivRenderer(new Div());\n",
      "        divRenderer1.setProperty(Property.WIDTH, UnitValue.createPointValue(50));\n",
      "        DivRenderer divRenderer2 = new DivRenderer(new Div());\n",
      "        divRenderer2.setProperty(Property.WIDTH, UnitValue.createPointValue(40));\n",
      "        DivRenderer divRenderer3 = new DivRenderer(new Div());\n",
      "        divRenderer3.setProperty(Property.WIDTH, UnitValue.createPointValue(30));\n",
      "        DivRenderer divRenderer4 = new DivRenderer(new Div());\n",
      "        divRenderer4.setProperty(Property.WIDTH, UnitValue.createPointValue(5));\n",
      "\n",
      "        flexRenderer.addChild(divRenderer1);\n",
      "        flexRenderer.addChild(divRenderer2);\n",
      "        flexRenderer.addChild(divRenderer3);\n",
      "        flexRenderer.addChild(divRenderer4);\n",
      "\n",
      "        Assert.assertEquals(71F, flexRenderer.getMinMaxWidth().getMinWidth(), EPS);\n",
      "        Assert.assertEquals(125F, flexRenderer.getMinMaxWidth().getMaxWidth(), EPS);\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    public void decreaseLayoutBoxAfterChildPlacementResultsOccupiedAreaNull() {\n",
      "        FlexContainerRenderer splitRenderer = new FlexContainerRenderer(new Div());\n",
      "        splitRenderer.occupiedArea = new LayoutArea(0, new Rectangle(0, 0));\n",
      "\n",
      "        LayoutResult nothing = new LayoutResult(LayoutResult.NOTHING, null, splitRenderer, null);\n",
      "        Assert.assertNotNull(new FlexContainerRenderer(new Div())\n",
      "                .getOccupiedAreaInCaseNothingWasWrappedWithFull(nothing, splitRenderer));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void widthSetToChildManyChildrenFlexRendererWithMinWidthBiggerThanMaxWidthTest() {\n",
      "        FlexContainerRenderer flexRenderer = new FlexContainerRenderer(new Div());\n",
      "        flexRenderer.setProperty(Property.MIN_WIDTH, UnitValue.createPointValue(150));\n",
      "\n",
      "        DivRenderer divRenderer1 = new DivRenderer(new Div());\n",
      "        divRenderer1.setProperty(Property.WIDTH, UnitValue.createPointValue(50));\n",
      "        DivRenderer divRenderer2 = new DivRenderer(new Div());\n",
      "        divRenderer2.setProperty(Property.WIDTH, UnitValue.createPointValue(40));\n",
      "        DivRenderer divRenderer3 = new DivRenderer(new Div());\n",
      "        divRenderer3.setProperty(Property.WIDTH, UnitValue.createPointValue(30));\n",
      "        DivRenderer divRenderer4 = new DivRenderer(new Div());\n",
      "        divRenderer4.setProperty(Property.WIDTH, UnitValue.createPointValue(5));\n",
      "\n",
      "        flexRenderer.addChild(divRenderer1);\n",
      "        flexRenderer.addChild(divRenderer2);\n",
      "        flexRenderer.addChild(divRenderer3);\n",
      "        flexRenderer.addChild(divRenderer4);\n",
      "\n",
      "        Assert.assertEquals(150F, flexRenderer.getMinMaxWidth().getMinWidth(), EPS);\n",
      "        Assert.assertEquals(150F, flexRenderer.getMinMaxWidth().getMaxWidth(), EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void widthSetToChildManyChildrenFlexRendererWithMaxWidthTest() {\n",
      "        FlexContainerRenderer flexRenderer = new FlexContainerRenderer(new Div());\n",
      "        flexRenderer.setProperty(Property.MAX_WIDTH, UnitValue.createPointValue(150));\n",
      "\n",
      "        DivRenderer divRenderer1 = new DivRenderer(new Div());\n",
      "        divRenderer1.setProperty(Property.WIDTH, UnitValue.createPointValue(50));\n",
      "        DivRenderer divRenderer2 = new DivRenderer(new Div());\n",
      "        divRenderer2.setProperty(Property.WIDTH, UnitValue.createPointValue(40));\n",
      "        DivRenderer divRenderer3 = new DivRenderer(new Div());\n",
      "        divRenderer3.setProperty(Property.WIDTH, UnitValue.createPointValue(30));\n",
      "        DivRenderer divRenderer4 = new DivRenderer(new Div());\n",
      "        divRenderer4.setProperty(Property.WIDTH, UnitValue.createPointValue(5));\n",
      "\n",
      "        flexRenderer.addChild(divRenderer1);\n",
      "        flexRenderer.addChild(divRenderer2);\n",
      "        flexRenderer.addChild(divRenderer3);\n",
      "        flexRenderer.addChild(divRenderer4);\n",
      "\n",
      "        Assert.assertEquals(125F, flexRenderer.getMinMaxWidth().getMinWidth(), EPS);\n",
      "        Assert.assertEquals(150F, flexRenderer.getMinMaxWidth().getMaxWidth(), EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void widthSetToChildManyChildrenFlexRendererWithMaxWidthLowerThanMinWidthTest() {\n",
      "        FlexContainerRenderer flexRenderer = new FlexContainerRenderer(new Div());\n",
      "        flexRenderer.setProperty(Property.MAX_WIDTH, UnitValue.createPointValue(100));\n",
      "\n",
      "        DivRenderer divRenderer1 = new DivRenderer(new Div());\n",
      "        divRenderer1.setProperty(Property.WIDTH, UnitValue.createPointValue(50));\n",
      "        DivRenderer divRenderer2 = new DivRenderer(new Div());\n",
      "        divRenderer2.setProperty(Property.WIDTH, UnitValue.createPointValue(40));\n",
      "        DivRenderer divRenderer3 = new DivRenderer(new Div());\n",
      "        divRenderer3.setProperty(Property.WIDTH, UnitValue.createPointValue(30));\n",
      "        DivRenderer divRenderer4 = new DivRenderer(new Div());\n",
      "        divRenderer4.setProperty(Property.WIDTH, UnitValue.createPointValue(5));\n",
      "\n",
      "        flexRenderer.addChild(divRenderer1);\n",
      "        flexRenderer.addChild(divRenderer2);\n",
      "        flexRenderer.addChild(divRenderer3);\n",
      "        flexRenderer.addChild(divRenderer4);\n",
      "\n",
      "        Assert.assertEquals(100F, flexRenderer.getMinMaxWidth().getMinWidth(), EPS);\n",
      "        Assert.assertEquals(100F, flexRenderer.getMinMaxWidth().getMaxWidth(), EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    @LogMessages(messages = {\n",
      "            @LogMessage(messageTemplate = IoLogMessageConstant.GET_NEXT_RENDERER_SHOULD_BE_OVERRIDDEN)\n",
      "    })\n",
      "    public void getNextRendererShouldBeOverriddenTest() {\n",
      "        FlexContainerRenderer flexContainerRenderer = new FlexContainerRenderer(new Div()) {\n",
      "            // Nothing is overridden\n",
      "        };\n",
      "\n",
      "        Assert.assertEquals(FlexContainerRenderer.class, flexContainerRenderer.getNextRenderer().getClass());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void hypotheticalCrossSizeCacheTest() {\n",
      "        FlexContainerRenderer flexRenderer = new FlexContainerRenderer(new Div());\n",
      "        flexRenderer.setProperty(Property.MAX_WIDTH, UnitValue.createPointValue(150));\n",
      "\n",
      "        FlexContainerRenderer flexRendererChild = new FlexContainerRenderer(new Div());\n",
      "        flexRendererChild.setProperty(Property.MAX_WIDTH, UnitValue.createPointValue(150));\n",
      "\n",
      "        DivRenderer divRenderer = new DivRenderer(new Div());\n",
      "        divRenderer.setProperty(Property.WIDTH, UnitValue.createPointValue(150));\n",
      "\n",
      "        flexRendererChild.addChild(divRenderer);\n",
      "        flexRenderer.addChild(flexRendererChild);\n",
      "\n",
      "        // In general, it's possible that we might call layout more than once for 1 renderer\n",
      "        flexRenderer.layout(new LayoutContext(\n",
      "                new LayoutArea(0, new Rectangle(100, 0))));\n",
      "        flexRendererChild.setProperty(Property.MAX_WIDTH, UnitValue.createPointValue(125));\n",
      "        flexRenderer.layout(new LayoutContext(\n",
      "                new LayoutArea(0, new Rectangle(200, 0))));\n",
      "\n",
      "        // Test that hypotheticalCrossSizes can contain more than 1 value\n",
      "        Assert.assertNotNull(flexRendererChild.getHypotheticalCrossSize(125F));\n",
      "        Assert.assertNotNull(flexRendererChild.getHypotheticalCrossSize(150F));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void minMaxWidthForFlexRendererWithWrapTest() {\n",
      "        FlexContainerRenderer flexRenderer = new FlexContainerRenderer(new Div());\n",
      "        flexRenderer.setProperty(Property.FLEX_WRAP, FlexWrapPropertyValue.WRAP);\n",
      "        flexRenderer.setProperty(Property.MAX_WIDTH, UnitValue.createPointValue(100));\n",
      "        flexRenderer.setProperty(Property.BORDER, new SolidBorder(5));\n",
      "\n",
      "        // line 1\n",
      "        DivRenderer divRenderer1 = new DivRenderer(new Div());\n",
      "        divRenderer1.setProperty(Property.MIN_WIDTH, UnitValue.createPointValue(30));\n",
      "        divRenderer1.setProperty(Property.MAX_WIDTH, UnitValue.createPointValue(50));\n",
      "        DivRenderer divRenderer2 = new DivRenderer(new Div());\n",
      "        divRenderer2.setProperty(Property.WIDTH, UnitValue.createPointValue(40));\n",
      "        // line 2\n",
      "        DivRenderer divRenderer3 = new DivRenderer(new Div());\n",
      "        divRenderer3.setProperty(Property.WIDTH, UnitValue.createPointValue(30));\n",
      "        DivRenderer divRenderer4 = new DivRenderer(new Div());\n",
      "        divRenderer4.setProperty(Property.WIDTH, UnitValue.createPointValue(5));\n",
      "        // line 3\n",
      "        DivRenderer divRenderer5 = new DivRenderer(new Div());\n",
      "        divRenderer5.setProperty(Property.WIDTH, UnitValue.createPointValue(75));\n",
      "\n",
      "        flexRenderer.addChild(divRenderer1);\n",
      "        flexRenderer.addChild(divRenderer2);\n",
      "        flexRenderer.addChild(divRenderer3);\n",
      "        flexRenderer.addChild(divRenderer4);\n",
      "        flexRenderer.addChild(divRenderer5);\n",
      "\n",
      "        flexRenderer.layout(new LayoutContext(new LayoutArea(0, new Rectangle(100, 100))));\n",
      "\n",
      "        MinMaxWidth minMaxWidth = flexRenderer.getMinMaxWidth();\n",
      "        Assert.assertEquals(75F, minMaxWidth.getChildrenMinWidth(), EPS);\n",
      "        Assert.assertEquals(85F, minMaxWidth.getMinWidth(), EPS);\n",
      "        Assert.assertEquals(100F, minMaxWidth.getChildrenMaxWidth(), EPS);\n",
      "        Assert.assertEquals(110F, minMaxWidth.getMaxWidth(), EPS);\n",
      "\n",
      "        flexRenderer.deleteOwnProperty(Property.MAX_WIDTH);\n",
      "        minMaxWidth = flexRenderer.getMinMaxWidth();\n",
      "        Assert.assertEquals(90F, minMaxWidth.getChildrenMaxWidth(), EPS);\n",
      "        Assert.assertEquals(100F, minMaxWidth.getMaxWidth(), EPS);\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "FlexContainerRenderer::::getNextRenderer()": [
        84,
        88
      ],
      "FlexContainerRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)": [
        93,
        157
      ],
      "FlexContainerRenderer::::getMinMaxWidth()": [
        162,
        190
      ],
      "FlexContainerRenderer::::getFlexItemMainDirector()": [
        192,
        198
      ],
      "FlexContainerRenderer::::isWrapReverse()": [
        205,
        208
      ],
      "FlexContainerRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)": [
        213,
        267
      ],
      "FlexContainerRenderer::::getOccupiedAreaInCaseNothingWasWrappedWithFull(com.itextpdf.layout.layout.LayoutResult,com.itextpdf.layout.renderer.IRenderer)": [
        323,
        325
      ],
      "FlexContainerRenderer::::stopLayoutingChildrenIfChildResultNotFull(com.itextpdf.layout.layout.LayoutResult)": [
        327,
        330
      ],
      "FlexContainerRenderer::::handleForcedPlacement(boolean)": [
        431,
        435
      ],
      "FlexContainerRenderer::::setHypotheticalCrossSize(java.lang.Float,java.lang.Float)": [
        437,
        439
      ],
      "FlexContainerRenderer::::getHypotheticalCrossSize(java.lang.Float)": [
        441,
        443
      ],
      "FlexContainerRenderer::::applyWrapReverse()": [
        448,
        463
      ],
      "FlexContainerRenderer::::findFlexItemInfo(com.itextpdf.layout.renderer.AbstractRenderer)": [
        465,
        474
      ],
      "FlexContainerRenderer::::findLine(com.itextpdf.layout.renderer.IRenderer)": [
        476,
        485
      ],
      "FlexContainerRenderer::::addChild(com.itextpdf.layout.renderer.IRenderer)": [
        496,
        503
      ],
      "FlexContainerRenderer::::addSimulateDiv(com.itextpdf.layout.renderer.AbstractRenderer,float)": [
        505,
        509
      ],
      "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)": [
        511,
        591
      ],
      "FlexContainerRenderer::::findMinMaxWidthIfCorrespondingPropertiesAreNotSet(com.itextpdf.layout.minmaxwidth.MinMaxWidth,com.itextpdf.layout.renderer.AbstractWidthHandler)": [
        593,
        608
      ],
      "FlexContainerRenderer::::findMinMaxWidth(float,float,com.itextpdf.layout.renderer.AbstractWidthHandler,java.util.List<com.itextpdf.layout.renderer.IRenderer>)": [
        610,
        632
      ],
      "FlexContainerRenderer::::isRowReverse()": [
        639,
        642
      ],
      "FlexContainerRenderer::::isColumnReverse()": [
        644,
        647
      ],
      "FlexContainerRenderer::::createMainDirector()": [
        649,
        661
      ],
      "FlexContainerRenderer::::adjustLayoutResultToHandleOverflowRenderers(com.itextpdf.layout.layout.LayoutResult,java.util.List<com.itextpdf.layout.renderer.IRenderer>)": [
        697,
        720
      ]
    },
    "test_method_lines_dic": {
      "FlexContainerRendererTest::::widthNotSetTest()": [
        49,
        58
      ],
      "FlexContainerRendererTest::::widthSetToChildOneChildTest()": [
        60,
        70
      ],
      "FlexContainerRendererTest::::widthSetToChildManyChildrenTest()": [
        72,
        91
      ],
      "FlexContainerRendererTest::::widthSetToChildManyChildrenWithBordersMarginsPaddingsTest()": [
        93,
        115
      ],
      "FlexContainerRendererTest::::widthSetToFlexRendererAndToChildManyChildrenWithBordersMarginsPaddingsTest()": [
        117,
        141
      ],
      "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithRotationAngleTest()": [
        143,
        164
      ],
      "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMinWidthTest()": [
        166,
        187
      ],
      "FlexContainerRendererTest::::decreaseLayoutBoxAfterChildPlacementResultsOccupiedAreaNull()": [
        190,
        198
      ],
      "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMinWidthBiggerThanMaxWidthTest()": [
        200,
        221
      ],
      "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMaxWidthTest()": [
        223,
        244
      ],
      "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMaxWidthLowerThanMinWidthTest()": [
        246,
        267
      ],
      "FlexContainerRendererTest::::getNextRendererShouldBeOverriddenTest()": [
        269,
        279
      ],
      "FlexContainerRendererTest::::hypotheticalCrossSizeCacheTest()": [
        281,
        305
      ],
      "FlexContainerRendererTest::::minMaxWidthForFlexRendererWithWrapTest()": [
        307,
        347
      ]
    },
    "reverse_method_lines_dic": {
      "84": "FlexContainerRenderer::::getNextRenderer()",
      "85": "FlexContainerRenderer::::getNextRenderer()",
      "86": "FlexContainerRenderer::::getNextRenderer()",
      "87": "FlexContainerRenderer::::getNextRenderer()",
      "88": "FlexContainerRenderer::::getNextRenderer()",
      "93": "FlexContainerRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "94": "FlexContainerRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "95": "FlexContainerRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "96": "FlexContainerRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "97": "FlexContainerRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "98": "FlexContainerRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "99": "FlexContainerRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "100": "FlexContainerRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "101": "FlexContainerRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "102": "FlexContainerRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "103": "FlexContainerRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "104": "FlexContainerRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "105": "FlexContainerRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "106": "FlexContainerRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "107": "FlexContainerRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "108": "FlexContainerRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "109": "FlexContainerRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "110": "FlexContainerRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "111": "FlexContainerRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "112": "FlexContainerRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "113": "FlexContainerRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "114": "FlexContainerRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "115": "FlexContainerRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "116": "FlexContainerRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "117": "FlexContainerRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "118": "FlexContainerRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "119": "FlexContainerRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "120": "FlexContainerRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "121": "FlexContainerRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "122": "FlexContainerRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "123": "FlexContainerRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "124": "FlexContainerRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "125": "FlexContainerRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "126": "FlexContainerRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "127": "FlexContainerRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "128": "FlexContainerRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "129": "FlexContainerRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "130": "FlexContainerRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "131": "FlexContainerRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "132": "FlexContainerRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "133": "FlexContainerRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "134": "FlexContainerRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "135": "FlexContainerRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "136": "FlexContainerRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "137": "FlexContainerRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "138": "FlexContainerRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "139": "FlexContainerRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "140": "FlexContainerRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "141": "FlexContainerRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "142": "FlexContainerRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "143": "FlexContainerRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "144": "FlexContainerRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "145": "FlexContainerRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "146": "FlexContainerRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "147": "FlexContainerRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "148": "FlexContainerRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "149": "FlexContainerRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "150": "FlexContainerRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "151": "FlexContainerRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "152": "FlexContainerRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "153": "FlexContainerRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "154": "FlexContainerRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "155": "FlexContainerRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "156": "FlexContainerRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "157": "FlexContainerRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "162": "FlexContainerRenderer::::getMinMaxWidth()",
      "163": "FlexContainerRenderer::::getMinMaxWidth()",
      "164": "FlexContainerRenderer::::getMinMaxWidth()",
      "165": "FlexContainerRenderer::::getMinMaxWidth()",
      "166": "FlexContainerRenderer::::getMinMaxWidth()",
      "167": "FlexContainerRenderer::::getMinMaxWidth()",
      "168": "FlexContainerRenderer::::getMinMaxWidth()",
      "169": "FlexContainerRenderer::::getMinMaxWidth()",
      "170": "FlexContainerRenderer::::getMinMaxWidth()",
      "171": "FlexContainerRenderer::::getMinMaxWidth()",
      "172": "FlexContainerRenderer::::getMinMaxWidth()",
      "173": "FlexContainerRenderer::::getMinMaxWidth()",
      "174": "FlexContainerRenderer::::getMinMaxWidth()",
      "175": "FlexContainerRenderer::::getMinMaxWidth()",
      "176": "FlexContainerRenderer::::getMinMaxWidth()",
      "177": "FlexContainerRenderer::::getMinMaxWidth()",
      "178": "FlexContainerRenderer::::getMinMaxWidth()",
      "179": "FlexContainerRenderer::::getMinMaxWidth()",
      "180": "FlexContainerRenderer::::getMinMaxWidth()",
      "181": "FlexContainerRenderer::::getMinMaxWidth()",
      "182": "FlexContainerRenderer::::getMinMaxWidth()",
      "183": "FlexContainerRenderer::::getMinMaxWidth()",
      "184": "FlexContainerRenderer::::getMinMaxWidth()",
      "185": "FlexContainerRenderer::::getMinMaxWidth()",
      "186": "FlexContainerRenderer::::getMinMaxWidth()",
      "187": "FlexContainerRenderer::::getMinMaxWidth()",
      "188": "FlexContainerRenderer::::getMinMaxWidth()",
      "189": "FlexContainerRenderer::::getMinMaxWidth()",
      "190": "FlexContainerRenderer::::getMinMaxWidth()",
      "192": "FlexContainerRenderer::::getFlexItemMainDirector()",
      "193": "FlexContainerRenderer::::getFlexItemMainDirector()",
      "194": "FlexContainerRenderer::::getFlexItemMainDirector()",
      "195": "FlexContainerRenderer::::getFlexItemMainDirector()",
      "196": "FlexContainerRenderer::::getFlexItemMainDirector()",
      "197": "FlexContainerRenderer::::getFlexItemMainDirector()",
      "198": "FlexContainerRenderer::::getFlexItemMainDirector()",
      "205": "FlexContainerRenderer::::isWrapReverse()",
      "206": "FlexContainerRenderer::::isWrapReverse()",
      "207": "FlexContainerRenderer::::isWrapReverse()",
      "208": "FlexContainerRenderer::::isWrapReverse()",
      "213": "FlexContainerRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "214": "FlexContainerRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "215": "FlexContainerRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "216": "FlexContainerRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "217": "FlexContainerRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "218": "FlexContainerRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "219": "FlexContainerRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "220": "FlexContainerRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "221": "FlexContainerRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "222": "FlexContainerRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "223": "FlexContainerRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "224": "FlexContainerRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "225": "FlexContainerRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "226": "FlexContainerRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "227": "FlexContainerRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "228": "FlexContainerRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "229": "FlexContainerRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "230": "FlexContainerRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "231": "FlexContainerRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "232": "FlexContainerRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "233": "FlexContainerRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "234": "FlexContainerRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "235": "FlexContainerRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "236": "FlexContainerRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "237": "FlexContainerRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "238": "FlexContainerRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "239": "FlexContainerRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "240": "FlexContainerRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "241": "FlexContainerRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "242": "FlexContainerRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "243": "FlexContainerRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "244": "FlexContainerRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "245": "FlexContainerRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "246": "FlexContainerRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "247": "FlexContainerRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "248": "FlexContainerRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "249": "FlexContainerRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "250": "FlexContainerRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "251": "FlexContainerRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "252": "FlexContainerRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "253": "FlexContainerRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "254": "FlexContainerRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "255": "FlexContainerRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "256": "FlexContainerRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "257": "FlexContainerRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "258": "FlexContainerRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "259": "FlexContainerRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "260": "FlexContainerRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "261": "FlexContainerRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "262": "FlexContainerRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "263": "FlexContainerRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "264": "FlexContainerRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "265": "FlexContainerRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "266": "FlexContainerRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "267": "FlexContainerRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "323": "FlexContainerRenderer::::getOccupiedAreaInCaseNothingWasWrappedWithFull(com.itextpdf.layout.layout.LayoutResult,com.itextpdf.layout.renderer.IRenderer)",
      "324": "FlexContainerRenderer::::getOccupiedAreaInCaseNothingWasWrappedWithFull(com.itextpdf.layout.layout.LayoutResult,com.itextpdf.layout.renderer.IRenderer)",
      "325": "FlexContainerRenderer::::getOccupiedAreaInCaseNothingWasWrappedWithFull(com.itextpdf.layout.layout.LayoutResult,com.itextpdf.layout.renderer.IRenderer)",
      "327": "FlexContainerRenderer::::stopLayoutingChildrenIfChildResultNotFull(com.itextpdf.layout.layout.LayoutResult)",
      "328": "FlexContainerRenderer::::stopLayoutingChildrenIfChildResultNotFull(com.itextpdf.layout.layout.LayoutResult)",
      "329": "FlexContainerRenderer::::stopLayoutingChildrenIfChildResultNotFull(com.itextpdf.layout.layout.LayoutResult)",
      "330": "FlexContainerRenderer::::stopLayoutingChildrenIfChildResultNotFull(com.itextpdf.layout.layout.LayoutResult)",
      "431": "FlexContainerRenderer::::handleForcedPlacement(boolean)",
      "432": "FlexContainerRenderer::::handleForcedPlacement(boolean)",
      "433": "FlexContainerRenderer::::handleForcedPlacement(boolean)",
      "434": "FlexContainerRenderer::::handleForcedPlacement(boolean)",
      "435": "FlexContainerRenderer::::handleForcedPlacement(boolean)",
      "437": "FlexContainerRenderer::::setHypotheticalCrossSize(java.lang.Float,java.lang.Float)",
      "438": "FlexContainerRenderer::::setHypotheticalCrossSize(java.lang.Float,java.lang.Float)",
      "439": "FlexContainerRenderer::::setHypotheticalCrossSize(java.lang.Float,java.lang.Float)",
      "441": "FlexContainerRenderer::::getHypotheticalCrossSize(java.lang.Float)",
      "442": "FlexContainerRenderer::::getHypotheticalCrossSize(java.lang.Float)",
      "443": "FlexContainerRenderer::::getHypotheticalCrossSize(java.lang.Float)",
      "448": "FlexContainerRenderer::::applyWrapReverse()",
      "449": "FlexContainerRenderer::::applyWrapReverse()",
      "450": "FlexContainerRenderer::::applyWrapReverse()",
      "451": "FlexContainerRenderer::::applyWrapReverse()",
      "452": "FlexContainerRenderer::::applyWrapReverse()",
      "453": "FlexContainerRenderer::::applyWrapReverse()",
      "454": "FlexContainerRenderer::::applyWrapReverse()",
      "455": "FlexContainerRenderer::::applyWrapReverse()",
      "456": "FlexContainerRenderer::::applyWrapReverse()",
      "457": "FlexContainerRenderer::::applyWrapReverse()",
      "458": "FlexContainerRenderer::::applyWrapReverse()",
      "459": "FlexContainerRenderer::::applyWrapReverse()",
      "460": "FlexContainerRenderer::::applyWrapReverse()",
      "461": "FlexContainerRenderer::::applyWrapReverse()",
      "462": "FlexContainerRenderer::::applyWrapReverse()",
      "463": "FlexContainerRenderer::::applyWrapReverse()",
      "465": "FlexContainerRenderer::::findFlexItemInfo(com.itextpdf.layout.renderer.AbstractRenderer)",
      "466": "FlexContainerRenderer::::findFlexItemInfo(com.itextpdf.layout.renderer.AbstractRenderer)",
      "467": "FlexContainerRenderer::::findFlexItemInfo(com.itextpdf.layout.renderer.AbstractRenderer)",
      "468": "FlexContainerRenderer::::findFlexItemInfo(com.itextpdf.layout.renderer.AbstractRenderer)",
      "469": "FlexContainerRenderer::::findFlexItemInfo(com.itextpdf.layout.renderer.AbstractRenderer)",
      "470": "FlexContainerRenderer::::findFlexItemInfo(com.itextpdf.layout.renderer.AbstractRenderer)",
      "471": "FlexContainerRenderer::::findFlexItemInfo(com.itextpdf.layout.renderer.AbstractRenderer)",
      "472": "FlexContainerRenderer::::findFlexItemInfo(com.itextpdf.layout.renderer.AbstractRenderer)",
      "473": "FlexContainerRenderer::::findFlexItemInfo(com.itextpdf.layout.renderer.AbstractRenderer)",
      "474": "FlexContainerRenderer::::findFlexItemInfo(com.itextpdf.layout.renderer.AbstractRenderer)",
      "476": "FlexContainerRenderer::::findLine(com.itextpdf.layout.renderer.IRenderer)",
      "477": "FlexContainerRenderer::::findLine(com.itextpdf.layout.renderer.IRenderer)",
      "478": "FlexContainerRenderer::::findLine(com.itextpdf.layout.renderer.IRenderer)",
      "479": "FlexContainerRenderer::::findLine(com.itextpdf.layout.renderer.IRenderer)",
      "480": "FlexContainerRenderer::::findLine(com.itextpdf.layout.renderer.IRenderer)",
      "481": "FlexContainerRenderer::::findLine(com.itextpdf.layout.renderer.IRenderer)",
      "482": "FlexContainerRenderer::::findLine(com.itextpdf.layout.renderer.IRenderer)",
      "483": "FlexContainerRenderer::::findLine(com.itextpdf.layout.renderer.IRenderer)",
      "484": "FlexContainerRenderer::::findLine(com.itextpdf.layout.renderer.IRenderer)",
      "485": "FlexContainerRenderer::::findLine(com.itextpdf.layout.renderer.IRenderer)",
      "496": "FlexContainerRenderer::::addChild(com.itextpdf.layout.renderer.IRenderer)",
      "497": "FlexContainerRenderer::::addChild(com.itextpdf.layout.renderer.IRenderer)",
      "498": "FlexContainerRenderer::::addChild(com.itextpdf.layout.renderer.IRenderer)",
      "499": "FlexContainerRenderer::::addChild(com.itextpdf.layout.renderer.IRenderer)",
      "500": "FlexContainerRenderer::::addChild(com.itextpdf.layout.renderer.IRenderer)",
      "501": "FlexContainerRenderer::::addChild(com.itextpdf.layout.renderer.IRenderer)",
      "502": "FlexContainerRenderer::::addChild(com.itextpdf.layout.renderer.IRenderer)",
      "503": "FlexContainerRenderer::::addChild(com.itextpdf.layout.renderer.IRenderer)",
      "505": "FlexContainerRenderer::::addSimulateDiv(com.itextpdf.layout.renderer.AbstractRenderer,float)",
      "506": "FlexContainerRenderer::::addSimulateDiv(com.itextpdf.layout.renderer.AbstractRenderer,float)",
      "507": "FlexContainerRenderer::::addSimulateDiv(com.itextpdf.layout.renderer.AbstractRenderer,float)",
      "508": "FlexContainerRenderer::::addSimulateDiv(com.itextpdf.layout.renderer.AbstractRenderer,float)",
      "509": "FlexContainerRenderer::::addSimulateDiv(com.itextpdf.layout.renderer.AbstractRenderer,float)",
      "511": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "512": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "513": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "514": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "515": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "516": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "517": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "518": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "519": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "520": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "521": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "522": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "523": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "524": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "525": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "526": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "527": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "528": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "529": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "530": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "531": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "532": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "533": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "534": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "535": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "536": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "537": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "538": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "539": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "540": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "541": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "542": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "543": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "544": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "545": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "546": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "547": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "548": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "549": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "550": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "551": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "552": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "553": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "554": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "555": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "556": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "557": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "558": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "559": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "560": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "561": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "562": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "563": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "564": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "565": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "566": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "567": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "568": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "569": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "570": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "571": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "572": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "573": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "574": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "575": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "576": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "577": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "578": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "579": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "580": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "581": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "582": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "583": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "584": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "585": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "586": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "587": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "588": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "589": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "590": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "591": "FlexContainerRenderer::::fillSplitOverflowRenderersForPartialResult(com.itextpdf.layout.renderer.AbstractRenderer,com.itextpdf.layout.renderer.AbstractRenderer,java.util.List<com.itextpdf.layout.renderer.FlexItemInfo>,com.itextpdf.layout.renderer.IRenderer,com.itextpdf.layout.layout.LayoutResult)",
      "593": "FlexContainerRenderer::::findMinMaxWidthIfCorrespondingPropertiesAreNotSet(com.itextpdf.layout.minmaxwidth.MinMaxWidth,com.itextpdf.layout.renderer.AbstractWidthHandler)",
      "594": "FlexContainerRenderer::::findMinMaxWidthIfCorrespondingPropertiesAreNotSet(com.itextpdf.layout.minmaxwidth.MinMaxWidth,com.itextpdf.layout.renderer.AbstractWidthHandler)",
      "595": "FlexContainerRenderer::::findMinMaxWidthIfCorrespondingPropertiesAreNotSet(com.itextpdf.layout.minmaxwidth.MinMaxWidth,com.itextpdf.layout.renderer.AbstractWidthHandler)",
      "596": "FlexContainerRenderer::::findMinMaxWidthIfCorrespondingPropertiesAreNotSet(com.itextpdf.layout.minmaxwidth.MinMaxWidth,com.itextpdf.layout.renderer.AbstractWidthHandler)",
      "597": "FlexContainerRenderer::::findMinMaxWidthIfCorrespondingPropertiesAreNotSet(com.itextpdf.layout.minmaxwidth.MinMaxWidth,com.itextpdf.layout.renderer.AbstractWidthHandler)",
      "598": "FlexContainerRenderer::::findMinMaxWidthIfCorrespondingPropertiesAreNotSet(com.itextpdf.layout.minmaxwidth.MinMaxWidth,com.itextpdf.layout.renderer.AbstractWidthHandler)",
      "599": "FlexContainerRenderer::::findMinMaxWidthIfCorrespondingPropertiesAreNotSet(com.itextpdf.layout.minmaxwidth.MinMaxWidth,com.itextpdf.layout.renderer.AbstractWidthHandler)",
      "600": "FlexContainerRenderer::::findMinMaxWidthIfCorrespondingPropertiesAreNotSet(com.itextpdf.layout.minmaxwidth.MinMaxWidth,com.itextpdf.layout.renderer.AbstractWidthHandler)",
      "601": "FlexContainerRenderer::::findMinMaxWidthIfCorrespondingPropertiesAreNotSet(com.itextpdf.layout.minmaxwidth.MinMaxWidth,com.itextpdf.layout.renderer.AbstractWidthHandler)",
      "602": "FlexContainerRenderer::::findMinMaxWidthIfCorrespondingPropertiesAreNotSet(com.itextpdf.layout.minmaxwidth.MinMaxWidth,com.itextpdf.layout.renderer.AbstractWidthHandler)",
      "603": "FlexContainerRenderer::::findMinMaxWidthIfCorrespondingPropertiesAreNotSet(com.itextpdf.layout.minmaxwidth.MinMaxWidth,com.itextpdf.layout.renderer.AbstractWidthHandler)",
      "604": "FlexContainerRenderer::::findMinMaxWidthIfCorrespondingPropertiesAreNotSet(com.itextpdf.layout.minmaxwidth.MinMaxWidth,com.itextpdf.layout.renderer.AbstractWidthHandler)",
      "605": "FlexContainerRenderer::::findMinMaxWidthIfCorrespondingPropertiesAreNotSet(com.itextpdf.layout.minmaxwidth.MinMaxWidth,com.itextpdf.layout.renderer.AbstractWidthHandler)",
      "606": "FlexContainerRenderer::::findMinMaxWidthIfCorrespondingPropertiesAreNotSet(com.itextpdf.layout.minmaxwidth.MinMaxWidth,com.itextpdf.layout.renderer.AbstractWidthHandler)",
      "607": "FlexContainerRenderer::::findMinMaxWidthIfCorrespondingPropertiesAreNotSet(com.itextpdf.layout.minmaxwidth.MinMaxWidth,com.itextpdf.layout.renderer.AbstractWidthHandler)",
      "608": "FlexContainerRenderer::::findMinMaxWidthIfCorrespondingPropertiesAreNotSet(com.itextpdf.layout.minmaxwidth.MinMaxWidth,com.itextpdf.layout.renderer.AbstractWidthHandler)",
      "610": "FlexContainerRenderer::::findMinMaxWidth(float,float,com.itextpdf.layout.renderer.AbstractWidthHandler,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "611": "FlexContainerRenderer::::findMinMaxWidth(float,float,com.itextpdf.layout.renderer.AbstractWidthHandler,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "612": "FlexContainerRenderer::::findMinMaxWidth(float,float,com.itextpdf.layout.renderer.AbstractWidthHandler,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "613": "FlexContainerRenderer::::findMinMaxWidth(float,float,com.itextpdf.layout.renderer.AbstractWidthHandler,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "614": "FlexContainerRenderer::::findMinMaxWidth(float,float,com.itextpdf.layout.renderer.AbstractWidthHandler,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "615": "FlexContainerRenderer::::findMinMaxWidth(float,float,com.itextpdf.layout.renderer.AbstractWidthHandler,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "616": "FlexContainerRenderer::::findMinMaxWidth(float,float,com.itextpdf.layout.renderer.AbstractWidthHandler,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "617": "FlexContainerRenderer::::findMinMaxWidth(float,float,com.itextpdf.layout.renderer.AbstractWidthHandler,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "618": "FlexContainerRenderer::::findMinMaxWidth(float,float,com.itextpdf.layout.renderer.AbstractWidthHandler,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "619": "FlexContainerRenderer::::findMinMaxWidth(float,float,com.itextpdf.layout.renderer.AbstractWidthHandler,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "620": "FlexContainerRenderer::::findMinMaxWidth(float,float,com.itextpdf.layout.renderer.AbstractWidthHandler,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "621": "FlexContainerRenderer::::findMinMaxWidth(float,float,com.itextpdf.layout.renderer.AbstractWidthHandler,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "622": "FlexContainerRenderer::::findMinMaxWidth(float,float,com.itextpdf.layout.renderer.AbstractWidthHandler,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "623": "FlexContainerRenderer::::findMinMaxWidth(float,float,com.itextpdf.layout.renderer.AbstractWidthHandler,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "624": "FlexContainerRenderer::::findMinMaxWidth(float,float,com.itextpdf.layout.renderer.AbstractWidthHandler,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "625": "FlexContainerRenderer::::findMinMaxWidth(float,float,com.itextpdf.layout.renderer.AbstractWidthHandler,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "626": "FlexContainerRenderer::::findMinMaxWidth(float,float,com.itextpdf.layout.renderer.AbstractWidthHandler,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "627": "FlexContainerRenderer::::findMinMaxWidth(float,float,com.itextpdf.layout.renderer.AbstractWidthHandler,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "628": "FlexContainerRenderer::::findMinMaxWidth(float,float,com.itextpdf.layout.renderer.AbstractWidthHandler,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "629": "FlexContainerRenderer::::findMinMaxWidth(float,float,com.itextpdf.layout.renderer.AbstractWidthHandler,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "630": "FlexContainerRenderer::::findMinMaxWidth(float,float,com.itextpdf.layout.renderer.AbstractWidthHandler,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "631": "FlexContainerRenderer::::findMinMaxWidth(float,float,com.itextpdf.layout.renderer.AbstractWidthHandler,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "632": "FlexContainerRenderer::::findMinMaxWidth(float,float,com.itextpdf.layout.renderer.AbstractWidthHandler,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "639": "FlexContainerRenderer::::isRowReverse()",
      "640": "FlexContainerRenderer::::isRowReverse()",
      "641": "FlexContainerRenderer::::isRowReverse()",
      "642": "FlexContainerRenderer::::isRowReverse()",
      "644": "FlexContainerRenderer::::isColumnReverse()",
      "645": "FlexContainerRenderer::::isColumnReverse()",
      "646": "FlexContainerRenderer::::isColumnReverse()",
      "647": "FlexContainerRenderer::::isColumnReverse()",
      "649": "FlexContainerRenderer::::createMainDirector()",
      "650": "FlexContainerRenderer::::createMainDirector()",
      "651": "FlexContainerRenderer::::createMainDirector()",
      "652": "FlexContainerRenderer::::createMainDirector()",
      "653": "FlexContainerRenderer::::createMainDirector()",
      "654": "FlexContainerRenderer::::createMainDirector()",
      "655": "FlexContainerRenderer::::createMainDirector()",
      "656": "FlexContainerRenderer::::createMainDirector()",
      "657": "FlexContainerRenderer::::createMainDirector()",
      "658": "FlexContainerRenderer::::createMainDirector()",
      "659": "FlexContainerRenderer::::createMainDirector()",
      "660": "FlexContainerRenderer::::createMainDirector()",
      "661": "FlexContainerRenderer::::createMainDirector()",
      "697": "FlexContainerRenderer::::adjustLayoutResultToHandleOverflowRenderers(com.itextpdf.layout.layout.LayoutResult,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "698": "FlexContainerRenderer::::adjustLayoutResultToHandleOverflowRenderers(com.itextpdf.layout.layout.LayoutResult,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "699": "FlexContainerRenderer::::adjustLayoutResultToHandleOverflowRenderers(com.itextpdf.layout.layout.LayoutResult,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "700": "FlexContainerRenderer::::adjustLayoutResultToHandleOverflowRenderers(com.itextpdf.layout.layout.LayoutResult,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "701": "FlexContainerRenderer::::adjustLayoutResultToHandleOverflowRenderers(com.itextpdf.layout.layout.LayoutResult,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "702": "FlexContainerRenderer::::adjustLayoutResultToHandleOverflowRenderers(com.itextpdf.layout.layout.LayoutResult,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "703": "FlexContainerRenderer::::adjustLayoutResultToHandleOverflowRenderers(com.itextpdf.layout.layout.LayoutResult,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "704": "FlexContainerRenderer::::adjustLayoutResultToHandleOverflowRenderers(com.itextpdf.layout.layout.LayoutResult,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "705": "FlexContainerRenderer::::adjustLayoutResultToHandleOverflowRenderers(com.itextpdf.layout.layout.LayoutResult,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "706": "FlexContainerRenderer::::adjustLayoutResultToHandleOverflowRenderers(com.itextpdf.layout.layout.LayoutResult,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "707": "FlexContainerRenderer::::adjustLayoutResultToHandleOverflowRenderers(com.itextpdf.layout.layout.LayoutResult,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "708": "FlexContainerRenderer::::adjustLayoutResultToHandleOverflowRenderers(com.itextpdf.layout.layout.LayoutResult,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "709": "FlexContainerRenderer::::adjustLayoutResultToHandleOverflowRenderers(com.itextpdf.layout.layout.LayoutResult,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "710": "FlexContainerRenderer::::adjustLayoutResultToHandleOverflowRenderers(com.itextpdf.layout.layout.LayoutResult,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "711": "FlexContainerRenderer::::adjustLayoutResultToHandleOverflowRenderers(com.itextpdf.layout.layout.LayoutResult,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "712": "FlexContainerRenderer::::adjustLayoutResultToHandleOverflowRenderers(com.itextpdf.layout.layout.LayoutResult,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "713": "FlexContainerRenderer::::adjustLayoutResultToHandleOverflowRenderers(com.itextpdf.layout.layout.LayoutResult,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "714": "FlexContainerRenderer::::adjustLayoutResultToHandleOverflowRenderers(com.itextpdf.layout.layout.LayoutResult,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "715": "FlexContainerRenderer::::adjustLayoutResultToHandleOverflowRenderers(com.itextpdf.layout.layout.LayoutResult,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "716": "FlexContainerRenderer::::adjustLayoutResultToHandleOverflowRenderers(com.itextpdf.layout.layout.LayoutResult,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "717": "FlexContainerRenderer::::adjustLayoutResultToHandleOverflowRenderers(com.itextpdf.layout.layout.LayoutResult,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "718": "FlexContainerRenderer::::adjustLayoutResultToHandleOverflowRenderers(com.itextpdf.layout.layout.LayoutResult,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "719": "FlexContainerRenderer::::adjustLayoutResultToHandleOverflowRenderers(com.itextpdf.layout.layout.LayoutResult,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "720": "FlexContainerRenderer::::adjustLayoutResultToHandleOverflowRenderers(com.itextpdf.layout.layout.LayoutResult,java.util.List<com.itextpdf.layout.renderer.IRenderer>)"
    },
    "test_reverse_method_lines_dic": {
      "49": "FlexContainerRendererTest::::widthNotSetTest()",
      "50": "FlexContainerRendererTest::::widthNotSetTest()",
      "51": "FlexContainerRendererTest::::widthNotSetTest()",
      "52": "FlexContainerRendererTest::::widthNotSetTest()",
      "53": "FlexContainerRendererTest::::widthNotSetTest()",
      "54": "FlexContainerRendererTest::::widthNotSetTest()",
      "55": "FlexContainerRendererTest::::widthNotSetTest()",
      "56": "FlexContainerRendererTest::::widthNotSetTest()",
      "57": "FlexContainerRendererTest::::widthNotSetTest()",
      "58": "FlexContainerRendererTest::::widthNotSetTest()",
      "60": "FlexContainerRendererTest::::widthSetToChildOneChildTest()",
      "61": "FlexContainerRendererTest::::widthSetToChildOneChildTest()",
      "62": "FlexContainerRendererTest::::widthSetToChildOneChildTest()",
      "63": "FlexContainerRendererTest::::widthSetToChildOneChildTest()",
      "64": "FlexContainerRendererTest::::widthSetToChildOneChildTest()",
      "65": "FlexContainerRendererTest::::widthSetToChildOneChildTest()",
      "66": "FlexContainerRendererTest::::widthSetToChildOneChildTest()",
      "67": "FlexContainerRendererTest::::widthSetToChildOneChildTest()",
      "68": "FlexContainerRendererTest::::widthSetToChildOneChildTest()",
      "69": "FlexContainerRendererTest::::widthSetToChildOneChildTest()",
      "70": "FlexContainerRendererTest::::widthSetToChildOneChildTest()",
      "72": "FlexContainerRendererTest::::widthSetToChildManyChildrenTest()",
      "73": "FlexContainerRendererTest::::widthSetToChildManyChildrenTest()",
      "74": "FlexContainerRendererTest::::widthSetToChildManyChildrenTest()",
      "75": "FlexContainerRendererTest::::widthSetToChildManyChildrenTest()",
      "76": "FlexContainerRendererTest::::widthSetToChildManyChildrenTest()",
      "77": "FlexContainerRendererTest::::widthSetToChildManyChildrenTest()",
      "78": "FlexContainerRendererTest::::widthSetToChildManyChildrenTest()",
      "79": "FlexContainerRendererTest::::widthSetToChildManyChildrenTest()",
      "80": "FlexContainerRendererTest::::widthSetToChildManyChildrenTest()",
      "81": "FlexContainerRendererTest::::widthSetToChildManyChildrenTest()",
      "82": "FlexContainerRendererTest::::widthSetToChildManyChildrenTest()",
      "83": "FlexContainerRendererTest::::widthSetToChildManyChildrenTest()",
      "84": "FlexContainerRendererTest::::widthSetToChildManyChildrenTest()",
      "85": "FlexContainerRendererTest::::widthSetToChildManyChildrenTest()",
      "86": "FlexContainerRendererTest::::widthSetToChildManyChildrenTest()",
      "87": "FlexContainerRendererTest::::widthSetToChildManyChildrenTest()",
      "88": "FlexContainerRendererTest::::widthSetToChildManyChildrenTest()",
      "89": "FlexContainerRendererTest::::widthSetToChildManyChildrenTest()",
      "90": "FlexContainerRendererTest::::widthSetToChildManyChildrenTest()",
      "91": "FlexContainerRendererTest::::widthSetToChildManyChildrenTest()",
      "93": "FlexContainerRendererTest::::widthSetToChildManyChildrenWithBordersMarginsPaddingsTest()",
      "94": "FlexContainerRendererTest::::widthSetToChildManyChildrenWithBordersMarginsPaddingsTest()",
      "95": "FlexContainerRendererTest::::widthSetToChildManyChildrenWithBordersMarginsPaddingsTest()",
      "96": "FlexContainerRendererTest::::widthSetToChildManyChildrenWithBordersMarginsPaddingsTest()",
      "97": "FlexContainerRendererTest::::widthSetToChildManyChildrenWithBordersMarginsPaddingsTest()",
      "98": "FlexContainerRendererTest::::widthSetToChildManyChildrenWithBordersMarginsPaddingsTest()",
      "99": "FlexContainerRendererTest::::widthSetToChildManyChildrenWithBordersMarginsPaddingsTest()",
      "100": "FlexContainerRendererTest::::widthSetToChildManyChildrenWithBordersMarginsPaddingsTest()",
      "101": "FlexContainerRendererTest::::widthSetToChildManyChildrenWithBordersMarginsPaddingsTest()",
      "102": "FlexContainerRendererTest::::widthSetToChildManyChildrenWithBordersMarginsPaddingsTest()",
      "103": "FlexContainerRendererTest::::widthSetToChildManyChildrenWithBordersMarginsPaddingsTest()",
      "104": "FlexContainerRendererTest::::widthSetToChildManyChildrenWithBordersMarginsPaddingsTest()",
      "105": "FlexContainerRendererTest::::widthSetToChildManyChildrenWithBordersMarginsPaddingsTest()",
      "106": "FlexContainerRendererTest::::widthSetToChildManyChildrenWithBordersMarginsPaddingsTest()",
      "107": "FlexContainerRendererTest::::widthSetToChildManyChildrenWithBordersMarginsPaddingsTest()",
      "108": "FlexContainerRendererTest::::widthSetToChildManyChildrenWithBordersMarginsPaddingsTest()",
      "109": "FlexContainerRendererTest::::widthSetToChildManyChildrenWithBordersMarginsPaddingsTest()",
      "110": "FlexContainerRendererTest::::widthSetToChildManyChildrenWithBordersMarginsPaddingsTest()",
      "111": "FlexContainerRendererTest::::widthSetToChildManyChildrenWithBordersMarginsPaddingsTest()",
      "112": "FlexContainerRendererTest::::widthSetToChildManyChildrenWithBordersMarginsPaddingsTest()",
      "113": "FlexContainerRendererTest::::widthSetToChildManyChildrenWithBordersMarginsPaddingsTest()",
      "114": "FlexContainerRendererTest::::widthSetToChildManyChildrenWithBordersMarginsPaddingsTest()",
      "115": "FlexContainerRendererTest::::widthSetToChildManyChildrenWithBordersMarginsPaddingsTest()",
      "117": "FlexContainerRendererTest::::widthSetToFlexRendererAndToChildManyChildrenWithBordersMarginsPaddingsTest()",
      "118": "FlexContainerRendererTest::::widthSetToFlexRendererAndToChildManyChildrenWithBordersMarginsPaddingsTest()",
      "119": "FlexContainerRendererTest::::widthSetToFlexRendererAndToChildManyChildrenWithBordersMarginsPaddingsTest()",
      "120": "FlexContainerRendererTest::::widthSetToFlexRendererAndToChildManyChildrenWithBordersMarginsPaddingsTest()",
      "121": "FlexContainerRendererTest::::widthSetToFlexRendererAndToChildManyChildrenWithBordersMarginsPaddingsTest()",
      "122": "FlexContainerRendererTest::::widthSetToFlexRendererAndToChildManyChildrenWithBordersMarginsPaddingsTest()",
      "123": "FlexContainerRendererTest::::widthSetToFlexRendererAndToChildManyChildrenWithBordersMarginsPaddingsTest()",
      "124": "FlexContainerRendererTest::::widthSetToFlexRendererAndToChildManyChildrenWithBordersMarginsPaddingsTest()",
      "125": "FlexContainerRendererTest::::widthSetToFlexRendererAndToChildManyChildrenWithBordersMarginsPaddingsTest()",
      "126": "FlexContainerRendererTest::::widthSetToFlexRendererAndToChildManyChildrenWithBordersMarginsPaddingsTest()",
      "127": "FlexContainerRendererTest::::widthSetToFlexRendererAndToChildManyChildrenWithBordersMarginsPaddingsTest()",
      "128": "FlexContainerRendererTest::::widthSetToFlexRendererAndToChildManyChildrenWithBordersMarginsPaddingsTest()",
      "129": "FlexContainerRendererTest::::widthSetToFlexRendererAndToChildManyChildrenWithBordersMarginsPaddingsTest()",
      "130": "FlexContainerRendererTest::::widthSetToFlexRendererAndToChildManyChildrenWithBordersMarginsPaddingsTest()",
      "131": "FlexContainerRendererTest::::widthSetToFlexRendererAndToChildManyChildrenWithBordersMarginsPaddingsTest()",
      "132": "FlexContainerRendererTest::::widthSetToFlexRendererAndToChildManyChildrenWithBordersMarginsPaddingsTest()",
      "133": "FlexContainerRendererTest::::widthSetToFlexRendererAndToChildManyChildrenWithBordersMarginsPaddingsTest()",
      "134": "FlexContainerRendererTest::::widthSetToFlexRendererAndToChildManyChildrenWithBordersMarginsPaddingsTest()",
      "135": "FlexContainerRendererTest::::widthSetToFlexRendererAndToChildManyChildrenWithBordersMarginsPaddingsTest()",
      "136": "FlexContainerRendererTest::::widthSetToFlexRendererAndToChildManyChildrenWithBordersMarginsPaddingsTest()",
      "137": "FlexContainerRendererTest::::widthSetToFlexRendererAndToChildManyChildrenWithBordersMarginsPaddingsTest()",
      "138": "FlexContainerRendererTest::::widthSetToFlexRendererAndToChildManyChildrenWithBordersMarginsPaddingsTest()",
      "139": "FlexContainerRendererTest::::widthSetToFlexRendererAndToChildManyChildrenWithBordersMarginsPaddingsTest()",
      "140": "FlexContainerRendererTest::::widthSetToFlexRendererAndToChildManyChildrenWithBordersMarginsPaddingsTest()",
      "141": "FlexContainerRendererTest::::widthSetToFlexRendererAndToChildManyChildrenWithBordersMarginsPaddingsTest()",
      "143": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithRotationAngleTest()",
      "144": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithRotationAngleTest()",
      "145": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithRotationAngleTest()",
      "146": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithRotationAngleTest()",
      "147": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithRotationAngleTest()",
      "148": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithRotationAngleTest()",
      "149": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithRotationAngleTest()",
      "150": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithRotationAngleTest()",
      "151": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithRotationAngleTest()",
      "152": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithRotationAngleTest()",
      "153": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithRotationAngleTest()",
      "154": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithRotationAngleTest()",
      "155": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithRotationAngleTest()",
      "156": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithRotationAngleTest()",
      "157": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithRotationAngleTest()",
      "158": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithRotationAngleTest()",
      "159": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithRotationAngleTest()",
      "160": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithRotationAngleTest()",
      "161": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithRotationAngleTest()",
      "162": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithRotationAngleTest()",
      "163": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithRotationAngleTest()",
      "164": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithRotationAngleTest()",
      "166": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMinWidthTest()",
      "167": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMinWidthTest()",
      "168": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMinWidthTest()",
      "169": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMinWidthTest()",
      "170": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMinWidthTest()",
      "171": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMinWidthTest()",
      "172": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMinWidthTest()",
      "173": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMinWidthTest()",
      "174": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMinWidthTest()",
      "175": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMinWidthTest()",
      "176": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMinWidthTest()",
      "177": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMinWidthTest()",
      "178": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMinWidthTest()",
      "179": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMinWidthTest()",
      "180": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMinWidthTest()",
      "181": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMinWidthTest()",
      "182": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMinWidthTest()",
      "183": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMinWidthTest()",
      "184": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMinWidthTest()",
      "185": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMinWidthTest()",
      "186": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMinWidthTest()",
      "187": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMinWidthTest()",
      "190": "FlexContainerRendererTest::::decreaseLayoutBoxAfterChildPlacementResultsOccupiedAreaNull()",
      "191": "FlexContainerRendererTest::::decreaseLayoutBoxAfterChildPlacementResultsOccupiedAreaNull()",
      "192": "FlexContainerRendererTest::::decreaseLayoutBoxAfterChildPlacementResultsOccupiedAreaNull()",
      "193": "FlexContainerRendererTest::::decreaseLayoutBoxAfterChildPlacementResultsOccupiedAreaNull()",
      "194": "FlexContainerRendererTest::::decreaseLayoutBoxAfterChildPlacementResultsOccupiedAreaNull()",
      "195": "FlexContainerRendererTest::::decreaseLayoutBoxAfterChildPlacementResultsOccupiedAreaNull()",
      "196": "FlexContainerRendererTest::::decreaseLayoutBoxAfterChildPlacementResultsOccupiedAreaNull()",
      "197": "FlexContainerRendererTest::::decreaseLayoutBoxAfterChildPlacementResultsOccupiedAreaNull()",
      "198": "FlexContainerRendererTest::::decreaseLayoutBoxAfterChildPlacementResultsOccupiedAreaNull()",
      "200": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMinWidthBiggerThanMaxWidthTest()",
      "201": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMinWidthBiggerThanMaxWidthTest()",
      "202": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMinWidthBiggerThanMaxWidthTest()",
      "203": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMinWidthBiggerThanMaxWidthTest()",
      "204": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMinWidthBiggerThanMaxWidthTest()",
      "205": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMinWidthBiggerThanMaxWidthTest()",
      "206": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMinWidthBiggerThanMaxWidthTest()",
      "207": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMinWidthBiggerThanMaxWidthTest()",
      "208": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMinWidthBiggerThanMaxWidthTest()",
      "209": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMinWidthBiggerThanMaxWidthTest()",
      "210": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMinWidthBiggerThanMaxWidthTest()",
      "211": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMinWidthBiggerThanMaxWidthTest()",
      "212": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMinWidthBiggerThanMaxWidthTest()",
      "213": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMinWidthBiggerThanMaxWidthTest()",
      "214": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMinWidthBiggerThanMaxWidthTest()",
      "215": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMinWidthBiggerThanMaxWidthTest()",
      "216": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMinWidthBiggerThanMaxWidthTest()",
      "217": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMinWidthBiggerThanMaxWidthTest()",
      "218": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMinWidthBiggerThanMaxWidthTest()",
      "219": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMinWidthBiggerThanMaxWidthTest()",
      "220": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMinWidthBiggerThanMaxWidthTest()",
      "221": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMinWidthBiggerThanMaxWidthTest()",
      "223": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMaxWidthTest()",
      "224": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMaxWidthTest()",
      "225": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMaxWidthTest()",
      "226": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMaxWidthTest()",
      "227": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMaxWidthTest()",
      "228": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMaxWidthTest()",
      "229": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMaxWidthTest()",
      "230": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMaxWidthTest()",
      "231": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMaxWidthTest()",
      "232": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMaxWidthTest()",
      "233": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMaxWidthTest()",
      "234": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMaxWidthTest()",
      "235": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMaxWidthTest()",
      "236": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMaxWidthTest()",
      "237": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMaxWidthTest()",
      "238": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMaxWidthTest()",
      "239": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMaxWidthTest()",
      "240": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMaxWidthTest()",
      "241": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMaxWidthTest()",
      "242": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMaxWidthTest()",
      "243": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMaxWidthTest()",
      "244": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMaxWidthTest()",
      "246": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMaxWidthLowerThanMinWidthTest()",
      "247": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMaxWidthLowerThanMinWidthTest()",
      "248": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMaxWidthLowerThanMinWidthTest()",
      "249": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMaxWidthLowerThanMinWidthTest()",
      "250": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMaxWidthLowerThanMinWidthTest()",
      "251": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMaxWidthLowerThanMinWidthTest()",
      "252": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMaxWidthLowerThanMinWidthTest()",
      "253": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMaxWidthLowerThanMinWidthTest()",
      "254": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMaxWidthLowerThanMinWidthTest()",
      "255": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMaxWidthLowerThanMinWidthTest()",
      "256": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMaxWidthLowerThanMinWidthTest()",
      "257": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMaxWidthLowerThanMinWidthTest()",
      "258": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMaxWidthLowerThanMinWidthTest()",
      "259": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMaxWidthLowerThanMinWidthTest()",
      "260": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMaxWidthLowerThanMinWidthTest()",
      "261": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMaxWidthLowerThanMinWidthTest()",
      "262": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMaxWidthLowerThanMinWidthTest()",
      "263": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMaxWidthLowerThanMinWidthTest()",
      "264": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMaxWidthLowerThanMinWidthTest()",
      "265": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMaxWidthLowerThanMinWidthTest()",
      "266": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMaxWidthLowerThanMinWidthTest()",
      "267": "FlexContainerRendererTest::::widthSetToChildManyChildrenFlexRendererWithMaxWidthLowerThanMinWidthTest()",
      "269": "FlexContainerRendererTest::::getNextRendererShouldBeOverriddenTest()",
      "270": "FlexContainerRendererTest::::getNextRendererShouldBeOverriddenTest()",
      "271": "FlexContainerRendererTest::::getNextRendererShouldBeOverriddenTest()",
      "272": "FlexContainerRendererTest::::getNextRendererShouldBeOverriddenTest()",
      "273": "FlexContainerRendererTest::::getNextRendererShouldBeOverriddenTest()",
      "274": "FlexContainerRendererTest::::getNextRendererShouldBeOverriddenTest()",
      "275": "FlexContainerRendererTest::::getNextRendererShouldBeOverriddenTest()",
      "276": "FlexContainerRendererTest::::getNextRendererShouldBeOverriddenTest()",
      "277": "FlexContainerRendererTest::::getNextRendererShouldBeOverriddenTest()",
      "278": "FlexContainerRendererTest::::getNextRendererShouldBeOverriddenTest()",
      "279": "FlexContainerRendererTest::::getNextRendererShouldBeOverriddenTest()",
      "281": "FlexContainerRendererTest::::hypotheticalCrossSizeCacheTest()",
      "282": "FlexContainerRendererTest::::hypotheticalCrossSizeCacheTest()",
      "283": "FlexContainerRendererTest::::hypotheticalCrossSizeCacheTest()",
      "284": "FlexContainerRendererTest::::hypotheticalCrossSizeCacheTest()",
      "285": "FlexContainerRendererTest::::hypotheticalCrossSizeCacheTest()",
      "286": "FlexContainerRendererTest::::hypotheticalCrossSizeCacheTest()",
      "287": "FlexContainerRendererTest::::hypotheticalCrossSizeCacheTest()",
      "288": "FlexContainerRendererTest::::hypotheticalCrossSizeCacheTest()",
      "289": "FlexContainerRendererTest::::hypotheticalCrossSizeCacheTest()",
      "290": "FlexContainerRendererTest::::hypotheticalCrossSizeCacheTest()",
      "291": "FlexContainerRendererTest::::hypotheticalCrossSizeCacheTest()",
      "292": "FlexContainerRendererTest::::hypotheticalCrossSizeCacheTest()",
      "293": "FlexContainerRendererTest::::hypotheticalCrossSizeCacheTest()",
      "294": "FlexContainerRendererTest::::hypotheticalCrossSizeCacheTest()",
      "295": "FlexContainerRendererTest::::hypotheticalCrossSizeCacheTest()",
      "296": "FlexContainerRendererTest::::hypotheticalCrossSizeCacheTest()",
      "297": "FlexContainerRendererTest::::hypotheticalCrossSizeCacheTest()",
      "298": "FlexContainerRendererTest::::hypotheticalCrossSizeCacheTest()",
      "299": "FlexContainerRendererTest::::hypotheticalCrossSizeCacheTest()",
      "300": "FlexContainerRendererTest::::hypotheticalCrossSizeCacheTest()",
      "301": "FlexContainerRendererTest::::hypotheticalCrossSizeCacheTest()",
      "302": "FlexContainerRendererTest::::hypotheticalCrossSizeCacheTest()",
      "303": "FlexContainerRendererTest::::hypotheticalCrossSizeCacheTest()",
      "304": "FlexContainerRendererTest::::hypotheticalCrossSizeCacheTest()",
      "305": "FlexContainerRendererTest::::hypotheticalCrossSizeCacheTest()",
      "307": "FlexContainerRendererTest::::minMaxWidthForFlexRendererWithWrapTest()",
      "308": "FlexContainerRendererTest::::minMaxWidthForFlexRendererWithWrapTest()",
      "309": "FlexContainerRendererTest::::minMaxWidthForFlexRendererWithWrapTest()",
      "310": "FlexContainerRendererTest::::minMaxWidthForFlexRendererWithWrapTest()",
      "311": "FlexContainerRendererTest::::minMaxWidthForFlexRendererWithWrapTest()",
      "312": "FlexContainerRendererTest::::minMaxWidthForFlexRendererWithWrapTest()",
      "313": "FlexContainerRendererTest::::minMaxWidthForFlexRendererWithWrapTest()",
      "314": "FlexContainerRendererTest::::minMaxWidthForFlexRendererWithWrapTest()",
      "315": "FlexContainerRendererTest::::minMaxWidthForFlexRendererWithWrapTest()",
      "316": "FlexContainerRendererTest::::minMaxWidthForFlexRendererWithWrapTest()",
      "317": "FlexContainerRendererTest::::minMaxWidthForFlexRendererWithWrapTest()",
      "318": "FlexContainerRendererTest::::minMaxWidthForFlexRendererWithWrapTest()",
      "319": "FlexContainerRendererTest::::minMaxWidthForFlexRendererWithWrapTest()",
      "320": "FlexContainerRendererTest::::minMaxWidthForFlexRendererWithWrapTest()",
      "321": "FlexContainerRendererTest::::minMaxWidthForFlexRendererWithWrapTest()",
      "322": "FlexContainerRendererTest::::minMaxWidthForFlexRendererWithWrapTest()",
      "323": "FlexContainerRendererTest::::minMaxWidthForFlexRendererWithWrapTest()",
      "324": "FlexContainerRendererTest::::minMaxWidthForFlexRendererWithWrapTest()",
      "325": "FlexContainerRendererTest::::minMaxWidthForFlexRendererWithWrapTest()",
      "326": "FlexContainerRendererTest::::minMaxWidthForFlexRendererWithWrapTest()",
      "327": "FlexContainerRendererTest::::minMaxWidthForFlexRendererWithWrapTest()",
      "328": "FlexContainerRendererTest::::minMaxWidthForFlexRendererWithWrapTest()",
      "329": "FlexContainerRendererTest::::minMaxWidthForFlexRendererWithWrapTest()",
      "330": "FlexContainerRendererTest::::minMaxWidthForFlexRendererWithWrapTest()",
      "331": "FlexContainerRendererTest::::minMaxWidthForFlexRendererWithWrapTest()",
      "332": "FlexContainerRendererTest::::minMaxWidthForFlexRendererWithWrapTest()",
      "333": "FlexContainerRendererTest::::minMaxWidthForFlexRendererWithWrapTest()",
      "334": "FlexContainerRendererTest::::minMaxWidthForFlexRendererWithWrapTest()",
      "335": "FlexContainerRendererTest::::minMaxWidthForFlexRendererWithWrapTest()",
      "336": "FlexContainerRendererTest::::minMaxWidthForFlexRendererWithWrapTest()",
      "337": "FlexContainerRendererTest::::minMaxWidthForFlexRendererWithWrapTest()",
      "338": "FlexContainerRendererTest::::minMaxWidthForFlexRendererWithWrapTest()",
      "339": "FlexContainerRendererTest::::minMaxWidthForFlexRendererWithWrapTest()",
      "340": "FlexContainerRendererTest::::minMaxWidthForFlexRendererWithWrapTest()",
      "341": "FlexContainerRendererTest::::minMaxWidthForFlexRendererWithWrapTest()",
      "342": "FlexContainerRendererTest::::minMaxWidthForFlexRendererWithWrapTest()",
      "343": "FlexContainerRendererTest::::minMaxWidthForFlexRendererWithWrapTest()",
      "344": "FlexContainerRendererTest::::minMaxWidthForFlexRendererWithWrapTest()",
      "345": "FlexContainerRendererTest::::minMaxWidthForFlexRendererWithWrapTest()",
      "346": "FlexContainerRendererTest::::minMaxWidthForFlexRendererWithWrapTest()",
      "347": "FlexContainerRendererTest::::minMaxWidthForFlexRendererWithWrapTest()"
    },
    "tests": [
      {
        "test_lines": [
          49,
          58
        ],
        "covered_lines": [
          57,
          61,
          69,
          70,
          164,
          165,
          166,
          167,
          168,
          169,
          170,
          172,
          176,
          177,
          185,
          189,
          501,
          502,
          503,
          595,
          596,
          597,
          598,
          608,
          612,
          613,
          614,
          616,
          617,
          618,
          622,
          626,
          627,
          629,
          630,
          631,
          632
        ]
      },
      {
        "test_lines": [
          60,
          70
        ],
        "covered_lines": [
          57,
          61,
          69,
          70,
          164,
          165,
          166,
          167,
          168,
          169,
          170,
          172,
          176,
          177,
          185,
          189,
          501,
          502,
          503,
          595,
          596,
          597,
          598,
          608,
          612,
          613,
          614,
          616,
          617,
          618,
          622,
          626,
          627,
          629,
          630,
          631,
          632
        ]
      },
      {
        "test_lines": [
          72,
          91
        ],
        "covered_lines": [
          57,
          61,
          69,
          70,
          164,
          165,
          166,
          167,
          168,
          169,
          170,
          172,
          176,
          177,
          185,
          189,
          501,
          502,
          503,
          595,
          596,
          597,
          598,
          608,
          612,
          613,
          614,
          616,
          617,
          618,
          622,
          626,
          627,
          629,
          630,
          631,
          632
        ]
      },
      {
        "test_lines": [
          93,
          115
        ],
        "covered_lines": [
          57,
          61,
          69,
          70,
          164,
          165,
          166,
          167,
          168,
          169,
          170,
          172,
          176,
          177,
          185,
          189,
          501,
          502,
          503,
          595,
          596,
          597,
          598,
          608,
          612,
          613,
          614,
          616,
          617,
          618,
          622,
          626,
          627,
          629,
          630,
          631,
          632
        ]
      },
      {
        "test_lines": [
          117,
          141
        ],
        "covered_lines": [
          57,
          61,
          69,
          70,
          164,
          165,
          166,
          185,
          189,
          501,
          502,
          503
        ]
      },
      {
        "test_lines": [
          143,
          164
        ],
        "covered_lines": [
          57,
          61,
          69,
          70,
          95,
          96,
          97,
          98,
          99,
          100,
          101,
          103,
          105,
          106,
          107,
          108,
          109,
          111,
          115,
          116,
          119,
          120,
          121,
          123,
          124,
          125,
          126,
          130,
          131,
          135,
          136,
          137,
          139,
          140,
          147,
          148,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          164,
          165,
          166,
          167,
          168,
          169,
          170,
          172,
          176,
          177,
          185,
          186,
          193,
          194,
          197,
          206,
          207,
          337,
          338,
          340,
          341,
          342,
          345,
          351,
          361,
          364,
          366,
          370,
          371,
          373,
          374,
          376,
          377,
          378,
          379,
          380,
          381,
          382,
          383,
          384,
          385,
          387,
          388,
          389,
          391,
          418,
          419,
          420,
          421,
          422,
          423,
          425,
          428,
          435,
          449,
          450,
          466,
          467,
          468,
          469,
          471,
          477,
          478,
          479,
          480,
          482,
          490,
          501,
          502,
          503,
          595,
          596,
          597,
          598,
          608,
          612,
          613,
          614,
          616,
          617,
          618,
          622,
          626,
          627,
          629,
          630,
          631,
          632,
          640,
          641,
          650,
          655,
          656,
          657,
          659,
          664,
          665,
          666,
          667,
          694
        ]
      },
      {
        "test_lines": [
          166,
          187
        ],
        "covered_lines": [
          57,
          61,
          69,
          70,
          164,
          165,
          166,
          167,
          168,
          169,
          170,
          172,
          173,
          176,
          177,
          185,
          189,
          501,
          502,
          503,
          595,
          596,
          597,
          598,
          608,
          612,
          613,
          614,
          616,
          617,
          618,
          622,
          626,
          627,
          629,
          630,
          631,
          632
        ]
      },
      {
        "test_lines": [
          190,
          198
        ],
        "covered_lines": [
          57,
          61,
          69,
          70,
          324
        ]
      },
      {
        "test_lines": [
          200,
          221
        ],
        "covered_lines": [
          57,
          61,
          69,
          70,
          164,
          165,
          166,
          167,
          168,
          169,
          170,
          172,
          173,
          176,
          177,
          178,
          185,
          189,
          501,
          502,
          503,
          595,
          596,
          597,
          598,
          608,
          612,
          613,
          614,
          616,
          617,
          618,
          622,
          626,
          627,
          629,
          630,
          631,
          632
        ]
      },
      {
        "test_lines": [
          223,
          244
        ],
        "covered_lines": [
          57,
          61,
          69,
          70,
          164,
          165,
          166,
          167,
          168,
          169,
          170,
          172,
          176,
          181,
          185,
          189,
          501,
          502,
          503,
          595,
          596,
          597,
          598,
          608,
          612,
          613,
          614,
          616,
          617,
          618,
          622,
          626,
          627,
          629,
          630,
          631,
          632
        ]
      },
      {
        "test_lines": [
          246,
          267
        ],
        "covered_lines": [
          57,
          61,
          69,
          70,
          164,
          165,
          166,
          167,
          168,
          169,
          170,
          172,
          176,
          181,
          185,
          189,
          501,
          502,
          503,
          595,
          596,
          597,
          598,
          608,
          612,
          613,
          614,
          616,
          617,
          618,
          622,
          626,
          627,
          629,
          630,
          631,
          632
        ]
      },
      {
        "test_lines": [
          269,
          279
        ],
        "covered_lines": [
          57,
          61,
          69,
          70,
          86,
          87
        ]
      },
      {
        "test_lines": [
          281,
          305
        ],
        "covered_lines": [
          57,
          61,
          69,
          70,
          95,
          96,
          97,
          98,
          99,
          100,
          101,
          103,
          105,
          106,
          107,
          108,
          109,
          111,
          115,
          116,
          119,
          120,
          121,
          123,
          124,
          125,
          126,
          130,
          131,
          135,
          136,
          137,
          139,
          140,
          147,
          148,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          164,
          165,
          166,
          167,
          168,
          169,
          170,
          172,
          176,
          181,
          185,
          189,
          193,
          194,
          197,
          206,
          207,
          337,
          338,
          340,
          341,
          342,
          345,
          346,
          351,
          361,
          364,
          366,
          370,
          371,
          373,
          374,
          376,
          377,
          378,
          379,
          380,
          381,
          382,
          383,
          384,
          385,
          387,
          388,
          389,
          391,
          418,
          419,
          420,
          421,
          422,
          423,
          425,
          428,
          435,
          438,
          439,
          442,
          449,
          450,
          466,
          467,
          468,
          469,
          477,
          478,
          479,
          480,
          490,
          501,
          502,
          503,
          595,
          596,
          597,
          598,
          608,
          612,
          613,
          614,
          616,
          617,
          618,
          622,
          626,
          627,
          629,
          630,
          631,
          632,
          640,
          641,
          650,
          655,
          656,
          657,
          659,
          664,
          665,
          666,
          667,
          694
        ]
      },
      {
        "test_lines": [
          307,
          347
        ],
        "covered_lines": [
          57,
          61,
          69,
          70,
          95,
          96,
          97,
          98,
          99,
          100,
          101,
          103,
          105,
          106,
          107,
          108,
          109,
          111,
          115,
          116,
          119,
          120,
          121,
          123,
          124,
          125,
          126,
          130,
          131,
          135,
          136,
          137,
          139,
          140,
          147,
          148,
          149,
          150,
          151,
          152,
          153,
          154,
          155,
          156,
          164,
          165,
          166,
          167,
          168,
          169,
          170,
          172,
          176,
          177,
          181,
          185,
          189,
          193,
          194,
          197,
          206,
          207,
          337,
          338,
          340,
          341,
          342,
          345,
          351,
          361,
          364,
          366,
          370,
          371,
          373,
          374,
          376,
          377,
          378,
          379,
          380,
          381,
          382,
          383,
          384,
          385,
          387,
          388,
          389,
          391,
          418,
          419,
          420,
          421,
          422,
          423,
          425,
          428,
          435,
          449,
          450,
          466,
          467,
          468,
          469,
          471,
          472,
          477,
          478,
          479,
          480,
          482,
          483,
          490,
          501,
          502,
          503,
          595,
          596,
          597,
          600,
          601,
          602,
          603,
          604,
          605,
          606,
          608,
          612,
          613,
          614,
          616,
          617,
          618,
          622,
          626,
          627,
          629,
          630,
          631,
          632,
          640,
          641,
          650,
          655,
          656,
          657,
          659,
          664,
          665,
          666,
          667,
          694
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/itext-java/layout/src/main/java/com/itextpdf/layout/renderer/TableRenderer.java": {
    "class_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.layout.renderer;\n",
      "\n",
      "import com.itextpdf.commons.utils.MessageFormatUtil;\n",
      "import com.itextpdf.io.logs.IoLogMessageConstant;\n",
      "import com.itextpdf.kernel.geom.Rectangle;\n",
      "import com.itextpdf.kernel.pdf.canvas.CanvasArtifact;\n",
      "import com.itextpdf.kernel.pdf.tagutils.TagTreePointer;\n",
      "import com.itextpdf.layout.borders.Border;\n",
      "import com.itextpdf.layout.element.Cell;\n",
      "import com.itextpdf.layout.element.Div;\n",
      "import com.itextpdf.layout.element.Table;\n",
      "import com.itextpdf.layout.layout.LayoutArea;\n",
      "import com.itextpdf.layout.layout.LayoutContext;\n",
      "import com.itextpdf.layout.layout.LayoutResult;\n",
      "import com.itextpdf.layout.margincollapse.MarginsCollapseHandler;\n",
      "import com.itextpdf.layout.minmaxwidth.MinMaxWidth;\n",
      "import com.itextpdf.layout.minmaxwidth.MinMaxWidthUtils;\n",
      "import com.itextpdf.layout.properties.BorderCollapsePropertyValue;\n",
      "import com.itextpdf.layout.properties.CaptionSide;\n",
      "import com.itextpdf.layout.properties.FloatPropertyValue;\n",
      "import com.itextpdf.layout.properties.Property;\n",
      "import com.itextpdf.layout.properties.UnitValue;\n",
      "import com.itextpdf.layout.properties.VerticalAlignment;\n",
      "import com.itextpdf.layout.tagging.LayoutTaggingHelper;\n",
      "\n",
      "import java.util.ArrayDeque;\n",
      "import java.util.ArrayList;\n",
      "import java.util.Collections;\n",
      "import java.util.Deque;\n",
      "import java.util.HashMap;\n",
      "import java.util.List;\n",
      "import java.util.Map;\n",
      "import org.slf4j.Logger;\n",
      "import org.slf4j.LoggerFactory;\n",
      "\n",
      "/**\n",
      " * This class represents the {@link IRenderer renderer} object for a {@link Table}\n",
      " * object. It will delegate its drawing operations on to the {@link CellRenderer}\n",
      " * instances associated with the {@link Cell table cells}.\n",
      " */\n",
      "public class TableRenderer extends AbstractRenderer {\n",
      "\n",
      "    protected List<CellRenderer[]> rows = new ArrayList<>();\n",
      "    // Row range of the current renderer. For large tables it may contain only a few rows.\n",
      "    protected Table.RowRange rowRange;\n",
      "    protected TableRenderer headerRenderer;\n",
      "    protected TableRenderer footerRenderer;\n",
      "    protected DivRenderer captionRenderer;\n",
      "    /**\n",
      "     * True for newly created renderer. For split renderers this is set to false. Used for tricky layout.\n",
      "     */\n",
      "    protected boolean isOriginalNonSplitRenderer = true;\n",
      "    TableBorders bordersHandler;\n",
      "    private float[] columnWidths = null;\n",
      "    private List<Float> heights = new ArrayList<>();\n",
      "    private float[] countedColumnWidth = null;\n",
      "    private float totalWidthForColumns;\n",
      "    private float topBorderMaxWidth;\n",
      "\n",
      "    private TableRenderer() {\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Creates a TableRenderer from a {@link Table} which will partially render\n",
      "     * the table.\n",
      "     *\n",
      "     * @param modelElement the table to be rendered by this renderer\n",
      "     * @param rowRange     the table rows to be rendered\n",
      "     */\n",
      "    public TableRenderer(Table modelElement, Table.RowRange rowRange) {\n",
      "        super(modelElement);\n",
      "        setRowRange(rowRange);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Creates a TableRenderer from a {@link Table}.\n",
      "     *\n",
      "     * @param modelElement the table to be rendered by this renderer\n",
      "     */\n",
      "    public TableRenderer(Table modelElement) {\n",
      "        this(modelElement, new Table.RowRange(0, modelElement.getNumberOfRows() - 1));\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * {@inheritDoc}\n",
      "     */\n",
      "    @Override\n",
      "    public void addChild(IRenderer renderer) {\n",
      "        if (renderer instanceof CellRenderer) {\n",
      "            // In case rowspan or colspan save cell into bottom left corner.\n",
      "            // In in this case it will be easier handle row heights in case rowspan.\n",
      "            Cell cell = (Cell) renderer.getModelElement();\n",
      "            rows.get(cell.getRow() - rowRange.getStartRow() + cell.getRowspan() - 1)[cell.getCol()] = (CellRenderer) renderer;\n",
      "        } else {\n",
      "            Logger logger = LoggerFactory.getLogger(TableRenderer.class);\n",
      "            logger.error(\"Only CellRenderer could be added\");\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    protected Rectangle applyBorderBox(Rectangle rect, Border[] borders, boolean reverse) {\n",
      "        if (bordersHandler instanceof SeparatedTableBorders) {\n",
      "            super.applyBorderBox(rect, borders, reverse);\n",
      "        } else {\n",
      "            // Do nothing here. Applying border box for tables is indeed difficult operation and is done on #layout()\n",
      "        }\n",
      "        return rect;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    protected Rectangle applyPaddings(Rectangle rect, UnitValue[] paddings, boolean reverse) {\n",
      "        if (bordersHandler instanceof SeparatedTableBorders) {\n",
      "            super.applyPaddings(rect, paddings, reverse);\n",
      "        } else {\n",
      "            // Do nothing here. Tables with collapsed borders don't have padding.\n",
      "        }\n",
      "        return rect;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public Rectangle applyPaddings(Rectangle rect, boolean reverse) {\n",
      "        if (bordersHandler instanceof SeparatedTableBorders) {\n",
      "            super.applyPaddings(rect, reverse);\n",
      "        } else {\n",
      "            // Do nothing here. Tables with collapsed borders don't have padding.\n",
      "        }\n",
      "        return rect;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Applies the given spacings on the given rectangle\n",
      "     *\n",
      "     * @param rect              a rectangle spacings will be applied on.\n",
      "     * @param horizontalSpacing the horizontal spacing to be applied on the given rectangle\n",
      "     * @param verticalSpacing   the vertical spacing to be applied on the given rectangle\n",
      "     * @param reverse           indicates whether the spacings will be applied\n",
      "     *                          inside (in case of false) or outside (in case of false) the rectangle.\n",
      "     * @return a {@link Rectangle border box} of the renderer\n",
      "     */\n",
      "    private Rectangle applySpacing(Rectangle rect, float horizontalSpacing, float verticalSpacing, boolean reverse) {\n",
      "        if (bordersHandler instanceof SeparatedTableBorders) {\n",
      "            return rect.applyMargins(verticalSpacing / 2, horizontalSpacing / 2, verticalSpacing / 2, horizontalSpacing / 2, reverse);\n",
      "        } else {\n",
      "            // Do nothing here. Tables with collapsed borders don't have spacing.\n",
      "        }\n",
      "        return rect;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Applies the given horizontal or vertical spacing on the given rectangle\n",
      "     *\n",
      "     * @param rect         a rectangle spacings will be applied on.\n",
      "     * @param spacing      the horizontal or vertical spacing to be applied on the given rectangle\n",
      "     * @param isHorizontal defines whether the provided spacing should be applied as a horizontal or a vertical one\n",
      "     * @param reverse      indicates whether the spacings will be applied\n",
      "     *                     inside (in case of false) or outside (in case of false) the rectangle.\n",
      "     * @return a {@link Rectangle border box} of the renderer\n",
      "     */\n",
      "    private Rectangle applySingleSpacing(Rectangle rect, float spacing, boolean isHorizontal, boolean reverse) {\n",
      "        if (bordersHandler instanceof SeparatedTableBorders) {\n",
      "            if (isHorizontal) {\n",
      "                return rect.applyMargins(0, spacing / 2, 0, spacing / 2, reverse);\n",
      "            } else {\n",
      "                return rect.applyMargins(spacing / 2, 0, spacing / 2, 0, reverse);\n",
      "            }\n",
      "        } else {\n",
      "            // Do nothing here. Tables with collapsed borders don't have spacing.\n",
      "        }\n",
      "        return rect;\n",
      "    }\n",
      "\n",
      "    Table getTable() {\n",
      "        return (Table) getModelElement();\n",
      "    }\n",
      "\n",
      "    private void initializeHeaderAndFooter(boolean isFirstOnThePage) {\n",
      "        Table table = (Table) getModelElement();\n",
      "        Border[] tableBorder = getBorders();\n",
      "\n",
      "        Table headerElement = table.getHeader();\n",
      "        boolean isFirstHeader = rowRange.getStartRow() == 0 && isOriginalNonSplitRenderer;\n",
      "        boolean headerShouldBeApplied = (table.isComplete() || !rows.isEmpty()) && (isFirstOnThePage && (!table.isSkipFirstHeader() || !isFirstHeader))\n",
      "                && !Boolean.TRUE.equals(this.<Boolean>getOwnProperty(Property.IGNORE_HEADER));\n",
      "        if (headerElement != null && headerShouldBeApplied) {\n",
      "            headerRenderer = initFooterOrHeaderRenderer(false, tableBorder);\n",
      "        }\n",
      "\n",
      "        Table footerElement = table.getFooter();\n",
      "        // footer can be skipped, but after the table content will be layouted\n",
      "        boolean footerShouldBeApplied = !(table.isComplete() && 0 != table.getLastRowBottomBorder().size() && table.isSkipLastFooter())\n",
      "                && !Boolean.TRUE.equals(this.<Boolean>getOwnProperty(Property.IGNORE_FOOTER));\n",
      "        if (footerElement != null && footerShouldBeApplied) {\n",
      "            footerRenderer = initFooterOrHeaderRenderer(true, tableBorder);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    private void initializeCaptionRenderer(Div caption) {\n",
      "        if (isOriginalNonSplitRenderer && null != caption) {\n",
      "            captionRenderer = (DivRenderer) caption.createRendererSubTree();\n",
      "            captionRenderer.setParent(this.parent);\n",
      "            LayoutTaggingHelper taggingHelper = this.<LayoutTaggingHelper>getProperty(Property.TAGGING_HELPER);\n",
      "            if (taggingHelper != null) {\n",
      "                taggingHelper.addKidsHint(this, Collections.<IRenderer>singletonList(captionRenderer));\n",
      "                LayoutTaggingHelper.addTreeHints(taggingHelper, captionRenderer);\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    private boolean isOriginalRenderer() {\n",
      "        return isOriginalNonSplitRenderer && !isFooterRenderer() && !isHeaderRenderer();\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * {@inheritDoc}\n",
      "     */\n",
      "    @Override\n",
      "    public LayoutResult layout(LayoutContext layoutContext) {\n",
      "        Float blockMinHeight = retrieveMinHeight();\n",
      "        Float blockMaxHeight = retrieveMaxHeight();\n",
      "\n",
      "        LayoutArea area = layoutContext.getArea();\n",
      "        boolean wasParentsHeightClipped = layoutContext.isClippedHeight();\n",
      "        boolean wasHeightClipped = false;\n",
      "        Rectangle layoutBox = area.getBBox().clone();\n",
      "\n",
      "        Table tableModel = (Table) getModelElement();\n",
      "        if (!tableModel.isComplete()) {\n",
      "            setProperty(Property.MARGIN_BOTTOM, UnitValue.createPointValue(0f));\n",
      "        }\n",
      "        if (rowRange.getStartRow() != 0) {\n",
      "            setProperty(Property.MARGIN_TOP, UnitValue.createPointValue(0f));\n",
      "        }\n",
      "\n",
      "        // we can invoke #layout() twice (processing KEEP_TOGETHER for instance)\n",
      "        // so we need to clear the results of previous #layout() invocation\n",
      "        heights.clear();\n",
      "        childRenderers.clear();\n",
      "\n",
      "        // Cells' up moves occured while split processing\n",
      "        // key is column number (there can be only one move during one split)\n",
      "        // value is the previous row number of the cell\n",
      "        Map<Integer, Integer> rowMoves = new HashMap<>();\n",
      "\n",
      "        int row, col;\n",
      "\n",
      "        int numberOfColumns = ((Table) getModelElement()).getNumberOfColumns();\n",
      "\n",
      "        // The last flushed row. Empty list if the table hasn't been set incomplete\n",
      "        List<Border> lastFlushedRowBottomBorder = tableModel.getLastRowBottomBorder();\n",
      "        boolean isAndWasComplete = tableModel.isComplete() && 0 == lastFlushedRowBottomBorder.size();\n",
      "        boolean isFirstOnThePage = 0 == rowRange.getStartRow() || isFirstOnRootArea(true);\n",
      "\n",
      "        if (!isFooterRenderer() && !isHeaderRenderer()) {\n",
      "            if (isOriginalNonSplitRenderer) {\n",
      "                boolean isSeparated = BorderCollapsePropertyValue.SEPARATE.equals(this.<BorderCollapsePropertyValue>getProperty(Property.BORDER_COLLAPSE));\n",
      "                bordersHandler = isSeparated\n",
      "                        ? (TableBorders) new SeparatedTableBorders(rows, numberOfColumns, getBorders(), !isAndWasComplete ? rowRange.getStartRow() : 0)\n",
      "                        : (TableBorders) new CollapsedTableBorders(rows, numberOfColumns, getBorders(), !isAndWasComplete ? rowRange.getStartRow() : 0);\n",
      "                bordersHandler.initializeBorders();\n",
      "            }\n",
      "        }\n",
      "        bordersHandler.setRowRange(rowRange.getStartRow(), rowRange.getFinishRow());\n",
      "        initializeHeaderAndFooter(isFirstOnThePage);\n",
      "\n",
      "        // update\n",
      "        bordersHandler.updateBordersOnNewPage(isOriginalNonSplitRenderer, isFooterRenderer() || isHeaderRenderer(), this, headerRenderer, footerRenderer);\n",
      "        if (isOriginalNonSplitRenderer) {\n",
      "            correctRowRange();\n",
      "        }\n",
      "        float horizontalBorderSpacing = bordersHandler instanceof SeparatedTableBorders && null != this.getPropertyAsFloat(Property.HORIZONTAL_BORDER_SPACING)\n",
      "                ? (float) this.getPropertyAsFloat(Property.HORIZONTAL_BORDER_SPACING)\n",
      "                : 0f;\n",
      "        float verticalBorderSpacing = bordersHandler instanceof SeparatedTableBorders && null != this.getPropertyAsFloat(Property.VERTICAL_BORDER_SPACING)\n",
      "                ? (float) this.getPropertyAsFloat(Property.VERTICAL_BORDER_SPACING)\n",
      "                : 0f;\n",
      "        if (!isAndWasComplete && !isFirstOnThePage) {\n",
      "            layoutBox.increaseHeight(verticalBorderSpacing);\n",
      "        }\n",
      "        if (isOriginalRenderer()) {\n",
      "            applyMarginsAndPaddingsAndCalculateColumnWidths(layoutBox);\n",
      "        }\n",
      "        float tableWidth = getTableWidth();\n",
      "\n",
      "        MarginsCollapseHandler marginsCollapseHandler = null;\n",
      "        boolean marginsCollapsingEnabled = Boolean.TRUE.equals(getPropertyAsBoolean(Property.COLLAPSING_MARGINS));\n",
      "        if (marginsCollapsingEnabled) {\n",
      "            marginsCollapseHandler = new MarginsCollapseHandler(this, layoutContext.getMarginsCollapseInfo());\n",
      "        }\n",
      "\n",
      "        List<Rectangle> siblingFloatRendererAreas = layoutContext.getFloatRendererAreas();\n",
      "        float clearHeightCorrection = FloatingHelper.calculateClearHeightCorrection(this, siblingFloatRendererAreas, layoutBox);\n",
      "        FloatPropertyValue floatPropertyValue = this.<FloatPropertyValue>getProperty(Property.FLOAT);\n",
      "        if (FloatingHelper.isRendererFloating(this, floatPropertyValue)) {\n",
      "            layoutBox.decreaseHeight(clearHeightCorrection);\n",
      "            FloatingHelper.adjustFloatedTableLayoutBox(this, layoutBox, tableWidth, siblingFloatRendererAreas, floatPropertyValue);\n",
      "        } else {\n",
      "            clearHeightCorrection = FloatingHelper.adjustLayoutBoxAccordingToFloats(siblingFloatRendererAreas, layoutBox, tableWidth, clearHeightCorrection, marginsCollapseHandler);\n",
      "        }\n",
      "\n",
      "        if (marginsCollapsingEnabled) {\n",
      "            marginsCollapseHandler.startMarginsCollapse(layoutBox);\n",
      "        }\n",
      "        applyMargins(layoutBox, false);\n",
      "        applyFixedXOrYPosition(true, layoutBox);\n",
      "        applyPaddings(layoutBox, false);\n",
      "\n",
      "        if (null != blockMaxHeight && blockMaxHeight <= layoutBox.getHeight()\n",
      "                && !Boolean.TRUE.equals(getPropertyAsBoolean(Property.FORCED_PLACEMENT))) {\n",
      "            layoutBox.moveUp(layoutBox.getHeight() - (float) blockMaxHeight).setHeight((float) blockMaxHeight);\n",
      "            wasHeightClipped = true;\n",
      "        }\n",
      "\n",
      "        initializeCaptionRenderer(getTable().getCaption());\n",
      "        if (captionRenderer != null) {\n",
      "            float minCaptionWidth = captionRenderer.getMinMaxWidth().getMinWidth();\n",
      "            LayoutResult captionLayoutResult = captionRenderer.layout(new LayoutContext(\n",
      "                    new LayoutArea(area.getPageNumber(), new Rectangle(layoutBox.getX(), layoutBox.getY(), Math.max(tableWidth, minCaptionWidth), layoutBox.getHeight())), wasHeightClipped || wasParentsHeightClipped));\n",
      "            if (LayoutResult.FULL != captionLayoutResult.getStatus()) {\n",
      "                return new LayoutResult(LayoutResult.NOTHING, null, null, this, captionLayoutResult.getCauseOfNothing());\n",
      "            }\n",
      "            float captionHeight = captionLayoutResult.getOccupiedArea().getBBox().getHeight();\n",
      "            if (CaptionSide.BOTTOM.equals(tableModel.getCaption().<CaptionSide>getProperty(Property.CAPTION_SIDE))) {\n",
      "                captionRenderer.move(0, -(layoutBox.getHeight() - captionHeight));\n",
      "                layoutBox.decreaseHeight(captionHeight);\n",
      "                layoutBox.moveUp(captionHeight);\n",
      "            } else {\n",
      "                layoutBox.decreaseHeight(captionHeight);\n",
      "            }\n",
      "        }\n",
      "\n",
      "        occupiedArea = new LayoutArea(area.getPageNumber(), new Rectangle(layoutBox.getX(), layoutBox.getY() + layoutBox.getHeight(), (float) tableWidth, 0));\n",
      "\n",
      "        TargetCounterHandler.addPageByID(this);\n",
      "\n",
      "        if (footerRenderer != null) {\n",
      "            // apply the difference to set footer and table left/right margins identical\n",
      "            prepareFooterOrHeaderRendererForLayout(footerRenderer, layoutBox.getWidth());\n",
      "\n",
      "            // collapse with top footer border\n",
      "            if (0 != rows.size() || !isAndWasComplete) {\n",
      "                bordersHandler.collapseTableWithFooter(footerRenderer.bordersHandler, false);\n",
      "            } else if (null != headerRenderer) {\n",
      "                headerRenderer.bordersHandler.collapseTableWithFooter(footerRenderer.bordersHandler, false);\n",
      "            }\n",
      "\n",
      "            LayoutResult result = footerRenderer.layout(new LayoutContext(new LayoutArea(area.getPageNumber(), layoutBox), wasHeightClipped || wasParentsHeightClipped));\n",
      "            if (result.getStatus() != LayoutResult.FULL) {\n",
      "                // we've changed it during footer initialization. However, now we need to process borders again as they were.\n",
      "                deleteOwnProperty(Property.BORDER_BOTTOM);\n",
      "                return new LayoutResult(LayoutResult.NOTHING, null, null, this, result.getCauseOfNothing());\n",
      "            }\n",
      "            float footerHeight = result.getOccupiedArea().getBBox().getHeight();\n",
      "            footerRenderer.move(0, -(layoutBox.getHeight() - footerHeight));\n",
      "            layoutBox.moveUp(footerHeight).decreaseHeight(footerHeight);\n",
      "            // The footer has reserved the space for its top border-spacing.\n",
      "            // However, since this space is shared with the table, it may be used by the table.\n",
      "            layoutBox.moveDown(verticalBorderSpacing).increaseHeight(verticalBorderSpacing);\n",
      "            if (!tableModel.isEmpty()) {\n",
      "                float maxFooterTopBorderWidth = footerRenderer.bordersHandler.getMaxTopWidth();\n",
      "                footerRenderer.occupiedArea.getBBox().decreaseHeight(maxFooterTopBorderWidth);\n",
      "                layoutBox.moveDown(maxFooterTopBorderWidth).increaseHeight(maxFooterTopBorderWidth);\n",
      "            }\n",
      "            // we will delete FORCED_PLACEMENT property after adding one row\n",
      "            // but the footer should be forced placed once more (since we renderer footer twice)\n",
      "            if (Boolean.TRUE.equals(getPropertyAsBoolean(Property.FORCED_PLACEMENT))) {\n",
      "                footerRenderer.setProperty(Property.FORCED_PLACEMENT, true);\n",
      "            }\n",
      "        }\n",
      "\n",
      "        if (headerRenderer != null) {\n",
      "            prepareFooterOrHeaderRendererForLayout(headerRenderer, layoutBox.getWidth());\n",
      "            if (0 != rows.size()) {\n",
      "                bordersHandler.collapseTableWithHeader(headerRenderer.bordersHandler, !tableModel.isEmpty());\n",
      "            } else if (null != footerRenderer) {\n",
      "                footerRenderer.bordersHandler.collapseTableWithHeader(headerRenderer.bordersHandler, true);\n",
      "            }\n",
      "\n",
      "            // first row own top border. We will use it while header processing\n",
      "            topBorderMaxWidth = bordersHandler.getMaxTopWidth();\n",
      "            LayoutResult result = headerRenderer.layout(new LayoutContext(new LayoutArea(area.getPageNumber(), layoutBox), wasHeightClipped || wasParentsHeightClipped));\n",
      "            if (result.getStatus() != LayoutResult.FULL) {\n",
      "                // we've changed it during header initialization. However, now we need to process borders again as they were.\n",
      "                deleteOwnProperty(Property.BORDER_TOP);\n",
      "                return new LayoutResult(LayoutResult.NOTHING, null, null, this, result.getCauseOfNothing());\n",
      "            }\n",
      "            float headerHeight = result.getOccupiedArea().getBBox().getHeight();\n",
      "            layoutBox.decreaseHeight(headerHeight);\n",
      "            occupiedArea.getBBox().moveDown(headerHeight).increaseHeight(headerHeight);\n",
      "            bordersHandler.fixHeaderOccupiedArea(occupiedArea.getBBox(), layoutBox);\n",
      "            // The header has reserved the space for its bottom border-spacing.\n",
      "            // However, since this space is shared with the table, it may be used by the table.\n",
      "            layoutBox.increaseHeight(verticalBorderSpacing);\n",
      "            occupiedArea.getBBox().moveUp(verticalBorderSpacing).decreaseHeight(verticalBorderSpacing);\n",
      "        }\n",
      "\n",
      "        // Apply spacings. Since occupiedArea was already created it's a bit more difficult for the latter.\n",
      "        applySpacing(layoutBox, horizontalBorderSpacing, verticalBorderSpacing, false);\n",
      "        applySingleSpacing(occupiedArea.getBBox(), (float) horizontalBorderSpacing, true, false);\n",
      "        occupiedArea.getBBox().moveDown(verticalBorderSpacing / 2);\n",
      "\n",
      "        topBorderMaxWidth = bordersHandler.getMaxTopWidth();\n",
      "        bordersHandler.applyLeftAndRightTableBorder(layoutBox, false);\n",
      "        // Table should have a row and some child elements in order to be considered non empty\n",
      "        bordersHandler.applyTopTableBorder(occupiedArea.getBBox(), layoutBox,\n",
      "                tableModel.isEmpty() || 0 == rows.size(), isAndWasComplete, false);\n",
      "        if (bordersHandler instanceof SeparatedTableBorders) {\n",
      "            float bottomBorderWidth = bordersHandler.getMaxBottomWidth();\n",
      "            layoutBox\n",
      "                    .moveUp(bottomBorderWidth)\n",
      "                    .decreaseHeight(bottomBorderWidth);\n",
      "        }\n",
      "\n",
      "        LayoutResult[] splits = new LayoutResult[numberOfColumns];\n",
      "        // This represents the target row index for the overflow renderer to be placed to.\n",
      "        // Usually this is just the current row id of a cell, but it has valuable meaning when a cell has rowspan.\n",
      "        int[] targetOverflowRowIndex = new int[numberOfColumns];\n",
      "        // if this is the last renderer, we will use that information to enlarge rows proportionally\n",
      "        List<Boolean> rowsHasCellWithSetHeight = new ArrayList<>();\n",
      "\n",
      "        for (row = 0; row < rows.size(); row++) {\n",
      "            List<Rectangle> childFloatRendererAreas = new ArrayList<>();\n",
      "            // if forced placement was earlier set, this means the element did not fit into the area, and in this case\n",
      "            // we only want to place the first row in a forced way, not the next ones, otherwise they will be invisible\n",
      "            if (row == 1 && Boolean.TRUE.equals(this.<Boolean>getProperty(Property.FORCED_PLACEMENT))) {\n",
      "                if (Boolean.TRUE.equals(this.<Boolean>getOwnProperty(Property.FORCED_PLACEMENT))) {\n",
      "                    deleteOwnProperty(Property.FORCED_PLACEMENT);\n",
      "                } else {\n",
      "                    setProperty(Property.FORCED_PLACEMENT, false);\n",
      "                }\n",
      "            }\n",
      "\n",
      "            CellRenderer[] currentRow = rows.get(row);\n",
      "            float rowHeight = 0;\n",
      "            boolean split = false;\n",
      "            // Indicates that all the cells fit (at least partially after splitting if not forbidden by keepTogether) in the current row.\n",
      "            boolean hasContent = true;\n",
      "            // Indicates that we have added a cell from the future, i.e. a cell which has a big rowspan and we shouldn't have\n",
      "            // added it yet, because we add a cell with rowspan only during the processing of the very last row this cell occupied,\n",
      "            // but now we have area break and we had to force that cell addition.\n",
      "            boolean cellWithBigRowspanAdded = false;\n",
      "            List<CellRenderer> currChildRenderers = new ArrayList<>();\n",
      "            // Process in a queue, because we might need to add a cell from the future, i.e. having big rowspan in case of split.\n",
      "            Deque<CellRendererInfo> cellProcessingQueue = new ArrayDeque<CellRendererInfo>();\n",
      "            for (col = 0; col < currentRow.length; col++) {\n",
      "                if (currentRow[col] != null) {\n",
      "                    cellProcessingQueue.addLast(new CellRendererInfo(currentRow[col], col, row));\n",
      "                }\n",
      "            }\n",
      "            boolean rowHasCellWithSetHeight = false;\n",
      "            // the element which was the first to cause Layout.Nothing\n",
      "            IRenderer firstCauseOfNothing = null;\n",
      "\n",
      "            // In the next lines we pretend as if the current row will be the last on the current area:\n",
      "            // in this case it will be collapsed with the table's bottom border / the footer's top border\n",
      "            bordersHandler.setFinishRow(rowRange.getStartRow() + row);\n",
      "            final List<Border> rowBottomBorderIfLastOnPage =\n",
      "                    bordersHandler.getHorizontalBorder(rowRange.getStartRow() + row + 1);\n",
      "            Border widestRowBottomBorder = TableBorderUtil.getWidestBorder(rowBottomBorderIfLastOnPage);\n",
      "            float widestRowBottomBorderWidth = null == widestRowBottomBorder ? 0 : widestRowBottomBorder.getWidth();\n",
      "            bordersHandler.setFinishRow(rowRange.getFinishRow());\n",
      "\n",
      "            // if cell is in the last row on the page, its borders shouldn't collapse with the next row borders\n",
      "            while (cellProcessingQueue.size() > 0) {\n",
      "                CellRendererInfo currentCellInfo = cellProcessingQueue.pop();\n",
      "                col = currentCellInfo.column;\n",
      "                CellRenderer cell = currentCellInfo.cellRenderer;\n",
      "                int colspan = (int) cell.getPropertyAsInteger(Property.COLSPAN);\n",
      "                int rowspan = (int) cell.getPropertyAsInteger(Property.ROWSPAN);\n",
      "                if (1 != rowspan) {\n",
      "                    cellWithBigRowspanAdded = true;\n",
      "                }\n",
      "                targetOverflowRowIndex[col] = currentCellInfo.finishRowInd;\n",
      "                // This cell came from the future (split occurred and we need to place cell with big rowpsan into the current area)\n",
      "                boolean currentCellHasBigRowspan = (row != currentCellInfo.finishRowInd);\n",
      "                if (cell.hasOwnOrModelProperty(Property.HEIGHT)) {\n",
      "                    rowHasCellWithSetHeight = true;\n",
      "                }\n",
      "                float cellWidth = 0, colOffset = 0;\n",
      "                for (int k = col; k < col + colspan; k++) {\n",
      "                    cellWidth += countedColumnWidth[k];\n",
      "                }\n",
      "                for (int l = 0; l < col; l++) {\n",
      "                    colOffset += countedColumnWidth[l];\n",
      "                }\n",
      "                float rowspanOffset = 0;\n",
      "                for (int m = row - 1; m > currentCellInfo.finishRowInd - rowspan && m >= 0; m--) {\n",
      "                    rowspanOffset += (float) heights.get(m);\n",
      "                }\n",
      "                float cellLayoutBoxHeight = rowspanOffset + (!currentCellHasBigRowspan || hasContent ? layoutBox.getHeight() : 0);\n",
      "                float cellLayoutBoxBottom = layoutBox.getY() + (!currentCellHasBigRowspan || hasContent ? 0 : layoutBox.getHeight());\n",
      "                Rectangle cellLayoutBox = new Rectangle(layoutBox.getX() + colOffset, cellLayoutBoxBottom, cellWidth, cellLayoutBoxHeight);\n",
      "                LayoutArea cellArea = new LayoutArea(layoutContext.getArea().getPageNumber(), cellLayoutBox);\n",
      "                VerticalAlignment verticalAlignment = cell.<VerticalAlignment>getProperty(Property.VERTICAL_ALIGNMENT);\n",
      "                cell.setProperty(Property.VERTICAL_ALIGNMENT, null);\n",
      "                UnitValue cellWidthProperty = cell.<UnitValue>getProperty(Property.WIDTH);\n",
      "                if (cellWidthProperty != null && cellWidthProperty.isPercentValue()) {\n",
      "                    cell.setProperty(Property.WIDTH, UnitValue.createPointValue(cellWidth));\n",
      "                }\n",
      "                // Apply cell borders\n",
      "                float[] cellIndents = bordersHandler.getCellBorderIndents(currentCellInfo.finishRowInd, col,\n",
      "                        rowspan, colspan);\n",
      "                if (!(bordersHandler instanceof SeparatedTableBorders)) {\n",
      "                    // Bottom indent to be applied consists of two parts which should be summed up:\n",
      "                    // a) half of the border of the current row (in case it is the last row on the area)\n",
      "                    // b) half of the widest possible bottom border (in case it is the last row on the area)\n",
      "                    //\n",
      "                    // The following \"image\" demonstrates the idea: C represents some content,\n",
      "                    // 1 represents border, 0 represents not occupied space, - represents\n",
      "                    // the middle of a horizontal border, | represents vertical border\n",
      "                    // (the latter could be of customized width as well, however, for the reasons\n",
      "                    // of this comment it could omitted)\n",
      "                    // CCCCC|CCCCC\n",
      "                    // CCCCC|11111\n",
      "                    // CCCCC|11111\n",
      "                    // 11111|11111\n",
      "                    // -----|-----\n",
      "                    // 11111|11111\n",
      "                    // 00000|11111\n",
      "                    // 00000|11111\n",
      "                    //\n",
      "                    // The question arises, however: what if the top border of the cell below is wider than the\n",
      "                    // bottom border of the table. This is already considered: when considering rowHeight\n",
      "                    // the width of the real collapsed border will be added to it.\n",
      "                    // It is quite important to understand that in case it is not possible\n",
      "                    // to add any other row, the current row should be collapsed with the table's bottom\n",
      "                    // footer's top borders rather than with the next row. If it is the case, iText\n",
      "                    // will revert collapsing to the one considered in the next calculations.\n",
      "\n",
      "                    // Be aware that if the col-th border of rowBottomBorderIfLastOnPage is null,\n",
      "                    // cellIndents[2] might not be null: imagine a table without borders,\n",
      "                    // a cell with no border (the current cell) and a cell below with some top border.\n",
      "                    // Nevertheless, a stated above we do not need to consider cellIndents[2] here.\n",
      "                    final float potentialWideCellBorder = null == rowBottomBorderIfLastOnPage.get(col)\n",
      "                            ? 0\n",
      "                            : rowBottomBorderIfLastOnPage.get(col).getWidth();\n",
      "                    bordersHandler.applyCellIndents(cellArea.getBBox(), cellIndents[0], cellIndents[1],\n",
      "                            potentialWideCellBorder + widestRowBottomBorderWidth, cellIndents[3], false);\n",
      "                }\n",
      "                // update cell width\n",
      "                cellWidth = cellArea.getBBox().getWidth();\n",
      "\n",
      "                // create hint for cell if not yet created\n",
      "                LayoutTaggingHelper taggingHelper = this.<LayoutTaggingHelper>getProperty(Property.TAGGING_HELPER);\n",
      "                if (taggingHelper != null) {\n",
      "                    taggingHelper.addKidsHint(this, Collections.<IRenderer>singletonList(cell));\n",
      "                    LayoutTaggingHelper.addTreeHints(taggingHelper, cell);\n",
      "                }\n",
      "\n",
      "                LayoutResult cellResult = cell.setParent(this).layout(new LayoutContext(cellArea, null, childFloatRendererAreas, wasHeightClipped || wasParentsHeightClipped));\n",
      "                if (cellWidthProperty != null && cellWidthProperty.isPercentValue()) {\n",
      "                    cell.setProperty(Property.WIDTH, cellWidthProperty);\n",
      "                    if (null != cellResult.getOverflowRenderer()) {\n",
      "                        cellResult.getOverflowRenderer().setProperty(Property.WIDTH, cellWidthProperty);\n",
      "                    }\n",
      "                }\n",
      "                cell.setProperty(Property.VERTICAL_ALIGNMENT, verticalAlignment);\n",
      "                // width of BlockRenderer depends on child areas, while in cell case it is hardly define.\n",
      "                if (cellResult.getStatus() != LayoutResult.NOTHING) {\n",
      "                    cell.getOccupiedArea().getBBox().setWidth(cellWidth);\n",
      "                } else if (null == firstCauseOfNothing) {\n",
      "                    firstCauseOfNothing = cellResult.getCauseOfNothing();\n",
      "                }\n",
      "\n",
      "                if (currentCellHasBigRowspan) {\n",
      "                    // cell from the future\n",
      "                    if (cellResult.getStatus() != LayoutResult.FULL) {\n",
      "                        splits[col] = cellResult;\n",
      "                        if (cellResult.getStatus() != LayoutResult.NOTHING) {\n",
      "                            // one should disable cell alignment if it was split\n",
      "                            splits[col].getOverflowRenderer().setProperty(Property.VERTICAL_ALIGNMENT, VerticalAlignment.TOP);\n",
      "                        }\n",
      "                    }\n",
      "                    if (cellResult.getStatus() == LayoutResult.PARTIAL) {\n",
      "                        currentRow[col] = (CellRenderer) cellResult.getSplitRenderer();\n",
      "                    } else {\n",
      "                        rows.get(currentCellInfo.finishRowInd)[col] = null;\n",
      "                        currentRow[col] = cell;\n",
      "                        rowMoves.put(col, currentCellInfo.finishRowInd);\n",
      "                    }\n",
      "                } else {\n",
      "                    if (cellResult.getStatus() != LayoutResult.FULL) {\n",
      "                        // first time split occurs\n",
      "                        if (!split) {\n",
      "                            int addCol;\n",
      "                            // This is a case when last footer should be skipped and we might face an end of the table.\n",
      "                            // We check if we can fit all the rows right now and the split occurred only because we reserved\n",
      "                            // space for footer before, and if yes we skip footer and write all the content right now.\n",
      "                            boolean skipLastFooter = null != footerRenderer && tableModel.isSkipLastFooter() && tableModel.isComplete()\n",
      "                                    && !Boolean.TRUE.equals(this.<Boolean>getOwnProperty(Property.FORCED_PLACEMENT));\n",
      "                            if (skipLastFooter) {\n",
      "                                LayoutArea potentialArea = new LayoutArea(area.getPageNumber(), layoutBox.clone());\n",
      "                                applySingleSpacing(potentialArea.getBBox(), horizontalBorderSpacing, true, true);\n",
      "                                // Fix layout area\n",
      "                                Border widestRowTopBorder = bordersHandler.getWidestHorizontalBorder(rowRange.getStartRow() + row);\n",
      "                                if (bordersHandler instanceof CollapsedTableBorders && null != widestRowTopBorder) {\n",
      "                                    potentialArea.getBBox().increaseHeight((float) widestRowTopBorder.getWidth() / 2);\n",
      "                                }\n",
      "                                if (null == headerRenderer) {\n",
      "                                    potentialArea.getBBox().increaseHeight(bordersHandler.getMaxTopWidth());\n",
      "                                }\n",
      "                                bordersHandler.applyLeftAndRightTableBorder(potentialArea.getBBox(), true);\n",
      "                                float footerHeight = footerRenderer.getOccupiedArea().getBBox().getHeight();\n",
      "                                potentialArea.getBBox().moveDown(footerHeight - (float) verticalBorderSpacing / 2).increaseHeight(footerHeight);\n",
      "\n",
      "                                TableRenderer overflowRenderer = createOverflowRenderer(new Table.RowRange(rowRange.getStartRow() + row, rowRange.getFinishRow()));\n",
      "                                overflowRenderer.rows = rows.subList(row, rows.size());\n",
      "                                overflowRenderer.setProperty(Property.IGNORE_HEADER, true);\n",
      "                                overflowRenderer.setProperty(Property.IGNORE_FOOTER, true);\n",
      "                                overflowRenderer.setProperty(Property.MARGIN_TOP, UnitValue.createPointValue(0));\n",
      "                                overflowRenderer.setProperty(Property.MARGIN_BOTTOM, UnitValue.createPointValue(0));\n",
      "                                overflowRenderer.setProperty(Property.MARGIN_LEFT, UnitValue.createPointValue(0));\n",
      "                                overflowRenderer.setProperty(Property.MARGIN_RIGHT, UnitValue.createPointValue(0));\n",
      "                                // we've already applied the top table border on header\n",
      "                                if (null != headerRenderer) {\n",
      "                                    overflowRenderer.setProperty(Property.BORDER_TOP, Border.NO_BORDER);\n",
      "                                }\n",
      "                                overflowRenderer.bordersHandler = bordersHandler;\n",
      "                                // save old bordersHandler properties\n",
      "                                bordersHandler.skipFooter(overflowRenderer.getBorders());\n",
      "                                if (null != headerRenderer) {\n",
      "                                    bordersHandler.skipHeader(overflowRenderer.getBorders());\n",
      "                                }\n",
      "                                int savedStartRow = overflowRenderer.bordersHandler.startRow;\n",
      "                                overflowRenderer.bordersHandler.setStartRow(row);\n",
      "                                prepareFooterOrHeaderRendererForLayout(overflowRenderer, potentialArea.getBBox().getWidth());\n",
      "                                LayoutResult res = overflowRenderer.layout(new LayoutContext(potentialArea, wasHeightClipped || wasParentsHeightClipped));\n",
      "                                bordersHandler.setStartRow(savedStartRow);\n",
      "                                if (LayoutResult.FULL == res.getStatus()) {\n",
      "                                    if (taggingHelper != null) {\n",
      "                                        // marking as artifact to get rid of all tagging hints from this renderer\n",
      "                                        taggingHelper.markArtifactHint(footerRenderer);\n",
      "                                    }\n",
      "                                    footerRenderer = null;\n",
      "                                    // fix layout area and table bottom border\n",
      "                                    layoutBox.increaseHeight(footerHeight).moveDown(footerHeight);\n",
      "                                    deleteOwnProperty(Property.BORDER_BOTTOM);\n",
      "\n",
      "                                    bordersHandler.setFinishRow(rowRange.getStartRow() + row);\n",
      "                                    widestRowBottomBorder = bordersHandler.getWidestHorizontalBorder(rowRange.getStartRow() + row + 1);\n",
      "                                    bordersHandler.setFinishRow(rowRange.getFinishRow());\n",
      "                                    widestRowBottomBorderWidth = null == widestRowBottomBorder ? 0 : widestRowBottomBorder.getWidth();\n",
      "\n",
      "                                    cellProcessingQueue.clear();\n",
      "                                    currChildRenderers.clear();\n",
      "                                    for (addCol = 0; addCol < currentRow.length; addCol++) {\n",
      "                                        if (currentRow[addCol] != null) {\n",
      "                                            cellProcessingQueue.addLast(new CellRendererInfo(currentRow[addCol], addCol, row));\n",
      "                                        }\n",
      "                                    }\n",
      "                                    continue;\n",
      "                                } else {\n",
      "                                    if (null != headerRenderer) {\n",
      "                                        bordersHandler.collapseTableWithHeader(headerRenderer.bordersHandler, false);\n",
      "                                    }\n",
      "                                    bordersHandler.collapseTableWithFooter(footerRenderer.bordersHandler, false);\n",
      "                                    bordersHandler.tableBoundingBorders[2] = Border.NO_BORDER;\n",
      "                                }\n",
      "                            }\n",
      "\n",
      "                            // Here we look for a cell with big rowspan (i.e. one which would not be normally processed in\n",
      "                            // the scope of this row), and we add such cells to the queue, because we need to write them\n",
      "                            // at least partially into the available area we have.\n",
      "                            for (addCol = 0; addCol < currentRow.length; addCol++) {\n",
      "                                if (currentRow[addCol] == null) {\n",
      "                                    // Search for the next cell including rowspan.\n",
      "                                    for (int addRow = row + 1; addRow < rows.size(); addRow++) {\n",
      "                                        if (rows.get(addRow)[addCol] != null) {\n",
      "                                            CellRenderer addRenderer = rows.get(addRow)[addCol];\n",
      "                                            if (row + (int) addRenderer.getPropertyAsInteger(Property.ROWSPAN) - 1 >= addRow) {\n",
      "                                                cellProcessingQueue.addLast(new CellRendererInfo(addRenderer, addCol, addRow));\n",
      "                                            }\n",
      "                                            break;\n",
      "                                        }\n",
      "                                    }\n",
      "                                }\n",
      "                            }\n",
      "                        }\n",
      "                        split = true;\n",
      "                        splits[col] = cellResult;\n",
      "                        if (cellResult.getStatus() == LayoutResult.NOTHING) {\n",
      "                            hasContent = false;\n",
      "                            splits[col].getOverflowRenderer().setProperty(Property.VERTICAL_ALIGNMENT, verticalAlignment);\n",
      "                        }\n",
      "                    }\n",
      "                }\n",
      "                currChildRenderers.add(cell);\n",
      "                if (cellResult.getStatus() != LayoutResult.NOTHING) {\n",
      "                    rowHeight = Math.max(rowHeight, cellResult.getOccupiedArea().getBBox().getHeight() + bordersHandler.getCellVerticalAddition(cellIndents) - rowspanOffset);\n",
      "                }\n",
      "            }\n",
      "            if (hasContent) {\n",
      "                heights.add(rowHeight);\n",
      "                rowsHasCellWithSetHeight.add(rowHasCellWithSetHeight);\n",
      "                occupiedArea.getBBox().moveDown(rowHeight);\n",
      "                occupiedArea.getBBox().increaseHeight(rowHeight);\n",
      "                layoutBox.decreaseHeight(rowHeight);\n",
      "            }\n",
      "\n",
      "            if (split || row == rows.size() - 1) {\n",
      "                bordersHandler.setFinishRow(bordersHandler.getStartRow() + row);\n",
      "                if (!hasContent && bordersHandler.getFinishRow() != bordersHandler.getStartRow()) {\n",
      "                    bordersHandler.setFinishRow(bordersHandler.getFinishRow() - 1);\n",
      "                }\n",
      "                boolean skip = false;\n",
      "                if (null != footerRenderer && tableModel.isComplete() && tableModel.isSkipLastFooter() && !split\n",
      "                        && !Boolean.TRUE.equals(this.<Boolean>getOwnProperty(Property.FORCED_PLACEMENT))) {\n",
      "                    LayoutTaggingHelper taggingHelper = this.<LayoutTaggingHelper>getProperty(Property.TAGGING_HELPER);\n",
      "                    if (taggingHelper != null) {\n",
      "                        // marking as artifact to get rid of all tagging hints from this renderer\n",
      "                        taggingHelper.markArtifactHint(footerRenderer);\n",
      "                    }\n",
      "                    footerRenderer = null;\n",
      "                    if (tableModel.isEmpty()) {\n",
      "                        this.deleteOwnProperty(Property.BORDER_TOP);\n",
      "                    }\n",
      "                    skip = true;\n",
      "                }\n",
      "                // Correct occupied areas of all added cells\n",
      "                correctLayoutedCellsOccupiedAreas(splits, row, targetOverflowRowIndex, blockMinHeight, layoutBox, rowsHasCellWithSetHeight, !split, !hasContent && cellWithBigRowspanAdded, skip);\n",
      "            }\n",
      "            // process footer with collapsed borders\n",
      "            if ((split || row == rows.size() - 1) && null != footerRenderer) {\n",
      "                // maybe the table was incomplete and we can process the footer\n",
      "                if (!hasContent && childRenderers.size() == 0) {\n",
      "                    bordersHandler.applyTopTableBorder(occupiedArea.getBBox(), layoutBox, true);\n",
      "                } else {\n",
      "                    bordersHandler.applyBottomTableBorder(occupiedArea.getBBox(), layoutBox, tableModel.isEmpty(), false, true);\n",
      "                }\n",
      "                if (!(bordersHandler instanceof SeparatedTableBorders)) {\n",
      "                    layoutBox.moveDown(footerRenderer.occupiedArea.getBBox().getHeight()).increaseHeight(footerRenderer.occupiedArea.getBBox().getHeight());\n",
      "                    // apply the difference to set footer and table left/right margins identical\n",
      "                    bordersHandler.applyLeftAndRightTableBorder(layoutBox, true);\n",
      "                    prepareFooterOrHeaderRendererForLayout(footerRenderer, layoutBox.getWidth());\n",
      "\n",
      "                    // We've already layouted footer one time in order to know how much place it occupies.\n",
      "                    // That time, however, we didn't know with which border the top footer's border should be collapsed.\n",
      "                    // And now, when we possess such knowledge, we are performing the second attempt, but we need to nullify results\n",
      "                    // from the previous attempt\n",
      "                    if (bordersHandler instanceof CollapsedTableBorders) {\n",
      "                        ((CollapsedTableBorders) bordersHandler).setBottomBorderCollapseWith(null, null);\n",
      "                    }\n",
      "                    bordersHandler.collapseTableWithFooter(footerRenderer.bordersHandler, hasContent || 0 != childRenderers.size());\n",
      "\n",
      "                    if (bordersHandler instanceof CollapsedTableBorders) {\n",
      "                        footerRenderer.setBorders(CollapsedTableBorders.getCollapsedBorder(footerRenderer.getBorders()[2], getBorders()[2]), 2);\n",
      "                    }\n",
      "                    footerRenderer.layout(new LayoutContext(new LayoutArea(area.getPageNumber(), layoutBox), wasHeightClipped || wasParentsHeightClipped));\n",
      "                    bordersHandler.applyLeftAndRightTableBorder(layoutBox, false);\n",
      "                    float footerHeight = footerRenderer.getOccupiedAreaBBox().getHeight();\n",
      "                    footerRenderer.move(0, -(layoutBox.getHeight() - footerHeight));\n",
      "                    layoutBox.setY(footerRenderer.occupiedArea.getBBox().getTop()).setHeight(occupiedArea.getBBox().getBottom() - layoutBox.getBottom());\n",
      "                }\n",
      "            }\n",
      "            if (!split) {\n",
      "                childRenderers.addAll(currChildRenderers);\n",
      "                currChildRenderers.clear();\n",
      "            }\n",
      "            if (split && footerRenderer != null) {\n",
      "                LayoutTaggingHelper taggingHelper = this.<LayoutTaggingHelper>getProperty(Property.TAGGING_HELPER);\n",
      "                if (taggingHelper != null) {\n",
      "                    taggingHelper.markArtifactHint(footerRenderer);\n",
      "                }\n",
      "            }\n",
      "            if (split) {\n",
      "                if (marginsCollapsingEnabled) {\n",
      "                    marginsCollapseHandler.endMarginsCollapse(layoutBox);\n",
      "                }\n",
      "                TableRenderer[] splitResult = split(row, hasContent, cellWithBigRowspanAdded);\n",
      "                OverflowRowsWrapper overflowRows = new OverflowRowsWrapper(splitResult[1]);\n",
      "                // delete #layout() related properties\n",
      "                if (null != headerRenderer || null != footerRenderer) {\n",
      "                    if (null != headerRenderer || tableModel.isEmpty()) {\n",
      "                        splitResult[1].deleteOwnProperty(Property.BORDER_TOP);\n",
      "                    }\n",
      "                    if (null != footerRenderer || tableModel.isEmpty()) {\n",
      "                        splitResult[1].deleteOwnProperty(Property.BORDER_BOTTOM);\n",
      "                    }\n",
      "                }\n",
      "\n",
      "                int[] rowspans = new int[currentRow.length];\n",
      "                boolean[] columnsWithCellToBeEnlarged = new boolean[currentRow.length];\n",
      "                for (col = 0; col < currentRow.length; col++) {\n",
      "                    if (splits[col] != null) {\n",
      "                        CellRenderer cellSplit = (CellRenderer) splits[col].getSplitRenderer();\n",
      "                        if (null != cellSplit) {\n",
      "                            rowspans[col] = ((Cell) cellSplit.getModelElement()).getRowspan();\n",
      "                        }\n",
      "                        if (splits[col].getStatus() != LayoutResult.NOTHING && (hasContent || cellWithBigRowspanAdded)) {\n",
      "                            childRenderers.add(cellSplit);\n",
      "                        }\n",
      "                        LayoutArea cellOccupiedArea = currentRow[col].getOccupiedArea();\n",
      "                        if (hasContent || cellWithBigRowspanAdded || splits[col].getStatus() == LayoutResult.NOTHING) {\n",
      "                            CellRenderer cellOverflow = (CellRenderer) splits[col].getOverflowRenderer();\n",
      "                            CellRenderer originalCell = currentRow[col];\n",
      "                            currentRow[col] = null;\n",
      "                            rows.get(targetOverflowRowIndex[col])[col] = originalCell;\n",
      "                            overflowRows.setCell(0, col, null);\n",
      "                            overflowRows.setCell(targetOverflowRowIndex[col] - row, col, cellOverflow);\n",
      "                        } else {\n",
      "                            overflowRows.setCell(targetOverflowRowIndex[col] - row, col, currentRow[col]);\n",
      "                        }\n",
      "                        overflowRows.getCell(targetOverflowRowIndex[col] - row, col).occupiedArea = cellOccupiedArea;\n",
      "                    } else if (currentRow[col] != null) {\n",
      "                        if (hasContent) {\n",
      "                            rowspans[col] = ((Cell) currentRow[col].getModelElement()).getRowspan();\n",
      "                        }\n",
      "                        boolean isBigRowspannedCell = 1 != ((Cell) currentRow[col].getModelElement()).getRowspan();\n",
      "                        if (hasContent || isBigRowspannedCell) {\n",
      "                            columnsWithCellToBeEnlarged[col] = true;\n",
      "                        }\n",
      "                    }\n",
      "                }\n",
      "\n",
      "                int minRowspan = Integer.MAX_VALUE;\n",
      "                for (col = 0; col < rowspans.length; col++) {\n",
      "                    if (0 != rowspans[col]) {\n",
      "                        minRowspan = Math.min(minRowspan, rowspans[col]);\n",
      "                    }\n",
      "                }\n",
      "\n",
      "                for (col = 0; col < numberOfColumns; col++) {\n",
      "                    if (columnsWithCellToBeEnlarged[col]) {\n",
      "                        enlargeCell(col, row, minRowspan,currentRow, overflowRows, targetOverflowRowIndex, splitResult);\n",
      "                    }\n",
      "                }\n",
      "\n",
      "                applySpacing(layoutBox, horizontalBorderSpacing, verticalBorderSpacing, true);\n",
      "                applySingleSpacing(occupiedArea.getBBox(), horizontalBorderSpacing, true, true);\n",
      "                if (null != footerRenderer) {\n",
      "                    layoutBox.moveUp(verticalBorderSpacing).decreaseHeight(verticalBorderSpacing);\n",
      "                }\n",
      "                if (null != headerRenderer || !tableModel.isEmpty()) {\n",
      "                    layoutBox.decreaseHeight(verticalBorderSpacing);\n",
      "                }\n",
      "                if (0 == row && !hasContent && null == headerRenderer) {\n",
      "                    occupiedArea.getBBox().moveUp((float) verticalBorderSpacing / 2);\n",
      "                } else {\n",
      "                    applySingleSpacing(occupiedArea.getBBox(), verticalBorderSpacing, false, true);\n",
      "                }\n",
      "                // if only footer should be processed\n",
      "                if (!isAndWasComplete && null != footerRenderer && 0 == splitResult[0].rows.size()) {\n",
      "                    layoutBox.increaseHeight(verticalBorderSpacing);\n",
      "                }\n",
      "                // Apply borders if there is no footer\n",
      "                if (null == footerRenderer) {\n",
      "                    // If split renderer does not have any rows, it can mean two things:\n",
      "                    // - either nothing is placed and the top border, which have been already applied,\n",
      "                    // should be reverted\n",
      "                    // - or the only placed row is placed partially.\n",
      "                    // In the latter case the number of added child renderers should equal to the number of the cells\n",
      "                    // in the current row (currChildRenderers stands for it)\n",
      "                    if (!splitResult[0].rows.isEmpty() || currChildRenderers.size() == childRenderers.size()) {\n",
      "                        bordersHandler.applyBottomTableBorder(occupiedArea.getBBox(), layoutBox, false);\n",
      "                    } else {\n",
      "                        bordersHandler.applyTopTableBorder(occupiedArea.getBBox(), layoutBox, true);\n",
      "                        // process bottom border of the last added row if there is no footer\n",
      "                        if (!isAndWasComplete && !isFirstOnThePage) {\n",
      "                            bordersHandler.applyTopTableBorder(occupiedArea.getBBox(), layoutBox, 0 == childRenderers.size(), true, false);\n",
      "                        }\n",
      "                    }\n",
      "                }\n",
      "                if (Boolean.TRUE.equals(getPropertyAsBoolean(Property.FILL_AVAILABLE_AREA))\n",
      "                        || Boolean.TRUE.equals(getPropertyAsBoolean(Property.FILL_AVAILABLE_AREA_ON_SPLIT))) {\n",
      "                    extendLastRow(splitResult[1].rows.get(0), layoutBox);\n",
      "                }\n",
      "                adjustFooterAndFixOccupiedArea(layoutBox, 0 != heights.size() ? verticalBorderSpacing : 0);\n",
      "                adjustCaptionAndFixOccupiedArea(layoutBox, 0 != heights.size() ? verticalBorderSpacing : 0);\n",
      "\n",
      "                // On the next page we need to process rows without any changes except moves connected to actual cell splitting\n",
      "                for (Map.Entry<Integer, Integer> entry : rowMoves.entrySet()) {\n",
      "                    // Move the cell back to its row if there was no actual split\n",
      "                    if (null == splitResult[1].rows.get((int) entry.getValue() - splitResult[0].rows.size())[entry.getKey()]) {\n",
      "                        CellRenderer originalCellRenderer = rows.get(row)[entry.getKey()];\n",
      "                        CellRenderer overflowCellRenderer = splitResult[1].rows.get(row - splitResult[0].rows.size())[entry.getKey()];\n",
      "                        rows.get((int) entry.getValue())[entry.getKey()] = originalCellRenderer;\n",
      "                        rows.get(row)[entry.getKey()] = null;\n",
      "                        overflowRows.setCell((int) entry.getValue() - splitResult[0].rows.size(), entry.getKey(), overflowCellRenderer);\n",
      "                        overflowRows.setCell(row - splitResult[0].rows.size(), entry.getKey(), null);\n",
      "                    }\n",
      "                }\n",
      "\n",
      "                if (isKeepTogether(firstCauseOfNothing)\n",
      "                        && 0 == lastFlushedRowBottomBorder.size()\n",
      "                        && !Boolean.TRUE.equals(getPropertyAsBoolean(Property.FORCED_PLACEMENT))) {\n",
      "                    return new LayoutResult(LayoutResult.NOTHING, null, null, this, null == firstCauseOfNothing\n",
      "                            ? this\n",
      "                            : firstCauseOfNothing);\n",
      "                } else {\n",
      "                    float footerHeight = null == footerRenderer ? 0 : footerRenderer.getOccupiedArea().getBBox().getHeight();\n",
      "                    float headerHeight = null == headerRenderer ? 0 : headerRenderer.getOccupiedArea().getBBox().getHeight()\n",
      "                            - headerRenderer.bordersHandler.getMaxBottomWidth();\n",
      "                    float captionHeight = null == captionRenderer ? 0 : captionRenderer.getOccupiedArea().getBBox().getHeight();\n",
      "                    float heightDiff = occupiedArea.getBBox().getHeight() - footerHeight - headerHeight - captionHeight;\n",
      "                    int status = Float.compare(0,heightDiff) == 0 && (isAndWasComplete || isFirstOnThePage) ?\n",
      "                            LayoutResult.NOTHING : LayoutResult.PARTIAL;\n",
      "                    if ((status == LayoutResult.NOTHING && Boolean.TRUE.equals(getPropertyAsBoolean(Property.FORCED_PLACEMENT)))\n",
      "                            || wasHeightClipped) {\n",
      "                        if (wasHeightClipped) {\n",
      "                            Logger logger = LoggerFactory.getLogger(TableRenderer.class);\n",
      "                            logger.warn(IoLogMessageConstant.CLIP_ELEMENT);\n",
      "                            // Process borders\n",
      "                            if (status == LayoutResult.NOTHING) {\n",
      "                                bordersHandler.applyTopTableBorder(occupiedArea.getBBox(), layoutBox, 0 == childRenderers.size(), true, false);\n",
      "                                bordersHandler.applyBottomTableBorder(occupiedArea.getBBox(), layoutBox, 0 == childRenderers.size(), true, false);\n",
      "                            }\n",
      "                            // Notice that we extend the table only on the current page\n",
      "                            if (null != blockMinHeight && blockMinHeight > occupiedArea.getBBox().getHeight()) {\n",
      "                                float blockBottom = Math.max(occupiedArea.getBBox().getBottom() - ((float) blockMinHeight - occupiedArea.getBBox().getHeight()), layoutBox.getBottom());\n",
      "                                if (0 == heights.size()) {\n",
      "                                    heights.add(((float) blockMinHeight) - occupiedArea.getBBox().getHeight() / 2);\n",
      "                                } else {\n",
      "                                    heights.set(heights.size() - 1, heights.get(heights.size() - 1) + ((float) blockMinHeight) - occupiedArea.getBBox().getHeight());\n",
      "                                }\n",
      "                                occupiedArea.getBBox()\n",
      "                                        .increaseHeight(occupiedArea.getBBox().getBottom() - blockBottom)\n",
      "                                        .setY(blockBottom);\n",
      "                            }\n",
      "                        }\n",
      "                        applyFixedXOrYPosition(false, layoutBox);\n",
      "                        applyPaddings(occupiedArea.getBBox(), true);\n",
      "                        applyMargins(occupiedArea.getBBox(), true);\n",
      "\n",
      "                        LayoutArea editedArea = FloatingHelper.adjustResultOccupiedAreaForFloatAndClear(this, siblingFloatRendererAreas, layoutContext.getArea().getBBox(), clearHeightCorrection, marginsCollapsingEnabled);\n",
      "                        return new LayoutResult(LayoutResult.FULL, editedArea, splitResult[0], null);\n",
      "                    } else {\n",
      "                        updateHeightsOnSplit(false, splitResult[0], splitResult[1]);\n",
      "                        applyFixedXOrYPosition(false, layoutBox);\n",
      "                        applyPaddings(occupiedArea.getBBox(), true);\n",
      "                        applyMargins(occupiedArea.getBBox(), true);\n",
      "\n",
      "                        LayoutArea editedArea = null;\n",
      "                        if (status != LayoutResult.NOTHING) {\n",
      "                            editedArea = FloatingHelper.adjustResultOccupiedAreaForFloatAndClear(this, siblingFloatRendererAreas, layoutContext.getArea().getBBox(), clearHeightCorrection, marginsCollapsingEnabled);\n",
      "                        }\n",
      "                        return new LayoutResult(status, editedArea, splitResult[0], splitResult[1], null == firstCauseOfNothing ? this : firstCauseOfNothing);\n",
      "                    }\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "        // check if the last row is incomplete\n",
      "        if (tableModel.isComplete() && !tableModel.isEmpty()) {\n",
      "            CellRenderer[] lastRow = rows.get(rows.size() - 1);\n",
      "            int lastInRow = lastRow.length - 1;\n",
      "            while (lastInRow >= 0 && null == lastRow[lastInRow]) {\n",
      "                lastInRow--;\n",
      "            }\n",
      "            if (lastInRow < 0 || lastRow.length != lastInRow + (int) lastRow[lastInRow].getPropertyAsInteger(Property.COLSPAN)) {\n",
      "                Logger logger = LoggerFactory.getLogger(TableRenderer.class);\n",
      "                logger.warn(IoLogMessageConstant.LAST_ROW_IS_NOT_COMPLETE);\n",
      "            }\n",
      "        }\n",
      "\n",
      "        // process footer renderer with collapsed borders\n",
      "        if (!(bordersHandler instanceof SeparatedTableBorders) && tableModel.isComplete() && (0 != lastFlushedRowBottomBorder.size() || tableModel.isEmpty()) && null != footerRenderer) {\n",
      "            layoutBox.moveDown(footerRenderer.occupiedArea.getBBox().getHeight()).increaseHeight(footerRenderer.occupiedArea.getBBox().getHeight());\n",
      "            // apply the difference to set footer and table left/right margins identical\n",
      "            bordersHandler.applyLeftAndRightTableBorder(layoutBox, true);\n",
      "            prepareFooterOrHeaderRendererForLayout(footerRenderer, layoutBox.getWidth());\n",
      "            if (0 != rows.size() || !isAndWasComplete) {\n",
      "                bordersHandler.collapseTableWithFooter(footerRenderer.bordersHandler, true);\n",
      "            } else if (null != headerRenderer) {\n",
      "                headerRenderer.bordersHandler.collapseTableWithFooter(footerRenderer.bordersHandler, true);\n",
      "            }\n",
      "\n",
      "            footerRenderer.layout(new LayoutContext(new LayoutArea(area.getPageNumber(), layoutBox), wasHeightClipped || wasParentsHeightClipped));\n",
      "            bordersHandler.applyLeftAndRightTableBorder(layoutBox, false);\n",
      "\n",
      "            float footerHeight = footerRenderer.getOccupiedAreaBBox().getHeight();\n",
      "            footerRenderer.move(0, -(layoutBox.getHeight() - footerHeight));\n",
      "            layoutBox.moveUp(footerHeight).decreaseHeight(footerHeight);\n",
      "        }\n",
      "\n",
      "        applySpacing(layoutBox, horizontalBorderSpacing, verticalBorderSpacing, true);\n",
      "        applySingleSpacing(occupiedArea.getBBox(), horizontalBorderSpacing, true, true);\n",
      "        if (null != footerRenderer) {\n",
      "            layoutBox.moveUp(verticalBorderSpacing).decreaseHeight(verticalBorderSpacing);\n",
      "        }\n",
      "        if (null != headerRenderer || !tableModel.isEmpty()) {\n",
      "            layoutBox.decreaseHeight(verticalBorderSpacing);\n",
      "        }\n",
      "        if (tableModel.isEmpty() && null == headerRenderer) {\n",
      "            occupiedArea.getBBox().moveUp((float) verticalBorderSpacing / 2);\n",
      "        } else if (isAndWasComplete || 0 != rows.size()) {\n",
      "            applySingleSpacing(occupiedArea.getBBox(), verticalBorderSpacing, false, true);\n",
      "        }\n",
      "\n",
      "        float bottomTableBorderWidth = bordersHandler.getMaxBottomWidth();\n",
      "        // Apply bottom and top border\n",
      "        if (tableModel.isComplete()) {\n",
      "            if (null == footerRenderer) {\n",
      "                if (0 != childRenderers.size()) {\n",
      "                    bordersHandler.applyBottomTableBorder(occupiedArea.getBBox(), layoutBox, false);\n",
      "                } else {\n",
      "                    if (0 != lastFlushedRowBottomBorder.size()) {\n",
      "                        bordersHandler.applyTopTableBorder(occupiedArea.getBBox(), layoutBox, 0 == childRenderers.size(), true, false);\n",
      "                    } else {\n",
      "                        bordersHandler.applyBottomTableBorder(occupiedArea.getBBox(), layoutBox, 0 == childRenderers.size(), true, false);\n",
      "                    }\n",
      "                }\n",
      "            } else {\n",
      "                if (tableModel.isEmpty() && null != headerRenderer) {\n",
      "                    float headerBottomBorderWidth = headerRenderer.bordersHandler.getMaxBottomWidth();\n",
      "                    headerRenderer.bordersHandler.applyBottomTableBorder(headerRenderer.occupiedArea.getBBox(), layoutBox, true, true, true);\n",
      "                    occupiedArea.getBBox().moveUp(headerBottomBorderWidth).decreaseHeight(headerBottomBorderWidth);\n",
      "                }\n",
      "            }\n",
      "        } else {\n",
      "            if (null == footerRenderer) {\n",
      "                if (0 != childRenderers.size()) {\n",
      "                    bordersHandler.applyBottomTableBorder(occupiedArea.getBBox(), layoutBox, 0 == childRenderers.size(), false, true);\n",
      "                }\n",
      "            } else {\n",
      "                // occupied area is right here\n",
      "                layoutBox.increaseHeight(bottomTableBorderWidth);\n",
      "            }\n",
      "        }\n",
      "\n",
      "\n",
      "        if (0 != rows.size()) {\n",
      "            if (Boolean.TRUE.equals(getPropertyAsBoolean(Property.FILL_AVAILABLE_AREA))) {\n",
      "                extendLastRow(rows.get(rows.size() - 1), layoutBox);\n",
      "            }\n",
      "        } else {\n",
      "            if (null != blockMinHeight && blockMinHeight > occupiedArea.getBBox().getHeight()) {\n",
      "                float blockBottom = Math.max(occupiedArea.getBBox().getBottom() - ((float) blockMinHeight - occupiedArea.getBBox().getHeight()), layoutBox.getBottom());\n",
      "                if (0 != heights.size()) {\n",
      "                    heights.set(heights.size() - 1, heights.get(heights.size() - 1) + occupiedArea.getBBox().getBottom() - blockBottom);\n",
      "                } else {\n",
      "                    heights.add((occupiedArea.getBBox().getBottom() - blockBottom) + occupiedArea.getBBox().getHeight() / 2);\n",
      "                }\n",
      "\n",
      "                occupiedArea.getBBox()\n",
      "                        .increaseHeight(occupiedArea.getBBox().getBottom() - blockBottom)\n",
      "                        .setY(blockBottom);\n",
      "            }\n",
      "        }\n",
      "\n",
      "        applyFixedXOrYPosition(false, layoutBox);\n",
      "\n",
      "        if (marginsCollapsingEnabled) {\n",
      "            marginsCollapseHandler.endMarginsCollapse(layoutBox);\n",
      "        }\n",
      "\n",
      "        applyPaddings(occupiedArea.getBBox(), true);\n",
      "        applyMargins(occupiedArea.getBBox(), true);\n",
      "\n",
      "        // we should process incomplete table's footer only during splitting\n",
      "        if (!tableModel.isComplete() && null != footerRenderer) {\n",
      "            LayoutTaggingHelper taggingHelper = this.<LayoutTaggingHelper>getProperty(Property.TAGGING_HELPER);\n",
      "            if (taggingHelper != null) {\n",
      "                // marking as artifact to get rid of all tagging hints from this renderer\n",
      "                taggingHelper.markArtifactHint(footerRenderer);\n",
      "            }\n",
      "            footerRenderer = null;\n",
      "            bordersHandler.skipFooter(bordersHandler.tableBoundingBorders);\n",
      "        }\n",
      "        adjustFooterAndFixOccupiedArea(layoutBox, null != headerRenderer || !tableModel.isEmpty() ? verticalBorderSpacing : 0);\n",
      "        adjustCaptionAndFixOccupiedArea(layoutBox, null != headerRenderer || !tableModel.isEmpty() ? verticalBorderSpacing : 0);\n",
      "\n",
      "        FloatingHelper.removeFloatsAboveRendererBottom(siblingFloatRendererAreas, this);\n",
      "\n",
      "        if (!isAndWasComplete && !isFirstOnThePage && (0 != rows.size() || (null != footerRenderer && tableModel.isComplete()))) {\n",
      "            occupiedArea.getBBox().decreaseHeight(verticalBorderSpacing);\n",
      "        }\n",
      "\n",
      "        LayoutArea editedArea = FloatingHelper.adjustResultOccupiedAreaForFloatAndClear(this, siblingFloatRendererAreas, layoutContext.getArea().getBBox(), clearHeightCorrection, marginsCollapsingEnabled);\n",
      "\n",
      "        return new LayoutResult(LayoutResult.FULL, editedArea, null, null, null);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * {@inheritDoc}\n",
      "     */\n",
      "    @Override\n",
      "    public void draw(DrawContext drawContext) {\n",
      "        boolean isTagged = drawContext.isTaggingEnabled();\n",
      "        LayoutTaggingHelper taggingHelper = null;\n",
      "        if (isTagged) {\n",
      "            taggingHelper = this.<LayoutTaggingHelper>getProperty(Property.TAGGING_HELPER);\n",
      "            if (taggingHelper == null) {\n",
      "                isTagged = false;\n",
      "            } else {\n",
      "                TagTreePointer tagPointer = taggingHelper.useAutoTaggingPointerAndRememberItsPosition(this);\n",
      "                if (taggingHelper.createTag(this, tagPointer)) {\n",
      "                    tagPointer.getProperties().addAttributes(0, AccessibleAttributesApplier.getLayoutAttributes(this, tagPointer));\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "\n",
      "        beginTransformationIfApplied(drawContext.getCanvas());\n",
      "\n",
      "        applyDestinationsAndAnnotation(drawContext);\n",
      "\n",
      "        boolean relativePosition = isRelativePosition();\n",
      "        if (relativePosition) {\n",
      "            applyRelativePositioningTranslation(false);\n",
      "        }\n",
      "\n",
      "        beginElementOpacityApplying(drawContext);\n",
      "        float captionHeight = null != captionRenderer ? captionRenderer.getOccupiedArea().getBBox().getHeight() : 0;\n",
      "        boolean isBottomCaption = CaptionSide.BOTTOM.equals(0 != captionHeight ? captionRenderer.<CaptionSide>getProperty(Property.CAPTION_SIDE) : null);\n",
      "        if (0 != captionHeight) {\n",
      "            occupiedArea.getBBox().applyMargins(isBottomCaption ? 0 : captionHeight, 0, isBottomCaption ? captionHeight : 0 , 0, false);\n",
      "        }\n",
      "        drawBackground(drawContext);\n",
      "        if (bordersHandler instanceof SeparatedTableBorders && !isHeaderRenderer() && !isFooterRenderer()) {\n",
      "            drawBorder(drawContext);\n",
      "        }\n",
      "        drawChildren(drawContext);\n",
      "        drawPositionedChildren(drawContext);\n",
      "        if (0 != captionHeight) {\n",
      "            occupiedArea.getBBox().applyMargins(isBottomCaption ? 0 : captionHeight, 0, isBottomCaption ? captionHeight : 0 , 0, true);\n",
      "        }\n",
      "        drawCaption(drawContext);\n",
      "        endElementOpacityApplying(drawContext);\n",
      "\n",
      "        if (relativePosition) {\n",
      "            applyRelativePositioningTranslation(true);\n",
      "        }\n",
      "\n",
      "        flushed = true;\n",
      "\n",
      "        endTransformationIfApplied(drawContext.getCanvas());\n",
      "\n",
      "        if (isTagged) {\n",
      "            if (isLastRendererForModelElement && ((Table) getModelElement()).isComplete()) {\n",
      "                taggingHelper.finishTaggingHint(this);\n",
      "            }\n",
      "            taggingHelper.restoreAutoTaggingPointerPosition(this);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * {@inheritDoc}\n",
      "     */\n",
      "    @Override\n",
      "    public void drawChildren(DrawContext drawContext) {\n",
      "        if (headerRenderer != null) {\n",
      "            headerRenderer.draw(drawContext);\n",
      "        }\n",
      "\n",
      "        for (IRenderer child : childRenderers) {\n",
      "            child.draw(drawContext);\n",
      "        }\n",
      "\n",
      "        if (bordersHandler instanceof CollapsedTableBorders) {\n",
      "            drawBorders(drawContext);\n",
      "        }\n",
      "\n",
      "        if (footerRenderer != null) {\n",
      "            footerRenderer.draw(drawContext);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    protected void drawBackgrounds(DrawContext drawContext) {\n",
      "        boolean shrinkBackgroundArea = bordersHandler instanceof CollapsedTableBorders && (isHeaderRenderer() || isFooterRenderer());\n",
      "        if (shrinkBackgroundArea) {\n",
      "            occupiedArea.getBBox().applyMargins(bordersHandler.getMaxTopWidth() / 2, bordersHandler.getRightBorderMaxWidth() / 2,\n",
      "                    bordersHandler.getMaxBottomWidth() / 2, bordersHandler.getLeftBorderMaxWidth() / 2, false);\n",
      "        }\n",
      "        super.drawBackground(drawContext);\n",
      "        if (shrinkBackgroundArea) {\n",
      "            occupiedArea.getBBox().applyMargins(bordersHandler.getMaxTopWidth() / 2, bordersHandler.getRightBorderMaxWidth() / 2,\n",
      "                    bordersHandler.getMaxBottomWidth() / 2, bordersHandler.getLeftBorderMaxWidth() / 2, true);\n",
      "        }\n",
      "        if (null != headerRenderer) {\n",
      "            headerRenderer.drawBackgrounds(drawContext);\n",
      "        }\n",
      "        if (null != footerRenderer) {\n",
      "            footerRenderer.drawBackgrounds(drawContext);\n",
      "        }\n",
      "    }\n",
      "\n",
      "\n",
      "    protected void drawCaption(DrawContext drawContext) {\n",
      "        if (null != captionRenderer && !isFooterRenderer() && !isHeaderRenderer()) {\n",
      "            captionRenderer.draw(drawContext);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public void drawBackground(DrawContext drawContext) {\n",
      "        // draw background once for body/header/footer\n",
      "        if (!isFooterRenderer() && !isHeaderRenderer()) {\n",
      "            drawBackgrounds(drawContext);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Gets a new instance of this class to be used as a next renderer, after this renderer is used, if\n",
      "     * {@link #layout(LayoutContext)} is called more than once.\n",
      "     *\n",
      "     * <p>\n",
      "     * If a renderer overflows to the next area, iText uses this method to create a renderer\n",
      "     * for the overflow part. So if one wants to extend {@link TableRenderer}, one should override\n",
      "     * this method: otherwise the default method will be used and thus the default rather than the custom\n",
      "     * renderer will be created.\n",
      "     * @return new renderer instance\n",
      "     */\n",
      "    @Override\n",
      "    public IRenderer getNextRenderer() {\n",
      "        logWarningIfGetNextRendererNotOverridden(TableRenderer.class, this.getClass());\n",
      "        TableRenderer nextTable = new TableRenderer();\n",
      "        nextTable.modelElement = modelElement;\n",
      "        return nextTable;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * {@inheritDoc}\n",
      "     */\n",
      "    @Override\n",
      "    public void move(float dxRight, float dyUp) {\n",
      "        super.move(dxRight, dyUp);\n",
      "        if (headerRenderer != null) {\n",
      "            headerRenderer.move(dxRight, dyUp);\n",
      "        }\n",
      "        if (footerRenderer != null) {\n",
      "            footerRenderer.move(dxRight, dyUp);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    protected TableRenderer[] split(int row) {\n",
      "        return split(row, false);\n",
      "    }\n",
      "\n",
      "    protected TableRenderer[] split(int row, boolean hasContent) {\n",
      "        return split(row, hasContent, false);\n",
      "    }\n",
      "\n",
      "\n",
      "    protected TableRenderer[] split(int row, boolean hasContent, boolean cellWithBigRowspanAdded) {\n",
      "        TableRenderer splitRenderer = createSplitRenderer(new Table.RowRange(rowRange.getStartRow(), rowRange.getStartRow() + row));\n",
      "        splitRenderer.rows = rows.subList(0, row);\n",
      "        splitRenderer.bordersHandler = bordersHandler;\n",
      "        splitRenderer.heights = heights;\n",
      "        splitRenderer.columnWidths = columnWidths;\n",
      "        splitRenderer.countedColumnWidth = countedColumnWidth;\n",
      "        splitRenderer.totalWidthForColumns = totalWidthForColumns;\n",
      "        splitRenderer.occupiedArea = occupiedArea;\n",
      "\n",
      "        TableRenderer overflowRenderer = createOverflowRenderer(new Table.RowRange(rowRange.getStartRow() + row, rowRange.getFinishRow()));\n",
      "        if (0 == row && !(hasContent || cellWithBigRowspanAdded) && 0 == rowRange.getStartRow()) {\n",
      "            overflowRenderer.isOriginalNonSplitRenderer = isOriginalNonSplitRenderer;\n",
      "        }\n",
      "        overflowRenderer.rows = rows.subList(row, rows.size());\n",
      "        overflowRenderer.bordersHandler = bordersHandler;\n",
      "\n",
      "        return new TableRenderer[]{splitRenderer, overflowRenderer};\n",
      "    }\n",
      "\n",
      "    protected TableRenderer createSplitRenderer(Table.RowRange rowRange) {\n",
      "        TableRenderer splitRenderer = (TableRenderer) getNextRenderer();\n",
      "        splitRenderer.rowRange = rowRange;\n",
      "        splitRenderer.parent = parent;\n",
      "        splitRenderer.modelElement = modelElement;\n",
      "        splitRenderer.childRenderers = childRenderers;\n",
      "        splitRenderer.addAllProperties(getOwnProperties());\n",
      "        splitRenderer.headerRenderer = headerRenderer;\n",
      "        splitRenderer.footerRenderer = footerRenderer;\n",
      "        splitRenderer.isLastRendererForModelElement = false;\n",
      "        splitRenderer.topBorderMaxWidth = topBorderMaxWidth;\n",
      "        splitRenderer.captionRenderer = captionRenderer;\n",
      "        splitRenderer.isOriginalNonSplitRenderer = isOriginalNonSplitRenderer;\n",
      "\n",
      "        return splitRenderer;\n",
      "    }\n",
      "\n",
      "    protected TableRenderer createOverflowRenderer(Table.RowRange rowRange) {\n",
      "        TableRenderer overflowRenderer = (TableRenderer) getNextRenderer();\n",
      "        overflowRenderer.setRowRange(rowRange);\n",
      "        overflowRenderer.parent = parent;\n",
      "        overflowRenderer.modelElement = modelElement;\n",
      "        overflowRenderer.addAllProperties(getOwnProperties());\n",
      "        overflowRenderer.isOriginalNonSplitRenderer = false;\n",
      "        overflowRenderer.countedColumnWidth = this.countedColumnWidth;\n",
      "        return overflowRenderer;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    protected Float retrieveWidth(float parentBoxWidth) {\n",
      "        Float tableWidth = super.retrieveWidth(parentBoxWidth);\n",
      "        Table tableModel = (Table) getModelElement();\n",
      "        if (tableWidth == null || tableWidth == 0) {\n",
      "            float totalColumnWidthInPercent = 0;\n",
      "            for (int col = 0; col < tableModel.getNumberOfColumns(); col++) {\n",
      "                UnitValue columnWidth = tableModel.getColumnWidth(col);\n",
      "                if (columnWidth.isPercentValue()) {\n",
      "                    totalColumnWidthInPercent += columnWidth.getValue();\n",
      "                }\n",
      "            }\n",
      "            tableWidth = parentBoxWidth;\n",
      "            if (totalColumnWidthInPercent > 0) {\n",
      "                tableWidth = parentBoxWidth * totalColumnWidthInPercent / 100;\n",
      "            }\n",
      "        }\n",
      "        return tableWidth;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public MinMaxWidth getMinMaxWidth() {\n",
      "        if (isOriginalNonSplitRenderer) {\n",
      "            initializeTableLayoutBorders();\n",
      "        }\n",
      "        float rightMaxBorder = bordersHandler.getRightBorderMaxWidth();\n",
      "        float leftMaxBorder = bordersHandler.getLeftBorderMaxWidth();\n",
      "        TableWidths tableWidths = new TableWidths(this, MinMaxWidthUtils.getInfWidth(), true, rightMaxBorder, leftMaxBorder);\n",
      "        float maxColTotalWidth = 0;\n",
      "        float[] columns = isOriginalNonSplitRenderer ? tableWidths.layout() : countedColumnWidth;\n",
      "        for (float column : columns) {\n",
      "            maxColTotalWidth += column;\n",
      "        }\n",
      "        float minWidth = isOriginalNonSplitRenderer ? tableWidths.getMinWidth() : maxColTotalWidth;\n",
      "        UnitValue marginRightUV = this.getPropertyAsUnitValue(Property.MARGIN_RIGHT);\n",
      "        if (!marginRightUV.isPointValue()) {\n",
      "            Logger logger = LoggerFactory.getLogger(TableRenderer.class);\n",
      "            logger.error(MessageFormatUtil.format(IoLogMessageConstant.PROPERTY_IN_PERCENTS_NOT_SUPPORTED,\n",
      "                    Property.MARGIN_RIGHT));\n",
      "        }\n",
      "        UnitValue marginLefttUV = this.getPropertyAsUnitValue(Property.MARGIN_LEFT);\n",
      "        if (!marginLefttUV.isPointValue()) {\n",
      "            Logger logger = LoggerFactory.getLogger(TableRenderer.class);\n",
      "            logger.error(MessageFormatUtil.format(IoLogMessageConstant.PROPERTY_IN_PERCENTS_NOT_SUPPORTED,\n",
      "                    Property.MARGIN_LEFT));\n",
      "        }\n",
      "        float additionalWidth = marginLefttUV.getValue() + marginRightUV.getValue() + rightMaxBorder / 2 + leftMaxBorder / 2;\n",
      "        return new MinMaxWidth(minWidth, maxColTotalWidth, additionalWidth);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    protected boolean allowLastYLineRecursiveExtraction() {\n",
      "        return false;\n",
      "    }\n",
      "\n",
      "    private void initializeTableLayoutBorders() {\n",
      "        boolean isSeparated = BorderCollapsePropertyValue.SEPARATE.equals(this.<BorderCollapsePropertyValue>getProperty(Property.BORDER_COLLAPSE));\n",
      "        bordersHandler = isSeparated\n",
      "                ? (TableBorders) new SeparatedTableBorders(rows, ((Table) getModelElement()).getNumberOfColumns(), getBorders())\n",
      "                : (TableBorders) new CollapsedTableBorders(rows, ((Table) getModelElement()).getNumberOfColumns(), getBorders());\n",
      "        bordersHandler.initializeBorders();\n",
      "        bordersHandler.setTableBoundingBorders(getBorders());\n",
      "        bordersHandler.setRowRange(rowRange.getStartRow(), rowRange.getFinishRow());\n",
      "        initializeHeaderAndFooter(true);\n",
      "        bordersHandler.updateBordersOnNewPage(isOriginalNonSplitRenderer, isFooterRenderer() || isHeaderRenderer(), this, headerRenderer, footerRenderer);\n",
      "        correctRowRange();\n",
      "    }\n",
      "\n",
      "    private void correctRowRange() {\n",
      "        if (rows.size() < rowRange.getFinishRow() - rowRange.getStartRow() + 1) {\n",
      "            rowRange = new Table.RowRange(rowRange.getStartRow(), rowRange.getStartRow() + rows.size() - 1);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public void drawBorder(DrawContext drawContext) {\n",
      "        if (bordersHandler instanceof SeparatedTableBorders) {\n",
      "            super.drawBorder(drawContext);\n",
      "        } else {\n",
      "            // Do nothing here. iText handles cell and table borders collapse and draws result borders during #drawBorders()\n",
      "        }\n",
      "    }\n",
      "\n",
      "    protected void drawBorders(DrawContext drawContext) {\n",
      "        drawBorders(drawContext, null != headerRenderer, null != footerRenderer);\n",
      "    }\n",
      "\n",
      "    private void drawBorders(DrawContext drawContext, boolean hasHeader, boolean hasFooter) {\n",
      "        float height = occupiedArea.getBBox().getHeight();\n",
      "        if (null != footerRenderer) {\n",
      "            height -= footerRenderer.occupiedArea.getBBox().getHeight();\n",
      "        }\n",
      "        if (null != headerRenderer) {\n",
      "            height -= headerRenderer.occupiedArea.getBBox().getHeight();\n",
      "        }\n",
      "        if (height < EPS) {\n",
      "            return;\n",
      "        }\n",
      "\n",
      "        float startX = getOccupiedArea().getBBox().getX() + bordersHandler.getLeftBorderMaxWidth() / 2;\n",
      "        float startY = getOccupiedArea().getBBox().getY() + getOccupiedArea().getBBox().getHeight();\n",
      "        if (null != headerRenderer) {\n",
      "            startY -= headerRenderer.occupiedArea.getBBox().getHeight();\n",
      "            startY += topBorderMaxWidth / 2;\n",
      "        } else {\n",
      "            startY -= topBorderMaxWidth / 2;\n",
      "        }\n",
      "        if (hasProperty(Property.MARGIN_TOP)) {\n",
      "            UnitValue topMargin = this.getPropertyAsUnitValue(Property.MARGIN_TOP);\n",
      "            if (null != topMargin && !topMargin.isPointValue()) {\n",
      "                Logger logger = LoggerFactory.getLogger(TableRenderer.class);\n",
      "                logger.error(MessageFormatUtil.format(IoLogMessageConstant.PROPERTY_IN_PERCENTS_NOT_SUPPORTED,\n",
      "                        Property.MARGIN_LEFT));\n",
      "            }\n",
      "            startY -= null == topMargin ? 0 : topMargin.getValue();\n",
      "        }\n",
      "        if (hasProperty(Property.MARGIN_LEFT)) {\n",
      "            UnitValue leftMargin = this.getPropertyAsUnitValue(Property.MARGIN_LEFT);\n",
      "            if (null != leftMargin && !leftMargin.isPointValue()) {\n",
      "                Logger logger = LoggerFactory.getLogger(TableRenderer.class);\n",
      "                logger.error(MessageFormatUtil.format(IoLogMessageConstant.PROPERTY_IN_PERCENTS_NOT_SUPPORTED,\n",
      "                        Property.MARGIN_LEFT));\n",
      "            }\n",
      "            startX += +(null == leftMargin ? 0 : leftMargin.getValue());\n",
      "        }\n",
      "\n",
      "\n",
      "        // process halves of horizontal bounding borders\n",
      "        if (childRenderers.size() == 0) {\n",
      "            Border[] borders = bordersHandler.tableBoundingBorders;\n",
      "            if (null != borders[0]) {\n",
      "                if (null != borders[2]) {\n",
      "                    if (0 == heights.size()) {\n",
      "                        heights.add(0, borders[0].getWidth() / 2 + borders[2].getWidth() / 2);\n",
      "                    }\n",
      "                }\n",
      "            } else if (null != borders[2]) {\n",
      "                startY -= borders[2].getWidth() / 2;\n",
      "            }\n",
      "            if (0 == heights.size()) {\n",
      "                heights.add(0f);\n",
      "            }\n",
      "        }\n",
      "\n",
      "        boolean isTagged = drawContext.isTaggingEnabled();\n",
      "        if (isTagged) {\n",
      "            drawContext.getCanvas().openTag(new CanvasArtifact());\n",
      "        }\n",
      "\n",
      "        // considering these values itext will draw table borders correctly\n",
      "        boolean isTopTablePart = isTopTablePart();\n",
      "        boolean isBottomTablePart = isBottomTablePart();\n",
      "        boolean isComplete = getTable().isComplete();\n",
      "        boolean isFooterRendererOfLargeTable = isFooterRendererOfLargeTable();\n",
      "\n",
      "        bordersHandler.setRowRange(rowRange.getStartRow(), rowRange.getStartRow() + heights.size() - 1);\n",
      "\n",
      "        if (bordersHandler instanceof CollapsedTableBorders) {\n",
      "            if (hasFooter) {\n",
      "                ((CollapsedTableBorders) bordersHandler).setBottomBorderCollapseWith(\n",
      "                        footerRenderer.bordersHandler.getFirstHorizontalBorder(),\n",
      "                        ((CollapsedTableBorders) footerRenderer.bordersHandler)\n",
      "                                .getVerticalBordersCrossingTopHorizontalBorder());\n",
      "            } else if (isBottomTablePart) {\n",
      "                ((CollapsedTableBorders) bordersHandler).setBottomBorderCollapseWith(null, null);\n",
      "            }\n",
      "        }\n",
      "        // we do not need to fix top border, because either this is header or the top border has been already written\n",
      "        float y1 = startY;\n",
      "\n",
      "        float[] heightsArray = new float[heights.size()];\n",
      "        for (int j = 0; j < heights.size(); j++) {\n",
      "            heightsArray[j] = heights.get(j);\n",
      "        }\n",
      "\n",
      "        // draw vertical borders\n",
      "        float x1 = startX;\n",
      "        for (int i = 0; i <= bordersHandler.getNumberOfColumns(); i++) {\n",
      "            bordersHandler.drawVerticalBorder(drawContext.getCanvas(),\n",
      "                    new TableBorderDescriptor(i, startY, x1, heightsArray));\n",
      "            if (i < countedColumnWidth.length) {\n",
      "                x1 += countedColumnWidth[i];\n",
      "            }\n",
      "        }\n",
      "\n",
      "        // draw horizontal borders\n",
      "\n",
      "        boolean shouldDrawTopBorder = isFooterRendererOfLargeTable || isTopTablePart;\n",
      "\n",
      "        // if top border is already drawn, we should decrease ordinate\n",
      "        if (!heights.isEmpty() && !shouldDrawTopBorder) {\n",
      "            y1 -= (float) heights.get(0);\n",
      "        }\n",
      "        for (int i = shouldDrawTopBorder ? 0 : 1; i < heights.size(); i++) {\n",
      "            bordersHandler.drawHorizontalBorder(drawContext.getCanvas(),\n",
      "                    new TableBorderDescriptor(i, startX, y1, countedColumnWidth));\n",
      "            y1 -= (float) heights.get(i);\n",
      "        }\n",
      "\n",
      "        // draw bottom border\n",
      "\n",
      "        // Note for the second condition:\n",
      "        //!isLastRendererForModelElement is a check that this is a split render. This is the case with the splitting of\n",
      "        // one cell when part of the cell moves to the next page. Therefore, if such a splitting occurs, a bottom border\n",
      "        // should be drawn. However, this should not be done for empty renderers that are also created during splitting,\n",
      "        // but this splitting, if the table does not fit on the page and the next cell is added to the next page.\n",
      "        // In this case, this code should not be processed, since the border in the above code has already been drawn.\n",
      "        // TODO DEVSIX-5867 Check hasFooter, so that two footers are not drawn\n",
      "        if ((!isBottomTablePart && isComplete)\n",
      "                || (isBottomTablePart && (isComplete || (!isLastRendererForModelElement && !isEmptyTableRenderer())))) {\n",
      "            bordersHandler.drawHorizontalBorder(drawContext.getCanvas(),\n",
      "                    new TableBorderDescriptor(heights.size(), startX, y1, countedColumnWidth));\n",
      "        }\n",
      "\n",
      "        if (isTagged) {\n",
      "            drawContext.getCanvas().closeTag();\n",
      "        }\n",
      "    }\n",
      "\n",
      "    private boolean isEmptyTableRenderer() {\n",
      "        return rows.isEmpty() && heights.size() == 1 && heights.get(0) == 0;\n",
      "    }\n",
      "\n",
      "    private void applyFixedXOrYPosition(boolean isXPosition, Rectangle layoutBox) {\n",
      "        if (isPositioned()) {\n",
      "            if (isFixedLayout()) {\n",
      "                if (isXPosition) {\n",
      "                    float x = (float) this.getPropertyAsFloat(Property.LEFT);\n",
      "                    layoutBox.setX(x);\n",
      "                } else {\n",
      "                    float y = (float) this.getPropertyAsFloat(Property.BOTTOM);\n",
      "                    move(0, y - occupiedArea.getBBox().getY());\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * If there is some space left, we will move the footer up, because initially the footer is at the very bottom of the area.\n",
      "     * We also will adjust the occupied area by the footer's size if it is present.\n",
      "     *\n",
      "     * @param layoutBox the layout box which represents the area which is left free.\n",
      "     */\n",
      "    private void adjustFooterAndFixOccupiedArea(Rectangle layoutBox, float verticalBorderSpacing) {\n",
      "        if (footerRenderer != null) {\n",
      "            footerRenderer.move(0, layoutBox.getHeight() + verticalBorderSpacing);\n",
      "            float footerHeight = footerRenderer.getOccupiedArea().getBBox().getHeight() - verticalBorderSpacing;\n",
      "            occupiedArea.getBBox().moveDown(footerHeight).increaseHeight(footerHeight);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * If there is some space left, we will move the caption up, because initially the caption is at the very bottom of the area.\n",
      "     * We also will adjust the occupied area by the caption's size if it is present.\n",
      "     *\n",
      "     * @param layoutBox the layout box which represents the area which is left free.\n",
      "     */\n",
      "    private void adjustCaptionAndFixOccupiedArea(Rectangle layoutBox, float verticalBorderSpacing) {\n",
      "        if (captionRenderer != null) {\n",
      "            float captionHeight = captionRenderer.getOccupiedArea().getBBox().getHeight();\n",
      "            occupiedArea.getBBox().moveDown(captionHeight).increaseHeight(captionHeight);\n",
      "            if (CaptionSide.BOTTOM.equals(captionRenderer.<CaptionSide>getProperty(Property.CAPTION_SIDE))) {\n",
      "                captionRenderer.move(0, layoutBox.getHeight() + verticalBorderSpacing);\n",
      "            } else {\n",
      "                occupiedArea.getBBox().moveUp(captionHeight);\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "\n",
      "    private void correctLayoutedCellsOccupiedAreas(LayoutResult[] splits, int row, int[] targetOverflowRowIndex,\n",
      "                                                   Float blockMinHeight, Rectangle layoutBox,\n",
      "                                                   List<Boolean> rowsHasCellWithSetHeight, boolean isLastRenderer,\n",
      "                                                   boolean processBigRowspan, boolean skip) {\n",
      "        // Correct last height\n",
      "        int finish = bordersHandler.getFinishRow();\n",
      "        bordersHandler.setFinishRow(rowRange.getFinishRow());\n",
      "\n",
      "        // It's width will be considered only for collapsed borders\n",
      "        Border currentBorder = bordersHandler.getWidestHorizontalBorder(finish + 1);\n",
      "        bordersHandler.setFinishRow(finish);\n",
      "        if (skip) {\n",
      "            // Update bordersHandler\n",
      "            bordersHandler.tableBoundingBorders[2] = getBorders()[2];\n",
      "            bordersHandler.skipFooter(bordersHandler.tableBoundingBorders);\n",
      "        }\n",
      "        float currentBottomIndent = bordersHandler instanceof CollapsedTableBorders\n",
      "                ? null == currentBorder ? 0 : currentBorder.getWidth()\n",
      "                : 0;\n",
      "        float realBottomIndent = bordersHandler instanceof CollapsedTableBorders\n",
      "                ? bordersHandler.getMaxBottomWidth()\n",
      "                : 0;\n",
      "        if (0 != heights.size()) {\n",
      "            heights.set(heights.size() - 1, heights.get(heights.size() - 1) + (realBottomIndent - currentBottomIndent) / 2);\n",
      "            // Correct occupied area and layoutbox\n",
      "            occupiedArea.getBBox().increaseHeight((realBottomIndent - currentBottomIndent) / 2).moveDown((realBottomIndent - currentBottomIndent) / 2);\n",
      "            layoutBox.decreaseHeight((realBottomIndent - currentBottomIndent) / 2);\n",
      "            if (processBigRowspan) {\n",
      "                // Process the last row and correct either its height or height of the cell with rowspan\n",
      "                CellRenderer[] currentRow = rows.get(heights.size());\n",
      "                for (int col = 0; col < currentRow.length; col++) {\n",
      "                    CellRenderer cell = null == splits[col] ? currentRow[col] : (CellRenderer) splits[col].getSplitRenderer();\n",
      "                    if (cell == null) {\n",
      "                        continue;\n",
      "                    }\n",
      "                    float height = 0;\n",
      "                    int rowspan = (int) cell.getPropertyAsInteger(Property.ROWSPAN);\n",
      "                    int colspan = (int) cell.getPropertyAsInteger(Property.COLSPAN);\n",
      "                    // Sum the heights of the rows included into the rowspan, except for the last one\n",
      "                    for (int l = heights.size() - 1 - 1; l > targetOverflowRowIndex[col] - rowspan && l >= 0; l--) {\n",
      "                        height += (float) heights.get(l);\n",
      "                    }\n",
      "                    float cellHeightInLastRow;\n",
      "                    float[] indents = bordersHandler.getCellBorderIndents(bordersHandler instanceof\n",
      "                            SeparatedTableBorders ? row : targetOverflowRowIndex[col], col, rowspan, colspan);\n",
      "                    cellHeightInLastRow = cell.getOccupiedArea().getBBox().getHeight() - height\n",
      "                            + indents[0] / 2 + indents[2] / 2;\n",
      "                    if (heights.get(heights.size() - 1) < cellHeightInLastRow) {\n",
      "                        // Height of the cell with rowspan is greater than height of the rows included into rowspan\n",
      "                        if (bordersHandler instanceof SeparatedTableBorders) {\n",
      "                            float differenceToConsider = cellHeightInLastRow - heights.get(heights.size() - 1);\n",
      "                            occupiedArea.getBBox().moveDown(differenceToConsider);\n",
      "                            occupiedArea.getBBox().increaseHeight(differenceToConsider);\n",
      "                        }\n",
      "                        heights.set(heights.size() - 1, cellHeightInLastRow);\n",
      "                    } else {\n",
      "                        // Height of the cell with rowspan is less than height of all the rows included into rowspan\n",
      "                        final float shift = heights.get(heights.size() - 1) - cellHeightInLastRow;\n",
      "                        final Rectangle bBox = cell.getOccupiedArea().getBBox();\n",
      "                        bBox.moveDown(shift);\n",
      "                        bBox.setHeight(height + heights.get(heights.size() - 1));\n",
      "                        cell.applyVerticalAlignment();\n",
      "                    }\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "        float additionalCellHeight = 0;\n",
      "        int numOfRowsWithFloatHeight = 0;\n",
      "        if (isLastRenderer) {\n",
      "            float additionalHeight = 0;\n",
      "            if (null != blockMinHeight && blockMinHeight > occupiedArea.getBBox().getHeight() + realBottomIndent / 2) {\n",
      "                additionalHeight = Math.min(layoutBox.getHeight() - realBottomIndent / 2, (float) blockMinHeight - occupiedArea.getBBox().getHeight() - realBottomIndent / 2);\n",
      "                for (int k = 0; k < rowsHasCellWithSetHeight.size(); k++) {\n",
      "                    if (Boolean.FALSE.equals(rowsHasCellWithSetHeight.get(k))) {\n",
      "                        numOfRowsWithFloatHeight++;\n",
      "                    }\n",
      "                }\n",
      "            }\n",
      "            additionalCellHeight = additionalHeight / (0 == numOfRowsWithFloatHeight ? heights.size() : numOfRowsWithFloatHeight);\n",
      "            for (int k = 0; k < heights.size(); k++) {\n",
      "                if (0 == numOfRowsWithFloatHeight || Boolean.FALSE.equals(rowsHasCellWithSetHeight.get(k))) {\n",
      "                    heights.set(k, (float) heights.get(k) + additionalCellHeight);\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "        float cumulativeShift = 0;\n",
      "        // Correct occupied areas of all added cells\n",
      "        for (int k = 0; k < heights.size(); k++) {\n",
      "            correctRowCellsOccupiedAreas(splits, row, targetOverflowRowIndex, k, rowsHasCellWithSetHeight, cumulativeShift, additionalCellHeight);\n",
      "            if (isLastRenderer) {\n",
      "                if (0 == numOfRowsWithFloatHeight || Boolean.FALSE.equals(rowsHasCellWithSetHeight.get(k))) {\n",
      "                    cumulativeShift += additionalCellHeight;\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "        // extend occupied area, if some rows have been extended\n",
      "        occupiedArea.getBBox().moveDown(cumulativeShift).increaseHeight(cumulativeShift);\n",
      "        layoutBox.decreaseHeight(cumulativeShift);\n",
      "    }\n",
      "\n",
      "    private void correctRowCellsOccupiedAreas(LayoutResult[] splits, int row, int[] targetOverflowRowIndex, int currentRowIndex,\n",
      "                                              List<Boolean> rowsHasCellWithSetHeight, float cumulativeShift, float additionalCellHeight) {\n",
      "        CellRenderer[] currentRow = rows.get(currentRowIndex);\n",
      "        for (int col = 0; col < currentRow.length; col++) {\n",
      "            CellRenderer cell = (currentRowIndex < row || null == splits[col]) ? currentRow[col] : (CellRenderer) splits[col].getSplitRenderer();\n",
      "            if (cell == null) {\n",
      "                continue;\n",
      "            }\n",
      "            float height = 0;\n",
      "            int colspan = (int) cell.getPropertyAsInteger(Property.COLSPAN);\n",
      "            int rowspan = (int) cell.getPropertyAsInteger(Property.ROWSPAN);\n",
      "            float rowspanOffset = 0;\n",
      "            // process rowspan\n",
      "            for (int l = (currentRowIndex < row ? currentRowIndex : heights.size() - 1) - 1; l > (currentRowIndex < row ? currentRowIndex : targetOverflowRowIndex[col]) - rowspan && l >= 0; l--) {\n",
      "                height += (float) heights.get(l);\n",
      "                if (Boolean.FALSE.equals(rowsHasCellWithSetHeight.get(l))) {\n",
      "                    rowspanOffset += additionalCellHeight;\n",
      "                }\n",
      "            }\n",
      "            height += (float) heights.get(currentRowIndex < row ? currentRowIndex : heights.size() - 1);\n",
      "            float[] indents = bordersHandler.getCellBorderIndents(\n",
      "                    currentRowIndex < row || bordersHandler instanceof SeparatedTableBorders ?\n",
      "                    currentRowIndex : targetOverflowRowIndex[col], col, rowspan, colspan);\n",
      "            height -= indents[0] / 2 + indents[2] / 2;\n",
      "            // Correcting cell bbox only. We don't need #move() here.\n",
      "            // This is because of BlockRenderer's specificity regarding occupied area.\n",
      "            float shift = height - cell.getOccupiedArea().getBBox().getHeight();\n",
      "            Rectangle bBox = cell.getOccupiedArea().getBBox();\n",
      "            bBox.moveDown(shift);\n",
      "            try {\n",
      "                cell.move(0, -(cumulativeShift - rowspanOffset));\n",
      "                bBox.setHeight(height);\n",
      "                cell.applyVerticalAlignment();\n",
      "\n",
      "            // TODO Remove try-catch when DEVSIX-1655 is resolved.\n",
      "            } catch (NullPointerException e) {\n",
      "                Logger logger = LoggerFactory.getLogger(TableRenderer.class);\n",
      "                logger.error(MessageFormatUtil.format(IoLogMessageConstant.OCCUPIED_AREA_HAS_NOT_BEEN_INITIALIZED,\n",
      "                        \"Some of the cell's content might not end up placed correctly.\"));\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    protected void extendLastRow(CellRenderer[] lastRow, Rectangle freeBox) {\n",
      "        if (null != lastRow && 0 != heights.size()) {\n",
      "            heights.set(heights.size() - 1, heights.get(heights.size() - 1) + freeBox.getHeight());\n",
      "            occupiedArea.getBBox().moveDown(freeBox.getHeight()).increaseHeight(freeBox.getHeight());\n",
      "            for (CellRenderer cell : lastRow) {\n",
      "                if (null != cell) {\n",
      "                    cell.occupiedArea.getBBox().moveDown(freeBox.getHeight()).increaseHeight(freeBox.getHeight());\n",
      "                }\n",
      "            }\n",
      "            freeBox.moveUp(freeBox.getHeight()).setHeight(0);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * This method is used to set row range for table renderer during creating a new renderer.\n",
      "     * The purpose to use this method is to remove input argument RowRange from createOverflowRenderer\n",
      "     * and createSplitRenderer methods.\n",
      "     */\n",
      "    private void setRowRange(Table.RowRange rowRange) {\n",
      "        this.rowRange = rowRange;\n",
      "        for (int row = rowRange.getStartRow(); row <= rowRange.getFinishRow(); row++) {\n",
      "            rows.add(new CellRenderer[((Table) modelElement).getNumberOfColumns()]);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    private TableRenderer initFooterOrHeaderRenderer(boolean footer, Border[] tableBorders) {\n",
      "        Table table = (Table) getModelElement();\n",
      "        boolean isSeparated = BorderCollapsePropertyValue.SEPARATE.equals(this.<BorderCollapsePropertyValue>getProperty(Property.BORDER_COLLAPSE));\n",
      "        Table footerOrHeader = footer ? table.getFooter() : table.getHeader();\n",
      "        int innerBorder = footer ? 0 : 2;\n",
      "        int outerBorder = footer ? 2 : 0;\n",
      "        TableRenderer renderer = (TableRenderer) footerOrHeader.createRendererSubTree().setParent(this);\n",
      "        ensureFooterOrHeaderHasTheSamePropertiesAsParentTableRenderer(renderer);\n",
      "        boolean firstHeader = !footer && rowRange.getStartRow() == 0 && isOriginalNonSplitRenderer;\n",
      "        LayoutTaggingHelper taggingHelper = this.<LayoutTaggingHelper>getProperty(Property.TAGGING_HELPER);\n",
      "        if (taggingHelper != null) {\n",
      "            taggingHelper.addKidsHint(this, Collections.<IRenderer>singletonList(renderer));\n",
      "            LayoutTaggingHelper.addTreeHints(taggingHelper, renderer);\n",
      "\n",
      "            // whether footer is not the last and requires marking as artifact is defined later during table renderer layout\n",
      "            if (!footer && !firstHeader) {\n",
      "                taggingHelper.markArtifactHint(renderer);\n",
      "            }\n",
      "        }\n",
      "\n",
      "        if (bordersHandler instanceof SeparatedTableBorders) {\n",
      "            if (table.isEmpty()) {\n",
      "                // A footer and a header share the same inner border. However it should be processed only ones.\n",
      "                if (!footer || null == headerRenderer) {\n",
      "                    renderer.setBorders(tableBorders[innerBorder], innerBorder);\n",
      "                }\n",
      "                bordersHandler.tableBoundingBorders[innerBorder] = Border.NO_BORDER;\n",
      "            }\n",
      "            renderer.setBorders(tableBorders[1], 1);\n",
      "            renderer.setBorders(tableBorders[3], 3);\n",
      "            renderer.setBorders(tableBorders[outerBorder], outerBorder);\n",
      "            bordersHandler.tableBoundingBorders[outerBorder] = Border.NO_BORDER;\n",
      "        } else if (bordersHandler instanceof CollapsedTableBorders) {\n",
      "            Border[] borders = renderer.getBorders();\n",
      "            if (table.isEmpty()) {\n",
      "                renderer.setBorders(CollapsedTableBorders.getCollapsedBorder(borders[innerBorder], tableBorders[innerBorder]), innerBorder);\n",
      "                bordersHandler.tableBoundingBorders[innerBorder] = Border.NO_BORDER;\n",
      "            }\n",
      "            renderer.setBorders(CollapsedTableBorders.getCollapsedBorder(borders[1], tableBorders[1]), 1);\n",
      "            renderer.setBorders(CollapsedTableBorders.getCollapsedBorder(borders[3], tableBorders[3]), 3);\n",
      "            renderer.setBorders(CollapsedTableBorders.getCollapsedBorder(borders[outerBorder], tableBorders[outerBorder]), outerBorder);\n",
      "            bordersHandler.tableBoundingBorders[outerBorder] = Border.NO_BORDER;\n",
      "        }\n",
      "\n",
      "        renderer.bordersHandler = isSeparated\n",
      "                ? (TableBorders) new SeparatedTableBorders(renderer.rows, ((Table) renderer.getModelElement()).getNumberOfColumns(), renderer.getBorders())\n",
      "                : (TableBorders) new CollapsedTableBorders(renderer.rows, ((Table) renderer.getModelElement()).getNumberOfColumns(), renderer.getBorders());\n",
      "        renderer.bordersHandler.initializeBorders();\n",
      "        renderer.bordersHandler.setRowRange(renderer.rowRange.getStartRow(), renderer.rowRange.getFinishRow());\n",
      "        renderer.bordersHandler.processAllBordersAndEmptyRows();\n",
      "        renderer.correctRowRange();\n",
      "        return renderer;\n",
      "    }\n",
      "\n",
      "    private void ensureFooterOrHeaderHasTheSamePropertiesAsParentTableRenderer(TableRenderer headerOrFooterRenderer) {\n",
      "        headerOrFooterRenderer.setProperty(Property.BORDER_COLLAPSE, this.<BorderCollapsePropertyValue>getProperty(Property.BORDER_COLLAPSE));\n",
      "        if (bordersHandler instanceof SeparatedTableBorders) {\n",
      "            headerOrFooterRenderer.setProperty(Property.HORIZONTAL_BORDER_SPACING, this.getPropertyAsFloat(Property.HORIZONTAL_BORDER_SPACING));\n",
      "            headerOrFooterRenderer.setProperty(Property.VERTICAL_BORDER_SPACING, this.getPropertyAsFloat(Property.VERTICAL_BORDER_SPACING));\n",
      "            headerOrFooterRenderer.setProperty(Property.BORDER, Border.NO_BORDER);\n",
      "            headerOrFooterRenderer.setProperty(Property.BORDER_LEFT, Border.NO_BORDER);\n",
      "            headerOrFooterRenderer.setProperty(Property.BORDER_TOP, Border.NO_BORDER);\n",
      "            headerOrFooterRenderer.setProperty(Property.BORDER_RIGHT, Border.NO_BORDER);\n",
      "            headerOrFooterRenderer.setProperty(Property.BORDER_BOTTOM, Border.NO_BORDER);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    private TableRenderer prepareFooterOrHeaderRendererForLayout(TableRenderer renderer, float layoutBoxWidth) {\n",
      "        renderer.countedColumnWidth = countedColumnWidth;\n",
      "        renderer.bordersHandler.leftBorderMaxWidth = bordersHandler.getLeftBorderMaxWidth();\n",
      "        renderer.bordersHandler.rightBorderMaxWidth = bordersHandler.getRightBorderMaxWidth();\n",
      "        if (hasProperty(Property.WIDTH)) {\n",
      "            renderer.setProperty(Property.WIDTH, UnitValue.createPointValue(layoutBoxWidth));\n",
      "        }\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    private boolean isHeaderRenderer() {\n",
      "        return parent instanceof TableRenderer && ((TableRenderer) parent).headerRenderer == this;\n",
      "    }\n",
      "\n",
      "    private boolean isFooterRenderer() {\n",
      "        return parent instanceof TableRenderer && ((TableRenderer) parent).footerRenderer == this;\n",
      "    }\n",
      "\n",
      "    private boolean isFooterRendererOfLargeTable() {\n",
      "        return isFooterRenderer() && (!((TableRenderer) parent).getTable().isComplete() || 0 != ((TableRenderer) parent).getTable().getLastRowBottomBorder().size());\n",
      "    }\n",
      "\n",
      "    private boolean isTopTablePart() {\n",
      "        return null == headerRenderer\n",
      "                && (!isFooterRenderer() || (0 == ((TableRenderer) parent).rows.size() && null == ((TableRenderer) parent).headerRenderer));\n",
      "    }\n",
      "\n",
      "    private boolean isBottomTablePart() {\n",
      "        return null == footerRenderer\n",
      "                && (!isHeaderRenderer() || (0 == ((TableRenderer) parent).rows.size() && null == ((TableRenderer) parent).footerRenderer));\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Returns minWidth\n",
      "     */\n",
      "    private void calculateColumnWidths(float availableWidth) {\n",
      "        if (countedColumnWidth == null || totalWidthForColumns != availableWidth) {\n",
      "            TableWidths tableWidths = new TableWidths(this, availableWidth, false, bordersHandler.rightBorderMaxWidth, bordersHandler.leftBorderMaxWidth);\n",
      "            countedColumnWidth = tableWidths.layout();\n",
      "        }\n",
      "    }\n",
      "\n",
      "    private float getTableWidth() {\n",
      "        float sum = 0;\n",
      "        for (float column : countedColumnWidth) {\n",
      "            sum += column;\n",
      "        }\n",
      "        if (bordersHandler instanceof SeparatedTableBorders) {\n",
      "            sum += bordersHandler.getRightBorderMaxWidth() + bordersHandler.getLeftBorderMaxWidth();\n",
      "            Float horizontalSpacing = this.getPropertyAsFloat(Property.HORIZONTAL_BORDER_SPACING);\n",
      "            sum += (null == horizontalSpacing) ? 0 : (float) horizontalSpacing;\n",
      "        } else {\n",
      "            sum += bordersHandler.getRightBorderMaxWidth() / 2 + bordersHandler.getLeftBorderMaxWidth() / 2;\n",
      "        }\n",
      "        return sum;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * This are a structs used for convenience in layout.\n",
      "     */\n",
      "    private static class CellRendererInfo {\n",
      "        public CellRenderer cellRenderer;\n",
      "        public int column;\n",
      "        public int finishRowInd;\n",
      "\n",
      "        public CellRendererInfo(CellRenderer cellRenderer, int column, int finishRow) {\n",
      "            this.cellRenderer = cellRenderer;\n",
      "            this.column = column;\n",
      "            // When a cell has a rowspan, this is the index of the finish row of the cell.\n",
      "            // Otherwise, this is simply the index of the row of the cell in the {@link #rows} array.\n",
      "            this.finishRowInd = finishRow;\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Utility class that copies overflow renderer rows on cell replacement so it won't affect original renderer\n",
      "     */\n",
      "    private static class OverflowRowsWrapper {\n",
      "        private TableRenderer overflowRenderer;\n",
      "        private boolean isReplaced = false;\n",
      "\n",
      "        public OverflowRowsWrapper(TableRenderer overflowRenderer) {\n",
      "            this.overflowRenderer = overflowRenderer;\n",
      "        }\n",
      "\n",
      "        public CellRenderer getCell(int row, int col) {\n",
      "            return overflowRenderer.rows.get(row)[col];\n",
      "        }\n",
      "\n",
      "        public CellRenderer setCell(int row, int col, CellRenderer newCell) {\n",
      "            if (!isReplaced) {\n",
      "                overflowRenderer.rows = new ArrayList<>(overflowRenderer.rows);\n",
      "                isReplaced = true;\n",
      "            }\n",
      "            overflowRenderer.rows.set(row, (CellRenderer[]) overflowRenderer.rows.get(row).clone());\n",
      "            return overflowRenderer.rows.get(row)[col] = newCell;\n",
      "        }\n",
      "    }\n",
      "\n",
      "\n",
      "    private void enlargeCellWithBigRowspan(CellRenderer[] currentRow, OverflowRowsWrapper overflowRows, int row, int col,\n",
      "                        int minRowspan, TableRenderer[] splitResult, int[] targetOverflowRowIndex) {\n",
      "        childRenderers.add(currentRow[col]);\n",
      "        // shift all cells in the column up\n",
      "        int i = row;\n",
      "        for (; i < row + minRowspan && i + 1 < rows.size() && splitResult[1].rows.get(i + 1 - row)[col] != null; i++) {\n",
      "            overflowRows.setCell(i - row, col, splitResult[1].rows.get(i + 1 - row)[col]);\n",
      "            overflowRows.setCell(i + 1 - row, col, null);\n",
      "            rows.get(i)[col] = rows.get(i + 1)[col];\n",
      "            rows.get(i + 1)[col] = null;\n",
      "        }\n",
      "        // the number of cells behind is less then minRowspan-1\n",
      "        // so we should process the last cell in the column as in the case 1 == minRowspan\n",
      "        if (i != row + minRowspan - 1 && null != rows.get(i)[col]) {\n",
      "            CellRenderer overflowCell = (CellRenderer) ((Cell) rows.get(i)[col].getModelElement()).getRenderer().setParent(this);\n",
      "            overflowRows.setCell(i - row, col, null);\n",
      "            overflowRows.setCell(targetOverflowRowIndex[col] - row, col, overflowCell);\n",
      "            CellRenderer originalCell = rows.get(i)[col];\n",
      "            rows.get(i)[col] = null;\n",
      "            rows.get(targetOverflowRowIndex[col])[col] = originalCell;\n",
      "            originalCell.isLastRendererForModelElement = false;\n",
      "            overflowCell.setProperty(Property.TAGGING_HINT_KEY, originalCell.<Object>getProperty(Property.TAGGING_HINT_KEY));\n",
      "        }\n",
      "    }\n",
      "\n",
      "    private void enlargeCell(int col, int row, int minRowspan, CellRenderer[] currentRow, OverflowRowsWrapper overflowRows,\n",
      "                             int[] targetOverflowRowIndex, TableRenderer[] splitResult) {\n",
      "        LayoutArea cellOccupiedArea = currentRow[col].getOccupiedArea();\n",
      "        if (1 == minRowspan) {\n",
      "\n",
      "            // Here we use the same cell, but create a new renderer which doesn't have any children,\n",
      "            // therefore it won't have any content.\n",
      "            // we will change properties\n",
      "            CellRenderer overflowCell = (CellRenderer) ((Cell) currentRow[col].getModelElement()).clone(true).getRenderer();\n",
      "            overflowCell.setParent(this);\n",
      "            overflowCell.deleteProperty(Property.HEIGHT);\n",
      "            overflowCell.deleteProperty(Property.MIN_HEIGHT);\n",
      "            overflowCell.deleteProperty(Property.MAX_HEIGHT);\n",
      "            overflowRows.setCell(0, col, null);\n",
      "            overflowRows.setCell(targetOverflowRowIndex[col] - row, col, overflowCell);\n",
      "            childRenderers.add(currentRow[col]);\n",
      "            CellRenderer originalCell = currentRow[col];\n",
      "            currentRow[col] = null;\n",
      "            rows.get(targetOverflowRowIndex[col])[col] = originalCell;\n",
      "            originalCell.isLastRendererForModelElement = false;\n",
      "            overflowCell.setProperty(Property.TAGGING_HINT_KEY, originalCell.<Object>getProperty(Property.TAGGING_HINT_KEY));\n",
      "        } else {\n",
      "            enlargeCellWithBigRowspan(currentRow,overflowRows, row, col, minRowspan, splitResult, targetOverflowRowIndex);\n",
      "        }\n",
      "        overflowRows.getCell(targetOverflowRowIndex[col] - row, col).occupiedArea = cellOccupiedArea;\n",
      "    }\n",
      "\n",
      "    void applyMarginsAndPaddingsAndCalculateColumnWidths(Rectangle layoutBox) {\n",
      "        UnitValue[] margins = getMargins();\n",
      "        if (!margins[1].isPointValue()) {\n",
      "            Logger logger = LoggerFactory.getLogger(TableRenderer.class);\n",
      "            logger.error(MessageFormatUtil.format(IoLogMessageConstant.PROPERTY_IN_PERCENTS_NOT_SUPPORTED,\n",
      "                    Property.MARGIN_RIGHT));\n",
      "        }\n",
      "        if (!margins[3].isPointValue()) {\n",
      "            Logger logger = LoggerFactory.getLogger(TableRenderer.class);\n",
      "            logger.error(MessageFormatUtil.format(IoLogMessageConstant.PROPERTY_IN_PERCENTS_NOT_SUPPORTED,\n",
      "                    Property.MARGIN_LEFT));\n",
      "        }\n",
      "        UnitValue[] paddings = getPaddings();\n",
      "        if (!paddings[1].isPointValue()) {\n",
      "            Logger logger = LoggerFactory.getLogger(TableRenderer.class);\n",
      "            logger.error(MessageFormatUtil.format(IoLogMessageConstant.PROPERTY_IN_PERCENTS_NOT_SUPPORTED,\n",
      "                    Property.PADDING_RIGHT));\n",
      "        }\n",
      "        if (!paddings[3].isPointValue()) {\n",
      "            Logger logger = LoggerFactory.getLogger(TableRenderer.class);\n",
      "            logger.error(MessageFormatUtil.format(IoLogMessageConstant.PROPERTY_IN_PERCENTS_NOT_SUPPORTED,\n",
      "                    Property.PADDING_LEFT));\n",
      "        }\n",
      "        calculateColumnWidths(layoutBox.getWidth()\n",
      "                - margins[1].getValue() - margins[3].getValue()\n",
      "                - paddings[1].getValue() - paddings[3].getValue());\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.layout.renderer;\n",
      "\n",
      "import com.itextpdf.io.logs.IoLogMessageConstant;\n",
      "import com.itextpdf.io.source.ByteArrayOutputStream;\n",
      "import com.itextpdf.kernel.geom.Rectangle;\n",
      "import com.itextpdf.kernel.pdf.PdfDocument;\n",
      "import com.itextpdf.kernel.pdf.PdfWriter;\n",
      "import com.itextpdf.layout.Document;\n",
      "import com.itextpdf.layout.element.Cell;\n",
      "import com.itextpdf.layout.element.Table;\n",
      "import com.itextpdf.layout.minmaxwidth.MinMaxWidth;\n",
      "import com.itextpdf.layout.properties.Property;\n",
      "import com.itextpdf.layout.properties.UnitValue;\n",
      "import com.itextpdf.test.ExtendedITextTest;\n",
      "import com.itextpdf.test.annotations.LogMessage;\n",
      "import com.itextpdf.test.annotations.LogMessages;\n",
      "import com.itextpdf.test.annotations.type.IntegrationTest;\n",
      "\n",
      "import org.junit.Assert;\n",
      "import org.junit.Test;\n",
      "import org.junit.experimental.categories.Category;\n",
      "\n",
      "@Category(IntegrationTest.class)\n",
      "public class TableRendererTest extends ExtendedITextTest {\n",
      "\n",
      "    @Test\n",
      "    @LogMessages(messages = {\n",
      "            @LogMessage(messageTemplate = IoLogMessageConstant.PROPERTY_IN_PERCENTS_NOT_SUPPORTED, count = 6)})\n",
      "    public void calculateColumnWidthsNotPointValue() {\n",
      "        PdfDocument pdfDoc = new PdfDocument(new PdfWriter(new ByteArrayOutputStream()));\n",
      "        Document doc = new Document(pdfDoc);\n",
      "\n",
      "        Rectangle layoutBox = new Rectangle(0, 0, 1000, 100);\n",
      "\n",
      "        Table table = new Table(UnitValue.createPercentArray(new float[] {10, 10, 80}));\n",
      "\n",
      "        // Set margins and paddings in percents, which is not expected\n",
      "        table.setProperty(Property.MARGIN_RIGHT, UnitValue.createPercentValue(7));\n",
      "        table.setProperty(Property.MARGIN_LEFT, UnitValue.createPercentValue(7));\n",
      "        table.setProperty(Property.PADDING_RIGHT, UnitValue.createPercentValue(7));\n",
      "        table.setProperty(Property.PADDING_LEFT, UnitValue.createPercentValue(7));\n",
      "\n",
      "        // Fill the table somehow. The layout area is wide enough to calculate the widths as expected\n",
      "        for (int i = 0; i < 3; i++) {\n",
      "            table.addCell(\"Hello\");\n",
      "        }\n",
      "\n",
      "        // Create a TableRenderer, the instance of which will be used to test the application of margins and paddings\n",
      "        TableRenderer tableRenderer = (TableRenderer) table.createRendererSubTree().setParent(doc.getRenderer());\n",
      "        tableRenderer.bordersHandler = (TableBorders) new SeparatedTableBorders(tableRenderer.rows, 3,\n",
      "                tableRenderer.getBorders(), 0);\n",
      "\n",
      "        tableRenderer.applyMarginsAndPaddingsAndCalculateColumnWidths(layoutBox);\n",
      "\n",
      "        // Specify that the render is not original in order not to recalculate the column widths\n",
      "        tableRenderer.isOriginalNonSplitRenderer = false;\n",
      "\n",
      "        MinMaxWidth minMaxWidth = tableRenderer.getMinMaxWidth();\n",
      "        // TODO DEVSIX-3676: currently margins and paddings are still applied as if they are in points. After the mentioned ticket is fixed, the expected values should be updated.\n",
      "        Assert.assertEquals(327.46f, minMaxWidth.getMaxWidth(), 0.001);\n",
      "        Assert.assertEquals(327.46f, minMaxWidth.getMinWidth(), 0.001);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testIsOriginalNonSplitRenderer() {\n",
      "        Table table = new Table(1);\n",
      "        table.addCell(new Cell());\n",
      "        table.addCell(new Cell());\n",
      "        table.addCell(new Cell());\n",
      "\n",
      "        TableRenderer original = (TableRenderer) table.createRendererSubTree();\n",
      "        TableRenderer[] children = original.split(1);\n",
      "\n",
      "        TableRenderer[] grandChildren = children[1].split(1);\n",
      "\n",
      "        Assert.assertFalse(grandChildren[0].isOriginalNonSplitRenderer);\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "TableRenderer::::addChild(com.itextpdf.layout.renderer.IRenderer)": [
        109,
        120
      ],
      "TableRenderer::::getTable()": [
        194,
        196
      ],
      "TableRenderer::::initializeHeaderAndFooter(boolean)": [
        198,
        217
      ],
      "TableRenderer::::initializeCaptionRenderer(com.itextpdf.layout.element.Div)": [
        219,
        229
      ],
      "TableRenderer::::isOriginalRenderer()": [
        231,
        233
      ],
      "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)": [
        238,
        1091
      ],
      "TableRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)": [
        1096,
        1153
      ],
      "TableRenderer::::drawChildren(com.itextpdf.layout.renderer.DrawContext)": [
        1158,
        1175
      ],
      "TableRenderer::::drawBackgrounds(com.itextpdf.layout.renderer.DrawContext)": [
        1177,
        1194
      ],
      "TableRenderer::::drawCaption(com.itextpdf.layout.renderer.DrawContext)": [
        1197,
        1201
      ],
      "TableRenderer::::drawBackground(com.itextpdf.layout.renderer.DrawContext)": [
        1203,
        1209
      ],
      "TableRenderer::::getNextRenderer()": [
        1222,
        1228
      ],
      "TableRenderer::::move(float,float)": [
        1233,
        1242
      ],
      "TableRenderer::::split(int)": [
        1244,
        1246
      ],
      "TableRenderer::::split(int,boolean)": [
        1248,
        1250
      ],
      "TableRenderer::::split(int,boolean,boolean)": [
        1253,
        1271
      ],
      "TableRenderer::::createSplitRenderer(com.itextpdf.layout.element.Table.RowRange)": [
        1273,
        1288
      ],
      "TableRenderer::::createOverflowRenderer(com.itextpdf.layout.element.Table.RowRange)": [
        1290,
        1299
      ],
      "TableRenderer::::retrieveWidth(float)": [
        1301,
        1319
      ],
      "TableRenderer::::getMinMaxWidth()": [
        1321,
        1349
      ],
      "TableRenderer::::allowLastYLineRecursiveExtraction()": [
        1351,
        1354
      ],
      "TableRenderer::::initializeTableLayoutBorders()": [
        1356,
        1367
      ],
      "TableRenderer::::correctRowRange()": [
        1369,
        1373
      ],
      "TableRenderer::::drawBorder(com.itextpdf.layout.renderer.DrawContext)": [
        1375,
        1382
      ],
      "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext)": [
        1384,
        1386
      ],
      "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)": [
        1388,
        1518
      ],
      "TableRenderer::::isEmptyTableRenderer()": [
        1520,
        1522
      ],
      "TableRenderer::::correctRowCellsOccupiedAreas(com.itextpdf.layout.layout.LayoutResult[],int,int[],int,java.util.List<java.lang.Boolean>,float,float)": [
        1671,
        1712
      ],
      "TableRenderer::::setRowRange(com.itextpdf.layout.element.Table.RowRange)": [
        1732,
        1737
      ],
      "TableRenderer::::initFooterOrHeaderRenderer(boolean,com.itextpdf.layout.borders.Border[])": [
        1739,
        1791
      ],
      "TableRenderer::::ensureFooterOrHeaderHasTheSamePropertiesAsParentTableRenderer(com.itextpdf.layout.renderer.TableRenderer)": [
        1793,
        1804
      ],
      "TableRenderer::::prepareFooterOrHeaderRendererForLayout(com.itextpdf.layout.renderer.TableRenderer,float)": [
        1806,
        1814
      ],
      "TableRenderer::::isHeaderRenderer()": [
        1816,
        1818
      ],
      "TableRenderer::::isFooterRenderer()": [
        1820,
        1822
      ],
      "TableRenderer::::isFooterRendererOfLargeTable()": [
        1824,
        1826
      ],
      "TableRenderer::::isTopTablePart()": [
        1828,
        1831
      ],
      "TableRenderer::::isBottomTablePart()": [
        1833,
        1836
      ],
      "TableRenderer::::calculateColumnWidths(float)": [
        1841,
        1846
      ],
      "TableRenderer::::getTableWidth()": [
        1848,
        1861
      ],
      "TableRenderer.OverflowRowsWrapper::::getCell(int,int)": [
        1891,
        1893
      ],
      "TableRenderer.OverflowRowsWrapper::::setCell(int,int,com.itextpdf.layout.renderer.CellRenderer)": [
        1895,
        1902
      ],
      "TableRenderer::::enlargeCellWithBigRowspan(com.itextpdf.layout.renderer.CellRenderer[],com.itextpdf.layout.renderer.TableRenderer.OverflowRowsWrapper,int,int,int,com.itextpdf.layout.renderer.TableRenderer[],int[])": [
        1906,
        1929
      ],
      "TableRenderer::::enlargeCell(int,int,int,com.itextpdf.layout.renderer.CellRenderer[],com.itextpdf.layout.renderer.TableRenderer.OverflowRowsWrapper,int[],com.itextpdf.layout.renderer.TableRenderer[])": [
        1931,
        1956
      ]
    },
    "test_method_lines_dic": {
      "TableRendererTest::::calculateColumnWidthsNotPointValue()": [
        48,
        84
      ],
      "TableRendererTest::::testIsOriginalNonSplitRenderer()": [
        86,
        99
      ]
    },
    "reverse_method_lines_dic": {
      "109": "TableRenderer::::addChild(com.itextpdf.layout.renderer.IRenderer)",
      "110": "TableRenderer::::addChild(com.itextpdf.layout.renderer.IRenderer)",
      "111": "TableRenderer::::addChild(com.itextpdf.layout.renderer.IRenderer)",
      "112": "TableRenderer::::addChild(com.itextpdf.layout.renderer.IRenderer)",
      "113": "TableRenderer::::addChild(com.itextpdf.layout.renderer.IRenderer)",
      "114": "TableRenderer::::addChild(com.itextpdf.layout.renderer.IRenderer)",
      "115": "TableRenderer::::addChild(com.itextpdf.layout.renderer.IRenderer)",
      "116": "TableRenderer::::addChild(com.itextpdf.layout.renderer.IRenderer)",
      "117": "TableRenderer::::addChild(com.itextpdf.layout.renderer.IRenderer)",
      "118": "TableRenderer::::addChild(com.itextpdf.layout.renderer.IRenderer)",
      "119": "TableRenderer::::addChild(com.itextpdf.layout.renderer.IRenderer)",
      "120": "TableRenderer::::addChild(com.itextpdf.layout.renderer.IRenderer)",
      "194": "TableRenderer::::getTable()",
      "195": "TableRenderer::::getTable()",
      "196": "TableRenderer::::getTable()",
      "198": "TableRenderer::::initializeHeaderAndFooter(boolean)",
      "199": "TableRenderer::::initializeHeaderAndFooter(boolean)",
      "200": "TableRenderer::::initializeHeaderAndFooter(boolean)",
      "201": "TableRenderer::::initializeHeaderAndFooter(boolean)",
      "202": "TableRenderer::::initializeHeaderAndFooter(boolean)",
      "203": "TableRenderer::::initializeHeaderAndFooter(boolean)",
      "204": "TableRenderer::::initializeHeaderAndFooter(boolean)",
      "205": "TableRenderer::::initializeHeaderAndFooter(boolean)",
      "206": "TableRenderer::::initializeHeaderAndFooter(boolean)",
      "207": "TableRenderer::::initializeHeaderAndFooter(boolean)",
      "208": "TableRenderer::::initializeHeaderAndFooter(boolean)",
      "209": "TableRenderer::::initializeHeaderAndFooter(boolean)",
      "210": "TableRenderer::::initializeHeaderAndFooter(boolean)",
      "211": "TableRenderer::::initializeHeaderAndFooter(boolean)",
      "212": "TableRenderer::::initializeHeaderAndFooter(boolean)",
      "213": "TableRenderer::::initializeHeaderAndFooter(boolean)",
      "214": "TableRenderer::::initializeHeaderAndFooter(boolean)",
      "215": "TableRenderer::::initializeHeaderAndFooter(boolean)",
      "216": "TableRenderer::::initializeHeaderAndFooter(boolean)",
      "217": "TableRenderer::::initializeHeaderAndFooter(boolean)",
      "219": "TableRenderer::::initializeCaptionRenderer(com.itextpdf.layout.element.Div)",
      "220": "TableRenderer::::initializeCaptionRenderer(com.itextpdf.layout.element.Div)",
      "221": "TableRenderer::::initializeCaptionRenderer(com.itextpdf.layout.element.Div)",
      "222": "TableRenderer::::initializeCaptionRenderer(com.itextpdf.layout.element.Div)",
      "223": "TableRenderer::::initializeCaptionRenderer(com.itextpdf.layout.element.Div)",
      "224": "TableRenderer::::initializeCaptionRenderer(com.itextpdf.layout.element.Div)",
      "225": "TableRenderer::::initializeCaptionRenderer(com.itextpdf.layout.element.Div)",
      "226": "TableRenderer::::initializeCaptionRenderer(com.itextpdf.layout.element.Div)",
      "227": "TableRenderer::::initializeCaptionRenderer(com.itextpdf.layout.element.Div)",
      "228": "TableRenderer::::initializeCaptionRenderer(com.itextpdf.layout.element.Div)",
      "229": "TableRenderer::::initializeCaptionRenderer(com.itextpdf.layout.element.Div)",
      "231": "TableRenderer::::isOriginalRenderer()",
      "232": "TableRenderer::::isOriginalRenderer()",
      "233": "TableRenderer::::isOriginalRenderer()",
      "238": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "239": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "240": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "241": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "242": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "243": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "244": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "245": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "246": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "247": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "248": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "249": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "250": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "251": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "252": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "253": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "254": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "255": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "256": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "257": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "258": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "259": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "260": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "261": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "262": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "263": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "264": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "265": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "266": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "267": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "268": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "269": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "270": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "271": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "272": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "273": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "274": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "275": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "276": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "277": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "278": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "279": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "280": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "281": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "282": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "283": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "284": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "285": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "286": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "287": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "288": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "289": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "290": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "291": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "292": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "293": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "294": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "295": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "296": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "297": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "298": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "299": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "300": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "301": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "302": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "303": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "304": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "305": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "306": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "307": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "308": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "309": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "310": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "311": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "312": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "313": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "314": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "315": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "316": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "317": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "318": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "319": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "320": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "321": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "322": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "323": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "324": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "325": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "326": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "327": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "328": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "329": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "330": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "331": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "332": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "333": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "334": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "335": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "336": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "337": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "338": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "339": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "340": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "341": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "342": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "343": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "344": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "345": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "346": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "347": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "348": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "349": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "350": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "351": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "352": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "353": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "354": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "355": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "356": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "357": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "358": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "359": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "360": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "361": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "362": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "363": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "364": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "365": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "366": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "367": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "368": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "369": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "370": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "371": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "372": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "373": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "374": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "375": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "376": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "377": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "378": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "379": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "380": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "381": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "382": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "383": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "384": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "385": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "386": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "387": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "388": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "389": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "390": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "391": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "392": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "393": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "394": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "395": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "396": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "397": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "398": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "399": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "400": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "401": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "402": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "403": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "404": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "405": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "406": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "407": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "408": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "409": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "410": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "411": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "412": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "413": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "414": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "415": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "416": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "417": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "418": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "419": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "420": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "421": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "422": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "423": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "424": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "425": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "426": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "427": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "428": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "429": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "430": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "431": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "432": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "433": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "434": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "435": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "436": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "437": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "438": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "439": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "440": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "441": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "442": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "443": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "444": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "445": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "446": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "447": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "448": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "449": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "450": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "451": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "452": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "453": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "454": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "455": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "456": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "457": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "458": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "459": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "460": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "461": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "462": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "463": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "464": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "465": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "466": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "467": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "468": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "469": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "470": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "471": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "472": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "473": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "474": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "475": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "476": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "477": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "478": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "479": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "480": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "481": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "482": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "483": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "484": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "485": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "486": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "487": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "488": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "489": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "490": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "491": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "492": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "493": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "494": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "495": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "496": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "497": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "498": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "499": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "500": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "501": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "502": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "503": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "504": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "505": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "506": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "507": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "508": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "509": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "510": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "511": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "512": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "513": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "514": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "515": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "516": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "517": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "518": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "519": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "520": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "521": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "522": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "523": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "524": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "525": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "526": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "527": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "528": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "529": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "530": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "531": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "532": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "533": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "534": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "535": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "536": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "537": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "538": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "539": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "540": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "541": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "542": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "543": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "544": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "545": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "546": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "547": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "548": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "549": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "550": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "551": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "552": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "553": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "554": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "555": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "556": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "557": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "558": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "559": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "560": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "561": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "562": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "563": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "564": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "565": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "566": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "567": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "568": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "569": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "570": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "571": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "572": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "573": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "574": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "575": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "576": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "577": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "578": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "579": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "580": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "581": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "582": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "583": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "584": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "585": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "586": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "587": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "588": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "589": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "590": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "591": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "592": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "593": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "594": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "595": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "596": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "597": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "598": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "599": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "600": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "601": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "602": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "603": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "604": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "605": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "606": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "607": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "608": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "609": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "610": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "611": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "612": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "613": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "614": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "615": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "616": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "617": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "618": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "619": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "620": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "621": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "622": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "623": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "624": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "625": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "626": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "627": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "628": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "629": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "630": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "631": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "632": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "633": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "634": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "635": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "636": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "637": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "638": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "639": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "640": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "641": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "642": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "643": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "644": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "645": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "646": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "647": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "648": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "649": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "650": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "651": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "652": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "653": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "654": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "655": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "656": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "657": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "658": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "659": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "660": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "661": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "662": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "663": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "664": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "665": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "666": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "667": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "668": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "669": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "670": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "671": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "672": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "673": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "674": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "675": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "676": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "677": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "678": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "679": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "680": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "681": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "682": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "683": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "684": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "685": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "686": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "687": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "688": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "689": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "690": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "691": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "692": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "693": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "694": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "695": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "696": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "697": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "698": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "699": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "700": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "701": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "702": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "703": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "704": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "705": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "706": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "707": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "708": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "709": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "710": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "711": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "712": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "713": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "714": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "715": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "716": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "717": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "718": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "719": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "720": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "721": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "722": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "723": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "724": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "725": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "726": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "727": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "728": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "729": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "730": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "731": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "732": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "733": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "734": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "735": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "736": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "737": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "738": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "739": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "740": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "741": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "742": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "743": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "744": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "745": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "746": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "747": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "748": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "749": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "750": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "751": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "752": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "753": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "754": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "755": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "756": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "757": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "758": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "759": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "760": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "761": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "762": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "763": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "764": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "765": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "766": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "767": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "768": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "769": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "770": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "771": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "772": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "773": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "774": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "775": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "776": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "777": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "778": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "779": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "780": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "781": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "782": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "783": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "784": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "785": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "786": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "787": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "788": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "789": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "790": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "791": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "792": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "793": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "794": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "795": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "796": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "797": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "798": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "799": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "800": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "801": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "802": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "803": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "804": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "805": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "806": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "807": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "808": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "809": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "810": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "811": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "812": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "813": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "814": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "815": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "816": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "817": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "818": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "819": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "820": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "821": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "822": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "823": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "824": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "825": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "826": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "827": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "828": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "829": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "830": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "831": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "832": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "833": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "834": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "835": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "836": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "837": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "838": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "839": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "840": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "841": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "842": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "843": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "844": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "845": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "846": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "847": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "848": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "849": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "850": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "851": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "852": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "853": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "854": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "855": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "856": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "857": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "858": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "859": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "860": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "861": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "862": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "863": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "864": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "865": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "866": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "867": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "868": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "869": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "870": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "871": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "872": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "873": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "874": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "875": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "876": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "877": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "878": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "879": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "880": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "881": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "882": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "883": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "884": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "885": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "886": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "887": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "888": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "889": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "890": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "891": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "892": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "893": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "894": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "895": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "896": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "897": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "898": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "899": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "900": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "901": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "902": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "903": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "904": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "905": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "906": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "907": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "908": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "909": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "910": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "911": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "912": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "913": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "914": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "915": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "916": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "917": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "918": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "919": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "920": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "921": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "922": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "923": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "924": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "925": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "926": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "927": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "928": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "929": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "930": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "931": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "932": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "933": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "934": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "935": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "936": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "937": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "938": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "939": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "940": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "941": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "942": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "943": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "944": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "945": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "946": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "947": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "948": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "949": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "950": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "951": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "952": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "953": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "954": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "955": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "956": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "957": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "958": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "959": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "960": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "961": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "962": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "963": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "964": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "965": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "966": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "967": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "968": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "969": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "970": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "971": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "972": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "973": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "974": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "975": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "976": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "977": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "978": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "979": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "980": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "981": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "982": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "983": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "984": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "985": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "986": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "987": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "988": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "989": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "990": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "991": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "992": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "993": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "994": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "995": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "996": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "997": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "998": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "999": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1000": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1001": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1002": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1003": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1004": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1005": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1006": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1007": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1008": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1009": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1010": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1011": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1012": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1013": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1014": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1015": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1016": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1017": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1018": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1019": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1020": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1021": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1022": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1023": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1024": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1025": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1026": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1027": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1028": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1029": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1030": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1031": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1032": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1033": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1034": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1035": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1036": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1037": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1038": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1039": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1040": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1041": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1042": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1043": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1044": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1045": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1046": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1047": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1048": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1049": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1050": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1051": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1052": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1053": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1054": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1055": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1056": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1057": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1058": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1059": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1060": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1061": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1062": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1063": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1064": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1065": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1066": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1067": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1068": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1069": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1070": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1071": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1072": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1073": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1074": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1075": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1076": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1077": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1078": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1079": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1080": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1081": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1082": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1083": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1084": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1085": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1086": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1087": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1088": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1089": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1090": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1091": "TableRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "1096": "TableRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "1097": "TableRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "1098": "TableRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "1099": "TableRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "1100": "TableRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "1101": "TableRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "1102": "TableRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "1103": "TableRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "1104": "TableRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "1105": "TableRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "1106": "TableRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "1107": "TableRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "1108": "TableRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "1109": "TableRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "1110": "TableRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "1111": "TableRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "1112": "TableRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "1113": "TableRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "1114": "TableRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "1115": "TableRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "1116": "TableRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "1117": "TableRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "1118": "TableRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "1119": "TableRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "1120": "TableRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "1121": "TableRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "1122": "TableRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "1123": "TableRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "1124": "TableRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "1125": "TableRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "1126": "TableRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "1127": "TableRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "1128": "TableRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "1129": "TableRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "1130": "TableRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "1131": "TableRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "1132": "TableRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "1133": "TableRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "1134": "TableRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "1135": "TableRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "1136": "TableRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "1137": "TableRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "1138": "TableRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "1139": "TableRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "1140": "TableRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "1141": "TableRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "1142": "TableRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "1143": "TableRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "1144": "TableRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "1145": "TableRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "1146": "TableRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "1147": "TableRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "1148": "TableRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "1149": "TableRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "1150": "TableRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "1151": "TableRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "1152": "TableRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "1153": "TableRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "1158": "TableRenderer::::drawChildren(com.itextpdf.layout.renderer.DrawContext)",
      "1159": "TableRenderer::::drawChildren(com.itextpdf.layout.renderer.DrawContext)",
      "1160": "TableRenderer::::drawChildren(com.itextpdf.layout.renderer.DrawContext)",
      "1161": "TableRenderer::::drawChildren(com.itextpdf.layout.renderer.DrawContext)",
      "1162": "TableRenderer::::drawChildren(com.itextpdf.layout.renderer.DrawContext)",
      "1163": "TableRenderer::::drawChildren(com.itextpdf.layout.renderer.DrawContext)",
      "1164": "TableRenderer::::drawChildren(com.itextpdf.layout.renderer.DrawContext)",
      "1165": "TableRenderer::::drawChildren(com.itextpdf.layout.renderer.DrawContext)",
      "1166": "TableRenderer::::drawChildren(com.itextpdf.layout.renderer.DrawContext)",
      "1167": "TableRenderer::::drawChildren(com.itextpdf.layout.renderer.DrawContext)",
      "1168": "TableRenderer::::drawChildren(com.itextpdf.layout.renderer.DrawContext)",
      "1169": "TableRenderer::::drawChildren(com.itextpdf.layout.renderer.DrawContext)",
      "1170": "TableRenderer::::drawChildren(com.itextpdf.layout.renderer.DrawContext)",
      "1171": "TableRenderer::::drawChildren(com.itextpdf.layout.renderer.DrawContext)",
      "1172": "TableRenderer::::drawChildren(com.itextpdf.layout.renderer.DrawContext)",
      "1173": "TableRenderer::::drawChildren(com.itextpdf.layout.renderer.DrawContext)",
      "1174": "TableRenderer::::drawChildren(com.itextpdf.layout.renderer.DrawContext)",
      "1175": "TableRenderer::::drawChildren(com.itextpdf.layout.renderer.DrawContext)",
      "1177": "TableRenderer::::drawBackgrounds(com.itextpdf.layout.renderer.DrawContext)",
      "1178": "TableRenderer::::drawBackgrounds(com.itextpdf.layout.renderer.DrawContext)",
      "1179": "TableRenderer::::drawBackgrounds(com.itextpdf.layout.renderer.DrawContext)",
      "1180": "TableRenderer::::drawBackgrounds(com.itextpdf.layout.renderer.DrawContext)",
      "1181": "TableRenderer::::drawBackgrounds(com.itextpdf.layout.renderer.DrawContext)",
      "1182": "TableRenderer::::drawBackgrounds(com.itextpdf.layout.renderer.DrawContext)",
      "1183": "TableRenderer::::drawBackgrounds(com.itextpdf.layout.renderer.DrawContext)",
      "1184": "TableRenderer::::drawBackgrounds(com.itextpdf.layout.renderer.DrawContext)",
      "1185": "TableRenderer::::drawBackgrounds(com.itextpdf.layout.renderer.DrawContext)",
      "1186": "TableRenderer::::drawBackgrounds(com.itextpdf.layout.renderer.DrawContext)",
      "1187": "TableRenderer::::drawBackgrounds(com.itextpdf.layout.renderer.DrawContext)",
      "1188": "TableRenderer::::drawBackgrounds(com.itextpdf.layout.renderer.DrawContext)",
      "1189": "TableRenderer::::drawBackgrounds(com.itextpdf.layout.renderer.DrawContext)",
      "1190": "TableRenderer::::drawBackgrounds(com.itextpdf.layout.renderer.DrawContext)",
      "1191": "TableRenderer::::drawBackgrounds(com.itextpdf.layout.renderer.DrawContext)",
      "1192": "TableRenderer::::drawBackgrounds(com.itextpdf.layout.renderer.DrawContext)",
      "1193": "TableRenderer::::drawBackgrounds(com.itextpdf.layout.renderer.DrawContext)",
      "1194": "TableRenderer::::drawBackgrounds(com.itextpdf.layout.renderer.DrawContext)",
      "1197": "TableRenderer::::drawCaption(com.itextpdf.layout.renderer.DrawContext)",
      "1198": "TableRenderer::::drawCaption(com.itextpdf.layout.renderer.DrawContext)",
      "1199": "TableRenderer::::drawCaption(com.itextpdf.layout.renderer.DrawContext)",
      "1200": "TableRenderer::::drawCaption(com.itextpdf.layout.renderer.DrawContext)",
      "1201": "TableRenderer::::drawCaption(com.itextpdf.layout.renderer.DrawContext)",
      "1203": "TableRenderer::::drawBackground(com.itextpdf.layout.renderer.DrawContext)",
      "1204": "TableRenderer::::drawBackground(com.itextpdf.layout.renderer.DrawContext)",
      "1205": "TableRenderer::::drawBackground(com.itextpdf.layout.renderer.DrawContext)",
      "1206": "TableRenderer::::drawBackground(com.itextpdf.layout.renderer.DrawContext)",
      "1207": "TableRenderer::::drawBackground(com.itextpdf.layout.renderer.DrawContext)",
      "1208": "TableRenderer::::drawBackground(com.itextpdf.layout.renderer.DrawContext)",
      "1209": "TableRenderer::::drawBackground(com.itextpdf.layout.renderer.DrawContext)",
      "1222": "TableRenderer::::getNextRenderer()",
      "1223": "TableRenderer::::getNextRenderer()",
      "1224": "TableRenderer::::getNextRenderer()",
      "1225": "TableRenderer::::getNextRenderer()",
      "1226": "TableRenderer::::getNextRenderer()",
      "1227": "TableRenderer::::getNextRenderer()",
      "1228": "TableRenderer::::getNextRenderer()",
      "1233": "TableRenderer::::move(float,float)",
      "1234": "TableRenderer::::move(float,float)",
      "1235": "TableRenderer::::move(float,float)",
      "1236": "TableRenderer::::move(float,float)",
      "1237": "TableRenderer::::move(float,float)",
      "1238": "TableRenderer::::move(float,float)",
      "1239": "TableRenderer::::move(float,float)",
      "1240": "TableRenderer::::move(float,float)",
      "1241": "TableRenderer::::move(float,float)",
      "1242": "TableRenderer::::move(float,float)",
      "1244": "TableRenderer::::split(int)",
      "1245": "TableRenderer::::split(int)",
      "1246": "TableRenderer::::split(int)",
      "1248": "TableRenderer::::split(int,boolean)",
      "1249": "TableRenderer::::split(int,boolean)",
      "1250": "TableRenderer::::split(int,boolean)",
      "1253": "TableRenderer::::split(int,boolean,boolean)",
      "1254": "TableRenderer::::split(int,boolean,boolean)",
      "1255": "TableRenderer::::split(int,boolean,boolean)",
      "1256": "TableRenderer::::split(int,boolean,boolean)",
      "1257": "TableRenderer::::split(int,boolean,boolean)",
      "1258": "TableRenderer::::split(int,boolean,boolean)",
      "1259": "TableRenderer::::split(int,boolean,boolean)",
      "1260": "TableRenderer::::split(int,boolean,boolean)",
      "1261": "TableRenderer::::split(int,boolean,boolean)",
      "1262": "TableRenderer::::split(int,boolean,boolean)",
      "1263": "TableRenderer::::split(int,boolean,boolean)",
      "1264": "TableRenderer::::split(int,boolean,boolean)",
      "1265": "TableRenderer::::split(int,boolean,boolean)",
      "1266": "TableRenderer::::split(int,boolean,boolean)",
      "1267": "TableRenderer::::split(int,boolean,boolean)",
      "1268": "TableRenderer::::split(int,boolean,boolean)",
      "1269": "TableRenderer::::split(int,boolean,boolean)",
      "1270": "TableRenderer::::split(int,boolean,boolean)",
      "1271": "TableRenderer::::split(int,boolean,boolean)",
      "1273": "TableRenderer::::createSplitRenderer(com.itextpdf.layout.element.Table.RowRange)",
      "1274": "TableRenderer::::createSplitRenderer(com.itextpdf.layout.element.Table.RowRange)",
      "1275": "TableRenderer::::createSplitRenderer(com.itextpdf.layout.element.Table.RowRange)",
      "1276": "TableRenderer::::createSplitRenderer(com.itextpdf.layout.element.Table.RowRange)",
      "1277": "TableRenderer::::createSplitRenderer(com.itextpdf.layout.element.Table.RowRange)",
      "1278": "TableRenderer::::createSplitRenderer(com.itextpdf.layout.element.Table.RowRange)",
      "1279": "TableRenderer::::createSplitRenderer(com.itextpdf.layout.element.Table.RowRange)",
      "1280": "TableRenderer::::createSplitRenderer(com.itextpdf.layout.element.Table.RowRange)",
      "1281": "TableRenderer::::createSplitRenderer(com.itextpdf.layout.element.Table.RowRange)",
      "1282": "TableRenderer::::createSplitRenderer(com.itextpdf.layout.element.Table.RowRange)",
      "1283": "TableRenderer::::createSplitRenderer(com.itextpdf.layout.element.Table.RowRange)",
      "1284": "TableRenderer::::createSplitRenderer(com.itextpdf.layout.element.Table.RowRange)",
      "1285": "TableRenderer::::createSplitRenderer(com.itextpdf.layout.element.Table.RowRange)",
      "1286": "TableRenderer::::createSplitRenderer(com.itextpdf.layout.element.Table.RowRange)",
      "1287": "TableRenderer::::createSplitRenderer(com.itextpdf.layout.element.Table.RowRange)",
      "1288": "TableRenderer::::createSplitRenderer(com.itextpdf.layout.element.Table.RowRange)",
      "1290": "TableRenderer::::createOverflowRenderer(com.itextpdf.layout.element.Table.RowRange)",
      "1291": "TableRenderer::::createOverflowRenderer(com.itextpdf.layout.element.Table.RowRange)",
      "1292": "TableRenderer::::createOverflowRenderer(com.itextpdf.layout.element.Table.RowRange)",
      "1293": "TableRenderer::::createOverflowRenderer(com.itextpdf.layout.element.Table.RowRange)",
      "1294": "TableRenderer::::createOverflowRenderer(com.itextpdf.layout.element.Table.RowRange)",
      "1295": "TableRenderer::::createOverflowRenderer(com.itextpdf.layout.element.Table.RowRange)",
      "1296": "TableRenderer::::createOverflowRenderer(com.itextpdf.layout.element.Table.RowRange)",
      "1297": "TableRenderer::::createOverflowRenderer(com.itextpdf.layout.element.Table.RowRange)",
      "1298": "TableRenderer::::createOverflowRenderer(com.itextpdf.layout.element.Table.RowRange)",
      "1299": "TableRenderer::::createOverflowRenderer(com.itextpdf.layout.element.Table.RowRange)",
      "1301": "TableRenderer::::retrieveWidth(float)",
      "1302": "TableRenderer::::retrieveWidth(float)",
      "1303": "TableRenderer::::retrieveWidth(float)",
      "1304": "TableRenderer::::retrieveWidth(float)",
      "1305": "TableRenderer::::retrieveWidth(float)",
      "1306": "TableRenderer::::retrieveWidth(float)",
      "1307": "TableRenderer::::retrieveWidth(float)",
      "1308": "TableRenderer::::retrieveWidth(float)",
      "1309": "TableRenderer::::retrieveWidth(float)",
      "1310": "TableRenderer::::retrieveWidth(float)",
      "1311": "TableRenderer::::retrieveWidth(float)",
      "1312": "TableRenderer::::retrieveWidth(float)",
      "1313": "TableRenderer::::retrieveWidth(float)",
      "1314": "TableRenderer::::retrieveWidth(float)",
      "1315": "TableRenderer::::retrieveWidth(float)",
      "1316": "TableRenderer::::retrieveWidth(float)",
      "1317": "TableRenderer::::retrieveWidth(float)",
      "1318": "TableRenderer::::retrieveWidth(float)",
      "1319": "TableRenderer::::retrieveWidth(float)",
      "1321": "TableRenderer::::getMinMaxWidth()",
      "1322": "TableRenderer::::getMinMaxWidth()",
      "1323": "TableRenderer::::getMinMaxWidth()",
      "1324": "TableRenderer::::getMinMaxWidth()",
      "1325": "TableRenderer::::getMinMaxWidth()",
      "1326": "TableRenderer::::getMinMaxWidth()",
      "1327": "TableRenderer::::getMinMaxWidth()",
      "1328": "TableRenderer::::getMinMaxWidth()",
      "1329": "TableRenderer::::getMinMaxWidth()",
      "1330": "TableRenderer::::getMinMaxWidth()",
      "1331": "TableRenderer::::getMinMaxWidth()",
      "1332": "TableRenderer::::getMinMaxWidth()",
      "1333": "TableRenderer::::getMinMaxWidth()",
      "1334": "TableRenderer::::getMinMaxWidth()",
      "1335": "TableRenderer::::getMinMaxWidth()",
      "1336": "TableRenderer::::getMinMaxWidth()",
      "1337": "TableRenderer::::getMinMaxWidth()",
      "1338": "TableRenderer::::getMinMaxWidth()",
      "1339": "TableRenderer::::getMinMaxWidth()",
      "1340": "TableRenderer::::getMinMaxWidth()",
      "1341": "TableRenderer::::getMinMaxWidth()",
      "1342": "TableRenderer::::getMinMaxWidth()",
      "1343": "TableRenderer::::getMinMaxWidth()",
      "1344": "TableRenderer::::getMinMaxWidth()",
      "1345": "TableRenderer::::getMinMaxWidth()",
      "1346": "TableRenderer::::getMinMaxWidth()",
      "1347": "TableRenderer::::getMinMaxWidth()",
      "1348": "TableRenderer::::getMinMaxWidth()",
      "1349": "TableRenderer::::getMinMaxWidth()",
      "1351": "TableRenderer::::allowLastYLineRecursiveExtraction()",
      "1352": "TableRenderer::::allowLastYLineRecursiveExtraction()",
      "1353": "TableRenderer::::allowLastYLineRecursiveExtraction()",
      "1354": "TableRenderer::::allowLastYLineRecursiveExtraction()",
      "1356": "TableRenderer::::initializeTableLayoutBorders()",
      "1357": "TableRenderer::::initializeTableLayoutBorders()",
      "1358": "TableRenderer::::initializeTableLayoutBorders()",
      "1359": "TableRenderer::::initializeTableLayoutBorders()",
      "1360": "TableRenderer::::initializeTableLayoutBorders()",
      "1361": "TableRenderer::::initializeTableLayoutBorders()",
      "1362": "TableRenderer::::initializeTableLayoutBorders()",
      "1363": "TableRenderer::::initializeTableLayoutBorders()",
      "1364": "TableRenderer::::initializeTableLayoutBorders()",
      "1365": "TableRenderer::::initializeTableLayoutBorders()",
      "1366": "TableRenderer::::initializeTableLayoutBorders()",
      "1367": "TableRenderer::::initializeTableLayoutBorders()",
      "1369": "TableRenderer::::correctRowRange()",
      "1370": "TableRenderer::::correctRowRange()",
      "1371": "TableRenderer::::correctRowRange()",
      "1372": "TableRenderer::::correctRowRange()",
      "1373": "TableRenderer::::correctRowRange()",
      "1375": "TableRenderer::::drawBorder(com.itextpdf.layout.renderer.DrawContext)",
      "1376": "TableRenderer::::drawBorder(com.itextpdf.layout.renderer.DrawContext)",
      "1377": "TableRenderer::::drawBorder(com.itextpdf.layout.renderer.DrawContext)",
      "1378": "TableRenderer::::drawBorder(com.itextpdf.layout.renderer.DrawContext)",
      "1379": "TableRenderer::::drawBorder(com.itextpdf.layout.renderer.DrawContext)",
      "1380": "TableRenderer::::drawBorder(com.itextpdf.layout.renderer.DrawContext)",
      "1381": "TableRenderer::::drawBorder(com.itextpdf.layout.renderer.DrawContext)",
      "1382": "TableRenderer::::drawBorder(com.itextpdf.layout.renderer.DrawContext)",
      "1384": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext)",
      "1385": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext)",
      "1386": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext)",
      "1388": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1389": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1390": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1391": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1392": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1393": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1394": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1395": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1396": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1397": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1398": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1399": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1400": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1401": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1402": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1403": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1404": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1405": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1406": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1407": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1408": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1409": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1410": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1411": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1412": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1413": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1414": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1415": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1416": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1417": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1418": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1419": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1420": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1421": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1422": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1423": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1424": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1425": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1426": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1427": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1428": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1429": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1430": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1431": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1432": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1433": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1434": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1435": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1436": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1437": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1438": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1439": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1440": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1441": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1442": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1443": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1444": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1445": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1446": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1447": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1448": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1449": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1450": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1451": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1452": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1453": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1454": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1455": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1456": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1457": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1458": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1459": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1460": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1461": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1462": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1463": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1464": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1465": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1466": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1467": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1468": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1469": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1470": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1471": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1472": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1473": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1474": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1475": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1476": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1477": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1478": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1479": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1480": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1481": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1482": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1483": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1484": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1485": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1486": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1487": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1488": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1489": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1490": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1491": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1492": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1493": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1494": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1495": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1496": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1497": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1498": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1499": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1500": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1501": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1502": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1503": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1504": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1505": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1506": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1507": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1508": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1509": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1510": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1511": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1512": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1513": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1514": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1515": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1516": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1517": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1518": "TableRenderer::::drawBorders(com.itextpdf.layout.renderer.DrawContext,boolean,boolean)",
      "1520": "TableRenderer::::isEmptyTableRenderer()",
      "1521": "TableRenderer::::isEmptyTableRenderer()",
      "1522": "TableRenderer::::isEmptyTableRenderer()",
      "1671": "TableRenderer::::correctRowCellsOccupiedAreas(com.itextpdf.layout.layout.LayoutResult[],int,int[],int,java.util.List<java.lang.Boolean>,float,float)",
      "1672": "TableRenderer::::correctRowCellsOccupiedAreas(com.itextpdf.layout.layout.LayoutResult[],int,int[],int,java.util.List<java.lang.Boolean>,float,float)",
      "1673": "TableRenderer::::correctRowCellsOccupiedAreas(com.itextpdf.layout.layout.LayoutResult[],int,int[],int,java.util.List<java.lang.Boolean>,float,float)",
      "1674": "TableRenderer::::correctRowCellsOccupiedAreas(com.itextpdf.layout.layout.LayoutResult[],int,int[],int,java.util.List<java.lang.Boolean>,float,float)",
      "1675": "TableRenderer::::correctRowCellsOccupiedAreas(com.itextpdf.layout.layout.LayoutResult[],int,int[],int,java.util.List<java.lang.Boolean>,float,float)",
      "1676": "TableRenderer::::correctRowCellsOccupiedAreas(com.itextpdf.layout.layout.LayoutResult[],int,int[],int,java.util.List<java.lang.Boolean>,float,float)",
      "1677": "TableRenderer::::correctRowCellsOccupiedAreas(com.itextpdf.layout.layout.LayoutResult[],int,int[],int,java.util.List<java.lang.Boolean>,float,float)",
      "1678": "TableRenderer::::correctRowCellsOccupiedAreas(com.itextpdf.layout.layout.LayoutResult[],int,int[],int,java.util.List<java.lang.Boolean>,float,float)",
      "1679": "TableRenderer::::correctRowCellsOccupiedAreas(com.itextpdf.layout.layout.LayoutResult[],int,int[],int,java.util.List<java.lang.Boolean>,float,float)",
      "1680": "TableRenderer::::correctRowCellsOccupiedAreas(com.itextpdf.layout.layout.LayoutResult[],int,int[],int,java.util.List<java.lang.Boolean>,float,float)",
      "1681": "TableRenderer::::correctRowCellsOccupiedAreas(com.itextpdf.layout.layout.LayoutResult[],int,int[],int,java.util.List<java.lang.Boolean>,float,float)",
      "1682": "TableRenderer::::correctRowCellsOccupiedAreas(com.itextpdf.layout.layout.LayoutResult[],int,int[],int,java.util.List<java.lang.Boolean>,float,float)",
      "1683": "TableRenderer::::correctRowCellsOccupiedAreas(com.itextpdf.layout.layout.LayoutResult[],int,int[],int,java.util.List<java.lang.Boolean>,float,float)",
      "1684": "TableRenderer::::correctRowCellsOccupiedAreas(com.itextpdf.layout.layout.LayoutResult[],int,int[],int,java.util.List<java.lang.Boolean>,float,float)",
      "1685": "TableRenderer::::correctRowCellsOccupiedAreas(com.itextpdf.layout.layout.LayoutResult[],int,int[],int,java.util.List<java.lang.Boolean>,float,float)",
      "1686": "TableRenderer::::correctRowCellsOccupiedAreas(com.itextpdf.layout.layout.LayoutResult[],int,int[],int,java.util.List<java.lang.Boolean>,float,float)",
      "1687": "TableRenderer::::correctRowCellsOccupiedAreas(com.itextpdf.layout.layout.LayoutResult[],int,int[],int,java.util.List<java.lang.Boolean>,float,float)",
      "1688": "TableRenderer::::correctRowCellsOccupiedAreas(com.itextpdf.layout.layout.LayoutResult[],int,int[],int,java.util.List<java.lang.Boolean>,float,float)",
      "1689": "TableRenderer::::correctRowCellsOccupiedAreas(com.itextpdf.layout.layout.LayoutResult[],int,int[],int,java.util.List<java.lang.Boolean>,float,float)",
      "1690": "TableRenderer::::correctRowCellsOccupiedAreas(com.itextpdf.layout.layout.LayoutResult[],int,int[],int,java.util.List<java.lang.Boolean>,float,float)",
      "1691": "TableRenderer::::correctRowCellsOccupiedAreas(com.itextpdf.layout.layout.LayoutResult[],int,int[],int,java.util.List<java.lang.Boolean>,float,float)",
      "1692": "TableRenderer::::correctRowCellsOccupiedAreas(com.itextpdf.layout.layout.LayoutResult[],int,int[],int,java.util.List<java.lang.Boolean>,float,float)",
      "1693": "TableRenderer::::correctRowCellsOccupiedAreas(com.itextpdf.layout.layout.LayoutResult[],int,int[],int,java.util.List<java.lang.Boolean>,float,float)",
      "1694": "TableRenderer::::correctRowCellsOccupiedAreas(com.itextpdf.layout.layout.LayoutResult[],int,int[],int,java.util.List<java.lang.Boolean>,float,float)",
      "1695": "TableRenderer::::correctRowCellsOccupiedAreas(com.itextpdf.layout.layout.LayoutResult[],int,int[],int,java.util.List<java.lang.Boolean>,float,float)",
      "1696": "TableRenderer::::correctRowCellsOccupiedAreas(com.itextpdf.layout.layout.LayoutResult[],int,int[],int,java.util.List<java.lang.Boolean>,float,float)",
      "1697": "TableRenderer::::correctRowCellsOccupiedAreas(com.itextpdf.layout.layout.LayoutResult[],int,int[],int,java.util.List<java.lang.Boolean>,float,float)",
      "1698": "TableRenderer::::correctRowCellsOccupiedAreas(com.itextpdf.layout.layout.LayoutResult[],int,int[],int,java.util.List<java.lang.Boolean>,float,float)",
      "1699": "TableRenderer::::correctRowCellsOccupiedAreas(com.itextpdf.layout.layout.LayoutResult[],int,int[],int,java.util.List<java.lang.Boolean>,float,float)",
      "1700": "TableRenderer::::correctRowCellsOccupiedAreas(com.itextpdf.layout.layout.LayoutResult[],int,int[],int,java.util.List<java.lang.Boolean>,float,float)",
      "1701": "TableRenderer::::correctRowCellsOccupiedAreas(com.itextpdf.layout.layout.LayoutResult[],int,int[],int,java.util.List<java.lang.Boolean>,float,float)",
      "1702": "TableRenderer::::correctRowCellsOccupiedAreas(com.itextpdf.layout.layout.LayoutResult[],int,int[],int,java.util.List<java.lang.Boolean>,float,float)",
      "1703": "TableRenderer::::correctRowCellsOccupiedAreas(com.itextpdf.layout.layout.LayoutResult[],int,int[],int,java.util.List<java.lang.Boolean>,float,float)",
      "1704": "TableRenderer::::correctRowCellsOccupiedAreas(com.itextpdf.layout.layout.LayoutResult[],int,int[],int,java.util.List<java.lang.Boolean>,float,float)",
      "1705": "TableRenderer::::correctRowCellsOccupiedAreas(com.itextpdf.layout.layout.LayoutResult[],int,int[],int,java.util.List<java.lang.Boolean>,float,float)",
      "1706": "TableRenderer::::correctRowCellsOccupiedAreas(com.itextpdf.layout.layout.LayoutResult[],int,int[],int,java.util.List<java.lang.Boolean>,float,float)",
      "1707": "TableRenderer::::correctRowCellsOccupiedAreas(com.itextpdf.layout.layout.LayoutResult[],int,int[],int,java.util.List<java.lang.Boolean>,float,float)",
      "1708": "TableRenderer::::correctRowCellsOccupiedAreas(com.itextpdf.layout.layout.LayoutResult[],int,int[],int,java.util.List<java.lang.Boolean>,float,float)",
      "1709": "TableRenderer::::correctRowCellsOccupiedAreas(com.itextpdf.layout.layout.LayoutResult[],int,int[],int,java.util.List<java.lang.Boolean>,float,float)",
      "1710": "TableRenderer::::correctRowCellsOccupiedAreas(com.itextpdf.layout.layout.LayoutResult[],int,int[],int,java.util.List<java.lang.Boolean>,float,float)",
      "1711": "TableRenderer::::correctRowCellsOccupiedAreas(com.itextpdf.layout.layout.LayoutResult[],int,int[],int,java.util.List<java.lang.Boolean>,float,float)",
      "1712": "TableRenderer::::correctRowCellsOccupiedAreas(com.itextpdf.layout.layout.LayoutResult[],int,int[],int,java.util.List<java.lang.Boolean>,float,float)",
      "1732": "TableRenderer::::setRowRange(com.itextpdf.layout.element.Table.RowRange)",
      "1733": "TableRenderer::::setRowRange(com.itextpdf.layout.element.Table.RowRange)",
      "1734": "TableRenderer::::setRowRange(com.itextpdf.layout.element.Table.RowRange)",
      "1735": "TableRenderer::::setRowRange(com.itextpdf.layout.element.Table.RowRange)",
      "1736": "TableRenderer::::setRowRange(com.itextpdf.layout.element.Table.RowRange)",
      "1737": "TableRenderer::::setRowRange(com.itextpdf.layout.element.Table.RowRange)",
      "1739": "TableRenderer::::initFooterOrHeaderRenderer(boolean,com.itextpdf.layout.borders.Border[])",
      "1740": "TableRenderer::::initFooterOrHeaderRenderer(boolean,com.itextpdf.layout.borders.Border[])",
      "1741": "TableRenderer::::initFooterOrHeaderRenderer(boolean,com.itextpdf.layout.borders.Border[])",
      "1742": "TableRenderer::::initFooterOrHeaderRenderer(boolean,com.itextpdf.layout.borders.Border[])",
      "1743": "TableRenderer::::initFooterOrHeaderRenderer(boolean,com.itextpdf.layout.borders.Border[])",
      "1744": "TableRenderer::::initFooterOrHeaderRenderer(boolean,com.itextpdf.layout.borders.Border[])",
      "1745": "TableRenderer::::initFooterOrHeaderRenderer(boolean,com.itextpdf.layout.borders.Border[])",
      "1746": "TableRenderer::::initFooterOrHeaderRenderer(boolean,com.itextpdf.layout.borders.Border[])",
      "1747": "TableRenderer::::initFooterOrHeaderRenderer(boolean,com.itextpdf.layout.borders.Border[])",
      "1748": "TableRenderer::::initFooterOrHeaderRenderer(boolean,com.itextpdf.layout.borders.Border[])",
      "1749": "TableRenderer::::initFooterOrHeaderRenderer(boolean,com.itextpdf.layout.borders.Border[])",
      "1750": "TableRenderer::::initFooterOrHeaderRenderer(boolean,com.itextpdf.layout.borders.Border[])",
      "1751": "TableRenderer::::initFooterOrHeaderRenderer(boolean,com.itextpdf.layout.borders.Border[])",
      "1752": "TableRenderer::::initFooterOrHeaderRenderer(boolean,com.itextpdf.layout.borders.Border[])",
      "1753": "TableRenderer::::initFooterOrHeaderRenderer(boolean,com.itextpdf.layout.borders.Border[])",
      "1754": "TableRenderer::::initFooterOrHeaderRenderer(boolean,com.itextpdf.layout.borders.Border[])",
      "1755": "TableRenderer::::initFooterOrHeaderRenderer(boolean,com.itextpdf.layout.borders.Border[])",
      "1756": "TableRenderer::::initFooterOrHeaderRenderer(boolean,com.itextpdf.layout.borders.Border[])",
      "1757": "TableRenderer::::initFooterOrHeaderRenderer(boolean,com.itextpdf.layout.borders.Border[])",
      "1758": "TableRenderer::::initFooterOrHeaderRenderer(boolean,com.itextpdf.layout.borders.Border[])",
      "1759": "TableRenderer::::initFooterOrHeaderRenderer(boolean,com.itextpdf.layout.borders.Border[])",
      "1760": "TableRenderer::::initFooterOrHeaderRenderer(boolean,com.itextpdf.layout.borders.Border[])",
      "1761": "TableRenderer::::initFooterOrHeaderRenderer(boolean,com.itextpdf.layout.borders.Border[])",
      "1762": "TableRenderer::::initFooterOrHeaderRenderer(boolean,com.itextpdf.layout.borders.Border[])",
      "1763": "TableRenderer::::initFooterOrHeaderRenderer(boolean,com.itextpdf.layout.borders.Border[])",
      "1764": "TableRenderer::::initFooterOrHeaderRenderer(boolean,com.itextpdf.layout.borders.Border[])",
      "1765": "TableRenderer::::initFooterOrHeaderRenderer(boolean,com.itextpdf.layout.borders.Border[])",
      "1766": "TableRenderer::::initFooterOrHeaderRenderer(boolean,com.itextpdf.layout.borders.Border[])",
      "1767": "TableRenderer::::initFooterOrHeaderRenderer(boolean,com.itextpdf.layout.borders.Border[])",
      "1768": "TableRenderer::::initFooterOrHeaderRenderer(boolean,com.itextpdf.layout.borders.Border[])",
      "1769": "TableRenderer::::initFooterOrHeaderRenderer(boolean,com.itextpdf.layout.borders.Border[])",
      "1770": "TableRenderer::::initFooterOrHeaderRenderer(boolean,com.itextpdf.layout.borders.Border[])",
      "1771": "TableRenderer::::initFooterOrHeaderRenderer(boolean,com.itextpdf.layout.borders.Border[])",
      "1772": "TableRenderer::::initFooterOrHeaderRenderer(boolean,com.itextpdf.layout.borders.Border[])",
      "1773": "TableRenderer::::initFooterOrHeaderRenderer(boolean,com.itextpdf.layout.borders.Border[])",
      "1774": "TableRenderer::::initFooterOrHeaderRenderer(boolean,com.itextpdf.layout.borders.Border[])",
      "1775": "TableRenderer::::initFooterOrHeaderRenderer(boolean,com.itextpdf.layout.borders.Border[])",
      "1776": "TableRenderer::::initFooterOrHeaderRenderer(boolean,com.itextpdf.layout.borders.Border[])",
      "1777": "TableRenderer::::initFooterOrHeaderRenderer(boolean,com.itextpdf.layout.borders.Border[])",
      "1778": "TableRenderer::::initFooterOrHeaderRenderer(boolean,com.itextpdf.layout.borders.Border[])",
      "1779": "TableRenderer::::initFooterOrHeaderRenderer(boolean,com.itextpdf.layout.borders.Border[])",
      "1780": "TableRenderer::::initFooterOrHeaderRenderer(boolean,com.itextpdf.layout.borders.Border[])",
      "1781": "TableRenderer::::initFooterOrHeaderRenderer(boolean,com.itextpdf.layout.borders.Border[])",
      "1782": "TableRenderer::::initFooterOrHeaderRenderer(boolean,com.itextpdf.layout.borders.Border[])",
      "1783": "TableRenderer::::initFooterOrHeaderRenderer(boolean,com.itextpdf.layout.borders.Border[])",
      "1784": "TableRenderer::::initFooterOrHeaderRenderer(boolean,com.itextpdf.layout.borders.Border[])",
      "1785": "TableRenderer::::initFooterOrHeaderRenderer(boolean,com.itextpdf.layout.borders.Border[])",
      "1786": "TableRenderer::::initFooterOrHeaderRenderer(boolean,com.itextpdf.layout.borders.Border[])",
      "1787": "TableRenderer::::initFooterOrHeaderRenderer(boolean,com.itextpdf.layout.borders.Border[])",
      "1788": "TableRenderer::::initFooterOrHeaderRenderer(boolean,com.itextpdf.layout.borders.Border[])",
      "1789": "TableRenderer::::initFooterOrHeaderRenderer(boolean,com.itextpdf.layout.borders.Border[])",
      "1790": "TableRenderer::::initFooterOrHeaderRenderer(boolean,com.itextpdf.layout.borders.Border[])",
      "1791": "TableRenderer::::initFooterOrHeaderRenderer(boolean,com.itextpdf.layout.borders.Border[])",
      "1793": "TableRenderer::::ensureFooterOrHeaderHasTheSamePropertiesAsParentTableRenderer(com.itextpdf.layout.renderer.TableRenderer)",
      "1794": "TableRenderer::::ensureFooterOrHeaderHasTheSamePropertiesAsParentTableRenderer(com.itextpdf.layout.renderer.TableRenderer)",
      "1795": "TableRenderer::::ensureFooterOrHeaderHasTheSamePropertiesAsParentTableRenderer(com.itextpdf.layout.renderer.TableRenderer)",
      "1796": "TableRenderer::::ensureFooterOrHeaderHasTheSamePropertiesAsParentTableRenderer(com.itextpdf.layout.renderer.TableRenderer)",
      "1797": "TableRenderer::::ensureFooterOrHeaderHasTheSamePropertiesAsParentTableRenderer(com.itextpdf.layout.renderer.TableRenderer)",
      "1798": "TableRenderer::::ensureFooterOrHeaderHasTheSamePropertiesAsParentTableRenderer(com.itextpdf.layout.renderer.TableRenderer)",
      "1799": "TableRenderer::::ensureFooterOrHeaderHasTheSamePropertiesAsParentTableRenderer(com.itextpdf.layout.renderer.TableRenderer)",
      "1800": "TableRenderer::::ensureFooterOrHeaderHasTheSamePropertiesAsParentTableRenderer(com.itextpdf.layout.renderer.TableRenderer)",
      "1801": "TableRenderer::::ensureFooterOrHeaderHasTheSamePropertiesAsParentTableRenderer(com.itextpdf.layout.renderer.TableRenderer)",
      "1802": "TableRenderer::::ensureFooterOrHeaderHasTheSamePropertiesAsParentTableRenderer(com.itextpdf.layout.renderer.TableRenderer)",
      "1803": "TableRenderer::::ensureFooterOrHeaderHasTheSamePropertiesAsParentTableRenderer(com.itextpdf.layout.renderer.TableRenderer)",
      "1804": "TableRenderer::::ensureFooterOrHeaderHasTheSamePropertiesAsParentTableRenderer(com.itextpdf.layout.renderer.TableRenderer)",
      "1806": "TableRenderer::::prepareFooterOrHeaderRendererForLayout(com.itextpdf.layout.renderer.TableRenderer,float)",
      "1807": "TableRenderer::::prepareFooterOrHeaderRendererForLayout(com.itextpdf.layout.renderer.TableRenderer,float)",
      "1808": "TableRenderer::::prepareFooterOrHeaderRendererForLayout(com.itextpdf.layout.renderer.TableRenderer,float)",
      "1809": "TableRenderer::::prepareFooterOrHeaderRendererForLayout(com.itextpdf.layout.renderer.TableRenderer,float)",
      "1810": "TableRenderer::::prepareFooterOrHeaderRendererForLayout(com.itextpdf.layout.renderer.TableRenderer,float)",
      "1811": "TableRenderer::::prepareFooterOrHeaderRendererForLayout(com.itextpdf.layout.renderer.TableRenderer,float)",
      "1812": "TableRenderer::::prepareFooterOrHeaderRendererForLayout(com.itextpdf.layout.renderer.TableRenderer,float)",
      "1813": "TableRenderer::::prepareFooterOrHeaderRendererForLayout(com.itextpdf.layout.renderer.TableRenderer,float)",
      "1814": "TableRenderer::::prepareFooterOrHeaderRendererForLayout(com.itextpdf.layout.renderer.TableRenderer,float)",
      "1816": "TableRenderer::::isHeaderRenderer()",
      "1817": "TableRenderer::::isHeaderRenderer()",
      "1818": "TableRenderer::::isHeaderRenderer()",
      "1820": "TableRenderer::::isFooterRenderer()",
      "1821": "TableRenderer::::isFooterRenderer()",
      "1822": "TableRenderer::::isFooterRenderer()",
      "1824": "TableRenderer::::isFooterRendererOfLargeTable()",
      "1825": "TableRenderer::::isFooterRendererOfLargeTable()",
      "1826": "TableRenderer::::isFooterRendererOfLargeTable()",
      "1828": "TableRenderer::::isTopTablePart()",
      "1829": "TableRenderer::::isTopTablePart()",
      "1830": "TableRenderer::::isTopTablePart()",
      "1831": "TableRenderer::::isTopTablePart()",
      "1833": "TableRenderer::::isBottomTablePart()",
      "1834": "TableRenderer::::isBottomTablePart()",
      "1835": "TableRenderer::::isBottomTablePart()",
      "1836": "TableRenderer::::isBottomTablePart()",
      "1841": "TableRenderer::::calculateColumnWidths(float)",
      "1842": "TableRenderer::::calculateColumnWidths(float)",
      "1843": "TableRenderer::::calculateColumnWidths(float)",
      "1844": "TableRenderer::::calculateColumnWidths(float)",
      "1845": "TableRenderer::::calculateColumnWidths(float)",
      "1846": "TableRenderer::::calculateColumnWidths(float)",
      "1848": "TableRenderer::::getTableWidth()",
      "1849": "TableRenderer::::getTableWidth()",
      "1850": "TableRenderer::::getTableWidth()",
      "1851": "TableRenderer::::getTableWidth()",
      "1852": "TableRenderer::::getTableWidth()",
      "1853": "TableRenderer::::getTableWidth()",
      "1854": "TableRenderer::::getTableWidth()",
      "1855": "TableRenderer::::getTableWidth()",
      "1856": "TableRenderer::::getTableWidth()",
      "1857": "TableRenderer::::getTableWidth()",
      "1858": "TableRenderer::::getTableWidth()",
      "1859": "TableRenderer::::getTableWidth()",
      "1860": "TableRenderer::::getTableWidth()",
      "1861": "TableRenderer::::getTableWidth()",
      "1891": "TableRenderer.OverflowRowsWrapper::::getCell(int,int)",
      "1892": "TableRenderer.OverflowRowsWrapper::::getCell(int,int)",
      "1893": "TableRenderer.OverflowRowsWrapper::::getCell(int,int)",
      "1895": "TableRenderer.OverflowRowsWrapper::::setCell(int,int,com.itextpdf.layout.renderer.CellRenderer)",
      "1896": "TableRenderer.OverflowRowsWrapper::::setCell(int,int,com.itextpdf.layout.renderer.CellRenderer)",
      "1897": "TableRenderer.OverflowRowsWrapper::::setCell(int,int,com.itextpdf.layout.renderer.CellRenderer)",
      "1898": "TableRenderer.OverflowRowsWrapper::::setCell(int,int,com.itextpdf.layout.renderer.CellRenderer)",
      "1899": "TableRenderer.OverflowRowsWrapper::::setCell(int,int,com.itextpdf.layout.renderer.CellRenderer)",
      "1900": "TableRenderer.OverflowRowsWrapper::::setCell(int,int,com.itextpdf.layout.renderer.CellRenderer)",
      "1901": "TableRenderer.OverflowRowsWrapper::::setCell(int,int,com.itextpdf.layout.renderer.CellRenderer)",
      "1902": "TableRenderer.OverflowRowsWrapper::::setCell(int,int,com.itextpdf.layout.renderer.CellRenderer)",
      "1906": "TableRenderer::::enlargeCellWithBigRowspan(com.itextpdf.layout.renderer.CellRenderer[],com.itextpdf.layout.renderer.TableRenderer.OverflowRowsWrapper,int,int,int,com.itextpdf.layout.renderer.TableRenderer[],int[])",
      "1907": "TableRenderer::::enlargeCellWithBigRowspan(com.itextpdf.layout.renderer.CellRenderer[],com.itextpdf.layout.renderer.TableRenderer.OverflowRowsWrapper,int,int,int,com.itextpdf.layout.renderer.TableRenderer[],int[])",
      "1908": "TableRenderer::::enlargeCellWithBigRowspan(com.itextpdf.layout.renderer.CellRenderer[],com.itextpdf.layout.renderer.TableRenderer.OverflowRowsWrapper,int,int,int,com.itextpdf.layout.renderer.TableRenderer[],int[])",
      "1909": "TableRenderer::::enlargeCellWithBigRowspan(com.itextpdf.layout.renderer.CellRenderer[],com.itextpdf.layout.renderer.TableRenderer.OverflowRowsWrapper,int,int,int,com.itextpdf.layout.renderer.TableRenderer[],int[])",
      "1910": "TableRenderer::::enlargeCellWithBigRowspan(com.itextpdf.layout.renderer.CellRenderer[],com.itextpdf.layout.renderer.TableRenderer.OverflowRowsWrapper,int,int,int,com.itextpdf.layout.renderer.TableRenderer[],int[])",
      "1911": "TableRenderer::::enlargeCellWithBigRowspan(com.itextpdf.layout.renderer.CellRenderer[],com.itextpdf.layout.renderer.TableRenderer.OverflowRowsWrapper,int,int,int,com.itextpdf.layout.renderer.TableRenderer[],int[])",
      "1912": "TableRenderer::::enlargeCellWithBigRowspan(com.itextpdf.layout.renderer.CellRenderer[],com.itextpdf.layout.renderer.TableRenderer.OverflowRowsWrapper,int,int,int,com.itextpdf.layout.renderer.TableRenderer[],int[])",
      "1913": "TableRenderer::::enlargeCellWithBigRowspan(com.itextpdf.layout.renderer.CellRenderer[],com.itextpdf.layout.renderer.TableRenderer.OverflowRowsWrapper,int,int,int,com.itextpdf.layout.renderer.TableRenderer[],int[])",
      "1914": "TableRenderer::::enlargeCellWithBigRowspan(com.itextpdf.layout.renderer.CellRenderer[],com.itextpdf.layout.renderer.TableRenderer.OverflowRowsWrapper,int,int,int,com.itextpdf.layout.renderer.TableRenderer[],int[])",
      "1915": "TableRenderer::::enlargeCellWithBigRowspan(com.itextpdf.layout.renderer.CellRenderer[],com.itextpdf.layout.renderer.TableRenderer.OverflowRowsWrapper,int,int,int,com.itextpdf.layout.renderer.TableRenderer[],int[])",
      "1916": "TableRenderer::::enlargeCellWithBigRowspan(com.itextpdf.layout.renderer.CellRenderer[],com.itextpdf.layout.renderer.TableRenderer.OverflowRowsWrapper,int,int,int,com.itextpdf.layout.renderer.TableRenderer[],int[])",
      "1917": "TableRenderer::::enlargeCellWithBigRowspan(com.itextpdf.layout.renderer.CellRenderer[],com.itextpdf.layout.renderer.TableRenderer.OverflowRowsWrapper,int,int,int,com.itextpdf.layout.renderer.TableRenderer[],int[])",
      "1918": "TableRenderer::::enlargeCellWithBigRowspan(com.itextpdf.layout.renderer.CellRenderer[],com.itextpdf.layout.renderer.TableRenderer.OverflowRowsWrapper,int,int,int,com.itextpdf.layout.renderer.TableRenderer[],int[])",
      "1919": "TableRenderer::::enlargeCellWithBigRowspan(com.itextpdf.layout.renderer.CellRenderer[],com.itextpdf.layout.renderer.TableRenderer.OverflowRowsWrapper,int,int,int,com.itextpdf.layout.renderer.TableRenderer[],int[])",
      "1920": "TableRenderer::::enlargeCellWithBigRowspan(com.itextpdf.layout.renderer.CellRenderer[],com.itextpdf.layout.renderer.TableRenderer.OverflowRowsWrapper,int,int,int,com.itextpdf.layout.renderer.TableRenderer[],int[])",
      "1921": "TableRenderer::::enlargeCellWithBigRowspan(com.itextpdf.layout.renderer.CellRenderer[],com.itextpdf.layout.renderer.TableRenderer.OverflowRowsWrapper,int,int,int,com.itextpdf.layout.renderer.TableRenderer[],int[])",
      "1922": "TableRenderer::::enlargeCellWithBigRowspan(com.itextpdf.layout.renderer.CellRenderer[],com.itextpdf.layout.renderer.TableRenderer.OverflowRowsWrapper,int,int,int,com.itextpdf.layout.renderer.TableRenderer[],int[])",
      "1923": "TableRenderer::::enlargeCellWithBigRowspan(com.itextpdf.layout.renderer.CellRenderer[],com.itextpdf.layout.renderer.TableRenderer.OverflowRowsWrapper,int,int,int,com.itextpdf.layout.renderer.TableRenderer[],int[])",
      "1924": "TableRenderer::::enlargeCellWithBigRowspan(com.itextpdf.layout.renderer.CellRenderer[],com.itextpdf.layout.renderer.TableRenderer.OverflowRowsWrapper,int,int,int,com.itextpdf.layout.renderer.TableRenderer[],int[])",
      "1925": "TableRenderer::::enlargeCellWithBigRowspan(com.itextpdf.layout.renderer.CellRenderer[],com.itextpdf.layout.renderer.TableRenderer.OverflowRowsWrapper,int,int,int,com.itextpdf.layout.renderer.TableRenderer[],int[])",
      "1926": "TableRenderer::::enlargeCellWithBigRowspan(com.itextpdf.layout.renderer.CellRenderer[],com.itextpdf.layout.renderer.TableRenderer.OverflowRowsWrapper,int,int,int,com.itextpdf.layout.renderer.TableRenderer[],int[])",
      "1927": "TableRenderer::::enlargeCellWithBigRowspan(com.itextpdf.layout.renderer.CellRenderer[],com.itextpdf.layout.renderer.TableRenderer.OverflowRowsWrapper,int,int,int,com.itextpdf.layout.renderer.TableRenderer[],int[])",
      "1928": "TableRenderer::::enlargeCellWithBigRowspan(com.itextpdf.layout.renderer.CellRenderer[],com.itextpdf.layout.renderer.TableRenderer.OverflowRowsWrapper,int,int,int,com.itextpdf.layout.renderer.TableRenderer[],int[])",
      "1929": "TableRenderer::::enlargeCellWithBigRowspan(com.itextpdf.layout.renderer.CellRenderer[],com.itextpdf.layout.renderer.TableRenderer.OverflowRowsWrapper,int,int,int,com.itextpdf.layout.renderer.TableRenderer[],int[])",
      "1931": "TableRenderer::::enlargeCell(int,int,int,com.itextpdf.layout.renderer.CellRenderer[],com.itextpdf.layout.renderer.TableRenderer.OverflowRowsWrapper,int[],com.itextpdf.layout.renderer.TableRenderer[])",
      "1932": "TableRenderer::::enlargeCell(int,int,int,com.itextpdf.layout.renderer.CellRenderer[],com.itextpdf.layout.renderer.TableRenderer.OverflowRowsWrapper,int[],com.itextpdf.layout.renderer.TableRenderer[])",
      "1933": "TableRenderer::::enlargeCell(int,int,int,com.itextpdf.layout.renderer.CellRenderer[],com.itextpdf.layout.renderer.TableRenderer.OverflowRowsWrapper,int[],com.itextpdf.layout.renderer.TableRenderer[])",
      "1934": "TableRenderer::::enlargeCell(int,int,int,com.itextpdf.layout.renderer.CellRenderer[],com.itextpdf.layout.renderer.TableRenderer.OverflowRowsWrapper,int[],com.itextpdf.layout.renderer.TableRenderer[])",
      "1935": "TableRenderer::::enlargeCell(int,int,int,com.itextpdf.layout.renderer.CellRenderer[],com.itextpdf.layout.renderer.TableRenderer.OverflowRowsWrapper,int[],com.itextpdf.layout.renderer.TableRenderer[])",
      "1936": "TableRenderer::::enlargeCell(int,int,int,com.itextpdf.layout.renderer.CellRenderer[],com.itextpdf.layout.renderer.TableRenderer.OverflowRowsWrapper,int[],com.itextpdf.layout.renderer.TableRenderer[])",
      "1937": "TableRenderer::::enlargeCell(int,int,int,com.itextpdf.layout.renderer.CellRenderer[],com.itextpdf.layout.renderer.TableRenderer.OverflowRowsWrapper,int[],com.itextpdf.layout.renderer.TableRenderer[])",
      "1938": "TableRenderer::::enlargeCell(int,int,int,com.itextpdf.layout.renderer.CellRenderer[],com.itextpdf.layout.renderer.TableRenderer.OverflowRowsWrapper,int[],com.itextpdf.layout.renderer.TableRenderer[])",
      "1939": "TableRenderer::::enlargeCell(int,int,int,com.itextpdf.layout.renderer.CellRenderer[],com.itextpdf.layout.renderer.TableRenderer.OverflowRowsWrapper,int[],com.itextpdf.layout.renderer.TableRenderer[])",
      "1940": "TableRenderer::::enlargeCell(int,int,int,com.itextpdf.layout.renderer.CellRenderer[],com.itextpdf.layout.renderer.TableRenderer.OverflowRowsWrapper,int[],com.itextpdf.layout.renderer.TableRenderer[])",
      "1941": "TableRenderer::::enlargeCell(int,int,int,com.itextpdf.layout.renderer.CellRenderer[],com.itextpdf.layout.renderer.TableRenderer.OverflowRowsWrapper,int[],com.itextpdf.layout.renderer.TableRenderer[])",
      "1942": "TableRenderer::::enlargeCell(int,int,int,com.itextpdf.layout.renderer.CellRenderer[],com.itextpdf.layout.renderer.TableRenderer.OverflowRowsWrapper,int[],com.itextpdf.layout.renderer.TableRenderer[])",
      "1943": "TableRenderer::::enlargeCell(int,int,int,com.itextpdf.layout.renderer.CellRenderer[],com.itextpdf.layout.renderer.TableRenderer.OverflowRowsWrapper,int[],com.itextpdf.layout.renderer.TableRenderer[])",
      "1944": "TableRenderer::::enlargeCell(int,int,int,com.itextpdf.layout.renderer.CellRenderer[],com.itextpdf.layout.renderer.TableRenderer.OverflowRowsWrapper,int[],com.itextpdf.layout.renderer.TableRenderer[])",
      "1945": "TableRenderer::::enlargeCell(int,int,int,com.itextpdf.layout.renderer.CellRenderer[],com.itextpdf.layout.renderer.TableRenderer.OverflowRowsWrapper,int[],com.itextpdf.layout.renderer.TableRenderer[])",
      "1946": "TableRenderer::::enlargeCell(int,int,int,com.itextpdf.layout.renderer.CellRenderer[],com.itextpdf.layout.renderer.TableRenderer.OverflowRowsWrapper,int[],com.itextpdf.layout.renderer.TableRenderer[])",
      "1947": "TableRenderer::::enlargeCell(int,int,int,com.itextpdf.layout.renderer.CellRenderer[],com.itextpdf.layout.renderer.TableRenderer.OverflowRowsWrapper,int[],com.itextpdf.layout.renderer.TableRenderer[])",
      "1948": "TableRenderer::::enlargeCell(int,int,int,com.itextpdf.layout.renderer.CellRenderer[],com.itextpdf.layout.renderer.TableRenderer.OverflowRowsWrapper,int[],com.itextpdf.layout.renderer.TableRenderer[])",
      "1949": "TableRenderer::::enlargeCell(int,int,int,com.itextpdf.layout.renderer.CellRenderer[],com.itextpdf.layout.renderer.TableRenderer.OverflowRowsWrapper,int[],com.itextpdf.layout.renderer.TableRenderer[])",
      "1950": "TableRenderer::::enlargeCell(int,int,int,com.itextpdf.layout.renderer.CellRenderer[],com.itextpdf.layout.renderer.TableRenderer.OverflowRowsWrapper,int[],com.itextpdf.layout.renderer.TableRenderer[])",
      "1951": "TableRenderer::::enlargeCell(int,int,int,com.itextpdf.layout.renderer.CellRenderer[],com.itextpdf.layout.renderer.TableRenderer.OverflowRowsWrapper,int[],com.itextpdf.layout.renderer.TableRenderer[])",
      "1952": "TableRenderer::::enlargeCell(int,int,int,com.itextpdf.layout.renderer.CellRenderer[],com.itextpdf.layout.renderer.TableRenderer.OverflowRowsWrapper,int[],com.itextpdf.layout.renderer.TableRenderer[])",
      "1953": "TableRenderer::::enlargeCell(int,int,int,com.itextpdf.layout.renderer.CellRenderer[],com.itextpdf.layout.renderer.TableRenderer.OverflowRowsWrapper,int[],com.itextpdf.layout.renderer.TableRenderer[])",
      "1954": "TableRenderer::::enlargeCell(int,int,int,com.itextpdf.layout.renderer.CellRenderer[],com.itextpdf.layout.renderer.TableRenderer.OverflowRowsWrapper,int[],com.itextpdf.layout.renderer.TableRenderer[])",
      "1955": "TableRenderer::::enlargeCell(int,int,int,com.itextpdf.layout.renderer.CellRenderer[],com.itextpdf.layout.renderer.TableRenderer.OverflowRowsWrapper,int[],com.itextpdf.layout.renderer.TableRenderer[])",
      "1956": "TableRenderer::::enlargeCell(int,int,int,com.itextpdf.layout.renderer.CellRenderer[],com.itextpdf.layout.renderer.TableRenderer.OverflowRowsWrapper,int[],com.itextpdf.layout.renderer.TableRenderer[])"
    },
    "test_reverse_method_lines_dic": {
      "48": "TableRendererTest::::calculateColumnWidthsNotPointValue()",
      "49": "TableRendererTest::::calculateColumnWidthsNotPointValue()",
      "50": "TableRendererTest::::calculateColumnWidthsNotPointValue()",
      "51": "TableRendererTest::::calculateColumnWidthsNotPointValue()",
      "52": "TableRendererTest::::calculateColumnWidthsNotPointValue()",
      "53": "TableRendererTest::::calculateColumnWidthsNotPointValue()",
      "54": "TableRendererTest::::calculateColumnWidthsNotPointValue()",
      "55": "TableRendererTest::::calculateColumnWidthsNotPointValue()",
      "56": "TableRendererTest::::calculateColumnWidthsNotPointValue()",
      "57": "TableRendererTest::::calculateColumnWidthsNotPointValue()",
      "58": "TableRendererTest::::calculateColumnWidthsNotPointValue()",
      "59": "TableRendererTest::::calculateColumnWidthsNotPointValue()",
      "60": "TableRendererTest::::calculateColumnWidthsNotPointValue()",
      "61": "TableRendererTest::::calculateColumnWidthsNotPointValue()",
      "62": "TableRendererTest::::calculateColumnWidthsNotPointValue()",
      "63": "TableRendererTest::::calculateColumnWidthsNotPointValue()",
      "64": "TableRendererTest::::calculateColumnWidthsNotPointValue()",
      "65": "TableRendererTest::::calculateColumnWidthsNotPointValue()",
      "66": "TableRendererTest::::calculateColumnWidthsNotPointValue()",
      "67": "TableRendererTest::::calculateColumnWidthsNotPointValue()",
      "68": "TableRendererTest::::calculateColumnWidthsNotPointValue()",
      "69": "TableRendererTest::::calculateColumnWidthsNotPointValue()",
      "70": "TableRendererTest::::calculateColumnWidthsNotPointValue()",
      "71": "TableRendererTest::::calculateColumnWidthsNotPointValue()",
      "72": "TableRendererTest::::calculateColumnWidthsNotPointValue()",
      "73": "TableRendererTest::::calculateColumnWidthsNotPointValue()",
      "74": "TableRendererTest::::calculateColumnWidthsNotPointValue()",
      "75": "TableRendererTest::::calculateColumnWidthsNotPointValue()",
      "76": "TableRendererTest::::calculateColumnWidthsNotPointValue()",
      "77": "TableRendererTest::::calculateColumnWidthsNotPointValue()",
      "78": "TableRendererTest::::calculateColumnWidthsNotPointValue()",
      "79": "TableRendererTest::::calculateColumnWidthsNotPointValue()",
      "80": "TableRendererTest::::calculateColumnWidthsNotPointValue()",
      "81": "TableRendererTest::::calculateColumnWidthsNotPointValue()",
      "82": "TableRendererTest::::calculateColumnWidthsNotPointValue()",
      "83": "TableRendererTest::::calculateColumnWidthsNotPointValue()",
      "84": "TableRendererTest::::calculateColumnWidthsNotPointValue()",
      "86": "TableRendererTest::::testIsOriginalNonSplitRenderer()",
      "87": "TableRendererTest::::testIsOriginalNonSplitRenderer()",
      "88": "TableRendererTest::::testIsOriginalNonSplitRenderer()",
      "89": "TableRendererTest::::testIsOriginalNonSplitRenderer()",
      "90": "TableRendererTest::::testIsOriginalNonSplitRenderer()",
      "91": "TableRendererTest::::testIsOriginalNonSplitRenderer()",
      "92": "TableRendererTest::::testIsOriginalNonSplitRenderer()",
      "93": "TableRendererTest::::testIsOriginalNonSplitRenderer()",
      "94": "TableRendererTest::::testIsOriginalNonSplitRenderer()",
      "95": "TableRendererTest::::testIsOriginalNonSplitRenderer()",
      "96": "TableRendererTest::::testIsOriginalNonSplitRenderer()",
      "97": "TableRendererTest::::testIsOriginalNonSplitRenderer()",
      "98": "TableRendererTest::::testIsOriginalNonSplitRenderer()",
      "99": "TableRendererTest::::testIsOriginalNonSplitRenderer()"
    },
    "tests": [
      {
        "test_lines": [
          48,
          84
        ],
        "covered_lines": [
          65,
          74,
          76,
          77,
          78,
          93,
          94,
          95,
          111,
          114,
          115,
          116,
          120,
          195,
          1323,
          1326,
          1327,
          1328,
          1329,
          1330,
          1331,
          1332,
          1334,
          1335,
          1336,
          1337,
          1338,
          1339,
          1341,
          1342,
          1343,
          1344,
          1345,
          1347,
          1348,
          1733,
          1734,
          1735,
          1737,
          1842,
          1843,
          1844,
          1846,
          1959,
          1960,
          1961,
          1962,
          1963,
          1965,
          1966,
          1967,
          1968,
          1970,
          1971,
          1972,
          1973,
          1974,
          1976,
          1977,
          1978,
          1979,
          1981,
          1982,
          1983,
          1984
        ]
      },
      {
        "test_lines": [
          86,
          99
        ],
        "covered_lines": [
          65,
          74,
          76,
          77,
          78,
          82,
          83,
          93,
          94,
          95,
          111,
          114,
          115,
          116,
          120,
          1224,
          1225,
          1226,
          1227,
          1245,
          1249,
          1254,
          1255,
          1256,
          1257,
          1258,
          1259,
          1260,
          1261,
          1263,
          1264,
          1267,
          1268,
          1270,
          1274,
          1275,
          1276,
          1277,
          1278,
          1279,
          1280,
          1281,
          1282,
          1283,
          1284,
          1285,
          1287,
          1291,
          1292,
          1293,
          1294,
          1295,
          1296,
          1297,
          1298,
          1733,
          1734,
          1735,
          1737
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/itext-java/layout/src/main/java/com/itextpdf/layout/renderer/BlockRenderer.java": {
    "class_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.layout.renderer;\n",
      "\n",
      "import com.itextpdf.commons.utils.MessageFormatUtil;\n",
      "import com.itextpdf.io.logs.IoLogMessageConstant;\n",
      "import com.itextpdf.kernel.font.PdfFont;\n",
      "import com.itextpdf.kernel.geom.AffineTransform;\n",
      "import com.itextpdf.kernel.geom.Point;\n",
      "import com.itextpdf.kernel.geom.Rectangle;\n",
      "import com.itextpdf.kernel.pdf.PdfDocument;\n",
      "import com.itextpdf.kernel.pdf.PdfPage;\n",
      "import com.itextpdf.kernel.pdf.canvas.PdfCanvas;\n",
      "import com.itextpdf.kernel.pdf.tagutils.TagTreePointer;\n",
      "import com.itextpdf.layout.borders.Border;\n",
      "import com.itextpdf.layout.element.IElement;\n",
      "import com.itextpdf.layout.font.FontProvider;\n",
      "import com.itextpdf.layout.layout.LayoutArea;\n",
      "import com.itextpdf.layout.layout.LayoutContext;\n",
      "import com.itextpdf.layout.layout.LayoutResult;\n",
      "import com.itextpdf.layout.layout.MinMaxWidthLayoutResult;\n",
      "import com.itextpdf.layout.layout.PositionedLayoutContext;\n",
      "import com.itextpdf.layout.logs.LayoutLogMessageConstant;\n",
      "import com.itextpdf.layout.margincollapse.MarginsCollapseHandler;\n",
      "import com.itextpdf.layout.margincollapse.MarginsCollapseInfo;\n",
      "import com.itextpdf.layout.minmaxwidth.MinMaxWidth;\n",
      "import com.itextpdf.layout.minmaxwidth.MinMaxWidthUtils;\n",
      "import com.itextpdf.layout.properties.AreaBreakType;\n",
      "import com.itextpdf.layout.properties.ClearPropertyValue;\n",
      "import com.itextpdf.layout.properties.ContinuousContainer;\n",
      "import com.itextpdf.layout.properties.FloatPropertyValue;\n",
      "import com.itextpdf.layout.properties.OverflowPropertyValue;\n",
      "import com.itextpdf.layout.properties.Property;\n",
      "import com.itextpdf.layout.properties.UnitValue;\n",
      "import com.itextpdf.layout.properties.VerticalAlignment;\n",
      "import com.itextpdf.layout.tagging.LayoutTaggingHelper;\n",
      "\n",
      "import java.util.ArrayList;\n",
      "import java.util.Collections;\n",
      "import java.util.HashSet;\n",
      "import java.util.LinkedHashMap;\n",
      "import java.util.List;\n",
      "import java.util.Map;\n",
      "import java.util.Set;\n",
      "import org.slf4j.Logger;\n",
      "import org.slf4j.LoggerFactory;\n",
      "\n",
      "/**\n",
      " * Represents a renderer for block elements.\n",
      " */\n",
      "public abstract class BlockRenderer extends AbstractRenderer {\n",
      "\n",
      "    /**\n",
      "     * Creates a BlockRenderer from its corresponding layout object.\n",
      "     *\n",
      "     * @param modelElement the {@link IElement} which this object should manage\n",
      "     */\n",
      "    protected BlockRenderer(IElement modelElement) {\n",
      "        super(modelElement);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * {@inheritDoc}\n",
      "     */\n",
      "    @Override\n",
      "    public LayoutResult layout(LayoutContext layoutContext) {\n",
      "        this.isLastRendererForModelElement = true;\n",
      "        Map<Integer, IRenderer> waitingFloatsSplitRenderers = new LinkedHashMap<>();\n",
      "        List<IRenderer> waitingOverflowFloatRenderers = new ArrayList<>();\n",
      "        boolean floatOverflowedCompletely = false;\n",
      "        boolean wasHeightClipped = false;\n",
      "        boolean wasParentsHeightClipped = layoutContext.isClippedHeight();\n",
      "        int pageNumber = layoutContext.getArea().getPageNumber();\n",
      "\n",
      "        boolean isPositioned = isPositioned();\n",
      "\n",
      "        Rectangle parentBBox = layoutContext.getArea().getBBox().clone();\n",
      "\n",
      "        List<Rectangle> floatRendererAreas = layoutContext.getFloatRendererAreas();\n",
      "        FloatPropertyValue floatPropertyValue = this.<FloatPropertyValue>getProperty(Property.FLOAT);\n",
      "        Float rotation = this.getPropertyAsFloat(Property.ROTATION_ANGLE);\n",
      "\n",
      "        OverflowPropertyValue overflowX = this.<OverflowPropertyValue>getProperty(Property.OVERFLOW_X);\n",
      "\n",
      "        MarginsCollapseHandler marginsCollapseHandler = null;\n",
      "        boolean marginsCollapsingEnabled = Boolean.TRUE.equals(getPropertyAsBoolean(Property.COLLAPSING_MARGINS));\n",
      "        if (marginsCollapsingEnabled) {\n",
      "            marginsCollapseHandler = new MarginsCollapseHandler(this, layoutContext.getMarginsCollapseInfo());\n",
      "        }\n",
      "        Float blockWidth = retrieveWidth(parentBBox.getWidth());\n",
      "        if (rotation != null || isFixedLayout()) {\n",
      "            parentBBox.moveDown(AbstractRenderer.INF - parentBBox.getHeight()).setHeight(AbstractRenderer.INF);\n",
      "        }\n",
      "        if (rotation != null && !FloatingHelper.isRendererFloating(this, floatPropertyValue) &&\n",
      "                !(this instanceof FlexContainerRenderer)) {\n",
      "            blockWidth = RotationUtils.retrieveRotatedLayoutWidth(parentBBox.getWidth(), this);\n",
      "        }\n",
      "        boolean includeFloatsInOccupiedArea = BlockFormattingContextUtil.isRendererCreateBfc(this);\n",
      "        float clearHeightCorrection = FloatingHelper.calculateClearHeightCorrection(this, floatRendererAreas,\n",
      "                parentBBox);\n",
      "        FloatingHelper.applyClearance(parentBBox, marginsCollapseHandler, clearHeightCorrection,\n",
      "                FloatingHelper.isRendererFloating(this));\n",
      "        if (FloatingHelper.isRendererFloating(this, floatPropertyValue)) {\n",
      "            blockWidth = FloatingHelper.adjustFloatedBlockLayoutBox(this, parentBBox, blockWidth, floatRendererAreas,\n",
      "                    floatPropertyValue, overflowX);\n",
      "            floatRendererAreas = new ArrayList<>();\n",
      "        }\n",
      "        boolean wasHeightDecreased = clearHeightCorrection > 0 &&\n",
      "                (marginsCollapseHandler == null || FloatingHelper.isRendererFloating(this));\n",
      "        float bfcHeightCorrection = FloatingHelper.adjustBlockFormattingContextLayoutBox(this, floatRendererAreas,\n",
      "                parentBBox,\n",
      "                blockWidth == null ? 0 : (float) blockWidth, wasHeightDecreased ? 0 : clearHeightCorrection);\n",
      "        boolean isCellRenderer = this instanceof CellRenderer;\n",
      "        if (marginsCollapsingEnabled) {\n",
      "            marginsCollapseHandler.startMarginsCollapse(parentBBox);\n",
      "        }\n",
      "\n",
      "        ContinuousContainer.setupContinuousContainerIfNeeded(this);\n",
      "\n",
      "        Border[] borders = getBorders();\n",
      "        UnitValue[] paddings = getPaddings();\n",
      "\n",
      "        applyMargins(parentBBox, false);\n",
      "        applyBorderBox(parentBBox, borders, false);\n",
      "        if (isFixedLayout()) {\n",
      "            parentBBox.setX((float) this.getPropertyAsFloat(Property.LEFT));\n",
      "        }\n",
      "        applyPaddings(parentBBox, paddings, false);\n",
      "        Float blockMaxHeight = retrieveMaxHeight();\n",
      "        OverflowPropertyValue overflowY = (null == blockMaxHeight || blockMaxHeight > parentBBox.getHeight())\n",
      "                && !wasParentsHeightClipped\n",
      "                ? OverflowPropertyValue.FIT\n",
      "                : this.<OverflowPropertyValue>getProperty(Property.OVERFLOW_Y);\n",
      "        applyWidth(parentBBox, blockWidth, overflowX);\n",
      "        wasHeightClipped = applyMaxHeight(parentBBox, blockMaxHeight, marginsCollapseHandler, isCellRenderer, wasParentsHeightClipped, overflowY);\n",
      "\n",
      "        List<Rectangle> areas;\n",
      "        if (isPositioned) {\n",
      "            areas = Collections.singletonList(parentBBox);\n",
      "        } else {\n",
      "            areas = initElementAreas(new LayoutArea(pageNumber, parentBBox));\n",
      "        }\n",
      "\n",
      "        occupiedArea = new LayoutArea(pageNumber, new Rectangle(parentBBox.getX(), parentBBox.getY() + parentBBox.getHeight(), parentBBox.getWidth(), 0));\n",
      "        shrinkOccupiedAreaForAbsolutePosition();\n",
      "\n",
      "        TargetCounterHandler.addPageByID(this);\n",
      "\n",
      "        int currentAreaPos = 0;\n",
      "\n",
      "        Rectangle layoutBox = areas.get(0).clone();\n",
      "\n",
      "        // rectangles are compared by instances\n",
      "        Set<Rectangle> nonChildFloatingRendererAreas = new HashSet<>(floatRendererAreas);\n",
      "\n",
      "        // the first renderer (one of childRenderers or their children) to produce LayoutResult.NOTHING\n",
      "        IRenderer causeOfNothing = null;\n",
      "        boolean anythingPlaced = false;\n",
      "        // We have to remember initial FORCED_PLACEMENT property of this renderer to use it later\n",
      "        // to define if rotated content should be placed or not\n",
      "        final boolean initialForcePlacementForRotationAdjustments =\n",
      "                Boolean.TRUE.equals(getPropertyAsBoolean(Property.FORCED_PLACEMENT));\n",
      "        for (int childPos = 0; childPos < childRenderers.size(); childPos++) {\n",
      "            IRenderer childRenderer = childRenderers.get(childPos);\n",
      "            LayoutResult result;\n",
      "            childRenderer.setParent(this);\n",
      "            MarginsCollapseInfo childMarginsInfo = null;\n",
      "\n",
      "            if (floatOverflowedCompletely && FloatingHelper.isRendererFloating(childRenderer)) {\n",
      "                waitingFloatsSplitRenderers.put(childPos, null);\n",
      "                waitingOverflowFloatRenderers.add(childRenderer);\n",
      "                continue;\n",
      "            }\n",
      "\n",
      "            if (!waitingOverflowFloatRenderers.isEmpty() && FloatingHelper.isClearanceApplied(waitingOverflowFloatRenderers, childRenderer.<ClearPropertyValue>getProperty(Property.CLEAR))) {\n",
      "                if (FloatingHelper.isRendererFloating(childRenderer)) {\n",
      "                    waitingFloatsSplitRenderers.put(childPos, null);\n",
      "                    waitingOverflowFloatRenderers.add(childRenderer);\n",
      "                    floatOverflowedCompletely = true;\n",
      "                    continue;\n",
      "                }\n",
      "                if (marginsCollapsingEnabled && !isCellRenderer) {\n",
      "                    marginsCollapseHandler.endMarginsCollapse(layoutBox);\n",
      "                }\n",
      "\n",
      "                FloatingHelper.includeChildFloatsInOccupiedArea(floatRendererAreas, this, nonChildFloatingRendererAreas);\n",
      "                fixOccupiedAreaIfOverflowedX(overflowX, layoutBox);\n",
      "\n",
      "                result = new LayoutResult(LayoutResult.NOTHING, null, null, childRenderer);\n",
      "                boolean isKeepTogether = isKeepTogether(childRenderer);\n",
      "                int layoutResult = anythingPlaced && !isKeepTogether ? LayoutResult.PARTIAL : LayoutResult.NOTHING;\n",
      "                AbstractRenderer[] splitAndOverflowRenderers = createSplitAndOverflowRenderers(childPos, layoutResult, result, waitingFloatsSplitRenderers, waitingOverflowFloatRenderers);\n",
      "\n",
      "                AbstractRenderer splitRenderer = splitAndOverflowRenderers[0];\n",
      "                AbstractRenderer overflowRenderer = splitAndOverflowRenderers[1];\n",
      "\n",
      "                if (isKeepTogether) {\n",
      "                    splitRenderer = null;\n",
      "                    overflowRenderer.childRenderers.clear();\n",
      "                    overflowRenderer.childRenderers = new ArrayList<>(childRenderers);\n",
      "                }\n",
      "\n",
      "                updateHeightsOnSplit(wasHeightClipped, splitRenderer, overflowRenderer);\n",
      "                applyPaddings(occupiedArea.getBBox(), paddings, true);\n",
      "                applyBorderBox(occupiedArea.getBBox(), borders, true);\n",
      "                applyMargins(occupiedArea.getBBox(), true);\n",
      "\n",
      "                if (Boolean.TRUE.equals(getPropertyAsBoolean(Property.FORCED_PLACEMENT)) || wasHeightClipped) {\n",
      "                    LayoutArea editedArea = FloatingHelper.adjustResultOccupiedAreaForFloatAndClear(this, layoutContext.getFloatRendererAreas(), layoutContext.getArea().getBBox(), clearHeightCorrection, bfcHeightCorrection, marginsCollapsingEnabled);\n",
      "                    return new LayoutResult(LayoutResult.FULL, editedArea, splitRenderer, null, null);\n",
      "                } else {\n",
      "                    if (layoutResult != LayoutResult.NOTHING) {\n",
      "                        LayoutArea editedArea = FloatingHelper.adjustResultOccupiedAreaForFloatAndClear(this, layoutContext.getFloatRendererAreas(), layoutContext.getArea().getBBox(), clearHeightCorrection, bfcHeightCorrection, marginsCollapsingEnabled);\n",
      "                        return new LayoutResult(layoutResult, editedArea, splitRenderer, overflowRenderer, null).setAreaBreak(result.getAreaBreak());\n",
      "                    } else {\n",
      "                        floatRendererAreas.retainAll(nonChildFloatingRendererAreas);\n",
      "                        return new LayoutResult(layoutResult, null, null, overflowRenderer, result.getCauseOfNothing()).setAreaBreak(result.getAreaBreak());\n",
      "                    }\n",
      "                }\n",
      "            }\n",
      "\n",
      "            if (marginsCollapsingEnabled) {\n",
      "                childMarginsInfo = startChildMarginsHandling(childRenderer, layoutBox, marginsCollapseHandler);\n",
      "            }\n",
      "            Rectangle changedLayoutBox =\n",
      "                    recalculateLayoutBoxBeforeChildLayout(layoutBox, childRenderer, areas.get(0).clone());\n",
      "            while ((result = childRenderer.setParent(this).layout(new LayoutContext(\n",
      "                    new LayoutArea(pageNumber, changedLayoutBox),\n",
      "                    childMarginsInfo,\n",
      "                    floatRendererAreas,\n",
      "                    wasHeightClipped || wasParentsHeightClipped)))\n",
      "                    .getStatus() != LayoutResult.FULL) {\n",
      "\n",
      "                if (Boolean.TRUE.equals(getPropertyAsBoolean(Property.FILL_AVAILABLE_AREA_ON_SPLIT))\n",
      "                        || Boolean.TRUE.equals(getPropertyAsBoolean(Property.FILL_AVAILABLE_AREA))) {\n",
      "                    occupiedArea.setBBox(Rectangle.getCommonRectangle(occupiedArea.getBBox(), layoutBox));\n",
      "                } else if (result.getOccupiedArea() != null && result.getStatus() != LayoutResult.NOTHING) {\n",
      "                    recalculateOccupiedAreaAfterChildLayout(result.getOccupiedArea().getBBox(), blockMaxHeight);\n",
      "                    fixOccupiedAreaIfOverflowedX(overflowX, layoutBox);\n",
      "                }\n",
      "\n",
      "                if (marginsCollapsingEnabled && result.getStatus() != LayoutResult.NOTHING) {\n",
      "                    marginsCollapseHandler.endChildMarginsHandling(layoutBox);\n",
      "                }\n",
      "\n",
      "                if (FloatingHelper.isRendererFloating(childRenderer)) {\n",
      "                    // Check if current block is empty, kid returns nothing and neither floats nor content\n",
      "                    // were met on root area (e.g. page area) - return NOTHING, don't layout other kids,\n",
      "                    // expect FORCED_PLACEMENT to be set.\n",
      "                    boolean immediatelyReturnNothing = result.getStatus() == LayoutResult.NOTHING\n",
      "                            && !anythingPlaced\n",
      "                            && floatRendererAreas.isEmpty()\n",
      "                            && isFirstOnRootArea();\n",
      "                    if (!immediatelyReturnNothing) {\n",
      "                        waitingFloatsSplitRenderers.put(childPos, result.getStatus() == LayoutResult.PARTIAL ? result.getSplitRenderer() : null);\n",
      "                        waitingOverflowFloatRenderers.add(result.getOverflowRenderer());\n",
      "                        floatOverflowedCompletely = result.getStatus() == LayoutResult.NOTHING;\n",
      "                        break;\n",
      "                    }\n",
      "                }\n",
      "\n",
      "                if (marginsCollapsingEnabled) {\n",
      "                    marginsCollapseHandler.endMarginsCollapse(layoutBox);\n",
      "                }\n",
      "\n",
      "                // On page split, content will be drawn on next page, i.e. under all floats on this page\n",
      "                FloatingHelper.includeChildFloatsInOccupiedArea(floatRendererAreas, this, nonChildFloatingRendererAreas);\n",
      "                fixOccupiedAreaIfOverflowedX(overflowX, layoutBox);\n",
      "\n",
      "                if (result.getSplitRenderer() != null) {\n",
      "                    // TODO DEVSIX-6488 all elements should be layouted first in case when parent box should wrap around child boxes\n",
      "                    alignChildHorizontally(result.getSplitRenderer(), occupiedArea.getBBox());\n",
      "                }\n",
      "\n",
      "                // Save the first renderer to produce LayoutResult.NOTHING\n",
      "                if (null == causeOfNothing && null != result.getCauseOfNothing()) {\n",
      "                    causeOfNothing = result.getCauseOfNothing();\n",
      "                }\n",
      "\n",
      "                // have more areas\n",
      "                if (currentAreaPos + 1 < areas.size() && !(result.getAreaBreak() != null && result.getAreaBreak().getType() == AreaBreakType.NEXT_PAGE)) {\n",
      "                    if (result.getStatus() == LayoutResult.PARTIAL) {\n",
      "                        childRenderers.set(childPos, result.getSplitRenderer());\n",
      "                        childRenderers.add(childPos + 1, result.getOverflowRenderer());\n",
      "                    } else {\n",
      "                        if (result.getOverflowRenderer() != null) {\n",
      "                            childRenderers.set(childPos, result.getOverflowRenderer());\n",
      "                        } else {\n",
      "                            childRenderers.remove(childPos);\n",
      "                        }\n",
      "                        childPos--;\n",
      "                    }\n",
      "                    layoutBox = areas.get(++currentAreaPos).clone();\n",
      "                    break;\n",
      "                } else {\n",
      "                    final LayoutResult layoutResult = processNotFullChildResult(\n",
      "                            layoutContext, waitingFloatsSplitRenderers, waitingOverflowFloatRenderers, wasHeightClipped,\n",
      "                            floatRendererAreas, marginsCollapsingEnabled, clearHeightCorrection, borders, paddings,\n",
      "                            areas, currentAreaPos, layoutBox, nonChildFloatingRendererAreas, causeOfNothing,\n",
      "                            anythingPlaced, childPos, result);\n",
      "                    if (layoutResult == null) {\n",
      "                        layoutBox = areas.get(++currentAreaPos).clone();\n",
      "                        break;\n",
      "                    }\n",
      "                    if (stopLayoutingChildrenIfChildResultNotFull(layoutResult)) {\n",
      "                        return layoutResult;\n",
      "                    }\n",
      "                    result = layoutResult;\n",
      "                    break;\n",
      "                }\n",
      "            }\n",
      "            anythingPlaced = anythingPlaced || result.getStatus() != LayoutResult.NOTHING;\n",
      "            handleForcedPlacement(anythingPlaced);\n",
      "\n",
      "            // The second condition check (after &&) is needed only if margins collapsing is enabled\n",
      "            if (result.getOccupiedArea() != null && (!FloatingHelper.isRendererFloating(childRenderer) || includeFloatsInOccupiedArea)) {\n",
      "                recalculateOccupiedAreaAfterChildLayout(result.getOccupiedArea().getBBox(), blockMaxHeight);\n",
      "                fixOccupiedAreaIfOverflowedX(overflowX, layoutBox);\n",
      "            }\n",
      "            if (marginsCollapsingEnabled) {\n",
      "                marginsCollapseHandler.endChildMarginsHandling(layoutBox);\n",
      "            }\n",
      "            if (result.getStatus() == LayoutResult.FULL) {\n",
      "                decreaseLayoutBoxAfterChildPlacement(layoutBox, result, childRenderer);\n",
      "                if (childRenderer.getOccupiedArea() != null) {\n",
      "                    // TODO DEVSIX-6488 all elements should be layouted first in case when parent box should wrap around child boxes\n",
      "                    alignChildHorizontally(childRenderer, occupiedArea.getBBox());\n",
      "                }\n",
      "            }\n",
      "\n",
      "            // Save the first renderer to produce LayoutResult.NOTHING\n",
      "            if (null == causeOfNothing && null != result.getCauseOfNothing()) {\n",
      "                causeOfNothing = result.getCauseOfNothing();\n",
      "            }\n",
      "        }\n",
      "\n",
      "\n",
      "\n",
      "        if (includeFloatsInOccupiedArea) {\n",
      "            FloatingHelper.includeChildFloatsInOccupiedArea(floatRendererAreas, this, nonChildFloatingRendererAreas);\n",
      "            fixOccupiedAreaIfOverflowedX(overflowX, layoutBox);\n",
      "        }\n",
      "        if (wasHeightClipped) {\n",
      "            fixOccupiedAreaIfOverflowedY(overflowY, layoutBox);\n",
      "        }\n",
      "        if (marginsCollapsingEnabled) {\n",
      "            marginsCollapseHandler.endMarginsCollapse(layoutBox);\n",
      "        }\n",
      "\n",
      "        if (Boolean.TRUE.equals(getPropertyAsBoolean(Property.FILL_AVAILABLE_AREA))) {\n",
      "            occupiedArea.setBBox(Rectangle.getCommonRectangle(occupiedArea.getBBox(), layoutBox));\n",
      "        }\n",
      "\n",
      "        int layoutResult = LayoutResult.FULL;\n",
      "        boolean processOverflowedFloats = !waitingOverflowFloatRenderers.isEmpty() && !wasHeightClipped &&\n",
      "                !Boolean.TRUE.equals(getPropertyAsBoolean(Property.FORCED_PLACEMENT));\n",
      "\n",
      "        AbstractRenderer overflowRenderer = null;\n",
      "        if (!includeFloatsInOccupiedArea || !processOverflowedFloats) {\n",
      "            overflowRenderer = applyMinHeight(overflowY, layoutBox);\n",
      "        }\n",
      "\n",
      "        boolean minHeightOverflow = overflowRenderer != null;\n",
      "        if (minHeightOverflow && isKeepTogether()) {\n",
      "            floatRendererAreas.retainAll(nonChildFloatingRendererAreas);\n",
      "            return new LayoutResult(LayoutResult.NOTHING, null, null, this, this);\n",
      "        }\n",
      "\n",
      "        // in this case layout result need to be changed\n",
      "        if (overflowRenderer != null || processOverflowedFloats) {\n",
      "            layoutResult = !anythingPlaced && (!waitingOverflowFloatRenderers.isEmpty()\n",
      "                    || !isAnythingOccupied())\n",
      "                    // nothing was placed and there are some overflowed floats\n",
      "                    ? LayoutResult.NOTHING\n",
      "                    // either something was placed or (since there are no overflowed floats) there is overflow renderer\n",
      "                    // that indicates overflowed min_height\n",
      "                    : LayoutResult.PARTIAL;\n",
      "        }\n",
      "        if (processOverflowedFloats) {\n",
      "            if (overflowRenderer == null || layoutResult == LayoutResult.NOTHING) {\n",
      "                // if layout result is NOTHING - avoid possible usage of the overflowRenderer created\n",
      "                // for overflow of min_height with adjusted height properties\n",
      "                overflowRenderer = createOverflowRenderer(layoutResult);\n",
      "            }\n",
      "            overflowRenderer.getChildRenderers().addAll(waitingOverflowFloatRenderers);\n",
      "            if (layoutResult == LayoutResult.PARTIAL && !minHeightOverflow && !includeFloatsInOccupiedArea) {\n",
      "                FloatingHelper.removeParentArtifactsOnPageSplitIfOnlyFloatsOverflow(overflowRenderer);\n",
      "            }\n",
      "        }\n",
      "        AbstractRenderer splitRenderer = this;\n",
      "        if (waitingFloatsSplitRenderers.size() > 0 && layoutResult != LayoutResult.NOTHING) {\n",
      "            splitRenderer = createSplitRenderer(layoutResult);\n",
      "            splitRenderer.childRenderers = new ArrayList<>(childRenderers);\n",
      "            replaceSplitRendererKidFloats(waitingFloatsSplitRenderers, splitRenderer);\n",
      "\n",
      "            float usedHeight = occupiedArea.getBBox().getHeight();\n",
      "            if (!includeFloatsInOccupiedArea) {\n",
      "                Rectangle commonRectangle = Rectangle.getCommonRectangle(layoutBox, occupiedArea.getBBox());\n",
      "                usedHeight = commonRectangle.getHeight();\n",
      "            }\n",
      "            // this must be processed before margin/border/padding\n",
      "            updateHeightsOnSplit(usedHeight, wasHeightClipped, splitRenderer, overflowRenderer, includeFloatsInOccupiedArea);\n",
      "        }\n",
      "\n",
      "        if (positionedRenderers.size() > 0) {\n",
      "            for (IRenderer childPositionedRenderer : positionedRenderers) {\n",
      "                Rectangle fullBbox = occupiedArea.getBBox().clone();\n",
      "\n",
      "                // Use that value so that layout is independent of whether we are in the bottom of the page or in the\n",
      "                // top of the page\n",
      "                float layoutMinHeight = 1000;\n",
      "                fullBbox.moveDown(layoutMinHeight).setHeight(layoutMinHeight + fullBbox.getHeight());\n",
      "                LayoutArea parentArea = new LayoutArea(occupiedArea.getPageNumber(), occupiedArea.getBBox().clone());\n",
      "                applyPaddings(parentArea.getBBox(), paddings, true);\n",
      "\n",
      "                preparePositionedRendererAndAreaForLayout(childPositionedRenderer, fullBbox, parentArea.getBBox());\n",
      "                childPositionedRenderer.layout(\n",
      "                        new PositionedLayoutContext(new LayoutArea(occupiedArea.getPageNumber(), fullBbox),\n",
      "                                parentArea));\n",
      "            }\n",
      "        }\n",
      "\n",
      "        if (isPositioned) {\n",
      "            correctFixedLayout(layoutBox);\n",
      "        }\n",
      "        final ContinuousContainer continuousContainer = this.<ContinuousContainer>getProperty(\n",
      "                Property.TREAT_AS_CONTINUOUS_CONTAINER_RESULT);\n",
      "        if (continuousContainer != null && overflowRenderer == null) {\n",
      "            continuousContainer.reApplyProperties(this);\n",
      "            paddings = getPaddings();\n",
      "            borders = getBorders();\n",
      "        }\n",
      "\n",
      "        applyPaddings(occupiedArea.getBBox(), paddings, true);\n",
      "        applyBorderBox(occupiedArea.getBBox(), borders, true);\n",
      "        applyMargins(occupiedArea.getBBox(), true);\n",
      "\n",
      "        applyAbsolutePositionIfNeeded(layoutContext);\n",
      "\n",
      "        if (rotation != null) {\n",
      "            applyRotationLayout(layoutContext.getArea().getBBox().clone());\n",
      "            if (isNotFittingLayoutArea(layoutContext.getArea())) {\n",
      "                if (isNotFittingWidth(layoutContext.getArea()) && !isNotFittingHeight(layoutContext.getArea())) {\n",
      "                    LoggerFactory.getLogger(getClass())\n",
      "                            .warn(MessageFormatUtil.format(LayoutLogMessageConstant.ELEMENT_DOES_NOT_FIT_AREA,\n",
      "                                    \"It fits by height so it will be forced placed\"));\n",
      "                } else if (!initialForcePlacementForRotationAdjustments) {\n",
      "                    floatRendererAreas.retainAll(nonChildFloatingRendererAreas);\n",
      "                    return new MinMaxWidthLayoutResult(LayoutResult.NOTHING, null, null, this, this);\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "        applyVerticalAlignment();\n",
      "\n",
      "        FloatingHelper.removeFloatsAboveRendererBottom(floatRendererAreas, this);\n",
      "\n",
      "        ContinuousContainer.clearPropertiesFromOverFlowRenderer(overflowRenderer);\n",
      "\n",
      "        if (layoutResult != LayoutResult.NOTHING) {\n",
      "            LayoutArea editedArea = FloatingHelper.adjustResultOccupiedAreaForFloatAndClear(this,\n",
      "                    layoutContext.getFloatRendererAreas(), layoutContext.getArea().getBBox(), clearHeightCorrection,\n",
      "                    bfcHeightCorrection, marginsCollapsingEnabled);\n",
      "            return new LayoutResult(layoutResult, editedArea, splitRenderer, overflowRenderer, causeOfNothing);\n",
      "        } else {\n",
      "            if (positionedRenderers.size() > 0) {\n",
      "                overflowRenderer.positionedRenderers = new ArrayList<>(positionedRenderers);\n",
      "            }\n",
      "            floatRendererAreas.retainAll(nonChildFloatingRendererAreas);\n",
      "\n",
      "            return new LayoutResult(LayoutResult.NOTHING, null, null, overflowRenderer, causeOfNothing);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public void draw(DrawContext drawContext) {\n",
      "        Logger logger = LoggerFactory.getLogger(BlockRenderer.class);\n",
      "        if (occupiedArea == null) {\n",
      "            logger.error(MessageFormatUtil.format(IoLogMessageConstant.OCCUPIED_AREA_HAS_NOT_BEEN_INITIALIZED,\n",
      "                    \"Drawing won't be performed.\"));\n",
      "            return;\n",
      "        }\n",
      "\n",
      "        boolean isTagged = drawContext.isTaggingEnabled();\n",
      "        LayoutTaggingHelper taggingHelper = null;\n",
      "        if (isTagged) {\n",
      "            taggingHelper = this.<LayoutTaggingHelper>getProperty(Property.TAGGING_HELPER);\n",
      "            if (taggingHelper == null) {\n",
      "                isTagged = false;\n",
      "            } else {\n",
      "                TagTreePointer tagPointer = taggingHelper.useAutoTaggingPointerAndRememberItsPosition(this);\n",
      "                if (taggingHelper.createTag(this, tagPointer)) {\n",
      "                    tagPointer.getProperties()\n",
      "                            .addAttributes(0, AccessibleAttributesApplier.getListAttributes(this, tagPointer))\n",
      "                            .addAttributes(0, AccessibleAttributesApplier.getTableAttributes(this, tagPointer))\n",
      "                            .addAttributes(0, AccessibleAttributesApplier.getLayoutAttributes(this, tagPointer));\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "\n",
      "        beginTransformationIfApplied(drawContext.getCanvas());\n",
      "        applyDestinationsAndAnnotation(drawContext);\n",
      "\n",
      "        boolean isRelativePosition = isRelativePosition();\n",
      "        if (isRelativePosition) {\n",
      "            applyRelativePositioningTranslation(false);\n",
      "        }\n",
      "\n",
      "        beginElementOpacityApplying(drawContext);\n",
      "        beginRotationIfApplied(drawContext.getCanvas());\n",
      "\n",
      "        boolean overflowXHidden = isOverflowProperty(OverflowPropertyValue.HIDDEN, Property.OVERFLOW_X);\n",
      "        boolean overflowYHidden = isOverflowProperty(OverflowPropertyValue.HIDDEN, Property.OVERFLOW_Y);\n",
      "        boolean processOverflow = overflowXHidden || overflowYHidden;\n",
      "\n",
      "        drawBackground(drawContext);\n",
      "        drawBorder(drawContext);\n",
      "\n",
      "        addMarkedContent(drawContext, true);\n",
      "        if (processOverflow) {\n",
      "            drawContext.getCanvas().saveState();\n",
      "            int pageNumber = occupiedArea.getPageNumber();\n",
      "            Rectangle clippedArea;\n",
      "            if (pageNumber < 1 || pageNumber > drawContext.getDocument().getNumberOfPages()) {\n",
      "                clippedArea = new Rectangle(-INF / 2 , -INF / 2, INF, INF);\n",
      "            } else {\n",
      "                PdfPage page = drawContext.getDocument().getPage(pageNumber);\n",
      "                // TODO DEVSIX-1655 This check is necessary because, in some cases, our renderer's hierarchy may contain\n",
      "                //  a renderer from the different page that was already flushed\n",
      "                if (page.isFlushed()) {\n",
      "                    logger.error(MessageFormatUtil.format(\n",
      "                            IoLogMessageConstant.PAGE_WAS_FLUSHED_ACTION_WILL_NOT_BE_PERFORMED,\n",
      "                            \"area clipping\"));\n",
      "                    clippedArea = new Rectangle(-INF / 2 , -INF / 2, INF, INF);\n",
      "                } else {\n",
      "                    clippedArea = page.getPageSize();\n",
      "                }\n",
      "            }\n",
      "            Rectangle area = getBorderAreaBBox();\n",
      "            if (overflowXHidden) {\n",
      "                clippedArea.setX(area.getX()).setWidth(area.getWidth());\n",
      "            }\n",
      "            if (overflowYHidden) {\n",
      "                clippedArea.setY(area.getY()).setHeight(area.getHeight());\n",
      "            }\n",
      "            drawContext.getCanvas().rectangle(clippedArea).clip().endPath();\n",
      "        }\n",
      "\n",
      "        drawChildren(drawContext);\n",
      "        addMarkedContent(drawContext, false);\n",
      "        drawPositionedChildren(drawContext);\n",
      "\n",
      "        if (processOverflow) {\n",
      "            drawContext.getCanvas().restoreState();\n",
      "        }\n",
      "\n",
      "        endRotationIfApplied(drawContext.getCanvas());\n",
      "        endElementOpacityApplying(drawContext);\n",
      "\n",
      "        if (isRelativePosition) {\n",
      "            applyRelativePositioningTranslation(true);\n",
      "        }\n",
      "\n",
      "        if (isTagged) {\n",
      "            if (isLastRendererForModelElement) {\n",
      "                taggingHelper.finishTaggingHint(this);\n",
      "            }\n",
      "            taggingHelper.restoreAutoTaggingPointerPosition(this);\n",
      "        }\n",
      "\n",
      "        flushed = true;\n",
      "        endTransformationIfApplied(drawContext.getCanvas());\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public Rectangle getOccupiedAreaBBox() {\n",
      "        Rectangle bBox = occupiedArea.getBBox().clone();\n",
      "        Float rotationAngle = this.<Float>getProperty(Property.ROTATION_ANGLE);\n",
      "        if (rotationAngle != null) {\n",
      "            if (!hasOwnProperty(Property.ROTATION_INITIAL_WIDTH) || !hasOwnProperty(Property.ROTATION_INITIAL_HEIGHT)) {\n",
      "                Logger logger = LoggerFactory.getLogger(BlockRenderer.class);\n",
      "                logger.error(\n",
      "                        MessageFormatUtil.format(IoLogMessageConstant.ROTATION_WAS_NOT_CORRECTLY_PROCESSED_FOR_RENDERER,\n",
      "                                getClass().getSimpleName()));\n",
      "            } else {\n",
      "                bBox.setWidth((float) this.getPropertyAsFloat(Property.ROTATION_INITIAL_WIDTH));\n",
      "                bBox.setHeight((float) this.getPropertyAsFloat(Property.ROTATION_INITIAL_HEIGHT));\n",
      "            }\n",
      "        }\n",
      "        return bBox;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Creates a split renderer.\n",
      "     *\n",
      "     * @param layoutResult the result of content layouting\n",
      "     *\n",
      "     * @return a new {@link AbstractRenderer} instance\n",
      "     */\n",
      "    protected AbstractRenderer createSplitRenderer(int layoutResult) {\n",
      "        AbstractRenderer splitRenderer = (AbstractRenderer) getNextRenderer();\n",
      "        splitRenderer.parent = parent;\n",
      "        splitRenderer.modelElement = modelElement;\n",
      "        splitRenderer.occupiedArea = occupiedArea;\n",
      "        splitRenderer.isLastRendererForModelElement = false;\n",
      "        splitRenderer.addAllProperties(getOwnProperties());\n",
      "        return splitRenderer;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Creates an overflow renderer.\n",
      "     *\n",
      "     * @param layoutResult the result of content layouting\n",
      "     *\n",
      "     * @return a new {@link AbstractRenderer} instance\n",
      "     */\n",
      "    protected AbstractRenderer createOverflowRenderer(int layoutResult) {\n",
      "        AbstractRenderer overflowRenderer = (AbstractRenderer) getNextRenderer();\n",
      "        overflowRenderer.parent = parent;\n",
      "        overflowRenderer.modelElement = modelElement;\n",
      "        overflowRenderer.addAllProperties(getOwnProperties());\n",
      "        return overflowRenderer;\n",
      "    }\n",
      "\n",
      "    void recalculateOccupiedAreaAfterChildLayout(Rectangle resultBBox, Float blockMaxHeight) {\n",
      "        occupiedArea.setBBox(Rectangle.getCommonRectangle(occupiedArea.getBBox(), resultBBox));\n",
      "    }\n",
      "    \n",
      "    MarginsCollapseInfo startChildMarginsHandling(IRenderer childRenderer,\n",
      "                                                  Rectangle layoutBox, MarginsCollapseHandler marginsCollapseHandler) {\n",
      "        return marginsCollapseHandler.startChildMarginsHandling(childRenderer, layoutBox);\n",
      "    }\n",
      "\n",
      "    Rectangle recalculateLayoutBoxBeforeChildLayout(Rectangle layoutBox,\n",
      "                                                    IRenderer childRenderer, Rectangle initialLayoutBox) {\n",
      "        return layoutBox;\n",
      "    }\n",
      "\n",
      "    AbstractRenderer[] createSplitAndOverflowRenderers(int childPos, int layoutStatus, LayoutResult childResult,\n",
      "                                                       Map<Integer, IRenderer> waitingFloatsSplitRenderers,\n",
      "                                                       List<IRenderer> waitingOverflowFloatRenderers) {\n",
      "        AbstractRenderer splitRenderer = createSplitRenderer(layoutStatus);\n",
      "        splitRenderer.childRenderers = new ArrayList<>(childRenderers.subList(0, childPos));\n",
      "        if (childResult.getStatus() == LayoutResult.PARTIAL && childResult.getSplitRenderer() != null) {\n",
      "            splitRenderer.childRenderers.add(childResult.getSplitRenderer());\n",
      "        }\n",
      "\n",
      "        replaceSplitRendererKidFloats(waitingFloatsSplitRenderers, splitRenderer);\n",
      "        for (IRenderer renderer : splitRenderer.childRenderers) {\n",
      "            renderer.setParent(splitRenderer);\n",
      "        }\n",
      "\n",
      "        AbstractRenderer overflowRenderer = createOverflowRenderer(layoutStatus);\n",
      "        overflowRenderer.childRenderers.addAll(waitingOverflowFloatRenderers);\n",
      "        if (childResult.getOverflowRenderer() != null) {\n",
      "            overflowRenderer.addChildRenderer(childResult.getOverflowRenderer());\n",
      "        }\n",
      "        overflowRenderer.childRenderers.addAll(childRenderers.subList(childPos + 1, childRenderers.size()));\n",
      "\n",
      "        ContinuousContainer.clearPropertiesFromOverFlowRenderer(overflowRenderer);\n",
      "\n",
      "        if (childResult.getStatus() == LayoutResult.PARTIAL) {\n",
      "            // Apply forced placement only on split renderer\n",
      "            overflowRenderer.deleteOwnProperty(Property.FORCED_PLACEMENT);\n",
      "        }\n",
      "\n",
      "        return new AbstractRenderer[] {splitRenderer, overflowRenderer};\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * This method applies vertical alignment for the occupied area\n",
      "     * of the renderer and its children renderers.\n",
      "     */\n",
      "    protected void applyVerticalAlignment() {\n",
      "        VerticalAlignment verticalAlignment = this.<VerticalAlignment>getProperty(Property.VERTICAL_ALIGNMENT);\n",
      "        if (verticalAlignment == null || verticalAlignment == VerticalAlignment.TOP || childRenderers.isEmpty()) {\n",
      "            return;\n",
      "        }\n",
      "\n",
      "        float lowestChildBottom = Float.MAX_VALUE;\n",
      "        if (FloatingHelper.isRendererFloating(this) || this instanceof CellRenderer) {\n",
      "            // include floats in vertical alignment\n",
      "            for (IRenderer child : childRenderers) {\n",
      "                if (child.getOccupiedArea() != null &&\n",
      "                        child.getOccupiedArea().getBBox().getBottom() < lowestChildBottom) {\n",
      "                    lowestChildBottom = child.getOccupiedArea().getBBox().getBottom();\n",
      "                }\n",
      "            }\n",
      "        } else {\n",
      "            int lastChildIndex = childRenderers.size() - 1;\n",
      "            while (lastChildIndex >= 0) {\n",
      "                IRenderer child = childRenderers.get(lastChildIndex--);\n",
      "                if (!FloatingHelper.isRendererFloating(child) && child.getOccupiedArea() != null) {\n",
      "                    lowestChildBottom = child.getOccupiedArea().getBBox().getBottom();\n",
      "                    break;\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "\n",
      "        if (lowestChildBottom == Float.MAX_VALUE) {\n",
      "            return;\n",
      "        }\n",
      "\n",
      "        float deltaY = lowestChildBottom - getInnerAreaBBox().getY();\n",
      "        if (deltaY < 0) {\n",
      "            return;\n",
      "        }\n",
      "        switch (verticalAlignment) {\n",
      "            case BOTTOM:\n",
      "                for (IRenderer child : childRenderers) {\n",
      "                    child.move(0, -deltaY);\n",
      "                }\n",
      "                break;\n",
      "            case MIDDLE:\n",
      "                for (IRenderer child : childRenderers) {\n",
      "                    child.move(0, -deltaY / 2);\n",
      "                }\n",
      "                break;\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * This method rotates content of the renderer and\n",
      "     * calculates correct occupied area for the rotated element.\n",
      "     *\n",
      "     * @param layoutBox a {@link Rectangle}\n",
      "     */\n",
      "    protected void applyRotationLayout(Rectangle layoutBox) {\n",
      "        float angle = (float) this.getPropertyAsFloat(Property.ROTATION_ANGLE);\n",
      "\n",
      "        float x = occupiedArea.getBBox().getX();\n",
      "        float y = occupiedArea.getBBox().getY();\n",
      "        float height = occupiedArea.getBBox().getHeight();\n",
      "        float width = occupiedArea.getBBox().getWidth();\n",
      "\n",
      "        setProperty(Property.ROTATION_INITIAL_WIDTH, width);\n",
      "        setProperty(Property.ROTATION_INITIAL_HEIGHT, height);\n",
      "\n",
      "        AffineTransform rotationTransform = new AffineTransform();\n",
      "\n",
      "        // here we calculate and set the actual occupied area of the rotated content\n",
      "        if (isPositioned()) {\n",
      "            Float rotationPointX = this.getPropertyAsFloat(Property.ROTATION_POINT_X);\n",
      "            Float rotationPointY = this.getPropertyAsFloat(Property.ROTATION_POINT_Y);\n",
      "\n",
      "            if (rotationPointX == null || rotationPointY == null) {\n",
      "                // if rotation point was not specified, the most bottom-left point is used\n",
      "                rotationPointX = x;\n",
      "                rotationPointY = y;\n",
      "            }\n",
      "\n",
      "            // transforms apply from bottom to top\n",
      "            // move point back at place\n",
      "            rotationTransform.translate((float) rotationPointX, (float) rotationPointY);\n",
      "\n",
      "            // rotate\n",
      "            rotationTransform.rotate(angle);\n",
      "\n",
      "            // move rotation point to origin\n",
      "            rotationTransform.translate((float) -rotationPointX, (float) -rotationPointY);\n",
      "\n",
      "            List<Point> rotatedPoints = transformPoints(rectangleToPointsList(occupiedArea.getBBox()), rotationTransform);\n",
      "            Rectangle newBBox = calculateBBox(rotatedPoints);\n",
      "\n",
      "            // make occupied area be of size and position of actual content\n",
      "            occupiedArea.getBBox().setWidth(newBBox.getWidth());\n",
      "            occupiedArea.getBBox().setHeight(newBBox.getHeight());\n",
      "            float occupiedAreaShiftX = newBBox.getX() - x;\n",
      "            float occupiedAreaShiftY = newBBox.getY() - y;\n",
      "            move(occupiedAreaShiftX, occupiedAreaShiftY);\n",
      "        } else {\n",
      "            rotationTransform = AffineTransform.getRotateInstance(angle);\n",
      "            List<Point> rotatedPoints = transformPoints(rectangleToPointsList(occupiedArea.getBBox()), rotationTransform);\n",
      "            float[] shift = calculateShiftToPositionBBoxOfPointsAt(x, y + height, rotatedPoints);\n",
      "\n",
      "            for (Point point : rotatedPoints) {\n",
      "                point.setLocation(point.getX() + shift[0], point.getY() + shift[1]);\n",
      "            }\n",
      "\n",
      "            Rectangle newBBox = calculateBBox(rotatedPoints);\n",
      "\n",
      "            occupiedArea.getBBox().setWidth(newBBox.getWidth());\n",
      "            occupiedArea.getBBox().setHeight(newBBox.getHeight());\n",
      "\n",
      "            float heightDiff = height - newBBox.getHeight();\n",
      "            move(0, heightDiff);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * This method creates {@link AffineTransform} instance that could be used\n",
      "     * to rotate content inside the occupied area. Be aware that it should be used only after\n",
      "     * layout rendering is finished and correct occupied area for the rotated element is calculated.\n",
      "     *\n",
      "     * @return {@link AffineTransform} that rotates the content and places it inside occupied area.\n",
      "     */\n",
      "    protected AffineTransform createRotationTransformInsideOccupiedArea() {\n",
      "        Float angle = this.<Float>getProperty(Property.ROTATION_ANGLE);\n",
      "        AffineTransform rotationTransform = AffineTransform.getRotateInstance((float) angle);\n",
      "\n",
      "        Rectangle contentBox = this.getOccupiedAreaBBox();\n",
      "        List<Point> rotatedContentBoxPoints = transformPoints(rectangleToPointsList(contentBox), rotationTransform);\n",
      "        // Occupied area for rotated elements is already calculated on layout in such way to enclose rotated content;\n",
      "        // therefore we can simply rotate content as is and then shift it to the occupied area.\n",
      "        float[] shift = calculateShiftToPositionBBoxOfPointsAt(occupiedArea.getBBox().getLeft(), occupiedArea.getBBox().getTop(), rotatedContentBoxPoints);\n",
      "        rotationTransform.preConcatenate(AffineTransform.getTranslateInstance(shift[0], shift[1]));\n",
      "\n",
      "        return rotationTransform;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * This method starts rotation for the renderer if rotation angle property is specified.\n",
      "     *\n",
      "     * @param canvas the {@link PdfCanvas} to draw on\n",
      "     */\n",
      "    protected void beginRotationIfApplied(PdfCanvas canvas) {\n",
      "        Float angle = this.getPropertyAsFloat(Property.ROTATION_ANGLE);\n",
      "        if (angle != null) {\n",
      "            if (!hasOwnProperty(Property.ROTATION_INITIAL_HEIGHT)) {\n",
      "                Logger logger = LoggerFactory.getLogger(BlockRenderer.class);\n",
      "                logger.error(\n",
      "                        MessageFormatUtil.format(IoLogMessageConstant.ROTATION_WAS_NOT_CORRECTLY_PROCESSED_FOR_RENDERER,\n",
      "                                getClass().getSimpleName()));\n",
      "            } else {\n",
      "                AffineTransform transform = createRotationTransformInsideOccupiedArea();\n",
      "                canvas.saveState().concatMatrix(transform);\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * This method ends rotation for the renderer if applied.\n",
      "     *\n",
      "     * @param canvas the {@link PdfCanvas} to draw on\n",
      "     */\n",
      "    protected void endRotationIfApplied(PdfCanvas canvas) {\n",
      "        Float angle = this.getPropertyAsFloat(Property.ROTATION_ANGLE);\n",
      "        if (angle != null && hasOwnProperty(Property.ROTATION_INITIAL_HEIGHT)) {\n",
      "            canvas.restoreState();\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Get the font set in properties, if it is not set, then resolves the first {@link PdfFont} from\n",
      "     * {@link FontProvider}.\n",
      "     * If {@link FontProvider} is not set, then returns null.\n",
      "     *\n",
      "     * @param pdfDocument the {@link PdfDocument} to get default font from.\n",
      "     *\n",
      "     * @return the font or null if it is not set and {@link FontProvider} is not set.\n",
      "     */\n",
      "    protected PdfFont getResolvedFont(PdfDocument pdfDocument) {\n",
      "        final Object retrievedFont = this.<Object>getProperty(Property.FONT);\n",
      "        if (retrievedFont instanceof PdfFont) {\n",
      "            return (PdfFont) retrievedFont;\n",
      "        }\n",
      "        if (this.<FontProvider>getProperty(Property.FONT_PROVIDER) != null && retrievedFont != null) {\n",
      "            return resolveFirstPdfFont();\n",
      "        }\n",
      "        if (pdfDocument != null) {\n",
      "            return pdfDocument.getDefaultFont();\n",
      "        }\n",
      "        return null;\n",
      "    }\n",
      "\n",
      "    boolean stopLayoutingChildrenIfChildResultNotFull(LayoutResult returnResult) {\n",
      "        return true;\n",
      "    }\n",
      "\n",
      "    LayoutResult processNotFullChildResult(LayoutContext layoutContext,\n",
      "                                           Map<Integer, IRenderer> waitingFloatsSplitRenderers,\n",
      "                                           List<IRenderer> waitingOverflowFloatRenderers, boolean wasHeightClipped,\n",
      "                                           List<Rectangle> floatRendererAreas, boolean marginsCollapsingEnabled,\n",
      "                                           float clearHeightCorrection, Border[] borders, UnitValue[] paddings,\n",
      "                                           List<Rectangle> areas, int currentAreaPos, Rectangle layoutBox,\n",
      "                                           Set<Rectangle> nonChildFloatingRendererAreas, IRenderer causeOfNothing,\n",
      "                                           boolean anythingPlaced, int childPos, LayoutResult result) {\n",
      "        if (result.getStatus() == LayoutResult.PARTIAL) {\n",
      "            if (currentAreaPos + 1 == areas.size()) {\n",
      "                AbstractRenderer[] splitAndOverflowRenderers = createSplitAndOverflowRenderers(childPos,\n",
      "                        LayoutResult.PARTIAL, result, waitingFloatsSplitRenderers, waitingOverflowFloatRenderers);\n",
      "\n",
      "                AbstractRenderer splitRenderer = splitAndOverflowRenderers[0];\n",
      "                AbstractRenderer overflowRenderer = splitAndOverflowRenderers[1];\n",
      "                overflowRenderer.deleteOwnProperty(Property.FORCED_PLACEMENT);\n",
      "\n",
      "                updateHeightsOnSplit(wasHeightClipped, splitRenderer, overflowRenderer);\n",
      "                applyPaddings(occupiedArea.getBBox(), paddings, true);\n",
      "                applyBorderBox(occupiedArea.getBBox(), borders, true);\n",
      "                applyMargins(occupiedArea.getBBox(), true);\n",
      "\n",
      "                correctFixedLayout(layoutBox);\n",
      "\n",
      "                LayoutArea editedArea = FloatingHelper.adjustResultOccupiedAreaForFloatAndClear(this, layoutContext.getFloatRendererAreas(), layoutContext.getArea().getBBox(), clearHeightCorrection, marginsCollapsingEnabled);\n",
      "                if (wasHeightClipped) {\n",
      "                    return new LayoutResult(LayoutResult.FULL, editedArea, splitRenderer, null);\n",
      "                } else {\n",
      "                    return new LayoutResult(LayoutResult.PARTIAL, editedArea, splitRenderer, overflowRenderer, causeOfNothing);\n",
      "                }\n",
      "            } else {\n",
      "                childRenderers.set(childPos, result.getSplitRenderer());\n",
      "                childRenderers.add(childPos + 1, result.getOverflowRenderer());\n",
      "                return null;\n",
      "            }\n",
      "        } else if (result.getStatus() == LayoutResult.NOTHING) {\n",
      "            boolean keepTogether = isKeepTogether(causeOfNothing);\n",
      "            int layoutResult = anythingPlaced && !keepTogether ? LayoutResult.PARTIAL : LayoutResult.NOTHING;\n",
      "\n",
      "            AbstractRenderer[] splitAndOverflowRenderers = createSplitAndOverflowRenderers(childPos, layoutResult,\n",
      "                    result, waitingFloatsSplitRenderers, waitingOverflowFloatRenderers);\n",
      "\n",
      "            AbstractRenderer splitRenderer = splitAndOverflowRenderers[0];\n",
      "            AbstractRenderer overflowRenderer = splitAndOverflowRenderers[1];\n",
      "\n",
      "            if (isRelativePosition() && positionedRenderers.size() > 0) {\n",
      "                overflowRenderer.positionedRenderers = new ArrayList<>(positionedRenderers);\n",
      "            }\n",
      "\n",
      "            updateHeightsOnSplit(wasHeightClipped, splitRenderer, overflowRenderer);\n",
      "\n",
      "            if (keepTogether) {\n",
      "                splitRenderer = null;\n",
      "                overflowRenderer.childRenderers.clear();\n",
      "                overflowRenderer.addAllChildRenderers(childRenderers);\n",
      "            }\n",
      "\n",
      "            correctFixedLayout(layoutBox);\n",
      "\n",
      "            applyPaddings(occupiedArea.getBBox(), paddings, true);\n",
      "            applyBorderBox(occupiedArea.getBBox(), borders, true);\n",
      "            applyMargins(occupiedArea.getBBox(), true);\n",
      "\n",
      "            applyAbsolutePositionIfNeeded(layoutContext);\n",
      "\n",
      "            if (Boolean.TRUE.equals(getPropertyAsBoolean(Property.FORCED_PLACEMENT)) || wasHeightClipped) {\n",
      "                LayoutArea editedArea = FloatingHelper.adjustResultOccupiedAreaForFloatAndClear(this, layoutContext.getFloatRendererAreas(), layoutContext.getArea().getBBox(), clearHeightCorrection, marginsCollapsingEnabled);\n",
      "                return new LayoutResult(LayoutResult.FULL, editedArea, splitRenderer, null, null);\n",
      "            } else {\n",
      "                if (layoutResult != LayoutResult.NOTHING) {\n",
      "                    LayoutArea editedArea = FloatingHelper.adjustResultOccupiedAreaForFloatAndClear(this, layoutContext.getFloatRendererAreas(), layoutContext.getArea().getBBox(), clearHeightCorrection, marginsCollapsingEnabled);\n",
      "                    return new LayoutResult(layoutResult, editedArea, splitRenderer, overflowRenderer, null).setAreaBreak(result.getAreaBreak());\n",
      "                } else {\n",
      "                    floatRendererAreas.retainAll(nonChildFloatingRendererAreas);\n",
      "                    return new LayoutResult(layoutResult, null, null, overflowRenderer, result.getCauseOfNothing()).setAreaBreak(result.getAreaBreak());\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "        return null;\n",
      "    }\n",
      "\n",
      "    void decreaseLayoutBoxAfterChildPlacement(Rectangle layoutBox, LayoutResult result, IRenderer childRenderer) {\n",
      "        layoutBox.setHeight(result.getOccupiedArea().getBBox().getY() - layoutBox.getY());\n",
      "    }\n",
      "\n",
      "    void correctFixedLayout(Rectangle layoutBox) {\n",
      "        if (isFixedLayout()) {\n",
      "            float y = (float) this.getPropertyAsFloat(Property.BOTTOM);\n",
      "            move(0, y - occupiedArea.getBBox().getY());\n",
      "        }\n",
      "    }\n",
      "\n",
      "    void applyWidth(Rectangle parentBBox, Float blockWidth, OverflowPropertyValue overflowX) {\n",
      "        // maxWidth has already taken in attention in blockWidth,\n",
      "        // therefore only `parentBBox > minWidth` needs to be checked.\n",
      "        Float rotation = this.getPropertyAsFloat(Property.ROTATION_ANGLE);\n",
      "\n",
      "        if (blockWidth != null && (\n",
      "                        blockWidth < parentBBox.getWidth() ||\n",
      "                        isPositioned() ||\n",
      "                        rotation != null ||\n",
      "                        (!isOverflowFit(overflowX)))) {\n",
      "            parentBBox.setWidth((float) blockWidth);\n",
      "        } else {\n",
      "            Float minWidth = retrieveMinWidth(parentBBox.getWidth());\n",
      "            //Shall we check overflow-x here?\n",
      "            if (minWidth != null && minWidth > parentBBox.getWidth()) {\n",
      "                parentBBox.setWidth((float) minWidth);\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    boolean applyMaxHeight(Rectangle parentBBox, Float blockMaxHeight, MarginsCollapseHandler marginsCollapseHandler,\n",
      "                           boolean isCellRenderer, boolean wasParentsHeightClipped, OverflowPropertyValue overflowY) {\n",
      "        if (null == blockMaxHeight || (blockMaxHeight >= parentBBox.getHeight() && (isOverflowFit(overflowY)))) {\n",
      "            return false;\n",
      "        }\n",
      "        boolean wasHeightClipped = false;\n",
      "        if (blockMaxHeight <= parentBBox.getHeight()) {\n",
      "            wasHeightClipped = true;\n",
      "        }\n",
      "        float heightDelta = parentBBox.getHeight() - (float) blockMaxHeight;\n",
      "        if (marginsCollapseHandler != null && !isCellRenderer) {\n",
      "            marginsCollapseHandler.processFixedHeightAdjustment(heightDelta);\n",
      "        }\n",
      "        parentBBox.moveUp(heightDelta).setHeight((float) blockMaxHeight);\n",
      "        return wasHeightClipped;\n",
      "    }\n",
      "\n",
      "    AbstractRenderer applyMinHeight(OverflowPropertyValue overflowY, Rectangle layoutBox) {\n",
      "        AbstractRenderer overflowRenderer = null;\n",
      "        Float blockMinHeight = retrieveMinHeight();\n",
      "        if (!Boolean.TRUE.equals(getPropertyAsBoolean(Property.FORCED_PLACEMENT)) && null != blockMinHeight && blockMinHeight > occupiedArea.getBBox().getHeight()) {\n",
      "            float blockBottom = occupiedArea.getBBox().getBottom() - ((float) blockMinHeight - occupiedArea.getBBox().getHeight());\n",
      "            if (isFixedLayout()) {\n",
      "                occupiedArea.getBBox().setY(blockBottom).setHeight((float) blockMinHeight);\n",
      "            } else {\n",
      "                // Because of float precision inaccuracy, iText can incorrectly calculate that the block of fixed height\n",
      "                // needs to be split. As a result, an empty block with a height equal to sum of paddings\n",
      "                // may appear on the next area. To prevent such situations epsilon is used.\n",
      "                if (isOverflowFit(overflowY) && blockBottom + EPS < layoutBox.getBottom()) {\n",
      "                    float hDelta = occupiedArea.getBBox().getBottom() - layoutBox.getBottom();\n",
      "                    occupiedArea.getBBox()\n",
      "                            .increaseHeight(hDelta)\n",
      "                            .setY(layoutBox.getBottom());\n",
      "\n",
      "                    if (occupiedArea.getBBox().getHeight() < 0) {\n",
      "                        occupiedArea.getBBox().setHeight(0);\n",
      "                    }\n",
      "\n",
      "                    this.isLastRendererForModelElement = false;\n",
      "                    overflowRenderer = createOverflowRenderer(LayoutResult.PARTIAL);\n",
      "                    overflowRenderer.updateMinHeight(UnitValue.createPointValue((float) blockMinHeight - occupiedArea.getBBox().getHeight()));\n",
      "                    if (hasProperty(Property.HEIGHT)) {\n",
      "                        overflowRenderer.updateHeight(UnitValue.createPointValue((float) retrieveHeight() - occupiedArea.getBBox().getHeight()));\n",
      "                    }\n",
      "                } else {\n",
      "                    occupiedArea.getBBox().setY(blockBottom).setHeight((float) blockMinHeight);\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "        return overflowRenderer;\n",
      "    }\n",
      "\n",
      "    void fixOccupiedAreaIfOverflowedX(OverflowPropertyValue overflowX, Rectangle layoutBox) {\n",
      "        if (isOverflowFit(overflowX)) {\n",
      "            return;\n",
      "        }\n",
      "\n",
      "        if ((occupiedArea.getBBox().getWidth() > layoutBox.getWidth() || occupiedArea.getBBox().getLeft() < layoutBox.getLeft())) {\n",
      "            occupiedArea.getBBox().setX(layoutBox.getX()).setWidth(layoutBox.getWidth());\n",
      "        }\n",
      "    }\n",
      "\n",
      "    void fixOccupiedAreaIfOverflowedY(OverflowPropertyValue overflowY, Rectangle layoutBox) {\n",
      "        if (isOverflowFit(overflowY)) {\n",
      "            return;\n",
      "        }\n",
      "        if (occupiedArea.getBBox().getBottom() < layoutBox.getBottom()) {\n",
      "            float difference = layoutBox.getBottom() - occupiedArea.getBBox().getBottom();\n",
      "            occupiedArea.getBBox().moveUp(difference).decreaseHeight(difference);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * {@inheritDoc}\n",
      "     */\n",
      "    @Override\n",
      "    public MinMaxWidth getMinMaxWidth() {\n",
      "        MinMaxWidth minMaxWidth = new MinMaxWidth(calculateAdditionalWidth(this));\n",
      "        if (!setMinMaxWidthBasedOnFixedWidth(minMaxWidth)) {\n",
      "            Float minWidth = hasAbsoluteUnitValue(Property.MIN_WIDTH) ? retrieveMinWidth(0) : null;\n",
      "            Float maxWidth = hasAbsoluteUnitValue(Property.MAX_WIDTH) ? retrieveMaxWidth(0) : null;\n",
      "            if (minWidth == null || maxWidth == null) {\n",
      "                AbstractWidthHandler handler = new MaxMaxWidthHandler(minMaxWidth);\n",
      "                int epsilonNum = 0;\n",
      "                int curEpsNum = 0;\n",
      "                float previousFloatingChildWidth = 0;\n",
      "                for (IRenderer childRenderer : childRenderers) {\n",
      "                    MinMaxWidth childMinMaxWidth;\n",
      "                    childRenderer.setParent(this);\n",
      "                    if (childRenderer instanceof AbstractRenderer) {\n",
      "                        childMinMaxWidth = ((AbstractRenderer) childRenderer).getMinMaxWidth();\n",
      "                    } else {\n",
      "                        childMinMaxWidth = MinMaxWidthUtils.countDefaultMinMaxWidth(childRenderer);\n",
      "                    }\n",
      "                    handler.updateMaxChildWidth(childMinMaxWidth.getMaxWidth() + (FloatingHelper.isRendererFloating(childRenderer) ? previousFloatingChildWidth : 0));\n",
      "                    handler.updateMinChildWidth(childMinMaxWidth.getMinWidth());\n",
      "                    previousFloatingChildWidth = FloatingHelper.isRendererFloating(childRenderer) ? previousFloatingChildWidth + childMinMaxWidth.getMaxWidth() : 0;\n",
      "                    if (FloatingHelper.isRendererFloating(childRenderer)) {\n",
      "                        curEpsNum++;\n",
      "                    } else {\n",
      "                        epsilonNum = Math.max(epsilonNum, curEpsNum);\n",
      "                        curEpsNum = 0;\n",
      "                    }\n",
      "                }\n",
      "                epsilonNum = Math.max(epsilonNum, curEpsNum);\n",
      "                handler.minMaxWidth.setChildrenMaxWidth(handler.minMaxWidth.getChildrenMaxWidth() + epsilonNum * AbstractRenderer.EPS);\n",
      "                handler.minMaxWidth.setChildrenMinWidth(handler.minMaxWidth.getChildrenMinWidth() + epsilonNum * AbstractRenderer.EPS);\n",
      "            }\n",
      "            if (minWidth != null) {\n",
      "                minMaxWidth.setChildrenMinWidth((float) minWidth);\n",
      "\n",
      "            }\n",
      "            // if max-width was defined explicitly, it shouldn't be overwritten\n",
      "            if (maxWidth != null) {\n",
      "                minMaxWidth.setChildrenMaxWidth((float) maxWidth);\n",
      "            } else {\n",
      "                if (minMaxWidth.getChildrenMinWidth() > minMaxWidth.getChildrenMaxWidth()) {\n",
      "                    minMaxWidth.setChildrenMaxWidth(minMaxWidth.getChildrenMinWidth());\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "\n",
      "        if (this.getPropertyAsFloat(Property.ROTATION_ANGLE) != null) {\n",
      "            return RotationUtils.countRotationMinMaxWidth(minMaxWidth, this);\n",
      "        }\n",
      "\n",
      "        return minMaxWidth;\n",
      "    }\n",
      "\n",
      "    void handleForcedPlacement(boolean anythingPlaced) {\n",
      "        // We placed something meaning that we don't need this property anymore while processing other children\n",
      "        // to do not force place them\n",
      "        if (anythingPlaced && hasOwnProperty(Property.FORCED_PLACEMENT)) {\n",
      "            deleteOwnProperty(Property.FORCED_PLACEMENT);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    private boolean isAnythingOccupied() {\n",
      "        return !(occupiedArea.getBBox().getHeight() < EPS);\n",
      "    }\n",
      "\n",
      "    private void replaceSplitRendererKidFloats(Map<Integer, IRenderer> waitingFloatsSplitRenderers, IRenderer splitRenderer) {\n",
      "        for (Map.Entry<Integer, IRenderer> waitingSplitRenderer : waitingFloatsSplitRenderers.entrySet()) {\n",
      "            if (waitingSplitRenderer.getValue() != null) {\n",
      "                splitRenderer.getChildRenderers().set(waitingSplitRenderer.getKey(), waitingSplitRenderer.getValue());\n",
      "            } else {\n",
      "                splitRenderer.getChildRenderers().set((int) waitingSplitRenderer.getKey(), null);\n",
      "            }\n",
      "        }\n",
      "        for (int i = splitRenderer.getChildRenderers().size() - 1; i >= 0; --i) {\n",
      "            if (splitRenderer.getChildRenderers().get(i) == null) {\n",
      "                splitRenderer.getChildRenderers().remove(i);\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    private void addMarkedContent(DrawContext drawContext, boolean isBegin) {\n",
      "        if (Boolean.TRUE.equals(this.<Boolean>getProperty(Property.ADD_MARKED_CONTENT_TEXT))) {\n",
      "            PdfCanvas canvas = drawContext.getCanvas();\n",
      "            if (isBegin) {\n",
      "                canvas.beginVariableText().saveState().endPath();\n",
      "            } else {\n",
      "                canvas.restoreState().endVariableText();\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    private List<Point> clipPolygon(List<Point> points, Point clipLineBeg, Point clipLineEnd) {\n",
      "        List<Point> filteredPoints = new ArrayList<>();\n",
      "\n",
      "        boolean prevOnRightSide = false;\n",
      "        Point filteringPoint = points.get(0);\n",
      "        if (checkPointSide(filteringPoint, clipLineBeg, clipLineEnd) >= 0) {\n",
      "            filteredPoints.add(filteringPoint);\n",
      "            prevOnRightSide = true;\n",
      "        }\n",
      "\n",
      "        Point prevPoint = filteringPoint;\n",
      "        for (int i = 1; i < points.size() + 1; ++i) {\n",
      "            filteringPoint = points.get(i % points.size());\n",
      "            if (checkPointSide(filteringPoint, clipLineBeg, clipLineEnd) >= 0) {\n",
      "                if (!prevOnRightSide) {\n",
      "                    filteredPoints.add(getIntersectionPoint(prevPoint, filteringPoint, clipLineBeg, clipLineEnd));\n",
      "                }\n",
      "                filteredPoints.add(filteringPoint);\n",
      "                prevOnRightSide = true;\n",
      "            } else if (prevOnRightSide) {\n",
      "                filteredPoints.add(getIntersectionPoint(prevPoint, filteringPoint, clipLineBeg, clipLineEnd));\n",
      "            }\n",
      "\n",
      "            prevPoint = filteringPoint;\n",
      "        }\n",
      "\n",
      "        return filteredPoints;\n",
      "    }\n",
      "\n",
      "    private int checkPointSide(Point filteredPoint, Point clipLineBeg, Point clipLineEnd) {\n",
      "        double x1, x2, y1, y2;\n",
      "        x1 = filteredPoint.getX() - clipLineBeg.getX();\n",
      "        y2 = clipLineEnd.getY() - clipLineBeg.getY();\n",
      "\n",
      "        x2 = clipLineEnd.getX() - clipLineBeg.getX();\n",
      "        y1 = filteredPoint.getY() - clipLineBeg.getY();\n",
      "\n",
      "        double sgn = x1 * y2 - x2 * y1;\n",
      "\n",
      "        if (Math.abs(sgn) < 0.001) return 0;\n",
      "        if (sgn > 0) return 1;\n",
      "        if (sgn < 0) return -1;\n",
      "\n",
      "        return 0;\n",
      "    }\n",
      "\n",
      "    private Point getIntersectionPoint(Point lineBeg, Point lineEnd, Point clipLineBeg, Point clipLineEnd) {\n",
      "        double A1 = lineBeg.getY() - lineEnd.getY(), A2 = clipLineBeg.getY() - clipLineEnd.getY();\n",
      "        double B1 = lineEnd.getX() - lineBeg.getX(), B2 = clipLineEnd.getX() - clipLineBeg.getX();\n",
      "        double C1 = lineBeg.getX() * lineEnd.getY() - lineBeg.getY() * lineEnd.getX();\n",
      "        double C2 = clipLineBeg.getX() * clipLineEnd.getY() - clipLineBeg.getY() * clipLineEnd.getX();\n",
      "\n",
      "        double M = B1 * A2 - B2 * A1;\n",
      "\n",
      "        return new Point((B2 * C1 - B1 * C2) / M, (C2 * A1 - C1 * A2) / M);\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.layout.renderer;\n",
      "\n",
      "import com.itextpdf.io.font.constants.StandardFonts;\n",
      "import com.itextpdf.io.logs.IoLogMessageConstant;\n",
      "import com.itextpdf.io.source.ByteArrayOutputStream;\n",
      "import com.itextpdf.kernel.colors.ColorConstants;\n",
      "import com.itextpdf.kernel.font.PdfFont;\n",
      "import com.itextpdf.kernel.font.PdfFontFactory;\n",
      "import com.itextpdf.kernel.geom.Rectangle;\n",
      "import com.itextpdf.kernel.pdf.PdfDocument;\n",
      "import com.itextpdf.kernel.pdf.PdfWriter;\n",
      "import com.itextpdf.kernel.utils.CompareTool;\n",
      "import com.itextpdf.layout.Document;\n",
      "import com.itextpdf.layout.element.Div;\n",
      "import com.itextpdf.layout.element.Paragraph;\n",
      "import com.itextpdf.layout.font.FontProvider;\n",
      "import com.itextpdf.layout.layout.LayoutArea;\n",
      "import com.itextpdf.layout.layout.LayoutPosition;\n",
      "import com.itextpdf.layout.properties.OverflowPropertyValue;\n",
      "import com.itextpdf.layout.properties.Property;\n",
      "import com.itextpdf.layout.properties.UnitValue;\n",
      "import com.itextpdf.test.ExtendedITextTest;\n",
      "import com.itextpdf.test.LogLevelConstants;\n",
      "import com.itextpdf.test.annotations.LogMessage;\n",
      "import com.itextpdf.test.annotations.LogMessages;\n",
      "import com.itextpdf.test.annotations.type.IntegrationTest;\n",
      "\n",
      "import java.io.IOException;\n",
      "import org.junit.Assert;\n",
      "import org.junit.BeforeClass;\n",
      "import org.junit.Test;\n",
      "import org.junit.experimental.categories.Category;\n",
      "\n",
      "@Category(IntegrationTest.class)\n",
      "public class BlockRendererTest extends ExtendedITextTest {\n",
      "\n",
      "    public static final String SOURCE_FOLDER = \"./src/test/resources/com/itextpdf/layout/BlockRendererTest/\";\n",
      "    public static final String DESTINATION_FOLDER = \"./target/test/com/itextpdf/layout/BlockRendererTest/\";\n",
      "\n",
      "    @BeforeClass\n",
      "    public static void beforeClass() {\n",
      "        createOrClearDestinationFolder(DESTINATION_FOLDER);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void applyMinHeightForSpecificDimensionsCausingFloatPrecisionErrorTest() {\n",
      "        float divHeight = 42.55f;\n",
      "\n",
      "        Div div = new Div();\n",
      "        div.setHeight(UnitValue.createPointValue(divHeight));\n",
      "\n",
      "        float occupiedHeight = 17.981995f;\n",
      "        float leftHeight = 24.567993f;\n",
      "\n",
      "        Assert.assertTrue(occupiedHeight + leftHeight < divHeight);\n",
      "\n",
      "        BlockRenderer blockRenderer = (BlockRenderer) div.createRendererSubTree();\n",
      "        blockRenderer.occupiedArea = new LayoutArea(1, new Rectangle(0, 267.9681f, 0, occupiedHeight));\n",
      "        AbstractRenderer renderer = blockRenderer.applyMinHeight(OverflowPropertyValue.FIT,\n",
      "                new Rectangle(0, 243.40012f, 0, leftHeight));\n",
      "        Assert.assertNull(renderer);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    @LogMessages(messages = {\n",
      "            @LogMessage(messageTemplate = IoLogMessageConstant.OCCUPIED_AREA_HAS_NOT_BEEN_INITIALIZED, count = 2,\n",
      "                    logLevel = LogLevelConstants.ERROR)\n",
      "    })\n",
      "    // TODO DEVSIX-6488 all elements should be layouted first in case when parent box should wrap around child boxes\n",
      "    public void parentBoxWrapAroundChildBoxesTest() throws IOException, InterruptedException {\n",
      "        String cmpFileName = SOURCE_FOLDER + \"cmp_parentBoxWrapAroundChildBoxes.pdf\";\n",
      "        String outFile = DESTINATION_FOLDER + \"parentBoxWrapAroundChildBoxes.pdf\";\n",
      "        int enoughDivsToOccupyWholePage = 30;\n",
      "        Document document = new Document(new PdfDocument(new PdfWriter(outFile)));\n",
      "\n",
      "        Div div = new Div();\n",
      "        div.setBackgroundColor(ColorConstants.CYAN);\n",
      "        div.setProperty(Property.POSITION, LayoutPosition.ABSOLUTE);\n",
      "\n",
      "        Div childDiv = new Div();\n",
      "        childDiv.add(new Paragraph(\"ChildDiv\"));\n",
      "        childDiv.setBackgroundColor(ColorConstants.YELLOW);\n",
      "        childDiv.setWidth(100);\n",
      "\n",
      "        for (int i = 0; enoughDivsToOccupyWholePage > i; i++) {\n",
      "            div.add(childDiv);\n",
      "        }\n",
      "        Div divThatDoesntFitButItsWidthShouldBeConsidered = new Div();\n",
      "        divThatDoesntFitButItsWidthShouldBeConsidered.add(new Paragraph(\"ChildDiv1\"));\n",
      "        divThatDoesntFitButItsWidthShouldBeConsidered.setBackgroundColor(ColorConstants.GREEN);\n",
      "        divThatDoesntFitButItsWidthShouldBeConsidered.setWidth(200);\n",
      "\n",
      "        div.add(divThatDoesntFitButItsWidthShouldBeConsidered);\n",
      "        document.add(div);\n",
      "\n",
      "        document.close();\n",
      "        Assert.assertNull(new CompareTool().compareByContent(outFile, cmpFileName, DESTINATION_FOLDER));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void resolveFontTest() throws IOException {\n",
      "        PdfDocument pdfDocument = new PdfDocument(new PdfWriter(new ByteArrayOutputStream()));\n",
      "        Div div = new Div();\n",
      "        div.setProperty(Property.FONT, PdfFontFactory.createFont(StandardFonts.TIMES_ROMAN));\n",
      "        DivRenderer renderer = (DivRenderer) div.getRenderer();\n",
      "        PdfFont font = renderer.getResolvedFont(pdfDocument);\n",
      "        Assert.assertEquals(\"Times-Roman\", font.getFontProgram().getFontNames().getFontName());\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    public void resolveFontWithPdfDocumentNullTest() {\n",
      "        Div div = new Div();\n",
      "        DivRenderer renderer = (DivRenderer) div.getRenderer();\n",
      "        PdfFont font = renderer.getResolvedFont(null);\n",
      "        Assert.assertNull(font);\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    public void resolveFontFromFontProviderTest() {\n",
      "        PdfDocument pdfDocument = new PdfDocument(new PdfWriter(new ByteArrayOutputStream()));\n",
      "        Div div = new Div();\n",
      "\n",
      "        FontProvider provider = new FontProvider();\n",
      "        provider.getFontSet().addFont(StandardFonts.COURIER, null, \"courier\");\n",
      "        div.setProperty(Property.FONT_PROVIDER, provider);\n",
      "        div.setProperty(Property.FONT, new String[] {\"courier\"});\n",
      "        DivRenderer renderer = (DivRenderer) div.getRenderer();\n",
      "        PdfFont font = renderer.getResolvedFont(pdfDocument);\n",
      "        Assert.assertEquals(\"Courier\", font.getFontProgram().getFontNames().getFontName());\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    public void resolveFontFromFontProviderNullTest() {\n",
      "        PdfDocument pdfDocument = new PdfDocument(new PdfWriter(new ByteArrayOutputStream()));\n",
      "        Div div = new Div();\n",
      "\n",
      "        div.setProperty(Property.FONT_PROVIDER, null);\n",
      "        div.setProperty(Property.FONT, new String[] {\"courier\"});\n",
      "        DivRenderer renderer = (DivRenderer) div.getRenderer();\n",
      "        PdfFont font = renderer.getResolvedFont(pdfDocument);\n",
      "        Assert.assertEquals(\"Helvetica\", font.getFontProgram().getFontNames().getFontName());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void resolveFontFromFontProviderNullAndDocNullTest() {\n",
      "        Div div = new Div();\n",
      "\n",
      "        div.setProperty(Property.FONT_PROVIDER, null);\n",
      "        div.setProperty(Property.FONT, new String[] {\"courier\"});\n",
      "        DivRenderer renderer = (DivRenderer) div.getRenderer();\n",
      "        PdfFont font = renderer.getResolvedFont(null);\n",
      "        Assert.assertNull(font);\n",
      "    }\n",
      "\n",
      "}\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n"
    ],
    "method_lines_dic": {
      "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)": [
        85,
        492
      ],
      "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)": [
        494,
        592
      ],
      "BlockRenderer::::getOccupiedAreaBBox()": [
        594,
        610
      ],
      "BlockRenderer::::createSplitRenderer(int)": [
        619,
        627
      ],
      "BlockRenderer::::createOverflowRenderer(int)": [
        636,
        642
      ],
      "BlockRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)": [
        658,
        687
      ],
      "BlockRenderer::::applyVerticalAlignment()": [
        693,
        739
      ],
      "BlockRenderer::::createRotationTransformInsideOccupiedArea()": [
        816,
        828
      ],
      "BlockRenderer::::stopLayoutingChildrenIfChildResultNotFull(com.itextpdf.layout.layout.LayoutResult)": [
        885,
        887
      ],
      "BlockRenderer::::getMinMaxWidth()": [
        1076,
        1128
      ],
      "BlockRenderer::::handleForcedPlacement(boolean)": [
        1130,
        1136
      ],
      "BlockRenderer::::isAnythingOccupied()": [
        1138,
        1140
      ],
      "BlockRenderer::::replaceSplitRendererKidFloats(java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,com.itextpdf.layout.renderer.IRenderer)": [
        1142,
        1155
      ],
      "BlockRenderer::::addMarkedContent(com.itextpdf.layout.renderer.DrawContext,boolean)": [
        1157,
        1166
      ]
    },
    "test_method_lines_dic": {
      "BlockRendererTest::::beforeClass()": [
        62,
        65
      ],
      "BlockRendererTest::::applyMinHeightForSpecificDimensionsCausingFloatPrecisionErrorTest()": [
        67,
        84
      ],
      "BlockRendererTest::::parentBoxWrapAroundChildBoxesTest()": [
        86,
        120
      ],
      "BlockRendererTest::::resolveFontTest()": [
        122,
        130
      ],
      "BlockRendererTest::::resolveFontWithPdfDocumentNullTest()": [
        133,
        139
      ],
      "BlockRendererTest::::resolveFontFromFontProviderTest()": [
        142,
        154
      ],
      "BlockRendererTest::::resolveFontFromFontProviderNullTest()": [
        157,
        167
      ],
      "BlockRendererTest::::resolveFontFromFontProviderNullAndDocNullTest()": [
        169,
        178
      ]
    },
    "reverse_method_lines_dic": {
      "85": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "86": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "87": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "88": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "89": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "90": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "91": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "92": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "93": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "94": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "95": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "96": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "97": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "98": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "99": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "100": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "101": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "102": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "103": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "104": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "105": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "106": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "107": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "108": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "109": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "110": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "111": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "112": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "113": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "114": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "115": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "116": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "117": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "118": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "119": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "120": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "121": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "122": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "123": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "124": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "125": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "126": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "127": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "128": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "129": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "130": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "131": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "132": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "133": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "134": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "135": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "136": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "137": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "138": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "139": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "140": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "141": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "142": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "143": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "144": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "145": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "146": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "147": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "148": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "149": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "150": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "151": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "152": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "153": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "154": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "155": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "156": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "157": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "158": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "159": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "160": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "161": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "162": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "163": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "164": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "165": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "166": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "167": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "168": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "169": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "170": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "171": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "172": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "173": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "174": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "175": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "176": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "177": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "178": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "179": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "180": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "181": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "182": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "183": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "184": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "185": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "186": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "187": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "188": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "189": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "190": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "191": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "192": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "193": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "194": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "195": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "196": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "197": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "198": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "199": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "200": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "201": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "202": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "203": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "204": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "205": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "206": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "207": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "208": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "209": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "210": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "211": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "212": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "213": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "214": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "215": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "216": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "217": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "218": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "219": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "220": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "221": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "222": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "223": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "224": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "225": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "226": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "227": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "228": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "229": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "230": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "231": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "232": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "233": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "234": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "235": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "236": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "237": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "238": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "239": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "240": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "241": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "242": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "243": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "244": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "245": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "246": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "247": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "248": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "249": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "250": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "251": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "252": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "253": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "254": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "255": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "256": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "257": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "258": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "259": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "260": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "261": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "262": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "263": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "264": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "265": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "266": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "267": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "268": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "269": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "270": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "271": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "272": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "273": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "274": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "275": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "276": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "277": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "278": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "279": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "280": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "281": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "282": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "283": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "284": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "285": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "286": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "287": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "288": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "289": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "290": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "291": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "292": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "293": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "294": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "295": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "296": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "297": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "298": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "299": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "300": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "301": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "302": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "303": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "304": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "305": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "306": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "307": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "308": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "309": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "310": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "311": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "312": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "313": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "314": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "315": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "316": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "317": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "318": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "319": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "320": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "321": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "322": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "323": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "324": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "325": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "326": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "327": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "328": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "329": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "330": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "331": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "332": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "333": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "334": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "335": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "336": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "337": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "338": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "339": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "340": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "341": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "342": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "343": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "344": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "345": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "346": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "347": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "348": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "349": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "350": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "351": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "352": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "353": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "354": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "355": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "356": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "357": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "358": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "359": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "360": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "361": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "362": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "363": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "364": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "365": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "366": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "367": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "368": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "369": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "370": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "371": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "372": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "373": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "374": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "375": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "376": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "377": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "378": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "379": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "380": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "381": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "382": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "383": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "384": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "385": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "386": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "387": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "388": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "389": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "390": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "391": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "392": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "393": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "394": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "395": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "396": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "397": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "398": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "399": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "400": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "401": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "402": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "403": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "404": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "405": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "406": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "407": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "408": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "409": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "410": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "411": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "412": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "413": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "414": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "415": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "416": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "417": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "418": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "419": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "420": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "421": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "422": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "423": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "424": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "425": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "426": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "427": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "428": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "429": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "430": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "431": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "432": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "433": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "434": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "435": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "436": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "437": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "438": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "439": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "440": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "441": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "442": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "443": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "444": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "445": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "446": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "447": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "448": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "449": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "450": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "451": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "452": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "453": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "454": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "455": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "456": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "457": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "458": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "459": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "460": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "461": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "462": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "463": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "464": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "465": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "466": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "467": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "468": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "469": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "470": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "471": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "472": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "473": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "474": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "475": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "476": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "477": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "478": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "479": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "480": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "481": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "482": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "483": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "484": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "485": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "486": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "487": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "488": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "489": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "490": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "491": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "492": "BlockRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "494": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "495": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "496": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "497": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "498": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "499": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "500": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "501": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "502": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "503": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "504": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "505": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "506": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "507": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "508": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "509": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "510": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "511": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "512": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "513": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "514": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "515": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "516": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "517": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "518": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "519": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "520": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "521": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "522": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "523": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "524": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "525": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "526": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "527": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "528": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "529": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "530": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "531": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "532": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "533": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "534": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "535": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "536": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "537": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "538": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "539": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "540": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "541": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "542": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "543": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "544": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "545": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "546": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "547": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "548": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "549": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "550": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "551": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "552": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "553": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "554": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "555": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "556": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "557": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "558": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "559": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "560": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "561": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "562": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "563": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "564": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "565": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "566": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "567": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "568": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "569": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "570": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "571": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "572": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "573": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "574": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "575": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "576": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "577": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "578": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "579": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "580": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "581": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "582": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "583": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "584": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "585": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "586": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "587": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "588": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "589": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "590": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "591": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "592": "BlockRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "594": "BlockRenderer::::getOccupiedAreaBBox()",
      "595": "BlockRenderer::::getOccupiedAreaBBox()",
      "596": "BlockRenderer::::getOccupiedAreaBBox()",
      "597": "BlockRenderer::::getOccupiedAreaBBox()",
      "598": "BlockRenderer::::getOccupiedAreaBBox()",
      "599": "BlockRenderer::::getOccupiedAreaBBox()",
      "600": "BlockRenderer::::getOccupiedAreaBBox()",
      "601": "BlockRenderer::::getOccupiedAreaBBox()",
      "602": "BlockRenderer::::getOccupiedAreaBBox()",
      "603": "BlockRenderer::::getOccupiedAreaBBox()",
      "604": "BlockRenderer::::getOccupiedAreaBBox()",
      "605": "BlockRenderer::::getOccupiedAreaBBox()",
      "606": "BlockRenderer::::getOccupiedAreaBBox()",
      "607": "BlockRenderer::::getOccupiedAreaBBox()",
      "608": "BlockRenderer::::getOccupiedAreaBBox()",
      "609": "BlockRenderer::::getOccupiedAreaBBox()",
      "610": "BlockRenderer::::getOccupiedAreaBBox()",
      "619": "BlockRenderer::::createSplitRenderer(int)",
      "620": "BlockRenderer::::createSplitRenderer(int)",
      "621": "BlockRenderer::::createSplitRenderer(int)",
      "622": "BlockRenderer::::createSplitRenderer(int)",
      "623": "BlockRenderer::::createSplitRenderer(int)",
      "624": "BlockRenderer::::createSplitRenderer(int)",
      "625": "BlockRenderer::::createSplitRenderer(int)",
      "626": "BlockRenderer::::createSplitRenderer(int)",
      "627": "BlockRenderer::::createSplitRenderer(int)",
      "636": "BlockRenderer::::createOverflowRenderer(int)",
      "637": "BlockRenderer::::createOverflowRenderer(int)",
      "638": "BlockRenderer::::createOverflowRenderer(int)",
      "639": "BlockRenderer::::createOverflowRenderer(int)",
      "640": "BlockRenderer::::createOverflowRenderer(int)",
      "641": "BlockRenderer::::createOverflowRenderer(int)",
      "642": "BlockRenderer::::createOverflowRenderer(int)",
      "658": "BlockRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "659": "BlockRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "660": "BlockRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "661": "BlockRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "662": "BlockRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "663": "BlockRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "664": "BlockRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "665": "BlockRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "666": "BlockRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "667": "BlockRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "668": "BlockRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "669": "BlockRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "670": "BlockRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "671": "BlockRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "672": "BlockRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "673": "BlockRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "674": "BlockRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "675": "BlockRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "676": "BlockRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "677": "BlockRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "678": "BlockRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "679": "BlockRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "680": "BlockRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "681": "BlockRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "682": "BlockRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "683": "BlockRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "684": "BlockRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "685": "BlockRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "686": "BlockRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "687": "BlockRenderer::::createSplitAndOverflowRenderers(int,int,com.itextpdf.layout.layout.LayoutResult,java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "693": "BlockRenderer::::applyVerticalAlignment()",
      "694": "BlockRenderer::::applyVerticalAlignment()",
      "695": "BlockRenderer::::applyVerticalAlignment()",
      "696": "BlockRenderer::::applyVerticalAlignment()",
      "697": "BlockRenderer::::applyVerticalAlignment()",
      "698": "BlockRenderer::::applyVerticalAlignment()",
      "699": "BlockRenderer::::applyVerticalAlignment()",
      "700": "BlockRenderer::::applyVerticalAlignment()",
      "701": "BlockRenderer::::applyVerticalAlignment()",
      "702": "BlockRenderer::::applyVerticalAlignment()",
      "703": "BlockRenderer::::applyVerticalAlignment()",
      "704": "BlockRenderer::::applyVerticalAlignment()",
      "705": "BlockRenderer::::applyVerticalAlignment()",
      "706": "BlockRenderer::::applyVerticalAlignment()",
      "707": "BlockRenderer::::applyVerticalAlignment()",
      "708": "BlockRenderer::::applyVerticalAlignment()",
      "709": "BlockRenderer::::applyVerticalAlignment()",
      "710": "BlockRenderer::::applyVerticalAlignment()",
      "711": "BlockRenderer::::applyVerticalAlignment()",
      "712": "BlockRenderer::::applyVerticalAlignment()",
      "713": "BlockRenderer::::applyVerticalAlignment()",
      "714": "BlockRenderer::::applyVerticalAlignment()",
      "715": "BlockRenderer::::applyVerticalAlignment()",
      "716": "BlockRenderer::::applyVerticalAlignment()",
      "717": "BlockRenderer::::applyVerticalAlignment()",
      "718": "BlockRenderer::::applyVerticalAlignment()",
      "719": "BlockRenderer::::applyVerticalAlignment()",
      "720": "BlockRenderer::::applyVerticalAlignment()",
      "721": "BlockRenderer::::applyVerticalAlignment()",
      "722": "BlockRenderer::::applyVerticalAlignment()",
      "723": "BlockRenderer::::applyVerticalAlignment()",
      "724": "BlockRenderer::::applyVerticalAlignment()",
      "725": "BlockRenderer::::applyVerticalAlignment()",
      "726": "BlockRenderer::::applyVerticalAlignment()",
      "727": "BlockRenderer::::applyVerticalAlignment()",
      "728": "BlockRenderer::::applyVerticalAlignment()",
      "729": "BlockRenderer::::applyVerticalAlignment()",
      "730": "BlockRenderer::::applyVerticalAlignment()",
      "731": "BlockRenderer::::applyVerticalAlignment()",
      "732": "BlockRenderer::::applyVerticalAlignment()",
      "733": "BlockRenderer::::applyVerticalAlignment()",
      "734": "BlockRenderer::::applyVerticalAlignment()",
      "735": "BlockRenderer::::applyVerticalAlignment()",
      "736": "BlockRenderer::::applyVerticalAlignment()",
      "737": "BlockRenderer::::applyVerticalAlignment()",
      "738": "BlockRenderer::::applyVerticalAlignment()",
      "739": "BlockRenderer::::applyVerticalAlignment()",
      "816": "BlockRenderer::::createRotationTransformInsideOccupiedArea()",
      "817": "BlockRenderer::::createRotationTransformInsideOccupiedArea()",
      "818": "BlockRenderer::::createRotationTransformInsideOccupiedArea()",
      "819": "BlockRenderer::::createRotationTransformInsideOccupiedArea()",
      "820": "BlockRenderer::::createRotationTransformInsideOccupiedArea()",
      "821": "BlockRenderer::::createRotationTransformInsideOccupiedArea()",
      "822": "BlockRenderer::::createRotationTransformInsideOccupiedArea()",
      "823": "BlockRenderer::::createRotationTransformInsideOccupiedArea()",
      "824": "BlockRenderer::::createRotationTransformInsideOccupiedArea()",
      "825": "BlockRenderer::::createRotationTransformInsideOccupiedArea()",
      "826": "BlockRenderer::::createRotationTransformInsideOccupiedArea()",
      "827": "BlockRenderer::::createRotationTransformInsideOccupiedArea()",
      "828": "BlockRenderer::::createRotationTransformInsideOccupiedArea()",
      "885": "BlockRenderer::::stopLayoutingChildrenIfChildResultNotFull(com.itextpdf.layout.layout.LayoutResult)",
      "886": "BlockRenderer::::stopLayoutingChildrenIfChildResultNotFull(com.itextpdf.layout.layout.LayoutResult)",
      "887": "BlockRenderer::::stopLayoutingChildrenIfChildResultNotFull(com.itextpdf.layout.layout.LayoutResult)",
      "1076": "BlockRenderer::::getMinMaxWidth()",
      "1077": "BlockRenderer::::getMinMaxWidth()",
      "1078": "BlockRenderer::::getMinMaxWidth()",
      "1079": "BlockRenderer::::getMinMaxWidth()",
      "1080": "BlockRenderer::::getMinMaxWidth()",
      "1081": "BlockRenderer::::getMinMaxWidth()",
      "1082": "BlockRenderer::::getMinMaxWidth()",
      "1083": "BlockRenderer::::getMinMaxWidth()",
      "1084": "BlockRenderer::::getMinMaxWidth()",
      "1085": "BlockRenderer::::getMinMaxWidth()",
      "1086": "BlockRenderer::::getMinMaxWidth()",
      "1087": "BlockRenderer::::getMinMaxWidth()",
      "1088": "BlockRenderer::::getMinMaxWidth()",
      "1089": "BlockRenderer::::getMinMaxWidth()",
      "1090": "BlockRenderer::::getMinMaxWidth()",
      "1091": "BlockRenderer::::getMinMaxWidth()",
      "1092": "BlockRenderer::::getMinMaxWidth()",
      "1093": "BlockRenderer::::getMinMaxWidth()",
      "1094": "BlockRenderer::::getMinMaxWidth()",
      "1095": "BlockRenderer::::getMinMaxWidth()",
      "1096": "BlockRenderer::::getMinMaxWidth()",
      "1097": "BlockRenderer::::getMinMaxWidth()",
      "1098": "BlockRenderer::::getMinMaxWidth()",
      "1099": "BlockRenderer::::getMinMaxWidth()",
      "1100": "BlockRenderer::::getMinMaxWidth()",
      "1101": "BlockRenderer::::getMinMaxWidth()",
      "1102": "BlockRenderer::::getMinMaxWidth()",
      "1103": "BlockRenderer::::getMinMaxWidth()",
      "1104": "BlockRenderer::::getMinMaxWidth()",
      "1105": "BlockRenderer::::getMinMaxWidth()",
      "1106": "BlockRenderer::::getMinMaxWidth()",
      "1107": "BlockRenderer::::getMinMaxWidth()",
      "1108": "BlockRenderer::::getMinMaxWidth()",
      "1109": "BlockRenderer::::getMinMaxWidth()",
      "1110": "BlockRenderer::::getMinMaxWidth()",
      "1111": "BlockRenderer::::getMinMaxWidth()",
      "1112": "BlockRenderer::::getMinMaxWidth()",
      "1113": "BlockRenderer::::getMinMaxWidth()",
      "1114": "BlockRenderer::::getMinMaxWidth()",
      "1115": "BlockRenderer::::getMinMaxWidth()",
      "1116": "BlockRenderer::::getMinMaxWidth()",
      "1117": "BlockRenderer::::getMinMaxWidth()",
      "1118": "BlockRenderer::::getMinMaxWidth()",
      "1119": "BlockRenderer::::getMinMaxWidth()",
      "1120": "BlockRenderer::::getMinMaxWidth()",
      "1121": "BlockRenderer::::getMinMaxWidth()",
      "1122": "BlockRenderer::::getMinMaxWidth()",
      "1123": "BlockRenderer::::getMinMaxWidth()",
      "1124": "BlockRenderer::::getMinMaxWidth()",
      "1125": "BlockRenderer::::getMinMaxWidth()",
      "1126": "BlockRenderer::::getMinMaxWidth()",
      "1127": "BlockRenderer::::getMinMaxWidth()",
      "1128": "BlockRenderer::::getMinMaxWidth()",
      "1130": "BlockRenderer::::handleForcedPlacement(boolean)",
      "1131": "BlockRenderer::::handleForcedPlacement(boolean)",
      "1132": "BlockRenderer::::handleForcedPlacement(boolean)",
      "1133": "BlockRenderer::::handleForcedPlacement(boolean)",
      "1134": "BlockRenderer::::handleForcedPlacement(boolean)",
      "1135": "BlockRenderer::::handleForcedPlacement(boolean)",
      "1136": "BlockRenderer::::handleForcedPlacement(boolean)",
      "1138": "BlockRenderer::::isAnythingOccupied()",
      "1139": "BlockRenderer::::isAnythingOccupied()",
      "1140": "BlockRenderer::::isAnythingOccupied()",
      "1142": "BlockRenderer::::replaceSplitRendererKidFloats(java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,com.itextpdf.layout.renderer.IRenderer)",
      "1143": "BlockRenderer::::replaceSplitRendererKidFloats(java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,com.itextpdf.layout.renderer.IRenderer)",
      "1144": "BlockRenderer::::replaceSplitRendererKidFloats(java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,com.itextpdf.layout.renderer.IRenderer)",
      "1145": "BlockRenderer::::replaceSplitRendererKidFloats(java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,com.itextpdf.layout.renderer.IRenderer)",
      "1146": "BlockRenderer::::replaceSplitRendererKidFloats(java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,com.itextpdf.layout.renderer.IRenderer)",
      "1147": "BlockRenderer::::replaceSplitRendererKidFloats(java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,com.itextpdf.layout.renderer.IRenderer)",
      "1148": "BlockRenderer::::replaceSplitRendererKidFloats(java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,com.itextpdf.layout.renderer.IRenderer)",
      "1149": "BlockRenderer::::replaceSplitRendererKidFloats(java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,com.itextpdf.layout.renderer.IRenderer)",
      "1150": "BlockRenderer::::replaceSplitRendererKidFloats(java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,com.itextpdf.layout.renderer.IRenderer)",
      "1151": "BlockRenderer::::replaceSplitRendererKidFloats(java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,com.itextpdf.layout.renderer.IRenderer)",
      "1152": "BlockRenderer::::replaceSplitRendererKidFloats(java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,com.itextpdf.layout.renderer.IRenderer)",
      "1153": "BlockRenderer::::replaceSplitRendererKidFloats(java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,com.itextpdf.layout.renderer.IRenderer)",
      "1154": "BlockRenderer::::replaceSplitRendererKidFloats(java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,com.itextpdf.layout.renderer.IRenderer)",
      "1155": "BlockRenderer::::replaceSplitRendererKidFloats(java.util.Map<java.lang.Integer, com.itextpdf.layout.renderer.IRenderer>,com.itextpdf.layout.renderer.IRenderer)",
      "1157": "BlockRenderer::::addMarkedContent(com.itextpdf.layout.renderer.DrawContext,boolean)",
      "1158": "BlockRenderer::::addMarkedContent(com.itextpdf.layout.renderer.DrawContext,boolean)",
      "1159": "BlockRenderer::::addMarkedContent(com.itextpdf.layout.renderer.DrawContext,boolean)",
      "1160": "BlockRenderer::::addMarkedContent(com.itextpdf.layout.renderer.DrawContext,boolean)",
      "1161": "BlockRenderer::::addMarkedContent(com.itextpdf.layout.renderer.DrawContext,boolean)",
      "1162": "BlockRenderer::::addMarkedContent(com.itextpdf.layout.renderer.DrawContext,boolean)",
      "1163": "BlockRenderer::::addMarkedContent(com.itextpdf.layout.renderer.DrawContext,boolean)",
      "1164": "BlockRenderer::::addMarkedContent(com.itextpdf.layout.renderer.DrawContext,boolean)",
      "1165": "BlockRenderer::::addMarkedContent(com.itextpdf.layout.renderer.DrawContext,boolean)",
      "1166": "BlockRenderer::::addMarkedContent(com.itextpdf.layout.renderer.DrawContext,boolean)"
    },
    "test_reverse_method_lines_dic": {
      "62": "BlockRendererTest::::beforeClass()",
      "63": "BlockRendererTest::::beforeClass()",
      "64": "BlockRendererTest::::beforeClass()",
      "65": "BlockRendererTest::::beforeClass()",
      "67": "BlockRendererTest::::applyMinHeightForSpecificDimensionsCausingFloatPrecisionErrorTest()",
      "68": "BlockRendererTest::::applyMinHeightForSpecificDimensionsCausingFloatPrecisionErrorTest()",
      "69": "BlockRendererTest::::applyMinHeightForSpecificDimensionsCausingFloatPrecisionErrorTest()",
      "70": "BlockRendererTest::::applyMinHeightForSpecificDimensionsCausingFloatPrecisionErrorTest()",
      "71": "BlockRendererTest::::applyMinHeightForSpecificDimensionsCausingFloatPrecisionErrorTest()",
      "72": "BlockRendererTest::::applyMinHeightForSpecificDimensionsCausingFloatPrecisionErrorTest()",
      "73": "BlockRendererTest::::applyMinHeightForSpecificDimensionsCausingFloatPrecisionErrorTest()",
      "74": "BlockRendererTest::::applyMinHeightForSpecificDimensionsCausingFloatPrecisionErrorTest()",
      "75": "BlockRendererTest::::applyMinHeightForSpecificDimensionsCausingFloatPrecisionErrorTest()",
      "76": "BlockRendererTest::::applyMinHeightForSpecificDimensionsCausingFloatPrecisionErrorTest()",
      "77": "BlockRendererTest::::applyMinHeightForSpecificDimensionsCausingFloatPrecisionErrorTest()",
      "78": "BlockRendererTest::::applyMinHeightForSpecificDimensionsCausingFloatPrecisionErrorTest()",
      "79": "BlockRendererTest::::applyMinHeightForSpecificDimensionsCausingFloatPrecisionErrorTest()",
      "80": "BlockRendererTest::::applyMinHeightForSpecificDimensionsCausingFloatPrecisionErrorTest()",
      "81": "BlockRendererTest::::applyMinHeightForSpecificDimensionsCausingFloatPrecisionErrorTest()",
      "82": "BlockRendererTest::::applyMinHeightForSpecificDimensionsCausingFloatPrecisionErrorTest()",
      "83": "BlockRendererTest::::applyMinHeightForSpecificDimensionsCausingFloatPrecisionErrorTest()",
      "84": "BlockRendererTest::::applyMinHeightForSpecificDimensionsCausingFloatPrecisionErrorTest()",
      "86": "BlockRendererTest::::parentBoxWrapAroundChildBoxesTest()",
      "87": "BlockRendererTest::::parentBoxWrapAroundChildBoxesTest()",
      "88": "BlockRendererTest::::parentBoxWrapAroundChildBoxesTest()",
      "89": "BlockRendererTest::::parentBoxWrapAroundChildBoxesTest()",
      "90": "BlockRendererTest::::parentBoxWrapAroundChildBoxesTest()",
      "91": "BlockRendererTest::::parentBoxWrapAroundChildBoxesTest()",
      "92": "BlockRendererTest::::parentBoxWrapAroundChildBoxesTest()",
      "93": "BlockRendererTest::::parentBoxWrapAroundChildBoxesTest()",
      "94": "BlockRendererTest::::parentBoxWrapAroundChildBoxesTest()",
      "95": "BlockRendererTest::::parentBoxWrapAroundChildBoxesTest()",
      "96": "BlockRendererTest::::parentBoxWrapAroundChildBoxesTest()",
      "97": "BlockRendererTest::::parentBoxWrapAroundChildBoxesTest()",
      "98": "BlockRendererTest::::parentBoxWrapAroundChildBoxesTest()",
      "99": "BlockRendererTest::::parentBoxWrapAroundChildBoxesTest()",
      "100": "BlockRendererTest::::parentBoxWrapAroundChildBoxesTest()",
      "101": "BlockRendererTest::::parentBoxWrapAroundChildBoxesTest()",
      "102": "BlockRendererTest::::parentBoxWrapAroundChildBoxesTest()",
      "103": "BlockRendererTest::::parentBoxWrapAroundChildBoxesTest()",
      "104": "BlockRendererTest::::parentBoxWrapAroundChildBoxesTest()",
      "105": "BlockRendererTest::::parentBoxWrapAroundChildBoxesTest()",
      "106": "BlockRendererTest::::parentBoxWrapAroundChildBoxesTest()",
      "107": "BlockRendererTest::::parentBoxWrapAroundChildBoxesTest()",
      "108": "BlockRendererTest::::parentBoxWrapAroundChildBoxesTest()",
      "109": "BlockRendererTest::::parentBoxWrapAroundChildBoxesTest()",
      "110": "BlockRendererTest::::parentBoxWrapAroundChildBoxesTest()",
      "111": "BlockRendererTest::::parentBoxWrapAroundChildBoxesTest()",
      "112": "BlockRendererTest::::parentBoxWrapAroundChildBoxesTest()",
      "113": "BlockRendererTest::::parentBoxWrapAroundChildBoxesTest()",
      "114": "BlockRendererTest::::parentBoxWrapAroundChildBoxesTest()",
      "115": "BlockRendererTest::::parentBoxWrapAroundChildBoxesTest()",
      "116": "BlockRendererTest::::parentBoxWrapAroundChildBoxesTest()",
      "117": "BlockRendererTest::::parentBoxWrapAroundChildBoxesTest()",
      "118": "BlockRendererTest::::parentBoxWrapAroundChildBoxesTest()",
      "119": "BlockRendererTest::::parentBoxWrapAroundChildBoxesTest()",
      "120": "BlockRendererTest::::parentBoxWrapAroundChildBoxesTest()",
      "122": "BlockRendererTest::::resolveFontTest()",
      "123": "BlockRendererTest::::resolveFontTest()",
      "124": "BlockRendererTest::::resolveFontTest()",
      "125": "BlockRendererTest::::resolveFontTest()",
      "126": "BlockRendererTest::::resolveFontTest()",
      "127": "BlockRendererTest::::resolveFontTest()",
      "128": "BlockRendererTest::::resolveFontTest()",
      "129": "BlockRendererTest::::resolveFontTest()",
      "130": "BlockRendererTest::::resolveFontTest()",
      "133": "BlockRendererTest::::resolveFontWithPdfDocumentNullTest()",
      "134": "BlockRendererTest::::resolveFontWithPdfDocumentNullTest()",
      "135": "BlockRendererTest::::resolveFontWithPdfDocumentNullTest()",
      "136": "BlockRendererTest::::resolveFontWithPdfDocumentNullTest()",
      "137": "BlockRendererTest::::resolveFontWithPdfDocumentNullTest()",
      "138": "BlockRendererTest::::resolveFontWithPdfDocumentNullTest()",
      "139": "BlockRendererTest::::resolveFontWithPdfDocumentNullTest()",
      "142": "BlockRendererTest::::resolveFontFromFontProviderTest()",
      "143": "BlockRendererTest::::resolveFontFromFontProviderTest()",
      "144": "BlockRendererTest::::resolveFontFromFontProviderTest()",
      "145": "BlockRendererTest::::resolveFontFromFontProviderTest()",
      "146": "BlockRendererTest::::resolveFontFromFontProviderTest()",
      "147": "BlockRendererTest::::resolveFontFromFontProviderTest()",
      "148": "BlockRendererTest::::resolveFontFromFontProviderTest()",
      "149": "BlockRendererTest::::resolveFontFromFontProviderTest()",
      "150": "BlockRendererTest::::resolveFontFromFontProviderTest()",
      "151": "BlockRendererTest::::resolveFontFromFontProviderTest()",
      "152": "BlockRendererTest::::resolveFontFromFontProviderTest()",
      "153": "BlockRendererTest::::resolveFontFromFontProviderTest()",
      "154": "BlockRendererTest::::resolveFontFromFontProviderTest()",
      "157": "BlockRendererTest::::resolveFontFromFontProviderNullTest()",
      "158": "BlockRendererTest::::resolveFontFromFontProviderNullTest()",
      "159": "BlockRendererTest::::resolveFontFromFontProviderNullTest()",
      "160": "BlockRendererTest::::resolveFontFromFontProviderNullTest()",
      "161": "BlockRendererTest::::resolveFontFromFontProviderNullTest()",
      "162": "BlockRendererTest::::resolveFontFromFontProviderNullTest()",
      "163": "BlockRendererTest::::resolveFontFromFontProviderNullTest()",
      "164": "BlockRendererTest::::resolveFontFromFontProviderNullTest()",
      "165": "BlockRendererTest::::resolveFontFromFontProviderNullTest()",
      "166": "BlockRendererTest::::resolveFontFromFontProviderNullTest()",
      "167": "BlockRendererTest::::resolveFontFromFontProviderNullTest()",
      "169": "BlockRendererTest::::resolveFontFromFontProviderNullAndDocNullTest()",
      "170": "BlockRendererTest::::resolveFontFromFontProviderNullAndDocNullTest()",
      "171": "BlockRendererTest::::resolveFontFromFontProviderNullAndDocNullTest()",
      "172": "BlockRendererTest::::resolveFontFromFontProviderNullAndDocNullTest()",
      "173": "BlockRendererTest::::resolveFontFromFontProviderNullAndDocNullTest()",
      "174": "BlockRendererTest::::resolveFontFromFontProviderNullAndDocNullTest()",
      "175": "BlockRendererTest::::resolveFontFromFontProviderNullAndDocNullTest()",
      "176": "BlockRendererTest::::resolveFontFromFontProviderNullAndDocNullTest()",
      "177": "BlockRendererTest::::resolveFontFromFontProviderNullAndDocNullTest()",
      "178": "BlockRendererTest::::resolveFontFromFontProviderNullAndDocNullTest()"
    },
    "tests": [
      {
        "test_lines": [
          67,
          84
        ],
        "covered_lines": [
          79,
          80,
          1019,
          1020,
          1021,
          1022,
          1023,
          1029,
          1046,
          1050
        ]
      },
      {
        "test_lines": [
          86,
          120
        ],
        "covered_lines": [
          79,
          80,
          87,
          88,
          89,
          90,
          91,
          92,
          93,
          95,
          97,
          99,
          100,
          101,
          103,
          105,
          106,
          107,
          110,
          111,
          114,
          118,
          119,
          121,
          122,
          123,
          128,
          129,
          130,
          132,
          133,
          134,
          138,
          140,
          141,
          143,
          144,
          145,
          148,
          149,
          150,
          153,
          154,
          155,
          158,
          159,
          161,
          164,
          165,
          167,
          169,
          171,
          174,
          177,
          178,
          181,
          182,
          183,
          184,
          186,
          187,
          189,
          195,
          242,
          245,
          246,
          247,
          252,
          254,
          255,
          257,
          262,
          266,
          282,
          287,
          288,
          290,
          296,
          297,
          301,
          316,
          321,
          325,
          326,
          332,
          333,
          336,
          337,
          338,
          340,
          343,
          344,
          345,
          347,
          352,
          359,
          363,
          366,
          370,
          374,
          375,
          376,
          378,
          379,
          380,
          383,
          384,
          390,
          399,
          410,
          411,
          425,
          443,
          446,
          448,
          454,
          455,
          456,
          458,
          460,
          473,
          475,
          477,
          479,
          480,
          481,
          483,
          496,
          497,
          498,
          500,
          503,
          504,
          505,
          520,
          521,
          523,
          524,
          528,
          529,
          531,
          532,
          533,
          535,
          536,
          538,
          539,
          568,
          569,
          570,
          572,
          576,
          577,
          579,
          583,
          590,
          591,
          592,
          596,
          597,
          598,
          609,
          620,
          621,
          622,
          623,
          624,
          625,
          626,
          637,
          638,
          639,
          640,
          641,
          645,
          646,
          655,
          661,
          662,
          663,
          667,
          668,
          669,
          670,
          672,
          673,
          674,
          675,
          677,
          679,
          681,
          686,
          694,
          695,
          696,
          836,
          837,
          848,
          856,
          857,
          860,
          886,
          897,
          924,
          925,
          926,
          928,
          931,
          932,
          934,
          938,
          940,
          946,
          948,
          949,
          950,
          952,
          954,
          958,
          959,
          960,
          962,
          963,
          971,
          972,
          975,
          979,
          984,
          986,
          987,
          991,
          993,
          995,
          999,
          1003,
          1004,
          1019,
          1020,
          1021,
          1050,
          1054,
          1055,
          1078,
          1079,
          1080,
          1081,
          1082,
          1083,
          1084,
          1085,
          1086,
          1087,
          1089,
          1090,
          1091,
          1095,
          1096,
          1097,
          1098,
          1101,
          1102,
          1104,
          1105,
          1106,
          1107,
          1109,
          1114,
          1117,
          1123,
          1127,
          1133,
          1136,
          1143,
          1150,
          1151,
          1155,
          1158,
          1166
        ]
      },
      {
        "test_lines": [
          122,
          130
        ],
        "covered_lines": [
          79,
          80,
          872,
          873,
          874
        ]
      },
      {
        "test_lines": [
          133,
          139
        ],
        "covered_lines": [
          79,
          80,
          872,
          873,
          876,
          879,
          882
        ]
      },
      {
        "test_lines": [
          142,
          154
        ],
        "covered_lines": [
          79,
          80,
          872,
          873,
          876,
          877
        ]
      },
      {
        "test_lines": [
          157,
          167
        ],
        "covered_lines": [
          79,
          80,
          872,
          873,
          876,
          879,
          880
        ]
      },
      {
        "test_lines": [
          169,
          178
        ],
        "covered_lines": [
          79,
          80,
          872,
          873,
          876,
          879,
          882
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/itext-java/layout/src/main/java/com/itextpdf/layout/renderer/TextPreprocessingUtil.java": {
    "class_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.layout.renderer;\n",
      "\n",
      "import com.itextpdf.io.font.FontProgram;\n",
      "import com.itextpdf.io.font.otf.Glyph;\n",
      "import com.itextpdf.io.font.otf.GlyphLine;\n",
      "import com.itextpdf.kernel.font.PdfFont;\n",
      "\n",
      "public final class TextPreprocessingUtil {\n",
      "\n",
      "    private TextPreprocessingUtil() {\n",
      "    }\n",
      "\n",
      "\n",
      "    /**\n",
      "     * Replaces special whitespace glyphs to new whitespace '\\u0020' glyph that has custom width.\n",
      "     * Special whitespace glyphs are symbols such as '\\u2002', '\\u2003', '\\u2009' and '\\t'.\n",
      "     *\n",
      "     * @param line the string for preprocessing\n",
      "     * @param font the font that will be used when displaying the string\n",
      "     *\n",
      "     * @return old line with new special whitespace glyphs\n",
      "     */\n",
      "    public static GlyphLine replaceSpecialWhitespaceGlyphs(GlyphLine line, PdfFont font) {\n",
      "        if (null != line) {\n",
      "            boolean isMonospaceFont = font.getFontProgram().getFontMetrics().isFixedPitch();\n",
      "            Glyph space = font.getGlyph('\\u0020');\n",
      "            int spaceWidth = space.getWidth();\n",
      "            int lineSize = line.size();\n",
      "            for (int i = 0; i < lineSize; i++) {\n",
      "                final Glyph glyph = line.get(i);\n",
      "                final Integer xAdvance = calculateXAdvancement(spaceWidth, isMonospaceFont, glyph);\n",
      "                final boolean isSpecialWhitespaceGlyph = xAdvance != null;\n",
      "                if (isSpecialWhitespaceGlyph) {\n",
      "                    Glyph newGlyph = new Glyph(space);\n",
      "                    newGlyph.setChars(glyph.getChars());\n",
      "                    assert xAdvance <= Short.MAX_VALUE && xAdvance >= Short.MIN_VALUE;\n",
      "                    newGlyph.setXAdvance((short) (int) xAdvance);\n",
      "                    line.set(i, newGlyph);\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "        return line;\n",
      "    }\n",
      "\n",
      "    static final int NON_MONO_SPACE_ENSP_WIDTH = 500;\n",
      "    static final int NON_MONO_SPACE_THINSP_WIDTH = 200;\n",
      "    static final int AMOUNT_OF_SPACE_IN_TAB = 3;\n",
      "\n",
      "    private static Integer calculateXAdvancement(int spaceWidth, boolean isMonospaceFont, Glyph glyph) {\n",
      "        Integer xAdvance = null;\n",
      "        if (glyph.getCode() <= 0) {\n",
      "\n",
      "            switch (glyph.getUnicode()) {\n",
      "                // ensp\n",
      "                case '\\u2002':\n",
      "                    xAdvance = isMonospaceFont ? 0 : (NON_MONO_SPACE_ENSP_WIDTH - spaceWidth);\n",
      "                    break;\n",
      "                // emsp\n",
      "                case '\\u2003':\n",
      "                    xAdvance = isMonospaceFont ? 0 : (FontProgram.UNITS_NORMALIZATION - spaceWidth);\n",
      "                    break;\n",
      "                // thinsp\n",
      "                case '\\u2009':\n",
      "                    xAdvance = isMonospaceFont ? 0 : (NON_MONO_SPACE_THINSP_WIDTH - spaceWidth);\n",
      "                    break;\n",
      "                case '\\t':\n",
      "                    xAdvance = AMOUNT_OF_SPACE_IN_TAB * spaceWidth;\n",
      "                    break;\n",
      "                default:\n",
      "                    return xAdvance;\n",
      "            }\n",
      "        }\n",
      "        return xAdvance;\n",
      "    }\n",
      "\n",
      "\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.layout.renderer;\n",
      "\n",
      "import com.itextpdf.io.font.otf.Glyph;\n",
      "import com.itextpdf.io.font.otf.GlyphLine;\n",
      "import com.itextpdf.io.util.TextUtil;\n",
      "import com.itextpdf.kernel.font.PdfFont;\n",
      "import com.itextpdf.kernel.font.PdfFontFactory;\n",
      "import com.itextpdf.test.ExtendedITextTest;\n",
      "import com.itextpdf.test.annotations.type.UnitTest;\n",
      "\n",
      "import java.io.IOException;\n",
      "\n",
      "import org.junit.Assert;\n",
      "import org.junit.BeforeClass;\n",
      "import org.junit.Test;\n",
      "import org.junit.experimental.categories.Category;\n",
      "\n",
      "@Category(UnitTest.class)\n",
      "public class TextPreprocessingUtilTest extends ExtendedITextTest {\n",
      "    private static PdfFont pdfFont;\n",
      "\n",
      "    @BeforeClass\n",
      "    public static void initializeFont() throws IOException {\n",
      "        pdfFont = PdfFontFactory.createFont();\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void enSpaceTest() {\n",
      "        specialWhitespaceGlyphTest('\\u2002');\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void emSpaceTest() {\n",
      "        specialWhitespaceGlyphTest('\\u2003');\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void thinSpaceTest() {\n",
      "        specialWhitespaceGlyphTest('\\u2009');\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void horizontalTabulationTest() {\n",
      "        specialWhitespaceGlyphTest('\\t');\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void regularSymbolTest() {\n",
      "        GlyphLine glyphLine = new GlyphLine();\n",
      "        Glyph regularGlyph = pdfFont.getGlyph('a');\n",
      "        glyphLine.add(0, regularGlyph);\n",
      "\n",
      "        TextPreprocessingUtil.replaceSpecialWhitespaceGlyphs(glyphLine, pdfFont);\n",
      "\n",
      "        Glyph glyph = glyphLine.get(0);\n",
      "        Assert.assertEquals(regularGlyph, glyph);\n",
      "    }\n",
      "\n",
      "    private void specialWhitespaceGlyphTest(int unicode) {\n",
      "        GlyphLine glyphLine = new GlyphLine();\n",
      "        // Create a new glyph, because it is a special glyph, and it is not contained in the regular font\n",
      "        glyphLine.add(0, new Glyph(0, unicode));\n",
      "\n",
      "        TextPreprocessingUtil.replaceSpecialWhitespaceGlyphs(glyphLine, pdfFont);\n",
      "\n",
      "        Glyph glyph = glyphLine.get(0);\n",
      "        Glyph space = pdfFont.getGlyph('\\u0020');\n",
      "        Assert.assertEquals(space.getCode(), glyph.getCode());\n",
      "        Assert.assertEquals(space.getWidth(), glyph.getWidth());\n",
      "        Assert.assertEquals(space.getUnicode(), glyph.getUnicode());\n",
      "        Assert.assertArrayEquals(TextUtil.convertFromUtf32(unicode), glyph.getChars());\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {},
    "test_method_lines_dic": {
      "TextPreprocessingUtilTest::::initializeFont()": [
        44,
        47
      ],
      "TextPreprocessingUtilTest::::enSpaceTest()": [
        49,
        52
      ],
      "TextPreprocessingUtilTest::::emSpaceTest()": [
        54,
        57
      ],
      "TextPreprocessingUtilTest::::thinSpaceTest()": [
        59,
        62
      ],
      "TextPreprocessingUtilTest::::horizontalTabulationTest()": [
        64,
        67
      ],
      "TextPreprocessingUtilTest::::regularSymbolTest()": [
        69,
        79
      ],
      "TextPreprocessingUtilTest::::specialWhitespaceGlyphTest(int)": [
        81,
        94
      ]
    },
    "reverse_method_lines_dic": {},
    "test_reverse_method_lines_dic": {
      "44": "TextPreprocessingUtilTest::::initializeFont()",
      "45": "TextPreprocessingUtilTest::::initializeFont()",
      "46": "TextPreprocessingUtilTest::::initializeFont()",
      "47": "TextPreprocessingUtilTest::::initializeFont()",
      "49": "TextPreprocessingUtilTest::::enSpaceTest()",
      "50": "TextPreprocessingUtilTest::::enSpaceTest()",
      "51": "TextPreprocessingUtilTest::::enSpaceTest()",
      "52": "TextPreprocessingUtilTest::::enSpaceTest()",
      "54": "TextPreprocessingUtilTest::::emSpaceTest()",
      "55": "TextPreprocessingUtilTest::::emSpaceTest()",
      "56": "TextPreprocessingUtilTest::::emSpaceTest()",
      "57": "TextPreprocessingUtilTest::::emSpaceTest()",
      "59": "TextPreprocessingUtilTest::::thinSpaceTest()",
      "60": "TextPreprocessingUtilTest::::thinSpaceTest()",
      "61": "TextPreprocessingUtilTest::::thinSpaceTest()",
      "62": "TextPreprocessingUtilTest::::thinSpaceTest()",
      "64": "TextPreprocessingUtilTest::::horizontalTabulationTest()",
      "65": "TextPreprocessingUtilTest::::horizontalTabulationTest()",
      "66": "TextPreprocessingUtilTest::::horizontalTabulationTest()",
      "67": "TextPreprocessingUtilTest::::horizontalTabulationTest()",
      "69": "TextPreprocessingUtilTest::::regularSymbolTest()",
      "70": "TextPreprocessingUtilTest::::regularSymbolTest()",
      "71": "TextPreprocessingUtilTest::::regularSymbolTest()",
      "72": "TextPreprocessingUtilTest::::regularSymbolTest()",
      "73": "TextPreprocessingUtilTest::::regularSymbolTest()",
      "74": "TextPreprocessingUtilTest::::regularSymbolTest()",
      "75": "TextPreprocessingUtilTest::::regularSymbolTest()",
      "76": "TextPreprocessingUtilTest::::regularSymbolTest()",
      "77": "TextPreprocessingUtilTest::::regularSymbolTest()",
      "78": "TextPreprocessingUtilTest::::regularSymbolTest()",
      "79": "TextPreprocessingUtilTest::::regularSymbolTest()",
      "81": "TextPreprocessingUtilTest::::specialWhitespaceGlyphTest(int)",
      "82": "TextPreprocessingUtilTest::::specialWhitespaceGlyphTest(int)",
      "83": "TextPreprocessingUtilTest::::specialWhitespaceGlyphTest(int)",
      "84": "TextPreprocessingUtilTest::::specialWhitespaceGlyphTest(int)",
      "85": "TextPreprocessingUtilTest::::specialWhitespaceGlyphTest(int)",
      "86": "TextPreprocessingUtilTest::::specialWhitespaceGlyphTest(int)",
      "87": "TextPreprocessingUtilTest::::specialWhitespaceGlyphTest(int)",
      "88": "TextPreprocessingUtilTest::::specialWhitespaceGlyphTest(int)",
      "89": "TextPreprocessingUtilTest::::specialWhitespaceGlyphTest(int)",
      "90": "TextPreprocessingUtilTest::::specialWhitespaceGlyphTest(int)",
      "91": "TextPreprocessingUtilTest::::specialWhitespaceGlyphTest(int)",
      "92": "TextPreprocessingUtilTest::::specialWhitespaceGlyphTest(int)",
      "93": "TextPreprocessingUtilTest::::specialWhitespaceGlyphTest(int)",
      "94": "TextPreprocessingUtilTest::::specialWhitespaceGlyphTest(int)"
    },
    "tests": [
      {
        "test_lines": [
          49,
          52
        ],
        "covered_lines": [
          30,
          46,
          47,
          48,
          49,
          50,
          51,
          52,
          53,
          54,
          55,
          56,
          57,
          58,
          59,
          60,
          64,
          72,
          73,
          75,
          78,
          79,
          95
        ]
      },
      {
        "test_lines": [
          54,
          57
        ],
        "covered_lines": [
          30,
          46,
          47,
          48,
          49,
          50,
          51,
          52,
          53,
          54,
          55,
          56,
          57,
          58,
          59,
          60,
          64,
          72,
          73,
          75,
          82,
          83,
          95
        ]
      },
      {
        "test_lines": [
          59,
          62
        ],
        "covered_lines": [
          30,
          46,
          47,
          48,
          49,
          50,
          51,
          52,
          53,
          54,
          55,
          56,
          57,
          58,
          59,
          60,
          64,
          72,
          73,
          75,
          86,
          87,
          95
        ]
      },
      {
        "test_lines": [
          64,
          67
        ],
        "covered_lines": [
          30,
          46,
          47,
          48,
          49,
          50,
          51,
          52,
          53,
          54,
          55,
          56,
          57,
          58,
          59,
          60,
          64,
          72,
          73,
          75,
          89,
          90,
          95
        ]
      },
      {
        "test_lines": [
          69,
          79
        ],
        "covered_lines": [
          30,
          46,
          47,
          48,
          49,
          50,
          51,
          52,
          53,
          54,
          55,
          64,
          72,
          73,
          95
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/itext-java/layout/src/main/java/com/itextpdf/layout/renderer/TextRenderer.java": {
    "class_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.layout.renderer;\n",
      "\n",
      "import com.itextpdf.commons.actions.contexts.IMetaInfo;\n",
      "import com.itextpdf.commons.actions.sequence.SequenceId;\n",
      "import com.itextpdf.commons.datastructures.Tuple2;\n",
      "import com.itextpdf.commons.utils.MessageFormatUtil;\n",
      "import com.itextpdf.io.font.FontMetrics;\n",
      "import com.itextpdf.io.font.FontProgram;\n",
      "import com.itextpdf.io.font.TrueTypeFont;\n",
      "import com.itextpdf.io.font.otf.Glyph;\n",
      "import com.itextpdf.io.font.otf.GlyphLine;\n",
      "import com.itextpdf.io.logs.IoLogMessageConstant;\n",
      "import com.itextpdf.io.util.EnumUtil;\n",
      "import com.itextpdf.io.util.TextUtil;\n",
      "import com.itextpdf.kernel.colors.Color;\n",
      "import com.itextpdf.kernel.font.PdfFont;\n",
      "import com.itextpdf.kernel.font.PdfType0Font;\n",
      "import com.itextpdf.kernel.font.PdfType1Font;\n",
      "import com.itextpdf.kernel.geom.Rectangle;\n",
      "import com.itextpdf.kernel.pdf.PdfDocument;\n",
      "import com.itextpdf.kernel.pdf.canvas.CanvasArtifact;\n",
      "import com.itextpdf.kernel.pdf.canvas.PdfCanvas;\n",
      "import com.itextpdf.kernel.pdf.canvas.PdfCanvasConstants;\n",
      "import com.itextpdf.kernel.pdf.tagutils.TagTreePointer;\n",
      "import com.itextpdf.layout.borders.Border;\n",
      "import com.itextpdf.layout.element.Text;\n",
      "import com.itextpdf.layout.exceptions.LayoutExceptionMessageConstant;\n",
      "import com.itextpdf.layout.font.FontCharacteristics;\n",
      "import com.itextpdf.layout.font.FontProvider;\n",
      "import com.itextpdf.layout.font.FontSet;\n",
      "import com.itextpdf.layout.font.selectorstrategy.IFontSelectorStrategy;\n",
      "import com.itextpdf.layout.hyphenation.Hyphenation;\n",
      "import com.itextpdf.layout.hyphenation.HyphenationConfig;\n",
      "import com.itextpdf.layout.layout.LayoutArea;\n",
      "import com.itextpdf.layout.layout.LayoutContext;\n",
      "import com.itextpdf.layout.layout.LayoutResult;\n",
      "import com.itextpdf.layout.layout.TextLayoutResult;\n",
      "import com.itextpdf.layout.minmaxwidth.MinMaxWidth;\n",
      "import com.itextpdf.layout.minmaxwidth.MinMaxWidthUtils;\n",
      "import com.itextpdf.layout.properties.BaseDirection;\n",
      "import com.itextpdf.layout.properties.FloatPropertyValue;\n",
      "import com.itextpdf.layout.properties.FontKerning;\n",
      "import com.itextpdf.layout.properties.OverflowPropertyValue;\n",
      "import com.itextpdf.layout.properties.OverflowWrapPropertyValue;\n",
      "import com.itextpdf.layout.properties.Property;\n",
      "import com.itextpdf.layout.properties.RenderingMode;\n",
      "import com.itextpdf.layout.properties.TransparentColor;\n",
      "import com.itextpdf.layout.properties.Underline;\n",
      "import com.itextpdf.layout.properties.UnitValue;\n",
      "import com.itextpdf.layout.splitting.BreakAllSplitCharacters;\n",
      "import com.itextpdf.layout.splitting.ISplitCharacters;\n",
      "import com.itextpdf.layout.tagging.LayoutTaggingHelper;\n",
      "\n",
      "import java.util.ArrayList;\n",
      "import java.util.Arrays;\n",
      "import java.util.Collection;\n",
      "import java.util.Collections;\n",
      "import java.util.Iterator;\n",
      "import java.util.List;\n",
      "import org.slf4j.Logger;\n",
      "import org.slf4j.LoggerFactory;\n",
      "\n",
      "/**\n",
      " * This class represents the {@link IRenderer renderer} object for a {@link Text}\n",
      " * object. It will draw the glyphs of the textual content on the {@link DrawContext}.\n",
      " */\n",
      "public class TextRenderer extends AbstractRenderer implements ILeafElementRenderer {\n",
      "\n",
      "    protected static final float TEXT_SPACE_COEFF = FontProgram.UNITS_NORMALIZATION;\n",
      "    static final float TYPO_ASCENDER_SCALE_COEFF = 1.2f;\n",
      "    static final int UNDEFINED_FIRST_CHAR_TO_FORCE_OVERFLOW = Integer.MAX_VALUE;\n",
      "\n",
      "    private static final float ITALIC_ANGLE = 0.21256f;\n",
      "    private static final float BOLD_SIMULATION_STROKE_COEFF = 1 / 30f;\n",
      "\n",
      "    protected float yLineOffset;\n",
      "\n",
      "    private PdfFont font;\n",
      "    protected GlyphLine text;\n",
      "    protected GlyphLine line;\n",
      "    protected String strToBeConverted;\n",
      "\n",
      "    protected boolean otfFeaturesApplied = false;\n",
      "\n",
      "    protected float tabAnchorCharacterPosition = -1;\n",
      "\n",
      "    protected List<int[]> reversedRanges;\n",
      "\n",
      "    protected GlyphLine savedWordBreakAtLineEnding;\n",
      "\n",
      "    // if list is null, presence of special scripts in the TextRenderer#text hasn't been checked yet\n",
      "    // if list is empty, TextRenderer#text has been analyzed and no special scripts have been detected\n",
      "    // if list contains -1, TextRenderer#text contains special scripts, but no word break is possible within it\n",
      "    // Must remain ArrayList: once an instance is formed and filled prior to layouting on split of this TextRenderer,\n",
      "    // it's used to get element by index or passed to List.subList()\n",
      "    private List<Integer> specialScriptsWordBreakPoints;\n",
      "    private int specialScriptFirstNotFittingIndex = -1;\n",
      "    private int indexOfFirstCharacterToBeForcedToOverflow = UNDEFINED_FIRST_CHAR_TO_FORCE_OVERFLOW;\n",
      "\n",
      "    /**\n",
      "     * Creates a TextRenderer from its corresponding layout object.\n",
      "     *\n",
      "     * @param textElement the {@link Text} which this object should manage\n",
      "     */\n",
      "    public TextRenderer(Text textElement) {\n",
      "        this(textElement, textElement.getText());\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Creates a TextRenderer from its corresponding layout object, with a custom\n",
      "     * text to replace the contents of the {@link Text}.\n",
      "     *\n",
      "     * @param textElement the {@link Text} which this object should manage\n",
      "     * @param text        the replacement text\n",
      "     */\n",
      "    public TextRenderer(Text textElement, String text) {\n",
      "        super(textElement);\n",
      "        this.strToBeConverted = text;\n",
      "    }\n",
      "\n",
      "    protected TextRenderer(TextRenderer other) {\n",
      "        super(other);\n",
      "        this.text = other.text;\n",
      "        this.line = other.line;\n",
      "        this.font = other.font;\n",
      "        this.yLineOffset = other.yLineOffset;\n",
      "        this.strToBeConverted = other.strToBeConverted;\n",
      "        this.otfFeaturesApplied = other.otfFeaturesApplied;\n",
      "        this.tabAnchorCharacterPosition = other.tabAnchorCharacterPosition;\n",
      "        this.reversedRanges = other.reversedRanges;\n",
      "        this.specialScriptsWordBreakPoints = other.specialScriptsWordBreakPoints;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public LayoutResult layout(LayoutContext layoutContext) {\n",
      "        updateFontAndText();\n",
      "\n",
      "        LayoutArea area = layoutContext.getArea();\n",
      "        Rectangle layoutBox = area.getBBox().clone();\n",
      "\n",
      "        boolean noSoftWrap = Boolean.TRUE.equals(this.parent.<Boolean>getOwnProperty(Property.NO_SOFT_WRAP_INLINE));\n",
      "\n",
      "        OverflowPropertyValue overflowX = this.parent.<OverflowPropertyValue>getProperty(Property.OVERFLOW_X);\n",
      "\n",
      "        OverflowWrapPropertyValue overflowWrap = this.<OverflowWrapPropertyValue>getProperty(Property.OVERFLOW_WRAP);\n",
      "        boolean overflowWrapNotNormal = overflowWrap == OverflowWrapPropertyValue.ANYWHERE\n",
      "                || overflowWrap == OverflowWrapPropertyValue.BREAK_WORD;\n",
      "        if (overflowWrapNotNormal) {\n",
      "            overflowX = OverflowPropertyValue.FIT;\n",
      "        }\n",
      "\n",
      "        List<Rectangle> floatRendererAreas = layoutContext.getFloatRendererAreas();\n",
      "        FloatPropertyValue floatPropertyValue = this.<FloatPropertyValue>getProperty(Property.FLOAT);\n",
      "\n",
      "        if (FloatingHelper.isRendererFloating(this, floatPropertyValue)) {\n",
      "            FloatingHelper.adjustFloatedBlockLayoutBox(this, layoutBox, null, floatRendererAreas, floatPropertyValue, overflowX);\n",
      "        }\n",
      "\n",
      "        float preMarginBorderPaddingWidth = layoutBox.getWidth();\n",
      "        UnitValue[] margins = getMargins();\n",
      "        applyMargins(layoutBox, margins, false);\n",
      "        Border[] borders = getBorders();\n",
      "        applyBorderBox(layoutBox, borders, false);\n",
      "\n",
      "        UnitValue[] paddings = getPaddings();\n",
      "        applyPaddings(layoutBox, paddings, false);\n",
      "\n",
      "        MinMaxWidth countedMinMaxWidth = new MinMaxWidth(preMarginBorderPaddingWidth - layoutBox.getWidth());\n",
      "        AbstractWidthHandler widthHandler;\n",
      "        if (noSoftWrap) {\n",
      "            widthHandler = new SumSumWidthHandler(countedMinMaxWidth);\n",
      "        } else {\n",
      "            widthHandler = new MaxSumWidthHandler(countedMinMaxWidth);\n",
      "        }\n",
      "\n",
      "        float leftMinWidth = -1f;\n",
      "        float[] leftMarginBorderPadding = {margins[LEFT_SIDE].getValue(),\n",
      "                borders[LEFT_SIDE] == null ? 0.0f : borders[LEFT_SIDE].getWidth(),\n",
      "                paddings[LEFT_SIDE].getValue()};\n",
      "        float rightMinWidth = -1f;\n",
      "        float[] rightMarginBorderPadding = {margins[RIGHT_SIDE].getValue(),\n",
      "                borders[RIGHT_SIDE] == null ? 0.0f : borders[RIGHT_SIDE].getWidth(),\n",
      "                paddings[RIGHT_SIDE].getValue()};\n",
      "\n",
      "        occupiedArea = new LayoutArea(area.getPageNumber(), new Rectangle(layoutBox.getX(), layoutBox.getY() + layoutBox.getHeight(), 0, 0));\n",
      "\n",
      "        TargetCounterHandler.addPageByID(this);\n",
      "\n",
      "        boolean anythingPlaced = false;\n",
      "\n",
      "        int currentTextPos = text.start;\n",
      "        UnitValue fontSize = (UnitValue) this.getPropertyAsUnitValue(Property.FONT_SIZE);\n",
      "        if (!fontSize.isPointValue()) {\n",
      "            Logger logger = LoggerFactory.getLogger(TextRenderer.class);\n",
      "            logger.error(MessageFormatUtil.format(IoLogMessageConstant.PROPERTY_IN_PERCENTS_NOT_SUPPORTED,\n",
      "                    Property.FONT_SIZE));\n",
      "        }\n",
      "        float textRise = (float) this.getPropertyAsFloat(Property.TEXT_RISE);\n",
      "        Float characterSpacing = this.getPropertyAsFloat(Property.CHARACTER_SPACING);\n",
      "        Float wordSpacing = this.getPropertyAsFloat(Property.WORD_SPACING);\n",
      "        float hScale = (float) this.getProperty(Property.HORIZONTAL_SCALING, (Float) 1f);\n",
      "        ISplitCharacters splitCharacters = this.<ISplitCharacters>getProperty(Property.SPLIT_CHARACTERS);\n",
      "        float italicSkewAddition = Boolean.TRUE.equals(getPropertyAsBoolean(Property.ITALIC_SIMULATION)) ? ITALIC_ANGLE * fontSize.getValue() : 0;\n",
      "        float boldSimulationAddition = Boolean.TRUE.equals(getPropertyAsBoolean(Property.BOLD_SIMULATION)) ? BOLD_SIMULATION_STROKE_COEFF * fontSize.getValue() : 0;\n",
      "\n",
      "        line = new GlyphLine(text);\n",
      "        line.start = line.end = -1;\n",
      "\n",
      "        float ascender = 0;\n",
      "        float descender = 0;\n",
      "\n",
      "        float currentLineAscender = 0;\n",
      "        float currentLineDescender = 0;\n",
      "        float currentLineHeight = 0;\n",
      "        int initialLineTextPos = currentTextPos;\n",
      "        float currentLineWidth = 0;\n",
      "        int previousCharPos = -1;\n",
      "\n",
      "        RenderingMode mode = this.<RenderingMode>getProperty(Property.RENDERING_MODE);\n",
      "        float[] ascenderDescender = calculateAscenderDescender(font, mode);\n",
      "        ascender = ascenderDescender[0];\n",
      "        descender = ascenderDescender[1];\n",
      "        if (RenderingMode.HTML_MODE.equals(mode)) {\n",
      "            currentLineAscender = ascenderDescender[0];\n",
      "            currentLineDescender = ascenderDescender[1];\n",
      "            currentLineHeight = (currentLineAscender - currentLineDescender) * FontProgram.convertTextSpaceToGlyphSpace(\n",
      "                    fontSize.getValue()) + textRise;\n",
      "        }\n",
      "\n",
      "        savedWordBreakAtLineEnding = null;\n",
      "        Glyph wordBreakGlyphAtLineEnding = null;\n",
      "\n",
      "        Character tabAnchorCharacter = this.<Character>getProperty(Property.TAB_ANCHOR);\n",
      "\n",
      "        TextLayoutResult result = null;\n",
      "\n",
      "        OverflowPropertyValue overflowY = !layoutContext.isClippedHeight()\n",
      "                ? OverflowPropertyValue.FIT\n",
      "                : this.parent.<OverflowPropertyValue>getProperty(Property.OVERFLOW_Y);\n",
      "\n",
      "        // true in situations like \"\\nHello World\" or \"Hello\\nWorld\"\n",
      "        boolean isSplitForcedByNewLine = false;\n",
      "        // needed in situation like \"\\nHello World\" or \" Hello World\", when split occurs on first character, but we want to leave it on previous line\n",
      "        boolean forcePartialSplitOnFirstChar = false;\n",
      "        // true in situations like \"Hello\\nWorld\"\n",
      "        boolean ignoreNewLineSymbol = false;\n",
      "        // true when \\r\\n are found\n",
      "        boolean crlf = false;\n",
      "\n",
      "        boolean containsPossibleBreak = false;\n",
      "\n",
      "        HyphenationConfig hyphenationConfig = this.<HyphenationConfig>getProperty(Property.HYPHENATION);\n",
      "\n",
      "        // For example, if a first character is a RTL mark (U+200F), and the second is a newline, we need to break anyway\n",
      "        int firstPrintPos = currentTextPos;\n",
      "        while (firstPrintPos < text.end && noPrint(text.get(firstPrintPos))) {\n",
      "            firstPrintPos++;\n",
      "        }\n",
      "\n",
      "        while (currentTextPos < text.end) {\n",
      "            if (noPrint(text.get(currentTextPos))) {\n",
      "                if (line.start == -1) {\n",
      "                    line.start = currentTextPos;\n",
      "                }\n",
      "                line.end = Math.max(line.end, currentTextPos + 1);\n",
      "                currentTextPos++;\n",
      "                continue;\n",
      "            }\n",
      "\n",
      "            int nonBreakablePartEnd = text.end - 1;\n",
      "            float nonBreakablePartFullWidth = 0;\n",
      "            float nonBreakablePartWidthWhichDoesNotExceedAllowedWidth = 0;\n",
      "            float nonBreakablePartMaxAscender = 0;\n",
      "            float nonBreakablePartMaxDescender = 0;\n",
      "            float nonBreakablePartMaxHeight = 0;\n",
      "            int firstCharacterWhichExceedsAllowedWidth = -1;\n",
      "            float nonBreakingHyphenRelatedChunkWidth = 0;\n",
      "            int nonBreakingHyphenRelatedChunkStart = -1;\n",
      "            float beforeNonBreakingHyphenRelatedChunkMaxAscender = 0;\n",
      "            float beforeNonBreakingHyphenRelatedChunkMaxDescender = 0;\n",
      "\n",
      "            for (int ind = currentTextPos; ind < text.end; ind++) {\n",
      "                if (TextUtil.isNewLine(text.get(ind))) {\n",
      "                    containsPossibleBreak = true;\n",
      "                    wordBreakGlyphAtLineEnding = text.get(ind);\n",
      "                    isSplitForcedByNewLine = true;\n",
      "                    firstCharacterWhichExceedsAllowedWidth = ind + 1;\n",
      "                    if (ind != firstPrintPos) {\n",
      "                        ignoreNewLineSymbol = true;\n",
      "                    } else {\n",
      "                        // Notice that in that case we do not need to ignore the new line symbol ('\\n')\n",
      "                        forcePartialSplitOnFirstChar = true;\n",
      "                    }\n",
      "\n",
      "                    if (line.start == -1) {\n",
      "                        line.start = currentTextPos;\n",
      "                    }\n",
      "\n",
      "                    crlf = TextUtil.isCarriageReturnFollowedByLineFeed(text, currentTextPos);\n",
      "\n",
      "                    if (crlf) {\n",
      "                        currentTextPos++;\n",
      "                    }\n",
      "\n",
      "                    line.end = Math.max(line.end, firstCharacterWhichExceedsAllowedWidth - 1);\n",
      "                    break;\n",
      "                }\n",
      "\n",
      "                Glyph currentGlyph = text.get(ind);\n",
      "                if (noPrint(currentGlyph)) {\n",
      "                    boolean nextGlyphIsSpaceOrWhiteSpace = ind + 1 < text.end\n",
      "                            && (splitCharacters.isSplitCharacter(text, ind + 1)\n",
      "                            && TextUtil.isSpaceOrWhitespace(text.get(ind + 1)));\n",
      "                    if (nextGlyphIsSpaceOrWhiteSpace && firstCharacterWhichExceedsAllowedWidth == -1) {\n",
      "                        containsPossibleBreak = true;\n",
      "                    }\n",
      "                    if (ind + 1 == text.end || nextGlyphIsSpaceOrWhiteSpace\n",
      "                            || (ind + 1 >= indexOfFirstCharacterToBeForcedToOverflow)) {\n",
      "                        if (ind + 1 >= indexOfFirstCharacterToBeForcedToOverflow) {\n",
      "                            firstCharacterWhichExceedsAllowedWidth = currentTextPos;\n",
      "                            break;\n",
      "                        } else {\n",
      "                            nonBreakablePartEnd = ind;\n",
      "                            break;\n",
      "                        }\n",
      "                    }\n",
      "                    continue;\n",
      "                }\n",
      "                if (tabAnchorCharacter != null && tabAnchorCharacter == text.get(ind).getUnicode()) {\n",
      "                    tabAnchorCharacterPosition = currentLineWidth + nonBreakablePartFullWidth;\n",
      "                    tabAnchorCharacter = null;\n",
      "                }\n",
      "\n",
      "                final float glyphWidth = FontProgram.convertTextSpaceToGlyphSpace(\n",
      "                        getCharWidth(currentGlyph, fontSize.getValue(), hScale, characterSpacing, wordSpacing));\n",
      "                float xAdvance = previousCharPos != -1 ? text.get(previousCharPos).getXAdvance() : 0;\n",
      "                if (xAdvance != 0) {\n",
      "                    xAdvance = FontProgram.convertTextSpaceToGlyphSpace(\n",
      "                            scaleXAdvance(xAdvance, fontSize.getValue(), hScale));\n",
      "                }\n",
      "\n",
      "                final float potentialWidth =\n",
      "                        nonBreakablePartFullWidth + glyphWidth + xAdvance + italicSkewAddition + boldSimulationAddition;\n",
      "                final boolean symbolNotFitOnLine = potentialWidth > layoutBox.getWidth() - currentLineWidth + EPS;\n",
      "                if ((!noSoftWrap && symbolNotFitOnLine && firstCharacterWhichExceedsAllowedWidth == -1)\n",
      "                        || ind == specialScriptFirstNotFittingIndex) {\n",
      "                    firstCharacterWhichExceedsAllowedWidth = ind;\n",
      "                    boolean spaceOrWhitespace = TextUtil.isSpaceOrWhitespace(text.get(ind));\n",
      "                    OverflowPropertyValue parentOverflowX = parent.<OverflowPropertyValue>getProperty(Property.OVERFLOW_X);\n",
      "                    if (spaceOrWhitespace || overflowWrapNotNormal && !isOverflowFit(parentOverflowX)) {\n",
      "                        if (spaceOrWhitespace) {\n",
      "                            wordBreakGlyphAtLineEnding = currentGlyph;\n",
      "                        }\n",
      "                        if (ind == firstPrintPos) {\n",
      "                            containsPossibleBreak = true;\n",
      "                            forcePartialSplitOnFirstChar = true;\n",
      "                            firstCharacterWhichExceedsAllowedWidth = ind + 1;\n",
      "                            break;\n",
      "                        }\n",
      "                    }\n",
      "                }\n",
      "\n",
      "                if (null != hyphenationConfig) {\n",
      "                    if (glyphBelongsToNonBreakingHyphenRelatedChunk(text, ind)) {\n",
      "                        if (-1 == nonBreakingHyphenRelatedChunkStart) {\n",
      "                            beforeNonBreakingHyphenRelatedChunkMaxAscender = nonBreakablePartMaxAscender;\n",
      "                            beforeNonBreakingHyphenRelatedChunkMaxDescender = nonBreakablePartMaxDescender;\n",
      "                            nonBreakingHyphenRelatedChunkStart = ind;\n",
      "                        }\n",
      "                        nonBreakingHyphenRelatedChunkWidth += glyphWidth + xAdvance;\n",
      "                    } else {\n",
      "                        nonBreakingHyphenRelatedChunkStart = -1;\n",
      "                        nonBreakingHyphenRelatedChunkWidth = 0;\n",
      "                    }\n",
      "                }\n",
      "                if (firstCharacterWhichExceedsAllowedWidth == -1 || !isOverflowFit(overflowX)) {\n",
      "                    nonBreakablePartWidthWhichDoesNotExceedAllowedWidth += glyphWidth + xAdvance;\n",
      "                }\n",
      "                nonBreakablePartFullWidth += glyphWidth + xAdvance;\n",
      "\n",
      "                nonBreakablePartMaxAscender = Math.max(nonBreakablePartMaxAscender, ascender);\n",
      "                nonBreakablePartMaxDescender = Math.min(nonBreakablePartMaxDescender, descender);\n",
      "                nonBreakablePartMaxHeight = FontProgram.convertTextSpaceToGlyphSpace(\n",
      "                        (nonBreakablePartMaxAscender - nonBreakablePartMaxDescender) * fontSize.getValue()) + textRise;\n",
      "\n",
      "                previousCharPos = ind;\n",
      "\n",
      "                if (!noSoftWrap && symbolNotFitOnLine\n",
      "                        && (0 == nonBreakingHyphenRelatedChunkWidth || ind + 1 == text.end || !glyphBelongsToNonBreakingHyphenRelatedChunk(text, ind + 1))) {\n",
      "                    if (isOverflowFit(overflowX)) {\n",
      "                        // we have extracted all the information we wanted and we do not want to continue.\n",
      "                        // we will have to split the word anyway.\n",
      "                        break;\n",
      "                    }\n",
      "                }\n",
      "\n",
      "                if (OverflowWrapPropertyValue.ANYWHERE == overflowWrap) {\n",
      "                    float childMinWidth = (float) ((double) glyphWidth + (double) xAdvance + (double) italicSkewAddition\n",
      "                            + (double) boldSimulationAddition);\n",
      "                    if (leftMinWidth == -1f) {\n",
      "                        leftMinWidth = childMinWidth;\n",
      "                    } else {\n",
      "                        rightMinWidth = childMinWidth;\n",
      "                    }\n",
      "                    widthHandler.updateMinChildWidth(childMinWidth);\n",
      "                    widthHandler.updateMaxChildWidth((float) ((double) glyphWidth + (double) xAdvance));\n",
      "                }\n",
      "\n",
      "                boolean endOfWordBelongingToSpecialScripts = textContainsSpecialScriptGlyphs(true)\n",
      "                        && findPossibleBreaksSplitPosition(specialScriptsWordBreakPoints,\n",
      "                        ind + 1, true) >= 0;\n",
      "                boolean endOfNonBreakablePartCausedBySplitCharacter = splitCharacters.isSplitCharacter(text, ind)\n",
      "                        || (ind + 1 < text.end\n",
      "                        && (splitCharacters.isSplitCharacter(text, ind + 1)\n",
      "                        && TextUtil.isSpaceOrWhitespace(text.get(ind + 1))));\n",
      "                if (endOfNonBreakablePartCausedBySplitCharacter && firstCharacterWhichExceedsAllowedWidth == -1) {\n",
      "                    containsPossibleBreak = true;\n",
      "                }\n",
      "                if (ind + 1 == text.end\n",
      "                        || endOfNonBreakablePartCausedBySplitCharacter\n",
      "                        || endOfWordBelongingToSpecialScripts\n",
      "                        || (ind + 1 >= indexOfFirstCharacterToBeForcedToOverflow)) {\n",
      "                    if (ind + 1 >= indexOfFirstCharacterToBeForcedToOverflow\n",
      "                            && !endOfNonBreakablePartCausedBySplitCharacter) {\n",
      "                        firstCharacterWhichExceedsAllowedWidth = currentTextPos;\n",
      "                    }\n",
      "                    nonBreakablePartEnd = ind;\n",
      "                    break;\n",
      "                }\n",
      "            }\n",
      "\n",
      "            if (firstCharacterWhichExceedsAllowedWidth == -1) {\n",
      "                // can fit the whole word in a line\n",
      "                if (line.start == -1) {\n",
      "                    line.start = currentTextPos;\n",
      "                }\n",
      "                line.end = Math.max(line.end, nonBreakablePartEnd + 1);\n",
      "                currentLineAscender = Math.max(currentLineAscender, nonBreakablePartMaxAscender);\n",
      "                currentLineDescender = Math.min(currentLineDescender, nonBreakablePartMaxDescender);\n",
      "                currentLineHeight = Math.max(currentLineHeight, nonBreakablePartMaxHeight);\n",
      "                currentTextPos = nonBreakablePartEnd + 1;\n",
      "                currentLineWidth += nonBreakablePartFullWidth;\n",
      "                if (OverflowWrapPropertyValue.ANYWHERE == overflowWrap) {\n",
      "                    widthHandler.updateMaxChildWidth((float) ((double) italicSkewAddition\n",
      "                            + (double) boldSimulationAddition));\n",
      "                } else {\n",
      "                    float childMinWidth = (float) ((double) nonBreakablePartWidthWhichDoesNotExceedAllowedWidth\n",
      "                            + (double) italicSkewAddition + (double) boldSimulationAddition);\n",
      "                    if (leftMinWidth == -1f) {\n",
      "                        leftMinWidth = childMinWidth;\n",
      "                    } else {\n",
      "                        rightMinWidth = childMinWidth;\n",
      "                    }\n",
      "                    widthHandler.updateMinChildWidth(childMinWidth);\n",
      "                    widthHandler.updateMaxChildWidth(childMinWidth);\n",
      "                }\n",
      "                anythingPlaced = true;\n",
      "            } else {\n",
      "                // check if line height exceeds the allowed height\n",
      "                if (Math.max(currentLineHeight, nonBreakablePartMaxHeight) > layoutBox.getHeight() && isOverflowFit(overflowY)) {\n",
      "                    applyPaddings(occupiedArea.getBBox(), paddings, true);\n",
      "                    applyBorderBox(occupiedArea.getBBox(), borders, true);\n",
      "                    applyMargins(occupiedArea.getBBox(), margins, true);\n",
      "                    // Force to place what we can\n",
      "                    if (line.start == -1) {\n",
      "                        line.start = currentTextPos;\n",
      "                    }\n",
      "                    line.end = Math.max(line.end, firstCharacterWhichExceedsAllowedWidth);\n",
      "                    // the line does not fit because of height - full overflow\n",
      "                    TextRenderer[] splitResult = split(initialLineTextPos);\n",
      "\n",
      "                    boolean[] startsEnds = isStartsWithSplitCharWhiteSpaceAndEndsWithSplitChar(splitCharacters);\n",
      "                    return new TextLayoutResult(\n",
      "                            LayoutResult.NOTHING, occupiedArea, splitResult[0], splitResult[1], this)\n",
      "                            .setContainsPossibleBreak(containsPossibleBreak)\n",
      "                            .setStartsWithSplitCharacterWhiteSpace(startsEnds[0])\n",
      "                            .setEndsWithSplitCharacter(startsEnds[1]);\n",
      "                } else {\n",
      "                    // cannot fit a word as a whole\n",
      "\n",
      "                    boolean wordSplit = false;\n",
      "                    boolean hyphenationApplied = false;\n",
      "\n",
      "                    if (hyphenationConfig != null && indexOfFirstCharacterToBeForcedToOverflow == UNDEFINED_FIRST_CHAR_TO_FORCE_OVERFLOW) {\n",
      "                        if (-1 == nonBreakingHyphenRelatedChunkStart) {\n",
      "                            int[] wordBounds = getWordBoundsForHyphenation(text, currentTextPos, text.end, Math.max(currentTextPos, firstCharacterWhichExceedsAllowedWidth - 1));\n",
      "                            if (wordBounds != null) {\n",
      "                                String word = text.toUnicodeString(wordBounds[0], wordBounds[1]);\n",
      "                                Hyphenation hyph = hyphenationConfig.hyphenate(word);\n",
      "                                if (hyph != null) {\n",
      "                                    for (int i = hyph.length() - 1; i >= 0; i--) {\n",
      "                                        String pre = hyph.getPreHyphenText(i);\n",
      "                                        String pos = hyph.getPostHyphenText(i);\n",
      "                                        float currentHyphenationChoicePreTextWidth =\n",
      "                                                getGlyphLineWidth(convertToGlyphLine(text.toUnicodeString(currentTextPos, wordBounds[0]) + pre + hyphenationConfig.getHyphenSymbol()), fontSize.getValue(), hScale, characterSpacing, wordSpacing);\n",
      "                                        if (currentLineWidth + currentHyphenationChoicePreTextWidth + italicSkewAddition + boldSimulationAddition <= layoutBox.getWidth()) {\n",
      "                                            hyphenationApplied = true;\n",
      "\n",
      "                                            if (line.start == -1) {\n",
      "                                                line.start = currentTextPos;\n",
      "                                            }\n",
      "                                            line.end = Math.max(line.end, wordBounds[0] + pre.length());\n",
      "                                            GlyphLine lineCopy = line.copy(line.start, line.end);\n",
      "                                            lineCopy.add(font.getGlyph(hyphenationConfig.getHyphenSymbol()));\n",
      "                                            lineCopy.end++;\n",
      "                                            line = lineCopy;\n",
      "\n",
      "                                            // TODO DEVSIX-7010 recalculate line properties in case of word hyphenation.\n",
      "                                            // These values are based on whole word. Recalculate properly based on hyphenated part.\n",
      "                                            currentLineAscender = Math.max(currentLineAscender, nonBreakablePartMaxAscender);\n",
      "                                            currentLineDescender = Math.min(currentLineDescender, nonBreakablePartMaxDescender);\n",
      "                                            currentLineHeight = Math.max(currentLineHeight, nonBreakablePartMaxHeight);\n",
      "\n",
      "                                            currentLineWidth += currentHyphenationChoicePreTextWidth;\n",
      "                                            if (OverflowWrapPropertyValue.ANYWHERE == overflowWrap) {\n",
      "                                                widthHandler.updateMaxChildWidth((float) ((double) italicSkewAddition\n",
      "                                                        + (double) boldSimulationAddition));\n",
      "                                            } else {\n",
      "                                                widthHandler.updateMinChildWidth(\n",
      "                                                        (float) ((double) currentHyphenationChoicePreTextWidth\n",
      "                                                                + (double) italicSkewAddition\n",
      "                                                                + (double) boldSimulationAddition));\n",
      "                                                widthHandler.updateMaxChildWidth(\n",
      "                                                        (float) ((double) currentHyphenationChoicePreTextWidth\n",
      "                                                                + (double) italicSkewAddition\n",
      "                                                                + (double) boldSimulationAddition));\n",
      "                                            }\n",
      "                                            currentTextPos = wordBounds[0] + pre.length();\n",
      "                                            break;\n",
      "                                        }\n",
      "                                    }\n",
      "                                }\n",
      "                            }\n",
      "                        } else {\n",
      "                            if (text.start == nonBreakingHyphenRelatedChunkStart) {\n",
      "                                nonBreakingHyphenRelatedChunkWidth = 0;\n",
      "                                firstCharacterWhichExceedsAllowedWidth = previousCharPos + 1;\n",
      "                            } else {\n",
      "                                firstCharacterWhichExceedsAllowedWidth = nonBreakingHyphenRelatedChunkStart;\n",
      "                                nonBreakablePartFullWidth -= nonBreakingHyphenRelatedChunkWidth;\n",
      "                                nonBreakablePartMaxAscender = beforeNonBreakingHyphenRelatedChunkMaxAscender;\n",
      "                                nonBreakablePartMaxDescender = beforeNonBreakingHyphenRelatedChunkMaxDescender;\n",
      "                            }\n",
      "                        }\n",
      "                    }\n",
      "\n",
      "                    boolean specialScriptWordSplit = textContainsSpecialScriptGlyphs(true)\n",
      "                            && !isSplitForcedByNewLine && isOverflowFit(overflowX);\n",
      "                    if ((nonBreakablePartFullWidth > layoutBox.getWidth() && !anythingPlaced && !hyphenationApplied)\n",
      "                            || forcePartialSplitOnFirstChar\n",
      "                            || -1 != nonBreakingHyphenRelatedChunkStart\n",
      "                            || specialScriptWordSplit) {\n",
      "                        // if the word is too long for a single line we will have to split it\n",
      "                        // we also need to split the word here if text contains glyphs from scripts\n",
      "                        // which require word wrapping for further processing in LineRenderer\n",
      "                        if (line.start == -1) {\n",
      "                            line.start = currentTextPos;\n",
      "                        }\n",
      "                        if (!crlf) {\n",
      "                            currentTextPos = (forcePartialSplitOnFirstChar || isOverflowFit(overflowX) || specialScriptWordSplit) ? firstCharacterWhichExceedsAllowedWidth : nonBreakablePartEnd + 1;\n",
      "                        }\n",
      "                        line.end = Math.max(line.end, currentTextPos);\n",
      "                        wordSplit = !forcePartialSplitOnFirstChar && (text.end != currentTextPos);\n",
      "                        if (wordSplit || !(forcePartialSplitOnFirstChar || isOverflowFit(overflowX))) {\n",
      "                            currentLineAscender = Math.max(currentLineAscender, nonBreakablePartMaxAscender);\n",
      "                            currentLineDescender = Math.min(currentLineDescender, nonBreakablePartMaxDescender);\n",
      "                            currentLineHeight = Math.max(currentLineHeight, nonBreakablePartMaxHeight);\n",
      "                            currentLineWidth += nonBreakablePartWidthWhichDoesNotExceedAllowedWidth;\n",
      "                            if (OverflowWrapPropertyValue.ANYWHERE == overflowWrap) {\n",
      "                                widthHandler.updateMaxChildWidth((float) ((double) italicSkewAddition\n",
      "                                        + (double) boldSimulationAddition));\n",
      "                            } else {\n",
      "                                float childMinWidth =\n",
      "                                        (float) ((double) nonBreakablePartWidthWhichDoesNotExceedAllowedWidth\n",
      "                                                + (double) italicSkewAddition + (double) boldSimulationAddition);\n",
      "                                if (leftMinWidth == -1f) {\n",
      "                                    leftMinWidth = childMinWidth;\n",
      "                                } else {\n",
      "                                    rightMinWidth = childMinWidth;\n",
      "                                }\n",
      "                                widthHandler.updateMinChildWidth(childMinWidth);\n",
      "                                widthHandler.updateMaxChildWidth(childMinWidth);\n",
      "                            }\n",
      "                        } else {\n",
      "                            // process empty line (e.g. '\\n')\n",
      "                            currentLineAscender = ascender;\n",
      "                            currentLineDescender = descender;\n",
      "                            currentLineHeight = FontProgram.convertTextSpaceToGlyphSpace(\n",
      "                                    (currentLineAscender - currentLineDescender) * fontSize.getValue()) + textRise;\n",
      "                            currentLineWidth += FontProgram.convertTextSpaceToGlyphSpace(\n",
      "                                    getCharWidth(line.get(line.start), fontSize.getValue(), hScale, characterSpacing,\n",
      "                                            wordSpacing));\n",
      "                        }\n",
      "                    }\n",
      "                    if (line.end <= line.start) {\n",
      "                        boolean[] startsEnds = isStartsWithSplitCharWhiteSpaceAndEndsWithSplitChar(splitCharacters);\n",
      "                        return new TextLayoutResult(\n",
      "                                LayoutResult.NOTHING, occupiedArea, null, this, this)\n",
      "                                .setContainsPossibleBreak(containsPossibleBreak)\n",
      "                                .setStartsWithSplitCharacterWhiteSpace(startsEnds[0])\n",
      "                                .setEndsWithSplitCharacter(startsEnds[1]);\n",
      "                    } else {\n",
      "                        result = new TextLayoutResult(\n",
      "                                LayoutResult.PARTIAL, occupiedArea, null, null)\n",
      "                                .setWordHasBeenSplit(wordSplit)\n",
      "                                .setContainsPossibleBreak(containsPossibleBreak);\n",
      "                    }\n",
      "\n",
      "                    break;\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "        // indicates whether the placing is forced while the layout result is LayoutResult.NOTHING\n",
      "        boolean isPlacingForcedWhileNothing = false;\n",
      "        if (currentLineHeight > layoutBox.getHeight()) {\n",
      "            if (!Boolean.TRUE.equals(getPropertyAsBoolean(Property.FORCED_PLACEMENT)) && isOverflowFit(overflowY)) {\n",
      "                applyPaddings(occupiedArea.getBBox(), paddings, true);\n",
      "                applyBorderBox(occupiedArea.getBBox(), borders, true);\n",
      "                applyMargins(occupiedArea.getBBox(), margins, true);\n",
      "                boolean[] startsEnds = isStartsWithSplitCharWhiteSpaceAndEndsWithSplitChar(splitCharacters);\n",
      "                return new TextLayoutResult(\n",
      "                        LayoutResult.NOTHING, occupiedArea, null, this, this)\n",
      "                        .setContainsPossibleBreak(containsPossibleBreak)\n",
      "                        .setStartsWithSplitCharacterWhiteSpace(startsEnds[0])\n",
      "                        .setEndsWithSplitCharacter(startsEnds[1]);\n",
      "            } else {\n",
      "                isPlacingForcedWhileNothing = true;\n",
      "            }\n",
      "        }\n",
      "\n",
      "        yLineOffset = FontProgram.convertTextSpaceToGlyphSpace(currentLineAscender * fontSize.getValue());\n",
      "\n",
      "        occupiedArea.getBBox().moveDown(currentLineHeight);\n",
      "        occupiedArea.getBBox().setHeight(occupiedArea.getBBox().getHeight() + currentLineHeight);\n",
      "\n",
      "        occupiedArea.getBBox().setWidth(Math.max(occupiedArea.getBBox().getWidth(), currentLineWidth));\n",
      "        layoutBox.setHeight(area.getBBox().getHeight() - currentLineHeight);\n",
      "\n",
      "        occupiedArea.getBBox().setWidth(occupiedArea.getBBox().getWidth() + italicSkewAddition + boldSimulationAddition);\n",
      "\n",
      "        applyPaddings(occupiedArea.getBBox(), paddings, true);\n",
      "        applyBorderBox(occupiedArea.getBBox(), borders, true);\n",
      "        applyMargins(occupiedArea.getBBox(), margins, true);\n",
      "\n",
      "        increaseYLineOffset(paddings, borders, margins);\n",
      "\n",
      "        if (result == null) {\n",
      "            result = new TextLayoutResult(LayoutResult.FULL, occupiedArea, null, null,\n",
      "                    isPlacingForcedWhileNothing ? this : null)\n",
      "                    .setContainsPossibleBreak(containsPossibleBreak);\n",
      "        } else {\n",
      "            TextRenderer[] split;\n",
      "            if (ignoreNewLineSymbol || crlf) {\n",
      "                // ignore '\\n'\n",
      "                split = splitIgnoreFirstNewLine(currentTextPos);\n",
      "            } else {\n",
      "                split = split(currentTextPos);\n",
      "            }\n",
      "            result.setSplitForcedByNewline(isSplitForcedByNewLine);\n",
      "            result.setSplitRenderer(split[0]);\n",
      "            if (wordBreakGlyphAtLineEnding != null) {\n",
      "                split[0].saveWordBreakIfNotYetSaved(wordBreakGlyphAtLineEnding);\n",
      "            }\n",
      "\n",
      "            // no sense to process empty renderer\n",
      "            if (split[1].text.start != split[1].text.end) {\n",
      "                result.setOverflowRenderer(split[1]);\n",
      "            } else {\n",
      "                // LayoutResult with partial status should have non-null overflow renderer\n",
      "                result.setStatus(LayoutResult.FULL);\n",
      "            }\n",
      "        }\n",
      "\n",
      "        if (FloatingHelper.isRendererFloating(this, floatPropertyValue)) {\n",
      "            if (result.getStatus() == LayoutResult.FULL) {\n",
      "                if (occupiedArea.getBBox().getWidth() > 0) {\n",
      "                    floatRendererAreas.add(occupiedArea.getBBox());\n",
      "                }\n",
      "            } else if (result.getStatus() == LayoutResult.PARTIAL) {\n",
      "                floatRendererAreas.add(result.getSplitRenderer().getOccupiedArea().getBBox());\n",
      "            }\n",
      "        }\n",
      "\n",
      "        result.setMinMaxWidth(countedMinMaxWidth);\n",
      "        if (!noSoftWrap) {\n",
      "            for (float dimension : leftMarginBorderPadding) {\n",
      "                leftMinWidth += dimension;\n",
      "            }\n",
      "            for (float dimension : rightMarginBorderPadding) {\n",
      "                if (rightMinWidth < 0) {\n",
      "                    leftMinWidth += dimension;\n",
      "                } else {\n",
      "                    rightMinWidth += dimension;\n",
      "                }\n",
      "            }\n",
      "            result.setLeftMinWidth(leftMinWidth);\n",
      "            result.setRightMinWidth(rightMinWidth);\n",
      "        } else {\n",
      "            result.setLeftMinWidth(countedMinMaxWidth.getMinWidth());\n",
      "            result.setRightMinWidth(-1f);\n",
      "        }\n",
      "        boolean[] startsEnds = isStartsWithSplitCharWhiteSpaceAndEndsWithSplitChar(splitCharacters);\n",
      "        result.setStartsWithSplitCharacterWhiteSpace(startsEnds[0])\n",
      "              .setEndsWithSplitCharacter(startsEnds[1]);\n",
      "        return result;\n",
      "    }\n",
      "\n",
      "    private void increaseYLineOffset(UnitValue[] paddings, Border[] borders, UnitValue[] margins) {\n",
      "        yLineOffset += paddings[0] != null ? paddings[0].getValue() : 0;\n",
      "        yLineOffset += borders[0] != null ?borders[0].getWidth() : 0;\n",
      "        yLineOffset +=  margins[0] != null ? margins[0].getValue() : 0;\n",
      "    }\n",
      "\n",
      "    public void applyOtf() {\n",
      "        updateFontAndText();\n",
      "        Character.UnicodeScript script = this.<Character.UnicodeScript>getProperty(Property.FONT_SCRIPT);\n",
      "        if (!otfFeaturesApplied && TypographyUtils.isPdfCalligraphAvailable() && text.start < text.end) {\n",
      "            final PdfDocument pdfDocument = getPdfDocument();\n",
      "            final SequenceId sequenceId = pdfDocument == null ? null : pdfDocument.getDocumentIdWrapper();\n",
      "            final MetaInfoContainer metaInfoContainer = this.<MetaInfoContainer>getProperty(Property.META_INFO);\n",
      "            final IMetaInfo metaInfo = metaInfoContainer == null ? null : metaInfoContainer.getMetaInfo();\n",
      "            if (hasOtfFont()) {\n",
      "                Object typographyConfig = this.<Object>getProperty(Property.TYPOGRAPHY_CONFIG);\n",
      "                Collection<Character.UnicodeScript> supportedScripts = null;\n",
      "        \t    if (typographyConfig != null) {\n",
      "    \t            supportedScripts = TypographyUtils.getSupportedScripts(typographyConfig);\n",
      "\t            }\n",
      "\t            if (supportedScripts == null) {\n",
      "\t                supportedScripts = TypographyUtils.getSupportedScripts();\n",
      "\t            }\n",
      "                List<ScriptRange> scriptsRanges = new ArrayList<>();\n",
      "                if (script != null) {\n",
      "                    scriptsRanges.add(new ScriptRange(script, text.end));\n",
      "                } else {\n",
      "                    // Try to autodetect script.\n",
      "                    ScriptRange currRange = new ScriptRange(null, text.end);\n",
      "                    scriptsRanges.add(currRange);\n",
      "                    for (int i = text.start; i < text.end; i++) {\n",
      "                        int unicode = text.get(i).getUnicode();\n",
      "                        if (unicode > -1) {\n",
      "                            Character.UnicodeScript glyphScript = Character.UnicodeScript.of(unicode);\n",
      "                            if (Character.UnicodeScript.COMMON.equals(glyphScript) || Character.UnicodeScript.UNKNOWN.equals(glyphScript)\n",
      "                                    || Character.UnicodeScript.INHERITED.equals(glyphScript)) {\n",
      "                                continue;\n",
      "                            }\n",
      "                            if (glyphScript != currRange.script) {\n",
      "                                if (currRange.script == null) {\n",
      "                                    currRange.script = glyphScript;\n",
      "                                } else {\n",
      "                                    currRange.rangeEnd = i;\n",
      "                                    currRange = new ScriptRange(glyphScript, text.end);\n",
      "                                    scriptsRanges.add(currRange);\n",
      "                                }\n",
      "                            }\n",
      "                        }\n",
      "                    }\n",
      "                }\n",
      "\n",
      "                int delta = 0;\n",
      "                int origTextStart = text.start;\n",
      "                int origTextEnd = text.end;\n",
      "                int shapingRangeStart = text.start;\n",
      "                for (ScriptRange scriptsRange : scriptsRanges) {\n",
      "                    if (scriptsRange.script == null || !supportedScripts.contains(EnumUtil.throwIfNull(scriptsRange.script))) {\n",
      "                        continue;\n",
      "                    }\n",
      "                    scriptsRange.rangeEnd += delta;\n",
      "                    text.start = shapingRangeStart;\n",
      "                    text.end = scriptsRange.rangeEnd;\n",
      "\n",
      "                    if ((scriptsRange.script == Character.UnicodeScript.ARABIC || scriptsRange.script == Character.UnicodeScript.HEBREW) && parent instanceof LineRenderer) {\n",
      "                        // It's safe to set here BASE_DIRECTION to TextRenderer without additional checks, because\n",
      "                        // by convention this property makes sense only if it's applied to LineRenderer or it's\n",
      "                        // parents (Paragraph or above).\n",
      "                        // Only if it's not found there first, LineRenderer tries to fetch autodetected BaseDirection\n",
      "                        // from text renderers (see LineRenderer#applyOtf).\n",
      "                        setProperty(Property.BASE_DIRECTION, BaseDirection.DEFAULT_BIDI);\n",
      "                    }\n",
      "                    TypographyUtils.applyOtfScript(\n",
      "                            font.getFontProgram(), text, scriptsRange.script, typographyConfig, sequenceId, metaInfo);\n",
      "\n",
      "                    delta += text.end - scriptsRange.rangeEnd;\n",
      "                    scriptsRange.rangeEnd = shapingRangeStart = text.end;\n",
      "                }\n",
      "                text.start = origTextStart;\n",
      "                text.end = origTextEnd + delta;\n",
      "            }\n",
      "\n",
      "            FontKerning fontKerning = (FontKerning) this.<FontKerning>getProperty(Property.FONT_KERNING, FontKerning.NO);\n",
      "            if (fontKerning == FontKerning.YES) {\n",
      "                TypographyUtils.applyKerning(font.getFontProgram(), text, sequenceId, metaInfo);\n",
      "            }\n",
      "\n",
      "            otfFeaturesApplied = true;\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public void draw(DrawContext drawContext) {\n",
      "        if (occupiedArea == null) {\n",
      "            Logger logger = LoggerFactory.getLogger(TextRenderer.class);\n",
      "            logger.error(MessageFormatUtil.format(IoLogMessageConstant.OCCUPIED_AREA_HAS_NOT_BEEN_INITIALIZED,\n",
      "                    \"Drawing won't be performed.\"));\n",
      "            return;\n",
      "        }\n",
      "\n",
      "        // Set up marked content before super.draw so that annotations are placed within marked content\n",
      "        boolean isTagged = drawContext.isTaggingEnabled();\n",
      "        LayoutTaggingHelper taggingHelper = null;\n",
      "        boolean isArtifact = false;\n",
      "        TagTreePointer tagPointer = null;\n",
      "        if (isTagged) {\n",
      "            taggingHelper = this.<LayoutTaggingHelper>getProperty(Property.TAGGING_HELPER);\n",
      "            if (taggingHelper == null) {\n",
      "                isArtifact = true;\n",
      "            } else {\n",
      "                isArtifact = taggingHelper.isArtifact(this);\n",
      "                if (!isArtifact) {\n",
      "                    tagPointer = taggingHelper.useAutoTaggingPointerAndRememberItsPosition(this);\n",
      "                    if (taggingHelper.createTag(this, tagPointer)) {\n",
      "                        tagPointer.getProperties().addAttributes(0, AccessibleAttributesApplier.getLayoutAttributes(this, tagPointer));\n",
      "                    }\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "\n",
      "        super.draw(drawContext);\n",
      "\n",
      "        boolean isRelativePosition = isRelativePosition();\n",
      "        if (isRelativePosition) {\n",
      "            applyRelativePositioningTranslation(false);\n",
      "        }\n",
      "\n",
      "        float leftBBoxX = getInnerAreaBBox().getX();\n",
      "\n",
      "        if (line.end > line.start || savedWordBreakAtLineEnding != null) {\n",
      "            UnitValue fontSize = this.getPropertyAsUnitValue(Property.FONT_SIZE);\n",
      "            if (!fontSize.isPointValue()) {\n",
      "                Logger logger = LoggerFactory.getLogger(TextRenderer.class);\n",
      "                logger.error(MessageFormatUtil.format(IoLogMessageConstant.PROPERTY_IN_PERCENTS_NOT_SUPPORTED,\n",
      "                        Property.FONT_SIZE));\n",
      "            }\n",
      "            TransparentColor fontColor = getPropertyAsTransparentColor(Property.FONT_COLOR);\n",
      "            Integer textRenderingMode = this.<Integer>getProperty(Property.TEXT_RENDERING_MODE);\n",
      "            Float textRise = this.getPropertyAsFloat(Property.TEXT_RISE);\n",
      "            Float characterSpacing = this.getPropertyAsFloat(Property.CHARACTER_SPACING);\n",
      "            Float wordSpacing = this.getPropertyAsFloat(Property.WORD_SPACING);\n",
      "            Float horizontalScaling = this.<Float>getProperty(Property.HORIZONTAL_SCALING);\n",
      "            float[] skew = this.<float[]>getProperty(Property.SKEW);\n",
      "            boolean italicSimulation = Boolean.TRUE.equals(getPropertyAsBoolean(Property.ITALIC_SIMULATION));\n",
      "            boolean boldSimulation = Boolean.TRUE.equals(getPropertyAsBoolean(Property.BOLD_SIMULATION));\n",
      "            Float strokeWidth = null;\n",
      "\n",
      "            if (boldSimulation) {\n",
      "                textRenderingMode = PdfCanvasConstants.TextRenderingMode.FILL_STROKE;\n",
      "                strokeWidth = fontSize.getValue() / 30;\n",
      "            }\n",
      "\n",
      "            PdfCanvas canvas = drawContext.getCanvas();\n",
      "            if (isTagged) {\n",
      "                if (isArtifact) {\n",
      "                    canvas.openTag(new CanvasArtifact());\n",
      "                } else {\n",
      "                    canvas.openTag(tagPointer.getTagReference());\n",
      "                }\n",
      "            }\n",
      "            beginElementOpacityApplying(drawContext);\n",
      "            canvas.saveState().beginText().setFontAndSize(font, fontSize.getValue());\n",
      "\n",
      "            if (skew != null && skew.length == 2) {\n",
      "                canvas.setTextMatrix(1, skew[0], skew[1], 1, leftBBoxX, getYLine());\n",
      "            } else if (italicSimulation) {\n",
      "                canvas.setTextMatrix(1, 0, ITALIC_ANGLE, 1, leftBBoxX, getYLine());\n",
      "            } else {\n",
      "                canvas.moveText(leftBBoxX, getYLine());\n",
      "            }\n",
      "\n",
      "            if (textRenderingMode != PdfCanvasConstants.TextRenderingMode.FILL) {\n",
      "                canvas.setTextRenderingMode((int) textRenderingMode);\n",
      "            }\n",
      "            if (textRenderingMode == PdfCanvasConstants.TextRenderingMode.STROKE || textRenderingMode == PdfCanvasConstants.TextRenderingMode.FILL_STROKE) {\n",
      "                if (strokeWidth == null) {\n",
      "                    strokeWidth = this.getPropertyAsFloat(Property.STROKE_WIDTH);\n",
      "                }\n",
      "                if (strokeWidth != null && strokeWidth != 1f) {\n",
      "                    canvas.setLineWidth((float) strokeWidth);\n",
      "                }\n",
      "                Color strokeColor = getPropertyAsColor(Property.STROKE_COLOR);\n",
      "                if (strokeColor == null && fontColor != null) {\n",
      "                    strokeColor = fontColor.getColor();\n",
      "                }\n",
      "                if (strokeColor != null) {\n",
      "                    canvas.setStrokeColor(strokeColor);\n",
      "                }\n",
      "            }\n",
      "            if (fontColor != null) {\n",
      "                canvas.setFillColor(fontColor.getColor());\n",
      "                fontColor.applyFillTransparency(canvas);\n",
      "            }\n",
      "            if (textRise != null && textRise != 0) {\n",
      "                canvas.setTextRise((float) textRise);\n",
      "            }\n",
      "            if (characterSpacing != null && characterSpacing != 0) {\n",
      "                canvas.setCharacterSpacing((float) characterSpacing);\n",
      "            }\n",
      "            if (wordSpacing != null && wordSpacing != 0) {\n",
      "                if (font instanceof PdfType0Font) {\n",
      "                    // From the spec: Word spacing is applied to every occurrence of the single-byte character code 32 in\n",
      "                    // a string when using a simple font or a composite font that defines code 32 as a single-byte code.\n",
      "                    // It does not apply to occurrences of the byte value 32 in multiple-byte codes.\n",
      "                    //\n",
      "                    // For PdfType0Font we must add word manually with glyph offsets\n",
      "                    for (int gInd = line.start; gInd < line.end; gInd++) {\n",
      "                        if (TextUtil.isUni0020(line.get(gInd))) {\n",
      "                            final short advance = (short) (FontProgram.convertGlyphSpaceToTextSpace((float) wordSpacing)\n",
      "                                    / fontSize.getValue());\n",
      "                            Glyph copy = new Glyph(line.get(gInd));\n",
      "                            copy.setXAdvance(advance);\n",
      "                            line.set(gInd, copy);\n",
      "                        }\n",
      "                    }\n",
      "                } else {\n",
      "                    canvas.setWordSpacing((float) wordSpacing);\n",
      "                }\n",
      "            }\n",
      "            if (horizontalScaling != null && horizontalScaling != 1) {\n",
      "                canvas.setHorizontalScaling((float) horizontalScaling * 100);\n",
      "            }\n",
      "\n",
      "            GlyphLine.IGlyphLineFilter filter = new CustomGlyphLineFilter();\n",
      "\n",
      "            boolean appearanceStreamLayout = Boolean.TRUE.equals(getPropertyAsBoolean(Property.APPEARANCE_STREAM_LAYOUT));\n",
      "\n",
      "            if (getReversedRanges() != null) {\n",
      "                boolean writeReversedChars = !appearanceStreamLayout;\n",
      "                ArrayList<Integer> removedIds = new ArrayList<>();\n",
      "                for (int i = line.start; i < line.end; i++) {\n",
      "                    if (!filter.accept(line.get(i))) {\n",
      "                        removedIds.add(i);\n",
      "                    }\n",
      "                }\n",
      "                for (int[] range : getReversedRanges()) {\n",
      "                    updateRangeBasedOnRemovedCharacters(removedIds, range);\n",
      "                }\n",
      "                line = line.filter(filter);\n",
      "                if (writeReversedChars) {\n",
      "                    canvas.showText(line, new ReversedCharsIterator(reversedRanges, line).\n",
      "                            setUseReversed(true));\n",
      "                } else {\n",
      "                    canvas.showText(line);\n",
      "                }\n",
      "            } else {\n",
      "                if (appearanceStreamLayout) {\n",
      "                    line.setActualText(line.start, line.end, null);\n",
      "                }\n",
      "                canvas.showText(line.filter(filter));\n",
      "            }\n",
      "            if (savedWordBreakAtLineEnding != null) {\n",
      "                canvas.showText(savedWordBreakAtLineEnding);\n",
      "            }\n",
      "\n",
      "            canvas.endText().restoreState();\n",
      "            endElementOpacityApplying(drawContext);\n",
      "\n",
      "            if (isTagged) {\n",
      "                canvas.closeTag();\n",
      "            }\n",
      "\n",
      "            Object underlines = this.<Object>getProperty(Property.UNDERLINE);\n",
      "            if (underlines instanceof List) {\n",
      "                for (Object underline : (List) underlines) {\n",
      "                    if (underline instanceof Underline) {\n",
      "                        drawAndTagSingleUnderline(drawContext.isTaggingEnabled(), (Underline) underline, fontColor, canvas, fontSize.getValue(), italicSimulation ? ITALIC_ANGLE : 0);\n",
      "                    }\n",
      "                }\n",
      "            } else if (underlines instanceof Underline) {\n",
      "                drawAndTagSingleUnderline(drawContext.isTaggingEnabled(), (Underline) underlines, fontColor, canvas, fontSize.getValue(), italicSimulation ? ITALIC_ANGLE : 0);\n",
      "            }\n",
      "        }\n",
      "\n",
      "        if (isRelativePosition) {\n",
      "            applyRelativePositioningTranslation(false);\n",
      "        }\n",
      "\n",
      "        if (isTagged && !isArtifact) {\n",
      "            if (isLastRendererForModelElement) {\n",
      "                taggingHelper.finishTaggingHint(this);\n",
      "            }\n",
      "            taggingHelper.restoreAutoTaggingPointerPosition(this);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Trims any whitespace characters from the start of the {@link GlyphLine}\n",
      "     * to be rendered.\n",
      "     */\n",
      "    public void trimFirst() {\n",
      "        updateFontAndText();\n",
      "\n",
      "        if (text != null) {\n",
      "            Glyph glyph;\n",
      "            while (text.start < text.end\n",
      "                    && TextUtil.isWhitespace(glyph = text.get(text.start)) && !TextUtil.isNewLine(glyph)) {\n",
      "                text.start++;\n",
      "            }\n",
      "        }\n",
      "\n",
      "        /*  Between two sentences separated by one or more whitespaces,\n",
      "            icu allows to break right after the last whitespace.\n",
      "            Therefore we need to carefully edit specialScriptsWordBreakPoints list after trimming:\n",
      "            if a break is allowed to happen right before the first glyph of an already trimmed text,\n",
      "            we need to remove this point from the list\n",
      "            (or replace it with -1 thus marking that text contains special scripts,\n",
      "             in case if the removed break point was the only possible break point).\n",
      "         */\n",
      "        if (textContainsSpecialScriptGlyphs(true)\n",
      "                && specialScriptsWordBreakPoints.get(0) == text.start) {\n",
      "            if (specialScriptsWordBreakPoints.size() == 1) {\n",
      "                specialScriptsWordBreakPoints.set(0, -1);\n",
      "            } else {\n",
      "                specialScriptsWordBreakPoints.remove(0);\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    float trimLast() {\n",
      "        float trimmedSpace = 0;\n",
      "\n",
      "        if (line.end <= 0)\n",
      "            return trimmedSpace;\n",
      "\n",
      "        UnitValue fontSize = (UnitValue) this.getPropertyAsUnitValue(Property.FONT_SIZE);\n",
      "        if (!fontSize.isPointValue()) {\n",
      "            Logger logger = LoggerFactory.getLogger(TextRenderer.class);\n",
      "            logger.error(MessageFormatUtil.format(IoLogMessageConstant.PROPERTY_IN_PERCENTS_NOT_SUPPORTED,\n",
      "                    Property.FONT_SIZE));\n",
      "        }\n",
      "        Float characterSpacing = this.getPropertyAsFloat(Property.CHARACTER_SPACING);\n",
      "        Float wordSpacing = this.getPropertyAsFloat(Property.WORD_SPACING);\n",
      "        float hScale = (float) this.getPropertyAsFloat(Property.HORIZONTAL_SCALING, 1f);\n",
      "\n",
      "        int firstNonSpaceCharIndex = line.end - 1;\n",
      "        while (firstNonSpaceCharIndex >= line.start) {\n",
      "            Glyph currentGlyph = line.get(firstNonSpaceCharIndex);\n",
      "            if (!TextUtil.isWhitespace(currentGlyph)) {\n",
      "                break;\n",
      "            }\n",
      "            saveWordBreakIfNotYetSaved(currentGlyph);\n",
      "\n",
      "            final float currentCharWidth = FontProgram.convertTextSpaceToGlyphSpace(\n",
      "                    getCharWidth(currentGlyph, fontSize.getValue(), hScale, characterSpacing, wordSpacing));\n",
      "            final float xAdvance = firstNonSpaceCharIndex > line.start ? FontProgram.convertTextSpaceToGlyphSpace(\n",
      "                    scaleXAdvance(line.get(firstNonSpaceCharIndex - 1).getXAdvance(), fontSize.getValue(), hScale)) : 0;\n",
      "            trimmedSpace += currentCharWidth - xAdvance;\n",
      "            occupiedArea.getBBox().setWidth(occupiedArea.getBBox().getWidth() - currentCharWidth);\n",
      "\n",
      "            firstNonSpaceCharIndex--;\n",
      "        }\n",
      "\n",
      "        line.end = firstNonSpaceCharIndex + 1;\n",
      "\n",
      "        return trimmedSpace;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Gets the maximum offset above the base line that this Text extends to.\n",
      "     *\n",
      "     * @return the upwards vertical offset of this {@link Text}\n",
      "     */\n",
      "    @Override\n",
      "    public float getAscent() {\n",
      "        return yLineOffset;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Gets the maximum offset below the base line that this Text extends to.\n",
      "     *\n",
      "     * @return the downwards vertical offset of this {@link Text}\n",
      "     */\n",
      "    @Override\n",
      "    public float getDescent() {\n",
      "        return -(getOccupiedAreaBBox().getHeight() - yLineOffset - (float) this.getPropertyAsFloat(Property.TEXT_RISE));\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Gets the position on the canvas of the imaginary horizontal line upon which\n",
      "     * the {@link Text}'s contents will be written.\n",
      "     *\n",
      "     * @return the y position of this text on the {@link DrawContext}\n",
      "     */\n",
      "    public float getYLine() {\n",
      "        return occupiedArea.getBBox().getY() + occupiedArea.getBBox().getHeight() - yLineOffset - (float) this.getPropertyAsFloat(Property.TEXT_RISE);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Moves the vertical position to the parameter's value.\n",
      "     *\n",
      "     * @param y the new vertical position of the Text\n",
      "     */\n",
      "    public void moveYLineTo(float y) {\n",
      "        float curYLine = getYLine();\n",
      "        float delta = y - curYLine;\n",
      "        occupiedArea.getBBox().setY(occupiedArea.getBBox().getY() + delta);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Manually sets the contents of the Text's representation on the canvas,\n",
      "     * regardless of the Text's own contents.\n",
      "     *\n",
      "     * @param text the replacement text\n",
      "     */\n",
      "    public void setText(String text) {\n",
      "        strToBeConverted = text;\n",
      "        //strToBeConverted will be null after next method.\n",
      "        updateFontAndText();\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Manually set a GlyphLine and PdfFont for rendering.\n",
      "     *\n",
      "     * @param text the {@link GlyphLine}\n",
      "     * @param font the font\n",
      "     */\n",
      "    public void setText(GlyphLine text, PdfFont font) {\n",
      "        GlyphLine newText = new GlyphLine(text);\n",
      "        newText = TextPreprocessingUtil.replaceSpecialWhitespaceGlyphs(newText, font);\n",
      "        setProcessedGlyphLineAndFont(newText, font);\n",
      "    }\n",
      "\n",
      "    public GlyphLine getText() {\n",
      "        updateFontAndText();\n",
      "        return text;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * The length of the whole text assigned to this renderer.\n",
      "     *\n",
      "     * @return the text length\n",
      "     */\n",
      "    public int length() {\n",
      "        return text == null ? 0 : text.end - text.start;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public String toString() {\n",
      "        return line != null ? line.toString() : null;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Gets char code at given position for the text belonging to this renderer.\n",
      "     *\n",
      "     * @param pos the position in range [0; length())\n",
      "     * @return Unicode char code\n",
      "     */\n",
      "    public int charAt(int pos) {\n",
      "        return text.get(pos + text.start).getUnicode();\n",
      "    }\n",
      "\n",
      "    public float getTabAnchorCharacterPosition() {\n",
      "        return tabAnchorCharacterPosition;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Gets a new instance of this class to be used as a next renderer, after this renderer is used, if\n",
      "     * {@link #layout(LayoutContext)} is called more than once.\n",
      "     *\n",
      "     * <p>\n",
      "     * If {@link TextRenderer} overflows to the next line, iText uses this method to create a renderer\n",
      "     * for the overflow part. So if one wants to extend {@link TextRenderer}, one should override\n",
      "     * this method: otherwise the default method will be used and thus the default rather than the custom\n",
      "     * renderer will be created. Another method that should be overridden in case of\n",
      "     * {@link TextRenderer}'s extension is {@link #createCopy(GlyphLine, PdfFont)}. This method is responsible\n",
      "     * for creation of {@link TextRenderer}'s copies, which represent its parts of specific font.\n",
      "     * @return new renderer instance\n",
      "     */\n",
      "    @Override\n",
      "    public IRenderer getNextRenderer() {\n",
      "        logWarningIfGetNextRendererNotOverridden(TextRenderer.class, this.getClass());\n",
      "        return new TextRenderer((Text) modelElement);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Get ascender and descender from font metrics.\n",
      "     * If these values are obtained from typo metrics they are normalized with a scale coefficient.\n",
      "     *\n",
      "     * @param font from which metrics will be extracted\n",
      "     * @return array in which the first element is an ascender and the second is a descender\n",
      "     */\n",
      "    public static float[] calculateAscenderDescender(PdfFont font) {\n",
      "        return calculateAscenderDescender(font, RenderingMode.DEFAULT_LAYOUT_MODE);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Get ascender and descender from font metrics.\n",
      "     * In RenderingMode.DEFAULT_LAYOUT_MODE if these values are obtained from typo metrics they are normalized with a scale coefficient.\n",
      "     *\n",
      "     * @param font from which metrics will be extracted\n",
      "     * @param mode mode in which metrics will be obtained. Impact on the use of scale coefficient\n",
      "     * @return array in which the first element is an ascender and the second is a descender\n",
      "     */\n",
      "    public static float[] calculateAscenderDescender(PdfFont font, RenderingMode mode) {\n",
      "        FontMetrics fontMetrics = font.getFontProgram().getFontMetrics();\n",
      "        float ascender;\n",
      "        float descender;\n",
      "        float usedTypoAscenderScaleCoeff = TYPO_ASCENDER_SCALE_COEFF;\n",
      "        if (RenderingMode.HTML_MODE.equals(mode) && !(font instanceof PdfType1Font)) {\n",
      "            usedTypoAscenderScaleCoeff = 1;\n",
      "        }\n",
      "        if (fontMetrics.getWinAscender() == 0 || fontMetrics.getWinDescender() == 0 ||\n",
      "                fontMetrics.getTypoAscender() == fontMetrics.getWinAscender()\n",
      "                        && fontMetrics.getTypoDescender() == fontMetrics.getWinDescender()) {\n",
      "            ascender = fontMetrics.getTypoAscender() * usedTypoAscenderScaleCoeff;\n",
      "            descender = fontMetrics.getTypoDescender() * usedTypoAscenderScaleCoeff;\n",
      "        } else {\n",
      "            ascender = fontMetrics.getWinAscender();\n",
      "            descender = fontMetrics.getWinDescender();\n",
      "        }\n",
      "        return new float[] {ascender, descender};\n",
      "    }\n",
      "\n",
      "    List<int[]> getReversedRanges() {\n",
      "        return reversedRanges;\n",
      "    }\n",
      "\n",
      "    List<int[]> initReversedRanges() {\n",
      "        if (reversedRanges == null) {\n",
      "            reversedRanges = new ArrayList<>();\n",
      "        }\n",
      "        return reversedRanges;\n",
      "    }\n",
      "\n",
      "    TextRenderer removeReversedRanges() {\n",
      "        reversedRanges = null;\n",
      "        return this;\n",
      "    }\n",
      "\n",
      "    private TextRenderer[] splitIgnoreFirstNewLine(int currentTextPos) {\n",
      "        if (TextUtil.isCarriageReturnFollowedByLineFeed(text, currentTextPos)) {\n",
      "            return split(currentTextPos + 2);\n",
      "        } else {\n",
      "            return split(currentTextPos + 1);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    private GlyphLine convertToGlyphLine(String text) {\n",
      "        return font.createGlyphLine(text);\n",
      "    }\n",
      "\n",
      "    private boolean hasOtfFont() {\n",
      "        return font instanceof PdfType0Font && font.getFontProgram() instanceof TrueTypeFont;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Analyzes/checks whether {@link TextRenderer#text}, bounded by start and end,\n",
      "     * contains glyphs belonging to special script.\n",
      "     *\n",
      "     * Mind that the behavior of this method depends on the analyzeSpecialScriptsWordBreakPointsOnly parameter:\n",
      "     * - pass {@code false} if you need to analyze the {@link TextRenderer#text} by checking each of its glyphs\n",
      "     * AND to fill {@link TextRenderer#specialScriptsWordBreakPoints} list afterwards,\n",
      "     * i.e. when analyzing a sequence of TextRenderers prior to layouting;\n",
      "     * - pass {@code true} if you want to check if text contains glyphs belonging to special scripts,\n",
      "     * according to the already filled {@link TextRenderer#specialScriptsWordBreakPoints} list.\n",
      "     *\n",
      "     * @param analyzeSpecialScriptsWordBreakPointsOnly false if analysis of each glyph is required,\n",
      "     *                                                 true if analysis has already been performed earlier\n",
      "     *                                                 and the results are stored in {@link TextRenderer#specialScriptsWordBreakPoints}\n",
      "     * @return true if {@link TextRenderer#text}, bounded by start and end, contains glyphs belonging to special script, otherwise false\n",
      "     * @see TextRenderer#specialScriptsWordBreakPoints\n",
      "     */\n",
      "    boolean textContainsSpecialScriptGlyphs(boolean analyzeSpecialScriptsWordBreakPointsOnly) {\n",
      "        if (specialScriptsWordBreakPoints != null) {\n",
      "            return !specialScriptsWordBreakPoints.isEmpty();\n",
      "        }\n",
      "\n",
      "        if (analyzeSpecialScriptsWordBreakPointsOnly) {\n",
      "            return false;\n",
      "        }\n",
      "\n",
      "        ISplitCharacters splitCharacters = this.<ISplitCharacters>getProperty(Property.SPLIT_CHARACTERS);\n",
      "\n",
      "        if (splitCharacters instanceof BreakAllSplitCharacters) {\n",
      "            specialScriptsWordBreakPoints = new ArrayList<>();\n",
      "        }\n",
      "\n",
      "        for (int i = text.start; i < text.end; i++) {\n",
      "            int unicode = text.get(i).getUnicode();\n",
      "            if (unicode > -1) {\n",
      "                if (codePointIsOfSpecialScript(unicode)) {\n",
      "                    return true;\n",
      "                }\n",
      "            } else {\n",
      "                char[] chars = text.get(i).getChars();\n",
      "                if (chars != null) {\n",
      "                    for (char ch : chars) {\n",
      "                        if (codePointIsOfSpecialScript(ch)) {\n",
      "                            return true;\n",
      "                        }\n",
      "                    }\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "        // if we've reached this point, it means we've analyzed the entire TextRenderer#text\n",
      "        // and haven't found special scripts, therefore we define specialScriptsWordBreakPoints\n",
      "        // as an empty list to mark, it's already been analyzed\n",
      "        specialScriptsWordBreakPoints = new ArrayList<>();\n",
      "\n",
      "        return false;\n",
      "    }\n",
      "\n",
      "    void setSpecialScriptsWordBreakPoints(List<Integer> specialScriptsWordBreakPoints) {\n",
      "        this.specialScriptsWordBreakPoints = specialScriptsWordBreakPoints;\n",
      "    }\n",
      "\n",
      "    List<Integer> getSpecialScriptsWordBreakPoints() {\n",
      "        return this.specialScriptsWordBreakPoints;\n",
      "    }\n",
      "\n",
      "    void setSpecialScriptFirstNotFittingIndex(int lastFittingIndex) {\n",
      "        this.specialScriptFirstNotFittingIndex = lastFittingIndex;\n",
      "    }\n",
      "\n",
      "    int getSpecialScriptFirstNotFittingIndex() {\n",
      "        return specialScriptFirstNotFittingIndex;\n",
      "    }\n",
      "\n",
      "    void setIndexOfFirstCharacterToBeForcedToOverflow(int indexOfFirstCharacterToBeForcedToOverflow) {\n",
      "        this.indexOfFirstCharacterToBeForcedToOverflow = indexOfFirstCharacterToBeForcedToOverflow;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    protected Rectangle getBackgroundArea(Rectangle occupiedAreaWithMargins) {\n",
      "        float textRise = (float) this.getPropertyAsFloat(Property.TEXT_RISE);\n",
      "        return occupiedAreaWithMargins.moveUp(textRise).decreaseHeight(textRise);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    protected Float getFirstYLineRecursively() {\n",
      "        return getYLine();\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    protected Float getLastYLineRecursively() {\n",
      "        return getYLine();\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Returns the length of the {@link com.itextpdf.layout.renderer.TextRenderer#line line} which is the result of the layout call.\n",
      "     *\n",
      "     * @return the length of the line\n",
      "     */\n",
      "    protected int lineLength() {\n",
      "        return line.end > 0 ? line.end - line.start : 0;\n",
      "    }\n",
      "\n",
      "    protected int baseCharactersCount() {\n",
      "        int count = 0;\n",
      "        for (int i = line.start; i < line.end; i++) {\n",
      "            Glyph glyph = line.get(i);\n",
      "            if (!glyph.hasPlacement()) {\n",
      "                count++;\n",
      "            }\n",
      "        }\n",
      "        return count;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public MinMaxWidth getMinMaxWidth() {\n",
      "        TextLayoutResult result = (TextLayoutResult) layout(new LayoutContext(new LayoutArea(1, new Rectangle(MinMaxWidthUtils.getInfWidth(), AbstractRenderer.INF))));\n",
      "        return result.getMinMaxWidth();\n",
      "    }\n",
      "\n",
      "    protected int getNumberOfSpaces() {\n",
      "        if (line.end <= 0)\n",
      "            return 0;\n",
      "        int spaces = 0;\n",
      "        for (int i = line.start; i < line.end; i++) {\n",
      "            Glyph currentGlyph = line.get(i);\n",
      "            if (currentGlyph.getUnicode() == ' ') {\n",
      "                spaces++;\n",
      "            }\n",
      "        }\n",
      "        return spaces;\n",
      "    }\n",
      "\n",
      "    protected TextRenderer createSplitRenderer() {\n",
      "        return (TextRenderer) getNextRenderer();\n",
      "    }\n",
      "\n",
      "    protected TextRenderer createOverflowRenderer() {\n",
      "        return (TextRenderer) getNextRenderer();\n",
      "    }\n",
      "\n",
      "    protected TextRenderer[] split(int initialOverflowTextPos) {\n",
      "        TextRenderer splitRenderer = createSplitRenderer();\n",
      "        GlyphLine newText = new GlyphLine(text);\n",
      "        newText.start = text.start;\n",
      "        newText.end = initialOverflowTextPos;\n",
      "        splitRenderer.setProcessedGlyphLineAndFont(newText, font);\n",
      "        splitRenderer.line = line;\n",
      "        splitRenderer.occupiedArea = occupiedArea.clone();\n",
      "        splitRenderer.parent = parent;\n",
      "        splitRenderer.yLineOffset = yLineOffset;\n",
      "        splitRenderer.otfFeaturesApplied = otfFeaturesApplied;\n",
      "        splitRenderer.isLastRendererForModelElement = false;\n",
      "        splitRenderer.addAllProperties(getOwnProperties());\n",
      "\n",
      "        TextRenderer overflowRenderer = createOverflowRenderer();\n",
      "        newText = new GlyphLine(text);\n",
      "        newText.start = initialOverflowTextPos;\n",
      "        newText.end = text.end;\n",
      "        overflowRenderer.setProcessedGlyphLineAndFont(newText, font);\n",
      "        overflowRenderer.otfFeaturesApplied = otfFeaturesApplied;\n",
      "        overflowRenderer.parent = parent;\n",
      "        overflowRenderer.addAllProperties(getOwnProperties());\n",
      "\n",
      "        if (specialScriptsWordBreakPoints != null) {\n",
      "            if (specialScriptsWordBreakPoints.isEmpty()) {\n",
      "                splitRenderer.setSpecialScriptsWordBreakPoints(new ArrayList<Integer>());\n",
      "                overflowRenderer.setSpecialScriptsWordBreakPoints(new ArrayList<Integer>());\n",
      "            } else if (specialScriptsWordBreakPoints.get(0) == -1) {\n",
      "                List<Integer> split = new ArrayList<Integer>(1);\n",
      "                split.add(-1);\n",
      "                splitRenderer.setSpecialScriptsWordBreakPoints(split);\n",
      "\n",
      "                List<Integer> overflow = new ArrayList<Integer>(1);\n",
      "                overflow.add(-1);\n",
      "                overflowRenderer.setSpecialScriptsWordBreakPoints(overflow);\n",
      "            } else {\n",
      "                int splitIndex = findPossibleBreaksSplitPosition(specialScriptsWordBreakPoints, initialOverflowTextPos,\n",
      "                        false);\n",
      "\n",
      "                if (splitIndex > -1) {\n",
      "                    splitRenderer.setSpecialScriptsWordBreakPoints(specialScriptsWordBreakPoints\n",
      "                            .subList(0, splitIndex + 1));\n",
      "                } else {\n",
      "                    List<Integer> split = new ArrayList<Integer>(1);\n",
      "                    split.add(-1);\n",
      "                    splitRenderer.setSpecialScriptsWordBreakPoints(split);\n",
      "                }\n",
      "\n",
      "                if (splitIndex + 1 < specialScriptsWordBreakPoints.size()) {\n",
      "                    overflowRenderer.setSpecialScriptsWordBreakPoints(specialScriptsWordBreakPoints\n",
      "                            .subList(splitIndex + 1, specialScriptsWordBreakPoints.size()));\n",
      "                } else {\n",
      "                    List<Integer> split = new ArrayList<Integer>(1);\n",
      "                    split.add(-1);\n",
      "                    overflowRenderer.setSpecialScriptsWordBreakPoints(split);\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "\n",
      "        return new TextRenderer[]{splitRenderer, overflowRenderer};\n",
      "    }\n",
      "\n",
      "    protected void drawSingleUnderline(Underline underline, TransparentColor fontStrokeColor, PdfCanvas canvas, float fontSize, float italicAngleTan) {\n",
      "        TransparentColor underlineColor = underline.getColor() != null ? new TransparentColor(underline.getColor(), underline.getOpacity()) : fontStrokeColor;\n",
      "        canvas.saveState();\n",
      "\n",
      "        if (underlineColor != null) {\n",
      "            canvas.setStrokeColor(underlineColor.getColor());\n",
      "            underlineColor.applyStrokeTransparency(canvas);\n",
      "        }\n",
      "        canvas.setLineCapStyle(underline.getLineCapStyle());\n",
      "        float underlineThickness = underline.getThickness(fontSize);\n",
      "        if (underlineThickness != 0) {\n",
      "            canvas.setLineWidth(underlineThickness);\n",
      "            float yLine = getYLine();\n",
      "            float underlineYPosition = underline.getYPosition(fontSize) + yLine;\n",
      "            float italicWidthSubstraction = .5f * fontSize * italicAngleTan;\n",
      "            Rectangle innerAreaBbox = getInnerAreaBBox();\n",
      "            canvas.moveTo(innerAreaBbox.getX(), underlineYPosition).\n",
      "                    lineTo(innerAreaBbox.getX() + innerAreaBbox.getWidth() - italicWidthSubstraction, underlineYPosition).\n",
      "                    stroke();\n",
      "        }\n",
      "\n",
      "        canvas.restoreState();\n",
      "    }\n",
      "\n",
      "    protected float calculateLineWidth() {\n",
      "        UnitValue fontSize = this.getPropertyAsUnitValue(Property.FONT_SIZE);\n",
      "        if (!fontSize.isPointValue()) {\n",
      "            Logger logger = LoggerFactory.getLogger(TextRenderer.class);\n",
      "            logger.error(MessageFormatUtil.format(IoLogMessageConstant.PROPERTY_IN_PERCENTS_NOT_SUPPORTED, Property.FONT_SIZE));\n",
      "        }\n",
      "        return getGlyphLineWidth(line, fontSize.getValue(),\n",
      "                (float) this.getPropertyAsFloat(Property.HORIZONTAL_SCALING, 1f),\n",
      "                this.getPropertyAsFloat(Property.CHARACTER_SPACING), this.getPropertyAsFloat(Property.WORD_SPACING));\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Resolve {@link Property#FONT} String[] value.\n",
      "     *\n",
      "     * @param addTo add all processed renderers to.\n",
      "     * @return true, if new {@link TextRenderer} has been created.\n",
      "     */\n",
      "    protected boolean resolveFonts(List<IRenderer> addTo) {\n",
      "        Object font = this.<Object>getProperty(Property.FONT);\n",
      "        if (font instanceof PdfFont) {\n",
      "            addTo.add(this);\n",
      "            return false;\n",
      "        } else if (font instanceof String[]) {\n",
      "            FontProvider provider = this.<FontProvider>getProperty(Property.FONT_PROVIDER);\n",
      "            FontSet fontSet = this.<FontSet>getProperty(Property.FONT_SET);\n",
      "            if (provider.getFontSet().isEmpty() && (fontSet == null || fontSet.isEmpty())) {\n",
      "                throw new IllegalStateException(\n",
      "                        LayoutExceptionMessageConstant.FONT_PROVIDER_NOT_SET_FONT_FAMILY_NOT_RESOLVED);\n",
      "            }\n",
      "            // process empty renderers because they can have borders or paddings with background to be drawn\n",
      "            if (null == strToBeConverted || strToBeConverted.isEmpty()) {\n",
      "                addTo.add(this);\n",
      "            } else {\n",
      "                FontCharacteristics fc = createFontCharacteristics();\n",
      "                IFontSelectorStrategy strategy = provider.createFontSelectorStrategy(Arrays.asList((String[])font), fc, fontSet);\n",
      "                List<Tuple2<GlyphLine, PdfFont>> subTextWithFont = strategy.getGlyphLines(strToBeConverted);\n",
      "                for (Tuple2<GlyphLine, PdfFont> subText : subTextWithFont) {\n",
      "                    TextRenderer textRenderer = createCopy(subText.getFirst(), subText.getSecond());\n",
      "                    addTo.add(textRenderer);\n",
      "                }\n",
      "            }\n",
      "            return true;\n",
      "        } else {\n",
      "            throw new IllegalStateException(LayoutExceptionMessageConstant.INVALID_FONT_PROPERTY_VALUE);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    protected void setProcessedGlyphLineAndFont(GlyphLine gl, PdfFont font) {\n",
      "        this.text = gl;\n",
      "        this.font = font;\n",
      "        this.otfFeaturesApplied = false;\n",
      "        this.strToBeConverted = null;\n",
      "        this.specialScriptsWordBreakPoints = null;\n",
      "        setProperty(Property.FONT, font);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Creates a copy of this {@link TextRenderer}, which corresponds to the passed {@link GlyphLine}\n",
      "     * with {@link PdfFont}.\n",
      "     * <p>\n",
      "     * While processing {@link TextRenderer}, iText uses this method to create {@link GlyphLine glyph lines}\n",
      "     * of specific {@link PdfFont fonts}, which represent the {@link TextRenderer}'s parts. If one extends\n",
      "     * {@link TextRenderer}, one should override this method, otherwise if {@link com.itextpdf.layout.font.FontSelector}\n",
      "     * related logic is triggered, copies of this {@link TextRenderer} will have the default behavior rather than\n",
      "     * the custom one.\n",
      "     * @param gl a {@link GlyphLine} which represents some of this {@link TextRenderer}'s content\n",
      "     * @param font a {@link PdfFont} for this part of the {@link TextRenderer}'s content\n",
      "     * @return copy of this {@link TextRenderer}, which correspond to the passed {@link GlyphLine} with {@link PdfFont}\n",
      "     */\n",
      "    protected TextRenderer createCopy(GlyphLine gl, PdfFont font) {\n",
      "        if (TextRenderer.class != this.getClass()) {\n",
      "            Logger logger = LoggerFactory.getLogger(TextRenderer.class);\n",
      "            logger.error(MessageFormatUtil.format(IoLogMessageConstant.CREATE_COPY_SHOULD_BE_OVERRIDDEN));\n",
      "        }\n",
      "        TextRenderer copy = new TextRenderer(this);\n",
      "        copy.setProcessedGlyphLineAndFont(gl, font);\n",
      "        return copy;\n",
      "    }\n",
      "\n",
      "    static void updateRangeBasedOnRemovedCharacters(ArrayList<Integer> removedIds, int[] range) {\n",
      "        int shift = numberOfElementsLessThan(removedIds, range[0]);\n",
      "        range[0] -= shift;\n",
      "        shift = numberOfElementsLessThanOrEqual(removedIds, range[1]);\n",
      "        range[1] -= shift;\n",
      "    }\n",
      "    // if amongPresentOnly is true,\n",
      "    // returns the index of lists's element which equals textStartBasedInitialOverflowTextPos\n",
      "    // or -1 if textStartBasedInitialOverflowTextPos wasn't found in the list.\n",
      "    // if amongPresentOnly is false, returns the index of list's element\n",
      "    // that is not greater than textStartBasedInitialOverflowTextPos\n",
      "    // if there's no such element in the list, -1 is returned\n",
      "    static int findPossibleBreaksSplitPosition(List<Integer> list, int textStartBasedInitialOverflowTextPos,\n",
      "            boolean amongPresentOnly) {\n",
      "        int low = 0;\n",
      "        int high = list.size() - 1;\n",
      "\n",
      "        while (low <= high) {\n",
      "            int middle = (low + high) >>> 1;\n",
      "            if (list.get(middle).compareTo(textStartBasedInitialOverflowTextPos) < 0) {\n",
      "                low = middle + 1;\n",
      "            } else if (list.get(middle).compareTo(textStartBasedInitialOverflowTextPos) > 0) {\n",
      "                high = middle - 1;\n",
      "            } else {\n",
      "                return middle;\n",
      "            }\n",
      "        }\n",
      "        if (!amongPresentOnly && low > 0) {\n",
      "            return low - 1;\n",
      "        }\n",
      "        return -1;\n",
      "    }\n",
      "\n",
      "    static boolean codePointIsOfSpecialScript(int codePoint) {\n",
      "        Character.UnicodeScript glyphScript = Character.UnicodeScript.of(codePoint);\n",
      "        return Character.UnicodeScript.THAI == glyphScript\n",
      "                || Character.UnicodeScript.KHMER == glyphScript\n",
      "                || Character.UnicodeScript.LAO == glyphScript\n",
      "                || Character.UnicodeScript.MYANMAR == glyphScript;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    PdfFont resolveFirstPdfFont(String[] font, FontProvider provider, FontCharacteristics fc, FontSet additionalFonts) {\n",
      "        IFontSelectorStrategy strategy = provider.createFontSelectorStrategy(Arrays.asList(font), fc, additionalFonts);\n",
      "        // Try to find first font that can render at least one glyph.\n",
      "        final List<Tuple2<GlyphLine, PdfFont>> glyphLines = strategy.getGlyphLines(strToBeConverted);\n",
      "        if (!glyphLines.isEmpty()) {\n",
      "            return glyphLines.get(0).getSecond();\n",
      "        }\n",
      "        return super.resolveFirstPdfFont(font, provider, fc, additionalFonts);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Identifies two properties for the layouted text renderer text: start and end break possibilities.\n",
      "     * First - if it ends with split character, second - if it starts with the split character\n",
      "     * which is at the same time is a whitespace character. These properties will later be used for identifying\n",
      "     * if we can consider this and previous/next text renderers chunks to be a part of a single word spanning across\n",
      "     * the text renderers boundaries. In the start of the text renderer we only care about split characters, which are\n",
      "     * white spaces, because only such will allow soft-breaks before them: normally split characters allow breaks only\n",
      "     * after them.\n",
      "     *\n",
      "     * @param splitCharacters current renderer {@link ISplitCharacters} property value\n",
      "     * @return a boolean array of two elements, where first element identifies start break possibility, and second - end\n",
      "     *         break possibility.\n",
      "     */\n",
      "    boolean[] isStartsWithSplitCharWhiteSpaceAndEndsWithSplitChar(ISplitCharacters splitCharacters) {\n",
      "        boolean startsWithBreak = line.start < line.end\n",
      "                && splitCharacters.isSplitCharacter(text, line.start)\n",
      "                && TextUtil.isSpaceOrWhitespace(text.get(line.start));\n",
      "        boolean endsWithBreak = line.start < line.end\n",
      "                && splitCharacters.isSplitCharacter(text, line.end - 1);\n",
      "        if (specialScriptsWordBreakPoints == null || specialScriptsWordBreakPoints.isEmpty()) {\n",
      "            return new boolean[]{startsWithBreak, endsWithBreak};\n",
      "        } else {\n",
      "            if (!endsWithBreak) {\n",
      "                endsWithBreak = specialScriptsWordBreakPoints.contains(line.end);\n",
      "            }\n",
      "            return new boolean[]{startsWithBreak, endsWithBreak};\n",
      "        }\n",
      "    }\n",
      "\n",
      "    private void drawAndTagSingleUnderline(boolean isTagged, Underline underline,\n",
      "                                           TransparentColor fontStrokeColor, PdfCanvas canvas,\n",
      "                                           float fontSize, float italicAngleTan) {\n",
      "        if (isTagged) {\n",
      "            canvas.openTag(new CanvasArtifact());\n",
      "        }\n",
      "        drawSingleUnderline(underline, fontStrokeColor, canvas, fontSize, italicAngleTan);\n",
      "        if (isTagged) {\n",
      "            canvas.closeTag();\n",
      "        }\n",
      "    }\n",
      "\n",
      "    private float getCharWidth(Glyph g, float fontSize, Float hScale, Float characterSpacing, Float wordSpacing) {\n",
      "        if (hScale == null)\n",
      "            hScale = 1f;\n",
      "\n",
      "        float resultWidth = g.getWidth() * fontSize * (float) hScale;\n",
      "        if (characterSpacing != null) {\n",
      "            resultWidth += FontProgram.convertGlyphSpaceToTextSpace((float) characterSpacing * (float) hScale);\n",
      "        }\n",
      "        if (wordSpacing != null && g.getUnicode() == ' ') {\n",
      "            resultWidth += FontProgram.convertGlyphSpaceToTextSpace((float) wordSpacing * (float) hScale);\n",
      "        }\n",
      "        return resultWidth;\n",
      "    }\n",
      "\n",
      "    private float scaleXAdvance(float xAdvance, float fontSize, Float hScale) {\n",
      "        return xAdvance * fontSize * (float) hScale;\n",
      "    }\n",
      "\n",
      "    private float getGlyphLineWidth(GlyphLine glyphLine, float fontSize, float hScale, Float characterSpacing, Float wordSpacing) {\n",
      "        float width = 0;\n",
      "        for (int i = glyphLine.start; i < glyphLine.end; i++) {\n",
      "            if (!noPrint(glyphLine.get(i))) {\n",
      "                float charWidth = getCharWidth(glyphLine.get(i), fontSize, hScale, characterSpacing, wordSpacing);\n",
      "                width += charWidth;\n",
      "                float xAdvance = (i != glyphLine.start) ? scaleXAdvance(glyphLine.get(i - 1).getXAdvance(), fontSize, hScale) : 0;\n",
      "                width += xAdvance;\n",
      "            }\n",
      "        }\n",
      "        return FontProgram.convertTextSpaceToGlyphSpace(width);\n",
      "    }\n",
      "\n",
      "    private int[] getWordBoundsForHyphenation(GlyphLine text, int leftTextPos, int rightTextPos, int wordMiddleCharPos) {\n",
      "        while (wordMiddleCharPos >= leftTextPos && !isGlyphPartOfWordForHyphenation(text.get(wordMiddleCharPos))\n",
      "                && !TextUtil.isUni0020(text.get(wordMiddleCharPos))) {\n",
      "            wordMiddleCharPos--;\n",
      "        }\n",
      "        if (wordMiddleCharPos >= leftTextPos) {\n",
      "            int left = wordMiddleCharPos;\n",
      "            while (left >= leftTextPos && isGlyphPartOfWordForHyphenation(text.get(left))) {\n",
      "                left--;\n",
      "            }\n",
      "            int right = wordMiddleCharPos;\n",
      "            while (right < rightTextPos && isGlyphPartOfWordForHyphenation(text.get(right))) {\n",
      "                right++;\n",
      "            }\n",
      "            return new int[]{left + 1, right};\n",
      "        } else {\n",
      "            return null;\n",
      "        }\n",
      "    }\n",
      "\n",
      "    private boolean isGlyphPartOfWordForHyphenation(Glyph g) {\n",
      "        return Character.isLetter((char) g.getUnicode())\n",
      "\n",
      "                // soft hyphen\n",
      "                || '\\u00ad' == g.getUnicode();\n",
      "    }\n",
      "\n",
      "    private void updateFontAndText() {\n",
      "        if (strToBeConverted != null) {\n",
      "            PdfFont newFont;\n",
      "            try {\n",
      "                newFont = getPropertyAsFont(Property.FONT);\n",
      "            } catch (ClassCastException cce) {\n",
      "                newFont = resolveFirstPdfFont();\n",
      "                if (!strToBeConverted.isEmpty()) {\n",
      "                    Logger logger = LoggerFactory.getLogger(TextRenderer.class);\n",
      "                    logger.error(IoLogMessageConstant.FONT_PROPERTY_MUST_BE_PDF_FONT_OBJECT);\n",
      "                }\n",
      "            }\n",
      "            GlyphLine newText = newFont.createGlyphLine(strToBeConverted);\n",
      "            newText = TextPreprocessingUtil.replaceSpecialWhitespaceGlyphs(newText, newFont);\n",
      "            setProcessedGlyphLineAndFont(newText, newFont);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    private void saveWordBreakIfNotYetSaved(Glyph wordBreak) {\n",
      "        if (savedWordBreakAtLineEnding == null) {\n",
      "            if (TextUtil.isNewLine(wordBreak)) {\n",
      "\n",
      "                // we don't want to print '\\n' in content stream\n",
      "                wordBreak = font.getGlyph('\\u0020');\n",
      "            }\n",
      "            // it's word-break character at the end of the line, which we want to save after trimming\n",
      "            savedWordBreakAtLineEnding = new GlyphLine(Collections.<Glyph>singletonList(wordBreak));\n",
      "        }\n",
      "    }\n",
      "\n",
      "    private static int numberOfElementsLessThan(ArrayList<Integer> numbers, int n) {\n",
      "        int x = Collections.binarySearch(numbers, n);\n",
      "        if (x >= 0) {\n",
      "            return x;\n",
      "        } else {\n",
      "            return -x - 1;\n",
      "        }\n",
      "    }\n",
      "\n",
      "    private static int numberOfElementsLessThanOrEqual(ArrayList<Integer> numbers, int n) {\n",
      "        int x = Collections.binarySearch(numbers, n);\n",
      "        if (x >= 0) {\n",
      "            return x + 1;\n",
      "        } else {\n",
      "            return -x - 1;\n",
      "        }\n",
      "    }\n",
      "\n",
      "    private static boolean noPrint(Glyph g) {\n",
      "        if (!g.hasValidUnicode()) {\n",
      "            return false;\n",
      "        }\n",
      "        int c = g.getUnicode();\n",
      "        return TextUtil.isNonPrintable(c);\n",
      "    }\n",
      "\n",
      "    private static boolean glyphBelongsToNonBreakingHyphenRelatedChunk(GlyphLine text, int ind) {\n",
      "        return TextUtil.isNonBreakingHyphen(text.get(ind)) || (ind + 1 < text.end && TextUtil.isNonBreakingHyphen(text.get(ind + 1))) || ind - 1 >= text.start && TextUtil.isNonBreakingHyphen(text.get(ind - 1));\n",
      "    }\n",
      "\n",
      "    private static class ReversedCharsIterator implements Iterator<GlyphLine.GlyphLinePart> {\n",
      "        private List<Integer> outStart;\n",
      "        private List<Integer> outEnd;\n",
      "        private List<Boolean> reversed;\n",
      "        private int currentInd = 0;\n",
      "        private boolean useReversed;\n",
      "\n",
      "        public ReversedCharsIterator(List<int[]> reversedRange, GlyphLine line) {\n",
      "            outStart = new ArrayList<>();\n",
      "            outEnd = new ArrayList<>();\n",
      "            reversed = new ArrayList<>();\n",
      "            if (reversedRange != null) {\n",
      "                if (reversedRange.get(0)[0] > 0) {\n",
      "                    outStart.add(0);\n",
      "                    outEnd.add(reversedRange.get(0)[0]);\n",
      "                    reversed.add(false);\n",
      "                }\n",
      "                for (int i = 0; i < reversedRange.size(); i++) {\n",
      "                    int[] range = reversedRange.get(i);\n",
      "                    outStart.add(range[0]);\n",
      "                    outEnd.add(range[1] + 1);\n",
      "                    reversed.add(true);\n",
      "                    if (i != reversedRange.size() - 1) {\n",
      "                        outStart.add(range[1] + 1);\n",
      "                        outEnd.add(reversedRange.get(i + 1)[0]);\n",
      "                        reversed.add(false);\n",
      "                    }\n",
      "                }\n",
      "                int lastIndex = reversedRange.get(reversedRange.size() - 1)[1];\n",
      "                if (lastIndex < line.size() - 1) {\n",
      "                    outStart.add(lastIndex + 1);\n",
      "                    outEnd.add(line.size());\n",
      "                    reversed.add(false);\n",
      "                }\n",
      "            } else {\n",
      "                outStart.add(line.start);\n",
      "                outEnd.add(line.end);\n",
      "                reversed.add(false);\n",
      "            }\n",
      "        }\n",
      "\n",
      "        public ReversedCharsIterator setUseReversed(boolean useReversed) {\n",
      "            this.useReversed = useReversed;\n",
      "            return this;\n",
      "        }\n",
      "\n",
      "        @Override\n",
      "        public boolean hasNext() {\n",
      "            return currentInd < outStart.size();\n",
      "        }\n",
      "\n",
      "        @Override\n",
      "        public GlyphLine.GlyphLinePart next() {\n",
      "            GlyphLine.GlyphLinePart part = new GlyphLine.GlyphLinePart(outStart.get(currentInd), outEnd.get(currentInd)).\n",
      "                    setReversed(useReversed && reversed.get(currentInd));\n",
      "            currentInd++;\n",
      "            return part;\n",
      "        }\n",
      "\n",
      "        @Override\n",
      "        public void remove() {\n",
      "            throw new IllegalStateException(\"Operation not supported\");\n",
      "        }\n",
      "\n",
      "    }\n",
      "\n",
      "    private static class ScriptRange {\n",
      "        Character.UnicodeScript script;\n",
      "        int rangeEnd;\n",
      "\n",
      "        ScriptRange(Character.UnicodeScript script, int rangeEnd) {\n",
      "            this.script = script;\n",
      "            this.rangeEnd = rangeEnd;\n",
      "        }\n",
      "    }\n",
      "\n",
      "    private static final class CustomGlyphLineFilter implements GlyphLine.IGlyphLineFilter {\n",
      "        @Override\n",
      "        public boolean accept(Glyph glyph) {\n",
      "            return !noPrint(glyph);\n",
      "        }\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.layout.renderer;\n",
      "\n",
      "import com.itextpdf.io.logs.IoLogMessageConstant;\n",
      "import com.itextpdf.io.font.otf.Glyph;\n",
      "import com.itextpdf.io.font.otf.GlyphLine;\n",
      "import com.itextpdf.io.util.TextUtil;\n",
      "import com.itextpdf.kernel.font.PdfFont;\n",
      "import com.itextpdf.kernel.font.PdfFontFactory;\n",
      "import com.itextpdf.kernel.geom.Rectangle;\n",
      "import com.itextpdf.kernel.pdf.PdfDocument;\n",
      "import com.itextpdf.kernel.pdf.PdfWriter;\n",
      "import com.itextpdf.layout.Document;\n",
      "import com.itextpdf.layout.element.Paragraph;\n",
      "import com.itextpdf.layout.element.Text;\n",
      "import com.itextpdf.layout.font.FontProvider;\n",
      "import com.itextpdf.layout.layout.LayoutArea;\n",
      "import com.itextpdf.layout.layout.LayoutContext;\n",
      "import com.itextpdf.layout.layout.LayoutPosition;\n",
      "import com.itextpdf.layout.layout.LayoutResult;\n",
      "import com.itextpdf.layout.layout.TextLayoutResult;\n",
      "import com.itextpdf.layout.minmaxwidth.MinMaxWidth;\n",
      "import com.itextpdf.layout.properties.OverflowPropertyValue;\n",
      "import com.itextpdf.layout.properties.OverflowWrapPropertyValue;\n",
      "import com.itextpdf.layout.properties.Property;\n",
      "import com.itextpdf.layout.properties.RenderingMode;\n",
      "import com.itextpdf.layout.properties.UnitValue;\n",
      "import com.itextpdf.layout.properties.FloatPropertyValue;\n",
      "import com.itextpdf.test.annotations.LogMessage;\n",
      "import com.itextpdf.test.annotations.LogMessages;\n",
      "import com.itextpdf.test.annotations.type.UnitTest;\n",
      "\n",
      "import java.io.ByteArrayOutputStream;\n",
      "import java.io.IOException;\n",
      "\n",
      "import java.util.Arrays;\n",
      "\n",
      "import org.junit.Assert;\n",
      "import org.junit.Test;\n",
      "import org.junit.experimental.categories.Category;\n",
      "\n",
      "@Category(UnitTest.class)\n",
      "public class TextRendererTest extends RendererUnitTest {\n",
      "    private static final String FONTS_FOLDER = \"./src/test/resources/com/itextpdf/layout/fonts/\";\n",
      "\n",
      "    private static final double EPS = 1e-5;\n",
      "\n",
      "    @Test\n",
      "    public void nextRendererTest() {\n",
      "        PdfDocument pdfDoc = new PdfDocument(new PdfWriter(new ByteArrayOutputStream()));\n",
      "        pdfDoc.addNewPage();\n",
      "        Document doc = new Document(pdfDoc);\n",
      "        RootRenderer documentRenderer = doc.getRenderer();\n",
      "\n",
      "        Text text = new Text(\"hello\");\n",
      "        text.setNextRenderer(new TextRenderer(text));\n",
      "\n",
      "        IRenderer textRenderer1 = text.getRenderer().setParent(documentRenderer);\n",
      "        IRenderer textRenderer2 = text.getRenderer().setParent(documentRenderer);\n",
      "\n",
      "        LayoutArea area = new LayoutArea(1, new Rectangle(100, 100, 100, 100));\n",
      "        LayoutContext layoutContext = new LayoutContext(area);\n",
      "\n",
      "        doc.close();\n",
      "\n",
      "        LayoutResult result1 = textRenderer1.layout(layoutContext);\n",
      "        LayoutResult result2 = textRenderer2.layout(layoutContext);\n",
      "\n",
      "        Assert.assertEquals(result1.getOccupiedArea(), result2.getOccupiedArea());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    @LogMessages(messages = {\n",
      "            @LogMessage(messageTemplate = IoLogMessageConstant.FONT_PROPERTY_MUST_BE_PDF_FONT_OBJECT)\n",
      "    })\n",
      "    public void setTextException() {\n",
      "        final String val = \"other text\";\n",
      "        final String fontName = \"Helvetica\";\n",
      "        TextRenderer rend = (TextRenderer) new Text(\"basic text\").getRenderer();\n",
      "        FontProvider fp = new FontProvider();\n",
      "        fp.addFont(fontName);\n",
      "        rend.setProperty(Property.FONT_PROVIDER, fp);\n",
      "        rend.setProperty(Property.FONT, new String[] {fontName});\n",
      "        rend.setText(val);\n",
      "        Assert.assertEquals(val, rend.getText().toString());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void setTextGlyphLineAndFontParamTest() throws IOException {\n",
      "        TextRenderer renderer = new TextRenderer(new Text(\"Some text\"));\n",
      "        String text = \"\\t\";\n",
      "        PdfFont pdfFont = PdfFontFactory.createFont();\n",
      "        GlyphLine glyphLine = new GlyphLine();\n",
      "\n",
      "        for (int i = 0; i < text.length(); i++) {\n",
      "            int codePoint = TextUtil.isSurrogatePair(text, i) ? TextUtil.convertToUtf32(text, i) : (int) text.charAt(i);\n",
      "\n",
      "            Glyph glyph = pdfFont.getGlyph(codePoint);\n",
      "            glyphLine.add(glyph);\n",
      "        }\n",
      "\n",
      "        renderer.setText(glyphLine, pdfFont);\n",
      "        GlyphLine actualLine = renderer.getText();\n",
      "\n",
      "        Assert.assertFalse(actualLine == glyphLine);\n",
      "        Glyph glyph = actualLine.get(0);\n",
      "        Glyph space = pdfFont.getGlyph('\\u0020');\n",
      "        // Check that the glyph line has been processed using the replaceSpecialWhitespaceGlyphs method\n",
      "        Assert.assertEquals(space.getCode(), glyph.getCode());\n",
      "        Assert.assertEquals(space.getWidth(), glyph.getWidth());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void setTextGlyphLineAndPositionsParamTest() throws IOException {\n",
      "        TextRenderer renderer = new TextRenderer(new Text(\"Some text\"));\n",
      "        String text = \"\\tsome\";\n",
      "        PdfFont pdfFont = PdfFontFactory.createFont();\n",
      "        GlyphLine glyphLine = new GlyphLine();\n",
      "\n",
      "        for (int i = 0; i < text.length(); i++) {\n",
      "            int codePoint = TextUtil.isSurrogatePair(text, i) ? TextUtil.convertToUtf32(text, i) : (int) text.charAt(i);\n",
      "\n",
      "            Glyph glyph = pdfFont.getGlyph(codePoint);\n",
      "            glyphLine.add(glyph);\n",
      "        }\n",
      "\n",
      "        renderer.setText(new GlyphLine(), pdfFont);\n",
      "        glyphLine.start = 1;\n",
      "        glyphLine.end = 2;\n",
      "        renderer.setText(glyphLine, pdfFont);\n",
      "        GlyphLine actualLine = renderer.getText();\n",
      "\n",
      "        Assert.assertFalse(actualLine == glyphLine);\n",
      "        Glyph glyph = actualLine.get(0);\n",
      "        Glyph space = pdfFont.getGlyph('\\u0020');\n",
      "        // Check that the glyph line has been processed using the replaceSpecialWhitespaceGlyphs method\n",
      "        Assert.assertEquals(space.getCode(), glyph.getCode());\n",
      "        Assert.assertEquals(space.getWidth(), glyph.getWidth());\n",
      "        Assert.assertEquals(1, actualLine.start);\n",
      "        Assert.assertEquals(2, actualLine.end);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * This test assumes that absolute positioning for {@link Text} elements is\n",
      "     * not supported. Adding this support is the subject of DEVSIX-1393.\n",
      "     */\n",
      "    @Test\n",
      "    @LogMessages(messages = {\n",
      "            @LogMessage(messageTemplate = IoLogMessageConstant.FONT_PROPERTY_MUST_BE_PDF_FONT_OBJECT)\n",
      "    })\n",
      "    public void setFontAsText() {\n",
      "        PdfDocument pdfDoc = new PdfDocument(new PdfWriter(new ByteArrayOutputStream()));\n",
      "        pdfDoc.addNewPage();\n",
      "        Document doc = new Document(pdfDoc);\n",
      "        Text txt = new Text(\"text\");\n",
      "        txt.setProperty(Property.POSITION, LayoutPosition.ABSOLUTE);\n",
      "        txt.setProperty(Property.TOP, 5f);\n",
      "        FontProvider fp = new FontProvider();\n",
      "        fp.addFont(\"Helvetica\");\n",
      "        txt.setProperty(Property.FONT_PROVIDER, fp);\n",
      "        txt.setFontFamily(\"Helvetica\");\n",
      "        doc.add(new Paragraph().add(txt));\n",
      "        doc.close();\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void getDescentTest() {\n",
      "        Document doc = createDummyDocument();\n",
      "        TextRenderer textRenderer = createLayoutedTextRenderer(\"hello\", doc);\n",
      "        textRenderer.setProperty(Property.PADDING_TOP, UnitValue.createPointValue(20f));\n",
      "        textRenderer.setProperty(Property.MARGIN_TOP, UnitValue.createPointValue(20f));\n",
      "        Assert.assertEquals(-2.980799674987793f, textRenderer.getDescent(), EPS);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void getOccupiedAreaBBoxTest() {\n",
      "        Document doc = createDummyDocument();\n",
      "        TextRenderer textRenderer = createLayoutedTextRenderer(\"hello\", doc);\n",
      "        textRenderer.setProperty(Property.PADDING_TOP, UnitValue.createPointValue(20f));\n",
      "        textRenderer.setProperty(Property.MARGIN_TOP, UnitValue.createPointValue(20f));\n",
      "        textRenderer.setProperty(Property.PADDING_RIGHT, UnitValue.createPointValue(20f));\n",
      "        textRenderer.setProperty(Property.RENDERING_MODE, RenderingMode.HTML_MODE);\n",
      "        Assert.assertTrue(\n",
      "                new Rectangle(0, 986.68f, 25.343998f, 13.32f).equalsWithEpsilon(textRenderer.getOccupiedAreaBBox()));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void getInnerAreaBBoxTest() {\n",
      "        Document doc = createDummyDocument();\n",
      "        TextRenderer textRenderer = createLayoutedTextRenderer(\"hello\", doc);\n",
      "        textRenderer.setProperty(Property.PADDING_TOP, UnitValue.createPointValue(20f));\n",
      "        textRenderer.setProperty(Property.MARGIN_TOP, UnitValue.createPointValue(20f));\n",
      "        textRenderer.setProperty(Property.PADDING_RIGHT, UnitValue.createPointValue(20f));\n",
      "        textRenderer.setProperty(Property.RENDERING_MODE, RenderingMode.HTML_MODE);\n",
      "        Assert.assertTrue(new Rectangle(0, 986.68f, 5.343998f, -26.68f)\n",
      "                .equalsWithEpsilon(textRenderer.getInnerAreaBBox()));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void resolveFirstPdfFontWithGlyphsAvailableOnlyInSecondaryFont() {\n",
      "        // Test that in TextRenderer the #resolveFirstPdfFont method is overloaded in such way\n",
      "        // that yielded font contains at least some of the glyphs for the text characters.\n",
      "\n",
      "        Text text = new Text(\"\\u043A\\u0456\\u0440\\u044B\\u043B\\u0456\\u0446\\u0430\"); // \"\u043a\u0456\u0440\u044b\u043b\u0456\u0446\u0430\"\n",
      "\n",
      "        // Puritan doesn't contain cyrillic symbols, while Noto Sans does.\n",
      "        text.setFontFamily(Arrays.asList(\"Puritan 2.0\", \"Noto Sans\"));\n",
      "\n",
      "        FontProvider fontProvider = new FontProvider();\n",
      "        fontProvider.addFont(FONTS_FOLDER + \"Puritan2.otf\");\n",
      "        fontProvider.addFont(FONTS_FOLDER + \"NotoSans-Regular.ttf\");\n",
      "        text.setProperty(Property.FONT_PROVIDER, fontProvider);\n",
      "\n",
      "        TextRenderer renderer = (TextRenderer) new TextRenderer(text);\n",
      "        PdfFont pdfFont = renderer.resolveFirstPdfFont();\n",
      "\n",
      "        Assert.assertEquals(\"NotoSans\", pdfFont.getFontProgram().getFontNames().getFontName());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void myanmarCharacterBelongsToSpecificScripts() {\n",
      "        // u1042 MYANMAR DIGIT TWO\n",
      "        Assert.assertTrue(TextRenderer.codePointIsOfSpecialScript(4162));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void thaiCharacterBelongsToSpecificScripts() {\n",
      "        // u0E19 THAI CHARACTER NO NU\n",
      "        Assert.assertTrue(TextRenderer.codePointIsOfSpecialScript(3609));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void laoCharacterBelongsToSpecificScripts() {\n",
      "        // u0EC8 LAO TONE MAI EK\n",
      "        Assert.assertTrue(TextRenderer.codePointIsOfSpecialScript(3784));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void khmerCharacterBelongsToSpecificScripts() {\n",
      "        // u1789 KHMER LETTER NYO\n",
      "        Assert.assertTrue(TextRenderer.codePointIsOfSpecialScript(6025));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void cyrillicCharacterDoesntBelongToSpecificScripts() {\n",
      "        // u0433 Cyrillic Small Letter U\n",
      "        Assert.assertFalse(TextRenderer.codePointIsOfSpecialScript(1091));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void overflowWrapAnywhereProperty() {\n",
      "        Text text = new Text(\"wow\");\n",
      "        text.setProperty(Property.OVERFLOW_WRAP, OverflowWrapPropertyValue.ANYWHERE);\n",
      "\n",
      "        TextRenderer textRenderer = (TextRenderer) text.getRenderer();\n",
      "        textRenderer.setParent(createDummyDocument().getRenderer());\n",
      "\n",
      "        MinMaxWidth minMaxWidth = textRenderer.getMinMaxWidth();\n",
      "\n",
      "        Assert.assertTrue(minMaxWidth.getMinWidth() < minMaxWidth.getMaxWidth());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void overflowWrapBreakWordProperty() {\n",
      "        Text text = new Text(\"wooow\");\n",
      "\n",
      "        TextRenderer textRenderer = (TextRenderer) text.getRenderer();\n",
      "        RootRenderer parentRenderer = createDummyDocument().getRenderer();\n",
      "        textRenderer.setParent(parentRenderer);\n",
      "        // overflow is set here to mock LineRenderer#layout behavior\n",
      "        parentRenderer.setProperty(Property.OVERFLOW_X, OverflowPropertyValue.VISIBLE);\n",
      "\n",
      "        float fullWordWidth = textRenderer.getMinMaxWidth().getMaxWidth();\n",
      "\n",
      "        LayoutArea layoutArea = new LayoutArea(1,\n",
      "                new Rectangle(fullWordWidth / 2, AbstractRenderer.INF));\n",
      "\n",
      "        TextLayoutResult result = (TextLayoutResult) textRenderer.layout(new LayoutContext(layoutArea));\n",
      "        Assert.assertFalse(result.isWordHasBeenSplit());\n",
      "\n",
      "        textRenderer.setProperty(Property.OVERFLOW_WRAP, OverflowWrapPropertyValue.BREAK_WORD);\n",
      "        result = (TextLayoutResult) textRenderer.layout(new LayoutContext(layoutArea));\n",
      "        Assert.assertTrue(result.isWordHasBeenSplit());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void overflowWrapAnywhereBoldSimulationMaxWidth() {\n",
      "        Text text = new Text(\"wow\");\n",
      "        text.setBold();\n",
      "\n",
      "        TextRenderer textRenderer = (TextRenderer) text.getRenderer();\n",
      "        textRenderer.setParent(createDummyDocument().getRenderer());\n",
      "\n",
      "        float maxWidthNoOverflowWrap = textRenderer.getMinMaxWidth().getMaxWidth();\n",
      "\n",
      "        text.setProperty(Property.OVERFLOW_WRAP, OverflowWrapPropertyValue.ANYWHERE);\n",
      "        float maxWidthAndOverflowWrap = textRenderer.getMinMaxWidth().getMaxWidth();\n",
      "\n",
      "        Assert.assertEquals(maxWidthAndOverflowWrap, maxWidthNoOverflowWrap, 0.0001);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void overflowWrapAnywhereItalicSimulationMaxWidth() {\n",
      "        Text text = new Text(\"wow\");\n",
      "        text.setItalic();\n",
      "\n",
      "        TextRenderer textRenderer = (TextRenderer) text.getRenderer();\n",
      "        textRenderer.setParent(createDummyDocument().getRenderer());\n",
      "\n",
      "        float maxWidthNoOverflowWrap = textRenderer.getMinMaxWidth().getMaxWidth();\n",
      "\n",
      "        text.setProperty(Property.OVERFLOW_WRAP, OverflowWrapPropertyValue.ANYWHERE);\n",
      "        float maxWidthAndOverflowWrap = textRenderer.getMinMaxWidth().getMaxWidth();\n",
      "\n",
      "        Assert.assertEquals(maxWidthAndOverflowWrap, maxWidthNoOverflowWrap, 0.0001);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void overflowWrapAnywhereBoldSimulationMinWidth() {\n",
      "        Text text = new Text(\"wow\");\n",
      "        text.setProperty(Property.OVERFLOW_WRAP, OverflowWrapPropertyValue.ANYWHERE);\n",
      "\n",
      "        TextRenderer textRenderer = (TextRenderer) text.getRenderer();\n",
      "        textRenderer.setParent(createDummyDocument().getRenderer());\n",
      "\n",
      "        float minWidthNoBoldSimulation = textRenderer.getMinMaxWidth().getMinWidth();\n",
      "\n",
      "        text.setBold();\n",
      "        float minWidthAndBoldSimulation = textRenderer.getMinMaxWidth().getMinWidth();\n",
      "\n",
      "        Assert.assertTrue(minWidthAndBoldSimulation > minWidthNoBoldSimulation);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void overflowWrapAnywhereItalicSimulationMinWidth() {\n",
      "        Text text = new Text(\"wow\");\n",
      "        text.setProperty(Property.OVERFLOW_WRAP, OverflowWrapPropertyValue.ANYWHERE);\n",
      "\n",
      "        TextRenderer textRenderer = (TextRenderer) text.getRenderer();\n",
      "        textRenderer.setParent(createDummyDocument().getRenderer());\n",
      "\n",
      "        float minWidthNoItalicSimulation = textRenderer.getMinMaxWidth().getMinWidth();\n",
      "\n",
      "        text.setItalic();\n",
      "        float minWidthAndItalicSimulation = textRenderer.getMinMaxWidth().getMinWidth();\n",
      "\n",
      "        Assert.assertTrue(minWidthAndItalicSimulation > minWidthNoItalicSimulation);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void floatingRightMinMaxWidth() throws IOException {\n",
      "        String longestWord = \"float:right\";\n",
      "        String wholeText = \"text with \" + longestWord;\n",
      "        TextRenderer textRenderer = new TextRenderer(new Text(wholeText));\n",
      "        textRenderer.setProperty(Property.FLOAT, FloatPropertyValue.RIGHT);\n",
      "\n",
      "        textRenderer.setParent(createDummyDocument().getRenderer());\n",
      "\n",
      "        PdfFont font = PdfFontFactory.createFont();\n",
      "        int fontSize = 12;\n",
      "        textRenderer.setProperty(Property.FONT, font);\n",
      "        textRenderer.setProperty(Property.FONT_SIZE, UnitValue.createPointValue(fontSize));\n",
      "\n",
      "        float expectedMaxWidth = font.getWidth(wholeText, fontSize);\n",
      "        float expectedMinWidth = font.getWidth(longestWord, fontSize);\n",
      "\n",
      "        MinMaxWidth minMaxWidth = textRenderer.getMinMaxWidth();\n",
      "        Assert.assertEquals(expectedMinWidth, minMaxWidth.getMinWidth(), 0.01f);\n",
      "        Assert.assertEquals(expectedMaxWidth, minMaxWidth.getMaxWidth(), 0.01f);\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)": [
        156,
        728
      ],
      "TextRenderer::::increaseYLineOffset(com.itextpdf.layout.properties.UnitValue[],com.itextpdf.layout.borders.Border[],com.itextpdf.layout.properties.UnitValue[])": [
        730,
        734
      ],
      "TextRenderer::::applyOtf()": [
        736,
        818
      ],
      "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)": [
        820,
        1013
      ],
      "TextRenderer::::trimFirst()": [
        1019,
        1046
      ],
      "TextRenderer::::trimLast()": [
        1048,
        1085
      ],
      "TextRenderer::::getAscent()": [
        1092,
        1095
      ],
      "TextRenderer::::getDescent()": [
        1102,
        1105
      ],
      "TextRenderer::::getYLine()": [
        1113,
        1115
      ],
      "TextRenderer::::moveYLineTo(float)": [
        1122,
        1126
      ],
      "TextRenderer::::setText(java.lang.String)": [
        1134,
        1138
      ],
      "TextRenderer::::getText()": [
        1152,
        1155
      ],
      "TextRenderer::::length()": [
        1162,
        1164
      ],
      "TextRenderer::::toString()": [
        1166,
        1169
      ],
      "TextRenderer::::charAt(int)": [
        1177,
        1179
      ],
      "TextRenderer::::getTabAnchorCharacterPosition()": [
        1181,
        1183
      ],
      "TextRenderer::::getNextRenderer()": [
        1198,
        1202
      ],
      "TextRenderer::::getReversedRanges()": [
        1243,
        1245
      ],
      "TextRenderer::::initReversedRanges()": [
        1247,
        1252
      ],
      "TextRenderer::::removeReversedRanges()": [
        1254,
        1257
      ],
      "TextRenderer::::splitIgnoreFirstNewLine(int)": [
        1259,
        1265
      ],
      "TextRenderer::::convertToGlyphLine(java.lang.String)": [
        1267,
        1269
      ],
      "TextRenderer::::hasOtfFont()": [
        1271,
        1273
      ],
      "TextRenderer::::textContainsSpecialScriptGlyphs(boolean)": [
        1292,
        1330
      ],
      "TextRenderer::::setSpecialScriptsWordBreakPoints(java.util.List<java.lang.Integer>)": [
        1332,
        1334
      ],
      "TextRenderer::::getSpecialScriptsWordBreakPoints()": [
        1336,
        1338
      ],
      "TextRenderer::::setSpecialScriptFirstNotFittingIndex(int)": [
        1340,
        1342
      ],
      "TextRenderer::::getSpecialScriptFirstNotFittingIndex()": [
        1344,
        1346
      ],
      "TextRenderer::::setIndexOfFirstCharacterToBeForcedToOverflow(int)": [
        1348,
        1350
      ],
      "TextRenderer::::getFirstYLineRecursively()": [
        1358,
        1361
      ],
      "TextRenderer::::getLastYLineRecursively()": [
        1363,
        1366
      ],
      "TextRenderer::::lineLength()": [
        1373,
        1375
      ],
      "TextRenderer::::baseCharactersCount()": [
        1377,
        1386
      ],
      "TextRenderer::::getMinMaxWidth()": [
        1388,
        1392
      ],
      "TextRenderer::::getNumberOfSpaces()": [
        1394,
        1405
      ],
      "TextRenderer::::createSplitRenderer()": [
        1407,
        1409
      ],
      "TextRenderer::::createOverflowRenderer()": [
        1411,
        1413
      ],
      "TextRenderer::::split(int)": [
        1415,
        1475
      ],
      "TextRenderer::::calculateLineWidth()": [
        1501,
        1510
      ],
      "TextRenderer::::resolveFonts(java.util.List<com.itextpdf.layout.renderer.IRenderer>)": [
        1518,
        1546
      ],
      "TextRenderer::::updateRangeBasedOnRemovedCharacters(java.util.ArrayList<java.lang.Integer>,int[])": [
        1580,
        1585
      ],
      "TextRenderer::::findPossibleBreaksSplitPosition(java.util.List<java.lang.Integer>,int,boolean)": [
        1592,
        1611
      ],
      "TextRenderer::::codePointIsOfSpecialScript(int)": [
        1613,
        1619
      ],
      "TextRenderer::::resolveFirstPdfFont(java.lang.String[],com.itextpdf.layout.font.FontProvider,com.itextpdf.layout.font.FontCharacteristics,com.itextpdf.layout.font.FontSet)": [
        1621,
        1630
      ],
      "TextRenderer::::isStartsWithSplitCharWhiteSpaceAndEndsWithSplitChar(com.itextpdf.layout.splitting.ISplitCharacters)": [
        1645,
        1659
      ],
      "TextRenderer::::scaleXAdvance(float,float,java.lang.Float)": [
        1687,
        1689
      ],
      "TextRenderer::::updateFontAndText()": [
        1731,
        1747
      ],
      "TextRenderer::::numberOfElementsLessThan(java.util.ArrayList<java.lang.Integer>,int)": [
        1761,
        1768
      ],
      "TextRenderer::::numberOfElementsLessThanOrEqual(java.util.ArrayList<java.lang.Integer>,int)": [
        1770,
        1777
      ],
      "TextRenderer.ReversedCharsIterator::::setUseReversed(boolean)": [
        1832,
        1835
      ],
      "TextRenderer.ReversedCharsIterator::::hasNext()": [
        1837,
        1840
      ],
      "TextRenderer.ReversedCharsIterator::::next()": [
        1842,
        1848
      ],
      "TextRenderer.ReversedCharsIterator::::remove()": [
        1850,
        1853
      ]
    },
    "test_method_lines_dic": {
      "TextRendererTest::::nextRendererTest()": [
        69,
        91
      ],
      "TextRendererTest::::setTextException()": [
        93,
        107
      ],
      "TextRendererTest::::setTextGlyphLineAndFontParamTest()": [
        109,
        132
      ],
      "TextRendererTest::::setTextGlyphLineAndPositionsParamTest()": [
        134,
        162
      ],
      "TextRendererTest::::setFontAsText()": [
        168,
        185
      ],
      "TextRendererTest::::getDescentTest()": [
        187,
        194
      ],
      "TextRendererTest::::getOccupiedAreaBBoxTest()": [
        196,
        206
      ],
      "TextRendererTest::::getInnerAreaBBoxTest()": [
        208,
        218
      ],
      "TextRendererTest::::resolveFirstPdfFontWithGlyphsAvailableOnlyInSecondaryFont()": [
        220,
        239
      ],
      "TextRendererTest::::myanmarCharacterBelongsToSpecificScripts()": [
        241,
        245
      ],
      "TextRendererTest::::thaiCharacterBelongsToSpecificScripts()": [
        247,
        251
      ],
      "TextRendererTest::::laoCharacterBelongsToSpecificScripts()": [
        253,
        257
      ],
      "TextRendererTest::::khmerCharacterBelongsToSpecificScripts()": [
        259,
        263
      ],
      "TextRendererTest::::cyrillicCharacterDoesntBelongToSpecificScripts()": [
        265,
        269
      ],
      "TextRendererTest::::overflowWrapAnywhereProperty()": [
        271,
        282
      ],
      "TextRendererTest::::overflowWrapBreakWordProperty()": [
        284,
        305
      ],
      "TextRendererTest::::overflowWrapAnywhereBoldSimulationMaxWidth()": [
        307,
        321
      ],
      "TextRendererTest::::overflowWrapAnywhereItalicSimulationMaxWidth()": [
        323,
        337
      ],
      "TextRendererTest::::overflowWrapAnywhereBoldSimulationMinWidth()": [
        339,
        353
      ],
      "TextRendererTest::::overflowWrapAnywhereItalicSimulationMinWidth()": [
        355,
        369
      ],
      "TextRendererTest::::floatingRightMinMaxWidth()": [
        371,
        391
      ]
    },
    "reverse_method_lines_dic": {
      "156": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "157": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "158": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "159": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "160": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "161": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "162": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "163": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "164": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "165": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "166": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "167": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "168": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "169": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "170": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "171": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "172": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "173": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "174": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "175": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "176": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "177": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "178": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "179": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "180": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "181": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "182": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "183": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "184": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "185": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "186": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "187": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "188": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "189": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "190": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "191": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "192": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "193": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "194": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "195": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "196": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "197": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "198": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "199": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "200": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "201": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "202": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "203": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "204": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "205": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "206": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "207": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "208": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "209": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "210": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "211": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "212": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "213": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "214": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "215": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "216": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "217": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "218": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "219": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "220": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "221": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "222": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "223": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "224": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "225": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "226": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "227": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "228": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "229": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "230": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "231": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "232": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "233": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "234": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "235": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "236": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "237": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "238": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "239": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "240": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "241": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "242": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "243": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "244": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "245": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "246": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "247": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "248": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "249": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "250": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "251": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "252": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "253": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "254": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "255": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "256": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "257": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "258": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "259": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "260": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "261": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "262": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "263": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "264": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "265": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "266": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "267": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "268": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "269": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "270": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "271": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "272": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "273": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "274": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "275": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "276": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "277": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "278": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "279": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "280": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "281": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "282": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "283": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "284": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "285": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "286": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "287": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "288": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "289": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "290": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "291": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "292": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "293": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "294": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "295": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "296": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "297": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "298": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "299": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "300": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "301": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "302": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "303": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "304": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "305": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "306": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "307": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "308": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "309": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "310": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "311": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "312": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "313": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "314": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "315": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "316": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "317": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "318": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "319": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "320": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "321": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "322": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "323": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "324": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "325": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "326": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "327": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "328": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "329": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "330": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "331": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "332": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "333": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "334": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "335": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "336": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "337": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "338": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "339": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "340": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "341": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "342": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "343": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "344": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "345": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "346": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "347": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "348": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "349": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "350": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "351": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "352": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "353": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "354": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "355": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "356": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "357": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "358": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "359": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "360": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "361": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "362": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "363": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "364": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "365": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "366": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "367": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "368": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "369": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "370": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "371": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "372": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "373": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "374": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "375": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "376": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "377": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "378": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "379": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "380": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "381": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "382": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "383": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "384": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "385": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "386": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "387": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "388": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "389": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "390": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "391": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "392": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "393": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "394": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "395": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "396": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "397": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "398": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "399": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "400": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "401": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "402": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "403": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "404": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "405": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "406": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "407": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "408": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "409": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "410": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "411": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "412": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "413": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "414": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "415": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "416": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "417": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "418": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "419": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "420": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "421": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "422": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "423": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "424": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "425": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "426": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "427": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "428": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "429": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "430": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "431": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "432": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "433": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "434": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "435": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "436": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "437": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "438": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "439": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "440": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "441": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "442": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "443": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "444": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "445": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "446": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "447": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "448": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "449": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "450": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "451": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "452": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "453": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "454": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "455": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "456": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "457": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "458": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "459": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "460": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "461": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "462": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "463": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "464": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "465": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "466": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "467": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "468": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "469": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "470": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "471": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "472": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "473": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "474": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "475": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "476": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "477": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "478": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "479": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "480": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "481": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "482": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "483": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "484": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "485": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "486": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "487": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "488": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "489": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "490": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "491": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "492": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "493": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "494": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "495": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "496": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "497": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "498": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "499": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "500": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "501": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "502": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "503": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "504": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "505": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "506": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "507": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "508": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "509": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "510": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "511": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "512": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "513": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "514": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "515": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "516": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "517": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "518": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "519": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "520": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "521": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "522": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "523": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "524": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "525": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "526": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "527": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "528": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "529": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "530": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "531": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "532": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "533": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "534": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "535": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "536": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "537": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "538": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "539": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "540": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "541": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "542": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "543": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "544": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "545": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "546": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "547": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "548": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "549": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "550": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "551": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "552": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "553": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "554": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "555": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "556": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "557": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "558": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "559": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "560": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "561": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "562": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "563": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "564": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "565": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "566": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "567": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "568": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "569": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "570": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "571": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "572": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "573": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "574": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "575": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "576": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "577": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "578": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "579": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "580": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "581": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "582": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "583": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "584": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "585": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "586": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "587": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "588": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "589": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "590": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "591": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "592": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "593": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "594": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "595": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "596": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "597": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "598": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "599": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "600": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "601": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "602": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "603": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "604": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "605": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "606": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "607": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "608": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "609": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "610": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "611": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "612": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "613": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "614": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "615": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "616": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "617": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "618": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "619": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "620": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "621": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "622": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "623": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "624": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "625": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "626": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "627": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "628": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "629": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "630": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "631": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "632": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "633": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "634": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "635": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "636": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "637": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "638": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "639": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "640": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "641": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "642": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "643": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "644": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "645": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "646": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "647": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "648": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "649": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "650": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "651": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "652": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "653": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "654": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "655": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "656": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "657": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "658": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "659": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "660": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "661": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "662": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "663": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "664": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "665": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "666": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "667": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "668": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "669": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "670": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "671": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "672": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "673": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "674": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "675": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "676": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "677": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "678": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "679": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "680": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "681": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "682": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "683": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "684": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "685": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "686": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "687": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "688": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "689": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "690": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "691": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "692": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "693": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "694": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "695": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "696": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "697": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "698": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "699": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "700": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "701": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "702": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "703": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "704": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "705": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "706": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "707": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "708": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "709": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "710": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "711": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "712": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "713": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "714": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "715": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "716": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "717": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "718": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "719": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "720": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "721": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "722": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "723": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "724": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "725": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "726": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "727": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "728": "TextRenderer::::layout(com.itextpdf.layout.layout.LayoutContext)",
      "730": "TextRenderer::::increaseYLineOffset(com.itextpdf.layout.properties.UnitValue[],com.itextpdf.layout.borders.Border[],com.itextpdf.layout.properties.UnitValue[])",
      "731": "TextRenderer::::increaseYLineOffset(com.itextpdf.layout.properties.UnitValue[],com.itextpdf.layout.borders.Border[],com.itextpdf.layout.properties.UnitValue[])",
      "732": "TextRenderer::::increaseYLineOffset(com.itextpdf.layout.properties.UnitValue[],com.itextpdf.layout.borders.Border[],com.itextpdf.layout.properties.UnitValue[])",
      "733": "TextRenderer::::increaseYLineOffset(com.itextpdf.layout.properties.UnitValue[],com.itextpdf.layout.borders.Border[],com.itextpdf.layout.properties.UnitValue[])",
      "734": "TextRenderer::::increaseYLineOffset(com.itextpdf.layout.properties.UnitValue[],com.itextpdf.layout.borders.Border[],com.itextpdf.layout.properties.UnitValue[])",
      "736": "TextRenderer::::applyOtf()",
      "737": "TextRenderer::::applyOtf()",
      "738": "TextRenderer::::applyOtf()",
      "739": "TextRenderer::::applyOtf()",
      "740": "TextRenderer::::applyOtf()",
      "741": "TextRenderer::::applyOtf()",
      "742": "TextRenderer::::applyOtf()",
      "743": "TextRenderer::::applyOtf()",
      "744": "TextRenderer::::applyOtf()",
      "745": "TextRenderer::::applyOtf()",
      "746": "TextRenderer::::applyOtf()",
      "747": "TextRenderer::::applyOtf()",
      "748": "TextRenderer::::applyOtf()",
      "749": "TextRenderer::::applyOtf()",
      "750": "TextRenderer::::applyOtf()",
      "751": "TextRenderer::::applyOtf()",
      "752": "TextRenderer::::applyOtf()",
      "753": "TextRenderer::::applyOtf()",
      "754": "TextRenderer::::applyOtf()",
      "755": "TextRenderer::::applyOtf()",
      "756": "TextRenderer::::applyOtf()",
      "757": "TextRenderer::::applyOtf()",
      "758": "TextRenderer::::applyOtf()",
      "759": "TextRenderer::::applyOtf()",
      "760": "TextRenderer::::applyOtf()",
      "761": "TextRenderer::::applyOtf()",
      "762": "TextRenderer::::applyOtf()",
      "763": "TextRenderer::::applyOtf()",
      "764": "TextRenderer::::applyOtf()",
      "765": "TextRenderer::::applyOtf()",
      "766": "TextRenderer::::applyOtf()",
      "767": "TextRenderer::::applyOtf()",
      "768": "TextRenderer::::applyOtf()",
      "769": "TextRenderer::::applyOtf()",
      "770": "TextRenderer::::applyOtf()",
      "771": "TextRenderer::::applyOtf()",
      "772": "TextRenderer::::applyOtf()",
      "773": "TextRenderer::::applyOtf()",
      "774": "TextRenderer::::applyOtf()",
      "775": "TextRenderer::::applyOtf()",
      "776": "TextRenderer::::applyOtf()",
      "777": "TextRenderer::::applyOtf()",
      "778": "TextRenderer::::applyOtf()",
      "779": "TextRenderer::::applyOtf()",
      "780": "TextRenderer::::applyOtf()",
      "781": "TextRenderer::::applyOtf()",
      "782": "TextRenderer::::applyOtf()",
      "783": "TextRenderer::::applyOtf()",
      "784": "TextRenderer::::applyOtf()",
      "785": "TextRenderer::::applyOtf()",
      "786": "TextRenderer::::applyOtf()",
      "787": "TextRenderer::::applyOtf()",
      "788": "TextRenderer::::applyOtf()",
      "789": "TextRenderer::::applyOtf()",
      "790": "TextRenderer::::applyOtf()",
      "791": "TextRenderer::::applyOtf()",
      "792": "TextRenderer::::applyOtf()",
      "793": "TextRenderer::::applyOtf()",
      "794": "TextRenderer::::applyOtf()",
      "795": "TextRenderer::::applyOtf()",
      "796": "TextRenderer::::applyOtf()",
      "797": "TextRenderer::::applyOtf()",
      "798": "TextRenderer::::applyOtf()",
      "799": "TextRenderer::::applyOtf()",
      "800": "TextRenderer::::applyOtf()",
      "801": "TextRenderer::::applyOtf()",
      "802": "TextRenderer::::applyOtf()",
      "803": "TextRenderer::::applyOtf()",
      "804": "TextRenderer::::applyOtf()",
      "805": "TextRenderer::::applyOtf()",
      "806": "TextRenderer::::applyOtf()",
      "807": "TextRenderer::::applyOtf()",
      "808": "TextRenderer::::applyOtf()",
      "809": "TextRenderer::::applyOtf()",
      "810": "TextRenderer::::applyOtf()",
      "811": "TextRenderer::::applyOtf()",
      "812": "TextRenderer::::applyOtf()",
      "813": "TextRenderer::::applyOtf()",
      "814": "TextRenderer::::applyOtf()",
      "815": "TextRenderer::::applyOtf()",
      "816": "TextRenderer::::applyOtf()",
      "817": "TextRenderer::::applyOtf()",
      "818": "TextRenderer::::applyOtf()",
      "820": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "821": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "822": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "823": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "824": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "825": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "826": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "827": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "828": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "829": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "830": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "831": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "832": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "833": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "834": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "835": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "836": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "837": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "838": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "839": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "840": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "841": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "842": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "843": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "844": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "845": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "846": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "847": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "848": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "849": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "850": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "851": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "852": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "853": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "854": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "855": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "856": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "857": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "858": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "859": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "860": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "861": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "862": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "863": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "864": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "865": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "866": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "867": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "868": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "869": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "870": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "871": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "872": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "873": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "874": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "875": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "876": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "877": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "878": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "879": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "880": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "881": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "882": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "883": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "884": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "885": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "886": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "887": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "888": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "889": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "890": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "891": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "892": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "893": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "894": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "895": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "896": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "897": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "898": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "899": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "900": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "901": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "902": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "903": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "904": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "905": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "906": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "907": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "908": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "909": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "910": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "911": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "912": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "913": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "914": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "915": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "916": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "917": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "918": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "919": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "920": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "921": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "922": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "923": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "924": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "925": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "926": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "927": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "928": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "929": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "930": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "931": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "932": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "933": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "934": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "935": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "936": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "937": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "938": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "939": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "940": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "941": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "942": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "943": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "944": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "945": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "946": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "947": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "948": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "949": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "950": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "951": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "952": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "953": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "954": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "955": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "956": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "957": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "958": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "959": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "960": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "961": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "962": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "963": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "964": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "965": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "966": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "967": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "968": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "969": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "970": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "971": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "972": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "973": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "974": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "975": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "976": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "977": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "978": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "979": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "980": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "981": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "982": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "983": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "984": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "985": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "986": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "987": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "988": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "989": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "990": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "991": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "992": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "993": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "994": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "995": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "996": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "997": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "998": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "999": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "1000": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "1001": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "1002": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "1003": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "1004": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "1005": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "1006": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "1007": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "1008": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "1009": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "1010": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "1011": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "1012": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "1013": "TextRenderer::::draw(com.itextpdf.layout.renderer.DrawContext)",
      "1019": "TextRenderer::::trimFirst()",
      "1020": "TextRenderer::::trimFirst()",
      "1021": "TextRenderer::::trimFirst()",
      "1022": "TextRenderer::::trimFirst()",
      "1023": "TextRenderer::::trimFirst()",
      "1024": "TextRenderer::::trimFirst()",
      "1025": "TextRenderer::::trimFirst()",
      "1026": "TextRenderer::::trimFirst()",
      "1027": "TextRenderer::::trimFirst()",
      "1028": "TextRenderer::::trimFirst()",
      "1029": "TextRenderer::::trimFirst()",
      "1030": "TextRenderer::::trimFirst()",
      "1031": "TextRenderer::::trimFirst()",
      "1032": "TextRenderer::::trimFirst()",
      "1033": "TextRenderer::::trimFirst()",
      "1034": "TextRenderer::::trimFirst()",
      "1035": "TextRenderer::::trimFirst()",
      "1036": "TextRenderer::::trimFirst()",
      "1037": "TextRenderer::::trimFirst()",
      "1038": "TextRenderer::::trimFirst()",
      "1039": "TextRenderer::::trimFirst()",
      "1040": "TextRenderer::::trimFirst()",
      "1041": "TextRenderer::::trimFirst()",
      "1042": "TextRenderer::::trimFirst()",
      "1043": "TextRenderer::::trimFirst()",
      "1044": "TextRenderer::::trimFirst()",
      "1045": "TextRenderer::::trimFirst()",
      "1046": "TextRenderer::::trimFirst()",
      "1048": "TextRenderer::::trimLast()",
      "1049": "TextRenderer::::trimLast()",
      "1050": "TextRenderer::::trimLast()",
      "1051": "TextRenderer::::trimLast()",
      "1052": "TextRenderer::::trimLast()",
      "1053": "TextRenderer::::trimLast()",
      "1054": "TextRenderer::::trimLast()",
      "1055": "TextRenderer::::trimLast()",
      "1056": "TextRenderer::::trimLast()",
      "1057": "TextRenderer::::trimLast()",
      "1058": "TextRenderer::::trimLast()",
      "1059": "TextRenderer::::trimLast()",
      "1060": "TextRenderer::::trimLast()",
      "1061": "TextRenderer::::trimLast()",
      "1062": "TextRenderer::::trimLast()",
      "1063": "TextRenderer::::trimLast()",
      "1064": "TextRenderer::::trimLast()",
      "1065": "TextRenderer::::trimLast()",
      "1066": "TextRenderer::::trimLast()",
      "1067": "TextRenderer::::trimLast()",
      "1068": "TextRenderer::::trimLast()",
      "1069": "TextRenderer::::trimLast()",
      "1070": "TextRenderer::::trimLast()",
      "1071": "TextRenderer::::trimLast()",
      "1072": "TextRenderer::::trimLast()",
      "1073": "TextRenderer::::trimLast()",
      "1074": "TextRenderer::::trimLast()",
      "1075": "TextRenderer::::trimLast()",
      "1076": "TextRenderer::::trimLast()",
      "1077": "TextRenderer::::trimLast()",
      "1078": "TextRenderer::::trimLast()",
      "1079": "TextRenderer::::trimLast()",
      "1080": "TextRenderer::::trimLast()",
      "1081": "TextRenderer::::trimLast()",
      "1082": "TextRenderer::::trimLast()",
      "1083": "TextRenderer::::trimLast()",
      "1084": "TextRenderer::::trimLast()",
      "1085": "TextRenderer::::trimLast()",
      "1092": "TextRenderer::::getAscent()",
      "1093": "TextRenderer::::getAscent()",
      "1094": "TextRenderer::::getAscent()",
      "1095": "TextRenderer::::getAscent()",
      "1102": "TextRenderer::::getDescent()",
      "1103": "TextRenderer::::getDescent()",
      "1104": "TextRenderer::::getDescent()",
      "1105": "TextRenderer::::getDescent()",
      "1113": "TextRenderer::::getYLine()",
      "1114": "TextRenderer::::getYLine()",
      "1115": "TextRenderer::::getYLine()",
      "1122": "TextRenderer::::moveYLineTo(float)",
      "1123": "TextRenderer::::moveYLineTo(float)",
      "1124": "TextRenderer::::moveYLineTo(float)",
      "1125": "TextRenderer::::moveYLineTo(float)",
      "1126": "TextRenderer::::moveYLineTo(float)",
      "1134": "TextRenderer::::setText(java.lang.String)",
      "1135": "TextRenderer::::setText(java.lang.String)",
      "1136": "TextRenderer::::setText(java.lang.String)",
      "1137": "TextRenderer::::setText(java.lang.String)",
      "1138": "TextRenderer::::setText(java.lang.String)",
      "1152": "TextRenderer::::getText()",
      "1153": "TextRenderer::::getText()",
      "1154": "TextRenderer::::getText()",
      "1155": "TextRenderer::::getText()",
      "1162": "TextRenderer::::length()",
      "1163": "TextRenderer::::length()",
      "1164": "TextRenderer::::length()",
      "1166": "TextRenderer::::toString()",
      "1167": "TextRenderer::::toString()",
      "1168": "TextRenderer::::toString()",
      "1169": "TextRenderer::::toString()",
      "1177": "TextRenderer::::charAt(int)",
      "1178": "TextRenderer::::charAt(int)",
      "1179": "TextRenderer::::charAt(int)",
      "1181": "TextRenderer::::getTabAnchorCharacterPosition()",
      "1182": "TextRenderer::::getTabAnchorCharacterPosition()",
      "1183": "TextRenderer::::getTabAnchorCharacterPosition()",
      "1198": "TextRenderer::::getNextRenderer()",
      "1199": "TextRenderer::::getNextRenderer()",
      "1200": "TextRenderer::::getNextRenderer()",
      "1201": "TextRenderer::::getNextRenderer()",
      "1202": "TextRenderer::::getNextRenderer()",
      "1243": "TextRenderer::::getReversedRanges()",
      "1244": "TextRenderer::::getReversedRanges()",
      "1245": "TextRenderer::::getReversedRanges()",
      "1247": "TextRenderer::::initReversedRanges()",
      "1248": "TextRenderer::::initReversedRanges()",
      "1249": "TextRenderer::::initReversedRanges()",
      "1250": "TextRenderer::::initReversedRanges()",
      "1251": "TextRenderer::::initReversedRanges()",
      "1252": "TextRenderer::::initReversedRanges()",
      "1254": "TextRenderer::::removeReversedRanges()",
      "1255": "TextRenderer::::removeReversedRanges()",
      "1256": "TextRenderer::::removeReversedRanges()",
      "1257": "TextRenderer::::removeReversedRanges()",
      "1259": "TextRenderer::::splitIgnoreFirstNewLine(int)",
      "1260": "TextRenderer::::splitIgnoreFirstNewLine(int)",
      "1261": "TextRenderer::::splitIgnoreFirstNewLine(int)",
      "1262": "TextRenderer::::splitIgnoreFirstNewLine(int)",
      "1263": "TextRenderer::::splitIgnoreFirstNewLine(int)",
      "1264": "TextRenderer::::splitIgnoreFirstNewLine(int)",
      "1265": "TextRenderer::::splitIgnoreFirstNewLine(int)",
      "1267": "TextRenderer::::convertToGlyphLine(java.lang.String)",
      "1268": "TextRenderer::::convertToGlyphLine(java.lang.String)",
      "1269": "TextRenderer::::convertToGlyphLine(java.lang.String)",
      "1271": "TextRenderer::::hasOtfFont()",
      "1272": "TextRenderer::::hasOtfFont()",
      "1273": "TextRenderer::::hasOtfFont()",
      "1292": "TextRenderer::::textContainsSpecialScriptGlyphs(boolean)",
      "1293": "TextRenderer::::textContainsSpecialScriptGlyphs(boolean)",
      "1294": "TextRenderer::::textContainsSpecialScriptGlyphs(boolean)",
      "1295": "TextRenderer::::textContainsSpecialScriptGlyphs(boolean)",
      "1296": "TextRenderer::::textContainsSpecialScriptGlyphs(boolean)",
      "1297": "TextRenderer::::textContainsSpecialScriptGlyphs(boolean)",
      "1298": "TextRenderer::::textContainsSpecialScriptGlyphs(boolean)",
      "1299": "TextRenderer::::textContainsSpecialScriptGlyphs(boolean)",
      "1300": "TextRenderer::::textContainsSpecialScriptGlyphs(boolean)",
      "1301": "TextRenderer::::textContainsSpecialScriptGlyphs(boolean)",
      "1302": "TextRenderer::::textContainsSpecialScriptGlyphs(boolean)",
      "1303": "TextRenderer::::textContainsSpecialScriptGlyphs(boolean)",
      "1304": "TextRenderer::::textContainsSpecialScriptGlyphs(boolean)",
      "1305": "TextRenderer::::textContainsSpecialScriptGlyphs(boolean)",
      "1306": "TextRenderer::::textContainsSpecialScriptGlyphs(boolean)",
      "1307": "TextRenderer::::textContainsSpecialScriptGlyphs(boolean)",
      "1308": "TextRenderer::::textContainsSpecialScriptGlyphs(boolean)",
      "1309": "TextRenderer::::textContainsSpecialScriptGlyphs(boolean)",
      "1310": "TextRenderer::::textContainsSpecialScriptGlyphs(boolean)",
      "1311": "TextRenderer::::textContainsSpecialScriptGlyphs(boolean)",
      "1312": "TextRenderer::::textContainsSpecialScriptGlyphs(boolean)",
      "1313": "TextRenderer::::textContainsSpecialScriptGlyphs(boolean)",
      "1314": "TextRenderer::::textContainsSpecialScriptGlyphs(boolean)",
      "1315": "TextRenderer::::textContainsSpecialScriptGlyphs(boolean)",
      "1316": "TextRenderer::::textContainsSpecialScriptGlyphs(boolean)",
      "1317": "TextRenderer::::textContainsSpecialScriptGlyphs(boolean)",
      "1318": "TextRenderer::::textContainsSpecialScriptGlyphs(boolean)",
      "1319": "TextRenderer::::textContainsSpecialScriptGlyphs(boolean)",
      "1320": "TextRenderer::::textContainsSpecialScriptGlyphs(boolean)",
      "1321": "TextRenderer::::textContainsSpecialScriptGlyphs(boolean)",
      "1322": "TextRenderer::::textContainsSpecialScriptGlyphs(boolean)",
      "1323": "TextRenderer::::textContainsSpecialScriptGlyphs(boolean)",
      "1324": "TextRenderer::::textContainsSpecialScriptGlyphs(boolean)",
      "1325": "TextRenderer::::textContainsSpecialScriptGlyphs(boolean)",
      "1326": "TextRenderer::::textContainsSpecialScriptGlyphs(boolean)",
      "1327": "TextRenderer::::textContainsSpecialScriptGlyphs(boolean)",
      "1328": "TextRenderer::::textContainsSpecialScriptGlyphs(boolean)",
      "1329": "TextRenderer::::textContainsSpecialScriptGlyphs(boolean)",
      "1330": "TextRenderer::::textContainsSpecialScriptGlyphs(boolean)",
      "1332": "TextRenderer::::setSpecialScriptsWordBreakPoints(java.util.List<java.lang.Integer>)",
      "1333": "TextRenderer::::setSpecialScriptsWordBreakPoints(java.util.List<java.lang.Integer>)",
      "1334": "TextRenderer::::setSpecialScriptsWordBreakPoints(java.util.List<java.lang.Integer>)",
      "1336": "TextRenderer::::getSpecialScriptsWordBreakPoints()",
      "1337": "TextRenderer::::getSpecialScriptsWordBreakPoints()",
      "1338": "TextRenderer::::getSpecialScriptsWordBreakPoints()",
      "1340": "TextRenderer::::setSpecialScriptFirstNotFittingIndex(int)",
      "1341": "TextRenderer::::setSpecialScriptFirstNotFittingIndex(int)",
      "1342": "TextRenderer::::setSpecialScriptFirstNotFittingIndex(int)",
      "1344": "TextRenderer::::getSpecialScriptFirstNotFittingIndex()",
      "1345": "TextRenderer::::getSpecialScriptFirstNotFittingIndex()",
      "1346": "TextRenderer::::getSpecialScriptFirstNotFittingIndex()",
      "1348": "TextRenderer::::setIndexOfFirstCharacterToBeForcedToOverflow(int)",
      "1349": "TextRenderer::::setIndexOfFirstCharacterToBeForcedToOverflow(int)",
      "1350": "TextRenderer::::setIndexOfFirstCharacterToBeForcedToOverflow(int)",
      "1358": "TextRenderer::::getFirstYLineRecursively()",
      "1359": "TextRenderer::::getFirstYLineRecursively()",
      "1360": "TextRenderer::::getFirstYLineRecursively()",
      "1361": "TextRenderer::::getFirstYLineRecursively()",
      "1363": "TextRenderer::::getLastYLineRecursively()",
      "1364": "TextRenderer::::getLastYLineRecursively()",
      "1365": "TextRenderer::::getLastYLineRecursively()",
      "1366": "TextRenderer::::getLastYLineRecursively()",
      "1373": "TextRenderer::::lineLength()",
      "1374": "TextRenderer::::lineLength()",
      "1375": "TextRenderer::::lineLength()",
      "1377": "TextRenderer::::baseCharactersCount()",
      "1378": "TextRenderer::::baseCharactersCount()",
      "1379": "TextRenderer::::baseCharactersCount()",
      "1380": "TextRenderer::::baseCharactersCount()",
      "1381": "TextRenderer::::baseCharactersCount()",
      "1382": "TextRenderer::::baseCharactersCount()",
      "1383": "TextRenderer::::baseCharactersCount()",
      "1384": "TextRenderer::::baseCharactersCount()",
      "1385": "TextRenderer::::baseCharactersCount()",
      "1386": "TextRenderer::::baseCharactersCount()",
      "1388": "TextRenderer::::getMinMaxWidth()",
      "1389": "TextRenderer::::getMinMaxWidth()",
      "1390": "TextRenderer::::getMinMaxWidth()",
      "1391": "TextRenderer::::getMinMaxWidth()",
      "1392": "TextRenderer::::getMinMaxWidth()",
      "1394": "TextRenderer::::getNumberOfSpaces()",
      "1395": "TextRenderer::::getNumberOfSpaces()",
      "1396": "TextRenderer::::getNumberOfSpaces()",
      "1397": "TextRenderer::::getNumberOfSpaces()",
      "1398": "TextRenderer::::getNumberOfSpaces()",
      "1399": "TextRenderer::::getNumberOfSpaces()",
      "1400": "TextRenderer::::getNumberOfSpaces()",
      "1401": "TextRenderer::::getNumberOfSpaces()",
      "1402": "TextRenderer::::getNumberOfSpaces()",
      "1403": "TextRenderer::::getNumberOfSpaces()",
      "1404": "TextRenderer::::getNumberOfSpaces()",
      "1405": "TextRenderer::::getNumberOfSpaces()",
      "1407": "TextRenderer::::createSplitRenderer()",
      "1408": "TextRenderer::::createSplitRenderer()",
      "1409": "TextRenderer::::createSplitRenderer()",
      "1411": "TextRenderer::::createOverflowRenderer()",
      "1412": "TextRenderer::::createOverflowRenderer()",
      "1413": "TextRenderer::::createOverflowRenderer()",
      "1415": "TextRenderer::::split(int)",
      "1416": "TextRenderer::::split(int)",
      "1417": "TextRenderer::::split(int)",
      "1418": "TextRenderer::::split(int)",
      "1419": "TextRenderer::::split(int)",
      "1420": "TextRenderer::::split(int)",
      "1421": "TextRenderer::::split(int)",
      "1422": "TextRenderer::::split(int)",
      "1423": "TextRenderer::::split(int)",
      "1424": "TextRenderer::::split(int)",
      "1425": "TextRenderer::::split(int)",
      "1426": "TextRenderer::::split(int)",
      "1427": "TextRenderer::::split(int)",
      "1428": "TextRenderer::::split(int)",
      "1429": "TextRenderer::::split(int)",
      "1430": "TextRenderer::::split(int)",
      "1431": "TextRenderer::::split(int)",
      "1432": "TextRenderer::::split(int)",
      "1433": "TextRenderer::::split(int)",
      "1434": "TextRenderer::::split(int)",
      "1435": "TextRenderer::::split(int)",
      "1436": "TextRenderer::::split(int)",
      "1437": "TextRenderer::::split(int)",
      "1438": "TextRenderer::::split(int)",
      "1439": "TextRenderer::::split(int)",
      "1440": "TextRenderer::::split(int)",
      "1441": "TextRenderer::::split(int)",
      "1442": "TextRenderer::::split(int)",
      "1443": "TextRenderer::::split(int)",
      "1444": "TextRenderer::::split(int)",
      "1445": "TextRenderer::::split(int)",
      "1446": "TextRenderer::::split(int)",
      "1447": "TextRenderer::::split(int)",
      "1448": "TextRenderer::::split(int)",
      "1449": "TextRenderer::::split(int)",
      "1450": "TextRenderer::::split(int)",
      "1451": "TextRenderer::::split(int)",
      "1452": "TextRenderer::::split(int)",
      "1453": "TextRenderer::::split(int)",
      "1454": "TextRenderer::::split(int)",
      "1455": "TextRenderer::::split(int)",
      "1456": "TextRenderer::::split(int)",
      "1457": "TextRenderer::::split(int)",
      "1458": "TextRenderer::::split(int)",
      "1459": "TextRenderer::::split(int)",
      "1460": "TextRenderer::::split(int)",
      "1461": "TextRenderer::::split(int)",
      "1462": "TextRenderer::::split(int)",
      "1463": "TextRenderer::::split(int)",
      "1464": "TextRenderer::::split(int)",
      "1465": "TextRenderer::::split(int)",
      "1466": "TextRenderer::::split(int)",
      "1467": "TextRenderer::::split(int)",
      "1468": "TextRenderer::::split(int)",
      "1469": "TextRenderer::::split(int)",
      "1470": "TextRenderer::::split(int)",
      "1471": "TextRenderer::::split(int)",
      "1472": "TextRenderer::::split(int)",
      "1473": "TextRenderer::::split(int)",
      "1474": "TextRenderer::::split(int)",
      "1475": "TextRenderer::::split(int)",
      "1501": "TextRenderer::::calculateLineWidth()",
      "1502": "TextRenderer::::calculateLineWidth()",
      "1503": "TextRenderer::::calculateLineWidth()",
      "1504": "TextRenderer::::calculateLineWidth()",
      "1505": "TextRenderer::::calculateLineWidth()",
      "1506": "TextRenderer::::calculateLineWidth()",
      "1507": "TextRenderer::::calculateLineWidth()",
      "1508": "TextRenderer::::calculateLineWidth()",
      "1509": "TextRenderer::::calculateLineWidth()",
      "1510": "TextRenderer::::calculateLineWidth()",
      "1518": "TextRenderer::::resolveFonts(java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "1519": "TextRenderer::::resolveFonts(java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "1520": "TextRenderer::::resolveFonts(java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "1521": "TextRenderer::::resolveFonts(java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "1522": "TextRenderer::::resolveFonts(java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "1523": "TextRenderer::::resolveFonts(java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "1524": "TextRenderer::::resolveFonts(java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "1525": "TextRenderer::::resolveFonts(java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "1526": "TextRenderer::::resolveFonts(java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "1527": "TextRenderer::::resolveFonts(java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "1528": "TextRenderer::::resolveFonts(java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "1529": "TextRenderer::::resolveFonts(java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "1530": "TextRenderer::::resolveFonts(java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "1531": "TextRenderer::::resolveFonts(java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "1532": "TextRenderer::::resolveFonts(java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "1533": "TextRenderer::::resolveFonts(java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "1534": "TextRenderer::::resolveFonts(java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "1535": "TextRenderer::::resolveFonts(java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "1536": "TextRenderer::::resolveFonts(java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "1537": "TextRenderer::::resolveFonts(java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "1538": "TextRenderer::::resolveFonts(java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "1539": "TextRenderer::::resolveFonts(java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "1540": "TextRenderer::::resolveFonts(java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "1541": "TextRenderer::::resolveFonts(java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "1542": "TextRenderer::::resolveFonts(java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "1543": "TextRenderer::::resolveFonts(java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "1544": "TextRenderer::::resolveFonts(java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "1545": "TextRenderer::::resolveFonts(java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "1546": "TextRenderer::::resolveFonts(java.util.List<com.itextpdf.layout.renderer.IRenderer>)",
      "1580": "TextRenderer::::updateRangeBasedOnRemovedCharacters(java.util.ArrayList<java.lang.Integer>,int[])",
      "1581": "TextRenderer::::updateRangeBasedOnRemovedCharacters(java.util.ArrayList<java.lang.Integer>,int[])",
      "1582": "TextRenderer::::updateRangeBasedOnRemovedCharacters(java.util.ArrayList<java.lang.Integer>,int[])",
      "1583": "TextRenderer::::updateRangeBasedOnRemovedCharacters(java.util.ArrayList<java.lang.Integer>,int[])",
      "1584": "TextRenderer::::updateRangeBasedOnRemovedCharacters(java.util.ArrayList<java.lang.Integer>,int[])",
      "1585": "TextRenderer::::updateRangeBasedOnRemovedCharacters(java.util.ArrayList<java.lang.Integer>,int[])",
      "1592": "TextRenderer::::findPossibleBreaksSplitPosition(java.util.List<java.lang.Integer>,int,boolean)",
      "1593": "TextRenderer::::findPossibleBreaksSplitPosition(java.util.List<java.lang.Integer>,int,boolean)",
      "1594": "TextRenderer::::findPossibleBreaksSplitPosition(java.util.List<java.lang.Integer>,int,boolean)",
      "1595": "TextRenderer::::findPossibleBreaksSplitPosition(java.util.List<java.lang.Integer>,int,boolean)",
      "1596": "TextRenderer::::findPossibleBreaksSplitPosition(java.util.List<java.lang.Integer>,int,boolean)",
      "1597": "TextRenderer::::findPossibleBreaksSplitPosition(java.util.List<java.lang.Integer>,int,boolean)",
      "1598": "TextRenderer::::findPossibleBreaksSplitPosition(java.util.List<java.lang.Integer>,int,boolean)",
      "1599": "TextRenderer::::findPossibleBreaksSplitPosition(java.util.List<java.lang.Integer>,int,boolean)",
      "1600": "TextRenderer::::findPossibleBreaksSplitPosition(java.util.List<java.lang.Integer>,int,boolean)",
      "1601": "TextRenderer::::findPossibleBreaksSplitPosition(java.util.List<java.lang.Integer>,int,boolean)",
      "1602": "TextRenderer::::findPossibleBreaksSplitPosition(java.util.List<java.lang.Integer>,int,boolean)",
      "1603": "TextRenderer::::findPossibleBreaksSplitPosition(java.util.List<java.lang.Integer>,int,boolean)",
      "1604": "TextRenderer::::findPossibleBreaksSplitPosition(java.util.List<java.lang.Integer>,int,boolean)",
      "1605": "TextRenderer::::findPossibleBreaksSplitPosition(java.util.List<java.lang.Integer>,int,boolean)",
      "1606": "TextRenderer::::findPossibleBreaksSplitPosition(java.util.List<java.lang.Integer>,int,boolean)",
      "1607": "TextRenderer::::findPossibleBreaksSplitPosition(java.util.List<java.lang.Integer>,int,boolean)",
      "1608": "TextRenderer::::findPossibleBreaksSplitPosition(java.util.List<java.lang.Integer>,int,boolean)",
      "1609": "TextRenderer::::findPossibleBreaksSplitPosition(java.util.List<java.lang.Integer>,int,boolean)",
      "1610": "TextRenderer::::findPossibleBreaksSplitPosition(java.util.List<java.lang.Integer>,int,boolean)",
      "1611": "TextRenderer::::findPossibleBreaksSplitPosition(java.util.List<java.lang.Integer>,int,boolean)",
      "1613": "TextRenderer::::codePointIsOfSpecialScript(int)",
      "1614": "TextRenderer::::codePointIsOfSpecialScript(int)",
      "1615": "TextRenderer::::codePointIsOfSpecialScript(int)",
      "1616": "TextRenderer::::codePointIsOfSpecialScript(int)",
      "1617": "TextRenderer::::codePointIsOfSpecialScript(int)",
      "1618": "TextRenderer::::codePointIsOfSpecialScript(int)",
      "1619": "TextRenderer::::codePointIsOfSpecialScript(int)",
      "1621": "TextRenderer::::resolveFirstPdfFont(java.lang.String[],com.itextpdf.layout.font.FontProvider,com.itextpdf.layout.font.FontCharacteristics,com.itextpdf.layout.font.FontSet)",
      "1622": "TextRenderer::::resolveFirstPdfFont(java.lang.String[],com.itextpdf.layout.font.FontProvider,com.itextpdf.layout.font.FontCharacteristics,com.itextpdf.layout.font.FontSet)",
      "1623": "TextRenderer::::resolveFirstPdfFont(java.lang.String[],com.itextpdf.layout.font.FontProvider,com.itextpdf.layout.font.FontCharacteristics,com.itextpdf.layout.font.FontSet)",
      "1624": "TextRenderer::::resolveFirstPdfFont(java.lang.String[],com.itextpdf.layout.font.FontProvider,com.itextpdf.layout.font.FontCharacteristics,com.itextpdf.layout.font.FontSet)",
      "1625": "TextRenderer::::resolveFirstPdfFont(java.lang.String[],com.itextpdf.layout.font.FontProvider,com.itextpdf.layout.font.FontCharacteristics,com.itextpdf.layout.font.FontSet)",
      "1626": "TextRenderer::::resolveFirstPdfFont(java.lang.String[],com.itextpdf.layout.font.FontProvider,com.itextpdf.layout.font.FontCharacteristics,com.itextpdf.layout.font.FontSet)",
      "1627": "TextRenderer::::resolveFirstPdfFont(java.lang.String[],com.itextpdf.layout.font.FontProvider,com.itextpdf.layout.font.FontCharacteristics,com.itextpdf.layout.font.FontSet)",
      "1628": "TextRenderer::::resolveFirstPdfFont(java.lang.String[],com.itextpdf.layout.font.FontProvider,com.itextpdf.layout.font.FontCharacteristics,com.itextpdf.layout.font.FontSet)",
      "1629": "TextRenderer::::resolveFirstPdfFont(java.lang.String[],com.itextpdf.layout.font.FontProvider,com.itextpdf.layout.font.FontCharacteristics,com.itextpdf.layout.font.FontSet)",
      "1630": "TextRenderer::::resolveFirstPdfFont(java.lang.String[],com.itextpdf.layout.font.FontProvider,com.itextpdf.layout.font.FontCharacteristics,com.itextpdf.layout.font.FontSet)",
      "1645": "TextRenderer::::isStartsWithSplitCharWhiteSpaceAndEndsWithSplitChar(com.itextpdf.layout.splitting.ISplitCharacters)",
      "1646": "TextRenderer::::isStartsWithSplitCharWhiteSpaceAndEndsWithSplitChar(com.itextpdf.layout.splitting.ISplitCharacters)",
      "1647": "TextRenderer::::isStartsWithSplitCharWhiteSpaceAndEndsWithSplitChar(com.itextpdf.layout.splitting.ISplitCharacters)",
      "1648": "TextRenderer::::isStartsWithSplitCharWhiteSpaceAndEndsWithSplitChar(com.itextpdf.layout.splitting.ISplitCharacters)",
      "1649": "TextRenderer::::isStartsWithSplitCharWhiteSpaceAndEndsWithSplitChar(com.itextpdf.layout.splitting.ISplitCharacters)",
      "1650": "TextRenderer::::isStartsWithSplitCharWhiteSpaceAndEndsWithSplitChar(com.itextpdf.layout.splitting.ISplitCharacters)",
      "1651": "TextRenderer::::isStartsWithSplitCharWhiteSpaceAndEndsWithSplitChar(com.itextpdf.layout.splitting.ISplitCharacters)",
      "1652": "TextRenderer::::isStartsWithSplitCharWhiteSpaceAndEndsWithSplitChar(com.itextpdf.layout.splitting.ISplitCharacters)",
      "1653": "TextRenderer::::isStartsWithSplitCharWhiteSpaceAndEndsWithSplitChar(com.itextpdf.layout.splitting.ISplitCharacters)",
      "1654": "TextRenderer::::isStartsWithSplitCharWhiteSpaceAndEndsWithSplitChar(com.itextpdf.layout.splitting.ISplitCharacters)",
      "1655": "TextRenderer::::isStartsWithSplitCharWhiteSpaceAndEndsWithSplitChar(com.itextpdf.layout.splitting.ISplitCharacters)",
      "1656": "TextRenderer::::isStartsWithSplitCharWhiteSpaceAndEndsWithSplitChar(com.itextpdf.layout.splitting.ISplitCharacters)",
      "1657": "TextRenderer::::isStartsWithSplitCharWhiteSpaceAndEndsWithSplitChar(com.itextpdf.layout.splitting.ISplitCharacters)",
      "1658": "TextRenderer::::isStartsWithSplitCharWhiteSpaceAndEndsWithSplitChar(com.itextpdf.layout.splitting.ISplitCharacters)",
      "1659": "TextRenderer::::isStartsWithSplitCharWhiteSpaceAndEndsWithSplitChar(com.itextpdf.layout.splitting.ISplitCharacters)",
      "1687": "TextRenderer::::scaleXAdvance(float,float,java.lang.Float)",
      "1688": "TextRenderer::::scaleXAdvance(float,float,java.lang.Float)",
      "1689": "TextRenderer::::scaleXAdvance(float,float,java.lang.Float)",
      "1731": "TextRenderer::::updateFontAndText()",
      "1732": "TextRenderer::::updateFontAndText()",
      "1733": "TextRenderer::::updateFontAndText()",
      "1734": "TextRenderer::::updateFontAndText()",
      "1735": "TextRenderer::::updateFontAndText()",
      "1736": "TextRenderer::::updateFontAndText()",
      "1737": "TextRenderer::::updateFontAndText()",
      "1738": "TextRenderer::::updateFontAndText()",
      "1739": "TextRenderer::::updateFontAndText()",
      "1740": "TextRenderer::::updateFontAndText()",
      "1741": "TextRenderer::::updateFontAndText()",
      "1742": "TextRenderer::::updateFontAndText()",
      "1743": "TextRenderer::::updateFontAndText()",
      "1744": "TextRenderer::::updateFontAndText()",
      "1745": "TextRenderer::::updateFontAndText()",
      "1746": "TextRenderer::::updateFontAndText()",
      "1747": "TextRenderer::::updateFontAndText()",
      "1761": "TextRenderer::::numberOfElementsLessThan(java.util.ArrayList<java.lang.Integer>,int)",
      "1762": "TextRenderer::::numberOfElementsLessThan(java.util.ArrayList<java.lang.Integer>,int)",
      "1763": "TextRenderer::::numberOfElementsLessThan(java.util.ArrayList<java.lang.Integer>,int)",
      "1764": "TextRenderer::::numberOfElementsLessThan(java.util.ArrayList<java.lang.Integer>,int)",
      "1765": "TextRenderer::::numberOfElementsLessThan(java.util.ArrayList<java.lang.Integer>,int)",
      "1766": "TextRenderer::::numberOfElementsLessThan(java.util.ArrayList<java.lang.Integer>,int)",
      "1767": "TextRenderer::::numberOfElementsLessThan(java.util.ArrayList<java.lang.Integer>,int)",
      "1768": "TextRenderer::::numberOfElementsLessThan(java.util.ArrayList<java.lang.Integer>,int)",
      "1770": "TextRenderer::::numberOfElementsLessThanOrEqual(java.util.ArrayList<java.lang.Integer>,int)",
      "1771": "TextRenderer::::numberOfElementsLessThanOrEqual(java.util.ArrayList<java.lang.Integer>,int)",
      "1772": "TextRenderer::::numberOfElementsLessThanOrEqual(java.util.ArrayList<java.lang.Integer>,int)",
      "1773": "TextRenderer::::numberOfElementsLessThanOrEqual(java.util.ArrayList<java.lang.Integer>,int)",
      "1774": "TextRenderer::::numberOfElementsLessThanOrEqual(java.util.ArrayList<java.lang.Integer>,int)",
      "1775": "TextRenderer::::numberOfElementsLessThanOrEqual(java.util.ArrayList<java.lang.Integer>,int)",
      "1776": "TextRenderer::::numberOfElementsLessThanOrEqual(java.util.ArrayList<java.lang.Integer>,int)",
      "1777": "TextRenderer::::numberOfElementsLessThanOrEqual(java.util.ArrayList<java.lang.Integer>,int)",
      "1832": "TextRenderer.ReversedCharsIterator::::setUseReversed(boolean)",
      "1833": "TextRenderer.ReversedCharsIterator::::setUseReversed(boolean)",
      "1834": "TextRenderer.ReversedCharsIterator::::setUseReversed(boolean)",
      "1835": "TextRenderer.ReversedCharsIterator::::setUseReversed(boolean)",
      "1837": "TextRenderer.ReversedCharsIterator::::hasNext()",
      "1838": "TextRenderer.ReversedCharsIterator::::hasNext()",
      "1839": "TextRenderer.ReversedCharsIterator::::hasNext()",
      "1840": "TextRenderer.ReversedCharsIterator::::hasNext()",
      "1842": "TextRenderer.ReversedCharsIterator::::next()",
      "1843": "TextRenderer.ReversedCharsIterator::::next()",
      "1844": "TextRenderer.ReversedCharsIterator::::next()",
      "1845": "TextRenderer.ReversedCharsIterator::::next()",
      "1846": "TextRenderer.ReversedCharsIterator::::next()",
      "1847": "TextRenderer.ReversedCharsIterator::::next()",
      "1848": "TextRenderer.ReversedCharsIterator::::next()",
      "1850": "TextRenderer.ReversedCharsIterator::::remove()",
      "1851": "TextRenderer.ReversedCharsIterator::::remove()",
      "1852": "TextRenderer.ReversedCharsIterator::::remove()",
      "1853": "TextRenderer.ReversedCharsIterator::::remove()"
    },
    "test_reverse_method_lines_dic": {
      "69": "TextRendererTest::::nextRendererTest()",
      "70": "TextRendererTest::::nextRendererTest()",
      "71": "TextRendererTest::::nextRendererTest()",
      "72": "TextRendererTest::::nextRendererTest()",
      "73": "TextRendererTest::::nextRendererTest()",
      "74": "TextRendererTest::::nextRendererTest()",
      "75": "TextRendererTest::::nextRendererTest()",
      "76": "TextRendererTest::::nextRendererTest()",
      "77": "TextRendererTest::::nextRendererTest()",
      "78": "TextRendererTest::::nextRendererTest()",
      "79": "TextRendererTest::::nextRendererTest()",
      "80": "TextRendererTest::::nextRendererTest()",
      "81": "TextRendererTest::::nextRendererTest()",
      "82": "TextRendererTest::::nextRendererTest()",
      "83": "TextRendererTest::::nextRendererTest()",
      "84": "TextRendererTest::::nextRendererTest()",
      "85": "TextRendererTest::::nextRendererTest()",
      "86": "TextRendererTest::::nextRendererTest()",
      "87": "TextRendererTest::::nextRendererTest()",
      "88": "TextRendererTest::::nextRendererTest()",
      "89": "TextRendererTest::::nextRendererTest()",
      "90": "TextRendererTest::::nextRendererTest()",
      "91": "TextRendererTest::::nextRendererTest()",
      "93": "TextRendererTest::::setTextException()",
      "94": "TextRendererTest::::setTextException()",
      "95": "TextRendererTest::::setTextException()",
      "96": "TextRendererTest::::setTextException()",
      "97": "TextRendererTest::::setTextException()",
      "98": "TextRendererTest::::setTextException()",
      "99": "TextRendererTest::::setTextException()",
      "100": "TextRendererTest::::setTextException()",
      "101": "TextRendererTest::::setTextException()",
      "102": "TextRendererTest::::setTextException()",
      "103": "TextRendererTest::::setTextException()",
      "104": "TextRendererTest::::setTextException()",
      "105": "TextRendererTest::::setTextException()",
      "106": "TextRendererTest::::setTextException()",
      "107": "TextRendererTest::::setTextException()",
      "109": "TextRendererTest::::setTextGlyphLineAndFontParamTest()",
      "110": "TextRendererTest::::setTextGlyphLineAndFontParamTest()",
      "111": "TextRendererTest::::setTextGlyphLineAndFontParamTest()",
      "112": "TextRendererTest::::setTextGlyphLineAndFontParamTest()",
      "113": "TextRendererTest::::setTextGlyphLineAndFontParamTest()",
      "114": "TextRendererTest::::setTextGlyphLineAndFontParamTest()",
      "115": "TextRendererTest::::setTextGlyphLineAndFontParamTest()",
      "116": "TextRendererTest::::setTextGlyphLineAndFontParamTest()",
      "117": "TextRendererTest::::setTextGlyphLineAndFontParamTest()",
      "118": "TextRendererTest::::setTextGlyphLineAndFontParamTest()",
      "119": "TextRendererTest::::setTextGlyphLineAndFontParamTest()",
      "120": "TextRendererTest::::setTextGlyphLineAndFontParamTest()",
      "121": "TextRendererTest::::setTextGlyphLineAndFontParamTest()",
      "122": "TextRendererTest::::setTextGlyphLineAndFontParamTest()",
      "123": "TextRendererTest::::setTextGlyphLineAndFontParamTest()",
      "124": "TextRendererTest::::setTextGlyphLineAndFontParamTest()",
      "125": "TextRendererTest::::setTextGlyphLineAndFontParamTest()",
      "126": "TextRendererTest::::setTextGlyphLineAndFontParamTest()",
      "127": "TextRendererTest::::setTextGlyphLineAndFontParamTest()",
      "128": "TextRendererTest::::setTextGlyphLineAndFontParamTest()",
      "129": "TextRendererTest::::setTextGlyphLineAndFontParamTest()",
      "130": "TextRendererTest::::setTextGlyphLineAndFontParamTest()",
      "131": "TextRendererTest::::setTextGlyphLineAndFontParamTest()",
      "132": "TextRendererTest::::setTextGlyphLineAndFontParamTest()",
      "134": "TextRendererTest::::setTextGlyphLineAndPositionsParamTest()",
      "135": "TextRendererTest::::setTextGlyphLineAndPositionsParamTest()",
      "136": "TextRendererTest::::setTextGlyphLineAndPositionsParamTest()",
      "137": "TextRendererTest::::setTextGlyphLineAndPositionsParamTest()",
      "138": "TextRendererTest::::setTextGlyphLineAndPositionsParamTest()",
      "139": "TextRendererTest::::setTextGlyphLineAndPositionsParamTest()",
      "140": "TextRendererTest::::setTextGlyphLineAndPositionsParamTest()",
      "141": "TextRendererTest::::setTextGlyphLineAndPositionsParamTest()",
      "142": "TextRendererTest::::setTextGlyphLineAndPositionsParamTest()",
      "143": "TextRendererTest::::setTextGlyphLineAndPositionsParamTest()",
      "144": "TextRendererTest::::setTextGlyphLineAndPositionsParamTest()",
      "145": "TextRendererTest::::setTextGlyphLineAndPositionsParamTest()",
      "146": "TextRendererTest::::setTextGlyphLineAndPositionsParamTest()",
      "147": "TextRendererTest::::setTextGlyphLineAndPositionsParamTest()",
      "148": "TextRendererTest::::setTextGlyphLineAndPositionsParamTest()",
      "149": "TextRendererTest::::setTextGlyphLineAndPositionsParamTest()",
      "150": "TextRendererTest::::setTextGlyphLineAndPositionsParamTest()",
      "151": "TextRendererTest::::setTextGlyphLineAndPositionsParamTest()",
      "152": "TextRendererTest::::setTextGlyphLineAndPositionsParamTest()",
      "153": "TextRendererTest::::setTextGlyphLineAndPositionsParamTest()",
      "154": "TextRendererTest::::setTextGlyphLineAndPositionsParamTest()",
      "155": "TextRendererTest::::setTextGlyphLineAndPositionsParamTest()",
      "156": "TextRendererTest::::setTextGlyphLineAndPositionsParamTest()",
      "157": "TextRendererTest::::setTextGlyphLineAndPositionsParamTest()",
      "158": "TextRendererTest::::setTextGlyphLineAndPositionsParamTest()",
      "159": "TextRendererTest::::setTextGlyphLineAndPositionsParamTest()",
      "160": "TextRendererTest::::setTextGlyphLineAndPositionsParamTest()",
      "161": "TextRendererTest::::setTextGlyphLineAndPositionsParamTest()",
      "162": "TextRendererTest::::setTextGlyphLineAndPositionsParamTest()",
      "168": "TextRendererTest::::setFontAsText()",
      "169": "TextRendererTest::::setFontAsText()",
      "170": "TextRendererTest::::setFontAsText()",
      "171": "TextRendererTest::::setFontAsText()",
      "172": "TextRendererTest::::setFontAsText()",
      "173": "TextRendererTest::::setFontAsText()",
      "174": "TextRendererTest::::setFontAsText()",
      "175": "TextRendererTest::::setFontAsText()",
      "176": "TextRendererTest::::setFontAsText()",
      "177": "TextRendererTest::::setFontAsText()",
      "178": "TextRendererTest::::setFontAsText()",
      "179": "TextRendererTest::::setFontAsText()",
      "180": "TextRendererTest::::setFontAsText()",
      "181": "TextRendererTest::::setFontAsText()",
      "182": "TextRendererTest::::setFontAsText()",
      "183": "TextRendererTest::::setFontAsText()",
      "184": "TextRendererTest::::setFontAsText()",
      "185": "TextRendererTest::::setFontAsText()",
      "187": "TextRendererTest::::getDescentTest()",
      "188": "TextRendererTest::::getDescentTest()",
      "189": "TextRendererTest::::getDescentTest()",
      "190": "TextRendererTest::::getDescentTest()",
      "191": "TextRendererTest::::getDescentTest()",
      "192": "TextRendererTest::::getDescentTest()",
      "193": "TextRendererTest::::getDescentTest()",
      "194": "TextRendererTest::::getDescentTest()",
      "196": "TextRendererTest::::getOccupiedAreaBBoxTest()",
      "197": "TextRendererTest::::getOccupiedAreaBBoxTest()",
      "198": "TextRendererTest::::getOccupiedAreaBBoxTest()",
      "199": "TextRendererTest::::getOccupiedAreaBBoxTest()",
      "200": "TextRendererTest::::getOccupiedAreaBBoxTest()",
      "201": "TextRendererTest::::getOccupiedAreaBBoxTest()",
      "202": "TextRendererTest::::getOccupiedAreaBBoxTest()",
      "203": "TextRendererTest::::getOccupiedAreaBBoxTest()",
      "204": "TextRendererTest::::getOccupiedAreaBBoxTest()",
      "205": "TextRendererTest::::getOccupiedAreaBBoxTest()",
      "206": "TextRendererTest::::getOccupiedAreaBBoxTest()",
      "208": "TextRendererTest::::getInnerAreaBBoxTest()",
      "209": "TextRendererTest::::getInnerAreaBBoxTest()",
      "210": "TextRendererTest::::getInnerAreaBBoxTest()",
      "211": "TextRendererTest::::getInnerAreaBBoxTest()",
      "212": "TextRendererTest::::getInnerAreaBBoxTest()",
      "213": "TextRendererTest::::getInnerAreaBBoxTest()",
      "214": "TextRendererTest::::getInnerAreaBBoxTest()",
      "215": "TextRendererTest::::getInnerAreaBBoxTest()",
      "216": "TextRendererTest::::getInnerAreaBBoxTest()",
      "217": "TextRendererTest::::getInnerAreaBBoxTest()",
      "218": "TextRendererTest::::getInnerAreaBBoxTest()",
      "220": "TextRendererTest::::resolveFirstPdfFontWithGlyphsAvailableOnlyInSecondaryFont()",
      "221": "TextRendererTest::::resolveFirstPdfFontWithGlyphsAvailableOnlyInSecondaryFont()",
      "222": "TextRendererTest::::resolveFirstPdfFontWithGlyphsAvailableOnlyInSecondaryFont()",
      "223": "TextRendererTest::::resolveFirstPdfFontWithGlyphsAvailableOnlyInSecondaryFont()",
      "224": "TextRendererTest::::resolveFirstPdfFontWithGlyphsAvailableOnlyInSecondaryFont()",
      "225": "TextRendererTest::::resolveFirstPdfFontWithGlyphsAvailableOnlyInSecondaryFont()",
      "226": "TextRendererTest::::resolveFirstPdfFontWithGlyphsAvailableOnlyInSecondaryFont()",
      "227": "TextRendererTest::::resolveFirstPdfFontWithGlyphsAvailableOnlyInSecondaryFont()",
      "228": "TextRendererTest::::resolveFirstPdfFontWithGlyphsAvailableOnlyInSecondaryFont()",
      "229": "TextRendererTest::::resolveFirstPdfFontWithGlyphsAvailableOnlyInSecondaryFont()",
      "230": "TextRendererTest::::resolveFirstPdfFontWithGlyphsAvailableOnlyInSecondaryFont()",
      "231": "TextRendererTest::::resolveFirstPdfFontWithGlyphsAvailableOnlyInSecondaryFont()",
      "232": "TextRendererTest::::resolveFirstPdfFontWithGlyphsAvailableOnlyInSecondaryFont()",
      "233": "TextRendererTest::::resolveFirstPdfFontWithGlyphsAvailableOnlyInSecondaryFont()",
      "234": "TextRendererTest::::resolveFirstPdfFontWithGlyphsAvailableOnlyInSecondaryFont()",
      "235": "TextRendererTest::::resolveFirstPdfFontWithGlyphsAvailableOnlyInSecondaryFont()",
      "236": "TextRendererTest::::resolveFirstPdfFontWithGlyphsAvailableOnlyInSecondaryFont()",
      "237": "TextRendererTest::::resolveFirstPdfFontWithGlyphsAvailableOnlyInSecondaryFont()",
      "238": "TextRendererTest::::resolveFirstPdfFontWithGlyphsAvailableOnlyInSecondaryFont()",
      "239": "TextRendererTest::::resolveFirstPdfFontWithGlyphsAvailableOnlyInSecondaryFont()",
      "241": "TextRendererTest::::myanmarCharacterBelongsToSpecificScripts()",
      "242": "TextRendererTest::::myanmarCharacterBelongsToSpecificScripts()",
      "243": "TextRendererTest::::myanmarCharacterBelongsToSpecificScripts()",
      "244": "TextRendererTest::::myanmarCharacterBelongsToSpecificScripts()",
      "245": "TextRendererTest::::myanmarCharacterBelongsToSpecificScripts()",
      "247": "TextRendererTest::::thaiCharacterBelongsToSpecificScripts()",
      "248": "TextRendererTest::::thaiCharacterBelongsToSpecificScripts()",
      "249": "TextRendererTest::::thaiCharacterBelongsToSpecificScripts()",
      "250": "TextRendererTest::::thaiCharacterBelongsToSpecificScripts()",
      "251": "TextRendererTest::::thaiCharacterBelongsToSpecificScripts()",
      "253": "TextRendererTest::::laoCharacterBelongsToSpecificScripts()",
      "254": "TextRendererTest::::laoCharacterBelongsToSpecificScripts()",
      "255": "TextRendererTest::::laoCharacterBelongsToSpecificScripts()",
      "256": "TextRendererTest::::laoCharacterBelongsToSpecificScripts()",
      "257": "TextRendererTest::::laoCharacterBelongsToSpecificScripts()",
      "259": "TextRendererTest::::khmerCharacterBelongsToSpecificScripts()",
      "260": "TextRendererTest::::khmerCharacterBelongsToSpecificScripts()",
      "261": "TextRendererTest::::khmerCharacterBelongsToSpecificScripts()",
      "262": "TextRendererTest::::khmerCharacterBelongsToSpecificScripts()",
      "263": "TextRendererTest::::khmerCharacterBelongsToSpecificScripts()",
      "265": "TextRendererTest::::cyrillicCharacterDoesntBelongToSpecificScripts()",
      "266": "TextRendererTest::::cyrillicCharacterDoesntBelongToSpecificScripts()",
      "267": "TextRendererTest::::cyrillicCharacterDoesntBelongToSpecificScripts()",
      "268": "TextRendererTest::::cyrillicCharacterDoesntBelongToSpecificScripts()",
      "269": "TextRendererTest::::cyrillicCharacterDoesntBelongToSpecificScripts()",
      "271": "TextRendererTest::::overflowWrapAnywhereProperty()",
      "272": "TextRendererTest::::overflowWrapAnywhereProperty()",
      "273": "TextRendererTest::::overflowWrapAnywhereProperty()",
      "274": "TextRendererTest::::overflowWrapAnywhereProperty()",
      "275": "TextRendererTest::::overflowWrapAnywhereProperty()",
      "276": "TextRendererTest::::overflowWrapAnywhereProperty()",
      "277": "TextRendererTest::::overflowWrapAnywhereProperty()",
      "278": "TextRendererTest::::overflowWrapAnywhereProperty()",
      "279": "TextRendererTest::::overflowWrapAnywhereProperty()",
      "280": "TextRendererTest::::overflowWrapAnywhereProperty()",
      "281": "TextRendererTest::::overflowWrapAnywhereProperty()",
      "282": "TextRendererTest::::overflowWrapAnywhereProperty()",
      "284": "TextRendererTest::::overflowWrapBreakWordProperty()",
      "285": "TextRendererTest::::overflowWrapBreakWordProperty()",
      "286": "TextRendererTest::::overflowWrapBreakWordProperty()",
      "287": "TextRendererTest::::overflowWrapBreakWordProperty()",
      "288": "TextRendererTest::::overflowWrapBreakWordProperty()",
      "289": "TextRendererTest::::overflowWrapBreakWordProperty()",
      "290": "TextRendererTest::::overflowWrapBreakWordProperty()",
      "291": "TextRendererTest::::overflowWrapBreakWordProperty()",
      "292": "TextRendererTest::::overflowWrapBreakWordProperty()",
      "293": "TextRendererTest::::overflowWrapBreakWordProperty()",
      "294": "TextRendererTest::::overflowWrapBreakWordProperty()",
      "295": "TextRendererTest::::overflowWrapBreakWordProperty()",
      "296": "TextRendererTest::::overflowWrapBreakWordProperty()",
      "297": "TextRendererTest::::overflowWrapBreakWordProperty()",
      "298": "TextRendererTest::::overflowWrapBreakWordProperty()",
      "299": "TextRendererTest::::overflowWrapBreakWordProperty()",
      "300": "TextRendererTest::::overflowWrapBreakWordProperty()",
      "301": "TextRendererTest::::overflowWrapBreakWordProperty()",
      "302": "TextRendererTest::::overflowWrapBreakWordProperty()",
      "303": "TextRendererTest::::overflowWrapBreakWordProperty()",
      "304": "TextRendererTest::::overflowWrapBreakWordProperty()",
      "305": "TextRendererTest::::overflowWrapBreakWordProperty()",
      "307": "TextRendererTest::::overflowWrapAnywhereBoldSimulationMaxWidth()",
      "308": "TextRendererTest::::overflowWrapAnywhereBoldSimulationMaxWidth()",
      "309": "TextRendererTest::::overflowWrapAnywhereBoldSimulationMaxWidth()",
      "310": "TextRendererTest::::overflowWrapAnywhereBoldSimulationMaxWidth()",
      "311": "TextRendererTest::::overflowWrapAnywhereBoldSimulationMaxWidth()",
      "312": "TextRendererTest::::overflowWrapAnywhereBoldSimulationMaxWidth()",
      "313": "TextRendererTest::::overflowWrapAnywhereBoldSimulationMaxWidth()",
      "314": "TextRendererTest::::overflowWrapAnywhereBoldSimulationMaxWidth()",
      "315": "TextRendererTest::::overflowWrapAnywhereBoldSimulationMaxWidth()",
      "316": "TextRendererTest::::overflowWrapAnywhereBoldSimulationMaxWidth()",
      "317": "TextRendererTest::::overflowWrapAnywhereBoldSimulationMaxWidth()",
      "318": "TextRendererTest::::overflowWrapAnywhereBoldSimulationMaxWidth()",
      "319": "TextRendererTest::::overflowWrapAnywhereBoldSimulationMaxWidth()",
      "320": "TextRendererTest::::overflowWrapAnywhereBoldSimulationMaxWidth()",
      "321": "TextRendererTest::::overflowWrapAnywhereBoldSimulationMaxWidth()",
      "323": "TextRendererTest::::overflowWrapAnywhereItalicSimulationMaxWidth()",
      "324": "TextRendererTest::::overflowWrapAnywhereItalicSimulationMaxWidth()",
      "325": "TextRendererTest::::overflowWrapAnywhereItalicSimulationMaxWidth()",
      "326": "TextRendererTest::::overflowWrapAnywhereItalicSimulationMaxWidth()",
      "327": "TextRendererTest::::overflowWrapAnywhereItalicSimulationMaxWidth()",
      "328": "TextRendererTest::::overflowWrapAnywhereItalicSimulationMaxWidth()",
      "329": "TextRendererTest::::overflowWrapAnywhereItalicSimulationMaxWidth()",
      "330": "TextRendererTest::::overflowWrapAnywhereItalicSimulationMaxWidth()",
      "331": "TextRendererTest::::overflowWrapAnywhereItalicSimulationMaxWidth()",
      "332": "TextRendererTest::::overflowWrapAnywhereItalicSimulationMaxWidth()",
      "333": "TextRendererTest::::overflowWrapAnywhereItalicSimulationMaxWidth()",
      "334": "TextRendererTest::::overflowWrapAnywhereItalicSimulationMaxWidth()",
      "335": "TextRendererTest::::overflowWrapAnywhereItalicSimulationMaxWidth()",
      "336": "TextRendererTest::::overflowWrapAnywhereItalicSimulationMaxWidth()",
      "337": "TextRendererTest::::overflowWrapAnywhereItalicSimulationMaxWidth()",
      "339": "TextRendererTest::::overflowWrapAnywhereBoldSimulationMinWidth()",
      "340": "TextRendererTest::::overflowWrapAnywhereBoldSimulationMinWidth()",
      "341": "TextRendererTest::::overflowWrapAnywhereBoldSimulationMinWidth()",
      "342": "TextRendererTest::::overflowWrapAnywhereBoldSimulationMinWidth()",
      "343": "TextRendererTest::::overflowWrapAnywhereBoldSimulationMinWidth()",
      "344": "TextRendererTest::::overflowWrapAnywhereBoldSimulationMinWidth()",
      "345": "TextRendererTest::::overflowWrapAnywhereBoldSimulationMinWidth()",
      "346": "TextRendererTest::::overflowWrapAnywhereBoldSimulationMinWidth()",
      "347": "TextRendererTest::::overflowWrapAnywhereBoldSimulationMinWidth()",
      "348": "TextRendererTest::::overflowWrapAnywhereBoldSimulationMinWidth()",
      "349": "TextRendererTest::::overflowWrapAnywhereBoldSimulationMinWidth()",
      "350": "TextRendererTest::::overflowWrapAnywhereBoldSimulationMinWidth()",
      "351": "TextRendererTest::::overflowWrapAnywhereBoldSimulationMinWidth()",
      "352": "TextRendererTest::::overflowWrapAnywhereBoldSimulationMinWidth()",
      "353": "TextRendererTest::::overflowWrapAnywhereBoldSimulationMinWidth()",
      "355": "TextRendererTest::::overflowWrapAnywhereItalicSimulationMinWidth()",
      "356": "TextRendererTest::::overflowWrapAnywhereItalicSimulationMinWidth()",
      "357": "TextRendererTest::::overflowWrapAnywhereItalicSimulationMinWidth()",
      "358": "TextRendererTest::::overflowWrapAnywhereItalicSimulationMinWidth()",
      "359": "TextRendererTest::::overflowWrapAnywhereItalicSimulationMinWidth()",
      "360": "TextRendererTest::::overflowWrapAnywhereItalicSimulationMinWidth()",
      "361": "TextRendererTest::::overflowWrapAnywhereItalicSimulationMinWidth()",
      "362": "TextRendererTest::::overflowWrapAnywhereItalicSimulationMinWidth()",
      "363": "TextRendererTest::::overflowWrapAnywhereItalicSimulationMinWidth()",
      "364": "TextRendererTest::::overflowWrapAnywhereItalicSimulationMinWidth()",
      "365": "TextRendererTest::::overflowWrapAnywhereItalicSimulationMinWidth()",
      "366": "TextRendererTest::::overflowWrapAnywhereItalicSimulationMinWidth()",
      "367": "TextRendererTest::::overflowWrapAnywhereItalicSimulationMinWidth()",
      "368": "TextRendererTest::::overflowWrapAnywhereItalicSimulationMinWidth()",
      "369": "TextRendererTest::::overflowWrapAnywhereItalicSimulationMinWidth()",
      "371": "TextRendererTest::::floatingRightMinMaxWidth()",
      "372": "TextRendererTest::::floatingRightMinMaxWidth()",
      "373": "TextRendererTest::::floatingRightMinMaxWidth()",
      "374": "TextRendererTest::::floatingRightMinMaxWidth()",
      "375": "TextRendererTest::::floatingRightMinMaxWidth()",
      "376": "TextRendererTest::::floatingRightMinMaxWidth()",
      "377": "TextRendererTest::::floatingRightMinMaxWidth()",
      "378": "TextRendererTest::::floatingRightMinMaxWidth()",
      "379": "TextRendererTest::::floatingRightMinMaxWidth()",
      "380": "TextRendererTest::::floatingRightMinMaxWidth()",
      "381": "TextRendererTest::::floatingRightMinMaxWidth()",
      "382": "TextRendererTest::::floatingRightMinMaxWidth()",
      "383": "TextRendererTest::::floatingRightMinMaxWidth()",
      "384": "TextRendererTest::::floatingRightMinMaxWidth()",
      "385": "TextRendererTest::::floatingRightMinMaxWidth()",
      "386": "TextRendererTest::::floatingRightMinMaxWidth()",
      "387": "TextRendererTest::::floatingRightMinMaxWidth()",
      "388": "TextRendererTest::::floatingRightMinMaxWidth()",
      "389": "TextRendererTest::::floatingRightMinMaxWidth()",
      "390": "TextRendererTest::::floatingRightMinMaxWidth()",
      "391": "TextRendererTest::::floatingRightMinMaxWidth()"
    },
    "tests": [
      {
        "test_lines": [
          69,
          91
        ],
        "covered_lines": [
          105,
          107,
          119,
          120,
          128,
          129,
          139,
          140,
          141,
          158,
          160,
          161,
          163,
          165,
          167,
          168,
          170,
          174,
          175,
          177,
          181,
          182,
          183,
          184,
          185,
          187,
          188,
          190,
          192,
          195,
          198,
          199,
          200,
          201,
          202,
          203,
          204,
          205,
          207,
          209,
          211,
          213,
          214,
          215,
          220,
          221,
          222,
          223,
          224,
          225,
          226,
          228,
          229,
          231,
          232,
          234,
          235,
          236,
          237,
          238,
          239,
          241,
          242,
          243,
          244,
          245,
          252,
          253,
          255,
          257,
          259,
          261,
          264,
          266,
          268,
          270,
          272,
          274,
          277,
          278,
          282,
          283,
          292,
          293,
          294,
          295,
          296,
          297,
          298,
          299,
          300,
          301,
          302,
          304,
          305,
          331,
          332,
          351,
          356,
          357,
          358,
          359,
          364,
          366,
          367,
          385,
          398,
          399,
          401,
          403,
          404,
          405,
          406,
          408,
          410,
          419,
          431,
          432,
          434,
          436,
          437,
          438,
          441,
          445,
          449,
          450,
          454,
          456,
          457,
          459,
          460,
          461,
          462,
          463,
          464,
          465,
          469,
          471,
          472,
          476,
          477,
          479,
          634,
          636,
          637,
          653,
          655,
          656,
          658,
          659,
          661,
          663,
          664,
          665,
          667,
          669,
          670,
          672,
          696,
          706,
          707,
          708,
          709,
          711,
          712,
          713,
          718,
          719,
          724,
          725,
          726,
          727,
          731,
          732,
          733,
          734,
          1200,
          1201,
          1224,
          1227,
          1228,
          1231,
          1234,
          1235,
          1240,
          1293,
          1297,
          1298,
          1549,
          1550,
          1551,
          1552,
          1553,
          1554,
          1555,
          1646,
          1647,
          1648,
          1649,
          1650,
          1651,
          1652,
          1674,
          1677,
          1678,
          1681,
          1684,
          1732,
          1735,
          1742,
          1743,
          1744,
          1745,
          1747,
          1780,
          1783,
          1784
        ]
      },
      {
        "test_lines": [
          93,
          107
        ],
        "covered_lines": [
          105,
          107,
          119,
          120,
          139,
          140,
          141,
          1135,
          1137,
          1138,
          1153,
          1154,
          1549,
          1550,
          1551,
          1552,
          1553,
          1554,
          1555,
          1623,
          1625,
          1626,
          1627,
          1732,
          1736,
          1737,
          1738,
          1739,
          1740,
          1743,
          1744,
          1745,
          1747
        ]
      },
      {
        "test_lines": [
          109,
          132
        ],
        "covered_lines": [
          105,
          107,
          119,
          120,
          128,
          129,
          139,
          140,
          141,
          1147,
          1148,
          1149,
          1150,
          1153,
          1154,
          1549,
          1550,
          1551,
          1552,
          1553,
          1554,
          1555,
          1732,
          1747
        ]
      },
      {
        "test_lines": [
          134,
          162
        ],
        "covered_lines": [
          105,
          107,
          119,
          120,
          128,
          129,
          139,
          140,
          141,
          1147,
          1148,
          1149,
          1150,
          1153,
          1154,
          1549,
          1550,
          1551,
          1552,
          1553,
          1554,
          1555,
          1732,
          1747
        ]
      },
      {
        "test_lines": [
          168,
          185
        ],
        "covered_lines": [
          105,
          107,
          119,
          120,
          139,
          140,
          141,
          158,
          160,
          161,
          163,
          165,
          167,
          168,
          170,
          174,
          175,
          177,
          181,
          182,
          183,
          184,
          185,
          187,
          188,
          190,
          192,
          195,
          198,
          199,
          200,
          201,
          202,
          203,
          204,
          205,
          207,
          209,
          211,
          213,
          214,
          215,
          220,
          221,
          222,
          223,
          224,
          225,
          226,
          228,
          229,
          231,
          232,
          234,
          235,
          236,
          237,
          238,
          239,
          241,
          242,
          243,
          244,
          245,
          252,
          253,
          255,
          257,
          259,
          261,
          264,
          266,
          268,
          270,
          272,
          274,
          277,
          278,
          282,
          283,
          292,
          293,
          294,
          295,
          296,
          297,
          298,
          299,
          300,
          301,
          302,
          304,
          305,
          331,
          332,
          351,
          356,
          357,
          358,
          359,
          364,
          366,
          367,
          385,
          398,
          399,
          401,
          403,
          404,
          405,
          406,
          408,
          410,
          419,
          431,
          432,
          434,
          436,
          437,
          438,
          441,
          445,
          449,
          450,
          454,
          456,
          457,
          459,
          460,
          461,
          462,
          463,
          464,
          465,
          469,
          471,
          472,
          476,
          477,
          479,
          634,
          636,
          637,
          653,
          655,
          656,
          658,
          659,
          661,
          663,
          664,
          665,
          667,
          669,
          670,
          672,
          696,
          706,
          707,
          708,
          709,
          711,
          712,
          713,
          718,
          719,
          724,
          725,
          726,
          727,
          731,
          732,
          733,
          734,
          822,
          830,
          831,
          832,
          833,
          834,
          849,
          851,
          852,
          856,
          858,
          859,
          860,
          865,
          866,
          867,
          868,
          869,
          870,
          871,
          872,
          873,
          874,
          876,
          881,
          882,
          889,
          890,
          892,
          894,
          897,
          900,
          903,
          918,
          922,
          925,
          928,
          948,
          952,
          954,
          956,
          975,
          978,
          980,
          984,
          985,
          987,
          991,
          992,
          998,
          1003,
          1007,
          1013,
          1114,
          1224,
          1227,
          1228,
          1231,
          1234,
          1235,
          1240,
          1244,
          1293,
          1297,
          1298,
          1549,
          1550,
          1551,
          1552,
          1553,
          1554,
          1555,
          1623,
          1625,
          1626,
          1627,
          1646,
          1647,
          1648,
          1649,
          1650,
          1651,
          1652,
          1674,
          1677,
          1678,
          1681,
          1684,
          1732,
          1736,
          1737,
          1738,
          1739,
          1740,
          1743,
          1744,
          1745,
          1747,
          1780,
          1783,
          1784,
          1867,
          1870
        ]
      },
      {
        "test_lines": [
          187,
          194
        ],
        "covered_lines": [
          105,
          107,
          119,
          120,
          128,
          129,
          139,
          140,
          141,
          158,
          160,
          161,
          163,
          165,
          167,
          168,
          170,
          174,
          175,
          177,
          181,
          182,
          183,
          184,
          185,
          187,
          188,
          190,
          192,
          195,
          198,
          199,
          200,
          201,
          202,
          203,
          204,
          205,
          207,
          209,
          211,
          213,
          214,
          215,
          220,
          221,
          222,
          223,
          224,
          225,
          226,
          228,
          229,
          231,
          232,
          234,
          235,
          236,
          237,
          238,
          239,
          241,
          242,
          243,
          244,
          245,
          252,
          253,
          255,
          257,
          259,
          261,
          264,
          266,
          268,
          270,
          272,
          274,
          277,
          278,
          282,
          283,
          292,
          293,
          294,
          295,
          296,
          297,
          298,
          299,
          300,
          301,
          302,
          304,
          305,
          331,
          332,
          351,
          356,
          357,
          358,
          359,
          364,
          366,
          367,
          385,
          398,
          399,
          401,
          403,
          404,
          405,
          406,
          408,
          410,
          419,
          431,
          432,
          434,
          436,
          437,
          438,
          441,
          445,
          449,
          450,
          454,
          456,
          457,
          459,
          460,
          461,
          462,
          463,
          464,
          465,
          469,
          471,
          472,
          476,
          477,
          479,
          634,
          636,
          637,
          653,
          655,
          656,
          658,
          659,
          661,
          663,
          664,
          665,
          667,
          669,
          670,
          672,
          696,
          706,
          707,
          708,
          709,
          711,
          712,
          713,
          718,
          719,
          724,
          725,
          726,
          727,
          731,
          732,
          733,
          734,
          1104,
          1224,
          1227,
          1228,
          1231,
          1234,
          1235,
          1240,
          1293,
          1297,
          1298,
          1549,
          1550,
          1551,
          1552,
          1553,
          1554,
          1555,
          1646,
          1647,
          1648,
          1649,
          1650,
          1651,
          1652,
          1674,
          1677,
          1678,
          1681,
          1684,
          1732,
          1735,
          1742,
          1743,
          1744,
          1745,
          1747,
          1780,
          1783,
          1784
        ]
      },
      {
        "test_lines": [
          196,
          206
        ],
        "covered_lines": [
          105,
          107,
          119,
          120,
          128,
          129,
          139,
          140,
          141,
          158,
          160,
          161,
          163,
          165,
          167,
          168,
          170,
          174,
          175,
          177,
          181,
          182,
          183,
          184,
          185,
          187,
          188,
          190,
          192,
          195,
          198,
          199,
          200,
          201,
          202,
          203,
          204,
          205,
          207,
          209,
          211,
          213,
          214,
          215,
          220,
          221,
          222,
          223,
          224,
          225,
          226,
          228,
          229,
          231,
          232,
          234,
          235,
          236,
          237,
          238,
          239,
          241,
          242,
          243,
          244,
          245,
          252,
          253,
          255,
          257,
          259,
          261,
          264,
          266,
          268,
          270,
          272,
          274,
          277,
          278,
          282,
          283,
          292,
          293,
          294,
          295,
          296,
          297,
          298,
          299,
          300,
          301,
          302,
          304,
          305,
          331,
          332,
          351,
          356,
          357,
          358,
          359,
          364,
          366,
          367,
          385,
          398,
          399,
          401,
          403,
          404,
          405,
          406,
          408,
          410,
          419,
          431,
          432,
          434,
          436,
          437,
          438,
          441,
          445,
          449,
          450,
          454,
          456,
          457,
          459,
          460,
          461,
          462,
          463,
          464,
          465,
          469,
          471,
          472,
          476,
          477,
          479,
          634,
          636,
          637,
          653,
          655,
          656,
          658,
          659,
          661,
          663,
          664,
          665,
          667,
          669,
          670,
          672,
          696,
          706,
          707,
          708,
          709,
          711,
          712,
          713,
          718,
          719,
          724,
          725,
          726,
          727,
          731,
          732,
          733,
          734,
          1224,
          1227,
          1228,
          1231,
          1234,
          1235,
          1240,
          1293,
          1297,
          1298,
          1549,
          1550,
          1551,
          1552,
          1553,
          1554,
          1555,
          1646,
          1647,
          1648,
          1649,
          1650,
          1651,
          1652,
          1674,
          1677,
          1678,
          1681,
          1684,
          1732,
          1735,
          1742,
          1743,
          1744,
          1745,
          1747,
          1780,
          1783,
          1784
        ]
      },
      {
        "test_lines": [
          208,
          218
        ],
        "covered_lines": [
          105,
          107,
          119,
          120,
          128,
          129,
          139,
          140,
          141,
          158,
          160,
          161,
          163,
          165,
          167,
          168,
          170,
          174,
          175,
          177,
          181,
          182,
          183,
          184,
          185,
          187,
          188,
          190,
          192,
          195,
          198,
          199,
          200,
          201,
          202,
          203,
          204,
          205,
          207,
          209,
          211,
          213,
          214,
          215,
          220,
          221,
          222,
          223,
          224,
          225,
          226,
          228,
          229,
          231,
          232,
          234,
          235,
          236,
          237,
          238,
          239,
          241,
          242,
          243,
          244,
          245,
          252,
          253,
          255,
          257,
          259,
          261,
          264,
          266,
          268,
          270,
          272,
          274,
          277,
          278,
          282,
          283,
          292,
          293,
          294,
          295,
          296,
          297,
          298,
          299,
          300,
          301,
          302,
          304,
          305,
          331,
          332,
          351,
          356,
          357,
          358,
          359,
          364,
          366,
          367,
          385,
          398,
          399,
          401,
          403,
          404,
          405,
          406,
          408,
          410,
          419,
          431,
          432,
          434,
          436,
          437,
          438,
          441,
          445,
          449,
          450,
          454,
          456,
          457,
          459,
          460,
          461,
          462,
          463,
          464,
          465,
          469,
          471,
          472,
          476,
          477,
          479,
          634,
          636,
          637,
          653,
          655,
          656,
          658,
          659,
          661,
          663,
          664,
          665,
          667,
          669,
          670,
          672,
          696,
          706,
          707,
          708,
          709,
          711,
          712,
          713,
          718,
          719,
          724,
          725,
          726,
          727,
          731,
          732,
          733,
          734,
          1224,
          1227,
          1228,
          1231,
          1234,
          1235,
          1240,
          1293,
          1297,
          1298,
          1549,
          1550,
          1551,
          1552,
          1553,
          1554,
          1555,
          1646,
          1647,
          1648,
          1649,
          1650,
          1651,
          1652,
          1674,
          1677,
          1678,
          1681,
          1684,
          1732,
          1735,
          1742,
          1743,
          1744,
          1745,
          1747,
          1780,
          1783,
          1784
        ]
      },
      {
        "test_lines": [
          220,
          239
        ],
        "covered_lines": [
          105,
          107,
          119,
          120,
          128,
          129,
          139,
          140,
          141,
          1623,
          1625,
          1626,
          1627
        ]
      },
      {
        "test_lines": [
          241,
          245
        ],
        "covered_lines": [
          1614,
          1615
        ]
      },
      {
        "test_lines": [
          247,
          251
        ],
        "covered_lines": [
          1614,
          1615
        ]
      },
      {
        "test_lines": [
          253,
          257
        ],
        "covered_lines": [
          1614,
          1615
        ]
      },
      {
        "test_lines": [
          259,
          263
        ],
        "covered_lines": [
          1614,
          1615
        ]
      },
      {
        "test_lines": [
          265,
          269
        ],
        "covered_lines": [
          1614,
          1615
        ]
      },
      {
        "test_lines": [
          271,
          282
        ],
        "covered_lines": [
          105,
          107,
          119,
          120,
          139,
          140,
          141,
          158,
          160,
          161,
          163,
          165,
          167,
          168,
          170,
          171,
          174,
          175,
          177,
          181,
          182,
          183,
          184,
          185,
          187,
          188,
          190,
          192,
          195,
          198,
          199,
          200,
          201,
          202,
          203,
          204,
          205,
          207,
          209,
          211,
          213,
          214,
          215,
          220,
          221,
          222,
          223,
          224,
          225,
          226,
          228,
          229,
          231,
          232,
          234,
          235,
          236,
          237,
          238,
          239,
          241,
          242,
          243,
          244,
          245,
          252,
          253,
          255,
          257,
          259,
          261,
          264,
          266,
          268,
          270,
          272,
          274,
          277,
          278,
          282,
          283,
          292,
          293,
          294,
          295,
          296,
          297,
          298,
          299,
          300,
          301,
          302,
          304,
          305,
          331,
          332,
          351,
          356,
          357,
          358,
          359,
          364,
          366,
          367,
          385,
          398,
          399,
          401,
          403,
          404,
          405,
          406,
          408,
          410,
          419,
          420,
          422,
          423,
          425,
          427,
          428,
          431,
          432,
          434,
          436,
          437,
          438,
          441,
          445,
          449,
          450,
          454,
          456,
          457,
          459,
          460,
          461,
          462,
          463,
          464,
          465,
          466,
          479,
          634,
          636,
          637,
          653,
          655,
          656,
          658,
          659,
          661,
          663,
          664,
          665,
          667,
          669,
          670,
          672,
          696,
          706,
          707,
          708,
          709,
          711,
          712,
          715,
          718,
          719,
          724,
          725,
          726,
          727,
          731,
          732,
          733,
          734,
          1224,
          1227,
          1228,
          1231,
          1234,
          1235,
          1240,
          1293,
          1297,
          1298,
          1390,
          1391,
          1549,
          1550,
          1551,
          1552,
          1553,
          1554,
          1555,
          1646,
          1647,
          1648,
          1649,
          1650,
          1651,
          1652,
          1674,
          1677,
          1678,
          1681,
          1684,
          1732,
          1735,
          1742,
          1743,
          1744,
          1745,
          1747,
          1780,
          1783,
          1784
        ]
      },
      {
        "test_lines": [
          284,
          305
        ],
        "covered_lines": [
          105,
          107,
          119,
          120,
          128,
          129,
          139,
          140,
          141,
          158,
          160,
          161,
          163,
          165,
          167,
          168,
          170,
          171,
          174,
          175,
          177,
          181,
          182,
          183,
          184,
          185,
          187,
          188,
          190,
          192,
          195,
          198,
          199,
          200,
          201,
          202,
          203,
          204,
          205,
          207,
          209,
          211,
          213,
          214,
          215,
          220,
          221,
          222,
          223,
          224,
          225,
          226,
          228,
          229,
          231,
          232,
          234,
          235,
          236,
          237,
          238,
          239,
          241,
          242,
          243,
          244,
          245,
          252,
          253,
          255,
          257,
          259,
          261,
          264,
          266,
          268,
          270,
          272,
          274,
          277,
          278,
          282,
          283,
          292,
          293,
          294,
          295,
          296,
          297,
          298,
          299,
          300,
          301,
          302,
          304,
          305,
          331,
          332,
          351,
          356,
          357,
          358,
          359,
          364,
          366,
          367,
          369,
          370,
          371,
          372,
          373,
          376,
          385,
          398,
          399,
          401,
          403,
          404,
          405,
          406,
          408,
          410,
          412,
          415,
          419,
          431,
          432,
          434,
          436,
          437,
          438,
          441,
          445,
          449,
          450,
          454,
          456,
          457,
          459,
          460,
          461,
          462,
          463,
          464,
          465,
          469,
          471,
          472,
          476,
          477,
          479,
          482,
          503,
          504,
          506,
          569,
          570,
          571,
          578,
          579,
          581,
          582,
          584,
          585,
          586,
          587,
          588,
          589,
          590,
          591,
          595,
          598,
          599,
          603,
          604,
          605,
          617,
          625,
          627,
          628,
          631,
          634,
          636,
          637,
          653,
          655,
          656,
          658,
          659,
          661,
          663,
          664,
          665,
          667,
          669,
          670,
          672,
          675,
          679,
          681,
          682,
          683,
          688,
          689,
          692,
          696,
          706,
          707,
          708,
          709,
          711,
          712,
          713,
          718,
          719,
          724,
          725,
          726,
          727,
          731,
          732,
          733,
          734,
          1200,
          1201,
          1224,
          1227,
          1228,
          1231,
          1234,
          1235,
          1240,
          1293,
          1297,
          1298,
          1390,
          1391,
          1408,
          1412,
          1416,
          1417,
          1418,
          1419,
          1420,
          1421,
          1422,
          1423,
          1424,
          1425,
          1426,
          1427,
          1429,
          1430,
          1431,
          1432,
          1433,
          1434,
          1435,
          1436,
          1438,
          1474,
          1549,
          1550,
          1551,
          1552,
          1553,
          1554,
          1555,
          1646,
          1647,
          1648,
          1649,
          1650,
          1651,
          1652,
          1674,
          1677,
          1678,
          1681,
          1684,
          1732,
          1735,
          1742,
          1743,
          1744,
          1745,
          1747,
          1780,
          1783,
          1784
        ]
      },
      {
        "test_lines": [
          307,
          321
        ],
        "covered_lines": [
          105,
          107,
          119,
          120,
          139,
          140,
          141,
          158,
          160,
          161,
          163,
          165,
          167,
          168,
          170,
          171,
          174,
          175,
          177,
          181,
          182,
          183,
          184,
          185,
          187,
          188,
          190,
          192,
          195,
          198,
          199,
          200,
          201,
          202,
          203,
          204,
          205,
          207,
          209,
          211,
          213,
          214,
          215,
          220,
          221,
          222,
          223,
          224,
          225,
          226,
          228,
          229,
          231,
          232,
          234,
          235,
          236,
          237,
          238,
          239,
          241,
          242,
          243,
          244,
          245,
          252,
          253,
          255,
          257,
          259,
          261,
          264,
          266,
          268,
          270,
          272,
          274,
          277,
          278,
          282,
          283,
          292,
          293,
          294,
          295,
          296,
          297,
          298,
          299,
          300,
          301,
          302,
          304,
          305,
          331,
          332,
          351,
          356,
          357,
          358,
          359,
          364,
          366,
          367,
          385,
          398,
          399,
          401,
          403,
          404,
          405,
          406,
          408,
          410,
          419,
          420,
          422,
          423,
          425,
          427,
          428,
          431,
          432,
          434,
          436,
          437,
          438,
          441,
          445,
          449,
          450,
          454,
          456,
          457,
          459,
          460,
          461,
          462,
          463,
          464,
          465,
          466,
          469,
          471,
          472,
          476,
          477,
          479,
          634,
          636,
          637,
          653,
          655,
          656,
          658,
          659,
          661,
          663,
          664,
          665,
          667,
          669,
          670,
          672,
          696,
          706,
          707,
          708,
          709,
          711,
          712,
          713,
          715,
          718,
          719,
          724,
          725,
          726,
          727,
          731,
          732,
          733,
          734,
          1224,
          1227,
          1228,
          1231,
          1234,
          1235,
          1240,
          1293,
          1297,
          1298,
          1390,
          1391,
          1549,
          1550,
          1551,
          1552,
          1553,
          1554,
          1555,
          1646,
          1647,
          1648,
          1649,
          1650,
          1651,
          1652,
          1674,
          1677,
          1678,
          1681,
          1684,
          1732,
          1735,
          1742,
          1743,
          1744,
          1745,
          1747,
          1780,
          1783,
          1784
        ]
      },
      {
        "test_lines": [
          323,
          337
        ],
        "covered_lines": [
          105,
          107,
          119,
          120,
          139,
          140,
          141,
          158,
          160,
          161,
          163,
          165,
          167,
          168,
          170,
          171,
          174,
          175,
          177,
          181,
          182,
          183,
          184,
          185,
          187,
          188,
          190,
          192,
          195,
          198,
          199,
          200,
          201,
          202,
          203,
          204,
          205,
          207,
          209,
          211,
          213,
          214,
          215,
          220,
          221,
          222,
          223,
          224,
          225,
          226,
          228,
          229,
          231,
          232,
          234,
          235,
          236,
          237,
          238,
          239,
          241,
          242,
          243,
          244,
          245,
          252,
          253,
          255,
          257,
          259,
          261,
          264,
          266,
          268,
          270,
          272,
          274,
          277,
          278,
          282,
          283,
          292,
          293,
          294,
          295,
          296,
          297,
          298,
          299,
          300,
          301,
          302,
          304,
          305,
          331,
          332,
          351,
          356,
          357,
          358,
          359,
          364,
          366,
          367,
          385,
          398,
          399,
          401,
          403,
          404,
          405,
          406,
          408,
          410,
          419,
          420,
          422,
          423,
          425,
          427,
          428,
          431,
          432,
          434,
          436,
          437,
          438,
          441,
          445,
          449,
          450,
          454,
          456,
          457,
          459,
          460,
          461,
          462,
          463,
          464,
          465,
          466,
          469,
          471,
          472,
          476,
          477,
          479,
          634,
          636,
          637,
          653,
          655,
          656,
          658,
          659,
          661,
          663,
          664,
          665,
          667,
          669,
          670,
          672,
          696,
          706,
          707,
          708,
          709,
          711,
          712,
          713,
          715,
          718,
          719,
          724,
          725,
          726,
          727,
          731,
          732,
          733,
          734,
          1224,
          1227,
          1228,
          1231,
          1234,
          1235,
          1240,
          1293,
          1297,
          1298,
          1390,
          1391,
          1549,
          1550,
          1551,
          1552,
          1553,
          1554,
          1555,
          1646,
          1647,
          1648,
          1649,
          1650,
          1651,
          1652,
          1674,
          1677,
          1678,
          1681,
          1684,
          1732,
          1735,
          1742,
          1743,
          1744,
          1745,
          1747,
          1780,
          1783,
          1784
        ]
      },
      {
        "test_lines": [
          339,
          353
        ],
        "covered_lines": [
          105,
          107,
          119,
          120,
          139,
          140,
          141,
          158,
          160,
          161,
          163,
          165,
          167,
          168,
          170,
          171,
          174,
          175,
          177,
          181,
          182,
          183,
          184,
          185,
          187,
          188,
          190,
          192,
          195,
          198,
          199,
          200,
          201,
          202,
          203,
          204,
          205,
          207,
          209,
          211,
          213,
          214,
          215,
          220,
          221,
          222,
          223,
          224,
          225,
          226,
          228,
          229,
          231,
          232,
          234,
          235,
          236,
          237,
          238,
          239,
          241,
          242,
          243,
          244,
          245,
          252,
          253,
          255,
          257,
          259,
          261,
          264,
          266,
          268,
          270,
          272,
          274,
          277,
          278,
          282,
          283,
          292,
          293,
          294,
          295,
          296,
          297,
          298,
          299,
          300,
          301,
          302,
          304,
          305,
          331,
          332,
          351,
          356,
          357,
          358,
          359,
          364,
          366,
          367,
          385,
          398,
          399,
          401,
          403,
          404,
          405,
          406,
          408,
          410,
          419,
          420,
          422,
          423,
          425,
          427,
          428,
          431,
          432,
          434,
          436,
          437,
          438,
          441,
          445,
          449,
          450,
          454,
          456,
          457,
          459,
          460,
          461,
          462,
          463,
          464,
          465,
          466,
          479,
          634,
          636,
          637,
          653,
          655,
          656,
          658,
          659,
          661,
          663,
          664,
          665,
          667,
          669,
          670,
          672,
          696,
          706,
          707,
          708,
          709,
          711,
          712,
          715,
          718,
          719,
          724,
          725,
          726,
          727,
          731,
          732,
          733,
          734,
          1224,
          1227,
          1228,
          1231,
          1234,
          1235,
          1240,
          1293,
          1297,
          1298,
          1390,
          1391,
          1549,
          1550,
          1551,
          1552,
          1553,
          1554,
          1555,
          1646,
          1647,
          1648,
          1649,
          1650,
          1651,
          1652,
          1674,
          1677,
          1678,
          1681,
          1684,
          1732,
          1735,
          1742,
          1743,
          1744,
          1745,
          1747,
          1780,
          1783,
          1784
        ]
      },
      {
        "test_lines": [
          355,
          369
        ],
        "covered_lines": [
          105,
          107,
          119,
          120,
          139,
          140,
          141,
          158,
          160,
          161,
          163,
          165,
          167,
          168,
          170,
          171,
          174,
          175,
          177,
          181,
          182,
          183,
          184,
          185,
          187,
          188,
          190,
          192,
          195,
          198,
          199,
          200,
          201,
          202,
          203,
          204,
          205,
          207,
          209,
          211,
          213,
          214,
          215,
          220,
          221,
          222,
          223,
          224,
          225,
          226,
          228,
          229,
          231,
          232,
          234,
          235,
          236,
          237,
          238,
          239,
          241,
          242,
          243,
          244,
          245,
          252,
          253,
          255,
          257,
          259,
          261,
          264,
          266,
          268,
          270,
          272,
          274,
          277,
          278,
          282,
          283,
          292,
          293,
          294,
          295,
          296,
          297,
          298,
          299,
          300,
          301,
          302,
          304,
          305,
          331,
          332,
          351,
          356,
          357,
          358,
          359,
          364,
          366,
          367,
          385,
          398,
          399,
          401,
          403,
          404,
          405,
          406,
          408,
          410,
          419,
          420,
          422,
          423,
          425,
          427,
          428,
          431,
          432,
          434,
          436,
          437,
          438,
          441,
          445,
          449,
          450,
          454,
          456,
          457,
          459,
          460,
          461,
          462,
          463,
          464,
          465,
          466,
          479,
          634,
          636,
          637,
          653,
          655,
          656,
          658,
          659,
          661,
          663,
          664,
          665,
          667,
          669,
          670,
          672,
          696,
          706,
          707,
          708,
          709,
          711,
          712,
          715,
          718,
          719,
          724,
          725,
          726,
          727,
          731,
          732,
          733,
          734,
          1224,
          1227,
          1228,
          1231,
          1234,
          1235,
          1240,
          1293,
          1297,
          1298,
          1390,
          1391,
          1549,
          1550,
          1551,
          1552,
          1553,
          1554,
          1555,
          1646,
          1647,
          1648,
          1649,
          1650,
          1651,
          1652,
          1674,
          1677,
          1678,
          1681,
          1684,
          1732,
          1735,
          1742,
          1743,
          1744,
          1745,
          1747,
          1780,
          1783,
          1784
        ]
      },
      {
        "test_lines": [
          371,
          391
        ],
        "covered_lines": [
          105,
          107,
          119,
          120,
          128,
          129,
          139,
          140,
          141,
          158,
          160,
          161,
          163,
          165,
          167,
          168,
          170,
          174,
          175,
          177,
          178,
          181,
          182,
          183,
          184,
          185,
          187,
          188,
          190,
          192,
          195,
          198,
          199,
          200,
          201,
          202,
          203,
          204,
          205,
          207,
          209,
          211,
          213,
          214,
          215,
          220,
          221,
          222,
          223,
          224,
          225,
          226,
          228,
          229,
          231,
          232,
          234,
          235,
          236,
          237,
          238,
          239,
          241,
          242,
          243,
          244,
          245,
          252,
          253,
          255,
          257,
          259,
          261,
          264,
          266,
          268,
          270,
          272,
          274,
          277,
          278,
          282,
          283,
          292,
          293,
          294,
          295,
          296,
          297,
          298,
          299,
          300,
          301,
          302,
          304,
          305,
          331,
          332,
          351,
          356,
          357,
          358,
          359,
          364,
          366,
          367,
          385,
          398,
          399,
          401,
          403,
          404,
          405,
          406,
          408,
          410,
          419,
          431,
          432,
          434,
          436,
          437,
          438,
          439,
          441,
          445,
          449,
          450,
          454,
          456,
          457,
          459,
          460,
          461,
          462,
          463,
          464,
          465,
          469,
          471,
          472,
          474,
          476,
          477,
          479,
          634,
          636,
          637,
          653,
          655,
          656,
          658,
          659,
          661,
          663,
          664,
          665,
          667,
          669,
          670,
          672,
          696,
          697,
          698,
          699,
          706,
          707,
          708,
          709,
          711,
          712,
          715,
          718,
          719,
          724,
          725,
          726,
          727,
          731,
          732,
          733,
          734,
          1224,
          1227,
          1228,
          1231,
          1234,
          1235,
          1240,
          1293,
          1297,
          1298,
          1390,
          1391,
          1549,
          1550,
          1551,
          1552,
          1553,
          1554,
          1555,
          1646,
          1647,
          1648,
          1649,
          1650,
          1651,
          1652,
          1674,
          1677,
          1678,
          1681,
          1684,
          1732,
          1735,
          1742,
          1743,
          1744,
          1745,
          1747,
          1780,
          1783,
          1784
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/itext-java/layout/src/main/java/com/itextpdf/layout/renderer/TargetCounterHandler.java": {
    "class_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.layout.renderer;\n",
      "\n",
      "import com.itextpdf.layout.properties.Property;\n",
      "\n",
      "import java.util.HashMap;\n",
      "import java.util.Map;\n",
      "\n",
      "/**\n",
      " * Handler to handle target-counter logic.\n",
      " */\n",
      "public class TargetCounterHandler {\n",
      "\n",
      "    /**\n",
      "     * Pages for all renderers with id.\n",
      "     */\n",
      "    private Map<String, Integer> renderersPages = new HashMap<>();\n",
      "\n",
      "    private Map<String, Integer> previousRenderersPages = new HashMap<>();\n",
      "\n",
      "    /**\n",
      "     * Creates a copy of the given {@link TargetCounterHandler} instance.\n",
      "     *\n",
      "     * @param targetCounterHandler {@link TargetCounterHandler} instance to be copied\n",
      "     */\n",
      "    public TargetCounterHandler(TargetCounterHandler targetCounterHandler) {\n",
      "        this.renderersPages = targetCounterHandler.renderersPages;\n",
      "        this.previousRenderersPages = targetCounterHandler.previousRenderersPages;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Creates a new {@link TargetCounterHandler} instance.\n",
      "     */\n",
      "    public TargetCounterHandler() {}\n",
      "\n",
      "    /**\n",
      "     * Adds renderer's page to the root renderer map.\n",
      "     *\n",
      "     * @param renderer renderer from which page and root renderer will be taken.\n",
      "     */\n",
      "    public static void addPageByID(IRenderer renderer) {\n",
      "        final String id = renderer.<String>getProperty(Property.ID);\n",
      "        if (id != null) {\n",
      "            final TargetCounterHandler targetCounterHandler = getTargetCounterHandler(renderer);\n",
      "            if (targetCounterHandler != null && renderer.getOccupiedArea() != null) {\n",
      "                final int currentPageNumber = renderer.getOccupiedArea().getPageNumber();\n",
      "                targetCounterHandler.renderersPages.put(id, currentPageNumber);\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Gets page from renderer using given id.\n",
      "     *\n",
      "     * @param renderer renderer from which root renderer will be taken\n",
      "     * @param id key to the renderersPages Map\n",
      "     * @return page on which renderer was layouted\n",
      "     */\n",
      "    public static Integer getPageByID(IRenderer renderer, String id) {\n",
      "        final TargetCounterHandler targetCounterHandler = getTargetCounterHandler(renderer);\n",
      "        return targetCounterHandler == null ? null : targetCounterHandler.previousRenderersPages.get(id);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Indicates if page value was defined for this id.\n",
      "     *\n",
      "     * @param renderer renderer from which root renderer will be taken\n",
      "     * @param id target id\n",
      "     * @return true if value is defined for this id, false otherwise\n",
      "     */\n",
      "    public static boolean isValueDefinedForThisId(IRenderer renderer, String id) {\n",
      "        final TargetCounterHandler targetCounterHandler = getTargetCounterHandler(renderer);\n",
      "        return targetCounterHandler != null && targetCounterHandler.renderersPages.containsKey(id);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Indicates if relayout is required.\n",
      "     *\n",
      "     * @return true if relayout is required, false otherwise\n",
      "     */\n",
      "    public boolean isRelayoutRequired() {\n",
      "        for (Map.Entry<String, Integer> rendererPage : renderersPages.entrySet()) {\n",
      "            if (!rendererPage.getValue().equals(previousRenderersPages.get(rendererPage.getKey()))) {\n",
      "                return true;\n",
      "            }\n",
      "        }\n",
      "        return false;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Prepares handler to relayout.\n",
      "     */\n",
      "    public void prepareHandlerToRelayout() {\n",
      "        previousRenderersPages = new HashMap<>(renderersPages);\n",
      "    }\n",
      "\n",
      "    private static TargetCounterHandler getTargetCounterHandler(IRenderer renderer) {\n",
      "        IRenderer rootRenderer = renderer;\n",
      "        while (rootRenderer.getParent() != null) {\n",
      "            rootRenderer = rootRenderer.getParent();\n",
      "        }\n",
      "        if (rootRenderer instanceof DocumentRenderer) {\n",
      "            return ((DocumentRenderer) rootRenderer).getTargetCounterHandler();\n",
      "        }\n",
      "        return null;\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.layout.renderer;\n",
      "\n",
      "import com.itextpdf.io.font.constants.StandardFonts;\n",
      "import com.itextpdf.io.image.ImageDataFactory;\n",
      "import com.itextpdf.kernel.font.PdfFontFactory;\n",
      "import com.itextpdf.kernel.geom.PageSize;\n",
      "import com.itextpdf.kernel.geom.Rectangle;\n",
      "import com.itextpdf.kernel.pdf.PdfDocument;\n",
      "import com.itextpdf.kernel.pdf.PdfWriter;\n",
      "import com.itextpdf.kernel.utils.CompareTool;\n",
      "import com.itextpdf.layout.Document;\n",
      "import com.itextpdf.layout.element.AreaBreak;\n",
      "import com.itextpdf.layout.element.Div;\n",
      "import com.itextpdf.layout.element.Image;\n",
      "import com.itextpdf.layout.element.Paragraph;\n",
      "import com.itextpdf.layout.element.Table;\n",
      "import com.itextpdf.layout.element.Text;\n",
      "import com.itextpdf.layout.layout.LayoutArea;\n",
      "import com.itextpdf.layout.layout.LayoutContext;\n",
      "import com.itextpdf.layout.properties.Property;\n",
      "import com.itextpdf.layout.properties.UnitValue;\n",
      "import com.itextpdf.layout.layout.LayoutResult;\n",
      "import com.itextpdf.layout.splitting.DefaultSplitCharacters;\n",
      "import com.itextpdf.test.ExtendedITextTest;\n",
      "import com.itextpdf.test.annotations.type.IntegrationTest;\n",
      "\n",
      "import java.io.IOException;\n",
      "import org.junit.Assert;\n",
      "import org.junit.BeforeClass;\n",
      "import org.junit.Test;\n",
      "import org.junit.experimental.categories.Category;\n",
      "\n",
      "@Category(IntegrationTest.class)\n",
      "public class TargetCounterHandlerTest extends ExtendedITextTest {\n",
      "\n",
      "    public static final String SOURCE_FOLDER = \"./src/test/resources/com/itextpdf/layout/renderer/TargetCounterHandlerTest/\";\n",
      "    public static final String DESTINATION_FOLDER = \"./target/test/com/itextpdf/layout/renderer/TargetCounterHandlerTest/\";\n",
      "\n",
      "    @BeforeClass\n",
      "    public static void beforeClass() {\n",
      "        createDestinationFolder(DESTINATION_FOLDER);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void blockRendererAddByIDTest() {\n",
      "        DocumentRenderer documentRenderer = new DocumentRenderer(null);\n",
      "        DivRenderer divRenderer = new DivRenderer(new Div());\n",
      "        divRenderer.setParent(documentRenderer);\n",
      "        String id = \"id5\";\n",
      "        divRenderer.setProperty(Property.ID, id);\n",
      "        LayoutContext layoutContext = new LayoutContext(new LayoutArea(4, new Rectangle(50, 50)));\n",
      "        divRenderer.layout(layoutContext);\n",
      "\n",
      "        documentRenderer.getTargetCounterHandler().prepareHandlerToRelayout();\n",
      "        Assert.assertEquals((Integer) 4, TargetCounterHandler.getPageByID(divRenderer, id));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void textRendererAddByIDTest() throws IOException {\n",
      "        DocumentRenderer documentRenderer = new DocumentRenderer(null);\n",
      "        TextRenderer textRenderer = new TextRenderer(new Text(\"a\"));\n",
      "\n",
      "        textRenderer.setProperty(Property.TEXT_RISE, 20F);\n",
      "        textRenderer.setProperty(Property.CHARACTER_SPACING, 20F);\n",
      "        textRenderer.setProperty(Property.WORD_SPACING, 20F);\n",
      "        textRenderer.setProperty(Property.FONT, PdfFontFactory.createFont(StandardFonts.HELVETICA));\n",
      "        textRenderer.setProperty(Property.FONT_SIZE, new UnitValue(UnitValue.POINT, 20));\n",
      "        textRenderer.setProperty(Property.SPLIT_CHARACTERS, new DefaultSplitCharacters());\n",
      "\n",
      "        textRenderer.setParent(documentRenderer);\n",
      "        String id = \"id7\";\n",
      "        textRenderer.setProperty(Property.ID, id);\n",
      "        LayoutContext layoutContext = new LayoutContext(new LayoutArea(4, new Rectangle(50, 50)));\n",
      "        textRenderer.layout(layoutContext);\n",
      "\n",
      "        documentRenderer.getTargetCounterHandler().prepareHandlerToRelayout();\n",
      "        Assert.assertEquals((Integer) 4, TargetCounterHandler.getPageByID(textRenderer, id));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void tableRendererAddByIDTest() {\n",
      "        DocumentRenderer documentRenderer = new DocumentRenderer(null);\n",
      "        TableRenderer tableRenderer = new TableRenderer(new Table(5));\n",
      "        tableRenderer.setParent(documentRenderer);\n",
      "        String id = \"id5\";\n",
      "        tableRenderer.setProperty(Property.ID, id);\n",
      "        LayoutContext layoutContext = new LayoutContext(new LayoutArea(4, new Rectangle(50, 50)));\n",
      "        tableRenderer.layout(layoutContext);\n",
      "\n",
      "        documentRenderer.getTargetCounterHandler().prepareHandlerToRelayout();\n",
      "        Assert.assertEquals((Integer) 4, TargetCounterHandler.getPageByID(tableRenderer, id));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void paragraphRendererAddByIDTest() {\n",
      "        DocumentRenderer documentRenderer = new DocumentRenderer(null);\n",
      "        ParagraphRenderer paragraphRenderer = new ParagraphRenderer(new Paragraph());\n",
      "        paragraphRenderer.setParent(documentRenderer);\n",
      "        String id = \"id5\";\n",
      "        paragraphRenderer.setProperty(Property.ID, id);\n",
      "        LayoutContext layoutContext = new LayoutContext(new LayoutArea(4, new Rectangle(50, 50)));\n",
      "        paragraphRenderer.layout(layoutContext);\n",
      "\n",
      "        documentRenderer.getTargetCounterHandler().prepareHandlerToRelayout();\n",
      "        Assert.assertEquals((Integer) 4, TargetCounterHandler.getPageByID(paragraphRenderer, id));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void imageRendererAddByIDTest() {\n",
      "        DocumentRenderer documentRenderer = new DocumentRenderer(null);\n",
      "        ImageRenderer imageRenderer = new ImageRenderer(new Image(ImageDataFactory.createRawImage(new byte[]{50, 21})));\n",
      "        imageRenderer.setParent(documentRenderer);\n",
      "        String id = \"id6\";\n",
      "        imageRenderer.setProperty(Property.ID, id);\n",
      "        LayoutContext layoutContext = new LayoutContext(new LayoutArea(4, new Rectangle(50, 50)));\n",
      "        imageRenderer.layout(layoutContext);\n",
      "\n",
      "        documentRenderer.getTargetCounterHandler().prepareHandlerToRelayout();\n",
      "        Assert.assertEquals((Integer) 4, TargetCounterHandler.getPageByID(imageRenderer, id));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void lineRendererAddByIDTest() {\n",
      "        DocumentRenderer documentRenderer = new DocumentRenderer(null);\n",
      "        LineRenderer lineRenderer = new LineRenderer();\n",
      "        lineRenderer.setParent(documentRenderer);\n",
      "        String id = \"id6\";\n",
      "        lineRenderer.setProperty(Property.ID, id);\n",
      "        LayoutContext layoutContext = new LayoutContext(new LayoutArea(4, new Rectangle(50, 50)));\n",
      "        lineRenderer.layout(layoutContext);\n",
      "\n",
      "        documentRenderer.getTargetCounterHandler().prepareHandlerToRelayout();\n",
      "        Assert.assertEquals((Integer) 4, TargetCounterHandler.getPageByID(lineRenderer, id));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void targetCounterHandlerEndToEndLayoutTest() throws IOException, InterruptedException {\n",
      "        String targetPdf = DESTINATION_FOLDER + \"targetCounterHandlerEndToEndLayoutTest.pdf\";\n",
      "        String cmpPdf = SOURCE_FOLDER + \"cmp_targetCounterHandlerEndToEndLayoutTest.pdf\";\n",
      "        Document document = new Document(new PdfDocument(new PdfWriter(targetPdf)),\n",
      "                PageSize.A4, false);\n",
      "\n",
      "        Text pageNumPlaceholder = new Text(\"x\");\n",
      "        String id = \"1\";\n",
      "        pageNumPlaceholder.setProperty(Property.ID, id);\n",
      "        pageNumPlaceholder.setNextRenderer(new TargetCounterAwareTextRenderer(pageNumPlaceholder));\n",
      "        Paragraph intro = new Paragraph(\"The paragraph is on page \").add(pageNumPlaceholder);\n",
      "        document.add(intro);\n",
      "\n",
      "        document.add(new AreaBreak());\n",
      "        Paragraph text = new Paragraph(\"This is main text\");\n",
      "        text.setProperty(Property.ID, id);\n",
      "        text.setNextRenderer(new TargetCounterAwareParagraphRenderer(text));\n",
      "        document.add(text);\n",
      "\n",
      "        document.relayout();\n",
      "\n",
      "        document.close();\n",
      "\n",
      "        Assert.assertNull(new CompareTool().compareByContent(targetPdf, cmpPdf, DESTINATION_FOLDER, \"diff\"));\n",
      "    }\n",
      "\n",
      "    private static class TargetCounterAwareTextRenderer extends TextRenderer {\n",
      "        public TargetCounterAwareTextRenderer(Text link) {\n",
      "            super(link);\n",
      "        }\n",
      "\n",
      "        @Override\n",
      "        public LayoutResult layout(LayoutContext layoutContext) {\n",
      "            Integer targetPageNumber = TargetCounterHandler.getPageByID(this, this.<String>getProperty(Property.ID));\n",
      "            if (targetPageNumber != null) {\n",
      "                setText(String.valueOf(targetPageNumber));\n",
      "            }\n",
      "            return super.layout(layoutContext);\n",
      "        }\n",
      "\n",
      "        @Override\n",
      "        public IRenderer getNextRenderer() {\n",
      "            return new TargetCounterAwareTextRenderer((Text) getModelElement());\n",
      "        }\n",
      "    }\n",
      "\n",
      "    private static class TargetCounterAwareParagraphRenderer extends ParagraphRenderer {\n",
      "        public TargetCounterAwareParagraphRenderer(Paragraph modelElement) {\n",
      "            super(modelElement);\n",
      "        }\n",
      "\n",
      "        @Override\n",
      "        public IRenderer getNextRenderer() {\n",
      "            return new TargetCounterAwareParagraphRenderer((Paragraph) modelElement);\n",
      "        }\n",
      "\n",
      "        @Override\n",
      "        public LayoutResult layout(LayoutContext layoutContext) {\n",
      "            LayoutResult result = super.layout(layoutContext);\n",
      "            TargetCounterHandler.addPageByID(this);\n",
      "            return result;\n",
      "        }\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "TargetCounterHandler::::addPageByID(com.itextpdf.layout.renderer.IRenderer)": [
        62,
        71
      ],
      "TargetCounterHandler::::getPageByID(com.itextpdf.layout.renderer.IRenderer,java.lang.String)": [
        80,
        83
      ],
      "TargetCounterHandler::::isValueDefinedForThisId(com.itextpdf.layout.renderer.IRenderer,java.lang.String)": [
        92,
        95
      ],
      "TargetCounterHandler::::isRelayoutRequired()": [
        102,
        109
      ],
      "TargetCounterHandler::::prepareHandlerToRelayout()": [
        114,
        116
      ],
      "TargetCounterHandler::::getTargetCounterHandler(com.itextpdf.layout.renderer.IRenderer)": [
        118,
        127
      ]
    },
    "test_method_lines_dic": {
      "TargetCounterHandlerTest::::beforeClass()": [
        61,
        64
      ],
      "TargetCounterHandlerTest::::blockRendererAddByIDTest()": [
        66,
        78
      ],
      "TargetCounterHandlerTest::::textRendererAddByIDTest()": [
        80,
        100
      ],
      "TargetCounterHandlerTest::::tableRendererAddByIDTest()": [
        102,
        114
      ],
      "TargetCounterHandlerTest::::paragraphRendererAddByIDTest()": [
        116,
        128
      ],
      "TargetCounterHandlerTest::::imageRendererAddByIDTest()": [
        130,
        142
      ],
      "TargetCounterHandlerTest::::lineRendererAddByIDTest()": [
        144,
        156
      ],
      "TargetCounterHandlerTest::::targetCounterHandlerEndToEndLayoutTest()": [
        158,
        183
      ],
      "TargetCounterHandlerTest.TargetCounterAwareTextRenderer::::getNextRenderer()": [
        199,
        202
      ],
      "TargetCounterHandlerTest.TargetCounterAwareParagraphRenderer::::getNextRenderer()": [
        210,
        213
      ]
    },
    "reverse_method_lines_dic": {
      "62": "TargetCounterHandler::::addPageByID(com.itextpdf.layout.renderer.IRenderer)",
      "63": "TargetCounterHandler::::addPageByID(com.itextpdf.layout.renderer.IRenderer)",
      "64": "TargetCounterHandler::::addPageByID(com.itextpdf.layout.renderer.IRenderer)",
      "65": "TargetCounterHandler::::addPageByID(com.itextpdf.layout.renderer.IRenderer)",
      "66": "TargetCounterHandler::::addPageByID(com.itextpdf.layout.renderer.IRenderer)",
      "67": "TargetCounterHandler::::addPageByID(com.itextpdf.layout.renderer.IRenderer)",
      "68": "TargetCounterHandler::::addPageByID(com.itextpdf.layout.renderer.IRenderer)",
      "69": "TargetCounterHandler::::addPageByID(com.itextpdf.layout.renderer.IRenderer)",
      "70": "TargetCounterHandler::::addPageByID(com.itextpdf.layout.renderer.IRenderer)",
      "71": "TargetCounterHandler::::addPageByID(com.itextpdf.layout.renderer.IRenderer)",
      "80": "TargetCounterHandler::::getPageByID(com.itextpdf.layout.renderer.IRenderer,java.lang.String)",
      "81": "TargetCounterHandler::::getPageByID(com.itextpdf.layout.renderer.IRenderer,java.lang.String)",
      "82": "TargetCounterHandler::::getPageByID(com.itextpdf.layout.renderer.IRenderer,java.lang.String)",
      "83": "TargetCounterHandler::::getPageByID(com.itextpdf.layout.renderer.IRenderer,java.lang.String)",
      "92": "TargetCounterHandler::::isValueDefinedForThisId(com.itextpdf.layout.renderer.IRenderer,java.lang.String)",
      "93": "TargetCounterHandler::::isValueDefinedForThisId(com.itextpdf.layout.renderer.IRenderer,java.lang.String)",
      "94": "TargetCounterHandler::::isValueDefinedForThisId(com.itextpdf.layout.renderer.IRenderer,java.lang.String)",
      "95": "TargetCounterHandler::::isValueDefinedForThisId(com.itextpdf.layout.renderer.IRenderer,java.lang.String)",
      "102": "TargetCounterHandler::::isRelayoutRequired()",
      "103": "TargetCounterHandler::::isRelayoutRequired()",
      "104": "TargetCounterHandler::::isRelayoutRequired()",
      "105": "TargetCounterHandler::::isRelayoutRequired()",
      "106": "TargetCounterHandler::::isRelayoutRequired()",
      "107": "TargetCounterHandler::::isRelayoutRequired()",
      "108": "TargetCounterHandler::::isRelayoutRequired()",
      "109": "TargetCounterHandler::::isRelayoutRequired()",
      "114": "TargetCounterHandler::::prepareHandlerToRelayout()",
      "115": "TargetCounterHandler::::prepareHandlerToRelayout()",
      "116": "TargetCounterHandler::::prepareHandlerToRelayout()",
      "118": "TargetCounterHandler::::getTargetCounterHandler(com.itextpdf.layout.renderer.IRenderer)",
      "119": "TargetCounterHandler::::getTargetCounterHandler(com.itextpdf.layout.renderer.IRenderer)",
      "120": "TargetCounterHandler::::getTargetCounterHandler(com.itextpdf.layout.renderer.IRenderer)",
      "121": "TargetCounterHandler::::getTargetCounterHandler(com.itextpdf.layout.renderer.IRenderer)",
      "122": "TargetCounterHandler::::getTargetCounterHandler(com.itextpdf.layout.renderer.IRenderer)",
      "123": "TargetCounterHandler::::getTargetCounterHandler(com.itextpdf.layout.renderer.IRenderer)",
      "124": "TargetCounterHandler::::getTargetCounterHandler(com.itextpdf.layout.renderer.IRenderer)",
      "125": "TargetCounterHandler::::getTargetCounterHandler(com.itextpdf.layout.renderer.IRenderer)",
      "126": "TargetCounterHandler::::getTargetCounterHandler(com.itextpdf.layout.renderer.IRenderer)",
      "127": "TargetCounterHandler::::getTargetCounterHandler(com.itextpdf.layout.renderer.IRenderer)"
    },
    "test_reverse_method_lines_dic": {
      "61": "TargetCounterHandlerTest::::beforeClass()",
      "62": "TargetCounterHandlerTest::::beforeClass()",
      "63": "TargetCounterHandlerTest::::beforeClass()",
      "64": "TargetCounterHandlerTest::::beforeClass()",
      "66": "TargetCounterHandlerTest::::blockRendererAddByIDTest()",
      "67": "TargetCounterHandlerTest::::blockRendererAddByIDTest()",
      "68": "TargetCounterHandlerTest::::blockRendererAddByIDTest()",
      "69": "TargetCounterHandlerTest::::blockRendererAddByIDTest()",
      "70": "TargetCounterHandlerTest::::blockRendererAddByIDTest()",
      "71": "TargetCounterHandlerTest::::blockRendererAddByIDTest()",
      "72": "TargetCounterHandlerTest::::blockRendererAddByIDTest()",
      "73": "TargetCounterHandlerTest::::blockRendererAddByIDTest()",
      "74": "TargetCounterHandlerTest::::blockRendererAddByIDTest()",
      "75": "TargetCounterHandlerTest::::blockRendererAddByIDTest()",
      "76": "TargetCounterHandlerTest::::blockRendererAddByIDTest()",
      "77": "TargetCounterHandlerTest::::blockRendererAddByIDTest()",
      "78": "TargetCounterHandlerTest::::blockRendererAddByIDTest()",
      "80": "TargetCounterHandlerTest::::textRendererAddByIDTest()",
      "81": "TargetCounterHandlerTest::::textRendererAddByIDTest()",
      "82": "TargetCounterHandlerTest::::textRendererAddByIDTest()",
      "83": "TargetCounterHandlerTest::::textRendererAddByIDTest()",
      "84": "TargetCounterHandlerTest::::textRendererAddByIDTest()",
      "85": "TargetCounterHandlerTest::::textRendererAddByIDTest()",
      "86": "TargetCounterHandlerTest::::textRendererAddByIDTest()",
      "87": "TargetCounterHandlerTest::::textRendererAddByIDTest()",
      "88": "TargetCounterHandlerTest::::textRendererAddByIDTest()",
      "89": "TargetCounterHandlerTest::::textRendererAddByIDTest()",
      "90": "TargetCounterHandlerTest::::textRendererAddByIDTest()",
      "91": "TargetCounterHandlerTest::::textRendererAddByIDTest()",
      "92": "TargetCounterHandlerTest::::textRendererAddByIDTest()",
      "93": "TargetCounterHandlerTest::::textRendererAddByIDTest()",
      "94": "TargetCounterHandlerTest::::textRendererAddByIDTest()",
      "95": "TargetCounterHandlerTest::::textRendererAddByIDTest()",
      "96": "TargetCounterHandlerTest::::textRendererAddByIDTest()",
      "97": "TargetCounterHandlerTest::::textRendererAddByIDTest()",
      "98": "TargetCounterHandlerTest::::textRendererAddByIDTest()",
      "99": "TargetCounterHandlerTest::::textRendererAddByIDTest()",
      "100": "TargetCounterHandlerTest::::textRendererAddByIDTest()",
      "102": "TargetCounterHandlerTest::::tableRendererAddByIDTest()",
      "103": "TargetCounterHandlerTest::::tableRendererAddByIDTest()",
      "104": "TargetCounterHandlerTest::::tableRendererAddByIDTest()",
      "105": "TargetCounterHandlerTest::::tableRendererAddByIDTest()",
      "106": "TargetCounterHandlerTest::::tableRendererAddByIDTest()",
      "107": "TargetCounterHandlerTest::::tableRendererAddByIDTest()",
      "108": "TargetCounterHandlerTest::::tableRendererAddByIDTest()",
      "109": "TargetCounterHandlerTest::::tableRendererAddByIDTest()",
      "110": "TargetCounterHandlerTest::::tableRendererAddByIDTest()",
      "111": "TargetCounterHandlerTest::::tableRendererAddByIDTest()",
      "112": "TargetCounterHandlerTest::::tableRendererAddByIDTest()",
      "113": "TargetCounterHandlerTest::::tableRendererAddByIDTest()",
      "114": "TargetCounterHandlerTest::::tableRendererAddByIDTest()",
      "116": "TargetCounterHandlerTest::::paragraphRendererAddByIDTest()",
      "117": "TargetCounterHandlerTest::::paragraphRendererAddByIDTest()",
      "118": "TargetCounterHandlerTest::::paragraphRendererAddByIDTest()",
      "119": "TargetCounterHandlerTest::::paragraphRendererAddByIDTest()",
      "120": "TargetCounterHandlerTest::::paragraphRendererAddByIDTest()",
      "121": "TargetCounterHandlerTest::::paragraphRendererAddByIDTest()",
      "122": "TargetCounterHandlerTest::::paragraphRendererAddByIDTest()",
      "123": "TargetCounterHandlerTest::::paragraphRendererAddByIDTest()",
      "124": "TargetCounterHandlerTest::::paragraphRendererAddByIDTest()",
      "125": "TargetCounterHandlerTest::::paragraphRendererAddByIDTest()",
      "126": "TargetCounterHandlerTest::::paragraphRendererAddByIDTest()",
      "127": "TargetCounterHandlerTest::::paragraphRendererAddByIDTest()",
      "128": "TargetCounterHandlerTest::::paragraphRendererAddByIDTest()",
      "130": "TargetCounterHandlerTest::::imageRendererAddByIDTest()",
      "131": "TargetCounterHandlerTest::::imageRendererAddByIDTest()",
      "132": "TargetCounterHandlerTest::::imageRendererAddByIDTest()",
      "133": "TargetCounterHandlerTest::::imageRendererAddByIDTest()",
      "134": "TargetCounterHandlerTest::::imageRendererAddByIDTest()",
      "135": "TargetCounterHandlerTest::::imageRendererAddByIDTest()",
      "136": "TargetCounterHandlerTest::::imageRendererAddByIDTest()",
      "137": "TargetCounterHandlerTest::::imageRendererAddByIDTest()",
      "138": "TargetCounterHandlerTest::::imageRendererAddByIDTest()",
      "139": "TargetCounterHandlerTest::::imageRendererAddByIDTest()",
      "140": "TargetCounterHandlerTest::::imageRendererAddByIDTest()",
      "141": "TargetCounterHandlerTest::::imageRendererAddByIDTest()",
      "142": "TargetCounterHandlerTest::::imageRendererAddByIDTest()",
      "144": "TargetCounterHandlerTest::::lineRendererAddByIDTest()",
      "145": "TargetCounterHandlerTest::::lineRendererAddByIDTest()",
      "146": "TargetCounterHandlerTest::::lineRendererAddByIDTest()",
      "147": "TargetCounterHandlerTest::::lineRendererAddByIDTest()",
      "148": "TargetCounterHandlerTest::::lineRendererAddByIDTest()",
      "149": "TargetCounterHandlerTest::::lineRendererAddByIDTest()",
      "150": "TargetCounterHandlerTest::::lineRendererAddByIDTest()",
      "151": "TargetCounterHandlerTest::::lineRendererAddByIDTest()",
      "152": "TargetCounterHandlerTest::::lineRendererAddByIDTest()",
      "153": "TargetCounterHandlerTest::::lineRendererAddByIDTest()",
      "154": "TargetCounterHandlerTest::::lineRendererAddByIDTest()",
      "155": "TargetCounterHandlerTest::::lineRendererAddByIDTest()",
      "156": "TargetCounterHandlerTest::::lineRendererAddByIDTest()",
      "158": "TargetCounterHandlerTest::::targetCounterHandlerEndToEndLayoutTest()",
      "159": "TargetCounterHandlerTest::::targetCounterHandlerEndToEndLayoutTest()",
      "160": "TargetCounterHandlerTest::::targetCounterHandlerEndToEndLayoutTest()",
      "161": "TargetCounterHandlerTest::::targetCounterHandlerEndToEndLayoutTest()",
      "162": "TargetCounterHandlerTest::::targetCounterHandlerEndToEndLayoutTest()",
      "163": "TargetCounterHandlerTest::::targetCounterHandlerEndToEndLayoutTest()",
      "164": "TargetCounterHandlerTest::::targetCounterHandlerEndToEndLayoutTest()",
      "165": "TargetCounterHandlerTest::::targetCounterHandlerEndToEndLayoutTest()",
      "166": "TargetCounterHandlerTest::::targetCounterHandlerEndToEndLayoutTest()",
      "167": "TargetCounterHandlerTest::::targetCounterHandlerEndToEndLayoutTest()",
      "168": "TargetCounterHandlerTest::::targetCounterHandlerEndToEndLayoutTest()",
      "169": "TargetCounterHandlerTest::::targetCounterHandlerEndToEndLayoutTest()",
      "170": "TargetCounterHandlerTest::::targetCounterHandlerEndToEndLayoutTest()",
      "171": "TargetCounterHandlerTest::::targetCounterHandlerEndToEndLayoutTest()",
      "172": "TargetCounterHandlerTest::::targetCounterHandlerEndToEndLayoutTest()",
      "173": "TargetCounterHandlerTest::::targetCounterHandlerEndToEndLayoutTest()",
      "174": "TargetCounterHandlerTest::::targetCounterHandlerEndToEndLayoutTest()",
      "175": "TargetCounterHandlerTest::::targetCounterHandlerEndToEndLayoutTest()",
      "176": "TargetCounterHandlerTest::::targetCounterHandlerEndToEndLayoutTest()",
      "177": "TargetCounterHandlerTest::::targetCounterHandlerEndToEndLayoutTest()",
      "178": "TargetCounterHandlerTest::::targetCounterHandlerEndToEndLayoutTest()",
      "179": "TargetCounterHandlerTest::::targetCounterHandlerEndToEndLayoutTest()",
      "180": "TargetCounterHandlerTest::::targetCounterHandlerEndToEndLayoutTest()",
      "181": "TargetCounterHandlerTest::::targetCounterHandlerEndToEndLayoutTest()",
      "182": "TargetCounterHandlerTest::::targetCounterHandlerEndToEndLayoutTest()",
      "183": "TargetCounterHandlerTest::::targetCounterHandlerEndToEndLayoutTest()",
      "199": "TargetCounterHandlerTest.TargetCounterAwareTextRenderer::::getNextRenderer()",
      "200": "TargetCounterHandlerTest.TargetCounterAwareTextRenderer::::getNextRenderer()",
      "201": "TargetCounterHandlerTest.TargetCounterAwareTextRenderer::::getNextRenderer()",
      "202": "TargetCounterHandlerTest.TargetCounterAwareTextRenderer::::getNextRenderer()",
      "210": "TargetCounterHandlerTest.TargetCounterAwareParagraphRenderer::::getNextRenderer()",
      "211": "TargetCounterHandlerTest.TargetCounterAwareParagraphRenderer::::getNextRenderer()",
      "212": "TargetCounterHandlerTest.TargetCounterAwareParagraphRenderer::::getNextRenderer()",
      "213": "TargetCounterHandlerTest.TargetCounterAwareParagraphRenderer::::getNextRenderer()"
    },
    "tests": [
      {
        "test_lines": [
          66,
          78
        ],
        "covered_lines": [
          38,
          40,
          55,
          63,
          64,
          65,
          66,
          67,
          68,
          71,
          81,
          82,
          115,
          116,
          119,
          120,
          121,
          123,
          124
        ]
      },
      {
        "test_lines": [
          80,
          100
        ],
        "covered_lines": [
          38,
          40,
          55,
          63,
          64,
          65,
          66,
          67,
          68,
          71,
          81,
          82,
          115,
          116,
          119,
          120,
          121,
          123,
          124
        ]
      },
      {
        "test_lines": [
          102,
          114
        ],
        "covered_lines": [
          38,
          40,
          55,
          63,
          64,
          65,
          66,
          67,
          68,
          71,
          81,
          82,
          115,
          116,
          119,
          120,
          121,
          123,
          124
        ]
      },
      {
        "test_lines": [
          116,
          128
        ],
        "covered_lines": [
          38,
          40,
          55,
          63,
          64,
          65,
          66,
          67,
          68,
          71,
          81,
          82,
          115,
          116,
          119,
          120,
          121,
          123,
          124
        ]
      },
      {
        "test_lines": [
          130,
          142
        ],
        "covered_lines": [
          38,
          40,
          55,
          63,
          64,
          65,
          66,
          67,
          68,
          71,
          81,
          82,
          115,
          116,
          119,
          120,
          121,
          123,
          124
        ]
      },
      {
        "test_lines": [
          144,
          156
        ],
        "covered_lines": [
          38,
          40,
          55,
          63,
          64,
          65,
          66,
          67,
          68,
          71,
          81,
          82,
          115,
          116,
          119,
          120,
          121,
          123,
          124
        ]
      },
      {
        "test_lines": [
          158,
          183
        ],
        "covered_lines": [
          38,
          40,
          47,
          48,
          49,
          50,
          55,
          63,
          64,
          65,
          66,
          67,
          68,
          71,
          81,
          82,
          115,
          116,
          119,
          120,
          121,
          123,
          124
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/itext-java/layout/src/main/java/com/itextpdf/layout/renderer/TableWidths.java": {
    "class_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.layout.renderer;\n",
      "\n",
      "import com.itextpdf.io.logs.IoLogMessageConstant;\n",
      "import com.itextpdf.io.util.ArrayUtil;\n",
      "import com.itextpdf.commons.utils.MessageFormatUtil;\n",
      "import com.itextpdf.layout.borders.Border;\n",
      "import com.itextpdf.layout.element.Cell;\n",
      "import com.itextpdf.layout.element.Table;\n",
      "import com.itextpdf.layout.minmaxwidth.MinMaxWidth;\n",
      "import com.itextpdf.layout.minmaxwidth.MinMaxWidthUtils;\n",
      "import com.itextpdf.layout.properties.BorderCollapsePropertyValue;\n",
      "import com.itextpdf.layout.properties.Property;\n",
      "import com.itextpdf.layout.properties.UnitValue;\n",
      "import org.slf4j.Logger;\n",
      "import org.slf4j.LoggerFactory;\n",
      "\n",
      "import java.util.ArrayList;\n",
      "import java.util.Collections;\n",
      "import java.util.List;\n",
      "\n",
      "final class TableWidths {\n",
      "\n",
      "    private final TableRenderer tableRenderer;\n",
      "    private final int numberOfColumns;\n",
      "    private final float rightBorderMaxWidth;\n",
      "    private final float leftBorderMaxWidth;\n",
      "    private final ColumnWidthData[] widths;\n",
      "    private final float horizontalBorderSpacing;\n",
      "    private List<CellInfo> cells;\n",
      "\n",
      "    private float tableWidth;\n",
      "    private boolean fixedTableWidth;\n",
      "    private boolean fixedTableLayout = false;\n",
      "    private float layoutMinWidth;\n",
      "    private float tableMinWidth;\n",
      "    private float tableMaxWidth;\n",
      "\n",
      "    TableWidths(TableRenderer tableRenderer, float availableWidth, boolean calculateTableMaxWidth,\n",
      "                float rightBorderMaxWidth, float leftBorderMaxWidth) {\n",
      "        this.tableRenderer = tableRenderer;\n",
      "        this.numberOfColumns = ((Table) tableRenderer.getModelElement()).getNumberOfColumns();\n",
      "        this.widths = new ColumnWidthData[numberOfColumns];\n",
      "        this.rightBorderMaxWidth = rightBorderMaxWidth;\n",
      "        this.leftBorderMaxWidth = leftBorderMaxWidth;\n",
      "        if (tableRenderer.bordersHandler instanceof SeparatedTableBorders) {\n",
      "            Float horizontalSpacing = tableRenderer.getPropertyAsFloat(Property.HORIZONTAL_BORDER_SPACING);\n",
      "            horizontalBorderSpacing = null == horizontalSpacing ? 0 : (float) horizontalSpacing;\n",
      "        } else {\n",
      "            horizontalBorderSpacing = 0;\n",
      "        }\n",
      "        calculateTableWidth(availableWidth, calculateTableMaxWidth);\n",
      "    }\n",
      "\n",
      "    boolean hasFixedLayout() {\n",
      "        return fixedTableLayout;\n",
      "    }\n",
      "\n",
      "    float[] layout() {\n",
      "        if (hasFixedLayout()) {\n",
      "            return fixedLayout();\n",
      "        } else {\n",
      "            return autoLayout();\n",
      "        }\n",
      "    }\n",
      "\n",
      "    float getMinWidth() {\n",
      "        return layoutMinWidth;\n",
      "    }\n",
      "\n",
      "    float[] autoLayout() {\n",
      "        assert tableRenderer.getTable().isComplete();\n",
      "        fillAndSortCells();\n",
      "        calculateMinMaxWidths();\n",
      "\n",
      "        float minSum = 0;\n",
      "        for (ColumnWidthData width : widths) {\n",
      "            minSum += width.min;\n",
      "        }\n",
      "\n",
      "        for (CellInfo cell : cells) {\n",
      "            processCell(cell);\n",
      "        }\n",
      "\n",
      "        processColumns();\n",
      "\n",
      "        recalculate(minSum);\n",
      "\n",
      "        return extractWidths();\n",
      "    }\n",
      "\n",
      "   List<CellInfo> autoLayoutCustom() {\n",
      "        assert tableRenderer.getTable().isComplete();\n",
      "        fillAndSortCells();\n",
      "        calculateMinMaxWidths();\n",
      "        return cells;\n",
      "    }\n",
      "\n",
      "    void processCell(CellInfo cell) {\n",
      "\n",
      "        // For automatic layout algorithm percents have higher priority\n",
      "        // value must be > 0, while for fixed layout >= 0\n",
      "        UnitValue cellWidth = getCellWidth(cell.getCell(), false);\n",
      "        if (cellWidth != null) {\n",
      "            assert cellWidth.getValue() > 0;\n",
      "            if (cellWidth.isPercentValue()) {\n",
      "\n",
      "                //cellWidth has percent value\n",
      "                if (cell.getColspan() == 1) {\n",
      "                    widths[cell.getCol()].setPercents(cellWidth.getValue());\n",
      "                } else {\n",
      "                    int pointColumns = 0;\n",
      "                    float percentSum = 0;\n",
      "                    for (int i = cell.getCol(); i < cell.getCol() + cell.getColspan(); i++) {\n",
      "                        if (!widths[i].isPercent) {\n",
      "                            pointColumns++;\n",
      "                        } else {\n",
      "                            percentSum += widths[i].width;\n",
      "                        }\n",
      "                    }\n",
      "                    float percentAddition = cellWidth.getValue() - percentSum;\n",
      "                    if (percentAddition > 0) {\n",
      "                        if (pointColumns == 0) {\n",
      "\n",
      "                            //ok, add percents to each column\n",
      "                            for (int i = cell.getCol(); i < cell.getCol() + cell.getColspan(); i++) {\n",
      "                                widths[i].addPercents(percentAddition / cell.getColspan());\n",
      "                            }\n",
      "                        } else {\n",
      "\n",
      "                            // set percent only to cells without one\n",
      "                            for (int i = cell.getCol(); i < cell.getCol() + cell.getColspan(); i++) {\n",
      "                                if (!widths[i].isPercent) {\n",
      "                                    widths[i].setPercents(percentAddition / pointColumns);\n",
      "                                }\n",
      "                            }\n",
      "                        }\n",
      "                    }\n",
      "                }\n",
      "            } else {\n",
      "\n",
      "                //cellWidth has point value\n",
      "                if (cell.getColspan() == 1) {\n",
      "                    if (!widths[cell.getCol()].isPercent) {\n",
      "                        if (widths[cell.getCol()].min <= cellWidth.getValue()) {\n",
      "                            widths[cell.getCol()].setPoints(cellWidth.getValue()).setFixed(true);\n",
      "                        } else {\n",
      "                            widths[cell.getCol()].setPoints(widths[cell.getCol()].min);\n",
      "                        }\n",
      "                    }\n",
      "                } else {\n",
      "                    processCellsRemainWidth(cell,cellWidth);\n",
      "                }\n",
      "            }\n",
      "        } else if (widths[cell.getCol()].isFlexible()) {\n",
      "\n",
      "            //if there is no information, try to set max width\n",
      "            int flexibleCols = 0;\n",
      "            float remainWidth = 0;\n",
      "            for (int i = cell.getCol(); i < cell.getCol() + cell.getColspan(); i++) {\n",
      "                if (widths[i].isFlexible()) {\n",
      "                    remainWidth += widths[i].max - widths[i].width;\n",
      "                    flexibleCols++;\n",
      "                }\n",
      "            }\n",
      "            if (remainWidth > 0) {\n",
      "                // flexibleCols > 0 too\n",
      "                \n",
      "                for (int i = cell.getCol(); i < cell.getCol() + cell.getColspan(); i++) {\n",
      "                    if (widths[i].isFlexible()) {\n",
      "                        widths[i].addPoints(remainWidth / flexibleCols);\n",
      "                    }\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    void processColumns() {\n",
      "        for (int i = 0; i < numberOfColumns; i++) {\n",
      "            UnitValue colWidth = getTable().getColumnWidth(i);\n",
      "            if (colWidth != null && colWidth.getValue() > 0) {\n",
      "                if (colWidth.isPercentValue()) {\n",
      "                    if (!widths[i].isPercent) {\n",
      "                        if (widths[i].isFixed && widths[i].width > widths[i].min) {\n",
      "                            widths[i].max = widths[i].width;\n",
      "                        }\n",
      "                        widths[i].setPercents(colWidth.getValue());\n",
      "                    }\n",
      "                } else if (!widths[i].isPercent && colWidth.getValue() >= widths[i].min) {\n",
      "                    if (widths[i].isFixed) {\n",
      "                        widths[i].setPoints(colWidth.getValue());\n",
      "                    } else {\n",
      "                        widths[i].resetPoints(colWidth.getValue()).setFixed(true);\n",
      "                    }\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    void recalculate(float minSum) {\n",
      "        if (tableWidth - minSum < 0) {\n",
      "            for (int i = 0; i < numberOfColumns; i++) {\n",
      "                widths[i].finalWidth = widths[i].min;\n",
      "            }\n",
      "        } else {\n",
      "            float sumOfPercents = 0;\n",
      "            // minTableWidth include only non percent columns.\n",
      "            float minTableWidth = 0;\n",
      "            float totalNonPercent = 0;\n",
      "\n",
      "            // validate sumOfPercents, last columns will be set min width, if sum > 100.\n",
      "            for (int i = 0; i < widths.length; i++) {\n",
      "                if (widths[i].isPercent) {\n",
      "                    if (sumOfPercents < 100 && sumOfPercents + widths[i].width > 100) {\n",
      "                        widths[i].width = 100 - sumOfPercents;\n",
      "                        sumOfPercents += widths[i].width;\n",
      "                        warn100percent();\n",
      "                    } else if (sumOfPercents >= 100) {\n",
      "                        widths[i].resetPoints(widths[i].min);\n",
      "                        minTableWidth += widths[i].min;\n",
      "                        warn100percent();\n",
      "                    } else {\n",
      "                        sumOfPercents += widths[i].width;\n",
      "                    }\n",
      "                } else {\n",
      "                    minTableWidth += widths[i].min;\n",
      "                    totalNonPercent += widths[i].width;\n",
      "                }\n",
      "            }\n",
      "            assert sumOfPercents <= 100;\n",
      "\n",
      "            boolean toBalance = true;\n",
      "            if (!fixedTableWidth) {\n",
      "                float tableWidthBasedOnPercents = sumOfPercents < 100\n",
      "                        ? totalNonPercent * 100 / (100 - sumOfPercents) : 0;\n",
      "                for (int i = 0; i < numberOfColumns; i++) {\n",
      "                    if (widths[i].isPercent && widths[i].width > 0) {\n",
      "                        tableWidthBasedOnPercents = Math.max(widths[i].max * 100 / widths[i].width, tableWidthBasedOnPercents);\n",
      "                    }\n",
      "                }\n",
      "\n",
      "                if (tableWidthBasedOnPercents <= tableWidth) {\n",
      "                    if (tableWidthBasedOnPercents >= minTableWidth) {\n",
      "                        tableWidth = tableWidthBasedOnPercents;\n",
      "                        //we don't need more space, columns are done based on column's max width.\n",
      "                        toBalance = false;\n",
      "                    } else {\n",
      "                        tableWidth = minTableWidth;\n",
      "                    }\n",
      "                }\n",
      "            }\n",
      "\n",
      "            if (sumOfPercents > 0 && sumOfPercents < 100 && totalNonPercent == 0) {\n",
      "                // each column has percent value but sum < 100%\n",
      "                // upscale percents\n",
      "                for (int i = 0; i < widths.length; i++) {\n",
      "                    widths[i].width = 100 * widths[i].width / sumOfPercents;\n",
      "                }\n",
      "                sumOfPercents = 100;\n",
      "            }\n",
      "\n",
      "            if (!toBalance) {\n",
      "                //column width based on max width, no need to check min width.\n",
      "                for (int i = 0; i < numberOfColumns; i++) {\n",
      "                    widths[i].finalWidth = widths[i].isPercent\n",
      "                            ? tableWidth * widths[i].width / 100\n",
      "                            : widths[i].width;\n",
      "                }\n",
      "            } else if (sumOfPercents >= 100) {\n",
      "                sumOfPercents = 100;\n",
      "                boolean recalculatePercents = false;\n",
      "                float remainWidth = tableWidth - minTableWidth;\n",
      "                for (int i = 0; i < numberOfColumns; i++) {\n",
      "                    if (widths[i].isPercent) {\n",
      "                        if (remainWidth * widths[i].width / 100 >= widths[i].min) {\n",
      "                            widths[i].finalWidth = remainWidth * widths[i].width / 100;\n",
      "                        } else {\n",
      "                            widths[i].finalWidth = widths[i].min;\n",
      "                            widths[i].isPercent = false;\n",
      "                            remainWidth -= widths[i].min;\n",
      "                            sumOfPercents -= widths[i].width;\n",
      "                            recalculatePercents = true;\n",
      "                        }\n",
      "                    } else {\n",
      "                        widths[i].finalWidth = widths[i].min;\n",
      "                    }\n",
      "                }\n",
      "                if (recalculatePercents) {\n",
      "                    for (int i = 0; i < numberOfColumns; i++) {\n",
      "                        if (widths[i].isPercent) {\n",
      "                            widths[i].finalWidth = remainWidth * widths[i].width / sumOfPercents;\n",
      "                        }\n",
      "                    }\n",
      "                }\n",
      "            } else {\n",
      "                // We either have some extra space and may extend columns in case fixed table width,\n",
      "                // or have to decrease columns to fit table width.\n",
      "                //\n",
      "                // columns shouldn't be more than its max value in case unspecified table width.\n",
      "                // columns shouldn't be more than its percentage value.\n",
      "\n",
      "                // opposite to sumOfPercents, which is sum of percent values in points.\n",
      "                float totalPercent = 0;\n",
      "                float minTotalNonPercent = 0;\n",
      "                float fixedAddition = 0;\n",
      "                float flexibleAddition = 0;\n",
      "                boolean hasFlexibleCell = false;\n",
      "                //sum of non fixed non percent columns.\n",
      "                for (int i = 0; i < numberOfColumns; i++) {\n",
      "                    if (widths[i].isPercent) {\n",
      "                        if (tableWidth * widths[i].width / 100 >= widths[i].min) {\n",
      "                            widths[i].finalWidth = tableWidth * widths[i].width / 100;\n",
      "                            totalPercent += widths[i].finalWidth;\n",
      "                        } else {\n",
      "                            sumOfPercents -= widths[i].width;\n",
      "                            widths[i].resetPoints(widths[i].min);\n",
      "                            widths[i].finalWidth = widths[i].min;\n",
      "                            minTotalNonPercent += widths[i].min;\n",
      "                        }\n",
      "                    } else {\n",
      "                        widths[i].finalWidth = widths[i].min;\n",
      "                        minTotalNonPercent += widths[i].min;\n",
      "                        float addition = widths[i].width - widths[i].min;\n",
      "                        if (widths[i].isFixed) {\n",
      "                            fixedAddition += addition;\n",
      "                        } else {\n",
      "                            flexibleAddition += addition;\n",
      "                            hasFlexibleCell = true;\n",
      "                        }\n",
      "                    }\n",
      "                }\n",
      "                if (totalPercent + minTotalNonPercent > tableWidth) {\n",
      "                    // collision between minWidth and percent value.\n",
      "                    float extraWidth = tableWidth - minTotalNonPercent;\n",
      "                    if (sumOfPercents > 0) {\n",
      "                        for (int i = 0; i < numberOfColumns; i++) {\n",
      "                            if (widths[i].isPercent) {\n",
      "                                widths[i].finalWidth = extraWidth * widths[i].width / sumOfPercents;\n",
      "                            }\n",
      "                        }\n",
      "                    }\n",
      "                } else {\n",
      "                    float extraWidth = tableWidth - totalPercent - minTotalNonPercent;\n",
      "                    if (fixedAddition > 0 && (extraWidth < fixedAddition || !hasFlexibleCell)) {\n",
      "                        for (int i = 0; i < numberOfColumns; i++) {\n",
      "                            //only points could be fixed\n",
      "                            if (widths[i].isFixed) {\n",
      "                                widths[i].finalWidth += (widths[i].width - widths[i].min) * extraWidth / fixedAddition;\n",
      "                            }\n",
      "                        }\n",
      "                    } else {\n",
      "                        extraWidth -= fixedAddition;\n",
      "                        if (extraWidth < flexibleAddition) {\n",
      "                            for (int i = 0; i < numberOfColumns; i++) {\n",
      "                                if (widths[i].isFixed) {\n",
      "                                    widths[i].finalWidth = widths[i].width;\n",
      "                                } else if (!widths[i].isPercent) {\n",
      "                                    widths[i].finalWidth += (widths[i].width - widths[i].min) * extraWidth / flexibleAddition;\n",
      "                                }\n",
      "                            }\n",
      "                        } else {\n",
      "                            float totalFixed = 0;\n",
      "                            float totalFlexible = 0;\n",
      "                            float flexibleCount = 0;\n",
      "                            for (int i = 0; i < numberOfColumns; i++) {\n",
      "                                if (widths[i].isFixed) {\n",
      "                                    widths[i].finalWidth = widths[i].width;\n",
      "                                    totalFixed += widths[i].width;\n",
      "                                } else if (!widths[i].isPercent) {\n",
      "                                    totalFlexible += widths[i].width;\n",
      "                                    flexibleCount++;\n",
      "                                }\n",
      "                            }\n",
      "                            assert totalFlexible > 0 || flexibleCount > 0;\n",
      "                            extraWidth = tableWidth - totalPercent - totalFixed;\n",
      "                            for (int i = 0; i < numberOfColumns; i++) {\n",
      "                                if (!widths[i].isPercent && !widths[i].isFixed) {\n",
      "                                    widths[i].finalWidth = totalFlexible > 0\n",
      "                                            ? widths[i].width * extraWidth / totalFlexible\n",
      "                                            : extraWidth / flexibleCount;\n",
      "                                }\n",
      "                            }\n",
      "                        }\n",
      "                    }\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    void processCellsRemainWidth(CellInfo cell, UnitValue cellWidth) {\n",
      "        int flexibleCols = 0;\n",
      "        float remainWidth = cellWidth.getValue();\n",
      "        for (int i = cell.getCol(); i < cell.getCol() + cell.getColspan(); i++) {\n",
      "            if (!widths[i].isPercent) {\n",
      "                remainWidth -= widths[i].width;\n",
      "                if (!widths[i].isFixed) {\n",
      "                    flexibleCols++;\n",
      "                }\n",
      "            } else {\n",
      "                // if any col has percent value, we cannot predict remaining width.\n",
      "                remainWidth = 0;\n",
      "                break;\n",
      "            }\n",
      "        }\n",
      "        if (remainWidth > 0) {\n",
      "            int[] flexibleColIndexes = ArrayUtil.fillWithValue(new int[cell.getColspan()], -1);\n",
      "            if (flexibleCols > 0) {\n",
      "                // check min width in columns\n",
      "                for (int i = cell.getCol(); i < cell.getCol() + cell.getColspan(); i++) {\n",
      "                    if (!widths[i].isFlexible())\n",
      "                        continue;\n",
      "                    if (widths[i].min > widths[i].width + remainWidth / flexibleCols) {\n",
      "                        widths[i].resetPoints(widths[i].min);\n",
      "                        remainWidth -= widths[i].min - widths[i].width;\n",
      "                        flexibleCols--;\n",
      "                        if (flexibleCols == 0 || remainWidth <= 0) {\n",
      "                            break;\n",
      "                        }\n",
      "                    } else {\n",
      "                        flexibleColIndexes[i - cell.getCol()] = i;\n",
      "                    }\n",
      "                }\n",
      "                if (flexibleCols > 0 && remainWidth > 0) {\n",
      "                    for (int i = 0; i < flexibleColIndexes.length; i++) {\n",
      "                        if (flexibleColIndexes[i] >= 0) {\n",
      "                            widths[flexibleColIndexes[i]].addPoints(remainWidth / flexibleCols).setFixed(true);\n",
      "                        }\n",
      "                    }\n",
      "                }\n",
      "            } else {\n",
      "                for (int i = cell.getCol(); i < cell.getCol() + cell.getColspan(); i++) {\n",
      "                    widths[i].addPoints(remainWidth / cell.getColspan());\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    float[] fixedLayout() {\n",
      "        float[] columnWidths = new float[numberOfColumns];\n",
      "        //fill columns from col info\n",
      "        for (int i = 0; i < numberOfColumns; i++) {\n",
      "            UnitValue colWidth = getTable().getColumnWidth(i);\n",
      "            if (colWidth == null || colWidth.getValue() < 0) {\n",
      "                columnWidths[i] = -1;\n",
      "            } else if (colWidth.isPercentValue()) {\n",
      "                columnWidths[i] = colWidth.getValue() * tableWidth / 100;\n",
      "            } else {\n",
      "                columnWidths[i] = colWidth.getValue();\n",
      "            }\n",
      "        }\n",
      "        //fill columns with -1 from cell info.\n",
      "        int processedColumns = 0;\n",
      "        float remainWidth = tableWidth;\n",
      "        CellRenderer[] firtsRow;\n",
      "        if (tableRenderer.headerRenderer != null && tableRenderer.headerRenderer.rows.size() > 0) {\n",
      "            firtsRow = tableRenderer.headerRenderer.rows.get(0);\n",
      "        } else if (tableRenderer.rows.size() > 0 && getTable().isComplete() && 0 == getTable().getLastRowBottomBorder().size()) {\n",
      "            firtsRow = tableRenderer.rows.get(0);\n",
      "        } else {\n",
      "            //most likely it is large table\n",
      "            firtsRow = null;\n",
      "        }\n",
      "\n",
      "        float[] columnWidthIfPercent = new float[columnWidths.length];\n",
      "        for (int i = 0; i < columnWidthIfPercent.length; i++) {\n",
      "            columnWidthIfPercent[i] = -1;\n",
      "        }\n",
      "        float sumOfPercents = 0;\n",
      "\n",
      "        // only for not large tables\n",
      "        if (firtsRow != null && getTable().isComplete() && getTable().getLastRowBottomBorder().isEmpty()) {\n",
      "            for (int i = 0; i < numberOfColumns; i++) {\n",
      "                if (columnWidths[i] == -1) {\n",
      "                    CellRenderer cell = firtsRow[i];\n",
      "                    if (cell != null) {\n",
      "                        UnitValue cellWidth = getCellWidth(cell, true);\n",
      "                        if (cellWidth != null) {\n",
      "                            assert cellWidth.getValue() >= 0;\n",
      "                            float width = 0;\n",
      "                            if (cellWidth.isPercentValue()) {\n",
      "                                width = tableWidth * cellWidth.getValue() / 100;\n",
      "                                columnWidthIfPercent[i] = cellWidth.getValue();\n",
      "                                sumOfPercents += columnWidthIfPercent[i];\n",
      "                            } else {\n",
      "                                width = cellWidth.getValue();\n",
      "                            }\n",
      "                            int colspan = ((Cell) cell.getModelElement()).getColspan();\n",
      "                            for (int j = 0; j < colspan; j++) {\n",
      "                                columnWidths[i + j] = width / colspan;\n",
      "                            }\n",
      "                            remainWidth -= columnWidths[i];\n",
      "                            processedColumns++;\n",
      "                        }\n",
      "                    }\n",
      "                } else {\n",
      "                    remainWidth -= columnWidths[i];\n",
      "                    processedColumns++;\n",
      "                }\n",
      "            }\n",
      "        } else {\n",
      "            for (int i = 0; i < numberOfColumns; i++) {\n",
      "                if (columnWidths[i] != -1) {\n",
      "                    processedColumns++;\n",
      "                    remainWidth -= columnWidths[i];\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "        if (sumOfPercents > 100) {\n",
      "            warn100percent();\n",
      "        }\n",
      "        if (remainWidth > 0) {\n",
      "            if (numberOfColumns == processedColumns) {\n",
      "                //Set remaining width to all columns.\n",
      "                for (int i = 0; i < numberOfColumns; i++) {\n",
      "                    columnWidths[i] = tableWidth * columnWidths[i] / (tableWidth - remainWidth);\n",
      "                }\n",
      "            }\n",
      "        } else if (remainWidth < 0){\n",
      "            //Only columns with a width of percentage type should suffer.\n",
      "            for (int i = 0; i < numberOfColumns; i++) {\n",
      "                columnWidths[i] += -1 != columnWidthIfPercent[i]\n",
      "                        ? remainWidth * columnWidthIfPercent[i] / sumOfPercents\n",
      "                        : 0;\n",
      "            }\n",
      "        }\n",
      "        for (int i = 0; i < numberOfColumns; i++) {\n",
      "            if (columnWidths[i] == -1) {\n",
      "                columnWidths[i] = Math.max(0, remainWidth / (numberOfColumns - processedColumns));\n",
      "            }\n",
      "        }\n",
      "\n",
      "        // Set remaining width to the unprocessed columns.\n",
      "        if (tableRenderer.bordersHandler instanceof SeparatedTableBorders) {\n",
      "            for (int i = 0; i < numberOfColumns; i++) {\n",
      "                columnWidths[i] += horizontalBorderSpacing;\n",
      "            }\n",
      "        }\n",
      "        return columnWidths;\n",
      "    }\n",
      "\n",
      "    //region Common methods\n",
      "\n",
      "    private void calculateTableWidth(float availableWidth, boolean calculateTableMaxWidth) {\n",
      "        fixedTableLayout = \"fixed\".equals(tableRenderer\n",
      "                .<String>getProperty(Property.TABLE_LAYOUT, \"auto\").toLowerCase());\n",
      "        UnitValue width = tableRenderer.<UnitValue>getProperty(Property.WIDTH);\n",
      "        if (fixedTableLayout && width != null && width.getValue() >= 0) {\n",
      "            if (0 != getTable().getLastRowBottomBorder().size()) {\n",
      "                width = getTable().getWidth();\n",
      "            } else if (!getTable().isComplete() && null != getTable().getWidth() && getTable().getWidth().isPercentValue()) {\n",
      "                getTable().setWidth((float) tableRenderer.retrieveUnitValue(availableWidth, Property.WIDTH));\n",
      "            }\n",
      "            fixedTableWidth = true;\n",
      "            tableWidth = (float) retrieveTableWidth(width, availableWidth);\n",
      "            layoutMinWidth = width.isPercentValue() ? 0 : tableWidth;\n",
      "        } else {\n",
      "            fixedTableLayout = false;\n",
      "            //min width will initialize later\n",
      "            layoutMinWidth = -1;\n",
      "            if (calculateTableMaxWidth) {\n",
      "                fixedTableWidth = false;\n",
      "                tableWidth = retrieveTableWidth(availableWidth);\n",
      "            } else if (width != null && width.getValue() >= 0) {\n",
      "                fixedTableWidth = true;\n",
      "                tableWidth = (float) retrieveTableWidth(width, availableWidth);\n",
      "            } else {\n",
      "                fixedTableWidth = false;\n",
      "                tableWidth = retrieveTableWidth(availableWidth);\n",
      "            }\n",
      "        }\n",
      "        Float min = retrieveTableWidth(tableRenderer.<UnitValue>getProperty(Property.MIN_WIDTH), availableWidth);\n",
      "        Float max = retrieveTableWidth(tableRenderer.<UnitValue>getProperty(Property.MAX_WIDTH), availableWidth);\n",
      "\n",
      "        tableMinWidth = min != null ? (float) min : layoutMinWidth;\n",
      "        tableMaxWidth = max != null ? (float) max : tableWidth;\n",
      "\n",
      "        if (tableMinWidth > tableMaxWidth)\n",
      "            tableMaxWidth = tableMinWidth;\n",
      "\n",
      "        if (tableMinWidth > tableWidth)\n",
      "            tableWidth = tableMinWidth;\n",
      "\n",
      "        if (tableMaxWidth < tableWidth)\n",
      "            tableWidth = tableMaxWidth;\n",
      "    }\n",
      "\n",
      "    private Float retrieveTableWidth(UnitValue width, float availableWidth) {\n",
      "        if (width == null) return null;\n",
      "        return retrieveTableWidth(width.isPercentValue()\n",
      "                ? width.getValue() * availableWidth / 100\n",
      "                : width.getValue());\n",
      "    }\n",
      "\n",
      "    private float retrieveTableWidth(float width) {\n",
      "        if (BorderCollapsePropertyValue.SEPARATE.equals(tableRenderer.<BorderCollapsePropertyValue>getProperty(Property.BORDER_COLLAPSE))) {\n",
      "            width -= (rightBorderMaxWidth + leftBorderMaxWidth);\n",
      "            width -= (numberOfColumns + 1) * horizontalBorderSpacing;\n",
      "        } else {\n",
      "            width -= (rightBorderMaxWidth + leftBorderMaxWidth) / 2;\n",
      "        }\n",
      "        return Math.max(width, 0);\n",
      "    }\n",
      "\n",
      "    private Table getTable() {\n",
      "        return (Table) tableRenderer.getModelElement();\n",
      "    }\n",
      "\n",
      "    //endregion\n",
      "\n",
      "    //region Auto layout utils\n",
      "\n",
      "    private void calculateMinMaxWidths() {\n",
      "        float[] minWidths = new float[numberOfColumns];\n",
      "        float[] maxWidths = new float[numberOfColumns];\n",
      "\n",
      "        for (CellInfo cell : cells) {\n",
      "            cell.setParent(tableRenderer);\n",
      "            MinMaxWidth minMax = cell.getCell().getMinMaxWidth();\n",
      "            if (BorderCollapsePropertyValue.SEPARATE.equals(tableRenderer.<BorderCollapsePropertyValue>getProperty(Property.BORDER_COLLAPSE))) {\n",
      "                minMax.setAdditionalWidth((float) (minMax.getAdditionalWidth() - horizontalBorderSpacing));\n",
      "            } else {\n",
      "                float[] indents = getCellBorderIndents(cell);\n",
      "                minMax.setAdditionalWidth(minMax.getAdditionalWidth() + indents[1] / 2 + indents[3] / 2);\n",
      "            }\n",
      "\n",
      "            if (cell.getColspan() == 1) {\n",
      "                minWidths[cell.getCol()] = Math.max(minMax.getMinWidth(), minWidths[cell.getCol()]);\n",
      "                maxWidths[cell.getCol()] = Math.max(minMax.getMaxWidth(), maxWidths[cell.getCol()]);\n",
      "            } else {\n",
      "                float remainMin = minMax.getMinWidth();\n",
      "                float remainMax = minMax.getMaxWidth();\n",
      "                for (int i = cell.getCol(); i < cell.getCol() + cell.getColspan(); i++) {\n",
      "                    remainMin -= minWidths[i];\n",
      "                    remainMax -= maxWidths[i];\n",
      "                }\n",
      "                if (remainMin > 0) {\n",
      "                    for (int i = cell.getCol(); i < cell.getCol() + cell.getColspan(); i++) {\n",
      "                        minWidths[i] += remainMin / cell.getColspan();\n",
      "                    }\n",
      "                }\n",
      "                if (remainMax > 0) {\n",
      "                    for (int i = cell.getCol(); i < cell.getCol() + cell.getColspan(); i++) {\n",
      "                        maxWidths[i] += remainMax / cell.getColspan();\n",
      "                    }\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "\n",
      "        for (int i = 0; i < widths.length; i++) {\n",
      "            widths[i] = new ColumnWidthData(minWidths[i], maxWidths[i]);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    private float[] getCellBorderIndents(CellInfo cell) {\n",
      "        TableRenderer renderer;\n",
      "        if (cell.region == CellInfo.HEADER) {\n",
      "            renderer = tableRenderer.headerRenderer;\n",
      "        } else if (cell.region == CellInfo.FOOTER) {\n",
      "            renderer = tableRenderer.footerRenderer;\n",
      "        } else {\n",
      "            renderer = tableRenderer;\n",
      "        }\n",
      "        return renderer.bordersHandler.getCellBorderIndents(cell.getRow(), cell.getCol(), cell.getRowspan(), cell.getColspan());\n",
      "    }\n",
      "\n",
      "    private void fillAndSortCells() {\n",
      "        cells = new ArrayList<>();\n",
      "        if (tableRenderer.headerRenderer != null) {\n",
      "            fillRendererCells(tableRenderer.headerRenderer, CellInfo.HEADER);\n",
      "        }\n",
      "        fillRendererCells(tableRenderer, CellInfo.BODY);\n",
      "        if (tableRenderer.footerRenderer != null) {\n",
      "            fillRendererCells(tableRenderer.footerRenderer, CellInfo.FOOTER);\n",
      "        }\n",
      "        // Cells are sorted, because we need to process cells without colspan\n",
      "        // and process from top left to bottom right for other cases.\n",
      "        Collections.sort(cells);\n",
      "    }\n",
      "\n",
      "    private void fillRendererCells(TableRenderer renderer, byte region) {\n",
      "        for (int row = 0; row < renderer.rows.size(); row++) {\n",
      "            for (int col = 0; col < numberOfColumns; col++) {\n",
      "                CellRenderer cell = renderer.rows.get(row)[col];\n",
      "                if (cell != null) {\n",
      "                    cells.add(new CellInfo(cell, row, col, region));\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    private void warn100percent() {\n",
      "        Logger logger = LoggerFactory.getLogger(TableWidths.class);\n",
      "        logger.warn(IoLogMessageConstant.SUM_OF_TABLE_COLUMNS_IS_GREATER_THAN_100);\n",
      "    }\n",
      "\n",
      "    private float[] extractWidths() {\n",
      "        float actualWidth = 0;\n",
      "        layoutMinWidth = 0;\n",
      "        float[] columnWidths = new float[widths.length];\n",
      "        for (int i = 0; i < widths.length; i++) {\n",
      "            assert widths[i].finalWidth >= 0;\n",
      "            columnWidths[i] = widths[i].finalWidth + horizontalBorderSpacing;\n",
      "            actualWidth += widths[i].finalWidth;\n",
      "            layoutMinWidth += widths[i].min + horizontalBorderSpacing;\n",
      "        }\n",
      "        if (actualWidth > tableWidth + MinMaxWidthUtils.getEps() * widths.length) {\n",
      "            Logger logger = LoggerFactory.getLogger(TableWidths.class);\n",
      "            logger.warn(IoLogMessageConstant.TABLE_WIDTH_IS_MORE_THAN_EXPECTED_DUE_TO_MIN_WIDTH);\n",
      "        }\n",
      "        return columnWidths;\n",
      "    }\n",
      "\n",
      "    //endregion\n",
      "\n",
      "    //region Internal classes\n",
      "\n",
      "    @Override\n",
      "    public String toString() {\n",
      "        return \"width=\" + tableWidth + (fixedTableWidth ? \"!!\" : \"\");\n",
      "    }\n",
      "\n",
      "    private static class ColumnWidthData {\n",
      "        final float min;\n",
      "        float max;\n",
      "        float width = 0;\n",
      "        float finalWidth = -1;\n",
      "        boolean isPercent = false;\n",
      "        //true means that this column has cell property based width.\n",
      "        boolean isFixed = false;\n",
      "\n",
      "        ColumnWidthData(float min, float max) {\n",
      "            assert min >= 0;\n",
      "            assert max >= 0;\n",
      "            this.min = min > 0 ? min + MinMaxWidthUtils.getEps() : 0;\n",
      "            // All browsers implement a size limit on the cell's max width.\n",
      "            // This limit is based on KHTML's representation that used 16 bits widths.\n",
      "            this.max = max > 0 ? Math.min(max + MinMaxWidthUtils.getEps(), 32760) : 0;\n",
      "        }\n",
      "\n",
      "        ColumnWidthData setPoints(float width) {\n",
      "            assert !isPercent;\n",
      "            assert this.min <= width;\n",
      "            this.width = Math.max(this.width, width);\n",
      "            return this;\n",
      "        }\n",
      "\n",
      "        ColumnWidthData resetPoints(float width) {\n",
      "            assert this.min <= width;\n",
      "            this.width = width;\n",
      "            this.isPercent = false;\n",
      "            return this;\n",
      "        }\n",
      "\n",
      "        ColumnWidthData addPoints(float width) {\n",
      "            assert !isPercent;\n",
      "            this.width += width;\n",
      "            return this;\n",
      "        }\n",
      "\n",
      "        ColumnWidthData setPercents(float percent) {\n",
      "            if (isPercent) {\n",
      "                width = Math.max(width, percent);\n",
      "            } else {\n",
      "                isPercent = true;\n",
      "                width = percent;\n",
      "            }\n",
      "            isFixed = false;\n",
      "            return this;\n",
      "        }\n",
      "\n",
      "        ColumnWidthData addPercents(float width) {\n",
      "            assert isPercent;\n",
      "            this.width += width;\n",
      "            return this;\n",
      "        }\n",
      "\n",
      "        ColumnWidthData setFixed(boolean fixed) {\n",
      "            this.isFixed = fixed;\n",
      "            return this;\n",
      "        }\n",
      "\n",
      "        boolean isFlexible() {\n",
      "            return !this.isFixed && !this.isPercent;\n",
      "        }\n",
      "\n",
      "        @Override\n",
      "        public String toString() {\n",
      "            return \"w=\" + width +\n",
      "                    (isPercent ? \"%\" : \"pt\") +\n",
      "                    (isFixed ? \" !!\" : \"\") +\n",
      "                    \", min=\" + min +\n",
      "                    \", max=\" + max +\n",
      "                    \", finalWidth=\" + finalWidth;\n",
      "        }\n",
      "    }\n",
      "\n",
      "    static private final UnitValue ZeroWidth = UnitValue.createPointValue(0);\n",
      "\n",
      "    /**\n",
      "     * Gets width of the cell, adding paddings and extra spacing if necessary.\n",
      "     *\n",
      "     * @param cell renderer from which width will be taken.\n",
      "     *             Note that this method will not change original width of the element.\n",
      "     * @param zeroIsValid defines if 0 width is valid\n",
      "     * @return increased width of the renderer\n",
      "     */\n",
      "    private UnitValue getCellWidth(CellRenderer cell, boolean zeroIsValid) {\n",
      "        UnitValue widthValue = new UnitValue(cell.getProperty(Property.WIDTH, UnitValue.createPointValue(-1)));\n",
      "        //zero has special meaning in fixed layout, we shall not add padding to zero value\n",
      "        if (widthValue.getValue() < -AbstractRenderer.EPS) {\n",
      "            return null;\n",
      "        }\n",
      "\n",
      "        if (widthValue.getValue() < AbstractRenderer.EPS) {\n",
      "            return zeroIsValid ? ZeroWidth : null;\n",
      "        } else if (widthValue.isPercentValue()) {\n",
      "            return widthValue;\n",
      "        } else {\n",
      "            widthValue = resolveMinMaxCollision(cell, widthValue);\n",
      "            if (!AbstractRenderer.isBorderBoxSizing(cell)) {\n",
      "                Border[] borders = cell.getBorders();\n",
      "                if (borders[1] != null) {\n",
      "                    widthValue.setValue(widthValue.getValue() +\n",
      "                            ((tableRenderer.bordersHandler instanceof SeparatedTableBorders)\n",
      "                                    ? borders[1].getWidth()\n",
      "                                    : borders[1].getWidth() / 2));\n",
      "                }\n",
      "                if (borders[3] != null) {\n",
      "                    widthValue.setValue(widthValue.getValue() +\n",
      "                            ((tableRenderer.bordersHandler instanceof SeparatedTableBorders)\n",
      "                                    ? borders[3].getWidth()\n",
      "                                    : borders[3].getWidth() / 2));\n",
      "                }\n",
      "                UnitValue[] paddings = cell.getPaddings();\n",
      "                if (!paddings[1].isPointValue()) {\n",
      "                    Logger logger = LoggerFactory.getLogger(TableWidths.class);\n",
      "                    logger.error(MessageFormatUtil.format(IoLogMessageConstant.PROPERTY_IN_PERCENTS_NOT_SUPPORTED,\n",
      "                            Property.PADDING_LEFT));\n",
      "                }\n",
      "                if (!paddings[3].isPointValue()) {\n",
      "                    Logger logger = LoggerFactory.getLogger(TableWidths.class);\n",
      "                    logger.error(MessageFormatUtil.format(IoLogMessageConstant.PROPERTY_IN_PERCENTS_NOT_SUPPORTED,\n",
      "                            Property.PADDING_RIGHT));\n",
      "                }\n",
      "                widthValue.setValue(widthValue.getValue() + paddings[1].getValue() + paddings[3].getValue());\n",
      "            }\n",
      "            return widthValue;\n",
      "        }\n",
      "    }\n",
      "\n",
      "    private UnitValue resolveMinMaxCollision(CellRenderer cell, UnitValue widthValue) {\n",
      "        assert widthValue.isPointValue();\n",
      "\n",
      "        UnitValue minWidthValue = cell.<UnitValue>getProperty(Property.MIN_WIDTH);\n",
      "        if (minWidthValue != null && minWidthValue.isPointValue()\n",
      "                && minWidthValue.getValue() > widthValue.getValue()) {\n",
      "            return minWidthValue;\n",
      "        }\n",
      "        UnitValue maxWidthValue = cell.<UnitValue>getProperty(Property.MAX_WIDTH);\n",
      "        if (maxWidthValue != null && maxWidthValue.isPointValue()\n",
      "                && maxWidthValue.getValue() < widthValue.getValue()) {\n",
      "            return maxWidthValue;\n",
      "        }\n",
      "        return widthValue;\n",
      "    }\n",
      "\n",
      "    static class CellInfo implements Comparable<CellInfo> {\n",
      "        static final byte HEADER = 1;\n",
      "        static final byte BODY = 2;\n",
      "        static final byte FOOTER = 3;\n",
      "\n",
      "        private final CellRenderer cell;\n",
      "        private final int row;\n",
      "        private final int col;\n",
      "        final byte region;\n",
      "\n",
      "        CellInfo(CellRenderer cell, int row, int col, byte region) {\n",
      "            this.cell = cell;\n",
      "            this.region = region;\n",
      "            //we cannot use getModelElement().getCol() or getRow(), because its may be changed during layout.\n",
      "            this.row = row;\n",
      "            this.col = col;\n",
      "        }\n",
      "\n",
      "        CellRenderer getCell() {\n",
      "            return cell;\n",
      "        }\n",
      "\n",
      "        int getCol() {\n",
      "            return col;\n",
      "        }\n",
      "\n",
      "        int getColspan() {\n",
      "            //we cannot use getModelElement().getColspan(), because it may be changed during layout.\n",
      "            return (int) cell.getPropertyAsInteger(Property.COLSPAN);\n",
      "        }\n",
      "\n",
      "        int getRow() {\n",
      "            return row;\n",
      "        }\n",
      "\n",
      "        int getRowspan() {\n",
      "            //we cannot use getModelElement().getRowspan(), because it may be changed during layout.\n",
      "            return (int) cell.getPropertyAsInteger(Property.ROWSPAN);\n",
      "        }\n",
      "\n",
      "        @Override\n",
      "        public int compareTo(CellInfo o) {\n",
      "            if (getColspan() == 1 ^ o.getColspan() == 1) {\n",
      "                return getColspan() - o.getColspan();\n",
      "            }\n",
      "            if (region == o.region && getRow() == o.getRow()) {\n",
      "                return getCol() + getColspan() - o.getCol() - o.getColspan();\n",
      "            }\n",
      "            return region == o.region ? getRow() - o.getRow() : region - o.region;\n",
      "        }\n",
      "\n",
      "        @Override\n",
      "        public String toString() {\n",
      "            String str = MessageFormatUtil.format(\"row={0}, col={1}, rowspan={2}, colspan={3}, \",\n",
      "                    getRow(), getCol(), getRowspan(), getColspan());\n",
      "            if (region == HEADER) {\n",
      "                str += \"header\";\n",
      "            } else if (region == BODY) {\n",
      "                str += \"body\";\n",
      "            } else if (region == FOOTER) {\n",
      "                str += \"footer\";\n",
      "            }\n",
      "            return str;\n",
      "        }\n",
      "\n",
      "        public void setParent(TableRenderer tableRenderer) {\n",
      "            if (region == HEADER) {\n",
      "                cell.setParent(tableRenderer.headerRenderer);\n",
      "            } else if (region == FOOTER) {\n",
      "                cell.setParent(tableRenderer.footerRenderer);\n",
      "            } else {\n",
      "                cell.setParent(tableRenderer);\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    //endregion\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      "    This file is part of the iText (R) project.\n",
      "    Copyright (c) 1998-2024 Apryse Group NV\n",
      "    Authors: Apryse Software.\n",
      "\n",
      "    This program is offered under a commercial and under the AGPL license.\n",
      "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n",
      "\n",
      "    AGPL licensing:\n",
      "    This program is free software: you can redistribute it and/or modify\n",
      "    it under the terms of the GNU Affero General Public License as published by\n",
      "    the Free Software Foundation, either version 3 of the License, or\n",
      "    (at your option) any later version.\n",
      "\n",
      "    This program is distributed in the hope that it will be useful,\n",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n",
      "    GNU Affero General Public License for more details.\n",
      "\n",
      "    You should have received a copy of the GNU Affero General Public License\n",
      "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n",
      " */\n",
      "package com.itextpdf.layout.renderer;\n",
      "\n",
      "import com.itextpdf.io.logs.IoLogMessageConstant;\n",
      "import com.itextpdf.kernel.colors.ColorConstants;\n",
      "import com.itextpdf.kernel.pdf.PdfDocument;\n",
      "import com.itextpdf.kernel.pdf.PdfWriter;\n",
      "import com.itextpdf.layout.Document;\n",
      "import com.itextpdf.layout.borders.SolidBorder;\n",
      "import com.itextpdf.layout.element.Cell;\n",
      "import com.itextpdf.layout.element.Paragraph;\n",
      "import com.itextpdf.layout.element.Table;\n",
      "import com.itextpdf.layout.properties.HorizontalAlignment;\n",
      "import com.itextpdf.layout.properties.Property;\n",
      "import com.itextpdf.layout.properties.UnitValue;\n",
      "import com.itextpdf.test.ExtendedITextTest;\n",
      "import com.itextpdf.test.annotations.LogMessage;\n",
      "import com.itextpdf.test.annotations.LogMessages;\n",
      "import com.itextpdf.test.annotations.type.UnitTest;\n",
      "import org.junit.Test;\n",
      "import org.junit.experimental.categories.Category;\n",
      "\n",
      "import java.io.ByteArrayOutputStream;\n",
      "import java.util.List;\n",
      "\n",
      "@Category(UnitTest.class)\n",
      "public class TableWidthsTest  extends ExtendedITextTest {\n",
      "\n",
      "    @Test\n",
      "    public void testprocessCellRemainWidth01() {\n",
      "        TableRenderer tableRenderer = createTableRendererWithDiffColspan(150);\n",
      "\n",
      "        TableWidths tableWidths = new TableWidths(tableRenderer, 150, true, 15, 15);\n",
      "        List<TableWidths.CellInfo> cells = tableWidths.autoLayoutCustom();\n",
      "\n",
      "        for(TableWidths.CellInfo cell : cells) {\n",
      "            tableWidths.processCell(cell);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testProcessCellsRemainWidth02() {\n",
      "        TableRenderer tableRenderer = createTableRendererWithDiffColspan(320);\n",
      "\n",
      "        TableWidths tableWidths = new TableWidths(tableRenderer, 150, true, 15, 15);\n",
      "        List<TableWidths.CellInfo> cells = tableWidths.autoLayoutCustom();\n",
      "\n",
      "        for(TableWidths.CellInfo cell : cells) {\n",
      "            tableWidths.processCell(cell);\n",
      "        }\n",
      "\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    @LogMessages(messages = {@LogMessage(messageTemplate = IoLogMessageConstant.SUM_OF_TABLE_COLUMNS_IS_GREATER_THAN_100, count=2)})\n",
      "    public void testSumOfColumnsIsGreaterThan100(){\n",
      "        PdfDocument pdfDoc = new PdfDocument(new PdfWriter(new ByteArrayOutputStream()));\n",
      "        Document doc = new Document(pdfDoc);\n",
      "        Table table = new Table(UnitValue.createPercentArray(new float[]{2, 1, 1}));\n",
      "        table.setWidth(UnitValue.createPercentValue(80));\n",
      "        table.setHorizontalAlignment(HorizontalAlignment.CENTER);\n",
      "        Cell c1 = new Cell(1, 3);\n",
      "        c1.setProperty(Property.WIDTH, UnitValue.createPercentValue(200));\n",
      "        c1.add(new Paragraph(\"Cell with colspan 3\"));\n",
      "        table.addCell(c1);\n",
      "        table.addCell(new Cell(2, 1).add(new Paragraph(\"Cell with rowspan 2\")));\n",
      "        table.addCell(new Cell().add(new Paragraph(\"row 1; cell 1\")).setMinWidth(200));\n",
      "        table.addCell(new Cell().add(new Paragraph(\"row 1; cell 2\")).setMaxWidth(50));\n",
      "        table.addCell(\"row 2; cell 1\");\n",
      "        table.addCell(\"row 2; cell 2\");\n",
      "\n",
      "        TableRenderer tableRenderer = new TableRenderer(table);\n",
      "        CellRenderer[] row1 = {new CellRenderer(table.getCell(0,0)), null, null};\n",
      "        CellRenderer[] row2 = {null, new CellRenderer(table.getCell(1,1)), new CellRenderer(table.getCell(1,2))};\n",
      "        CellRenderer[] row3 = {new CellRenderer(table.getCell(1,0)), new CellRenderer(table.getCell(2,1)),  new CellRenderer(table.getCell(2,2))};\n",
      "        tableRenderer.rows.set(0, row1);\n",
      "        tableRenderer.rows.set(1, row2);\n",
      "        tableRenderer.rows.set(2, row3);\n",
      "\n",
      "        table.setBorder(new SolidBorder(ColorConstants.GREEN, 5));\n",
      "        tableRenderer.bordersHandler = new SeparatedTableBorders(tableRenderer.rows, table.getNumberOfColumns(), tableRenderer.getBorders());\n",
      "\n",
      "        TableWidths tableWidths = new TableWidths(tableRenderer, 150, true, 15, 15);\n",
      "        List<TableWidths.CellInfo> cells = tableWidths.autoLayoutCustom();\n",
      "\n",
      "        for(TableWidths.CellInfo cell : cells) {\n",
      "            tableWidths.processCell(cell);\n",
      "        }\n",
      "\n",
      "        doc.add(table);\n",
      "        doc.close();\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testProcessCellPointWidthValue() {\n",
      "        Table table = new Table(UnitValue.createPercentArray(2)).useAllAvailableWidth();\n",
      "        table.setMarginTop(5);\n",
      "        for(int i = 0; i < 4; i++) {\n",
      "            Cell cell = new Cell().add(new Paragraph(\"smth\" + i));\n",
      "            cell.setProperty(Property.WIDTH, UnitValue.createPointValue(250));\n",
      "            table.addCell(cell);\n",
      "        }\n",
      "\n",
      "        TableRenderer tableRenderer = new TableRenderer(table);\n",
      "        CellRenderer[] row1 = {new CellRenderer(table.getCell(0,0)), new CellRenderer(table.getCell(0,1))};\n",
      "        CellRenderer[] row2 = {new CellRenderer(table.getCell(1,0)), new CellRenderer(table.getCell(1,1))};\n",
      "        tableRenderer.rows.set(0, row1);\n",
      "        tableRenderer.rows.set(1, row2);\n",
      "\n",
      "        table.setBorder(new SolidBorder(ColorConstants.GREEN, 5));\n",
      "        tableRenderer.bordersHandler = new SeparatedTableBorders(tableRenderer.rows, table.getNumberOfColumns(), tableRenderer.getBorders());\n",
      "\n",
      "        TableWidths tableWidths = new TableWidths(tableRenderer, 150, true, 15, 15);\n",
      "        List<TableWidths.CellInfo> cells = tableWidths.autoLayoutCustom();\n",
      "\n",
      "        for(TableWidths.CellInfo cell : cells) {\n",
      "            tableWidths.processCell(cell);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testProcessCellsWithPercentWidth01() {\n",
      "        PdfDocument pdfDoc = new PdfDocument(new PdfWriter(new ByteArrayOutputStream()));\n",
      "        Document doc = new Document(pdfDoc);\n",
      "        doc.add(new Paragraph(\"With 2 columns:\"));\n",
      "        Table table = new Table(UnitValue.createPercentArray(2)).useAllAvailableWidth();\n",
      "        table.setMarginTop(5);\n",
      "        for(int i = 0; i < 4; i++) {\n",
      "            Cell cell = new Cell().add(new Paragraph(\"smth\" + i));\n",
      "            cell.setProperty(Property.WIDTH, UnitValue.createPercentValue(50));\n",
      "            table.addCell(cell);\n",
      "        }\n",
      "\n",
      "        TableRenderer tableRenderer = new TableRenderer(table);\n",
      "        CellRenderer[] row1 = {new CellRenderer(table.getCell(0,0)), new CellRenderer(table.getCell(0,1))};\n",
      "        CellRenderer[] row2 = {new CellRenderer(table.getCell(1,0)), new CellRenderer(table.getCell(1,1))};\n",
      "        tableRenderer.rows.set(0, row1);\n",
      "        tableRenderer.rows.set(1, row2);\n",
      "\n",
      "        table.setBorder(new SolidBorder(ColorConstants.GREEN, 5));\n",
      "        tableRenderer.bordersHandler = new SeparatedTableBorders(tableRenderer.rows, table.getNumberOfColumns(), tableRenderer.getBorders());\n",
      "\n",
      "        TableWidths tableWidths = new TableWidths(tableRenderer, 150, true, 15, 15);\n",
      "        List<TableWidths.CellInfo> cells = tableWidths.autoLayoutCustom();\n",
      "\n",
      "        for(TableWidths.CellInfo cell : cells) {\n",
      "            tableWidths.processCell(cell);\n",
      "        }\n",
      "\n",
      "        tableWidths.recalculate(25);\n",
      "\n",
      "        doc.close();\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testProcessCellsWithPercentWidth02() {\n",
      "        PdfDocument pdfDoc = new PdfDocument(new PdfWriter(new ByteArrayOutputStream()));\n",
      "        Document doc = new Document(pdfDoc);\n",
      "        Table table = new Table(UnitValue.createPercentArray(new float[]{2, 1, 1}));\n",
      "        table.setWidth(UnitValue.createPercentValue(80));\n",
      "        table.setHorizontalAlignment(HorizontalAlignment.CENTER);\n",
      "        Cell c1 = new Cell(1, 3);\n",
      "        c1.setProperty(Property.WIDTH, UnitValue.createPercentValue(90));\n",
      "        c1.add(new Paragraph(\"Cell with colspan 3\"));\n",
      "        table.addCell(c1);\n",
      "        Cell c2 = new Cell(2, 1);\n",
      "        c2.add(new Paragraph(\"Cell with rowspan 2\"));\n",
      "        c2.setProperty(Property.WIDTH, UnitValue.createPercentValue(50));\n",
      "        table.addCell(c2);\n",
      "        table.addCell(new Cell().add(new Paragraph(\"row 1; cell 1\")).setMinWidth(200));\n",
      "        table.addCell(new Cell().add(new Paragraph(\"row 1; cell 2\")).setMaxWidth(50));\n",
      "        table.addCell(\"row 2; cell 1\");\n",
      "        table.addCell(\"row 2; cell 2\");\n",
      "\n",
      "        TableRenderer tableRenderer = new TableRenderer(table);\n",
      "        CellRenderer[] row1 = {new CellRenderer(table.getCell(0,0)), null, null};\n",
      "        CellRenderer[] row2 = {null, new CellRenderer(table.getCell(1,1)), new CellRenderer(table.getCell(1,2))};\n",
      "        CellRenderer[] row3 = {new CellRenderer(table.getCell(1,0)), new CellRenderer(table.getCell(2,1)),  new CellRenderer(table.getCell(2,2))};\n",
      "        tableRenderer.rows.set(0, row1);\n",
      "        tableRenderer.rows.set(1, row2);\n",
      "        tableRenderer.rows.set(2, row3);\n",
      "\n",
      "        table.setBorder(new SolidBorder(ColorConstants.GREEN, 5));\n",
      "        tableRenderer.bordersHandler = new SeparatedTableBorders(tableRenderer.rows, table.getNumberOfColumns(), tableRenderer.getBorders());\n",
      "\n",
      "        TableWidths tableWidths = new TableWidths(tableRenderer, 150, true, 15, 15);\n",
      "        List<TableWidths.CellInfo> cells = tableWidths.autoLayoutCustom();\n",
      "\n",
      "        for(TableWidths.CellInfo cell : cells) {\n",
      "            tableWidths.processCell(cell);\n",
      "        }\n",
      "\n",
      "        tableWidths.recalculate(200);\n",
      "\n",
      "        doc.add(table);\n",
      "        doc.close();\n",
      "    }\n",
      "\n",
      "    private Table createTableWithDiffColspan(int maxWidth) {\n",
      "        Table table = new Table(UnitValue.createPercentArray(new float[]{2, 1, 1}));\n",
      "        table.setWidth(UnitValue.createPercentValue(80));\n",
      "        table.setHorizontalAlignment(HorizontalAlignment.CENTER);\n",
      "        Cell c1 = new Cell(1, 3);\n",
      "        c1.setProperty(Property.WIDTH, UnitValue.createPointValue(maxWidth));\n",
      "        c1.add(new Paragraph(\"Cell with colspan 3\"));\n",
      "        table.addCell(c1);\n",
      "        table.addCell(new Cell(2, 1).add(new Paragraph(\"Cell with rowspan 2\")));\n",
      "        table.addCell(new Cell().add(new Paragraph(\"row 1; cell 1\")).setMinWidth(200));\n",
      "        table.addCell(new Cell().add(new Paragraph(\"row 1; cell 2\")).setMaxWidth(50));\n",
      "        table.addCell(\"row 2; cell 1\");\n",
      "        table.addCell(\"row 2; cell 2\");\n",
      "\n",
      "        table.setBorder(new SolidBorder(ColorConstants.GREEN, 5));\n",
      "\n",
      "        return table;\n",
      "    }\n",
      "\n",
      "    private TableRenderer createTableRendererWithDiffColspan(int maxWidth) {\n",
      "        Table table = createTableWithDiffColspan(maxWidth);\n",
      "        TableRenderer tableRenderer = new TableRenderer(table);\n",
      "        CellRenderer[] row1 = {new CellRenderer(table.getCell(0,0)), null, null};\n",
      "        CellRenderer[] row2 = {null, new CellRenderer(table.getCell(1,1)), new CellRenderer(table.getCell(1,2))};\n",
      "        CellRenderer[] row3 = {new CellRenderer(table.getCell(1,0)), new CellRenderer(table.getCell(2,1)),  new CellRenderer(table.getCell(2,2))};\n",
      "        tableRenderer.rows.set(0, row1);\n",
      "        tableRenderer.rows.set(1, row2);\n",
      "        tableRenderer.rows.set(2, row3);\n",
      "\n",
      "        tableRenderer.bordersHandler = new SeparatedTableBorders(tableRenderer.rows, table.getNumberOfColumns(), tableRenderer.getBorders());\n",
      "\n",
      "        return tableRenderer;\n",
      "    }\n",
      "\n",
      "}\n"
    ],
    "method_lines_dic": {
      "TableWidths::::hasFixedLayout()": [
        76,
        78
      ],
      "TableWidths::::layout()": [
        80,
        86
      ],
      "TableWidths::::getMinWidth()": [
        88,
        90
      ],
      "TableWidths::::autoLayout()": [
        92,
        111
      ],
      "TableWidths::::autoLayoutCustom()": [
        113,
        118
      ],
      "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)": [
        120,
        197
      ],
      "TableWidths::::processColumns()": [
        199,
        219
      ],
      "TableWidths::::recalculate(float)": [
        221,
        409
      ],
      "TableWidths::::processCellsRemainWidth(com.itextpdf.layout.renderer.TableWidths.CellInfo,com.itextpdf.layout.properties.UnitValue)": [
        411,
        457
      ],
      "TableWidths::::fixedLayout()": [
        459,
        560
      ],
      "TableWidths::::calculateTableWidth(float,boolean)": [
        564,
        606
      ],
      "TableWidths::::retrieveTableWidth(com.itextpdf.layout.properties.UnitValue,float)": [
        608,
        613
      ],
      "TableWidths::::retrieveTableWidth(float)": [
        615,
        623
      ],
      "TableWidths::::getTable()": [
        625,
        627
      ],
      "TableWidths::::calculateMinMaxWidths()": [
        633,
        673
      ],
      "TableWidths::::getCellBorderIndents(com.itextpdf.layout.renderer.TableWidths.CellInfo)": [
        675,
        685
      ],
      "TableWidths::::fillAndSortCells()": [
        687,
        699
      ],
      "TableWidths::::fillRendererCells(com.itextpdf.layout.renderer.TableRenderer,byte)": [
        701,
        710
      ],
      "TableWidths::::warn100percent()": [
        712,
        715
      ],
      "TableWidths::::extractWidths()": [
        717,
        732
      ],
      "TableWidths::::toString()": [
        738,
        741
      ],
      "TableWidths.ColumnWidthData::::setPoints(float)": [
        761,
        766
      ],
      "TableWidths.ColumnWidthData::::resetPoints(float)": [
        768,
        773
      ],
      "TableWidths.ColumnWidthData::::addPoints(float)": [
        775,
        779
      ],
      "TableWidths.ColumnWidthData::::setPercents(float)": [
        781,
        790
      ],
      "TableWidths.ColumnWidthData::::addPercents(float)": [
        792,
        796
      ],
      "TableWidths.ColumnWidthData::::setFixed(boolean)": [
        798,
        801
      ],
      "TableWidths.ColumnWidthData::::isFlexible()": [
        803,
        805
      ],
      "TableWidths.ColumnWidthData::::toString()": [
        807,
        815
      ],
      "TableWidths::::getCellWidth(com.itextpdf.layout.renderer.CellRenderer,boolean)": [
        828,
        870
      ],
      "TableWidths::::resolveMinMaxCollision(com.itextpdf.layout.renderer.CellRenderer,com.itextpdf.layout.properties.UnitValue)": [
        872,
        886
      ],
      "TableWidths.CellInfo::::getCell()": [
        906,
        908
      ],
      "TableWidths.CellInfo::::getCol()": [
        910,
        912
      ],
      "TableWidths.CellInfo::::getColspan()": [
        914,
        917
      ],
      "TableWidths.CellInfo::::getRow()": [
        919,
        921
      ],
      "TableWidths.CellInfo::::getRowspan()": [
        923,
        926
      ],
      "TableWidths.CellInfo::::compareTo(com.itextpdf.layout.renderer.TableWidths.CellInfo)": [
        928,
        937
      ],
      "TableWidths.CellInfo::::toString()": [
        939,
        951
      ],
      "TableWidths.CellInfo::::setParent(com.itextpdf.layout.renderer.TableRenderer)": [
        953,
        961
      ]
    },
    "test_method_lines_dic": {
      "TableWidthsTest::::testprocessCellRemainWidth01()": [
        50,
        60
      ],
      "TableWidthsTest::::testProcessCellsRemainWidth02()": [
        62,
        73
      ],
      "TableWidthsTest::::testSumOfColumnsIsGreaterThan100()": [
        75,
        113
      ],
      "TableWidthsTest::::testProcessCellPointWidthValue()": [
        115,
        140
      ],
      "TableWidthsTest::::testProcessCellsWithPercentWidth01()": [
        142,
        174
      ],
      "TableWidthsTest::::testProcessCellsWithPercentWidth02()": [
        176,
        218
      ],
      "TableWidthsTest::::createTableWithDiffColspan(int)": [
        220,
        237
      ],
      "TableWidthsTest::::createTableRendererWithDiffColspan(int)": [
        239,
        252
      ]
    },
    "reverse_method_lines_dic": {
      "76": "TableWidths::::hasFixedLayout()",
      "77": "TableWidths::::hasFixedLayout()",
      "78": "TableWidths::::hasFixedLayout()",
      "80": "TableWidths::::layout()",
      "81": "TableWidths::::layout()",
      "82": "TableWidths::::layout()",
      "83": "TableWidths::::layout()",
      "84": "TableWidths::::layout()",
      "85": "TableWidths::::layout()",
      "86": "TableWidths::::layout()",
      "88": "TableWidths::::getMinWidth()",
      "89": "TableWidths::::getMinWidth()",
      "90": "TableWidths::::getMinWidth()",
      "92": "TableWidths::::autoLayout()",
      "93": "TableWidths::::autoLayout()",
      "94": "TableWidths::::autoLayout()",
      "95": "TableWidths::::autoLayout()",
      "96": "TableWidths::::autoLayout()",
      "97": "TableWidths::::autoLayout()",
      "98": "TableWidths::::autoLayout()",
      "99": "TableWidths::::autoLayout()",
      "100": "TableWidths::::autoLayout()",
      "101": "TableWidths::::autoLayout()",
      "102": "TableWidths::::autoLayout()",
      "103": "TableWidths::::autoLayout()",
      "104": "TableWidths::::autoLayout()",
      "105": "TableWidths::::autoLayout()",
      "106": "TableWidths::::autoLayout()",
      "107": "TableWidths::::autoLayout()",
      "108": "TableWidths::::autoLayout()",
      "109": "TableWidths::::autoLayout()",
      "110": "TableWidths::::autoLayout()",
      "111": "TableWidths::::autoLayout()",
      "113": "TableWidths::::autoLayoutCustom()",
      "114": "TableWidths::::autoLayoutCustom()",
      "115": "TableWidths::::autoLayoutCustom()",
      "116": "TableWidths::::autoLayoutCustom()",
      "117": "TableWidths::::autoLayoutCustom()",
      "118": "TableWidths::::autoLayoutCustom()",
      "120": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "121": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "122": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "123": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "124": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "125": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "126": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "127": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "128": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "129": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "130": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "131": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "132": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "133": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "134": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "135": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "136": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "137": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "138": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "139": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "140": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "141": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "142": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "143": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "144": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "145": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "146": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "147": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "148": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "149": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "150": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "151": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "152": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "153": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "154": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "155": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "156": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "157": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "158": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "159": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "160": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "161": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "162": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "163": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "164": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "165": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "166": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "167": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "168": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "169": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "170": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "171": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "172": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "173": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "174": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "175": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "176": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "177": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "178": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "179": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "180": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "181": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "182": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "183": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "184": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "185": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "186": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "187": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "188": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "189": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "190": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "191": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "192": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "193": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "194": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "195": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "196": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "197": "TableWidths::::processCell(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "199": "TableWidths::::processColumns()",
      "200": "TableWidths::::processColumns()",
      "201": "TableWidths::::processColumns()",
      "202": "TableWidths::::processColumns()",
      "203": "TableWidths::::processColumns()",
      "204": "TableWidths::::processColumns()",
      "205": "TableWidths::::processColumns()",
      "206": "TableWidths::::processColumns()",
      "207": "TableWidths::::processColumns()",
      "208": "TableWidths::::processColumns()",
      "209": "TableWidths::::processColumns()",
      "210": "TableWidths::::processColumns()",
      "211": "TableWidths::::processColumns()",
      "212": "TableWidths::::processColumns()",
      "213": "TableWidths::::processColumns()",
      "214": "TableWidths::::processColumns()",
      "215": "TableWidths::::processColumns()",
      "216": "TableWidths::::processColumns()",
      "217": "TableWidths::::processColumns()",
      "218": "TableWidths::::processColumns()",
      "219": "TableWidths::::processColumns()",
      "221": "TableWidths::::recalculate(float)",
      "222": "TableWidths::::recalculate(float)",
      "223": "TableWidths::::recalculate(float)",
      "224": "TableWidths::::recalculate(float)",
      "225": "TableWidths::::recalculate(float)",
      "226": "TableWidths::::recalculate(float)",
      "227": "TableWidths::::recalculate(float)",
      "228": "TableWidths::::recalculate(float)",
      "229": "TableWidths::::recalculate(float)",
      "230": "TableWidths::::recalculate(float)",
      "231": "TableWidths::::recalculate(float)",
      "232": "TableWidths::::recalculate(float)",
      "233": "TableWidths::::recalculate(float)",
      "234": "TableWidths::::recalculate(float)",
      "235": "TableWidths::::recalculate(float)",
      "236": "TableWidths::::recalculate(float)",
      "237": "TableWidths::::recalculate(float)",
      "238": "TableWidths::::recalculate(float)",
      "239": "TableWidths::::recalculate(float)",
      "240": "TableWidths::::recalculate(float)",
      "241": "TableWidths::::recalculate(float)",
      "242": "TableWidths::::recalculate(float)",
      "243": "TableWidths::::recalculate(float)",
      "244": "TableWidths::::recalculate(float)",
      "245": "TableWidths::::recalculate(float)",
      "246": "TableWidths::::recalculate(float)",
      "247": "TableWidths::::recalculate(float)",
      "248": "TableWidths::::recalculate(float)",
      "249": "TableWidths::::recalculate(float)",
      "250": "TableWidths::::recalculate(float)",
      "251": "TableWidths::::recalculate(float)",
      "252": "TableWidths::::recalculate(float)",
      "253": "TableWidths::::recalculate(float)",
      "254": "TableWidths::::recalculate(float)",
      "255": "TableWidths::::recalculate(float)",
      "256": "TableWidths::::recalculate(float)",
      "257": "TableWidths::::recalculate(float)",
      "258": "TableWidths::::recalculate(float)",
      "259": "TableWidths::::recalculate(float)",
      "260": "TableWidths::::recalculate(float)",
      "261": "TableWidths::::recalculate(float)",
      "262": "TableWidths::::recalculate(float)",
      "263": "TableWidths::::recalculate(float)",
      "264": "TableWidths::::recalculate(float)",
      "265": "TableWidths::::recalculate(float)",
      "266": "TableWidths::::recalculate(float)",
      "267": "TableWidths::::recalculate(float)",
      "268": "TableWidths::::recalculate(float)",
      "269": "TableWidths::::recalculate(float)",
      "270": "TableWidths::::recalculate(float)",
      "271": "TableWidths::::recalculate(float)",
      "272": "TableWidths::::recalculate(float)",
      "273": "TableWidths::::recalculate(float)",
      "274": "TableWidths::::recalculate(float)",
      "275": "TableWidths::::recalculate(float)",
      "276": "TableWidths::::recalculate(float)",
      "277": "TableWidths::::recalculate(float)",
      "278": "TableWidths::::recalculate(float)",
      "279": "TableWidths::::recalculate(float)",
      "280": "TableWidths::::recalculate(float)",
      "281": "TableWidths::::recalculate(float)",
      "282": "TableWidths::::recalculate(float)",
      "283": "TableWidths::::recalculate(float)",
      "284": "TableWidths::::recalculate(float)",
      "285": "TableWidths::::recalculate(float)",
      "286": "TableWidths::::recalculate(float)",
      "287": "TableWidths::::recalculate(float)",
      "288": "TableWidths::::recalculate(float)",
      "289": "TableWidths::::recalculate(float)",
      "290": "TableWidths::::recalculate(float)",
      "291": "TableWidths::::recalculate(float)",
      "292": "TableWidths::::recalculate(float)",
      "293": "TableWidths::::recalculate(float)",
      "294": "TableWidths::::recalculate(float)",
      "295": "TableWidths::::recalculate(float)",
      "296": "TableWidths::::recalculate(float)",
      "297": "TableWidths::::recalculate(float)",
      "298": "TableWidths::::recalculate(float)",
      "299": "TableWidths::::recalculate(float)",
      "300": "TableWidths::::recalculate(float)",
      "301": "TableWidths::::recalculate(float)",
      "302": "TableWidths::::recalculate(float)",
      "303": "TableWidths::::recalculate(float)",
      "304": "TableWidths::::recalculate(float)",
      "305": "TableWidths::::recalculate(float)",
      "306": "TableWidths::::recalculate(float)",
      "307": "TableWidths::::recalculate(float)",
      "308": "TableWidths::::recalculate(float)",
      "309": "TableWidths::::recalculate(float)",
      "310": "TableWidths::::recalculate(float)",
      "311": "TableWidths::::recalculate(float)",
      "312": "TableWidths::::recalculate(float)",
      "313": "TableWidths::::recalculate(float)",
      "314": "TableWidths::::recalculate(float)",
      "315": "TableWidths::::recalculate(float)",
      "316": "TableWidths::::recalculate(float)",
      "317": "TableWidths::::recalculate(float)",
      "318": "TableWidths::::recalculate(float)",
      "319": "TableWidths::::recalculate(float)",
      "320": "TableWidths::::recalculate(float)",
      "321": "TableWidths::::recalculate(float)",
      "322": "TableWidths::::recalculate(float)",
      "323": "TableWidths::::recalculate(float)",
      "324": "TableWidths::::recalculate(float)",
      "325": "TableWidths::::recalculate(float)",
      "326": "TableWidths::::recalculate(float)",
      "327": "TableWidths::::recalculate(float)",
      "328": "TableWidths::::recalculate(float)",
      "329": "TableWidths::::recalculate(float)",
      "330": "TableWidths::::recalculate(float)",
      "331": "TableWidths::::recalculate(float)",
      "332": "TableWidths::::recalculate(float)",
      "333": "TableWidths::::recalculate(float)",
      "334": "TableWidths::::recalculate(float)",
      "335": "TableWidths::::recalculate(float)",
      "336": "TableWidths::::recalculate(float)",
      "337": "TableWidths::::recalculate(float)",
      "338": "TableWidths::::recalculate(float)",
      "339": "TableWidths::::recalculate(float)",
      "340": "TableWidths::::recalculate(float)",
      "341": "TableWidths::::recalculate(float)",
      "342": "TableWidths::::recalculate(float)",
      "343": "TableWidths::::recalculate(float)",
      "344": "TableWidths::::recalculate(float)",
      "345": "TableWidths::::recalculate(float)",
      "346": "TableWidths::::recalculate(float)",
      "347": "TableWidths::::recalculate(float)",
      "348": "TableWidths::::recalculate(float)",
      "349": "TableWidths::::recalculate(float)",
      "350": "TableWidths::::recalculate(float)",
      "351": "TableWidths::::recalculate(float)",
      "352": "TableWidths::::recalculate(float)",
      "353": "TableWidths::::recalculate(float)",
      "354": "TableWidths::::recalculate(float)",
      "355": "TableWidths::::recalculate(float)",
      "356": "TableWidths::::recalculate(float)",
      "357": "TableWidths::::recalculate(float)",
      "358": "TableWidths::::recalculate(float)",
      "359": "TableWidths::::recalculate(float)",
      "360": "TableWidths::::recalculate(float)",
      "361": "TableWidths::::recalculate(float)",
      "362": "TableWidths::::recalculate(float)",
      "363": "TableWidths::::recalculate(float)",
      "364": "TableWidths::::recalculate(float)",
      "365": "TableWidths::::recalculate(float)",
      "366": "TableWidths::::recalculate(float)",
      "367": "TableWidths::::recalculate(float)",
      "368": "TableWidths::::recalculate(float)",
      "369": "TableWidths::::recalculate(float)",
      "370": "TableWidths::::recalculate(float)",
      "371": "TableWidths::::recalculate(float)",
      "372": "TableWidths::::recalculate(float)",
      "373": "TableWidths::::recalculate(float)",
      "374": "TableWidths::::recalculate(float)",
      "375": "TableWidths::::recalculate(float)",
      "376": "TableWidths::::recalculate(float)",
      "377": "TableWidths::::recalculate(float)",
      "378": "TableWidths::::recalculate(float)",
      "379": "TableWidths::::recalculate(float)",
      "380": "TableWidths::::recalculate(float)",
      "381": "TableWidths::::recalculate(float)",
      "382": "TableWidths::::recalculate(float)",
      "383": "TableWidths::::recalculate(float)",
      "384": "TableWidths::::recalculate(float)",
      "385": "TableWidths::::recalculate(float)",
      "386": "TableWidths::::recalculate(float)",
      "387": "TableWidths::::recalculate(float)",
      "388": "TableWidths::::recalculate(float)",
      "389": "TableWidths::::recalculate(float)",
      "390": "TableWidths::::recalculate(float)",
      "391": "TableWidths::::recalculate(float)",
      "392": "TableWidths::::recalculate(float)",
      "393": "TableWidths::::recalculate(float)",
      "394": "TableWidths::::recalculate(float)",
      "395": "TableWidths::::recalculate(float)",
      "396": "TableWidths::::recalculate(float)",
      "397": "TableWidths::::recalculate(float)",
      "398": "TableWidths::::recalculate(float)",
      "399": "TableWidths::::recalculate(float)",
      "400": "TableWidths::::recalculate(float)",
      "401": "TableWidths::::recalculate(float)",
      "402": "TableWidths::::recalculate(float)",
      "403": "TableWidths::::recalculate(float)",
      "404": "TableWidths::::recalculate(float)",
      "405": "TableWidths::::recalculate(float)",
      "406": "TableWidths::::recalculate(float)",
      "407": "TableWidths::::recalculate(float)",
      "408": "TableWidths::::recalculate(float)",
      "409": "TableWidths::::recalculate(float)",
      "411": "TableWidths::::processCellsRemainWidth(com.itextpdf.layout.renderer.TableWidths.CellInfo,com.itextpdf.layout.properties.UnitValue)",
      "412": "TableWidths::::processCellsRemainWidth(com.itextpdf.layout.renderer.TableWidths.CellInfo,com.itextpdf.layout.properties.UnitValue)",
      "413": "TableWidths::::processCellsRemainWidth(com.itextpdf.layout.renderer.TableWidths.CellInfo,com.itextpdf.layout.properties.UnitValue)",
      "414": "TableWidths::::processCellsRemainWidth(com.itextpdf.layout.renderer.TableWidths.CellInfo,com.itextpdf.layout.properties.UnitValue)",
      "415": "TableWidths::::processCellsRemainWidth(com.itextpdf.layout.renderer.TableWidths.CellInfo,com.itextpdf.layout.properties.UnitValue)",
      "416": "TableWidths::::processCellsRemainWidth(com.itextpdf.layout.renderer.TableWidths.CellInfo,com.itextpdf.layout.properties.UnitValue)",
      "417": "TableWidths::::processCellsRemainWidth(com.itextpdf.layout.renderer.TableWidths.CellInfo,com.itextpdf.layout.properties.UnitValue)",
      "418": "TableWidths::::processCellsRemainWidth(com.itextpdf.layout.renderer.TableWidths.CellInfo,com.itextpdf.layout.properties.UnitValue)",
      "419": "TableWidths::::processCellsRemainWidth(com.itextpdf.layout.renderer.TableWidths.CellInfo,com.itextpdf.layout.properties.UnitValue)",
      "420": "TableWidths::::processCellsRemainWidth(com.itextpdf.layout.renderer.TableWidths.CellInfo,com.itextpdf.layout.properties.UnitValue)",
      "421": "TableWidths::::processCellsRemainWidth(com.itextpdf.layout.renderer.TableWidths.CellInfo,com.itextpdf.layout.properties.UnitValue)",
      "422": "TableWidths::::processCellsRemainWidth(com.itextpdf.layout.renderer.TableWidths.CellInfo,com.itextpdf.layout.properties.UnitValue)",
      "423": "TableWidths::::processCellsRemainWidth(com.itextpdf.layout.renderer.TableWidths.CellInfo,com.itextpdf.layout.properties.UnitValue)",
      "424": "TableWidths::::processCellsRemainWidth(com.itextpdf.layout.renderer.TableWidths.CellInfo,com.itextpdf.layout.properties.UnitValue)",
      "425": "TableWidths::::processCellsRemainWidth(com.itextpdf.layout.renderer.TableWidths.CellInfo,com.itextpdf.layout.properties.UnitValue)",
      "426": "TableWidths::::processCellsRemainWidth(com.itextpdf.layout.renderer.TableWidths.CellInfo,com.itextpdf.layout.properties.UnitValue)",
      "427": "TableWidths::::processCellsRemainWidth(com.itextpdf.layout.renderer.TableWidths.CellInfo,com.itextpdf.layout.properties.UnitValue)",
      "428": "TableWidths::::processCellsRemainWidth(com.itextpdf.layout.renderer.TableWidths.CellInfo,com.itextpdf.layout.properties.UnitValue)",
      "429": "TableWidths::::processCellsRemainWidth(com.itextpdf.layout.renderer.TableWidths.CellInfo,com.itextpdf.layout.properties.UnitValue)",
      "430": "TableWidths::::processCellsRemainWidth(com.itextpdf.layout.renderer.TableWidths.CellInfo,com.itextpdf.layout.properties.UnitValue)",
      "431": "TableWidths::::processCellsRemainWidth(com.itextpdf.layout.renderer.TableWidths.CellInfo,com.itextpdf.layout.properties.UnitValue)",
      "432": "TableWidths::::processCellsRemainWidth(com.itextpdf.layout.renderer.TableWidths.CellInfo,com.itextpdf.layout.properties.UnitValue)",
      "433": "TableWidths::::processCellsRemainWidth(com.itextpdf.layout.renderer.TableWidths.CellInfo,com.itextpdf.layout.properties.UnitValue)",
      "434": "TableWidths::::processCellsRemainWidth(com.itextpdf.layout.renderer.TableWidths.CellInfo,com.itextpdf.layout.properties.UnitValue)",
      "435": "TableWidths::::processCellsRemainWidth(com.itextpdf.layout.renderer.TableWidths.CellInfo,com.itextpdf.layout.properties.UnitValue)",
      "436": "TableWidths::::processCellsRemainWidth(com.itextpdf.layout.renderer.TableWidths.CellInfo,com.itextpdf.layout.properties.UnitValue)",
      "437": "TableWidths::::processCellsRemainWidth(com.itextpdf.layout.renderer.TableWidths.CellInfo,com.itextpdf.layout.properties.UnitValue)",
      "438": "TableWidths::::processCellsRemainWidth(com.itextpdf.layout.renderer.TableWidths.CellInfo,com.itextpdf.layout.properties.UnitValue)",
      "439": "TableWidths::::processCellsRemainWidth(com.itextpdf.layout.renderer.TableWidths.CellInfo,com.itextpdf.layout.properties.UnitValue)",
      "440": "TableWidths::::processCellsRemainWidth(com.itextpdf.layout.renderer.TableWidths.CellInfo,com.itextpdf.layout.properties.UnitValue)",
      "441": "TableWidths::::processCellsRemainWidth(com.itextpdf.layout.renderer.TableWidths.CellInfo,com.itextpdf.layout.properties.UnitValue)",
      "442": "TableWidths::::processCellsRemainWidth(com.itextpdf.layout.renderer.TableWidths.CellInfo,com.itextpdf.layout.properties.UnitValue)",
      "443": "TableWidths::::processCellsRemainWidth(com.itextpdf.layout.renderer.TableWidths.CellInfo,com.itextpdf.layout.properties.UnitValue)",
      "444": "TableWidths::::processCellsRemainWidth(com.itextpdf.layout.renderer.TableWidths.CellInfo,com.itextpdf.layout.properties.UnitValue)",
      "445": "TableWidths::::processCellsRemainWidth(com.itextpdf.layout.renderer.TableWidths.CellInfo,com.itextpdf.layout.properties.UnitValue)",
      "446": "TableWidths::::processCellsRemainWidth(com.itextpdf.layout.renderer.TableWidths.CellInfo,com.itextpdf.layout.properties.UnitValue)",
      "447": "TableWidths::::processCellsRemainWidth(com.itextpdf.layout.renderer.TableWidths.CellInfo,com.itextpdf.layout.properties.UnitValue)",
      "448": "TableWidths::::processCellsRemainWidth(com.itextpdf.layout.renderer.TableWidths.CellInfo,com.itextpdf.layout.properties.UnitValue)",
      "449": "TableWidths::::processCellsRemainWidth(com.itextpdf.layout.renderer.TableWidths.CellInfo,com.itextpdf.layout.properties.UnitValue)",
      "450": "TableWidths::::processCellsRemainWidth(com.itextpdf.layout.renderer.TableWidths.CellInfo,com.itextpdf.layout.properties.UnitValue)",
      "451": "TableWidths::::processCellsRemainWidth(com.itextpdf.layout.renderer.TableWidths.CellInfo,com.itextpdf.layout.properties.UnitValue)",
      "452": "TableWidths::::processCellsRemainWidth(com.itextpdf.layout.renderer.TableWidths.CellInfo,com.itextpdf.layout.properties.UnitValue)",
      "453": "TableWidths::::processCellsRemainWidth(com.itextpdf.layout.renderer.TableWidths.CellInfo,com.itextpdf.layout.properties.UnitValue)",
      "454": "TableWidths::::processCellsRemainWidth(com.itextpdf.layout.renderer.TableWidths.CellInfo,com.itextpdf.layout.properties.UnitValue)",
      "455": "TableWidths::::processCellsRemainWidth(com.itextpdf.layout.renderer.TableWidths.CellInfo,com.itextpdf.layout.properties.UnitValue)",
      "456": "TableWidths::::processCellsRemainWidth(com.itextpdf.layout.renderer.TableWidths.CellInfo,com.itextpdf.layout.properties.UnitValue)",
      "457": "TableWidths::::processCellsRemainWidth(com.itextpdf.layout.renderer.TableWidths.CellInfo,com.itextpdf.layout.properties.UnitValue)",
      "459": "TableWidths::::fixedLayout()",
      "460": "TableWidths::::fixedLayout()",
      "461": "TableWidths::::fixedLayout()",
      "462": "TableWidths::::fixedLayout()",
      "463": "TableWidths::::fixedLayout()",
      "464": "TableWidths::::fixedLayout()",
      "465": "TableWidths::::fixedLayout()",
      "466": "TableWidths::::fixedLayout()",
      "467": "TableWidths::::fixedLayout()",
      "468": "TableWidths::::fixedLayout()",
      "469": "TableWidths::::fixedLayout()",
      "470": "TableWidths::::fixedLayout()",
      "471": "TableWidths::::fixedLayout()",
      "472": "TableWidths::::fixedLayout()",
      "473": "TableWidths::::fixedLayout()",
      "474": "TableWidths::::fixedLayout()",
      "475": "TableWidths::::fixedLayout()",
      "476": "TableWidths::::fixedLayout()",
      "477": "TableWidths::::fixedLayout()",
      "478": "TableWidths::::fixedLayout()",
      "479": "TableWidths::::fixedLayout()",
      "480": "TableWidths::::fixedLayout()",
      "481": "TableWidths::::fixedLayout()",
      "482": "TableWidths::::fixedLayout()",
      "483": "TableWidths::::fixedLayout()",
      "484": "TableWidths::::fixedLayout()",
      "485": "TableWidths::::fixedLayout()",
      "486": "TableWidths::::fixedLayout()",
      "487": "TableWidths::::fixedLayout()",
      "488": "TableWidths::::fixedLayout()",
      "489": "TableWidths::::fixedLayout()",
      "490": "TableWidths::::fixedLayout()",
      "491": "TableWidths::::fixedLayout()",
      "492": "TableWidths::::fixedLayout()",
      "493": "TableWidths::::fixedLayout()",
      "494": "TableWidths::::fixedLayout()",
      "495": "TableWidths::::fixedLayout()",
      "496": "TableWidths::::fixedLayout()",
      "497": "TableWidths::::fixedLayout()",
      "498": "TableWidths::::fixedLayout()",
      "499": "TableWidths::::fixedLayout()",
      "500": "TableWidths::::fixedLayout()",
      "501": "TableWidths::::fixedLayout()",
      "502": "TableWidths::::fixedLayout()",
      "503": "TableWidths::::fixedLayout()",
      "504": "TableWidths::::fixedLayout()",
      "505": "TableWidths::::fixedLayout()",
      "506": "TableWidths::::fixedLayout()",
      "507": "TableWidths::::fixedLayout()",
      "508": "TableWidths::::fixedLayout()",
      "509": "TableWidths::::fixedLayout()",
      "510": "TableWidths::::fixedLayout()",
      "511": "TableWidths::::fixedLayout()",
      "512": "TableWidths::::fixedLayout()",
      "513": "TableWidths::::fixedLayout()",
      "514": "TableWidths::::fixedLayout()",
      "515": "TableWidths::::fixedLayout()",
      "516": "TableWidths::::fixedLayout()",
      "517": "TableWidths::::fixedLayout()",
      "518": "TableWidths::::fixedLayout()",
      "519": "TableWidths::::fixedLayout()",
      "520": "TableWidths::::fixedLayout()",
      "521": "TableWidths::::fixedLayout()",
      "522": "TableWidths::::fixedLayout()",
      "523": "TableWidths::::fixedLayout()",
      "524": "TableWidths::::fixedLayout()",
      "525": "TableWidths::::fixedLayout()",
      "526": "TableWidths::::fixedLayout()",
      "527": "TableWidths::::fixedLayout()",
      "528": "TableWidths::::fixedLayout()",
      "529": "TableWidths::::fixedLayout()",
      "530": "TableWidths::::fixedLayout()",
      "531": "TableWidths::::fixedLayout()",
      "532": "TableWidths::::fixedLayout()",
      "533": "TableWidths::::fixedLayout()",
      "534": "TableWidths::::fixedLayout()",
      "535": "TableWidths::::fixedLayout()",
      "536": "TableWidths::::fixedLayout()",
      "537": "TableWidths::::fixedLayout()",
      "538": "TableWidths::::fixedLayout()",
      "539": "TableWidths::::fixedLayout()",
      "540": "TableWidths::::fixedLayout()",
      "541": "TableWidths::::fixedLayout()",
      "542": "TableWidths::::fixedLayout()",
      "543": "TableWidths::::fixedLayout()",
      "544": "TableWidths::::fixedLayout()",
      "545": "TableWidths::::fixedLayout()",
      "546": "TableWidths::::fixedLayout()",
      "547": "TableWidths::::fixedLayout()",
      "548": "TableWidths::::fixedLayout()",
      "549": "TableWidths::::fixedLayout()",
      "550": "TableWidths::::fixedLayout()",
      "551": "TableWidths::::fixedLayout()",
      "552": "TableWidths::::fixedLayout()",
      "553": "TableWidths::::fixedLayout()",
      "554": "TableWidths::::fixedLayout()",
      "555": "TableWidths::::fixedLayout()",
      "556": "TableWidths::::fixedLayout()",
      "557": "TableWidths::::fixedLayout()",
      "558": "TableWidths::::fixedLayout()",
      "559": "TableWidths::::fixedLayout()",
      "560": "TableWidths::::fixedLayout()",
      "564": "TableWidths::::calculateTableWidth(float,boolean)",
      "565": "TableWidths::::calculateTableWidth(float,boolean)",
      "566": "TableWidths::::calculateTableWidth(float,boolean)",
      "567": "TableWidths::::calculateTableWidth(float,boolean)",
      "568": "TableWidths::::calculateTableWidth(float,boolean)",
      "569": "TableWidths::::calculateTableWidth(float,boolean)",
      "570": "TableWidths::::calculateTableWidth(float,boolean)",
      "571": "TableWidths::::calculateTableWidth(float,boolean)",
      "572": "TableWidths::::calculateTableWidth(float,boolean)",
      "573": "TableWidths::::calculateTableWidth(float,boolean)",
      "574": "TableWidths::::calculateTableWidth(float,boolean)",
      "575": "TableWidths::::calculateTableWidth(float,boolean)",
      "576": "TableWidths::::calculateTableWidth(float,boolean)",
      "577": "TableWidths::::calculateTableWidth(float,boolean)",
      "578": "TableWidths::::calculateTableWidth(float,boolean)",
      "579": "TableWidths::::calculateTableWidth(float,boolean)",
      "580": "TableWidths::::calculateTableWidth(float,boolean)",
      "581": "TableWidths::::calculateTableWidth(float,boolean)",
      "582": "TableWidths::::calculateTableWidth(float,boolean)",
      "583": "TableWidths::::calculateTableWidth(float,boolean)",
      "584": "TableWidths::::calculateTableWidth(float,boolean)",
      "585": "TableWidths::::calculateTableWidth(float,boolean)",
      "586": "TableWidths::::calculateTableWidth(float,boolean)",
      "587": "TableWidths::::calculateTableWidth(float,boolean)",
      "588": "TableWidths::::calculateTableWidth(float,boolean)",
      "589": "TableWidths::::calculateTableWidth(float,boolean)",
      "590": "TableWidths::::calculateTableWidth(float,boolean)",
      "591": "TableWidths::::calculateTableWidth(float,boolean)",
      "592": "TableWidths::::calculateTableWidth(float,boolean)",
      "593": "TableWidths::::calculateTableWidth(float,boolean)",
      "594": "TableWidths::::calculateTableWidth(float,boolean)",
      "595": "TableWidths::::calculateTableWidth(float,boolean)",
      "596": "TableWidths::::calculateTableWidth(float,boolean)",
      "597": "TableWidths::::calculateTableWidth(float,boolean)",
      "598": "TableWidths::::calculateTableWidth(float,boolean)",
      "599": "TableWidths::::calculateTableWidth(float,boolean)",
      "600": "TableWidths::::calculateTableWidth(float,boolean)",
      "601": "TableWidths::::calculateTableWidth(float,boolean)",
      "602": "TableWidths::::calculateTableWidth(float,boolean)",
      "603": "TableWidths::::calculateTableWidth(float,boolean)",
      "604": "TableWidths::::calculateTableWidth(float,boolean)",
      "605": "TableWidths::::calculateTableWidth(float,boolean)",
      "606": "TableWidths::::calculateTableWidth(float,boolean)",
      "608": "TableWidths::::retrieveTableWidth(com.itextpdf.layout.properties.UnitValue,float)",
      "609": "TableWidths::::retrieveTableWidth(com.itextpdf.layout.properties.UnitValue,float)",
      "610": "TableWidths::::retrieveTableWidth(com.itextpdf.layout.properties.UnitValue,float)",
      "611": "TableWidths::::retrieveTableWidth(com.itextpdf.layout.properties.UnitValue,float)",
      "612": "TableWidths::::retrieveTableWidth(com.itextpdf.layout.properties.UnitValue,float)",
      "613": "TableWidths::::retrieveTableWidth(com.itextpdf.layout.properties.UnitValue,float)",
      "615": "TableWidths::::retrieveTableWidth(float)",
      "616": "TableWidths::::retrieveTableWidth(float)",
      "617": "TableWidths::::retrieveTableWidth(float)",
      "618": "TableWidths::::retrieveTableWidth(float)",
      "619": "TableWidths::::retrieveTableWidth(float)",
      "620": "TableWidths::::retrieveTableWidth(float)",
      "621": "TableWidths::::retrieveTableWidth(float)",
      "622": "TableWidths::::retrieveTableWidth(float)",
      "623": "TableWidths::::retrieveTableWidth(float)",
      "625": "TableWidths::::getTable()",
      "626": "TableWidths::::getTable()",
      "627": "TableWidths::::getTable()",
      "633": "TableWidths::::calculateMinMaxWidths()",
      "634": "TableWidths::::calculateMinMaxWidths()",
      "635": "TableWidths::::calculateMinMaxWidths()",
      "636": "TableWidths::::calculateMinMaxWidths()",
      "637": "TableWidths::::calculateMinMaxWidths()",
      "638": "TableWidths::::calculateMinMaxWidths()",
      "639": "TableWidths::::calculateMinMaxWidths()",
      "640": "TableWidths::::calculateMinMaxWidths()",
      "641": "TableWidths::::calculateMinMaxWidths()",
      "642": "TableWidths::::calculateMinMaxWidths()",
      "643": "TableWidths::::calculateMinMaxWidths()",
      "644": "TableWidths::::calculateMinMaxWidths()",
      "645": "TableWidths::::calculateMinMaxWidths()",
      "646": "TableWidths::::calculateMinMaxWidths()",
      "647": "TableWidths::::calculateMinMaxWidths()",
      "648": "TableWidths::::calculateMinMaxWidths()",
      "649": "TableWidths::::calculateMinMaxWidths()",
      "650": "TableWidths::::calculateMinMaxWidths()",
      "651": "TableWidths::::calculateMinMaxWidths()",
      "652": "TableWidths::::calculateMinMaxWidths()",
      "653": "TableWidths::::calculateMinMaxWidths()",
      "654": "TableWidths::::calculateMinMaxWidths()",
      "655": "TableWidths::::calculateMinMaxWidths()",
      "656": "TableWidths::::calculateMinMaxWidths()",
      "657": "TableWidths::::calculateMinMaxWidths()",
      "658": "TableWidths::::calculateMinMaxWidths()",
      "659": "TableWidths::::calculateMinMaxWidths()",
      "660": "TableWidths::::calculateMinMaxWidths()",
      "661": "TableWidths::::calculateMinMaxWidths()",
      "662": "TableWidths::::calculateMinMaxWidths()",
      "663": "TableWidths::::calculateMinMaxWidths()",
      "664": "TableWidths::::calculateMinMaxWidths()",
      "665": "TableWidths::::calculateMinMaxWidths()",
      "666": "TableWidths::::calculateMinMaxWidths()",
      "667": "TableWidths::::calculateMinMaxWidths()",
      "668": "TableWidths::::calculateMinMaxWidths()",
      "669": "TableWidths::::calculateMinMaxWidths()",
      "670": "TableWidths::::calculateMinMaxWidths()",
      "671": "TableWidths::::calculateMinMaxWidths()",
      "672": "TableWidths::::calculateMinMaxWidths()",
      "673": "TableWidths::::calculateMinMaxWidths()",
      "675": "TableWidths::::getCellBorderIndents(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "676": "TableWidths::::getCellBorderIndents(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "677": "TableWidths::::getCellBorderIndents(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "678": "TableWidths::::getCellBorderIndents(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "679": "TableWidths::::getCellBorderIndents(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "680": "TableWidths::::getCellBorderIndents(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "681": "TableWidths::::getCellBorderIndents(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "682": "TableWidths::::getCellBorderIndents(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "683": "TableWidths::::getCellBorderIndents(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "684": "TableWidths::::getCellBorderIndents(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "685": "TableWidths::::getCellBorderIndents(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "687": "TableWidths::::fillAndSortCells()",
      "688": "TableWidths::::fillAndSortCells()",
      "689": "TableWidths::::fillAndSortCells()",
      "690": "TableWidths::::fillAndSortCells()",
      "691": "TableWidths::::fillAndSortCells()",
      "692": "TableWidths::::fillAndSortCells()",
      "693": "TableWidths::::fillAndSortCells()",
      "694": "TableWidths::::fillAndSortCells()",
      "695": "TableWidths::::fillAndSortCells()",
      "696": "TableWidths::::fillAndSortCells()",
      "697": "TableWidths::::fillAndSortCells()",
      "698": "TableWidths::::fillAndSortCells()",
      "699": "TableWidths::::fillAndSortCells()",
      "701": "TableWidths::::fillRendererCells(com.itextpdf.layout.renderer.TableRenderer,byte)",
      "702": "TableWidths::::fillRendererCells(com.itextpdf.layout.renderer.TableRenderer,byte)",
      "703": "TableWidths::::fillRendererCells(com.itextpdf.layout.renderer.TableRenderer,byte)",
      "704": "TableWidths::::fillRendererCells(com.itextpdf.layout.renderer.TableRenderer,byte)",
      "705": "TableWidths::::fillRendererCells(com.itextpdf.layout.renderer.TableRenderer,byte)",
      "706": "TableWidths::::fillRendererCells(com.itextpdf.layout.renderer.TableRenderer,byte)",
      "707": "TableWidths::::fillRendererCells(com.itextpdf.layout.renderer.TableRenderer,byte)",
      "708": "TableWidths::::fillRendererCells(com.itextpdf.layout.renderer.TableRenderer,byte)",
      "709": "TableWidths::::fillRendererCells(com.itextpdf.layout.renderer.TableRenderer,byte)",
      "710": "TableWidths::::fillRendererCells(com.itextpdf.layout.renderer.TableRenderer,byte)",
      "712": "TableWidths::::warn100percent()",
      "713": "TableWidths::::warn100percent()",
      "714": "TableWidths::::warn100percent()",
      "715": "TableWidths::::warn100percent()",
      "717": "TableWidths::::extractWidths()",
      "718": "TableWidths::::extractWidths()",
      "719": "TableWidths::::extractWidths()",
      "720": "TableWidths::::extractWidths()",
      "721": "TableWidths::::extractWidths()",
      "722": "TableWidths::::extractWidths()",
      "723": "TableWidths::::extractWidths()",
      "724": "TableWidths::::extractWidths()",
      "725": "TableWidths::::extractWidths()",
      "726": "TableWidths::::extractWidths()",
      "727": "TableWidths::::extractWidths()",
      "728": "TableWidths::::extractWidths()",
      "729": "TableWidths::::extractWidths()",
      "730": "TableWidths::::extractWidths()",
      "731": "TableWidths::::extractWidths()",
      "732": "TableWidths::::extractWidths()",
      "738": "TableWidths::::toString()",
      "739": "TableWidths::::toString()",
      "740": "TableWidths::::toString()",
      "741": "TableWidths::::toString()",
      "761": "TableWidths.ColumnWidthData::::setPoints(float)",
      "762": "TableWidths.ColumnWidthData::::setPoints(float)",
      "763": "TableWidths.ColumnWidthData::::setPoints(float)",
      "764": "TableWidths.ColumnWidthData::::setPoints(float)",
      "765": "TableWidths.ColumnWidthData::::setPoints(float)",
      "766": "TableWidths.ColumnWidthData::::setPoints(float)",
      "768": "TableWidths.ColumnWidthData::::resetPoints(float)",
      "769": "TableWidths.ColumnWidthData::::resetPoints(float)",
      "770": "TableWidths.ColumnWidthData::::resetPoints(float)",
      "771": "TableWidths.ColumnWidthData::::resetPoints(float)",
      "772": "TableWidths.ColumnWidthData::::resetPoints(float)",
      "773": "TableWidths.ColumnWidthData::::resetPoints(float)",
      "775": "TableWidths.ColumnWidthData::::addPoints(float)",
      "776": "TableWidths.ColumnWidthData::::addPoints(float)",
      "777": "TableWidths.ColumnWidthData::::addPoints(float)",
      "778": "TableWidths.ColumnWidthData::::addPoints(float)",
      "779": "TableWidths.ColumnWidthData::::addPoints(float)",
      "781": "TableWidths.ColumnWidthData::::setPercents(float)",
      "782": "TableWidths.ColumnWidthData::::setPercents(float)",
      "783": "TableWidths.ColumnWidthData::::setPercents(float)",
      "784": "TableWidths.ColumnWidthData::::setPercents(float)",
      "785": "TableWidths.ColumnWidthData::::setPercents(float)",
      "786": "TableWidths.ColumnWidthData::::setPercents(float)",
      "787": "TableWidths.ColumnWidthData::::setPercents(float)",
      "788": "TableWidths.ColumnWidthData::::setPercents(float)",
      "789": "TableWidths.ColumnWidthData::::setPercents(float)",
      "790": "TableWidths.ColumnWidthData::::setPercents(float)",
      "792": "TableWidths.ColumnWidthData::::addPercents(float)",
      "793": "TableWidths.ColumnWidthData::::addPercents(float)",
      "794": "TableWidths.ColumnWidthData::::addPercents(float)",
      "795": "TableWidths.ColumnWidthData::::addPercents(float)",
      "796": "TableWidths.ColumnWidthData::::addPercents(float)",
      "798": "TableWidths.ColumnWidthData::::setFixed(boolean)",
      "799": "TableWidths.ColumnWidthData::::setFixed(boolean)",
      "800": "TableWidths.ColumnWidthData::::setFixed(boolean)",
      "801": "TableWidths.ColumnWidthData::::setFixed(boolean)",
      "803": "TableWidths.ColumnWidthData::::isFlexible()",
      "804": "TableWidths.ColumnWidthData::::isFlexible()",
      "805": "TableWidths.ColumnWidthData::::isFlexible()",
      "807": "TableWidths.ColumnWidthData::::toString()",
      "808": "TableWidths.ColumnWidthData::::toString()",
      "809": "TableWidths.ColumnWidthData::::toString()",
      "810": "TableWidths.ColumnWidthData::::toString()",
      "811": "TableWidths.ColumnWidthData::::toString()",
      "812": "TableWidths.ColumnWidthData::::toString()",
      "813": "TableWidths.ColumnWidthData::::toString()",
      "814": "TableWidths.ColumnWidthData::::toString()",
      "815": "TableWidths.ColumnWidthData::::toString()",
      "828": "TableWidths::::getCellWidth(com.itextpdf.layout.renderer.CellRenderer,boolean)",
      "829": "TableWidths::::getCellWidth(com.itextpdf.layout.renderer.CellRenderer,boolean)",
      "830": "TableWidths::::getCellWidth(com.itextpdf.layout.renderer.CellRenderer,boolean)",
      "831": "TableWidths::::getCellWidth(com.itextpdf.layout.renderer.CellRenderer,boolean)",
      "832": "TableWidths::::getCellWidth(com.itextpdf.layout.renderer.CellRenderer,boolean)",
      "833": "TableWidths::::getCellWidth(com.itextpdf.layout.renderer.CellRenderer,boolean)",
      "834": "TableWidths::::getCellWidth(com.itextpdf.layout.renderer.CellRenderer,boolean)",
      "835": "TableWidths::::getCellWidth(com.itextpdf.layout.renderer.CellRenderer,boolean)",
      "836": "TableWidths::::getCellWidth(com.itextpdf.layout.renderer.CellRenderer,boolean)",
      "837": "TableWidths::::getCellWidth(com.itextpdf.layout.renderer.CellRenderer,boolean)",
      "838": "TableWidths::::getCellWidth(com.itextpdf.layout.renderer.CellRenderer,boolean)",
      "839": "TableWidths::::getCellWidth(com.itextpdf.layout.renderer.CellRenderer,boolean)",
      "840": "TableWidths::::getCellWidth(com.itextpdf.layout.renderer.CellRenderer,boolean)",
      "841": "TableWidths::::getCellWidth(com.itextpdf.layout.renderer.CellRenderer,boolean)",
      "842": "TableWidths::::getCellWidth(com.itextpdf.layout.renderer.CellRenderer,boolean)",
      "843": "TableWidths::::getCellWidth(com.itextpdf.layout.renderer.CellRenderer,boolean)",
      "844": "TableWidths::::getCellWidth(com.itextpdf.layout.renderer.CellRenderer,boolean)",
      "845": "TableWidths::::getCellWidth(com.itextpdf.layout.renderer.CellRenderer,boolean)",
      "846": "TableWidths::::getCellWidth(com.itextpdf.layout.renderer.CellRenderer,boolean)",
      "847": "TableWidths::::getCellWidth(com.itextpdf.layout.renderer.CellRenderer,boolean)",
      "848": "TableWidths::::getCellWidth(com.itextpdf.layout.renderer.CellRenderer,boolean)",
      "849": "TableWidths::::getCellWidth(com.itextpdf.layout.renderer.CellRenderer,boolean)",
      "850": "TableWidths::::getCellWidth(com.itextpdf.layout.renderer.CellRenderer,boolean)",
      "851": "TableWidths::::getCellWidth(com.itextpdf.layout.renderer.CellRenderer,boolean)",
      "852": "TableWidths::::getCellWidth(com.itextpdf.layout.renderer.CellRenderer,boolean)",
      "853": "TableWidths::::getCellWidth(com.itextpdf.layout.renderer.CellRenderer,boolean)",
      "854": "TableWidths::::getCellWidth(com.itextpdf.layout.renderer.CellRenderer,boolean)",
      "855": "TableWidths::::getCellWidth(com.itextpdf.layout.renderer.CellRenderer,boolean)",
      "856": "TableWidths::::getCellWidth(com.itextpdf.layout.renderer.CellRenderer,boolean)",
      "857": "TableWidths::::getCellWidth(com.itextpdf.layout.renderer.CellRenderer,boolean)",
      "858": "TableWidths::::getCellWidth(com.itextpdf.layout.renderer.CellRenderer,boolean)",
      "859": "TableWidths::::getCellWidth(com.itextpdf.layout.renderer.CellRenderer,boolean)",
      "860": "TableWidths::::getCellWidth(com.itextpdf.layout.renderer.CellRenderer,boolean)",
      "861": "TableWidths::::getCellWidth(com.itextpdf.layout.renderer.CellRenderer,boolean)",
      "862": "TableWidths::::getCellWidth(com.itextpdf.layout.renderer.CellRenderer,boolean)",
      "863": "TableWidths::::getCellWidth(com.itextpdf.layout.renderer.CellRenderer,boolean)",
      "864": "TableWidths::::getCellWidth(com.itextpdf.layout.renderer.CellRenderer,boolean)",
      "865": "TableWidths::::getCellWidth(com.itextpdf.layout.renderer.CellRenderer,boolean)",
      "866": "TableWidths::::getCellWidth(com.itextpdf.layout.renderer.CellRenderer,boolean)",
      "867": "TableWidths::::getCellWidth(com.itextpdf.layout.renderer.CellRenderer,boolean)",
      "868": "TableWidths::::getCellWidth(com.itextpdf.layout.renderer.CellRenderer,boolean)",
      "869": "TableWidths::::getCellWidth(com.itextpdf.layout.renderer.CellRenderer,boolean)",
      "870": "TableWidths::::getCellWidth(com.itextpdf.layout.renderer.CellRenderer,boolean)",
      "872": "TableWidths::::resolveMinMaxCollision(com.itextpdf.layout.renderer.CellRenderer,com.itextpdf.layout.properties.UnitValue)",
      "873": "TableWidths::::resolveMinMaxCollision(com.itextpdf.layout.renderer.CellRenderer,com.itextpdf.layout.properties.UnitValue)",
      "874": "TableWidths::::resolveMinMaxCollision(com.itextpdf.layout.renderer.CellRenderer,com.itextpdf.layout.properties.UnitValue)",
      "875": "TableWidths::::resolveMinMaxCollision(com.itextpdf.layout.renderer.CellRenderer,com.itextpdf.layout.properties.UnitValue)",
      "876": "TableWidths::::resolveMinMaxCollision(com.itextpdf.layout.renderer.CellRenderer,com.itextpdf.layout.properties.UnitValue)",
      "877": "TableWidths::::resolveMinMaxCollision(com.itextpdf.layout.renderer.CellRenderer,com.itextpdf.layout.properties.UnitValue)",
      "878": "TableWidths::::resolveMinMaxCollision(com.itextpdf.layout.renderer.CellRenderer,com.itextpdf.layout.properties.UnitValue)",
      "879": "TableWidths::::resolveMinMaxCollision(com.itextpdf.layout.renderer.CellRenderer,com.itextpdf.layout.properties.UnitValue)",
      "880": "TableWidths::::resolveMinMaxCollision(com.itextpdf.layout.renderer.CellRenderer,com.itextpdf.layout.properties.UnitValue)",
      "881": "TableWidths::::resolveMinMaxCollision(com.itextpdf.layout.renderer.CellRenderer,com.itextpdf.layout.properties.UnitValue)",
      "882": "TableWidths::::resolveMinMaxCollision(com.itextpdf.layout.renderer.CellRenderer,com.itextpdf.layout.properties.UnitValue)",
      "883": "TableWidths::::resolveMinMaxCollision(com.itextpdf.layout.renderer.CellRenderer,com.itextpdf.layout.properties.UnitValue)",
      "884": "TableWidths::::resolveMinMaxCollision(com.itextpdf.layout.renderer.CellRenderer,com.itextpdf.layout.properties.UnitValue)",
      "885": "TableWidths::::resolveMinMaxCollision(com.itextpdf.layout.renderer.CellRenderer,com.itextpdf.layout.properties.UnitValue)",
      "886": "TableWidths::::resolveMinMaxCollision(com.itextpdf.layout.renderer.CellRenderer,com.itextpdf.layout.properties.UnitValue)",
      "906": "TableWidths.CellInfo::::getCell()",
      "907": "TableWidths.CellInfo::::getCell()",
      "908": "TableWidths.CellInfo::::getCell()",
      "910": "TableWidths.CellInfo::::getCol()",
      "911": "TableWidths.CellInfo::::getCol()",
      "912": "TableWidths.CellInfo::::getCol()",
      "914": "TableWidths.CellInfo::::getColspan()",
      "915": "TableWidths.CellInfo::::getColspan()",
      "916": "TableWidths.CellInfo::::getColspan()",
      "917": "TableWidths.CellInfo::::getColspan()",
      "919": "TableWidths.CellInfo::::getRow()",
      "920": "TableWidths.CellInfo::::getRow()",
      "921": "TableWidths.CellInfo::::getRow()",
      "923": "TableWidths.CellInfo::::getRowspan()",
      "924": "TableWidths.CellInfo::::getRowspan()",
      "925": "TableWidths.CellInfo::::getRowspan()",
      "926": "TableWidths.CellInfo::::getRowspan()",
      "928": "TableWidths.CellInfo::::compareTo(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "929": "TableWidths.CellInfo::::compareTo(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "930": "TableWidths.CellInfo::::compareTo(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "931": "TableWidths.CellInfo::::compareTo(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "932": "TableWidths.CellInfo::::compareTo(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "933": "TableWidths.CellInfo::::compareTo(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "934": "TableWidths.CellInfo::::compareTo(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "935": "TableWidths.CellInfo::::compareTo(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "936": "TableWidths.CellInfo::::compareTo(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "937": "TableWidths.CellInfo::::compareTo(com.itextpdf.layout.renderer.TableWidths.CellInfo)",
      "939": "TableWidths.CellInfo::::toString()",
      "940": "TableWidths.CellInfo::::toString()",
      "941": "TableWidths.CellInfo::::toString()",
      "942": "TableWidths.CellInfo::::toString()",
      "943": "TableWidths.CellInfo::::toString()",
      "944": "TableWidths.CellInfo::::toString()",
      "945": "TableWidths.CellInfo::::toString()",
      "946": "TableWidths.CellInfo::::toString()",
      "947": "TableWidths.CellInfo::::toString()",
      "948": "TableWidths.CellInfo::::toString()",
      "949": "TableWidths.CellInfo::::toString()",
      "950": "TableWidths.CellInfo::::toString()",
      "951": "TableWidths.CellInfo::::toString()",
      "953": "TableWidths.CellInfo::::setParent(com.itextpdf.layout.renderer.TableRenderer)",
      "954": "TableWidths.CellInfo::::setParent(com.itextpdf.layout.renderer.TableRenderer)",
      "955": "TableWidths.CellInfo::::setParent(com.itextpdf.layout.renderer.TableRenderer)",
      "956": "TableWidths.CellInfo::::setParent(com.itextpdf.layout.renderer.TableRenderer)",
      "957": "TableWidths.CellInfo::::setParent(com.itextpdf.layout.renderer.TableRenderer)",
      "958": "TableWidths.CellInfo::::setParent(com.itextpdf.layout.renderer.TableRenderer)",
      "959": "TableWidths.CellInfo::::setParent(com.itextpdf.layout.renderer.TableRenderer)",
      "960": "TableWidths.CellInfo::::setParent(com.itextpdf.layout.renderer.TableRenderer)",
      "961": "TableWidths.CellInfo::::setParent(com.itextpdf.layout.renderer.TableRenderer)"
    },
    "test_reverse_method_lines_dic": {
      "50": "TableWidthsTest::::testprocessCellRemainWidth01()",
      "51": "TableWidthsTest::::testprocessCellRemainWidth01()",
      "52": "TableWidthsTest::::testprocessCellRemainWidth01()",
      "53": "TableWidthsTest::::testprocessCellRemainWidth01()",
      "54": "TableWidthsTest::::testprocessCellRemainWidth01()",
      "55": "TableWidthsTest::::testprocessCellRemainWidth01()",
      "56": "TableWidthsTest::::testprocessCellRemainWidth01()",
      "57": "TableWidthsTest::::testprocessCellRemainWidth01()",
      "58": "TableWidthsTest::::testprocessCellRemainWidth01()",
      "59": "TableWidthsTest::::testprocessCellRemainWidth01()",
      "60": "TableWidthsTest::::testprocessCellRemainWidth01()",
      "62": "TableWidthsTest::::testProcessCellsRemainWidth02()",
      "63": "TableWidthsTest::::testProcessCellsRemainWidth02()",
      "64": "TableWidthsTest::::testProcessCellsRemainWidth02()",
      "65": "TableWidthsTest::::testProcessCellsRemainWidth02()",
      "66": "TableWidthsTest::::testProcessCellsRemainWidth02()",
      "67": "TableWidthsTest::::testProcessCellsRemainWidth02()",
      "68": "TableWidthsTest::::testProcessCellsRemainWidth02()",
      "69": "TableWidthsTest::::testProcessCellsRemainWidth02()",
      "70": "TableWidthsTest::::testProcessCellsRemainWidth02()",
      "71": "TableWidthsTest::::testProcessCellsRemainWidth02()",
      "72": "TableWidthsTest::::testProcessCellsRemainWidth02()",
      "73": "TableWidthsTest::::testProcessCellsRemainWidth02()",
      "75": "TableWidthsTest::::testSumOfColumnsIsGreaterThan100()",
      "76": "TableWidthsTest::::testSumOfColumnsIsGreaterThan100()",
      "77": "TableWidthsTest::::testSumOfColumnsIsGreaterThan100()",
      "78": "TableWidthsTest::::testSumOfColumnsIsGreaterThan100()",
      "79": "TableWidthsTest::::testSumOfColumnsIsGreaterThan100()",
      "80": "TableWidthsTest::::testSumOfColumnsIsGreaterThan100()",
      "81": "TableWidthsTest::::testSumOfColumnsIsGreaterThan100()",
      "82": "TableWidthsTest::::testSumOfColumnsIsGreaterThan100()",
      "83": "TableWidthsTest::::testSumOfColumnsIsGreaterThan100()",
      "84": "TableWidthsTest::::testSumOfColumnsIsGreaterThan100()",
      "85": "TableWidthsTest::::testSumOfColumnsIsGreaterThan100()",
      "86": "TableWidthsTest::::testSumOfColumnsIsGreaterThan100()",
      "87": "TableWidthsTest::::testSumOfColumnsIsGreaterThan100()",
      "88": "TableWidthsTest::::testSumOfColumnsIsGreaterThan100()",
      "89": "TableWidthsTest::::testSumOfColumnsIsGreaterThan100()",
      "90": "TableWidthsTest::::testSumOfColumnsIsGreaterThan100()",
      "91": "TableWidthsTest::::testSumOfColumnsIsGreaterThan100()",
      "92": "TableWidthsTest::::testSumOfColumnsIsGreaterThan100()",
      "93": "TableWidthsTest::::testSumOfColumnsIsGreaterThan100()",
      "94": "TableWidthsTest::::testSumOfColumnsIsGreaterThan100()",
      "95": "TableWidthsTest::::testSumOfColumnsIsGreaterThan100()",
      "96": "TableWidthsTest::::testSumOfColumnsIsGreaterThan100()",
      "97": "TableWidthsTest::::testSumOfColumnsIsGreaterThan100()",
      "98": "TableWidthsTest::::testSumOfColumnsIsGreaterThan100()",
      "99": "TableWidthsTest::::testSumOfColumnsIsGreaterThan100()",
      "100": "TableWidthsTest::::testSumOfColumnsIsGreaterThan100()",
      "101": "TableWidthsTest::::testSumOfColumnsIsGreaterThan100()",
      "102": "TableWidthsTest::::testSumOfColumnsIsGreaterThan100()",
      "103": "TableWidthsTest::::testSumOfColumnsIsGreaterThan100()",
      "104": "TableWidthsTest::::testSumOfColumnsIsGreaterThan100()",
      "105": "TableWidthsTest::::testSumOfColumnsIsGreaterThan100()",
      "106": "TableWidthsTest::::testSumOfColumnsIsGreaterThan100()",
      "107": "TableWidthsTest::::testSumOfColumnsIsGreaterThan100()",
      "108": "TableWidthsTest::::testSumOfColumnsIsGreaterThan100()",
      "109": "TableWidthsTest::::testSumOfColumnsIsGreaterThan100()",
      "110": "TableWidthsTest::::testSumOfColumnsIsGreaterThan100()",
      "111": "TableWidthsTest::::testSumOfColumnsIsGreaterThan100()",
      "112": "TableWidthsTest::::testSumOfColumnsIsGreaterThan100()",
      "113": "TableWidthsTest::::testSumOfColumnsIsGreaterThan100()",
      "115": "TableWidthsTest::::testProcessCellPointWidthValue()",
      "116": "TableWidthsTest::::testProcessCellPointWidthValue()",
      "117": "TableWidthsTest::::testProcessCellPointWidthValue()",
      "118": "TableWidthsTest::::testProcessCellPointWidthValue()",
      "119": "TableWidthsTest::::testProcessCellPointWidthValue()",
      "120": "TableWidthsTest::::testProcessCellPointWidthValue()",
      "121": "TableWidthsTest::::testProcessCellPointWidthValue()",
      "122": "TableWidthsTest::::testProcessCellPointWidthValue()",
      "123": "TableWidthsTest::::testProcessCellPointWidthValue()",
      "124": "TableWidthsTest::::testProcessCellPointWidthValue()",
      "125": "TableWidthsTest::::testProcessCellPointWidthValue()",
      "126": "TableWidthsTest::::testProcessCellPointWidthValue()",
      "127": "TableWidthsTest::::testProcessCellPointWidthValue()",
      "128": "TableWidthsTest::::testProcessCellPointWidthValue()",
      "129": "TableWidthsTest::::testProcessCellPointWidthValue()",
      "130": "TableWidthsTest::::testProcessCellPointWidthValue()",
      "131": "TableWidthsTest::::testProcessCellPointWidthValue()",
      "132": "TableWidthsTest::::testProcessCellPointWidthValue()",
      "133": "TableWidthsTest::::testProcessCellPointWidthValue()",
      "134": "TableWidthsTest::::testProcessCellPointWidthValue()",
      "135": "TableWidthsTest::::testProcessCellPointWidthValue()",
      "136": "TableWidthsTest::::testProcessCellPointWidthValue()",
      "137": "TableWidthsTest::::testProcessCellPointWidthValue()",
      "138": "TableWidthsTest::::testProcessCellPointWidthValue()",
      "139": "TableWidthsTest::::testProcessCellPointWidthValue()",
      "140": "TableWidthsTest::::testProcessCellPointWidthValue()",
      "142": "TableWidthsTest::::testProcessCellsWithPercentWidth01()",
      "143": "TableWidthsTest::::testProcessCellsWithPercentWidth01()",
      "144": "TableWidthsTest::::testProcessCellsWithPercentWidth01()",
      "145": "TableWidthsTest::::testProcessCellsWithPercentWidth01()",
      "146": "TableWidthsTest::::testProcessCellsWithPercentWidth01()",
      "147": "TableWidthsTest::::testProcessCellsWithPercentWidth01()",
      "148": "TableWidthsTest::::testProcessCellsWithPercentWidth01()",
      "149": "TableWidthsTest::::testProcessCellsWithPercentWidth01()",
      "150": "TableWidthsTest::::testProcessCellsWithPercentWidth01()",
      "151": "TableWidthsTest::::testProcessCellsWithPercentWidth01()",
      "152": "TableWidthsTest::::testProcessCellsWithPercentWidth01()",
      "153": "TableWidthsTest::::testProcessCellsWithPercentWidth01()",
      "154": "TableWidthsTest::::testProcessCellsWithPercentWidth01()",
      "155": "TableWidthsTest::::testProcessCellsWithPercentWidth01()",
      "156": "TableWidthsTest::::testProcessCellsWithPercentWidth01()",
      "157": "TableWidthsTest::::testProcessCellsWithPercentWidth01()",
      "158": "TableWidthsTest::::testProcessCellsWithPercentWidth01()",
      "159": "TableWidthsTest::::testProcessCellsWithPercentWidth01()",
      "160": "TableWidthsTest::::testProcessCellsWithPercentWidth01()",
      "161": "TableWidthsTest::::testProcessCellsWithPercentWidth01()",
      "162": "TableWidthsTest::::testProcessCellsWithPercentWidth01()",
      "163": "TableWidthsTest::::testProcessCellsWithPercentWidth01()",
      "164": "TableWidthsTest::::testProcessCellsWithPercentWidth01()",
      "165": "TableWidthsTest::::testProcessCellsWithPercentWidth01()",
      "166": "TableWidthsTest::::testProcessCellsWithPercentWidth01()",
      "167": "TableWidthsTest::::testProcessCellsWithPercentWidth01()",
      "168": "TableWidthsTest::::testProcessCellsWithPercentWidth01()",
      "169": "TableWidthsTest::::testProcessCellsWithPercentWidth01()",
      "170": "TableWidthsTest::::testProcessCellsWithPercentWidth01()",
      "171": "TableWidthsTest::::testProcessCellsWithPercentWidth01()",
      "172": "TableWidthsTest::::testProcessCellsWithPercentWidth01()",
      "173": "TableWidthsTest::::testProcessCellsWithPercentWidth01()",
      "174": "TableWidthsTest::::testProcessCellsWithPercentWidth01()",
      "176": "TableWidthsTest::::testProcessCellsWithPercentWidth02()",
      "177": "TableWidthsTest::::testProcessCellsWithPercentWidth02()",
      "178": "TableWidthsTest::::testProcessCellsWithPercentWidth02()",
      "179": "TableWidthsTest::::testProcessCellsWithPercentWidth02()",
      "180": "TableWidthsTest::::testProcessCellsWithPercentWidth02()",
      "181": "TableWidthsTest::::testProcessCellsWithPercentWidth02()",
      "182": "TableWidthsTest::::testProcessCellsWithPercentWidth02()",
      "183": "TableWidthsTest::::testProcessCellsWithPercentWidth02()",
      "184": "TableWidthsTest::::testProcessCellsWithPercentWidth02()",
      "185": "TableWidthsTest::::testProcessCellsWithPercentWidth02()",
      "186": "TableWidthsTest::::testProcessCellsWithPercentWidth02()",
      "187": "TableWidthsTest::::testProcessCellsWithPercentWidth02()",
      "188": "TableWidthsTest::::testProcessCellsWithPercentWidth02()",
      "189": "TableWidthsTest::::testProcessCellsWithPercentWidth02()",
      "190": "TableWidthsTest::::testProcessCellsWithPercentWidth02()",
      "191": "TableWidthsTest::::testProcessCellsWithPercentWidth02()",
      "192": "TableWidthsTest::::testProcessCellsWithPercentWidth02()",
      "193": "TableWidthsTest::::testProcessCellsWithPercentWidth02()",
      "194": "TableWidthsTest::::testProcessCellsWithPercentWidth02()",
      "195": "TableWidthsTest::::testProcessCellsWithPercentWidth02()",
      "196": "TableWidthsTest::::testProcessCellsWithPercentWidth02()",
      "197": "TableWidthsTest::::testProcessCellsWithPercentWidth02()",
      "198": "TableWidthsTest::::testProcessCellsWithPercentWidth02()",
      "199": "TableWidthsTest::::testProcessCellsWithPercentWidth02()",
      "200": "TableWidthsTest::::testProcessCellsWithPercentWidth02()",
      "201": "TableWidthsTest::::testProcessCellsWithPercentWidth02()",
      "202": "TableWidthsTest::::testProcessCellsWithPercentWidth02()",
      "203": "TableWidthsTest::::testProcessCellsWithPercentWidth02()",
      "204": "TableWidthsTest::::testProcessCellsWithPercentWidth02()",
      "205": "TableWidthsTest::::testProcessCellsWithPercentWidth02()",
      "206": "TableWidthsTest::::testProcessCellsWithPercentWidth02()",
      "207": "TableWidthsTest::::testProcessCellsWithPercentWidth02()",
      "208": "TableWidthsTest::::testProcessCellsWithPercentWidth02()",
      "209": "TableWidthsTest::::testProcessCellsWithPercentWidth02()",
      "210": "TableWidthsTest::::testProcessCellsWithPercentWidth02()",
      "211": "TableWidthsTest::::testProcessCellsWithPercentWidth02()",
      "212": "TableWidthsTest::::testProcessCellsWithPercentWidth02()",
      "213": "TableWidthsTest::::testProcessCellsWithPercentWidth02()",
      "214": "TableWidthsTest::::testProcessCellsWithPercentWidth02()",
      "215": "TableWidthsTest::::testProcessCellsWithPercentWidth02()",
      "216": "TableWidthsTest::::testProcessCellsWithPercentWidth02()",
      "217": "TableWidthsTest::::testProcessCellsWithPercentWidth02()",
      "218": "TableWidthsTest::::testProcessCellsWithPercentWidth02()",
      "220": "TableWidthsTest::::createTableWithDiffColspan(int)",
      "221": "TableWidthsTest::::createTableWithDiffColspan(int)",
      "222": "TableWidthsTest::::createTableWithDiffColspan(int)",
      "223": "TableWidthsTest::::createTableWithDiffColspan(int)",
      "224": "TableWidthsTest::::createTableWithDiffColspan(int)",
      "225": "TableWidthsTest::::createTableWithDiffColspan(int)",
      "226": "TableWidthsTest::::createTableWithDiffColspan(int)",
      "227": "TableWidthsTest::::createTableWithDiffColspan(int)",
      "228": "TableWidthsTest::::createTableWithDiffColspan(int)",
      "229": "TableWidthsTest::::createTableWithDiffColspan(int)",
      "230": "TableWidthsTest::::createTableWithDiffColspan(int)",
      "231": "TableWidthsTest::::createTableWithDiffColspan(int)",
      "232": "TableWidthsTest::::createTableWithDiffColspan(int)",
      "233": "TableWidthsTest::::createTableWithDiffColspan(int)",
      "234": "TableWidthsTest::::createTableWithDiffColspan(int)",
      "235": "TableWidthsTest::::createTableWithDiffColspan(int)",
      "236": "TableWidthsTest::::createTableWithDiffColspan(int)",
      "237": "TableWidthsTest::::createTableWithDiffColspan(int)",
      "239": "TableWidthsTest::::createTableRendererWithDiffColspan(int)",
      "240": "TableWidthsTest::::createTableRendererWithDiffColspan(int)",
      "241": "TableWidthsTest::::createTableRendererWithDiffColspan(int)",
      "242": "TableWidthsTest::::createTableRendererWithDiffColspan(int)",
      "243": "TableWidthsTest::::createTableRendererWithDiffColspan(int)",
      "244": "TableWidthsTest::::createTableRendererWithDiffColspan(int)",
      "245": "TableWidthsTest::::createTableRendererWithDiffColspan(int)",
      "246": "TableWidthsTest::::createTableRendererWithDiffColspan(int)",
      "247": "TableWidthsTest::::createTableRendererWithDiffColspan(int)",
      "248": "TableWidthsTest::::createTableRendererWithDiffColspan(int)",
      "249": "TableWidthsTest::::createTableRendererWithDiffColspan(int)",
      "250": "TableWidthsTest::::createTableRendererWithDiffColspan(int)",
      "251": "TableWidthsTest::::createTableRendererWithDiffColspan(int)",
      "252": "TableWidthsTest::::createTableRendererWithDiffColspan(int)"
    },
    "tests": [
      {
        "test_lines": [
          50,
          60
        ],
        "covered_lines": [
          43,
          55,
          61,
          62,
          63,
          64,
          65,
          66,
          67,
          68,
          69,
          70,
          73,
          74,
          114,
          115,
          116,
          117,
          124,
          125,
          126,
          127,
          164,
          173,
          176,
          179,
          180,
          181,
          182,
          183,
          184,
          187,
          190,
          191,
          192,
          197,
          412,
          413,
          414,
          415,
          416,
          417,
          418,
          426,
          457,
          565,
          566,
          567,
          568,
          578,
          580,
          581,
          582,
          583,
          592,
          593,
          595,
          596,
          598,
          601,
          604,
          606,
          609,
          616,
          620,
          622,
          634,
          635,
          637,
          638,
          639,
          640,
          643,
          644,
          647,
          648,
          649,
          651,
          652,
          653,
          654,
          655,
          657,
          662,
          668,
          670,
          671,
          673,
          677,
          679,
          682,
          684,
          688,
          689,
          692,
          693,
          698,
          699,
          702,
          703,
          704,
          705,
          706,
          710,
          743,
          746,
          747,
          748,
          750,
          752,
          753,
          754,
          755,
          758,
          759,
          776,
          777,
          778,
          804,
          818,
          829,
          831,
          832,
          835,
          837,
          840,
          841,
          842,
          843,
          844,
          846,
          847,
          849,
          850,
          852,
          853,
          855,
          856,
          861,
          866,
          868,
          873,
          875,
          876,
          880,
          881,
          885,
          898,
          899,
          900,
          902,
          903,
          904,
          907,
          911,
          916,
          920,
          925,
          930,
          931,
          933,
          934,
          936,
          954,
          956,
          959,
          961
        ]
      },
      {
        "test_lines": [
          62,
          73
        ],
        "covered_lines": [
          43,
          55,
          61,
          62,
          63,
          64,
          65,
          66,
          67,
          68,
          69,
          70,
          73,
          74,
          114,
          115,
          116,
          117,
          124,
          125,
          126,
          127,
          164,
          173,
          176,
          179,
          180,
          181,
          182,
          183,
          184,
          187,
          190,
          191,
          192,
          197,
          412,
          413,
          414,
          415,
          416,
          417,
          418,
          426,
          427,
          428,
          430,
          431,
          433,
          441,
          444,
          445,
          446,
          447,
          457,
          565,
          566,
          567,
          568,
          578,
          580,
          581,
          582,
          583,
          592,
          593,
          595,
          596,
          598,
          601,
          604,
          606,
          609,
          616,
          620,
          622,
          634,
          635,
          637,
          638,
          639,
          640,
          643,
          644,
          647,
          648,
          649,
          651,
          652,
          653,
          654,
          655,
          657,
          662,
          668,
          670,
          671,
          673,
          677,
          679,
          682,
          684,
          688,
          689,
          692,
          693,
          698,
          699,
          702,
          703,
          704,
          705,
          706,
          710,
          743,
          746,
          747,
          748,
          750,
          752,
          753,
          754,
          755,
          758,
          759,
          776,
          777,
          778,
          799,
          800,
          804,
          818,
          829,
          831,
          832,
          835,
          837,
          840,
          841,
          842,
          843,
          844,
          846,
          847,
          849,
          850,
          852,
          853,
          855,
          856,
          861,
          866,
          868,
          873,
          875,
          876,
          880,
          881,
          885,
          898,
          899,
          900,
          902,
          903,
          904,
          907,
          911,
          916,
          920,
          925,
          930,
          931,
          933,
          934,
          936,
          954,
          956,
          959,
          961
        ]
      },
      {
        "test_lines": [
          75,
          113
        ],
        "covered_lines": [
          43,
          55,
          61,
          62,
          63,
          64,
          65,
          66,
          67,
          68,
          69,
          70,
          71,
          73,
          74,
          77,
          81,
          84,
          93,
          94,
          95,
          97,
          98,
          99,
          102,
          103,
          104,
          106,
          108,
          110,
          114,
          115,
          116,
          117,
          124,
          125,
          126,
          127,
          130,
          133,
          134,
          135,
          136,
          137,
          142,
          143,
          144,
          153,
          154,
          155,
          160,
          176,
          179,
          180,
          181,
          182,
          183,
          184,
          187,
          190,
          191,
          192,
          197,
          200,
          201,
          202,
          203,
          204,
          219,
          222,
          227,
          229,
          230,
          233,
          234,
          235,
          236,
          237,
          238,
          239,
          240,
          241,
          242,
          244,
          251,
          253,
          254,
          274,
          283,
          290,
          291,
          292,
          293,
          294,
          295,
          296,
          297,
          299,
          300,
          301,
          302,
          303,
          306,
          309,
          310,
          311,
          312,
          316,
          409,
          565,
          566,
          567,
          568,
          578,
          580,
          581,
          582,
          583,
          584,
          585,
          586,
          592,
          593,
          595,
          596,
          598,
          601,
          604,
          606,
          609,
          610,
          611,
          616,
          620,
          622,
          626,
          634,
          635,
          637,
          638,
          639,
          640,
          643,
          644,
          647,
          648,
          649,
          651,
          652,
          653,
          654,
          655,
          657,
          662,
          668,
          670,
          671,
          673,
          677,
          679,
          682,
          684,
          688,
          689,
          692,
          693,
          698,
          699,
          702,
          703,
          704,
          705,
          706,
          710,
          713,
          714,
          715,
          718,
          719,
          720,
          721,
          722,
          723,
          724,
          725,
          727,
          731,
          743,
          746,
          747,
          748,
          750,
          752,
          753,
          754,
          755,
          758,
          759,
          769,
          770,
          771,
          772,
          776,
          777,
          778,
          782,
          785,
          786,
          788,
          789,
          804,
          818,
          829,
          831,
          832,
          835,
          837,
          838,
          898,
          899,
          900,
          902,
          903,
          904,
          907,
          911,
          916,
          920,
          925,
          930,
          931,
          933,
          934,
          936,
          954,
          956,
          959,
          961
        ]
      },
      {
        "test_lines": [
          115,
          140
        ],
        "covered_lines": [
          43,
          55,
          61,
          62,
          63,
          64,
          65,
          66,
          67,
          68,
          69,
          70,
          73,
          74,
          114,
          115,
          116,
          117,
          124,
          125,
          126,
          127,
          164,
          165,
          166,
          167,
          197,
          565,
          566,
          567,
          568,
          578,
          580,
          581,
          582,
          583,
          592,
          593,
          595,
          596,
          598,
          601,
          604,
          606,
          609,
          616,
          620,
          622,
          634,
          635,
          637,
          638,
          639,
          640,
          643,
          644,
          647,
          648,
          649,
          668,
          670,
          671,
          673,
          677,
          679,
          682,
          684,
          688,
          689,
          692,
          693,
          698,
          699,
          702,
          703,
          704,
          705,
          706,
          710,
          743,
          746,
          747,
          748,
          750,
          752,
          753,
          754,
          755,
          758,
          759,
          762,
          763,
          764,
          765,
          799,
          800,
          818,
          829,
          831,
          835,
          837,
          840,
          841,
          842,
          843,
          844,
          846,
          847,
          849,
          850,
          852,
          853,
          855,
          856,
          861,
          866,
          868,
          873,
          875,
          876,
          880,
          881,
          885,
          898,
          899,
          900,
          902,
          903,
          904,
          907,
          911,
          916,
          920,
          925,
          930,
          933,
          934,
          936,
          954,
          956,
          959,
          961
        ]
      },
      {
        "test_lines": [
          142,
          174
        ],
        "covered_lines": [
          43,
          55,
          61,
          62,
          63,
          64,
          65,
          66,
          67,
          68,
          69,
          70,
          73,
          74,
          114,
          115,
          116,
          117,
          124,
          125,
          126,
          127,
          130,
          131,
          197,
          222,
          227,
          229,
          230,
          233,
          234,
          235,
          239,
          244,
          251,
          253,
          254,
          255,
          257,
          258,
          259,
          263,
          264,
          265,
          267,
          274,
          283,
          285,
          286,
          409,
          565,
          566,
          567,
          568,
          578,
          580,
          581,
          582,
          583,
          592,
          593,
          595,
          596,
          598,
          601,
          604,
          606,
          609,
          616,
          620,
          622,
          634,
          635,
          637,
          638,
          639,
          640,
          643,
          644,
          647,
          648,
          649,
          668,
          670,
          671,
          673,
          677,
          679,
          682,
          684,
          688,
          689,
          692,
          693,
          698,
          699,
          702,
          703,
          704,
          705,
          706,
          710,
          743,
          746,
          747,
          748,
          750,
          752,
          753,
          754,
          755,
          758,
          759,
          782,
          783,
          785,
          786,
          788,
          789,
          818,
          829,
          831,
          835,
          837,
          838,
          898,
          899,
          900,
          902,
          903,
          904,
          907,
          911,
          916,
          920,
          925,
          930,
          933,
          934,
          936,
          954,
          956,
          959,
          961
        ]
      },
      {
        "test_lines": [
          176,
          218
        ],
        "covered_lines": [
          43,
          55,
          61,
          62,
          63,
          64,
          65,
          66,
          67,
          68,
          69,
          70,
          71,
          73,
          74,
          77,
          81,
          84,
          93,
          94,
          95,
          97,
          98,
          99,
          102,
          103,
          104,
          106,
          108,
          110,
          114,
          115,
          116,
          117,
          124,
          125,
          126,
          127,
          130,
          131,
          133,
          134,
          135,
          136,
          137,
          139,
          142,
          143,
          144,
          153,
          154,
          155,
          160,
          176,
          179,
          180,
          181,
          182,
          183,
          184,
          187,
          190,
          191,
          192,
          197,
          200,
          201,
          202,
          203,
          204,
          219,
          222,
          223,
          224,
          227,
          229,
          230,
          233,
          234,
          235,
          239,
          244,
          251,
          253,
          254,
          274,
          277,
          278,
          280,
          283,
          290,
          291,
          292,
          293,
          294,
          295,
          296,
          297,
          299,
          300,
          301,
          302,
          303,
          309,
          310,
          311,
          312,
          316,
          409,
          565,
          566,
          567,
          568,
          578,
          580,
          581,
          582,
          583,
          584,
          585,
          586,
          592,
          593,
          595,
          596,
          598,
          601,
          604,
          606,
          609,
          610,
          611,
          616,
          620,
          622,
          626,
          634,
          635,
          637,
          638,
          639,
          640,
          643,
          644,
          647,
          648,
          649,
          651,
          652,
          653,
          654,
          655,
          657,
          662,
          668,
          670,
          671,
          673,
          677,
          679,
          682,
          684,
          688,
          689,
          692,
          693,
          698,
          699,
          702,
          703,
          704,
          705,
          706,
          710,
          718,
          719,
          720,
          721,
          722,
          723,
          724,
          725,
          727,
          731,
          743,
          746,
          747,
          748,
          750,
          752,
          753,
          754,
          755,
          758,
          759,
          776,
          777,
          778,
          782,
          785,
          786,
          788,
          789,
          804,
          818,
          829,
          831,
          832,
          835,
          837,
          838,
          898,
          899,
          900,
          902,
          903,
          904,
          907,
          911,
          916,
          920,
          925,
          930,
          931,
          933,
          934,
          936,
          954,
          956,
          959,
          961
        ]
      }
    ]
  }
}