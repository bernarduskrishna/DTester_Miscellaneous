{"/bernard/dataset_construction/prep/repos/itext-java/sign/src/main/java/com/itextpdf/signatures/CertificateUtil.java": {"class_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.signatures;\n", "\n", "import com.itextpdf.bouncycastleconnector.BouncyCastleFactoryCreator;\n", "import com.itextpdf.commons.bouncycastle.IBouncyCastleFactory;\n", "import com.itextpdf.commons.bouncycastle.asn1.IASN1EncodableVector;\n", "import com.itextpdf.commons.bouncycastle.asn1.IASN1Enumerated;\n", "import com.itextpdf.commons.bouncycastle.asn1.IASN1InputStream;\n", "import com.itextpdf.commons.bouncycastle.asn1.IASN1ObjectIdentifier;\n", "import com.itextpdf.commons.bouncycastle.asn1.IASN1OctetString;\n", "import com.itextpdf.commons.bouncycastle.asn1.IASN1Primitive;\n", "import com.itextpdf.commons.bouncycastle.asn1.IASN1Sequence;\n", "import com.itextpdf.commons.bouncycastle.asn1.IASN1TaggedObject;\n", "import com.itextpdf.commons.bouncycastle.asn1.IDERIA5String;\n", "import com.itextpdf.commons.bouncycastle.asn1.IDEROctetString;\n", "import com.itextpdf.commons.bouncycastle.asn1.IDERSet;\n", "import com.itextpdf.commons.bouncycastle.asn1.ocsp.IBasicOCSPResponse;\n", "import com.itextpdf.commons.bouncycastle.asn1.ocsp.IOCSPObjectIdentifiers;\n", "import com.itextpdf.commons.bouncycastle.asn1.x509.ICRLDistPoint;\n", "import com.itextpdf.commons.bouncycastle.asn1.x509.IDistributionPoint;\n", "import com.itextpdf.commons.bouncycastle.asn1.x509.IDistributionPointName;\n", "import com.itextpdf.commons.bouncycastle.asn1.x509.IGeneralName;\n", "import com.itextpdf.commons.bouncycastle.asn1.x509.IGeneralNames;\n", "import com.itextpdf.commons.bouncycastle.cert.ocsp.AbstractOCSPException;\n", "import com.itextpdf.commons.bouncycastle.cert.ocsp.IBasicOCSPResp;\n", "import com.itextpdf.commons.bouncycastle.cert.ocsp.ICertificateID;\n", "import com.itextpdf.commons.bouncycastle.operator.AbstractOperatorCreationException;\n", "import com.itextpdf.signatures.logs.SignLogMessageConstant;\n", "import org.slf4j.Logger;\n", "import org.slf4j.LoggerFactory;\n", "\n", "import java.io.ByteArrayInputStream;\n", "import java.io.IOException;\n", "import java.io.InputStream;\n", "import java.net.URL;\n", "import java.nio.charset.StandardCharsets;\n", "import java.security.cert.CRL;\n", "import java.security.cert.CRLException;\n", "import java.security.cert.Certificate;\n", "import java.security.cert.CertificateEncodingException;\n", "import java.security.cert.CertificateException;\n", "import java.security.cert.X509Certificate;\n", "import java.security.cert.X509CRL;\n", "import java.util.ArrayList;\n", "import java.util.Arrays;\n", "import java.util.Collection;\n", "import java.util.Enumeration;\n", "import java.util.List;\n", "\n", "/**\n", " * This class contains a series of static methods that\n", " * allow you to retrieve information from a Certificate.\n", " */\n", "public class CertificateUtil {\n", "\n", "    private static final IBouncyCastleFactory FACTORY = BouncyCastleFactoryCreator.getFactory();\n", "    private static final Logger LOGGER = LoggerFactory.getLogger(CertificateUtil.class);\n", "\n", "    // Certificate Revocation Lists\n", "\n", "    /**\n", "     * Gets a CRL from an X509 certificate.\n", "     *\n", "     * @param certificate the X509Certificate to extract the CRL from\n", "     *\n", "     * @return CRL or null if there's no CRL available\n", "     *\n", "     * @throws IOException          thrown when the URL couldn't be opened properly.\n", "     * @throws CertificateException thrown if there's no X509 implementation in the provider.\n", "     * @throws CRLException         thrown when encountering errors when parsing the CRL.\n", "     *\n", "     * @deprecated use {@link #getCRLs(X509Certificate)}.\n", "     */\n", "    @Deprecated\n", "    public static CRL getCRL(X509Certificate certificate) throws CertificateException, CRLException, IOException {\n", "        return CertificateUtil.getCRL(CertificateUtil.getCRLURL(certificate));\n", "    }\n", "\n", "    /**\n", "     * Gets a CRLs from the X509 certificate.\n", "     *\n", "     * @param certificate the X509Certificate to extract the CRLs from\n", "     *\n", "     * @return CRL list or null if there's no CRL available\n", "     *\n", "     * @throws IOException          thrown when the URL couldn't be opened properly.\n", "     * @throws CertificateException thrown if there's no X509 implementation in the provider.\n", "     * @throws CRLException         thrown when encountering errors when parsing the CRL.\n", "     */\n", "    public static List<CRL> getCRLs(X509Certificate certificate)\n", "            throws CertificateException, CRLException, IOException {\n", "        List<CRL> crls = new ArrayList<>();\n", "        for (String crlUrl : getCRLURLs(certificate)) {\n", "            crls.add(CertificateUtil.getCRL(crlUrl));\n", "        }\n", "        return crls;\n", "    }\n", "\n", "    /**\n", "     * Gets the URL of the Certificate Revocation List for a Certificate\n", "     *\n", "     * @param certificate the Certificate\n", "     *\n", "     * @return the String where you can check if the certificate was revoked.\n", "     *\n", "     * @deprecated use {@link #getCRLURLs(X509Certificate)}.\n", "     */\n", "    @Deprecated\n", "    public static String getCRLURL(X509Certificate certificate) {\n", "        List<String> urls = getCRLURLs(certificate);\n", "        return urls.isEmpty() ? null : urls.get(0);\n", "    }\n", "\n", "    /**\n", "     * Gets the list of the Certificate Revocation List URLs for a Certificate.\n", "     *\n", "     * @param certificate the Certificate to get CRL URLs for\n", "     *\n", "     * @return the list of URL strings where you can check if the certificate is revoked.\n", "     */\n", "    public static List<String> getCRLURLs(X509Certificate certificate) {\n", "        List<String> crls = new ArrayList<>();\n", "        IDistributionPoint[] dists = getDistributionPoints(certificate);\n", "        for (IDistributionPoint p : dists) {\n", "            IDistributionPointName distributionPointName = p.getDistributionPoint();\n", "            if (FACTORY.createDistributionPointName().getFullName() != distributionPointName.getType()) {\n", "                continue;\n", "            }\n", "            IGeneralNames generalNames = FACTORY.createGeneralNames(distributionPointName.getName());\n", "            IGeneralName[] names = generalNames.getNames();\n", "            // If the DistributionPointName contains multiple values, each name describes a different mechanism\n", "            // to obtain the same CRL.\n", "            for (IGeneralName name : names) {\n", "                if (name.getTagNo() != FACTORY.createGeneralName().getUniformResourceIdentifier()) {\n", "                    continue;\n", "                }\n", "                IDERIA5String derStr = FACTORY\n", "                        .createDERIA5String(FACTORY.createASN1TaggedObject(name.toASN1Primitive()), false);\n", "                crls.add(derStr.getString());\n", "            }\n", "        }\n", "        return crls;\n", "    }\n", "\n", "    /**\n", "     * Gets the Distribution Point from the certificate by name specified in the Issuing Distribution Point from the\n", "     * Certificate Revocation List for a Certificate.\n", "     *\n", "     * @param certificate                  the certificate to retrieve Distribution Points\n", "     * @param issuingDistributionPointName distributionPointName retrieved from the IDP of the CRL\n", "     *\n", "     * @return distribution point withthe same name as specified in the IDP.\n", "     */\n", "    public static IDistributionPoint getDistributionPointByName(X509Certificate certificate,\n", "                                                                IDistributionPointName issuingDistributionPointName) {\n", "        IDistributionPoint[] distributionPoints = getDistributionPoints(certificate);\n", "        List<IGeneralName> issuingNames = Arrays.asList(\n", "                FACTORY.createGeneralNames(issuingDistributionPointName.getName()).getNames());\n", "        for (IDistributionPoint distributionPoint : distributionPoints) {\n", "            IDistributionPointName distributionPointName = distributionPoint.getDistributionPoint();\n", "            IGeneralNames generalNames = distributionPointName.isNull() ? distributionPoint.getCRLIssuer() :\n", "                    FACTORY.createGeneralNames(distributionPointName.getName());\n", "            IGeneralName[] names = generalNames.getNames();\n", "            for (IGeneralName name : names) {\n", "                if (issuingNames.contains(name)) {\n", "                    return distributionPoint;\n", "                }\n", "            }\n", "        }\n", "        return null;\n", "    }\n", "\n", "    /**\n", "     * Gets the CRL object using a CRL URL.\n", "     *\n", "     * @param url the URL where the CRL is located\n", "     *\n", "     * @return CRL object\n", "     *\n", "     * @throws IOException          thrown when the URL couldn't be opened properly.\n", "     * @throws CertificateException thrown if there's no X509 implementation in the provider.\n", "     * @throws CRLException         thrown when encountering errors when parsing the CRL.\n", "     */\n", "    public static CRL getCRL(String url) throws IOException, CertificateException, CRLException {\n", "        if (url == null) {\n", "            return null;\n", "        }\n", "        return CertificateUtil.parseCrlFromStream(new URL(url).openStream());\n", "    }\n", "\n", "    /**\n", "     * Parses a CRL from an InputStream.\n", "     *\n", "     * @param input the InputStream holding the unparsed CRL\n", "     *\n", "     * @return the parsed CRL object.\n", "     *\n", "     * @throws CertificateException thrown if there's no X509 implementation in the provider.\n", "     * @throws CRLException         thrown when encountering errors when parsing the CRL.\n", "     */\n", "    public static CRL parseCrlFromStream(InputStream input) throws CertificateException, CRLException {\n", "        return SignUtils.parseCrlFromStream(input);\n", "    }\n", "\n", "    /**\n", "     * Retrieves the URL for the issuer certificate for the given CRL.\n", "     *\n", "     * @param crl the CRL response\n", "     *\n", "     * @return the URL or null.\n", "     */\n", "    public static String getIssuerCertURL(CRL crl) {\n", "        IASN1Primitive obj;\n", "        try {\n", "            obj = getExtensionValue(crl, FACTORY.createExtension().getAuthorityInfoAccess().getId());\n", "            return getValueFromAIAExtension(obj, SecurityIDs.ID_CA_ISSUERS);\n", "        } catch (IOException e) {\n", "            return null;\n", "        }\n", "    }\n", "\n", "    // Online Certificate Status Protocol\n", "\n", "    /**\n", "     * Retrieves the OCSP URL from the given certificate.\n", "     *\n", "     * @param certificate the certificate\n", "     *\n", "     * @return the URL or null\n", "     */\n", "    public static String getOCSPURL(X509Certificate certificate) {\n", "        IASN1Primitive obj;\n", "        try {\n", "            obj = getExtensionValue(certificate, FACTORY.createExtension().getAuthorityInfoAccess().getId());\n", "            return getValueFromAIAExtension(obj, SecurityIDs.ID_OCSP);\n", "        } catch (IOException e) {\n", "            return null;\n", "        }\n", "    }\n", "\n", "    // Missing certificates in chain\n", "\n", "    /**\n", "     * Retrieves the URL for the issuer lists certificates for the given certificate.\n", "     *\n", "     * @param certificate the certificate\n", "     *\n", "     * @return the URL or null.\n", "     */\n", "    public static String getIssuerCertURL(X509Certificate certificate) {\n", "        IASN1Primitive obj;\n", "        try {\n", "            obj = getExtensionValue(certificate, FACTORY.createExtension().getAuthorityInfoAccess().getId());\n", "            return getValueFromAIAExtension(obj, SecurityIDs.ID_CA_ISSUERS);\n", "        } catch (IOException e) {\n", "            return null;\n", "        }\n", "    }\n", "\n", "    // Time Stamp Authority\n", "\n", "    /**\n", "     * Gets the URL of the TSA if it's available on the certificate\n", "     *\n", "     * @param certificate a certificate\n", "     *\n", "     * @return a TSA URL\n", "     */\n", "    public static String getTSAURL(X509Certificate certificate) {\n", "        byte[] der = SignUtils.getExtensionValueByOid(certificate, SecurityIDs.ID_TSA);\n", "        if (der == null) {\n", "            return null;\n", "        }\n", "        IASN1Primitive asn1obj;\n", "        try {\n", "            asn1obj = FACTORY.createASN1Primitive(der);\n", "            IDEROctetString octets = FACTORY.createDEROctetString(asn1obj);\n", "            asn1obj = FACTORY.createASN1Primitive(octets.getOctets());\n", "            IASN1Sequence asn1seq = FACTORY.createASN1SequenceInstance(asn1obj);\n", "            return getStringFromGeneralName(asn1seq.getObjectAt(1).toASN1Primitive());\n", "        } catch (IOException e) {\n", "            return null;\n", "        }\n", "    }\n", "\n", "    /**\n", "     * Generates a certificate object and initializes it with the data read from the input stream inStream.\n", "     *\n", "     * @param data the input stream with the certificates.\n", "     *\n", "     * @return a certificate object initialized with the data from the input stream.\n", "     *\n", "     * @throws CertificateException on parsing errors.\n", "     */\n", "    public static Certificate generateCertificate(InputStream data) throws CertificateException {\n", "        return SignUtils.generateCertificate(data, FACTORY.getProvider());\n", "    }\n", "\n", "    /**\n", "     * Try to retrieve CRL and OCSP responses from the signed data crls field.\n", "     *\n", "     * @param taggedObj signed data crls field as {@link IASN1TaggedObject}.\n", "     *\n", "     * @param crls                          collection to store retrieved CRL responses.\n", "     * @param ocsps                         collection of {@link IBasicOCSPResponse} wrappers to store retrieved\n", "     *                                      OCSP responses.\n", "     * @param otherRevocationInfoFormats    collection of revocation info other than OCSP and CRL responses,\n", "     *                                      e.g. SCVP Request and Response, stored as {@link IASN1Sequence}.\n", "     *\n", "     * @throws IOException          if some I/O error occurred.\n", "     * @throws CertificateException if CertificateFactory instance wasn't created.\n", "     */\n", "    public static void retrieveRevocationInfoFromSignedData(IASN1TaggedObject taggedObj, Collection<CRL> crls,\n", "                                                            Collection<IBasicOCSPResponse> ocsps,\n", "                                                            Collection<IASN1Sequence> otherRevocationInfoFormats)\n", "            throws IOException, CertificateException {\n", "        Enumeration revInfo = FACTORY.createASN1Set(taggedObj, false).getObjects();\n", "        while (revInfo.hasMoreElements()) {\n", "            IASN1Sequence s = FACTORY.createASN1Sequence(revInfo.nextElement());\n", "            IASN1ObjectIdentifier o = FACTORY.createASN1ObjectIdentifier(s.getObjectAt(0));\n", "            if (o != null && SecurityIDs.ID_RI_OCSP_RESPONSE.equals(o.getId())) {\n", "                IASN1Sequence ocspResp = FACTORY.createASN1Sequence(s.getObjectAt(1));\n", "                IASN1Enumerated respStatus = FACTORY.createASN1Enumerated(ocspResp.getObjectAt(0));\n", "                if (respStatus.intValueExact() == FACTORY.createOCSPRespBuilderInstance().getSuccessful()) {\n", "                    IASN1Sequence responseBytes = FACTORY.createASN1Sequence(ocspResp.getObjectAt(1));\n", "                    if (responseBytes != null) {\n", "                        ocsps.add(CertificateUtil.createOcsp(responseBytes));\n", "                    }\n", "                }\n", "            } else {\n", "                try {\n", "                    crls.addAll(SignUtils.readAllCRLs(s.getEncoded()));\n", "                } catch (CRLException ignored) {\n", "                    LOGGER.warn(SignLogMessageConstant.UNABLE_TO_PARSE_REV_INFO);\n", "                    otherRevocationInfoFormats.add(s);\n", "                }\n", "            }\n", "        }\n", "    }\n", "\n", "    /**\n", "     * Creates the revocation info (crls field) for SignedData structure:\n", "     * RevocationInfoChoices ::= SET OF RevocationInfoChoice\n", "     *\n", "     *       RevocationInfoChoice ::= CHOICE {\n", "     *         crl CertificateList,\n", "     *         other [1] IMPLICIT OtherRevocationInfoFormat }\n", "     *\n", "     *       OtherRevocationInfoFormat ::= SEQUENCE {\n", "     *         otherRevInfoFormat OBJECT IDENTIFIER,\n", "     *         otherRevInfo ANY DEFINED BY otherRevInfoFormat }\n", "     *\n", "     *       CertificateList  ::=  SEQUENCE  {\n", "     *         tbsCertList          TBSCertList,\n", "     *         signatureAlgorithm   AlgorithmIdentifier,\n", "     *         signatureValue       BIT STRING  }\n", "     *\n", "     * @see <a href=\"https://datatracker.ietf.org/doc/html/rfc5652#section-10.2.1\">RFC 5652 \u00a710.2.1</a>\n", "     *\n", "     * @param crls                          collection of CRL revocation status information.\n", "     * @param ocsps                         collection of OCSP revocation status information.\n", "     * @param otherRevocationInfoFormats    collection of revocation info other than OCSP and CRL responses,\n", "     *                                      e.g. SCVP Request and Response, stored as {@link IASN1Sequence}.\n", "     *\n", "     * @return {@code crls [1] RevocationInfoChoices} field of SignedData structure. Null if SignedData has\n", "     * no revocation data.\n", "     *\n", "     * @throws CRLException if an encoding error occurs.\n", "     * @throws IOException  if an I/O error occurs.\n", "     */\n", "    public static IDERSet createRevocationInfoChoices(Collection<CRL> crls, Collection<IBasicOCSPResponse> ocsps,\n", "                                                      Collection<IASN1Sequence> otherRevocationInfoFormats)\n", "            throws CRLException, IOException {\n", "        if (crls.size() == 0 && ocsps.size() == 0) {\n", "            return null;\n", "        }\n", "        IASN1EncodableVector revocationInfoChoices = FACTORY.createASN1EncodableVector();\n", "\n", "        // Add CRLs\n", "        for (CRL element : crls) {\n", "            // Add crl CertificateList (crl RevocationInfoChoice)\n", "            revocationInfoChoices.add(FACTORY.createASN1Sequence(((X509CRL) element).getEncoded()));\n", "        }\n", "\n", "        // Add OCSPs\n", "        for (IBasicOCSPResponse element : ocsps) {\n", "            IASN1EncodableVector ocspResponseRevInfo = FACTORY.createASN1EncodableVector();\n", "            // Add otherRevInfoFormat (ID_RI_OCSP_RESPONSE)\n", "            ocspResponseRevInfo.add(FACTORY.createASN1ObjectIdentifier(SecurityIDs.ID_RI_OCSP_RESPONSE));\n", "\n", "            IASN1EncodableVector ocspResponse = FACTORY.createASN1EncodableVector();\n", "            ocspResponse.add(FACTORY.createOCSPResponseStatus(\n", "                    FACTORY.createOCSPRespBuilderInstance().getSuccessful()).toASN1Primitive());\n", "            ocspResponse.add(FACTORY.createResponseBytes(\n", "                    FACTORY.createOCSPObjectIdentifiers().getIdPkixOcspBasic(),\n", "                    FACTORY.createDEROctetString(element.toASN1Primitive().getEncoded())).toASN1Primitive());\n", "            // Add otherRevInfo (ocspResponse)\n", "            ocspResponseRevInfo.add(FACTORY.createDERSequence(ocspResponse));\n", "\n", "            // Add other [1] IMPLICIT OtherRevocationInfoFormat (ocsp RevocationInfoChoice)\n", "            revocationInfoChoices.add(FACTORY.createDERSequence(ocspResponseRevInfo));\n", "        }\n", "\n", "        // Add other RevocationInfo formats\n", "        for (IASN1Sequence revInfo : otherRevocationInfoFormats) {\n", "            revocationInfoChoices.add(revInfo);\n", "        }\n", "\n", "        return FACTORY.createDERSet(revocationInfoChoices);\n", "    }\n", "\n", "    /**\n", "     * Checks if the issuer of the provided certID (specified in the OCSP response) and provided issuer of the\n", "     * certificate in question matches, i.e. checks that issuerNameHash and issuerKeyHash fields of the certID\n", "     * is the hash of the issuer's name and public key.\n", "     *\n", "     * <p>\n", "     * SingleResp contains the basic information of the status of the certificate identified by the certID. The issuer\n", "     * name and serial number identify a unique certificate, so if serial numbers of the certificate in question and\n", "     * certID serial number are equals and issuers match, then SingleResp contains the information about the status of\n", "     * the certificate in question.\n", "     *\n", "     * @param certID     certID specified in the OCSP response\n", "     * @param issuerCert the issuer of the certificate in question\n", "     *\n", "     * @return true if the issuers are the same, false otherwise.\n", "     *\n", "     * @throws AbstractOperatorCreationException in case some digest calculator creation error.\n", "     * @throws AbstractOCSPException             in case some digest calculator creation error.\n", "     * @throws CertificateEncodingException      if an encoding error occurs.\n", "     * @throws IOException                       if input-output exception occurs.\n", "     */\n", "    public static boolean checkIfIssuersMatch(ICertificateID certID, X509Certificate issuerCert)\n", "            throws AbstractOperatorCreationException, AbstractOCSPException, CertificateEncodingException, IOException {\n", "        return SignUtils.checkIfIssuersMatch(certID, issuerCert);\n", "    }\n", "\n", "    /**\n", "     * Retrieves certificate extension value by its OID.\n", "     *\n", "     * @param certificate to get extension from\n", "     * @param id          extension OID to retrieve\n", "     *\n", "     * @return encoded extension value.\n", "     */\n", "    public static byte[] getExtensionValueByOid(X509Certificate certificate, String id) {\n", "        return SignUtils.getExtensionValueByOid(certificate, id);\n", "    }\n", "\n", "    /**\n", "     * Checks if an OCSP response is genuine.\n", "     *\n", "     * @param ocspResp      {@link IBasicOCSPResp} the OCSP response wrapper\n", "     * @param responderCert the responder certificate\n", "     *\n", "     * @return true if the OCSP response verifies against the responder certificate.\n", "     */\n", "    public static boolean isSignatureValid(IBasicOCSPResp ocspResp, Certificate responderCert) {\n", "        try {\n", "            return SignUtils.isSignatureValid(ocspResp, responderCert, FACTORY.getProviderName());\n", "        } catch (Exception e) {\n", "            return false;\n", "        }\n", "    }\n", "\n", "    /**\n", "     * Checks if the certificate is signed by provided issuer certificate.\n", "     *\n", "     * @param subjectCertificate a certificate to check\n", "     * @param issuerCertificate  an issuer certificate to check\n", "     *\n", "     * @return true if the first passed certificate is signed by next passed certificate.\n", "     */\n", "    static boolean isIssuerCertificate(X509Certificate subjectCertificate, X509Certificate issuerCertificate) {\n", "        return subjectCertificate.getIssuerX500Principal().equals(issuerCertificate.getSubjectX500Principal());\n", "    }\n", "\n", "    /**\n", "     * Checks if the certificate is self-signed.\n", "     *\n", "     * @param certificate a certificate to check\n", "     *\n", "     * @return true if the certificate is self-signed.\n", "     */\n", "    public static boolean isSelfSigned(X509Certificate certificate) {\n", "        return certificate.getIssuerX500Principal().equals(certificate.getSubjectX500Principal());\n", "    }\n", "\n", "    // helper methods\n", "\n", "    /**\n", "     * Gets certificate extension value.\n", "     *\n", "     * @param certificate the certificate from which we need the ExtensionValue\n", "     * @param oid         the Object Identifier value for the extension\n", "     *\n", "     * @return the extension value as an {@link IASN1Primitive} object.\n", "     * \n", "     * @throws IOException on processing exception.\n", "     */\n", "    public static IASN1Primitive getExtensionValue(X509Certificate certificate, String oid) throws IOException {\n", "        return getExtensionValueFromByteArray(SignUtils.getExtensionValueByOid(certificate, oid));\n", "    }\n", "\n", "    /**\n", "     * Gets CRL extension value.\n", "     *\n", "     * @param crl the CRL from which we need the ExtensionValue\n", "     * @param oid the Object Identifier value for the extension\n", "     *\n", "     * @return the extension value as an {@link IASN1Primitive} object.\n", "     *\n", "     * @throws IOException on processing exception.\n", "     */\n", "    public static IASN1Primitive getExtensionValue(CRL crl, String oid) throws IOException {\n", "        return getExtensionValueFromByteArray(SignUtils.getExtensionValueByOid(crl, oid));\n", "    }\n", "\n", "    /**\n", "     * Converts extension value represented as byte array to {@link IASN1Primitive} object.\n", "     *\n", "     * @param extensionValue the extension value as byte array\n", "     *\n", "     * @return the extension value as an {@link IASN1Primitive} object.\n", "     *\n", "     * @throws IOException on processing exception.\n", "     */\n", "    private static IASN1Primitive getExtensionValueFromByteArray(byte[] extensionValue) throws IOException {\n", "        if (extensionValue == null) {\n", "            return null;\n", "        }\n", "        IASN1OctetString octs;\n", "        try (IASN1InputStream aIn = FACTORY.createASN1InputStream(new ByteArrayInputStream(extensionValue))) {\n", "            octs = FACTORY.createASN1OctetString(aIn.readObject());\n", "        }\n", "        try (IASN1InputStream aIn = FACTORY.createASN1InputStream(new ByteArrayInputStream(octs.getOctets()))) {\n", "            return aIn.readObject();\n", "        }\n", "    }\n", "\n", "    /**\n", "     * Gets a String from an ASN1Primitive\n", "     *\n", "     * @param names the {@link IASN1Primitive} primitive wrapper\n", "     *\n", "     * @return a human-readable String\n", "     */\n", "    private static String getStringFromGeneralName(IASN1Primitive names) {\n", "        IASN1TaggedObject taggedObject = FACTORY.createASN1TaggedObject(names);\n", "        return new String(FACTORY.createASN1OctetString(taggedObject, false).getOctets(), StandardCharsets.ISO_8859_1);\n", "    }\n", "\n", "    /**\n", "     * Retrieves accessLocation value for specified accessMethod from the Authority Information Access extension.\n", "     *\n", "     * @param extensionValue Authority Information Access extension value\n", "     * @param accessMethod   accessMethod OID; usually id-ad-caIssuers or id-ad-ocsp\n", "     *\n", "     * @return the location (URI) of the information.\n", "     */\n", "    private static String getValueFromAIAExtension(IASN1Primitive extensionValue, String accessMethod) {\n", "        if (extensionValue == null) {\n", "            return null;\n", "        }\n", "        IASN1Sequence accessDescriptions = FACTORY.createASN1Sequence(extensionValue);\n", "        for (int i = 0; i < accessDescriptions.size(); i++) {\n", "            IASN1Sequence accessDescription = FACTORY.createASN1Sequence(accessDescriptions.getObjectAt(i));\n", "            IASN1ObjectIdentifier id = FACTORY.createASN1ObjectIdentifier(accessDescription.getObjectAt(0));\n", "            if (accessDescription.size() == 2 && id != null && accessMethod.equals(id.getId())) {\n", "                IASN1Primitive description = FACTORY.createASN1Primitive(accessDescription.getObjectAt(1));\n", "                return getStringFromGeneralName(description);\n", "            }\n", "        }\n", "        return null;\n", "    }\n", "\n", "    /**\n", "     * Helper method that creates the {@link IBasicOCSPResponse} object from the response bytes.\n", "     *\n", "     * @param seq response bytes.\n", "     *\n", "     * @return {@link IBasicOCSPResponse} object.\n", "     *\n", "     * @throws IOException if some I/O error occurred.\n", "     */\n", "    private static IBasicOCSPResponse createOcsp(IASN1Sequence seq) throws IOException {\n", "        IASN1ObjectIdentifier objectIdentifier = FACTORY.createASN1ObjectIdentifier(\n", "                seq.getObjectAt(0));\n", "        IOCSPObjectIdentifiers ocspObjectIdentifiers = FACTORY.createOCSPObjectIdentifiers();\n", "        if (objectIdentifier != null\n", "                && objectIdentifier.getId().equals(ocspObjectIdentifiers.getIdPkixOcspBasic().getId())) {\n", "            IASN1OctetString os = FACTORY.createASN1OctetString(seq.getObjectAt(1));\n", "            try (IASN1InputStream inp = FACTORY.createASN1InputStream(os.getOctets())) {\n", "                return FACTORY.createBasicOCSPResponse(inp.readObject());\n", "            }\n", "        }\n", "        return null;\n", "    }\n", "\n", "    private static IDistributionPoint[] getDistributionPoints(X509Certificate certificate) {\n", "        IASN1Primitive obj;\n", "        try {\n", "            obj = getExtensionValue(certificate, FACTORY.createExtension().getCRlDistributionPoints().getId());\n", "        } catch (IOException e) {\n", "            obj = null;\n", "        }\n", "        if (obj == null) {\n", "            return new IDistributionPoint[0];\n", "        }\n", "        ICRLDistPoint dist = FACTORY.createCRLDistPoint(obj);\n", "        return dist.getDistributionPoints();\n", "    }\n", "}\n"], "test_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.signatures;\n", "\n", "import com.itextpdf.signatures.testutils.PemFileHelper;\n", "import com.itextpdf.test.ExtendedITextTest;\n", "import com.itextpdf.test.annotations.type.BouncyCastleUnitTest;\n", "\n", "import java.io.IOException;\n", "import java.security.cert.CRL;\n", "import java.security.cert.CRLException;\n", "import java.security.cert.CertificateException;\n", "import org.junit.Assert;\n", "import org.junit.Test;\n", "import org.junit.experimental.categories.Category;\n", "\n", "import java.security.cert.X509Certificate;\n", "import java.util.List;\n", "\n", "@Category(BouncyCastleUnitTest.class)\n", "public class CertificateUtilTest extends ExtendedITextTest {\n", "\n", "    private static final String CERTS_SRC = \"./src/test/resources/com/itextpdf/signatures/certs/\";\n", "\n", "    @Test\n", "    public void getTSAURLAdobeExtensionTest() throws Exception {\n", "        X509Certificate tsaCert =\n", "                (X509Certificate) PemFileHelper.readFirstChain(CERTS_SRC + \"adobeExtensionCert.pem\")[0];\n", "        String url = CertificateUtil.getTSAURL(tsaCert);\n", "\n", "        Assert.assertEquals(\"https://itextpdf.com/en\", url);\n", "    }\n", "\n", "    @Test\n", "    public void getTSAURLUsualTimestampCertificateTest() throws Exception {\n", "        X509Certificate tsaCert =\n", "                (X509Certificate) PemFileHelper.readFirstChain(CERTS_SRC + \"tsCertRsa.pem\")[0];\n", "        String url = CertificateUtil.getTSAURL(tsaCert);\n", "\n", "        Assert.assertNull(url);\n", "    }\n", "\n", "    @Test\n", "    public void getTSAURLAdobeExtensionNotTaggedTest() throws Exception {\n", "        X509Certificate tsaCert = (X509Certificate)\n", "                PemFileHelper.readFirstChain(CERTS_SRC + \"adobeExtensionCertWithoutTag.pem\")[0];\n", "\n", "        Assert.assertThrows(NullPointerException.class, () -> CertificateUtil.getTSAURL(tsaCert));\n", "    }\n", "    \n", "    @Test\n", "    public void getCRLFromStringNullTest() throws CertificateException, CRLException, IOException {\n", "        Assert.assertNull(CertificateUtil.getCRL((String) null));\n", "    }\n", "\n", "    @Test\n", "    public void getCRLFromCertificateWithoutCRLTest() throws IOException, CertificateException, CRLException {\n", "        X509Certificate tsaCert =\n", "                (X509Certificate) PemFileHelper.readFirstChain(CERTS_SRC + \"rootRsa.pem\")[0];\n", "        CRL crl = CertificateUtil.getCRL(tsaCert);\n", "        \n", "        Assert.assertNull(crl);\n", "    }\n", "\n", "    @Test\n", "    public void getCRLsFromCertificateWithoutCRLTest() throws IOException, CertificateException, CRLException {\n", "        X509Certificate tsaCert =\n", "                (X509Certificate) PemFileHelper.readFirstChain(CERTS_SRC + \"rootRsa.pem\")[0];\n", "        List<CRL> crls = CertificateUtil.getCRLs(tsaCert);\n", "\n", "        Assert.assertTrue(crls.isEmpty());\n", "    }\n", "}\n"], "method_lines_dic": {"CertificateUtil::::getCRL(java.security.cert.X509Certificate)": [95, 98], "CertificateUtil::::getCRLs(java.security.cert.X509Certificate)": [111, 118], "CertificateUtil::::getCRLURL(java.security.cert.X509Certificate)": [129, 133], "CertificateUtil::::getCRLURLs(java.security.cert.X509Certificate)": [142, 164], "CertificateUtil::::getCRL(java.lang.String)": [205, 210], "CertificateUtil::::parseCrlFromStream(java.io.InputStream)": [222, 224], "CertificateUtil::::getIssuerCertURL(java.security.cert.CRL)": [233, 241], "CertificateUtil::::getOCSPURL(java.security.cert.X509Certificate)": [252, 260], "CertificateUtil::::getIssuerCertURL(java.security.cert.X509Certificate)": [271, 279], "CertificateUtil::::getTSAURL(java.security.cert.X509Certificate)": [290, 305], "CertificateUtil::::generateCertificate(java.io.InputStream)": [316, 318], "CertificateUtil::::getExtensionValueByOid(java.security.cert.X509Certificate,java.lang.String)": [467, 469], "CertificateUtil::::isIssuerCertificate(java.security.cert.X509Certificate,java.security.cert.X509Certificate)": [495, 497], "CertificateUtil::::isSelfSigned(java.security.cert.X509Certificate)": [506, 508], "CertificateUtil::::getExtensionValue(java.security.cert.X509Certificate,java.lang.String)": [522, 524], "CertificateUtil::::getExtensionValue(java.security.cert.CRL,java.lang.String)": [536, 538], "CertificateUtil::::getExtensionValueFromByteArray(byte[])": [549, 560], "CertificateUtil::::getDistributionPoints(java.security.cert.X509Certificate)": [621, 633]}, "test_method_lines_dic": {"CertificateUtilTest::::getTSAURLAdobeExtensionTest()": [45, 52], "CertificateUtilTest::::getTSAURLUsualTimestampCertificateTest()": [54, 61], "CertificateUtilTest::::getTSAURLAdobeExtensionNotTaggedTest()": [63, 69], "CertificateUtilTest::::getCRLFromStringNullTest()": [71, 74], "CertificateUtilTest::::getCRLFromCertificateWithoutCRLTest()": [76, 83], "CertificateUtilTest::::getCRLsFromCertificateWithoutCRLTest()": [85, 92]}, "reverse_method_lines_dic": {"95": "CertificateUtil::::getCRL(java.security.cert.X509Certificate)", "96": "CertificateUtil::::getCRL(java.security.cert.X509Certificate)", "97": "CertificateUtil::::getCRL(java.security.cert.X509Certificate)", "98": "CertificateUtil::::getCRL(java.security.cert.X509Certificate)", "111": "CertificateUtil::::getCRLs(java.security.cert.X509Certificate)", "112": "CertificateUtil::::getCRLs(java.security.cert.X509Certificate)", "113": "CertificateUtil::::getCRLs(java.security.cert.X509Certificate)", "114": "CertificateUtil::::getCRLs(java.security.cert.X509Certificate)", "115": "CertificateUtil::::getCRLs(java.security.cert.X509Certificate)", "116": "CertificateUtil::::getCRLs(java.security.cert.X509Certificate)", "117": "CertificateUtil::::getCRLs(java.security.cert.X509Certificate)", "118": "CertificateUtil::::getCRLs(java.security.cert.X509Certificate)", "129": "CertificateUtil::::getCRLURL(java.security.cert.X509Certificate)", "130": "CertificateUtil::::getCRLURL(java.security.cert.X509Certificate)", "131": "CertificateUtil::::getCRLURL(java.security.cert.X509Certificate)", "132": "CertificateUtil::::getCRLURL(java.security.cert.X509Certificate)", "133": "CertificateUtil::::getCRLURL(java.security.cert.X509Certificate)", "142": "CertificateUtil::::getCRLURLs(java.security.cert.X509Certificate)", "143": "CertificateUtil::::getCRLURLs(java.security.cert.X509Certificate)", "144": "CertificateUtil::::getCRLURLs(java.security.cert.X509Certificate)", "145": "CertificateUtil::::getCRLURLs(java.security.cert.X509Certificate)", "146": "CertificateUtil::::getCRLURLs(java.security.cert.X509Certificate)", "147": "CertificateUtil::::getCRLURLs(java.security.cert.X509Certificate)", "148": "CertificateUtil::::getCRLURLs(java.security.cert.X509Certificate)", "149": "CertificateUtil::::getCRLURLs(java.security.cert.X509Certificate)", "150": "CertificateUtil::::getCRLURLs(java.security.cert.X509Certificate)", "151": "CertificateUtil::::getCRLURLs(java.security.cert.X509Certificate)", "152": "CertificateUtil::::getCRLURLs(java.security.cert.X509Certificate)", "153": "CertificateUtil::::getCRLURLs(java.security.cert.X509Certificate)", "154": "CertificateUtil::::getCRLURLs(java.security.cert.X509Certificate)", "155": "CertificateUtil::::getCRLURLs(java.security.cert.X509Certificate)", "156": "CertificateUtil::::getCRLURLs(java.security.cert.X509Certificate)", "157": "CertificateUtil::::getCRLURLs(java.security.cert.X509Certificate)", "158": "CertificateUtil::::getCRLURLs(java.security.cert.X509Certificate)", "159": "CertificateUtil::::getCRLURLs(java.security.cert.X509Certificate)", "160": "CertificateUtil::::getCRLURLs(java.security.cert.X509Certificate)", "161": "CertificateUtil::::getCRLURLs(java.security.cert.X509Certificate)", "162": "CertificateUtil::::getCRLURLs(java.security.cert.X509Certificate)", "163": "CertificateUtil::::getCRLURLs(java.security.cert.X509Certificate)", "164": "CertificateUtil::::getCRLURLs(java.security.cert.X509Certificate)", "205": "CertificateUtil::::getCRL(java.lang.String)", "206": "CertificateUtil::::getCRL(java.lang.String)", "207": "CertificateUtil::::getCRL(java.lang.String)", "208": "CertificateUtil::::getCRL(java.lang.String)", "209": "CertificateUtil::::getCRL(java.lang.String)", "210": "CertificateUtil::::getCRL(java.lang.String)", "222": "CertificateUtil::::parseCrlFromStream(java.io.InputStream)", "223": "CertificateUtil::::parseCrlFromStream(java.io.InputStream)", "224": "CertificateUtil::::parseCrlFromStream(java.io.InputStream)", "233": "CertificateUtil::::getIssuerCertURL(java.security.cert.CRL)", "234": "CertificateUtil::::getIssuerCertURL(java.security.cert.CRL)", "235": "CertificateUtil::::getIssuerCertURL(java.security.cert.CRL)", "236": "CertificateUtil::::getIssuerCertURL(java.security.cert.CRL)", "237": "CertificateUtil::::getIssuerCertURL(java.security.cert.CRL)", "238": "CertificateUtil::::getIssuerCertURL(java.security.cert.CRL)", "239": "CertificateUtil::::getIssuerCertURL(java.security.cert.CRL)", "240": "CertificateUtil::::getIssuerCertURL(java.security.cert.CRL)", "241": "CertificateUtil::::getIssuerCertURL(java.security.cert.CRL)", "252": "CertificateUtil::::getOCSPURL(java.security.cert.X509Certificate)", "253": "CertificateUtil::::getOCSPURL(java.security.cert.X509Certificate)", "254": "CertificateUtil::::getOCSPURL(java.security.cert.X509Certificate)", "255": "CertificateUtil::::getOCSPURL(java.security.cert.X509Certificate)", "256": "CertificateUtil::::getOCSPURL(java.security.cert.X509Certificate)", "257": "CertificateUtil::::getOCSPURL(java.security.cert.X509Certificate)", "258": "CertificateUtil::::getOCSPURL(java.security.cert.X509Certificate)", "259": "CertificateUtil::::getOCSPURL(java.security.cert.X509Certificate)", "260": "CertificateUtil::::getOCSPURL(java.security.cert.X509Certificate)", "271": "CertificateUtil::::getIssuerCertURL(java.security.cert.X509Certificate)", "272": "CertificateUtil::::getIssuerCertURL(java.security.cert.X509Certificate)", "273": "CertificateUtil::::getIssuerCertURL(java.security.cert.X509Certificate)", "274": "CertificateUtil::::getIssuerCertURL(java.security.cert.X509Certificate)", "275": "CertificateUtil::::getIssuerCertURL(java.security.cert.X509Certificate)", "276": "CertificateUtil::::getIssuerCertURL(java.security.cert.X509Certificate)", "277": "CertificateUtil::::getIssuerCertURL(java.security.cert.X509Certificate)", "278": "CertificateUtil::::getIssuerCertURL(java.security.cert.X509Certificate)", "279": "CertificateUtil::::getIssuerCertURL(java.security.cert.X509Certificate)", "290": "CertificateUtil::::getTSAURL(java.security.cert.X509Certificate)", "291": "CertificateUtil::::getTSAURL(java.security.cert.X509Certificate)", "292": "CertificateUtil::::getTSAURL(java.security.cert.X509Certificate)", "293": "CertificateUtil::::getTSAURL(java.security.cert.X509Certificate)", "294": "CertificateUtil::::getTSAURL(java.security.cert.X509Certificate)", "295": "CertificateUtil::::getTSAURL(java.security.cert.X509Certificate)", "296": "CertificateUtil::::getTSAURL(java.security.cert.X509Certificate)", "297": "CertificateUtil::::getTSAURL(java.security.cert.X509Certificate)", "298": "CertificateUtil::::getTSAURL(java.security.cert.X509Certificate)", "299": "CertificateUtil::::getTSAURL(java.security.cert.X509Certificate)", "300": "CertificateUtil::::getTSAURL(java.security.cert.X509Certificate)", "301": "CertificateUtil::::getTSAURL(java.security.cert.X509Certificate)", "302": "CertificateUtil::::getTSAURL(java.security.cert.X509Certificate)", "303": "CertificateUtil::::getTSAURL(java.security.cert.X509Certificate)", "304": "CertificateUtil::::getTSAURL(java.security.cert.X509Certificate)", "305": "CertificateUtil::::getTSAURL(java.security.cert.X509Certificate)", "316": "CertificateUtil::::generateCertificate(java.io.InputStream)", "317": "CertificateUtil::::generateCertificate(java.io.InputStream)", "318": "CertificateUtil::::generateCertificate(java.io.InputStream)", "467": "CertificateUtil::::getExtensionValueByOid(java.security.cert.X509Certificate,java.lang.String)", "468": "CertificateUtil::::getExtensionValueByOid(java.security.cert.X509Certificate,java.lang.String)", "469": "CertificateUtil::::getExtensionValueByOid(java.security.cert.X509Certificate,java.lang.String)", "495": "CertificateUtil::::isIssuerCertificate(java.security.cert.X509Certificate,java.security.cert.X509Certificate)", "496": "CertificateUtil::::isIssuerCertificate(java.security.cert.X509Certificate,java.security.cert.X509Certificate)", "497": "CertificateUtil::::isIssuerCertificate(java.security.cert.X509Certificate,java.security.cert.X509Certificate)", "506": "CertificateUtil::::isSelfSigned(java.security.cert.X509Certificate)", "507": "CertificateUtil::::isSelfSigned(java.security.cert.X509Certificate)", "508": "CertificateUtil::::isSelfSigned(java.security.cert.X509Certificate)", "522": "CertificateUtil::::getExtensionValue(java.security.cert.X509Certificate,java.lang.String)", "523": "CertificateUtil::::getExtensionValue(java.security.cert.X509Certificate,java.lang.String)", "524": "CertificateUtil::::getExtensionValue(java.security.cert.X509Certificate,java.lang.String)", "536": "CertificateUtil::::getExtensionValue(java.security.cert.CRL,java.lang.String)", "537": "CertificateUtil::::getExtensionValue(java.security.cert.CRL,java.lang.String)", "538": "CertificateUtil::::getExtensionValue(java.security.cert.CRL,java.lang.String)", "549": "CertificateUtil::::getExtensionValueFromByteArray(byte[])", "550": "CertificateUtil::::getExtensionValueFromByteArray(byte[])", "551": "CertificateUtil::::getExtensionValueFromByteArray(byte[])", "552": "CertificateUtil::::getExtensionValueFromByteArray(byte[])", "553": "CertificateUtil::::getExtensionValueFromByteArray(byte[])", "554": "CertificateUtil::::getExtensionValueFromByteArray(byte[])", "555": "CertificateUtil::::getExtensionValueFromByteArray(byte[])", "556": "CertificateUtil::::getExtensionValueFromByteArray(byte[])", "557": "CertificateUtil::::getExtensionValueFromByteArray(byte[])", "558": "CertificateUtil::::getExtensionValueFromByteArray(byte[])", "559": "CertificateUtil::::getExtensionValueFromByteArray(byte[])", "560": "CertificateUtil::::getExtensionValueFromByteArray(byte[])", "621": "CertificateUtil::::getDistributionPoints(java.security.cert.X509Certificate)", "622": "CertificateUtil::::getDistributionPoints(java.security.cert.X509Certificate)", "623": "CertificateUtil::::getDistributionPoints(java.security.cert.X509Certificate)", "624": "CertificateUtil::::getDistributionPoints(java.security.cert.X509Certificate)", "625": "CertificateUtil::::getDistributionPoints(java.security.cert.X509Certificate)", "626": "CertificateUtil::::getDistributionPoints(java.security.cert.X509Certificate)", "627": "CertificateUtil::::getDistributionPoints(java.security.cert.X509Certificate)", "628": "CertificateUtil::::getDistributionPoints(java.security.cert.X509Certificate)", "629": "CertificateUtil::::getDistributionPoints(java.security.cert.X509Certificate)", "630": "CertificateUtil::::getDistributionPoints(java.security.cert.X509Certificate)", "631": "CertificateUtil::::getDistributionPoints(java.security.cert.X509Certificate)", "632": "CertificateUtil::::getDistributionPoints(java.security.cert.X509Certificate)", "633": "CertificateUtil::::getDistributionPoints(java.security.cert.X509Certificate)"}, "test_reverse_method_lines_dic": {"45": "CertificateUtilTest::::getTSAURLAdobeExtensionTest()", "46": "CertificateUtilTest::::getTSAURLAdobeExtensionTest()", "47": "CertificateUtilTest::::getTSAURLAdobeExtensionTest()", "48": "CertificateUtilTest::::getTSAURLAdobeExtensionTest()", "49": "CertificateUtilTest::::getTSAURLAdobeExtensionTest()", "50": "CertificateUtilTest::::getTSAURLAdobeExtensionTest()", "51": "CertificateUtilTest::::getTSAURLAdobeExtensionTest()", "52": "CertificateUtilTest::::getTSAURLAdobeExtensionTest()", "54": "CertificateUtilTest::::getTSAURLUsualTimestampCertificateTest()", "55": "CertificateUtilTest::::getTSAURLUsualTimestampCertificateTest()", "56": "CertificateUtilTest::::getTSAURLUsualTimestampCertificateTest()", "57": "CertificateUtilTest::::getTSAURLUsualTimestampCertificateTest()", "58": "CertificateUtilTest::::getTSAURLUsualTimestampCertificateTest()", "59": "CertificateUtilTest::::getTSAURLUsualTimestampCertificateTest()", "60": "CertificateUtilTest::::getTSAURLUsualTimestampCertificateTest()", "61": "CertificateUtilTest::::getTSAURLUsualTimestampCertificateTest()", "63": "CertificateUtilTest::::getTSAURLAdobeExtensionNotTaggedTest()", "64": "CertificateUtilTest::::getTSAURLAdobeExtensionNotTaggedTest()", "65": "CertificateUtilTest::::getTSAURLAdobeExtensionNotTaggedTest()", "66": "CertificateUtilTest::::getTSAURLAdobeExtensionNotTaggedTest()", "67": "CertificateUtilTest::::getTSAURLAdobeExtensionNotTaggedTest()", "68": "CertificateUtilTest::::getTSAURLAdobeExtensionNotTaggedTest()", "69": "CertificateUtilTest::::getTSAURLAdobeExtensionNotTaggedTest()", "71": "CertificateUtilTest::::getCRLFromStringNullTest()", "72": "CertificateUtilTest::::getCRLFromStringNullTest()", "73": "CertificateUtilTest::::getCRLFromStringNullTest()", "74": "CertificateUtilTest::::getCRLFromStringNullTest()", "76": "CertificateUtilTest::::getCRLFromCertificateWithoutCRLTest()", "77": "CertificateUtilTest::::getCRLFromCertificateWithoutCRLTest()", "78": "CertificateUtilTest::::getCRLFromCertificateWithoutCRLTest()", "79": "CertificateUtilTest::::getCRLFromCertificateWithoutCRLTest()", "80": "CertificateUtilTest::::getCRLFromCertificateWithoutCRLTest()", "81": "CertificateUtilTest::::getCRLFromCertificateWithoutCRLTest()", "82": "CertificateUtilTest::::getCRLFromCertificateWithoutCRLTest()", "83": "CertificateUtilTest::::getCRLFromCertificateWithoutCRLTest()", "85": "CertificateUtilTest::::getCRLsFromCertificateWithoutCRLTest()", "86": "CertificateUtilTest::::getCRLsFromCertificateWithoutCRLTest()", "87": "CertificateUtilTest::::getCRLsFromCertificateWithoutCRLTest()", "88": "CertificateUtilTest::::getCRLsFromCertificateWithoutCRLTest()", "89": "CertificateUtilTest::::getCRLsFromCertificateWithoutCRLTest()", "90": "CertificateUtilTest::::getCRLsFromCertificateWithoutCRLTest()", "91": "CertificateUtilTest::::getCRLsFromCertificateWithoutCRLTest()", "92": "CertificateUtilTest::::getCRLsFromCertificateWithoutCRLTest()"}, "tests": [{"test_lines": [45, 52], "covered_lines": [77, 78, 291, 292, 297, 298, 299, 300, 301, 570, 571]}, {"test_lines": [54, 61], "covered_lines": [77, 78, 291, 292, 293]}, {"test_lines": [63, 69], "covered_lines": [77, 78, 291, 292, 297, 298, 299, 300, 570]}, {"test_lines": [71, 74], "covered_lines": [77, 78, 206, 207]}, {"test_lines": [76, 83], "covered_lines": [77, 78, 97, 131, 132, 143, 144, 145, 163, 206, 207, 523, 550, 551, 624, 627, 628, 629]}, {"test_lines": [85, 92], "covered_lines": [77, 78, 113, 114, 117, 143, 144, 145, 163, 523, 550, 551, 624, 627, 628, 629]}]}, "/bernard/dataset_construction/prep/repos/itext-java/sign/src/main/java/com/itextpdf/signatures/SignaturePolicyInfo.java": {"class_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.signatures;\n", "\n", "import com.itextpdf.bouncycastleconnector.BouncyCastleFactoryCreator;\n", "import com.itextpdf.commons.bouncycastle.IBouncyCastleFactory;\n", "import com.itextpdf.commons.bouncycastle.asn1.IASN1ObjectIdentifier;\n", "import com.itextpdf.commons.bouncycastle.asn1.esf.IOtherHashAlgAndValue;\n", "import com.itextpdf.commons.bouncycastle.asn1.esf.ISigPolicyQualifierInfo;\n", "import com.itextpdf.commons.bouncycastle.asn1.esf.ISignaturePolicyId;\n", "import com.itextpdf.commons.bouncycastle.asn1.esf.ISignaturePolicyIdentifier;\n", "import com.itextpdf.commons.utils.Base64;\n", "\n", "/**\n", " * Class that encapsulates the signature policy information\n", " * \n", " * <p>\n", " * Sample:\n", " * \n", " * <p>\n", " * SignaturePolicyInfo spi = new SignaturePolicyInfo(\"2.16.724.1.3.1.1.2.1.9\",\n", " * \"G7roucf600+f03r/o0bAOQ6WAs0=\", \"SHA-1\", \"https://sede.060.gob.es/politica_de_firma_anexo_1.pdf\");\n", " */\n", "public class SignaturePolicyInfo {\n", "\n", "    private static final IBouncyCastleFactory FACTORY = BouncyCastleFactoryCreator.getFactory();\n", "\n", "    private final String policyIdentifier;\n", "    private final byte[] policyHash;\n", "    private final String policyDigestAlgorithm;\n", "    private final String policyUri;\n", "\n", "    /**\n", "     * Constructs a new {@link SignaturePolicyInfo} instance\n", "     *\n", "     * @param policyIdentifier      the id of the signature policy\n", "     * @param policyHash            the hash of the signature policy\n", "     * @param policyDigestAlgorithm the digestion algorithm of the signature policy\n", "     * @param policyUri             the uri of the full policy description\n", "     */\n", "    public SignaturePolicyInfo(String policyIdentifier, byte[] policyHash, String policyDigestAlgorithm,\n", "            String policyUri) {\n", "        if (policyIdentifier == null || policyIdentifier.isEmpty()) {\n", "            throw new IllegalArgumentException(\"Policy identifier cannot be null\");\n", "        }\n", "        if (policyHash == null) {\n", "            throw new IllegalArgumentException(\"Policy hash cannot be null\");\n", "        }\n", "        if (policyDigestAlgorithm == null || policyDigestAlgorithm.isEmpty()) {\n", "            throw new IllegalArgumentException(\"Policy digest algorithm cannot be null\");\n", "        }\n", "\n", "        this.policyIdentifier = policyIdentifier;\n", "        this.policyHash = policyHash;\n", "        this.policyDigestAlgorithm = policyDigestAlgorithm;\n", "        this.policyUri = policyUri;\n", "    }\n", "\n", "    /**\n", "     * Constructs a new {@link SignaturePolicyInfo} instance\n", "     *\n", "     * @param policyIdentifier      the id of the signature policy\n", "     * @param policyHashBase64      the Base64 presentation of the hash of the signature policy\n", "     * @param policyDigestAlgorithm the digestion algorithm of the signature policy\n", "     * @param policyUri             the uri of the full policy description\n", "     */\n", "    public SignaturePolicyInfo(String policyIdentifier, String policyHashBase64, String policyDigestAlgorithm,\n", "            String policyUri) {\n", "        this(policyIdentifier, policyHashBase64 != null ? Base64.decode(policyHashBase64) : null,\n", "                policyDigestAlgorithm, policyUri);\n", "    }\n", "\n", "    /**\n", "     * Get the ID of the signature policy.\n", "     *\n", "     * @return the ID of the signature policy\n", "     */\n", "    public String getPolicyIdentifier() {\n", "        return policyIdentifier;\n", "    }\n", "\n", "    /**\n", "     * Get the hash of the signature policy.\n", "     *\n", "     * @return the hash of the signature policy\n", "     */\n", "    public byte[] getPolicyHash() {\n", "        return policyHash;\n", "    }\n", "\n", "    /**\n", "     * Get the digestion algorithm of the signature policy.\n", "     *\n", "     * @return the digestion algorithm of the signature policy\n", "     */\n", "    public String getPolicyDigestAlgorithm() {\n", "        return policyDigestAlgorithm;\n", "    }\n", "\n", "    /**\n", "     * Get the uri of the full policy description.\n", "     *\n", "     * @return the uri of the full policy description\n", "     */\n", "    public String getPolicyUri() {\n", "        return policyUri;\n", "    }\n", "\n", "    ISignaturePolicyIdentifier toSignaturePolicyIdentifier() {\n", "        String algId = DigestAlgorithms.getAllowedDigest(this.policyDigestAlgorithm);\n", "\n", "        if (algId == null || algId.isEmpty()) {\n", "            throw new IllegalArgumentException(\"Invalid policy hash algorithm\");\n", "        }\n", "        ISigPolicyQualifierInfo spqi = null;\n", "\n", "        if (this.policyUri != null && !this.policyUri.isEmpty()) {\n", "            spqi = FACTORY.createSigPolicyQualifierInfo(FACTORY.createPKCSObjectIdentifiers().getIdSpqEtsUri(),\n", "                    FACTORY.createDERIA5String(this.policyUri));\n", "        }\n", "\n", "        IASN1ObjectIdentifier identifier = FACTORY.createASN1ObjectIdentifierInstance(\n", "                FACTORY.createASN1ObjectIdentifier(this.policyIdentifier.replace(\"urn:oid:\", \"\")));\n", "        IOtherHashAlgAndValue otherHashAlgAndValue = FACTORY.createOtherHashAlgAndValue(\n", "                FACTORY.createAlgorithmIdentifier(FACTORY.createASN1ObjectIdentifier(algId)),\n", "                FACTORY.createDEROctetString(this.policyHash));\n", "        ISignaturePolicyId signaturePolicyId = FACTORY.createSignaturePolicyId(identifier, otherHashAlgAndValue, spqi);\n", "\n", "        return FACTORY.createSignaturePolicyIdentifier(signaturePolicyId);\n", "    }\n", "}\n"], "test_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.signatures;\n", "\n", "import com.itextpdf.bouncycastleconnector.BouncyCastleFactoryCreator;\n", "import com.itextpdf.commons.bouncycastle.IBouncyCastleFactory;\n", "import com.itextpdf.commons.bouncycastle.asn1.IASN1ObjectIdentifier;\n", "import com.itextpdf.commons.bouncycastle.asn1.IDERIA5String;\n", "import com.itextpdf.commons.bouncycastle.asn1.IDEROctetString;\n", "import com.itextpdf.commons.bouncycastle.asn1.esf.IOtherHashAlgAndValue;\n", "import com.itextpdf.commons.bouncycastle.asn1.esf.ISigPolicyQualifierInfo;\n", "import com.itextpdf.commons.bouncycastle.asn1.esf.ISignaturePolicyId;\n", "import com.itextpdf.commons.bouncycastle.asn1.esf.ISignaturePolicyIdentifier;\n", "import com.itextpdf.commons.bouncycastle.asn1.x509.IAlgorithmIdentifier;\n", "import com.itextpdf.commons.utils.Base64;\n", "import com.itextpdf.test.ExtendedITextTest;\n", "import com.itextpdf.test.annotations.type.BouncyCastleUnitTest;\n", "\n", "import org.junit.Assert;\n", "import org.junit.Test;\n", "import org.junit.experimental.categories.Category;\n", "\n", "@Category(BouncyCastleUnitTest.class)\n", "public class SignaturePolicyInfoTest extends ExtendedITextTest {\n", "    private static final IBouncyCastleFactory BOUNCY_CASTLE_FACTORY = BouncyCastleFactoryCreator.getFactory();\n", "    private final static String POLICY_IDENTIFIER = \"2.16.724.1.3.1.1.2.1.9\";\n", "    private final static String POLICY_HASH_BASE64 = \"G7roucf600+f03r/o0bAOQ6WAs0=\";\n", "    private final static byte[] POLICY_HASH = Base64.decode(POLICY_HASH_BASE64);\n", "    private final static String POLICY_DIGEST_ALGORITHM = \"SHA-256\";\n", "    private final static String POLICY_URI = \"https://sede.060.gob.es/politica_de_firma_anexo_1.pdf\";\n", "\n", "    @Test\n", "    public void checkConstructorTest() {\n", "        SignaturePolicyInfo info = new SignaturePolicyInfo(POLICY_IDENTIFIER, POLICY_HASH,\n", "                POLICY_DIGEST_ALGORITHM, POLICY_URI);\n", "\n", "        Assert.assertEquals(POLICY_IDENTIFIER, info.getPolicyIdentifier());\n", "        Assert.assertArrayEquals(POLICY_HASH, info.getPolicyHash());\n", "        Assert.assertEquals(POLICY_DIGEST_ALGORITHM, info.getPolicyDigestAlgorithm());\n", "        Assert.assertEquals(POLICY_URI, info.getPolicyUri());\n", "    }\n", "\n", "    @Test\n", "    public void checkConstructorWithEncodedHashTest() {\n", "        SignaturePolicyInfo info = new SignaturePolicyInfo(POLICY_IDENTIFIER, POLICY_HASH_BASE64,\n", "                POLICY_DIGEST_ALGORITHM, POLICY_URI);\n", "\n", "        Assert.assertEquals(POLICY_IDENTIFIER, info.getPolicyIdentifier());\n", "        Assert.assertArrayEquals(POLICY_HASH, info.getPolicyHash());\n", "        Assert.assertEquals(POLICY_DIGEST_ALGORITHM, info.getPolicyDigestAlgorithm());\n", "        Assert.assertEquals(POLICY_URI, info.getPolicyUri());\n", "    }\n", "\n", "    @Test\n", "    public void nullIdentifierIsNotAllowedTest() {\n", "        Exception e = Assert.assertThrows(IllegalArgumentException.class,\n", "                () -> new SignaturePolicyInfo(null, POLICY_HASH, POLICY_DIGEST_ALGORITHM, POLICY_URI)\n", "        );\n", "        Assert.assertEquals(\"Policy identifier cannot be null\", e.getMessage());\n", "    }\n", "\n", "    @Test\n", "    public void emptyIdentifierIsNotAllowedTest() {\n", "        Exception e = Assert.assertThrows(IllegalArgumentException.class,\n", "                () -> new SignaturePolicyInfo(\"\", POLICY_HASH, POLICY_DIGEST_ALGORITHM, POLICY_URI)\n", "        );\n", "        Assert.assertEquals(\"Policy identifier cannot be null\", e.getMessage());\n", "    }\n", "\n", "    @Test\n", "    public void nullPolicyHashIsNotAllowedTest() {\n", "        Exception e = Assert.assertThrows(IllegalArgumentException.class,\n", "                () -> new SignaturePolicyInfo(POLICY_IDENTIFIER, (byte[]) null, POLICY_DIGEST_ALGORITHM, POLICY_URI)\n", "        );\n", "        Assert.assertEquals(\"Policy hash cannot be null\", e.getMessage());\n", "    }\n", "\n", "    @Test\n", "    public void nullEncodedPolicyHashIsNotAllowedTest() {\n", "        Exception e = Assert.assertThrows(IllegalArgumentException.class,\n", "                () -> new SignaturePolicyInfo(POLICY_IDENTIFIER, (String) null, POLICY_DIGEST_ALGORITHM, POLICY_URI)\n", "        );\n", "        Assert.assertEquals(\"Policy hash cannot be null\", e.getMessage());\n", "    }\n", "\n", "    @Test\n", "    public void nullDigestAlgorithmIsNotAllowedTest() {\n", "        Exception e = Assert.assertThrows(IllegalArgumentException.class,\n", "                () -> new SignaturePolicyInfo(POLICY_IDENTIFIER, POLICY_HASH, null, POLICY_URI)\n", "        );\n", "        Assert.assertEquals(\"Policy digest algorithm cannot be null\", e.getMessage());\n", "    }\n", "\n", "    @Test\n", "    public void emptyDigestAlgorithmIsNotAllowedTest() {\n", "        Exception e = Assert.assertThrows(IllegalArgumentException.class,\n", "                () -> new SignaturePolicyInfo(POLICY_IDENTIFIER, POLICY_HASH, \"\", POLICY_URI)\n", "        );\n", "        Assert.assertEquals(\"Policy digest algorithm cannot be null\", e.getMessage());\n", "    }\n", "\n", "    @Test\n", "    public void toSignaturePolicyIdentifierTest() {\n", "        ISignaturePolicyIdentifier actual = new SignaturePolicyInfo(POLICY_IDENTIFIER, POLICY_HASH,\n", "                POLICY_DIGEST_ALGORITHM, POLICY_URI).toSignaturePolicyIdentifier();\n", "\n", "        IDERIA5String deria5String = BOUNCY_CASTLE_FACTORY.createDERIA5String(POLICY_URI);\n", "        ISigPolicyQualifierInfo sigPolicyQualifierInfo = BOUNCY_CASTLE_FACTORY.createSigPolicyQualifierInfo(\n", "                BOUNCY_CASTLE_FACTORY.createPKCSObjectIdentifiers().getIdSpqEtsUri(), deria5String);\n", "\n", "        IDEROctetString derOctetString = BOUNCY_CASTLE_FACTORY.createDEROctetString(POLICY_HASH);\n", "        String algId = DigestAlgorithms.getAllowedDigest(POLICY_DIGEST_ALGORITHM);\n", "        IASN1ObjectIdentifier asn1ObjectIdentifier = BOUNCY_CASTLE_FACTORY.createASN1ObjectIdentifier(algId);\n", "        IAlgorithmIdentifier algorithmIdentifier = BOUNCY_CASTLE_FACTORY.createAlgorithmIdentifier(\n", "                asn1ObjectIdentifier);\n", "        IOtherHashAlgAndValue otherHashAlgAndValue = BOUNCY_CASTLE_FACTORY.createOtherHashAlgAndValue(\n", "                algorithmIdentifier, derOctetString);\n", "        IASN1ObjectIdentifier objectIdentifier = BOUNCY_CASTLE_FACTORY.createASN1ObjectIdentifier(POLICY_IDENTIFIER);\n", "        IASN1ObjectIdentifier objectIdentifierInstance = BOUNCY_CASTLE_FACTORY.createASN1ObjectIdentifier(\n", "                objectIdentifier);\n", "        ISignaturePolicyId signaturePolicyId = BOUNCY_CASTLE_FACTORY.createSignaturePolicyId(objectIdentifierInstance,\n", "                otherHashAlgAndValue, sigPolicyQualifierInfo);\n", "\n", "        ISignaturePolicyIdentifier expected = BOUNCY_CASTLE_FACTORY.createSignaturePolicyIdentifier(signaturePolicyId);\n", "\n", "        Assert.assertEquals(expected, actual);\n", "    }\n", "\n", "    @Test\n", "    public void toSignaturePolicyIdentifierUnexpectedAlgorithmTest() {\n", "        SignaturePolicyInfo info = new SignaturePolicyInfo(POLICY_IDENTIFIER, POLICY_HASH, \"SHA-12345\", POLICY_URI);\n", "\n", "        Exception e = Assert.assertThrows(IllegalArgumentException.class,\n", "                () -> info.toSignaturePolicyIdentifier()\n", "        );\n", "        Assert.assertEquals(\"Invalid policy hash algorithm\", e.getMessage());\n", "    }\n", "}\n"], "method_lines_dic": {"SignaturePolicyInfo::::getPolicyIdentifier()": [98, 100], "SignaturePolicyInfo::::getPolicyHash()": [107, 109], "SignaturePolicyInfo::::getPolicyDigestAlgorithm()": [116, 118], "SignaturePolicyInfo::::getPolicyUri()": [125, 127], "SignaturePolicyInfo::::toSignaturePolicyIdentifier()": [129, 150]}, "test_method_lines_dic": {"SignaturePolicyInfoTest::::checkConstructorTest()": [52, 61], "SignaturePolicyInfoTest::::checkConstructorWithEncodedHashTest()": [63, 72], "SignaturePolicyInfoTest::::nullIdentifierIsNotAllowedTest()": [74, 80], "SignaturePolicyInfoTest::::emptyIdentifierIsNotAllowedTest()": [82, 88], "SignaturePolicyInfoTest::::nullPolicyHashIsNotAllowedTest()": [90, 96], "SignaturePolicyInfoTest::::nullEncodedPolicyHashIsNotAllowedTest()": [98, 104], "SignaturePolicyInfoTest::::nullDigestAlgorithmIsNotAllowedTest()": [106, 112], "SignaturePolicyInfoTest::::emptyDigestAlgorithmIsNotAllowedTest()": [114, 120], "SignaturePolicyInfoTest::::toSignaturePolicyIdentifierTest()": [122, 147], "SignaturePolicyInfoTest::::toSignaturePolicyIdentifierUnexpectedAlgorithmTest()": [149, 157]}, "reverse_method_lines_dic": {"98": "SignaturePolicyInfo::::getPolicyIdentifier()", "99": "SignaturePolicyInfo::::getPolicyIdentifier()", "100": "SignaturePolicyInfo::::getPolicyIdentifier()", "107": "SignaturePolicyInfo::::getPolicyHash()", "108": "SignaturePolicyInfo::::getPolicyHash()", "109": "SignaturePolicyInfo::::getPolicyHash()", "116": "SignaturePolicyInfo::::getPolicyDigestAlgorithm()", "117": "SignaturePolicyInfo::::getPolicyDigestAlgorithm()", "118": "SignaturePolicyInfo::::getPolicyDigestAlgorithm()", "125": "SignaturePolicyInfo::::getPolicyUri()", "126": "SignaturePolicyInfo::::getPolicyUri()", "127": "SignaturePolicyInfo::::getPolicyUri()", "129": "SignaturePolicyInfo::::toSignaturePolicyIdentifier()", "130": "SignaturePolicyInfo::::toSignaturePolicyIdentifier()", "131": "SignaturePolicyInfo::::toSignaturePolicyIdentifier()", "132": "SignaturePolicyInfo::::toSignaturePolicyIdentifier()", "133": "SignaturePolicyInfo::::toSignaturePolicyIdentifier()", "134": "SignaturePolicyInfo::::toSignaturePolicyIdentifier()", "135": "SignaturePolicyInfo::::toSignaturePolicyIdentifier()", "136": "SignaturePolicyInfo::::toSignaturePolicyIdentifier()", "137": "SignaturePolicyInfo::::toSignaturePolicyIdentifier()", "138": "SignaturePolicyInfo::::toSignaturePolicyIdentifier()", "139": "SignaturePolicyInfo::::toSignaturePolicyIdentifier()", "140": "SignaturePolicyInfo::::toSignaturePolicyIdentifier()", "141": "SignaturePolicyInfo::::toSignaturePolicyIdentifier()", "142": "SignaturePolicyInfo::::toSignaturePolicyIdentifier()", "143": "SignaturePolicyInfo::::toSignaturePolicyIdentifier()", "144": "SignaturePolicyInfo::::toSignaturePolicyIdentifier()", "145": "SignaturePolicyInfo::::toSignaturePolicyIdentifier()", "146": "SignaturePolicyInfo::::toSignaturePolicyIdentifier()", "147": "SignaturePolicyInfo::::toSignaturePolicyIdentifier()", "148": "SignaturePolicyInfo::::toSignaturePolicyIdentifier()", "149": "SignaturePolicyInfo::::toSignaturePolicyIdentifier()", "150": "SignaturePolicyInfo::::toSignaturePolicyIdentifier()"}, "test_reverse_method_lines_dic": {"52": "SignaturePolicyInfoTest::::checkConstructorTest()", "53": "SignaturePolicyInfoTest::::checkConstructorTest()", "54": "SignaturePolicyInfoTest::::checkConstructorTest()", "55": "SignaturePolicyInfoTest::::checkConstructorTest()", "56": "SignaturePolicyInfoTest::::checkConstructorTest()", "57": "SignaturePolicyInfoTest::::checkConstructorTest()", "58": "SignaturePolicyInfoTest::::checkConstructorTest()", "59": "SignaturePolicyInfoTest::::checkConstructorTest()", "60": "SignaturePolicyInfoTest::::checkConstructorTest()", "61": "SignaturePolicyInfoTest::::checkConstructorTest()", "63": "SignaturePolicyInfoTest::::checkConstructorWithEncodedHashTest()", "64": "SignaturePolicyInfoTest::::checkConstructorWithEncodedHashTest()", "65": "SignaturePolicyInfoTest::::checkConstructorWithEncodedHashTest()", "66": "SignaturePolicyInfoTest::::checkConstructorWithEncodedHashTest()", "67": "SignaturePolicyInfoTest::::checkConstructorWithEncodedHashTest()", "68": "SignaturePolicyInfoTest::::checkConstructorWithEncodedHashTest()", "69": "SignaturePolicyInfoTest::::checkConstructorWithEncodedHashTest()", "70": "SignaturePolicyInfoTest::::checkConstructorWithEncodedHashTest()", "71": "SignaturePolicyInfoTest::::checkConstructorWithEncodedHashTest()", "72": "SignaturePolicyInfoTest::::checkConstructorWithEncodedHashTest()", "74": "SignaturePolicyInfoTest::::nullIdentifierIsNotAllowedTest()", "75": "SignaturePolicyInfoTest::::nullIdentifierIsNotAllowedTest()", "76": "SignaturePolicyInfoTest::::nullIdentifierIsNotAllowedTest()", "77": "SignaturePolicyInfoTest::::nullIdentifierIsNotAllowedTest()", "78": "SignaturePolicyInfoTest::::nullIdentifierIsNotAllowedTest()", "79": "SignaturePolicyInfoTest::::nullIdentifierIsNotAllowedTest()", "80": "SignaturePolicyInfoTest::::nullIdentifierIsNotAllowedTest()", "82": "SignaturePolicyInfoTest::::emptyIdentifierIsNotAllowedTest()", "83": "SignaturePolicyInfoTest::::emptyIdentifierIsNotAllowedTest()", "84": "SignaturePolicyInfoTest::::emptyIdentifierIsNotAllowedTest()", "85": "SignaturePolicyInfoTest::::emptyIdentifierIsNotAllowedTest()", "86": "SignaturePolicyInfoTest::::emptyIdentifierIsNotAllowedTest()", "87": "SignaturePolicyInfoTest::::emptyIdentifierIsNotAllowedTest()", "88": "SignaturePolicyInfoTest::::emptyIdentifierIsNotAllowedTest()", "90": "SignaturePolicyInfoTest::::nullPolicyHashIsNotAllowedTest()", "91": "SignaturePolicyInfoTest::::nullPolicyHashIsNotAllowedTest()", "92": "SignaturePolicyInfoTest::::nullPolicyHashIsNotAllowedTest()", "93": "SignaturePolicyInfoTest::::nullPolicyHashIsNotAllowedTest()", "94": "SignaturePolicyInfoTest::::nullPolicyHashIsNotAllowedTest()", "95": "SignaturePolicyInfoTest::::nullPolicyHashIsNotAllowedTest()", "96": "SignaturePolicyInfoTest::::nullPolicyHashIsNotAllowedTest()", "98": "SignaturePolicyInfoTest::::nullEncodedPolicyHashIsNotAllowedTest()", "99": "SignaturePolicyInfoTest::::nullEncodedPolicyHashIsNotAllowedTest()", "100": "SignaturePolicyInfoTest::::nullEncodedPolicyHashIsNotAllowedTest()", "101": "SignaturePolicyInfoTest::::nullEncodedPolicyHashIsNotAllowedTest()", "102": "SignaturePolicyInfoTest::::nullEncodedPolicyHashIsNotAllowedTest()", "103": "SignaturePolicyInfoTest::::nullEncodedPolicyHashIsNotAllowedTest()", "104": "SignaturePolicyInfoTest::::nullEncodedPolicyHashIsNotAllowedTest()", "106": "SignaturePolicyInfoTest::::nullDigestAlgorithmIsNotAllowedTest()", "107": "SignaturePolicyInfoTest::::nullDigestAlgorithmIsNotAllowedTest()", "108": "SignaturePolicyInfoTest::::nullDigestAlgorithmIsNotAllowedTest()", "109": "SignaturePolicyInfoTest::::nullDigestAlgorithmIsNotAllowedTest()", "110": "SignaturePolicyInfoTest::::nullDigestAlgorithmIsNotAllowedTest()", "111": "SignaturePolicyInfoTest::::nullDigestAlgorithmIsNotAllowedTest()", "112": "SignaturePolicyInfoTest::::nullDigestAlgorithmIsNotAllowedTest()", "114": "SignaturePolicyInfoTest::::emptyDigestAlgorithmIsNotAllowedTest()", "115": "SignaturePolicyInfoTest::::emptyDigestAlgorithmIsNotAllowedTest()", "116": "SignaturePolicyInfoTest::::emptyDigestAlgorithmIsNotAllowedTest()", "117": "SignaturePolicyInfoTest::::emptyDigestAlgorithmIsNotAllowedTest()", "118": "SignaturePolicyInfoTest::::emptyDigestAlgorithmIsNotAllowedTest()", "119": "SignaturePolicyInfoTest::::emptyDigestAlgorithmIsNotAllowedTest()", "120": "SignaturePolicyInfoTest::::emptyDigestAlgorithmIsNotAllowedTest()", "122": "SignaturePolicyInfoTest::::toSignaturePolicyIdentifierTest()", "123": "SignaturePolicyInfoTest::::toSignaturePolicyIdentifierTest()", "124": "SignaturePolicyInfoTest::::toSignaturePolicyIdentifierTest()", "125": "SignaturePolicyInfoTest::::toSignaturePolicyIdentifierTest()", "126": "SignaturePolicyInfoTest::::toSignaturePolicyIdentifierTest()", "127": "SignaturePolicyInfoTest::::toSignaturePolicyIdentifierTest()", "128": "SignaturePolicyInfoTest::::toSignaturePolicyIdentifierTest()", "129": "SignaturePolicyInfoTest::::toSignaturePolicyIdentifierTest()", "130": "SignaturePolicyInfoTest::::toSignaturePolicyIdentifierTest()", "131": "SignaturePolicyInfoTest::::toSignaturePolicyIdentifierTest()", "132": "SignaturePolicyInfoTest::::toSignaturePolicyIdentifierTest()", "133": "SignaturePolicyInfoTest::::toSignaturePolicyIdentifierTest()", "134": "SignaturePolicyInfoTest::::toSignaturePolicyIdentifierTest()", "135": "SignaturePolicyInfoTest::::toSignaturePolicyIdentifierTest()", "136": "SignaturePolicyInfoTest::::toSignaturePolicyIdentifierTest()", "137": "SignaturePolicyInfoTest::::toSignaturePolicyIdentifierTest()", "138": "SignaturePolicyInfoTest::::toSignaturePolicyIdentifierTest()", "139": "SignaturePolicyInfoTest::::toSignaturePolicyIdentifierTest()", "140": "SignaturePolicyInfoTest::::toSignaturePolicyIdentifierTest()", "141": "SignaturePolicyInfoTest::::toSignaturePolicyIdentifierTest()", "142": "SignaturePolicyInfoTest::::toSignaturePolicyIdentifierTest()", "143": "SignaturePolicyInfoTest::::toSignaturePolicyIdentifierTest()", "144": "SignaturePolicyInfoTest::::toSignaturePolicyIdentifierTest()", "145": "SignaturePolicyInfoTest::::toSignaturePolicyIdentifierTest()", "146": "SignaturePolicyInfoTest::::toSignaturePolicyIdentifierTest()", "147": "SignaturePolicyInfoTest::::toSignaturePolicyIdentifierTest()", "149": "SignaturePolicyInfoTest::::toSignaturePolicyIdentifierUnexpectedAlgorithmTest()", "150": "SignaturePolicyInfoTest::::toSignaturePolicyIdentifierUnexpectedAlgorithmTest()", "151": "SignaturePolicyInfoTest::::toSignaturePolicyIdentifierUnexpectedAlgorithmTest()", "152": "SignaturePolicyInfoTest::::toSignaturePolicyIdentifierUnexpectedAlgorithmTest()", "153": "SignaturePolicyInfoTest::::toSignaturePolicyIdentifierUnexpectedAlgorithmTest()", "154": "SignaturePolicyInfoTest::::toSignaturePolicyIdentifierUnexpectedAlgorithmTest()", "155": "SignaturePolicyInfoTest::::toSignaturePolicyIdentifierUnexpectedAlgorithmTest()", "156": "SignaturePolicyInfoTest::::toSignaturePolicyIdentifierUnexpectedAlgorithmTest()", "157": "SignaturePolicyInfoTest::::toSignaturePolicyIdentifierUnexpectedAlgorithmTest()"}, "tests": [{"test_lines": [52, 61], "covered_lines": [46, 62, 63, 66, 69, 73, 74, 75, 76, 77, 99, 108, 117, 126]}, {"test_lines": [63, 72], "covered_lines": [46, 62, 63, 66, 69, 73, 74, 75, 76, 77, 89, 91, 99, 108, 117, 126]}, {"test_lines": [74, 80], "covered_lines": [46, 62, 63, 64]}, {"test_lines": [82, 88], "covered_lines": [46, 62, 63, 64]}, {"test_lines": [90, 96], "covered_lines": [46, 62, 63, 66, 67]}, {"test_lines": [98, 104], "covered_lines": [46, 62, 63, 66, 67, 89]}, {"test_lines": [106, 112], "covered_lines": [46, 62, 63, 66, 69, 70]}, {"test_lines": [114, 120], "covered_lines": [46, 62, 63, 66, 69, 70]}, {"test_lines": [122, 147], "covered_lines": [46, 62, 63, 66, 69, 73, 74, 75, 76, 77, 130, 132, 135, 137, 138, 139, 142, 143, 144, 145, 146, 147, 149]}, {"test_lines": [149, 157], "covered_lines": [46, 62, 63, 66, 69, 73, 74, 75, 76, 77, 130, 132, 133]}]}, "/bernard/dataset_construction/prep/repos/itext-java/sign/src/main/java/com/itextpdf/signatures/PdfPKCS7.java": {"class_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.signatures;\n", "\n", "import com.itextpdf.bouncycastleconnector.BouncyCastleFactoryCreator;\n", "import com.itextpdf.commons.bouncycastle.IBouncyCastleFactory;\n", "import com.itextpdf.commons.bouncycastle.asn1.IASN1Encodable;\n", "import com.itextpdf.commons.bouncycastle.asn1.IASN1EncodableVector;\n", "import com.itextpdf.commons.bouncycastle.asn1.IASN1Enumerated;\n", "import com.itextpdf.commons.bouncycastle.asn1.IASN1InputStream;\n", "import com.itextpdf.commons.bouncycastle.asn1.IASN1ObjectIdentifier;\n", "import com.itextpdf.commons.bouncycastle.asn1.IASN1OctetString;\n", "import com.itextpdf.commons.bouncycastle.asn1.IASN1OutputStream;\n", "import com.itextpdf.commons.bouncycastle.asn1.IASN1Primitive;\n", "import com.itextpdf.commons.bouncycastle.asn1.IASN1Sequence;\n", "import com.itextpdf.commons.bouncycastle.asn1.IASN1Set;\n", "import com.itextpdf.commons.bouncycastle.asn1.IASN1TaggedObject;\n", "import com.itextpdf.commons.bouncycastle.asn1.IDEROctetString;\n", "import com.itextpdf.commons.bouncycastle.asn1.IDERSequence;\n", "import com.itextpdf.commons.bouncycastle.asn1.IDERSet;\n", "import com.itextpdf.commons.bouncycastle.asn1.cms.IAttribute;\n", "import com.itextpdf.commons.bouncycastle.asn1.cms.IAttributeTable;\n", "import com.itextpdf.commons.bouncycastle.asn1.cms.IContentInfo;\n", "import com.itextpdf.commons.bouncycastle.asn1.esf.ISignaturePolicyIdentifier;\n", "import com.itextpdf.commons.bouncycastle.asn1.ess.IESSCertID;\n", "import com.itextpdf.commons.bouncycastle.asn1.ess.IESSCertIDv2;\n", "import com.itextpdf.commons.bouncycastle.asn1.ess.ISigningCertificate;\n", "import com.itextpdf.commons.bouncycastle.asn1.ess.ISigningCertificateV2;\n", "import com.itextpdf.commons.bouncycastle.asn1.ocsp.IBasicOCSPResponse;\n", "import com.itextpdf.commons.bouncycastle.asn1.ocsp.IOCSPObjectIdentifiers;\n", "import com.itextpdf.commons.bouncycastle.asn1.pkcs.IPKCSObjectIdentifiers;\n", "import com.itextpdf.commons.bouncycastle.asn1.pkcs.IRSASSAPSSParams;\n", "import com.itextpdf.commons.bouncycastle.asn1.tsp.IMessageImprint;\n", "import com.itextpdf.commons.bouncycastle.asn1.tsp.ITSTInfo;\n", "import com.itextpdf.commons.bouncycastle.asn1.x509.IAlgorithmIdentifier;\n", "import com.itextpdf.commons.bouncycastle.cert.ocsp.ICertificateID;\n", "import com.itextpdf.commons.bouncycastle.cert.ocsp.ISingleResp;\n", "import com.itextpdf.commons.utils.MessageFormatUtil;\n", "import com.itextpdf.kernel.exceptions.PdfException;\n", "import com.itextpdf.kernel.pdf.PdfName;\n", "import com.itextpdf.signatures.exceptions.SignExceptionMessageConstant;\n", "\n", "import java.io.ByteArrayInputStream;\n", "import java.io.ByteArrayOutputStream;\n", "import java.io.IOException;\n", "import java.math.BigInteger;\n", "import java.security.GeneralSecurityException;\n", "import java.security.InvalidAlgorithmParameterException;\n", "import java.security.InvalidKeyException;\n", "import java.security.MessageDigest;\n", "import java.security.NoSuchAlgorithmException;\n", "import java.security.NoSuchProviderException;\n", "import java.security.PrivateKey;\n", "import java.security.PublicKey;\n", "import java.security.Signature;\n", "import java.security.SignatureException;\n", "import java.security.cert.CRL;\n", "import java.security.cert.Certificate;\n", "import java.security.cert.X509CRL;\n", "import java.security.cert.X509Certificate;\n", "import java.util.ArrayList;\n", "import java.util.Arrays;\n", "import java.util.Calendar;\n", "import java.util.Collection;\n", "import java.util.Collections;\n", "import java.util.Enumeration;\n", "import java.util.HashSet;\n", "import java.util.List;\n", "import java.util.Set;\n", "import javax.security.auth.x500.X500Principal;\n", "\n", "/**\n", " * This class does all the processing related to signing\n", " * and verifying a PKCS#7 / CMS signature.\n", " */\n", "public class PdfPKCS7 {\n", "\n", "    private static final IBouncyCastleFactory BOUNCY_CASTLE_FACTORY = BouncyCastleFactoryCreator.getFactory();\n", "\n", "    private ISignaturePolicyIdentifier signaturePolicyIdentifier;\n", "\n", "    // Encryption provider\n", "\n", "    /**\n", "     * The encryption provider, e.g. \"BC\" if you use BouncyCastle.\n", "     */\n", "    private final String provider;\n", "\n", "    // Signature info\n", "\n", "    /**\n", "     * Holds value of property signName.\n", "     */\n", "    private String signName;\n", "\n", "    /**\n", "     * Holds value of property reason.\n", "     */\n", "    private String reason;\n", "\n", "    /**\n", "     * Holds value of property location.\n", "     */\n", "    private String location;\n", "\n", "    /**\n", "     * Holds value of property signDate.\n", "     */\n", "    private Calendar signDate = (Calendar) TimestampConstants.UNDEFINED_TIMESTAMP_DATE;\n", "\n", "    /**\n", "     * Collection to store revocation info other than OCSP and CRL responses, e.g. SCVP Request and Response.\n", "     */\n", "    private final Collection<IASN1Sequence> signedDataRevocationInfo = new ArrayList<>();\n", "\n", "    // Constructors for creating new signatures\n", "\n", "    /**\n", "     * Assembles all the elements needed to create a signature, except for the data.\n", "     *\n", "     * @param privKey         the private key\n", "     * @param certChain       the certificate chain\n", "     * @param interfaceDigest the interface digest\n", "     * @param hashAlgorithm   the hash algorithm\n", "     * @param provider        the provider or <code>null</code> for the default provider\n", "     * @param hasEncapContent <CODE>true</CODE> if the sub-filter is adbe.pkcs7.sha1\n", "     * @throws InvalidKeyException      on error\n", "     * @throws NoSuchProviderException  on error\n", "     * @throws NoSuchAlgorithmException on error\n", "     */\n", "    public PdfPKCS7(PrivateKey privKey, Certificate[] certChain,\n", "                    String hashAlgorithm, String provider, IExternalDigest interfaceDigest, boolean hasEncapContent)\n", "            throws InvalidKeyException, NoSuchProviderException, NoSuchAlgorithmException {\n", "        this.provider = provider;\n", "        this.interfaceDigest = interfaceDigest;\n", "        // message digest\n", "        digestAlgorithmOid = DigestAlgorithms.getAllowedDigest(hashAlgorithm);\n", "        if (digestAlgorithmOid == null) {\n", "            throw new PdfException(SignExceptionMessageConstant.UNKNOWN_HASH_ALGORITHM)\n", "                    .setMessageParams(hashAlgorithm);\n", "        }\n", "\n", "        // Copy the certificates\n", "        signCert = (X509Certificate) certChain[0];\n", "        certs = new ArrayList<>();\n", "        Collections.addAll(certs, certChain);\n", "\n", "        // initialize and add the digest algorithms.\n", "        digestalgos = new HashSet<>();\n", "        digestalgos.add(digestAlgorithmOid);\n", "\n", "        // find the signing algorithm\n", "        if (privKey != null) {\n", "            String signatureAlgo = SignUtils.getPrivateKeyAlgorithm(privKey);\n", "            String mechanismOid = SignatureMechanisms.getSignatureMechanismOid(signatureAlgo, hashAlgorithm);\n", "            if (mechanismOid == null) {\n", "                throw new PdfException(SignExceptionMessageConstant.COULD_NOT_DETERMINE_SIGNATURE_MECHANISM_OID)\n", "                        .setMessageParams(signatureAlgo, hashAlgorithm);\n", "            }\n", "            this.signatureMechanismOid = mechanismOid;\n", "        }\n", "\n", "        // initialize the encapsulated content\n", "        if (hasEncapContent) {\n", "            encapMessageContent = new byte[0];\n", "            messageDigest = DigestAlgorithms.getMessageDigest(getDigestAlgorithmName(), provider);\n", "        }\n", "\n", "        // initialize the Signature object\n", "        if (privKey != null) {\n", "            sig = initSignature(privKey);\n", "        }\n", "    }\n", "\n", "    /**\n", "     * Assembles all the elements needed to create a signature, except for the data.\n", "     *\n", "     * @param privKey         the private key\n", "     * @param certChain       the certificate chain\n", "     * @param hashAlgorithm   the hash algorithm\n", "     * @param provider        the provider or <code>null</code> for the default provider\n", "     * @param hasEncapContent <CODE>true</CODE> if the sub-filter is adbe.pkcs7.sha1\n", "     * @throws InvalidKeyException      on error\n", "     * @throws NoSuchProviderException  on error\n", "     * @throws NoSuchAlgorithmException on error\n", "     */\n", "    public PdfPKCS7(PrivateKey privKey, Certificate[] certChain, String hashAlgorithm, String provider,\n", "                    boolean hasEncapContent)\n", "            throws InvalidKeyException, NoSuchProviderException, NoSuchAlgorithmException {\n", "        this(privKey, certChain, hashAlgorithm, provider, new BouncyCastleDigest(), hasEncapContent);\n", "    }\n", "\n", "    // Constructors for validating existing signatures\n", "\n", "    /**\n", "     * Use this constructor if you want to verify a signature using the sub-filter adbe.x509.rsa_sha1.\n", "     *\n", "     * @param contentsKey the /Contents key\n", "     * @param certsKey    the /Cert key\n", "     * @param provider    the provider or <code>null</code> for the default provider\n", "     */\n", "    public PdfPKCS7(byte[] contentsKey, byte[] certsKey, String provider) {\n", "        try {\n", "            this.provider = provider;\n", "            certs = SignUtils.readAllCerts(certsKey);\n", "            signCerts = certs;\n", "            signCert = (X509Certificate) SignUtils.getFirstElement(certs);\n", "            crls = new ArrayList<>();\n", "\n", "            try (IASN1InputStream in =\n", "                    BOUNCY_CASTLE_FACTORY.createASN1InputStream(new ByteArrayInputStream(contentsKey))) {\n", "                signatureValue = BOUNCY_CASTLE_FACTORY.createASN1OctetString(in.readObject()).getOctets();\n", "            }\n", "\n", "            sig = SignUtils.getSignatureHelper(\"SHA1withRSA\", provider);\n", "            sig.initVerify(signCert.getPublicKey());\n", "\n", "            // setting the oid to SHA1withRSA\n", "            digestAlgorithmOid = \"1.2.840.10040.4.3\";\n", "            signatureMechanismOid = \"1.3.36.3.3.1.2\";\n", "        } catch (Exception e) {\n", "            throw new PdfException(e);\n", "        }\n", "    }\n", "\n", "    /**\n", "     * Use this constructor if you want to verify a signature.\n", "     *\n", "     * @param contentsKey   the /Contents key\n", "     * @param filterSubtype the filtersubtype\n", "     * @param provider      the provider or <code>null</code> for the default provider\n", "     */\n", "    public PdfPKCS7(byte[] contentsKey, PdfName filterSubtype, String provider) {\n", "        this.filterSubtype = filterSubtype;\n", "        isTsp = PdfName.ETSI_RFC3161.equals(filterSubtype);\n", "        isCades = PdfName.ETSI_CAdES_DETACHED.equals(filterSubtype);\n", "        try {\n", "            this.provider = provider;\n", "\n", "            //\n", "            // Basic checks to make sure it's a PKCS#7 SignedData Object\n", "            //\n", "            IASN1Primitive pkcs;\n", "\n", "            try (IASN1InputStream din =\n", "                    BOUNCY_CASTLE_FACTORY.createASN1InputStream(new ByteArrayInputStream(contentsKey))) {\n", "                pkcs = din.readObject();\n", "            } catch (IOException e) {\n", "                throw new IllegalArgumentException(\n", "                        SignExceptionMessageConstant.CANNOT_DECODE_PKCS7_SIGNED_DATA_OBJECT);\n", "            }\n", "            IASN1Sequence signedData = BOUNCY_CASTLE_FACTORY.createASN1Sequence(pkcs);\n", "            if (signedData == null) {\n", "                throw new IllegalArgumentException(\n", "                        SignExceptionMessageConstant.NOT_A_VALID_PKCS7_OBJECT_NOT_A_SEQUENCE);\n", "            }\n", "            IASN1ObjectIdentifier objId = BOUNCY_CASTLE_FACTORY.createASN1ObjectIdentifier(signedData.getObjectAt(0));\n", "            if (!objId.getId().equals(SecurityIDs.ID_PKCS7_SIGNED_DATA)) {\n", "                throw new IllegalArgumentException(\n", "                        SignExceptionMessageConstant.NOT_A_VALID_PKCS7_OBJECT_NOT_SIGNED_DATA);\n", "            }\n", "            IASN1Sequence content = BOUNCY_CASTLE_FACTORY.createASN1Sequence(\n", "                    BOUNCY_CASTLE_FACTORY.createASN1TaggedObject(signedData.getObjectAt(1)).getObject());\n", "            // the positions that we care are:\n", "            //     0 - version\n", "            //     1 - digestAlgorithms\n", "            //     2 - possible ID_PKCS7_DATA\n", "            //     (the certificates and crls are taken out by other means)\n", "            //     last - signerInfos\n", "\n", "            // the version\n", "            version = BOUNCY_CASTLE_FACTORY.createASN1Integer(content.getObjectAt(0)).getValue().intValue();\n", "\n", "            // the digestAlgorithms\n", "            digestalgos = new HashSet<>();\n", "            Enumeration e = BOUNCY_CASTLE_FACTORY.createASN1Set(content.getObjectAt(1)).getObjects();\n", "            while (e.hasMoreElements()) {\n", "                IASN1Sequence s = BOUNCY_CASTLE_FACTORY.createASN1Sequence(e.nextElement());\n", "                IASN1ObjectIdentifier o = BOUNCY_CASTLE_FACTORY.createASN1ObjectIdentifier(s.getObjectAt(0));\n", "                digestalgos.add(o.getId());\n", "            }\n", "\n", "            // the possible ID_PKCS7_DATA\n", "            IASN1Sequence encapContentInfo = BOUNCY_CASTLE_FACTORY.createASN1Sequence(content.getObjectAt(2));\n", "            if (encapContentInfo.size() > 1) {\n", "                IASN1OctetString encapContent = BOUNCY_CASTLE_FACTORY.createASN1OctetString(\n", "                        BOUNCY_CASTLE_FACTORY.createASN1TaggedObject(encapContentInfo.getObjectAt(1)).getObject());\n", "                this.encapMessageContent = encapContent.getOctets();\n", "            }\n", "\n", "            int next = 3;\n", "            IASN1TaggedObject taggedObj;\n", "            while ((taggedObj = BOUNCY_CASTLE_FACTORY.createASN1TaggedObject(content.getObjectAt(next))) != null) {\n", "                ++next;\n", "                if (taggedObj.getTagNo() == 1) {\n", "                    // the crls\n", "                    CertificateUtil.retrieveRevocationInfoFromSignedData(taggedObj, this.signedDataCrls,\n", "                            this.signedDataOcsps, this.signedDataRevocationInfo);\n", "                }\n", "            }\n", "\n", "            // the certificates\n", "            this.certs = SignUtils.readAllCerts(contentsKey);\n", "\n", "            // the signerInfos\n", "            IASN1Set signerInfos = BOUNCY_CASTLE_FACTORY.createASN1Set(content.getObjectAt(next));\n", "            if (signerInfos.size() != 1) {\n", "                throw new IllegalArgumentException(\n", "                        SignExceptionMessageConstant.THIS_PKCS7_OBJECT_HAS_MULTIPLE_SIGNERINFOS_ONLY_ONE_IS_SUPPORTED_AT_THIS_TIME);\n", "            }\n", "            IASN1Sequence signerInfo = BOUNCY_CASTLE_FACTORY.createASN1Sequence(signerInfos.getObjectAt(0));\n", "            // the positions that we care are\n", "            //     0 - version\n", "            //     1 - the signing certificate issuer and serial number\n", "            //     2 - the digest algorithm\n", "            //     3 or 4 - digestEncryptionAlgorithm\n", "            //     4 or 5 - encryptedDigest\n", "            signerversion = BOUNCY_CASTLE_FACTORY.createASN1Integer(signerInfo.getObjectAt(0)).getValue().intValue();\n", "            // Get the signing certificate\n", "            IASN1Sequence issuerAndSerialNumber = BOUNCY_CASTLE_FACTORY.createASN1Sequence(signerInfo.getObjectAt(1));\n", "            X500Principal issuer = SignUtils.getIssuerX500Principal(issuerAndSerialNumber);\n", "            BigInteger serialNumber = BOUNCY_CASTLE_FACTORY.createASN1Integer(issuerAndSerialNumber.getObjectAt(1))\n", "                    .getValue();\n", "            for (Object element : certs) {\n", "                X509Certificate cert = BOUNCY_CASTLE_FACTORY.createX509Certificate(element);\n", "                if (cert.getIssuerX500Principal().equals(issuer) && serialNumber.equals(cert.getSerialNumber())) {\n", "                    signCert = cert;\n", "                    break;\n", "                }\n", "            }\n", "            if (signCert == null) {\n", "                throw new PdfException(SignExceptionMessageConstant.CANNOT_FIND_SIGNING_CERTIFICATE_WITH_THIS_SERIAL).\n", "                        setMessageParams(issuer.getName() + \" / \" + serialNumber.toString(16));\n", "            }\n", "            signCertificateChain();\n", "            digestAlgorithmOid = BOUNCY_CASTLE_FACTORY.createASN1ObjectIdentifier(\n", "                    BOUNCY_CASTLE_FACTORY.createASN1Sequence(signerInfo.getObjectAt(2)).getObjectAt(0)).getId();\n", "            next = 3;\n", "            boolean foundCades = false;\n", "            IASN1TaggedObject tagsig = BOUNCY_CASTLE_FACTORY.createASN1TaggedObject(signerInfo.getObjectAt(next));\n", "            if (tagsig != null) {\n", "                IASN1Set sseq = BOUNCY_CASTLE_FACTORY.createASN1Set(tagsig, false);\n", "                sigAttr = sseq.getEncoded();\n", "                // maybe not necessary, but we use the following line as fallback:\n", "                sigAttrDer = sseq.getEncoded(BOUNCY_CASTLE_FACTORY.createASN1Encoding().getDer());\n", "\n", "                for (int k = 0; k < sseq.size(); ++k) {\n", "                    IASN1Sequence seq2 = BOUNCY_CASTLE_FACTORY.createASN1Sequence(sseq.getObjectAt(k));\n", "                    String idSeq2 = BOUNCY_CASTLE_FACTORY.createASN1ObjectIdentifier(seq2.getObjectAt(0)).getId();\n", "                    if (idSeq2.equals(SecurityIDs.ID_MESSAGE_DIGEST)) {\n", "                        IASN1Set set = BOUNCY_CASTLE_FACTORY.createASN1Set(seq2.getObjectAt(1));\n", "                        digestAttr = BOUNCY_CASTLE_FACTORY.createASN1OctetString(set.getObjectAt(0)).getOctets();\n", "                    } else if (idSeq2.equals(SecurityIDs.ID_ADBE_REVOCATION)) {\n", "                        IASN1Set setout = BOUNCY_CASTLE_FACTORY.createASN1Set(seq2.getObjectAt(1));\n", "                        IASN1Sequence seqout = BOUNCY_CASTLE_FACTORY.createASN1Sequence(setout.getObjectAt(0));\n", "                        for (int j = 0; j < seqout.size(); ++j) {\n", "                            IASN1TaggedObject tg = BOUNCY_CASTLE_FACTORY.createASN1TaggedObject(seqout.getObjectAt(j));\n", "                            if (tg.getTagNo() == 0) {\n", "                                IASN1Sequence seqin = BOUNCY_CASTLE_FACTORY.createASN1Sequence(tg.getObject());\n", "                                findCRL(seqin);\n", "                            }\n", "                            if (tg.getTagNo() == 1) {\n", "                                IASN1Sequence seqin = BOUNCY_CASTLE_FACTORY.createASN1Sequence(tg.getObject());\n", "                                findOcsp(seqin);\n", "                            }\n", "                        }\n", "                    } else if (isCades && idSeq2.equals(SecurityIDs.ID_AA_SIGNING_CERTIFICATE_V1)) {\n", "                        IASN1Set setout = BOUNCY_CASTLE_FACTORY.createASN1Set(seq2.getObjectAt(1));\n", "                        IASN1Sequence seqout = BOUNCY_CASTLE_FACTORY.createASN1Sequence(setout.getObjectAt(0));\n", "                        ISigningCertificate sv2 = BOUNCY_CASTLE_FACTORY.createSigningCertificate(seqout);\n", "                        IESSCertID[] cerv2m = sv2.getCerts();\n", "                        IESSCertID cerv2 = cerv2m[0];\n", "                        byte[] enc2 = signCert.getEncoded();\n", "                        MessageDigest m2 = SignUtils.getMessageDigest(\"SHA-1\");\n", "                        byte[] signCertHash = m2.digest(enc2);\n", "                        byte[] hs2 = cerv2.getCertHash();\n", "                        if (!Arrays.equals(signCertHash, hs2)) {\n", "                            throw new IllegalArgumentException(\n", "                                    \"Signing certificate doesn't match the ESS information.\");\n", "                        }\n", "                        foundCades = true;\n", "                    } else if (isCades && idSeq2.equals(SecurityIDs.ID_AA_SIGNING_CERTIFICATE_V2)) {\n", "                        IASN1Set setout = BOUNCY_CASTLE_FACTORY.createASN1Set(seq2.getObjectAt(1));\n", "                        IASN1Sequence seqout = BOUNCY_CASTLE_FACTORY.createASN1Sequence(setout.getObjectAt(0));\n", "                        ISigningCertificateV2 sv2 = BOUNCY_CASTLE_FACTORY.createSigningCertificateV2(seqout);\n", "                        IESSCertIDv2[] cerv2m = sv2.getCerts();\n", "                        IESSCertIDv2 cerv2 = cerv2m[0];\n", "                        IAlgorithmIdentifier ai2 = cerv2.getHashAlgorithm();\n", "                        byte[] enc2 = signCert.getEncoded();\n", "                        MessageDigest m2\n", "                                = SignUtils.getMessageDigest(DigestAlgorithms.getDigest(ai2.getAlgorithm().getId()));\n", "                        byte[] signCertHash = m2.digest(enc2);\n", "                        byte[] hs2 = cerv2.getCertHash();\n", "                        if (!Arrays.equals(signCertHash, hs2)) {\n", "                            throw new IllegalArgumentException(\n", "                                    \"Signing certificate doesn't match the ESS information.\");\n", "                        }\n", "                        foundCades = true;\n", "                    }\n", "                }\n", "                if (digestAttr == null) {\n", "                    throw new IllegalArgumentException(\n", "                            SignExceptionMessageConstant.AUTHENTICATED_ATTRIBUTE_IS_MISSING_THE_DIGEST);\n", "                }\n", "                ++next;\n", "            }\n", "            if (isCades && !foundCades) {\n", "                throw new IllegalArgumentException(\"CAdES ESS information missing.\");\n", "            }\n", "            IASN1Sequence signatureMechanismInfo = BOUNCY_CASTLE_FACTORY\n", "                    .createASN1Sequence(signerInfo.getObjectAt(next));\n", "            ++next;\n", "            signatureMechanismOid = BOUNCY_CASTLE_FACTORY.createASN1ObjectIdentifier(\n", "                    signatureMechanismInfo.getObjectAt(0)).getId();\n", "            if (signatureMechanismInfo.size() > 1) {\n", "                signatureMechanismParameters = signatureMechanismInfo.getObjectAt(1);\n", "            }\n", "            signatureValue = BOUNCY_CASTLE_FACTORY.createASN1OctetString(signerInfo.getObjectAt(next)).getOctets();\n", "            ++next;\n", "            if (next < signerInfo.size()) {\n", "                IASN1TaggedObject taggedObject = BOUNCY_CASTLE_FACTORY.createASN1TaggedObject(\n", "                        signerInfo.getObjectAt(next));\n", "                if (taggedObject != null) {\n", "                    IASN1Set unat = BOUNCY_CASTLE_FACTORY.createASN1Set(taggedObject, false);\n", "                    IAttributeTable attble = BOUNCY_CASTLE_FACTORY.createAttributeTable(unat);\n", "                    IPKCSObjectIdentifiers ipkcsObjectIdentifiers = BOUNCY_CASTLE_FACTORY.createPKCSObjectIdentifiers();\n", "                    IAttribute ts = attble.get(ipkcsObjectIdentifiers.getIdAaSignatureTimeStampToken());\n", "                    if (!BOUNCY_CASTLE_FACTORY.isNull(ts) && ts.getAttrValues().size() > 0) {\n", "                        IASN1Set attributeValues = ts.getAttrValues();\n", "                        IASN1Sequence tokenSequence =\n", "                                BOUNCY_CASTLE_FACTORY.createASN1SequenceInstance(attributeValues.getObjectAt(0));\n", "                        this.timestampSignatureContainer = new PdfPKCS7(tokenSequence.getEncoded(),\n", "                                PdfName.ETSI_RFC3161, BOUNCY_CASTLE_FACTORY.getProviderName());\n", "                        this.timestampSignatureContainer.update(signatureValue, 0, signatureValue.length);\n", "                        this.timestampCerts = SignUtils.readAllCerts(tokenSequence.getEncoded());\n", "                        IContentInfo contentInfo = BOUNCY_CASTLE_FACTORY.createContentInfo(tokenSequence);\n", "                        this.timeStampTokenInfo = BOUNCY_CASTLE_FACTORY.createTSTInfo(contentInfo);\n", "                    }\n", "                }\n", "            }\n", "            if (isTsp) {\n", "                IContentInfo contentInfoTsp = BOUNCY_CASTLE_FACTORY.createContentInfo(signedData);\n", "                this.timeStampTokenInfo = BOUNCY_CASTLE_FACTORY.createTSTInfo(contentInfoTsp);\n", "                this.timestampCerts = this.certs;\n", "                String algOID = timeStampTokenInfo.getMessageImprint().getHashAlgorithm().getAlgorithm().getId();\n", "                messageDigest = DigestAlgorithms.getMessageDigestFromOid(algOID, null);\n", "                encContDigest = DigestAlgorithms.getMessageDigest(getDigestAlgorithmName(), provider);\n", "            } else {\n", "                if (this.encapMessageContent != null || digestAttr != null) {\n", "                    if (PdfName.Adbe_pkcs7_sha1.equals(getFilterSubtype())) {\n", "                        messageDigest = DigestAlgorithms.getMessageDigest(\"SHA1\", provider);\n", "                    } else {\n", "                        messageDigest = DigestAlgorithms.getMessageDigest(getDigestAlgorithmName(), provider);\n", "                    }\n", "                    encContDigest = DigestAlgorithms.getMessageDigest(getDigestAlgorithmName(), provider);\n", "                }\n", "                sig = initSignature(signCert.getPublicKey());\n", "            }\n", "        } catch (Exception e) {\n", "            throw new PdfException(e);\n", "        }\n", "    }\n", "\n", "    /**\n", "     * Set signature policy identifier to be used during signature creation.\n", "     *\n", "     * @param signaturePolicy {@link SignaturePolicyInfo} to be used during signature creation\n", "     */\n", "    public void setSignaturePolicy(SignaturePolicyInfo signaturePolicy) {\n", "        this.signaturePolicyIdentifier = signaturePolicy.toSignaturePolicyIdentifier();\n", "    }\n", "\n", "    /**\n", "     * Set signature policy identifier to be used during signature creation.\n", "     *\n", "     * @param signaturePolicy {@link ISignaturePolicyIdentifier} to be used during signature creation\n", "     */\n", "    public void setSignaturePolicy(ISignaturePolicyIdentifier signaturePolicy) {\n", "        this.signaturePolicyIdentifier = signaturePolicy;\n", "    }\n", "\n", "    /**\n", "     * Getter for property sigName.\n", "     *\n", "     * @return Value of property sigName.\n", "     */\n", "    public String getSignName() {\n", "        return this.signName;\n", "    }\n", "\n", "    /**\n", "     * Setter for property sigName.\n", "     *\n", "     * @param signName New value of property sigName.\n", "     */\n", "    public void setSignName(String signName) {\n", "        this.signName = signName;\n", "    }\n", "\n", "    /**\n", "     * Getter for property reason.\n", "     *\n", "     * @return Value of property reason.\n", "     */\n", "    public String getReason() {\n", "        return this.reason;\n", "    }\n", "\n", "    /**\n", "     * Setter for property reason.\n", "     *\n", "     * @param reason New value of property reason.\n", "     */\n", "    public void setReason(String reason) {\n", "        this.reason = reason;\n", "    }\n", "\n", "    /**\n", "     * Getter for property location.\n", "     *\n", "     * @return Value of property location.\n", "     */\n", "    public String getLocation() {\n", "        return this.location;\n", "    }\n", "\n", "    /**\n", "     * Setter for property location.\n", "     *\n", "     * @param location New value of property location.\n", "     */\n", "    public void setLocation(String location) {\n", "        this.location = location;\n", "    }\n", "\n", "    /**\n", "     * Getter for property signDate.\n", "     *\n", "     * @return Value of property signDate.\n", "     */\n", "    public Calendar getSignDate() {\n", "        Calendar dt = getTimeStampDate();\n", "        if (dt == TimestampConstants.UNDEFINED_TIMESTAMP_DATE) {\n", "            return this.signDate;\n", "        } else {\n", "            return dt;\n", "        }\n", "    }\n", "\n", "    /**\n", "     * Setter for property signDate.\n", "     *\n", "     * @param signDate New value of property signDate.\n", "     */\n", "    public void setSignDate(Calendar signDate) {\n", "        this.signDate = signDate;\n", "    }\n", "\n", "    // version info\n", "\n", "    /**\n", "     * Version of the PKCS#7 object\n", "     */\n", "    private int version = 1;\n", "\n", "    /**\n", "     * Version of the PKCS#7 \"SignerInfo\" object.\n", "     */\n", "    private int signerversion = 1;\n", "\n", "    /**\n", "     * Get the version of the PKCS#7 object.\n", "     *\n", "     * @return the version of the PKCS#7 object.\n", "     */\n", "    public int getVersion() {\n", "        return version;\n", "    }\n", "\n", "    /**\n", "     * Get the version of the PKCS#7 \"SignerInfo\" object.\n", "     *\n", "     * @return the version of the PKCS#7 \"SignerInfo\" object.\n", "     */\n", "    public int getSigningInfoVersion() {\n", "        return signerversion;\n", "    }\n", "\n", "    // Message digest algorithm\n", "\n", "    /**\n", "     * The ID of the digest algorithm, e.g. \"2.16.840.1.101.3.4.2.1\".\n", "     */\n", "    private final String digestAlgorithmOid;\n", "\n", "    /**\n", "     * The object that will create the digest\n", "     */\n", "    private MessageDigest messageDigest;\n", "\n", "    /**\n", "     * The digest algorithms\n", "     */\n", "    private Set<String> digestalgos;\n", "\n", "    /**\n", "     * The digest attributes\n", "     */\n", "    private byte[] digestAttr;\n", "\n", "    private PdfName filterSubtype;\n", "\n", "    /**\n", "     * The signature algorithm.\n", "     */\n", "    private String signatureMechanismOid;\n", "\n", "    private IASN1Encodable signatureMechanismParameters = null;\n", "\n", "    /**\n", "     * Getter for the ID of the digest algorithm, e.g. \"2.16.840.1.101.3.4.2.1\".\n", "     * See ISO-32000-1, section 12.8.3.3 PKCS#7 Signatures as used in ISO 32000\n", "     *\n", "     * @return the ID of the digest algorithm\n", "     */\n", "    public String getDigestAlgorithmOid() {\n", "        return digestAlgorithmOid;\n", "    }\n", "\n", "    /**\n", "     * Returns the name of the digest algorithm, e.g. \"SHA256\".\n", "     *\n", "     * @return the digest algorithm name, e.g. \"SHA256\"\n", "     */\n", "    public String getDigestAlgorithmName() {\n", "        String hashAlgoName = DigestAlgorithms.getDigest(digestAlgorithmOid);\n", "        // Ed25519 and Ed448 do not allow a choice of hashing algorithm,\n", "        // and ISO 32002 requires using a fixed hashing algorithm to\n", "        // digest the document content\n", "        if (SecurityIDs.ID_ED25519.equals(this.signatureMechanismOid)\n", "                && !SecurityIDs.ID_SHA512.equals(digestAlgorithmOid)) {\n", "            // We compare based on OID to ensure that there are no name normalisation issues.\n", "            throw new PdfException(SignExceptionMessageConstant.ALGO_REQUIRES_SPECIFIC_HASH)\n", "                    .setMessageParams(\"Ed25519\", \"SHA-512\", hashAlgoName);\n", "        } else if (SecurityIDs.ID_ED448.equals(this.signatureMechanismOid)\n", "                    && !SecurityIDs.ID_SHAKE256.equals(digestAlgorithmOid)) {\n", "            throw new PdfException(SignExceptionMessageConstant.ALGO_REQUIRES_SPECIFIC_HASH)\n", "                    .setMessageParams(\"Ed448\", \"512-bit SHAKE256\", hashAlgoName);\n", "        }\n", "        return hashAlgoName;\n", "    }\n", "\n", "    /**\n", "     * Getter for the signature algorithm OID.\n", "     * See ISO-32000-1, section 12.8.3.3 PKCS#7 Signatures as used in ISO 32000\n", "     *\n", "     * @return the signature algorithm OID\n", "     */\n", "    public String getSignatureMechanismOid() {\n", "        return signatureMechanismOid;\n", "    }\n", "\n", "    /**\n", "     * Get the signature mechanism identifier, including both the digest function\n", "     * and the signature algorithm, e.g. \"SHA1withRSA\".\n", "     * See ISO-32000-1, section 12.8.3.3 PKCS#7 Signatures as used in ISO 32000\n", "     *\n", "     * @return the algorithm used to calculate the signature\n", "     */\n", "    public String getSignatureMechanismName() {\n", "        switch (this.signatureMechanismOid) {\n", "            case SecurityIDs.ID_ED25519:\n", "                // Ed25519 and Ed448 do not involve a choice of hashing algorithm\n", "                return \"Ed25519\";\n", "            case SecurityIDs.ID_ED448:\n", "                return \"Ed448\";\n", "            case SecurityIDs.ID_RSASSA_PSS:\n", "                // For RSASSA-PSS, the algorithm parameters dictate everything, so\n", "                // there's no need to duplicate that information in the algorithm name.\n", "                return \"RSASSA-PSS\";\n", "            default:\n", "                return SignatureMechanisms.getMechanism(signatureMechanismOid, getDigestAlgorithmName());\n", "        }\n", "    }\n", "\n", "\n", "    /**\n", "     * Returns the name of the signature algorithm only (disregarding the digest function, if any).\n", "     *\n", "     * @return the name of an encryption algorithm\n", "     */\n", "    public String getSignatureAlgorithmName() {\n", "        String signAlgo = SignatureMechanisms.getAlgorithm(signatureMechanismOid);\n", "        if (signAlgo == null) {\n", "            signAlgo = signatureMechanismOid;\n", "        }\n", "        return signAlgo;\n", "    }\n", "\n", "    /*\n", "     *\tDIGITAL SIGNATURE CREATION\n", "     */\n", "\n", "    private IExternalDigest interfaceDigest;\n", "    // The signature is created externally\n", "\n", "    /**\n", "     * The signature value or signed digest, if created outside this class\n", "     */\n", "    private byte[] externalSignatureValue;\n", "\n", "    /**\n", "     * Externally specified encapsulated message content.\n", "     */\n", "    private byte[] externalEncapMessageContent;\n", "\n", "\n", "    /**\n", "     * Sets the signature to an externally calculated value.\n", "     *\n", "     * @param signatureValue            the signature value\n", "     * @param signedMessageContent      the extra data that goes into the data tag in PKCS#7\n", "     * @param signatureAlgorithm        the signature algorithm. It must be <CODE>null</CODE> if the\n", "     *                                  <CODE>signatureValue</CODE> is also <CODE>null</CODE>.\n", "     *                                  If the <CODE>signatureValue</CODE> is not <CODE>null</CODE>,\n", "     *                                  possible values include \"RSA\", \"DSA\", \"ECDSA\", \"Ed25519\" and \"Ed448\".\n", "     */\n", "    public void setExternalSignatureValue(byte[] signatureValue, byte[] signedMessageContent, String signatureAlgorithm) {\n", "        setExternalSignatureValue(signatureValue, signedMessageContent, signatureAlgorithm, null);\n", "    }\n", "\n", "    /**\n", "     * Sets the signature to an externally calculated value.\n", "     *\n", "     * @param signatureValue            the signature value\n", "     * @param signedMessageContent      the extra data that goes into the data tag in PKCS#7\n", "     * @param signatureAlgorithm        the signature algorithm. It must be <CODE>null</CODE> if the\n", "     *                                  <CODE>signatureValue</CODE> is also <CODE>null</CODE>.\n", "     *                                  If the <CODE>signatureValue</CODE> is not <CODE>null</CODE>,\n", "     *                                  possible values include \"RSA\", \"RSASSA-PSS\", \"DSA\",\n", "     *                                  \"ECDSA\", \"Ed25519\" and \"Ed448\".\n", "     * @param signatureMechanismParams  parameters for the signature mechanism, if required\n", "     */\n", "    public void setExternalSignatureValue(\n", "            byte[] signatureValue, byte[] signedMessageContent,\n", "            String signatureAlgorithm, ISignatureMechanismParams signatureMechanismParams) {\n", "        externalSignatureValue = signatureValue;\n", "        externalEncapMessageContent = signedMessageContent;\n", "        if (signatureAlgorithm != null) {\n", "            String digestAlgo = this.getDigestAlgorithmName();\n", "            String oid = SignatureMechanisms.getSignatureMechanismOid(signatureAlgorithm, digestAlgo);\n", "            if (oid == null) {\n", "                throw new PdfException(SignExceptionMessageConstant.COULD_NOT_DETERMINE_SIGNATURE_MECHANISM_OID)\n", "                        .setMessageParams(signatureAlgorithm, digestAlgo);\n", "            }\n", "            this.signatureMechanismOid = oid;\n", "        }\n", "        if (signatureMechanismParams != null) {\n", "            this.signatureMechanismParameters = signatureMechanismParams.toEncodable();\n", "        }\n", "    }\n", "    // The signature is created internally\n", "\n", "    /**\n", "     * Class from the Java SDK that provides the functionality of a digital signature algorithm.\n", "     */\n", "    private Signature sig;\n", "\n", "    /**\n", "     * The raw signature value as calculated by this class (or extracted from an existing PDF)\n", "     */\n", "    private byte[] signatureValue;\n", "\n", "    /**\n", "     * The content to which the signature applies, if encapsulated in the PKCS #7 payload.\n", "     */\n", "    private byte[] encapMessageContent;\n", "\n", "    // Signing functionality.\n", "\n", "    private Signature initSignature(PrivateKey key) throws NoSuchAlgorithmException, NoSuchProviderException,\n", "            InvalidKeyException {\n", "        Signature signature = SignUtils.getSignatureHelper(getSignatureMechanismName(), provider);\n", "        signature.initSign(key);\n", "        return signature;\n", "    }\n", "\n", "    private Signature initSignature(PublicKey key) throws NoSuchAlgorithmException, NoSuchProviderException,\n", "            InvalidKeyException {\n", "\n", "        String signatureMechanism;\n", "        if (PdfName.Adbe_x509_rsa_sha1.equals(getFilterSubtype())) {\n", "            signatureMechanism = \"SHA1withRSA\";\n", "        } else {\n", "            signatureMechanism = getSignatureMechanismName();\n", "        }\n", "        Signature signature = SignUtils.getSignatureHelper(signatureMechanism, provider);\n", "        configureSignatureMechanismParameters(signature);\n", "        signature.initVerify(key);\n", "        return signature;\n", "    }\n", "\n", "    private void configureSignatureMechanismParameters(Signature signature) {\n", "        if (SecurityIDs.ID_RSASSA_PSS.equals(this.signatureMechanismOid)) {\n", "            IRSASSAPSSParams params = BOUNCY_CASTLE_FACTORY.createRSASSAPSSParams(this.signatureMechanismParameters);\n", "            String mgfOid = params.getMaskGenAlgorithm().getAlgorithm().getId();\n", "            if (!SecurityIDs.ID_MGF1.equals(mgfOid)) {\n", "                throw new IllegalArgumentException(SignExceptionMessageConstant.ONLY_MGF1_SUPPORTED_IN_RSASSA_PSS);\n", "            }\n", "            // Even though having separate digests at all \"layers\" is mathematically fine,\n", "            // it's bad practice at best (and a security problem at worst).\n", "            // We don't support such hybridisation outside RSASSA-PSS either.\n", "            // => on the authority of RFC 8933 we enforce the restriction here.\n", "            String mechParamDigestAlgoOid = params.getHashAlgorithm().getAlgorithm().getId();\n", "            if (!this.digestAlgorithmOid.equals(mechParamDigestAlgoOid)) {\n", "                throw new IllegalArgumentException(MessageFormatUtil.format(\n", "                        SignExceptionMessageConstant.RSASSA_PSS_DIGESTMISSMATCH,\n", "                        mechParamDigestAlgoOid, this.digestAlgorithmOid));\n", "            }\n", "\n", "            // This is actually morally an IAlgorithmIdentifier too, but since it's pretty much always going to be a\n", "            // one-element sequence, it's probably not worth putting in a conversion method in the factory interface\n", "            IASN1Sequence mgfParams = BOUNCY_CASTLE_FACTORY.createASN1Sequence(\n", "                    params.getMaskGenAlgorithm().getParameters()\n", "            );\n", "            String mgfParamDigestAlgoOid = BOUNCY_CASTLE_FACTORY\n", "                    .createASN1ObjectIdentifier(mgfParams.getObjectAt(0))\n", "                    .getId();\n", "            if (!this.digestAlgorithmOid.equals(mgfParamDigestAlgoOid)) {\n", "                throw new IllegalArgumentException(\n", "                        MessageFormatUtil.format(\n", "                                SignExceptionMessageConstant.DISGEST_ALGORITM_MGF_MISMATCH,\n", "                         mgfParamDigestAlgoOid , this.digestAlgorithmOid));\n", "            }\n", "            try {\n", "                int saltLength = params.getSaltLength().intValue();\n", "                int trailerField = params.getTrailerField().intValue();\n", "                SignUtils.setRSASSAPSSParamsWithMGF1(signature, getDigestAlgorithmName(), saltLength, trailerField);\n", "            } catch (InvalidAlgorithmParameterException e) {\n", "                throw new IllegalArgumentException(SignExceptionMessageConstant.INVALID_ARGUMENTS,e);\n", "            }\n", "        }\n", "    }\n", "\n", "    /**\n", "     * Update the digest with the specified bytes.\n", "     * This method is used both for signing and verifying\n", "     *\n", "     * @param buf the data buffer\n", "     * @param off the offset in the data buffer\n", "     * @param len the data length\n", "     *\n", "     * @throws SignatureException on error\n", "     */\n", "    public void update(byte[] buf, int off, int len) throws SignatureException {\n", "        if (encapMessageContent != null || digestAttr != null || isTsp) {\n", "            messageDigest.update(buf, off, len);\n", "        } else {\n", "            sig.update(buf, off, len);\n", "        }\n", "    }\n", "\n", "    // adbe.x509.rsa_sha1 (PKCS#1)\n", "\n", "    /**\n", "     * Gets the bytes for the PKCS#1 object.\n", "     *\n", "     * @return a byte array\n", "     */\n", "    public byte[] getEncodedPKCS1() {\n", "        try {\n", "            if (externalSignatureValue != null) {\n", "                signatureValue = externalSignatureValue;\n", "            } else {\n", "                signatureValue = sig.sign();\n", "            }\n", "            ByteArrayOutputStream bOut = new ByteArrayOutputStream();\n", "\n", "            IASN1OutputStream dout = BOUNCY_CASTLE_FACTORY.createASN1OutputStream(bOut);\n", "            dout.writeObject(BOUNCY_CASTLE_FACTORY.createDEROctetString(signatureValue));\n", "            dout.close();\n", "\n", "            return bOut.toByteArray();\n", "        } catch (Exception e) {\n", "            throw new PdfException(e);\n", "        }\n", "    }\n", "\n", "    // other subfilters (PKCS#7)\n", "\n", "    /**\n", "     * Gets the bytes for the PKCS7SignedData object.\n", "     *\n", "     * @return the bytes for the PKCS7SignedData object\n", "     */\n", "    public byte[] getEncodedPKCS7() {\n", "        return getEncodedPKCS7(null, PdfSigner.CryptoStandard.CMS, null, null, null);\n", "    }\n", "\n", "    /**\n", "     * Gets the bytes for the PKCS7SignedData object. Optionally the authenticatedAttributes\n", "     * in the signerInfo can also be set. If either of the parameters is <CODE>null</CODE>, none will be used.\n", "     *\n", "     * @param secondDigest the digest in the authenticatedAttributes\n", "     *\n", "     * @return the bytes for the PKCS7SignedData object\n", "     */\n", "    public byte[] getEncodedPKCS7(byte[] secondDigest) {\n", "        return getEncodedPKCS7(secondDigest, PdfSigner.CryptoStandard.CMS, null, null, null);\n", "    }\n", "\n", "    /**\n", "     * Gets the bytes for the PKCS7SignedData object. Optionally the authenticatedAttributes\n", "     * in the signerInfo can also be set, and/or a time-stamp-authority client\n", "     * may be provided.\n", "     *\n", "     * @param secondDigest the digest in the authenticatedAttributes\n", "     * @param sigtype      specifies the PKCS7 standard flavor to which created PKCS7SignedData object will adhere:\n", "     *                     either basic CMS or CAdES\n", "     * @param tsaClient    TSAClient - null or an optional time stamp authority client\n", "     * @param ocsp         collection of DER-encoded BasicOCSPResponses for the  certificate in the signature\n", "     *                     certificates\n", "     *                     chain, or null if OCSP revocation data is not to be added.\n", "     * @param crlBytes     collection of DER-encoded CRL for certificates from the signature certificates chain,\n", "     *                     or null if CRL revocation data is not to be added.\n", "     *\n", "     * @return byte[] the bytes for the PKCS7SignedData object\n", "     *\n", "     * @see <a href=\"https://datatracker.ietf.org/doc/html/rfc6960#section-4.2.1\">RFC 6960 \u00a7 4.2.1</a>\n", "     */\n", "    public byte[] getEncodedPKCS7(byte[] secondDigest, PdfSigner.CryptoStandard sigtype, ITSAClient tsaClient,\n", "            Collection<byte[]> ocsp, Collection<byte[]> crlBytes) {\n", "        try {\n", "            if (externalSignatureValue != null) {\n", "                signatureValue = externalSignatureValue;\n", "                if (encapMessageContent != null) {\n", "                    encapMessageContent = externalEncapMessageContent;\n", "                }\n", "            } else if (externalEncapMessageContent != null && encapMessageContent != null) {\n", "                encapMessageContent = externalEncapMessageContent;\n", "                sig.update(encapMessageContent);\n", "                signatureValue = sig.sign();\n", "            } else {\n", "                if (encapMessageContent != null) {\n", "                    encapMessageContent = messageDigest.digest();\n", "                    sig.update(encapMessageContent);\n", "                }\n", "                signatureValue = sig.sign();\n", "            }\n", "\n", "            // Create the set of Hash algorithms\n", "            IASN1EncodableVector digestAlgorithms = BOUNCY_CASTLE_FACTORY.createASN1EncodableVector();\n", "            for (String element : digestalgos) {\n", "                IASN1EncodableVector algos = BOUNCY_CASTLE_FACTORY.createASN1EncodableVector();\n", "                algos.add(BOUNCY_CASTLE_FACTORY.createASN1ObjectIdentifier(element));\n", "                algos.add(BOUNCY_CASTLE_FACTORY.createDERNull());\n", "                digestAlgorithms.add(BOUNCY_CASTLE_FACTORY.createDERSequence(algos));\n", "            }\n", "\n", "            // Create the contentInfo.\n", "            IASN1EncodableVector v = BOUNCY_CASTLE_FACTORY.createASN1EncodableVector();\n", "            v.add(BOUNCY_CASTLE_FACTORY.createASN1ObjectIdentifier(SecurityIDs.ID_PKCS7_DATA));\n", "            if (encapMessageContent != null) {\n", "                v.add(BOUNCY_CASTLE_FACTORY.createDERTaggedObject(0,\n", "                        BOUNCY_CASTLE_FACTORY.createDEROctetString(encapMessageContent)));\n", "            }\n", "            IDERSequence contentinfo = BOUNCY_CASTLE_FACTORY.createDERSequence(v);\n", "\n", "            // Get all the certificates\n", "            v = BOUNCY_CASTLE_FACTORY.createASN1EncodableVector();\n", "            for (Object element : certs) {\n", "                try (IASN1InputStream tempstream = BOUNCY_CASTLE_FACTORY.createASN1InputStream(\n", "                        new ByteArrayInputStream(BOUNCY_CASTLE_FACTORY.createX509Certificate(element).getEncoded()))) {\n", "                    v.add(tempstream.readObject());\n", "                }\n", "            }\n", "\n", "            IDERSet dercertificates = BOUNCY_CASTLE_FACTORY.createDERSet(v);\n", "\n", "            // Get the revocation info (crls field)\n", "            IDERSet revInfoChoices = CertificateUtil.createRevocationInfoChoices(this.signedDataCrls,\n", "                    this.signedDataOcsps, this.signedDataRevocationInfo);\n", "\n", "            // Create signerInfo structure\n", "            IASN1EncodableVector signerInfo = BOUNCY_CASTLE_FACTORY.createASN1EncodableVector();\n", "\n", "            // Add the signerInfo version\n", "            signerInfo.add(BOUNCY_CASTLE_FACTORY.createASN1Integer(signerversion));\n", "\n", "            v = BOUNCY_CASTLE_FACTORY.createASN1EncodableVector();\n", "\n", "            v.add(CertificateInfo.getIssuer(signCert.getTBSCertificate()));\n", "            v.add(BOUNCY_CASTLE_FACTORY.createASN1Integer(signCert.getSerialNumber()));\n", "            signerInfo.add(BOUNCY_CASTLE_FACTORY.createDERSequence(v));\n", "\n", "            // Add the digestAlgorithm\n", "            v = BOUNCY_CASTLE_FACTORY.createASN1EncodableVector();\n", "            v.add(BOUNCY_CASTLE_FACTORY.createASN1ObjectIdentifier(digestAlgorithmOid));\n", "            v.add(BOUNCY_CASTLE_FACTORY.createDERNull());\n", "            signerInfo.add(BOUNCY_CASTLE_FACTORY.createDERSequence(v));\n", "\n", "            // add the authenticated attribute if present\n", "            if (secondDigest != null) {\n", "                signerInfo.add(BOUNCY_CASTLE_FACTORY.createDERTaggedObject(false, 0,\n", "                        getAuthenticatedAttributeSet(secondDigest, ocsp, crlBytes, sigtype)));\n", "            }\n", "            // Add the digestEncryptionAlgorithm\n", "            v = BOUNCY_CASTLE_FACTORY.createASN1EncodableVector();\n", "            v.add(BOUNCY_CASTLE_FACTORY.createASN1ObjectIdentifier(signatureMechanismOid));\n", "            if (this.signatureMechanismParameters == null) {\n", "                v.add(BOUNCY_CASTLE_FACTORY.createDERNull());\n", "            } else {\n", "                v.add(this.signatureMechanismParameters.toASN1Primitive());\n", "            }\n", "            signerInfo.add(BOUNCY_CASTLE_FACTORY.createDERSequence(v));\n", "\n", "            // Add the digest\n", "            signerInfo.add(BOUNCY_CASTLE_FACTORY.createDEROctetString(signatureValue));\n", "\n", "            // When requested, go get and add the timestamp. May throw an exception.\n", "            // Added by Martin Brunecky, 07/12/2007 folowing Aiken Sam, 2006-11-15\n", "            // Sam found Adobe expects time-stamped SHA1-1 of the encrypted digest\n", "            if (tsaClient != null) {\n", "                byte[] tsImprint = tsaClient.getMessageDigest().digest(signatureValue);\n", "                byte[] tsToken = tsaClient.getTimeStampToken(tsImprint);\n", "                if (tsToken != null) {\n", "                    IASN1EncodableVector unauthAttributes = buildUnauthenticatedAttributes(tsToken);\n", "                    if (unauthAttributes != null) {\n", "                        signerInfo.add(BOUNCY_CASTLE_FACTORY.createDERTaggedObject(\n", "                                false, 1, BOUNCY_CASTLE_FACTORY.createDERSet(unauthAttributes)));\n", "                    }\n", "                }\n", "            }\n", "\n", "            // Finally build the body out of all the components above\n", "            IASN1EncodableVector body = BOUNCY_CASTLE_FACTORY.createASN1EncodableVector();\n", "            body.add(BOUNCY_CASTLE_FACTORY.createASN1Integer(version));\n", "            body.add(BOUNCY_CASTLE_FACTORY.createDERSet(digestAlgorithms));\n", "            body.add(contentinfo);\n", "            body.add(BOUNCY_CASTLE_FACTORY.createDERTaggedObject(false, 0, dercertificates));\n", "            if (revInfoChoices != null) {\n", "                body.add(BOUNCY_CASTLE_FACTORY.createDERTaggedObject(false, 1, revInfoChoices));\n", "            }\n", "\n", "            // Only allow one signerInfo\n", "            body.add(BOUNCY_CASTLE_FACTORY.createDERSet(BOUNCY_CASTLE_FACTORY.createDERSequence(signerInfo)));\n", "\n", "            // Now we have the body, wrap it in it's PKCS7Signed shell\n", "            // and return it\n", "            //\n", "            IASN1EncodableVector whole = BOUNCY_CASTLE_FACTORY.createASN1EncodableVector();\n", "            whole.add(BOUNCY_CASTLE_FACTORY.createASN1ObjectIdentifier(SecurityIDs.ID_PKCS7_SIGNED_DATA));\n", "            whole.add(BOUNCY_CASTLE_FACTORY.createDERTaggedObject(0, BOUNCY_CASTLE_FACTORY.createDERSequence(body)));\n", "\n", "            ByteArrayOutputStream bOut = new ByteArrayOutputStream();\n", "\n", "            IASN1OutputStream dout = BOUNCY_CASTLE_FACTORY.createASN1OutputStream(bOut);\n", "            dout.writeObject(BOUNCY_CASTLE_FACTORY.createDERSequence(whole));\n", "            dout.close();\n", "\n", "            return bOut.toByteArray();\n", "        } catch (Exception e) {\n", "            throw new PdfException(e);\n", "        }\n", "    }\n", "\n", "    /**\n", "     * Added by Aiken Sam, 2006-11-15, modifed by Martin Brunecky 07/12/2007\n", "     * to start with the timeStampToken (signedData 1.2.840.113549.1.7.2).\n", "     * Token is the TSA response without response status, which is usually\n", "     * handled by the (vendor supplied) TSA request/response interface).\n", "     *\n", "     * @param timeStampToken byte[] - time stamp token, DER encoded signedData\n", "     *\n", "     * @return {@link IASN1EncodableVector}\n", "     *\n", "     * @throws IOException if an I/O error occurs.\n", "     */\n", "    private IASN1EncodableVector buildUnauthenticatedAttributes(byte[] timeStampToken) throws IOException {\n", "        if (timeStampToken == null) {\n", "            return null;\n", "        }\n", "\n", "        IASN1EncodableVector unauthAttributes = BOUNCY_CASTLE_FACTORY.createASN1EncodableVector();\n", "\n", "        IASN1EncodableVector v = BOUNCY_CASTLE_FACTORY.createASN1EncodableVector();\n", "        v.add(BOUNCY_CASTLE_FACTORY.createASN1ObjectIdentifier(SecurityIDs.ID_AA_TIME_STAMP_TOKEN));\n", "        try (IASN1InputStream tempstream =\n", "                BOUNCY_CASTLE_FACTORY.createASN1InputStream(new ByteArrayInputStream(timeStampToken))) {\n", "            IASN1Sequence seq = BOUNCY_CASTLE_FACTORY.createASN1Sequence(tempstream.readObject());\n", "            v.add(BOUNCY_CASTLE_FACTORY.createDERSet(seq));\n", "        }\n", "\n", "        unauthAttributes.add(BOUNCY_CASTLE_FACTORY.createDERSequence(v));\n", "        return unauthAttributes;\n", "    }\n", "\n", "    // Authenticated attributes\n", "\n", "    /**\n", "     * When using authenticatedAttributes the authentication process is different.\n", "     * The document digest is generated and put inside the attribute. The signing is done over the DER encoded\n", "     * authenticatedAttributes. This method provides that encoding and the parameters must be\n", "     * exactly the same as in {@link #getEncodedPKCS7(byte[])}.\n", "     *\n", "     * <p>\n", "     * Note: do not pass in the full DER-encoded OCSPResponse object obtained from the responder,\n", "     * only the DER-encoded IBasicOCSPResponse value contained in the response data.\n", "     *\n", "     * <p>\n", "     * A simple example:\n", "     * <pre>\n", "     * Calendar cal = Calendar.getInstance();\n", "     * PdfPKCS7 pk7 = new PdfPKCS7(key, chain, null, \"SHA1\", null, false);\n", "     * MessageDigest messageDigest = MessageDigest.getInstance(\"SHA1\");\n", "     * byte[] buf = new byte[8192];\n", "     * int n;\n", "     * InputStream inp = sap.getRangeStream();\n", "     * while ((n = inp.read(buf)) &gt; 0) {\n", "     *    messageDigest.update(buf, 0, n);\n", "     * }\n", "     * byte[] hash = messageDigest.digest();\n", "     * byte[] sh = pk7.getAuthenticatedAttributeBytes(hash, cal);\n", "     * pk7.update(sh, 0, sh.length);\n", "     * byte[] sg = pk7.getEncodedPKCS7(hash, cal);\n", "     * </pre>\n", "     *\n", "     * @param secondDigest the content digest\n", "     * @param sigtype      specifies the PKCS7 standard flavor to which created PKCS7SignedData object will adhere:\n", "     *                     either basic CMS or CAdES\n", "     * @param ocsp         collection of DER-encoded BasicOCSPResponses for the  certificate in the signature\n", "     *                     certificates\n", "     *                     chain, or null if OCSP revocation data is not to be added.\n", "     * @param crlBytes     collection of DER-encoded CRL for certificates from the signature certificates chain,\n", "     *                     or null if CRL revocation data is not to be added.\n", "     *\n", "     * @return the byte array representation of the authenticatedAttributes ready to be signed\n", "     *\n", "     * @see <a href=\"https://datatracker.ietf.org/doc/html/rfc6960#section-4.2.1\">RFC 6960 \u00a7 4.2.1</a>\n", "     */\n", "    public byte[] getAuthenticatedAttributeBytes(byte[] secondDigest, PdfSigner.CryptoStandard sigtype,\n", "            Collection<byte[]> ocsp, Collection<byte[]> crlBytes) {\n", "        try {\n", "            return getAuthenticatedAttributeSet(secondDigest, ocsp, crlBytes, sigtype)\n", "                    .getEncoded(BOUNCY_CASTLE_FACTORY.createASN1Encoding().getDer());\n", "        } catch (Exception e) {\n", "            throw new PdfException(e);\n", "        }\n", "    }\n", "\n", "    /**\n", "     * This method provides that encoding and the parameters must be\n", "     * exactly the same as in {@link #getEncodedPKCS7(byte[])}.\n", "     *\n", "     * @param secondDigest the content digest\n", "     *\n", "     * @return the byte array representation of the authenticatedAttributes ready to be signed\n", "     */\n", "    private IDERSet getAuthenticatedAttributeSet(byte[] secondDigest, Collection<byte[]> ocsp,\n", "            Collection<byte[]> crlBytes, PdfSigner.CryptoStandard sigtype) {\n", "        try {\n", "            IASN1EncodableVector attribute = BOUNCY_CASTLE_FACTORY.createASN1EncodableVector();\n", "            IASN1EncodableVector v = BOUNCY_CASTLE_FACTORY.createASN1EncodableVector();\n", "            v.add(BOUNCY_CASTLE_FACTORY.createASN1ObjectIdentifier(SecurityIDs.ID_CONTENT_TYPE));\n", "            v.add(BOUNCY_CASTLE_FACTORY.createDERSet(\n", "                    BOUNCY_CASTLE_FACTORY.createASN1ObjectIdentifier(SecurityIDs.ID_PKCS7_DATA)));\n", "            attribute.add(BOUNCY_CASTLE_FACTORY.createDERSequence(v));\n", "            v = BOUNCY_CASTLE_FACTORY.createASN1EncodableVector();\n", "            v.add(BOUNCY_CASTLE_FACTORY.createASN1ObjectIdentifier(SecurityIDs.ID_MESSAGE_DIGEST));\n", "            v.add(BOUNCY_CASTLE_FACTORY.createDERSet(BOUNCY_CASTLE_FACTORY.createDEROctetString(secondDigest)));\n", "            attribute.add(BOUNCY_CASTLE_FACTORY.createDERSequence(v));\n", "            boolean haveCrl = false;\n", "            if (crlBytes != null) {\n", "                for (byte[] bCrl : crlBytes) {\n", "                    if (bCrl != null) {\n", "                        haveCrl = true;\n", "                        break;\n", "                    }\n", "                }\n", "            }\n", "            if (ocsp != null && !ocsp.isEmpty() || haveCrl) {\n", "                v = BOUNCY_CASTLE_FACTORY.createASN1EncodableVector();\n", "                v.add(BOUNCY_CASTLE_FACTORY.createASN1ObjectIdentifier(SecurityIDs.ID_ADBE_REVOCATION));\n", "\n", "                IASN1EncodableVector revocationV = BOUNCY_CASTLE_FACTORY.createASN1EncodableVector();\n", "\n", "                if (haveCrl) {\n", "                    IASN1EncodableVector v2 = BOUNCY_CASTLE_FACTORY.createASN1EncodableVector();\n", "                    for (byte[] bCrl : crlBytes) {\n", "                        if (bCrl == null) {\n", "                            continue;\n", "                        }\n", "                        try (IASN1InputStream t =\n", "                                BOUNCY_CASTLE_FACTORY.createASN1InputStream(new ByteArrayInputStream(bCrl))) {\n", "                            v2.add(t.readObject());\n", "                        }\n", "                    }\n", "                    revocationV.add(BOUNCY_CASTLE_FACTORY.createDERTaggedObject(\n", "                            true, 0, BOUNCY_CASTLE_FACTORY.createDERSequence(v2)));\n", "                }\n", "\n", "                if (ocsp != null && !ocsp.isEmpty()) {\n", "                    IASN1EncodableVector vo1 = BOUNCY_CASTLE_FACTORY.createASN1EncodableVector();\n", "                    for (byte[] ocspBytes : ocsp) {\n", "                        IDEROctetString doctet = BOUNCY_CASTLE_FACTORY.createDEROctetString(ocspBytes);\n", "                        IASN1EncodableVector v2 = BOUNCY_CASTLE_FACTORY.createASN1EncodableVector();\n", "                        IOCSPObjectIdentifiers objectIdentifiers = BOUNCY_CASTLE_FACTORY.createOCSPObjectIdentifiers();\n", "                        v2.add(objectIdentifiers.getIdPkixOcspBasic());\n", "                        v2.add(doctet);\n", "                        IASN1Enumerated den = BOUNCY_CASTLE_FACTORY.createASN1Enumerated(0);\n", "                        IASN1EncodableVector v3 = BOUNCY_CASTLE_FACTORY.createASN1EncodableVector();\n", "                        v3.add(den);\n", "                        v3.add(BOUNCY_CASTLE_FACTORY.createDERTaggedObject(\n", "                                true, 0, BOUNCY_CASTLE_FACTORY.createDERSequence(v2)));\n", "                        vo1.add(BOUNCY_CASTLE_FACTORY.createDERSequence(v3));\n", "                    }\n", "                    revocationV.add(BOUNCY_CASTLE_FACTORY.createDERTaggedObject(\n", "                            true, 1, BOUNCY_CASTLE_FACTORY.createDERSequence(vo1)));\n", "                }\n", "\n", "                v.add(BOUNCY_CASTLE_FACTORY.createDERSet(BOUNCY_CASTLE_FACTORY.createDERSequence(revocationV)));\n", "                attribute.add(BOUNCY_CASTLE_FACTORY.createDERSequence(v));\n", "            }\n", "            if (sigtype == PdfSigner.CryptoStandard.CADES) {\n", "                v = BOUNCY_CASTLE_FACTORY.createASN1EncodableVector();\n", "                v.add(BOUNCY_CASTLE_FACTORY.createASN1ObjectIdentifier(SecurityIDs.ID_AA_SIGNING_CERTIFICATE_V2));\n", "\n", "                IASN1EncodableVector aaV2 = BOUNCY_CASTLE_FACTORY.createASN1EncodableVector();\n", "                if (!SecurityIDs.ID_SHA256.equals(digestAlgorithmOid)) {\n", "                    IAlgorithmIdentifier algoId = BOUNCY_CASTLE_FACTORY.createAlgorithmIdentifier(\n", "                            BOUNCY_CASTLE_FACTORY.createASN1ObjectIdentifier(digestAlgorithmOid));\n", "                    aaV2.add(algoId);\n", "                }\n", "                MessageDigest md = SignUtils.getMessageDigest(getDigestAlgorithmName(), interfaceDigest);\n", "                byte[] dig = md.digest(signCert.getEncoded());\n", "                aaV2.add(BOUNCY_CASTLE_FACTORY.createDEROctetString(dig));\n", "\n", "                v.add(BOUNCY_CASTLE_FACTORY.createDERSet(BOUNCY_CASTLE_FACTORY.createDERSequence(\n", "                        BOUNCY_CASTLE_FACTORY.createDERSequence(BOUNCY_CASTLE_FACTORY.createDERSequence(aaV2)))));\n", "                attribute.add(BOUNCY_CASTLE_FACTORY.createDERSequence(v));\n", "            }\n", "\n", "            if (signaturePolicyIdentifier != null) {\n", "                IPKCSObjectIdentifiers ipkcsObjectIdentifiers = BOUNCY_CASTLE_FACTORY.createPKCSObjectIdentifiers();\n", "                IAttribute attr = BOUNCY_CASTLE_FACTORY.createAttribute(ipkcsObjectIdentifiers.getIdAaEtsSigPolicyId(),\n", "                        BOUNCY_CASTLE_FACTORY.createDERSet(signaturePolicyIdentifier));\n", "                attribute.add(attr);\n", "            }\n", "\n", "            return BOUNCY_CASTLE_FACTORY.createDERSet(attribute);\n", "        } catch (Exception e) {\n", "            throw new PdfException(e);\n", "        }\n", "    }\n", "\n", "    /*\n", "     *\tDIGITAL SIGNATURE VERIFICATION\n", "     */\n", "\n", "    /**\n", "     * Signature attributes\n", "     */\n", "    private byte[] sigAttr;\n", "    /**\n", "     * Signature attributes (maybe not necessary, but we use it as fallback)\n", "     */\n", "    private byte[] sigAttrDer;\n", "\n", "    /**\n", "     * encrypted digest\n", "     */\n", "    private MessageDigest encContDigest; // Stefan Santesson\n", "\n", "    /**\n", "     * Indicates if a signature has already been verified\n", "     */\n", "    private boolean verified;\n", "\n", "    /**\n", "     * The result of the verification\n", "     */\n", "    private boolean verifyResult;\n", "\n", "    // verification\n", "\n", "    /**\n", "     * Verifies that signature integrity is intact (or in other words that signed data wasn't modified)\n", "     * by checking that embedded data digest corresponds to the calculated one. Also ensures that signature\n", "     * is genuine and is created by the owner of private key that corresponds to the declared public certificate.\n", "     * <p>\n", "     * Even though signature can be authentic and signed data integrity can be intact,\n", "     * one shall also always check that signed data is not only a part of PDF contents but is actually a complete PDF\n", "     * file.\n", "     * In order to check that given signature covers the current {@link com.itextpdf.kernel.pdf.PdfDocument} please\n", "     * use {@link SignatureUtil#signatureCoversWholeDocument(String)} method.\n", "     *\n", "     * @return <CODE>true</CODE> if the signature checks out, <CODE>false</CODE> otherwise\n", "     *\n", "     * @throws java.security.GeneralSecurityException if this signature object is not initialized properly,\n", "     *                                                the passed-in signature is improperly encoded or of the wrong\n", "     *                                                type, if this signature algorithm is unable to\n", "     *                                                process the input data provided, if the public key is invalid or\n", "     *                                                if security provider or signature algorithm\n", "     *                                                are not recognized, etc.\n", "     */\n", "    public boolean verifySignatureIntegrityAndAuthenticity() throws GeneralSecurityException {\n", "        if (verified) {\n", "            return verifyResult;\n", "        }\n", "        if (sigAttr != null || sigAttrDer != null) {\n", "            final byte[] msgDigestBytes = messageDigest.digest();\n", "            boolean verifySignedMessageContent = true;\n", "            // Stefan Santesson fixed a bug, keeping the code backward compatible\n", "            boolean encContDigestCompare = false;\n", "            if (encapMessageContent != null) {\n", "                if (isTsp) {\n", "                    byte[] tstInfo = new byte[0];\n", "                    try {\n", "                        tstInfo = timeStampTokenInfo.toASN1Primitive().getEncoded();\n", "                    } catch (IOException e) {\n", "                        // Ignore.\n", "                    }\n", "                    // Check that encapMessageContent is TSTInfo\n", "                    boolean isTSTInfo = Arrays.equals(tstInfo, encapMessageContent);\n", "                    IMessageImprint imprint = timeStampTokenInfo.getMessageImprint();\n", "                    byte[] imphashed = imprint.getHashedMessage();\n", "                    verifySignedMessageContent = isTSTInfo && Arrays.equals(msgDigestBytes, imphashed);\n", "                } else {\n", "                    verifySignedMessageContent = Arrays.equals(msgDigestBytes, encapMessageContent);\n", "                }\n", "                encContDigest.update(encapMessageContent);\n", "                encContDigestCompare = Arrays.equals(encContDigest.digest(), digestAttr);\n", "            }\n", "            boolean absentEncContDigestCompare = Arrays.equals(msgDigestBytes, digestAttr);\n", "            boolean concludingDigestCompare = absentEncContDigestCompare || encContDigestCompare;\n", "            boolean sigVerify = verifySigAttributes(sigAttr) || verifySigAttributes(sigAttrDer);\n", "            verifyResult = concludingDigestCompare && sigVerify && verifySignedMessageContent;\n", "        } else {\n", "            if (encapMessageContent != null) {\n", "                SignUtils.updateVerifier(sig, messageDigest.digest());\n", "            }\n", "            verifyResult = sig.verify(signatureValue);\n", "        }\n", "        verified = true;\n", "        return verifyResult;\n", "    }\n", "\n", "    private boolean verifySigAttributes(byte[] attr) throws GeneralSecurityException {\n", "        Signature signature = initSignature(signCert.getPublicKey());\n", "        SignUtils.updateVerifier(signature, attr);\n", "        return signature.verify(signatureValue);\n", "    }\n", "\n", "    /**\n", "     * Checks if the timestamp refers to this document.\n", "     *\n", "     * @return true if it checks false otherwise\n", "     *\n", "     * @throws GeneralSecurityException on error\n", "     */\n", "    public boolean verifyTimestampImprint() throws GeneralSecurityException {\n", "        if (timeStampTokenInfo == null) {\n", "            return false;\n", "        }\n", "        IMessageImprint imprint = timeStampTokenInfo.getMessageImprint();\n", "        String algOID = imprint.getHashAlgorithm().getAlgorithm().getId();\n", "        byte[] md = SignUtils.getMessageDigest(DigestAlgorithms.getDigest(algOID)).digest(signatureValue);\n", "        byte[] imphashed = imprint.getHashedMessage();\n", "        return Arrays.equals(md, imphashed);\n", "    }\n", "\n", "    // Certificates\n", "\n", "    /**\n", "     * All the X.509 certificates in no particular order.\n", "     */\n", "    private final Collection<Certificate> certs;\n", "    \n", "    private Collection<Certificate> timestampCerts;\n", "\n", "    /**\n", "     * All the X.509 certificates used for the main signature.\n", "     */\n", "    Collection<Certificate> signCerts;\n", "\n", "    /**\n", "     * The X.509 certificate that is used to sign the digest.\n", "     */\n", "    private X509Certificate signCert;\n", "\n", "    /**\n", "     * Get all the X.509 certificates associated with this PKCS#7 object in no particular order.\n", "     * Other certificates, from OCSP for example, will also be included.\n", "     *\n", "     * @return the X.509 certificates associated with this PKCS#7 object\n", "     */\n", "    public Certificate[] getCertificates() {\n", "        return certs.toArray(new Certificate[0]);\n", "    }\n", "\n", "    /**\n", "     * Get all X.509 certificates associated with this PKCS#7 object timestamp in no particular order.\n", "     * \n", "     * @return {@link Certificate[]} array\n", "     */\n", "    public Certificate[] getTimestampCertificates() {\n", "        return timestampCerts.toArray(new Certificate[0]);\n", "    }\n", "\n", "    /**\n", "     * Get the X.509 sign certificate chain associated with this PKCS#7 object.\n", "     * Only the certificates used for the main signature will be returned, with\n", "     * the signing certificate first.\n", "     *\n", "     * @return the X.509 certificates associated with this PKCS#7 object\n", "     */\n", "    public Certificate[] getSignCertificateChain() {\n", "        return signCerts.toArray(new Certificate[0]);\n", "    }\n", "\n", "    /**\n", "     * Get the X.509 certificate actually used to sign the digest.\n", "     *\n", "     * @return the X.509 certificate actually used to sign the digest\n", "     */\n", "    public X509Certificate getSigningCertificate() {\n", "        return signCert;\n", "    }\n", "\n", "    /**\n", "     * Helper method that creates the collection of certificates\n", "     * used for the main signature based on the complete list\n", "     * of certificates and the sign certificate.\n", "     */\n", "    private void signCertificateChain() {\n", "        List<Certificate> cc = new ArrayList<>();\n", "        cc.add(signCert);\n", "        List<Certificate> oc = new ArrayList<>(certs);\n", "        for (int k = 0; k < oc.size(); ++k) {\n", "            if (signCert.equals(oc.get(k))) {\n", "                oc.remove(k);\n", "                --k;\n", "            }\n", "        }\n", "        boolean found = true;\n", "        while (found) {\n", "            X509Certificate v = (X509Certificate) cc.get(cc.size() - 1);\n", "            found = false;\n", "            for (int k = 0; k < oc.size(); ++k) {\n", "                X509Certificate issuer = (X509Certificate) oc.get(k);\n", "                if (SignUtils.verifyCertificateSignature(v, issuer.getPublicKey(), provider)) {\n", "                    found = true;\n", "                    cc.add(oc.get(k));\n", "                    oc.remove(k);\n", "                    break;\n", "                }\n", "            }\n", "        }\n", "        signCerts = cc;\n", "    }\n", "\n", "    // Certificate Revocation Lists\n", "\n", "    // Stored in the SignerInfo.\n", "    private Collection<CRL> crls;\n", "\n", "    // Stored in crls field of th SignedData.\n", "    private final Collection<CRL> signedDataCrls = new ArrayList<>();\n", "\n", "    /**\n", "     * Get the X.509 certificate revocation lists associated with this PKCS#7 object (stored in Signer Info).\n", "     *\n", "     * @return the X.509 certificate revocation lists associated with this PKCS#7 object.\n", "     */\n", "    public Collection<CRL> getCRLs() {\n", "        return crls;\n", "    }\n", "\n", "    /**\n", "     * Get the X.509 certificate revocation lists associated with this PKCS#7 Signed Data object.\n", "     *\n", "     * @return the X.509 certificate revocation lists associated with this PKCS#7 Signed Data object.\n", "     */\n", "    public Collection<CRL> getSignedDataCRLs() {\n", "        return signedDataCrls;\n", "    }\n", "\n", "    /**\n", "     * Helper method that tries to construct the CRLs.\n", "     */\n", "    void findCRL(IASN1Sequence seq) {\n", "        try {\n", "            crls = new ArrayList<>();\n", "            for (int k = 0; k < seq.size(); ++k) {\n", "                ByteArrayInputStream ar = new ByteArrayInputStream(seq.getObjectAt(k).toASN1Primitive()\n", "                        .getEncoded(BOUNCY_CASTLE_FACTORY.createASN1Encoding().getDer()));\n", "                X509CRL crl = (X509CRL) SignUtils.parseCrlFromStream(ar);\n", "                crls.add(crl);\n", "            }\n", "        } catch (Exception ex) {\n", "            // ignore\n", "        }\n", "    }\n", "\n", "    // Online Certificate Status Protocol\n", "\n", "    /**\n", "     * BouncyCastle IBasicOCSPResponse\n", "     */\n", "    IBasicOCSPResponse basicResp;\n", "\n", "    private final Collection<IBasicOCSPResponse> signedDataOcsps = new ArrayList<>();\n", "\n", "    /**\n", "     * Gets the OCSP basic response collection retrieved from SignedData structure.\n", "     *\n", "     * @return the OCSP basic response collection.\n", "     */\n", "    public Collection<IBasicOCSPResponse> getSignedDataOcsps() {\n", "        return signedDataOcsps;\n", "    }\n", "\n", "    /**\n", "     * Gets the OCSP basic response from the SignerInfo if there is one.\n", "     *\n", "     * @return the OCSP basic response or null.\n", "     */\n", "    public IBasicOCSPResponse getOcsp() {\n", "        return basicResp;\n", "    }\n", "\n", "    /**\n", "     * Checks if OCSP revocation refers to the document signing certificate.\n", "     *\n", "     * @return true if it checks, false otherwise\n", "     */\n", "    public boolean isRevocationValid() {\n", "        if (basicResp == null) {\n", "            return false;\n", "        }\n", "        if (signCerts.size() < 2) {\n", "            return false;\n", "        }\n", "        try {\n", "            Certificate[] cs = getSignCertificateChain();\n", "            ISingleResp sr = BOUNCY_CASTLE_FACTORY.createSingleResp(basicResp);\n", "            ICertificateID cid = sr.getCertID();\n", "            X509Certificate sigcer = getSigningCertificate();\n", "            X509Certificate isscer = (X509Certificate) cs[1];\n", "            ICertificateID tis = SignUtils.generateCertificateId(isscer, sigcer.getSerialNumber(), cid.getHashAlgOID());\n", "            return tis.equals(cid);\n", "        } catch (Exception ignored) {\n", "        }\n", "        return false;\n", "    }\n", "\n", "    /**\n", "     * Helper method that creates the IBasicOCSPResp object.\n", "     *\n", "     * @param seq {@link IASN1Sequence} wrapper\n", "     *\n", "     * @throws IOException if some I/O error occurred.\n", "     */\n", "    private void findOcsp(IASN1Sequence seq) throws IOException {\n", "        basicResp = null;\n", "        boolean ret;\n", "        while (true) {\n", "            IASN1ObjectIdentifier objectIdentifier = BOUNCY_CASTLE_FACTORY.createASN1ObjectIdentifier(\n", "                    seq.getObjectAt(0));\n", "            IOCSPObjectIdentifiers ocspObjectIdentifiers = BOUNCY_CASTLE_FACTORY.createOCSPObjectIdentifiers();\n", "            if (objectIdentifier != null\n", "                    && objectIdentifier.getId().equals(ocspObjectIdentifiers.getIdPkixOcspBasic().getId())) {\n", "                break;\n", "            }\n", "            ret = true;\n", "            for (int k = 0; k < seq.size(); ++k) {\n", "                IASN1Sequence nextSeq = BOUNCY_CASTLE_FACTORY.createASN1Sequence(seq.getObjectAt(k));\n", "                if (nextSeq != null) {\n", "                    seq = nextSeq;\n", "                    ret = false;\n", "                    break;\n", "                }\n", "                IASN1TaggedObject tag = BOUNCY_CASTLE_FACTORY.createASN1TaggedObject(seq.getObjectAt(k));\n", "                if (tag != null) {\n", "                    nextSeq = BOUNCY_CASTLE_FACTORY.createASN1Sequence(tag.getObject());\n", "                    if (nextSeq != null) {\n", "                        seq = nextSeq;\n", "                        ret = false;\n", "                        break;\n", "                    } else {\n", "                        return;\n", "                    }\n", "                }\n", "            }\n", "            if (ret) {\n", "                return;\n", "            }\n", "        }\n", "        IASN1OctetString os = BOUNCY_CASTLE_FACTORY.createASN1OctetString(seq.getObjectAt(1));\n", "        try (IASN1InputStream inp = BOUNCY_CASTLE_FACTORY.createASN1InputStream(os.getOctets())) {\n", "            basicResp = BOUNCY_CASTLE_FACTORY.createBasicOCSPResponse(inp.readObject());\n", "        }\n", "    }\n", "\n", "    // Time Stamps\n", "\n", "    /**\n", "     * True if there's a PAdES LTV time stamp.\n", "     */\n", "    private boolean isTsp;\n", "\n", "    /**\n", "     * True if it's a CAdES signature type.\n", "     */\n", "    private boolean isCades;\n", "\n", "    /**\n", "     * Inner timestamp signature container.\n", "     */\n", "    private PdfPKCS7 timestampSignatureContainer;\n", "\n", "    /**\n", "     * BouncyCastle TSTInfo.\n", "     */\n", "    private ITSTInfo timeStampTokenInfo;\n", "    /**\n", "     * Check if it's a PAdES-LTV time stamp.\n", "     *\n", "     * @return true if it's a PAdES-LTV time stamp, false otherwise\n", "     */\n", "    public boolean isTsp() {\n", "        return isTsp;\n", "    }\n", "\n", "    /**\n", "     * Retrieves inner timestamp signature container if there is one.\n", "     *\n", "     * @return timestamp signature container or null.\n", "     */\n", "    public PdfPKCS7 getTimestampSignatureContainer() {\n", "        return timestampSignatureContainer;\n", "    }\n", "\n", "    /**\n", "     * Gets the timestamp token info if there is one.\n", "     *\n", "     * @return the timestamp token info or null\n", "     */\n", "    public ITSTInfo getTimeStampTokenInfo() {\n", "        return timeStampTokenInfo;\n", "    }\n", "\n", "    /**\n", "     * Gets the timestamp date.\n", "     *\n", "     * <p>\n", "     * In case the signed document doesn't contain timestamp,\n", "     * {@link TimestampConstants#UNDEFINED_TIMESTAMP_DATE} will be returned.\n", "     *\n", "     * @return the timestamp date\n", "     */\n", "    public Calendar getTimeStampDate() {\n", "        if (timeStampTokenInfo == null) {\n", "            return (Calendar) TimestampConstants.UNDEFINED_TIMESTAMP_DATE;\n", "        }\n", "        return SignUtils.getTimeStampDate(timeStampTokenInfo);\n", "    }\n", "\n", "    /**\n", "     * Getter for the filter subtype.\n", "     *\n", "     * @return the filter subtype\n", "     */\n", "    public PdfName getFilterSubtype() {\n", "        return filterSubtype;\n", "    }\n", "}\n"], "test_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.signatures;\n", "\n", "import com.itextpdf.commons.bouncycastle.asn1.IASN1InputStream;\n", "import com.itextpdf.commons.bouncycastle.asn1.IASN1OctetString;\n", "import com.itextpdf.commons.bouncycastle.asn1.IASN1Primitive;\n", "import com.itextpdf.commons.bouncycastle.asn1.tsp.ITSTInfo;\n", "import com.itextpdf.commons.utils.DateTimeUtil;\n", "import com.itextpdf.commons.utils.FileUtil;\n", "import com.itextpdf.commons.utils.MessageFormatUtil;\n", "import com.itextpdf.kernel.exceptions.KernelExceptionMessageConstant;\n", "import com.itextpdf.kernel.exceptions.PdfException;\n", "import com.itextpdf.kernel.pdf.PdfDocument;\n", "import com.itextpdf.kernel.pdf.PdfReader;\n", "import com.itextpdf.signatures.PdfSigner.CryptoStandard;\n", "import com.itextpdf.signatures.exceptions.SignExceptionMessageConstant;\n", "import com.itextpdf.signatures.testutils.SignTestPortUtil;\n", "import com.itextpdf.signatures.testutils.TimeTestUtil;\n", "import com.itextpdf.signatures.testutils.client.TestTsaClient;\n", "import com.itextpdf.test.annotations.type.BouncyCastleUnitTest;\n", "\n", "import java.io.IOException;\n", "import java.nio.file.Files;\n", "import java.nio.file.Paths;\n", "import java.security.GeneralSecurityException;\n", "import java.security.InvalidKeyException;\n", "import java.security.NoSuchAlgorithmException;\n", "import java.security.NoSuchProviderException;\n", "import java.security.cert.CRLException;\n", "import java.security.cert.Certificate;\n", "import java.security.cert.CertificateException;\n", "import java.security.cert.X509CRL;\n", "import java.text.ParseException;\n", "import java.util.Arrays;\n", "import java.util.Calendar;\n", "import java.util.Collections;\n", "import java.util.List;\n", "import java.util.stream.Collectors;\n", "import org.junit.Assert;\n", "import org.junit.Test;\n", "import org.junit.experimental.categories.Category;\n", "\n", "@Category(BouncyCastleUnitTest.class)\n", "public class PdfPKCS7Test extends PdfPKCS7BasicTest {\n", "\n", "    private static final double EPS = 0.001;\n", "\n", "    @Test\n", "    // PdfPKCS7 is created here the same way it's done in PdfSigner#signDetached,\n", "    // only the hash algorithm is altered\n", "    public void unknownHashAlgorithmTest() {\n", "        String hashAlgorithm = \"\";\n", "        Exception e = Assert.assertThrows(PdfException.class,\n", "                () -> new PdfPKCS7(null, chain, hashAlgorithm, null,\n", "                        new BouncyCastleDigest(), false));\n", "        Assert.assertEquals(\n", "                MessageFormatUtil.format(SignExceptionMessageConstant.UNKNOWN_HASH_ALGORITHM, hashAlgorithm),\n", "                e.getMessage());\n", "    }\n", "\n", "    @Test\n", "    public void simpleCreationTest()\n", "            throws NoSuchAlgorithmException, InvalidKeyException, NoSuchProviderException {\n", "        String hashAlgorithm = DigestAlgorithms.SHA256;\n", "        PdfPKCS7 pkcs7 = new PdfPKCS7(null, chain, hashAlgorithm, null, false);\n", "\n", "        String expectedOid = DigestAlgorithms.getAllowedDigest(hashAlgorithm);\n", "        Assert.assertEquals(expectedOid, pkcs7.getDigestAlgorithmOid());\n", "        Assert.assertEquals(chain[0], pkcs7.getSigningCertificate());\n", "        Assert.assertArrayEquals(chain, pkcs7.getCertificates());\n", "        Assert.assertNull(pkcs7.getSignatureMechanismOid());\n", "\n", "        // test default fields\n", "        Assert.assertEquals(1, pkcs7.getVersion());\n", "        Assert.assertEquals(1, pkcs7.getSigningInfoVersion());\n", "    }\n", "\n", "    @Test\n", "    public void simpleCreationWithPrivateKeyTest()\n", "            throws NoSuchAlgorithmException, InvalidKeyException, NoSuchProviderException {\n", "        String hashAlgorithm = DigestAlgorithms.SHA256;\n", "        PdfPKCS7 pkcs7 = new PdfPKCS7(pk, chain, hashAlgorithm, null, new BouncyCastleDigest(), false);\n", "\n", "        String expectedOid = DigestAlgorithms.getAllowedDigest(hashAlgorithm);\n", "        Assert.assertEquals(expectedOid, pkcs7.getDigestAlgorithmOid());\n", "        Assert.assertEquals(chain[0], pkcs7.getSigningCertificate());\n", "        Assert.assertArrayEquals(chain, pkcs7.getCertificates());\n", "        Assert.assertEquals(SecurityIDs.ID_RSA_WITH_SHA256, pkcs7.getSignatureMechanismOid());\n", "    }\n", "\n", "    @Test\n", "    public void notAvailableSignatureTest() {\n", "        String hashAlgorithm = \"GOST3411\";\n", "        // Throws different exceptions on .net and java, bc/bcfips\n", "        Assert.assertThrows(Exception.class,\n", "                () -> new PdfPKCS7(pk, chain, hashAlgorithm, null, new BouncyCastleDigest(), false));\n", "    }\n", "\n", "    @Test\n", "    public void reasonSetGetTest()\n", "            throws NoSuchAlgorithmException, InvalidKeyException, NoSuchProviderException {\n", "        PdfPKCS7 pkcs7 = createSimplePdfPKCS7();\n", "        Assert.assertNull(pkcs7.getReason());\n", "\n", "        String testReason = \"testReason\";\n", "        pkcs7.setReason(testReason);\n", "        Assert.assertEquals(testReason, pkcs7.getReason());\n", "    }\n", "\n", "    @Test\n", "    public void locationSetGetTest()\n", "            throws NoSuchAlgorithmException, InvalidKeyException, NoSuchProviderException {\n", "        PdfPKCS7 pkcs7 = createSimplePdfPKCS7();\n", "        Assert.assertNull(pkcs7.getLocation());\n", "\n", "        String testLocation = \"testLocation\";\n", "        pkcs7.setLocation(testLocation);\n", "        Assert.assertEquals(testLocation, pkcs7.getLocation());\n", "    }\n", "\n", "    @Test\n", "    public void signNameSetGetTest()\n", "            throws NoSuchAlgorithmException, InvalidKeyException, NoSuchProviderException {\n", "        PdfPKCS7 pkcs7 = createSimplePdfPKCS7();\n", "        Assert.assertNull(pkcs7.getSignName());\n", "\n", "        String testSignName = \"testSignName\";\n", "        pkcs7.setSignName(testSignName);\n", "        Assert.assertEquals(testSignName, pkcs7.getSignName());\n", "    }\n", "\n", "    @Test\n", "    public void signDateSetGetTest()\n", "            throws NoSuchAlgorithmException, InvalidKeyException, NoSuchProviderException {\n", "        PdfPKCS7 pkcs7 = createSimplePdfPKCS7();\n", "        Assert.assertEquals(TimestampConstants.UNDEFINED_TIMESTAMP_DATE, pkcs7.getSignDate());\n", "\n", "        Calendar testSignDate = DateTimeUtil.getCurrentTimeCalendar();\n", "        pkcs7.setSignDate(testSignDate);\n", "        Assert.assertEquals(testSignDate, pkcs7.getSignDate());\n", "    }\n", "\n", "    @Test\n", "    public void ocspGetTest() throws IOException, ParseException {\n", "        PdfDocument outDocument = new PdfDocument(\n", "                new PdfReader(SOURCE_FOLDER + \"ltvEnabledSingleSignatureTest01.pdf\"));\n", "        SignatureUtil sigUtil = new SignatureUtil(outDocument);\n", "        PdfPKCS7 pkcs7 = sigUtil.readSignatureData(\"Signature1\");\n", "\n", "        Assert.assertNull(pkcs7.getCRLs());\n", "        // it's tested here that ocsp and time stamp token were found while\n", "        // constructing PdfPKCS7 instance\n", "        ITSTInfo timeStampTokenInfo = pkcs7.getTimeStampTokenInfo();\n", "        Assert.assertNotNull(timeStampTokenInfo);\n", "\n", "        // The number corresponds to 3 September, 2021 13:32:33.\n", "        double expectedMillis = (double) 1630675953000L;\n", "        Assert.assertEquals(\n", "                TimeTestUtil.getFullDaysMillis(expectedMillis),\n", "                TimeTestUtil.getFullDaysMillis(DateTimeUtil.getUtcMillisFromEpoch(\n", "                        DateTimeUtil.getCalendar(timeStampTokenInfo.getGenTime()))),\n", "                EPS);\n", "        Assert.assertEquals(\n", "                TimeTestUtil.getFullDaysMillis(expectedMillis),\n", "                TimeTestUtil.getFullDaysMillis(DateTimeUtil.getUtcMillisFromEpoch(\n", "                        DateTimeUtil.getCalendar(pkcs7.getOcsp().getProducedAtDate()))),\n", "                EPS);\n", "    }\n", "\n", "    @Test\n", "    public void verifyTimestampImprintSimpleSignatureTest() throws IOException, GeneralSecurityException {\n", "        PdfDocument outDocument = new PdfDocument(\n", "                new PdfReader(SOURCE_FOLDER + \"simpleSignature.pdf\"));\n", "        PdfPKCS7 pkcs7 = new SignatureUtil(outDocument).readSignatureData(\"Signature1\");\n", "        Assert.assertFalse(pkcs7.verifyTimestampImprint());\n", "    }\n", "\n", "    @Test\n", "    public void verifyTimestampImprintTimeStampSignatureTest() throws IOException, GeneralSecurityException {\n", "        PdfDocument outDocument = new PdfDocument(\n", "                new PdfReader(SOURCE_FOLDER + \"timeStampSignature.pdf\"));\n", "        PdfPKCS7 pkcs7 = new SignatureUtil(outDocument).readSignatureData(\"timestampSig1\");\n", "        Assert.assertFalse(pkcs7.verifyTimestampImprint());\n", "    }\n", "\n", "    @Test\n", "    public void verifyTimestampImprintEmbeddedTimeStampSignatureTest() throws IOException, GeneralSecurityException {\n", "        PdfDocument outDocument = new PdfDocument(\n", "                new PdfReader(SOURCE_FOLDER + \"embeddedTimeStampSignature.pdf\"));\n", "        PdfPKCS7 pkcs7 = new SignatureUtil(outDocument).readSignatureData(\"Signature1\");\n", "        Assert.assertTrue(pkcs7.verifyTimestampImprint());\n", "    }\n", "\n", "    @Test\n", "    public void verifyTimestampImprintCorruptedTimeStampSignatureTest() throws IOException, GeneralSecurityException {\n", "        PdfDocument outDocument = new PdfDocument(\n", "                new PdfReader(SOURCE_FOLDER + \"embeddedTimeStampCorruptedSignature.pdf\"));\n", "        PdfPKCS7 pkcs7 = new SignatureUtil(outDocument).readSignatureData(\"Signature1\");\n", "        Assert.assertTrue(pkcs7.verifyTimestampImprint());\n", "    }\n", "\n", "    @Test\n", "    public void findCrlIsNotNullTest() throws IOException, CRLException {\n", "        PdfDocument outDocument = new PdfDocument(\n", "                new PdfReader(SOURCE_FOLDER + \"singleSignatureNotEmptyCRL.pdf\"));\n", "        SignatureUtil sigUtil = new SignatureUtil(outDocument);\n", "        PdfPKCS7 pkcs7 = sigUtil.readSignatureData(\"Signature1\");\n", "        List<X509CRL> crls = pkcs7.getCRLs().stream().map(crl -> (X509CRL) crl).collect(Collectors.toList());\n", "        Assert.assertEquals(2, crls.size());\n", "        Assert.assertArrayEquals(crls.get(0).getEncoded(),\n", "                Files.readAllBytes(Paths.get(SOURCE_FOLDER, \"firstCrl.bin\")));\n", "        Assert.assertArrayEquals(crls.get(1).getEncoded(),\n", "                Files.readAllBytes(Paths.get(SOURCE_FOLDER, \"secondCrl.bin\")));\n", "    }\n", "\n", "    @Test\n", "    public void findCrlNullSequenceNoExceptionTest()\n", "            throws NoSuchAlgorithmException, InvalidKeyException, NoSuchProviderException {\n", "        PdfPKCS7 pkcs7 = createSimplePdfPKCS7();\n", "        pkcs7.findCRL(null);\n", "        Assert.assertTrue(pkcs7.getCRLs().isEmpty());\n", "    }\n", "\n", "    @Test\n", "    public void isRevocationValidWithInvalidOcspTest() throws IOException {\n", "        PdfDocument outDocument = new PdfDocument(\n", "                new PdfReader(SOURCE_FOLDER + \"signatureWithInvalidOcspTest.pdf\"));\n", "        SignatureUtil sigUtil = new SignatureUtil(outDocument);\n", "        PdfPKCS7 pkcs7 = sigUtil.readSignatureData(\"Signature1\");\n", "        Assert.assertFalse(pkcs7.isRevocationValid());\n", "    }\n", "\n", "    @Test\n", "    public void isRevocationValidWithValidOcspTest() throws IOException {\n", "        PdfDocument outDocument = new PdfDocument(\n", "                new PdfReader(SOURCE_FOLDER + \"signatureWithValidOcspTest.pdf\"));\n", "        SignatureUtil sigUtil = new SignatureUtil(outDocument);\n", "        PdfPKCS7 pkcs7 = sigUtil.readSignatureData(\"Signature1\");\n", "        Assert.assertTrue(pkcs7.isRevocationValid());\n", "    }\n", "\n", "    @Test\n", "    public void isRevocationValidOcspResponseIsNullTest()\n", "            throws NoSuchAlgorithmException, InvalidKeyException, NoSuchProviderException {\n", "        PdfPKCS7 pkcs7 = createSimplePdfPKCS7();\n", "        pkcs7.basicResp = null;\n", "        Assert.assertFalse(pkcs7.isRevocationValid());\n", "    }\n", "\n", "    @Test\n", "    public void isRevocationValidLackOfSignCertsTest()\n", "            throws NoSuchAlgorithmException, InvalidKeyException, NoSuchProviderException, IOException {\n", "        PdfPKCS7 pkcs7 = createSimplePdfPKCS7();\n", "        pkcs7.basicResp = BOUNCY_CASTLE_FACTORY.createBasicOCSPResponse(\n", "                BOUNCY_CASTLE_FACTORY.createASN1InputStream(\n", "                        Files.readAllBytes(Paths.get(SOURCE_FOLDER, \"simpleOCSPResponse.bin\"))).readObject());\n", "        pkcs7.signCerts = Collections.singleton(chain[0]);\n", "        Assert.assertFalse(pkcs7.isRevocationValid());\n", "    }\n", "\n", "    @Test\n", "    public void isRevocationValidExceptionDuringValidationTest()\n", "            throws NoSuchAlgorithmException, InvalidKeyException, NoSuchProviderException, IOException {\n", "        PdfPKCS7 pkcs7 = createSimplePdfPKCS7();\n", "        pkcs7.basicResp = BOUNCY_CASTLE_FACTORY.createBasicOCSPResponse(\n", "                BOUNCY_CASTLE_FACTORY.createASN1InputStream(\n", "                        Files.readAllBytes(Paths.get(SOURCE_FOLDER, \"simpleOCSPResponse.bin\"))).readObject());\n", "        pkcs7.signCerts = Arrays.asList(new Certificate[] {null, null});\n", "        Assert.assertFalse(pkcs7.isRevocationValid());\n", "    }\n", "\n", "    @Test\n", "    public void getEncodedPkcs1Test()\n", "            throws NoSuchAlgorithmException, InvalidKeyException, NoSuchProviderException, IOException {\n", "        String hashAlgorithm = DigestAlgorithms.SHA256;\n", "        PdfPKCS7 pkcs7 = new PdfPKCS7(pk, chain, hashAlgorithm, null, new BouncyCastleDigest(), true);\n", "        byte[] bytes = pkcs7.getEncodedPKCS1();\n", "        byte[] cmpBytes = Files.readAllBytes(Paths.get(SOURCE_FOLDER + \"cmpBytesPkcs1.txt\"));\n", "        IASN1OctetString outOctetString = BOUNCY_CASTLE_FACTORY.createASN1OctetString(bytes);\n", "        IASN1OctetString cmpOctetString = BOUNCY_CASTLE_FACTORY.createASN1OctetString(cmpBytes);\n", "        Assert.assertEquals(outOctetString, cmpOctetString);\n", "    }\n", "\n", "    @Test\n", "    public void getEncodedPkcs1NullPrivateKeyTest()\n", "            throws NoSuchAlgorithmException, InvalidKeyException, NoSuchProviderException {\n", "        String hashAlgorithm = DigestAlgorithms.SHA256;\n", "        PdfPKCS7 pkcs7 = new PdfPKCS7(null, chain, hashAlgorithm, null, new BouncyCastleDigest(), true);\n", "        Exception exception = Assert.assertThrows(PdfException.class, () -> pkcs7.getEncodedPKCS1());\n", "        Assert.assertEquals(KernelExceptionMessageConstant.UNKNOWN_PDF_EXCEPTION, exception.getMessage());\n", "    }\n", "\n", "    @Test\n", "    public void getEncodedPkcs7UnknownExceptionTest()\n", "            throws NoSuchAlgorithmException, InvalidKeyException, NoSuchProviderException {\n", "        String hashAlgorithm = DigestAlgorithms.SHA256;\n", "        PdfPKCS7 pkcs7 = new PdfPKCS7(pk, chain, hashAlgorithm, null, new BouncyCastleDigest(), true);\n", "        TestTsaClient testTsa = new TestTsaClient(Arrays.asList(chain), pk);\n", "        Exception exception = Assert.assertThrows(PdfException.class,\n", "                () -> pkcs7.getEncodedPKCS7(null, CryptoStandard.CMS, testTsa, null, null));\n", "        Assert.assertEquals(KernelExceptionMessageConstant.UNKNOWN_PDF_EXCEPTION, exception.getMessage());\n", "    }\n", "\n", "    @Test\n", "    public void getEncodedPkcs7Test()\n", "            throws NoSuchAlgorithmException, InvalidKeyException, NoSuchProviderException, IOException {\n", "        String hashAlgorithm = DigestAlgorithms.SHA256;\n", "        PdfPKCS7 pkcs7 = new PdfPKCS7(pk, chain, hashAlgorithm, null, new BouncyCastleDigest(), true);\n", "        byte[] bytes = pkcs7.getEncodedPKCS7();\n", "        byte[] cmpBytes = Files.readAllBytes(Paths.get(SOURCE_FOLDER + \"cmpBytesPkcs7.txt\"));\n", "        IASN1Primitive outStream = BOUNCY_CASTLE_FACTORY.createASN1Primitive(bytes);\n", "        IASN1Primitive cmpStream = BOUNCY_CASTLE_FACTORY.createASN1Primitive(cmpBytes);\n", "        Assert.assertEquals(\"SHA256withRSA\", pkcs7.getSignatureMechanismName());\n", "        Assert.assertEquals(outStream, cmpStream);\n", "    }\n", "\n", "    @Test\n", "    public void getEncodedPkcs7WithRevocationInfoTest() throws NoSuchAlgorithmException, InvalidKeyException,\n", "            NoSuchProviderException, IOException, CertificateException, CRLException {\n", "        String hashAlgorithm = DigestAlgorithms.SHA256;\n", "        PdfPKCS7 pkcs7 = new PdfPKCS7(pk, chain, hashAlgorithm, null, new BouncyCastleDigest(), true);\n", "        pkcs7.getSignedDataCRLs().add(SignTestPortUtil.parseCrlFromStream(FileUtil.getInputStreamForFile(SOURCE_FOLDER + \"firstCrl.bin\")));\n", "        pkcs7.getSignedDataOcsps().add(BOUNCY_CASTLE_FACTORY.createBasicOCSPResponse(BOUNCY_CASTLE_FACTORY.createASN1InputStream(\n", "                        Files.readAllBytes(Paths.get(SOURCE_FOLDER, \"simpleOCSPResponse.bin\"))).readObject()));\n", "        byte[] bytes = pkcs7.getEncodedPKCS7();\n", "        byte[] cmpBytes = Files.readAllBytes(Paths.get(SOURCE_FOLDER + \"cmpBytesPkcs7WithRevInfo.txt\"));\n", "        Assert.assertEquals(\"SHA256withRSA\", pkcs7.getSignatureMechanismName());\n", "        Assert.assertEquals(serializedAsString(bytes), serializedAsString(cmpBytes));\n", "    }\n", "\n", "    @Test\n", "    public void verifyEd448SignatureTest() throws IOException, GeneralSecurityException {\n", "        // SHAKE256 is not available in BCFIPS\n", "        if (\"BCFIPS\".equals(BOUNCY_CASTLE_FACTORY.getProviderName())) {\n", "            Assert.assertThrows(PdfException.class,\n", "                    () -> verifyIsoExtensionExample(\"Ed448\", \"sample-ed448-shake256.pdf\"));\n", "        } else {\n", "            verifyIsoExtensionExample(\"Ed448\", \"sample-ed448-shake256.pdf\");\n", "        }\n", "    }\n", "\n", "    @Test\n", "    public void verifyNistECDSASha2SignatureTest() throws IOException, GeneralSecurityException {\n", "        verifyIsoExtensionExample(\"SHA256withECDSA\", \"sample-nistp256-sha256.pdf\");\n", "    }\n", "\n", "    @Test\n", "    public void verifyBrainpoolSha2SignatureTest() throws IOException, GeneralSecurityException {\n", "        verifyIsoExtensionExample(\"SHA384withECDSA\", \"sample-brainpoolP384r1-sha384.pdf\");\n", "    }\n", "\n", "    // PdfPKCS7 is created here the same way it's done in PdfSigner#signDetached\n", "    private static PdfPKCS7 createSimplePdfPKCS7()\n", "            throws NoSuchAlgorithmException, InvalidKeyException, NoSuchProviderException {\n", "        return new PdfPKCS7(null, chain, DigestAlgorithms.SHA256, null,\n", "                new BouncyCastleDigest(), false);\n", "    }\n", "\n", "    private String serializedAsString(byte[] serialized) throws IOException {\n", "        IASN1InputStream is = BOUNCY_CASTLE_FACTORY.createASN1InputStream(serialized);\n", "        IASN1Primitive obj1 = is.readObject();\n", "        return BOUNCY_CASTLE_FACTORY.createASN1Dump().dumpAsString(obj1, true).replace(\"\\r\\n\", \"\\n\");\n", "    }\n", "}\n"], "method_lines_dic": {"PdfPKCS7::::setSignaturePolicy(com.itextpdf.signatures.SignaturePolicyInfo)": [489, 491], "PdfPKCS7::::getSignName()": [507, 509], "PdfPKCS7::::setSignName(java.lang.String)": [516, 518], "PdfPKCS7::::getReason()": [525, 527], "PdfPKCS7::::setReason(java.lang.String)": [534, 536], "PdfPKCS7::::getLocation()": [543, 545], "PdfPKCS7::::setLocation(java.lang.String)": [552, 554], "PdfPKCS7::::getSignDate()": [561, 568], "PdfPKCS7::::setSignDate(java.util.Calendar)": [575, 577], "PdfPKCS7::::getVersion()": [596, 598], "PdfPKCS7::::getSigningInfoVersion()": [605, 607], "PdfPKCS7::::getDigestAlgorithmOid()": [646, 648], "PdfPKCS7::::getDigestAlgorithmName()": [655, 671], "PdfPKCS7::::getSignatureMechanismOid()": [679, 681], "PdfPKCS7::::getSignatureMechanismName()": [690, 704], "PdfPKCS7::::getSignatureAlgorithmName()": [712, 718], "PdfPKCS7::::setExternalSignatureValue(byte[],byte[],java.lang.String)": [748, 750], "PdfPKCS7::::setExternalSignatureValue(byte[],byte[],java.lang.String,com.itextpdf.signatures.ISignatureMechanismParams)": [764, 781], "PdfPKCS7::::initSignature(java.security.PrivateKey)": [801, 806], "PdfPKCS7::::initSignature(java.security.PublicKey)": [808, 821], "PdfPKCS7::::configureSignatureMechanismParameters(java.security.Signature)": [823, 863], "PdfPKCS7::::update(byte[],int,int)": [875, 881], "PdfPKCS7::::getEncodedPKCS1()": [890, 907], "PdfPKCS7::::getEncodedPKCS7()": [916, 918], "PdfPKCS7::::getEncodedPKCS7(byte[])": [928, 930], "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)": [951, 1085], "PdfPKCS7::::buildUnauthenticatedAttributes(byte[])": [1099, 1116], "PdfPKCS7::::getAuthenticatedAttributeBytes(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,java.util.Collection<byte[]>,java.util.Collection<byte[]>)": [1161, 1169], "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)": [1179, 1274], "PdfPKCS7::::verifySignatureIntegrityAndAuthenticity()": [1326, 1366], "PdfPKCS7::::verifySigAttributes(byte[])": [1368, 1372], "PdfPKCS7::::verifyTimestampImprint()": [1381, 1390], "PdfPKCS7::::getCertificates()": [1417, 1419], "PdfPKCS7::::getTimestampCertificates()": [1426, 1428], "PdfPKCS7::::getSignCertificateChain()": [1437, 1439], "PdfPKCS7::::getSigningCertificate()": [1446, 1448], "PdfPKCS7::::signCertificateChain()": [1455, 1480], "PdfPKCS7::::getCRLs()": [1495, 1497], "PdfPKCS7::::getSignedDataCRLs()": [1504, 1506], "PdfPKCS7::::getSignedDataOcsps()": [1539, 1541], "PdfPKCS7::::getOcsp()": [1548, 1550], "PdfPKCS7::::isRevocationValid()": [1557, 1575], "PdfPKCS7::::isTsp()": [1651, 1653], "PdfPKCS7::::getTimestampSignatureContainer()": [1660, 1662], "PdfPKCS7::::getTimeStampTokenInfo()": [1669, 1671], "PdfPKCS7::::getTimeStampDate()": [1682, 1687], "PdfPKCS7::::getFilterSubtype()": [1694, 1696]}, "test_method_lines_dic": {"PdfPKCS7Test::::unknownHashAlgorithmTest()": [69, 80], "PdfPKCS7Test::::simpleCreationTest()": [82, 97], "PdfPKCS7Test::::simpleCreationWithPrivateKeyTest()": [99, 110], "PdfPKCS7Test::::notAvailableSignatureTest()": [112, 118], "PdfPKCS7Test::::reasonSetGetTest()": [120, 129], "PdfPKCS7Test::::locationSetGetTest()": [131, 140], "PdfPKCS7Test::::signNameSetGetTest()": [142, 151], "PdfPKCS7Test::::signDateSetGetTest()": [153, 162], "PdfPKCS7Test::::ocspGetTest()": [164, 189], "PdfPKCS7Test::::verifyTimestampImprintSimpleSignatureTest()": [191, 197], "PdfPKCS7Test::::verifyTimestampImprintTimeStampSignatureTest()": [199, 205], "PdfPKCS7Test::::verifyTimestampImprintEmbeddedTimeStampSignatureTest()": [207, 213], "PdfPKCS7Test::::verifyTimestampImprintCorruptedTimeStampSignatureTest()": [215, 221], "PdfPKCS7Test::::findCrlIsNotNullTest()": [223, 235], "PdfPKCS7Test::::findCrlNullSequenceNoExceptionTest()": [237, 243], "PdfPKCS7Test::::isRevocationValidWithInvalidOcspTest()": [245, 252], "PdfPKCS7Test::::isRevocationValidWithValidOcspTest()": [254, 261], "PdfPKCS7Test::::isRevocationValidOcspResponseIsNullTest()": [263, 269], "PdfPKCS7Test::::isRevocationValidLackOfSignCertsTest()": [271, 280], "PdfPKCS7Test::::isRevocationValidExceptionDuringValidationTest()": [282, 291], "PdfPKCS7Test::::getEncodedPkcs1Test()": [293, 303], "PdfPKCS7Test::::getEncodedPkcs1NullPrivateKeyTest()": [305, 312], "PdfPKCS7Test::::getEncodedPkcs7UnknownExceptionTest()": [314, 323], "PdfPKCS7Test::::getEncodedPkcs7Test()": [325, 336], "PdfPKCS7Test::::getEncodedPkcs7WithRevocationInfoTest()": [338, 350], "PdfPKCS7Test::::verifyEd448SignatureTest()": [352, 361], "PdfPKCS7Test::::verifyNistECDSASha2SignatureTest()": [363, 366], "PdfPKCS7Test::::verifyBrainpoolSha2SignatureTest()": [368, 371], "PdfPKCS7Test::::createSimplePdfPKCS7()": [374, 378], "PdfPKCS7Test::::serializedAsString(byte[])": [380, 384]}, "reverse_method_lines_dic": {"489": "PdfPKCS7::::setSignaturePolicy(com.itextpdf.signatures.SignaturePolicyInfo)", "490": "PdfPKCS7::::setSignaturePolicy(com.itextpdf.signatures.SignaturePolicyInfo)", "491": "PdfPKCS7::::setSignaturePolicy(com.itextpdf.signatures.SignaturePolicyInfo)", "507": "PdfPKCS7::::getSignName()", "508": "PdfPKCS7::::getSignName()", "509": "PdfPKCS7::::getSignName()", "516": "PdfPKCS7::::setSignName(java.lang.String)", "517": "PdfPKCS7::::setSignName(java.lang.String)", "518": "PdfPKCS7::::setSignName(java.lang.String)", "525": "PdfPKCS7::::getReason()", "526": "PdfPKCS7::::getReason()", "527": "PdfPKCS7::::getReason()", "534": "PdfPKCS7::::setReason(java.lang.String)", "535": "PdfPKCS7::::setReason(java.lang.String)", "536": "PdfPKCS7::::setReason(java.lang.String)", "543": "PdfPKCS7::::getLocation()", "544": "PdfPKCS7::::getLocation()", "545": "PdfPKCS7::::getLocation()", "552": "PdfPKCS7::::setLocation(java.lang.String)", "553": "PdfPKCS7::::setLocation(java.lang.String)", "554": "PdfPKCS7::::setLocation(java.lang.String)", "561": "PdfPKCS7::::getSignDate()", "562": "PdfPKCS7::::getSignDate()", "563": "PdfPKCS7::::getSignDate()", "564": "PdfPKCS7::::getSignDate()", "565": "PdfPKCS7::::getSignDate()", "566": "PdfPKCS7::::getSignDate()", "567": "PdfPKCS7::::getSignDate()", "568": "PdfPKCS7::::getSignDate()", "575": "PdfPKCS7::::setSignDate(java.util.Calendar)", "576": "PdfPKCS7::::setSignDate(java.util.Calendar)", "577": "PdfPKCS7::::setSignDate(java.util.Calendar)", "596": "PdfPKCS7::::getVersion()", "597": "PdfPKCS7::::getVersion()", "598": "PdfPKCS7::::getVersion()", "605": "PdfPKCS7::::getSigningInfoVersion()", "606": "PdfPKCS7::::getSigningInfoVersion()", "607": "PdfPKCS7::::getSigningInfoVersion()", "646": "PdfPKCS7::::getDigestAlgorithmOid()", "647": "PdfPKCS7::::getDigestAlgorithmOid()", "648": "PdfPKCS7::::getDigestAlgorithmOid()", "655": "PdfPKCS7::::getDigestAlgorithmName()", "656": "PdfPKCS7::::getDigestAlgorithmName()", "657": "PdfPKCS7::::getDigestAlgorithmName()", "658": "PdfPKCS7::::getDigestAlgorithmName()", "659": "PdfPKCS7::::getDigestAlgorithmName()", "660": "PdfPKCS7::::getDigestAlgorithmName()", "661": "PdfPKCS7::::getDigestAlgorithmName()", "662": "PdfPKCS7::::getDigestAlgorithmName()", "663": "PdfPKCS7::::getDigestAlgorithmName()", "664": "PdfPKCS7::::getDigestAlgorithmName()", "665": "PdfPKCS7::::getDigestAlgorithmName()", "666": "PdfPKCS7::::getDigestAlgorithmName()", "667": "PdfPKCS7::::getDigestAlgorithmName()", "668": "PdfPKCS7::::getDigestAlgorithmName()", "669": "PdfPKCS7::::getDigestAlgorithmName()", "670": "PdfPKCS7::::getDigestAlgorithmName()", "671": "PdfPKCS7::::getDigestAlgorithmName()", "679": "PdfPKCS7::::getSignatureMechanismOid()", "680": "PdfPKCS7::::getSignatureMechanismOid()", "681": "PdfPKCS7::::getSignatureMechanismOid()", "690": "PdfPKCS7::::getSignatureMechanismName()", "691": "PdfPKCS7::::getSignatureMechanismName()", "692": "PdfPKCS7::::getSignatureMechanismName()", "693": "PdfPKCS7::::getSignatureMechanismName()", "694": "PdfPKCS7::::getSignatureMechanismName()", "695": "PdfPKCS7::::getSignatureMechanismName()", "696": "PdfPKCS7::::getSignatureMechanismName()", "697": "PdfPKCS7::::getSignatureMechanismName()", "698": "PdfPKCS7::::getSignatureMechanismName()", "699": "PdfPKCS7::::getSignatureMechanismName()", "700": "PdfPKCS7::::getSignatureMechanismName()", "701": "PdfPKCS7::::getSignatureMechanismName()", "702": "PdfPKCS7::::getSignatureMechanismName()", "703": "PdfPKCS7::::getSignatureMechanismName()", "704": "PdfPKCS7::::getSignatureMechanismName()", "712": "PdfPKCS7::::getSignatureAlgorithmName()", "713": "PdfPKCS7::::getSignatureAlgorithmName()", "714": "PdfPKCS7::::getSignatureAlgorithmName()", "715": "PdfPKCS7::::getSignatureAlgorithmName()", "716": "PdfPKCS7::::getSignatureAlgorithmName()", "717": "PdfPKCS7::::getSignatureAlgorithmName()", "718": "PdfPKCS7::::getSignatureAlgorithmName()", "748": "PdfPKCS7::::setExternalSignatureValue(byte[],byte[],java.lang.String)", "749": "PdfPKCS7::::setExternalSignatureValue(byte[],byte[],java.lang.String)", "750": "PdfPKCS7::::setExternalSignatureValue(byte[],byte[],java.lang.String)", "764": "PdfPKCS7::::setExternalSignatureValue(byte[],byte[],java.lang.String,com.itextpdf.signatures.ISignatureMechanismParams)", "765": "PdfPKCS7::::setExternalSignatureValue(byte[],byte[],java.lang.String,com.itextpdf.signatures.ISignatureMechanismParams)", "766": "PdfPKCS7::::setExternalSignatureValue(byte[],byte[],java.lang.String,com.itextpdf.signatures.ISignatureMechanismParams)", "767": "PdfPKCS7::::setExternalSignatureValue(byte[],byte[],java.lang.String,com.itextpdf.signatures.ISignatureMechanismParams)", "768": "PdfPKCS7::::setExternalSignatureValue(byte[],byte[],java.lang.String,com.itextpdf.signatures.ISignatureMechanismParams)", "769": "PdfPKCS7::::setExternalSignatureValue(byte[],byte[],java.lang.String,com.itextpdf.signatures.ISignatureMechanismParams)", "770": "PdfPKCS7::::setExternalSignatureValue(byte[],byte[],java.lang.String,com.itextpdf.signatures.ISignatureMechanismParams)", "771": "PdfPKCS7::::setExternalSignatureValue(byte[],byte[],java.lang.String,com.itextpdf.signatures.ISignatureMechanismParams)", "772": "PdfPKCS7::::setExternalSignatureValue(byte[],byte[],java.lang.String,com.itextpdf.signatures.ISignatureMechanismParams)", "773": "PdfPKCS7::::setExternalSignatureValue(byte[],byte[],java.lang.String,com.itextpdf.signatures.ISignatureMechanismParams)", "774": "PdfPKCS7::::setExternalSignatureValue(byte[],byte[],java.lang.String,com.itextpdf.signatures.ISignatureMechanismParams)", "775": "PdfPKCS7::::setExternalSignatureValue(byte[],byte[],java.lang.String,com.itextpdf.signatures.ISignatureMechanismParams)", "776": "PdfPKCS7::::setExternalSignatureValue(byte[],byte[],java.lang.String,com.itextpdf.signatures.ISignatureMechanismParams)", "777": "PdfPKCS7::::setExternalSignatureValue(byte[],byte[],java.lang.String,com.itextpdf.signatures.ISignatureMechanismParams)", "778": "PdfPKCS7::::setExternalSignatureValue(byte[],byte[],java.lang.String,com.itextpdf.signatures.ISignatureMechanismParams)", "779": "PdfPKCS7::::setExternalSignatureValue(byte[],byte[],java.lang.String,com.itextpdf.signatures.ISignatureMechanismParams)", "780": "PdfPKCS7::::setExternalSignatureValue(byte[],byte[],java.lang.String,com.itextpdf.signatures.ISignatureMechanismParams)", "781": "PdfPKCS7::::setExternalSignatureValue(byte[],byte[],java.lang.String,com.itextpdf.signatures.ISignatureMechanismParams)", "801": "PdfPKCS7::::initSignature(java.security.PrivateKey)", "802": "PdfPKCS7::::initSignature(java.security.PrivateKey)", "803": "PdfPKCS7::::initSignature(java.security.PrivateKey)", "804": "PdfPKCS7::::initSignature(java.security.PrivateKey)", "805": "PdfPKCS7::::initSignature(java.security.PrivateKey)", "806": "PdfPKCS7::::initSignature(java.security.PrivateKey)", "808": "PdfPKCS7::::initSignature(java.security.PublicKey)", "809": "PdfPKCS7::::initSignature(java.security.PublicKey)", "810": "PdfPKCS7::::initSignature(java.security.PublicKey)", "811": "PdfPKCS7::::initSignature(java.security.PublicKey)", "812": "PdfPKCS7::::initSignature(java.security.PublicKey)", "813": "PdfPKCS7::::initSignature(java.security.PublicKey)", "814": "PdfPKCS7::::initSignature(java.security.PublicKey)", "815": "PdfPKCS7::::initSignature(java.security.PublicKey)", "816": "PdfPKCS7::::initSignature(java.security.PublicKey)", "817": "PdfPKCS7::::initSignature(java.security.PublicKey)", "818": "PdfPKCS7::::initSignature(java.security.PublicKey)", "819": "PdfPKCS7::::initSignature(java.security.PublicKey)", "820": "PdfPKCS7::::initSignature(java.security.PublicKey)", "821": "PdfPKCS7::::initSignature(java.security.PublicKey)", "823": "PdfPKCS7::::configureSignatureMechanismParameters(java.security.Signature)", "824": "PdfPKCS7::::configureSignatureMechanismParameters(java.security.Signature)", "825": "PdfPKCS7::::configureSignatureMechanismParameters(java.security.Signature)", "826": "PdfPKCS7::::configureSignatureMechanismParameters(java.security.Signature)", "827": "PdfPKCS7::::configureSignatureMechanismParameters(java.security.Signature)", "828": "PdfPKCS7::::configureSignatureMechanismParameters(java.security.Signature)", "829": "PdfPKCS7::::configureSignatureMechanismParameters(java.security.Signature)", "830": "PdfPKCS7::::configureSignatureMechanismParameters(java.security.Signature)", "831": "PdfPKCS7::::configureSignatureMechanismParameters(java.security.Signature)", "832": "PdfPKCS7::::configureSignatureMechanismParameters(java.security.Signature)", "833": "PdfPKCS7::::configureSignatureMechanismParameters(java.security.Signature)", "834": "PdfPKCS7::::configureSignatureMechanismParameters(java.security.Signature)", "835": "PdfPKCS7::::configureSignatureMechanismParameters(java.security.Signature)", "836": "PdfPKCS7::::configureSignatureMechanismParameters(java.security.Signature)", "837": "PdfPKCS7::::configureSignatureMechanismParameters(java.security.Signature)", "838": "PdfPKCS7::::configureSignatureMechanismParameters(java.security.Signature)", "839": "PdfPKCS7::::configureSignatureMechanismParameters(java.security.Signature)", "840": "PdfPKCS7::::configureSignatureMechanismParameters(java.security.Signature)", "841": "PdfPKCS7::::configureSignatureMechanismParameters(java.security.Signature)", "842": "PdfPKCS7::::configureSignatureMechanismParameters(java.security.Signature)", "843": "PdfPKCS7::::configureSignatureMechanismParameters(java.security.Signature)", "844": "PdfPKCS7::::configureSignatureMechanismParameters(java.security.Signature)", "845": "PdfPKCS7::::configureSignatureMechanismParameters(java.security.Signature)", "846": "PdfPKCS7::::configureSignatureMechanismParameters(java.security.Signature)", "847": "PdfPKCS7::::configureSignatureMechanismParameters(java.security.Signature)", "848": "PdfPKCS7::::configureSignatureMechanismParameters(java.security.Signature)", "849": "PdfPKCS7::::configureSignatureMechanismParameters(java.security.Signature)", "850": "PdfPKCS7::::configureSignatureMechanismParameters(java.security.Signature)", "851": "PdfPKCS7::::configureSignatureMechanismParameters(java.security.Signature)", "852": "PdfPKCS7::::configureSignatureMechanismParameters(java.security.Signature)", "853": "PdfPKCS7::::configureSignatureMechanismParameters(java.security.Signature)", "854": "PdfPKCS7::::configureSignatureMechanismParameters(java.security.Signature)", "855": "PdfPKCS7::::configureSignatureMechanismParameters(java.security.Signature)", "856": "PdfPKCS7::::configureSignatureMechanismParameters(java.security.Signature)", "857": "PdfPKCS7::::configureSignatureMechanismParameters(java.security.Signature)", "858": "PdfPKCS7::::configureSignatureMechanismParameters(java.security.Signature)", "859": "PdfPKCS7::::configureSignatureMechanismParameters(java.security.Signature)", "860": "PdfPKCS7::::configureSignatureMechanismParameters(java.security.Signature)", "861": "PdfPKCS7::::configureSignatureMechanismParameters(java.security.Signature)", "862": "PdfPKCS7::::configureSignatureMechanismParameters(java.security.Signature)", "863": "PdfPKCS7::::configureSignatureMechanismParameters(java.security.Signature)", "875": "PdfPKCS7::::update(byte[],int,int)", "876": "PdfPKCS7::::update(byte[],int,int)", "877": "PdfPKCS7::::update(byte[],int,int)", "878": "PdfPKCS7::::update(byte[],int,int)", "879": "PdfPKCS7::::update(byte[],int,int)", "880": "PdfPKCS7::::update(byte[],int,int)", "881": "PdfPKCS7::::update(byte[],int,int)", "890": "PdfPKCS7::::getEncodedPKCS1()", "891": "PdfPKCS7::::getEncodedPKCS1()", "892": "PdfPKCS7::::getEncodedPKCS1()", "893": "PdfPKCS7::::getEncodedPKCS1()", "894": "PdfPKCS7::::getEncodedPKCS1()", "895": "PdfPKCS7::::getEncodedPKCS1()", "896": "PdfPKCS7::::getEncodedPKCS1()", "897": "PdfPKCS7::::getEncodedPKCS1()", "898": "PdfPKCS7::::getEncodedPKCS1()", "899": "PdfPKCS7::::getEncodedPKCS1()", "900": "PdfPKCS7::::getEncodedPKCS1()", "901": "PdfPKCS7::::getEncodedPKCS1()", "902": "PdfPKCS7::::getEncodedPKCS1()", "903": "PdfPKCS7::::getEncodedPKCS1()", "904": "PdfPKCS7::::getEncodedPKCS1()", "905": "PdfPKCS7::::getEncodedPKCS1()", "906": "PdfPKCS7::::getEncodedPKCS1()", "907": "PdfPKCS7::::getEncodedPKCS1()", "916": "PdfPKCS7::::getEncodedPKCS7()", "917": "PdfPKCS7::::getEncodedPKCS7()", "918": "PdfPKCS7::::getEncodedPKCS7()", "928": "PdfPKCS7::::getEncodedPKCS7(byte[])", "929": "PdfPKCS7::::getEncodedPKCS7(byte[])", "930": "PdfPKCS7::::getEncodedPKCS7(byte[])", "951": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "952": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "953": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "954": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "955": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "956": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "957": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "958": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "959": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "960": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "961": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "962": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "963": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "964": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "965": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "966": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "967": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "968": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "969": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "970": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "971": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "972": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "973": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "974": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "975": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "976": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "977": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "978": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "979": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "980": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "981": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "982": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "983": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "984": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "985": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "986": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "987": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "988": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "989": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "990": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "991": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "992": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "993": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "994": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "995": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "996": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "997": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "998": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "999": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1000": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1001": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1002": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1003": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1004": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1005": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1006": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1007": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1008": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1009": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1010": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1011": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1012": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1013": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1014": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1015": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1016": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1017": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1018": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1019": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1020": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1021": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1022": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1023": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1024": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1025": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1026": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1027": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1028": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1029": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1030": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1031": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1032": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1033": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1034": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1035": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1036": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1037": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1038": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1039": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1040": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1041": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1042": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1043": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1044": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1045": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1046": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1047": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1048": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1049": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1050": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1051": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1052": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1053": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1054": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1055": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1056": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1057": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1058": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1059": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1060": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1061": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1062": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1063": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1064": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1065": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1066": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1067": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1068": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1069": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1070": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1071": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1072": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1073": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1074": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1075": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1076": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1077": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1078": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1079": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1080": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1081": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1082": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1083": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1084": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1085": "PdfPKCS7::::getEncodedPKCS7(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,com.itextpdf.signatures.ITSAClient,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1099": "PdfPKCS7::::buildUnauthenticatedAttributes(byte[])", "1100": "PdfPKCS7::::buildUnauthenticatedAttributes(byte[])", "1101": "PdfPKCS7::::buildUnauthenticatedAttributes(byte[])", "1102": "PdfPKCS7::::buildUnauthenticatedAttributes(byte[])", "1103": "PdfPKCS7::::buildUnauthenticatedAttributes(byte[])", "1104": "PdfPKCS7::::buildUnauthenticatedAttributes(byte[])", "1105": "PdfPKCS7::::buildUnauthenticatedAttributes(byte[])", "1106": "PdfPKCS7::::buildUnauthenticatedAttributes(byte[])", "1107": "PdfPKCS7::::buildUnauthenticatedAttributes(byte[])", "1108": "PdfPKCS7::::buildUnauthenticatedAttributes(byte[])", "1109": "PdfPKCS7::::buildUnauthenticatedAttributes(byte[])", "1110": "PdfPKCS7::::buildUnauthenticatedAttributes(byte[])", "1111": "PdfPKCS7::::buildUnauthenticatedAttributes(byte[])", "1112": "PdfPKCS7::::buildUnauthenticatedAttributes(byte[])", "1113": "PdfPKCS7::::buildUnauthenticatedAttributes(byte[])", "1114": "PdfPKCS7::::buildUnauthenticatedAttributes(byte[])", "1115": "PdfPKCS7::::buildUnauthenticatedAttributes(byte[])", "1116": "PdfPKCS7::::buildUnauthenticatedAttributes(byte[])", "1161": "PdfPKCS7::::getAuthenticatedAttributeBytes(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1162": "PdfPKCS7::::getAuthenticatedAttributeBytes(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1163": "PdfPKCS7::::getAuthenticatedAttributeBytes(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1164": "PdfPKCS7::::getAuthenticatedAttributeBytes(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1165": "PdfPKCS7::::getAuthenticatedAttributeBytes(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1166": "PdfPKCS7::::getAuthenticatedAttributeBytes(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1167": "PdfPKCS7::::getAuthenticatedAttributeBytes(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1168": "PdfPKCS7::::getAuthenticatedAttributeBytes(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1169": "PdfPKCS7::::getAuthenticatedAttributeBytes(byte[],com.itextpdf.signatures.PdfSigner.CryptoStandard,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "1179": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1180": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1181": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1182": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1183": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1184": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1185": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1186": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1187": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1188": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1189": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1190": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1191": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1192": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1193": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1194": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1195": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1196": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1197": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1198": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1199": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1200": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1201": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1202": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1203": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1204": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1205": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1206": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1207": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1208": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1209": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1210": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1211": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1212": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1213": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1214": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1215": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1216": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1217": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1218": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1219": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1220": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1221": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1222": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1223": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1224": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1225": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1226": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1227": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1228": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1229": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1230": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1231": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1232": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1233": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1234": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1235": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1236": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1237": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1238": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1239": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1240": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1241": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1242": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1243": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1244": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1245": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1246": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1247": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1248": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1249": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1250": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1251": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1252": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1253": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1254": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1255": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1256": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1257": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1258": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1259": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1260": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1261": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1262": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1263": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1264": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1265": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1266": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1267": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1268": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1269": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1270": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1271": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1272": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1273": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1274": "PdfPKCS7::::getAuthenticatedAttributeSet(byte[],java.util.Collection<byte[]>,java.util.Collection<byte[]>,com.itextpdf.signatures.PdfSigner.CryptoStandard)", "1326": "PdfPKCS7::::verifySignatureIntegrityAndAuthenticity()", "1327": "PdfPKCS7::::verifySignatureIntegrityAndAuthenticity()", "1328": "PdfPKCS7::::verifySignatureIntegrityAndAuthenticity()", "1329": "PdfPKCS7::::verifySignatureIntegrityAndAuthenticity()", "1330": "PdfPKCS7::::verifySignatureIntegrityAndAuthenticity()", "1331": "PdfPKCS7::::verifySignatureIntegrityAndAuthenticity()", "1332": "PdfPKCS7::::verifySignatureIntegrityAndAuthenticity()", "1333": "PdfPKCS7::::verifySignatureIntegrityAndAuthenticity()", "1334": "PdfPKCS7::::verifySignatureIntegrityAndAuthenticity()", "1335": "PdfPKCS7::::verifySignatureIntegrityAndAuthenticity()", "1336": "PdfPKCS7::::verifySignatureIntegrityAndAuthenticity()", "1337": "PdfPKCS7::::verifySignatureIntegrityAndAuthenticity()", "1338": "PdfPKCS7::::verifySignatureIntegrityAndAuthenticity()", "1339": "PdfPKCS7::::verifySignatureIntegrityAndAuthenticity()", "1340": "PdfPKCS7::::verifySignatureIntegrityAndAuthenticity()", "1341": "PdfPKCS7::::verifySignatureIntegrityAndAuthenticity()", "1342": "PdfPKCS7::::verifySignatureIntegrityAndAuthenticity()", "1343": "PdfPKCS7::::verifySignatureIntegrityAndAuthenticity()", "1344": "PdfPKCS7::::verifySignatureIntegrityAndAuthenticity()", "1345": "PdfPKCS7::::verifySignatureIntegrityAndAuthenticity()", "1346": "PdfPKCS7::::verifySignatureIntegrityAndAuthenticity()", "1347": "PdfPKCS7::::verifySignatureIntegrityAndAuthenticity()", "1348": "PdfPKCS7::::verifySignatureIntegrityAndAuthenticity()", "1349": "PdfPKCS7::::verifySignatureIntegrityAndAuthenticity()", "1350": "PdfPKCS7::::verifySignatureIntegrityAndAuthenticity()", "1351": "PdfPKCS7::::verifySignatureIntegrityAndAuthenticity()", "1352": "PdfPKCS7::::verifySignatureIntegrityAndAuthenticity()", "1353": "PdfPKCS7::::verifySignatureIntegrityAndAuthenticity()", "1354": "PdfPKCS7::::verifySignatureIntegrityAndAuthenticity()", "1355": "PdfPKCS7::::verifySignatureIntegrityAndAuthenticity()", "1356": "PdfPKCS7::::verifySignatureIntegrityAndAuthenticity()", "1357": "PdfPKCS7::::verifySignatureIntegrityAndAuthenticity()", "1358": "PdfPKCS7::::verifySignatureIntegrityAndAuthenticity()", "1359": "PdfPKCS7::::verifySignatureIntegrityAndAuthenticity()", "1360": "PdfPKCS7::::verifySignatureIntegrityAndAuthenticity()", "1361": "PdfPKCS7::::verifySignatureIntegrityAndAuthenticity()", "1362": "PdfPKCS7::::verifySignatureIntegrityAndAuthenticity()", "1363": "PdfPKCS7::::verifySignatureIntegrityAndAuthenticity()", "1364": "PdfPKCS7::::verifySignatureIntegrityAndAuthenticity()", "1365": "PdfPKCS7::::verifySignatureIntegrityAndAuthenticity()", "1366": "PdfPKCS7::::verifySignatureIntegrityAndAuthenticity()", "1368": "PdfPKCS7::::verifySigAttributes(byte[])", "1369": "PdfPKCS7::::verifySigAttributes(byte[])", "1370": "PdfPKCS7::::verifySigAttributes(byte[])", "1371": "PdfPKCS7::::verifySigAttributes(byte[])", "1372": "PdfPKCS7::::verifySigAttributes(byte[])", "1381": "PdfPKCS7::::verifyTimestampImprint()", "1382": "PdfPKCS7::::verifyTimestampImprint()", "1383": "PdfPKCS7::::verifyTimestampImprint()", "1384": "PdfPKCS7::::verifyTimestampImprint()", "1385": "PdfPKCS7::::verifyTimestampImprint()", "1386": "PdfPKCS7::::verifyTimestampImprint()", "1387": "PdfPKCS7::::verifyTimestampImprint()", "1388": "PdfPKCS7::::verifyTimestampImprint()", "1389": "PdfPKCS7::::verifyTimestampImprint()", "1390": "PdfPKCS7::::verifyTimestampImprint()", "1417": "PdfPKCS7::::getCertificates()", "1418": "PdfPKCS7::::getCertificates()", "1419": "PdfPKCS7::::getCertificates()", "1426": "PdfPKCS7::::getTimestampCertificates()", "1427": "PdfPKCS7::::getTimestampCertificates()", "1428": "PdfPKCS7::::getTimestampCertificates()", "1437": "PdfPKCS7::::getSignCertificateChain()", "1438": "PdfPKCS7::::getSignCertificateChain()", "1439": "PdfPKCS7::::getSignCertificateChain()", "1446": "PdfPKCS7::::getSigningCertificate()", "1447": "PdfPKCS7::::getSigningCertificate()", "1448": "PdfPKCS7::::getSigningCertificate()", "1455": "PdfPKCS7::::signCertificateChain()", "1456": "PdfPKCS7::::signCertificateChain()", "1457": "PdfPKCS7::::signCertificateChain()", "1458": "PdfPKCS7::::signCertificateChain()", "1459": "PdfPKCS7::::signCertificateChain()", "1460": "PdfPKCS7::::signCertificateChain()", "1461": "PdfPKCS7::::signCertificateChain()", "1462": "PdfPKCS7::::signCertificateChain()", "1463": "PdfPKCS7::::signCertificateChain()", "1464": "PdfPKCS7::::signCertificateChain()", "1465": "PdfPKCS7::::signCertificateChain()", "1466": "PdfPKCS7::::signCertificateChain()", "1467": "PdfPKCS7::::signCertificateChain()", "1468": "PdfPKCS7::::signCertificateChain()", "1469": "PdfPKCS7::::signCertificateChain()", "1470": "PdfPKCS7::::signCertificateChain()", "1471": "PdfPKCS7::::signCertificateChain()", "1472": "PdfPKCS7::::signCertificateChain()", "1473": "PdfPKCS7::::signCertificateChain()", "1474": "PdfPKCS7::::signCertificateChain()", "1475": "PdfPKCS7::::signCertificateChain()", "1476": "PdfPKCS7::::signCertificateChain()", "1477": "PdfPKCS7::::signCertificateChain()", "1478": "PdfPKCS7::::signCertificateChain()", "1479": "PdfPKCS7::::signCertificateChain()", "1480": "PdfPKCS7::::signCertificateChain()", "1495": "PdfPKCS7::::getCRLs()", "1496": "PdfPKCS7::::getCRLs()", "1497": "PdfPKCS7::::getCRLs()", "1504": "PdfPKCS7::::getSignedDataCRLs()", "1505": "PdfPKCS7::::getSignedDataCRLs()", "1506": "PdfPKCS7::::getSignedDataCRLs()", "1539": "PdfPKCS7::::getSignedDataOcsps()", "1540": "PdfPKCS7::::getSignedDataOcsps()", "1541": "PdfPKCS7::::getSignedDataOcsps()", "1548": "PdfPKCS7::::getOcsp()", "1549": "PdfPKCS7::::getOcsp()", "1550": "PdfPKCS7::::getOcsp()", "1557": "PdfPKCS7::::isRevocationValid()", "1558": "PdfPKCS7::::isRevocationValid()", "1559": "PdfPKCS7::::isRevocationValid()", "1560": "PdfPKCS7::::isRevocationValid()", "1561": "PdfPKCS7::::isRevocationValid()", "1562": "PdfPKCS7::::isRevocationValid()", "1563": "PdfPKCS7::::isRevocationValid()", "1564": "PdfPKCS7::::isRevocationValid()", "1565": "PdfPKCS7::::isRevocationValid()", "1566": "PdfPKCS7::::isRevocationValid()", "1567": "PdfPKCS7::::isRevocationValid()", "1568": "PdfPKCS7::::isRevocationValid()", "1569": "PdfPKCS7::::isRevocationValid()", "1570": "PdfPKCS7::::isRevocationValid()", "1571": "PdfPKCS7::::isRevocationValid()", "1572": "PdfPKCS7::::isRevocationValid()", "1573": "PdfPKCS7::::isRevocationValid()", "1574": "PdfPKCS7::::isRevocationValid()", "1575": "PdfPKCS7::::isRevocationValid()", "1651": "PdfPKCS7::::isTsp()", "1652": "PdfPKCS7::::isTsp()", "1653": "PdfPKCS7::::isTsp()", "1660": "PdfPKCS7::::getTimestampSignatureContainer()", "1661": "PdfPKCS7::::getTimestampSignatureContainer()", "1662": "PdfPKCS7::::getTimestampSignatureContainer()", "1669": "PdfPKCS7::::getTimeStampTokenInfo()", "1670": "PdfPKCS7::::getTimeStampTokenInfo()", "1671": "PdfPKCS7::::getTimeStampTokenInfo()", "1682": "PdfPKCS7::::getTimeStampDate()", "1683": "PdfPKCS7::::getTimeStampDate()", "1684": "PdfPKCS7::::getTimeStampDate()", "1685": "PdfPKCS7::::getTimeStampDate()", "1686": "PdfPKCS7::::getTimeStampDate()", "1687": "PdfPKCS7::::getTimeStampDate()", "1694": "PdfPKCS7::::getFilterSubtype()", "1695": "PdfPKCS7::::getFilterSubtype()", "1696": "PdfPKCS7::::getFilterSubtype()"}, "test_reverse_method_lines_dic": {"69": "PdfPKCS7Test::::unknownHashAlgorithmTest()", "70": "PdfPKCS7Test::::unknownHashAlgorithmTest()", "71": "PdfPKCS7Test::::unknownHashAlgorithmTest()", "72": "PdfPKCS7Test::::unknownHashAlgorithmTest()", "73": "PdfPKCS7Test::::unknownHashAlgorithmTest()", "74": "PdfPKCS7Test::::unknownHashAlgorithmTest()", "75": "PdfPKCS7Test::::unknownHashAlgorithmTest()", "76": "PdfPKCS7Test::::unknownHashAlgorithmTest()", "77": "PdfPKCS7Test::::unknownHashAlgorithmTest()", "78": "PdfPKCS7Test::::unknownHashAlgorithmTest()", "79": "PdfPKCS7Test::::unknownHashAlgorithmTest()", "80": "PdfPKCS7Test::::unknownHashAlgorithmTest()", "82": "PdfPKCS7Test::::simpleCreationTest()", "83": "PdfPKCS7Test::::simpleCreationTest()", "84": "PdfPKCS7Test::::simpleCreationTest()", "85": "PdfPKCS7Test::::simpleCreationTest()", "86": "PdfPKCS7Test::::simpleCreationTest()", "87": "PdfPKCS7Test::::simpleCreationTest()", "88": "PdfPKCS7Test::::simpleCreationTest()", "89": "PdfPKCS7Test::::simpleCreationTest()", "90": "PdfPKCS7Test::::simpleCreationTest()", "91": "PdfPKCS7Test::::simpleCreationTest()", "92": "PdfPKCS7Test::::simpleCreationTest()", "93": "PdfPKCS7Test::::simpleCreationTest()", "94": "PdfPKCS7Test::::simpleCreationTest()", "95": "PdfPKCS7Test::::simpleCreationTest()", "96": "PdfPKCS7Test::::simpleCreationTest()", "97": "PdfPKCS7Test::::simpleCreationTest()", "99": "PdfPKCS7Test::::simpleCreationWithPrivateKeyTest()", "100": "PdfPKCS7Test::::simpleCreationWithPrivateKeyTest()", "101": "PdfPKCS7Test::::simpleCreationWithPrivateKeyTest()", "102": "PdfPKCS7Test::::simpleCreationWithPrivateKeyTest()", "103": "PdfPKCS7Test::::simpleCreationWithPrivateKeyTest()", "104": "PdfPKCS7Test::::simpleCreationWithPrivateKeyTest()", "105": "PdfPKCS7Test::::simpleCreationWithPrivateKeyTest()", "106": "PdfPKCS7Test::::simpleCreationWithPrivateKeyTest()", "107": "PdfPKCS7Test::::simpleCreationWithPrivateKeyTest()", "108": "PdfPKCS7Test::::simpleCreationWithPrivateKeyTest()", "109": "PdfPKCS7Test::::simpleCreationWithPrivateKeyTest()", "110": "PdfPKCS7Test::::simpleCreationWithPrivateKeyTest()", "112": "PdfPKCS7Test::::notAvailableSignatureTest()", "113": "PdfPKCS7Test::::notAvailableSignatureTest()", "114": "PdfPKCS7Test::::notAvailableSignatureTest()", "115": "PdfPKCS7Test::::notAvailableSignatureTest()", "116": "PdfPKCS7Test::::notAvailableSignatureTest()", "117": "PdfPKCS7Test::::notAvailableSignatureTest()", "118": "PdfPKCS7Test::::notAvailableSignatureTest()", "120": "PdfPKCS7Test::::reasonSetGetTest()", "121": "PdfPKCS7Test::::reasonSetGetTest()", "122": "PdfPKCS7Test::::reasonSetGetTest()", "123": "PdfPKCS7Test::::reasonSetGetTest()", "124": "PdfPKCS7Test::::reasonSetGetTest()", "125": "PdfPKCS7Test::::reasonSetGetTest()", "126": "PdfPKCS7Test::::reasonSetGetTest()", "127": "PdfPKCS7Test::::reasonSetGetTest()", "128": "PdfPKCS7Test::::reasonSetGetTest()", "129": "PdfPKCS7Test::::reasonSetGetTest()", "131": "PdfPKCS7Test::::locationSetGetTest()", "132": "PdfPKCS7Test::::locationSetGetTest()", "133": "PdfPKCS7Test::::locationSetGetTest()", "134": "PdfPKCS7Test::::locationSetGetTest()", "135": "PdfPKCS7Test::::locationSetGetTest()", "136": "PdfPKCS7Test::::locationSetGetTest()", "137": "PdfPKCS7Test::::locationSetGetTest()", "138": "PdfPKCS7Test::::locationSetGetTest()", "139": "PdfPKCS7Test::::locationSetGetTest()", "140": "PdfPKCS7Test::::locationSetGetTest()", "142": "PdfPKCS7Test::::signNameSetGetTest()", "143": "PdfPKCS7Test::::signNameSetGetTest()", "144": "PdfPKCS7Test::::signNameSetGetTest()", "145": "PdfPKCS7Test::::signNameSetGetTest()", "146": "PdfPKCS7Test::::signNameSetGetTest()", "147": "PdfPKCS7Test::::signNameSetGetTest()", "148": "PdfPKCS7Test::::signNameSetGetTest()", "149": "PdfPKCS7Test::::signNameSetGetTest()", "150": "PdfPKCS7Test::::signNameSetGetTest()", "151": "PdfPKCS7Test::::signNameSetGetTest()", "153": "PdfPKCS7Test::::signDateSetGetTest()", "154": "PdfPKCS7Test::::signDateSetGetTest()", "155": "PdfPKCS7Test::::signDateSetGetTest()", "156": "PdfPKCS7Test::::signDateSetGetTest()", "157": "PdfPKCS7Test::::signDateSetGetTest()", "158": "PdfPKCS7Test::::signDateSetGetTest()", "159": "PdfPKCS7Test::::signDateSetGetTest()", "160": "PdfPKCS7Test::::signDateSetGetTest()", "161": "PdfPKCS7Test::::signDateSetGetTest()", "162": "PdfPKCS7Test::::signDateSetGetTest()", "164": "PdfPKCS7Test::::ocspGetTest()", "165": "PdfPKCS7Test::::ocspGetTest()", "166": "PdfPKCS7Test::::ocspGetTest()", "167": "PdfPKCS7Test::::ocspGetTest()", "168": "PdfPKCS7Test::::ocspGetTest()", "169": "PdfPKCS7Test::::ocspGetTest()", "170": "PdfPKCS7Test::::ocspGetTest()", "171": "PdfPKCS7Test::::ocspGetTest()", "172": "PdfPKCS7Test::::ocspGetTest()", "173": "PdfPKCS7Test::::ocspGetTest()", "174": "PdfPKCS7Test::::ocspGetTest()", "175": "PdfPKCS7Test::::ocspGetTest()", "176": "PdfPKCS7Test::::ocspGetTest()", "177": "PdfPKCS7Test::::ocspGetTest()", "178": "PdfPKCS7Test::::ocspGetTest()", "179": "PdfPKCS7Test::::ocspGetTest()", "180": "PdfPKCS7Test::::ocspGetTest()", "181": "PdfPKCS7Test::::ocspGetTest()", "182": "PdfPKCS7Test::::ocspGetTest()", "183": "PdfPKCS7Test::::ocspGetTest()", "184": "PdfPKCS7Test::::ocspGetTest()", "185": "PdfPKCS7Test::::ocspGetTest()", "186": "PdfPKCS7Test::::ocspGetTest()", "187": "PdfPKCS7Test::::ocspGetTest()", "188": "PdfPKCS7Test::::ocspGetTest()", "189": "PdfPKCS7Test::::ocspGetTest()", "191": "PdfPKCS7Test::::verifyTimestampImprintSimpleSignatureTest()", "192": "PdfPKCS7Test::::verifyTimestampImprintSimpleSignatureTest()", "193": "PdfPKCS7Test::::verifyTimestampImprintSimpleSignatureTest()", "194": "PdfPKCS7Test::::verifyTimestampImprintSimpleSignatureTest()", "195": "PdfPKCS7Test::::verifyTimestampImprintSimpleSignatureTest()", "196": "PdfPKCS7Test::::verifyTimestampImprintSimpleSignatureTest()", "197": "PdfPKCS7Test::::verifyTimestampImprintSimpleSignatureTest()", "199": "PdfPKCS7Test::::verifyTimestampImprintTimeStampSignatureTest()", "200": "PdfPKCS7Test::::verifyTimestampImprintTimeStampSignatureTest()", "201": "PdfPKCS7Test::::verifyTimestampImprintTimeStampSignatureTest()", "202": "PdfPKCS7Test::::verifyTimestampImprintTimeStampSignatureTest()", "203": "PdfPKCS7Test::::verifyTimestampImprintTimeStampSignatureTest()", "204": "PdfPKCS7Test::::verifyTimestampImprintTimeStampSignatureTest()", "205": "PdfPKCS7Test::::verifyTimestampImprintTimeStampSignatureTest()", "207": "PdfPKCS7Test::::verifyTimestampImprintEmbeddedTimeStampSignatureTest()", "208": "PdfPKCS7Test::::verifyTimestampImprintEmbeddedTimeStampSignatureTest()", "209": "PdfPKCS7Test::::verifyTimestampImprintEmbeddedTimeStampSignatureTest()", "210": "PdfPKCS7Test::::verifyTimestampImprintEmbeddedTimeStampSignatureTest()", "211": "PdfPKCS7Test::::verifyTimestampImprintEmbeddedTimeStampSignatureTest()", "212": "PdfPKCS7Test::::verifyTimestampImprintEmbeddedTimeStampSignatureTest()", "213": "PdfPKCS7Test::::verifyTimestampImprintEmbeddedTimeStampSignatureTest()", "215": "PdfPKCS7Test::::verifyTimestampImprintCorruptedTimeStampSignatureTest()", "216": "PdfPKCS7Test::::verifyTimestampImprintCorruptedTimeStampSignatureTest()", "217": "PdfPKCS7Test::::verifyTimestampImprintCorruptedTimeStampSignatureTest()", "218": "PdfPKCS7Test::::verifyTimestampImprintCorruptedTimeStampSignatureTest()", "219": "PdfPKCS7Test::::verifyTimestampImprintCorruptedTimeStampSignatureTest()", "220": "PdfPKCS7Test::::verifyTimestampImprintCorruptedTimeStampSignatureTest()", "221": "PdfPKCS7Test::::verifyTimestampImprintCorruptedTimeStampSignatureTest()", "223": "PdfPKCS7Test::::findCrlIsNotNullTest()", "224": "PdfPKCS7Test::::findCrlIsNotNullTest()", "225": "PdfPKCS7Test::::findCrlIsNotNullTest()", "226": "PdfPKCS7Test::::findCrlIsNotNullTest()", "227": "PdfPKCS7Test::::findCrlIsNotNullTest()", "228": "PdfPKCS7Test::::findCrlIsNotNullTest()", "229": "PdfPKCS7Test::::findCrlIsNotNullTest()", "230": "PdfPKCS7Test::::findCrlIsNotNullTest()", "231": "PdfPKCS7Test::::findCrlIsNotNullTest()", "232": "PdfPKCS7Test::::findCrlIsNotNullTest()", "233": "PdfPKCS7Test::::findCrlIsNotNullTest()", "234": "PdfPKCS7Test::::findCrlIsNotNullTest()", "235": "PdfPKCS7Test::::findCrlIsNotNullTest()", "237": "PdfPKCS7Test::::findCrlNullSequenceNoExceptionTest()", "238": "PdfPKCS7Test::::findCrlNullSequenceNoExceptionTest()", "239": "PdfPKCS7Test::::findCrlNullSequenceNoExceptionTest()", "240": "PdfPKCS7Test::::findCrlNullSequenceNoExceptionTest()", "241": "PdfPKCS7Test::::findCrlNullSequenceNoExceptionTest()", "242": "PdfPKCS7Test::::findCrlNullSequenceNoExceptionTest()", "243": "PdfPKCS7Test::::findCrlNullSequenceNoExceptionTest()", "245": "PdfPKCS7Test::::isRevocationValidWithInvalidOcspTest()", "246": "PdfPKCS7Test::::isRevocationValidWithInvalidOcspTest()", "247": "PdfPKCS7Test::::isRevocationValidWithInvalidOcspTest()", "248": "PdfPKCS7Test::::isRevocationValidWithInvalidOcspTest()", "249": "PdfPKCS7Test::::isRevocationValidWithInvalidOcspTest()", "250": "PdfPKCS7Test::::isRevocationValidWithInvalidOcspTest()", "251": "PdfPKCS7Test::::isRevocationValidWithInvalidOcspTest()", "252": "PdfPKCS7Test::::isRevocationValidWithInvalidOcspTest()", "254": "PdfPKCS7Test::::isRevocationValidWithValidOcspTest()", "255": "PdfPKCS7Test::::isRevocationValidWithValidOcspTest()", "256": "PdfPKCS7Test::::isRevocationValidWithValidOcspTest()", "257": "PdfPKCS7Test::::isRevocationValidWithValidOcspTest()", "258": "PdfPKCS7Test::::isRevocationValidWithValidOcspTest()", "259": "PdfPKCS7Test::::isRevocationValidWithValidOcspTest()", "260": "PdfPKCS7Test::::isRevocationValidWithValidOcspTest()", "261": "PdfPKCS7Test::::isRevocationValidWithValidOcspTest()", "263": "PdfPKCS7Test::::isRevocationValidOcspResponseIsNullTest()", "264": "PdfPKCS7Test::::isRevocationValidOcspResponseIsNullTest()", "265": "PdfPKCS7Test::::isRevocationValidOcspResponseIsNullTest()", "266": "PdfPKCS7Test::::isRevocationValidOcspResponseIsNullTest()", "267": "PdfPKCS7Test::::isRevocationValidOcspResponseIsNullTest()", "268": "PdfPKCS7Test::::isRevocationValidOcspResponseIsNullTest()", "269": "PdfPKCS7Test::::isRevocationValidOcspResponseIsNullTest()", "271": "PdfPKCS7Test::::isRevocationValidLackOfSignCertsTest()", "272": "PdfPKCS7Test::::isRevocationValidLackOfSignCertsTest()", "273": "PdfPKCS7Test::::isRevocationValidLackOfSignCertsTest()", "274": "PdfPKCS7Test::::isRevocationValidLackOfSignCertsTest()", "275": "PdfPKCS7Test::::isRevocationValidLackOfSignCertsTest()", "276": "PdfPKCS7Test::::isRevocationValidLackOfSignCertsTest()", "277": "PdfPKCS7Test::::isRevocationValidLackOfSignCertsTest()", "278": "PdfPKCS7Test::::isRevocationValidLackOfSignCertsTest()", "279": "PdfPKCS7Test::::isRevocationValidLackOfSignCertsTest()", "280": "PdfPKCS7Test::::isRevocationValidLackOfSignCertsTest()", "282": "PdfPKCS7Test::::isRevocationValidExceptionDuringValidationTest()", "283": "PdfPKCS7Test::::isRevocationValidExceptionDuringValidationTest()", "284": "PdfPKCS7Test::::isRevocationValidExceptionDuringValidationTest()", "285": "PdfPKCS7Test::::isRevocationValidExceptionDuringValidationTest()", "286": "PdfPKCS7Test::::isRevocationValidExceptionDuringValidationTest()", "287": "PdfPKCS7Test::::isRevocationValidExceptionDuringValidationTest()", "288": "PdfPKCS7Test::::isRevocationValidExceptionDuringValidationTest()", "289": "PdfPKCS7Test::::isRevocationValidExceptionDuringValidationTest()", "290": "PdfPKCS7Test::::isRevocationValidExceptionDuringValidationTest()", "291": "PdfPKCS7Test::::isRevocationValidExceptionDuringValidationTest()", "293": "PdfPKCS7Test::::getEncodedPkcs1Test()", "294": "PdfPKCS7Test::::getEncodedPkcs1Test()", "295": "PdfPKCS7Test::::getEncodedPkcs1Test()", "296": "PdfPKCS7Test::::getEncodedPkcs1Test()", "297": "PdfPKCS7Test::::getEncodedPkcs1Test()", "298": "PdfPKCS7Test::::getEncodedPkcs1Test()", "299": "PdfPKCS7Test::::getEncodedPkcs1Test()", "300": "PdfPKCS7Test::::getEncodedPkcs1Test()", "301": "PdfPKCS7Test::::getEncodedPkcs1Test()", "302": "PdfPKCS7Test::::getEncodedPkcs1Test()", "303": "PdfPKCS7Test::::getEncodedPkcs1Test()", "305": "PdfPKCS7Test::::getEncodedPkcs1NullPrivateKeyTest()", "306": "PdfPKCS7Test::::getEncodedPkcs1NullPrivateKeyTest()", "307": "PdfPKCS7Test::::getEncodedPkcs1NullPrivateKeyTest()", "308": "PdfPKCS7Test::::getEncodedPkcs1NullPrivateKeyTest()", "309": "PdfPKCS7Test::::getEncodedPkcs1NullPrivateKeyTest()", "310": "PdfPKCS7Test::::getEncodedPkcs1NullPrivateKeyTest()", "311": "PdfPKCS7Test::::getEncodedPkcs1NullPrivateKeyTest()", "312": "PdfPKCS7Test::::getEncodedPkcs1NullPrivateKeyTest()", "314": "PdfPKCS7Test::::getEncodedPkcs7UnknownExceptionTest()", "315": "PdfPKCS7Test::::getEncodedPkcs7UnknownExceptionTest()", "316": "PdfPKCS7Test::::getEncodedPkcs7UnknownExceptionTest()", "317": "PdfPKCS7Test::::getEncodedPkcs7UnknownExceptionTest()", "318": "PdfPKCS7Test::::getEncodedPkcs7UnknownExceptionTest()", "319": "PdfPKCS7Test::::getEncodedPkcs7UnknownExceptionTest()", "320": "PdfPKCS7Test::::getEncodedPkcs7UnknownExceptionTest()", "321": "PdfPKCS7Test::::getEncodedPkcs7UnknownExceptionTest()", "322": "PdfPKCS7Test::::getEncodedPkcs7UnknownExceptionTest()", "323": "PdfPKCS7Test::::getEncodedPkcs7UnknownExceptionTest()", "325": "PdfPKCS7Test::::getEncodedPkcs7Test()", "326": "PdfPKCS7Test::::getEncodedPkcs7Test()", "327": "PdfPKCS7Test::::getEncodedPkcs7Test()", "328": "PdfPKCS7Test::::getEncodedPkcs7Test()", "329": "PdfPKCS7Test::::getEncodedPkcs7Test()", "330": "PdfPKCS7Test::::getEncodedPkcs7Test()", "331": "PdfPKCS7Test::::getEncodedPkcs7Test()", "332": "PdfPKCS7Test::::getEncodedPkcs7Test()", "333": "PdfPKCS7Test::::getEncodedPkcs7Test()", "334": "PdfPKCS7Test::::getEncodedPkcs7Test()", "335": "PdfPKCS7Test::::getEncodedPkcs7Test()", "336": "PdfPKCS7Test::::getEncodedPkcs7Test()", "338": "PdfPKCS7Test::::getEncodedPkcs7WithRevocationInfoTest()", "339": "PdfPKCS7Test::::getEncodedPkcs7WithRevocationInfoTest()", "340": "PdfPKCS7Test::::getEncodedPkcs7WithRevocationInfoTest()", "341": "PdfPKCS7Test::::getEncodedPkcs7WithRevocationInfoTest()", "342": "PdfPKCS7Test::::getEncodedPkcs7WithRevocationInfoTest()", "343": "PdfPKCS7Test::::getEncodedPkcs7WithRevocationInfoTest()", "344": "PdfPKCS7Test::::getEncodedPkcs7WithRevocationInfoTest()", "345": "PdfPKCS7Test::::getEncodedPkcs7WithRevocationInfoTest()", "346": "PdfPKCS7Test::::getEncodedPkcs7WithRevocationInfoTest()", "347": "PdfPKCS7Test::::getEncodedPkcs7WithRevocationInfoTest()", "348": "PdfPKCS7Test::::getEncodedPkcs7WithRevocationInfoTest()", "349": "PdfPKCS7Test::::getEncodedPkcs7WithRevocationInfoTest()", "350": "PdfPKCS7Test::::getEncodedPkcs7WithRevocationInfoTest()", "352": "PdfPKCS7Test::::verifyEd448SignatureTest()", "353": "PdfPKCS7Test::::verifyEd448SignatureTest()", "354": "PdfPKCS7Test::::verifyEd448SignatureTest()", "355": "PdfPKCS7Test::::verifyEd448SignatureTest()", "356": "PdfPKCS7Test::::verifyEd448SignatureTest()", "357": "PdfPKCS7Test::::verifyEd448SignatureTest()", "358": "PdfPKCS7Test::::verifyEd448SignatureTest()", "359": "PdfPKCS7Test::::verifyEd448SignatureTest()", "360": "PdfPKCS7Test::::verifyEd448SignatureTest()", "361": "PdfPKCS7Test::::verifyEd448SignatureTest()", "363": "PdfPKCS7Test::::verifyNistECDSASha2SignatureTest()", "364": "PdfPKCS7Test::::verifyNistECDSASha2SignatureTest()", "365": "PdfPKCS7Test::::verifyNistECDSASha2SignatureTest()", "366": "PdfPKCS7Test::::verifyNistECDSASha2SignatureTest()", "368": "PdfPKCS7Test::::verifyBrainpoolSha2SignatureTest()", "369": "PdfPKCS7Test::::verifyBrainpoolSha2SignatureTest()", "370": "PdfPKCS7Test::::verifyBrainpoolSha2SignatureTest()", "371": "PdfPKCS7Test::::verifyBrainpoolSha2SignatureTest()", "374": "PdfPKCS7Test::::createSimplePdfPKCS7()", "375": "PdfPKCS7Test::::createSimplePdfPKCS7()", "376": "PdfPKCS7Test::::createSimplePdfPKCS7()", "377": "PdfPKCS7Test::::createSimplePdfPKCS7()", "378": "PdfPKCS7Test::::createSimplePdfPKCS7()", "380": "PdfPKCS7Test::::serializedAsString(byte[])", "381": "PdfPKCS7Test::::serializedAsString(byte[])", "382": "PdfPKCS7Test::::serializedAsString(byte[])", "383": "PdfPKCS7Test::::serializedAsString(byte[])", "384": "PdfPKCS7Test::::serializedAsString(byte[])"}, "tests": [{"test_lines": [69, 80], "covered_lines": [98, 129, 134, 153, 154, 155, 157, 158, 159, 160, 584, 589, 638, 1488, 1532]}, {"test_lines": [82, 97], "covered_lines": [98, 129, 134, 153, 154, 155, 157, 158, 164, 165, 166, 169, 170, 173, 184, 190, 193, 210, 211, 584, 589, 597, 606, 638, 647, 680, 1418, 1447, 1488, 1532]}, {"test_lines": [99, 110], "covered_lines": [98, 129, 134, 153, 154, 155, 157, 158, 164, 165, 166, 169, 170, 173, 174, 175, 176, 180, 184, 190, 191, 193, 584, 589, 638, 647, 656, 660, 665, 670, 680, 691, 702, 803, 804, 805, 1418, 1447, 1488, 1532]}, {"test_lines": [112, 118], "covered_lines": [98, 129, 134, 153, 154, 155, 157, 158, 164, 165, 166, 169, 170, 173, 174, 175, 176, 180, 184, 190, 584, 589, 638, 656, 660, 665, 670, 691, 702, 1488, 1532]}, {"test_lines": [120, 129], "covered_lines": [98, 129, 134, 153, 154, 155, 157, 158, 164, 165, 166, 169, 170, 173, 184, 190, 193, 526, 535, 536, 584, 589, 638, 1488, 1532]}, {"test_lines": [131, 140], "covered_lines": [98, 129, 134, 153, 154, 155, 157, 158, 164, 165, 166, 169, 170, 173, 184, 190, 193, 544, 553, 554, 584, 589, 638, 1488, 1532]}, {"test_lines": [142, 151], "covered_lines": [98, 129, 134, 153, 154, 155, 157, 158, 164, 165, 166, 169, 170, 173, 184, 190, 193, 508, 517, 518, 584, 589, 638, 1488, 1532]}, {"test_lines": [153, 162], "covered_lines": [98, 129, 134, 153, 154, 155, 157, 158, 164, 165, 166, 169, 170, 173, 184, 190, 193, 562, 563, 564, 576, 577, 584, 589, 638, 1488, 1532, 1683, 1684]}, {"test_lines": [164, 189], "covered_lines": [98, 129, 134, 253, 254, 255, 256, 258, 265, 266, 267, 268, 271, 272, 273, 277, 278, 282, 283, 292, 295, 296, 297, 298, 299, 300, 301, 304, 305, 306, 307, 308, 311, 313, 314, 315, 323, 326, 327, 331, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 382, 383, 384, 387, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 418, 421, 425, 427, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 473, 475, 477, 481, 482, 517, 518, 535, 536, 553, 554, 576, 577, 584, 589, 638, 656, 660, 665, 670, 691, 702, 812, 815, 817, 818, 819, 820, 824, 863, 876, 877, 881, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1478, 1479, 1480, 1488, 1496, 1532, 1549, 1585, 1588, 1589, 1590, 1591, 1592, 1593, 1595, 1596, 1597, 1598, 1599, 1600, 1601, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1615, 1618, 1619, 1620, 1621, 1622, 1623, 1670, 1695]}, {"test_lines": [191, 197], "covered_lines": [98, 129, 134, 253, 254, 255, 256, 258, 265, 266, 267, 268, 271, 272, 273, 277, 278, 282, 283, 292, 295, 296, 297, 298, 299, 300, 301, 304, 305, 311, 313, 314, 315, 323, 326, 327, 331, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 371, 372, 373, 387, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 418, 421, 425, 427, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 461, 469, 470, 473, 475, 477, 481, 482, 517, 518, 535, 536, 553, 554, 576, 577, 584, 589, 638, 656, 660, 665, 670, 691, 702, 812, 815, 817, 818, 819, 820, 824, 863, 876, 877, 881, 1382, 1383, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1465, 1466, 1467, 1468, 1469, 1478, 1479, 1480, 1488, 1532, 1695]}, {"test_lines": [199, 205], "covered_lines": [98, 129, 134, 253, 254, 255, 256, 258, 265, 266, 267, 268, 271, 272, 273, 277, 278, 282, 283, 292, 295, 296, 297, 298, 299, 300, 301, 304, 305, 306, 307, 308, 311, 313, 314, 315, 323, 326, 327, 331, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 371, 372, 373, 387, 402, 421, 425, 427, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 461, 462, 463, 464, 465, 466, 467, 468, 481, 482, 517, 518, 584, 589, 638, 656, 660, 665, 670, 876, 877, 881, 1382, 1385, 1386, 1387, 1388, 1389, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1478, 1479, 1480, 1488, 1532]}, {"test_lines": [207, 213], "covered_lines": [98, 129, 134, 253, 254, 255, 256, 258, 265, 266, 267, 268, 271, 272, 273, 277, 278, 282, 283, 292, 295, 296, 297, 298, 299, 300, 301, 304, 305, 306, 307, 308, 311, 313, 314, 315, 323, 326, 327, 331, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 371, 372, 373, 387, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 418, 421, 425, 427, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 473, 475, 477, 481, 482, 517, 518, 535, 536, 553, 554, 576, 577, 584, 589, 638, 656, 660, 665, 670, 691, 702, 812, 815, 817, 818, 819, 820, 824, 863, 876, 877, 881, 1382, 1385, 1386, 1387, 1388, 1389, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1478, 1479, 1480, 1488, 1532, 1695]}, {"test_lines": [215, 221], "covered_lines": [98, 129, 134, 253, 254, 255, 256, 258, 265, 266, 267, 268, 271, 272, 273, 277, 278, 282, 283, 292, 295, 296, 297, 298, 299, 300, 301, 304, 305, 306, 307, 308, 311, 313, 314, 315, 323, 326, 327, 331, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 371, 372, 373, 387, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 418, 421, 425, 427, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 473, 475, 477, 481, 482, 517, 518, 535, 536, 553, 554, 576, 577, 584, 589, 638, 656, 660, 665, 670, 691, 702, 812, 815, 817, 818, 819, 820, 824, 863, 876, 877, 881, 1382, 1385, 1386, 1387, 1388, 1389, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1478, 1479, 1480, 1488, 1532, 1695]}, {"test_lines": [223, 235], "covered_lines": [98, 129, 134, 253, 254, 255, 256, 258, 265, 266, 267, 268, 271, 272, 273, 277, 278, 282, 283, 292, 295, 296, 297, 298, 299, 300, 301, 304, 305, 311, 313, 314, 315, 323, 326, 327, 331, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 387, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 418, 421, 425, 427, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 461, 469, 470, 473, 475, 477, 481, 482, 517, 518, 535, 536, 553, 554, 576, 577, 584, 589, 638, 656, 660, 665, 670, 691, 702, 812, 815, 817, 818, 819, 820, 824, 863, 876, 877, 881, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1478, 1479, 1480, 1488, 1496, 1513, 1514, 1515, 1516, 1517, 1518, 1522, 1523, 1532, 1695]}, {"test_lines": [237, 243], "covered_lines": [98, 129, 134, 153, 154, 155, 157, 158, 164, 165, 166, 169, 170, 173, 184, 190, 193, 584, 589, 638, 1488, 1496, 1513, 1514, 1520, 1523, 1532]}, {"test_lines": [245, 252], "covered_lines": [98, 129, 134, 253, 254, 255, 256, 258, 265, 266, 267, 268, 271, 272, 273, 277, 278, 282, 283, 292, 295, 296, 297, 298, 299, 300, 301, 304, 305, 311, 313, 314, 315, 323, 326, 327, 331, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 382, 383, 384, 387, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 418, 421, 425, 427, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 461, 469, 470, 473, 475, 477, 481, 482, 517, 518, 535, 536, 553, 554, 576, 577, 584, 589, 638, 656, 660, 665, 670, 691, 702, 812, 815, 817, 818, 819, 820, 824, 863, 876, 877, 881, 1438, 1447, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1478, 1479, 1480, 1488, 1532, 1558, 1561, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1585, 1588, 1589, 1590, 1591, 1592, 1593, 1595, 1596, 1597, 1598, 1599, 1600, 1601, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1615, 1618, 1619, 1620, 1621, 1622, 1623, 1695]}, {"test_lines": [254, 261], "covered_lines": [98, 129, 134, 253, 254, 255, 256, 258, 265, 266, 267, 268, 271, 272, 273, 277, 278, 282, 283, 292, 295, 296, 297, 298, 299, 300, 301, 304, 305, 311, 313, 314, 315, 323, 326, 327, 331, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 382, 383, 384, 387, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 418, 421, 425, 427, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 461, 469, 470, 473, 475, 477, 481, 482, 517, 518, 535, 536, 553, 554, 576, 577, 584, 589, 638, 656, 660, 665, 670, 691, 702, 812, 815, 817, 818, 819, 820, 824, 863, 876, 877, 881, 1438, 1447, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1478, 1479, 1480, 1488, 1532, 1558, 1561, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1585, 1588, 1589, 1590, 1591, 1592, 1593, 1595, 1596, 1597, 1598, 1599, 1600, 1601, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1615, 1618, 1619, 1620, 1621, 1622, 1623, 1695]}, {"test_lines": [263, 269], "covered_lines": [98, 129, 134, 153, 154, 155, 157, 158, 164, 165, 166, 169, 170, 173, 184, 190, 193, 584, 589, 638, 1488, 1532, 1558, 1559]}, {"test_lines": [271, 280], "covered_lines": [98, 129, 134, 153, 154, 155, 157, 158, 164, 165, 166, 169, 170, 173, 184, 190, 193, 584, 589, 638, 1488, 1532, 1558, 1561, 1562]}, {"test_lines": [282, 291], "covered_lines": [98, 129, 134, 153, 154, 155, 157, 158, 164, 165, 166, 169, 170, 173, 184, 190, 193, 584, 589, 638, 1438, 1447, 1488, 1532, 1558, 1561, 1565, 1566, 1567, 1568, 1569, 1572, 1574]}, {"test_lines": [293, 303], "covered_lines": [98, 129, 134, 153, 154, 155, 157, 158, 164, 165, 166, 169, 170, 173, 174, 175, 176, 180, 184, 185, 186, 190, 191, 193, 584, 589, 638, 656, 660, 665, 670, 691, 702, 803, 804, 805, 892, 895, 897, 899, 900, 901, 903, 1488, 1532]}, {"test_lines": [305, 312], "covered_lines": [98, 129, 134, 153, 154, 155, 157, 158, 164, 165, 166, 169, 170, 173, 184, 185, 186, 190, 193, 584, 589, 638, 656, 660, 665, 670, 904, 905, 1488, 1532]}, {"test_lines": [314, 323], "covered_lines": [98, 129, 134, 153, 154, 155, 157, 158, 164, 165, 166, 169, 170, 173, 174, 175, 176, 180, 184, 185, 186, 190, 191, 193, 584, 589, 638, 656, 660, 665, 670, 691, 702, 803, 804, 805, 954, 959, 964, 965, 966, 968, 972, 973, 974, 975, 976, 977, 978, 981, 982, 983, 984, 985, 987, 990, 991, 992, 993, 994, 995, 996, 998, 1001, 1005, 1008, 1010, 1012, 1013, 1014, 1017, 1018, 1019, 1020, 1023, 1028, 1029, 1030, 1031, 1035, 1038, 1043, 1044, 1082, 1083, 1488, 1532]}, {"test_lines": [325, 336], "covered_lines": [98, 129, 134, 153, 154, 155, 157, 158, 164, 165, 166, 169, 170, 173, 174, 175, 176, 180, 184, 185, 186, 190, 191, 193, 584, 589, 638, 656, 660, 665, 670, 691, 702, 803, 804, 805, 917, 954, 959, 964, 965, 966, 968, 972, 973, 974, 975, 976, 977, 978, 981, 982, 983, 984, 985, 987, 990, 991, 992, 993, 994, 995, 996, 998, 1001, 1005, 1008, 1010, 1012, 1013, 1014, 1017, 1018, 1019, 1020, 1023, 1028, 1029, 1030, 1031, 1035, 1038, 1043, 1056, 1057, 1058, 1059, 1060, 1061, 1066, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1081, 1488, 1532]}, {"test_lines": [338, 350], "covered_lines": [98, 129, 134, 153, 154, 155, 157, 158, 164, 165, 166, 169, 170, 173, 174, 175, 176, 180, 184, 185, 186, 190, 191, 193, 584, 589, 638, 656, 660, 665, 670, 691, 702, 803, 804, 805, 917, 954, 959, 964, 965, 966, 968, 972, 973, 974, 975, 976, 977, 978, 981, 982, 983, 984, 985, 987, 990, 991, 992, 993, 994, 995, 996, 998, 1001, 1005, 1008, 1010, 1012, 1013, 1014, 1017, 1018, 1019, 1020, 1023, 1028, 1029, 1030, 1031, 1035, 1038, 1043, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1066, 1071, 1072, 1073, 1075, 1077, 1078, 1079, 1081, 1488, 1505, 1532, 1540]}, {"test_lines": [352, 361], "covered_lines": [98, 129, 134, 253, 254, 255, 256, 258, 265, 266, 267, 268, 271, 272, 273, 277, 278, 282, 283, 292, 295, 296, 297, 298, 299, 300, 301, 304, 305, 311, 313, 314, 315, 323, 326, 327, 331, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 371, 372, 373, 387, 402, 421, 425, 427, 430, 431, 432, 433, 434, 435, 438, 439, 440, 461, 469, 470, 473, 475, 477, 481, 482, 517, 518, 576, 577, 584, 589, 638, 656, 660, 665, 666, 670, 691, 696, 812, 815, 817, 818, 819, 820, 824, 863, 876, 877, 881, 1327, 1330, 1331, 1332, 1334, 1335, 1354, 1355, 1356, 1357, 1358, 1364, 1365, 1369, 1370, 1371, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1478, 1479, 1480, 1488, 1532, 1695]}, {"test_lines": [363, 366], "covered_lines": [98, 129, 134, 253, 254, 255, 256, 258, 265, 266, 267, 268, 271, 272, 273, 277, 278, 282, 283, 292, 295, 296, 297, 298, 299, 300, 301, 304, 305, 311, 313, 314, 315, 323, 326, 327, 331, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 371, 372, 373, 387, 402, 421, 425, 427, 430, 431, 432, 433, 434, 435, 438, 439, 440, 461, 469, 470, 473, 475, 477, 481, 482, 517, 518, 576, 577, 584, 589, 638, 656, 660, 665, 670, 691, 702, 812, 815, 817, 818, 819, 820, 824, 863, 876, 877, 881, 1327, 1330, 1331, 1332, 1334, 1335, 1354, 1355, 1356, 1357, 1358, 1364, 1365, 1369, 1370, 1371, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1478, 1479, 1480, 1488, 1532, 1695]}, {"test_lines": [368, 371], "covered_lines": [98, 129, 134, 253, 254, 255, 256, 258, 265, 266, 267, 268, 271, 272, 273, 277, 278, 282, 283, 292, 295, 296, 297, 298, 299, 300, 301, 304, 305, 311, 313, 314, 315, 323, 326, 327, 331, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 371, 372, 373, 387, 402, 421, 425, 427, 430, 431, 432, 433, 434, 435, 438, 439, 440, 461, 469, 470, 473, 475, 477, 481, 482, 517, 518, 576, 577, 584, 589, 638, 656, 660, 665, 670, 691, 702, 812, 815, 817, 818, 819, 820, 824, 863, 876, 877, 881, 1327, 1330, 1331, 1332, 1334, 1335, 1354, 1355, 1356, 1357, 1358, 1364, 1365, 1369, 1370, 1371, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1478, 1479, 1480, 1488, 1532, 1695]}]}, "/bernard/dataset_construction/prep/repos/itext-java/sign/src/main/java/com/itextpdf/signatures/VerificationOK.java": {"class_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.signatures;\n", "\n", "import java.security.cert.X509Certificate;\n", "\n", "/**\n", " * Class that informs you that the verification of a Certificate\n", " * succeeded using a specific CertificateVerifier and for a specific\n", " * reason.\n", " */\n", "public class VerificationOK {\n", "\n", "    /** The certificate that was verified successfully. */\n", "    protected X509Certificate certificate;\n", "    /** The CertificateVerifier that was used for verifying. */\n", "    protected Class<? extends CertificateVerifier> verifierClass;\n", "    /** The reason why the certificate verified successfully. */\n", "    protected String message;\n", "\n", "    /**\n", "     * Creates a VerificationOK object\n", "     * @param certificate\tthe certificate that was successfully verified\n", "     * @param verifierClass\tthe class that was used for verification\n", "     * @param message\t\tthe reason why the certificate could be verified\n", "     */\n", "    public VerificationOK(X509Certificate certificate,\n", "            Class<? extends CertificateVerifier> verifierClass, String message) {\n", "        this.certificate = certificate;\n", "        this.verifierClass = verifierClass;\n", "        this.message = message;\n", "    }\n", "\n", "    /**\n", "     * Return a single String explaining which certificate was verified, how and why.\n", "     * @see java.lang.Object#toString()\n", "     */\n", "    public String toString() {\n", "        StringBuilder sb = new StringBuilder();\n", "        if (certificate != null) {\n", "            sb.append(certificate.getSubjectDN().getName());\n", "            sb.append(\" verified with \");\n", "        }\n", "        sb.append(verifierClass.getName());\n", "        sb.append(\": \");\n", "        sb.append(message);\n", "        return sb.toString();\n", "    }\n", "}\n"], "test_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.signatures;\n", "\n", "import com.itextpdf.signatures.testutils.X509MockCertificate;\n", "import com.itextpdf.test.ExtendedITextTest;\n", "import com.itextpdf.test.annotations.type.UnitTest;\n", "\n", "import org.junit.Assert;\n", "import org.junit.Test;\n", "import org.junit.experimental.categories.Category;\n", "\n", "@Category(UnitTest.class)\n", "public class VerificationOKTest extends ExtendedITextTest {\n", "    @Test\n", "    public void toStringTest() {\n", "        VerificationOK verificationOK = new VerificationOK(null, CRLVerifier.class, \"Mock verification\");\n", "        Assert.assertEquals(CRLVerifier.class.getName() + \": Mock verification\", verificationOK.toString());\n", "    }\n", "\n", "    @Test\n", "    public void toStringWithCertificateNotNullTest() {\n", "        VerificationOK verificationOK = new VerificationOK(new X509MockCertificate(), CRLVerifier.class, \"Mock verification\");\n", "        // NPE is thrown because getSubjectDN method returns null for X509MockCertificate class.\n", "        Assert.assertThrows(NullPointerException.class, () -> verificationOK.toString());\n", "    }\n", "}\n"], "method_lines_dic": {"VerificationOK::::toString()": [58, 68]}, "test_method_lines_dic": {"VerificationOKTest::::toStringTest()": [35, 39], "VerificationOKTest::::toStringWithCertificateNotNullTest()": [41, 46]}, "reverse_method_lines_dic": {"58": "VerificationOK::::toString()", "59": "VerificationOK::::toString()", "60": "VerificationOK::::toString()", "61": "VerificationOK::::toString()", "62": "VerificationOK::::toString()", "63": "VerificationOK::::toString()", "64": "VerificationOK::::toString()", "65": "VerificationOK::::toString()", "66": "VerificationOK::::toString()", "67": "VerificationOK::::toString()", "68": "VerificationOK::::toString()"}, "test_reverse_method_lines_dic": {"35": "VerificationOKTest::::toStringTest()", "36": "VerificationOKTest::::toStringTest()", "37": "VerificationOKTest::::toStringTest()", "38": "VerificationOKTest::::toStringTest()", "39": "VerificationOKTest::::toStringTest()", "41": "VerificationOKTest::::toStringWithCertificateNotNullTest()", "42": "VerificationOKTest::::toStringWithCertificateNotNullTest()", "43": "VerificationOKTest::::toStringWithCertificateNotNullTest()", "44": "VerificationOKTest::::toStringWithCertificateNotNullTest()", "45": "VerificationOKTest::::toStringWithCertificateNotNullTest()", "46": "VerificationOKTest::::toStringWithCertificateNotNullTest()"}, "tests": [{"test_lines": [35, 39], "covered_lines": [48, 49, 50, 51, 52, 59, 60, 64, 65, 66, 67]}, {"test_lines": [41, 46], "covered_lines": [48, 49, 50, 51, 52, 59, 60]}]}, "/bernard/dataset_construction/prep/repos/itext-java/sign/src/main/java/com/itextpdf/signatures/SignatureUtil.java": {"class_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.signatures;\n", "\n", "import com.itextpdf.forms.PdfAcroForm;\n", "import com.itextpdf.forms.fields.PdfFormCreator;\n", "import com.itextpdf.forms.fields.PdfFormField;\n", "import com.itextpdf.io.font.PdfEncodings;\n", "import com.itextpdf.io.source.IRandomAccessSource;\n", "import com.itextpdf.io.source.PdfTokenizer;\n", "import com.itextpdf.io.source.RASInputStream;\n", "import com.itextpdf.io.source.RandomAccessFileOrArray;\n", "import com.itextpdf.io.source.RandomAccessSourceFactory;\n", "import com.itextpdf.io.source.WindowRandomAccessSource;\n", "import com.itextpdf.kernel.exceptions.PdfException;\n", "import com.itextpdf.kernel.pdf.PdfArray;\n", "import com.itextpdf.kernel.pdf.PdfDate;\n", "import com.itextpdf.kernel.pdf.PdfDictionary;\n", "import com.itextpdf.kernel.pdf.PdfDocument;\n", "import com.itextpdf.kernel.pdf.PdfIndirectReference;\n", "import com.itextpdf.kernel.pdf.PdfName;\n", "import com.itextpdf.kernel.pdf.PdfObject;\n", "import com.itextpdf.kernel.pdf.PdfReader;\n", "import com.itextpdf.kernel.pdf.PdfString;\n", "import com.itextpdf.signatures.exceptions.SignExceptionMessageConstant;\n", "\n", "import java.io.IOException;\n", "import java.io.InputStream;\n", "import java.util.ArrayList;\n", "import java.util.Collections;\n", "import java.util.Comparator;\n", "import java.util.HashMap;\n", "import java.util.List;\n", "import java.util.Map;\n", "\n", "/**\n", " * Utility class that provides several convenience methods concerning digital signatures.\n", " */\n", "public class SignatureUtil {\n", "\n", "    private final PdfDocument document;\n", "    private final PdfAcroForm acroForm;\n", "    private Map<String, int[]> sigNames;\n", "    private List<String> orderedSignatureNames;\n", "    private int totalRevisions;\n", "\n", "    /**\n", "     * Creates a SignatureUtil instance. Sets the acroForm field to the acroForm in the PdfDocument.\n", "     * iText will create a new AcroForm if the PdfDocument doesn't contain one.\n", "     *\n", "     * @param document PdfDocument to be inspected\n", "     */\n", "    public SignatureUtil(PdfDocument document) {\n", "        this.document = document;\n", "        // Only create new AcroForm if there is a writer\n", "        this.acroForm = PdfFormCreator.getAcroForm(document, document.getWriter() != null);\n", "    }\n", "\n", "    /**\n", "     * Prepares an {@link PdfPKCS7} instance for the given signature.\n", "     * This method handles signature parsing and might throw an exception if\n", "     * signature is malformed.\n", "     * <p>\n", "     * The returned {@link PdfPKCS7} can be used to fetch additional info about the signature\n", "     * and also to perform integrity check of data signed by the given signature field.\n", "     * <p>\n", "     * In order to validate the signature it is required to check if it covers the entire file,\n", "     * otherwise one cannot be sure that signature in question indeed signs the data\n", "     * that constitutes current {@link PdfDocument} with all its contents.\n", "     * In order to check that given signature covers the current {@link PdfDocument} please\n", "     * use {@link #signatureCoversWholeDocument(String)} method.\n", "     *\n", "     * @param signatureFieldName the signature field name\n", "     * @return a {@link PdfPKCS7} instance which can be used to fetch additional info about the signature\n", "     * and also to perform integrity check of data signed by the given signature field.\n", "     */\n", "    public PdfPKCS7 readSignatureData(String signatureFieldName) {\n", "        return readSignatureData(signatureFieldName, null);\n", "    }\n", "\n", "    /**\n", "     * Prepares an {@link PdfPKCS7} instance for the given signature.\n", "     * This method handles signature parsing and might throw an exception if\n", "     * signature is malformed.\n", "     * <p>\n", "     * The returned {@link PdfPKCS7} can be used to fetch additional info about the signature\n", "     * and also to perform integrity check of data signed by the given signature field.\n", "     * <p>\n", "     * Prepared {@link PdfPKCS7} instance calculates digest based on signature's /ByteRange entry.\n", "     * In order to check that /ByteRange is properly defined and given signature indeed covers the current PDF document\n", "     * revision please use {@link #signatureCoversWholeDocument(String)} method.\n", "     *\n", "     * @param signatureFieldName the signature field name\n", "     * @param securityProvider the security provider or null for the default provider\n", "     * @return a {@link PdfPKCS7} instance which can be used to fetch additional info about the signature\n", "     * and also to perform integrity check of data signed by the given signature field.\n", "     */\n", "    public PdfPKCS7 readSignatureData(String signatureFieldName, String securityProvider) {\n", "        PdfSignature signature = getSignature(signatureFieldName);\n", "        if (signature == null) {\n", "            return null;\n", "        }\n", "        try {\n", "            PdfName sub = signature.getSubFilter();\n", "            PdfString contents = signature.getContents();\n", "            PdfPKCS7 pk = null;\n", "            if (sub.equals(PdfName.Adbe_x509_rsa_sha1)) {\n", "                PdfString cert = signature.getPdfObject().getAsString(PdfName.Cert);\n", "                if (cert == null) {\n", "                    cert = signature.getPdfObject().getAsArray(PdfName.Cert).getAsString(0);\n", "                }\n", "                pk = new PdfPKCS7(PdfEncodings.convertToBytes(contents.getValue(), null), cert.getValueBytes(),\n", "                        securityProvider);\n", "            } else {\n", "                pk = new PdfPKCS7(PdfEncodings.convertToBytes(contents.getValue(), null), sub, securityProvider);\n", "            }\n", "            updateByteRange(pk, signature);\n", "            PdfString date = signature.getDate();\n", "            if (date != null) {\n", "                pk.setSignDate(PdfDate.decode(date.toString()));\n", "            }\n", "            String signName = signature.getName();\n", "            pk.setSignName(signName);\n", "            String reason = signature.getReason();\n", "            if (reason != null) {\n", "                pk.setReason(reason);\n", "            }\n", "            String location = signature.getLocation();\n", "            if (location != null) {\n", "                pk.setLocation(location);\n", "            }\n", "            return pk;\n", "        } catch (Exception e) {\n", "            throw new PdfException(e);\n", "        }\n", "    }\n", "\n", "    /**\n", "     * Get {@link PdfSignature} dictionary based on the provided name.\n", "     *\n", "     * @param name signature name\n", "     *\n", "     * @return {@link PdfSignature} instance corresponding to the provided name. {@code null} otherwise\n", "     */\n", "    public PdfSignature getSignature(String name) {\n", "        PdfDictionary sigDict = getSignatureDictionary(name);\n", "        return sigDict != null\n", "                ? new PdfSignature(sigDict)\n", "                : null;\n", "    }\n", "\n", "    /**\n", "     * Gets the signature dictionary, the one keyed by /V.\n", "     *\n", "     * @param name the field name\n", "     * @return the signature dictionary keyed by /V or <CODE>null</CODE> if the field is not\n", "     * a signature\n", "     */\n", "    public PdfDictionary getSignatureDictionary(String name) {\n", "        PdfDictionary merged = getSignatureFormFieldDictionary(name);\n", "        return merged == null ? null : merged.getAsDictionary(PdfName.V);\n", "    }\n", "\n", "    public PdfDictionary getSignatureFormFieldDictionary(String name) {\n", "        getSignatureNames();\n", "        if (acroForm == null || !sigNames.containsKey(name)) {\n", "            return null;\n", "        }\n", "        PdfFormField field = acroForm.getField(name);\n", "        return field.getPdfObject();\n", "    }\n", "\n", "    /* Updates the /ByteRange with the provided value */\n", "    private void updateByteRange(PdfPKCS7 pkcs7, PdfSignature signature) {\n", "        PdfArray b = signature.getByteRange();\n", "        RandomAccessFileOrArray rf = document.getReader().getSafeFile();\n", "        InputStream rg = null;\n", "        try {\n", "            rg = new RASInputStream(\n", "                    new RandomAccessSourceFactory().createRanged(rf.createSourceView(), b.toLongArray()));\n", "            byte[] buf = new byte[8192];\n", "            int rd;\n", "            while ((rd = rg.read(buf, 0, buf.length)) > 0) {\n", "                pkcs7.update(buf, 0, rd);\n", "            }\n", "        } catch (Exception e) {\n", "            throw new PdfException(e);\n", "        } finally {\n", "            try {\n", "                if (rg != null) rg.close();\n", "            } catch (IOException e) {\n", "                // this really shouldn't ever happen - the source view we use is based on a Safe view, which is a no-op anyway\n", "                throw new PdfException(e);\n", "            }\n", "        }\n", "    }\n", "\n", "    /**\n", "     * Gets the field names that have signatures and are signed.\n", "     *\n", "     * @return List containing the field names that have signatures and are signed\n", "     */\n", "    public List<String> getSignatureNames() {\n", "        if (sigNames != null) {\n", "            return new ArrayList<>(orderedSignatureNames);\n", "        }\n", "        sigNames = new HashMap<>();\n", "        orderedSignatureNames = new ArrayList<>();\n", "        populateSignatureNames();\n", "\n", "        return new ArrayList<>(orderedSignatureNames);\n", "    }\n", "\n", "    /**\n", "     * Gets the field names that have blank signatures.\n", "     *\n", "     * @return List containing the field names that have blank signatures\n", "     */\n", "    public List<String> getBlankSignatureNames() {\n", "        getSignatureNames();\n", "        List<String> sigs = new ArrayList<>();\n", "        if (acroForm != null) {\n", "            for (Map.Entry<String, PdfFormField> entry : acroForm.getAllFormFields().entrySet()) {\n", "                PdfFormField field = entry.getValue();\n", "                PdfDictionary merged = field.getPdfObject();\n", "                if (!PdfName.Sig.equals(merged.getAsName(PdfName.FT))) {\n", "                    continue;\n", "                }\n", "                if (sigNames.containsKey(entry.getKey())) {\n", "                    continue;\n", "                }\n", "                sigs.add(entry.getKey());\n", "            }\n", "        }\n", "        return sigs;\n", "    }\n", "\n", "    /**\n", "     * Get the amount of signed document revisions.\n", "     *\n", "     * @return {@code int} amount of signed document revisions\n", "     */\n", "    public int getTotalRevisions() {\n", "        getSignatureNames();\n", "        return totalRevisions;\n", "    }\n", "\n", "    /**\n", "     * Get signed document revision number, which corresponds to the provided signature name.\n", "     *\n", "     * @param field signature name\n", "     *\n", "     * @return {@code int} revision number\n", "     */\n", "    public int getRevision(String field) {\n", "        getSignatureNames();\n", "        field = getTranslatedFieldName(field);\n", "        if (!sigNames.containsKey(field)) {\n", "            return 0;\n", "        }\n", "        return sigNames.get(field)[1];\n", "    }\n", "\n", "    /**\n", "     * Get field name, translated using XFA, if any present in the document.\n", "     *\n", "     * @param name field name to be translated\n", "     *\n", "     * @return translated field name if XFA is present, original name otherwise\n", "     */\n", "    public String getTranslatedFieldName(String name) {\n", "        if (acroForm != null && acroForm.getXfaForm().isXfaPresent()) {\n", "            String namex = acroForm.getXfaForm().findFieldName(name);\n", "            if (namex != null)\n", "                name = namex;\n", "        }\n", "        return name;\n", "    }\n", "\n", "    /**\n", "     * Extracts a revision from the document.\n", "     *\n", "     * @param field the signature field name\n", "     * @return an InputStream covering the revision. Returns null if it's not a signature field\n", "     */\n", "    public InputStream extractRevision(String field) {\n", "        getSignatureNames();\n", "        if (!sigNames.containsKey(field)) {\n", "            return null;\n", "        }\n", "        int length = sigNames.get(field)[0];\n", "        RandomAccessFileOrArray raf = document.getReader().getSafeFile();\n", "        return new RASInputStream(new WindowRandomAccessSource(raf.createSourceView(), 0, length));\n", "    }\n", "\n", "    /**\n", "     * Checks if the signature covers the entire document (except for signature's Contents) or just a part of it.\n", "     * <p>\n", "     * If this method does not return {@code true} it means that signature in question does not cover the entire\n", "     * contents of current {@link PdfDocument}. Such signatures cannot be considered as verifying the PDF document,\n", "     * because content that is not covered by signature might have been modified since the signature creation.\n", "     * <p>\n", "     * @param name the signature field name\n", "     * @return true if the signature covers the entire document, false if it doesn't\n", "     */\n", "    public boolean signatureCoversWholeDocument(String name) {\n", "        getSignatureNames();\n", "        if (!sigNames.containsKey(name)) {\n", "            return false;\n", "        }\n", "        try {\n", "            ContentsChecker signatureReader = new ContentsChecker(\n", "                    document.getReader().getSafeFile().createSourceView(), document);\n", "            return signatureReader.checkWhetherSignatureCoversWholeDocument(acroForm.getField(name));\n", "        } catch (IOException e) {\n", "            throw new PdfException(e);\n", "        }\n", "    }\n", "\n", "    /**\n", "     * Checks whether a name exists as a signature field or not. It checks both signed fields and blank signatures.\n", "     *\n", "     * @param name name of the field\n", "     * @return boolean does the signature field exist\n", "     */\n", "    public boolean doesSignatureFieldExist(String name) {\n", "        return getBlankSignatureNames().contains(name) || getSignatureNames().contains(name);\n", "    }\n", "\n", "    private void populateSignatureNames() {\n", "        if (acroForm == null) {\n", "            return;\n", "        }\n", "\n", "        List<Object[]> sorter = new ArrayList<>();\n", "        for (Map.Entry<String, PdfFormField> entry : acroForm.getAllFormFields().entrySet()) {\n", "            PdfFormField field = entry.getValue();\n", "            PdfDictionary merged = field.getPdfObject();\n", "            if (!PdfName.Sig.equals(merged.get(PdfName.FT))) {\n", "                continue;\n", "            }\n", "            PdfDictionary v = merged.getAsDictionary(PdfName.V);\n", "            if (v == null) {\n", "                continue;\n", "            }\n", "            PdfString contents = v.getAsString(PdfName.Contents);\n", "            if (contents == null) {\n", "                continue;\n", "            } else {\n", "                contents.markAsUnencryptedObject();\n", "            }\n", "            PdfArray ro = v.getAsArray(PdfName.ByteRange);\n", "            if (ro == null)\n", "                continue;\n", "            int rangeSize = ro.size();\n", "            if (rangeSize < 2)\n", "                continue;\n", "            int length = ro.getAsNumber(rangeSize - 1).intValue() + ro.getAsNumber(rangeSize - 2).intValue();\n", "            sorter.add(new Object[]{entry.getKey(), new int[]{length, 0}});\n", "        }\n", "        Collections.sort(sorter, new SorterComparator());\n", "        if (!sorter.isEmpty()) {\n", "            if (((int[]) sorter.get(sorter.size() - 1)[1])[0] == document.getReader().getFileLength()) {\n", "                totalRevisions = sorter.size();\n", "            } else {\n", "                totalRevisions = sorter.size() + 1;\n", "            }\n", "            for (int k = 0; k < sorter.size(); ++k) {\n", "                Object[] objs = sorter.get(k);\n", "                String name = (String) objs[0];\n", "                int[] p = (int[]) objs[1];\n", "                p[1] = k + 1;\n", "                sigNames.put(name, p);\n", "                orderedSignatureNames.add(name);\n", "            }\n", "        }\n", "    }\n", "\n", "    private static class SorterComparator implements Comparator<Object[]> {\n", "        @Override\n", "        public int compare(Object[] o1, Object[] o2) {\n", "            int n1 = ((int[]) o1[1])[0];\n", "            int n2 = ((int[]) o2[1])[0];\n", "            return n1 - n2;\n", "        }\n", "    }\n", "\n", "    private static class ContentsChecker extends PdfReader {\n", "\n", "        public static final int OBJECT_HEADER_OFFSET = 6;\n", "        private long rangeExclusionStart;\n", "        private long rangeExlusionEnd;\n", "\n", "        private int currentLevel = 0;\n", "        private int contentsLevel = 1;\n", "        private boolean searchInV = true;\n", "\n", "        private boolean rangeIsCorrect = false;\n", "\n", "\n", "        public ContentsChecker(IRandomAccessSource byteSource, PdfDocument doc ) throws IOException {\n", "            super(byteSource, null);\n", "            pdfDocument = doc;\n", "        }\n", "\n", "        public boolean checkWhetherSignatureCoversWholeDocument(PdfFormField signatureField) {\n", "            rangeIsCorrect = false;\n", "            PdfDictionary signature = (PdfDictionary) signatureField.getValue();\n", "            int[] byteRange = ((PdfArray) signature.get(PdfName.ByteRange)).toIntArray();\n", "            if (4 != byteRange.length || 0 != byteRange[0]\n", "                    || tokens.getSafeFile().length() != byteRange[2] + byteRange[3]) {\n", "                return false;\n", "            }\n", "\n", "            rangeExclusionStart = byteRange[1];\n", "            rangeExlusionEnd = byteRange[2];\n", "\n", "            long signatureOffset;\n", "            if (null != signature.getIndirectReference()) {\n", "                signatureOffset = signature.getIndirectReference().getOffset();\n", "                searchInV = true;\n", "            } else {\n", "                signatureOffset = signatureField.getPdfObject().getIndirectReference().getOffset();\n", "                searchInV = false;\n", "                contentsLevel++;\n", "            }\n", "\n", "            try {\n", "                tokens.seek(signatureOffset);\n", "                tokens.nextValidToken();\n", "                readObject(false, false);\n", "            } catch (IOException e) {\n", "                // That's not expected because if the signature is invalid, it should have already failed\n", "                return false;\n", "            }\n", "\n", "            return rangeIsCorrect;\n", "        }\n", "\n", "        @Override\n", "        // The method copies the logic of PdfReader's method.\n", "        // Only Contents related checks have been introduced.\n", "        protected PdfDictionary readDictionary(boolean objStm) throws IOException {\n", "            currentLevel++;\n", "            PdfDictionary dic = new PdfDictionary();\n", "            int contentsEntryCount = 0;\n", "            while (!rangeIsCorrect) {\n", "                tokens.nextValidToken();\n", "                if (tokens.getTokenType() == PdfTokenizer.TokenType.EndDic) {\n", "                    currentLevel--;\n", "                    break;\n", "                }\n", "                if (tokens.getTokenType() != PdfTokenizer.TokenType.Name) {\n", "                    tokens.throwError(\n", "                            SignExceptionMessageConstant.DICTIONARY_THIS_KEY_IS_NOT_A_NAME, tokens.getStringValue());\n", "                }\n", "                PdfName name = readPdfName(true);\n", "                PdfObject obj;\n", "                if (PdfName.Contents.equals(name) && searchInV && contentsLevel == currentLevel) {\n", "                    contentsEntryCount++;\n", "                    if (contentsEntryCount > 1) {\n", "                        rangeIsCorrect = false;\n", "                        break;\n", "                    }\n", "                    long contentsValueStart;\n", "                    obj = readObject(true, objStm);\n", "                    long contentsValueEnd;\n", "                    if (obj.isIndirectReference()) {\n", "                        PdfIndirectReference ref = (PdfIndirectReference) obj;\n", "                        contentsValueStart = ref.getOffset() + countDigits(ref.getObjNumber()) +\n", "                                countDigits(ref.getGenNumber()) + OBJECT_HEADER_OFFSET;\n", "                        contentsValueEnd = contentsValueStart +\n", "                                //*2 + 2 to account for hex encoding\n", "                                ((PdfString) ref.getRefersTo()).getValueBytes().length * 2L + 2L;\n", "\n", "                    } else {\n", "                        contentsValueEnd = tokens.getPosition();\n", "                        //*2 + 2 to account for hex encoding\n", "                        contentsValueStart = contentsValueEnd -(((PdfString)obj).getValueBytes().length * 2L + 2L);\n", "                    }\n", "                    if (contentsValueEnd == rangeExlusionEnd && contentsValueStart  == rangeExclusionStart) {\n", "                        rangeIsCorrect = true;\n", "                    }\n", "                } else if (PdfName.V.equals(name) && !searchInV && 1 == currentLevel) {\n", "                    searchInV = true;\n", "                    obj = readObject(true, objStm);\n", "                    searchInV = false;\n", "                } else {\n", "                    obj = readObject(true, objStm);\n", "                }\n", "                if (obj == null) {\n", "                    if (tokens.getTokenType() == PdfTokenizer.TokenType.EndDic)\n", "                        tokens.throwError(SignExceptionMessageConstant.UNEXPECTED_GT_GT);\n", "                    if (tokens.getTokenType() == PdfTokenizer.TokenType.EndArray)\n", "                        tokens.throwError(SignExceptionMessageConstant.UNEXPECTED_CLOSE_BRACKET);\n", "                }\n", "                dic.put(name, obj);\n", "            }\n", "            return dic;\n", "        }\n", "\n", "        private static long countDigits(int number) {\n", "            int x = number;\n", "            if (x == 0) {\n", "                x = 1;\n", "            }\n", "            int l = 0;\n", "            while (x>0) {\n", "                x /= 10;\n", "                l++;\n", "            }\n", "            return l;\n", "\n", "        }\n", "    }\n", "}\n"], "test_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.signatures;\n", "\n", "import com.itextpdf.bouncycastleconnector.BouncyCastleFactoryCreator;\n", "import com.itextpdf.commons.bouncycastle.IBouncyCastleFactory;\n", "import com.itextpdf.commons.utils.DateTimeUtil;\n", "import com.itextpdf.kernel.exceptions.PdfException;\n", "import com.itextpdf.kernel.pdf.PdfDocument;\n", "import com.itextpdf.kernel.pdf.PdfReader;\n", "import com.itextpdf.signatures.testutils.TimeTestUtil;\n", "import com.itextpdf.test.ExtendedITextTest;\n", "import com.itextpdf.test.annotations.type.BouncyCastleIntegrationTest;\n", "\n", "import java.security.Security;\n", "import org.junit.Assert;\n", "import org.junit.BeforeClass;\n", "import org.junit.Test;\n", "import org.junit.experimental.categories.Category;\n", "\n", "import java.io.IOException;\n", "import java.util.List;\n", "\n", "@Category(BouncyCastleIntegrationTest.class)\n", "public class SignatureUtilTest extends ExtendedITextTest {\n", "    private static final IBouncyCastleFactory BOUNCY_CASTLE_FACTORY = BouncyCastleFactoryCreator.getFactory();\n", "\n", "    private static final String sourceFolder = \"./src/test/resources/com/itextpdf/signatures/SignatureUtilTest/\";\n", "    private static final double EPS = 0.001;\n", "\n", "    @BeforeClass\n", "    public static void before() {\n", "        Security.addProvider(BOUNCY_CASTLE_FACTORY.getProvider());\n", "    }\n", "\n", "    @Test\n", "    public void getSignaturesTest01() throws IOException {\n", "        String inPdf = sourceFolder + \"simpleSignature.pdf\";\n", "        PdfDocument pdfDocument = new PdfDocument(new PdfReader(inPdf));\n", "        SignatureUtil signatureUtil = new SignatureUtil(pdfDocument);\n", "        List<String> signatureNames = signatureUtil.getSignatureNames();\n", "\n", "        Assert.assertEquals(1, signatureNames.size());\n", "        Assert.assertEquals(\"Signature1\", signatureNames.get(0));\n", "    }\n", "\n", "    @Test\n", "    public void getSignaturesTest02() throws IOException {\n", "        String inPdf = sourceFolder + \"simpleDocument.pdf\";\n", "        PdfDocument pdfDocument = new PdfDocument(new PdfReader(inPdf));\n", "        SignatureUtil signatureUtil = new SignatureUtil(pdfDocument);\n", "        List<String> signatureNames = signatureUtil.getSignatureNames();\n", "\n", "        Assert.assertEquals(0, signatureNames.size());\n", "    }\n", "\n", "    @Test\n", "    public void firstBytesNotCoveredTest01() throws IOException {\n", "        String inPdf = sourceFolder + \"firstBytesNotCoveredTest01.pdf\";\n", "        PdfDocument pdfDocument = new PdfDocument(new PdfReader(inPdf));\n", "        SignatureUtil signatureUtil = new SignatureUtil(pdfDocument);\n", "\n", "        Assert.assertFalse(signatureUtil.signatureCoversWholeDocument(\"Signature1\"));\n", "    }\n", "\n", "    @Test\n", "    public void lastBytesNotCoveredTest01() throws IOException {\n", "        String inPdf = sourceFolder + \"lastBytesNotCoveredTest01.pdf\";\n", "        PdfDocument pdfDocument = new PdfDocument(new PdfReader(inPdf));\n", "        SignatureUtil signatureUtil = new SignatureUtil(pdfDocument);\n", "\n", "        Assert.assertFalse(signatureUtil.signatureCoversWholeDocument(\"Signature1\"));\n", "    }\n", "\n", "    @Test\n", "    public void lastBytesNotCoveredTest02() throws IOException {\n", "        String inPdf = sourceFolder + \"lastBytesNotCoveredTest02.pdf\";\n", "        PdfDocument pdfDocument = new PdfDocument(new PdfReader(inPdf));\n", "        SignatureUtil signatureUtil = new SignatureUtil(pdfDocument);\n", "\n", "        Assert.assertFalse(signatureUtil.signatureCoversWholeDocument(\"Signature1\"));\n", "    }\n", "\n", "    @Test\n", "    public void exclusionSmallerThenContentsTest01() throws IOException {\n", "        String inPdf = sourceFolder + \"exclusionSmallerThenContentsTest01.pdf\";\n", "        PdfDocument pdfDocument = new PdfDocument(new PdfReader(inPdf));\n", "        SignatureUtil signatureUtil = new SignatureUtil(pdfDocument);\n", "\n", "        Assert.assertFalse(signatureUtil.signatureCoversWholeDocument(\"Signature1\"));\n", "    }\n", "\n", "    @Test\n", "    public void bytesAreCoveredTest01() throws IOException {\n", "        String inPdf = sourceFolder + \"bytesAreCoveredTest01.pdf\";\n", "        PdfDocument pdfDocument = new PdfDocument(new PdfReader(inPdf));\n", "        SignatureUtil signatureUtil = new SignatureUtil(pdfDocument);\n", "\n", "        Assert.assertTrue(signatureUtil.signatureCoversWholeDocument(\"Signature1\"));\n", "    }\n", "\n", "    @Test\n", "    public void bytesAreCoveredTest02() throws IOException {\n", "        String inPdf = sourceFolder + \"bytesAreCoveredTest02.pdf\";\n", "        PdfDocument pdfDocument = new PdfDocument(new PdfReader(inPdf));\n", "        SignatureUtil signatureUtil = new SignatureUtil(pdfDocument);\n", "\n", "        Assert.assertTrue(signatureUtil.signatureCoversWholeDocument(\"sig\"));\n", "    }\n", "\n", "    @Test\n", "    public void indirectBytesAreCoveredTest01() throws IOException {\n", "        String inPdf = sourceFolder + \"indirectBytesAreCoveredTest01.pdf\";\n", "        PdfDocument pdfDocument = new PdfDocument(new PdfReader(inPdf));\n", "        SignatureUtil signatureUtil = new SignatureUtil(pdfDocument);\n", "\n", "        Assert.assertTrue(signatureUtil.signatureCoversWholeDocument(\"Signature1\"));\n", "    }\n", "\n", "    @Test\n", "    public void commentsBytesAreCoveredTest01() throws IOException {\n", "        String inPdf = sourceFolder + \"commentsBytesAreCoveredTest01.pdf\";\n", "        PdfDocument pdfDocument = new PdfDocument(new PdfReader(inPdf));\n", "        SignatureUtil signatureUtil = new SignatureUtil(pdfDocument);\n", "\n", "        Assert.assertTrue(signatureUtil.signatureCoversWholeDocument(\"Signature1\"));\n", "    }\n", "\n", "    @Test\n", "    public void commentsBytesAreNotCoveredTest01() throws IOException {\n", "        String inPdf = sourceFolder + \"commentsBytesAreNotCoveredTest01.pdf\";\n", "        PdfDocument pdfDocument = new PdfDocument(new PdfReader(inPdf));\n", "        SignatureUtil signatureUtil = new SignatureUtil(pdfDocument);\n", "\n", "        Assert.assertFalse(signatureUtil.signatureCoversWholeDocument(\"Signature1\"));\n", "    }\n", "\n", "    @Test\n", "    public void indirectBytesAreCoveredTest02() throws IOException {\n", "        String inPdf = sourceFolder + \"indirectBytesAreCoveredTest02.pdf\";\n", "        PdfDocument pdfDocument = new PdfDocument(new PdfReader(inPdf));\n", "        SignatureUtil signatureUtil = new SignatureUtil(pdfDocument);\n", "\n", "        Assert.assertTrue(signatureUtil.signatureCoversWholeDocument(\"Signature1\"));\n", "    }\n", "\n", "    @Test\n", "    public void indirectBytesAreNotCoveredTest01() throws IOException {\n", "        String inPdf = sourceFolder + \"indirectBytesAreNotCoveredTest01.pdf\";\n", "        PdfDocument pdfDocument = new PdfDocument(new PdfReader(inPdf));\n", "        SignatureUtil signatureUtil = new SignatureUtil(pdfDocument);\n", "\n", "        Assert.assertFalse(signatureUtil.signatureCoversWholeDocument(\"Signature1\"));\n", "    }\n", "\n", "\n", "    @Test\n", "    public void twoContentsTest01() throws IOException {\n", "        String inPdf = sourceFolder + \"twoContentsTest01.pdf\";\n", "        PdfDocument pdfDocument = new PdfDocument(new PdfReader(inPdf));\n", "        SignatureUtil signatureUtil = new SignatureUtil(pdfDocument);\n", "\n", "        Assert.assertFalse(signatureUtil.signatureCoversWholeDocument(\"Signature1\"));\n", "    }\n", "\n", "    @Test\n", "    public void spacesBeforeContentsTest01() throws IOException {\n", "        String inPdf = sourceFolder + \"spacesBeforeContentsTest01.pdf\";\n", "        PdfDocument pdfDocument = new PdfDocument(new PdfReader(inPdf));\n", "        SignatureUtil signatureUtil = new SignatureUtil(pdfDocument);\n", "\n", "        Assert.assertFalse(signatureUtil.signatureCoversWholeDocument(\"Signature1\"));\n", "    }\n", "\n", "    @Test\n", "    public void notIndirectSigDictionaryTest() throws IOException {\n", "        String inPdf = sourceFolder + \"notIndirectSigDictionaryTest.pdf\";\n", "        PdfDocument pdfDocument = new PdfDocument(new PdfReader(inPdf));\n", "        SignatureUtil signatureUtil = new SignatureUtil(pdfDocument);\n", "\n", "        Assert.assertTrue(signatureUtil.signatureCoversWholeDocument(\"Signature1\"));\n", "    }\n", "\n", "    @Test\n", "    public void emptySignatureReadSignatureDataTest() throws IOException {\n", "        String inPdf = sourceFolder + \"emptySignature.pdf\";\n", "        PdfDocument pdfDocument = new PdfDocument(new PdfReader(inPdf));\n", "        SignatureUtil signatureUtil = new SignatureUtil(pdfDocument);\n", "\n", "        Assert.assertNull(signatureUtil.readSignatureData(\"Signature1\", null));\n", "    }\n", "\n", "    @Test\n", "    public void readSignatureDataTest() throws IOException {\n", "        String inPdf = sourceFolder + \"simpleSignature.pdf\";\n", "        PdfDocument pdfDocument = new PdfDocument(new PdfReader(inPdf));\n", "        SignatureUtil signatureUtil = new SignatureUtil(pdfDocument);\n", "\n", "        PdfPKCS7 pkcs7 = signatureUtil.readSignatureData(\"Signature1\");\n", "        Assert.assertNotNull(pkcs7);\n", "        Assert.assertEquals(\"Test 1\", pkcs7.getReason());\n", "        Assert.assertNull(pkcs7.getSignName());\n", "        Assert.assertEquals(\"TestCity\", pkcs7.getLocation());\n", "        // The number corresponds to 18 May, 2021 17:23:59.\n", "        double expectedMillis = (double) 1621347839000L;\n", "        Assert.assertEquals(\n", "                TimeTestUtil.getFullDaysMillis(expectedMillis),\n", "                TimeTestUtil.getFullDaysMillis(DateTimeUtil.getUtcMillisFromEpoch(pkcs7.getSignDate())),\n", "                EPS);\n", "    }\n", "\n", "    @Test\n", "    public void readSignatureDataWithSpecialSubFilterTest() throws IOException {\n", "        String inPdf = sourceFolder + \"adbe.x509.rsa_sha1_signature.pdf\";\n", "        PdfDocument pdfDocument = new PdfDocument(new PdfReader(inPdf));\n", "        SignatureUtil signatureUtil = new SignatureUtil(pdfDocument);\n", "\n", "        PdfPKCS7 pkcs7 = signatureUtil.readSignatureData(\"Signature1\");\n", "        Assert.assertNotNull(pkcs7);\n", "        Assert.assertNotNull(pkcs7);\n", "        Assert.assertEquals(\"Test\", pkcs7.getReason());\n", "        Assert.assertNull(pkcs7.getSignName());\n", "        Assert.assertEquals(\"TestCity\", pkcs7.getLocation());\n", "        // The number corresponds to 18 May, 2021 11:28:40.\n", "        double expectedMillis = (double) 1621326520000L;\n", "        Assert.assertEquals(\n", "                TimeTestUtil.getFullDaysMillis(expectedMillis),\n", "                TimeTestUtil.getFullDaysMillis(DateTimeUtil.getUtcMillisFromEpoch(pkcs7.getSignDate())),\n", "                EPS);\n", "    }\n", "\n", "    @Test\n", "    public void byteRangeAndContentsEntriesTest() throws IOException {\n", "        String inPdf = sourceFolder + \"byteRangeAndContentsEntries.pdf\";\n", "        PdfDocument pdfDocument = new PdfDocument(new PdfReader(inPdf));\n", "        SignatureUtil signatureUtil = new SignatureUtil(pdfDocument);\n", "\n", "        Assert.assertThrows(PdfException.class,\n", "                () -> signatureUtil.readSignatureData(\"Signature1\"));\n", "    }\n", "\n", "    @Test\n", "    public void doesSignatureFieldExistTest() throws IOException {\n", "        String inPdf = sourceFolder + \"simpleSignature.pdf\";\n", "        PdfDocument pdfDocument = new PdfDocument(new PdfReader(inPdf));\n", "        SignatureUtil signatureUtil = new SignatureUtil(pdfDocument);\n", "\n", "        Assert.assertTrue(signatureUtil.doesSignatureFieldExist(\"Signature1\"));\n", "    }\n", "\n", "    @Test\n", "    public void doesSignatureFieldExistEmptySignatureTest() throws IOException {\n", "        String inPdf = sourceFolder + \"emptySignature.pdf\";\n", "        PdfDocument pdfDocument = new PdfDocument(new PdfReader(inPdf));\n", "        SignatureUtil signatureUtil = new SignatureUtil(pdfDocument);\n", "\n", "        Assert.assertTrue(signatureUtil.doesSignatureFieldExist(\"Signature1\"));\n", "    }\n", "\n", "    @Test\n", "    public void signatureInTextTypeFieldTest() throws IOException {\n", "        String inPdf = sourceFolder + \"signatureInTextTypeField.pdf\";\n", "        PdfDocument pdfDocument = new PdfDocument(new PdfReader(inPdf));\n", "        SignatureUtil signatureUtil = new SignatureUtil(pdfDocument);\n", "\n", "        Assert.assertFalse(signatureUtil.doesSignatureFieldExist(\"Signature1\"));\n", "    }\n", "\n", "    @Test\n", "    public void getTotalRevisionsTest() throws IOException {\n", "        String inPdf = sourceFolder + \"simpleSignature.pdf\";\n", "        PdfDocument pdfDocument = new PdfDocument(new PdfReader(inPdf));\n", "        SignatureUtil signatureUtil = new SignatureUtil(pdfDocument);\n", "\n", "        Assert.assertEquals(1, signatureUtil.getTotalRevisions());\n", "    }\n", "\n", "    @Test\n", "    public void getRevisionTest() throws IOException {\n", "        String inPdf = sourceFolder + \"simpleSignature.pdf\";\n", "        PdfDocument pdfDocument = new PdfDocument(new PdfReader(inPdf));\n", "        SignatureUtil signatureUtil = new SignatureUtil(pdfDocument);\n", "\n", "        Assert.assertEquals(1, signatureUtil.getRevision(\"Signature1\"));\n", "    }\n", "\n", "    @Test\n", "    public void getRevisionEmptyFieldsTest() throws IOException {\n", "        String inPdf = sourceFolder + \"emptySignature.pdf\";\n", "        PdfDocument pdfDocument = new PdfDocument(new PdfReader(inPdf));\n", "        SignatureUtil signatureUtil = new SignatureUtil(pdfDocument);\n", "\n", "        Assert.assertEquals(0, signatureUtil.getRevision(\"Signature1\"));\n", "    }\n", "\n", "    @Test\n", "    public void getRevisionXfaFormTest() throws IOException {\n", "        String inPdf = sourceFolder + \"simpleSignatureWithXfa.pdf\";\n", "        PdfDocument pdfDocument = new PdfDocument(new PdfReader(inPdf));\n", "        SignatureUtil signatureUtil = new SignatureUtil(pdfDocument);\n", "\n", "        Assert.assertEquals(1, signatureUtil.getRevision(\"Signature1\"));\n", "    }\n", "\n", "    @Test\n", "    public void extractRevisionTest() throws IOException {\n", "        String inPdf = sourceFolder + \"simpleSignature.pdf\";\n", "        PdfDocument pdfDocument = new PdfDocument(new PdfReader(inPdf));\n", "        SignatureUtil signatureUtil = new SignatureUtil(pdfDocument);\n", "\n", "        Assert.assertNotNull(signatureUtil.extractRevision(\"Signature1\"));\n", "    }\n", "\n", "    @Test\n", "    public void extractRevisionNotSignatureFieldTest() throws IOException {\n", "        String inPdf = sourceFolder + \"signatureInTextTypeField.pdf\";\n", "        PdfDocument pdfDocument = new PdfDocument(new PdfReader(inPdf));\n", "        SignatureUtil signatureUtil = new SignatureUtil(pdfDocument);\n", "\n", "        Assert.assertNull(signatureUtil.extractRevision(\"Signature1\"));\n", "    }\n", "}\n"], "method_lines_dic": {"SignatureUtil::::readSignatureData(java.lang.String)": [97, 99], "SignatureUtil::::readSignatureData(java.lang.String,java.lang.String)": [118, 156], "SignatureUtil::::getSignature(java.lang.String)": [165, 170], "SignatureUtil::::getSignatureDictionary(java.lang.String)": [179, 182], "SignatureUtil::::getSignatureFormFieldDictionary(java.lang.String)": [184, 191], "SignatureUtil::::updateByteRange(com.itextpdf.signatures.PdfPKCS7,com.itextpdf.signatures.PdfSignature)": [194, 216], "SignatureUtil::::getSignatureNames()": [223, 232], "SignatureUtil::::getBlankSignatureNames()": [239, 256], "SignatureUtil::::getTotalRevisions()": [263, 266], "SignatureUtil::::getRevision(java.lang.String)": [275, 282], "SignatureUtil::::getTranslatedFieldName(java.lang.String)": [291, 298], "SignatureUtil::::extractRevision(java.lang.String)": [306, 314], "SignatureUtil::::signatureCoversWholeDocument(java.lang.String)": [326, 338], "SignatureUtil::::doesSignatureFieldExist(java.lang.String)": [346, 348], "SignatureUtil::::populateSignatureNames()": [350, 397], "SignatureUtil.SorterComparator::::compare(java.lang.Object[],java.lang.Object[])": [400, 405], "SignatureUtil.ContentsChecker::::readDictionary(boolean)": [460, 520], "SignatureUtil.ContentsChecker::::countDigits(int)": [522, 534]}, "test_method_lines_dic": {"SignatureUtilTest::::before()": [51, 54], "SignatureUtilTest::::getSignaturesTest01()": [56, 65], "SignatureUtilTest::::getSignaturesTest02()": [67, 75], "SignatureUtilTest::::firstBytesNotCoveredTest01()": [77, 84], "SignatureUtilTest::::lastBytesNotCoveredTest01()": [86, 93], "SignatureUtilTest::::lastBytesNotCoveredTest02()": [95, 102], "SignatureUtilTest::::exclusionSmallerThenContentsTest01()": [104, 111], "SignatureUtilTest::::bytesAreCoveredTest01()": [113, 120], "SignatureUtilTest::::bytesAreCoveredTest02()": [122, 129], "SignatureUtilTest::::indirectBytesAreCoveredTest01()": [131, 138], "SignatureUtilTest::::commentsBytesAreCoveredTest01()": [140, 147], "SignatureUtilTest::::commentsBytesAreNotCoveredTest01()": [149, 156], "SignatureUtilTest::::indirectBytesAreCoveredTest02()": [158, 165], "SignatureUtilTest::::indirectBytesAreNotCoveredTest01()": [167, 174], "SignatureUtilTest::::twoContentsTest01()": [177, 184], "SignatureUtilTest::::spacesBeforeContentsTest01()": [186, 193], "SignatureUtilTest::::notIndirectSigDictionaryTest()": [195, 202], "SignatureUtilTest::::emptySignatureReadSignatureDataTest()": [204, 211], "SignatureUtilTest::::readSignatureDataTest()": [213, 230], "SignatureUtilTest::::readSignatureDataWithSpecialSubFilterTest()": [232, 250], "SignatureUtilTest::::byteRangeAndContentsEntriesTest()": [252, 260], "SignatureUtilTest::::doesSignatureFieldExistTest()": [262, 269], "SignatureUtilTest::::doesSignatureFieldExistEmptySignatureTest()": [271, 278], "SignatureUtilTest::::signatureInTextTypeFieldTest()": [280, 287], "SignatureUtilTest::::getTotalRevisionsTest()": [289, 296], "SignatureUtilTest::::getRevisionTest()": [298, 305], "SignatureUtilTest::::getRevisionEmptyFieldsTest()": [307, 314], "SignatureUtilTest::::getRevisionXfaFormTest()": [316, 323], "SignatureUtilTest::::extractRevisionTest()": [325, 332], "SignatureUtilTest::::extractRevisionNotSignatureFieldTest()": [334, 341]}, "reverse_method_lines_dic": {"97": "SignatureUtil::::readSignatureData(java.lang.String)", "98": "SignatureUtil::::readSignatureData(java.lang.String)", "99": "SignatureUtil::::readSignatureData(java.lang.String)", "118": "SignatureUtil::::readSignatureData(java.lang.String,java.lang.String)", "119": "SignatureUtil::::readSignatureData(java.lang.String,java.lang.String)", "120": "SignatureUtil::::readSignatureData(java.lang.String,java.lang.String)", "121": "SignatureUtil::::readSignatureData(java.lang.String,java.lang.String)", "122": "SignatureUtil::::readSignatureData(java.lang.String,java.lang.String)", "123": "SignatureUtil::::readSignatureData(java.lang.String,java.lang.String)", "124": "SignatureUtil::::readSignatureData(java.lang.String,java.lang.String)", "125": "SignatureUtil::::readSignatureData(java.lang.String,java.lang.String)", "126": "SignatureUtil::::readSignatureData(java.lang.String,java.lang.String)", "127": "SignatureUtil::::readSignatureData(java.lang.String,java.lang.String)", "128": "SignatureUtil::::readSignatureData(java.lang.String,java.lang.String)", "129": "SignatureUtil::::readSignatureData(java.lang.String,java.lang.String)", "130": "SignatureUtil::::readSignatureData(java.lang.String,java.lang.String)", "131": "SignatureUtil::::readSignatureData(java.lang.String,java.lang.String)", "132": "SignatureUtil::::readSignatureData(java.lang.String,java.lang.String)", "133": "SignatureUtil::::readSignatureData(java.lang.String,java.lang.String)", "134": "SignatureUtil::::readSignatureData(java.lang.String,java.lang.String)", "135": "SignatureUtil::::readSignatureData(java.lang.String,java.lang.String)", "136": "SignatureUtil::::readSignatureData(java.lang.String,java.lang.String)", "137": "SignatureUtil::::readSignatureData(java.lang.String,java.lang.String)", "138": "SignatureUtil::::readSignatureData(java.lang.String,java.lang.String)", "139": "SignatureUtil::::readSignatureData(java.lang.String,java.lang.String)", "140": "SignatureUtil::::readSignatureData(java.lang.String,java.lang.String)", "141": "SignatureUtil::::readSignatureData(java.lang.String,java.lang.String)", "142": "SignatureUtil::::readSignatureData(java.lang.String,java.lang.String)", "143": "SignatureUtil::::readSignatureData(java.lang.String,java.lang.String)", "144": "SignatureUtil::::readSignatureData(java.lang.String,java.lang.String)", "145": "SignatureUtil::::readSignatureData(java.lang.String,java.lang.String)", "146": "SignatureUtil::::readSignatureData(java.lang.String,java.lang.String)", "147": "SignatureUtil::::readSignatureData(java.lang.String,java.lang.String)", "148": "SignatureUtil::::readSignatureData(java.lang.String,java.lang.String)", "149": "SignatureUtil::::readSignatureData(java.lang.String,java.lang.String)", "150": "SignatureUtil::::readSignatureData(java.lang.String,java.lang.String)", "151": "SignatureUtil::::readSignatureData(java.lang.String,java.lang.String)", "152": "SignatureUtil::::readSignatureData(java.lang.String,java.lang.String)", "153": "SignatureUtil::::readSignatureData(java.lang.String,java.lang.String)", "154": "SignatureUtil::::readSignatureData(java.lang.String,java.lang.String)", "155": "SignatureUtil::::readSignatureData(java.lang.String,java.lang.String)", "156": "SignatureUtil::::readSignatureData(java.lang.String,java.lang.String)", "165": "SignatureUtil::::getSignature(java.lang.String)", "166": "SignatureUtil::::getSignature(java.lang.String)", "167": "SignatureUtil::::getSignature(java.lang.String)", "168": "SignatureUtil::::getSignature(java.lang.String)", "169": "SignatureUtil::::getSignature(java.lang.String)", "170": "SignatureUtil::::getSignature(java.lang.String)", "179": "SignatureUtil::::getSignatureDictionary(java.lang.String)", "180": "SignatureUtil::::getSignatureDictionary(java.lang.String)", "181": "SignatureUtil::::getSignatureDictionary(java.lang.String)", "182": "SignatureUtil::::getSignatureDictionary(java.lang.String)", "184": "SignatureUtil::::getSignatureFormFieldDictionary(java.lang.String)", "185": "SignatureUtil::::getSignatureFormFieldDictionary(java.lang.String)", "186": "SignatureUtil::::getSignatureFormFieldDictionary(java.lang.String)", "187": "SignatureUtil::::getSignatureFormFieldDictionary(java.lang.String)", "188": "SignatureUtil::::getSignatureFormFieldDictionary(java.lang.String)", "189": "SignatureUtil::::getSignatureFormFieldDictionary(java.lang.String)", "190": "SignatureUtil::::getSignatureFormFieldDictionary(java.lang.String)", "191": "SignatureUtil::::getSignatureFormFieldDictionary(java.lang.String)", "194": "SignatureUtil::::updateByteRange(com.itextpdf.signatures.PdfPKCS7,com.itextpdf.signatures.PdfSignature)", "195": "SignatureUtil::::updateByteRange(com.itextpdf.signatures.PdfPKCS7,com.itextpdf.signatures.PdfSignature)", "196": "SignatureUtil::::updateByteRange(com.itextpdf.signatures.PdfPKCS7,com.itextpdf.signatures.PdfSignature)", "197": "SignatureUtil::::updateByteRange(com.itextpdf.signatures.PdfPKCS7,com.itextpdf.signatures.PdfSignature)", "198": "SignatureUtil::::updateByteRange(com.itextpdf.signatures.PdfPKCS7,com.itextpdf.signatures.PdfSignature)", "199": "SignatureUtil::::updateByteRange(com.itextpdf.signatures.PdfPKCS7,com.itextpdf.signatures.PdfSignature)", "200": "SignatureUtil::::updateByteRange(com.itextpdf.signatures.PdfPKCS7,com.itextpdf.signatures.PdfSignature)", "201": "SignatureUtil::::updateByteRange(com.itextpdf.signatures.PdfPKCS7,com.itextpdf.signatures.PdfSignature)", "202": "SignatureUtil::::updateByteRange(com.itextpdf.signatures.PdfPKCS7,com.itextpdf.signatures.PdfSignature)", "203": "SignatureUtil::::updateByteRange(com.itextpdf.signatures.PdfPKCS7,com.itextpdf.signatures.PdfSignature)", "204": "SignatureUtil::::updateByteRange(com.itextpdf.signatures.PdfPKCS7,com.itextpdf.signatures.PdfSignature)", "205": "SignatureUtil::::updateByteRange(com.itextpdf.signatures.PdfPKCS7,com.itextpdf.signatures.PdfSignature)", "206": "SignatureUtil::::updateByteRange(com.itextpdf.signatures.PdfPKCS7,com.itextpdf.signatures.PdfSignature)", "207": "SignatureUtil::::updateByteRange(com.itextpdf.signatures.PdfPKCS7,com.itextpdf.signatures.PdfSignature)", "208": "SignatureUtil::::updateByteRange(com.itextpdf.signatures.PdfPKCS7,com.itextpdf.signatures.PdfSignature)", "209": "SignatureUtil::::updateByteRange(com.itextpdf.signatures.PdfPKCS7,com.itextpdf.signatures.PdfSignature)", "210": "SignatureUtil::::updateByteRange(com.itextpdf.signatures.PdfPKCS7,com.itextpdf.signatures.PdfSignature)", "211": "SignatureUtil::::updateByteRange(com.itextpdf.signatures.PdfPKCS7,com.itextpdf.signatures.PdfSignature)", "212": "SignatureUtil::::updateByteRange(com.itextpdf.signatures.PdfPKCS7,com.itextpdf.signatures.PdfSignature)", "213": "SignatureUtil::::updateByteRange(com.itextpdf.signatures.PdfPKCS7,com.itextpdf.signatures.PdfSignature)", "214": "SignatureUtil::::updateByteRange(com.itextpdf.signatures.PdfPKCS7,com.itextpdf.signatures.PdfSignature)", "215": "SignatureUtil::::updateByteRange(com.itextpdf.signatures.PdfPKCS7,com.itextpdf.signatures.PdfSignature)", "216": "SignatureUtil::::updateByteRange(com.itextpdf.signatures.PdfPKCS7,com.itextpdf.signatures.PdfSignature)", "223": "SignatureUtil::::getSignatureNames()", "224": "SignatureUtil::::getSignatureNames()", "225": "SignatureUtil::::getSignatureNames()", "226": "SignatureUtil::::getSignatureNames()", "227": "SignatureUtil::::getSignatureNames()", "228": "SignatureUtil::::getSignatureNames()", "229": "SignatureUtil::::getSignatureNames()", "230": "SignatureUtil::::getSignatureNames()", "231": "SignatureUtil::::getSignatureNames()", "232": "SignatureUtil::::getSignatureNames()", "239": "SignatureUtil::::getBlankSignatureNames()", "240": "SignatureUtil::::getBlankSignatureNames()", "241": "SignatureUtil::::getBlankSignatureNames()", "242": "SignatureUtil::::getBlankSignatureNames()", "243": "SignatureUtil::::getBlankSignatureNames()", "244": "SignatureUtil::::getBlankSignatureNames()", "245": "SignatureUtil::::getBlankSignatureNames()", "246": "SignatureUtil::::getBlankSignatureNames()", "247": "SignatureUtil::::getBlankSignatureNames()", "248": "SignatureUtil::::getBlankSignatureNames()", "249": "SignatureUtil::::getBlankSignatureNames()", "250": "SignatureUtil::::getBlankSignatureNames()", "251": "SignatureUtil::::getBlankSignatureNames()", "252": "SignatureUtil::::getBlankSignatureNames()", "253": "SignatureUtil::::getBlankSignatureNames()", "254": "SignatureUtil::::getBlankSignatureNames()", "255": "SignatureUtil::::getBlankSignatureNames()", "256": "SignatureUtil::::getBlankSignatureNames()", "263": "SignatureUtil::::getTotalRevisions()", "264": "SignatureUtil::::getTotalRevisions()", "265": "SignatureUtil::::getTotalRevisions()", "266": "SignatureUtil::::getTotalRevisions()", "275": "SignatureUtil::::getRevision(java.lang.String)", "276": "SignatureUtil::::getRevision(java.lang.String)", "277": "SignatureUtil::::getRevision(java.lang.String)", "278": "SignatureUtil::::getRevision(java.lang.String)", "279": "SignatureUtil::::getRevision(java.lang.String)", "280": "SignatureUtil::::getRevision(java.lang.String)", "281": "SignatureUtil::::getRevision(java.lang.String)", "282": "SignatureUtil::::getRevision(java.lang.String)", "291": "SignatureUtil::::getTranslatedFieldName(java.lang.String)", "292": "SignatureUtil::::getTranslatedFieldName(java.lang.String)", "293": "SignatureUtil::::getTranslatedFieldName(java.lang.String)", "294": "SignatureUtil::::getTranslatedFieldName(java.lang.String)", "295": "SignatureUtil::::getTranslatedFieldName(java.lang.String)", "296": "SignatureUtil::::getTranslatedFieldName(java.lang.String)", "297": "SignatureUtil::::getTranslatedFieldName(java.lang.String)", "298": "SignatureUtil::::getTranslatedFieldName(java.lang.String)", "306": "SignatureUtil::::extractRevision(java.lang.String)", "307": "SignatureUtil::::extractRevision(java.lang.String)", "308": "SignatureUtil::::extractRevision(java.lang.String)", "309": "SignatureUtil::::extractRevision(java.lang.String)", "310": "SignatureUtil::::extractRevision(java.lang.String)", "311": "SignatureUtil::::extractRevision(java.lang.String)", "312": "SignatureUtil::::extractRevision(java.lang.String)", "313": "SignatureUtil::::extractRevision(java.lang.String)", "314": "SignatureUtil::::extractRevision(java.lang.String)", "326": "SignatureUtil::::signatureCoversWholeDocument(java.lang.String)", "327": "SignatureUtil::::signatureCoversWholeDocument(java.lang.String)", "328": "SignatureUtil::::signatureCoversWholeDocument(java.lang.String)", "329": "SignatureUtil::::signatureCoversWholeDocument(java.lang.String)", "330": "SignatureUtil::::signatureCoversWholeDocument(java.lang.String)", "331": "SignatureUtil::::signatureCoversWholeDocument(java.lang.String)", "332": "SignatureUtil::::signatureCoversWholeDocument(java.lang.String)", "333": "SignatureUtil::::signatureCoversWholeDocument(java.lang.String)", "334": "SignatureUtil::::signatureCoversWholeDocument(java.lang.String)", "335": "SignatureUtil::::signatureCoversWholeDocument(java.lang.String)", "336": "SignatureUtil::::signatureCoversWholeDocument(java.lang.String)", "337": "SignatureUtil::::signatureCoversWholeDocument(java.lang.String)", "338": "SignatureUtil::::signatureCoversWholeDocument(java.lang.String)", "346": "SignatureUtil::::doesSignatureFieldExist(java.lang.String)", "347": "SignatureUtil::::doesSignatureFieldExist(java.lang.String)", "348": "SignatureUtil::::doesSignatureFieldExist(java.lang.String)", "350": "SignatureUtil::::populateSignatureNames()", "351": "SignatureUtil::::populateSignatureNames()", "352": "SignatureUtil::::populateSignatureNames()", "353": "SignatureUtil::::populateSignatureNames()", "354": "SignatureUtil::::populateSignatureNames()", "355": "SignatureUtil::::populateSignatureNames()", "356": "SignatureUtil::::populateSignatureNames()", "357": "SignatureUtil::::populateSignatureNames()", "358": "SignatureUtil::::populateSignatureNames()", "359": "SignatureUtil::::populateSignatureNames()", "360": "SignatureUtil::::populateSignatureNames()", "361": "SignatureUtil::::populateSignatureNames()", "362": "SignatureUtil::::populateSignatureNames()", "363": "SignatureUtil::::populateSignatureNames()", "364": "SignatureUtil::::populateSignatureNames()", "365": "SignatureUtil::::populateSignatureNames()", "366": "SignatureUtil::::populateSignatureNames()", "367": "SignatureUtil::::populateSignatureNames()", "368": "SignatureUtil::::populateSignatureNames()", "369": "SignatureUtil::::populateSignatureNames()", "370": "SignatureUtil::::populateSignatureNames()", "371": "SignatureUtil::::populateSignatureNames()", "372": "SignatureUtil::::populateSignatureNames()", "373": "SignatureUtil::::populateSignatureNames()", "374": "SignatureUtil::::populateSignatureNames()", "375": "SignatureUtil::::populateSignatureNames()", "376": "SignatureUtil::::populateSignatureNames()", "377": "SignatureUtil::::populateSignatureNames()", "378": "SignatureUtil::::populateSignatureNames()", "379": "SignatureUtil::::populateSignatureNames()", "380": "SignatureUtil::::populateSignatureNames()", "381": "SignatureUtil::::populateSignatureNames()", "382": "SignatureUtil::::populateSignatureNames()", "383": "SignatureUtil::::populateSignatureNames()", "384": "SignatureUtil::::populateSignatureNames()", "385": "SignatureUtil::::populateSignatureNames()", "386": "SignatureUtil::::populateSignatureNames()", "387": "SignatureUtil::::populateSignatureNames()", "388": "SignatureUtil::::populateSignatureNames()", "389": "SignatureUtil::::populateSignatureNames()", "390": "SignatureUtil::::populateSignatureNames()", "391": "SignatureUtil::::populateSignatureNames()", "392": "SignatureUtil::::populateSignatureNames()", "393": "SignatureUtil::::populateSignatureNames()", "394": "SignatureUtil::::populateSignatureNames()", "395": "SignatureUtil::::populateSignatureNames()", "396": "SignatureUtil::::populateSignatureNames()", "397": "SignatureUtil::::populateSignatureNames()", "400": "SignatureUtil.SorterComparator::::compare(java.lang.Object[],java.lang.Object[])", "401": "SignatureUtil.SorterComparator::::compare(java.lang.Object[],java.lang.Object[])", "402": "SignatureUtil.SorterComparator::::compare(java.lang.Object[],java.lang.Object[])", "403": "SignatureUtil.SorterComparator::::compare(java.lang.Object[],java.lang.Object[])", "404": "SignatureUtil.SorterComparator::::compare(java.lang.Object[],java.lang.Object[])", "405": "SignatureUtil.SorterComparator::::compare(java.lang.Object[],java.lang.Object[])", "460": "SignatureUtil.ContentsChecker::::readDictionary(boolean)", "461": "SignatureUtil.ContentsChecker::::readDictionary(boolean)", "462": "SignatureUtil.ContentsChecker::::readDictionary(boolean)", "463": "SignatureUtil.ContentsChecker::::readDictionary(boolean)", "464": "SignatureUtil.ContentsChecker::::readDictionary(boolean)", "465": "SignatureUtil.ContentsChecker::::readDictionary(boolean)", "466": "SignatureUtil.ContentsChecker::::readDictionary(boolean)", "467": "SignatureUtil.ContentsChecker::::readDictionary(boolean)", "468": "SignatureUtil.ContentsChecker::::readDictionary(boolean)", "469": "SignatureUtil.ContentsChecker::::readDictionary(boolean)", "470": "SignatureUtil.ContentsChecker::::readDictionary(boolean)", "471": "SignatureUtil.ContentsChecker::::readDictionary(boolean)", "472": "SignatureUtil.ContentsChecker::::readDictionary(boolean)", "473": "SignatureUtil.ContentsChecker::::readDictionary(boolean)", "474": "SignatureUtil.ContentsChecker::::readDictionary(boolean)", "475": "SignatureUtil.ContentsChecker::::readDictionary(boolean)", "476": "SignatureUtil.ContentsChecker::::readDictionary(boolean)", "477": "SignatureUtil.ContentsChecker::::readDictionary(boolean)", "478": "SignatureUtil.ContentsChecker::::readDictionary(boolean)", "479": "SignatureUtil.ContentsChecker::::readDictionary(boolean)", "480": "SignatureUtil.ContentsChecker::::readDictionary(boolean)", "481": "SignatureUtil.ContentsChecker::::readDictionary(boolean)", "482": "SignatureUtil.ContentsChecker::::readDictionary(boolean)", "483": "SignatureUtil.ContentsChecker::::readDictionary(boolean)", "484": "SignatureUtil.ContentsChecker::::readDictionary(boolean)", "485": "SignatureUtil.ContentsChecker::::readDictionary(boolean)", "486": "SignatureUtil.ContentsChecker::::readDictionary(boolean)", "487": "SignatureUtil.ContentsChecker::::readDictionary(boolean)", "488": "SignatureUtil.ContentsChecker::::readDictionary(boolean)", "489": "SignatureUtil.ContentsChecker::::readDictionary(boolean)", "490": "SignatureUtil.ContentsChecker::::readDictionary(boolean)", "491": "SignatureUtil.ContentsChecker::::readDictionary(boolean)", "492": "SignatureUtil.ContentsChecker::::readDictionary(boolean)", "493": "SignatureUtil.ContentsChecker::::readDictionary(boolean)", "494": "SignatureUtil.ContentsChecker::::readDictionary(boolean)", "495": "SignatureUtil.ContentsChecker::::readDictionary(boolean)", "496": "SignatureUtil.ContentsChecker::::readDictionary(boolean)", "497": "SignatureUtil.ContentsChecker::::readDictionary(boolean)", "498": "SignatureUtil.ContentsChecker::::readDictionary(boolean)", "499": "SignatureUtil.ContentsChecker::::readDictionary(boolean)", "500": "SignatureUtil.ContentsChecker::::readDictionary(boolean)", "501": "SignatureUtil.ContentsChecker::::readDictionary(boolean)", "502": "SignatureUtil.ContentsChecker::::readDictionary(boolean)", "503": "SignatureUtil.ContentsChecker::::readDictionary(boolean)", "504": "SignatureUtil.ContentsChecker::::readDictionary(boolean)", "505": "SignatureUtil.ContentsChecker::::readDictionary(boolean)", "506": "SignatureUtil.ContentsChecker::::readDictionary(boolean)", "507": "SignatureUtil.ContentsChecker::::readDictionary(boolean)", "508": "SignatureUtil.ContentsChecker::::readDictionary(boolean)", "509": "SignatureUtil.ContentsChecker::::readDictionary(boolean)", "510": "SignatureUtil.ContentsChecker::::readDictionary(boolean)", "511": "SignatureUtil.ContentsChecker::::readDictionary(boolean)", "512": "SignatureUtil.ContentsChecker::::readDictionary(boolean)", "513": "SignatureUtil.ContentsChecker::::readDictionary(boolean)", "514": "SignatureUtil.ContentsChecker::::readDictionary(boolean)", "515": "SignatureUtil.ContentsChecker::::readDictionary(boolean)", "516": "SignatureUtil.ContentsChecker::::readDictionary(boolean)", "517": "SignatureUtil.ContentsChecker::::readDictionary(boolean)", "518": "SignatureUtil.ContentsChecker::::readDictionary(boolean)", "519": "SignatureUtil.ContentsChecker::::readDictionary(boolean)", "520": "SignatureUtil.ContentsChecker::::readDictionary(boolean)", "522": "SignatureUtil.ContentsChecker::::countDigits(int)", "523": "SignatureUtil.ContentsChecker::::countDigits(int)", "524": "SignatureUtil.ContentsChecker::::countDigits(int)", "525": "SignatureUtil.ContentsChecker::::countDigits(int)", "526": "SignatureUtil.ContentsChecker::::countDigits(int)", "527": "SignatureUtil.ContentsChecker::::countDigits(int)", "528": "SignatureUtil.ContentsChecker::::countDigits(int)", "529": "SignatureUtil.ContentsChecker::::countDigits(int)", "530": "SignatureUtil.ContentsChecker::::countDigits(int)", "531": "SignatureUtil.ContentsChecker::::countDigits(int)", "532": "SignatureUtil.ContentsChecker::::countDigits(int)", "533": "SignatureUtil.ContentsChecker::::countDigits(int)", "534": "SignatureUtil.ContentsChecker::::countDigits(int)"}, "test_reverse_method_lines_dic": {"51": "SignatureUtilTest::::before()", "52": "SignatureUtilTest::::before()", "53": "SignatureUtilTest::::before()", "54": "SignatureUtilTest::::before()", "56": "SignatureUtilTest::::getSignaturesTest01()", "57": "SignatureUtilTest::::getSignaturesTest01()", "58": "SignatureUtilTest::::getSignaturesTest01()", "59": "SignatureUtilTest::::getSignaturesTest01()", "60": "SignatureUtilTest::::getSignaturesTest01()", "61": "SignatureUtilTest::::getSignaturesTest01()", "62": "SignatureUtilTest::::getSignaturesTest01()", "63": "SignatureUtilTest::::getSignaturesTest01()", "64": "SignatureUtilTest::::getSignaturesTest01()", "65": "SignatureUtilTest::::getSignaturesTest01()", "67": "SignatureUtilTest::::getSignaturesTest02()", "68": "SignatureUtilTest::::getSignaturesTest02()", "69": "SignatureUtilTest::::getSignaturesTest02()", "70": "SignatureUtilTest::::getSignaturesTest02()", "71": "SignatureUtilTest::::getSignaturesTest02()", "72": "SignatureUtilTest::::getSignaturesTest02()", "73": "SignatureUtilTest::::getSignaturesTest02()", "74": "SignatureUtilTest::::getSignaturesTest02()", "75": "SignatureUtilTest::::getSignaturesTest02()", "77": "SignatureUtilTest::::firstBytesNotCoveredTest01()", "78": "SignatureUtilTest::::firstBytesNotCoveredTest01()", "79": "SignatureUtilTest::::firstBytesNotCoveredTest01()", "80": "SignatureUtilTest::::firstBytesNotCoveredTest01()", "81": "SignatureUtilTest::::firstBytesNotCoveredTest01()", "82": "SignatureUtilTest::::firstBytesNotCoveredTest01()", "83": "SignatureUtilTest::::firstBytesNotCoveredTest01()", "84": "SignatureUtilTest::::firstBytesNotCoveredTest01()", "86": "SignatureUtilTest::::lastBytesNotCoveredTest01()", "87": "SignatureUtilTest::::lastBytesNotCoveredTest01()", "88": "SignatureUtilTest::::lastBytesNotCoveredTest01()", "89": "SignatureUtilTest::::lastBytesNotCoveredTest01()", "90": "SignatureUtilTest::::lastBytesNotCoveredTest01()", "91": "SignatureUtilTest::::lastBytesNotCoveredTest01()", "92": "SignatureUtilTest::::lastBytesNotCoveredTest01()", "93": "SignatureUtilTest::::lastBytesNotCoveredTest01()", "95": "SignatureUtilTest::::lastBytesNotCoveredTest02()", "96": "SignatureUtilTest::::lastBytesNotCoveredTest02()", "97": "SignatureUtilTest::::lastBytesNotCoveredTest02()", "98": "SignatureUtilTest::::lastBytesNotCoveredTest02()", "99": "SignatureUtilTest::::lastBytesNotCoveredTest02()", "100": "SignatureUtilTest::::lastBytesNotCoveredTest02()", "101": "SignatureUtilTest::::lastBytesNotCoveredTest02()", "102": "SignatureUtilTest::::lastBytesNotCoveredTest02()", "104": "SignatureUtilTest::::exclusionSmallerThenContentsTest01()", "105": "SignatureUtilTest::::exclusionSmallerThenContentsTest01()", "106": "SignatureUtilTest::::exclusionSmallerThenContentsTest01()", "107": "SignatureUtilTest::::exclusionSmallerThenContentsTest01()", "108": "SignatureUtilTest::::exclusionSmallerThenContentsTest01()", "109": "SignatureUtilTest::::exclusionSmallerThenContentsTest01()", "110": "SignatureUtilTest::::exclusionSmallerThenContentsTest01()", "111": "SignatureUtilTest::::exclusionSmallerThenContentsTest01()", "113": "SignatureUtilTest::::bytesAreCoveredTest01()", "114": "SignatureUtilTest::::bytesAreCoveredTest01()", "115": "SignatureUtilTest::::bytesAreCoveredTest01()", "116": "SignatureUtilTest::::bytesAreCoveredTest01()", "117": "SignatureUtilTest::::bytesAreCoveredTest01()", "118": "SignatureUtilTest::::bytesAreCoveredTest01()", "119": "SignatureUtilTest::::bytesAreCoveredTest01()", "120": "SignatureUtilTest::::bytesAreCoveredTest01()", "122": "SignatureUtilTest::::bytesAreCoveredTest02()", "123": "SignatureUtilTest::::bytesAreCoveredTest02()", "124": "SignatureUtilTest::::bytesAreCoveredTest02()", "125": "SignatureUtilTest::::bytesAreCoveredTest02()", "126": "SignatureUtilTest::::bytesAreCoveredTest02()", "127": "SignatureUtilTest::::bytesAreCoveredTest02()", "128": "SignatureUtilTest::::bytesAreCoveredTest02()", "129": "SignatureUtilTest::::bytesAreCoveredTest02()", "131": "SignatureUtilTest::::indirectBytesAreCoveredTest01()", "132": "SignatureUtilTest::::indirectBytesAreCoveredTest01()", "133": "SignatureUtilTest::::indirectBytesAreCoveredTest01()", "134": "SignatureUtilTest::::indirectBytesAreCoveredTest01()", "135": "SignatureUtilTest::::indirectBytesAreCoveredTest01()", "136": "SignatureUtilTest::::indirectBytesAreCoveredTest01()", "137": "SignatureUtilTest::::indirectBytesAreCoveredTest01()", "138": "SignatureUtilTest::::indirectBytesAreCoveredTest01()", "140": "SignatureUtilTest::::commentsBytesAreCoveredTest01()", "141": "SignatureUtilTest::::commentsBytesAreCoveredTest01()", "142": "SignatureUtilTest::::commentsBytesAreCoveredTest01()", "143": "SignatureUtilTest::::commentsBytesAreCoveredTest01()", "144": "SignatureUtilTest::::commentsBytesAreCoveredTest01()", "145": "SignatureUtilTest::::commentsBytesAreCoveredTest01()", "146": "SignatureUtilTest::::commentsBytesAreCoveredTest01()", "147": "SignatureUtilTest::::commentsBytesAreCoveredTest01()", "149": "SignatureUtilTest::::commentsBytesAreNotCoveredTest01()", "150": "SignatureUtilTest::::commentsBytesAreNotCoveredTest01()", "151": "SignatureUtilTest::::commentsBytesAreNotCoveredTest01()", "152": "SignatureUtilTest::::commentsBytesAreNotCoveredTest01()", "153": "SignatureUtilTest::::commentsBytesAreNotCoveredTest01()", "154": "SignatureUtilTest::::commentsBytesAreNotCoveredTest01()", "155": "SignatureUtilTest::::commentsBytesAreNotCoveredTest01()", "156": "SignatureUtilTest::::commentsBytesAreNotCoveredTest01()", "158": "SignatureUtilTest::::indirectBytesAreCoveredTest02()", "159": "SignatureUtilTest::::indirectBytesAreCoveredTest02()", "160": "SignatureUtilTest::::indirectBytesAreCoveredTest02()", "161": "SignatureUtilTest::::indirectBytesAreCoveredTest02()", "162": "SignatureUtilTest::::indirectBytesAreCoveredTest02()", "163": "SignatureUtilTest::::indirectBytesAreCoveredTest02()", "164": "SignatureUtilTest::::indirectBytesAreCoveredTest02()", "165": "SignatureUtilTest::::indirectBytesAreCoveredTest02()", "167": "SignatureUtilTest::::indirectBytesAreNotCoveredTest01()", "168": "SignatureUtilTest::::indirectBytesAreNotCoveredTest01()", "169": "SignatureUtilTest::::indirectBytesAreNotCoveredTest01()", "170": "SignatureUtilTest::::indirectBytesAreNotCoveredTest01()", "171": "SignatureUtilTest::::indirectBytesAreNotCoveredTest01()", "172": "SignatureUtilTest::::indirectBytesAreNotCoveredTest01()", "173": "SignatureUtilTest::::indirectBytesAreNotCoveredTest01()", "174": "SignatureUtilTest::::indirectBytesAreNotCoveredTest01()", "177": "SignatureUtilTest::::twoContentsTest01()", "178": "SignatureUtilTest::::twoContentsTest01()", "179": "SignatureUtilTest::::twoContentsTest01()", "180": "SignatureUtilTest::::twoContentsTest01()", "181": "SignatureUtilTest::::twoContentsTest01()", "182": "SignatureUtilTest::::twoContentsTest01()", "183": "SignatureUtilTest::::twoContentsTest01()", "184": "SignatureUtilTest::::twoContentsTest01()", "186": "SignatureUtilTest::::spacesBeforeContentsTest01()", "187": "SignatureUtilTest::::spacesBeforeContentsTest01()", "188": "SignatureUtilTest::::spacesBeforeContentsTest01()", "189": "SignatureUtilTest::::spacesBeforeContentsTest01()", "190": "SignatureUtilTest::::spacesBeforeContentsTest01()", "191": "SignatureUtilTest::::spacesBeforeContentsTest01()", "192": "SignatureUtilTest::::spacesBeforeContentsTest01()", "193": "SignatureUtilTest::::spacesBeforeContentsTest01()", "195": "SignatureUtilTest::::notIndirectSigDictionaryTest()", "196": "SignatureUtilTest::::notIndirectSigDictionaryTest()", "197": "SignatureUtilTest::::notIndirectSigDictionaryTest()", "198": "SignatureUtilTest::::notIndirectSigDictionaryTest()", "199": "SignatureUtilTest::::notIndirectSigDictionaryTest()", "200": "SignatureUtilTest::::notIndirectSigDictionaryTest()", "201": "SignatureUtilTest::::notIndirectSigDictionaryTest()", "202": "SignatureUtilTest::::notIndirectSigDictionaryTest()", "204": "SignatureUtilTest::::emptySignatureReadSignatureDataTest()", "205": "SignatureUtilTest::::emptySignatureReadSignatureDataTest()", "206": "SignatureUtilTest::::emptySignatureReadSignatureDataTest()", "207": "SignatureUtilTest::::emptySignatureReadSignatureDataTest()", "208": "SignatureUtilTest::::emptySignatureReadSignatureDataTest()", "209": "SignatureUtilTest::::emptySignatureReadSignatureDataTest()", "210": "SignatureUtilTest::::emptySignatureReadSignatureDataTest()", "211": "SignatureUtilTest::::emptySignatureReadSignatureDataTest()", "213": "SignatureUtilTest::::readSignatureDataTest()", "214": "SignatureUtilTest::::readSignatureDataTest()", "215": "SignatureUtilTest::::readSignatureDataTest()", "216": "SignatureUtilTest::::readSignatureDataTest()", "217": "SignatureUtilTest::::readSignatureDataTest()", "218": "SignatureUtilTest::::readSignatureDataTest()", "219": "SignatureUtilTest::::readSignatureDataTest()", "220": "SignatureUtilTest::::readSignatureDataTest()", "221": "SignatureUtilTest::::readSignatureDataTest()", "222": "SignatureUtilTest::::readSignatureDataTest()", "223": "SignatureUtilTest::::readSignatureDataTest()", "224": "SignatureUtilTest::::readSignatureDataTest()", "225": "SignatureUtilTest::::readSignatureDataTest()", "226": "SignatureUtilTest::::readSignatureDataTest()", "227": "SignatureUtilTest::::readSignatureDataTest()", "228": "SignatureUtilTest::::readSignatureDataTest()", "229": "SignatureUtilTest::::readSignatureDataTest()", "230": "SignatureUtilTest::::readSignatureDataTest()", "232": "SignatureUtilTest::::readSignatureDataWithSpecialSubFilterTest()", "233": "SignatureUtilTest::::readSignatureDataWithSpecialSubFilterTest()", "234": "SignatureUtilTest::::readSignatureDataWithSpecialSubFilterTest()", "235": "SignatureUtilTest::::readSignatureDataWithSpecialSubFilterTest()", "236": "SignatureUtilTest::::readSignatureDataWithSpecialSubFilterTest()", "237": "SignatureUtilTest::::readSignatureDataWithSpecialSubFilterTest()", "238": "SignatureUtilTest::::readSignatureDataWithSpecialSubFilterTest()", "239": "SignatureUtilTest::::readSignatureDataWithSpecialSubFilterTest()", "240": "SignatureUtilTest::::readSignatureDataWithSpecialSubFilterTest()", "241": "SignatureUtilTest::::readSignatureDataWithSpecialSubFilterTest()", "242": "SignatureUtilTest::::readSignatureDataWithSpecialSubFilterTest()", "243": "SignatureUtilTest::::readSignatureDataWithSpecialSubFilterTest()", "244": "SignatureUtilTest::::readSignatureDataWithSpecialSubFilterTest()", "245": "SignatureUtilTest::::readSignatureDataWithSpecialSubFilterTest()", "246": "SignatureUtilTest::::readSignatureDataWithSpecialSubFilterTest()", "247": "SignatureUtilTest::::readSignatureDataWithSpecialSubFilterTest()", "248": "SignatureUtilTest::::readSignatureDataWithSpecialSubFilterTest()", "249": "SignatureUtilTest::::readSignatureDataWithSpecialSubFilterTest()", "250": "SignatureUtilTest::::readSignatureDataWithSpecialSubFilterTest()", "252": "SignatureUtilTest::::byteRangeAndContentsEntriesTest()", "253": "SignatureUtilTest::::byteRangeAndContentsEntriesTest()", "254": "SignatureUtilTest::::byteRangeAndContentsEntriesTest()", "255": "SignatureUtilTest::::byteRangeAndContentsEntriesTest()", "256": "SignatureUtilTest::::byteRangeAndContentsEntriesTest()", "257": "SignatureUtilTest::::byteRangeAndContentsEntriesTest()", "258": "SignatureUtilTest::::byteRangeAndContentsEntriesTest()", "259": "SignatureUtilTest::::byteRangeAndContentsEntriesTest()", "260": "SignatureUtilTest::::byteRangeAndContentsEntriesTest()", "262": "SignatureUtilTest::::doesSignatureFieldExistTest()", "263": "SignatureUtilTest::::doesSignatureFieldExistTest()", "264": "SignatureUtilTest::::doesSignatureFieldExistTest()", "265": "SignatureUtilTest::::doesSignatureFieldExistTest()", "266": "SignatureUtilTest::::doesSignatureFieldExistTest()", "267": "SignatureUtilTest::::doesSignatureFieldExistTest()", "268": "SignatureUtilTest::::doesSignatureFieldExistTest()", "269": "SignatureUtilTest::::doesSignatureFieldExistTest()", "271": "SignatureUtilTest::::doesSignatureFieldExistEmptySignatureTest()", "272": "SignatureUtilTest::::doesSignatureFieldExistEmptySignatureTest()", "273": "SignatureUtilTest::::doesSignatureFieldExistEmptySignatureTest()", "274": "SignatureUtilTest::::doesSignatureFieldExistEmptySignatureTest()", "275": "SignatureUtilTest::::doesSignatureFieldExistEmptySignatureTest()", "276": "SignatureUtilTest::::doesSignatureFieldExistEmptySignatureTest()", "277": "SignatureUtilTest::::doesSignatureFieldExistEmptySignatureTest()", "278": "SignatureUtilTest::::doesSignatureFieldExistEmptySignatureTest()", "280": "SignatureUtilTest::::signatureInTextTypeFieldTest()", "281": "SignatureUtilTest::::signatureInTextTypeFieldTest()", "282": "SignatureUtilTest::::signatureInTextTypeFieldTest()", "283": "SignatureUtilTest::::signatureInTextTypeFieldTest()", "284": "SignatureUtilTest::::signatureInTextTypeFieldTest()", "285": "SignatureUtilTest::::signatureInTextTypeFieldTest()", "286": "SignatureUtilTest::::signatureInTextTypeFieldTest()", "287": "SignatureUtilTest::::signatureInTextTypeFieldTest()", "289": "SignatureUtilTest::::getTotalRevisionsTest()", "290": "SignatureUtilTest::::getTotalRevisionsTest()", "291": "SignatureUtilTest::::getTotalRevisionsTest()", "292": "SignatureUtilTest::::getTotalRevisionsTest()", "293": "SignatureUtilTest::::getTotalRevisionsTest()", "294": "SignatureUtilTest::::getTotalRevisionsTest()", "295": "SignatureUtilTest::::getTotalRevisionsTest()", "296": "SignatureUtilTest::::getTotalRevisionsTest()", "298": "SignatureUtilTest::::getRevisionTest()", "299": "SignatureUtilTest::::getRevisionTest()", "300": "SignatureUtilTest::::getRevisionTest()", "301": "SignatureUtilTest::::getRevisionTest()", "302": "SignatureUtilTest::::getRevisionTest()", "303": "SignatureUtilTest::::getRevisionTest()", "304": "SignatureUtilTest::::getRevisionTest()", "305": "SignatureUtilTest::::getRevisionTest()", "307": "SignatureUtilTest::::getRevisionEmptyFieldsTest()", "308": "SignatureUtilTest::::getRevisionEmptyFieldsTest()", "309": "SignatureUtilTest::::getRevisionEmptyFieldsTest()", "310": "SignatureUtilTest::::getRevisionEmptyFieldsTest()", "311": "SignatureUtilTest::::getRevisionEmptyFieldsTest()", "312": "SignatureUtilTest::::getRevisionEmptyFieldsTest()", "313": "SignatureUtilTest::::getRevisionEmptyFieldsTest()", "314": "SignatureUtilTest::::getRevisionEmptyFieldsTest()", "316": "SignatureUtilTest::::getRevisionXfaFormTest()", "317": "SignatureUtilTest::::getRevisionXfaFormTest()", "318": "SignatureUtilTest::::getRevisionXfaFormTest()", "319": "SignatureUtilTest::::getRevisionXfaFormTest()", "320": "SignatureUtilTest::::getRevisionXfaFormTest()", "321": "SignatureUtilTest::::getRevisionXfaFormTest()", "322": "SignatureUtilTest::::getRevisionXfaFormTest()", "323": "SignatureUtilTest::::getRevisionXfaFormTest()", "325": "SignatureUtilTest::::extractRevisionTest()", "326": "SignatureUtilTest::::extractRevisionTest()", "327": "SignatureUtilTest::::extractRevisionTest()", "328": "SignatureUtilTest::::extractRevisionTest()", "329": "SignatureUtilTest::::extractRevisionTest()", "330": "SignatureUtilTest::::extractRevisionTest()", "331": "SignatureUtilTest::::extractRevisionTest()", "332": "SignatureUtilTest::::extractRevisionTest()", "334": "SignatureUtilTest::::extractRevisionNotSignatureFieldTest()", "335": "SignatureUtilTest::::extractRevisionNotSignatureFieldTest()", "336": "SignatureUtilTest::::extractRevisionNotSignatureFieldTest()", "337": "SignatureUtilTest::::extractRevisionNotSignatureFieldTest()", "338": "SignatureUtilTest::::extractRevisionNotSignatureFieldTest()", "339": "SignatureUtilTest::::extractRevisionNotSignatureFieldTest()", "340": "SignatureUtilTest::::extractRevisionNotSignatureFieldTest()", "341": "SignatureUtilTest::::extractRevisionNotSignatureFieldTest()"}, "tests": [{"test_lines": [56, 65], "covered_lines": [73, 74, 76, 77, 224, 227, 228, 229, 231, 351, 355, 356, 357, 358, 359, 362, 363, 366, 367, 370, 372, 373, 375, 376, 378, 379, 380, 381, 382, 383, 384, 388, 389, 390, 391, 392, 393, 394, 397, 399]}, {"test_lines": [67, 75], "covered_lines": [73, 74, 76, 77, 224, 227, 228, 229, 231, 351, 352]}, {"test_lines": [77, 84], "covered_lines": [73, 74, 76, 77, 224, 227, 228, 229, 231, 327, 328, 332, 333, 334, 351, 355, 356, 357, 358, 359, 362, 363, 366, 367, 370, 372, 373, 375, 376, 378, 379, 380, 381, 382, 383, 384, 388, 389, 390, 391, 392, 393, 394, 397, 399, 414, 415, 416, 418, 422, 423, 424, 427, 428, 429, 430, 432]}, {"test_lines": [86, 93], "covered_lines": [73, 74, 76, 77, 224, 227, 228, 229, 231, 327, 328, 332, 333, 334, 351, 355, 356, 357, 358, 359, 362, 363, 366, 367, 370, 372, 373, 375, 376, 378, 379, 380, 381, 382, 383, 386, 388, 389, 390, 391, 392, 393, 394, 397, 399, 414, 415, 416, 418, 422, 423, 424, 427, 428, 429, 430, 431, 432]}, {"test_lines": [95, 102], "covered_lines": [73, 74, 76, 77, 224, 227, 228, 229, 231, 327, 328, 332, 333, 334, 351, 355, 356, 357, 358, 359, 362, 363, 366, 367, 370, 372, 373, 375, 376, 378, 379, 380, 381, 382, 383, 386, 388, 389, 390, 391, 392, 393, 394, 397, 399, 414, 415, 416, 418, 422, 423, 424, 427, 428, 429, 430, 431, 432]}, {"test_lines": [104, 111], "covered_lines": [73, 74, 76, 77, 224, 227, 228, 229, 231, 327, 328, 332, 333, 334, 351, 355, 356, 357, 358, 359, 362, 363, 366, 367, 370, 372, 373, 375, 376, 378, 379, 380, 381, 382, 383, 384, 388, 389, 390, 391, 392, 393, 394, 397, 399, 414, 415, 416, 418, 422, 423, 424, 427, 428, 429, 430, 431, 435, 436, 439, 440, 441, 449, 450, 451, 455, 457, 464, 465, 466, 467, 468, 469, 470, 471, 473, 477, 479, 480, 481, 486, 488, 497, 499, 501, 504, 509, 511, 517, 518, 519]}, {"test_lines": [113, 120], "covered_lines": [73, 74, 76, 77, 224, 227, 228, 229, 231, 327, 328, 332, 333, 334, 351, 355, 356, 357, 358, 359, 362, 363, 366, 367, 370, 372, 373, 375, 376, 378, 379, 380, 381, 382, 383, 384, 388, 389, 390, 391, 392, 393, 394, 397, 399, 414, 415, 416, 418, 422, 423, 424, 427, 428, 429, 430, 431, 435, 436, 439, 440, 441, 449, 450, 451, 455, 457, 464, 465, 466, 467, 468, 469, 473, 477, 479, 480, 481, 486, 488, 497, 499, 501, 502, 504, 509, 511, 517, 518, 519]}, {"test_lines": [122, 129], "covered_lines": [73, 74, 76, 77, 224, 227, 228, 229, 231, 327, 328, 332, 333, 334, 351, 355, 356, 357, 358, 359, 362, 363, 366, 367, 370, 372, 373, 375, 376, 378, 379, 380, 381, 382, 383, 384, 388, 389, 390, 391, 392, 393, 394, 397, 399, 414, 415, 416, 418, 422, 423, 424, 427, 428, 429, 430, 431, 435, 436, 439, 440, 441, 449, 450, 451, 455, 457, 464, 465, 466, 467, 468, 469, 473, 477, 479, 480, 481, 486, 488, 497, 499, 501, 502, 504, 511, 517, 518, 519]}, {"test_lines": [131, 138], "covered_lines": [73, 74, 76, 77, 224, 227, 228, 229, 231, 327, 328, 332, 333, 334, 351, 355, 356, 357, 358, 359, 362, 363, 366, 367, 370, 372, 373, 375, 376, 378, 379, 380, 381, 382, 383, 384, 388, 389, 390, 391, 392, 393, 394, 397, 399, 414, 415, 416, 418, 422, 423, 424, 427, 428, 429, 430, 431, 435, 436, 439, 440, 441, 449, 450, 451, 455, 457, 464, 465, 466, 467, 468, 469, 473, 477, 479, 480, 481, 486, 488, 489, 490, 491, 492, 494, 496, 501, 502, 504, 509, 511, 517, 518, 519, 523, 524, 525, 527, 528, 529, 530, 532]}, {"test_lines": [140, 147], "covered_lines": [73, 74, 76, 77, 224, 227, 228, 229, 231, 327, 328, 332, 333, 334, 351, 355, 356, 357, 358, 359, 362, 363, 366, 367, 370, 372, 373, 375, 376, 378, 379, 380, 381, 382, 383, 384, 388, 389, 390, 391, 392, 393, 394, 397, 399, 414, 415, 416, 418, 422, 423, 424, 427, 428, 429, 430, 431, 435, 436, 439, 440, 441, 449, 450, 451, 455, 457, 464, 465, 466, 467, 468, 469, 473, 477, 479, 480, 481, 486, 488, 497, 499, 501, 502, 504, 509, 511, 517, 518, 519]}, {"test_lines": [149, 156], "covered_lines": [73, 74, 76, 77, 224, 227, 228, 229, 231, 327, 328, 332, 333, 334, 351, 355, 356, 357, 358, 359, 362, 363, 366, 367, 370, 372, 373, 375, 376, 378, 379, 380, 381, 382, 383, 386, 388, 389, 390, 391, 392, 393, 394, 397, 399, 414, 415, 416, 418, 422, 423, 424, 427, 428, 429, 430, 431, 432]}, {"test_lines": [158, 165], "covered_lines": [73, 74, 76, 77, 224, 227, 228, 229, 231, 327, 328, 332, 333, 334, 351, 355, 356, 357, 358, 359, 362, 363, 366, 367, 370, 372, 373, 375, 376, 378, 379, 380, 381, 382, 383, 384, 388, 389, 390, 391, 392, 393, 394, 397, 399, 414, 415, 416, 418, 422, 423, 424, 427, 428, 429, 430, 431, 435, 436, 439, 440, 441, 449, 450, 451, 455, 457, 464, 465, 466, 467, 468, 469, 473, 477, 479, 480, 481, 486, 488, 489, 490, 491, 492, 494, 496, 501, 502, 504, 509, 511, 517, 518, 519, 523, 524, 525, 527, 528, 529, 530, 532]}, {"test_lines": [167, 174], "covered_lines": [73, 74, 76, 77, 224, 227, 228, 229, 231, 327, 328, 332, 333, 334, 351, 355, 356, 357, 358, 359, 362, 363, 366, 367, 370, 372, 373, 375, 376, 378, 379, 380, 381, 382, 383, 384, 388, 389, 390, 391, 392, 393, 394, 397, 399, 414, 415, 416, 418, 422, 423, 424, 427, 428, 429, 430, 431, 435, 436, 439, 440, 441, 449, 450, 451, 455, 457, 464, 465, 466, 467, 468, 469, 470, 471, 473, 477, 479, 480, 481, 486, 488, 489, 490, 491, 492, 494, 496, 501, 504, 509, 511, 517, 518, 519, 523, 524, 525, 527, 528, 529, 530, 532]}, {"test_lines": [177, 184], "covered_lines": [73, 74, 76, 77, 224, 227, 228, 229, 231, 327, 328, 332, 333, 334, 351, 355, 356, 357, 358, 359, 362, 363, 366, 367, 370, 372, 373, 375, 376, 378, 379, 380, 381, 382, 383, 384, 388, 389, 390, 391, 392, 393, 394, 397, 399, 414, 415, 416, 418, 422, 423, 424, 427, 428, 429, 430, 431, 435, 436, 439, 440, 441, 449, 450, 451, 455, 457, 464, 465, 466, 467, 468, 469, 473, 477, 479, 480, 481, 482, 483, 486, 488, 497, 499, 501, 504, 509, 511, 517, 518, 519]}, {"test_lines": [186, 193], "covered_lines": [73, 74, 76, 77, 224, 227, 228, 229, 231, 327, 328, 332, 333, 334, 351, 355, 356, 357, 358, 359, 362, 363, 366, 367, 370, 372, 373, 375, 376, 378, 379, 380, 381, 382, 383, 384, 388, 389, 390, 391, 392, 393, 394, 397, 399, 414, 415, 416, 418, 422, 423, 424, 427, 428, 429, 430, 431, 435, 436, 439, 440, 441, 449, 450, 451, 455, 457, 464, 465, 466, 467, 468, 469, 470, 471, 473, 477, 479, 480, 481, 486, 488, 497, 499, 501, 504, 509, 511, 517, 518, 519]}, {"test_lines": [195, 202], "covered_lines": [73, 74, 76, 77, 224, 227, 228, 229, 231, 327, 328, 332, 333, 334, 351, 355, 356, 357, 358, 359, 362, 363, 366, 367, 370, 372, 373, 375, 376, 378, 379, 380, 381, 382, 383, 384, 388, 389, 390, 391, 392, 393, 394, 397, 399, 414, 415, 416, 418, 422, 423, 424, 427, 428, 429, 430, 431, 435, 436, 439, 443, 444, 445, 449, 450, 451, 455, 457, 464, 465, 466, 467, 468, 469, 470, 471, 473, 477, 479, 480, 481, 486, 488, 497, 499, 501, 502, 504, 505, 506, 507, 509, 511, 517, 518, 519]}, {"test_lines": [204, 211], "covered_lines": [73, 74, 76, 77, 119, 120, 121, 166, 167, 180, 181, 185, 186, 187, 224, 227, 228, 229, 231, 351, 355, 356, 357, 358, 359, 362, 363, 364, 381, 382, 397, 399]}, {"test_lines": [213, 230], "covered_lines": [73, 74, 76, 77, 98, 119, 120, 124, 125, 126, 127, 135, 137, 138, 139, 140, 142, 143, 144, 145, 146, 148, 149, 150, 152, 166, 167, 180, 181, 185, 186, 189, 190, 195, 196, 197, 199, 200, 201, 203, 204, 210, 214, 216, 224, 227, 228, 229, 231, 351, 355, 356, 357, 358, 359, 362, 363, 366, 367, 370, 372, 373, 375, 376, 378, 379, 380, 381, 382, 383, 384, 388, 389, 390, 391, 392, 393, 394, 397, 399]}, {"test_lines": [232, 250], "covered_lines": [73, 74, 76, 77, 98, 119, 120, 124, 125, 126, 127, 128, 129, 130, 132, 134, 137, 138, 139, 140, 142, 143, 144, 145, 146, 148, 149, 150, 152, 166, 167, 180, 181, 185, 186, 189, 190, 195, 196, 197, 199, 200, 201, 203, 204, 210, 214, 216, 224, 227, 228, 229, 231, 351, 355, 356, 357, 358, 359, 362, 363, 366, 367, 370, 372, 373, 375, 376, 378, 379, 380, 381, 382, 383, 384, 388, 389, 390, 391, 392, 393, 394, 397, 399]}, {"test_lines": [252, 260], "covered_lines": [73, 74, 76, 77, 119, 120, 124, 125, 126, 153, 154, 166, 167, 180, 181, 185, 186, 189, 190, 224, 227, 228, 229, 231, 351, 355, 356, 357, 358, 359, 362, 363, 366, 367, 370, 372, 373, 375, 376, 378, 379, 380, 381, 382, 383, 386, 388, 389, 390, 391, 392, 393, 394, 397, 399]}, {"test_lines": [262, 269], "covered_lines": [73, 74, 76, 77, 224, 225, 227, 228, 229, 231, 240, 241, 242, 243, 244, 245, 246, 249, 250, 255, 347, 351, 355, 356, 357, 358, 359, 362, 363, 366, 367, 370, 372, 373, 375, 376, 378, 379, 380, 381, 382, 383, 384, 388, 389, 390, 391, 392, 393, 394, 397, 399]}, {"test_lines": [271, 278], "covered_lines": [73, 74, 76, 77, 224, 227, 228, 229, 231, 240, 241, 242, 243, 244, 245, 246, 249, 252, 253, 255, 347, 351, 355, 356, 357, 358, 359, 362, 363, 364, 381, 382, 397, 399]}, {"test_lines": [280, 287], "covered_lines": [73, 74, 76, 77, 224, 225, 227, 228, 229, 231, 240, 241, 242, 243, 244, 245, 246, 247, 255, 347, 351, 355, 356, 357, 358, 359, 360, 381, 382, 397, 399]}, {"test_lines": [289, 296], "covered_lines": [73, 74, 76, 77, 224, 227, 228, 229, 231, 264, 265, 351, 355, 356, 357, 358, 359, 362, 363, 366, 367, 370, 372, 373, 375, 376, 378, 379, 380, 381, 382, 383, 384, 388, 389, 390, 391, 392, 393, 394, 397, 399]}, {"test_lines": [298, 305], "covered_lines": [73, 74, 76, 77, 224, 227, 228, 229, 231, 276, 277, 278, 281, 292, 297, 351, 355, 356, 357, 358, 359, 362, 363, 366, 367, 370, 372, 373, 375, 376, 378, 379, 380, 381, 382, 383, 384, 388, 389, 390, 391, 392, 393, 394, 397, 399]}, {"test_lines": [307, 314], "covered_lines": [73, 74, 76, 77, 224, 227, 228, 229, 231, 276, 277, 278, 279, 292, 297, 351, 355, 356, 357, 358, 359, 362, 363, 364, 381, 382, 397, 399]}, {"test_lines": [316, 323], "covered_lines": [73, 74, 76, 77, 224, 227, 228, 229, 231, 276, 277, 278, 281, 292, 293, 294, 297, 351, 355, 356, 357, 358, 359, 362, 363, 366, 367, 370, 372, 373, 375, 376, 378, 379, 380, 381, 382, 383, 384, 388, 389, 390, 391, 392, 393, 394, 397, 399]}, {"test_lines": [325, 332], "covered_lines": [73, 74, 76, 77, 224, 227, 228, 229, 231, 307, 308, 311, 312, 313, 351, 355, 356, 357, 358, 359, 362, 363, 366, 367, 370, 372, 373, 375, 376, 378, 379, 380, 381, 382, 383, 384, 388, 389, 390, 391, 392, 393, 394, 397, 399]}, {"test_lines": [334, 341], "covered_lines": [73, 74, 76, 77, 224, 227, 228, 229, 231, 307, 308, 309, 351, 355, 356, 357, 358, 359, 360, 381, 382, 397, 399]}]}, "/bernard/dataset_construction/prep/repos/itext-java/sign/src/main/java/com/itextpdf/signatures/DigestAlgorithms.java": {"class_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.signatures;\n", "\n", "import com.itextpdf.bouncycastleconnector.BouncyCastleFactoryCreator;\n", "import com.itextpdf.commons.bouncycastle.IBouncyCastleFactory;\n", "import com.itextpdf.signatures.exceptions.SignExceptionMessageConstant;\n", "import com.itextpdf.signatures.logs.SignLogMessageConstant;\n", "import org.slf4j.Logger;\n", "import org.slf4j.LoggerFactory;\n", "\n", "import java.io.IOException;\n", "import java.io.InputStream;\n", "import java.security.GeneralSecurityException;\n", "import java.security.MessageDigest;\n", "import java.security.NoSuchAlgorithmException;\n", "import java.security.NoSuchProviderException;\n", "import java.util.HashMap;\n", "import java.util.Map;\n", "\n", "/**\n", " * Class that contains a map with the different message digest algorithms.\n", " */\n", "public class DigestAlgorithms {\n", "\n", "    /**\n", "     * Algorithm available for signatures since PDF 1.3.\n", "     */\n", "    public static final String SHA1 = \"SHA-1\";\n", "\n", "    /**\n", "     * Algorithm available for signatures since PDF 1.6.\n", "     */\n", "    public static final String SHA256 = \"SHA-256\";\n", "\n", "    /**\n", "     * Algorithm available for signatures since PDF 1.7.\n", "     */\n", "    public static final String SHA384 = \"SHA-384\";\n", "\n", "    /**\n", "     * Algorithm available for signatures since PDF 1.7.\n", "     */\n", "    public static final String SHA512 = \"SHA-512\";\n", "\n", "    /**\n", "     * Algorithm available for signatures since PDF 1.7.\n", "     */\n", "    public static final String RIPEMD160 = \"RIPEMD160\";\n", "\n", "    /**\n", "     * Algorithm available for signatures since PDF 2.0\n", "     * extended by ISO/TS 32001.\n", "     */\n", "    public static final String SHA3_256 = \"SHA3-256\";\n", "\n", "    /**\n", "     * Algorithm available for signatures since PDF 2.0\n", "     * extended by ISO/TS 32001.\n", "     */\n", "    public static final String SHA3_512 = \"SHA3-512\";\n", "\n", "    /**\n", "     * Algorithm available for signatures since PDF 2.0\n", "     * extended by ISO/TS 32001.\n", "     */\n", "    public static final String SHA3_384 = \"SHA3-384\";\n", "\n", "    /**\n", "     * Algorithm available for signatures since PDF 2.0\n", "     * extended by ISO/TS 32001.\n", "     *\n", "     * <p>\n", "     * The output length is fixed at 512 bits (64 bytes).\n", "     */\n", "    public static final String SHAKE256 = \"SHAKE256\";\n", "\n", "    /**\n", "     * Maps the digest IDs with the human-readable name of the digest algorithm.\n", "     */\n", "    private static final Map<String, String> digestNames = new HashMap<>();\n", "\n", "    /**\n", "     * Maps digest algorithm that are unknown by the JDKs MessageDigest object to a known one.\n", "     */\n", "    private static final Map<String, String> fixNames = new HashMap<>();\n", "\n", "    /**\n", "     * Maps the name of a digest algorithm with its ID.\n", "     */\n", "    private static final Map<String, String> allowedDigests = new HashMap<>();\n", "\n", "    /**\n", "     * Maps algorithm names to output lengths in bits.\n", "     */\n", "    private static final Map<String, Integer> bitLengths = new HashMap<>();\n", "\n", "    private static final IBouncyCastleFactory BOUNCY_CASTLE_FACTORY = BouncyCastleFactoryCreator.getFactory();\n", "\n", "    private static final Logger LOGGER = LoggerFactory.getLogger(DigestAlgorithms.class);\n", "\n", "    static {\n", "        digestNames.put(\"1.2.840.113549.2.5\", \"MD5\");\n", "        digestNames.put(\"1.2.840.113549.2.2\", \"MD2\");\n", "        digestNames.put(\"1.3.14.3.2.26\", \"SHA1\");\n", "        digestNames.put(\"2.16.840.1.101.3.4.2.4\", \"SHA224\");\n", "        digestNames.put(\"2.16.840.1.101.3.4.2.1\", \"SHA256\");\n", "        digestNames.put(\"2.16.840.1.101.3.4.2.2\", \"SHA384\");\n", "        digestNames.put(\"2.16.840.1.101.3.4.2.3\", \"SHA512\");\n", "        digestNames.put(\"1.3.36.3.2.2\", \"RIPEMD128\");\n", "        digestNames.put(\"1.3.36.3.2.1\", \"RIPEMD160\");\n", "        digestNames.put(\"1.3.36.3.2.3\", \"RIPEMD256\");\n", "        digestNames.put(\"1.2.840.113549.1.1.4\", \"MD5\");\n", "        digestNames.put(\"1.2.840.113549.1.1.2\", \"MD2\");\n", "        digestNames.put(\"1.2.840.113549.1.1.5\", \"SHA1\");\n", "        digestNames.put(\"1.2.840.113549.1.1.14\", \"SHA224\");\n", "        digestNames.put(\"1.2.840.113549.1.1.11\", \"SHA256\");\n", "        digestNames.put(\"1.2.840.113549.1.1.12\", \"SHA384\");\n", "        digestNames.put(\"1.2.840.113549.1.1.13\", \"SHA512\");\n", "        digestNames.put(\"1.2.840.113549.2.5\", \"MD5\");\n", "        digestNames.put(\"1.2.840.113549.2.2\", \"MD2\");\n", "        digestNames.put(\"1.2.840.10040.4.3\", \"SHA1\");\n", "        digestNames.put(\"2.16.840.1.101.3.4.3.1\", \"SHA224\");\n", "        digestNames.put(\"2.16.840.1.101.3.4.3.2\", \"SHA256\");\n", "        digestNames.put(\"2.16.840.1.101.3.4.3.3\", \"SHA384\");\n", "        digestNames.put(\"2.16.840.1.101.3.4.3.4\", \"SHA512\");\n", "        digestNames.put(\"1.3.36.3.3.1.3\", \"RIPEMD128\");\n", "        digestNames.put(\"1.3.36.3.3.1.2\", \"RIPEMD160\");\n", "        digestNames.put(\"1.3.36.3.3.1.4\", \"RIPEMD256\");\n", "        digestNames.put(\"1.2.643.2.2.9\", \"GOST3411\");\n", "        digestNames.put(\"2.16.840.1.101.3.4.2.7\", \"SHA3-224\");\n", "        digestNames.put(\"2.16.840.1.101.3.4.2.8\", \"SHA3-256\");\n", "        digestNames.put(\"2.16.840.1.101.3.4.2.9\", \"SHA3-384\");\n", "        digestNames.put(\"2.16.840.1.101.3.4.2.10\", \"SHA3-512\");\n", "        digestNames.put(\"2.16.840.1.101.3.4.2.12\", \"SHAKE256\");\n", "\n", "        fixNames.put(\"SHA256\", SHA256);\n", "        fixNames.put(\"SHA384\", SHA384);\n", "        fixNames.put(\"SHA512\", SHA512);\n", "\n", "        allowedDigests.put(\"MD2\", \"1.2.840.113549.2.2\");\n", "        allowedDigests.put(\"MD-2\", \"1.2.840.113549.2.2\");\n", "        allowedDigests.put(\"MD5\", \"1.2.840.113549.2.5\");\n", "        allowedDigests.put(\"MD-5\", \"1.2.840.113549.2.5\");\n", "        allowedDigests.put(\"SHA1\", \"1.3.14.3.2.26\");\n", "        allowedDigests.put(\"SHA-1\", \"1.3.14.3.2.26\");\n", "        allowedDigests.put(\"SHA224\", \"2.16.840.1.101.3.4.2.4\");\n", "        allowedDigests.put(\"SHA-224\", \"2.16.840.1.101.3.4.2.4\");\n", "        allowedDigests.put(\"SHA256\", \"2.16.840.1.101.3.4.2.1\");\n", "        allowedDigests.put(\"SHA-256\", \"2.16.840.1.101.3.4.2.1\");\n", "        allowedDigests.put(\"SHA384\", \"2.16.840.1.101.3.4.2.2\");\n", "        allowedDigests.put(\"SHA-384\", \"2.16.840.1.101.3.4.2.2\");\n", "        allowedDigests.put(\"SHA512\", \"2.16.840.1.101.3.4.2.3\");\n", "        allowedDigests.put(\"SHA-512\", \"2.16.840.1.101.3.4.2.3\");\n", "        allowedDigests.put(\"RIPEMD128\", \"1.3.36.3.2.2\");\n", "        allowedDigests.put(\"RIPEMD-128\", \"1.3.36.3.2.2\");\n", "        allowedDigests.put(\"RIPEMD160\", \"1.3.36.3.2.1\");\n", "        allowedDigests.put(\"RIPEMD-160\", \"1.3.36.3.2.1\");\n", "        allowedDigests.put(\"RIPEMD256\", \"1.3.36.3.2.3\");\n", "        allowedDigests.put(\"RIPEMD-256\", \"1.3.36.3.2.3\");\n", "        allowedDigests.put(\"GOST3411\", \"1.2.643.2.2.9\");\n", "        allowedDigests.put(\"SHA3-224\", \"2.16.840.1.101.3.4.2.7\");\n", "        allowedDigests.put(\"SHA3-256\", \"2.16.840.1.101.3.4.2.8\");\n", "        allowedDigests.put(\"SHA3-384\", \"2.16.840.1.101.3.4.2.9\");\n", "        allowedDigests.put(\"SHA3-512\", \"2.16.840.1.101.3.4.2.10\");\n", "        allowedDigests.put(\"SHAKE256\", \"2.16.840.1.101.3.4.2.12\");\n", "\n", "        bitLengths.put(\"MD2\", 128);\n", "        bitLengths.put(\"MD-2\", 128);\n", "        bitLengths.put(\"MD5\", 128);\n", "        bitLengths.put(\"MD-5\", 128);\n", "        bitLengths.put(\"SHA1\", 160);\n", "        bitLengths.put(\"SHA-1\", 160);\n", "        bitLengths.put(\"SHA224\", 224);\n", "        bitLengths.put(\"SHA-224\", 224);\n", "        bitLengths.put(\"SHA256\", 256);\n", "        bitLengths.put(\"SHA-256\", 256);\n", "        bitLengths.put(\"SHA384\", 384);\n", "        bitLengths.put(\"SHA-384\", 384);\n", "        bitLengths.put(\"SHA512\", 512);\n", "        bitLengths.put(\"SHA-512\", 512);\n", "        bitLengths.put(\"RIPEMD128\", 128);\n", "        bitLengths.put(\"RIPEMD-128\", 128);\n", "        bitLengths.put(\"RIPEMD160\", 160);\n", "        bitLengths.put(\"RIPEMD-160\", 160);\n", "        bitLengths.put(\"RIPEMD256\", 256);\n", "        bitLengths.put(\"RIPEMD-256\", 256);\n", "        bitLengths.put(\"SHA3-224\", 224);\n", "        bitLengths.put(\"SHA3-256\", 256);\n", "        bitLengths.put(\"SHA3-384\", 384);\n", "        bitLengths.put(\"SHA3-512\", 512);\n", "        bitLengths.put(\"SHAKE256\", 512);\n", "    }\n", "\n", "    /**\n", "     * Get a digest algorithm.\n", "     *\n", "     * @param digestOid oid of the digest algorithm\n", "     * @param provider the provider you want to use to create the hash\n", "     * @return MessageDigest object\n", "     * @throws NoSuchAlgorithmException thrown when a particular cryptographic algorithm is\n", "     * requested but is not available in the environment\n", "     * @throws NoSuchProviderException thrown when a particular security provider is\n", "     * requested but is not available in the environment\n", "     */\n", "    public static MessageDigest getMessageDigestFromOid(String digestOid, String provider)\n", "            throws NoSuchAlgorithmException, NoSuchProviderException {\n", "        return getMessageDigest(getDigest(digestOid), provider);\n", "    }\n", "\n", "    /**\n", "     * Creates a MessageDigest object that can be used to create a hash.\n", "     *\n", "     * @param hashAlgorithm\tthe algorithm you want to use to create a hash\n", "     * @param provider\tthe provider you want to use to create the hash\n", "     * @return\ta MessageDigest object\n", "     * @throws NoSuchAlgorithmException thrown when a particular cryptographic algorithm is\n", "     * requested but is not available in the environment\n", "     * @throws NoSuchProviderException thrown when a particular security provider is\n", "     * requested but is not available in the environment\n", "     */\n", "    public static MessageDigest getMessageDigest(String hashAlgorithm, String provider)\n", "            throws NoSuchAlgorithmException, NoSuchProviderException {\n", "        return SignUtils.getMessageDigest(hashAlgorithm, provider);\n", "    }\n", "\n", "    /**\n", "     * Creates a hash using a specific digest algorithm and a provider.\n", "     *\n", "     * @param data\tthe message of which you want to create a hash\n", "     * @param hashAlgorithm\tthe algorithm used to create the hash\n", "     * @param provider\tthe provider used to create the hash\n", "     * @return\tthe hash\n", "     * @throws GeneralSecurityException when requested cryptographic algorithm or security provider\n", "     * is not available\n", "     * @throws IOException signals that an I/O exception has occurred\n", "     */\n", "    public static byte[] digest(InputStream data, String hashAlgorithm, String provider)\n", "            throws GeneralSecurityException, IOException {\n", "        MessageDigest messageDigest = getMessageDigest(hashAlgorithm, provider);\n", "        return digest(data, messageDigest);\n", "    }\n", "\n", "    /**\n", "     * Create a digest based on the inputstream.\n", "     *\n", "     * @param data data to be digested\n", "     * @param messageDigest algorithm to be used\n", "     * @return digest of the data\n", "     * @throws IOException signals that an I/O exception has occurred\n", "     */\n", "    public static byte[] digest(InputStream data, MessageDigest messageDigest)\n", "            throws IOException {\n", "        byte[] buf = new byte[8192];\n", "        int n;\n", "        while ((n = data.read(buf)) > 0) {\n", "            messageDigest.update(buf, 0, n);\n", "        }\n", "        return messageDigest.digest();\n", "    }\n", "\n", "    /**\n", "     * Create a digest based on the inputstream.\n", "     *\n", "     * @param data           data to be digested\n", "     * @param hashAlgorithm  algorithm to be used\n", "     * @param externalDigest external digest to be used\n", "     *\n", "     * @return digest of the data.\n", "     *\n", "     * @throws IOException              signals that an I/O exception has occurred.\n", "     * @throws GeneralSecurityException when something goes wrong in calculating the digest.\n", "     */\n", "    public static byte[] digest(InputStream data, String hashAlgorithm, IExternalDigest externalDigest)\n", "            throws IOException, GeneralSecurityException {\n", "        byte[] buf = new byte[8192];\n", "        int n;\n", "        MessageDigest messageDigest = SignUtils.getMessageDigest(hashAlgorithm, externalDigest);\n", "        while ((n = data.read(buf)) > 0) {\n", "            messageDigest.update(buf, 0, n);\n", "        }\n", "        return messageDigest.digest();\n", "    }\n", "\n", "    /**\n", "     * Gets the digest name for a certain id.\n", "     *\n", "     * @param oid an id (for instance \"1.2.840.113549.2.5\")\n", "     *\n", "     * @return a digest name (for instance \"MD5\")\n", "     */\n", "    public static String getDigest(String oid) {\n", "        String ret = digestNames.get(oid);\n", "        if (ret == null) {\n", "            try {\n", "                String digest = getMessageDigest(oid, BOUNCY_CASTLE_FACTORY.getProviderName()).getAlgorithm();\n", "                LOGGER.warn(SignLogMessageConstant.ALGORITHM_NOT_FROM_SPEC);\n", "                return digest;\n", "            } catch (Exception e) {\n", "                return oid;\n", "            }\n", "        } else {\n", "            return ret;\n", "        }\n", "    }\n", "\n", "    /**\n", "     * Normalize the digest name.\n", "     *\n", "     * @param algo the name to be normalized\n", "     * @return normalized name\n", "     */\n", "    public static String normalizeDigestName(String algo) {\n", "        if (fixNames.containsKey(algo)) {\n", "            return fixNames.get(algo);\n", "        }\n", "        return algo;\n", "    }\n", "\n", "    /**\n", "     * Returns the id of a digest algorithms that is allowed in PDF,\n", "     * or null if it isn't allowed.\n", "     *\n", "     * @param name\tThe name of the digest algorithm.\n", "     * @return\tAn oid.\n", "     */\n", "    public static String getAllowedDigest(String name) {\n", "        if (name == null) {\n", "            throw new IllegalArgumentException(\n", "                    SignExceptionMessageConstant.THE_NAME_OF_THE_DIGEST_ALGORITHM_IS_NULL);\n", "        }\n", "        String allowedDigest = allowedDigests.get(name.toUpperCase());\n", "        if (allowedDigest != null) {\n", "            return allowedDigest;\n", "        }\n", "        allowedDigest = BOUNCY_CASTLE_FACTORY.getDigestAlgorithmOid(name.toUpperCase());\n", "        if (allowedDigest != null) {\n", "            LOGGER.warn(SignLogMessageConstant.ALGORITHM_NOT_FROM_SPEC);\n", "        }\n", "        return allowedDigest;\n", "    }\n", "\n", "    /**\n", "     * Retrieve the output length in bits of the given digest algorithm.\n", "     *\n", "     * @param name the name of the digest algorithm\n", "     * @return the length of the output of the algorithm in bits\n", "     */\n", "    public static int getOutputBitLength(String name) {\n", "        if (name == null) {\n", "            throw new IllegalArgumentException(\n", "                    SignExceptionMessageConstant.THE_NAME_OF_THE_DIGEST_ALGORITHM_IS_NULL);\n", "        }\n", "        return bitLengths.get(name).intValue();\n", "    }\n", "}\n"], "test_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.signatures;\n", "\n", "import com.itextpdf.bouncycastleconnector.BouncyCastleFactoryCreator;\n", "import com.itextpdf.commons.bouncycastle.IBouncyCastleFactory;\n", "import com.itextpdf.signatures.logs.SignLogMessageConstant;\n", "import com.itextpdf.test.ExtendedITextTest;\n", "import com.itextpdf.test.annotations.LogMessage;\n", "import com.itextpdf.test.annotations.LogMessages;\n", "import com.itextpdf.test.annotations.type.BouncyCastleUnitTest;\n", "import org.junit.Assert;\n", "import org.junit.BeforeClass;\n", "import org.junit.Test;\n", "import org.junit.experimental.categories.Category;\n", "\n", "import java.security.Security;\n", "\n", "@Category(BouncyCastleUnitTest.class)\n", "public class DigestAlgorithmsTest extends ExtendedITextTest {\n", "    private static final IBouncyCastleFactory BOUNCY_CASTLE_FACTORY = BouncyCastleFactoryCreator.getFactory();\n", "    private static final boolean FIPS_MODE = \"BCFIPS\".equals(BOUNCY_CASTLE_FACTORY.getProviderName());\n", "\n", "    @BeforeClass\n", "    public static void before() {\n", "        Security.addProvider(BOUNCY_CASTLE_FACTORY.getProvider());\n", "    }\n", "\n", "    @Test\n", "    public void emptyStringOidGetDigestTest() {\n", "        String oid = \"\";\n", "        Assert.assertEquals(oid, DigestAlgorithms.getDigest(oid));\n", "    }\n", "\n", "    @Test\n", "    public void nonExistingOidGetDigestTest() {\n", "        String oid = \"non_existing_oid\";\n", "        Assert.assertEquals(oid, DigestAlgorithms.getDigest(oid));\n", "    }\n", "\n", "    @Test\n", "    public void emptyStringNameGetAllowedDigestTest() {\n", "        Assert.assertNull(DigestAlgorithms.getAllowedDigest(\"\"));\n", "    }\n", "\n", "    @Test\n", "    public void nonExistingNameGetAllowedDigestTest() {\n", "        Assert.assertNull(DigestAlgorithms.getAllowedDigest(\"non_existing_oid\"));\n", "    }\n", "\n", "    @Test\n", "    public void nullNameGetAllowedDigestTest() {\n", "        Assert.assertThrows(IllegalArgumentException.class, () -> DigestAlgorithms.getAllowedDigest(null));\n", "    }\n", "\n", "    @LogMessages(messages = {\n", "            @LogMessage(messageTemplate = SignLogMessageConstant.ALGORITHM_NOT_FROM_SPEC, ignore = true)})\n", "    @Test\n", "    public void notAllowedOidGetDigestTest() {\n", "        String name = \"SM3\";\n", "        String oid = \"1.2.156.10197.1.401\";\n", "        Assert.assertEquals(FIPS_MODE ? oid : name, DigestAlgorithms.getDigest(oid));\n", "    }\n", "\n", "    @LogMessages(messages = {\n", "            @LogMessage(messageTemplate = SignLogMessageConstant.ALGORITHM_NOT_FROM_SPEC, ignore = true)})\n", "    @Test\n", "    public void notAllowedNameGetAllowedDigestTest() {\n", "        String name = \"SM3\";\n", "        String oid = \"1.2.156.10197.1.401\";\n", "        Assert.assertEquals(FIPS_MODE ? null : oid, DigestAlgorithms.getAllowedDigest(name));\n", "    }\n", "}\n"], "method_lines_dic": {"DigestAlgorithms::::getMessageDigestFromOid(java.lang.String,java.lang.String)": [226, 229], "DigestAlgorithms::::getMessageDigest(java.lang.String,java.lang.String)": [242, 245], "DigestAlgorithms::::digest(java.io.InputStream,java.lang.String,java.lang.String)": [258, 262], "DigestAlgorithms::::digest(java.io.InputStream,java.security.MessageDigest)": [272, 280], "DigestAlgorithms::::digest(java.io.InputStream,java.lang.String,com.itextpdf.signatures.IExternalDigest)": [294, 303], "DigestAlgorithms::::getDigest(java.lang.String)": [312, 325], "DigestAlgorithms::::normalizeDigestName(java.lang.String)": [333, 338], "DigestAlgorithms::::getAllowedDigest(java.lang.String)": [347, 361], "DigestAlgorithms::::getOutputBitLength(java.lang.String)": [369, 375]}, "test_method_lines_dic": {"DigestAlgorithmsTest::::before()": [44, 47], "DigestAlgorithmsTest::::emptyStringOidGetDigestTest()": [49, 53], "DigestAlgorithmsTest::::nonExistingOidGetDigestTest()": [55, 59], "DigestAlgorithmsTest::::emptyStringNameGetAllowedDigestTest()": [61, 64], "DigestAlgorithmsTest::::nonExistingNameGetAllowedDigestTest()": [66, 69], "DigestAlgorithmsTest::::nullNameGetAllowedDigestTest()": [71, 74], "DigestAlgorithmsTest::::notAllowedOidGetDigestTest()": [76, 83], "DigestAlgorithmsTest::::notAllowedNameGetAllowedDigestTest()": [85, 92]}, "reverse_method_lines_dic": {"226": "DigestAlgorithms::::getMessageDigestFromOid(java.lang.String,java.lang.String)", "227": "DigestAlgorithms::::getMessageDigestFromOid(java.lang.String,java.lang.String)", "228": "DigestAlgorithms::::getMessageDigestFromOid(java.lang.String,java.lang.String)", "229": "DigestAlgorithms::::getMessageDigestFromOid(java.lang.String,java.lang.String)", "242": "DigestAlgorithms::::getMessageDigest(java.lang.String,java.lang.String)", "243": "DigestAlgorithms::::getMessageDigest(java.lang.String,java.lang.String)", "244": "DigestAlgorithms::::getMessageDigest(java.lang.String,java.lang.String)", "245": "DigestAlgorithms::::getMessageDigest(java.lang.String,java.lang.String)", "258": "DigestAlgorithms::::digest(java.io.InputStream,java.lang.String,java.lang.String)", "259": "DigestAlgorithms::::digest(java.io.InputStream,java.lang.String,java.lang.String)", "260": "DigestAlgorithms::::digest(java.io.InputStream,java.lang.String,java.lang.String)", "261": "DigestAlgorithms::::digest(java.io.InputStream,java.lang.String,java.lang.String)", "262": "DigestAlgorithms::::digest(java.io.InputStream,java.lang.String,java.lang.String)", "272": "DigestAlgorithms::::digest(java.io.InputStream,java.security.MessageDigest)", "273": "DigestAlgorithms::::digest(java.io.InputStream,java.security.MessageDigest)", "274": "DigestAlgorithms::::digest(java.io.InputStream,java.security.MessageDigest)", "275": "DigestAlgorithms::::digest(java.io.InputStream,java.security.MessageDigest)", "276": "DigestAlgorithms::::digest(java.io.InputStream,java.security.MessageDigest)", "277": "DigestAlgorithms::::digest(java.io.InputStream,java.security.MessageDigest)", "278": "DigestAlgorithms::::digest(java.io.InputStream,java.security.MessageDigest)", "279": "DigestAlgorithms::::digest(java.io.InputStream,java.security.MessageDigest)", "280": "DigestAlgorithms::::digest(java.io.InputStream,java.security.MessageDigest)", "294": "DigestAlgorithms::::digest(java.io.InputStream,java.lang.String,com.itextpdf.signatures.IExternalDigest)", "295": "DigestAlgorithms::::digest(java.io.InputStream,java.lang.String,com.itextpdf.signatures.IExternalDigest)", "296": "DigestAlgorithms::::digest(java.io.InputStream,java.lang.String,com.itextpdf.signatures.IExternalDigest)", "297": "DigestAlgorithms::::digest(java.io.InputStream,java.lang.String,com.itextpdf.signatures.IExternalDigest)", "298": "DigestAlgorithms::::digest(java.io.InputStream,java.lang.String,com.itextpdf.signatures.IExternalDigest)", "299": "DigestAlgorithms::::digest(java.io.InputStream,java.lang.String,com.itextpdf.signatures.IExternalDigest)", "300": "DigestAlgorithms::::digest(java.io.InputStream,java.lang.String,com.itextpdf.signatures.IExternalDigest)", "301": "DigestAlgorithms::::digest(java.io.InputStream,java.lang.String,com.itextpdf.signatures.IExternalDigest)", "302": "DigestAlgorithms::::digest(java.io.InputStream,java.lang.String,com.itextpdf.signatures.IExternalDigest)", "303": "DigestAlgorithms::::digest(java.io.InputStream,java.lang.String,com.itextpdf.signatures.IExternalDigest)", "312": "DigestAlgorithms::::getDigest(java.lang.String)", "313": "DigestAlgorithms::::getDigest(java.lang.String)", "314": "DigestAlgorithms::::getDigest(java.lang.String)", "315": "DigestAlgorithms::::getDigest(java.lang.String)", "316": "DigestAlgorithms::::getDigest(java.lang.String)", "317": "DigestAlgorithms::::getDigest(java.lang.String)", "318": "DigestAlgorithms::::getDigest(java.lang.String)", "319": "DigestAlgorithms::::getDigest(java.lang.String)", "320": "DigestAlgorithms::::getDigest(java.lang.String)", "321": "DigestAlgorithms::::getDigest(java.lang.String)", "322": "DigestAlgorithms::::getDigest(java.lang.String)", "323": "DigestAlgorithms::::getDigest(java.lang.String)", "324": "DigestAlgorithms::::getDigest(java.lang.String)", "325": "DigestAlgorithms::::getDigest(java.lang.String)", "333": "DigestAlgorithms::::normalizeDigestName(java.lang.String)", "334": "DigestAlgorithms::::normalizeDigestName(java.lang.String)", "335": "DigestAlgorithms::::normalizeDigestName(java.lang.String)", "336": "DigestAlgorithms::::normalizeDigestName(java.lang.String)", "337": "DigestAlgorithms::::normalizeDigestName(java.lang.String)", "338": "DigestAlgorithms::::normalizeDigestName(java.lang.String)", "347": "DigestAlgorithms::::getAllowedDigest(java.lang.String)", "348": "DigestAlgorithms::::getAllowedDigest(java.lang.String)", "349": "DigestAlgorithms::::getAllowedDigest(java.lang.String)", "350": "DigestAlgorithms::::getAllowedDigest(java.lang.String)", "351": "DigestAlgorithms::::getAllowedDigest(java.lang.String)", "352": "DigestAlgorithms::::getAllowedDigest(java.lang.String)", "353": "DigestAlgorithms::::getAllowedDigest(java.lang.String)", "354": "DigestAlgorithms::::getAllowedDigest(java.lang.String)", "355": "DigestAlgorithms::::getAllowedDigest(java.lang.String)", "356": "DigestAlgorithms::::getAllowedDigest(java.lang.String)", "357": "DigestAlgorithms::::getAllowedDigest(java.lang.String)", "358": "DigestAlgorithms::::getAllowedDigest(java.lang.String)", "359": "DigestAlgorithms::::getAllowedDigest(java.lang.String)", "360": "DigestAlgorithms::::getAllowedDigest(java.lang.String)", "361": "DigestAlgorithms::::getAllowedDigest(java.lang.String)", "369": "DigestAlgorithms::::getOutputBitLength(java.lang.String)", "370": "DigestAlgorithms::::getOutputBitLength(java.lang.String)", "371": "DigestAlgorithms::::getOutputBitLength(java.lang.String)", "372": "DigestAlgorithms::::getOutputBitLength(java.lang.String)", "373": "DigestAlgorithms::::getOutputBitLength(java.lang.String)", "374": "DigestAlgorithms::::getOutputBitLength(java.lang.String)", "375": "DigestAlgorithms::::getOutputBitLength(java.lang.String)"}, "test_reverse_method_lines_dic": {"44": "DigestAlgorithmsTest::::before()", "45": "DigestAlgorithmsTest::::before()", "46": "DigestAlgorithmsTest::::before()", "47": "DigestAlgorithmsTest::::before()", "49": "DigestAlgorithmsTest::::emptyStringOidGetDigestTest()", "50": "DigestAlgorithmsTest::::emptyStringOidGetDigestTest()", "51": "DigestAlgorithmsTest::::emptyStringOidGetDigestTest()", "52": "DigestAlgorithmsTest::::emptyStringOidGetDigestTest()", "53": "DigestAlgorithmsTest::::emptyStringOidGetDigestTest()", "55": "DigestAlgorithmsTest::::nonExistingOidGetDigestTest()", "56": "DigestAlgorithmsTest::::nonExistingOidGetDigestTest()", "57": "DigestAlgorithmsTest::::nonExistingOidGetDigestTest()", "58": "DigestAlgorithmsTest::::nonExistingOidGetDigestTest()", "59": "DigestAlgorithmsTest::::nonExistingOidGetDigestTest()", "61": "DigestAlgorithmsTest::::emptyStringNameGetAllowedDigestTest()", "62": "DigestAlgorithmsTest::::emptyStringNameGetAllowedDigestTest()", "63": "DigestAlgorithmsTest::::emptyStringNameGetAllowedDigestTest()", "64": "DigestAlgorithmsTest::::emptyStringNameGetAllowedDigestTest()", "66": "DigestAlgorithmsTest::::nonExistingNameGetAllowedDigestTest()", "67": "DigestAlgorithmsTest::::nonExistingNameGetAllowedDigestTest()", "68": "DigestAlgorithmsTest::::nonExistingNameGetAllowedDigestTest()", "69": "DigestAlgorithmsTest::::nonExistingNameGetAllowedDigestTest()", "71": "DigestAlgorithmsTest::::nullNameGetAllowedDigestTest()", "72": "DigestAlgorithmsTest::::nullNameGetAllowedDigestTest()", "73": "DigestAlgorithmsTest::::nullNameGetAllowedDigestTest()", "74": "DigestAlgorithmsTest::::nullNameGetAllowedDigestTest()", "76": "DigestAlgorithmsTest::::notAllowedOidGetDigestTest()", "77": "DigestAlgorithmsTest::::notAllowedOidGetDigestTest()", "78": "DigestAlgorithmsTest::::notAllowedOidGetDigestTest()", "79": "DigestAlgorithmsTest::::notAllowedOidGetDigestTest()", "80": "DigestAlgorithmsTest::::notAllowedOidGetDigestTest()", "81": "DigestAlgorithmsTest::::notAllowedOidGetDigestTest()", "82": "DigestAlgorithmsTest::::notAllowedOidGetDigestTest()", "83": "DigestAlgorithmsTest::::notAllowedOidGetDigestTest()", "85": "DigestAlgorithmsTest::::notAllowedNameGetAllowedDigestTest()", "86": "DigestAlgorithmsTest::::notAllowedNameGetAllowedDigestTest()", "87": "DigestAlgorithmsTest::::notAllowedNameGetAllowedDigestTest()", "88": "DigestAlgorithmsTest::::notAllowedNameGetAllowedDigestTest()", "89": "DigestAlgorithmsTest::::notAllowedNameGetAllowedDigestTest()", "90": "DigestAlgorithmsTest::::notAllowedNameGetAllowedDigestTest()", "91": "DigestAlgorithmsTest::::notAllowedNameGetAllowedDigestTest()", "92": "DigestAlgorithmsTest::::notAllowedNameGetAllowedDigestTest()"}, "tests": [{"test_lines": [49, 53], "covered_lines": [101, 106, 111, 116, 118, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 313, 314, 319, 320]}, {"test_lines": [55, 59], "covered_lines": [101, 106, 111, 116, 118, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 313, 314, 319, 320]}, {"test_lines": [61, 64], "covered_lines": [101, 106, 111, 116, 118, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 348, 352, 353, 356, 357, 360]}, {"test_lines": [66, 69], "covered_lines": [101, 106, 111, 116, 118, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 348, 352, 353, 356, 357, 360]}, {"test_lines": [71, 74], "covered_lines": [101, 106, 111, 116, 118, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 348, 349]}, {"test_lines": [76, 83], "covered_lines": [101, 106, 111, 116, 118, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 244, 313, 314, 316, 317, 318]}, {"test_lines": [85, 92], "covered_lines": [101, 106, 111, 116, 118, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 348, 352, 353, 356, 357, 358, 360]}]}, "/bernard/dataset_construction/prep/repos/itext-java/sign/src/main/java/com/itextpdf/signatures/PKCS7ExternalSignatureContainer.java": {"class_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.signatures;\n", "\n", "import com.itextpdf.bouncycastleconnector.BouncyCastleFactoryCreator;\n", "import com.itextpdf.kernel.exceptions.PdfException;\n", "import com.itextpdf.kernel.pdf.PdfDictionary;\n", "import com.itextpdf.kernel.pdf.PdfName;\n", "\n", "import java.io.IOException;\n", "import java.io.InputStream;\n", "import java.security.GeneralSecurityException;\n", "import java.security.PrivateKey;\n", "import java.security.cert.Certificate;\n", "import java.security.cert.X509Certificate;\n", "import java.util.ArrayList;\n", "import java.util.Collection;\n", "import java.util.List;\n", "\n", "/**\n", " * Implementation class for {@link IExternalSignatureContainer}.\n", " * This external signature container is implemented based on PCS7 standard and {@link PdfPKCS7} class.\n", " */\n", "public class PKCS7ExternalSignatureContainer implements IExternalSignatureContainer {\n", "\n", "    private final Certificate[] chain;\n", "    private final PrivateKey privateKey;\n", "    private final String hashAlgorithm;\n", "    private IOcspClient ocspClient;\n", "    private ICrlClient crlClient;\n", "    private ITSAClient tsaClient;\n", "    private PdfSigner.CryptoStandard sigType = PdfSigner.CryptoStandard.CMS;\n", "    private SignaturePolicyInfo signaturePolicy;\n", "\n", "    /**\n", "     * Creates an instance of PKCS7ExternalSignatureContainer\n", "     *\n", "     * @param privateKey    The private key to sign with\n", "     * @param chain         The certificate chain\n", "     * @param hashAlgorithm The hash algorithm to use\n", "     */\n", "    public PKCS7ExternalSignatureContainer(PrivateKey privateKey, Certificate[] chain, String hashAlgorithm) {\n", "        this.hashAlgorithm = hashAlgorithm;\n", "        this.chain = chain;\n", "        this.privateKey = privateKey;\n", "    }\n", "\n", "    /**\n", "     * {@inheritDoc}\n", "     *\n", "     * @param data {@inheritDoc}\n", "     *\n", "     * @return {@inheritDoc}\n", "     *\n", "     * @throws GeneralSecurityException {@inheritDoc}\n", "     */\n", "    @Override\n", "    public byte[] sign(InputStream data) throws GeneralSecurityException {\n", "        PdfPKCS7 sgn = new PdfPKCS7((PrivateKey) null, chain, hashAlgorithm, null, new BouncyCastleDigest(), false);\n", "        if (signaturePolicy != null) {\n", "            sgn.setSignaturePolicy(signaturePolicy);\n", "        }\n", "        byte[] hash;\n", "        try {\n", "            hash = DigestAlgorithms.digest(data, SignUtils.getMessageDigest(hashAlgorithm));\n", "        } catch (IOException e) {\n", "            throw new PdfException(e);\n", "        }\n", "\n", "        Collection<byte[]> crlBytes = null;\n", "        int i = 0;\n", "        while (crlClient != null && crlBytes == null && i < chain.length) {\n", "            crlBytes = crlClient.getEncoded((X509Certificate) chain[i++], null);\n", "        }\n", "\n", "        List<byte[]> ocspList = new ArrayList<>();\n", "        if (chain.length > 1 && ocspClient != null) {\n", "            for (int j = 0; j < chain.length - 1; ++j) {\n", "                byte[] ocsp = ocspClient.getEncoded((X509Certificate) chain[j], (X509Certificate) chain[j + 1], null);\n", "                if (ocsp != null && BouncyCastleFactoryCreator.getFactory().createCertificateStatus().getGood().equals(\n", "                        OcspClientBouncyCastle.getCertificateStatus(ocsp))) {\n", "                    ocspList.add(ocsp);\n", "                }\n", "            }\n", "        }\n", "        byte[] sh = sgn.getAuthenticatedAttributeBytes(hash, sigType, ocspList, crlBytes);\n", "\n", "        PrivateKeySignature pkSign = new PrivateKeySignature(privateKey, hashAlgorithm,\n", "                BouncyCastleFactoryCreator.getFactory().getProviderName());\n", "        byte[] signData = pkSign.sign(sh);\n", "\n", "        sgn.setExternalSignatureValue(\n", "                signData,\n", "                null,\n", "                pkSign.getSignatureAlgorithmName(),\n", "                pkSign.getSignatureMechanismParameters()\n", "        );\n", "\n", "        return sgn.getEncodedPKCS7(hash, sigType, tsaClient, ocspList, crlBytes);\n", "    }\n", "\n", "    /**\n", "     * {@inheritDoc}\n", "     *\n", "     * @param signDic {@inheritDoc}\n", "     */\n", "    @Override\n", "    public void modifySigningDictionary(PdfDictionary signDic) {\n", "        signDic.put(PdfName.Filter, PdfName.Adobe_PPKLite);\n", "        signDic.put(PdfName.SubFilter, sigType == PdfSigner.CryptoStandard.CADES\n", "                ? PdfName.ETSI_CAdES_DETACHED\n", "                : PdfName.Adbe_pkcs7_detached);\n", "    }\n", "\n", "    /**\n", "     * Set the OcspClient if you want revocation data collected trough Ocsp to be added to the signature\n", "     *\n", "     * @param ocspClient the client to be used\n", "     */\n", "    public void setOcspClient(IOcspClient ocspClient) {\n", "        this.ocspClient = ocspClient;\n", "    }\n", "\n", "    /**\n", "     * Set the CrlClient if you want revocation data collected trough Crl to be added to the signature\n", "     *\n", "     * @param crlClient the client to be used\n", "     */\n", "    public void setCrlClient(ICrlClient crlClient) {\n", "        this.crlClient = crlClient;\n", "    }\n", "\n", "    /**\n", "     * Set the TsaClient if you want a TSA timestamp added to the signature\n", "     *\n", "     * @param tsaClient the client to use\n", "     */\n", "    public void setTsaClient(ITSAClient tsaClient) {\n", "        this.tsaClient = tsaClient;\n", "    }\n", "\n", "    /**\n", "     * Set the signature policy if you want it to be added to the signature\n", "     *\n", "     * @param signaturePolicy the signature to be set.\n", "     */\n", "    public void setSignaturePolicy(SignaturePolicyInfo signaturePolicy) {\n", "        this.signaturePolicy = signaturePolicy;\n", "    }\n", "\n", "    /**\n", "     * Set a custom signature type, default value {@link PdfSigner.CryptoStandard#CMS}\n", "     *\n", "     * @param sigType the type  of signature to be created\n", "     */\n", "    public void setSignatureType(PdfSigner.CryptoStandard sigType) {\n", "        this.sigType = sigType;\n", "    }\n", "}\n"], "test_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.signatures;\n", "\n", "import com.itextpdf.bouncycastleconnector.BouncyCastleFactoryCreator;\n", "import com.itextpdf.commons.bouncycastle.IBouncyCastleFactory;\n", "import com.itextpdf.commons.bouncycastle.operator.AbstractOperatorCreationException;\n", "import com.itextpdf.commons.bouncycastle.pkcs.AbstractPKCSException;\n", "import com.itextpdf.commons.utils.Base64;\n", "import com.itextpdf.commons.utils.DateTimeUtil;\n", "import com.itextpdf.commons.utils.FileUtil;\n", "import com.itextpdf.io.source.ByteArrayOutputStream;\n", "import com.itextpdf.kernel.pdf.PdfDocument;\n", "import com.itextpdf.kernel.pdf.PdfReader;\n", "import com.itextpdf.kernel.pdf.PdfVersion;\n", "import com.itextpdf.kernel.pdf.PdfWriter;\n", "import com.itextpdf.kernel.pdf.StampingProperties;\n", "import com.itextpdf.kernel.pdf.WriterProperties;\n", "import com.itextpdf.signatures.testutils.PemFileHelper;\n", "import com.itextpdf.signatures.testutils.SignaturesCompareTool;\n", "import com.itextpdf.signatures.testutils.TimeTestUtil;\n", "import com.itextpdf.signatures.testutils.builder.TestCrlBuilder;\n", "import com.itextpdf.signatures.testutils.client.TestCrlClient;\n", "import com.itextpdf.signatures.testutils.client.TestOcspClient;\n", "import com.itextpdf.signatures.testutils.client.TestTsaClient;\n", "import com.itextpdf.test.ExtendedITextTest;\n", "import com.itextpdf.test.annotations.type.BouncyCastleUnitTest;\n", "\n", "import java.io.ByteArrayInputStream;\n", "import java.io.IOException;\n", "import java.security.GeneralSecurityException;\n", "import java.security.PrivateKey;\n", "import java.security.Security;\n", "import java.security.cert.Certificate;\n", "import java.security.cert.CertificateException;\n", "import java.security.cert.X509Certificate;\n", "import java.util.Arrays;\n", "import org.junit.Assert;\n", "import org.junit.Before;\n", "import org.junit.BeforeClass;\n", "import org.junit.Test;\n", "import org.junit.experimental.categories.Category;\n", "\n", "@Category(BouncyCastleUnitTest.class)\n", "public class PKCS7ExternalSignatureContainerTest extends ExtendedITextTest {\n", "    private static final IBouncyCastleFactory FACTORY = BouncyCastleFactoryCreator.getFactory();\n", "    private static final boolean FIPS_MODE = \"BCFIPS\".equals(FACTORY.getProviderName());\n", "\n", "    private static final String SOURCE_FOLDER = \"./src/test/resources/com/itextpdf/signatures/PKCS7ExternalSignatureContainerTest/\";\n", "    private static final String DESTINATION_FOLDER = \"./target/test/com/itextpdf/signatures/PKCS7ExternalSignatureContainerTest/\";\n", "    private static final String CERTS_SRC = \"./src/test/resources/com/itextpdf/signatures/certs/\";\n", "\n", "    private static final char[] PASSWORD = \"testpassphrase\".toCharArray();\n", "\n", "    private final static String POLICY_IDENTIFIER = \"2.16.724.1.3.1.1.2.1.9\";\n", "    private final static String POLICY_HASH_BASE64 = \"G7roucf600+f03r/o0bAOQ6WAs0=\";\n", "    private final static byte[] POLICY_HASH = Base64.decode(POLICY_HASH_BASE64);\n", "    private final static String POLICY_DIGEST_ALGORITHM = \"SHA-256\";\n", "    private final static String POLICY_URI = \"https://sede.060.gob.es/politica_de_firma_anexo_1.pdf\";\n", "\n", "    private Certificate[] chain;\n", "    private PrivateKey pk;\n", "\n", "    private X509Certificate caCert;\n", "    private PrivateKey caPrivateKey;\n", "\n", "    @BeforeClass\n", "    public static void before() {\n", "        Security.addProvider(FACTORY.getProvider());\n", "        createOrClearDestinationFolder(DESTINATION_FOLDER);\n", "    }\n", "\n", "    @Before\n", "    public void init()\n", "            throws IOException, CertificateException, AbstractPKCSException, AbstractOperatorCreationException {\n", "        pk = PemFileHelper.readFirstKey(CERTS_SRC + \"signCertRsa01.pem\", PASSWORD);\n", "        chain = PemFileHelper.readFirstChain(CERTS_SRC + \"signCertRsa01.pem\");\n", "\n", "        String caCertP12FileName = CERTS_SRC + \"rootRsa.pem\";\n", "        caCert = (X509Certificate) PemFileHelper.readFirstChain(caCertP12FileName)[0];\n", "        caPrivateKey = PemFileHelper.readFirstKey(caCertP12FileName, PASSWORD);\n", "    }\n", "\n", "    @Test\n", "    public void testTroughPdfSigner() throws IOException, GeneralSecurityException {\n", "        String outFileName = DESTINATION_FOLDER + \"testTroughPdfSigner.pdf\";\n", "        String cmpFileName = SOURCE_FOLDER + \"cmp_testTroughPdfSigner.pdf\";\n", "        PdfSigner pdfSigner = new PdfSigner(new PdfReader(createSimpleDocument()),\n", "                FileUtil.getFileOutputStream(outFileName), new StampingProperties());\n", "        PKCS7ExternalSignatureContainer pkcs7ExternalSignatureContainer = new PKCS7ExternalSignatureContainer(\n", "                pk, chain, DigestAlgorithms.SHA256);\n", "        pdfSigner.signExternalContainer(pkcs7ExternalSignatureContainer, 12000);\n", "\n", "        Assert.assertNull(SignaturesCompareTool.compareSignatures(outFileName, cmpFileName));\n", "    }\n", "\n", "    @Test\n", "    public void testTroughPdfSignerWithCrlClient() throws IOException, GeneralSecurityException {\n", "        String outFileName = DESTINATION_FOLDER + \"testTroughPdfSignerWithCrlClient.pdf\";\n", "        String cmpFileName = SOURCE_FOLDER + \"cmp_testTroughPdfSignerWithCrlClient.pdf\";\n", "        PdfSigner pdfSigner = new PdfSigner(new PdfReader(createSimpleDocument()),\n", "                FileUtil.getFileOutputStream(outFileName), new StampingProperties());\n", "        PKCS7ExternalSignatureContainer pkcs7ExternalSignatureContainer = new PKCS7ExternalSignatureContainer(\n", "                pk, chain, DigestAlgorithms.SHA256);\n", "\n", "        TestCrlClient crlClient = new TestCrlClient();\n", "\n", "        TestCrlBuilder crlBuilder = new TestCrlBuilder(caCert, caPrivateKey, DateTimeUtil.addDaysToDate(TimeTestUtil.TEST_DATE_TIME, -1));\n", "        crlClient.addBuilderForCertIssuer(crlBuilder);\n", "        pkcs7ExternalSignatureContainer.setCrlClient(crlClient);\n", "\n", "        pdfSigner.signExternalContainer(pkcs7ExternalSignatureContainer, 12000);\n", "\n", "        Assert.assertNull(SignaturesCompareTool.compareSignatures(outFileName, cmpFileName));\n", "    }\n", "\n", "    @Test\n", "    public void testTroughPdfSignerWithOcspClient() throws IOException, GeneralSecurityException {\n", "        String outFileName = DESTINATION_FOLDER + \"testTroughPdfSignerWithOcspClient.pdf\";\n", "        String cmpFileName = SOURCE_FOLDER + \"cmp_testTroughPdfSignerWithOcspClient.pdf\";\n", "        PdfSigner pdfSigner = new PdfSigner(new PdfReader(createSimpleDocument()),\n", "                FileUtil.getFileOutputStream(outFileName), new StampingProperties());\n", "        PKCS7ExternalSignatureContainer pkcs7ExternalSignatureContainer = new PKCS7ExternalSignatureContainer(\n", "                pk, chain, DigestAlgorithms.SHA256);\n", "\n", "        TestOcspClient ocspClient = new TestOcspClient();\n", "\n", "        ocspClient.addBuilderForCertIssuer(caCert, caPrivateKey);\n", "        pkcs7ExternalSignatureContainer.setOcspClient(ocspClient);\n", "        pdfSigner.signExternalContainer(pkcs7ExternalSignatureContainer, 12000);\n", "\n", "        Assert.assertNull(SignaturesCompareTool.compareSignatures(outFileName, cmpFileName));\n", "    }\n", "\n", "    @Test\n", "    public void testTroughPdfSignerWithTsaClient() throws IOException, GeneralSecurityException, AbstractOperatorCreationException, AbstractPKCSException {\n", "        String outFileName = DESTINATION_FOLDER + \"testTroughPdfSignerWithTsaClient.pdf\";\n", "        String cmpFileName = SOURCE_FOLDER + \"cmp_testTroughPdfSignerWithTsaClient.pdf\";\n", "        if (FIPS_MODE) {\n", "            cmpFileName = cmpFileName.replace(\".pdf\", \"_FIPS.pdf\");\n", "        }\n", "        PdfSigner pdfSigner = new PdfSigner(new PdfReader(createSimpleDocument()),\n", "                FileUtil.getFileOutputStream(outFileName), new StampingProperties());\n", "        PKCS7ExternalSignatureContainer pkcs7ExternalSignatureContainer = new PKCS7ExternalSignatureContainer(\n", "                pk, chain, DigestAlgorithms.SHA256);\n", "        String tsaCertP12FileName = CERTS_SRC + \"tsCertRsa.pem\";\n", "\n", "        pkcs7ExternalSignatureContainer.setTsaClient(prepareTsaClient(tsaCertP12FileName));\n", "\n", "        pdfSigner.signExternalContainer(pkcs7ExternalSignatureContainer, 12000);\n", "\n", "        Assert.assertNull(SignaturesCompareTool.compareSignatures(outFileName, cmpFileName));\n", "    }\n", "\n", "    @Test\n", "    public void testTroughPdfSignerWithCadesType() throws IOException, GeneralSecurityException {\n", "        String outFileName = DESTINATION_FOLDER + \"testTroughPdfSignerWithCadesType.pdf\";\n", "        String cmpFileName = SOURCE_FOLDER + \"cmp_testTroughPdfSignerWithCadesType.pdf\";\n", "        PdfSigner pdfSigner = new PdfSigner(new PdfReader(createSimpleDocument()),\n", "                FileUtil.getFileOutputStream(outFileName), new StampingProperties());\n", "        PKCS7ExternalSignatureContainer pkcs7ExternalSignatureContainer = new PKCS7ExternalSignatureContainer(\n", "                pk, chain, DigestAlgorithms.SHA256);\n", "        pkcs7ExternalSignatureContainer.setSignatureType(PdfSigner.CryptoStandard.CADES);\n", "        pdfSigner.signExternalContainer(pkcs7ExternalSignatureContainer, 12000);\n", "\n", "        Assert.assertNull(SignaturesCompareTool.compareSignatures(outFileName, cmpFileName));\n", "    }\n", "\n", "    @Test\n", "    public void testTroughPdfSignerWithSignaturePolicy() throws IOException, GeneralSecurityException {\n", "        String outFileName = DESTINATION_FOLDER + \"testTroughPdfSignerWithSignaturePolicy.pdf\";\n", "        String cmpFileName = SOURCE_FOLDER + \"cmp_testTroughPdfSignerWithSignaturePolicy.pdf\";\n", "        PdfSigner pdfSigner = new PdfSigner(new PdfReader(createSimpleDocument()),\n", "                FileUtil.getFileOutputStream(outFileName), new StampingProperties());\n", "        PKCS7ExternalSignatureContainer pkcs7ExternalSignatureContainer = new PKCS7ExternalSignatureContainer(\n", "                pk, chain, DigestAlgorithms.SHA256);\n", "        SignaturePolicyInfo policy = new SignaturePolicyInfo(POLICY_IDENTIFIER, POLICY_HASH, POLICY_DIGEST_ALGORITHM, POLICY_URI);\n", "\n", "        pkcs7ExternalSignatureContainer.setSignaturePolicy(policy);\n", "        pdfSigner.signExternalContainer(pkcs7ExternalSignatureContainer, 12000);\n", "\n", "        Assert.assertNull(SignaturesCompareTool.compareSignatures(outFileName, cmpFileName));\n", "    }\n", "\n", "    private static ByteArrayInputStream createSimpleDocument() {\n", "        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n", "        WriterProperties writerProperties = new WriterProperties().setPdfVersion(PdfVersion.PDF_2_0);\n", "        PdfDocument document = new PdfDocument(new PdfWriter(outputStream, writerProperties));\n", "        document.addNewPage();\n", "        document.close();\n", "        return new ByteArrayInputStream(outputStream.toByteArray());\n", "    }\n", "\n", "    private static TestTsaClient prepareTsaClient(String tsaCertP12FileName)\n", "            throws IOException, CertificateException, AbstractPKCSException, AbstractOperatorCreationException {\n", "        Certificate[] tsaChain = PemFileHelper.readFirstChain(tsaCertP12FileName);\n", "        PrivateKey tsaPrivateKey = PemFileHelper.readFirstKey(tsaCertP12FileName, PASSWORD);\n", "        return new TestTsaClient(Arrays.asList(tsaChain), tsaPrivateKey);\n", "    }\n", "}\n"], "method_lines_dic": {"PKCS7ExternalSignatureContainer::::sign(java.io.InputStream)": [77, 120], "PKCS7ExternalSignatureContainer::::setOcspClient(com.itextpdf.signatures.IOcspClient)": [140, 142], "PKCS7ExternalSignatureContainer::::setCrlClient(com.itextpdf.signatures.ICrlClient)": [149, 151], "PKCS7ExternalSignatureContainer::::setTsaClient(com.itextpdf.signatures.ITSAClient)": [158, 160], "PKCS7ExternalSignatureContainer::::setSignaturePolicy(com.itextpdf.signatures.SignaturePolicyInfo)": [167, 169], "PKCS7ExternalSignatureContainer::::setSignatureType(com.itextpdf.signatures.PdfSigner.CryptoStandard)": [176, 178]}, "test_method_lines_dic": {"PKCS7ExternalSignatureContainerTest::::before()": [87, 91], "PKCS7ExternalSignatureContainerTest::::init()": [93, 102], "PKCS7ExternalSignatureContainerTest::::testTroughPdfSigner()": [104, 115], "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithCrlClient()": [117, 135], "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithOcspClient()": [137, 153], "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithTsaClient()": [155, 173], "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithCadesType()": [175, 187], "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithSignaturePolicy()": [189, 203], "PKCS7ExternalSignatureContainerTest::::createSimpleDocument()": [205, 212], "PKCS7ExternalSignatureContainerTest::::prepareTsaClient(java.lang.String)": [214, 219]}, "reverse_method_lines_dic": {"77": "PKCS7ExternalSignatureContainer::::sign(java.io.InputStream)", "78": "PKCS7ExternalSignatureContainer::::sign(java.io.InputStream)", "79": "PKCS7ExternalSignatureContainer::::sign(java.io.InputStream)", "80": "PKCS7ExternalSignatureContainer::::sign(java.io.InputStream)", "81": "PKCS7ExternalSignatureContainer::::sign(java.io.InputStream)", "82": "PKCS7ExternalSignatureContainer::::sign(java.io.InputStream)", "83": "PKCS7ExternalSignatureContainer::::sign(java.io.InputStream)", "84": "PKCS7ExternalSignatureContainer::::sign(java.io.InputStream)", "85": "PKCS7ExternalSignatureContainer::::sign(java.io.InputStream)", "86": "PKCS7ExternalSignatureContainer::::sign(java.io.InputStream)", "87": "PKCS7ExternalSignatureContainer::::sign(java.io.InputStream)", "88": "PKCS7ExternalSignatureContainer::::sign(java.io.InputStream)", "89": "PKCS7ExternalSignatureContainer::::sign(java.io.InputStream)", "90": "PKCS7ExternalSignatureContainer::::sign(java.io.InputStream)", "91": "PKCS7ExternalSignatureContainer::::sign(java.io.InputStream)", "92": "PKCS7ExternalSignatureContainer::::sign(java.io.InputStream)", "93": "PKCS7ExternalSignatureContainer::::sign(java.io.InputStream)", "94": "PKCS7ExternalSignatureContainer::::sign(java.io.InputStream)", "95": "PKCS7ExternalSignatureContainer::::sign(java.io.InputStream)", "96": "PKCS7ExternalSignatureContainer::::sign(java.io.InputStream)", "97": "PKCS7ExternalSignatureContainer::::sign(java.io.InputStream)", "98": "PKCS7ExternalSignatureContainer::::sign(java.io.InputStream)", "99": "PKCS7ExternalSignatureContainer::::sign(java.io.InputStream)", "100": "PKCS7ExternalSignatureContainer::::sign(java.io.InputStream)", "101": "PKCS7ExternalSignatureContainer::::sign(java.io.InputStream)", "102": "PKCS7ExternalSignatureContainer::::sign(java.io.InputStream)", "103": "PKCS7ExternalSignatureContainer::::sign(java.io.InputStream)", "104": "PKCS7ExternalSignatureContainer::::sign(java.io.InputStream)", "105": "PKCS7ExternalSignatureContainer::::sign(java.io.InputStream)", "106": "PKCS7ExternalSignatureContainer::::sign(java.io.InputStream)", "107": "PKCS7ExternalSignatureContainer::::sign(java.io.InputStream)", "108": "PKCS7ExternalSignatureContainer::::sign(java.io.InputStream)", "109": "PKCS7ExternalSignatureContainer::::sign(java.io.InputStream)", "110": "PKCS7ExternalSignatureContainer::::sign(java.io.InputStream)", "111": "PKCS7ExternalSignatureContainer::::sign(java.io.InputStream)", "112": "PKCS7ExternalSignatureContainer::::sign(java.io.InputStream)", "113": "PKCS7ExternalSignatureContainer::::sign(java.io.InputStream)", "114": "PKCS7ExternalSignatureContainer::::sign(java.io.InputStream)", "115": "PKCS7ExternalSignatureContainer::::sign(java.io.InputStream)", "116": "PKCS7ExternalSignatureContainer::::sign(java.io.InputStream)", "117": "PKCS7ExternalSignatureContainer::::sign(java.io.InputStream)", "118": "PKCS7ExternalSignatureContainer::::sign(java.io.InputStream)", "119": "PKCS7ExternalSignatureContainer::::sign(java.io.InputStream)", "120": "PKCS7ExternalSignatureContainer::::sign(java.io.InputStream)", "140": "PKCS7ExternalSignatureContainer::::setOcspClient(com.itextpdf.signatures.IOcspClient)", "141": "PKCS7ExternalSignatureContainer::::setOcspClient(com.itextpdf.signatures.IOcspClient)", "142": "PKCS7ExternalSignatureContainer::::setOcspClient(com.itextpdf.signatures.IOcspClient)", "149": "PKCS7ExternalSignatureContainer::::setCrlClient(com.itextpdf.signatures.ICrlClient)", "150": "PKCS7ExternalSignatureContainer::::setCrlClient(com.itextpdf.signatures.ICrlClient)", "151": "PKCS7ExternalSignatureContainer::::setCrlClient(com.itextpdf.signatures.ICrlClient)", "158": "PKCS7ExternalSignatureContainer::::setTsaClient(com.itextpdf.signatures.ITSAClient)", "159": "PKCS7ExternalSignatureContainer::::setTsaClient(com.itextpdf.signatures.ITSAClient)", "160": "PKCS7ExternalSignatureContainer::::setTsaClient(com.itextpdf.signatures.ITSAClient)", "167": "PKCS7ExternalSignatureContainer::::setSignaturePolicy(com.itextpdf.signatures.SignaturePolicyInfo)", "168": "PKCS7ExternalSignatureContainer::::setSignaturePolicy(com.itextpdf.signatures.SignaturePolicyInfo)", "169": "PKCS7ExternalSignatureContainer::::setSignaturePolicy(com.itextpdf.signatures.SignaturePolicyInfo)", "176": "PKCS7ExternalSignatureContainer::::setSignatureType(com.itextpdf.signatures.PdfSigner.CryptoStandard)", "177": "PKCS7ExternalSignatureContainer::::setSignatureType(com.itextpdf.signatures.PdfSigner.CryptoStandard)", "178": "PKCS7ExternalSignatureContainer::::setSignatureType(com.itextpdf.signatures.PdfSigner.CryptoStandard)"}, "test_reverse_method_lines_dic": {"87": "PKCS7ExternalSignatureContainerTest::::before()", "88": "PKCS7ExternalSignatureContainerTest::::before()", "89": "PKCS7ExternalSignatureContainerTest::::before()", "90": "PKCS7ExternalSignatureContainerTest::::before()", "91": "PKCS7ExternalSignatureContainerTest::::before()", "93": "PKCS7ExternalSignatureContainerTest::::init()", "94": "PKCS7ExternalSignatureContainerTest::::init()", "95": "PKCS7ExternalSignatureContainerTest::::init()", "96": "PKCS7ExternalSignatureContainerTest::::init()", "97": "PKCS7ExternalSignatureContainerTest::::init()", "98": "PKCS7ExternalSignatureContainerTest::::init()", "99": "PKCS7ExternalSignatureContainerTest::::init()", "100": "PKCS7ExternalSignatureContainerTest::::init()", "101": "PKCS7ExternalSignatureContainerTest::::init()", "102": "PKCS7ExternalSignatureContainerTest::::init()", "104": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSigner()", "105": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSigner()", "106": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSigner()", "107": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSigner()", "108": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSigner()", "109": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSigner()", "110": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSigner()", "111": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSigner()", "112": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSigner()", "113": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSigner()", "114": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSigner()", "115": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSigner()", "117": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithCrlClient()", "118": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithCrlClient()", "119": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithCrlClient()", "120": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithCrlClient()", "121": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithCrlClient()", "122": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithCrlClient()", "123": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithCrlClient()", "124": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithCrlClient()", "125": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithCrlClient()", "126": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithCrlClient()", "127": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithCrlClient()", "128": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithCrlClient()", "129": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithCrlClient()", "130": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithCrlClient()", "131": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithCrlClient()", "132": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithCrlClient()", "133": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithCrlClient()", "134": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithCrlClient()", "135": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithCrlClient()", "137": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithOcspClient()", "138": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithOcspClient()", "139": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithOcspClient()", "140": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithOcspClient()", "141": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithOcspClient()", "142": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithOcspClient()", "143": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithOcspClient()", "144": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithOcspClient()", "145": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithOcspClient()", "146": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithOcspClient()", "147": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithOcspClient()", "148": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithOcspClient()", "149": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithOcspClient()", "150": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithOcspClient()", "151": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithOcspClient()", "152": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithOcspClient()", "153": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithOcspClient()", "155": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithTsaClient()", "156": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithTsaClient()", "157": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithTsaClient()", "158": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithTsaClient()", "159": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithTsaClient()", "160": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithTsaClient()", "161": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithTsaClient()", "162": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithTsaClient()", "163": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithTsaClient()", "164": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithTsaClient()", "165": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithTsaClient()", "166": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithTsaClient()", "167": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithTsaClient()", "168": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithTsaClient()", "169": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithTsaClient()", "170": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithTsaClient()", "171": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithTsaClient()", "172": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithTsaClient()", "173": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithTsaClient()", "175": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithCadesType()", "176": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithCadesType()", "177": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithCadesType()", "178": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithCadesType()", "179": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithCadesType()", "180": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithCadesType()", "181": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithCadesType()", "182": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithCadesType()", "183": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithCadesType()", "184": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithCadesType()", "185": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithCadesType()", "186": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithCadesType()", "187": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithCadesType()", "189": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithSignaturePolicy()", "190": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithSignaturePolicy()", "191": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithSignaturePolicy()", "192": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithSignaturePolicy()", "193": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithSignaturePolicy()", "194": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithSignaturePolicy()", "195": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithSignaturePolicy()", "196": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithSignaturePolicy()", "197": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithSignaturePolicy()", "198": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithSignaturePolicy()", "199": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithSignaturePolicy()", "200": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithSignaturePolicy()", "201": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithSignaturePolicy()", "202": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithSignaturePolicy()", "203": "PKCS7ExternalSignatureContainerTest::::testTroughPdfSignerWithSignaturePolicy()", "205": "PKCS7ExternalSignatureContainerTest::::createSimpleDocument()", "206": "PKCS7ExternalSignatureContainerTest::::createSimpleDocument()", "207": "PKCS7ExternalSignatureContainerTest::::createSimpleDocument()", "208": "PKCS7ExternalSignatureContainerTest::::createSimpleDocument()", "209": "PKCS7ExternalSignatureContainerTest::::createSimpleDocument()", "210": "PKCS7ExternalSignatureContainerTest::::createSimpleDocument()", "211": "PKCS7ExternalSignatureContainerTest::::createSimpleDocument()", "212": "PKCS7ExternalSignatureContainerTest::::createSimpleDocument()", "214": "PKCS7ExternalSignatureContainerTest::::prepareTsaClient(java.lang.String)", "215": "PKCS7ExternalSignatureContainerTest::::prepareTsaClient(java.lang.String)", "216": "PKCS7ExternalSignatureContainerTest::::prepareTsaClient(java.lang.String)", "217": "PKCS7ExternalSignatureContainerTest::::prepareTsaClient(java.lang.String)", "218": "PKCS7ExternalSignatureContainerTest::::prepareTsaClient(java.lang.String)", "219": "PKCS7ExternalSignatureContainerTest::::prepareTsaClient(java.lang.String)"}, "tests": [{"test_lines": [104, 115], "covered_lines": [52, 62, 63, 64, 65, 66, 79, 80, 85, 88, 90, 91, 92, 96, 97, 106, 108, 109, 110, 112, 115, 116, 119, 129, 130, 133]}, {"test_lines": [117, 135], "covered_lines": [52, 62, 63, 64, 65, 66, 79, 80, 85, 88, 90, 91, 92, 93, 96, 97, 106, 108, 109, 110, 112, 115, 116, 119, 129, 130, 133, 150, 151]}, {"test_lines": [137, 153], "covered_lines": [52, 62, 63, 64, 65, 66, 79, 80, 85, 88, 90, 91, 92, 96, 97, 98, 99, 100, 101, 102, 106, 108, 109, 110, 112, 115, 116, 119, 129, 130, 133, 141, 142]}, {"test_lines": [155, 173], "covered_lines": [52, 62, 63, 64, 65, 66, 79, 80, 85, 88, 90, 91, 92, 96, 97, 106, 108, 109, 110, 112, 115, 116, 119, 129, 130, 133, 159, 160]}, {"test_lines": [175, 187], "covered_lines": [52, 62, 63, 64, 65, 66, 79, 80, 85, 88, 90, 91, 92, 96, 97, 106, 108, 109, 110, 112, 115, 116, 119, 129, 130, 133, 177, 178]}, {"test_lines": [189, 203], "covered_lines": [52, 62, 63, 64, 65, 66, 79, 80, 81, 85, 88, 90, 91, 92, 96, 97, 106, 108, 109, 110, 112, 115, 116, 119, 129, 130, 133, 168, 169]}]}, "/bernard/dataset_construction/prep/repos/itext-java/sign/src/main/java/com/itextpdf/signatures/CertificateInfo.java": {"class_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.signatures;\n", "\n", "import com.itextpdf.bouncycastleconnector.BouncyCastleFactoryCreator;\n", "import com.itextpdf.commons.bouncycastle.IBouncyCastleFactory;\n", "import com.itextpdf.commons.bouncycastle.asn1.IASN1InputStream;\n", "import com.itextpdf.commons.bouncycastle.asn1.IASN1ObjectIdentifier;\n", "import com.itextpdf.commons.bouncycastle.asn1.IASN1Primitive;\n", "import com.itextpdf.commons.bouncycastle.asn1.IASN1Sequence;\n", "import com.itextpdf.commons.bouncycastle.asn1.IASN1Set;\n", "import com.itextpdf.kernel.exceptions.PdfException;\n", "\n", "import java.io.ByteArrayInputStream;\n", "import java.io.IOException;\n", "import java.security.cert.X509Certificate;\n", "import java.util.ArrayList;\n", "import java.util.Enumeration;\n", "import java.util.HashMap;\n", "import java.util.List;\n", "import java.util.Map;\n", "\n", "/**\n", " * Class containing static methods that allow you to get information from\n", " * an X509 Certificate: the issuer and the subject.\n", " */\n", "public class CertificateInfo {\n", "\n", "    private static final IBouncyCastleFactory BOUNCY_CASTLE_FACTORY = BouncyCastleFactoryCreator.getFactory();\n", "\n", "    // Inner classes\n", "\n", "    /**\n", "     * Class that holds an X509 name.\n", "     */\n", "    public static class X500Name {\n", "        /**\n", "         * Country code - StringType(SIZE(2)).\n", "         */\n", "        public static final IASN1ObjectIdentifier C = BOUNCY_CASTLE_FACTORY.createASN1ObjectIdentifier(\"2.5.4.6\");\n", "\n", "        /**\n", "         * Organization - StringType(SIZE(1..64)).\n", "         */\n", "        public static final IASN1ObjectIdentifier O = BOUNCY_CASTLE_FACTORY.createASN1ObjectIdentifier(\"2.5.4.10\");\n", "\n", "        /**\n", "         * Organizational unit name - StringType(SIZE(1..64)).\n", "         */\n", "        public static final IASN1ObjectIdentifier OU = BOUNCY_CASTLE_FACTORY.createASN1ObjectIdentifier(\"2.5.4.11\");\n", "\n", "        /**\n", "         * Title.\n", "         */\n", "        public static final IASN1ObjectIdentifier T = BOUNCY_CASTLE_FACTORY.createASN1ObjectIdentifier(\"2.5.4.12\");\n", "\n", "        /**\n", "         * Common name - StringType(SIZE(1..64)).\n", "         */\n", "        public static final IASN1ObjectIdentifier CN = BOUNCY_CASTLE_FACTORY.createASN1ObjectIdentifier(\"2.5.4.3\");\n", "\n", "        /**\n", "         * Device serial number name - StringType(SIZE(1..64)).\n", "         */\n", "        public static final IASN1ObjectIdentifier SN = BOUNCY_CASTLE_FACTORY.createASN1ObjectIdentifier(\"2.5.4.5\");\n", "\n", "        /**\n", "         * Locality name - StringType(SIZE(1..64)).\n", "         */\n", "        public static final IASN1ObjectIdentifier L = BOUNCY_CASTLE_FACTORY.createASN1ObjectIdentifier(\"2.5.4.7\");\n", "\n", "        /**\n", "         * State, or province name - StringType(SIZE(1..64)).\n", "         */\n", "        public static final IASN1ObjectIdentifier ST = BOUNCY_CASTLE_FACTORY.createASN1ObjectIdentifier(\"2.5.4.8\");\n", "\n", "        /**\n", "         * Naming attribute of type X520name.\n", "         */\n", "        public static final IASN1ObjectIdentifier SURNAME = BOUNCY_CASTLE_FACTORY.createASN1ObjectIdentifier(\"2.5.4.4\");\n", "\n", "        /**\n", "         * Naming attribute of type X520name.\n", "         */\n", "        public static final IASN1ObjectIdentifier GIVENNAME = BOUNCY_CASTLE_FACTORY.createASN1ObjectIdentifier(\n", "                \"2.5.4.42\");\n", "\n", "        /**\n", "         * Naming attribute of type X520name.\n", "         */\n", "        public static final IASN1ObjectIdentifier INITIALS = BOUNCY_CASTLE_FACTORY.createASN1ObjectIdentifier(\n", "                \"2.5.4.43\");\n", "\n", "        /**\n", "         * Naming attribute of type X520name.\n", "         */\n", "        public static final IASN1ObjectIdentifier GENERATION = BOUNCY_CASTLE_FACTORY.createASN1ObjectIdentifier(\n", "                \"2.5.4.44\");\n", "\n", "        /**\n", "         * Naming attribute of type X520name.\n", "         */\n", "        public static final IASN1ObjectIdentifier UNIQUE_IDENTIFIER = BOUNCY_CASTLE_FACTORY.createASN1ObjectIdentifier(\n", "                \"2.5.4.45\");\n", "\n", "        /**\n", "         * Email address (RSA PKCS#9 extension) - IA5String.\n", "         * <p>\n", "         * Note: if you're trying to be ultra orthodox, don't use this! It shouldn't be in here.\n", "         */\n", "        public static final IASN1ObjectIdentifier EmailAddress = BOUNCY_CASTLE_FACTORY.createASN1ObjectIdentifier(\n", "                \"1.2.840.113549.1.9.1\");\n", "\n", "        /**\n", "         * Email address in Verisign certificates.\n", "         */\n", "        public static final IASN1ObjectIdentifier E = EmailAddress;\n", "\n", "        /**\n", "         * Object identifier.\n", "         */\n", "        public static final IASN1ObjectIdentifier DC = BOUNCY_CASTLE_FACTORY.createASN1ObjectIdentifier(\n", "                \"0.9.2342.19200300.100.1.25\");\n", "\n", "        /**\n", "         * LDAP User id.\n", "         */\n", "        public static final IASN1ObjectIdentifier UID = BOUNCY_CASTLE_FACTORY.createASN1ObjectIdentifier(\n", "                \"0.9.2342.19200300.100.1.1\");\n", "\n", "        /**\n", "         * A Map with default symbols.\n", "         */\n", "        public static final Map<IASN1ObjectIdentifier, String> DefaultSymbols = new HashMap<>();\n", "\n", "        static {\n", "            DefaultSymbols.put(C, \"C\");\n", "            DefaultSymbols.put(O, \"O\");\n", "            DefaultSymbols.put(T, \"T\");\n", "            DefaultSymbols.put(OU, \"OU\");\n", "            DefaultSymbols.put(CN, \"CN\");\n", "            DefaultSymbols.put(L, \"L\");\n", "            DefaultSymbols.put(ST, \"ST\");\n", "            DefaultSymbols.put(SN, \"SN\");\n", "            DefaultSymbols.put(EmailAddress, \"E\");\n", "            DefaultSymbols.put(DC, \"DC\");\n", "            DefaultSymbols.put(UID, \"UID\");\n", "            DefaultSymbols.put(SURNAME, \"SURNAME\");\n", "            DefaultSymbols.put(GIVENNAME, \"GIVENNAME\");\n", "            DefaultSymbols.put(INITIALS, \"INITIALS\");\n", "            DefaultSymbols.put(GENERATION, \"GENERATION\");\n", "        }\n", "\n", "        /**\n", "         * A Map with values.\n", "         */\n", "        public Map<String, List<String>> values = new HashMap<>();\n", "\n", "        /**\n", "         * Constructs an X509 name.\n", "         *\n", "         * @param seq an ASN1 Sequence\n", "         */\n", "        public X500Name(IASN1Sequence seq) {\n", "            @SuppressWarnings(\"unchecked\")\n", "            Enumeration e = seq.getObjects();\n", "\n", "            while (e.hasMoreElements()) {\n", "                IASN1Set set = BOUNCY_CASTLE_FACTORY.createASN1Set(e.nextElement());\n", "\n", "                for (int i = 0; i < set.size(); i++) {\n", "                    IASN1Sequence s = BOUNCY_CASTLE_FACTORY.createASN1Sequence(set.getObjectAt(i));\n", "                    String id = DefaultSymbols.get(BOUNCY_CASTLE_FACTORY.createASN1ObjectIdentifier(s.getObjectAt(0)));\n", "                    if (id != null) {\n", "                        List<String> vs = values.get(id);\n", "                        if (vs == null) {\n", "                            vs = new ArrayList<>();\n", "                            values.put(id, vs);\n", "                        }\n", "                        vs.add((BOUNCY_CASTLE_FACTORY.createASN1String(s.getObjectAt(1))).getString());\n", "                    }\n", "                }\n", "            }\n", "        }\n", "\n", "        /**\n", "         * Constructs an X509 name.\n", "         *\n", "         * @param dirName a directory name\n", "         */\n", "        public X500Name(String dirName) {\n", "            CertificateInfo.X509NameTokenizer nTok = new CertificateInfo.X509NameTokenizer(dirName);\n", "\n", "            while (nTok.hasMoreTokens()) {\n", "                String token = nTok.nextToken();\n", "                int index = token.indexOf('=');\n", "\n", "                if (index == -1) {\n", "                    throw new IllegalArgumentException(/*MessageLocalization.getComposedMessage(\"badly.formated\n", "                    .directory.string\")*/);\n", "                }\n", "\n", "                String id = token.substring(0, index).toUpperCase();\n", "                String value = token.substring(index + 1);\n", "                List<String> vs = values.get(id);\n", "                if (vs == null) {\n", "                    vs = new ArrayList<>();\n", "                    values.put(id, vs);\n", "                }\n", "                vs.add(value);\n", "            }\n", "        }\n", "\n", "        /**\n", "         * Gets the first entry from the field array retrieved from the values Map.\n", "         *\n", "         * @param name the field name\n", "         *\n", "         * @return the (first) field value\n", "         */\n", "        public String getField(String name) {\n", "            List<String> vs = values.get(name);\n", "            return vs == null ? null : (String) vs.get(0);\n", "        }\n", "\n", "        /**\n", "         * Gets a field array from the values Map.\n", "         *\n", "         * @param name The field name\n", "         *\n", "         * @return List\n", "         */\n", "        public List<String> getFieldArray(String name) {\n", "            return values.get(name);\n", "        }\n", "\n", "        /**\n", "         * Getter for values.\n", "         *\n", "         * @return Map with the fields of the X509 name\n", "         */\n", "        public Map<String, List<String>> getFields() {\n", "            return values;\n", "        }\n", "\n", "        @Override\n", "        public String toString() {\n", "            return values.toString();\n", "        }\n", "    }\n", "\n", "    /**\n", "     * Class for breaking up an X500 Name into it's component tokens, similar to {@link java.util.StringTokenizer}.\n", "     * We need this class as some of the lightweight Java environments don't support classes such as StringTokenizer.\n", "     */\n", "    public static class X509NameTokenizer {\n", "        private String oid;\n", "        private int index;\n", "        private StringBuffer buf = new StringBuffer();\n", "\n", "        /**\n", "         * Creates an X509NameTokenizer.\n", "         *\n", "         * @param oid the oid that needs to be parsed\n", "         */\n", "        public X509NameTokenizer(String oid) {\n", "            this.oid = oid;\n", "            this.index = -1;\n", "        }\n", "\n", "        /**\n", "         * Checks if the tokenizer has any tokens left.\n", "         *\n", "         * @return true if there are any tokens left, false if there aren't\n", "         */\n", "        public boolean hasMoreTokens() {\n", "            return index != oid.length();\n", "        }\n", "\n", "        /**\n", "         * Returns the next token.\n", "         *\n", "         * @return the next token\n", "         */\n", "        public String nextToken() {\n", "            if (index == oid.length()) {\n", "                return null;\n", "            }\n", "\n", "            int end = index + 1;\n", "            boolean quoted = false;\n", "            boolean escaped = false;\n", "\n", "            buf.setLength(0);\n", "\n", "            while (end != oid.length()) {\n", "                char c = oid.charAt(end);\n", "\n", "                if (c == '\"') {\n", "                    if (escaped) {\n", "                        buf.append(c);\n", "                    } else {\n", "                        quoted = !quoted;\n", "                    }\n", "                    escaped = false;\n", "                } else {\n", "                    if (escaped || quoted) {\n", "                        buf.append(c);\n", "                        escaped = false;\n", "                    } else if (c == '\\\\') {\n", "                        escaped = true;\n", "                    } else if (c == ',') {\n", "                        break;\n", "                    } else {\n", "                        buf.append(c);\n", "                    }\n", "                }\n", "                end++;\n", "            }\n", "\n", "            index = end;\n", "            return buf.toString().trim();\n", "        }\n", "    }\n", "\n", "    // Certificate issuer\n", "\n", "    /**\n", "     * Get the issuer fields from an X509 Certificate.\n", "     *\n", "     * @param cert an X509Certificate\n", "     *\n", "     * @return an X500Name\n", "     */\n", "    public static X500Name getIssuerFields(X509Certificate cert) {\n", "        try {\n", "            return new X500Name(\n", "                    BOUNCY_CASTLE_FACTORY.createASN1Sequence(CertificateInfo.getIssuer(cert.getTBSCertificate())));\n", "        } catch (Exception e) {\n", "            throw new PdfException(e);\n", "        }\n", "    }\n", "\n", "    /**\n", "     * Get the \"issuer\" from the TBSCertificate bytes that are passed in.\n", "     *\n", "     * @param enc a TBSCertificate in a byte array\n", "     *\n", "     * @return an IASN1Primitive\n", "     */\n", "    public static IASN1Primitive getIssuer(byte[] enc) {\n", "        try {\n", "            IASN1Sequence seq;\n", "            try (IASN1InputStream in = BOUNCY_CASTLE_FACTORY.createASN1InputStream(new ByteArrayInputStream(enc))) {\n", "                seq = BOUNCY_CASTLE_FACTORY.createASN1Sequence(in.readObject());\n", "            }\n", "            return BOUNCY_CASTLE_FACTORY.createASN1Primitive(\n", "                    seq.getObjectAt(BOUNCY_CASTLE_FACTORY.createASN1TaggedObject(seq.getObjectAt(0)) == null ? 2 : 3));\n", "        } catch (IOException e) {\n", "            throw new PdfException(e);\n", "        }\n", "    }\n", "\n", "    // Certificate Subject\n", "\n", "    /**\n", "     * Get the subject fields from an X509 Certificate.\n", "     *\n", "     * @param cert an X509Certificate\n", "     *\n", "     * @return an X500Name\n", "     */\n", "    public static X500Name getSubjectFields(X509Certificate cert) {\n", "        try {\n", "            if (cert != null) {\n", "                return new X500Name(\n", "                        BOUNCY_CASTLE_FACTORY.createASN1Sequence(CertificateInfo.getSubject(cert.getTBSCertificate())));\n", "            }\n", "        } catch (Exception e) {\n", "            throw new PdfException(e);\n", "        }\n", "        return null;\n", "    }\n", "\n", "    /**\n", "     * Get the \"subject\" from the TBSCertificate bytes that are passed in.\n", "     *\n", "     * @param enc A TBSCertificate in a byte array\n", "     *\n", "     * @return a IASN1Primitive\n", "     */\n", "    public static IASN1Primitive getSubject(byte[] enc) {\n", "        try {\n", "            IASN1Sequence seq;\n", "            try (IASN1InputStream in = BOUNCY_CASTLE_FACTORY.createASN1InputStream(new ByteArrayInputStream(enc))) {\n", "                seq = BOUNCY_CASTLE_FACTORY.createASN1Sequence(in.readObject());\n", "            }\n", "            return BOUNCY_CASTLE_FACTORY.createASN1Primitive(\n", "                    seq.getObjectAt(BOUNCY_CASTLE_FACTORY.createASN1TaggedObject(seq.getObjectAt(0)) == null ? 4 : 5));\n", "        } catch (IOException e) {\n", "            throw new PdfException(e);\n", "        }\n", "    }\n", "}\n"], "test_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.signatures;\n", "\n", "import com.itextpdf.bouncycastleconnector.BouncyCastleFactoryCreator;\n", "import com.itextpdf.commons.bouncycastle.IBouncyCastleFactory;\n", "import com.itextpdf.kernel.exceptions.PdfException;\n", "import com.itextpdf.test.ExtendedITextTest;\n", "import com.itextpdf.test.annotations.type.BouncyCastleUnitTest;\n", "\n", "import java.util.Arrays;\n", "import java.util.Collections;\n", "import java.util.List;\n", "import java.util.Map;\n", "import org.junit.Assert;\n", "import org.junit.Test;\n", "import org.junit.experimental.categories.Category;\n", "\n", "@Category(BouncyCastleUnitTest.class)\n", "public class CertificateInfoTest extends ExtendedITextTest {\n", "\n", "    private static final IBouncyCastleFactory FACTORY = BouncyCastleFactoryCreator.getFactory();\n", "    private static final String EXPECTED_EXCEPTION_MESSAGE = FACTORY.getBouncyCastleFactoryTestUtil().getCertificateInfoTestConst();\n", "\n", "    @Test\n", "    public void X500InvalidDirectoryConstructorTest() {\n", "        Assert.assertThrows(IllegalArgumentException.class, () -> new CertificateInfo.X500Name(\"some_dir\"));\n", "    }\n", "\n", "    @Test\n", "    public void X500ValidDirectoryConstructorTest() {\n", "        CertificateInfo.X500Name name = new CertificateInfo.X500Name(\"some=dir,another=dir,some=value\");\n", "\n", "        Map<String, List<String>> values = name.getFields();\n", "        Assert.assertEquals(2, values.size());\n", "\n", "        Assert.assertEquals(Arrays.asList(\"dir\", \"value\"), values.get(\"SOME\"));\n", "        Assert.assertEquals(Collections.singletonList(\"dir\"), values.get(\"ANOTHER\"));\n", "    }\n", "\n", "    @Test\n", "    public void X500GetFieldTest() {\n", "        CertificateInfo.X500Name name = new CertificateInfo.X500Name(\"some=value,another=dir,some=dir\");\n", "\n", "        Assert.assertEquals(\"value\", name.getField(\"SOME\"));\n", "        Assert.assertEquals(\"dir\", name.getField(\"ANOTHER\"));\n", "    }\n", "\n", "    @Test\n", "    public void X500GetFieldArrayTest() {\n", "        CertificateInfo.X500Name name = new CertificateInfo.X500Name(\"some=value,another=dir,some=dir\");\n", "\n", "        Assert.assertEquals(Arrays.asList(\"value\", \"dir\"), name.getFieldArray(\"SOME\"));\n", "        Assert.assertEquals(Collections.singletonList(\"dir\"), name.getFieldArray(\"ANOTHER\"));\n", "    }\n", "\n", "    @Test\n", "    public void X509NameTokenizerNextTokenComplicatedTest() {\n", "        CertificateInfo.X509NameTokenizer tokenizer = new CertificateInfo.X509NameTokenizer(\"quoted\\\",\\\"comma=escaped\\\\,comma_escaped\\\\\\\"quote\");\n", "        String token = tokenizer.nextToken();\n", "\n", "        Assert.assertEquals(\"quoted,comma=escaped,comma_escaped\\\"quote\", token);\n", "        Assert.assertNull(tokenizer.nextToken());\n", "    }\n", "\n", "    @Test\n", "    public void getIssuerFieldsExceptionTest() {\n", "        Exception exception =\n", "                Assert.assertThrows(PdfException.class, () -> CertificateInfo.getIssuer(new byte[] {4, 8, 15, 16, 23, 42}));\n", "        Assert.assertEquals(EXPECTED_EXCEPTION_MESSAGE, exception.getCause().getMessage());\n", "    }\n", "\n", "    @Test\n", "    public void getSubjectExceptionTest() {\n", "        Exception exception =\n", "                Assert.assertThrows(PdfException.class, () -> CertificateInfo.getSubject(new byte[] {4, 8, 15, 16, 23, 42}));\n", "        Assert.assertEquals(EXPECTED_EXCEPTION_MESSAGE, exception.getCause().getMessage());\n", "    }\n", "}\n"], "method_lines_dic": {"CertificateInfo.X500Name::::getField(java.lang.String)": [241, 244], "CertificateInfo.X500Name::::getFieldArray(java.lang.String)": [253, 255], "CertificateInfo.X500Name::::getFields()": [262, 264], "CertificateInfo.X500Name::::toString()": [266, 269], "CertificateInfo.X509NameTokenizer::::hasMoreTokens()": [296, 298], "CertificateInfo.X509NameTokenizer::::nextToken()": [305, 343], "CertificateInfo::::getIssuerFields(java.security.cert.X509Certificate)": [355, 362], "CertificateInfo::::getIssuer(byte[])": [371, 382], "CertificateInfo::::getSubjectFields(java.security.cert.X509Certificate)": [393, 403], "CertificateInfo::::getSubject(byte[])": [412, 423]}, "test_method_lines_dic": {"CertificateInfoTest::::X500InvalidDirectoryConstructorTest()": [45, 48], "CertificateInfoTest::::X500ValidDirectoryConstructorTest()": [50, 59], "CertificateInfoTest::::X500GetFieldTest()": [61, 67], "CertificateInfoTest::::X500GetFieldArrayTest()": [69, 75], "CertificateInfoTest::::X509NameTokenizerNextTokenComplicatedTest()": [77, 84], "CertificateInfoTest::::getIssuerFieldsExceptionTest()": [86, 91], "CertificateInfoTest::::getSubjectExceptionTest()": [93, 98]}, "reverse_method_lines_dic": {"241": "CertificateInfo.X500Name::::getField(java.lang.String)", "242": "CertificateInfo.X500Name::::getField(java.lang.String)", "243": "CertificateInfo.X500Name::::getField(java.lang.String)", "244": "CertificateInfo.X500Name::::getField(java.lang.String)", "253": "CertificateInfo.X500Name::::getFieldArray(java.lang.String)", "254": "CertificateInfo.X500Name::::getFieldArray(java.lang.String)", "255": "CertificateInfo.X500Name::::getFieldArray(java.lang.String)", "262": "CertificateInfo.X500Name::::getFields()", "263": "CertificateInfo.X500Name::::getFields()", "264": "CertificateInfo.X500Name::::getFields()", "266": "CertificateInfo.X500Name::::toString()", "267": "CertificateInfo.X500Name::::toString()", "268": "CertificateInfo.X500Name::::toString()", "269": "CertificateInfo.X500Name::::toString()", "296": "CertificateInfo.X509NameTokenizer::::hasMoreTokens()", "297": "CertificateInfo.X509NameTokenizer::::hasMoreTokens()", "298": "CertificateInfo.X509NameTokenizer::::hasMoreTokens()", "305": "CertificateInfo.X509NameTokenizer::::nextToken()", "306": "CertificateInfo.X509NameTokenizer::::nextToken()", "307": "CertificateInfo.X509NameTokenizer::::nextToken()", "308": "CertificateInfo.X509NameTokenizer::::nextToken()", "309": "CertificateInfo.X509NameTokenizer::::nextToken()", "310": "CertificateInfo.X509NameTokenizer::::nextToken()", "311": "CertificateInfo.X509NameTokenizer::::nextToken()", "312": "CertificateInfo.X509NameTokenizer::::nextToken()", "313": "CertificateInfo.X509NameTokenizer::::nextToken()", "314": "CertificateInfo.X509NameTokenizer::::nextToken()", "315": "CertificateInfo.X509NameTokenizer::::nextToken()", "316": "CertificateInfo.X509NameTokenizer::::nextToken()", "317": "CertificateInfo.X509NameTokenizer::::nextToken()", "318": "CertificateInfo.X509NameTokenizer::::nextToken()", "319": "CertificateInfo.X509NameTokenizer::::nextToken()", "320": "CertificateInfo.X509NameTokenizer::::nextToken()", "321": "CertificateInfo.X509NameTokenizer::::nextToken()", "322": "CertificateInfo.X509NameTokenizer::::nextToken()", "323": "CertificateInfo.X509NameTokenizer::::nextToken()", "324": "CertificateInfo.X509NameTokenizer::::nextToken()", "325": "CertificateInfo.X509NameTokenizer::::nextToken()", "326": "CertificateInfo.X509NameTokenizer::::nextToken()", "327": "CertificateInfo.X509NameTokenizer::::nextToken()", "328": "CertificateInfo.X509NameTokenizer::::nextToken()", "329": "CertificateInfo.X509NameTokenizer::::nextToken()", "330": "CertificateInfo.X509NameTokenizer::::nextToken()", "331": "CertificateInfo.X509NameTokenizer::::nextToken()", "332": "CertificateInfo.X509NameTokenizer::::nextToken()", "333": "CertificateInfo.X509NameTokenizer::::nextToken()", "334": "CertificateInfo.X509NameTokenizer::::nextToken()", "335": "CertificateInfo.X509NameTokenizer::::nextToken()", "336": "CertificateInfo.X509NameTokenizer::::nextToken()", "337": "CertificateInfo.X509NameTokenizer::::nextToken()", "338": "CertificateInfo.X509NameTokenizer::::nextToken()", "339": "CertificateInfo.X509NameTokenizer::::nextToken()", "340": "CertificateInfo.X509NameTokenizer::::nextToken()", "341": "CertificateInfo.X509NameTokenizer::::nextToken()", "342": "CertificateInfo.X509NameTokenizer::::nextToken()", "343": "CertificateInfo.X509NameTokenizer::::nextToken()", "355": "CertificateInfo::::getIssuerFields(java.security.cert.X509Certificate)", "356": "CertificateInfo::::getIssuerFields(java.security.cert.X509Certificate)", "357": "CertificateInfo::::getIssuerFields(java.security.cert.X509Certificate)", "358": "CertificateInfo::::getIssuerFields(java.security.cert.X509Certificate)", "359": "CertificateInfo::::getIssuerFields(java.security.cert.X509Certificate)", "360": "CertificateInfo::::getIssuerFields(java.security.cert.X509Certificate)", "361": "CertificateInfo::::getIssuerFields(java.security.cert.X509Certificate)", "362": "CertificateInfo::::getIssuerFields(java.security.cert.X509Certificate)", "371": "CertificateInfo::::getIssuer(byte[])", "372": "CertificateInfo::::getIssuer(byte[])", "373": "CertificateInfo::::getIssuer(byte[])", "374": "CertificateInfo::::getIssuer(byte[])", "375": "CertificateInfo::::getIssuer(byte[])", "376": "CertificateInfo::::getIssuer(byte[])", "377": "CertificateInfo::::getIssuer(byte[])", "378": "CertificateInfo::::getIssuer(byte[])", "379": "CertificateInfo::::getIssuer(byte[])", "380": "CertificateInfo::::getIssuer(byte[])", "381": "CertificateInfo::::getIssuer(byte[])", "382": "CertificateInfo::::getIssuer(byte[])", "393": "CertificateInfo::::getSubjectFields(java.security.cert.X509Certificate)", "394": "CertificateInfo::::getSubjectFields(java.security.cert.X509Certificate)", "395": "CertificateInfo::::getSubjectFields(java.security.cert.X509Certificate)", "396": "CertificateInfo::::getSubjectFields(java.security.cert.X509Certificate)", "397": "CertificateInfo::::getSubjectFields(java.security.cert.X509Certificate)", "398": "CertificateInfo::::getSubjectFields(java.security.cert.X509Certificate)", "399": "CertificateInfo::::getSubjectFields(java.security.cert.X509Certificate)", "400": "CertificateInfo::::getSubjectFields(java.security.cert.X509Certificate)", "401": "CertificateInfo::::getSubjectFields(java.security.cert.X509Certificate)", "402": "CertificateInfo::::getSubjectFields(java.security.cert.X509Certificate)", "403": "CertificateInfo::::getSubjectFields(java.security.cert.X509Certificate)", "412": "CertificateInfo::::getSubject(byte[])", "413": "CertificateInfo::::getSubject(byte[])", "414": "CertificateInfo::::getSubject(byte[])", "415": "CertificateInfo::::getSubject(byte[])", "416": "CertificateInfo::::getSubject(byte[])", "417": "CertificateInfo::::getSubject(byte[])", "418": "CertificateInfo::::getSubject(byte[])", "419": "CertificateInfo::::getSubject(byte[])", "420": "CertificateInfo::::getSubject(byte[])", "421": "CertificateInfo::::getSubject(byte[])", "422": "CertificateInfo::::getSubject(byte[])", "423": "CertificateInfo::::getSubject(byte[])"}, "test_reverse_method_lines_dic": {"45": "CertificateInfoTest::::X500InvalidDirectoryConstructorTest()", "46": "CertificateInfoTest::::X500InvalidDirectoryConstructorTest()", "47": "CertificateInfoTest::::X500InvalidDirectoryConstructorTest()", "48": "CertificateInfoTest::::X500InvalidDirectoryConstructorTest()", "50": "CertificateInfoTest::::X500ValidDirectoryConstructorTest()", "51": "CertificateInfoTest::::X500ValidDirectoryConstructorTest()", "52": "CertificateInfoTest::::X500ValidDirectoryConstructorTest()", "53": "CertificateInfoTest::::X500ValidDirectoryConstructorTest()", "54": "CertificateInfoTest::::X500ValidDirectoryConstructorTest()", "55": "CertificateInfoTest::::X500ValidDirectoryConstructorTest()", "56": "CertificateInfoTest::::X500ValidDirectoryConstructorTest()", "57": "CertificateInfoTest::::X500ValidDirectoryConstructorTest()", "58": "CertificateInfoTest::::X500ValidDirectoryConstructorTest()", "59": "CertificateInfoTest::::X500ValidDirectoryConstructorTest()", "61": "CertificateInfoTest::::X500GetFieldTest()", "62": "CertificateInfoTest::::X500GetFieldTest()", "63": "CertificateInfoTest::::X500GetFieldTest()", "64": "CertificateInfoTest::::X500GetFieldTest()", "65": "CertificateInfoTest::::X500GetFieldTest()", "66": "CertificateInfoTest::::X500GetFieldTest()", "67": "CertificateInfoTest::::X500GetFieldTest()", "69": "CertificateInfoTest::::X500GetFieldArrayTest()", "70": "CertificateInfoTest::::X500GetFieldArrayTest()", "71": "CertificateInfoTest::::X500GetFieldArrayTest()", "72": "CertificateInfoTest::::X500GetFieldArrayTest()", "73": "CertificateInfoTest::::X500GetFieldArrayTest()", "74": "CertificateInfoTest::::X500GetFieldArrayTest()", "75": "CertificateInfoTest::::X500GetFieldArrayTest()", "77": "CertificateInfoTest::::X509NameTokenizerNextTokenComplicatedTest()", "78": "CertificateInfoTest::::X509NameTokenizerNextTokenComplicatedTest()", "79": "CertificateInfoTest::::X509NameTokenizerNextTokenComplicatedTest()", "80": "CertificateInfoTest::::X509NameTokenizerNextTokenComplicatedTest()", "81": "CertificateInfoTest::::X509NameTokenizerNextTokenComplicatedTest()", "82": "CertificateInfoTest::::X509NameTokenizerNextTokenComplicatedTest()", "83": "CertificateInfoTest::::X509NameTokenizerNextTokenComplicatedTest()", "84": "CertificateInfoTest::::X509NameTokenizerNextTokenComplicatedTest()", "86": "CertificateInfoTest::::getIssuerFieldsExceptionTest()", "87": "CertificateInfoTest::::getIssuerFieldsExceptionTest()", "88": "CertificateInfoTest::::getIssuerFieldsExceptionTest()", "89": "CertificateInfoTest::::getIssuerFieldsExceptionTest()", "90": "CertificateInfoTest::::getIssuerFieldsExceptionTest()", "91": "CertificateInfoTest::::getIssuerFieldsExceptionTest()", "93": "CertificateInfoTest::::getSubjectExceptionTest()", "94": "CertificateInfoTest::::getSubjectExceptionTest()", "95": "CertificateInfoTest::::getSubjectExceptionTest()", "96": "CertificateInfoTest::::getSubjectExceptionTest()", "97": "CertificateInfoTest::::getSubjectExceptionTest()", "98": "CertificateInfoTest::::getSubjectExceptionTest()"}, "tests": [{"test_lines": [45, 48], "covered_lines": [49, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 111, 117, 123, 131, 137, 142, 148, 154, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 177, 211, 212, 214, 215, 216, 218, 219, 279, 286, 287, 288, 289, 297, 306, 310, 311, 312, 314, 316, 317, 319, 327, 330, 332, 335, 338, 339, 341, 342]}, {"test_lines": [50, 59], "covered_lines": [49, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 111, 117, 123, 131, 137, 142, 148, 154, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 177, 211, 212, 214, 215, 216, 218, 223, 224, 225, 226, 227, 228, 230, 231, 232, 263, 279, 286, 287, 288, 289, 297, 306, 310, 311, 312, 314, 316, 317, 319, 327, 330, 332, 333, 335, 338, 339, 341, 342]}, {"test_lines": [61, 67], "covered_lines": [49, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 111, 117, 123, 131, 137, 142, 148, 154, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 177, 211, 212, 214, 215, 216, 218, 223, 224, 225, 226, 227, 228, 230, 231, 232, 242, 243, 279, 286, 287, 288, 289, 297, 306, 310, 311, 312, 314, 316, 317, 319, 327, 330, 332, 333, 335, 338, 339, 341, 342]}, {"test_lines": [69, 75], "covered_lines": [49, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 111, 117, 123, 131, 137, 142, 148, 154, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 177, 211, 212, 214, 215, 216, 218, 223, 224, 225, 226, 227, 228, 230, 231, 232, 254, 279, 286, 287, 288, 289, 297, 306, 310, 311, 312, 314, 316, 317, 319, 327, 330, 332, 333, 335, 338, 339, 341, 342]}, {"test_lines": [77, 84], "covered_lines": [279, 286, 287, 288, 289, 306, 307, 310, 311, 312, 314, 316, 317, 319, 320, 321, 323, 325, 327, 328, 329, 330, 331, 332, 335, 338, 339, 341, 342]}, {"test_lines": [86, 91], "covered_lines": [49, 374, 376, 379, 380]}, {"test_lines": [93, 98], "covered_lines": [49, 415, 417, 420, 421]}]}, "/bernard/dataset_construction/prep/repos/itext-java/sign/src/main/java/com/itextpdf/signatures/CrlClientOffline.java": {"class_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.signatures;\n", "\n", "import com.itextpdf.kernel.exceptions.PdfException;\n", "import java.security.cert.CRL;\n", "import java.security.cert.X509CRL;\n", "import java.security.cert.X509Certificate;\n", "import java.util.ArrayList;\n", "import java.util.Collection;\n", "import java.util.List;\n", "\n", "/**\n", " * An implementation of the CrlClient that handles offline\n", " * Certificate Revocation Lists.\n", " */\n", "public class CrlClientOffline implements ICrlClient {\n", "\n", "    /**\n", "     * The CRL as a byte array.\n", "     */\n", "    private List<byte[]> crls = new ArrayList<>();\n", "\n", "    /**\n", "     * Creates an instance of a CrlClient in case you\n", "     * have a local cache of the Certificate Revocation List.\n", "     *\n", "     * @param crlEncoded the CRL bytes\n", "     */\n", "    public CrlClientOffline(byte[] crlEncoded) {\n", "        crls.add(crlEncoded);\n", "    }\n", "\n", "    /**\n", "     * Creates an instance of a CrlClient in case you\n", "     * have a local cache of the Certificate Revocation List.\n", "     *\n", "     * @param crl a CRL object\n", "     */\n", "    public CrlClientOffline(CRL crl) {\n", "        try {\n", "            crls.add(((X509CRL) crl).getEncoded());\n", "        } catch (Exception ex) {\n", "            throw new PdfException(ex);\n", "        }\n", "    }\n", "\n", "    /**\n", "     * Returns the CRL bytes (the parameters are ignored).\n", "     *\n", "     * @see ICrlClient#getEncoded(java.security.cert.X509Certificate, java.lang.String)\n", "     */\n", "    public Collection<byte[]> getEncoded(X509Certificate checkCert, String url) {\n", "        return crls;\n", "    }\n", "\n", "}\n"], "test_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.signatures;\n", "\n", "import com.itextpdf.bouncycastleconnector.BouncyCastleFactoryCreator;\n", "import com.itextpdf.kernel.exceptions.KernelExceptionMessageConstant;\n", "import com.itextpdf.kernel.exceptions.PdfException;\n", "import com.itextpdf.kernel.pdf.PdfArray;\n", "import com.itextpdf.kernel.pdf.PdfDictionary;\n", "import com.itextpdf.kernel.pdf.PdfDocument;\n", "import com.itextpdf.kernel.pdf.PdfName;\n", "import com.itextpdf.kernel.pdf.PdfReader;\n", "import com.itextpdf.kernel.pdf.PdfStream;\n", "import com.itextpdf.signatures.testutils.PemFileHelper;\n", "import com.itextpdf.test.ExtendedITextTest;\n", "import com.itextpdf.test.annotations.type.UnitTest;\n", "\n", "import java.io.IOException;\n", "import java.security.GeneralSecurityException;\n", "import java.security.cert.CertificateException;\n", "import java.security.cert.X509Certificate;\n", "import java.util.Collection;\n", "import org.junit.Assert;\n", "import org.junit.Test;\n", "import org.junit.experimental.categories.Category;\n", "\n", "@Category(UnitTest.class)\n", "public class CrlClientOfflineTest extends ExtendedITextTest {\n", "\n", "    private static final String SOURCE_FOLDER = \"./src/test/resources/com/itextpdf/signatures/CrlClientOfflineTest/\";\n", "    private static final String CRL_DISTRIBUTION_POINT = \"http://www.example.com/\";\n", "    \n", "    private static Collection<byte[]> listOfByteArrays;\n", "\n", "    @Test\n", "    public void checkUnknownPdfExceptionWhenCrlIsNull() {\n", "        Exception e = Assert.assertThrows(PdfException.class,\n", "                () -> listOfByteArrays = new CrlClientOffline(\n", "                        BouncyCastleFactoryCreator.getFactory().createNullCrl()).getEncoded(null, \"\"));\n", "        Assert.assertEquals(KernelExceptionMessageConstant.UNKNOWN_PDF_EXCEPTION, e.getMessage());\n", "    }\n", "\n", "    @Test\n", "    public void getEncodedFromCrlEmptyByteArrayRealArgsTest() throws CertificateException, IOException {\n", "        validateCrlBytes(null, CRL_DISTRIBUTION_POINT);\n", "    }\n", "\n", "    @Test\n", "    public void getEncodedFromCrlEmptyByteArrayWithoutArgsTest() throws CertificateException, IOException {\n", "        validateCrlBytes(null, \"\");\n", "    }\n", "\n", "    @Test\n", "    public void getEncodedFromCrlEmptyByteArrayUrlIsEmptyTest() throws CertificateException, IOException {\n", "        validateCrlBytes(null, \"\");\n", "    }\n", "\n", "    @Test\n", "    public void getEncodedFromCrlEmptyByteArrayNonExistingUrlTest() throws CertificateException, IOException {\n", "        validateCrlBytes(null, \"http://nonexistingurl.com\");\n", "    }\n", "\n", "    @Test\n", "    public void getEncodedFromCrlEmptyByteArrayCertIsNullNonExistingUrlTest() throws CertificateException, IOException {\n", "        validateCrlBytes(null, \"http://nonexistingurl.com\");\n", "    }\n", "\n", "    @Test\n", "    public void getEncodedFromCrlEmptyByteArrayCertIsNullUrlIsRealTest() throws CertificateException, IOException {\n", "        validateCrlBytes(null, CRL_DISTRIBUTION_POINT);\n", "    }\n", "\n", "    @Test\n", "    public void getEncodedFromCrlObjectRealArgsTest() throws GeneralSecurityException, IOException {\n", "        String fileName = SOURCE_FOLDER + \"pdfWithCrl.pdf\";\n", "        byte[] testBytes = obtainCrlFromPdf(fileName);\n", "        validateCrlBytes(testBytes, CRL_DISTRIBUTION_POINT);\n", "    }\n", "\n", "    @Test\n", "    public void getEncodedFromCrlObjectWithoutCertAndUrlTest() throws GeneralSecurityException, IOException {\n", "        String fileName = SOURCE_FOLDER + \"pdfWithCrl.pdf\";\n", "        byte[] testBytes = obtainCrlFromPdf(fileName);\n", "        validateCrlBytes(testBytes, \"\");\n", "    }\n", "\n", "    @Test\n", "    public void getEncodedFromCrlObjectUrlIsEmptyTest() throws GeneralSecurityException, IOException {\n", "        String fileName = SOURCE_FOLDER + \"pdfWithCrl.pdf\";\n", "        byte[] testBytes = obtainCrlFromPdf(fileName);\n", "        validateCrlBytes(testBytes, \"\");\n", "    }\n", "\n", "    @Test\n", "    public void getEncodedFromCrlObjectNonExistingUrlTest() throws GeneralSecurityException, IOException {\n", "        String fileName = SOURCE_FOLDER + \"pdfWithCrl.pdf\";\n", "        byte[] testBytes = obtainCrlFromPdf(fileName);\n", "        validateCrlBytes(testBytes, \"http://nonexistingurl.com\");\n", "    }\n", "\n", "    @Test\n", "    public void getEncodedFromCrlObjectCertIsNullNonExistingUrlTest() throws GeneralSecurityException, IOException {\n", "        String fileName = SOURCE_FOLDER + \"pdfWithCrl.pdf\";\n", "        byte[] testBytes = obtainCrlFromPdf(fileName);\n", "        validateCrlBytes(testBytes, \"http://nonexistingurl.com\");\n", "    }\n", "\n", "    @Test\n", "    public void getEncodedFromCrlObjectCertIsNullUrlIsRealTest() throws GeneralSecurityException, IOException {\n", "        String fileName = SOURCE_FOLDER + \"pdfWithCrl.pdf\";\n", "        byte[] testBytes = obtainCrlFromPdf(fileName);\n", "        validateCrlBytes(testBytes, CRL_DISTRIBUTION_POINT);\n", "    }\n", "\n", "    //Get CRL from PDF. We expect the PDF to contain an array of CRLs from which we only take the first\n", "    private static byte[] obtainCrlFromPdf(String fileName)\n", "            throws IOException {\n", "        PdfDocument pdfDocument = new PdfDocument(new PdfReader(fileName));\n", "        PdfDictionary pdfDictionary = pdfDocument.getCatalog().getPdfObject().getAsDictionary(PdfName.DSS);\n", "        PdfArray crlArray = pdfDictionary.getAsArray(PdfName.CRLs);\n", "        PdfStream stream = crlArray.getAsStream(0);\n", "        return stream.getBytes();\n", "    }\n", "\n", "    private static void validateCrlBytes(byte[] testBytes, String crlDistPoint)\n", "            throws CertificateException, IOException {\n", "        CrlClientOffline crlClientOffline = new CrlClientOffline(testBytes);\n", "        X509Certificate checkCert =\n", "                (X509Certificate) PemFileHelper.readFirstChain(SOURCE_FOLDER + \"crlDistPoint.pem\")[0];\n", "\n", "        listOfByteArrays = crlClientOffline.getEncoded(checkCert, crlDistPoint);\n", "\n", "        //These checks are enough, because there is exactly one element in the collection,\n", "        //and these are the same test bytes \n", "        Assert.assertEquals(1, listOfByteArrays.size());\n", "        Assert.assertTrue(listOfByteArrays.contains(testBytes));\n", "    }\n", "}\n"], "method_lines_dic": {"CrlClientOffline::::getEncoded(java.security.cert.X509Certificate,java.lang.String)": [73, 75]}, "test_method_lines_dic": {"CrlClientOfflineTest::::checkUnknownPdfExceptionWhenCrlIsNull()": [55, 61], "CrlClientOfflineTest::::getEncodedFromCrlEmptyByteArrayRealArgsTest()": [63, 66], "CrlClientOfflineTest::::getEncodedFromCrlEmptyByteArrayWithoutArgsTest()": [68, 71], "CrlClientOfflineTest::::getEncodedFromCrlEmptyByteArrayUrlIsEmptyTest()": [73, 76], "CrlClientOfflineTest::::getEncodedFromCrlEmptyByteArrayNonExistingUrlTest()": [78, 81], "CrlClientOfflineTest::::getEncodedFromCrlEmptyByteArrayCertIsNullNonExistingUrlTest()": [83, 86], "CrlClientOfflineTest::::getEncodedFromCrlEmptyByteArrayCertIsNullUrlIsRealTest()": [88, 91], "CrlClientOfflineTest::::getEncodedFromCrlObjectRealArgsTest()": [93, 98], "CrlClientOfflineTest::::getEncodedFromCrlObjectWithoutCertAndUrlTest()": [100, 105], "CrlClientOfflineTest::::getEncodedFromCrlObjectUrlIsEmptyTest()": [107, 112], "CrlClientOfflineTest::::getEncodedFromCrlObjectNonExistingUrlTest()": [114, 119], "CrlClientOfflineTest::::getEncodedFromCrlObjectCertIsNullNonExistingUrlTest()": [121, 126], "CrlClientOfflineTest::::getEncodedFromCrlObjectCertIsNullUrlIsRealTest()": [128, 133], "CrlClientOfflineTest::::obtainCrlFromPdf(java.lang.String)": [136, 143], "CrlClientOfflineTest::::validateCrlBytes(byte[],java.lang.String)": [145, 157]}, "reverse_method_lines_dic": {"73": "CrlClientOffline::::getEncoded(java.security.cert.X509Certificate,java.lang.String)", "74": "CrlClientOffline::::getEncoded(java.security.cert.X509Certificate,java.lang.String)", "75": "CrlClientOffline::::getEncoded(java.security.cert.X509Certificate,java.lang.String)"}, "test_reverse_method_lines_dic": {"55": "CrlClientOfflineTest::::checkUnknownPdfExceptionWhenCrlIsNull()", "56": "CrlClientOfflineTest::::checkUnknownPdfExceptionWhenCrlIsNull()", "57": "CrlClientOfflineTest::::checkUnknownPdfExceptionWhenCrlIsNull()", "58": "CrlClientOfflineTest::::checkUnknownPdfExceptionWhenCrlIsNull()", "59": "CrlClientOfflineTest::::checkUnknownPdfExceptionWhenCrlIsNull()", "60": "CrlClientOfflineTest::::checkUnknownPdfExceptionWhenCrlIsNull()", "61": "CrlClientOfflineTest::::checkUnknownPdfExceptionWhenCrlIsNull()", "63": "CrlClientOfflineTest::::getEncodedFromCrlEmptyByteArrayRealArgsTest()", "64": "CrlClientOfflineTest::::getEncodedFromCrlEmptyByteArrayRealArgsTest()", "65": "CrlClientOfflineTest::::getEncodedFromCrlEmptyByteArrayRealArgsTest()", "66": "CrlClientOfflineTest::::getEncodedFromCrlEmptyByteArrayRealArgsTest()", "68": "CrlClientOfflineTest::::getEncodedFromCrlEmptyByteArrayWithoutArgsTest()", "69": "CrlClientOfflineTest::::getEncodedFromCrlEmptyByteArrayWithoutArgsTest()", "70": "CrlClientOfflineTest::::getEncodedFromCrlEmptyByteArrayWithoutArgsTest()", "71": "CrlClientOfflineTest::::getEncodedFromCrlEmptyByteArrayWithoutArgsTest()", "73": "CrlClientOfflineTest::::getEncodedFromCrlEmptyByteArrayUrlIsEmptyTest()", "74": "CrlClientOfflineTest::::getEncodedFromCrlEmptyByteArrayUrlIsEmptyTest()", "75": "CrlClientOfflineTest::::getEncodedFromCrlEmptyByteArrayUrlIsEmptyTest()", "76": "CrlClientOfflineTest::::getEncodedFromCrlEmptyByteArrayUrlIsEmptyTest()", "78": "CrlClientOfflineTest::::getEncodedFromCrlEmptyByteArrayNonExistingUrlTest()", "79": "CrlClientOfflineTest::::getEncodedFromCrlEmptyByteArrayNonExistingUrlTest()", "80": "CrlClientOfflineTest::::getEncodedFromCrlEmptyByteArrayNonExistingUrlTest()", "81": "CrlClientOfflineTest::::getEncodedFromCrlEmptyByteArrayNonExistingUrlTest()", "83": "CrlClientOfflineTest::::getEncodedFromCrlEmptyByteArrayCertIsNullNonExistingUrlTest()", "84": "CrlClientOfflineTest::::getEncodedFromCrlEmptyByteArrayCertIsNullNonExistingUrlTest()", "85": "CrlClientOfflineTest::::getEncodedFromCrlEmptyByteArrayCertIsNullNonExistingUrlTest()", "86": "CrlClientOfflineTest::::getEncodedFromCrlEmptyByteArrayCertIsNullNonExistingUrlTest()", "88": "CrlClientOfflineTest::::getEncodedFromCrlEmptyByteArrayCertIsNullUrlIsRealTest()", "89": "CrlClientOfflineTest::::getEncodedFromCrlEmptyByteArrayCertIsNullUrlIsRealTest()", "90": "CrlClientOfflineTest::::getEncodedFromCrlEmptyByteArrayCertIsNullUrlIsRealTest()", "91": "CrlClientOfflineTest::::getEncodedFromCrlEmptyByteArrayCertIsNullUrlIsRealTest()", "93": "CrlClientOfflineTest::::getEncodedFromCrlObjectRealArgsTest()", "94": "CrlClientOfflineTest::::getEncodedFromCrlObjectRealArgsTest()", "95": "CrlClientOfflineTest::::getEncodedFromCrlObjectRealArgsTest()", "96": "CrlClientOfflineTest::::getEncodedFromCrlObjectRealArgsTest()", "97": "CrlClientOfflineTest::::getEncodedFromCrlObjectRealArgsTest()", "98": "CrlClientOfflineTest::::getEncodedFromCrlObjectRealArgsTest()", "100": "CrlClientOfflineTest::::getEncodedFromCrlObjectWithoutCertAndUrlTest()", "101": "CrlClientOfflineTest::::getEncodedFromCrlObjectWithoutCertAndUrlTest()", "102": "CrlClientOfflineTest::::getEncodedFromCrlObjectWithoutCertAndUrlTest()", "103": "CrlClientOfflineTest::::getEncodedFromCrlObjectWithoutCertAndUrlTest()", "104": "CrlClientOfflineTest::::getEncodedFromCrlObjectWithoutCertAndUrlTest()", "105": "CrlClientOfflineTest::::getEncodedFromCrlObjectWithoutCertAndUrlTest()", "107": "CrlClientOfflineTest::::getEncodedFromCrlObjectUrlIsEmptyTest()", "108": "CrlClientOfflineTest::::getEncodedFromCrlObjectUrlIsEmptyTest()", "109": "CrlClientOfflineTest::::getEncodedFromCrlObjectUrlIsEmptyTest()", "110": "CrlClientOfflineTest::::getEncodedFromCrlObjectUrlIsEmptyTest()", "111": "CrlClientOfflineTest::::getEncodedFromCrlObjectUrlIsEmptyTest()", "112": "CrlClientOfflineTest::::getEncodedFromCrlObjectUrlIsEmptyTest()", "114": "CrlClientOfflineTest::::getEncodedFromCrlObjectNonExistingUrlTest()", "115": "CrlClientOfflineTest::::getEncodedFromCrlObjectNonExistingUrlTest()", "116": "CrlClientOfflineTest::::getEncodedFromCrlObjectNonExistingUrlTest()", "117": "CrlClientOfflineTest::::getEncodedFromCrlObjectNonExistingUrlTest()", "118": "CrlClientOfflineTest::::getEncodedFromCrlObjectNonExistingUrlTest()", "119": "CrlClientOfflineTest::::getEncodedFromCrlObjectNonExistingUrlTest()", "121": "CrlClientOfflineTest::::getEncodedFromCrlObjectCertIsNullNonExistingUrlTest()", "122": "CrlClientOfflineTest::::getEncodedFromCrlObjectCertIsNullNonExistingUrlTest()", "123": "CrlClientOfflineTest::::getEncodedFromCrlObjectCertIsNullNonExistingUrlTest()", "124": "CrlClientOfflineTest::::getEncodedFromCrlObjectCertIsNullNonExistingUrlTest()", "125": "CrlClientOfflineTest::::getEncodedFromCrlObjectCertIsNullNonExistingUrlTest()", "126": "CrlClientOfflineTest::::getEncodedFromCrlObjectCertIsNullNonExistingUrlTest()", "128": "CrlClientOfflineTest::::getEncodedFromCrlObjectCertIsNullUrlIsRealTest()", "129": "CrlClientOfflineTest::::getEncodedFromCrlObjectCertIsNullUrlIsRealTest()", "130": "CrlClientOfflineTest::::getEncodedFromCrlObjectCertIsNullUrlIsRealTest()", "131": "CrlClientOfflineTest::::getEncodedFromCrlObjectCertIsNullUrlIsRealTest()", "132": "CrlClientOfflineTest::::getEncodedFromCrlObjectCertIsNullUrlIsRealTest()", "133": "CrlClientOfflineTest::::getEncodedFromCrlObjectCertIsNullUrlIsRealTest()", "136": "CrlClientOfflineTest::::obtainCrlFromPdf(java.lang.String)", "137": "CrlClientOfflineTest::::obtainCrlFromPdf(java.lang.String)", "138": "CrlClientOfflineTest::::obtainCrlFromPdf(java.lang.String)", "139": "CrlClientOfflineTest::::obtainCrlFromPdf(java.lang.String)", "140": "CrlClientOfflineTest::::obtainCrlFromPdf(java.lang.String)", "141": "CrlClientOfflineTest::::obtainCrlFromPdf(java.lang.String)", "142": "CrlClientOfflineTest::::obtainCrlFromPdf(java.lang.String)", "143": "CrlClientOfflineTest::::obtainCrlFromPdf(java.lang.String)", "145": "CrlClientOfflineTest::::validateCrlBytes(byte[],java.lang.String)", "146": "CrlClientOfflineTest::::validateCrlBytes(byte[],java.lang.String)", "147": "CrlClientOfflineTest::::validateCrlBytes(byte[],java.lang.String)", "148": "CrlClientOfflineTest::::validateCrlBytes(byte[],java.lang.String)", "149": "CrlClientOfflineTest::::validateCrlBytes(byte[],java.lang.String)", "150": "CrlClientOfflineTest::::validateCrlBytes(byte[],java.lang.String)", "151": "CrlClientOfflineTest::::validateCrlBytes(byte[],java.lang.String)", "152": "CrlClientOfflineTest::::validateCrlBytes(byte[],java.lang.String)", "153": "CrlClientOfflineTest::::validateCrlBytes(byte[],java.lang.String)", "154": "CrlClientOfflineTest::::validateCrlBytes(byte[],java.lang.String)", "155": "CrlClientOfflineTest::::validateCrlBytes(byte[],java.lang.String)", "156": "CrlClientOfflineTest::::validateCrlBytes(byte[],java.lang.String)", "157": "CrlClientOfflineTest::::validateCrlBytes(byte[],java.lang.String)"}, "tests": [{"test_lines": [55, 61], "covered_lines": [42, 60, 63, 64]}, {"test_lines": [63, 66], "covered_lines": [42, 50, 51, 52, 74]}, {"test_lines": [68, 71], "covered_lines": [42, 50, 51, 52, 74]}, {"test_lines": [73, 76], "covered_lines": [42, 50, 51, 52, 74]}, {"test_lines": [78, 81], "covered_lines": [42, 50, 51, 52, 74]}, {"test_lines": [83, 86], "covered_lines": [42, 50, 51, 52, 74]}, {"test_lines": [88, 91], "covered_lines": [42, 50, 51, 52, 74]}, {"test_lines": [93, 98], "covered_lines": [42, 50, 51, 52, 74]}, {"test_lines": [100, 105], "covered_lines": [42, 50, 51, 52, 74]}, {"test_lines": [107, 112], "covered_lines": [42, 50, 51, 52, 74]}, {"test_lines": [114, 119], "covered_lines": [42, 50, 51, 52, 74]}, {"test_lines": [121, 126], "covered_lines": [42, 50, 51, 52, 74]}, {"test_lines": [128, 133], "covered_lines": [42, 50, 51, 52, 74]}]}, "/bernard/dataset_construction/prep/repos/itext-java/sign/src/main/java/com/itextpdf/signatures/LtvVerification.java": {"class_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.signatures;\n", "\n", "import com.itextpdf.bouncycastleconnector.BouncyCastleFactoryCreator;\n", "import com.itextpdf.commons.bouncycastle.IBouncyCastleFactory;\n", "import com.itextpdf.commons.bouncycastle.asn1.IDEROctetString;\n", "import com.itextpdf.commons.bouncycastle.asn1.ocsp.IOCSPResponse;\n", "import com.itextpdf.commons.bouncycastle.asn1.ocsp.IOCSPResponseStatus;\n", "import com.itextpdf.commons.bouncycastle.asn1.ocsp.IResponseBytes;\n", "import com.itextpdf.commons.bouncycastle.cert.ocsp.AbstractOCSPException;\n", "import com.itextpdf.commons.bouncycastle.cert.ocsp.IBasicOCSPResp;\n", "import com.itextpdf.commons.bouncycastle.operator.AbstractOperatorCreationException;\n", "import com.itextpdf.commons.utils.MessageFormatUtil;\n", "import com.itextpdf.io.font.PdfEncodings;\n", "import com.itextpdf.io.source.ByteBuffer;\n", "import com.itextpdf.kernel.exceptions.PdfException;\n", "import com.itextpdf.kernel.pdf.CompressionConstants;\n", "import com.itextpdf.kernel.pdf.PdfArray;\n", "import com.itextpdf.kernel.pdf.PdfCatalog;\n", "import com.itextpdf.kernel.pdf.PdfDeveloperExtension;\n", "import com.itextpdf.kernel.pdf.PdfDictionary;\n", "import com.itextpdf.kernel.pdf.PdfDocument;\n", "import com.itextpdf.kernel.pdf.PdfIndirectReference;\n", "import com.itextpdf.kernel.pdf.PdfName;\n", "import com.itextpdf.kernel.pdf.PdfObject;\n", "import com.itextpdf.kernel.pdf.PdfStream;\n", "import com.itextpdf.kernel.pdf.PdfString;\n", "import com.itextpdf.kernel.pdf.PdfVersion;\n", "import com.itextpdf.signatures.OID.X509Extensions;\n", "import com.itextpdf.signatures.exceptions.SignExceptionMessageConstant;\n", "import com.itextpdf.signatures.logs.SignLogMessageConstant;\n", "\n", "import java.io.ByteArrayInputStream;\n", "import java.io.IOException;\n", "import java.security.GeneralSecurityException;\n", "import java.security.MessageDigest;\n", "import java.security.NoSuchAlgorithmException;\n", "import java.security.cert.Certificate;\n", "import java.security.cert.CertificateException;\n", "import java.security.cert.CRLException;\n", "import java.security.cert.X509Certificate;\n", "import java.util.ArrayList;\n", "import java.util.Arrays;\n", "import java.util.Collection;\n", "import java.util.LinkedHashMap;\n", "import java.util.HashMap;\n", "import java.util.HashSet;\n", "import java.util.List;\n", "import java.util.Map;\n", "import java.util.Objects;\n", "import java.util.Set;\n", "\n", "import org.slf4j.Logger;\n", "import org.slf4j.LoggerFactory;\n", "\n", "/**\n", " * Add verification according to PAdES-LTV (part 4).\n", " */\n", "public class LtvVerification {\n", "\n", "    private static final IBouncyCastleFactory BOUNCY_CASTLE_FACTORY = BouncyCastleFactoryCreator.getFactory();\n", "\n", "    private static final Logger LOGGER = LoggerFactory.getLogger(LtvVerification.class);\n", "\n", "    private final PdfDocument document;\n", "    private final SignatureUtil sgnUtil;\n", "    private final Map<PdfName, ValidationData> validated = new HashMap<>();\n", "    private boolean used = false;\n", "    private String securityProviderCode = null;\n", "    private RevocationDataNecessity revocationDataNecessity = RevocationDataNecessity.OPTIONAL;\n", "    private IIssuingCertificateRetriever issuingCertificateRetriever = new DefaultIssuingCertificateRetriever();\n", "\n", "    /**\n", "     * What type of verification to include.\n", "     */\n", "    public enum Level {\n", "        /**\n", "         * Include only OCSP.\n", "         */\n", "        OCSP,\n", "        /**\n", "         * Include only CRL.\n", "         */\n", "        CRL,\n", "        /**\n", "         * Include both OCSP and CRL.\n", "         */\n", "        OCSP_CRL,\n", "        /**\n", "         * Include CRL only if OCSP can't be read.\n", "         */\n", "        OCSP_OPTIONAL_CRL\n", "    }\n", "\n", "    /**\n", "     * Options for how many certificates to include.\n", "     */\n", "    public enum CertificateOption {\n", "        /**\n", "         * Include verification just for the signing certificate.\n", "         */\n", "        SIGNING_CERTIFICATE,\n", "        /**\n", "         * Include verification for the whole chain of certificates.\n", "         */\n", "        WHOLE_CHAIN,\n", "        /**\n", "         * Include verification for the whole certificates chain, certificates used to create OCSP responses,\n", "         * CRL response certificates and timestamp certificates included in the signatures.\n", "         */\n", "        ALL_CERTIFICATES\n", "    }\n", "\n", "    /**\n", "     * Certificate inclusion in the DSS and VRI dictionaries in the CERT and CERTS\n", "     * keys.\n", "     */\n", "    public enum CertificateInclusion {\n", "        /**\n", "         * Include certificates in the DSS and VRI dictionaries.\n", "         */\n", "        YES,\n", "        /**\n", "         * Do not include certificates in the DSS and VRI dictionaries.\n", "         */\n", "        NO\n", "    }\n", "\n", "    /**\n", "     * Option to determine whether revocation information is required for the signing certificate.\n", "     */\n", "    public enum RevocationDataNecessity {\n", "        /**\n", "         * Require revocation information for the signing certificate.\n", "         */\n", "        REQUIRED_FOR_SIGNING_CERTIFICATE,\n", "        /**\n", "         * Revocation data for the signing certificate may be optional.\n", "         */\n", "        OPTIONAL\n", "    }\n", "\n", "    /**\n", "     * The verification constructor. This class should only be created with\n", "     * PdfStamper.getLtvVerification() otherwise the information will not be\n", "     * added to the Pdf.\n", "     *\n", "     * @param document The {@link PdfDocument} to apply the validation to.\n", "     */\n", "    public LtvVerification(PdfDocument document) {\n", "        this.document = document;\n", "        this.sgnUtil = new SignatureUtil(document);\n", "    }\n", "\n", "    /**\n", "     * The verification constructor. This class should only be created with\n", "     * PdfStamper.getLtvVerification() otherwise the information will not be\n", "     * added to the Pdf.\n", "     *\n", "     * @param document             The {@link PdfDocument} to apply the validation to.\n", "     * @param securityProviderCode Security provider to use\n", "     */\n", "    public LtvVerification(PdfDocument document, String securityProviderCode) {\n", "        this(document);\n", "        this.securityProviderCode = securityProviderCode;\n", "    }\n", "\n", "    /**\n", "     * Sets {@link RevocationDataNecessity} option to specify the necessity of revocation data.\n", "     *\n", "     * <p>\n", "     * Default value is {@link RevocationDataNecessity#OPTIONAL}.\n", "     *\n", "     * @param revocationDataNecessity {@link RevocationDataNecessity} value to set\n", "     *\n", "     * @return this {@link LtvVerification} instance.\n", "     */\n", "    public LtvVerification setRevocationDataNecessity(RevocationDataNecessity revocationDataNecessity) {\n", "        this.revocationDataNecessity = revocationDataNecessity;\n", "        return this;\n", "    }\n", "\n", "    /**\n", "     * Sets {@link IIssuingCertificateRetriever} instance needed to get CRL issuer certificates (using AIA extension).\n", "     *\n", "     * <p>\n", "     * Default value is {@link DefaultIssuingCertificateRetriever}.\n", "     *\n", "     * @param issuingCertificateRetriever {@link IIssuingCertificateRetriever} instance to set\n", "     *\n", "     * @return this {@link LtvVerification} instance.\n", "     */\n", "    public LtvVerification setIssuingCertificateRetriever(IIssuingCertificateRetriever issuingCertificateRetriever) {\n", "        this.issuingCertificateRetriever = issuingCertificateRetriever;\n", "        return this;\n", "    }\n", "\n", "    /**\n", "     * Add verification for a particular signature.\n", "     *\n", "     * @param signatureName the signature to validate (it may be a timestamp)\n", "     * @param ocsp          the interface to get the OCSP\n", "     * @param crl           the interface to get the CRL\n", "     * @param certOption    options as to how many certificates to include\n", "     * @param level         the validation options to include\n", "     * @param certInclude   certificate inclusion options\n", "     *\n", "     * @return true if a validation was generated, false otherwise\n", "     *\n", "     * @throws GeneralSecurityException when requested cryptographic algorithm or security provider\n", "     *                                  is not available\n", "     * @throws IOException              signals that an I/O exception has occurred\n", "     */\n", "    public boolean addVerification(String signatureName, IOcspClient ocsp, ICrlClient crl, CertificateOption certOption,\n", "            Level level, CertificateInclusion certInclude)\n", "            throws IOException, GeneralSecurityException {\n", "        if (used) {\n", "            throw new IllegalStateException(SignExceptionMessageConstant.VERIFICATION_ALREADY_OUTPUT);\n", "        }\n", "        PdfPKCS7 pk = sgnUtil.readSignatureData(signatureName, securityProviderCode);\n", "        LOGGER.info(\"Adding verification for \" + signatureName);\n", "        Certificate[] certificateChain = pk.getCertificates();\n", "        X509Certificate signingCert = pk.getSigningCertificate();\n", "        ValidationData validationData = new ValidationData();\n", "        Set<X509Certificate> processedCerts = new HashSet<>();\n", "        addRevocationDataForChain(signingCert, certificateChain, ocsp, crl, level, certInclude, certOption,\n", "                validationData, processedCerts);\n", "\n", "        if (certOption == CertificateOption.ALL_CERTIFICATES) {\n", "            Certificate[] timestampCertsChain = pk.getTimestampCertificates();\n", "            addRevocationDataForChain(signingCert, timestampCertsChain, ocsp, crl, level, certInclude, certOption,\n", "                    validationData, processedCerts);\n", "        }\n", "        if (certInclude == CertificateInclusion.YES) {\n", "            for (X509Certificate processedCert : processedCerts) {\n", "                validationData.certs.add(processedCert.getEncoded());\n", "            }\n", "        }\n", "        \n", "        if (validationData.crls.size() == 0 && validationData.ocsps.size() == 0) {\n", "            return false;\n", "        }\n", "        validated.put(getSignatureHashKey(signatureName), validationData);\n", "        return true;\n", "    }\n", "\n", "    /**\n", "     * Adds verification to the signature.\n", "     *\n", "     * @param signatureName name of the signature\n", "     * @param ocsps         collection of DER-encoded BasicOCSPResponses\n", "     * @param crls          collection of DER-encoded CRLs\n", "     * @param certs         collection of DER-encoded certificates\n", "     *\n", "     * @return boolean\n", "     *\n", "     * @throws IOException              signals that an I/O exception has occurred\n", "     * @throws GeneralSecurityException when requested cryptographic algorithm or security provider\n", "     *                                  is not available\n", "     */\n", "    public boolean addVerification(String signatureName, Collection<byte[]> ocsps, Collection<byte[]> crls,\n", "            Collection<byte[]> certs) throws IOException, GeneralSecurityException {\n", "        if (used) {\n", "            throw new IllegalStateException(SignExceptionMessageConstant.VERIFICATION_ALREADY_OUTPUT);\n", "        }\n", "        ValidationData vd = new ValidationData();\n", "        if (ocsps != null) {\n", "            for (byte[] ocsp : ocsps) {\n", "                vd.ocsps.add(LtvVerification.buildOCSPResponse(ocsp));\n", "            }\n", "        }\n", "        if (crls != null) {\n", "            vd.crls.addAll(crls);\n", "        }\n", "        if (certs != null) {\n", "            vd.certs.addAll(certs);\n", "        }\n", "        validated.put(getSignatureHashKey(signatureName), vd);\n", "        return true;\n", "    }\n", "\n", "    /**\n", "     * Merges the validation with any validation already in the document or creates a new one.\n", "     */\n", "    public void merge() {\n", "        if (used || validated.size() == 0) {\n", "            return;\n", "        }\n", "        used = true;\n", "        PdfDictionary catalog = document.getCatalog().getPdfObject();\n", "        PdfObject dss = catalog.get(PdfName.DSS);\n", "        if (dss == null) {\n", "            createDss();\n", "        } else {\n", "            updateDss();\n", "        }\n", "    }\n", "\n", "    /**\n", "     * Converts an array of bytes to a String of hexadecimal values\n", "     *\n", "     * @param bytes a byte array\n", "     *\n", "     * @return the same bytes expressed as hexadecimal values\n", "     */\n", "    public static String convertToHex(byte[] bytes) {\n", "        ByteBuffer buf = new ByteBuffer();\n", "        for (byte b : bytes) {\n", "            buf.appendHex(b);\n", "        }\n", "        return PdfEncodings.convertToString(buf.toByteArray(), null).toUpperCase();\n", "    }\n", "\n", "    /**\n", "     * Get the issuing certificate for a child certificate.\n", "     *\n", "     * @param cert  the certificate for which we search the parent\n", "     * @param certs an array with certificates that contains the parent\n", "     *\n", "     * @return the parent certificate\n", "     */\n", "    X509Certificate getParent(X509Certificate cert, Certificate[] certs) {\n", "        X509Certificate parent;\n", "        for (Certificate certificate : certs) {\n", "            parent = (X509Certificate) certificate;\n", "            if (!cert.getIssuerX500Principal().equals(parent.getSubjectX500Principal())) {\n", "                continue;\n", "            }\n", "            try {\n", "                cert.verify(parent.getPublicKey());\n", "                return parent;\n", "            } catch (Exception e) {\n", "                // do nothing\n", "            }\n", "        }\n", "        return null;\n", "    }\n", "\n", "    private void addRevocationDataForChain(X509Certificate signingCert, Certificate[] certChain, IOcspClient ocsp,\n", "            ICrlClient crl, Level level, CertificateInclusion certInclude, CertificateOption certOption,\n", "            ValidationData validationData, Set<X509Certificate> processedCerts)\n", "            throws CertificateException, IOException, CRLException {\n", "        Certificate[] fullChain = certOption == CertificateOption.ALL_CERTIFICATES ?\n", "                retrieveMissingCertificates(certChain) : certChain;\n", "        for (Certificate certificate : fullChain) {\n", "            X509Certificate cert = (X509Certificate) certificate;\n", "            LOGGER.info(MessageFormatUtil.format(\"Certificate: {0}\", BOUNCY_CASTLE_FACTORY.createX500Name(cert)));\n", "            if ((certOption == CertificateOption.SIGNING_CERTIFICATE && !cert.equals(signingCert))\n", "                    || processedCerts.contains(cert)) {\n", "                continue;\n", "            }\n", "            addRevocationDataForCertificate(signingCert, fullChain, cert, ocsp, crl, level, certInclude, certOption,\n", "                    validationData, processedCerts);\n", "        }\n", "    }\n", "\n", "    private void addRevocationDataForCertificate(X509Certificate signingCert, Certificate[] certificateChain,\n", "            X509Certificate cert, IOcspClient ocsp, ICrlClient crl, Level level, CertificateInclusion certInclude,\n", "            CertificateOption certOption, ValidationData validationData, Set<X509Certificate> processedCerts)\n", "            throws IOException, CertificateException, CRLException {\n", "        processedCerts.add(cert);\n", "        byte[] validityAssured = SignUtils.getExtensionValueByOid(cert, X509Extensions.VALIDITY_ASSURED_SHORT_TERM);\n", "        if (validityAssured != null) {\n", "            LOGGER.info(MessageFormatUtil.format(SignLogMessageConstant.REVOCATION_DATA_NOT_ADDED_VALIDITY_ASSURED,\n", "                    cert.getSubjectX500Principal()));\n", "            return;\n", "        }\n", "        byte[] ocspEnc = null;\n", "        boolean revocationDataAdded = false;\n", "        if (ocsp != null && level != Level.CRL) {\n", "            ocspEnc = ocsp.getEncoded(cert, getParent(cert, certificateChain), null);\n", "            if (ocspEnc != null && BOUNCY_CASTLE_FACTORY.createCertificateStatus().getGood().equals(\n", "                    OcspClientBouncyCastle.getCertificateStatus(ocspEnc))) {\n", "                validationData.ocsps.add(LtvVerification.buildOCSPResponse(ocspEnc));\n", "                revocationDataAdded = true;\n", "                LOGGER.info(\"OCSP added\");\n", "                if (certOption == CertificateOption.ALL_CERTIFICATES) {\n", "                    addRevocationDataForOcspCert(ocspEnc, signingCert, ocsp, crl, level, certInclude, certOption,\n", "                            validationData, processedCerts);\n", "                }\n", "            } else {\n", "                ocspEnc = null;\n", "            }\n", "        }\n", "        if (crl != null\n", "                && (level == Level.CRL || level == Level.OCSP_CRL\n", "                || (level == Level.OCSP_OPTIONAL_CRL && ocspEnc == null))) {\n", "            Collection<byte[]> cims = crl.getEncoded(cert, null);\n", "            if (cims != null) {\n", "                for (byte[] cim : cims) {\n", "                    boolean dup = false;\n", "                    for (byte[] b : validationData.crls) {\n", "                        if (Arrays.equals(b, cim)) {\n", "                            dup = true;\n", "                            break;\n", "                        }\n", "                    }\n", "                    if (!dup) {\n", "                        validationData.crls.add(cim);\n", "                        revocationDataAdded = true;\n", "                        LOGGER.info(\"CRL added\");\n", "                        if (certOption == CertificateOption.ALL_CERTIFICATES) {\n", "                            Certificate[] certsList = issuingCertificateRetriever.getCrlIssuerCertificates(\n", "                                    SignUtils.parseCrlFromStream(new ByteArrayInputStream(cim)));\n", "                            addRevocationDataForChain(signingCert, certsList, ocsp, crl,\n", "                                    level, certInclude, certOption, validationData, processedCerts);\n", "                        }\n", "                    }\n", "                }\n", "            }\n", "        }\n", "        if (revocationDataNecessity == RevocationDataNecessity.REQUIRED_FOR_SIGNING_CERTIFICATE &&\n", "                signingCert.equals(cert) && !revocationDataAdded) {\n", "            throw new PdfException(SignExceptionMessageConstant.NO_REVOCATION_DATA_FOR_SIGNING_CERTIFICATE);\n", "        }\n", "    }\n", "\n", "    private void addRevocationDataForOcspCert(byte[] ocspEnc, X509Certificate signingCert, IOcspClient ocsp,\n", "            ICrlClient crl, Level level, CertificateInclusion certInclude, CertificateOption certOption,\n", "            ValidationData validationData, Set<X509Certificate> processedCerts)\n", "            throws CertificateException, IOException, CRLException {\n", "        IBasicOCSPResp ocspResp = BOUNCY_CASTLE_FACTORY.createBasicOCSPResp(\n", "                BOUNCY_CASTLE_FACTORY.createBasicOCSPResponse(ocspEnc));\n", "        Iterable<X509Certificate> certs = SignUtils.getCertsFromOcspResponse(ocspResp);\n", "        List<X509Certificate> ocspCertsList = iterableToList(certs);\n", "        X509Certificate ocspSigningCert = null;\n", "        for (X509Certificate ocspCert : ocspCertsList) {\n", "            try {\n", "                if (SignUtils.isSignatureValid(ocspResp, ocspCert, BOUNCY_CASTLE_FACTORY.getProviderName())) {\n", "                    ocspSigningCert = ocspCert;\n", "                    break;\n", "                }\n", "            } catch (AbstractOperatorCreationException | AbstractOCSPException ignored) {\n", "                // Wasn't possible to check if this cert is signing one, skip.\n", "            }\n", "        }\n", "        if (ocspSigningCert != null && SignUtils.getExtensionValueByOid(\n", "                ocspSigningCert, X509Extensions.ID_PKIX_OCSP_NOCHECK) != null) {\n", "            // If ocsp_no_check extension is set on OCSP signing cert we shan't collect revocation data for this cert.\n", "            ocspCertsList.remove(ocspSigningCert);\n", "            processedCerts.add(ocspSigningCert);\n", "        }\n", "        addRevocationDataForChain(signingCert, ocspCertsList.toArray(new X509Certificate[0]),\n", "                ocsp, crl, level, certInclude, certOption, validationData, processedCerts);\n", "    }\n", "    \n", "    private static List<X509Certificate> iterableToList(Iterable<X509Certificate> iterable) {\n", "        List<X509Certificate> list = new ArrayList<>();\n", "        for (X509Certificate certificate : iterable) {\n", "            list.add(certificate);\n", "        }\n", "        return list;\n", "    }\n", "\n", "    private static byte[] buildOCSPResponse(byte[] basicOcspResponse) throws IOException {\n", "        IDEROctetString doctet = BOUNCY_CASTLE_FACTORY.createDEROctetString(basicOcspResponse);\n", "        IOCSPResponseStatus respStatus = BOUNCY_CASTLE_FACTORY.createOCSPResponseStatus(\n", "                BOUNCY_CASTLE_FACTORY.createOCSPRespBuilderInstance().getSuccessful());\n", "        IResponseBytes responseBytes = BOUNCY_CASTLE_FACTORY.createResponseBytes(\n", "                BOUNCY_CASTLE_FACTORY.createOCSPObjectIdentifiers().getIdPkixOcspBasic(), doctet);\n", "        IOCSPResponse ocspResponse = BOUNCY_CASTLE_FACTORY.createOCSPResponse(respStatus, responseBytes);\n", "        return BOUNCY_CASTLE_FACTORY.createOCSPResp(ocspResponse).getEncoded();\n", "    }\n", "\n", "    private PdfName getSignatureHashKey(String signatureName) throws NoSuchAlgorithmException {\n", "        PdfSignature sig = sgnUtil.getSignature(signatureName);\n", "        PdfString contents = sig.getContents();\n", "        byte[] bc = PdfEncodings.convertToBytes(contents.getValue(), null);\n", "        byte[] bt = hashBytesSha1(bc);\n", "        return new PdfName(convertToHex(bt));\n", "    }\n", "\n", "    private static byte[] hashBytesSha1(byte[] b) throws NoSuchAlgorithmException {\n", "        MessageDigest sh = MessageDigest.getInstance(\"SHA1\");\n", "        return sh.digest(b);\n", "    }\n", "\n", "    private void updateDss() {\n", "        PdfDictionary catalog = document.getCatalog().getPdfObject();\n", "        catalog.setModified();\n", "        PdfDictionary dss = catalog.getAsDictionary(PdfName.DSS);\n", "        PdfArray ocsps = dss.getAsArray(PdfName.OCSPs);\n", "        PdfArray crls = dss.getAsArray(PdfName.CRLs);\n", "        PdfArray certs = dss.getAsArray(PdfName.Certs);\n", "        dss.remove(PdfName.OCSPs);\n", "        dss.remove(PdfName.CRLs);\n", "        dss.remove(PdfName.Certs);\n", "        PdfDictionary vrim = dss.getAsDictionary(PdfName.VRI);\n", "        // delete old validations\n", "        if (vrim != null) {\n", "            for (PdfName n : vrim.keySet()) {\n", "                if (validated.containsKey(n)) {\n", "                    PdfDictionary vri = vrim.getAsDictionary(n);\n", "                    if (vri != null) {\n", "                        deleteOldReferences(ocsps, vri.getAsArray(PdfName.OCSP));\n", "                        deleteOldReferences(crls, vri.getAsArray(PdfName.CRL));\n", "                        deleteOldReferences(certs, vri.getAsArray(PdfName.Cert));\n", "                    }\n", "                }\n", "            }\n", "        }\n", "        if (ocsps == null) {\n", "            ocsps = new PdfArray();\n", "        }\n", "        if (crls == null) {\n", "            crls = new PdfArray();\n", "        }\n", "        if (certs == null) {\n", "            certs = new PdfArray();\n", "        }\n", "        if (vrim == null) {\n", "            vrim = new PdfDictionary();\n", "        }\n", "        outputDss(dss, vrim, ocsps, crls, certs);\n", "    }\n", "\n", "    private static void deleteOldReferences(PdfArray all, PdfArray toDelete) {\n", "        if (all == null || toDelete == null) {\n", "            return;\n", "        }\n", "\n", "        for (PdfObject pi : toDelete) {\n", "            final PdfIndirectReference pir = pi.getIndirectReference();\n", "\n", "            for (int i = 0; i < all.size(); i++) {\n", "                final PdfIndirectReference pod = all.get(i).getIndirectReference();\n", "\n", "                if (Objects.equals(pir, pod)) {\n", "                    all.remove(i);\n", "                    i--;\n", "                }\n", "            }\n", "        }\n", "    }\n", "\n", "    private void createDss() {\n", "        outputDss(new PdfDictionary(), new PdfDictionary(), new PdfArray(), new PdfArray(), new PdfArray());\n", "    }\n", "\n", "    private void outputDss(PdfDictionary dss, PdfDictionary vrim, PdfArray ocsps, PdfArray crls, PdfArray certs) {\n", "        PdfCatalog catalog = document.getCatalog();\n", "        if (document.getPdfVersion().compareTo(PdfVersion.PDF_2_0) < 0) {\n", "            catalog.addDeveloperExtension(PdfDeveloperExtension.ESIC_1_7_EXTENSIONLEVEL5);\n", "        }\n", "        for (PdfName vkey : validated.keySet()) {\n", "            PdfArray ocsp = new PdfArray();\n", "            PdfArray crl = new PdfArray();\n", "            PdfArray cert = new PdfArray();\n", "            PdfDictionary vri = new PdfDictionary();\n", "            for (byte[] b : validated.get(vkey).crls) {\n", "                PdfStream ps = new PdfStream(b);\n", "                ps.setCompressionLevel(CompressionConstants.DEFAULT_COMPRESSION);\n", "                ps.makeIndirect(document);\n", "                crl.add(ps);\n", "                crls.add(ps);\n", "                crls.setModified();\n", "            }\n", "            for (byte[] b : validated.get(vkey).ocsps) {\n", "                PdfStream ps = new PdfStream(b);\n", "                ps.setCompressionLevel(CompressionConstants.DEFAULT_COMPRESSION);\n", "                ocsp.add(ps);\n", "                ocsps.add(ps);\n", "                ocsps.setModified();\n", "            }\n", "            for (byte[] b : validated.get(vkey).certs) {\n", "                PdfStream ps = new PdfStream(b);\n", "                ps.setCompressionLevel(CompressionConstants.DEFAULT_COMPRESSION);\n", "                ps.makeIndirect(document);\n", "                cert.add(ps);\n", "                certs.add(ps);\n", "                certs.setModified();\n", "            }\n", "            if (ocsp.size() > 0) {\n", "                ocsp.makeIndirect(document);\n", "                vri.put(PdfName.OCSP, ocsp);\n", "            }\n", "            if (crl.size() > 0) {\n", "                crl.makeIndirect(document);\n", "                vri.put(PdfName.CRL, crl);\n", "            }\n", "            if (cert.size() > 0) {\n", "                cert.makeIndirect(document);\n", "                vri.put(PdfName.Cert, cert);\n", "            }\n", "            vri.makeIndirect(document);\n", "            vrim.put(vkey, vri);\n", "        }\n", "        vrim.makeIndirect(document);\n", "        vrim.setModified();\n", "        dss.put(PdfName.VRI, vrim);\n", "        if (ocsps.size() > 0) {\n", "            ocsps.makeIndirect(document);\n", "            dss.put(PdfName.OCSPs, ocsps);\n", "        }\n", "        if (crls.size() > 0) {\n", "            crls.makeIndirect(document);\n", "            dss.put(PdfName.CRLs, crls);\n", "        }\n", "        if (certs.size() > 0) {\n", "            certs.makeIndirect(document);\n", "            dss.put(PdfName.Certs, certs);\n", "        }\n", "\n", "        dss.makeIndirect(document);\n", "        dss.setModified();\n", "        catalog.put(PdfName.DSS, dss);\n", "    }\n", "\n", "    private static class ValidationData {\n", "        public List<byte[]> crls = new ArrayList<>();\n", "        public List<byte[]> ocsps = new ArrayList<>();\n", "        public List<byte[]> certs = new ArrayList<>();\n", "    }\n", "\n", "    private Certificate[] retrieveMissingCertificates(Certificate[] certChain) {\n", "        Map<String, Certificate> restoredChain = new LinkedHashMap<>();\n", "        Certificate[] subChain;\n", "        for (Certificate certificate : certChain) {\n", "            subChain = issuingCertificateRetriever.retrieveMissingCertificates(new Certificate[]{certificate});\n", "            for (Certificate cert : subChain) {\n", "                restoredChain.put(((X509Certificate) cert).getSubjectX500Principal().getName(), cert);\n", "            }\n", "        }\n", "        return restoredChain.values().toArray(new Certificate[0]);\n", "    }\n", "\n", "}\n"], "test_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.signatures;\n", "\n", "import com.itextpdf.bouncycastleconnector.BouncyCastleFactoryCreator;\n", "import com.itextpdf.commons.bouncycastle.IBouncyCastleFactory;\n", "import com.itextpdf.commons.bouncycastle.operator.AbstractOperatorCreationException;\n", "import com.itextpdf.commons.bouncycastle.pkcs.AbstractPKCSException;\n", "import com.itextpdf.kernel.pdf.PdfArray;\n", "import com.itextpdf.kernel.pdf.PdfDictionary;\n", "import com.itextpdf.kernel.pdf.PdfDocument;\n", "import com.itextpdf.kernel.pdf.PdfIndirectReference;\n", "import com.itextpdf.kernel.pdf.PdfName;\n", "import com.itextpdf.kernel.pdf.PdfReader;\n", "import com.itextpdf.kernel.pdf.PdfWriter;\n", "import com.itextpdf.kernel.pdf.StampingProperties;\n", "import com.itextpdf.signatures.LtvVerification.CertificateInclusion;\n", "import com.itextpdf.signatures.LtvVerification.CertificateOption;\n", "import com.itextpdf.signatures.LtvVerification.Level;\n", "import com.itextpdf.signatures.exceptions.SignExceptionMessageConstant;\n", "import com.itextpdf.signatures.testutils.PemFileHelper;\n", "import com.itextpdf.signatures.testutils.client.TestCrlClient;\n", "import com.itextpdf.test.ExtendedITextTest;\n", "import com.itextpdf.test.LogLevelConstants;\n", "import com.itextpdf.test.annotations.LogMessage;\n", "import com.itextpdf.test.annotations.LogMessages;\n", "import com.itextpdf.test.annotations.type.BouncyCastleUnitTest;\n", "\n", "import java.io.ByteArrayInputStream;\n", "import java.io.ByteArrayOutputStream;\n", "import java.io.IOException;\n", "import java.security.GeneralSecurityException;\n", "import java.security.PrivateKey;\n", "import java.security.Security;\n", "import java.security.cert.Certificate;\n", "import java.security.cert.X509Certificate;\n", "import java.util.ArrayList;\n", "import java.util.List;\n", "import org.junit.Assert;\n", "import org.junit.BeforeClass;\n", "import org.junit.Ignore;\n", "import org.junit.Test;\n", "import org.junit.experimental.categories.Category;\n", "\n", "@Category(BouncyCastleUnitTest.class)\n", "public class LtvVerificationTest extends ExtendedITextTest {\n", "    private static final IBouncyCastleFactory BOUNCY_CASTLE_FACTORY = BouncyCastleFactoryCreator.getFactory();\n", "\n", "    private static final String SOURCE_FOLDER = \"./src/test/resources/com/itextpdf/signatures/LtvVerificationTest/\";\n", "    private static final String SRC_PDF = SOURCE_FOLDER + \"pdfWithDssDictionary.pdf\";\n", "    private static final String SIG_FIELD_NAME = \"Signature1\";\n", "    private static final String CRL_DISTRIBUTION_POINT = \"http://example.com\";\n", "    private static final String CERT_FOLDER_PATH = \"./src/test/resources/com/itextpdf/signatures/certs/\";\n", "    private static final char[] PASSWORD = \"testpassphrase\".toCharArray();\n", "\n", "    private static LtvVerification TEST_VERIFICATION;\n", "\n", "    @BeforeClass\n", "    public static void before() throws IOException {\n", "        Security.addProvider(BOUNCY_CASTLE_FACTORY.getProvider());\n", "        PdfDocument pdfDoc = new PdfDocument(new PdfReader(SRC_PDF));\n", "        TEST_VERIFICATION = new LtvVerification(pdfDoc);\n", "    }\n", "\n", "    @Test\n", "    @LogMessages(messages = {\n", "            @LogMessage(messageTemplate = \"Adding verification for TestSignature\", logLevel = LogLevelConstants.INFO),\n", "            @LogMessage(messageTemplate = \"Certificate: C=BY,L=Minsk,O=iText,OU=test,CN=iTextTestRsaCert01\", logLevel = LogLevelConstants.INFO),\n", "            @LogMessage(messageTemplate = \"CRL added\", logLevel = LogLevelConstants.INFO),\n", "            @LogMessage(messageTemplate = \"Certificate: C=BY,L=Minsk,O=iText,OU=test,CN=iTextTestRoot\", logLevel = LogLevelConstants.INFO)\n", "    })\n", "    public void addVerificationToDocumentWithAlreadyExistedDss()\n", "            throws IOException, GeneralSecurityException, AbstractPKCSException, AbstractOperatorCreationException {\n", "        String input = SOURCE_FOLDER + \"signingCertHasChainWithOcspOnlyForChildCert.pdf\";\n", "        String signatureHash = \"C5CC1458AAA9B8BAB0677F9EA409983B577178A3\";\n", "\n", "        try (PdfDocument pdfDocument = new PdfDocument(new PdfReader(input))) {\n", "            PdfDictionary dss = pdfDocument.getCatalog().getPdfObject().getAsDictionary(PdfName.DSS);\n", "            Assert.assertNull(dss.get(PdfName.CRLs));\n", "            PdfArray ocsps = dss.getAsArray(PdfName.OCSPs);\n", "            Assert.assertEquals(1, ocsps.size());\n", "            PdfIndirectReference pir = ocsps.get(0).getIndirectReference();\n", "\n", "            PdfDictionary vri = dss.getAsDictionary(PdfName.VRI);\n", "            Assert.assertEquals(1, vri.entrySet().size());\n", "            PdfDictionary vriElem = vri.getAsDictionary(new PdfName(signatureHash));\n", "            Assert.assertEquals(1, vriElem.entrySet().size());\n", "            final PdfArray vriOcsp = vriElem.getAsArray(PdfName.OCSP);\n", "            Assert.assertEquals(1, vriOcsp.size());\n", "            Assert.assertEquals(pir, vriOcsp.get(0).getIndirectReference());\n", "        }\n", "\n", "        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n", "        try (PdfDocument pdfDocument = new PdfDocument(new PdfReader(input), new PdfWriter(baos), new StampingProperties().useAppendMode())) {\n", "            LtvVerification verification = new LtvVerification(pdfDocument);\n", "\n", "            String rootCertPath = CERT_FOLDER_PATH + \"rootRsa.pem\";\n", "            X509Certificate caCert = (X509Certificate) PemFileHelper.readFirstChain(rootCertPath)[0];\n", "            PrivateKey caPrivateKey = PemFileHelper.readFirstKey(rootCertPath, PASSWORD);\n", "\n", "            verification.addVerification(\"TestSignature\", null, new TestCrlClient().addBuilderForCertIssuer(caCert, caPrivateKey),\n", "                    CertificateOption.SIGNING_CERTIFICATE, Level.CRL, CertificateInclusion.NO);\n", "\n", "            verification.merge();\n", "        }\n", "\n", "        try (PdfDocument pdfDocument = new PdfDocument(new PdfReader(new ByteArrayInputStream(baos.toByteArray())))) {\n", "            PdfDictionary dss = pdfDocument.getCatalog().getPdfObject().getAsDictionary(PdfName.DSS);\n", "            Assert.assertNull(dss.get(PdfName.OCSPs));\n", "            PdfArray crls = dss.getAsArray(PdfName.CRLs);\n", "            Assert.assertEquals(1, crls.size());\n", "            PdfIndirectReference pir = crls.get(0).getIndirectReference();\n", "\n", "            PdfDictionary vri = dss.getAsDictionary(PdfName.VRI);\n", "            Assert.assertEquals(1, vri.entrySet().size());\n", "            PdfDictionary vriElem = vri.getAsDictionary(new PdfName(signatureHash));\n", "            Assert.assertEquals(1, vriElem.entrySet().size());\n", "            final PdfArray vriCrl = vriElem.getAsArray(PdfName.CRL);\n", "            Assert.assertEquals(1, vriCrl.size());\n", "            Assert.assertEquals(pir, vriCrl.get(0).getIndirectReference());\n", "        }\n", "    }\n", "\n", "    @Test\n", "    public void validateSigNameWithEmptyByteArrayCrlOcspCertTest() throws IOException, GeneralSecurityException {\n", "        List<byte[]> crls = new ArrayList<>();\n", "        crls.add(new byte[0]);\n", "        List<byte[]> ocsps = new ArrayList<>();\n", "        ocsps.add(new byte[0]);\n", "        List<byte[]> certs = new ArrayList<>();\n", "        certs.add(new byte[0]);\n", "\n", "        Assert.assertTrue(TEST_VERIFICATION.addVerification(SIG_FIELD_NAME, ocsps, crls, certs));\n", "    }\n", "    \n", "    @Test\n", "    public void tryAddVerificationAfterMerge() throws IOException, GeneralSecurityException {\n", "        List<byte[]> crls = new ArrayList<>();\n", "        crls.add(new byte[0]);\n", "        List<byte[]> ocsps = new ArrayList<>();\n", "        ocsps.add(new byte[0]);\n", "        List<byte[]> certs = new ArrayList<>();\n", "        certs.add(new byte[0]);\n", "\n", "        try (PdfDocument pdfDoc = new PdfDocument(new PdfReader(SRC_PDF), new PdfWriter(new ByteArrayOutputStream()))) {\n", "            LtvVerification verificationWithWriter = new LtvVerification(pdfDoc);\n", "\n", "            verificationWithWriter.merge();\n", "            verificationWithWriter.addVerification(SIG_FIELD_NAME, ocsps, crls, certs);\n", "            \n", "            verificationWithWriter.merge();\n", "            Exception exception1 = Assert.assertThrows(IllegalStateException.class,\n", "                    () -> verificationWithWriter.addVerification(SIG_FIELD_NAME, ocsps, crls, certs));\n", "            Assert.assertEquals(SignExceptionMessageConstant.VERIFICATION_ALREADY_OUTPUT, exception1.getMessage());\n", "\n", "            verificationWithWriter.merge();\n", "            Exception exception2 = Assert.assertThrows(IllegalStateException.class,\n", "                    () -> verificationWithWriter.addVerification(null, null, null,\n", "                            CertificateOption.SIGNING_CERTIFICATE, Level.CRL, CertificateInclusion.YES));\n", "            Assert.assertEquals(SignExceptionMessageConstant.VERIFICATION_ALREADY_OUTPUT, exception2.getMessage());\n", "        }\n", "    }\n", "\n", "    @Test\n", "    public void validateSigNameWithNullCrlOcspCertTest() throws GeneralSecurityException, IOException {\n", "        Assert.assertTrue(TEST_VERIFICATION.addVerification(SIG_FIELD_NAME, null, null, null));\n", "    }\n", "\n", "    @Test\n", "    //TODO DEVSIX-5696 Sign: NPE is thrown because no such a signature\n", "    public void exceptionWhenValidateNonExistentSigNameTest() {\n", "        Assert.assertThrows(NullPointerException.class,\n", "                () -> TEST_VERIFICATION.addVerification(\"nonExistentSigName\", null, null, null));\n", "    }\n", "\n", "    @Test\n", "    //TODO DEVSIX-5696 Sign: NPE is thrown because no such a signature\n", "    public void exceptionWhenValidateParticularNonExistentSigNameTest() {\n", "        Assert.assertThrows(NullPointerException.class,\n", "                () -> TEST_VERIFICATION.addVerification(\"nonExistentSigName\", null, null,\n", "                        CertificateOption.SIGNING_CERTIFICATE, Level.OCSP_CRL, CertificateInclusion.YES));\n", "    }\n", "\n", "    @Test\n", "    @LogMessages(messages = {\n", "            @LogMessage(messageTemplate = \"Looking for CRL for certificate C=BY,L=Minsk,O=iText,OU=test,\"\n", "                    + \"CN=iTextTestRsaCert01\", logLevel = LogLevelConstants.INFO),\n", "            @LogMessage(messageTemplate = \"Skipped CRL url: Passed url can not be null\", logLevel =\n", "                    LogLevelConstants.INFO)\n", "    })\n", "    public void validateSigNameWithoutCrlAndOcspSigningOcspCrlYesTest() throws GeneralSecurityException, IOException {\n", "        validateOptionLevelInclusion(null, CertificateOption.SIGNING_CERTIFICATE, Level.OCSP_CRL,\n", "                CertificateInclusion.YES, false);\n", "    }\n", "\n", "    @Test\n", "    public void validateSigNameWithoutCrlAndOcspSigningOcspYesTest() throws GeneralSecurityException, IOException {\n", "        validateOptionLevelInclusion(null, CertificateOption.SIGNING_CERTIFICATE, Level.OCSP, CertificateInclusion.YES,\n", "                false);\n", "    }\n", "\n", "    @Test\n", "    @LogMessages(messages = {\n", "            @LogMessage(messageTemplate = \"Looking for CRL for certificate C=BY,L=Minsk,O=iText,OU=test,CN=iTextTestRsaCert01\", logLevel =\n", "                    LogLevelConstants.INFO),\n", "            @LogMessage(messageTemplate = \"Skipped CRL url: Passed url can not be null.\", logLevel =\n", "                    LogLevelConstants.INFO)\n", "    })\n", "    public void validateSigNameWithoutCrlAndOcspSigningCrlYesTest() throws GeneralSecurityException, IOException {\n", "        validateOptionLevelInclusion(null, CertificateOption.SIGNING_CERTIFICATE, Level.CRL, CertificateInclusion.YES,\n", "                false);\n", "    }\n", "\n", "    @Test\n", "    @LogMessages(messages = {\n", "            @LogMessage(messageTemplate = \"Looking for CRL for certificate C=BY,L=Minsk,O=iText,OU=test,\"\n", "                    + \"CN=iTextTestRsaCert01\", logLevel = LogLevelConstants.INFO),\n", "            @LogMessage(messageTemplate = \"Skipped CRL url: Passed url can not be null.\", logLevel =\n", "                    LogLevelConstants.INFO)\n", "    })\n", "    public void validateSigNameWithoutCrlAndOcspSigningOcspOptCrlYesTest()\n", "            throws GeneralSecurityException, IOException {\n", "        validateOptionLevelInclusion(null, CertificateOption.SIGNING_CERTIFICATE, Level.OCSP_OPTIONAL_CRL,\n", "                CertificateInclusion.YES, false);\n", "    }\n", "\n", "    @Test\n", "    public void validateSigNameWithoutCrlAndOcspWholeChainOcspYesTest() throws GeneralSecurityException, IOException {\n", "        validateOptionLevelInclusion(null, CertificateOption.WHOLE_CHAIN, Level.OCSP, CertificateInclusion.YES, false);\n", "    }\n", "\n", "    @Test\n", "    @LogMessages(messages = {\n", "            @LogMessage(messageTemplate = \"Looking for CRL for certificate C=BY,L=Minsk,O=iText,OU=test,\"\n", "                    + \"CN=iTextTestRsaCert01\", logLevel = LogLevelConstants.INFO),\n", "            @LogMessage(messageTemplate = \"Skipped CRL url: Passed url can not be null.\", logLevel =\n", "                    LogLevelConstants.INFO, count = 2),\n", "            @LogMessage(messageTemplate = \"Looking for CRL for certificate C=BY,L=Minsk,O=iText,OU=test,\"\n", "                    + \"CN=iTextTestRoot\", logLevel = LogLevelConstants.INFO)\n", "    })\n", "    public void validateSigNameWithoutCrlAndOcspWholeChainCrlYesTest() throws GeneralSecurityException, IOException {\n", "        validateOptionLevelInclusion(null, CertificateOption.WHOLE_CHAIN, Level.CRL, CertificateInclusion.YES, false);\n", "    }\n", "\n", "    @Test\n", "    @LogMessages(messages = {\n", "            @LogMessage(messageTemplate = \"Looking for CRL for certificate C=BY,L=Minsk,O=iText,OU=test,\"\n", "                    + \"CN=iTextTestRsaCert01\", logLevel = LogLevelConstants.INFO),\n", "            @LogMessage(messageTemplate = \"Skipped CRL url: Passed url can not be null.\", logLevel =\n", "                    LogLevelConstants.INFO, count = 2),\n", "            @LogMessage(messageTemplate = \"Looking for CRL for certificate C=BY,L=Minsk,O=iText,OU=test,\"\n", "                    + \"CN=iTextTestRoot\", logLevel = LogLevelConstants.INFO)\n", "    })\n", "    public void validateSigNameWithoutCrlAndOcspWholeChainOptCrlYesTest() throws GeneralSecurityException, IOException {\n", "        validateOptionLevelInclusion(null, CertificateOption.WHOLE_CHAIN, Level.OCSP_OPTIONAL_CRL,\n", "                CertificateInclusion.YES, false);\n", "    }\n", "\n", "    @Test\n", "    @LogMessages(messages = {\n", "            @LogMessage(messageTemplate = \"Looking for CRL for certificate C=BY,L=Minsk,O=iText,OU=test,\"\n", "                    + \"CN=iTextTestRsaCert01\", logLevel = LogLevelConstants.INFO),\n", "            @LogMessage(messageTemplate = \"Skipped CRL url: Passed url can not be null.\", logLevel =\n", "                    LogLevelConstants.INFO, count = 2),\n", "            @LogMessage(messageTemplate = \"Looking for CRL for certificate C=BY,L=Minsk,O=iText,OU=test,\"\n", "                    + \"CN=iTextTestRoot\", logLevel = LogLevelConstants.INFO)\n", "    })\n", "    public void validateSigNameWithoutCrlAndOcspWholeChainOcspCrlYesTest()\n", "            throws GeneralSecurityException, IOException {\n", "        validateOptionLevelInclusion(null, CertificateOption.WHOLE_CHAIN, Level.OCSP_CRL,\n", "                CertificateInclusion.YES, false);\n", "    }\n", "\n", "    @Test\n", "    @LogMessages(messages = {\n", "            @LogMessage(messageTemplate = \"Looking for CRL for certificate C=BY,L=Minsk,O=iText,OU=test,\"\n", "                    + \"CN=iTextTestRsaCert01\", logLevel = LogLevelConstants.INFO),\n", "            @LogMessage(messageTemplate = \"Skipped CRL url: Passed url can not be null\", logLevel =\n", "                    LogLevelConstants.INFO)\n", "    })\n", "    public void validateSigNameWithoutCrlAndOcspSigningOcspCrlNoTest() throws GeneralSecurityException, IOException {\n", "        validateOptionLevelInclusion(null, CertificateOption.SIGNING_CERTIFICATE, Level.OCSP_CRL,\n", "                CertificateInclusion.NO, false);\n", "    }\n", "\n", "    @Test\n", "    public void validateSigNameWithoutCrlAndOcspSigningOcspNoTest() throws GeneralSecurityException, IOException {\n", "        validateOptionLevelInclusion(null, CertificateOption.SIGNING_CERTIFICATE, Level.OCSP, CertificateInclusion.NO,\n", "                false);\n", "    }\n", "\n", "    @Test\n", "    @LogMessages(messages = {\n", "            @LogMessage(messageTemplate = \"Looking for CRL for certificate C=BY,L=Minsk,O=iText,OU=test,CN=iTextTestRsaCert01\",\n", "                    logLevel = LogLevelConstants.INFO),\n", "            @LogMessage(messageTemplate = \"Skipped CRL url: Passed url can not be null.\", logLevel =\n", "                    LogLevelConstants.INFO)\n", "    })\n", "    public void validateSigNameWithoutCrlAndOcspSigningCrlNoTest() throws GeneralSecurityException, IOException {\n", "        validateOptionLevelInclusion(null, CertificateOption.SIGNING_CERTIFICATE, Level.CRL, CertificateInclusion.NO,\n", "                false);\n", "    }\n", "\n", "    @Test\n", "    @LogMessages(messages = {\n", "            @LogMessage(messageTemplate = \"Looking for CRL for certificate C=BY,L=Minsk,O=iText,OU=test,\"\n", "                    + \"CN=iTextTestRsaCert01\", logLevel = LogLevelConstants.INFO),\n", "            @LogMessage(messageTemplate = \"Skipped CRL url: Passed url can not be null.\", logLevel =\n", "                    LogLevelConstants.INFO)\n", "    })\n", "    public void validateSigNameWithoutCrlAndOcspSigningOcspOptCrlNoTest() throws GeneralSecurityException, IOException {\n", "        validateOptionLevelInclusion(null, CertificateOption.SIGNING_CERTIFICATE, Level.OCSP_OPTIONAL_CRL,\n", "                CertificateInclusion.NO, false);\n", "    }\n", "\n", "    @Test\n", "    public void validateSigNameWithoutCrlAndOcspWholeChainOcspNoTest() throws GeneralSecurityException, IOException {\n", "        validateOptionLevelInclusion(null, CertificateOption.WHOLE_CHAIN, Level.OCSP, CertificateInclusion.NO, false);\n", "    }\n", "\n", "    @Test\n", "    @LogMessages(messages = {\n", "            @LogMessage(messageTemplate = \"Looking for CRL for certificate C=BY,L=Minsk,O=iText,OU=test,\"\n", "                    + \"CN=iTextTestRsaCert01\", logLevel = LogLevelConstants.INFO),\n", "            @LogMessage(messageTemplate = \"Skipped CRL url: Passed url can not be null.\", logLevel =\n", "                    LogLevelConstants.INFO, count = 2),\n", "            @LogMessage(messageTemplate = \"Looking for CRL for certificate C=BY,L=Minsk,O=iText,OU=test,\"\n", "                    + \"CN=iTextTestRoot\", logLevel = LogLevelConstants.INFO)\n", "    })\n", "    public void validateSigNameWithoutCrlAndOcspWholeChainCrlNoTest() throws GeneralSecurityException, IOException {\n", "        validateOptionLevelInclusion(null, CertificateOption.WHOLE_CHAIN, Level.CRL, CertificateInclusion.NO, false);\n", "    }\n", "\n", "    @Test\n", "    @LogMessages(messages = {\n", "            @LogMessage(messageTemplate = \"Looking for CRL for certificate C=BY,L=Minsk,O=iText,OU=test,\"\n", "                    + \"CN=iTextTestRsaCert01\", logLevel = LogLevelConstants.INFO),\n", "            @LogMessage(messageTemplate = \"Skipped CRL url: Passed url can not be null.\", logLevel =\n", "                    LogLevelConstants.INFO, count = 2),\n", "            @LogMessage(messageTemplate = \"Looking for CRL for certificate C=BY,L=Minsk,O=iText,OU=test,\"\n", "                    + \"CN=iTextTestRoot\", logLevel = LogLevelConstants.INFO)\n", "    })\n", "    public void validateSigNameWithoutCrlAndOcspWholeChainOptCrlNoTest() throws GeneralSecurityException, IOException {\n", "        validateOptionLevelInclusion(null, CertificateOption.WHOLE_CHAIN, Level.OCSP_OPTIONAL_CRL,\n", "                CertificateInclusion.NO, false);\n", "    }\n", "\n", "    @Test\n", "    @LogMessages(messages = {\n", "            @LogMessage(messageTemplate = \"Looking for CRL for certificate C=BY,L=Minsk,O=iText,OU=test,\"\n", "                    + \"CN=iTextTestRsaCert01\", logLevel = LogLevelConstants.INFO),\n", "            @LogMessage(messageTemplate = \"Skipped CRL url: Passed url can not be null.\", logLevel =\n", "                    LogLevelConstants.INFO, count = 2),\n", "            @LogMessage(messageTemplate = \"Looking for CRL for certificate C=BY,L=Minsk,O=iText,OU=test,\"\n", "                    + \"CN=iTextTestRoot\", logLevel = LogLevelConstants.INFO)\n", "    })\n", "    public void validateSigNameWithoutCrlAndOcspWholeChainOcspCrlNoTest() throws GeneralSecurityException, IOException {\n", "        validateOptionLevelInclusion(null, CertificateOption.WHOLE_CHAIN, Level.OCSP_CRL,\n", "                CertificateInclusion.NO, false);\n", "    }\n", "\n", "    @Test\n", "    @LogMessages(messages = {\n", "            @LogMessage(messageTemplate = \"Added CRL url: http://example.com\", logLevel = LogLevelConstants.INFO),\n", "            @LogMessage(messageTemplate = \"Checking CRL: http://example.com\", logLevel = LogLevelConstants.INFO),\n", "            @LogMessage(messageTemplate = \"Added CRL found at: http://example.com\", logLevel = LogLevelConstants.INFO)\n", "    })\n", "    public void validateSigNameSigningOcspCrlYesTest() throws GeneralSecurityException, IOException {\n", "        validateOptionLevelInclusion(CRL_DISTRIBUTION_POINT, CertificateOption.SIGNING_CERTIFICATE, Level.OCSP_CRL,\n", "                CertificateInclusion.YES, true);\n", "    }\n", "\n", "    @Test\n", "    @LogMessages(messages = {\n", "            @LogMessage(messageTemplate = \"Added CRL url: http://example.com\", logLevel = LogLevelConstants.INFO)\n", "    })\n", "    public void validateSigNameSigningOcspYesTest() throws GeneralSecurityException, IOException {\n", "        validateOptionLevelInclusion(CRL_DISTRIBUTION_POINT, CertificateOption.SIGNING_CERTIFICATE, Level.OCSP,\n", "                CertificateInclusion.YES, false);\n", "    }\n", "\n", "    @Test\n", "    @LogMessages(messages = {\n", "            @LogMessage(messageTemplate = \"Added CRL url: http://example.com\", logLevel = LogLevelConstants.INFO),\n", "            @LogMessage(messageTemplate = \"Checking CRL: http://example.com\", logLevel = LogLevelConstants.INFO),\n", "            @LogMessage(messageTemplate = \"Added CRL found at: http://example.com\", logLevel = LogLevelConstants.INFO)\n", "    })\n", "    public void validateSigNameSigningCrlYesTest() throws GeneralSecurityException, IOException {\n", "        validateOptionLevelInclusion(CRL_DISTRIBUTION_POINT, CertificateOption.SIGNING_CERTIFICATE, Level.CRL,\n", "                CertificateInclusion.YES, true);\n", "    }\n", "\n", "    @Test\n", "    @LogMessages(messages = {\n", "            @LogMessage(messageTemplate = \"Added CRL url: http://example.com\", logLevel = LogLevelConstants.INFO),\n", "            @LogMessage(messageTemplate = \"Checking CRL: http://example.com\", logLevel = LogLevelConstants.INFO),\n", "            @LogMessage(messageTemplate = \"Added CRL found at: http://example.com\", logLevel = LogLevelConstants.INFO)\n", "    })\n", "    public void validateSigNameSigningOcspOptionalCrlYesTest() throws GeneralSecurityException, IOException {\n", "        validateOptionLevelInclusion(CRL_DISTRIBUTION_POINT, CertificateOption.SIGNING_CERTIFICATE,\n", "                Level.OCSP_OPTIONAL_CRL, CertificateInclusion.YES, true);\n", "    }\n", "\n", "    @Test\n", "    @LogMessages(messages = {\n", "            @LogMessage(messageTemplate = \"Added CRL url: http://example.com\", logLevel = LogLevelConstants.INFO),\n", "            @LogMessage(messageTemplate = \"Checking CRL: http://example.com\", logLevel = LogLevelConstants.INFO),\n", "            @LogMessage(messageTemplate = \"Added CRL found at: http://example.com\", logLevel = LogLevelConstants.INFO)\n", "    })\n", "    public void validateSigNameSigningOcspCrlNoTest() throws GeneralSecurityException, IOException {\n", "        validateOptionLevelInclusion(CRL_DISTRIBUTION_POINT, CertificateOption.SIGNING_CERTIFICATE, Level.OCSP_CRL,\n", "                CertificateInclusion.NO, true);\n", "    }\n", "\n", "    @Test\n", "    @LogMessages(messages = {\n", "            @LogMessage(messageTemplate = \"Added CRL url: http://example.com\", logLevel = LogLevelConstants.INFO)\n", "    })\n", "    public void validateSigNameSigningOcspNoTest() throws GeneralSecurityException, IOException {\n", "        validateOptionLevelInclusion(CRL_DISTRIBUTION_POINT, CertificateOption.SIGNING_CERTIFICATE, Level.OCSP,\n", "                CertificateInclusion.NO, false);\n", "    }\n", "\n", "    @Test\n", "    @LogMessages(messages = {\n", "            @LogMessage(messageTemplate = \"Added CRL url: http://example.com\", logLevel = LogLevelConstants.INFO),\n", "            @LogMessage(messageTemplate = \"Checking CRL: http://example.com\", logLevel = LogLevelConstants.INFO),\n", "            @LogMessage(messageTemplate = \"Added CRL found at: http://example.com\", logLevel = LogLevelConstants.INFO)\n", "    })\n", "    public void validateSigNameSigningCrlNoTest() throws GeneralSecurityException, IOException {\n", "        validateOptionLevelInclusion(CRL_DISTRIBUTION_POINT, CertificateOption.SIGNING_CERTIFICATE, Level.CRL,\n", "                CertificateInclusion.NO, true);\n", "    }\n", "\n", "    @Test\n", "    @LogMessages(messages = {\n", "            @LogMessage(messageTemplate = \"Added CRL url: http://example.com\", logLevel = LogLevelConstants.INFO),\n", "            @LogMessage(messageTemplate = \"Checking CRL: http://example.com\", logLevel = LogLevelConstants.INFO),\n", "            @LogMessage(messageTemplate = \"Added CRL found at: http://example.com\", logLevel = LogLevelConstants.INFO)\n", "    })\n", "    public void validateSigNameSigningOcspOptionalCrlNoTest() throws GeneralSecurityException, IOException {\n", "        validateOptionLevelInclusion(CRL_DISTRIBUTION_POINT, CertificateOption.SIGNING_CERTIFICATE,\n", "                Level.OCSP_OPTIONAL_CRL, CertificateInclusion.NO, true);\n", "    }\n", "\n", "    @Test\n", "    @LogMessages(messages = {\n", "            @LogMessage(messageTemplate = \"Added CRL url: http://example.com\", logLevel = LogLevelConstants.INFO),\n", "            @LogMessage(messageTemplate = \"Checking CRL: http://example.com\", logLevel = LogLevelConstants.INFO,\n", "                    count = 2),\n", "            @LogMessage(messageTemplate = \"Added CRL found at: http://example.com\", logLevel = LogLevelConstants.INFO\n", "                    , count = 2)\n", "    })\n", "    public void validateSigNameWholeChainOcspCrlYesTest() throws GeneralSecurityException, IOException {\n", "        validateOptionLevelInclusion(CRL_DISTRIBUTION_POINT, CertificateOption.WHOLE_CHAIN, Level.OCSP_CRL,\n", "                CertificateInclusion.YES, true);\n", "    }\n", "\n", "    @Test\n", "    @LogMessages(messages = {\n", "            @LogMessage(messageTemplate = \"Added CRL url: http://example.com\", logLevel = LogLevelConstants.INFO),\n", "            @LogMessage(messageTemplate = \"Checking CRL: http://example.com\", logLevel = LogLevelConstants.INFO,\n", "                    count = 2),\n", "            @LogMessage(messageTemplate = \"Added CRL found at: http://example.com\", logLevel = LogLevelConstants.INFO\n", "                    , count = 2)\n", "    })\n", "    public void validateSigNameWholeChainOcspOptionalCrlYesTest() throws IOException, GeneralSecurityException {\n", "        validateOptionLevelInclusion(CRL_DISTRIBUTION_POINT, CertificateOption.WHOLE_CHAIN, Level.OCSP_OPTIONAL_CRL,\n", "                CertificateInclusion.YES, true);\n", "    }\n", "\n", "    @Test\n", "    @LogMessages(messages = {\n", "            @LogMessage(messageTemplate = \"Added CRL url: http://example.com\", logLevel = LogLevelConstants.INFO)\n", "    })\n", "    public void validateSigNameWholeChainOcspYesTest() throws IOException, GeneralSecurityException {\n", "        validateOptionLevelInclusion(CRL_DISTRIBUTION_POINT, CertificateOption.WHOLE_CHAIN, Level.OCSP,\n", "                CertificateInclusion.YES, false);\n", "    }\n", "\n", "    @Test\n", "    @LogMessages(messages = {\n", "            @LogMessage(messageTemplate = \"Added CRL url: http://example.com\", logLevel = LogLevelConstants.INFO),\n", "            @LogMessage(messageTemplate = \"Checking CRL: http://example.com\", logLevel = LogLevelConstants.INFO,\n", "                    count = 2),\n", "            @LogMessage(messageTemplate = \"Added CRL found at: http://example.com\", logLevel = LogLevelConstants.INFO\n", "                    , count = 2)\n", "    })\n", "    public void validateSigNameWholeChainCrlYesTest() throws IOException, GeneralSecurityException {\n", "        validateOptionLevelInclusion(CRL_DISTRIBUTION_POINT, CertificateOption.WHOLE_CHAIN, Level.CRL,\n", "                CertificateInclusion.YES, true);\n", "    }\n", "\n", "    @Test\n", "    @LogMessages(messages = {\n", "            @LogMessage(messageTemplate = \"Added CRL url: http://example.com\", logLevel = LogLevelConstants.INFO),\n", "            @LogMessage(messageTemplate = \"Checking CRL: http://example.com\", logLevel = LogLevelConstants.INFO,\n", "                    count = 2),\n", "            @LogMessage(messageTemplate = \"Added CRL found at: http://example.com\", logLevel = LogLevelConstants.INFO\n", "                    , count = 2)\n", "    })\n", "    public void validateSigNameWholeChainOcspCrlNoTest() throws GeneralSecurityException, IOException {\n", "        validateOptionLevelInclusion(CRL_DISTRIBUTION_POINT, CertificateOption.WHOLE_CHAIN, Level.OCSP_CRL,\n", "                CertificateInclusion.NO, true);\n", "    }\n", "\n", "    @Test\n", "    @LogMessages(messages = {\n", "            @LogMessage(messageTemplate = \"Added CRL url: http://example.com\", logLevel = LogLevelConstants.INFO),\n", "            @LogMessage(messageTemplate = \"Checking CRL: http://example.com\", logLevel = LogLevelConstants.INFO,\n", "                    count = 2),\n", "            @LogMessage(messageTemplate = \"Added CRL found at: http://example.com\", logLevel = LogLevelConstants.INFO\n", "                    , count = 2)\n", "    })\n", "    public void validateSigNameWholeChainOcspOptionalCrlNoTest() throws IOException, GeneralSecurityException {\n", "        validateOptionLevelInclusion(CRL_DISTRIBUTION_POINT, CertificateOption.WHOLE_CHAIN, Level.OCSP_OPTIONAL_CRL,\n", "                CertificateInclusion.NO, true);\n", "    }\n", "\n", "    @Test\n", "    @LogMessages(messages = {\n", "            @LogMessage(messageTemplate = \"Added CRL url: http://example.com\", logLevel = LogLevelConstants.INFO)\n", "    })\n", "    public void validateSigNameWholeChainOcspNoTest() throws IOException, GeneralSecurityException {\n", "        validateOptionLevelInclusion(CRL_DISTRIBUTION_POINT, CertificateOption.WHOLE_CHAIN, Level.OCSP,\n", "                CertificateInclusion.NO, false);\n", "    }\n", "\n", "    @Test\n", "    @LogMessages(messages = {\n", "            @LogMessage(messageTemplate = \"Added CRL url: http://example.com\", logLevel = LogLevelConstants.INFO),\n", "            @LogMessage(messageTemplate = \"Checking CRL: http://example.com\", logLevel = LogLevelConstants.INFO,\n", "                    count = 2),\n", "            @LogMessage(messageTemplate = \"Added CRL found at: http://example.com\", logLevel = LogLevelConstants.INFO\n", "                    , count = 2)\n", "    })\n", "    public void validateSigNameWholeChainCrlNoTest() throws IOException, GeneralSecurityException {\n", "        validateOptionLevelInclusion(CRL_DISTRIBUTION_POINT, CertificateOption.WHOLE_CHAIN, Level.CRL,\n", "                CertificateInclusion.NO, true);\n", "    }\n", "    \n", "    @Test\n", "    public void getParentWithoutCertsTest() {\n", "        try (PdfDocument document = new PdfDocument(new PdfWriter(new ByteArrayOutputStream()))) {\n", "            LtvVerification verification = new LtvVerification(document);\n", "            Assert.assertNull(verification.getParent(null, new Certificate[0]));\n", "        }\n", "    }\n", "\n", "    private static void validateOptionLevelInclusion(String crlUrl, CertificateOption certificateOption, Level level,\n", "            CertificateInclusion inclusion, boolean expectedResult) throws IOException, GeneralSecurityException {\n", "\n", "        IOcspClient ocsp = new OcspClientBouncyCastle(null);\n", "        ICrlClient crl = null;\n", "        if (null == crlUrl) {\n", "            crl = new CrlClientOnline();\n", "        } else {\n", "            crl = new CrlClientOnline(crlUrl);\n", "        }\n", "        Assert.assertEquals(expectedResult,\n", "                TEST_VERIFICATION.addVerification(SIG_FIELD_NAME, ocsp, crl, certificateOption, level, inclusion));\n", "    }\n", "}\n"], "method_lines_dic": {"LtvVerification::::setRevocationDataNecessity(com.itextpdf.signatures.LtvVerification.RevocationDataNecessity)": [199, 202], "LtvVerification::::setIssuingCertificateRetriever(com.itextpdf.signatures.IIssuingCertificateRetriever)": [214, 217], "LtvVerification::::addVerification(java.lang.String,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion)": [235, 266], "LtvVerification::::addVerification(java.lang.String,java.util.Collection<byte[]>,java.util.Collection<byte[]>,java.util.Collection<byte[]>)": [282, 301], "LtvVerification::::merge()": [306, 318], "LtvVerification::::convertToHex(byte[])": [327, 333], "LtvVerification::::getParent(java.security.cert.X509Certificate,java.security.cert.Certificate[])": [343, 358], "LtvVerification::::addRevocationDataForChain(java.security.cert.X509Certificate,java.security.cert.Certificate[],com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)": [360, 376], "LtvVerification::::addRevocationDataForCertificate(java.security.cert.X509Certificate,java.security.cert.Certificate[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)": [378, 437], "LtvVerification::::addRevocationDataForOcspCert(byte[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)": [439, 466], "LtvVerification::::iterableToList(java.lang.Iterable<java.security.cert.X509Certificate>)": [468, 474], "LtvVerification::::buildOCSPResponse(byte[])": [476, 484], "LtvVerification::::getSignatureHashKey(java.lang.String)": [486, 492], "LtvVerification::::hashBytesSha1(byte[])": [494, 497], "LtvVerification::::updateDss()": [499, 536], "LtvVerification::::createDss()": [557, 559], "LtvVerification::::retrieveMissingCertificates(java.security.cert.Certificate[])": [636, 646]}, "test_method_lines_dic": {"LtvVerificationTest::::before()": [78, 83], "LtvVerificationTest::::addVerificationToDocumentWithAlreadyExistedDss()": [85, 142], "LtvVerificationTest::::validateSigNameWithEmptyByteArrayCrlOcspCertTest()": [144, 154], "LtvVerificationTest::::tryAddVerificationAfterMerge()": [156, 182], "LtvVerificationTest::::validateSigNameWithNullCrlOcspCertTest()": [184, 187], "LtvVerificationTest::::exceptionWhenValidateNonExistentSigNameTest()": [189, 194], "LtvVerificationTest::::exceptionWhenValidateParticularNonExistentSigNameTest()": [196, 202], "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningOcspCrlYesTest()": [204, 214], "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningOcspYesTest()": [216, 220], "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningCrlYesTest()": [222, 232], "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningOcspOptCrlYesTest()": [234, 245], "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainOcspYesTest()": [247, 250], "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainCrlYesTest()": [252, 263], "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainOptCrlYesTest()": [265, 277], "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainOcspCrlYesTest()": [279, 292], "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningOcspCrlNoTest()": [294, 304], "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningOcspNoTest()": [306, 310], "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningCrlNoTest()": [312, 322], "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningOcspOptCrlNoTest()": [324, 334], "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainOcspNoTest()": [336, 339], "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainCrlNoTest()": [341, 352], "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainOptCrlNoTest()": [354, 366], "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainOcspCrlNoTest()": [368, 380], "LtvVerificationTest::::validateSigNameSigningOcspCrlYesTest()": [382, 391], "LtvVerificationTest::::validateSigNameSigningOcspYesTest()": [393, 400], "LtvVerificationTest::::validateSigNameSigningCrlYesTest()": [402, 411], "LtvVerificationTest::::validateSigNameSigningOcspOptionalCrlYesTest()": [413, 422], "LtvVerificationTest::::validateSigNameSigningOcspCrlNoTest()": [424, 433], "LtvVerificationTest::::validateSigNameSigningOcspNoTest()": [435, 442], "LtvVerificationTest::::validateSigNameSigningCrlNoTest()": [444, 453], "LtvVerificationTest::::validateSigNameSigningOcspOptionalCrlNoTest()": [455, 464], "LtvVerificationTest::::validateSigNameWholeChainOcspCrlYesTest()": [466, 477], "LtvVerificationTest::::validateSigNameWholeChainOcspOptionalCrlYesTest()": [479, 490], "LtvVerificationTest::::validateSigNameWholeChainOcspYesTest()": [492, 499], "LtvVerificationTest::::validateSigNameWholeChainCrlYesTest()": [501, 512], "LtvVerificationTest::::validateSigNameWholeChainOcspCrlNoTest()": [514, 525], "LtvVerificationTest::::validateSigNameWholeChainOcspOptionalCrlNoTest()": [527, 538], "LtvVerificationTest::::validateSigNameWholeChainOcspNoTest()": [540, 547], "LtvVerificationTest::::validateSigNameWholeChainCrlNoTest()": [549, 560], "LtvVerificationTest::::getParentWithoutCertsTest()": [562, 568]}, "reverse_method_lines_dic": {"199": "LtvVerification::::setRevocationDataNecessity(com.itextpdf.signatures.LtvVerification.RevocationDataNecessity)", "200": "LtvVerification::::setRevocationDataNecessity(com.itextpdf.signatures.LtvVerification.RevocationDataNecessity)", "201": "LtvVerification::::setRevocationDataNecessity(com.itextpdf.signatures.LtvVerification.RevocationDataNecessity)", "202": "LtvVerification::::setRevocationDataNecessity(com.itextpdf.signatures.LtvVerification.RevocationDataNecessity)", "214": "LtvVerification::::setIssuingCertificateRetriever(com.itextpdf.signatures.IIssuingCertificateRetriever)", "215": "LtvVerification::::setIssuingCertificateRetriever(com.itextpdf.signatures.IIssuingCertificateRetriever)", "216": "LtvVerification::::setIssuingCertificateRetriever(com.itextpdf.signatures.IIssuingCertificateRetriever)", "217": "LtvVerification::::setIssuingCertificateRetriever(com.itextpdf.signatures.IIssuingCertificateRetriever)", "235": "LtvVerification::::addVerification(java.lang.String,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion)", "236": "LtvVerification::::addVerification(java.lang.String,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion)", "237": "LtvVerification::::addVerification(java.lang.String,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion)", "238": "LtvVerification::::addVerification(java.lang.String,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion)", "239": "LtvVerification::::addVerification(java.lang.String,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion)", "240": "LtvVerification::::addVerification(java.lang.String,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion)", "241": "LtvVerification::::addVerification(java.lang.String,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion)", "242": "LtvVerification::::addVerification(java.lang.String,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion)", "243": "LtvVerification::::addVerification(java.lang.String,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion)", "244": "LtvVerification::::addVerification(java.lang.String,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion)", "245": "LtvVerification::::addVerification(java.lang.String,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion)", "246": "LtvVerification::::addVerification(java.lang.String,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion)", "247": "LtvVerification::::addVerification(java.lang.String,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion)", "248": "LtvVerification::::addVerification(java.lang.String,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion)", "249": "LtvVerification::::addVerification(java.lang.String,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion)", "250": "LtvVerification::::addVerification(java.lang.String,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion)", "251": "LtvVerification::::addVerification(java.lang.String,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion)", "252": "LtvVerification::::addVerification(java.lang.String,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion)", "253": "LtvVerification::::addVerification(java.lang.String,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion)", "254": "LtvVerification::::addVerification(java.lang.String,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion)", "255": "LtvVerification::::addVerification(java.lang.String,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion)", "256": "LtvVerification::::addVerification(java.lang.String,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion)", "257": "LtvVerification::::addVerification(java.lang.String,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion)", "258": "LtvVerification::::addVerification(java.lang.String,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion)", "259": "LtvVerification::::addVerification(java.lang.String,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion)", "260": "LtvVerification::::addVerification(java.lang.String,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion)", "261": "LtvVerification::::addVerification(java.lang.String,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion)", "262": "LtvVerification::::addVerification(java.lang.String,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion)", "263": "LtvVerification::::addVerification(java.lang.String,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion)", "264": "LtvVerification::::addVerification(java.lang.String,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion)", "265": "LtvVerification::::addVerification(java.lang.String,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion)", "266": "LtvVerification::::addVerification(java.lang.String,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion)", "282": "LtvVerification::::addVerification(java.lang.String,java.util.Collection<byte[]>,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "283": "LtvVerification::::addVerification(java.lang.String,java.util.Collection<byte[]>,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "284": "LtvVerification::::addVerification(java.lang.String,java.util.Collection<byte[]>,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "285": "LtvVerification::::addVerification(java.lang.String,java.util.Collection<byte[]>,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "286": "LtvVerification::::addVerification(java.lang.String,java.util.Collection<byte[]>,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "287": "LtvVerification::::addVerification(java.lang.String,java.util.Collection<byte[]>,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "288": "LtvVerification::::addVerification(java.lang.String,java.util.Collection<byte[]>,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "289": "LtvVerification::::addVerification(java.lang.String,java.util.Collection<byte[]>,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "290": "LtvVerification::::addVerification(java.lang.String,java.util.Collection<byte[]>,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "291": "LtvVerification::::addVerification(java.lang.String,java.util.Collection<byte[]>,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "292": "LtvVerification::::addVerification(java.lang.String,java.util.Collection<byte[]>,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "293": "LtvVerification::::addVerification(java.lang.String,java.util.Collection<byte[]>,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "294": "LtvVerification::::addVerification(java.lang.String,java.util.Collection<byte[]>,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "295": "LtvVerification::::addVerification(java.lang.String,java.util.Collection<byte[]>,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "296": "LtvVerification::::addVerification(java.lang.String,java.util.Collection<byte[]>,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "297": "LtvVerification::::addVerification(java.lang.String,java.util.Collection<byte[]>,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "298": "LtvVerification::::addVerification(java.lang.String,java.util.Collection<byte[]>,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "299": "LtvVerification::::addVerification(java.lang.String,java.util.Collection<byte[]>,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "300": "LtvVerification::::addVerification(java.lang.String,java.util.Collection<byte[]>,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "301": "LtvVerification::::addVerification(java.lang.String,java.util.Collection<byte[]>,java.util.Collection<byte[]>,java.util.Collection<byte[]>)", "306": "LtvVerification::::merge()", "307": "LtvVerification::::merge()", "308": "LtvVerification::::merge()", "309": "LtvVerification::::merge()", "310": "LtvVerification::::merge()", "311": "LtvVerification::::merge()", "312": "LtvVerification::::merge()", "313": "LtvVerification::::merge()", "314": "LtvVerification::::merge()", "315": "LtvVerification::::merge()", "316": "LtvVerification::::merge()", "317": "LtvVerification::::merge()", "318": "LtvVerification::::merge()", "327": "LtvVerification::::convertToHex(byte[])", "328": "LtvVerification::::convertToHex(byte[])", "329": "LtvVerification::::convertToHex(byte[])", "330": "LtvVerification::::convertToHex(byte[])", "331": "LtvVerification::::convertToHex(byte[])", "332": "LtvVerification::::convertToHex(byte[])", "333": "LtvVerification::::convertToHex(byte[])", "343": "LtvVerification::::getParent(java.security.cert.X509Certificate,java.security.cert.Certificate[])", "344": "LtvVerification::::getParent(java.security.cert.X509Certificate,java.security.cert.Certificate[])", "345": "LtvVerification::::getParent(java.security.cert.X509Certificate,java.security.cert.Certificate[])", "346": "LtvVerification::::getParent(java.security.cert.X509Certificate,java.security.cert.Certificate[])", "347": "LtvVerification::::getParent(java.security.cert.X509Certificate,java.security.cert.Certificate[])", "348": "LtvVerification::::getParent(java.security.cert.X509Certificate,java.security.cert.Certificate[])", "349": "LtvVerification::::getParent(java.security.cert.X509Certificate,java.security.cert.Certificate[])", "350": "LtvVerification::::getParent(java.security.cert.X509Certificate,java.security.cert.Certificate[])", "351": "LtvVerification::::getParent(java.security.cert.X509Certificate,java.security.cert.Certificate[])", "352": "LtvVerification::::getParent(java.security.cert.X509Certificate,java.security.cert.Certificate[])", "353": "LtvVerification::::getParent(java.security.cert.X509Certificate,java.security.cert.Certificate[])", "354": "LtvVerification::::getParent(java.security.cert.X509Certificate,java.security.cert.Certificate[])", "355": "LtvVerification::::getParent(java.security.cert.X509Certificate,java.security.cert.Certificate[])", "356": "LtvVerification::::getParent(java.security.cert.X509Certificate,java.security.cert.Certificate[])", "357": "LtvVerification::::getParent(java.security.cert.X509Certificate,java.security.cert.Certificate[])", "358": "LtvVerification::::getParent(java.security.cert.X509Certificate,java.security.cert.Certificate[])", "360": "LtvVerification::::addRevocationDataForChain(java.security.cert.X509Certificate,java.security.cert.Certificate[],com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "361": "LtvVerification::::addRevocationDataForChain(java.security.cert.X509Certificate,java.security.cert.Certificate[],com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "362": "LtvVerification::::addRevocationDataForChain(java.security.cert.X509Certificate,java.security.cert.Certificate[],com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "363": "LtvVerification::::addRevocationDataForChain(java.security.cert.X509Certificate,java.security.cert.Certificate[],com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "364": "LtvVerification::::addRevocationDataForChain(java.security.cert.X509Certificate,java.security.cert.Certificate[],com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "365": "LtvVerification::::addRevocationDataForChain(java.security.cert.X509Certificate,java.security.cert.Certificate[],com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "366": "LtvVerification::::addRevocationDataForChain(java.security.cert.X509Certificate,java.security.cert.Certificate[],com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "367": "LtvVerification::::addRevocationDataForChain(java.security.cert.X509Certificate,java.security.cert.Certificate[],com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "368": "LtvVerification::::addRevocationDataForChain(java.security.cert.X509Certificate,java.security.cert.Certificate[],com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "369": "LtvVerification::::addRevocationDataForChain(java.security.cert.X509Certificate,java.security.cert.Certificate[],com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "370": "LtvVerification::::addRevocationDataForChain(java.security.cert.X509Certificate,java.security.cert.Certificate[],com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "371": "LtvVerification::::addRevocationDataForChain(java.security.cert.X509Certificate,java.security.cert.Certificate[],com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "372": "LtvVerification::::addRevocationDataForChain(java.security.cert.X509Certificate,java.security.cert.Certificate[],com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "373": "LtvVerification::::addRevocationDataForChain(java.security.cert.X509Certificate,java.security.cert.Certificate[],com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "374": "LtvVerification::::addRevocationDataForChain(java.security.cert.X509Certificate,java.security.cert.Certificate[],com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "375": "LtvVerification::::addRevocationDataForChain(java.security.cert.X509Certificate,java.security.cert.Certificate[],com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "376": "LtvVerification::::addRevocationDataForChain(java.security.cert.X509Certificate,java.security.cert.Certificate[],com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "378": "LtvVerification::::addRevocationDataForCertificate(java.security.cert.X509Certificate,java.security.cert.Certificate[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "379": "LtvVerification::::addRevocationDataForCertificate(java.security.cert.X509Certificate,java.security.cert.Certificate[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "380": "LtvVerification::::addRevocationDataForCertificate(java.security.cert.X509Certificate,java.security.cert.Certificate[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "381": "LtvVerification::::addRevocationDataForCertificate(java.security.cert.X509Certificate,java.security.cert.Certificate[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "382": "LtvVerification::::addRevocationDataForCertificate(java.security.cert.X509Certificate,java.security.cert.Certificate[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "383": "LtvVerification::::addRevocationDataForCertificate(java.security.cert.X509Certificate,java.security.cert.Certificate[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "384": "LtvVerification::::addRevocationDataForCertificate(java.security.cert.X509Certificate,java.security.cert.Certificate[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "385": "LtvVerification::::addRevocationDataForCertificate(java.security.cert.X509Certificate,java.security.cert.Certificate[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "386": "LtvVerification::::addRevocationDataForCertificate(java.security.cert.X509Certificate,java.security.cert.Certificate[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "387": "LtvVerification::::addRevocationDataForCertificate(java.security.cert.X509Certificate,java.security.cert.Certificate[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "388": "LtvVerification::::addRevocationDataForCertificate(java.security.cert.X509Certificate,java.security.cert.Certificate[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "389": "LtvVerification::::addRevocationDataForCertificate(java.security.cert.X509Certificate,java.security.cert.Certificate[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "390": "LtvVerification::::addRevocationDataForCertificate(java.security.cert.X509Certificate,java.security.cert.Certificate[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "391": "LtvVerification::::addRevocationDataForCertificate(java.security.cert.X509Certificate,java.security.cert.Certificate[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "392": "LtvVerification::::addRevocationDataForCertificate(java.security.cert.X509Certificate,java.security.cert.Certificate[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "393": "LtvVerification::::addRevocationDataForCertificate(java.security.cert.X509Certificate,java.security.cert.Certificate[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "394": "LtvVerification::::addRevocationDataForCertificate(java.security.cert.X509Certificate,java.security.cert.Certificate[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "395": "LtvVerification::::addRevocationDataForCertificate(java.security.cert.X509Certificate,java.security.cert.Certificate[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "396": "LtvVerification::::addRevocationDataForCertificate(java.security.cert.X509Certificate,java.security.cert.Certificate[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "397": "LtvVerification::::addRevocationDataForCertificate(java.security.cert.X509Certificate,java.security.cert.Certificate[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "398": "LtvVerification::::addRevocationDataForCertificate(java.security.cert.X509Certificate,java.security.cert.Certificate[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "399": "LtvVerification::::addRevocationDataForCertificate(java.security.cert.X509Certificate,java.security.cert.Certificate[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "400": "LtvVerification::::addRevocationDataForCertificate(java.security.cert.X509Certificate,java.security.cert.Certificate[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "401": "LtvVerification::::addRevocationDataForCertificate(java.security.cert.X509Certificate,java.security.cert.Certificate[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "402": "LtvVerification::::addRevocationDataForCertificate(java.security.cert.X509Certificate,java.security.cert.Certificate[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "403": "LtvVerification::::addRevocationDataForCertificate(java.security.cert.X509Certificate,java.security.cert.Certificate[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "404": "LtvVerification::::addRevocationDataForCertificate(java.security.cert.X509Certificate,java.security.cert.Certificate[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "405": "LtvVerification::::addRevocationDataForCertificate(java.security.cert.X509Certificate,java.security.cert.Certificate[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "406": "LtvVerification::::addRevocationDataForCertificate(java.security.cert.X509Certificate,java.security.cert.Certificate[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "407": "LtvVerification::::addRevocationDataForCertificate(java.security.cert.X509Certificate,java.security.cert.Certificate[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "408": "LtvVerification::::addRevocationDataForCertificate(java.security.cert.X509Certificate,java.security.cert.Certificate[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "409": "LtvVerification::::addRevocationDataForCertificate(java.security.cert.X509Certificate,java.security.cert.Certificate[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "410": "LtvVerification::::addRevocationDataForCertificate(java.security.cert.X509Certificate,java.security.cert.Certificate[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "411": "LtvVerification::::addRevocationDataForCertificate(java.security.cert.X509Certificate,java.security.cert.Certificate[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "412": "LtvVerification::::addRevocationDataForCertificate(java.security.cert.X509Certificate,java.security.cert.Certificate[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "413": "LtvVerification::::addRevocationDataForCertificate(java.security.cert.X509Certificate,java.security.cert.Certificate[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "414": "LtvVerification::::addRevocationDataForCertificate(java.security.cert.X509Certificate,java.security.cert.Certificate[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "415": "LtvVerification::::addRevocationDataForCertificate(java.security.cert.X509Certificate,java.security.cert.Certificate[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "416": "LtvVerification::::addRevocationDataForCertificate(java.security.cert.X509Certificate,java.security.cert.Certificate[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "417": "LtvVerification::::addRevocationDataForCertificate(java.security.cert.X509Certificate,java.security.cert.Certificate[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "418": "LtvVerification::::addRevocationDataForCertificate(java.security.cert.X509Certificate,java.security.cert.Certificate[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "419": "LtvVerification::::addRevocationDataForCertificate(java.security.cert.X509Certificate,java.security.cert.Certificate[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "420": "LtvVerification::::addRevocationDataForCertificate(java.security.cert.X509Certificate,java.security.cert.Certificate[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "421": "LtvVerification::::addRevocationDataForCertificate(java.security.cert.X509Certificate,java.security.cert.Certificate[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "422": "LtvVerification::::addRevocationDataForCertificate(java.security.cert.X509Certificate,java.security.cert.Certificate[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "423": "LtvVerification::::addRevocationDataForCertificate(java.security.cert.X509Certificate,java.security.cert.Certificate[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "424": "LtvVerification::::addRevocationDataForCertificate(java.security.cert.X509Certificate,java.security.cert.Certificate[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "425": "LtvVerification::::addRevocationDataForCertificate(java.security.cert.X509Certificate,java.security.cert.Certificate[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "426": "LtvVerification::::addRevocationDataForCertificate(java.security.cert.X509Certificate,java.security.cert.Certificate[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "427": "LtvVerification::::addRevocationDataForCertificate(java.security.cert.X509Certificate,java.security.cert.Certificate[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "428": "LtvVerification::::addRevocationDataForCertificate(java.security.cert.X509Certificate,java.security.cert.Certificate[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "429": "LtvVerification::::addRevocationDataForCertificate(java.security.cert.X509Certificate,java.security.cert.Certificate[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "430": "LtvVerification::::addRevocationDataForCertificate(java.security.cert.X509Certificate,java.security.cert.Certificate[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "431": "LtvVerification::::addRevocationDataForCertificate(java.security.cert.X509Certificate,java.security.cert.Certificate[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "432": "LtvVerification::::addRevocationDataForCertificate(java.security.cert.X509Certificate,java.security.cert.Certificate[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "433": "LtvVerification::::addRevocationDataForCertificate(java.security.cert.X509Certificate,java.security.cert.Certificate[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "434": "LtvVerification::::addRevocationDataForCertificate(java.security.cert.X509Certificate,java.security.cert.Certificate[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "435": "LtvVerification::::addRevocationDataForCertificate(java.security.cert.X509Certificate,java.security.cert.Certificate[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "436": "LtvVerification::::addRevocationDataForCertificate(java.security.cert.X509Certificate,java.security.cert.Certificate[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "437": "LtvVerification::::addRevocationDataForCertificate(java.security.cert.X509Certificate,java.security.cert.Certificate[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "439": "LtvVerification::::addRevocationDataForOcspCert(byte[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "440": "LtvVerification::::addRevocationDataForOcspCert(byte[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "441": "LtvVerification::::addRevocationDataForOcspCert(byte[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "442": "LtvVerification::::addRevocationDataForOcspCert(byte[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "443": "LtvVerification::::addRevocationDataForOcspCert(byte[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "444": "LtvVerification::::addRevocationDataForOcspCert(byte[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "445": "LtvVerification::::addRevocationDataForOcspCert(byte[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "446": "LtvVerification::::addRevocationDataForOcspCert(byte[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "447": "LtvVerification::::addRevocationDataForOcspCert(byte[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "448": "LtvVerification::::addRevocationDataForOcspCert(byte[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "449": "LtvVerification::::addRevocationDataForOcspCert(byte[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "450": "LtvVerification::::addRevocationDataForOcspCert(byte[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "451": "LtvVerification::::addRevocationDataForOcspCert(byte[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "452": "LtvVerification::::addRevocationDataForOcspCert(byte[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "453": "LtvVerification::::addRevocationDataForOcspCert(byte[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "454": "LtvVerification::::addRevocationDataForOcspCert(byte[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "455": "LtvVerification::::addRevocationDataForOcspCert(byte[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "456": "LtvVerification::::addRevocationDataForOcspCert(byte[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "457": "LtvVerification::::addRevocationDataForOcspCert(byte[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "458": "LtvVerification::::addRevocationDataForOcspCert(byte[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "459": "LtvVerification::::addRevocationDataForOcspCert(byte[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "460": "LtvVerification::::addRevocationDataForOcspCert(byte[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "461": "LtvVerification::::addRevocationDataForOcspCert(byte[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "462": "LtvVerification::::addRevocationDataForOcspCert(byte[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "463": "LtvVerification::::addRevocationDataForOcspCert(byte[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "464": "LtvVerification::::addRevocationDataForOcspCert(byte[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "465": "LtvVerification::::addRevocationDataForOcspCert(byte[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "466": "LtvVerification::::addRevocationDataForOcspCert(byte[],java.security.cert.X509Certificate,com.itextpdf.signatures.IOcspClient,com.itextpdf.signatures.ICrlClient,com.itextpdf.signatures.LtvVerification.Level,com.itextpdf.signatures.LtvVerification.CertificateInclusion,com.itextpdf.signatures.LtvVerification.CertificateOption,com.itextpdf.signatures.LtvVerification.ValidationData,java.util.Set<java.security.cert.X509Certificate>)", "468": "LtvVerification::::iterableToList(java.lang.Iterable<java.security.cert.X509Certificate>)", "469": "LtvVerification::::iterableToList(java.lang.Iterable<java.security.cert.X509Certificate>)", "470": "LtvVerification::::iterableToList(java.lang.Iterable<java.security.cert.X509Certificate>)", "471": "LtvVerification::::iterableToList(java.lang.Iterable<java.security.cert.X509Certificate>)", "472": "LtvVerification::::iterableToList(java.lang.Iterable<java.security.cert.X509Certificate>)", "473": "LtvVerification::::iterableToList(java.lang.Iterable<java.security.cert.X509Certificate>)", "474": "LtvVerification::::iterableToList(java.lang.Iterable<java.security.cert.X509Certificate>)", "476": "LtvVerification::::buildOCSPResponse(byte[])", "477": "LtvVerification::::buildOCSPResponse(byte[])", "478": "LtvVerification::::buildOCSPResponse(byte[])", "479": "LtvVerification::::buildOCSPResponse(byte[])", "480": "LtvVerification::::buildOCSPResponse(byte[])", "481": "LtvVerification::::buildOCSPResponse(byte[])", "482": "LtvVerification::::buildOCSPResponse(byte[])", "483": "LtvVerification::::buildOCSPResponse(byte[])", "484": "LtvVerification::::buildOCSPResponse(byte[])", "486": "LtvVerification::::getSignatureHashKey(java.lang.String)", "487": "LtvVerification::::getSignatureHashKey(java.lang.String)", "488": "LtvVerification::::getSignatureHashKey(java.lang.String)", "489": "LtvVerification::::getSignatureHashKey(java.lang.String)", "490": "LtvVerification::::getSignatureHashKey(java.lang.String)", "491": "LtvVerification::::getSignatureHashKey(java.lang.String)", "492": "LtvVerification::::getSignatureHashKey(java.lang.String)", "494": "LtvVerification::::hashBytesSha1(byte[])", "495": "LtvVerification::::hashBytesSha1(byte[])", "496": "LtvVerification::::hashBytesSha1(byte[])", "497": "LtvVerification::::hashBytesSha1(byte[])", "499": "LtvVerification::::updateDss()", "500": "LtvVerification::::updateDss()", "501": "LtvVerification::::updateDss()", "502": "LtvVerification::::updateDss()", "503": "LtvVerification::::updateDss()", "504": "LtvVerification::::updateDss()", "505": "LtvVerification::::updateDss()", "506": "LtvVerification::::updateDss()", "507": "LtvVerification::::updateDss()", "508": "LtvVerification::::updateDss()", "509": "LtvVerification::::updateDss()", "510": "LtvVerification::::updateDss()", "511": "LtvVerification::::updateDss()", "512": "LtvVerification::::updateDss()", "513": "LtvVerification::::updateDss()", "514": "LtvVerification::::updateDss()", "515": "LtvVerification::::updateDss()", "516": "LtvVerification::::updateDss()", "517": "LtvVerification::::updateDss()", "518": "LtvVerification::::updateDss()", "519": "LtvVerification::::updateDss()", "520": "LtvVerification::::updateDss()", "521": "LtvVerification::::updateDss()", "522": "LtvVerification::::updateDss()", "523": "LtvVerification::::updateDss()", "524": "LtvVerification::::updateDss()", "525": "LtvVerification::::updateDss()", "526": "LtvVerification::::updateDss()", "527": "LtvVerification::::updateDss()", "528": "LtvVerification::::updateDss()", "529": "LtvVerification::::updateDss()", "530": "LtvVerification::::updateDss()", "531": "LtvVerification::::updateDss()", "532": "LtvVerification::::updateDss()", "533": "LtvVerification::::updateDss()", "534": "LtvVerification::::updateDss()", "535": "LtvVerification::::updateDss()", "536": "LtvVerification::::updateDss()", "557": "LtvVerification::::createDss()", "558": "LtvVerification::::createDss()", "559": "LtvVerification::::createDss()", "636": "LtvVerification::::retrieveMissingCertificates(java.security.cert.Certificate[])", "637": "LtvVerification::::retrieveMissingCertificates(java.security.cert.Certificate[])", "638": "LtvVerification::::retrieveMissingCertificates(java.security.cert.Certificate[])", "639": "LtvVerification::::retrieveMissingCertificates(java.security.cert.Certificate[])", "640": "LtvVerification::::retrieveMissingCertificates(java.security.cert.Certificate[])", "641": "LtvVerification::::retrieveMissingCertificates(java.security.cert.Certificate[])", "642": "LtvVerification::::retrieveMissingCertificates(java.security.cert.Certificate[])", "643": "LtvVerification::::retrieveMissingCertificates(java.security.cert.Certificate[])", "644": "LtvVerification::::retrieveMissingCertificates(java.security.cert.Certificate[])", "645": "LtvVerification::::retrieveMissingCertificates(java.security.cert.Certificate[])", "646": "LtvVerification::::retrieveMissingCertificates(java.security.cert.Certificate[])"}, "test_reverse_method_lines_dic": {"78": "LtvVerificationTest::::before()", "79": "LtvVerificationTest::::before()", "80": "LtvVerificationTest::::before()", "81": "LtvVerificationTest::::before()", "82": "LtvVerificationTest::::before()", "83": "LtvVerificationTest::::before()", "85": "LtvVerificationTest::::addVerificationToDocumentWithAlreadyExistedDss()", "86": "LtvVerificationTest::::addVerificationToDocumentWithAlreadyExistedDss()", "87": "LtvVerificationTest::::addVerificationToDocumentWithAlreadyExistedDss()", "88": "LtvVerificationTest::::addVerificationToDocumentWithAlreadyExistedDss()", "89": "LtvVerificationTest::::addVerificationToDocumentWithAlreadyExistedDss()", "90": "LtvVerificationTest::::addVerificationToDocumentWithAlreadyExistedDss()", "91": "LtvVerificationTest::::addVerificationToDocumentWithAlreadyExistedDss()", "92": "LtvVerificationTest::::addVerificationToDocumentWithAlreadyExistedDss()", "93": "LtvVerificationTest::::addVerificationToDocumentWithAlreadyExistedDss()", "94": "LtvVerificationTest::::addVerificationToDocumentWithAlreadyExistedDss()", "95": "LtvVerificationTest::::addVerificationToDocumentWithAlreadyExistedDss()", "96": "LtvVerificationTest::::addVerificationToDocumentWithAlreadyExistedDss()", "97": "LtvVerificationTest::::addVerificationToDocumentWithAlreadyExistedDss()", "98": "LtvVerificationTest::::addVerificationToDocumentWithAlreadyExistedDss()", "99": "LtvVerificationTest::::addVerificationToDocumentWithAlreadyExistedDss()", "100": "LtvVerificationTest::::addVerificationToDocumentWithAlreadyExistedDss()", "101": "LtvVerificationTest::::addVerificationToDocumentWithAlreadyExistedDss()", "102": "LtvVerificationTest::::addVerificationToDocumentWithAlreadyExistedDss()", "103": "LtvVerificationTest::::addVerificationToDocumentWithAlreadyExistedDss()", "104": "LtvVerificationTest::::addVerificationToDocumentWithAlreadyExistedDss()", "105": "LtvVerificationTest::::addVerificationToDocumentWithAlreadyExistedDss()", "106": "LtvVerificationTest::::addVerificationToDocumentWithAlreadyExistedDss()", "107": "LtvVerificationTest::::addVerificationToDocumentWithAlreadyExistedDss()", "108": "LtvVerificationTest::::addVerificationToDocumentWithAlreadyExistedDss()", "109": "LtvVerificationTest::::addVerificationToDocumentWithAlreadyExistedDss()", "110": "LtvVerificationTest::::addVerificationToDocumentWithAlreadyExistedDss()", "111": "LtvVerificationTest::::addVerificationToDocumentWithAlreadyExistedDss()", "112": "LtvVerificationTest::::addVerificationToDocumentWithAlreadyExistedDss()", "113": "LtvVerificationTest::::addVerificationToDocumentWithAlreadyExistedDss()", "114": "LtvVerificationTest::::addVerificationToDocumentWithAlreadyExistedDss()", "115": "LtvVerificationTest::::addVerificationToDocumentWithAlreadyExistedDss()", "116": "LtvVerificationTest::::addVerificationToDocumentWithAlreadyExistedDss()", "117": "LtvVerificationTest::::addVerificationToDocumentWithAlreadyExistedDss()", "118": "LtvVerificationTest::::addVerificationToDocumentWithAlreadyExistedDss()", "119": "LtvVerificationTest::::addVerificationToDocumentWithAlreadyExistedDss()", "120": "LtvVerificationTest::::addVerificationToDocumentWithAlreadyExistedDss()", "121": "LtvVerificationTest::::addVerificationToDocumentWithAlreadyExistedDss()", "122": "LtvVerificationTest::::addVerificationToDocumentWithAlreadyExistedDss()", "123": "LtvVerificationTest::::addVerificationToDocumentWithAlreadyExistedDss()", "124": "LtvVerificationTest::::addVerificationToDocumentWithAlreadyExistedDss()", "125": "LtvVerificationTest::::addVerificationToDocumentWithAlreadyExistedDss()", "126": "LtvVerificationTest::::addVerificationToDocumentWithAlreadyExistedDss()", "127": "LtvVerificationTest::::addVerificationToDocumentWithAlreadyExistedDss()", "128": "LtvVerificationTest::::addVerificationToDocumentWithAlreadyExistedDss()", "129": "LtvVerificationTest::::addVerificationToDocumentWithAlreadyExistedDss()", "130": "LtvVerificationTest::::addVerificationToDocumentWithAlreadyExistedDss()", "131": "LtvVerificationTest::::addVerificationToDocumentWithAlreadyExistedDss()", "132": "LtvVerificationTest::::addVerificationToDocumentWithAlreadyExistedDss()", "133": "LtvVerificationTest::::addVerificationToDocumentWithAlreadyExistedDss()", "134": "LtvVerificationTest::::addVerificationToDocumentWithAlreadyExistedDss()", "135": "LtvVerificationTest::::addVerificationToDocumentWithAlreadyExistedDss()", "136": "LtvVerificationTest::::addVerificationToDocumentWithAlreadyExistedDss()", "137": "LtvVerificationTest::::addVerificationToDocumentWithAlreadyExistedDss()", "138": "LtvVerificationTest::::addVerificationToDocumentWithAlreadyExistedDss()", "139": "LtvVerificationTest::::addVerificationToDocumentWithAlreadyExistedDss()", "140": "LtvVerificationTest::::addVerificationToDocumentWithAlreadyExistedDss()", "141": "LtvVerificationTest::::addVerificationToDocumentWithAlreadyExistedDss()", "142": "LtvVerificationTest::::addVerificationToDocumentWithAlreadyExistedDss()", "144": "LtvVerificationTest::::validateSigNameWithEmptyByteArrayCrlOcspCertTest()", "145": "LtvVerificationTest::::validateSigNameWithEmptyByteArrayCrlOcspCertTest()", "146": "LtvVerificationTest::::validateSigNameWithEmptyByteArrayCrlOcspCertTest()", "147": "LtvVerificationTest::::validateSigNameWithEmptyByteArrayCrlOcspCertTest()", "148": "LtvVerificationTest::::validateSigNameWithEmptyByteArrayCrlOcspCertTest()", "149": "LtvVerificationTest::::validateSigNameWithEmptyByteArrayCrlOcspCertTest()", "150": "LtvVerificationTest::::validateSigNameWithEmptyByteArrayCrlOcspCertTest()", "151": "LtvVerificationTest::::validateSigNameWithEmptyByteArrayCrlOcspCertTest()", "152": "LtvVerificationTest::::validateSigNameWithEmptyByteArrayCrlOcspCertTest()", "153": "LtvVerificationTest::::validateSigNameWithEmptyByteArrayCrlOcspCertTest()", "154": "LtvVerificationTest::::validateSigNameWithEmptyByteArrayCrlOcspCertTest()", "156": "LtvVerificationTest::::tryAddVerificationAfterMerge()", "157": "LtvVerificationTest::::tryAddVerificationAfterMerge()", "158": "LtvVerificationTest::::tryAddVerificationAfterMerge()", "159": "LtvVerificationTest::::tryAddVerificationAfterMerge()", "160": "LtvVerificationTest::::tryAddVerificationAfterMerge()", "161": "LtvVerificationTest::::tryAddVerificationAfterMerge()", "162": "LtvVerificationTest::::tryAddVerificationAfterMerge()", "163": "LtvVerificationTest::::tryAddVerificationAfterMerge()", "164": "LtvVerificationTest::::tryAddVerificationAfterMerge()", "165": "LtvVerificationTest::::tryAddVerificationAfterMerge()", "166": "LtvVerificationTest::::tryAddVerificationAfterMerge()", "167": "LtvVerificationTest::::tryAddVerificationAfterMerge()", "168": "LtvVerificationTest::::tryAddVerificationAfterMerge()", "169": "LtvVerificationTest::::tryAddVerificationAfterMerge()", "170": "LtvVerificationTest::::tryAddVerificationAfterMerge()", "171": "LtvVerificationTest::::tryAddVerificationAfterMerge()", "172": "LtvVerificationTest::::tryAddVerificationAfterMerge()", "173": "LtvVerificationTest::::tryAddVerificationAfterMerge()", "174": "LtvVerificationTest::::tryAddVerificationAfterMerge()", "175": "LtvVerificationTest::::tryAddVerificationAfterMerge()", "176": "LtvVerificationTest::::tryAddVerificationAfterMerge()", "177": "LtvVerificationTest::::tryAddVerificationAfterMerge()", "178": "LtvVerificationTest::::tryAddVerificationAfterMerge()", "179": "LtvVerificationTest::::tryAddVerificationAfterMerge()", "180": "LtvVerificationTest::::tryAddVerificationAfterMerge()", "181": "LtvVerificationTest::::tryAddVerificationAfterMerge()", "182": "LtvVerificationTest::::tryAddVerificationAfterMerge()", "184": "LtvVerificationTest::::validateSigNameWithNullCrlOcspCertTest()", "185": "LtvVerificationTest::::validateSigNameWithNullCrlOcspCertTest()", "186": "LtvVerificationTest::::validateSigNameWithNullCrlOcspCertTest()", "187": "LtvVerificationTest::::validateSigNameWithNullCrlOcspCertTest()", "189": "LtvVerificationTest::::exceptionWhenValidateNonExistentSigNameTest()", "190": "LtvVerificationTest::::exceptionWhenValidateNonExistentSigNameTest()", "191": "LtvVerificationTest::::exceptionWhenValidateNonExistentSigNameTest()", "192": "LtvVerificationTest::::exceptionWhenValidateNonExistentSigNameTest()", "193": "LtvVerificationTest::::exceptionWhenValidateNonExistentSigNameTest()", "194": "LtvVerificationTest::::exceptionWhenValidateNonExistentSigNameTest()", "196": "LtvVerificationTest::::exceptionWhenValidateParticularNonExistentSigNameTest()", "197": "LtvVerificationTest::::exceptionWhenValidateParticularNonExistentSigNameTest()", "198": "LtvVerificationTest::::exceptionWhenValidateParticularNonExistentSigNameTest()", "199": "LtvVerificationTest::::exceptionWhenValidateParticularNonExistentSigNameTest()", "200": "LtvVerificationTest::::exceptionWhenValidateParticularNonExistentSigNameTest()", "201": "LtvVerificationTest::::exceptionWhenValidateParticularNonExistentSigNameTest()", "202": "LtvVerificationTest::::exceptionWhenValidateParticularNonExistentSigNameTest()", "204": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningOcspCrlYesTest()", "205": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningOcspCrlYesTest()", "206": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningOcspCrlYesTest()", "207": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningOcspCrlYesTest()", "208": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningOcspCrlYesTest()", "209": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningOcspCrlYesTest()", "210": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningOcspCrlYesTest()", "211": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningOcspCrlYesTest()", "212": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningOcspCrlYesTest()", "213": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningOcspCrlYesTest()", "214": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningOcspCrlYesTest()", "216": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningOcspYesTest()", "217": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningOcspYesTest()", "218": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningOcspYesTest()", "219": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningOcspYesTest()", "220": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningOcspYesTest()", "222": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningCrlYesTest()", "223": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningCrlYesTest()", "224": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningCrlYesTest()", "225": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningCrlYesTest()", "226": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningCrlYesTest()", "227": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningCrlYesTest()", "228": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningCrlYesTest()", "229": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningCrlYesTest()", "230": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningCrlYesTest()", "231": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningCrlYesTest()", "232": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningCrlYesTest()", "234": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningOcspOptCrlYesTest()", "235": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningOcspOptCrlYesTest()", "236": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningOcspOptCrlYesTest()", "237": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningOcspOptCrlYesTest()", "238": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningOcspOptCrlYesTest()", "239": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningOcspOptCrlYesTest()", "240": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningOcspOptCrlYesTest()", "241": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningOcspOptCrlYesTest()", "242": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningOcspOptCrlYesTest()", "243": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningOcspOptCrlYesTest()", "244": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningOcspOptCrlYesTest()", "245": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningOcspOptCrlYesTest()", "247": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainOcspYesTest()", "248": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainOcspYesTest()", "249": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainOcspYesTest()", "250": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainOcspYesTest()", "252": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainCrlYesTest()", "253": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainCrlYesTest()", "254": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainCrlYesTest()", "255": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainCrlYesTest()", "256": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainCrlYesTest()", "257": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainCrlYesTest()", "258": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainCrlYesTest()", "259": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainCrlYesTest()", "260": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainCrlYesTest()", "261": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainCrlYesTest()", "262": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainCrlYesTest()", "263": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainCrlYesTest()", "265": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainOptCrlYesTest()", "266": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainOptCrlYesTest()", "267": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainOptCrlYesTest()", "268": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainOptCrlYesTest()", "269": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainOptCrlYesTest()", "270": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainOptCrlYesTest()", "271": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainOptCrlYesTest()", "272": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainOptCrlYesTest()", "273": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainOptCrlYesTest()", "274": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainOptCrlYesTest()", "275": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainOptCrlYesTest()", "276": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainOptCrlYesTest()", "277": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainOptCrlYesTest()", "279": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainOcspCrlYesTest()", "280": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainOcspCrlYesTest()", "281": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainOcspCrlYesTest()", "282": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainOcspCrlYesTest()", "283": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainOcspCrlYesTest()", "284": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainOcspCrlYesTest()", "285": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainOcspCrlYesTest()", "286": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainOcspCrlYesTest()", "287": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainOcspCrlYesTest()", "288": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainOcspCrlYesTest()", "289": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainOcspCrlYesTest()", "290": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainOcspCrlYesTest()", "291": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainOcspCrlYesTest()", "292": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainOcspCrlYesTest()", "294": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningOcspCrlNoTest()", "295": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningOcspCrlNoTest()", "296": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningOcspCrlNoTest()", "297": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningOcspCrlNoTest()", "298": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningOcspCrlNoTest()", "299": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningOcspCrlNoTest()", "300": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningOcspCrlNoTest()", "301": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningOcspCrlNoTest()", "302": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningOcspCrlNoTest()", "303": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningOcspCrlNoTest()", "304": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningOcspCrlNoTest()", "306": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningOcspNoTest()", "307": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningOcspNoTest()", "308": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningOcspNoTest()", "309": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningOcspNoTest()", "310": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningOcspNoTest()", "312": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningCrlNoTest()", "313": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningCrlNoTest()", "314": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningCrlNoTest()", "315": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningCrlNoTest()", "316": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningCrlNoTest()", "317": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningCrlNoTest()", "318": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningCrlNoTest()", "319": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningCrlNoTest()", "320": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningCrlNoTest()", "321": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningCrlNoTest()", "322": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningCrlNoTest()", "324": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningOcspOptCrlNoTest()", "325": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningOcspOptCrlNoTest()", "326": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningOcspOptCrlNoTest()", "327": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningOcspOptCrlNoTest()", "328": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningOcspOptCrlNoTest()", "329": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningOcspOptCrlNoTest()", "330": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningOcspOptCrlNoTest()", "331": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningOcspOptCrlNoTest()", "332": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningOcspOptCrlNoTest()", "333": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningOcspOptCrlNoTest()", "334": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspSigningOcspOptCrlNoTest()", "336": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainOcspNoTest()", "337": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainOcspNoTest()", "338": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainOcspNoTest()", "339": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainOcspNoTest()", "341": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainCrlNoTest()", "342": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainCrlNoTest()", "343": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainCrlNoTest()", "344": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainCrlNoTest()", "345": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainCrlNoTest()", "346": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainCrlNoTest()", "347": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainCrlNoTest()", "348": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainCrlNoTest()", "349": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainCrlNoTest()", "350": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainCrlNoTest()", "351": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainCrlNoTest()", "352": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainCrlNoTest()", "354": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainOptCrlNoTest()", "355": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainOptCrlNoTest()", "356": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainOptCrlNoTest()", "357": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainOptCrlNoTest()", "358": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainOptCrlNoTest()", "359": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainOptCrlNoTest()", "360": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainOptCrlNoTest()", "361": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainOptCrlNoTest()", "362": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainOptCrlNoTest()", "363": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainOptCrlNoTest()", "364": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainOptCrlNoTest()", "365": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainOptCrlNoTest()", "366": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainOptCrlNoTest()", "368": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainOcspCrlNoTest()", "369": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainOcspCrlNoTest()", "370": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainOcspCrlNoTest()", "371": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainOcspCrlNoTest()", "372": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainOcspCrlNoTest()", "373": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainOcspCrlNoTest()", "374": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainOcspCrlNoTest()", "375": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainOcspCrlNoTest()", "376": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainOcspCrlNoTest()", "377": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainOcspCrlNoTest()", "378": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainOcspCrlNoTest()", "379": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainOcspCrlNoTest()", "380": "LtvVerificationTest::::validateSigNameWithoutCrlAndOcspWholeChainOcspCrlNoTest()", "382": "LtvVerificationTest::::validateSigNameSigningOcspCrlYesTest()", "383": "LtvVerificationTest::::validateSigNameSigningOcspCrlYesTest()", "384": "LtvVerificationTest::::validateSigNameSigningOcspCrlYesTest()", "385": "LtvVerificationTest::::validateSigNameSigningOcspCrlYesTest()", "386": "LtvVerificationTest::::validateSigNameSigningOcspCrlYesTest()", "387": "LtvVerificationTest::::validateSigNameSigningOcspCrlYesTest()", "388": "LtvVerificationTest::::validateSigNameSigningOcspCrlYesTest()", "389": "LtvVerificationTest::::validateSigNameSigningOcspCrlYesTest()", "390": "LtvVerificationTest::::validateSigNameSigningOcspCrlYesTest()", "391": "LtvVerificationTest::::validateSigNameSigningOcspCrlYesTest()", "393": "LtvVerificationTest::::validateSigNameSigningOcspYesTest()", "394": "LtvVerificationTest::::validateSigNameSigningOcspYesTest()", "395": "LtvVerificationTest::::validateSigNameSigningOcspYesTest()", "396": "LtvVerificationTest::::validateSigNameSigningOcspYesTest()", "397": "LtvVerificationTest::::validateSigNameSigningOcspYesTest()", "398": "LtvVerificationTest::::validateSigNameSigningOcspYesTest()", "399": "LtvVerificationTest::::validateSigNameSigningOcspYesTest()", "400": "LtvVerificationTest::::validateSigNameSigningOcspYesTest()", "402": "LtvVerificationTest::::validateSigNameSigningCrlYesTest()", "403": "LtvVerificationTest::::validateSigNameSigningCrlYesTest()", "404": "LtvVerificationTest::::validateSigNameSigningCrlYesTest()", "405": "LtvVerificationTest::::validateSigNameSigningCrlYesTest()", "406": "LtvVerificationTest::::validateSigNameSigningCrlYesTest()", "407": "LtvVerificationTest::::validateSigNameSigningCrlYesTest()", "408": "LtvVerificationTest::::validateSigNameSigningCrlYesTest()", "409": "LtvVerificationTest::::validateSigNameSigningCrlYesTest()", "410": "LtvVerificationTest::::validateSigNameSigningCrlYesTest()", "411": "LtvVerificationTest::::validateSigNameSigningCrlYesTest()", "413": "LtvVerificationTest::::validateSigNameSigningOcspOptionalCrlYesTest()", "414": "LtvVerificationTest::::validateSigNameSigningOcspOptionalCrlYesTest()", "415": "LtvVerificationTest::::validateSigNameSigningOcspOptionalCrlYesTest()", "416": "LtvVerificationTest::::validateSigNameSigningOcspOptionalCrlYesTest()", "417": "LtvVerificationTest::::validateSigNameSigningOcspOptionalCrlYesTest()", "418": "LtvVerificationTest::::validateSigNameSigningOcspOptionalCrlYesTest()", "419": "LtvVerificationTest::::validateSigNameSigningOcspOptionalCrlYesTest()", "420": "LtvVerificationTest::::validateSigNameSigningOcspOptionalCrlYesTest()", "421": "LtvVerificationTest::::validateSigNameSigningOcspOptionalCrlYesTest()", "422": "LtvVerificationTest::::validateSigNameSigningOcspOptionalCrlYesTest()", "424": "LtvVerificationTest::::validateSigNameSigningOcspCrlNoTest()", "425": "LtvVerificationTest::::validateSigNameSigningOcspCrlNoTest()", "426": "LtvVerificationTest::::validateSigNameSigningOcspCrlNoTest()", "427": "LtvVerificationTest::::validateSigNameSigningOcspCrlNoTest()", "428": "LtvVerificationTest::::validateSigNameSigningOcspCrlNoTest()", "429": "LtvVerificationTest::::validateSigNameSigningOcspCrlNoTest()", "430": "LtvVerificationTest::::validateSigNameSigningOcspCrlNoTest()", "431": "LtvVerificationTest::::validateSigNameSigningOcspCrlNoTest()", "432": "LtvVerificationTest::::validateSigNameSigningOcspCrlNoTest()", "433": "LtvVerificationTest::::validateSigNameSigningOcspCrlNoTest()", "435": "LtvVerificationTest::::validateSigNameSigningOcspNoTest()", "436": "LtvVerificationTest::::validateSigNameSigningOcspNoTest()", "437": "LtvVerificationTest::::validateSigNameSigningOcspNoTest()", "438": "LtvVerificationTest::::validateSigNameSigningOcspNoTest()", "439": "LtvVerificationTest::::validateSigNameSigningOcspNoTest()", "440": "LtvVerificationTest::::validateSigNameSigningOcspNoTest()", "441": "LtvVerificationTest::::validateSigNameSigningOcspNoTest()", "442": "LtvVerificationTest::::validateSigNameSigningOcspNoTest()", "444": "LtvVerificationTest::::validateSigNameSigningCrlNoTest()", "445": "LtvVerificationTest::::validateSigNameSigningCrlNoTest()", "446": "LtvVerificationTest::::validateSigNameSigningCrlNoTest()", "447": "LtvVerificationTest::::validateSigNameSigningCrlNoTest()", "448": "LtvVerificationTest::::validateSigNameSigningCrlNoTest()", "449": "LtvVerificationTest::::validateSigNameSigningCrlNoTest()", "450": "LtvVerificationTest::::validateSigNameSigningCrlNoTest()", "451": "LtvVerificationTest::::validateSigNameSigningCrlNoTest()", "452": "LtvVerificationTest::::validateSigNameSigningCrlNoTest()", "453": "LtvVerificationTest::::validateSigNameSigningCrlNoTest()", "455": "LtvVerificationTest::::validateSigNameSigningOcspOptionalCrlNoTest()", "456": "LtvVerificationTest::::validateSigNameSigningOcspOptionalCrlNoTest()", "457": "LtvVerificationTest::::validateSigNameSigningOcspOptionalCrlNoTest()", "458": "LtvVerificationTest::::validateSigNameSigningOcspOptionalCrlNoTest()", "459": "LtvVerificationTest::::validateSigNameSigningOcspOptionalCrlNoTest()", "460": "LtvVerificationTest::::validateSigNameSigningOcspOptionalCrlNoTest()", "461": "LtvVerificationTest::::validateSigNameSigningOcspOptionalCrlNoTest()", "462": "LtvVerificationTest::::validateSigNameSigningOcspOptionalCrlNoTest()", "463": "LtvVerificationTest::::validateSigNameSigningOcspOptionalCrlNoTest()", "464": "LtvVerificationTest::::validateSigNameSigningOcspOptionalCrlNoTest()", "466": "LtvVerificationTest::::validateSigNameWholeChainOcspCrlYesTest()", "467": "LtvVerificationTest::::validateSigNameWholeChainOcspCrlYesTest()", "468": "LtvVerificationTest::::validateSigNameWholeChainOcspCrlYesTest()", "469": "LtvVerificationTest::::validateSigNameWholeChainOcspCrlYesTest()", "470": "LtvVerificationTest::::validateSigNameWholeChainOcspCrlYesTest()", "471": "LtvVerificationTest::::validateSigNameWholeChainOcspCrlYesTest()", "472": "LtvVerificationTest::::validateSigNameWholeChainOcspCrlYesTest()", "473": "LtvVerificationTest::::validateSigNameWholeChainOcspCrlYesTest()", "474": "LtvVerificationTest::::validateSigNameWholeChainOcspCrlYesTest()", "475": "LtvVerificationTest::::validateSigNameWholeChainOcspCrlYesTest()", "476": "LtvVerificationTest::::validateSigNameWholeChainOcspCrlYesTest()", "477": "LtvVerificationTest::::validateSigNameWholeChainOcspCrlYesTest()", "479": "LtvVerificationTest::::validateSigNameWholeChainOcspOptionalCrlYesTest()", "480": "LtvVerificationTest::::validateSigNameWholeChainOcspOptionalCrlYesTest()", "481": "LtvVerificationTest::::validateSigNameWholeChainOcspOptionalCrlYesTest()", "482": "LtvVerificationTest::::validateSigNameWholeChainOcspOptionalCrlYesTest()", "483": "LtvVerificationTest::::validateSigNameWholeChainOcspOptionalCrlYesTest()", "484": "LtvVerificationTest::::validateSigNameWholeChainOcspOptionalCrlYesTest()", "485": "LtvVerificationTest::::validateSigNameWholeChainOcspOptionalCrlYesTest()", "486": "LtvVerificationTest::::validateSigNameWholeChainOcspOptionalCrlYesTest()", "487": "LtvVerificationTest::::validateSigNameWholeChainOcspOptionalCrlYesTest()", "488": "LtvVerificationTest::::validateSigNameWholeChainOcspOptionalCrlYesTest()", "489": "LtvVerificationTest::::validateSigNameWholeChainOcspOptionalCrlYesTest()", "490": "LtvVerificationTest::::validateSigNameWholeChainOcspOptionalCrlYesTest()", "492": "LtvVerificationTest::::validateSigNameWholeChainOcspYesTest()", "493": "LtvVerificationTest::::validateSigNameWholeChainOcspYesTest()", "494": "LtvVerificationTest::::validateSigNameWholeChainOcspYesTest()", "495": "LtvVerificationTest::::validateSigNameWholeChainOcspYesTest()", "496": "LtvVerificationTest::::validateSigNameWholeChainOcspYesTest()", "497": "LtvVerificationTest::::validateSigNameWholeChainOcspYesTest()", "498": "LtvVerificationTest::::validateSigNameWholeChainOcspYesTest()", "499": "LtvVerificationTest::::validateSigNameWholeChainOcspYesTest()", "501": "LtvVerificationTest::::validateSigNameWholeChainCrlYesTest()", "502": "LtvVerificationTest::::validateSigNameWholeChainCrlYesTest()", "503": "LtvVerificationTest::::validateSigNameWholeChainCrlYesTest()", "504": "LtvVerificationTest::::validateSigNameWholeChainCrlYesTest()", "505": "LtvVerificationTest::::validateSigNameWholeChainCrlYesTest()", "506": "LtvVerificationTest::::validateSigNameWholeChainCrlYesTest()", "507": "LtvVerificationTest::::validateSigNameWholeChainCrlYesTest()", "508": "LtvVerificationTest::::validateSigNameWholeChainCrlYesTest()", "509": "LtvVerificationTest::::validateSigNameWholeChainCrlYesTest()", "510": "LtvVerificationTest::::validateSigNameWholeChainCrlYesTest()", "511": "LtvVerificationTest::::validateSigNameWholeChainCrlYesTest()", "512": "LtvVerificationTest::::validateSigNameWholeChainCrlYesTest()", "514": "LtvVerificationTest::::validateSigNameWholeChainOcspCrlNoTest()", "515": "LtvVerificationTest::::validateSigNameWholeChainOcspCrlNoTest()", "516": "LtvVerificationTest::::validateSigNameWholeChainOcspCrlNoTest()", "517": "LtvVerificationTest::::validateSigNameWholeChainOcspCrlNoTest()", "518": "LtvVerificationTest::::validateSigNameWholeChainOcspCrlNoTest()", "519": "LtvVerificationTest::::validateSigNameWholeChainOcspCrlNoTest()", "520": "LtvVerificationTest::::validateSigNameWholeChainOcspCrlNoTest()", "521": "LtvVerificationTest::::validateSigNameWholeChainOcspCrlNoTest()", "522": "LtvVerificationTest::::validateSigNameWholeChainOcspCrlNoTest()", "523": "LtvVerificationTest::::validateSigNameWholeChainOcspCrlNoTest()", "524": "LtvVerificationTest::::validateSigNameWholeChainOcspCrlNoTest()", "525": "LtvVerificationTest::::validateSigNameWholeChainOcspCrlNoTest()", "527": "LtvVerificationTest::::validateSigNameWholeChainOcspOptionalCrlNoTest()", "528": "LtvVerificationTest::::validateSigNameWholeChainOcspOptionalCrlNoTest()", "529": "LtvVerificationTest::::validateSigNameWholeChainOcspOptionalCrlNoTest()", "530": "LtvVerificationTest::::validateSigNameWholeChainOcspOptionalCrlNoTest()", "531": "LtvVerificationTest::::validateSigNameWholeChainOcspOptionalCrlNoTest()", "532": "LtvVerificationTest::::validateSigNameWholeChainOcspOptionalCrlNoTest()", "533": "LtvVerificationTest::::validateSigNameWholeChainOcspOptionalCrlNoTest()", "534": "LtvVerificationTest::::validateSigNameWholeChainOcspOptionalCrlNoTest()", "535": "LtvVerificationTest::::validateSigNameWholeChainOcspOptionalCrlNoTest()", "536": "LtvVerificationTest::::validateSigNameWholeChainOcspOptionalCrlNoTest()", "537": "LtvVerificationTest::::validateSigNameWholeChainOcspOptionalCrlNoTest()", "538": "LtvVerificationTest::::validateSigNameWholeChainOcspOptionalCrlNoTest()", "540": "LtvVerificationTest::::validateSigNameWholeChainOcspNoTest()", "541": "LtvVerificationTest::::validateSigNameWholeChainOcspNoTest()", "542": "LtvVerificationTest::::validateSigNameWholeChainOcspNoTest()", "543": "LtvVerificationTest::::validateSigNameWholeChainOcspNoTest()", "544": "LtvVerificationTest::::validateSigNameWholeChainOcspNoTest()", "545": "LtvVerificationTest::::validateSigNameWholeChainOcspNoTest()", "546": "LtvVerificationTest::::validateSigNameWholeChainOcspNoTest()", "547": "LtvVerificationTest::::validateSigNameWholeChainOcspNoTest()", "549": "LtvVerificationTest::::validateSigNameWholeChainCrlNoTest()", "550": "LtvVerificationTest::::validateSigNameWholeChainCrlNoTest()", "551": "LtvVerificationTest::::validateSigNameWholeChainCrlNoTest()", "552": "LtvVerificationTest::::validateSigNameWholeChainCrlNoTest()", "553": "LtvVerificationTest::::validateSigNameWholeChainCrlNoTest()", "554": "LtvVerificationTest::::validateSigNameWholeChainCrlNoTest()", "555": "LtvVerificationTest::::validateSigNameWholeChainCrlNoTest()", "556": "LtvVerificationTest::::validateSigNameWholeChainCrlNoTest()", "557": "LtvVerificationTest::::validateSigNameWholeChainCrlNoTest()", "558": "LtvVerificationTest::::validateSigNameWholeChainCrlNoTest()", "559": "LtvVerificationTest::::validateSigNameWholeChainCrlNoTest()", "560": "LtvVerificationTest::::validateSigNameWholeChainCrlNoTest()", "562": "LtvVerificationTest::::getParentWithoutCertsTest()", "563": "LtvVerificationTest::::getParentWithoutCertsTest()", "564": "LtvVerificationTest::::getParentWithoutCertsTest()", "565": "LtvVerificationTest::::getParentWithoutCertsTest()", "566": "LtvVerificationTest::::getParentWithoutCertsTest()", "567": "LtvVerificationTest::::getParentWithoutCertsTest()", "568": "LtvVerificationTest::::getParentWithoutCertsTest()"}, "tests": [{"test_lines": [85, 142], "covered_lines": [82, 84, 88, 89, 90, 91, 92, 97, 101, 105, 109, 113, 119, 123, 127, 132, 139, 143, 147, 153, 157, 161, 171, 172, 173, 174, 238, 241, 242, 243, 244, 245, 246, 247, 250, 255, 261, 264, 265, 307, 310, 311, 312, 313, 316, 318, 328, 329, 330, 332, 364, 365, 366, 367, 368, 369, 370, 373, 376, 382, 383, 384, 389, 390, 391, 406, 409, 410, 411, 412, 413, 419, 420, 421, 422, 423, 430, 433, 437, 487, 488, 489, 490, 491, 495, 496, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 521, 523, 526, 527, 529, 530, 532, 535, 536, 539, 540, 543, 544, 546, 547, 549, 550, 551, 554, 555, 562, 563, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 586, 594, 598, 599, 600, 602, 606, 607, 608, 609, 610, 611, 612, 616, 617, 618, 620, 625, 626, 627, 628, 630, 631, 632, 633]}, {"test_lines": [144, 154], "covered_lines": [82, 84, 88, 89, 90, 91, 92, 153, 157, 161, 171, 172, 173, 174, 284, 287, 288, 289, 290, 291, 293, 294, 296, 297, 299, 300, 328, 329, 330, 332, 477, 478, 479, 480, 481, 482, 483, 487, 488, 489, 490, 491, 495, 496, 630, 631, 632, 633]}, {"test_lines": [156, 182], "covered_lines": [82, 84, 88, 89, 90, 91, 92, 97, 101, 105, 109, 113, 119, 123, 127, 132, 139, 143, 147, 153, 157, 161, 171, 172, 173, 174, 238, 239, 284, 285, 287, 288, 289, 290, 291, 293, 294, 296, 297, 299, 300, 307, 308, 310, 311, 312, 313, 316, 318, 328, 329, 330, 332, 477, 478, 479, 480, 481, 482, 483, 487, 488, 489, 490, 491, 495, 496, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 521, 523, 526, 529, 532, 535, 536, 539, 543, 544, 546, 547, 549, 550, 551, 554, 555, 562, 563, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 620, 621, 622, 625, 626, 627, 628, 630, 631, 632, 633]}, {"test_lines": [184, 187], "covered_lines": [82, 84, 88, 89, 90, 91, 92, 153, 157, 161, 171, 172, 173, 174, 284, 287, 288, 293, 296, 299, 300, 328, 329, 330, 332, 487, 488, 489, 490, 491, 495, 496, 630, 631, 632, 633]}, {"test_lines": [189, 194], "covered_lines": [82, 84, 88, 89, 90, 91, 92, 153, 157, 161, 171, 172, 173, 174, 284, 287, 288, 293, 296, 487, 630, 631, 632, 633]}, {"test_lines": [196, 202], "covered_lines": [82, 84, 88, 89, 90, 91, 92, 97, 101, 105, 109, 113, 119, 123, 127, 132, 139, 143, 147, 153, 157, 161, 171, 172, 173, 174, 238, 241, 242]}, {"test_lines": [204, 214], "covered_lines": [82, 84, 88, 89, 90, 91, 92, 97, 101, 105, 109, 113, 119, 123, 127, 132, 139, 143, 147, 153, 157, 161, 171, 172, 173, 174, 238, 241, 242, 243, 244, 245, 246, 247, 250, 255, 256, 257, 258, 261, 262, 345, 346, 347, 348, 351, 352, 364, 365, 366, 367, 368, 369, 370, 373, 376, 382, 383, 384, 389, 390, 391, 392, 393, 403, 406, 409, 410, 411, 433, 437, 630, 631, 632, 633]}, {"test_lines": [216, 220], "covered_lines": [82, 84, 88, 89, 90, 91, 92, 97, 101, 105, 109, 113, 119, 123, 127, 132, 139, 143, 147, 153, 157, 161, 171, 172, 173, 174, 238, 241, 242, 243, 244, 245, 246, 247, 250, 255, 256, 257, 258, 261, 262, 345, 346, 347, 348, 351, 352, 364, 365, 366, 367, 368, 369, 370, 373, 376, 382, 383, 384, 389, 390, 391, 392, 393, 403, 406, 433, 437, 630, 631, 632, 633]}, {"test_lines": [222, 232], "covered_lines": [82, 84, 88, 89, 90, 91, 92, 97, 101, 105, 109, 113, 119, 123, 127, 132, 139, 143, 147, 153, 157, 161, 171, 172, 173, 174, 238, 241, 242, 243, 244, 245, 246, 247, 250, 255, 256, 257, 258, 261, 262, 364, 365, 366, 367, 368, 369, 370, 373, 376, 382, 383, 384, 389, 390, 391, 406, 409, 410, 411, 433, 437, 630, 631, 632, 633]}, {"test_lines": [234, 245], "covered_lines": [82, 84, 88, 89, 90, 91, 92, 97, 101, 105, 109, 113, 119, 123, 127, 132, 139, 143, 147, 153, 157, 161, 171, 172, 173, 174, 238, 241, 242, 243, 244, 245, 246, 247, 250, 255, 256, 257, 258, 261, 262, 345, 346, 347, 348, 351, 352, 364, 365, 366, 367, 368, 369, 370, 373, 376, 382, 383, 384, 389, 390, 391, 392, 393, 403, 406, 409, 410, 411, 433, 437, 630, 631, 632, 633]}, {"test_lines": [247, 250], "covered_lines": [82, 84, 88, 89, 90, 91, 92, 97, 101, 105, 109, 113, 119, 123, 127, 132, 139, 143, 147, 153, 157, 161, 171, 172, 173, 174, 238, 241, 242, 243, 244, 245, 246, 247, 250, 255, 256, 257, 258, 261, 262, 345, 346, 347, 348, 351, 352, 364, 365, 366, 367, 368, 369, 370, 373, 376, 382, 383, 384, 389, 390, 391, 392, 393, 403, 406, 433, 437, 630, 631, 632, 633]}, {"test_lines": [252, 263], "covered_lines": [82, 84, 88, 89, 90, 91, 92, 97, 101, 105, 109, 113, 119, 123, 127, 132, 139, 143, 147, 153, 157, 161, 171, 172, 173, 174, 238, 241, 242, 243, 244, 245, 246, 247, 250, 255, 256, 257, 258, 261, 262, 364, 365, 366, 367, 368, 369, 370, 373, 376, 382, 383, 384, 389, 390, 391, 406, 409, 410, 411, 433, 437, 630, 631, 632, 633]}, {"test_lines": [265, 277], "covered_lines": [82, 84, 88, 89, 90, 91, 92, 97, 101, 105, 109, 113, 119, 123, 127, 132, 139, 143, 147, 153, 157, 161, 171, 172, 173, 174, 238, 241, 242, 243, 244, 245, 246, 247, 250, 255, 256, 257, 258, 261, 262, 345, 346, 347, 348, 351, 352, 364, 365, 366, 367, 368, 369, 370, 373, 376, 382, 383, 384, 389, 390, 391, 392, 393, 403, 406, 409, 410, 411, 433, 437, 630, 631, 632, 633]}, {"test_lines": [279, 292], "covered_lines": [82, 84, 88, 89, 90, 91, 92, 97, 101, 105, 109, 113, 119, 123, 127, 132, 139, 143, 147, 153, 157, 161, 171, 172, 173, 174, 238, 241, 242, 243, 244, 245, 246, 247, 250, 255, 256, 257, 258, 261, 262, 345, 346, 347, 348, 351, 352, 364, 365, 366, 367, 368, 369, 370, 373, 376, 382, 383, 384, 389, 390, 391, 392, 393, 403, 406, 409, 410, 411, 433, 437, 630, 631, 632, 633]}, {"test_lines": [294, 304], "covered_lines": [82, 84, 88, 89, 90, 91, 92, 97, 101, 105, 109, 113, 119, 123, 127, 132, 139, 143, 147, 153, 157, 161, 171, 172, 173, 174, 238, 241, 242, 243, 244, 245, 246, 247, 250, 255, 261, 262, 345, 346, 347, 348, 351, 352, 364, 365, 366, 367, 368, 369, 370, 373, 376, 382, 383, 384, 389, 390, 391, 392, 393, 403, 406, 409, 410, 411, 433, 437, 630, 631, 632, 633]}, {"test_lines": [306, 310], "covered_lines": [82, 84, 88, 89, 90, 91, 92, 97, 101, 105, 109, 113, 119, 123, 127, 132, 139, 143, 147, 153, 157, 161, 171, 172, 173, 174, 238, 241, 242, 243, 244, 245, 246, 247, 250, 255, 261, 262, 345, 346, 347, 348, 351, 352, 364, 365, 366, 367, 368, 369, 370, 373, 376, 382, 383, 384, 389, 390, 391, 392, 393, 403, 406, 433, 437, 630, 631, 632, 633]}, {"test_lines": [312, 322], "covered_lines": [82, 84, 88, 89, 90, 91, 92, 97, 101, 105, 109, 113, 119, 123, 127, 132, 139, 143, 147, 153, 157, 161, 171, 172, 173, 174, 238, 241, 242, 243, 244, 245, 246, 247, 250, 255, 261, 262, 364, 365, 366, 367, 368, 369, 370, 373, 376, 382, 383, 384, 389, 390, 391, 406, 409, 410, 411, 433, 437, 630, 631, 632, 633]}, {"test_lines": [324, 334], "covered_lines": [82, 84, 88, 89, 90, 91, 92, 97, 101, 105, 109, 113, 119, 123, 127, 132, 139, 143, 147, 153, 157, 161, 171, 172, 173, 174, 238, 241, 242, 243, 244, 245, 246, 247, 250, 255, 261, 262, 345, 346, 347, 348, 351, 352, 364, 365, 366, 367, 368, 369, 370, 373, 376, 382, 383, 384, 389, 390, 391, 392, 393, 403, 406, 409, 410, 411, 433, 437, 630, 631, 632, 633]}, {"test_lines": [336, 339], "covered_lines": [82, 84, 88, 89, 90, 91, 92, 97, 101, 105, 109, 113, 119, 123, 127, 132, 139, 143, 147, 153, 157, 161, 171, 172, 173, 174, 238, 241, 242, 243, 244, 245, 246, 247, 250, 255, 261, 262, 345, 346, 347, 348, 351, 352, 364, 365, 366, 367, 368, 369, 370, 373, 376, 382, 383, 384, 389, 390, 391, 392, 393, 403, 406, 433, 437, 630, 631, 632, 633]}, {"test_lines": [341, 352], "covered_lines": [82, 84, 88, 89, 90, 91, 92, 97, 101, 105, 109, 113, 119, 123, 127, 132, 139, 143, 147, 153, 157, 161, 171, 172, 173, 174, 238, 241, 242, 243, 244, 245, 246, 247, 250, 255, 261, 262, 364, 365, 366, 367, 368, 369, 370, 373, 376, 382, 383, 384, 389, 390, 391, 406, 409, 410, 411, 433, 437, 630, 631, 632, 633]}, {"test_lines": [354, 366], "covered_lines": [82, 84, 88, 89, 90, 91, 92, 97, 101, 105, 109, 113, 119, 123, 127, 132, 139, 143, 147, 153, 157, 161, 171, 172, 173, 174, 238, 241, 242, 243, 244, 245, 246, 247, 250, 255, 261, 262, 345, 346, 347, 348, 351, 352, 364, 365, 366, 367, 368, 369, 370, 373, 376, 382, 383, 384, 389, 390, 391, 392, 393, 403, 406, 409, 410, 411, 433, 437, 630, 631, 632, 633]}, {"test_lines": [368, 380], "covered_lines": [82, 84, 88, 89, 90, 91, 92, 97, 101, 105, 109, 113, 119, 123, 127, 132, 139, 143, 147, 153, 157, 161, 171, 172, 173, 174, 238, 241, 242, 243, 244, 245, 246, 247, 250, 255, 261, 262, 345, 346, 347, 348, 351, 352, 364, 365, 366, 367, 368, 369, 370, 373, 376, 382, 383, 384, 389, 390, 391, 392, 393, 403, 406, 409, 410, 411, 433, 437, 630, 631, 632, 633]}, {"test_lines": [382, 391], "covered_lines": [82, 84, 88, 89, 90, 91, 92, 97, 101, 105, 109, 113, 119, 123, 127, 132, 139, 143, 147, 153, 157, 161, 171, 172, 173, 174, 238, 241, 242, 243, 244, 245, 246, 247, 250, 255, 256, 257, 258, 261, 264, 265, 328, 329, 330, 332, 345, 346, 347, 348, 351, 352, 364, 365, 366, 367, 368, 369, 370, 373, 376, 382, 383, 384, 389, 390, 391, 392, 393, 403, 406, 409, 410, 411, 412, 413, 419, 420, 421, 422, 423, 430, 433, 437, 487, 488, 489, 490, 491, 495, 496, 630, 631, 632, 633]}, {"test_lines": [393, 400], "covered_lines": [82, 84, 88, 89, 90, 91, 92, 97, 101, 105, 109, 113, 119, 123, 127, 132, 139, 143, 147, 153, 157, 161, 171, 172, 173, 174, 238, 241, 242, 243, 244, 245, 246, 247, 250, 255, 256, 257, 258, 261, 262, 345, 346, 347, 348, 351, 352, 364, 365, 366, 367, 368, 369, 370, 373, 376, 382, 383, 384, 389, 390, 391, 392, 393, 403, 406, 433, 437, 630, 631, 632, 633]}, {"test_lines": [402, 411], "covered_lines": [82, 84, 88, 89, 90, 91, 92, 97, 101, 105, 109, 113, 119, 123, 127, 132, 139, 143, 147, 153, 157, 161, 171, 172, 173, 174, 238, 241, 242, 243, 244, 245, 246, 247, 250, 255, 256, 257, 258, 261, 264, 265, 328, 329, 330, 332, 364, 365, 366, 367, 368, 369, 370, 373, 376, 382, 383, 384, 389, 390, 391, 406, 409, 410, 411, 412, 413, 419, 420, 421, 422, 423, 430, 433, 437, 487, 488, 489, 490, 491, 495, 496, 630, 631, 632, 633]}, {"test_lines": [413, 422], "covered_lines": [82, 84, 88, 89, 90, 91, 92, 97, 101, 105, 109, 113, 119, 123, 127, 132, 139, 143, 147, 153, 157, 161, 171, 172, 173, 174, 238, 241, 242, 243, 244, 245, 246, 247, 250, 255, 256, 257, 258, 261, 264, 265, 328, 329, 330, 332, 345, 346, 347, 348, 351, 352, 364, 365, 366, 367, 368, 369, 370, 373, 376, 382, 383, 384, 389, 390, 391, 392, 393, 403, 406, 409, 410, 411, 412, 413, 419, 420, 421, 422, 423, 430, 433, 437, 487, 488, 489, 490, 491, 495, 496, 630, 631, 632, 633]}, {"test_lines": [424, 433], "covered_lines": [82, 84, 88, 89, 90, 91, 92, 97, 101, 105, 109, 113, 119, 123, 127, 132, 139, 143, 147, 153, 157, 161, 171, 172, 173, 174, 238, 241, 242, 243, 244, 245, 246, 247, 250, 255, 261, 264, 265, 328, 329, 330, 332, 345, 346, 347, 348, 351, 352, 364, 365, 366, 367, 368, 369, 370, 373, 376, 382, 383, 384, 389, 390, 391, 392, 393, 403, 406, 409, 410, 411, 412, 413, 419, 420, 421, 422, 423, 430, 433, 437, 487, 488, 489, 490, 491, 495, 496, 630, 631, 632, 633]}, {"test_lines": [435, 442], "covered_lines": [82, 84, 88, 89, 90, 91, 92, 97, 101, 105, 109, 113, 119, 123, 127, 132, 139, 143, 147, 153, 157, 161, 171, 172, 173, 174, 238, 241, 242, 243, 244, 245, 246, 247, 250, 255, 261, 262, 345, 346, 347, 348, 351, 352, 364, 365, 366, 367, 368, 369, 370, 373, 376, 382, 383, 384, 389, 390, 391, 392, 393, 403, 406, 433, 437, 630, 631, 632, 633]}, {"test_lines": [444, 453], "covered_lines": [82, 84, 88, 89, 90, 91, 92, 97, 101, 105, 109, 113, 119, 123, 127, 132, 139, 143, 147, 153, 157, 161, 171, 172, 173, 174, 238, 241, 242, 243, 244, 245, 246, 247, 250, 255, 261, 264, 265, 328, 329, 330, 332, 364, 365, 366, 367, 368, 369, 370, 373, 376, 382, 383, 384, 389, 390, 391, 406, 409, 410, 411, 412, 413, 419, 420, 421, 422, 423, 430, 433, 437, 487, 488, 489, 490, 491, 495, 496, 630, 631, 632, 633]}, {"test_lines": [455, 464], "covered_lines": [82, 84, 88, 89, 90, 91, 92, 97, 101, 105, 109, 113, 119, 123, 127, 132, 139, 143, 147, 153, 157, 161, 171, 172, 173, 174, 238, 241, 242, 243, 244, 245, 246, 247, 250, 255, 261, 264, 265, 328, 329, 330, 332, 345, 346, 347, 348, 351, 352, 364, 365, 366, 367, 368, 369, 370, 373, 376, 382, 383, 384, 389, 390, 391, 392, 393, 403, 406, 409, 410, 411, 412, 413, 419, 420, 421, 422, 423, 430, 433, 437, 487, 488, 489, 490, 491, 495, 496, 630, 631, 632, 633]}, {"test_lines": [466, 477], "covered_lines": [82, 84, 88, 89, 90, 91, 92, 97, 101, 105, 109, 113, 119, 123, 127, 132, 139, 143, 147, 153, 157, 161, 171, 172, 173, 174, 238, 241, 242, 243, 244, 245, 246, 247, 250, 255, 256, 257, 258, 261, 264, 265, 328, 329, 330, 332, 345, 346, 347, 348, 351, 352, 364, 365, 366, 367, 368, 369, 370, 373, 376, 382, 383, 384, 389, 390, 391, 392, 393, 403, 406, 409, 410, 411, 412, 413, 414, 415, 416, 419, 420, 421, 422, 423, 430, 433, 437, 487, 488, 489, 490, 491, 495, 496, 630, 631, 632, 633]}, {"test_lines": [479, 490], "covered_lines": [82, 84, 88, 89, 90, 91, 92, 97, 101, 105, 109, 113, 119, 123, 127, 132, 139, 143, 147, 153, 157, 161, 171, 172, 173, 174, 238, 241, 242, 243, 244, 245, 246, 247, 250, 255, 256, 257, 258, 261, 264, 265, 328, 329, 330, 332, 345, 346, 347, 348, 351, 352, 364, 365, 366, 367, 368, 369, 370, 373, 376, 382, 383, 384, 389, 390, 391, 392, 393, 403, 406, 409, 410, 411, 412, 413, 414, 415, 416, 419, 420, 421, 422, 423, 430, 433, 437, 487, 488, 489, 490, 491, 495, 496, 630, 631, 632, 633]}, {"test_lines": [492, 499], "covered_lines": [82, 84, 88, 89, 90, 91, 92, 97, 101, 105, 109, 113, 119, 123, 127, 132, 139, 143, 147, 153, 157, 161, 171, 172, 173, 174, 238, 241, 242, 243, 244, 245, 246, 247, 250, 255, 256, 257, 258, 261, 262, 345, 346, 347, 348, 351, 352, 364, 365, 366, 367, 368, 369, 370, 373, 376, 382, 383, 384, 389, 390, 391, 392, 393, 403, 406, 433, 437, 630, 631, 632, 633]}, {"test_lines": [501, 512], "covered_lines": [82, 84, 88, 89, 90, 91, 92, 97, 101, 105, 109, 113, 119, 123, 127, 132, 139, 143, 147, 153, 157, 161, 171, 172, 173, 174, 238, 241, 242, 243, 244, 245, 246, 247, 250, 255, 256, 257, 258, 261, 264, 265, 328, 329, 330, 332, 364, 365, 366, 367, 368, 369, 370, 373, 376, 382, 383, 384, 389, 390, 391, 406, 409, 410, 411, 412, 413, 414, 415, 416, 419, 420, 421, 422, 423, 430, 433, 437, 487, 488, 489, 490, 491, 495, 496, 630, 631, 632, 633]}, {"test_lines": [514, 525], "covered_lines": [82, 84, 88, 89, 90, 91, 92, 97, 101, 105, 109, 113, 119, 123, 127, 132, 139, 143, 147, 153, 157, 161, 171, 172, 173, 174, 238, 241, 242, 243, 244, 245, 246, 247, 250, 255, 261, 264, 265, 328, 329, 330, 332, 345, 346, 347, 348, 351, 352, 364, 365, 366, 367, 368, 369, 370, 373, 376, 382, 383, 384, 389, 390, 391, 392, 393, 403, 406, 409, 410, 411, 412, 413, 414, 415, 416, 419, 420, 421, 422, 423, 430, 433, 437, 487, 488, 489, 490, 491, 495, 496, 630, 631, 632, 633]}, {"test_lines": [527, 538], "covered_lines": [82, 84, 88, 89, 90, 91, 92, 97, 101, 105, 109, 113, 119, 123, 127, 132, 139, 143, 147, 153, 157, 161, 171, 172, 173, 174, 238, 241, 242, 243, 244, 245, 246, 247, 250, 255, 261, 264, 265, 328, 329, 330, 332, 345, 346, 347, 348, 351, 352, 364, 365, 366, 367, 368, 369, 370, 373, 376, 382, 383, 384, 389, 390, 391, 392, 393, 403, 406, 409, 410, 411, 412, 413, 414, 415, 416, 419, 420, 421, 422, 423, 430, 433, 437, 487, 488, 489, 490, 491, 495, 496, 630, 631, 632, 633]}, {"test_lines": [540, 547], "covered_lines": [82, 84, 88, 89, 90, 91, 92, 97, 101, 105, 109, 113, 119, 123, 127, 132, 139, 143, 147, 153, 157, 161, 171, 172, 173, 174, 238, 241, 242, 243, 244, 245, 246, 247, 250, 255, 261, 262, 345, 346, 347, 348, 351, 352, 364, 365, 366, 367, 368, 369, 370, 373, 376, 382, 383, 384, 389, 390, 391, 392, 393, 403, 406, 433, 437, 630, 631, 632, 633]}, {"test_lines": [549, 560], "covered_lines": [82, 84, 88, 89, 90, 91, 92, 97, 101, 105, 109, 113, 119, 123, 127, 132, 139, 143, 147, 153, 157, 161, 171, 172, 173, 174, 238, 241, 242, 243, 244, 245, 246, 247, 250, 255, 261, 264, 265, 328, 329, 330, 332, 364, 365, 366, 367, 368, 369, 370, 373, 376, 382, 383, 384, 389, 390, 391, 406, 409, 410, 411, 412, 413, 414, 415, 416, 419, 420, 421, 422, 423, 430, 433, 437, 487, 488, 489, 490, 491, 495, 496, 630, 631, 632, 633]}, {"test_lines": [562, 568], "covered_lines": [82, 84, 88, 89, 90, 91, 92, 153, 157, 161, 171, 172, 173, 174, 345, 357]}]}, "/bernard/dataset_construction/prep/repos/itext-java/sign/src/main/java/com/itextpdf/signatures/SignaturePermissions.java": {"class_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.signatures;\n", "\n", "import com.itextpdf.kernel.pdf.PdfArray;\n", "import com.itextpdf.kernel.pdf.PdfDictionary;\n", "import com.itextpdf.kernel.pdf.PdfName;\n", "import com.itextpdf.kernel.pdf.PdfNumber;\n", "\n", "import java.util.ArrayList;\n", "import java.util.List;\n", "\n", "/**\n", " * A helper class that tells you more about the type of signature\n", " * (certification or approval) and the signature's DMP settings.\n", " */\n", "public class SignaturePermissions {\n", "\n", "    /**\n", "     * Class that contains a field lock action and\n", "     * an array of the fields that are involved.\n", "     */\n", "    public class FieldLock {\n", "        /** Can be /All, /Exclude or /Include */\n", "        PdfName action;\n", "        /** An array of PdfString values with fieldnames */\n", "        PdfArray fields;\n", "\n", "        /**\n", "         * Creates a FieldLock instance.\n", "         *\n", "         * @param action indicates the set of fields that should be locked\n", "         * @param fields an array of text strings containing field names\n", "         */\n", "        public FieldLock(PdfName action, PdfArray fields) {\n", "            this.action = action;\n", "            this.fields = fields;\n", "        }\n", "\n", "        /**\n", "         * Getter for the field lock action.\n", "         *\n", "         * @return the action of field lock dictionary\n", "         */\n", "        public PdfName getAction() { return action; }\n", "\n", "        /**\n", "         * Getter for the fields involved in the lock action.\n", "         *\n", "         * @return the fields of field lock dictionary\n", "         */\n", "        public PdfArray getFields() { return fields; }\n", "        /** toString method */\n", "        public String toString() {\n", "            return action.toString() + (fields == null ? \"\" : fields.toString());\n", "        }\n", "    }\n", "\n", "    /** Is the signature a cerification signature (true) or an approval signature (false)? */\n", "    boolean certification = false;\n", "    /** Is form filling allowed by this signature? */\n", "    boolean fillInAllowed = true;\n", "    /** Is adding annotations allowed by this signature? */\n", "    boolean annotationsAllowed = true;\n", "    /** Does this signature lock specific fields? */\n", "    List<FieldLock> fieldLocks = new ArrayList<>();\n", "\n", "    /**\n", "     * Creates an object that can inform you about the type of signature\n", "     * in a signature dictionary as well as some of the permissions\n", "     * defined by the signature.\n", "     *\n", "     * @param sigDict the signature dictionary\n", "     * @param previous the signature permissions\n", "     */\n", "    public SignaturePermissions(PdfDictionary sigDict, SignaturePermissions previous) {\n", "        if (previous != null) {\n", "            annotationsAllowed &= previous.isAnnotationsAllowed();\n", "            fillInAllowed &= previous.isFillInAllowed();\n", "            fieldLocks.addAll(previous.getFieldLocks());\n", "        }\n", "        PdfArray ref = sigDict.getAsArray(PdfName.Reference);\n", "        if (ref != null) {\n", "            for (int i = 0; i < ref.size(); i++) {\n", "                PdfDictionary dict = ref.getAsDictionary(i);\n", "                PdfDictionary params = dict.getAsDictionary(PdfName.TransformParams);\n", "                if (PdfName.DocMDP.equals(dict.getAsName(PdfName.TransformMethod))) {\n", "                    certification = true;\n", "                }\n", "                PdfName action = params.getAsName(PdfName.Action);\n", "                if (action != null) {\n", "                    fieldLocks.add(new FieldLock(action, params.getAsArray(PdfName.Fields)));\n", "                }\n", "                PdfNumber p = params.getAsNumber(PdfName.P);\n", "                if (p == null) {\n", "                    continue;\n", "                }\n", "                switch (p.intValue()) {\n", "                    default:\n", "                        break;\n", "                    case 1:\n", "                        fillInAllowed &= false;\n", "                    case 2:\n", "                        annotationsAllowed &= false;\n", "                }\n", "            }\n", "        }\n", "    }\n", "\n", "    /**\n", "     * Getter to find out if the signature is a certification signature.\n", "     * @return true if the signature is a certification signature, false for an approval signature.\n", "     */\n", "    public boolean isCertification() {\n", "        return certification;\n", "    }\n", "    /**\n", "     * Getter to find out if filling out fields is allowed after signing.\n", "     * @return true if filling out fields is allowed\n", "     */\n", "    public boolean isFillInAllowed() {\n", "        return fillInAllowed;\n", "    }\n", "    /**\n", "     * Getter to find out if adding annotations is allowed after signing.\n", "     * @return true if adding annotations is allowed\n", "     */\n", "    public boolean isAnnotationsAllowed() {\n", "        return annotationsAllowed;\n", "    }\n", "    /**\n", "     * Getter for the field lock actions, and fields that are impacted by the action\n", "     * @return an Array with field names\n", "     */\n", "    public List<FieldLock> getFieldLocks() {\n", "        return fieldLocks;\n", "    }\n", "}\n"], "test_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.signatures;\n", "\n", "import com.itextpdf.kernel.pdf.PdfArray;\n", "import com.itextpdf.kernel.pdf.PdfDictionary;\n", "import com.itextpdf.kernel.pdf.PdfName;\n", "import com.itextpdf.kernel.pdf.PdfNumber;\n", "import com.itextpdf.kernel.pdf.PdfString;\n", "import com.itextpdf.signatures.SignaturePermissions.FieldLock;\n", "import com.itextpdf.test.ExtendedITextTest;\n", "import com.itextpdf.test.annotations.type.UnitTest;\n", "\n", "import java.util.ArrayList;\n", "import org.junit.Assert;\n", "import org.junit.Test;\n", "import org.junit.experimental.categories.Category;\n", "\n", "@Category(UnitTest.class)\n", "public class SignaturePermissionsTest extends ExtendedITextTest {\n", "\n", "    @Test\n", "    public void defaultValuesTest() {\n", "        SignaturePermissions permissions = new SignaturePermissions(new PdfDictionary(), null);\n", "        Assert.assertEquals(new ArrayList<>(), permissions.getFieldLocks());\n", "        Assert.assertTrue(permissions.isAnnotationsAllowed());\n", "        Assert.assertFalse(permissions.isCertification());\n", "        Assert.assertTrue(permissions.isFillInAllowed());\n", "    }\n", "\n", "    @Test\n", "    public void transformedMethodDocMDPIsPresentedTest() {\n", "        PdfDictionary dict = new PdfDictionary();\n", "        PdfArray references = new PdfArray();\n", "\n", "        PdfDictionary dictWithDocMDP = new PdfDictionary();\n", "        dictWithDocMDP.put(PdfName.TransformMethod, PdfName.DocMDP);\n", "        dictWithDocMDP.put(PdfName.TransformParams, new PdfDictionary());\n", "\n", "        references.add(dictWithDocMDP);\n", "        dict.put(PdfName.Reference, references);\n", "\n", "        SignaturePermissions permissions = new SignaturePermissions(dict, null);\n", "\n", "        Assert.assertTrue(permissions.isCertification());\n", "\n", "        Assert.assertEquals(new ArrayList<>(), permissions.getFieldLocks());\n", "        Assert.assertTrue(permissions.isAnnotationsAllowed());\n", "        Assert.assertTrue(permissions.isFillInAllowed());\n", "    }\n", "\n", "    @Test\n", "    public void actionIsPresentedTest() {\n", "        PdfDictionary dict = new PdfDictionary();\n", "        PdfArray references = new PdfArray();\n", "\n", "        PdfDictionary dictWithAction = new PdfDictionary();\n", "        PdfDictionary params = new PdfDictionary();\n", "\n", "        PdfName action = new PdfName(\"Name\");\n", "        PdfArray fields = new PdfArray();\n", "        fields.add(new PdfString(\"Value1\"));\n", "        fields.add(new PdfString(\"Value2\"));\n", "\n", "        params.put(PdfName.Action, action);\n", "        params.put(PdfName.Fields, fields);\n", "\n", "        dictWithAction.put(PdfName.TransformParams, params);\n", "\n", "        references.add(dictWithAction);\n", "        dict.put(PdfName.Reference, references);\n", "\n", "        SignaturePermissions permissions = new SignaturePermissions(dict, null);\n", "\n", "        Assert.assertEquals(1, permissions.getFieldLocks().size());\n", "        FieldLock fieldLock = permissions.getFieldLocks().get(0);\n", "        Assert.assertEquals(action, fieldLock.getAction());\n", "        Assert.assertEquals(fields, fieldLock.getFields());\n", "\n", "        Assert.assertTrue(permissions.isAnnotationsAllowed());\n", "        Assert.assertFalse(permissions.isCertification());\n", "        Assert.assertTrue(permissions.isFillInAllowed());\n", "    }\n", "\n", "    @Test\n", "    public void multipleActionsArePresentedTest() {\n", "        PdfDictionary dict = new PdfDictionary();\n", "        PdfArray references = new PdfArray();\n", "\n", "        PdfDictionary dictWithAction = new PdfDictionary();\n", "        PdfDictionary params = new PdfDictionary();\n", "\n", "        PdfName action = new PdfName(\"Name\");\n", "        PdfArray fields = new PdfArray();\n", "        fields.add(new PdfString(\"Value1\"));\n", "        fields.add(new PdfString(\"Value2\"));\n", "\n", "        params.put(PdfName.Action, action);\n", "        params.put(PdfName.Fields, fields);\n", "\n", "        dictWithAction.put(PdfName.TransformParams, params);\n", "\n", "        references.add(dictWithAction);\n", "        references.add(dictWithAction);\n", "        references.add(dictWithAction);\n", "\n", "        dict.put(PdfName.Reference, references);\n", "\n", "        SignaturePermissions permissions = new SignaturePermissions(dict, null);\n", "\n", "        Assert.assertEquals(3, permissions.getFieldLocks().size());\n", "        for(FieldLock fieldLock: permissions.getFieldLocks()) {\n", "            Assert.assertEquals(action, fieldLock.getAction());\n", "            Assert.assertEquals(fields, fieldLock.getFields());\n", "        }\n", "\n", "        Assert.assertTrue(permissions.isAnnotationsAllowed());\n", "        Assert.assertFalse(permissions.isCertification());\n", "        Assert.assertTrue(permissions.isFillInAllowed());\n", "    }\n", "\n", "    @Test\n", "    public void pParamEqualsTo1Test() {\n", "        PdfDictionary dict = new PdfDictionary();\n", "        PdfArray references = new PdfArray();\n", "\n", "        PdfDictionary dictWithAction = new PdfDictionary();\n", "        PdfDictionary params = new PdfDictionary();\n", "        params.put(PdfName.P, new PdfNumber(1));\n", "\n", "        dictWithAction.put(PdfName.TransformParams, params);\n", "\n", "        references.add(dictWithAction);\n", "        dict.put(PdfName.Reference, references);\n", "\n", "        SignaturePermissions permissions = new SignaturePermissions(dict, null);\n", "\n", "        Assert.assertFalse(permissions.isFillInAllowed());\n", "        Assert.assertFalse(permissions.isAnnotationsAllowed());\n", "\n", "        Assert.assertEquals(new ArrayList<>(), permissions.getFieldLocks());\n", "        Assert.assertFalse(permissions.isCertification());\n", "    }\n", "\n", "    @Test\n", "    public void pParamEqualsTo2Test() {\n", "        PdfDictionary dict = new PdfDictionary();\n", "        PdfArray references = new PdfArray();\n", "\n", "        PdfDictionary dictWithAction = new PdfDictionary();\n", "        PdfDictionary params = new PdfDictionary();\n", "        params.put(PdfName.P, new PdfNumber(2));\n", "\n", "        dictWithAction.put(PdfName.TransformParams, params);\n", "\n", "        references.add(dictWithAction);\n", "        dict.put(PdfName.Reference, references);\n", "\n", "        SignaturePermissions permissions = new SignaturePermissions(dict, null);\n", "\n", "        Assert.assertFalse(permissions.isAnnotationsAllowed());\n", "\n", "        Assert.assertEquals(new ArrayList<>(), permissions.getFieldLocks());\n", "        Assert.assertTrue(permissions.isFillInAllowed());\n", "        Assert.assertFalse(permissions.isCertification());\n", "    }\n", "\n", "    @Test\n", "    public void previousIsSetTest() {\n", "        PdfDictionary previousDict = new PdfDictionary();\n", "        PdfArray references = new PdfArray();\n", "\n", "        PdfDictionary dictWithAction = new PdfDictionary();\n", "        PdfDictionary params = new PdfDictionary();\n", "        params.put(PdfName.P, new PdfNumber(1));\n", "\n", "        PdfName action = new PdfName(\"Name\");\n", "        PdfArray fields = new PdfArray();\n", "        fields.add(new PdfString(\"Value1\"));\n", "        fields.add(new PdfString(\"Value2\"));\n", "\n", "        params.put(PdfName.Action, action);\n", "        params.put(PdfName.Fields, fields);\n", "\n", "        dictWithAction.put(PdfName.TransformParams, params);\n", "\n", "        references.add(dictWithAction);\n", "        previousDict.put(PdfName.Reference, references);\n", "\n", "        SignaturePermissions previousPermissions = new SignaturePermissions(previousDict, null);\n", "        SignaturePermissions permissions = new SignaturePermissions(new PdfDictionary(), previousPermissions);\n", "\n", "        Assert.assertEquals(1, permissions.getFieldLocks().size());\n", "        FieldLock fieldLock = permissions.getFieldLocks().get(0);\n", "        Assert.assertEquals(action, fieldLock.getAction());\n", "        Assert.assertEquals(fields, fieldLock.getFields());\n", "\n", "        Assert.assertFalse(permissions.isAnnotationsAllowed());\n", "        Assert.assertFalse(permissions.isCertification());\n", "        Assert.assertFalse(permissions.isFillInAllowed());\n", "    }\n", "}\n"], "method_lines_dic": {"SignaturePermissions.FieldLock::::getAction()": [65, 65], "SignaturePermissions.FieldLock::::getFields()": [72, 72], "SignaturePermissions.FieldLock::::toString()": [74, 76], "SignaturePermissions::::isCertification()": [134, 136], "SignaturePermissions::::isFillInAllowed()": [141, 143], "SignaturePermissions::::isAnnotationsAllowed()": [148, 150], "SignaturePermissions::::getFieldLocks()": [155, 157]}, "test_method_lines_dic": {"SignaturePermissionsTest::::defaultValuesTest()": [42, 49], "SignaturePermissionsTest::::transformedMethodDocMDPIsPresentedTest()": [51, 70], "SignaturePermissionsTest::::actionIsPresentedTest()": [72, 103], "SignaturePermissionsTest::::multipleActionsArePresentedTest()": [105, 140], "SignaturePermissionsTest::::pParamEqualsTo1Test()": [142, 163], "SignaturePermissionsTest::::pParamEqualsTo2Test()": [165, 186], "SignaturePermissionsTest::::previousIsSetTest()": [188, 221]}, "reverse_method_lines_dic": {"65": "SignaturePermissions.FieldLock::::getAction()", "72": "SignaturePermissions.FieldLock::::getFields()", "74": "SignaturePermissions.FieldLock::::toString()", "75": "SignaturePermissions.FieldLock::::toString()", "76": "SignaturePermissions.FieldLock::::toString()", "134": "SignaturePermissions::::isCertification()", "135": "SignaturePermissions::::isCertification()", "136": "SignaturePermissions::::isCertification()", "141": "SignaturePermissions::::isFillInAllowed()", "142": "SignaturePermissions::::isFillInAllowed()", "143": "SignaturePermissions::::isFillInAllowed()", "148": "SignaturePermissions::::isAnnotationsAllowed()", "149": "SignaturePermissions::::isAnnotationsAllowed()", "150": "SignaturePermissions::::isAnnotationsAllowed()", "155": "SignaturePermissions::::getFieldLocks()", "156": "SignaturePermissions::::getFieldLocks()", "157": "SignaturePermissions::::getFieldLocks()"}, "test_reverse_method_lines_dic": {"42": "SignaturePermissionsTest::::defaultValuesTest()", "43": "SignaturePermissionsTest::::defaultValuesTest()", "44": "SignaturePermissionsTest::::defaultValuesTest()", "45": "SignaturePermissionsTest::::defaultValuesTest()", "46": "SignaturePermissionsTest::::defaultValuesTest()", "47": "SignaturePermissionsTest::::defaultValuesTest()", "48": "SignaturePermissionsTest::::defaultValuesTest()", "49": "SignaturePermissionsTest::::defaultValuesTest()", "51": "SignaturePermissionsTest::::transformedMethodDocMDPIsPresentedTest()", "52": "SignaturePermissionsTest::::transformedMethodDocMDPIsPresentedTest()", "53": "SignaturePermissionsTest::::transformedMethodDocMDPIsPresentedTest()", "54": "SignaturePermissionsTest::::transformedMethodDocMDPIsPresentedTest()", "55": "SignaturePermissionsTest::::transformedMethodDocMDPIsPresentedTest()", "56": "SignaturePermissionsTest::::transformedMethodDocMDPIsPresentedTest()", "57": "SignaturePermissionsTest::::transformedMethodDocMDPIsPresentedTest()", "58": "SignaturePermissionsTest::::transformedMethodDocMDPIsPresentedTest()", "59": "SignaturePermissionsTest::::transformedMethodDocMDPIsPresentedTest()", "60": "SignaturePermissionsTest::::transformedMethodDocMDPIsPresentedTest()", "61": "SignaturePermissionsTest::::transformedMethodDocMDPIsPresentedTest()", "62": "SignaturePermissionsTest::::transformedMethodDocMDPIsPresentedTest()", "63": "SignaturePermissionsTest::::transformedMethodDocMDPIsPresentedTest()", "64": "SignaturePermissionsTest::::transformedMethodDocMDPIsPresentedTest()", "65": "SignaturePermissionsTest::::transformedMethodDocMDPIsPresentedTest()", "66": "SignaturePermissionsTest::::transformedMethodDocMDPIsPresentedTest()", "67": "SignaturePermissionsTest::::transformedMethodDocMDPIsPresentedTest()", "68": "SignaturePermissionsTest::::transformedMethodDocMDPIsPresentedTest()", "69": "SignaturePermissionsTest::::transformedMethodDocMDPIsPresentedTest()", "70": "SignaturePermissionsTest::::transformedMethodDocMDPIsPresentedTest()", "72": "SignaturePermissionsTest::::actionIsPresentedTest()", "73": "SignaturePermissionsTest::::actionIsPresentedTest()", "74": "SignaturePermissionsTest::::actionIsPresentedTest()", "75": "SignaturePermissionsTest::::actionIsPresentedTest()", "76": "SignaturePermissionsTest::::actionIsPresentedTest()", "77": "SignaturePermissionsTest::::actionIsPresentedTest()", "78": "SignaturePermissionsTest::::actionIsPresentedTest()", "79": "SignaturePermissionsTest::::actionIsPresentedTest()", "80": "SignaturePermissionsTest::::actionIsPresentedTest()", "81": "SignaturePermissionsTest::::actionIsPresentedTest()", "82": "SignaturePermissionsTest::::actionIsPresentedTest()", "83": "SignaturePermissionsTest::::actionIsPresentedTest()", "84": "SignaturePermissionsTest::::actionIsPresentedTest()", "85": "SignaturePermissionsTest::::actionIsPresentedTest()", "86": "SignaturePermissionsTest::::actionIsPresentedTest()", "87": "SignaturePermissionsTest::::actionIsPresentedTest()", "88": "SignaturePermissionsTest::::actionIsPresentedTest()", "89": "SignaturePermissionsTest::::actionIsPresentedTest()", "90": "SignaturePermissionsTest::::actionIsPresentedTest()", "91": "SignaturePermissionsTest::::actionIsPresentedTest()", "92": "SignaturePermissionsTest::::actionIsPresentedTest()", "93": "SignaturePermissionsTest::::actionIsPresentedTest()", "94": "SignaturePermissionsTest::::actionIsPresentedTest()", "95": "SignaturePermissionsTest::::actionIsPresentedTest()", "96": "SignaturePermissionsTest::::actionIsPresentedTest()", "97": "SignaturePermissionsTest::::actionIsPresentedTest()", "98": "SignaturePermissionsTest::::actionIsPresentedTest()", "99": "SignaturePermissionsTest::::actionIsPresentedTest()", "100": "SignaturePermissionsTest::::actionIsPresentedTest()", "101": "SignaturePermissionsTest::::actionIsPresentedTest()", "102": "SignaturePermissionsTest::::actionIsPresentedTest()", "103": "SignaturePermissionsTest::::actionIsPresentedTest()", "105": "SignaturePermissionsTest::::multipleActionsArePresentedTest()", "106": "SignaturePermissionsTest::::multipleActionsArePresentedTest()", "107": "SignaturePermissionsTest::::multipleActionsArePresentedTest()", "108": "SignaturePermissionsTest::::multipleActionsArePresentedTest()", "109": "SignaturePermissionsTest::::multipleActionsArePresentedTest()", "110": "SignaturePermissionsTest::::multipleActionsArePresentedTest()", "111": "SignaturePermissionsTest::::multipleActionsArePresentedTest()", "112": "SignaturePermissionsTest::::multipleActionsArePresentedTest()", "113": "SignaturePermissionsTest::::multipleActionsArePresentedTest()", "114": "SignaturePermissionsTest::::multipleActionsArePresentedTest()", "115": "SignaturePermissionsTest::::multipleActionsArePresentedTest()", "116": "SignaturePermissionsTest::::multipleActionsArePresentedTest()", "117": "SignaturePermissionsTest::::multipleActionsArePresentedTest()", "118": "SignaturePermissionsTest::::multipleActionsArePresentedTest()", "119": "SignaturePermissionsTest::::multipleActionsArePresentedTest()", "120": "SignaturePermissionsTest::::multipleActionsArePresentedTest()", "121": "SignaturePermissionsTest::::multipleActionsArePresentedTest()", "122": "SignaturePermissionsTest::::multipleActionsArePresentedTest()", "123": "SignaturePermissionsTest::::multipleActionsArePresentedTest()", "124": "SignaturePermissionsTest::::multipleActionsArePresentedTest()", "125": "SignaturePermissionsTest::::multipleActionsArePresentedTest()", "126": "SignaturePermissionsTest::::multipleActionsArePresentedTest()", "127": "SignaturePermissionsTest::::multipleActionsArePresentedTest()", "128": "SignaturePermissionsTest::::multipleActionsArePresentedTest()", "129": "SignaturePermissionsTest::::multipleActionsArePresentedTest()", "130": "SignaturePermissionsTest::::multipleActionsArePresentedTest()", "131": "SignaturePermissionsTest::::multipleActionsArePresentedTest()", "132": "SignaturePermissionsTest::::multipleActionsArePresentedTest()", "133": "SignaturePermissionsTest::::multipleActionsArePresentedTest()", "134": "SignaturePermissionsTest::::multipleActionsArePresentedTest()", "135": "SignaturePermissionsTest::::multipleActionsArePresentedTest()", "136": "SignaturePermissionsTest::::multipleActionsArePresentedTest()", "137": "SignaturePermissionsTest::::multipleActionsArePresentedTest()", "138": "SignaturePermissionsTest::::multipleActionsArePresentedTest()", "139": "SignaturePermissionsTest::::multipleActionsArePresentedTest()", "140": "SignaturePermissionsTest::::multipleActionsArePresentedTest()", "142": "SignaturePermissionsTest::::pParamEqualsTo1Test()", "143": "SignaturePermissionsTest::::pParamEqualsTo1Test()", "144": "SignaturePermissionsTest::::pParamEqualsTo1Test()", "145": "SignaturePermissionsTest::::pParamEqualsTo1Test()", "146": "SignaturePermissionsTest::::pParamEqualsTo1Test()", "147": "SignaturePermissionsTest::::pParamEqualsTo1Test()", "148": "SignaturePermissionsTest::::pParamEqualsTo1Test()", "149": "SignaturePermissionsTest::::pParamEqualsTo1Test()", "150": "SignaturePermissionsTest::::pParamEqualsTo1Test()", "151": "SignaturePermissionsTest::::pParamEqualsTo1Test()", "152": "SignaturePermissionsTest::::pParamEqualsTo1Test()", "153": "SignaturePermissionsTest::::pParamEqualsTo1Test()", "154": "SignaturePermissionsTest::::pParamEqualsTo1Test()", "155": "SignaturePermissionsTest::::pParamEqualsTo1Test()", "156": "SignaturePermissionsTest::::pParamEqualsTo1Test()", "157": "SignaturePermissionsTest::::pParamEqualsTo1Test()", "158": "SignaturePermissionsTest::::pParamEqualsTo1Test()", "159": "SignaturePermissionsTest::::pParamEqualsTo1Test()", "160": "SignaturePermissionsTest::::pParamEqualsTo1Test()", "161": "SignaturePermissionsTest::::pParamEqualsTo1Test()", "162": "SignaturePermissionsTest::::pParamEqualsTo1Test()", "163": "SignaturePermissionsTest::::pParamEqualsTo1Test()", "165": "SignaturePermissionsTest::::pParamEqualsTo2Test()", "166": "SignaturePermissionsTest::::pParamEqualsTo2Test()", "167": "SignaturePermissionsTest::::pParamEqualsTo2Test()", "168": "SignaturePermissionsTest::::pParamEqualsTo2Test()", "169": "SignaturePermissionsTest::::pParamEqualsTo2Test()", "170": "SignaturePermissionsTest::::pParamEqualsTo2Test()", "171": "SignaturePermissionsTest::::pParamEqualsTo2Test()", "172": "SignaturePermissionsTest::::pParamEqualsTo2Test()", "173": "SignaturePermissionsTest::::pParamEqualsTo2Test()", "174": "SignaturePermissionsTest::::pParamEqualsTo2Test()", "175": "SignaturePermissionsTest::::pParamEqualsTo2Test()", "176": "SignaturePermissionsTest::::pParamEqualsTo2Test()", "177": "SignaturePermissionsTest::::pParamEqualsTo2Test()", "178": "SignaturePermissionsTest::::pParamEqualsTo2Test()", "179": "SignaturePermissionsTest::::pParamEqualsTo2Test()", "180": "SignaturePermissionsTest::::pParamEqualsTo2Test()", "181": "SignaturePermissionsTest::::pParamEqualsTo2Test()", "182": "SignaturePermissionsTest::::pParamEqualsTo2Test()", "183": "SignaturePermissionsTest::::pParamEqualsTo2Test()", "184": "SignaturePermissionsTest::::pParamEqualsTo2Test()", "185": "SignaturePermissionsTest::::pParamEqualsTo2Test()", "186": "SignaturePermissionsTest::::pParamEqualsTo2Test()", "188": "SignaturePermissionsTest::::previousIsSetTest()", "189": "SignaturePermissionsTest::::previousIsSetTest()", "190": "SignaturePermissionsTest::::previousIsSetTest()", "191": "SignaturePermissionsTest::::previousIsSetTest()", "192": "SignaturePermissionsTest::::previousIsSetTest()", "193": "SignaturePermissionsTest::::previousIsSetTest()", "194": "SignaturePermissionsTest::::previousIsSetTest()", "195": "SignaturePermissionsTest::::previousIsSetTest()", "196": "SignaturePermissionsTest::::previousIsSetTest()", "197": "SignaturePermissionsTest::::previousIsSetTest()", "198": "SignaturePermissionsTest::::previousIsSetTest()", "199": "SignaturePermissionsTest::::previousIsSetTest()", "200": "SignaturePermissionsTest::::previousIsSetTest()", "201": "SignaturePermissionsTest::::previousIsSetTest()", "202": "SignaturePermissionsTest::::previousIsSetTest()", "203": "SignaturePermissionsTest::::previousIsSetTest()", "204": "SignaturePermissionsTest::::previousIsSetTest()", "205": "SignaturePermissionsTest::::previousIsSetTest()", "206": "SignaturePermissionsTest::::previousIsSetTest()", "207": "SignaturePermissionsTest::::previousIsSetTest()", "208": "SignaturePermissionsTest::::previousIsSetTest()", "209": "SignaturePermissionsTest::::previousIsSetTest()", "210": "SignaturePermissionsTest::::previousIsSetTest()", "211": "SignaturePermissionsTest::::previousIsSetTest()", "212": "SignaturePermissionsTest::::previousIsSetTest()", "213": "SignaturePermissionsTest::::previousIsSetTest()", "214": "SignaturePermissionsTest::::previousIsSetTest()", "215": "SignaturePermissionsTest::::previousIsSetTest()", "216": "SignaturePermissionsTest::::previousIsSetTest()", "217": "SignaturePermissionsTest::::previousIsSetTest()", "218": "SignaturePermissionsTest::::previousIsSetTest()", "219": "SignaturePermissionsTest::::previousIsSetTest()", "220": "SignaturePermissionsTest::::previousIsSetTest()", "221": "SignaturePermissionsTest::::previousIsSetTest()"}, "tests": [{"test_lines": [42, 49], "covered_lines": [80, 82, 84, 86, 96, 97, 102, 103, 128, 135, 142, 149, 156]}, {"test_lines": [51, 70], "covered_lines": [80, 82, 84, 86, 96, 97, 102, 103, 104, 105, 106, 107, 108, 110, 111, 114, 115, 116, 128, 135, 142, 149, 156]}, {"test_lines": [72, 103], "covered_lines": [55, 56, 57, 58, 65, 72, 80, 82, 84, 86, 96, 97, 102, 103, 104, 105, 106, 107, 110, 111, 112, 114, 115, 116, 128, 135, 142, 149, 156]}, {"test_lines": [105, 140], "covered_lines": [55, 56, 57, 58, 65, 72, 80, 82, 84, 86, 96, 97, 102, 103, 104, 105, 106, 107, 110, 111, 112, 114, 115, 116, 128, 135, 142, 149, 156]}, {"test_lines": [142, 163], "covered_lines": [80, 82, 84, 86, 96, 97, 102, 103, 104, 105, 106, 107, 110, 111, 114, 115, 118, 122, 124, 128, 135, 142, 149, 156]}, {"test_lines": [165, 186], "covered_lines": [80, 82, 84, 86, 96, 97, 102, 103, 104, 105, 106, 107, 110, 111, 114, 115, 118, 124, 128, 135, 142, 149, 156]}, {"test_lines": [188, 221], "covered_lines": [55, 56, 57, 58, 65, 72, 80, 82, 84, 86, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 110, 111, 112, 114, 115, 118, 122, 124, 128, 135, 142, 149, 156]}]}, "/bernard/dataset_construction/prep/repos/itext-java/sign/src/main/java/com/itextpdf/signatures/SignatureMechanisms.java": {"class_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.signatures;\n", "\n", "import com.itextpdf.bouncycastleconnector.BouncyCastleFactoryCreator;\n", "import com.itextpdf.commons.bouncycastle.IBouncyCastleFactory;\n", "import com.itextpdf.signatures.logs.SignLogMessageConstant;\n", "\n", "import java.util.HashMap;\n", "import java.util.Map;\n", "import org.slf4j.Logger;\n", "import org.slf4j.LoggerFactory;\n", "\n", "/**\n", " * Class that contains OID mappings to extract a signature algorithm name\n", " * from a signature mechanism OID, and conversely, to retrieve the appropriate\n", " * signature mechanism OID given a signature algorithm and a digest function.\n", " */\n", "public class SignatureMechanisms {\n", "\n", "    private static final Logger LOGGER = LoggerFactory.getLogger(SignatureMechanisms.class);\n", "    \n", "    private static final IBouncyCastleFactory BOUNCY_CASTLE_FACTORY = BouncyCastleFactoryCreator.getFactory();\n", "\n", "    /** Maps IDs of signature algorithms with its human-readable name. */\n", "    static final Map<String, String> algorithmNames = new HashMap<>();\n", "    static final Map<String, String> rsaOidsByDigest = new HashMap<>();\n", "    static final Map<String, String> dsaOidsByDigest = new HashMap<>();\n", "    static final Map<String, String> ecdsaOidsByDigest = new HashMap<>();\n", "\n", "    static {\n", "        algorithmNames.put(\"1.2.840.113549.1.1.1\", \"RSA\");\n", "        algorithmNames.put(\"1.2.840.10040.4.1\", \"DSA\");\n", "        algorithmNames.put(\"1.2.840.113549.1.1.2\", \"RSA\");\n", "        algorithmNames.put(\"1.2.840.113549.1.1.4\", \"RSA\");\n", "        algorithmNames.put(\"1.2.840.113549.1.1.5\", \"RSA\");\n", "        algorithmNames.put(\"1.2.840.113549.1.1.11\", \"RSA\");\n", "        algorithmNames.put(\"1.2.840.113549.1.1.12\", \"RSA\");\n", "        algorithmNames.put(\"1.2.840.113549.1.1.13\", \"RSA\");\n", "        algorithmNames.put(\"1.2.840.113549.1.1.14\", \"RSA\");\n", "        algorithmNames.put(\"1.2.840.10040.4.3\", \"DSA\");\n", "        algorithmNames.put(\"2.16.840.1.101.3.4.3.1\", \"DSA\");\n", "        algorithmNames.put(\"2.16.840.1.101.3.4.3.2\", \"DSA\");\n", "        algorithmNames.put(\"1.3.14.3.2.29\", \"RSA\");\n", "        algorithmNames.put(\"1.3.36.3.3.1.2\", \"RSA\");\n", "        algorithmNames.put(\"1.3.36.3.3.1.3\", \"RSA\");\n", "        algorithmNames.put(\"1.3.36.3.3.1.4\", \"RSA\");\n", "        algorithmNames.put(\"1.2.643.2.2.19\", \"ECGOST3410\");\n", "\n", "        // Elliptic curve public key cryptography\n", "        algorithmNames.put(\"1.2.840.10045.2.1\", \"ECDSA\");\n", "        // Elliptic curve Digital Signature Algorithm (DSA) coupled with the Secure Hashing Algorithm (SHA) algorithm\n", "        algorithmNames.put(\"1.2.840.10045.4.1\", \"ECDSA\");\n", "        // Elliptic curve Digital Signature Algorithm (DSA)\n", "        algorithmNames.put(\"1.2.840.10045.4.3\", \"ECDSA\");\n", "        // Elliptic curve Digital Signature Algorithm (DSA) coupled with the Secure Hashing Algorithm (SHA256) algorithm\n", "        algorithmNames.put(\"1.2.840.10045.4.3.2\", \"ECDSA\");\n", "        // Elliptic curve Digital Signature Algorithm (DSA) coupled with the Secure Hashing Algorithm (SHA384) algorithm\n", "        algorithmNames.put(\"1.2.840.10045.4.3.3\", \"ECDSA\");\n", "        // Elliptic curve Digital Signature Algorithm (DSA) coupled with the Secure Hashing Algorithm (SHA512) algorithm\n", "        algorithmNames.put(\"1.2.840.10045.4.3.4\", \"ECDSA\");\n", "\n", "        // Signing algorithms with SHA-3 digest functions (from NIST CSOR)\n", "        algorithmNames.put(\"2.16.840.1.101.3.4.3.5\", \"DSA\");\n", "        algorithmNames.put(\"2.16.840.1.101.3.4.3.6\", \"DSA\");\n", "        algorithmNames.put(\"2.16.840.1.101.3.4.3.7\", \"DSA\");\n", "        algorithmNames.put(\"2.16.840.1.101.3.4.3.8\", \"DSA\");\n", "        algorithmNames.put(\"2.16.840.1.101.3.4.3.9\", \"ECDSA\");\n", "        algorithmNames.put(\"2.16.840.1.101.3.4.3.10\", \"ECDSA\");\n", "        algorithmNames.put(\"2.16.840.1.101.3.4.3.11\", \"ECDSA\");\n", "        algorithmNames.put(\"2.16.840.1.101.3.4.3.12\", \"ECDSA\");\n", "        algorithmNames.put(\"2.16.840.1.101.3.4.3.13\", \"RSA\");\n", "        algorithmNames.put(\"2.16.840.1.101.3.4.3.14\", \"RSA\");\n", "        algorithmNames.put(\"2.16.840.1.101.3.4.3.15\", \"RSA\");\n", "        algorithmNames.put(\"2.16.840.1.101.3.4.3.16\", \"RSA\");\n", "\n", "        /*\n", "         * We tolerate two naming conventions for RSASSA-PSS:\n", "         *\n", "         *  - RSASSA-PSS\n", "         *  - <digest>withRSA/PSS\n", "         *\n", "         * The former is considered the canonical one because it's the standard name in JCA,\n", "         * the digest is required to be specified in the algorithm params anyway,\n", "         * and the OID does not depend on the digest. BouncyCastle accepts both.\n", "         */\n", "        algorithmNames.put(SecurityIDs.ID_RSASSA_PSS, \"RSASSA-PSS\");\n", "\n", "        // EdDSA\n", "        algorithmNames.put(SecurityIDs.ID_ED25519, \"Ed25519\");\n", "        algorithmNames.put(SecurityIDs.ID_ED448, \"Ed448\");\n", "\n", "        rsaOidsByDigest.put(\"SHA224\", \"1.2.840.113549.1.1.14\");\n", "        rsaOidsByDigest.put(\"SHA256\", \"1.2.840.113549.1.1.11\");\n", "        rsaOidsByDigest.put(\"SHA384\", \"1.2.840.113549.1.1.12\");\n", "        rsaOidsByDigest.put(\"SHA512\", \"1.2.840.113549.1.1.13\");\n", "        rsaOidsByDigest.put(\"SHA-224\", \"1.2.840.113549.1.1.14\");\n", "        rsaOidsByDigest.put(\"SHA-256\", \"1.2.840.113549.1.1.11\");\n", "        rsaOidsByDigest.put(\"SHA-384\", \"1.2.840.113549.1.1.12\");\n", "        rsaOidsByDigest.put(\"SHA-512\", \"1.2.840.113549.1.1.13\");\n", "        rsaOidsByDigest.put(\"SHA3-224\", \"2.16.840.1.101.3.4.3.13\");\n", "        rsaOidsByDigest.put(\"SHA3-256\", \"2.16.840.1.101.3.4.3.14\");\n", "        rsaOidsByDigest.put(\"SHA3-384\", \"2.16.840.1.101.3.4.3.15\");\n", "        rsaOidsByDigest.put(\"SHA3-512\", \"2.16.840.1.101.3.4.3.16\");\n", "\n", "        dsaOidsByDigest.put(\"SHA224\", \"2.16.840.1.101.3.4.3.1\");\n", "        dsaOidsByDigest.put(\"SHA256\", \"2.16.840.1.101.3.4.3.2\");\n", "        dsaOidsByDigest.put(\"SHA384\", \"2.16.840.1.101.3.4.3.3\");\n", "        dsaOidsByDigest.put(\"SHA512\", \"2.16.840.1.101.3.4.3.4\");\n", "        dsaOidsByDigest.put(\"SHA3-224\", \"2.16.840.1.101.3.4.3.5\");\n", "        dsaOidsByDigest.put(\"SHA3-256\", \"2.16.840.1.101.3.4.3.6\");\n", "        dsaOidsByDigest.put(\"SHA3-384\", \"2.16.840.1.101.3.4.3.7\");\n", "        dsaOidsByDigest.put(\"SHA3-512\", \"2.16.840.1.101.3.4.3.8\");\n", "\n", "        ecdsaOidsByDigest.put(\"SHA1\", \"1.2.840.10045.4.1\");\n", "        ecdsaOidsByDigest.put(\"SHA224\", \"1.2.840.10045.4.3.1\");\n", "        ecdsaOidsByDigest.put(\"SHA256\", \"1.2.840.10045.4.3.2\");\n", "        ecdsaOidsByDigest.put(\"SHA384\", \"1.2.840.10045.4.3.3\");\n", "        ecdsaOidsByDigest.put(\"SHA512\", \"1.2.840.10045.4.3.4\");\n", "        ecdsaOidsByDigest.put(\"SHA3-224\", \"2.16.840.1.101.3.4.3.9\");\n", "        ecdsaOidsByDigest.put(\"SHA3-256\", \"2.16.840.1.101.3.4.3.10\");\n", "        ecdsaOidsByDigest.put(\"SHA3-384\", \"2.16.840.1.101.3.4.3.11\");\n", "        ecdsaOidsByDigest.put(\"SHA3-512\", \"2.16.840.1.101.3.4.3.12\");\n", "    }\n", "\n", "    /**\n", "     * Attempt to look up the most specific OID for a given signature-digest combination.\n", "     *\n", "     * @param signatureAlgorithmName  the name of the signature algorithm\n", "     * @param digestAlgorithmName     the name of the digest algorithm, if any\n", "     * @return an OID string, or {@code null} if none was found.\n", "     */\n", "    public static String getSignatureMechanismOid(String signatureAlgorithmName, String digestAlgorithmName) {\n", "        String resultingOId;\n", "        switch (signatureAlgorithmName) {\n", "            case \"RSA\":\n", "                final String oId = rsaOidsByDigest.get(digestAlgorithmName);\n", "                resultingOId = oId == null ? SecurityIDs.ID_RSA : oId;\n", "                break;\n", "            case \"DSA\":\n", "                resultingOId = dsaOidsByDigest.get(digestAlgorithmName);\n", "                break;\n", "            case \"ECDSA\":\n", "                resultingOId = ecdsaOidsByDigest.get(digestAlgorithmName);\n", "                break;\n", "            case \"Ed25519\":\n", "                resultingOId = SecurityIDs.ID_ED25519;\n", "                break;\n", "            case \"Ed448\":\n", "                resultingOId = SecurityIDs.ID_ED448;\n", "                break;\n", "            case \"RSASSA-PSS\":\n", "            case \"RSA/PSS\":\n", "                resultingOId = SecurityIDs.ID_RSASSA_PSS;\n", "                break;\n", "            default:\n", "                resultingOId = null;\n", "        }\n", "        if (resultingOId != null) {\n", "            return resultingOId;\n", "        }\n", "        LOGGER.warn(SignLogMessageConstant.ALGORITHM_NOT_FROM_SPEC);\n", "        resultingOId = BOUNCY_CASTLE_FACTORY.getAlgorithmOid(digestAlgorithmName + \"with\" + signatureAlgorithmName);\n", "        if (resultingOId == null) {\n", "            return BOUNCY_CASTLE_FACTORY.getAlgorithmOid(signatureAlgorithmName);\n", "        } else {\n", "            return resultingOId;\n", "        }\n", "    }\n", "\n", "    /**\n", "     * Gets the algorithm name for a certain id.\n", "     * @param oid\tan id (for instance \"1.2.840.113549.1.1.1\")\n", "     * @return\tan algorithm name (for instance \"RSA\")\n", "     */\n", "    public static String getAlgorithm(String oid) {\n", "        String ret = algorithmNames.get(oid);\n", "        if (ret == null) {\n", "            return oid;\n", "        } else {\n", "            return ret;\n", "        }\n", "    }\n", "\n", "    /**\n", "     * Get the signing mechanism name for a certain id and digest.\n", "     * \n", "     * @param oid an id of an algorithm\n", "     * @param digest digest of an algorithm\n", "     * \n", "     * @return name of the mechanism\n", "     */\n", "    public static String getMechanism(String oid, String digest) {\n", "        String algorithm = getAlgorithm(oid);\n", "        if (!algorithm.equals(oid)) {\n", "            return digest + \"with\" + algorithm;\n", "        }\n", "        LOGGER.warn(SignLogMessageConstant.ALGORITHM_NOT_FROM_SPEC);\n", "        return BOUNCY_CASTLE_FACTORY.getAlgorithmName(oid);\n", "    }\n", "}\n"], "test_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.signatures;\n", "\n", "import com.itextpdf.test.ExtendedITextTest;\n", "import com.itextpdf.test.annotations.type.UnitTest;\n", "\n", "import org.junit.Assert;\n", "import org.junit.Test;\n", "import org.junit.experimental.categories.Category;\n", "\n", "@Category(UnitTest.class)\n", "public class SignatureMechanismsTest extends ExtendedITextTest {\n", "\n", "    @Test\n", "    public void getAlgorithmRSATest() {\n", "        Assert.assertEquals(\"RSA\", SignatureMechanisms.getAlgorithm(\"1.2.840.113549.1.1.1\"));\n", "    }\n", "\n", "    @Test\n", "    public void getAlgorithmECDSATest() {\n", "        Assert.assertEquals(\"ECDSA\", SignatureMechanisms.getAlgorithm(\"1.2.840.10045.2.1\"));\n", "    }\n", "\n", "    @Test\n", "    public void getAlgorithmEmptyTest() {\n", "        Assert.assertEquals(\"\", SignatureMechanisms.getAlgorithm(\"\"));\n", "    }\n", "\n", "    @Test\n", "    public void getAlgorithmEmptySpaceTest() {\n", "        Assert.assertEquals(\" \", SignatureMechanisms.getAlgorithm(\" \"));\n", "    }\n", "\n", "    @Test\n", "    public void getAlgorithmUndefinedTest() {\n", "        Assert.assertEquals(\"undefined\", SignatureMechanisms.getAlgorithm(\"undefined\"));\n", "    }\n", "}\n"], "method_lines_dic": {"SignatureMechanisms::::getSignatureMechanismOid(java.lang.String,java.lang.String)": [153, 189], "SignatureMechanisms::::getAlgorithm(java.lang.String)": [196, 203], "SignatureMechanisms::::getMechanism(java.lang.String,java.lang.String)": [213, 220]}, "test_method_lines_dic": {"SignatureMechanismsTest::::getAlgorithmRSATest()": [35, 38], "SignatureMechanismsTest::::getAlgorithmECDSATest()": [40, 43], "SignatureMechanismsTest::::getAlgorithmEmptyTest()": [45, 48], "SignatureMechanismsTest::::getAlgorithmEmptySpaceTest()": [50, 53], "SignatureMechanismsTest::::getAlgorithmUndefinedTest()": [55, 58]}, "reverse_method_lines_dic": {"153": "SignatureMechanisms::::getSignatureMechanismOid(java.lang.String,java.lang.String)", "154": "SignatureMechanisms::::getSignatureMechanismOid(java.lang.String,java.lang.String)", "155": "SignatureMechanisms::::getSignatureMechanismOid(java.lang.String,java.lang.String)", "156": "SignatureMechanisms::::getSignatureMechanismOid(java.lang.String,java.lang.String)", "157": "SignatureMechanisms::::getSignatureMechanismOid(java.lang.String,java.lang.String)", "158": "SignatureMechanisms::::getSignatureMechanismOid(java.lang.String,java.lang.String)", "159": "SignatureMechanisms::::getSignatureMechanismOid(java.lang.String,java.lang.String)", "160": "SignatureMechanisms::::getSignatureMechanismOid(java.lang.String,java.lang.String)", "161": "SignatureMechanisms::::getSignatureMechanismOid(java.lang.String,java.lang.String)", "162": "SignatureMechanisms::::getSignatureMechanismOid(java.lang.String,java.lang.String)", "163": "SignatureMechanisms::::getSignatureMechanismOid(java.lang.String,java.lang.String)", "164": "SignatureMechanisms::::getSignatureMechanismOid(java.lang.String,java.lang.String)", "165": "SignatureMechanisms::::getSignatureMechanismOid(java.lang.String,java.lang.String)", "166": "SignatureMechanisms::::getSignatureMechanismOid(java.lang.String,java.lang.String)", "167": "SignatureMechanisms::::getSignatureMechanismOid(java.lang.String,java.lang.String)", "168": "SignatureMechanisms::::getSignatureMechanismOid(java.lang.String,java.lang.String)", "169": "SignatureMechanisms::::getSignatureMechanismOid(java.lang.String,java.lang.String)", "170": "SignatureMechanisms::::getSignatureMechanismOid(java.lang.String,java.lang.String)", "171": "SignatureMechanisms::::getSignatureMechanismOid(java.lang.String,java.lang.String)", "172": "SignatureMechanisms::::getSignatureMechanismOid(java.lang.String,java.lang.String)", "173": "SignatureMechanisms::::getSignatureMechanismOid(java.lang.String,java.lang.String)", "174": "SignatureMechanisms::::getSignatureMechanismOid(java.lang.String,java.lang.String)", "175": "SignatureMechanisms::::getSignatureMechanismOid(java.lang.String,java.lang.String)", "176": "SignatureMechanisms::::getSignatureMechanismOid(java.lang.String,java.lang.String)", "177": "SignatureMechanisms::::getSignatureMechanismOid(java.lang.String,java.lang.String)", "178": "SignatureMechanisms::::getSignatureMechanismOid(java.lang.String,java.lang.String)", "179": "SignatureMechanisms::::getSignatureMechanismOid(java.lang.String,java.lang.String)", "180": "SignatureMechanisms::::getSignatureMechanismOid(java.lang.String,java.lang.String)", "181": "SignatureMechanisms::::getSignatureMechanismOid(java.lang.String,java.lang.String)", "182": "SignatureMechanisms::::getSignatureMechanismOid(java.lang.String,java.lang.String)", "183": "SignatureMechanisms::::getSignatureMechanismOid(java.lang.String,java.lang.String)", "184": "SignatureMechanisms::::getSignatureMechanismOid(java.lang.String,java.lang.String)", "185": "SignatureMechanisms::::getSignatureMechanismOid(java.lang.String,java.lang.String)", "186": "SignatureMechanisms::::getSignatureMechanismOid(java.lang.String,java.lang.String)", "187": "SignatureMechanisms::::getSignatureMechanismOid(java.lang.String,java.lang.String)", "188": "SignatureMechanisms::::getSignatureMechanismOid(java.lang.String,java.lang.String)", "189": "SignatureMechanisms::::getSignatureMechanismOid(java.lang.String,java.lang.String)", "196": "SignatureMechanisms::::getAlgorithm(java.lang.String)", "197": "SignatureMechanisms::::getAlgorithm(java.lang.String)", "198": "SignatureMechanisms::::getAlgorithm(java.lang.String)", "199": "SignatureMechanisms::::getAlgorithm(java.lang.String)", "200": "SignatureMechanisms::::getAlgorithm(java.lang.String)", "201": "SignatureMechanisms::::getAlgorithm(java.lang.String)", "202": "SignatureMechanisms::::getAlgorithm(java.lang.String)", "203": "SignatureMechanisms::::getAlgorithm(java.lang.String)", "213": "SignatureMechanisms::::getMechanism(java.lang.String,java.lang.String)", "214": "SignatureMechanisms::::getMechanism(java.lang.String,java.lang.String)", "215": "SignatureMechanisms::::getMechanism(java.lang.String,java.lang.String)", "216": "SignatureMechanisms::::getMechanism(java.lang.String,java.lang.String)", "217": "SignatureMechanisms::::getMechanism(java.lang.String,java.lang.String)", "218": "SignatureMechanisms::::getMechanism(java.lang.String,java.lang.String)", "219": "SignatureMechanisms::::getMechanism(java.lang.String,java.lang.String)", "220": "SignatureMechanisms::::getMechanism(java.lang.String,java.lang.String)"}, "test_reverse_method_lines_dic": {"35": "SignatureMechanismsTest::::getAlgorithmRSATest()", "36": "SignatureMechanismsTest::::getAlgorithmRSATest()", "37": "SignatureMechanismsTest::::getAlgorithmRSATest()", "38": "SignatureMechanismsTest::::getAlgorithmRSATest()", "40": "SignatureMechanismsTest::::getAlgorithmECDSATest()", "41": "SignatureMechanismsTest::::getAlgorithmECDSATest()", "42": "SignatureMechanismsTest::::getAlgorithmECDSATest()", "43": "SignatureMechanismsTest::::getAlgorithmECDSATest()", "45": "SignatureMechanismsTest::::getAlgorithmEmptyTest()", "46": "SignatureMechanismsTest::::getAlgorithmEmptyTest()", "47": "SignatureMechanismsTest::::getAlgorithmEmptyTest()", "48": "SignatureMechanismsTest::::getAlgorithmEmptyTest()", "50": "SignatureMechanismsTest::::getAlgorithmEmptySpaceTest()", "51": "SignatureMechanismsTest::::getAlgorithmEmptySpaceTest()", "52": "SignatureMechanismsTest::::getAlgorithmEmptySpaceTest()", "53": "SignatureMechanismsTest::::getAlgorithmEmptySpaceTest()", "55": "SignatureMechanismsTest::::getAlgorithmUndefinedTest()", "56": "SignatureMechanismsTest::::getAlgorithmUndefinedTest()", "57": "SignatureMechanismsTest::::getAlgorithmUndefinedTest()", "58": "SignatureMechanismsTest::::getAlgorithmUndefinedTest()"}, "tests": [{"test_lines": [35, 38], "covered_lines": [41, 43, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 73, 75, 77, 79, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 107, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 197, 198, 201]}, {"test_lines": [40, 43], "covered_lines": [41, 43, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 73, 75, 77, 79, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 107, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 197, 198, 201]}, {"test_lines": [45, 48], "covered_lines": [41, 43, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 73, 75, 77, 79, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 107, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 197, 198, 199]}, {"test_lines": [50, 53], "covered_lines": [41, 43, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 73, 75, 77, 79, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 107, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 197, 198, 199]}, {"test_lines": [55, 58], "covered_lines": [41, 43, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 73, 75, 77, 79, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 107, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 197, 198, 199]}]}, "/bernard/dataset_construction/prep/repos/itext-java/sign/src/main/java/com/itextpdf/signatures/validation/v1/DocumentRevisionsValidator.java": {"class_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.signatures.validation.v1;\n", "\n", "import com.itextpdf.commons.actions.contexts.IMetaInfo;\n", "import com.itextpdf.commons.utils.MessageFormatUtil;\n", "import com.itextpdf.forms.PdfAcroForm;\n", "import com.itextpdf.forms.fields.PdfFormAnnotationUtil;\n", "import com.itextpdf.forms.fields.PdfFormCreator;\n", "import com.itextpdf.forms.fields.PdfFormField;\n", "import com.itextpdf.io.source.RASInputStream;\n", "import com.itextpdf.io.source.RandomAccessFileOrArray;\n", "import com.itextpdf.io.source.WindowRandomAccessSource;\n", "import com.itextpdf.kernel.pdf.DocumentProperties;\n", "import com.itextpdf.kernel.pdf.DocumentRevision;\n", "import com.itextpdf.kernel.pdf.PdfArray;\n", "import com.itextpdf.kernel.pdf.PdfDictionary;\n", "import com.itextpdf.kernel.pdf.PdfDocument;\n", "import com.itextpdf.kernel.pdf.PdfIndirectReference;\n", "import com.itextpdf.kernel.pdf.PdfName;\n", "import com.itextpdf.kernel.pdf.PdfNumber;\n", "import com.itextpdf.kernel.pdf.PdfObject;\n", "import com.itextpdf.kernel.pdf.PdfReader;\n", "import com.itextpdf.kernel.pdf.PdfReader.StrictnessLevel;\n", "import com.itextpdf.kernel.pdf.PdfRevisionsReader;\n", "import com.itextpdf.kernel.pdf.PdfStream;\n", "import com.itextpdf.kernel.pdf.PdfString;\n", "import com.itextpdf.signatures.AccessPermissions;\n", "import com.itextpdf.signatures.PdfSignature;\n", "import com.itextpdf.signatures.SignatureUtil;\n", "import com.itextpdf.signatures.validation.v1.context.ValidationContext;\n", "import com.itextpdf.signatures.validation.v1.context.ValidatorContext;\n", "import com.itextpdf.signatures.validation.v1.report.ReportItem;\n", "import com.itextpdf.signatures.validation.v1.report.ReportItem.ReportItemStatus;\n", "import com.itextpdf.signatures.validation.v1.report.ValidationReport;\n", "import com.itextpdf.signatures.validation.v1.report.ValidationReport.ValidationResult;\n", "\n", "import java.io.IOException;\n", "import java.io.InputStream;\n", "import java.util.ArrayList;\n", "import java.util.Arrays;\n", "import java.util.Collection;\n", "import java.util.Collections;\n", "import java.util.HashSet;\n", "import java.util.List;\n", "import java.util.Map;\n", "import java.util.Objects;\n", "import java.util.Set;\n", "import java.util.stream.Collectors;\n", "\n", "/**\n", " * Validator, which is responsible for document revisions validation according to doc-MDP and field-MDP rules.\n", " */\n", "public class DocumentRevisionsValidator {\n", "    static final String DOC_MDP_CHECK = \"DocMDP check.\";\n", "    static final String FIELD_MDP_CHECK = \"FieldMDP check.\";\n", "\n", "    static final String ACCESS_PERMISSIONS_ADDED = \"Access permissions level specified for \\\"{0}\\\" approval signature \"\n", "            + \"is higher than previous one specified. These access permissions will be ignored.\";\n", "    static final String ACROFORM_REMOVED = \"AcroForm dictionary was removed from catalog.\";\n", "    static final String ANNOTATIONS_MODIFIED = \"Field annotations were removed, added or unexpectedly modified.\";\n", "    static final String DEVELOPER_EXTENSION_REMOVED =\n", "            \"Developer extension \\\"{0}\\\" dictionary was removed or unexpectedly modified.\";\n", "    static final String DIRECT_OBJECT = \"{0} must be an indirect reference.\";\n", "    static final String DOCUMENT_WITHOUT_SIGNATURES = \"Document doesn't contain any signatures.\";\n", "    static final String DSS_REMOVED = \"DSS dictionary was removed from catalog.\";\n", "    static final String EXTENSIONS_REMOVED = \"Extensions dictionary was removed from the catalog.\";\n", "    static final String EXTENSIONS_TYPE = \"Developer extensions must be a dictionary.\";\n", "    static final String EXTENSION_LEVEL_DECREASED =\n", "            \"Extension level number in developer extension \\\"{0}\\\" dictionary was decreased.\";\n", "    static final String FIELD_NOT_DICTIONARY =\n", "            \"Form field \\\"{0}\\\" or one of its widgets is not a dictionary. It will not be validated.\";\n", "    static final String FIELD_REMOVED = \"Form field {0} was removed or unexpectedly modified.\";\n", "    static final String LOCKED_FIELD_KIDS_ADDED =\n", "            \"Kids were added to locked form field \\\"{0}\\\".\";\n", "    static final String LOCKED_FIELD_KIDS_REMOVED =\n", "            \"Kids were removed from locked form field \\\"{0}\\\" .\";\n", "    static final String LOCKED_FIELD_MODIFIED = \"Locked form field \\\"{0}\\\" or one of its widgets was modified.\";\n", "    static final String LOCKED_FIELD_REMOVED = \"Locked form field \\\"{0}\\\" was removed from the document.\";\n", "    static final String NOT_ALLOWED_ACROFORM_CHANGES = \"PDF document AcroForm contains changes other than \" +\n", "            \"document timestamp (docMDP level >= 1), form fill-in and digital signatures (docMDP level >= 2), \" +\n", "            \"adding or editing annotations (docMDP level 3), which are not allowed.\";\n", "    static final String NOT_ALLOWED_CATALOG_CHANGES = \"PDF document catalog contains changes other than \" +\n", "            \"DSS dictionary and DTS addition (docMDP level >= 1), \" +\n", "            \"form fill-in and digital signatures (docMDP level >= 2), \" +\n", "            \"adding or editing annotations (docMDP level 3).\";\n", "    static final String OBJECT_REMOVED =\n", "            \"Object \\\"{0}\\\", which is not allowed to be removed, was removed from the document through XREF table.\";\n", "    static final String PAGES_MODIFIED = \"Pages structure was unexpectedly modified.\";\n", "    static final String PAGE_ANNOTATIONS_MODIFIED = \"Page annotations were unexpectedly modified.\";\n", "    static final String PAGE_MODIFIED = \"Page was unexpectedly modified.\";\n", "    static final String PERMISSIONS_REMOVED = \"Permissions dictionary was removed from the catalog.\";\n", "    static final String PERMISSIONS_TYPE = \"Permissions must be a dictionary.\";\n", "    static final String PERMISSION_REMOVED = \"Permission \\\"{0}\\\" dictionary was removed or unexpectedly modified.\";\n", "    static final String REFERENCE_REMOVED = \"Signature reference dictionary was removed or unexpectedly modified.\";\n", "    static final String REVISIONS_READING_EXCEPTION = \"IOException occurred during document revisions reading.\";\n", "    static final String REVISIONS_RETRIEVAL_FAILED = \"Wasn't possible to retrieve document revisions.\";\n", "    static final String SIGNATURE_MODIFIED = \"Signature {0} was unexpectedly modified.\";\n", "    static final String SIGNATURE_REVISION_NOT_FOUND =\n", "            \"Not possible to identify document revision corresponding to the first signature in the document.\";\n", "    static final String TOO_MANY_CERTIFICATION_SIGNATURES = \"Document contains more than one certification signature.\";\n", "    static final String UNEXPECTED_ENTRY_IN_XREF =\n", "            \"New PDF document revision contains unexpected entry \\\"{0}\\\" in XREF table.\";\n", "    static final String UNEXPECTED_FORM_FIELD = \"New PDF document revision contains unexpected form field \\\"{0}\\\".\";\n", "    static final String UNKNOWN_ACCESS_PERMISSIONS = \"Access permissions level number specified for \\\"{0}\\\" signature \"\n", "            + \"is undefined. Default level 2 will be used instead.\";\n", "    static final String UNRECOGNIZED_ACTION = \"Signature field lock dictionary contains unrecognized \"\n", "            + \"\\\"Action\\\" value \\\"{0}\\\". \\\"All\\\" will be used instead.\";\n", "\n", "    private final Set<String> lockedFields = new HashSet<>();\n", "    private final SignatureValidationProperties properties;\n", "    private IMetaInfo metaInfo = new ValidationMetaInfo();\n", "    private AccessPermissions accessPermissions = AccessPermissions.ANNOTATION_MODIFICATION;\n", "    private AccessPermissions requestedAccessPermissions = AccessPermissions.UNSPECIFIED;\n", "    private ReportItemStatus unexpectedXrefChangesStatus = ReportItemStatus.INFO;\n", "    private Set<PdfObject> checkedAnnots;\n", "    private Set<PdfDictionary> newlyAddedFields;\n", "\n", "    /**\n", "     * Creates new instance of {@link DocumentRevisionsValidator}.\n", "     *\n", "     * @param chainBuilder See {@link  ValidatorChainBuilder}\n", "     */\n", "    protected DocumentRevisionsValidator(ValidatorChainBuilder chainBuilder) {\n", "        this.properties = chainBuilder.getProperties();\n", "    }\n", "\n", "    /**\n", "     * Sets the {@link IMetaInfo} that will be used during new {@link PdfDocument} creations.\n", "     *\n", "     * @param metaInfo meta info to set\n", "     *\n", "     * @return the same {@link DocumentRevisionsValidator} instance\n", "     */\n", "    public DocumentRevisionsValidator setEventCountingMetaInfo(IMetaInfo metaInfo) {\n", "        this.metaInfo = metaInfo;\n", "        return this;\n", "    }\n", "\n", "    /**\n", "     * Set access permissions to be used during docMDP validation.\n", "     * If value is provided, access permission related signature parameters will be ignored during the validation.\n", "     *\n", "     * @param accessPermissions {@link AccessPermissions} docMDP validation level\n", "     *\n", "     * @return the same {@link DocumentRevisionsValidator} instance\n", "     */\n", "    public DocumentRevisionsValidator setAccessPermissions(AccessPermissions accessPermissions) {\n", "        this.requestedAccessPermissions = accessPermissions;\n", "        return this;\n", "    }\n", "\n", "    /**\n", "     * Set the status to be used for the report items produced during docMDP validation in case revision contains\n", "     * unexpected changes in the XREF table. Default value is {@link ReportItemStatus#INFO}.\n", "     *\n", "     * @param status {@link ReportItemStatus} to be used in case of unexpected changes in the XREF table\n", "     *\n", "     * @return the same {@link DocumentRevisionsValidator} instance.\n", "     */\n", "    public DocumentRevisionsValidator setUnexpectedXrefChangesStatus(ReportItemStatus status) {\n", "        this.unexpectedXrefChangesStatus = status;\n", "        return this;\n", "    }\n", "\n", "    /**\n", "     * Validate all document revisions according to docMDP and fieldMDP transform methods.\n", "     *\n", "     * @param context the validation context in which to validate document revisions\n", "     * @param document the document to be validated\n", "     *\n", "     * @return {@link ValidationReport} which contains detailed validation results.\n", "     */\n", "    public ValidationReport validateAllDocumentRevisions(ValidationContext context, PdfDocument document) {\n", "        resetClassFields();\n", "        ValidationContext localContext = context.setValidatorContext(ValidatorContext.DOCUMENT_REVISIONS_VALIDATOR);\n", "        ValidationReport report = new ValidationReport();\n", "        PdfRevisionsReader revisionsReader = new PdfRevisionsReader(document.getReader());\n", "        revisionsReader.setEventCountingMetaInfo(metaInfo);\n", "        List<DocumentRevision> documentRevisions;\n", "        try {\n", "            documentRevisions = revisionsReader.getAllRevisions();\n", "        } catch (IOException e) {\n", "            report.addReportItem(\n", "                    new ReportItem(DOC_MDP_CHECK, REVISIONS_RETRIEVAL_FAILED, ReportItemStatus.INDETERMINATE));\n", "            return report;\n", "        }\n", "        SignatureUtil signatureUtil = new SignatureUtil(document);\n", "        List<String> signatures = new ArrayList<>(signatureUtil.getSignatureNames());\n", "        if (signatures.isEmpty()) {\n", "            report.addReportItem(new ReportItem(DOC_MDP_CHECK, DOCUMENT_WITHOUT_SIGNATURES, ReportItemStatus.INFO));\n", "            return report;\n", "        }\n", "        boolean signatureFound = false;\n", "        boolean certificationSignatureFound = false;\n", "        PdfSignature currentSignature = signatureUtil.getSignature(signatures.get(0));\n", "        for (int i = 0; i < documentRevisions.size(); i++) {\n", "            if (currentSignature != null &&\n", "                    revisionContainsSignature(documentRevisions.get(i), signatures.get(0), document)) {\n", "                signatureFound = true;\n", "                if (isCertificationSignature(currentSignature)) {\n", "                    if (certificationSignatureFound) {\n", "                        report.addReportItem(new ReportItem(DOC_MDP_CHECK,\n", "                                TOO_MANY_CERTIFICATION_SIGNATURES, ReportItemStatus.INDETERMINATE));\n", "                    } else {\n", "                        certificationSignatureFound = true;\n", "                        updateCertificationSignatureAccessPermissions(currentSignature, report);\n", "                    }\n", "                }\n", "                updateApprovalSignatureAccessPermissions(\n", "                        signatureUtil.getSignatureFormFieldDictionary(signatures.get(0)), report);\n", "                updateApprovalSignatureFieldLock(documentRevisions.get(i),\n", "                        signatureUtil.getSignatureFormFieldDictionary(signatures.get(0)), document, report);\n", "                signatures.remove(0);\n", "                if (signatures.isEmpty()) {\n", "                    currentSignature = null;\n", "                } else {\n", "                    currentSignature = signatureUtil.getSignature(signatures.get(0));\n", "                }\n", "            }\n", "            if (signatureFound && i < documentRevisions.size() - 1) {\n", "                validateRevision(documentRevisions.get(i), documentRevisions.get(i + 1),\n", "                        document, report, localContext);\n", "            }\n", "            if (stopValidation(report, localContext)) {\n", "                break;\n", "            }\n", "        }\n", "        if (!signatureFound) {\n", "            report.addReportItem(\n", "                    new ReportItem(DOC_MDP_CHECK, SIGNATURE_REVISION_NOT_FOUND, ReportItemStatus.INVALID));\n", "        }\n", "        return report;\n", "    }\n", "\n", "    void validateRevision(DocumentRevision previousRevision, DocumentRevision currentRevision, PdfDocument document,\n", "            ValidationReport validationReport, ValidationContext context) {\n", "        try (InputStream previousInputStream = createInputStreamFromRevision(document, previousRevision);\n", "             PdfReader previousReader = new PdfReader(previousInputStream)\n", "                     .setStrictnessLevel(StrictnessLevel.CONSERVATIVE);\n", "             PdfDocument documentWithoutRevision = new PdfDocument(previousReader,\n", "                     new DocumentProperties().setEventCountingMetaInfo(metaInfo));\n", "             InputStream currentInputStream = createInputStreamFromRevision(document, currentRevision);\n", "             PdfReader currentReader = new PdfReader(currentInputStream)\n", "                     .setStrictnessLevel(StrictnessLevel.CONSERVATIVE);\n", "             PdfDocument documentWithRevision = new PdfDocument(currentReader,\n", "                     new DocumentProperties().setEventCountingMetaInfo(metaInfo))) {\n", "            Set<PdfIndirectReference> indirectReferences = currentRevision.getModifiedObjects();\n", "            if (!compareCatalogs(documentWithoutRevision, documentWithRevision, validationReport, context)) {\n", "                return;\n", "            }\n", "            Set<PdfIndirectReference> currentAllowedReferences = createAllowedReferences(documentWithRevision);\n", "            Set<PdfIndirectReference> previousAllowedReferences = createAllowedReferences(documentWithoutRevision);\n", "            for (PdfIndirectReference indirectReference : indirectReferences) {\n", "                if (indirectReference.isFree()) {\n", "                    // In this boolean flag we check that reference which is about to be removed is the one which\n", "                    // changed in the new revision. For instance DSS reference was 5 0 obj and changed to be 6 0 obj.\n", "                    // In this case and only in this case reference with obj number 5 can be safely removed.\n", "                    boolean referenceAllowedToBeRemoved = previousAllowedReferences.stream().anyMatch(reference ->\n", "                            reference != null && reference.getObjNumber() == indirectReference.getObjNumber()) &&\n", "                            !currentAllowedReferences.stream().anyMatch(reference ->\n", "                                    reference != null && reference.getObjNumber() == indirectReference.getObjNumber());\n", "                    // If some reference wasn't in the previous document, it is safe to remove it,\n", "                    // since it is not possible to introduce new reference and remove it at the same revision.\n", "                    boolean referenceWasInPrevDocument =\n", "                            documentWithoutRevision.getPdfObject(indirectReference.getObjNumber()) != null;\n", "                    if (!isMaxGenerationObject(indirectReference) &&\n", "                            referenceWasInPrevDocument && !referenceAllowedToBeRemoved) {\n", "                        validationReport.addReportItem(new ReportItem(DOC_MDP_CHECK, MessageFormatUtil.format(\n", "                                OBJECT_REMOVED, indirectReference.getObjNumber()), unexpectedXrefChangesStatus));\n", "                    }\n", "                } else if (!checkAllowedReferences(currentAllowedReferences, previousAllowedReferences,\n", "                        indirectReference, documentWithoutRevision) &&\n", "                        !isAllowedStreamObj(indirectReference, documentWithRevision)) {\n", "                    validationReport.addReportItem(new ReportItem(DOC_MDP_CHECK, MessageFormatUtil.format(\n", "                            UNEXPECTED_ENTRY_IN_XREF, indirectReference.getObjNumber()), unexpectedXrefChangesStatus));\n", "                }\n", "            }\n", "        } catch (IOException exception) {\n", "            validationReport.addReportItem(new ReportItem(DOC_MDP_CHECK, REVISIONS_READING_EXCEPTION,\n", "                    exception, ReportItemStatus.INDETERMINATE));\n", "        }\n", "    }\n", "\n", "    //\n", "    //\n", "    // Revisions validation util section:\n", "    //\n", "    //\n", "\n", "    AccessPermissions getAccessPermissions() {\n", "        return requestedAccessPermissions == AccessPermissions.UNSPECIFIED ? accessPermissions :\n", "                requestedAccessPermissions;\n", "    }\n", "\n", "    private static InputStream createInputStreamFromRevision(PdfDocument originalDocument, DocumentRevision revision) {\n", "        RandomAccessFileOrArray raf = originalDocument.getReader().getSafeFile();\n", "        WindowRandomAccessSource source = new WindowRandomAccessSource(\n", "                raf.createSourceView(), 0, revision.getEofOffset());\n", "        return new RASInputStream(source);\n", "    }\n", "\n", "    private boolean stopValidation(ValidationReport result, ValidationContext validationContext) {\n", "        return !properties.getContinueAfterFailure(validationContext)\n", "                && result.getValidationResult() == ValidationResult.INVALID;\n", "    }\n", "\n", "    private void updateApprovalSignatureAccessPermissions(PdfDictionary signatureField, ValidationReport report) {\n", "        PdfDictionary fieldLock = signatureField.getAsDictionary(PdfName.Lock);\n", "        if (fieldLock == null || fieldLock.getAsNumber(PdfName.P) == null) {\n", "            return;\n", "        }\n", "        PdfNumber p = fieldLock.getAsNumber(PdfName.P);\n", "        AccessPermissions newAccessPermissions;\n", "        switch (p.intValue()) {\n", "            case 1:\n", "                newAccessPermissions = AccessPermissions.NO_CHANGES_PERMITTED;\n", "                break;\n", "            case 2:\n", "                newAccessPermissions = AccessPermissions.FORM_FIELDS_MODIFICATION;\n", "                break;\n", "            case 3:\n", "                newAccessPermissions = AccessPermissions.ANNOTATION_MODIFICATION;\n", "                break;\n", "            default:\n", "                // Do nothing.\n", "                return;\n", "        }\n", "        if (accessPermissions.compareTo(newAccessPermissions) < 0) {\n", "            PdfString fieldName = signatureField.getAsString(PdfName.T);\n", "            report.addReportItem(new ReportItem(DOC_MDP_CHECK, MessageFormatUtil.format(ACCESS_PERMISSIONS_ADDED,\n", "                    fieldName == null ? \"\" : fieldName.getValue()), ReportItemStatus.INDETERMINATE));\n", "        } else {\n", "            accessPermissions = newAccessPermissions;\n", "        }\n", "    }\n", "\n", "    private void updateApprovalSignatureFieldLock(DocumentRevision revision, PdfDictionary signatureField,\n", "            PdfDocument document, ValidationReport report) {\n", "        PdfDictionary fieldLock = signatureField.getAsDictionary(PdfName.Lock);\n", "        if (fieldLock == null || fieldLock.getAsName(PdfName.Action) == null) {\n", "            return;\n", "        }\n", "\n", "        PdfName action = fieldLock.getAsName(PdfName.Action);\n", "        if (PdfName.Include.equals(action)) {\n", "            PdfArray fields = fieldLock.getAsArray(PdfName.Fields);\n", "            if (fields != null) {\n", "                for (PdfObject fieldName : fields) {\n", "                    if (fieldName instanceof PdfString) {\n", "                        lockedFields.add(((PdfString) fieldName).toUnicodeString());\n", "                    }\n", "                }\n", "            }\n", "        } else if (PdfName.Exclude.equals(action)) {\n", "            PdfArray fields = fieldLock.getAsArray(PdfName.Fields);\n", "            List<String> excludedFields = Collections.<String>emptyList();\n", "            if (fields != null) {\n", "                excludedFields = fields.subList(0, fields.size()).stream().map(\n", "                        field -> field instanceof PdfString ? ((PdfString) field).toUnicodeString() : null)\n", "                        .collect(Collectors.toList());\n", "            }\n", "            lockAllFormFields(revision, excludedFields, document, report);\n", "        } else {\n", "            if (!PdfName.All.equals(action)) {\n", "                report.addReportItem(new ReportItem(FIELD_MDP_CHECK, MessageFormatUtil.format(\n", "                        UNRECOGNIZED_ACTION, action.getValue()), ReportItemStatus.INVALID));\n", "            }\n", "            lockAllFormFields(revision, Collections.<String>emptyList(), document, report);\n", "        }\n", "    }\n", "\n", "    private void lockAllFormFields(DocumentRevision revision, List<String> excludedFields, PdfDocument document,\n", "            ValidationReport report) {\n", "        try (InputStream inputStream = createInputStreamFromRevision(document, revision);\n", "             PdfReader reader = new PdfReader(inputStream);\n", "             PdfDocument documentWithRevision = new PdfDocument(reader,\n", "                     new DocumentProperties().setEventCountingMetaInfo(metaInfo))) {\n", "            PdfAcroForm acroForm = PdfFormCreator.getAcroForm(documentWithRevision, false);\n", "            if (acroForm != null) {\n", "                for (String fieldName : acroForm.getAllFormFields().keySet()) {\n", "                    if (!excludedFields.contains(fieldName)) {\n", "                        lockedFields.add(fieldName);\n", "                    }\n", "                }\n", "            }\n", "        } catch (IOException exception) {\n", "            report.addReportItem(new ReportItem(FIELD_MDP_CHECK, REVISIONS_READING_EXCEPTION, exception,\n", "                    ReportItemStatus.INDETERMINATE));\n", "        }\n", "    }\n", "\n", "    private void updateCertificationSignatureAccessPermissions(PdfSignature signature, ValidationReport report) {\n", "        PdfArray references = signature.getPdfObject().getAsArray(PdfName.Reference);\n", "        for (PdfObject reference : references) {\n", "            PdfDictionary referenceDict = (PdfDictionary) reference;\n", "            PdfName transformMethod = referenceDict.getAsName(PdfName.TransformMethod);\n", "            if (PdfName.DocMDP.equals(transformMethod)) {\n", "                PdfDictionary transformParameters = referenceDict.getAsDictionary(PdfName.TransformParams);\n", "                if (transformParameters == null || transformParameters.getAsNumber(PdfName.P) == null) {\n", "                    accessPermissions = AccessPermissions.FORM_FIELDS_MODIFICATION;\n", "                    return;\n", "                }\n", "                PdfNumber p = transformParameters.getAsNumber(PdfName.P);\n", "                switch (p.intValue()) {\n", "                    case 1:\n", "                        accessPermissions = AccessPermissions.NO_CHANGES_PERMITTED;\n", "                        break;\n", "                    case 2:\n", "                        accessPermissions = AccessPermissions.FORM_FIELDS_MODIFICATION;\n", "                        break;\n", "                    case 3:\n", "                        accessPermissions = AccessPermissions.ANNOTATION_MODIFICATION;\n", "                        break;\n", "                    default:\n", "                        report.addReportItem(new ReportItem(DOC_MDP_CHECK, MessageFormatUtil.format(\n", "                                UNKNOWN_ACCESS_PERMISSIONS, signature.getName()), ReportItemStatus.INDETERMINATE));\n", "                        accessPermissions = AccessPermissions.FORM_FIELDS_MODIFICATION;\n", "                        break;\n", "                }\n", "                return;\n", "            }\n", "        }\n", "    }\n", "\n", "    private boolean isCertificationSignature(PdfSignature signature) {\n", "        if (PdfName.DocTimeStamp.equals(signature.getType()) || PdfName.ETSI_RFC3161.equals(signature.getSubFilter())) {\n", "            // Timestamp is never a certification signature.\n", "            return false;\n", "        }\n", "        PdfArray references = signature.getPdfObject().getAsArray(PdfName.Reference);\n", "        if (references != null) {\n", "            for (PdfObject reference : references) {\n", "                if (reference instanceof PdfDictionary) {\n", "                    PdfDictionary referenceDict = (PdfDictionary) reference;\n", "                    PdfName transformMethod = referenceDict.getAsName(PdfName.TransformMethod);\n", "                    return PdfName.DocMDP.equals(transformMethod);\n", "                }\n", "            }\n", "        }\n", "        return false;\n", "    }\n", "\n", "    private boolean revisionContainsSignature(DocumentRevision revision, String signature, PdfDocument document) {\n", "        try (InputStream inputStream = createInputStreamFromRevision(document, revision);\n", "             PdfReader reader = new PdfReader(inputStream);\n", "             PdfDocument documentWithRevision = new PdfDocument(reader,\n", "                     new DocumentProperties().setEventCountingMetaInfo(metaInfo))) {\n", "            SignatureUtil signatureUtil = new SignatureUtil(documentWithRevision);\n", "            return signatureUtil.signatureCoversWholeDocument(signature);\n", "        } catch (IOException ignored) {\n", "        }\n", "        return false;\n", "    }\n", "\n", "    private void resetClassFields() {\n", "        lockedFields.clear();\n", "        accessPermissions = AccessPermissions.ANNOTATION_MODIFICATION;\n", "    }\n", "\n", "    //\n", "    //\n", "    // Compare catalogs section:\n", "    //\n", "    //\n", "\n", "    private boolean compareCatalogs(PdfDocument documentWithoutRevision, PdfDocument documentWithRevision,\n", "                                    ValidationReport report, ValidationContext context) {\n", "        PdfDictionary previousCatalog = documentWithoutRevision.getCatalog().getPdfObject();\n", "        PdfDictionary currentCatalog = documentWithRevision.getCatalog().getPdfObject();\n", "\n", "        PdfDictionary previousCatalogCopy = copyCatalogEntriesToCompare(previousCatalog);\n", "        PdfDictionary currentCatalogCopy = copyCatalogEntriesToCompare(currentCatalog);\n", "\n", "        if (!comparePdfObjects(previousCatalogCopy, currentCatalogCopy)) {\n", "            report.addReportItem(new ReportItem(DOC_MDP_CHECK, NOT_ALLOWED_CATALOG_CHANGES, ReportItemStatus.INVALID));\n", "            return false;\n", "        }\n", "        boolean result = compareExtensions(previousCatalog.get(PdfName.Extensions),\n", "                currentCatalog.get(PdfName.Extensions), report);\n", "        if (stopValidation(report, context)) {\n", "            return result;\n", "        }\n", "        result = result &&\n", "                comparePermissions(previousCatalog.get(PdfName.Perms), currentCatalog.get(PdfName.Perms), report);\n", "        if (stopValidation(report, context)) {\n", "            return result;\n", "        }\n", "        result = result && compareDss(previousCatalog.get(PdfName.DSS), currentCatalog.get(PdfName.DSS), report);\n", "        if (stopValidation(report, context)) {\n", "            return result;\n", "        }\n", "        result = result && compareAcroFormsWithFieldMDP(documentWithoutRevision, documentWithRevision, report);\n", "        if (stopValidation(report, context)) {\n", "            return result;\n", "        }\n", "        result = result && compareAcroForms(previousCatalog.getAsDictionary(PdfName.AcroForm),\n", "                currentCatalog.getAsDictionary(PdfName.AcroForm), report);\n", "        if (stopValidation(report, context)) {\n", "            return result;\n", "        }\n", "        result = result && comparePages(previousCatalog.getAsDictionary(PdfName.Pages),\n", "                currentCatalog.getAsDictionary(PdfName.Pages), report);\n", "\n", "        return result;\n", "    }\n", "\n", "    // Compare catalogs nested methods section:\n", "\n", "    private boolean compareExtensions(PdfObject previousExtensions, PdfObject currentExtensions,\n", "                                      ValidationReport report) {\n", "        if (previousExtensions == null || comparePdfObjects(previousExtensions, currentExtensions)) {\n", "            return true;\n", "        }\n", "        if (currentExtensions == null) {\n", "            report.addReportItem(new ReportItem(DOC_MDP_CHECK, EXTENSIONS_REMOVED, ReportItemStatus.INVALID));\n", "            return false;\n", "        }\n", "        if (!(previousExtensions instanceof PdfDictionary) || !(currentExtensions instanceof PdfDictionary)) {\n", "            report.addReportItem(new ReportItem(DOC_MDP_CHECK, EXTENSIONS_TYPE, ReportItemStatus.INVALID));\n", "            return false;\n", "        }\n", "        PdfDictionary previousExtensionsDictionary = (PdfDictionary) previousExtensions;\n", "        PdfDictionary currentExtensionsDictionary = (PdfDictionary) currentExtensions;\n", "        boolean result = true;\n", "        for (Map.Entry<PdfName, PdfObject> previousExtension : previousExtensionsDictionary.entrySet()) {\n", "            PdfDictionary currentExtension = currentExtensionsDictionary.getAsDictionary(previousExtension.getKey());\n", "            if (currentExtension == null) {\n", "                report.addReportItem(new ReportItem(DOC_MDP_CHECK, MessageFormatUtil.format(\n", "                        DEVELOPER_EXTENSION_REMOVED, previousExtension.getKey()), ReportItemStatus.INVALID));\n", "                result = false;\n", "            } else {\n", "                PdfDictionary currentExtensionCopy = new PdfDictionary(currentExtension);\n", "                currentExtensionCopy.remove(PdfName.ExtensionLevel);\n", "                PdfDictionary previousExtensionCopy = new PdfDictionary((PdfDictionary) previousExtension.getValue());\n", "                previousExtensionCopy.remove(PdfName.ExtensionLevel);\n", "                // Apart from extension level dictionaries are expected to be equal.\n", "                if (!comparePdfObjects(previousExtensionCopy, currentExtensionCopy)) {\n", "                    report.addReportItem(new ReportItem(DOC_MDP_CHECK, MessageFormatUtil.format(\n", "                            DEVELOPER_EXTENSION_REMOVED, previousExtension.getKey()), ReportItemStatus.INVALID));\n", "                    result = false;\n", "                    continue;\n", "                }\n", "                PdfNumber previousExtensionLevel = ((PdfDictionary) previousExtension.getValue())\n", "                        .getAsNumber(PdfName.ExtensionLevel);\n", "                PdfNumber currentExtensionLevel = currentExtension.getAsNumber(PdfName.ExtensionLevel);\n", "                if (previousExtensionLevel != null) {\n", "                    if (currentExtensionLevel == null ||\n", "                            previousExtensionLevel.intValue() > currentExtensionLevel.intValue()) {\n", "                        report.addReportItem(new ReportItem(DOC_MDP_CHECK, MessageFormatUtil.format(\n", "                                EXTENSION_LEVEL_DECREASED, previousExtension.getKey()), ReportItemStatus.INVALID));\n", "                        result = false;\n", "                    }\n", "                }\n", "            }\n", "        }\n", "        return result;\n", "    }\n", "\n", "    private boolean comparePermissions(PdfObject previousPerms, PdfObject currentPerms, ValidationReport report) {\n", "        if (previousPerms == null || comparePdfObjects(previousPerms, currentPerms)) {\n", "            return true;\n", "        }\n", "        if (currentPerms == null) {\n", "            report.addReportItem(new ReportItem(DOC_MDP_CHECK, PERMISSIONS_REMOVED, ReportItemStatus.INVALID));\n", "            return false;\n", "        }\n", "        if (!(previousPerms instanceof PdfDictionary) || !(currentPerms instanceof PdfDictionary)) {\n", "            report.addReportItem(new ReportItem(DOC_MDP_CHECK, PERMISSIONS_TYPE, ReportItemStatus.INVALID));\n", "            return false;\n", "        }\n", "        PdfDictionary previousPermsDictionary = (PdfDictionary) previousPerms;\n", "        PdfDictionary currentPermsDictionary = (PdfDictionary) currentPerms;\n", "        boolean result = true;\n", "        for (Map.Entry<PdfName, PdfObject> previousPermission : previousPermsDictionary.entrySet()) {\n", "            PdfDictionary currentPermission = currentPermsDictionary.getAsDictionary(previousPermission.getKey());\n", "            if (currentPermission == null) {\n", "                report.addReportItem(new ReportItem(DOC_MDP_CHECK, MessageFormatUtil.format(\n", "                        PERMISSION_REMOVED, previousPermission.getKey()), ReportItemStatus.INVALID));\n", "                result = false;\n", "            } else {\n", "                // Perms dictionary is the signature dictionary.\n", "                if (!compareSignatureDictionaries(previousPermission.getValue(), currentPermission, report)) {\n", "                    report.addReportItem(new ReportItem(DOC_MDP_CHECK, MessageFormatUtil.format(\n", "                            PERMISSION_REMOVED, previousPermission.getKey()), ReportItemStatus.INVALID));\n", "                    result = false;\n", "                }\n", "            }\n", "        }\n", "        return result;\n", "    }\n", "\n", "    private boolean compareDss(PdfObject previousDss, PdfObject currentDss, ValidationReport report) {\n", "        if (previousDss == null) {\n", "            return true;\n", "        }\n", "        if (currentDss == null) {\n", "            report.addReportItem(new ReportItem(DOC_MDP_CHECK, DSS_REMOVED, ReportItemStatus.INVALID));\n", "            return false;\n", "        }\n", "        return true;\n", "    }\n", "\n", "    private boolean compareAcroFormsWithFieldMDP(PdfDocument documentWithoutRevision, PdfDocument documentWithRevision,\n", "                                                 ValidationReport report) {\n", "        PdfAcroForm currentAcroForm = PdfFormCreator.getAcroForm(documentWithRevision, false);\n", "        PdfAcroForm previousAcroForm = PdfFormCreator.getAcroForm(documentWithoutRevision, false);\n", "\n", "        if (currentAcroForm == null || previousAcroForm == null) {\n", "            // This is not a part of FieldMDP validation.\n", "            return true;\n", "        }\n", "        if (accessPermissions == AccessPermissions.NO_CHANGES_PERMITTED) {\n", "            // In this case FieldMDP makes no sense, because related changes are forbidden anyway.\n", "            return true;\n", "        }\n", "        boolean result = true;\n", "        for (Map.Entry<String, PdfFormField> previousField : previousAcroForm.getAllFormFields().entrySet()) {\n", "            if (lockedFields.contains(previousField.getKey())) {\n", "                // For locked form fields nothing can change,\n", "                // however annotations can contain page link which should be excluded from direct comparison.\n", "                PdfFormField currentFormField = currentAcroForm.getField(previousField.getKey());\n", "                if (currentFormField == null) {\n", "                    report.addReportItem(new ReportItem(FIELD_MDP_CHECK, MessageFormatUtil.format(\n", "                            LOCKED_FIELD_REMOVED, previousField.getKey()), ReportItemStatus.INVALID));\n", "                    result = false;\n", "                    continue;\n", "                }\n", "                if (!compareFormFieldWithFieldMDP(previousField.getValue().getPdfObject(),\n", "                        currentFormField.getPdfObject(), previousField.getKey(), report)) {\n", "                    result = false;\n", "                }\n", "            }\n", "        }\n", "        return result;\n", "    }\n", "\n", "    private boolean compareFormFieldWithFieldMDP(PdfDictionary previousField, PdfDictionary currentField,\n", "                                                 String fieldName, ValidationReport report) {\n", "        PdfDictionary previousFieldCopy = new PdfDictionary(previousField);\n", "        previousFieldCopy.remove(PdfName.Kids);\n", "        previousFieldCopy.remove(PdfName.P);\n", "        previousFieldCopy.remove(PdfName.Parent);\n", "        previousFieldCopy.remove(PdfName.V);\n", "        PdfDictionary currentFieldCopy = new PdfDictionary(currentField);\n", "        currentFieldCopy.remove(PdfName.Kids);\n", "        currentFieldCopy.remove(PdfName.P);\n", "        currentFieldCopy.remove(PdfName.Parent);\n", "        currentFieldCopy.remove(PdfName.V);\n", "        if (!comparePdfObjects(previousFieldCopy, currentFieldCopy)) {\n", "            report.addReportItem(new ReportItem(FIELD_MDP_CHECK, MessageFormatUtil.format(\n", "                    LOCKED_FIELD_MODIFIED, fieldName), ReportItemStatus.INVALID));\n", "            return false;\n", "        }\n", "\n", "        PdfObject prevValue = previousField.get(PdfName.V);\n", "        PdfObject currValue = currentField.get(PdfName.V);\n", "        if (PdfName.Sig.equals(currentField.getAsName(PdfName.FT))) {\n", "            if (!compareSignatureDictionaries(prevValue, currValue, report)) {\n", "                report.addReportItem(new ReportItem(FIELD_MDP_CHECK, MessageFormatUtil.format(\n", "                        LOCKED_FIELD_MODIFIED, fieldName), ReportItemStatus.INVALID));\n", "                return false;\n", "            }\n", "        } else if (!comparePdfObjects(prevValue, currValue)) {\n", "            report.addReportItem(new ReportItem(FIELD_MDP_CHECK, MessageFormatUtil.format(\n", "                    LOCKED_FIELD_MODIFIED, fieldName), ReportItemStatus.INVALID));\n", "            return false;\n", "        }\n", "\n", "        if (!compareIndirectReferencesObjNums(previousField.get(PdfName.P), currentField.get(PdfName.P), report,\n", "                \"Page object with which field annotation is associated\") ||\n", "                !compareIndirectReferencesObjNums(previousField.get(PdfName.Parent), currentField.get(PdfName.Parent),\n", "                        report, \"Form field parent\")) {\n", "            report.addReportItem(new ReportItem(FIELD_MDP_CHECK, MessageFormatUtil.format(\n", "                    LOCKED_FIELD_MODIFIED, fieldName), ReportItemStatus.INVALID));\n", "            return false;\n", "        }\n", "\n", "        PdfArray previousKids = previousField.getAsArray(PdfName.Kids);\n", "        PdfArray currentKids = currentField.getAsArray(PdfName.Kids);\n", "        if (previousKids == null && currentKids != null) {\n", "            report.addReportItem(new ReportItem(FIELD_MDP_CHECK, MessageFormatUtil.format(\n", "                    LOCKED_FIELD_KIDS_ADDED, fieldName), ReportItemStatus.INVALID));\n", "            return false;\n", "        }\n", "        if (previousKids != null && currentKids == null) {\n", "            report.addReportItem(new ReportItem(FIELD_MDP_CHECK, MessageFormatUtil.format(\n", "                    LOCKED_FIELD_KIDS_REMOVED, fieldName), ReportItemStatus.INVALID));\n", "            return false;\n", "        }\n", "        if (previousKids == currentKids) {\n", "            return true;\n", "        }\n", "        if (previousKids.size() < currentKids.size()) {\n", "            report.addReportItem(new ReportItem(FIELD_MDP_CHECK, MessageFormatUtil.format(\n", "                    LOCKED_FIELD_KIDS_ADDED, fieldName), ReportItemStatus.INVALID));\n", "            return false;\n", "        }\n", "        if (previousKids.size() > currentKids.size()) {\n", "            report.addReportItem(new ReportItem(FIELD_MDP_CHECK, MessageFormatUtil.format(\n", "                    LOCKED_FIELD_KIDS_REMOVED, fieldName), ReportItemStatus.INVALID));\n", "            return false;\n", "        }\n", "        for (int i = 0; i < previousKids.size(); ++i) {\n", "            PdfDictionary previousKid = previousKids.getAsDictionary(i);\n", "            PdfDictionary currentKid = currentKids.getAsDictionary(i);\n", "            if (previousKid == null || currentKid == null) {\n", "                report.addReportItem(new ReportItem(FIELD_MDP_CHECK, MessageFormatUtil.format(\n", "                        FIELD_NOT_DICTIONARY, fieldName), ReportItemStatus.INDETERMINATE));\n", "                continue;\n", "            }\n", "            if (PdfFormAnnotationUtil.isPureWidget(previousKid) &&\n", "                    !compareFormFieldWithFieldMDP(previousKid, currentKid, fieldName, report)) {\n", "                return false;\n", "            }\n", "        }\n", "        return true;\n", "    }\n", "\n", "    private boolean compareAcroForms(PdfDictionary prevAcroForm, PdfDictionary currAcroForm, ValidationReport report) {\n", "        checkedAnnots = new HashSet<>();\n", "        newlyAddedFields = new HashSet<>();\n", "        if (prevAcroForm == null) {\n", "            if (currAcroForm == null) {\n", "                return true;\n", "            }\n", "            PdfArray fields = currAcroForm.getAsArray(PdfName.Fields);\n", "            for (PdfObject field : fields) {\n", "                PdfDictionary fieldDict = (PdfDictionary) field;\n", "                if (!isAllowedSignatureField(fieldDict, report)) {\n", "                    report.addReportItem(new ReportItem(DOC_MDP_CHECK, NOT_ALLOWED_ACROFORM_CHANGES,\n", "                            ReportItemStatus.INVALID));\n", "                    return false;\n", "                }\n", "            }\n", "            return true;\n", "        }\n", "        if (currAcroForm == null) {\n", "            report.addReportItem(new ReportItem(DOC_MDP_CHECK, ACROFORM_REMOVED, ReportItemStatus.INVALID));\n", "            return false;\n", "        }\n", "\n", "        PdfDictionary previousAcroFormCopy = copyAcroformDictionary(prevAcroForm);\n", "        PdfDictionary currentAcroFormCopy = copyAcroformDictionary(currAcroForm);\n", "\n", "        PdfArray prevFields = prevAcroForm.getAsArray(PdfName.Fields);\n", "        PdfArray currFields = currAcroForm.getAsArray(PdfName.Fields);\n", "\n", "        if (!comparePdfObjects(previousAcroFormCopy, currentAcroFormCopy) ||\n", "                (prevFields.size() > currFields.size()) ||\n", "                !compareFormFields(prevFields, currFields, report)) {\n", "            report.addReportItem(new ReportItem(DOC_MDP_CHECK, NOT_ALLOWED_ACROFORM_CHANGES, ReportItemStatus.INVALID));\n", "            return false;\n", "        }\n", "\n", "        return true;\n", "    }\n", "\n", "    private boolean compareFormFields(PdfArray prevFields, PdfArray currFields, ValidationReport report) {\n", "        Set<PdfDictionary> prevFieldsSet = populateFormFields(prevFields);\n", "        Set<PdfDictionary> currFieldsSet = populateFormFields(currFields);\n", "\n", "        for (PdfDictionary previousField : prevFieldsSet) {\n", "            PdfDictionary currentField = retrieveTheSameField(currFieldsSet, previousField);\n", "            if (currentField == null || !compareFields(previousField, currentField, report)) {\n", "                PdfString fieldName = previousField.getAsString(PdfName.T);\n", "                report.addReportItem(new ReportItem(DOC_MDP_CHECK, MessageFormatUtil.format(FIELD_REMOVED,\n", "                        fieldName == null ? \"\" : fieldName.getValue()), ReportItemStatus.INVALID));\n", "                return false;\n", "            }\n", "            if (PdfFormAnnotationUtil.isPureWidgetOrMergedField(previousField)) {\n", "                checkedAnnots.add(previousField);\n", "            }\n", "            if (PdfFormAnnotationUtil.isPureWidgetOrMergedField(currentField)) {\n", "                checkedAnnots.add(currentField);\n", "            }\n", "            currFieldsSet.remove(currentField);\n", "        }\n", "\n", "        for (PdfDictionary field : currFieldsSet) {\n", "            if (!isAllowedSignatureField(field, report)) {\n", "                return false;\n", "            }\n", "        }\n", "        return compareWidgets(prevFields, currFields, report);\n", "    }\n", "\n", "    private PdfDictionary retrieveTheSameField(Set<PdfDictionary> currFields, PdfDictionary previousField) {\n", "        for (PdfDictionary currentField : currFields) {\n", "            PdfDictionary prevFormDict = copyFieldDictionary(previousField);\n", "            PdfDictionary currFormDict = copyFieldDictionary(currentField);\n", "            if (comparePdfObjects(prevFormDict, currFormDict) &&\n", "                    compareIndirectReferencesObjNums(prevFormDict.get(PdfName.Parent), currFormDict.get(PdfName.Parent),\n", "                            new ValidationReport(), \"Form field parent\") &&\n", "                    compareIndirectReferencesObjNums(prevFormDict.get(PdfName.P), currFormDict.get(PdfName.P),\n", "                            new ValidationReport(), \"Page object with which field annotation is associated\")) {\n", "                return currentField;\n", "            }\n", "        }\n", "        return null;\n", "    }\n", "\n", "    /**\n", "     * DocMDP level >= 2 allows setting values of the fields and accordingly update the widget appearances of them. But\n", "     * you cannot change the form structure, so it is not allowed to add, remove or rename fields, change most of their\n", "     * properties.\n", "     *\n", "     * @param previousField field from the previous revision to check\n", "     * @param currentField  field from the current revision to check\n", "     * @param report        validation report\n", "     *\n", "     * @return {@code true} if the changes of the field are allowed, {@code false} otherwise.\n", "     */\n", "    private boolean compareFields(PdfDictionary previousField, PdfDictionary currentField, ValidationReport report) {\n", "        PdfObject prevValue = previousField.get(PdfName.V);\n", "        PdfObject currValue = currentField.get(PdfName.V);\n", "        if (prevValue == null && currValue == null && PdfName.Ch.equals(currentField.getAsName(PdfName.FT))) {\n", "            // Choice field: if the items in the I entry differ from those in the V entry, the V entry shall be used.\n", "            prevValue = previousField.get(PdfName.I);\n", "            currValue = currentField.get(PdfName.I);\n", "        }\n", "\n", "        if (PdfName.Sig.equals(currentField.getAsName(PdfName.FT))) {\n", "            if (!compareSignatureDictionaries(prevValue, currValue, report)) {\n", "                PdfString fieldName = currentField.getAsString(PdfName.T);\n", "                report.addReportItem(new ReportItem(DOC_MDP_CHECK, MessageFormatUtil.format(\n", "                        SIGNATURE_MODIFIED, fieldName == null ? \"\" : fieldName.getValue()), ReportItemStatus.INVALID));\n", "                return false;\n", "            }\n", "        } else if (getAccessPermissions() == AccessPermissions.NO_CHANGES_PERMITTED\n", "                && !comparePdfObjects(prevValue, currValue)) {\n", "            return false;\n", "        }\n", "\n", "        return compareFormFields(previousField.getAsArray(PdfName.Kids), currentField.getAsArray(PdfName.Kids), report);\n", "    }\n", "\n", "    private boolean compareSignatureDictionaries(PdfObject prevSigDict, PdfObject curSigDict, ValidationReport report) {\n", "        if (prevSigDict == null) {\n", "            return true;\n", "        }\n", "        if (curSigDict == null) {\n", "            return false;\n", "        }\n", "        if (!(prevSigDict instanceof PdfDictionary) || !(curSigDict instanceof PdfDictionary)) {\n", "            return false;\n", "        }\n", "        PdfDictionary currentSigDictCopy = new PdfDictionary((PdfDictionary) curSigDict);\n", "        currentSigDictCopy.remove(PdfName.Reference);\n", "        PdfDictionary previousSigDictCopy = new PdfDictionary((PdfDictionary) prevSigDict);\n", "        previousSigDictCopy.remove(PdfName.Reference);\n", "        // Apart from the reference, dictionaries are expected to be equal.\n", "        if (!comparePdfObjects(previousSigDictCopy, currentSigDictCopy)) {\n", "            return false;\n", "        }\n", "        PdfArray previousReference = ((PdfDictionary) prevSigDict).getAsArray(PdfName.Reference);\n", "        PdfArray currentReference = ((PdfDictionary) curSigDict).getAsArray(PdfName.Reference);\n", "        return compareSignatureReferenceDictionaries(previousReference, currentReference, report);\n", "    }\n", "\n", "    private boolean compareSignatureReferenceDictionaries(PdfArray previousReferences, PdfArray currentReferences,\n", "                                                          ValidationReport report) {\n", "        if (previousReferences == null || comparePdfObjects(previousReferences, currentReferences)) {\n", "            return true;\n", "        }\n", "        if (currentReferences == null || previousReferences.size() != currentReferences.size()) {\n", "            report.addReportItem(new ReportItem(DOC_MDP_CHECK, REFERENCE_REMOVED, ReportItemStatus.INVALID));\n", "            return false;\n", "        } else {\n", "            for (int i = 0; i < previousReferences.size(); ++i) {\n", "                PdfDictionary currentReferenceCopy = new PdfDictionary(currentReferences.getAsDictionary(i));\n", "                currentReferenceCopy.remove(PdfName.Data);\n", "                PdfDictionary previousReferenceCopy = new PdfDictionary(previousReferences.getAsDictionary(i));\n", "                previousReferenceCopy.remove(PdfName.Data);\n", "                // Apart from the data, dictionaries are expected to be equal. Data is an indirect reference\n", "                // to the object in the document upon which the object modification analysis should be performed.\n", "                if (!comparePdfObjects(previousReferenceCopy, currentReferenceCopy) ||\n", "                        !compareIndirectReferencesObjNums(previousReferences.getAsDictionary(i).get(PdfName.Data),\n", "                                currentReferences.getAsDictionary(i).get(PdfName.Data), report,\n", "                                \"Data entry in the signature reference dictionary\")) {\n", "                    report.addReportItem(new ReportItem(DOC_MDP_CHECK, REFERENCE_REMOVED, ReportItemStatus.INVALID));\n", "                    return false;\n", "                }\n", "            }\n", "        }\n", "        return true;\n", "    }\n", "\n", "    private boolean compareWidgets(PdfArray prevFields, PdfArray currFields, ValidationReport report) {\n", "        if (getAccessPermissions() == AccessPermissions.ANNOTATION_MODIFICATION) {\n", "            return true;\n", "        }\n", "        List<PdfDictionary> prevAnnots = populateWidgetAnnotations(prevFields);\n", "        List<PdfDictionary> currAnnots = populateWidgetAnnotations(currFields);\n", "        if (prevAnnots.size() != currAnnots.size()) {\n", "            report.addReportItem(new ReportItem(DOC_MDP_CHECK, ANNOTATIONS_MODIFIED, ReportItemStatus.INVALID));\n", "            return false;\n", "        }\n", "        for (int i = 0; i < prevAnnots.size(); i++) {\n", "            PdfDictionary prevAnnot = new PdfDictionary(prevAnnots.get(i));\n", "            removeAppearanceRelatedProperties(prevAnnot);\n", "            PdfDictionary currAnnot = new PdfDictionary(currAnnots.get(i));\n", "            removeAppearanceRelatedProperties(currAnnot);\n", "            if (!comparePdfObjects(prevAnnot, currAnnot) ||\n", "                    !compareIndirectReferencesObjNums(\n", "                            prevAnnots.get(i).get(PdfName.P), currAnnots.get(i).get(PdfName.P), report,\n", "                            \"Page object with which annotation is associated\") ||\n", "                    !compareIndirectReferencesObjNums(\n", "                            prevAnnots.get(i).get(PdfName.Parent), currAnnots.get(i).get(PdfName.Parent), report,\n", "                            \"Annotation parent\")) {\n", "                report.addReportItem(new ReportItem(DOC_MDP_CHECK, ANNOTATIONS_MODIFIED, ReportItemStatus.INVALID));\n", "                return false;\n", "            }\n", "            checkedAnnots.add(prevAnnots.get(i));\n", "            checkedAnnots.add(currAnnots.get(i));\n", "        }\n", "        return true;\n", "    }\n", "\n", "    private boolean comparePages(PdfDictionary prevPages, PdfDictionary currPages, ValidationReport report) {\n", "        if (prevPages == null ^ currPages == null) {\n", "            report.addReportItem(new ReportItem(DOC_MDP_CHECK, PAGES_MODIFIED, ReportItemStatus.INVALID));\n", "            return false;\n", "        }\n", "        if (prevPages == null) {\n", "            return true;\n", "        }\n", "        PdfDictionary previousPagesCopy = new PdfDictionary(prevPages);\n", "        previousPagesCopy.remove(PdfName.Kids);\n", "        previousPagesCopy.remove(PdfName.Parent);\n", "        PdfDictionary currentPagesCopy = new PdfDictionary(currPages);\n", "        currentPagesCopy.remove(PdfName.Kids);\n", "        currentPagesCopy.remove(PdfName.Parent);\n", "        if (!comparePdfObjects(previousPagesCopy, currentPagesCopy) ||\n", "                !compareIndirectReferencesObjNums(prevPages.get(PdfName.Parent), currPages.get(PdfName.Parent), report,\n", "                        \"Page tree node parent\")) {\n", "            report.addReportItem(new ReportItem(DOC_MDP_CHECK, PAGES_MODIFIED, ReportItemStatus.INVALID));\n", "            return false;\n", "        }\n", "\n", "        PdfArray prevKids = prevPages.getAsArray(PdfName.Kids);\n", "        PdfArray currKids = currPages.getAsArray(PdfName.Kids);\n", "        if (prevKids.size() != currKids.size()) {\n", "            report.addReportItem(new ReportItem(DOC_MDP_CHECK, PAGES_MODIFIED, ReportItemStatus.INVALID));\n", "            return false;\n", "        }\n", "        for (int i = 0; i < currKids.size(); ++i) {\n", "            PdfDictionary previousKid = prevKids.getAsDictionary(i);\n", "            PdfDictionary currentKid = currKids.getAsDictionary(i);\n", "            if (PdfName.Pages.equals(previousKid.getAsName(PdfName.Type))) {\n", "                // Compare page tree nodes.\n", "                if (!comparePages(previousKid, currentKid, report)) {\n", "                    return false;\n", "                }\n", "            } else {\n", "                // Compare page objects (leaf node in the page tree).\n", "                PdfDictionary previousPageCopy = new PdfDictionary(previousKid);\n", "                previousPageCopy.remove(PdfName.Annots);\n", "                previousPageCopy.remove(PdfName.Parent);\n", "                PdfDictionary currentPageCopy = new PdfDictionary(currentKid);\n", "                currentPageCopy.remove(PdfName.Annots);\n", "                currentPageCopy.remove(PdfName.Parent);\n", "                if (!comparePdfObjects(previousPageCopy, currentPageCopy) || !compareIndirectReferencesObjNums(\n", "                        previousKid.get(PdfName.Parent), currentKid.get(PdfName.Parent), report, \"Page parent\")) {\n", "                    report.addReportItem(new ReportItem(DOC_MDP_CHECK, PAGE_MODIFIED, ReportItemStatus.INVALID));\n", "                    return false;\n", "                }\n", "\n", "                PdfArray prevAnnots = getAnnotsNotAllowedToBeModified(previousKid);\n", "                PdfArray currAnnots = getAnnotsNotAllowedToBeModified(currentKid);\n", "                if (!comparePageAnnotations(prevAnnots, currAnnots, report)) {\n", "                    report.addReportItem(new ReportItem(DOC_MDP_CHECK, PAGE_ANNOTATIONS_MODIFIED,\n", "                            ReportItemStatus.INVALID));\n", "                    return false;\n", "                }\n", "            }\n", "        }\n", "        return true;\n", "    }\n", "\n", "    private boolean comparePageAnnotations(PdfArray prevAnnots, PdfArray currAnnots, ValidationReport report) {\n", "        if (prevAnnots == null && currAnnots == null) {\n", "            return true;\n", "        }\n", "        if (prevAnnots == null || currAnnots == null || prevAnnots.size() != currAnnots.size()) {\n", "            return false;\n", "        }\n", "        for (int i = 0; i < prevAnnots.size(); i++) {\n", "            PdfDictionary prevAnnot = new PdfDictionary(prevAnnots.getAsDictionary(i));\n", "            prevAnnot.remove(PdfName.P);\n", "            prevAnnot.remove(PdfName.Parent);\n", "            PdfDictionary currAnnot = new PdfDictionary(currAnnots.getAsDictionary(i));\n", "            currAnnot.remove(PdfName.P);\n", "            currAnnot.remove(PdfName.Parent);\n", "            if (!comparePdfObjects(prevAnnot, currAnnot) ||\n", "                    !compareIndirectReferencesObjNums(prevAnnots.getAsDictionary(i).get(PdfName.P),\n", "                            currAnnots.getAsDictionary(i).get(PdfName.P), report,\n", "                            \"Page object with which annotation is associated\") ||\n", "                    !compareIndirectReferencesObjNums(prevAnnots.getAsDictionary(i).get(PdfName.Parent),\n", "                            currAnnots.getAsDictionary(i).get(PdfName.Parent), report, \"Annotation parent\")) {\n", "                return false;\n", "            }\n", "        }\n", "        return true;\n", "    }\n", "\n", "    // Compare catalogs util methods section:\n", "\n", "    private boolean compareIndirectReferencesObjNums(PdfObject prevObj, PdfObject currObj, ValidationReport report,\n", "                                                     String type) {\n", "        if (prevObj == null ^ currObj == null) {\n", "            return false;\n", "        }\n", "        if (prevObj == null) {\n", "            return true;\n", "        }\n", "        PdfIndirectReference prevObjRef = prevObj.getIndirectReference();\n", "        PdfIndirectReference currObjRef = currObj.getIndirectReference();\n", "        if (prevObjRef == null || currObjRef == null) {\n", "            if (report != null) {\n", "                report.addReportItem(new ReportItem(DOC_MDP_CHECK, MessageFormatUtil.format(DIRECT_OBJECT, type),\n", "                        ReportItemStatus.INVALID));\n", "            }\n", "            return false;\n", "        }\n", "        return isSameReference(prevObjRef, currObjRef);\n", "    }\n", "\n", "    /**\n", "     * DocMDP level <=2 allows adding new fields in the following cases:\n", "     * docMDP level 1: allows adding only DocTimeStamp signature fields;\n", "     * docMDP level 2: same as level 1 and also adding and then signing signature fields,\n", "     * so signature dictionary shouldn't be null.\n", "     *\n", "     * @param field  newly added field entry\n", "     * @param report validation report\n", "     *\n", "     * @return true if newly added field is allowed to be added, false otherwise.\n", "     */\n", "    private boolean isAllowedSignatureField(PdfDictionary field, ValidationReport report) {\n", "        PdfDictionary value = field.getAsDictionary(PdfName.V);\n", "        if (!PdfName.Sig.equals(field.getAsName(PdfName.FT)) || value == null ||\n", "                (getAccessPermissions() == AccessPermissions.NO_CHANGES_PERMITTED\n", "                        && !PdfName.DocTimeStamp.equals(value.getAsName(PdfName.Type)))) {\n", "            PdfString fieldName = field.getAsString(PdfName.T);\n", "            report.addReportItem(new ReportItem(DOC_MDP_CHECK, MessageFormatUtil.format(UNEXPECTED_FORM_FIELD,\n", "                    fieldName == null ? \"\" : fieldName.getValue()), ReportItemStatus.INVALID));\n", "            return false;\n", "        }\n", "\n", "        if (PdfFormAnnotationUtil.isPureWidgetOrMergedField(field)) {\n", "            checkedAnnots.add(field);\n", "        } else {\n", "            PdfArray kids = field.getAsArray(PdfName.Kids);\n", "            checkedAnnots.addAll(populateWidgetAnnotations(kids));\n", "        }\n", "        newlyAddedFields.add(field);\n", "\n", "        return true;\n", "    }\n", "\n", "    private Set<PdfDictionary> populateFormFields(PdfArray fieldsArray) {\n", "        Set<PdfDictionary> fields = new HashSet<>();\n", "        if (fieldsArray != null) {\n", "            for (int i = 0; i < fieldsArray.size(); ++i) {\n", "                PdfDictionary fieldDict = (PdfDictionary) fieldsArray.get(i);\n", "                if (PdfFormField.isFormField(fieldDict)) {\n", "                    fields.add(fieldDict);\n", "                }\n", "            }\n", "        }\n", "        return fields;\n", "    }\n", "\n", "    private List<PdfDictionary> populateWidgetAnnotations(PdfArray fieldsArray) {\n", "        List<PdfDictionary> annotations = new ArrayList<>();\n", "        if (fieldsArray != null) {\n", "            for (int i = 0; i < fieldsArray.size(); ++i) {\n", "                PdfDictionary annotDict = (PdfDictionary) fieldsArray.get(i);\n", "                if (PdfFormAnnotationUtil.isPureWidget(annotDict)) {\n", "                    annotations.add(annotDict);\n", "                }\n", "            }\n", "        }\n", "        return annotations;\n", "    }\n", "\n", "    private PdfArray getAnnotsNotAllowedToBeModified(PdfDictionary page) {\n", "        PdfArray annots = page.getAsArray(PdfName.Annots);\n", "        if (annots == null || getAccessPermissions() == AccessPermissions.ANNOTATION_MODIFICATION) {\n", "            return null;\n", "        }\n", "        PdfArray annotsCopy = new PdfArray(annots);\n", "        for (PdfObject annot : annots) {\n", "            // checkedAnnots contains all the fields' widget annotations from the Acroform which were already validated\n", "            // during the compareAcroForms call, so we shouldn't check them once again\n", "            if (checkedAnnots.contains(annot)) {\n", "                annotsCopy.remove(annot);\n", "            }\n", "        }\n", "        return annotsCopy;\n", "    }\n", "\n", "    private PdfDictionary copyCatalogEntriesToCompare(PdfDictionary catalog) {\n", "        PdfDictionary catalogCopy = new PdfDictionary(catalog);\n", "        catalogCopy.remove(PdfName.Metadata);\n", "        catalogCopy.remove(PdfName.Extensions);\n", "        catalogCopy.remove(PdfName.Perms);\n", "        catalogCopy.remove(PdfName.DSS);\n", "        catalogCopy.remove(PdfName.AcroForm);\n", "        catalogCopy.remove(PdfName.Pages);\n", "        return catalogCopy;\n", "    }\n", "\n", "    private PdfDictionary copyAcroformDictionary(PdfDictionary acroForm) {\n", "        PdfDictionary acroFormCopy = new PdfDictionary(acroForm);\n", "        acroFormCopy.remove(PdfName.Fields);\n", "        acroFormCopy.remove(PdfName.DR);\n", "        acroFormCopy.remove(PdfName.DA);\n", "        return acroFormCopy;\n", "    }\n", "\n", "    private PdfDictionary copyFieldDictionary(PdfDictionary field) {\n", "        PdfDictionary formDict = new PdfDictionary(field);\n", "        formDict.remove(PdfName.V);\n", "        // Value for the choice fields could be specified by the /I key.\n", "        formDict.remove(PdfName.I);\n", "        formDict.remove(PdfName.Parent);\n", "        formDict.remove(PdfName.Kids);\n", "        // Remove also annotation related properties (e.g. in case of the merged field).\n", "        removeAppearanceRelatedProperties(formDict);\n", "        return formDict;\n", "    }\n", "\n", "    private void removeAppearanceRelatedProperties(PdfDictionary annotDict) {\n", "        annotDict.remove(PdfName.P);\n", "        annotDict.remove(PdfName.Parent);\n", "        if (getAccessPermissions() == AccessPermissions.FORM_FIELDS_MODIFICATION) {\n", "            annotDict.remove(PdfName.AP);\n", "            annotDict.remove(PdfName.AS);\n", "            annotDict.remove(PdfName.M);\n", "            annotDict.remove(PdfName.F);\n", "        }\n", "        if (getAccessPermissions() == AccessPermissions.ANNOTATION_MODIFICATION) {\n", "            for (PdfName key : new PdfDictionary(annotDict).keySet()) {\n", "                if (!PdfFormField.getFormFieldKeys().contains(key)) {\n", "                    annotDict.remove(key);\n", "                }\n", "            }\n", "        }\n", "    }\n", "\n", "    //\n", "    //\n", "    // Compare PDF objects util section:\n", "    //\n", "    //\n", "\n", "    private static boolean comparePdfObjects(PdfObject pdfObject1, PdfObject pdfObject2) {\n", "        return comparePdfObjects(pdfObject1, pdfObject2, new HashSet<>());\n", "    }\n", "\n", "    private static boolean comparePdfObjects(PdfObject pdfObject1, PdfObject pdfObject2,\n", "                                             Set<PdfObject> visitedObjects) {\n", "        if (visitedObjects.contains(pdfObject1)) {\n", "            return true;\n", "        }\n", "        visitedObjects.add(pdfObject1);\n", "        if (Objects.equals(pdfObject1, pdfObject2)) {\n", "            return true;\n", "        }\n", "        if (pdfObject1 == null || pdfObject2 == null) {\n", "            return false;\n", "        }\n", "        if (pdfObject1.getClass() != pdfObject2.getClass()) {\n", "            return false;\n", "        }\n", "        // We don't allow objects to be direct and indirect.\n", "        // Acrobat however allows it, but such change can invalidate the document.\n", "        if (pdfObject1.getIndirectReference() == null ^ pdfObject2.getIndirectReference() == null) {\n", "            return false;\n", "        }\n", "        switch (pdfObject1.getType()) {\n", "            case PdfObject.BOOLEAN:\n", "            case PdfObject.NAME:\n", "            case PdfObject.NULL:\n", "            case PdfObject.LITERAL:\n", "            case PdfObject.NUMBER:\n", "            case PdfObject.STRING:\n", "                return pdfObject1.equals(pdfObject2);\n", "            case PdfObject.INDIRECT_REFERENCE:\n", "                return comparePdfObjects(((PdfIndirectReference) pdfObject1).getRefersTo(),\n", "                        ((PdfIndirectReference) pdfObject2).getRefersTo(), visitedObjects);\n", "            case PdfObject.ARRAY:\n", "                return comparePdfArrays((PdfArray) pdfObject1, (PdfArray) pdfObject2, visitedObjects);\n", "            case PdfObject.DICTIONARY:\n", "                return comparePdfDictionaries((PdfDictionary) pdfObject1, (PdfDictionary) pdfObject2,\n", "                        visitedObjects);\n", "            case PdfObject.STREAM:\n", "                return comparePdfStreams((PdfStream) pdfObject1, (PdfStream) pdfObject2, visitedObjects);\n", "            default:\n", "                return false;\n", "        }\n", "    }\n", "\n", "    private static boolean comparePdfArrays(PdfArray array1, PdfArray array2, Set<PdfObject> visitedObjects) {\n", "        if (array1.size() != array2.size()) {\n", "            return false;\n", "        }\n", "        for (int i = 0; i < array1.size(); i++) {\n", "            if (!comparePdfObjects(array1.get(i), array2.get(i), visitedObjects)) {\n", "                return false;\n", "            }\n", "        }\n", "        return true;\n", "    }\n", "\n", "    private static boolean comparePdfDictionaries(PdfDictionary dictionary1, PdfDictionary dictionary2,\n", "                                                  Set<PdfObject> visitedObjects) {\n", "        Set<Map.Entry<PdfName, PdfObject>> entrySet1 = dictionary1.entrySet();\n", "        Set<Map.Entry<PdfName, PdfObject>> entrySet2 = dictionary2.entrySet();\n", "        if (entrySet1.size() != entrySet2.size()) {\n", "            return false;\n", "        }\n", "        for (Map.Entry<PdfName, PdfObject> entry1 : entrySet1) {\n", "            if (!entrySet2.stream().anyMatch(entry2 -> entry2.getKey().equals(entry1.getKey()) &&\n", "                    comparePdfObjects(entry2.getValue(), entry1.getValue(), visitedObjects))) {\n", "                return false;\n", "            }\n", "        }\n", "        return true;\n", "    }\n", "\n", "    private static boolean comparePdfStreams(PdfStream stream1, PdfStream stream2, Set<PdfObject> visitedObjects) {\n", "        return Arrays.equals(stream1.getBytes(), stream2.getBytes()) &&\n", "                comparePdfDictionaries(stream1, stream2, visitedObjects);\n", "    }\n", "\n", "    private static boolean isSameReference(PdfIndirectReference indirectReference1,\n", "                                           PdfIndirectReference indirectReference2) {\n", "        if (indirectReference1 == indirectReference2) {\n", "            return true;\n", "        }\n", "        if (indirectReference1 == null || indirectReference2 == null) {\n", "            return false;\n", "        }\n", "        return indirectReference1.getObjNumber() == indirectReference2.getObjNumber() &&\n", "                indirectReference1.getGenNumber() == indirectReference2.getGenNumber();\n", "    }\n", "\n", "    private static boolean isMaxGenerationObject(PdfIndirectReference indirectReference) {\n", "        return indirectReference.getObjNumber() == 0 && indirectReference.getGenNumber() == 65535;\n", "    }\n", "\n", "    //\n", "    //\n", "    // Allowed references section:\n", "    //\n", "    //\n", "\n", "    private Set<PdfIndirectReference> createAllowedReferences(PdfDocument document) {\n", "        // Each indirect reference in the set is an allowed reference to be present in the new xref table\n", "        // or the same entry in the previous document.\n", "        // If any reference is null, we expect this object to be newly generated or direct reference.\n", "        Set<PdfIndirectReference> allowedReferences = new HashSet<>();\n", "\n", "        if (document.getTrailer().get(PdfName.Info) != null) {\n", "            allowedReferences.add(document.getTrailer().get(PdfName.Info).getIndirectReference());\n", "        }\n", "        if (document.getCatalog().getPdfObject() == null) {\n", "            return allowedReferences;\n", "        }\n", "        allowedReferences.add(document.getCatalog().getPdfObject().getIndirectReference());\n", "        if (document.getCatalog().getPdfObject().get(PdfName.Metadata) != null) {\n", "            allowedReferences.add(document.getCatalog().getPdfObject().get(PdfName.Metadata).getIndirectReference());\n", "        }\n", "\n", "        PdfDictionary dssDictionary = document.getCatalog().getPdfObject().getAsDictionary(PdfName.DSS);\n", "        if (dssDictionary != null) {\n", "            allowedReferences.add(dssDictionary.getIndirectReference());\n", "            allowedReferences.addAll(createAllowedDssEntries(document));\n", "        }\n", "\n", "        PdfDictionary acroForm = document.getCatalog().getPdfObject().getAsDictionary(PdfName.AcroForm);\n", "        if (acroForm != null) {\n", "            allowedReferences.add(acroForm.getIndirectReference());\n", "\n", "            PdfArray fields = acroForm.getAsArray(PdfName.Fields);\n", "            createAllowedFormFieldEntries(fields, allowedReferences);\n", "\n", "            PdfDictionary resources = acroForm.getAsDictionary(PdfName.DR);\n", "            if (resources != null) {\n", "                allowedReferences.add(resources.getIndirectReference());\n", "                addAllNestedDictionaryEntries(allowedReferences, resources);\n", "            }\n", "        }\n", "\n", "        PdfDictionary pagesDictionary = document.getCatalog().getPdfObject().getAsDictionary(PdfName.Pages);\n", "        if (pagesDictionary != null) {\n", "            allowedReferences.add(pagesDictionary.getIndirectReference());\n", "            allowedReferences.addAll(createAllowedPagesEntries(pagesDictionary));\n", "        }\n", "\n", "        return allowedReferences;\n", "    }\n", "\n", "    private boolean checkAllowedReferences(Set<PdfIndirectReference> currentAllowedReferences,\n", "                                           Set<PdfIndirectReference> previousAllowedReferences,\n", "                                           PdfIndirectReference indirectReference,\n", "                                           PdfDocument documentWithoutRevision) {\n", "        for (PdfIndirectReference currentAllowedReference : currentAllowedReferences) {\n", "            if (isSameReference(currentAllowedReference, indirectReference)) {\n", "                return documentWithoutRevision.getPdfObject(indirectReference.getObjNumber()) == null ||\n", "                        previousAllowedReferences.stream().anyMatch(\n", "                                reference -> isSameReference(reference, indirectReference));\n", "            }\n", "        }\n", "        return false;\n", "    }\n", "\n", "    private boolean isAllowedStreamObj(PdfIndirectReference indirectReference, PdfDocument document) {\n", "        PdfObject pdfObject = document.getPdfObject(indirectReference.getObjNumber());\n", "        if (pdfObject instanceof PdfStream) {\n", "            PdfName type = ((PdfStream) pdfObject).getAsName(PdfName.Type);\n", "            return PdfName.XRef.equals(type) || PdfName.ObjStm.equals(type);\n", "        }\n", "        return false;\n", "    }\n", "\n", "    // Allowed references creation nested methods section:\n", "\n", "    private Set<PdfIndirectReference> createAllowedDssEntries(PdfDocument document) {\n", "        Set<PdfIndirectReference> allowedReferences = new HashSet<>();\n", "        PdfDictionary dssDictionary = document.getCatalog().getPdfObject().getAsDictionary(PdfName.DSS);\n", "        PdfArray certs = dssDictionary.getAsArray(PdfName.Certs);\n", "        if (certs != null) {\n", "            allowedReferences.add(certs.getIndirectReference());\n", "            for (int i = 0; i < certs.size(); ++i) {\n", "                allowedReferences.add(certs.get(i).getIndirectReference());\n", "            }\n", "        }\n", "        PdfArray ocsps = dssDictionary.getAsArray(PdfName.OCSPs);\n", "        if (ocsps != null) {\n", "            allowedReferences.add(ocsps.getIndirectReference());\n", "            for (int i = 0; i < ocsps.size(); ++i) {\n", "                allowedReferences.add(ocsps.get(i).getIndirectReference());\n", "            }\n", "        }\n", "        PdfArray crls = dssDictionary.getAsArray(PdfName.CRLs);\n", "        if (crls != null) {\n", "            allowedReferences.add(crls.getIndirectReference());\n", "            for (int i = 0; i < crls.size(); ++i) {\n", "                allowedReferences.add(crls.get(i).getIndirectReference());\n", "            }\n", "        }\n", "        PdfDictionary vris = dssDictionary.getAsDictionary(PdfName.VRI);\n", "        if (vris != null) {\n", "            allowedReferences.add(vris.getIndirectReference());\n", "            for (Map.Entry<PdfName, PdfObject> vri : vris.entrySet()) {\n", "                allowedReferences.add(vri.getValue().getIndirectReference());\n", "                if (vri.getValue() instanceof PdfDictionary) {\n", "                    PdfDictionary vriDictionary = (PdfDictionary) vri.getValue();\n", "                    PdfArray vriCerts = vriDictionary.getAsArray(PdfName.Cert);\n", "                    if (vriCerts != null) {\n", "                        allowedReferences.add(vriCerts.getIndirectReference());\n", "                        for (int i = 0; i < vriCerts.size(); ++i) {\n", "                            allowedReferences.add(vriCerts.get(i).getIndirectReference());\n", "                        }\n", "                    }\n", "                    PdfArray vriOcsps = vriDictionary.getAsArray(PdfName.OCSP);\n", "                    if (vriOcsps != null) {\n", "                        allowedReferences.add(vriOcsps.getIndirectReference());\n", "                        for (int i = 0; i < vriOcsps.size(); ++i) {\n", "                            allowedReferences.add(vriOcsps.get(i).getIndirectReference());\n", "                        }\n", "                    }\n", "                    PdfArray vriCrls = vriDictionary.getAsArray(PdfName.CRL);\n", "                    if (vriCrls != null) {\n", "                        allowedReferences.add(vriCrls.getIndirectReference());\n", "                        for (int i = 0; i < vriCrls.size(); ++i) {\n", "                            allowedReferences.add(vriCrls.get(i).getIndirectReference());\n", "                        }\n", "                    }\n", "                    if (vriDictionary.get(new PdfName(\"TS\")) != null) {\n", "                        allowedReferences.add(vriDictionary.get(new PdfName(\"TS\")).getIndirectReference());\n", "                    }\n", "                }\n", "            }\n", "        }\n", "        return allowedReferences;\n", "    }\n", "\n", "    private Collection<PdfIndirectReference> createAllowedPagesEntries(PdfDictionary pagesDictionary) {\n", "        Set<PdfIndirectReference> allowedReferences = new HashSet<>();\n", "        PdfArray kids = pagesDictionary.getAsArray(PdfName.Kids);\n", "        if (kids != null) {\n", "            allowedReferences.add(kids.getIndirectReference());\n", "            for (int i = 0; i < kids.size(); ++i) {\n", "                PdfDictionary pageNode = kids.getAsDictionary(i);\n", "                allowedReferences.add(kids.get(i).getIndirectReference());\n", "                if (pageNode != null) {\n", "                    if (PdfName.Pages.equals(pageNode.getAsName(PdfName.Type))) {\n", "                        allowedReferences.addAll(createAllowedPagesEntries(pageNode));\n", "                    } else {\n", "                        PdfObject annots = pageNode.get(PdfName.Annots);\n", "                        if (annots != null) {\n", "                            allowedReferences.add(annots.getIndirectReference());\n", "                            if (getAccessPermissions() == AccessPermissions.ANNOTATION_MODIFICATION) {\n", "                                addAllNestedArrayEntries(allowedReferences, (PdfArray) annots);\n", "                            }\n", "                        }\n", "                    }\n", "                }\n", "            }\n", "        }\n", "        return allowedReferences;\n", "    }\n", "\n", "    private void createAllowedFormFieldEntries(PdfArray fields, Set<PdfIndirectReference> allowedReferences) {\n", "        if (fields == null) {\n", "            return;\n", "        }\n", "        for (PdfObject field : fields) {\n", "            PdfDictionary fieldDict = (PdfDictionary) field;\n", "            if (PdfFormField.isFormField(fieldDict)) {\n", "                PdfObject value = fieldDict.get(PdfName.V);\n", "                if (getAccessPermissions() != AccessPermissions.NO_CHANGES_PERMITTED || (value instanceof PdfDictionary &&\n", "                        PdfName.DocTimeStamp.equals(((PdfDictionary) value).getAsName(PdfName.Type)))) {\n", "                    allowedReferences.add(fieldDict.getIndirectReference());\n", "                    PdfString fieldName = PdfFormCreator.createFormField(fieldDict).getFieldName();\n", "                    if (newlyAddedFields.contains(fieldDict)) {\n", "                        // For newly generated form field all references are allowed to be added.\n", "                        addAllNestedDictionaryEntries(allowedReferences, fieldDict);\n", "                    } else if (fieldName == null || !lockedFields.contains(fieldName.getValue())) {\n", "                        // For already existing form field only several entries are allowed to be updated.\n", "                        if (value != null) {\n", "                            allowedReferences.add(value.getIndirectReference());\n", "                        }\n", "                        if (PdfFormAnnotationUtil.isPureWidgetOrMergedField(fieldDict)) {\n", "                            addWidgetAnnotation(allowedReferences, fieldDict);\n", "                        } else {\n", "                            PdfArray kids = fieldDict.getAsArray(PdfName.Kids);\n", "                            createAllowedFormFieldEntries(kids, allowedReferences);\n", "                        }\n", "                    }\n", "                }\n", "            } else {\n", "                // Add annotation.\n", "                addWidgetAnnotation(allowedReferences, fieldDict);\n", "            }\n", "        }\n", "    }\n", "\n", "    private void addWidgetAnnotation(Set<PdfIndirectReference> allowedReferences, PdfDictionary annotDict) {\n", "        allowedReferences.add(annotDict.getIndirectReference());\n", "        if (getAccessPermissions() == AccessPermissions.ANNOTATION_MODIFICATION) {\n", "            PdfDictionary pureAnnotDict = new PdfDictionary(annotDict);\n", "            for (PdfName key : annotDict.keySet()) {\n", "                if (PdfFormField.getFormFieldKeys().contains(key)) {\n", "                    pureAnnotDict.remove(key);\n", "                }\n", "            }\n", "            addAllNestedDictionaryEntries(allowedReferences, pureAnnotDict);\n", "        } else {\n", "            PdfObject appearance = annotDict.get(PdfName.AP);\n", "            if (appearance != null) {\n", "                allowedReferences.add(appearance.getIndirectReference());\n", "                if (appearance instanceof PdfDictionary) {\n", "                    addAllNestedDictionaryEntries(allowedReferences, (PdfDictionary) appearance);\n", "                }\n", "            }\n", "            PdfObject appearanceState = annotDict.get(PdfName.AS);\n", "            if (appearanceState != null) {\n", "                allowedReferences.add(appearanceState.getIndirectReference());\n", "            }\n", "            PdfObject timeStamp = annotDict.get(PdfName.M);\n", "            if (timeStamp != null) {\n", "                allowedReferences.add(timeStamp.getIndirectReference());\n", "            }\n", "        }\n", "    }\n", "\n", "    private void addAllNestedDictionaryEntries(Set<PdfIndirectReference> allowedReferences, PdfDictionary dictionary) {\n", "        for (Map.Entry<PdfName, PdfObject> entry : dictionary.entrySet()) {\n", "            PdfObject value = entry.getValue();\n", "            if (value.getIndirectReference() != null && allowedReferences.stream().anyMatch(\n", "                    reference -> isSameReference(reference, value.getIndirectReference()))) {\n", "                // Required to not end up in an infinite loop.\n", "                continue;\n", "            }\n", "            allowedReferences.add(value.getIndirectReference());\n", "            if (value instanceof PdfDictionary) {\n", "                addAllNestedDictionaryEntries(allowedReferences, (PdfDictionary) value);\n", "            }\n", "            if (value instanceof PdfArray) {\n", "                addAllNestedArrayEntries(allowedReferences, (PdfArray) value);\n", "            }\n", "        }\n", "    }\n", "\n", "    private void addAllNestedArrayEntries(Set<PdfIndirectReference> allowedReferences, PdfArray pdfArray) {\n", "        for (int i = 0; i < pdfArray.size(); ++i) {\n", "            PdfObject arrayEntry = pdfArray.get(i);\n", "            if (arrayEntry.getIndirectReference() != null && allowedReferences.stream().anyMatch(\n", "                    reference -> isSameReference(reference, arrayEntry.getIndirectReference()))) {\n", "                // Required to not end up in an infinite loop.\n", "                continue;\n", "            }\n", "            allowedReferences.add(arrayEntry.getIndirectReference());\n", "\n", "            if (arrayEntry instanceof PdfDictionary) {\n", "                addAllNestedDictionaryEntries(allowedReferences, pdfArray.getAsDictionary(i));\n", "            }\n", "            if (arrayEntry instanceof PdfArray) {\n", "                addAllNestedArrayEntries(allowedReferences, pdfArray.getAsArray(i));\n", "            }\n", "        }\n", "    }\n", "}\n"], "test_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.signatures.validation.v1;\n", "\n", "import com.itextpdf.bouncycastleconnector.BouncyCastleFactoryCreator;\n", "import com.itextpdf.commons.bouncycastle.IBouncyCastleFactory;\n", "import com.itextpdf.kernel.pdf.DocumentRevision;\n", "import com.itextpdf.kernel.pdf.PdfDocument;\n", "import com.itextpdf.kernel.pdf.PdfName;\n", "import com.itextpdf.kernel.pdf.PdfReader;\n", "import com.itextpdf.kernel.pdf.PdfRevisionsReader;\n", "import com.itextpdf.signatures.AccessPermissions;\n", "import com.itextpdf.signatures.validation.v1.context.CertificateSource;\n", "import com.itextpdf.signatures.validation.v1.context.CertificateSources;\n", "import com.itextpdf.signatures.validation.v1.context.TimeBasedContext;\n", "import com.itextpdf.signatures.validation.v1.context.ValidationContext;\n", "import com.itextpdf.signatures.validation.v1.context.ValidatorContext;\n", "import com.itextpdf.signatures.validation.v1.context.ValidatorContexts;\n", "import com.itextpdf.signatures.validation.v1.report.ReportItem.ReportItemStatus;\n", "import com.itextpdf.signatures.validation.v1.report.ValidationReport;\n", "import com.itextpdf.signatures.validation.v1.report.ValidationReport.ValidationResult;\n", "import com.itextpdf.test.ExtendedITextTest;\n", "import com.itextpdf.test.annotations.type.BouncyCastleUnitTest;\n", "\n", "import java.io.IOException;\n", "import java.security.Security;\n", "import java.util.Arrays;\n", "import java.util.List;\n", "\n", "import org.junit.Before;\n", "import org.junit.BeforeClass;\n", "import org.junit.Test;\n", "import org.junit.experimental.categories.Category;\n", "import org.junit.runner.RunWith;\n", "import org.junit.runners.Parameterized;\n", "\n", "@RunWith(Parameterized.class)\n", "@Category(BouncyCastleUnitTest.class)\n", "public class DocumentRevisionsValidatorTest extends ExtendedITextTest {\n", "    private static final String SOURCE_FOLDER = \"./src/test/resources/com/itextpdf/signatures/validation/v1/DocumentRevisionsValidatorTest/\";\n", "\n", "    private static final IBouncyCastleFactory FACTORY = BouncyCastleFactoryCreator.getFactory();\n", "    private ValidatorChainBuilder builder;\n", "    private final ValidationContext validationContext = new ValidationContext(\n", "            ValidatorContext.DOCUMENT_REVISIONS_VALIDATOR, CertificateSource.SIGNER_CERT, TimeBasedContext.PRESENT);\n", "    private final boolean continueValidationAfterFail;\n", "\n", "    @BeforeClass\n", "    public static void before() {\n", "        Security.addProvider(FACTORY.getProvider());\n", "    }\n", "\n", "    @Before\n", "    public void setUp() {\n", "        builder = new ValidatorChainBuilder();\n", "        builder.getProperties().setContinueAfterFailure(ValidatorContexts.all(), CertificateSources.all(), continueValidationAfterFail);\n", "    }\n", "\n", "    public DocumentRevisionsValidatorTest(Object continueValidationAfterFail) {\n", "        this.continueValidationAfterFail = (boolean) continueValidationAfterFail;\n", "    }\n", "\n", "    @Parameterized.Parameters(name = \"Continue validation after failure: {0}\")\n", "    public static Iterable<Object[]> createParameters() {\n", "        return Arrays.asList(new Object[] {false}, new Object[] {true});\n", "    }\n", "\n", "    @Test\n", "    public void multipleRevisionsDocumentLevel1Test() throws IOException {\n", "        try (PdfDocument document = new PdfDocument(new PdfReader(SOURCE_FOLDER + \"multipleRevisionsDocument.pdf\"))) {\n", "            DocumentRevisionsValidator validator = builder.buildDocumentRevisionsValidator();\n", "            validator.setAccessPermissions(AccessPermissions.NO_CHANGES_PERMITTED);\n", "            PdfRevisionsReader revisionsReader = new PdfRevisionsReader(document.getReader());\n", "            List<DocumentRevision> documentRevisions = revisionsReader.getAllRevisions();\n", "\n", "            ValidationReport validationReport = new ValidationReport();\n", "            validator.validateRevision(documentRevisions.get(0), documentRevisions.get(1), document, validationReport, validationContext);\n", "\n", "            // Between these two revisions DSS and timestamp are added, which is allowed,\n", "            // but there is unused entry in the xref table, which is an itext signature generation artifact.\n", "            AssertValidationReport.assertThat(validationReport, a -> a.hasStatus(ValidationResult.VALID)\n", "                    .hasNumberOfFailures(0).hasNumberOfLogs(1)\n", "                    .hasLogItem(l -> l.withCheckName(DocumentRevisionsValidator.DOC_MDP_CHECK)\n", "                            .withMessage(DocumentRevisionsValidator.UNEXPECTED_ENTRY_IN_XREF, i -> 27)\n", "                            .withStatus(ReportItemStatus.INFO)));\n", "\n", "            validationReport = new ValidationReport();\n", "            validator.validateRevision(documentRevisions.get(1), documentRevisions.get(2), document, validationReport, validationContext);\n", "\n", "            // Between these two revisions only DSS is updated, which is allowed.\n", "            AssertValidationReport.assertThat(validationReport, a -> a.hasStatus(ValidationResult.VALID));\n", "        }\n", "    }\n", "\n", "    @Test\n", "    public void hugeDocumentTest() throws IOException {\n", "        try (PdfDocument document = new PdfDocument(new PdfReader(SOURCE_FOLDER + \"hugeDocument.pdf\"))) {\n", "            DocumentRevisionsValidator validator = builder.buildDocumentRevisionsValidator();\n", "            validator.setAccessPermissions(AccessPermissions.NO_CHANGES_PERMITTED);\n", "            PdfRevisionsReader revisionsReader = new PdfRevisionsReader(document.getReader());\n", "            List<DocumentRevision> documentRevisions = revisionsReader.getAllRevisions();\n", "\n", "            ValidationReport validationReport = new ValidationReport();\n", "            validator.validateRevision(documentRevisions.get(0), documentRevisions.get(1), document, validationReport, validationContext);\n", "\n", "            AssertValidationReport.assertThat(validationReport, a -> a.hasStatus(ValidationResult.VALID));\n", "        }\n", "    }\n", "\n", "    @Test\n", "    public void extensionsModificationsTest() throws IOException {\n", "        try (PdfDocument document = new PdfDocument(new PdfReader(SOURCE_FOLDER + \"extensionsModifications.pdf\"))) {\n", "            DocumentRevisionsValidator validator = builder.buildDocumentRevisionsValidator();\n", "            validator.setAccessPermissions(AccessPermissions.NO_CHANGES_PERMITTED);\n", "            PdfRevisionsReader revisionsReader = new PdfRevisionsReader(document.getReader());\n", "            List<DocumentRevision> documentRevisions = revisionsReader.getAllRevisions();\n", "\n", "            ValidationReport validationReport = new ValidationReport();\n", "            validator.validateRevision(documentRevisions.get(0), documentRevisions.get(1), document, validationReport, validationContext);\n", "\n", "            AssertValidationReport.assertThat(validationReport, a -> a.hasStatus(ValidationResult.VALID));\n", "\n", "            validationReport = new ValidationReport();\n", "            validator.validateRevision(documentRevisions.get(1), documentRevisions.get(2), document, validationReport, validationContext);\n", "\n", "            AssertValidationReport.assertThat(validationReport, a -> a.hasStatus(ValidationResult.INVALID)\n", "                    .hasNumberOfFailures(1).hasNumberOfLogs(1)\n", "                    .hasLogItem(l -> l.withCheckName(DocumentRevisionsValidator.DOC_MDP_CHECK)\n", "                            .withMessage(DocumentRevisionsValidator.DEVELOPER_EXTENSION_REMOVED, i -> PdfName.ESIC)\n", "                            .withStatus(ReportItemStatus.INVALID)));\n", "\n", "            validationReport = new ValidationReport();\n", "            validator.validateRevision(documentRevisions.get(2), documentRevisions.get(3), document, validationReport, validationContext);\n", "\n", "            AssertValidationReport.assertThat(validationReport, a -> a.hasStatus(ValidationResult.INVALID)\n", "                    .hasNumberOfFailures(1).hasNumberOfLogs(1)\n", "                    .hasLogItem(l -> l.withCheckName(DocumentRevisionsValidator.DOC_MDP_CHECK)\n", "                            .withMessage(DocumentRevisionsValidator.EXTENSION_LEVEL_DECREASED, i -> PdfName.ESIC)\n", "                            .withStatus(ReportItemStatus.INVALID)));\n", "\n", "\n", "            validationReport = new ValidationReport();\n", "            validator.validateRevision(documentRevisions.get(3), documentRevisions.get(4), document, validationReport, validationContext);\n", "\n", "            AssertValidationReport.assertThat(validationReport, a -> a.hasStatus(ValidationResult.INVALID)\n", "                    .hasNumberOfFailures(1).hasNumberOfLogs(1)\n", "                    .hasLogItem(l -> l.withCheckName(DocumentRevisionsValidator.DOC_MDP_CHECK)\n", "                            .withMessage(DocumentRevisionsValidator.DEVELOPER_EXTENSION_REMOVED, i -> PdfName.ESIC)\n", "                            .withStatus(ReportItemStatus.INVALID)));\n", "\n", "            validationReport = new ValidationReport();\n", "            validator.validateRevision(documentRevisions.get(4), documentRevisions.get(5), document, validationReport, validationContext);\n", "\n", "            AssertValidationReport.assertThat(validationReport, a -> a.hasStatus(ValidationResult.INVALID)\n", "                    .hasNumberOfFailures(1).hasNumberOfLogs(1)\n", "                    .hasLogItem(l -> l.withCheckName(DocumentRevisionsValidator.DOC_MDP_CHECK)\n", "                            .withMessage(DocumentRevisionsValidator.EXTENSIONS_REMOVED)\n", "                            .withStatus(ReportItemStatus.INVALID)));\n", "        }\n", "    }\n", "\n", "    @Test\n", "    public void completelyInvalidDocumentTest() throws IOException {\n", "        try (PdfDocument document = new PdfDocument(new PdfReader(SOURCE_FOLDER + \"completelyInvalidDocument.pdf\"))) {\n", "            DocumentRevisionsValidator validator = builder.buildDocumentRevisionsValidator();\n", "            validator.setAccessPermissions(AccessPermissions.NO_CHANGES_PERMITTED);\n", "            PdfRevisionsReader revisionsReader = new PdfRevisionsReader(document.getReader());\n", "            List<DocumentRevision> documentRevisions = revisionsReader.getAllRevisions();\n", "\n", "            ValidationReport validationReport = new ValidationReport();\n", "            validator.validateRevision(documentRevisions.get(0), documentRevisions.get(1), document, validationReport, validationContext);\n", "\n", "            AssertValidationReport.assertThat(validationReport, a -> a.hasStatus(ValidationResult.INVALID)\n", "                    .hasNumberOfFailures(1).hasNumberOfLogs(1)\n", "                    .hasLogItem(l -> l.withCheckName(DocumentRevisionsValidator.DOC_MDP_CHECK)\n", "                            .withMessage(DocumentRevisionsValidator.PAGES_MODIFIED)\n", "                            .withStatus(ReportItemStatus.INVALID)));\n", "        }\n", "    }\n", "\n", "    @Test\n", "    public void makeFontDirectAndIndirectTest() throws IOException {\n", "        try (PdfDocument document = new PdfDocument(new PdfReader(SOURCE_FOLDER + \"makeFontDirectAndIndirect.pdf\"))) {\n", "            DocumentRevisionsValidator validator = builder.buildDocumentRevisionsValidator();\n", "            PdfRevisionsReader revisionsReader = new PdfRevisionsReader(document.getReader());\n", "            validator.setAccessPermissions(AccessPermissions.NO_CHANGES_PERMITTED);\n", "            List<DocumentRevision> documentRevisions = revisionsReader.getAllRevisions();\n", "\n", "            ValidationReport validationReport = new ValidationReport();\n", "            validator.validateRevision(documentRevisions.get(0), documentRevisions.get(1), document, validationReport, validationContext);\n", "\n", "            // Adobe Acrobat doesn't complain about such change. We consider this incorrect.\n", "            AssertValidationReport.assertThat(validationReport, a -> a.hasStatus(ValidationResult.INVALID)\n", "                    .hasNumberOfFailures(2).hasNumberOfLogs(2)\n", "                    .hasLogItem(l -> l.withCheckName(DocumentRevisionsValidator.DOC_MDP_CHECK)\n", "                            .withMessage(DocumentRevisionsValidator.FIELD_REMOVED, i -> \"Signature1\")\n", "                            .withStatus(ReportItemStatus.INVALID))\n", "                    .hasLogItem(l -> l.withCheckName(DocumentRevisionsValidator.DOC_MDP_CHECK)\n", "                            .withMessage(DocumentRevisionsValidator.NOT_ALLOWED_ACROFORM_CHANGES)\n", "                            .withStatus(ReportItemStatus.INVALID)));\n", "\n", "            validationReport = new ValidationReport();\n", "            validator.validateRevision(documentRevisions.get(1), documentRevisions.get(2), document, validationReport, validationContext);\n", "\n", "            // Adobe Acrobat doesn't complain about such change. We consider this incorrect.\n", "            AssertValidationReport.assertThat(validationReport, a -> a.hasStatus(ValidationResult.INVALID)\n", "                    .hasNumberOfFailures(2).hasNumberOfLogs(2)\n", "                    .hasLogItem(l -> l.withCheckName(DocumentRevisionsValidator.DOC_MDP_CHECK)\n", "                            .withMessage(DocumentRevisionsValidator.FIELD_REMOVED, i -> \"Signature1\")\n", "                            .withStatus(ReportItemStatus.INVALID))\n", "                    .hasLogItem(l -> l.withCheckName(DocumentRevisionsValidator.DOC_MDP_CHECK)\n", "                            .withMessage(DocumentRevisionsValidator.NOT_ALLOWED_ACROFORM_CHANGES)\n", "                            .withStatus(ReportItemStatus.INVALID)));\n", "        }\n", "    }\n", "\n", "    @Test\n", "    public void randomEntryAddedTest() throws IOException {\n", "        try (PdfDocument document = new PdfDocument(new PdfReader(SOURCE_FOLDER + \"randomEntryAdded.pdf\"))) {\n", "            DocumentRevisionsValidator validator = builder.buildDocumentRevisionsValidator();\n", "            validator.setAccessPermissions(AccessPermissions.NO_CHANGES_PERMITTED);\n", "            PdfRevisionsReader revisionsReader = new PdfRevisionsReader(document.getReader());\n", "            List<DocumentRevision> documentRevisions = revisionsReader.getAllRevisions();\n", "\n", "            ValidationReport validationReport = new ValidationReport();\n", "            validator.validateRevision(documentRevisions.get(0), documentRevisions.get(1), document, validationReport, validationContext);\n", "\n", "            // Adobe Acrobat doesn't complain about such change. We consider this incorrect.\n", "            AssertValidationReport.assertThat(validationReport, a -> a.hasStatus(ValidationResult.INVALID)\n", "                    .hasNumberOfFailures(1).hasNumberOfLogs(1)\n", "                    .hasLogItem(l -> l.withCheckName(DocumentRevisionsValidator.DOC_MDP_CHECK)\n", "                            .withMessage(DocumentRevisionsValidator.NOT_ALLOWED_CATALOG_CHANGES)\n", "                            .withStatus(ReportItemStatus.INVALID)));\n", "        }\n", "    }\n", "\n", "    @Test\n", "    public void randomEntryWithoutUsageTest() throws IOException {\n", "        try (PdfDocument document = new PdfDocument(new PdfReader(SOURCE_FOLDER + \"randomEntryWithoutUsage.pdf\"))) {\n", "            DocumentRevisionsValidator validator = builder.buildDocumentRevisionsValidator()\n", "                    .setAccessPermissions(AccessPermissions.NO_CHANGES_PERMITTED)\n", "                    .setUnexpectedXrefChangesStatus(ReportItemStatus.INVALID);\n", "            PdfRevisionsReader revisionsReader = new PdfRevisionsReader(document.getReader());\n", "            List<DocumentRevision> documentRevisions = revisionsReader.getAllRevisions();\n", "\n", "            ValidationReport validationReport = new ValidationReport();\n", "            validator.validateRevision(documentRevisions.get(0), documentRevisions.get(1), document, validationReport, validationContext);\n", "\n", "            // Adobe Acrobat doesn't complain about such change. We consider this incorrect.\n", "            AssertValidationReport.assertThat(validationReport, a -> a.hasStatus(ValidationResult.INVALID)\n", "                    .hasNumberOfFailures(1).hasNumberOfLogs(1)\n", "                    .hasLogItem(l -> l.withCheckName(DocumentRevisionsValidator.DOC_MDP_CHECK)\n", "                            .withMessage(DocumentRevisionsValidator.UNEXPECTED_ENTRY_IN_XREF, i -> 16)\n", "                            .withStatus(ReportItemStatus.INVALID)));\n", "        }\n", "    }\n", "\n", "    @Test\n", "    public void changeExistingFontTest() throws IOException {\n", "        try (PdfDocument document = new PdfDocument(new PdfReader(SOURCE_FOLDER + \"changeExistingFont.pdf\"))) {\n", "            DocumentRevisionsValidator validator = builder.buildDocumentRevisionsValidator();\n", "            validator.setAccessPermissions(AccessPermissions.NO_CHANGES_PERMITTED);\n", "            PdfRevisionsReader revisionsReader = new PdfRevisionsReader(document.getReader());\n", "            List<DocumentRevision> documentRevisions = revisionsReader.getAllRevisions();\n", "\n", "            ValidationReport validationReport = new ValidationReport();\n", "            validator.validateRevision(documentRevisions.get(0), documentRevisions.get(1), document, validationReport, validationContext);\n", "\n", "            AssertValidationReport.assertThat(validationReport, a -> a.hasStatus(ValidationResult.INVALID)\n", "                    .hasNumberOfFailures(1).hasNumberOfLogs(1)\n", "                    .hasLogItem(l -> l.withCheckName(DocumentRevisionsValidator.DOC_MDP_CHECK)\n", "                            .withMessage(DocumentRevisionsValidator.PAGE_MODIFIED)\n", "                            .withStatus(ReportItemStatus.INVALID)));\n", "        }\n", "    }\n", "\n", "    @Test\n", "    public void changeExistingFontAndAddAsDssTest() throws IOException {\n", "        try (PdfDocument document = new PdfDocument(new PdfReader(SOURCE_FOLDER + \"changeExistingFontAndAddAsDss.pdf\"))) {\n", "            DocumentRevisionsValidator validator = builder.buildDocumentRevisionsValidator();\n", "            validator.setAccessPermissions(AccessPermissions.NO_CHANGES_PERMITTED);\n", "            PdfRevisionsReader revisionsReader = new PdfRevisionsReader(document.getReader());\n", "            List<DocumentRevision> documentRevisions = revisionsReader.getAllRevisions();\n", "\n", "            ValidationReport validationReport = new ValidationReport();\n", "            validator.validateRevision(documentRevisions.get(0), documentRevisions.get(1), document, validationReport, validationContext);\n", "\n", "            // Adobe Acrobat doesn't complain about such change. We consider this incorrect.\n", "            AssertValidationReport.assertThat(validationReport, a -> a.hasStatus(ValidationResult.INVALID)\n", "                    .hasNumberOfFailures(1).hasNumberOfLogs(1)\n", "                    .hasLogItem(l -> l.withCheckName(DocumentRevisionsValidator.DOC_MDP_CHECK)\n", "                            .withMessage(DocumentRevisionsValidator.PAGE_MODIFIED)\n", "                            .withStatus(ReportItemStatus.INVALID)));\n", "        }\n", "    }\n", "\n", "    @Test\n", "    public void fillInFieldAtLevel1Test() throws IOException {\n", "        try (PdfDocument document = new PdfDocument(new PdfReader(SOURCE_FOLDER + \"fillInField.pdf\"))) {\n", "            DocumentRevisionsValidator validator = builder.buildDocumentRevisionsValidator();\n", "            validator.setAccessPermissions(AccessPermissions.NO_CHANGES_PERMITTED);\n", "            PdfRevisionsReader revisionsReader = new PdfRevisionsReader(document.getReader());\n", "            List<DocumentRevision> documentRevisions = revisionsReader.getAllRevisions();\n", "\n", "            ValidationReport validationReport = new ValidationReport();\n", "            validator.validateRevision(documentRevisions.get(0), documentRevisions.get(1), document, validationReport, validationContext);\n", "\n", "            // Between these two revisions forms were filled in, it is not allowed at docMDP level 1.\n", "            AssertValidationReport.assertThat(validationReport, a -> a.hasStatus(ValidationResult.INVALID)\n", "                    .hasNumberOfFailures(2).hasNumberOfLogs(2)\n", "                    .hasLogItem(l -> l.withCheckName(DocumentRevisionsValidator.DOC_MDP_CHECK)\n", "                            .withMessage(DocumentRevisionsValidator.FIELD_REMOVED, i -> \"input\")\n", "                            .withStatus(ReportItemStatus.INVALID))\n", "                    .hasLogItem(l -> l.withCheckName(DocumentRevisionsValidator.DOC_MDP_CHECK)\n", "                            .withMessage(DocumentRevisionsValidator.NOT_ALLOWED_ACROFORM_CHANGES)\n", "                            .withStatus(ReportItemStatus.INVALID)));\n", "        }\n", "    }\n", "\n", "    @Test\n", "    public void multipleRevisionsDocumentLevel2Test() throws IOException {\n", "        try (PdfDocument document = new PdfDocument(new PdfReader(SOURCE_FOLDER + \"multipleRevisionsDocument2.pdf\"))) {\n", "            DocumentRevisionsValidator validator = builder.buildDocumentRevisionsValidator();\n", "            validator.setAccessPermissions(AccessPermissions.FORM_FIELDS_MODIFICATION);\n", "            PdfRevisionsReader revisionsReader = new PdfRevisionsReader(document.getReader());\n", "            List<DocumentRevision> documentRevisions = revisionsReader.getAllRevisions();\n", "\n", "            ValidationReport validationReport = new ValidationReport();\n", "            validator.validateRevision(documentRevisions.get(0), documentRevisions.get(1), document, validationReport, validationContext);\n", "\n", "            // Between these two revisions forms were filled in, it is allowed.\n", "            AssertValidationReport.assertThat(validationReport, a -> a.hasStatus(ValidationResult.VALID)\n", "                    .hasNumberOfFailures(0).hasNumberOfLogs(0));\n", "\n", "            validationReport = new ValidationReport();\n", "            validator.validateRevision(documentRevisions.get(1), documentRevisions.get(2), document, validationReport, validationContext);\n", "\n", "            // Between these two revisions existing signature field was signed, it is allowed.\n", "            AssertValidationReport.assertThat(validationReport, a -> a.hasStatus(ValidationResult.VALID)\n", "                    .hasNumberOfFailures(0).hasNumberOfLogs(0));\n", "\n", "            validationReport = new ValidationReport();\n", "            validator.validateRevision(documentRevisions.get(2), documentRevisions.get(3), document, validationReport, validationContext);\n", "\n", "            // Between these two revisions newly added signature field was signed, it is allowed.\n", "            AssertValidationReport.assertThat(validationReport, a -> a.hasStatus(ValidationResult.VALID)\n", "                    .hasNumberOfFailures(0).hasNumberOfLogs(0));\n", "        }\n", "    }\n", "\n", "    @Test\n", "    public void removePermissionsTest() throws IOException {\n", "        try (PdfDocument document = new PdfDocument(new PdfReader(SOURCE_FOLDER + \"removePermissions.pdf\"))) {\n", "            DocumentRevisionsValidator validator = builder.buildDocumentRevisionsValidator();\n", "            validator.setAccessPermissions(AccessPermissions.FORM_FIELDS_MODIFICATION);\n", "            PdfRevisionsReader revisionsReader = new PdfRevisionsReader(document.getReader());\n", "            List<DocumentRevision> documentRevisions = revisionsReader.getAllRevisions();\n", "\n", "            ValidationReport validationReport = new ValidationReport();\n", "            validator.validateRevision(documentRevisions.get(documentRevisions.size() - 2),\n", "                    documentRevisions.get(documentRevisions.size() - 1), document, validationReport, validationContext);\n", "\n", "            // Between these two revisions /Perms key was removed, it is not allowed.\n", "            AssertValidationReport.assertThat(validationReport, a -> a.hasStatus(ValidationResult.INVALID)\n", "                    .hasNumberOfFailures(1).hasNumberOfLogs(1)\n", "                    .hasLogItem(l -> l.withCheckName(DocumentRevisionsValidator.DOC_MDP_CHECK)\n", "                            .withMessage(DocumentRevisionsValidator.PERMISSIONS_REMOVED)\n", "                            .withStatus(ReportItemStatus.INVALID)));\n", "        }\n", "    }\n", "\n", "    @Test\n", "    public void removeDSSTest() throws IOException {\n", "        try (PdfDocument document = new PdfDocument(new PdfReader(SOURCE_FOLDER + \"removeDSS.pdf\"))) {\n", "            DocumentRevisionsValidator validator = builder.buildDocumentRevisionsValidator();\n", "            validator.setAccessPermissions(AccessPermissions.FORM_FIELDS_MODIFICATION);\n", "            PdfRevisionsReader revisionsReader = new PdfRevisionsReader(document.getReader());\n", "            List<DocumentRevision> documentRevisions = revisionsReader.getAllRevisions();\n", "\n", "            ValidationReport validationReport = new ValidationReport();\n", "            validator.validateRevision(documentRevisions.get(documentRevisions.size() - 2),\n", "                    documentRevisions.get(documentRevisions.size() - 1), document, validationReport, validationContext);\n", "\n", "            // Between these two revisions /DSS key was removed, it is not allowed.\n", "            AssertValidationReport.assertThat(validationReport, a -> a.hasStatus(ValidationResult.INVALID)\n", "                    .hasNumberOfFailures(1).hasNumberOfLogs(1)\n", "                    .hasLogItem(l -> l.withCheckName(DocumentRevisionsValidator.DOC_MDP_CHECK)\n", "                            .withMessage(DocumentRevisionsValidator.DSS_REMOVED)\n", "                            .withStatus(ReportItemStatus.INVALID)));\n", "        }\n", "    }\n", "\n", "    @Test\n", "    public void removeAcroformTest() throws IOException {\n", "        try (PdfDocument document = new PdfDocument(new PdfReader(SOURCE_FOLDER + \"removeAcroform.pdf\"))) {\n", "            DocumentRevisionsValidator validator = builder.buildDocumentRevisionsValidator();\n", "            validator.setAccessPermissions(AccessPermissions.FORM_FIELDS_MODIFICATION);\n", "            PdfRevisionsReader revisionsReader = new PdfRevisionsReader(document.getReader());\n", "            List<DocumentRevision> documentRevisions = revisionsReader.getAllRevisions();\n", "\n", "            ValidationReport validationReport = new ValidationReport();\n", "            validator.validateRevision(documentRevisions.get(documentRevisions.size() - 2),\n", "                    documentRevisions.get(documentRevisions.size() - 1), document, validationReport, validationContext);\n", "\n", "            // Between these two revisions /Acroform key was removed, it is not allowed.\n", "            AssertValidationReport.assertThat(validationReport, a -> a.hasStatus(ValidationResult.INVALID)\n", "                    .hasNumberOfFailures(1).hasNumberOfLogs(1)\n", "                    .hasLogItem(l -> l.withCheckName(DocumentRevisionsValidator.DOC_MDP_CHECK)\n", "                            .withMessage(DocumentRevisionsValidator.ACROFORM_REMOVED)\n", "                            .withStatus(ReportItemStatus.INVALID)));\n", "        }\n", "    }\n", "\n", "    @Test\n", "    public void removeFieldTest() throws IOException {\n", "        try (PdfDocument document = new PdfDocument(new PdfReader(SOURCE_FOLDER + \"removeField.pdf\"))) {\n", "            DocumentRevisionsValidator validator = builder.buildDocumentRevisionsValidator();\n", "            validator.setAccessPermissions(AccessPermissions.FORM_FIELDS_MODIFICATION);\n", "            PdfRevisionsReader revisionsReader = new PdfRevisionsReader(document.getReader());\n", "            List<DocumentRevision> documentRevisions = revisionsReader.getAllRevisions();\n", "\n", "            ValidationReport validationReport = new ValidationReport();\n", "            validator.validateRevision(documentRevisions.get(documentRevisions.size() - 2),\n", "                    documentRevisions.get(documentRevisions.size() - 1), document, validationReport, validationContext);\n", "\n", "            // Between these two revisions field was removed, it is not allowed.\n", "            AssertValidationReport.assertThat(validationReport, a -> a.hasStatus(ValidationResult.INVALID)\n", "                    .hasNumberOfFailures(1).hasNumberOfLogs(1)\n", "                    .hasLogItem(l -> l.withCheckName(DocumentRevisionsValidator.DOC_MDP_CHECK)\n", "                            .withMessage(DocumentRevisionsValidator.NOT_ALLOWED_ACROFORM_CHANGES)\n", "                            .withStatus(ReportItemStatus.INVALID)));\n", "        }\n", "    }\n", "\n", "    @Test\n", "    public void renameFieldTest() throws IOException {\n", "        try (PdfDocument document = new PdfDocument(new PdfReader(SOURCE_FOLDER + \"renameField.pdf\"))) {\n", "            DocumentRevisionsValidator validator = builder.buildDocumentRevisionsValidator();\n", "            validator.setAccessPermissions(AccessPermissions.FORM_FIELDS_MODIFICATION);\n", "            PdfRevisionsReader revisionsReader = new PdfRevisionsReader(document.getReader());\n", "            List<DocumentRevision> documentRevisions = revisionsReader.getAllRevisions();\n", "\n", "            ValidationReport validationReport = new ValidationReport();\n", "            validator.validateRevision(documentRevisions.get(documentRevisions.size() - 2),\n", "                    documentRevisions.get(documentRevisions.size() - 1), document, validationReport, validationContext);\n", "\n", "            // Between these two revisions field was renamed, it is not allowed.\n", "            AssertValidationReport.assertThat(validationReport, a -> a.hasStatus(ValidationResult.INVALID)\n", "                    .hasNumberOfFailures(2).hasNumberOfLogs(2)\n", "                    .hasLogItem(l -> l.withCheckName(DocumentRevisionsValidator.DOC_MDP_CHECK)\n", "                            .withMessage(DocumentRevisionsValidator.FIELD_REMOVED, i -> \"input\")\n", "                            .withStatus(ReportItemStatus.INVALID))\n", "                    .hasLogItem(l -> l.withCheckName(DocumentRevisionsValidator.DOC_MDP_CHECK)\n", "                            .withMessage(DocumentRevisionsValidator.NOT_ALLOWED_ACROFORM_CHANGES)\n", "                            .withStatus(ReportItemStatus.INVALID)));\n", "        }\n", "    }\n", "\n", "    @Test\n", "    public void addTextFieldTest() throws IOException {\n", "        try (PdfDocument document = new PdfDocument(new PdfReader(SOURCE_FOLDER + \"addTextField.pdf\"))) {\n", "            DocumentRevisionsValidator validator = builder.buildDocumentRevisionsValidator();\n", "            validator.setAccessPermissions(AccessPermissions.FORM_FIELDS_MODIFICATION);\n", "            PdfRevisionsReader revisionsReader = new PdfRevisionsReader(document.getReader());\n", "            List<DocumentRevision> documentRevisions = revisionsReader.getAllRevisions();\n", "\n", "            ValidationReport validationReport = new ValidationReport();\n", "            validator.validateRevision(documentRevisions.get(documentRevisions.size() - 2),\n", "                    documentRevisions.get(documentRevisions.size() - 1), document, validationReport, validationContext);\n", "\n", "            // Between these two revisions new field was added, it is not allowed.\n", "            AssertValidationReport.assertThat(validationReport, a -> a.hasStatus(ValidationResult.INVALID)\n", "                    .hasNumberOfFailures(2).hasNumberOfLogs(2)\n", "                    .hasLogItem(l -> l.withCheckName(DocumentRevisionsValidator.DOC_MDP_CHECK)\n", "                            .withMessage(DocumentRevisionsValidator.UNEXPECTED_FORM_FIELD, i -> \"text\")\n", "                            .withStatus(ReportItemStatus.INVALID))\n", "                    .hasLogItem(l -> l.withCheckName(DocumentRevisionsValidator.DOC_MDP_CHECK)\n", "                            .withMessage(DocumentRevisionsValidator.NOT_ALLOWED_ACROFORM_CHANGES)\n", "                            .withStatus(ReportItemStatus.INVALID)));\n", "        }\n", "    }\n", "\n", "    @Test\n", "    public void addUnsignedSignatureFieldTest() throws IOException {\n", "        try (PdfDocument document = new PdfDocument(new PdfReader(SOURCE_FOLDER + \"addUnsignedSignatureField.pdf\"))) {\n", "            DocumentRevisionsValidator validator = builder.buildDocumentRevisionsValidator();\n", "            validator.setAccessPermissions(AccessPermissions.FORM_FIELDS_MODIFICATION);\n", "            PdfRevisionsReader revisionsReader = new PdfRevisionsReader(document.getReader());\n", "            List<DocumentRevision> documentRevisions = revisionsReader.getAllRevisions();\n", "\n", "            ValidationReport validationReport = new ValidationReport();\n", "            validator.validateRevision(documentRevisions.get(documentRevisions.size() - 2),\n", "                    documentRevisions.get(documentRevisions.size() - 1), document, validationReport, validationContext);\n", "\n", "            // Between these two revisions new unsigned signature field was added, it is not allowed.\n", "            AssertValidationReport.assertThat(validationReport, a -> a.hasStatus(ValidationResult.INVALID)\n", "                    .hasNumberOfFailures(2).hasNumberOfLogs(2)\n", "                    .hasLogItem(l -> l.withCheckName(DocumentRevisionsValidator.DOC_MDP_CHECK)\n", "                            .withMessage(DocumentRevisionsValidator.UNEXPECTED_FORM_FIELD, i -> \"signature\")\n", "                            .withStatus(ReportItemStatus.INVALID))\n", "                    .hasLogItem(l -> l.withCheckName(DocumentRevisionsValidator.DOC_MDP_CHECK)\n", "                            .withMessage(DocumentRevisionsValidator.NOT_ALLOWED_ACROFORM_CHANGES)\n", "                            .withStatus(ReportItemStatus.INVALID)));\n", "        }\n", "    }\n", "\n", "    @Test\n", "    public void brokenSignatureFieldDictionaryTest() throws IOException {\n", "        try (PdfDocument document = new PdfDocument(new PdfReader(SOURCE_FOLDER + \"brokenSignatureFieldDictionary.pdf\"))) {\n", "            DocumentRevisionsValidator validator = builder.buildDocumentRevisionsValidator();\n", "            validator.setAccessPermissions(AccessPermissions.FORM_FIELDS_MODIFICATION);\n", "            PdfRevisionsReader revisionsReader = new PdfRevisionsReader(document.getReader());\n", "            List<DocumentRevision> documentRevisions = revisionsReader.getAllRevisions();\n", "\n", "            ValidationReport validationReport = new ValidationReport();\n", "            validator.validateRevision(documentRevisions.get(documentRevisions.size() - 2),\n", "                    documentRevisions.get(documentRevisions.size() - 1), document, validationReport, validationContext);\n", "\n", "            // Between these two revisions signature value was replaced by text, it is not allowed.\n", "            AssertValidationReport.assertThat(validationReport, a -> a.hasStatus(ValidationResult.INVALID)\n", "                    .hasNumberOfFailures(3).hasNumberOfLogs(3)\n", "                    .hasLogItem(l -> l.withCheckName(DocumentRevisionsValidator.DOC_MDP_CHECK)\n", "                            .withMessage(DocumentRevisionsValidator.SIGNATURE_MODIFIED, i -> \"Signature1\")\n", "                            .withStatus(ReportItemStatus.INVALID))\n", "                    .hasLogItem(l -> l.withCheckName(DocumentRevisionsValidator.DOC_MDP_CHECK)\n", "                            .withMessage(DocumentRevisionsValidator.FIELD_REMOVED, i -> \"Signature1\")\n", "                            .withStatus(ReportItemStatus.INVALID))\n", "                    .hasLogItem(l -> l.withCheckName(DocumentRevisionsValidator.DOC_MDP_CHECK)\n", "                            .withMessage(DocumentRevisionsValidator.NOT_ALLOWED_ACROFORM_CHANGES)\n", "                            .withStatus(ReportItemStatus.INVALID)));\n", "        }\n", "    }\n", "\n", "    @Test\n", "    public void modifyPageAnnotsTest() throws IOException {\n", "        try (PdfDocument document = new PdfDocument(new PdfReader(SOURCE_FOLDER + \"modifyPageAnnots.pdf\"))) {\n", "            DocumentRevisionsValidator validator = builder.buildDocumentRevisionsValidator();\n", "            validator.setAccessPermissions(AccessPermissions.FORM_FIELDS_MODIFICATION);\n", "            PdfRevisionsReader revisionsReader = new PdfRevisionsReader(document.getReader());\n", "            List<DocumentRevision> documentRevisions = revisionsReader.getAllRevisions();\n", "\n", "            ValidationReport validationReport = new ValidationReport();\n", "            validator.validateRevision(documentRevisions.get(documentRevisions.size() - 2),\n", "                    documentRevisions.get(documentRevisions.size() - 1), document, validationReport, validationContext);\n", "\n", "            // Between these two revisions circle annotation was added to the first page, it is not allowed.\n", "            AssertValidationReport.assertThat(validationReport, a -> a.hasStatus(ValidationResult.INVALID)\n", "                    .hasNumberOfFailures(1).hasNumberOfLogs(1)\n", "                    .hasLogItem(l -> l.withCheckName(DocumentRevisionsValidator.DOC_MDP_CHECK)\n", "                            .withMessage(DocumentRevisionsValidator.PAGE_ANNOTATIONS_MODIFIED)\n", "                            .withStatus(ReportItemStatus.INVALID)));\n", "        }\n", "    }\n", "\n", "    @Test\n", "    public void multipleRevisionsDocumentLevel3Test() throws IOException {\n", "        try (PdfDocument document = new PdfDocument(new PdfReader(SOURCE_FOLDER + \"multipleRevisionsDocument3.pdf\"))) {\n", "            DocumentRevisionsValidator validator = builder.buildDocumentRevisionsValidator();\n", "            validator.setAccessPermissions(AccessPermissions.ANNOTATION_MODIFICATION);\n", "            PdfRevisionsReader revisionsReader = new PdfRevisionsReader(document.getReader());\n", "            List<DocumentRevision> documentRevisions = revisionsReader.getAllRevisions();\n", "\n", "            ValidationReport validationReport = new ValidationReport();\n", "            validator.validateRevision(documentRevisions.get(0), documentRevisions.get(1), document, validationReport, validationContext);\n", "\n", "            // Between these two revisions annotations were added and deleted, text field was filled-in.\n", "            AssertValidationReport.assertThat(validationReport, a -> a.hasStatus(ValidationResult.VALID)\n", "                    .hasNumberOfFailures(0).hasNumberOfLogs(0));\n", "\n", "            validationReport = new ValidationReport();\n", "            validator.validateRevision(documentRevisions.get(1), documentRevisions.get(2), document, validationReport, validationContext);\n", "\n", "            // Between these two revisions existed annotations were modified, it is allowed.\n", "            AssertValidationReport.assertThat(validationReport, a -> a.hasStatus(ValidationResult.VALID)\n", "                    .hasNumberOfFailures(0).hasNumberOfLogs(0));\n", "        }\n", "    }\n", "}\n"], "method_lines_dic": {"DocumentRevisionsValidator::::setAccessPermissions(com.itextpdf.signatures.AccessPermissions)": [168, 171], "DocumentRevisionsValidator::::setUnexpectedXrefChangesStatus(com.itextpdf.signatures.validation.v1.report.ReportItem.ReportItemStatus)": [181, 184], "DocumentRevisionsValidator::::getAccessPermissions()": [311, 314], "DocumentRevisionsValidator::::stopValidation(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext)": [323, 326], "DocumentRevisionsValidator::::updateCertificationSignatureAccessPermissions(com.itextpdf.signatures.PdfSignature,com.itextpdf.signatures.validation.v1.report.ValidationReport)": [413, 444], "DocumentRevisionsValidator::::isCertificationSignature(com.itextpdf.signatures.PdfSignature)": [446, 462], "DocumentRevisionsValidator::::resetClassFields()": [476, 479]}, "test_method_lines_dic": {"DocumentRevisionsValidatorTest::::before()": [68, 71], "DocumentRevisionsValidatorTest::::setUp()": [73, 77], "DocumentRevisionsValidatorTest::::createParameters()": [83, 86], "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel1Test()": [88, 113], "DocumentRevisionsValidatorTest::::hugeDocumentTest()": [115, 128], "DocumentRevisionsValidatorTest::::extensionsModificationsTest()": [130, 180], "DocumentRevisionsValidatorTest::::completelyInvalidDocumentTest()": [182, 199], "DocumentRevisionsValidatorTest::::makeFontDirectAndIndirectTest()": [201, 235], "DocumentRevisionsValidatorTest::::randomEntryAddedTest()": [237, 255], "DocumentRevisionsValidatorTest::::randomEntryWithoutUsageTest()": [257, 276], "DocumentRevisionsValidatorTest::::changeExistingFontTest()": [278, 295], "DocumentRevisionsValidatorTest::::changeExistingFontAndAddAsDssTest()": [297, 315], "DocumentRevisionsValidatorTest::::fillInFieldAtLevel1Test()": [317, 338], "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel2Test()": [340, 369], "DocumentRevisionsValidatorTest::::removePermissionsTest()": [371, 390], "DocumentRevisionsValidatorTest::::removeDSSTest()": [392, 411], "DocumentRevisionsValidatorTest::::removeAcroformTest()": [413, 432], "DocumentRevisionsValidatorTest::::removeFieldTest()": [434, 453], "DocumentRevisionsValidatorTest::::renameFieldTest()": [455, 477], "DocumentRevisionsValidatorTest::::addTextFieldTest()": [479, 501], "DocumentRevisionsValidatorTest::::addUnsignedSignatureFieldTest()": [503, 525], "DocumentRevisionsValidatorTest::::brokenSignatureFieldDictionaryTest()": [527, 552], "DocumentRevisionsValidatorTest::::modifyPageAnnotsTest()": [554, 573], "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel3Test()": [575, 597]}, "reverse_method_lines_dic": {"168": "DocumentRevisionsValidator::::setAccessPermissions(com.itextpdf.signatures.AccessPermissions)", "169": "DocumentRevisionsValidator::::setAccessPermissions(com.itextpdf.signatures.AccessPermissions)", "170": "DocumentRevisionsValidator::::setAccessPermissions(com.itextpdf.signatures.AccessPermissions)", "171": "DocumentRevisionsValidator::::setAccessPermissions(com.itextpdf.signatures.AccessPermissions)", "181": "DocumentRevisionsValidator::::setUnexpectedXrefChangesStatus(com.itextpdf.signatures.validation.v1.report.ReportItem.ReportItemStatus)", "182": "DocumentRevisionsValidator::::setUnexpectedXrefChangesStatus(com.itextpdf.signatures.validation.v1.report.ReportItem.ReportItemStatus)", "183": "DocumentRevisionsValidator::::setUnexpectedXrefChangesStatus(com.itextpdf.signatures.validation.v1.report.ReportItem.ReportItemStatus)", "184": "DocumentRevisionsValidator::::setUnexpectedXrefChangesStatus(com.itextpdf.signatures.validation.v1.report.ReportItem.ReportItemStatus)", "311": "DocumentRevisionsValidator::::getAccessPermissions()", "312": "DocumentRevisionsValidator::::getAccessPermissions()", "313": "DocumentRevisionsValidator::::getAccessPermissions()", "314": "DocumentRevisionsValidator::::getAccessPermissions()", "323": "DocumentRevisionsValidator::::stopValidation(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext)", "324": "DocumentRevisionsValidator::::stopValidation(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext)", "325": "DocumentRevisionsValidator::::stopValidation(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext)", "326": "DocumentRevisionsValidator::::stopValidation(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext)", "413": "DocumentRevisionsValidator::::updateCertificationSignatureAccessPermissions(com.itextpdf.signatures.PdfSignature,com.itextpdf.signatures.validation.v1.report.ValidationReport)", "414": "DocumentRevisionsValidator::::updateCertificationSignatureAccessPermissions(com.itextpdf.signatures.PdfSignature,com.itextpdf.signatures.validation.v1.report.ValidationReport)", "415": "DocumentRevisionsValidator::::updateCertificationSignatureAccessPermissions(com.itextpdf.signatures.PdfSignature,com.itextpdf.signatures.validation.v1.report.ValidationReport)", "416": "DocumentRevisionsValidator::::updateCertificationSignatureAccessPermissions(com.itextpdf.signatures.PdfSignature,com.itextpdf.signatures.validation.v1.report.ValidationReport)", "417": "DocumentRevisionsValidator::::updateCertificationSignatureAccessPermissions(com.itextpdf.signatures.PdfSignature,com.itextpdf.signatures.validation.v1.report.ValidationReport)", "418": "DocumentRevisionsValidator::::updateCertificationSignatureAccessPermissions(com.itextpdf.signatures.PdfSignature,com.itextpdf.signatures.validation.v1.report.ValidationReport)", "419": "DocumentRevisionsValidator::::updateCertificationSignatureAccessPermissions(com.itextpdf.signatures.PdfSignature,com.itextpdf.signatures.validation.v1.report.ValidationReport)", "420": "DocumentRevisionsValidator::::updateCertificationSignatureAccessPermissions(com.itextpdf.signatures.PdfSignature,com.itextpdf.signatures.validation.v1.report.ValidationReport)", "421": "DocumentRevisionsValidator::::updateCertificationSignatureAccessPermissions(com.itextpdf.signatures.PdfSignature,com.itextpdf.signatures.validation.v1.report.ValidationReport)", "422": "DocumentRevisionsValidator::::updateCertificationSignatureAccessPermissions(com.itextpdf.signatures.PdfSignature,com.itextpdf.signatures.validation.v1.report.ValidationReport)", "423": "DocumentRevisionsValidator::::updateCertificationSignatureAccessPermissions(com.itextpdf.signatures.PdfSignature,com.itextpdf.signatures.validation.v1.report.ValidationReport)", "424": "DocumentRevisionsValidator::::updateCertificationSignatureAccessPermissions(com.itextpdf.signatures.PdfSignature,com.itextpdf.signatures.validation.v1.report.ValidationReport)", "425": "DocumentRevisionsValidator::::updateCertificationSignatureAccessPermissions(com.itextpdf.signatures.PdfSignature,com.itextpdf.signatures.validation.v1.report.ValidationReport)", "426": "DocumentRevisionsValidator::::updateCertificationSignatureAccessPermissions(com.itextpdf.signatures.PdfSignature,com.itextpdf.signatures.validation.v1.report.ValidationReport)", "427": "DocumentRevisionsValidator::::updateCertificationSignatureAccessPermissions(com.itextpdf.signatures.PdfSignature,com.itextpdf.signatures.validation.v1.report.ValidationReport)", "428": "DocumentRevisionsValidator::::updateCertificationSignatureAccessPermissions(com.itextpdf.signatures.PdfSignature,com.itextpdf.signatures.validation.v1.report.ValidationReport)", "429": "DocumentRevisionsValidator::::updateCertificationSignatureAccessPermissions(com.itextpdf.signatures.PdfSignature,com.itextpdf.signatures.validation.v1.report.ValidationReport)", "430": "DocumentRevisionsValidator::::updateCertificationSignatureAccessPermissions(com.itextpdf.signatures.PdfSignature,com.itextpdf.signatures.validation.v1.report.ValidationReport)", "431": "DocumentRevisionsValidator::::updateCertificationSignatureAccessPermissions(com.itextpdf.signatures.PdfSignature,com.itextpdf.signatures.validation.v1.report.ValidationReport)", "432": "DocumentRevisionsValidator::::updateCertificationSignatureAccessPermissions(com.itextpdf.signatures.PdfSignature,com.itextpdf.signatures.validation.v1.report.ValidationReport)", "433": "DocumentRevisionsValidator::::updateCertificationSignatureAccessPermissions(com.itextpdf.signatures.PdfSignature,com.itextpdf.signatures.validation.v1.report.ValidationReport)", "434": "DocumentRevisionsValidator::::updateCertificationSignatureAccessPermissions(com.itextpdf.signatures.PdfSignature,com.itextpdf.signatures.validation.v1.report.ValidationReport)", "435": "DocumentRevisionsValidator::::updateCertificationSignatureAccessPermissions(com.itextpdf.signatures.PdfSignature,com.itextpdf.signatures.validation.v1.report.ValidationReport)", "436": "DocumentRevisionsValidator::::updateCertificationSignatureAccessPermissions(com.itextpdf.signatures.PdfSignature,com.itextpdf.signatures.validation.v1.report.ValidationReport)", "437": "DocumentRevisionsValidator::::updateCertificationSignatureAccessPermissions(com.itextpdf.signatures.PdfSignature,com.itextpdf.signatures.validation.v1.report.ValidationReport)", "438": "DocumentRevisionsValidator::::updateCertificationSignatureAccessPermissions(com.itextpdf.signatures.PdfSignature,com.itextpdf.signatures.validation.v1.report.ValidationReport)", "439": "DocumentRevisionsValidator::::updateCertificationSignatureAccessPermissions(com.itextpdf.signatures.PdfSignature,com.itextpdf.signatures.validation.v1.report.ValidationReport)", "440": "DocumentRevisionsValidator::::updateCertificationSignatureAccessPermissions(com.itextpdf.signatures.PdfSignature,com.itextpdf.signatures.validation.v1.report.ValidationReport)", "441": "DocumentRevisionsValidator::::updateCertificationSignatureAccessPermissions(com.itextpdf.signatures.PdfSignature,com.itextpdf.signatures.validation.v1.report.ValidationReport)", "442": "DocumentRevisionsValidator::::updateCertificationSignatureAccessPermissions(com.itextpdf.signatures.PdfSignature,com.itextpdf.signatures.validation.v1.report.ValidationReport)", "443": "DocumentRevisionsValidator::::updateCertificationSignatureAccessPermissions(com.itextpdf.signatures.PdfSignature,com.itextpdf.signatures.validation.v1.report.ValidationReport)", "444": "DocumentRevisionsValidator::::updateCertificationSignatureAccessPermissions(com.itextpdf.signatures.PdfSignature,com.itextpdf.signatures.validation.v1.report.ValidationReport)", "446": "DocumentRevisionsValidator::::isCertificationSignature(com.itextpdf.signatures.PdfSignature)", "447": "DocumentRevisionsValidator::::isCertificationSignature(com.itextpdf.signatures.PdfSignature)", "448": "DocumentRevisionsValidator::::isCertificationSignature(com.itextpdf.signatures.PdfSignature)", "449": "DocumentRevisionsValidator::::isCertificationSignature(com.itextpdf.signatures.PdfSignature)", "450": "DocumentRevisionsValidator::::isCertificationSignature(com.itextpdf.signatures.PdfSignature)", "451": "DocumentRevisionsValidator::::isCertificationSignature(com.itextpdf.signatures.PdfSignature)", "452": "DocumentRevisionsValidator::::isCertificationSignature(com.itextpdf.signatures.PdfSignature)", "453": "DocumentRevisionsValidator::::isCertificationSignature(com.itextpdf.signatures.PdfSignature)", "454": "DocumentRevisionsValidator::::isCertificationSignature(com.itextpdf.signatures.PdfSignature)", "455": "DocumentRevisionsValidator::::isCertificationSignature(com.itextpdf.signatures.PdfSignature)", "456": "DocumentRevisionsValidator::::isCertificationSignature(com.itextpdf.signatures.PdfSignature)", "457": "DocumentRevisionsValidator::::isCertificationSignature(com.itextpdf.signatures.PdfSignature)", "458": "DocumentRevisionsValidator::::isCertificationSignature(com.itextpdf.signatures.PdfSignature)", "459": "DocumentRevisionsValidator::::isCertificationSignature(com.itextpdf.signatures.PdfSignature)", "460": "DocumentRevisionsValidator::::isCertificationSignature(com.itextpdf.signatures.PdfSignature)", "461": "DocumentRevisionsValidator::::isCertificationSignature(com.itextpdf.signatures.PdfSignature)", "462": "DocumentRevisionsValidator::::isCertificationSignature(com.itextpdf.signatures.PdfSignature)", "476": "DocumentRevisionsValidator::::resetClassFields()", "477": "DocumentRevisionsValidator::::resetClassFields()", "478": "DocumentRevisionsValidator::::resetClassFields()", "479": "DocumentRevisionsValidator::::resetClassFields()"}, "test_reverse_method_lines_dic": {"68": "DocumentRevisionsValidatorTest::::before()", "69": "DocumentRevisionsValidatorTest::::before()", "70": "DocumentRevisionsValidatorTest::::before()", "71": "DocumentRevisionsValidatorTest::::before()", "73": "DocumentRevisionsValidatorTest::::setUp()", "74": "DocumentRevisionsValidatorTest::::setUp()", "75": "DocumentRevisionsValidatorTest::::setUp()", "76": "DocumentRevisionsValidatorTest::::setUp()", "77": "DocumentRevisionsValidatorTest::::setUp()", "83": "DocumentRevisionsValidatorTest::::createParameters()", "84": "DocumentRevisionsValidatorTest::::createParameters()", "85": "DocumentRevisionsValidatorTest::::createParameters()", "86": "DocumentRevisionsValidatorTest::::createParameters()", "88": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel1Test()", "89": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel1Test()", "90": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel1Test()", "91": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel1Test()", "92": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel1Test()", "93": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel1Test()", "94": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel1Test()", "95": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel1Test()", "96": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel1Test()", "97": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel1Test()", "98": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel1Test()", "99": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel1Test()", "100": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel1Test()", "101": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel1Test()", "102": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel1Test()", "103": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel1Test()", "104": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel1Test()", "105": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel1Test()", "106": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel1Test()", "107": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel1Test()", "108": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel1Test()", "109": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel1Test()", "110": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel1Test()", "111": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel1Test()", "112": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel1Test()", "113": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel1Test()", "115": "DocumentRevisionsValidatorTest::::hugeDocumentTest()", "116": "DocumentRevisionsValidatorTest::::hugeDocumentTest()", "117": "DocumentRevisionsValidatorTest::::hugeDocumentTest()", "118": "DocumentRevisionsValidatorTest::::hugeDocumentTest()", "119": "DocumentRevisionsValidatorTest::::hugeDocumentTest()", "120": "DocumentRevisionsValidatorTest::::hugeDocumentTest()", "121": "DocumentRevisionsValidatorTest::::hugeDocumentTest()", "122": "DocumentRevisionsValidatorTest::::hugeDocumentTest()", "123": "DocumentRevisionsValidatorTest::::hugeDocumentTest()", "124": "DocumentRevisionsValidatorTest::::hugeDocumentTest()", "125": "DocumentRevisionsValidatorTest::::hugeDocumentTest()", "126": "DocumentRevisionsValidatorTest::::hugeDocumentTest()", "127": "DocumentRevisionsValidatorTest::::hugeDocumentTest()", "128": "DocumentRevisionsValidatorTest::::hugeDocumentTest()", "130": "DocumentRevisionsValidatorTest::::extensionsModificationsTest()", "131": "DocumentRevisionsValidatorTest::::extensionsModificationsTest()", "132": "DocumentRevisionsValidatorTest::::extensionsModificationsTest()", "133": "DocumentRevisionsValidatorTest::::extensionsModificationsTest()", "134": "DocumentRevisionsValidatorTest::::extensionsModificationsTest()", "135": "DocumentRevisionsValidatorTest::::extensionsModificationsTest()", "136": "DocumentRevisionsValidatorTest::::extensionsModificationsTest()", "137": "DocumentRevisionsValidatorTest::::extensionsModificationsTest()", "138": "DocumentRevisionsValidatorTest::::extensionsModificationsTest()", "139": "DocumentRevisionsValidatorTest::::extensionsModificationsTest()", "140": "DocumentRevisionsValidatorTest::::extensionsModificationsTest()", "141": "DocumentRevisionsValidatorTest::::extensionsModificationsTest()", "142": "DocumentRevisionsValidatorTest::::extensionsModificationsTest()", "143": "DocumentRevisionsValidatorTest::::extensionsModificationsTest()", "144": "DocumentRevisionsValidatorTest::::extensionsModificationsTest()", "145": "DocumentRevisionsValidatorTest::::extensionsModificationsTest()", "146": "DocumentRevisionsValidatorTest::::extensionsModificationsTest()", "147": "DocumentRevisionsValidatorTest::::extensionsModificationsTest()", "148": "DocumentRevisionsValidatorTest::::extensionsModificationsTest()", "149": "DocumentRevisionsValidatorTest::::extensionsModificationsTest()", "150": "DocumentRevisionsValidatorTest::::extensionsModificationsTest()", "151": "DocumentRevisionsValidatorTest::::extensionsModificationsTest()", "152": "DocumentRevisionsValidatorTest::::extensionsModificationsTest()", "153": "DocumentRevisionsValidatorTest::::extensionsModificationsTest()", "154": "DocumentRevisionsValidatorTest::::extensionsModificationsTest()", "155": "DocumentRevisionsValidatorTest::::extensionsModificationsTest()", "156": "DocumentRevisionsValidatorTest::::extensionsModificationsTest()", "157": "DocumentRevisionsValidatorTest::::extensionsModificationsTest()", "158": "DocumentRevisionsValidatorTest::::extensionsModificationsTest()", "159": "DocumentRevisionsValidatorTest::::extensionsModificationsTest()", "160": "DocumentRevisionsValidatorTest::::extensionsModificationsTest()", "161": "DocumentRevisionsValidatorTest::::extensionsModificationsTest()", "162": "DocumentRevisionsValidatorTest::::extensionsModificationsTest()", "163": "DocumentRevisionsValidatorTest::::extensionsModificationsTest()", "164": "DocumentRevisionsValidatorTest::::extensionsModificationsTest()", "165": "DocumentRevisionsValidatorTest::::extensionsModificationsTest()", "166": "DocumentRevisionsValidatorTest::::extensionsModificationsTest()", "167": "DocumentRevisionsValidatorTest::::extensionsModificationsTest()", "168": "DocumentRevisionsValidatorTest::::extensionsModificationsTest()", "169": "DocumentRevisionsValidatorTest::::extensionsModificationsTest()", "170": "DocumentRevisionsValidatorTest::::extensionsModificationsTest()", "171": "DocumentRevisionsValidatorTest::::extensionsModificationsTest()", "172": "DocumentRevisionsValidatorTest::::extensionsModificationsTest()", "173": "DocumentRevisionsValidatorTest::::extensionsModificationsTest()", "174": "DocumentRevisionsValidatorTest::::extensionsModificationsTest()", "175": "DocumentRevisionsValidatorTest::::extensionsModificationsTest()", "176": "DocumentRevisionsValidatorTest::::extensionsModificationsTest()", "177": "DocumentRevisionsValidatorTest::::extensionsModificationsTest()", "178": "DocumentRevisionsValidatorTest::::extensionsModificationsTest()", "179": "DocumentRevisionsValidatorTest::::extensionsModificationsTest()", "180": "DocumentRevisionsValidatorTest::::extensionsModificationsTest()", "182": "DocumentRevisionsValidatorTest::::completelyInvalidDocumentTest()", "183": "DocumentRevisionsValidatorTest::::completelyInvalidDocumentTest()", "184": "DocumentRevisionsValidatorTest::::completelyInvalidDocumentTest()", "185": "DocumentRevisionsValidatorTest::::completelyInvalidDocumentTest()", "186": "DocumentRevisionsValidatorTest::::completelyInvalidDocumentTest()", "187": "DocumentRevisionsValidatorTest::::completelyInvalidDocumentTest()", "188": "DocumentRevisionsValidatorTest::::completelyInvalidDocumentTest()", "189": "DocumentRevisionsValidatorTest::::completelyInvalidDocumentTest()", "190": "DocumentRevisionsValidatorTest::::completelyInvalidDocumentTest()", "191": "DocumentRevisionsValidatorTest::::completelyInvalidDocumentTest()", "192": "DocumentRevisionsValidatorTest::::completelyInvalidDocumentTest()", "193": "DocumentRevisionsValidatorTest::::completelyInvalidDocumentTest()", "194": "DocumentRevisionsValidatorTest::::completelyInvalidDocumentTest()", "195": "DocumentRevisionsValidatorTest::::completelyInvalidDocumentTest()", "196": "DocumentRevisionsValidatorTest::::completelyInvalidDocumentTest()", "197": "DocumentRevisionsValidatorTest::::completelyInvalidDocumentTest()", "198": "DocumentRevisionsValidatorTest::::completelyInvalidDocumentTest()", "199": "DocumentRevisionsValidatorTest::::completelyInvalidDocumentTest()", "201": "DocumentRevisionsValidatorTest::::makeFontDirectAndIndirectTest()", "202": "DocumentRevisionsValidatorTest::::makeFontDirectAndIndirectTest()", "203": "DocumentRevisionsValidatorTest::::makeFontDirectAndIndirectTest()", "204": "DocumentRevisionsValidatorTest::::makeFontDirectAndIndirectTest()", "205": "DocumentRevisionsValidatorTest::::makeFontDirectAndIndirectTest()", "206": "DocumentRevisionsValidatorTest::::makeFontDirectAndIndirectTest()", "207": "DocumentRevisionsValidatorTest::::makeFontDirectAndIndirectTest()", "208": "DocumentRevisionsValidatorTest::::makeFontDirectAndIndirectTest()", "209": "DocumentRevisionsValidatorTest::::makeFontDirectAndIndirectTest()", "210": "DocumentRevisionsValidatorTest::::makeFontDirectAndIndirectTest()", "211": "DocumentRevisionsValidatorTest::::makeFontDirectAndIndirectTest()", "212": "DocumentRevisionsValidatorTest::::makeFontDirectAndIndirectTest()", "213": "DocumentRevisionsValidatorTest::::makeFontDirectAndIndirectTest()", "214": "DocumentRevisionsValidatorTest::::makeFontDirectAndIndirectTest()", "215": "DocumentRevisionsValidatorTest::::makeFontDirectAndIndirectTest()", "216": "DocumentRevisionsValidatorTest::::makeFontDirectAndIndirectTest()", "217": "DocumentRevisionsValidatorTest::::makeFontDirectAndIndirectTest()", "218": "DocumentRevisionsValidatorTest::::makeFontDirectAndIndirectTest()", "219": "DocumentRevisionsValidatorTest::::makeFontDirectAndIndirectTest()", "220": "DocumentRevisionsValidatorTest::::makeFontDirectAndIndirectTest()", "221": "DocumentRevisionsValidatorTest::::makeFontDirectAndIndirectTest()", "222": "DocumentRevisionsValidatorTest::::makeFontDirectAndIndirectTest()", "223": "DocumentRevisionsValidatorTest::::makeFontDirectAndIndirectTest()", "224": "DocumentRevisionsValidatorTest::::makeFontDirectAndIndirectTest()", "225": "DocumentRevisionsValidatorTest::::makeFontDirectAndIndirectTest()", "226": "DocumentRevisionsValidatorTest::::makeFontDirectAndIndirectTest()", "227": "DocumentRevisionsValidatorTest::::makeFontDirectAndIndirectTest()", "228": "DocumentRevisionsValidatorTest::::makeFontDirectAndIndirectTest()", "229": "DocumentRevisionsValidatorTest::::makeFontDirectAndIndirectTest()", "230": "DocumentRevisionsValidatorTest::::makeFontDirectAndIndirectTest()", "231": "DocumentRevisionsValidatorTest::::makeFontDirectAndIndirectTest()", "232": "DocumentRevisionsValidatorTest::::makeFontDirectAndIndirectTest()", "233": "DocumentRevisionsValidatorTest::::makeFontDirectAndIndirectTest()", "234": "DocumentRevisionsValidatorTest::::makeFontDirectAndIndirectTest()", "235": "DocumentRevisionsValidatorTest::::makeFontDirectAndIndirectTest()", "237": "DocumentRevisionsValidatorTest::::randomEntryAddedTest()", "238": "DocumentRevisionsValidatorTest::::randomEntryAddedTest()", "239": "DocumentRevisionsValidatorTest::::randomEntryAddedTest()", "240": "DocumentRevisionsValidatorTest::::randomEntryAddedTest()", "241": "DocumentRevisionsValidatorTest::::randomEntryAddedTest()", "242": "DocumentRevisionsValidatorTest::::randomEntryAddedTest()", "243": "DocumentRevisionsValidatorTest::::randomEntryAddedTest()", "244": "DocumentRevisionsValidatorTest::::randomEntryAddedTest()", "245": "DocumentRevisionsValidatorTest::::randomEntryAddedTest()", "246": "DocumentRevisionsValidatorTest::::randomEntryAddedTest()", "247": "DocumentRevisionsValidatorTest::::randomEntryAddedTest()", "248": "DocumentRevisionsValidatorTest::::randomEntryAddedTest()", "249": "DocumentRevisionsValidatorTest::::randomEntryAddedTest()", "250": "DocumentRevisionsValidatorTest::::randomEntryAddedTest()", "251": "DocumentRevisionsValidatorTest::::randomEntryAddedTest()", "252": "DocumentRevisionsValidatorTest::::randomEntryAddedTest()", "253": "DocumentRevisionsValidatorTest::::randomEntryAddedTest()", "254": "DocumentRevisionsValidatorTest::::randomEntryAddedTest()", "255": "DocumentRevisionsValidatorTest::::randomEntryAddedTest()", "257": "DocumentRevisionsValidatorTest::::randomEntryWithoutUsageTest()", "258": "DocumentRevisionsValidatorTest::::randomEntryWithoutUsageTest()", "259": "DocumentRevisionsValidatorTest::::randomEntryWithoutUsageTest()", "260": "DocumentRevisionsValidatorTest::::randomEntryWithoutUsageTest()", "261": "DocumentRevisionsValidatorTest::::randomEntryWithoutUsageTest()", "262": "DocumentRevisionsValidatorTest::::randomEntryWithoutUsageTest()", "263": "DocumentRevisionsValidatorTest::::randomEntryWithoutUsageTest()", "264": "DocumentRevisionsValidatorTest::::randomEntryWithoutUsageTest()", "265": "DocumentRevisionsValidatorTest::::randomEntryWithoutUsageTest()", "266": "DocumentRevisionsValidatorTest::::randomEntryWithoutUsageTest()", "267": "DocumentRevisionsValidatorTest::::randomEntryWithoutUsageTest()", "268": "DocumentRevisionsValidatorTest::::randomEntryWithoutUsageTest()", "269": "DocumentRevisionsValidatorTest::::randomEntryWithoutUsageTest()", "270": "DocumentRevisionsValidatorTest::::randomEntryWithoutUsageTest()", "271": "DocumentRevisionsValidatorTest::::randomEntryWithoutUsageTest()", "272": "DocumentRevisionsValidatorTest::::randomEntryWithoutUsageTest()", "273": "DocumentRevisionsValidatorTest::::randomEntryWithoutUsageTest()", "274": "DocumentRevisionsValidatorTest::::randomEntryWithoutUsageTest()", "275": "DocumentRevisionsValidatorTest::::randomEntryWithoutUsageTest()", "276": "DocumentRevisionsValidatorTest::::randomEntryWithoutUsageTest()", "278": "DocumentRevisionsValidatorTest::::changeExistingFontTest()", "279": "DocumentRevisionsValidatorTest::::changeExistingFontTest()", "280": "DocumentRevisionsValidatorTest::::changeExistingFontTest()", "281": "DocumentRevisionsValidatorTest::::changeExistingFontTest()", "282": "DocumentRevisionsValidatorTest::::changeExistingFontTest()", "283": "DocumentRevisionsValidatorTest::::changeExistingFontTest()", "284": "DocumentRevisionsValidatorTest::::changeExistingFontTest()", "285": "DocumentRevisionsValidatorTest::::changeExistingFontTest()", "286": "DocumentRevisionsValidatorTest::::changeExistingFontTest()", "287": "DocumentRevisionsValidatorTest::::changeExistingFontTest()", "288": "DocumentRevisionsValidatorTest::::changeExistingFontTest()", "289": "DocumentRevisionsValidatorTest::::changeExistingFontTest()", "290": "DocumentRevisionsValidatorTest::::changeExistingFontTest()", "291": "DocumentRevisionsValidatorTest::::changeExistingFontTest()", "292": "DocumentRevisionsValidatorTest::::changeExistingFontTest()", "293": "DocumentRevisionsValidatorTest::::changeExistingFontTest()", "294": "DocumentRevisionsValidatorTest::::changeExistingFontTest()", "295": "DocumentRevisionsValidatorTest::::changeExistingFontTest()", "297": "DocumentRevisionsValidatorTest::::changeExistingFontAndAddAsDssTest()", "298": "DocumentRevisionsValidatorTest::::changeExistingFontAndAddAsDssTest()", "299": "DocumentRevisionsValidatorTest::::changeExistingFontAndAddAsDssTest()", "300": "DocumentRevisionsValidatorTest::::changeExistingFontAndAddAsDssTest()", "301": "DocumentRevisionsValidatorTest::::changeExistingFontAndAddAsDssTest()", "302": "DocumentRevisionsValidatorTest::::changeExistingFontAndAddAsDssTest()", "303": "DocumentRevisionsValidatorTest::::changeExistingFontAndAddAsDssTest()", "304": "DocumentRevisionsValidatorTest::::changeExistingFontAndAddAsDssTest()", "305": "DocumentRevisionsValidatorTest::::changeExistingFontAndAddAsDssTest()", "306": "DocumentRevisionsValidatorTest::::changeExistingFontAndAddAsDssTest()", "307": "DocumentRevisionsValidatorTest::::changeExistingFontAndAddAsDssTest()", "308": "DocumentRevisionsValidatorTest::::changeExistingFontAndAddAsDssTest()", "309": "DocumentRevisionsValidatorTest::::changeExistingFontAndAddAsDssTest()", "310": "DocumentRevisionsValidatorTest::::changeExistingFontAndAddAsDssTest()", "311": "DocumentRevisionsValidatorTest::::changeExistingFontAndAddAsDssTest()", "312": "DocumentRevisionsValidatorTest::::changeExistingFontAndAddAsDssTest()", "313": "DocumentRevisionsValidatorTest::::changeExistingFontAndAddAsDssTest()", "314": "DocumentRevisionsValidatorTest::::changeExistingFontAndAddAsDssTest()", "315": "DocumentRevisionsValidatorTest::::changeExistingFontAndAddAsDssTest()", "317": "DocumentRevisionsValidatorTest::::fillInFieldAtLevel1Test()", "318": "DocumentRevisionsValidatorTest::::fillInFieldAtLevel1Test()", "319": "DocumentRevisionsValidatorTest::::fillInFieldAtLevel1Test()", "320": "DocumentRevisionsValidatorTest::::fillInFieldAtLevel1Test()", "321": "DocumentRevisionsValidatorTest::::fillInFieldAtLevel1Test()", "322": "DocumentRevisionsValidatorTest::::fillInFieldAtLevel1Test()", "323": "DocumentRevisionsValidatorTest::::fillInFieldAtLevel1Test()", "324": "DocumentRevisionsValidatorTest::::fillInFieldAtLevel1Test()", "325": "DocumentRevisionsValidatorTest::::fillInFieldAtLevel1Test()", "326": "DocumentRevisionsValidatorTest::::fillInFieldAtLevel1Test()", "327": "DocumentRevisionsValidatorTest::::fillInFieldAtLevel1Test()", "328": "DocumentRevisionsValidatorTest::::fillInFieldAtLevel1Test()", "329": "DocumentRevisionsValidatorTest::::fillInFieldAtLevel1Test()", "330": "DocumentRevisionsValidatorTest::::fillInFieldAtLevel1Test()", "331": "DocumentRevisionsValidatorTest::::fillInFieldAtLevel1Test()", "332": "DocumentRevisionsValidatorTest::::fillInFieldAtLevel1Test()", "333": "DocumentRevisionsValidatorTest::::fillInFieldAtLevel1Test()", "334": "DocumentRevisionsValidatorTest::::fillInFieldAtLevel1Test()", "335": "DocumentRevisionsValidatorTest::::fillInFieldAtLevel1Test()", "336": "DocumentRevisionsValidatorTest::::fillInFieldAtLevel1Test()", "337": "DocumentRevisionsValidatorTest::::fillInFieldAtLevel1Test()", "338": "DocumentRevisionsValidatorTest::::fillInFieldAtLevel1Test()", "340": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel2Test()", "341": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel2Test()", "342": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel2Test()", "343": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel2Test()", "344": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel2Test()", "345": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel2Test()", "346": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel2Test()", "347": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel2Test()", "348": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel2Test()", "349": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel2Test()", "350": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel2Test()", "351": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel2Test()", "352": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel2Test()", "353": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel2Test()", "354": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel2Test()", "355": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel2Test()", "356": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel2Test()", "357": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel2Test()", "358": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel2Test()", "359": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel2Test()", "360": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel2Test()", "361": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel2Test()", "362": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel2Test()", "363": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel2Test()", "364": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel2Test()", "365": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel2Test()", "366": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel2Test()", "367": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel2Test()", "368": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel2Test()", "369": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel2Test()", "371": "DocumentRevisionsValidatorTest::::removePermissionsTest()", "372": "DocumentRevisionsValidatorTest::::removePermissionsTest()", "373": "DocumentRevisionsValidatorTest::::removePermissionsTest()", "374": "DocumentRevisionsValidatorTest::::removePermissionsTest()", "375": "DocumentRevisionsValidatorTest::::removePermissionsTest()", "376": "DocumentRevisionsValidatorTest::::removePermissionsTest()", "377": "DocumentRevisionsValidatorTest::::removePermissionsTest()", "378": "DocumentRevisionsValidatorTest::::removePermissionsTest()", "379": "DocumentRevisionsValidatorTest::::removePermissionsTest()", "380": "DocumentRevisionsValidatorTest::::removePermissionsTest()", "381": "DocumentRevisionsValidatorTest::::removePermissionsTest()", "382": "DocumentRevisionsValidatorTest::::removePermissionsTest()", "383": "DocumentRevisionsValidatorTest::::removePermissionsTest()", "384": "DocumentRevisionsValidatorTest::::removePermissionsTest()", "385": "DocumentRevisionsValidatorTest::::removePermissionsTest()", "386": "DocumentRevisionsValidatorTest::::removePermissionsTest()", "387": "DocumentRevisionsValidatorTest::::removePermissionsTest()", "388": "DocumentRevisionsValidatorTest::::removePermissionsTest()", "389": "DocumentRevisionsValidatorTest::::removePermissionsTest()", "390": "DocumentRevisionsValidatorTest::::removePermissionsTest()", "392": "DocumentRevisionsValidatorTest::::removeDSSTest()", "393": "DocumentRevisionsValidatorTest::::removeDSSTest()", "394": "DocumentRevisionsValidatorTest::::removeDSSTest()", "395": "DocumentRevisionsValidatorTest::::removeDSSTest()", "396": "DocumentRevisionsValidatorTest::::removeDSSTest()", "397": "DocumentRevisionsValidatorTest::::removeDSSTest()", "398": "DocumentRevisionsValidatorTest::::removeDSSTest()", "399": "DocumentRevisionsValidatorTest::::removeDSSTest()", "400": "DocumentRevisionsValidatorTest::::removeDSSTest()", "401": "DocumentRevisionsValidatorTest::::removeDSSTest()", "402": "DocumentRevisionsValidatorTest::::removeDSSTest()", "403": "DocumentRevisionsValidatorTest::::removeDSSTest()", "404": "DocumentRevisionsValidatorTest::::removeDSSTest()", "405": "DocumentRevisionsValidatorTest::::removeDSSTest()", "406": "DocumentRevisionsValidatorTest::::removeDSSTest()", "407": "DocumentRevisionsValidatorTest::::removeDSSTest()", "408": "DocumentRevisionsValidatorTest::::removeDSSTest()", "409": "DocumentRevisionsValidatorTest::::removeDSSTest()", "410": "DocumentRevisionsValidatorTest::::removeDSSTest()", "411": "DocumentRevisionsValidatorTest::::removeDSSTest()", "413": "DocumentRevisionsValidatorTest::::removeAcroformTest()", "414": "DocumentRevisionsValidatorTest::::removeAcroformTest()", "415": "DocumentRevisionsValidatorTest::::removeAcroformTest()", "416": "DocumentRevisionsValidatorTest::::removeAcroformTest()", "417": "DocumentRevisionsValidatorTest::::removeAcroformTest()", "418": "DocumentRevisionsValidatorTest::::removeAcroformTest()", "419": "DocumentRevisionsValidatorTest::::removeAcroformTest()", "420": "DocumentRevisionsValidatorTest::::removeAcroformTest()", "421": "DocumentRevisionsValidatorTest::::removeAcroformTest()", "422": "DocumentRevisionsValidatorTest::::removeAcroformTest()", "423": "DocumentRevisionsValidatorTest::::removeAcroformTest()", "424": "DocumentRevisionsValidatorTest::::removeAcroformTest()", "425": "DocumentRevisionsValidatorTest::::removeAcroformTest()", "426": "DocumentRevisionsValidatorTest::::removeAcroformTest()", "427": "DocumentRevisionsValidatorTest::::removeAcroformTest()", "428": "DocumentRevisionsValidatorTest::::removeAcroformTest()", "429": "DocumentRevisionsValidatorTest::::removeAcroformTest()", "430": "DocumentRevisionsValidatorTest::::removeAcroformTest()", "431": "DocumentRevisionsValidatorTest::::removeAcroformTest()", "432": "DocumentRevisionsValidatorTest::::removeAcroformTest()", "434": "DocumentRevisionsValidatorTest::::removeFieldTest()", "435": "DocumentRevisionsValidatorTest::::removeFieldTest()", "436": "DocumentRevisionsValidatorTest::::removeFieldTest()", "437": "DocumentRevisionsValidatorTest::::removeFieldTest()", "438": "DocumentRevisionsValidatorTest::::removeFieldTest()", "439": "DocumentRevisionsValidatorTest::::removeFieldTest()", "440": "DocumentRevisionsValidatorTest::::removeFieldTest()", "441": "DocumentRevisionsValidatorTest::::removeFieldTest()", "442": "DocumentRevisionsValidatorTest::::removeFieldTest()", "443": "DocumentRevisionsValidatorTest::::removeFieldTest()", "444": "DocumentRevisionsValidatorTest::::removeFieldTest()", "445": "DocumentRevisionsValidatorTest::::removeFieldTest()", "446": "DocumentRevisionsValidatorTest::::removeFieldTest()", "447": "DocumentRevisionsValidatorTest::::removeFieldTest()", "448": "DocumentRevisionsValidatorTest::::removeFieldTest()", "449": "DocumentRevisionsValidatorTest::::removeFieldTest()", "450": "DocumentRevisionsValidatorTest::::removeFieldTest()", "451": "DocumentRevisionsValidatorTest::::removeFieldTest()", "452": "DocumentRevisionsValidatorTest::::removeFieldTest()", "453": "DocumentRevisionsValidatorTest::::removeFieldTest()", "455": "DocumentRevisionsValidatorTest::::renameFieldTest()", "456": "DocumentRevisionsValidatorTest::::renameFieldTest()", "457": "DocumentRevisionsValidatorTest::::renameFieldTest()", "458": "DocumentRevisionsValidatorTest::::renameFieldTest()", "459": "DocumentRevisionsValidatorTest::::renameFieldTest()", "460": "DocumentRevisionsValidatorTest::::renameFieldTest()", "461": "DocumentRevisionsValidatorTest::::renameFieldTest()", "462": "DocumentRevisionsValidatorTest::::renameFieldTest()", "463": "DocumentRevisionsValidatorTest::::renameFieldTest()", "464": "DocumentRevisionsValidatorTest::::renameFieldTest()", "465": "DocumentRevisionsValidatorTest::::renameFieldTest()", "466": "DocumentRevisionsValidatorTest::::renameFieldTest()", "467": "DocumentRevisionsValidatorTest::::renameFieldTest()", "468": "DocumentRevisionsValidatorTest::::renameFieldTest()", "469": "DocumentRevisionsValidatorTest::::renameFieldTest()", "470": "DocumentRevisionsValidatorTest::::renameFieldTest()", "471": "DocumentRevisionsValidatorTest::::renameFieldTest()", "472": "DocumentRevisionsValidatorTest::::renameFieldTest()", "473": "DocumentRevisionsValidatorTest::::renameFieldTest()", "474": "DocumentRevisionsValidatorTest::::renameFieldTest()", "475": "DocumentRevisionsValidatorTest::::renameFieldTest()", "476": "DocumentRevisionsValidatorTest::::renameFieldTest()", "477": "DocumentRevisionsValidatorTest::::renameFieldTest()", "479": "DocumentRevisionsValidatorTest::::addTextFieldTest()", "480": "DocumentRevisionsValidatorTest::::addTextFieldTest()", "481": "DocumentRevisionsValidatorTest::::addTextFieldTest()", "482": "DocumentRevisionsValidatorTest::::addTextFieldTest()", "483": "DocumentRevisionsValidatorTest::::addTextFieldTest()", "484": "DocumentRevisionsValidatorTest::::addTextFieldTest()", "485": "DocumentRevisionsValidatorTest::::addTextFieldTest()", "486": "DocumentRevisionsValidatorTest::::addTextFieldTest()", "487": "DocumentRevisionsValidatorTest::::addTextFieldTest()", "488": "DocumentRevisionsValidatorTest::::addTextFieldTest()", "489": "DocumentRevisionsValidatorTest::::addTextFieldTest()", "490": "DocumentRevisionsValidatorTest::::addTextFieldTest()", "491": "DocumentRevisionsValidatorTest::::addTextFieldTest()", "492": "DocumentRevisionsValidatorTest::::addTextFieldTest()", "493": "DocumentRevisionsValidatorTest::::addTextFieldTest()", "494": "DocumentRevisionsValidatorTest::::addTextFieldTest()", "495": "DocumentRevisionsValidatorTest::::addTextFieldTest()", "496": "DocumentRevisionsValidatorTest::::addTextFieldTest()", "497": "DocumentRevisionsValidatorTest::::addTextFieldTest()", "498": "DocumentRevisionsValidatorTest::::addTextFieldTest()", "499": "DocumentRevisionsValidatorTest::::addTextFieldTest()", "500": "DocumentRevisionsValidatorTest::::addTextFieldTest()", "501": "DocumentRevisionsValidatorTest::::addTextFieldTest()", "503": "DocumentRevisionsValidatorTest::::addUnsignedSignatureFieldTest()", "504": "DocumentRevisionsValidatorTest::::addUnsignedSignatureFieldTest()", "505": "DocumentRevisionsValidatorTest::::addUnsignedSignatureFieldTest()", "506": "DocumentRevisionsValidatorTest::::addUnsignedSignatureFieldTest()", "507": "DocumentRevisionsValidatorTest::::addUnsignedSignatureFieldTest()", "508": "DocumentRevisionsValidatorTest::::addUnsignedSignatureFieldTest()", "509": "DocumentRevisionsValidatorTest::::addUnsignedSignatureFieldTest()", "510": "DocumentRevisionsValidatorTest::::addUnsignedSignatureFieldTest()", "511": "DocumentRevisionsValidatorTest::::addUnsignedSignatureFieldTest()", "512": "DocumentRevisionsValidatorTest::::addUnsignedSignatureFieldTest()", "513": "DocumentRevisionsValidatorTest::::addUnsignedSignatureFieldTest()", "514": "DocumentRevisionsValidatorTest::::addUnsignedSignatureFieldTest()", "515": "DocumentRevisionsValidatorTest::::addUnsignedSignatureFieldTest()", "516": "DocumentRevisionsValidatorTest::::addUnsignedSignatureFieldTest()", "517": "DocumentRevisionsValidatorTest::::addUnsignedSignatureFieldTest()", "518": "DocumentRevisionsValidatorTest::::addUnsignedSignatureFieldTest()", "519": "DocumentRevisionsValidatorTest::::addUnsignedSignatureFieldTest()", "520": "DocumentRevisionsValidatorTest::::addUnsignedSignatureFieldTest()", "521": "DocumentRevisionsValidatorTest::::addUnsignedSignatureFieldTest()", "522": "DocumentRevisionsValidatorTest::::addUnsignedSignatureFieldTest()", "523": "DocumentRevisionsValidatorTest::::addUnsignedSignatureFieldTest()", "524": "DocumentRevisionsValidatorTest::::addUnsignedSignatureFieldTest()", "525": "DocumentRevisionsValidatorTest::::addUnsignedSignatureFieldTest()", "527": "DocumentRevisionsValidatorTest::::brokenSignatureFieldDictionaryTest()", "528": "DocumentRevisionsValidatorTest::::brokenSignatureFieldDictionaryTest()", "529": "DocumentRevisionsValidatorTest::::brokenSignatureFieldDictionaryTest()", "530": "DocumentRevisionsValidatorTest::::brokenSignatureFieldDictionaryTest()", "531": "DocumentRevisionsValidatorTest::::brokenSignatureFieldDictionaryTest()", "532": "DocumentRevisionsValidatorTest::::brokenSignatureFieldDictionaryTest()", "533": "DocumentRevisionsValidatorTest::::brokenSignatureFieldDictionaryTest()", "534": "DocumentRevisionsValidatorTest::::brokenSignatureFieldDictionaryTest()", "535": "DocumentRevisionsValidatorTest::::brokenSignatureFieldDictionaryTest()", "536": "DocumentRevisionsValidatorTest::::brokenSignatureFieldDictionaryTest()", "537": "DocumentRevisionsValidatorTest::::brokenSignatureFieldDictionaryTest()", "538": "DocumentRevisionsValidatorTest::::brokenSignatureFieldDictionaryTest()", "539": "DocumentRevisionsValidatorTest::::brokenSignatureFieldDictionaryTest()", "540": "DocumentRevisionsValidatorTest::::brokenSignatureFieldDictionaryTest()", "541": "DocumentRevisionsValidatorTest::::brokenSignatureFieldDictionaryTest()", "542": "DocumentRevisionsValidatorTest::::brokenSignatureFieldDictionaryTest()", "543": "DocumentRevisionsValidatorTest::::brokenSignatureFieldDictionaryTest()", "544": "DocumentRevisionsValidatorTest::::brokenSignatureFieldDictionaryTest()", "545": "DocumentRevisionsValidatorTest::::brokenSignatureFieldDictionaryTest()", "546": "DocumentRevisionsValidatorTest::::brokenSignatureFieldDictionaryTest()", "547": "DocumentRevisionsValidatorTest::::brokenSignatureFieldDictionaryTest()", "548": "DocumentRevisionsValidatorTest::::brokenSignatureFieldDictionaryTest()", "549": "DocumentRevisionsValidatorTest::::brokenSignatureFieldDictionaryTest()", "550": "DocumentRevisionsValidatorTest::::brokenSignatureFieldDictionaryTest()", "551": "DocumentRevisionsValidatorTest::::brokenSignatureFieldDictionaryTest()", "552": "DocumentRevisionsValidatorTest::::brokenSignatureFieldDictionaryTest()", "554": "DocumentRevisionsValidatorTest::::modifyPageAnnotsTest()", "555": "DocumentRevisionsValidatorTest::::modifyPageAnnotsTest()", "556": "DocumentRevisionsValidatorTest::::modifyPageAnnotsTest()", "557": "DocumentRevisionsValidatorTest::::modifyPageAnnotsTest()", "558": "DocumentRevisionsValidatorTest::::modifyPageAnnotsTest()", "559": "DocumentRevisionsValidatorTest::::modifyPageAnnotsTest()", "560": "DocumentRevisionsValidatorTest::::modifyPageAnnotsTest()", "561": "DocumentRevisionsValidatorTest::::modifyPageAnnotsTest()", "562": "DocumentRevisionsValidatorTest::::modifyPageAnnotsTest()", "563": "DocumentRevisionsValidatorTest::::modifyPageAnnotsTest()", "564": "DocumentRevisionsValidatorTest::::modifyPageAnnotsTest()", "565": "DocumentRevisionsValidatorTest::::modifyPageAnnotsTest()", "566": "DocumentRevisionsValidatorTest::::modifyPageAnnotsTest()", "567": "DocumentRevisionsValidatorTest::::modifyPageAnnotsTest()", "568": "DocumentRevisionsValidatorTest::::modifyPageAnnotsTest()", "569": "DocumentRevisionsValidatorTest::::modifyPageAnnotsTest()", "570": "DocumentRevisionsValidatorTest::::modifyPageAnnotsTest()", "571": "DocumentRevisionsValidatorTest::::modifyPageAnnotsTest()", "572": "DocumentRevisionsValidatorTest::::modifyPageAnnotsTest()", "573": "DocumentRevisionsValidatorTest::::modifyPageAnnotsTest()", "575": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel3Test()", "576": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel3Test()", "577": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel3Test()", "578": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel3Test()", "579": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel3Test()", "580": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel3Test()", "581": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel3Test()", "582": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel3Test()", "583": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel3Test()", "584": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel3Test()", "585": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel3Test()", "586": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel3Test()", "587": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel3Test()", "588": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel3Test()", "589": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel3Test()", "590": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel3Test()", "591": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel3Test()", "592": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel3Test()", "593": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel3Test()", "594": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel3Test()", "595": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel3Test()", "596": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel3Test()", "597": "DocumentRevisionsValidatorTest::::multipleRevisionsDocumentLevel3Test()"}, "tests": [{"test_lines": [88, 113], "covered_lines": [130, 132, 133, 134, 135, 144, 145, 146, 169, 170, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 272, 273, 274, 275, 279, 280, 281, 282, 285, 286, 287, 292, 294, 295, 296, 298, 299, 302, 303, 312, 317, 318, 319, 320, 324, 325, 489, 490, 492, 493, 495, 499, 500, 501, 504, 505, 506, 509, 510, 513, 514, 517, 518, 519, 522, 523, 525, 532, 533, 535, 539, 543, 544, 545, 546, 547, 548, 553, 554, 555, 556, 558, 564, 565, 566, 567, 568, 569, 576, 577, 581, 582, 614, 615, 617, 621, 626, 627, 629, 633, 637, 638, 639, 654, 655, 741, 742, 743, 758, 763, 764, 766, 767, 769, 770, 771, 776, 780, 781, 783, 784, 785, 791, 792, 794, 795, 797, 798, 800, 801, 804, 805, 809, 810, 811, 812, 813, 815, 817, 819, 835, 836, 837, 843, 844, 855, 859, 862, 865, 868, 869, 870, 871, 873, 876, 877, 878, 883, 884, 910, 913, 914, 915, 919, 937, 941, 945, 948, 949, 950, 951, 952, 953, 954, 955, 961, 962, 963, 967, 968, 969, 970, 977, 978, 979, 980, 981, 982, 983, 984, 989, 990, 991, 998, 1002, 1005, 1008, 1024, 1031, 1034, 1035, 1037, 1038, 1039, 1046, 1061, 1062, 1063, 1064, 1071, 1072, 1077, 1079, 1083, 1084, 1085, 1086, 1087, 1088, 1092, 1096, 1097, 1098, 1099, 1100, 1105, 1109, 1110, 1113, 1114, 1117, 1118, 1120, 1121, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1136, 1137, 1138, 1139, 1140, 1144, 1145, 1147, 1148, 1149, 1151, 1152, 1156, 1157, 1158, 1164, 1171, 1180, 1185, 1186, 1188, 1189, 1190, 1192, 1195, 1200, 1203, 1210, 1215, 1217, 1220, 1227, 1230, 1231, 1235, 1240, 1241, 1242, 1243, 1245, 1246, 1247, 1248, 1250, 1251, 1255, 1256, 1261, 1262, 1264, 1265, 1267, 1268, 1272, 1285, 1287, 1288, 1290, 1293, 1294, 1298, 1299, 1300, 1301, 1304, 1305, 1306, 1308, 1309, 1311, 1312, 1318, 1319, 1320, 1321, 1324, 1331, 1332, 1333, 1334, 1335, 1337, 1338, 1342, 1343, 1347, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1362, 1363, 1364, 1365, 1366, 1369, 1370, 1371, 1372, 1373, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1390, 1391, 1392, 1393, 1394, 1397, 1398, 1399, 1400, 1401, 1404, 1408, 1410, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1425, 1426, 1427, 1428, 1436, 1440, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1453, 1454, 1456, 1457, 1459, 1460, 1467, 1471, 1472, 1475, 1476, 1485, 1486, 1492, 1493, 1496, 1497, 1501, 1504, 1505, 1506, 1507, 1509, 1511, 1512, 1513, 1515, 1516, 1518, 1519, 1522, 1523, 1524, 1525, 1527, 1529, 1531, 1532, 1534, 1538]}, {"test_lines": [115, 128], "covered_lines": [130, 132, 133, 134, 135, 144, 145, 146, 169, 170, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 272, 273, 274, 275, 279, 280, 281, 285, 286, 287, 292, 298, 299, 302, 303, 317, 318, 319, 320, 324, 325, 489, 490, 492, 493, 495, 499, 500, 501, 504, 505, 506, 509, 510, 513, 514, 517, 518, 519, 522, 523, 525, 532, 533, 581, 582, 614, 615, 626, 627, 629, 631, 741, 742, 743, 744, 745, 941, 945, 948, 949, 950, 951, 952, 953, 954, 955, 961, 962, 963, 967, 968, 969, 970, 977, 978, 979, 980, 981, 982, 983, 984, 989, 990, 991, 998, 1002, 1003, 1031, 1034, 1035, 1037, 1038, 1039, 1046, 1109, 1110, 1111, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1180, 1185, 1186, 1188, 1189, 1190, 1192, 1195, 1200, 1203, 1215, 1217, 1220, 1227, 1230, 1231, 1235, 1240, 1241, 1242, 1245, 1246, 1247, 1250, 1251, 1255, 1256, 1261, 1264, 1265, 1267, 1268, 1272, 1285, 1287, 1288, 1290, 1293, 1294, 1295, 1298, 1299, 1300, 1301, 1304, 1305, 1318, 1319, 1320, 1321, 1324, 1331, 1332, 1333, 1334, 1335, 1337, 1353, 1354, 1355, 1356, 1362, 1363, 1369, 1370, 1376, 1377, 1410, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1425, 1426, 1436]}, {"test_lines": [130, 180], "covered_lines": [130, 132, 133, 134, 135, 144, 145, 146, 169, 170, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 279, 280, 281, 285, 286, 287, 292, 298, 299, 302, 303, 312, 317, 318, 319, 320, 324, 325, 489, 490, 492, 493, 495, 499, 500, 501, 502, 504, 505, 506, 509, 510, 513, 514, 517, 518, 519, 522, 523, 525, 532, 535, 536, 537, 539, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 558, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 571, 572, 576, 577, 581, 582, 614, 615, 626, 627, 629, 633, 637, 638, 639, 654, 655, 741, 742, 743, 758, 763, 764, 766, 767, 769, 770, 771, 776, 780, 781, 783, 784, 785, 791, 792, 794, 795, 797, 798, 800, 805, 809, 810, 811, 812, 813, 815, 817, 835, 836, 837, 843, 844, 855, 859, 862, 865, 868, 869, 870, 871, 873, 876, 877, 878, 883, 884, 910, 913, 914, 915, 919, 937, 941, 945, 948, 949, 950, 951, 952, 953, 954, 955, 961, 962, 963, 967, 968, 969, 970, 977, 978, 979, 980, 981, 982, 983, 984, 989, 990, 991, 998, 1002, 1005, 1008, 1024, 1031, 1034, 1035, 1037, 1038, 1039, 1046, 1083, 1084, 1085, 1086, 1087, 1088, 1092, 1096, 1097, 1098, 1099, 1100, 1105, 1109, 1110, 1113, 1114, 1117, 1118, 1120, 1121, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1136, 1137, 1138, 1139, 1140, 1144, 1145, 1147, 1148, 1149, 1151, 1152, 1156, 1157, 1158, 1164, 1171, 1180, 1185, 1186, 1188, 1189, 1190, 1192, 1193, 1195, 1200, 1203, 1210, 1215, 1217, 1220, 1227, 1230, 1231, 1235, 1240, 1241, 1242, 1243, 1245, 1246, 1247, 1248, 1250, 1251, 1255, 1256, 1261, 1264, 1265, 1267, 1268, 1272, 1285, 1287, 1288, 1290, 1293, 1294, 1298, 1299, 1304, 1305, 1306, 1308, 1309, 1311, 1312, 1318, 1319, 1320, 1321, 1324, 1331, 1332, 1333, 1334, 1335, 1337, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1425, 1426, 1427, 1428, 1436, 1440, 1443, 1444, 1445, 1446, 1447, 1448, 1467, 1471, 1472]}, {"test_lines": [182, 199], "covered_lines": [130, 132, 133, 134, 135, 144, 145, 146, 169, 170, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 299, 312, 317, 318, 319, 320, 324, 325, 489, 490, 492, 493, 495, 499, 500, 501, 504, 505, 506, 509, 510, 513, 514, 517, 518, 519, 522, 523, 525, 532, 533, 581, 582, 614, 615, 626, 627, 629, 633, 637, 638, 639, 654, 655, 741, 742, 743, 758, 763, 764, 766, 767, 769, 770, 771, 776, 780, 781, 783, 784, 785, 791, 792, 794, 795, 797, 798, 800, 805, 809, 810, 811, 812, 813, 815, 817, 835, 836, 837, 843, 844, 855, 859, 862, 865, 868, 869, 870, 871, 873, 876, 877, 878, 883, 884, 910, 913, 914, 915, 919, 937, 941, 945, 948, 949, 950, 951, 952, 953, 954, 957, 958, 1031, 1034, 1035, 1083, 1084, 1085, 1086, 1087, 1088, 1092, 1096, 1097, 1098, 1099, 1100, 1105, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1136, 1137, 1138, 1139, 1140, 1144, 1145, 1147, 1148, 1149, 1151, 1152, 1156, 1157, 1158, 1164, 1171, 1180, 1185, 1186, 1188, 1189, 1190, 1192, 1195, 1200, 1203, 1210, 1215, 1217, 1220, 1227, 1230, 1231, 1235, 1240, 1241, 1242, 1245, 1246, 1247, 1248, 1250, 1251, 1255, 1256]}, {"test_lines": [201, 235], "covered_lines": [130, 132, 133, 134, 135, 144, 145, 146, 169, 170, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 299, 312, 317, 318, 319, 320, 324, 325, 489, 490, 492, 493, 495, 499, 500, 501, 504, 505, 506, 509, 510, 513, 514, 517, 518, 519, 520, 522, 525, 532, 533, 581, 582, 614, 615, 626, 627, 629, 633, 637, 638, 639, 654, 655, 741, 742, 743, 758, 763, 764, 766, 767, 769, 770, 771, 772, 773, 780, 781, 783, 784, 785, 786, 787, 788, 789, 809, 810, 811, 812, 819, 820, 1083, 1084, 1085, 1086, 1087, 1088, 1092, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1136, 1137, 1138, 1139, 1140, 1144, 1145, 1147, 1148, 1149, 1151, 1152, 1156, 1157, 1158, 1164, 1171, 1180, 1185, 1186, 1188, 1189, 1190, 1192, 1195, 1200, 1201, 1203, 1215, 1217, 1220, 1227, 1230, 1231, 1235, 1240, 1241, 1242, 1245, 1246, 1247, 1248, 1250, 1251, 1255, 1256]}, {"test_lines": [237, 255], "covered_lines": [130, 132, 133, 134, 135, 144, 145, 146, 169, 170, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 299, 317, 318, 319, 320, 489, 490, 492, 493, 495, 496, 497, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1180, 1185, 1188, 1189, 1192, 1195, 1200, 1203, 1217, 1240, 1241, 1242, 1243]}, {"test_lines": [257, 276], "covered_lines": [130, 132, 133, 134, 135, 144, 145, 146, 169, 170, 182, 183, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 272, 273, 274, 275, 279, 280, 281, 285, 286, 287, 292, 294, 295, 296, 298, 299, 302, 303, 312, 317, 318, 319, 320, 324, 325, 489, 490, 492, 493, 495, 499, 500, 501, 504, 505, 506, 509, 510, 513, 514, 517, 518, 519, 522, 523, 525, 532, 533, 581, 582, 614, 615, 626, 627, 629, 633, 637, 638, 639, 654, 655, 741, 742, 743, 758, 763, 764, 766, 767, 769, 770, 771, 776, 780, 781, 783, 784, 785, 791, 792, 794, 795, 797, 798, 800, 805, 809, 810, 811, 812, 813, 815, 817, 835, 836, 837, 843, 844, 855, 859, 862, 865, 868, 869, 870, 871, 873, 876, 877, 878, 883, 884, 910, 913, 914, 915, 919, 937, 941, 945, 948, 949, 950, 951, 952, 953, 954, 955, 961, 962, 963, 967, 968, 969, 970, 977, 978, 979, 980, 981, 982, 983, 984, 989, 990, 991, 998, 1002, 1005, 1008, 1024, 1031, 1034, 1035, 1037, 1038, 1039, 1046, 1083, 1084, 1085, 1086, 1087, 1088, 1092, 1096, 1097, 1098, 1099, 1100, 1105, 1109, 1110, 1113, 1114, 1117, 1118, 1120, 1121, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1136, 1137, 1138, 1139, 1140, 1144, 1145, 1147, 1148, 1149, 1151, 1152, 1156, 1157, 1158, 1164, 1171, 1180, 1185, 1186, 1188, 1189, 1190, 1192, 1195, 1200, 1203, 1215, 1217, 1220, 1227, 1230, 1231, 1235, 1240, 1241, 1242, 1245, 1246, 1247, 1250, 1251, 1255, 1256, 1261, 1264, 1265, 1267, 1268, 1272, 1285, 1287, 1288, 1290, 1293, 1294, 1298, 1299, 1304, 1305, 1306, 1308, 1309, 1311, 1312, 1318, 1319, 1320, 1321, 1324, 1331, 1332, 1333, 1334, 1335, 1337, 1338, 1342, 1343, 1347, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1425, 1426, 1427, 1428, 1436, 1440, 1443, 1444, 1445, 1446, 1447, 1448, 1467, 1471, 1472]}, {"test_lines": [278, 295], "covered_lines": [130, 132, 133, 134, 135, 144, 145, 146, 169, 170, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 299, 312, 317, 318, 319, 320, 324, 325, 489, 490, 492, 493, 495, 499, 500, 501, 504, 505, 506, 509, 510, 513, 514, 517, 518, 519, 522, 523, 525, 532, 533, 581, 582, 614, 615, 626, 627, 629, 633, 637, 638, 639, 654, 655, 741, 742, 743, 758, 763, 764, 766, 767, 769, 770, 771, 776, 780, 781, 783, 784, 785, 791, 792, 794, 795, 797, 798, 800, 805, 809, 810, 811, 812, 813, 815, 817, 835, 836, 837, 843, 844, 855, 859, 862, 865, 868, 869, 870, 871, 873, 876, 877, 878, 883, 884, 910, 913, 914, 915, 919, 937, 941, 945, 948, 949, 950, 951, 952, 953, 954, 955, 961, 962, 963, 967, 968, 969, 970, 977, 978, 979, 980, 981, 982, 983, 985, 986, 1031, 1034, 1035, 1083, 1084, 1085, 1086, 1087, 1088, 1092, 1096, 1097, 1098, 1099, 1100, 1105, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1136, 1137, 1138, 1139, 1140, 1144, 1145, 1147, 1148, 1149, 1151, 1152, 1156, 1157, 1158, 1164, 1171, 1180, 1185, 1186, 1188, 1189, 1190, 1192, 1195, 1200, 1203, 1210, 1215, 1217, 1220, 1227, 1230, 1231, 1235, 1240, 1241, 1242, 1245, 1246, 1247, 1248, 1250, 1251, 1255, 1256]}, {"test_lines": [297, 315], "covered_lines": [130, 132, 133, 134, 135, 144, 145, 146, 169, 170, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 299, 312, 317, 318, 319, 320, 324, 325, 489, 490, 492, 493, 495, 499, 500, 501, 504, 505, 506, 509, 510, 513, 514, 517, 518, 519, 522, 523, 525, 532, 533, 581, 582, 614, 615, 626, 627, 629, 633, 637, 638, 639, 654, 655, 741, 742, 743, 758, 763, 764, 766, 767, 769, 770, 771, 776, 780, 781, 783, 784, 785, 791, 792, 794, 795, 797, 798, 800, 805, 809, 810, 811, 812, 813, 815, 817, 835, 836, 837, 843, 844, 855, 859, 862, 865, 868, 869, 870, 871, 873, 876, 877, 878, 883, 884, 910, 913, 914, 915, 919, 937, 941, 945, 948, 949, 950, 951, 952, 953, 954, 955, 961, 962, 963, 967, 968, 969, 970, 977, 978, 979, 980, 981, 982, 983, 985, 986, 1031, 1034, 1035, 1083, 1084, 1085, 1086, 1087, 1088, 1092, 1096, 1097, 1098, 1099, 1100, 1105, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1136, 1137, 1138, 1139, 1140, 1144, 1145, 1147, 1148, 1149, 1151, 1152, 1156, 1157, 1158, 1164, 1171, 1180, 1185, 1186, 1188, 1189, 1190, 1192, 1195, 1200, 1203, 1210, 1215, 1217, 1220, 1227, 1230, 1231, 1235, 1240, 1241, 1242, 1245, 1246, 1247, 1248, 1250, 1251, 1255, 1256]}, {"test_lines": [317, 338], "covered_lines": [130, 132, 133, 134, 135, 144, 145, 146, 169, 170, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 299, 312, 317, 318, 319, 320, 324, 325, 489, 490, 492, 493, 495, 499, 500, 501, 504, 505, 506, 509, 510, 513, 514, 517, 518, 519, 520, 522, 525, 532, 533, 581, 584, 588, 592, 593, 594, 595, 596, 597, 603, 609, 610, 614, 615, 626, 627, 629, 633, 637, 638, 639, 654, 655, 741, 742, 743, 758, 763, 764, 766, 767, 769, 770, 771, 772, 773, 780, 781, 783, 784, 785, 786, 787, 788, 789, 791, 792, 794, 795, 797, 798, 800, 805, 809, 810, 811, 812, 813, 815, 817, 819, 820, 835, 836, 837, 843, 844, 850, 851, 855, 859, 860, 862, 865, 868, 869, 870, 871, 873, 876, 877, 878, 883, 886, 890, 891, 892, 893, 894, 897, 898, 899, 906, 910, 913, 914, 915, 919, 937, 1031, 1034, 1035, 1037, 1038, 1039, 1046, 1083, 1084, 1085, 1086, 1087, 1088, 1092, 1096, 1097, 1105, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1136, 1137, 1138, 1139, 1140, 1144, 1145, 1147, 1148, 1149, 1151, 1152, 1156, 1157, 1158, 1164, 1171, 1180, 1185, 1186, 1188, 1189, 1190, 1192, 1195, 1196, 1200, 1203, 1215, 1217, 1220, 1227, 1230, 1231, 1232, 1235, 1240, 1241, 1242, 1243, 1245, 1246, 1247, 1248, 1250, 1251, 1255, 1256, 1261, 1264, 1267, 1268]}, {"test_lines": [340, 369], "covered_lines": [130, 132, 133, 134, 135, 144, 145, 146, 169, 170, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 272, 273, 274, 275, 279, 280, 281, 285, 286, 287, 292, 298, 299, 302, 303, 312, 317, 318, 319, 320, 324, 325, 489, 490, 492, 493, 495, 499, 500, 501, 504, 505, 506, 509, 510, 513, 514, 517, 518, 519, 522, 523, 525, 532, 533, 535, 539, 543, 544, 545, 546, 547, 548, 553, 554, 555, 556, 558, 564, 565, 566, 567, 568, 569, 576, 577, 581, 584, 588, 592, 593, 594, 595, 596, 597, 603, 609, 610, 614, 615, 617, 621, 626, 627, 629, 633, 637, 638, 639, 654, 655, 741, 742, 743, 758, 763, 764, 766, 767, 769, 770, 771, 776, 780, 781, 783, 784, 785, 791, 792, 794, 795, 797, 798, 800, 801, 804, 805, 809, 810, 811, 812, 813, 815, 817, 819, 835, 836, 837, 843, 844, 850, 855, 859, 860, 862, 865, 868, 869, 870, 871, 873, 876, 877, 878, 883, 884, 886, 890, 891, 892, 893, 894, 897, 898, 899, 906, 910, 913, 914, 915, 919, 937, 941, 945, 948, 949, 950, 951, 952, 953, 954, 955, 961, 962, 963, 967, 968, 969, 970, 977, 978, 979, 980, 981, 982, 983, 984, 989, 990, 991, 998, 1002, 1005, 1008, 1024, 1031, 1034, 1035, 1037, 1038, 1039, 1046, 1061, 1062, 1063, 1071, 1072, 1077, 1079, 1083, 1084, 1085, 1086, 1087, 1088, 1092, 1096, 1097, 1098, 1099, 1100, 1105, 1109, 1110, 1113, 1114, 1117, 1118, 1120, 1121, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1136, 1137, 1138, 1139, 1140, 1144, 1145, 1147, 1148, 1149, 1151, 1152, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1164, 1171, 1180, 1185, 1186, 1188, 1189, 1190, 1192, 1195, 1200, 1203, 1210, 1215, 1217, 1220, 1227, 1228, 1230, 1231, 1232, 1235, 1240, 1241, 1242, 1243, 1245, 1246, 1247, 1248, 1250, 1251, 1255, 1256, 1261, 1262, 1264, 1265, 1267, 1268, 1272, 1285, 1287, 1288, 1290, 1293, 1294, 1295, 1298, 1299, 1300, 1301, 1304, 1305, 1306, 1308, 1309, 1311, 1312, 1313, 1314, 1318, 1319, 1320, 1321, 1324, 1331, 1332, 1333, 1334, 1335, 1337, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1362, 1363, 1369, 1370, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1390, 1391, 1397, 1398, 1404, 1408, 1410, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1425, 1426, 1427, 1428, 1436, 1440, 1443, 1444, 1445, 1446, 1447, 1449, 1450, 1451, 1453, 1454, 1456, 1457, 1459, 1460, 1467, 1471, 1472, 1475, 1476, 1485, 1486, 1487, 1488, 1489, 1492, 1493, 1494, 1496, 1497, 1501, 1504, 1505, 1506, 1507, 1509, 1511, 1512, 1513, 1515, 1516, 1518, 1519, 1522, 1523, 1524, 1525, 1527, 1529, 1531, 1534, 1538]}, {"test_lines": [371, 390], "covered_lines": [130, 132, 133, 134, 135, 144, 145, 146, 169, 170, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 299, 317, 318, 319, 320, 324, 325, 489, 490, 492, 493, 495, 499, 500, 501, 504, 505, 506, 507, 509, 510, 513, 514, 517, 519, 522, 525, 532, 533, 581, 584, 585, 586, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1180, 1185, 1186, 1188, 1189, 1190, 1192, 1193, 1195, 1200, 1203, 1217, 1240, 1241, 1242, 1245, 1246, 1247, 1250, 1251]}, {"test_lines": [392, 411], "covered_lines": [130, 132, 133, 134, 135, 144, 145, 146, 169, 170, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 299, 317, 318, 319, 320, 324, 325, 489, 490, 492, 493, 495, 499, 500, 501, 504, 505, 506, 509, 510, 511, 513, 514, 517, 519, 522, 525, 532, 533, 581, 584, 588, 592, 593, 594, 595, 596, 597, 603, 609, 610, 614, 617, 618, 619, 859, 862, 865, 868, 869, 870, 871, 873, 876, 877, 878, 883, 886, 890, 891, 892, 893, 894, 897, 898, 899, 906, 1031, 1034, 1037, 1038, 1039, 1046, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1180, 1185, 1186, 1188, 1189, 1190, 1192, 1195, 1200, 1203, 1215, 1217, 1227, 1230, 1231, 1232, 1235, 1240, 1241, 1242, 1243, 1245, 1246, 1247, 1248, 1250, 1251, 1261, 1264, 1267, 1268]}, {"test_lines": [413, 432], "covered_lines": [130, 132, 133, 134, 135, 144, 145, 146, 169, 170, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 299, 317, 318, 319, 320, 324, 325, 489, 490, 492, 493, 495, 499, 500, 501, 504, 505, 506, 509, 510, 513, 514, 517, 518, 519, 520, 522, 525, 532, 533, 581, 584, 588, 592, 593, 594, 595, 596, 597, 603, 609, 610, 614, 617, 621, 626, 627, 629, 631, 741, 742, 743, 758, 759, 760, 859, 862, 865, 868, 869, 870, 871, 873, 876, 877, 878, 883, 886, 890, 891, 892, 893, 894, 897, 898, 899, 906, 1031, 1034, 1037, 1038, 1039, 1046, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1180, 1185, 1186, 1188, 1189, 1190, 1192, 1195, 1200, 1203, 1215, 1217, 1227, 1230, 1231, 1232, 1235, 1240, 1241, 1242, 1243, 1245, 1246, 1247, 1248, 1250, 1251, 1261, 1264, 1267, 1268]}, {"test_lines": [434, 453], "covered_lines": [130, 132, 133, 134, 135, 144, 145, 146, 169, 170, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 299, 317, 318, 319, 320, 324, 325, 489, 490, 492, 493, 495, 499, 500, 501, 504, 505, 506, 509, 510, 513, 514, 517, 518, 519, 520, 522, 525, 532, 533, 581, 584, 588, 592, 593, 594, 595, 596, 597, 603, 609, 610, 614, 617, 621, 626, 627, 629, 633, 637, 638, 639, 654, 655, 741, 742, 743, 758, 763, 764, 766, 767, 769, 770, 772, 773, 859, 862, 865, 868, 869, 870, 871, 873, 876, 877, 878, 883, 886, 890, 891, 892, 893, 894, 897, 898, 899, 906, 1031, 1034, 1037, 1038, 1039, 1046, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1136, 1137, 1138, 1139, 1140, 1180, 1185, 1186, 1188, 1189, 1190, 1192, 1195, 1200, 1203, 1215, 1217, 1227, 1228, 1230, 1231, 1232, 1235, 1240, 1241, 1242, 1245, 1246, 1247, 1248, 1250, 1251, 1261, 1264, 1267, 1268]}, {"test_lines": [455, 477], "covered_lines": [130, 132, 133, 134, 135, 144, 145, 146, 169, 170, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 299, 312, 317, 318, 319, 320, 324, 325, 489, 490, 492, 493, 495, 499, 500, 501, 504, 505, 506, 509, 510, 513, 514, 517, 518, 519, 520, 522, 525, 532, 533, 581, 584, 588, 592, 593, 594, 595, 596, 597, 603, 609, 610, 614, 617, 621, 626, 627, 629, 633, 637, 638, 639, 654, 655, 741, 742, 743, 758, 763, 764, 766, 767, 769, 770, 771, 772, 773, 780, 781, 783, 784, 785, 786, 787, 788, 789, 791, 792, 794, 795, 797, 798, 800, 805, 809, 810, 811, 812, 813, 815, 817, 819, 820, 835, 836, 837, 843, 844, 850, 855, 859, 862, 865, 868, 869, 870, 871, 873, 876, 877, 878, 883, 884, 886, 890, 891, 892, 893, 894, 897, 898, 899, 906, 910, 913, 914, 915, 919, 937, 1031, 1034, 1035, 1037, 1038, 1039, 1046, 1083, 1084, 1085, 1086, 1087, 1088, 1092, 1096, 1097, 1105, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1136, 1137, 1138, 1139, 1140, 1144, 1145, 1147, 1148, 1149, 1151, 1152, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1164, 1171, 1180, 1185, 1186, 1188, 1189, 1190, 1192, 1195, 1200, 1203, 1210, 1215, 1217, 1220, 1227, 1230, 1231, 1232, 1235, 1240, 1241, 1242, 1243, 1245, 1246, 1247, 1248, 1250, 1251, 1255, 1256, 1261, 1264, 1267, 1268]}, {"test_lines": [479, 501], "covered_lines": [130, 132, 133, 134, 135, 144, 145, 146, 169, 170, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 299, 312, 317, 318, 319, 320, 324, 325, 489, 490, 492, 493, 495, 499, 500, 501, 504, 505, 506, 509, 510, 513, 514, 517, 518, 519, 520, 522, 525, 532, 533, 581, 584, 588, 592, 593, 594, 595, 596, 597, 603, 609, 610, 614, 617, 621, 626, 627, 629, 633, 637, 638, 639, 654, 655, 741, 742, 743, 758, 763, 764, 766, 767, 769, 770, 771, 772, 773, 780, 781, 783, 784, 785, 791, 792, 794, 795, 797, 798, 800, 801, 802, 805, 809, 810, 811, 812, 813, 815, 817, 819, 835, 836, 837, 843, 844, 850, 855, 859, 862, 865, 868, 869, 870, 871, 873, 876, 877, 878, 883, 884, 886, 890, 891, 892, 893, 894, 897, 898, 899, 906, 910, 913, 914, 915, 919, 937, 1031, 1034, 1035, 1037, 1038, 1039, 1046, 1061, 1062, 1065, 1066, 1067, 1068, 1083, 1084, 1085, 1086, 1087, 1088, 1092, 1096, 1097, 1105, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1136, 1137, 1138, 1139, 1140, 1144, 1145, 1147, 1148, 1149, 1151, 1152, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1164, 1171, 1180, 1185, 1186, 1188, 1189, 1190, 1192, 1195, 1200, 1203, 1210, 1215, 1217, 1227, 1228, 1230, 1231, 1232, 1235, 1240, 1241, 1242, 1243, 1245, 1246, 1247, 1248, 1250, 1251, 1261, 1264, 1267, 1268]}, {"test_lines": [503, 525], "covered_lines": [130, 132, 133, 134, 135, 144, 145, 146, 169, 170, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 299, 312, 317, 318, 319, 320, 324, 325, 489, 490, 492, 493, 495, 499, 500, 501, 504, 505, 506, 509, 510, 513, 514, 517, 518, 519, 520, 522, 525, 532, 533, 581, 584, 588, 592, 593, 594, 595, 596, 597, 603, 609, 610, 614, 617, 621, 626, 627, 629, 633, 637, 638, 639, 654, 655, 741, 742, 743, 758, 763, 764, 766, 767, 769, 770, 771, 772, 773, 780, 781, 783, 784, 785, 791, 792, 794, 795, 797, 798, 800, 801, 802, 805, 809, 810, 811, 812, 813, 815, 817, 819, 835, 836, 837, 843, 844, 850, 855, 859, 862, 865, 868, 869, 870, 871, 873, 876, 877, 878, 883, 884, 886, 890, 891, 892, 893, 894, 897, 898, 899, 906, 910, 913, 914, 915, 919, 937, 1031, 1034, 1035, 1037, 1038, 1039, 1046, 1061, 1062, 1065, 1066, 1067, 1068, 1083, 1084, 1085, 1086, 1087, 1088, 1092, 1096, 1097, 1105, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1136, 1137, 1138, 1139, 1140, 1144, 1145, 1147, 1148, 1149, 1151, 1152, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1164, 1171, 1180, 1185, 1186, 1188, 1189, 1190, 1192, 1195, 1200, 1203, 1210, 1215, 1217, 1227, 1228, 1230, 1231, 1232, 1235, 1240, 1241, 1242, 1243, 1245, 1246, 1247, 1248, 1250, 1251, 1261, 1264, 1267, 1268]}, {"test_lines": [527, 552], "covered_lines": [130, 132, 133, 134, 135, 144, 145, 146, 169, 170, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 299, 312, 317, 318, 319, 320, 324, 325, 489, 490, 492, 493, 495, 499, 500, 501, 504, 505, 506, 509, 510, 513, 514, 517, 518, 519, 520, 522, 525, 532, 533, 581, 584, 588, 592, 593, 594, 595, 596, 597, 603, 609, 610, 614, 617, 621, 626, 627, 629, 633, 637, 638, 639, 654, 655, 741, 742, 743, 758, 763, 764, 766, 767, 769, 770, 771, 772, 773, 780, 781, 783, 784, 785, 786, 787, 788, 789, 791, 792, 794, 795, 797, 798, 800, 805, 809, 810, 811, 812, 813, 815, 817, 819, 835, 836, 837, 843, 844, 845, 846, 847, 848, 850, 855, 859, 862, 865, 866, 868, 869, 870, 871, 873, 876, 877, 878, 883, 884, 886, 890, 891, 892, 893, 894, 897, 898, 899, 906, 910, 913, 914, 915, 919, 937, 1031, 1034, 1035, 1037, 1038, 1039, 1046, 1083, 1084, 1085, 1086, 1087, 1088, 1092, 1096, 1097, 1105, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1136, 1137, 1138, 1139, 1140, 1144, 1145, 1147, 1148, 1149, 1151, 1152, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1164, 1171, 1180, 1185, 1186, 1188, 1189, 1190, 1192, 1195, 1200, 1203, 1210, 1215, 1217, 1220, 1227, 1230, 1231, 1232, 1235, 1240, 1241, 1242, 1243, 1245, 1246, 1247, 1248, 1250, 1251, 1255, 1256, 1261, 1264, 1267, 1268]}, {"test_lines": [554, 573], "covered_lines": [130, 132, 133, 134, 135, 144, 145, 146, 169, 170, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 299, 312, 317, 318, 319, 320, 324, 325, 489, 490, 492, 493, 495, 499, 500, 501, 504, 505, 506, 509, 510, 513, 514, 517, 518, 519, 522, 523, 525, 532, 533, 581, 584, 588, 592, 593, 594, 595, 596, 597, 603, 609, 610, 614, 617, 621, 626, 627, 629, 633, 637, 638, 639, 654, 655, 741, 742, 743, 758, 763, 764, 766, 767, 769, 770, 771, 776, 780, 781, 783, 784, 785, 791, 792, 794, 795, 797, 798, 800, 805, 809, 810, 811, 812, 813, 815, 817, 819, 835, 836, 837, 843, 844, 850, 855, 859, 862, 865, 868, 869, 870, 871, 873, 876, 877, 878, 883, 884, 886, 890, 891, 892, 893, 894, 897, 898, 899, 906, 910, 913, 914, 915, 919, 937, 941, 945, 948, 949, 950, 951, 952, 953, 954, 955, 961, 962, 963, 967, 968, 969, 970, 977, 978, 979, 980, 981, 982, 983, 984, 989, 990, 991, 992, 994, 1002, 1005, 1006, 1031, 1034, 1035, 1037, 1038, 1039, 1046, 1083, 1084, 1085, 1086, 1087, 1088, 1092, 1096, 1097, 1098, 1099, 1100, 1105, 1109, 1110, 1113, 1114, 1117, 1118, 1120, 1121, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1136, 1137, 1138, 1139, 1140, 1144, 1145, 1147, 1148, 1149, 1151, 1152, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1164, 1171, 1180, 1185, 1186, 1188, 1189, 1190, 1192, 1195, 1200, 1203, 1210, 1215, 1217, 1220, 1227, 1228, 1230, 1231, 1232, 1235, 1240, 1241, 1242, 1243, 1245, 1246, 1247, 1248, 1250, 1251, 1255, 1256, 1261, 1264, 1267, 1268]}, {"test_lines": [575, 597], "covered_lines": [130, 132, 133, 134, 135, 144, 145, 146, 169, 170, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 272, 273, 274, 275, 279, 280, 281, 285, 286, 287, 292, 298, 299, 302, 303, 312, 317, 318, 319, 320, 324, 325, 489, 490, 492, 493, 495, 499, 500, 501, 504, 505, 506, 509, 510, 513, 514, 517, 518, 519, 522, 523, 525, 532, 533, 581, 584, 588, 592, 593, 594, 595, 596, 597, 603, 609, 610, 614, 615, 626, 627, 629, 633, 637, 638, 639, 654, 655, 741, 742, 743, 758, 763, 764, 766, 767, 769, 770, 771, 776, 780, 781, 783, 784, 785, 791, 792, 794, 795, 797, 798, 800, 805, 809, 810, 811, 812, 813, 815, 817, 835, 836, 837, 843, 844, 850, 855, 859, 862, 865, 868, 869, 870, 871, 873, 876, 877, 878, 883, 886, 890, 891, 892, 893, 894, 897, 898, 899, 906, 910, 911, 941, 945, 948, 949, 950, 951, 952, 953, 954, 955, 961, 962, 963, 967, 968, 969, 970, 977, 978, 979, 980, 981, 982, 983, 984, 989, 990, 991, 998, 1002, 1003, 1031, 1034, 1035, 1037, 1038, 1039, 1046, 1083, 1084, 1085, 1086, 1087, 1088, 1092, 1109, 1110, 1111, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1136, 1137, 1138, 1139, 1140, 1144, 1145, 1147, 1148, 1149, 1151, 1152, 1156, 1157, 1158, 1164, 1165, 1166, 1167, 1169, 1171, 1180, 1185, 1186, 1188, 1189, 1190, 1192, 1195, 1200, 1203, 1215, 1217, 1220, 1227, 1230, 1231, 1232, 1235, 1240, 1241, 1242, 1245, 1246, 1247, 1248, 1250, 1251, 1255, 1256, 1261, 1262, 1264, 1265, 1267, 1268, 1272, 1285, 1287, 1288, 1290, 1293, 1294, 1298, 1299, 1304, 1305, 1306, 1308, 1309, 1311, 1312, 1313, 1314, 1318, 1319, 1320, 1321, 1324, 1331, 1332, 1333, 1334, 1335, 1337, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1425, 1426, 1427, 1428, 1429, 1436, 1440, 1443, 1444, 1445, 1446, 1447, 1449, 1450, 1451, 1454, 1456, 1457, 1459, 1460, 1467, 1471, 1472, 1475, 1476, 1477, 1478, 1479, 1480, 1482, 1483, 1484, 1501, 1504, 1505, 1506, 1507, 1509, 1511, 1512, 1513, 1515, 1516, 1518, 1519, 1522, 1523, 1524, 1525, 1527, 1529, 1531, 1532, 1534, 1538]}]}, "/bernard/dataset_construction/prep/repos/itext-java/sign/src/main/java/com/itextpdf/signatures/validation/v1/CRLValidator.java": {"class_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.signatures.validation.v1;\n", "\n", "import com.itextpdf.bouncycastleconnector.BouncyCastleFactoryCreator;\n", "import com.itextpdf.commons.bouncycastle.IBouncyCastleFactory;\n", "import com.itextpdf.commons.bouncycastle.asn1.IASN1Encodable;\n", "import com.itextpdf.commons.bouncycastle.asn1.IASN1Primitive;\n", "import com.itextpdf.commons.bouncycastle.asn1.x509.IDistributionPoint;\n", "import com.itextpdf.commons.bouncycastle.asn1.x509.IIssuingDistributionPoint;\n", "import com.itextpdf.commons.bouncycastle.asn1.x509.IReasonFlags;\n", "import com.itextpdf.commons.utils.DateTimeUtil;\n", "import com.itextpdf.commons.utils.MessageFormatUtil;\n", "import com.itextpdf.signatures.CertificateUtil;\n", "import com.itextpdf.signatures.IssuingCertificateRetriever;\n", "import com.itextpdf.signatures.TimestampConstants;\n", "import com.itextpdf.signatures.logs.SignLogMessageConstant;\n", "import com.itextpdf.signatures.validation.v1.context.CertificateSource;\n", "import com.itextpdf.signatures.validation.v1.context.ValidationContext;\n", "import com.itextpdf.signatures.validation.v1.context.ValidatorContext;\n", "import com.itextpdf.signatures.validation.v1.extensions.BasicConstraintsExtension;\n", "import com.itextpdf.signatures.validation.v1.report.CertificateReportItem;\n", "import com.itextpdf.signatures.validation.v1.report.ReportItem.ReportItemStatus;\n", "import com.itextpdf.signatures.validation.v1.report.ValidationReport;\n", "\n", "import java.io.IOException;\n", "import java.security.cert.Certificate;\n", "import java.security.cert.CRLReason;\n", "import java.security.cert.X509CRL;\n", "import java.security.cert.X509CRLEntry;\n", "import java.security.cert.X509Certificate;\n", "import java.time.Duration;\n", "import java.util.Date;\n", "import java.util.HashMap;\n", "import java.util.Map;\n", "\n", "import static com.itextpdf.signatures.validation.v1.RevocationDataValidator.SELF_SIGNED_CERTIFICATE;\n", "\n", "/**\n", " * Class that allows you to validate a certificate against a Certificate Revocation List (CRL) Response.\n", " */\n", "public class CRLValidator {\n", "    static final String CRL_CHECK = \"CRL response check.\";\n", "\n", "    static final String ATTRIBUTE_CERTS_ASSERTED = \"The onlyContainsAttributeCerts is asserted. Conforming CRLs \" +\n", "            \"issuers MUST set the onlyContainsAttributeCerts boolean to FALSE.\";\n", "    static final String CERTIFICATE_IS_EXPIRED =\n", "            \"Certificate is expired on {0} and could have been removed from the CRL.\";\n", "    static final String CERTIFICATE_IS_UNREVOKED = \"The certificate was unrevoked.\";\n", "    static final String CERTIFICATE_IS_NOT_IN_THE_CRL_SCOPE = \"Certificate isn't in the current CRL scope.\";\n", "    static final String CERTIFICATE_REVOKED = \"Certificate was revoked by {0} on {1}.\";\n", "    static final String CRL_ISSUER_NOT_FOUND = \"Unable to validate CRL response: no issuer certificate found.\";\n", "    static final String CRL_ISSUER_NO_COMMON_ROOT =\n", "            \"The CRL issuer does not share the root of the inspected certificate.\";\n", "    static final String CRL_INVALID = \"CRL response is invalid.\";\n", "    static final String FRESHNESS_CHECK = \"CRL response is not fresh enough: \" +\n", "            \"this update: {0}, validation date: {1}, freshness: {2}.\";\n", "    static final String ONLY_SOME_REASONS_CHECKED = \"Revocation status cannot be determined since \" +\n", "            \"not all reason codes are covered by the current CRL.\";\n", "    static final String SAME_REASONS_CHECK = \"CRLs that cover the same reason codes were already verified.\";\n", "    static final String UPDATE_DATE_BEFORE_CHECK_DATE = \"nextUpdate: {0} of CRLResponse is before validation date {1}.\";\n", "    static final String NEXT_UPDATE_VALIDATION = \"Using crl nextUpdate date as validation date.\";\n", "    static final String THIS_UPDATE_VALIDATION = \"Using crl thisUpdate date as validation date.\";\n", "\n", "    // All reasons without unspecified.\n", "    static final int ALL_REASONS = 32895;\n", "\n", "    private static final IBouncyCastleFactory FACTORY = BouncyCastleFactoryCreator.getFactory();\n", "\n", "    private final Map<Certificate, Integer> checkedReasonsMask = new HashMap<>();\n", "    private final IssuingCertificateRetriever certificateRetriever;\n", "    private final SignatureValidationProperties properties;\n", "    private final ValidatorChainBuilder builder;\n", "\n", "    /**\n", "     * Creates new {@link CRLValidator} instance.\n", "     *\n", "     * @param builder See {@link  ValidatorChainBuilder}\n", "     */\n", "    protected CRLValidator(ValidatorChainBuilder builder) {\n", "        this.certificateRetriever = builder.getCertificateRetriever();\n", "        this.properties = builder.getProperties();\n", "        this.builder = builder;\n", "    }\n", "\n", "    /**\n", "     * Validates a certificate against Certificate Revocation List (CRL) Responses.\n", "     *\n", "     * @param report         to store all the chain verification results\n", "     * @param context        the context in which to perform the validation\n", "     * @param certificate    the certificate to check against CRL response\n", "     * @param crl            the crl response to be validated\n", "     * @param validationDate validation date to check for\n", "     */\n", "    public void validate(ValidationReport report, ValidationContext context, X509Certificate certificate, X509CRL crl,\n", "            Date validationDate) {\n", "        ValidationContext localContext = context.setValidatorContext(ValidatorContext.CRL_VALIDATOR);\n", "        if (CertificateUtil.isSelfSigned(certificate)) {\n", "            report.addReportItem(new CertificateReportItem(certificate, CRL_CHECK, SELF_SIGNED_CERTIFICATE,\n", "                    ReportItemStatus.INFO));\n", "            return;\n", "        }\n", "        // Check that thisUpdate >= (validationDate - freshness).\n", "        Duration freshness = properties.getFreshness(localContext);\n", "        if (crl.getThisUpdate().before(DateTimeUtil.addMillisToDate(validationDate, -(long) freshness.toMillis()))) {\n", "            report.addReportItem(new CertificateReportItem(certificate, CRL_CHECK,\n", "                    MessageFormatUtil.format(FRESHNESS_CHECK, crl.getThisUpdate(), validationDate, freshness),\n", "                    ReportItemStatus.INDETERMINATE));\n", "            return;\n", "        }\n", "        // Check that the validation date is before the nextUpdate.\n", "        if (crl.getNextUpdate() != TimestampConstants.UNDEFINED_TIMESTAMP_DATE &&\n", "                validationDate.after(crl.getNextUpdate())) {\n", "            report.addReportItem(new CertificateReportItem(certificate, CRL_CHECK, MessageFormatUtil.format(\n", "                    UPDATE_DATE_BEFORE_CHECK_DATE, crl.getNextUpdate(), validationDate),\n", "                    ReportItemStatus.INDETERMINATE));\n", "            return;\n", "        }\n", "\n", "        // Check expiredCertOnCrl extension in case the certificate is expired.\n", "        if (certificate.getNotAfter().before(crl.getThisUpdate())) {\n", "            Date startExpirationDate = getExpiredCertsOnCRLExtensionDate(crl);\n", "            if (TimestampConstants.UNDEFINED_TIMESTAMP_DATE == startExpirationDate ||\n", "                    certificate.getNotAfter().before(startExpirationDate)) {\n", "                report.addReportItem(new CertificateReportItem(certificate, CRL_CHECK, MessageFormatUtil.format(\n", "                        CERTIFICATE_IS_EXPIRED, certificate.getNotAfter()), ReportItemStatus.INDETERMINATE));\n", "                return;\n", "            }\n", "        }\n", "\n", "        IIssuingDistributionPoint issuingDistPoint = getIssuingDistributionPointExtension(crl);\n", "        IDistributionPoint distributionPoint = null;\n", "        if (!issuingDistPoint.isNull()) {\n", "            // Verify that certificate is in the CRL scope using IDP extension.\n", "            boolean basicConstraintsCaAsserted = new BasicConstraintsExtension(true).existsInCertificate(certificate);\n", "            if ((issuingDistPoint.onlyContainsUserCerts() && basicConstraintsCaAsserted) ||\n", "                    (issuingDistPoint.onlyContainsCACerts() && !basicConstraintsCaAsserted)) {\n", "                report.addReportItem(new CertificateReportItem(certificate, CRL_CHECK,\n", "                        CERTIFICATE_IS_NOT_IN_THE_CRL_SCOPE, ReportItemStatus.INDETERMINATE));\n", "                return;\n", "            }\n", "            if (issuingDistPoint.onlyContainsAttributeCerts()) {\n", "                report.addReportItem(new CertificateReportItem(certificate, CRL_CHECK,\n", "                        ATTRIBUTE_CERTS_ASSERTED, ReportItemStatus.INDETERMINATE));\n", "                return;\n", "            }\n", "            // Try to retrieve corresponding DP from the certificate by name specified in the IDP.\n", "            if (!issuingDistPoint.getDistributionPoint().isNull()) {\n", "                distributionPoint = CertificateUtil.getDistributionPointByName(certificate,\n", "                        issuingDistPoint.getDistributionPoint());\n", "            }\n", "        }\n", "\n", "        int interimReasonsMask = computeInterimReasonsMask(issuingDistPoint, distributionPoint);\n", "        Integer reasonsMask = checkedReasonsMask.get(certificate);\n", "        if (reasonsMask != null) {\n", "            interimReasonsMask |= (int) reasonsMask;\n", "\n", "            // Verify that interim_reasons_mask includes one or more reasons that are not included in the reasons_mask.\n", "            if (interimReasonsMask == reasonsMask) {\n", "                report.addReportItem(\n", "                        new CertificateReportItem(certificate, CRL_CHECK, SAME_REASONS_CHECK, ReportItemStatus.INFO));\n", "            }\n", "        }\n", "\n", "        // Verify the CRL issuer.\n", "        verifyCrlIntegrity(report, localContext, certificate, crl);\n", "\n", "        // Check the status of the certificate.\n", "        verifyRevocation(report, certificate, validationDate, crl);\n", "\n", "        if (report.getValidationResult() == ValidationReport.ValidationResult.VALID) {\n", "            checkedReasonsMask.put(certificate, interimReasonsMask);\n", "        }\n", "\n", "        // If ((reasons_mask is all-reasons) OR (cert_status is not UNREVOKED)),\n", "        // then the revocation status has been determined.\n", "        if (interimReasonsMask != ALL_REASONS) {\n", "            report.addReportItem(new CertificateReportItem(certificate, CRL_CHECK,\n", "                    ONLY_SOME_REASONS_CHECKED, ReportItemStatus.INDETERMINATE));\n", "        }\n", "    }\n", "\n", "    private static void verifyRevocation(ValidationReport report, X509Certificate certificate,\n", "            Date verificationDate, X509CRL crl) {\n", "        X509CRLEntry revocation = crl.getRevokedCertificate(certificate.getSerialNumber());\n", "        if (revocation != null) {\n", "            Date revocationDate = revocation.getRevocationDate();\n", "            if (verificationDate.before(revocationDate)) {\n", "                report.addReportItem(new CertificateReportItem(certificate, CRL_CHECK, MessageFormatUtil.format(\n", "                        SignLogMessageConstant.VALID_CERTIFICATE_IS_REVOKED, revocationDate),\n", "                        ReportItemStatus.INFO));\n", "            } else if (CRLReason.REMOVE_FROM_CRL == revocation.getRevocationReason()) {\n", "                report.addReportItem(new CertificateReportItem(certificate, CRL_CHECK, MessageFormatUtil.format(\n", "                        CERTIFICATE_IS_UNREVOKED, revocationDate),\n", "                        ReportItemStatus.INFO));\n", "            } else {\n", "                report.addReportItem(new CertificateReportItem(certificate, CRL_CHECK, MessageFormatUtil.format(\n", "                        CERTIFICATE_REVOKED, crl.getIssuerX500Principal(), revocation.getRevocationDate()),\n", "                        ReportItemStatus.INVALID));\n", "            }\n", "        }\n", "    }\n", "\n", "    private static IIssuingDistributionPoint getIssuingDistributionPointExtension(X509CRL crl) {\n", "        IASN1Primitive issuingDistPointExtension = null;\n", "        try {\n", "            issuingDistPointExtension = CertificateUtil.getExtensionValue(crl,\n", "                    FACTORY.createExtension().getIssuingDistributionPoint().getId());\n", "        } catch (IOException e) {\n", "            // Ignore exception.\n", "        }\n", "        return FACTORY.createIssuingDistributionPoint(issuingDistPointExtension);\n", "    }\n", "\n", "    private static Date getExpiredCertsOnCRLExtensionDate(X509CRL crl) {\n", "        IASN1Encodable expiredCertsOnCRL = null;\n", "        try {\n", "            // The scope of a CRL containing this extension is extended to include the revocation status of the\n", "            // certificates that expired after the date specified in ExpiredCertsOnCRL or at that date.\n", "            expiredCertsOnCRL = CertificateUtil.getExtensionValue(crl,\n", "                    FACTORY.createExtension().getExpiredCertsOnCRL().getId());\n", "        } catch (IOException e) {\n", "            // Ignore exception.\n", "        }\n", "        if (expiredCertsOnCRL != null) {\n", "            try {\n", "                return FACTORY.createASN1GeneralizedTime(expiredCertsOnCRL).getDate();\n", "            } catch (Exception e) {\n", "                // Ignore exception.\n", "            }\n", "        }\n", "        return (Date) TimestampConstants.UNDEFINED_TIMESTAMP_DATE;\n", "    }\n", "\n", "    private static int computeInterimReasonsMask(IIssuingDistributionPoint issuingDistPoint,\n", "            IDistributionPoint distributionPoint) {\n", "        int interimReasonsMask = ALL_REASONS;\n", "        if (!issuingDistPoint.isNull()) {\n", "            IReasonFlags onlySomeReasons = issuingDistPoint.getOnlySomeReasons();\n", "            if (!onlySomeReasons.isNull()) {\n", "                interimReasonsMask &= onlySomeReasons.intValue();\n", "            }\n", "        }\n", "        if (distributionPoint != null) {\n", "            IReasonFlags reasons = distributionPoint.getReasons();\n", "            if (!reasons.isNull()) {\n", "                interimReasonsMask &= reasons.intValue();\n", "            }\n", "        }\n", "        return interimReasonsMask;\n", "    }\n", "\n", "    private void verifyCrlIntegrity(ValidationReport report, ValidationContext context, X509Certificate certificate,\n", "            X509CRL crl) {\n", "        Certificate[] certs = certificateRetriever.getCrlIssuerCertificates(crl);\n", "        if (certs.length == 0) {\n", "            report.addReportItem(new CertificateReportItem(certificate, CRL_CHECK, CRL_ISSUER_NOT_FOUND,\n", "                    ReportItemStatus.INDETERMINATE));\n", "            return;\n", "        }\n", "        Certificate crlIssuer = certs[0];\n", "        Certificate crlIssuerRoot = getRoot(crlIssuer);\n", "        Certificate subjectRoot = getRoot(certificate);\n", "        if (!crlIssuerRoot.equals(subjectRoot)) {\n", "            report.addReportItem(new CertificateReportItem(certificate, CRL_CHECK, CRL_ISSUER_NO_COMMON_ROOT,\n", "                    ReportItemStatus.INDETERMINATE));\n", "        }\n", "        try {\n", "            crl.verify(crlIssuer.getPublicKey());\n", "        } catch (Exception e) {\n", "            report.addReportItem(new CertificateReportItem(certificate, CRL_CHECK, CRL_INVALID, e,\n", "                    ReportItemStatus.INDETERMINATE));\n", "            return;\n", "        }\n", "        // Ideally this date should be the date this response was retrieved from the server.\n", "        Date crlIssuerDate;\n", "        if (TimestampConstants.UNDEFINED_TIMESTAMP_DATE != crl.getNextUpdate()) {\n", "            crlIssuerDate = crl.getNextUpdate();\n", "            report.addReportItem(new CertificateReportItem((X509Certificate) crlIssuer, CRL_CHECK,\n", "                    NEXT_UPDATE_VALIDATION, ReportItemStatus.INFO));\n", "        } else {\n", "            crlIssuerDate = crl.getThisUpdate();\n", "            report.addReportItem(new CertificateReportItem((X509Certificate) crlIssuer, CRL_CHECK,\n", "                    THIS_UPDATE_VALIDATION, ReportItemStatus.INFO));\n", "        }\n", "\n", "        builder.getCertificateChainValidator().validate(report,\n", "                context.setCertificateSource(CertificateSource.CRL_ISSUER),\n", "                (X509Certificate) crlIssuer, crlIssuerDate);\n", "    }\n", "\n", "    private Certificate getRoot(Certificate cert) {\n", "        Certificate[] chain = certificateRetriever.retrieveMissingCertificates(new Certificate[] {cert});\n", "        return chain[chain.length - 1];\n", "    }\n", "}\n"], "test_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.signatures.validation.v1;\n", "\n", "import com.itextpdf.bouncycastleconnector.BouncyCastleFactoryCreator;\n", "import com.itextpdf.commons.bouncycastle.IBouncyCastleFactory;\n", "import com.itextpdf.commons.utils.DateTimeUtil;\n", "import com.itextpdf.commons.utils.FileUtil;\n", "import com.itextpdf.signatures.CertificateUtil;\n", "import com.itextpdf.signatures.IssuingCertificateRetriever;\n", "import com.itextpdf.signatures.TimestampConstants;\n", "import com.itextpdf.signatures.logs.SignLogMessageConstant;\n", "import com.itextpdf.signatures.testutils.PemFileHelper;\n", "import com.itextpdf.signatures.testutils.TimeTestUtil;\n", "import com.itextpdf.signatures.testutils.builder.TestCrlBuilder;\n", "import com.itextpdf.signatures.validation.v1.context.CertificateSource;\n", "import com.itextpdf.signatures.validation.v1.context.TimeBasedContext;\n", "import com.itextpdf.signatures.validation.v1.context.ValidationContext;\n", "import com.itextpdf.signatures.validation.v1.context.ValidatorContext;\n", "import com.itextpdf.signatures.validation.v1.mocks.MockChainValidator;\n", "import com.itextpdf.signatures.validation.v1.report.ReportItem;\n", "import com.itextpdf.signatures.validation.v1.report.ValidationReport;\n", "import com.itextpdf.test.ExtendedITextTest;\n", "import com.itextpdf.test.annotations.type.BouncyCastleUnitTest;\n", "import org.junit.Assert;\n", "import org.junit.Before;\n", "import org.junit.BeforeClass;\n", "import org.junit.Test;\n", "import org.junit.experimental.categories.Category;\n", "\n", "import java.io.ByteArrayInputStream;\n", "import java.security.PrivateKey;\n", "import java.security.Security;\n", "import java.security.cert.Certificate;\n", "import java.security.cert.X509CRL;\n", "import java.security.cert.X509Certificate;\n", "import java.util.Arrays;\n", "import java.util.Collections;\n", "import java.util.Date;\n", "\n", "@Category(BouncyCastleUnitTest.class)\n", "public class CRLValidatorTest extends ExtendedITextTest {\n", "    private static final String SOURCE_FOLDER = \"./src/test/resources/com/itextpdf/signatures/validation/v1/CRLValidatorTest/\";\n", "    private static final IBouncyCastleFactory FACTORY = BouncyCastleFactoryCreator.getFactory();\n", "\n", "    private static final char[] KEY_PASSWORD = \"testpassphrase\".toCharArray();\n", "\n", "    private CRLValidator validator;\n", "    private MockChainValidator mockChainValidator;\n", "    private X509Certificate crlIssuerCert;\n", "    private X509Certificate signCert;\n", "    private PrivateKey crlIssuerKey;\n", "    private PrivateKey intermediateKey;\n", "    private IssuingCertificateRetriever certificateRetriever;\n", "\n", "    @BeforeClass\n", "    public static void setUpOnce() {\n", "        Security.addProvider(FACTORY.getProvider());\n", "    }\n", "\n", "    @Before\n", "    public void setUp() {\n", "        certificateRetriever = new IssuingCertificateRetriever();\n", "        SignatureValidationProperties parameters = new SignatureValidationProperties();\n", "        mockChainValidator = new MockChainValidator();\n", "        ValidatorChainBuilder builder = new ValidatorChainBuilder()\n", "                .withIssuingCertificateRetriever(certificateRetriever)\n", "                .withSignatureValidationProperties(parameters)\n", "                .withCertificateChainValidator(mockChainValidator);\n", "        validator = new CRLValidator(builder);\n", "    }\n", "\n", "    @Test\n", "    public void happyPathTest() throws Exception {\n", "        retrieveTestResources(\"happyPath\");\n", "        byte[] crl = createCrl(\n", "                crlIssuerCert,\n", "                crlIssuerKey,\n", "                DateTimeUtil.addDaysToDate(TimeTestUtil.TEST_DATE_TIME, -5),\n", "                DateTimeUtil.addDaysToDate(TimeTestUtil.TEST_DATE_TIME, +5)\n", "        );\n", "\n", "        ValidationReport report = performValidation(\"happyPath\", TimeTestUtil.TEST_DATE_TIME, crl);\n", "        AssertValidationReport.assertThat(report, a -> a\n", "                .hasStatus(ValidationReport.ValidationResult.VALID));\n", "    }\n", "\n", "    @Test\n", "    public void nextUpdateBeforeValidationTest() throws Exception {\n", "        retrieveTestResources(\"happyPath\");\n", "        Date nextUpdate = DateTimeUtil.addDaysToDate(TimeTestUtil.TEST_DATE_TIME, -5);\n", "        byte[] crl = createCrl(\n", "                crlIssuerCert,\n", "                crlIssuerKey,\n", "                DateTimeUtil.addDaysToDate(TimeTestUtil.TEST_DATE_TIME, -15),\n", "                nextUpdate\n", "        );\n", "        ValidationReport report = performValidation(\"happyPath\", TimeTestUtil.TEST_DATE_TIME, crl);\n", "        AssertValidationReport.assertThat(report, a -> a\n", "                .hasStatus(ValidationReport.ValidationResult.INDETERMINATE)\n", "                .hasLogItem(la -> la\n", "                        .withMessage(CRLValidator.UPDATE_DATE_BEFORE_CHECK_DATE, l -> nextUpdate, l -> TimeTestUtil.TEST_DATE_TIME)\n", "                ));\n", "    }\n", "\n", "    @Test\n", "    public void chainValidatorUsageTest() throws Exception {\n", "        retrieveTestResources(\"happyPath\");\n", "        byte[] crl = createCrl(\n", "                crlIssuerCert,\n", "                crlIssuerKey,\n", "                DateTimeUtil.addDaysToDate(TimeTestUtil.TEST_DATE_TIME, -5),\n", "                DateTimeUtil.addDaysToDate(TimeTestUtil.TEST_DATE_TIME, +5)\n", "        );\n", "        ValidationReport report = performValidation(\"happyPath\", TimeTestUtil.TEST_DATE_TIME, crl);\n", "\n", "        Assert.assertEquals(ValidationReport.ValidationResult.VALID, report.getValidationResult());\n", "\n", "        Assert.assertEquals(1, mockChainValidator.verificationCalls.size());\n", "        Assert.assertEquals(crlIssuerCert, mockChainValidator.verificationCalls.get(0).certificate);\n", "        Assert.assertEquals(CertificateSource.CRL_ISSUER,\n", "                mockChainValidator.verificationCalls.get(0).context.getCertificateSource());\n", "        Assert.assertEquals(ValidatorContext.CRL_VALIDATOR,\n", "                mockChainValidator.verificationCalls.get(0).context.getValidatorContext());\n", "    }\n", "\n", "    @Test\n", "    public void issuerCertificateIsNotFoundTest() throws Exception {\n", "        retrieveTestResources(\"missingIssuer\");\n", "        byte[] crl = createCrl(\n", "                crlIssuerCert,\n", "                crlIssuerKey,\n", "                DateTimeUtil.addDaysToDate(TimeTestUtil.TEST_DATE_TIME, -5),\n", "                DateTimeUtil.addDaysToDate(TimeTestUtil.TEST_DATE_TIME, +5)\n", "        );\n", "        ValidationReport report = performValidation(\"missingIssuer\", TimeTestUtil.TEST_DATE_TIME, crl);\n", "        AssertValidationReport.assertThat(report, a -> a\n", "                .hasStatus(ValidationReport.ValidationResult.INDETERMINATE)\n", "                .hasLogItem(la -> la\n", "                        .withMessage(CRLValidator.CRL_ISSUER_NOT_FOUND))\n", "        );\n", "    }\n", "\n", "    @Test\n", "    public void crlIssuerAndSignCertHaveNoSharedRootTest() throws Exception {\n", "        retrieveTestResources(\"crlIssuerAndSignCertHaveNoSharedRoot\");\n", "        byte[] crl = createCrl(\n", "                crlIssuerCert,\n", "                crlIssuerKey,\n", "                DateTimeUtil.addDaysToDate(TimeTestUtil.TEST_DATE_TIME, -5),\n", "                DateTimeUtil.addDaysToDate(TimeTestUtil.TEST_DATE_TIME, +5)\n", "        );\n", "        ValidationReport report = performValidation(\"crlIssuerAndSignCertHaveNoSharedRoot\",\n", "                TimeTestUtil.TEST_DATE_TIME, crl);\n", "        AssertValidationReport.assertThat(report, a -> a\n", "                .hasStatus(ValidationReport.ValidationResult.INDETERMINATE)\n", "                .hasLogItem(la -> la\n", "                        .withMessage(CRLValidator.CRL_ISSUER_NO_COMMON_ROOT))\n", "        );\n", "    }\n", "\n", "    @Test\n", "    // CRL has the certificate revoked before signing date\n", "    public void crlIssuerRevokedBeforeSigningDate() throws Exception {\n", "        retrieveTestResources(\"crlIssuerRevokedBeforeSigningDate\");\n", "        Date revocationDate = DateTimeUtil.addDaysToDate(TimeTestUtil.TEST_DATE_TIME, -2);\n", "        byte[] crl = createCrl(\n", "                crlIssuerCert,\n", "                crlIssuerKey,\n", "                DateTimeUtil.addDaysToDate(TimeTestUtil.TEST_DATE_TIME, -5),\n", "                DateTimeUtil.addDaysToDate(TimeTestUtil.TEST_DATE_TIME, +5),\n", "                signCert, revocationDate, 1\n", "\n", "        );\n", "        ValidationReport report = performValidation(\"crlIssuerRevokedBeforeSigningDate\",\n", "                TimeTestUtil.TEST_DATE_TIME, crl);\n", "        AssertValidationReport.assertThat(report, a -> a\n", "                .hasLogItem(al -> al\n", "                        .withStatus(ReportItem.ReportItemStatus.INVALID)\n", "                        .withMessage(CRLValidator.CERTIFICATE_REVOKED, i -> crlIssuerCert.getSubjectX500Principal(),\n", "                                i -> revocationDate))\n", "        );\n", "\n", "    }\n", "\n", "    @Test\n", "    // CRL has the certificate revoked after signing date\n", "    public void crlRevokedAfterSigningDate() throws Exception {\n", "        retrieveTestResources(\"happyPath\");\n", "        Date revocationDate = DateTimeUtil.addDaysToDate(TimeTestUtil.TEST_DATE_TIME, +20);\n", "        byte[] crl = createCrl(\n", "                crlIssuerCert,\n", "                crlIssuerKey,\n", "                DateTimeUtil.addDaysToDate(TimeTestUtil.TEST_DATE_TIME, +18),\n", "                DateTimeUtil.addDaysToDate(TimeTestUtil.TEST_DATE_TIME, +23),\n", "                signCert, revocationDate, 1\n", "\n", "        );\n", "        ValidationReport report = performValidation(\"happyPath\",\n", "                TimeTestUtil.TEST_DATE_TIME, crl);\n", "        AssertValidationReport.assertThat(report, a -> a\n", "                .hasLogItem(la -> la\n", "                        .withMessage(SignLogMessageConstant.VALID_CERTIFICATE_IS_REVOKED, i -> revocationDate)\n", "                        .withStatus(ReportItem.ReportItemStatus.INFO)\n", "                        .withCertificate(signCert)\n", "                ));\n", "    }\n", "\n", "    @Test\n", "    //CRL response is invalid (signature not matching)\n", "    public void crlSignatureMismatch() throws Exception {\n", "        retrieveTestResources(\"happyPath\");\n", "        byte[] crl = createCrl(\n", "                crlIssuerCert,\n", "                intermediateKey,\n", "                DateTimeUtil.addDaysToDate(TimeTestUtil.TEST_DATE_TIME, +18),\n", "                DateTimeUtil.addDaysToDate(TimeTestUtil.TEST_DATE_TIME, +23),\n", "                signCert, DateTimeUtil.addDaysToDate(TimeTestUtil.TEST_DATE_TIME, +20), 1\n", "\n", "        );\n", "        ValidationReport report = performValidation(\"happyPath\",\n", "                TimeTestUtil.TEST_DATE_TIME, crl);\n", "        AssertValidationReport.assertThat(report, a -> a\n", "                .hasLogItem(la -> la\n", "                        .withMessage(CRLValidator.CRL_INVALID)\n", "                        .withStatus(ReportItem.ReportItemStatus.INDETERMINATE)));\n", "    }\n", "\n", "    @Test\n", "    public void crlContainsOnlyCACertsTest() throws Exception {\n", "        String crlPath = SOURCE_FOLDER + \"issuingDistributionPointTest/onlyCA.crl\";\n", "        ValidationReport report = checkCrlScope(crlPath);\n", "        AssertValidationReport.assertThat(report, a -> a\n", "                .hasLogItem(la -> la\n", "                        .withMessage(CRLValidator.CERTIFICATE_IS_NOT_IN_THE_CRL_SCOPE)\n", "                        .withStatus(ReportItem.ReportItemStatus.INDETERMINATE)));\n", "    }\n", "\n", "    @Test\n", "    public void crlContainsOnlyUserCertsTest() throws Exception {\n", "        String crlPath = SOURCE_FOLDER + \"issuingDistributionPointTest/onlyUser.crl\";\n", "        ValidationReport report = checkCrlScope(crlPath);\n", "        Assert.assertEquals(ValidationReport.ValidationResult.VALID, report.getValidationResult());\n", "    }\n", "\n", "    @Test\n", "    public void crlContainsOnlyAttributeCertsTest() throws Exception {\n", "        String crlPath = SOURCE_FOLDER + \"issuingDistributionPointTest/onlyAttr.crl\";\n", "        ValidationReport report = checkCrlScope(crlPath);\n", "        AssertValidationReport.assertThat(report, a -> a\n", "                .hasStatus(ValidationReport.ValidationResult.INDETERMINATE)\n", "                .hasLogItem(la -> la\n", "                        .withMessage(CRLValidator.ATTRIBUTE_CERTS_ASSERTED)));\n", "    }\n", "\n", "    @Test\n", "    public void onlySomeReasonsTest() throws Exception {\n", "        String root = SOURCE_FOLDER + \"issuingDistributionPointTest/root.pem\";\n", "        String sign = SOURCE_FOLDER + \"issuingDistributionPointTest/sign.pem\";\n", "        X509Certificate rootCert = (X509Certificate) PemFileHelper.readFirstChain(root)[0];\n", "        PrivateKey rootKey = PemFileHelper.readFirstKey(root, KEY_PASSWORD);\n", "        X509Certificate signCert = (X509Certificate) PemFileHelper.readFirstChain(sign)[0];\n", "        TestCrlBuilder builder = new TestCrlBuilder(rootCert, rootKey);\n", "        builder.addExtension(FACTORY.createExtension().getIssuingDistributionPoint(), true,\n", "                FACTORY.createIssuingDistributionPoint(null, false, false,\n", "                        FACTORY.createReasonFlags(CRLValidator.ALL_REASONS - 31), false, false));\n", "        certificateRetriever.setTrustedCertificates(Collections.singletonList(rootCert));\n", "        ValidationReport report = new ValidationReport();\n", "        ValidationContext context = new ValidationContext(\n", "                ValidatorContext.REVOCATION_DATA_VALIDATOR, CertificateSource.SIGNER_CERT,\n", "                TimeBasedContext.PRESENT);\n", "        validator.validate(report, context, signCert,\n", "                (X509CRL) CertificateUtil.parseCrlFromStream(new ByteArrayInputStream(builder.makeCrl())),\n", "                TimeTestUtil.TEST_DATE_TIME);\n", "        AssertValidationReport.assertThat(report, a -> a\n", "                .hasStatus(ValidationReport.ValidationResult.INDETERMINATE)\n", "                .hasLogItem(al -> al\n", "                        .withMessage(CRLValidator.ONLY_SOME_REASONS_CHECKED)\n", "                        .withCertificate(signCert)\n", "                )\n", "        );\n", "    }\n", "\n", "    @Test\n", "    public void checkLessReasonsTest() throws Exception {\n", "        String fullCrlPath = SOURCE_FOLDER + \"issuingDistributionPointTest/onlyUser.crl\";\n", "        String root = SOURCE_FOLDER + \"issuingDistributionPointTest/root.pem\";\n", "        String sign = SOURCE_FOLDER + \"issuingDistributionPointTest/sign.pem\";\n", "        X509Certificate rootCert = (X509Certificate) PemFileHelper.readFirstChain(root)[0];\n", "        PrivateKey rootKey = PemFileHelper.readFirstKey(root, KEY_PASSWORD);\n", "        X509Certificate signCert = (X509Certificate) PemFileHelper.readFirstChain(sign)[0];\n", "        TestCrlBuilder builder = new TestCrlBuilder(rootCert, rootKey);\n", "        builder.addExtension(FACTORY.createExtension().getIssuingDistributionPoint(), true,\n", "                FACTORY.createIssuingDistributionPoint(null, false, false,\n", "                        FACTORY.createReasonFlags(CRLValidator.ALL_REASONS - 31), false, false));\n", "        certificateRetriever.setTrustedCertificates(Collections.singletonList(rootCert));\n", "        ValidationReport report = new ValidationReport();\n", "        ValidationContext context = new ValidationContext(\n", "                ValidatorContext.REVOCATION_DATA_VALIDATOR, CertificateSource.SIGNER_CERT,\n", "                TimeBasedContext.PRESENT);\n", "        // Validate full CRL.\n", "        validator.validate(report, context, signCert,\n", "                (X509CRL) CertificateUtil.parseCrlFromStream(FileUtil.getInputStreamForFile(fullCrlPath)),\n", "                TimeTestUtil.TEST_DATE_TIME);\n", "        // Validate CRL with onlySomeReasons.\n", "        validator.validate(report, context, signCert,\n", "                (X509CRL) CertificateUtil.parseCrlFromStream(new ByteArrayInputStream(builder.makeCrl())),\n", "                TimeTestUtil.TEST_DATE_TIME);\n", "        AssertValidationReport.assertThat(report, a -> a\n", "                .hasStatus(ValidationReport.ValidationResult.VALID)\n", "                .hasLogItem(al -> al\n", "                        .withMessage(CRLValidator.SAME_REASONS_CHECK))\n", "        );\n", "    }\n", "\n", "    @Test\n", "    public void removeFromCrlTest() throws Exception {\n", "        String root = SOURCE_FOLDER + \"issuingDistributionPointTest/root.pem\";\n", "        String sign = SOURCE_FOLDER + \"issuingDistributionPointTest/sign.pem\";\n", "        X509Certificate rootCert = (X509Certificate) PemFileHelper.readFirstChain(root)[0];\n", "        PrivateKey rootKey = PemFileHelper.readFirstKey(root, KEY_PASSWORD);\n", "        X509Certificate signCert = (X509Certificate) PemFileHelper.readFirstChain(sign)[0];\n", "        TestCrlBuilder builder = new TestCrlBuilder(rootCert, rootKey);\n", "        builder.addCrlEntry(signCert, DateTimeUtil.addDaysToDate(TimeTestUtil.TEST_DATE_TIME, -1),\n", "                FACTORY.createCRLReason().getRemoveFromCRL());\n", "        certificateRetriever.setTrustedCertificates(Collections.singletonList(rootCert));\n", "        ValidationReport report = new ValidationReport();\n", "        ValidationContext context = new ValidationContext(\n", "                ValidatorContext.REVOCATION_DATA_VALIDATOR, CertificateSource.SIGNER_CERT,\n", "                TimeBasedContext.PRESENT);\n", "        validator.validate(report, context, signCert,\n", "                (X509CRL) CertificateUtil.parseCrlFromStream(new ByteArrayInputStream(builder.makeCrl())),\n", "                TimeTestUtil.TEST_DATE_TIME);\n", "        AssertValidationReport.assertThat(report, a -> a\n", "                .hasStatus(ValidationReport.ValidationResult.VALID)\n", "                .hasLogItem(la -> la\n", "                        .withCertificate(signCert)\n", "                        .withCheckName(CRLValidator.CRL_CHECK)\n", "                        .withMessage(CRLValidator.CERTIFICATE_IS_UNREVOKED))\n", "        );\n", "    }\n", "\n", "    @Test\n", "    public void fullCrlButDistributionPointWithReasonsTest() throws Exception {\n", "        Date checkDate = TimeTestUtil.TEST_DATE_TIME;\n", "        X509Certificate caCert = (X509Certificate)\n", "                PemFileHelper.readFirstChain(SOURCE_FOLDER + \"issuingDistributionPointTest/rootCert.pem\")[0];\n", "        PrivateKey caPrivateKey =\n", "                PemFileHelper.readFirstKey(SOURCE_FOLDER + \"issuingDistributionPointTest/rootCert.pem\", KEY_PASSWORD);\n", "        X509Certificate cert = (X509Certificate)\n", "                PemFileHelper.readFirstChain(SOURCE_FOLDER + \"issuingDistributionPointTest/certWithDPReasons.pem\")[0];\n", "        TestCrlBuilder builder = new TestCrlBuilder(caCert, caPrivateKey);\n", "        builder.addExtension(FACTORY.createExtension().getIssuingDistributionPoint(), true,\n", "                FACTORY.createIssuingDistributionPoint(FACTORY.createDistributionPointName(FACTORY.createCRLDistPoint(\n", "                                CertificateUtil.getExtensionValue(cert,\n", "                                        FACTORY.createExtension().getCRlDistributionPoints().getId()))\n", "                        .getDistributionPoints()[0].getCRLIssuer()), false, false, null, false, false));\n", "\n", "        certificateRetriever.setTrustedCertificates(Collections.singletonList(caCert));\n", "        ValidationReport report = new ValidationReport();\n", "        ValidationContext context = new ValidationContext(\n", "                ValidatorContext.REVOCATION_DATA_VALIDATOR, CertificateSource.SIGNER_CERT,\n", "                TimeBasedContext.PRESENT);\n", "        validator.validate(report, context, cert,\n", "                (X509CRL) CertificateUtil.parseCrlFromStream(new ByteArrayInputStream(builder.makeCrl())), checkDate);\n", "\n", "        AssertValidationReport.assertThat(report, a -> a\n", "                .hasStatus(ValidationReport.ValidationResult.INDETERMINATE)\n", "                .hasLogItem(la -> la\n", "                        .withStatus(ReportItem.ReportItemStatus.INDETERMINATE)\n", "                        .withCertificate(cert)\n", "                        .withMessage(CRLValidator.ONLY_SOME_REASONS_CHECKED))\n", "        );\n", "    }\n", "\n", "    @Test\n", "    public void noExpiredCertOnCrlExtensionTest() throws Exception {\n", "        // Certificate is expired on 01/01/2400.\n", "        retrieveTestResources(\"happyPath\");\n", "        TestCrlBuilder builder = new TestCrlBuilder(crlIssuerCert, crlIssuerKey,\n", "                DateTimeUtil.addYearsToDate(TimeTestUtil.TEST_DATE_TIME, 401));\n", "        byte[] crl = builder.makeCrl();\n", "        ValidationReport report = performValidation(\"happyPath\", TimeTestUtil.TEST_DATE_TIME, crl);\n", "        AssertValidationReport.assertThat(report, a -> a\n", "                .hasStatus(ValidationReport.ValidationResult.INDETERMINATE)\n", "                .hasNumberOfFailures(1)\n", "                .hasNumberOfLogs(1)\n", "                .hasLogItem(l -> l.withCheckName(CRLValidator.CRL_CHECK)\n", "                        .withMessage(CRLValidator.CERTIFICATE_IS_EXPIRED, i -> signCert.getNotAfter())\n", "                        .withCertificate(signCert))\n", "        );\n", "    }\n", "\n", "    @Test\n", "    public void certExpiredBeforeDateFromExpiredCertOnCrlTest() throws Exception {\n", "        // Certificate is expired on 01/01/2400.\n", "        retrieveTestResources(\"happyPath\");\n", "        TestCrlBuilder builder = new TestCrlBuilder(crlIssuerCert, crlIssuerKey,\n", "                DateTimeUtil.addYearsToDate(TimeTestUtil.TEST_DATE_TIME, 401));\n", "        builder.addExtension(FACTORY.createExtension().getExpiredCertsOnCRL(), false,\n", "                FACTORY.createASN1GeneralizedTime(DateTimeUtil.addYearsToDate(TimeTestUtil.TEST_DATE_TIME, 400)));\n", "        byte[] crl = builder.makeCrl();\n", "        ValidationReport report = performValidation(\"happyPath\", TimeTestUtil.TEST_DATE_TIME, crl);\n", "        AssertValidationReport.assertThat(report, a -> a\n", "                .hasStatus(ValidationReport.ValidationResult.INDETERMINATE)\n", "                .hasNumberOfFailures(1)\n", "                .hasNumberOfLogs(1)\n", "                .hasLogItem(l -> l\n", "                        .withCheckName(CRLValidator.CRL_CHECK)\n", "                        .withMessage(CRLValidator.CERTIFICATE_IS_EXPIRED, i -> signCert.getNotAfter())\n", "                        .withCertificate(signCert))\n", "        );\n", "    }\n", "\n", "    @Test\n", "    public void certExpiredAfterDateFromExpiredCertOnCrlExtensionTest() throws Exception {\n", "        // Certificate is expired on 01/01/2400.\n", "        retrieveTestResources(\"happyPath\");\n", "        TestCrlBuilder builder = new TestCrlBuilder(crlIssuerCert, crlIssuerKey,\n", "                DateTimeUtil.addYearsToDate(TimeTestUtil.TEST_DATE_TIME, 401));\n", "        builder.addExtension(FACTORY.createExtension().getExpiredCertsOnCRL(), false,\n", "                FACTORY.createASN1GeneralizedTime(DateTimeUtil.addYearsToDate(TimeTestUtil.TEST_DATE_TIME, 399)));\n", "        byte[] crl = builder.makeCrl();\n", "        ValidationReport report = performValidation(\"happyPath\", TimeTestUtil.TEST_DATE_TIME, crl);\n", "        AssertValidationReport.assertThat(report, a -> a\n", "                .hasStatus(ValidationReport.ValidationResult.VALID)\n", "                .hasNumberOfFailures(0));\n", "    }\n", "\n", "    private ValidationReport checkCrlScope(String crlPath) throws Exception {\n", "        String root = SOURCE_FOLDER + \"issuingDistributionPointTest/root.pem\";\n", "        String sign = SOURCE_FOLDER + \"issuingDistributionPointTest/sign.pem\";\n", "        X509Certificate rootCert = (X509Certificate) PemFileHelper.readFirstChain(root)[0];\n", "        X509Certificate signCert = (X509Certificate) PemFileHelper.readFirstChain(sign)[0];\n", "        certificateRetriever.setTrustedCertificates(Collections.singletonList(rootCert));\n", "        ValidationReport report = new ValidationReport();\n", "        ValidationContext context = new ValidationContext(\n", "                ValidatorContext.REVOCATION_DATA_VALIDATOR, CertificateSource.SIGNER_CERT,\n", "                TimeBasedContext.PRESENT);\n", "        validator.validate(report, context, signCert,\n", "                (X509CRL) CertificateUtil.parseCrlFromStream(FileUtil.getInputStreamForFile(crlPath)),\n", "                TimeTestUtil.TEST_DATE_TIME);\n", "        return report;\n", "    }\n", "\n", "    private void retrieveTestResources(String path) throws Exception {\n", "        String resourcePath = SOURCE_FOLDER + path + \"/\";\n", "        crlIssuerCert = (X509Certificate) PemFileHelper.readFirstChain(resourcePath + \"crl-issuer.cert.pem\")[0];\n", "        signCert = (X509Certificate) PemFileHelper.readFirstChain(resourcePath + \"sign.cert.pem\")[0];\n", "        crlIssuerKey = PemFileHelper.readFirstKey(SOURCE_FOLDER + \"keys/crl-key.pem\", KEY_PASSWORD);\n", "        intermediateKey = PemFileHelper.readFirstKey(SOURCE_FOLDER + \"keys/im_key.pem\", KEY_PASSWORD);\n", "    }\n", "\n", "\n", "    private byte[] createCrl(X509Certificate issuerCert, PrivateKey issuerKey, Date issueDate, Date nextUpdate)\n", "            throws Exception {\n", "        return createCrl(issuerCert, issuerKey, issueDate, nextUpdate,\n", "                null, (Date) TimestampConstants.UNDEFINED_TIMESTAMP_DATE, 0);\n", "    }\n", "\n", "    private byte[] createCrl(X509Certificate issuerCert, PrivateKey issuerKey, Date issueDate, Date nextUpdate,\n", "                             X509Certificate revokedCert, Date revocationDate, int reason)\n", "            throws Exception {\n", "        TestCrlBuilder builder = new TestCrlBuilder(issuerCert, issuerKey, issueDate);\n", "        if (nextUpdate != null) {\n", "            builder.setNextUpdate(nextUpdate);\n", "        }\n", "        if (revocationDate != TimestampConstants.UNDEFINED_TIMESTAMP_DATE && revokedCert != null) {\n", "            builder.addCrlEntry(revokedCert, revocationDate, reason);\n", "        }\n", "        return builder.makeCrl();\n", "    }\n", "\n", "    public ValidationReport performValidation(String testName, Date testDate, byte[] encodedCrl)\n", "            throws Exception {\n", "        String resourcePath = SOURCE_FOLDER + testName + '/';\n", "        String missingCertsFileName = resourcePath + \"chain.pem\";\n", "        Certificate[] knownCerts = PemFileHelper.readFirstChain(missingCertsFileName);\n", "\n", "        certificateRetriever.addKnownCertificates(Arrays.asList(knownCerts));\n", "\n", "\n", "        X509Certificate certificateUnderTest =\n", "                (X509Certificate) PemFileHelper.readFirstChain(resourcePath + \"sign.cert.pem\")[0];\n", "        ValidationReport result = new ValidationReport();\n", "        ValidationContext context = new ValidationContext(\n", "                ValidatorContext.REVOCATION_DATA_VALIDATOR, CertificateSource.SIGNER_CERT,\n", "                TimeBasedContext.PRESENT);\n", "        validator.validate(result, context, certificateUnderTest, (X509CRL) CertificateUtil.parseCrlFromStream(\n", "                new ByteArrayInputStream(encodedCrl)), testDate);\n", "        return result;\n", "    }\n", "}\n"], "method_lines_dic": {"CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)": [115, 202], "CRLValidator::::verifyRevocation(com.itextpdf.signatures.validation.v1.report.ValidationReport,java.security.cert.X509Certificate,java.util.Date,java.security.cert.X509CRL)": [204, 223], "CRLValidator::::getIssuingDistributionPointExtension(java.security.cert.X509CRL)": [225, 234], "CRLValidator::::getExpiredCertsOnCRLExtensionDate(java.security.cert.X509CRL)": [236, 254], "CRLValidator::::verifyCrlIntegrity(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL)": [274, 311], "CRLValidator::::getRoot(java.security.cert.Certificate)": [313, 316]}, "test_method_lines_dic": {"CRLValidatorTest::::setUpOnce()": [76, 79], "CRLValidatorTest::::setUp()": [81, 91], "CRLValidatorTest::::happyPathTest()": [93, 106], "CRLValidatorTest::::nextUpdateBeforeValidationTest()": [108, 124], "CRLValidatorTest::::chainValidatorUsageTest()": [126, 145], "CRLValidatorTest::::issuerCertificateIsNotFoundTest()": [147, 162], "CRLValidatorTest::::crlIssuerAndSignCertHaveNoSharedRootTest()": [164, 180], "CRLValidatorTest::::crlIssuerRevokedBeforeSigningDate()": [182, 204], "CRLValidatorTest::::crlRevokedAfterSigningDate()": [206, 227], "CRLValidatorTest::::crlSignatureMismatch()": [229, 247], "CRLValidatorTest::::crlContainsOnlyCACertsTest()": [249, 257], "CRLValidatorTest::::crlContainsOnlyUserCertsTest()": [259, 264], "CRLValidatorTest::::crlContainsOnlyAttributeCertsTest()": [266, 274], "CRLValidatorTest::::onlySomeReasonsTest()": [276, 302], "CRLValidatorTest::::checkLessReasonsTest()": [304, 334], "CRLValidatorTest::::removeFromCrlTest()": [336, 361], "CRLValidatorTest::::fullCrlButDistributionPointWithReasonsTest()": [363, 394], "CRLValidatorTest::::noExpiredCertOnCrlExtensionTest()": [396, 412], "CRLValidatorTest::::certExpiredBeforeDateFromExpiredCertOnCrlTest()": [414, 433], "CRLValidatorTest::::certExpiredAfterDateFromExpiredCertOnCrlExtensionTest()": [435, 448], "CRLValidatorTest::::checkCrlScope(java.lang.String)": [450, 464], "CRLValidatorTest::::retrieveTestResources(java.lang.String)": [466, 472], "CRLValidatorTest::::createCrl(java.security.cert.X509Certificate,java.security.PrivateKey,java.util.Date,java.util.Date)": [475, 479], "CRLValidatorTest::::createCrl(java.security.cert.X509Certificate,java.security.PrivateKey,java.util.Date,java.util.Date,java.security.cert.X509Certificate,java.util.Date,int)": [481, 492], "CRLValidatorTest::::performValidation(java.lang.String,java.util.Date,byte[])": [494, 512]}, "reverse_method_lines_dic": {"115": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "116": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "117": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "118": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "119": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "120": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "121": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "122": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "123": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "124": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "125": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "126": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "127": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "128": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "129": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "130": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "131": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "132": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "133": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "134": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "135": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "136": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "137": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "138": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "139": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "140": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "141": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "142": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "143": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "144": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "145": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "146": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "147": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "148": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "149": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "150": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "151": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "152": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "153": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "154": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "155": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "156": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "157": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "158": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "159": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "160": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "161": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "162": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "163": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "164": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "165": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "166": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "167": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "168": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "169": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "170": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "171": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "172": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "173": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "174": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "175": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "176": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "177": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "178": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "179": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "180": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "181": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "182": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "183": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "184": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "185": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "186": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "187": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "188": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "189": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "190": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "191": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "192": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "193": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "194": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "195": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "196": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "197": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "198": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "199": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "200": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "201": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "202": "CRLValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL,java.util.Date)", "204": "CRLValidator::::verifyRevocation(com.itextpdf.signatures.validation.v1.report.ValidationReport,java.security.cert.X509Certificate,java.util.Date,java.security.cert.X509CRL)", "205": "CRLValidator::::verifyRevocation(com.itextpdf.signatures.validation.v1.report.ValidationReport,java.security.cert.X509Certificate,java.util.Date,java.security.cert.X509CRL)", "206": "CRLValidator::::verifyRevocation(com.itextpdf.signatures.validation.v1.report.ValidationReport,java.security.cert.X509Certificate,java.util.Date,java.security.cert.X509CRL)", "207": "CRLValidator::::verifyRevocation(com.itextpdf.signatures.validation.v1.report.ValidationReport,java.security.cert.X509Certificate,java.util.Date,java.security.cert.X509CRL)", "208": "CRLValidator::::verifyRevocation(com.itextpdf.signatures.validation.v1.report.ValidationReport,java.security.cert.X509Certificate,java.util.Date,java.security.cert.X509CRL)", "209": "CRLValidator::::verifyRevocation(com.itextpdf.signatures.validation.v1.report.ValidationReport,java.security.cert.X509Certificate,java.util.Date,java.security.cert.X509CRL)", "210": "CRLValidator::::verifyRevocation(com.itextpdf.signatures.validation.v1.report.ValidationReport,java.security.cert.X509Certificate,java.util.Date,java.security.cert.X509CRL)", "211": "CRLValidator::::verifyRevocation(com.itextpdf.signatures.validation.v1.report.ValidationReport,java.security.cert.X509Certificate,java.util.Date,java.security.cert.X509CRL)", "212": "CRLValidator::::verifyRevocation(com.itextpdf.signatures.validation.v1.report.ValidationReport,java.security.cert.X509Certificate,java.util.Date,java.security.cert.X509CRL)", "213": "CRLValidator::::verifyRevocation(com.itextpdf.signatures.validation.v1.report.ValidationReport,java.security.cert.X509Certificate,java.util.Date,java.security.cert.X509CRL)", "214": "CRLValidator::::verifyRevocation(com.itextpdf.signatures.validation.v1.report.ValidationReport,java.security.cert.X509Certificate,java.util.Date,java.security.cert.X509CRL)", "215": "CRLValidator::::verifyRevocation(com.itextpdf.signatures.validation.v1.report.ValidationReport,java.security.cert.X509Certificate,java.util.Date,java.security.cert.X509CRL)", "216": "CRLValidator::::verifyRevocation(com.itextpdf.signatures.validation.v1.report.ValidationReport,java.security.cert.X509Certificate,java.util.Date,java.security.cert.X509CRL)", "217": "CRLValidator::::verifyRevocation(com.itextpdf.signatures.validation.v1.report.ValidationReport,java.security.cert.X509Certificate,java.util.Date,java.security.cert.X509CRL)", "218": "CRLValidator::::verifyRevocation(com.itextpdf.signatures.validation.v1.report.ValidationReport,java.security.cert.X509Certificate,java.util.Date,java.security.cert.X509CRL)", "219": "CRLValidator::::verifyRevocation(com.itextpdf.signatures.validation.v1.report.ValidationReport,java.security.cert.X509Certificate,java.util.Date,java.security.cert.X509CRL)", "220": "CRLValidator::::verifyRevocation(com.itextpdf.signatures.validation.v1.report.ValidationReport,java.security.cert.X509Certificate,java.util.Date,java.security.cert.X509CRL)", "221": "CRLValidator::::verifyRevocation(com.itextpdf.signatures.validation.v1.report.ValidationReport,java.security.cert.X509Certificate,java.util.Date,java.security.cert.X509CRL)", "222": "CRLValidator::::verifyRevocation(com.itextpdf.signatures.validation.v1.report.ValidationReport,java.security.cert.X509Certificate,java.util.Date,java.security.cert.X509CRL)", "223": "CRLValidator::::verifyRevocation(com.itextpdf.signatures.validation.v1.report.ValidationReport,java.security.cert.X509Certificate,java.util.Date,java.security.cert.X509CRL)", "225": "CRLValidator::::getIssuingDistributionPointExtension(java.security.cert.X509CRL)", "226": "CRLValidator::::getIssuingDistributionPointExtension(java.security.cert.X509CRL)", "227": "CRLValidator::::getIssuingDistributionPointExtension(java.security.cert.X509CRL)", "228": "CRLValidator::::getIssuingDistributionPointExtension(java.security.cert.X509CRL)", "229": "CRLValidator::::getIssuingDistributionPointExtension(java.security.cert.X509CRL)", "230": "CRLValidator::::getIssuingDistributionPointExtension(java.security.cert.X509CRL)", "231": "CRLValidator::::getIssuingDistributionPointExtension(java.security.cert.X509CRL)", "232": "CRLValidator::::getIssuingDistributionPointExtension(java.security.cert.X509CRL)", "233": "CRLValidator::::getIssuingDistributionPointExtension(java.security.cert.X509CRL)", "234": "CRLValidator::::getIssuingDistributionPointExtension(java.security.cert.X509CRL)", "236": "CRLValidator::::getExpiredCertsOnCRLExtensionDate(java.security.cert.X509CRL)", "237": "CRLValidator::::getExpiredCertsOnCRLExtensionDate(java.security.cert.X509CRL)", "238": "CRLValidator::::getExpiredCertsOnCRLExtensionDate(java.security.cert.X509CRL)", "239": "CRLValidator::::getExpiredCertsOnCRLExtensionDate(java.security.cert.X509CRL)", "240": "CRLValidator::::getExpiredCertsOnCRLExtensionDate(java.security.cert.X509CRL)", "241": "CRLValidator::::getExpiredCertsOnCRLExtensionDate(java.security.cert.X509CRL)", "242": "CRLValidator::::getExpiredCertsOnCRLExtensionDate(java.security.cert.X509CRL)", "243": "CRLValidator::::getExpiredCertsOnCRLExtensionDate(java.security.cert.X509CRL)", "244": "CRLValidator::::getExpiredCertsOnCRLExtensionDate(java.security.cert.X509CRL)", "245": "CRLValidator::::getExpiredCertsOnCRLExtensionDate(java.security.cert.X509CRL)", "246": "CRLValidator::::getExpiredCertsOnCRLExtensionDate(java.security.cert.X509CRL)", "247": "CRLValidator::::getExpiredCertsOnCRLExtensionDate(java.security.cert.X509CRL)", "248": "CRLValidator::::getExpiredCertsOnCRLExtensionDate(java.security.cert.X509CRL)", "249": "CRLValidator::::getExpiredCertsOnCRLExtensionDate(java.security.cert.X509CRL)", "250": "CRLValidator::::getExpiredCertsOnCRLExtensionDate(java.security.cert.X509CRL)", "251": "CRLValidator::::getExpiredCertsOnCRLExtensionDate(java.security.cert.X509CRL)", "252": "CRLValidator::::getExpiredCertsOnCRLExtensionDate(java.security.cert.X509CRL)", "253": "CRLValidator::::getExpiredCertsOnCRLExtensionDate(java.security.cert.X509CRL)", "254": "CRLValidator::::getExpiredCertsOnCRLExtensionDate(java.security.cert.X509CRL)", "274": "CRLValidator::::verifyCrlIntegrity(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL)", "275": "CRLValidator::::verifyCrlIntegrity(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL)", "276": "CRLValidator::::verifyCrlIntegrity(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL)", "277": "CRLValidator::::verifyCrlIntegrity(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL)", "278": "CRLValidator::::verifyCrlIntegrity(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL)", "279": "CRLValidator::::verifyCrlIntegrity(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL)", "280": "CRLValidator::::verifyCrlIntegrity(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL)", "281": "CRLValidator::::verifyCrlIntegrity(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL)", "282": "CRLValidator::::verifyCrlIntegrity(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL)", "283": "CRLValidator::::verifyCrlIntegrity(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL)", "284": "CRLValidator::::verifyCrlIntegrity(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL)", "285": "CRLValidator::::verifyCrlIntegrity(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL)", "286": "CRLValidator::::verifyCrlIntegrity(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL)", "287": "CRLValidator::::verifyCrlIntegrity(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL)", "288": "CRLValidator::::verifyCrlIntegrity(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL)", "289": "CRLValidator::::verifyCrlIntegrity(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL)", "290": "CRLValidator::::verifyCrlIntegrity(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL)", "291": "CRLValidator::::verifyCrlIntegrity(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL)", "292": "CRLValidator::::verifyCrlIntegrity(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL)", "293": "CRLValidator::::verifyCrlIntegrity(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL)", "294": "CRLValidator::::verifyCrlIntegrity(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL)", "295": "CRLValidator::::verifyCrlIntegrity(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL)", "296": "CRLValidator::::verifyCrlIntegrity(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL)", "297": "CRLValidator::::verifyCrlIntegrity(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL)", "298": "CRLValidator::::verifyCrlIntegrity(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL)", "299": "CRLValidator::::verifyCrlIntegrity(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL)", "300": "CRLValidator::::verifyCrlIntegrity(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL)", "301": "CRLValidator::::verifyCrlIntegrity(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL)", "302": "CRLValidator::::verifyCrlIntegrity(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL)", "303": "CRLValidator::::verifyCrlIntegrity(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL)", "304": "CRLValidator::::verifyCrlIntegrity(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL)", "305": "CRLValidator::::verifyCrlIntegrity(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL)", "306": "CRLValidator::::verifyCrlIntegrity(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL)", "307": "CRLValidator::::verifyCrlIntegrity(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL)", "308": "CRLValidator::::verifyCrlIntegrity(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL)", "309": "CRLValidator::::verifyCrlIntegrity(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL)", "310": "CRLValidator::::verifyCrlIntegrity(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL)", "311": "CRLValidator::::verifyCrlIntegrity(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.security.cert.X509CRL)", "313": "CRLValidator::::getRoot(java.security.cert.Certificate)", "314": "CRLValidator::::getRoot(java.security.cert.Certificate)", "315": "CRLValidator::::getRoot(java.security.cert.Certificate)", "316": "CRLValidator::::getRoot(java.security.cert.Certificate)"}, "test_reverse_method_lines_dic": {"76": "CRLValidatorTest::::setUpOnce()", "77": "CRLValidatorTest::::setUpOnce()", "78": "CRLValidatorTest::::setUpOnce()", "79": "CRLValidatorTest::::setUpOnce()", "81": "CRLValidatorTest::::setUp()", "82": "CRLValidatorTest::::setUp()", "83": "CRLValidatorTest::::setUp()", "84": "CRLValidatorTest::::setUp()", "85": "CRLValidatorTest::::setUp()", "86": "CRLValidatorTest::::setUp()", "87": "CRLValidatorTest::::setUp()", "88": "CRLValidatorTest::::setUp()", "89": "CRLValidatorTest::::setUp()", "90": "CRLValidatorTest::::setUp()", "91": "CRLValidatorTest::::setUp()", "93": "CRLValidatorTest::::happyPathTest()", "94": "CRLValidatorTest::::happyPathTest()", "95": "CRLValidatorTest::::happyPathTest()", "96": "CRLValidatorTest::::happyPathTest()", "97": "CRLValidatorTest::::happyPathTest()", "98": "CRLValidatorTest::::happyPathTest()", "99": "CRLValidatorTest::::happyPathTest()", "100": "CRLValidatorTest::::happyPathTest()", "101": "CRLValidatorTest::::happyPathTest()", "102": "CRLValidatorTest::::happyPathTest()", "103": "CRLValidatorTest::::happyPathTest()", "104": "CRLValidatorTest::::happyPathTest()", "105": "CRLValidatorTest::::happyPathTest()", "106": "CRLValidatorTest::::happyPathTest()", "108": "CRLValidatorTest::::nextUpdateBeforeValidationTest()", "109": "CRLValidatorTest::::nextUpdateBeforeValidationTest()", "110": "CRLValidatorTest::::nextUpdateBeforeValidationTest()", "111": "CRLValidatorTest::::nextUpdateBeforeValidationTest()", "112": "CRLValidatorTest::::nextUpdateBeforeValidationTest()", "113": "CRLValidatorTest::::nextUpdateBeforeValidationTest()", "114": "CRLValidatorTest::::nextUpdateBeforeValidationTest()", "115": "CRLValidatorTest::::nextUpdateBeforeValidationTest()", "116": "CRLValidatorTest::::nextUpdateBeforeValidationTest()", "117": "CRLValidatorTest::::nextUpdateBeforeValidationTest()", "118": "CRLValidatorTest::::nextUpdateBeforeValidationTest()", "119": "CRLValidatorTest::::nextUpdateBeforeValidationTest()", "120": "CRLValidatorTest::::nextUpdateBeforeValidationTest()", "121": "CRLValidatorTest::::nextUpdateBeforeValidationTest()", "122": "CRLValidatorTest::::nextUpdateBeforeValidationTest()", "123": "CRLValidatorTest::::nextUpdateBeforeValidationTest()", "124": "CRLValidatorTest::::nextUpdateBeforeValidationTest()", "126": "CRLValidatorTest::::chainValidatorUsageTest()", "127": "CRLValidatorTest::::chainValidatorUsageTest()", "128": "CRLValidatorTest::::chainValidatorUsageTest()", "129": "CRLValidatorTest::::chainValidatorUsageTest()", "130": "CRLValidatorTest::::chainValidatorUsageTest()", "131": "CRLValidatorTest::::chainValidatorUsageTest()", "132": "CRLValidatorTest::::chainValidatorUsageTest()", "133": "CRLValidatorTest::::chainValidatorUsageTest()", "134": "CRLValidatorTest::::chainValidatorUsageTest()", "135": "CRLValidatorTest::::chainValidatorUsageTest()", "136": "CRLValidatorTest::::chainValidatorUsageTest()", "137": "CRLValidatorTest::::chainValidatorUsageTest()", "138": "CRLValidatorTest::::chainValidatorUsageTest()", "139": "CRLValidatorTest::::chainValidatorUsageTest()", "140": "CRLValidatorTest::::chainValidatorUsageTest()", "141": "CRLValidatorTest::::chainValidatorUsageTest()", "142": "CRLValidatorTest::::chainValidatorUsageTest()", "143": "CRLValidatorTest::::chainValidatorUsageTest()", "144": "CRLValidatorTest::::chainValidatorUsageTest()", "145": "CRLValidatorTest::::chainValidatorUsageTest()", "147": "CRLValidatorTest::::issuerCertificateIsNotFoundTest()", "148": "CRLValidatorTest::::issuerCertificateIsNotFoundTest()", "149": "CRLValidatorTest::::issuerCertificateIsNotFoundTest()", "150": "CRLValidatorTest::::issuerCertificateIsNotFoundTest()", "151": "CRLValidatorTest::::issuerCertificateIsNotFoundTest()", "152": "CRLValidatorTest::::issuerCertificateIsNotFoundTest()", "153": "CRLValidatorTest::::issuerCertificateIsNotFoundTest()", "154": "CRLValidatorTest::::issuerCertificateIsNotFoundTest()", "155": "CRLValidatorTest::::issuerCertificateIsNotFoundTest()", "156": "CRLValidatorTest::::issuerCertificateIsNotFoundTest()", "157": "CRLValidatorTest::::issuerCertificateIsNotFoundTest()", "158": "CRLValidatorTest::::issuerCertificateIsNotFoundTest()", "159": "CRLValidatorTest::::issuerCertificateIsNotFoundTest()", "160": "CRLValidatorTest::::issuerCertificateIsNotFoundTest()", "161": "CRLValidatorTest::::issuerCertificateIsNotFoundTest()", "162": "CRLValidatorTest::::issuerCertificateIsNotFoundTest()", "164": "CRLValidatorTest::::crlIssuerAndSignCertHaveNoSharedRootTest()", "165": "CRLValidatorTest::::crlIssuerAndSignCertHaveNoSharedRootTest()", "166": "CRLValidatorTest::::crlIssuerAndSignCertHaveNoSharedRootTest()", "167": "CRLValidatorTest::::crlIssuerAndSignCertHaveNoSharedRootTest()", "168": "CRLValidatorTest::::crlIssuerAndSignCertHaveNoSharedRootTest()", "169": "CRLValidatorTest::::crlIssuerAndSignCertHaveNoSharedRootTest()", "170": "CRLValidatorTest::::crlIssuerAndSignCertHaveNoSharedRootTest()", "171": "CRLValidatorTest::::crlIssuerAndSignCertHaveNoSharedRootTest()", "172": "CRLValidatorTest::::crlIssuerAndSignCertHaveNoSharedRootTest()", "173": "CRLValidatorTest::::crlIssuerAndSignCertHaveNoSharedRootTest()", "174": "CRLValidatorTest::::crlIssuerAndSignCertHaveNoSharedRootTest()", "175": "CRLValidatorTest::::crlIssuerAndSignCertHaveNoSharedRootTest()", "176": "CRLValidatorTest::::crlIssuerAndSignCertHaveNoSharedRootTest()", "177": "CRLValidatorTest::::crlIssuerAndSignCertHaveNoSharedRootTest()", "178": "CRLValidatorTest::::crlIssuerAndSignCertHaveNoSharedRootTest()", "179": "CRLValidatorTest::::crlIssuerAndSignCertHaveNoSharedRootTest()", "180": "CRLValidatorTest::::crlIssuerAndSignCertHaveNoSharedRootTest()", "182": "CRLValidatorTest::::crlIssuerRevokedBeforeSigningDate()", "183": "CRLValidatorTest::::crlIssuerRevokedBeforeSigningDate()", "184": "CRLValidatorTest::::crlIssuerRevokedBeforeSigningDate()", "185": "CRLValidatorTest::::crlIssuerRevokedBeforeSigningDate()", "186": "CRLValidatorTest::::crlIssuerRevokedBeforeSigningDate()", "187": "CRLValidatorTest::::crlIssuerRevokedBeforeSigningDate()", "188": "CRLValidatorTest::::crlIssuerRevokedBeforeSigningDate()", "189": "CRLValidatorTest::::crlIssuerRevokedBeforeSigningDate()", "190": "CRLValidatorTest::::crlIssuerRevokedBeforeSigningDate()", "191": "CRLValidatorTest::::crlIssuerRevokedBeforeSigningDate()", "192": "CRLValidatorTest::::crlIssuerRevokedBeforeSigningDate()", "193": "CRLValidatorTest::::crlIssuerRevokedBeforeSigningDate()", "194": "CRLValidatorTest::::crlIssuerRevokedBeforeSigningDate()", "195": "CRLValidatorTest::::crlIssuerRevokedBeforeSigningDate()", "196": "CRLValidatorTest::::crlIssuerRevokedBeforeSigningDate()", "197": "CRLValidatorTest::::crlIssuerRevokedBeforeSigningDate()", "198": "CRLValidatorTest::::crlIssuerRevokedBeforeSigningDate()", "199": "CRLValidatorTest::::crlIssuerRevokedBeforeSigningDate()", "200": "CRLValidatorTest::::crlIssuerRevokedBeforeSigningDate()", "201": "CRLValidatorTest::::crlIssuerRevokedBeforeSigningDate()", "202": "CRLValidatorTest::::crlIssuerRevokedBeforeSigningDate()", "203": "CRLValidatorTest::::crlIssuerRevokedBeforeSigningDate()", "204": "CRLValidatorTest::::crlIssuerRevokedBeforeSigningDate()", "206": "CRLValidatorTest::::crlRevokedAfterSigningDate()", "207": "CRLValidatorTest::::crlRevokedAfterSigningDate()", "208": "CRLValidatorTest::::crlRevokedAfterSigningDate()", "209": "CRLValidatorTest::::crlRevokedAfterSigningDate()", "210": "CRLValidatorTest::::crlRevokedAfterSigningDate()", "211": "CRLValidatorTest::::crlRevokedAfterSigningDate()", "212": "CRLValidatorTest::::crlRevokedAfterSigningDate()", "213": "CRLValidatorTest::::crlRevokedAfterSigningDate()", "214": "CRLValidatorTest::::crlRevokedAfterSigningDate()", "215": "CRLValidatorTest::::crlRevokedAfterSigningDate()", "216": "CRLValidatorTest::::crlRevokedAfterSigningDate()", "217": "CRLValidatorTest::::crlRevokedAfterSigningDate()", "218": "CRLValidatorTest::::crlRevokedAfterSigningDate()", "219": "CRLValidatorTest::::crlRevokedAfterSigningDate()", "220": "CRLValidatorTest::::crlRevokedAfterSigningDate()", "221": "CRLValidatorTest::::crlRevokedAfterSigningDate()", "222": "CRLValidatorTest::::crlRevokedAfterSigningDate()", "223": "CRLValidatorTest::::crlRevokedAfterSigningDate()", "224": "CRLValidatorTest::::crlRevokedAfterSigningDate()", "225": "CRLValidatorTest::::crlRevokedAfterSigningDate()", "226": "CRLValidatorTest::::crlRevokedAfterSigningDate()", "227": "CRLValidatorTest::::crlRevokedAfterSigningDate()", "229": "CRLValidatorTest::::crlSignatureMismatch()", "230": "CRLValidatorTest::::crlSignatureMismatch()", "231": "CRLValidatorTest::::crlSignatureMismatch()", "232": "CRLValidatorTest::::crlSignatureMismatch()", "233": "CRLValidatorTest::::crlSignatureMismatch()", "234": "CRLValidatorTest::::crlSignatureMismatch()", "235": "CRLValidatorTest::::crlSignatureMismatch()", "236": "CRLValidatorTest::::crlSignatureMismatch()", "237": "CRLValidatorTest::::crlSignatureMismatch()", "238": "CRLValidatorTest::::crlSignatureMismatch()", "239": "CRLValidatorTest::::crlSignatureMismatch()", "240": "CRLValidatorTest::::crlSignatureMismatch()", "241": "CRLValidatorTest::::crlSignatureMismatch()", "242": "CRLValidatorTest::::crlSignatureMismatch()", "243": "CRLValidatorTest::::crlSignatureMismatch()", "244": "CRLValidatorTest::::crlSignatureMismatch()", "245": "CRLValidatorTest::::crlSignatureMismatch()", "246": "CRLValidatorTest::::crlSignatureMismatch()", "247": "CRLValidatorTest::::crlSignatureMismatch()", "249": "CRLValidatorTest::::crlContainsOnlyCACertsTest()", "250": "CRLValidatorTest::::crlContainsOnlyCACertsTest()", "251": "CRLValidatorTest::::crlContainsOnlyCACertsTest()", "252": "CRLValidatorTest::::crlContainsOnlyCACertsTest()", "253": "CRLValidatorTest::::crlContainsOnlyCACertsTest()", "254": "CRLValidatorTest::::crlContainsOnlyCACertsTest()", "255": "CRLValidatorTest::::crlContainsOnlyCACertsTest()", "256": "CRLValidatorTest::::crlContainsOnlyCACertsTest()", "257": "CRLValidatorTest::::crlContainsOnlyCACertsTest()", "259": "CRLValidatorTest::::crlContainsOnlyUserCertsTest()", "260": "CRLValidatorTest::::crlContainsOnlyUserCertsTest()", "261": "CRLValidatorTest::::crlContainsOnlyUserCertsTest()", "262": "CRLValidatorTest::::crlContainsOnlyUserCertsTest()", "263": "CRLValidatorTest::::crlContainsOnlyUserCertsTest()", "264": "CRLValidatorTest::::crlContainsOnlyUserCertsTest()", "266": "CRLValidatorTest::::crlContainsOnlyAttributeCertsTest()", "267": "CRLValidatorTest::::crlContainsOnlyAttributeCertsTest()", "268": "CRLValidatorTest::::crlContainsOnlyAttributeCertsTest()", "269": "CRLValidatorTest::::crlContainsOnlyAttributeCertsTest()", "270": "CRLValidatorTest::::crlContainsOnlyAttributeCertsTest()", "271": "CRLValidatorTest::::crlContainsOnlyAttributeCertsTest()", "272": "CRLValidatorTest::::crlContainsOnlyAttributeCertsTest()", "273": "CRLValidatorTest::::crlContainsOnlyAttributeCertsTest()", "274": "CRLValidatorTest::::crlContainsOnlyAttributeCertsTest()", "276": "CRLValidatorTest::::onlySomeReasonsTest()", "277": "CRLValidatorTest::::onlySomeReasonsTest()", "278": "CRLValidatorTest::::onlySomeReasonsTest()", "279": "CRLValidatorTest::::onlySomeReasonsTest()", "280": "CRLValidatorTest::::onlySomeReasonsTest()", "281": "CRLValidatorTest::::onlySomeReasonsTest()", "282": "CRLValidatorTest::::onlySomeReasonsTest()", "283": "CRLValidatorTest::::onlySomeReasonsTest()", "284": "CRLValidatorTest::::onlySomeReasonsTest()", "285": "CRLValidatorTest::::onlySomeReasonsTest()", "286": "CRLValidatorTest::::onlySomeReasonsTest()", "287": "CRLValidatorTest::::onlySomeReasonsTest()", "288": "CRLValidatorTest::::onlySomeReasonsTest()", "289": "CRLValidatorTest::::onlySomeReasonsTest()", "290": "CRLValidatorTest::::onlySomeReasonsTest()", "291": "CRLValidatorTest::::onlySomeReasonsTest()", "292": "CRLValidatorTest::::onlySomeReasonsTest()", "293": "CRLValidatorTest::::onlySomeReasonsTest()", "294": "CRLValidatorTest::::onlySomeReasonsTest()", "295": "CRLValidatorTest::::onlySomeReasonsTest()", "296": "CRLValidatorTest::::onlySomeReasonsTest()", "297": "CRLValidatorTest::::onlySomeReasonsTest()", "298": "CRLValidatorTest::::onlySomeReasonsTest()", "299": "CRLValidatorTest::::onlySomeReasonsTest()", "300": "CRLValidatorTest::::onlySomeReasonsTest()", "301": "CRLValidatorTest::::onlySomeReasonsTest()", "302": "CRLValidatorTest::::onlySomeReasonsTest()", "304": "CRLValidatorTest::::checkLessReasonsTest()", "305": "CRLValidatorTest::::checkLessReasonsTest()", "306": "CRLValidatorTest::::checkLessReasonsTest()", "307": "CRLValidatorTest::::checkLessReasonsTest()", "308": "CRLValidatorTest::::checkLessReasonsTest()", "309": "CRLValidatorTest::::checkLessReasonsTest()", "310": "CRLValidatorTest::::checkLessReasonsTest()", "311": "CRLValidatorTest::::checkLessReasonsTest()", "312": "CRLValidatorTest::::checkLessReasonsTest()", "313": "CRLValidatorTest::::checkLessReasonsTest()", "314": "CRLValidatorTest::::checkLessReasonsTest()", "315": "CRLValidatorTest::::checkLessReasonsTest()", "316": "CRLValidatorTest::::checkLessReasonsTest()", "317": "CRLValidatorTest::::checkLessReasonsTest()", "318": "CRLValidatorTest::::checkLessReasonsTest()", "319": "CRLValidatorTest::::checkLessReasonsTest()", "320": "CRLValidatorTest::::checkLessReasonsTest()", "321": "CRLValidatorTest::::checkLessReasonsTest()", "322": "CRLValidatorTest::::checkLessReasonsTest()", "323": "CRLValidatorTest::::checkLessReasonsTest()", "324": "CRLValidatorTest::::checkLessReasonsTest()", "325": "CRLValidatorTest::::checkLessReasonsTest()", "326": "CRLValidatorTest::::checkLessReasonsTest()", "327": "CRLValidatorTest::::checkLessReasonsTest()", "328": "CRLValidatorTest::::checkLessReasonsTest()", "329": "CRLValidatorTest::::checkLessReasonsTest()", "330": "CRLValidatorTest::::checkLessReasonsTest()", "331": "CRLValidatorTest::::checkLessReasonsTest()", "332": "CRLValidatorTest::::checkLessReasonsTest()", "333": "CRLValidatorTest::::checkLessReasonsTest()", "334": "CRLValidatorTest::::checkLessReasonsTest()", "336": "CRLValidatorTest::::removeFromCrlTest()", "337": "CRLValidatorTest::::removeFromCrlTest()", "338": "CRLValidatorTest::::removeFromCrlTest()", "339": "CRLValidatorTest::::removeFromCrlTest()", "340": "CRLValidatorTest::::removeFromCrlTest()", "341": "CRLValidatorTest::::removeFromCrlTest()", "342": "CRLValidatorTest::::removeFromCrlTest()", "343": "CRLValidatorTest::::removeFromCrlTest()", "344": "CRLValidatorTest::::removeFromCrlTest()", "345": "CRLValidatorTest::::removeFromCrlTest()", "346": "CRLValidatorTest::::removeFromCrlTest()", "347": "CRLValidatorTest::::removeFromCrlTest()", "348": "CRLValidatorTest::::removeFromCrlTest()", "349": "CRLValidatorTest::::removeFromCrlTest()", "350": "CRLValidatorTest::::removeFromCrlTest()", "351": "CRLValidatorTest::::removeFromCrlTest()", "352": "CRLValidatorTest::::removeFromCrlTest()", "353": "CRLValidatorTest::::removeFromCrlTest()", "354": "CRLValidatorTest::::removeFromCrlTest()", "355": "CRLValidatorTest::::removeFromCrlTest()", "356": "CRLValidatorTest::::removeFromCrlTest()", "357": "CRLValidatorTest::::removeFromCrlTest()", "358": "CRLValidatorTest::::removeFromCrlTest()", "359": "CRLValidatorTest::::removeFromCrlTest()", "360": "CRLValidatorTest::::removeFromCrlTest()", "361": "CRLValidatorTest::::removeFromCrlTest()", "363": "CRLValidatorTest::::fullCrlButDistributionPointWithReasonsTest()", "364": "CRLValidatorTest::::fullCrlButDistributionPointWithReasonsTest()", "365": "CRLValidatorTest::::fullCrlButDistributionPointWithReasonsTest()", "366": "CRLValidatorTest::::fullCrlButDistributionPointWithReasonsTest()", "367": "CRLValidatorTest::::fullCrlButDistributionPointWithReasonsTest()", "368": "CRLValidatorTest::::fullCrlButDistributionPointWithReasonsTest()", "369": "CRLValidatorTest::::fullCrlButDistributionPointWithReasonsTest()", "370": "CRLValidatorTest::::fullCrlButDistributionPointWithReasonsTest()", "371": "CRLValidatorTest::::fullCrlButDistributionPointWithReasonsTest()", "372": "CRLValidatorTest::::fullCrlButDistributionPointWithReasonsTest()", "373": "CRLValidatorTest::::fullCrlButDistributionPointWithReasonsTest()", "374": "CRLValidatorTest::::fullCrlButDistributionPointWithReasonsTest()", "375": "CRLValidatorTest::::fullCrlButDistributionPointWithReasonsTest()", "376": "CRLValidatorTest::::fullCrlButDistributionPointWithReasonsTest()", "377": "CRLValidatorTest::::fullCrlButDistributionPointWithReasonsTest()", "378": "CRLValidatorTest::::fullCrlButDistributionPointWithReasonsTest()", "379": "CRLValidatorTest::::fullCrlButDistributionPointWithReasonsTest()", "380": "CRLValidatorTest::::fullCrlButDistributionPointWithReasonsTest()", "381": "CRLValidatorTest::::fullCrlButDistributionPointWithReasonsTest()", "382": "CRLValidatorTest::::fullCrlButDistributionPointWithReasonsTest()", "383": "CRLValidatorTest::::fullCrlButDistributionPointWithReasonsTest()", "384": "CRLValidatorTest::::fullCrlButDistributionPointWithReasonsTest()", "385": "CRLValidatorTest::::fullCrlButDistributionPointWithReasonsTest()", "386": "CRLValidatorTest::::fullCrlButDistributionPointWithReasonsTest()", "387": "CRLValidatorTest::::fullCrlButDistributionPointWithReasonsTest()", "388": "CRLValidatorTest::::fullCrlButDistributionPointWithReasonsTest()", "389": "CRLValidatorTest::::fullCrlButDistributionPointWithReasonsTest()", "390": "CRLValidatorTest::::fullCrlButDistributionPointWithReasonsTest()", "391": "CRLValidatorTest::::fullCrlButDistributionPointWithReasonsTest()", "392": "CRLValidatorTest::::fullCrlButDistributionPointWithReasonsTest()", "393": "CRLValidatorTest::::fullCrlButDistributionPointWithReasonsTest()", "394": "CRLValidatorTest::::fullCrlButDistributionPointWithReasonsTest()", "396": "CRLValidatorTest::::noExpiredCertOnCrlExtensionTest()", "397": "CRLValidatorTest::::noExpiredCertOnCrlExtensionTest()", "398": "CRLValidatorTest::::noExpiredCertOnCrlExtensionTest()", "399": "CRLValidatorTest::::noExpiredCertOnCrlExtensionTest()", "400": "CRLValidatorTest::::noExpiredCertOnCrlExtensionTest()", "401": "CRLValidatorTest::::noExpiredCertOnCrlExtensionTest()", "402": "CRLValidatorTest::::noExpiredCertOnCrlExtensionTest()", "403": "CRLValidatorTest::::noExpiredCertOnCrlExtensionTest()", "404": "CRLValidatorTest::::noExpiredCertOnCrlExtensionTest()", "405": "CRLValidatorTest::::noExpiredCertOnCrlExtensionTest()", "406": "CRLValidatorTest::::noExpiredCertOnCrlExtensionTest()", "407": "CRLValidatorTest::::noExpiredCertOnCrlExtensionTest()", "408": "CRLValidatorTest::::noExpiredCertOnCrlExtensionTest()", "409": "CRLValidatorTest::::noExpiredCertOnCrlExtensionTest()", "410": "CRLValidatorTest::::noExpiredCertOnCrlExtensionTest()", "411": "CRLValidatorTest::::noExpiredCertOnCrlExtensionTest()", "412": "CRLValidatorTest::::noExpiredCertOnCrlExtensionTest()", "414": "CRLValidatorTest::::certExpiredBeforeDateFromExpiredCertOnCrlTest()", "415": "CRLValidatorTest::::certExpiredBeforeDateFromExpiredCertOnCrlTest()", "416": "CRLValidatorTest::::certExpiredBeforeDateFromExpiredCertOnCrlTest()", "417": "CRLValidatorTest::::certExpiredBeforeDateFromExpiredCertOnCrlTest()", "418": "CRLValidatorTest::::certExpiredBeforeDateFromExpiredCertOnCrlTest()", "419": "CRLValidatorTest::::certExpiredBeforeDateFromExpiredCertOnCrlTest()", "420": "CRLValidatorTest::::certExpiredBeforeDateFromExpiredCertOnCrlTest()", "421": "CRLValidatorTest::::certExpiredBeforeDateFromExpiredCertOnCrlTest()", "422": "CRLValidatorTest::::certExpiredBeforeDateFromExpiredCertOnCrlTest()", "423": "CRLValidatorTest::::certExpiredBeforeDateFromExpiredCertOnCrlTest()", "424": "CRLValidatorTest::::certExpiredBeforeDateFromExpiredCertOnCrlTest()", "425": "CRLValidatorTest::::certExpiredBeforeDateFromExpiredCertOnCrlTest()", "426": "CRLValidatorTest::::certExpiredBeforeDateFromExpiredCertOnCrlTest()", "427": "CRLValidatorTest::::certExpiredBeforeDateFromExpiredCertOnCrlTest()", "428": "CRLValidatorTest::::certExpiredBeforeDateFromExpiredCertOnCrlTest()", "429": "CRLValidatorTest::::certExpiredBeforeDateFromExpiredCertOnCrlTest()", "430": "CRLValidatorTest::::certExpiredBeforeDateFromExpiredCertOnCrlTest()", "431": "CRLValidatorTest::::certExpiredBeforeDateFromExpiredCertOnCrlTest()", "432": "CRLValidatorTest::::certExpiredBeforeDateFromExpiredCertOnCrlTest()", "433": "CRLValidatorTest::::certExpiredBeforeDateFromExpiredCertOnCrlTest()", "435": "CRLValidatorTest::::certExpiredAfterDateFromExpiredCertOnCrlExtensionTest()", "436": "CRLValidatorTest::::certExpiredAfterDateFromExpiredCertOnCrlExtensionTest()", "437": "CRLValidatorTest::::certExpiredAfterDateFromExpiredCertOnCrlExtensionTest()", "438": "CRLValidatorTest::::certExpiredAfterDateFromExpiredCertOnCrlExtensionTest()", "439": "CRLValidatorTest::::certExpiredAfterDateFromExpiredCertOnCrlExtensionTest()", "440": "CRLValidatorTest::::certExpiredAfterDateFromExpiredCertOnCrlExtensionTest()", "441": "CRLValidatorTest::::certExpiredAfterDateFromExpiredCertOnCrlExtensionTest()", "442": "CRLValidatorTest::::certExpiredAfterDateFromExpiredCertOnCrlExtensionTest()", "443": "CRLValidatorTest::::certExpiredAfterDateFromExpiredCertOnCrlExtensionTest()", "444": "CRLValidatorTest::::certExpiredAfterDateFromExpiredCertOnCrlExtensionTest()", "445": "CRLValidatorTest::::certExpiredAfterDateFromExpiredCertOnCrlExtensionTest()", "446": "CRLValidatorTest::::certExpiredAfterDateFromExpiredCertOnCrlExtensionTest()", "447": "CRLValidatorTest::::certExpiredAfterDateFromExpiredCertOnCrlExtensionTest()", "448": "CRLValidatorTest::::certExpiredAfterDateFromExpiredCertOnCrlExtensionTest()", "450": "CRLValidatorTest::::checkCrlScope(java.lang.String)", "451": "CRLValidatorTest::::checkCrlScope(java.lang.String)", "452": "CRLValidatorTest::::checkCrlScope(java.lang.String)", "453": "CRLValidatorTest::::checkCrlScope(java.lang.String)", "454": "CRLValidatorTest::::checkCrlScope(java.lang.String)", "455": "CRLValidatorTest::::checkCrlScope(java.lang.String)", "456": "CRLValidatorTest::::checkCrlScope(java.lang.String)", "457": "CRLValidatorTest::::checkCrlScope(java.lang.String)", "458": "CRLValidatorTest::::checkCrlScope(java.lang.String)", "459": "CRLValidatorTest::::checkCrlScope(java.lang.String)", "460": "CRLValidatorTest::::checkCrlScope(java.lang.String)", "461": "CRLValidatorTest::::checkCrlScope(java.lang.String)", "462": "CRLValidatorTest::::checkCrlScope(java.lang.String)", "463": "CRLValidatorTest::::checkCrlScope(java.lang.String)", "464": "CRLValidatorTest::::checkCrlScope(java.lang.String)", "466": "CRLValidatorTest::::retrieveTestResources(java.lang.String)", "467": "CRLValidatorTest::::retrieveTestResources(java.lang.String)", "468": "CRLValidatorTest::::retrieveTestResources(java.lang.String)", "469": "CRLValidatorTest::::retrieveTestResources(java.lang.String)", "470": "CRLValidatorTest::::retrieveTestResources(java.lang.String)", "471": "CRLValidatorTest::::retrieveTestResources(java.lang.String)", "472": "CRLValidatorTest::::retrieveTestResources(java.lang.String)", "475": "CRLValidatorTest::::createCrl(java.security.cert.X509Certificate,java.security.PrivateKey,java.util.Date,java.util.Date)", "476": "CRLValidatorTest::::createCrl(java.security.cert.X509Certificate,java.security.PrivateKey,java.util.Date,java.util.Date)", "477": "CRLValidatorTest::::createCrl(java.security.cert.X509Certificate,java.security.PrivateKey,java.util.Date,java.util.Date)", "478": "CRLValidatorTest::::createCrl(java.security.cert.X509Certificate,java.security.PrivateKey,java.util.Date,java.util.Date)", "479": "CRLValidatorTest::::createCrl(java.security.cert.X509Certificate,java.security.PrivateKey,java.util.Date,java.util.Date)", "481": "CRLValidatorTest::::createCrl(java.security.cert.X509Certificate,java.security.PrivateKey,java.util.Date,java.util.Date,java.security.cert.X509Certificate,java.util.Date,int)", "482": "CRLValidatorTest::::createCrl(java.security.cert.X509Certificate,java.security.PrivateKey,java.util.Date,java.util.Date,java.security.cert.X509Certificate,java.util.Date,int)", "483": "CRLValidatorTest::::createCrl(java.security.cert.X509Certificate,java.security.PrivateKey,java.util.Date,java.util.Date,java.security.cert.X509Certificate,java.util.Date,int)", "484": "CRLValidatorTest::::createCrl(java.security.cert.X509Certificate,java.security.PrivateKey,java.util.Date,java.util.Date,java.security.cert.X509Certificate,java.util.Date,int)", "485": "CRLValidatorTest::::createCrl(java.security.cert.X509Certificate,java.security.PrivateKey,java.util.Date,java.util.Date,java.security.cert.X509Certificate,java.util.Date,int)", "486": "CRLValidatorTest::::createCrl(java.security.cert.X509Certificate,java.security.PrivateKey,java.util.Date,java.util.Date,java.security.cert.X509Certificate,java.util.Date,int)", "487": "CRLValidatorTest::::createCrl(java.security.cert.X509Certificate,java.security.PrivateKey,java.util.Date,java.util.Date,java.security.cert.X509Certificate,java.util.Date,int)", "488": "CRLValidatorTest::::createCrl(java.security.cert.X509Certificate,java.security.PrivateKey,java.util.Date,java.util.Date,java.security.cert.X509Certificate,java.util.Date,int)", "489": "CRLValidatorTest::::createCrl(java.security.cert.X509Certificate,java.security.PrivateKey,java.util.Date,java.util.Date,java.security.cert.X509Certificate,java.util.Date,int)", "490": "CRLValidatorTest::::createCrl(java.security.cert.X509Certificate,java.security.PrivateKey,java.util.Date,java.util.Date,java.security.cert.X509Certificate,java.util.Date,int)", "491": "CRLValidatorTest::::createCrl(java.security.cert.X509Certificate,java.security.PrivateKey,java.util.Date,java.util.Date,java.security.cert.X509Certificate,java.util.Date,int)", "492": "CRLValidatorTest::::createCrl(java.security.cert.X509Certificate,java.security.PrivateKey,java.util.Date,java.util.Date,java.security.cert.X509Certificate,java.util.Date,int)", "494": "CRLValidatorTest::::performValidation(java.lang.String,java.util.Date,byte[])", "495": "CRLValidatorTest::::performValidation(java.lang.String,java.util.Date,byte[])", "496": "CRLValidatorTest::::performValidation(java.lang.String,java.util.Date,byte[])", "497": "CRLValidatorTest::::performValidation(java.lang.String,java.util.Date,byte[])", "498": "CRLValidatorTest::::performValidation(java.lang.String,java.util.Date,byte[])", "499": "CRLValidatorTest::::performValidation(java.lang.String,java.util.Date,byte[])", "500": "CRLValidatorTest::::performValidation(java.lang.String,java.util.Date,byte[])", "501": "CRLValidatorTest::::performValidation(java.lang.String,java.util.Date,byte[])", "502": "CRLValidatorTest::::performValidation(java.lang.String,java.util.Date,byte[])", "503": "CRLValidatorTest::::performValidation(java.lang.String,java.util.Date,byte[])", "504": "CRLValidatorTest::::performValidation(java.lang.String,java.util.Date,byte[])", "505": "CRLValidatorTest::::performValidation(java.lang.String,java.util.Date,byte[])", "506": "CRLValidatorTest::::performValidation(java.lang.String,java.util.Date,byte[])", "507": "CRLValidatorTest::::performValidation(java.lang.String,java.util.Date,byte[])", "508": "CRLValidatorTest::::performValidation(java.lang.String,java.util.Date,byte[])", "509": "CRLValidatorTest::::performValidation(java.lang.String,java.util.Date,byte[])", "510": "CRLValidatorTest::::performValidation(java.lang.String,java.util.Date,byte[])", "511": "CRLValidatorTest::::performValidation(java.lang.String,java.util.Date,byte[])", "512": "CRLValidatorTest::::performValidation(java.lang.String,java.util.Date,byte[])"}, "tests": [{"test_lines": [93, 106], "covered_lines": [88, 90, 100, 101, 102, 103, 104, 117, 118, 124, 125, 132, 133, 141, 151, 152, 153, 174, 175, 176, 187, 190, 192, 193, 198, 202, 206, 207, 223, 226, 228, 229, 232, 233, 258, 259, 265, 271, 276, 277, 282, 283, 284, 285, 290, 295, 298, 299, 300, 308, 309, 311, 314, 315]}, {"test_lines": [108, 124], "covered_lines": [88, 90, 100, 101, 102, 103, 104, 117, 118, 124, 125, 132, 133, 134, 135, 137]}, {"test_lines": [126, 145], "covered_lines": [88, 90, 100, 101, 102, 103, 104, 117, 118, 124, 125, 132, 133, 141, 151, 152, 153, 174, 175, 176, 187, 190, 192, 193, 198, 202, 206, 207, 223, 226, 228, 229, 232, 233, 258, 259, 265, 271, 276, 277, 282, 283, 284, 285, 290, 295, 298, 299, 300, 308, 309, 311, 314, 315]}, {"test_lines": [147, 162], "covered_lines": [88, 90, 100, 101, 102, 103, 104, 117, 118, 124, 125, 132, 133, 141, 151, 152, 153, 174, 175, 176, 187, 190, 192, 198, 202, 206, 207, 223, 226, 228, 229, 232, 233, 258, 259, 265, 271, 276, 277, 278, 280]}, {"test_lines": [164, 180], "covered_lines": [88, 90, 100, 101, 102, 103, 104, 117, 118, 124, 125, 132, 133, 141, 151, 152, 153, 174, 175, 176, 187, 190, 192, 198, 202, 206, 207, 223, 226, 228, 229, 232, 233, 258, 259, 265, 271, 276, 277, 282, 283, 284, 285, 286, 290, 295, 298, 299, 300, 308, 309, 311, 314, 315]}, {"test_lines": [182, 204], "covered_lines": [88, 90, 100, 101, 102, 103, 104, 117, 118, 124, 125, 132, 133, 141, 151, 152, 153, 174, 175, 176, 187, 190, 192, 198, 202, 206, 207, 208, 209, 213, 218, 219, 223, 226, 228, 229, 232, 233, 258, 259, 265, 271, 276, 277, 282, 283, 284, 285, 290, 295, 298, 299, 300, 308, 309, 311, 314, 315]}, {"test_lines": [206, 227], "covered_lines": [88, 90, 100, 101, 102, 103, 104, 117, 118, 124, 125, 132, 133, 141, 151, 152, 153, 174, 175, 176, 187, 190, 192, 193, 198, 202, 206, 207, 208, 209, 210, 223, 226, 228, 229, 232, 233, 258, 259, 265, 271, 276, 277, 282, 283, 284, 285, 290, 295, 298, 299, 300, 308, 309, 311, 314, 315]}, {"test_lines": [229, 247], "covered_lines": [88, 90, 100, 101, 102, 103, 104, 117, 118, 124, 125, 132, 133, 141, 151, 152, 153, 174, 175, 176, 187, 190, 192, 198, 202, 206, 207, 208, 209, 210, 223, 226, 228, 229, 232, 233, 258, 259, 265, 271, 276, 277, 282, 283, 284, 285, 291, 292, 294, 314, 315]}, {"test_lines": [249, 257], "covered_lines": [88, 90, 100, 101, 102, 103, 104, 117, 118, 124, 125, 132, 133, 141, 151, 152, 153, 155, 156, 157, 158, 160, 226, 228, 229, 232, 233]}, {"test_lines": [259, 264], "covered_lines": [88, 90, 100, 101, 102, 103, 104, 117, 118, 124, 125, 132, 133, 141, 151, 152, 153, 155, 156, 157, 162, 168, 169, 170, 174, 175, 176, 187, 190, 192, 193, 198, 202, 206, 207, 223, 226, 228, 229, 232, 233, 258, 259, 260, 261, 265, 266, 267, 271, 276, 277, 282, 283, 284, 285, 290, 295, 298, 299, 300, 308, 309, 311, 314, 315]}, {"test_lines": [266, 274], "covered_lines": [88, 90, 100, 101, 102, 103, 104, 117, 118, 124, 125, 132, 133, 141, 151, 152, 153, 155, 156, 157, 162, 163, 165, 226, 228, 229, 232, 233]}, {"test_lines": [276, 302], "covered_lines": [88, 90, 100, 101, 102, 103, 104, 117, 118, 124, 125, 132, 133, 141, 151, 152, 153, 155, 156, 157, 162, 168, 174, 175, 176, 187, 190, 192, 193, 198, 199, 202, 206, 207, 223, 226, 228, 229, 232, 233, 258, 259, 260, 261, 262, 265, 271, 276, 277, 282, 283, 284, 285, 290, 295, 298, 299, 300, 308, 309, 311, 314, 315]}, {"test_lines": [304, 334], "covered_lines": [88, 90, 100, 101, 102, 103, 104, 117, 118, 124, 125, 132, 133, 141, 151, 152, 153, 155, 156, 157, 162, 168, 169, 170, 174, 175, 176, 177, 180, 181, 187, 190, 192, 193, 198, 202, 206, 207, 223, 226, 228, 229, 232, 233, 258, 259, 260, 261, 262, 265, 266, 267, 271, 276, 277, 282, 283, 284, 285, 290, 295, 298, 299, 300, 308, 309, 311, 314, 315]}, {"test_lines": [336, 361], "covered_lines": [88, 90, 100, 101, 102, 103, 104, 117, 118, 124, 125, 132, 133, 141, 151, 152, 153, 174, 175, 176, 187, 190, 192, 193, 198, 202, 206, 207, 208, 209, 213, 214, 223, 226, 228, 229, 232, 233, 258, 259, 265, 271, 276, 277, 282, 283, 284, 285, 290, 295, 298, 299, 300, 308, 309, 311, 314, 315]}, {"test_lines": [363, 394], "covered_lines": [88, 90, 100, 101, 102, 103, 104, 117, 118, 124, 125, 132, 133, 141, 151, 152, 153, 155, 156, 157, 162, 168, 169, 170, 174, 175, 176, 187, 190, 192, 193, 198, 199, 202, 206, 207, 223, 226, 228, 229, 232, 233, 258, 259, 260, 261, 265, 266, 267, 268, 271, 276, 277, 282, 283, 284, 285, 290, 295, 298, 299, 300, 308, 309, 311, 314, 315]}, {"test_lines": [396, 412], "covered_lines": [88, 90, 100, 101, 102, 103, 104, 117, 118, 124, 125, 132, 133, 141, 142, 143, 145, 146, 147, 237, 241, 242, 245, 246, 253]}, {"test_lines": [414, 433], "covered_lines": [88, 90, 100, 101, 102, 103, 104, 117, 118, 124, 125, 132, 133, 141, 142, 143, 144, 145, 146, 147, 237, 241, 242, 245, 246, 248]}, {"test_lines": [435, 448], "covered_lines": [88, 90, 100, 101, 102, 103, 104, 117, 118, 124, 125, 132, 133, 141, 142, 143, 144, 151, 152, 153, 174, 175, 176, 187, 190, 192, 193, 198, 202, 206, 207, 223, 226, 228, 229, 232, 233, 237, 241, 242, 245, 246, 248, 258, 259, 265, 271, 276, 277, 282, 283, 284, 285, 290, 295, 298, 299, 300, 308, 309, 311, 314, 315]}]}, "/bernard/dataset_construction/prep/repos/itext-java/sign/src/main/java/com/itextpdf/signatures/validation/v1/SignatureValidationProperties.java": {"class_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.signatures.validation.v1;\n", "\n", "import java.time.Duration;\n", "import java.util.EnumSet;\n", "import java.util.HashMap;\n", "import java.util.function.Consumer;\n", "\n", "import com.itextpdf.signatures.validation.v1.context.CertificateSource;\n", "import com.itextpdf.signatures.validation.v1.context.CertificateSources;\n", "import com.itextpdf.signatures.validation.v1.context.TimeBasedContext;\n", "import com.itextpdf.signatures.validation.v1.context.TimeBasedContexts;\n", "import com.itextpdf.signatures.validation.v1.context.ValidationContext;\n", "import com.itextpdf.signatures.validation.v1.context.ValidatorContext;\n", "import com.itextpdf.signatures.validation.v1.context.ValidatorContexts;\n", "import com.itextpdf.signatures.validation.v1.extensions.BasicConstraintsExtension;\n", "import com.itextpdf.signatures.validation.v1.extensions.CertificateExtension;\n", "import com.itextpdf.signatures.validation.v1.extensions.ExtendedKeyUsageExtension;\n", "import com.itextpdf.signatures.validation.v1.extensions.KeyUsage;\n", "import com.itextpdf.signatures.validation.v1.extensions.KeyUsageExtension;\n", "import com.itextpdf.signatures.validation.v1.report.ValidationReport.ValidationResult;\n", "\n", "import java.util.ArrayList;\n", "import java.util.Collections;\n", "import java.util.List;\n", "import java.util.function.Function;\n", "\n", "/**\n", " * Class which stores properties, which are related to signature validation process.\n", " */\n", "public class SignatureValidationProperties {\n", "    public static final boolean DEFAULT_CONTINUE_AFTER_FAILURE = true;\n", "    public static final Duration DEFAULT_FRESHNESS_PRESENT_CRL = Duration.ofDays(30);\n", "    public static final Duration DEFAULT_FRESHNESS_PRESENT_OCSP = Duration.ofDays(24);\n", "    public static final Duration DEFAULT_FRESHNESS_HISTORICAL = Duration.ofMinutes(1);\n", "    public static final OnlineFetching DEFAULT_ONLINE_FETCHING = OnlineFetching.FETCH_IF_NO_OTHER_DATA_AVAILABLE;\n", "\n", "    private final HashMap<ValidationContext, ContextProperties> properties = new HashMap<>();\n", "\n", "    /**\n", "     * Create {@link SignatureValidationProperties} with default values.\n", "     */\n", "    public SignatureValidationProperties() {\n", "        setContinueAfterFailure(ValidatorContexts.all(),CertificateSources.all(), DEFAULT_CONTINUE_AFTER_FAILURE);\n", "        setRevocationOnlineFetching(ValidatorContexts.all(),CertificateSources.all(), TimeBasedContexts.all(),\n", "                DEFAULT_ONLINE_FETCHING);\n", "\n", "        setFreshness(ValidatorContexts.all(),CertificateSources.all(),\n", "                TimeBasedContexts.of(TimeBasedContext.HISTORICAL), DEFAULT_FRESHNESS_HISTORICAL);\n", "        setFreshness(ValidatorContexts.all(),CertificateSources.all(),\n", "                TimeBasedContexts.of(TimeBasedContext.PRESENT),DEFAULT_FRESHNESS_PRESENT_OCSP);\n", "        setFreshness(ValidatorContexts.of(ValidatorContext.CRL_VALIDATOR), CertificateSources.all(),\n", "                TimeBasedContexts.of(TimeBasedContext.PRESENT), DEFAULT_FRESHNESS_PRESENT_CRL);\n", "\n", "        setRequiredExtensions(CertificateSources.of(CertificateSource.CRL_ISSUER),\n", "                Collections.<CertificateExtension>singletonList(new KeyUsageExtension(KeyUsage.CRL_SIGN)));\n", "        setRequiredExtensions(CertificateSources.of(CertificateSource.OCSP_ISSUER),\n", "                Collections.<CertificateExtension>singletonList(new ExtendedKeyUsageExtension(\n", "                        Collections.<String>singletonList(ExtendedKeyUsageExtension.OCSP_SIGNING))));\n", "        setRequiredExtensions(CertificateSources.of(CertificateSource.SIGNER_CERT),\n", "                Collections.<CertificateExtension>singletonList(new KeyUsageExtension(KeyUsage.NON_REPUDIATION)));\n", "        List<CertificateExtension> certIssuerRequiredExtensions = new ArrayList<>();\n", "        certIssuerRequiredExtensions.add(new KeyUsageExtension(KeyUsage.KEY_CERT_SIGN));\n", "        certIssuerRequiredExtensions.add(new BasicConstraintsExtension(true));\n", "        setRequiredExtensions(CertificateSources.of(CertificateSource.CERT_ISSUER), certIssuerRequiredExtensions);\n", "        setRequiredExtensions(CertificateSources.of(CertificateSource.TIMESTAMP),\n", "                Collections.<CertificateExtension>singletonList(new ExtendedKeyUsageExtension(\n", "                        Collections.<String>singletonList(ExtendedKeyUsageExtension.TIME_STAMPING))));\n", "    }\n", "\n", "    /**\n", "     * Returns the freshness setting for the provided validation context or the default context\n", "     * in milliseconds.\n", "     *\n", "     * @param validationContext the validation context for which to retrieve the freshness setting\n", "     *\n", "     * @return the freshness setting for the provided validation context or the default context in milliseconds\n", "     */\n", "    public Duration getFreshness(ValidationContext validationContext) {\n", "        return this.<Duration>getParametersValueFor(validationContext.getValidatorContext(),\n", "                validationContext.getCertificateSource(), validationContext.getTimeBasedContext(),\n", "                p -> p.getFreshness());\n", "    }\n", "\n", "    /**\n", "     * Sets the freshness setting for the specified validator,\n", "     * time based and certificate source contexts in milliseconds.\n", "     * <p>\n", "     * This parameter specifies how old revocation data can be, compared to validation time, in order to be trustworthy.\n", "     *\n", "     * @param validatorContexts  the validators for which to apply the setting\n", "     * @param certificateSources the certificate sources to\n", "     * @param timeBasedContexts  the date comparison context  for which to apply the setting\n", "     * @param value              the settings value in milliseconds\n", "     *\n", "     * @return this same {@link SignatureValidationProperties} instance.\n", "     */\n", "    public final SignatureValidationProperties setFreshness(ValidatorContexts validatorContexts,\n", "                                                      CertificateSources certificateSources,\n", "                                                      TimeBasedContexts timeBasedContexts, Duration value) {\n", "        setParameterValueFor(validatorContexts.getSet(), certificateSources.getSet(), timeBasedContexts.getSet(),\n", "                p -> p.setFreshness(value));\n", "        return this;\n", "    }\n", "\n", "    /**\n", "     * Returns the Continue after failure setting for the provided context or the default context.\n", "     *\n", "     * @param validationContext the context for which to retrieve the Continue after failure setting\n", "     *\n", "     * @return the Continue after failure setting for the provided context or the default context\n", "     */\n", "    public boolean getContinueAfterFailure(ValidationContext validationContext) {\n", "        return this.<Boolean>getParametersValueFor(validationContext.getValidatorContext(),\n", "                validationContext.getCertificateSource(), validationContext.getTimeBasedContext(),\n", "                p -> p.getContinueAfterFailure());\n", "    }\n", "\n", "    /**\n", "     * Sets the Continue after failure setting for the provided context.\n", "     * <p>\n", "     * This parameter specifies if validation is expected to continue after first failure is encountered.\n", "     * Only {@link ValidationResult#INVALID} is considered to be a failure.\n", "     *\n", "     * @param validatorContexts  the validators for which to set the Continue after failure setting\n", "     * @param certificateSources the certificateSources for which to set the Continue after failure setting\n", "     * @param value              the Continue after failure setting\n", "     *\n", "     * @return this same {@link SignatureValidationProperties} instance.\n", "     */\n", "    public final SignatureValidationProperties setContinueAfterFailure(ValidatorContexts validatorContexts,\n", "            CertificateSources certificateSources, boolean value) {\n", "        setParameterValueFor(validatorContexts.getSet(), certificateSources.getSet(), TimeBasedContexts.all().getSet(),\n", "                p -> p.setContinueAfterFailure(value));\n", "        return this;\n", "    }\n", "\n", "    /**\n", "     * Sets the onlineFetching property representing possible online fetching permissions.\n", "     *\n", "     * @param validationContext the context for which to retrieve the online fetching setting\n", "     *\n", "     * @return the online fetching setting.\n", "     */\n", "    public OnlineFetching getRevocationOnlineFetching(ValidationContext validationContext) {\n", "        return this.<OnlineFetching>getParametersValueFor(validationContext.getValidatorContext(),\n", "                validationContext.getCertificateSource(), validationContext.getTimeBasedContext(),\n", "                p -> p.getOnlineFetching());\n", "    }\n", "\n", "    /**\n", "     * Sets the onlineFetching property representing possible online fetching permissions.\n", "     *\n", "     * @param validatorContexts  the validators for which to set this value\n", "     * @param certificateSources the certificate source for which to set this value\n", "     * @param timeBasedContexts  time perspective context, at which validation is happening\n", "     * @param onlineFetching     onlineFetching property value to set\n", "     *\n", "     * @return this same {@link SignatureValidationProperties} instance.\n", "     */\n", "    public final SignatureValidationProperties setRevocationOnlineFetching(ValidatorContexts validatorContexts,\n", "            CertificateSources certificateSources, TimeBasedContexts timeBasedContexts,\n", "            OnlineFetching onlineFetching) {\n", "        setParameterValueFor(validatorContexts.getSet(), certificateSources.getSet(), timeBasedContexts.getSet(),\n", "                p -> p.setOnlineFetching(onlineFetching));\n", "        return this;\n", "    }\n", "\n", "    /**\n", "     * Returns required extension for the provided validation context.\n", "     *\n", "     * @param validationContext the validation context for which to retrieve required extensions\n", "     *\n", "     * @return required extensions for the provided validation context\n", "     */\n", "    public List<CertificateExtension> getRequiredExtensions(ValidationContext validationContext) {\n", "        return this.<List<CertificateExtension>>getParametersValueFor(validationContext.getValidatorContext(),\n", "                validationContext.getCertificateSource(), validationContext.getTimeBasedContext(),\n", "                p -> p.getRequiredExtensions());\n", "    }\n", "\n", "    final SignatureValidationProperties setRequiredExtensions(CertificateSources certificateSources,\n", "            List<CertificateExtension> requiredExtensions) {\n", "        // make a defensive copy of requiredExtensions and already wrap it with unmodifiableList so that we don't have\n", "        // to do this every time it is retrieved. Now we are protected against changes in passed list and from\n", "        // changes in the returned list\n", "        List<CertificateExtension> copy = Collections.<CertificateExtension>unmodifiableList(\n", "                new ArrayList<>(requiredExtensions));\n", "        setParameterValueFor(ValidatorContexts.all().getSet(), certificateSources.getSet(),\n", "                TimeBasedContexts.all().getSet(), p -> p.setRequiredExtensions(copy));\n", "        return this;\n", "    }\n", "\n", "    /**\n", "     * This method executes the setter method for every combination of selected validators and certificateSources\n", "     *\n", "     * @param validatorContexts  the validators to execute the setter on\n", "     * @param certificateSources the certificate sources to execute the setter on\n", "     * @param setter             the setter to execute\n", "     */\n", "    final void setParameterValueFor(EnumSet<ValidatorContext> validatorContexts,\n", "            EnumSet<CertificateSource> certificateSources, EnumSet<TimeBasedContext> timeBasedContexts,\n", "            Consumer<ContextProperties> setter) {\n", "        for (ValidatorContext validatorContext : validatorContexts) {\n", "            for (CertificateSource certificateSource : certificateSources) {\n", "                for (TimeBasedContext timeBasedContext : timeBasedContexts) {\n", "                    ValidationContext vc = new ValidationContext(validatorContext, certificateSource, timeBasedContext);\n", "                    ContextProperties cProperties = properties.computeIfAbsent(vc, unused -> new ContextProperties());\n", "                    setter.accept(cProperties);\n", "                }\n", "            }\n", "        }\n", "    }\n", "\n", "    /**\n", "     * This method executes the getter method to the most granular parameters set down until the getter returns\n", "     * a non-null value\n", "     *\n", "     * @param validatorContext the validator for which the value is to be retrieved\n", "     * @param certSource       the certificate source for which the value is to be retrieved\n", "     * @param getter           the getter to get the value from the parameters set\n", "     * @param <T>              the type of the return value of this method and the getter method\n", "     *\n", "     * @return the first non-null value returned.\n", "     */\n", "    <T> T getParametersValueFor(ValidatorContext validatorContext, CertificateSource certSource,\n", "            TimeBasedContext timeBasedContext, Function<ContextProperties, T> getter) {\n", "        // all three match\n", "        ValidationContext c = new ValidationContext(validatorContext, certSource, timeBasedContext);\n", "        if (properties.containsKey(c)) {\n", "            return getter.apply(properties.get(c));\n", "        }\n", "        return null;\n", "    }\n", "\n", "    /**\n", "     * Enum representing possible online fetching permissions.\n", "     */\n", "    public enum OnlineFetching {\n", "        /**\n", "         * Permission to always fetch revocation data online.\n", "         */\n", "        ALWAYS_FETCH,\n", "        /**\n", "         * Permission to fetch revocation data online if no other revocation data available.\n", "         */\n", "        FETCH_IF_NO_OTHER_DATA_AVAILABLE,\n", "        /**\n", "         * Forbids fetching revocation data online.\n", "         */\n", "        NEVER_FETCH\n", "    }\n", "\n", "    static class ContextProperties {\n", "        private Duration freshness;\n", "        private Boolean continueAfterFailure;\n", "        private OnlineFetching onlineFetching;\n", "        private List<CertificateExtension> requiredExtensions;\n", "\n", "        public ContextProperties() {\n", "            // Empty constructor.\n", "        }\n", "\n", "        public Boolean getContinueAfterFailure() {\n", "            return continueAfterFailure;\n", "        }\n", "\n", "        public void setContinueAfterFailure(Boolean continueAfterFailure) {\n", "            this.continueAfterFailure = continueAfterFailure;\n", "        }\n", "\n", "        public Duration getFreshness() {\n", "            return freshness;\n", "        }\n", "\n", "        public void setFreshness(Duration value) {\n", "            freshness = value;\n", "        }\n", "\n", "        public OnlineFetching getOnlineFetching() {\n", "            return onlineFetching;\n", "        }\n", "\n", "        public void setOnlineFetching(OnlineFetching onlineFetching) {\n", "            this.onlineFetching = onlineFetching;\n", "        }\n", "\n", "        public List<CertificateExtension> getRequiredExtensions() {\n", "            return requiredExtensions;\n", "        }\n", "\n", "        public void setRequiredExtensions(List<CertificateExtension> requiredExtensions) {\n", "            this.requiredExtensions = requiredExtensions;\n", "        }\n", "    }\n", "}"], "test_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.signatures.validation.v1;\n", "\n", "import com.itextpdf.signatures.validation.v1.SignatureValidationProperties.ContextProperties;\n", "import com.itextpdf.signatures.validation.v1.context.CertificateSource;\n", "import com.itextpdf.signatures.validation.v1.context.CertificateSources;\n", "import com.itextpdf.signatures.validation.v1.context.TimeBasedContext;\n", "import com.itextpdf.signatures.validation.v1.context.TimeBasedContexts;\n", "import com.itextpdf.signatures.validation.v1.context.ValidationContext;\n", "import com.itextpdf.signatures.validation.v1.context.ValidatorContext;\n", "import com.itextpdf.signatures.validation.v1.context.ValidatorContexts;\n", "import com.itextpdf.signatures.validation.v1.extensions.CertificateExtension;\n", "import com.itextpdf.signatures.validation.v1.extensions.KeyUsageExtension;\n", "import com.itextpdf.test.ExtendedITextTest;\n", "import com.itextpdf.test.annotations.type.UnitTest;\n", "import org.junit.Assert;\n", "import org.junit.Test;\n", "import org.junit.experimental.categories.Category;\n", "\n", "import java.time.Duration;\n", "import java.util.Collections;\n", "import java.util.function.Consumer;\n", "\n", "@Category(UnitTest.class)\n", "public class SignatureValidationPropertiesTest extends ExtendedITextTest {\n", "\n", "    @Test\n", "    public void getParametersValueForSpecificTest() {\n", "        SignatureValidationProperties sut = new SignatureValidationProperties();\n", "\n", "        sut.setParameterValueFor(ValidatorContexts.of(ValidatorContext.OCSP_VALIDATOR, ValidatorContext.CRL_VALIDATOR,\n", "                        ValidatorContext.SIGNATURE_VALIDATOR).getSet(),\n", "                CertificateSources.of(CertificateSource.CRL_ISSUER, CertificateSource.SIGNER_CERT,\n", "                        CertificateSource.TIMESTAMP).getSet(), TimeBasedContexts.of(TimeBasedContext.HISTORICAL).getSet(),\n", "                new IncrementalFreshnessValueSetter(10, 1).getAction());\n", "\n", "        // test the last value added\n", "        Assert.assertEquals(Duration.ofDays(18),\n", "                sut.getParametersValueFor(ValidatorContext.SIGNATURE_VALIDATOR, CertificateSource.TIMESTAMP,\n", "                        TimeBasedContext.HISTORICAL,\n", "                        (p -> p.getFreshness())));\n", "\n", "        //test the fifth value added\n", "        Assert.assertEquals(Duration.ofDays(14),\n", "                sut.getParametersValueFor(ValidatorContext.CRL_VALIDATOR, CertificateSource.SIGNER_CERT,\n", "                        TimeBasedContext.HISTORICAL,\n", "                        (p -> p.getFreshness())));\n", "\n", "        // test the general default\n", "        Assert.assertEquals(SignatureValidationProperties.DEFAULT_FRESHNESS_HISTORICAL,\n", "                sut.getParametersValueFor(ValidatorContext.CERTIFICATE_CHAIN_VALIDATOR, CertificateSource.OCSP_ISSUER,\n", "                        TimeBasedContext.HISTORICAL,\n", "                        (p -> p.getFreshness())));\n", "    }\n", "\n", "\n", "    @Test\n", "    public void getParametersValueForDefaultTest() {\n", "        SignatureValidationProperties sut = new SignatureValidationProperties();\n", "\n", "        sut.setParameterValueFor(ValidatorContexts.of(ValidatorContext.OCSP_VALIDATOR, ValidatorContext.CRL_VALIDATOR,\n", "                        ValidatorContext.SIGNATURE_VALIDATOR).getSet(),\n", "                CertificateSources.of(CertificateSource.CRL_ISSUER, CertificateSource.SIGNER_CERT,\n", "                        CertificateSource.TIMESTAMP).getSet(),\n", "                TimeBasedContexts.of(TimeBasedContext.HISTORICAL).getSet(),\n", "                new IncrementalFreshnessValueSetter(10, 1).getAction());\n", "\n", "        // test the general default\n", "        Assert.assertEquals(SignatureValidationProperties.DEFAULT_FRESHNESS_PRESENT_OCSP,\n", "                sut.getParametersValueFor(ValidatorContext.CERTIFICATE_CHAIN_VALIDATOR, CertificateSource.OCSP_ISSUER,\n", "                        TimeBasedContext.PRESENT,\n", "                        (p -> p.getFreshness())));\n", "    }\n", "\n", "    @Test\n", "    public void setDefaultAsLastShouldOverrideAll() {\n", "        SignatureValidationProperties sut = new SignatureValidationProperties();\n", "\n", "        sut.setParameterValueFor(ValidatorContexts.of(ValidatorContext.OCSP_VALIDATOR, ValidatorContext.CRL_VALIDATOR,\n", "                        ValidatorContext.SIGNATURE_VALIDATOR).getSet(),\n", "                CertificateSources.of(CertificateSource.CRL_ISSUER, CertificateSource.SIGNER_CERT,\n", "                        CertificateSource.TIMESTAMP).getSet(),\n", "                TimeBasedContexts.of(TimeBasedContext.HISTORICAL).getSet(),\n", "                p -> p.setFreshness(Duration.ofDays(15)));\n", "\n", "        sut.setParameterValueFor(ValidatorContexts.all().getSet(),\n", "                CertificateSources.all().getSet(),\n", "                TimeBasedContexts.all().getSet(),\n", "                p -> p.setFreshness(Duration.ofDays(25)));\n", "\n", "        // test the general default\n", "        Assert.assertEquals(Duration.ofDays(25),\n", "                sut.getParametersValueFor(ValidatorContext.OCSP_VALIDATOR, CertificateSource.SIGNER_CERT,\n", "                        TimeBasedContext.PRESENT,\n", "                        (p -> p.getFreshness())));\n", "    }\n", "\n", "    @Test\n", "    public void setAndGetFreshnessTest() {\n", "        SignatureValidationProperties sut = new SignatureValidationProperties();\n", "        sut.setFreshness(ValidatorContexts.of(ValidatorContext.CRL_VALIDATOR),\n", "                CertificateSources.of(CertificateSource.CERT_ISSUER),\n", "                TimeBasedContexts.of(TimeBasedContext.HISTORICAL), Duration.ofDays(-10));\n", "        Assert.assertEquals(Duration.ofDays(-10),\n", "                sut.getFreshness(\n", "                        new ValidationContext(ValidatorContext.CRL_VALIDATOR, CertificateSource.CERT_ISSUER,\n", "                                TimeBasedContext.HISTORICAL)));\n", "\n", "        Assert.assertEquals(SignatureValidationProperties.DEFAULT_FRESHNESS_PRESENT_CRL,\n", "                sut.getFreshness(\n", "                        new ValidationContext(ValidatorContext.CRL_VALIDATOR, CertificateSource.CERT_ISSUER,\n", "                                TimeBasedContext.PRESENT)));\n", "    }\n", "\n", "    @Test\n", "    public void setAndGetContinueAfterFailure() {\n", "        SignatureValidationProperties sut = new SignatureValidationProperties();\n", "        sut.setContinueAfterFailure(ValidatorContexts.of(ValidatorContext.SIGNATURE_VALIDATOR),\n", "                CertificateSources.of(CertificateSource.CERT_ISSUER), true);\n", "        sut.setContinueAfterFailure(ValidatorContexts.of(ValidatorContext.SIGNATURE_VALIDATOR),\n", "                CertificateSources.of(CertificateSource.OCSP_ISSUER), false);\n", "\n", "        Assert.assertEquals(Boolean.TRUE, sut.getContinueAfterFailure(\n", "                new ValidationContext(ValidatorContext.SIGNATURE_VALIDATOR, CertificateSource.CERT_ISSUER,\n", "                        TimeBasedContext.PRESENT)));\n", "        Assert.assertEquals(Boolean.FALSE, sut.getContinueAfterFailure(\n", "                new ValidationContext(ValidatorContext.SIGNATURE_VALIDATOR, CertificateSource.OCSP_ISSUER,\n", "                        TimeBasedContext.PRESENT)));\n", "    }\n", "\n", "    @Test\n", "    public void setRevocationOnlineFetchingTest() {\n", "        SignatureValidationProperties sut = new SignatureValidationProperties();\n", "        sut.setRevocationOnlineFetching(ValidatorContexts.of(ValidatorContext.CRL_VALIDATOR), CertificateSources.all(),\n", "                TimeBasedContexts.of(TimeBasedContext.PRESENT),\n", "                SignatureValidationProperties.OnlineFetching.ALWAYS_FETCH);\n", "        Assert.assertEquals(SignatureValidationProperties.DEFAULT_ONLINE_FETCHING, sut.getRevocationOnlineFetching(\n", "                new ValidationContext(ValidatorContext.CRL_VALIDATOR, CertificateSource.OCSP_ISSUER,\n", "                        TimeBasedContext.HISTORICAL)));\n", "        Assert.assertEquals(SignatureValidationProperties.DEFAULT_ONLINE_FETCHING, sut.getRevocationOnlineFetching(\n", "                new ValidationContext(ValidatorContext.OCSP_VALIDATOR, CertificateSource.OCSP_ISSUER,\n", "                        TimeBasedContext.PRESENT)));\n", "        Assert.assertEquals(SignatureValidationProperties.OnlineFetching.ALWAYS_FETCH, sut.getRevocationOnlineFetching(\n", "                new ValidationContext(ValidatorContext.CRL_VALIDATOR, CertificateSource.OCSP_ISSUER,\n", "                        TimeBasedContext.PRESENT)));\n", "    }\n", "\n", "    @Test\n", "    public void setRequiredExtensionsTest() {\n", "        SignatureValidationProperties sut = new SignatureValidationProperties();\n", "        sut.setRequiredExtensions(CertificateSources.all(),\n", "                Collections.<CertificateExtension>singletonList(new KeyUsageExtension(1)));\n", "        sut.setRequiredExtensions(CertificateSources.of(CertificateSource.CERT_ISSUER),\n", "                Collections.<CertificateExtension>singletonList(new KeyUsageExtension(2)));\n", "        sut.setRequiredExtensions(CertificateSources.of(CertificateSource.OCSP_ISSUER),\n", "                Collections.<CertificateExtension>singletonList(new KeyUsageExtension(3)));\n", "\n", "        Assert.assertEquals(Collections.singletonList(new KeyUsageExtension(1)),\n", "                sut.getRequiredExtensions(new ValidationContext(ValidatorContext.CERTIFICATE_CHAIN_VALIDATOR,\n", "                        CertificateSource.SIGNER_CERT, TimeBasedContext.PRESENT)));\n", "        Assert.assertEquals(Collections.singletonList(new KeyUsageExtension(2)), sut.getRequiredExtensions(\n", "                new ValidationContext(ValidatorContext.CERTIFICATE_CHAIN_VALIDATOR,\n", "                        CertificateSource.CERT_ISSUER, TimeBasedContext.PRESENT)));\n", "        Assert.assertEquals(Collections.singletonList(new KeyUsageExtension(3)), sut.getRequiredExtensions(\n", "                new ValidationContext(ValidatorContext.CERTIFICATE_CHAIN_VALIDATOR,\n", "                        CertificateSource.OCSP_ISSUER, TimeBasedContext.HISTORICAL)));\n", "    }\n", "\n", "    private static class IncrementalFreshnessValueSetter {\n", "        private final int increment;\n", "        private int value;\n", "\n", "        public IncrementalFreshnessValueSetter(int initialValue, int increment) {\n", "            this.value = initialValue;\n", "            this.increment = increment;\n", "        }\n", "\n", "        public Consumer<ContextProperties> getAction() {\n", "            return p -> {\n", "                p.setFreshness(Duration.ofDays(value));\n", "                value += increment;\n", "            };\n", "        }\n", "    }\n", "}"], "method_lines_dic": {"SignatureValidationProperties::::getFreshness(com.itextpdf.signatures.validation.v1.context.ValidationContext)": [100, 104], "SignatureValidationProperties::::setFreshness(com.itextpdf.signatures.validation.v1.context.ValidatorContexts,com.itextpdf.signatures.validation.v1.context.CertificateSources,com.itextpdf.signatures.validation.v1.context.TimeBasedContexts,java.time.Duration)": [119, 125], "SignatureValidationProperties::::getContinueAfterFailure(com.itextpdf.signatures.validation.v1.context.ValidationContext)": [134, 138], "SignatureValidationProperties::::setContinueAfterFailure(com.itextpdf.signatures.validation.v1.context.ValidatorContexts,com.itextpdf.signatures.validation.v1.context.CertificateSources,boolean)": [152, 157], "SignatureValidationProperties::::getRevocationOnlineFetching(com.itextpdf.signatures.validation.v1.context.ValidationContext)": [166, 170], "SignatureValidationProperties::::setRevocationOnlineFetching(com.itextpdf.signatures.validation.v1.context.ValidatorContexts,com.itextpdf.signatures.validation.v1.context.CertificateSources,com.itextpdf.signatures.validation.v1.context.TimeBasedContexts,com.itextpdf.signatures.validation.v1.SignatureValidationProperties.OnlineFetching)": [182, 188], "SignatureValidationProperties::::getRequiredExtensions(com.itextpdf.signatures.validation.v1.context.ValidationContext)": [197, 201], "SignatureValidationProperties::::setRequiredExtensions(com.itextpdf.signatures.validation.v1.context.CertificateSources,java.util.List<com.itextpdf.signatures.validation.v1.extensions.CertificateExtension>)": [203, 213], "SignatureValidationProperties::::setParameterValueFor(java.util.EnumSet<com.itextpdf.signatures.validation.v1.context.ValidatorContext>,java.util.EnumSet<com.itextpdf.signatures.validation.v1.context.CertificateSource>,java.util.EnumSet<com.itextpdf.signatures.validation.v1.context.TimeBasedContext>,java.util.function.Consumer<com.itextpdf.signatures.validation.v1.SignatureValidationProperties.ContextProperties>)": [222, 234], "SignatureValidationProperties::::getParametersValueFor(com.itextpdf.signatures.validation.v1.context.ValidatorContext,com.itextpdf.signatures.validation.v1.context.CertificateSource,com.itextpdf.signatures.validation.v1.context.TimeBasedContext,java.util.function.Function<com.itextpdf.signatures.validation.v1.SignatureValidationProperties.ContextProperties, T>)": [247, 255], "SignatureValidationProperties.ContextProperties::::getContinueAfterFailure()": [285, 287], "SignatureValidationProperties.ContextProperties::::setContinueAfterFailure(java.lang.Boolean)": [289, 291], "SignatureValidationProperties.ContextProperties::::getFreshness()": [293, 295], "SignatureValidationProperties.ContextProperties::::setFreshness(java.time.Duration)": [297, 299], "SignatureValidationProperties.ContextProperties::::getOnlineFetching()": [301, 303], "SignatureValidationProperties.ContextProperties::::setOnlineFetching(com.itextpdf.signatures.validation.v1.SignatureValidationProperties.OnlineFetching)": [305, 307], "SignatureValidationProperties.ContextProperties::::getRequiredExtensions()": [309, 311], "SignatureValidationProperties.ContextProperties::::setRequiredExtensions(java.util.List<com.itextpdf.signatures.validation.v1.extensions.CertificateExtension>)": [313, 315]}, "test_method_lines_dic": {"SignatureValidationPropertiesTest::::getParametersValueForSpecificTest()": [48, 75], "SignatureValidationPropertiesTest::::getParametersValueForDefaultTest()": [78, 94], "SignatureValidationPropertiesTest::::setDefaultAsLastShouldOverrideAll()": [96, 117], "SignatureValidationPropertiesTest::::setAndGetFreshnessTest()": [119, 134], "SignatureValidationPropertiesTest::::setAndGetContinueAfterFailure()": [136, 150], "SignatureValidationPropertiesTest::::setRevocationOnlineFetchingTest()": [152, 167], "SignatureValidationPropertiesTest::::setRequiredExtensionsTest()": [169, 188], "SignatureValidationPropertiesTest.IncrementalFreshnessValueSetter::::getAction()": [199, 204]}, "reverse_method_lines_dic": {"100": "SignatureValidationProperties::::getFreshness(com.itextpdf.signatures.validation.v1.context.ValidationContext)", "101": "SignatureValidationProperties::::getFreshness(com.itextpdf.signatures.validation.v1.context.ValidationContext)", "102": "SignatureValidationProperties::::getFreshness(com.itextpdf.signatures.validation.v1.context.ValidationContext)", "103": "SignatureValidationProperties::::getFreshness(com.itextpdf.signatures.validation.v1.context.ValidationContext)", "104": "SignatureValidationProperties::::getFreshness(com.itextpdf.signatures.validation.v1.context.ValidationContext)", "119": "SignatureValidationProperties::::setFreshness(com.itextpdf.signatures.validation.v1.context.ValidatorContexts,com.itextpdf.signatures.validation.v1.context.CertificateSources,com.itextpdf.signatures.validation.v1.context.TimeBasedContexts,java.time.Duration)", "120": "SignatureValidationProperties::::setFreshness(com.itextpdf.signatures.validation.v1.context.ValidatorContexts,com.itextpdf.signatures.validation.v1.context.CertificateSources,com.itextpdf.signatures.validation.v1.context.TimeBasedContexts,java.time.Duration)", "121": "SignatureValidationProperties::::setFreshness(com.itextpdf.signatures.validation.v1.context.ValidatorContexts,com.itextpdf.signatures.validation.v1.context.CertificateSources,com.itextpdf.signatures.validation.v1.context.TimeBasedContexts,java.time.Duration)", "122": "SignatureValidationProperties::::setFreshness(com.itextpdf.signatures.validation.v1.context.ValidatorContexts,com.itextpdf.signatures.validation.v1.context.CertificateSources,com.itextpdf.signatures.validation.v1.context.TimeBasedContexts,java.time.Duration)", "123": "SignatureValidationProperties::::setFreshness(com.itextpdf.signatures.validation.v1.context.ValidatorContexts,com.itextpdf.signatures.validation.v1.context.CertificateSources,com.itextpdf.signatures.validation.v1.context.TimeBasedContexts,java.time.Duration)", "124": "SignatureValidationProperties::::setFreshness(com.itextpdf.signatures.validation.v1.context.ValidatorContexts,com.itextpdf.signatures.validation.v1.context.CertificateSources,com.itextpdf.signatures.validation.v1.context.TimeBasedContexts,java.time.Duration)", "125": "SignatureValidationProperties::::setFreshness(com.itextpdf.signatures.validation.v1.context.ValidatorContexts,com.itextpdf.signatures.validation.v1.context.CertificateSources,com.itextpdf.signatures.validation.v1.context.TimeBasedContexts,java.time.Duration)", "134": "SignatureValidationProperties::::getContinueAfterFailure(com.itextpdf.signatures.validation.v1.context.ValidationContext)", "135": "SignatureValidationProperties::::getContinueAfterFailure(com.itextpdf.signatures.validation.v1.context.ValidationContext)", "136": "SignatureValidationProperties::::getContinueAfterFailure(com.itextpdf.signatures.validation.v1.context.ValidationContext)", "137": "SignatureValidationProperties::::getContinueAfterFailure(com.itextpdf.signatures.validation.v1.context.ValidationContext)", "138": "SignatureValidationProperties::::getContinueAfterFailure(com.itextpdf.signatures.validation.v1.context.ValidationContext)", "152": "SignatureValidationProperties::::setContinueAfterFailure(com.itextpdf.signatures.validation.v1.context.ValidatorContexts,com.itextpdf.signatures.validation.v1.context.CertificateSources,boolean)", "153": "SignatureValidationProperties::::setContinueAfterFailure(com.itextpdf.signatures.validation.v1.context.ValidatorContexts,com.itextpdf.signatures.validation.v1.context.CertificateSources,boolean)", "154": "SignatureValidationProperties::::setContinueAfterFailure(com.itextpdf.signatures.validation.v1.context.ValidatorContexts,com.itextpdf.signatures.validation.v1.context.CertificateSources,boolean)", "155": "SignatureValidationProperties::::setContinueAfterFailure(com.itextpdf.signatures.validation.v1.context.ValidatorContexts,com.itextpdf.signatures.validation.v1.context.CertificateSources,boolean)", "156": "SignatureValidationProperties::::setContinueAfterFailure(com.itextpdf.signatures.validation.v1.context.ValidatorContexts,com.itextpdf.signatures.validation.v1.context.CertificateSources,boolean)", "157": "SignatureValidationProperties::::setContinueAfterFailure(com.itextpdf.signatures.validation.v1.context.ValidatorContexts,com.itextpdf.signatures.validation.v1.context.CertificateSources,boolean)", "166": "SignatureValidationProperties::::getRevocationOnlineFetching(com.itextpdf.signatures.validation.v1.context.ValidationContext)", "167": "SignatureValidationProperties::::getRevocationOnlineFetching(com.itextpdf.signatures.validation.v1.context.ValidationContext)", "168": "SignatureValidationProperties::::getRevocationOnlineFetching(com.itextpdf.signatures.validation.v1.context.ValidationContext)", "169": "SignatureValidationProperties::::getRevocationOnlineFetching(com.itextpdf.signatures.validation.v1.context.ValidationContext)", "170": "SignatureValidationProperties::::getRevocationOnlineFetching(com.itextpdf.signatures.validation.v1.context.ValidationContext)", "182": "SignatureValidationProperties::::setRevocationOnlineFetching(com.itextpdf.signatures.validation.v1.context.ValidatorContexts,com.itextpdf.signatures.validation.v1.context.CertificateSources,com.itextpdf.signatures.validation.v1.context.TimeBasedContexts,com.itextpdf.signatures.validation.v1.SignatureValidationProperties.OnlineFetching)", "183": "SignatureValidationProperties::::setRevocationOnlineFetching(com.itextpdf.signatures.validation.v1.context.ValidatorContexts,com.itextpdf.signatures.validation.v1.context.CertificateSources,com.itextpdf.signatures.validation.v1.context.TimeBasedContexts,com.itextpdf.signatures.validation.v1.SignatureValidationProperties.OnlineFetching)", "184": "SignatureValidationProperties::::setRevocationOnlineFetching(com.itextpdf.signatures.validation.v1.context.ValidatorContexts,com.itextpdf.signatures.validation.v1.context.CertificateSources,com.itextpdf.signatures.validation.v1.context.TimeBasedContexts,com.itextpdf.signatures.validation.v1.SignatureValidationProperties.OnlineFetching)", "185": "SignatureValidationProperties::::setRevocationOnlineFetching(com.itextpdf.signatures.validation.v1.context.ValidatorContexts,com.itextpdf.signatures.validation.v1.context.CertificateSources,com.itextpdf.signatures.validation.v1.context.TimeBasedContexts,com.itextpdf.signatures.validation.v1.SignatureValidationProperties.OnlineFetching)", "186": "SignatureValidationProperties::::setRevocationOnlineFetching(com.itextpdf.signatures.validation.v1.context.ValidatorContexts,com.itextpdf.signatures.validation.v1.context.CertificateSources,com.itextpdf.signatures.validation.v1.context.TimeBasedContexts,com.itextpdf.signatures.validation.v1.SignatureValidationProperties.OnlineFetching)", "187": "SignatureValidationProperties::::setRevocationOnlineFetching(com.itextpdf.signatures.validation.v1.context.ValidatorContexts,com.itextpdf.signatures.validation.v1.context.CertificateSources,com.itextpdf.signatures.validation.v1.context.TimeBasedContexts,com.itextpdf.signatures.validation.v1.SignatureValidationProperties.OnlineFetching)", "188": "SignatureValidationProperties::::setRevocationOnlineFetching(com.itextpdf.signatures.validation.v1.context.ValidatorContexts,com.itextpdf.signatures.validation.v1.context.CertificateSources,com.itextpdf.signatures.validation.v1.context.TimeBasedContexts,com.itextpdf.signatures.validation.v1.SignatureValidationProperties.OnlineFetching)", "197": "SignatureValidationProperties::::getRequiredExtensions(com.itextpdf.signatures.validation.v1.context.ValidationContext)", "198": "SignatureValidationProperties::::getRequiredExtensions(com.itextpdf.signatures.validation.v1.context.ValidationContext)", "199": "SignatureValidationProperties::::getRequiredExtensions(com.itextpdf.signatures.validation.v1.context.ValidationContext)", "200": "SignatureValidationProperties::::getRequiredExtensions(com.itextpdf.signatures.validation.v1.context.ValidationContext)", "201": "SignatureValidationProperties::::getRequiredExtensions(com.itextpdf.signatures.validation.v1.context.ValidationContext)", "203": "SignatureValidationProperties::::setRequiredExtensions(com.itextpdf.signatures.validation.v1.context.CertificateSources,java.util.List<com.itextpdf.signatures.validation.v1.extensions.CertificateExtension>)", "204": "SignatureValidationProperties::::setRequiredExtensions(com.itextpdf.signatures.validation.v1.context.CertificateSources,java.util.List<com.itextpdf.signatures.validation.v1.extensions.CertificateExtension>)", "205": "SignatureValidationProperties::::setRequiredExtensions(com.itextpdf.signatures.validation.v1.context.CertificateSources,java.util.List<com.itextpdf.signatures.validation.v1.extensions.CertificateExtension>)", "206": "SignatureValidationProperties::::setRequiredExtensions(com.itextpdf.signatures.validation.v1.context.CertificateSources,java.util.List<com.itextpdf.signatures.validation.v1.extensions.CertificateExtension>)", "207": "SignatureValidationProperties::::setRequiredExtensions(com.itextpdf.signatures.validation.v1.context.CertificateSources,java.util.List<com.itextpdf.signatures.validation.v1.extensions.CertificateExtension>)", "208": "SignatureValidationProperties::::setRequiredExtensions(com.itextpdf.signatures.validation.v1.context.CertificateSources,java.util.List<com.itextpdf.signatures.validation.v1.extensions.CertificateExtension>)", "209": "SignatureValidationProperties::::setRequiredExtensions(com.itextpdf.signatures.validation.v1.context.CertificateSources,java.util.List<com.itextpdf.signatures.validation.v1.extensions.CertificateExtension>)", "210": "SignatureValidationProperties::::setRequiredExtensions(com.itextpdf.signatures.validation.v1.context.CertificateSources,java.util.List<com.itextpdf.signatures.validation.v1.extensions.CertificateExtension>)", "211": "SignatureValidationProperties::::setRequiredExtensions(com.itextpdf.signatures.validation.v1.context.CertificateSources,java.util.List<com.itextpdf.signatures.validation.v1.extensions.CertificateExtension>)", "212": "SignatureValidationProperties::::setRequiredExtensions(com.itextpdf.signatures.validation.v1.context.CertificateSources,java.util.List<com.itextpdf.signatures.validation.v1.extensions.CertificateExtension>)", "213": "SignatureValidationProperties::::setRequiredExtensions(com.itextpdf.signatures.validation.v1.context.CertificateSources,java.util.List<com.itextpdf.signatures.validation.v1.extensions.CertificateExtension>)", "222": "SignatureValidationProperties::::setParameterValueFor(java.util.EnumSet<com.itextpdf.signatures.validation.v1.context.ValidatorContext>,java.util.EnumSet<com.itextpdf.signatures.validation.v1.context.CertificateSource>,java.util.EnumSet<com.itextpdf.signatures.validation.v1.context.TimeBasedContext>,java.util.function.Consumer<com.itextpdf.signatures.validation.v1.SignatureValidationProperties.ContextProperties>)", "223": "SignatureValidationProperties::::setParameterValueFor(java.util.EnumSet<com.itextpdf.signatures.validation.v1.context.ValidatorContext>,java.util.EnumSet<com.itextpdf.signatures.validation.v1.context.CertificateSource>,java.util.EnumSet<com.itextpdf.signatures.validation.v1.context.TimeBasedContext>,java.util.function.Consumer<com.itextpdf.signatures.validation.v1.SignatureValidationProperties.ContextProperties>)", "224": "SignatureValidationProperties::::setParameterValueFor(java.util.EnumSet<com.itextpdf.signatures.validation.v1.context.ValidatorContext>,java.util.EnumSet<com.itextpdf.signatures.validation.v1.context.CertificateSource>,java.util.EnumSet<com.itextpdf.signatures.validation.v1.context.TimeBasedContext>,java.util.function.Consumer<com.itextpdf.signatures.validation.v1.SignatureValidationProperties.ContextProperties>)", "225": "SignatureValidationProperties::::setParameterValueFor(java.util.EnumSet<com.itextpdf.signatures.validation.v1.context.ValidatorContext>,java.util.EnumSet<com.itextpdf.signatures.validation.v1.context.CertificateSource>,java.util.EnumSet<com.itextpdf.signatures.validation.v1.context.TimeBasedContext>,java.util.function.Consumer<com.itextpdf.signatures.validation.v1.SignatureValidationProperties.ContextProperties>)", "226": "SignatureValidationProperties::::setParameterValueFor(java.util.EnumSet<com.itextpdf.signatures.validation.v1.context.ValidatorContext>,java.util.EnumSet<com.itextpdf.signatures.validation.v1.context.CertificateSource>,java.util.EnumSet<com.itextpdf.signatures.validation.v1.context.TimeBasedContext>,java.util.function.Consumer<com.itextpdf.signatures.validation.v1.SignatureValidationProperties.ContextProperties>)", "227": "SignatureValidationProperties::::setParameterValueFor(java.util.EnumSet<com.itextpdf.signatures.validation.v1.context.ValidatorContext>,java.util.EnumSet<com.itextpdf.signatures.validation.v1.context.CertificateSource>,java.util.EnumSet<com.itextpdf.signatures.validation.v1.context.TimeBasedContext>,java.util.function.Consumer<com.itextpdf.signatures.validation.v1.SignatureValidationProperties.ContextProperties>)", "228": "SignatureValidationProperties::::setParameterValueFor(java.util.EnumSet<com.itextpdf.signatures.validation.v1.context.ValidatorContext>,java.util.EnumSet<com.itextpdf.signatures.validation.v1.context.CertificateSource>,java.util.EnumSet<com.itextpdf.signatures.validation.v1.context.TimeBasedContext>,java.util.function.Consumer<com.itextpdf.signatures.validation.v1.SignatureValidationProperties.ContextProperties>)", "229": "SignatureValidationProperties::::setParameterValueFor(java.util.EnumSet<com.itextpdf.signatures.validation.v1.context.ValidatorContext>,java.util.EnumSet<com.itextpdf.signatures.validation.v1.context.CertificateSource>,java.util.EnumSet<com.itextpdf.signatures.validation.v1.context.TimeBasedContext>,java.util.function.Consumer<com.itextpdf.signatures.validation.v1.SignatureValidationProperties.ContextProperties>)", "230": "SignatureValidationProperties::::setParameterValueFor(java.util.EnumSet<com.itextpdf.signatures.validation.v1.context.ValidatorContext>,java.util.EnumSet<com.itextpdf.signatures.validation.v1.context.CertificateSource>,java.util.EnumSet<com.itextpdf.signatures.validation.v1.context.TimeBasedContext>,java.util.function.Consumer<com.itextpdf.signatures.validation.v1.SignatureValidationProperties.ContextProperties>)", "231": "SignatureValidationProperties::::setParameterValueFor(java.util.EnumSet<com.itextpdf.signatures.validation.v1.context.ValidatorContext>,java.util.EnumSet<com.itextpdf.signatures.validation.v1.context.CertificateSource>,java.util.EnumSet<com.itextpdf.signatures.validation.v1.context.TimeBasedContext>,java.util.function.Consumer<com.itextpdf.signatures.validation.v1.SignatureValidationProperties.ContextProperties>)", "232": "SignatureValidationProperties::::setParameterValueFor(java.util.EnumSet<com.itextpdf.signatures.validation.v1.context.ValidatorContext>,java.util.EnumSet<com.itextpdf.signatures.validation.v1.context.CertificateSource>,java.util.EnumSet<com.itextpdf.signatures.validation.v1.context.TimeBasedContext>,java.util.function.Consumer<com.itextpdf.signatures.validation.v1.SignatureValidationProperties.ContextProperties>)", "233": "SignatureValidationProperties::::setParameterValueFor(java.util.EnumSet<com.itextpdf.signatures.validation.v1.context.ValidatorContext>,java.util.EnumSet<com.itextpdf.signatures.validation.v1.context.CertificateSource>,java.util.EnumSet<com.itextpdf.signatures.validation.v1.context.TimeBasedContext>,java.util.function.Consumer<com.itextpdf.signatures.validation.v1.SignatureValidationProperties.ContextProperties>)", "234": "SignatureValidationProperties::::setParameterValueFor(java.util.EnumSet<com.itextpdf.signatures.validation.v1.context.ValidatorContext>,java.util.EnumSet<com.itextpdf.signatures.validation.v1.context.CertificateSource>,java.util.EnumSet<com.itextpdf.signatures.validation.v1.context.TimeBasedContext>,java.util.function.Consumer<com.itextpdf.signatures.validation.v1.SignatureValidationProperties.ContextProperties>)", "247": "SignatureValidationProperties::::getParametersValueFor(com.itextpdf.signatures.validation.v1.context.ValidatorContext,com.itextpdf.signatures.validation.v1.context.CertificateSource,com.itextpdf.signatures.validation.v1.context.TimeBasedContext,java.util.function.Function<com.itextpdf.signatures.validation.v1.SignatureValidationProperties.ContextProperties, T>)", "248": "SignatureValidationProperties::::getParametersValueFor(com.itextpdf.signatures.validation.v1.context.ValidatorContext,com.itextpdf.signatures.validation.v1.context.CertificateSource,com.itextpdf.signatures.validation.v1.context.TimeBasedContext,java.util.function.Function<com.itextpdf.signatures.validation.v1.SignatureValidationProperties.ContextProperties, T>)", "249": "SignatureValidationProperties::::getParametersValueFor(com.itextpdf.signatures.validation.v1.context.ValidatorContext,com.itextpdf.signatures.validation.v1.context.CertificateSource,com.itextpdf.signatures.validation.v1.context.TimeBasedContext,java.util.function.Function<com.itextpdf.signatures.validation.v1.SignatureValidationProperties.ContextProperties, T>)", "250": "SignatureValidationProperties::::getParametersValueFor(com.itextpdf.signatures.validation.v1.context.ValidatorContext,com.itextpdf.signatures.validation.v1.context.CertificateSource,com.itextpdf.signatures.validation.v1.context.TimeBasedContext,java.util.function.Function<com.itextpdf.signatures.validation.v1.SignatureValidationProperties.ContextProperties, T>)", "251": "SignatureValidationProperties::::getParametersValueFor(com.itextpdf.signatures.validation.v1.context.ValidatorContext,com.itextpdf.signatures.validation.v1.context.CertificateSource,com.itextpdf.signatures.validation.v1.context.TimeBasedContext,java.util.function.Function<com.itextpdf.signatures.validation.v1.SignatureValidationProperties.ContextProperties, T>)", "252": "SignatureValidationProperties::::getParametersValueFor(com.itextpdf.signatures.validation.v1.context.ValidatorContext,com.itextpdf.signatures.validation.v1.context.CertificateSource,com.itextpdf.signatures.validation.v1.context.TimeBasedContext,java.util.function.Function<com.itextpdf.signatures.validation.v1.SignatureValidationProperties.ContextProperties, T>)", "253": "SignatureValidationProperties::::getParametersValueFor(com.itextpdf.signatures.validation.v1.context.ValidatorContext,com.itextpdf.signatures.validation.v1.context.CertificateSource,com.itextpdf.signatures.validation.v1.context.TimeBasedContext,java.util.function.Function<com.itextpdf.signatures.validation.v1.SignatureValidationProperties.ContextProperties, T>)", "254": "SignatureValidationProperties::::getParametersValueFor(com.itextpdf.signatures.validation.v1.context.ValidatorContext,com.itextpdf.signatures.validation.v1.context.CertificateSource,com.itextpdf.signatures.validation.v1.context.TimeBasedContext,java.util.function.Function<com.itextpdf.signatures.validation.v1.SignatureValidationProperties.ContextProperties, T>)", "255": "SignatureValidationProperties::::getParametersValueFor(com.itextpdf.signatures.validation.v1.context.ValidatorContext,com.itextpdf.signatures.validation.v1.context.CertificateSource,com.itextpdf.signatures.validation.v1.context.TimeBasedContext,java.util.function.Function<com.itextpdf.signatures.validation.v1.SignatureValidationProperties.ContextProperties, T>)", "285": "SignatureValidationProperties.ContextProperties::::getContinueAfterFailure()", "286": "SignatureValidationProperties.ContextProperties::::getContinueAfterFailure()", "287": "SignatureValidationProperties.ContextProperties::::getContinueAfterFailure()", "289": "SignatureValidationProperties.ContextProperties::::setContinueAfterFailure(java.lang.Boolean)", "290": "SignatureValidationProperties.ContextProperties::::setContinueAfterFailure(java.lang.Boolean)", "291": "SignatureValidationProperties.ContextProperties::::setContinueAfterFailure(java.lang.Boolean)", "293": "SignatureValidationProperties.ContextProperties::::getFreshness()", "294": "SignatureValidationProperties.ContextProperties::::getFreshness()", "295": "SignatureValidationProperties.ContextProperties::::getFreshness()", "297": "SignatureValidationProperties.ContextProperties::::setFreshness(java.time.Duration)", "298": "SignatureValidationProperties.ContextProperties::::setFreshness(java.time.Duration)", "299": "SignatureValidationProperties.ContextProperties::::setFreshness(java.time.Duration)", "301": "SignatureValidationProperties.ContextProperties::::getOnlineFetching()", "302": "SignatureValidationProperties.ContextProperties::::getOnlineFetching()", "303": "SignatureValidationProperties.ContextProperties::::getOnlineFetching()", "305": "SignatureValidationProperties.ContextProperties::::setOnlineFetching(com.itextpdf.signatures.validation.v1.SignatureValidationProperties.OnlineFetching)", "306": "SignatureValidationProperties.ContextProperties::::setOnlineFetching(com.itextpdf.signatures.validation.v1.SignatureValidationProperties.OnlineFetching)", "307": "SignatureValidationProperties.ContextProperties::::setOnlineFetching(com.itextpdf.signatures.validation.v1.SignatureValidationProperties.OnlineFetching)", "309": "SignatureValidationProperties.ContextProperties::::getRequiredExtensions()", "310": "SignatureValidationProperties.ContextProperties::::getRequiredExtensions()", "311": "SignatureValidationProperties.ContextProperties::::getRequiredExtensions()", "313": "SignatureValidationProperties.ContextProperties::::setRequiredExtensions(java.util.List<com.itextpdf.signatures.validation.v1.extensions.CertificateExtension>)", "314": "SignatureValidationProperties.ContextProperties::::setRequiredExtensions(java.util.List<com.itextpdf.signatures.validation.v1.extensions.CertificateExtension>)", "315": "SignatureValidationProperties.ContextProperties::::setRequiredExtensions(java.util.List<com.itextpdf.signatures.validation.v1.extensions.CertificateExtension>)"}, "test_reverse_method_lines_dic": {"48": "SignatureValidationPropertiesTest::::getParametersValueForSpecificTest()", "49": "SignatureValidationPropertiesTest::::getParametersValueForSpecificTest()", "50": "SignatureValidationPropertiesTest::::getParametersValueForSpecificTest()", "51": "SignatureValidationPropertiesTest::::getParametersValueForSpecificTest()", "52": "SignatureValidationPropertiesTest::::getParametersValueForSpecificTest()", "53": "SignatureValidationPropertiesTest::::getParametersValueForSpecificTest()", "54": "SignatureValidationPropertiesTest::::getParametersValueForSpecificTest()", "55": "SignatureValidationPropertiesTest::::getParametersValueForSpecificTest()", "56": "SignatureValidationPropertiesTest::::getParametersValueForSpecificTest()", "57": "SignatureValidationPropertiesTest::::getParametersValueForSpecificTest()", "58": "SignatureValidationPropertiesTest::::getParametersValueForSpecificTest()", "59": "SignatureValidationPropertiesTest::::getParametersValueForSpecificTest()", "60": "SignatureValidationPropertiesTest::::getParametersValueForSpecificTest()", "61": "SignatureValidationPropertiesTest::::getParametersValueForSpecificTest()", "62": "SignatureValidationPropertiesTest::::getParametersValueForSpecificTest()", "63": "SignatureValidationPropertiesTest::::getParametersValueForSpecificTest()", "64": "SignatureValidationPropertiesTest::::getParametersValueForSpecificTest()", "65": "SignatureValidationPropertiesTest::::getParametersValueForSpecificTest()", "66": "SignatureValidationPropertiesTest::::getParametersValueForSpecificTest()", "67": "SignatureValidationPropertiesTest::::getParametersValueForSpecificTest()", "68": "SignatureValidationPropertiesTest::::getParametersValueForSpecificTest()", "69": "SignatureValidationPropertiesTest::::getParametersValueForSpecificTest()", "70": "SignatureValidationPropertiesTest::::getParametersValueForSpecificTest()", "71": "SignatureValidationPropertiesTest::::getParametersValueForSpecificTest()", "72": "SignatureValidationPropertiesTest::::getParametersValueForSpecificTest()", "73": "SignatureValidationPropertiesTest::::getParametersValueForSpecificTest()", "74": "SignatureValidationPropertiesTest::::getParametersValueForSpecificTest()", "75": "SignatureValidationPropertiesTest::::getParametersValueForSpecificTest()", "78": "SignatureValidationPropertiesTest::::getParametersValueForDefaultTest()", "79": "SignatureValidationPropertiesTest::::getParametersValueForDefaultTest()", "80": "SignatureValidationPropertiesTest::::getParametersValueForDefaultTest()", "81": "SignatureValidationPropertiesTest::::getParametersValueForDefaultTest()", "82": "SignatureValidationPropertiesTest::::getParametersValueForDefaultTest()", "83": "SignatureValidationPropertiesTest::::getParametersValueForDefaultTest()", "84": "SignatureValidationPropertiesTest::::getParametersValueForDefaultTest()", "85": "SignatureValidationPropertiesTest::::getParametersValueForDefaultTest()", "86": "SignatureValidationPropertiesTest::::getParametersValueForDefaultTest()", "87": "SignatureValidationPropertiesTest::::getParametersValueForDefaultTest()", "88": "SignatureValidationPropertiesTest::::getParametersValueForDefaultTest()", "89": "SignatureValidationPropertiesTest::::getParametersValueForDefaultTest()", "90": "SignatureValidationPropertiesTest::::getParametersValueForDefaultTest()", "91": "SignatureValidationPropertiesTest::::getParametersValueForDefaultTest()", "92": "SignatureValidationPropertiesTest::::getParametersValueForDefaultTest()", "93": "SignatureValidationPropertiesTest::::getParametersValueForDefaultTest()", "94": "SignatureValidationPropertiesTest::::getParametersValueForDefaultTest()", "96": "SignatureValidationPropertiesTest::::setDefaultAsLastShouldOverrideAll()", "97": "SignatureValidationPropertiesTest::::setDefaultAsLastShouldOverrideAll()", "98": "SignatureValidationPropertiesTest::::setDefaultAsLastShouldOverrideAll()", "99": "SignatureValidationPropertiesTest::::setDefaultAsLastShouldOverrideAll()", "100": "SignatureValidationPropertiesTest::::setDefaultAsLastShouldOverrideAll()", "101": "SignatureValidationPropertiesTest::::setDefaultAsLastShouldOverrideAll()", "102": "SignatureValidationPropertiesTest::::setDefaultAsLastShouldOverrideAll()", "103": "SignatureValidationPropertiesTest::::setDefaultAsLastShouldOverrideAll()", "104": "SignatureValidationPropertiesTest::::setDefaultAsLastShouldOverrideAll()", "105": "SignatureValidationPropertiesTest::::setDefaultAsLastShouldOverrideAll()", "106": "SignatureValidationPropertiesTest::::setDefaultAsLastShouldOverrideAll()", "107": "SignatureValidationPropertiesTest::::setDefaultAsLastShouldOverrideAll()", "108": "SignatureValidationPropertiesTest::::setDefaultAsLastShouldOverrideAll()", "109": "SignatureValidationPropertiesTest::::setDefaultAsLastShouldOverrideAll()", "110": "SignatureValidationPropertiesTest::::setDefaultAsLastShouldOverrideAll()", "111": "SignatureValidationPropertiesTest::::setDefaultAsLastShouldOverrideAll()", "112": "SignatureValidationPropertiesTest::::setDefaultAsLastShouldOverrideAll()", "113": "SignatureValidationPropertiesTest::::setDefaultAsLastShouldOverrideAll()", "114": "SignatureValidationPropertiesTest::::setDefaultAsLastShouldOverrideAll()", "115": "SignatureValidationPropertiesTest::::setDefaultAsLastShouldOverrideAll()", "116": "SignatureValidationPropertiesTest::::setDefaultAsLastShouldOverrideAll()", "117": "SignatureValidationPropertiesTest::::setDefaultAsLastShouldOverrideAll()", "119": "SignatureValidationPropertiesTest::::setAndGetFreshnessTest()", "120": "SignatureValidationPropertiesTest::::setAndGetFreshnessTest()", "121": "SignatureValidationPropertiesTest::::setAndGetFreshnessTest()", "122": "SignatureValidationPropertiesTest::::setAndGetFreshnessTest()", "123": "SignatureValidationPropertiesTest::::setAndGetFreshnessTest()", "124": "SignatureValidationPropertiesTest::::setAndGetFreshnessTest()", "125": "SignatureValidationPropertiesTest::::setAndGetFreshnessTest()", "126": "SignatureValidationPropertiesTest::::setAndGetFreshnessTest()", "127": "SignatureValidationPropertiesTest::::setAndGetFreshnessTest()", "128": "SignatureValidationPropertiesTest::::setAndGetFreshnessTest()", "129": "SignatureValidationPropertiesTest::::setAndGetFreshnessTest()", "130": "SignatureValidationPropertiesTest::::setAndGetFreshnessTest()", "131": "SignatureValidationPropertiesTest::::setAndGetFreshnessTest()", "132": "SignatureValidationPropertiesTest::::setAndGetFreshnessTest()", "133": "SignatureValidationPropertiesTest::::setAndGetFreshnessTest()", "134": "SignatureValidationPropertiesTest::::setAndGetFreshnessTest()", "136": "SignatureValidationPropertiesTest::::setAndGetContinueAfterFailure()", "137": "SignatureValidationPropertiesTest::::setAndGetContinueAfterFailure()", "138": "SignatureValidationPropertiesTest::::setAndGetContinueAfterFailure()", "139": "SignatureValidationPropertiesTest::::setAndGetContinueAfterFailure()", "140": "SignatureValidationPropertiesTest::::setAndGetContinueAfterFailure()", "141": "SignatureValidationPropertiesTest::::setAndGetContinueAfterFailure()", "142": "SignatureValidationPropertiesTest::::setAndGetContinueAfterFailure()", "143": "SignatureValidationPropertiesTest::::setAndGetContinueAfterFailure()", "144": "SignatureValidationPropertiesTest::::setAndGetContinueAfterFailure()", "145": "SignatureValidationPropertiesTest::::setAndGetContinueAfterFailure()", "146": "SignatureValidationPropertiesTest::::setAndGetContinueAfterFailure()", "147": "SignatureValidationPropertiesTest::::setAndGetContinueAfterFailure()", "148": "SignatureValidationPropertiesTest::::setAndGetContinueAfterFailure()", "149": "SignatureValidationPropertiesTest::::setAndGetContinueAfterFailure()", "150": "SignatureValidationPropertiesTest::::setAndGetContinueAfterFailure()", "152": "SignatureValidationPropertiesTest::::setRevocationOnlineFetchingTest()", "153": "SignatureValidationPropertiesTest::::setRevocationOnlineFetchingTest()", "154": "SignatureValidationPropertiesTest::::setRevocationOnlineFetchingTest()", "155": "SignatureValidationPropertiesTest::::setRevocationOnlineFetchingTest()", "156": "SignatureValidationPropertiesTest::::setRevocationOnlineFetchingTest()", "157": "SignatureValidationPropertiesTest::::setRevocationOnlineFetchingTest()", "158": "SignatureValidationPropertiesTest::::setRevocationOnlineFetchingTest()", "159": "SignatureValidationPropertiesTest::::setRevocationOnlineFetchingTest()", "160": "SignatureValidationPropertiesTest::::setRevocationOnlineFetchingTest()", "161": "SignatureValidationPropertiesTest::::setRevocationOnlineFetchingTest()", "162": "SignatureValidationPropertiesTest::::setRevocationOnlineFetchingTest()", "163": "SignatureValidationPropertiesTest::::setRevocationOnlineFetchingTest()", "164": "SignatureValidationPropertiesTest::::setRevocationOnlineFetchingTest()", "165": "SignatureValidationPropertiesTest::::setRevocationOnlineFetchingTest()", "166": "SignatureValidationPropertiesTest::::setRevocationOnlineFetchingTest()", "167": "SignatureValidationPropertiesTest::::setRevocationOnlineFetchingTest()", "169": "SignatureValidationPropertiesTest::::setRequiredExtensionsTest()", "170": "SignatureValidationPropertiesTest::::setRequiredExtensionsTest()", "171": "SignatureValidationPropertiesTest::::setRequiredExtensionsTest()", "172": "SignatureValidationPropertiesTest::::setRequiredExtensionsTest()", "173": "SignatureValidationPropertiesTest::::setRequiredExtensionsTest()", "174": "SignatureValidationPropertiesTest::::setRequiredExtensionsTest()", "175": "SignatureValidationPropertiesTest::::setRequiredExtensionsTest()", "176": "SignatureValidationPropertiesTest::::setRequiredExtensionsTest()", "177": "SignatureValidationPropertiesTest::::setRequiredExtensionsTest()", "178": "SignatureValidationPropertiesTest::::setRequiredExtensionsTest()", "179": "SignatureValidationPropertiesTest::::setRequiredExtensionsTest()", "180": "SignatureValidationPropertiesTest::::setRequiredExtensionsTest()", "181": "SignatureValidationPropertiesTest::::setRequiredExtensionsTest()", "182": "SignatureValidationPropertiesTest::::setRequiredExtensionsTest()", "183": "SignatureValidationPropertiesTest::::setRequiredExtensionsTest()", "184": "SignatureValidationPropertiesTest::::setRequiredExtensionsTest()", "185": "SignatureValidationPropertiesTest::::setRequiredExtensionsTest()", "186": "SignatureValidationPropertiesTest::::setRequiredExtensionsTest()", "187": "SignatureValidationPropertiesTest::::setRequiredExtensionsTest()", "188": "SignatureValidationPropertiesTest::::setRequiredExtensionsTest()", "199": "SignatureValidationPropertiesTest.IncrementalFreshnessValueSetter::::getAction()", "200": "SignatureValidationPropertiesTest.IncrementalFreshnessValueSetter::::getAction()", "201": "SignatureValidationPropertiesTest.IncrementalFreshnessValueSetter::::getAction()", "202": "SignatureValidationPropertiesTest.IncrementalFreshnessValueSetter::::getAction()", "203": "SignatureValidationPropertiesTest.IncrementalFreshnessValueSetter::::getAction()", "204": "SignatureValidationPropertiesTest.IncrementalFreshnessValueSetter::::getAction()"}, "tests": [{"test_lines": [48, 75], "covered_lines": [54, 55, 56, 57, 59, 64, 65, 66, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 122, 123, 124, 154, 155, 156, 185, 186, 187, 208, 210, 211, 212, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 250, 251, 252, 260, 264, 268, 272, 281, 283, 290, 291, 294, 298, 299, 306, 307, 314, 315]}, {"test_lines": [78, 94], "covered_lines": [54, 55, 56, 57, 59, 64, 65, 66, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 122, 123, 124, 154, 155, 156, 185, 186, 187, 208, 210, 211, 212, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 250, 251, 252, 260, 264, 268, 272, 281, 283, 290, 291, 294, 298, 299, 306, 307, 314, 315]}, {"test_lines": [96, 117], "covered_lines": [54, 55, 56, 57, 59, 64, 65, 66, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 122, 123, 124, 154, 155, 156, 185, 186, 187, 208, 210, 211, 212, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 250, 251, 252, 260, 264, 268, 272, 281, 283, 290, 291, 294, 298, 299, 306, 307, 314, 315]}, {"test_lines": [119, 134], "covered_lines": [54, 55, 56, 57, 59, 64, 65, 66, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 101, 102, 103, 122, 123, 124, 154, 155, 156, 185, 186, 187, 208, 210, 211, 212, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 250, 251, 252, 260, 264, 268, 272, 281, 283, 290, 291, 294, 298, 299, 306, 307, 314, 315]}, {"test_lines": [136, 150], "covered_lines": [54, 55, 56, 57, 59, 64, 65, 66, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 122, 123, 124, 135, 136, 137, 154, 155, 156, 185, 186, 187, 208, 210, 211, 212, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 250, 251, 252, 260, 264, 268, 272, 281, 283, 286, 290, 291, 298, 299, 306, 307, 314, 315]}, {"test_lines": [152, 167], "covered_lines": [54, 55, 56, 57, 59, 64, 65, 66, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 122, 123, 124, 154, 155, 156, 167, 168, 169, 185, 186, 187, 208, 210, 211, 212, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 250, 251, 252, 260, 264, 268, 272, 281, 283, 290, 291, 298, 299, 302, 306, 307, 314, 315]}, {"test_lines": [169, 188], "covered_lines": [54, 55, 56, 57, 59, 64, 65, 66, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 122, 123, 124, 154, 155, 156, 185, 186, 187, 198, 199, 200, 208, 210, 211, 212, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 250, 251, 252, 260, 264, 268, 272, 281, 283, 290, 291, 298, 299, 306, 307, 310, 314, 315]}]}, "/bernard/dataset_construction/prep/repos/itext-java/sign/src/main/java/com/itextpdf/signatures/validation/v1/OCSPValidator.java": {"class_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.signatures.validation.v1;\n", "\n", "import com.itextpdf.bouncycastleconnector.BouncyCastleFactoryCreator;\n", "import com.itextpdf.commons.bouncycastle.IBouncyCastleFactory;\n", "import com.itextpdf.commons.bouncycastle.asn1.IASN1Encodable;\n", "import com.itextpdf.commons.bouncycastle.cert.ocsp.IBasicOCSPResp;\n", "import com.itextpdf.commons.bouncycastle.cert.ocsp.ICertificateStatus;\n", "import com.itextpdf.commons.bouncycastle.cert.ocsp.IRevokedStatus;\n", "import com.itextpdf.commons.bouncycastle.cert.ocsp.ISingleResp;\n", "import com.itextpdf.commons.utils.DateTimeUtil;\n", "import com.itextpdf.commons.utils.MessageFormatUtil;\n", "import com.itextpdf.signatures.CertificateUtil;\n", "import com.itextpdf.signatures.IssuingCertificateRetriever;\n", "import com.itextpdf.signatures.TimestampConstants;\n", "import com.itextpdf.signatures.logs.SignLogMessageConstant;\n", "import com.itextpdf.signatures.validation.v1.context.CertificateSource;\n", "import com.itextpdf.signatures.validation.v1.context.ValidationContext;\n", "import com.itextpdf.signatures.validation.v1.context.ValidatorContext;\n", "import com.itextpdf.signatures.validation.v1.report.CertificateReportItem;\n", "import com.itextpdf.signatures.validation.v1.report.ReportItem;\n", "import com.itextpdf.signatures.validation.v1.report.ReportItem.ReportItemStatus;\n", "import com.itextpdf.signatures.validation.v1.report.ValidationReport;\n", "\n", "import java.security.cert.Certificate;\n", "import java.security.cert.X509Certificate;\n", "import java.time.Duration;\n", "import java.util.Date;\n", "\n", "import static com.itextpdf.signatures.validation.v1.RevocationDataValidator.SELF_SIGNED_CERTIFICATE;\n", "\n", "/**\n", " * Class that allows you to validate a single OCSP response.\n", " */\n", "public class OCSPValidator {\n", "    static final String CERT_IS_EXPIRED = \"Certificate is expired on {0}. Its revocation status could have been \" +\n", "            \"removed from the database, so the OCSP response status could be falsely valid.\";\n", "    static final String CERT_IS_REVOKED = \"Certificate status is revoked.\";\n", "    static final String CERT_STATUS_IS_UNKNOWN = \"Certificate status is unknown.\";\n", "    static final String INVALID_OCSP = \"OCSP response is invalid.\";\n", "    static final String ISSUERS_DO_NOT_MATCH = \"OCSP: Issuers don't match.\";\n", "    static final String FRESHNESS_CHECK = \"OCSP response is not fresh enough: \" +\n", "            \"this update: {0}, validation date: {1}, freshness: {2}.\";\n", "    static final String OCSP_COULD_NOT_BE_VERIFIED = \"OCSP response could not be verified: \" +\n", "            \"it does not contain responder in the certificate chain and response is not signed \" +\n", "            \"by issuer certificate or any from the trusted store.\";\n", "    static final String OCSP_IS_NO_LONGER_VALID = \"OCSP is no longer valid: {0} after {1}\";\n", "    static final String SERIAL_NUMBERS_DO_NOT_MATCH = \"OCSP: Serial numbers don't match.\";\n", "    static final String UNABLE_TO_CHECK_IF_ISSUERS_MATCH = \"OCSP response could not be verified: unable to check\" +\n", "            \" if issuers match.\";\n", "\n", "    static final String OCSP_CHECK = \"OCSP response check.\";\n", "\n", "    private static final IBouncyCastleFactory BOUNCY_CASTLE_FACTORY = BouncyCastleFactoryCreator.getFactory();\n", "\n", "    private final IssuingCertificateRetriever certificateRetriever;\n", "    private final SignatureValidationProperties properties;\n", "    private final ValidatorChainBuilder builder;\n", "\n", "    /**\n", "     * Creates new {@link OCSPValidator} instance.\n", "\n", "     * @param builder See {@link  ValidatorChainBuilder}\n", "     */\n", "    protected OCSPValidator(ValidatorChainBuilder builder) {\n", "        this.certificateRetriever = builder.getCertificateRetriever();\n", "        this.properties = builder.getProperties();\n", "        this.builder = builder;\n", "    }\n", "\n", "    /**\n", "     * Validates a certificate against single OCSP Response.\n", "     *\n", "     * @param report         to store all the chain verification results\n", "     * @param context        the context in which to perform the validation\n", "     * @param certificate    the certificate to check for\n", "     * @param singleResp     single response to check\n", "     * @param ocspResp       basic OCSP response which contains single response to check\n", "     * @param validationDate validation date to check for\n", "     */\n", "    public void validate(ValidationReport report, ValidationContext context, X509Certificate certificate,\n", "            ISingleResp singleResp, IBasicOCSPResp ocspResp, Date validationDate) {\n", "        ValidationContext localContext = context.setValidatorContext(ValidatorContext.OCSP_VALIDATOR);\n", "        if (CertificateUtil.isSelfSigned(certificate)) {\n", "            report.addReportItem(new CertificateReportItem(certificate, OCSP_CHECK, SELF_SIGNED_CERTIFICATE,\n", "                    ReportItemStatus.INFO));\n", "            return;\n", "        }\n", "        // SingleResp contains the basic information of the status of the certificate identified by the certID.\n", "        // Check if the serial numbers of the signCert and certID corresponds:\n", "        if (!certificate.getSerialNumber().equals(singleResp.getCertID().getSerialNumber())) {\n", "            report.addReportItem(new CertificateReportItem(certificate, OCSP_CHECK, SERIAL_NUMBERS_DO_NOT_MATCH,\n", "                    ReportItemStatus.INDETERMINATE));\n", "            return;\n", "        }\n", "        Certificate issuerCert = certificateRetriever.retrieveIssuerCertificate(certificate);\n", "        // Check if the issuer of the certID and signCert matches, i.e. check that issuerNameHash and issuerKeyHash\n", "        // fields of the certID is the hash of the issuer's name and public key:\n", "        try {\n", "            if (!CertificateUtil.checkIfIssuersMatch(singleResp.getCertID(), (X509Certificate) issuerCert)) {\n", "                report.addReportItem(new CertificateReportItem(certificate, OCSP_CHECK, ISSUERS_DO_NOT_MATCH,\n", "                        ReportItemStatus.INDETERMINATE));\n", "                return;\n", "            }\n", "        } catch (Exception e) {\n", "            report.addReportItem(new CertificateReportItem(certificate, OCSP_CHECK, UNABLE_TO_CHECK_IF_ISSUERS_MATCH, e,\n", "                    ReportItemStatus.INDETERMINATE));\n", "            return;\n", "        }\n", "        // So, since the issuer name and serial number identify a unique certificate, we found the single response\n", "        // for the provided certificate.\n", "\n", "        // Check that thisUpdate >= (validationDate - freshness).\n", "        Duration freshness = properties.getFreshness(localContext);\n", "        if (singleResp.getThisUpdate().before(\n", "                DateTimeUtil.addMillisToDate(validationDate, -(long)freshness.toMillis()))) {\n", "            report.addReportItem(new CertificateReportItem(certificate, OCSP_CHECK,\n", "                    MessageFormatUtil.format(FRESHNESS_CHECK, singleResp.getThisUpdate(), validationDate,\n", "                            freshness), ReportItemStatus.INDETERMINATE));\n", "            return;\n", "        }\n", "\n", "        // If nextUpdate is not set, the responder is indicating that newer revocation information\n", "        // is available all the time.\n", "        if (singleResp.getNextUpdate() != TimestampConstants.UNDEFINED_TIMESTAMP_DATE &&\n", "                validationDate.after(singleResp.getNextUpdate())) {\n", "            report.addReportItem(new CertificateReportItem(certificate, OCSP_CHECK,\n", "                    MessageFormatUtil.format(OCSP_IS_NO_LONGER_VALID, validationDate,\n", "                            singleResp.getNextUpdate()), ReportItemStatus.INDETERMINATE));\n", "            return;\n", "        }\n", "\n", "        // Check the status of the certificate:\n", "        ICertificateStatus status = singleResp.getCertStatus();\n", "        IRevokedStatus revokedStatus = BOUNCY_CASTLE_FACTORY.createRevokedStatus(status);\n", "        boolean isStatusGood = BOUNCY_CASTLE_FACTORY.createCertificateStatus().getGood().equals(status);\n", "\n", "        // Check OCSP Archive Cutoff extension in case OCSP response was generated after the certificate is expired.\n", "        if (isStatusGood && certificate.getNotAfter().before(ocspResp.getProducedAt())) {\n", "            Date startExpirationDate = getArchiveCutoffExtension(ocspResp);\n", "            if (TimestampConstants.UNDEFINED_TIMESTAMP_DATE == startExpirationDate ||\n", "                    certificate.getNotAfter().before(startExpirationDate)) {\n", "                report.addReportItem(new CertificateReportItem(certificate, OCSP_CHECK, MessageFormatUtil.format(\n", "                        CERT_IS_EXPIRED, certificate.getNotAfter()), ReportItemStatus.INDETERMINATE));\n", "                return;\n", "            }\n", "        }\n", "\n", "        if (isStatusGood || (revokedStatus != null && validationDate.before(revokedStatus.getRevocationTime()))) {\n", "            // Check if the OCSP response is genuine.\n", "            verifyOcspResponder(report, localContext, ocspResp, (X509Certificate) issuerCert);\n", "            if (!isStatusGood) {\n", "                report.addReportItem(new CertificateReportItem(certificate, OCSP_CHECK,\n", "                        MessageFormatUtil.format(SignLogMessageConstant.VALID_CERTIFICATE_IS_REVOKED,\n", "                                revokedStatus.getRevocationTime()), ReportItemStatus.INFO));\n", "            }\n", "        } else if (revokedStatus != null) {\n", "            report.addReportItem(new CertificateReportItem(certificate, OCSP_CHECK, CERT_IS_REVOKED,\n", "                    ReportItemStatus.INVALID));\n", "        } else {\n", "            report.addReportItem(new CertificateReportItem(certificate, OCSP_CHECK, CERT_STATUS_IS_UNKNOWN,\n", "                    ReportItemStatus.INDETERMINATE));\n", "        }\n", "    }\n", "\n", "    /**\n", "     * Verifies if an OCSP response is genuine.\n", "     * If it doesn't verify against the issuer certificate and response's certificates, it may verify\n", "     * using a trusted anchor or cert.\n", "     *\n", "     * @param report     to store all the chain verification results\n", "     * @param context    the context in which to perform the validation\n", "     * @param ocspResp   {@link IBasicOCSPResp} the OCSP response wrapper\n", "     * @param issuerCert the issuer of the certificate for which the OCSP is checked\n", "     */\n", "    private void verifyOcspResponder(ValidationReport report, ValidationContext context, IBasicOCSPResp ocspResp,\n", "            X509Certificate issuerCert) {\n", "        ValidationContext localContext = context.setCertificateSource(CertificateSource.OCSP_ISSUER);\n", "        ValidationReport responderReport = new ValidationReport();\n", "\n", "        // OCSP response might be signed by the issuer certificate or\n", "        // the Authorized OCSP responder certificate containing the id-kp-OCSPSigning extended key usage extension.\n", "        X509Certificate responderCert = null;\n", "\n", "        // First check if the issuer certificate signed the response since it is expected to be the most common case:\n", "        if (CertificateUtil.isSignatureValid(ocspResp, issuerCert)) {\n", "            responderCert = issuerCert;\n", "        }\n", "\n", "        // If the issuer certificate didn't sign the ocsp response, look for authorized ocsp responses\n", "        // from the properties or from the certificate chain received with response.\n", "        if (responderCert == null) {\n", "            responderCert = (X509Certificate) certificateRetriever.retrieveOCSPResponderCertificate(ocspResp);\n", "            if (responderCert == null) {\n", "                report.addReportItem(new CertificateReportItem(issuerCert, OCSP_CHECK, OCSP_COULD_NOT_BE_VERIFIED,\n", "                        ReportItemStatus.INDETERMINATE));\n", "                return;\n", "            }\n", "            if (!certificateRetriever.isCertificateTrusted(responderCert) &&\n", "                    !certificateRetriever.getTrustedCertificatesStore().isCertificateTrustedForOcsp(responderCert)) {\n", "                // RFC 6960 4.2.2.2. Authorized Responders:\n", "                // \"Systems relying on OCSP responses MUST recognize a delegation certificate as being issued\n", "                // by the CA that issued the certificate in question only if the delegation certificate and the\n", "                // certificate being checked for revocation were signed by the same key.\"\n", "                // and \"This certificate MUST be issued directly by the CA that is identified in the request\".\n", "                try {\n", "                    responderCert.verify(issuerCert.getPublicKey());\n", "                } catch (Exception e) {\n", "                    report.addReportItem(new CertificateReportItem(responderCert, OCSP_CHECK, INVALID_OCSP, e,\n", "                            ReportItemStatus.INVALID));\n", "                    return;\n", "                }\n", "\n", "                // Validating of the ocsp signer's certificate (responderCert) described in the\n", "                // RFC6960 4.2.2.2.1. Revocation Checking of an Authorized Responder.\n", "                builder.getCertificateChainValidator().validate(responderReport,\n", "                        localContext,\n", "                        responderCert, ocspResp.getProducedAt());\n", "                addResponderValidationReport(report, responderReport);\n", "                return;\n", "            }\n", "        }\n", "        builder.getCertificateChainValidator().validate(responderReport,\n", "                localContext.setCertificateSource(CertificateSource.TRUSTED),\n", "                responderCert, ocspResp.getProducedAt());\n", "        addResponderValidationReport(report, responderReport);\n", "    }\n", "\n", "    private void addResponderValidationReport(ValidationReport report, ValidationReport responderReport) {\n", "        for (ReportItem reportItem : responderReport.getLogs()) {\n", "            report.addReportItem(ReportItemStatus.INVALID == reportItem.getStatus() ?\n", "                    reportItem.setStatus(ReportItemStatus.INDETERMINATE) : reportItem);\n", "        }\n", "    }\n", "\n", "    private Date getArchiveCutoffExtension(IBasicOCSPResp ocspResp) {\n", "        // OCSP containing this extension specifies the reliable revocation status of the certificate\n", "        // that expired after the date specified in the Archive Cutoff extension or at that date.\n", "        IASN1Encodable archiveCutoff = ocspResp.getExtensionParsedValue(\n", "                BOUNCY_CASTLE_FACTORY.createOCSPObjectIdentifiers().getIdPkixOcspArchiveCutoff());\n", "        if (!archiveCutoff.isNull()) {\n", "            try {\n", "                return BOUNCY_CASTLE_FACTORY.createASN1GeneralizedTime(archiveCutoff).getDate();\n", "            } catch (Exception e) {\n", "                // Ignore exception.\n", "            }\n", "        }\n", "        return (Date) TimestampConstants.UNDEFINED_TIMESTAMP_DATE;\n", "    }\n", "}\n"], "test_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.signatures.validation.v1;\n", "\n", "import com.itextpdf.bouncycastleconnector.BouncyCastleFactoryCreator;\n", "import com.itextpdf.commons.bouncycastle.IBouncyCastleFactory;\n", "import com.itextpdf.commons.bouncycastle.cert.IX509CertificateHolder;\n", "import com.itextpdf.commons.bouncycastle.cert.ocsp.IBasicOCSPResp;\n", "import com.itextpdf.commons.bouncycastle.operator.AbstractOperatorCreationException;\n", "import com.itextpdf.commons.bouncycastle.pkcs.AbstractPKCSException;\n", "import com.itextpdf.commons.utils.DateTimeUtil;\n", "import com.itextpdf.signatures.IssuingCertificateRetriever;\n", "import com.itextpdf.signatures.TimestampConstants;\n", "import com.itextpdf.signatures.logs.SignLogMessageConstant;\n", "import com.itextpdf.signatures.testutils.PemFileHelper;\n", "import com.itextpdf.signatures.testutils.TimeTestUtil;\n", "import com.itextpdf.signatures.testutils.builder.TestOcspResponseBuilder;\n", "import com.itextpdf.signatures.testutils.client.TestOcspClient;\n", "import com.itextpdf.signatures.validation.v1.context.CertificateSource;\n", "import com.itextpdf.signatures.validation.v1.context.CertificateSources;\n", "import com.itextpdf.signatures.validation.v1.context.TimeBasedContext;\n", "import com.itextpdf.signatures.validation.v1.context.TimeBasedContexts;\n", "import com.itextpdf.signatures.validation.v1.context.ValidationContext;\n", "import com.itextpdf.signatures.validation.v1.context.ValidatorContext;\n", "import com.itextpdf.signatures.validation.v1.context.ValidatorContexts;\n", "import com.itextpdf.signatures.validation.v1.mocks.MockChainValidator;\n", "import com.itextpdf.signatures.validation.v1.report.ReportItem;\n", "import com.itextpdf.signatures.validation.v1.report.ValidationReport;\n", "import com.itextpdf.test.ExtendedITextTest;\n", "import com.itextpdf.test.annotations.type.BouncyCastleUnitTest;\n", "import org.junit.Assert;\n", "import org.junit.Before;\n", "import org.junit.BeforeClass;\n", "import org.junit.Test;\n", "import org.junit.experimental.categories.Category;\n", "\n", "import java.io.IOException;\n", "import java.security.GeneralSecurityException;\n", "import java.security.PrivateKey;\n", "import java.security.Security;\n", "import java.security.cert.Certificate;\n", "import java.security.cert.CertificateEncodingException;\n", "import java.security.cert.CertificateException;\n", "import java.security.cert.X509Certificate;\n", "import java.time.Duration;\n", "import java.util.Collections;\n", "import java.util.Date;\n", "\n", "@Category(BouncyCastleUnitTest.class)\n", "public class OCSPValidatorTest extends ExtendedITextTest {\n", "    private static final String SOURCE_FOLDER = \"./src/test/resources/com/itextpdf/signatures/validation/v1/OCSPValidatorTest/\";\n", "    private static final IBouncyCastleFactory FACTORY = BouncyCastleFactoryCreator.getFactory();\n", "    private static final char[] PASSWORD = \"testpassphrase\".toCharArray();\n", "\n", "    private static X509Certificate caCert;\n", "    private static PrivateKey caPrivateKey;\n", "    private static X509Certificate checkCert;\n", "    private static X509Certificate responderCert;\n", "    private static PrivateKey ocspRespPrivateKey;\n", "    private final ValidationContext baseContext = new ValidationContext(ValidatorContext.REVOCATION_DATA_VALIDATOR,\n", "            CertificateSource.SIGNER_CERT, TimeBasedContext.PRESENT);\n", "    private IssuingCertificateRetriever certificateRetriever;\n", "    private SignatureValidationProperties parameters;\n", "    private ValidatorChainBuilder validatorChainBuilder;\n", "    private MockChainValidator mockCertificateChainValidator;\n", "\n", "    @BeforeClass\n", "    public static void before()\n", "            throws CertificateException, IOException, AbstractOperatorCreationException, AbstractPKCSException {\n", "        Security.addProvider(FACTORY.getProvider());\n", "\n", "        String rootCertFileName = SOURCE_FOLDER + \"rootCert.pem\";\n", "        String checkCertFileName = SOURCE_FOLDER + \"signCert.pem\";\n", "        String ocspResponderCertFileName = SOURCE_FOLDER + \"ocspResponderCert.pem\";\n", "\n", "        caCert = (X509Certificate) PemFileHelper.readFirstChain(rootCertFileName)[0];\n", "        caPrivateKey = PemFileHelper.readFirstKey(rootCertFileName, PASSWORD);\n", "        checkCert = (X509Certificate) PemFileHelper.readFirstChain(checkCertFileName)[0];\n", "        responderCert = (X509Certificate) PemFileHelper.readFirstChain(ocspResponderCertFileName)[0];\n", "        ocspRespPrivateKey = PemFileHelper.readFirstKey(ocspResponderCertFileName, PASSWORD);\n", "    }\n", "\n", "    @Before\n", "    public void setUp() {\n", "        certificateRetriever = new IssuingCertificateRetriever();\n", "        parameters = new SignatureValidationProperties();\n", "        mockCertificateChainValidator = new MockChainValidator();\n", "        validatorChainBuilder = new ValidatorChainBuilder()\n", "                .withSignatureValidationProperties(parameters)\n", "                .withIssuingCertificateRetriever(certificateRetriever)\n", "                .withCertificateChainValidator(mockCertificateChainValidator);\n", "    }\n", "\n", "    @Test\n", "    public void happyPathTest() throws GeneralSecurityException, IOException {\n", "        Date checkDate = TimeTestUtil.TEST_DATE_TIME;\n", "        ValidationReport report = validateTest(checkDate);\n", "\n", "        AssertValidationReport.assertThat(report, a -> a\n", "                .hasStatus(ValidationReport.ValidationResult.VALID));\n", "    }\n", "\n", "    @Test\n", "    public void ocpsIssuerChainValidationsUsesCorrectParametersTest() throws CertificateException, IOException {\n", "        Date checkDate = TimeTestUtil.TEST_DATE_TIME;\n", "        validateTest(checkDate);\n", "\n", "        Assert.assertEquals(1, mockCertificateChainValidator.verificationCalls.size());\n", "        Assert.assertEquals(responderCert, mockCertificateChainValidator.verificationCalls.get(0).certificate);\n", "        Assert.assertEquals(ValidatorContext.OCSP_VALIDATOR, mockCertificateChainValidator.verificationCalls.get(0).context.getValidatorContext());\n", "        Assert.assertEquals(CertificateSource.OCSP_ISSUER, mockCertificateChainValidator.verificationCalls.get(0).context.getCertificateSource());\n", "        Assert.assertEquals(checkDate, mockCertificateChainValidator.verificationCalls.get(0).checkDate);\n", "        Assert.assertEquals(DateTimeUtil.addDaysToDate(checkDate, 0), mockCertificateChainValidator.verificationCalls.get(0).checkDate);\n", "    }\n", "\n", "    @Test\n", "    public void ocspForSelfSignedCertShouldNotValdateFurtherTest() throws GeneralSecurityException, IOException {\n", "        TestOcspResponseBuilder builder = new TestOcspResponseBuilder(responderCert, ocspRespPrivateKey);\n", "        TestOcspClient ocspClient = new TestOcspClient().addBuilderForCertIssuer(caCert, builder);\n", "        IBasicOCSPResp caBasicOCSPResp = FACTORY.createBasicOCSPResp(FACTORY.createBasicOCSPResponse(\n", "                FACTORY.createASN1Primitive(ocspClient.getEncoded(caCert, caCert, null))));\n", "\n", "        ValidationReport report = new ValidationReport();\n", "        certificateRetriever.addTrustedCertificates(Collections.singletonList(caCert));\n", "\n", "        OCSPValidator validator = validatorChainBuilder.buildOCSPValidator();\n", "        validator.validate(report, baseContext, caCert, caBasicOCSPResp.getResponses()[0], caBasicOCSPResp,\n", "                TimeTestUtil.TEST_DATE_TIME);\n", "        AssertValidationReport.assertThat(report, a -> a\n", "                .hasStatus(ValidationReport.ValidationResult.VALID)\n", "                .hasNumberOfLogs(1)\n", "                .hasLogItem(al -> al\n", "                        .withCheckName(OCSPValidator.OCSP_CHECK)\n", "                        .withMessage(RevocationDataValidator.SELF_SIGNED_CERTIFICATE)\n", "                        .withCertificate(caCert))\n", "        );\n", "        Assert.assertEquals(0, mockCertificateChainValidator.verificationCalls.size());\n", "    }\n", "\n", "    @Test\n", "    public void validationDateAfterNextUpdateTest() throws GeneralSecurityException, IOException {\n", "        // Same next update is set in the test OCSP builder.\n", "        Date nextUpdate = DateTimeUtil.addDaysToDate(TimeTestUtil.TEST_DATE_TIME, 30);\n", "        Date checkDate = DateTimeUtil.addDaysToDate(TimeTestUtil.TEST_DATE_TIME, 45);\n", "        ValidationReport report = validateTest(checkDate, TimeTestUtil.TEST_DATE_TIME, 50);\n", "\n", "        AssertValidationReport.assertThat(report, a -> a\n", "                .hasStatus(ValidationReport.ValidationResult.INDETERMINATE)\n", "                .hasLogItem(al -> al\n", "                        .withCheckName(OCSPValidator.OCSP_CHECK)\n", "                        .withMessage(OCSPValidator.OCSP_IS_NO_LONGER_VALID, l -> checkDate, l -> nextUpdate)));\n", "    }\n", "\n", "\n", "    @Test\n", "    public void serialNumbersDoNotMatchTest() throws GeneralSecurityException, IOException {\n", "        Date checkDate = TimeTestUtil.TEST_DATE_TIME;\n", "\n", "        TestOcspResponseBuilder builder = new TestOcspResponseBuilder(responderCert, ocspRespPrivateKey);\n", "        builder.setThisUpdate(DateTimeUtil.getCalendar(DateTimeUtil.addDaysToDate(checkDate, 1)));\n", "        TestOcspClient ocspClient = new TestOcspClient().addBuilderForCertIssuer(caCert, builder);\n", "        IBasicOCSPResp caBasicOCSPResp = FACTORY.createBasicOCSPResp(FACTORY.createBasicOCSPResponse(\n", "                FACTORY.createASN1Primitive(ocspClient.getEncoded(caCert, caCert, null))));\n", "\n", "        ValidationReport report = new ValidationReport();\n", "        certificateRetriever.setTrustedCertificates(Collections.singletonList(caCert));\n", "\n", "        OCSPValidator validator = validatorChainBuilder.buildOCSPValidator();\n", "\n", "        validator.validate(report, baseContext, checkCert, caBasicOCSPResp.getResponses()[0], caBasicOCSPResp,\n", "                checkDate);\n", "\n", "        AssertValidationReport.assertThat(report, a -> a\n", "                .hasNumberOfLogs(1)\n", "                .hasStatus(ValidationReport.ValidationResult.INDETERMINATE)\n", "                .hasLogItem(al -> al\n", "                        .withCheckName(OCSPValidator.OCSP_CHECK)\n", "                        .withMessage(OCSPValidator.SERIAL_NUMBERS_DO_NOT_MATCH)\n", "                        .withCertificate(checkCert))\n", "        );\n", "        Assert.assertEquals(0, mockCertificateChainValidator.verificationCalls.size());\n", "    }\n", "\n", "\n", "    @Test\n", "    public void issuersDoNotMatchTest() throws GeneralSecurityException, IOException {\n", "        String wrongRootCertFileName = SOURCE_FOLDER + \"rootCertForOcspTest.pem\";\n", "\n", "        TestOcspResponseBuilder builder = new TestOcspResponseBuilder(responderCert, ocspRespPrivateKey);\n", "        TestOcspClient ocspClient = new TestOcspClient().addBuilderForCertIssuer(caCert, builder);\n", "        IBasicOCSPResp basicOCSPResp = FACTORY.createBasicOCSPResp(FACTORY.createBasicOCSPResponse(\n", "                FACTORY.createASN1Primitive(ocspClient.getEncoded(checkCert, caCert, null))));\n", "\n", "        ValidationReport report = new ValidationReport();\n", "        validatorChainBuilder.withIssuingCertificateRetriever(\n", "                new TestIssuingCertificateRetriever(wrongRootCertFileName));\n", "        OCSPValidator validator = validatorChainBuilder.buildOCSPValidator();\n", "\n", "        validator.validate(report, baseContext, checkCert, basicOCSPResp.getResponses()[0], basicOCSPResp,\n", "                TimeTestUtil.TEST_DATE_TIME);\n", "\n", "        AssertValidationReport.assertThat(report, a -> a\n", "                .hasNumberOfFailures(1)\n", "                .hasNumberOfLogs(1)\n", "                .hasLogItem(la -> la\n", "                        .withCheckName(OCSPValidator.OCSP_CHECK)\n", "                        .withMessage(OCSPValidator.ISSUERS_DO_NOT_MATCH)\n", "                        .withStatus(ReportItem.ReportItemStatus.INDETERMINATE)\n", "                ));\n", "    }\n", "\n", "    @Test\n", "    public void positiveFreshnessNegativeTest() throws GeneralSecurityException, IOException {\n", "        Date checkDate = TimeTestUtil.TEST_DATE_TIME;\n", "        Date thisUpdate = DateTimeUtil.addDaysToDate(checkDate, -3);\n", "        ValidationReport report = validateTest(checkDate, thisUpdate, 2);\n", "        AssertValidationReport.assertThat(report, a -> a\n", "                .hasStatus(ValidationReport.ValidationResult.INDETERMINATE)\n", "                .hasNumberOfFailures(1)\n", "                .hasLogItem(al -> al\n", "                        .withCheckName(OCSPValidator.OCSP_CHECK)\n", "                        .withMessage(OCSPValidator.FRESHNESS_CHECK,\n", "                                l -> thisUpdate, l -> checkDate, l -> Duration.ofDays(2))\n", "                )\n", "        );\n", "    }\n", "\n", "    @Test\n", "    public void nextUpdateNotSetResultsInValidStatusTest() throws CertificateEncodingException, IOException {\n", "        Date checkDate = TimeTestUtil.TEST_DATE_TIME;\n", "\n", "        TestOcspResponseBuilder builder = new TestOcspResponseBuilder(caCert, caPrivateKey);\n", "        builder.setThisUpdate(DateTimeUtil.getCalendar(DateTimeUtil.addDaysToDate(checkDate, -20)));\n", "        builder.setNextUpdate(DateTimeUtil.getCalendar((Date) TimestampConstants.UNDEFINED_TIMESTAMP_DATE));\n", "        builder.setProducedAt(DateTimeUtil.addDaysToDate(TimeTestUtil.TEST_DATE_TIME, -20));\n", "        TestOcspClient client = new TestOcspClient().addBuilderForCertIssuer(caCert, builder);\n", "        IBasicOCSPResp basicOCSPResp = FACTORY.createBasicOCSPResp(FACTORY.createBasicOCSPResponse(\n", "                FACTORY.createASN1Primitive(client.getEncoded(checkCert, caCert, \"\"))));\n", "\n", "        certificateRetriever.addKnownCertificates(Collections.singleton(caCert));\n", "        ValidationReport report = new ValidationReport();\n", "        OCSPValidator validator = validatorChainBuilder.buildOCSPValidator();\n", "\n", "        validator.validate(report, baseContext, checkCert, basicOCSPResp.getResponses()[0], basicOCSPResp, checkDate);\n", "\n", "        AssertValidationReport.assertThat(report, a -> a\n", "                .hasStatus(ValidationReport.ValidationResult.VALID));\n", "    }\n", "\n", "    @Test\n", "    public void certificateWasRevokedBeforeCheckDateShouldFailTest() throws GeneralSecurityException, IOException {\n", "        Date checkDate = TimeTestUtil.TEST_DATE_TIME;\n", "        Date revocationDate = DateTimeUtil.addDaysToDate(TimeTestUtil.TEST_DATE_TIME, -1);\n", "\n", "        ValidationReport report = validateRevokedTestMocked(checkDate, revocationDate);\n", "\n", "        AssertValidationReport.assertThat(report, a -> a\n", "                .hasStatus(ValidationReport.ValidationResult.INVALID)\n", "                .hasLogItem(al -> al\n", "                        .withCheckName(OCSPValidator.OCSP_CHECK)\n", "                        .withMessage(OCSPValidator.CERT_IS_REVOKED)\n", "                        .withCertificate(checkCert)));\n", "    }\n", "\n", "    @Test\n", "    public void certificateWasRevokedAfterCheckDateShouldSucceedTest() throws GeneralSecurityException, IOException {\n", "        Date checkDate = TimeTestUtil.TEST_DATE_TIME;\n", "        Date revocationDate = DateTimeUtil.addDaysToDate(TimeTestUtil.TEST_DATE_TIME, 10);\n", "\n", "        ValidationReport report = validateRevokedTestMocked(checkDate, revocationDate);\n", "        AssertValidationReport.assertThat(report, a -> a\n", "                .hasLogItem(la -> la\n", "                        .withCheckName(OCSPValidator.OCSP_CHECK)\n", "                        .withMessage(SignLogMessageConstant.VALID_CERTIFICATE_IS_REVOKED,\n", "                                l -> revocationDate)\n", "                )\n", "                .hasStatus(ValidationReport.ValidationResult.VALID));\n", "    }\n", "\n", "    @Test\n", "    public void certificateStatusIsUnknownTest() throws GeneralSecurityException, IOException {\n", "        Date checkDate = TimeTestUtil.TEST_DATE_TIME;\n", "\n", "        TestOcspResponseBuilder builder = new TestOcspResponseBuilder(responderCert, ocspRespPrivateKey);\n", "        builder.setCertificateStatus(FACTORY.createUnknownStatus());\n", "        TestOcspClient ocspClient = new TestOcspClient().addBuilderForCertIssuer(caCert, builder);\n", "        IBasicOCSPResp basicOCSPResp = FACTORY.createBasicOCSPResp(FACTORY.createBasicOCSPResponse(\n", "                FACTORY.createASN1Primitive(ocspClient.getEncoded(checkCert, caCert, null))));\n", "\n", "        ValidationReport report = new ValidationReport();\n", "        certificateRetriever.addTrustedCertificates(Collections.singletonList(caCert));\n", "\n", "        OCSPValidator validator = validatorChainBuilder.buildOCSPValidator();\n", "        validator.validate(report, baseContext, checkCert, basicOCSPResp.getResponses()[0], basicOCSPResp, checkDate);\n", "        AssertValidationReport.assertThat(report, a -> a\n", "                .hasStatus(ValidationReport.ValidationResult.INDETERMINATE)\n", "                .hasLogItem(al -> al\n", "                        .withCheckName(OCSPValidator.OCSP_CHECK)\n", "                        .withMessage(OCSPValidator.CERT_STATUS_IS_UNKNOWN)\n", "                        .withCertificate(checkCert)));\n", "\n", "        Assert.assertEquals(0, mockCertificateChainValidator.verificationCalls.size());\n", "    }\n", "\n", "    @Test\n", "    public void ocspIssuerCertificateDoesNotVerifyWithCaPKTest()\n", "            throws CertificateException, IOException, AbstractOperatorCreationException, AbstractPKCSException {\n", "        String ocspResponderCertFileName = SOURCE_FOLDER + \"ocspResponderCertForOcspTest.pem\";\n", "        X509Certificate responderCert = (X509Certificate) PemFileHelper.readFirstChain(ocspResponderCertFileName)[0];\n", "        PrivateKey ocspRespPrivateKey = PemFileHelper.readFirstKey(ocspResponderCertFileName, PASSWORD);\n", "        TestOcspResponseBuilder builder = new TestOcspResponseBuilder(responderCert, ocspRespPrivateKey);\n", "\n", "        TestOcspClient ocspClient = new TestOcspClient().addBuilderForCertIssuer(caCert, builder);\n", "        IBasicOCSPResp basicOCSPResp = FACTORY.createBasicOCSPResp(FACTORY.createBasicOCSPResponse(\n", "                FACTORY.createASN1Primitive(ocspClient.getEncoded(checkCert, caCert, null))));\n", "\n", "        ValidationReport report = new ValidationReport();\n", "        certificateRetriever.addTrustedCertificates(Collections.singletonList(caCert));\n", "\n", "        OCSPValidator validator = validatorChainBuilder.buildOCSPValidator();\n", "        validator.validate(report, baseContext, checkCert, basicOCSPResp.getResponses()[0], basicOCSPResp,\n", "                TimeTestUtil.TEST_DATE_TIME);\n", "        AssertValidationReport.assertThat(report, a -> a\n", "                .hasNumberOfFailures(1)\n", "                .hasStatus(ValidationReport.ValidationResult.INVALID)\n", "                .hasLogItem(al ->\n", "                        al.withCheckName(OCSPValidator.OCSP_CHECK)\n", "                                .withMessage(OCSPValidator.INVALID_OCSP)\n", "                                // This should be the checked certificate, not the ocsp responder\n", "                                //.withCertificate(checkCert)\n", "                                .withCertificate(responderCert)\n", "                )\n", "        );\n", "    }\n", "\n", "    @Test\n", "    public void noResponderFoundInCertsTest() throws GeneralSecurityException, IOException {\n", "        TestOcspResponseBuilder builder = new TestOcspResponseBuilder(responderCert, ocspRespPrivateKey);\n", "        builder.setOcspCertsChain(new IX509CertificateHolder[]{FACTORY.createJcaX509CertificateHolder(caCert)});\n", "        TestOcspClient ocspClient = new TestOcspClient().addBuilderForCertIssuer(caCert, builder);\n", "        IBasicOCSPResp basicOCSPResp = FACTORY.createBasicOCSPResp(FACTORY.createBasicOCSPResponse(\n", "                FACTORY.createASN1Primitive(ocspClient.getEncoded(checkCert, caCert, null))));\n", "\n", "        ValidationReport report = new ValidationReport();\n", "        certificateRetriever.addTrustedCertificates(Collections.singletonList(caCert));\n", "\n", "        OCSPValidator validator = validatorChainBuilder.buildOCSPValidator();\n", "        validator.validate(report, baseContext, checkCert, basicOCSPResp.getResponses()[0], basicOCSPResp,\n", "                TimeTestUtil.TEST_DATE_TIME);\n", "\n", "        AssertValidationReport.assertThat(report, a -> a\n", "                .hasLogItem(la -> la\n", "                        .withCheckName(OCSPValidator.OCSP_CHECK)\n", "                        .withMessage(OCSPValidator.OCSP_COULD_NOT_BE_VERIFIED)\n", "                )\n", "                .hasStatus(ValidationReport.ValidationResult.INDETERMINATE));\n", "    }\n", "\n", "    @Test\n", "    public void chainValidatorReportWrappingTest() throws CertificateException, IOException {\n", "        Date checkDate = TimeTestUtil.TEST_DATE_TIME;\n", "\n", "        mockCertificateChainValidator.onCallDo(c -> {\n", "                    c.report.addReportItem(\n", "                            new ReportItem(\"test1\", \"test1\", ReportItem.ReportItemStatus.INFO));\n", "                    c.report.addReportItem(\n", "                            new ReportItem(\"test2\", \"test2\", ReportItem.ReportItemStatus.INDETERMINATE));\n", "                    c.report.addReportItem(\n", "                            new ReportItem(\"test3\", \"test3\", ReportItem.ReportItemStatus.INVALID));\n", "                }\n", "        );\n", "        ValidationReport report = validateTest(checkDate);\n", "\n", "        AssertValidationReport.assertThat(report, a -> a\n", "                .hasStatus(ValidationReport.ValidationResult.INDETERMINATE)\n", "                .hasLogItems(0, 0, la -> la.withStatus(ReportItem.ReportItemStatus.INVALID))\n", "                .hasLogItems(2, 2, la -> la.withStatus(ReportItem.ReportItemStatus.INDETERMINATE))\n", "                .hasLogItem(la -> la.withStatus(ReportItem.ReportItemStatus.INFO)));\n", "    }\n", "\n", "    @Test\n", "    public void noArchiveCutoffExtensionTest() throws Exception {\n", "        Date producedAt = DateTimeUtil.addDaysToDate(checkCert.getNotAfter(), 5);\n", "        TestOcspResponseBuilder builder = new TestOcspResponseBuilder(responderCert, ocspRespPrivateKey);\n", "        builder.setProducedAt(producedAt);\n", "        TestOcspClient ocspClient = new TestOcspClient().addBuilderForCertIssuer(caCert, builder);\n", "        IBasicOCSPResp basicOCSPResp = FACTORY.createBasicOCSPResp(FACTORY.createBasicOCSPResponse(\n", "                FACTORY.createASN1Primitive(ocspClient.getEncoded(checkCert, caCert, null))));\n", "\n", "        ValidationReport report = new ValidationReport();\n", "        certificateRetriever.addTrustedCertificates(Collections.singletonList(caCert));\n", "\n", "        OCSPValidator validator = validatorChainBuilder.buildOCSPValidator();\n", "        validator.validate(report, baseContext, checkCert, basicOCSPResp.getResponses()[0], basicOCSPResp,\n", "                TimeTestUtil.TEST_DATE_TIME);\n", "        AssertValidationReport.assertThat(report, a -> a\n", "                .hasStatus(ValidationReport.ValidationResult.INDETERMINATE)\n", "                .hasNumberOfFailures(1)\n", "                .hasNumberOfLogs(1)\n", "                .hasLogItem(l -> l.withCheckName(OCSPValidator.OCSP_CHECK)\n", "                        .withMessage(OCSPValidator.CERT_IS_EXPIRED, i -> checkCert.getNotAfter())\n", "                        .withCertificate(checkCert))\n", "        );\n", "    }\n", "\n", "    @Test\n", "    public void noArchiveCutoffExtensionButRevokedStatusTest() throws Exception {\n", "        Date producedAt = DateTimeUtil.addDaysToDate(checkCert.getNotAfter(), 5);\n", "        Date revocationDate = DateTimeUtil.addDaysToDate(TimeTestUtil.TEST_DATE_TIME, 5);\n", "        TestOcspResponseBuilder builder = new TestOcspResponseBuilder(responderCert, ocspRespPrivateKey);\n", "        builder.setProducedAt(producedAt);\n", "        builder.setCertificateStatus(FACTORY.createRevokedStatus(revocationDate,\n", "                FACTORY.createCRLReason().getKeyCompromise()));\n", "        TestOcspClient ocspClient = new TestOcspClient().addBuilderForCertIssuer(caCert, builder);\n", "        IBasicOCSPResp basicOCSPResp = FACTORY.createBasicOCSPResp(FACTORY.createBasicOCSPResponse(\n", "                FACTORY.createASN1Primitive(ocspClient.getEncoded(checkCert, caCert, null))));\n", "\n", "        ValidationReport report = new ValidationReport();\n", "        certificateRetriever.addTrustedCertificates(Collections.singletonList(caCert));\n", "\n", "        OCSPValidator validator = validatorChainBuilder.buildOCSPValidator();\n", "        validator.validate(report, baseContext, checkCert, basicOCSPResp.getResponses()[0], basicOCSPResp,\n", "                TimeTestUtil.TEST_DATE_TIME);\n", "        AssertValidationReport.assertThat(report, a -> a\n", "                .hasStatus(ValidationReport.ValidationResult.VALID)\n", "                .hasNumberOfFailures(0).hasNumberOfLogs(1)\n", "                .hasLogItem(l -> l.withCheckName(OCSPValidator.OCSP_CHECK)\n", "                        .withMessage(SignLogMessageConstant.VALID_CERTIFICATE_IS_REVOKED, i -> revocationDate)\n", "                        .withCertificate(checkCert)));\n", "    }\n", "\n", "    @Test\n", "    public void certExpiredBeforeArchiveCutoffDateTest() throws Exception {\n", "        Date producedAt = DateTimeUtil.addDaysToDate(checkCert.getNotAfter(), 5);\n", "        TestOcspResponseBuilder builder = new TestOcspResponseBuilder(responderCert, ocspRespPrivateKey);\n", "        builder.setProducedAt(producedAt);\n", "        builder.addResponseExtension(FACTORY.createOCSPObjectIdentifiers().getIdPkixOcspArchiveCutoff(),\n", "                FACTORY.createDEROctetString(FACTORY.createASN1GeneralizedTime(\n", "                        DateTimeUtil.addDaysToDate(producedAt, -3)).getEncoded()));\n", "        TestOcspClient ocspClient = new TestOcspClient().addBuilderForCertIssuer(caCert, builder);\n", "        IBasicOCSPResp basicOCSPResp = FACTORY.createBasicOCSPResp(FACTORY.createBasicOCSPResponse(\n", "                FACTORY.createASN1Primitive(ocspClient.getEncoded(checkCert, caCert, null))));\n", "\n", "        ValidationReport report = new ValidationReport();\n", "        certificateRetriever.addTrustedCertificates(Collections.singletonList(caCert));\n", "\n", "        OCSPValidator validator = validatorChainBuilder.buildOCSPValidator();\n", "        validator.validate(report, baseContext, checkCert, basicOCSPResp.getResponses()[0], basicOCSPResp,\n", "                TimeTestUtil.TEST_DATE_TIME);\n", "        AssertValidationReport.assertThat(report, a -> a\n", "                .hasStatus(ValidationReport.ValidationResult.INDETERMINATE)\n", "                .hasNumberOfFailures(1)\n", "                .hasNumberOfLogs(1)\n", "                .hasLogItem(l -> l.withCheckName(OCSPValidator.OCSP_CHECK)\n", "                        .withMessage(OCSPValidator.CERT_IS_EXPIRED, i -> checkCert.getNotAfter())\n", "                        .withCertificate(checkCert))\n", "        );\n", "    }\n", "\n", "    @Test\n", "    public void certExpiredAfterArchiveCutoffDateTest() throws Exception {\n", "        Date producedAt = DateTimeUtil.addDaysToDate(checkCert.getNotAfter(), 5);\n", "        TestOcspResponseBuilder builder = new TestOcspResponseBuilder(responderCert, ocspRespPrivateKey);\n", "        builder.setProducedAt(producedAt);\n", "        builder.addResponseExtension(FACTORY.createOCSPObjectIdentifiers().getIdPkixOcspArchiveCutoff(),\n", "                FACTORY.createDEROctetString(FACTORY.createASN1GeneralizedTime(\n", "                        DateTimeUtil.addDaysToDate(producedAt, -10)).getEncoded()));\n", "        TestOcspClient ocspClient = new TestOcspClient().addBuilderForCertIssuer(caCert, builder);\n", "        IBasicOCSPResp basicOCSPResp = FACTORY.createBasicOCSPResp(FACTORY.createBasicOCSPResponse(\n", "                FACTORY.createASN1Primitive(ocspClient.getEncoded(checkCert, caCert, null))));\n", "\n", "        ValidationReport report = new ValidationReport();\n", "        certificateRetriever.addTrustedCertificates(Collections.singletonList(caCert));\n", "\n", "        OCSPValidator validator = validatorChainBuilder.buildOCSPValidator();\n", "        validator.validate(report, baseContext, checkCert, basicOCSPResp.getResponses()[0], basicOCSPResp,\n", "                TimeTestUtil.TEST_DATE_TIME);\n", "        AssertValidationReport.assertThat(report, a -> a\n", "                .hasStatus(ValidationReport.ValidationResult.VALID)\n", "                .hasNumberOfFailures(0).hasNumberOfLogs(0));\n", "    }\n", "\n", "    private ValidationReport validateTest(Date checkDate) throws CertificateException, IOException {\n", "        return validateTest(checkDate, DateTimeUtil.addDaysToDate(checkDate, 1), 0);\n", "    }\n", "\n", "    private ValidationReport validateTest(Date checkDate, Date thisUpdate, long freshness)\n", "            throws CertificateException, IOException {\n", "        TestOcspResponseBuilder builder = new TestOcspResponseBuilder(responderCert, ocspRespPrivateKey);\n", "        builder.setThisUpdate(DateTimeUtil.getCalendar(thisUpdate));\n", "        TestOcspClient ocspClient = new TestOcspClient().addBuilderForCertIssuer(caCert, builder);\n", "        IBasicOCSPResp basicOCSPResp = FACTORY.createBasicOCSPResp(FACTORY.createBasicOCSPResponse(\n", "                FACTORY.createASN1Primitive(ocspClient.getEncoded(checkCert, caCert, null))));\n", "\n", "        ValidationReport report = new ValidationReport();\n", "        certificateRetriever.addTrustedCertificates(Collections.singletonList(caCert));\n", "\n", "        OCSPValidator validator = validatorChainBuilder.buildOCSPValidator();\n", "        parameters.setFreshness(ValidatorContexts.all(), CertificateSources.all(), TimeBasedContexts.all(),\n", "                Duration.ofDays(freshness));\n", "        validator.validate(report, baseContext, checkCert, basicOCSPResp.getResponses()[0], basicOCSPResp, checkDate);\n", "        return report;\n", "    }\n", "\n", "    private ValidationReport validateRevokedTestMocked(Date checkDate, Date revocationDate)\n", "            throws IOException, CertificateException {\n", "        TestOcspResponseBuilder builder = new TestOcspResponseBuilder(responderCert, ocspRespPrivateKey);\n", "        builder.setCertificateStatus(FACTORY.createRevokedStatus(revocationDate,\n", "                FACTORY.createCRLReason().getKeyCompromise()));\n", "        TestOcspClient ocspClient = new TestOcspClient().addBuilderForCertIssuer(caCert, builder);\n", "        IBasicOCSPResp basicOCSPResp = FACTORY.createBasicOCSPResp(FACTORY.createBasicOCSPResponse(\n", "                FACTORY.createASN1Primitive(ocspClient.getEncoded(checkCert, caCert, null))));\n", "\n", "        ValidationReport report = new ValidationReport();\n", "        certificateRetriever.addTrustedCertificates(Collections.singletonList(caCert));\n", "\n", "        OCSPValidator validator = validatorChainBuilder.buildOCSPValidator();\n", "        validator.validate(report, baseContext, checkCert, basicOCSPResp.getResponses()[0], basicOCSPResp, checkDate);\n", "        return report;\n", "    }\n", "\n", "    private static class TestIssuingCertificateRetriever extends IssuingCertificateRetriever {\n", "        Certificate issuerCertificate;\n", "\n", "        public TestIssuingCertificateRetriever(String issuerPath) throws CertificateException, IOException {\n", "            super();\n", "            this.issuerCertificate = PemFileHelper.readFirstChain(issuerPath)[0];\n", "        }\n", "\n", "        @Override\n", "        public Certificate retrieveIssuerCertificate(Certificate certificate) {\n", "            return issuerCertificate;\n", "        }\n", "    }\n", "}\n"], "method_lines_dic": {"OCSPValidator::::addResponderValidationReport(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.report.ValidationReport)": [250, 255]}, "test_method_lines_dic": {"OCSPValidatorTest::::before()": [87, 101], "OCSPValidatorTest::::setUp()": [103, 112], "OCSPValidatorTest::::happyPathTest()": [114, 121], "OCSPValidatorTest::::ocpsIssuerChainValidationsUsesCorrectParametersTest()": [123, 134], "OCSPValidatorTest::::ocspForSelfSignedCertShouldNotValdateFurtherTest()": [136, 158], "OCSPValidatorTest::::validationDateAfterNextUpdateTest()": [160, 172], "OCSPValidatorTest::::serialNumbersDoNotMatchTest()": [175, 202], "OCSPValidatorTest::::issuersDoNotMatchTest()": [205, 230], "OCSPValidatorTest::::positiveFreshnessNegativeTest()": [232, 246], "OCSPValidatorTest::::nextUpdateNotSetResultsInValidStatusTest()": [248, 268], "OCSPValidatorTest::::certificateWasRevokedBeforeCheckDateShouldFailTest()": [270, 283], "OCSPValidatorTest::::certificateWasRevokedAfterCheckDateShouldSucceedTest()": [285, 298], "OCSPValidatorTest::::certificateStatusIsUnknownTest()": [300, 323], "OCSPValidatorTest::::ocspIssuerCertificateDoesNotVerifyWithCaPKTest()": [325, 354], "OCSPValidatorTest::::noResponderFoundInCertsTest()": [356, 377], "OCSPValidatorTest::::chainValidatorReportWrappingTest()": [379, 399], "OCSPValidatorTest::::noArchiveCutoffExtensionTest()": [401, 424], "OCSPValidatorTest::::noArchiveCutoffExtensionButRevokedStatusTest()": [426, 450], "OCSPValidatorTest::::certExpiredBeforeArchiveCutoffDateTest()": [452, 478], "OCSPValidatorTest::::certExpiredAfterArchiveCutoffDateTest()": [480, 501], "OCSPValidatorTest::::validateTest(java.util.Date)": [503, 505], "OCSPValidatorTest::::validateTest(java.util.Date,java.util.Date,long)": [507, 523], "OCSPValidatorTest::::validateRevokedTestMocked(java.util.Date,java.util.Date)": [525, 540], "OCSPValidatorTest.TestIssuingCertificateRetriever::::retrieveIssuerCertificate(java.security.cert.Certificate)": [550, 553]}, "reverse_method_lines_dic": {"250": "OCSPValidator::::addResponderValidationReport(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.report.ValidationReport)", "251": "OCSPValidator::::addResponderValidationReport(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.report.ValidationReport)", "252": "OCSPValidator::::addResponderValidationReport(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.report.ValidationReport)", "253": "OCSPValidator::::addResponderValidationReport(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.report.ValidationReport)", "254": "OCSPValidator::::addResponderValidationReport(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.report.ValidationReport)", "255": "OCSPValidator::::addResponderValidationReport(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.report.ValidationReport)"}, "test_reverse_method_lines_dic": {"87": "OCSPValidatorTest::::before()", "88": "OCSPValidatorTest::::before()", "89": "OCSPValidatorTest::::before()", "90": "OCSPValidatorTest::::before()", "91": "OCSPValidatorTest::::before()", "92": "OCSPValidatorTest::::before()", "93": "OCSPValidatorTest::::before()", "94": "OCSPValidatorTest::::before()", "95": "OCSPValidatorTest::::before()", "96": "OCSPValidatorTest::::before()", "97": "OCSPValidatorTest::::before()", "98": "OCSPValidatorTest::::before()", "99": "OCSPValidatorTest::::before()", "100": "OCSPValidatorTest::::before()", "101": "OCSPValidatorTest::::before()", "103": "OCSPValidatorTest::::setUp()", "104": "OCSPValidatorTest::::setUp()", "105": "OCSPValidatorTest::::setUp()", "106": "OCSPValidatorTest::::setUp()", "107": "OCSPValidatorTest::::setUp()", "108": "OCSPValidatorTest::::setUp()", "109": "OCSPValidatorTest::::setUp()", "110": "OCSPValidatorTest::::setUp()", "111": "OCSPValidatorTest::::setUp()", "112": "OCSPValidatorTest::::setUp()", "114": "OCSPValidatorTest::::happyPathTest()", "115": "OCSPValidatorTest::::happyPathTest()", "116": "OCSPValidatorTest::::happyPathTest()", "117": "OCSPValidatorTest::::happyPathTest()", "118": "OCSPValidatorTest::::happyPathTest()", "119": "OCSPValidatorTest::::happyPathTest()", "120": "OCSPValidatorTest::::happyPathTest()", "121": "OCSPValidatorTest::::happyPathTest()", "123": "OCSPValidatorTest::::ocpsIssuerChainValidationsUsesCorrectParametersTest()", "124": "OCSPValidatorTest::::ocpsIssuerChainValidationsUsesCorrectParametersTest()", "125": "OCSPValidatorTest::::ocpsIssuerChainValidationsUsesCorrectParametersTest()", "126": "OCSPValidatorTest::::ocpsIssuerChainValidationsUsesCorrectParametersTest()", "127": "OCSPValidatorTest::::ocpsIssuerChainValidationsUsesCorrectParametersTest()", "128": "OCSPValidatorTest::::ocpsIssuerChainValidationsUsesCorrectParametersTest()", "129": "OCSPValidatorTest::::ocpsIssuerChainValidationsUsesCorrectParametersTest()", "130": "OCSPValidatorTest::::ocpsIssuerChainValidationsUsesCorrectParametersTest()", "131": "OCSPValidatorTest::::ocpsIssuerChainValidationsUsesCorrectParametersTest()", "132": "OCSPValidatorTest::::ocpsIssuerChainValidationsUsesCorrectParametersTest()", "133": "OCSPValidatorTest::::ocpsIssuerChainValidationsUsesCorrectParametersTest()", "134": "OCSPValidatorTest::::ocpsIssuerChainValidationsUsesCorrectParametersTest()", "136": "OCSPValidatorTest::::ocspForSelfSignedCertShouldNotValdateFurtherTest()", "137": "OCSPValidatorTest::::ocspForSelfSignedCertShouldNotValdateFurtherTest()", "138": "OCSPValidatorTest::::ocspForSelfSignedCertShouldNotValdateFurtherTest()", "139": "OCSPValidatorTest::::ocspForSelfSignedCertShouldNotValdateFurtherTest()", "140": "OCSPValidatorTest::::ocspForSelfSignedCertShouldNotValdateFurtherTest()", "141": "OCSPValidatorTest::::ocspForSelfSignedCertShouldNotValdateFurtherTest()", "142": "OCSPValidatorTest::::ocspForSelfSignedCertShouldNotValdateFurtherTest()", "143": "OCSPValidatorTest::::ocspForSelfSignedCertShouldNotValdateFurtherTest()", "144": "OCSPValidatorTest::::ocspForSelfSignedCertShouldNotValdateFurtherTest()", "145": "OCSPValidatorTest::::ocspForSelfSignedCertShouldNotValdateFurtherTest()", "146": "OCSPValidatorTest::::ocspForSelfSignedCertShouldNotValdateFurtherTest()", "147": "OCSPValidatorTest::::ocspForSelfSignedCertShouldNotValdateFurtherTest()", "148": "OCSPValidatorTest::::ocspForSelfSignedCertShouldNotValdateFurtherTest()", "149": "OCSPValidatorTest::::ocspForSelfSignedCertShouldNotValdateFurtherTest()", "150": "OCSPValidatorTest::::ocspForSelfSignedCertShouldNotValdateFurtherTest()", "151": "OCSPValidatorTest::::ocspForSelfSignedCertShouldNotValdateFurtherTest()", "152": "OCSPValidatorTest::::ocspForSelfSignedCertShouldNotValdateFurtherTest()", "153": "OCSPValidatorTest::::ocspForSelfSignedCertShouldNotValdateFurtherTest()", "154": "OCSPValidatorTest::::ocspForSelfSignedCertShouldNotValdateFurtherTest()", "155": "OCSPValidatorTest::::ocspForSelfSignedCertShouldNotValdateFurtherTest()", "156": "OCSPValidatorTest::::ocspForSelfSignedCertShouldNotValdateFurtherTest()", "157": "OCSPValidatorTest::::ocspForSelfSignedCertShouldNotValdateFurtherTest()", "158": "OCSPValidatorTest::::ocspForSelfSignedCertShouldNotValdateFurtherTest()", "160": "OCSPValidatorTest::::validationDateAfterNextUpdateTest()", "161": "OCSPValidatorTest::::validationDateAfterNextUpdateTest()", "162": "OCSPValidatorTest::::validationDateAfterNextUpdateTest()", "163": "OCSPValidatorTest::::validationDateAfterNextUpdateTest()", "164": "OCSPValidatorTest::::validationDateAfterNextUpdateTest()", "165": "OCSPValidatorTest::::validationDateAfterNextUpdateTest()", "166": "OCSPValidatorTest::::validationDateAfterNextUpdateTest()", "167": "OCSPValidatorTest::::validationDateAfterNextUpdateTest()", "168": "OCSPValidatorTest::::validationDateAfterNextUpdateTest()", "169": "OCSPValidatorTest::::validationDateAfterNextUpdateTest()", "170": "OCSPValidatorTest::::validationDateAfterNextUpdateTest()", "171": "OCSPValidatorTest::::validationDateAfterNextUpdateTest()", "172": "OCSPValidatorTest::::validationDateAfterNextUpdateTest()", "175": "OCSPValidatorTest::::serialNumbersDoNotMatchTest()", "176": "OCSPValidatorTest::::serialNumbersDoNotMatchTest()", "177": "OCSPValidatorTest::::serialNumbersDoNotMatchTest()", "178": "OCSPValidatorTest::::serialNumbersDoNotMatchTest()", "179": "OCSPValidatorTest::::serialNumbersDoNotMatchTest()", "180": "OCSPValidatorTest::::serialNumbersDoNotMatchTest()", "181": "OCSPValidatorTest::::serialNumbersDoNotMatchTest()", "182": "OCSPValidatorTest::::serialNumbersDoNotMatchTest()", "183": "OCSPValidatorTest::::serialNumbersDoNotMatchTest()", "184": "OCSPValidatorTest::::serialNumbersDoNotMatchTest()", "185": "OCSPValidatorTest::::serialNumbersDoNotMatchTest()", "186": "OCSPValidatorTest::::serialNumbersDoNotMatchTest()", "187": "OCSPValidatorTest::::serialNumbersDoNotMatchTest()", "188": "OCSPValidatorTest::::serialNumbersDoNotMatchTest()", "189": "OCSPValidatorTest::::serialNumbersDoNotMatchTest()", "190": "OCSPValidatorTest::::serialNumbersDoNotMatchTest()", "191": "OCSPValidatorTest::::serialNumbersDoNotMatchTest()", "192": "OCSPValidatorTest::::serialNumbersDoNotMatchTest()", "193": "OCSPValidatorTest::::serialNumbersDoNotMatchTest()", "194": "OCSPValidatorTest::::serialNumbersDoNotMatchTest()", "195": "OCSPValidatorTest::::serialNumbersDoNotMatchTest()", "196": "OCSPValidatorTest::::serialNumbersDoNotMatchTest()", "197": "OCSPValidatorTest::::serialNumbersDoNotMatchTest()", "198": "OCSPValidatorTest::::serialNumbersDoNotMatchTest()", "199": "OCSPValidatorTest::::serialNumbersDoNotMatchTest()", "200": "OCSPValidatorTest::::serialNumbersDoNotMatchTest()", "201": "OCSPValidatorTest::::serialNumbersDoNotMatchTest()", "202": "OCSPValidatorTest::::serialNumbersDoNotMatchTest()", "205": "OCSPValidatorTest::::issuersDoNotMatchTest()", "206": "OCSPValidatorTest::::issuersDoNotMatchTest()", "207": "OCSPValidatorTest::::issuersDoNotMatchTest()", "208": "OCSPValidatorTest::::issuersDoNotMatchTest()", "209": "OCSPValidatorTest::::issuersDoNotMatchTest()", "210": "OCSPValidatorTest::::issuersDoNotMatchTest()", "211": "OCSPValidatorTest::::issuersDoNotMatchTest()", "212": "OCSPValidatorTest::::issuersDoNotMatchTest()", "213": "OCSPValidatorTest::::issuersDoNotMatchTest()", "214": "OCSPValidatorTest::::issuersDoNotMatchTest()", "215": "OCSPValidatorTest::::issuersDoNotMatchTest()", "216": "OCSPValidatorTest::::issuersDoNotMatchTest()", "217": "OCSPValidatorTest::::issuersDoNotMatchTest()", "218": "OCSPValidatorTest::::issuersDoNotMatchTest()", "219": "OCSPValidatorTest::::issuersDoNotMatchTest()", "220": "OCSPValidatorTest::::issuersDoNotMatchTest()", "221": "OCSPValidatorTest::::issuersDoNotMatchTest()", "222": "OCSPValidatorTest::::issuersDoNotMatchTest()", "223": "OCSPValidatorTest::::issuersDoNotMatchTest()", "224": "OCSPValidatorTest::::issuersDoNotMatchTest()", "225": "OCSPValidatorTest::::issuersDoNotMatchTest()", "226": "OCSPValidatorTest::::issuersDoNotMatchTest()", "227": "OCSPValidatorTest::::issuersDoNotMatchTest()", "228": "OCSPValidatorTest::::issuersDoNotMatchTest()", "229": "OCSPValidatorTest::::issuersDoNotMatchTest()", "230": "OCSPValidatorTest::::issuersDoNotMatchTest()", "232": "OCSPValidatorTest::::positiveFreshnessNegativeTest()", "233": "OCSPValidatorTest::::positiveFreshnessNegativeTest()", "234": "OCSPValidatorTest::::positiveFreshnessNegativeTest()", "235": "OCSPValidatorTest::::positiveFreshnessNegativeTest()", "236": "OCSPValidatorTest::::positiveFreshnessNegativeTest()", "237": "OCSPValidatorTest::::positiveFreshnessNegativeTest()", "238": "OCSPValidatorTest::::positiveFreshnessNegativeTest()", "239": "OCSPValidatorTest::::positiveFreshnessNegativeTest()", "240": "OCSPValidatorTest::::positiveFreshnessNegativeTest()", "241": "OCSPValidatorTest::::positiveFreshnessNegativeTest()", "242": "OCSPValidatorTest::::positiveFreshnessNegativeTest()", "243": "OCSPValidatorTest::::positiveFreshnessNegativeTest()", "244": "OCSPValidatorTest::::positiveFreshnessNegativeTest()", "245": "OCSPValidatorTest::::positiveFreshnessNegativeTest()", "246": "OCSPValidatorTest::::positiveFreshnessNegativeTest()", "248": "OCSPValidatorTest::::nextUpdateNotSetResultsInValidStatusTest()", "249": "OCSPValidatorTest::::nextUpdateNotSetResultsInValidStatusTest()", "250": "OCSPValidatorTest::::nextUpdateNotSetResultsInValidStatusTest()", "251": "OCSPValidatorTest::::nextUpdateNotSetResultsInValidStatusTest()", "252": "OCSPValidatorTest::::nextUpdateNotSetResultsInValidStatusTest()", "253": "OCSPValidatorTest::::nextUpdateNotSetResultsInValidStatusTest()", "254": "OCSPValidatorTest::::nextUpdateNotSetResultsInValidStatusTest()", "255": "OCSPValidatorTest::::nextUpdateNotSetResultsInValidStatusTest()", "256": "OCSPValidatorTest::::nextUpdateNotSetResultsInValidStatusTest()", "257": "OCSPValidatorTest::::nextUpdateNotSetResultsInValidStatusTest()", "258": "OCSPValidatorTest::::nextUpdateNotSetResultsInValidStatusTest()", "259": "OCSPValidatorTest::::nextUpdateNotSetResultsInValidStatusTest()", "260": "OCSPValidatorTest::::nextUpdateNotSetResultsInValidStatusTest()", "261": "OCSPValidatorTest::::nextUpdateNotSetResultsInValidStatusTest()", "262": "OCSPValidatorTest::::nextUpdateNotSetResultsInValidStatusTest()", "263": "OCSPValidatorTest::::nextUpdateNotSetResultsInValidStatusTest()", "264": "OCSPValidatorTest::::nextUpdateNotSetResultsInValidStatusTest()", "265": "OCSPValidatorTest::::nextUpdateNotSetResultsInValidStatusTest()", "266": "OCSPValidatorTest::::nextUpdateNotSetResultsInValidStatusTest()", "267": "OCSPValidatorTest::::nextUpdateNotSetResultsInValidStatusTest()", "268": "OCSPValidatorTest::::nextUpdateNotSetResultsInValidStatusTest()", "270": "OCSPValidatorTest::::certificateWasRevokedBeforeCheckDateShouldFailTest()", "271": "OCSPValidatorTest::::certificateWasRevokedBeforeCheckDateShouldFailTest()", "272": "OCSPValidatorTest::::certificateWasRevokedBeforeCheckDateShouldFailTest()", "273": "OCSPValidatorTest::::certificateWasRevokedBeforeCheckDateShouldFailTest()", "274": "OCSPValidatorTest::::certificateWasRevokedBeforeCheckDateShouldFailTest()", "275": "OCSPValidatorTest::::certificateWasRevokedBeforeCheckDateShouldFailTest()", "276": "OCSPValidatorTest::::certificateWasRevokedBeforeCheckDateShouldFailTest()", "277": "OCSPValidatorTest::::certificateWasRevokedBeforeCheckDateShouldFailTest()", "278": "OCSPValidatorTest::::certificateWasRevokedBeforeCheckDateShouldFailTest()", "279": "OCSPValidatorTest::::certificateWasRevokedBeforeCheckDateShouldFailTest()", "280": "OCSPValidatorTest::::certificateWasRevokedBeforeCheckDateShouldFailTest()", "281": "OCSPValidatorTest::::certificateWasRevokedBeforeCheckDateShouldFailTest()", "282": "OCSPValidatorTest::::certificateWasRevokedBeforeCheckDateShouldFailTest()", "283": "OCSPValidatorTest::::certificateWasRevokedBeforeCheckDateShouldFailTest()", "285": "OCSPValidatorTest::::certificateWasRevokedAfterCheckDateShouldSucceedTest()", "286": "OCSPValidatorTest::::certificateWasRevokedAfterCheckDateShouldSucceedTest()", "287": "OCSPValidatorTest::::certificateWasRevokedAfterCheckDateShouldSucceedTest()", "288": "OCSPValidatorTest::::certificateWasRevokedAfterCheckDateShouldSucceedTest()", "289": "OCSPValidatorTest::::certificateWasRevokedAfterCheckDateShouldSucceedTest()", "290": "OCSPValidatorTest::::certificateWasRevokedAfterCheckDateShouldSucceedTest()", "291": "OCSPValidatorTest::::certificateWasRevokedAfterCheckDateShouldSucceedTest()", "292": "OCSPValidatorTest::::certificateWasRevokedAfterCheckDateShouldSucceedTest()", "293": "OCSPValidatorTest::::certificateWasRevokedAfterCheckDateShouldSucceedTest()", "294": "OCSPValidatorTest::::certificateWasRevokedAfterCheckDateShouldSucceedTest()", "295": "OCSPValidatorTest::::certificateWasRevokedAfterCheckDateShouldSucceedTest()", "296": "OCSPValidatorTest::::certificateWasRevokedAfterCheckDateShouldSucceedTest()", "297": "OCSPValidatorTest::::certificateWasRevokedAfterCheckDateShouldSucceedTest()", "298": "OCSPValidatorTest::::certificateWasRevokedAfterCheckDateShouldSucceedTest()", "300": "OCSPValidatorTest::::certificateStatusIsUnknownTest()", "301": "OCSPValidatorTest::::certificateStatusIsUnknownTest()", "302": "OCSPValidatorTest::::certificateStatusIsUnknownTest()", "303": "OCSPValidatorTest::::certificateStatusIsUnknownTest()", "304": "OCSPValidatorTest::::certificateStatusIsUnknownTest()", "305": "OCSPValidatorTest::::certificateStatusIsUnknownTest()", "306": "OCSPValidatorTest::::certificateStatusIsUnknownTest()", "307": "OCSPValidatorTest::::certificateStatusIsUnknownTest()", "308": "OCSPValidatorTest::::certificateStatusIsUnknownTest()", "309": "OCSPValidatorTest::::certificateStatusIsUnknownTest()", "310": "OCSPValidatorTest::::certificateStatusIsUnknownTest()", "311": "OCSPValidatorTest::::certificateStatusIsUnknownTest()", "312": "OCSPValidatorTest::::certificateStatusIsUnknownTest()", "313": "OCSPValidatorTest::::certificateStatusIsUnknownTest()", "314": "OCSPValidatorTest::::certificateStatusIsUnknownTest()", "315": "OCSPValidatorTest::::certificateStatusIsUnknownTest()", "316": "OCSPValidatorTest::::certificateStatusIsUnknownTest()", "317": "OCSPValidatorTest::::certificateStatusIsUnknownTest()", "318": "OCSPValidatorTest::::certificateStatusIsUnknownTest()", "319": "OCSPValidatorTest::::certificateStatusIsUnknownTest()", "320": "OCSPValidatorTest::::certificateStatusIsUnknownTest()", "321": "OCSPValidatorTest::::certificateStatusIsUnknownTest()", "322": "OCSPValidatorTest::::certificateStatusIsUnknownTest()", "323": "OCSPValidatorTest::::certificateStatusIsUnknownTest()", "325": "OCSPValidatorTest::::ocspIssuerCertificateDoesNotVerifyWithCaPKTest()", "326": "OCSPValidatorTest::::ocspIssuerCertificateDoesNotVerifyWithCaPKTest()", "327": "OCSPValidatorTest::::ocspIssuerCertificateDoesNotVerifyWithCaPKTest()", "328": "OCSPValidatorTest::::ocspIssuerCertificateDoesNotVerifyWithCaPKTest()", "329": "OCSPValidatorTest::::ocspIssuerCertificateDoesNotVerifyWithCaPKTest()", "330": "OCSPValidatorTest::::ocspIssuerCertificateDoesNotVerifyWithCaPKTest()", "331": "OCSPValidatorTest::::ocspIssuerCertificateDoesNotVerifyWithCaPKTest()", "332": "OCSPValidatorTest::::ocspIssuerCertificateDoesNotVerifyWithCaPKTest()", "333": "OCSPValidatorTest::::ocspIssuerCertificateDoesNotVerifyWithCaPKTest()", "334": "OCSPValidatorTest::::ocspIssuerCertificateDoesNotVerifyWithCaPKTest()", "335": "OCSPValidatorTest::::ocspIssuerCertificateDoesNotVerifyWithCaPKTest()", "336": "OCSPValidatorTest::::ocspIssuerCertificateDoesNotVerifyWithCaPKTest()", "337": "OCSPValidatorTest::::ocspIssuerCertificateDoesNotVerifyWithCaPKTest()", "338": "OCSPValidatorTest::::ocspIssuerCertificateDoesNotVerifyWithCaPKTest()", "339": "OCSPValidatorTest::::ocspIssuerCertificateDoesNotVerifyWithCaPKTest()", "340": "OCSPValidatorTest::::ocspIssuerCertificateDoesNotVerifyWithCaPKTest()", "341": "OCSPValidatorTest::::ocspIssuerCertificateDoesNotVerifyWithCaPKTest()", "342": "OCSPValidatorTest::::ocspIssuerCertificateDoesNotVerifyWithCaPKTest()", "343": "OCSPValidatorTest::::ocspIssuerCertificateDoesNotVerifyWithCaPKTest()", "344": "OCSPValidatorTest::::ocspIssuerCertificateDoesNotVerifyWithCaPKTest()", "345": "OCSPValidatorTest::::ocspIssuerCertificateDoesNotVerifyWithCaPKTest()", "346": "OCSPValidatorTest::::ocspIssuerCertificateDoesNotVerifyWithCaPKTest()", "347": "OCSPValidatorTest::::ocspIssuerCertificateDoesNotVerifyWithCaPKTest()", "348": "OCSPValidatorTest::::ocspIssuerCertificateDoesNotVerifyWithCaPKTest()", "349": "OCSPValidatorTest::::ocspIssuerCertificateDoesNotVerifyWithCaPKTest()", "350": "OCSPValidatorTest::::ocspIssuerCertificateDoesNotVerifyWithCaPKTest()", "351": "OCSPValidatorTest::::ocspIssuerCertificateDoesNotVerifyWithCaPKTest()", "352": "OCSPValidatorTest::::ocspIssuerCertificateDoesNotVerifyWithCaPKTest()", "353": "OCSPValidatorTest::::ocspIssuerCertificateDoesNotVerifyWithCaPKTest()", "354": "OCSPValidatorTest::::ocspIssuerCertificateDoesNotVerifyWithCaPKTest()", "356": "OCSPValidatorTest::::noResponderFoundInCertsTest()", "357": "OCSPValidatorTest::::noResponderFoundInCertsTest()", "358": "OCSPValidatorTest::::noResponderFoundInCertsTest()", "359": "OCSPValidatorTest::::noResponderFoundInCertsTest()", "360": "OCSPValidatorTest::::noResponderFoundInCertsTest()", "361": "OCSPValidatorTest::::noResponderFoundInCertsTest()", "362": "OCSPValidatorTest::::noResponderFoundInCertsTest()", "363": "OCSPValidatorTest::::noResponderFoundInCertsTest()", "364": "OCSPValidatorTest::::noResponderFoundInCertsTest()", "365": "OCSPValidatorTest::::noResponderFoundInCertsTest()", "366": "OCSPValidatorTest::::noResponderFoundInCertsTest()", "367": "OCSPValidatorTest::::noResponderFoundInCertsTest()", "368": "OCSPValidatorTest::::noResponderFoundInCertsTest()", "369": "OCSPValidatorTest::::noResponderFoundInCertsTest()", "370": "OCSPValidatorTest::::noResponderFoundInCertsTest()", "371": "OCSPValidatorTest::::noResponderFoundInCertsTest()", "372": "OCSPValidatorTest::::noResponderFoundInCertsTest()", "373": "OCSPValidatorTest::::noResponderFoundInCertsTest()", "374": "OCSPValidatorTest::::noResponderFoundInCertsTest()", "375": "OCSPValidatorTest::::noResponderFoundInCertsTest()", "376": "OCSPValidatorTest::::noResponderFoundInCertsTest()", "377": "OCSPValidatorTest::::noResponderFoundInCertsTest()", "379": "OCSPValidatorTest::::chainValidatorReportWrappingTest()", "380": "OCSPValidatorTest::::chainValidatorReportWrappingTest()", "381": "OCSPValidatorTest::::chainValidatorReportWrappingTest()", "382": "OCSPValidatorTest::::chainValidatorReportWrappingTest()", "383": "OCSPValidatorTest::::chainValidatorReportWrappingTest()", "384": "OCSPValidatorTest::::chainValidatorReportWrappingTest()", "385": "OCSPValidatorTest::::chainValidatorReportWrappingTest()", "386": "OCSPValidatorTest::::chainValidatorReportWrappingTest()", "387": "OCSPValidatorTest::::chainValidatorReportWrappingTest()", "388": "OCSPValidatorTest::::chainValidatorReportWrappingTest()", "389": "OCSPValidatorTest::::chainValidatorReportWrappingTest()", "390": "OCSPValidatorTest::::chainValidatorReportWrappingTest()", "391": "OCSPValidatorTest::::chainValidatorReportWrappingTest()", "392": "OCSPValidatorTest::::chainValidatorReportWrappingTest()", "393": "OCSPValidatorTest::::chainValidatorReportWrappingTest()", "394": "OCSPValidatorTest::::chainValidatorReportWrappingTest()", "395": "OCSPValidatorTest::::chainValidatorReportWrappingTest()", "396": "OCSPValidatorTest::::chainValidatorReportWrappingTest()", "397": "OCSPValidatorTest::::chainValidatorReportWrappingTest()", "398": "OCSPValidatorTest::::chainValidatorReportWrappingTest()", "399": "OCSPValidatorTest::::chainValidatorReportWrappingTest()", "401": "OCSPValidatorTest::::noArchiveCutoffExtensionTest()", "402": "OCSPValidatorTest::::noArchiveCutoffExtensionTest()", "403": "OCSPValidatorTest::::noArchiveCutoffExtensionTest()", "404": "OCSPValidatorTest::::noArchiveCutoffExtensionTest()", "405": "OCSPValidatorTest::::noArchiveCutoffExtensionTest()", "406": "OCSPValidatorTest::::noArchiveCutoffExtensionTest()", "407": "OCSPValidatorTest::::noArchiveCutoffExtensionTest()", "408": "OCSPValidatorTest::::noArchiveCutoffExtensionTest()", "409": "OCSPValidatorTest::::noArchiveCutoffExtensionTest()", "410": "OCSPValidatorTest::::noArchiveCutoffExtensionTest()", "411": "OCSPValidatorTest::::noArchiveCutoffExtensionTest()", "412": "OCSPValidatorTest::::noArchiveCutoffExtensionTest()", "413": "OCSPValidatorTest::::noArchiveCutoffExtensionTest()", "414": "OCSPValidatorTest::::noArchiveCutoffExtensionTest()", "415": "OCSPValidatorTest::::noArchiveCutoffExtensionTest()", "416": "OCSPValidatorTest::::noArchiveCutoffExtensionTest()", "417": "OCSPValidatorTest::::noArchiveCutoffExtensionTest()", "418": "OCSPValidatorTest::::noArchiveCutoffExtensionTest()", "419": "OCSPValidatorTest::::noArchiveCutoffExtensionTest()", "420": "OCSPValidatorTest::::noArchiveCutoffExtensionTest()", "421": "OCSPValidatorTest::::noArchiveCutoffExtensionTest()", "422": "OCSPValidatorTest::::noArchiveCutoffExtensionTest()", "423": "OCSPValidatorTest::::noArchiveCutoffExtensionTest()", "424": "OCSPValidatorTest::::noArchiveCutoffExtensionTest()", "426": "OCSPValidatorTest::::noArchiveCutoffExtensionButRevokedStatusTest()", "427": "OCSPValidatorTest::::noArchiveCutoffExtensionButRevokedStatusTest()", "428": "OCSPValidatorTest::::noArchiveCutoffExtensionButRevokedStatusTest()", "429": "OCSPValidatorTest::::noArchiveCutoffExtensionButRevokedStatusTest()", "430": "OCSPValidatorTest::::noArchiveCutoffExtensionButRevokedStatusTest()", "431": "OCSPValidatorTest::::noArchiveCutoffExtensionButRevokedStatusTest()", "432": "OCSPValidatorTest::::noArchiveCutoffExtensionButRevokedStatusTest()", "433": "OCSPValidatorTest::::noArchiveCutoffExtensionButRevokedStatusTest()", "434": "OCSPValidatorTest::::noArchiveCutoffExtensionButRevokedStatusTest()", "435": "OCSPValidatorTest::::noArchiveCutoffExtensionButRevokedStatusTest()", "436": "OCSPValidatorTest::::noArchiveCutoffExtensionButRevokedStatusTest()", "437": "OCSPValidatorTest::::noArchiveCutoffExtensionButRevokedStatusTest()", "438": "OCSPValidatorTest::::noArchiveCutoffExtensionButRevokedStatusTest()", "439": "OCSPValidatorTest::::noArchiveCutoffExtensionButRevokedStatusTest()", "440": "OCSPValidatorTest::::noArchiveCutoffExtensionButRevokedStatusTest()", "441": "OCSPValidatorTest::::noArchiveCutoffExtensionButRevokedStatusTest()", "442": "OCSPValidatorTest::::noArchiveCutoffExtensionButRevokedStatusTest()", "443": "OCSPValidatorTest::::noArchiveCutoffExtensionButRevokedStatusTest()", "444": "OCSPValidatorTest::::noArchiveCutoffExtensionButRevokedStatusTest()", "445": "OCSPValidatorTest::::noArchiveCutoffExtensionButRevokedStatusTest()", "446": "OCSPValidatorTest::::noArchiveCutoffExtensionButRevokedStatusTest()", "447": "OCSPValidatorTest::::noArchiveCutoffExtensionButRevokedStatusTest()", "448": "OCSPValidatorTest::::noArchiveCutoffExtensionButRevokedStatusTest()", "449": "OCSPValidatorTest::::noArchiveCutoffExtensionButRevokedStatusTest()", "450": "OCSPValidatorTest::::noArchiveCutoffExtensionButRevokedStatusTest()", "452": "OCSPValidatorTest::::certExpiredBeforeArchiveCutoffDateTest()", "453": "OCSPValidatorTest::::certExpiredBeforeArchiveCutoffDateTest()", "454": "OCSPValidatorTest::::certExpiredBeforeArchiveCutoffDateTest()", "455": "OCSPValidatorTest::::certExpiredBeforeArchiveCutoffDateTest()", "456": "OCSPValidatorTest::::certExpiredBeforeArchiveCutoffDateTest()", "457": "OCSPValidatorTest::::certExpiredBeforeArchiveCutoffDateTest()", "458": "OCSPValidatorTest::::certExpiredBeforeArchiveCutoffDateTest()", "459": "OCSPValidatorTest::::certExpiredBeforeArchiveCutoffDateTest()", "460": "OCSPValidatorTest::::certExpiredBeforeArchiveCutoffDateTest()", "461": "OCSPValidatorTest::::certExpiredBeforeArchiveCutoffDateTest()", "462": "OCSPValidatorTest::::certExpiredBeforeArchiveCutoffDateTest()", "463": "OCSPValidatorTest::::certExpiredBeforeArchiveCutoffDateTest()", "464": "OCSPValidatorTest::::certExpiredBeforeArchiveCutoffDateTest()", "465": "OCSPValidatorTest::::certExpiredBeforeArchiveCutoffDateTest()", "466": "OCSPValidatorTest::::certExpiredBeforeArchiveCutoffDateTest()", "467": "OCSPValidatorTest::::certExpiredBeforeArchiveCutoffDateTest()", "468": "OCSPValidatorTest::::certExpiredBeforeArchiveCutoffDateTest()", "469": "OCSPValidatorTest::::certExpiredBeforeArchiveCutoffDateTest()", "470": "OCSPValidatorTest::::certExpiredBeforeArchiveCutoffDateTest()", "471": "OCSPValidatorTest::::certExpiredBeforeArchiveCutoffDateTest()", "472": "OCSPValidatorTest::::certExpiredBeforeArchiveCutoffDateTest()", "473": "OCSPValidatorTest::::certExpiredBeforeArchiveCutoffDateTest()", "474": "OCSPValidatorTest::::certExpiredBeforeArchiveCutoffDateTest()", "475": "OCSPValidatorTest::::certExpiredBeforeArchiveCutoffDateTest()", "476": "OCSPValidatorTest::::certExpiredBeforeArchiveCutoffDateTest()", "477": "OCSPValidatorTest::::certExpiredBeforeArchiveCutoffDateTest()", "478": "OCSPValidatorTest::::certExpiredBeforeArchiveCutoffDateTest()", "480": "OCSPValidatorTest::::certExpiredAfterArchiveCutoffDateTest()", "481": "OCSPValidatorTest::::certExpiredAfterArchiveCutoffDateTest()", "482": "OCSPValidatorTest::::certExpiredAfterArchiveCutoffDateTest()", "483": "OCSPValidatorTest::::certExpiredAfterArchiveCutoffDateTest()", "484": "OCSPValidatorTest::::certExpiredAfterArchiveCutoffDateTest()", "485": "OCSPValidatorTest::::certExpiredAfterArchiveCutoffDateTest()", "486": "OCSPValidatorTest::::certExpiredAfterArchiveCutoffDateTest()", "487": "OCSPValidatorTest::::certExpiredAfterArchiveCutoffDateTest()", "488": "OCSPValidatorTest::::certExpiredAfterArchiveCutoffDateTest()", "489": "OCSPValidatorTest::::certExpiredAfterArchiveCutoffDateTest()", "490": "OCSPValidatorTest::::certExpiredAfterArchiveCutoffDateTest()", "491": "OCSPValidatorTest::::certExpiredAfterArchiveCutoffDateTest()", "492": "OCSPValidatorTest::::certExpiredAfterArchiveCutoffDateTest()", "493": "OCSPValidatorTest::::certExpiredAfterArchiveCutoffDateTest()", "494": "OCSPValidatorTest::::certExpiredAfterArchiveCutoffDateTest()", "495": "OCSPValidatorTest::::certExpiredAfterArchiveCutoffDateTest()", "496": "OCSPValidatorTest::::certExpiredAfterArchiveCutoffDateTest()", "497": "OCSPValidatorTest::::certExpiredAfterArchiveCutoffDateTest()", "498": "OCSPValidatorTest::::certExpiredAfterArchiveCutoffDateTest()", "499": "OCSPValidatorTest::::certExpiredAfterArchiveCutoffDateTest()", "500": "OCSPValidatorTest::::certExpiredAfterArchiveCutoffDateTest()", "501": "OCSPValidatorTest::::certExpiredAfterArchiveCutoffDateTest()", "503": "OCSPValidatorTest::::validateTest(java.util.Date)", "504": "OCSPValidatorTest::::validateTest(java.util.Date)", "505": "OCSPValidatorTest::::validateTest(java.util.Date)", "507": "OCSPValidatorTest::::validateTest(java.util.Date,java.util.Date,long)", "508": "OCSPValidatorTest::::validateTest(java.util.Date,java.util.Date,long)", "509": "OCSPValidatorTest::::validateTest(java.util.Date,java.util.Date,long)", "510": "OCSPValidatorTest::::validateTest(java.util.Date,java.util.Date,long)", "511": "OCSPValidatorTest::::validateTest(java.util.Date,java.util.Date,long)", "512": "OCSPValidatorTest::::validateTest(java.util.Date,java.util.Date,long)", "513": "OCSPValidatorTest::::validateTest(java.util.Date,java.util.Date,long)", "514": "OCSPValidatorTest::::validateTest(java.util.Date,java.util.Date,long)", "515": "OCSPValidatorTest::::validateTest(java.util.Date,java.util.Date,long)", "516": "OCSPValidatorTest::::validateTest(java.util.Date,java.util.Date,long)", "517": "OCSPValidatorTest::::validateTest(java.util.Date,java.util.Date,long)", "518": "OCSPValidatorTest::::validateTest(java.util.Date,java.util.Date,long)", "519": "OCSPValidatorTest::::validateTest(java.util.Date,java.util.Date,long)", "520": "OCSPValidatorTest::::validateTest(java.util.Date,java.util.Date,long)", "521": "OCSPValidatorTest::::validateTest(java.util.Date,java.util.Date,long)", "522": "OCSPValidatorTest::::validateTest(java.util.Date,java.util.Date,long)", "523": "OCSPValidatorTest::::validateTest(java.util.Date,java.util.Date,long)", "525": "OCSPValidatorTest::::validateRevokedTestMocked(java.util.Date,java.util.Date)", "526": "OCSPValidatorTest::::validateRevokedTestMocked(java.util.Date,java.util.Date)", "527": "OCSPValidatorTest::::validateRevokedTestMocked(java.util.Date,java.util.Date)", "528": "OCSPValidatorTest::::validateRevokedTestMocked(java.util.Date,java.util.Date)", "529": "OCSPValidatorTest::::validateRevokedTestMocked(java.util.Date,java.util.Date)", "530": "OCSPValidatorTest::::validateRevokedTestMocked(java.util.Date,java.util.Date)", "531": "OCSPValidatorTest::::validateRevokedTestMocked(java.util.Date,java.util.Date)", "532": "OCSPValidatorTest::::validateRevokedTestMocked(java.util.Date,java.util.Date)", "533": "OCSPValidatorTest::::validateRevokedTestMocked(java.util.Date,java.util.Date)", "534": "OCSPValidatorTest::::validateRevokedTestMocked(java.util.Date,java.util.Date)", "535": "OCSPValidatorTest::::validateRevokedTestMocked(java.util.Date,java.util.Date)", "536": "OCSPValidatorTest::::validateRevokedTestMocked(java.util.Date,java.util.Date)", "537": "OCSPValidatorTest::::validateRevokedTestMocked(java.util.Date,java.util.Date)", "538": "OCSPValidatorTest::::validateRevokedTestMocked(java.util.Date,java.util.Date)", "539": "OCSPValidatorTest::::validateRevokedTestMocked(java.util.Date,java.util.Date)", "540": "OCSPValidatorTest::::validateRevokedTestMocked(java.util.Date,java.util.Date)", "550": "OCSPValidatorTest.TestIssuingCertificateRetriever::::retrieveIssuerCertificate(java.security.cert.Certificate)", "551": "OCSPValidatorTest.TestIssuingCertificateRetriever::::retrieveIssuerCertificate(java.security.cert.Certificate)", "552": "OCSPValidatorTest.TestIssuingCertificateRetriever::::retrieveIssuerCertificate(java.security.cert.Certificate)", "553": "OCSPValidatorTest.TestIssuingCertificateRetriever::::retrieveIssuerCertificate(java.security.cert.Certificate)"}, "tests": [{"test_lines": [114, 121], "covered_lines": [75, 86, 87, 88, 89, 90, 104, 105, 112, 117, 121, 130, 135, 136, 137, 146, 147, 155, 156, 157, 160, 170, 172, 173, 185, 199, 200, 204, 207, 213, 214, 215, 220, 221, 228, 233, 237, 239, 240, 241, 251, 255]}, {"test_lines": [123, 134], "covered_lines": [75, 86, 87, 88, 89, 90, 104, 105, 112, 117, 121, 130, 135, 136, 137, 146, 147, 155, 156, 157, 160, 170, 172, 173, 185, 199, 200, 204, 207, 213, 214, 215, 220, 221, 228, 233, 237, 239, 240, 241, 251, 255]}, {"test_lines": [136, 158], "covered_lines": [75, 86, 87, 88, 89, 90, 104, 105, 106, 108]}, {"test_lines": [160, 172], "covered_lines": [75, 86, 87, 88, 89, 90, 104, 105, 112, 117, 121, 130, 135, 136, 137, 146, 147, 148, 149, 150, 151]}, {"test_lines": [175, 202], "covered_lines": [75, 86, 87, 88, 89, 90, 104, 105, 112, 113, 115]}, {"test_lines": [205, 230], "covered_lines": [75, 86, 87, 88, 89, 90, 104, 105, 112, 117, 121, 122, 124]}, {"test_lines": [232, 246], "covered_lines": [75, 86, 87, 88, 89, 90, 104, 105, 112, 117, 121, 130, 135, 136, 137, 138, 139, 141]}, {"test_lines": [248, 268], "covered_lines": [75, 86, 87, 88, 89, 90, 104, 105, 112, 117, 121, 130, 135, 136, 137, 146, 155, 156, 157, 160, 170, 172, 173, 185, 199, 200, 204, 207, 208, 213, 244, 245, 246, 247, 248, 251, 255]}, {"test_lines": [270, 283], "covered_lines": [75, 86, 87, 88, 89, 90, 104, 105, 112, 117, 121, 130, 135, 136, 137, 146, 147, 155, 156, 157, 160, 170, 178, 179, 185]}, {"test_lines": [285, 298], "covered_lines": [75, 86, 87, 88, 89, 90, 104, 105, 112, 117, 121, 130, 135, 136, 137, 146, 147, 155, 156, 157, 160, 170, 172, 173, 174, 175, 176, 185, 199, 200, 204, 207, 213, 214, 215, 220, 221, 228, 233, 237, 239, 240, 241, 251, 255]}, {"test_lines": [300, 323], "covered_lines": [75, 86, 87, 88, 89, 90, 104, 105, 112, 117, 121, 130, 135, 136, 137, 146, 147, 155, 156, 157, 160, 170, 178, 182, 185]}, {"test_lines": [325, 354], "covered_lines": [75, 86, 87, 88, 89, 90, 104, 105, 112, 117, 121, 130, 135, 136, 137, 146, 147, 155, 156, 157, 160, 170, 172, 173, 185, 199, 200, 204, 207, 213, 214, 215, 220, 221, 229, 230, 232]}, {"test_lines": [356, 377], "covered_lines": [75, 86, 87, 88, 89, 90, 104, 105, 112, 117, 121, 130, 135, 136, 137, 146, 147, 155, 156, 157, 160, 170, 172, 173, 185, 199, 200, 204, 207, 213, 214, 215, 216, 218]}, {"test_lines": [379, 399], "covered_lines": [75, 86, 87, 88, 89, 90, 104, 105, 112, 117, 121, 130, 135, 136, 137, 146, 147, 155, 156, 157, 160, 170, 172, 173, 185, 199, 200, 204, 207, 213, 214, 215, 220, 221, 228, 233, 237, 239, 240, 241, 251, 252, 253, 254, 255]}, {"test_lines": [401, 424], "covered_lines": [75, 86, 87, 88, 89, 90, 104, 105, 112, 117, 121, 130, 135, 136, 137, 146, 147, 155, 156, 157, 160, 161, 162, 164, 165, 166, 260, 261, 262, 269]}, {"test_lines": [426, 450], "covered_lines": [75, 86, 87, 88, 89, 90, 104, 105, 112, 117, 121, 130, 135, 136, 137, 146, 147, 155, 156, 157, 160, 170, 172, 173, 174, 175, 176, 185, 199, 200, 204, 207, 213, 214, 215, 220, 221, 228, 233, 237, 239, 240, 241, 251, 255]}, {"test_lines": [452, 478], "covered_lines": [75, 86, 87, 88, 89, 90, 104, 105, 112, 117, 121, 130, 135, 136, 137, 146, 147, 155, 156, 157, 160, 161, 162, 163, 164, 165, 166, 260, 261, 262, 264]}, {"test_lines": [480, 501], "covered_lines": [75, 86, 87, 88, 89, 90, 104, 105, 112, 117, 121, 130, 135, 136, 137, 146, 147, 155, 156, 157, 160, 161, 162, 163, 170, 172, 173, 185, 199, 200, 204, 207, 213, 214, 215, 220, 221, 228, 233, 237, 239, 240, 241, 251, 255, 260, 261, 262, 264]}]}, "/bernard/dataset_construction/prep/repos/itext-java/sign/src/main/java/com/itextpdf/signatures/validation/v1/RevocationDataValidator.java": {"class_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.signatures.validation.v1;\n", "\n", "import com.itextpdf.bouncycastleconnector.BouncyCastleFactoryCreator;\n", "import com.itextpdf.commons.bouncycastle.IBouncyCastleFactory;\n", "import com.itextpdf.commons.bouncycastle.cert.ocsp.IBasicOCSPResp;\n", "import com.itextpdf.commons.bouncycastle.cert.ocsp.ISingleResp;\n", "import com.itextpdf.signatures.CertificateUtil;\n", "import com.itextpdf.signatures.CrlClientOnline;\n", "import com.itextpdf.signatures.ICrlClient;\n", "import com.itextpdf.signatures.IOcspClient;\n", "import com.itextpdf.signatures.IssuingCertificateRetriever;\n", "import com.itextpdf.signatures.OID;\n", "import com.itextpdf.signatures.OcspClientBouncyCastle;\n", "import com.itextpdf.signatures.validation.v1.context.CertificateSource;\n", "import com.itextpdf.signatures.validation.v1.context.ValidationContext;\n", "import com.itextpdf.signatures.validation.v1.context.ValidatorContext;\n", "import com.itextpdf.signatures.validation.v1.report.CertificateReportItem;\n", "import com.itextpdf.signatures.validation.v1.report.ReportItem;\n", "import com.itextpdf.signatures.validation.v1.report.ReportItem.ReportItemStatus;\n", "import com.itextpdf.signatures.validation.v1.report.ValidationReport;\n", "\n", "import java.io.ByteArrayInputStream;\n", "import java.io.IOException;\n", "import java.security.GeneralSecurityException;\n", "import java.security.cert.X509CRL;\n", "import java.security.cert.X509Certificate;\n", "import java.util.ArrayList;\n", "import java.util.Collection;\n", "import java.util.Date;\n", "import java.util.HashMap;\n", "import java.util.List;\n", "import java.util.Map;\n", "import java.util.stream.Collectors;\n", "\n", "/**\n", " * Class that allows you to fetch and validate revocation data for the certificate.\n", " */\n", "public class RevocationDataValidator {\n", "    static final String REVOCATION_DATA_CHECK = \"Revocation data check.\";\n", "    static final String CRL_PARSING_ERROR = \"CRL is incorrectly formatted.\";\n", "    static final String NO_REVOCATION_DATA = \"Certificate revocation status cannot be checked: \" +\n", "            \"no revocation data available or the status cannot be determined.\";\n", "    static final String SELF_SIGNED_CERTIFICATE = \"Certificate is self-signed: it cannot be revoked.\";\n", "    static final String TRUSTED_OCSP_RESPONDER = \"Authorized OCSP Responder certificate has id-pkix-ocsp-nocheck \" +\n", "            \"extension so it is trusted by the definition and no revocation checking is performed.\";\n", "    static final String VALIDITY_ASSURED = \"Certificate is trusted due to validity assured - short term extension.\";\n", "\n", "    private static final IBouncyCastleFactory BOUNCY_CASTLE_FACTORY = BouncyCastleFactoryCreator.getFactory();\n", "\n", "    private final List<IOcspClient> ocspClients = new ArrayList<>();\n", "    private final List<ICrlClient> crlClients = new ArrayList<>();\n", "    private final SignatureValidationProperties properties;\n", "    private final IssuingCertificateRetriever certificateRetriever;\n", "    private final OCSPValidator ocspValidator;\n", "    private final CRLValidator crlValidator;\n", "\n", "    /**\n", "     * Creates new {@link RevocationDataValidator} instance to validate certificate revocation data.\n", "     *\n", "     * @param builder See {@link  ValidatorChainBuilder}\n", "     */\n", "    protected RevocationDataValidator(ValidatorChainBuilder builder) {\n", "        this.certificateRetriever = builder.getCertificateRetriever();\n", "        this.properties = builder.getProperties();\n", "        this.ocspValidator = builder.getOCSPValidator();\n", "        this.crlValidator = builder.getCRLValidator();\n", "    }\n", "\n", "    /**\n", "     * Add {@link ICrlClient} to be used for CRL responses receiving.\n", "     *\n", "     * @param crlClient {@link ICrlClient} to be used for CRL responses receiving\n", "     *\n", "     * @return same instance of {@link RevocationDataValidator}.\n", "     */\n", "    public RevocationDataValidator addCrlClient(ICrlClient crlClient) {\n", "        this.crlClients.add(crlClient);\n", "        return this;\n", "    }\n", "\n", "    /**\n", "     * Add {@link IOcspClient} to be used for OCSP responses receiving.\n", "     *\n", "     * @param ocspClient {@link IOcspClient} to be used for OCSP responses receiving\n", "     *\n", "     * @return same instance of {@link RevocationDataValidator}.\n", "     */\n", "    public RevocationDataValidator addOcspClient(IOcspClient ocspClient) {\n", "        this.ocspClients.add(ocspClient);\n", "        return this;\n", "    }\n", "\n", "    /**\n", "     * Validates revocation data (Certificate Revocation List (CRL) Responses and OCSP Responses) of the certificate.\n", "     *\n", "     * @param report         to store all the verification results\n", "     * @param context        {@link ValidationContext} the context\n", "     * @param certificate    the certificate to check revocation data for\n", "     * @param validationDate validation date to check for\n", "     */\n", "    public void validate(ValidationReport report, ValidationContext context, X509Certificate certificate,\n", "            Date validationDate) {\n", "        ValidationContext localContext = context.setValidatorContext(ValidatorContext.REVOCATION_DATA_VALIDATOR);\n", "        if (CertificateUtil.isSelfSigned(certificate)) {\n", "            report.addReportItem(new CertificateReportItem(certificate, REVOCATION_DATA_CHECK, SELF_SIGNED_CERTIFICATE,\n", "                    ReportItemStatus.INFO));\n", "            return;\n", "        }\n", "        // Check Validity Assured - Short Term extension which indicates that the validity of the certificate is assured\n", "        // because the certificate is a \"short-term certificate\".\n", "        if (CertificateUtil.getExtensionValueByOid(certificate,\n", "                OID.X509Extensions.VALIDITY_ASSURED_SHORT_TERM) != null) {\n", "            report.addReportItem(new CertificateReportItem(certificate, REVOCATION_DATA_CHECK, VALIDITY_ASSURED,\n", "                    ReportItemStatus.INFO));\n", "            return;\n", "        }\n", "        if (CertificateSource.OCSP_ISSUER == localContext.getCertificateSource()) {\n", "            // Check if Authorised OCSP Responder certificate has id-pkix-ocsp-nocheck extension, in which case we\n", "            // do not perform revocation check for it.\n", "            if (CertificateUtil.getExtensionValueByOid(certificate, BOUNCY_CASTLE_FACTORY.createOCSPObjectIdentifiers()\n", "                    .getIdPkixOcspNoCheck().getId()) != null) {\n", "                report.addReportItem(new CertificateReportItem(certificate, REVOCATION_DATA_CHECK,\n", "                        TRUSTED_OCSP_RESPONDER, ReportItemStatus.INFO));\n", "                return;\n", "            }\n", "        }\n", "\n", "        // Collect revocation data.\n", "        Map<ISingleResp, IBasicOCSPResp> ocspResponsesMap = retrieveAllOCSPResponses(localContext, certificate);\n", "        // Sort all the OCSP responses available based on the most recent revocation data.\n", "        List<ISingleResp> singleResponses = ocspResponsesMap.keySet().stream()\n", "                .sorted((o1, o2) -> o2.getThisUpdate().compareTo(o1.getThisUpdate())).collect(Collectors.toList());\n", "        List<X509CRL> crlResponses = retrieveAllCRLResponses(report, localContext, certificate);\n", "\n", "        // Try to check responderCert for revocation using provided responder OCSP/CRL clients or\n", "        // Authority Information Access for OCSP responses and CRL Distribution Points for CRL responses\n", "        // using default clients.\n", "        validateRevocationData(report, localContext, certificate, validationDate, singleResponses,\n", "                ocspResponsesMap, crlResponses);\n", "    }\n", "\n", "    private void validateRevocationData(ValidationReport report, ValidationContext context, X509Certificate certificate,\n", "            Date validationDate, List<ISingleResp> singleResponses, Map<ISingleResp, IBasicOCSPResp> ocspResponsesMap,\n", "            List<X509CRL> crlResponses) {\n", "        int i = 0;\n", "        int j = 0;\n", "        while (i < singleResponses.size() || j < crlResponses.size()) {\n", "            ValidationReport revDataValidationReport = new ValidationReport();\n", "            if (i < singleResponses.size() && (j >= crlResponses.size() ||\n", "                    singleResponses.get(i).getThisUpdate().after(crlResponses.get(j).getThisUpdate()))) {\n", "                ocspValidator.validate(revDataValidationReport,\n", "                        context, certificate, singleResponses.get(i),\n", "                        ocspResponsesMap.get(singleResponses.get(i)), validationDate);\n", "                i++;\n", "            } else {\n", "                crlValidator.validate(revDataValidationReport,\n", "                        context, certificate, crlResponses.get(j), validationDate);\n", "                j++;\n", "            }\n", "\n", "            if (ValidationReport.ValidationResult.INDETERMINATE != revDataValidationReport.getValidationResult()) {\n", "                for (ReportItem reportItem : revDataValidationReport.getLogs()) {\n", "                    report.addReportItem(reportItem);\n", "                }\n", "                return;\n", "            } else {\n", "                for (ReportItem reportItem : revDataValidationReport.getLogs()) {\n", "                    report.addReportItem(reportItem.setStatus(ReportItemStatus.INFO));\n", "                }\n", "            }\n", "        }\n", "\n", "        report.addReportItem(new CertificateReportItem(certificate, REVOCATION_DATA_CHECK, NO_REVOCATION_DATA,\n", "                ReportItemStatus.INDETERMINATE));\n", "    }\n", "\n", "    private Map<ISingleResp, IBasicOCSPResp> retrieveAllOCSPResponses(ValidationContext context,\n", "            X509Certificate certificate) {\n", "        Map<ISingleResp, IBasicOCSPResp> ocspResponsesMap = new HashMap<>();\n", "        for (IOcspClient ocspClient : ocspClients) {\n", "            byte[] basicOcspRespBytes = ocspClient.getEncoded(certificate,\n", "                    (X509Certificate) certificateRetriever.retrieveIssuerCertificate(certificate), null);\n", "            if (basicOcspRespBytes != null) {\n", "                try {\n", "                    IBasicOCSPResp basicOCSPResp = BOUNCY_CASTLE_FACTORY.createBasicOCSPResp(\n", "                            BOUNCY_CASTLE_FACTORY.createBasicOCSPResponse(BOUNCY_CASTLE_FACTORY.createASN1Primitive(\n", "                                    basicOcspRespBytes)));\n", "                    fillOcspResponsesMap(ocspResponsesMap, basicOCSPResp);\n", "                } catch (IOException ignored) {\n", "                    // Ignore exception.\n", "                }\n", "            }\n", "        }\n", "        SignatureValidationProperties.OnlineFetching onlineFetching = properties.getRevocationOnlineFetching(\n", "                context.setValidatorContext(ValidatorContext.OCSP_VALIDATOR));\n", "        if (SignatureValidationProperties.OnlineFetching.ALWAYS_FETCH == onlineFetching ||\n", "                (SignatureValidationProperties.OnlineFetching.FETCH_IF_NO_OTHER_DATA_AVAILABLE == onlineFetching\n", "                        && ocspResponsesMap.isEmpty())) {\n", "            IBasicOCSPResp basicOCSPResp = new OcspClientBouncyCastle(null).getBasicOCSPResp(certificate,\n", "                    (X509Certificate) certificateRetriever.retrieveIssuerCertificate(certificate), null);\n", "            fillOcspResponsesMap(ocspResponsesMap, basicOCSPResp);\n", "        }\n", "        return ocspResponsesMap;\n", "    }\n", "\n", "    private void fillOcspResponsesMap(Map<ISingleResp, IBasicOCSPResp> ocspResponsesMap, IBasicOCSPResp basicOCSPResp) {\n", "        if (basicOCSPResp != null) {\n", "            // Getting the responses.\n", "            ISingleResp[] singleResponses = basicOCSPResp.getResponses();\n", "            for (ISingleResp singleResponse : singleResponses) {\n", "                ocspResponsesMap.put(singleResponse, basicOCSPResp);\n", "            }\n", "        }\n", "    }\n", "\n", "    private List<X509CRL> retrieveAllCRLResponses(ValidationReport report, ValidationContext context,\n", "            X509Certificate certificate) {\n", "        List<X509CRL> crlResponses = new ArrayList<>();\n", "        for (ICrlClient crlClient : crlClients) {\n", "            crlResponses.addAll(retrieveAllCRLResponsesUsingClient(report, certificate, crlClient));\n", "        }\n", "        SignatureValidationProperties.OnlineFetching onLineFetching = properties.getRevocationOnlineFetching(\n", "                context.setValidatorContext(ValidatorContext.CRL_VALIDATOR));\n", "        if (SignatureValidationProperties.OnlineFetching.ALWAYS_FETCH == onLineFetching ||\n", "                (SignatureValidationProperties.OnlineFetching.FETCH_IF_NO_OTHER_DATA_AVAILABLE == onLineFetching &&\n", "                        crlResponses.isEmpty())) {\n", "            crlResponses.addAll(retrieveAllCRLResponsesUsingClient(report, certificate, new CrlClientOnline()));\n", "        }\n", "        // Sort all the CRL responses available based on the most recent revocation data.\n", "        return crlResponses.stream().sorted((o1, o2) -> o2.getThisUpdate().compareTo(o1.getThisUpdate()))\n", "                .collect(Collectors.toList());\n", "    }\n", "\n", "    private List<X509CRL> retrieveAllCRLResponsesUsingClient(ValidationReport report, X509Certificate certificate,\n", "            ICrlClient crlClient) {\n", "        List<X509CRL> crlResponses = new ArrayList<>();\n", "        try {\n", "            Collection<byte[]> crlBytesCollection = crlClient.getEncoded(certificate, null);\n", "            for (byte[] crlBytes : crlBytesCollection) {\n", "                try {\n", "                    crlResponses.add((X509CRL) CertificateUtil.parseCrlFromStream(\n", "                            new ByteArrayInputStream(crlBytes)));\n", "                } catch (Exception ignored) {\n", "                    // CRL parsing error.\n", "                    report.addReportItem(new CertificateReportItem(certificate, REVOCATION_DATA_CHECK,\n", "                            CRL_PARSING_ERROR, ReportItemStatus.INFO));\n", "                }\n", "            }\n", "        } catch (GeneralSecurityException ignored) {\n", "            // Ignore exception.\n", "        }\n", "        return crlResponses;\n", "    }\n", "}\n"], "test_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.signatures.validation.v1;\n", "\n", "import com.itextpdf.bouncycastleconnector.BouncyCastleFactoryCreator;\n", "import com.itextpdf.commons.bouncycastle.IBouncyCastleFactory;\n", "import com.itextpdf.commons.bouncycastle.operator.AbstractOperatorCreationException;\n", "import com.itextpdf.commons.bouncycastle.pkcs.AbstractPKCSException;\n", "import com.itextpdf.commons.utils.DateTimeUtil;\n", "import com.itextpdf.signatures.ICrlClient;\n", "import com.itextpdf.signatures.IssuingCertificateRetriever;\n", "import com.itextpdf.signatures.testutils.PemFileHelper;\n", "import com.itextpdf.signatures.testutils.TimeTestUtil;\n", "import com.itextpdf.signatures.testutils.builder.TestCrlBuilder;\n", "import com.itextpdf.signatures.testutils.builder.TestOcspResponseBuilder;\n", "import com.itextpdf.signatures.testutils.client.TestCrlClientWrapper;\n", "import com.itextpdf.signatures.testutils.client.TestOcspClientWrapper;\n", "import com.itextpdf.signatures.testutils.client.TestCrlClient;\n", "import com.itextpdf.signatures.testutils.client.TestOcspClient;\n", "import com.itextpdf.signatures.validation.v1.context.CertificateSource;\n", "import com.itextpdf.signatures.validation.v1.context.CertificateSources;\n", "import com.itextpdf.signatures.validation.v1.context.TimeBasedContext;\n", "import com.itextpdf.signatures.validation.v1.context.TimeBasedContexts;\n", "import com.itextpdf.signatures.validation.v1.context.ValidationContext;\n", "import com.itextpdf.signatures.validation.v1.context.ValidatorContext;\n", "import com.itextpdf.signatures.validation.v1.context.ValidatorContexts;\n", "import com.itextpdf.signatures.validation.v1.mocks.MockCrlValidator;\n", "import com.itextpdf.signatures.validation.v1.mocks.MockOCSPValidator;\n", "import com.itextpdf.signatures.validation.v1.mocks.MockSignatureValidationProperties;\n", "import com.itextpdf.signatures.validation.v1.report.ReportItem;\n", "import com.itextpdf.signatures.validation.v1.report.ValidationReport;\n", "import com.itextpdf.test.ExtendedITextTest;\n", "import com.itextpdf.test.annotations.type.BouncyCastleUnitTest;\n", "import org.junit.Assert;\n", "import org.junit.Before;\n", "import org.junit.BeforeClass;\n", "import org.junit.Test;\n", "import org.junit.experimental.categories.Category;\n", "\n", "import java.io.IOException;\n", "import java.security.GeneralSecurityException;\n", "import java.security.PrivateKey;\n", "import java.security.Security;\n", "import java.security.cert.CertificateEncodingException;\n", "import java.security.cert.CertificateException;\n", "import java.security.cert.X509Certificate;\n", "import java.time.Duration;\n", "import java.util.Collection;\n", "import java.util.Collections;\n", "import java.util.Date;\n", "\n", "@Category(BouncyCastleUnitTest.class)\n", "public class RevocationDataValidatorTest extends ExtendedITextTest {\n", "    private static final IBouncyCastleFactory FACTORY = BouncyCastleFactoryCreator.getFactory();\n", "    private static final String SOURCE_FOLDER =\n", "            \"./src/test/resources/com/itextpdf/signatures/validation/v1/RevocationDataValidatorTest/\";\n", "    private static final char[] PASSWORD = \"testpassphrase\".toCharArray();\n", "    private static X509Certificate caCert;\n", "    private static PrivateKey caPrivateKey;\n", "    private static X509Certificate checkCert;\n", "    private static X509Certificate responderCert;\n", "    private static PrivateKey ocspRespPrivateKey;\n", "    private static X509Certificate trustedOcspResponderCert;\n", "\n", "    private IssuingCertificateRetriever certificateRetriever;\n", "    private SignatureValidationProperties parameters;\n", "    private final ValidationContext baseContext = new ValidationContext(ValidatorContext.SIGNATURE_VALIDATOR,\n", "            CertificateSource.SIGNER_CERT, TimeBasedContext.PRESENT);\n", "    private ValidatorChainBuilder validatorChainBuilder;\n", "    private MockCrlValidator mockCrlValidator;\n", "    private MockOCSPValidator mockOCSPValidator;\n", "    private MockSignatureValidationProperties mockParameters;\n", "\n", "    @BeforeClass\n", "    public static void before()\n", "            throws CertificateException, IOException, AbstractOperatorCreationException, AbstractPKCSException {\n", "        Security.addProvider(FACTORY.getProvider());\n", "\n", "        String rootCertFileName = SOURCE_FOLDER + \"rootCert.pem\";\n", "        String checkCertFileName = SOURCE_FOLDER + \"signCert.pem\";\n", "        String ocspResponderCertFileName = SOURCE_FOLDER + \"ocspResponderCert.pem\";\n", "\n", "        caCert = (X509Certificate) PemFileHelper.readFirstChain(rootCertFileName)[0];\n", "        caPrivateKey = PemFileHelper.readFirstKey(rootCertFileName, PASSWORD);\n", "        checkCert = (X509Certificate) PemFileHelper.readFirstChain(checkCertFileName)[0];\n", "        responderCert = (X509Certificate) PemFileHelper.readFirstChain(ocspResponderCertFileName)[0];\n", "        ocspRespPrivateKey = PemFileHelper.readFirstKey(ocspResponderCertFileName, PASSWORD);\n", "\n", "        trustedOcspResponderCert = (X509Certificate) PemFileHelper.readFirstChain(ocspResponderCertFileName)[0];\n", "    }\n", "\n", "    @Before\n", "    public void setUp() {\n", "        certificateRetriever = new IssuingCertificateRetriever();\n", "        parameters = new SignatureValidationProperties();\n", "        mockCrlValidator = new MockCrlValidator();\n", "        mockOCSPValidator = new MockOCSPValidator();\n", "        mockParameters = new MockSignatureValidationProperties(parameters);\n", "        validatorChainBuilder = new ValidatorChainBuilder()\n", "                .withIssuingCertificateRetriever(certificateRetriever)\n", "                .withSignatureValidationProperties(mockParameters)\n", "                .withCRLValidator(mockCrlValidator)\n", "                .withOCSPValidator(mockOCSPValidator);\n", "    }\n", "\n", "    @Test\n", "    public void basicOCSPValidatorUsageTest() throws GeneralSecurityException, IOException {\n", "        Date checkDate = TimeTestUtil.TEST_DATE_TIME;\n", "        TestOcspResponseBuilder builder = new TestOcspResponseBuilder(responderCert, ocspRespPrivateKey);\n", "        builder.setProducedAt(DateTimeUtil.addDaysToDate(checkDate, 5));\n", "        builder.setThisUpdate(DateTimeUtil.getCalendar(DateTimeUtil.addDaysToDate(checkDate, 5)));\n", "        builder.setNextUpdate(DateTimeUtil.getCalendar(DateTimeUtil.addDaysToDate(checkDate, 10)));\n", "        TestOcspClientWrapper ocspClient = new TestOcspClientWrapper(new TestOcspClient().addBuilderForCertIssuer(caCert, builder));\n", "\n", "        ValidationReport report = new ValidationReport();\n", "        certificateRetriever.addTrustedCertificates(Collections.singletonList(caCert));\n", "        mockParameters.addRevocationOnlineFetchingResponse(SignatureValidationProperties.OnlineFetching.NEVER_FETCH);\n", "        mockParameters.addRevocationOnlineFetchingResponse(SignatureValidationProperties.OnlineFetching.NEVER_FETCH);\n", "        mockParameters.addFreshnessResponse(Duration.ofDays(-2));\n", "        RevocationDataValidator validator = validatorChainBuilder.buildRevocationDataValidator();\n", "\n", "        validator.addOcspClient(ocspClient);\n", "\n", "        ReportItem reportItem = new ReportItem(\"validator\", \"message\",\n", "                ReportItem.ReportItemStatus.INFO);\n", "        mockOCSPValidator.onCallDo(c -> c.report.addReportItem(reportItem));\n", "\n", "\n", "        validator.validate(report, baseContext, checkCert, checkDate);\n", "\n", "        AssertValidationReport.assertThat(report, a -> a\n", "                .hasStatus(ValidationReport.ValidationResult.VALID)\n", "                // the logitem from the OCSP valdiation should be copied to the final report\n", "                .hasNumberOfLogs(1)\n", "                .hasLogItem(reportItem));\n", "        // there should be one call per ocspClient\n", "        Assert.assertEquals(1, ocspClient.getCalls().size());\n", "\n", "        // There was only one ocsp response so we expect 1 call to the ocsp validator\n", "        Assert.assertEquals(1,mockOCSPValidator.calls.size());\n", "\n", "        // the validationDate should be passed as is\n", "        Assert.assertEquals(checkDate, mockOCSPValidator.calls.get(0).validationDate);\n", "\n", "        // the response should be passed as is\n", "        Assert.assertEquals(ocspClient.getCalls().get(0).response , mockOCSPValidator.calls.get(0).ocspResp);\n", "\n", "        // There should be a new report generated and any logs must be copied the actual report.\n", "        Assert.assertNotEquals(report, mockOCSPValidator.calls.get(0).report);\n", "    }\n", "\n", "    @Test\n", "    public void basicCrlValidatorUsageTest() throws GeneralSecurityException {\n", "        Date checkDate = TimeTestUtil.TEST_DATE_TIME;\n", "        Date revocationDate = DateTimeUtil.addDaysToDate(checkDate, -1);\n", "        TestCrlBuilder builder = new TestCrlBuilder(caCert, caPrivateKey, checkDate);\n", "        builder.setNextUpdate(DateTimeUtil.addDaysToDate(checkDate, 10));\n", "        builder.addCrlEntry(checkCert, revocationDate, FACTORY.createCRLReason().getKeyCompromise());\n", "        TestCrlClientWrapper crlClient = new TestCrlClientWrapper(new TestCrlClient().addBuilderForCertIssuer(builder));\n", "\n", "        ValidationReport report = new ValidationReport();\n", "        certificateRetriever.addTrustedCertificates(Collections.singletonList(caCert));\n", "\n", "        mockParameters.addRevocationOnlineFetchingResponse(SignatureValidationProperties.OnlineFetching.NEVER_FETCH);\n", "        mockParameters.addRevocationOnlineFetchingResponse(SignatureValidationProperties.OnlineFetching.NEVER_FETCH);\n", "        mockParameters.addFreshnessResponse(Duration.ofDays(0));\n", "\n", "        ReportItem reportItem = new ReportItem(\"validator\", \"message\",\n", "                ReportItem.ReportItemStatus.INFO);\n", "        mockCrlValidator.onCallDo(c -> c.report.addReportItem(reportItem));\n", "\n", "         RevocationDataValidator validator = validatorChainBuilder.buildRevocationDataValidator()\n", "                .addCrlClient(crlClient);\n", "        validator.validate(report, baseContext, checkCert, checkDate);\n", "\n", "        AssertValidationReport.assertThat(report, a -> a\n", "                .hasNumberOfFailures(0)\n", "                // the logitem from the CRL valdiation should be copied to the final report\n", "                .hasNumberOfLogs(1)\n", "                .hasLogItem(reportItem));\n", "        // there should be one call per CrlClient\n", "        Assert.assertEquals(1, crlClient.getCalls().size());\n", "        // since there was one response there should be one validator call\n", "        Assert.assertEquals(1 , mockCrlValidator.calls.size());\n", "        Assert.assertEquals(checkCert, mockCrlValidator.calls.get(0).certificate);\n", "        Assert.assertEquals(checkDate, mockCrlValidator.calls.get(0).validationDate);\n", "        // There should be a new report generated and any logs must be copied the actual report.\n", "        Assert.assertNotEquals(report, mockCrlValidator.calls.get(0).report);\n", "        Assert.assertEquals(crlClient.getCalls().get(0).responses.get(0), mockCrlValidator.calls.get(0).crl);\n", "    }\n", "\n", "    @Test\n", "    public void crlResponseOrderingTest() throws CertificateEncodingException {\n", "        Date checkDate = TimeTestUtil.TEST_DATE_TIME;\n", "\n", "        Date thisUpdate1 = DateTimeUtil.addDaysToDate(checkDate, -2);\n", "        TestCrlBuilder builder1 = new TestCrlBuilder(caCert, caPrivateKey, thisUpdate1);\n", "        builder1.setNextUpdate(DateTimeUtil.addDaysToDate(checkDate, -2));\n", "        TestCrlClientWrapper crlClient1 = new TestCrlClientWrapper(\n", "                new TestCrlClient().addBuilderForCertIssuer(builder1));\n", "\n", "        Date thisUpdate2 = checkDate;\n", "        TestCrlBuilder builder2 = new TestCrlBuilder(caCert, caPrivateKey, thisUpdate2);\n", "        builder2.setNextUpdate(checkDate);\n", "        TestCrlClientWrapper crlClient2 =new TestCrlClientWrapper(\n", "                new TestCrlClient().addBuilderForCertIssuer(builder2));\n", "\n", "        Date thisUpdate3 = DateTimeUtil.addDaysToDate(checkDate, +2);\n", "        TestCrlBuilder builder3 = new TestCrlBuilder(caCert, caPrivateKey, thisUpdate3);\n", "        builder3.setNextUpdate(DateTimeUtil.addDaysToDate(checkDate, -2));\n", "        TestCrlClientWrapper crlClient3 =new TestCrlClientWrapper(\n", "                new TestCrlClient().addBuilderForCertIssuer(builder3));\n", "\n", "        RevocationDataValidator validator = validatorChainBuilder.buildRevocationDataValidator()\n", "                .addCrlClient(crlClient1)\n", "                .addCrlClient(crlClient2)\n", "                .addCrlClient(crlClient3);\n", "\n", "        mockCrlValidator.onCallDo(c -> c.report.addReportItem(new ReportItem(\"test\", \"test\", ReportItem.ReportItemStatus.INDETERMINATE)));\n", "\n", "        ValidationReport report = new ValidationReport();\n", "        validator.validate(report, baseContext, checkCert, checkDate);\n", "\n", "        Assert.assertEquals(crlClient3.getCalls().get(0).responses.get(0), mockCrlValidator.calls.get(0).crl);\n", "        Assert.assertEquals(crlClient2.getCalls().get(0).responses.get(0), mockCrlValidator.calls.get(1).crl);\n", "        Assert.assertEquals(crlClient1.getCalls().get(0).responses.get(0), mockCrlValidator.calls.get(2).crl);\n", "    }\n", "\n", "    @Test\n", "    public void ocspResponseOrderingTest() throws GeneralSecurityException, IOException {\n", "        Date checkDate = TimeTestUtil.TEST_DATE_TIME;\n", "\n", "        TestOcspResponseBuilder builder1 = new TestOcspResponseBuilder(responderCert, ocspRespPrivateKey);\n", "        builder1.setProducedAt(checkDate);\n", "        builder1.setThisUpdate(DateTimeUtil.getCalendar(checkDate));\n", "        builder1.setNextUpdate(DateTimeUtil.getCalendar(DateTimeUtil.addDaysToDate(checkDate, 5)));\n", "        TestOcspClientWrapper ocspClient1 =  new TestOcspClientWrapper(\n", "                new TestOcspClient().addBuilderForCertIssuer(caCert, builder1));\n", "\n", "        TestOcspResponseBuilder builder2 = new TestOcspResponseBuilder(responderCert, ocspRespPrivateKey);\n", "        builder2.setProducedAt(DateTimeUtil.addDaysToDate(checkDate, 5));\n", "        builder2.setThisUpdate(DateTimeUtil.getCalendar(DateTimeUtil.addDaysToDate(checkDate, 5)));\n", "        builder2.setNextUpdate(DateTimeUtil.getCalendar(DateTimeUtil.addDaysToDate(checkDate, 10)));\n", "        TestOcspClientWrapper ocspClient2 = new TestOcspClientWrapper(\n", "                new TestOcspClient().addBuilderForCertIssuer(caCert, builder2));\n", "\n", "        TestOcspResponseBuilder builder3 = new TestOcspResponseBuilder(responderCert, ocspRespPrivateKey);\n", "        builder3.setProducedAt(DateTimeUtil.addDaysToDate(checkDate, 2));\n", "        builder3.setThisUpdate(DateTimeUtil.getCalendar(DateTimeUtil.addDaysToDate(checkDate, 2)));\n", "        builder3.setNextUpdate(DateTimeUtil.getCalendar(DateTimeUtil.addDaysToDate(checkDate, 8)));\n", "        TestOcspClientWrapper ocspClient3 = new TestOcspClientWrapper(\n", "                new TestOcspClient().addBuilderForCertIssuer(caCert, builder3));\n", "\n", "        mockOCSPValidator.onCallDo(c -> c.report.addReportItem(\n", "                new ReportItem(\"\",\"\", ReportItem.ReportItemStatus.INDETERMINATE)));\n", "\n", "        ValidationReport report = new ValidationReport();\n", "        certificateRetriever.addTrustedCertificates(Collections.singletonList(caCert));\n", "\n", "        mockParameters.addRevocationOnlineFetchingResponse(SignatureValidationProperties .OnlineFetching.NEVER_FETCH)\n", "                .addFreshnessResponse(Duration.ofDays(-2));\n", "        RevocationDataValidator validator = validatorChainBuilder.buildRevocationDataValidator()\n", "                .addOcspClient(ocspClient1)\n", "                .addOcspClient(ocspClient2)\n", "                .addOcspClient(ocspClient3);\n", "\n", "        validator.validate(report, baseContext, checkCert, checkDate);\n", "\n", "        Assert.assertEquals(ocspClient2.getCalls().get(0).response, mockOCSPValidator.calls.get(0).ocspResp);\n", "        Assert.assertEquals(ocspClient3.getCalls().get(0).response, mockOCSPValidator.calls.get(1).ocspResp);\n", "        Assert.assertEquals(ocspClient1.getCalls().get(0).response, mockOCSPValidator.calls.get(2).ocspResp);\n", "\n", "    }\n", "\n", "    @Test\n", "    public void validityAssuredTest() throws CertificateException, IOException {\n", "        String checkCertFileName = SOURCE_FOLDER + \"validityAssuredSigningCert.pem\";\n", "        X509Certificate certificate = (X509Certificate) PemFileHelper.readFirstChain(checkCertFileName)[0];\n", "        Date checkDate = TimeTestUtil.TEST_DATE_TIME;\n", "\n", "        ValidationReport report = new ValidationReport();\n", "        RevocationDataValidator validator = validatorChainBuilder.buildRevocationDataValidator();\n", "\n", "        validator.validate(report, baseContext, certificate, checkDate);\n", "\n", "        AssertValidationReport.assertThat(report, a -> a\n", "                .hasStatus(ValidationReport.ValidationResult.VALID)\n", "                .hasLogItem(la -> la\n", "                    .withCheckName(RevocationDataValidator.REVOCATION_DATA_CHECK)\n", "                    .withMessage(RevocationDataValidator.VALIDITY_ASSURED)\n", "                    .withCertificate(certificate)\n", "                   ));\n", "    }\n", "\n", "    @Test\n", "    public void selfSignedCertificateIsNotValidatedTest() {\n", "        Date checkDate = TimeTestUtil.TEST_DATE_TIME;\n", "\n", "        ValidationReport report = new ValidationReport();\n", "        RevocationDataValidator validator = validatorChainBuilder.buildRevocationDataValidator();\n", "\n", "        validator.validate(report, baseContext, caCert, checkDate);\n", "\n", "        AssertValidationReport.assertThat(report, a -> a\n", "                .hasStatus(ValidationReport.ValidationResult.VALID)\n", "                .hasLogItem(la -> la\n", "                        .withCheckName(RevocationDataValidator.REVOCATION_DATA_CHECK)\n", "                        .withMessage(RevocationDataValidator.SELF_SIGNED_CERTIFICATE)\n", "                        .withCertificate(caCert)\n", "                ));\n", "    }\n", "\n", "    @Test\n", "    public void nocheckExtensionShouldNotFurtherValdiateTest() {\n", "        ValidationReport report = new ValidationReport();\n", "\n", "        parameters.setRevocationOnlineFetching(ValidatorContexts.all(), CertificateSources.all(),\n", "                        TimeBasedContexts.all(), SignatureValidationProperties .OnlineFetching.NEVER_FETCH);\n", "        RevocationDataValidator validator = validatorChainBuilder.buildRevocationDataValidator();\n", "\n", "        validator.validate(report, baseContext.setCertificateSource(CertificateSource.OCSP_ISSUER),\n", "                trustedOcspResponderCert, TimeTestUtil.TEST_DATE_TIME);\n", "\n", "        AssertValidationReport.assertThat(report, a -> a\n", "                .hasLogItem(la -> la\n", "                        .withStatus(ReportItem.ReportItemStatus.INFO)\n", "                        .withCheckName(RevocationDataValidator.REVOCATION_DATA_CHECK)\n", "                        .withMessage(RevocationDataValidator.TRUSTED_OCSP_RESPONDER)\n", "                ));\n", "    }\n", "\n", "    @Test\n", "    public void noRevocationDataTest() {\n", "        ValidationReport report = new ValidationReport();\n", "\n", "        parameters.setRevocationOnlineFetching(ValidatorContexts.all(), CertificateSources.all(),\n", "                        TimeBasedContexts.all(), SignatureValidationProperties .OnlineFetching.NEVER_FETCH)\n", "                .setFreshness(ValidatorContexts.all(), CertificateSources.all(),TimeBasedContexts.all(),\n", "                        Duration.ofDays(-2));\n", "        RevocationDataValidator validator = validatorChainBuilder.buildRevocationDataValidator();\n", "\n", "        validator.validate(report, baseContext, checkCert, TimeTestUtil.TEST_DATE_TIME);\n", "\n", "        AssertValidationReport.assertThat(report, a -> a\n", "                .hasLogItem(la -> la\n", "                    .withStatus(ReportItem.ReportItemStatus.INDETERMINATE)\n", "                    .withCheckName(RevocationDataValidator.REVOCATION_DATA_CHECK)\n", "                    .withMessage(RevocationDataValidator.NO_REVOCATION_DATA)\n", "                   ));\n", "    }\n", "\n", "    @Test\n", "    public void tryFetchRevocationDataOnlineTest() {\n", "        ValidationReport report = new ValidationReport();\n", "        parameters.setRevocationOnlineFetching(ValidatorContexts.all(), CertificateSources.all(),\n", "                        TimeBasedContexts.all(), SignatureValidationProperties .OnlineFetching.FETCH_IF_NO_OTHER_DATA_AVAILABLE)\n", "                .setFreshness(ValidatorContexts.all(), CertificateSources.all(),TimeBasedContexts.all(),\n", "                        Duration.ofDays(-2));\n", "        RevocationDataValidator validator = validatorChainBuilder.buildRevocationDataValidator();\n", "        validator.validate(report, baseContext, checkCert, TimeTestUtil.TEST_DATE_TIME);\n", "\n", "        AssertValidationReport.assertThat(report, a -> a\n", "                .hasStatus(ValidationReport.ValidationResult.INDETERMINATE)\n", "                    .hasLogItem(la -> la.withCheckName(RevocationDataValidator.REVOCATION_DATA_CHECK)\n", "                    .withMessage(RevocationDataValidator.NO_REVOCATION_DATA)\n", "                   ));\n", "    }\n", "\n", "    @Test\n", "    public void crlEncodingErrorTest() throws Exception {\n", "        byte[] crl = new TestCrlBuilder(caCert,  caPrivateKey).makeCrl();\n", "        crl[5] = 0;\n", "        ValidationReport report = new ValidationReport();\n", "        parameters.setRevocationOnlineFetching(ValidatorContexts.all(), CertificateSources.all(),\n", "                        TimeBasedContexts.all(), SignatureValidationProperties .OnlineFetching.NEVER_FETCH)\n", "                .setFreshness(ValidatorContexts.all(), CertificateSources.all(),TimeBasedContexts.all(),\n", "                        Duration.ofDays(-2));\n", "        parameters.setFreshness(ValidatorContexts.all(), CertificateSources.all(),\n", "                TimeBasedContexts.all(),Duration.ofDays(2));\n", "        RevocationDataValidator validator = validatorChainBuilder.buildRevocationDataValidator();\n", "        validator.addCrlClient(new ICrlClient() {\n", "                    @Override\n", "                    public Collection<byte[]> getEncoded(X509Certificate checkCert, String url) {\n", "                        return Collections.singletonList(crl);\n", "                    }\n", "                })\n", "                .validate(report, baseContext, checkCert, TimeTestUtil.TEST_DATE_TIME);\n", "\n", "        AssertValidationReport.assertThat(report, a -> a\n", "                .hasStatus(ValidationReport.ValidationResult.INDETERMINATE)\n", "                .hasLogItem(la -> la\n", "                    .withCheckName(RevocationDataValidator.REVOCATION_DATA_CHECK)\n", "                    .withMessage(RevocationDataValidator.CRL_PARSING_ERROR)\n", "                   )\n", "                .hasLogItem(la -> la\n", "                    .withCheckName(RevocationDataValidator.REVOCATION_DATA_CHECK)\n", "                    .withMessage(RevocationDataValidator.NO_REVOCATION_DATA)\n", "                   ));\n", "\n", "    }\n", "\n", "    @Test\n", "    public void sortResponsesTest() throws GeneralSecurityException, IOException {\n", "        Date checkDate = TimeTestUtil.TEST_DATE_TIME;\n", "\n", "        // The oldest one, but the only one valid.\n", "        TestOcspResponseBuilder ocspBuilder1 = new TestOcspResponseBuilder(responderCert, ocspRespPrivateKey);\n", "        ocspBuilder1.setProducedAt(checkDate);\n", "        ocspBuilder1.setThisUpdate(DateTimeUtil.getCalendar(checkDate));\n", "        ocspBuilder1.setNextUpdate(DateTimeUtil.getCalendar(DateTimeUtil.addDaysToDate(checkDate, 3)));\n", "        TestOcspClientWrapper ocspClient1 = new TestOcspClientWrapper(\n", "                new TestOcspClient().addBuilderForCertIssuer(caCert, ocspBuilder1));\n", "\n", "        TestOcspResponseBuilder ocspBuilder2 = new TestOcspResponseBuilder(responderCert, ocspRespPrivateKey);\n", "        ocspBuilder2.setProducedAt(DateTimeUtil.addDaysToDate(checkDate, 3));\n", "        ocspBuilder2.setThisUpdate(DateTimeUtil.getCalendar(DateTimeUtil.addDaysToDate(checkDate, 3)));\n", "        ocspBuilder2.setNextUpdate(DateTimeUtil.getCalendar(DateTimeUtil.addDaysToDate(checkDate, 5)));\n", "        ocspBuilder2.setCertificateStatus(FACTORY.createUnknownStatus());\n", "        TestOcspClientWrapper ocspClient2 = new TestOcspClientWrapper(\n", "                new TestOcspClient().addBuilderForCertIssuer(caCert, ocspBuilder2));\n", "\n", "        TestOcspResponseBuilder ocspBuilder3 = new TestOcspResponseBuilder(responderCert, ocspRespPrivateKey);\n", "        ocspBuilder3.setProducedAt(DateTimeUtil.addDaysToDate(checkDate, 5));\n", "        ocspBuilder3.setThisUpdate(DateTimeUtil.getCalendar(DateTimeUtil.addDaysToDate(checkDate, 5)));\n", "        ocspBuilder3.setNextUpdate(DateTimeUtil.getCalendar(DateTimeUtil.addDaysToDate(checkDate, 10)));\n", "        ocspBuilder3.setCertificateStatus(FACTORY.createUnknownStatus());\n", "        TestOcspClientWrapper ocspClient3 = new TestOcspClientWrapper(\n", "                new TestOcspClient().addBuilderForCertIssuer(caCert, ocspBuilder3));\n", "\n", "        TestCrlBuilder crlBuilder1 = new TestCrlBuilder(caCert, caPrivateKey, checkDate);\n", "        crlBuilder1.setNextUpdate(DateTimeUtil.addDaysToDate(checkDate, 2));\n", "\n", "        TestCrlBuilder crlBuilder2 = new TestCrlBuilder(caCert, caPrivateKey, DateTimeUtil.addDaysToDate(checkDate, 2));\n", "        crlBuilder2.setNextUpdate(DateTimeUtil.addDaysToDate(checkDate, 5));\n", "        TestCrlClientWrapper crlClient = new TestCrlClientWrapper(new TestCrlClient()\n", "                .addBuilderForCertIssuer(crlBuilder1)\n", "                .addBuilderForCertIssuer(crlBuilder2));\n", "\n", "        ValidationReport report = new ValidationReport();\n", "        certificateRetriever.addTrustedCertificates(Collections.singletonList(caCert));\n", "\n", "        parameters.setRevocationOnlineFetching(ValidatorContexts.all(), CertificateSources.all(),\n", "                        TimeBasedContexts.all(), SignatureValidationProperties .OnlineFetching.NEVER_FETCH)\n", "                .setFreshness(ValidatorContexts.of(ValidatorContext.CRL_VALIDATOR), CertificateSources.all(),\n", "                        TimeBasedContexts.all(), Duration.ofDays(-5));\n", "        RevocationDataValidator validator = validatorChainBuilder.buildRevocationDataValidator()\n", "                .addCrlClient(crlClient)\n", "                .addOcspClient(ocspClient1)\n", "                .addOcspClient(ocspClient2)\n", "                .addOcspClient(ocspClient3);\n", "\n", "        mockCrlValidator.onCallDo(c -> {\n", "                c.report.addReportItem(new ReportItem(\"1\",\"2\", ReportItem.ReportItemStatus.INDETERMINATE));\n", "                try {\n", "                    Thread.sleep(10);\n", "                } catch (InterruptedException e) {}\n", "        });\n", "        mockOCSPValidator.onCallDo(c -> {\n", "            c.report.addReportItem(new ReportItem(\"1\",\"2\", ReportItem.ReportItemStatus.INDETERMINATE));\n", "            try {\n", "                Thread.sleep(10);\n", "            } catch (InterruptedException e) {}\n", "        });\n", "        validator.validate(report, baseContext, checkCert, checkDate);\n", "\n", "        Assert.assertTrue (mockOCSPValidator.calls.get(0).timeStamp.before(mockOCSPValidator.calls.get(1).timeStamp));\n", "        Assert.assertTrue (mockOCSPValidator.calls.get(1).timeStamp.before(mockCrlValidator.calls.get(0).timeStamp));\n", "        Assert.assertTrue (mockCrlValidator.calls.get(0).timeStamp.before( mockCrlValidator.calls.get(1).timeStamp));\n", "        Assert.assertTrue (mockCrlValidator.calls.get(1).timeStamp.before( mockOCSPValidator.calls.get(2).timeStamp));\n", "\n", "        Assert.assertEquals(ocspClient1.getCalls().get(0).response, mockOCSPValidator.calls.get(2).ocspResp);\n", "        Assert.assertEquals(ocspClient2.getCalls().get(0).response, mockOCSPValidator.calls.get(1).ocspResp);\n", "        Assert.assertEquals(ocspClient3.getCalls().get(0).response, mockOCSPValidator.calls.get(0).ocspResp);\n", "        Assert.assertEquals(crlClient.getCalls().get(0).responses.get(0), mockCrlValidator.calls.get(1).crl);\n", "        Assert.assertEquals(crlClient.getCalls().get(0).responses.get(1), mockCrlValidator.calls.get(0).crl);\n", "    }\n", "}\n"], "method_lines_dic": {"RevocationDataValidator::::addCrlClient(com.itextpdf.signatures.ICrlClient)": [98, 101], "RevocationDataValidator::::addOcspClient(com.itextpdf.signatures.IOcspClient)": [110, 113], "RevocationDataValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)": [123, 162], "RevocationDataValidator::::retrieveAllOCSPResponses(com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)": [199, 226], "RevocationDataValidator::::retrieveAllCRLResponses(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)": [238, 254], "RevocationDataValidator::::retrieveAllCRLResponsesUsingClient(com.itextpdf.signatures.validation.v1.report.ValidationReport,java.security.cert.X509Certificate,com.itextpdf.signatures.ICrlClient)": [256, 275]}, "test_method_lines_dic": {"RevocationDataValidatorTest::::before()": [94, 110], "RevocationDataValidatorTest::::setUp()": [112, 124], "RevocationDataValidatorTest::::basicOCSPValidatorUsageTest()": [126, 170], "RevocationDataValidatorTest::::basicCrlValidatorUsageTest()": [172, 210], "RevocationDataValidatorTest::::crlResponseOrderingTest()": [212, 247], "RevocationDataValidatorTest::::ocspResponseOrderingTest()": [249, 293], "RevocationDataValidatorTest::::validityAssuredTest()": [295, 313], "RevocationDataValidatorTest::::selfSignedCertificateIsNotValidatedTest()": [315, 331], "RevocationDataValidatorTest::::nocheckExtensionShouldNotFurtherValdiateTest()": [333, 350], "RevocationDataValidatorTest::::noRevocationDataTest()": [352, 370], "RevocationDataValidatorTest::::tryFetchRevocationDataOnlineTest()": [372, 387], "RevocationDataValidatorTest::::crlEncodingErrorTest()": [389, 420], "RevocationDataValidatorTest::::sortResponsesTest()": [422, 496]}, "reverse_method_lines_dic": {"98": "RevocationDataValidator::::addCrlClient(com.itextpdf.signatures.ICrlClient)", "99": "RevocationDataValidator::::addCrlClient(com.itextpdf.signatures.ICrlClient)", "100": "RevocationDataValidator::::addCrlClient(com.itextpdf.signatures.ICrlClient)", "101": "RevocationDataValidator::::addCrlClient(com.itextpdf.signatures.ICrlClient)", "110": "RevocationDataValidator::::addOcspClient(com.itextpdf.signatures.IOcspClient)", "111": "RevocationDataValidator::::addOcspClient(com.itextpdf.signatures.IOcspClient)", "112": "RevocationDataValidator::::addOcspClient(com.itextpdf.signatures.IOcspClient)", "113": "RevocationDataValidator::::addOcspClient(com.itextpdf.signatures.IOcspClient)", "123": "RevocationDataValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "124": "RevocationDataValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "125": "RevocationDataValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "126": "RevocationDataValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "127": "RevocationDataValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "128": "RevocationDataValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "129": "RevocationDataValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "130": "RevocationDataValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "131": "RevocationDataValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "132": "RevocationDataValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "133": "RevocationDataValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "134": "RevocationDataValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "135": "RevocationDataValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "136": "RevocationDataValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "137": "RevocationDataValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "138": "RevocationDataValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "139": "RevocationDataValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "140": "RevocationDataValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "141": "RevocationDataValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "142": "RevocationDataValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "143": "RevocationDataValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "144": "RevocationDataValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "145": "RevocationDataValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "146": "RevocationDataValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "147": "RevocationDataValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "148": "RevocationDataValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "149": "RevocationDataValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "150": "RevocationDataValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "151": "RevocationDataValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "152": "RevocationDataValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "153": "RevocationDataValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "154": "RevocationDataValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "155": "RevocationDataValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "156": "RevocationDataValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "157": "RevocationDataValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "158": "RevocationDataValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "159": "RevocationDataValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "160": "RevocationDataValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "161": "RevocationDataValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "162": "RevocationDataValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "199": "RevocationDataValidator::::retrieveAllOCSPResponses(com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "200": "RevocationDataValidator::::retrieveAllOCSPResponses(com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "201": "RevocationDataValidator::::retrieveAllOCSPResponses(com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "202": "RevocationDataValidator::::retrieveAllOCSPResponses(com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "203": "RevocationDataValidator::::retrieveAllOCSPResponses(com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "204": "RevocationDataValidator::::retrieveAllOCSPResponses(com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "205": "RevocationDataValidator::::retrieveAllOCSPResponses(com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "206": "RevocationDataValidator::::retrieveAllOCSPResponses(com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "207": "RevocationDataValidator::::retrieveAllOCSPResponses(com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "208": "RevocationDataValidator::::retrieveAllOCSPResponses(com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "209": "RevocationDataValidator::::retrieveAllOCSPResponses(com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "210": "RevocationDataValidator::::retrieveAllOCSPResponses(com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "211": "RevocationDataValidator::::retrieveAllOCSPResponses(com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "212": "RevocationDataValidator::::retrieveAllOCSPResponses(com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "213": "RevocationDataValidator::::retrieveAllOCSPResponses(com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "214": "RevocationDataValidator::::retrieveAllOCSPResponses(com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "215": "RevocationDataValidator::::retrieveAllOCSPResponses(com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "216": "RevocationDataValidator::::retrieveAllOCSPResponses(com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "217": "RevocationDataValidator::::retrieveAllOCSPResponses(com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "218": "RevocationDataValidator::::retrieveAllOCSPResponses(com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "219": "RevocationDataValidator::::retrieveAllOCSPResponses(com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "220": "RevocationDataValidator::::retrieveAllOCSPResponses(com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "221": "RevocationDataValidator::::retrieveAllOCSPResponses(com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "222": "RevocationDataValidator::::retrieveAllOCSPResponses(com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "223": "RevocationDataValidator::::retrieveAllOCSPResponses(com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "224": "RevocationDataValidator::::retrieveAllOCSPResponses(com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "225": "RevocationDataValidator::::retrieveAllOCSPResponses(com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "226": "RevocationDataValidator::::retrieveAllOCSPResponses(com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "238": "RevocationDataValidator::::retrieveAllCRLResponses(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "239": "RevocationDataValidator::::retrieveAllCRLResponses(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "240": "RevocationDataValidator::::retrieveAllCRLResponses(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "241": "RevocationDataValidator::::retrieveAllCRLResponses(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "242": "RevocationDataValidator::::retrieveAllCRLResponses(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "243": "RevocationDataValidator::::retrieveAllCRLResponses(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "244": "RevocationDataValidator::::retrieveAllCRLResponses(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "245": "RevocationDataValidator::::retrieveAllCRLResponses(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "246": "RevocationDataValidator::::retrieveAllCRLResponses(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "247": "RevocationDataValidator::::retrieveAllCRLResponses(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "248": "RevocationDataValidator::::retrieveAllCRLResponses(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "249": "RevocationDataValidator::::retrieveAllCRLResponses(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "250": "RevocationDataValidator::::retrieveAllCRLResponses(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "251": "RevocationDataValidator::::retrieveAllCRLResponses(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "252": "RevocationDataValidator::::retrieveAllCRLResponses(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "253": "RevocationDataValidator::::retrieveAllCRLResponses(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "254": "RevocationDataValidator::::retrieveAllCRLResponses(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "256": "RevocationDataValidator::::retrieveAllCRLResponsesUsingClient(com.itextpdf.signatures.validation.v1.report.ValidationReport,java.security.cert.X509Certificate,com.itextpdf.signatures.ICrlClient)", "257": "RevocationDataValidator::::retrieveAllCRLResponsesUsingClient(com.itextpdf.signatures.validation.v1.report.ValidationReport,java.security.cert.X509Certificate,com.itextpdf.signatures.ICrlClient)", "258": "RevocationDataValidator::::retrieveAllCRLResponsesUsingClient(com.itextpdf.signatures.validation.v1.report.ValidationReport,java.security.cert.X509Certificate,com.itextpdf.signatures.ICrlClient)", "259": "RevocationDataValidator::::retrieveAllCRLResponsesUsingClient(com.itextpdf.signatures.validation.v1.report.ValidationReport,java.security.cert.X509Certificate,com.itextpdf.signatures.ICrlClient)", "260": "RevocationDataValidator::::retrieveAllCRLResponsesUsingClient(com.itextpdf.signatures.validation.v1.report.ValidationReport,java.security.cert.X509Certificate,com.itextpdf.signatures.ICrlClient)", "261": "RevocationDataValidator::::retrieveAllCRLResponsesUsingClient(com.itextpdf.signatures.validation.v1.report.ValidationReport,java.security.cert.X509Certificate,com.itextpdf.signatures.ICrlClient)", "262": "RevocationDataValidator::::retrieveAllCRLResponsesUsingClient(com.itextpdf.signatures.validation.v1.report.ValidationReport,java.security.cert.X509Certificate,com.itextpdf.signatures.ICrlClient)", "263": "RevocationDataValidator::::retrieveAllCRLResponsesUsingClient(com.itextpdf.signatures.validation.v1.report.ValidationReport,java.security.cert.X509Certificate,com.itextpdf.signatures.ICrlClient)", "264": "RevocationDataValidator::::retrieveAllCRLResponsesUsingClient(com.itextpdf.signatures.validation.v1.report.ValidationReport,java.security.cert.X509Certificate,com.itextpdf.signatures.ICrlClient)", "265": "RevocationDataValidator::::retrieveAllCRLResponsesUsingClient(com.itextpdf.signatures.validation.v1.report.ValidationReport,java.security.cert.X509Certificate,com.itextpdf.signatures.ICrlClient)", "266": "RevocationDataValidator::::retrieveAllCRLResponsesUsingClient(com.itextpdf.signatures.validation.v1.report.ValidationReport,java.security.cert.X509Certificate,com.itextpdf.signatures.ICrlClient)", "267": "RevocationDataValidator::::retrieveAllCRLResponsesUsingClient(com.itextpdf.signatures.validation.v1.report.ValidationReport,java.security.cert.X509Certificate,com.itextpdf.signatures.ICrlClient)", "268": "RevocationDataValidator::::retrieveAllCRLResponsesUsingClient(com.itextpdf.signatures.validation.v1.report.ValidationReport,java.security.cert.X509Certificate,com.itextpdf.signatures.ICrlClient)", "269": "RevocationDataValidator::::retrieveAllCRLResponsesUsingClient(com.itextpdf.signatures.validation.v1.report.ValidationReport,java.security.cert.X509Certificate,com.itextpdf.signatures.ICrlClient)", "270": "RevocationDataValidator::::retrieveAllCRLResponsesUsingClient(com.itextpdf.signatures.validation.v1.report.ValidationReport,java.security.cert.X509Certificate,com.itextpdf.signatures.ICrlClient)", "271": "RevocationDataValidator::::retrieveAllCRLResponsesUsingClient(com.itextpdf.signatures.validation.v1.report.ValidationReport,java.security.cert.X509Certificate,com.itextpdf.signatures.ICrlClient)", "272": "RevocationDataValidator::::retrieveAllCRLResponsesUsingClient(com.itextpdf.signatures.validation.v1.report.ValidationReport,java.security.cert.X509Certificate,com.itextpdf.signatures.ICrlClient)", "273": "RevocationDataValidator::::retrieveAllCRLResponsesUsingClient(com.itextpdf.signatures.validation.v1.report.ValidationReport,java.security.cert.X509Certificate,com.itextpdf.signatures.ICrlClient)", "274": "RevocationDataValidator::::retrieveAllCRLResponsesUsingClient(com.itextpdf.signatures.validation.v1.report.ValidationReport,java.security.cert.X509Certificate,com.itextpdf.signatures.ICrlClient)", "275": "RevocationDataValidator::::retrieveAllCRLResponsesUsingClient(com.itextpdf.signatures.validation.v1.report.ValidationReport,java.security.cert.X509Certificate,com.itextpdf.signatures.ICrlClient)"}, "test_reverse_method_lines_dic": {"94": "RevocationDataValidatorTest::::before()", "95": "RevocationDataValidatorTest::::before()", "96": "RevocationDataValidatorTest::::before()", "97": "RevocationDataValidatorTest::::before()", "98": "RevocationDataValidatorTest::::before()", "99": "RevocationDataValidatorTest::::before()", "100": "RevocationDataValidatorTest::::before()", "101": "RevocationDataValidatorTest::::before()", "102": "RevocationDataValidatorTest::::before()", "103": "RevocationDataValidatorTest::::before()", "104": "RevocationDataValidatorTest::::before()", "105": "RevocationDataValidatorTest::::before()", "106": "RevocationDataValidatorTest::::before()", "107": "RevocationDataValidatorTest::::before()", "108": "RevocationDataValidatorTest::::before()", "109": "RevocationDataValidatorTest::::before()", "110": "RevocationDataValidatorTest::::before()", "112": "RevocationDataValidatorTest::::setUp()", "113": "RevocationDataValidatorTest::::setUp()", "114": "RevocationDataValidatorTest::::setUp()", "115": "RevocationDataValidatorTest::::setUp()", "116": "RevocationDataValidatorTest::::setUp()", "117": "RevocationDataValidatorTest::::setUp()", "118": "RevocationDataValidatorTest::::setUp()", "119": "RevocationDataValidatorTest::::setUp()", "120": "RevocationDataValidatorTest::::setUp()", "121": "RevocationDataValidatorTest::::setUp()", "122": "RevocationDataValidatorTest::::setUp()", "123": "RevocationDataValidatorTest::::setUp()", "124": "RevocationDataValidatorTest::::setUp()", "126": "RevocationDataValidatorTest::::basicOCSPValidatorUsageTest()", "127": "RevocationDataValidatorTest::::basicOCSPValidatorUsageTest()", "128": "RevocationDataValidatorTest::::basicOCSPValidatorUsageTest()", "129": "RevocationDataValidatorTest::::basicOCSPValidatorUsageTest()", "130": "RevocationDataValidatorTest::::basicOCSPValidatorUsageTest()", "131": "RevocationDataValidatorTest::::basicOCSPValidatorUsageTest()", "132": "RevocationDataValidatorTest::::basicOCSPValidatorUsageTest()", "133": "RevocationDataValidatorTest::::basicOCSPValidatorUsageTest()", "134": "RevocationDataValidatorTest::::basicOCSPValidatorUsageTest()", "135": "RevocationDataValidatorTest::::basicOCSPValidatorUsageTest()", "136": "RevocationDataValidatorTest::::basicOCSPValidatorUsageTest()", "137": "RevocationDataValidatorTest::::basicOCSPValidatorUsageTest()", "138": "RevocationDataValidatorTest::::basicOCSPValidatorUsageTest()", "139": "RevocationDataValidatorTest::::basicOCSPValidatorUsageTest()", "140": "RevocationDataValidatorTest::::basicOCSPValidatorUsageTest()", "141": "RevocationDataValidatorTest::::basicOCSPValidatorUsageTest()", "142": "RevocationDataValidatorTest::::basicOCSPValidatorUsageTest()", "143": "RevocationDataValidatorTest::::basicOCSPValidatorUsageTest()", "144": "RevocationDataValidatorTest::::basicOCSPValidatorUsageTest()", "145": "RevocationDataValidatorTest::::basicOCSPValidatorUsageTest()", "146": "RevocationDataValidatorTest::::basicOCSPValidatorUsageTest()", "147": "RevocationDataValidatorTest::::basicOCSPValidatorUsageTest()", "148": "RevocationDataValidatorTest::::basicOCSPValidatorUsageTest()", "149": "RevocationDataValidatorTest::::basicOCSPValidatorUsageTest()", "150": "RevocationDataValidatorTest::::basicOCSPValidatorUsageTest()", "151": "RevocationDataValidatorTest::::basicOCSPValidatorUsageTest()", "152": "RevocationDataValidatorTest::::basicOCSPValidatorUsageTest()", "153": "RevocationDataValidatorTest::::basicOCSPValidatorUsageTest()", "154": "RevocationDataValidatorTest::::basicOCSPValidatorUsageTest()", "155": "RevocationDataValidatorTest::::basicOCSPValidatorUsageTest()", "156": "RevocationDataValidatorTest::::basicOCSPValidatorUsageTest()", "157": "RevocationDataValidatorTest::::basicOCSPValidatorUsageTest()", "158": "RevocationDataValidatorTest::::basicOCSPValidatorUsageTest()", "159": "RevocationDataValidatorTest::::basicOCSPValidatorUsageTest()", "160": "RevocationDataValidatorTest::::basicOCSPValidatorUsageTest()", "161": "RevocationDataValidatorTest::::basicOCSPValidatorUsageTest()", "162": "RevocationDataValidatorTest::::basicOCSPValidatorUsageTest()", "163": "RevocationDataValidatorTest::::basicOCSPValidatorUsageTest()", "164": "RevocationDataValidatorTest::::basicOCSPValidatorUsageTest()", "165": "RevocationDataValidatorTest::::basicOCSPValidatorUsageTest()", "166": "RevocationDataValidatorTest::::basicOCSPValidatorUsageTest()", "167": "RevocationDataValidatorTest::::basicOCSPValidatorUsageTest()", "168": "RevocationDataValidatorTest::::basicOCSPValidatorUsageTest()", "169": "RevocationDataValidatorTest::::basicOCSPValidatorUsageTest()", "170": "RevocationDataValidatorTest::::basicOCSPValidatorUsageTest()", "172": "RevocationDataValidatorTest::::basicCrlValidatorUsageTest()", "173": "RevocationDataValidatorTest::::basicCrlValidatorUsageTest()", "174": "RevocationDataValidatorTest::::basicCrlValidatorUsageTest()", "175": "RevocationDataValidatorTest::::basicCrlValidatorUsageTest()", "176": "RevocationDataValidatorTest::::basicCrlValidatorUsageTest()", "177": "RevocationDataValidatorTest::::basicCrlValidatorUsageTest()", "178": "RevocationDataValidatorTest::::basicCrlValidatorUsageTest()", "179": "RevocationDataValidatorTest::::basicCrlValidatorUsageTest()", "180": "RevocationDataValidatorTest::::basicCrlValidatorUsageTest()", "181": "RevocationDataValidatorTest::::basicCrlValidatorUsageTest()", "182": "RevocationDataValidatorTest::::basicCrlValidatorUsageTest()", "183": "RevocationDataValidatorTest::::basicCrlValidatorUsageTest()", "184": "RevocationDataValidatorTest::::basicCrlValidatorUsageTest()", "185": "RevocationDataValidatorTest::::basicCrlValidatorUsageTest()", "186": "RevocationDataValidatorTest::::basicCrlValidatorUsageTest()", "187": "RevocationDataValidatorTest::::basicCrlValidatorUsageTest()", "188": "RevocationDataValidatorTest::::basicCrlValidatorUsageTest()", "189": "RevocationDataValidatorTest::::basicCrlValidatorUsageTest()", "190": "RevocationDataValidatorTest::::basicCrlValidatorUsageTest()", "191": "RevocationDataValidatorTest::::basicCrlValidatorUsageTest()", "192": "RevocationDataValidatorTest::::basicCrlValidatorUsageTest()", "193": "RevocationDataValidatorTest::::basicCrlValidatorUsageTest()", "194": "RevocationDataValidatorTest::::basicCrlValidatorUsageTest()", "195": "RevocationDataValidatorTest::::basicCrlValidatorUsageTest()", "196": "RevocationDataValidatorTest::::basicCrlValidatorUsageTest()", "197": "RevocationDataValidatorTest::::basicCrlValidatorUsageTest()", "198": "RevocationDataValidatorTest::::basicCrlValidatorUsageTest()", "199": "RevocationDataValidatorTest::::basicCrlValidatorUsageTest()", "200": "RevocationDataValidatorTest::::basicCrlValidatorUsageTest()", "201": "RevocationDataValidatorTest::::basicCrlValidatorUsageTest()", "202": "RevocationDataValidatorTest::::basicCrlValidatorUsageTest()", "203": "RevocationDataValidatorTest::::basicCrlValidatorUsageTest()", "204": "RevocationDataValidatorTest::::basicCrlValidatorUsageTest()", "205": "RevocationDataValidatorTest::::basicCrlValidatorUsageTest()", "206": "RevocationDataValidatorTest::::basicCrlValidatorUsageTest()", "207": "RevocationDataValidatorTest::::basicCrlValidatorUsageTest()", "208": "RevocationDataValidatorTest::::basicCrlValidatorUsageTest()", "209": "RevocationDataValidatorTest::::basicCrlValidatorUsageTest()", "210": "RevocationDataValidatorTest::::basicCrlValidatorUsageTest()", "212": "RevocationDataValidatorTest::::crlResponseOrderingTest()", "213": "RevocationDataValidatorTest::::crlResponseOrderingTest()", "214": "RevocationDataValidatorTest::::crlResponseOrderingTest()", "215": "RevocationDataValidatorTest::::crlResponseOrderingTest()", "216": "RevocationDataValidatorTest::::crlResponseOrderingTest()", "217": "RevocationDataValidatorTest::::crlResponseOrderingTest()", "218": "RevocationDataValidatorTest::::crlResponseOrderingTest()", "219": "RevocationDataValidatorTest::::crlResponseOrderingTest()", "220": "RevocationDataValidatorTest::::crlResponseOrderingTest()", "221": "RevocationDataValidatorTest::::crlResponseOrderingTest()", "222": "RevocationDataValidatorTest::::crlResponseOrderingTest()", "223": "RevocationDataValidatorTest::::crlResponseOrderingTest()", "224": "RevocationDataValidatorTest::::crlResponseOrderingTest()", "225": "RevocationDataValidatorTest::::crlResponseOrderingTest()", "226": "RevocationDataValidatorTest::::crlResponseOrderingTest()", "227": "RevocationDataValidatorTest::::crlResponseOrderingTest()", "228": "RevocationDataValidatorTest::::crlResponseOrderingTest()", "229": "RevocationDataValidatorTest::::crlResponseOrderingTest()", "230": "RevocationDataValidatorTest::::crlResponseOrderingTest()", "231": "RevocationDataValidatorTest::::crlResponseOrderingTest()", "232": "RevocationDataValidatorTest::::crlResponseOrderingTest()", "233": "RevocationDataValidatorTest::::crlResponseOrderingTest()", "234": "RevocationDataValidatorTest::::crlResponseOrderingTest()", "235": "RevocationDataValidatorTest::::crlResponseOrderingTest()", "236": "RevocationDataValidatorTest::::crlResponseOrderingTest()", "237": "RevocationDataValidatorTest::::crlResponseOrderingTest()", "238": "RevocationDataValidatorTest::::crlResponseOrderingTest()", "239": "RevocationDataValidatorTest::::crlResponseOrderingTest()", "240": "RevocationDataValidatorTest::::crlResponseOrderingTest()", "241": "RevocationDataValidatorTest::::crlResponseOrderingTest()", "242": "RevocationDataValidatorTest::::crlResponseOrderingTest()", "243": "RevocationDataValidatorTest::::crlResponseOrderingTest()", "244": "RevocationDataValidatorTest::::crlResponseOrderingTest()", "245": "RevocationDataValidatorTest::::crlResponseOrderingTest()", "246": "RevocationDataValidatorTest::::crlResponseOrderingTest()", "247": "RevocationDataValidatorTest::::crlResponseOrderingTest()", "249": "RevocationDataValidatorTest::::ocspResponseOrderingTest()", "250": "RevocationDataValidatorTest::::ocspResponseOrderingTest()", "251": "RevocationDataValidatorTest::::ocspResponseOrderingTest()", "252": "RevocationDataValidatorTest::::ocspResponseOrderingTest()", "253": "RevocationDataValidatorTest::::ocspResponseOrderingTest()", "254": "RevocationDataValidatorTest::::ocspResponseOrderingTest()", "255": "RevocationDataValidatorTest::::ocspResponseOrderingTest()", "256": "RevocationDataValidatorTest::::ocspResponseOrderingTest()", "257": "RevocationDataValidatorTest::::ocspResponseOrderingTest()", "258": "RevocationDataValidatorTest::::ocspResponseOrderingTest()", "259": "RevocationDataValidatorTest::::ocspResponseOrderingTest()", "260": "RevocationDataValidatorTest::::ocspResponseOrderingTest()", "261": "RevocationDataValidatorTest::::ocspResponseOrderingTest()", "262": "RevocationDataValidatorTest::::ocspResponseOrderingTest()", "263": "RevocationDataValidatorTest::::ocspResponseOrderingTest()", "264": "RevocationDataValidatorTest::::ocspResponseOrderingTest()", "265": "RevocationDataValidatorTest::::ocspResponseOrderingTest()", "266": "RevocationDataValidatorTest::::ocspResponseOrderingTest()", "267": "RevocationDataValidatorTest::::ocspResponseOrderingTest()", "268": "RevocationDataValidatorTest::::ocspResponseOrderingTest()", "269": "RevocationDataValidatorTest::::ocspResponseOrderingTest()", "270": "RevocationDataValidatorTest::::ocspResponseOrderingTest()", "271": "RevocationDataValidatorTest::::ocspResponseOrderingTest()", "272": "RevocationDataValidatorTest::::ocspResponseOrderingTest()", "273": "RevocationDataValidatorTest::::ocspResponseOrderingTest()", "274": "RevocationDataValidatorTest::::ocspResponseOrderingTest()", "275": "RevocationDataValidatorTest::::ocspResponseOrderingTest()", "276": "RevocationDataValidatorTest::::ocspResponseOrderingTest()", "277": "RevocationDataValidatorTest::::ocspResponseOrderingTest()", "278": "RevocationDataValidatorTest::::ocspResponseOrderingTest()", "279": "RevocationDataValidatorTest::::ocspResponseOrderingTest()", "280": "RevocationDataValidatorTest::::ocspResponseOrderingTest()", "281": "RevocationDataValidatorTest::::ocspResponseOrderingTest()", "282": "RevocationDataValidatorTest::::ocspResponseOrderingTest()", "283": "RevocationDataValidatorTest::::ocspResponseOrderingTest()", "284": "RevocationDataValidatorTest::::ocspResponseOrderingTest()", "285": "RevocationDataValidatorTest::::ocspResponseOrderingTest()", "286": "RevocationDataValidatorTest::::ocspResponseOrderingTest()", "287": "RevocationDataValidatorTest::::ocspResponseOrderingTest()", "288": "RevocationDataValidatorTest::::ocspResponseOrderingTest()", "289": "RevocationDataValidatorTest::::ocspResponseOrderingTest()", "290": "RevocationDataValidatorTest::::ocspResponseOrderingTest()", "291": "RevocationDataValidatorTest::::ocspResponseOrderingTest()", "292": "RevocationDataValidatorTest::::ocspResponseOrderingTest()", "293": "RevocationDataValidatorTest::::ocspResponseOrderingTest()", "295": "RevocationDataValidatorTest::::validityAssuredTest()", "296": "RevocationDataValidatorTest::::validityAssuredTest()", "297": "RevocationDataValidatorTest::::validityAssuredTest()", "298": "RevocationDataValidatorTest::::validityAssuredTest()", "299": "RevocationDataValidatorTest::::validityAssuredTest()", "300": "RevocationDataValidatorTest::::validityAssuredTest()", "301": "RevocationDataValidatorTest::::validityAssuredTest()", "302": "RevocationDataValidatorTest::::validityAssuredTest()", "303": "RevocationDataValidatorTest::::validityAssuredTest()", "304": "RevocationDataValidatorTest::::validityAssuredTest()", "305": "RevocationDataValidatorTest::::validityAssuredTest()", "306": "RevocationDataValidatorTest::::validityAssuredTest()", "307": "RevocationDataValidatorTest::::validityAssuredTest()", "308": "RevocationDataValidatorTest::::validityAssuredTest()", "309": "RevocationDataValidatorTest::::validityAssuredTest()", "310": "RevocationDataValidatorTest::::validityAssuredTest()", "311": "RevocationDataValidatorTest::::validityAssuredTest()", "312": "RevocationDataValidatorTest::::validityAssuredTest()", "313": "RevocationDataValidatorTest::::validityAssuredTest()", "315": "RevocationDataValidatorTest::::selfSignedCertificateIsNotValidatedTest()", "316": "RevocationDataValidatorTest::::selfSignedCertificateIsNotValidatedTest()", "317": "RevocationDataValidatorTest::::selfSignedCertificateIsNotValidatedTest()", "318": "RevocationDataValidatorTest::::selfSignedCertificateIsNotValidatedTest()", "319": "RevocationDataValidatorTest::::selfSignedCertificateIsNotValidatedTest()", "320": "RevocationDataValidatorTest::::selfSignedCertificateIsNotValidatedTest()", "321": "RevocationDataValidatorTest::::selfSignedCertificateIsNotValidatedTest()", "322": "RevocationDataValidatorTest::::selfSignedCertificateIsNotValidatedTest()", "323": "RevocationDataValidatorTest::::selfSignedCertificateIsNotValidatedTest()", "324": "RevocationDataValidatorTest::::selfSignedCertificateIsNotValidatedTest()", "325": "RevocationDataValidatorTest::::selfSignedCertificateIsNotValidatedTest()", "326": "RevocationDataValidatorTest::::selfSignedCertificateIsNotValidatedTest()", "327": "RevocationDataValidatorTest::::selfSignedCertificateIsNotValidatedTest()", "328": "RevocationDataValidatorTest::::selfSignedCertificateIsNotValidatedTest()", "329": "RevocationDataValidatorTest::::selfSignedCertificateIsNotValidatedTest()", "330": "RevocationDataValidatorTest::::selfSignedCertificateIsNotValidatedTest()", "331": "RevocationDataValidatorTest::::selfSignedCertificateIsNotValidatedTest()", "333": "RevocationDataValidatorTest::::nocheckExtensionShouldNotFurtherValdiateTest()", "334": "RevocationDataValidatorTest::::nocheckExtensionShouldNotFurtherValdiateTest()", "335": "RevocationDataValidatorTest::::nocheckExtensionShouldNotFurtherValdiateTest()", "336": "RevocationDataValidatorTest::::nocheckExtensionShouldNotFurtherValdiateTest()", "337": "RevocationDataValidatorTest::::nocheckExtensionShouldNotFurtherValdiateTest()", "338": "RevocationDataValidatorTest::::nocheckExtensionShouldNotFurtherValdiateTest()", "339": "RevocationDataValidatorTest::::nocheckExtensionShouldNotFurtherValdiateTest()", "340": "RevocationDataValidatorTest::::nocheckExtensionShouldNotFurtherValdiateTest()", "341": "RevocationDataValidatorTest::::nocheckExtensionShouldNotFurtherValdiateTest()", "342": "RevocationDataValidatorTest::::nocheckExtensionShouldNotFurtherValdiateTest()", "343": "RevocationDataValidatorTest::::nocheckExtensionShouldNotFurtherValdiateTest()", "344": "RevocationDataValidatorTest::::nocheckExtensionShouldNotFurtherValdiateTest()", "345": "RevocationDataValidatorTest::::nocheckExtensionShouldNotFurtherValdiateTest()", "346": "RevocationDataValidatorTest::::nocheckExtensionShouldNotFurtherValdiateTest()", "347": "RevocationDataValidatorTest::::nocheckExtensionShouldNotFurtherValdiateTest()", "348": "RevocationDataValidatorTest::::nocheckExtensionShouldNotFurtherValdiateTest()", "349": "RevocationDataValidatorTest::::nocheckExtensionShouldNotFurtherValdiateTest()", "350": "RevocationDataValidatorTest::::nocheckExtensionShouldNotFurtherValdiateTest()", "352": "RevocationDataValidatorTest::::noRevocationDataTest()", "353": "RevocationDataValidatorTest::::noRevocationDataTest()", "354": "RevocationDataValidatorTest::::noRevocationDataTest()", "355": "RevocationDataValidatorTest::::noRevocationDataTest()", "356": "RevocationDataValidatorTest::::noRevocationDataTest()", "357": "RevocationDataValidatorTest::::noRevocationDataTest()", "358": "RevocationDataValidatorTest::::noRevocationDataTest()", "359": "RevocationDataValidatorTest::::noRevocationDataTest()", "360": "RevocationDataValidatorTest::::noRevocationDataTest()", "361": "RevocationDataValidatorTest::::noRevocationDataTest()", "362": "RevocationDataValidatorTest::::noRevocationDataTest()", "363": "RevocationDataValidatorTest::::noRevocationDataTest()", "364": "RevocationDataValidatorTest::::noRevocationDataTest()", "365": "RevocationDataValidatorTest::::noRevocationDataTest()", "366": "RevocationDataValidatorTest::::noRevocationDataTest()", "367": "RevocationDataValidatorTest::::noRevocationDataTest()", "368": "RevocationDataValidatorTest::::noRevocationDataTest()", "369": "RevocationDataValidatorTest::::noRevocationDataTest()", "370": "RevocationDataValidatorTest::::noRevocationDataTest()", "372": "RevocationDataValidatorTest::::tryFetchRevocationDataOnlineTest()", "373": "RevocationDataValidatorTest::::tryFetchRevocationDataOnlineTest()", "374": "RevocationDataValidatorTest::::tryFetchRevocationDataOnlineTest()", "375": "RevocationDataValidatorTest::::tryFetchRevocationDataOnlineTest()", "376": "RevocationDataValidatorTest::::tryFetchRevocationDataOnlineTest()", "377": "RevocationDataValidatorTest::::tryFetchRevocationDataOnlineTest()", "378": "RevocationDataValidatorTest::::tryFetchRevocationDataOnlineTest()", "379": "RevocationDataValidatorTest::::tryFetchRevocationDataOnlineTest()", "380": "RevocationDataValidatorTest::::tryFetchRevocationDataOnlineTest()", "381": "RevocationDataValidatorTest::::tryFetchRevocationDataOnlineTest()", "382": "RevocationDataValidatorTest::::tryFetchRevocationDataOnlineTest()", "383": "RevocationDataValidatorTest::::tryFetchRevocationDataOnlineTest()", "384": "RevocationDataValidatorTest::::tryFetchRevocationDataOnlineTest()", "385": "RevocationDataValidatorTest::::tryFetchRevocationDataOnlineTest()", "386": "RevocationDataValidatorTest::::tryFetchRevocationDataOnlineTest()", "387": "RevocationDataValidatorTest::::tryFetchRevocationDataOnlineTest()", "389": "RevocationDataValidatorTest::::crlEncodingErrorTest()", "390": "RevocationDataValidatorTest::::crlEncodingErrorTest()", "391": "RevocationDataValidatorTest::::crlEncodingErrorTest()", "392": "RevocationDataValidatorTest::::crlEncodingErrorTest()", "393": "RevocationDataValidatorTest::::crlEncodingErrorTest()", "394": "RevocationDataValidatorTest::::crlEncodingErrorTest()", "395": "RevocationDataValidatorTest::::crlEncodingErrorTest()", "396": "RevocationDataValidatorTest::::crlEncodingErrorTest()", "397": "RevocationDataValidatorTest::::crlEncodingErrorTest()", "398": "RevocationDataValidatorTest::::crlEncodingErrorTest()", "399": "RevocationDataValidatorTest::::crlEncodingErrorTest()", "400": "RevocationDataValidatorTest::::crlEncodingErrorTest()", "401": "RevocationDataValidatorTest::::crlEncodingErrorTest()", "402": "RevocationDataValidatorTest::::crlEncodingErrorTest()", "403": "RevocationDataValidatorTest::::crlEncodingErrorTest()", "404": "RevocationDataValidatorTest::::crlEncodingErrorTest()", "405": "RevocationDataValidatorTest::::crlEncodingErrorTest()", "406": "RevocationDataValidatorTest::::crlEncodingErrorTest()", "407": "RevocationDataValidatorTest::::crlEncodingErrorTest()", "408": "RevocationDataValidatorTest::::crlEncodingErrorTest()", "409": "RevocationDataValidatorTest::::crlEncodingErrorTest()", "410": "RevocationDataValidatorTest::::crlEncodingErrorTest()", "411": "RevocationDataValidatorTest::::crlEncodingErrorTest()", "412": "RevocationDataValidatorTest::::crlEncodingErrorTest()", "413": "RevocationDataValidatorTest::::crlEncodingErrorTest()", "414": "RevocationDataValidatorTest::::crlEncodingErrorTest()", "415": "RevocationDataValidatorTest::::crlEncodingErrorTest()", "416": "RevocationDataValidatorTest::::crlEncodingErrorTest()", "417": "RevocationDataValidatorTest::::crlEncodingErrorTest()", "418": "RevocationDataValidatorTest::::crlEncodingErrorTest()", "419": "RevocationDataValidatorTest::::crlEncodingErrorTest()", "420": "RevocationDataValidatorTest::::crlEncodingErrorTest()", "422": "RevocationDataValidatorTest::::sortResponsesTest()", "423": "RevocationDataValidatorTest::::sortResponsesTest()", "424": "RevocationDataValidatorTest::::sortResponsesTest()", "425": "RevocationDataValidatorTest::::sortResponsesTest()", "426": "RevocationDataValidatorTest::::sortResponsesTest()", "427": "RevocationDataValidatorTest::::sortResponsesTest()", "428": "RevocationDataValidatorTest::::sortResponsesTest()", "429": "RevocationDataValidatorTest::::sortResponsesTest()", "430": "RevocationDataValidatorTest::::sortResponsesTest()", "431": "RevocationDataValidatorTest::::sortResponsesTest()", "432": "RevocationDataValidatorTest::::sortResponsesTest()", "433": "RevocationDataValidatorTest::::sortResponsesTest()", "434": "RevocationDataValidatorTest::::sortResponsesTest()", "435": "RevocationDataValidatorTest::::sortResponsesTest()", "436": "RevocationDataValidatorTest::::sortResponsesTest()", "437": "RevocationDataValidatorTest::::sortResponsesTest()", "438": "RevocationDataValidatorTest::::sortResponsesTest()", "439": "RevocationDataValidatorTest::::sortResponsesTest()", "440": "RevocationDataValidatorTest::::sortResponsesTest()", "441": "RevocationDataValidatorTest::::sortResponsesTest()", "442": "RevocationDataValidatorTest::::sortResponsesTest()", "443": "RevocationDataValidatorTest::::sortResponsesTest()", "444": "RevocationDataValidatorTest::::sortResponsesTest()", "445": "RevocationDataValidatorTest::::sortResponsesTest()", "446": "RevocationDataValidatorTest::::sortResponsesTest()", "447": "RevocationDataValidatorTest::::sortResponsesTest()", "448": "RevocationDataValidatorTest::::sortResponsesTest()", "449": "RevocationDataValidatorTest::::sortResponsesTest()", "450": "RevocationDataValidatorTest::::sortResponsesTest()", "451": "RevocationDataValidatorTest::::sortResponsesTest()", "452": "RevocationDataValidatorTest::::sortResponsesTest()", "453": "RevocationDataValidatorTest::::sortResponsesTest()", "454": "RevocationDataValidatorTest::::sortResponsesTest()", "455": "RevocationDataValidatorTest::::sortResponsesTest()", "456": "RevocationDataValidatorTest::::sortResponsesTest()", "457": "RevocationDataValidatorTest::::sortResponsesTest()", "458": "RevocationDataValidatorTest::::sortResponsesTest()", "459": "RevocationDataValidatorTest::::sortResponsesTest()", "460": "RevocationDataValidatorTest::::sortResponsesTest()", "461": "RevocationDataValidatorTest::::sortResponsesTest()", "462": "RevocationDataValidatorTest::::sortResponsesTest()", "463": "RevocationDataValidatorTest::::sortResponsesTest()", "464": "RevocationDataValidatorTest::::sortResponsesTest()", "465": "RevocationDataValidatorTest::::sortResponsesTest()", "466": "RevocationDataValidatorTest::::sortResponsesTest()", "467": "RevocationDataValidatorTest::::sortResponsesTest()", "468": "RevocationDataValidatorTest::::sortResponsesTest()", "469": "RevocationDataValidatorTest::::sortResponsesTest()", "470": "RevocationDataValidatorTest::::sortResponsesTest()", "471": "RevocationDataValidatorTest::::sortResponsesTest()", "472": "RevocationDataValidatorTest::::sortResponsesTest()", "473": "RevocationDataValidatorTest::::sortResponsesTest()", "474": "RevocationDataValidatorTest::::sortResponsesTest()", "475": "RevocationDataValidatorTest::::sortResponsesTest()", "476": "RevocationDataValidatorTest::::sortResponsesTest()", "477": "RevocationDataValidatorTest::::sortResponsesTest()", "478": "RevocationDataValidatorTest::::sortResponsesTest()", "479": "RevocationDataValidatorTest::::sortResponsesTest()", "480": "RevocationDataValidatorTest::::sortResponsesTest()", "481": "RevocationDataValidatorTest::::sortResponsesTest()", "482": "RevocationDataValidatorTest::::sortResponsesTest()", "483": "RevocationDataValidatorTest::::sortResponsesTest()", "484": "RevocationDataValidatorTest::::sortResponsesTest()", "485": "RevocationDataValidatorTest::::sortResponsesTest()", "486": "RevocationDataValidatorTest::::sortResponsesTest()", "487": "RevocationDataValidatorTest::::sortResponsesTest()", "488": "RevocationDataValidatorTest::::sortResponsesTest()", "489": "RevocationDataValidatorTest::::sortResponsesTest()", "490": "RevocationDataValidatorTest::::sortResponsesTest()", "491": "RevocationDataValidatorTest::::sortResponsesTest()", "492": "RevocationDataValidatorTest::::sortResponsesTest()", "493": "RevocationDataValidatorTest::::sortResponsesTest()", "494": "RevocationDataValidatorTest::::sortResponsesTest()", "495": "RevocationDataValidatorTest::::sortResponsesTest()", "496": "RevocationDataValidatorTest::::sortResponsesTest()"}, "tests": [{"test_lines": [126, 170], "covered_lines": [70, 72, 73, 84, 85, 86, 87, 88, 89, 111, 112, 125, 126, 133, 139, 151, 153, 154, 155, 160, 162, 167, 168, 169, 170, 171, 173, 174, 175, 176, 183, 184, 185, 186, 187, 201, 202, 203, 204, 205, 207, 208, 210, 213, 215, 216, 217, 218, 225, 229, 231, 232, 233, 236, 240, 241, 244, 245, 246, 252, 253]}, {"test_lines": [172, 210], "covered_lines": [70, 72, 73, 84, 85, 86, 87, 88, 89, 99, 100, 125, 126, 133, 139, 151, 153, 154, 155, 160, 162, 167, 168, 169, 170, 171, 178, 179, 180, 183, 184, 185, 186, 187, 201, 202, 216, 217, 218, 225, 240, 241, 242, 243, 244, 245, 246, 252, 253, 258, 260, 261, 263, 269, 270, 273, 274]}, {"test_lines": [212, 247], "covered_lines": [70, 72, 73, 84, 85, 86, 87, 88, 89, 99, 100, 125, 126, 133, 139, 151, 153, 154, 155, 160, 162, 167, 168, 169, 170, 171, 178, 179, 180, 183, 189, 190, 191, 193, 195, 197, 201, 202, 216, 217, 218, 220, 221, 222, 223, 225, 229, 236, 240, 241, 242, 243, 244, 245, 246, 248, 252, 253, 258, 260, 261, 263, 269, 270, 273, 274]}, {"test_lines": [249, 293], "covered_lines": [70, 72, 73, 84, 85, 86, 87, 88, 89, 111, 112, 125, 126, 133, 139, 151, 153, 154, 155, 160, 162, 167, 168, 169, 170, 171, 173, 174, 175, 176, 183, 189, 190, 191, 193, 195, 197, 201, 202, 203, 204, 205, 207, 208, 210, 213, 215, 216, 217, 218, 225, 229, 231, 232, 233, 236, 240, 241, 244, 245, 246, 248, 249, 252, 253, 258, 260, 261, 273, 274]}, {"test_lines": [295, 313], "covered_lines": [70, 72, 73, 84, 85, 86, 87, 88, 89, 125, 126, 133, 135, 137]}, {"test_lines": [315, 331], "covered_lines": [70, 72, 73, 84, 85, 86, 87, 88, 89, 125, 126, 127, 129]}, {"test_lines": [333, 350], "covered_lines": [70, 72, 73, 84, 85, 86, 87, 88, 89, 125, 126, 133, 139, 142, 143, 144, 146]}, {"test_lines": [352, 370], "covered_lines": [70, 72, 73, 84, 85, 86, 87, 88, 89, 125, 126, 133, 139, 151, 153, 154, 155, 160, 162, 167, 168, 169, 195, 197, 201, 202, 216, 217, 218, 225, 240, 241, 244, 245, 246, 252, 253]}, {"test_lines": [372, 387], "covered_lines": [70, 72, 73, 84, 85, 86, 87, 88, 89, 125, 126, 133, 139, 151, 153, 154, 155, 160, 162, 167, 168, 169, 195, 197, 201, 202, 216, 217, 218, 220, 221, 222, 223, 225, 229, 236, 240, 241, 244, 245, 246, 248, 249, 252, 253, 258, 260, 261, 273, 274]}, {"test_lines": [389, 420], "covered_lines": [70, 72, 73, 84, 85, 86, 87, 88, 89, 99, 100, 125, 126, 133, 139, 151, 153, 154, 155, 160, 162, 167, 168, 169, 195, 197, 201, 202, 216, 217, 218, 225, 240, 241, 242, 243, 244, 245, 246, 252, 253, 258, 260, 261, 265, 267, 270, 273, 274]}, {"test_lines": [422, 496], "covered_lines": [70, 72, 73, 84, 85, 86, 87, 88, 89, 99, 100, 111, 112, 125, 126, 133, 139, 151, 153, 154, 155, 160, 162, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 183, 189, 190, 191, 193, 195, 197, 201, 202, 203, 204, 205, 207, 208, 210, 213, 215, 216, 217, 218, 225, 229, 231, 232, 233, 236, 240, 241, 242, 243, 244, 245, 246, 252, 253, 258, 260, 261, 263, 269, 270, 273, 274]}]}, "/bernard/dataset_construction/prep/repos/itext-java/sign/src/main/java/com/itextpdf/signatures/validation/v1/SignatureValidator.java": {"class_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.signatures.validation.v1;\n", "\n", "import com.itextpdf.commons.actions.contexts.IMetaInfo;\n", "import com.itextpdf.commons.bouncycastle.asn1.tsp.ITSTInfo;\n", "import com.itextpdf.commons.utils.DateTimeUtil;\n", "import com.itextpdf.commons.utils.MessageFormatUtil;\n", "import com.itextpdf.kernel.pdf.DocumentProperties;\n", "import com.itextpdf.kernel.pdf.PdfArray;\n", "import com.itextpdf.kernel.pdf.PdfDictionary;\n", "import com.itextpdf.kernel.pdf.PdfDocument;\n", "import com.itextpdf.kernel.pdf.PdfName;\n", "import com.itextpdf.kernel.pdf.PdfReader;\n", "import com.itextpdf.kernel.pdf.PdfStream;\n", "import com.itextpdf.signatures.CertificateUtil;\n", "import com.itextpdf.signatures.IssuingCertificateRetriever;\n", "import com.itextpdf.signatures.PdfPKCS7;\n", "import com.itextpdf.signatures.SignatureUtil;\n", "import com.itextpdf.signatures.validation.v1.context.CertificateSource;\n", "import com.itextpdf.signatures.validation.v1.context.TimeBasedContext;\n", "import com.itextpdf.signatures.validation.v1.context.ValidationContext;\n", "import com.itextpdf.signatures.validation.v1.context.ValidatorContext;\n", "import com.itextpdf.signatures.validation.v1.report.ReportItem;\n", "import com.itextpdf.signatures.validation.v1.report.ReportItem.ReportItemStatus;\n", "import com.itextpdf.signatures.validation.v1.report.ValidationReport;\n", "import com.itextpdf.signatures.validation.v1.report.ValidationReport.ValidationResult;\n", "\n", "import java.io.ByteArrayInputStream;\n", "import java.io.IOException;\n", "import java.security.GeneralSecurityException;\n", "import java.security.cert.Certificate;\n", "import java.security.cert.X509Certificate;\n", "import java.util.ArrayList;\n", "import java.util.Arrays;\n", "import java.util.Collections;\n", "import java.util.Date;\n", "import java.util.List;\n", "\n", "/**\n", " * Validator class, which is expected to be used for signatures validation.\n", " */\n", "class SignatureValidator {\n", "    public static final String VALIDATING_SIGNATURE_NAME = \"Validating signature {0}\";\n", "    static final String TIMESTAMP_VERIFICATION = \"Timestamp verification check.\";\n", "    static final String SIGNATURE_VERIFICATION = \"Signature verification check.\";\n", "    static final String CERTS_FROM_DSS = \"Certificates from DSS check.\";\n", "    static final String CANNOT_PARSE_CERT_FROM_DSS =\n", "            \"Certificate {0} stored in DSS dictionary cannot be parsed.\";\n", "    static final String CANNOT_VERIFY_SIGNATURE = \"Signature {0} cannot be mathematically verified.\";\n", "    static final String DOCUMENT_IS_NOT_COVERED = \"Signature {0} doesn't cover entire document.\";\n", "    static final String CANNOT_VERIFY_TIMESTAMP = \"Signature timestamp attribute cannot be verified.\";\n", "    static final String REVISIONS_RETRIEVAL_FAILED = \"Wasn't possible to retrieve document revisions.\";\n", "    private static final String TIMESTAMP_EXTRACTION_FAILED = \"Unable to extract timestamp from timestamp signature\";\n", "\n", "    private final ValidationContext baseValidationContext;\n", "    private final CertificateChainValidator certificateChainValidator;\n", "    private final DocumentRevisionsValidator documentRevisionsValidator;\n", "    private final IssuingCertificateRetriever certificateRetriever;\n", "    private final SignatureValidationProperties properties;\n", "    private Date lastKnownPoE = DateTimeUtil.getCurrentTimeDate();\n", "    private IMetaInfo metaInfo = new ValidationMetaInfo();\n", "\n", "    /**\n", "     * Creates new instance of {@link SignatureValidator}.\n", "     *\n", "     * @param builder See {@link ValidatorChainBuilder}\n", "     */\n", "    SignatureValidator(ValidatorChainBuilder builder) {\n", "        this.certificateRetriever = builder.getCertificateRetriever();\n", "        this.properties = builder.getProperties();\n", "        this.certificateChainValidator = builder.getCertificateChainValidator();\n", "        this.documentRevisionsValidator = builder.getDocumentRevisionsValidator();\n", "        this.baseValidationContext = new ValidationContext(ValidatorContext.SIGNATURE_VALIDATOR,\n", "                CertificateSource.SIGNER_CERT, TimeBasedContext.PRESENT);\n", "    }\n", "\n", "    /**\n", "     * Sets the {@link IMetaInfo} that will be used during new {@link PdfDocument} creations.\n", "     *\n", "     * @param metaInfo meta info to set\n", "     *\n", "     * @return the same {@link SignatureValidator} instance\n", "     */\n", "    public SignatureValidator setEventCountingMetaInfo(IMetaInfo metaInfo) {\n", "        this.metaInfo = metaInfo;\n", "        return this;\n", "    }\n", "\n", "    /**\n", "     * Validate all signatures in the document\n", "     *\n", "     * @param document the document to be validated\n", "     * @return {@link ValidationReport} which contains detailed validation results\n", "     */\n", "    public ValidationReport validateSignatures(PdfDocument document) {\n", "        ValidationReport report = new ValidationReport();\n", "        documentRevisionsValidator.setEventCountingMetaInfo(metaInfo);\n", "        ValidationReport revisionsValidationReport =\n", "                documentRevisionsValidator.validateAllDocumentRevisions(baseValidationContext, document);\n", "        report.merge(revisionsValidationReport);\n", "        if (stopValidation(report, baseValidationContext)) {\n", "            return report;\n", "        }\n", "\n", "        SignatureUtil util = new SignatureUtil(document);\n", "        List<String> signatureNames = util.getSignatureNames();\n", "        Collections.reverse(signatureNames);\n", "\n", "        for (String fieldName : signatureNames) {\n", "            try (PdfDocument doc = new PdfDocument(new PdfReader(util.extractRevision(fieldName)),\n", "                    new DocumentProperties().setEventCountingMetaInfo(metaInfo))) {\n", "                ValidationReport subReport = validateLatestSignature(doc);\n", "                report.merge(subReport);\n", "                if (stopValidation(report, baseValidationContext)) {\n", "                    return report;\n", "                }\n", "            } catch (IOException e) {\n", "                report.addReportItem(new ReportItem(SIGNATURE_VERIFICATION, REVISIONS_RETRIEVAL_FAILED,\n", "                        e, ReportItemStatus.INDETERMINATE));\n", "            }\n", "        }\n", "        return report;\n", "    }\n", "\n", "\n", "    /**\n", "     * Validate the latest signature in the document.\n", "     *\n", "     * @param document the document of which to validate the latest signature\n", "     * @return {@link ValidationReport} which contains detailed validation results\n", "     */\n", "    public ValidationReport validateLatestSignature(PdfDocument document) {\n", "        ValidationReport validationReport = new ValidationReport();\n", "        PdfPKCS7 pkcs7 = mathematicallyVerifySignature(validationReport, document);\n", "        if (stopValidation(validationReport, baseValidationContext)) {\n", "            return validationReport;\n", "        }\n", "\n", "        List<Certificate> certificatesFromDss = getCertificatesFromDss(validationReport, document);\n", "        certificateRetriever.addKnownCertificates(certificatesFromDss);\n", "\n", "        if (pkcs7.isTsp()) {\n", "            return validateTimestampChain(validationReport, pkcs7.getTimeStampTokenInfo(), pkcs7.getCertificates(),\n", "                    pkcs7.getSigningCertificate());\n", "        }\n", "\n", "        if (pkcs7.getTimeStampTokenInfo() != null) {\n", "            try {\n", "                if (!pkcs7.verifyTimestampImprint()) {\n", "                    validationReport.addReportItem(new ReportItem(TIMESTAMP_VERIFICATION, CANNOT_VERIFY_TIMESTAMP,\n", "                            ReportItemStatus.INVALID));\n", "                }\n", "            } catch (GeneralSecurityException e) {\n", "                validationReport.addReportItem(new ReportItem(TIMESTAMP_VERIFICATION, CANNOT_VERIFY_TIMESTAMP, e,\n", "                        ReportItemStatus.INVALID));\n", "            }\n", "            if (stopValidation(validationReport, baseValidationContext)) {\n", "                return validationReport;\n", "            }\n", "\n", "            PdfPKCS7 timestampSignatureContainer = pkcs7.getTimestampSignatureContainer();\n", "            try {\n", "                if (!timestampSignatureContainer.verifySignatureIntegrityAndAuthenticity()) {\n", "                    validationReport.addReportItem(new ReportItem(TIMESTAMP_VERIFICATION,\n", "                            CANNOT_VERIFY_TIMESTAMP, ReportItemStatus.INVALID));\n", "                }\n", "            } catch (GeneralSecurityException e) {\n", "                validationReport.addReportItem(new ReportItem(TIMESTAMP_VERIFICATION,\n", "                        CANNOT_VERIFY_TIMESTAMP, e, ReportItemStatus.INVALID));\n", "            }\n", "            if (stopValidation(validationReport, baseValidationContext)) {\n", "                return validationReport;\n", "            }\n", "\n", "            Certificate[] timestampCertificates = timestampSignatureContainer.getCertificates();\n", "            validateTimestampChain(validationReport, pkcs7.getTimeStampTokenInfo(), timestampCertificates,\n", "                    timestampSignatureContainer.getSigningCertificate());\n", "            if (stopValidation(validationReport, baseValidationContext)) {\n", "                return validationReport;\n", "            }\n", "        }\n", "\n", "        Certificate[] certificates = pkcs7.getCertificates();\n", "        certificateRetriever.addKnownCertificates(Arrays.asList(certificates));\n", "        X509Certificate signingCertificate = pkcs7.getSigningCertificate();\n", "\n", "        return certificateChainValidator.validate(validationReport,\n", "                baseValidationContext,\n", "                signingCertificate, lastKnownPoE);\n", "    }\n", "\n", "    private PdfPKCS7 mathematicallyVerifySignature(ValidationReport validationReport, PdfDocument document) {\n", "        SignatureUtil signatureUtil = new SignatureUtil(document);\n", "        List<String> signatures = signatureUtil.getSignatureNames();\n", "        String latestSignatureName = signatures.get(signatures.size() - 1);\n", "        PdfPKCS7 pkcs7 = signatureUtil.readSignatureData(latestSignatureName);\n", "        validationReport.addReportItem(new ReportItem(SIGNATURE_VERIFICATION,\n", "                MessageFormatUtil.format(VALIDATING_SIGNATURE_NAME, latestSignatureName), ReportItemStatus.INFO));\n", "\n", "        if (!signatureUtil.signatureCoversWholeDocument(latestSignatureName)) {\n", "            validationReport.addReportItem(new ReportItem(SIGNATURE_VERIFICATION,\n", "                    MessageFormatUtil.format(DOCUMENT_IS_NOT_COVERED, latestSignatureName), ReportItemStatus.INVALID));\n", "        }\n", "        try {\n", "            if (!pkcs7.verifySignatureIntegrityAndAuthenticity()) {\n", "                validationReport.addReportItem(new ReportItem(SIGNATURE_VERIFICATION, MessageFormatUtil.format(\n", "                        CANNOT_VERIFY_SIGNATURE, latestSignatureName), ReportItemStatus.INVALID));\n", "            }\n", "        } catch (GeneralSecurityException e) {\n", "            validationReport.addReportItem(new ReportItem(SIGNATURE_VERIFICATION, MessageFormatUtil.format(\n", "                    CANNOT_VERIFY_SIGNATURE, latestSignatureName), e, ReportItemStatus.INVALID));\n", "        }\n", "        return pkcs7;\n", "    }\n", "\n", "    private ValidationReport validateTimestampChain(ValidationReport validationReport, ITSTInfo timeStampTokenInfo,\n", "                                                    Certificate[] knownCerts, X509Certificate signingCert) {\n", "        certificateRetriever.addKnownCertificates(Arrays.asList(knownCerts));\n", "\n", "        ValidationReport tsValidationReport = new ValidationReport();\n", "\n", "        certificateChainValidator.validate(tsValidationReport,\n", "                baseValidationContext.setCertificateSource(CertificateSource.TIMESTAMP),\n", "                signingCert, lastKnownPoE);\n", "        validationReport.merge(tsValidationReport);\n", "        if (tsValidationReport.getValidationResult() == ValidationReport.ValidationResult.VALID) {\n", "            try {\n", "                lastKnownPoE = timeStampTokenInfo.getGenTime();\n", "            } catch (Exception e) {\n", "                validationReport.addReportItem(new ReportItem(TIMESTAMP_VERIFICATION, TIMESTAMP_EXTRACTION_FAILED, e,\n", "                        ReportItemStatus.INDETERMINATE));\n", "            }\n", "        }\n", "        return validationReport;\n", "    }\n", "\n", "    private List<Certificate> getCertificatesFromDss(ValidationReport validationReport, PdfDocument document) {\n", "        PdfDictionary dss = document.getCatalog().getPdfObject().getAsDictionary(PdfName.DSS);\n", "        List<Certificate> certificatesFromDss = new ArrayList<>();\n", "        if (dss != null) {\n", "            PdfArray certs = dss.getAsArray(PdfName.Certs);\n", "            if (certs != null) {\n", "                for (int i = 0; i < certs.size(); ++i) {\n", "                    PdfStream certStream = certs.getAsStream(i);\n", "                    try {\n", "                        certificatesFromDss.add(CertificateUtil.generateCertificate(\n", "                                new ByteArrayInputStream(certStream.getBytes())));\n", "                    } catch (GeneralSecurityException e) {\n", "                        validationReport.addReportItem(new ReportItem(CERTS_FROM_DSS, MessageFormatUtil.format(\n", "                                CANNOT_PARSE_CERT_FROM_DSS, certStream), e, ReportItemStatus.INFO));\n", "                    }\n", "                }\n", "            }\n", "        }\n", "        return certificatesFromDss;\n", "    }\n", "\n", "    private boolean stopValidation(ValidationReport result, ValidationContext validationContext) {\n", "        return !properties.getContinueAfterFailure(validationContext)\n", "                && result.getValidationResult() == ValidationResult.INVALID;\n", "    }\n", "}\n", "\n"], "test_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.signatures.validation.v1;\n", "\n", "import com.itextpdf.bouncycastleconnector.BouncyCastleFactoryCreator;\n", "import com.itextpdf.commons.bouncycastle.IBouncyCastleFactory;\n", "import com.itextpdf.commons.bouncycastle.operator.AbstractOperatorCreationException;\n", "import com.itextpdf.commons.bouncycastle.pkcs.AbstractPKCSException;\n", "import com.itextpdf.commons.utils.DateTimeUtil;\n", "import com.itextpdf.commons.utils.MessageFormatUtil;\n", "import com.itextpdf.kernel.pdf.PdfDocument;\n", "import com.itextpdf.kernel.pdf.PdfReader;\n", "import com.itextpdf.signatures.testutils.PemFileHelper;\n", "import com.itextpdf.signatures.testutils.TimeTestUtil;\n", "import com.itextpdf.signatures.testutils.builder.TestOcspResponseBuilder;\n", "import com.itextpdf.signatures.testutils.client.TestOcspClient;\n", "import com.itextpdf.signatures.validation.v1.context.CertificateSource;\n", "import com.itextpdf.signatures.validation.v1.context.CertificateSources;\n", "import com.itextpdf.signatures.validation.v1.context.TimeBasedContexts;\n", "import com.itextpdf.signatures.validation.v1.context.ValidatorContext;\n", "import com.itextpdf.signatures.validation.v1.context.ValidatorContexts;\n", "import com.itextpdf.signatures.validation.v1.mocks.MockChainValidator;\n", "import com.itextpdf.signatures.validation.v1.mocks.MockDocumentRevisionsValidator;\n", "import com.itextpdf.signatures.validation.v1.mocks.MockIssuingCertificateRetriever;\n", "import com.itextpdf.signatures.validation.v1.mocks.MockRevocationDataValidator;\n", "import com.itextpdf.signatures.validation.v1.report.ReportItem;\n", "import com.itextpdf.signatures.validation.v1.report.ReportItem.ReportItemStatus;\n", "import com.itextpdf.signatures.validation.v1.report.ValidationReport;\n", "import com.itextpdf.signatures.validation.v1.report.ValidationReport.ValidationResult;\n", "import com.itextpdf.test.ExtendedITextTest;\n", "import com.itextpdf.test.annotations.type.BouncyCastleUnitTest;\n", "import org.junit.Assert;\n", "import org.junit.Before;\n", "import org.junit.BeforeClass;\n", "import org.junit.Test;\n", "import org.junit.experimental.categories.Category;\n", "\n", "import java.io.IOException;\n", "import java.security.GeneralSecurityException;\n", "import java.security.PrivateKey;\n", "import java.security.Security;\n", "import java.security.cert.Certificate;\n", "import java.security.cert.X509Certificate;\n", "import java.time.Duration;\n", "import java.util.Collection;\n", "import java.util.Collections;\n", "import java.util.Date;\n", "\n", "@Category(BouncyCastleUnitTest.class)\n", "public class SignatureValidatorTest extends ExtendedITextTest {\n", "    private static final String CERTS_SRC = \"./src/test/resources/com/itextpdf/signatures/validation/v1/SignatureValidatorTest/certs/\";\n", "    private static final String SOURCE_FOLDER = \"./src/test/resources/com/itextpdf/signatures/validation/v1/SignatureValidatorTest/\";\n", "\n", "    private static final IBouncyCastleFactory FACTORY = BouncyCastleFactoryCreator.getFactory();\n", "    private static final char[] PASSWORD = \"testpassphrase\".toCharArray();\n", "    private SignatureValidationProperties parameters;\n", "    private MockIssuingCertificateRetriever mockCertificateRetriever;\n", "\n", "    private ValidatorChainBuilder builder;\n", "    private MockChainValidator mockCertificateChainValidator;\n", "    private MockDocumentRevisionsValidator mockDocumentRevisionsValidator;\n", "\n", "    @BeforeClass\n", "    public static void before() {\n", "        Security.addProvider(FACTORY.getProvider());\n", "    }\n", "\n", "    @Before\n", "    public void setUp() {\n", "        mockCertificateChainValidator = new MockChainValidator();\n", "        parameters = new SignatureValidationProperties();\n", "        mockCertificateRetriever = new MockIssuingCertificateRetriever();\n", "        mockDocumentRevisionsValidator = new MockDocumentRevisionsValidator();\n", "        builder = new ValidatorChainBuilder()\n", "                .withIssuingCertificateRetriever(mockCertificateRetriever)\n", "                .withSignatureValidationProperties(parameters)\n", "                .withCertificateChainValidator(mockCertificateChainValidator)\n", "                .withRevocationDataValidator(new MockRevocationDataValidator())\n", "                .withDocumentRevisionsValidator(mockDocumentRevisionsValidator);\n", "\n", "    }\n", "\n", "    @Test\n", "    public void latestSignatureIsTimestampTest() throws GeneralSecurityException, IOException,\n", "            AbstractOperatorCreationException, AbstractPKCSException {\n", "        String chainName = CERTS_SRC + \"validCertsChain.pem\";\n", "        String privateKeyName = CERTS_SRC + \"rootCertKey.pem\";\n", "        Certificate[] certificateChain = PemFileHelper.readFirstChain(chainName);\n", "        X509Certificate rootCert = (X509Certificate) certificateChain[2];\n", "        PrivateKey rootPrivateKey = PemFileHelper.readFirstKey(privateKeyName, PASSWORD);\n", "\n", "        X509Certificate timeStampCert = (X509Certificate) PemFileHelper.readFirstChain(\n", "                CERTS_SRC + \"timestamp.pem\")[0];\n", "\n", "        ValidationReport report;\n", "        try (PdfDocument document = new PdfDocument(new PdfReader(SOURCE_FOLDER + \"timestampSignatureDoc.pdf\"))) {\n", "            mockCertificateRetriever.setTrustedCertificates(Collections.singletonList(rootCert));\n", "\n", "            TestOcspResponseBuilder ocspBuilder = new TestOcspResponseBuilder(rootCert, rootPrivateKey);\n", "            Date currentDate = DateTimeUtil.getCurrentTimeDate();\n", "            ocspBuilder.setProducedAt(currentDate);\n", "            ocspBuilder.setThisUpdate(DateTimeUtil.getCalendar(DateTimeUtil.addDaysToDate(currentDate, 3)));\n", "            ocspBuilder.setNextUpdate(DateTimeUtil.getCalendar(DateTimeUtil.addDaysToDate(currentDate, 30)));\n", "            TestOcspClient ocspClient = new TestOcspClient().addBuilderForCertIssuer(rootCert, ocspBuilder);\n", "            builder.getRevocationDataValidator().addOcspClient(ocspClient);\n", "            parameters.setRevocationOnlineFetching(ValidatorContexts.all(), CertificateSources.all(),\n", "                            TimeBasedContexts.all(), SignatureValidationProperties.OnlineFetching.NEVER_FETCH)\n", "                    .setFreshness(ValidatorContexts.all(), CertificateSources.all(), TimeBasedContexts.all(),\n", "                            Duration.ofDays(-2));\n", "\n", "            SignatureValidator signatureValidator = builder.buildSignatureValidator();\n", "            report = signatureValidator.validateLatestSignature(document);\n", "        }\n", "\n", "        AssertValidationReport.assertThat(report, a -> a\n", "                .hasStatus(ValidationResult.VALID)\n", "                .hasNumberOfLogs(1).hasNumberOfFailures(0));\n", "\n", "        Assert.assertEquals(1, mockCertificateChainValidator.verificationCalls.size());\n", "        MockChainValidator.ValidationCallBack call = mockCertificateChainValidator.verificationCalls.get(0);\n", "        Assert.assertEquals(CertificateSource.TIMESTAMP, call.context.getCertificateSource());\n", "        Assert.assertEquals(ValidatorContext.SIGNATURE_VALIDATOR, call.context.getValidatorContext());\n", "        Assert.assertEquals(timeStampCert.getSubjectX500Principal(), call.certificate.getSubjectX500Principal());\n", "    }\n", "\n", "    @Test\n", "    public void latestSignatureIsDocTimestampWithModifiedDateTest() throws GeneralSecurityException, IOException,\n", "            AbstractOperatorCreationException, AbstractPKCSException {\n", "        String chainName = CERTS_SRC + \"validCertsChain.pem\";\n", "        String privateKeyName = CERTS_SRC + \"rootCertKey.pem\";\n", "        Certificate[] certificateChain = PemFileHelper.readFirstChain(chainName);\n", "        X509Certificate rootCert = (X509Certificate) certificateChain[2];\n", "        PrivateKey rootPrivateKey = PemFileHelper.readFirstKey(privateKeyName, PASSWORD);\n", "\n", "        ValidationReport report;\n", "        try (PdfDocument document = new PdfDocument(new PdfReader(SOURCE_FOLDER + \"modifiedDocTimestampDate.pdf\"))) {\n", "            mockCertificateRetriever.setTrustedCertificates(Collections.singletonList(rootCert));\n", "\n", "            TestOcspResponseBuilder ocspBuilder = new TestOcspResponseBuilder(rootCert, rootPrivateKey);\n", "            Date currentDate = DateTimeUtil.getCurrentTimeDate();\n", "            ocspBuilder.setProducedAt(currentDate);\n", "            ocspBuilder.setThisUpdate(DateTimeUtil.getCalendar(DateTimeUtil.addDaysToDate(currentDate, 3)));\n", "            ocspBuilder.setNextUpdate(DateTimeUtil.getCalendar(DateTimeUtil.addDaysToDate(currentDate, 30)));\n", "            TestOcspClient ocspClient = new TestOcspClient().addBuilderForCertIssuer(rootCert, ocspBuilder);\n", "            builder.getRevocationDataValidator().addOcspClient(ocspClient);\n", "            parameters.setRevocationOnlineFetching(ValidatorContexts.all(), CertificateSources.all(),\n", "                            TimeBasedContexts.all(), SignatureValidationProperties.OnlineFetching.NEVER_FETCH)\n", "                    .setFreshness(ValidatorContexts.all(), CertificateSources.all(), TimeBasedContexts.all(),\n", "                            Duration.ofDays(-2));\n", "\n", "            SignatureValidator signatureValidator = builder.buildSignatureValidator();\n", "            report = signatureValidator.validateLatestSignature(document);\n", "        }\n", "\n", "        AssertValidationReport.assertThat(report, a -> a\n", "                .hasNumberOfLogs(2).hasNumberOfFailures(1)\n", "                .hasStatus(ValidationResult.INVALID)\n", "                .hasLogItem(l -> l\n", "                        .withCheckName(SignatureValidator.SIGNATURE_VERIFICATION)\n", "                        .withMessage(SignatureValidator.VALIDATING_SIGNATURE_NAME, p -> \"timestampSignature1\"))\n", "                .hasLogItem(al -> al\n", "                        .withCheckName(SignatureValidator.SIGNATURE_VERIFICATION)\n", "                        .withMessage(MessageFormatUtil.format(SignatureValidator.CANNOT_VERIFY_SIGNATURE,\n", "                                        \"timestampSignature1\"))\n", "                        .withStatus(ReportItem.ReportItemStatus.INVALID))\n", "        );\n", "    }\n", "\n", "    @Test\n", "    public void latestSignatureWithModifiedTimestampDateTest() throws GeneralSecurityException, IOException,\n", "            AbstractOperatorCreationException, AbstractPKCSException {\n", "        String chainName = CERTS_SRC + \"validCertsChain.pem\";\n", "        String privateKeyName = CERTS_SRC + \"rootCertKey.pem\";\n", "        Certificate[] certificateChain = PemFileHelper.readFirstChain(chainName);\n", "        X509Certificate rootCert = (X509Certificate) certificateChain[2];\n", "        PrivateKey rootPrivateKey = PemFileHelper.readFirstKey(privateKeyName, PASSWORD);\n", "\n", "        ValidationReport report;\n", "        try (PdfDocument document = new PdfDocument(new PdfReader(SOURCE_FOLDER + \"signatureWithModifiedTimestampDate.pdf\"))) {\n", "            mockCertificateRetriever.setTrustedCertificates(Collections.singletonList(rootCert));\n", "\n", "            TestOcspResponseBuilder ocspBuilder = new TestOcspResponseBuilder(rootCert, rootPrivateKey);\n", "            Date currentDate = DateTimeUtil.getCurrentTimeDate();\n", "            ocspBuilder.setProducedAt(currentDate);\n", "            ocspBuilder.setThisUpdate(DateTimeUtil.getCalendar(DateTimeUtil.addDaysToDate(currentDate, 3)));\n", "            ocspBuilder.setNextUpdate(DateTimeUtil.getCalendar(DateTimeUtil.addDaysToDate(currentDate, 30)));\n", "            TestOcspClient ocspClient = new TestOcspClient().addBuilderForCertIssuer(rootCert, ocspBuilder);\n", "            builder.getRevocationDataValidator().addOcspClient(ocspClient);\n", "            parameters.setRevocationOnlineFetching(ValidatorContexts.all(), CertificateSources.all(),\n", "                            TimeBasedContexts.all(), SignatureValidationProperties.OnlineFetching.NEVER_FETCH)\n", "                    .setFreshness(ValidatorContexts.all(), CertificateSources.all(), TimeBasedContexts.all(),\n", "                            Duration.ofDays(-2))\n", "                    .setContinueAfterFailure(ValidatorContexts.all() , CertificateSources.all(), false);\n", "\n", "            SignatureValidator signatureValidator = builder.buildSignatureValidator();\n", "            report = signatureValidator.validateLatestSignature(document);\n", "        }\n", "\n", "        AssertValidationReport.assertThat(report, a -> a\n", "                .hasNumberOfLogs(2).hasNumberOfFailures(1)\n", "                .hasStatus(ValidationResult.INVALID)\n", "                .hasLogItem(l -> l\n", "                        .withCheckName(SignatureValidator.SIGNATURE_VERIFICATION)\n", "                        .withMessage(SignatureValidator.VALIDATING_SIGNATURE_NAME, p -> \"Signature1\"))\n", "                .hasLogItem(al -> al\n", "                        .withCheckName(SignatureValidator.TIMESTAMP_VERIFICATION)\n", "                        .withMessage(SignatureValidator.CANNOT_VERIFY_TIMESTAMP)\n", "                        .withStatus(ReportItem.ReportItemStatus.INVALID))\n", "        );\n", "    }\n", "\n", "    @Test\n", "    public void latestSignatureWithBrokenTimestampTest() throws GeneralSecurityException, IOException {\n", "        String chainName = CERTS_SRC + \"validCertsChain.pem\";\n", "        Certificate[] certificateChain = PemFileHelper.readFirstChain(chainName);\n", "        X509Certificate rootCert = (X509Certificate) certificateChain[2];\n", "\n", "        ValidationReport report;\n", "        try (PdfDocument document = new PdfDocument(new PdfReader(SOURCE_FOLDER + \"docWithBrokenTimestamp.pdf\"))) {\n", "            mockCertificateRetriever.setTrustedCertificates(Collections.singletonList(rootCert));\n", "\n", "            SignatureValidator signatureValidator = builder.buildSignatureValidator();\n", "            report = signatureValidator.validateLatestSignature(document);\n", "        }\n", "\n", "        AssertValidationReport.assertThat(report, a -> a\n", "                .hasStatus(ValidationResult.INVALID)\n", "                .hasLogItems(2, 2, al -> al\n", "                        .withCheckName(SignatureValidator.TIMESTAMP_VERIFICATION)\n", "                        .withMessage(SignatureValidator.CANNOT_VERIFY_TIMESTAMP)\n", "                        .withStatus(ReportItem.ReportItemStatus.INVALID))\n", "        );\n", "    }\n", "\n", "    @Test\n", "    public void documentModifiedLatestSignatureTest() throws GeneralSecurityException, IOException {\n", "        String chainName = CERTS_SRC + \"validCertsChain.pem\";\n", "        Certificate[] certificateChain = PemFileHelper.readFirstChain(chainName);\n", "        X509Certificate rootCert = (X509Certificate) certificateChain[2];\n", "\n", "        ValidationReport report;\n", "        try (PdfDocument document = new PdfDocument(new PdfReader(SOURCE_FOLDER + \"modifiedDoc.pdf\"))) {\n", "            mockCertificateRetriever.setTrustedCertificates(Collections.singletonList(rootCert));\n", "\n", "            SignatureValidator signatureValidator = builder.buildSignatureValidator();\n", "            report = signatureValidator.validateLatestSignature(document);\n", "        }\n", "        AssertValidationReport.assertThat(report, a -> a\n", "                .hasStatus(ValidationResult.INVALID)\n", "                .hasLogItem(al -> al\n", "                        .withCheckName(SignatureValidator.SIGNATURE_VERIFICATION)\n", "                        .withMessage(SignatureValidator.DOCUMENT_IS_NOT_COVERED, i -> \"Signature1\"))\n", "                .hasLogItem(al -> al\n", "                        .withCheckName(SignatureValidator.SIGNATURE_VERIFICATION)\n", "                        .withMessage(SignatureValidator.CANNOT_VERIFY_SIGNATURE, i -> \"Signature1\"))\n", "\n", "        );\n", "    }\n", "\n", "    @Test\n", "    public void latestSignatureInvalidStopValidationTest() throws GeneralSecurityException, IOException {\n", "        String chainName = CERTS_SRC + \"validCertsChain.pem\";\n", "        Certificate[] certificateChain = PemFileHelper.readFirstChain(chainName);\n", "        X509Certificate rootCert = (X509Certificate) certificateChain[2];\n", "\n", "        ValidationReport report;\n", "\n", "        parameters.setContinueAfterFailure(ValidatorContexts.all(), CertificateSources.all(), false);\n", "        try (PdfDocument document = new PdfDocument(new PdfReader(SOURCE_FOLDER + \"modifiedDoc.pdf\"))) {\n", "            SignatureValidator signatureValidator = builder.buildSignatureValidator();\n", "            mockCertificateRetriever.setTrustedCertificates(Collections.singletonList(rootCert));\n", "\n", "            report = signatureValidator.validateLatestSignature(document);\n", "        }\n", "\n", "        AssertValidationReport.assertThat(report, a -> a\n", "                .hasStatus(ValidationResult.INVALID)\n", "                .hasLogItem(al -> al\n", "                        .withCheckName(SignatureValidator.SIGNATURE_VERIFICATION)\n", "                        .withMessage(SignatureValidator.DOCUMENT_IS_NOT_COVERED, i -> \"Signature1\")\n", "                        .withStatus(ReportItem.ReportItemStatus.INVALID))\n", "                .hasLogItem(al -> al\n", "                        .withCheckName(SignatureValidator.SIGNATURE_VERIFICATION)\n", "                        .withMessage(SignatureValidator.CANNOT_VERIFY_SIGNATURE, i -> \"Signature1\")\n", "                        .withStatus(ReportItem.ReportItemStatus.INVALID))\n", "        );\n", "        // check that no requests are made after failure\n", "        Assert.assertEquals(0, mockCertificateChainValidator.verificationCalls.size());\n", "    }\n", "\n", "    @Test\n", "    public void certificatesNotInLatestSignatureButTakenFromDSSTest() throws GeneralSecurityException, IOException {\n", "        String chainName = CERTS_SRC + \"validCertsChain.pem\";\n", "        Certificate[] certificateChain = PemFileHelper.readFirstChain(chainName);\n", "        X509Certificate rootCert = (X509Certificate) certificateChain[2];\n", "        X509Certificate intermediateCert = (X509Certificate) certificateChain[1];\n", "        X509Certificate signCert = (X509Certificate) certificateChain[0];\n", "\n", "        try (PdfDocument document = new PdfDocument(new PdfReader(SOURCE_FOLDER + \"docWithDss.pdf\"))) {\n", "            mockCertificateRetriever.setTrustedCertificates(Collections.singletonList(rootCert));\n", "\n", "\n", "            SignatureValidator signatureValidator = builder.buildSignatureValidator();\n", "            signatureValidator.validateLatestSignature(document);\n", "        }\n", "\n", "        Assert.assertEquals(2, mockCertificateRetriever.addKnownCertificatesCalls.size());\n", "        Collection<Certificate> dssCall = mockCertificateRetriever.addKnownCertificatesCalls.get(0);\n", "        Assert.assertEquals(3, dssCall.size());\n", "        Assert.assertEquals(1, dssCall.stream().filter(c -> ((X509Certificate) c).equals(rootCert)).count());\n", "        Assert.assertEquals(1, dssCall.stream().filter(c -> ((X509Certificate) c).equals(intermediateCert)).count());\n", "        Assert.assertEquals(1, dssCall.stream().filter(c -> ((X509Certificate) c).equals(signCert)).count());\n", "\n", "    }\n", "\n", "    @Test\n", "    public void certificatesNotInLatestSignatureButTakenFromDSSOneCertIsBrokenTest() throws GeneralSecurityException,\n", "            IOException {\n", "        String chainName = CERTS_SRC + \"validCertsChain.pem\";\n", "        Certificate[] certificateChain = PemFileHelper.readFirstChain(chainName);\n", "        X509Certificate rootCert = (X509Certificate) certificateChain[2];\n", "\n", "        ValidationReport report;\n", "        try (PdfDocument document = new PdfDocument(new PdfReader(SOURCE_FOLDER + \"docWithBrokenDss.pdf\"))) {\n", "            mockCertificateRetriever.setTrustedCertificates(Collections.singletonList(rootCert));\n", "\n", "            SignatureValidator signatureValidator = builder.buildSignatureValidator();\n", "            report = signatureValidator.validateLatestSignature(document);\n", "        }\n", "\n", "        AssertValidationReport.assertThat(report, a -> a\n", "                .hasStatus(ValidationResult.VALID)\n", "                .hasLogItem(al -> al\n", "                        .withCheckName(SignatureValidator.CERTS_FROM_DSS)\n", "                        .withExceptionCauseType(GeneralSecurityException.class))\n", "        );\n", "    }\n", "\n", "    @Test\n", "    public void indeterminateChainValidationLeadsToIndeterminateResultTest() throws IOException {\n", "        mockCertificateChainValidator.onCallDo(c -> c.report.addReportItem(\n", "                new ReportItem(\"test\", \"test\", ReportItem.ReportItemStatus.INDETERMINATE)));\n", "\n", "        ValidationReport report;\n", "        try (PdfDocument document = new PdfDocument(new PdfReader(SOURCE_FOLDER + \"validDoc.pdf\"))) {\n", "            SignatureValidator signatureValidator = builder.buildSignatureValidator();\n", "\n", "            report = signatureValidator.validateLatestSignature(document);\n", "        }\n", "\n", "\n", "        AssertValidationReport.assertThat(report, a -> a\n", "                .hasStatus(ValidationResult.INDETERMINATE)\n", "                .hasNumberOfFailures(1)\n", "                .hasLogItem(al -> al\n", "                        .withCheckName(\"test\")\n", "                        .withMessage(\"test\"))\n", "        );\n", "    }\n", "\n", "    @Test\n", "    public void invalidChainValidationLeadsToInvalidResultTest() throws IOException {\n", "        mockCertificateChainValidator.onCallDo(c -> c.report.addReportItem(\n", "                new ReportItem(\"test\", \"test\", ReportItem.ReportItemStatus.INVALID)));\n", "\n", "        ValidationReport report;\n", "        try (PdfDocument document = new PdfDocument(new PdfReader(SOURCE_FOLDER + \"validDoc.pdf\"))) {\n", "            SignatureValidator signatureValidator = builder.buildSignatureValidator();\n", "\n", "            report = signatureValidator.validateLatestSignature(document);\n", "        }\n", "\n", "        AssertValidationReport.assertThat(report, a -> a\n", "                .hasStatus(ValidationResult.INVALID)\n", "                .hasNumberOfFailures(1)\n", "                .hasLogItem(al -> al\n", "                        .withCheckName(\"test\")\n", "                        .withMessage(\"test\"))\n", "        );\n", "    }\n", "\n", "    @Test\n", "    public void invalidRevisionsValidationLeadsToInvalidResultTest() throws IOException {\n", "        mockDocumentRevisionsValidator.setReportItemStatus(ReportItemStatus.INVALID);\n", "\n", "        ValidationReport report;\n", "        try (PdfDocument document = new PdfDocument(new PdfReader(SOURCE_FOLDER + \"validDoc.pdf\"))) {\n", "            SignatureValidator signatureValidator = builder.buildSignatureValidator();\n", "\n", "            report = signatureValidator.validateSignatures(document);\n", "        }\n", "\n", "        AssertValidationReport.assertThat(report, a -> a\n", "                .hasStatus(ValidationResult.INVALID)\n", "                .hasNumberOfFailures(1)\n", "                .hasLogItem(al -> al\n", "                        .withCheckName(\"test\")\n", "                        .withMessage(\"test\"))\n", "        );\n", "    }\n", "\n", "    @Test\n", "    public void validateMultipleSignatures() throws IOException {\n", "        try (PdfDocument document = new PdfDocument(new PdfReader(SOURCE_FOLDER + \"docWithMultipleSignaturesAndTimeStamp.pdf\"))) {\n", "\n", "            SignatureValidator signatureValidator = builder.buildSignatureValidator();\n", "            ValidationReport report = signatureValidator.validateSignatures(document);\n", "\n", "            AssertValidationReport.assertThat(report, r -> r\n", "                    .hasStatus(ValidationResult.VALID)\n", "                    .hasNumberOfLogs(5).hasNumberOfFailures(0)\n", "                    .hasLogItem(l -> l\n", "                            .withCheckName(SignatureValidator.SIGNATURE_VERIFICATION)\n", "                            .withMessage(SignatureValidator.VALIDATING_SIGNATURE_NAME, p -> \"Signature1\"))\n", "                    .hasLogItem(l -> l\n", "                            .withCheckName(SignatureValidator.SIGNATURE_VERIFICATION)\n", "                            .withMessage(SignatureValidator.VALIDATING_SIGNATURE_NAME, p -> \"Signature2\"))\n", "                    .hasLogItem(l -> l\n", "                            .withCheckName(SignatureValidator.SIGNATURE_VERIFICATION)\n", "                            .withMessage(SignatureValidator.VALIDATING_SIGNATURE_NAME, p -> \"Signature3\"))\n", "                    .hasLogItem(l -> l\n", "                            .withCheckName(SignatureValidator.SIGNATURE_VERIFICATION)\n", "                            .withMessage(SignatureValidator.VALIDATING_SIGNATURE_NAME, p -> \"signer1\"))\n", "                    .hasLogItem(l -> l\n", "                            .withCheckName(SignatureValidator.SIGNATURE_VERIFICATION)\n", "                            .withMessage(SignatureValidator.VALIDATING_SIGNATURE_NAME, p -> \"signer2\"))\n", "            );\n", "\n", "            Date date1 = DateTimeUtil.addDaysToDate(TimeTestUtil.TEST_DATE_TIME, 1);\n", "            Date date2 = DateTimeUtil.addDaysToDate(TimeTestUtil.TEST_DATE_TIME, 10);\n", "            Date date3 = DateTimeUtil.addDaysToDate(TimeTestUtil.TEST_DATE_TIME, 20);\n", "\n", "            // 2 signatures with timestamp\n", "            // 3 document timestamps\n", "            Assert.assertEquals(7, mockCertificateChainValidator.verificationCalls.size());\n", "            Assert.assertTrue(mockCertificateChainValidator.verificationCalls.stream().anyMatch(c ->\n", "                    c.certificate.getSerialNumber().toString().equals(\"1491571297\")\n", "                    && c.checkDate.equals(date3)));\n", "            Assert.assertTrue(mockCertificateChainValidator.verificationCalls.stream().anyMatch(c ->\n", "                    c.certificate.getSerialNumber().toString().equals(\"1491571297\")\n", "                            && c.checkDate.equals(date2)));\n", "            Assert.assertTrue(mockCertificateChainValidator.verificationCalls.stream().anyMatch(c ->\n", "                    c.certificate.getSerialNumber().toString().equals(\"1491571297\")\n", "                            && c.checkDate.equals(date1)));\n", "            Assert.assertTrue(mockCertificateChainValidator.verificationCalls.stream().anyMatch(c ->\n", "                    c.certificate.getSerialNumber().toString().equals(\"1550593058\")\n", "                            && c.checkDate.equals(date2)));\n", "            Assert.assertTrue(mockCertificateChainValidator.verificationCalls.stream().anyMatch(c ->\n", "                    c.certificate.getSerialNumber().toString().equals(\"1701704311986\")\n", "                            && c.checkDate.equals(date1)));\n", "        }\n", "    }\n", "}\n"], "method_lines_dic": {"SignatureValidator::::stopValidation(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext)": [279, 282]}, "test_method_lines_dic": {"SignatureValidatorTest::::before()": [83, 86], "SignatureValidatorTest::::setUp()": [88, 101], "SignatureValidatorTest::::latestSignatureIsTimestampTest()": [103, 144], "SignatureValidatorTest::::latestSignatureIsDocTimestampWithModifiedDateTest()": [146, 187], "SignatureValidatorTest::::latestSignatureWithModifiedTimestampDateTest()": [189, 230], "SignatureValidatorTest::::latestSignatureWithBrokenTimestampTest()": [232, 253], "SignatureValidatorTest::::documentModifiedLatestSignatureTest()": [255, 278], "SignatureValidatorTest::::latestSignatureInvalidStopValidationTest()": [280, 309], "SignatureValidatorTest::::certificatesNotInLatestSignatureButTakenFromDSSTest()": [311, 334], "SignatureValidatorTest::::certificatesNotInLatestSignatureButTakenFromDSSOneCertIsBrokenTest()": [336, 357], "SignatureValidatorTest::::indeterminateChainValidationLeadsToIndeterminateResultTest()": [359, 379], "SignatureValidatorTest::::invalidChainValidationLeadsToInvalidResultTest()": [381, 400], "SignatureValidatorTest::::invalidRevisionsValidationLeadsToInvalidResultTest()": [402, 420], "SignatureValidatorTest::::validateMultipleSignatures()": [422, 472]}, "reverse_method_lines_dic": {"279": "SignatureValidator::::stopValidation(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext)", "280": "SignatureValidator::::stopValidation(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext)", "281": "SignatureValidator::::stopValidation(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext)", "282": "SignatureValidator::::stopValidation(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext)"}, "test_reverse_method_lines_dic": {"83": "SignatureValidatorTest::::before()", "84": "SignatureValidatorTest::::before()", "85": "SignatureValidatorTest::::before()", "86": "SignatureValidatorTest::::before()", "88": "SignatureValidatorTest::::setUp()", "89": "SignatureValidatorTest::::setUp()", "90": "SignatureValidatorTest::::setUp()", "91": "SignatureValidatorTest::::setUp()", "92": "SignatureValidatorTest::::setUp()", "93": "SignatureValidatorTest::::setUp()", "94": "SignatureValidatorTest::::setUp()", "95": "SignatureValidatorTest::::setUp()", "96": "SignatureValidatorTest::::setUp()", "97": "SignatureValidatorTest::::setUp()", "98": "SignatureValidatorTest::::setUp()", "99": "SignatureValidatorTest::::setUp()", "100": "SignatureValidatorTest::::setUp()", "101": "SignatureValidatorTest::::setUp()", "103": "SignatureValidatorTest::::latestSignatureIsTimestampTest()", "104": "SignatureValidatorTest::::latestSignatureIsTimestampTest()", "105": "SignatureValidatorTest::::latestSignatureIsTimestampTest()", "106": "SignatureValidatorTest::::latestSignatureIsTimestampTest()", "107": "SignatureValidatorTest::::latestSignatureIsTimestampTest()", "108": "SignatureValidatorTest::::latestSignatureIsTimestampTest()", "109": "SignatureValidatorTest::::latestSignatureIsTimestampTest()", "110": "SignatureValidatorTest::::latestSignatureIsTimestampTest()", "111": "SignatureValidatorTest::::latestSignatureIsTimestampTest()", "112": "SignatureValidatorTest::::latestSignatureIsTimestampTest()", "113": "SignatureValidatorTest::::latestSignatureIsTimestampTest()", "114": "SignatureValidatorTest::::latestSignatureIsTimestampTest()", "115": "SignatureValidatorTest::::latestSignatureIsTimestampTest()", "116": "SignatureValidatorTest::::latestSignatureIsTimestampTest()", "117": "SignatureValidatorTest::::latestSignatureIsTimestampTest()", "118": "SignatureValidatorTest::::latestSignatureIsTimestampTest()", "119": "SignatureValidatorTest::::latestSignatureIsTimestampTest()", "120": "SignatureValidatorTest::::latestSignatureIsTimestampTest()", "121": "SignatureValidatorTest::::latestSignatureIsTimestampTest()", "122": "SignatureValidatorTest::::latestSignatureIsTimestampTest()", "123": "SignatureValidatorTest::::latestSignatureIsTimestampTest()", "124": "SignatureValidatorTest::::latestSignatureIsTimestampTest()", "125": "SignatureValidatorTest::::latestSignatureIsTimestampTest()", "126": "SignatureValidatorTest::::latestSignatureIsTimestampTest()", "127": "SignatureValidatorTest::::latestSignatureIsTimestampTest()", "128": "SignatureValidatorTest::::latestSignatureIsTimestampTest()", "129": "SignatureValidatorTest::::latestSignatureIsTimestampTest()", "130": "SignatureValidatorTest::::latestSignatureIsTimestampTest()", "131": "SignatureValidatorTest::::latestSignatureIsTimestampTest()", "132": "SignatureValidatorTest::::latestSignatureIsTimestampTest()", "133": "SignatureValidatorTest::::latestSignatureIsTimestampTest()", "134": "SignatureValidatorTest::::latestSignatureIsTimestampTest()", "135": "SignatureValidatorTest::::latestSignatureIsTimestampTest()", "136": "SignatureValidatorTest::::latestSignatureIsTimestampTest()", "137": "SignatureValidatorTest::::latestSignatureIsTimestampTest()", "138": "SignatureValidatorTest::::latestSignatureIsTimestampTest()", "139": "SignatureValidatorTest::::latestSignatureIsTimestampTest()", "140": "SignatureValidatorTest::::latestSignatureIsTimestampTest()", "141": "SignatureValidatorTest::::latestSignatureIsTimestampTest()", "142": "SignatureValidatorTest::::latestSignatureIsTimestampTest()", "143": "SignatureValidatorTest::::latestSignatureIsTimestampTest()", "144": "SignatureValidatorTest::::latestSignatureIsTimestampTest()", "146": "SignatureValidatorTest::::latestSignatureIsDocTimestampWithModifiedDateTest()", "147": "SignatureValidatorTest::::latestSignatureIsDocTimestampWithModifiedDateTest()", "148": "SignatureValidatorTest::::latestSignatureIsDocTimestampWithModifiedDateTest()", "149": "SignatureValidatorTest::::latestSignatureIsDocTimestampWithModifiedDateTest()", "150": "SignatureValidatorTest::::latestSignatureIsDocTimestampWithModifiedDateTest()", "151": "SignatureValidatorTest::::latestSignatureIsDocTimestampWithModifiedDateTest()", "152": "SignatureValidatorTest::::latestSignatureIsDocTimestampWithModifiedDateTest()", "153": "SignatureValidatorTest::::latestSignatureIsDocTimestampWithModifiedDateTest()", "154": "SignatureValidatorTest::::latestSignatureIsDocTimestampWithModifiedDateTest()", "155": "SignatureValidatorTest::::latestSignatureIsDocTimestampWithModifiedDateTest()", "156": "SignatureValidatorTest::::latestSignatureIsDocTimestampWithModifiedDateTest()", "157": "SignatureValidatorTest::::latestSignatureIsDocTimestampWithModifiedDateTest()", "158": "SignatureValidatorTest::::latestSignatureIsDocTimestampWithModifiedDateTest()", "159": "SignatureValidatorTest::::latestSignatureIsDocTimestampWithModifiedDateTest()", "160": "SignatureValidatorTest::::latestSignatureIsDocTimestampWithModifiedDateTest()", "161": "SignatureValidatorTest::::latestSignatureIsDocTimestampWithModifiedDateTest()", "162": "SignatureValidatorTest::::latestSignatureIsDocTimestampWithModifiedDateTest()", "163": "SignatureValidatorTest::::latestSignatureIsDocTimestampWithModifiedDateTest()", "164": "SignatureValidatorTest::::latestSignatureIsDocTimestampWithModifiedDateTest()", "165": "SignatureValidatorTest::::latestSignatureIsDocTimestampWithModifiedDateTest()", "166": "SignatureValidatorTest::::latestSignatureIsDocTimestampWithModifiedDateTest()", "167": "SignatureValidatorTest::::latestSignatureIsDocTimestampWithModifiedDateTest()", "168": "SignatureValidatorTest::::latestSignatureIsDocTimestampWithModifiedDateTest()", "169": "SignatureValidatorTest::::latestSignatureIsDocTimestampWithModifiedDateTest()", "170": "SignatureValidatorTest::::latestSignatureIsDocTimestampWithModifiedDateTest()", "171": "SignatureValidatorTest::::latestSignatureIsDocTimestampWithModifiedDateTest()", "172": "SignatureValidatorTest::::latestSignatureIsDocTimestampWithModifiedDateTest()", "173": "SignatureValidatorTest::::latestSignatureIsDocTimestampWithModifiedDateTest()", "174": "SignatureValidatorTest::::latestSignatureIsDocTimestampWithModifiedDateTest()", "175": "SignatureValidatorTest::::latestSignatureIsDocTimestampWithModifiedDateTest()", "176": "SignatureValidatorTest::::latestSignatureIsDocTimestampWithModifiedDateTest()", "177": "SignatureValidatorTest::::latestSignatureIsDocTimestampWithModifiedDateTest()", "178": "SignatureValidatorTest::::latestSignatureIsDocTimestampWithModifiedDateTest()", "179": "SignatureValidatorTest::::latestSignatureIsDocTimestampWithModifiedDateTest()", "180": "SignatureValidatorTest::::latestSignatureIsDocTimestampWithModifiedDateTest()", "181": "SignatureValidatorTest::::latestSignatureIsDocTimestampWithModifiedDateTest()", "182": "SignatureValidatorTest::::latestSignatureIsDocTimestampWithModifiedDateTest()", "183": "SignatureValidatorTest::::latestSignatureIsDocTimestampWithModifiedDateTest()", "184": "SignatureValidatorTest::::latestSignatureIsDocTimestampWithModifiedDateTest()", "185": "SignatureValidatorTest::::latestSignatureIsDocTimestampWithModifiedDateTest()", "186": "SignatureValidatorTest::::latestSignatureIsDocTimestampWithModifiedDateTest()", "187": "SignatureValidatorTest::::latestSignatureIsDocTimestampWithModifiedDateTest()", "189": "SignatureValidatorTest::::latestSignatureWithModifiedTimestampDateTest()", "190": "SignatureValidatorTest::::latestSignatureWithModifiedTimestampDateTest()", "191": "SignatureValidatorTest::::latestSignatureWithModifiedTimestampDateTest()", "192": "SignatureValidatorTest::::latestSignatureWithModifiedTimestampDateTest()", "193": "SignatureValidatorTest::::latestSignatureWithModifiedTimestampDateTest()", "194": "SignatureValidatorTest::::latestSignatureWithModifiedTimestampDateTest()", "195": "SignatureValidatorTest::::latestSignatureWithModifiedTimestampDateTest()", "196": "SignatureValidatorTest::::latestSignatureWithModifiedTimestampDateTest()", "197": "SignatureValidatorTest::::latestSignatureWithModifiedTimestampDateTest()", "198": "SignatureValidatorTest::::latestSignatureWithModifiedTimestampDateTest()", "199": "SignatureValidatorTest::::latestSignatureWithModifiedTimestampDateTest()", "200": "SignatureValidatorTest::::latestSignatureWithModifiedTimestampDateTest()", "201": "SignatureValidatorTest::::latestSignatureWithModifiedTimestampDateTest()", "202": "SignatureValidatorTest::::latestSignatureWithModifiedTimestampDateTest()", "203": "SignatureValidatorTest::::latestSignatureWithModifiedTimestampDateTest()", "204": "SignatureValidatorTest::::latestSignatureWithModifiedTimestampDateTest()", "205": "SignatureValidatorTest::::latestSignatureWithModifiedTimestampDateTest()", "206": "SignatureValidatorTest::::latestSignatureWithModifiedTimestampDateTest()", "207": "SignatureValidatorTest::::latestSignatureWithModifiedTimestampDateTest()", "208": "SignatureValidatorTest::::latestSignatureWithModifiedTimestampDateTest()", "209": "SignatureValidatorTest::::latestSignatureWithModifiedTimestampDateTest()", "210": "SignatureValidatorTest::::latestSignatureWithModifiedTimestampDateTest()", "211": "SignatureValidatorTest::::latestSignatureWithModifiedTimestampDateTest()", "212": "SignatureValidatorTest::::latestSignatureWithModifiedTimestampDateTest()", "213": "SignatureValidatorTest::::latestSignatureWithModifiedTimestampDateTest()", "214": "SignatureValidatorTest::::latestSignatureWithModifiedTimestampDateTest()", "215": "SignatureValidatorTest::::latestSignatureWithModifiedTimestampDateTest()", "216": "SignatureValidatorTest::::latestSignatureWithModifiedTimestampDateTest()", "217": "SignatureValidatorTest::::latestSignatureWithModifiedTimestampDateTest()", "218": "SignatureValidatorTest::::latestSignatureWithModifiedTimestampDateTest()", "219": "SignatureValidatorTest::::latestSignatureWithModifiedTimestampDateTest()", "220": "SignatureValidatorTest::::latestSignatureWithModifiedTimestampDateTest()", "221": "SignatureValidatorTest::::latestSignatureWithModifiedTimestampDateTest()", "222": "SignatureValidatorTest::::latestSignatureWithModifiedTimestampDateTest()", "223": "SignatureValidatorTest::::latestSignatureWithModifiedTimestampDateTest()", "224": "SignatureValidatorTest::::latestSignatureWithModifiedTimestampDateTest()", "225": "SignatureValidatorTest::::latestSignatureWithModifiedTimestampDateTest()", "226": "SignatureValidatorTest::::latestSignatureWithModifiedTimestampDateTest()", "227": "SignatureValidatorTest::::latestSignatureWithModifiedTimestampDateTest()", "228": "SignatureValidatorTest::::latestSignatureWithModifiedTimestampDateTest()", "229": "SignatureValidatorTest::::latestSignatureWithModifiedTimestampDateTest()", "230": "SignatureValidatorTest::::latestSignatureWithModifiedTimestampDateTest()", "232": "SignatureValidatorTest::::latestSignatureWithBrokenTimestampTest()", "233": "SignatureValidatorTest::::latestSignatureWithBrokenTimestampTest()", "234": "SignatureValidatorTest::::latestSignatureWithBrokenTimestampTest()", "235": "SignatureValidatorTest::::latestSignatureWithBrokenTimestampTest()", "236": "SignatureValidatorTest::::latestSignatureWithBrokenTimestampTest()", "237": "SignatureValidatorTest::::latestSignatureWithBrokenTimestampTest()", "238": "SignatureValidatorTest::::latestSignatureWithBrokenTimestampTest()", "239": "SignatureValidatorTest::::latestSignatureWithBrokenTimestampTest()", "240": "SignatureValidatorTest::::latestSignatureWithBrokenTimestampTest()", "241": "SignatureValidatorTest::::latestSignatureWithBrokenTimestampTest()", "242": "SignatureValidatorTest::::latestSignatureWithBrokenTimestampTest()", "243": "SignatureValidatorTest::::latestSignatureWithBrokenTimestampTest()", "244": "SignatureValidatorTest::::latestSignatureWithBrokenTimestampTest()", "245": "SignatureValidatorTest::::latestSignatureWithBrokenTimestampTest()", "246": "SignatureValidatorTest::::latestSignatureWithBrokenTimestampTest()", "247": "SignatureValidatorTest::::latestSignatureWithBrokenTimestampTest()", "248": "SignatureValidatorTest::::latestSignatureWithBrokenTimestampTest()", "249": "SignatureValidatorTest::::latestSignatureWithBrokenTimestampTest()", "250": "SignatureValidatorTest::::latestSignatureWithBrokenTimestampTest()", "251": "SignatureValidatorTest::::latestSignatureWithBrokenTimestampTest()", "252": "SignatureValidatorTest::::latestSignatureWithBrokenTimestampTest()", "253": "SignatureValidatorTest::::latestSignatureWithBrokenTimestampTest()", "255": "SignatureValidatorTest::::documentModifiedLatestSignatureTest()", "256": "SignatureValidatorTest::::documentModifiedLatestSignatureTest()", "257": "SignatureValidatorTest::::documentModifiedLatestSignatureTest()", "258": "SignatureValidatorTest::::documentModifiedLatestSignatureTest()", "259": "SignatureValidatorTest::::documentModifiedLatestSignatureTest()", "260": "SignatureValidatorTest::::documentModifiedLatestSignatureTest()", "261": "SignatureValidatorTest::::documentModifiedLatestSignatureTest()", "262": "SignatureValidatorTest::::documentModifiedLatestSignatureTest()", "263": "SignatureValidatorTest::::documentModifiedLatestSignatureTest()", "264": "SignatureValidatorTest::::documentModifiedLatestSignatureTest()", "265": "SignatureValidatorTest::::documentModifiedLatestSignatureTest()", "266": "SignatureValidatorTest::::documentModifiedLatestSignatureTest()", "267": "SignatureValidatorTest::::documentModifiedLatestSignatureTest()", "268": "SignatureValidatorTest::::documentModifiedLatestSignatureTest()", "269": "SignatureValidatorTest::::documentModifiedLatestSignatureTest()", "270": "SignatureValidatorTest::::documentModifiedLatestSignatureTest()", "271": "SignatureValidatorTest::::documentModifiedLatestSignatureTest()", "272": "SignatureValidatorTest::::documentModifiedLatestSignatureTest()", "273": "SignatureValidatorTest::::documentModifiedLatestSignatureTest()", "274": "SignatureValidatorTest::::documentModifiedLatestSignatureTest()", "275": "SignatureValidatorTest::::documentModifiedLatestSignatureTest()", "276": "SignatureValidatorTest::::documentModifiedLatestSignatureTest()", "277": "SignatureValidatorTest::::documentModifiedLatestSignatureTest()", "278": "SignatureValidatorTest::::documentModifiedLatestSignatureTest()", "280": "SignatureValidatorTest::::latestSignatureInvalidStopValidationTest()", "281": "SignatureValidatorTest::::latestSignatureInvalidStopValidationTest()", "282": "SignatureValidatorTest::::latestSignatureInvalidStopValidationTest()", "283": "SignatureValidatorTest::::latestSignatureInvalidStopValidationTest()", "284": "SignatureValidatorTest::::latestSignatureInvalidStopValidationTest()", "285": "SignatureValidatorTest::::latestSignatureInvalidStopValidationTest()", "286": "SignatureValidatorTest::::latestSignatureInvalidStopValidationTest()", "287": "SignatureValidatorTest::::latestSignatureInvalidStopValidationTest()", "288": "SignatureValidatorTest::::latestSignatureInvalidStopValidationTest()", "289": "SignatureValidatorTest::::latestSignatureInvalidStopValidationTest()", "290": "SignatureValidatorTest::::latestSignatureInvalidStopValidationTest()", "291": "SignatureValidatorTest::::latestSignatureInvalidStopValidationTest()", "292": "SignatureValidatorTest::::latestSignatureInvalidStopValidationTest()", "293": "SignatureValidatorTest::::latestSignatureInvalidStopValidationTest()", "294": "SignatureValidatorTest::::latestSignatureInvalidStopValidationTest()", "295": "SignatureValidatorTest::::latestSignatureInvalidStopValidationTest()", "296": "SignatureValidatorTest::::latestSignatureInvalidStopValidationTest()", "297": "SignatureValidatorTest::::latestSignatureInvalidStopValidationTest()", "298": "SignatureValidatorTest::::latestSignatureInvalidStopValidationTest()", "299": "SignatureValidatorTest::::latestSignatureInvalidStopValidationTest()", "300": "SignatureValidatorTest::::latestSignatureInvalidStopValidationTest()", "301": "SignatureValidatorTest::::latestSignatureInvalidStopValidationTest()", "302": "SignatureValidatorTest::::latestSignatureInvalidStopValidationTest()", "303": "SignatureValidatorTest::::latestSignatureInvalidStopValidationTest()", "304": "SignatureValidatorTest::::latestSignatureInvalidStopValidationTest()", "305": "SignatureValidatorTest::::latestSignatureInvalidStopValidationTest()", "306": "SignatureValidatorTest::::latestSignatureInvalidStopValidationTest()", "307": "SignatureValidatorTest::::latestSignatureInvalidStopValidationTest()", "308": "SignatureValidatorTest::::latestSignatureInvalidStopValidationTest()", "309": "SignatureValidatorTest::::latestSignatureInvalidStopValidationTest()", "311": "SignatureValidatorTest::::certificatesNotInLatestSignatureButTakenFromDSSTest()", "312": "SignatureValidatorTest::::certificatesNotInLatestSignatureButTakenFromDSSTest()", "313": "SignatureValidatorTest::::certificatesNotInLatestSignatureButTakenFromDSSTest()", "314": "SignatureValidatorTest::::certificatesNotInLatestSignatureButTakenFromDSSTest()", "315": "SignatureValidatorTest::::certificatesNotInLatestSignatureButTakenFromDSSTest()", "316": "SignatureValidatorTest::::certificatesNotInLatestSignatureButTakenFromDSSTest()", "317": "SignatureValidatorTest::::certificatesNotInLatestSignatureButTakenFromDSSTest()", "318": "SignatureValidatorTest::::certificatesNotInLatestSignatureButTakenFromDSSTest()", "319": "SignatureValidatorTest::::certificatesNotInLatestSignatureButTakenFromDSSTest()", "320": "SignatureValidatorTest::::certificatesNotInLatestSignatureButTakenFromDSSTest()", "321": "SignatureValidatorTest::::certificatesNotInLatestSignatureButTakenFromDSSTest()", "322": "SignatureValidatorTest::::certificatesNotInLatestSignatureButTakenFromDSSTest()", "323": "SignatureValidatorTest::::certificatesNotInLatestSignatureButTakenFromDSSTest()", "324": "SignatureValidatorTest::::certificatesNotInLatestSignatureButTakenFromDSSTest()", "325": "SignatureValidatorTest::::certificatesNotInLatestSignatureButTakenFromDSSTest()", "326": "SignatureValidatorTest::::certificatesNotInLatestSignatureButTakenFromDSSTest()", "327": "SignatureValidatorTest::::certificatesNotInLatestSignatureButTakenFromDSSTest()", "328": "SignatureValidatorTest::::certificatesNotInLatestSignatureButTakenFromDSSTest()", "329": "SignatureValidatorTest::::certificatesNotInLatestSignatureButTakenFromDSSTest()", "330": "SignatureValidatorTest::::certificatesNotInLatestSignatureButTakenFromDSSTest()", "331": "SignatureValidatorTest::::certificatesNotInLatestSignatureButTakenFromDSSTest()", "332": "SignatureValidatorTest::::certificatesNotInLatestSignatureButTakenFromDSSTest()", "333": "SignatureValidatorTest::::certificatesNotInLatestSignatureButTakenFromDSSTest()", "334": "SignatureValidatorTest::::certificatesNotInLatestSignatureButTakenFromDSSTest()", "336": "SignatureValidatorTest::::certificatesNotInLatestSignatureButTakenFromDSSOneCertIsBrokenTest()", "337": "SignatureValidatorTest::::certificatesNotInLatestSignatureButTakenFromDSSOneCertIsBrokenTest()", "338": "SignatureValidatorTest::::certificatesNotInLatestSignatureButTakenFromDSSOneCertIsBrokenTest()", "339": "SignatureValidatorTest::::certificatesNotInLatestSignatureButTakenFromDSSOneCertIsBrokenTest()", "340": "SignatureValidatorTest::::certificatesNotInLatestSignatureButTakenFromDSSOneCertIsBrokenTest()", "341": "SignatureValidatorTest::::certificatesNotInLatestSignatureButTakenFromDSSOneCertIsBrokenTest()", "342": "SignatureValidatorTest::::certificatesNotInLatestSignatureButTakenFromDSSOneCertIsBrokenTest()", "343": "SignatureValidatorTest::::certificatesNotInLatestSignatureButTakenFromDSSOneCertIsBrokenTest()", "344": "SignatureValidatorTest::::certificatesNotInLatestSignatureButTakenFromDSSOneCertIsBrokenTest()", "345": "SignatureValidatorTest::::certificatesNotInLatestSignatureButTakenFromDSSOneCertIsBrokenTest()", "346": "SignatureValidatorTest::::certificatesNotInLatestSignatureButTakenFromDSSOneCertIsBrokenTest()", "347": "SignatureValidatorTest::::certificatesNotInLatestSignatureButTakenFromDSSOneCertIsBrokenTest()", "348": "SignatureValidatorTest::::certificatesNotInLatestSignatureButTakenFromDSSOneCertIsBrokenTest()", "349": "SignatureValidatorTest::::certificatesNotInLatestSignatureButTakenFromDSSOneCertIsBrokenTest()", "350": "SignatureValidatorTest::::certificatesNotInLatestSignatureButTakenFromDSSOneCertIsBrokenTest()", "351": "SignatureValidatorTest::::certificatesNotInLatestSignatureButTakenFromDSSOneCertIsBrokenTest()", "352": "SignatureValidatorTest::::certificatesNotInLatestSignatureButTakenFromDSSOneCertIsBrokenTest()", "353": "SignatureValidatorTest::::certificatesNotInLatestSignatureButTakenFromDSSOneCertIsBrokenTest()", "354": "SignatureValidatorTest::::certificatesNotInLatestSignatureButTakenFromDSSOneCertIsBrokenTest()", "355": "SignatureValidatorTest::::certificatesNotInLatestSignatureButTakenFromDSSOneCertIsBrokenTest()", "356": "SignatureValidatorTest::::certificatesNotInLatestSignatureButTakenFromDSSOneCertIsBrokenTest()", "357": "SignatureValidatorTest::::certificatesNotInLatestSignatureButTakenFromDSSOneCertIsBrokenTest()", "359": "SignatureValidatorTest::::indeterminateChainValidationLeadsToIndeterminateResultTest()", "360": "SignatureValidatorTest::::indeterminateChainValidationLeadsToIndeterminateResultTest()", "361": "SignatureValidatorTest::::indeterminateChainValidationLeadsToIndeterminateResultTest()", "362": "SignatureValidatorTest::::indeterminateChainValidationLeadsToIndeterminateResultTest()", "363": "SignatureValidatorTest::::indeterminateChainValidationLeadsToIndeterminateResultTest()", "364": "SignatureValidatorTest::::indeterminateChainValidationLeadsToIndeterminateResultTest()", "365": "SignatureValidatorTest::::indeterminateChainValidationLeadsToIndeterminateResultTest()", "366": "SignatureValidatorTest::::indeterminateChainValidationLeadsToIndeterminateResultTest()", "367": "SignatureValidatorTest::::indeterminateChainValidationLeadsToIndeterminateResultTest()", "368": "SignatureValidatorTest::::indeterminateChainValidationLeadsToIndeterminateResultTest()", "369": "SignatureValidatorTest::::indeterminateChainValidationLeadsToIndeterminateResultTest()", "370": "SignatureValidatorTest::::indeterminateChainValidationLeadsToIndeterminateResultTest()", "371": "SignatureValidatorTest::::indeterminateChainValidationLeadsToIndeterminateResultTest()", "372": "SignatureValidatorTest::::indeterminateChainValidationLeadsToIndeterminateResultTest()", "373": "SignatureValidatorTest::::indeterminateChainValidationLeadsToIndeterminateResultTest()", "374": "SignatureValidatorTest::::indeterminateChainValidationLeadsToIndeterminateResultTest()", "375": "SignatureValidatorTest::::indeterminateChainValidationLeadsToIndeterminateResultTest()", "376": "SignatureValidatorTest::::indeterminateChainValidationLeadsToIndeterminateResultTest()", "377": "SignatureValidatorTest::::indeterminateChainValidationLeadsToIndeterminateResultTest()", "378": "SignatureValidatorTest::::indeterminateChainValidationLeadsToIndeterminateResultTest()", "379": "SignatureValidatorTest::::indeterminateChainValidationLeadsToIndeterminateResultTest()", "381": "SignatureValidatorTest::::invalidChainValidationLeadsToInvalidResultTest()", "382": "SignatureValidatorTest::::invalidChainValidationLeadsToInvalidResultTest()", "383": "SignatureValidatorTest::::invalidChainValidationLeadsToInvalidResultTest()", "384": "SignatureValidatorTest::::invalidChainValidationLeadsToInvalidResultTest()", "385": "SignatureValidatorTest::::invalidChainValidationLeadsToInvalidResultTest()", "386": "SignatureValidatorTest::::invalidChainValidationLeadsToInvalidResultTest()", "387": "SignatureValidatorTest::::invalidChainValidationLeadsToInvalidResultTest()", "388": "SignatureValidatorTest::::invalidChainValidationLeadsToInvalidResultTest()", "389": "SignatureValidatorTest::::invalidChainValidationLeadsToInvalidResultTest()", "390": "SignatureValidatorTest::::invalidChainValidationLeadsToInvalidResultTest()", "391": "SignatureValidatorTest::::invalidChainValidationLeadsToInvalidResultTest()", "392": "SignatureValidatorTest::::invalidChainValidationLeadsToInvalidResultTest()", "393": "SignatureValidatorTest::::invalidChainValidationLeadsToInvalidResultTest()", "394": "SignatureValidatorTest::::invalidChainValidationLeadsToInvalidResultTest()", "395": "SignatureValidatorTest::::invalidChainValidationLeadsToInvalidResultTest()", "396": "SignatureValidatorTest::::invalidChainValidationLeadsToInvalidResultTest()", "397": "SignatureValidatorTest::::invalidChainValidationLeadsToInvalidResultTest()", "398": "SignatureValidatorTest::::invalidChainValidationLeadsToInvalidResultTest()", "399": "SignatureValidatorTest::::invalidChainValidationLeadsToInvalidResultTest()", "400": "SignatureValidatorTest::::invalidChainValidationLeadsToInvalidResultTest()", "402": "SignatureValidatorTest::::invalidRevisionsValidationLeadsToInvalidResultTest()", "403": "SignatureValidatorTest::::invalidRevisionsValidationLeadsToInvalidResultTest()", "404": "SignatureValidatorTest::::invalidRevisionsValidationLeadsToInvalidResultTest()", "405": "SignatureValidatorTest::::invalidRevisionsValidationLeadsToInvalidResultTest()", "406": "SignatureValidatorTest::::invalidRevisionsValidationLeadsToInvalidResultTest()", "407": "SignatureValidatorTest::::invalidRevisionsValidationLeadsToInvalidResultTest()", "408": "SignatureValidatorTest::::invalidRevisionsValidationLeadsToInvalidResultTest()", "409": "SignatureValidatorTest::::invalidRevisionsValidationLeadsToInvalidResultTest()", "410": "SignatureValidatorTest::::invalidRevisionsValidationLeadsToInvalidResultTest()", "411": "SignatureValidatorTest::::invalidRevisionsValidationLeadsToInvalidResultTest()", "412": "SignatureValidatorTest::::invalidRevisionsValidationLeadsToInvalidResultTest()", "413": "SignatureValidatorTest::::invalidRevisionsValidationLeadsToInvalidResultTest()", "414": "SignatureValidatorTest::::invalidRevisionsValidationLeadsToInvalidResultTest()", "415": "SignatureValidatorTest::::invalidRevisionsValidationLeadsToInvalidResultTest()", "416": "SignatureValidatorTest::::invalidRevisionsValidationLeadsToInvalidResultTest()", "417": "SignatureValidatorTest::::invalidRevisionsValidationLeadsToInvalidResultTest()", "418": "SignatureValidatorTest::::invalidRevisionsValidationLeadsToInvalidResultTest()", "419": "SignatureValidatorTest::::invalidRevisionsValidationLeadsToInvalidResultTest()", "420": "SignatureValidatorTest::::invalidRevisionsValidationLeadsToInvalidResultTest()", "422": "SignatureValidatorTest::::validateMultipleSignatures()", "423": "SignatureValidatorTest::::validateMultipleSignatures()", "424": "SignatureValidatorTest::::validateMultipleSignatures()", "425": "SignatureValidatorTest::::validateMultipleSignatures()", "426": "SignatureValidatorTest::::validateMultipleSignatures()", "427": "SignatureValidatorTest::::validateMultipleSignatures()", "428": "SignatureValidatorTest::::validateMultipleSignatures()", "429": "SignatureValidatorTest::::validateMultipleSignatures()", "430": "SignatureValidatorTest::::validateMultipleSignatures()", "431": "SignatureValidatorTest::::validateMultipleSignatures()", "432": "SignatureValidatorTest::::validateMultipleSignatures()", "433": "SignatureValidatorTest::::validateMultipleSignatures()", "434": "SignatureValidatorTest::::validateMultipleSignatures()", "435": "SignatureValidatorTest::::validateMultipleSignatures()", "436": "SignatureValidatorTest::::validateMultipleSignatures()", "437": "SignatureValidatorTest::::validateMultipleSignatures()", "438": "SignatureValidatorTest::::validateMultipleSignatures()", "439": "SignatureValidatorTest::::validateMultipleSignatures()", "440": "SignatureValidatorTest::::validateMultipleSignatures()", "441": "SignatureValidatorTest::::validateMultipleSignatures()", "442": "SignatureValidatorTest::::validateMultipleSignatures()", "443": "SignatureValidatorTest::::validateMultipleSignatures()", "444": "SignatureValidatorTest::::validateMultipleSignatures()", "445": "SignatureValidatorTest::::validateMultipleSignatures()", "446": "SignatureValidatorTest::::validateMultipleSignatures()", "447": "SignatureValidatorTest::::validateMultipleSignatures()", "448": "SignatureValidatorTest::::validateMultipleSignatures()", "449": "SignatureValidatorTest::::validateMultipleSignatures()", "450": "SignatureValidatorTest::::validateMultipleSignatures()", "451": "SignatureValidatorTest::::validateMultipleSignatures()", "452": "SignatureValidatorTest::::validateMultipleSignatures()", "453": "SignatureValidatorTest::::validateMultipleSignatures()", "454": "SignatureValidatorTest::::validateMultipleSignatures()", "455": "SignatureValidatorTest::::validateMultipleSignatures()", "456": "SignatureValidatorTest::::validateMultipleSignatures()", "457": "SignatureValidatorTest::::validateMultipleSignatures()", "458": "SignatureValidatorTest::::validateMultipleSignatures()", "459": "SignatureValidatorTest::::validateMultipleSignatures()", "460": "SignatureValidatorTest::::validateMultipleSignatures()", "461": "SignatureValidatorTest::::validateMultipleSignatures()", "462": "SignatureValidatorTest::::validateMultipleSignatures()", "463": "SignatureValidatorTest::::validateMultipleSignatures()", "464": "SignatureValidatorTest::::validateMultipleSignatures()", "465": "SignatureValidatorTest::::validateMultipleSignatures()", "466": "SignatureValidatorTest::::validateMultipleSignatures()", "467": "SignatureValidatorTest::::validateMultipleSignatures()", "468": "SignatureValidatorTest::::validateMultipleSignatures()", "469": "SignatureValidatorTest::::validateMultipleSignatures()", "470": "SignatureValidatorTest::::validateMultipleSignatures()", "471": "SignatureValidatorTest::::validateMultipleSignatures()", "472": "SignatureValidatorTest::::validateMultipleSignatures()"}, "tests": [{"test_lines": [103, 144], "covered_lines": [81, 82, 89, 90, 91, 92, 93, 94, 96, 154, 155, 156, 160, 161, 163, 164, 165, 214, 215, 216, 217, 218, 219, 221, 226, 233, 234, 239, 241, 243, 244, 246, 247, 249, 253, 255, 259, 260, 261, 276, 280, 281]}, {"test_lines": [146, 187], "covered_lines": [81, 82, 89, 90, 91, 92, 93, 94, 96, 154, 155, 156, 160, 161, 163, 164, 165, 214, 215, 216, 217, 218, 219, 221, 226, 227, 233, 234, 239, 241, 243, 244, 246, 247, 249, 253, 255, 259, 260, 261, 276, 280, 281]}, {"test_lines": [189, 230], "covered_lines": [81, 82, 89, 90, 91, 92, 93, 94, 96, 154, 155, 156, 160, 161, 163, 168, 170, 177, 178, 182, 184, 185, 191, 192, 193, 214, 215, 216, 217, 218, 219, 221, 226, 233, 234, 259, 260, 261, 276, 280, 281]}, {"test_lines": [232, 253], "covered_lines": [81, 82, 89, 90, 91, 92, 93, 94, 96, 154, 155, 156, 160, 161, 163, 168, 170, 171, 177, 178, 182, 184, 185, 191, 192, 196, 197, 198, 199, 204, 205, 206, 208, 214, 215, 216, 217, 218, 219, 221, 226, 233, 234, 239, 241, 243, 244, 246, 247, 249, 253, 255, 259, 260, 261, 276, 280, 281]}, {"test_lines": [255, 278], "covered_lines": [81, 82, 89, 90, 91, 92, 93, 94, 96, 154, 155, 156, 160, 161, 163, 168, 204, 205, 206, 208, 214, 215, 216, 217, 218, 219, 221, 222, 223, 226, 227, 233, 234, 259, 260, 261, 276, 280, 281]}, {"test_lines": [280, 309], "covered_lines": [81, 82, 89, 90, 91, 92, 93, 94, 96, 154, 155, 156, 157, 214, 215, 216, 217, 218, 219, 221, 222, 223, 226, 227, 233, 234, 280, 281]}, {"test_lines": [311, 334], "covered_lines": [81, 82, 89, 90, 91, 92, 93, 94, 96, 154, 155, 156, 160, 161, 163, 168, 204, 205, 206, 208, 214, 215, 216, 217, 218, 219, 221, 226, 233, 234, 259, 260, 261, 262, 263, 264, 265, 267, 268, 272, 276, 280, 281]}, {"test_lines": [336, 357], "covered_lines": [81, 82, 89, 90, 91, 92, 93, 94, 96, 154, 155, 156, 160, 161, 163, 168, 204, 205, 206, 208, 214, 215, 216, 217, 218, 219, 221, 226, 233, 234, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 272, 276, 280, 281]}, {"test_lines": [359, 379], "covered_lines": [81, 82, 89, 90, 91, 92, 93, 94, 96, 154, 155, 156, 160, 161, 163, 168, 204, 205, 206, 208, 214, 215, 216, 217, 218, 219, 221, 226, 233, 234, 259, 260, 261, 276, 280, 281]}, {"test_lines": [381, 400], "covered_lines": [81, 82, 89, 90, 91, 92, 93, 94, 96, 154, 155, 156, 160, 161, 163, 168, 204, 205, 206, 208, 214, 215, 216, 217, 218, 219, 221, 226, 233, 234, 259, 260, 261, 276, 280, 281]}, {"test_lines": [402, 420], "covered_lines": [81, 82, 89, 90, 91, 92, 93, 94, 96, 117, 118, 119, 120, 121, 122, 126, 127, 128, 130, 131, 132, 133, 134, 135, 138, 141, 142, 143, 154, 155, 156, 160, 161, 163, 168, 204, 205, 206, 208, 214, 215, 216, 217, 218, 219, 221, 226, 233, 234, 259, 260, 261, 276, 280, 281]}, {"test_lines": [422, 472], "covered_lines": [81, 82, 89, 90, 91, 92, 93, 94, 96, 117, 118, 119, 120, 121, 122, 126, 127, 128, 130, 131, 132, 133, 134, 135, 138, 141, 142, 143, 154, 155, 156, 160, 161, 163, 164, 165, 168, 170, 177, 178, 182, 184, 191, 192, 196, 197, 198, 199, 204, 205, 206, 208, 214, 215, 216, 217, 218, 219, 221, 226, 233, 234, 239, 241, 243, 244, 246, 247, 249, 253, 255, 259, 260, 261, 262, 263, 264, 265, 267, 268, 272, 276, 280, 281]}]}, "/bernard/dataset_construction/prep/repos/itext-java/sign/src/main/java/com/itextpdf/signatures/validation/v1/CertificateChainValidator.java": {"class_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.signatures.validation.v1;\n", "\n", "import com.itextpdf.commons.utils.MessageFormatUtil;\n", "import com.itextpdf.signatures.ICrlClient;\n", "import com.itextpdf.signatures.IOcspClient;\n", "import com.itextpdf.signatures.IssuingCertificateRetriever;\n", "import com.itextpdf.signatures.validation.v1.context.CertificateSource;\n", "import com.itextpdf.signatures.validation.v1.context.ValidationContext;\n", "import com.itextpdf.signatures.validation.v1.context.ValidatorContext;\n", "import com.itextpdf.signatures.validation.v1.extensions.CertificateExtension;\n", "import com.itextpdf.signatures.validation.v1.report.CertificateReportItem;\n", "import com.itextpdf.signatures.validation.v1.report.ValidationReport;\n", "import com.itextpdf.signatures.validation.v1.report.ReportItem.ReportItemStatus;\n", "\n", "import java.security.GeneralSecurityException;\n", "import java.security.cert.CertificateExpiredException;\n", "import java.security.cert.CertificateNotYetValidException;\n", "import java.security.cert.X509Certificate;\n", "import java.util.Date;\n", "import java.util.List;\n", "\n", "/**\n", " * Validator class, which is expected to be used for certificates chain validation.\n", " */\n", "public class CertificateChainValidator {\n", "    static final String CERTIFICATE_CHECK = \"Certificate check.\";\n", "    static final String VALIDITY_CHECK = \"Certificate validity period check.\";\n", "    static final String EXTENSIONS_CHECK = \"Required certificate extensions check.\";\n", "\n", "    static final String CERTIFICATE_TRUSTED =\n", "            \"Certificate {0} is trusted, revocation data checks are not required.\";\n", "    static final String CERTIFICATE_TRUSTED_FOR_DIFFERENT_CONTEXT = \"Certificate {0} is trusted for {1}, \"\n", "            + \"but it is not used in this context. Validation will continue as usual.\";\n", "    static final String EXTENSION_MISSING = \"Required extension {0} is missing or incorrect.\";\n", "    static final String ISSUER_MISSING = \"Certificate {0} isn't trusted and issuer certificate isn't provided.\";\n", "    static final String EXPIRED_CERTIFICATE = \"Certificate {0} is expired.\";\n", "    static final String NOT_YET_VALID_CERTIFICATE = \"Certificate {0} is not yet valid.\";\n", "    static final String ISSUER_CANNOT_BE_VERIFIED =\n", "            \"Issuer certificate {0} for subject certificate {1} cannot be mathematically verified.\";\n", "\n", "    private final SignatureValidationProperties properties;\n", "    private final IssuingCertificateRetriever certificateRetriever;\n", "    private final RevocationDataValidator revocationDataValidator;\n", "\n", "    /**\n", "     * Create new instance of {@link CertificateChainValidator}.\n", "     *\n", "     * @param builder See {@link  ValidatorChainBuilder}\n", "     */\n", "    protected CertificateChainValidator(ValidatorChainBuilder builder) {\n", "        this.certificateRetriever = builder.getCertificateRetriever();\n", "        this.properties = builder.getProperties();\n", "        this.revocationDataValidator = builder.getRevocationDataValidator();\n", "    }\n", "\n", "    /**\n", "     * Add {@link ICrlClient} to be used for CRL responses receiving.\n", "     *\n", "     * @param crlClient {@link ICrlClient} to be used for CRL responses receiving\n", "     *\n", "     * @return same instance of {@link CertificateChainValidator}\n", "     */\n", "    public CertificateChainValidator addCrlClient(ICrlClient crlClient) {\n", "        revocationDataValidator.addCrlClient(crlClient);\n", "        return this;\n", "    }\n", "\n", "    /**\n", "     * Add {@link IOcspClient} to be used for OCSP responses receiving.\n", "     *\n", "     * @param ocpsClient {@link IOcspClient} to be used for OCSP responses receiving\n", "     *\n", "     * @return same instance of {@link CertificateChainValidator}\n", "     */\n", "    public CertificateChainValidator addOcspClient(IOcspClient ocpsClient) {\n", "        revocationDataValidator.addOcspClient(ocpsClient);\n", "        return this;\n", "    }\n", "\n", "    /**\n", "     * Validate given certificate using provided validation date and required extensions.\n", "     *\n", "     * @param context            the validation context in which to validate the certificate chain\n", "     * @param certificate        {@link X509Certificate} to be validated\n", "     * @param validationDate     {@link Date} against which certificate is expected to be validated. Usually signing\n", "     *                           date\n", "     *\n", "     * @return {@link ValidationReport} which contains detailed validation results\n", "     */\n", "    public ValidationReport validateCertificate(ValidationContext context, X509Certificate certificate,\n", "                                                Date validationDate) {\n", "        ValidationReport result = new ValidationReport();\n", "        return validate(result, context, certificate, validationDate);\n", "    }\n", "\n", "    /**\n", "     * Validate given certificate using provided validation date and required extensions.\n", "     * Result is added into provided report.\n", "     *\n", "     * @param result             {@link ValidationReport} which is populated with detailed validation results\n", "     * @param context            the context in which to perform the validation\n", "     * @param certificate        {@link X509Certificate} to be validated\n", "     * @param validationDate     {@link Date} against which certificate is expected to be validated. Usually signing\n", "     *                           date\n", "     *\n", "     * @return {@link ValidationReport} which contains both provided and new validation results\n", "     */\n", "    public ValidationReport validate(ValidationReport result, ValidationContext context, X509Certificate certificate,\n", "            Date validationDate) {\n", "        ValidationContext localContext = context.setValidatorContext(ValidatorContext.CERTIFICATE_CHAIN_VALIDATOR);\n", "        validateValidityPeriod(result, certificate, validationDate);\n", "        validateRequiredExtensions(result, localContext, certificate);\n", "        if (stopValidation(result, localContext)) {\n", "            return result;\n", "        }\n", "        if (checkIfCertIsTrusted(result, localContext, certificate)) {\n", "            return result;\n", "        }\n", "        validateRevocationData(result, localContext, certificate, validationDate);\n", "        if (stopValidation(result, localContext)) {\n", "            return result;\n", "        }\n", "        validateChain(result, localContext, certificate, validationDate);\n", "        return result;\n", "    }\n", "\n", "    private boolean checkIfCertIsTrusted(ValidationReport result, ValidationContext context,\n", "            X509Certificate certificate) {\n", "        TrustedCertificatesStore store = certificateRetriever.getTrustedCertificatesStore();\n", "        if (store.isCertificateGenerallyTrusted(certificate)) {\n", "            // Certificate is trusted for everything.\n", "            result.addReportItem(new CertificateReportItem(certificate, CERTIFICATE_CHECK, MessageFormatUtil.format(\n", "                    CERTIFICATE_TRUSTED, certificate.getSubjectX500Principal()), ReportItemStatus.INFO));\n", "            return true;\n", "        }\n", "        if (store.isCertificateTrustedForCA(certificate)) {\n", "            // Certificate is trusted to be CA, we need to make sure it wasn't used to directly sign anything else.\n", "            if (CertificateSource.CERT_ISSUER == context.getCertificateSource()) {\n", "                result.addReportItem(new CertificateReportItem(certificate, CERTIFICATE_CHECK, MessageFormatUtil.format(\n", "                        CERTIFICATE_TRUSTED, certificate.getSubjectX500Principal()), ReportItemStatus.INFO));\n", "                return true;\n", "            }\n", "            // Certificate is trusted to be CA, but is not used in CA context.\n", "            result.addReportItem(new CertificateReportItem(certificate, CERTIFICATE_CHECK, MessageFormatUtil.format(\n", "                    CERTIFICATE_TRUSTED_FOR_DIFFERENT_CONTEXT, certificate.getSubjectX500Principal(),\n", "                    \"certificates generation\"), ReportItemStatus.INFO));\n", "        }\n", "        if (store.isCertificateTrustedForTimestamp(certificate)) {\n", "            // Certificate is trusted for timestamp signing,\n", "            // we need to make sure this chain is responsible for timestamping.\n", "            if (ValidationContext.checkIfContextChainContainsCertificateSource(context, CertificateSource.TIMESTAMP)) {\n", "                result.addReportItem(new CertificateReportItem(certificate, CERTIFICATE_CHECK, MessageFormatUtil.format(\n", "                        CERTIFICATE_TRUSTED, certificate.getSubjectX500Principal()), ReportItemStatus.INFO));\n", "                return true;\n", "            }\n", "            // Certificate is trusted for timestamps generation, but is not used in timestamp generation context.\n", "            result.addReportItem(new CertificateReportItem(certificate, CERTIFICATE_CHECK, MessageFormatUtil.format(\n", "                    CERTIFICATE_TRUSTED_FOR_DIFFERENT_CONTEXT, certificate.getSubjectX500Principal(),\n", "                    \"timestamp generation\"), ReportItemStatus.INFO));\n", "        }\n", "        if (store.isCertificateTrustedForOcsp(certificate)) {\n", "            // Certificate is trusted for OCSP response signing,\n", "            // we need to make sure this chain is responsible for OCSP response generation.\n", "            if (ValidationContext.checkIfContextChainContainsCertificateSource(\n", "                    context, CertificateSource.OCSP_ISSUER)) {\n", "                result.addReportItem(new CertificateReportItem(certificate, CERTIFICATE_CHECK, MessageFormatUtil.format(\n", "                        CERTIFICATE_TRUSTED, certificate.getSubjectX500Principal()), ReportItemStatus.INFO));\n", "                return true;\n", "            }\n", "            // Certificate is trusted for OCSP response generation, but is not used in OCSP response generation context.\n", "            result.addReportItem(new CertificateReportItem(certificate, CERTIFICATE_CHECK, MessageFormatUtil.format(\n", "                    CERTIFICATE_TRUSTED_FOR_DIFFERENT_CONTEXT, certificate.getSubjectX500Principal(),\n", "                    \"OCSP response generation\"), ReportItemStatus.INFO));\n", "        }\n", "        if (store.isCertificateTrustedForCrl(certificate)) {\n", "            // Certificate is trusted for CRL signing,\n", "            // we need to make sure this chain is responsible for CRL generation.\n", "            if (ValidationContext.checkIfContextChainContainsCertificateSource(context, CertificateSource.CRL_ISSUER)) {\n", "                result.addReportItem(new CertificateReportItem(certificate, CERTIFICATE_CHECK, MessageFormatUtil.format(\n", "                        CERTIFICATE_TRUSTED, certificate.getSubjectX500Principal()), ReportItemStatus.INFO));\n", "                return true;\n", "            }\n", "            // Certificate is trusted for CRL generation, but is not used in CRL generation context.\n", "            result.addReportItem(new CertificateReportItem(certificate, CERTIFICATE_CHECK, MessageFormatUtil.format(\n", "                    CERTIFICATE_TRUSTED_FOR_DIFFERENT_CONTEXT, certificate.getSubjectX500Principal(),\n", "                    \"CRL generation\"), ReportItemStatus.INFO));\n", "        }\n", "        return false;\n", "    }\n", "\n", "    private boolean stopValidation(ValidationReport result, ValidationContext context) {\n", "        return !properties.getContinueAfterFailure(context)\n", "                && result.getValidationResult() == ValidationReport.ValidationResult.INVALID;\n", "    }\n", "\n", "    private void validateValidityPeriod(ValidationReport result, X509Certificate certificate,\n", "            Date validationDate) {\n", "        try {\n", "            certificate.checkValidity(validationDate);\n", "        } catch (CertificateExpiredException e) {\n", "            result.addReportItem(new CertificateReportItem(certificate, VALIDITY_CHECK, MessageFormatUtil.format(\n", "                    EXPIRED_CERTIFICATE, certificate.getSubjectX500Principal()), e, ReportItemStatus.INVALID));\n", "        } catch (CertificateNotYetValidException e) {\n", "            result.addReportItem(new CertificateReportItem(certificate, VALIDITY_CHECK, MessageFormatUtil.format(\n", "                    NOT_YET_VALID_CERTIFICATE, certificate.getSubjectX500Principal()), e, ReportItemStatus.INVALID));\n", "        }\n", "    }\n", "\n", "    private void validateRequiredExtensions(ValidationReport result, ValidationContext context,\n", "            X509Certificate certificate) {\n", "        List<CertificateExtension> requiredExtensions = properties.getRequiredExtensions(context);\n", "        if (requiredExtensions != null) {\n", "            for (CertificateExtension requiredExtension : requiredExtensions) {\n", "                if (!requiredExtension.existsInCertificate(certificate)) {\n", "                    result.addReportItem(new CertificateReportItem(certificate, EXTENSIONS_CHECK,\n", "                            MessageFormatUtil.format(EXTENSION_MISSING, requiredExtension.getExtensionOid()),\n", "                            ReportItemStatus.INVALID));\n", "                }\n", "            }\n", "        }\n", "    }\n", "\n", "    private void validateRevocationData(ValidationReport report, ValidationContext context, X509Certificate certificate,\n", "            Date validationDate) {\n", "        revocationDataValidator.validate(report,\n", "                context, certificate, validationDate);\n", "    }\n", "\n", "    private void validateChain(ValidationReport result, ValidationContext context, X509Certificate certificate,\n", "            Date validationDate) {\n", "        X509Certificate issuerCertificate =\n", "                (X509Certificate) certificateRetriever.retrieveIssuerCertificate(certificate);\n", "        if (issuerCertificate == null) {\n", "            result.addReportItem(new CertificateReportItem(certificate, CERTIFICATE_CHECK, MessageFormatUtil.format(\n", "                    ISSUER_MISSING, certificate.getSubjectX500Principal()), ReportItemStatus.INDETERMINATE));\n", "            return;\n", "        }\n", "        try {\n", "            certificate.verify(issuerCertificate.getPublicKey());\n", "        } catch (GeneralSecurityException e) {\n", "            result.addReportItem(new CertificateReportItem(certificate, CERTIFICATE_CHECK,\n", "                    MessageFormatUtil.format(ISSUER_CANNOT_BE_VERIFIED, issuerCertificate.getSubjectX500Principal(),\n", "                            certificate.getSubjectX500Principal()), e, ReportItemStatus.INVALID));\n", "            return;\n", "        }\n", "        this.validate(result, context.setCertificateSource(CertificateSource.CERT_ISSUER),\n", "                issuerCertificate, validationDate);\n", "    }\n", "}\n"], "test_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.signatures.validation.v1;\n", "\n", "import com.itextpdf.commons.utils.DateTimeUtil;\n", "import com.itextpdf.commons.utils.MessageFormatUtil;\n", "import com.itextpdf.signatures.IssuingCertificateRetriever;\n", "import com.itextpdf.signatures.OID.X509Extensions;\n", "import com.itextpdf.signatures.testutils.PemFileHelper;\n", "import com.itextpdf.signatures.testutils.TimeTestUtil;\n", "import com.itextpdf.signatures.validation.v1.context.CertificateSource;\n", "import com.itextpdf.signatures.validation.v1.context.CertificateSources;\n", "import com.itextpdf.signatures.validation.v1.context.TimeBasedContext;\n", "import com.itextpdf.signatures.validation.v1.context.ValidationContext;\n", "import com.itextpdf.signatures.validation.v1.context.ValidatorContext;\n", "import com.itextpdf.signatures.validation.v1.context.ValidatorContexts;\n", "import com.itextpdf.signatures.validation.v1.extensions.CertificateExtension;\n", "import com.itextpdf.signatures.validation.v1.extensions.KeyUsage;\n", "import com.itextpdf.signatures.validation.v1.extensions.KeyUsageExtension;\n", "import com.itextpdf.signatures.validation.v1.mocks.MockRevocationDataValidator;\n", "import com.itextpdf.signatures.validation.v1.report.CertificateReportItem;\n", "import com.itextpdf.signatures.validation.v1.report.ValidationReport;\n", "import com.itextpdf.signatures.validation.v1.report.ValidationReport.ValidationResult;\n", "import com.itextpdf.test.ExtendedITextTest;\n", "import com.itextpdf.test.annotations.type.BouncyCastleUnitTest;\n", "\n", "import java.io.IOException;\n", "import java.security.cert.Certificate;\n", "import java.security.cert.CertificateException;\n", "import java.security.cert.CertificateExpiredException;\n", "import java.security.cert.CertificateNotYetValidException;\n", "import java.security.cert.X509Certificate;\n", "import java.util.Collections;\n", "\n", "import org.junit.Assert;\n", "import org.junit.Before;\n", "import org.junit.Test;\n", "import org.junit.experimental.categories.Category;\n", "\n", "@Category(BouncyCastleUnitTest.class)\n", "public class CertificateChainValidatorTest extends ExtendedITextTest {\n", "    private static final String CERTS_SRC = \"./src/test/resources/com/itextpdf/signatures/validation/v1/CertificateChainValidatorTest/\";\n", "\n", "    private ValidatorChainBuilder validatorChainBuilder;\n", "    private SignatureValidationProperties properties;\n", "    private IssuingCertificateRetriever certificateRetriever;\n", "    private final ValidationContext baseContext = new ValidationContext(ValidatorContext.CERTIFICATE_CHAIN_VALIDATOR,\n", "            CertificateSource.SIGNER_CERT, TimeBasedContext.PRESENT);\n", "    private MockRevocationDataValidator mockRevocationDataValidator;\n", "\n", "    @Before\n", "    public void setup() {\n", "        mockRevocationDataValidator = new MockRevocationDataValidator();\n", "        properties = new SignatureValidationProperties();\n", "        certificateRetriever = new IssuingCertificateRetriever();\n", "        validatorChainBuilder = new ValidatorChainBuilder()\n", "                .withIssuingCertificateRetriever(certificateRetriever)\n", "                .withSignatureValidationProperties(properties)\n", "                .withRevocationDataValidator(mockRevocationDataValidator);\n", "    }\n", "\n", "    @Test\n", "    public void validChainTest() throws CertificateException, IOException {\n", "        String chainName = CERTS_SRC + \"chain.pem\";\n", "        Certificate[] certificateChain = PemFileHelper.readFirstChain(chainName);\n", "        X509Certificate signingCert = (X509Certificate) certificateChain[0];\n", "        X509Certificate intermediateCert = (X509Certificate) certificateChain[1];\n", "        X509Certificate rootCert = (X509Certificate) certificateChain[2];\n", "\n", "        CertificateChainValidator validator = validatorChainBuilder.buildCertificateChainValidator();\n", "        certificateRetriever.addKnownCertificates(Collections.<Certificate>singletonList(intermediateCert));\n", "        certificateRetriever.setTrustedCertificates(Collections.<Certificate>singletonList(rootCert));\n", "\n", "        ValidationReport report =\n", "                validator.validateCertificate(baseContext, signingCert, TimeTestUtil.TEST_DATE_TIME);\n", "        AssertValidationReport.assertThat(report, a -> a\n", "                .hasStatus(ValidationResult.VALID)\n", "                .hasNumberOfFailures(0)\n", "                .hasNumberOfLogs(1)\n", "                .hasLogItem(la -> la\n", "                    .withCheckName(CertificateChainValidator.CERTIFICATE_CHECK)\n", "                    .withMessage(\"Certificate {0} is trusted, revocation data checks are not required.\",\n", "                                    l -> rootCert.getSubjectX500Principal())\n", "                    .withCertificate(rootCert)\n", "                   ));\n", "    }\n", "\n", "    @Test\n", "    public void revocationValidationCallTest() throws CertificateException, IOException {\n", "        String chainName = CERTS_SRC + \"chain.pem\";\n", "        Certificate[] certificateChain = PemFileHelper.readFirstChain(chainName);\n", "        X509Certificate signingCert = (X509Certificate) certificateChain[0];\n", "        X509Certificate intermediateCert = (X509Certificate) certificateChain[1];\n", "        X509Certificate rootCert = (X509Certificate) certificateChain[2];\n", "\n", "        CertificateChainValidator validator = validatorChainBuilder.buildCertificateChainValidator();\n", "        certificateRetriever.addKnownCertificates(Collections.<Certificate>singletonList(intermediateCert));\n", "        certificateRetriever.setTrustedCertificates(Collections.<Certificate>singletonList(rootCert));\n", "        validator.validateCertificate(baseContext, signingCert, TimeTestUtil.TEST_DATE_TIME);\n", "\n", "\n", "        Assert.assertEquals(2, mockRevocationDataValidator.calls.size());\n", "\n", "        MockRevocationDataValidator.RevocationDataValidatorCall call1 = mockRevocationDataValidator.calls.get(0);\n", "        Assert.assertEquals(signingCert, call1.certificate);\n", "        Assert.assertEquals(CertificateSource.SIGNER_CERT, call1.context.getCertificateSource());\n", "        Assert.assertEquals(ValidatorContext.CERTIFICATE_CHAIN_VALIDATOR, call1.context.getValidatorContext());\n", "        Assert.assertEquals(TimeTestUtil.TEST_DATE_TIME, call1.validationDate);\n", "\n", "        MockRevocationDataValidator.RevocationDataValidatorCall call2 = mockRevocationDataValidator.calls.get(1);\n", "        Assert.assertEquals(intermediateCert, call2.certificate);\n", "        Assert.assertEquals(CertificateSource.CERT_ISSUER, call2.context.getCertificateSource());\n", "        Assert.assertEquals(ValidatorContext.CERTIFICATE_CHAIN_VALIDATOR, call2.context.getValidatorContext());\n", "        Assert.assertEquals(TimeTestUtil.TEST_DATE_TIME, call2.validationDate);\n", "    }\n", "\n", "    @Test\n", "    public void severalFailuresWithProceedAfterFailTest() throws CertificateException, IOException {\n", "        String chainName = CERTS_SRC + \"invalidCertsChain.pem\";\n", "        Certificate[] certificateChain = PemFileHelper.readFirstChain(chainName);\n", "        X509Certificate signingCert = (X509Certificate) certificateChain[0];\n", "        X509Certificate intermediateCert = (X509Certificate) certificateChain[1];\n", "        X509Certificate rootCert = (X509Certificate) certificateChain[2];\n", "\n", "        CertificateChainValidator validator = validatorChainBuilder.buildCertificateChainValidator();\n", "        certificateRetriever.addKnownCertificates(Collections.singletonList(intermediateCert));\n", "        certificateRetriever.setTrustedCertificates(Collections.singletonList(rootCert));\n", "\n", "        properties.setContinueAfterFailure(ValidatorContexts.all() , CertificateSources.all(), true);\n", "        // Set random extension as a required one to force the test to fail.\n", "        properties.setRequiredExtensions(CertificateSources.of(CertificateSource.CERT_ISSUER),\n", "                Collections.<CertificateExtension>singletonList(new KeyUsageExtension(KeyUsage.DECIPHER_ONLY)));\n", "\n", "        ValidationReport report = validator.validateCertificate(baseContext, signingCert, DateTimeUtil.getCurrentTimeDate());\n", "\n", "        Assert.assertEquals(ValidationResult.INVALID, report.getValidationResult());\n", "        Assert.assertEquals(3, report.getFailures().size());\n", "        Assert.assertEquals(4, report.getLogs().size());\n", "        Assert.assertEquals(report.getFailures().get(0), report.getLogs().get(0));\n", "        Assert.assertEquals(report.getFailures().get(1), report.getLogs().get(1));\n", "        Assert.assertEquals(report.getFailures().get(2), report.getLogs().get(2));\n", "\n", "        CertificateReportItem failure1 = report.getCertificateFailures().get(0);\n", "        Assert.assertEquals(signingCert, failure1.getCertificate());\n", "        Assert.assertEquals(\"Required certificate extensions check.\", failure1.getCheckName());\n", "        Assert.assertEquals(MessageFormatUtil.format(\n", "                \"Required extension {0} is missing or incorrect.\", X509Extensions.KEY_USAGE), failure1.getMessage());\n", "\n", "        CertificateReportItem failure2 = report.getCertificateFailures().get(1);\n", "        Assert.assertEquals(intermediateCert, failure2.getCertificate());\n", "        Assert.assertEquals(\"Required certificate extensions check.\", failure2.getCheckName());\n", "        Assert.assertEquals(MessageFormatUtil.format(\n", "                \"Required extension {0} is missing or incorrect.\", X509Extensions.KEY_USAGE), failure2.getMessage());\n", "\n", "        CertificateReportItem failure3 = report.getCertificateFailures().get(2);\n", "        Assert.assertEquals(rootCert, failure3.getCertificate());\n", "        Assert.assertEquals(\"Required certificate extensions check.\", failure3.getCheckName());\n", "        Assert.assertEquals(MessageFormatUtil.format(\n", "                \"Required extension {0} is missing or incorrect.\", X509Extensions.KEY_USAGE), failure3.getMessage());\n", "    }\n", "\n", "    @Test\n", "    public void severalFailuresWithoutProceedAfterFailTest() throws CertificateException, IOException {\n", "        String chainName = CERTS_SRC + \"invalidCertsChain.pem\";\n", "        Certificate[] certificateChain = PemFileHelper.readFirstChain(chainName);\n", "        X509Certificate signingCert = (X509Certificate) certificateChain[0];\n", "        X509Certificate intermediateCert = (X509Certificate) certificateChain[1];\n", "        X509Certificate rootCert = (X509Certificate) certificateChain[2];\n", "\n", "        CertificateChainValidator validator = validatorChainBuilder.buildCertificateChainValidator();\n", "        certificateRetriever.addKnownCertificates(Collections.singletonList(intermediateCert));\n", "        certificateRetriever.setTrustedCertificates(Collections.singletonList(rootCert));\n", "\n", "        properties.setContinueAfterFailure(ValidatorContexts.all() , CertificateSources.all(),false);\n", "        // Set random extension as a required one to force the test to fail.\n", "        properties.setRequiredExtensions(CertificateSources.of(CertificateSource.CERT_ISSUER),\n", "                Collections.<CertificateExtension>singletonList(new KeyUsageExtension(KeyUsage.DECIPHER_ONLY)));\n", "\n", "        ValidationReport report = validator.validateCertificate(baseContext, signingCert, DateTimeUtil.getCurrentTimeDate());\n", "\n", "        Assert.assertEquals(ValidationResult.INVALID, report.getValidationResult());\n", "        Assert.assertEquals(1, report.getFailures().size());\n", "        Assert.assertEquals(1, report.getLogs().size());\n", "        Assert.assertEquals(report.getFailures().get(0), report.getLogs().get(0));\n", "\n", "        CertificateReportItem failure1 = report.getCertificateFailures().get(0);\n", "        Assert.assertEquals(signingCert, failure1.getCertificate());\n", "        Assert.assertEquals(\"Required certificate extensions check.\", failure1.getCheckName());\n", "        Assert.assertEquals(MessageFormatUtil.format(\n", "                \"Required extension {0} is missing or incorrect.\", X509Extensions.KEY_USAGE), failure1.getMessage());\n", "    }\n", "\n", "    @Test\n", "    public void intermediateCertTrustedTest() throws CertificateException, IOException {\n", "        String chainName = CERTS_SRC + \"chain.pem\";\n", "        Certificate[] certificateChain = PemFileHelper.readFirstChain(chainName);\n", "        X509Certificate signingCert = (X509Certificate) certificateChain[0];\n", "        X509Certificate intermediateCert = (X509Certificate) certificateChain[1];\n", "\n", "        CertificateChainValidator validator = validatorChainBuilder.buildCertificateChainValidator();\n", "        certificateRetriever.setTrustedCertificates(Collections.singletonList(intermediateCert));\n", "\n", "        ValidationReport report = validator.validateCertificate(baseContext, signingCert, DateTimeUtil.getCurrentTimeDate());\n", "\n", "        AssertValidationReport.assertThat(report, a -> a\n", "            .hasNumberOfFailures(0)\n", "            .hasNumberOfLogs(1)\n", "            .hasLogItem(la -> la\n", "                .withCheckName(CertificateChainValidator.CERTIFICATE_CHECK)\n", "                .withMessage(CertificateChainValidator.CERTIFICATE_TRUSTED,\n", "                             l -> intermediateCert.getSubjectX500Principal())\n", "               ));\n", "    }\n", "\n", "    @Test\n", "    public void validChainRequiredExtensionPositiveTest() throws CertificateException, IOException {\n", "        String chainName = CERTS_SRC + \"chain.pem\";\n", "        Certificate[] certificateChain = PemFileHelper.readFirstChain(chainName);\n", "        X509Certificate signingCert = (X509Certificate) certificateChain[0];\n", "        X509Certificate intermediateCert = (X509Certificate) certificateChain[1];\n", "        X509Certificate rootCert = (X509Certificate) certificateChain[2];\n", "\n", "        CertificateChainValidator validator = validatorChainBuilder.buildCertificateChainValidator();\n", "        certificateRetriever.addKnownCertificates(Collections.singletonList(intermediateCert));\n", "        certificateRetriever.setTrustedCertificates(Collections.singletonList(rootCert));\n", "\n", "        ValidationReport report = validator.validateCertificate(baseContext, signingCert, DateTimeUtil.getCurrentTimeDate());\n", "\n", "        AssertValidationReport.assertThat(report, a -> a\n", "                .hasStatus(ValidationResult.VALID)\n", "                .hasNumberOfFailures(0)\n", "                .hasNumberOfLogs(1)\n", "                .hasLogItem(la -> la\n", "                    .withCheckName(CertificateChainValidator.CERTIFICATE_CHECK)\n", "                    .withMessage(CertificateChainValidator.CERTIFICATE_TRUSTED,\n", "                            l -> rootCert.getSubjectX500Principal())\n", "                    .withCertificate(rootCert)\n", "                   ));\n", "    }\n", "\n", "    @Test\n", "    public void validChainRequiredExtensionNegativeTest() throws CertificateException, IOException {\n", "        String chainName = CERTS_SRC + \"chain.pem\";\n", "        Certificate[] certificateChain = PemFileHelper.readFirstChain(chainName);\n", "        X509Certificate signingCert = (X509Certificate) certificateChain[0];\n", "        X509Certificate intermediateCert = (X509Certificate) certificateChain[1];\n", "        X509Certificate rootCert = (X509Certificate) certificateChain[2];\n", "\n", "        CertificateChainValidator validator = validatorChainBuilder.buildCertificateChainValidator();\n", "        certificateRetriever.addKnownCertificates(Collections.singletonList(intermediateCert));\n", "        certificateRetriever.setTrustedCertificates(Collections.singletonList(rootCert));\n", "\n", "        ValidationReport report = validator.validateCertificate(baseContext.setCertificateSource(CertificateSource.CERT_ISSUER),\n", "                signingCert, DateTimeUtil.getCurrentTimeDate());\n", "\n", "        AssertValidationReport.assertThat(report, a -> a\n", "                .hasNumberOfFailures(2)\n", "                .hasNumberOfLogs(3)\n", "                .hasLogItem(la -> la\n", "                    .withCheckName(CertificateChainValidator.CERTIFICATE_CHECK)\n", "                    .withMessage(CertificateChainValidator.CERTIFICATE_TRUSTED,\n", "                                    l-> rootCert.getSubjectX500Principal())\n", "                    .withCertificate(rootCert)\n", "                   )\n", "                .hasLogItem(la -> la\n", "                    .withCheckName(CertificateChainValidator.EXTENSIONS_CHECK)\n", "                    .withMessage(CertificateChainValidator.EXTENSION_MISSING,\n", "                                            l ->X509Extensions.KEY_USAGE)\n", "                    .withCertificate(signingCert)\n", "                   )\n", "                .hasLogItem(la -> la\n", "                    .withCheckName(CertificateChainValidator.EXTENSIONS_CHECK)\n", "                    .withMessage(CertificateChainValidator.EXTENSION_MISSING,\n", "                                    l -> X509Extensions.BASIC_CONSTRAINTS)\n", "                    .withCertificate(signingCert)\n", "                   ));\n", "\n", "    }\n", "\n", "    @Test\n", "    public void validChainTrustedRootIsnSetTest() throws CertificateException, IOException {\n", "        String chainName = CERTS_SRC + \"chain.pem\";\n", "        Certificate[] certificateChain = PemFileHelper.readFirstChain(chainName);\n", "        X509Certificate signingCert = (X509Certificate) certificateChain[0];\n", "        X509Certificate intermediateCert = (X509Certificate) certificateChain[1];\n", "\n", "        CertificateChainValidator validator = validatorChainBuilder.buildCertificateChainValidator();\n", "        certificateRetriever.addKnownCertificates(Collections.singletonList(intermediateCert));\n", "\n", "        ValidationReport report = validator.validateCertificate(baseContext, signingCert, DateTimeUtil.getCurrentTimeDate());\n", "\n", "        AssertValidationReport.assertThat(report, a -> a\n", "                .hasStatus(ValidationResult.INDETERMINATE)\n", "                .hasNumberOfFailures(1)\n", "                .hasNumberOfLogs(1)\n", "                .hasLogItem(la -> la\n", "                    .withCheckName(CertificateChainValidator.CERTIFICATE_CHECK)\n", "                    .withMessage(CertificateChainValidator.ISSUER_MISSING,\n", "                                            l-> intermediateCert.getSubjectX500Principal())\n", "                    .withCertificate(intermediateCert)\n", "                   ));\n", "    }\n", "\n", "    @Test\n", "    public void intermediateCertIsNotYetValidTest() throws CertificateException, IOException {\n", "        String chainName = CERTS_SRC + \"chain.pem\";\n", "        String intermediateCertName = CERTS_SRC + \"not-yet-valid-intermediate.cert.pem\";\n", "        Certificate[] certificateChain = PemFileHelper.readFirstChain(chainName);\n", "        X509Certificate signingCert = (X509Certificate) certificateChain[0];\n", "        X509Certificate intermediateCert = (X509Certificate) PemFileHelper.readFirstChain(intermediateCertName)[0];\n", "        X509Certificate rootCert = (X509Certificate) certificateChain[2];\n", "\n", "        CertificateChainValidator validator = validatorChainBuilder.buildCertificateChainValidator();\n", "        certificateRetriever.addKnownCertificates(Collections.singletonList(intermediateCert));\n", "        certificateRetriever.setTrustedCertificates(Collections.singletonList(rootCert));\n", "\n", "        ValidationReport report = validator.validateCertificate(baseContext, signingCert, TimeTestUtil.TEST_DATE_TIME);\n", "\n", "\n", "        AssertValidationReport.assertThat(report, a -> a\n", "                .hasNumberOfFailures(1)\n", "                .hasNumberOfLogs(2)\n", "                .hasLogItem(la -> la\n", "                    .withCheckName(CertificateChainValidator.CERTIFICATE_CHECK)\n", "                    .withMessage(CertificateChainValidator.CERTIFICATE_TRUSTED,\n", "                                l->rootCert.getSubjectX500Principal())\n", "                    .withCertificate(rootCert)\n", "                   )\n", "                .hasLogItem(la -> la\n", "                    .withCheckName(CertificateChainValidator.VALIDITY_CHECK)\n", "                    .withMessage(CertificateChainValidator.NOT_YET_VALID_CERTIFICATE,\n", "                                    l-> intermediateCert.getSubjectX500Principal())\n", "                    .withCertificate(intermediateCert)\n", "                    .withExceptionCauseType(CertificateNotYetValidException.class)\n", "                   ));\n", "    }\n", "\n", "    @Test\n", "    public void intermediateCertIsExpiredTest() throws CertificateException, IOException {\n", "        String chainName = CERTS_SRC + \"chain.pem\";\n", "        String intermediateCertName = CERTS_SRC + \"expired-intermediate.cert.pem\";\n", "        Certificate[] certificateChain = PemFileHelper.readFirstChain(chainName);\n", "        X509Certificate signingCert = (X509Certificate) certificateChain[0];\n", "        X509Certificate intermediateCert = (X509Certificate) PemFileHelper.readFirstChain(intermediateCertName)[0];\n", "        X509Certificate rootCert = (X509Certificate) certificateChain[2];\n", "\n", "        CertificateChainValidator validator = validatorChainBuilder.buildCertificateChainValidator();\n", "        certificateRetriever.addKnownCertificates(Collections.singletonList(intermediateCert));\n", "        certificateRetriever.setTrustedCertificates(Collections.singletonList(rootCert));\n", "\n", "        ValidationReport report = validator.validateCertificate(baseContext, signingCert, DateTimeUtil.getCurrentTimeDate());\n", "\n", "        AssertValidationReport.assertThat(report, a -> a\n", "                .hasStatus(ValidationResult.INVALID)\n", "                .hasNumberOfFailures(1)\n", "                .hasNumberOfLogs(2)\n", "                .hasLogItem(la -> la\n", "                        .withCheckName(CertificateChainValidator.CERTIFICATE_CHECK)\n", "                        .withMessage(CertificateChainValidator.CERTIFICATE_TRUSTED,\n", "                                        l -> rootCert.getSubjectX500Principal())\n", "                        .withCertificate(rootCert))\n", "                .hasLogItem(la -> la\n", "                        .withCheckName(CertificateChainValidator.VALIDITY_CHECK)\n", "                        .withMessage(CertificateChainValidator.EXPIRED_CERTIFICATE,\n", "                                l-> intermediateCert.getSubjectX500Principal())\n", "                        .withCertificate(intermediateCert)\n", "                        .withExceptionCauseType(CertificateExpiredException.class))\n", "        );\n", "    }\n", "\n", "    @Test\n", "    public void certificateGenerallyTrustedTest() throws CertificateException, IOException {\n", "        String chainName = CERTS_SRC + \"chain.pem\";\n", "        Certificate[] certificateChain = PemFileHelper.readFirstChain(chainName);\n", "        X509Certificate signingCert = (X509Certificate) certificateChain[0];\n", "        X509Certificate intermediateCert = (X509Certificate) certificateChain[1];\n", "        X509Certificate rootCert = (X509Certificate) certificateChain[2];\n", "\n", "        CertificateChainValidator validator = validatorChainBuilder.buildCertificateChainValidator();\n", "        certificateRetriever.addKnownCertificates(Collections.singletonList(intermediateCert));\n", "        certificateRetriever.getTrustedCertificatesStore().addGenerallyTrustedCertificates(Collections.singletonList(rootCert));\n", "\n", "        // Remove required extensions to make test pass.\n", "        properties.setRequiredExtensions(CertificateSources.all(), Collections.<CertificateExtension>emptyList());\n", "\n", "        ValidationReport report1 = validator.validateCertificate(baseContext, signingCert, DateTimeUtil.getCurrentTimeDate());\n", "\n", "        AssertValidationReport.assertThat(report1, a-> a\n", "                .hasStatus(ValidationResult.VALID)\n", "                .hasNumberOfFailures(0)\n", "                .hasNumberOfLogs(1)\n", "                .hasLogItem(l -> l.withCheckName(\"Certificate check.\")\n", "                        .withMessage(CertificateChainValidator.CERTIFICATE_TRUSTED,\n", "                            i-> rootCert.getSubjectX500Principal())\n", "                        .withCertificate(rootCert))\n", "        );\n", "\n", "        ValidationReport report2 = validator.validateCertificate(baseContext.setCertificateSource(CertificateSource.OCSP_ISSUER),\n", "                signingCert, DateTimeUtil.getCurrentTimeDate());\n", "\n", "        AssertValidationReport.assertThat(report2, a-> a\n", "                .hasStatus(ValidationResult.VALID)\n", "                .hasNumberOfFailures(0)\n", "                .hasNumberOfLogs(1)\n", "                .hasLogItem(l -> l.withCheckName(\"Certificate check.\")\n", "                        .withMessage(CertificateChainValidator.CERTIFICATE_TRUSTED,\n", "                                i-> rootCert.getSubjectX500Principal())\n", "                        .withCertificate(rootCert))\n", "                );\n", "\n", "        ValidationReport report3 = validator.validateCertificate(baseContext.setCertificateSource(CertificateSource.TIMESTAMP),\n", "                signingCert, DateTimeUtil.getCurrentTimeDate());\n", "\n", "        AssertValidationReport.assertThat(report3, a-> a\n", "                .hasStatus(ValidationResult.VALID)\n", "                .hasNumberOfFailures(0)\n", "                .hasNumberOfLogs(1)\n", "                .hasLogItem(l -> l.withCheckName(\"Certificate check.\")\n", "                    .withMessage(CertificateChainValidator.CERTIFICATE_TRUSTED,\n", "                                            i -> rootCert.getSubjectX500Principal())\n", "                    .withCertificate(rootCert))\n", "                );\n", "    }\n", "\n", "    @Test\n", "    public void rootCertificateTrustedForCATest() throws CertificateException, IOException {\n", "        String chainName = CERTS_SRC + \"chain.pem\";\n", "        Certificate[] certificateChain = PemFileHelper.readFirstChain(chainName);\n", "        X509Certificate signingCert = (X509Certificate) certificateChain[0];\n", "        X509Certificate intermediateCert = (X509Certificate) certificateChain[1];\n", "        X509Certificate rootCert = (X509Certificate) certificateChain[2];\n", "\n", "        CertificateChainValidator validator = validatorChainBuilder.buildCertificateChainValidator();\n", "        certificateRetriever.addKnownCertificates(Collections.singletonList(intermediateCert));\n", "        certificateRetriever.getTrustedCertificatesStore().addCATrustedCertificates(Collections.singletonList(rootCert));\n", "\n", "        // Remove required extensions to make test pass.\n", "        properties.setRequiredExtensions(CertificateSources.all(), Collections.<CertificateExtension>emptyList());\n", "\n", "        ValidationReport report1 = validator.validateCertificate(baseContext, signingCert, DateTimeUtil.getCurrentTimeDate());\n", "\n", "        AssertValidationReport.assertThat(report1, a-> a\n", "                .hasStatus(ValidationResult.VALID)\n", "                .hasNumberOfFailures(0)\n", "                .hasNumberOfLogs(1)\n", "                .hasLogItem(l -> l.withCheckName(\"Certificate check.\")\n", "                        .withMessage(CertificateChainValidator.CERTIFICATE_TRUSTED,\n", "                                        i->rootCert.getSubjectX500Principal())\n", "                        .withCertificate(rootCert))\n", "                );\n", "\n", "        ValidationReport report2 = validator.validateCertificate(baseContext.setCertificateSource(CertificateSource.OCSP_ISSUER),\n", "                signingCert, DateTimeUtil.getCurrentTimeDate());\n", "\n", "        AssertValidationReport.assertThat(report2, a-> a\n", "                .hasStatus(ValidationResult.VALID)\n", "                .hasNumberOfFailures(0)\n", "                .hasNumberOfLogs(1)\n", "                .hasLogItem(l -> l.withCheckName(\"Certificate check.\")\n", "                        .withMessage(CertificateChainValidator.CERTIFICATE_TRUSTED,\n", "                                        i->rootCert.getSubjectX500Principal())\n", "                        .withCertificate(rootCert))\n", "                );\n", "\n", "        ValidationReport report3 = validator.validateCertificate(baseContext.setCertificateSource(CertificateSource.TIMESTAMP),\n", "                signingCert, DateTimeUtil.getCurrentTimeDate());\n", "\n", "        AssertValidationReport.assertThat(report3, a-> a\n", "                .hasStatus(ValidationResult.VALID)\n", "                .hasNumberOfFailures(0)\n", "                .hasNumberOfLogs(1)\n", "                .hasLogItem(l -> l.withCheckName(\"Certificate check.\")\n", "                        .withMessage(CertificateChainValidator.CERTIFICATE_TRUSTED,\n", "                                        i->rootCert.getSubjectX500Principal())\n", "                        .withCertificate(rootCert))\n", "                );\n", "    }\n", "\n", "    @Test\n", "    public void firstCertificateTrustedForCATest() throws CertificateException, IOException {\n", "        String chainName = CERTS_SRC + \"chain.pem\";\n", "        Certificate[] certificateChain = PemFileHelper.readFirstChain(chainName);\n", "        X509Certificate signingCert = (X509Certificate) certificateChain[0];\n", "        X509Certificate intermediateCert = (X509Certificate) certificateChain[1];\n", "\n", "        CertificateChainValidator validator = validatorChainBuilder.buildCertificateChainValidator();\n", "        certificateRetriever.addKnownCertificates(Collections.singletonList(intermediateCert));\n", "        certificateRetriever.getTrustedCertificatesStore().addCATrustedCertificates(Collections.singletonList(signingCert));\n", "\n", "        // Remove required extensions to make test pass.\n", "        properties.setRequiredExtensions(CertificateSources.all(), Collections.<CertificateExtension>emptyList());\n", "\n", "        ValidationReport report1 = validator.validateCertificate(baseContext.setCertificateSource(CertificateSource.CERT_ISSUER),\n", "                signingCert, DateTimeUtil.getCurrentTimeDate());\n", "\n", "        // This works fine because certificate in question has CertificateSource.CERT_ISSUER context.\n", "        AssertValidationReport.assertThat(report1, a-> a\n", "                .hasStatus(ValidationResult.VALID)\n", "                .hasNumberOfFailures(0)\n", "                .hasNumberOfLogs(1)\n", "                .hasLogItem(l -> l.withCheckName(\"Certificate check.\")\n", "                        .withMessage(CertificateChainValidator.CERTIFICATE_TRUSTED,\n", "                                     i-> signingCert.getSubjectX500Principal())\n", "                        .withCertificate(signingCert))\n", "                );\n", "\n", "        ValidationReport report2 = validator.validateCertificate(baseContext.setCertificateSource(CertificateSource.TIMESTAMP),\n", "                signingCert, DateTimeUtil.getCurrentTimeDate());\n", "\n", "        // This doesn't work because certificate in question has CertificateSource.TIMESTAMP context.\n", "        AssertValidationReport.assertThat(report2, a-> a\n", "                .hasStatus(ValidationResult.INDETERMINATE)\n", "                .hasNumberOfFailures(1)\n", "                .hasNumberOfLogs(2)\n", "                .hasLogItem(al->al\n", "                    .withMessage(CertificateChainValidator.CERTIFICATE_TRUSTED_FOR_DIFFERENT_CONTEXT,\n", "                                i -> signingCert.getSubjectX500Principal(), i -> \"certificates generation\"))\n", "                .hasLogItem(al->al\n", "                    .withMessage(CertificateChainValidator.ISSUER_MISSING,\n", "                        i -> intermediateCert.getSubjectX500Principal()))\n", "                );\n", "    }\n", "\n", "    @Test\n", "    public void rootCertificateTrustedForOCSPTest() throws CertificateException, IOException {\n", "        String chainName = CERTS_SRC + \"chain.pem\";\n", "        Certificate[] certificateChain = PemFileHelper.readFirstChain(chainName);\n", "        X509Certificate signingCert = (X509Certificate) certificateChain[0];\n", "        X509Certificate intermediateCert = (X509Certificate) certificateChain[1];\n", "        X509Certificate rootCert = (X509Certificate) certificateChain[2];\n", "\n", "        CertificateChainValidator validator = validatorChainBuilder.buildCertificateChainValidator();\n", "        certificateRetriever.addKnownCertificates(Collections.singletonList(intermediateCert));\n", "        certificateRetriever.getTrustedCertificatesStore().addOcspTrustedCertificates(Collections.singletonList(rootCert));\n", "\n", "        // Remove required extensions to make test pass.\n", "        properties.setRequiredExtensions(CertificateSources.all(), Collections.<CertificateExtension>emptyList());\n", "\n", "        ValidationReport report1 = validator.validateCertificate(baseContext.setCertificateSource(CertificateSource.OCSP_ISSUER),\n", "                signingCert, DateTimeUtil.getCurrentTimeDate());\n", "\n", "        // This works fine because even though root certificate has CertificateSource.CERT_ISSUER context,\n", "        // the chain contains initial certificate with CertificateSource.OCSP_ISSUER context.\n", "        AssertValidationReport.assertThat(report1, a-> a\n", "                .hasStatus(ValidationResult.VALID)\n", "                .hasNumberOfFailures(0)\n", "                .hasNumberOfLogs(1)\n", "                .hasLogItem(l -> l.withCheckName(\"Certificate check.\")\n", "                        .withMessage(CertificateChainValidator.CERTIFICATE_TRUSTED,\n", "                                       i-> rootCert.getSubjectX500Principal())\n", "                        .withCertificate(rootCert))\n", "                );\n", "\n", "        ValidationReport report2 = validator.validateCertificate(baseContext.setCertificateSource(CertificateSource.TIMESTAMP),\n", "                signingCert, DateTimeUtil.getCurrentTimeDate());\n", "\n", "        // This doesn't work because root certificate has CertificateSource.CERT_ISSUER context and\n", "        // the chain doesn't contain any certificate with CertificateSource.OCSP_ISSUER context.\n", "        AssertValidationReport.assertThat(report2, a-> a\n", "                .hasStatus(ValidationResult.INDETERMINATE)\n", "                .hasNumberOfFailures(1)\n", "                .hasNumberOfLogs(2)\n", "                .hasLogItem(l -> l\n", "                    .withMessage(CertificateChainValidator.CERTIFICATE_TRUSTED_FOR_DIFFERENT_CONTEXT,\n", "                                i-> rootCert.getSubjectX500Principal(),i-> \"OCSP response generation\"))\n", "                .hasLogItem(l -> l\n", "                    .withMessage(CertificateChainValidator.ISSUER_MISSING,\n", "                        i-> rootCert.getSubjectX500Principal()))\n", "                );\n", "    }\n", "\n", "    @Test\n", "    public void rootCertificateTrustedForCRLTest() throws CertificateException, IOException {\n", "        String chainName = CERTS_SRC + \"chain.pem\";\n", "        Certificate[] certificateChain = PemFileHelper.readFirstChain(chainName);\n", "        X509Certificate signingCert = (X509Certificate) certificateChain[0];\n", "        X509Certificate intermediateCert = (X509Certificate) certificateChain[1];\n", "        X509Certificate rootCert = (X509Certificate) certificateChain[2];\n", "\n", "        CertificateChainValidator validator = validatorChainBuilder.buildCertificateChainValidator();\n", "        certificateRetriever.addKnownCertificates(Collections.singletonList(intermediateCert));\n", "        certificateRetriever.getTrustedCertificatesStore().addCrlTrustedCertificates(Collections.singletonList(rootCert));\n", "\n", "        // Remove required extensions to make test pass.\n", "        properties.setRequiredExtensions(CertificateSources.all(), Collections.<CertificateExtension>emptyList());\n", "\n", "        ValidationReport report1 = validator.validateCertificate(baseContext.setCertificateSource(CertificateSource.CRL_ISSUER),\n", "                signingCert, DateTimeUtil.getCurrentTimeDate());\n", "\n", "        // This works fine because even though root certificate has CertificateSource.CERT_ISSUER context,\n", "        // the chain contains initial certificate with CertificateSource.CRL_ISSUER context.\n", "        AssertValidationReport.assertThat(report1, a-> a\n", "                .hasStatus(ValidationResult.VALID)\n", "                .hasNumberOfFailures(0)\n", "                .hasNumberOfLogs(1)\n", "                .hasLogItem(l -> l.withCheckName(\"Certificate check.\")\n", "                        .withMessage(CertificateChainValidator.CERTIFICATE_TRUSTED,\n", "                                        i-> rootCert.getSubjectX500Principal())\n", "                        .withCertificate(rootCert))\n", "                );\n", "\n", "        ValidationReport report2 = validator.validateCertificate(baseContext.setCertificateSource(CertificateSource.OCSP_ISSUER),\n", "                signingCert, DateTimeUtil.getCurrentTimeDate());\n", "\n", "        // This doesn't work because root certificate has CertificateSource.CERT_ISSUER context and\n", "        // the chain doesn't contain any certificate with CertificateSource.CRL_ISSUER context.\n", "        AssertValidationReport.assertThat(report2, a-> a\n", "                .hasStatus(ValidationResult.INDETERMINATE)\n", "                .hasNumberOfFailures(1)\n", "                .hasNumberOfLogs(2)\n", "                .hasLogItem(l -> l\n", "                        .withMessage(CertificateChainValidator.CERTIFICATE_TRUSTED_FOR_DIFFERENT_CONTEXT,\n", "                                i-> rootCert.getSubjectX500Principal(), i-> \"CRL generation\"))\n", "                .hasLogItem(l -> l\n", "                        .withMessage(CertificateChainValidator.ISSUER_MISSING,\n", "                        i-> rootCert.getSubjectX500Principal()))\n", "                );\n", "    }\n", "\n", "    @Test\n", "    public void rootCertificateTrustedForTimestampTest() throws CertificateException, IOException {\n", "        String chainName = CERTS_SRC + \"chain.pem\";\n", "        Certificate[] certificateChain = PemFileHelper.readFirstChain(chainName);\n", "        X509Certificate signingCert = (X509Certificate) certificateChain[0];\n", "        X509Certificate intermediateCert = (X509Certificate) certificateChain[1];\n", "        X509Certificate rootCert = (X509Certificate) certificateChain[2];\n", "\n", "        CertificateChainValidator validator = validatorChainBuilder.buildCertificateChainValidator();\n", "        certificateRetriever.addKnownCertificates(Collections.singletonList(intermediateCert));\n", "        certificateRetriever.getTrustedCertificatesStore().addTimestampTrustedCertificates(Collections.singletonList(rootCert));\n", "\n", "        // Remove required extensions to make test pass.\n", "        properties.setRequiredExtensions(CertificateSources.all(), Collections.<CertificateExtension>emptyList());\n", "\n", "        ValidationReport report1 = validator.validateCertificate(baseContext.setCertificateSource(CertificateSource.TIMESTAMP),\n", "                signingCert, DateTimeUtil.getCurrentTimeDate());\n", "\n", "        // This works fine because even though root certificate has CertificateSource.CERT_ISSUER context,\n", "        // the chain contains initial certificate with CertificateSource.TIMESTAMP context.\n", "        AssertValidationReport.assertThat(report1, a-> a\n", "                .hasStatus(ValidationResult.VALID)\n", "                .hasNumberOfFailures(0)\n", "                .hasNumberOfLogs(1)\n", "                .hasLogItem(l -> l.withCheckName(\"Certificate check.\")\n", "                        .withMessage(CertificateChainValidator.CERTIFICATE_TRUSTED,\n", "                                       i-> rootCert.getSubjectX500Principal())\n", "                        .withCertificate(rootCert))\n", "                );\n", "\n", "        ValidationReport report2 = validator.validateCertificate(baseContext.setCertificateSource(CertificateSource.CRL_ISSUER),\n", "                signingCert, DateTimeUtil.getCurrentTimeDate());\n", "\n", "        // This doesn't work because root certificate has CertificateSource.CERT_ISSUER context and\n", "        // the chain doesn't contain any certificate with CertificateSource.TIMESTAMP context.\n", "        AssertValidationReport.assertThat(report2, a-> a\n", "                .hasStatus(ValidationResult.INDETERMINATE)\n", "                .hasNumberOfFailures(1)\n", "                .hasNumberOfLogs(2)\n", "                .hasLogItem(l -> l\n", "                        .withMessage(CertificateChainValidator.CERTIFICATE_TRUSTED_FOR_DIFFERENT_CONTEXT,\n", "                                i-> rootCert.getSubjectX500Principal(), i-> \"timestamp generation\"))\n", "                .hasLogItem(l -> l\n", "                            .withMessage(CertificateChainValidator.ISSUER_MISSING,\n", "                                i-> rootCert.getSubjectX500Principal()))\n", "                );\n", "    }\n", "}\n"], "method_lines_dic": {"CertificateChainValidator::::addCrlClient(com.itextpdf.signatures.ICrlClient)": [85, 88], "CertificateChainValidator::::addOcspClient(com.itextpdf.signatures.IOcspClient)": [97, 100], "CertificateChainValidator::::validateCertificate(com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)": [112, 116], "CertificateChainValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)": [130, 147], "CertificateChainValidator::::checkIfCertIsTrusted(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)": [149, 211], "CertificateChainValidator::::stopValidation(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext)": [213, 216], "CertificateChainValidator::::validateValidityPeriod(com.itextpdf.signatures.validation.v1.report.ValidationReport,java.security.cert.X509Certificate,java.util.Date)": [218, 229], "CertificateChainValidator::::validateRequiredExtensions(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)": [231, 243], "CertificateChainValidator::::validateRevocationData(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)": [245, 249], "CertificateChainValidator::::validateChain(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)": [251, 270]}, "test_method_lines_dic": {"CertificateChainValidatorTest::::setup()": [71, 80], "CertificateChainValidatorTest::::validChainTest()": [82, 106], "CertificateChainValidatorTest::::revocationValidationCallTest()": [108, 135], "CertificateChainValidatorTest::::severalFailuresWithProceedAfterFailTest()": [137, 180], "CertificateChainValidatorTest::::severalFailuresWithoutProceedAfterFailTest()": [182, 211], "CertificateChainValidatorTest::::intermediateCertTrustedTest()": [213, 233], "CertificateChainValidatorTest::::validChainRequiredExtensionPositiveTest()": [235, 259], "CertificateChainValidatorTest::::validChainRequiredExtensionNegativeTest()": [261, 298], "CertificateChainValidatorTest::::validChainTrustedRootIsnSetTest()": [300, 322], "CertificateChainValidatorTest::::intermediateCertIsNotYetValidTest()": [324, 356], "CertificateChainValidatorTest::::intermediateCertIsExpiredTest()": [358, 389], "CertificateChainValidatorTest::::certificateGenerallyTrustedTest()": [391, 443], "CertificateChainValidatorTest::::rootCertificateTrustedForCATest()": [445, 497], "CertificateChainValidatorTest::::firstCertificateTrustedForCATest()": [499, 542], "CertificateChainValidatorTest::::rootCertificateTrustedForOCSPTest()": [544, 590], "CertificateChainValidatorTest::::rootCertificateTrustedForCRLTest()": [592, 638], "CertificateChainValidatorTest::::rootCertificateTrustedForTimestampTest()": [640, 686]}, "reverse_method_lines_dic": {"85": "CertificateChainValidator::::addCrlClient(com.itextpdf.signatures.ICrlClient)", "86": "CertificateChainValidator::::addCrlClient(com.itextpdf.signatures.ICrlClient)", "87": "CertificateChainValidator::::addCrlClient(com.itextpdf.signatures.ICrlClient)", "88": "CertificateChainValidator::::addCrlClient(com.itextpdf.signatures.ICrlClient)", "97": "CertificateChainValidator::::addOcspClient(com.itextpdf.signatures.IOcspClient)", "98": "CertificateChainValidator::::addOcspClient(com.itextpdf.signatures.IOcspClient)", "99": "CertificateChainValidator::::addOcspClient(com.itextpdf.signatures.IOcspClient)", "100": "CertificateChainValidator::::addOcspClient(com.itextpdf.signatures.IOcspClient)", "112": "CertificateChainValidator::::validateCertificate(com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "113": "CertificateChainValidator::::validateCertificate(com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "114": "CertificateChainValidator::::validateCertificate(com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "115": "CertificateChainValidator::::validateCertificate(com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "116": "CertificateChainValidator::::validateCertificate(com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "130": "CertificateChainValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "131": "CertificateChainValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "132": "CertificateChainValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "133": "CertificateChainValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "134": "CertificateChainValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "135": "CertificateChainValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "136": "CertificateChainValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "137": "CertificateChainValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "138": "CertificateChainValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "139": "CertificateChainValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "140": "CertificateChainValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "141": "CertificateChainValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "142": "CertificateChainValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "143": "CertificateChainValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "144": "CertificateChainValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "145": "CertificateChainValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "146": "CertificateChainValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "147": "CertificateChainValidator::::validate(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "149": "CertificateChainValidator::::checkIfCertIsTrusted(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "150": "CertificateChainValidator::::checkIfCertIsTrusted(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "151": "CertificateChainValidator::::checkIfCertIsTrusted(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "152": "CertificateChainValidator::::checkIfCertIsTrusted(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "153": "CertificateChainValidator::::checkIfCertIsTrusted(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "154": "CertificateChainValidator::::checkIfCertIsTrusted(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "155": "CertificateChainValidator::::checkIfCertIsTrusted(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "156": "CertificateChainValidator::::checkIfCertIsTrusted(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "157": "CertificateChainValidator::::checkIfCertIsTrusted(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "158": "CertificateChainValidator::::checkIfCertIsTrusted(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "159": "CertificateChainValidator::::checkIfCertIsTrusted(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "160": "CertificateChainValidator::::checkIfCertIsTrusted(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "161": "CertificateChainValidator::::checkIfCertIsTrusted(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "162": "CertificateChainValidator::::checkIfCertIsTrusted(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "163": "CertificateChainValidator::::checkIfCertIsTrusted(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "164": "CertificateChainValidator::::checkIfCertIsTrusted(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "165": "CertificateChainValidator::::checkIfCertIsTrusted(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "166": "CertificateChainValidator::::checkIfCertIsTrusted(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "167": "CertificateChainValidator::::checkIfCertIsTrusted(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "168": "CertificateChainValidator::::checkIfCertIsTrusted(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "169": "CertificateChainValidator::::checkIfCertIsTrusted(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "170": "CertificateChainValidator::::checkIfCertIsTrusted(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "171": "CertificateChainValidator::::checkIfCertIsTrusted(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "172": "CertificateChainValidator::::checkIfCertIsTrusted(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "173": "CertificateChainValidator::::checkIfCertIsTrusted(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "174": "CertificateChainValidator::::checkIfCertIsTrusted(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "175": "CertificateChainValidator::::checkIfCertIsTrusted(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "176": "CertificateChainValidator::::checkIfCertIsTrusted(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "177": "CertificateChainValidator::::checkIfCertIsTrusted(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "178": "CertificateChainValidator::::checkIfCertIsTrusted(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "179": "CertificateChainValidator::::checkIfCertIsTrusted(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "180": "CertificateChainValidator::::checkIfCertIsTrusted(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "181": "CertificateChainValidator::::checkIfCertIsTrusted(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "182": "CertificateChainValidator::::checkIfCertIsTrusted(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "183": "CertificateChainValidator::::checkIfCertIsTrusted(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "184": "CertificateChainValidator::::checkIfCertIsTrusted(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "185": "CertificateChainValidator::::checkIfCertIsTrusted(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "186": "CertificateChainValidator::::checkIfCertIsTrusted(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "187": "CertificateChainValidator::::checkIfCertIsTrusted(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "188": "CertificateChainValidator::::checkIfCertIsTrusted(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "189": "CertificateChainValidator::::checkIfCertIsTrusted(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "190": "CertificateChainValidator::::checkIfCertIsTrusted(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "191": "CertificateChainValidator::::checkIfCertIsTrusted(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "192": "CertificateChainValidator::::checkIfCertIsTrusted(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "193": "CertificateChainValidator::::checkIfCertIsTrusted(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "194": "CertificateChainValidator::::checkIfCertIsTrusted(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "195": "CertificateChainValidator::::checkIfCertIsTrusted(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "196": "CertificateChainValidator::::checkIfCertIsTrusted(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "197": "CertificateChainValidator::::checkIfCertIsTrusted(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "198": "CertificateChainValidator::::checkIfCertIsTrusted(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "199": "CertificateChainValidator::::checkIfCertIsTrusted(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "200": "CertificateChainValidator::::checkIfCertIsTrusted(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "201": "CertificateChainValidator::::checkIfCertIsTrusted(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "202": "CertificateChainValidator::::checkIfCertIsTrusted(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "203": "CertificateChainValidator::::checkIfCertIsTrusted(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "204": "CertificateChainValidator::::checkIfCertIsTrusted(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "205": "CertificateChainValidator::::checkIfCertIsTrusted(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "206": "CertificateChainValidator::::checkIfCertIsTrusted(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "207": "CertificateChainValidator::::checkIfCertIsTrusted(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "208": "CertificateChainValidator::::checkIfCertIsTrusted(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "209": "CertificateChainValidator::::checkIfCertIsTrusted(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "210": "CertificateChainValidator::::checkIfCertIsTrusted(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "211": "CertificateChainValidator::::checkIfCertIsTrusted(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "213": "CertificateChainValidator::::stopValidation(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext)", "214": "CertificateChainValidator::::stopValidation(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext)", "215": "CertificateChainValidator::::stopValidation(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext)", "216": "CertificateChainValidator::::stopValidation(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext)", "218": "CertificateChainValidator::::validateValidityPeriod(com.itextpdf.signatures.validation.v1.report.ValidationReport,java.security.cert.X509Certificate,java.util.Date)", "219": "CertificateChainValidator::::validateValidityPeriod(com.itextpdf.signatures.validation.v1.report.ValidationReport,java.security.cert.X509Certificate,java.util.Date)", "220": "CertificateChainValidator::::validateValidityPeriod(com.itextpdf.signatures.validation.v1.report.ValidationReport,java.security.cert.X509Certificate,java.util.Date)", "221": "CertificateChainValidator::::validateValidityPeriod(com.itextpdf.signatures.validation.v1.report.ValidationReport,java.security.cert.X509Certificate,java.util.Date)", "222": "CertificateChainValidator::::validateValidityPeriod(com.itextpdf.signatures.validation.v1.report.ValidationReport,java.security.cert.X509Certificate,java.util.Date)", "223": "CertificateChainValidator::::validateValidityPeriod(com.itextpdf.signatures.validation.v1.report.ValidationReport,java.security.cert.X509Certificate,java.util.Date)", "224": "CertificateChainValidator::::validateValidityPeriod(com.itextpdf.signatures.validation.v1.report.ValidationReport,java.security.cert.X509Certificate,java.util.Date)", "225": "CertificateChainValidator::::validateValidityPeriod(com.itextpdf.signatures.validation.v1.report.ValidationReport,java.security.cert.X509Certificate,java.util.Date)", "226": "CertificateChainValidator::::validateValidityPeriod(com.itextpdf.signatures.validation.v1.report.ValidationReport,java.security.cert.X509Certificate,java.util.Date)", "227": "CertificateChainValidator::::validateValidityPeriod(com.itextpdf.signatures.validation.v1.report.ValidationReport,java.security.cert.X509Certificate,java.util.Date)", "228": "CertificateChainValidator::::validateValidityPeriod(com.itextpdf.signatures.validation.v1.report.ValidationReport,java.security.cert.X509Certificate,java.util.Date)", "229": "CertificateChainValidator::::validateValidityPeriod(com.itextpdf.signatures.validation.v1.report.ValidationReport,java.security.cert.X509Certificate,java.util.Date)", "231": "CertificateChainValidator::::validateRequiredExtensions(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "232": "CertificateChainValidator::::validateRequiredExtensions(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "233": "CertificateChainValidator::::validateRequiredExtensions(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "234": "CertificateChainValidator::::validateRequiredExtensions(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "235": "CertificateChainValidator::::validateRequiredExtensions(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "236": "CertificateChainValidator::::validateRequiredExtensions(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "237": "CertificateChainValidator::::validateRequiredExtensions(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "238": "CertificateChainValidator::::validateRequiredExtensions(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "239": "CertificateChainValidator::::validateRequiredExtensions(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "240": "CertificateChainValidator::::validateRequiredExtensions(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "241": "CertificateChainValidator::::validateRequiredExtensions(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "242": "CertificateChainValidator::::validateRequiredExtensions(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "243": "CertificateChainValidator::::validateRequiredExtensions(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate)", "245": "CertificateChainValidator::::validateRevocationData(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "246": "CertificateChainValidator::::validateRevocationData(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "247": "CertificateChainValidator::::validateRevocationData(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "248": "CertificateChainValidator::::validateRevocationData(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "249": "CertificateChainValidator::::validateRevocationData(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "251": "CertificateChainValidator::::validateChain(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "252": "CertificateChainValidator::::validateChain(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "253": "CertificateChainValidator::::validateChain(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "254": "CertificateChainValidator::::validateChain(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "255": "CertificateChainValidator::::validateChain(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "256": "CertificateChainValidator::::validateChain(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "257": "CertificateChainValidator::::validateChain(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "258": "CertificateChainValidator::::validateChain(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "259": "CertificateChainValidator::::validateChain(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "260": "CertificateChainValidator::::validateChain(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "261": "CertificateChainValidator::::validateChain(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "262": "CertificateChainValidator::::validateChain(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "263": "CertificateChainValidator::::validateChain(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "264": "CertificateChainValidator::::validateChain(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "265": "CertificateChainValidator::::validateChain(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "266": "CertificateChainValidator::::validateChain(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "267": "CertificateChainValidator::::validateChain(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "268": "CertificateChainValidator::::validateChain(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "269": "CertificateChainValidator::::validateChain(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)", "270": "CertificateChainValidator::::validateChain(com.itextpdf.signatures.validation.v1.report.ValidationReport,com.itextpdf.signatures.validation.v1.context.ValidationContext,java.security.cert.X509Certificate,java.util.Date)"}, "test_reverse_method_lines_dic": {"71": "CertificateChainValidatorTest::::setup()", "72": "CertificateChainValidatorTest::::setup()", "73": "CertificateChainValidatorTest::::setup()", "74": "CertificateChainValidatorTest::::setup()", "75": "CertificateChainValidatorTest::::setup()", "76": "CertificateChainValidatorTest::::setup()", "77": "CertificateChainValidatorTest::::setup()", "78": "CertificateChainValidatorTest::::setup()", "79": "CertificateChainValidatorTest::::setup()", "80": "CertificateChainValidatorTest::::setup()", "82": "CertificateChainValidatorTest::::validChainTest()", "83": "CertificateChainValidatorTest::::validChainTest()", "84": "CertificateChainValidatorTest::::validChainTest()", "85": "CertificateChainValidatorTest::::validChainTest()", "86": "CertificateChainValidatorTest::::validChainTest()", "87": "CertificateChainValidatorTest::::validChainTest()", "88": "CertificateChainValidatorTest::::validChainTest()", "89": "CertificateChainValidatorTest::::validChainTest()", "90": "CertificateChainValidatorTest::::validChainTest()", "91": "CertificateChainValidatorTest::::validChainTest()", "92": "CertificateChainValidatorTest::::validChainTest()", "93": "CertificateChainValidatorTest::::validChainTest()", "94": "CertificateChainValidatorTest::::validChainTest()", "95": "CertificateChainValidatorTest::::validChainTest()", "96": "CertificateChainValidatorTest::::validChainTest()", "97": "CertificateChainValidatorTest::::validChainTest()", "98": "CertificateChainValidatorTest::::validChainTest()", "99": "CertificateChainValidatorTest::::validChainTest()", "100": "CertificateChainValidatorTest::::validChainTest()", "101": "CertificateChainValidatorTest::::validChainTest()", "102": "CertificateChainValidatorTest::::validChainTest()", "103": "CertificateChainValidatorTest::::validChainTest()", "104": "CertificateChainValidatorTest::::validChainTest()", "105": "CertificateChainValidatorTest::::validChainTest()", "106": "CertificateChainValidatorTest::::validChainTest()", "108": "CertificateChainValidatorTest::::revocationValidationCallTest()", "109": "CertificateChainValidatorTest::::revocationValidationCallTest()", "110": "CertificateChainValidatorTest::::revocationValidationCallTest()", "111": "CertificateChainValidatorTest::::revocationValidationCallTest()", "112": "CertificateChainValidatorTest::::revocationValidationCallTest()", "113": "CertificateChainValidatorTest::::revocationValidationCallTest()", "114": "CertificateChainValidatorTest::::revocationValidationCallTest()", "115": "CertificateChainValidatorTest::::revocationValidationCallTest()", "116": "CertificateChainValidatorTest::::revocationValidationCallTest()", "117": "CertificateChainValidatorTest::::revocationValidationCallTest()", "118": "CertificateChainValidatorTest::::revocationValidationCallTest()", "119": "CertificateChainValidatorTest::::revocationValidationCallTest()", "120": "CertificateChainValidatorTest::::revocationValidationCallTest()", "121": "CertificateChainValidatorTest::::revocationValidationCallTest()", "122": "CertificateChainValidatorTest::::revocationValidationCallTest()", "123": "CertificateChainValidatorTest::::revocationValidationCallTest()", "124": "CertificateChainValidatorTest::::revocationValidationCallTest()", "125": "CertificateChainValidatorTest::::revocationValidationCallTest()", "126": "CertificateChainValidatorTest::::revocationValidationCallTest()", "127": "CertificateChainValidatorTest::::revocationValidationCallTest()", "128": "CertificateChainValidatorTest::::revocationValidationCallTest()", "129": "CertificateChainValidatorTest::::revocationValidationCallTest()", "130": "CertificateChainValidatorTest::::revocationValidationCallTest()", "131": "CertificateChainValidatorTest::::revocationValidationCallTest()", "132": "CertificateChainValidatorTest::::revocationValidationCallTest()", "133": "CertificateChainValidatorTest::::revocationValidationCallTest()", "134": "CertificateChainValidatorTest::::revocationValidationCallTest()", "135": "CertificateChainValidatorTest::::revocationValidationCallTest()", "137": "CertificateChainValidatorTest::::severalFailuresWithProceedAfterFailTest()", "138": "CertificateChainValidatorTest::::severalFailuresWithProceedAfterFailTest()", "139": "CertificateChainValidatorTest::::severalFailuresWithProceedAfterFailTest()", "140": "CertificateChainValidatorTest::::severalFailuresWithProceedAfterFailTest()", "141": "CertificateChainValidatorTest::::severalFailuresWithProceedAfterFailTest()", "142": "CertificateChainValidatorTest::::severalFailuresWithProceedAfterFailTest()", "143": "CertificateChainValidatorTest::::severalFailuresWithProceedAfterFailTest()", "144": "CertificateChainValidatorTest::::severalFailuresWithProceedAfterFailTest()", "145": "CertificateChainValidatorTest::::severalFailuresWithProceedAfterFailTest()", "146": "CertificateChainValidatorTest::::severalFailuresWithProceedAfterFailTest()", "147": "CertificateChainValidatorTest::::severalFailuresWithProceedAfterFailTest()", "148": "CertificateChainValidatorTest::::severalFailuresWithProceedAfterFailTest()", "149": "CertificateChainValidatorTest::::severalFailuresWithProceedAfterFailTest()", "150": "CertificateChainValidatorTest::::severalFailuresWithProceedAfterFailTest()", "151": "CertificateChainValidatorTest::::severalFailuresWithProceedAfterFailTest()", "152": "CertificateChainValidatorTest::::severalFailuresWithProceedAfterFailTest()", "153": "CertificateChainValidatorTest::::severalFailuresWithProceedAfterFailTest()", "154": "CertificateChainValidatorTest::::severalFailuresWithProceedAfterFailTest()", "155": "CertificateChainValidatorTest::::severalFailuresWithProceedAfterFailTest()", "156": "CertificateChainValidatorTest::::severalFailuresWithProceedAfterFailTest()", "157": "CertificateChainValidatorTest::::severalFailuresWithProceedAfterFailTest()", "158": "CertificateChainValidatorTest::::severalFailuresWithProceedAfterFailTest()", "159": "CertificateChainValidatorTest::::severalFailuresWithProceedAfterFailTest()", "160": "CertificateChainValidatorTest::::severalFailuresWithProceedAfterFailTest()", "161": "CertificateChainValidatorTest::::severalFailuresWithProceedAfterFailTest()", "162": "CertificateChainValidatorTest::::severalFailuresWithProceedAfterFailTest()", "163": "CertificateChainValidatorTest::::severalFailuresWithProceedAfterFailTest()", "164": "CertificateChainValidatorTest::::severalFailuresWithProceedAfterFailTest()", "165": "CertificateChainValidatorTest::::severalFailuresWithProceedAfterFailTest()", "166": "CertificateChainValidatorTest::::severalFailuresWithProceedAfterFailTest()", "167": "CertificateChainValidatorTest::::severalFailuresWithProceedAfterFailTest()", "168": "CertificateChainValidatorTest::::severalFailuresWithProceedAfterFailTest()", "169": "CertificateChainValidatorTest::::severalFailuresWithProceedAfterFailTest()", "170": "CertificateChainValidatorTest::::severalFailuresWithProceedAfterFailTest()", "171": "CertificateChainValidatorTest::::severalFailuresWithProceedAfterFailTest()", "172": "CertificateChainValidatorTest::::severalFailuresWithProceedAfterFailTest()", "173": "CertificateChainValidatorTest::::severalFailuresWithProceedAfterFailTest()", "174": "CertificateChainValidatorTest::::severalFailuresWithProceedAfterFailTest()", "175": "CertificateChainValidatorTest::::severalFailuresWithProceedAfterFailTest()", "176": "CertificateChainValidatorTest::::severalFailuresWithProceedAfterFailTest()", "177": "CertificateChainValidatorTest::::severalFailuresWithProceedAfterFailTest()", "178": "CertificateChainValidatorTest::::severalFailuresWithProceedAfterFailTest()", "179": "CertificateChainValidatorTest::::severalFailuresWithProceedAfterFailTest()", "180": "CertificateChainValidatorTest::::severalFailuresWithProceedAfterFailTest()", "182": "CertificateChainValidatorTest::::severalFailuresWithoutProceedAfterFailTest()", "183": "CertificateChainValidatorTest::::severalFailuresWithoutProceedAfterFailTest()", "184": "CertificateChainValidatorTest::::severalFailuresWithoutProceedAfterFailTest()", "185": "CertificateChainValidatorTest::::severalFailuresWithoutProceedAfterFailTest()", "186": "CertificateChainValidatorTest::::severalFailuresWithoutProceedAfterFailTest()", "187": "CertificateChainValidatorTest::::severalFailuresWithoutProceedAfterFailTest()", "188": "CertificateChainValidatorTest::::severalFailuresWithoutProceedAfterFailTest()", "189": "CertificateChainValidatorTest::::severalFailuresWithoutProceedAfterFailTest()", "190": "CertificateChainValidatorTest::::severalFailuresWithoutProceedAfterFailTest()", "191": "CertificateChainValidatorTest::::severalFailuresWithoutProceedAfterFailTest()", "192": "CertificateChainValidatorTest::::severalFailuresWithoutProceedAfterFailTest()", "193": "CertificateChainValidatorTest::::severalFailuresWithoutProceedAfterFailTest()", "194": "CertificateChainValidatorTest::::severalFailuresWithoutProceedAfterFailTest()", "195": "CertificateChainValidatorTest::::severalFailuresWithoutProceedAfterFailTest()", "196": "CertificateChainValidatorTest::::severalFailuresWithoutProceedAfterFailTest()", "197": "CertificateChainValidatorTest::::severalFailuresWithoutProceedAfterFailTest()", "198": "CertificateChainValidatorTest::::severalFailuresWithoutProceedAfterFailTest()", "199": "CertificateChainValidatorTest::::severalFailuresWithoutProceedAfterFailTest()", "200": "CertificateChainValidatorTest::::severalFailuresWithoutProceedAfterFailTest()", "201": "CertificateChainValidatorTest::::severalFailuresWithoutProceedAfterFailTest()", "202": "CertificateChainValidatorTest::::severalFailuresWithoutProceedAfterFailTest()", "203": "CertificateChainValidatorTest::::severalFailuresWithoutProceedAfterFailTest()", "204": "CertificateChainValidatorTest::::severalFailuresWithoutProceedAfterFailTest()", "205": "CertificateChainValidatorTest::::severalFailuresWithoutProceedAfterFailTest()", "206": "CertificateChainValidatorTest::::severalFailuresWithoutProceedAfterFailTest()", "207": "CertificateChainValidatorTest::::severalFailuresWithoutProceedAfterFailTest()", "208": "CertificateChainValidatorTest::::severalFailuresWithoutProceedAfterFailTest()", "209": "CertificateChainValidatorTest::::severalFailuresWithoutProceedAfterFailTest()", "210": "CertificateChainValidatorTest::::severalFailuresWithoutProceedAfterFailTest()", "211": "CertificateChainValidatorTest::::severalFailuresWithoutProceedAfterFailTest()", "213": "CertificateChainValidatorTest::::intermediateCertTrustedTest()", "214": "CertificateChainValidatorTest::::intermediateCertTrustedTest()", "215": "CertificateChainValidatorTest::::intermediateCertTrustedTest()", "216": "CertificateChainValidatorTest::::intermediateCertTrustedTest()", "217": "CertificateChainValidatorTest::::intermediateCertTrustedTest()", "218": "CertificateChainValidatorTest::::intermediateCertTrustedTest()", "219": "CertificateChainValidatorTest::::intermediateCertTrustedTest()", "220": "CertificateChainValidatorTest::::intermediateCertTrustedTest()", "221": "CertificateChainValidatorTest::::intermediateCertTrustedTest()", "222": "CertificateChainValidatorTest::::intermediateCertTrustedTest()", "223": "CertificateChainValidatorTest::::intermediateCertTrustedTest()", "224": "CertificateChainValidatorTest::::intermediateCertTrustedTest()", "225": "CertificateChainValidatorTest::::intermediateCertTrustedTest()", "226": "CertificateChainValidatorTest::::intermediateCertTrustedTest()", "227": "CertificateChainValidatorTest::::intermediateCertTrustedTest()", "228": "CertificateChainValidatorTest::::intermediateCertTrustedTest()", "229": "CertificateChainValidatorTest::::intermediateCertTrustedTest()", "230": "CertificateChainValidatorTest::::intermediateCertTrustedTest()", "231": "CertificateChainValidatorTest::::intermediateCertTrustedTest()", "232": "CertificateChainValidatorTest::::intermediateCertTrustedTest()", "233": "CertificateChainValidatorTest::::intermediateCertTrustedTest()", "235": "CertificateChainValidatorTest::::validChainRequiredExtensionPositiveTest()", "236": "CertificateChainValidatorTest::::validChainRequiredExtensionPositiveTest()", "237": "CertificateChainValidatorTest::::validChainRequiredExtensionPositiveTest()", "238": "CertificateChainValidatorTest::::validChainRequiredExtensionPositiveTest()", "239": "CertificateChainValidatorTest::::validChainRequiredExtensionPositiveTest()", "240": "CertificateChainValidatorTest::::validChainRequiredExtensionPositiveTest()", "241": "CertificateChainValidatorTest::::validChainRequiredExtensionPositiveTest()", "242": "CertificateChainValidatorTest::::validChainRequiredExtensionPositiveTest()", "243": "CertificateChainValidatorTest::::validChainRequiredExtensionPositiveTest()", "244": "CertificateChainValidatorTest::::validChainRequiredExtensionPositiveTest()", "245": "CertificateChainValidatorTest::::validChainRequiredExtensionPositiveTest()", "246": "CertificateChainValidatorTest::::validChainRequiredExtensionPositiveTest()", "247": "CertificateChainValidatorTest::::validChainRequiredExtensionPositiveTest()", "248": "CertificateChainValidatorTest::::validChainRequiredExtensionPositiveTest()", "249": "CertificateChainValidatorTest::::validChainRequiredExtensionPositiveTest()", "250": "CertificateChainValidatorTest::::validChainRequiredExtensionPositiveTest()", "251": "CertificateChainValidatorTest::::validChainRequiredExtensionPositiveTest()", "252": "CertificateChainValidatorTest::::validChainRequiredExtensionPositiveTest()", "253": "CertificateChainValidatorTest::::validChainRequiredExtensionPositiveTest()", "254": "CertificateChainValidatorTest::::validChainRequiredExtensionPositiveTest()", "255": "CertificateChainValidatorTest::::validChainRequiredExtensionPositiveTest()", "256": "CertificateChainValidatorTest::::validChainRequiredExtensionPositiveTest()", "257": "CertificateChainValidatorTest::::validChainRequiredExtensionPositiveTest()", "258": "CertificateChainValidatorTest::::validChainRequiredExtensionPositiveTest()", "259": "CertificateChainValidatorTest::::validChainRequiredExtensionPositiveTest()", "261": "CertificateChainValidatorTest::::validChainRequiredExtensionNegativeTest()", "262": "CertificateChainValidatorTest::::validChainRequiredExtensionNegativeTest()", "263": "CertificateChainValidatorTest::::validChainRequiredExtensionNegativeTest()", "264": "CertificateChainValidatorTest::::validChainRequiredExtensionNegativeTest()", "265": "CertificateChainValidatorTest::::validChainRequiredExtensionNegativeTest()", "266": "CertificateChainValidatorTest::::validChainRequiredExtensionNegativeTest()", "267": "CertificateChainValidatorTest::::validChainRequiredExtensionNegativeTest()", "268": "CertificateChainValidatorTest::::validChainRequiredExtensionNegativeTest()", "269": "CertificateChainValidatorTest::::validChainRequiredExtensionNegativeTest()", "270": "CertificateChainValidatorTest::::validChainRequiredExtensionNegativeTest()", "271": "CertificateChainValidatorTest::::validChainRequiredExtensionNegativeTest()", "272": "CertificateChainValidatorTest::::validChainRequiredExtensionNegativeTest()", "273": "CertificateChainValidatorTest::::validChainRequiredExtensionNegativeTest()", "274": "CertificateChainValidatorTest::::validChainRequiredExtensionNegativeTest()", "275": "CertificateChainValidatorTest::::validChainRequiredExtensionNegativeTest()", "276": "CertificateChainValidatorTest::::validChainRequiredExtensionNegativeTest()", "277": "CertificateChainValidatorTest::::validChainRequiredExtensionNegativeTest()", "278": "CertificateChainValidatorTest::::validChainRequiredExtensionNegativeTest()", "279": "CertificateChainValidatorTest::::validChainRequiredExtensionNegativeTest()", "280": "CertificateChainValidatorTest::::validChainRequiredExtensionNegativeTest()", "281": "CertificateChainValidatorTest::::validChainRequiredExtensionNegativeTest()", "282": "CertificateChainValidatorTest::::validChainRequiredExtensionNegativeTest()", "283": "CertificateChainValidatorTest::::validChainRequiredExtensionNegativeTest()", "284": "CertificateChainValidatorTest::::validChainRequiredExtensionNegativeTest()", "285": "CertificateChainValidatorTest::::validChainRequiredExtensionNegativeTest()", "286": "CertificateChainValidatorTest::::validChainRequiredExtensionNegativeTest()", "287": "CertificateChainValidatorTest::::validChainRequiredExtensionNegativeTest()", "288": "CertificateChainValidatorTest::::validChainRequiredExtensionNegativeTest()", "289": "CertificateChainValidatorTest::::validChainRequiredExtensionNegativeTest()", "290": "CertificateChainValidatorTest::::validChainRequiredExtensionNegativeTest()", "291": "CertificateChainValidatorTest::::validChainRequiredExtensionNegativeTest()", "292": "CertificateChainValidatorTest::::validChainRequiredExtensionNegativeTest()", "293": "CertificateChainValidatorTest::::validChainRequiredExtensionNegativeTest()", "294": "CertificateChainValidatorTest::::validChainRequiredExtensionNegativeTest()", "295": "CertificateChainValidatorTest::::validChainRequiredExtensionNegativeTest()", "296": "CertificateChainValidatorTest::::validChainRequiredExtensionNegativeTest()", "297": "CertificateChainValidatorTest::::validChainRequiredExtensionNegativeTest()", "298": "CertificateChainValidatorTest::::validChainRequiredExtensionNegativeTest()", "300": "CertificateChainValidatorTest::::validChainTrustedRootIsnSetTest()", "301": "CertificateChainValidatorTest::::validChainTrustedRootIsnSetTest()", "302": "CertificateChainValidatorTest::::validChainTrustedRootIsnSetTest()", "303": "CertificateChainValidatorTest::::validChainTrustedRootIsnSetTest()", "304": "CertificateChainValidatorTest::::validChainTrustedRootIsnSetTest()", "305": "CertificateChainValidatorTest::::validChainTrustedRootIsnSetTest()", "306": "CertificateChainValidatorTest::::validChainTrustedRootIsnSetTest()", "307": "CertificateChainValidatorTest::::validChainTrustedRootIsnSetTest()", "308": "CertificateChainValidatorTest::::validChainTrustedRootIsnSetTest()", "309": "CertificateChainValidatorTest::::validChainTrustedRootIsnSetTest()", "310": "CertificateChainValidatorTest::::validChainTrustedRootIsnSetTest()", "311": "CertificateChainValidatorTest::::validChainTrustedRootIsnSetTest()", "312": "CertificateChainValidatorTest::::validChainTrustedRootIsnSetTest()", "313": "CertificateChainValidatorTest::::validChainTrustedRootIsnSetTest()", "314": "CertificateChainValidatorTest::::validChainTrustedRootIsnSetTest()", "315": "CertificateChainValidatorTest::::validChainTrustedRootIsnSetTest()", "316": "CertificateChainValidatorTest::::validChainTrustedRootIsnSetTest()", "317": "CertificateChainValidatorTest::::validChainTrustedRootIsnSetTest()", "318": "CertificateChainValidatorTest::::validChainTrustedRootIsnSetTest()", "319": "CertificateChainValidatorTest::::validChainTrustedRootIsnSetTest()", "320": "CertificateChainValidatorTest::::validChainTrustedRootIsnSetTest()", "321": "CertificateChainValidatorTest::::validChainTrustedRootIsnSetTest()", "322": "CertificateChainValidatorTest::::validChainTrustedRootIsnSetTest()", "324": "CertificateChainValidatorTest::::intermediateCertIsNotYetValidTest()", "325": "CertificateChainValidatorTest::::intermediateCertIsNotYetValidTest()", "326": "CertificateChainValidatorTest::::intermediateCertIsNotYetValidTest()", "327": "CertificateChainValidatorTest::::intermediateCertIsNotYetValidTest()", "328": "CertificateChainValidatorTest::::intermediateCertIsNotYetValidTest()", "329": "CertificateChainValidatorTest::::intermediateCertIsNotYetValidTest()", "330": "CertificateChainValidatorTest::::intermediateCertIsNotYetValidTest()", "331": "CertificateChainValidatorTest::::intermediateCertIsNotYetValidTest()", "332": "CertificateChainValidatorTest::::intermediateCertIsNotYetValidTest()", "333": "CertificateChainValidatorTest::::intermediateCertIsNotYetValidTest()", "334": "CertificateChainValidatorTest::::intermediateCertIsNotYetValidTest()", "335": "CertificateChainValidatorTest::::intermediateCertIsNotYetValidTest()", "336": "CertificateChainValidatorTest::::intermediateCertIsNotYetValidTest()", "337": "CertificateChainValidatorTest::::intermediateCertIsNotYetValidTest()", "338": "CertificateChainValidatorTest::::intermediateCertIsNotYetValidTest()", "339": "CertificateChainValidatorTest::::intermediateCertIsNotYetValidTest()", "340": "CertificateChainValidatorTest::::intermediateCertIsNotYetValidTest()", "341": "CertificateChainValidatorTest::::intermediateCertIsNotYetValidTest()", "342": "CertificateChainValidatorTest::::intermediateCertIsNotYetValidTest()", "343": "CertificateChainValidatorTest::::intermediateCertIsNotYetValidTest()", "344": "CertificateChainValidatorTest::::intermediateCertIsNotYetValidTest()", "345": "CertificateChainValidatorTest::::intermediateCertIsNotYetValidTest()", "346": "CertificateChainValidatorTest::::intermediateCertIsNotYetValidTest()", "347": "CertificateChainValidatorTest::::intermediateCertIsNotYetValidTest()", "348": "CertificateChainValidatorTest::::intermediateCertIsNotYetValidTest()", "349": "CertificateChainValidatorTest::::intermediateCertIsNotYetValidTest()", "350": "CertificateChainValidatorTest::::intermediateCertIsNotYetValidTest()", "351": "CertificateChainValidatorTest::::intermediateCertIsNotYetValidTest()", "352": "CertificateChainValidatorTest::::intermediateCertIsNotYetValidTest()", "353": "CertificateChainValidatorTest::::intermediateCertIsNotYetValidTest()", "354": "CertificateChainValidatorTest::::intermediateCertIsNotYetValidTest()", "355": "CertificateChainValidatorTest::::intermediateCertIsNotYetValidTest()", "356": "CertificateChainValidatorTest::::intermediateCertIsNotYetValidTest()", "358": "CertificateChainValidatorTest::::intermediateCertIsExpiredTest()", "359": "CertificateChainValidatorTest::::intermediateCertIsExpiredTest()", "360": "CertificateChainValidatorTest::::intermediateCertIsExpiredTest()", "361": "CertificateChainValidatorTest::::intermediateCertIsExpiredTest()", "362": "CertificateChainValidatorTest::::intermediateCertIsExpiredTest()", "363": "CertificateChainValidatorTest::::intermediateCertIsExpiredTest()", "364": "CertificateChainValidatorTest::::intermediateCertIsExpiredTest()", "365": "CertificateChainValidatorTest::::intermediateCertIsExpiredTest()", "366": "CertificateChainValidatorTest::::intermediateCertIsExpiredTest()", "367": "CertificateChainValidatorTest::::intermediateCertIsExpiredTest()", "368": "CertificateChainValidatorTest::::intermediateCertIsExpiredTest()", "369": "CertificateChainValidatorTest::::intermediateCertIsExpiredTest()", "370": "CertificateChainValidatorTest::::intermediateCertIsExpiredTest()", "371": "CertificateChainValidatorTest::::intermediateCertIsExpiredTest()", "372": "CertificateChainValidatorTest::::intermediateCertIsExpiredTest()", "373": "CertificateChainValidatorTest::::intermediateCertIsExpiredTest()", "374": "CertificateChainValidatorTest::::intermediateCertIsExpiredTest()", "375": "CertificateChainValidatorTest::::intermediateCertIsExpiredTest()", "376": "CertificateChainValidatorTest::::intermediateCertIsExpiredTest()", "377": "CertificateChainValidatorTest::::intermediateCertIsExpiredTest()", "378": "CertificateChainValidatorTest::::intermediateCertIsExpiredTest()", "379": "CertificateChainValidatorTest::::intermediateCertIsExpiredTest()", "380": "CertificateChainValidatorTest::::intermediateCertIsExpiredTest()", "381": "CertificateChainValidatorTest::::intermediateCertIsExpiredTest()", "382": "CertificateChainValidatorTest::::intermediateCertIsExpiredTest()", "383": "CertificateChainValidatorTest::::intermediateCertIsExpiredTest()", "384": "CertificateChainValidatorTest::::intermediateCertIsExpiredTest()", "385": "CertificateChainValidatorTest::::intermediateCertIsExpiredTest()", "386": "CertificateChainValidatorTest::::intermediateCertIsExpiredTest()", "387": "CertificateChainValidatorTest::::intermediateCertIsExpiredTest()", "388": "CertificateChainValidatorTest::::intermediateCertIsExpiredTest()", "389": "CertificateChainValidatorTest::::intermediateCertIsExpiredTest()", "391": "CertificateChainValidatorTest::::certificateGenerallyTrustedTest()", "392": "CertificateChainValidatorTest::::certificateGenerallyTrustedTest()", "393": "CertificateChainValidatorTest::::certificateGenerallyTrustedTest()", "394": "CertificateChainValidatorTest::::certificateGenerallyTrustedTest()", "395": "CertificateChainValidatorTest::::certificateGenerallyTrustedTest()", "396": "CertificateChainValidatorTest::::certificateGenerallyTrustedTest()", "397": "CertificateChainValidatorTest::::certificateGenerallyTrustedTest()", "398": "CertificateChainValidatorTest::::certificateGenerallyTrustedTest()", "399": "CertificateChainValidatorTest::::certificateGenerallyTrustedTest()", "400": "CertificateChainValidatorTest::::certificateGenerallyTrustedTest()", "401": "CertificateChainValidatorTest::::certificateGenerallyTrustedTest()", "402": "CertificateChainValidatorTest::::certificateGenerallyTrustedTest()", "403": "CertificateChainValidatorTest::::certificateGenerallyTrustedTest()", "404": "CertificateChainValidatorTest::::certificateGenerallyTrustedTest()", "405": "CertificateChainValidatorTest::::certificateGenerallyTrustedTest()", "406": "CertificateChainValidatorTest::::certificateGenerallyTrustedTest()", "407": "CertificateChainValidatorTest::::certificateGenerallyTrustedTest()", "408": "CertificateChainValidatorTest::::certificateGenerallyTrustedTest()", "409": "CertificateChainValidatorTest::::certificateGenerallyTrustedTest()", "410": "CertificateChainValidatorTest::::certificateGenerallyTrustedTest()", "411": "CertificateChainValidatorTest::::certificateGenerallyTrustedTest()", "412": "CertificateChainValidatorTest::::certificateGenerallyTrustedTest()", "413": "CertificateChainValidatorTest::::certificateGenerallyTrustedTest()", "414": "CertificateChainValidatorTest::::certificateGenerallyTrustedTest()", "415": "CertificateChainValidatorTest::::certificateGenerallyTrustedTest()", "416": "CertificateChainValidatorTest::::certificateGenerallyTrustedTest()", "417": "CertificateChainValidatorTest::::certificateGenerallyTrustedTest()", "418": "CertificateChainValidatorTest::::certificateGenerallyTrustedTest()", "419": "CertificateChainValidatorTest::::certificateGenerallyTrustedTest()", "420": "CertificateChainValidatorTest::::certificateGenerallyTrustedTest()", "421": "CertificateChainValidatorTest::::certificateGenerallyTrustedTest()", "422": "CertificateChainValidatorTest::::certificateGenerallyTrustedTest()", "423": "CertificateChainValidatorTest::::certificateGenerallyTrustedTest()", "424": "CertificateChainValidatorTest::::certificateGenerallyTrustedTest()", "425": "CertificateChainValidatorTest::::certificateGenerallyTrustedTest()", "426": "CertificateChainValidatorTest::::certificateGenerallyTrustedTest()", "427": "CertificateChainValidatorTest::::certificateGenerallyTrustedTest()", "428": "CertificateChainValidatorTest::::certificateGenerallyTrustedTest()", "429": "CertificateChainValidatorTest::::certificateGenerallyTrustedTest()", "430": "CertificateChainValidatorTest::::certificateGenerallyTrustedTest()", "431": "CertificateChainValidatorTest::::certificateGenerallyTrustedTest()", "432": "CertificateChainValidatorTest::::certificateGenerallyTrustedTest()", "433": "CertificateChainValidatorTest::::certificateGenerallyTrustedTest()", "434": "CertificateChainValidatorTest::::certificateGenerallyTrustedTest()", "435": "CertificateChainValidatorTest::::certificateGenerallyTrustedTest()", "436": "CertificateChainValidatorTest::::certificateGenerallyTrustedTest()", "437": "CertificateChainValidatorTest::::certificateGenerallyTrustedTest()", "438": "CertificateChainValidatorTest::::certificateGenerallyTrustedTest()", "439": "CertificateChainValidatorTest::::certificateGenerallyTrustedTest()", "440": "CertificateChainValidatorTest::::certificateGenerallyTrustedTest()", "441": "CertificateChainValidatorTest::::certificateGenerallyTrustedTest()", "442": "CertificateChainValidatorTest::::certificateGenerallyTrustedTest()", "443": "CertificateChainValidatorTest::::certificateGenerallyTrustedTest()", "445": "CertificateChainValidatorTest::::rootCertificateTrustedForCATest()", "446": "CertificateChainValidatorTest::::rootCertificateTrustedForCATest()", "447": "CertificateChainValidatorTest::::rootCertificateTrustedForCATest()", "448": "CertificateChainValidatorTest::::rootCertificateTrustedForCATest()", "449": "CertificateChainValidatorTest::::rootCertificateTrustedForCATest()", "450": "CertificateChainValidatorTest::::rootCertificateTrustedForCATest()", "451": "CertificateChainValidatorTest::::rootCertificateTrustedForCATest()", "452": "CertificateChainValidatorTest::::rootCertificateTrustedForCATest()", "453": "CertificateChainValidatorTest::::rootCertificateTrustedForCATest()", "454": "CertificateChainValidatorTest::::rootCertificateTrustedForCATest()", "455": "CertificateChainValidatorTest::::rootCertificateTrustedForCATest()", "456": "CertificateChainValidatorTest::::rootCertificateTrustedForCATest()", "457": "CertificateChainValidatorTest::::rootCertificateTrustedForCATest()", "458": "CertificateChainValidatorTest::::rootCertificateTrustedForCATest()", "459": "CertificateChainValidatorTest::::rootCertificateTrustedForCATest()", "460": "CertificateChainValidatorTest::::rootCertificateTrustedForCATest()", "461": "CertificateChainValidatorTest::::rootCertificateTrustedForCATest()", "462": "CertificateChainValidatorTest::::rootCertificateTrustedForCATest()", "463": "CertificateChainValidatorTest::::rootCertificateTrustedForCATest()", "464": "CertificateChainValidatorTest::::rootCertificateTrustedForCATest()", "465": "CertificateChainValidatorTest::::rootCertificateTrustedForCATest()", "466": "CertificateChainValidatorTest::::rootCertificateTrustedForCATest()", "467": "CertificateChainValidatorTest::::rootCertificateTrustedForCATest()", "468": "CertificateChainValidatorTest::::rootCertificateTrustedForCATest()", "469": "CertificateChainValidatorTest::::rootCertificateTrustedForCATest()", "470": "CertificateChainValidatorTest::::rootCertificateTrustedForCATest()", "471": "CertificateChainValidatorTest::::rootCertificateTrustedForCATest()", "472": "CertificateChainValidatorTest::::rootCertificateTrustedForCATest()", "473": "CertificateChainValidatorTest::::rootCertificateTrustedForCATest()", "474": "CertificateChainValidatorTest::::rootCertificateTrustedForCATest()", "475": "CertificateChainValidatorTest::::rootCertificateTrustedForCATest()", "476": "CertificateChainValidatorTest::::rootCertificateTrustedForCATest()", "477": "CertificateChainValidatorTest::::rootCertificateTrustedForCATest()", "478": "CertificateChainValidatorTest::::rootCertificateTrustedForCATest()", "479": "CertificateChainValidatorTest::::rootCertificateTrustedForCATest()", "480": "CertificateChainValidatorTest::::rootCertificateTrustedForCATest()", "481": "CertificateChainValidatorTest::::rootCertificateTrustedForCATest()", "482": "CertificateChainValidatorTest::::rootCertificateTrustedForCATest()", "483": "CertificateChainValidatorTest::::rootCertificateTrustedForCATest()", "484": "CertificateChainValidatorTest::::rootCertificateTrustedForCATest()", "485": "CertificateChainValidatorTest::::rootCertificateTrustedForCATest()", "486": "CertificateChainValidatorTest::::rootCertificateTrustedForCATest()", "487": "CertificateChainValidatorTest::::rootCertificateTrustedForCATest()", "488": "CertificateChainValidatorTest::::rootCertificateTrustedForCATest()", "489": "CertificateChainValidatorTest::::rootCertificateTrustedForCATest()", "490": "CertificateChainValidatorTest::::rootCertificateTrustedForCATest()", "491": "CertificateChainValidatorTest::::rootCertificateTrustedForCATest()", "492": "CertificateChainValidatorTest::::rootCertificateTrustedForCATest()", "493": "CertificateChainValidatorTest::::rootCertificateTrustedForCATest()", "494": "CertificateChainValidatorTest::::rootCertificateTrustedForCATest()", "495": "CertificateChainValidatorTest::::rootCertificateTrustedForCATest()", "496": "CertificateChainValidatorTest::::rootCertificateTrustedForCATest()", "497": "CertificateChainValidatorTest::::rootCertificateTrustedForCATest()", "499": "CertificateChainValidatorTest::::firstCertificateTrustedForCATest()", "500": "CertificateChainValidatorTest::::firstCertificateTrustedForCATest()", "501": "CertificateChainValidatorTest::::firstCertificateTrustedForCATest()", "502": "CertificateChainValidatorTest::::firstCertificateTrustedForCATest()", "503": "CertificateChainValidatorTest::::firstCertificateTrustedForCATest()", "504": "CertificateChainValidatorTest::::firstCertificateTrustedForCATest()", "505": "CertificateChainValidatorTest::::firstCertificateTrustedForCATest()", "506": "CertificateChainValidatorTest::::firstCertificateTrustedForCATest()", "507": "CertificateChainValidatorTest::::firstCertificateTrustedForCATest()", "508": "CertificateChainValidatorTest::::firstCertificateTrustedForCATest()", "509": "CertificateChainValidatorTest::::firstCertificateTrustedForCATest()", "510": "CertificateChainValidatorTest::::firstCertificateTrustedForCATest()", "511": "CertificateChainValidatorTest::::firstCertificateTrustedForCATest()", "512": "CertificateChainValidatorTest::::firstCertificateTrustedForCATest()", "513": "CertificateChainValidatorTest::::firstCertificateTrustedForCATest()", "514": "CertificateChainValidatorTest::::firstCertificateTrustedForCATest()", "515": "CertificateChainValidatorTest::::firstCertificateTrustedForCATest()", "516": "CertificateChainValidatorTest::::firstCertificateTrustedForCATest()", "517": "CertificateChainValidatorTest::::firstCertificateTrustedForCATest()", "518": "CertificateChainValidatorTest::::firstCertificateTrustedForCATest()", "519": "CertificateChainValidatorTest::::firstCertificateTrustedForCATest()", "520": "CertificateChainValidatorTest::::firstCertificateTrustedForCATest()", "521": "CertificateChainValidatorTest::::firstCertificateTrustedForCATest()", "522": "CertificateChainValidatorTest::::firstCertificateTrustedForCATest()", "523": "CertificateChainValidatorTest::::firstCertificateTrustedForCATest()", "524": "CertificateChainValidatorTest::::firstCertificateTrustedForCATest()", "525": "CertificateChainValidatorTest::::firstCertificateTrustedForCATest()", "526": "CertificateChainValidatorTest::::firstCertificateTrustedForCATest()", "527": "CertificateChainValidatorTest::::firstCertificateTrustedForCATest()", "528": "CertificateChainValidatorTest::::firstCertificateTrustedForCATest()", "529": "CertificateChainValidatorTest::::firstCertificateTrustedForCATest()", "530": "CertificateChainValidatorTest::::firstCertificateTrustedForCATest()", "531": "CertificateChainValidatorTest::::firstCertificateTrustedForCATest()", "532": "CertificateChainValidatorTest::::firstCertificateTrustedForCATest()", "533": "CertificateChainValidatorTest::::firstCertificateTrustedForCATest()", "534": "CertificateChainValidatorTest::::firstCertificateTrustedForCATest()", "535": "CertificateChainValidatorTest::::firstCertificateTrustedForCATest()", "536": "CertificateChainValidatorTest::::firstCertificateTrustedForCATest()", "537": "CertificateChainValidatorTest::::firstCertificateTrustedForCATest()", "538": "CertificateChainValidatorTest::::firstCertificateTrustedForCATest()", "539": "CertificateChainValidatorTest::::firstCertificateTrustedForCATest()", "540": "CertificateChainValidatorTest::::firstCertificateTrustedForCATest()", "541": "CertificateChainValidatorTest::::firstCertificateTrustedForCATest()", "542": "CertificateChainValidatorTest::::firstCertificateTrustedForCATest()", "544": "CertificateChainValidatorTest::::rootCertificateTrustedForOCSPTest()", "545": "CertificateChainValidatorTest::::rootCertificateTrustedForOCSPTest()", "546": "CertificateChainValidatorTest::::rootCertificateTrustedForOCSPTest()", "547": "CertificateChainValidatorTest::::rootCertificateTrustedForOCSPTest()", "548": "CertificateChainValidatorTest::::rootCertificateTrustedForOCSPTest()", "549": "CertificateChainValidatorTest::::rootCertificateTrustedForOCSPTest()", "550": "CertificateChainValidatorTest::::rootCertificateTrustedForOCSPTest()", "551": "CertificateChainValidatorTest::::rootCertificateTrustedForOCSPTest()", "552": "CertificateChainValidatorTest::::rootCertificateTrustedForOCSPTest()", "553": "CertificateChainValidatorTest::::rootCertificateTrustedForOCSPTest()", "554": "CertificateChainValidatorTest::::rootCertificateTrustedForOCSPTest()", "555": "CertificateChainValidatorTest::::rootCertificateTrustedForOCSPTest()", "556": "CertificateChainValidatorTest::::rootCertificateTrustedForOCSPTest()", "557": "CertificateChainValidatorTest::::rootCertificateTrustedForOCSPTest()", "558": "CertificateChainValidatorTest::::rootCertificateTrustedForOCSPTest()", "559": "CertificateChainValidatorTest::::rootCertificateTrustedForOCSPTest()", "560": "CertificateChainValidatorTest::::rootCertificateTrustedForOCSPTest()", "561": "CertificateChainValidatorTest::::rootCertificateTrustedForOCSPTest()", "562": "CertificateChainValidatorTest::::rootCertificateTrustedForOCSPTest()", "563": "CertificateChainValidatorTest::::rootCertificateTrustedForOCSPTest()", "564": "CertificateChainValidatorTest::::rootCertificateTrustedForOCSPTest()", "565": "CertificateChainValidatorTest::::rootCertificateTrustedForOCSPTest()", "566": "CertificateChainValidatorTest::::rootCertificateTrustedForOCSPTest()", "567": "CertificateChainValidatorTest::::rootCertificateTrustedForOCSPTest()", "568": "CertificateChainValidatorTest::::rootCertificateTrustedForOCSPTest()", "569": "CertificateChainValidatorTest::::rootCertificateTrustedForOCSPTest()", "570": "CertificateChainValidatorTest::::rootCertificateTrustedForOCSPTest()", "571": "CertificateChainValidatorTest::::rootCertificateTrustedForOCSPTest()", "572": "CertificateChainValidatorTest::::rootCertificateTrustedForOCSPTest()", "573": "CertificateChainValidatorTest::::rootCertificateTrustedForOCSPTest()", "574": "CertificateChainValidatorTest::::rootCertificateTrustedForOCSPTest()", "575": "CertificateChainValidatorTest::::rootCertificateTrustedForOCSPTest()", "576": "CertificateChainValidatorTest::::rootCertificateTrustedForOCSPTest()", "577": "CertificateChainValidatorTest::::rootCertificateTrustedForOCSPTest()", "578": "CertificateChainValidatorTest::::rootCertificateTrustedForOCSPTest()", "579": "CertificateChainValidatorTest::::rootCertificateTrustedForOCSPTest()", "580": "CertificateChainValidatorTest::::rootCertificateTrustedForOCSPTest()", "581": "CertificateChainValidatorTest::::rootCertificateTrustedForOCSPTest()", "582": "CertificateChainValidatorTest::::rootCertificateTrustedForOCSPTest()", "583": "CertificateChainValidatorTest::::rootCertificateTrustedForOCSPTest()", "584": "CertificateChainValidatorTest::::rootCertificateTrustedForOCSPTest()", "585": "CertificateChainValidatorTest::::rootCertificateTrustedForOCSPTest()", "586": "CertificateChainValidatorTest::::rootCertificateTrustedForOCSPTest()", "587": "CertificateChainValidatorTest::::rootCertificateTrustedForOCSPTest()", "588": "CertificateChainValidatorTest::::rootCertificateTrustedForOCSPTest()", "589": "CertificateChainValidatorTest::::rootCertificateTrustedForOCSPTest()", "590": "CertificateChainValidatorTest::::rootCertificateTrustedForOCSPTest()", "592": "CertificateChainValidatorTest::::rootCertificateTrustedForCRLTest()", "593": "CertificateChainValidatorTest::::rootCertificateTrustedForCRLTest()", "594": "CertificateChainValidatorTest::::rootCertificateTrustedForCRLTest()", "595": "CertificateChainValidatorTest::::rootCertificateTrustedForCRLTest()", "596": "CertificateChainValidatorTest::::rootCertificateTrustedForCRLTest()", "597": "CertificateChainValidatorTest::::rootCertificateTrustedForCRLTest()", "598": "CertificateChainValidatorTest::::rootCertificateTrustedForCRLTest()", "599": "CertificateChainValidatorTest::::rootCertificateTrustedForCRLTest()", "600": "CertificateChainValidatorTest::::rootCertificateTrustedForCRLTest()", "601": "CertificateChainValidatorTest::::rootCertificateTrustedForCRLTest()", "602": "CertificateChainValidatorTest::::rootCertificateTrustedForCRLTest()", "603": "CertificateChainValidatorTest::::rootCertificateTrustedForCRLTest()", "604": "CertificateChainValidatorTest::::rootCertificateTrustedForCRLTest()", "605": "CertificateChainValidatorTest::::rootCertificateTrustedForCRLTest()", "606": "CertificateChainValidatorTest::::rootCertificateTrustedForCRLTest()", "607": "CertificateChainValidatorTest::::rootCertificateTrustedForCRLTest()", "608": "CertificateChainValidatorTest::::rootCertificateTrustedForCRLTest()", "609": "CertificateChainValidatorTest::::rootCertificateTrustedForCRLTest()", "610": "CertificateChainValidatorTest::::rootCertificateTrustedForCRLTest()", "611": "CertificateChainValidatorTest::::rootCertificateTrustedForCRLTest()", "612": "CertificateChainValidatorTest::::rootCertificateTrustedForCRLTest()", "613": "CertificateChainValidatorTest::::rootCertificateTrustedForCRLTest()", "614": "CertificateChainValidatorTest::::rootCertificateTrustedForCRLTest()", "615": "CertificateChainValidatorTest::::rootCertificateTrustedForCRLTest()", "616": "CertificateChainValidatorTest::::rootCertificateTrustedForCRLTest()", "617": "CertificateChainValidatorTest::::rootCertificateTrustedForCRLTest()", "618": "CertificateChainValidatorTest::::rootCertificateTrustedForCRLTest()", "619": "CertificateChainValidatorTest::::rootCertificateTrustedForCRLTest()", "620": "CertificateChainValidatorTest::::rootCertificateTrustedForCRLTest()", "621": "CertificateChainValidatorTest::::rootCertificateTrustedForCRLTest()", "622": "CertificateChainValidatorTest::::rootCertificateTrustedForCRLTest()", "623": "CertificateChainValidatorTest::::rootCertificateTrustedForCRLTest()", "624": "CertificateChainValidatorTest::::rootCertificateTrustedForCRLTest()", "625": "CertificateChainValidatorTest::::rootCertificateTrustedForCRLTest()", "626": "CertificateChainValidatorTest::::rootCertificateTrustedForCRLTest()", "627": "CertificateChainValidatorTest::::rootCertificateTrustedForCRLTest()", "628": "CertificateChainValidatorTest::::rootCertificateTrustedForCRLTest()", "629": "CertificateChainValidatorTest::::rootCertificateTrustedForCRLTest()", "630": "CertificateChainValidatorTest::::rootCertificateTrustedForCRLTest()", "631": "CertificateChainValidatorTest::::rootCertificateTrustedForCRLTest()", "632": "CertificateChainValidatorTest::::rootCertificateTrustedForCRLTest()", "633": "CertificateChainValidatorTest::::rootCertificateTrustedForCRLTest()", "634": "CertificateChainValidatorTest::::rootCertificateTrustedForCRLTest()", "635": "CertificateChainValidatorTest::::rootCertificateTrustedForCRLTest()", "636": "CertificateChainValidatorTest::::rootCertificateTrustedForCRLTest()", "637": "CertificateChainValidatorTest::::rootCertificateTrustedForCRLTest()", "638": "CertificateChainValidatorTest::::rootCertificateTrustedForCRLTest()", "640": "CertificateChainValidatorTest::::rootCertificateTrustedForTimestampTest()", "641": "CertificateChainValidatorTest::::rootCertificateTrustedForTimestampTest()", "642": "CertificateChainValidatorTest::::rootCertificateTrustedForTimestampTest()", "643": "CertificateChainValidatorTest::::rootCertificateTrustedForTimestampTest()", "644": "CertificateChainValidatorTest::::rootCertificateTrustedForTimestampTest()", "645": "CertificateChainValidatorTest::::rootCertificateTrustedForTimestampTest()", "646": "CertificateChainValidatorTest::::rootCertificateTrustedForTimestampTest()", "647": "CertificateChainValidatorTest::::rootCertificateTrustedForTimestampTest()", "648": "CertificateChainValidatorTest::::rootCertificateTrustedForTimestampTest()", "649": "CertificateChainValidatorTest::::rootCertificateTrustedForTimestampTest()", "650": "CertificateChainValidatorTest::::rootCertificateTrustedForTimestampTest()", "651": "CertificateChainValidatorTest::::rootCertificateTrustedForTimestampTest()", "652": "CertificateChainValidatorTest::::rootCertificateTrustedForTimestampTest()", "653": "CertificateChainValidatorTest::::rootCertificateTrustedForTimestampTest()", "654": "CertificateChainValidatorTest::::rootCertificateTrustedForTimestampTest()", "655": "CertificateChainValidatorTest::::rootCertificateTrustedForTimestampTest()", "656": "CertificateChainValidatorTest::::rootCertificateTrustedForTimestampTest()", "657": "CertificateChainValidatorTest::::rootCertificateTrustedForTimestampTest()", "658": "CertificateChainValidatorTest::::rootCertificateTrustedForTimestampTest()", "659": "CertificateChainValidatorTest::::rootCertificateTrustedForTimestampTest()", "660": "CertificateChainValidatorTest::::rootCertificateTrustedForTimestampTest()", "661": "CertificateChainValidatorTest::::rootCertificateTrustedForTimestampTest()", "662": "CertificateChainValidatorTest::::rootCertificateTrustedForTimestampTest()", "663": "CertificateChainValidatorTest::::rootCertificateTrustedForTimestampTest()", "664": "CertificateChainValidatorTest::::rootCertificateTrustedForTimestampTest()", "665": "CertificateChainValidatorTest::::rootCertificateTrustedForTimestampTest()", "666": "CertificateChainValidatorTest::::rootCertificateTrustedForTimestampTest()", "667": "CertificateChainValidatorTest::::rootCertificateTrustedForTimestampTest()", "668": "CertificateChainValidatorTest::::rootCertificateTrustedForTimestampTest()", "669": "CertificateChainValidatorTest::::rootCertificateTrustedForTimestampTest()", "670": "CertificateChainValidatorTest::::rootCertificateTrustedForTimestampTest()", "671": "CertificateChainValidatorTest::::rootCertificateTrustedForTimestampTest()", "672": "CertificateChainValidatorTest::::rootCertificateTrustedForTimestampTest()", "673": "CertificateChainValidatorTest::::rootCertificateTrustedForTimestampTest()", "674": "CertificateChainValidatorTest::::rootCertificateTrustedForTimestampTest()", "675": "CertificateChainValidatorTest::::rootCertificateTrustedForTimestampTest()", "676": "CertificateChainValidatorTest::::rootCertificateTrustedForTimestampTest()", "677": "CertificateChainValidatorTest::::rootCertificateTrustedForTimestampTest()", "678": "CertificateChainValidatorTest::::rootCertificateTrustedForTimestampTest()", "679": "CertificateChainValidatorTest::::rootCertificateTrustedForTimestampTest()", "680": "CertificateChainValidatorTest::::rootCertificateTrustedForTimestampTest()", "681": "CertificateChainValidatorTest::::rootCertificateTrustedForTimestampTest()", "682": "CertificateChainValidatorTest::::rootCertificateTrustedForTimestampTest()", "683": "CertificateChainValidatorTest::::rootCertificateTrustedForTimestampTest()", "684": "CertificateChainValidatorTest::::rootCertificateTrustedForTimestampTest()", "685": "CertificateChainValidatorTest::::rootCertificateTrustedForTimestampTest()", "686": "CertificateChainValidatorTest::::rootCertificateTrustedForTimestampTest()"}, "tests": [{"test_lines": [82, 106], "covered_lines": [72, 73, 74, 75, 76, 114, 115, 132, 133, 134, 135, 138, 139, 141, 142, 145, 146, 151, 152, 154, 155, 156, 158, 170, 183, 197, 210, 214, 215, 221, 228, 229, 233, 234, 235, 236, 241, 243, 247, 249, 253, 254, 255, 261, 267, 268, 270]}, {"test_lines": [108, 135], "covered_lines": [72, 73, 74, 75, 76, 114, 115, 132, 133, 134, 135, 138, 139, 141, 142, 145, 146, 151, 152, 154, 155, 156, 158, 170, 183, 197, 210, 214, 215, 221, 228, 229, 233, 234, 235, 236, 241, 243, 247, 249, 253, 254, 255, 261, 267, 268, 270]}, {"test_lines": [137, 180], "covered_lines": [72, 73, 74, 75, 76, 114, 115, 132, 133, 134, 135, 138, 139, 141, 142, 145, 146, 151, 152, 154, 155, 156, 158, 170, 183, 197, 210, 214, 215, 221, 228, 229, 233, 234, 235, 236, 237, 238, 241, 243, 247, 249, 253, 254, 255, 261, 267, 268, 270]}, {"test_lines": [182, 211], "covered_lines": [72, 73, 74, 75, 76, 114, 115, 132, 133, 134, 135, 136, 214, 215, 221, 228, 229, 233, 234, 235, 236, 237, 238, 241, 243]}, {"test_lines": [213, 233], "covered_lines": [72, 73, 74, 75, 76, 114, 115, 132, 133, 134, 135, 138, 139, 141, 142, 145, 146, 151, 152, 154, 155, 156, 158, 170, 183, 197, 210, 214, 215, 221, 228, 229, 233, 234, 235, 236, 241, 243, 247, 249, 253, 254, 255, 261, 267, 268, 270]}, {"test_lines": [235, 259], "covered_lines": [72, 73, 74, 75, 76, 114, 115, 132, 133, 134, 135, 138, 139, 141, 142, 145, 146, 151, 152, 154, 155, 156, 158, 170, 183, 197, 210, 214, 215, 221, 228, 229, 233, 234, 235, 236, 241, 243, 247, 249, 253, 254, 255, 261, 267, 268, 270]}, {"test_lines": [261, 298], "covered_lines": [72, 73, 74, 75, 76, 114, 115, 132, 133, 134, 135, 138, 139, 141, 142, 145, 146, 151, 152, 154, 155, 156, 158, 170, 183, 197, 210, 214, 215, 221, 228, 229, 233, 234, 235, 236, 237, 238, 241, 243, 247, 249, 253, 254, 255, 261, 267, 268, 270]}, {"test_lines": [300, 322], "covered_lines": [72, 73, 74, 75, 76, 114, 115, 132, 133, 134, 135, 138, 141, 142, 145, 146, 151, 152, 158, 170, 183, 197, 210, 214, 215, 221, 228, 229, 233, 234, 235, 236, 241, 243, 247, 249, 253, 254, 255, 256, 257, 258, 261, 267, 268, 270]}, {"test_lines": [324, 356], "covered_lines": [72, 73, 74, 75, 76, 114, 115, 132, 133, 134, 135, 138, 139, 141, 142, 145, 146, 151, 152, 154, 155, 156, 158, 170, 183, 197, 210, 214, 215, 221, 225, 226, 227, 228, 229, 233, 234, 235, 236, 241, 243, 247, 249, 253, 254, 255, 261, 267, 268, 270]}, {"test_lines": [358, 389], "covered_lines": [72, 73, 74, 75, 76, 114, 115, 132, 133, 134, 135, 138, 139, 141, 142, 145, 146, 151, 152, 154, 155, 156, 158, 170, 183, 197, 210, 214, 215, 221, 222, 223, 224, 228, 229, 233, 234, 235, 236, 241, 243, 247, 249, 253, 254, 255, 261, 267, 268, 270]}, {"test_lines": [391, 443], "covered_lines": [72, 73, 74, 75, 76, 114, 115, 132, 133, 134, 135, 138, 139, 141, 142, 145, 146, 151, 152, 154, 155, 156, 158, 170, 183, 197, 210, 214, 215, 221, 228, 229, 233, 234, 235, 243, 247, 249, 253, 254, 255, 261, 267, 268, 270]}, {"test_lines": [445, 497], "covered_lines": [72, 73, 74, 75, 76, 114, 115, 132, 133, 134, 135, 138, 139, 141, 142, 145, 146, 151, 152, 158, 160, 161, 162, 163, 170, 183, 197, 210, 214, 215, 221, 228, 229, 233, 234, 235, 243, 247, 249, 253, 254, 255, 261, 267, 268, 270]}, {"test_lines": [499, 542], "covered_lines": [72, 73, 74, 75, 76, 114, 115, 132, 133, 134, 135, 138, 139, 141, 142, 145, 146, 151, 152, 158, 160, 161, 162, 163, 166, 167, 170, 183, 197, 210, 214, 215, 221, 228, 229, 233, 234, 235, 243, 247, 249, 253, 254, 255, 256, 257, 258, 261, 267, 268, 270]}, {"test_lines": [544, 590], "covered_lines": [72, 73, 74, 75, 76, 114, 115, 132, 133, 134, 135, 138, 139, 141, 142, 145, 146, 151, 152, 158, 170, 183, 186, 188, 189, 190, 193, 194, 197, 210, 214, 215, 221, 228, 229, 233, 234, 235, 243, 247, 249, 253, 254, 255, 256, 257, 258, 261, 267, 268, 270]}, {"test_lines": [592, 638], "covered_lines": [72, 73, 74, 75, 76, 114, 115, 132, 133, 134, 135, 138, 139, 141, 142, 145, 146, 151, 152, 158, 170, 183, 197, 200, 201, 202, 203, 206, 207, 210, 214, 215, 221, 228, 229, 233, 234, 235, 243, 247, 249, 253, 254, 255, 256, 257, 258, 261, 267, 268, 270]}, {"test_lines": [640, 686], "covered_lines": [72, 73, 74, 75, 76, 114, 115, 132, 133, 134, 135, 138, 139, 141, 142, 145, 146, 151, 152, 158, 170, 173, 174, 175, 176, 179, 180, 183, 197, 210, 214, 215, 221, 228, 229, 233, 234, 235, 243, 247, 249, 253, 254, 255, 256, 257, 258, 261, 267, 268, 270]}]}, "/bernard/dataset_construction/prep/repos/itext-java/sign/src/main/java/com/itextpdf/signatures/validation/v1/context/ValidationContext.java": {"class_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.signatures.validation.v1.context;\n", "\n", "import java.util.Objects;\n", "\n", "/**\n", " * Validation context class, which encapsulates specific context values, related to validation process.\n", " */\n", "public class ValidationContext {\n", "    private final CertificateSource certificateSource;\n", "    private final ValidatorContext validatorContext;\n", "    private final TimeBasedContext timeBasedContext;\n", "    private ValidationContext previousValidationContext;\n", "\n", "    /**\n", "     * Create {@link ValidationContext} instance using provided context values.\n", "     *\n", "     * @param validatorContext {@link ValidatorContext} value\n", "     * @param certificateSource {@link CertificateSource} value\n", "     * @param timeBasedContext {@link TimeBasedContext} value\n", "     */\n", "    public ValidationContext(ValidatorContext validatorContext, CertificateSource certificateSource,\n", "            TimeBasedContext timeBasedContext) {\n", "        this.validatorContext = validatorContext;\n", "        this.certificateSource = certificateSource;\n", "        this.timeBasedContext = timeBasedContext;\n", "    }\n", "\n", "    ValidationContext(ValidatorContext validatorContext, CertificateSource certificateSource,\n", "            TimeBasedContext timeBasedContext, ValidationContext previousValidationContext) {\n", "        this(validatorContext, certificateSource, timeBasedContext);\n", "        this.previousValidationContext = previousValidationContext;\n", "    }\n", "\n", "    /**\n", "     * Get previous validation context instance, from which this instance was created.\n", "     *\n", "     * @return previous {@link ValidatorContext} instance\n", "     */\n", "    public ValidationContext getPreviousValidationContext() {\n", "        return previousValidationContext;\n", "    }\n", "\n", "    /**\n", "     * Get specific certificate source context value.\n", "     *\n", "     * @return {@link CertificateSource} context value\n", "     */\n", "    public CertificateSource getCertificateSource() {\n", "        return certificateSource;\n", "    }\n", "\n", "    /**\n", "     * Create new {@link ValidationContext} instance with the provided certificate source context value.\n", "     *\n", "     * @param certificateSource {@link CertificateSource} value\n", "     *\n", "     * @return new {@link ValidationContext} instance\n", "     */\n", "    public ValidationContext setCertificateSource(CertificateSource certificateSource) {\n", "        return new ValidationContext(validatorContext, certificateSource, timeBasedContext, this);\n", "    }\n", "\n", "    /**\n", "     * Get specific time-based context value.\n", "     *\n", "     * @return {@link TimeBasedContext} context value\n", "     */\n", "    public TimeBasedContext getTimeBasedContext() {\n", "        return timeBasedContext;\n", "    }\n", "\n", "    /**\n", "     * Create new {@link ValidationContext} instance with the provided certificate source context value.\n", "     *\n", "     * @param timeBasedContext {@link TimeBasedContext} value\n", "     *\n", "     * @return new {@link ValidationContext} instance\n", "     */\n", "    public ValidationContext setTimeBasedContext(TimeBasedContext timeBasedContext) {\n", "        return new ValidationContext(validatorContext, certificateSource, timeBasedContext, this);\n", "    }\n", "\n", "    /**\n", "     * Get specific validator context value.\n", "     *\n", "     * @return {@link ValidatorContext} context value\n", "     */\n", "    public ValidatorContext getValidatorContext() {\n", "        return validatorContext;\n", "    }\n", "\n", "    /**\n", "     * Create new {@link ValidationContext} instance with the provided certificate source context value.\n", "     *\n", "     * @param validatorContext {@link ValidatorContext} value\n", "     *\n", "     * @return new {@link ValidationContext} instance\n", "     */\n", "    public ValidationContext setValidatorContext(ValidatorContext validatorContext) {\n", "        return new ValidationContext(validatorContext, certificateSource, timeBasedContext, this);\n", "    }\n", "\n", "    /**\n", "     * Check if validation contexts chain contains specific {@link CertificateSource} value.\n", "     *\n", "     * @param context {@link ValidationContext} instance to start the check from\n", "     * @param source {@link CertificateSource} value to check\n", "     *\n", "     * @return {@code true} if validation contexts chain contains provided certificate source, {@code false} otherwise\n", "     */\n", "    public static boolean checkIfContextChainContainsCertificateSource(ValidationContext context,\n", "            CertificateSource source) {\n", "        if (context == null) {\n", "            return false;\n", "        }\n", "        if (source == context.getCertificateSource()) {\n", "            return true;\n", "        }\n", "        return checkIfContextChainContainsCertificateSource(context.getPreviousValidationContext(), source);\n", "    }\n", "\n", "    /**\n", "     * Return string representation of this {@link ValidationContext}.\n", "     * Previous validation context is not a part of this representation.\n", "     *\n", "     * @return a string representation of the {@link ValidationContext}\n", "     */\n", "    @Override\n", "    public String toString() {\n", "        return \"ValidationContext{\" +\n", "                \"certificateSource=\" + certificateSource +\n", "                \", validatorContext=\" + validatorContext +\n", "                \", timeBasedContext=\" + timeBasedContext +\n", "                '}';\n", "    }\n", "\n", "    /**\n", "     * Check if the provided object is equal to this one.\n", "     * Previous validation context field is not taken into account during this comparison.\n", "     *\n", "     * @param o the reference object with which to compare\n", "     *\n", "     * @return {@code true} if provided object is equal to this one, {@code false} otherwise\n", "     */\n", "    @Override\n", "    public boolean equals(Object o) {\n", "        if (this == o) return true;\n", "        if (o == null || getClass() != o.getClass()) return false;\n", "        ValidationContext that = (ValidationContext) o;\n", "        return certificateSource == that.certificateSource\n", "                && validatorContext == that.validatorContext\n", "                && timeBasedContext == that.timeBasedContext;\n", "    }\n", "\n", "    /**\n", "     * Return a hash code value for this validation context.\n", "     * Previous validation context field is not taken into account during hash code calculation.\n", "     *\n", "     * @return a hash code value for this validation context\n", "     */\n", "    @Override\n", "    public int hashCode() {\n", "        return Objects.hash((Object)certificateSource, validatorContext, timeBasedContext);\n", "    }\n", "}\n"], "test_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.signatures.validation.v1.context;\n", "\n", "import com.itextpdf.test.ExtendedITextTest;\n", "import com.itextpdf.test.annotations.type.UnitTest;\n", "\n", "import org.junit.Assert;\n", "import org.junit.Test;\n", "import org.junit.experimental.categories.Category;\n", "\n", "@Category(UnitTest.class)\n", "public class ValidationContextTest extends ExtendedITextTest {\n", "    @Test\n", "    public void testInitializingConstructor() {\n", "        ValidationContext sut = new ValidationContext(ValidatorContext.CRL_VALIDATOR, CertificateSource.CERT_ISSUER,\n", "                TimeBasedContext.HISTORICAL);\n", "        Assert.assertEquals(ValidatorContext.CRL_VALIDATOR, sut.getValidatorContext());\n", "        Assert.assertEquals(CertificateSource.CERT_ISSUER, sut.getCertificateSource());\n", "        Assert.assertEquals(TimeBasedContext.HISTORICAL, sut.getTimeBasedContext());\n", "    }\n", "\n", "    @Test\n", "    public void testSetAndGetCertificateSource() {\n", "        ValidationContext sut = new ValidationContext(ValidatorContext.CRL_VALIDATOR, CertificateSource.CERT_ISSUER,\n", "                TimeBasedContext.HISTORICAL);\n", "        sut = sut.setCertificateSource(CertificateSource.CRL_ISSUER);\n", "        Assert.assertEquals(CertificateSource.CRL_ISSUER, sut.getCertificateSource());\n", "    }\n", "\n", "    @Test\n", "    public void testSetAndGetTemporalContext() {\n", "        ValidationContext sut = new ValidationContext(ValidatorContext.CRL_VALIDATOR, CertificateSource.CERT_ISSUER,\n", "                TimeBasedContext.HISTORICAL);\n", "        sut = sut.setTimeBasedContext(TimeBasedContext.PRESENT);\n", "        Assert.assertEquals(TimeBasedContext.PRESENT, sut.getTimeBasedContext());\n", "    }\n", "\n", "    @Test\n", "    public void testSetAndGetValidator() {\n", "        ValidationContext sut = new ValidationContext(ValidatorContext.CRL_VALIDATOR, CertificateSource.CERT_ISSUER,\n", "                TimeBasedContext.HISTORICAL);\n", "        sut = sut.setValidatorContext(ValidatorContext.SIGNATURE_VALIDATOR);\n", "        Assert.assertEquals(ValidatorContext.SIGNATURE_VALIDATOR, sut.getValidatorContext());\n", "    }\n", "\n", "    @Test\n", "    public void testEquals() {\n", "        ValidationContext sutA = new ValidationContext(ValidatorContext.CRL_VALIDATOR, CertificateSource.CERT_ISSUER,\n", "                TimeBasedContext.HISTORICAL);\n", "        ValidationContext sutB = new ValidationContext(ValidatorContext.CRL_VALIDATOR, CertificateSource.CERT_ISSUER,\n", "                TimeBasedContext.HISTORICAL);\n", "        Assert.assertEquals(sutA, sutB);\n", "        Assert.assertEquals(sutB, sutA);\n", "    }\n", "\n", "    @Test\n", "    public void testNotEquals() {\n", "        ValidationContext sutA = new ValidationContext(ValidatorContext.CRL_VALIDATOR, CertificateSource.CERT_ISSUER,\n", "                TimeBasedContext.HISTORICAL);\n", "        ValidationContext sutB = new ValidationContext(ValidatorContext.CERTIFICATE_CHAIN_VALIDATOR,\n", "                CertificateSource.CERT_ISSUER, TimeBasedContext.HISTORICAL);\n", "        ValidationContext sutC = new ValidationContext(ValidatorContext.CRL_VALIDATOR, CertificateSource.OCSP_ISSUER,\n", "                TimeBasedContext.HISTORICAL);\n", "        ValidationContext sutD = new ValidationContext(ValidatorContext.CRL_VALIDATOR, CertificateSource.CERT_ISSUER,\n", "                TimeBasedContext.PRESENT);\n", "        Assert.assertNotEquals(sutA, sutB);\n", "        Assert.assertNotEquals(sutB, sutA);\n", "        Assert.assertNotEquals(sutC, sutA);\n", "        Assert.assertNotEquals(sutD, sutA);\n", "    }\n", "\n", "    @Test\n", "    public void testHashCode() {\n", "        ValidationContext sut0 = new ValidationContext(ValidatorContext.CRL_VALIDATOR, CertificateSource.CERT_ISSUER,\n", "                TimeBasedContext.HISTORICAL);\n", "        ValidationContext sutA = new ValidationContext(ValidatorContext.CRL_VALIDATOR, CertificateSource.CERT_ISSUER,\n", "                TimeBasedContext.HISTORICAL);\n", "        ValidationContext sutB = new ValidationContext(ValidatorContext.CERTIFICATE_CHAIN_VALIDATOR,\n", "                CertificateSource.CERT_ISSUER, TimeBasedContext.HISTORICAL);\n", "        ValidationContext sutC = new ValidationContext(ValidatorContext.CRL_VALIDATOR, CertificateSource.OCSP_ISSUER,\n", "                TimeBasedContext.HISTORICAL);\n", "        ValidationContext sutD = new ValidationContext(ValidatorContext.CRL_VALIDATOR, CertificateSource.CERT_ISSUER,\n", "                TimeBasedContext.PRESENT);\n", "\n", "        Assert.assertEquals(sutA.hashCode(), sut0.hashCode());\n", "        Assert.assertNotEquals(sutA.hashCode(), sutB.hashCode());\n", "        Assert.assertNotEquals(sutA.hashCode(), sutC.hashCode());\n", "        Assert.assertNotEquals(sutA.hashCode(), sutD.hashCode());\n", "    }\n", "\n", "    @Test\n", "    public void hashCodeTest() {\n", "        ValidationContext vc1 = new ValidationContext(ValidatorContext.OCSP_VALIDATOR,\n", "                CertificateSource.OCSP_ISSUER,\n", "                TimeBasedContext.HISTORICAL);\n", "\n", "        ValidationContext vc2 = new ValidationContext(ValidatorContext.OCSP_VALIDATOR,\n", "                CertificateSource.OCSP_ISSUER,\n", "                TimeBasedContext.HISTORICAL);\n", "\n", "        ValidationContext vc3 = new ValidationContext(ValidatorContext.CERTIFICATE_CHAIN_VALIDATOR,\n", "                CertificateSource.OCSP_ISSUER,\n", "                TimeBasedContext.HISTORICAL);\n", "\n", "        ValidationContext vc4 = new ValidationContext(ValidatorContext.OCSP_VALIDATOR,\n", "                CertificateSource.CERT_ISSUER,\n", "                TimeBasedContext.HISTORICAL);\n", "\n", "        ValidationContext vc5 = new ValidationContext(ValidatorContext.OCSP_VALIDATOR,\n", "                CertificateSource.OCSP_ISSUER,\n", "                TimeBasedContext.PRESENT);\n", "        Assert.assertEquals(vc1.hashCode(), vc2.hashCode());\n", "        Assert.assertNotEquals(vc1.hashCode(), vc3.hashCode());\n", "        Assert.assertNotEquals(vc1.hashCode(), vc4.hashCode());\n", "        Assert.assertNotEquals(vc1.hashCode(), vc5.hashCode());\n", "    }\n", "}"], "method_lines_dic": {"ValidationContext::::getPreviousValidationContext()": [61, 63], "ValidationContext::::getCertificateSource()": [70, 72], "ValidationContext::::setCertificateSource(com.itextpdf.signatures.validation.v1.context.CertificateSource)": [81, 83], "ValidationContext::::getTimeBasedContext()": [90, 92], "ValidationContext::::setTimeBasedContext(com.itextpdf.signatures.validation.v1.context.TimeBasedContext)": [101, 103], "ValidationContext::::getValidatorContext()": [110, 112], "ValidationContext::::setValidatorContext(com.itextpdf.signatures.validation.v1.context.ValidatorContext)": [121, 123], "ValidationContext::::checkIfContextChainContainsCertificateSource(com.itextpdf.signatures.validation.v1.context.ValidationContext,com.itextpdf.signatures.validation.v1.context.CertificateSource)": [133, 142], "ValidationContext::::toString()": [150, 157], "ValidationContext::::equals(java.lang.Object)": [167, 175], "ValidationContext::::hashCode()": [183, 186]}, "test_method_lines_dic": {"ValidationContextTest::::testInitializingConstructor()": [34, 41], "ValidationContextTest::::testSetAndGetCertificateSource()": [43, 49], "ValidationContextTest::::testSetAndGetTemporalContext()": [51, 57], "ValidationContextTest::::testSetAndGetValidator()": [59, 65], "ValidationContextTest::::testEquals()": [67, 75], "ValidationContextTest::::testNotEquals()": [77, 91], "ValidationContextTest::::testHashCode()": [93, 110], "ValidationContextTest::::hashCodeTest()": [112, 137]}, "reverse_method_lines_dic": {"61": "ValidationContext::::getPreviousValidationContext()", "62": "ValidationContext::::getPreviousValidationContext()", "63": "ValidationContext::::getPreviousValidationContext()", "70": "ValidationContext::::getCertificateSource()", "71": "ValidationContext::::getCertificateSource()", "72": "ValidationContext::::getCertificateSource()", "81": "ValidationContext::::setCertificateSource(com.itextpdf.signatures.validation.v1.context.CertificateSource)", "82": "ValidationContext::::setCertificateSource(com.itextpdf.signatures.validation.v1.context.CertificateSource)", "83": "ValidationContext::::setCertificateSource(com.itextpdf.signatures.validation.v1.context.CertificateSource)", "90": "ValidationContext::::getTimeBasedContext()", "91": "ValidationContext::::getTimeBasedContext()", "92": "ValidationContext::::getTimeBasedContext()", "101": "ValidationContext::::setTimeBasedContext(com.itextpdf.signatures.validation.v1.context.TimeBasedContext)", "102": "ValidationContext::::setTimeBasedContext(com.itextpdf.signatures.validation.v1.context.TimeBasedContext)", "103": "ValidationContext::::setTimeBasedContext(com.itextpdf.signatures.validation.v1.context.TimeBasedContext)", "110": "ValidationContext::::getValidatorContext()", "111": "ValidationContext::::getValidatorContext()", "112": "ValidationContext::::getValidatorContext()", "121": "ValidationContext::::setValidatorContext(com.itextpdf.signatures.validation.v1.context.ValidatorContext)", "122": "ValidationContext::::setValidatorContext(com.itextpdf.signatures.validation.v1.context.ValidatorContext)", "123": "ValidationContext::::setValidatorContext(com.itextpdf.signatures.validation.v1.context.ValidatorContext)", "133": "ValidationContext::::checkIfContextChainContainsCertificateSource(com.itextpdf.signatures.validation.v1.context.ValidationContext,com.itextpdf.signatures.validation.v1.context.CertificateSource)", "134": "ValidationContext::::checkIfContextChainContainsCertificateSource(com.itextpdf.signatures.validation.v1.context.ValidationContext,com.itextpdf.signatures.validation.v1.context.CertificateSource)", "135": "ValidationContext::::checkIfContextChainContainsCertificateSource(com.itextpdf.signatures.validation.v1.context.ValidationContext,com.itextpdf.signatures.validation.v1.context.CertificateSource)", "136": "ValidationContext::::checkIfContextChainContainsCertificateSource(com.itextpdf.signatures.validation.v1.context.ValidationContext,com.itextpdf.signatures.validation.v1.context.CertificateSource)", "137": "ValidationContext::::checkIfContextChainContainsCertificateSource(com.itextpdf.signatures.validation.v1.context.ValidationContext,com.itextpdf.signatures.validation.v1.context.CertificateSource)", "138": "ValidationContext::::checkIfContextChainContainsCertificateSource(com.itextpdf.signatures.validation.v1.context.ValidationContext,com.itextpdf.signatures.validation.v1.context.CertificateSource)", "139": "ValidationContext::::checkIfContextChainContainsCertificateSource(com.itextpdf.signatures.validation.v1.context.ValidationContext,com.itextpdf.signatures.validation.v1.context.CertificateSource)", "140": "ValidationContext::::checkIfContextChainContainsCertificateSource(com.itextpdf.signatures.validation.v1.context.ValidationContext,com.itextpdf.signatures.validation.v1.context.CertificateSource)", "141": "ValidationContext::::checkIfContextChainContainsCertificateSource(com.itextpdf.signatures.validation.v1.context.ValidationContext,com.itextpdf.signatures.validation.v1.context.CertificateSource)", "142": "ValidationContext::::checkIfContextChainContainsCertificateSource(com.itextpdf.signatures.validation.v1.context.ValidationContext,com.itextpdf.signatures.validation.v1.context.CertificateSource)", "150": "ValidationContext::::toString()", "151": "ValidationContext::::toString()", "152": "ValidationContext::::toString()", "153": "ValidationContext::::toString()", "154": "ValidationContext::::toString()", "155": "ValidationContext::::toString()", "156": "ValidationContext::::toString()", "157": "ValidationContext::::toString()", "167": "ValidationContext::::equals(java.lang.Object)", "168": "ValidationContext::::equals(java.lang.Object)", "169": "ValidationContext::::equals(java.lang.Object)", "170": "ValidationContext::::equals(java.lang.Object)", "171": "ValidationContext::::equals(java.lang.Object)", "172": "ValidationContext::::equals(java.lang.Object)", "173": "ValidationContext::::equals(java.lang.Object)", "174": "ValidationContext::::equals(java.lang.Object)", "175": "ValidationContext::::equals(java.lang.Object)", "183": "ValidationContext::::hashCode()", "184": "ValidationContext::::hashCode()", "185": "ValidationContext::::hashCode()", "186": "ValidationContext::::hashCode()"}, "test_reverse_method_lines_dic": {"34": "ValidationContextTest::::testInitializingConstructor()", "35": "ValidationContextTest::::testInitializingConstructor()", "36": "ValidationContextTest::::testInitializingConstructor()", "37": "ValidationContextTest::::testInitializingConstructor()", "38": "ValidationContextTest::::testInitializingConstructor()", "39": "ValidationContextTest::::testInitializingConstructor()", "40": "ValidationContextTest::::testInitializingConstructor()", "41": "ValidationContextTest::::testInitializingConstructor()", "43": "ValidationContextTest::::testSetAndGetCertificateSource()", "44": "ValidationContextTest::::testSetAndGetCertificateSource()", "45": "ValidationContextTest::::testSetAndGetCertificateSource()", "46": "ValidationContextTest::::testSetAndGetCertificateSource()", "47": "ValidationContextTest::::testSetAndGetCertificateSource()", "48": "ValidationContextTest::::testSetAndGetCertificateSource()", "49": "ValidationContextTest::::testSetAndGetCertificateSource()", "51": "ValidationContextTest::::testSetAndGetTemporalContext()", "52": "ValidationContextTest::::testSetAndGetTemporalContext()", "53": "ValidationContextTest::::testSetAndGetTemporalContext()", "54": "ValidationContextTest::::testSetAndGetTemporalContext()", "55": "ValidationContextTest::::testSetAndGetTemporalContext()", "56": "ValidationContextTest::::testSetAndGetTemporalContext()", "57": "ValidationContextTest::::testSetAndGetTemporalContext()", "59": "ValidationContextTest::::testSetAndGetValidator()", "60": "ValidationContextTest::::testSetAndGetValidator()", "61": "ValidationContextTest::::testSetAndGetValidator()", "62": "ValidationContextTest::::testSetAndGetValidator()", "63": "ValidationContextTest::::testSetAndGetValidator()", "64": "ValidationContextTest::::testSetAndGetValidator()", "65": "ValidationContextTest::::testSetAndGetValidator()", "67": "ValidationContextTest::::testEquals()", "68": "ValidationContextTest::::testEquals()", "69": "ValidationContextTest::::testEquals()", "70": "ValidationContextTest::::testEquals()", "71": "ValidationContextTest::::testEquals()", "72": "ValidationContextTest::::testEquals()", "73": "ValidationContextTest::::testEquals()", "74": "ValidationContextTest::::testEquals()", "75": "ValidationContextTest::::testEquals()", "77": "ValidationContextTest::::testNotEquals()", "78": "ValidationContextTest::::testNotEquals()", "79": "ValidationContextTest::::testNotEquals()", "80": "ValidationContextTest::::testNotEquals()", "81": "ValidationContextTest::::testNotEquals()", "82": "ValidationContextTest::::testNotEquals()", "83": "ValidationContextTest::::testNotEquals()", "84": "ValidationContextTest::::testNotEquals()", "85": "ValidationContextTest::::testNotEquals()", "86": "ValidationContextTest::::testNotEquals()", "87": "ValidationContextTest::::testNotEquals()", "88": "ValidationContextTest::::testNotEquals()", "89": "ValidationContextTest::::testNotEquals()", "90": "ValidationContextTest::::testNotEquals()", "91": "ValidationContextTest::::testNotEquals()", "93": "ValidationContextTest::::testHashCode()", "94": "ValidationContextTest::::testHashCode()", "95": "ValidationContextTest::::testHashCode()", "96": "ValidationContextTest::::testHashCode()", "97": "ValidationContextTest::::testHashCode()", "98": "ValidationContextTest::::testHashCode()", "99": "ValidationContextTest::::testHashCode()", "100": "ValidationContextTest::::testHashCode()", "101": "ValidationContextTest::::testHashCode()", "102": "ValidationContextTest::::testHashCode()", "103": "ValidationContextTest::::testHashCode()", "104": "ValidationContextTest::::testHashCode()", "105": "ValidationContextTest::::testHashCode()", "106": "ValidationContextTest::::testHashCode()", "107": "ValidationContextTest::::testHashCode()", "108": "ValidationContextTest::::testHashCode()", "109": "ValidationContextTest::::testHashCode()", "110": "ValidationContextTest::::testHashCode()", "112": "ValidationContextTest::::hashCodeTest()", "113": "ValidationContextTest::::hashCodeTest()", "114": "ValidationContextTest::::hashCodeTest()", "115": "ValidationContextTest::::hashCodeTest()", "116": "ValidationContextTest::::hashCodeTest()", "117": "ValidationContextTest::::hashCodeTest()", "118": "ValidationContextTest::::hashCodeTest()", "119": "ValidationContextTest::::hashCodeTest()", "120": "ValidationContextTest::::hashCodeTest()", "121": "ValidationContextTest::::hashCodeTest()", "122": "ValidationContextTest::::hashCodeTest()", "123": "ValidationContextTest::::hashCodeTest()", "124": "ValidationContextTest::::hashCodeTest()", "125": "ValidationContextTest::::hashCodeTest()", "126": "ValidationContextTest::::hashCodeTest()", "127": "ValidationContextTest::::hashCodeTest()", "128": "ValidationContextTest::::hashCodeTest()", "129": "ValidationContextTest::::hashCodeTest()", "130": "ValidationContextTest::::hashCodeTest()", "131": "ValidationContextTest::::hashCodeTest()", "132": "ValidationContextTest::::hashCodeTest()", "133": "ValidationContextTest::::hashCodeTest()", "134": "ValidationContextTest::::hashCodeTest()", "135": "ValidationContextTest::::hashCodeTest()", "136": "ValidationContextTest::::hashCodeTest()", "137": "ValidationContextTest::::hashCodeTest()"}, "tests": [{"test_lines": [34, 41], "covered_lines": [44, 45, 46, 47, 48, 71, 91, 111]}, {"test_lines": [43, 49], "covered_lines": [44, 45, 46, 47, 48, 52, 53, 54, 71, 82]}, {"test_lines": [51, 57], "covered_lines": [44, 45, 46, 47, 48, 52, 53, 54, 91, 102]}, {"test_lines": [59, 65], "covered_lines": [44, 45, 46, 47, 48, 52, 53, 54, 111, 122]}, {"test_lines": [67, 75], "covered_lines": [44, 45, 46, 47, 48, 169, 170, 171, 172]}, {"test_lines": [77, 91], "covered_lines": [44, 45, 46, 47, 48, 169, 170, 171, 172]}, {"test_lines": [93, 110], "covered_lines": [44, 45, 46, 47, 48, 185]}, {"test_lines": [112, 137], "covered_lines": [44, 45, 46, 47, 48, 185]}]}, "/bernard/dataset_construction/prep/repos/itext-java/sign/src/main/java/com/itextpdf/signatures/validation/v1/extensions/KeyUsageExtension.java": {"class_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.signatures.validation.v1.extensions;\n", "\n", "import com.itextpdf.bouncycastleconnector.BouncyCastleFactoryCreator;\n", "import com.itextpdf.commons.bouncycastle.IBouncyCastleFactory;\n", "import com.itextpdf.signatures.OID;\n", "\n", "import java.security.cert.X509Certificate;\n", "import java.util.Collections;\n", "import java.util.List;\n", "\n", "/**\n", " * Class representing \"Key Usage\" extenstion.\n", " */\n", "public class KeyUsageExtension extends CertificateExtension {\n", "\n", "    private static final IBouncyCastleFactory FACTORY = BouncyCastleFactoryCreator.getFactory();\n", "\n", "    private final int keyUsage;\n", "\n", "    /**\n", "     * Create new {@link KeyUsageExtension} instance using provided {@code int} flag.\n", "     *\n", "     * @param keyUsage {@code int} flag which represents bit values for key usage value\n", "     */\n", "    public KeyUsageExtension(int keyUsage) {\n", "        super(OID.X509Extensions.KEY_USAGE, FACTORY.createKeyUsage(keyUsage).toASN1Primitive());\n", "        this.keyUsage = keyUsage;\n", "    }\n", "\n", "    /**\n", "     * Create new {@link KeyUsageExtension} instance using provided key usage enum list.\n", "     *\n", "     * @param keyUsages key usages {@link List} which represents key usage values\n", "     */\n", "    public KeyUsageExtension(List<KeyUsage> keyUsages) {\n", "        this(convertKeyUsageSetToInt(keyUsages));\n", "    }\n", "\n", "    /**\n", "     * Create new {@link KeyUsageExtension} instance using provided single key usage enum value.\n", "     *\n", "     * @param keyUsageValue {@link KeyUsage} which represents single key usage enum value\n", "     */\n", "    public KeyUsageExtension(KeyUsage keyUsageValue) {\n", "        this(Collections.singletonList(keyUsageValue));\n", "    }\n", "\n", "    /**\n", "     * Check if this extension is present in the provided certificate. In case of {@link KeyUsageExtension},\n", "     * check if this key usage bit values are present in certificate. Other values may be present as well.\n", "     *\n", "     * @param certificate {@link X509Certificate} in which this extension shall be present\n", "     *\n", "     * @return {@code true} if this key usage bit values are present in certificate, {@code false} otherwise\n", "     */\n", "    @Override\n", "    public boolean existsInCertificate(X509Certificate certificate) {\n", "        boolean[] providedKeyUsageFlags = certificate.getKeyUsage();\n", "        if (providedKeyUsageFlags == null) {\n", "            return false;\n", "        }\n", "        for (int i = 0; i < providedKeyUsageFlags.length; ++i) {\n", "            int power = providedKeyUsageFlags.length - i - 2;\n", "            if (power < 0) {\n", "                // Bits are encoded backwards, for the last bit power is -1 and in this case we need to go over byte\n", "                power = 16 + power;\n", "            }\n", "            if ((keyUsage & (1 << power)) != 0 && !providedKeyUsageFlags[i]) {\n", "                return false;\n", "            }\n", "        }\n", "        return true;\n", "    }\n", "\n", "    private static int convertKeyUsageSetToInt(List<KeyUsage> keyUsages) {\n", "        KeyUsage[] possibleKeyUsage = new KeyUsage[] {\n", "                KeyUsage.DIGITAL_SIGNATURE,\n", "                KeyUsage.NON_REPUDIATION,\n", "                KeyUsage.KEY_ENCIPHERMENT,\n", "                KeyUsage.DATA_ENCIPHERMENT,\n", "                KeyUsage.KEY_AGREEMENT,\n", "                KeyUsage.KEY_CERT_SIGN,\n", "                KeyUsage.CRL_SIGN,\n", "                KeyUsage.ENCIPHER_ONLY,\n", "                KeyUsage.DECIPHER_ONLY\n", "        };\n", "        int result = 0;\n", "        for (int i = 0; i < possibleKeyUsage.length; ++i) {\n", "            if (keyUsages.contains(possibleKeyUsage[i])) {\n", "                int power = possibleKeyUsage.length - i - 2;\n", "                if (power < 0) {\n", "                    // Bits are encoded backwards, for the last bit power is -1 and in this case we need to go over byte\n", "                    power = 16 + power;\n", "                }\n", "                result |= (1 << power);\n", "            }\n", "        }\n", "        return result;\n", "    }\n", "}\n"], "test_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.signatures.validation.v1.extensions;\n", "\n", "import com.itextpdf.signatures.testutils.PemFileHelper;\n", "import com.itextpdf.test.ExtendedITextTest;\n", "import com.itextpdf.test.annotations.type.BouncyCastleUnitTest;\n", "\n", "import java.io.IOException;\n", "import java.security.cert.CertificateException;\n", "import java.security.cert.X509Certificate;\n", "import java.util.Arrays;\n", "import org.junit.Assert;\n", "import org.junit.Test;\n", "import org.junit.experimental.categories.Category;\n", "\n", "@Category(BouncyCastleUnitTest.class)\n", "public class KeyUsageExtensionTest extends ExtendedITextTest {\n", "    private static final String certsSrc = \"./src/test/resources/com/itextpdf/signatures/validation/v1/extensions/KeyUsageExtensionTest/\";\n", "\n", "    @Test\n", "    public void keyUsageNotSetExpectedTest() throws CertificateException, IOException {\n", "        String certName = certsSrc + \"keyUsageNotSetCert.pem\";\n", "        X509Certificate certificate = (X509Certificate) PemFileHelper.readFirstChain(certName)[0];\n", "\n", "        KeyUsageExtension extension = new KeyUsageExtension(0);\n", "\n", "        Assert.assertFalse(extension.existsInCertificate(certificate));\n", "    }\n", "\n", "    @Test\n", "    public void keyUsageNotSetNotExpectedTest() throws CertificateException, IOException {\n", "        String certName = certsSrc + \"keyUsageNotSetCert.pem\";\n", "        X509Certificate certificate = (X509Certificate) PemFileHelper.readFirstChain(certName)[0];\n", "\n", "        KeyUsageExtension extension = new KeyUsageExtension(8);\n", "\n", "        Assert.assertFalse(extension.existsInCertificate(certificate));\n", "    }\n", "\n", "    @Test\n", "    public void keyUsageKeyCertSignExpectedTest() throws CertificateException, IOException {\n", "        String certName = certsSrc + \"keyUsageKeyCertSignCert.pem\";\n", "        X509Certificate certificate = (X509Certificate) PemFileHelper.readFirstChain(certName)[0];\n", "\n", "        KeyUsageExtension extension = new KeyUsageExtension(KeyUsage.KEY_CERT_SIGN);\n", "\n", "        Assert.assertTrue(extension.existsInCertificate(certificate));\n", "    }\n", "\n", "    @Test\n", "    public void keyUsageKeyCertSignPartiallyExpectedTest() throws CertificateException, IOException {\n", "        String certName = certsSrc + \"keyUsageKeyCertSignCert.pem\";\n", "        X509Certificate certificate = (X509Certificate) PemFileHelper.readFirstChain(certName)[0];\n", "\n", "        KeyUsageExtension extension = new KeyUsageExtension(Arrays.asList(KeyUsage.KEY_CERT_SIGN, KeyUsage.CRL_SIGN));\n", "\n", "        Assert.assertFalse(extension.existsInCertificate(certificate));\n", "    }\n", "\n", "    @Test\n", "    public void keyUsageKeyCertSignNotExpectedTest() throws CertificateException, IOException {\n", "        String certName = certsSrc + \"keyUsageKeyCertSignCert.pem\";\n", "        X509Certificate certificate = (X509Certificate) PemFileHelper.readFirstChain(certName)[0];\n", "\n", "        KeyUsageExtension extension = new KeyUsageExtension(KeyUsage.CRL_SIGN);\n", "\n", "        Assert.assertFalse(extension.existsInCertificate(certificate));\n", "    }\n", "\n", "    @Test\n", "    public void keyUsageDigitalSignatureTest() throws CertificateException, IOException {\n", "        String certName = certsSrc + \"keyUsageDigitalSignatureCert.pem\";\n", "        X509Certificate certificate = (X509Certificate) PemFileHelper.readFirstChain(certName)[0];\n", "\n", "        KeyUsageExtension extension = new KeyUsageExtension(KeyUsage.DIGITAL_SIGNATURE);\n", "\n", "        Assert.assertTrue(extension.existsInCertificate(certificate));\n", "    }\n", "\n", "    @Test\n", "    public void keyUsageDecipherOnlyExpectedTest() throws CertificateException, IOException {\n", "        String certName = certsSrc + \"keyUsageDecipherOnlyCert.pem\";\n", "        X509Certificate certificate = (X509Certificate) PemFileHelper.readFirstChain(certName)[0];\n", "\n", "        KeyUsageExtension extension = new KeyUsageExtension(KeyUsage.DECIPHER_ONLY);\n", "\n", "        Assert.assertTrue(extension.existsInCertificate(certificate));\n", "    }\n", "\n", "    @Test\n", "    public void keyUsageDecipherOnlyNotExpectedTest() throws CertificateException, IOException {\n", "        String certName = certsSrc + \"keyUsageDecipherOnlyCert.pem\";\n", "        X509Certificate certificate = (X509Certificate) PemFileHelper.readFirstChain(certName)[0];\n", "\n", "        KeyUsageExtension extension = new KeyUsageExtension(KeyUsage.ENCIPHER_ONLY);\n", "\n", "        Assert.assertFalse(extension.existsInCertificate(certificate));\n", "    }\n", "\n", "    @Test\n", "    public void keyUsageSeveralKeys1PartiallyExpectedTest() throws CertificateException, IOException {\n", "        String certName = certsSrc + \"keyUsageSeveralKeys1Cert.pem\";\n", "        X509Certificate certificate = (X509Certificate) PemFileHelper.readFirstChain(certName)[0];\n", "\n", "        KeyUsageExtension extension = new KeyUsageExtension(Arrays.asList(KeyUsage.CRL_SIGN, KeyUsage.NON_REPUDIATION));\n", "\n", "        Assert.assertTrue(extension.existsInCertificate(certificate));\n", "    }\n", "\n", "    @Test\n", "    public void keyUsageSeveralKeys1ExpectedTest() throws CertificateException, IOException {\n", "        String certName = certsSrc + \"keyUsageSeveralKeys1Cert.pem\";\n", "        X509Certificate certificate = (X509Certificate) PemFileHelper.readFirstChain(certName)[0];\n", "\n", "        KeyUsageExtension extension = new KeyUsageExtension(Arrays.asList(KeyUsage.CRL_SIGN,\n", "                KeyUsage.NON_REPUDIATION, KeyUsage.KEY_ENCIPHERMENT));\n", "\n", "        Assert.assertTrue(extension.existsInCertificate(certificate));\n", "    }\n", "\n", "    @Test\n", "    public void keyUsageSeveralKeys1PartiallyNotExpectedTest() throws CertificateException, IOException {\n", "        String certName = certsSrc + \"keyUsageSeveralKeys1Cert.pem\";\n", "        X509Certificate certificate = (X509Certificate) PemFileHelper.readFirstChain(certName)[0];\n", "\n", "        KeyUsageExtension extension = new KeyUsageExtension(Arrays.asList(KeyUsage.CRL_SIGN, KeyUsage.DECIPHER_ONLY,\n", "                KeyUsage.KEY_ENCIPHERMENT));\n", "\n", "        Assert.assertFalse(extension.existsInCertificate(certificate));\n", "    }\n", "\n", "    @Test\n", "    public void keyUsageSeveralKeys2PartiallyExpectedTest() throws CertificateException, IOException {\n", "        String certName = certsSrc + \"keyUsageSeveralKeys2Cert.pem\";\n", "        X509Certificate certificate = (X509Certificate) PemFileHelper.readFirstChain(certName)[0];\n", "\n", "        KeyUsageExtension extension = new KeyUsageExtension(Arrays.asList(KeyUsage.DECIPHER_ONLY, KeyUsage.DIGITAL_SIGNATURE));\n", "\n", "        Assert.assertTrue(extension.existsInCertificate(certificate));\n", "    }\n", "\n", "    @Test\n", "    public void keyUsageSeveralKeys2ExpectedTest() throws CertificateException, IOException {\n", "        String certName = certsSrc + \"keyUsageSeveralKeys2Cert.pem\";\n", "        X509Certificate certificate = (X509Certificate) PemFileHelper.readFirstChain(certName)[0];\n", "\n", "        KeyUsageExtension extension = new KeyUsageExtension(Arrays.asList(KeyUsage.DECIPHER_ONLY,\n", "                KeyUsage.DIGITAL_SIGNATURE, KeyUsage.KEY_AGREEMENT));\n", "\n", "        Assert.assertTrue(extension.existsInCertificate(certificate));\n", "    }\n", "\n", "    @Test\n", "    public void keyUsageSeveralKeys2PartiallyNotExpectedTest() throws CertificateException, IOException {\n", "        String certName = certsSrc + \"keyUsageSeveralKeys2Cert.pem\";\n", "        X509Certificate certificate = (X509Certificate) PemFileHelper.readFirstChain(certName)[0];\n", "\n", "        KeyUsageExtension extension = new KeyUsageExtension(Arrays.asList(KeyUsage.CRL_SIGN, KeyUsage.DECIPHER_ONLY,\n", "                KeyUsage.DIGITAL_SIGNATURE));\n", "\n", "        Assert.assertFalse(extension.existsInCertificate(certificate));\n", "    }\n", "}\n"], "method_lines_dic": {"KeyUsageExtension::::existsInCertificate(java.security.cert.X509Certificate)": [78, 95], "KeyUsageExtension::::convertKeyUsageSetToInt(java.util.List<com.itextpdf.signatures.validation.v1.extensions.KeyUsage>)": [97, 121]}, "test_method_lines_dic": {"KeyUsageExtensionTest::::keyUsageNotSetExpectedTest()": [41, 49], "KeyUsageExtensionTest::::keyUsageNotSetNotExpectedTest()": [51, 59], "KeyUsageExtensionTest::::keyUsageKeyCertSignExpectedTest()": [61, 69], "KeyUsageExtensionTest::::keyUsageKeyCertSignPartiallyExpectedTest()": [71, 79], "KeyUsageExtensionTest::::keyUsageKeyCertSignNotExpectedTest()": [81, 89], "KeyUsageExtensionTest::::keyUsageDigitalSignatureTest()": [91, 99], "KeyUsageExtensionTest::::keyUsageDecipherOnlyExpectedTest()": [101, 109], "KeyUsageExtensionTest::::keyUsageDecipherOnlyNotExpectedTest()": [111, 119], "KeyUsageExtensionTest::::keyUsageSeveralKeys1PartiallyExpectedTest()": [121, 129], "KeyUsageExtensionTest::::keyUsageSeveralKeys1ExpectedTest()": [131, 140], "KeyUsageExtensionTest::::keyUsageSeveralKeys1PartiallyNotExpectedTest()": [142, 151], "KeyUsageExtensionTest::::keyUsageSeveralKeys2PartiallyExpectedTest()": [153, 161], "KeyUsageExtensionTest::::keyUsageSeveralKeys2ExpectedTest()": [163, 172], "KeyUsageExtensionTest::::keyUsageSeveralKeys2PartiallyNotExpectedTest()": [174, 183]}, "reverse_method_lines_dic": {"78": "KeyUsageExtension::::existsInCertificate(java.security.cert.X509Certificate)", "79": "KeyUsageExtension::::existsInCertificate(java.security.cert.X509Certificate)", "80": "KeyUsageExtension::::existsInCertificate(java.security.cert.X509Certificate)", "81": "KeyUsageExtension::::existsInCertificate(java.security.cert.X509Certificate)", "82": "KeyUsageExtension::::existsInCertificate(java.security.cert.X509Certificate)", "83": "KeyUsageExtension::::existsInCertificate(java.security.cert.X509Certificate)", "84": "KeyUsageExtension::::existsInCertificate(java.security.cert.X509Certificate)", "85": "KeyUsageExtension::::existsInCertificate(java.security.cert.X509Certificate)", "86": "KeyUsageExtension::::existsInCertificate(java.security.cert.X509Certificate)", "87": "KeyUsageExtension::::existsInCertificate(java.security.cert.X509Certificate)", "88": "KeyUsageExtension::::existsInCertificate(java.security.cert.X509Certificate)", "89": "KeyUsageExtension::::existsInCertificate(java.security.cert.X509Certificate)", "90": "KeyUsageExtension::::existsInCertificate(java.security.cert.X509Certificate)", "91": "KeyUsageExtension::::existsInCertificate(java.security.cert.X509Certificate)", "92": "KeyUsageExtension::::existsInCertificate(java.security.cert.X509Certificate)", "93": "KeyUsageExtension::::existsInCertificate(java.security.cert.X509Certificate)", "94": "KeyUsageExtension::::existsInCertificate(java.security.cert.X509Certificate)", "95": "KeyUsageExtension::::existsInCertificate(java.security.cert.X509Certificate)", "97": "KeyUsageExtension::::convertKeyUsageSetToInt(java.util.List<com.itextpdf.signatures.validation.v1.extensions.KeyUsage>)", "98": "KeyUsageExtension::::convertKeyUsageSetToInt(java.util.List<com.itextpdf.signatures.validation.v1.extensions.KeyUsage>)", "99": "KeyUsageExtension::::convertKeyUsageSetToInt(java.util.List<com.itextpdf.signatures.validation.v1.extensions.KeyUsage>)", "100": "KeyUsageExtension::::convertKeyUsageSetToInt(java.util.List<com.itextpdf.signatures.validation.v1.extensions.KeyUsage>)", "101": "KeyUsageExtension::::convertKeyUsageSetToInt(java.util.List<com.itextpdf.signatures.validation.v1.extensions.KeyUsage>)", "102": "KeyUsageExtension::::convertKeyUsageSetToInt(java.util.List<com.itextpdf.signatures.validation.v1.extensions.KeyUsage>)", "103": "KeyUsageExtension::::convertKeyUsageSetToInt(java.util.List<com.itextpdf.signatures.validation.v1.extensions.KeyUsage>)", "104": "KeyUsageExtension::::convertKeyUsageSetToInt(java.util.List<com.itextpdf.signatures.validation.v1.extensions.KeyUsage>)", "105": "KeyUsageExtension::::convertKeyUsageSetToInt(java.util.List<com.itextpdf.signatures.validation.v1.extensions.KeyUsage>)", "106": "KeyUsageExtension::::convertKeyUsageSetToInt(java.util.List<com.itextpdf.signatures.validation.v1.extensions.KeyUsage>)", "107": "KeyUsageExtension::::convertKeyUsageSetToInt(java.util.List<com.itextpdf.signatures.validation.v1.extensions.KeyUsage>)", "108": "KeyUsageExtension::::convertKeyUsageSetToInt(java.util.List<com.itextpdf.signatures.validation.v1.extensions.KeyUsage>)", "109": "KeyUsageExtension::::convertKeyUsageSetToInt(java.util.List<com.itextpdf.signatures.validation.v1.extensions.KeyUsage>)", "110": "KeyUsageExtension::::convertKeyUsageSetToInt(java.util.List<com.itextpdf.signatures.validation.v1.extensions.KeyUsage>)", "111": "KeyUsageExtension::::convertKeyUsageSetToInt(java.util.List<com.itextpdf.signatures.validation.v1.extensions.KeyUsage>)", "112": "KeyUsageExtension::::convertKeyUsageSetToInt(java.util.List<com.itextpdf.signatures.validation.v1.extensions.KeyUsage>)", "113": "KeyUsageExtension::::convertKeyUsageSetToInt(java.util.List<com.itextpdf.signatures.validation.v1.extensions.KeyUsage>)", "114": "KeyUsageExtension::::convertKeyUsageSetToInt(java.util.List<com.itextpdf.signatures.validation.v1.extensions.KeyUsage>)", "115": "KeyUsageExtension::::convertKeyUsageSetToInt(java.util.List<com.itextpdf.signatures.validation.v1.extensions.KeyUsage>)", "116": "KeyUsageExtension::::convertKeyUsageSetToInt(java.util.List<com.itextpdf.signatures.validation.v1.extensions.KeyUsage>)", "117": "KeyUsageExtension::::convertKeyUsageSetToInt(java.util.List<com.itextpdf.signatures.validation.v1.extensions.KeyUsage>)", "118": "KeyUsageExtension::::convertKeyUsageSetToInt(java.util.List<com.itextpdf.signatures.validation.v1.extensions.KeyUsage>)", "119": "KeyUsageExtension::::convertKeyUsageSetToInt(java.util.List<com.itextpdf.signatures.validation.v1.extensions.KeyUsage>)", "120": "KeyUsageExtension::::convertKeyUsageSetToInt(java.util.List<com.itextpdf.signatures.validation.v1.extensions.KeyUsage>)", "121": "KeyUsageExtension::::convertKeyUsageSetToInt(java.util.List<com.itextpdf.signatures.validation.v1.extensions.KeyUsage>)"}, "test_reverse_method_lines_dic": {"41": "KeyUsageExtensionTest::::keyUsageNotSetExpectedTest()", "42": "KeyUsageExtensionTest::::keyUsageNotSetExpectedTest()", "43": "KeyUsageExtensionTest::::keyUsageNotSetExpectedTest()", "44": "KeyUsageExtensionTest::::keyUsageNotSetExpectedTest()", "45": "KeyUsageExtensionTest::::keyUsageNotSetExpectedTest()", "46": "KeyUsageExtensionTest::::keyUsageNotSetExpectedTest()", "47": "KeyUsageExtensionTest::::keyUsageNotSetExpectedTest()", "48": "KeyUsageExtensionTest::::keyUsageNotSetExpectedTest()", "49": "KeyUsageExtensionTest::::keyUsageNotSetExpectedTest()", "51": "KeyUsageExtensionTest::::keyUsageNotSetNotExpectedTest()", "52": "KeyUsageExtensionTest::::keyUsageNotSetNotExpectedTest()", "53": "KeyUsageExtensionTest::::keyUsageNotSetNotExpectedTest()", "54": "KeyUsageExtensionTest::::keyUsageNotSetNotExpectedTest()", "55": "KeyUsageExtensionTest::::keyUsageNotSetNotExpectedTest()", "56": "KeyUsageExtensionTest::::keyUsageNotSetNotExpectedTest()", "57": "KeyUsageExtensionTest::::keyUsageNotSetNotExpectedTest()", "58": "KeyUsageExtensionTest::::keyUsageNotSetNotExpectedTest()", "59": "KeyUsageExtensionTest::::keyUsageNotSetNotExpectedTest()", "61": "KeyUsageExtensionTest::::keyUsageKeyCertSignExpectedTest()", "62": "KeyUsageExtensionTest::::keyUsageKeyCertSignExpectedTest()", "63": "KeyUsageExtensionTest::::keyUsageKeyCertSignExpectedTest()", "64": "KeyUsageExtensionTest::::keyUsageKeyCertSignExpectedTest()", "65": "KeyUsageExtensionTest::::keyUsageKeyCertSignExpectedTest()", "66": "KeyUsageExtensionTest::::keyUsageKeyCertSignExpectedTest()", "67": "KeyUsageExtensionTest::::keyUsageKeyCertSignExpectedTest()", "68": "KeyUsageExtensionTest::::keyUsageKeyCertSignExpectedTest()", "69": "KeyUsageExtensionTest::::keyUsageKeyCertSignExpectedTest()", "71": "KeyUsageExtensionTest::::keyUsageKeyCertSignPartiallyExpectedTest()", "72": "KeyUsageExtensionTest::::keyUsageKeyCertSignPartiallyExpectedTest()", "73": "KeyUsageExtensionTest::::keyUsageKeyCertSignPartiallyExpectedTest()", "74": "KeyUsageExtensionTest::::keyUsageKeyCertSignPartiallyExpectedTest()", "75": "KeyUsageExtensionTest::::keyUsageKeyCertSignPartiallyExpectedTest()", "76": "KeyUsageExtensionTest::::keyUsageKeyCertSignPartiallyExpectedTest()", "77": "KeyUsageExtensionTest::::keyUsageKeyCertSignPartiallyExpectedTest()", "78": "KeyUsageExtensionTest::::keyUsageKeyCertSignPartiallyExpectedTest()", "79": "KeyUsageExtensionTest::::keyUsageKeyCertSignPartiallyExpectedTest()", "81": "KeyUsageExtensionTest::::keyUsageKeyCertSignNotExpectedTest()", "82": "KeyUsageExtensionTest::::keyUsageKeyCertSignNotExpectedTest()", "83": "KeyUsageExtensionTest::::keyUsageKeyCertSignNotExpectedTest()", "84": "KeyUsageExtensionTest::::keyUsageKeyCertSignNotExpectedTest()", "85": "KeyUsageExtensionTest::::keyUsageKeyCertSignNotExpectedTest()", "86": "KeyUsageExtensionTest::::keyUsageKeyCertSignNotExpectedTest()", "87": "KeyUsageExtensionTest::::keyUsageKeyCertSignNotExpectedTest()", "88": "KeyUsageExtensionTest::::keyUsageKeyCertSignNotExpectedTest()", "89": "KeyUsageExtensionTest::::keyUsageKeyCertSignNotExpectedTest()", "91": "KeyUsageExtensionTest::::keyUsageDigitalSignatureTest()", "92": "KeyUsageExtensionTest::::keyUsageDigitalSignatureTest()", "93": "KeyUsageExtensionTest::::keyUsageDigitalSignatureTest()", "94": "KeyUsageExtensionTest::::keyUsageDigitalSignatureTest()", "95": "KeyUsageExtensionTest::::keyUsageDigitalSignatureTest()", "96": "KeyUsageExtensionTest::::keyUsageDigitalSignatureTest()", "97": "KeyUsageExtensionTest::::keyUsageDigitalSignatureTest()", "98": "KeyUsageExtensionTest::::keyUsageDigitalSignatureTest()", "99": "KeyUsageExtensionTest::::keyUsageDigitalSignatureTest()", "101": "KeyUsageExtensionTest::::keyUsageDecipherOnlyExpectedTest()", "102": "KeyUsageExtensionTest::::keyUsageDecipherOnlyExpectedTest()", "103": "KeyUsageExtensionTest::::keyUsageDecipherOnlyExpectedTest()", "104": "KeyUsageExtensionTest::::keyUsageDecipherOnlyExpectedTest()", "105": "KeyUsageExtensionTest::::keyUsageDecipherOnlyExpectedTest()", "106": "KeyUsageExtensionTest::::keyUsageDecipherOnlyExpectedTest()", "107": "KeyUsageExtensionTest::::keyUsageDecipherOnlyExpectedTest()", "108": "KeyUsageExtensionTest::::keyUsageDecipherOnlyExpectedTest()", "109": "KeyUsageExtensionTest::::keyUsageDecipherOnlyExpectedTest()", "111": "KeyUsageExtensionTest::::keyUsageDecipherOnlyNotExpectedTest()", "112": "KeyUsageExtensionTest::::keyUsageDecipherOnlyNotExpectedTest()", "113": "KeyUsageExtensionTest::::keyUsageDecipherOnlyNotExpectedTest()", "114": "KeyUsageExtensionTest::::keyUsageDecipherOnlyNotExpectedTest()", "115": "KeyUsageExtensionTest::::keyUsageDecipherOnlyNotExpectedTest()", "116": "KeyUsageExtensionTest::::keyUsageDecipherOnlyNotExpectedTest()", "117": "KeyUsageExtensionTest::::keyUsageDecipherOnlyNotExpectedTest()", "118": "KeyUsageExtensionTest::::keyUsageDecipherOnlyNotExpectedTest()", "119": "KeyUsageExtensionTest::::keyUsageDecipherOnlyNotExpectedTest()", "121": "KeyUsageExtensionTest::::keyUsageSeveralKeys1PartiallyExpectedTest()", "122": "KeyUsageExtensionTest::::keyUsageSeveralKeys1PartiallyExpectedTest()", "123": "KeyUsageExtensionTest::::keyUsageSeveralKeys1PartiallyExpectedTest()", "124": "KeyUsageExtensionTest::::keyUsageSeveralKeys1PartiallyExpectedTest()", "125": "KeyUsageExtensionTest::::keyUsageSeveralKeys1PartiallyExpectedTest()", "126": "KeyUsageExtensionTest::::keyUsageSeveralKeys1PartiallyExpectedTest()", "127": "KeyUsageExtensionTest::::keyUsageSeveralKeys1PartiallyExpectedTest()", "128": "KeyUsageExtensionTest::::keyUsageSeveralKeys1PartiallyExpectedTest()", "129": "KeyUsageExtensionTest::::keyUsageSeveralKeys1PartiallyExpectedTest()", "131": "KeyUsageExtensionTest::::keyUsageSeveralKeys1ExpectedTest()", "132": "KeyUsageExtensionTest::::keyUsageSeveralKeys1ExpectedTest()", "133": "KeyUsageExtensionTest::::keyUsageSeveralKeys1ExpectedTest()", "134": "KeyUsageExtensionTest::::keyUsageSeveralKeys1ExpectedTest()", "135": "KeyUsageExtensionTest::::keyUsageSeveralKeys1ExpectedTest()", "136": "KeyUsageExtensionTest::::keyUsageSeveralKeys1ExpectedTest()", "137": "KeyUsageExtensionTest::::keyUsageSeveralKeys1ExpectedTest()", "138": "KeyUsageExtensionTest::::keyUsageSeveralKeys1ExpectedTest()", "139": "KeyUsageExtensionTest::::keyUsageSeveralKeys1ExpectedTest()", "140": "KeyUsageExtensionTest::::keyUsageSeveralKeys1ExpectedTest()", "142": "KeyUsageExtensionTest::::keyUsageSeveralKeys1PartiallyNotExpectedTest()", "143": "KeyUsageExtensionTest::::keyUsageSeveralKeys1PartiallyNotExpectedTest()", "144": "KeyUsageExtensionTest::::keyUsageSeveralKeys1PartiallyNotExpectedTest()", "145": "KeyUsageExtensionTest::::keyUsageSeveralKeys1PartiallyNotExpectedTest()", "146": "KeyUsageExtensionTest::::keyUsageSeveralKeys1PartiallyNotExpectedTest()", "147": "KeyUsageExtensionTest::::keyUsageSeveralKeys1PartiallyNotExpectedTest()", "148": "KeyUsageExtensionTest::::keyUsageSeveralKeys1PartiallyNotExpectedTest()", "149": "KeyUsageExtensionTest::::keyUsageSeveralKeys1PartiallyNotExpectedTest()", "150": "KeyUsageExtensionTest::::keyUsageSeveralKeys1PartiallyNotExpectedTest()", "151": "KeyUsageExtensionTest::::keyUsageSeveralKeys1PartiallyNotExpectedTest()", "153": "KeyUsageExtensionTest::::keyUsageSeveralKeys2PartiallyExpectedTest()", "154": "KeyUsageExtensionTest::::keyUsageSeveralKeys2PartiallyExpectedTest()", "155": "KeyUsageExtensionTest::::keyUsageSeveralKeys2PartiallyExpectedTest()", "156": "KeyUsageExtensionTest::::keyUsageSeveralKeys2PartiallyExpectedTest()", "157": "KeyUsageExtensionTest::::keyUsageSeveralKeys2PartiallyExpectedTest()", "158": "KeyUsageExtensionTest::::keyUsageSeveralKeys2PartiallyExpectedTest()", "159": "KeyUsageExtensionTest::::keyUsageSeveralKeys2PartiallyExpectedTest()", "160": "KeyUsageExtensionTest::::keyUsageSeveralKeys2PartiallyExpectedTest()", "161": "KeyUsageExtensionTest::::keyUsageSeveralKeys2PartiallyExpectedTest()", "163": "KeyUsageExtensionTest::::keyUsageSeveralKeys2ExpectedTest()", "164": "KeyUsageExtensionTest::::keyUsageSeveralKeys2ExpectedTest()", "165": "KeyUsageExtensionTest::::keyUsageSeveralKeys2ExpectedTest()", "166": "KeyUsageExtensionTest::::keyUsageSeveralKeys2ExpectedTest()", "167": "KeyUsageExtensionTest::::keyUsageSeveralKeys2ExpectedTest()", "168": "KeyUsageExtensionTest::::keyUsageSeveralKeys2ExpectedTest()", "169": "KeyUsageExtensionTest::::keyUsageSeveralKeys2ExpectedTest()", "170": "KeyUsageExtensionTest::::keyUsageSeveralKeys2ExpectedTest()", "171": "KeyUsageExtensionTest::::keyUsageSeveralKeys2ExpectedTest()", "172": "KeyUsageExtensionTest::::keyUsageSeveralKeys2ExpectedTest()", "174": "KeyUsageExtensionTest::::keyUsageSeveralKeys2PartiallyNotExpectedTest()", "175": "KeyUsageExtensionTest::::keyUsageSeveralKeys2PartiallyNotExpectedTest()", "176": "KeyUsageExtensionTest::::keyUsageSeveralKeys2PartiallyNotExpectedTest()", "177": "KeyUsageExtensionTest::::keyUsageSeveralKeys2PartiallyNotExpectedTest()", "178": "KeyUsageExtensionTest::::keyUsageSeveralKeys2PartiallyNotExpectedTest()", "179": "KeyUsageExtensionTest::::keyUsageSeveralKeys2PartiallyNotExpectedTest()", "180": "KeyUsageExtensionTest::::keyUsageSeveralKeys2PartiallyNotExpectedTest()", "181": "KeyUsageExtensionTest::::keyUsageSeveralKeys2PartiallyNotExpectedTest()", "182": "KeyUsageExtensionTest::::keyUsageSeveralKeys2PartiallyNotExpectedTest()", "183": "KeyUsageExtensionTest::::keyUsageSeveralKeys2PartiallyNotExpectedTest()"}, "tests": [{"test_lines": [41, 49], "covered_lines": [38, 48, 49, 50, 80, 81, 82]}, {"test_lines": [51, 59], "covered_lines": [38, 48, 49, 50, 80, 81, 82]}, {"test_lines": [61, 69], "covered_lines": [38, 48, 49, 50, 58, 59, 67, 68, 80, 81, 84, 85, 86, 88, 90, 94, 98, 109, 110, 111, 112, 113, 117, 120]}, {"test_lines": [71, 79], "covered_lines": [38, 48, 49, 50, 58, 59, 80, 81, 84, 85, 86, 90, 91, 98, 109, 110, 111, 112, 113, 117, 120]}, {"test_lines": [81, 89], "covered_lines": [38, 48, 49, 50, 58, 59, 67, 68, 80, 81, 84, 85, 86, 90, 91, 98, 109, 110, 111, 112, 113, 117, 120]}, {"test_lines": [91, 99], "covered_lines": [38, 48, 49, 50, 58, 59, 67, 68, 80, 81, 84, 85, 86, 88, 90, 94, 98, 109, 110, 111, 112, 113, 117, 120]}, {"test_lines": [101, 109], "covered_lines": [38, 48, 49, 50, 58, 59, 67, 68, 80, 81, 84, 85, 86, 88, 90, 94, 98, 109, 110, 111, 112, 113, 115, 117, 120]}, {"test_lines": [111, 119], "covered_lines": [38, 48, 49, 50, 58, 59, 67, 68, 80, 81, 84, 85, 86, 90, 91, 98, 109, 110, 111, 112, 113, 117, 120]}, {"test_lines": [121, 129], "covered_lines": [38, 48, 49, 50, 58, 59, 80, 81, 84, 85, 86, 88, 90, 94, 98, 109, 110, 111, 112, 113, 117, 120]}, {"test_lines": [131, 140], "covered_lines": [38, 48, 49, 50, 58, 59, 80, 81, 84, 85, 86, 88, 90, 94, 98, 109, 110, 111, 112, 113, 117, 120]}, {"test_lines": [142, 151], "covered_lines": [38, 48, 49, 50, 58, 59, 80, 81, 84, 85, 86, 88, 90, 91, 98, 109, 110, 111, 112, 113, 115, 117, 120]}, {"test_lines": [153, 161], "covered_lines": [38, 48, 49, 50, 58, 59, 80, 81, 84, 85, 86, 88, 90, 94, 98, 109, 110, 111, 112, 113, 115, 117, 120]}, {"test_lines": [163, 172], "covered_lines": [38, 48, 49, 50, 58, 59, 80, 81, 84, 85, 86, 88, 90, 94, 98, 109, 110, 111, 112, 113, 115, 117, 120]}, {"test_lines": [174, 183], "covered_lines": [38, 48, 49, 50, 58, 59, 80, 81, 84, 85, 86, 90, 91, 98, 109, 110, 111, 112, 113, 115, 117, 120]}]}, "/bernard/dataset_construction/prep/repos/itext-java/sign/src/main/java/com/itextpdf/signatures/validation/v1/extensions/BasicConstraintsExtension.java": {"class_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.signatures.validation.v1.extensions;\n", "\n", "import com.itextpdf.bouncycastleconnector.BouncyCastleFactoryCreator;\n", "import com.itextpdf.commons.bouncycastle.IBouncyCastleFactory;\n", "import com.itextpdf.signatures.CertificateUtil;\n", "import com.itextpdf.signatures.OID;\n", "\n", "import java.io.IOException;\n", "import java.security.cert.X509Certificate;\n", "\n", "/**\n", " * Class representing \"Basic Constraints\" certificate extension.\n", " */\n", "public class BasicConstraintsExtension extends CertificateExtension {\n", "    private static final IBouncyCastleFactory FACTORY = BouncyCastleFactoryCreator.getFactory();\n", "\n", "    private final int pathLength;\n", "\n", "    /**\n", "     * Create new {@link BasicConstraintsExtension} instance using provided {@code boolean} value.\n", "     *\n", "     * @param ca {@code boolean} value, which represents if this certificate is a \"Certificate Authority\"\n", "     */\n", "    public BasicConstraintsExtension(boolean ca) {\n", "        super(OID.X509Extensions.BASIC_CONSTRAINTS, FACTORY.createBasicConstraints(ca).toASN1Primitive());\n", "        if (ca) {\n", "            this.pathLength = Integer.MAX_VALUE;\n", "        } else {\n", "            this.pathLength = -1;\n", "        }\n", "    }\n", "\n", "    /**\n", "     * Create new {@link BasicConstraintsExtension} instance using provided {@code int} path length.\n", "     *\n", "     * @param pathLength {@code int} value, which represents acceptable path length for this certificate as a \"CA\"\n", "     */\n", "    public BasicConstraintsExtension(int pathLength) {\n", "        super(OID.X509Extensions.BASIC_CONSTRAINTS, FACTORY.createBasicConstraints(pathLength).toASN1Primitive());\n", "        this.pathLength = pathLength;\n", "    }\n", "\n", "    /**\n", "     * Check if this extension is present in the provided certificate. In case of {@link BasicConstraintsExtension},\n", "     * check if path length for this extension is less or equal to the path length, specified in the certificate.\n", "     *\n", "     * @param certificate {@link X509Certificate} in which this extension shall be present\n", "     *\n", "     * @return {@code true} if this path length is less or equal to a one from the certificate, {@code false} otherwise\n", "     */\n", "    @Override\n", "    public boolean existsInCertificate(X509Certificate certificate) {\n", "        try {\n", "            if (CertificateUtil.getExtensionValue(certificate, OID.X509Extensions.BASIC_CONSTRAINTS) == null) {\n", "                return false;\n", "            }\n", "        } catch (IOException e) {\n", "            return false;\n", "        }\n", "        if (pathLength >= 0) {\n", "            return certificate.getBasicConstraints() >= pathLength;\n", "        }\n", "        return certificate.getBasicConstraints() < 0;\n", "    }\n", "}\n"], "test_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.signatures.validation.v1.extensions;\n", "\n", "import com.itextpdf.signatures.testutils.PemFileHelper;\n", "import com.itextpdf.test.ExtendedITextTest;\n", "import com.itextpdf.test.annotations.type.BouncyCastleUnitTest;\n", "\n", "import java.io.IOException;\n", "import java.security.cert.CertificateException;\n", "import java.security.cert.X509Certificate;\n", "import org.junit.Assert;\n", "import org.junit.Test;\n", "import org.junit.experimental.categories.Category;\n", "\n", "@Category(BouncyCastleUnitTest.class)\n", "public class BasicConstraintsExtensionTest extends ExtendedITextTest {\n", "    private static final String certsSrc = \"./src/test/resources/com/itextpdf/signatures/validation/v1/extensions/BasicConstraintsExtensionTest/\";\n", "\n", "    @Test\n", "    public void basicConstraintNotSetExpectedTest() throws CertificateException, IOException {\n", "        String certName = certsSrc + \"basicConstraintsNotSetCert.pem\";\n", "        X509Certificate certificate = (X509Certificate) PemFileHelper.readFirstChain(certName)[0];\n", "\n", "        BasicConstraintsExtension extension = new BasicConstraintsExtension(-2);\n", "\n", "        Assert.assertFalse(extension.existsInCertificate(certificate));\n", "    }\n", "\n", "    @Test\n", "    public void basicConstraintNotSetNotExpectedTest() throws CertificateException, IOException {\n", "        String certName = certsSrc + \"basicConstraintsNotSetCert.pem\";\n", "        X509Certificate certificate = (X509Certificate) PemFileHelper.readFirstChain(certName)[0];\n", "\n", "        BasicConstraintsExtension extension = new BasicConstraintsExtension(10);\n", "\n", "        Assert.assertFalse(extension.existsInCertificate(certificate));\n", "    }\n", "\n", "    @Test\n", "    public void basicConstraintMaxLengthExpectedTest() throws CertificateException, IOException {\n", "        String certName = certsSrc + \"basicConstraintsMaxCert.pem\";\n", "        X509Certificate certificate = (X509Certificate) PemFileHelper.readFirstChain(certName)[0];\n", "\n", "        BasicConstraintsExtension extension = new BasicConstraintsExtension(true);\n", "\n", "        Assert.assertTrue(extension.existsInCertificate(certificate));\n", "    }\n", "\n", "    @Test\n", "    public void basicConstraintMaxLengthNotExpectedTest() throws CertificateException, IOException {\n", "        String certName = certsSrc + \"basicConstraintsMaxCert.pem\";\n", "        X509Certificate certificate = (X509Certificate) PemFileHelper.readFirstChain(certName)[0];\n", "\n", "        BasicConstraintsExtension extension = new BasicConstraintsExtension(false);\n", "\n", "        Assert.assertFalse(extension.existsInCertificate(certificate));\n", "    }\n", "\n", "    @Test\n", "    public void basicConstraintLength10Test() throws CertificateException, IOException {\n", "        String certName = certsSrc + \"basicConstraints10Cert.pem\";\n", "        X509Certificate certificate = (X509Certificate) PemFileHelper.readFirstChain(certName)[0];\n", "\n", "        BasicConstraintsExtension extension = new BasicConstraintsExtension(10);\n", "\n", "        Assert.assertTrue(extension.existsInCertificate(certificate));\n", "    }\n", "\n", "    @Test\n", "    public void basicConstraintLength5ExpectedTest() throws CertificateException, IOException {\n", "        String certName = certsSrc + \"basicConstraints5Cert.pem\";\n", "        X509Certificate certificate = (X509Certificate) PemFileHelper.readFirstChain(certName)[0];\n", "\n", "        BasicConstraintsExtension extension = new BasicConstraintsExtension(2);\n", "\n", "        Assert.assertTrue(extension.existsInCertificate(certificate));\n", "    }\n", "\n", "    @Test\n", "    public void basicConstraintLength5NotExpectedTest() throws CertificateException, IOException {\n", "        String certName = certsSrc + \"basicConstraints5Cert.pem\";\n", "        X509Certificate certificate = (X509Certificate) PemFileHelper.readFirstChain(certName)[0];\n", "\n", "        BasicConstraintsExtension extension = new BasicConstraintsExtension(10);\n", "\n", "        Assert.assertFalse(extension.existsInCertificate(certificate));\n", "    }\n", "\n", "    @Test\n", "    public void basicConstraintFalseExpectedTest() throws CertificateException, IOException {\n", "        String certName = certsSrc + \"basicConstraintsFalseCert.pem\";\n", "        X509Certificate certificate = (X509Certificate) PemFileHelper.readFirstChain(certName)[0];\n", "\n", "        BasicConstraintsExtension extension = new BasicConstraintsExtension(false);\n", "\n", "        Assert.assertTrue(extension.existsInCertificate(certificate));\n", "    }\n", "\n", "    @Test\n", "    public void basicConstraintFalseNotExpectedTest() throws CertificateException, IOException {\n", "        String certName = certsSrc + \"basicConstraintsFalseCert.pem\";\n", "        X509Certificate certificate = (X509Certificate) PemFileHelper.readFirstChain(certName)[0];\n", "\n", "        BasicConstraintsExtension extension = new BasicConstraintsExtension(10);\n", "\n", "        Assert.assertFalse(extension.existsInCertificate(certificate));\n", "    }\n", "}\n"], "method_lines_dic": {"BasicConstraintsExtension::::existsInCertificate(java.security.cert.X509Certificate)": [73, 86]}, "test_method_lines_dic": {"BasicConstraintsExtensionTest::::basicConstraintNotSetExpectedTest()": [40, 48], "BasicConstraintsExtensionTest::::basicConstraintNotSetNotExpectedTest()": [50, 58], "BasicConstraintsExtensionTest::::basicConstraintMaxLengthExpectedTest()": [60, 68], "BasicConstraintsExtensionTest::::basicConstraintMaxLengthNotExpectedTest()": [70, 78], "BasicConstraintsExtensionTest::::basicConstraintLength10Test()": [80, 88], "BasicConstraintsExtensionTest::::basicConstraintLength5ExpectedTest()": [90, 98], "BasicConstraintsExtensionTest::::basicConstraintLength5NotExpectedTest()": [100, 108], "BasicConstraintsExtensionTest::::basicConstraintFalseExpectedTest()": [110, 118], "BasicConstraintsExtensionTest::::basicConstraintFalseNotExpectedTest()": [120, 128]}, "reverse_method_lines_dic": {"73": "BasicConstraintsExtension::::existsInCertificate(java.security.cert.X509Certificate)", "74": "BasicConstraintsExtension::::existsInCertificate(java.security.cert.X509Certificate)", "75": "BasicConstraintsExtension::::existsInCertificate(java.security.cert.X509Certificate)", "76": "BasicConstraintsExtension::::existsInCertificate(java.security.cert.X509Certificate)", "77": "BasicConstraintsExtension::::existsInCertificate(java.security.cert.X509Certificate)", "78": "BasicConstraintsExtension::::existsInCertificate(java.security.cert.X509Certificate)", "79": "BasicConstraintsExtension::::existsInCertificate(java.security.cert.X509Certificate)", "80": "BasicConstraintsExtension::::existsInCertificate(java.security.cert.X509Certificate)", "81": "BasicConstraintsExtension::::existsInCertificate(java.security.cert.X509Certificate)", "82": "BasicConstraintsExtension::::existsInCertificate(java.security.cert.X509Certificate)", "83": "BasicConstraintsExtension::::existsInCertificate(java.security.cert.X509Certificate)", "84": "BasicConstraintsExtension::::existsInCertificate(java.security.cert.X509Certificate)", "85": "BasicConstraintsExtension::::existsInCertificate(java.security.cert.X509Certificate)", "86": "BasicConstraintsExtension::::existsInCertificate(java.security.cert.X509Certificate)"}, "test_reverse_method_lines_dic": {"40": "BasicConstraintsExtensionTest::::basicConstraintNotSetExpectedTest()", "41": "BasicConstraintsExtensionTest::::basicConstraintNotSetExpectedTest()", "42": "BasicConstraintsExtensionTest::::basicConstraintNotSetExpectedTest()", "43": "BasicConstraintsExtensionTest::::basicConstraintNotSetExpectedTest()", "44": "BasicConstraintsExtensionTest::::basicConstraintNotSetExpectedTest()", "45": "BasicConstraintsExtensionTest::::basicConstraintNotSetExpectedTest()", "46": "BasicConstraintsExtensionTest::::basicConstraintNotSetExpectedTest()", "47": "BasicConstraintsExtensionTest::::basicConstraintNotSetExpectedTest()", "48": "BasicConstraintsExtensionTest::::basicConstraintNotSetExpectedTest()", "50": "BasicConstraintsExtensionTest::::basicConstraintNotSetNotExpectedTest()", "51": "BasicConstraintsExtensionTest::::basicConstraintNotSetNotExpectedTest()", "52": "BasicConstraintsExtensionTest::::basicConstraintNotSetNotExpectedTest()", "53": "BasicConstraintsExtensionTest::::basicConstraintNotSetNotExpectedTest()", "54": "BasicConstraintsExtensionTest::::basicConstraintNotSetNotExpectedTest()", "55": "BasicConstraintsExtensionTest::::basicConstraintNotSetNotExpectedTest()", "56": "BasicConstraintsExtensionTest::::basicConstraintNotSetNotExpectedTest()", "57": "BasicConstraintsExtensionTest::::basicConstraintNotSetNotExpectedTest()", "58": "BasicConstraintsExtensionTest::::basicConstraintNotSetNotExpectedTest()", "60": "BasicConstraintsExtensionTest::::basicConstraintMaxLengthExpectedTest()", "61": "BasicConstraintsExtensionTest::::basicConstraintMaxLengthExpectedTest()", "62": "BasicConstraintsExtensionTest::::basicConstraintMaxLengthExpectedTest()", "63": "BasicConstraintsExtensionTest::::basicConstraintMaxLengthExpectedTest()", "64": "BasicConstraintsExtensionTest::::basicConstraintMaxLengthExpectedTest()", "65": "BasicConstraintsExtensionTest::::basicConstraintMaxLengthExpectedTest()", "66": "BasicConstraintsExtensionTest::::basicConstraintMaxLengthExpectedTest()", "67": "BasicConstraintsExtensionTest::::basicConstraintMaxLengthExpectedTest()", "68": "BasicConstraintsExtensionTest::::basicConstraintMaxLengthExpectedTest()", "70": "BasicConstraintsExtensionTest::::basicConstraintMaxLengthNotExpectedTest()", "71": "BasicConstraintsExtensionTest::::basicConstraintMaxLengthNotExpectedTest()", "72": "BasicConstraintsExtensionTest::::basicConstraintMaxLengthNotExpectedTest()", "73": "BasicConstraintsExtensionTest::::basicConstraintMaxLengthNotExpectedTest()", "74": "BasicConstraintsExtensionTest::::basicConstraintMaxLengthNotExpectedTest()", "75": "BasicConstraintsExtensionTest::::basicConstraintMaxLengthNotExpectedTest()", "76": "BasicConstraintsExtensionTest::::basicConstraintMaxLengthNotExpectedTest()", "77": "BasicConstraintsExtensionTest::::basicConstraintMaxLengthNotExpectedTest()", "78": "BasicConstraintsExtensionTest::::basicConstraintMaxLengthNotExpectedTest()", "80": "BasicConstraintsExtensionTest::::basicConstraintLength10Test()", "81": "BasicConstraintsExtensionTest::::basicConstraintLength10Test()", "82": "BasicConstraintsExtensionTest::::basicConstraintLength10Test()", "83": "BasicConstraintsExtensionTest::::basicConstraintLength10Test()", "84": "BasicConstraintsExtensionTest::::basicConstraintLength10Test()", "85": "BasicConstraintsExtensionTest::::basicConstraintLength10Test()", "86": "BasicConstraintsExtensionTest::::basicConstraintLength10Test()", "87": "BasicConstraintsExtensionTest::::basicConstraintLength10Test()", "88": "BasicConstraintsExtensionTest::::basicConstraintLength10Test()", "90": "BasicConstraintsExtensionTest::::basicConstraintLength5ExpectedTest()", "91": "BasicConstraintsExtensionTest::::basicConstraintLength5ExpectedTest()", "92": "BasicConstraintsExtensionTest::::basicConstraintLength5ExpectedTest()", "93": "BasicConstraintsExtensionTest::::basicConstraintLength5ExpectedTest()", "94": "BasicConstraintsExtensionTest::::basicConstraintLength5ExpectedTest()", "95": "BasicConstraintsExtensionTest::::basicConstraintLength5ExpectedTest()", "96": "BasicConstraintsExtensionTest::::basicConstraintLength5ExpectedTest()", "97": "BasicConstraintsExtensionTest::::basicConstraintLength5ExpectedTest()", "98": "BasicConstraintsExtensionTest::::basicConstraintLength5ExpectedTest()", "100": "BasicConstraintsExtensionTest::::basicConstraintLength5NotExpectedTest()", "101": "BasicConstraintsExtensionTest::::basicConstraintLength5NotExpectedTest()", "102": "BasicConstraintsExtensionTest::::basicConstraintLength5NotExpectedTest()", "103": "BasicConstraintsExtensionTest::::basicConstraintLength5NotExpectedTest()", "104": "BasicConstraintsExtensionTest::::basicConstraintLength5NotExpectedTest()", "105": "BasicConstraintsExtensionTest::::basicConstraintLength5NotExpectedTest()", "106": "BasicConstraintsExtensionTest::::basicConstraintLength5NotExpectedTest()", "107": "BasicConstraintsExtensionTest::::basicConstraintLength5NotExpectedTest()", "108": "BasicConstraintsExtensionTest::::basicConstraintLength5NotExpectedTest()", "110": "BasicConstraintsExtensionTest::::basicConstraintFalseExpectedTest()", "111": "BasicConstraintsExtensionTest::::basicConstraintFalseExpectedTest()", "112": "BasicConstraintsExtensionTest::::basicConstraintFalseExpectedTest()", "113": "BasicConstraintsExtensionTest::::basicConstraintFalseExpectedTest()", "114": "BasicConstraintsExtensionTest::::basicConstraintFalseExpectedTest()", "115": "BasicConstraintsExtensionTest::::basicConstraintFalseExpectedTest()", "116": "BasicConstraintsExtensionTest::::basicConstraintFalseExpectedTest()", "117": "BasicConstraintsExtensionTest::::basicConstraintFalseExpectedTest()", "118": "BasicConstraintsExtensionTest::::basicConstraintFalseExpectedTest()", "120": "BasicConstraintsExtensionTest::::basicConstraintFalseNotExpectedTest()", "121": "BasicConstraintsExtensionTest::::basicConstraintFalseNotExpectedTest()", "122": "BasicConstraintsExtensionTest::::basicConstraintFalseNotExpectedTest()", "123": "BasicConstraintsExtensionTest::::basicConstraintFalseNotExpectedTest()", "124": "BasicConstraintsExtensionTest::::basicConstraintFalseNotExpectedTest()", "125": "BasicConstraintsExtensionTest::::basicConstraintFalseNotExpectedTest()", "126": "BasicConstraintsExtensionTest::::basicConstraintFalseNotExpectedTest()", "127": "BasicConstraintsExtensionTest::::basicConstraintFalseNotExpectedTest()", "128": "BasicConstraintsExtensionTest::::basicConstraintFalseNotExpectedTest()"}, "tests": [{"test_lines": [40, 48], "covered_lines": [37, 61, 62, 63, 76, 77]}, {"test_lines": [50, 58], "covered_lines": [37, 61, 62, 63, 76, 77]}, {"test_lines": [60, 68], "covered_lines": [37, 47, 48, 49, 53, 76, 81, 82, 83]}, {"test_lines": [70, 78], "covered_lines": [37, 47, 48, 51, 53, 76, 81, 82, 85]}, {"test_lines": [80, 88], "covered_lines": [37, 61, 62, 63, 76, 81, 82, 83]}, {"test_lines": [90, 98], "covered_lines": [37, 61, 62, 63, 76, 81, 82, 83]}, {"test_lines": [100, 108], "covered_lines": [37, 61, 62, 63, 76, 81, 82, 83]}, {"test_lines": [110, 118], "covered_lines": [37, 47, 48, 51, 53, 76, 81, 82, 85]}, {"test_lines": [120, 128], "covered_lines": [37, 61, 62, 63, 76, 81, 82, 83]}]}, "/bernard/dataset_construction/prep/repos/itext-java/sign/src/main/java/com/itextpdf/signatures/validation/v1/extensions/CertificateExtension.java": {"class_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.signatures.validation.v1.extensions;\n", "\n", "import com.itextpdf.commons.bouncycastle.asn1.IASN1Primitive;\n", "import com.itextpdf.signatures.CertificateUtil;\n", "\n", "import java.io.IOException;\n", "import java.security.cert.X509Certificate;\n", "import java.util.Objects;\n", "\n", "/**\n", " * Class representing certificate extension with all the information required for validation.\n", " */\n", "public class CertificateExtension {\n", "\n", "    private final String extensionOid;\n", "    private final IASN1Primitive extensionValue;\n", "\n", "    /**\n", "     * Create new instance of {@link CertificateExtension} using provided extension OID and value.\n", "     *\n", "     * @param extensionOid {@link String}, which represents extension OID\n", "     * @param extensionValue {@link IASN1Primitive}, which represents extension value\n", "     */\n", "    public CertificateExtension(String extensionOid, IASN1Primitive extensionValue) {\n", "        this.extensionOid = extensionOid;\n", "        this.extensionValue = extensionValue;\n", "    }\n", "\n", "    /**\n", "     * Get extension value\n", "     *\n", "     * @return {@link IASN1Primitive}, which represents extension value\n", "     */\n", "    public IASN1Primitive getExtensionValue() {\n", "        return extensionValue;\n", "    }\n", "\n", "    /**\n", "     * Get extension OID\n", "     *\n", "     * @return {@link String}, which represents extension OID\n", "     */\n", "    public String getExtensionOid() {\n", "        return extensionOid;\n", "    }\n", "\n", "    /**\n", "     * Check if this extension is present in the provided certificate.\n", "     * <p>\n", "     * This method doesn't always require complete extension value equality,\n", "     * instead whenever possible it checks that this extension is present in the certificate.\n", "     *\n", "     * @param certificate {@link X509Certificate} in which this extension shall be present\n", "     *\n", "     * @return {@code true} if extension if present, {@code false} otherwise\n", "     */\n", "    public boolean existsInCertificate(X509Certificate certificate) {\n", "        IASN1Primitive providedExtensionValue;\n", "        try {\n", "            providedExtensionValue = CertificateUtil.getExtensionValue(certificate, extensionOid);\n", "        } catch (IOException e) {\n", "            return false;\n", "        }\n", "        return Objects.equals(providedExtensionValue, extensionValue);\n", "    }\n", "\n", "    @Override\n", "    public boolean equals(Object o) {\n", "        if (this == o) return true;\n", "        if (o == null || getClass() != o.getClass()) return false;\n", "        CertificateExtension that = (CertificateExtension) o;\n", "        return Objects.equals(extensionOid, that.extensionOid) && Objects.equals(extensionValue, that.extensionValue);\n", "    }\n", "\n", "    @Override\n", "    public int hashCode() {\n", "        return Objects.hash((Object)extensionOid, extensionValue);\n", "    }\n", "}\n"], "test_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.signatures.validation.v1.extensions;\n", "\n", "import com.itextpdf.bouncycastleconnector.BouncyCastleFactoryCreator;\n", "import com.itextpdf.commons.bouncycastle.IBouncyCastleFactory;\n", "import com.itextpdf.signatures.OID;\n", "import com.itextpdf.signatures.OID.X509Extensions;\n", "import com.itextpdf.signatures.testutils.PemFileHelper;\n", "import com.itextpdf.test.ExtendedITextTest;\n", "import com.itextpdf.test.annotations.type.BouncyCastleUnitTest;\n", "\n", "import java.io.IOException;\n", "import java.security.cert.CertificateException;\n", "import java.security.cert.X509Certificate;\n", "import org.junit.Assert;\n", "import org.junit.Test;\n", "import org.junit.experimental.categories.Category;\n", "\n", "@Category(BouncyCastleUnitTest.class)\n", "public class CertificateExtensionTest extends ExtendedITextTest {\n", "    private static final String certsSrc = \"./src/test/resources/com/itextpdf/signatures/validation/v1/extensions/CertificateExtensionTest/\";\n", "\n", "    private static final IBouncyCastleFactory FACTORY = BouncyCastleFactoryCreator.getFactory();\n", "\n", "    @Test\n", "    public void keyUsageNotSetExpectedTest() throws CertificateException, IOException {\n", "        String certName = certsSrc + \"keyUsageNotSetCert.pem\";\n", "        X509Certificate certificate = (X509Certificate) PemFileHelper.readFirstChain(certName)[0];\n", "\n", "        CertificateExtension extension = new CertificateExtension(\n", "                OID.X509Extensions.KEY_USAGE, null);\n", "\n", "        Assert.assertTrue(extension.existsInCertificate(certificate));\n", "    }\n", "\n", "    @Test\n", "    public void keyUsageNotSetNotExpectedTest() throws CertificateException, IOException {\n", "        String certName = certsSrc + \"keyUsageNotSetCert.pem\";\n", "        X509Certificate certificate = (X509Certificate) PemFileHelper.readFirstChain(certName)[0];\n", "\n", "        CertificateExtension extension = new CertificateExtension(\n", "                OID.X509Extensions.KEY_USAGE, FACTORY.createKeyUsage(98).toASN1Primitive());\n", "\n", "        Assert.assertFalse(extension.existsInCertificate(certificate));\n", "    }\n", "\n", "    @Test\n", "    public void keyUsageWrongOIDTest() throws CertificateException, IOException {\n", "        String certName = certsSrc + \"keyUsageSeveralKeys1Cert.pem\";\n", "        X509Certificate certificate = (X509Certificate) PemFileHelper.readFirstChain(certName)[0];\n", "\n", "        CertificateExtension extension = new CertificateExtension(\n", "                X509Extensions.BASIC_CONSTRAINTS, FACTORY.createKeyUsage(98).toASN1Primitive());\n", "\n", "        Assert.assertFalse(extension.existsInCertificate(certificate));\n", "    }\n", "\n", "    @Test\n", "    public void keyUsageExpectedValueTest() throws CertificateException, IOException {\n", "        String certName = certsSrc + \"keyUsageSeveralKeys1Cert.pem\";\n", "        X509Certificate certificate = (X509Certificate) PemFileHelper.readFirstChain(certName)[0];\n", "\n", "        CertificateExtension extension = new CertificateExtension(\n", "                OID.X509Extensions.KEY_USAGE, FACTORY.createKeyUsage(98).toASN1Primitive());\n", "\n", "        Assert.assertTrue(extension.existsInCertificate(certificate));\n", "    }\n", "\n", "    @Test\n", "    public void keyUsagePartiallyExpectedTest() throws CertificateException, IOException {\n", "        String certName = certsSrc + \"keyUsageSeveralKeys1Cert.pem\";\n", "        X509Certificate certificate = (X509Certificate) PemFileHelper.readFirstChain(certName)[0];\n", "\n", "        CertificateExtension extension = new CertificateExtension(\n", "                OID.X509Extensions.KEY_USAGE, FACTORY.createKeyUsage(66).toASN1Primitive());\n", "\n", "        // CertificateExtension#existsInCertificate only returns true in case of complete match, therefore false.\n", "        Assert.assertFalse(extension.existsInCertificate(certificate));\n", "    }\n", "\n", "    @Test\n", "    public void keyUsagePartiallyNotExpectedTest() throws CertificateException, IOException {\n", "        String certName = certsSrc + \"keyUsageSeveralKeys1Cert.pem\";\n", "        X509Certificate certificate = (X509Certificate) PemFileHelper.readFirstChain(certName)[0];\n", "\n", "        CertificateExtension extension = new CertificateExtension(\n", "                OID.X509Extensions.KEY_USAGE, FACTORY.createKeyUsage(32802).toASN1Primitive());\n", "\n", "        Assert.assertFalse(extension.existsInCertificate(certificate));\n", "    }\n", "\n", "    @Test\n", "    public void equalsTest() {\n", "        CertificateExtension extension1 = new CertificateExtension(\n", "                OID.X509Extensions.KEY_USAGE, FACTORY.createKeyUsage(32802).toASN1Primitive());\n", "\n", "        CertificateExtension extension2 = new CertificateExtension(\n", "                OID.X509Extensions.KEY_USAGE, FACTORY.createKeyUsage(32802).toASN1Primitive());\n", "\n", "        Assert.assertEquals(extension1, extension2);\n", "    }\n", "\n", "    @Test\n", "    public void equalsOtherTypeTest() {\n", "        CertificateExtension extension1 = new CertificateExtension(\n", "                OID.X509Extensions.KEY_USAGE, FACTORY.createKeyUsage(32802).toASN1Primitive());\n", "\n", "        Assert.assertNotEquals(\"extension1\", extension1);\n", "    }\n", "\n", "    @Test\n", "    public void equalsOtherExtensionTest() {\n", "        CertificateExtension extension1 = new CertificateExtension(\n", "                OID.X509Extensions.KEY_USAGE, FACTORY.createKeyUsage(32802).toASN1Primitive());\n", "\n", "        CertificateExtension extension2 = new CertificateExtension(\n", "                X509Extensions.EXTENDED_KEY_USAGE, FACTORY.createKeyUsage(32802).toASN1Primitive());\n", "\n", "        Assert.assertNotEquals(extension1, extension2);\n", "    }\n", "\n", "    @Test\n", "    public void equalsOtherValueTest() {\n", "        CertificateExtension extension1 = new CertificateExtension(\n", "                OID.X509Extensions.KEY_USAGE, FACTORY.createKeyUsage(32802).toASN1Primitive());\n", "\n", "        CertificateExtension extension2 = new CertificateExtension(\n", "                OID.X509Extensions.KEY_USAGE, FACTORY.createKeyUsage(32800).toASN1Primitive());\n", "\n", "        Assert.assertNotEquals(extension1, extension2);\n", "    }\n", "\n", "    @Test\n", "    public void sameHashCode() {\n", "        CertificateExtension extension1 = new CertificateExtension(\n", "                OID.X509Extensions.KEY_USAGE, FACTORY.createKeyUsage(32802).toASN1Primitive());\n", "\n", "        CertificateExtension extension2 = new CertificateExtension(\n", "                OID.X509Extensions.KEY_USAGE, FACTORY.createKeyUsage(32802).toASN1Primitive());\n", "\n", "        Assert.assertEquals(extension1.hashCode(), extension2.hashCode());\n", "    }\n", "\n", "    @Test\n", "    public void hashOtherValueTest() {\n", "        CertificateExtension extension1 = new CertificateExtension(\n", "                OID.X509Extensions.KEY_USAGE, FACTORY.createKeyUsage(32802).toASN1Primitive());\n", "\n", "        CertificateExtension extension2 = new CertificateExtension(\n", "                OID.X509Extensions.KEY_USAGE, FACTORY.createKeyUsage(32800).toASN1Primitive());\n", "\n", "        Assert.assertNotEquals(extension1.hashCode(), extension2.hashCode());\n", "    }\n", "\n", "    @Test\n", "    public void hashOtherExtensionTest() {\n", "        CertificateExtension extension1 = new CertificateExtension(\n", "                OID.X509Extensions.KEY_USAGE, FACTORY.createKeyUsage(32802).toASN1Primitive());\n", "\n", "        CertificateExtension extension2 = new CertificateExtension(\n", "                X509Extensions.EXTENDED_KEY_USAGE, FACTORY.createKeyUsage(32802).toASN1Primitive());\n", "\n", "        Assert.assertNotEquals(extension1.hashCode(), extension2.hashCode());\n", "    }\n", "\n", "\n", "    @Test\n", "    public void getExtensionValueTest() {\n", "        CertificateExtension extension = new CertificateExtension(\n", "                OID.X509Extensions.KEY_USAGE, FACTORY.createKeyUsage(32802).toASN1Primitive());\n", "        Assert.assertEquals(FACTORY.createKeyUsage(32802).toASN1Primitive(), extension.getExtensionValue());\n", "    }\n", "\n", "    @Test\n", "    public void getExtensionOidTest() {\n", "        CertificateExtension extension = new CertificateExtension(\n", "                OID.X509Extensions.KEY_USAGE, FACTORY.createKeyUsage(32802).toASN1Primitive());\n", "        Assert.assertEquals(OID.X509Extensions.KEY_USAGE, extension.getExtensionOid());\n", "    }\n", "\n", "}\n"], "method_lines_dic": {"CertificateExtension::::getExtensionValue()": [56, 58], "CertificateExtension::::getExtensionOid()": [65, 67], "CertificateExtension::::existsInCertificate(java.security.cert.X509Certificate)": [79, 87], "CertificateExtension::::equals(java.lang.Object)": [89, 95], "CertificateExtension::::hashCode()": [97, 100]}, "test_method_lines_dic": {"CertificateExtensionTest::::keyUsageNotSetExpectedTest()": [46, 55], "CertificateExtensionTest::::keyUsageNotSetNotExpectedTest()": [57, 66], "CertificateExtensionTest::::keyUsageWrongOIDTest()": [68, 77], "CertificateExtensionTest::::keyUsageExpectedValueTest()": [79, 88], "CertificateExtensionTest::::keyUsagePartiallyExpectedTest()": [90, 100], "CertificateExtensionTest::::keyUsagePartiallyNotExpectedTest()": [102, 111], "CertificateExtensionTest::::equalsTest()": [113, 122], "CertificateExtensionTest::::equalsOtherTypeTest()": [124, 130], "CertificateExtensionTest::::equalsOtherExtensionTest()": [132, 141], "CertificateExtensionTest::::equalsOtherValueTest()": [143, 152], "CertificateExtensionTest::::sameHashCode()": [154, 163], "CertificateExtensionTest::::hashOtherValueTest()": [165, 174], "CertificateExtensionTest::::hashOtherExtensionTest()": [176, 185], "CertificateExtensionTest::::getExtensionValueTest()": [188, 193], "CertificateExtensionTest::::getExtensionOidTest()": [195, 200]}, "reverse_method_lines_dic": {"56": "CertificateExtension::::getExtensionValue()", "57": "CertificateExtension::::getExtensionValue()", "58": "CertificateExtension::::getExtensionValue()", "65": "CertificateExtension::::getExtensionOid()", "66": "CertificateExtension::::getExtensionOid()", "67": "CertificateExtension::::getExtensionOid()", "79": "CertificateExtension::::existsInCertificate(java.security.cert.X509Certificate)", "80": "CertificateExtension::::existsInCertificate(java.security.cert.X509Certificate)", "81": "CertificateExtension::::existsInCertificate(java.security.cert.X509Certificate)", "82": "CertificateExtension::::existsInCertificate(java.security.cert.X509Certificate)", "83": "CertificateExtension::::existsInCertificate(java.security.cert.X509Certificate)", "84": "CertificateExtension::::existsInCertificate(java.security.cert.X509Certificate)", "85": "CertificateExtension::::existsInCertificate(java.security.cert.X509Certificate)", "86": "CertificateExtension::::existsInCertificate(java.security.cert.X509Certificate)", "87": "CertificateExtension::::existsInCertificate(java.security.cert.X509Certificate)", "89": "CertificateExtension::::equals(java.lang.Object)", "90": "CertificateExtension::::equals(java.lang.Object)", "91": "CertificateExtension::::equals(java.lang.Object)", "92": "CertificateExtension::::equals(java.lang.Object)", "93": "CertificateExtension::::equals(java.lang.Object)", "94": "CertificateExtension::::equals(java.lang.Object)", "95": "CertificateExtension::::equals(java.lang.Object)", "97": "CertificateExtension::::hashCode()", "98": "CertificateExtension::::hashCode()", "99": "CertificateExtension::::hashCode()", "100": "CertificateExtension::::hashCode()"}, "test_reverse_method_lines_dic": {"46": "CertificateExtensionTest::::keyUsageNotSetExpectedTest()", "47": "CertificateExtensionTest::::keyUsageNotSetExpectedTest()", "48": "CertificateExtensionTest::::keyUsageNotSetExpectedTest()", "49": "CertificateExtensionTest::::keyUsageNotSetExpectedTest()", "50": "CertificateExtensionTest::::keyUsageNotSetExpectedTest()", "51": "CertificateExtensionTest::::keyUsageNotSetExpectedTest()", "52": "CertificateExtensionTest::::keyUsageNotSetExpectedTest()", "53": "CertificateExtensionTest::::keyUsageNotSetExpectedTest()", "54": "CertificateExtensionTest::::keyUsageNotSetExpectedTest()", "55": "CertificateExtensionTest::::keyUsageNotSetExpectedTest()", "57": "CertificateExtensionTest::::keyUsageNotSetNotExpectedTest()", "58": "CertificateExtensionTest::::keyUsageNotSetNotExpectedTest()", "59": "CertificateExtensionTest::::keyUsageNotSetNotExpectedTest()", "60": "CertificateExtensionTest::::keyUsageNotSetNotExpectedTest()", "61": "CertificateExtensionTest::::keyUsageNotSetNotExpectedTest()", "62": "CertificateExtensionTest::::keyUsageNotSetNotExpectedTest()", "63": "CertificateExtensionTest::::keyUsageNotSetNotExpectedTest()", "64": "CertificateExtensionTest::::keyUsageNotSetNotExpectedTest()", "65": "CertificateExtensionTest::::keyUsageNotSetNotExpectedTest()", "66": "CertificateExtensionTest::::keyUsageNotSetNotExpectedTest()", "68": "CertificateExtensionTest::::keyUsageWrongOIDTest()", "69": "CertificateExtensionTest::::keyUsageWrongOIDTest()", "70": "CertificateExtensionTest::::keyUsageWrongOIDTest()", "71": "CertificateExtensionTest::::keyUsageWrongOIDTest()", "72": "CertificateExtensionTest::::keyUsageWrongOIDTest()", "73": "CertificateExtensionTest::::keyUsageWrongOIDTest()", "74": "CertificateExtensionTest::::keyUsageWrongOIDTest()", "75": "CertificateExtensionTest::::keyUsageWrongOIDTest()", "76": "CertificateExtensionTest::::keyUsageWrongOIDTest()", "77": "CertificateExtensionTest::::keyUsageWrongOIDTest()", "79": "CertificateExtensionTest::::keyUsageExpectedValueTest()", "80": "CertificateExtensionTest::::keyUsageExpectedValueTest()", "81": "CertificateExtensionTest::::keyUsageExpectedValueTest()", "82": "CertificateExtensionTest::::keyUsageExpectedValueTest()", "83": "CertificateExtensionTest::::keyUsageExpectedValueTest()", "84": "CertificateExtensionTest::::keyUsageExpectedValueTest()", "85": "CertificateExtensionTest::::keyUsageExpectedValueTest()", "86": "CertificateExtensionTest::::keyUsageExpectedValueTest()", "87": "CertificateExtensionTest::::keyUsageExpectedValueTest()", "88": "CertificateExtensionTest::::keyUsageExpectedValueTest()", "90": "CertificateExtensionTest::::keyUsagePartiallyExpectedTest()", "91": "CertificateExtensionTest::::keyUsagePartiallyExpectedTest()", "92": "CertificateExtensionTest::::keyUsagePartiallyExpectedTest()", "93": "CertificateExtensionTest::::keyUsagePartiallyExpectedTest()", "94": "CertificateExtensionTest::::keyUsagePartiallyExpectedTest()", "95": "CertificateExtensionTest::::keyUsagePartiallyExpectedTest()", "96": "CertificateExtensionTest::::keyUsagePartiallyExpectedTest()", "97": "CertificateExtensionTest::::keyUsagePartiallyExpectedTest()", "98": "CertificateExtensionTest::::keyUsagePartiallyExpectedTest()", "99": "CertificateExtensionTest::::keyUsagePartiallyExpectedTest()", "100": "CertificateExtensionTest::::keyUsagePartiallyExpectedTest()", "102": "CertificateExtensionTest::::keyUsagePartiallyNotExpectedTest()", "103": "CertificateExtensionTest::::keyUsagePartiallyNotExpectedTest()", "104": "CertificateExtensionTest::::keyUsagePartiallyNotExpectedTest()", "105": "CertificateExtensionTest::::keyUsagePartiallyNotExpectedTest()", "106": "CertificateExtensionTest::::keyUsagePartiallyNotExpectedTest()", "107": "CertificateExtensionTest::::keyUsagePartiallyNotExpectedTest()", "108": "CertificateExtensionTest::::keyUsagePartiallyNotExpectedTest()", "109": "CertificateExtensionTest::::keyUsagePartiallyNotExpectedTest()", "110": "CertificateExtensionTest::::keyUsagePartiallyNotExpectedTest()", "111": "CertificateExtensionTest::::keyUsagePartiallyNotExpectedTest()", "113": "CertificateExtensionTest::::equalsTest()", "114": "CertificateExtensionTest::::equalsTest()", "115": "CertificateExtensionTest::::equalsTest()", "116": "CertificateExtensionTest::::equalsTest()", "117": "CertificateExtensionTest::::equalsTest()", "118": "CertificateExtensionTest::::equalsTest()", "119": "CertificateExtensionTest::::equalsTest()", "120": "CertificateExtensionTest::::equalsTest()", "121": "CertificateExtensionTest::::equalsTest()", "122": "CertificateExtensionTest::::equalsTest()", "124": "CertificateExtensionTest::::equalsOtherTypeTest()", "125": "CertificateExtensionTest::::equalsOtherTypeTest()", "126": "CertificateExtensionTest::::equalsOtherTypeTest()", "127": "CertificateExtensionTest::::equalsOtherTypeTest()", "128": "CertificateExtensionTest::::equalsOtherTypeTest()", "129": "CertificateExtensionTest::::equalsOtherTypeTest()", "130": "CertificateExtensionTest::::equalsOtherTypeTest()", "132": "CertificateExtensionTest::::equalsOtherExtensionTest()", "133": "CertificateExtensionTest::::equalsOtherExtensionTest()", "134": "CertificateExtensionTest::::equalsOtherExtensionTest()", "135": "CertificateExtensionTest::::equalsOtherExtensionTest()", "136": "CertificateExtensionTest::::equalsOtherExtensionTest()", "137": "CertificateExtensionTest::::equalsOtherExtensionTest()", "138": "CertificateExtensionTest::::equalsOtherExtensionTest()", "139": "CertificateExtensionTest::::equalsOtherExtensionTest()", "140": "CertificateExtensionTest::::equalsOtherExtensionTest()", "141": "CertificateExtensionTest::::equalsOtherExtensionTest()", "143": "CertificateExtensionTest::::equalsOtherValueTest()", "144": "CertificateExtensionTest::::equalsOtherValueTest()", "145": "CertificateExtensionTest::::equalsOtherValueTest()", "146": "CertificateExtensionTest::::equalsOtherValueTest()", "147": "CertificateExtensionTest::::equalsOtherValueTest()", "148": "CertificateExtensionTest::::equalsOtherValueTest()", "149": "CertificateExtensionTest::::equalsOtherValueTest()", "150": "CertificateExtensionTest::::equalsOtherValueTest()", "151": "CertificateExtensionTest::::equalsOtherValueTest()", "152": "CertificateExtensionTest::::equalsOtherValueTest()", "154": "CertificateExtensionTest::::sameHashCode()", "155": "CertificateExtensionTest::::sameHashCode()", "156": "CertificateExtensionTest::::sameHashCode()", "157": "CertificateExtensionTest::::sameHashCode()", "158": "CertificateExtensionTest::::sameHashCode()", "159": "CertificateExtensionTest::::sameHashCode()", "160": "CertificateExtensionTest::::sameHashCode()", "161": "CertificateExtensionTest::::sameHashCode()", "162": "CertificateExtensionTest::::sameHashCode()", "163": "CertificateExtensionTest::::sameHashCode()", "165": "CertificateExtensionTest::::hashOtherValueTest()", "166": "CertificateExtensionTest::::hashOtherValueTest()", "167": "CertificateExtensionTest::::hashOtherValueTest()", "168": "CertificateExtensionTest::::hashOtherValueTest()", "169": "CertificateExtensionTest::::hashOtherValueTest()", "170": "CertificateExtensionTest::::hashOtherValueTest()", "171": "CertificateExtensionTest::::hashOtherValueTest()", "172": "CertificateExtensionTest::::hashOtherValueTest()", "173": "CertificateExtensionTest::::hashOtherValueTest()", "174": "CertificateExtensionTest::::hashOtherValueTest()", "176": "CertificateExtensionTest::::hashOtherExtensionTest()", "177": "CertificateExtensionTest::::hashOtherExtensionTest()", "178": "CertificateExtensionTest::::hashOtherExtensionTest()", "179": "CertificateExtensionTest::::hashOtherExtensionTest()", "180": "CertificateExtensionTest::::hashOtherExtensionTest()", "181": "CertificateExtensionTest::::hashOtherExtensionTest()", "182": "CertificateExtensionTest::::hashOtherExtensionTest()", "183": "CertificateExtensionTest::::hashOtherExtensionTest()", "184": "CertificateExtensionTest::::hashOtherExtensionTest()", "185": "CertificateExtensionTest::::hashOtherExtensionTest()", "188": "CertificateExtensionTest::::getExtensionValueTest()", "189": "CertificateExtensionTest::::getExtensionValueTest()", "190": "CertificateExtensionTest::::getExtensionValueTest()", "191": "CertificateExtensionTest::::getExtensionValueTest()", "192": "CertificateExtensionTest::::getExtensionValueTest()", "193": "CertificateExtensionTest::::getExtensionValueTest()", "195": "CertificateExtensionTest::::getExtensionOidTest()", "196": "CertificateExtensionTest::::getExtensionOidTest()", "197": "CertificateExtensionTest::::getExtensionOidTest()", "198": "CertificateExtensionTest::::getExtensionOidTest()", "199": "CertificateExtensionTest::::getExtensionOidTest()", "200": "CertificateExtensionTest::::getExtensionOidTest()"}, "tests": [{"test_lines": [46, 55], "covered_lines": [46, 47, 48, 49, 82, 85, 86]}, {"test_lines": [57, 66], "covered_lines": [46, 47, 48, 49, 82, 85, 86]}, {"test_lines": [68, 77], "covered_lines": [46, 47, 48, 49, 82, 85, 86]}, {"test_lines": [79, 88], "covered_lines": [46, 47, 48, 49, 82, 85, 86]}, {"test_lines": [90, 100], "covered_lines": [46, 47, 48, 49, 82, 85, 86]}, {"test_lines": [102, 111], "covered_lines": [46, 47, 48, 49, 82, 85, 86]}, {"test_lines": [113, 122], "covered_lines": [46, 47, 48, 49, 91, 92, 93, 94]}, {"test_lines": [124, 130], "covered_lines": [46, 47, 48, 49]}, {"test_lines": [132, 141], "covered_lines": [46, 47, 48, 49, 91, 92, 93, 94]}, {"test_lines": [143, 152], "covered_lines": [46, 47, 48, 49, 91, 92, 93, 94]}, {"test_lines": [154, 163], "covered_lines": [46, 47, 48, 49, 99]}, {"test_lines": [165, 174], "covered_lines": [46, 47, 48, 49, 99]}, {"test_lines": [176, 185], "covered_lines": [46, 47, 48, 49, 99]}, {"test_lines": [188, 193], "covered_lines": [46, 47, 48, 49, 57]}, {"test_lines": [195, 200], "covered_lines": [46, 47, 48, 49, 66]}]}, "/bernard/dataset_construction/prep/repos/itext-java/sign/src/main/java/com/itextpdf/signatures/validation/v1/extensions/ExtendedKeyUsageExtension.java": {"class_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.signatures.validation.v1.extensions;\n", "\n", "import com.itextpdf.bouncycastleconnector.BouncyCastleFactoryCreator;\n", "import com.itextpdf.commons.bouncycastle.IBouncyCastleFactory;\n", "import com.itextpdf.commons.bouncycastle.asn1.x509.IKeyPurposeId;\n", "import com.itextpdf.signatures.OID;\n", "\n", "import java.security.cert.CertificateParsingException;\n", "import java.security.cert.X509Certificate;\n", "import java.util.HashSet;\n", "import java.util.List;\n", "\n", "/**\n", " * Class representing \"Extended Key Usage\" extension.\n", " */\n", "public class ExtendedKeyUsageExtension extends CertificateExtension {\n", "    public static final String ANY_EXTENDED_KEY_USAGE_OID = \"2.5.29.37.0\";\n", "    public static final String TIME_STAMPING = \"1.3.6.1.5.5.7.3.8\";\n", "    public static final String OCSP_SIGNING = \"1.3.6.1.5.5.7.3.9\";\n", "    public static final String CODE_SIGNING = \"1.3.6.1.5.5.7.3.3\";\n", "    public static final String CLIENT_AUTH = \"1.3.6.1.5.5.7.3.2\";\n", "\n", "    private static final IBouncyCastleFactory FACTORY = BouncyCastleFactoryCreator.getFactory();\n", "\n", "    private final List<String> extendedKeyUsageOids;\n", "\n", "    /**\n", "     * Create new {@link ExtendedKeyUsageExtension} instance.\n", "     *\n", "     * @param extendedKeyUsageOids strings {@link List}, representing extended key usages OIDs\n", "     */\n", "    public ExtendedKeyUsageExtension(List<String> extendedKeyUsageOids) {\n", "        super(OID.X509Extensions.EXTENDED_KEY_USAGE, FACTORY.createExtendedKeyUsage(\n", "                createKeyPurposeIds(extendedKeyUsageOids)).toASN1Primitive());\n", "        this.extendedKeyUsageOids = extendedKeyUsageOids;\n", "    }\n", "\n", "    /**\n", "     * Check if this extension is present in the provided certificate. In case of {@link ExtendedKeyUsageExtension},\n", "     * check if this extended key usage OIDs are present. Other values may be present as well.\n", "     *\n", "     * @param certificate {@link X509Certificate} in which this extension shall be present\n", "     *\n", "     * @return {@code true} if all OIDs are present in certificate extension, {@code false} otherwise\n", "     */\n", "    @Override\n", "    public boolean existsInCertificate(X509Certificate certificate) {\n", "        List<String> providedExtendedKeyUsage;\n", "        try {\n", "            providedExtendedKeyUsage = (List<String>)certificate.getExtendedKeyUsage();\n", "        } catch (CertificateParsingException e) {\n", "            return false;\n", "        }\n", "        if (providedExtendedKeyUsage == null) {\n", "            return false;\n", "        }\n", "        return providedExtendedKeyUsage.contains(ANY_EXTENDED_KEY_USAGE_OID) ||\n", "                new HashSet<>(providedExtendedKeyUsage).containsAll(extendedKeyUsageOids);\n", "    }\n", "\n", "    private static IKeyPurposeId[] createKeyPurposeIds(List<String> extendedKeyUsageOids) {\n", "        IKeyPurposeId[] keyPurposeIds = new IKeyPurposeId[extendedKeyUsageOids.size()];\n", "        for (int i = 0; i < extendedKeyUsageOids.size(); ++i) {\n", "            keyPurposeIds[i] =\n", "                    FACTORY.createKeyPurposeId(FACTORY.createASN1ObjectIdentifier(extendedKeyUsageOids.get(i)));\n", "        }\n", "        return keyPurposeIds;\n", "    }\n", "}\n"], "test_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.signatures.validation.v1.extensions;\n", "\n", "import com.itextpdf.signatures.testutils.PemFileHelper;\n", "import com.itextpdf.test.ExtendedITextTest;\n", "import com.itextpdf.test.annotations.type.BouncyCastleUnitTest;\n", "\n", "import java.io.IOException;\n", "import java.security.cert.CertificateException;\n", "import java.security.cert.X509Certificate;\n", "import java.util.Arrays;\n", "import java.util.Collections;\n", "import org.junit.Assert;\n", "import org.junit.Test;\n", "import org.junit.experimental.categories.Category;\n", "\n", "@Category(BouncyCastleUnitTest.class)\n", "public class ExtendedKeyUsageExtensionTest extends ExtendedITextTest {\n", "    private static final String certsSrc = \"./src/test/resources/com/itextpdf/signatures/validation/v1/extensions/ExtendedKeyUsageExtensionTest/\";\n", "\n", "    @Test\n", "    public void extendedKeyUsageNotSetExpectedTest() throws CertificateException, IOException {\n", "        String certName = certsSrc + \"extendedKeyUsageNoSetCert.pem\";\n", "        X509Certificate certificate = (X509Certificate) PemFileHelper.readFirstChain(certName)[0];\n", "\n", "        ExtendedKeyUsageExtension extension = new ExtendedKeyUsageExtension(Collections.<String>emptyList());\n", "\n", "        Assert.assertFalse(extension.existsInCertificate(certificate));\n", "    }\n", "\n", "    @Test\n", "    public void extendedKeyUsageNotSetNotExpectedTest() throws CertificateException, IOException {\n", "        String certName = certsSrc + \"extendedKeyUsageNoSetCert.pem\";\n", "        X509Certificate certificate = (X509Certificate) PemFileHelper.readFirstChain(certName)[0];\n", "\n", "        ExtendedKeyUsageExtension extension = new ExtendedKeyUsageExtension(\n", "                Collections.singletonList(ExtendedKeyUsageExtension.TIME_STAMPING));\n", "\n", "        Assert.assertFalse(extension.existsInCertificate(certificate));\n", "    }\n", "\n", "    @Test\n", "    public void extendedKeyUsageTimestampingExpectedTest() throws CertificateException, IOException {\n", "        String certName = certsSrc + \"extendedKeyUsageTimeStampingCert.pem\";\n", "        X509Certificate certificate = (X509Certificate) PemFileHelper.readFirstChain(certName)[0];\n", "\n", "        ExtendedKeyUsageExtension extension = new ExtendedKeyUsageExtension(\n", "                Collections.singletonList(ExtendedKeyUsageExtension.TIME_STAMPING));\n", "\n", "        Assert.assertTrue(extension.existsInCertificate(certificate));\n", "    }\n", "\n", "    @Test\n", "    public void extendedKeyUsageTimestampingNotExpectedTest() throws CertificateException, IOException {\n", "        String certName = certsSrc + \"extendedKeyUsageTimeStampingCert.pem\";\n", "        X509Certificate certificate = (X509Certificate) PemFileHelper.readFirstChain(certName)[0];\n", "\n", "        ExtendedKeyUsageExtension extension = new ExtendedKeyUsageExtension(\n", "                Collections.singletonList(ExtendedKeyUsageExtension.OCSP_SIGNING));\n", "\n", "        Assert.assertFalse(extension.existsInCertificate(certificate));\n", "    }\n", "\n", "    @Test\n", "    public void extendedKeyUsageOcspSigningExpectedTest() throws CertificateException, IOException {\n", "        String certName = certsSrc + \"extendedKeyUsageOcspSigningCert.pem\";\n", "        X509Certificate certificate = (X509Certificate) PemFileHelper.readFirstChain(certName)[0];\n", "\n", "        ExtendedKeyUsageExtension extension = new ExtendedKeyUsageExtension(\n", "                Collections.singletonList(ExtendedKeyUsageExtension.OCSP_SIGNING));\n", "\n", "        Assert.assertTrue(extension.existsInCertificate(certificate));\n", "    }\n", "\n", "    @Test\n", "    public void extendedKeyUsageOcspSigningNotExpectedTest() throws CertificateException, IOException {\n", "        String certName = certsSrc + \"extendedKeyUsageOcspSigningCert.pem\";\n", "        X509Certificate certificate = (X509Certificate) PemFileHelper.readFirstChain(certName)[0];\n", "\n", "        ExtendedKeyUsageExtension extension = new ExtendedKeyUsageExtension(\n", "                Collections.singletonList(ExtendedKeyUsageExtension.CODE_SIGNING));\n", "\n", "        Assert.assertFalse(extension.existsInCertificate(certificate));\n", "    }\n", "\n", "    @Test\n", "    public void extendedKeyUsageAnyUsageTest1() throws CertificateException, IOException {\n", "        String certName = certsSrc + \"extendedKeyUsageAnyUsageCert.pem\";\n", "        X509Certificate certificate = (X509Certificate) PemFileHelper.readFirstChain(certName)[0];\n", "\n", "        ExtendedKeyUsageExtension extension = new ExtendedKeyUsageExtension(\n", "                Collections.singletonList(ExtendedKeyUsageExtension.CODE_SIGNING));\n", "\n", "        Assert.assertTrue(extension.existsInCertificate(certificate));\n", "    }\n", "\n", "    @Test\n", "    public void extendedKeyUsageAnyUsageTest2() throws CertificateException, IOException {\n", "        String certName = certsSrc + \"extendedKeyUsageAnyUsageCert.pem\";\n", "        X509Certificate certificate = (X509Certificate) PemFileHelper.readFirstChain(certName)[0];\n", "\n", "        ExtendedKeyUsageExtension extension = new ExtendedKeyUsageExtension(\n", "                Arrays.asList(ExtendedKeyUsageExtension.CODE_SIGNING, ExtendedKeyUsageExtension.OCSP_SIGNING));\n", "\n", "        Assert.assertTrue(extension.existsInCertificate(certificate));\n", "    }\n", "\n", "    @Test\n", "    public void extendedKeyUsageSeveralValues1PartiallyExpectedTest() throws CertificateException, IOException {\n", "        String certName = certsSrc + \"extendedKeyUsageSeveralValues1Cert.pem\";\n", "        X509Certificate certificate = (X509Certificate) PemFileHelper.readFirstChain(certName)[0];\n", "\n", "        ExtendedKeyUsageExtension extension = new ExtendedKeyUsageExtension(\n", "                Arrays.asList(ExtendedKeyUsageExtension.TIME_STAMPING, ExtendedKeyUsageExtension.OCSP_SIGNING));\n", "\n", "        Assert.assertTrue(extension.existsInCertificate(certificate));\n", "    }\n", "\n", "    @Test\n", "    public void extendedKeyUsageSeveralValues1PartiallyNotExpectedTest() throws CertificateException, IOException {\n", "        String certName = certsSrc + \"extendedKeyUsageSeveralValues1Cert.pem\";\n", "        X509Certificate certificate = (X509Certificate) PemFileHelper.readFirstChain(certName)[0];\n", "\n", "        ExtendedKeyUsageExtension extension = new ExtendedKeyUsageExtension(Arrays.asList(\n", "                ExtendedKeyUsageExtension.TIME_STAMPING, ExtendedKeyUsageExtension.ANY_EXTENDED_KEY_USAGE_OID));\n", "\n", "        Assert.assertFalse(extension.existsInCertificate(certificate));\n", "    }\n", "\n", "    @Test\n", "    public void extendedKeyUsageSeveralValues2PartiallyExpectedTest() throws CertificateException, IOException {\n", "        String certName = certsSrc + \"extendedKeyUsageSeveralValues2Cert.pem\";\n", "        X509Certificate certificate = (X509Certificate) PemFileHelper.readFirstChain(certName)[0];\n", "\n", "        ExtendedKeyUsageExtension extension = new ExtendedKeyUsageExtension(\n", "                Arrays.asList(ExtendedKeyUsageExtension.OCSP_SIGNING, ExtendedKeyUsageExtension.CLIENT_AUTH));\n", "\n", "        Assert.assertTrue(extension.existsInCertificate(certificate));\n", "    }\n", "\n", "    @Test\n", "    public void extendedKeyUsageSeveralValues2PartiallyNotExpectedTest() throws CertificateException, IOException {\n", "        String certName = certsSrc + \"extendedKeyUsageSeveralValues2Cert.pem\";\n", "        X509Certificate certificate = (X509Certificate) PemFileHelper.readFirstChain(certName)[0];\n", "\n", "        ExtendedKeyUsageExtension extension = new ExtendedKeyUsageExtension(\n", "                Arrays.asList(ExtendedKeyUsageExtension.CODE_SIGNING, ExtendedKeyUsageExtension.CLIENT_AUTH));\n", "\n", "        // Certificate contains any_extended_key_usage OID, that's why results is always true.\n", "        Assert.assertTrue(extension.existsInCertificate(certificate));\n", "    }\n", "}\n"], "method_lines_dic": {"ExtendedKeyUsageExtension::::existsInCertificate(java.security.cert.X509Certificate)": [68, 81], "ExtendedKeyUsageExtension::::createKeyPurposeIds(java.util.List<java.lang.String>)": [83, 90]}, "test_method_lines_dic": {"ExtendedKeyUsageExtensionTest::::extendedKeyUsageNotSetExpectedTest()": [42, 50], "ExtendedKeyUsageExtensionTest::::extendedKeyUsageNotSetNotExpectedTest()": [52, 61], "ExtendedKeyUsageExtensionTest::::extendedKeyUsageTimestampingExpectedTest()": [63, 72], "ExtendedKeyUsageExtensionTest::::extendedKeyUsageTimestampingNotExpectedTest()": [74, 83], "ExtendedKeyUsageExtensionTest::::extendedKeyUsageOcspSigningExpectedTest()": [85, 94], "ExtendedKeyUsageExtensionTest::::extendedKeyUsageOcspSigningNotExpectedTest()": [96, 105], "ExtendedKeyUsageExtensionTest::::extendedKeyUsageAnyUsageTest1()": [107, 116], "ExtendedKeyUsageExtensionTest::::extendedKeyUsageAnyUsageTest2()": [118, 127], "ExtendedKeyUsageExtensionTest::::extendedKeyUsageSeveralValues1PartiallyExpectedTest()": [129, 138], "ExtendedKeyUsageExtensionTest::::extendedKeyUsageSeveralValues1PartiallyNotExpectedTest()": [140, 149], "ExtendedKeyUsageExtensionTest::::extendedKeyUsageSeveralValues2PartiallyExpectedTest()": [151, 160], "ExtendedKeyUsageExtensionTest::::extendedKeyUsageSeveralValues2PartiallyNotExpectedTest()": [162, 172]}, "reverse_method_lines_dic": {"68": "ExtendedKeyUsageExtension::::existsInCertificate(java.security.cert.X509Certificate)", "69": "ExtendedKeyUsageExtension::::existsInCertificate(java.security.cert.X509Certificate)", "70": "ExtendedKeyUsageExtension::::existsInCertificate(java.security.cert.X509Certificate)", "71": "ExtendedKeyUsageExtension::::existsInCertificate(java.security.cert.X509Certificate)", "72": "ExtendedKeyUsageExtension::::existsInCertificate(java.security.cert.X509Certificate)", "73": "ExtendedKeyUsageExtension::::existsInCertificate(java.security.cert.X509Certificate)", "74": "ExtendedKeyUsageExtension::::existsInCertificate(java.security.cert.X509Certificate)", "75": "ExtendedKeyUsageExtension::::existsInCertificate(java.security.cert.X509Certificate)", "76": "ExtendedKeyUsageExtension::::existsInCertificate(java.security.cert.X509Certificate)", "77": "ExtendedKeyUsageExtension::::existsInCertificate(java.security.cert.X509Certificate)", "78": "ExtendedKeyUsageExtension::::existsInCertificate(java.security.cert.X509Certificate)", "79": "ExtendedKeyUsageExtension::::existsInCertificate(java.security.cert.X509Certificate)", "80": "ExtendedKeyUsageExtension::::existsInCertificate(java.security.cert.X509Certificate)", "81": "ExtendedKeyUsageExtension::::existsInCertificate(java.security.cert.X509Certificate)", "83": "ExtendedKeyUsageExtension::::createKeyPurposeIds(java.util.List<java.lang.String>)", "84": "ExtendedKeyUsageExtension::::createKeyPurposeIds(java.util.List<java.lang.String>)", "85": "ExtendedKeyUsageExtension::::createKeyPurposeIds(java.util.List<java.lang.String>)", "86": "ExtendedKeyUsageExtension::::createKeyPurposeIds(java.util.List<java.lang.String>)", "87": "ExtendedKeyUsageExtension::::createKeyPurposeIds(java.util.List<java.lang.String>)", "88": "ExtendedKeyUsageExtension::::createKeyPurposeIds(java.util.List<java.lang.String>)", "89": "ExtendedKeyUsageExtension::::createKeyPurposeIds(java.util.List<java.lang.String>)", "90": "ExtendedKeyUsageExtension::::createKeyPurposeIds(java.util.List<java.lang.String>)"}, "test_reverse_method_lines_dic": {"42": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageNotSetExpectedTest()", "43": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageNotSetExpectedTest()", "44": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageNotSetExpectedTest()", "45": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageNotSetExpectedTest()", "46": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageNotSetExpectedTest()", "47": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageNotSetExpectedTest()", "48": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageNotSetExpectedTest()", "49": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageNotSetExpectedTest()", "50": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageNotSetExpectedTest()", "52": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageNotSetNotExpectedTest()", "53": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageNotSetNotExpectedTest()", "54": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageNotSetNotExpectedTest()", "55": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageNotSetNotExpectedTest()", "56": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageNotSetNotExpectedTest()", "57": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageNotSetNotExpectedTest()", "58": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageNotSetNotExpectedTest()", "59": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageNotSetNotExpectedTest()", "60": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageNotSetNotExpectedTest()", "61": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageNotSetNotExpectedTest()", "63": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageTimestampingExpectedTest()", "64": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageTimestampingExpectedTest()", "65": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageTimestampingExpectedTest()", "66": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageTimestampingExpectedTest()", "67": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageTimestampingExpectedTest()", "68": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageTimestampingExpectedTest()", "69": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageTimestampingExpectedTest()", "70": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageTimestampingExpectedTest()", "71": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageTimestampingExpectedTest()", "72": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageTimestampingExpectedTest()", "74": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageTimestampingNotExpectedTest()", "75": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageTimestampingNotExpectedTest()", "76": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageTimestampingNotExpectedTest()", "77": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageTimestampingNotExpectedTest()", "78": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageTimestampingNotExpectedTest()", "79": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageTimestampingNotExpectedTest()", "80": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageTimestampingNotExpectedTest()", "81": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageTimestampingNotExpectedTest()", "82": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageTimestampingNotExpectedTest()", "83": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageTimestampingNotExpectedTest()", "85": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageOcspSigningExpectedTest()", "86": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageOcspSigningExpectedTest()", "87": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageOcspSigningExpectedTest()", "88": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageOcspSigningExpectedTest()", "89": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageOcspSigningExpectedTest()", "90": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageOcspSigningExpectedTest()", "91": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageOcspSigningExpectedTest()", "92": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageOcspSigningExpectedTest()", "93": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageOcspSigningExpectedTest()", "94": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageOcspSigningExpectedTest()", "96": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageOcspSigningNotExpectedTest()", "97": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageOcspSigningNotExpectedTest()", "98": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageOcspSigningNotExpectedTest()", "99": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageOcspSigningNotExpectedTest()", "100": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageOcspSigningNotExpectedTest()", "101": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageOcspSigningNotExpectedTest()", "102": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageOcspSigningNotExpectedTest()", "103": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageOcspSigningNotExpectedTest()", "104": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageOcspSigningNotExpectedTest()", "105": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageOcspSigningNotExpectedTest()", "107": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageAnyUsageTest1()", "108": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageAnyUsageTest1()", "109": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageAnyUsageTest1()", "110": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageAnyUsageTest1()", "111": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageAnyUsageTest1()", "112": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageAnyUsageTest1()", "113": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageAnyUsageTest1()", "114": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageAnyUsageTest1()", "115": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageAnyUsageTest1()", "116": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageAnyUsageTest1()", "118": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageAnyUsageTest2()", "119": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageAnyUsageTest2()", "120": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageAnyUsageTest2()", "121": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageAnyUsageTest2()", "122": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageAnyUsageTest2()", "123": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageAnyUsageTest2()", "124": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageAnyUsageTest2()", "125": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageAnyUsageTest2()", "126": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageAnyUsageTest2()", "127": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageAnyUsageTest2()", "129": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageSeveralValues1PartiallyExpectedTest()", "130": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageSeveralValues1PartiallyExpectedTest()", "131": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageSeveralValues1PartiallyExpectedTest()", "132": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageSeveralValues1PartiallyExpectedTest()", "133": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageSeveralValues1PartiallyExpectedTest()", "134": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageSeveralValues1PartiallyExpectedTest()", "135": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageSeveralValues1PartiallyExpectedTest()", "136": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageSeveralValues1PartiallyExpectedTest()", "137": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageSeveralValues1PartiallyExpectedTest()", "138": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageSeveralValues1PartiallyExpectedTest()", "140": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageSeveralValues1PartiallyNotExpectedTest()", "141": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageSeveralValues1PartiallyNotExpectedTest()", "142": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageSeveralValues1PartiallyNotExpectedTest()", "143": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageSeveralValues1PartiallyNotExpectedTest()", "144": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageSeveralValues1PartiallyNotExpectedTest()", "145": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageSeveralValues1PartiallyNotExpectedTest()", "146": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageSeveralValues1PartiallyNotExpectedTest()", "147": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageSeveralValues1PartiallyNotExpectedTest()", "148": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageSeveralValues1PartiallyNotExpectedTest()", "149": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageSeveralValues1PartiallyNotExpectedTest()", "151": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageSeveralValues2PartiallyExpectedTest()", "152": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageSeveralValues2PartiallyExpectedTest()", "153": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageSeveralValues2PartiallyExpectedTest()", "154": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageSeveralValues2PartiallyExpectedTest()", "155": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageSeveralValues2PartiallyExpectedTest()", "156": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageSeveralValues2PartiallyExpectedTest()", "157": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageSeveralValues2PartiallyExpectedTest()", "158": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageSeveralValues2PartiallyExpectedTest()", "159": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageSeveralValues2PartiallyExpectedTest()", "160": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageSeveralValues2PartiallyExpectedTest()", "162": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageSeveralValues2PartiallyNotExpectedTest()", "163": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageSeveralValues2PartiallyNotExpectedTest()", "164": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageSeveralValues2PartiallyNotExpectedTest()", "165": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageSeveralValues2PartiallyNotExpectedTest()", "166": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageSeveralValues2PartiallyNotExpectedTest()", "167": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageSeveralValues2PartiallyNotExpectedTest()", "168": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageSeveralValues2PartiallyNotExpectedTest()", "169": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageSeveralValues2PartiallyNotExpectedTest()", "170": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageSeveralValues2PartiallyNotExpectedTest()", "171": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageSeveralValues2PartiallyNotExpectedTest()", "172": "ExtendedKeyUsageExtensionTest::::extendedKeyUsageSeveralValues2PartiallyNotExpectedTest()"}, "tests": [{"test_lines": [42, 50], "covered_lines": [45, 55, 56, 57, 58, 72, 75, 76, 77, 84, 85, 89]}, {"test_lines": [52, 61], "covered_lines": [45, 55, 56, 57, 58, 72, 75, 76, 77, 84, 85, 86, 87, 89]}, {"test_lines": [63, 72], "covered_lines": [45, 55, 56, 57, 58, 72, 75, 76, 79, 80, 84, 85, 86, 87, 89]}, {"test_lines": [74, 83], "covered_lines": [45, 55, 56, 57, 58, 72, 75, 76, 79, 80, 84, 85, 86, 87, 89]}, {"test_lines": [85, 94], "covered_lines": [45, 55, 56, 57, 58, 72, 75, 76, 79, 80, 84, 85, 86, 87, 89]}, {"test_lines": [96, 105], "covered_lines": [45, 55, 56, 57, 58, 72, 75, 76, 79, 80, 84, 85, 86, 87, 89]}, {"test_lines": [107, 116], "covered_lines": [45, 55, 56, 57, 58, 72, 75, 76, 79, 80, 84, 85, 86, 87, 89]}, {"test_lines": [118, 127], "covered_lines": [45, 55, 56, 57, 58, 72, 75, 76, 79, 80, 84, 85, 86, 87, 89]}, {"test_lines": [129, 138], "covered_lines": [45, 55, 56, 57, 58, 72, 75, 76, 79, 80, 84, 85, 86, 87, 89]}, {"test_lines": [140, 149], "covered_lines": [45, 55, 56, 57, 58, 72, 75, 76, 79, 80, 84, 85, 86, 87, 89]}, {"test_lines": [151, 160], "covered_lines": [45, 55, 56, 57, 58, 72, 75, 76, 79, 80, 84, 85, 86, 87, 89]}, {"test_lines": [162, 172], "covered_lines": [45, 55, 56, 57, 58, 72, 75, 76, 79, 80, 84, 85, 86, 87, 89]}]}, "/bernard/dataset_construction/prep/repos/itext-java/sign/src/main/java/com/itextpdf/signatures/validation/v1/report/ValidationReport.java": {"class_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.signatures.validation.v1.report;\n", "\n", "import com.itextpdf.signatures.validation.v1.report.ReportItem.ReportItemStatus;\n", "\n", "import java.util.ArrayList;\n", "import java.util.Collections;\n", "import java.util.List;\n", "import java.util.stream.Collectors;\n", "\n", "/**\n", " * Validation report, which contains detailed validation results.\n", " */\n", "public class ValidationReport {\n", "    private final List<ReportItem> reportItems = new ArrayList<>();\n", "\n", "    /**\n", "     * Create new instance of {@link ValidationReport}.\n", "     */\n", "    public ValidationReport() {\n", "        // Empty constructor.\n", "    }\n", "\n", "    /**\n", "     * Get the result of a validation process.\n", "     *\n", "     * @return {@link ValidationResult}, which represents the result of a validation\n", "     */\n", "    public ValidationResult getValidationResult() {\n", "        if (reportItems.stream().anyMatch(reportItem -> reportItem.getStatus() == ReportItemStatus.INVALID)) {\n", "            return ValidationResult.INVALID;\n", "        }\n", "        if (reportItems.stream().anyMatch(reportItem -> reportItem.getStatus() == ReportItemStatus.INDETERMINATE)) {\n", "            return ValidationResult.INDETERMINATE;\n", "        }\n", "        return ValidationResult.VALID;\n", "    }\n", "\n", "    /**\n", "     * Get all failures recognized during a validation process.\n", "     *\n", "     * @return report items {@link List}, which contains all recognized failures\n", "     */\n", "    public List<ReportItem> getFailures() {\n", "        return reportItems.stream().filter(item -> item.getStatus() != ReportItemStatus.INFO)\n", "                .collect(Collectors.toList());\n", "    }\n", "\n", "    /**\n", "     * Get list of failures, which are related to certificate validation.\n", "     *\n", "     * @return report items {@link List}, which contains only {@link CertificateReportItem} failures\n", "     */\n", "    public List<CertificateReportItem> getCertificateFailures() {\n", "        return getFailures().stream().filter(item -> item instanceof CertificateReportItem)\n", "                .map(item -> (CertificateReportItem) item).collect(Collectors.toList());\n", "    }\n", "\n", "    /**\n", "     * Get all log messages reported during a validation process.\n", "     *\n", "     * @return report items {@link List}, which contains all reported log messages, related to validation\n", "     */\n", "    public List<ReportItem> getLogs() {\n", "        return Collections.unmodifiableList(reportItems);\n", "    }\n", "\n", "    /**\n", "     * Get list of log messages, which are related to certificate validation.\n", "     *\n", "     * @return report items {@link List}, which contains only {@link CertificateReportItem} log messages\n", "     */\n", "    public List<CertificateReportItem> getCertificateLogs() {\n", "        return reportItems.stream().filter(item -> item instanceof CertificateReportItem)\n", "                .map(item -> (CertificateReportItem) item).collect(Collectors.toList());\n", "    }\n", "\n", "    /**\n", "     * Add new report item to the overall validation result.\n", "     *\n", "     * @param item {@link ReportItem} to be added\n", "     */\n", "    public void addReportItem(ReportItem item) {\n", "        reportItems.add(item);\n", "    }\n", "\n", "    @Override\n", "    public String toString() {\n", "        StringBuilder sb = new StringBuilder(\"ValidationReport{validationResult=\");\n", "        sb.append(getValidationResult())\n", "                .append(\"\\nreportItems=\");\n", "        for (ReportItem i : reportItems) {\n", "            sb.append(i).append(\", \");\n", "        }\n", "        sb.append(\"}\");\n", "        return sb.toString();\n", "    }\n", "\n", "    public void merge(ValidationReport subReport) {\n", "        for (ReportItem item : subReport.getLogs()) {\n", "            addReportItem(item);\n", "        }\n", "    }\n", "\n", "    /**\n", "     * Enum representing possible validation results.\n", "     */\n", "    public enum ValidationResult {\n", "        /**\n", "         * Valid validation result.\n", "         */\n", "        VALID,\n", "        /**\n", "         * Invalid validation result.\n", "         */\n", "        INVALID,\n", "        /**\n", "         * Indeterminate validation result.\n", "         */\n", "        INDETERMINATE\n", "    }\n", "}\n"], "test_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.signatures.validation.v1.report;\n", "\n", "import com.itextpdf.signatures.testutils.PemFileHelper;\n", "import com.itextpdf.test.ExtendedITextTest;\n", "import com.itextpdf.test.annotations.type.BouncyCastleUnitTest;\n", "import org.junit.Assert;\n", "import org.junit.Test;\n", "import org.junit.experimental.categories.Category;\n", "\n", "import java.io.IOException;\n", "import java.security.cert.CertificateException;\n", "import java.security.cert.X509Certificate;\n", "\n", "@Category(BouncyCastleUnitTest.class)\n", "public class ValidationReportTest extends ExtendedITextTest {\n", "\n", "    private static final String CERTS_SRC = \"./src/test/resources/com/itextpdf/signatures/certs/\";\n", "\n", "    @Test\n", "    public void getValidationResultWithNoLogsShouldBeValid() {\n", "        ValidationReport sut = new ValidationReport();\n", "        Assert.assertEquals(ValidationReport.ValidationResult.VALID, sut.getValidationResult());\n", "    }\n", "\n", "    @Test\n", "    public void getValidationResultWithOnlyValidLogsShouldBeValid() {\n", "        ValidationReport sut = new ValidationReport();\n", "        sut.addReportItem(new ReportItem(\"test1\", \"test1\", ReportItem.ReportItemStatus.INFO));\n", "        sut.addReportItem(new ReportItem(\"test2\", \"test2\", ReportItem.ReportItemStatus.INFO));\n", "        sut.addReportItem(new ReportItem(\"test3\", \"test3\", ReportItem.ReportItemStatus.INFO));\n", "        Assert.assertEquals(ValidationReport.ValidationResult.VALID, sut.getValidationResult());\n", "    }\n", "\n", "    @Test\n", "    public void getValidationResultWithValidAndIndeterminateLogsShouldBeIndeterminate() {\n", "        ValidationReport sut = new ValidationReport();\n", "        sut.addReportItem(new ReportItem(\"test1\", \"test1\", ReportItem.ReportItemStatus.INFO));\n", "        sut.addReportItem(new ReportItem(\"test2\", \"test2\", ReportItem.ReportItemStatus.INDETERMINATE));\n", "        sut.addReportItem(new ReportItem(\"test3\", \"test3\", ReportItem.ReportItemStatus.INFO));\n", "        Assert.assertEquals(ValidationReport.ValidationResult.INDETERMINATE, sut.getValidationResult());\n", "    }\n", "\n", "    @Test\n", "    public void getValidationResultWithInvalidLogsShouldBeInvalid() {\n", "        ValidationReport sut = new ValidationReport();\n", "        sut.addReportItem(new ReportItem(\"test1\", \"test1\", ReportItem.ReportItemStatus.INFO));\n", "        sut.addReportItem(new ReportItem(\"test2\", \"test2\", ReportItem.ReportItemStatus.INVALID));\n", "        sut.addReportItem(new ReportItem(\"test3\", \"test3\", ReportItem.ReportItemStatus.INDETERMINATE));\n", "        Assert.assertEquals(ValidationReport.ValidationResult.INVALID, sut.getValidationResult());\n", "    }\n", "\n", "    @Test\n", "    public void testGetFailures() {\n", "        ValidationReport sut = new ValidationReport();\n", "        sut.addReportItem(new ReportItem(\"test1\", \"test1\", ReportItem.ReportItemStatus.INFO));\n", "        ReportItem failure1 = new ReportItem(\"test2\", \"test2\", ReportItem.ReportItemStatus.INVALID);\n", "        sut.addReportItem(failure1);\n", "        ReportItem failure2 = new ReportItem(\"test3\", \"test3\", ReportItem.ReportItemStatus.INDETERMINATE);\n", "        sut.addReportItem(failure2);\n", "        Assert.assertTrue(sut.getFailures().contains(failure1));\n", "        Assert.assertTrue(sut.getFailures().contains(failure2));\n", "        Assert.assertEquals(2, sut.getFailures().size());\n", "    }\n", "\n", "    @Test\n", "    public void getCertificateFailuresTest() throws CertificateException, IOException {\n", "        ValidationReport sut = new ValidationReport();\n", "        sut.addReportItem(new ReportItem(\"test1\", \"test1\", ReportItem.ReportItemStatus.INFO));\n", "        X509Certificate cert =\n", "                (X509Certificate) PemFileHelper.readFirstChain(CERTS_SRC + \"adobeExtensionCert.pem\")[0];\n", "        CertificateReportItem failure1 = new CertificateReportItem(cert, \"test2\", \"test2\", ReportItem.ReportItemStatus.INVALID);\n", "        sut.addReportItem(failure1);\n", "        ReportItem failure2 = new ReportItem(\"test3\", \"test3\", ReportItem.ReportItemStatus.INDETERMINATE);\n", "        sut.addReportItem(failure2);\n", "        Assert.assertTrue(sut.getCertificateFailures().contains(failure1));\n", "        Assert.assertEquals(1, sut.getCertificateFailures().size());\n", "    }\n", "\n", "    @Test\n", "    public void getLogsTest() throws CertificateException, IOException {\n", "        ValidationReport sut = new ValidationReport();\n", "        ReportItem item1 = new ReportItem(\"test1\", \"test1\", ReportItem.ReportItemStatus.INFO);\n", "        sut.addReportItem(item1);\n", "        X509Certificate cert =\n", "                (X509Certificate) PemFileHelper.readFirstChain(CERTS_SRC + \"adobeExtensionCert.pem\")[0];\n", "        CertificateReportItem failure1 = new CertificateReportItem(cert, \"test2\", \"test2\", ReportItem.ReportItemStatus.INVALID);\n", "        sut.addReportItem(failure1);\n", "        ReportItem failure2 = new ReportItem(\"test3\", \"test3\", ReportItem.ReportItemStatus.INDETERMINATE);\n", "        sut.addReportItem(failure2);\n", "        Assert.assertEquals(item1, sut.getLogs().get(0));\n", "        Assert.assertEquals(failure1, sut.getLogs().get(1));\n", "        Assert.assertEquals(failure2, sut.getLogs().get(2));\n", "        Assert.assertEquals(3, sut.getLogs().size());\n", "    }\n", "\n", "    @Test\n", "    public void getCertificateLogsTest() throws CertificateException, IOException {\n", "        ValidationReport sut = new ValidationReport();\n", "        sut.addReportItem(new ReportItem(\"test1\", \"test1\", ReportItem.ReportItemStatus.INFO));\n", "        X509Certificate cert =\n", "                (X509Certificate) PemFileHelper.readFirstChain(CERTS_SRC + \"adobeExtensionCert.pem\")[0];\n", "        CertificateReportItem failure1 = new CertificateReportItem(cert, \"test2\", \"test2\", ReportItem.ReportItemStatus.INVALID);\n", "        sut.addReportItem(failure1);\n", "        ReportItem failure2 = new ReportItem(\"test3\", \"test3\", ReportItem.ReportItemStatus.INDETERMINATE);\n", "        sut.addReportItem(failure2);\n", "        Assert.assertTrue(sut.getCertificateLogs().contains(failure1));\n", "        Assert.assertEquals(1, sut.getCertificateLogs().size());\n", "    }\n", "\n", "    @Test\n", "    public void toStringTest() throws CertificateException, IOException {\n", "        ValidationReport sut = new ValidationReport();\n", "        sut.addReportItem(new ReportItem(\"test1check\", \"test1message\", ReportItem.ReportItemStatus.INFO));\n", "        X509Certificate cert =\n", "                (X509Certificate) PemFileHelper.readFirstChain(CERTS_SRC + \"adobeExtensionCert.pem\")[0];\n", "        CertificateReportItem failure1 = new CertificateReportItem(cert, \"test2check\", \"test2message\", ReportItem.ReportItemStatus.INVALID);\n", "        sut.addReportItem(failure1);\n", "        ReportItem failure2 = new ReportItem(\"test3check\", \"test3message\", ReportItem.ReportItemStatus.INDETERMINATE);\n", "        sut.addReportItem(failure2);\n", "\n", "        Assert.assertTrue(sut.toString().contains(\"INVALID\"));\n", "        Assert.assertTrue(sut.toString().contains(\"test1check\"));\n", "        Assert.assertTrue(sut.toString().contains(\"test1message\"));\n", "        Assert.assertTrue(sut.toString().contains(\"test2check\"));\n", "        Assert.assertTrue(sut.toString().contains(\"test2message\"));\n", "        Assert.assertTrue(sut.toString().contains(\"test3check\"));\n", "    }\n", "}"], "method_lines_dic": {"ValidationReport::::getValidationResult()": [50, 58], "ValidationReport::::getFailures()": [65, 68], "ValidationReport::::getCertificateFailures()": [75, 78], "ValidationReport::::getLogs()": [85, 87], "ValidationReport::::getCertificateLogs()": [94, 97], "ValidationReport::::addReportItem(com.itextpdf.signatures.validation.v1.report.ReportItem)": [104, 106], "ValidationReport::::toString()": [108, 118], "ValidationReport::::merge(com.itextpdf.signatures.validation.v1.report.ValidationReport)": [120, 124]}, "test_method_lines_dic": {"ValidationReportTest::::getValidationResultWithNoLogsShouldBeValid()": [41, 45], "ValidationReportTest::::getValidationResultWithOnlyValidLogsShouldBeValid()": [47, 54], "ValidationReportTest::::getValidationResultWithValidAndIndeterminateLogsShouldBeIndeterminate()": [56, 63], "ValidationReportTest::::getValidationResultWithInvalidLogsShouldBeInvalid()": [65, 72], "ValidationReportTest::::testGetFailures()": [74, 85], "ValidationReportTest::::getCertificateFailuresTest()": [87, 99], "ValidationReportTest::::getLogsTest()": [101, 116], "ValidationReportTest::::getCertificateLogsTest()": [118, 130], "ValidationReportTest::::toStringTest()": [132, 149]}, "reverse_method_lines_dic": {"50": "ValidationReport::::getValidationResult()", "51": "ValidationReport::::getValidationResult()", "52": "ValidationReport::::getValidationResult()", "53": "ValidationReport::::getValidationResult()", "54": "ValidationReport::::getValidationResult()", "55": "ValidationReport::::getValidationResult()", "56": "ValidationReport::::getValidationResult()", "57": "ValidationReport::::getValidationResult()", "58": "ValidationReport::::getValidationResult()", "65": "ValidationReport::::getFailures()", "66": "ValidationReport::::getFailures()", "67": "ValidationReport::::getFailures()", "68": "ValidationReport::::getFailures()", "75": "ValidationReport::::getCertificateFailures()", "76": "ValidationReport::::getCertificateFailures()", "77": "ValidationReport::::getCertificateFailures()", "78": "ValidationReport::::getCertificateFailures()", "85": "ValidationReport::::getLogs()", "86": "ValidationReport::::getLogs()", "87": "ValidationReport::::getLogs()", "94": "ValidationReport::::getCertificateLogs()", "95": "ValidationReport::::getCertificateLogs()", "96": "ValidationReport::::getCertificateLogs()", "97": "ValidationReport::::getCertificateLogs()", "104": "ValidationReport::::addReportItem(com.itextpdf.signatures.validation.v1.report.ReportItem)", "105": "ValidationReport::::addReportItem(com.itextpdf.signatures.validation.v1.report.ReportItem)", "106": "ValidationReport::::addReportItem(com.itextpdf.signatures.validation.v1.report.ReportItem)", "108": "ValidationReport::::toString()", "109": "ValidationReport::::toString()", "110": "ValidationReport::::toString()", "111": "ValidationReport::::toString()", "112": "ValidationReport::::toString()", "113": "ValidationReport::::toString()", "114": "ValidationReport::::toString()", "115": "ValidationReport::::toString()", "116": "ValidationReport::::toString()", "117": "ValidationReport::::toString()", "118": "ValidationReport::::toString()", "120": "ValidationReport::::merge(com.itextpdf.signatures.validation.v1.report.ValidationReport)", "121": "ValidationReport::::merge(com.itextpdf.signatures.validation.v1.report.ValidationReport)", "122": "ValidationReport::::merge(com.itextpdf.signatures.validation.v1.report.ValidationReport)", "123": "ValidationReport::::merge(com.itextpdf.signatures.validation.v1.report.ValidationReport)", "124": "ValidationReport::::merge(com.itextpdf.signatures.validation.v1.report.ValidationReport)"}, "test_reverse_method_lines_dic": {"41": "ValidationReportTest::::getValidationResultWithNoLogsShouldBeValid()", "42": "ValidationReportTest::::getValidationResultWithNoLogsShouldBeValid()", "43": "ValidationReportTest::::getValidationResultWithNoLogsShouldBeValid()", "44": "ValidationReportTest::::getValidationResultWithNoLogsShouldBeValid()", "45": "ValidationReportTest::::getValidationResultWithNoLogsShouldBeValid()", "47": "ValidationReportTest::::getValidationResultWithOnlyValidLogsShouldBeValid()", "48": "ValidationReportTest::::getValidationResultWithOnlyValidLogsShouldBeValid()", "49": "ValidationReportTest::::getValidationResultWithOnlyValidLogsShouldBeValid()", "50": "ValidationReportTest::::getValidationResultWithOnlyValidLogsShouldBeValid()", "51": "ValidationReportTest::::getValidationResultWithOnlyValidLogsShouldBeValid()", "52": "ValidationReportTest::::getValidationResultWithOnlyValidLogsShouldBeValid()", "53": "ValidationReportTest::::getValidationResultWithOnlyValidLogsShouldBeValid()", "54": "ValidationReportTest::::getValidationResultWithOnlyValidLogsShouldBeValid()", "56": "ValidationReportTest::::getValidationResultWithValidAndIndeterminateLogsShouldBeIndeterminate()", "57": "ValidationReportTest::::getValidationResultWithValidAndIndeterminateLogsShouldBeIndeterminate()", "58": "ValidationReportTest::::getValidationResultWithValidAndIndeterminateLogsShouldBeIndeterminate()", "59": "ValidationReportTest::::getValidationResultWithValidAndIndeterminateLogsShouldBeIndeterminate()", "60": "ValidationReportTest::::getValidationResultWithValidAndIndeterminateLogsShouldBeIndeterminate()", "61": "ValidationReportTest::::getValidationResultWithValidAndIndeterminateLogsShouldBeIndeterminate()", "62": "ValidationReportTest::::getValidationResultWithValidAndIndeterminateLogsShouldBeIndeterminate()", "63": "ValidationReportTest::::getValidationResultWithValidAndIndeterminateLogsShouldBeIndeterminate()", "65": "ValidationReportTest::::getValidationResultWithInvalidLogsShouldBeInvalid()", "66": "ValidationReportTest::::getValidationResultWithInvalidLogsShouldBeInvalid()", "67": "ValidationReportTest::::getValidationResultWithInvalidLogsShouldBeInvalid()", "68": "ValidationReportTest::::getValidationResultWithInvalidLogsShouldBeInvalid()", "69": "ValidationReportTest::::getValidationResultWithInvalidLogsShouldBeInvalid()", "70": "ValidationReportTest::::getValidationResultWithInvalidLogsShouldBeInvalid()", "71": "ValidationReportTest::::getValidationResultWithInvalidLogsShouldBeInvalid()", "72": "ValidationReportTest::::getValidationResultWithInvalidLogsShouldBeInvalid()", "74": "ValidationReportTest::::testGetFailures()", "75": "ValidationReportTest::::testGetFailures()", "76": "ValidationReportTest::::testGetFailures()", "77": "ValidationReportTest::::testGetFailures()", "78": "ValidationReportTest::::testGetFailures()", "79": "ValidationReportTest::::testGetFailures()", "80": "ValidationReportTest::::testGetFailures()", "81": "ValidationReportTest::::testGetFailures()", "82": "ValidationReportTest::::testGetFailures()", "83": "ValidationReportTest::::testGetFailures()", "84": "ValidationReportTest::::testGetFailures()", "85": "ValidationReportTest::::testGetFailures()", "87": "ValidationReportTest::::getCertificateFailuresTest()", "88": "ValidationReportTest::::getCertificateFailuresTest()", "89": "ValidationReportTest::::getCertificateFailuresTest()", "90": "ValidationReportTest::::getCertificateFailuresTest()", "91": "ValidationReportTest::::getCertificateFailuresTest()", "92": "ValidationReportTest::::getCertificateFailuresTest()", "93": "ValidationReportTest::::getCertificateFailuresTest()", "94": "ValidationReportTest::::getCertificateFailuresTest()", "95": "ValidationReportTest::::getCertificateFailuresTest()", "96": "ValidationReportTest::::getCertificateFailuresTest()", "97": "ValidationReportTest::::getCertificateFailuresTest()", "98": "ValidationReportTest::::getCertificateFailuresTest()", "99": "ValidationReportTest::::getCertificateFailuresTest()", "101": "ValidationReportTest::::getLogsTest()", "102": "ValidationReportTest::::getLogsTest()", "103": "ValidationReportTest::::getLogsTest()", "104": "ValidationReportTest::::getLogsTest()", "105": "ValidationReportTest::::getLogsTest()", "106": "ValidationReportTest::::getLogsTest()", "107": "ValidationReportTest::::getLogsTest()", "108": "ValidationReportTest::::getLogsTest()", "109": "ValidationReportTest::::getLogsTest()", "110": "ValidationReportTest::::getLogsTest()", "111": "ValidationReportTest::::getLogsTest()", "112": "ValidationReportTest::::getLogsTest()", "113": "ValidationReportTest::::getLogsTest()", "114": "ValidationReportTest::::getLogsTest()", "115": "ValidationReportTest::::getLogsTest()", "116": "ValidationReportTest::::getLogsTest()", "118": "ValidationReportTest::::getCertificateLogsTest()", "119": "ValidationReportTest::::getCertificateLogsTest()", "120": "ValidationReportTest::::getCertificateLogsTest()", "121": "ValidationReportTest::::getCertificateLogsTest()", "122": "ValidationReportTest::::getCertificateLogsTest()", "123": "ValidationReportTest::::getCertificateLogsTest()", "124": "ValidationReportTest::::getCertificateLogsTest()", "125": "ValidationReportTest::::getCertificateLogsTest()", "126": "ValidationReportTest::::getCertificateLogsTest()", "127": "ValidationReportTest::::getCertificateLogsTest()", "128": "ValidationReportTest::::getCertificateLogsTest()", "129": "ValidationReportTest::::getCertificateLogsTest()", "130": "ValidationReportTest::::getCertificateLogsTest()", "132": "ValidationReportTest::::toStringTest()", "133": "ValidationReportTest::::toStringTest()", "134": "ValidationReportTest::::toStringTest()", "135": "ValidationReportTest::::toStringTest()", "136": "ValidationReportTest::::toStringTest()", "137": "ValidationReportTest::::toStringTest()", "138": "ValidationReportTest::::toStringTest()", "139": "ValidationReportTest::::toStringTest()", "140": "ValidationReportTest::::toStringTest()", "141": "ValidationReportTest::::toStringTest()", "142": "ValidationReportTest::::toStringTest()", "143": "ValidationReportTest::::toStringTest()", "144": "ValidationReportTest::::toStringTest()", "145": "ValidationReportTest::::toStringTest()", "146": "ValidationReportTest::::toStringTest()", "147": "ValidationReportTest::::toStringTest()", "148": "ValidationReportTest::::toStringTest()", "149": "ValidationReportTest::::toStringTest()"}, "tests": [{"test_lines": [41, 45], "covered_lines": [36, 41, 43, 51, 54, 57, 129, 133, 137, 141]}, {"test_lines": [47, 54], "covered_lines": [36, 41, 43, 51, 54, 57, 105, 106, 129, 133, 137, 141]}, {"test_lines": [56, 63], "covered_lines": [36, 41, 43, 51, 54, 55, 105, 106, 129, 133, 137, 141]}, {"test_lines": [65, 72], "covered_lines": [36, 41, 43, 51, 52, 105, 106, 129, 133, 137, 141]}, {"test_lines": [74, 85], "covered_lines": [36, 41, 43, 66, 67, 105, 106]}, {"test_lines": [87, 99], "covered_lines": [36, 41, 43, 66, 67, 76, 77, 105, 106]}, {"test_lines": [101, 116], "covered_lines": [36, 41, 43, 86, 105, 106]}, {"test_lines": [118, 130], "covered_lines": [36, 41, 43, 95, 96, 105, 106]}, {"test_lines": [132, 149], "covered_lines": [36, 41, 43, 51, 52, 105, 106, 110, 111, 112, 113, 114, 115, 116, 117, 129, 133, 137, 141]}]}, "/bernard/dataset_construction/prep/repos/itext-java/sign/src/main/java/com/itextpdf/signatures/cms/SignerInfo.java": {"class_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.signatures.cms;\n", "\n", "import com.itextpdf.bouncycastleconnector.BouncyCastleFactoryCreator;\n", "import com.itextpdf.commons.bouncycastle.IBouncyCastleFactory;\n", "\n", "import com.itextpdf.commons.bouncycastle.asn1.IASN1Encodable;\n", "import com.itextpdf.commons.bouncycastle.asn1.IASN1EncodableVector;\n", "import com.itextpdf.commons.bouncycastle.asn1.IASN1Enumerated;\n", "import com.itextpdf.commons.bouncycastle.asn1.IASN1InputStream;\n", "import com.itextpdf.commons.bouncycastle.asn1.IASN1Integer;\n", "import com.itextpdf.commons.bouncycastle.asn1.IASN1ObjectIdentifier;\n", "import com.itextpdf.commons.bouncycastle.asn1.IASN1OctetString;\n", "import com.itextpdf.commons.bouncycastle.asn1.IASN1Primitive;\n", "import com.itextpdf.commons.bouncycastle.asn1.IASN1Sequence;\n", "import com.itextpdf.commons.bouncycastle.asn1.IASN1Set;\n", "import com.itextpdf.commons.bouncycastle.asn1.IASN1TaggedObject;\n", "import com.itextpdf.commons.bouncycastle.asn1.IDEROctetString;\n", "import com.itextpdf.commons.bouncycastle.asn1.IDERSequence;\n", "import com.itextpdf.commons.bouncycastle.asn1.IDERSet;\n", "import com.itextpdf.commons.bouncycastle.asn1.IDERTaggedObject;\n", "import com.itextpdf.commons.bouncycastle.asn1.ocsp.IOCSPObjectIdentifiers;\n", "import com.itextpdf.commons.bouncycastle.asn1.x509.IAlgorithmIdentifier;\n", "import com.itextpdf.commons.bouncycastle.asn1.x509.ITBSCertificate;\n", "import com.itextpdf.kernel.exceptions.PdfException;\n", "\n", "import com.itextpdf.signatures.CertificateInfo;\n", "import com.itextpdf.signatures.CertificateUtil;\n", "import com.itextpdf.signatures.DigestAlgorithms;\n", "import com.itextpdf.signatures.OID;\n", "import com.itextpdf.signatures.SecurityIDs;\n", "import com.itextpdf.signatures.exceptions.SignExceptionMessageConstant;\n", "\n", "\n", "import java.io.ByteArrayInputStream;\n", "import java.io.IOException;\n", "import java.security.MessageDigest;\n", "import java.security.NoSuchAlgorithmException;\n", "import java.security.NoSuchProviderException;\n", "import java.security.cert.CertificateEncodingException;\n", "import java.security.cert.X509Certificate;\n", "import java.util.ArrayList;\n", "import java.util.Arrays;\n", "import java.util.Collection;\n", "import java.util.Collections;\n", "\n", "/**\n", " * This class represents the SignerInfo structure from\n", " * <a href=\"https://datatracker.ietf.org/doc/html/rfc5652#section-5.3\">rfc5652   Cryptographic Message Syntax (CMS)</a>\n", " */\n", "public class SignerInfo {\n", "    private static final IBouncyCastleFactory BC_FACTORY = BouncyCastleFactoryCreator.getFactory();\n", "    private static final int DEFAULT_SIGNATURE_SIZE = 1024;\n", "\n", "    private AlgorithmIdentifier digestAlgorithm;\n", "    private AlgorithmIdentifier signingAlgorithm;\n", "    private final Collection<CmsAttribute> signedAttributes = new ArrayList<>();\n", "    private final Collection<CmsAttribute> unSignedAttributes;\n", "    private byte[] serializedSignedAttributes;\n", "    private Collection<byte[]> ocspResponses;\n", "    private Collection<byte[]> crlResponses;\n", "    private byte[] signatureData;\n", "    private boolean signedAttributesReadOnly;\n", "    private X509Certificate signerCertificate;\n", "\n", "    /**\n", "     * Creates an empty SignerInfo structure.\n", "     */\n", "    public SignerInfo() {\n", "        CmsAttribute contentType =\n", "                new CmsAttribute(SecurityIDs.ID_CONTENT_TYPE,\n", "                        BC_FACTORY.createDERSet(BC_FACTORY.createASN1ObjectIdentifier(SecurityIDs.ID_PKCS7_DATA)));\n", "        signedAttributes.add(contentType);\n", "        unSignedAttributes = new ArrayList<>();\n", "    }\n", "\n", "    /**\n", "     * Creates a SignerInfo structure from an ASN1 structure.\n", "     *\n", "     * @param signerInfoStructure the ASN1 structure containing signerInfo\n", "     * @param certificates        the certificates of the CMS, it should contain the signing certificate\n", "     *\n", "     * @throws IOException if issues occur during ASN1 objects creation.\n", "     */\n", "    public SignerInfo(IASN1Encodable signerInfoStructure, Collection<X509Certificate> certificates) throws IOException {\n", "        int index = 0;\n", "        try {\n", "            IASN1Sequence signerInfoSeq = BC_FACTORY.createASN1Sequence(signerInfoStructure);\n", "            IASN1Integer version = BC_FACTORY.createASN1Integer(signerInfoSeq.getObjectAt(index++));\n", "            if (version.getValue().intValue() == 1) {\n", "                processIssuerAndSerialNumberSignerCertificate(signerInfoSeq.getObjectAt(index++), certificates);\n", "            } else {\n", "                processSubjectKeyIdentifierSignerCertificate(signerInfoSeq.getObjectAt(index++), certificates);\n", "            }\n", "            digestAlgorithm = new AlgorithmIdentifier(signerInfoSeq.getObjectAt(index++));\n", "            IASN1TaggedObject taggedSingedAttributes =\n", "                    BC_FACTORY.createASN1TaggedObject(signerInfoSeq.getObjectAt(index));\n", "            if (taggedSingedAttributes != null) {\n", "                index++;\n", "                setSerializedSignedAttributes(BC_FACTORY.createASN1Set(taggedSingedAttributes, false)\n", "                        .getEncoded(BC_FACTORY.createASN1Encoding().getDer()));\n", "            }\n", "            signingAlgorithm = new AlgorithmIdentifier(signerInfoSeq.getObjectAt(index++));\n", "\n", "            IDEROctetString signatureDataOS = BC_FACTORY.createDEROctetString(signerInfoSeq.getObjectAt(index++));\n", "            if (signatureDataOS != null) {\n", "                signatureData = signatureDataOS.getOctets();\n", "            }\n", "\n", "            if (signerInfoSeq.size() > index) {\n", "                IASN1TaggedObject taggedUnsingedAttributes =\n", "                        BC_FACTORY.createASN1TaggedObject(signerInfoSeq.getObjectAt(index));\n", "                unSignedAttributes = processAttributeSet(BC_FACTORY.createASN1Set(taggedUnsingedAttributes, false));\n", "            } else {\n", "                unSignedAttributes = new ArrayList<>();\n", "            }\n", "        } catch (NullPointerException npe) {\n", "            throw new PdfException(SignExceptionMessageConstant.CMS_INVALID_CONTAINER_STRUCTURE, npe);\n", "        }\n", "    }\n", "\n", "    /**\n", "     * Returns the algorithmId to create the digest of the data to sign.\n", "     *\n", "     * @return the OID of the digest algorithm.\n", "     */\n", "    public AlgorithmIdentifier getDigestAlgorithm() {\n", "        return digestAlgorithm;\n", "    }\n", "\n", "    /**\n", "     * Sets the algorithmId to create the digest of the data to sign.\n", "     *\n", "     * @param algorithmId the OID of the algorithm\n", "     */\n", "    public void setDigestAlgorithm(AlgorithmIdentifier algorithmId) {\n", "        digestAlgorithm = algorithmId;\n", "    }\n", "\n", "    /**\n", "     * Adds or replaces the message digest signed attribute.\n", "     *\n", "     * @param digest ASN.1 type MessageDigest\n", "     */\n", "    public void setMessageDigest(byte[] digest) {\n", "        if (signedAttributesReadOnly) {\n", "            throw new IllegalStateException(SignExceptionMessageConstant.CMS_SIGNERINFO_READONLY);\n", "        }\n", "        CmsAttribute digestAttribute = new CmsAttribute(SecurityIDs.ID_MESSAGE_DIGEST, BC_FACTORY.createDERSet(\n", "                                BC_FACTORY.createDEROctetString(digest)));\n", "        signedAttributes.add(digestAttribute);\n", "    }\n", "\n", "    /**\n", "     * Sets the certificate that is used to sign.\n", "     *\n", "     * @param certificate the certificate that is used to sign\n", "     * @throws CertificateEncodingException if an encoding error occurs.\n", "     */\n", "    public void setSigningCertificate(X509Certificate certificate) throws CertificateEncodingException {\n", "        this.signerCertificate = certificate;\n", "\n", "        ITBSCertificate tbsCert = BC_FACTORY.createTBSCertificate(certificate.getTBSCertificate());\n", "        if (signingAlgorithm != null) {\n", "            return;\n", "        }\n", "        if (tbsCert.getSubjectPublicKeyInfo().getAlgorithm().getParameters() != null) {\n", "            if (tbsCert.getSubjectPublicKeyInfo().getAlgorithm().getParameters().isNull()) {\n", "                this.signingAlgorithm = new AlgorithmIdentifier(\n", "                        tbsCert.getSubjectPublicKeyInfo().getAlgorithm().getAlgorithm().getId(),\n", "                        BC_FACTORY.createDERNull());\n", "                return;\n", "            }\n", "            this.signingAlgorithm = new AlgorithmIdentifier(\n", "                    tbsCert.getSubjectPublicKeyInfo().getAlgorithm().getAlgorithm().getId(),\n", "                    tbsCert.getSubjectPublicKeyInfo().getAlgorithm().getParameters().toASN1Primitive());\n", "            return;\n", "        }\n", "        this.signingAlgorithm = new AlgorithmIdentifier(\n", "                tbsCert.getSubjectPublicKeyInfo().getAlgorithm().getAlgorithm().getId());\n", "    }\n", "\n", "    /**\n", "     * Gets the certificate that is used to sign.\n", "     *\n", "     * @return the certificate that is used to sign.\n", "     */\n", "    public X509Certificate getSigningCertificate() {\n", "        return signerCertificate;\n", "    }\n", "\n", "    /**\n", "     * Sets the certificate that is used to sign a document and adds it to the signed attributes.\n", "     *\n", "     * @param certificate        the certificate that is used to sign\n", "     * @param digestAlgorithmOid the oid of the digest algorithm to be added to the signed attributes\n", "     *\n", "     * @throws CertificateEncodingException if an encoding error occurs.\n", "     * @throws NoSuchAlgorithmException     when the algorithm is unknown.\n", "     * @throws NoSuchProviderException      when provider is unknown.\n", "     */\n", "    public void setSigningCertificateAndAddToSignedAttributes(X509Certificate certificate, String digestAlgorithmOid)\n", "            throws CertificateEncodingException, NoSuchAlgorithmException, NoSuchProviderException {\n", "        setSigningCertificate(certificate);\n", "        addSignerCertificateToSignedAttributes(certificate, digestAlgorithmOid);\n", "    }\n", "\n", "    /**\n", "     * Adds a set of OCSP responses as signed attributes.\n", "     *\n", "     * @param ocspResponses a set of binary representations of OCSP responses.\n", "     */\n", "    public void setOcspResponses(Collection<byte[]> ocspResponses) {\n", "        if (signedAttributesReadOnly) {\n", "            throw new IllegalStateException(SignExceptionMessageConstant.CMS_SIGNERINFO_READONLY);\n", "        }\n", "        this.ocspResponses = Collections.unmodifiableCollection(ocspResponses);\n", "        setRevocationInfo();\n", "    }\n", "\n", "    /**\n", "     * Adds a set of CRL responses as signed attributes.\n", "     *\n", "     * @param crlResponses a set of binary representations of CRL responses.\n", "     */\n", "    public void setCrlResponses(Collection<byte[]> crlResponses) {\n", "        if (signedAttributesReadOnly) {\n", "            throw new IllegalStateException(SignExceptionMessageConstant.CMS_SIGNERINFO_READONLY);\n", "        }\n", "        this.crlResponses = Collections.unmodifiableCollection(crlResponses);\n", "        setRevocationInfo();\n", "    }\n", "\n", "    /**\n", "     * Adds the signer certificate to the signed attributes as a SigningCertificateV2 structure.\n", "     *\n", "     * @param cert               the certificate to add\n", "     * @param digestAlgorithmOid the digest algorithm oid that will be used\n", "     *\n", "     * @throws NoSuchAlgorithmException     when the algorithm is unknown.\n", "     * @throws NoSuchProviderException      when the security provider is not known.\n", "     * @throws CertificateEncodingException when there was a problem parsing th certificate.\n", "     */\n", "    public void addSignerCertificateToSignedAttributes(X509Certificate cert, String digestAlgorithmOid)\n", "            throws NoSuchAlgorithmException, NoSuchProviderException, CertificateEncodingException {\n", "        if (signedAttributesReadOnly) {\n", "            throw new IllegalStateException(SignExceptionMessageConstant.CMS_SIGNERINFO_READONLY);\n", "        }\n", "        MessageDigest md = DigestAlgorithms.getMessageDigestFromOid(digestAlgorithmOid,\n", "                BC_FACTORY.getProviderName());\n", "        IASN1EncodableVector certContents = BC_FACTORY.createASN1EncodableVector();\n", "        // don't add if it is the default value\n", "        if (!SecurityIDs.ID_SHA256.equals(digestAlgorithmOid)) {\n", "            IAlgorithmIdentifier algoId = BC_FACTORY.createAlgorithmIdentifier(\n", "                    BC_FACTORY.createASN1ObjectIdentifier(digestAlgorithmOid));\n", "            certContents.add(algoId);\n", "        }\n", "        byte[] dig = md.digest(cert.getEncoded());\n", "        certContents.add(BC_FACTORY.createDEROctetString(dig));\n", "        IASN1Sequence issuerName = BC_FACTORY.createASN1Sequence(\n", "                CertificateInfo.getIssuer(cert.getTBSCertificate()));\n", "        IDERTaggedObject issuerTagged = BC_FACTORY.createDERTaggedObject(true, 4, issuerName);\n", "        IDERSequence issuer = BC_FACTORY.createDERSequence(issuerTagged);\n", "        IASN1Integer serial = BC_FACTORY.createASN1Integer(cert.getSerialNumber());\n", "        IASN1EncodableVector v = BC_FACTORY.createASN1EncodableVector();\n", "        v.add(issuer);\n", "        v.add(serial);\n", "        IDERSequence issuerS = BC_FACTORY.createDERSequence(v);\n", "        certContents.add(issuerS);\n", "        IDERSequence certContentsSeq = BC_FACTORY.createDERSequence(certContents);\n", "        IDERSequence certContentsSeqSeq = BC_FACTORY.createDERSequence(certContentsSeq);\n", "        IDERSequence certContentsSeqSeqSeq = BC_FACTORY.createDERSequence(certContentsSeqSeq);\n", "        IDERSet certContentsSeqSeqSeqSet = BC_FACTORY.createDERSet(certContentsSeqSeqSeq);\n", "        CmsAttribute attribute = new CmsAttribute(SecurityIDs.ID_AA_SIGNING_CERTIFICATE_V2, certContentsSeqSeqSeqSet);\n", "\n", "        signedAttributes.add(attribute);\n", "    }\n", "\n", "    /**\n", "     * Sets the actual signature.\n", "     *\n", "     * @param signatureData a byte array containing the signature\n", "     */\n", "    public void setSignature(byte[] signatureData) {\n", "        this.signatureData = Arrays.copyOf(signatureData, signatureData.length);\n", "    }\n", "\n", "    /**\n", "     * Optional.\n", "     * Sets the OID and parameters of the algorithm that will be used to create the signature.\n", "     * This will be overwritten when setting the signing certificate.\n", "     *\n", "     * @param algorithm The OID and parameters of the algorithm that will be used to create the signature.\n", "     */\n", "    public void setSignatureAlgorithm(AlgorithmIdentifier algorithm) {\n", "        this.signingAlgorithm = algorithm;\n", "    }\n", "\n", "    /**\n", "     * Value 0 when no signerIdentifier is available.\n", "     * Value 1 when signerIdentifier is of type issuerAndSerialNumber.\n", "     * Value 3 when signerIdentifier is of type subjectKeyIdentifier.\n", "     *\n", "     * @return CMS version.\n", "     */\n", "    public int getCmsVersion() {\n", "        return 1;\n", "    }\n", "\n", "    /**\n", "     * Optional.\n", "     *\n", "     * <p>\n", "     * Attributes that should be part of the signed content\n", "     * optional, but it MUST be present if the content type of\n", "     * the EncapsulatedContentInfo value being signed is not id-data.\n", "     * In that case it must at least contain the following two attributes:\n", "     *\n", "     * <p>\n", "     * A content-type attribute having as its value the content type\n", "     * of the EncapsulatedContentInfo value being signed.  Section\n", "     * 11.1 defines the content-type attribute.  However, the\n", "     * content-type attribute MUST NOT be used as part of a\n", "     * countersignature unsigned attribute as defined in Section 11.4.\n", "     *\n", "     * <p>\n", "     * A message-digest attribute, having as its value the message\n", "     * digest of the content.  Section 11.2 defines the message-digest\n", "     * attribute.\n", "     *\n", "     * @return collection of the signed attributes.\n", "     */\n", "    public Collection<CmsAttribute> getSignedAttributes() {\n", "        return Collections.unmodifiableCollection(signedAttributes);\n", "    }\n", "\n", "    /**\n", "     * Adds a new attribute to the signed attributes.\n", "     * This become readonly after retrieving the serialized version {@link SignerInfo#serializeSignedAttributes()}.\n", "     *\n", "     * @param attribute the attribute to add\n", "     */\n", "    public void addSignedAttribute(CmsAttribute attribute) {\n", "        if (signedAttributesReadOnly) {\n", "            throw new IllegalStateException(SignExceptionMessageConstant.CMS_SIGNERINFO_READONLY);\n", "        }\n", "        signedAttributes.add(attribute);\n", "    }\n", "\n", "    /**\n", "     * Retrieves the optional unsigned attributes.\n", "     *\n", "     * @return the optional unsigned attributes.\n", "     */\n", "    public Collection<CmsAttribute> getUnSignedAttributes() {\n", "        return Collections.unmodifiableCollection(unSignedAttributes);\n", "    }\n", "\n", "    /**\n", "     * Optional.\n", "     *\n", "     * <p>\n", "     * Adds attribute that should not or can not be part of the signed content.\n", "     *\n", "     * @param attribute the attribute to add\n", "     */\n", "    public void addUnSignedAttribute(CmsAttribute attribute) {\n", "        unSignedAttributes.add(attribute);\n", "    }\n", "\n", "    /**\n", "     * Retrieves the encoded signed attributes of the signer info.\n", "     * This makes the signed attributes read only.\n", "     *\n", "     * @return the encoded signed attributes of the signer info.\n", "     *\n", "     * @throws IOException if issues occur during ASN1 objects creation.\n", "     */\n", "    public byte[] serializeSignedAttributes() throws IOException {\n", "        if (!signedAttributesReadOnly) {\n", "            IDERSet derView = getAttributesAsDERSet(signedAttributes);\n", "            serializedSignedAttributes = derView.getEncoded(BC_FACTORY.createASN1Encoding().getDer());\n", "            signedAttributesReadOnly = true;\n", "        }\n", "        return Arrays.copyOf(serializedSignedAttributes, serializedSignedAttributes.length);\n", "    }\n", "\n", "    /**\n", "     * Sets the signed attributes from a serialized version.\n", "     * This makes the signed attributes read only.\n", "     *\n", "     * @param serializedSignedAttributes the encoded signed attributes.\n", "     */\n", "    public final void setSerializedSignedAttributes(byte[] serializedSignedAttributes) {\n", "        if (signedAttributesReadOnly) {\n", "            throw new IllegalStateException(SignExceptionMessageConstant.CMS_SIGNERINFO_READONLY);\n", "        }\n", "        this.signedAttributesReadOnly = true;\n", "        this.serializedSignedAttributes = Arrays.copyOf(serializedSignedAttributes, serializedSignedAttributes.length);\n", "        try {\n", "            signedAttributes.clear();\n", "            this.signedAttributes.addAll(\n", "                    processAttributeSet(BC_FACTORY.createASN1Primitive(serializedSignedAttributes)));\n", "        } catch (IOException e) {\n", "            throw new PdfException(e);\n", "        }\n", "    }\n", "\n", "    /**\n", "     * Calculates an estimate size for the SignerInfo structure.\n", "     * This takes into account the values added including the signature, but does not account for unset items like\n", "     * a timestamp response added after actual signing.\n", "     *\n", "     * @return the estimated size of the structure.\n", "     *\n", "     * @throws IOException                  if issues occur during ASN1 objects creation.\n", "     * @throws CertificateEncodingException if issues occur during processing of certificates.\n", "     */\n", "    public long getEstimatedSize() throws IOException, CertificateEncodingException {\n", "        IDERSequence derView = getAsDerSequence(true);\n", "        byte[] temp = derView.getEncoded(BC_FACTORY.createASN1Encoding().getDer());\n", "        return temp.length;\n", "    }\n", "\n", "    /**\n", "     * Serializes the SignerInfo structure and makes the signed attributes readonly.\n", "     *\n", "     * @return the encoded SignerInfo structure.\n", "     *\n", "     * @throws CertificateEncodingException if issues occur during processing of certificates.\n", "     */\n", "    public IDERSequence getAsDerSequence() throws CertificateEncodingException {\n", "        return getAsDerSequence(false);\n", "    }\n", "\n", "    /**\n", "     * Serializes the SignerInfo structure and makes the signed attributes readonly.\n", "     * With the possibility to skip making the signed attributes read only for estimation purposes.\n", "     *\n", "     * @param estimationRun set to true to not make signed attributes read only\n", "     *\n", "     * @return the encoded SignerInfo structure.\n", "     *\n", "     * @throws CertificateEncodingException if issues occur during processing of certificates.\n", "     */\n", "    IDERSequence getAsDerSequence(boolean estimationRun) throws CertificateEncodingException {\n", "        IASN1EncodableVector signerInfoV = BC_FACTORY.createASN1EncodableVector();\n", "        // version\n", "        signerInfoV.add(BC_FACTORY.createASN1Integer(getCmsVersion()));\n", "        // sid\n", "        IASN1EncodableVector issuerAndSerialNumberV = BC_FACTORY.createASN1EncodableVector();\n", "        issuerAndSerialNumberV.add(CertificateInfo.getIssuer(signerCertificate.getTBSCertificate()));\n", "        issuerAndSerialNumberV.add(BC_FACTORY.createASN1Integer(signerCertificate.getSerialNumber()));\n", "        signerInfoV.add(BC_FACTORY.createDERSequence(issuerAndSerialNumberV));\n", "        // digest algorithm\n", "        IASN1EncodableVector digestalgorithmV = BC_FACTORY.createASN1EncodableVector();\n", "\n", "        digestalgorithmV.add(BC_FACTORY.createASN1ObjectIdentifier(this.digestAlgorithm.getAlgorithmOid()));\n", "        digestalgorithmV.addOptional(digestAlgorithm.getParameters());\n", "\n", "        signerInfoV.add(BC_FACTORY.createDERSequence(digestalgorithmV));\n", "        // signed attributes\n", "        if (!signedAttributes.isEmpty() || signedAttributesReadOnly) {\n", "            if (estimationRun || !signedAttributesReadOnly) {\n", "                signerInfoV.add(BC_FACTORY.createDERTaggedObject(false, 0, getAttributesAsDERSet(signedAttributes)));\n", "            } else {\n", "                try (IASN1InputStream saIS = BC_FACTORY.createASN1InputStream(serializedSignedAttributes)) {\n", "                    signerInfoV.add(BC_FACTORY.createDERTaggedObject(false, 0, saIS.readObject()));\n", "                } catch (IOException e) {\n", "                    throw new PdfException(e);\n", "                }\n", "            }\n", "        }\n", "        // signatureAlgorithm\n", "        if (signingAlgorithm != null) {\n", "            IASN1EncodableVector signatureAlgorithmV = BC_FACTORY.createASN1EncodableVector();\n", "            signatureAlgorithmV.add(BC_FACTORY.createASN1ObjectIdentifier(signingAlgorithm.getAlgorithmOid()));\n", "            signatureAlgorithmV.addOptional(signingAlgorithm.getParameters());\n", "            signerInfoV.add(BC_FACTORY.createDERSequence(signatureAlgorithmV));\n", "        }\n", "        // signatureValue\n", "        byte[] workingSignatureData;\n", "        if (signatureData == null) {\n", "            workingSignatureData = new byte[DEFAULT_SIGNATURE_SIZE];\n", "        } else {\n", "            workingSignatureData = signatureData;\n", "        }\n", "        IASN1OctetString signatureDataOS = BC_FACTORY.createDEROctetString(workingSignatureData);\n", "        signerInfoV.add(signatureDataOS);\n", "        // UnsignedAttributes\n", "        if (!unSignedAttributes.isEmpty()) {\n", "            signerInfoV.add(BC_FACTORY.createDERTaggedObject(false, 1, getAttributesAsDERSet(unSignedAttributes)));\n", "        }\n", "\n", "        return BC_FACTORY.createDERSequence(signerInfoV);\n", "    }\n", "\n", "    private void processSubjectKeyIdentifierSignerCertificate(IASN1Encodable asnStruct,\n", "                                                              Collection<X509Certificate> certificates)\n", "            throws IOException {\n", "        IASN1OctetString subjectKeyIdentifierOs = BC_FACTORY.createASN1OctetString(\n", "                BC_FACTORY.createASN1TaggedObject(asnStruct).getObject());\n", "\n", "        try (IASN1InputStream aIn = BC_FACTORY.createASN1InputStream(\n", "                new ByteArrayInputStream(subjectKeyIdentifierOs.getOctets()))) {\n", "            IASN1Primitive subjectKeyIdentifier = aIn.readObject();\n", "\n", "            for (X509Certificate certificate : certificates) {\n", "                IASN1Primitive ski = CertificateUtil.getExtensionValue(certificate,\n", "                        OID.X509Extensions.SUBJECT_KEY_IDENTIFIER);\n", "                if (ski.equals(subjectKeyIdentifier)) {\n", "                    this.signerCertificate = certificate;\n", "                    return;\n", "                }\n", "            }\n", "        }\n", "        throw new PdfException(SignExceptionMessageConstant.CMS_CERTIFICATE_NOT_FOUND);\n", "    }\n", "\n", "    private void processIssuerAndSerialNumberSignerCertificate(IASN1Encodable asnStruct,\n", "                                                               Collection<X509Certificate> certificates) {\n", "        IASN1Sequence signIdSeq = BC_FACTORY.createASN1Sequence(asnStruct);\n", "        IASN1Integer serial = BC_FACTORY.createASN1Integer(signIdSeq.getObjectAt(1));\n", "        for (X509Certificate certificate : certificates) {\n", "            if (certificate.getSerialNumber().equals(serial.getValue())) {\n", "                this.signerCertificate = certificate;\n", "                break;\n", "            }\n", "        }\n", "        if (signerCertificate == null) {\n", "            throw new PdfException(SignExceptionMessageConstant.CMS_CERTIFICATE_NOT_FOUND);\n", "        }\n", "    }\n", "\n", "    private static Collection<CmsAttribute> processAttributeSet(IASN1Encodable asnStruct) {\n", "        IASN1Set usaSet = BC_FACTORY.createASN1Set(asnStruct);\n", "        Collection<CmsAttribute> attributes = new ArrayList<>(usaSet.size());\n", "        for (int i = 0; i < usaSet.size(); i++) {\n", "            IASN1Sequence attrSeq = BC_FACTORY.createASN1Sequence(usaSet.getObjectAt(i));\n", "            IASN1ObjectIdentifier attrType = BC_FACTORY.createASN1ObjectIdentifier(attrSeq.getObjectAt(0));\n", "            IASN1Primitive attrVal = BC_FACTORY.createASN1Primitive(attrSeq.getObjectAt(1));\n", "            attributes.add(new CmsAttribute(attrType.getId(), attrVal));\n", "        }\n", "        return attributes;\n", "    }\n", "\n", "    private void setRevocationInfo() {\n", "        signedAttributes.removeIf(a -> SecurityIDs.ID_ADBE_REVOCATION.equals(a.getType()));\n", "\n", "        if (containsRevocationData()) {\n", "\n", "            IASN1EncodableVector revocationV = BC_FACTORY.createASN1EncodableVector();\n", "\n", "            createCRLStructure(revocationV);\n", "            createOCPSStructure(revocationV);\n", "\n", "            CmsAttribute digestAttribute =\n", "                    new CmsAttribute(SecurityIDs.ID_ADBE_REVOCATION,\n", "                            BC_FACTORY.createDERSequence(revocationV));\n", "            signedAttributes.add(digestAttribute);\n", "        }\n", "    }\n", "\n", "    private void createCRLStructure(IASN1EncodableVector revocationV) {\n", "        if (crlResponses != null && !crlResponses.isEmpty()) {\n", "            IASN1EncodableVector v2 = BC_FACTORY.createASN1EncodableVector();\n", "            for (byte[] bCrl : crlResponses) {\n", "                if (bCrl == null) {\n", "                    continue;\n", "                }\n", "                try (IASN1InputStream t =\n", "                             BC_FACTORY.createASN1InputStream(new ByteArrayInputStream(bCrl))) {\n", "                    v2.add(t.readObject());\n", "                } catch (IOException e) {\n", "                    throw new PdfException(e);\n", "                }\n", "            }\n", "            revocationV.add(BC_FACTORY.createDERTaggedObject(\n", "                    true, 0, BC_FACTORY.createDERSequence(v2)));\n", "        }\n", "    }\n", "\n", "    private void createOCPSStructure(IASN1EncodableVector revocationV) {\n", "        if (ocspResponses != null && !ocspResponses.isEmpty()) {\n", "            IASN1EncodableVector vo1 = BC_FACTORY.createASN1EncodableVector();\n", "            for (byte[] ocspBytes : ocspResponses) {\n", "                IDEROctetString doctet = BC_FACTORY.createDEROctetString(ocspBytes);\n", "                IASN1EncodableVector v2 = BC_FACTORY.createASN1EncodableVector();\n", "                IOCSPObjectIdentifiers objectIdentifiers = BC_FACTORY.createOCSPObjectIdentifiers();\n", "                v2.add(objectIdentifiers.getIdPkixOcspBasic());\n", "                v2.add(doctet);\n", "                IASN1Enumerated den = BC_FACTORY.createASN1Enumerated(0);\n", "                IASN1EncodableVector v3 = BC_FACTORY.createASN1EncodableVector();\n", "                v3.add(den);\n", "                v3.add(BC_FACTORY.createDERTaggedObject(\n", "                        true, 0, BC_FACTORY.createDERSequence(v2)));\n", "                vo1.add(BC_FACTORY.createDERSequence(v3));\n", "            }\n", "            revocationV.add(BC_FACTORY.createDERTaggedObject(\n", "                    true, 1, BC_FACTORY.createDERSequence(vo1)));\n", "        }\n", "    }\n", "\n", "    private boolean containsRevocationData() {\n", "        return (ocspResponses != null && !ocspResponses.isEmpty()) ||\n", "                (crlResponses != null && !crlResponses.isEmpty());\n", "    }\n", "\n", "    private static IDERSet getAttributesAsDERSet(Collection<CmsAttribute> attributeSet) {\n", "        IASN1EncodableVector attributes = BC_FACTORY.createASN1EncodableVector();\n", "        for (CmsAttribute attr : attributeSet) {\n", "            IASN1EncodableVector v = BC_FACTORY.createASN1EncodableVector();\n", "            v.add(BC_FACTORY.createASN1ObjectIdentifier(attr.getType()));\n", "            v.add(attr.getValue());\n", "            attributes.add(BC_FACTORY.createDERSequence(v));\n", "        }\n", "        return BC_FACTORY.createDERSet(attributes);\n", "    }\n", "}\n"], "test_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.signatures.cms;\n", "\n", "import com.itextpdf.bouncycastleconnector.BouncyCastleFactoryCreator;\n", "import com.itextpdf.commons.bouncycastle.IBouncyCastleFactory;\n", "import com.itextpdf.commons.bouncycastle.asn1.IASN1Encodable;\n", "import com.itextpdf.commons.bouncycastle.asn1.IASN1EncodableVector;\n", "import com.itextpdf.commons.bouncycastle.asn1.IASN1InputStream;\n", "import com.itextpdf.commons.bouncycastle.asn1.IASN1Primitive;\n", "import com.itextpdf.commons.bouncycastle.asn1.IDERSequence;\n", "import com.itextpdf.commons.bouncycastle.asn1.util.IASN1Dump;\n", "import com.itextpdf.commons.bouncycastle.operator.AbstractOperatorCreationException;\n", "import com.itextpdf.commons.bouncycastle.pkcs.AbstractPKCSException;\n", "import com.itextpdf.commons.utils.Base64;\n", "import com.itextpdf.commons.utils.MessageFormatUtil;\n", "import com.itextpdf.kernel.exceptions.PdfException;\n", "import com.itextpdf.signatures.SecurityIDs;\n", "import com.itextpdf.signatures.exceptions.SignExceptionMessageConstant;\n", "import com.itextpdf.signatures.testutils.PemFileHelper;\n", "import com.itextpdf.signatures.testutils.SignTestPortUtil;\n", "import com.itextpdf.signatures.testutils.builder.TestCrlBuilder;\n", "import com.itextpdf.test.ExtendedITextTest;\n", "import com.itextpdf.test.annotations.type.BouncyCastleUnitTest;\n", "import org.junit.Assert;\n", "import org.junit.Before;\n", "import org.junit.BeforeClass;\n", "import org.junit.Test;\n", "import org.junit.experimental.categories.Category;\n", "\n", "import java.io.IOException;\n", "import java.nio.charset.StandardCharsets;\n", "import java.security.NoSuchAlgorithmException;\n", "import java.security.NoSuchProviderException;\n", "import java.security.PrivateKey;\n", "import java.security.Security;\n", "import java.security.cert.Certificate;\n", "import java.security.cert.CertificateEncodingException;\n", "import java.security.cert.CertificateException;\n", "import java.security.cert.X509Certificate;\n", "import java.util.ArrayList;\n", "import java.util.Collections;\n", "import java.util.List;\n", "import java.util.Objects;\n", "\n", "@Category(BouncyCastleUnitTest.class)\n", "public class SignerInfoTest extends ExtendedITextTest {\n", "\n", "    private static final IBouncyCastleFactory FACTORY = BouncyCastleFactoryCreator.getFactory();\n", "    private static final String CERTS_SRC = \"./src/test/resources/com/itextpdf/signatures/certs/\";\n", "    private static final char[] PASSWORD = \"testpassphrase\".toCharArray();\n", "    private static final IASN1Dump DUMP = FACTORY.createASN1Dump();\n", "\n", "    private static final byte[] MESSAGE_DIGEST =\n", "            CMSTestHelper.MESSAGE_DIGEST_STRING.getBytes(StandardCharsets.UTF_8);\n", "    private static final byte[] EXPECTEDRESULT_1 = Base64.decode(CMSTestHelper.EXPECTEDRESULT_1);\n", "    private static final byte[] EXPECTEDRESULT_2 = Base64.decode(CMSTestHelper.EXPECTEDRESULT_2);\n", "    private static final byte[] EXPECTEDRESULT_3 = Base64.decode(CMSTestHelper.EXPECTEDRESULT_3);\n", "    private static final byte[] EXPECTEDRESULT_4 = Base64.decode(CMSTestHelper.EXPECTEDRESULT_4);\n", "    private static final byte[] EXPECTEDRESULT_5 = Base64.decode(CMSTestHelper.EXPECTEDRESULT_5);\n", "\n", "    private static final List<X509Certificate> chain = new ArrayList<>();\n", "\n", "    static {\n", "        Certificate[] certChain = new Certificate[0];\n", "        try {\n", "            certChain = PemFileHelper.readFirstChain(CERTS_SRC + \"signCertRsaWithChain.pem\");\n", "        } catch (Exception e) {\n", "            // Ignore.\n", "        }\n", "        for (Certificate cert : certChain) {\n", "            chain.add((X509Certificate) cert);\n", "        }\n", "    }\n", "\n", "    private X509Certificate signCert;\n", "    private List<byte[]> testCrlResponse;\n", "\n", "    @BeforeClass\n", "    public static void before() {\n", "        Security.addProvider(FACTORY.getProvider());\n", "    }\n", "\n", "    @Before\n", "    public void init()\n", "            throws IOException, CertificateException, AbstractPKCSException, AbstractOperatorCreationException {\n", "        signCert = chain.get(0);\n", "        PrivateKey caPrivateKey = PemFileHelper.readFirstKey(CERTS_SRC + \"signCertRsaWithChain.pem\", PASSWORD);\n", "        TestCrlBuilder testCrlBuilder = new TestCrlBuilder(signCert, caPrivateKey);\n", "        testCrlBuilder.addCrlEntry(signCert, FACTORY.createCRLReason().getKeyCompromise());\n", "        testCrlResponse = Collections.singletonList(testCrlBuilder.makeCrl());\n", "    }\n", "\n", "    @Test\n", "    public void testSignedAttributesReadonlyModeActivatedByGettingSerializedData() throws IOException, CertificateEncodingException {\n", "        SignerInfo si = new SignerInfo();\n", "        si.setSignatureAlgorithm(new AlgorithmIdentifier(SecurityIDs.ID_RSA));\n", "        si.setSigningCertificate(signCert);\n", "        ArrayList<byte[]> fakeOcspREsponses = new ArrayList<>();\n", "        fakeOcspREsponses.add(Base64.decode(CMSTestHelper.BASE64_OCSP_RESPONSE));\n", "        si.setMessageDigest(new byte[1024]);\n", "        si.setOcspResponses(fakeOcspREsponses);\n", "        si.setCrlResponses(testCrlResponse);\n", "        si.setDigestAlgorithm(new AlgorithmIdentifier(SecurityIDs.ID_SHA512));\n", "        si.serializeSignedAttributes();\n", "\n", "        Assert.assertThrows(IllegalStateException.class, () -> si.setSerializedSignedAttributes(new byte[1235]));\n", "        Assert.assertThrows(IllegalStateException.class,\n", "                () -> si.setCrlResponses(testCrlResponse));\n", "        Assert.assertThrows(IllegalStateException.class, () -> si.setOcspResponses(fakeOcspREsponses));\n", "        Assert.assertThrows(IllegalStateException.class, () -> si.setMessageDigest(new byte[1024]));\n", "\n", "        CmsAttribute attribute = new CmsAttribute(\"\", FACTORY.createASN1Integer(1));\n", "        Assert.assertThrows(IllegalStateException.class,\n", "                () -> si.addSignedAttribute(attribute));\n", "        Assert.assertThrows(IllegalStateException.class, () ->\n", "                si.addSignerCertificateToSignedAttributes(signCert, SecurityIDs.ID_SHA512));\n", "    }\n", "\n", "    @Test\n", "    public void testGetSerializedBasicSignedAttributes() throws IOException, CertificateEncodingException {\n", "        SignerInfo si = new SignerInfo();\n", "        si.setSignatureAlgorithm(new AlgorithmIdentifier(SecurityIDs.ID_RSASSA_PSS));\n", "        si.setSigningCertificate(signCert);\n", "        si.setMessageDigest(MESSAGE_DIGEST);\n", "        si.setDigestAlgorithm(new AlgorithmIdentifier(SecurityIDs.ID_SHA512));\n", "        byte[] serRes = si.serializeSignedAttributes();\n", "        Assert.assertEquals(serializedAsString(EXPECTEDRESULT_1), serializedAsString(serRes));\n", "    }\n", "\n", "    @Test\n", "    public void testGetSerializedExtendedSignedAttributes() throws IOException, CertificateEncodingException {\n", "        SignerInfo si = new SignerInfo();\n", "        si.setSignatureAlgorithm(new AlgorithmIdentifier(SecurityIDs.ID_RSASSA_PSS));\n", "        si.setSigningCertificate(signCert);\n", "        ArrayList<byte[]> fakeOcspREsponses = new ArrayList<>();\n", "        fakeOcspREsponses.add(Base64.decode(CMSTestHelper.BASE64_OCSP_RESPONSE));\n", "        si.setOcspResponses(fakeOcspREsponses);\n", "        si.setCrlResponses(testCrlResponse);\n", "        si.setMessageDigest(new byte[1024]);\n", "        si.setDigestAlgorithm(new AlgorithmIdentifier(SecurityIDs.ID_SHA512));\n", "        byte[] serRes = si.serializeSignedAttributes();\n", "        Assert.assertEquals(serializedAsString(EXPECTEDRESULT_2), serializedAsString(serRes));\n", "    }\n", "\n", "    @Test\n", "    public void testGetSerializedExtendedSignedAttributesCrlOnly() throws IOException, CertificateEncodingException {\n", "        SignerInfo si = new SignerInfo();\n", "        si.setSignatureAlgorithm(new AlgorithmIdentifier(SecurityIDs.ID_RSASSA_PSS));\n", "        si.setSigningCertificate(signCert);\n", "        si.setCrlResponses(testCrlResponse);\n", "        si.setMessageDigest(new byte[1024]);\n", "        si.setDigestAlgorithm(new AlgorithmIdentifier(SecurityIDs.ID_SHA512));\n", "        byte[] serRes = si.serializeSignedAttributes();\n", "        Assert.assertEquals(serializedAsString(EXPECTEDRESULT_5), serializedAsString(serRes));\n", "    }\n", "\n", "    @Test\n", "    public void testAddSignedAttribute() {\n", "        SignerInfo si = new SignerInfo();\n", "        Assert.assertFalse(si.getSignedAttributes().stream().anyMatch(a ->\n", "                Objects.equals(a.getType(), SecurityIDs.ID_SIGNING_TIME)));\n", "        CmsAttribute attrib = new CmsAttribute(SecurityIDs.ID_SIGNING_TIME, FACTORY.createNullASN1Set());\n", "        si.addSignedAttribute(attrib);\n", "        Assert.assertTrue(si.getSignedAttributes().stream().anyMatch(a ->\n", "                Objects.equals(a.getType(), SecurityIDs.ID_SIGNING_TIME)));\n", "    }\n", "\n", "    @Test\n", "    public void testAddUnsignedAttribute() {\n", "        SignerInfo si = new SignerInfo();\n", "        CmsAttribute attrib = new CmsAttribute(SecurityIDs.ID_SIGNING_TIME, FACTORY.createNullASN1Set());\n", "        si.addUnSignedAttribute(attrib);\n", "        Assert.assertEquals(SecurityIDs.ID_SIGNING_TIME,\n", "                SignTestPortUtil.<CmsAttribute>getFirstElement(si.getUnSignedAttributes()).getType());\n", "    }\n", "\n", "    @Test\n", "    public void testGetSerializedSignedAttributesWithCertificateId() throws CertificateEncodingException,\n", "            NoSuchAlgorithmException, NoSuchProviderException, IOException {\n", "        SignerInfo si = new SignerInfo();\n", "        si.setSignatureAlgorithm(new AlgorithmIdentifier(SecurityIDs.ID_RSASSA_PSS));\n", "        si.setSigningCertificate(signCert);\n", "        si.setMessageDigest(new byte[1024]);\n", "        si.setDigestAlgorithm(new AlgorithmIdentifier(SecurityIDs.ID_SHA512));\n", "        si.addSignerCertificateToSignedAttributes(signCert, \"2.16.840.1.101.3.4.2.3\");\n", "        byte[] serRes = si.serializeSignedAttributes();\n", "        Assert.assertEquals(serializedAsString(EXPECTEDRESULT_3), serializedAsString(serRes));\n", "    }\n", "\n", "    @Test\n", "    public void testGetSerializedSignedAttributesWithCertificateIdTroughCertSetter()\n", "            throws CertificateEncodingException, NoSuchAlgorithmException, NoSuchProviderException, IOException {\n", "        SignerInfo si = new SignerInfo();\n", "        si.setSignatureAlgorithm(new AlgorithmIdentifier(SecurityIDs.ID_RSASSA_PSS));\n", "        si.setSigningCertificateAndAddToSignedAttributes(signCert, \"2.16.840.1.101.3.4.2.3\");\n", "        si.setMessageDigest(new byte[1024]);\n", "        si.setDigestAlgorithm(new AlgorithmIdentifier(SecurityIDs.ID_SHA512));\n", "        byte[] serRes = si.serializeSignedAttributes();\n", "        Assert.assertEquals(serializedAsString(EXPECTEDRESULT_3), serializedAsString(serRes));\n", "    }\n", "\n", "    @Test\n", "    public void testGetAsDerSequence() throws CertificateEncodingException, NoSuchAlgorithmException,\n", "            NoSuchProviderException, IOException {\n", "        SignerInfo si = new SignerInfo();\n", "\n", "        si.addUnSignedAttribute(new CmsAttribute(SecurityIDs.ID_SIGNING_TIME, FACTORY.\n", "                createDERSet(FACTORY.createASN1Integer(123456))));\n", "\n", "        si.setSigningCertificateAndAddToSignedAttributes(signCert, \"2.16.840.1.101.3.4.2.3\");\n", "        si.setSignatureAlgorithm(new AlgorithmIdentifier(SecurityIDs.ID_RSASSA_PSS));\n", "        si.setMessageDigest(new byte[1024]);\n", "        si.setDigestAlgorithm(new AlgorithmIdentifier(SecurityIDs.ID_SHA512));\n", "        si.setSignature(new byte[512]);\n", "        IDERSequence res = si.getAsDerSequence();\n", "        Assert.assertEquals(serializedAsString(EXPECTEDRESULT_4),\n", "                serializedAsString(res.getEncoded()));\n", "    }\n", "\n", "    @Test\n", "    public void testEstimatedSizeWithSignature() throws CertificateEncodingException, NoSuchAlgorithmException,\n", "            NoSuchProviderException, IOException {\n", "        SignerInfo si = new SignerInfo();\n", "\n", "        si.addUnSignedAttribute(new CmsAttribute(SecurityIDs.ID_SIGNING_TIME, FACTORY.\n", "                createDERSet(FACTORY.createASN1Integer(123456))));\n", "\n", "        si.setSignatureAlgorithm(new AlgorithmIdentifier(SecurityIDs.ID_RSASSA_PSS));\n", "        si.setSigningCertificateAndAddToSignedAttributes(signCert, \"2.16.840.1.101.3.4.2.3\");\n", "        si.setMessageDigest(new byte[1024]);\n", "        si.setDigestAlgorithm(new AlgorithmIdentifier(SecurityIDs.ID_SHA512));\n", "        si.setSignature(new byte[512]);\n", "\n", "        long res = si.getEstimatedSize();\n", "\n", "        Assert.assertEquals(1973, res);\n", "    }\n", "\n", "    @Test\n", "    public void testSignedAttributesSerializationRoundTrip() throws CertificateEncodingException,\n", "            NoSuchAlgorithmException, IOException, NoSuchProviderException {\n", "        SignerInfo si = new SignerInfo();\n", "\n", "        si.setSignatureAlgorithm(new AlgorithmIdentifier(SecurityIDs.ID_RSASSA_PSS));\n", "        si.setSigningCertificateAndAddToSignedAttributes(signCert, \"2.16.840.1.101.3.4.2.3\");\n", "        si.setMessageDigest(new byte[1024]);\n", "        si.setDigestAlgorithm(new AlgorithmIdentifier(SecurityIDs.ID_SHA512));\n", "        si.setSignature(new byte[512]);\n", "        byte[] serialized = si.serializeSignedAttributes();\n", "\n", "        SignerInfo si2 = new SignerInfo();\n", "        si2.setSerializedSignedAttributes(serialized);\n", "\n", "        Assert.assertEquals(si.getSignedAttributes().size(), si2.getSignedAttributes().size());\n", "        for (CmsAttribute attribute : si.getSignedAttributes()) {\n", "            Assert.assertTrue(MessageFormatUtil.format(\"Expected to find an attribute with id {0} and value {1}\",\n", "                    attribute.getType(), attribute.getValue().toString()), si2.getSignedAttributes().stream()\n", "                    .anyMatch(a -> a.getType().equals(attribute.getType()) && a.getValue().equals(attribute.getValue())));\n", "        }\n", "    }\n", "\n", "    @Test\n", "    public void testEstimatedSizeEstimatedSignature() throws CertificateEncodingException, NoSuchAlgorithmException,\n", "            NoSuchProviderException, IOException {\n", "        SignerInfo si = new SignerInfo();\n", "\n", "        si.addUnSignedAttribute(new CmsAttribute(SecurityIDs.ID_SIGNING_TIME, FACTORY.\n", "                createDERSet(FACTORY.createASN1Integer(123456))));\n", "        si.setSignatureAlgorithm(new AlgorithmIdentifier(SecurityIDs.ID_RSASSA_PSS));\n", "        si.setSigningCertificateAndAddToSignedAttributes(signCert, \"2.16.840.1.101.3.4.2.3\");\n", "        si.setMessageDigest(new byte[1024]);\n", "        si.setDigestAlgorithm(new AlgorithmIdentifier(SecurityIDs.ID_SHA512));\n", "\n", "        long res = si.getEstimatedSize();\n", "\n", "        Assert.assertEquals(2485, res);\n", "    }\n", "\n", "    @Test\n", "    public void testSerializeAndDeserializeSignerInfo() throws CertificateEncodingException, NoSuchAlgorithmException,\n", "            NoSuchProviderException, IOException {\n", "        SignerInfo si = new SignerInfo();\n", "\n", "        si.addUnSignedAttribute(new CmsAttribute(SecurityIDs.ID_SIGNING_TIME, FACTORY.\n", "                createDERSet(FACTORY.createASN1Integer(123456))));\n", "        si.setSignatureAlgorithm(new AlgorithmIdentifier(SecurityIDs.ID_RSASSA_PSS));\n", "        si.setSigningCertificateAndAddToSignedAttributes(signCert, \"2.16.840.1.101.3.4.2.3\");\n", "        si.setMessageDigest(new byte[1024]);\n", "        si.setDigestAlgorithm(new AlgorithmIdentifier(SecurityIDs.ID_SHA512));\n", "\n", "        IDERSequence encoded = si.getAsDerSequence(false);\n", "\n", "        SignerInfo si2 = new SignerInfo(encoded, Collections.singletonList(signCert));\n", "\n", "        Assert.assertEquals(si.getSignedAttributes().size(), si2.getSignedAttributes().size());\n", "    }\n", "\n", "\n", "    @Test\n", "    public void testSerializeAndDeserializeSignedAttributes() throws CertificateEncodingException,\n", "            NoSuchAlgorithmException, NoSuchProviderException, IOException {\n", "        SignerInfo si = new SignerInfo();\n", "\n", "        si.addSignerCertificateToSignedAttributes(signCert, SecurityIDs.ID_SHA256);\n", "        si.setMessageDigest(new byte[20]);\n", "\n", "        byte[] attribs = si.serializeSignedAttributes();\n", "\n", "        SignerInfo si2 = new SignerInfo();\n", "        si2.setSerializedSignedAttributes(attribs);\n", "\n", "        Assert.assertEquals(si.getSignedAttributes().size(), si2.getSignedAttributes().size());\n", "    }\n", "\n", "    @Test\n", "    public void testDeserializationMissingSignedAttributes() throws IOException {\n", "        IASN1Encodable testData = FACTORY.createASN1Primitive(\n", "                Base64.decode(CMSTestHelper.B64_ENCODED_NO_SIGNED_ATTRIBS));\n", "        SignerInfo si = new SignerInfo(testData, chain);\n", "        Assert.assertEquals(0, si.getSignedAttributes().size());\n", "    }\n", "\n", "    @Test\n", "    public void testMissingSignerCertificate() throws IOException {\n", "        IASN1Encodable testData = FACTORY.createASN1Primitive(\n", "                Base64.decode(CMSTestHelper.B64_ENCODED_NO_SIGNED_ATTRIBS));\n", "        Exception e = Assert.assertThrows(PdfException.class, () ->\n", "                new SignerInfo(testData, chain.subList(1, chain.size() - 1)));\n", "        Assert.assertEquals(SignExceptionMessageConstant.CMS_CERTIFICATE_NOT_FOUND, e.getMessage());\n", "    }\n", "\n", "    @Test\n", "    public void testSidWithSubjectKeyIdentifier() throws IOException {\n", "        IASN1Encodable testData = FACTORY.createASN1Primitive(\n", "                Base64.decode(CMSTestHelper.B64_ENCODED_SUBJECTKEY_IDENTIFIER));\n", "        SignerInfo si = new SignerInfo(testData, chain);\n", "        Assert.assertEquals(signCert.getSerialNumber(), si.getSigningCertificate().getSerialNumber());\n", "    }\n", "\n", "    @Test\n", "    public void testMissingCertificateWithSubjectKeyIdentifier() throws IOException {\n", "        IASN1Encodable testData = FACTORY.createASN1Primitive(\n", "                Base64.decode(CMSTestHelper.B64_ENCODED_SUBJECTKEY_IDENTIFIER));\n", "        Exception e = Assert.assertThrows(PdfException.class, () ->\n", "                new SignerInfo(testData, chain.subList(1, chain.size() - 1)));\n", "        Assert.assertEquals(SignExceptionMessageConstant.CMS_CERTIFICATE_NOT_FOUND, e.getMessage());\n", "    }\n", "\n", "    @Test\n", "    public void testInvalidStructure() {\n", "        IASN1EncodableVector v = FACTORY.createASN1EncodableVector();\n", "        v.add(FACTORY.createASN1ObjectIdentifier(\"1.2.840.113549.1.7.2\"));\n", "        //should be tagged with 0\n", "        v.add(FACTORY.createDERSequence(FACTORY.createASN1EncodableVector()));\n", "        IASN1Encodable testData = FACTORY.createASN1Sequence(v);\n", "        Exception e = Assert.assertThrows(PdfException.class, () ->\n", "                new SignerInfo(testData, chain.subList(1, chain.size() - 1)));\n", "        Assert.assertEquals(SignExceptionMessageConstant.CMS_INVALID_CONTAINER_STRUCTURE, e.getMessage());\n", "    }\n", "\n", "    private String toUnixStringEnding(String in) {\n", "        return in.replace(\"\\r\\n\", \"\\n\");\n", "    }\n", "\n", "    private String serializedAsString(byte[] serialized) throws IOException {\n", "        IASN1InputStream is = FACTORY.createASN1InputStream(serialized);\n", "        IASN1Primitive obj1 = is.readObject();\n", "        return toUnixStringEnding(DUMP.dumpAsString(obj1, true));\n", "    }\n", "}\n"], "method_lines_dic": {"SignerInfo::::getDigestAlgorithm()": [148, 150], "SignerInfo::::setDigestAlgorithm(com.itextpdf.signatures.cms.AlgorithmIdentifier)": [157, 159], "SignerInfo::::setMessageDigest(byte[])": [166, 173], "SignerInfo::::setSigningCertificate(java.security.cert.X509Certificate)": [181, 202], "SignerInfo::::getSigningCertificate()": [209, 211], "SignerInfo::::setSigningCertificateAndAddToSignedAttributes(java.security.cert.X509Certificate,java.lang.String)": [223, 227], "SignerInfo::::setOcspResponses(java.util.Collection<byte[]>)": [234, 240], "SignerInfo::::setCrlResponses(java.util.Collection<byte[]>)": [247, 253], "SignerInfo::::addSignerCertificateToSignedAttributes(java.security.cert.X509Certificate,java.lang.String)": [265, 298], "SignerInfo::::setSignature(byte[])": [305, 307], "SignerInfo::::setSignatureAlgorithm(com.itextpdf.signatures.cms.AlgorithmIdentifier)": [316, 318], "SignerInfo::::getCmsVersion()": [327, 329], "SignerInfo::::getSignedAttributes()": [354, 356], "SignerInfo::::addSignedAttribute(com.itextpdf.signatures.cms.CmsAttribute)": [364, 369], "SignerInfo::::getUnSignedAttributes()": [376, 378], "SignerInfo::::addUnSignedAttribute(com.itextpdf.signatures.cms.CmsAttribute)": [388, 390], "SignerInfo::::serializeSignedAttributes()": [400, 407], "SignerInfo::::setSerializedSignedAttributes(byte[])": [415, 428], "SignerInfo::::getEstimatedSize()": [440, 444], "SignerInfo::::getAsDerSequence()": [453, 455], "SignerInfo::::getAsDerSequence(boolean)": [467, 517], "SignerInfo::::setRevocationInfo()": [568, 583], "SignerInfo::::containsRevocationData()": [625, 628], "SignerInfo::::getAttributesAsDERSet(java.util.Collection<com.itextpdf.signatures.cms.CmsAttribute>)": [630, 639]}, "test_method_lines_dic": {"SignerInfoTest::::before()": [99, 102], "SignerInfoTest::::init()": [104, 112], "SignerInfoTest::::testSignedAttributesReadonlyModeActivatedByGettingSerializedData()": [114, 138], "SignerInfoTest::::testGetSerializedBasicSignedAttributes()": [140, 149], "SignerInfoTest::::testGetSerializedExtendedSignedAttributes()": [151, 164], "SignerInfoTest::::testGetSerializedExtendedSignedAttributesCrlOnly()": [166, 176], "SignerInfoTest::::testAddSignedAttribute()": [178, 187], "SignerInfoTest::::testAddUnsignedAttribute()": [189, 196], "SignerInfoTest::::testGetSerializedSignedAttributesWithCertificateId()": [198, 209], "SignerInfoTest::::testGetSerializedSignedAttributesWithCertificateIdTroughCertSetter()": [211, 221], "SignerInfoTest::::testGetAsDerSequence()": [223, 239], "SignerInfoTest::::testEstimatedSizeWithSignature()": [241, 258], "SignerInfoTest::::testSignedAttributesSerializationRoundTrip()": [260, 281], "SignerInfoTest::::testEstimatedSizeEstimatedSignature()": [283, 298], "SignerInfoTest::::testSerializeAndDeserializeSignerInfo()": [300, 317], "SignerInfoTest::::testSerializeAndDeserializeSignedAttributes()": [320, 334], "SignerInfoTest::::testDeserializationMissingSignedAttributes()": [336, 342], "SignerInfoTest::::testMissingSignerCertificate()": [344, 351], "SignerInfoTest::::testSidWithSubjectKeyIdentifier()": [353, 359], "SignerInfoTest::::testMissingCertificateWithSubjectKeyIdentifier()": [361, 368], "SignerInfoTest::::testInvalidStructure()": [370, 380], "SignerInfoTest::::toUnixStringEnding(java.lang.String)": [382, 384], "SignerInfoTest::::serializedAsString(byte[])": [386, 390]}, "reverse_method_lines_dic": {"148": "SignerInfo::::getDigestAlgorithm()", "149": "SignerInfo::::getDigestAlgorithm()", "150": "SignerInfo::::getDigestAlgorithm()", "157": "SignerInfo::::setDigestAlgorithm(com.itextpdf.signatures.cms.AlgorithmIdentifier)", "158": "SignerInfo::::setDigestAlgorithm(com.itextpdf.signatures.cms.AlgorithmIdentifier)", "159": "SignerInfo::::setDigestAlgorithm(com.itextpdf.signatures.cms.AlgorithmIdentifier)", "166": "SignerInfo::::setMessageDigest(byte[])", "167": "SignerInfo::::setMessageDigest(byte[])", "168": "SignerInfo::::setMessageDigest(byte[])", "169": "SignerInfo::::setMessageDigest(byte[])", "170": "SignerInfo::::setMessageDigest(byte[])", "171": "SignerInfo::::setMessageDigest(byte[])", "172": "SignerInfo::::setMessageDigest(byte[])", "173": "SignerInfo::::setMessageDigest(byte[])", "181": "SignerInfo::::setSigningCertificate(java.security.cert.X509Certificate)", "182": "SignerInfo::::setSigningCertificate(java.security.cert.X509Certificate)", "183": "SignerInfo::::setSigningCertificate(java.security.cert.X509Certificate)", "184": "SignerInfo::::setSigningCertificate(java.security.cert.X509Certificate)", "185": "SignerInfo::::setSigningCertificate(java.security.cert.X509Certificate)", "186": "SignerInfo::::setSigningCertificate(java.security.cert.X509Certificate)", "187": "SignerInfo::::setSigningCertificate(java.security.cert.X509Certificate)", "188": "SignerInfo::::setSigningCertificate(java.security.cert.X509Certificate)", "189": "SignerInfo::::setSigningCertificate(java.security.cert.X509Certificate)", "190": "SignerInfo::::setSigningCertificate(java.security.cert.X509Certificate)", "191": "SignerInfo::::setSigningCertificate(java.security.cert.X509Certificate)", "192": "SignerInfo::::setSigningCertificate(java.security.cert.X509Certificate)", "193": "SignerInfo::::setSigningCertificate(java.security.cert.X509Certificate)", "194": "SignerInfo::::setSigningCertificate(java.security.cert.X509Certificate)", "195": "SignerInfo::::setSigningCertificate(java.security.cert.X509Certificate)", "196": "SignerInfo::::setSigningCertificate(java.security.cert.X509Certificate)", "197": "SignerInfo::::setSigningCertificate(java.security.cert.X509Certificate)", "198": "SignerInfo::::setSigningCertificate(java.security.cert.X509Certificate)", "199": "SignerInfo::::setSigningCertificate(java.security.cert.X509Certificate)", "200": "SignerInfo::::setSigningCertificate(java.security.cert.X509Certificate)", "201": "SignerInfo::::setSigningCertificate(java.security.cert.X509Certificate)", "202": "SignerInfo::::setSigningCertificate(java.security.cert.X509Certificate)", "209": "SignerInfo::::getSigningCertificate()", "210": "SignerInfo::::getSigningCertificate()", "211": "SignerInfo::::getSigningCertificate()", "223": "SignerInfo::::setSigningCertificateAndAddToSignedAttributes(java.security.cert.X509Certificate,java.lang.String)", "224": "SignerInfo::::setSigningCertificateAndAddToSignedAttributes(java.security.cert.X509Certificate,java.lang.String)", "225": "SignerInfo::::setSigningCertificateAndAddToSignedAttributes(java.security.cert.X509Certificate,java.lang.String)", "226": "SignerInfo::::setSigningCertificateAndAddToSignedAttributes(java.security.cert.X509Certificate,java.lang.String)", "227": "SignerInfo::::setSigningCertificateAndAddToSignedAttributes(java.security.cert.X509Certificate,java.lang.String)", "234": "SignerInfo::::setOcspResponses(java.util.Collection<byte[]>)", "235": "SignerInfo::::setOcspResponses(java.util.Collection<byte[]>)", "236": "SignerInfo::::setOcspResponses(java.util.Collection<byte[]>)", "237": "SignerInfo::::setOcspResponses(java.util.Collection<byte[]>)", "238": "SignerInfo::::setOcspResponses(java.util.Collection<byte[]>)", "239": "SignerInfo::::setOcspResponses(java.util.Collection<byte[]>)", "240": "SignerInfo::::setOcspResponses(java.util.Collection<byte[]>)", "247": "SignerInfo::::setCrlResponses(java.util.Collection<byte[]>)", "248": "SignerInfo::::setCrlResponses(java.util.Collection<byte[]>)", "249": "SignerInfo::::setCrlResponses(java.util.Collection<byte[]>)", "250": "SignerInfo::::setCrlResponses(java.util.Collection<byte[]>)", "251": "SignerInfo::::setCrlResponses(java.util.Collection<byte[]>)", "252": "SignerInfo::::setCrlResponses(java.util.Collection<byte[]>)", "253": "SignerInfo::::setCrlResponses(java.util.Collection<byte[]>)", "265": "SignerInfo::::addSignerCertificateToSignedAttributes(java.security.cert.X509Certificate,java.lang.String)", "266": "SignerInfo::::addSignerCertificateToSignedAttributes(java.security.cert.X509Certificate,java.lang.String)", "267": "SignerInfo::::addSignerCertificateToSignedAttributes(java.security.cert.X509Certificate,java.lang.String)", "268": "SignerInfo::::addSignerCertificateToSignedAttributes(java.security.cert.X509Certificate,java.lang.String)", "269": "SignerInfo::::addSignerCertificateToSignedAttributes(java.security.cert.X509Certificate,java.lang.String)", "270": "SignerInfo::::addSignerCertificateToSignedAttributes(java.security.cert.X509Certificate,java.lang.String)", "271": "SignerInfo::::addSignerCertificateToSignedAttributes(java.security.cert.X509Certificate,java.lang.String)", "272": "SignerInfo::::addSignerCertificateToSignedAttributes(java.security.cert.X509Certificate,java.lang.String)", "273": "SignerInfo::::addSignerCertificateToSignedAttributes(java.security.cert.X509Certificate,java.lang.String)", "274": "SignerInfo::::addSignerCertificateToSignedAttributes(java.security.cert.X509Certificate,java.lang.String)", "275": "SignerInfo::::addSignerCertificateToSignedAttributes(java.security.cert.X509Certificate,java.lang.String)", "276": "SignerInfo::::addSignerCertificateToSignedAttributes(java.security.cert.X509Certificate,java.lang.String)", "277": "SignerInfo::::addSignerCertificateToSignedAttributes(java.security.cert.X509Certificate,java.lang.String)", "278": "SignerInfo::::addSignerCertificateToSignedAttributes(java.security.cert.X509Certificate,java.lang.String)", "279": "SignerInfo::::addSignerCertificateToSignedAttributes(java.security.cert.X509Certificate,java.lang.String)", "280": "SignerInfo::::addSignerCertificateToSignedAttributes(java.security.cert.X509Certificate,java.lang.String)", "281": "SignerInfo::::addSignerCertificateToSignedAttributes(java.security.cert.X509Certificate,java.lang.String)", "282": "SignerInfo::::addSignerCertificateToSignedAttributes(java.security.cert.X509Certificate,java.lang.String)", "283": "SignerInfo::::addSignerCertificateToSignedAttributes(java.security.cert.X509Certificate,java.lang.String)", "284": "SignerInfo::::addSignerCertificateToSignedAttributes(java.security.cert.X509Certificate,java.lang.String)", "285": "SignerInfo::::addSignerCertificateToSignedAttributes(java.security.cert.X509Certificate,java.lang.String)", "286": "SignerInfo::::addSignerCertificateToSignedAttributes(java.security.cert.X509Certificate,java.lang.String)", "287": "SignerInfo::::addSignerCertificateToSignedAttributes(java.security.cert.X509Certificate,java.lang.String)", "288": "SignerInfo::::addSignerCertificateToSignedAttributes(java.security.cert.X509Certificate,java.lang.String)", "289": "SignerInfo::::addSignerCertificateToSignedAttributes(java.security.cert.X509Certificate,java.lang.String)", "290": "SignerInfo::::addSignerCertificateToSignedAttributes(java.security.cert.X509Certificate,java.lang.String)", "291": "SignerInfo::::addSignerCertificateToSignedAttributes(java.security.cert.X509Certificate,java.lang.String)", "292": "SignerInfo::::addSignerCertificateToSignedAttributes(java.security.cert.X509Certificate,java.lang.String)", "293": "SignerInfo::::addSignerCertificateToSignedAttributes(java.security.cert.X509Certificate,java.lang.String)", "294": "SignerInfo::::addSignerCertificateToSignedAttributes(java.security.cert.X509Certificate,java.lang.String)", "295": "SignerInfo::::addSignerCertificateToSignedAttributes(java.security.cert.X509Certificate,java.lang.String)", "296": "SignerInfo::::addSignerCertificateToSignedAttributes(java.security.cert.X509Certificate,java.lang.String)", "297": "SignerInfo::::addSignerCertificateToSignedAttributes(java.security.cert.X509Certificate,java.lang.String)", "298": "SignerInfo::::addSignerCertificateToSignedAttributes(java.security.cert.X509Certificate,java.lang.String)", "305": "SignerInfo::::setSignature(byte[])", "306": "SignerInfo::::setSignature(byte[])", "307": "SignerInfo::::setSignature(byte[])", "316": "SignerInfo::::setSignatureAlgorithm(com.itextpdf.signatures.cms.AlgorithmIdentifier)", "317": "SignerInfo::::setSignatureAlgorithm(com.itextpdf.signatures.cms.AlgorithmIdentifier)", "318": "SignerInfo::::setSignatureAlgorithm(com.itextpdf.signatures.cms.AlgorithmIdentifier)", "327": "SignerInfo::::getCmsVersion()", "328": "SignerInfo::::getCmsVersion()", "329": "SignerInfo::::getCmsVersion()", "354": "SignerInfo::::getSignedAttributes()", "355": "SignerInfo::::getSignedAttributes()", "356": "SignerInfo::::getSignedAttributes()", "364": "SignerInfo::::addSignedAttribute(com.itextpdf.signatures.cms.CmsAttribute)", "365": "SignerInfo::::addSignedAttribute(com.itextpdf.signatures.cms.CmsAttribute)", "366": "SignerInfo::::addSignedAttribute(com.itextpdf.signatures.cms.CmsAttribute)", "367": "SignerInfo::::addSignedAttribute(com.itextpdf.signatures.cms.CmsAttribute)", "368": "SignerInfo::::addSignedAttribute(com.itextpdf.signatures.cms.CmsAttribute)", "369": "SignerInfo::::addSignedAttribute(com.itextpdf.signatures.cms.CmsAttribute)", "376": "SignerInfo::::getUnSignedAttributes()", "377": "SignerInfo::::getUnSignedAttributes()", "378": "SignerInfo::::getUnSignedAttributes()", "388": "SignerInfo::::addUnSignedAttribute(com.itextpdf.signatures.cms.CmsAttribute)", "389": "SignerInfo::::addUnSignedAttribute(com.itextpdf.signatures.cms.CmsAttribute)", "390": "SignerInfo::::addUnSignedAttribute(com.itextpdf.signatures.cms.CmsAttribute)", "400": "SignerInfo::::serializeSignedAttributes()", "401": "SignerInfo::::serializeSignedAttributes()", "402": "SignerInfo::::serializeSignedAttributes()", "403": "SignerInfo::::serializeSignedAttributes()", "404": "SignerInfo::::serializeSignedAttributes()", "405": "SignerInfo::::serializeSignedAttributes()", "406": "SignerInfo::::serializeSignedAttributes()", "407": "SignerInfo::::serializeSignedAttributes()", "415": "SignerInfo::::setSerializedSignedAttributes(byte[])", "416": "SignerInfo::::setSerializedSignedAttributes(byte[])", "417": "SignerInfo::::setSerializedSignedAttributes(byte[])", "418": "SignerInfo::::setSerializedSignedAttributes(byte[])", "419": "SignerInfo::::setSerializedSignedAttributes(byte[])", "420": "SignerInfo::::setSerializedSignedAttributes(byte[])", "421": "SignerInfo::::setSerializedSignedAttributes(byte[])", "422": "SignerInfo::::setSerializedSignedAttributes(byte[])", "423": "SignerInfo::::setSerializedSignedAttributes(byte[])", "424": "SignerInfo::::setSerializedSignedAttributes(byte[])", "425": "SignerInfo::::setSerializedSignedAttributes(byte[])", "426": "SignerInfo::::setSerializedSignedAttributes(byte[])", "427": "SignerInfo::::setSerializedSignedAttributes(byte[])", "428": "SignerInfo::::setSerializedSignedAttributes(byte[])", "440": "SignerInfo::::getEstimatedSize()", "441": "SignerInfo::::getEstimatedSize()", "442": "SignerInfo::::getEstimatedSize()", "443": "SignerInfo::::getEstimatedSize()", "444": "SignerInfo::::getEstimatedSize()", "453": "SignerInfo::::getAsDerSequence()", "454": "SignerInfo::::getAsDerSequence()", "455": "SignerInfo::::getAsDerSequence()", "467": "SignerInfo::::getAsDerSequence(boolean)", "468": "SignerInfo::::getAsDerSequence(boolean)", "469": "SignerInfo::::getAsDerSequence(boolean)", "470": "SignerInfo::::getAsDerSequence(boolean)", "471": "SignerInfo::::getAsDerSequence(boolean)", "472": "SignerInfo::::getAsDerSequence(boolean)", "473": "SignerInfo::::getAsDerSequence(boolean)", "474": "SignerInfo::::getAsDerSequence(boolean)", "475": "SignerInfo::::getAsDerSequence(boolean)", "476": "SignerInfo::::getAsDerSequence(boolean)", "477": "SignerInfo::::getAsDerSequence(boolean)", "478": "SignerInfo::::getAsDerSequence(boolean)", "479": "SignerInfo::::getAsDerSequence(boolean)", "480": "SignerInfo::::getAsDerSequence(boolean)", "481": "SignerInfo::::getAsDerSequence(boolean)", "482": "SignerInfo::::getAsDerSequence(boolean)", "483": "SignerInfo::::getAsDerSequence(boolean)", "484": "SignerInfo::::getAsDerSequence(boolean)", "485": "SignerInfo::::getAsDerSequence(boolean)", "486": "SignerInfo::::getAsDerSequence(boolean)", "487": "SignerInfo::::getAsDerSequence(boolean)", "488": "SignerInfo::::getAsDerSequence(boolean)", "489": "SignerInfo::::getAsDerSequence(boolean)", "490": "SignerInfo::::getAsDerSequence(boolean)", "491": "SignerInfo::::getAsDerSequence(boolean)", "492": "SignerInfo::::getAsDerSequence(boolean)", "493": "SignerInfo::::getAsDerSequence(boolean)", "494": "SignerInfo::::getAsDerSequence(boolean)", "495": "SignerInfo::::getAsDerSequence(boolean)", "496": "SignerInfo::::getAsDerSequence(boolean)", "497": "SignerInfo::::getAsDerSequence(boolean)", "498": "SignerInfo::::getAsDerSequence(boolean)", "499": "SignerInfo::::getAsDerSequence(boolean)", "500": "SignerInfo::::getAsDerSequence(boolean)", "501": "SignerInfo::::getAsDerSequence(boolean)", "502": "SignerInfo::::getAsDerSequence(boolean)", "503": "SignerInfo::::getAsDerSequence(boolean)", "504": "SignerInfo::::getAsDerSequence(boolean)", "505": "SignerInfo::::getAsDerSequence(boolean)", "506": "SignerInfo::::getAsDerSequence(boolean)", "507": "SignerInfo::::getAsDerSequence(boolean)", "508": "SignerInfo::::getAsDerSequence(boolean)", "509": "SignerInfo::::getAsDerSequence(boolean)", "510": "SignerInfo::::getAsDerSequence(boolean)", "511": "SignerInfo::::getAsDerSequence(boolean)", "512": "SignerInfo::::getAsDerSequence(boolean)", "513": "SignerInfo::::getAsDerSequence(boolean)", "514": "SignerInfo::::getAsDerSequence(boolean)", "515": "SignerInfo::::getAsDerSequence(boolean)", "516": "SignerInfo::::getAsDerSequence(boolean)", "517": "SignerInfo::::getAsDerSequence(boolean)", "568": "SignerInfo::::setRevocationInfo()", "569": "SignerInfo::::setRevocationInfo()", "570": "SignerInfo::::setRevocationInfo()", "571": "SignerInfo::::setRevocationInfo()", "572": "SignerInfo::::setRevocationInfo()", "573": "SignerInfo::::setRevocationInfo()", "574": "SignerInfo::::setRevocationInfo()", "575": "SignerInfo::::setRevocationInfo()", "576": "SignerInfo::::setRevocationInfo()", "577": "SignerInfo::::setRevocationInfo()", "578": "SignerInfo::::setRevocationInfo()", "579": "SignerInfo::::setRevocationInfo()", "580": "SignerInfo::::setRevocationInfo()", "581": "SignerInfo::::setRevocationInfo()", "582": "SignerInfo::::setRevocationInfo()", "583": "SignerInfo::::setRevocationInfo()", "625": "SignerInfo::::containsRevocationData()", "626": "SignerInfo::::containsRevocationData()", "627": "SignerInfo::::containsRevocationData()", "628": "SignerInfo::::containsRevocationData()", "630": "SignerInfo::::getAttributesAsDERSet(java.util.Collection<com.itextpdf.signatures.cms.CmsAttribute>)", "631": "SignerInfo::::getAttributesAsDERSet(java.util.Collection<com.itextpdf.signatures.cms.CmsAttribute>)", "632": "SignerInfo::::getAttributesAsDERSet(java.util.Collection<com.itextpdf.signatures.cms.CmsAttribute>)", "633": "SignerInfo::::getAttributesAsDERSet(java.util.Collection<com.itextpdf.signatures.cms.CmsAttribute>)", "634": "SignerInfo::::getAttributesAsDERSet(java.util.Collection<com.itextpdf.signatures.cms.CmsAttribute>)", "635": "SignerInfo::::getAttributesAsDERSet(java.util.Collection<com.itextpdf.signatures.cms.CmsAttribute>)", "636": "SignerInfo::::getAttributesAsDERSet(java.util.Collection<com.itextpdf.signatures.cms.CmsAttribute>)", "637": "SignerInfo::::getAttributesAsDERSet(java.util.Collection<com.itextpdf.signatures.cms.CmsAttribute>)", "638": "SignerInfo::::getAttributesAsDERSet(java.util.Collection<com.itextpdf.signatures.cms.CmsAttribute>)", "639": "SignerInfo::::getAttributesAsDERSet(java.util.Collection<com.itextpdf.signatures.cms.CmsAttribute>)"}, "test_reverse_method_lines_dic": {"99": "SignerInfoTest::::before()", "100": "SignerInfoTest::::before()", "101": "SignerInfoTest::::before()", "102": "SignerInfoTest::::before()", "104": "SignerInfoTest::::init()", "105": "SignerInfoTest::::init()", "106": "SignerInfoTest::::init()", "107": "SignerInfoTest::::init()", "108": "SignerInfoTest::::init()", "109": "SignerInfoTest::::init()", "110": "SignerInfoTest::::init()", "111": "SignerInfoTest::::init()", "112": "SignerInfoTest::::init()", "114": "SignerInfoTest::::testSignedAttributesReadonlyModeActivatedByGettingSerializedData()", "115": "SignerInfoTest::::testSignedAttributesReadonlyModeActivatedByGettingSerializedData()", "116": "SignerInfoTest::::testSignedAttributesReadonlyModeActivatedByGettingSerializedData()", "117": "SignerInfoTest::::testSignedAttributesReadonlyModeActivatedByGettingSerializedData()", "118": "SignerInfoTest::::testSignedAttributesReadonlyModeActivatedByGettingSerializedData()", "119": "SignerInfoTest::::testSignedAttributesReadonlyModeActivatedByGettingSerializedData()", "120": "SignerInfoTest::::testSignedAttributesReadonlyModeActivatedByGettingSerializedData()", "121": "SignerInfoTest::::testSignedAttributesReadonlyModeActivatedByGettingSerializedData()", "122": "SignerInfoTest::::testSignedAttributesReadonlyModeActivatedByGettingSerializedData()", "123": "SignerInfoTest::::testSignedAttributesReadonlyModeActivatedByGettingSerializedData()", "124": "SignerInfoTest::::testSignedAttributesReadonlyModeActivatedByGettingSerializedData()", "125": "SignerInfoTest::::testSignedAttributesReadonlyModeActivatedByGettingSerializedData()", "126": "SignerInfoTest::::testSignedAttributesReadonlyModeActivatedByGettingSerializedData()", "127": "SignerInfoTest::::testSignedAttributesReadonlyModeActivatedByGettingSerializedData()", "128": "SignerInfoTest::::testSignedAttributesReadonlyModeActivatedByGettingSerializedData()", "129": "SignerInfoTest::::testSignedAttributesReadonlyModeActivatedByGettingSerializedData()", "130": "SignerInfoTest::::testSignedAttributesReadonlyModeActivatedByGettingSerializedData()", "131": "SignerInfoTest::::testSignedAttributesReadonlyModeActivatedByGettingSerializedData()", "132": "SignerInfoTest::::testSignedAttributesReadonlyModeActivatedByGettingSerializedData()", "133": "SignerInfoTest::::testSignedAttributesReadonlyModeActivatedByGettingSerializedData()", "134": "SignerInfoTest::::testSignedAttributesReadonlyModeActivatedByGettingSerializedData()", "135": "SignerInfoTest::::testSignedAttributesReadonlyModeActivatedByGettingSerializedData()", "136": "SignerInfoTest::::testSignedAttributesReadonlyModeActivatedByGettingSerializedData()", "137": "SignerInfoTest::::testSignedAttributesReadonlyModeActivatedByGettingSerializedData()", "138": "SignerInfoTest::::testSignedAttributesReadonlyModeActivatedByGettingSerializedData()", "140": "SignerInfoTest::::testGetSerializedBasicSignedAttributes()", "141": "SignerInfoTest::::testGetSerializedBasicSignedAttributes()", "142": "SignerInfoTest::::testGetSerializedBasicSignedAttributes()", "143": "SignerInfoTest::::testGetSerializedBasicSignedAttributes()", "144": "SignerInfoTest::::testGetSerializedBasicSignedAttributes()", "145": "SignerInfoTest::::testGetSerializedBasicSignedAttributes()", "146": "SignerInfoTest::::testGetSerializedBasicSignedAttributes()", "147": "SignerInfoTest::::testGetSerializedBasicSignedAttributes()", "148": "SignerInfoTest::::testGetSerializedBasicSignedAttributes()", "149": "SignerInfoTest::::testGetSerializedBasicSignedAttributes()", "151": "SignerInfoTest::::testGetSerializedExtendedSignedAttributes()", "152": "SignerInfoTest::::testGetSerializedExtendedSignedAttributes()", "153": "SignerInfoTest::::testGetSerializedExtendedSignedAttributes()", "154": "SignerInfoTest::::testGetSerializedExtendedSignedAttributes()", "155": "SignerInfoTest::::testGetSerializedExtendedSignedAttributes()", "156": "SignerInfoTest::::testGetSerializedExtendedSignedAttributes()", "157": "SignerInfoTest::::testGetSerializedExtendedSignedAttributes()", "158": "SignerInfoTest::::testGetSerializedExtendedSignedAttributes()", "159": "SignerInfoTest::::testGetSerializedExtendedSignedAttributes()", "160": "SignerInfoTest::::testGetSerializedExtendedSignedAttributes()", "161": "SignerInfoTest::::testGetSerializedExtendedSignedAttributes()", "162": "SignerInfoTest::::testGetSerializedExtendedSignedAttributes()", "163": "SignerInfoTest::::testGetSerializedExtendedSignedAttributes()", "164": "SignerInfoTest::::testGetSerializedExtendedSignedAttributes()", "166": "SignerInfoTest::::testGetSerializedExtendedSignedAttributesCrlOnly()", "167": "SignerInfoTest::::testGetSerializedExtendedSignedAttributesCrlOnly()", "168": "SignerInfoTest::::testGetSerializedExtendedSignedAttributesCrlOnly()", "169": "SignerInfoTest::::testGetSerializedExtendedSignedAttributesCrlOnly()", "170": "SignerInfoTest::::testGetSerializedExtendedSignedAttributesCrlOnly()", "171": "SignerInfoTest::::testGetSerializedExtendedSignedAttributesCrlOnly()", "172": "SignerInfoTest::::testGetSerializedExtendedSignedAttributesCrlOnly()", "173": "SignerInfoTest::::testGetSerializedExtendedSignedAttributesCrlOnly()", "174": "SignerInfoTest::::testGetSerializedExtendedSignedAttributesCrlOnly()", "175": "SignerInfoTest::::testGetSerializedExtendedSignedAttributesCrlOnly()", "176": "SignerInfoTest::::testGetSerializedExtendedSignedAttributesCrlOnly()", "178": "SignerInfoTest::::testAddSignedAttribute()", "179": "SignerInfoTest::::testAddSignedAttribute()", "180": "SignerInfoTest::::testAddSignedAttribute()", "181": "SignerInfoTest::::testAddSignedAttribute()", "182": "SignerInfoTest::::testAddSignedAttribute()", "183": "SignerInfoTest::::testAddSignedAttribute()", "184": "SignerInfoTest::::testAddSignedAttribute()", "185": "SignerInfoTest::::testAddSignedAttribute()", "186": "SignerInfoTest::::testAddSignedAttribute()", "187": "SignerInfoTest::::testAddSignedAttribute()", "189": "SignerInfoTest::::testAddUnsignedAttribute()", "190": "SignerInfoTest::::testAddUnsignedAttribute()", "191": "SignerInfoTest::::testAddUnsignedAttribute()", "192": "SignerInfoTest::::testAddUnsignedAttribute()", "193": "SignerInfoTest::::testAddUnsignedAttribute()", "194": "SignerInfoTest::::testAddUnsignedAttribute()", "195": "SignerInfoTest::::testAddUnsignedAttribute()", "196": "SignerInfoTest::::testAddUnsignedAttribute()", "198": "SignerInfoTest::::testGetSerializedSignedAttributesWithCertificateId()", "199": "SignerInfoTest::::testGetSerializedSignedAttributesWithCertificateId()", "200": "SignerInfoTest::::testGetSerializedSignedAttributesWithCertificateId()", "201": "SignerInfoTest::::testGetSerializedSignedAttributesWithCertificateId()", "202": "SignerInfoTest::::testGetSerializedSignedAttributesWithCertificateId()", "203": "SignerInfoTest::::testGetSerializedSignedAttributesWithCertificateId()", "204": "SignerInfoTest::::testGetSerializedSignedAttributesWithCertificateId()", "205": "SignerInfoTest::::testGetSerializedSignedAttributesWithCertificateId()", "206": "SignerInfoTest::::testGetSerializedSignedAttributesWithCertificateId()", "207": "SignerInfoTest::::testGetSerializedSignedAttributesWithCertificateId()", "208": "SignerInfoTest::::testGetSerializedSignedAttributesWithCertificateId()", "209": "SignerInfoTest::::testGetSerializedSignedAttributesWithCertificateId()", "211": "SignerInfoTest::::testGetSerializedSignedAttributesWithCertificateIdTroughCertSetter()", "212": "SignerInfoTest::::testGetSerializedSignedAttributesWithCertificateIdTroughCertSetter()", "213": "SignerInfoTest::::testGetSerializedSignedAttributesWithCertificateIdTroughCertSetter()", "214": "SignerInfoTest::::testGetSerializedSignedAttributesWithCertificateIdTroughCertSetter()", "215": "SignerInfoTest::::testGetSerializedSignedAttributesWithCertificateIdTroughCertSetter()", "216": "SignerInfoTest::::testGetSerializedSignedAttributesWithCertificateIdTroughCertSetter()", "217": "SignerInfoTest::::testGetSerializedSignedAttributesWithCertificateIdTroughCertSetter()", "218": "SignerInfoTest::::testGetSerializedSignedAttributesWithCertificateIdTroughCertSetter()", "219": "SignerInfoTest::::testGetSerializedSignedAttributesWithCertificateIdTroughCertSetter()", "220": "SignerInfoTest::::testGetSerializedSignedAttributesWithCertificateIdTroughCertSetter()", "221": "SignerInfoTest::::testGetSerializedSignedAttributesWithCertificateIdTroughCertSetter()", "223": "SignerInfoTest::::testGetAsDerSequence()", "224": "SignerInfoTest::::testGetAsDerSequence()", "225": "SignerInfoTest::::testGetAsDerSequence()", "226": "SignerInfoTest::::testGetAsDerSequence()", "227": "SignerInfoTest::::testGetAsDerSequence()", "228": "SignerInfoTest::::testGetAsDerSequence()", "229": "SignerInfoTest::::testGetAsDerSequence()", "230": "SignerInfoTest::::testGetAsDerSequence()", "231": "SignerInfoTest::::testGetAsDerSequence()", "232": "SignerInfoTest::::testGetAsDerSequence()", "233": "SignerInfoTest::::testGetAsDerSequence()", "234": "SignerInfoTest::::testGetAsDerSequence()", "235": "SignerInfoTest::::testGetAsDerSequence()", "236": "SignerInfoTest::::testGetAsDerSequence()", "237": "SignerInfoTest::::testGetAsDerSequence()", "238": "SignerInfoTest::::testGetAsDerSequence()", "239": "SignerInfoTest::::testGetAsDerSequence()", "241": "SignerInfoTest::::testEstimatedSizeWithSignature()", "242": "SignerInfoTest::::testEstimatedSizeWithSignature()", "243": "SignerInfoTest::::testEstimatedSizeWithSignature()", "244": "SignerInfoTest::::testEstimatedSizeWithSignature()", "245": "SignerInfoTest::::testEstimatedSizeWithSignature()", "246": "SignerInfoTest::::testEstimatedSizeWithSignature()", "247": "SignerInfoTest::::testEstimatedSizeWithSignature()", "248": "SignerInfoTest::::testEstimatedSizeWithSignature()", "249": "SignerInfoTest::::testEstimatedSizeWithSignature()", "250": "SignerInfoTest::::testEstimatedSizeWithSignature()", "251": "SignerInfoTest::::testEstimatedSizeWithSignature()", "252": "SignerInfoTest::::testEstimatedSizeWithSignature()", "253": "SignerInfoTest::::testEstimatedSizeWithSignature()", "254": "SignerInfoTest::::testEstimatedSizeWithSignature()", "255": "SignerInfoTest::::testEstimatedSizeWithSignature()", "256": "SignerInfoTest::::testEstimatedSizeWithSignature()", "257": "SignerInfoTest::::testEstimatedSizeWithSignature()", "258": "SignerInfoTest::::testEstimatedSizeWithSignature()", "260": "SignerInfoTest::::testSignedAttributesSerializationRoundTrip()", "261": "SignerInfoTest::::testSignedAttributesSerializationRoundTrip()", "262": "SignerInfoTest::::testSignedAttributesSerializationRoundTrip()", "263": "SignerInfoTest::::testSignedAttributesSerializationRoundTrip()", "264": "SignerInfoTest::::testSignedAttributesSerializationRoundTrip()", "265": "SignerInfoTest::::testSignedAttributesSerializationRoundTrip()", "266": "SignerInfoTest::::testSignedAttributesSerializationRoundTrip()", "267": "SignerInfoTest::::testSignedAttributesSerializationRoundTrip()", "268": "SignerInfoTest::::testSignedAttributesSerializationRoundTrip()", "269": "SignerInfoTest::::testSignedAttributesSerializationRoundTrip()", "270": "SignerInfoTest::::testSignedAttributesSerializationRoundTrip()", "271": "SignerInfoTest::::testSignedAttributesSerializationRoundTrip()", "272": "SignerInfoTest::::testSignedAttributesSerializationRoundTrip()", "273": "SignerInfoTest::::testSignedAttributesSerializationRoundTrip()", "274": "SignerInfoTest::::testSignedAttributesSerializationRoundTrip()", "275": "SignerInfoTest::::testSignedAttributesSerializationRoundTrip()", "276": "SignerInfoTest::::testSignedAttributesSerializationRoundTrip()", "277": "SignerInfoTest::::testSignedAttributesSerializationRoundTrip()", "278": "SignerInfoTest::::testSignedAttributesSerializationRoundTrip()", "279": "SignerInfoTest::::testSignedAttributesSerializationRoundTrip()", "280": "SignerInfoTest::::testSignedAttributesSerializationRoundTrip()", "281": "SignerInfoTest::::testSignedAttributesSerializationRoundTrip()", "283": "SignerInfoTest::::testEstimatedSizeEstimatedSignature()", "284": "SignerInfoTest::::testEstimatedSizeEstimatedSignature()", "285": "SignerInfoTest::::testEstimatedSizeEstimatedSignature()", "286": "SignerInfoTest::::testEstimatedSizeEstimatedSignature()", "287": "SignerInfoTest::::testEstimatedSizeEstimatedSignature()", "288": "SignerInfoTest::::testEstimatedSizeEstimatedSignature()", "289": "SignerInfoTest::::testEstimatedSizeEstimatedSignature()", "290": "SignerInfoTest::::testEstimatedSizeEstimatedSignature()", "291": "SignerInfoTest::::testEstimatedSizeEstimatedSignature()", "292": "SignerInfoTest::::testEstimatedSizeEstimatedSignature()", "293": "SignerInfoTest::::testEstimatedSizeEstimatedSignature()", "294": "SignerInfoTest::::testEstimatedSizeEstimatedSignature()", "295": "SignerInfoTest::::testEstimatedSizeEstimatedSignature()", "296": "SignerInfoTest::::testEstimatedSizeEstimatedSignature()", "297": "SignerInfoTest::::testEstimatedSizeEstimatedSignature()", "298": "SignerInfoTest::::testEstimatedSizeEstimatedSignature()", "300": "SignerInfoTest::::testSerializeAndDeserializeSignerInfo()", "301": "SignerInfoTest::::testSerializeAndDeserializeSignerInfo()", "302": "SignerInfoTest::::testSerializeAndDeserializeSignerInfo()", "303": "SignerInfoTest::::testSerializeAndDeserializeSignerInfo()", "304": "SignerInfoTest::::testSerializeAndDeserializeSignerInfo()", "305": "SignerInfoTest::::testSerializeAndDeserializeSignerInfo()", "306": "SignerInfoTest::::testSerializeAndDeserializeSignerInfo()", "307": "SignerInfoTest::::testSerializeAndDeserializeSignerInfo()", "308": "SignerInfoTest::::testSerializeAndDeserializeSignerInfo()", "309": "SignerInfoTest::::testSerializeAndDeserializeSignerInfo()", "310": "SignerInfoTest::::testSerializeAndDeserializeSignerInfo()", "311": "SignerInfoTest::::testSerializeAndDeserializeSignerInfo()", "312": "SignerInfoTest::::testSerializeAndDeserializeSignerInfo()", "313": "SignerInfoTest::::testSerializeAndDeserializeSignerInfo()", "314": "SignerInfoTest::::testSerializeAndDeserializeSignerInfo()", "315": "SignerInfoTest::::testSerializeAndDeserializeSignerInfo()", "316": "SignerInfoTest::::testSerializeAndDeserializeSignerInfo()", "317": "SignerInfoTest::::testSerializeAndDeserializeSignerInfo()", "320": "SignerInfoTest::::testSerializeAndDeserializeSignedAttributes()", "321": "SignerInfoTest::::testSerializeAndDeserializeSignedAttributes()", "322": "SignerInfoTest::::testSerializeAndDeserializeSignedAttributes()", "323": "SignerInfoTest::::testSerializeAndDeserializeSignedAttributes()", "324": "SignerInfoTest::::testSerializeAndDeserializeSignedAttributes()", "325": "SignerInfoTest::::testSerializeAndDeserializeSignedAttributes()", "326": "SignerInfoTest::::testSerializeAndDeserializeSignedAttributes()", "327": "SignerInfoTest::::testSerializeAndDeserializeSignedAttributes()", "328": "SignerInfoTest::::testSerializeAndDeserializeSignedAttributes()", "329": "SignerInfoTest::::testSerializeAndDeserializeSignedAttributes()", "330": "SignerInfoTest::::testSerializeAndDeserializeSignedAttributes()", "331": "SignerInfoTest::::testSerializeAndDeserializeSignedAttributes()", "332": "SignerInfoTest::::testSerializeAndDeserializeSignedAttributes()", "333": "SignerInfoTest::::testSerializeAndDeserializeSignedAttributes()", "334": "SignerInfoTest::::testSerializeAndDeserializeSignedAttributes()", "336": "SignerInfoTest::::testDeserializationMissingSignedAttributes()", "337": "SignerInfoTest::::testDeserializationMissingSignedAttributes()", "338": "SignerInfoTest::::testDeserializationMissingSignedAttributes()", "339": "SignerInfoTest::::testDeserializationMissingSignedAttributes()", "340": "SignerInfoTest::::testDeserializationMissingSignedAttributes()", "341": "SignerInfoTest::::testDeserializationMissingSignedAttributes()", "342": "SignerInfoTest::::testDeserializationMissingSignedAttributes()", "344": "SignerInfoTest::::testMissingSignerCertificate()", "345": "SignerInfoTest::::testMissingSignerCertificate()", "346": "SignerInfoTest::::testMissingSignerCertificate()", "347": "SignerInfoTest::::testMissingSignerCertificate()", "348": "SignerInfoTest::::testMissingSignerCertificate()", "349": "SignerInfoTest::::testMissingSignerCertificate()", "350": "SignerInfoTest::::testMissingSignerCertificate()", "351": "SignerInfoTest::::testMissingSignerCertificate()", "353": "SignerInfoTest::::testSidWithSubjectKeyIdentifier()", "354": "SignerInfoTest::::testSidWithSubjectKeyIdentifier()", "355": "SignerInfoTest::::testSidWithSubjectKeyIdentifier()", "356": "SignerInfoTest::::testSidWithSubjectKeyIdentifier()", "357": "SignerInfoTest::::testSidWithSubjectKeyIdentifier()", "358": "SignerInfoTest::::testSidWithSubjectKeyIdentifier()", "359": "SignerInfoTest::::testSidWithSubjectKeyIdentifier()", "361": "SignerInfoTest::::testMissingCertificateWithSubjectKeyIdentifier()", "362": "SignerInfoTest::::testMissingCertificateWithSubjectKeyIdentifier()", "363": "SignerInfoTest::::testMissingCertificateWithSubjectKeyIdentifier()", "364": "SignerInfoTest::::testMissingCertificateWithSubjectKeyIdentifier()", "365": "SignerInfoTest::::testMissingCertificateWithSubjectKeyIdentifier()", "366": "SignerInfoTest::::testMissingCertificateWithSubjectKeyIdentifier()", "367": "SignerInfoTest::::testMissingCertificateWithSubjectKeyIdentifier()", "368": "SignerInfoTest::::testMissingCertificateWithSubjectKeyIdentifier()", "370": "SignerInfoTest::::testInvalidStructure()", "371": "SignerInfoTest::::testInvalidStructure()", "372": "SignerInfoTest::::testInvalidStructure()", "373": "SignerInfoTest::::testInvalidStructure()", "374": "SignerInfoTest::::testInvalidStructure()", "375": "SignerInfoTest::::testInvalidStructure()", "376": "SignerInfoTest::::testInvalidStructure()", "377": "SignerInfoTest::::testInvalidStructure()", "378": "SignerInfoTest::::testInvalidStructure()", "379": "SignerInfoTest::::testInvalidStructure()", "380": "SignerInfoTest::::testInvalidStructure()", "382": "SignerInfoTest::::toUnixStringEnding(java.lang.String)", "383": "SignerInfoTest::::toUnixStringEnding(java.lang.String)", "384": "SignerInfoTest::::toUnixStringEnding(java.lang.String)", "386": "SignerInfoTest::::serializedAsString(byte[])", "387": "SignerInfoTest::::serializedAsString(byte[])", "388": "SignerInfoTest::::serializedAsString(byte[])", "389": "SignerInfoTest::::serializedAsString(byte[])", "390": "SignerInfoTest::::serializedAsString(byte[])"}, "tests": [{"test_lines": [114, 138], "covered_lines": [73, 78, 90, 91, 93, 94, 95, 96, 158, 159, 167, 168, 170, 171, 172, 173, 182, 184, 185, 186, 235, 236, 238, 239, 240, 248, 249, 251, 252, 253, 267, 268, 317, 318, 365, 366, 401, 402, 403, 404, 406, 416, 417, 569, 571, 573, 575, 576, 578, 580, 581, 583, 586, 587, 588, 589, 592, 593, 594, 595, 597, 598, 599, 600, 602, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 626, 627, 631, 632, 633, 634, 635, 636, 637, 638]}, {"test_lines": [140, 149], "covered_lines": [73, 78, 90, 91, 93, 94, 95, 96, 158, 159, 167, 170, 171, 172, 173, 182, 184, 185, 186, 317, 318, 401, 402, 403, 404, 406, 631, 632, 633, 634, 635, 636, 637, 638]}, {"test_lines": [151, 164], "covered_lines": [73, 78, 90, 91, 93, 94, 95, 96, 158, 159, 167, 170, 171, 172, 173, 182, 184, 185, 186, 235, 238, 239, 240, 248, 251, 252, 253, 317, 318, 401, 402, 403, 404, 406, 569, 571, 573, 575, 576, 578, 580, 581, 583, 586, 587, 588, 589, 592, 593, 594, 595, 597, 598, 599, 600, 602, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 626, 627, 631, 632, 633, 634, 635, 636, 637, 638]}, {"test_lines": [166, 176], "covered_lines": [73, 78, 90, 91, 93, 94, 95, 96, 158, 159, 167, 170, 171, 172, 173, 182, 184, 185, 186, 248, 251, 252, 253, 317, 318, 401, 402, 403, 404, 406, 569, 571, 573, 575, 576, 578, 580, 581, 583, 586, 587, 588, 589, 592, 593, 594, 595, 597, 598, 599, 600, 602, 605, 623, 626, 627, 631, 632, 633, 634, 635, 636, 637, 638]}, {"test_lines": [178, 187], "covered_lines": [73, 78, 90, 91, 93, 94, 95, 96, 355, 365, 368, 369]}, {"test_lines": [189, 196], "covered_lines": [73, 78, 90, 91, 93, 94, 95, 96, 377, 389, 390]}, {"test_lines": [198, 209], "covered_lines": [73, 78, 90, 91, 93, 94, 95, 96, 158, 159, 167, 170, 171, 172, 173, 182, 184, 185, 186, 267, 270, 271, 272, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 317, 318, 401, 402, 403, 404, 406, 631, 632, 633, 634, 635, 636, 637, 638]}, {"test_lines": [211, 221], "covered_lines": [73, 78, 90, 91, 93, 94, 95, 96, 158, 159, 167, 170, 171, 172, 173, 182, 184, 185, 186, 225, 226, 227, 267, 270, 271, 272, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 317, 318, 401, 402, 403, 404, 406, 631, 632, 633, 634, 635, 636, 637, 638]}, {"test_lines": [223, 239], "covered_lines": [73, 78, 90, 91, 93, 94, 95, 96, 158, 159, 167, 170, 171, 172, 173, 182, 184, 185, 188, 189, 195, 196, 197, 198, 225, 226, 227, 267, 270, 271, 272, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 306, 307, 317, 318, 328, 389, 390, 454, 468, 470, 472, 473, 474, 475, 477, 479, 480, 482, 484, 485, 486, 496, 497, 498, 499, 500, 504, 507, 509, 510, 512, 513, 516, 631, 632, 633, 634, 635, 636, 637, 638]}, {"test_lines": [241, 258], "covered_lines": [73, 78, 90, 91, 93, 94, 95, 96, 158, 159, 167, 170, 171, 172, 173, 182, 184, 185, 186, 225, 226, 227, 267, 270, 271, 272, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 306, 307, 317, 318, 328, 389, 390, 441, 442, 443, 468, 470, 472, 473, 474, 475, 477, 479, 480, 482, 484, 485, 486, 496, 497, 498, 499, 500, 504, 507, 509, 510, 512, 513, 516, 631, 632, 633, 634, 635, 636, 637, 638]}, {"test_lines": [260, 281], "covered_lines": [73, 78, 90, 91, 93, 94, 95, 96, 158, 159, 167, 170, 171, 172, 173, 182, 184, 185, 186, 225, 226, 227, 267, 270, 271, 272, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 306, 307, 317, 318, 355, 401, 402, 403, 404, 406, 416, 419, 420, 422, 423, 424, 427, 428, 557, 558, 559, 560, 561, 562, 563, 565, 631, 632, 633, 634, 635, 636, 637, 638]}, {"test_lines": [283, 298], "covered_lines": [73, 78, 90, 91, 93, 94, 95, 96, 158, 159, 167, 170, 171, 172, 173, 182, 184, 185, 186, 225, 226, 227, 267, 270, 271, 272, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 317, 318, 328, 389, 390, 441, 442, 443, 468, 470, 472, 473, 474, 475, 477, 479, 480, 482, 484, 485, 486, 496, 497, 498, 499, 500, 504, 505, 509, 510, 512, 513, 516, 631, 632, 633, 634, 635, 636, 637, 638]}, {"test_lines": [300, 317], "covered_lines": [73, 78, 90, 91, 93, 94, 95, 96, 106, 107, 109, 110, 111, 112, 116, 117, 118, 119, 120, 121, 122, 124, 126, 127, 128, 131, 132, 133, 134, 135, 140, 141, 158, 159, 167, 170, 171, 172, 173, 182, 184, 185, 186, 225, 226, 227, 267, 270, 271, 272, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 317, 318, 328, 355, 389, 390, 416, 419, 420, 422, 423, 424, 427, 428, 468, 470, 472, 473, 474, 475, 477, 479, 480, 482, 484, 485, 486, 496, 497, 498, 499, 500, 504, 505, 509, 510, 512, 513, 516, 543, 544, 545, 546, 547, 548, 551, 554, 557, 558, 559, 560, 561, 562, 563, 565, 631, 632, 633, 634, 635, 636, 637, 638]}, {"test_lines": [320, 334], "covered_lines": [73, 78, 90, 91, 93, 94, 95, 96, 167, 170, 171, 172, 173, 267, 270, 271, 272, 274, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 355, 401, 402, 403, 404, 406, 416, 419, 420, 422, 423, 424, 427, 428, 557, 558, 559, 560, 561, 562, 563, 565, 631, 632, 633, 634, 635, 636, 637, 638]}, {"test_lines": [336, 342], "covered_lines": [73, 78, 106, 107, 109, 110, 111, 112, 116, 117, 118, 119, 124, 126, 127, 128, 131, 136, 140, 141, 355, 543, 544, 545, 546, 547, 548, 551, 554]}, {"test_lines": [344, 351], "covered_lines": [73, 78, 106, 107, 109, 110, 111, 543, 544, 545, 546, 550, 551, 552]}, {"test_lines": [353, 359], "covered_lines": [73, 78, 106, 107, 109, 110, 111, 114, 116, 117, 118, 119, 124, 126, 127, 128, 131, 136, 140, 141, 210, 522, 523, 525, 526, 527, 529, 530, 532, 533, 534, 537]}, {"test_lines": [361, 368], "covered_lines": [73, 78, 106, 107, 109, 110, 522, 523, 525, 526, 527, 529, 530, 532, 536, 537, 538]}, {"test_lines": [370, 380], "covered_lines": [73, 78, 106, 107, 138, 139]}]}, "/bernard/dataset_construction/prep/repos/itext-java/sign/src/main/java/com/itextpdf/signatures/cms/EncapsulatedContentInfo.java": {"class_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.signatures.cms;\n", "\n", "import com.itextpdf.bouncycastleconnector.BouncyCastleFactoryCreator;\n", "import com.itextpdf.commons.bouncycastle.IBouncyCastleFactory;\n", "import com.itextpdf.commons.bouncycastle.asn1.IASN1ObjectIdentifier;\n", "import com.itextpdf.commons.bouncycastle.asn1.IASN1OctetString;\n", "import com.itextpdf.commons.bouncycastle.asn1.IASN1Sequence;\n", "import com.itextpdf.commons.bouncycastle.asn1.IASN1TaggedObject;\n", "\n", "/**\n", " * This class represents the signed content.\n", " */\n", "public class EncapsulatedContentInfo {\n", "\n", "    private static final IBouncyCastleFactory BC_FACTORY = BouncyCastleFactoryCreator.getFactory();\n", "\n", "    /**\n", "     * Object identifier of the content field\n", "     */\n", "    private String eContentType = \"1.2.840.113549.1.7.1\";\n", "    /**\n", "     * Optional.\n", "     *\n", "     * <p>\n", "     * The actual content as an octet string. Does not have to be DER encoded.\n", "     */\n", "    private IASN1OctetString eContent;\n", "\n", "    /**\n", "     * Creates an EncapsulatedContentInfo with contenttype and content.\n", "     *\n", "     * @param eContentType the content type Oid (object id)\n", "     * @param eContent     the content\n", "     */\n", "    public EncapsulatedContentInfo(String eContentType, IASN1OctetString eContent) {\n", "        this.eContentType = eContentType;\n", "        this.eContent = eContent;\n", "    }\n", "\n", "    /**\n", "     * Creates an EncapsulatedContentInfo with contenttype.\n", "     *\n", "     * @param eContentType the content type Oid (object id)\n", "     */\n", "    public EncapsulatedContentInfo(String eContentType) {\n", "        this.eContentType = eContentType;\n", "    }\n", "\n", "    /**\n", "     * Creates a default EncapsulatedContentInfo.\n", "     */\n", "    public EncapsulatedContentInfo() {\n", "        // Empty constructor.\n", "    }\n", "\n", "    EncapsulatedContentInfo(IASN1Sequence lencapContentInfo) {\n", "        IASN1ObjectIdentifier eContentTypeOid = BC_FACTORY\n", "                .createASN1ObjectIdentifier(lencapContentInfo.getObjectAt(0));\n", "        IASN1OctetString eContentElem = null;\n", "        if (lencapContentInfo.size() > 1) {\n", "            IASN1TaggedObject taggedElement = BC_FACTORY.createASN1TaggedObject(lencapContentInfo.getObjectAt(1));\n", "            eContentElem = BC_FACTORY.createASN1OctetString(taggedElement.getObject());\n", "            if (eContentElem != null) {\n", "                eContent = eContentElem;\n", "            }\n", "        }\n", "        eContentType = eContentTypeOid.getId();\n", "    }\n", "\n", "    /**\n", "     * Returns the contenttype oid.\n", "     *\n", "     * @return the contenttype oid.\n", "     */\n", "    public String getContentType() {\n", "        return eContentType;\n", "    }\n", "\n", "    /**\n", "     * Returns the content.\n", "     *\n", "     * @return the content.\n", "     */\n", "    public IASN1OctetString getContent() {\n", "        return eContent;\n", "    }\n", "}\n"], "test_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.signatures.cms;\n", "\n", "import com.itextpdf.bouncycastleconnector.BouncyCastleFactoryCreator;\n", "import com.itextpdf.commons.bouncycastle.IBouncyCastleFactory;\n", "import com.itextpdf.commons.bouncycastle.asn1.IASN1EncodableVector;\n", "import com.itextpdf.commons.bouncycastle.asn1.IASN1Sequence;\n", "import com.itextpdf.commons.utils.Base64;\n", "import com.itextpdf.signatures.SecurityIDs;\n", "import com.itextpdf.test.ExtendedITextTest;\n", "import com.itextpdf.test.annotations.type.BouncyCastleUnitTest;\n", "import org.junit.Assert;\n", "import org.junit.Test;\n", "import org.junit.experimental.categories.Category;\n", "\n", "import java.io.IOException;\n", "\n", "@Category(BouncyCastleUnitTest.class)\n", "public class EncapsulatedContentInfoTest extends ExtendedITextTest {\n", "\n", "    private static final IBouncyCastleFactory FACTORY = BouncyCastleFactoryCreator.getFactory();\n", "    private static final String ENCODED_WITH_CONTENT_B64 = \"MH0GCyqGSIb3DQEJEAEEoG4EbDBqAgEBBglghkgBhv1sBwEwMTANBglg\" +\n", "            \"hkgBZQMEAgEFAAQgSbIIRqXY9+m1GfDgEnVFrQw//OObVVmEk4sLQ4uirygCEHHvE6CzVVvOraJrAlIXOO8YDzIwMjMxMDMxMDU1ODQ\" +\n", "            \"5WgIEwrIa7w==\";\n", "\n", "    @Test\n", "    public void testDeserializationWithoutContent() {\n", "        IASN1EncodableVector v = FACTORY.createASN1EncodableVector();\n", "        v.add(FACTORY.createASN1ObjectIdentifier(SecurityIDs.ID_PKCS7_DATA));\n", "        IASN1Sequence testData = FACTORY.createDERSequence(v);\n", "        EncapsulatedContentInfo sut = new EncapsulatedContentInfo(testData);\n", "        Assert.assertEquals(SecurityIDs.ID_PKCS7_DATA, sut.getContentType());\n", "        Assert.assertNull(sut.getContent());\n", "    }\n", "\n", "    @Test\n", "    public void testDeserializationWithContent() throws IOException {\n", "        IASN1Sequence testData = FACTORY.createASN1Sequence(Base64.decode(ENCODED_WITH_CONTENT_B64));\n", "        EncapsulatedContentInfo sut = new EncapsulatedContentInfo(testData);\n", "        Assert.assertEquals(\"1.2.840.113549.1.9.16.1.4\", sut.getContentType());\n", "        Assert.assertNotNull(sut.getContent());\n", "    }\n", "\n", "    @Test\n", "    public void testCreation() {\n", "        EncapsulatedContentInfo sut = new EncapsulatedContentInfo(SecurityIDs.ID_PKCS7_DATA);\n", "        Assert.assertEquals(SecurityIDs.ID_PKCS7_DATA, sut.getContentType());\n", "        Assert.assertNull(sut.getContent());\n", "    }\n", "\n", "    @Test\n", "    public void testCreationWithContent() {\n", "        EncapsulatedContentInfo sut = new EncapsulatedContentInfo(SecurityIDs.ID_PKCS7_DATA,\n", "                FACTORY.createDEROctetString(new byte[20]));\n", "        Assert.assertEquals(SecurityIDs.ID_PKCS7_DATA, sut.getContentType());\n", "        Assert.assertNotNull(sut.getContent());\n", "    }\n", "\n", "}\n"], "method_lines_dic": {"EncapsulatedContentInfo::::getContentType()": [97, 99], "EncapsulatedContentInfo::::getContent()": [106, 108]}, "test_method_lines_dic": {"EncapsulatedContentInfoTest::::testDeserializationWithoutContent()": [47, 55], "EncapsulatedContentInfoTest::::testDeserializationWithContent()": [57, 63], "EncapsulatedContentInfoTest::::testCreation()": [65, 70], "EncapsulatedContentInfoTest::::testCreationWithContent()": [72, 78]}, "reverse_method_lines_dic": {"97": "EncapsulatedContentInfo::::getContentType()", "98": "EncapsulatedContentInfo::::getContentType()", "99": "EncapsulatedContentInfo::::getContentType()", "106": "EncapsulatedContentInfo::::getContent()", "107": "EncapsulatedContentInfo::::getContent()", "108": "EncapsulatedContentInfo::::getContent()"}, "test_reverse_method_lines_dic": {"47": "EncapsulatedContentInfoTest::::testDeserializationWithoutContent()", "48": "EncapsulatedContentInfoTest::::testDeserializationWithoutContent()", "49": "EncapsulatedContentInfoTest::::testDeserializationWithoutContent()", "50": "EncapsulatedContentInfoTest::::testDeserializationWithoutContent()", "51": "EncapsulatedContentInfoTest::::testDeserializationWithoutContent()", "52": "EncapsulatedContentInfoTest::::testDeserializationWithoutContent()", "53": "EncapsulatedContentInfoTest::::testDeserializationWithoutContent()", "54": "EncapsulatedContentInfoTest::::testDeserializationWithoutContent()", "55": "EncapsulatedContentInfoTest::::testDeserializationWithoutContent()", "57": "EncapsulatedContentInfoTest::::testDeserializationWithContent()", "58": "EncapsulatedContentInfoTest::::testDeserializationWithContent()", "59": "EncapsulatedContentInfoTest::::testDeserializationWithContent()", "60": "EncapsulatedContentInfoTest::::testDeserializationWithContent()", "61": "EncapsulatedContentInfoTest::::testDeserializationWithContent()", "62": "EncapsulatedContentInfoTest::::testDeserializationWithContent()", "63": "EncapsulatedContentInfoTest::::testDeserializationWithContent()", "65": "EncapsulatedContentInfoTest::::testCreation()", "66": "EncapsulatedContentInfoTest::::testCreation()", "67": "EncapsulatedContentInfoTest::::testCreation()", "68": "EncapsulatedContentInfoTest::::testCreation()", "69": "EncapsulatedContentInfoTest::::testCreation()", "70": "EncapsulatedContentInfoTest::::testCreation()", "72": "EncapsulatedContentInfoTest::::testCreationWithContent()", "73": "EncapsulatedContentInfoTest::::testCreationWithContent()", "74": "EncapsulatedContentInfoTest::::testCreationWithContent()", "75": "EncapsulatedContentInfoTest::::testCreationWithContent()", "76": "EncapsulatedContentInfoTest::::testCreationWithContent()", "77": "EncapsulatedContentInfoTest::::testCreationWithContent()", "78": "EncapsulatedContentInfoTest::::testCreationWithContent()"}, "tests": [{"test_lines": [47, 55], "covered_lines": [37, 42, 78, 79, 80, 81, 82, 89, 90, 98, 107]}, {"test_lines": [57, 63], "covered_lines": [37, 42, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 98, 107]}, {"test_lines": [65, 70], "covered_lines": [37, 42, 67, 68, 69, 98, 107]}, {"test_lines": [72, 78], "covered_lines": [37, 42, 57, 58, 59, 60, 98, 107]}]}, "/bernard/dataset_construction/prep/repos/itext-java/sign/src/main/java/com/itextpdf/signatures/cms/CMSContainer.java": {"class_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.signatures.cms;\n", "\n", "import com.itextpdf.bouncycastleconnector.BouncyCastleFactoryCreator;\n", "import com.itextpdf.commons.bouncycastle.IBouncyCastleFactory;\n", "import com.itextpdf.commons.bouncycastle.asn1.IASN1Encodable;\n", "import com.itextpdf.commons.bouncycastle.asn1.IASN1EncodableVector;\n", "import com.itextpdf.commons.bouncycastle.asn1.IASN1InputStream;\n", "import com.itextpdf.commons.bouncycastle.asn1.IASN1Sequence;\n", "import com.itextpdf.commons.bouncycastle.asn1.IASN1Set;\n", "import com.itextpdf.commons.bouncycastle.asn1.IDERSet;\n", "import com.itextpdf.commons.bouncycastle.asn1.IASN1TaggedObject;\n", "import com.itextpdf.commons.bouncycastle.asn1.ocsp.IBasicOCSPResponse;\n", "import com.itextpdf.kernel.exceptions.PdfException;\n", "import com.itextpdf.signatures.CertificateUtil;\n", "import com.itextpdf.signatures.SecurityIDs;\n", "import com.itextpdf.signatures.exceptions.SignExceptionMessageConstant;\n", "\n", "import java.io.ByteArrayInputStream;\n", "import java.io.IOException;\n", "import java.io.InputStream;\n", "import java.security.cert.CertificateEncodingException;\n", "import java.security.cert.CertificateException;\n", "import java.security.cert.CRL;\n", "import java.security.cert.CRLException;\n", "import java.security.cert.X509Certificate;\n", "import java.util.ArrayList;\n", "import java.util.Arrays;\n", "import java.util.Collection;\n", "import java.util.Collections;\n", "\n", "/**\n", " * The CMS container which represents SignedData structure from\n", " * <a href=\"https://datatracker.ietf.org/doc/html/rfc5652#section-5.1\">rfc5652 Cryptographic Message Syntax (CMS)</a>\n", " */\n", "public class CMSContainer {\n", "\n", "    private static final IBouncyCastleFactory BC_FACTORY = BouncyCastleFactoryCreator.getFactory();\n", "\n", "    /**\n", "     * Collection to store revocation info other than OCSP and CRL responses, e.g. SCVP Request and Response.\n", "     */\n", "    final Collection<IASN1Sequence> otherRevocationInfo = new ArrayList<>();\n", "\n", "    /**\n", "     * Optional.\n", "     *\n", "     * <p>\n", "     * It is a collection of CRL revocation status information.\n", "     */\n", "    private final Collection<CRL> crls = new ArrayList<>();\n", "\n", "    /**\n", "     * Optional.\n", "     *\n", "     * <p>\n", "     * It is a collection of CRL revocation status information.\n", "     */\n", "    private final Collection<IBasicOCSPResponse> ocsps = new ArrayList<>();\n", "\n", "    /**\n", "     * This represents the signed content.\n", "     * In the case of a signed PDF document this will of type data with no content.\n", "     */\n", "    private EncapsulatedContentInfo encapContentInfo = new EncapsulatedContentInfo();\n", "\n", "    /**\n", "     * Optional.\n", "     *\n", "     * <p>\n", "     * It is intended to add all certificates to be able to validate the entire chain.\n", "     */\n", "    private Collection<X509Certificate> certificates = new ArrayList<>();\n", "\n", "    /**\n", "     * This class only supports one signer per signature field.\n", "     */\n", "    private SignerInfo signerInfo = new SignerInfo();\n", "\n", "    /**\n", "     * Creates an empty SignedData structure.\n", "     */\n", "    public CMSContainer() {\n", "        // Empty constructor.\n", "    }\n", "\n", "    /**\n", "     * Creates a SignedData structure from a serialized ASN1 structure.\n", "     *\n", "     * @param encodedCMSdata the serialized CMS container\n", "     *\n", "     * @throws IOException          if issues occur during ASN1 objects creation.\n", "     * @throws CertificateException if issues occur processing the embedded certificates.\n", "     * @throws CRLException         if CRL encoding error occurs.\n", "     */\n", "    public CMSContainer(byte[] encodedCMSdata) throws IOException, CertificateException, CRLException {\n", "        try (IASN1InputStream is = BC_FACTORY.createASN1InputStream(new ByteArrayInputStream(encodedCMSdata))) {\n", "            IASN1Sequence contentInfo = BC_FACTORY.createASN1Sequence(is.readObject());\n", "            IASN1Sequence signedData = BC_FACTORY.createASN1Sequence(\n", "                    BC_FACTORY.createASN1TaggedObject(contentInfo.getObjectAt(1)).getObject());\n", "\n", "            // The digest algorithm is retrieved from SignerInfo later on, here we just validate\n", "            // that there is exactly 1 digest algorithm.\n", "            IASN1Set digestAlgorithms = BC_FACTORY.createASN1Set(signedData.getObjectAt(1));\n", "            if (digestAlgorithms.size() > 1) {\n", "                throw new PdfException(SignExceptionMessageConstant.CMS_ONLY_ONE_SIGNER_ALLOWED);\n", "            }\n", "\n", "            IASN1Sequence lencapContentInfo = BC_FACTORY.createASN1Sequence(signedData.getObjectAt(2));\n", "            encapContentInfo = new EncapsulatedContentInfo(lencapContentInfo);\n", "            processCertificates(signedData);\n", "            int next = 4;\n", "            IASN1TaggedObject taggedObj = BC_FACTORY.createASN1TaggedObject(signedData.getObjectAt(next));\n", "            if (taggedObj != null) {\n", "                ++next;\n", "                CertificateUtil.retrieveRevocationInfoFromSignedData(taggedObj, this.crls, this.ocsps,\n", "                        this.otherRevocationInfo);\n", "            }\n", "            IASN1Set signerInfosS = BC_FACTORY.createASN1Set(signedData.getObjectAt(next));\n", "            if (signerInfosS.size() != 1) {\n", "                throw new PdfException(SignExceptionMessageConstant.CMS_ONLY_ONE_SIGNER_ALLOWED);\n", "            }\n", "            signerInfo = new SignerInfo(signerInfosS.getObjectAt(0), certificates);\n", "        } catch (NullPointerException npe) {\n", "            throw new PdfException(SignExceptionMessageConstant.CMS_INVALID_CONTAINER_STRUCTURE, npe);\n", "        }\n", "    }\n", "\n", "    /**\n", "     * This class only supports one signer per signature field.\n", "     *\n", "     * @param signerInfo the singerInfo\n", "     */\n", "    public void setSignerInfo(SignerInfo signerInfo) {\n", "        this.signerInfo = signerInfo;\n", "    }\n", "\n", "    /**\n", "     * This class only supports one signer per signature field.\n", "     *\n", "     * @return the singerInfo\n", "     */\n", "    public SignerInfo getSignerInfo() {\n", "        return signerInfo;\n", "    }\n", "\n", "    /**\n", "     * When all fields except for signer.signedAttributes.digest and signer.signature are completed\n", "     * it is possible to calculate the eventual size of the signature by serializing except for the signature\n", "     * (that depends on the digest and cypher but is set at 1024 bytes) and later added unsigned attributes like\n", "     * timestamps.\n", "     *\n", "     * @return the estimated size of the complete CMS container before signature is added, size for the signature is\n", "     * added, size for other attributes like timestamps is not.\n", "     *\n", "     * @throws CertificateEncodingException if an encoding error occurs in {@link X509Certificate}.\n", "     * @throws IOException                  if an I/O error occurs.\n", "     * @throws CRLException                 if CRL encoding error occurs.\n", "     */\n", "    public long getSizeEstimation() throws CertificateEncodingException, IOException, CRLException {\n", "        byte[] result = serialize(true);\n", "        return result.length;\n", "    }\n", "\n", "    /**\n", "     * Only version 1 is supported by this class.\n", "     *\n", "     * @return 1 as CMSversion\n", "     */\n", "    public int getCmsVersion() {\n", "        return 1;\n", "    }\n", "\n", "    /**\n", "     * The digest algorithm OID and parameters used by the signer.\n", "     * This class only supports one signer for use in pdf signatures, so only one digest algorithm is supported.\n", "     *\n", "     * <p>\n", "     * This field is set when adding the signerInfo.\n", "     *\n", "     * @return {@link AlgorithmIdentifier} digest algorithm.\n", "     */\n", "    public AlgorithmIdentifier getDigestAlgorithm() {\n", "        if (signerInfo == null) {\n", "            return null;\n", "        }\n", "        return signerInfo.getDigestAlgorithm();\n", "    }\n", "\n", "    /**\n", "     * This represents the signed content.\n", "     * In the case of a signed PDF document this will be of type data with no content.\n", "     *\n", "     * @return a representation of the data to be signed.\n", "     */\n", "    public EncapsulatedContentInfo getEncapContentInfo() {\n", "        return encapContentInfo;\n", "    }\n", "\n", "    /**\n", "     * This represents the signed content.\n", "     * In the case of a signed PDF document this will be of type data with no content.\n", "     * Defaults to 1.2.840.113549.1.7.1 {iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-7(7) id-data(1)}\n", "     *\n", "     * @param encapContentInfo a representation of the data to be signed.\n", "     */\n", "    public void setEncapContentInfo(EncapsulatedContentInfo encapContentInfo) {\n", "        this.encapContentInfo = encapContentInfo;\n", "    }\n", "\n", "    /**\n", "     * Adds a certificate.\n", "     *\n", "     * @param cert the certificate to be added\n", "     */\n", "    public void addCertificate(X509Certificate cert) {\n", "        certificates.add(cert);\n", "    }\n", "\n", "    /**\n", "     * Adds a set of certificates.\n", "     *\n", "     * @param certs the certificates to be added\n", "     */\n", "    public void addCertificates(X509Certificate[] certs) {\n", "        certificates = Arrays.asList(certs);\n", "    }\n", "\n", "    /**\n", "     * Retrieves a copy of the list of certificates.\n", "     *\n", "     * @return the list of certificates to be used for signing and certificate validation\n", "     */\n", "    public Collection<X509Certificate> getCertificates() {\n", "        return Collections.unmodifiableCollection(certificates);\n", "    }\n", "\n", "    /**\n", "     * Retrieves a copy of the list of CRLs.\n", "     *\n", "     * @return the list of CRL revocation info.\n", "     */\n", "    public Collection<CRL> getCrls() {\n", "        return Collections.unmodifiableCollection(crls);\n", "    }\n", "\n", "    /**\n", "     * Adds a CRL response to the CMS container.\n", "     *\n", "     * @param crl the CRL response to be added.\n", "     */\n", "    public void addCrl(CRL crl) {\n", "        crls.add(crl);\n", "    }\n", "\n", "    /**\n", "     * Retrieves a copy of the list of OCSPs.\n", "     *\n", "     * @return the list of OCSP revocation info.\n", "     */\n", "    public Collection<IBasicOCSPResponse> getOcsps() {\n", "        return Collections.unmodifiableCollection(ocsps);\n", "    }\n", "\n", "    /**\n", "     * Adds an OCSP response to the CMS container.\n", "     *\n", "     * @param ocspResponse the OCSP response to be added.\n", "     */\n", "    public void addOcsp(IBasicOCSPResponse ocspResponse) {\n", "        ocsps.add(ocspResponse);\n", "    }\n", "\n", "    /**\n", "     * Sets the Signed Attributes of the signer info to this serialized version.\n", "     * The signed attributes will become read-only.\n", "     *\n", "     * @param signedAttributesData the serialized Signed Attributes\n", "     */\n", "    public void setSerializedSignedAttributes(byte[] signedAttributesData) {\n", "        signerInfo.setSerializedSignedAttributes(signedAttributesData);\n", "    }\n", "\n", "    /**\n", "     * Retrieves the encoded signed attributes of the signer info.\n", "     * This makes the signed attributes read only.\n", "     *\n", "     * @return the encoded signed attributes of the signer info.\n", "     *\n", "     * @throws IOException if issues occur during ASN1 objects creation.\n", "     */\n", "    public byte[] getSerializedSignedAttributes() throws IOException {\n", "        if (signerInfo == null) {\n", "            throw new IllegalStateException(SignExceptionMessageConstant.CMS_SIGNERINFO_NOT_INITIALIZED);\n", "        }\n", "        return signerInfo.serializeSignedAttributes();\n", "    }\n", "\n", "    /**\n", "     * Serializes the SignedData structure and makes the signer infos signed attributes read only.\n", "     *\n", "     * @return the encoded DignedData structure.\n", "     *\n", "     * @throws CertificateEncodingException if errors occur during certificate processing.\n", "     * @throws IOException                  if issues occur during ASN1 objects creation.\n", "     * @throws CRLException                 if CRL encoding error occurs.\n", "     */\n", "    public byte[] serialize() throws CertificateEncodingException, IOException, CRLException {\n", "        return serialize(false);\n", "    }\n", "\n", "    private byte[] serialize(boolean forEstimation) throws CertificateEncodingException, IOException, CRLException {\n", "    /* ContentInfo SEQUENCE\n", "           ContentType OBJECT IDENTIFIER (1.2.840.113549.1.7.2)\n", "           Content [0] SEQUENCE\n", "               SignedData SEQUENCE\n", "                 version INTEGER\n", "                 digestAlgorithms SET\n", "                     DigestAlgorithmIdentifier SEQUENCE\n", "                         algorithm OBJECT IDENTIFIER\n", "                         parameters ANY\n", "                 encapContentInfo EncapsulatedContentInfo SEQUENCE\n", "                         eContentType ContentType OBJECT IDENTIFIER (1.2.840.113549.1.7.1 data)\n", "                 certificates CertificateSet [0] SET\n", "                         CertificateChoices SEQUENCE\n", "                             tbsCertificate TBSCertificate SEQUENCE\n", "                 crls RevocationInfoChoices [1] SET\n", "                         RevocationInfoChoice CHOICE {\n", "                             crl CertificateList SEQUENCE,\n", "                             other OtherRevocationInfoFormat SEQUENCE\n", "                                    otherRevInfoFormat OBJECT IDENTIFIER,\n", "                                    otherRevInfo ANY DEFINED BY otherRevInfoFormat (SEQUENCE for OCSP)\n", "                         }\n", "                 signerInfos SignerInfos SET\n", "     */\n", "\n", "        IASN1EncodableVector contentInfoV = BC_FACTORY.createASN1EncodableVector();\n", "        contentInfoV.add(BC_FACTORY.createASN1ObjectIdentifier(SecurityIDs.ID_PKCS7_SIGNED_DATA));\n", "        IASN1EncodableVector singedDataV = BC_FACTORY.createASN1EncodableVector();\n", "        singedDataV.add(BC_FACTORY.createASN1Integer(getCmsVersion())); // version\n", "        IASN1EncodableVector digestAlgorithmsV = BC_FACTORY.createASN1EncodableVector();\n", "        digestAlgorithmsV.add(getDigestAlgorithm().getAsASN1Sequence());\n", "        singedDataV.add(BC_FACTORY.createDERSet(digestAlgorithmsV));\n", "        IASN1EncodableVector encapContentInfoV = BC_FACTORY.createASN1EncodableVector();\n", "        encapContentInfoV.add(BC_FACTORY.createASN1ObjectIdentifier(encapContentInfo.getContentType()));\n", "        if (encapContentInfo.getContent() != null) {\n", "            encapContentInfoV.add(encapContentInfo.getContent());\n", "        }\n", "        singedDataV.add(BC_FACTORY.createDERSequence(encapContentInfoV));\n", "        IASN1EncodableVector certificateSetV = BC_FACTORY.createASN1EncodableVector();\n", "        for (X509Certificate cert : certificates) {\n", "            certificateSetV.add(BC_FACTORY.createASN1Primitive(cert.getEncoded()));\n", "        }\n", "        singedDataV.add(BC_FACTORY.createDERTaggedObject(false, 0, BC_FACTORY.createDERSet(certificateSetV)));\n", "\n", "        IDERSet revInfoChoices =\n", "                CertificateUtil.createRevocationInfoChoices(this.crls, this.ocsps, this.otherRevocationInfo);\n", "        if (revInfoChoices != null) {\n", "            singedDataV.add(BC_FACTORY.createDERTaggedObject(false, 1, revInfoChoices));\n", "        }\n", "\n", "        IASN1EncodableVector signerInfosV = BC_FACTORY.createASN1EncodableVector();\n", "        signerInfosV.add(signerInfo.getAsDerSequence(forEstimation));\n", "        singedDataV.add(BC_FACTORY.createDERSet(signerInfosV));\n", "        contentInfoV.add(BC_FACTORY.createDERTaggedObject(0, BC_FACTORY.createDERSequence(singedDataV)));\n", "        return BC_FACTORY.createDERSequence(contentInfoV).getEncoded();\n", "    }\n", "\n", "    private void processCertificates(IASN1Sequence signedData) throws CertificateException, IOException {\n", "        // Certificates are optional according to the specs, but we do require at least the signing certificate.\n", "        IASN1TaggedObject taggedCertificatesSet = BC_FACTORY.createASN1TaggedObject(signedData.getObjectAt(3));\n", "        if (taggedCertificatesSet == null) {\n", "            throw new PdfException(SignExceptionMessageConstant.CMS_MISSING_CERTIFICATES);\n", "        }\n", "        IASN1Set certificatesSet = BC_FACTORY.createASN1Set(taggedCertificatesSet, false);\n", "        if (certificatesSet.isNull() || certificatesSet.size() == 0) {\n", "            throw new PdfException(SignExceptionMessageConstant.CMS_MISSING_CERTIFICATES);\n", "        }\n", "        for (IASN1Encodable certObj : certificatesSet.toArray()) {\n", "            try (InputStream cis = new ByteArrayInputStream(certObj.toASN1Primitive().\n", "                    getEncoded(BC_FACTORY.createASN1Encoding().getDer()))) {\n", "                certificates.add((X509Certificate) CertificateUtil.generateCertificate(cis));\n", "            }\n", "        }\n", "    }\n", "}\n"], "test_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.signatures.cms;\n", "\n", "import com.itextpdf.bouncycastleconnector.BouncyCastleFactoryCreator;\n", "import com.itextpdf.commons.bouncycastle.IBouncyCastleFactory;\n", "import com.itextpdf.commons.bouncycastle.asn1.IASN1InputStream;\n", "import com.itextpdf.commons.bouncycastle.asn1.IASN1Primitive;\n", "import com.itextpdf.commons.bouncycastle.operator.AbstractOperatorCreationException;\n", "import com.itextpdf.commons.bouncycastle.pkcs.AbstractPKCSException;\n", "import com.itextpdf.commons.utils.Base64;\n", "import com.itextpdf.kernel.exceptions.PdfException;\n", "import com.itextpdf.kernel.pdf.PdfName;\n", "import com.itextpdf.signatures.DigestAlgorithms;\n", "import com.itextpdf.signatures.PdfPKCS7;\n", "import com.itextpdf.signatures.SecurityIDs;\n", "import com.itextpdf.signatures.SignatureMechanisms;\n", "import com.itextpdf.signatures.exceptions.SignExceptionMessageConstant;\n", "import com.itextpdf.signatures.logs.SignLogMessageConstant;\n", "import com.itextpdf.signatures.testutils.PemFileHelper;\n", "import com.itextpdf.signatures.testutils.SignTestPortUtil;\n", "import com.itextpdf.signatures.testutils.builder.TestCrlBuilder;\n", "import com.itextpdf.test.ExtendedITextTest;\n", "import com.itextpdf.test.annotations.LogMessage;\n", "import com.itextpdf.test.annotations.LogMessages;\n", "import com.itextpdf.test.annotations.type.BouncyCastleUnitTest;\n", "import org.junit.Assert;\n", "import org.junit.Before;\n", "import org.junit.Test;\n", "import org.junit.experimental.categories.Category;\n", "\n", "import java.io.ByteArrayInputStream;\n", "import java.io.IOException;\n", "import java.nio.file.Files;\n", "import java.nio.file.Paths;\n", "import java.security.NoSuchAlgorithmException;\n", "import java.security.NoSuchProviderException;\n", "import java.security.PrivateKey;\n", "import java.security.Security;\n", "import java.security.cert.Certificate;\n", "import java.security.cert.CertificateEncodingException;\n", "import java.security.cert.CertificateException;\n", "import java.security.cert.CRLException;\n", "import java.security.cert.X509Certificate;\n", "import java.util.ArrayList;\n", "import java.util.Collections;\n", "\n", "@Category(BouncyCastleUnitTest.class)\n", "public class CMSContainerTest extends ExtendedITextTest {\n", "\n", "    private static final IBouncyCastleFactory FACTORY = BouncyCastleFactoryCreator.getFactory();\n", "    private static final String SOURCE_FOLDER = \"./src/test/resources/com/itextpdf/signatures/cms/CMSContainerTest/\";\n", "    private static final String CERTS_SRC = \"./src/test/resources/com/itextpdf/signatures/certs/\";\n", "    private static final char[] PASSWORD = \"testpassphrase\".toCharArray();\n", "\n", "    private X509Certificate[] chain;\n", "    private X509Certificate signCert;\n", "\n", "    private byte[] testCrlResponse;\n", "\n", "    @Before\n", "    public void init()\n", "            throws IOException, CertificateException, AbstractPKCSException, AbstractOperatorCreationException {\n", "        Security.addProvider(FACTORY.getProvider());\n", "        Certificate[] certChain = PemFileHelper.readFirstChain(CERTS_SRC + \"signCertRsaWithChain.pem\");\n", "        chain = new X509Certificate[certChain.length];\n", "        for (int i = 0; i < certChain.length; i++) {\n", "            chain[i] = (X509Certificate) certChain[i];\n", "        }\n", "        signCert = chain[0];\n", "        PrivateKey caPrivateKey =\n", "                PemFileHelper.readFirstKey(CERTS_SRC + \"signCertRsaWithChain.pem\", PASSWORD);\n", "        TestCrlBuilder testCrlBuilder = new TestCrlBuilder(signCert, caPrivateKey);\n", "        testCrlBuilder.addCrlEntry(signCert, FACTORY.createCRLReason().getKeyCompromise());\n", "        testCrlResponse = testCrlBuilder.makeCrl();\n", "    }\n", "\n", "    @Test\n", "    public void testSerialize() throws CertificateEncodingException, IOException, NoSuchAlgorithmException,\n", "            NoSuchProviderException, CRLException {\n", "        CMSContainer sut = new CMSContainer();\n", "        sut.addCertificates((X509Certificate[]) chain);\n", "\n", "        SignerInfo si = new SignerInfo();\n", "        si.setSigningCertificate(signCert);\n", "        ArrayList<byte[]> fakeOcspREsponses = new ArrayList<>();\n", "        fakeOcspREsponses.add(new byte[250]);\n", "        si.setMessageDigest(new byte[256]);\n", "        si.setOcspResponses(fakeOcspREsponses);\n", "        si.setCrlResponses(Collections.singletonList(testCrlResponse));\n", "        si.setDigestAlgorithm(new AlgorithmIdentifier(SecurityIDs.ID_SHA512));\n", "        si.setSigningCertificateAndAddToSignedAttributes(signCert, SecurityIDs.ID_SHA512);\n", "        si.setSignatureAlgorithm(new AlgorithmIdentifier(\n", "                SignatureMechanisms.getSignatureMechanismOid(\"RSA\", DigestAlgorithms.SHA512)));\n", "        si.setSignature(new byte[256]);\n", "        sut.setSignerInfo(si);\n", "\n", "        byte[] serRes = sut.serialize();\n", "        Assert.assertEquals(serializedAsString(Base64.decode(CMSTestHelper.EXPECTED_RESULT_CMS_CONTAINER_TEST)),\n", "                serializedAsString(serRes));\n", "    }\n", "\n", "    @Test\n", "    public void testSerializationWithRevocationData() throws CertificateException, IOException, NoSuchAlgorithmException,\n", "            NoSuchProviderException, CRLException {\n", "        CMSContainer sut = new CMSContainer();\n", "        sut.addCertificates((X509Certificate[]) chain);\n", "        sut.addCrl(SignTestPortUtil.parseCrlFromStream(new ByteArrayInputStream(testCrlResponse)));\n", "        sut.addOcsp(FACTORY.createBasicOCSPResponse(FACTORY.createASN1InputStream(\n", "                Files.readAllBytes(Paths.get(SOURCE_FOLDER, \"simpleOCSPResponse.bin\"))).readObject()));\n", "\n", "        SignerInfo si = new SignerInfo();\n", "        si.setSigningCertificate(signCert);\n", "        si.setMessageDigest(new byte[256]);\n", "        si.setDigestAlgorithm(new AlgorithmIdentifier(SecurityIDs.ID_SHA512));\n", "        si.setSigningCertificateAndAddToSignedAttributes(signCert, SecurityIDs.ID_SHA512);\n", "        si.setSignatureAlgorithm(new AlgorithmIdentifier(\n", "                SignatureMechanisms.getSignatureMechanismOid(\"RSA\", DigestAlgorithms.SHA512)));\n", "        si.setSignature(new byte[256]);\n", "        sut.setSignerInfo(si);\n", "\n", "        byte[] serRes = sut.serialize();\n", "\n", "        Assert.assertEquals(serializedAsString(Base64.decode(CMSTestHelper.CMS_CONTAINER_WITH_OCSP_AND_CRL)),\n", "                serializedAsString(serRes));\n", "    }\n", "\n", "    @Test\n", "    public void testGetSizeEstimation() throws CertificateEncodingException, IOException, NoSuchAlgorithmException,\n", "            NoSuchProviderException, CRLException {\n", "        CMSContainer sut = new CMSContainer();\n", "        sut.addCertificates((X509Certificate[]) chain);\n", "\n", "        SignerInfo si = new SignerInfo();\n", "        si.setSigningCertificate(signCert);\n", "        ArrayList<byte[]> fakeOcspREsponses = new ArrayList<>();\n", "        fakeOcspREsponses.add(new byte[250]);\n", "        si.setMessageDigest(new byte[256]);\n", "        si.setOcspResponses(fakeOcspREsponses);\n", "        si.setCrlResponses(Collections.singletonList(testCrlResponse));\n", "        si.setDigestAlgorithm(new AlgorithmIdentifier(SecurityIDs.ID_SHA512));\n", "        si.setSignatureAlgorithm(new AlgorithmIdentifier(\n", "                SignatureMechanisms.getSignatureMechanismOid(\"RSA\", DigestAlgorithms.SHA512)));\n", "        si.setSigningCertificateAndAddToSignedAttributes(signCert, SecurityIDs.ID_SHA512);\n", "        si.setSignature(new byte[256]);\n", "        sut.setSignerInfo(si);\n", "\n", "        long size = sut.getSizeEstimation();\n", "\n", "        Assert.assertEquals(4821, size);\n", "    }\n", "\n", "    @Test\n", "    public void testDeserialization() throws CertificateException, IOException, CRLException {\n", "        byte[] rawData = Base64.decode(CMSTestHelper.EXPECTED_RESULT_CMS_CONTAINER_TEST);\n", "        CMSContainer sd = new CMSContainer(rawData);\n", "        Assert.assertEquals(\"2.16.840.1.101.3.4.2.3\", sd.getDigestAlgorithm().getAlgorithmOid());\n", "        Assert.assertEquals(\"1.2.840.113549.1.7.1\", sd.getEncapContentInfo().getContentType());\n", "        Assert.assertEquals(3, sd.getCertificates().size());\n", "        Assert.assertEquals(0, sd.getCrls().size());\n", "        Assert.assertEquals(0, sd.getOcsps().size());\n", "        for (X509Certificate certificate : chain) {\n", "            Assert.assertTrue(sd.getCertificates().stream()\n", "                    .anyMatch(c -> certificate.getSerialNumber().toString().equals(c.getSerialNumber().toString())));\n", "        }\n", "        Assert.assertEquals(chain[0].getSerialNumber().toString(),\n", "                sd.getSignerInfo().getSigningCertificate().getSerialNumber().toString());\n", "    }\n", "\n", "    @Test\n", "    public void testDeserializationWithRevocationData() throws CertificateException, IOException, CRLException {\n", "        byte[] rawData = Base64.decode(CMSTestHelper.CMS_CONTAINER_WITH_OCSP_AND_CRL);\n", "        CMSContainer sd = new CMSContainer(rawData);\n", "        Assert.assertEquals(\"2.16.840.1.101.3.4.2.3\", sd.getDigestAlgorithm().getAlgorithmOid());\n", "        Assert.assertEquals(\"1.2.840.113549.1.7.1\", sd.getEncapContentInfo().getContentType());\n", "        Assert.assertEquals(3, sd.getCertificates().size());\n", "        Assert.assertEquals(1, sd.getCrls().size());\n", "        Assert.assertEquals(1, sd.getOcsps().size());\n", "        for (X509Certificate certificate : chain) {\n", "            Assert.assertTrue(sd.getCertificates().stream()\n", "                    .anyMatch(c -> certificate.getSerialNumber().toString().equals(c.getSerialNumber().toString())));\n", "        }\n", "        Assert.assertEquals(chain[0].getSerialNumber().toString(),\n", "                sd.getSignerInfo().getSigningCertificate().getSerialNumber().toString());\n", "    }\n", "\n", "    @Test\n", "    @LogMessages(messages = @LogMessage(messageTemplate = SignLogMessageConstant.UNABLE_TO_PARSE_REV_INFO))\n", "    public void testDeserializationWithIncorrectRevocationData() throws CertificateException, IOException, CRLException {\n", "        byte[] rawData = Base64.decode(CMSTestHelper.CMS_CONTAINER_WITH_INCORRECT_REV_INFO);\n", "        CMSContainer sd = new CMSContainer(rawData);\n", "        Assert.assertEquals(1, sd.getCrls().size());\n", "        Assert.assertEquals(1, sd.getOcsps().size());\n", "        Assert.assertEquals(1, sd.otherRevocationInfo.size());\n", "    }\n", "\n", "    @Test\n", "    public void createPkcs7WithRevocationInfoTest() {\n", "        PdfPKCS7 pkcs7 = new PdfPKCS7(Base64.decode(CMSTestHelper.CMS_CONTAINER_WITH_OCSP_AND_CRL),\n", "                PdfName.Adbe_pkcs7_detached, FACTORY.getProviderName());\n", "        Assert.assertEquals(1, pkcs7.getSignedDataCRLs().size());\n", "        Assert.assertEquals(1, pkcs7.getSignedDataOcsps().size());\n", "    }\n", "\n", "    @Test\n", "    public void testMultipleDigestAlgorithms() {\n", "        byte[] rawData = Base64.decode(CMSTestHelper.SERIALIZED_B64_2DIGEST_ALGOS);\n", "        Exception e = Assert.assertThrows(PdfException.class, () -> {\n", "            CMSContainer sd = new CMSContainer(rawData);\n", "        });\n", "        Assert.assertEquals(SignExceptionMessageConstant.CMS_ONLY_ONE_SIGNER_ALLOWED, e.getMessage());\n", "    }\n", "\n", "\n", "    @Test\n", "    public void testMultipleSignerInfos() {\n", "        byte[] rawData = Base64.decode(CMSTestHelper.SERIALIZED_B64_2SIGNERS);\n", "        Exception e = Assert.assertThrows(PdfException.class, () -> {\n", "            CMSContainer sd = new CMSContainer(rawData);\n", "        });\n", "        Assert.assertEquals(SignExceptionMessageConstant.CMS_ONLY_ONE_SIGNER_ALLOWED, e.getMessage());\n", "    }\n", "\n", "    @Test\n", "    public void testCertificatesMissing() {\n", "        byte[] rawData = Base64.decode(CMSTestHelper.SERIALIZED_B64_MISSING_CERTIFICATES);\n", "        Exception e = Assert.assertThrows(PdfException.class, () -> {\n", "            CMSContainer sd = new CMSContainer(rawData);\n", "        });\n", "        Assert.assertEquals(SignExceptionMessageConstant.CMS_MISSING_CERTIFICATES, e.getMessage());\n", "    }\n", "\n", "    @Test\n", "    public void testCertificatesEmpty() {\n", "        byte[] rawData = Base64.decode(CMSTestHelper.SERIALIZED_B64_EMPTY_CERTIFICATES);\n", "        Exception e = Assert.assertThrows(PdfException.class, () -> {\n", "            CMSContainer sd = new CMSContainer(rawData);\n", "        });\n", "        Assert.assertEquals(SignExceptionMessageConstant.CMS_MISSING_CERTIFICATES, e.getMessage());\n", "    }\n", "\n", "    private String toUnixStringEnding(String in) {\n", "        return in.replace(\"\\r\\n\", \"\\n\");\n", "    }\n", "\n", "    private String serializedAsString(byte[] serialized) throws IOException {\n", "        IASN1InputStream is = FACTORY.createASN1InputStream(serialized);\n", "        IASN1Primitive obj1 = is.readObject();\n", "        return toUnixStringEnding(FACTORY.createASN1Dump().dumpAsString(obj1, true));\n", "    }\n", "}\n"], "method_lines_dic": {"CMSContainer::::setSignerInfo(com.itextpdf.signatures.cms.SignerInfo)": [155, 157], "CMSContainer::::getSignerInfo()": [164, 166], "CMSContainer::::getSizeEstimation()": [181, 184], "CMSContainer::::getCmsVersion()": [191, 193], "CMSContainer::::getDigestAlgorithm()": [204, 209], "CMSContainer::::getEncapContentInfo()": [217, 219], "CMSContainer::::setEncapContentInfo(com.itextpdf.signatures.cms.EncapsulatedContentInfo)": [228, 230], "CMSContainer::::addCertificate(java.security.cert.X509Certificate)": [237, 239], "CMSContainer::::addCertificates(java.security.cert.X509Certificate[])": [246, 248], "CMSContainer::::getCertificates()": [255, 257], "CMSContainer::::getCrls()": [264, 266], "CMSContainer::::addCrl(java.security.cert.CRL)": [273, 275], "CMSContainer::::getOcsps()": [282, 284], "CMSContainer::::setSerializedSignedAttributes(byte[])": [301, 303], "CMSContainer::::getSerializedSignedAttributes()": [313, 318], "CMSContainer::::serialize()": [329, 331], "CMSContainer::::serialize(boolean)": [333, 388]}, "test_method_lines_dic": {"CMSContainerTest::::init()": [81, 96], "CMSContainerTest::::testSerialize()": [98, 121], "CMSContainerTest::::testSerializationWithRevocationData()": [123, 146], "CMSContainerTest::::testGetSizeEstimation()": [148, 171], "CMSContainerTest::::testDeserialization()": [173, 188], "CMSContainerTest::::testDeserializationWithRevocationData()": [190, 205], "CMSContainerTest::::testDeserializationWithIncorrectRevocationData()": [207, 215], "CMSContainerTest::::createPkcs7WithRevocationInfoTest()": [217, 223], "CMSContainerTest::::testMultipleDigestAlgorithms()": [225, 232], "CMSContainerTest::::testMultipleSignerInfos()": [235, 242], "CMSContainerTest::::testCertificatesMissing()": [244, 251], "CMSContainerTest::::testCertificatesEmpty()": [253, 260], "CMSContainerTest::::toUnixStringEnding(java.lang.String)": [262, 264], "CMSContainerTest::::serializedAsString(byte[])": [266, 270]}, "reverse_method_lines_dic": {"155": "CMSContainer::::setSignerInfo(com.itextpdf.signatures.cms.SignerInfo)", "156": "CMSContainer::::setSignerInfo(com.itextpdf.signatures.cms.SignerInfo)", "157": "CMSContainer::::setSignerInfo(com.itextpdf.signatures.cms.SignerInfo)", "164": "CMSContainer::::getSignerInfo()", "165": "CMSContainer::::getSignerInfo()", "166": "CMSContainer::::getSignerInfo()", "181": "CMSContainer::::getSizeEstimation()", "182": "CMSContainer::::getSizeEstimation()", "183": "CMSContainer::::getSizeEstimation()", "184": "CMSContainer::::getSizeEstimation()", "191": "CMSContainer::::getCmsVersion()", "192": "CMSContainer::::getCmsVersion()", "193": "CMSContainer::::getCmsVersion()", "204": "CMSContainer::::getDigestAlgorithm()", "205": "CMSContainer::::getDigestAlgorithm()", "206": "CMSContainer::::getDigestAlgorithm()", "207": "CMSContainer::::getDigestAlgorithm()", "208": "CMSContainer::::getDigestAlgorithm()", "209": "CMSContainer::::getDigestAlgorithm()", "217": "CMSContainer::::getEncapContentInfo()", "218": "CMSContainer::::getEncapContentInfo()", "219": "CMSContainer::::getEncapContentInfo()", "228": "CMSContainer::::setEncapContentInfo(com.itextpdf.signatures.cms.EncapsulatedContentInfo)", "229": "CMSContainer::::setEncapContentInfo(com.itextpdf.signatures.cms.EncapsulatedContentInfo)", "230": "CMSContainer::::setEncapContentInfo(com.itextpdf.signatures.cms.EncapsulatedContentInfo)", "237": "CMSContainer::::addCertificate(java.security.cert.X509Certificate)", "238": "CMSContainer::::addCertificate(java.security.cert.X509Certificate)", "239": "CMSContainer::::addCertificate(java.security.cert.X509Certificate)", "246": "CMSContainer::::addCertificates(java.security.cert.X509Certificate[])", "247": "CMSContainer::::addCertificates(java.security.cert.X509Certificate[])", "248": "CMSContainer::::addCertificates(java.security.cert.X509Certificate[])", "255": "CMSContainer::::getCertificates()", "256": "CMSContainer::::getCertificates()", "257": "CMSContainer::::getCertificates()", "264": "CMSContainer::::getCrls()", "265": "CMSContainer::::getCrls()", "266": "CMSContainer::::getCrls()", "273": "CMSContainer::::addCrl(java.security.cert.CRL)", "274": "CMSContainer::::addCrl(java.security.cert.CRL)", "275": "CMSContainer::::addCrl(java.security.cert.CRL)", "282": "CMSContainer::::getOcsps()", "283": "CMSContainer::::getOcsps()", "284": "CMSContainer::::getOcsps()", "301": "CMSContainer::::setSerializedSignedAttributes(byte[])", "302": "CMSContainer::::setSerializedSignedAttributes(byte[])", "303": "CMSContainer::::setSerializedSignedAttributes(byte[])", "313": "CMSContainer::::getSerializedSignedAttributes()", "314": "CMSContainer::::getSerializedSignedAttributes()", "315": "CMSContainer::::getSerializedSignedAttributes()", "316": "CMSContainer::::getSerializedSignedAttributes()", "317": "CMSContainer::::getSerializedSignedAttributes()", "318": "CMSContainer::::getSerializedSignedAttributes()", "329": "CMSContainer::::serialize()", "330": "CMSContainer::::serialize()", "331": "CMSContainer::::serialize()", "333": "CMSContainer::::serialize(boolean)", "334": "CMSContainer::::serialize(boolean)", "335": "CMSContainer::::serialize(boolean)", "336": "CMSContainer::::serialize(boolean)", "337": "CMSContainer::::serialize(boolean)", "338": "CMSContainer::::serialize(boolean)", "339": "CMSContainer::::serialize(boolean)", "340": "CMSContainer::::serialize(boolean)", "341": "CMSContainer::::serialize(boolean)", "342": "CMSContainer::::serialize(boolean)", "343": "CMSContainer::::serialize(boolean)", "344": "CMSContainer::::serialize(boolean)", "345": "CMSContainer::::serialize(boolean)", "346": "CMSContainer::::serialize(boolean)", "347": "CMSContainer::::serialize(boolean)", "348": "CMSContainer::::serialize(boolean)", "349": "CMSContainer::::serialize(boolean)", "350": "CMSContainer::::serialize(boolean)", "351": "CMSContainer::::serialize(boolean)", "352": "CMSContainer::::serialize(boolean)", "353": "CMSContainer::::serialize(boolean)", "354": "CMSContainer::::serialize(boolean)", "355": "CMSContainer::::serialize(boolean)", "356": "CMSContainer::::serialize(boolean)", "357": "CMSContainer::::serialize(boolean)", "358": "CMSContainer::::serialize(boolean)", "359": "CMSContainer::::serialize(boolean)", "360": "CMSContainer::::serialize(boolean)", "361": "CMSContainer::::serialize(boolean)", "362": "CMSContainer::::serialize(boolean)", "363": "CMSContainer::::serialize(boolean)", "364": "CMSContainer::::serialize(boolean)", "365": "CMSContainer::::serialize(boolean)", "366": "CMSContainer::::serialize(boolean)", "367": "CMSContainer::::serialize(boolean)", "368": "CMSContainer::::serialize(boolean)", "369": "CMSContainer::::serialize(boolean)", "370": "CMSContainer::::serialize(boolean)", "371": "CMSContainer::::serialize(boolean)", "372": "CMSContainer::::serialize(boolean)", "373": "CMSContainer::::serialize(boolean)", "374": "CMSContainer::::serialize(boolean)", "375": "CMSContainer::::serialize(boolean)", "376": "CMSContainer::::serialize(boolean)", "377": "CMSContainer::::serialize(boolean)", "378": "CMSContainer::::serialize(boolean)", "379": "CMSContainer::::serialize(boolean)", "380": "CMSContainer::::serialize(boolean)", "381": "CMSContainer::::serialize(boolean)", "382": "CMSContainer::::serialize(boolean)", "383": "CMSContainer::::serialize(boolean)", "384": "CMSContainer::::serialize(boolean)", "385": "CMSContainer::::serialize(boolean)", "386": "CMSContainer::::serialize(boolean)", "387": "CMSContainer::::serialize(boolean)", "388": "CMSContainer::::serialize(boolean)"}, "test_reverse_method_lines_dic": {"81": "CMSContainerTest::::init()", "82": "CMSContainerTest::::init()", "83": "CMSContainerTest::::init()", "84": "CMSContainerTest::::init()", "85": "CMSContainerTest::::init()", "86": "CMSContainerTest::::init()", "87": "CMSContainerTest::::init()", "88": "CMSContainerTest::::init()", "89": "CMSContainerTest::::init()", "90": "CMSContainerTest::::init()", "91": "CMSContainerTest::::init()", "92": "CMSContainerTest::::init()", "93": "CMSContainerTest::::init()", "94": "CMSContainerTest::::init()", "95": "CMSContainerTest::::init()", "96": "CMSContainerTest::::init()", "98": "CMSContainerTest::::testSerialize()", "99": "CMSContainerTest::::testSerialize()", "100": "CMSContainerTest::::testSerialize()", "101": "CMSContainerTest::::testSerialize()", "102": "CMSContainerTest::::testSerialize()", "103": "CMSContainerTest::::testSerialize()", "104": "CMSContainerTest::::testSerialize()", "105": "CMSContainerTest::::testSerialize()", "106": "CMSContainerTest::::testSerialize()", "107": "CMSContainerTest::::testSerialize()", "108": "CMSContainerTest::::testSerialize()", "109": "CMSContainerTest::::testSerialize()", "110": "CMSContainerTest::::testSerialize()", "111": "CMSContainerTest::::testSerialize()", "112": "CMSContainerTest::::testSerialize()", "113": "CMSContainerTest::::testSerialize()", "114": "CMSContainerTest::::testSerialize()", "115": "CMSContainerTest::::testSerialize()", "116": "CMSContainerTest::::testSerialize()", "117": "CMSContainerTest::::testSerialize()", "118": "CMSContainerTest::::testSerialize()", "119": "CMSContainerTest::::testSerialize()", "120": "CMSContainerTest::::testSerialize()", "121": "CMSContainerTest::::testSerialize()", "123": "CMSContainerTest::::testSerializationWithRevocationData()", "124": "CMSContainerTest::::testSerializationWithRevocationData()", "125": "CMSContainerTest::::testSerializationWithRevocationData()", "126": "CMSContainerTest::::testSerializationWithRevocationData()", "127": "CMSContainerTest::::testSerializationWithRevocationData()", "128": "CMSContainerTest::::testSerializationWithRevocationData()", "129": "CMSContainerTest::::testSerializationWithRevocationData()", "130": "CMSContainerTest::::testSerializationWithRevocationData()", "131": "CMSContainerTest::::testSerializationWithRevocationData()", "132": "CMSContainerTest::::testSerializationWithRevocationData()", "133": "CMSContainerTest::::testSerializationWithRevocationData()", "134": "CMSContainerTest::::testSerializationWithRevocationData()", "135": "CMSContainerTest::::testSerializationWithRevocationData()", "136": "CMSContainerTest::::testSerializationWithRevocationData()", "137": "CMSContainerTest::::testSerializationWithRevocationData()", "138": "CMSContainerTest::::testSerializationWithRevocationData()", "139": "CMSContainerTest::::testSerializationWithRevocationData()", "140": "CMSContainerTest::::testSerializationWithRevocationData()", "141": "CMSContainerTest::::testSerializationWithRevocationData()", "142": "CMSContainerTest::::testSerializationWithRevocationData()", "143": "CMSContainerTest::::testSerializationWithRevocationData()", "144": "CMSContainerTest::::testSerializationWithRevocationData()", "145": "CMSContainerTest::::testSerializationWithRevocationData()", "146": "CMSContainerTest::::testSerializationWithRevocationData()", "148": "CMSContainerTest::::testGetSizeEstimation()", "149": "CMSContainerTest::::testGetSizeEstimation()", "150": "CMSContainerTest::::testGetSizeEstimation()", "151": "CMSContainerTest::::testGetSizeEstimation()", "152": "CMSContainerTest::::testGetSizeEstimation()", "153": "CMSContainerTest::::testGetSizeEstimation()", "154": "CMSContainerTest::::testGetSizeEstimation()", "155": "CMSContainerTest::::testGetSizeEstimation()", "156": "CMSContainerTest::::testGetSizeEstimation()", "157": "CMSContainerTest::::testGetSizeEstimation()", "158": "CMSContainerTest::::testGetSizeEstimation()", "159": "CMSContainerTest::::testGetSizeEstimation()", "160": "CMSContainerTest::::testGetSizeEstimation()", "161": "CMSContainerTest::::testGetSizeEstimation()", "162": "CMSContainerTest::::testGetSizeEstimation()", "163": "CMSContainerTest::::testGetSizeEstimation()", "164": "CMSContainerTest::::testGetSizeEstimation()", "165": "CMSContainerTest::::testGetSizeEstimation()", "166": "CMSContainerTest::::testGetSizeEstimation()", "167": "CMSContainerTest::::testGetSizeEstimation()", "168": "CMSContainerTest::::testGetSizeEstimation()", "169": "CMSContainerTest::::testGetSizeEstimation()", "170": "CMSContainerTest::::testGetSizeEstimation()", "171": "CMSContainerTest::::testGetSizeEstimation()", "173": "CMSContainerTest::::testDeserialization()", "174": "CMSContainerTest::::testDeserialization()", "175": "CMSContainerTest::::testDeserialization()", "176": "CMSContainerTest::::testDeserialization()", "177": "CMSContainerTest::::testDeserialization()", "178": "CMSContainerTest::::testDeserialization()", "179": "CMSContainerTest::::testDeserialization()", "180": "CMSContainerTest::::testDeserialization()", "181": "CMSContainerTest::::testDeserialization()", "182": "CMSContainerTest::::testDeserialization()", "183": "CMSContainerTest::::testDeserialization()", "184": "CMSContainerTest::::testDeserialization()", "185": "CMSContainerTest::::testDeserialization()", "186": "CMSContainerTest::::testDeserialization()", "187": "CMSContainerTest::::testDeserialization()", "188": "CMSContainerTest::::testDeserialization()", "190": "CMSContainerTest::::testDeserializationWithRevocationData()", "191": "CMSContainerTest::::testDeserializationWithRevocationData()", "192": "CMSContainerTest::::testDeserializationWithRevocationData()", "193": "CMSContainerTest::::testDeserializationWithRevocationData()", "194": "CMSContainerTest::::testDeserializationWithRevocationData()", "195": "CMSContainerTest::::testDeserializationWithRevocationData()", "196": "CMSContainerTest::::testDeserializationWithRevocationData()", "197": "CMSContainerTest::::testDeserializationWithRevocationData()", "198": "CMSContainerTest::::testDeserializationWithRevocationData()", "199": "CMSContainerTest::::testDeserializationWithRevocationData()", "200": "CMSContainerTest::::testDeserializationWithRevocationData()", "201": "CMSContainerTest::::testDeserializationWithRevocationData()", "202": "CMSContainerTest::::testDeserializationWithRevocationData()", "203": "CMSContainerTest::::testDeserializationWithRevocationData()", "204": "CMSContainerTest::::testDeserializationWithRevocationData()", "205": "CMSContainerTest::::testDeserializationWithRevocationData()", "207": "CMSContainerTest::::testDeserializationWithIncorrectRevocationData()", "208": "CMSContainerTest::::testDeserializationWithIncorrectRevocationData()", "209": "CMSContainerTest::::testDeserializationWithIncorrectRevocationData()", "210": "CMSContainerTest::::testDeserializationWithIncorrectRevocationData()", "211": "CMSContainerTest::::testDeserializationWithIncorrectRevocationData()", "212": "CMSContainerTest::::testDeserializationWithIncorrectRevocationData()", "213": "CMSContainerTest::::testDeserializationWithIncorrectRevocationData()", "214": "CMSContainerTest::::testDeserializationWithIncorrectRevocationData()", "215": "CMSContainerTest::::testDeserializationWithIncorrectRevocationData()", "217": "CMSContainerTest::::createPkcs7WithRevocationInfoTest()", "218": "CMSContainerTest::::createPkcs7WithRevocationInfoTest()", "219": "CMSContainerTest::::createPkcs7WithRevocationInfoTest()", "220": "CMSContainerTest::::createPkcs7WithRevocationInfoTest()", "221": "CMSContainerTest::::createPkcs7WithRevocationInfoTest()", "222": "CMSContainerTest::::createPkcs7WithRevocationInfoTest()", "223": "CMSContainerTest::::createPkcs7WithRevocationInfoTest()", "225": "CMSContainerTest::::testMultipleDigestAlgorithms()", "226": "CMSContainerTest::::testMultipleDigestAlgorithms()", "227": "CMSContainerTest::::testMultipleDigestAlgorithms()", "228": "CMSContainerTest::::testMultipleDigestAlgorithms()", "229": "CMSContainerTest::::testMultipleDigestAlgorithms()", "230": "CMSContainerTest::::testMultipleDigestAlgorithms()", "231": "CMSContainerTest::::testMultipleDigestAlgorithms()", "232": "CMSContainerTest::::testMultipleDigestAlgorithms()", "235": "CMSContainerTest::::testMultipleSignerInfos()", "236": "CMSContainerTest::::testMultipleSignerInfos()", "237": "CMSContainerTest::::testMultipleSignerInfos()", "238": "CMSContainerTest::::testMultipleSignerInfos()", "239": "CMSContainerTest::::testMultipleSignerInfos()", "240": "CMSContainerTest::::testMultipleSignerInfos()", "241": "CMSContainerTest::::testMultipleSignerInfos()", "242": "CMSContainerTest::::testMultipleSignerInfos()", "244": "CMSContainerTest::::testCertificatesMissing()", "245": "CMSContainerTest::::testCertificatesMissing()", "246": "CMSContainerTest::::testCertificatesMissing()", "247": "CMSContainerTest::::testCertificatesMissing()", "248": "CMSContainerTest::::testCertificatesMissing()", "249": "CMSContainerTest::::testCertificatesMissing()", "250": "CMSContainerTest::::testCertificatesMissing()", "251": "CMSContainerTest::::testCertificatesMissing()", "253": "CMSContainerTest::::testCertificatesEmpty()", "254": "CMSContainerTest::::testCertificatesEmpty()", "255": "CMSContainerTest::::testCertificatesEmpty()", "256": "CMSContainerTest::::testCertificatesEmpty()", "257": "CMSContainerTest::::testCertificatesEmpty()", "258": "CMSContainerTest::::testCertificatesEmpty()", "259": "CMSContainerTest::::testCertificatesEmpty()", "260": "CMSContainerTest::::testCertificatesEmpty()", "262": "CMSContainerTest::::toUnixStringEnding(java.lang.String)", "263": "CMSContainerTest::::toUnixStringEnding(java.lang.String)", "264": "CMSContainerTest::::toUnixStringEnding(java.lang.String)", "266": "CMSContainerTest::::serializedAsString(byte[])", "267": "CMSContainerTest::::serializedAsString(byte[])", "268": "CMSContainerTest::::serializedAsString(byte[])", "269": "CMSContainerTest::::serializedAsString(byte[])", "270": "CMSContainerTest::::serializedAsString(byte[])"}, "tests": [{"test_lines": [98, 121], "covered_lines": [59, 64, 72, 80, 86, 94, 99, 104, 106, 156, 157, 192, 205, 208, 247, 248, 330, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 370, 371, 372, 373, 374, 375, 377, 378, 379, 383, 384, 385, 386, 387]}, {"test_lines": [123, 146], "covered_lines": [59, 64, 72, 80, 86, 94, 99, 104, 106, 156, 157, 192, 205, 208, 247, 248, 274, 275, 292, 293, 330, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 383, 384, 385, 386, 387]}, {"test_lines": [148, 171], "covered_lines": [59, 64, 72, 80, 86, 94, 99, 104, 106, 156, 157, 182, 183, 192, 205, 208, 247, 248, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 370, 371, 372, 373, 374, 375, 377, 378, 379, 383, 384, 385, 386, 387]}, {"test_lines": [173, 188], "covered_lines": [59, 64, 72, 80, 86, 94, 99, 117, 118, 119, 120, 121, 125, 126, 130, 131, 132, 133, 134, 135, 140, 141, 144, 145, 147, 148, 165, 205, 208, 218, 256, 265, 283, 392, 393, 396, 397, 400, 401, 402, 403, 404, 406]}, {"test_lines": [190, 205], "covered_lines": [59, 64, 72, 80, 86, 94, 99, 117, 118, 119, 120, 121, 125, 126, 130, 131, 132, 133, 134, 135, 136, 137, 140, 141, 144, 145, 147, 148, 165, 205, 208, 218, 256, 265, 283, 392, 393, 396, 397, 400, 401, 402, 403, 404, 406]}, {"test_lines": [207, 215], "covered_lines": [59, 64, 72, 80, 86, 94, 99, 117, 118, 119, 120, 121, 125, 126, 130, 131, 132, 133, 134, 135, 136, 137, 140, 141, 144, 145, 147, 148, 265, 283, 392, 393, 396, 397, 400, 401, 402, 403, 404, 406]}, {"test_lines": [225, 232], "covered_lines": [59, 64, 72, 80, 86, 94, 99, 117, 118, 119, 120, 121, 125, 126, 127, 145]}, {"test_lines": [235, 242], "covered_lines": [59, 64, 72, 80, 86, 94, 99, 117, 118, 119, 120, 121, 125, 126, 130, 131, 132, 133, 134, 135, 140, 141, 142, 145, 392, 393, 396, 397, 400, 401, 402, 403, 404, 406]}, {"test_lines": [244, 251], "covered_lines": [59, 64, 72, 80, 86, 94, 99, 117, 118, 119, 120, 121, 125, 126, 130, 131, 145, 392, 393, 394]}, {"test_lines": [253, 260], "covered_lines": [59, 64, 72, 80, 86, 94, 99, 117, 118, 119, 120, 121, 125, 126, 130, 131, 145, 392, 393, 396, 397, 398]}]}}