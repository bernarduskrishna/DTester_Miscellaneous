{"/bernard/dataset_construction/prep/repos/itext-java/commons/src/main/java/com/itextpdf/commons/datastructures/BiMap.java":{"class_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.datastructures;\n","\n","import java.util.HashMap;\n","import java.util.Map;\n","\n","/**\n"," * A simple bi-directional map.\n"," *\n"," * @param <K> the type of the first key\n"," * @param <V> the type of the second key\n"," */\n","public final class BiMap<K, V> {\n","\n","    private final Map<K, V> map = new HashMap<K, V>();\n","    private final Map<V, K> inverseMap = new HashMap<V, K>();\n","\n","    /**\n","     * Creates a new {@link BiMap} instance.\n","     */\n","    public BiMap() {\n","        // empty constructor\n","    }\n","\n","    /**\n","     * Puts the entry into the map.\n","     * If the key already exists, the value will be overwritten.\n","     * If the value already exists, the key will be overwritten.\n","     * If both key and value already exist, the entry will be overwritten.\n","     * If neither key nor value already exist, the entry will be added.\n","     *\n","     * @param k the key\n","     * @param v the value\n","     */\n","    public void put(K k, V v) {\n","        map.put(k, v);\n","        inverseMap.put(v, k);\n","    }\n","\n","    /**\n","     * Gets the value by key.\n","     *\n","     * @param value the key\n","     *\n","     * @return the value\n","     */\n","    public V getByKey(K value) {\n","        return map.get(value);\n","    }\n","\n","    /**\n","     * Gets the key by value.\n","     *\n","     * @param key the value\n","     *\n","     * @return the key\n","     */\n","    public K getByValue(V key) {\n","        return inverseMap.get(key);\n","    }\n","\n","    /**\n","     * Removes the entry by key.\n","     *\n","     * @param k the key\n","     */\n","    public void removeByKey(K k) {\n","        V v = map.remove(k);\n","        if (v != null) {\n","            inverseMap.remove(v);\n","        }\n","    }\n","\n","    /**\n","     * Removes the entry by value.\n","     *\n","     * @param v the value\n","     */\n","    public void removeByValue(V v) {\n","        K k = inverseMap.remove(v);\n","        if (k != null) {\n","            map.remove(k);\n","        }\n","    }\n","\n","    /**\n","     * Gets the size of the map.\n","     *\n","     * @return the size of the map\n","     */\n","    public int size() {\n","        return map.size();\n","    }\n","\n","    /**\n","     * removes all entries from the map.\n","     */\n","    public void clear() {\n","        map.clear();\n","        inverseMap.clear();\n","    }\n","\n","    /**\n","     * Checks if the map is empty.\n","     *\n","     * @return true, if the map is empty\n","     */\n","    public boolean isEmpty() {\n","        return map.isEmpty();\n","    }\n","\n","\n","    /**\n","     * Checks if the map contains the key.\n","     *\n","     * @param k the key\n","     *\n","     * @return true, if the map contains the key\n","     */\n","    public boolean containsKey(K k) {\n","        return map.containsKey(k);\n","    }\n","\n","    /**\n","     * Checks if the map contains the value.\n","     *\n","     * @param v the value\n","     *\n","     * @return true, if the map contains the value\n","     */\n","    public boolean containsValue(V v) {\n","        return inverseMap.containsKey(v);\n","    }\n","}\n"],"test_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.datastructures;\n","\n","import com.itextpdf.test.ExtendedITextTest;\n","import com.itextpdf.test.annotations.type.UnitTest;\n","\n","import org.junit.Assert;\n","import org.junit.Test;\n","import org.junit.experimental.categories.Category;\n","\n","@Category(UnitTest.class)\n","public class BiMapTest extends ExtendedITextTest {\n","\n","    @Test\n","    public void sizeTest01() {\n","        BiMap<String, Integer> map = new BiMap<String, Integer>();\n","        Assert.assertEquals(0, map.size());\n","    }\n","\n","    @Test\n","    public void sizeTest02() {\n","        BiMap<String, Integer> map = new BiMap<String, Integer>();\n","        map.put(\"a\", 1);\n","        Assert.assertEquals(1, map.size());\n","    }\n","\n","    @Test\n","    public void isEmptyTest01() {\n","        BiMap<String, Integer> map = new BiMap<String, Integer>();\n","        map.put(\"a\", 1);\n","        Assert.assertFalse(map.isEmpty());\n","    }\n","\n","\n","    @Test\n","    public void putTest() {\n","        BiMap<String, Integer> map = new BiMap<String, Integer>();\n","        map.put(\"a\", 1);\n","        Assert.assertEquals(1, (int) map.getByKey(\"a\"));\n","        Assert.assertEquals(\"a\", map.getByValue(1));\n","    }\n","\n","    @Test\n","    public void putOnExistingKey() {\n","        BiMap<String, Integer> map = new BiMap<String, Integer>();\n","        map.put(\"a\", 1);\n","        map.put(\"a\", 2);\n","        Assert.assertEquals(2, (int) map.getByKey(\"a\"));\n","        Assert.assertEquals(\"a\", map.getByValue(2));\n","    }\n","\n","    @Test\n","    public void putOnExistingValue() {\n","        BiMap<String, Integer> map = new BiMap<String, Integer>();\n","        map.put(\"a\", 1);\n","        map.put(\"b\", 1);\n","        Assert.assertEquals(1, (int) map.getByKey(\"b\"));\n","        Assert.assertEquals(\"b\", map.getByValue(1));\n","    }\n","\n","    @Test\n","    public void putOnExistingKeyAndValue() {\n","        BiMap<String, Integer> map = new BiMap<String, Integer>();\n","        map.put(\"a\", 1);\n","        map.put(\"a\", 1);\n","        Assert.assertEquals(1, (int) map.getByKey(\"a\"));\n","        Assert.assertEquals(\"a\", map.getByValue(1));\n","    }\n","\n","    @Test\n","    public void putMultipleValues() {\n","        BiMap<String, Integer> map = new BiMap<String, Integer>();\n","        map.put(\"a\", 1);\n","        map.put(\"b\", 2);\n","        map.put(\"c\", 3);\n","        Assert.assertEquals(1, (int) map.getByKey(\"a\"));\n","        Assert.assertEquals(\"a\", map.getByValue(1));\n","        Assert.assertEquals(2, (int) map.getByKey(\"b\"));\n","        Assert.assertEquals(\"b\", map.getByValue(2));\n","        Assert.assertEquals(3, (int) map.getByKey(\"c\"));\n","        Assert.assertEquals(\"c\", map.getByValue(3));\n","        Assert.assertEquals(3, map.size());\n","    }\n","\n","\n","    @Test\n","    public void clearTest() {\n","        BiMap<String, Integer> map = new BiMap<String, Integer>();\n","        map.put(\"a\", 1);\n","        map.clear();\n","        Assert.assertEquals(0, map.size());\n","    }\n","\n","    @Test\n","    public void containsKeyTest() {\n","        BiMap<String, Integer> map = new BiMap<String, Integer>();\n","        map.put(\"a\", 1);\n","        Assert.assertTrue(map.containsKey(\"a\"));\n","    }\n","\n","    @Test\n","    public void containsValueTest() {\n","        BiMap<String, Integer> map = new BiMap<String, Integer>();\n","        map.put(\"a\", 1);\n","        Assert.assertTrue(map.containsValue(1));\n","    }\n","\n","    @Test\n","    public void getByValue() {\n","        BiMap<String, Integer> map = new BiMap<String, Integer>();\n","        map.put(\"a\", 1);\n","        Assert.assertEquals(1, (int) map.getByKey(\"a\"));\n","    }\n","\n","    @Test\n","    public void getByKey() {\n","        BiMap<String, Integer> map = new BiMap<String, Integer>();\n","        map.put(\"a\", 1);\n","        Assert.assertEquals(\"a\", map.getByValue(1));\n","    }\n","\n","    @Test\n","    public void removeByKey() {\n","        BiMap<String, Integer> map = new BiMap<String, Integer>();\n","        map.put(\"a\", 1);\n","        map.removeByKey(\"a\");\n","        Assert.assertEquals(0, map.size());\n","    }\n","\n","    @Test\n","    public void removeByValue() {\n","        BiMap<String, Integer> map = new BiMap<String, Integer>();\n","        map.put(\"a\", 1);\n","        map.removeByValue(1);\n","        Assert.assertEquals(0, map.size());\n","    }\n","\n","    @Test\n","    public void removeOnEmptyMap() {\n","        BiMap<String, Integer> map = new BiMap<String, Integer>();\n","        map.removeByKey(\"a\");\n","        map.removeByValue(1);\n","        Assert.assertEquals(0, map.size());\n","    }\n","\n","}\n"],"method_lines_dic":{"BiMap::::put(K,V)":[56,59],"BiMap::::getByKey(K)":[68,70],"BiMap::::getByValue(V)":[79,81],"BiMap::::removeByKey(K)":[88,93],"BiMap::::removeByValue(V)":[100,105],"BiMap::::size()":[112,114],"BiMap::::clear()":[119,122],"BiMap::::isEmpty()":[129,131],"BiMap::::containsKey(K)":[141,143],"BiMap::::containsValue(V)":[152,154]},"test_method_lines_dic":{"BiMapTest::::sizeTest01()":[35,39],"BiMapTest::::sizeTest02()":[41,46],"BiMapTest::::isEmptyTest01()":[48,53],"BiMapTest::::putTest()":[56,62],"BiMapTest::::putOnExistingKey()":[64,71],"BiMapTest::::putOnExistingValue()":[73,80],"BiMapTest::::putOnExistingKeyAndValue()":[82,89],"BiMapTest::::putMultipleValues()":[91,104],"BiMapTest::::clearTest()":[107,113],"BiMapTest::::containsKeyTest()":[115,120],"BiMapTest::::containsValueTest()":[122,127],"BiMapTest::::getByValue()":[129,134],"BiMapTest::::getByKey()":[136,141],"BiMapTest::::removeByKey()":[143,149],"BiMapTest::::removeByValue()":[151,157],"BiMapTest::::removeOnEmptyMap()":[159,165]},"reverse_method_lines_dic":{"56":"BiMap::::put(K,V)","57":"BiMap::::put(K,V)","58":"BiMap::::put(K,V)","59":"BiMap::::put(K,V)","68":"BiMap::::getByKey(K)","69":"BiMap::::getByKey(K)","70":"BiMap::::getByKey(K)","79":"BiMap::::getByValue(V)","80":"BiMap::::getByValue(V)","81":"BiMap::::getByValue(V)","88":"BiMap::::removeByKey(K)","89":"BiMap::::removeByKey(K)","90":"BiMap::::removeByKey(K)","91":"BiMap::::removeByKey(K)","92":"BiMap::::removeByKey(K)","93":"BiMap::::removeByKey(K)","100":"BiMap::::removeByValue(V)","101":"BiMap::::removeByValue(V)","102":"BiMap::::removeByValue(V)","103":"BiMap::::removeByValue(V)","104":"BiMap::::removeByValue(V)","105":"BiMap::::removeByValue(V)","112":"BiMap::::size()","113":"BiMap::::size()","114":"BiMap::::size()","119":"BiMap::::clear()","120":"BiMap::::clear()","121":"BiMap::::clear()","122":"BiMap::::clear()","129":"BiMap::::isEmpty()","130":"BiMap::::isEmpty()","131":"BiMap::::isEmpty()","141":"BiMap::::containsKey(K)","142":"BiMap::::containsKey(K)","143":"BiMap::::containsKey(K)","152":"BiMap::::containsValue(V)","153":"BiMap::::containsValue(V)","154":"BiMap::::containsValue(V)"},"test_reverse_method_lines_dic":{"35":"BiMapTest::::sizeTest01()","36":"BiMapTest::::sizeTest01()","37":"BiMapTest::::sizeTest01()","38":"BiMapTest::::sizeTest01()","39":"BiMapTest::::sizeTest01()","41":"BiMapTest::::sizeTest02()","42":"BiMapTest::::sizeTest02()","43":"BiMapTest::::sizeTest02()","44":"BiMapTest::::sizeTest02()","45":"BiMapTest::::sizeTest02()","46":"BiMapTest::::sizeTest02()","48":"BiMapTest::::isEmptyTest01()","49":"BiMapTest::::isEmptyTest01()","50":"BiMapTest::::isEmptyTest01()","51":"BiMapTest::::isEmptyTest01()","52":"BiMapTest::::isEmptyTest01()","53":"BiMapTest::::isEmptyTest01()","56":"BiMapTest::::putTest()","57":"BiMapTest::::putTest()","58":"BiMapTest::::putTest()","59":"BiMapTest::::putTest()","60":"BiMapTest::::putTest()","61":"BiMapTest::::putTest()","62":"BiMapTest::::putTest()","64":"BiMapTest::::putOnExistingKey()","65":"BiMapTest::::putOnExistingKey()","66":"BiMapTest::::putOnExistingKey()","67":"BiMapTest::::putOnExistingKey()","68":"BiMapTest::::putOnExistingKey()","69":"BiMapTest::::putOnExistingKey()","70":"BiMapTest::::putOnExistingKey()","71":"BiMapTest::::putOnExistingKey()","73":"BiMapTest::::putOnExistingValue()","74":"BiMapTest::::putOnExistingValue()","75":"BiMapTest::::putOnExistingValue()","76":"BiMapTest::::putOnExistingValue()","77":"BiMapTest::::putOnExistingValue()","78":"BiMapTest::::putOnExistingValue()","79":"BiMapTest::::putOnExistingValue()","80":"BiMapTest::::putOnExistingValue()","82":"BiMapTest::::putOnExistingKeyAndValue()","83":"BiMapTest::::putOnExistingKeyAndValue()","84":"BiMapTest::::putOnExistingKeyAndValue()","85":"BiMapTest::::putOnExistingKeyAndValue()","86":"BiMapTest::::putOnExistingKeyAndValue()","87":"BiMapTest::::putOnExistingKeyAndValue()","88":"BiMapTest::::putOnExistingKeyAndValue()","89":"BiMapTest::::putOnExistingKeyAndValue()","91":"BiMapTest::::putMultipleValues()","92":"BiMapTest::::putMultipleValues()","93":"BiMapTest::::putMultipleValues()","94":"BiMapTest::::putMultipleValues()","95":"BiMapTest::::putMultipleValues()","96":"BiMapTest::::putMultipleValues()","97":"BiMapTest::::putMultipleValues()","98":"BiMapTest::::putMultipleValues()","99":"BiMapTest::::putMultipleValues()","100":"BiMapTest::::putMultipleValues()","101":"BiMapTest::::putMultipleValues()","102":"BiMapTest::::putMultipleValues()","103":"BiMapTest::::putMultipleValues()","104":"BiMapTest::::putMultipleValues()","107":"BiMapTest::::clearTest()","108":"BiMapTest::::clearTest()","109":"BiMapTest::::clearTest()","110":"BiMapTest::::clearTest()","111":"BiMapTest::::clearTest()","112":"BiMapTest::::clearTest()","113":"BiMapTest::::clearTest()","115":"BiMapTest::::containsKeyTest()","116":"BiMapTest::::containsKeyTest()","117":"BiMapTest::::containsKeyTest()","118":"BiMapTest::::containsKeyTest()","119":"BiMapTest::::containsKeyTest()","120":"BiMapTest::::containsKeyTest()","122":"BiMapTest::::containsValueTest()","123":"BiMapTest::::containsValueTest()","124":"BiMapTest::::containsValueTest()","125":"BiMapTest::::containsValueTest()","126":"BiMapTest::::containsValueTest()","127":"BiMapTest::::containsValueTest()","129":"BiMapTest::::getByValue()","130":"BiMapTest::::getByValue()","131":"BiMapTest::::getByValue()","132":"BiMapTest::::getByValue()","133":"BiMapTest::::getByValue()","134":"BiMapTest::::getByValue()","136":"BiMapTest::::getByKey()","137":"BiMapTest::::getByKey()","138":"BiMapTest::::getByKey()","139":"BiMapTest::::getByKey()","140":"BiMapTest::::getByKey()","141":"BiMapTest::::getByKey()","143":"BiMapTest::::removeByKey()","144":"BiMapTest::::removeByKey()","145":"BiMapTest::::removeByKey()","146":"BiMapTest::::removeByKey()","147":"BiMapTest::::removeByKey()","148":"BiMapTest::::removeByKey()","149":"BiMapTest::::removeByKey()","151":"BiMapTest::::removeByValue()","152":"BiMapTest::::removeByValue()","153":"BiMapTest::::removeByValue()","154":"BiMapTest::::removeByValue()","155":"BiMapTest::::removeByValue()","156":"BiMapTest::::removeByValue()","157":"BiMapTest::::removeByValue()","159":"BiMapTest::::removeOnEmptyMap()","160":"BiMapTest::::removeOnEmptyMap()","161":"BiMapTest::::removeOnEmptyMap()","162":"BiMapTest::::removeOnEmptyMap()","163":"BiMapTest::::removeOnEmptyMap()","164":"BiMapTest::::removeOnEmptyMap()","165":"BiMapTest::::removeOnEmptyMap()"},"tests":[{"test_lines":[35,39],"covered_lines":[36,37,42,44,113],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[41,46],"covered_lines":[36,37,42,44,57,58,59,113],"label":"BiMap::::size()"},{"test_lines":[48,53],"covered_lines":[36,37,42,44,57,58,59,130],"label":"BiMap::::isEmpty()"},{"test_lines":[56,62],"covered_lines":[36,37,42,44,57,58,59,69,80],"label":"BiMap::::put(K,V)"},{"test_lines":[64,71],"covered_lines":[36,37,42,44,57,58,59,69,80],"label":"BiMap::::put(K,V)"},{"test_lines":[73,80],"covered_lines":[36,37,42,44,57,58,59,69,80],"label":"BiMap::::put(K,V)"},{"test_lines":[82,89],"covered_lines":[36,37,42,44,57,58,59,69,80],"label":"BiMap::::put(K,V)"},{"test_lines":[91,104],"covered_lines":[36,37,42,44,57,58,59,69,80,113],"label":"BiMap::::put(K,V)"},{"test_lines":[107,113],"covered_lines":[36,37,42,44,57,58,59,113,120,121,122],"label":"BiMap::::clear()"},{"test_lines":[115,120],"covered_lines":[36,37,42,44,57,58,59,142],"label":"BiMap::::containsKey(K)"},{"test_lines":[122,127],"covered_lines":[36,37,42,44,57,58,59,153],"label":"BiMap::::containsValue(V)"},{"test_lines":[129,134],"covered_lines":[36,37,42,44,57,58,59,69],"label":"BiMap::::getByKey(K)"},{"test_lines":[136,141],"covered_lines":[36,37,42,44,57,58,59,80],"label":"BiMap::::getByValue(V)"},{"test_lines":[143,149],"covered_lines":[36,37,42,44,57,58,59,89,90,91,93,113],"label":"BiMap::::removeByKey(K)"},{"test_lines":[151,157],"covered_lines":[36,37,42,44,57,58,59,101,102,103,105,113],"label":"BiMap::::removeByValue(V)"},{"test_lines":[159,165],"covered_lines":[36,37,42,44,89,90,93,101,102,105,113],"label":"<<NO FOCAL METHOD>>"}]},"/bernard/dataset_construction/prep/repos/itext-java/commons/src/main/java/com/itextpdf/commons/datastructures/Tuple2.java":{"class_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.datastructures;\n","\n","/**\n"," * Simple tuple container that holds two elements.\n"," *\n"," * @param <T1> type of the first element\n"," * @param <T2> type of the second element\n"," */\n","public class Tuple2<T1, T2> {\n","    private final T1 first;\n","    private final T2 second;\n","\n","    /**\n","     * Creates a new instance of {@link Tuple2} with given elements.\n","     *\n","     * @param first  the first element\n","     * @param second the second element\n","     */\n","    public Tuple2(T1 first, T2 second) {\n","        this.first = first;\n","        this.second = second;\n","    }\n","\n","    /**\n","     * Get the first element.\n","     *\n","     * @return the first element\n","     */\n","    public T1 getFirst() {\n","        return first;\n","    }\n","\n","    /**\n","     * Get the second element.\n","     *\n","     * @return the second element\n","     */\n","    public T2 getSecond() {\n","        return second;\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public String toString() {\n","        return \"Tuple2{\" +\n","                \"first=\" + first +\n","                \", second=\" + second +\n","                '}';\n","    }\n","}\n"],"test_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.datastructures;\n","\n","import com.itextpdf.test.ExtendedITextTest;\n","import com.itextpdf.test.annotations.type.UnitTest;\n","\n","import org.junit.Test;\n","import org.junit.experimental.categories.Category;\n","import static org.junit.Assert.assertEquals;\n","import static org.junit.Assert.assertNull;\n","\n","@Category(UnitTest.class)\n","public class Tuple2Test extends ExtendedITextTest {\n","\n","    @Test\n","    public void testTuple2_StringInt() {\n","        Tuple2<String, Integer> tuple = new Tuple2<>(\"test\", 1);\n","        assertEquals(\"test\", tuple.getFirst());\n","        assertEquals(Integer.valueOf(1), tuple.getSecond());\n","    }\n","\n","    @Test\n","    public void testTuple2_ToString() {\n","        Tuple2<String, Integer> tuple = new Tuple2<>(\"test\", 1);\n","        assertEquals(\"Tuple2{first=test, second=1}\", tuple.toString());\n","    }\n","\n","    @Test\n","    public void testTuple2_TestWithNullFirstValue() {\n","        Tuple2<String, Integer> tuple = new Tuple2<>(null, 1);\n","        assertNull(tuple.getFirst());\n","        assertEquals(Integer.valueOf(1), tuple.getSecond());\n","    }\n","}\n"],"method_lines_dic":{"Tuple2::::getFirst()":[51,53],"Tuple2::::getSecond()":[60,62],"Tuple2::::toString()":[67,73]},"test_method_lines_dic":{"Tuple2Test::::testTuple2_StringInt()":[36,41],"Tuple2Test::::testTuple2_ToString()":[43,47],"Tuple2Test::::testTuple2_TestWithNullFirstValue()":[49,54]},"reverse_method_lines_dic":{"51":"Tuple2::::getFirst()","52":"Tuple2::::getFirst()","53":"Tuple2::::getFirst()","60":"Tuple2::::getSecond()","61":"Tuple2::::getSecond()","62":"Tuple2::::getSecond()","67":"Tuple2::::toString()","68":"Tuple2::::toString()","69":"Tuple2::::toString()","70":"Tuple2::::toString()","71":"Tuple2::::toString()","72":"Tuple2::::toString()","73":"Tuple2::::toString()"},"test_reverse_method_lines_dic":{"36":"Tuple2Test::::testTuple2_StringInt()","37":"Tuple2Test::::testTuple2_StringInt()","38":"Tuple2Test::::testTuple2_StringInt()","39":"Tuple2Test::::testTuple2_StringInt()","40":"Tuple2Test::::testTuple2_StringInt()","41":"Tuple2Test::::testTuple2_StringInt()","43":"Tuple2Test::::testTuple2_ToString()","44":"Tuple2Test::::testTuple2_ToString()","45":"Tuple2Test::::testTuple2_ToString()","46":"Tuple2Test::::testTuple2_ToString()","47":"Tuple2Test::::testTuple2_ToString()","49":"Tuple2Test::::testTuple2_TestWithNullFirstValue()","50":"Tuple2Test::::testTuple2_TestWithNullFirstValue()","51":"Tuple2Test::::testTuple2_TestWithNullFirstValue()","52":"Tuple2Test::::testTuple2_TestWithNullFirstValue()","53":"Tuple2Test::::testTuple2_TestWithNullFirstValue()","54":"Tuple2Test::::testTuple2_TestWithNullFirstValue()"},"tests":[{"test_lines":[36,41],"covered_lines":[41,42,43,44,52,61],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[43,47],"covered_lines":[41,42,43,44,69],"label":"Tuple2::::toString()"},{"test_lines":[49,54],"covered_lines":[41,42,43,44,52,61],"label":"Tuple2::::getFirst()"}]},"/bernard/dataset_construction/prep/repos/itext-java/commons/src/main/java/com/itextpdf/commons/datastructures/ConcurrentWeakMap.java":{"class_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.datastructures;\n","\n","import java.util.Collection;\n","import java.util.Collections;\n","import java.util.Map;\n","import java.util.Set;\n","import java.util.WeakHashMap;\n","\n","/**\n"," * Concurrent weak hash map implementation.\n"," * \n"," * @param <K> type of the keys\n"," * @param <V> type of the values\n"," */\n","public class ConcurrentWeakMap<K,V> implements Map<K, V> {\n","    private final Map<K, V> map = Collections.synchronizedMap(new WeakHashMap<>());\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public int size() {\n","        return map.size();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public boolean isEmpty() {\n","        return map.isEmpty();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public boolean containsKey(Object key) {\n","        return map.containsKey(key);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public boolean containsValue(Object value) {\n","        return map.containsValue(value);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public V get(Object key) {\n","        return map.get(key);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public V put(K key, V value) {\n","        return map.put(key, value);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public V remove(Object key) {\n","        return map.remove(key);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public void putAll(Map<? extends K, ? extends V> m) {\n","        map.putAll(m);\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public void clear() {\n","        map.clear();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public Set<K> keySet() {\n","        return map.keySet();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public Collection<V> values() {\n","        return map.values();\n","    }\n","\n","    /**\n","     * {@inheritDoc}\n","     */\n","    @Override\n","    public Set<Entry<K, V>> entrySet() {\n","        return map.entrySet();\n","    }\n","}\n"],"test_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.datastructures;\n","\n","import com.itextpdf.test.ExtendedITextTest;\n","import com.itextpdf.test.annotations.type.UnitTest;\n","\n","import java.util.Collection;\n","import java.util.HashMap;\n","import java.util.Map;\n","import org.junit.Assert;\n","import org.junit.Test;\n","import org.junit.experimental.categories.Category;\n","\n","@Category(UnitTest.class)\n","public class ConcurrentWeakMapTest extends ExtendedITextTest {\n","    @Test\n","    public void sizeTest() {\n","        ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();\n","        map.put(5, 6);\n","        map.put(3, 0);\n","        map.put(6, 2);\n","        map.put(5, 2);\n","        Assert.assertEquals(3, map.size());\n","    }\n","\n","    @Test\n","    public void isEmptyMapNotEmptyTest() {\n","        ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();\n","        map.put(5, 6);\n","        Assert.assertFalse(map.isEmpty());\n","    }\n","\n","    @Test\n","    public void isEmptyMapEmptyTest() {\n","        ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();\n","        Assert.assertTrue(map.isEmpty());\n","    }\n","\n","    @Test\n","    public void containsKeyTrueTest() {\n","        ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();\n","        map.put(5, 6);\n","        Assert.assertTrue(map.containsKey(5));\n","    }\n","\n","    @Test\n","    public void containsKeyFalseTest() {\n","        ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();\n","        map.put(5, 6);\n","        Assert.assertFalse(map.containsKey(6));\n","    }\n","\n","    @Test\n","    public void containsValueTrueTest() {\n","        ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();\n","        map.put(5, 6);\n","        Assert.assertTrue(map.containsValue(6));\n","    }\n","\n","    @Test\n","    public void containsValueFalseTest() {\n","        ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();\n","        map.put(5, 6);\n","        Assert.assertFalse(map.containsValue(5));\n","    }\n","\n","    @Test\n","    public void getTest() {\n","        ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();\n","        map.put(5, 6);\n","        Assert.assertEquals(6, (int) map.get(5));\n","    }\n","\n","    @Test\n","    public void putTest() {\n","        ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();\n","        map.put(5, 6);\n","        Assert.assertEquals(6, (int) map.put(5, 10));\n","    }\n","\n","    @Test\n","    public void removeTest() {\n","        ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();\n","        map.put(5, 6);\n","        Assert.assertEquals(6, (int) map.remove(5));\n","    }\n","\n","    @Test\n","    public void putAllTest() {\n","        ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();\n","        map.put(5, 6);\n","        \n","        Map<Integer, Integer> anotherMap = new HashMap<>();\n","        anotherMap.put(5, 10);\n","        anotherMap.put(4, 3);\n","        anotherMap.put(3, 7);\n","        \n","        map.putAll(anotherMap);\n","        \n","        Assert.assertEquals(10, (int) map.get(5));\n","        Assert.assertEquals(3, map.size());\n","    }\n","\n","    @Test\n","    public void clearTest() {\n","        ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();\n","        map.put(5, 6);\n","        map.put(3, 5);\n","        map.put(2, 8);\n","        \n","        map.clear();\n","        \n","        Assert.assertEquals(0, map.size());\n","    }\n","\n","    @Test\n","    public void keySetTest() {\n","        ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();\n","        map.put(5, 6);\n","\n","        Map<Integer, Integer> anotherMap = new HashMap<>();\n","        anotherMap.put(5, 10);\n","        anotherMap.put(4, 3);\n","        anotherMap.put(3, 7);\n","\n","        map.putAll(anotherMap);\n","        \n","        Assert.assertEquals(anotherMap.keySet(), map.keySet());\n","    }\n","\n","    @Test\n","    public void valuesTest() {\n","        ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();\n","        map.put(5, 6);\n","\n","        Map<Integer, Integer> anotherMap = new HashMap<>();\n","        anotherMap.put(5, 10);\n","        anotherMap.put(4, 3);\n","        anotherMap.put(3, 7);\n","\n","        map.putAll(anotherMap);\n","\n","        Collection<Integer> values = map.values();\n","        Assert.assertEquals(3, values.size());\n","        Assert.assertTrue(values.contains(10));\n","        Assert.assertFalse(values.contains(6));\n","    }\n","\n","    @Test\n","    public void entrySetTest() {\n","        ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();\n","        map.put(5, 6);\n","\n","        Map<Integer, Integer> anotherMap = new HashMap<>();\n","        anotherMap.put(5, 10);\n","        anotherMap.put(4, 3);\n","        anotherMap.put(3, 7);\n","\n","        map.putAll(anotherMap);\n","\n","        Assert.assertEquals(anotherMap.entrySet(), map.entrySet());\n","    }\n","}\n"],"method_lines_dic":{"ConcurrentWeakMap::::size()":[43,46],"ConcurrentWeakMap::::isEmpty()":[51,54],"ConcurrentWeakMap::::containsKey(java.lang.Object)":[59,62],"ConcurrentWeakMap::::containsValue(java.lang.Object)":[67,70],"ConcurrentWeakMap::::get(java.lang.Object)":[75,78],"ConcurrentWeakMap::::put(K,V)":[83,86],"ConcurrentWeakMap::::remove(java.lang.Object)":[91,94],"ConcurrentWeakMap::::putAll(java.util.Map<? extends K, ? extends V>)":[99,102],"ConcurrentWeakMap::::clear()":[107,110],"ConcurrentWeakMap::::keySet()":[115,118],"ConcurrentWeakMap::::values()":[123,126],"ConcurrentWeakMap::::entrySet()":[131,134]},"test_method_lines_dic":{"ConcurrentWeakMapTest::::sizeTest()":[37,45],"ConcurrentWeakMapTest::::isEmptyMapNotEmptyTest()":[47,52],"ConcurrentWeakMapTest::::isEmptyMapEmptyTest()":[54,58],"ConcurrentWeakMapTest::::containsKeyTrueTest()":[60,65],"ConcurrentWeakMapTest::::containsKeyFalseTest()":[67,72],"ConcurrentWeakMapTest::::containsValueTrueTest()":[74,79],"ConcurrentWeakMapTest::::containsValueFalseTest()":[81,86],"ConcurrentWeakMapTest::::getTest()":[88,93],"ConcurrentWeakMapTest::::putTest()":[95,100],"ConcurrentWeakMapTest::::removeTest()":[102,107],"ConcurrentWeakMapTest::::putAllTest()":[109,123],"ConcurrentWeakMapTest::::clearTest()":[125,135],"ConcurrentWeakMapTest::::keySetTest()":[137,150],"ConcurrentWeakMapTest::::valuesTest()":[152,168],"ConcurrentWeakMapTest::::entrySetTest()":[170,183]},"reverse_method_lines_dic":{"43":"ConcurrentWeakMap::::size()","44":"ConcurrentWeakMap::::size()","45":"ConcurrentWeakMap::::size()","46":"ConcurrentWeakMap::::size()","51":"ConcurrentWeakMap::::isEmpty()","52":"ConcurrentWeakMap::::isEmpty()","53":"ConcurrentWeakMap::::isEmpty()","54":"ConcurrentWeakMap::::isEmpty()","59":"ConcurrentWeakMap::::containsKey(java.lang.Object)","60":"ConcurrentWeakMap::::containsKey(java.lang.Object)","61":"ConcurrentWeakMap::::containsKey(java.lang.Object)","62":"ConcurrentWeakMap::::containsKey(java.lang.Object)","67":"ConcurrentWeakMap::::containsValue(java.lang.Object)","68":"ConcurrentWeakMap::::containsValue(java.lang.Object)","69":"ConcurrentWeakMap::::containsValue(java.lang.Object)","70":"ConcurrentWeakMap::::containsValue(java.lang.Object)","75":"ConcurrentWeakMap::::get(java.lang.Object)","76":"ConcurrentWeakMap::::get(java.lang.Object)","77":"ConcurrentWeakMap::::get(java.lang.Object)","78":"ConcurrentWeakMap::::get(java.lang.Object)","83":"ConcurrentWeakMap::::put(K,V)","84":"ConcurrentWeakMap::::put(K,V)","85":"ConcurrentWeakMap::::put(K,V)","86":"ConcurrentWeakMap::::put(K,V)","91":"ConcurrentWeakMap::::remove(java.lang.Object)","92":"ConcurrentWeakMap::::remove(java.lang.Object)","93":"ConcurrentWeakMap::::remove(java.lang.Object)","94":"ConcurrentWeakMap::::remove(java.lang.Object)","99":"ConcurrentWeakMap::::putAll(java.util.Map<? extends K, ? extends V>)","100":"ConcurrentWeakMap::::putAll(java.util.Map<? extends K, ? extends V>)","101":"ConcurrentWeakMap::::putAll(java.util.Map<? extends K, ? extends V>)","102":"ConcurrentWeakMap::::putAll(java.util.Map<? extends K, ? extends V>)","107":"ConcurrentWeakMap::::clear()","108":"ConcurrentWeakMap::::clear()","109":"ConcurrentWeakMap::::clear()","110":"ConcurrentWeakMap::::clear()","115":"ConcurrentWeakMap::::keySet()","116":"ConcurrentWeakMap::::keySet()","117":"ConcurrentWeakMap::::keySet()","118":"ConcurrentWeakMap::::keySet()","123":"ConcurrentWeakMap::::values()","124":"ConcurrentWeakMap::::values()","125":"ConcurrentWeakMap::::values()","126":"ConcurrentWeakMap::::values()","131":"ConcurrentWeakMap::::entrySet()","132":"ConcurrentWeakMap::::entrySet()","133":"ConcurrentWeakMap::::entrySet()","134":"ConcurrentWeakMap::::entrySet()"},"test_reverse_method_lines_dic":{"37":"ConcurrentWeakMapTest::::sizeTest()","38":"ConcurrentWeakMapTest::::sizeTest()","39":"ConcurrentWeakMapTest::::sizeTest()","40":"ConcurrentWeakMapTest::::sizeTest()","41":"ConcurrentWeakMapTest::::sizeTest()","42":"ConcurrentWeakMapTest::::sizeTest()","43":"ConcurrentWeakMapTest::::sizeTest()","44":"ConcurrentWeakMapTest::::sizeTest()","45":"ConcurrentWeakMapTest::::sizeTest()","47":"ConcurrentWeakMapTest::::isEmptyMapNotEmptyTest()","48":"ConcurrentWeakMapTest::::isEmptyMapNotEmptyTest()","49":"ConcurrentWeakMapTest::::isEmptyMapNotEmptyTest()","50":"ConcurrentWeakMapTest::::isEmptyMapNotEmptyTest()","51":"ConcurrentWeakMapTest::::isEmptyMapNotEmptyTest()","52":"ConcurrentWeakMapTest::::isEmptyMapNotEmptyTest()","54":"ConcurrentWeakMapTest::::isEmptyMapEmptyTest()","55":"ConcurrentWeakMapTest::::isEmptyMapEmptyTest()","56":"ConcurrentWeakMapTest::::isEmptyMapEmptyTest()","57":"ConcurrentWeakMapTest::::isEmptyMapEmptyTest()","58":"ConcurrentWeakMapTest::::isEmptyMapEmptyTest()","60":"ConcurrentWeakMapTest::::containsKeyTrueTest()","61":"ConcurrentWeakMapTest::::containsKeyTrueTest()","62":"ConcurrentWeakMapTest::::containsKeyTrueTest()","63":"ConcurrentWeakMapTest::::containsKeyTrueTest()","64":"ConcurrentWeakMapTest::::containsKeyTrueTest()","65":"ConcurrentWeakMapTest::::containsKeyTrueTest()","67":"ConcurrentWeakMapTest::::containsKeyFalseTest()","68":"ConcurrentWeakMapTest::::containsKeyFalseTest()","69":"ConcurrentWeakMapTest::::containsKeyFalseTest()","70":"ConcurrentWeakMapTest::::containsKeyFalseTest()","71":"ConcurrentWeakMapTest::::containsKeyFalseTest()","72":"ConcurrentWeakMapTest::::containsKeyFalseTest()","74":"ConcurrentWeakMapTest::::containsValueTrueTest()","75":"ConcurrentWeakMapTest::::containsValueTrueTest()","76":"ConcurrentWeakMapTest::::containsValueTrueTest()","77":"ConcurrentWeakMapTest::::containsValueTrueTest()","78":"ConcurrentWeakMapTest::::containsValueTrueTest()","79":"ConcurrentWeakMapTest::::containsValueTrueTest()","81":"ConcurrentWeakMapTest::::containsValueFalseTest()","82":"ConcurrentWeakMapTest::::containsValueFalseTest()","83":"ConcurrentWeakMapTest::::containsValueFalseTest()","84":"ConcurrentWeakMapTest::::containsValueFalseTest()","85":"ConcurrentWeakMapTest::::containsValueFalseTest()","86":"ConcurrentWeakMapTest::::containsValueFalseTest()","88":"ConcurrentWeakMapTest::::getTest()","89":"ConcurrentWeakMapTest::::getTest()","90":"ConcurrentWeakMapTest::::getTest()","91":"ConcurrentWeakMapTest::::getTest()","92":"ConcurrentWeakMapTest::::getTest()","93":"ConcurrentWeakMapTest::::getTest()","95":"ConcurrentWeakMapTest::::putTest()","96":"ConcurrentWeakMapTest::::putTest()","97":"ConcurrentWeakMapTest::::putTest()","98":"ConcurrentWeakMapTest::::putTest()","99":"ConcurrentWeakMapTest::::putTest()","100":"ConcurrentWeakMapTest::::putTest()","102":"ConcurrentWeakMapTest::::removeTest()","103":"ConcurrentWeakMapTest::::removeTest()","104":"ConcurrentWeakMapTest::::removeTest()","105":"ConcurrentWeakMapTest::::removeTest()","106":"ConcurrentWeakMapTest::::removeTest()","107":"ConcurrentWeakMapTest::::removeTest()","109":"ConcurrentWeakMapTest::::putAllTest()","110":"ConcurrentWeakMapTest::::putAllTest()","111":"ConcurrentWeakMapTest::::putAllTest()","112":"ConcurrentWeakMapTest::::putAllTest()","113":"ConcurrentWeakMapTest::::putAllTest()","114":"ConcurrentWeakMapTest::::putAllTest()","115":"ConcurrentWeakMapTest::::putAllTest()","116":"ConcurrentWeakMapTest::::putAllTest()","117":"ConcurrentWeakMapTest::::putAllTest()","118":"ConcurrentWeakMapTest::::putAllTest()","119":"ConcurrentWeakMapTest::::putAllTest()","120":"ConcurrentWeakMapTest::::putAllTest()","121":"ConcurrentWeakMapTest::::putAllTest()","122":"ConcurrentWeakMapTest::::putAllTest()","123":"ConcurrentWeakMapTest::::putAllTest()","125":"ConcurrentWeakMapTest::::clearTest()","126":"ConcurrentWeakMapTest::::clearTest()","127":"ConcurrentWeakMapTest::::clearTest()","128":"ConcurrentWeakMapTest::::clearTest()","129":"ConcurrentWeakMapTest::::clearTest()","130":"ConcurrentWeakMapTest::::clearTest()","131":"ConcurrentWeakMapTest::::clearTest()","132":"ConcurrentWeakMapTest::::clearTest()","133":"ConcurrentWeakMapTest::::clearTest()","134":"ConcurrentWeakMapTest::::clearTest()","135":"ConcurrentWeakMapTest::::clearTest()","137":"ConcurrentWeakMapTest::::keySetTest()","138":"ConcurrentWeakMapTest::::keySetTest()","139":"ConcurrentWeakMapTest::::keySetTest()","140":"ConcurrentWeakMapTest::::keySetTest()","141":"ConcurrentWeakMapTest::::keySetTest()","142":"ConcurrentWeakMapTest::::keySetTest()","143":"ConcurrentWeakMapTest::::keySetTest()","144":"ConcurrentWeakMapTest::::keySetTest()","145":"ConcurrentWeakMapTest::::keySetTest()","146":"ConcurrentWeakMapTest::::keySetTest()","147":"ConcurrentWeakMapTest::::keySetTest()","148":"ConcurrentWeakMapTest::::keySetTest()","149":"ConcurrentWeakMapTest::::keySetTest()","150":"ConcurrentWeakMapTest::::keySetTest()","152":"ConcurrentWeakMapTest::::valuesTest()","153":"ConcurrentWeakMapTest::::valuesTest()","154":"ConcurrentWeakMapTest::::valuesTest()","155":"ConcurrentWeakMapTest::::valuesTest()","156":"ConcurrentWeakMapTest::::valuesTest()","157":"ConcurrentWeakMapTest::::valuesTest()","158":"ConcurrentWeakMapTest::::valuesTest()","159":"ConcurrentWeakMapTest::::valuesTest()","160":"ConcurrentWeakMapTest::::valuesTest()","161":"ConcurrentWeakMapTest::::valuesTest()","162":"ConcurrentWeakMapTest::::valuesTest()","163":"ConcurrentWeakMapTest::::valuesTest()","164":"ConcurrentWeakMapTest::::valuesTest()","165":"ConcurrentWeakMapTest::::valuesTest()","166":"ConcurrentWeakMapTest::::valuesTest()","167":"ConcurrentWeakMapTest::::valuesTest()","168":"ConcurrentWeakMapTest::::valuesTest()","170":"ConcurrentWeakMapTest::::entrySetTest()","171":"ConcurrentWeakMapTest::::entrySetTest()","172":"ConcurrentWeakMapTest::::entrySetTest()","173":"ConcurrentWeakMapTest::::entrySetTest()","174":"ConcurrentWeakMapTest::::entrySetTest()","175":"ConcurrentWeakMapTest::::entrySetTest()","176":"ConcurrentWeakMapTest::::entrySetTest()","177":"ConcurrentWeakMapTest::::entrySetTest()","178":"ConcurrentWeakMapTest::::entrySetTest()","179":"ConcurrentWeakMapTest::::entrySetTest()","180":"ConcurrentWeakMapTest::::entrySetTest()","181":"ConcurrentWeakMapTest::::entrySetTest()","182":"ConcurrentWeakMapTest::::entrySetTest()","183":"ConcurrentWeakMapTest::::entrySetTest()"},"tests":[{"test_lines":[37,45],"covered_lines":[37,38,45,85],"label":"ConcurrentWeakMap::::size()"},{"test_lines":[47,52],"covered_lines":[37,38,53,85],"label":"ConcurrentWeakMap::::isEmpty()"},{"test_lines":[54,58],"covered_lines":[37,38,53],"label":"ConcurrentWeakMap::::isEmpty()"},{"test_lines":[60,65],"covered_lines":[37,38,61,85],"label":"ConcurrentWeakMap::::containsKey(java.lang.Object)"},{"test_lines":[67,72],"covered_lines":[37,38,61,85],"label":"ConcurrentWeakMap::::containsKey(java.lang.Object)"},{"test_lines":[74,79],"covered_lines":[37,38,69,85],"label":"ConcurrentWeakMap::::containsValue(java.lang.Object)"},{"test_lines":[81,86],"covered_lines":[37,38,69,85],"label":"ConcurrentWeakMap::::containsValue(java.lang.Object)"},{"test_lines":[88,93],"covered_lines":[37,38,77,85],"label":"ConcurrentWeakMap::::get(java.lang.Object)"},{"test_lines":[95,100],"covered_lines":[37,38,85],"label":"ConcurrentWeakMap::::put(K,V)"},{"test_lines":[102,107],"covered_lines":[37,38,85,93],"label":"ConcurrentWeakMap::::remove(java.lang.Object)"},{"test_lines":[109,123],"covered_lines":[37,38,45,77,85,101,102],"label":"ConcurrentWeakMap::::putAll(java.util.Map<? extends K, ? extends V>)"},{"test_lines":[125,135],"covered_lines":[37,38,45,85,109,110],"label":"ConcurrentWeakMap::::clear()"},{"test_lines":[137,150],"covered_lines":[37,38,85,101,102,117],"label":"ConcurrentWeakMap::::keySet()"},{"test_lines":[152,168],"covered_lines":[37,38,85,101,102,125],"label":"ConcurrentWeakMap::::values()"},{"test_lines":[170,183],"covered_lines":[37,38,85,101,102,133],"label":"ConcurrentWeakMap::::entrySet()"}]},"/bernard/dataset_construction/prep/repos/itext-java/commons/src/main/java/com/itextpdf/commons/actions/AbstractITextConfigurationEvent.java":{"class_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.actions;\n","\n","import com.itextpdf.commons.actions.processors.DefaultITextProductEventProcessor;\n","import com.itextpdf.commons.actions.processors.ITextProductEventProcessor;\n","import com.itextpdf.commons.actions.sequence.SequenceId;\n","\n","import java.util.List;\n","import java.util.Map;\n","\n","/**\n"," * Abstract class which represents system configuration events. Only for internal usage.\n"," */\n","public abstract class AbstractITextConfigurationEvent extends AbstractITextEvent {\n","    /**\n","     * Adds a new {@link ITextProductEventProcessor} for a product.\n","     *\n","     * @param processor is a new processor\n","     * \n","     * @return a replaced processor for the product\n","     */\n","    protected ITextProductEventProcessor addProcessor(ITextProductEventProcessor processor) {\n","        return ProductEventHandler.INSTANCE.addProcessor(processor);\n","    }\n","\n","    /**\n","     * Removes a processor registered for a product.\n","     * \n","     * @param productName is a product for which processor is removed\n","     * \n","     * @return removed processor\n","     */\n","    protected ITextProductEventProcessor removeProcessor(String productName) {\n","        return ProductEventHandler.INSTANCE.removeProcessor(productName);\n","    }\n","\n","    /**\n","     * Gets a processor registered for a product.\n","     *\n","     * <p>\n","     * If processor isn't registered and product supports AGPL mode\n","     * {@link DefaultITextProductEventProcessor} will be obtained otherwise null will be returned.\n","     *\n","     * @param productName is a product for which processor is obtained\n","     *\n","     * @return processor for the product\n","     */\n","    protected ITextProductEventProcessor getActiveProcessor(String productName) {\n","        return ProductEventHandler.INSTANCE.getActiveProcessor(productName);\n","    }\n","\n","    /**\n","     * Gets an unmodifiable map of registered processors.\n","     *\n","     * @return all processors\n","     */\n","    protected Map<String, ITextProductEventProcessor> getProcessors() {\n","        return ProductEventHandler.INSTANCE.getProcessors();\n","    }\n","\n","    /**\n","     * Gets events registered for provided identifier.\n","     *\n","     * @param id is the identifier\n","     *\n","     * @return the list of event for identifier\n","     */\n","    protected List<AbstractProductProcessITextEvent> getEvents(SequenceId id) {\n","        return ProductEventHandler.INSTANCE.getEvents(id);\n","    }\n","\n","    /**\n","     * Registers a new event for provided identifier.\n","     *\n","     * @param id is the identifier\n","     * @param event is the event to register\n","     */\n","    protected void addEvent(SequenceId id, AbstractProductProcessITextEvent event) {\n","        ProductEventHandler.INSTANCE.addEvent(id, event);\n","    }\n","\n","    /**\n","     * Registers internal namespace.\n","     *\n","     * @param namespace is the namespace to register\n","     */\n","    protected void registerInternalNamespace(String namespace) {\n","        AbstractITextEvent.registerNamespace(namespace);\n","    }\n","\n","    /**\n","     * Method defines the logic of action processing.\n","     */\n","    protected abstract void doAction();\n","}\n"],"test_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.actions;\n","\n","import com.itextpdf.commons.actions.confirmations.EventConfirmationType;\n","import com.itextpdf.commons.actions.data.ProductData;\n","import com.itextpdf.commons.actions.processors.ITextProductEventProcessor;\n","import com.itextpdf.commons.actions.sequence.SequenceId;\n","import com.itextpdf.test.ExtendedITextTest;\n","import com.itextpdf.test.annotations.type.UnitTest;\n","import org.junit.After;\n","import org.junit.Assert;\n","import org.junit.Test;\n","import org.junit.experimental.categories.Category;\n","\n","import java.util.List;\n","import java.util.Map;\n","\n","@Category(UnitTest.class)\n","public class AbstractITextConfigurationEventTest extends ExtendedITextTest {\n","\n","    @After\n","    public void after() {\n","        ProductEventHandler.INSTANCE.clearProcessors();\n","    }\n","\n","    @Test\n","    public void addProcessorTest() {\n","        AbstractITextConfigurationEvent event = new TestAbstractITextConfigurationEvent();\n","        ITextProductEventProcessor processor = new TestITextProductEventProcessor();\n","        event.addProcessor(processor);\n","\n","        Map<String, ITextProductEventProcessor> processors = ProductEventHandler.INSTANCE.getProcessors();\n","        Assert.assertEquals(1, processors.size());\n","        Assert.assertTrue(processors.values().contains(processor));\n","    }\n","\n","    @Test\n","    public void getProcessorsTest() {\n","        AbstractITextConfigurationEvent event = new TestAbstractITextConfigurationEvent();\n","        ITextProductEventProcessor processor = new TestITextProductEventProcessor();\n","        event.addProcessor(processor);\n","\n","        Assert.assertEquals(ProductEventHandler.INSTANCE.getProcessors(), event.getProcessors());\n","    }\n","\n","    @Test\n","    public void removeProcessorTest() {\n","        AbstractITextConfigurationEvent event = new TestAbstractITextConfigurationEvent();\n","        ITextProductEventProcessor processor = new TestITextProductEventProcessor();\n","        event.addProcessor(processor);\n","\n","        event.removeProcessor(processor.getProductName());\n","\n","        Map<String, ITextProductEventProcessor> processors = ProductEventHandler.INSTANCE.getProcessors();\n","        Assert.assertEquals(0, processors.size());\n","    }\n","\n","    @Test\n","    public void getActiveProcessorTest() {\n","        AbstractITextConfigurationEvent event = new TestAbstractITextConfigurationEvent();\n","        ITextProductEventProcessor processor = new TestITextProductEventProcessor();\n","        event.addProcessor(processor);\n","\n","        Assert.assertEquals(processor, event.getActiveProcessor(processor.getProductName()));\n","    }\n","\n","    @Test\n","    public void addEventTest() {\n","        AbstractITextConfigurationEvent configurationEvent = new TestAbstractITextConfigurationEvent();\n","        AbstractProductProcessITextEvent processEvent = new TestAbstractProductProcessITextEvent();\n","        SequenceId id = new SequenceId();\n","        configurationEvent.addEvent(id, processEvent);\n","\n","        List<AbstractProductProcessITextEvent> events = ProductEventHandler.INSTANCE.getEvents(id);\n","        Assert.assertEquals(1, events.size());\n","        Assert.assertEquals(processEvent, events.get(0));\n","    }\n","\n","    @Test\n","    public void getEventsTest() {\n","        AbstractITextConfigurationEvent configurationEvent = new TestAbstractITextConfigurationEvent();\n","        SequenceId id = new SequenceId();\n","        configurationEvent.addEvent(id, new TestAbstractProductProcessITextEvent());\n","        configurationEvent.addEvent(id, new TestAbstractProductProcessITextEvent());\n","\n","        Assert.assertEquals(ProductEventHandler.INSTANCE.getEvents(id), configurationEvent.getEvents(id));\n","    }\n","\n","    static class TestAbstractITextConfigurationEvent extends AbstractITextConfigurationEvent {\n","        @Override\n","        protected void doAction() {\n","            // Empty method.\n","        }\n","    }\n","\n","    static class TestAbstractProductProcessITextEvent extends AbstractProductProcessITextEvent {\n","\n","        public TestAbstractProductProcessITextEvent() {\n","            super(new SequenceId(),\n","                    new ProductData(\"test public product name\", \"test product name\", \"test version\", 0, 1),\n","                    null, EventConfirmationType.ON_DEMAND);\n","        }\n","\n","        @Override\n","        public String getEventType() {\n","            return \"test event type\";\n","        }\n","    }\n","\n","    static class TestITextProductEventProcessor implements ITextProductEventProcessor {\n","        @Override\n","        public void onEvent(AbstractProductProcessITextEvent event) {\n","            // Empty method.\n","        }\n","\n","        @Override\n","        public String getProductName() {\n","            return \"test product\";\n","        }\n","\n","        @Override\n","        public String getUsageType() {\n","            return \"test usage type\";\n","        }\n","\n","        @Override\n","        public String getProducer() {\n","            return \"test producer\";\n","        }\n","    }\n","}\n"],"method_lines_dic":{"AbstractITextConfigurationEvent::::addProcessor(com.itextpdf.commons.actions.processors.ITextProductEventProcessor)":[43,45],"AbstractITextConfigurationEvent::::removeProcessor(java.lang.String)":[54,56],"AbstractITextConfigurationEvent::::getActiveProcessor(java.lang.String)":[69,71],"AbstractITextConfigurationEvent::::getProcessors()":[78,80],"AbstractITextConfigurationEvent::::getEvents(com.itextpdf.commons.actions.sequence.SequenceId)":[89,91],"AbstractITextConfigurationEvent::::addEvent(com.itextpdf.commons.actions.sequence.SequenceId,com.itextpdf.commons.actions.AbstractProductProcessITextEvent)":[99,101],"AbstractITextConfigurationEvent::::registerInternalNamespace(java.lang.String)":[108,110],"AbstractITextConfigurationEvent::::doAction()":[115,115]},"test_method_lines_dic":{"AbstractITextConfigurationEventTest::::after()":[42,45],"AbstractITextConfigurationEventTest::::addProcessorTest()":[47,56],"AbstractITextConfigurationEventTest::::getProcessorsTest()":[58,65],"AbstractITextConfigurationEventTest::::removeProcessorTest()":[67,77],"AbstractITextConfigurationEventTest::::getActiveProcessorTest()":[79,86],"AbstractITextConfigurationEventTest::::addEventTest()":[88,98],"AbstractITextConfigurationEventTest::::getEventsTest()":[100,108],"AbstractITextConfigurationEventTest.TestAbstractITextConfigurationEvent::::doAction()":[111,114],"AbstractITextConfigurationEventTest.TestAbstractProductProcessITextEvent::::getEventType()":[125,128],"AbstractITextConfigurationEventTest.TestITextProductEventProcessor::::getProductName()":[137,140],"AbstractITextConfigurationEventTest.TestITextProductEventProcessor::::getUsageType()":[142,145],"AbstractITextConfigurationEventTest.TestITextProductEventProcessor::::getProducer()":[147,150]},"reverse_method_lines_dic":{"43":"AbstractITextConfigurationEvent::::addProcessor(com.itextpdf.commons.actions.processors.ITextProductEventProcessor)","44":"AbstractITextConfigurationEvent::::addProcessor(com.itextpdf.commons.actions.processors.ITextProductEventProcessor)","45":"AbstractITextConfigurationEvent::::addProcessor(com.itextpdf.commons.actions.processors.ITextProductEventProcessor)","54":"AbstractITextConfigurationEvent::::removeProcessor(java.lang.String)","55":"AbstractITextConfigurationEvent::::removeProcessor(java.lang.String)","56":"AbstractITextConfigurationEvent::::removeProcessor(java.lang.String)","69":"AbstractITextConfigurationEvent::::getActiveProcessor(java.lang.String)","70":"AbstractITextConfigurationEvent::::getActiveProcessor(java.lang.String)","71":"AbstractITextConfigurationEvent::::getActiveProcessor(java.lang.String)","78":"AbstractITextConfigurationEvent::::getProcessors()","79":"AbstractITextConfigurationEvent::::getProcessors()","80":"AbstractITextConfigurationEvent::::getProcessors()","89":"AbstractITextConfigurationEvent::::getEvents(com.itextpdf.commons.actions.sequence.SequenceId)","90":"AbstractITextConfigurationEvent::::getEvents(com.itextpdf.commons.actions.sequence.SequenceId)","91":"AbstractITextConfigurationEvent::::getEvents(com.itextpdf.commons.actions.sequence.SequenceId)","99":"AbstractITextConfigurationEvent::::addEvent(com.itextpdf.commons.actions.sequence.SequenceId,com.itextpdf.commons.actions.AbstractProductProcessITextEvent)","100":"AbstractITextConfigurationEvent::::addEvent(com.itextpdf.commons.actions.sequence.SequenceId,com.itextpdf.commons.actions.AbstractProductProcessITextEvent)","101":"AbstractITextConfigurationEvent::::addEvent(com.itextpdf.commons.actions.sequence.SequenceId,com.itextpdf.commons.actions.AbstractProductProcessITextEvent)","108":"AbstractITextConfigurationEvent::::registerInternalNamespace(java.lang.String)","109":"AbstractITextConfigurationEvent::::registerInternalNamespace(java.lang.String)","110":"AbstractITextConfigurationEvent::::registerInternalNamespace(java.lang.String)","115":"AbstractITextConfigurationEvent::::doAction()"},"test_reverse_method_lines_dic":{"42":"AbstractITextConfigurationEventTest::::after()","43":"AbstractITextConfigurationEventTest::::after()","44":"AbstractITextConfigurationEventTest::::after()","45":"AbstractITextConfigurationEventTest::::after()","47":"AbstractITextConfigurationEventTest::::addProcessorTest()","48":"AbstractITextConfigurationEventTest::::addProcessorTest()","49":"AbstractITextConfigurationEventTest::::addProcessorTest()","50":"AbstractITextConfigurationEventTest::::addProcessorTest()","51":"AbstractITextConfigurationEventTest::::addProcessorTest()","52":"AbstractITextConfigurationEventTest::::addProcessorTest()","53":"AbstractITextConfigurationEventTest::::addProcessorTest()","54":"AbstractITextConfigurationEventTest::::addProcessorTest()","55":"AbstractITextConfigurationEventTest::::addProcessorTest()","56":"AbstractITextConfigurationEventTest::::addProcessorTest()","58":"AbstractITextConfigurationEventTest::::getProcessorsTest()","59":"AbstractITextConfigurationEventTest::::getProcessorsTest()","60":"AbstractITextConfigurationEventTest::::getProcessorsTest()","61":"AbstractITextConfigurationEventTest::::getProcessorsTest()","62":"AbstractITextConfigurationEventTest::::getProcessorsTest()","63":"AbstractITextConfigurationEventTest::::getProcessorsTest()","64":"AbstractITextConfigurationEventTest::::getProcessorsTest()","65":"AbstractITextConfigurationEventTest::::getProcessorsTest()","67":"AbstractITextConfigurationEventTest::::removeProcessorTest()","68":"AbstractITextConfigurationEventTest::::removeProcessorTest()","69":"AbstractITextConfigurationEventTest::::removeProcessorTest()","70":"AbstractITextConfigurationEventTest::::removeProcessorTest()","71":"AbstractITextConfigurationEventTest::::removeProcessorTest()","72":"AbstractITextConfigurationEventTest::::removeProcessorTest()","73":"AbstractITextConfigurationEventTest::::removeProcessorTest()","74":"AbstractITextConfigurationEventTest::::removeProcessorTest()","75":"AbstractITextConfigurationEventTest::::removeProcessorTest()","76":"AbstractITextConfigurationEventTest::::removeProcessorTest()","77":"AbstractITextConfigurationEventTest::::removeProcessorTest()","79":"AbstractITextConfigurationEventTest::::getActiveProcessorTest()","80":"AbstractITextConfigurationEventTest::::getActiveProcessorTest()","81":"AbstractITextConfigurationEventTest::::getActiveProcessorTest()","82":"AbstractITextConfigurationEventTest::::getActiveProcessorTest()","83":"AbstractITextConfigurationEventTest::::getActiveProcessorTest()","84":"AbstractITextConfigurationEventTest::::getActiveProcessorTest()","85":"AbstractITextConfigurationEventTest::::getActiveProcessorTest()","86":"AbstractITextConfigurationEventTest::::getActiveProcessorTest()","88":"AbstractITextConfigurationEventTest::::addEventTest()","89":"AbstractITextConfigurationEventTest::::addEventTest()","90":"AbstractITextConfigurationEventTest::::addEventTest()","91":"AbstractITextConfigurationEventTest::::addEventTest()","92":"AbstractITextConfigurationEventTest::::addEventTest()","93":"AbstractITextConfigurationEventTest::::addEventTest()","94":"AbstractITextConfigurationEventTest::::addEventTest()","95":"AbstractITextConfigurationEventTest::::addEventTest()","96":"AbstractITextConfigurationEventTest::::addEventTest()","97":"AbstractITextConfigurationEventTest::::addEventTest()","98":"AbstractITextConfigurationEventTest::::addEventTest()","100":"AbstractITextConfigurationEventTest::::getEventsTest()","101":"AbstractITextConfigurationEventTest::::getEventsTest()","102":"AbstractITextConfigurationEventTest::::getEventsTest()","103":"AbstractITextConfigurationEventTest::::getEventsTest()","104":"AbstractITextConfigurationEventTest::::getEventsTest()","105":"AbstractITextConfigurationEventTest::::getEventsTest()","106":"AbstractITextConfigurationEventTest::::getEventsTest()","107":"AbstractITextConfigurationEventTest::::getEventsTest()","108":"AbstractITextConfigurationEventTest::::getEventsTest()","111":"AbstractITextConfigurationEventTest.TestAbstractITextConfigurationEvent::::doAction()","112":"AbstractITextConfigurationEventTest.TestAbstractITextConfigurationEvent::::doAction()","113":"AbstractITextConfigurationEventTest.TestAbstractITextConfigurationEvent::::doAction()","114":"AbstractITextConfigurationEventTest.TestAbstractITextConfigurationEvent::::doAction()","125":"AbstractITextConfigurationEventTest.TestAbstractProductProcessITextEvent::::getEventType()","126":"AbstractITextConfigurationEventTest.TestAbstractProductProcessITextEvent::::getEventType()","127":"AbstractITextConfigurationEventTest.TestAbstractProductProcessITextEvent::::getEventType()","128":"AbstractITextConfigurationEventTest.TestAbstractProductProcessITextEvent::::getEventType()","137":"AbstractITextConfigurationEventTest.TestITextProductEventProcessor::::getProductName()","138":"AbstractITextConfigurationEventTest.TestITextProductEventProcessor::::getProductName()","139":"AbstractITextConfigurationEventTest.TestITextProductEventProcessor::::getProductName()","140":"AbstractITextConfigurationEventTest.TestITextProductEventProcessor::::getProductName()","142":"AbstractITextConfigurationEventTest.TestITextProductEventProcessor::::getUsageType()","143":"AbstractITextConfigurationEventTest.TestITextProductEventProcessor::::getUsageType()","144":"AbstractITextConfigurationEventTest.TestITextProductEventProcessor::::getUsageType()","145":"AbstractITextConfigurationEventTest.TestITextProductEventProcessor::::getUsageType()","147":"AbstractITextConfigurationEventTest.TestITextProductEventProcessor::::getProducer()","148":"AbstractITextConfigurationEventTest.TestITextProductEventProcessor::::getProducer()","149":"AbstractITextConfigurationEventTest.TestITextProductEventProcessor::::getProducer()","150":"AbstractITextConfigurationEventTest.TestITextProductEventProcessor::::getProducer()"},"tests":[{"test_lines":[47,56],"covered_lines":[35,44],"label":"AbstractITextConfigurationEvent::::addProcessor(com.itextpdf.commons.actions.processors.ITextProductEventProcessor)"},{"test_lines":[58,65],"covered_lines":[35,44,79],"label":"AbstractITextConfigurationEvent::::getProcessors()"},{"test_lines":[67,77],"covered_lines":[35,44,55],"label":"AbstractITextConfigurationEvent::::removeProcessor(java.lang.String)"},{"test_lines":[79,86],"covered_lines":[35,44,70],"label":"AbstractITextConfigurationEvent::::getActiveProcessor(java.lang.String)"},{"test_lines":[88,98],"covered_lines":[35,100,101],"label":"AbstractITextConfigurationEvent::::addEvent(com.itextpdf.commons.actions.sequence.SequenceId,com.itextpdf.commons.actions.AbstractProductProcessITextEvent)"},{"test_lines":[100,108],"covered_lines":[35,90,100,101],"label":"AbstractITextConfigurationEvent::::getEvents(com.itextpdf.commons.actions.sequence.SequenceId)"}]},"/bernard/dataset_construction/prep/repos/itext-java/commons/src/main/java/com/itextpdf/commons/actions/AbstractContextBasedEventHandler.java":{"class_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.actions;\n","\n","import com.itextpdf.commons.actions.contexts.ContextManager;\n","import com.itextpdf.commons.actions.contexts.IContext;\n","\n","/**\n"," * Base class for events handling depending on the context.\n"," */\n","public abstract class AbstractContextBasedEventHandler implements IEventHandler {\n","    private final IContext defaultContext;\n","\n","    /**\n","     * Creates a new instance of the handler with the defined fallback for events within unknown\n","     * contexts.\n","     *\n","     * @param onUnknownContext is a fallback for events within unknown context\n","     */\n","    protected AbstractContextBasedEventHandler(IContext onUnknownContext) {\n","        super();\n","        this.defaultContext = onUnknownContext;\n","    }\n","\n","    /**\n","     * Performs context validation and if event is allowed to be processed passes it to\n","     * {@link #onAcceptedEvent(AbstractContextBasedITextEvent)}.\n","     *\n","     * @param event to handle\n","     */\n","    public final void onEvent(IEvent event) {\n","        if (!(event instanceof AbstractContextBasedITextEvent)) {\n","            return;\n","        }\n","\n","        IContext context = null;\n","        final AbstractContextBasedITextEvent iTextEvent = (AbstractContextBasedITextEvent) event;\n","        if (iTextEvent.getMetaInfo() != null) {\n","            context = ContextManager.getInstance().getContext(iTextEvent.getMetaInfo().getClass());\n","        }\n","        if (context == null) {\n","            context = ContextManager.getInstance().getContext(iTextEvent.getClassFromContext());\n","        }\n","\n","        if (context == null) {\n","            context = this.defaultContext;\n","        }\n","\n","        if (context.isAllowed(iTextEvent)) {\n","            onAcceptedEvent(iTextEvent);\n","        }\n","    }\n","\n","    /**\n","     * Handles the accepted event.\n","     *\n","     * @param event to handle\n","     */\n","    protected abstract void onAcceptedEvent(AbstractContextBasedITextEvent event);\n","}\n"],"test_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.actions;\n","\n","import com.itextpdf.commons.actions.contexts.IContext;\n","import com.itextpdf.commons.actions.contexts.UnknownContext;\n","import com.itextpdf.commons.actions.sequence.SequenceId;\n","import com.itextpdf.commons.ecosystem.ITextTestEvent;\n","import com.itextpdf.commons.ecosystem.TestMetaInfo;\n","import com.itextpdf.test.ExtendedITextTest;\n","import com.itextpdf.test.annotations.type.UnitTest;\n","\n","import org.junit.Assert;\n","import org.junit.Test;\n","import org.junit.experimental.categories.Category;\n","\n","@Category(UnitTest.class)\n","public class AbstractContextBasedEventHandlerTest extends ExtendedITextTest {\n","\n","    @Test\n","    public void coreEventProcessedByHandlerTest() {\n","        TestEventHandler handler = new TestEventHandler(UnknownContext.PERMISSIVE);\n","        handler.onEvent(new ITextTestEvent(new SequenceId(), null,\n","                \"test-event\",\n","                ProductNameConstant.ITEXT_CORE));\n","        Assert.assertTrue(handler.wasInvoked());\n","    }\n","\n","    @Test\n","    public void anotherProductEventNotProcessedByHandlerTest() {\n","        TestEventHandler handler = new TestEventHandler(UnknownContext.PERMISSIVE);\n","        handler.onEvent(new ITextTestEvent(new SequenceId(), null,\n","                \"test-event\",\n","                ProductNameConstant.PDF_HTML));\n","        Assert.assertTrue(handler.wasInvoked());\n","    }\n","\n","    @Test\n","    public void eventWithMetaInfoTest() {\n","        TestEventHandler handler = new TestEventHandler(UnknownContext.PERMISSIVE);\n","        handler.onEvent(new ITextTestEvent(new SequenceId(), new TestMetaInfo(\"meta info from iTextCore\"),\n","                \"test-event\",\n","                ProductNameConstant.ITEXT_CORE));\n","        Assert.assertTrue(handler.wasInvoked());\n","    }\n","\n","    @Test\n","    public void notITextEventIsIgnoredTest() {\n","        TestEventHandler handler = new TestEventHandler(UnknownContext.PERMISSIVE);\n","        handler.onEvent(new UnknownEvent());\n","        Assert.assertFalse(handler.wasInvoked());\n","    }\n","\n","    private static class TestEventHandler extends AbstractContextBasedEventHandler {\n","        private boolean invoked = false;\n","        public TestEventHandler(IContext onUnknownContext) {\n","            super(onUnknownContext);\n","        }\n","\n","        @Override\n","        protected void onAcceptedEvent(AbstractContextBasedITextEvent event) {\n","            invoked = true;\n","        }\n","\n","        public boolean wasInvoked() {\n","            return invoked;\n","        }\n","    }\n","\n","    private static class UnknownEvent implements IEvent {\n","\n","    }\n","}\n"],"method_lines_dic":{"AbstractContextBasedEventHandler::::onEvent(com.itextpdf.commons.actions.IEvent)":[51,72],"AbstractContextBasedEventHandler::::onAcceptedEvent(com.itextpdf.commons.actions.AbstractContextBasedITextEvent)":[79,79]},"test_method_lines_dic":{"AbstractContextBasedEventHandlerTest::::coreEventProcessedByHandlerTest()":[40,47],"AbstractContextBasedEventHandlerTest::::anotherProductEventNotProcessedByHandlerTest()":[49,56],"AbstractContextBasedEventHandlerTest::::eventWithMetaInfoTest()":[58,65],"AbstractContextBasedEventHandlerTest::::notITextEventIsIgnoredTest()":[67,72],"AbstractContextBasedEventHandlerTest.TestEventHandler::::wasInvoked()":[85,87]},"reverse_method_lines_dic":{"51":"AbstractContextBasedEventHandler::::onEvent(com.itextpdf.commons.actions.IEvent)","52":"AbstractContextBasedEventHandler::::onEvent(com.itextpdf.commons.actions.IEvent)","53":"AbstractContextBasedEventHandler::::onEvent(com.itextpdf.commons.actions.IEvent)","54":"AbstractContextBasedEventHandler::::onEvent(com.itextpdf.commons.actions.IEvent)","55":"AbstractContextBasedEventHandler::::onEvent(com.itextpdf.commons.actions.IEvent)","56":"AbstractContextBasedEventHandler::::onEvent(com.itextpdf.commons.actions.IEvent)","57":"AbstractContextBasedEventHandler::::onEvent(com.itextpdf.commons.actions.IEvent)","58":"AbstractContextBasedEventHandler::::onEvent(com.itextpdf.commons.actions.IEvent)","59":"AbstractContextBasedEventHandler::::onEvent(com.itextpdf.commons.actions.IEvent)","60":"AbstractContextBasedEventHandler::::onEvent(com.itextpdf.commons.actions.IEvent)","61":"AbstractContextBasedEventHandler::::onEvent(com.itextpdf.commons.actions.IEvent)","62":"AbstractContextBasedEventHandler::::onEvent(com.itextpdf.commons.actions.IEvent)","63":"AbstractContextBasedEventHandler::::onEvent(com.itextpdf.commons.actions.IEvent)","64":"AbstractContextBasedEventHandler::::onEvent(com.itextpdf.commons.actions.IEvent)","65":"AbstractContextBasedEventHandler::::onEvent(com.itextpdf.commons.actions.IEvent)","66":"AbstractContextBasedEventHandler::::onEvent(com.itextpdf.commons.actions.IEvent)","67":"AbstractContextBasedEventHandler::::onEvent(com.itextpdf.commons.actions.IEvent)","68":"AbstractContextBasedEventHandler::::onEvent(com.itextpdf.commons.actions.IEvent)","69":"AbstractContextBasedEventHandler::::onEvent(com.itextpdf.commons.actions.IEvent)","70":"AbstractContextBasedEventHandler::::onEvent(com.itextpdf.commons.actions.IEvent)","71":"AbstractContextBasedEventHandler::::onEvent(com.itextpdf.commons.actions.IEvent)","72":"AbstractContextBasedEventHandler::::onEvent(com.itextpdf.commons.actions.IEvent)","79":"AbstractContextBasedEventHandler::::onAcceptedEvent(com.itextpdf.commons.actions.AbstractContextBasedITextEvent)"},"test_reverse_method_lines_dic":{"40":"AbstractContextBasedEventHandlerTest::::coreEventProcessedByHandlerTest()","41":"AbstractContextBasedEventHandlerTest::::coreEventProcessedByHandlerTest()","42":"AbstractContextBasedEventHandlerTest::::coreEventProcessedByHandlerTest()","43":"AbstractContextBasedEventHandlerTest::::coreEventProcessedByHandlerTest()","44":"AbstractContextBasedEventHandlerTest::::coreEventProcessedByHandlerTest()","45":"AbstractContextBasedEventHandlerTest::::coreEventProcessedByHandlerTest()","46":"AbstractContextBasedEventHandlerTest::::coreEventProcessedByHandlerTest()","47":"AbstractContextBasedEventHandlerTest::::coreEventProcessedByHandlerTest()","49":"AbstractContextBasedEventHandlerTest::::anotherProductEventNotProcessedByHandlerTest()","50":"AbstractContextBasedEventHandlerTest::::anotherProductEventNotProcessedByHandlerTest()","51":"AbstractContextBasedEventHandlerTest::::anotherProductEventNotProcessedByHandlerTest()","52":"AbstractContextBasedEventHandlerTest::::anotherProductEventNotProcessedByHandlerTest()","53":"AbstractContextBasedEventHandlerTest::::anotherProductEventNotProcessedByHandlerTest()","54":"AbstractContextBasedEventHandlerTest::::anotherProductEventNotProcessedByHandlerTest()","55":"AbstractContextBasedEventHandlerTest::::anotherProductEventNotProcessedByHandlerTest()","56":"AbstractContextBasedEventHandlerTest::::anotherProductEventNotProcessedByHandlerTest()","58":"AbstractContextBasedEventHandlerTest::::eventWithMetaInfoTest()","59":"AbstractContextBasedEventHandlerTest::::eventWithMetaInfoTest()","60":"AbstractContextBasedEventHandlerTest::::eventWithMetaInfoTest()","61":"AbstractContextBasedEventHandlerTest::::eventWithMetaInfoTest()","62":"AbstractContextBasedEventHandlerTest::::eventWithMetaInfoTest()","63":"AbstractContextBasedEventHandlerTest::::eventWithMetaInfoTest()","64":"AbstractContextBasedEventHandlerTest::::eventWithMetaInfoTest()","65":"AbstractContextBasedEventHandlerTest::::eventWithMetaInfoTest()","67":"AbstractContextBasedEventHandlerTest::::notITextEventIsIgnoredTest()","68":"AbstractContextBasedEventHandlerTest::::notITextEventIsIgnoredTest()","69":"AbstractContextBasedEventHandlerTest::::notITextEventIsIgnoredTest()","70":"AbstractContextBasedEventHandlerTest::::notITextEventIsIgnoredTest()","71":"AbstractContextBasedEventHandlerTest::::notITextEventIsIgnoredTest()","72":"AbstractContextBasedEventHandlerTest::::notITextEventIsIgnoredTest()","85":"AbstractContextBasedEventHandlerTest.TestEventHandler::::wasInvoked()","86":"AbstractContextBasedEventHandlerTest.TestEventHandler::::wasInvoked()","87":"AbstractContextBasedEventHandlerTest.TestEventHandler::::wasInvoked()"},"tests":[{"test_lines":[40,47],"covered_lines":[41,42,43,52,56,57,58,61,62,65,66,69,70,72],"label":"AbstractContextBasedEventHandler::::onEvent(com.itextpdf.commons.actions.IEvent)"},{"test_lines":[49,56],"covered_lines":[41,42,43,52,56,57,58,61,62,65,66,69,70,72],"label":"AbstractContextBasedEventHandler::::onEvent(com.itextpdf.commons.actions.IEvent)"},{"test_lines":[58,65],"covered_lines":[41,42,43,52,56,57,58,59,61,62,65,66,69,70,72],"label":"AbstractContextBasedEventHandler::::onEvent(com.itextpdf.commons.actions.IEvent)"},{"test_lines":[67,72],"covered_lines":[41,42,43,52,53],"label":"AbstractContextBasedEventHandler::::onEvent(com.itextpdf.commons.actions.IEvent)"}]},"/bernard/dataset_construction/prep/repos/itext-java/commons/src/main/java/com/itextpdf/commons/actions/AbstractStatisticsEvent.java":{"class_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.actions;\n","\n","import com.itextpdf.commons.actions.data.ProductData;\n","import com.itextpdf.commons.logs.CommonsLogMessageConstant;\n","import com.itextpdf.commons.utils.MessageFormatUtil;\n","\n","import java.util.List;\n","import org.slf4j.Logger;\n","import org.slf4j.LoggerFactory;\n","\n","/**\n"," * Abstract class which defines statistics event. Only for internal usage.\n"," */\n","public abstract class AbstractStatisticsEvent extends AbstractProductITextEvent {\n","\n","    private static final Logger LOGGER = LoggerFactory.getLogger(AbstractStatisticsEvent.class);\n","\n","    /**\n","     * Creates instance of abstract statistics iText event based on passed product data. Only for internal usage.\n","     *\n","     * @param productData is a description of the product which has generated an event\n","     */\n","    protected AbstractStatisticsEvent(ProductData productData) {\n","        super(productData);\n","    }\n","\n","    /**\n","     * Creates statistics aggregator based on provided statistics name.\n","     * By default prints log warning and returns <code>null</code>.\n","     *\n","     * @param statisticsName name of statistics based on which aggregator will be created.\n","     *                       Shall be one of those returned from {@link AbstractStatisticsEvent#getStatisticsNames()}\n","     * @return new instance of {@link AbstractStatisticsAggregator}\n","     */\n","    public AbstractStatisticsAggregator createStatisticsAggregatorFromName(String statisticsName) {\n","        LOGGER.warn(MessageFormatUtil.format(CommonsLogMessageConstant.INVALID_STATISTICS_NAME, statisticsName));\n","        return null;\n","    }\n","\n","    /**\n","     * Gets all statistics names related to this event.\n","     *\n","     * @return {@link List} of statistics names\n","     */\n","    public abstract List<String> getStatisticsNames();\n","}\n"],"test_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.actions;\n","\n","import com.itextpdf.commons.actions.data.ProductData;\n","import com.itextpdf.commons.logs.CommonsLogMessageConstant;\n","import com.itextpdf.test.ExtendedITextTest;\n","import com.itextpdf.test.annotations.LogMessage;\n","import com.itextpdf.test.annotations.LogMessages;\n","import com.itextpdf.test.annotations.type.UnitTest;\n","import org.junit.Assert;\n","import org.junit.Test;\n","import org.junit.experimental.categories.Category;\n","\n","import java.util.Collections;\n","import java.util.List;\n","\n","@Category(UnitTest.class)\n","public class AbstractStatisticsEventTest extends ExtendedITextTest {\n","    @Test\n","    public void constructorTest() {\n","        DummyStatisticsEvent dummyEvent =\n","                new DummyStatisticsEvent(new ProductData(\"public name\", \"product name\", \"version\", 15, 3000));\n","\n","        ProductData data = dummyEvent.getProductData();\n","        Assert.assertEquals(\"public name\", data.getPublicProductName());\n","        Assert.assertEquals(\"product name\", data.getProductName());\n","        Assert.assertEquals(\"version\", data.getVersion());\n","        Assert.assertEquals(15, data.getSinceCopyrightYear());\n","        Assert.assertEquals(3000, data.getToCopyrightYear());\n","    }\n","\n","    @Test\n","    @LogMessages(messages = @LogMessage(messageTemplate = CommonsLogMessageConstant.INVALID_STATISTICS_NAME))\n","    public void createStatisticsAggregatorFromNameTest() {\n","        DummyStatisticsEvent dummyEvent =\n","                new DummyStatisticsEvent(new ProductData(\"public name\", \"product name\", \"version\", 15, 3000));\n","\n","        Assert.assertNull(dummyEvent.createStatisticsAggregatorFromName(\"statisticsName\"));\n","    }\n","\n","    static class DummyStatisticsEvent extends AbstractStatisticsEvent {\n","\n","        DummyStatisticsEvent(ProductData data) {\n","            super(data);\n","        }\n","\n","        @Override\n","        public List<String> getStatisticsNames() {\n","            return null;\n","        }\n","    }\n","}\n"],"method_lines_dic":{"AbstractStatisticsEvent::::createStatisticsAggregatorFromName(java.lang.String)":[57,60],"AbstractStatisticsEvent::::getStatisticsNames()":[67,67]},"test_method_lines_dic":{"AbstractStatisticsEventTest::::constructorTest()":[40,51],"AbstractStatisticsEventTest::::createStatisticsAggregatorFromNameTest()":[53,60],"AbstractStatisticsEventTest.DummyStatisticsEvent::::getStatisticsNames()":[68,71]},"reverse_method_lines_dic":{"57":"AbstractStatisticsEvent::::createStatisticsAggregatorFromName(java.lang.String)","58":"AbstractStatisticsEvent::::createStatisticsAggregatorFromName(java.lang.String)","59":"AbstractStatisticsEvent::::createStatisticsAggregatorFromName(java.lang.String)","60":"AbstractStatisticsEvent::::createStatisticsAggregatorFromName(java.lang.String)","67":"AbstractStatisticsEvent::::getStatisticsNames()"},"test_reverse_method_lines_dic":{"40":"AbstractStatisticsEventTest::::constructorTest()","41":"AbstractStatisticsEventTest::::constructorTest()","42":"AbstractStatisticsEventTest::::constructorTest()","43":"AbstractStatisticsEventTest::::constructorTest()","44":"AbstractStatisticsEventTest::::constructorTest()","45":"AbstractStatisticsEventTest::::constructorTest()","46":"AbstractStatisticsEventTest::::constructorTest()","47":"AbstractStatisticsEventTest::::constructorTest()","48":"AbstractStatisticsEventTest::::constructorTest()","49":"AbstractStatisticsEventTest::::constructorTest()","50":"AbstractStatisticsEventTest::::constructorTest()","51":"AbstractStatisticsEventTest::::constructorTest()","53":"AbstractStatisticsEventTest::::createStatisticsAggregatorFromNameTest()","54":"AbstractStatisticsEventTest::::createStatisticsAggregatorFromNameTest()","55":"AbstractStatisticsEventTest::::createStatisticsAggregatorFromNameTest()","56":"AbstractStatisticsEventTest::::createStatisticsAggregatorFromNameTest()","57":"AbstractStatisticsEventTest::::createStatisticsAggregatorFromNameTest()","58":"AbstractStatisticsEventTest::::createStatisticsAggregatorFromNameTest()","59":"AbstractStatisticsEventTest::::createStatisticsAggregatorFromNameTest()","60":"AbstractStatisticsEventTest::::createStatisticsAggregatorFromNameTest()","68":"AbstractStatisticsEventTest.DummyStatisticsEvent::::getStatisticsNames()","69":"AbstractStatisticsEventTest.DummyStatisticsEvent::::getStatisticsNames()","70":"AbstractStatisticsEventTest.DummyStatisticsEvent::::getStatisticsNames()","71":"AbstractStatisticsEventTest.DummyStatisticsEvent::::getStatisticsNames()"},"tests":[{"test_lines":[40,51],"covered_lines":[38,46,47],"label":"<<UNRECOGNISED_METHOD>>"},{"test_lines":[53,60],"covered_lines":[38,46,47,58,59],"label":"AbstractStatisticsEvent::::createStatisticsAggregatorFromName(java.lang.String)"}]},"/bernard/dataset_construction/prep/repos/itext-java/commons/src/main/java/com/itextpdf/commons/actions/AbstractProductITextEvent.java":{"class_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.actions;\n","\n","import com.itextpdf.commons.actions.data.ProductData;\n","\n","/**\n"," * Abstract class which defines general product events by encapsulating\n"," * {@link ProductData} of the product which generated event. Only for internal usage.\n"," */\n","public abstract class AbstractProductITextEvent extends AbstractITextEvent {\n","    private final ProductData productData;\n","\n","    /**\n","     * Creates instance of abstract product iText event based\n","     * on passed product data. Only for internal usage.\n","     *\n","     * @param productData is a description of the product which has generated an event\n","     */\n","    protected AbstractProductITextEvent(ProductData productData) {\n","        super();\n","        if (productData == null) {\n","            // IllegalStateException is thrown because AbstractProductITextEvent for internal usage\n","            throw new IllegalStateException(\"ProductData shouldn't be null.\");\n","        }\n","        this.productData = productData;\n","    }\n","\n","    /**\n","     * Gets a product data which generated the event.\n","     *\n","     * @return information about the product\n","     */\n","    public ProductData getProductData() {\n","        return productData;\n","    }\n","\n","    /**\n","     * Gets a name of product which generated the event.\n","     *\n","     * @return product name\n","     */\n","    public String getProductName() {\n","        return getProductData().getProductName();\n","    }\n","}\n"],"test_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.actions;\n","\n","import com.itextpdf.test.ExtendedITextTest;\n","import com.itextpdf.test.annotations.type.UnitTest;\n","import org.junit.Assert;\n","import org.junit.Test;\n","import org.junit.experimental.categories.Category;\n","\n","@Category(UnitTest.class)\n","public class AbstractProductITextEventTest extends ExtendedITextTest {\n","    @Test\n","    public void nullProductDataTest() {\n","        Exception exception =\n","                Assert.assertThrows(IllegalStateException.class, () -> new AbstractProductITextEvent(null) {});\n","        Assert.assertEquals(\"ProductData shouldn't be null.\", exception.getMessage());\n","    }\n","}\n"],"method_lines_dic":{"AbstractProductITextEvent::::getProductData()":[54,56],"AbstractProductITextEvent::::getProductName()":[63,65]},"test_method_lines_dic":{"AbstractProductITextEventTest::::nullProductDataTest()":[33,38]},"reverse_method_lines_dic":{"54":"AbstractProductITextEvent::::getProductData()","55":"AbstractProductITextEvent::::getProductData()","56":"AbstractProductITextEvent::::getProductData()","63":"AbstractProductITextEvent::::getProductName()","64":"AbstractProductITextEvent::::getProductName()","65":"AbstractProductITextEvent::::getProductName()"},"test_reverse_method_lines_dic":{"33":"AbstractProductITextEventTest::::nullProductDataTest()","34":"AbstractProductITextEventTest::::nullProductDataTest()","35":"AbstractProductITextEventTest::::nullProductDataTest()","36":"AbstractProductITextEventTest::::nullProductDataTest()","37":"AbstractProductITextEventTest::::nullProductDataTest()","38":"AbstractProductITextEventTest::::nullProductDataTest()"},"tests":[{"test_lines":[33,38],"covered_lines":[41,42,44],"label":"<<UNRECOGNISED_METHOD>>"}]},"/bernard/dataset_construction/prep/repos/itext-java/commons/src/main/java/com/itextpdf/commons/actions/EventManager.java":{"class_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.actions;\n","\n","import com.itextpdf.commons.actions.processors.UnderAgplProductProcessorFactory;\n","import com.itextpdf.commons.exceptions.AggregatedException;\n","\n","import java.util.ArrayList;\n","import java.util.LinkedHashSet;\n","import java.util.List;\n","import java.util.Set;\n","\n","/**\n"," * Entry point for event handling mechanism. Class is a singleton,\n"," * see {@link EventManager#getInstance()}.\n"," */\n","public final class EventManager {\n","    private static final EventManager INSTANCE = new EventManager();\n","\n","    private final Set<IEventHandler> handlers = new LinkedHashSet<>();\n","\n","    private EventManager() {\n","        handlers.add(ProductEventHandler.INSTANCE);\n","    }\n","\n","    /**\n","     * Allows an access to the instance of EventManager.\n","     *\n","     * @return the instance of the class\n","     */\n","    public static EventManager getInstance() {\n","        return INSTANCE;\n","    }\n","\n","    /**\n","     * Deliberately turns off the warning message about AGPL usage.\n","     *\n","     * <p>\n","     * <b> Important note. Calling of this method means that the terms of AGPL license are met. </b>\n","     */\n","    public static void acknowledgeAgplUsageDisableWarningMessage() {\n","        ProductProcessorFactoryKeeper.setProductProcessorFactory(new UnderAgplProductProcessorFactory());\n","    }\n","\n","    /**\n","     * Handles the event.\n","     *\n","     * @param event to handle\n","     */\n","    public void onEvent(IEvent event) {\n","        final List<RuntimeException> caughtExceptions = new ArrayList<>();\n","        for (final IEventHandler handler : handlers) {\n","            try {\n","                handler.onEvent(event);\n","            } catch (RuntimeException ex) {\n","                caughtExceptions.add(ex);\n","            }\n","        }\n","        if (event instanceof AbstractITextConfigurationEvent) {\n","            try {\n","                final AbstractITextConfigurationEvent itce = (AbstractITextConfigurationEvent) event;\n","                itce.doAction();\n","            } catch (RuntimeException ex) {\n","                caughtExceptions.add(ex);\n","            }\n","        }\n","\n","        if (caughtExceptions.size() == 1) {\n","            throw caughtExceptions.get(0);\n","        }\n","        if (!caughtExceptions.isEmpty()) {\n","            throw new AggregatedException(AggregatedException.ERROR_DURING_EVENT_PROCESSING, caughtExceptions);\n","        }\n","    }\n","\n","    /**\n","     * Add new {@link IEventHandler} to the event handling process.\n","     *\n","     * @param handler is a handler to add\n","     */\n","    public void register(IEventHandler handler) {\n","        if (handler != null) {\n","            handlers.add(handler);\n","        }\n","    }\n","\n","    /**\n","     * Check if the handler was registered for event handling process.\n","     *\n","     * @param handler is a handler to check\n","     * @return true if handler has been already registered and false otherwise\n","     */\n","    public boolean isRegistered(IEventHandler handler) {\n","        if (handler != null) {\n","            return handlers.contains(handler);\n","        }\n","        return false;\n","    }\n","\n","    /**\n","     * Removes handler from event handling process.\n","     *\n","     * @param handler is a handle to remove\n","     * @return true if the handler had been registered previously and was removed. False if the\n","     * handler was not found among registered handlers\n","     */\n","    public boolean unregister(IEventHandler handler) {\n","        if (handler != null) {\n","            return handlers.remove(handler);\n","        }\n","        return false;\n","    }\n","}\n"],"test_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.actions;\n","\n","import com.itextpdf.commons.actions.processors.DefaultProductProcessorFactory;\n","import com.itextpdf.commons.actions.processors.IProductProcessorFactory;\n","import com.itextpdf.commons.actions.processors.UnderAgplProductProcessorFactory;\n","import com.itextpdf.commons.actions.sequence.SequenceId;\n","import com.itextpdf.commons.ecosystem.ITextTestEvent;\n","import com.itextpdf.commons.ecosystem.TestConfigurationEvent;\n","import com.itextpdf.commons.exceptions.AggregatedException;\n","import com.itextpdf.test.AssertUtil;\n","import com.itextpdf.test.ExtendedITextTest;\n","import com.itextpdf.test.annotations.LogMessage;\n","import com.itextpdf.test.annotations.LogMessages;\n","import com.itextpdf.test.annotations.type.UnitTest;\n","\n","import java.util.List;\n","import org.junit.After;\n","import org.junit.Assert;\n","import org.junit.Test;\n","import org.junit.experimental.categories.Category;\n","\n","@Category(UnitTest.class)\n","public class EventManagerTest extends ExtendedITextTest {\n","\n","    @After\n","    public void afterEach() {\n","        ProductProcessorFactoryKeeper.restoreDefaultProductProcessorFactory();\n","    }\n","\n","    @Test\n","    @LogMessages(messages = {\n","            @LogMessage(messageTemplate = TestConfigurationEvent.MESSAGE)\n","    })\n","    public void configurationEventTest() {\n","        AssertUtil.doesNotThrow(() -> EventManager.getInstance().onEvent(new TestConfigurationEvent()));\n","    }\n","\n","    @Test\n","    public void throwSomeExceptionsTest() {\n","        EventManager eventManager = EventManager.getInstance();\n","        IEventHandler handler1 = new ThrowArithmeticExpHandler();\n","        IEventHandler handler2 = new ThrowIllegalArgumentExpHandler();\n","\n","        eventManager.register(handler1);\n","        eventManager.register(handler2);\n","\n","        SequenceId sequenceId = new SequenceId();\n","        try {\n","            eventManager.onEvent(new ITextTestEvent(sequenceId, null, \"test-event\", ProductNameConstant.ITEXT_CORE));\n","        } catch (AggregatedException e) {\n","            Assert.assertEquals(\"Error during event processing:\\n\"\n","                    + \"0) ThrowArithmeticExpHandler\\n\"\n","                    + \"1) ThrowIllegalArgumentExpHandler\\n\", e.getMessage());\n","\n","            List<Exception> aggregatedExceptions = e.getAggregatedExceptions();\n","\n","            Assert.assertEquals(2, aggregatedExceptions.size());\n","            Assert.assertEquals(\"ThrowArithmeticExpHandler\", aggregatedExceptions.get(0).getMessage());\n","            Assert.assertEquals(\"ThrowIllegalArgumentExpHandler\", aggregatedExceptions.get(1).getMessage());\n","        }\n","\n","        eventManager.unregister(handler1);\n","        eventManager.unregister(handler2);\n","    }\n","\n","    @Test\n","    public void throwOneUncheckedExceptionsTest() {\n","        EventManager eventManager = EventManager.getInstance();\n","        IEventHandler handler1 = new ThrowArithmeticExpHandler();\n","        eventManager.register(handler1);\n","        try {\n","            SequenceId sequenceId = new SequenceId();\n","            Exception exception = Assert.assertThrows(ArithmeticException.class,\n","                    () -> eventManager.onEvent(\n","                            new ITextTestEvent(sequenceId, null, \"test-event\", ProductNameConstant.ITEXT_CORE)));\n","            Assert.assertEquals(\"ThrowArithmeticExpHandler\", exception.getMessage());\n","        } finally {\n","            eventManager.unregister(handler1);\n","        }\n","    }\n","\n","    @Test\n","    public void configureHandlersTest() {\n","        EventManager eventManager = EventManager.getInstance();\n","        IEventHandler handler = new ThrowArithmeticExpHandler();\n","\n","        Assert.assertFalse(eventManager.isRegistered(handler));\n","\n","        eventManager.register(handler);\n","        Assert.assertTrue(eventManager.isRegistered(handler));\n","\n","        Assert.assertTrue(eventManager.unregister(handler));\n","        Assert.assertFalse(eventManager.isRegistered(handler));\n","\n","        Assert.assertFalse(eventManager.unregister(handler));\n","    }\n","\n","    @Test\n","    public void turningOffAgplTest() {\n","        IProductProcessorFactory defaultProductProcessorFactory = ProductProcessorFactoryKeeper.getProductProcessorFactory();\n","        Assert.assertTrue(defaultProductProcessorFactory instanceof DefaultProductProcessorFactory);\n","        EventManager.acknowledgeAgplUsageDisableWarningMessage();\n","        IProductProcessorFactory underAgplProductProcessorFactory1 = ProductProcessorFactoryKeeper.getProductProcessorFactory();\n","        Assert.assertTrue(underAgplProductProcessorFactory1 instanceof UnderAgplProductProcessorFactory);\n","    }\n","\n","    private static class ThrowArithmeticExpHandler implements IEventHandler {\n","        @Override\n","        public void onEvent(IEvent event) {\n","            throw new ArithmeticException(\"ThrowArithmeticExpHandler\");\n","        }\n","    }\n","\n","    private static class ThrowIllegalArgumentExpHandler implements IEventHandler {\n","        @Override\n","        public void onEvent(IEvent event) {\n","            throw new IllegalArgumentException(\"ThrowIllegalArgumentExpHandler\");\n","        }\n","    }\n","}\n"],"method_lines_dic":{"EventManager::::getInstance()":[51,53],"EventManager::::acknowledgeAgplUsageDisableWarningMessage()":[61,63],"EventManager::::onEvent(com.itextpdf.commons.actions.IEvent)":[70,94],"EventManager::::register(com.itextpdf.commons.actions.IEventHandler)":[101,105],"EventManager::::isRegistered(com.itextpdf.commons.actions.IEventHandler)":[113,118],"EventManager::::unregister(com.itextpdf.commons.actions.IEventHandler)":[127,132]},"test_method_lines_dic":{"EventManagerTest::::afterEach()":[47,50],"EventManagerTest::::configurationEventTest()":[52,58],"EventManagerTest::::throwSomeExceptionsTest()":[60,86],"EventManagerTest::::throwOneUncheckedExceptionsTest()":[88,102],"EventManagerTest::::configureHandlersTest()":[104,118],"EventManagerTest::::turningOffAgplTest()":[120,127]},"reverse_method_lines_dic":{"51":"EventManager::::getInstance()","52":"EventManager::::getInstance()","53":"EventManager::::getInstance()","61":"EventManager::::acknowledgeAgplUsageDisableWarningMessage()","62":"EventManager::::acknowledgeAgplUsageDisableWarningMessage()","63":"EventManager::::acknowledgeAgplUsageDisableWarningMessage()","70":"EventManager::::onEvent(com.itextpdf.commons.actions.IEvent)","71":"EventManager::::onEvent(com.itextpdf.commons.actions.IEvent)","72":"EventManager::::onEvent(com.itextpdf.commons.actions.IEvent)","73":"EventManager::::onEvent(com.itextpdf.commons.actions.IEvent)","74":"EventManager::::onEvent(com.itextpdf.commons.actions.IEvent)","75":"EventManager::::onEvent(com.itextpdf.commons.actions.IEvent)","76":"EventManager::::onEvent(com.itextpdf.commons.actions.IEvent)","77":"EventManager::::onEvent(com.itextpdf.commons.actions.IEvent)","78":"EventManager::::onEvent(com.itextpdf.commons.actions.IEvent)","79":"EventManager::::onEvent(com.itextpdf.commons.actions.IEvent)","80":"EventManager::::onEvent(com.itextpdf.commons.actions.IEvent)","81":"EventManager::::onEvent(com.itextpdf.commons.actions.IEvent)","82":"EventManager::::onEvent(com.itextpdf.commons.actions.IEvent)","83":"EventManager::::onEvent(com.itextpdf.commons.actions.IEvent)","84":"EventManager::::onEvent(com.itextpdf.commons.actions.IEvent)","85":"EventManager::::onEvent(com.itextpdf.commons.actions.IEvent)","86":"EventManager::::onEvent(com.itextpdf.commons.actions.IEvent)","87":"EventManager::::onEvent(com.itextpdf.commons.actions.IEvent)","88":"EventManager::::onEvent(com.itextpdf.commons.actions.IEvent)","89":"EventManager::::onEvent(com.itextpdf.commons.actions.IEvent)","90":"EventManager::::onEvent(com.itextpdf.commons.actions.IEvent)","91":"EventManager::::onEvent(com.itextpdf.commons.actions.IEvent)","92":"EventManager::::onEvent(com.itextpdf.commons.actions.IEvent)","93":"EventManager::::onEvent(com.itextpdf.commons.actions.IEvent)","94":"EventManager::::onEvent(com.itextpdf.commons.actions.IEvent)","101":"EventManager::::register(com.itextpdf.commons.actions.IEventHandler)","102":"EventManager::::register(com.itextpdf.commons.actions.IEventHandler)","103":"EventManager::::register(com.itextpdf.commons.actions.IEventHandler)","104":"EventManager::::register(com.itextpdf.commons.actions.IEventHandler)","105":"EventManager::::register(com.itextpdf.commons.actions.IEventHandler)","113":"EventManager::::isRegistered(com.itextpdf.commons.actions.IEventHandler)","114":"EventManager::::isRegistered(com.itextpdf.commons.actions.IEventHandler)","115":"EventManager::::isRegistered(com.itextpdf.commons.actions.IEventHandler)","116":"EventManager::::isRegistered(com.itextpdf.commons.actions.IEventHandler)","117":"EventManager::::isRegistered(com.itextpdf.commons.actions.IEventHandler)","118":"EventManager::::isRegistered(com.itextpdf.commons.actions.IEventHandler)","127":"EventManager::::unregister(com.itextpdf.commons.actions.IEventHandler)","128":"EventManager::::unregister(com.itextpdf.commons.actions.IEventHandler)","129":"EventManager::::unregister(com.itextpdf.commons.actions.IEventHandler)","130":"EventManager::::unregister(com.itextpdf.commons.actions.IEventHandler)","131":"EventManager::::unregister(com.itextpdf.commons.actions.IEventHandler)","132":"EventManager::::unregister(com.itextpdf.commons.actions.IEventHandler)"},"test_reverse_method_lines_dic":{"47":"EventManagerTest::::afterEach()","48":"EventManagerTest::::afterEach()","49":"EventManagerTest::::afterEach()","50":"EventManagerTest::::afterEach()","52":"EventManagerTest::::configurationEventTest()","53":"EventManagerTest::::configurationEventTest()","54":"EventManagerTest::::configurationEventTest()","55":"EventManagerTest::::configurationEventTest()","56":"EventManagerTest::::configurationEventTest()","57":"EventManagerTest::::configurationEventTest()","58":"EventManagerTest::::configurationEventTest()","60":"EventManagerTest::::throwSomeExceptionsTest()","61":"EventManagerTest::::throwSomeExceptionsTest()","62":"EventManagerTest::::throwSomeExceptionsTest()","63":"EventManagerTest::::throwSomeExceptionsTest()","64":"EventManagerTest::::throwSomeExceptionsTest()","65":"EventManagerTest::::throwSomeExceptionsTest()","66":"EventManagerTest::::throwSomeExceptionsTest()","67":"EventManagerTest::::throwSomeExceptionsTest()","68":"EventManagerTest::::throwSomeExceptionsTest()","69":"EventManagerTest::::throwSomeExceptionsTest()","70":"EventManagerTest::::throwSomeExceptionsTest()","71":"EventManagerTest::::throwSomeExceptionsTest()","72":"EventManagerTest::::throwSomeExceptionsTest()","73":"EventManagerTest::::throwSomeExceptionsTest()","74":"EventManagerTest::::throwSomeExceptionsTest()","75":"EventManagerTest::::throwSomeExceptionsTest()","76":"EventManagerTest::::throwSomeExceptionsTest()","77":"EventManagerTest::::throwSomeExceptionsTest()","78":"EventManagerTest::::throwSomeExceptionsTest()","79":"EventManagerTest::::throwSomeExceptionsTest()","80":"EventManagerTest::::throwSomeExceptionsTest()","81":"EventManagerTest::::throwSomeExceptionsTest()","82":"EventManagerTest::::throwSomeExceptionsTest()","83":"EventManagerTest::::throwSomeExceptionsTest()","84":"EventManagerTest::::throwSomeExceptionsTest()","85":"EventManagerTest::::throwSomeExceptionsTest()","86":"EventManagerTest::::throwSomeExceptionsTest()","88":"EventManagerTest::::throwOneUncheckedExceptionsTest()","89":"EventManagerTest::::throwOneUncheckedExceptionsTest()","90":"EventManagerTest::::throwOneUncheckedExceptionsTest()","91":"EventManagerTest::::throwOneUncheckedExceptionsTest()","92":"EventManagerTest::::throwOneUncheckedExceptionsTest()","93":"EventManagerTest::::throwOneUncheckedExceptionsTest()","94":"EventManagerTest::::throwOneUncheckedExceptionsTest()","95":"EventManagerTest::::throwOneUncheckedExceptionsTest()","96":"EventManagerTest::::throwOneUncheckedExceptionsTest()","97":"EventManagerTest::::throwOneUncheckedExceptionsTest()","98":"EventManagerTest::::throwOneUncheckedExceptionsTest()","99":"EventManagerTest::::throwOneUncheckedExceptionsTest()","100":"EventManagerTest::::throwOneUncheckedExceptionsTest()","101":"EventManagerTest::::throwOneUncheckedExceptionsTest()","102":"EventManagerTest::::throwOneUncheckedExceptionsTest()","104":"EventManagerTest::::configureHandlersTest()","105":"EventManagerTest::::configureHandlersTest()","106":"EventManagerTest::::configureHandlersTest()","107":"EventManagerTest::::configureHandlersTest()","108":"EventManagerTest::::configureHandlersTest()","109":"EventManagerTest::::configureHandlersTest()","110":"EventManagerTest::::configureHandlersTest()","111":"EventManagerTest::::configureHandlersTest()","112":"EventManagerTest::::configureHandlersTest()","113":"EventManagerTest::::configureHandlersTest()","114":"EventManagerTest::::configureHandlersTest()","115":"EventManagerTest::::configureHandlersTest()","116":"EventManagerTest::::configureHandlersTest()","117":"EventManagerTest::::configureHandlersTest()","118":"EventManagerTest::::configureHandlersTest()","120":"EventManagerTest::::turningOffAgplTest()","121":"EventManagerTest::::turningOffAgplTest()","122":"EventManagerTest::::turningOffAgplTest()","123":"EventManagerTest::::turningOffAgplTest()","124":"EventManagerTest::::turningOffAgplTest()","125":"EventManagerTest::::turningOffAgplTest()","126":"EventManagerTest::::turningOffAgplTest()","127":"EventManagerTest::::turningOffAgplTest()"},"tests":[{"test_lines":[52,58],"covered_lines":[38,40,42,43,44,52,71,72,74,77,78,79,81,82,85,88,91,94],"label":"EventManager::::onEvent(com.itextpdf.commons.actions.IEvent)"},{"test_lines":[60,86],"covered_lines":[38,40,42,43,44,52,71,72,74,75,76,77,78,79,88,91,92,102,103,105,128,129],"label":"EventManager::::onEvent(com.itextpdf.commons.actions.IEvent)"},{"test_lines":[88,102],"covered_lines":[38,40,42,43,44,52,71,72,74,75,76,77,78,79,88,89,102,103,105,128,129],"label":"EventManager::::onEvent(com.itextpdf.commons.actions.IEvent)"},{"test_lines":[104,118],"covered_lines":[38,40,42,43,44,52,102,103,105,114,115,128,129],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[120,127],"covered_lines":[38,40,42,43,44,62,63],"label":"<<NO FOCAL METHOD>>"}]},"/bernard/dataset_construction/prep/repos/itext-java/commons/src/main/java/com/itextpdf/commons/actions/AbstractContextBasedITextEvent.java":{"class_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.actions;\n","\n","import com.itextpdf.commons.actions.contexts.IMetaInfo;\n","import com.itextpdf.commons.actions.data.ProductData;\n","import com.itextpdf.commons.exceptions.CommonsExceptionMessageConstant;\n","\n","/**\n"," * Represents a context-based event. See also {@link AbstractContextBasedEventHandler}.\n"," * Only for internal usage.\n"," */\n","public abstract class AbstractContextBasedITextEvent extends AbstractProductITextEvent {\n","    private IMetaInfo metaInfo;\n","\n","    /**\n","     * Creates an event containing auxiliary meta data.\n","     *\n","     * @param productData is a description of the product which has generated an event\n","     * @param metaInfo is an auxiliary meta info\n","     */\n","    protected AbstractContextBasedITextEvent(ProductData productData, IMetaInfo metaInfo) {\n","        super(productData);\n","        this.metaInfo = metaInfo;\n","    }\n","\n","    /**\n","     * Obtains the current event context class.\n","     *\n","     * @return context class\n","     */\n","    public Class<?> getClassFromContext() {\n","        return this.getClass();\n","    }\n","\n","    /**\n","     * Sets meta info.\n","     *\n","     * @param metaInfo meta info\n","     *\n","     * @return true if meta info has been set, false otherwise\n","     */\n","    public boolean setMetaInfo(IMetaInfo metaInfo) {\n","        if (this.metaInfo != null) {\n","            return false;\n","        }\n","        this.metaInfo = metaInfo;\n","        return true;\n","    }\n","\n","    /**\n","     * Obtains stored meta info associated with the event.\n","     *\n","     * @return meta info\n","     */\n","    IMetaInfo getMetaInfo() {\n","        return metaInfo;\n","    }\n","}\n"],"test_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.actions;\n","\n","import com.itextpdf.commons.actions.contexts.IMetaInfo;\n","import com.itextpdf.commons.actions.data.CommonsProductData;\n","import com.itextpdf.commons.actions.data.ProductData;\n","import com.itextpdf.commons.ecosystem.TestMetaInfo;\n","import com.itextpdf.commons.exceptions.CommonsExceptionMessageConstant;\n","import com.itextpdf.test.ExtendedITextTest;\n","import com.itextpdf.test.annotations.type.UnitTest;\n","\n","import org.junit.Assert;\n","import org.junit.Test;\n","import org.junit.experimental.categories.Category;\n","\n","@Category(UnitTest.class)\n","public class AbstractContextBasedITextEventTest extends ExtendedITextTest {\n","\n","    @Test\n","    public void setMetaInfoTest() {\n","        BasicAbstractContextBasedITextEvent e =\n","                new BasicAbstractContextBasedITextEvent(CommonsProductData.getInstance(), null);\n","\n","        TestMetaInfo metaInfoAfter = new TestMetaInfo(\"meta-info-after\");\n","        e.setMetaInfo(metaInfoAfter);\n","        Assert.assertSame(metaInfoAfter, e.getMetaInfo());\n","    }\n","\n","    @Test\n","    public void resetMetaInfoForbiddenTest() {\n","        TestMetaInfo metaInfoBefore = new TestMetaInfo(\"meta-info-before\");\n","        TestMetaInfo metaInfoAfter = new TestMetaInfo(\"meta-info-after\");\n","        BasicAbstractContextBasedITextEvent e =\n","                new BasicAbstractContextBasedITextEvent(CommonsProductData.getInstance(), metaInfoBefore);\n","\n","        Assert.assertSame(metaInfoBefore, e.getMetaInfo());\n","\n","        Assert.assertFalse(e.setMetaInfo(metaInfoAfter));\n","    }\n","\n","    private static class BasicAbstractContextBasedITextEvent extends AbstractContextBasedITextEvent {\n","        protected BasicAbstractContextBasedITextEvent(ProductData productData,\n","                IMetaInfo metaInfo) {\n","            super(productData, metaInfo);\n","        }\n","    }\n","}\n"],"method_lines_dic":{"AbstractContextBasedITextEvent::::getClassFromContext()":[52,54],"AbstractContextBasedITextEvent::::setMetaInfo(com.itextpdf.commons.actions.contexts.IMetaInfo)":[63,69],"AbstractContextBasedITextEvent::::getMetaInfo()":[76,78]},"test_method_lines_dic":{"AbstractContextBasedITextEventTest::::setMetaInfoTest()":[40,48],"AbstractContextBasedITextEventTest::::resetMetaInfoForbiddenTest()":[50,60]},"reverse_method_lines_dic":{"52":"AbstractContextBasedITextEvent::::getClassFromContext()","53":"AbstractContextBasedITextEvent::::getClassFromContext()","54":"AbstractContextBasedITextEvent::::getClassFromContext()","63":"AbstractContextBasedITextEvent::::setMetaInfo(com.itextpdf.commons.actions.contexts.IMetaInfo)","64":"AbstractContextBasedITextEvent::::setMetaInfo(com.itextpdf.commons.actions.contexts.IMetaInfo)","65":"AbstractContextBasedITextEvent::::setMetaInfo(com.itextpdf.commons.actions.contexts.IMetaInfo)","66":"AbstractContextBasedITextEvent::::setMetaInfo(com.itextpdf.commons.actions.contexts.IMetaInfo)","67":"AbstractContextBasedITextEvent::::setMetaInfo(com.itextpdf.commons.actions.contexts.IMetaInfo)","68":"AbstractContextBasedITextEvent::::setMetaInfo(com.itextpdf.commons.actions.contexts.IMetaInfo)","69":"AbstractContextBasedITextEvent::::setMetaInfo(com.itextpdf.commons.actions.contexts.IMetaInfo)","76":"AbstractContextBasedITextEvent::::getMetaInfo()","77":"AbstractContextBasedITextEvent::::getMetaInfo()","78":"AbstractContextBasedITextEvent::::getMetaInfo()"},"test_reverse_method_lines_dic":{"40":"AbstractContextBasedITextEventTest::::setMetaInfoTest()","41":"AbstractContextBasedITextEventTest::::setMetaInfoTest()","42":"AbstractContextBasedITextEventTest::::setMetaInfoTest()","43":"AbstractContextBasedITextEventTest::::setMetaInfoTest()","44":"AbstractContextBasedITextEventTest::::setMetaInfoTest()","45":"AbstractContextBasedITextEventTest::::setMetaInfoTest()","46":"AbstractContextBasedITextEventTest::::setMetaInfoTest()","47":"AbstractContextBasedITextEventTest::::setMetaInfoTest()","48":"AbstractContextBasedITextEventTest::::setMetaInfoTest()","50":"AbstractContextBasedITextEventTest::::resetMetaInfoForbiddenTest()","51":"AbstractContextBasedITextEventTest::::resetMetaInfoForbiddenTest()","52":"AbstractContextBasedITextEventTest::::resetMetaInfoForbiddenTest()","53":"AbstractContextBasedITextEventTest::::resetMetaInfoForbiddenTest()","54":"AbstractContextBasedITextEventTest::::resetMetaInfoForbiddenTest()","55":"AbstractContextBasedITextEventTest::::resetMetaInfoForbiddenTest()","56":"AbstractContextBasedITextEventTest::::resetMetaInfoForbiddenTest()","57":"AbstractContextBasedITextEventTest::::resetMetaInfoForbiddenTest()","58":"AbstractContextBasedITextEventTest::::resetMetaInfoForbiddenTest()","59":"AbstractContextBasedITextEventTest::::resetMetaInfoForbiddenTest()","60":"AbstractContextBasedITextEventTest::::resetMetaInfoForbiddenTest()"},"tests":[{"test_lines":[40,48],"covered_lines":[43,44,45,64,67,68,77],"label":"AbstractContextBasedITextEvent::::setMetaInfo(com.itextpdf.commons.actions.contexts.IMetaInfo)"},{"test_lines":[50,60],"covered_lines":[43,44,45,64,65,77],"label":"AbstractContextBasedITextEvent::::setMetaInfo(com.itextpdf.commons.actions.contexts.IMetaInfo)"}]},"/bernard/dataset_construction/prep/repos/itext-java/commons/src/main/java/com/itextpdf/commons/actions/ProductEventHandler.java":{"class_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.actions;\n","\n","import com.itextpdf.commons.actions.confirmations.ConfirmEvent;\n","import com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper;\n","import com.itextpdf.commons.actions.contexts.UnknownContext;\n","import com.itextpdf.commons.actions.processors.ITextProductEventProcessor;\n","import com.itextpdf.commons.actions.sequence.SequenceId;\n","import com.itextpdf.commons.exceptions.ProductEventHandlerRepeatException;\n","import com.itextpdf.commons.exceptions.UnknownProductException;\n","import com.itextpdf.commons.logs.CommonsLogMessageConstant;\n","import com.itextpdf.commons.utils.MessageFormatUtil;\n","\n","import java.util.ArrayList;\n","import java.util.Collections;\n","import java.util.HashMap;\n","import java.util.List;\n","import java.util.Map;\n","import java.util.WeakHashMap;\n","import java.util.concurrent.ConcurrentHashMap;\n","import org.slf4j.Logger;\n","import org.slf4j.LoggerFactory;\n","\n","/**\n"," * Handles events based oh their origin.\n"," */\n","final class ProductEventHandler extends AbstractContextBasedEventHandler {\n","    static final ProductEventHandler INSTANCE = new ProductEventHandler();\n","\n","    private static final Logger LOGGER = LoggerFactory.getLogger(ProductEventHandler.class);\n","    // The constant has the following value for two reasons. First, to avoid the infinite loop.\n","    // Second, to retry event processing several times for technical reasons.\n","    private static final int MAX_EVENT_RETRY_COUNT = 4;\n","\n","    private final ConcurrentHashMap<String, ITextProductEventProcessor> processors = new ConcurrentHashMap<>();\n","    private final WeakHashMap<SequenceId, List<AbstractProductProcessITextEvent>> events = new WeakHashMap<>();\n","\n","    private ProductEventHandler() {\n","        super(UnknownContext.PERMISSIVE);\n","    }\n","\n","    /**\n","     * Pass the event to the appropriate {@link ITextProductEventProcessor}.\n","     *\n","     * @param event to handle\n","     */\n","    @Override\n","    protected void onAcceptedEvent(AbstractContextBasedITextEvent event) {\n","        for (int i = 0; i < MAX_EVENT_RETRY_COUNT; i++) {\n","            try {\n","                tryProcessEvent(event);\n","                // process succeeded\n","                return;\n","            } catch (ProductEventHandlerRepeatException repeatException) {\n","                // ignore this exception to retry the processing\n","            }\n","        }\n","        // the final processing retry\n","        tryProcessEvent(event);\n","    }\n","\n","    ITextProductEventProcessor addProcessor(ITextProductEventProcessor processor) {\n","        return processors.put(processor.getProductName(), processor);\n","    }\n","\n","    ITextProductEventProcessor removeProcessor(String productName) {\n","        return processors.remove(productName);\n","    }\n","\n","    ITextProductEventProcessor getActiveProcessor(String productName) {\n","        ITextProductEventProcessor processor = processors.get(productName);\n","\n","        if (processor != null) {\n","            return processor;\n","        }\n","\n","        if (ProductNameConstant.PRODUCT_NAMES.contains(productName)) {\n","            processor = ProductProcessorFactoryKeeper.getProductProcessorFactory().createProcessor(productName);\n","            processors.put(productName, processor);\n","            return processor;\n","        } else {\n","            return null;\n","        }\n","    }\n","\n","    Map<String, ITextProductEventProcessor> getProcessors() {\n","        return Collections.unmodifiableMap(new HashMap<>(processors));\n","    }\n","\n","    void clearProcessors() {\n","        processors.clear();\n","    }\n","\n","    List<AbstractProductProcessITextEvent> getEvents(SequenceId id) {\n","        synchronized (events) {\n","            final List<AbstractProductProcessITextEvent> listOfEvents = events.get(id);\n","            if (listOfEvents == null) {\n","                return Collections.<AbstractProductProcessITextEvent>emptyList();\n","            }\n","            return Collections.<AbstractProductProcessITextEvent>unmodifiableList(new ArrayList<>(listOfEvents));\n","        }\n","    }\n","\n","    void addEvent(SequenceId id, AbstractProductProcessITextEvent event) {\n","        synchronized (events) {\n","            List<AbstractProductProcessITextEvent> listOfEvents = events.get(id);\n","\n","            if (listOfEvents == null) {\n","                listOfEvents = new ArrayList<>();\n","                events.put(id, listOfEvents);\n","            }\n","\n","            listOfEvents.add(event);\n","        }\n","    }\n","\n","    private void tryProcessEvent(AbstractContextBasedITextEvent event) {\n","        if (! (event instanceof AbstractProductProcessITextEvent)) {\n","            return;\n","        }\n","        final AbstractProductProcessITextEvent productEvent = (AbstractProductProcessITextEvent) event;\n","        final String productName = productEvent.getProductName();\n","        final ITextProductEventProcessor productEventProcessor = getActiveProcessor(productName);\n","        if (productEventProcessor == null) {\n","            throw new UnknownProductException(\n","                    MessageFormatUtil.format(UnknownProductException.UNKNOWN_PRODUCT, productName));\n","        }\n","\n","        productEventProcessor.onEvent(productEvent);\n","\n","        if (productEvent.getSequenceId() != null) {\n","            if (productEvent instanceof ConfirmEvent) {\n","                wrapConfirmedEvent((ConfirmEvent) productEvent, productEventProcessor);\n","            } else {\n","                addEvent(productEvent.getSequenceId(), productEvent);\n","            }\n","        }\n","    }\n","\n","    private void wrapConfirmedEvent(ConfirmEvent event, ITextProductEventProcessor productEventProcessor) {\n","        synchronized (events) {\n","            final List<AbstractProductProcessITextEvent> eventsList = events.get(event.getSequenceId());\n","\n","            final AbstractProductProcessITextEvent confirmedEvent = event.getConfirmedEvent();\n","            final int indexOfReportedEvent = eventsList.indexOf(confirmedEvent);\n","            if (indexOfReportedEvent >= 0) {\n","                eventsList.set(indexOfReportedEvent, new ConfirmedEventWrapper(confirmedEvent,\n","                        productEventProcessor.getUsageType(),\n","                        productEventProcessor.getProducer()));\n","            } else {\n","                LOGGER.warn(MessageFormatUtil.format(CommonsLogMessageConstant.UNREPORTED_EVENT,\n","                        confirmedEvent.getProductName(), confirmedEvent.getEventType()));\n","            }\n","        }\n","    }\n","}\n"],"test_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.actions;\n","\n","import com.itextpdf.commons.actions.confirmations.ConfirmEvent;\n","import com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper;\n","import com.itextpdf.commons.actions.processors.AbstractITextProductEventProcessor;\n","import com.itextpdf.commons.actions.processors.IProductProcessorFactory;\n","import com.itextpdf.commons.actions.processors.ITextProductEventProcessor;\n","import com.itextpdf.commons.actions.sequence.SequenceId;\n","import com.itextpdf.commons.ecosystem.ITextTestEvent;\n","import com.itextpdf.commons.exceptions.ProductEventHandlerRepeatException;\n","import com.itextpdf.commons.exceptions.UnknownProductException;\n","import com.itextpdf.commons.utils.MessageFormatUtil;\n","import com.itextpdf.test.AssertUtil;\n","import com.itextpdf.test.ExtendedITextTest;\n","import com.itextpdf.test.annotations.type.UnitTest;\n","\n","import org.junit.After;\n","import org.junit.Assert;\n","import org.junit.Before;\n","import org.junit.Test;\n","import org.junit.experimental.categories.Category;\n","\n","@Category(UnitTest.class)\n","public class ProductEventHandlerTest extends ExtendedITextTest {\n","    @Before\n","    public void clearProcessors() {\n","        ProductEventHandler.INSTANCE.clearProcessors();\n","    }\n","\n","    @After\n","    public void afterEach() {\n","        ProductProcessorFactoryKeeper.restoreDefaultProductProcessorFactory();\n","    }\n","\n","    @Test\n","    public void unknownProductTest() {\n","        ProductEventHandler handler = ProductEventHandler.INSTANCE;\n","\n","        AbstractContextBasedITextEvent event = new ITextTestEvent(new SequenceId(), null, \"test-event\", \"Unknown Product\");\n","        Exception ex = Assert.assertThrows(UnknownProductException.class,\n","                () -> handler.onAcceptedEvent(event));\n","        Assert.assertEquals(MessageFormatUtil.format(UnknownProductException.UNKNOWN_PRODUCT, \"Unknown Product\"),\n","                ex.getMessage());\n","    }\n","\n","    @Test\n","    public void sequenceIdBasedEventTest() {\n","        ProductEventHandler handler = ProductEventHandler.INSTANCE;\n","\n","        SequenceId sequenceId = new SequenceId();\n","\n","        Assert.assertTrue(handler.getEvents(sequenceId).isEmpty());\n","\n","        handler.onAcceptedEvent(new ITextTestEvent(sequenceId, null, \"test-event\",\n","                ProductNameConstant.ITEXT_CORE));\n","\n","        Assert.assertEquals(1, handler.getEvents(sequenceId).size());\n","\n","        AbstractProductProcessITextEvent event = handler.getEvents(sequenceId).get(0);\n","        Assert.assertEquals(sequenceId.getId(), event.getSequenceId().getId());\n","        Assert.assertNull(event.getMetaInfo());\n","        Assert.assertEquals(\"test-event\", event.getEventType());\n","        Assert.assertEquals(ProductNameConstant.ITEXT_CORE, event.getProductName());\n","    }\n","\n","    @Test\n","    public void reportEventSeveralTimesTest() {\n","        ProductEventHandler handler = ProductEventHandler.INSTANCE;\n","\n","        SequenceId sequenceId = new SequenceId();\n","\n","        Assert.assertTrue(handler.getEvents(sequenceId).isEmpty());\n","\n","        ITextTestEvent event = new ITextTestEvent(sequenceId, null, \"test-event\",\n","                ProductNameConstant.ITEXT_CORE);\n","        EventManager.getInstance().onEvent(event);\n","\n","        Assert.assertEquals(1, handler.getEvents(sequenceId).size());\n","        Assert.assertEquals(event, handler.getEvents(sequenceId).get(0));\n","\n","        EventManager.getInstance().onEvent(event);\n","        Assert.assertEquals(2, handler.getEvents(sequenceId).size());\n","        Assert.assertEquals(event, handler.getEvents(sequenceId).get(0));\n","        Assert.assertEquals(event, handler.getEvents(sequenceId).get(1));\n","    }\n","\n","    @Test\n","    public void confirmEventTest() {\n","        ProductEventHandler handler = ProductEventHandler.INSTANCE;\n","\n","        SequenceId sequenceId = new SequenceId();\n","\n","        Assert.assertTrue(handler.getEvents(sequenceId).isEmpty());\n","\n","        ITextTestEvent event = new ITextTestEvent(sequenceId, null, \"test-event\",\n","                ProductNameConstant.ITEXT_CORE);\n","        EventManager.getInstance().onEvent(event);\n","\n","        ConfirmEvent confirmEvent = new ConfirmEvent(sequenceId, event);\n","        EventManager.getInstance().onEvent(confirmEvent);\n","\n","        Assert.assertEquals(1, handler.getEvents(sequenceId).size());\n","        Assert.assertTrue(handler.getEvents(sequenceId).get(0) instanceof ConfirmedEventWrapper);\n","        Assert.assertEquals(event, ((ConfirmedEventWrapper) handler.getEvents(sequenceId).get(0)).getEvent());\n","    }\n","\n","    @Test\n","    public void settingCustomProcessFactoryTest() {\n","        CustomFactory productProcessorFactory = new CustomFactory();\n","        productProcessorFactory.createProcessor(ProductNameConstant.ITEXT_CORE);\n","        ProductProcessorFactoryKeeper.setProductProcessorFactory(productProcessorFactory);\n","\n","        ProductEventHandler handler = ProductEventHandler.INSTANCE;\n","\n","        ITextProductEventProcessor activeProcessor = handler.getActiveProcessor(ProductNameConstant.ITEXT_CORE);\n","        Assert.assertTrue(activeProcessor instanceof TestProductEventProcessor);\n","    }\n","\n","    @Test\n","    public void repeatEventHandlingWithFiveExceptionOnProcessingTest() {\n","        ProductEventHandler handler = ProductEventHandler.INSTANCE;\n","\n","        handler.addProcessor(new RepeatEventProcessor(5));\n","\n","        AbstractContextBasedITextEvent event = new ITextTestEvent(new SequenceId(), null, \"test\",\n","                ProductNameConstant.ITEXT_CORE);\n","\n","        Exception e = Assert.assertThrows(ProductEventHandlerRepeatException.class,\n","                () -> handler.onAcceptedEvent(event));\n","        Assert.assertEquals(\"customMessage5\", e.getMessage());\n","    }\n","\n","    @Test\n","    public void repeatEventHandlingWithFourExceptionOnProcessingTest() {\n","        ProductEventHandler handler = ProductEventHandler.INSTANCE;\n","\n","        handler.addProcessor(new RepeatEventProcessor(4));\n","\n","        AbstractContextBasedITextEvent event = new ITextTestEvent(new SequenceId(), null, \"test\",\n","                ProductNameConstant.ITEXT_CORE);\n","\n","        AssertUtil.doesNotThrow(() -> handler.onAcceptedEvent(event));\n","    }\n","\n","    @Test\n","    public void repeatEventHandlingWithOneExceptionOnProcessingTest() {\n","        ProductEventHandler handler = ProductEventHandler.INSTANCE;\n","\n","        handler.addProcessor(new RepeatEventProcessor(1));\n","\n","        AbstractContextBasedITextEvent event = new ITextTestEvent(new SequenceId(), null, \"test\",\n","                ProductNameConstant.ITEXT_CORE);\n","\n","        AssertUtil.doesNotThrow(() -> handler.onAcceptedEvent(event));\n","    }\n","\n","    private static class CustomFactory implements IProductProcessorFactory {\n","        @Override\n","        public ITextProductEventProcessor createProcessor(String productName) {\n","            return new TestProductEventProcessor(productName);\n","        }\n","    }\n","\n","    private static class TestProductEventProcessor extends AbstractITextProductEventProcessor {\n","        public TestProductEventProcessor(String productName) {\n","            super(productName);\n","        }\n","\n","        @Override\n","        public void onEvent(AbstractProductProcessITextEvent event) {\n","            // do nothing\n","        }\n","\n","        @Override\n","        public String getUsageType() {\n","            return \"AGPL\";\n","        }\n","    }\n","\n","\n","    private static class RepeatEventProcessor implements ITextProductEventProcessor {\n","        private final int exceptionsCount;\n","        private int exceptionCounter = 0;\n","\n","        public RepeatEventProcessor(int exceptionsCount) {\n","            this.exceptionsCount = exceptionsCount;\n","        }\n","\n","        @Override\n","        public void onEvent(AbstractProductProcessITextEvent event) {\n","            if (exceptionCounter < exceptionsCount) {\n","                exceptionCounter++;\n","                throw new ProductEventHandlerRepeatException(\"customMessage\" + exceptionCounter);\n","            }\n","\n","        }\n","\n","        @Override\n","        public String getProductName() {\n","            return ProductNameConstant.ITEXT_CORE;\n","        }\n","\n","        @Override\n","        public String getUsageType() {\n","            return \"someUsage\";\n","        }\n","\n","        @Override\n","        public String getProducer() {\n","            return \"someProducer\";\n","        }\n","    }\n","}\n"],"method_lines_dic":{"ProductEventHandler::::onAcceptedEvent(com.itextpdf.commons.actions.AbstractContextBasedITextEvent)":[68,81],"ProductEventHandler::::addProcessor(com.itextpdf.commons.actions.processors.ITextProductEventProcessor)":[83,85],"ProductEventHandler::::removeProcessor(java.lang.String)":[87,89],"ProductEventHandler::::getActiveProcessor(java.lang.String)":[91,105],"ProductEventHandler::::getProcessors()":[107,109],"ProductEventHandler::::clearProcessors()":[111,113],"ProductEventHandler::::getEvents(com.itextpdf.commons.actions.sequence.SequenceId)":[115,123],"ProductEventHandler::::addEvent(com.itextpdf.commons.actions.sequence.SequenceId,com.itextpdf.commons.actions.AbstractProductProcessITextEvent)":[125,136],"ProductEventHandler::::tryProcessEvent(com.itextpdf.commons.actions.AbstractContextBasedITextEvent)":[138,159],"ProductEventHandler::::wrapConfirmedEvent(com.itextpdf.commons.actions.confirmations.ConfirmEvent,com.itextpdf.commons.actions.processors.ITextProductEventProcessor)":[161,176]},"test_method_lines_dic":{"ProductEventHandlerTest::::clearProcessors()":[47,50],"ProductEventHandlerTest::::afterEach()":[52,55],"ProductEventHandlerTest::::unknownProductTest()":[57,66],"ProductEventHandlerTest::::sequenceIdBasedEventTest()":[68,86],"ProductEventHandlerTest::::reportEventSeveralTimesTest()":[88,107],"ProductEventHandlerTest::::confirmEventTest()":[109,127],"ProductEventHandlerTest::::settingCustomProcessFactoryTest()":[129,139],"ProductEventHandlerTest::::repeatEventHandlingWithFiveExceptionOnProcessingTest()":[141,153],"ProductEventHandlerTest::::repeatEventHandlingWithFourExceptionOnProcessingTest()":[155,165],"ProductEventHandlerTest::::repeatEventHandlingWithOneExceptionOnProcessingTest()":[167,177],"ProductEventHandlerTest.CustomFactory::::createProcessor(java.lang.String)":[180,183],"ProductEventHandlerTest.TestProductEventProcessor::::getUsageType()":[196,199],"ProductEventHandlerTest.RepeatEventProcessor::::getProductName()":[220,223],"ProductEventHandlerTest.RepeatEventProcessor::::getUsageType()":[225,228],"ProductEventHandlerTest.RepeatEventProcessor::::getProducer()":[230,233]},"reverse_method_lines_dic":{"68":"ProductEventHandler::::onAcceptedEvent(com.itextpdf.commons.actions.AbstractContextBasedITextEvent)","69":"ProductEventHandler::::onAcceptedEvent(com.itextpdf.commons.actions.AbstractContextBasedITextEvent)","70":"ProductEventHandler::::onAcceptedEvent(com.itextpdf.commons.actions.AbstractContextBasedITextEvent)","71":"ProductEventHandler::::onAcceptedEvent(com.itextpdf.commons.actions.AbstractContextBasedITextEvent)","72":"ProductEventHandler::::onAcceptedEvent(com.itextpdf.commons.actions.AbstractContextBasedITextEvent)","73":"ProductEventHandler::::onAcceptedEvent(com.itextpdf.commons.actions.AbstractContextBasedITextEvent)","74":"ProductEventHandler::::onAcceptedEvent(com.itextpdf.commons.actions.AbstractContextBasedITextEvent)","75":"ProductEventHandler::::onAcceptedEvent(com.itextpdf.commons.actions.AbstractContextBasedITextEvent)","76":"ProductEventHandler::::onAcceptedEvent(com.itextpdf.commons.actions.AbstractContextBasedITextEvent)","77":"ProductEventHandler::::onAcceptedEvent(com.itextpdf.commons.actions.AbstractContextBasedITextEvent)","78":"ProductEventHandler::::onAcceptedEvent(com.itextpdf.commons.actions.AbstractContextBasedITextEvent)","79":"ProductEventHandler::::onAcceptedEvent(com.itextpdf.commons.actions.AbstractContextBasedITextEvent)","80":"ProductEventHandler::::onAcceptedEvent(com.itextpdf.commons.actions.AbstractContextBasedITextEvent)","81":"ProductEventHandler::::onAcceptedEvent(com.itextpdf.commons.actions.AbstractContextBasedITextEvent)","83":"ProductEventHandler::::addProcessor(com.itextpdf.commons.actions.processors.ITextProductEventProcessor)","84":"ProductEventHandler::::addProcessor(com.itextpdf.commons.actions.processors.ITextProductEventProcessor)","85":"ProductEventHandler::::addProcessor(com.itextpdf.commons.actions.processors.ITextProductEventProcessor)","87":"ProductEventHandler::::removeProcessor(java.lang.String)","88":"ProductEventHandler::::removeProcessor(java.lang.String)","89":"ProductEventHandler::::removeProcessor(java.lang.String)","91":"ProductEventHandler::::getActiveProcessor(java.lang.String)","92":"ProductEventHandler::::getActiveProcessor(java.lang.String)","93":"ProductEventHandler::::getActiveProcessor(java.lang.String)","94":"ProductEventHandler::::getActiveProcessor(java.lang.String)","95":"ProductEventHandler::::getActiveProcessor(java.lang.String)","96":"ProductEventHandler::::getActiveProcessor(java.lang.String)","97":"ProductEventHandler::::getActiveProcessor(java.lang.String)","98":"ProductEventHandler::::getActiveProcessor(java.lang.String)","99":"ProductEventHandler::::getActiveProcessor(java.lang.String)","100":"ProductEventHandler::::getActiveProcessor(java.lang.String)","101":"ProductEventHandler::::getActiveProcessor(java.lang.String)","102":"ProductEventHandler::::getActiveProcessor(java.lang.String)","103":"ProductEventHandler::::getActiveProcessor(java.lang.String)","104":"ProductEventHandler::::getActiveProcessor(java.lang.String)","105":"ProductEventHandler::::getActiveProcessor(java.lang.String)","107":"ProductEventHandler::::getProcessors()","108":"ProductEventHandler::::getProcessors()","109":"ProductEventHandler::::getProcessors()","111":"ProductEventHandler::::clearProcessors()","112":"ProductEventHandler::::clearProcessors()","113":"ProductEventHandler::::clearProcessors()","115":"ProductEventHandler::::getEvents(com.itextpdf.commons.actions.sequence.SequenceId)","116":"ProductEventHandler::::getEvents(com.itextpdf.commons.actions.sequence.SequenceId)","117":"ProductEventHandler::::getEvents(com.itextpdf.commons.actions.sequence.SequenceId)","118":"ProductEventHandler::::getEvents(com.itextpdf.commons.actions.sequence.SequenceId)","119":"ProductEventHandler::::getEvents(com.itextpdf.commons.actions.sequence.SequenceId)","120":"ProductEventHandler::::getEvents(com.itextpdf.commons.actions.sequence.SequenceId)","121":"ProductEventHandler::::getEvents(com.itextpdf.commons.actions.sequence.SequenceId)","122":"ProductEventHandler::::getEvents(com.itextpdf.commons.actions.sequence.SequenceId)","123":"ProductEventHandler::::getEvents(com.itextpdf.commons.actions.sequence.SequenceId)","125":"ProductEventHandler::::addEvent(com.itextpdf.commons.actions.sequence.SequenceId,com.itextpdf.commons.actions.AbstractProductProcessITextEvent)","126":"ProductEventHandler::::addEvent(com.itextpdf.commons.actions.sequence.SequenceId,com.itextpdf.commons.actions.AbstractProductProcessITextEvent)","127":"ProductEventHandler::::addEvent(com.itextpdf.commons.actions.sequence.SequenceId,com.itextpdf.commons.actions.AbstractProductProcessITextEvent)","128":"ProductEventHandler::::addEvent(com.itextpdf.commons.actions.sequence.SequenceId,com.itextpdf.commons.actions.AbstractProductProcessITextEvent)","129":"ProductEventHandler::::addEvent(com.itextpdf.commons.actions.sequence.SequenceId,com.itextpdf.commons.actions.AbstractProductProcessITextEvent)","130":"ProductEventHandler::::addEvent(com.itextpdf.commons.actions.sequence.SequenceId,com.itextpdf.commons.actions.AbstractProductProcessITextEvent)","131":"ProductEventHandler::::addEvent(com.itextpdf.commons.actions.sequence.SequenceId,com.itextpdf.commons.actions.AbstractProductProcessITextEvent)","132":"ProductEventHandler::::addEvent(com.itextpdf.commons.actions.sequence.SequenceId,com.itextpdf.commons.actions.AbstractProductProcessITextEvent)","133":"ProductEventHandler::::addEvent(com.itextpdf.commons.actions.sequence.SequenceId,com.itextpdf.commons.actions.AbstractProductProcessITextEvent)","134":"ProductEventHandler::::addEvent(com.itextpdf.commons.actions.sequence.SequenceId,com.itextpdf.commons.actions.AbstractProductProcessITextEvent)","135":"ProductEventHandler::::addEvent(com.itextpdf.commons.actions.sequence.SequenceId,com.itextpdf.commons.actions.AbstractProductProcessITextEvent)","136":"ProductEventHandler::::addEvent(com.itextpdf.commons.actions.sequence.SequenceId,com.itextpdf.commons.actions.AbstractProductProcessITextEvent)","138":"ProductEventHandler::::tryProcessEvent(com.itextpdf.commons.actions.AbstractContextBasedITextEvent)","139":"ProductEventHandler::::tryProcessEvent(com.itextpdf.commons.actions.AbstractContextBasedITextEvent)","140":"ProductEventHandler::::tryProcessEvent(com.itextpdf.commons.actions.AbstractContextBasedITextEvent)","141":"ProductEventHandler::::tryProcessEvent(com.itextpdf.commons.actions.AbstractContextBasedITextEvent)","142":"ProductEventHandler::::tryProcessEvent(com.itextpdf.commons.actions.AbstractContextBasedITextEvent)","143":"ProductEventHandler::::tryProcessEvent(com.itextpdf.commons.actions.AbstractContextBasedITextEvent)","144":"ProductEventHandler::::tryProcessEvent(com.itextpdf.commons.actions.AbstractContextBasedITextEvent)","145":"ProductEventHandler::::tryProcessEvent(com.itextpdf.commons.actions.AbstractContextBasedITextEvent)","146":"ProductEventHandler::::tryProcessEvent(com.itextpdf.commons.actions.AbstractContextBasedITextEvent)","147":"ProductEventHandler::::tryProcessEvent(com.itextpdf.commons.actions.AbstractContextBasedITextEvent)","148":"ProductEventHandler::::tryProcessEvent(com.itextpdf.commons.actions.AbstractContextBasedITextEvent)","149":"ProductEventHandler::::tryProcessEvent(com.itextpdf.commons.actions.AbstractContextBasedITextEvent)","150":"ProductEventHandler::::tryProcessEvent(com.itextpdf.commons.actions.AbstractContextBasedITextEvent)","151":"ProductEventHandler::::tryProcessEvent(com.itextpdf.commons.actions.AbstractContextBasedITextEvent)","152":"ProductEventHandler::::tryProcessEvent(com.itextpdf.commons.actions.AbstractContextBasedITextEvent)","153":"ProductEventHandler::::tryProcessEvent(com.itextpdf.commons.actions.AbstractContextBasedITextEvent)","154":"ProductEventHandler::::tryProcessEvent(com.itextpdf.commons.actions.AbstractContextBasedITextEvent)","155":"ProductEventHandler::::tryProcessEvent(com.itextpdf.commons.actions.AbstractContextBasedITextEvent)","156":"ProductEventHandler::::tryProcessEvent(com.itextpdf.commons.actions.AbstractContextBasedITextEvent)","157":"ProductEventHandler::::tryProcessEvent(com.itextpdf.commons.actions.AbstractContextBasedITextEvent)","158":"ProductEventHandler::::tryProcessEvent(com.itextpdf.commons.actions.AbstractContextBasedITextEvent)","159":"ProductEventHandler::::tryProcessEvent(com.itextpdf.commons.actions.AbstractContextBasedITextEvent)","161":"ProductEventHandler::::wrapConfirmedEvent(com.itextpdf.commons.actions.confirmations.ConfirmEvent,com.itextpdf.commons.actions.processors.ITextProductEventProcessor)","162":"ProductEventHandler::::wrapConfirmedEvent(com.itextpdf.commons.actions.confirmations.ConfirmEvent,com.itextpdf.commons.actions.processors.ITextProductEventProcessor)","163":"ProductEventHandler::::wrapConfirmedEvent(com.itextpdf.commons.actions.confirmations.ConfirmEvent,com.itextpdf.commons.actions.processors.ITextProductEventProcessor)","164":"ProductEventHandler::::wrapConfirmedEvent(com.itextpdf.commons.actions.confirmations.ConfirmEvent,com.itextpdf.commons.actions.processors.ITextProductEventProcessor)","165":"ProductEventHandler::::wrapConfirmedEvent(com.itextpdf.commons.actions.confirmations.ConfirmEvent,com.itextpdf.commons.actions.processors.ITextProductEventProcessor)","166":"ProductEventHandler::::wrapConfirmedEvent(com.itextpdf.commons.actions.confirmations.ConfirmEvent,com.itextpdf.commons.actions.processors.ITextProductEventProcessor)","167":"ProductEventHandler::::wrapConfirmedEvent(com.itextpdf.commons.actions.confirmations.ConfirmEvent,com.itextpdf.commons.actions.processors.ITextProductEventProcessor)","168":"ProductEventHandler::::wrapConfirmedEvent(com.itextpdf.commons.actions.confirmations.ConfirmEvent,com.itextpdf.commons.actions.processors.ITextProductEventProcessor)","169":"ProductEventHandler::::wrapConfirmedEvent(com.itextpdf.commons.actions.confirmations.ConfirmEvent,com.itextpdf.commons.actions.processors.ITextProductEventProcessor)","170":"ProductEventHandler::::wrapConfirmedEvent(com.itextpdf.commons.actions.confirmations.ConfirmEvent,com.itextpdf.commons.actions.processors.ITextProductEventProcessor)","171":"ProductEventHandler::::wrapConfirmedEvent(com.itextpdf.commons.actions.confirmations.ConfirmEvent,com.itextpdf.commons.actions.processors.ITextProductEventProcessor)","172":"ProductEventHandler::::wrapConfirmedEvent(com.itextpdf.commons.actions.confirmations.ConfirmEvent,com.itextpdf.commons.actions.processors.ITextProductEventProcessor)","173":"ProductEventHandler::::wrapConfirmedEvent(com.itextpdf.commons.actions.confirmations.ConfirmEvent,com.itextpdf.commons.actions.processors.ITextProductEventProcessor)","174":"ProductEventHandler::::wrapConfirmedEvent(com.itextpdf.commons.actions.confirmations.ConfirmEvent,com.itextpdf.commons.actions.processors.ITextProductEventProcessor)","175":"ProductEventHandler::::wrapConfirmedEvent(com.itextpdf.commons.actions.confirmations.ConfirmEvent,com.itextpdf.commons.actions.processors.ITextProductEventProcessor)","176":"ProductEventHandler::::wrapConfirmedEvent(com.itextpdf.commons.actions.confirmations.ConfirmEvent,com.itextpdf.commons.actions.processors.ITextProductEventProcessor)"},"test_reverse_method_lines_dic":{"47":"ProductEventHandlerTest::::clearProcessors()","48":"ProductEventHandlerTest::::clearProcessors()","49":"ProductEventHandlerTest::::clearProcessors()","50":"ProductEventHandlerTest::::clearProcessors()","52":"ProductEventHandlerTest::::afterEach()","53":"ProductEventHandlerTest::::afterEach()","54":"ProductEventHandlerTest::::afterEach()","55":"ProductEventHandlerTest::::afterEach()","57":"ProductEventHandlerTest::::unknownProductTest()","58":"ProductEventHandlerTest::::unknownProductTest()","59":"ProductEventHandlerTest::::unknownProductTest()","60":"ProductEventHandlerTest::::unknownProductTest()","61":"ProductEventHandlerTest::::unknownProductTest()","62":"ProductEventHandlerTest::::unknownProductTest()","63":"ProductEventHandlerTest::::unknownProductTest()","64":"ProductEventHandlerTest::::unknownProductTest()","65":"ProductEventHandlerTest::::unknownProductTest()","66":"ProductEventHandlerTest::::unknownProductTest()","68":"ProductEventHandlerTest::::sequenceIdBasedEventTest()","69":"ProductEventHandlerTest::::sequenceIdBasedEventTest()","70":"ProductEventHandlerTest::::sequenceIdBasedEventTest()","71":"ProductEventHandlerTest::::sequenceIdBasedEventTest()","72":"ProductEventHandlerTest::::sequenceIdBasedEventTest()","73":"ProductEventHandlerTest::::sequenceIdBasedEventTest()","74":"ProductEventHandlerTest::::sequenceIdBasedEventTest()","75":"ProductEventHandlerTest::::sequenceIdBasedEventTest()","76":"ProductEventHandlerTest::::sequenceIdBasedEventTest()","77":"ProductEventHandlerTest::::sequenceIdBasedEventTest()","78":"ProductEventHandlerTest::::sequenceIdBasedEventTest()","79":"ProductEventHandlerTest::::sequenceIdBasedEventTest()","80":"ProductEventHandlerTest::::sequenceIdBasedEventTest()","81":"ProductEventHandlerTest::::sequenceIdBasedEventTest()","82":"ProductEventHandlerTest::::sequenceIdBasedEventTest()","83":"ProductEventHandlerTest::::sequenceIdBasedEventTest()","84":"ProductEventHandlerTest::::sequenceIdBasedEventTest()","85":"ProductEventHandlerTest::::sequenceIdBasedEventTest()","86":"ProductEventHandlerTest::::sequenceIdBasedEventTest()","88":"ProductEventHandlerTest::::reportEventSeveralTimesTest()","89":"ProductEventHandlerTest::::reportEventSeveralTimesTest()","90":"ProductEventHandlerTest::::reportEventSeveralTimesTest()","91":"ProductEventHandlerTest::::reportEventSeveralTimesTest()","92":"ProductEventHandlerTest::::reportEventSeveralTimesTest()","93":"ProductEventHandlerTest::::reportEventSeveralTimesTest()","94":"ProductEventHandlerTest::::reportEventSeveralTimesTest()","95":"ProductEventHandlerTest::::reportEventSeveralTimesTest()","96":"ProductEventHandlerTest::::reportEventSeveralTimesTest()","97":"ProductEventHandlerTest::::reportEventSeveralTimesTest()","98":"ProductEventHandlerTest::::reportEventSeveralTimesTest()","99":"ProductEventHandlerTest::::reportEventSeveralTimesTest()","100":"ProductEventHandlerTest::::reportEventSeveralTimesTest()","101":"ProductEventHandlerTest::::reportEventSeveralTimesTest()","102":"ProductEventHandlerTest::::reportEventSeveralTimesTest()","103":"ProductEventHandlerTest::::reportEventSeveralTimesTest()","104":"ProductEventHandlerTest::::reportEventSeveralTimesTest()","105":"ProductEventHandlerTest::::reportEventSeveralTimesTest()","106":"ProductEventHandlerTest::::reportEventSeveralTimesTest()","107":"ProductEventHandlerTest::::reportEventSeveralTimesTest()","109":"ProductEventHandlerTest::::confirmEventTest()","110":"ProductEventHandlerTest::::confirmEventTest()","111":"ProductEventHandlerTest::::confirmEventTest()","112":"ProductEventHandlerTest::::confirmEventTest()","113":"ProductEventHandlerTest::::confirmEventTest()","114":"ProductEventHandlerTest::::confirmEventTest()","115":"ProductEventHandlerTest::::confirmEventTest()","116":"ProductEventHandlerTest::::confirmEventTest()","117":"ProductEventHandlerTest::::confirmEventTest()","118":"ProductEventHandlerTest::::confirmEventTest()","119":"ProductEventHandlerTest::::confirmEventTest()","120":"ProductEventHandlerTest::::confirmEventTest()","121":"ProductEventHandlerTest::::confirmEventTest()","122":"ProductEventHandlerTest::::confirmEventTest()","123":"ProductEventHandlerTest::::confirmEventTest()","124":"ProductEventHandlerTest::::confirmEventTest()","125":"ProductEventHandlerTest::::confirmEventTest()","126":"ProductEventHandlerTest::::confirmEventTest()","127":"ProductEventHandlerTest::::confirmEventTest()","129":"ProductEventHandlerTest::::settingCustomProcessFactoryTest()","130":"ProductEventHandlerTest::::settingCustomProcessFactoryTest()","131":"ProductEventHandlerTest::::settingCustomProcessFactoryTest()","132":"ProductEventHandlerTest::::settingCustomProcessFactoryTest()","133":"ProductEventHandlerTest::::settingCustomProcessFactoryTest()","134":"ProductEventHandlerTest::::settingCustomProcessFactoryTest()","135":"ProductEventHandlerTest::::settingCustomProcessFactoryTest()","136":"ProductEventHandlerTest::::settingCustomProcessFactoryTest()","137":"ProductEventHandlerTest::::settingCustomProcessFactoryTest()","138":"ProductEventHandlerTest::::settingCustomProcessFactoryTest()","139":"ProductEventHandlerTest::::settingCustomProcessFactoryTest()","141":"ProductEventHandlerTest::::repeatEventHandlingWithFiveExceptionOnProcessingTest()","142":"ProductEventHandlerTest::::repeatEventHandlingWithFiveExceptionOnProcessingTest()","143":"ProductEventHandlerTest::::repeatEventHandlingWithFiveExceptionOnProcessingTest()","144":"ProductEventHandlerTest::::repeatEventHandlingWithFiveExceptionOnProcessingTest()","145":"ProductEventHandlerTest::::repeatEventHandlingWithFiveExceptionOnProcessingTest()","146":"ProductEventHandlerTest::::repeatEventHandlingWithFiveExceptionOnProcessingTest()","147":"ProductEventHandlerTest::::repeatEventHandlingWithFiveExceptionOnProcessingTest()","148":"ProductEventHandlerTest::::repeatEventHandlingWithFiveExceptionOnProcessingTest()","149":"ProductEventHandlerTest::::repeatEventHandlingWithFiveExceptionOnProcessingTest()","150":"ProductEventHandlerTest::::repeatEventHandlingWithFiveExceptionOnProcessingTest()","151":"ProductEventHandlerTest::::repeatEventHandlingWithFiveExceptionOnProcessingTest()","152":"ProductEventHandlerTest::::repeatEventHandlingWithFiveExceptionOnProcessingTest()","153":"ProductEventHandlerTest::::repeatEventHandlingWithFiveExceptionOnProcessingTest()","155":"ProductEventHandlerTest::::repeatEventHandlingWithFourExceptionOnProcessingTest()","156":"ProductEventHandlerTest::::repeatEventHandlingWithFourExceptionOnProcessingTest()","157":"ProductEventHandlerTest::::repeatEventHandlingWithFourExceptionOnProcessingTest()","158":"ProductEventHandlerTest::::repeatEventHandlingWithFourExceptionOnProcessingTest()","159":"ProductEventHandlerTest::::repeatEventHandlingWithFourExceptionOnProcessingTest()","160":"ProductEventHandlerTest::::repeatEventHandlingWithFourExceptionOnProcessingTest()","161":"ProductEventHandlerTest::::repeatEventHandlingWithFourExceptionOnProcessingTest()","162":"ProductEventHandlerTest::::repeatEventHandlingWithFourExceptionOnProcessingTest()","163":"ProductEventHandlerTest::::repeatEventHandlingWithFourExceptionOnProcessingTest()","164":"ProductEventHandlerTest::::repeatEventHandlingWithFourExceptionOnProcessingTest()","165":"ProductEventHandlerTest::::repeatEventHandlingWithFourExceptionOnProcessingTest()","167":"ProductEventHandlerTest::::repeatEventHandlingWithOneExceptionOnProcessingTest()","168":"ProductEventHandlerTest::::repeatEventHandlingWithOneExceptionOnProcessingTest()","169":"ProductEventHandlerTest::::repeatEventHandlingWithOneExceptionOnProcessingTest()","170":"ProductEventHandlerTest::::repeatEventHandlingWithOneExceptionOnProcessingTest()","171":"ProductEventHandlerTest::::repeatEventHandlingWithOneExceptionOnProcessingTest()","172":"ProductEventHandlerTest::::repeatEventHandlingWithOneExceptionOnProcessingTest()","173":"ProductEventHandlerTest::::repeatEventHandlingWithOneExceptionOnProcessingTest()","174":"ProductEventHandlerTest::::repeatEventHandlingWithOneExceptionOnProcessingTest()","175":"ProductEventHandlerTest::::repeatEventHandlingWithOneExceptionOnProcessingTest()","176":"ProductEventHandlerTest::::repeatEventHandlingWithOneExceptionOnProcessingTest()","177":"ProductEventHandlerTest::::repeatEventHandlingWithOneExceptionOnProcessingTest()","180":"ProductEventHandlerTest.CustomFactory::::createProcessor(java.lang.String)","181":"ProductEventHandlerTest.CustomFactory::::createProcessor(java.lang.String)","182":"ProductEventHandlerTest.CustomFactory::::createProcessor(java.lang.String)","183":"ProductEventHandlerTest.CustomFactory::::createProcessor(java.lang.String)","196":"ProductEventHandlerTest.TestProductEventProcessor::::getUsageType()","197":"ProductEventHandlerTest.TestProductEventProcessor::::getUsageType()","198":"ProductEventHandlerTest.TestProductEventProcessor::::getUsageType()","199":"ProductEventHandlerTest.TestProductEventProcessor::::getUsageType()","220":"ProductEventHandlerTest.RepeatEventProcessor::::getProductName()","221":"ProductEventHandlerTest.RepeatEventProcessor::::getProductName()","222":"ProductEventHandlerTest.RepeatEventProcessor::::getProductName()","223":"ProductEventHandlerTest.RepeatEventProcessor::::getProductName()","225":"ProductEventHandlerTest.RepeatEventProcessor::::getUsageType()","226":"ProductEventHandlerTest.RepeatEventProcessor::::getUsageType()","227":"ProductEventHandlerTest.RepeatEventProcessor::::getUsageType()","228":"ProductEventHandlerTest.RepeatEventProcessor::::getUsageType()","230":"ProductEventHandlerTest.RepeatEventProcessor::::getProducer()","231":"ProductEventHandlerTest.RepeatEventProcessor::::getProducer()","232":"ProductEventHandlerTest.RepeatEventProcessor::::getProducer()","233":"ProductEventHandlerTest.RepeatEventProcessor::::getProducer()"},"tests":[{"test_lines":[57,66],"covered_lines":[49,51,56,57,60,61,70,92,94,98,103,112,113,139,142,143,144,145,146,147],"label":"ProductEventHandler::::tryProcessEvent(com.itextpdf.commons.actions.AbstractContextBasedITextEvent)"},{"test_lines":[68,86],"covered_lines":[49,51,56,57,60,61,70,72,74,92,94,98,99,100,101,112,113,116,117,118,119,121,126,127,129,130,131,134,135,136,139,142,143,144,145,150,152,153,156,159],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[88,107],"covered_lines":[49,51,56,57,60,61,70,72,74,92,94,95,98,99,100,101,112,113,116,117,118,119,121,126,127,129,130,131,134,135,136,139,142,143,144,145,150,152,153,156,159],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[109,127],"covered_lines":[49,51,56,57,60,61,70,72,74,92,94,95,98,99,100,101,112,113,116,117,118,119,121,126,127,129,130,131,134,135,136,139,142,143,144,145,150,152,153,154,156,159,162,163,165,166,167,168,169,170,175,176],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[129,139],"covered_lines":[49,51,56,57,60,61,92,94,98,99,100,101,112,113],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[141,153],"covered_lines":[49,51,56,57,60,61,70,75,84,92,94,95,112,113,139,142,143],"label":"ProductEventHandler::::onAcceptedEvent(com.itextpdf.commons.actions.AbstractContextBasedITextEvent)"},{"test_lines":[155,165],"covered_lines":[49,51,56,57,60,61,70,75,80,81,84,92,94,95,112,113,126,127,129,130,131,134,135,136,139,142,143,144,145,150,152,153,156,159],"label":"ProductEventHandler::::onAcceptedEvent(com.itextpdf.commons.actions.AbstractContextBasedITextEvent)"},{"test_lines":[167,177],"covered_lines":[49,51,56,57,60,61,70,72,74,75,84,92,94,95,112,113,126,127,129,130,131,134,135,136,139,142,143,144,145,150,152,153,156,159],"label":"ProductEventHandler::::onAcceptedEvent(com.itextpdf.commons.actions.AbstractContextBasedITextEvent)"}]},"/bernard/dataset_construction/prep/repos/itext-java/commons/src/main/java/com/itextpdf/commons/actions/ProductProcessorFactoryKeeper.java":{"class_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.actions;\n","\n","import com.itextpdf.commons.actions.processors.DefaultProductProcessorFactory;\n","import com.itextpdf.commons.actions.processors.IProductProcessorFactory;\n","\n","/**\n"," * Helper class which allow to change used product processor factory instance.\n"," */\n","final class ProductProcessorFactoryKeeper {\n","    private static final IProductProcessorFactory DEFAULT_FACTORY = new DefaultProductProcessorFactory();\n","    private static IProductProcessorFactory productProcessorFactory = DEFAULT_FACTORY;\n","\n","    private ProductProcessorFactoryKeeper() {\n","        // do nothing\n","    }\n","\n","    /**\n","     * Sets product processor factory instance.\n","     *\n","     * @param productProcessorFactory the instance to be set\n","     */\n","    static void setProductProcessorFactory(IProductProcessorFactory productProcessorFactory) {\n","        ProductProcessorFactoryKeeper.productProcessorFactory = productProcessorFactory;\n","    }\n","\n","    /**\n","     * Restores default factory.\n","     */\n","    static void restoreDefaultProductProcessorFactory() {\n","        ProductProcessorFactoryKeeper.productProcessorFactory = DEFAULT_FACTORY;\n","    }\n","\n","    /**\n","     * Gets reporting product processor factory instance.\n","     *\n","     * @return the product processor factory instance\n","     */\n","    static IProductProcessorFactory getProductProcessorFactory() {\n","        return productProcessorFactory;\n","    }\n","}\n"],"test_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.actions;\n","\n","import com.itextpdf.commons.actions.processors.DefaultProductProcessorFactory;\n","import com.itextpdf.commons.actions.processors.IProductProcessorFactory;\n","import com.itextpdf.commons.actions.processors.UnderAgplProductProcessorFactory;\n","import com.itextpdf.test.ExtendedITextTest;\n","import com.itextpdf.test.annotations.type.UnitTest;\n","\n","import org.junit.After;\n","import org.junit.Assert;\n","import org.junit.Test;\n","import org.junit.experimental.categories.Category;\n","\n","@Category(UnitTest.class)\n","public class ProductProcessorFactoryKeeperTest extends ExtendedITextTest {\n","\n","    @After\n","    public void afterEach() {\n","        ProductProcessorFactoryKeeper.restoreDefaultProductProcessorFactory();\n","    }\n","\n","    @Test\n","    public void gettingDefaultFactoryFromKeeper() {\n","        IProductProcessorFactory productProcessorFactory = ProductProcessorFactoryKeeper.getProductProcessorFactory();\n","        Assert.assertTrue(productProcessorFactory instanceof DefaultProductProcessorFactory);\n","    }\n","\n","    @Test\n","    public void restoringDefaultFactory() {\n","        ProductProcessorFactoryKeeper.setProductProcessorFactory(new UnderAgplProductProcessorFactory());\n","\n","        Assert.assertTrue(ProductProcessorFactoryKeeper.getProductProcessorFactory()\n","                instanceof UnderAgplProductProcessorFactory);\n","        ProductProcessorFactoryKeeper.restoreDefaultProductProcessorFactory();\n","        Assert.assertTrue(ProductProcessorFactoryKeeper.getProductProcessorFactory()\n","                instanceof DefaultProductProcessorFactory);\n","    }\n","}\n"],"method_lines_dic":{"ProductProcessorFactoryKeeper::::setProductProcessorFactory(com.itextpdf.commons.actions.processors.IProductProcessorFactory)":[44,46],"ProductProcessorFactoryKeeper::::restoreDefaultProductProcessorFactory()":[51,53],"ProductProcessorFactoryKeeper::::getProductProcessorFactory()":[60,62]},"test_method_lines_dic":{"ProductProcessorFactoryKeeperTest::::afterEach()":[39,42],"ProductProcessorFactoryKeeperTest::::gettingDefaultFactoryFromKeeper()":[44,48],"ProductProcessorFactoryKeeperTest::::restoringDefaultFactory()":[50,59]},"reverse_method_lines_dic":{"44":"ProductProcessorFactoryKeeper::::setProductProcessorFactory(com.itextpdf.commons.actions.processors.IProductProcessorFactory)","45":"ProductProcessorFactoryKeeper::::setProductProcessorFactory(com.itextpdf.commons.actions.processors.IProductProcessorFactory)","46":"ProductProcessorFactoryKeeper::::setProductProcessorFactory(com.itextpdf.commons.actions.processors.IProductProcessorFactory)","51":"ProductProcessorFactoryKeeper::::restoreDefaultProductProcessorFactory()","52":"ProductProcessorFactoryKeeper::::restoreDefaultProductProcessorFactory()","53":"ProductProcessorFactoryKeeper::::restoreDefaultProductProcessorFactory()","60":"ProductProcessorFactoryKeeper::::getProductProcessorFactory()","61":"ProductProcessorFactoryKeeper::::getProductProcessorFactory()","62":"ProductProcessorFactoryKeeper::::getProductProcessorFactory()"},"test_reverse_method_lines_dic":{"39":"ProductProcessorFactoryKeeperTest::::afterEach()","40":"ProductProcessorFactoryKeeperTest::::afterEach()","41":"ProductProcessorFactoryKeeperTest::::afterEach()","42":"ProductProcessorFactoryKeeperTest::::afterEach()","44":"ProductProcessorFactoryKeeperTest::::gettingDefaultFactoryFromKeeper()","45":"ProductProcessorFactoryKeeperTest::::gettingDefaultFactoryFromKeeper()","46":"ProductProcessorFactoryKeeperTest::::gettingDefaultFactoryFromKeeper()","47":"ProductProcessorFactoryKeeperTest::::gettingDefaultFactoryFromKeeper()","48":"ProductProcessorFactoryKeeperTest::::gettingDefaultFactoryFromKeeper()","50":"ProductProcessorFactoryKeeperTest::::restoringDefaultFactory()","51":"ProductProcessorFactoryKeeperTest::::restoringDefaultFactory()","52":"ProductProcessorFactoryKeeperTest::::restoringDefaultFactory()","53":"ProductProcessorFactoryKeeperTest::::restoringDefaultFactory()","54":"ProductProcessorFactoryKeeperTest::::restoringDefaultFactory()","55":"ProductProcessorFactoryKeeperTest::::restoringDefaultFactory()","56":"ProductProcessorFactoryKeeperTest::::restoringDefaultFactory()","57":"ProductProcessorFactoryKeeperTest::::restoringDefaultFactory()","58":"ProductProcessorFactoryKeeperTest::::restoringDefaultFactory()","59":"ProductProcessorFactoryKeeperTest::::restoringDefaultFactory()"},"tests":[{"test_lines":[44,48],"covered_lines":[32,33,52,53,61],"label":"ProductProcessorFactoryKeeper::::getProductProcessorFactory()"},{"test_lines":[50,59],"covered_lines":[32,33,45,46,52,53,61],"label":"ProductProcessorFactoryKeeper::::restoreDefaultProductProcessorFactory()"}]},"/bernard/dataset_construction/prep/repos/itext-java/commons/src/main/java/com/itextpdf/commons/actions/processors/UnderAgplITextProductEventProcessor.java":{"class_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.actions.processors;\n","\n","import com.itextpdf.commons.actions.AbstractProductProcessITextEvent;\n","\n","/**\n"," * The class defines an under APGL strategy of product event processing.\n"," */\n","public class UnderAgplITextProductEventProcessor extends AbstractITextProductEventProcessor{\n","    /**\n","     * Creates a new instance of under AGPL processor for the provided product.\n","     *\n","     * @param productName the product which will be handled by this processor\n","     */\n","    public UnderAgplITextProductEventProcessor(String productName) {\n","        super(productName);\n","    }\n","\n","    @Override\n","    public void onEvent(AbstractProductProcessITextEvent event) {\n","        // do nothing\n","    }\n","\n","    @Override\n","    public String getUsageType() {\n","        return \"AGPL\";\n","    }\n","}\n"],"test_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.actions.processors;\n","\n","import com.itextpdf.commons.actions.ProductNameConstant;\n","import com.itextpdf.commons.actions.confirmations.ConfirmEvent;\n","import com.itextpdf.commons.actions.data.CommonsProductData;\n","import com.itextpdf.commons.actions.sequence.SequenceId;\n","import com.itextpdf.commons.ecosystem.ITextTestEvent;\n","import com.itextpdf.test.AssertUtil;\n","import com.itextpdf.test.ExtendedITextTest;\n","import com.itextpdf.test.annotations.type.UnitTest;\n","\n","import org.junit.Test;\n","import org.junit.experimental.categories.Category;\n","\n","@Category(UnitTest.class)\n","public class UnderAgplITextProductEventProcessorTest extends ExtendedITextTest {\n","\n","    @Test\n","    public void messageIsNotLoggedTest() {\n","        UnderAgplITextProductEventProcessor testProcessor = new UnderAgplITextProductEventProcessor(ProductNameConstant.ITEXT_CORE);\n","        ITextTestEvent e = new ITextTestEvent(new SequenceId(), CommonsProductData.getInstance(), null, \"test event\");\n","        AssertUtil.doesNotThrow(() -> testProcessor.onEvent(new ConfirmEvent(e)));\n","    }\n","}\n"],"method_lines_dic":{"UnderAgplITextProductEventProcessor::::onEvent(com.itextpdf.commons.actions.AbstractProductProcessITextEvent)":[40,43],"UnderAgplITextProductEventProcessor::::getUsageType()":[45,48]},"test_method_lines_dic":{"UnderAgplITextProductEventProcessorTest::::messageIsNotLoggedTest()":[40,45]},"reverse_method_lines_dic":{"40":"UnderAgplITextProductEventProcessor::::onEvent(com.itextpdf.commons.actions.AbstractProductProcessITextEvent)","41":"UnderAgplITextProductEventProcessor::::onEvent(com.itextpdf.commons.actions.AbstractProductProcessITextEvent)","42":"UnderAgplITextProductEventProcessor::::onEvent(com.itextpdf.commons.actions.AbstractProductProcessITextEvent)","43":"UnderAgplITextProductEventProcessor::::onEvent(com.itextpdf.commons.actions.AbstractProductProcessITextEvent)","45":"UnderAgplITextProductEventProcessor::::getUsageType()","46":"UnderAgplITextProductEventProcessor::::getUsageType()","47":"UnderAgplITextProductEventProcessor::::getUsageType()","48":"UnderAgplITextProductEventProcessor::::getUsageType()"},"test_reverse_method_lines_dic":{"40":"UnderAgplITextProductEventProcessorTest::::messageIsNotLoggedTest()","41":"UnderAgplITextProductEventProcessorTest::::messageIsNotLoggedTest()","42":"UnderAgplITextProductEventProcessorTest::::messageIsNotLoggedTest()","43":"UnderAgplITextProductEventProcessorTest::::messageIsNotLoggedTest()","44":"UnderAgplITextProductEventProcessorTest::::messageIsNotLoggedTest()","45":"UnderAgplITextProductEventProcessorTest::::messageIsNotLoggedTest()"},"tests":[{"test_lines":[40,45],"covered_lines":[37,38,43],"label":"<<NO FOCAL METHOD>>"}]},"/bernard/dataset_construction/prep/repos/itext-java/commons/src/main/java/com/itextpdf/commons/actions/processors/UnderAgplProductProcessorFactory.java":{"class_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.actions.processors;\n","\n","/**\n"," * Factory class to construct {@link ITextProductEventProcessor} instance under AGPL license.\n"," */\n","public class UnderAgplProductProcessorFactory implements IProductProcessorFactory {\n","\n","    /**\n","     * Creates under AGPL product processor using a product name.\n","     *\n","     * @param productName the product which will be handled by this processor\n","     *\n","     * @return current {@link ITextProductEventProcessor} instance\n","     */\n","    @Override\n","    public ITextProductEventProcessor createProcessor(String productName) {\n","        return new UnderAgplITextProductEventProcessor(productName);\n","    }\n","}\n"],"test_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.actions.processors;\n","\n","import com.itextpdf.commons.actions.ProductNameConstant;\n","import com.itextpdf.test.ExtendedITextTest;\n","import com.itextpdf.test.annotations.type.UnitTest;\n","\n","import org.junit.Assert;\n","import org.junit.Test;\n","import org.junit.experimental.categories.Category;\n","\n","@Category(UnitTest.class)\n","public class UnderAgplProductProcessorFactoryTest extends ExtendedITextTest {\n","\n","    @Test\n","    public void createUnderAgplProductProcessor() {\n","        UnderAgplProductProcessorFactory underAgplProductProcessorFactory = new UnderAgplProductProcessorFactory();\n","        ITextProductEventProcessor processor = underAgplProductProcessorFactory.createProcessor(ProductNameConstant.ITEXT_CORE);\n","        Assert.assertNotNull(processor);\n","        Assert.assertTrue(processor instanceof UnderAgplITextProductEventProcessor);\n","    }\n","}\n"],"method_lines_dic":{"UnderAgplProductProcessorFactory::::createProcessor(java.lang.String)":[37,40]},"test_method_lines_dic":{"UnderAgplProductProcessorFactoryTest::::createUnderAgplProductProcessor()":[36,42]},"reverse_method_lines_dic":{"37":"UnderAgplProductProcessorFactory::::createProcessor(java.lang.String)","38":"UnderAgplProductProcessorFactory::::createProcessor(java.lang.String)","39":"UnderAgplProductProcessorFactory::::createProcessor(java.lang.String)","40":"UnderAgplProductProcessorFactory::::createProcessor(java.lang.String)"},"test_reverse_method_lines_dic":{"36":"UnderAgplProductProcessorFactoryTest::::createUnderAgplProductProcessor()","37":"UnderAgplProductProcessorFactoryTest::::createUnderAgplProductProcessor()","38":"UnderAgplProductProcessorFactoryTest::::createUnderAgplProductProcessor()","39":"UnderAgplProductProcessorFactoryTest::::createUnderAgplProductProcessor()","40":"UnderAgplProductProcessorFactoryTest::::createUnderAgplProductProcessor()","41":"UnderAgplProductProcessorFactoryTest::::createUnderAgplProductProcessor()","42":"UnderAgplProductProcessorFactoryTest::::createUnderAgplProductProcessor()"},"tests":[{"test_lines":[36,42],"covered_lines":[28,39],"label":"UnderAgplProductProcessorFactory::::createProcessor(java.lang.String)"}]},"/bernard/dataset_construction/prep/repos/itext-java/commons/src/main/java/com/itextpdf/commons/actions/processors/DefaultProductProcessorFactory.java":{"class_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.actions.processors;\n","\n","/**\n"," * Default factory class to construct {@link ITextProductEventProcessor} instance.\n"," */\n","public class DefaultProductProcessorFactory implements IProductProcessorFactory {\n","\n","    /**\n","     * Creates default product processor using a product name.\n","     *\n","     * @param productName the product which will be handled by this processor\n","     *\n","     * @return current {@link ITextProductEventProcessor} instance\n","     */\n","    @Override\n","    public ITextProductEventProcessor createProcessor(String productName) {\n","        return new DefaultITextProductEventProcessor(productName);\n","    }\n","}\n"],"test_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.actions.processors;\n","\n","import com.itextpdf.commons.actions.ProductNameConstant;\n","import com.itextpdf.test.ExtendedITextTest;\n","import com.itextpdf.test.annotations.type.UnitTest;\n","\n","import org.junit.Assert;\n","import org.junit.Test;\n","import org.junit.experimental.categories.Category;\n","\n","@Category(UnitTest.class)\n","public class DefaultProductProcessorFactoryTest extends ExtendedITextTest {\n","\n","    @Test\n","    public void createDefaultProductProcessor() {\n","        DefaultProductProcessorFactory defaultProductProcessorFactory = new DefaultProductProcessorFactory();\n","        ITextProductEventProcessor processor = defaultProductProcessorFactory.createProcessor(ProductNameConstant.ITEXT_CORE);\n","        Assert.assertNotNull(processor);\n","        Assert.assertTrue(processor instanceof DefaultITextProductEventProcessor);\n","    }\n","}\n"],"method_lines_dic":{"DefaultProductProcessorFactory::::createProcessor(java.lang.String)":[37,40]},"test_method_lines_dic":{"DefaultProductProcessorFactoryTest::::createDefaultProductProcessor()":[36,42]},"reverse_method_lines_dic":{"37":"DefaultProductProcessorFactory::::createProcessor(java.lang.String)","38":"DefaultProductProcessorFactory::::createProcessor(java.lang.String)","39":"DefaultProductProcessorFactory::::createProcessor(java.lang.String)","40":"DefaultProductProcessorFactory::::createProcessor(java.lang.String)"},"test_reverse_method_lines_dic":{"36":"DefaultProductProcessorFactoryTest::::createDefaultProductProcessor()","37":"DefaultProductProcessorFactoryTest::::createDefaultProductProcessor()","38":"DefaultProductProcessorFactoryTest::::createDefaultProductProcessor()","39":"DefaultProductProcessorFactoryTest::::createDefaultProductProcessor()","40":"DefaultProductProcessorFactoryTest::::createDefaultProductProcessor()","41":"DefaultProductProcessorFactoryTest::::createDefaultProductProcessor()","42":"DefaultProductProcessorFactoryTest::::createDefaultProductProcessor()"},"tests":[{"test_lines":[36,42],"covered_lines":[28,39],"label":"DefaultProductProcessorFactory::::createProcessor(java.lang.String)"}]},"/bernard/dataset_construction/prep/repos/itext-java/commons/src/main/java/com/itextpdf/commons/actions/processors/DefaultITextProductEventProcessor.java":{"class_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.actions.processors;\n","\n","import com.itextpdf.commons.actions.AbstractProductProcessITextEvent;\n","import com.itextpdf.commons.actions.confirmations.ConfirmEvent;\n","import com.itextpdf.commons.utils.Base64;\n","\n","import java.nio.charset.StandardCharsets;\n","import java.util.concurrent.atomic.AtomicLong;\n","import org.slf4j.Logger;\n","import org.slf4j.LoggerFactory;\n","\n","/**\n"," * Defines a default strategy of product event processing.\n"," */\n","public class DefaultITextProductEventProcessor extends AbstractITextProductEventProcessor {\n","\n","    static final byte[] MESSAGE_FOR_LOGGING = Base64\n","            .decode(\"WW91IGFyZSB1c2luZyBpVGV4dCB1bmRlciB0aGUgQUdQTC4KCklmIHRoaXMgaXMgeW9\" +\n","                       \"1ciBpbnRlbnRpb24sIHlvdSBoYXZlIHB1Ymxpc2hlZCB5b3VyIG93biBzb3VyY2UgY2\" +\n","                       \"9kZSBhcyBBR1BMIHNvZnR3YXJlIHRvby4KUGxlYXNlIGxldCB1cyBrbm93IHdoZXJlI\" +\n","                       \"HRvIGZpbmQgeW91ciBzb3VyY2UgY29kZSBieSBzZW5kaW5nIGEgbWFpbCB0byBhZ3Bs\" +\n","                       \"QGFwcnlzZS5jb20KV2UnZCBiZSBob25vcmVkIHRvIGFkZCBpdCB0byBvdXIgbGlzdCB\" +\n","                       \"vZiBBR1BMIHByb2plY3RzIGJ1aWx0IG9uIHRvcCBvZiBpVGV4dAphbmQgd2UnbGwgZX\" +\n","                       \"hwbGFpbiBob3cgdG8gcmVtb3ZlIHRoaXMgbWVzc2FnZSBmcm9tIHlvdXIgZXJyb3Igb\" +\n","                       \"G9ncy4KCklmIHRoaXMgd2Fzbid0IHlvdXIgaW50ZW50aW9uLCB5b3UgYXJlIHByb2Jh\" +\n","                       \"Ymx5IHVzaW5nIGlUZXh0IGluIGEgbm9uLWZyZWUgZW52aXJvbm1lbnQuCkluIHRoaXM\" +\n","                       \"gY2FzZSwgcGxlYXNlIGNvbnRhY3QgdXMgYnkgZmlsbGluZyBvdXQgdGhpcyBmb3JtOi\" +\n","                       \"BodHRwOi8vaXRleHRwZGYuY29tL3NhbGVzCklmIHlvdSBhcmUgYSBjdXN0b21lciwgd\" +\n","                       \"2UnbGwgZXhwbGFpbiBob3cgdG8gaW5zdGFsbCB5b3VyIGxpY2Vuc2Uga2V5IHRvIGF2\" +\n","                       \"b2lkIHRoaXMgbWVzc2FnZS4KSWYgeW91J3JlIG5vdCBhIGN1c3RvbWVyLCB3ZSdsbCB\" +\n","                       \"leHBsYWluIHRoZSBiZW5lZml0cyBvZiBiZWNvbWluZyBhIGN1c3RvbWVyLg==\");\n","\n","    private static final Logger LOGGER = LoggerFactory.getLogger(DefaultITextProductEventProcessor.class);\n","\n","    private static final long[] REPEAT = {10000L, 5000L, 1000L};\n","\n","    private static final int MAX_LVL = REPEAT.length - 1;\n","\n","    private final Object lock = new Object();\n","\n","    private final AtomicLong counter = new AtomicLong(0);\n","\n","    private final AtomicLong level = new AtomicLong(0);\n","\n","    private final AtomicLong repeatLevel;\n","\n","    /**\n","     * Creates an instance of product event processor.\n","     *\n","     * @param productName is a product name\n","     */\n","    public DefaultITextProductEventProcessor(String productName) {\n","        super(productName);\n","        repeatLevel = new AtomicLong(acquireRepeatLevel((int) level.get()));\n","    }\n","\n","    @Override\n","    public void onEvent(AbstractProductProcessITextEvent event) {\n","        if (!(event instanceof ConfirmEvent)) {\n","            return;\n","        }\n","        boolean isNeededToLogMessage = false;\n","        synchronized (lock) {\n","            if (counter.incrementAndGet() > repeatLevel.get()) {\n","                counter.set(0);\n","                if (level.incrementAndGet() > MAX_LVL) {\n","                    level.set(MAX_LVL);\n","                }\n","                repeatLevel.set(acquireRepeatLevel((int) level.get()));\n","                isNeededToLogMessage = true;\n","            }\n","        }\n","\n","        if (isNeededToLogMessage) {\n","            String message = new String(MESSAGE_FOR_LOGGING, StandardCharsets.ISO_8859_1);\n","            LOGGER.info(message);\n","            // System out added with purpose. This is not a debug code\n","            System.out.println(message);\n","        }\n","    }\n","\n","    @Override\n","    public String getUsageType() {\n","        return \"AGPL\";\n","    }\n","\n","    long acquireRepeatLevel(int lvl) {\n","        return REPEAT[lvl];\n","    }\n","}\n"],"test_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.actions.processors;\n","\n","import com.itextpdf.commons.actions.confirmations.ConfirmEvent;\n","import com.itextpdf.commons.actions.data.CommonsProductData;\n","import com.itextpdf.commons.actions.sequence.SequenceId;\n","import com.itextpdf.commons.ecosystem.ITextTestEvent;\n","import com.itextpdf.commons.exceptions.CommonsExceptionMessageConstant;\n","import com.itextpdf.test.AssertUtil;\n","import com.itextpdf.test.ExtendedITextTest;\n","import com.itextpdf.test.LogLevelConstants;\n","import com.itextpdf.test.annotations.LogMessage;\n","import com.itextpdf.test.annotations.LogMessages;\n","import com.itextpdf.test.annotations.type.UnitTest;\n","\n","import org.junit.Assert;\n","import org.junit.Test;\n","import org.junit.experimental.categories.Category;\n","\n","@Category(UnitTest.class)\n","public class DefaultITextProductEventProcessorTest extends ExtendedITextTest {\n","\n","    @Test\n","    public void constructorWithNullProductNameTest() {\n","        Exception e =\n","                Assert.assertThrows(IllegalArgumentException.class, () -> new DefaultITextProductEventProcessor(null));\n","        Assert.assertEquals(CommonsExceptionMessageConstant.PRODUCT_NAME_CAN_NOT_BE_NULL, e.getMessage());\n","    }\n","\n","    @Test\n","    @LogMessages(messages = @LogMessage(messageTemplate = \"{0} you are probably {1}\", logLevel = LogLevelConstants.INFO))\n","    public void messageIsLoggedTest() {\n","        TestDefaultITextProductEventProcessor testProcessor = new TestDefaultITextProductEventProcessor();\n","        ITextTestEvent e = new ITextTestEvent(new SequenceId(), CommonsProductData.getInstance(), null, \"test event\");\n","        AssertUtil.doesNotThrow(() -> testProcessor.onEvent(new ConfirmEvent(e)));\n","    }\n","\n","    @Test\n","    @LogMessages(messages =\n","        @LogMessage(messageTemplate = \"{0} you are probably {1}\", logLevel = LogLevelConstants.INFO, count = 4)\n","    )\n","    public void messageIsLoggedThreeTimesTest() {\n","        int iterationsNumber = 15;\n","        // \"1\" correspond to expected iterations with log messages:\n","        // 1 0 0 0 0\n","        // 0 1 0 0 0\n","        // 1 0 0 0 1\n","        TestDefaultITextProductEventProcessor testProcessor = new TestDefaultITextProductEventProcessor();\n","        ITextTestEvent e = new ITextTestEvent(new SequenceId(), CommonsProductData.getInstance(), null, \"test event\");\n","        for (int i = 0; i < iterationsNumber; ++i) {\n","            AssertUtil.doesNotThrow(() -> testProcessor.onEvent(new ConfirmEvent(e)));\n","        }\n","    }\n","\n","    private static class TestDefaultITextProductEventProcessor extends DefaultITextProductEventProcessor {\n","\n","        public TestDefaultITextProductEventProcessor() {\n","            super(\"test product\");\n","        }\n","\n","        @Override\n","        long acquireRepeatLevel(int lvl) {\n","            switch (lvl) {\n","                case 0:\n","                    return 0;\n","                case 1:\n","                    return 5;\n","                case 2:\n","                    return 3;\n","            }\n","            return 0;\n","        }\n","    }\n","}\n"],"method_lines_dic":{"DefaultITextProductEventProcessor::::onEvent(com.itextpdf.commons.actions.AbstractProductProcessITextEvent)":[79,102],"DefaultITextProductEventProcessor::::getUsageType()":[104,107],"DefaultITextProductEventProcessor::::acquireRepeatLevel(int)":[109,111]},"test_method_lines_dic":{"DefaultITextProductEventProcessorTest::::constructorWithNullProductNameTest()":[44,49],"DefaultITextProductEventProcessorTest::::messageIsLoggedTest()":[51,57],"DefaultITextProductEventProcessorTest::::messageIsLoggedThreeTimesTest()":[59,74],"DefaultITextProductEventProcessorTest.TestDefaultITextProductEventProcessor::::acquireRepeatLevel(int)":[82,93]},"reverse_method_lines_dic":{"79":"DefaultITextProductEventProcessor::::onEvent(com.itextpdf.commons.actions.AbstractProductProcessITextEvent)","80":"DefaultITextProductEventProcessor::::onEvent(com.itextpdf.commons.actions.AbstractProductProcessITextEvent)","81":"DefaultITextProductEventProcessor::::onEvent(com.itextpdf.commons.actions.AbstractProductProcessITextEvent)","82":"DefaultITextProductEventProcessor::::onEvent(com.itextpdf.commons.actions.AbstractProductProcessITextEvent)","83":"DefaultITextProductEventProcessor::::onEvent(com.itextpdf.commons.actions.AbstractProductProcessITextEvent)","84":"DefaultITextProductEventProcessor::::onEvent(com.itextpdf.commons.actions.AbstractProductProcessITextEvent)","85":"DefaultITextProductEventProcessor::::onEvent(com.itextpdf.commons.actions.AbstractProductProcessITextEvent)","86":"DefaultITextProductEventProcessor::::onEvent(com.itextpdf.commons.actions.AbstractProductProcessITextEvent)","87":"DefaultITextProductEventProcessor::::onEvent(com.itextpdf.commons.actions.AbstractProductProcessITextEvent)","88":"DefaultITextProductEventProcessor::::onEvent(com.itextpdf.commons.actions.AbstractProductProcessITextEvent)","89":"DefaultITextProductEventProcessor::::onEvent(com.itextpdf.commons.actions.AbstractProductProcessITextEvent)","90":"DefaultITextProductEventProcessor::::onEvent(com.itextpdf.commons.actions.AbstractProductProcessITextEvent)","91":"DefaultITextProductEventProcessor::::onEvent(com.itextpdf.commons.actions.AbstractProductProcessITextEvent)","92":"DefaultITextProductEventProcessor::::onEvent(com.itextpdf.commons.actions.AbstractProductProcessITextEvent)","93":"DefaultITextProductEventProcessor::::onEvent(com.itextpdf.commons.actions.AbstractProductProcessITextEvent)","94":"DefaultITextProductEventProcessor::::onEvent(com.itextpdf.commons.actions.AbstractProductProcessITextEvent)","95":"DefaultITextProductEventProcessor::::onEvent(com.itextpdf.commons.actions.AbstractProductProcessITextEvent)","96":"DefaultITextProductEventProcessor::::onEvent(com.itextpdf.commons.actions.AbstractProductProcessITextEvent)","97":"DefaultITextProductEventProcessor::::onEvent(com.itextpdf.commons.actions.AbstractProductProcessITextEvent)","98":"DefaultITextProductEventProcessor::::onEvent(com.itextpdf.commons.actions.AbstractProductProcessITextEvent)","99":"DefaultITextProductEventProcessor::::onEvent(com.itextpdf.commons.actions.AbstractProductProcessITextEvent)","100":"DefaultITextProductEventProcessor::::onEvent(com.itextpdf.commons.actions.AbstractProductProcessITextEvent)","101":"DefaultITextProductEventProcessor::::onEvent(com.itextpdf.commons.actions.AbstractProductProcessITextEvent)","102":"DefaultITextProductEventProcessor::::onEvent(com.itextpdf.commons.actions.AbstractProductProcessITextEvent)","104":"DefaultITextProductEventProcessor::::getUsageType()","105":"DefaultITextProductEventProcessor::::getUsageType()","106":"DefaultITextProductEventProcessor::::getUsageType()","107":"DefaultITextProductEventProcessor::::getUsageType()","109":"DefaultITextProductEventProcessor::::acquireRepeatLevel(int)","110":"DefaultITextProductEventProcessor::::acquireRepeatLevel(int)","111":"DefaultITextProductEventProcessor::::acquireRepeatLevel(int)"},"test_reverse_method_lines_dic":{"44":"DefaultITextProductEventProcessorTest::::constructorWithNullProductNameTest()","45":"DefaultITextProductEventProcessorTest::::constructorWithNullProductNameTest()","46":"DefaultITextProductEventProcessorTest::::constructorWithNullProductNameTest()","47":"DefaultITextProductEventProcessorTest::::constructorWithNullProductNameTest()","48":"DefaultITextProductEventProcessorTest::::constructorWithNullProductNameTest()","49":"DefaultITextProductEventProcessorTest::::constructorWithNullProductNameTest()","51":"DefaultITextProductEventProcessorTest::::messageIsLoggedTest()","52":"DefaultITextProductEventProcessorTest::::messageIsLoggedTest()","53":"DefaultITextProductEventProcessorTest::::messageIsLoggedTest()","54":"DefaultITextProductEventProcessorTest::::messageIsLoggedTest()","55":"DefaultITextProductEventProcessorTest::::messageIsLoggedTest()","56":"DefaultITextProductEventProcessorTest::::messageIsLoggedTest()","57":"DefaultITextProductEventProcessorTest::::messageIsLoggedTest()","59":"DefaultITextProductEventProcessorTest::::messageIsLoggedThreeTimesTest()","60":"DefaultITextProductEventProcessorTest::::messageIsLoggedThreeTimesTest()","61":"DefaultITextProductEventProcessorTest::::messageIsLoggedThreeTimesTest()","62":"DefaultITextProductEventProcessorTest::::messageIsLoggedThreeTimesTest()","63":"DefaultITextProductEventProcessorTest::::messageIsLoggedThreeTimesTest()","64":"DefaultITextProductEventProcessorTest::::messageIsLoggedThreeTimesTest()","65":"DefaultITextProductEventProcessorTest::::messageIsLoggedThreeTimesTest()","66":"DefaultITextProductEventProcessorTest::::messageIsLoggedThreeTimesTest()","67":"DefaultITextProductEventProcessorTest::::messageIsLoggedThreeTimesTest()","68":"DefaultITextProductEventProcessorTest::::messageIsLoggedThreeTimesTest()","69":"DefaultITextProductEventProcessorTest::::messageIsLoggedThreeTimesTest()","70":"DefaultITextProductEventProcessorTest::::messageIsLoggedThreeTimesTest()","71":"DefaultITextProductEventProcessorTest::::messageIsLoggedThreeTimesTest()","72":"DefaultITextProductEventProcessorTest::::messageIsLoggedThreeTimesTest()","73":"DefaultITextProductEventProcessorTest::::messageIsLoggedThreeTimesTest()","74":"DefaultITextProductEventProcessorTest::::messageIsLoggedThreeTimesTest()","82":"DefaultITextProductEventProcessorTest.TestDefaultITextProductEventProcessor::::acquireRepeatLevel(int)","83":"DefaultITextProductEventProcessorTest.TestDefaultITextProductEventProcessor::::acquireRepeatLevel(int)","84":"DefaultITextProductEventProcessorTest.TestDefaultITextProductEventProcessor::::acquireRepeatLevel(int)","85":"DefaultITextProductEventProcessorTest.TestDefaultITextProductEventProcessor::::acquireRepeatLevel(int)","86":"DefaultITextProductEventProcessorTest.TestDefaultITextProductEventProcessor::::acquireRepeatLevel(int)","87":"DefaultITextProductEventProcessorTest.TestDefaultITextProductEventProcessor::::acquireRepeatLevel(int)","88":"DefaultITextProductEventProcessorTest.TestDefaultITextProductEventProcessor::::acquireRepeatLevel(int)","89":"DefaultITextProductEventProcessorTest.TestDefaultITextProductEventProcessor::::acquireRepeatLevel(int)","90":"DefaultITextProductEventProcessorTest.TestDefaultITextProductEventProcessor::::acquireRepeatLevel(int)","91":"DefaultITextProductEventProcessorTest.TestDefaultITextProductEventProcessor::::acquireRepeatLevel(int)","92":"DefaultITextProductEventProcessorTest.TestDefaultITextProductEventProcessor::::acquireRepeatLevel(int)","93":"DefaultITextProductEventProcessorTest.TestDefaultITextProductEventProcessor::::acquireRepeatLevel(int)"},"tests":[{"test_lines":[44,49],"covered_lines":[39,40,55,57,59],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[51,57],"covered_lines":[39,40,55,57,59,61,63,65,75,76,77,81,84,85,86,87,88,91,92,94,96,97,98,100,102],"label":"DefaultITextProductEventProcessor::::onEvent(com.itextpdf.commons.actions.AbstractProductProcessITextEvent)"},{"test_lines":[59,74],"covered_lines":[39,40,55,57,59,61,63,65,75,76,77,81,84,85,86,87,88,89,91,92,94,96,97,98,100,102],"label":"DefaultITextProductEventProcessor::::onEvent(com.itextpdf.commons.actions.AbstractProductProcessITextEvent)"}]},"/bernard/dataset_construction/prep/repos/itext-java/commons/src/main/java/com/itextpdf/commons/actions/data/CommonsProductData.java":{"class_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.actions.data;\n","\n","/**\n"," * Stores an instance of {@link ProductData} related to iText commons module.\n"," */\n","public final class CommonsProductData {\n","    static final String COMMONS_PUBLIC_PRODUCT_NAME = \"Commons\";\n","    static final String COMMONS_PRODUCT_NAME = \"commons\";\n","    static final String COMMONS_VERSION = \"8.0.5-SNAPSHOT\";\n","    static final String MINIMAL_COMPATIBLE_LICENSEKEY_VERSION = \"4.1.0\";\n","    static final int COMMONS_COPYRIGHT_SINCE = 2000;\n","    static final int COMMONS_COPYRIGHT_TO = 2024;\n","\n","    private static final ProductData COMMONS_PRODUCT_DATA = new ProductData(COMMONS_PUBLIC_PRODUCT_NAME,\n","            COMMONS_PRODUCT_NAME, COMMONS_VERSION, MINIMAL_COMPATIBLE_LICENSEKEY_VERSION, COMMONS_COPYRIGHT_SINCE,\n","            COMMONS_COPYRIGHT_TO);\n","\n","    private CommonsProductData() {\n","        // Empty constructor for util class\n","    }\n","\n","    /**\n","     * Getter for an instance of {@link ProductData} related to iText commons module.\n","     *\n","     * @return iText commons product description\n","     */\n","    public static ProductData getInstance() {\n","        return COMMONS_PRODUCT_DATA;\n","    }\n","}\n"],"test_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.actions.data;\n","\n","import com.itextpdf.test.ExtendedITextTest;\n","import com.itextpdf.test.annotations.type.UnitTest;\n","\n","import org.junit.Assert;\n","import org.junit.Test;\n","import org.junit.experimental.categories.Category;\n","\n","@Category(UnitTest.class)\n","public class CommonsProductDataTest extends ExtendedITextTest {\n","    @Test\n","    public void getInstanceTest() {\n","        ProductData commonsProductData = CommonsProductData.getInstance();\n","\n","        Assert.assertEquals(CommonsProductData.COMMONS_PUBLIC_PRODUCT_NAME, commonsProductData.getPublicProductName());\n","        Assert.assertEquals(CommonsProductData.COMMONS_PRODUCT_NAME, commonsProductData.getProductName());\n","        Assert.assertEquals(CommonsProductData.COMMONS_VERSION, commonsProductData.getVersion());\n","        Assert.assertEquals(CommonsProductData.MINIMAL_COMPATIBLE_LICENSEKEY_VERSION,\n","                commonsProductData.getMinCompatibleLicensingModuleVersion());\n","        Assert.assertEquals(CommonsProductData.COMMONS_COPYRIGHT_SINCE, commonsProductData.getSinceCopyrightYear());\n","        Assert.assertEquals(CommonsProductData.COMMONS_COPYRIGHT_TO, commonsProductData.getToCopyrightYear());\n","    }\n","}\n"],"method_lines_dic":{"CommonsProductData::::getInstance()":[49,51]},"test_method_lines_dic":{"CommonsProductDataTest::::getInstanceTest()":[34,45]},"reverse_method_lines_dic":{"49":"CommonsProductData::::getInstance()","50":"CommonsProductData::::getInstance()","51":"CommonsProductData::::getInstance()"},"test_reverse_method_lines_dic":{"34":"CommonsProductDataTest::::getInstanceTest()","35":"CommonsProductDataTest::::getInstanceTest()","36":"CommonsProductDataTest::::getInstanceTest()","37":"CommonsProductDataTest::::getInstanceTest()","38":"CommonsProductDataTest::::getInstanceTest()","39":"CommonsProductDataTest::::getInstanceTest()","40":"CommonsProductDataTest::::getInstanceTest()","41":"CommonsProductDataTest::::getInstanceTest()","42":"CommonsProductDataTest::::getInstanceTest()","43":"CommonsProductDataTest::::getInstanceTest()","44":"CommonsProductDataTest::::getInstanceTest()","45":"CommonsProductDataTest::::getInstanceTest()"},"tests":[{"test_lines":[34,45],"covered_lines":[36,50],"label":"CommonsProductData::::getInstance()"}]},"/bernard/dataset_construction/prep/repos/itext-java/commons/src/main/java/com/itextpdf/commons/actions/data/ProductData.java":{"class_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.actions.data;\n","\n","import java.util.Objects;\n","\n","/**\n"," * Class is used to describe used product information.\n"," */\n","public final class ProductData {\n","    private final String publicProductName;\n","    private final String productName;\n","    private final String version;\n","    private final String minimalCompatibleLicenseKeyVersion;\n","    private final int sinceCopyrightYear;\n","    private final int toCopyrightYear;\n","\n","    /**\n","     * Creates a new instance of product data.\n","     *\n","     * @param publicProductName is a product name\n","     * @param productName is a technical name of the product\n","     * @param version is a version of the product\n","     * @param sinceCopyrightYear is the first year of a product development\n","     * @param toCopyrightYear is a last year of a product development\n","     */\n","    public ProductData(String publicProductName, String productName, String version, int sinceCopyrightYear,\n","            int toCopyrightYear) {\n","        this(publicProductName, productName, version, null, sinceCopyrightYear, toCopyrightYear);\n","    }\n","\n","    /**\n","     * Creates a new instance of product data.\n","     *\n","     * @param publicProductName is a product name\n","     * @param productName is a technical name of the product\n","     * @param version is a version of the product\n","     * @param minimalCompatibleLicenseKeyVersion is a minimal compatible version of licensekey library\n","     * @param sinceCopyrightYear is the first year of a product development\n","     * @param toCopyrightYear is a last year of a product development\n","     */\n","    public ProductData(String publicProductName, String productName, String version,\n","            String minimalCompatibleLicenseKeyVersion, int sinceCopyrightYear, int toCopyrightYear) {\n","        this.publicProductName = publicProductName;\n","        this.productName = productName;\n","        this.version = version;\n","        this.minimalCompatibleLicenseKeyVersion = minimalCompatibleLicenseKeyVersion;\n","        this.sinceCopyrightYear = sinceCopyrightYear;\n","        this.toCopyrightYear = toCopyrightYear;\n","    }\n","\n","    /**\n","     * Getter for a product name.\n","     *\n","     * @return product name\n","     */\n","    public String getPublicProductName() {\n","        return publicProductName;\n","    }\n","\n","    /**\n","     * Getter for a technical name of the product.\n","     *\n","     * @return the technical name of the product\n","     */\n","    public String getProductName() {\n","        return productName;\n","    }\n","\n","    /**\n","     * Getter for a version of the product.\n","     *\n","     * @return version of the product\n","     */\n","    public String getVersion() {\n","        return version;\n","    }\n","\n","    /**\n","     * Getter for the first year of copyright period.\n","     *\n","     * @return the first year of copyright\n","     */\n","    public int getSinceCopyrightYear() {\n","        return sinceCopyrightYear;\n","    }\n","\n","    /**\n","     * Getter for the last year of copyright period.\n","     *\n","     * @return the last year of copyright\n","     */\n","    public int getToCopyrightYear() {\n","        return toCopyrightYear;\n","    }\n","\n","    /**\n","     * Getter for the minimal compatible licensekey version.\n","     *\n","     * @return minimal compatible version of licensekey library.\n","     */\n","    public String getMinCompatibleLicensingModuleVersion() {\n","        return minimalCompatibleLicenseKeyVersion;\n","    }\n","\n","    @Override\n","    public boolean equals(Object o) {\n","        if (this == o) {\n","            return true;\n","        }\n","\n","        if (o == null || getClass() != o.getClass()) {\n","            return false;\n","        }\n","\n","        final ProductData other = (ProductData) o;\n","        return Objects.equals(publicProductName, other.publicProductName) && Objects\n","                .equals(productName, other.productName) &&\n","                Objects.equals(version, other.version) && sinceCopyrightYear == other.sinceCopyrightYear\n","                && toCopyrightYear == other.toCopyrightYear;\n","    }\n","\n","    @Override\n","    public int hashCode() {\n","        int result = publicProductName != null ? publicProductName.hashCode() : 0;\n","        result += 31 * result + (productName != null ? productName.hashCode() : 0);\n","        result += 31 * result + (version != null ? version.hashCode() : 0);\n","        result += 31 * result + sinceCopyrightYear;\n","        result += 31 * result + toCopyrightYear;\n","        return result;\n","    }\n","}\n"],"test_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.actions.data;\n","\n","import com.itextpdf.test.ExtendedITextTest;\n","import com.itextpdf.test.annotations.type.UnitTest;\n","\n","import org.junit.Assert;\n","import org.junit.Test;\n","import org.junit.experimental.categories.Category;\n","\n","@Category(UnitTest.class)\n","public class ProductDataTest extends ExtendedITextTest {\n","    @Test\n","    public void productDataCreationTest() {\n","        ProductData productData = new ProductData(\"publicProductName\", \"productName\", \"1.2\", 1900, 2100);\n","\n","        Assert.assertEquals(\"publicProductName\", productData.getPublicProductName());\n","        Assert.assertEquals(\"productName\", productData.getProductName());\n","        Assert.assertEquals(\"1.2\", productData.getVersion());\n","        Assert.assertEquals(1900, productData.getSinceCopyrightYear());\n","        Assert.assertEquals(2100, productData.getToCopyrightYear());\n","    }\n","\n","    @Test\n","    public void productDataAnotherCreationTest() {\n","        ProductData productData = new ProductData(\"publicProductName\", \"productName\", \"1.2\", \"4.0.0\", 1900, 2100);\n","\n","        Assert.assertEquals(\"publicProductName\", productData.getPublicProductName());\n","        Assert.assertEquals(\"productName\", productData.getProductName());\n","        Assert.assertEquals(\"1.2\", productData.getVersion());\n","        Assert.assertEquals(\"4.0.0\", productData.getMinCompatibleLicensingModuleVersion());\n","        Assert.assertEquals(1900, productData.getSinceCopyrightYear());\n","        Assert.assertEquals(2100, productData.getToCopyrightYear());\n","    }\n","\n","    @Test\n","    public void equalsTest() {\n","        ProductData a = new ProductData(\"publicProductName\", \"productName\", \"1.2\", 1900, 2100);\n","        ProductData b = new ProductData(\"publicProductName\", \"productName\", \"1.2\", 1900, 2100);\n","\n","        Assert.assertEquals(a, a);\n","\n","        Assert.assertEquals(a, b);\n","        Assert.assertEquals(b, a);\n","    }\n","\n","    @Test\n","    public void notEqualsTest() {\n","        ProductData a = new ProductData(\"publicProductName\", \"productName\", \"1.2\", 1900, 2100);\n","        ProductData d = new ProductData(\"publicProductName\", \"productName\", \"1.2\", 1910, 2110);\n","\n","        Assert.assertNotEquals(a, d);\n","    }\n","\n","    @Test\n","    public void hashCodeTest() {\n","        ProductData a = new ProductData(\"publicProductName\", \"productName\", \"1.2\", 1900, 2100);\n","        ProductData b = new ProductData(\"publicProductName\", \"productName\", \"1.2\", 1900, 2100);\n","\n","        Assert.assertEquals(a, b);\n","        Assert.assertEquals(a.hashCode(), b.hashCode());\n","\n","        int h1 = a.hashCode();\n","        int h2 = a.hashCode();\n","        Assert.assertEquals(h1, h2);\n","    }\n","}\n"],"method_lines_dic":{"ProductData::::getPublicProductName()":[77,79],"ProductData::::getProductName()":[86,88],"ProductData::::getVersion()":[95,97],"ProductData::::getSinceCopyrightYear()":[104,106],"ProductData::::getToCopyrightYear()":[113,115],"ProductData::::getMinCompatibleLicensingModuleVersion()":[122,124],"ProductData::::equals(java.lang.Object)":[126,141],"ProductData::::hashCode()":[143,151]},"test_method_lines_dic":{"ProductDataTest::::productDataCreationTest()":[34,43],"ProductDataTest::::productDataAnotherCreationTest()":[45,55],"ProductDataTest::::equalsTest()":[57,66],"ProductDataTest::::notEqualsTest()":[68,74],"ProductDataTest::::hashCodeTest()":[76,87]},"reverse_method_lines_dic":{"77":"ProductData::::getPublicProductName()","78":"ProductData::::getPublicProductName()","79":"ProductData::::getPublicProductName()","86":"ProductData::::getProductName()","87":"ProductData::::getProductName()","88":"ProductData::::getProductName()","95":"ProductData::::getVersion()","96":"ProductData::::getVersion()","97":"ProductData::::getVersion()","104":"ProductData::::getSinceCopyrightYear()","105":"ProductData::::getSinceCopyrightYear()","106":"ProductData::::getSinceCopyrightYear()","113":"ProductData::::getToCopyrightYear()","114":"ProductData::::getToCopyrightYear()","115":"ProductData::::getToCopyrightYear()","122":"ProductData::::getMinCompatibleLicensingModuleVersion()","123":"ProductData::::getMinCompatibleLicensingModuleVersion()","124":"ProductData::::getMinCompatibleLicensingModuleVersion()","126":"ProductData::::equals(java.lang.Object)","127":"ProductData::::equals(java.lang.Object)","128":"ProductData::::equals(java.lang.Object)","129":"ProductData::::equals(java.lang.Object)","130":"ProductData::::equals(java.lang.Object)","131":"ProductData::::equals(java.lang.Object)","132":"ProductData::::equals(java.lang.Object)","133":"ProductData::::equals(java.lang.Object)","134":"ProductData::::equals(java.lang.Object)","135":"ProductData::::equals(java.lang.Object)","136":"ProductData::::equals(java.lang.Object)","137":"ProductData::::equals(java.lang.Object)","138":"ProductData::::equals(java.lang.Object)","139":"ProductData::::equals(java.lang.Object)","140":"ProductData::::equals(java.lang.Object)","141":"ProductData::::equals(java.lang.Object)","143":"ProductData::::hashCode()","144":"ProductData::::hashCode()","145":"ProductData::::hashCode()","146":"ProductData::::hashCode()","147":"ProductData::::hashCode()","148":"ProductData::::hashCode()","149":"ProductData::::hashCode()","150":"ProductData::::hashCode()","151":"ProductData::::hashCode()"},"test_reverse_method_lines_dic":{"34":"ProductDataTest::::productDataCreationTest()","35":"ProductDataTest::::productDataCreationTest()","36":"ProductDataTest::::productDataCreationTest()","37":"ProductDataTest::::productDataCreationTest()","38":"ProductDataTest::::productDataCreationTest()","39":"ProductDataTest::::productDataCreationTest()","40":"ProductDataTest::::productDataCreationTest()","41":"ProductDataTest::::productDataCreationTest()","42":"ProductDataTest::::productDataCreationTest()","43":"ProductDataTest::::productDataCreationTest()","45":"ProductDataTest::::productDataAnotherCreationTest()","46":"ProductDataTest::::productDataAnotherCreationTest()","47":"ProductDataTest::::productDataAnotherCreationTest()","48":"ProductDataTest::::productDataAnotherCreationTest()","49":"ProductDataTest::::productDataAnotherCreationTest()","50":"ProductDataTest::::productDataAnotherCreationTest()","51":"ProductDataTest::::productDataAnotherCreationTest()","52":"ProductDataTest::::productDataAnotherCreationTest()","53":"ProductDataTest::::productDataAnotherCreationTest()","54":"ProductDataTest::::productDataAnotherCreationTest()","55":"ProductDataTest::::productDataAnotherCreationTest()","57":"ProductDataTest::::equalsTest()","58":"ProductDataTest::::equalsTest()","59":"ProductDataTest::::equalsTest()","60":"ProductDataTest::::equalsTest()","61":"ProductDataTest::::equalsTest()","62":"ProductDataTest::::equalsTest()","63":"ProductDataTest::::equalsTest()","64":"ProductDataTest::::equalsTest()","65":"ProductDataTest::::equalsTest()","66":"ProductDataTest::::equalsTest()","68":"ProductDataTest::::notEqualsTest()","69":"ProductDataTest::::notEqualsTest()","70":"ProductDataTest::::notEqualsTest()","71":"ProductDataTest::::notEqualsTest()","72":"ProductDataTest::::notEqualsTest()","73":"ProductDataTest::::notEqualsTest()","74":"ProductDataTest::::notEqualsTest()","76":"ProductDataTest::::hashCodeTest()","77":"ProductDataTest::::hashCodeTest()","78":"ProductDataTest::::hashCodeTest()","79":"ProductDataTest::::hashCodeTest()","80":"ProductDataTest::::hashCodeTest()","81":"ProductDataTest::::hashCodeTest()","82":"ProductDataTest::::hashCodeTest()","83":"ProductDataTest::::hashCodeTest()","84":"ProductDataTest::::hashCodeTest()","85":"ProductDataTest::::hashCodeTest()","86":"ProductDataTest::::hashCodeTest()","87":"ProductDataTest::::hashCodeTest()"},"tests":[{"test_lines":[34,43],"covered_lines":[49,50,63,64,65,66,67,68,69,70,78,87,96,105,114],"label":"<<UNRECOGNISED_METHOD>>"},{"test_lines":[45,55],"covered_lines":[63,64,65,66,67,68,69,70,78,87,96,105,114,123],"label":"<<UNRECOGNISED_METHOD>>"},{"test_lines":[57,66],"covered_lines":[49,50,63,64,65,66,67,68,69,70,128,129,132,136,137,138,139],"label":"ProductData::::equals(java.lang.Object)"},{"test_lines":[68,74],"covered_lines":[49,50,63,64,65,66,67,68,69,70,128,132,136,137,138,139],"label":"ProductData::::equals(java.lang.Object)"},{"test_lines":[76,87],"covered_lines":[49,50,63,64,65,66,67,68,69,70,128,132,136,137,138,139,145,146,147,148,149,150],"label":"ProductData::::hashCode()"}]},"/bernard/dataset_construction/prep/repos/itext-java/commons/src/main/java/com/itextpdf/commons/actions/confirmations/ConfirmEvent.java":{"class_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.actions.confirmations;\n","\n","import com.itextpdf.commons.actions.AbstractEventWrapper;\n","import com.itextpdf.commons.actions.AbstractProductProcessITextEvent;\n","import com.itextpdf.commons.actions.sequence.SequenceId;\n","\n","/**\n"," * Used to confirm that process associated with some {@link AbstractProductProcessITextEvent}\n"," * ended successfully.\n"," */\n","public class ConfirmEvent extends AbstractEventWrapper {\n","\n","    /**\n","     * Creates an instance of confirmation event.\n","     *\n","     * @param updatedSequenceId is a {@link SequenceId} for the document. May be different with\n","     *                          sequence id of original event\n","     * @param confirmedEvent is an event to confirm\n","     */\n","    public ConfirmEvent(SequenceId updatedSequenceId, AbstractProductProcessITextEvent confirmedEvent) {\n","        super(updatedSequenceId, confirmedEvent, EventConfirmationType.UNCONFIRMABLE);\n","    }\n","\n","    /**\n","     * Creates an instance of confirmation event.\n","     *\n","     * @param confirmedEvent is an event to confirm\n","     */\n","    public ConfirmEvent(AbstractProductProcessITextEvent confirmedEvent) {\n","        this(confirmedEvent.getSequenceId(), confirmedEvent);\n","    }\n","\n","    /**\n","     * Returns the {@link AbstractProductProcessITextEvent} associated with confirmed process.\n","     *\n","     * @return confirmed event\n","     */\n","    public AbstractProductProcessITextEvent getConfirmedEvent() {\n","        AbstractProductProcessITextEvent event = getEvent();\n","        if (event instanceof ConfirmEvent) {\n","            return ((ConfirmEvent) event).getConfirmedEvent();\n","        }\n","        return event;\n","    }\n","}\n"],"test_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.actions.confirmations;\n","\n","import com.itextpdf.commons.ecosystem.ITextTestEvent;\n","import com.itextpdf.commons.ecosystem.TestMetaInfo;\n","import com.itextpdf.commons.actions.sequence.SequenceId;\n","import com.itextpdf.test.ExtendedITextTest;\n","import com.itextpdf.test.annotations.type.UnitTest;\n","\n","import org.junit.Assert;\n","import org.junit.Test;\n","import org.junit.experimental.categories.Category;\n","\n","@Category(UnitTest.class)\n","public class ConfirmEventTest extends ExtendedITextTest {\n","    @Test\n","    public void constructorWithSequenceIdTest() {\n","        SequenceId sequenceId = new SequenceId();\n","        ITextTestEvent iTextTestEvent = new ITextTestEvent(new SequenceId(), new TestMetaInfo(\"\"), \"eventType\", \"productName\");\n","        ConfirmEvent confirmEvent = new ConfirmEvent(sequenceId, iTextTestEvent);\n","\n","        Assert.assertSame(iTextTestEvent, confirmEvent.getConfirmedEvent());\n","        Assert.assertEquals(\"eventType\", confirmEvent.getEventType());\n","        Assert.assertEquals(\"productName\", confirmEvent.getProductName());\n","        Assert.assertSame(sequenceId, confirmEvent.getSequenceId());\n","        Assert.assertEquals(EventConfirmationType.UNCONFIRMABLE, confirmEvent.getConfirmationType());\n","        Assert.assertNotNull(confirmEvent.getProductData());\n","        Assert.assertEquals(ITextTestEvent.class, confirmEvent.getClassFromContext());\n","    }\n","\n","    @Test\n","    public void constructorWithoutSequenceIdTest() {\n","        ITextTestEvent iTextTestEvent = new ITextTestEvent(new SequenceId(), new TestMetaInfo(\"\"), \"eventType\", \"productName\");\n","        ConfirmEvent confirmEvent = new ConfirmEvent(iTextTestEvent);\n","\n","        Assert.assertSame(iTextTestEvent, confirmEvent.getConfirmedEvent());\n","        Assert.assertEquals(\"eventType\", confirmEvent.getEventType());\n","        Assert.assertEquals(\"productName\", confirmEvent.getProductName());\n","        Assert.assertSame(iTextTestEvent.getSequenceId(), confirmEvent.getSequenceId());\n","        Assert.assertEquals(EventConfirmationType.UNCONFIRMABLE, confirmEvent.getConfirmationType());\n","        Assert.assertNotNull(confirmEvent.getProductData());\n","        Assert.assertEquals(ITextTestEvent.class, confirmEvent.getClassFromContext());\n","    }\n","\n","    @Test\n","    public void confirmEventInsideOtherConfirmEventTest() {\n","        ITextTestEvent iTextTestEvent = new ITextTestEvent(new SequenceId(), new TestMetaInfo(\"\"), \"eventType\", \"productName\");\n","        ConfirmEvent child = new ConfirmEvent(iTextTestEvent.getSequenceId(), iTextTestEvent);\n","        ConfirmEvent confirmEvent = new ConfirmEvent(child);\n","\n","        Assert.assertSame(iTextTestEvent, confirmEvent.getConfirmedEvent());\n","\n","        Assert.assertSame(iTextTestEvent, confirmEvent.getConfirmedEvent());\n","        Assert.assertEquals(\"eventType\", confirmEvent.getEventType());\n","        Assert.assertEquals(\"productName\", confirmEvent.getProductName());\n","        Assert.assertSame(iTextTestEvent.getSequenceId(), confirmEvent.getSequenceId());\n","        Assert.assertEquals(EventConfirmationType.UNCONFIRMABLE, confirmEvent.getConfirmationType());\n","        Assert.assertNotNull(confirmEvent.getProductData());\n","        Assert.assertEquals(ITextTestEvent.class, confirmEvent.getClassFromContext());\n","    }\n","}\n"],"method_lines_dic":{"ConfirmEvent::::getConfirmedEvent()":[60,66]},"test_method_lines_dic":{"ConfirmEventTest::::constructorWithSequenceIdTest()":[37,50],"ConfirmEventTest::::constructorWithoutSequenceIdTest()":[52,64],"ConfirmEventTest::::confirmEventInsideOtherConfirmEventTest()":[66,81]},"reverse_method_lines_dic":{"60":"ConfirmEvent::::getConfirmedEvent()","61":"ConfirmEvent::::getConfirmedEvent()","62":"ConfirmEvent::::getConfirmedEvent()","63":"ConfirmEvent::::getConfirmedEvent()","64":"ConfirmEvent::::getConfirmedEvent()","65":"ConfirmEvent::::getConfirmedEvent()","66":"ConfirmEvent::::getConfirmedEvent()"},"test_reverse_method_lines_dic":{"37":"ConfirmEventTest::::constructorWithSequenceIdTest()","38":"ConfirmEventTest::::constructorWithSequenceIdTest()","39":"ConfirmEventTest::::constructorWithSequenceIdTest()","40":"ConfirmEventTest::::constructorWithSequenceIdTest()","41":"ConfirmEventTest::::constructorWithSequenceIdTest()","42":"ConfirmEventTest::::constructorWithSequenceIdTest()","43":"ConfirmEventTest::::constructorWithSequenceIdTest()","44":"ConfirmEventTest::::constructorWithSequenceIdTest()","45":"ConfirmEventTest::::constructorWithSequenceIdTest()","46":"ConfirmEventTest::::constructorWithSequenceIdTest()","47":"ConfirmEventTest::::constructorWithSequenceIdTest()","48":"ConfirmEventTest::::constructorWithSequenceIdTest()","49":"ConfirmEventTest::::constructorWithSequenceIdTest()","50":"ConfirmEventTest::::constructorWithSequenceIdTest()","52":"ConfirmEventTest::::constructorWithoutSequenceIdTest()","53":"ConfirmEventTest::::constructorWithoutSequenceIdTest()","54":"ConfirmEventTest::::constructorWithoutSequenceIdTest()","55":"ConfirmEventTest::::constructorWithoutSequenceIdTest()","56":"ConfirmEventTest::::constructorWithoutSequenceIdTest()","57":"ConfirmEventTest::::constructorWithoutSequenceIdTest()","58":"ConfirmEventTest::::constructorWithoutSequenceIdTest()","59":"ConfirmEventTest::::constructorWithoutSequenceIdTest()","60":"ConfirmEventTest::::constructorWithoutSequenceIdTest()","61":"ConfirmEventTest::::constructorWithoutSequenceIdTest()","62":"ConfirmEventTest::::constructorWithoutSequenceIdTest()","63":"ConfirmEventTest::::constructorWithoutSequenceIdTest()","64":"ConfirmEventTest::::constructorWithoutSequenceIdTest()","66":"ConfirmEventTest::::confirmEventInsideOtherConfirmEventTest()","67":"ConfirmEventTest::::confirmEventInsideOtherConfirmEventTest()","68":"ConfirmEventTest::::confirmEventInsideOtherConfirmEventTest()","69":"ConfirmEventTest::::confirmEventInsideOtherConfirmEventTest()","70":"ConfirmEventTest::::confirmEventInsideOtherConfirmEventTest()","71":"ConfirmEventTest::::confirmEventInsideOtherConfirmEventTest()","72":"ConfirmEventTest::::confirmEventInsideOtherConfirmEventTest()","73":"ConfirmEventTest::::confirmEventInsideOtherConfirmEventTest()","74":"ConfirmEventTest::::confirmEventInsideOtherConfirmEventTest()","75":"ConfirmEventTest::::confirmEventInsideOtherConfirmEventTest()","76":"ConfirmEventTest::::confirmEventInsideOtherConfirmEventTest()","77":"ConfirmEventTest::::confirmEventInsideOtherConfirmEventTest()","78":"ConfirmEventTest::::confirmEventInsideOtherConfirmEventTest()","79":"ConfirmEventTest::::confirmEventInsideOtherConfirmEventTest()","80":"ConfirmEventTest::::confirmEventInsideOtherConfirmEventTest()","81":"ConfirmEventTest::::confirmEventInsideOtherConfirmEventTest()"},"tests":[{"test_lines":[37,50],"covered_lines":[43,44,61,62,65],"label":"<<UNRECOGNISED_METHOD>>"},{"test_lines":[52,64],"covered_lines":[43,44,52,53,61,62,65],"label":"<<UNRECOGNISED_METHOD>>"},{"test_lines":[66,81],"covered_lines":[43,44,52,53,61,62,63,65],"label":"<<NO FOCAL METHOD>>"}]},"/bernard/dataset_construction/prep/repos/itext-java/commons/src/main/java/com/itextpdf/commons/actions/producer/UsedProductsPlaceholderPopulator.java":{"class_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.actions.producer;\n","\n","import com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper;\n","import com.itextpdf.commons.exceptions.CommonsExceptionMessageConstant;\n","import com.itextpdf.commons.utils.MessageFormatUtil;\n","\n","import java.util.Collections;\n","import java.util.HashMap;\n","import java.util.LinkedHashSet;\n","import java.util.List;\n","import java.util.Map;\n","import java.util.Set;\n","\n","/**\n"," * Class is used to populate <code>usedProducts</code> placeholder. Placeholder should be configured\n"," * with parameter defining the format of output. Within format strings, unquoted letters from\n"," * <code>A</code> to <code>Z</code> and from <code>a</code> to <code>z</code> are process as pattern\n"," * letters representing appropriate component of <code>usedProducts</code> format. There are three\n"," * letters which are allowed in the outputformat:\n"," *\n"," * <p>\n"," * <ul>\n"," *     <li><code>P</code> stands for product name\n"," *     <li><code>V</code> stands for version of the product\n"," *     <li><code>T</code> is for usage type of the product\n"," * </ul>\n"," *\n"," * <p>\n"," * Text can be quoted using single quotes (') to avoid interpretation. All other characters are not\n"," * interpreted and just copied into the output string. String may contain escaped apostrophes\n"," * <code>\\'</code> which processed as characters. Backslash is used for escaping so you need double\n"," * backslash to print it <code>\\\\</code>. All the rest backslashes (not followed by apostrophe or\n"," * one more backslash) are simply ignored.\n"," *\n"," * <p>\n"," * The result of the processing is the list of all products mentioned among events as a\n"," * comma-separated list. The order of the elements is defined by the order of products mentioning in\n"," * the <code>events</code>. Equal strings are skipped even if they were generated for different\n"," * products (i. e. format <code>P</code> stands for product name only: if several version of the\n"," * same product are used, it will be the only mentioning of that product).\n"," */\n","class UsedProductsPlaceholderPopulator extends AbstractFormattedPlaceholderPopulator {\n","    private static final char PRODUCT_NAME = 'P';\n","    private static final char VERSION = 'V';\n","    private static final char USAGE_TYPE = 'T';\n","    private static final String PRODUCTS_SEPARATOR = \", \";\n","\n","    public UsedProductsPlaceholderPopulator() {\n","        // Empty constructor.\n","    }\n","\n","    /**\n","     * Builds a replacement for a placeholder <code>usedProducts</code> in accordance with the\n","     * registered events and provided format.\n","     *\n","     * @param events is a list of event involved into document processing\n","     * @param parameter defines output format in accordance with the for description\n","     *\n","     * @return populated comma-separated list of used products in accordance with the format\n","     *\n","     * @throws IllegalArgumentException if format of the pattern is invalid\n","     */\n","    @Override\n","    public String populate(List<ConfirmedEventWrapper> events, String parameter) {\n","        if (parameter == null) {\n","            throw new IllegalArgumentException(MessageFormatUtil.format(\n","                    CommonsExceptionMessageConstant.INVALID_USAGE_FORMAT_REQUIRED, \"usedProducts\"));\n","        }\n","\n","        final Set<ProductRepresentation> usedProducts = new LinkedHashSet<>();\n","        for (ConfirmedEventWrapper event : events) {\n","            usedProducts.add(new ProductRepresentation(event));\n","        }\n","\n","        final Set<String> usedProductsRepresentations = new LinkedHashSet<>();\n","        for (ProductRepresentation representation : usedProducts) {\n","            usedProductsRepresentations.add(formatProduct(representation, parameter));\n","        }\n","        final StringBuilder result = new StringBuilder();\n","        for (String stringRepresentation : usedProductsRepresentations) {\n","            if (result.length() > 0) {\n","                result.append(PRODUCTS_SEPARATOR);\n","            }\n","\n","            result.append(stringRepresentation);\n","        }\n","\n","        return result.toString();\n","    }\n","\n","    private String formatProduct(ProductRepresentation product, String format) {\n","        final StringBuilder builder = new StringBuilder();\n","        char[] formatArray = format.toCharArray();\n","\n","        for (int i = 0; i < formatArray.length; i++) {\n","            if (formatArray[i] == APOSTROPHE) {\n","                i = attachQuotedString(i, builder, formatArray);\n","            } else if (isLetter(formatArray[i])) {\n","                builder.append(formatLetter(formatArray[i], product));\n","            } else {\n","                builder.append(formatArray[i]);\n","            }\n","        }\n","\n","        return builder.toString();\n","    }\n","\n","    private String formatLetter(char letter, ProductRepresentation product) {\n","        if (letter == PRODUCT_NAME) {\n","            return product.getProductName();\n","        } else if (letter == VERSION) {\n","            return product.getVersion();\n","        } else if (letter == USAGE_TYPE) {\n","            return product.getProductUsageType();\n","        } else {\n","            throw new IllegalArgumentException(MessageFormatUtil.format(\n","                    CommonsExceptionMessageConstant.PATTERN_CONTAINS_UNEXPECTED_CHARACTER, letter));\n","        }\n","    }\n","\n","    private static class ProductRepresentation {\n","        private static final Map<String, String> PRODUCT_USAGE_TYPE_TO_HUMAN_READABLE_FORM;\n","\n","        private final String productName;\n","        private final String productUsageType;\n","        private final String version;\n","\n","        static {\n","            Map<String, String> productUsageTypeMapping = new HashMap<>();\n","            productUsageTypeMapping.put(\"nonproduction\", \"non-production\");\n","            PRODUCT_USAGE_TYPE_TO_HUMAN_READABLE_FORM = Collections.unmodifiableMap(productUsageTypeMapping);\n","        }\n","\n","        public ProductRepresentation(ConfirmedEventWrapper event) {\n","            productName = event.getEvent().getProductData().getPublicProductName();\n","            if (PRODUCT_USAGE_TYPE_TO_HUMAN_READABLE_FORM.containsKey(event.getProductUsageType())) {\n","                productUsageType = PRODUCT_USAGE_TYPE_TO_HUMAN_READABLE_FORM.get(event.getProductUsageType());\n","            } else {\n","                productUsageType = event.getProductUsageType();\n","            }\n","            version = event.getEvent().getProductData().getVersion();\n","        }\n","\n","        public String getProductName() {\n","            return productName;\n","        }\n","\n","        public String getProductUsageType() {\n","            return productUsageType;\n","        }\n","\n","        public String getVersion() {\n","            return version;\n","        }\n","\n","        @Override\n","        public boolean equals(Object o) {\n","            if (this == o) {\n","                return true;\n","            }\n","            if (o == null || getClass() != o.getClass()) {\n","                return false;\n","            }\n","\n","            ProductRepresentation that = (ProductRepresentation) o;\n","\n","            if (getProductName() == null ?\n","                    that.getProductName() != null : !getProductName().equals(that.getProductName())) {\n","                return false;\n","            }\n","            if (getProductUsageType() == null ?\n","                    that.getProductUsageType() != null : !getProductUsageType().equals(that.getProductUsageType())) {\n","                return false;\n","            }\n","            return getVersion() == null ? that.getVersion() == null : getVersion().equals(that.getVersion());\n","        }\n","\n","        @Override\n","        public int hashCode() {\n","            int result = getProductName() == null ? 0 : getProductName().hashCode();\n","            result = 31 * result + (getProductUsageType() == null ? 0 : getProductUsageType().hashCode());\n","            result = 31 * result + (getVersion() == null ? 0 : getVersion().hashCode());\n","            return result;\n","        }\n","    }\n","}\n"],"test_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.actions.producer;\n","\n","import com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper;\n","import com.itextpdf.commons.actions.data.ProductData;\n","import com.itextpdf.commons.actions.sequence.SequenceId;\n","import com.itextpdf.commons.ecosystem.ITextTestEvent;\n","import com.itextpdf.commons.exceptions.CommonsExceptionMessageConstant;\n","import com.itextpdf.commons.utils.MessageFormatUtil;\n","import com.itextpdf.test.ExtendedITextTest;\n","import com.itextpdf.test.annotations.type.UnitTest;\n","\n","import java.util.ArrayList;\n","import java.util.Arrays;\n","import java.util.List;\n","import org.junit.Assert;\n","import org.junit.Test;\n","import org.junit.experimental.categories.Category;\n","\n","@Category(UnitTest.class)\n","public class UsedProductsPlaceholderPopulatorTest extends ExtendedITextTest {\n","\n","    private final UsedProductsPlaceholderPopulator populator = new UsedProductsPlaceholderPopulator();\n","\n","    @Test\n","    public void nullTest() {\n","        Exception exception = Assert.assertThrows(IllegalArgumentException.class,\n","                () -> populator.populate(getEvents(1), null));\n","        Assert.assertEquals(MessageFormatUtil.format(CommonsExceptionMessageConstant.INVALID_USAGE_FORMAT_REQUIRED, \"usedProducts\"),\n","                exception.getMessage());\n","    }\n","\n","    @Test\n","    public void plainTextTest() {\n","        String result = populator.populate(getEvents(0), \"'plain text'\");\n","        Assert.assertEquals(\"plain text\", result);\n","    }\n","\n","    @Test\n","    public void plainTextMultipleEventsMergedTest() {\n","        String result = populator.populate(getEvents(1, 2, 3, 4), \"'plain text'\");\n","        Assert.assertEquals(\"plain text\", result);\n","    }\n","\n","    @Test\n","    public void productNameOneEventTest() {\n","        String result = populator.populate(getEvents(0), \"P\");\n","        Assert.assertEquals(\"product0\", result);\n","    }\n","\n","    @Test\n","    public void productNameSeveralEventsTest() {\n","        String result = populator.populate(getEvents(0, 1, 2), \"P\");\n","        Assert.assertEquals(\"product0, product1, product2\", result);\n","    }\n","\n","    @Test\n","    public void sameProductsMergedTest() {\n","        String result = populator.populate(getEvents(0, 1, 0, 1, 2), \"P\");\n","        Assert.assertEquals(\"product0, product1, product2\", result);\n","    }\n","\n","    @Test\n","    public void versionOneEventTest() {\n","        String result = populator.populate(getEvents(1), \"V\");\n","        Assert.assertEquals(\"1.0\", result);\n","    }\n","\n","    @Test\n","    public void versionSeveralEventsTest() {\n","        String result = populator.populate(getEvents(1, 2, 3), \"V\");\n","        Assert.assertEquals(\"1.0, 2.0, 3.0\", result);\n","    }\n","\n","    @Test\n","    public void sameVersionsMergedTest() {\n","        String result = populator.populate(getEvents(1, 2, 1, 2, 3), \"V\");\n","        Assert.assertEquals(\"1.0, 2.0, 3.0\", result);\n","    }\n","\n","    @Test\n","    public void typeOneEventTest() {\n","        String result = populator.populate(getEvents(1), \"T\");\n","        Assert.assertEquals(\"type1\", result);\n","    }\n","\n","    @Test\n","    public void typeSeveralEventsTest() {\n","        String result = populator.populate(getEvents(1, 2, 3), \"T\");\n","        Assert.assertEquals(\"type1, type2, type3\", result);\n","    }\n","\n","    @Test\n","    public void sameTypesMergedTest() {\n","        String result = populator.populate(getEvents(1, 2, 1, 2, 3), \"T\");\n","        Assert.assertEquals(\"type1, type2, type3\", result);\n","    }\n","\n","    @Test\n","    public void complexFormatTest() {\n","        String result = populator.populate(getEvents(1, 2, 1, 2, 3), \"'module:'P #V (T)\");\n","        Assert.assertEquals(\"module:product1 #1.0 (type1), module:product2 #2.0 (type2), module:product3 #3.0 (type3)\", result);\n","    }\n","\n","    @Test\n","    public void humanReadableNormalizationTest() {\n","        ProductData productData = new ProductData(\"public-name\", \"name\", \"1.0.0\", 2020, 2021);\n","        ConfirmedEventWrapper event = new ConfirmedEventWrapper(\n","                new ITextTestEvent(new SequenceId(), productData, null, \"testing\"),\n","                \"nonproduction\", \"iText product\");\n","        String result = populator.populate(Arrays.asList(event), \"'module:'P #V (T)\");\n","        Assert.assertEquals(\"module:public-name #1.0.0 (non-production)\", result);\n","    }\n","\n","    @Test\n","    public void invalidLetterFormatTest() {\n","        Exception exception = Assert.assertThrows(IllegalArgumentException.class,\n","                () -> populator.populate(getEvents(1), \"PVTX\"));\n","        Assert.assertEquals(\n","                MessageFormatUtil.format(CommonsExceptionMessageConstant.PATTERN_CONTAINS_UNEXPECTED_CHARACTER, \"X\"),\n","                exception.getMessage());\n","    }\n","\n","    private List<ConfirmedEventWrapper> getEvents(int ... indexes) {\n","        List<ConfirmedEventWrapper> events = new ArrayList<>();\n","\n","        for (int i : indexes) {\n","            final ProductData productData = new ProductData(\"product\" + i, \"module\" + i, i + \".0\", 1900, 2100);\n","            events.add(new ConfirmedEventWrapper(\n","                    new ITextTestEvent(new SequenceId(), productData, null, \"testing\" + i),\n","                    \"type\" + i, \"iText product \" + i));\n","        }\n","\n","        return events;\n","    }\n","}\n"],"method_lines_dic":{"UsedProductsPlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)":[85,111],"UsedProductsPlaceholderPopulator::::formatProduct(com.itextpdf.commons.actions.producer.UsedProductsPlaceholderPopulator.ProductRepresentation,java.lang.String)":[113,128],"UsedProductsPlaceholderPopulator::::formatLetter(char,com.itextpdf.commons.actions.producer.UsedProductsPlaceholderPopulator.ProductRepresentation)":[130,141],"UsedProductsPlaceholderPopulator.ProductRepresentation::::getProductName()":[166,168],"UsedProductsPlaceholderPopulator.ProductRepresentation::::getProductUsageType()":[170,172],"UsedProductsPlaceholderPopulator.ProductRepresentation::::getVersion()":[174,176],"UsedProductsPlaceholderPopulator.ProductRepresentation::::equals(java.lang.Object)":[178,198],"UsedProductsPlaceholderPopulator.ProductRepresentation::::hashCode()":[200,206]},"test_method_lines_dic":{"UsedProductsPlaceholderPopulatorTest::::nullTest()":[46,52],"UsedProductsPlaceholderPopulatorTest::::plainTextTest()":[54,58],"UsedProductsPlaceholderPopulatorTest::::plainTextMultipleEventsMergedTest()":[60,64],"UsedProductsPlaceholderPopulatorTest::::productNameOneEventTest()":[66,70],"UsedProductsPlaceholderPopulatorTest::::productNameSeveralEventsTest()":[72,76],"UsedProductsPlaceholderPopulatorTest::::sameProductsMergedTest()":[78,82],"UsedProductsPlaceholderPopulatorTest::::versionOneEventTest()":[84,88],"UsedProductsPlaceholderPopulatorTest::::versionSeveralEventsTest()":[90,94],"UsedProductsPlaceholderPopulatorTest::::sameVersionsMergedTest()":[96,100],"UsedProductsPlaceholderPopulatorTest::::typeOneEventTest()":[102,106],"UsedProductsPlaceholderPopulatorTest::::typeSeveralEventsTest()":[108,112],"UsedProductsPlaceholderPopulatorTest::::sameTypesMergedTest()":[114,118],"UsedProductsPlaceholderPopulatorTest::::complexFormatTest()":[120,124],"UsedProductsPlaceholderPopulatorTest::::humanReadableNormalizationTest()":[126,134],"UsedProductsPlaceholderPopulatorTest::::invalidLetterFormatTest()":[136,143],"UsedProductsPlaceholderPopulatorTest::::getEvents(int[])":[145,156]},"reverse_method_lines_dic":{"85":"UsedProductsPlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)","86":"UsedProductsPlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)","87":"UsedProductsPlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)","88":"UsedProductsPlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)","89":"UsedProductsPlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)","90":"UsedProductsPlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)","91":"UsedProductsPlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)","92":"UsedProductsPlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)","93":"UsedProductsPlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)","94":"UsedProductsPlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)","95":"UsedProductsPlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)","96":"UsedProductsPlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)","97":"UsedProductsPlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)","98":"UsedProductsPlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)","99":"UsedProductsPlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)","100":"UsedProductsPlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)","101":"UsedProductsPlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)","102":"UsedProductsPlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)","103":"UsedProductsPlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)","104":"UsedProductsPlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)","105":"UsedProductsPlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)","106":"UsedProductsPlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)","107":"UsedProductsPlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)","108":"UsedProductsPlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)","109":"UsedProductsPlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)","110":"UsedProductsPlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)","111":"UsedProductsPlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)","113":"UsedProductsPlaceholderPopulator::::formatProduct(com.itextpdf.commons.actions.producer.UsedProductsPlaceholderPopulator.ProductRepresentation,java.lang.String)","114":"UsedProductsPlaceholderPopulator::::formatProduct(com.itextpdf.commons.actions.producer.UsedProductsPlaceholderPopulator.ProductRepresentation,java.lang.String)","115":"UsedProductsPlaceholderPopulator::::formatProduct(com.itextpdf.commons.actions.producer.UsedProductsPlaceholderPopulator.ProductRepresentation,java.lang.String)","116":"UsedProductsPlaceholderPopulator::::formatProduct(com.itextpdf.commons.actions.producer.UsedProductsPlaceholderPopulator.ProductRepresentation,java.lang.String)","117":"UsedProductsPlaceholderPopulator::::formatProduct(com.itextpdf.commons.actions.producer.UsedProductsPlaceholderPopulator.ProductRepresentation,java.lang.String)","118":"UsedProductsPlaceholderPopulator::::formatProduct(com.itextpdf.commons.actions.producer.UsedProductsPlaceholderPopulator.ProductRepresentation,java.lang.String)","119":"UsedProductsPlaceholderPopulator::::formatProduct(com.itextpdf.commons.actions.producer.UsedProductsPlaceholderPopulator.ProductRepresentation,java.lang.String)","120":"UsedProductsPlaceholderPopulator::::formatProduct(com.itextpdf.commons.actions.producer.UsedProductsPlaceholderPopulator.ProductRepresentation,java.lang.String)","121":"UsedProductsPlaceholderPopulator::::formatProduct(com.itextpdf.commons.actions.producer.UsedProductsPlaceholderPopulator.ProductRepresentation,java.lang.String)","122":"UsedProductsPlaceholderPopulator::::formatProduct(com.itextpdf.commons.actions.producer.UsedProductsPlaceholderPopulator.ProductRepresentation,java.lang.String)","123":"UsedProductsPlaceholderPopulator::::formatProduct(com.itextpdf.commons.actions.producer.UsedProductsPlaceholderPopulator.ProductRepresentation,java.lang.String)","124":"UsedProductsPlaceholderPopulator::::formatProduct(com.itextpdf.commons.actions.producer.UsedProductsPlaceholderPopulator.ProductRepresentation,java.lang.String)","125":"UsedProductsPlaceholderPopulator::::formatProduct(com.itextpdf.commons.actions.producer.UsedProductsPlaceholderPopulator.ProductRepresentation,java.lang.String)","126":"UsedProductsPlaceholderPopulator::::formatProduct(com.itextpdf.commons.actions.producer.UsedProductsPlaceholderPopulator.ProductRepresentation,java.lang.String)","127":"UsedProductsPlaceholderPopulator::::formatProduct(com.itextpdf.commons.actions.producer.UsedProductsPlaceholderPopulator.ProductRepresentation,java.lang.String)","128":"UsedProductsPlaceholderPopulator::::formatProduct(com.itextpdf.commons.actions.producer.UsedProductsPlaceholderPopulator.ProductRepresentation,java.lang.String)","130":"UsedProductsPlaceholderPopulator::::formatLetter(char,com.itextpdf.commons.actions.producer.UsedProductsPlaceholderPopulator.ProductRepresentation)","131":"UsedProductsPlaceholderPopulator::::formatLetter(char,com.itextpdf.commons.actions.producer.UsedProductsPlaceholderPopulator.ProductRepresentation)","132":"UsedProductsPlaceholderPopulator::::formatLetter(char,com.itextpdf.commons.actions.producer.UsedProductsPlaceholderPopulator.ProductRepresentation)","133":"UsedProductsPlaceholderPopulator::::formatLetter(char,com.itextpdf.commons.actions.producer.UsedProductsPlaceholderPopulator.ProductRepresentation)","134":"UsedProductsPlaceholderPopulator::::formatLetter(char,com.itextpdf.commons.actions.producer.UsedProductsPlaceholderPopulator.ProductRepresentation)","135":"UsedProductsPlaceholderPopulator::::formatLetter(char,com.itextpdf.commons.actions.producer.UsedProductsPlaceholderPopulator.ProductRepresentation)","136":"UsedProductsPlaceholderPopulator::::formatLetter(char,com.itextpdf.commons.actions.producer.UsedProductsPlaceholderPopulator.ProductRepresentation)","137":"UsedProductsPlaceholderPopulator::::formatLetter(char,com.itextpdf.commons.actions.producer.UsedProductsPlaceholderPopulator.ProductRepresentation)","138":"UsedProductsPlaceholderPopulator::::formatLetter(char,com.itextpdf.commons.actions.producer.UsedProductsPlaceholderPopulator.ProductRepresentation)","139":"UsedProductsPlaceholderPopulator::::formatLetter(char,com.itextpdf.commons.actions.producer.UsedProductsPlaceholderPopulator.ProductRepresentation)","140":"UsedProductsPlaceholderPopulator::::formatLetter(char,com.itextpdf.commons.actions.producer.UsedProductsPlaceholderPopulator.ProductRepresentation)","141":"UsedProductsPlaceholderPopulator::::formatLetter(char,com.itextpdf.commons.actions.producer.UsedProductsPlaceholderPopulator.ProductRepresentation)","166":"UsedProductsPlaceholderPopulator.ProductRepresentation::::getProductName()","167":"UsedProductsPlaceholderPopulator.ProductRepresentation::::getProductName()","168":"UsedProductsPlaceholderPopulator.ProductRepresentation::::getProductName()","170":"UsedProductsPlaceholderPopulator.ProductRepresentation::::getProductUsageType()","171":"UsedProductsPlaceholderPopulator.ProductRepresentation::::getProductUsageType()","172":"UsedProductsPlaceholderPopulator.ProductRepresentation::::getProductUsageType()","174":"UsedProductsPlaceholderPopulator.ProductRepresentation::::getVersion()","175":"UsedProductsPlaceholderPopulator.ProductRepresentation::::getVersion()","176":"UsedProductsPlaceholderPopulator.ProductRepresentation::::getVersion()","178":"UsedProductsPlaceholderPopulator.ProductRepresentation::::equals(java.lang.Object)","179":"UsedProductsPlaceholderPopulator.ProductRepresentation::::equals(java.lang.Object)","180":"UsedProductsPlaceholderPopulator.ProductRepresentation::::equals(java.lang.Object)","181":"UsedProductsPlaceholderPopulator.ProductRepresentation::::equals(java.lang.Object)","182":"UsedProductsPlaceholderPopulator.ProductRepresentation::::equals(java.lang.Object)","183":"UsedProductsPlaceholderPopulator.ProductRepresentation::::equals(java.lang.Object)","184":"UsedProductsPlaceholderPopulator.ProductRepresentation::::equals(java.lang.Object)","185":"UsedProductsPlaceholderPopulator.ProductRepresentation::::equals(java.lang.Object)","186":"UsedProductsPlaceholderPopulator.ProductRepresentation::::equals(java.lang.Object)","187":"UsedProductsPlaceholderPopulator.ProductRepresentation::::equals(java.lang.Object)","188":"UsedProductsPlaceholderPopulator.ProductRepresentation::::equals(java.lang.Object)","189":"UsedProductsPlaceholderPopulator.ProductRepresentation::::equals(java.lang.Object)","190":"UsedProductsPlaceholderPopulator.ProductRepresentation::::equals(java.lang.Object)","191":"UsedProductsPlaceholderPopulator.ProductRepresentation::::equals(java.lang.Object)","192":"UsedProductsPlaceholderPopulator.ProductRepresentation::::equals(java.lang.Object)","193":"UsedProductsPlaceholderPopulator.ProductRepresentation::::equals(java.lang.Object)","194":"UsedProductsPlaceholderPopulator.ProductRepresentation::::equals(java.lang.Object)","195":"UsedProductsPlaceholderPopulator.ProductRepresentation::::equals(java.lang.Object)","196":"UsedProductsPlaceholderPopulator.ProductRepresentation::::equals(java.lang.Object)","197":"UsedProductsPlaceholderPopulator.ProductRepresentation::::equals(java.lang.Object)","198":"UsedProductsPlaceholderPopulator.ProductRepresentation::::equals(java.lang.Object)","200":"UsedProductsPlaceholderPopulator.ProductRepresentation::::hashCode()","201":"UsedProductsPlaceholderPopulator.ProductRepresentation::::hashCode()","202":"UsedProductsPlaceholderPopulator.ProductRepresentation::::hashCode()","203":"UsedProductsPlaceholderPopulator.ProductRepresentation::::hashCode()","204":"UsedProductsPlaceholderPopulator.ProductRepresentation::::hashCode()","205":"UsedProductsPlaceholderPopulator.ProductRepresentation::::hashCode()","206":"UsedProductsPlaceholderPopulator.ProductRepresentation::::hashCode()"},"test_reverse_method_lines_dic":{"46":"UsedProductsPlaceholderPopulatorTest::::nullTest()","47":"UsedProductsPlaceholderPopulatorTest::::nullTest()","48":"UsedProductsPlaceholderPopulatorTest::::nullTest()","49":"UsedProductsPlaceholderPopulatorTest::::nullTest()","50":"UsedProductsPlaceholderPopulatorTest::::nullTest()","51":"UsedProductsPlaceholderPopulatorTest::::nullTest()","52":"UsedProductsPlaceholderPopulatorTest::::nullTest()","54":"UsedProductsPlaceholderPopulatorTest::::plainTextTest()","55":"UsedProductsPlaceholderPopulatorTest::::plainTextTest()","56":"UsedProductsPlaceholderPopulatorTest::::plainTextTest()","57":"UsedProductsPlaceholderPopulatorTest::::plainTextTest()","58":"UsedProductsPlaceholderPopulatorTest::::plainTextTest()","60":"UsedProductsPlaceholderPopulatorTest::::plainTextMultipleEventsMergedTest()","61":"UsedProductsPlaceholderPopulatorTest::::plainTextMultipleEventsMergedTest()","62":"UsedProductsPlaceholderPopulatorTest::::plainTextMultipleEventsMergedTest()","63":"UsedProductsPlaceholderPopulatorTest::::plainTextMultipleEventsMergedTest()","64":"UsedProductsPlaceholderPopulatorTest::::plainTextMultipleEventsMergedTest()","66":"UsedProductsPlaceholderPopulatorTest::::productNameOneEventTest()","67":"UsedProductsPlaceholderPopulatorTest::::productNameOneEventTest()","68":"UsedProductsPlaceholderPopulatorTest::::productNameOneEventTest()","69":"UsedProductsPlaceholderPopulatorTest::::productNameOneEventTest()","70":"UsedProductsPlaceholderPopulatorTest::::productNameOneEventTest()","72":"UsedProductsPlaceholderPopulatorTest::::productNameSeveralEventsTest()","73":"UsedProductsPlaceholderPopulatorTest::::productNameSeveralEventsTest()","74":"UsedProductsPlaceholderPopulatorTest::::productNameSeveralEventsTest()","75":"UsedProductsPlaceholderPopulatorTest::::productNameSeveralEventsTest()","76":"UsedProductsPlaceholderPopulatorTest::::productNameSeveralEventsTest()","78":"UsedProductsPlaceholderPopulatorTest::::sameProductsMergedTest()","79":"UsedProductsPlaceholderPopulatorTest::::sameProductsMergedTest()","80":"UsedProductsPlaceholderPopulatorTest::::sameProductsMergedTest()","81":"UsedProductsPlaceholderPopulatorTest::::sameProductsMergedTest()","82":"UsedProductsPlaceholderPopulatorTest::::sameProductsMergedTest()","84":"UsedProductsPlaceholderPopulatorTest::::versionOneEventTest()","85":"UsedProductsPlaceholderPopulatorTest::::versionOneEventTest()","86":"UsedProductsPlaceholderPopulatorTest::::versionOneEventTest()","87":"UsedProductsPlaceholderPopulatorTest::::versionOneEventTest()","88":"UsedProductsPlaceholderPopulatorTest::::versionOneEventTest()","90":"UsedProductsPlaceholderPopulatorTest::::versionSeveralEventsTest()","91":"UsedProductsPlaceholderPopulatorTest::::versionSeveralEventsTest()","92":"UsedProductsPlaceholderPopulatorTest::::versionSeveralEventsTest()","93":"UsedProductsPlaceholderPopulatorTest::::versionSeveralEventsTest()","94":"UsedProductsPlaceholderPopulatorTest::::versionSeveralEventsTest()","96":"UsedProductsPlaceholderPopulatorTest::::sameVersionsMergedTest()","97":"UsedProductsPlaceholderPopulatorTest::::sameVersionsMergedTest()","98":"UsedProductsPlaceholderPopulatorTest::::sameVersionsMergedTest()","99":"UsedProductsPlaceholderPopulatorTest::::sameVersionsMergedTest()","100":"UsedProductsPlaceholderPopulatorTest::::sameVersionsMergedTest()","102":"UsedProductsPlaceholderPopulatorTest::::typeOneEventTest()","103":"UsedProductsPlaceholderPopulatorTest::::typeOneEventTest()","104":"UsedProductsPlaceholderPopulatorTest::::typeOneEventTest()","105":"UsedProductsPlaceholderPopulatorTest::::typeOneEventTest()","106":"UsedProductsPlaceholderPopulatorTest::::typeOneEventTest()","108":"UsedProductsPlaceholderPopulatorTest::::typeSeveralEventsTest()","109":"UsedProductsPlaceholderPopulatorTest::::typeSeveralEventsTest()","110":"UsedProductsPlaceholderPopulatorTest::::typeSeveralEventsTest()","111":"UsedProductsPlaceholderPopulatorTest::::typeSeveralEventsTest()","112":"UsedProductsPlaceholderPopulatorTest::::typeSeveralEventsTest()","114":"UsedProductsPlaceholderPopulatorTest::::sameTypesMergedTest()","115":"UsedProductsPlaceholderPopulatorTest::::sameTypesMergedTest()","116":"UsedProductsPlaceholderPopulatorTest::::sameTypesMergedTest()","117":"UsedProductsPlaceholderPopulatorTest::::sameTypesMergedTest()","118":"UsedProductsPlaceholderPopulatorTest::::sameTypesMergedTest()","120":"UsedProductsPlaceholderPopulatorTest::::complexFormatTest()","121":"UsedProductsPlaceholderPopulatorTest::::complexFormatTest()","122":"UsedProductsPlaceholderPopulatorTest::::complexFormatTest()","123":"UsedProductsPlaceholderPopulatorTest::::complexFormatTest()","124":"UsedProductsPlaceholderPopulatorTest::::complexFormatTest()","126":"UsedProductsPlaceholderPopulatorTest::::humanReadableNormalizationTest()","127":"UsedProductsPlaceholderPopulatorTest::::humanReadableNormalizationTest()","128":"UsedProductsPlaceholderPopulatorTest::::humanReadableNormalizationTest()","129":"UsedProductsPlaceholderPopulatorTest::::humanReadableNormalizationTest()","130":"UsedProductsPlaceholderPopulatorTest::::humanReadableNormalizationTest()","131":"UsedProductsPlaceholderPopulatorTest::::humanReadableNormalizationTest()","132":"UsedProductsPlaceholderPopulatorTest::::humanReadableNormalizationTest()","133":"UsedProductsPlaceholderPopulatorTest::::humanReadableNormalizationTest()","134":"UsedProductsPlaceholderPopulatorTest::::humanReadableNormalizationTest()","136":"UsedProductsPlaceholderPopulatorTest::::invalidLetterFormatTest()","137":"UsedProductsPlaceholderPopulatorTest::::invalidLetterFormatTest()","138":"UsedProductsPlaceholderPopulatorTest::::invalidLetterFormatTest()","139":"UsedProductsPlaceholderPopulatorTest::::invalidLetterFormatTest()","140":"UsedProductsPlaceholderPopulatorTest::::invalidLetterFormatTest()","141":"UsedProductsPlaceholderPopulatorTest::::invalidLetterFormatTest()","142":"UsedProductsPlaceholderPopulatorTest::::invalidLetterFormatTest()","143":"UsedProductsPlaceholderPopulatorTest::::invalidLetterFormatTest()","145":"UsedProductsPlaceholderPopulatorTest::::getEvents(int[])","146":"UsedProductsPlaceholderPopulatorTest::::getEvents(int[])","147":"UsedProductsPlaceholderPopulatorTest::::getEvents(int[])","148":"UsedProductsPlaceholderPopulatorTest::::getEvents(int[])","149":"UsedProductsPlaceholderPopulatorTest::::getEvents(int[])","150":"UsedProductsPlaceholderPopulatorTest::::getEvents(int[])","151":"UsedProductsPlaceholderPopulatorTest::::getEvents(int[])","152":"UsedProductsPlaceholderPopulatorTest::::getEvents(int[])","153":"UsedProductsPlaceholderPopulatorTest::::getEvents(int[])","154":"UsedProductsPlaceholderPopulatorTest::::getEvents(int[])","155":"UsedProductsPlaceholderPopulatorTest::::getEvents(int[])","156":"UsedProductsPlaceholderPopulatorTest::::getEvents(int[])"},"tests":[{"test_lines":[46,52],"covered_lines":[70,72,87,88],"label":"UsedProductsPlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)"},{"test_lines":[54,58],"covered_lines":[70,72,87,92,93,94,95,97,98,99,100,101,102,103,107,108,110,114,115,117,118,119,127,151,152,153,154,156,157,158,161,163,164,167,171,175,202,203,204,205],"label":"UsedProductsPlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)"},{"test_lines":[60,64],"covered_lines":[70,72,87,92,93,94,95,97,98,99,100,101,102,103,107,108,110,114,115,117,118,119,127,151,152,153,154,156,157,158,161,163,164,167,171,175,202,203,204,205],"label":"UsedProductsPlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)"},{"test_lines":[66,70],"covered_lines":[70,72,87,92,93,94,95,97,98,99,100,101,102,103,107,108,110,114,115,117,118,120,121,127,131,132,151,152,153,154,156,157,158,161,163,164,167,171,175,202,203,204,205],"label":"UsedProductsPlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)"},{"test_lines":[72,76],"covered_lines":[70,72,87,92,93,94,95,97,98,99,100,101,102,103,104,107,108,110,114,115,117,118,120,121,127,131,132,151,152,153,154,156,157,158,161,163,164,167,171,175,202,203,204,205],"label":"UsedProductsPlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)"},{"test_lines":[78,82],"covered_lines":[70,72,87,92,93,94,95,97,98,99,100,101,102,103,104,107,108,110,114,115,117,118,120,121,127,131,132,151,152,153,154,156,157,158,161,163,164,167,171,175,180,183,187,189,190,193,194,197,202,203,204,205],"label":"UsedProductsPlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)"},{"test_lines":[84,88],"covered_lines":[70,72,87,92,93,94,95,97,98,99,100,101,102,103,107,108,110,114,115,117,118,120,121,127,131,133,134,151,152,153,154,156,157,158,161,163,164,167,171,175,202,203,204,205],"label":"UsedProductsPlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)"},{"test_lines":[90,94],"covered_lines":[70,72,87,92,93,94,95,97,98,99,100,101,102,103,104,107,108,110,114,115,117,118,120,121,127,131,133,134,151,152,153,154,156,157,158,161,163,164,167,171,175,202,203,204,205],"label":"UsedProductsPlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)"},{"test_lines":[96,100],"covered_lines":[70,72,87,92,93,94,95,97,98,99,100,101,102,103,104,107,108,110,114,115,117,118,120,121,127,131,133,134,151,152,153,154,156,157,158,161,163,164,167,171,175,180,183,187,189,190,193,194,197,202,203,204,205],"label":"UsedProductsPlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)"},{"test_lines":[102,106],"covered_lines":[70,72,87,92,93,94,95,97,98,99,100,101,102,103,107,108,110,114,115,117,118,120,121,127,131,133,135,136,151,152,153,154,156,157,158,161,163,164,167,171,175,202,203,204,205],"label":"UsedProductsPlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)"},{"test_lines":[108,112],"covered_lines":[70,72,87,92,93,94,95,97,98,99,100,101,102,103,104,107,108,110,114,115,117,118,120,121,127,131,133,135,136,151,152,153,154,156,157,158,161,163,164,167,171,175,202,203,204,205],"label":"UsedProductsPlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)"},{"test_lines":[114,118],"covered_lines":[70,72,87,92,93,94,95,97,98,99,100,101,102,103,104,107,108,110,114,115,117,118,120,121,127,131,133,135,136,151,152,153,154,156,157,158,161,163,164,167,171,175,180,183,187,189,190,193,194,197,202,203,204,205],"label":"UsedProductsPlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)"},{"test_lines":[120,124],"covered_lines":[70,72,87,92,93,94,95,97,98,99,100,101,102,103,104,107,108,110,114,115,117,118,119,120,121,123,127,131,132,133,134,135,136,151,152,153,154,156,157,158,161,163,164,167,171,175,180,183,187,189,190,193,194,197,202,203,204,205],"label":"UsedProductsPlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)"},{"test_lines":[126,134],"covered_lines":[70,72,87,92,93,94,95,97,98,99,100,101,102,103,107,108,110,114,115,117,118,119,120,121,123,127,131,132,133,134,135,136,151,152,153,154,156,157,158,159,163,164,167,171,175,202,203,204,205],"label":"UsedProductsPlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)"},{"test_lines":[136,143],"covered_lines":[70,72,87,92,93,94,95,97,98,114,115,117,118,120,121,131,132,133,134,135,136,138,139,151,152,153,154,156,157,158,161,163,164,167,171,175,202,203,204,205],"label":"UsedProductsPlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)"}]},"/bernard/dataset_construction/prep/repos/itext-java/commons/src/main/java/com/itextpdf/commons/actions/producer/CopyrightSincePlaceholderPopulator.java":{"class_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.actions.producer;\n","\n","import com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper;\n","import com.itextpdf.commons.exceptions.CommonsExceptionMessageConstant;\n","import com.itextpdf.commons.utils.MessageFormatUtil;\n","\n","import java.util.List;\n","\n","/**\n"," * Class is used to populate <code>copyrightSince</code> placeholder. The resulting string is a\n"," * representation of the first year of copyright years range. Among all products involved into\n"," * product creation the earliest <code>copyrightSince</code> year is picked as a resulting value.\n"," */\n","class CopyrightSincePlaceholderPopulator implements IPlaceholderPopulator {\n","\n","    public CopyrightSincePlaceholderPopulator() {\n","        // Empty constructor.\n","    }\n","\n","    /**\n","     * Builds a replacement for a placeholder <code>copyrightSince</code> in accordance with the\n","     * registered events.\n","     *\n","     * @param events is a list of event involved into document processing. It is expected that it\n","     *               is not empty as such cases should be handled by {@link ProducerBuilder} without\n","     *               calling any {@link IPlaceholderPopulator}\n","     * @param parameter is a parameter for the placeholder. It should be <code>null</code> as\n","     *                  <code>copyrightSince</code> as the placeholder is not configurable\n","     *\n","     * @return the earliest copyright year\n","     *\n","     * @throws IllegalArgumentException if <code>parameter</code> is not <code>null</code>\n","     */\n","    @Override\n","    public String populate(List<ConfirmedEventWrapper> events, String parameter) {\n","\n","        if (parameter != null) {\n","            throw new IllegalArgumentException(MessageFormatUtil.format(\n","                    CommonsExceptionMessageConstant.INVALID_USAGE_CONFIGURATION_FORBIDDEN, \"copyrightSince\")\n","            );\n","        }\n","\n","        // initial value, will be overwritten with product value\n","        int earliestYear = Integer.MAX_VALUE;\n","        for (ConfirmedEventWrapper event : events) {\n","            int currentYear = event.getEvent().getProductData().getSinceCopyrightYear();\n","            if (currentYear < earliestYear) {\n","                earliestYear = currentYear;\n","            }\n","        }\n","        return String.valueOf(earliestYear);\n","    }\n","}\n"],"test_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.actions.producer;\n","\n","import com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper;\n","import com.itextpdf.commons.actions.data.ProductData;\n","import com.itextpdf.commons.ecosystem.ITextTestEvent;\n","import com.itextpdf.commons.actions.sequence.SequenceId;\n","import com.itextpdf.test.ExtendedITextTest;\n","import com.itextpdf.test.annotations.type.UnitTest;\n","\n","import java.util.ArrayList;\n","import java.util.List;\n","import org.junit.Assert;\n","import org.junit.Test;\n","import org.junit.experimental.categories.Category;\n","\n","@Category(UnitTest.class)\n","public class CopyrightSincePlaceholderPopulatorTest extends ExtendedITextTest {\n","    private CopyrightSincePlaceholderPopulator populator = new CopyrightSincePlaceholderPopulator();\n","\n","    @Test\n","    public void oneEventTest() {\n","        List<ConfirmedEventWrapper> events = getEvents(1994);\n","        String result = populator.populate(events, null);\n","        Assert.assertEquals(\"1994\", result);\n","    }\n","\n","    @Test\n","    public void severalEventsTest() {\n","        List<ConfirmedEventWrapper> events = getEvents(2012, 1994, 1998);\n","        String result = populator.populate(events, null);\n","        Assert.assertEquals(\"1994\", result);\n","    }\n","\n","    @Test\n","    public void severalEventsWithSameYearTest() {\n","        List<ConfirmedEventWrapper> events = getEvents(1992, 1998, 1992, 1998);\n","        String result = populator.populate(events, null);\n","        Assert.assertEquals(\"1992\", result);\n","    }\n","\n","\n","    private List<ConfirmedEventWrapper> getEvents(int ... years) {\n","        List<ConfirmedEventWrapper> events = new ArrayList<>();\n","        for (int year : years) {\n","            final ProductData productData = new ProductData(\"iText Test\", \"itext-test\", \"25.3\", year, 2021);\n","            events.add(new ConfirmedEventWrapper(\n","                    new ITextTestEvent(new SequenceId(), productData, null, \"testing\"),\n","                    \"AGPL\", \"iText test product line\"));\n","        }\n","        return events;\n","    }\n","}\n"],"method_lines_dic":{"CopyrightSincePlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)":[56,74]},"test_method_lines_dic":{"CopyrightSincePlaceholderPopulatorTest::::oneEventTest()":[42,47],"CopyrightSincePlaceholderPopulatorTest::::severalEventsTest()":[49,54],"CopyrightSincePlaceholderPopulatorTest::::severalEventsWithSameYearTest()":[56,61],"CopyrightSincePlaceholderPopulatorTest::::getEvents(int[])":[64,73]},"reverse_method_lines_dic":{"56":"CopyrightSincePlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)","57":"CopyrightSincePlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)","58":"CopyrightSincePlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)","59":"CopyrightSincePlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)","60":"CopyrightSincePlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)","61":"CopyrightSincePlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)","62":"CopyrightSincePlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)","63":"CopyrightSincePlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)","64":"CopyrightSincePlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)","65":"CopyrightSincePlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)","66":"CopyrightSincePlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)","67":"CopyrightSincePlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)","68":"CopyrightSincePlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)","69":"CopyrightSincePlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)","70":"CopyrightSincePlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)","71":"CopyrightSincePlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)","72":"CopyrightSincePlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)","73":"CopyrightSincePlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)","74":"CopyrightSincePlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)"},"test_reverse_method_lines_dic":{"42":"CopyrightSincePlaceholderPopulatorTest::::oneEventTest()","43":"CopyrightSincePlaceholderPopulatorTest::::oneEventTest()","44":"CopyrightSincePlaceholderPopulatorTest::::oneEventTest()","45":"CopyrightSincePlaceholderPopulatorTest::::oneEventTest()","46":"CopyrightSincePlaceholderPopulatorTest::::oneEventTest()","47":"CopyrightSincePlaceholderPopulatorTest::::oneEventTest()","49":"CopyrightSincePlaceholderPopulatorTest::::severalEventsTest()","50":"CopyrightSincePlaceholderPopulatorTest::::severalEventsTest()","51":"CopyrightSincePlaceholderPopulatorTest::::severalEventsTest()","52":"CopyrightSincePlaceholderPopulatorTest::::severalEventsTest()","53":"CopyrightSincePlaceholderPopulatorTest::::severalEventsTest()","54":"CopyrightSincePlaceholderPopulatorTest::::severalEventsTest()","56":"CopyrightSincePlaceholderPopulatorTest::::severalEventsWithSameYearTest()","57":"CopyrightSincePlaceholderPopulatorTest::::severalEventsWithSameYearTest()","58":"CopyrightSincePlaceholderPopulatorTest::::severalEventsWithSameYearTest()","59":"CopyrightSincePlaceholderPopulatorTest::::severalEventsWithSameYearTest()","60":"CopyrightSincePlaceholderPopulatorTest::::severalEventsWithSameYearTest()","61":"CopyrightSincePlaceholderPopulatorTest::::severalEventsWithSameYearTest()","64":"CopyrightSincePlaceholderPopulatorTest::::getEvents(int[])","65":"CopyrightSincePlaceholderPopulatorTest::::getEvents(int[])","66":"CopyrightSincePlaceholderPopulatorTest::::getEvents(int[])","67":"CopyrightSincePlaceholderPopulatorTest::::getEvents(int[])","68":"CopyrightSincePlaceholderPopulatorTest::::getEvents(int[])","69":"CopyrightSincePlaceholderPopulatorTest::::getEvents(int[])","70":"CopyrightSincePlaceholderPopulatorTest::::getEvents(int[])","71":"CopyrightSincePlaceholderPopulatorTest::::getEvents(int[])","72":"CopyrightSincePlaceholderPopulatorTest::::getEvents(int[])","73":"CopyrightSincePlaceholderPopulatorTest::::getEvents(int[])"},"tests":[{"test_lines":[42,47],"covered_lines":[38,40,59,66,67,68,69,70,72,73],"label":"CopyrightSincePlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)"},{"test_lines":[49,54],"covered_lines":[38,40,59,66,67,68,69,70,72,73],"label":"CopyrightSincePlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)"},{"test_lines":[56,61],"covered_lines":[38,40,59,66,67,68,69,70,72,73],"label":"CopyrightSincePlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)"}]},"/bernard/dataset_construction/prep/repos/itext-java/commons/src/main/java/com/itextpdf/commons/actions/producer/ProducerBuilder.java":{"class_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.actions.producer;\n","\n","import com.itextpdf.commons.actions.AbstractITextConfigurationEvent;\n","import com.itextpdf.commons.actions.AbstractProductProcessITextEvent;\n","import com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper;\n","import com.itextpdf.commons.actions.processors.ITextProductEventProcessor;\n","import com.itextpdf.commons.exceptions.CommonsExceptionMessageConstant;\n","import com.itextpdf.commons.logs.CommonsLogMessageConstant;\n","import com.itextpdf.commons.utils.MessageFormatUtil;\n","\n","import java.util.ArrayList;\n","import java.util.Collections;\n","import java.util.HashMap;\n","import java.util.List;\n","import java.util.Map;\n","import java.util.regex.Matcher;\n","import java.util.regex.Pattern;\n","import org.slf4j.Logger;\n","import org.slf4j.LoggerFactory;\n","\n","/**\n"," * Class is used for producer line building.\n"," */\n","public final class ProducerBuilder extends AbstractITextConfigurationEvent {\n","    private static final Logger LOGGER = LoggerFactory.getLogger(ProducerBuilder.class);\n","\n","    private static final ProducerBuilder INSTANCE = new ProducerBuilder();\n","\n","    private static final String CURRENT_DATE = \"currentDate\";\n","    private static final String USED_PRODUCTS = \"usedProducts\";\n","    private static final String COPYRIGHT_SINCE = \"copyrightSince\";\n","    private static final String COPYRIGHT_TO = \"copyrightTo\";\n","\n","    private static final char FORMAT_DELIMITER = ':';\n","\n","    private static final String MODIFIED_USING = \"; modified using \";\n","\n","    /**\n","     * Pattern is used to search a placeholders. Currently it searches substrings started with\n","     * <code>${</code> and ended with <code>}</code> without <code>}</code> character inside.\n","     * These substrings are interpreted as placeholders and the first group is the content of the\n","     * placeholder.\n","     * Note: The escape on '}' is necessary for regex dialect compatibility reasons.\n","     */\n","    private static final String PATTERN_STRING = \"\\\\$\\\\{([^}]*)\\\\}\";\n","    private static final Pattern PATTERN = Pattern.compile(PATTERN_STRING);\n","\n","    private static final Map<String, IPlaceholderPopulator> PLACEHOLDER_POPULATORS;\n","\n","    static {\n","        final Map<String, IPlaceholderPopulator> populators = new HashMap<>();\n","        populators.put(CURRENT_DATE, new CurrentDatePlaceholderPopulator());\n","        populators.put(USED_PRODUCTS, new UsedProductsPlaceholderPopulator());\n","        populators.put(COPYRIGHT_SINCE, new CopyrightSincePlaceholderPopulator());\n","        populators.put(COPYRIGHT_TO, new CopyrightToPlaceholderPopulator());\n","\n","        PLACEHOLDER_POPULATORS = Collections.unmodifiableMap(populators);\n","    }\n","\n","    private ProducerBuilder() { }\n","\n","    /**\n","     * Modifies an old producer line according to events registered for the document.\n","     * Events can be either wrapped with {@link ConfirmedEventWrapper} or not.\n","     * Format of the new producer line will be defined by the first event in the list.\n","     * Placeholder will be replaced and merged all together\n","     *\n","     * @param events      list of events registered for the document\n","     * @param oldProducer old producer line. If <code>null</code> or empty, will be replaced\n","     *                    with a new one. Otherwise new line will be attached with\n","     *                    <code>modified using</code> prefix. If old producer line already contains\n","     *                    <code>modified using</code> substring, it will be overriden with a new one\n","     * @return modified producer line\n","     */\n","    public static String modifyProducer(List<? extends AbstractProductProcessITextEvent> events, String oldProducer) {\n","        List<ConfirmedEventWrapper> confirmedEvents = new ArrayList<>();\n","        if (events != null) {\n","            for (AbstractProductProcessITextEvent event : events) {\n","                if (event instanceof ConfirmedEventWrapper) {\n","                    confirmedEvents.add((ConfirmedEventWrapper) event);\n","                } else {\n","                    ITextProductEventProcessor processor = INSTANCE.getActiveProcessor(event.getProductName());\n","                    confirmedEvents.add(new ConfirmedEventWrapper(event, processor.getUsageType(), processor.getProducer()));\n","                }\n","            }\n","        }\n","\n","        final String newProducer = buildProducer(confirmedEvents);\n","        if (oldProducer == null || oldProducer.isEmpty()) {\n","            return newProducer;\n","        } else {\n","            return oldProducer + MODIFIED_USING + newProducer;\n","        }\n","    }\n","\n","    /**\n","     * Configuration events for util internal purposes are not expected to be sent.\n","     *\n","     * @throws IllegalStateException on every method call\n","     */\n","    @Override\n","    protected void doAction() {\n","        throw new IllegalStateException(\"Configuration events for util internal purposes are not expected to be sent\");\n","    }\n","\n","    private static String buildProducer(List<ConfirmedEventWrapper> events) {\n","        if (events == null || events.isEmpty()) {\n","            throw new IllegalArgumentException(\n","                    CommonsExceptionMessageConstant.NO_EVENTS_WERE_REGISTERED_FOR_THE_DOCUMENT);\n","        }\n","\n","        // we expects here that the first event was thrown by\n","        // the addon which may be considered as entry point of\n","        // document processing\n","        final String producer = events.get(0).getProducerLine();\n","\n","        return populatePlaceholders(producer, events);\n","    }\n","\n","    private static String populatePlaceholders(String producerLine, List<ConfirmedEventWrapper> events) {\n","        int lastIndex = 0;\n","        Matcher matcher = PATTERN.matcher(producerLine);\n","\n","        final StringBuilder builder = new StringBuilder();\n","        while (matcher.find()) {\n","            builder.append(producerLine.substring(lastIndex, matcher.start()));\n","            lastIndex = matcher.end();\n","\n","            final String placeholder = matcher.group(1);\n","            final int delimiterPosition = placeholder.indexOf(FORMAT_DELIMITER);\n","            String placeholderName;\n","            String parameter = null;\n","            if (placeholder.indexOf(FORMAT_DELIMITER) == -1) {\n","                placeholderName = placeholder;\n","            } else {\n","                placeholderName = placeholder.substring(0, delimiterPosition);\n","                parameter = placeholder.substring(delimiterPosition + 1);\n","            }\n","\n","            final IPlaceholderPopulator populator = PLACEHOLDER_POPULATORS.get(placeholderName);\n","            if (populator == null) {\n","                LOGGER.info(MessageFormatUtil.format(\n","                        CommonsLogMessageConstant.UNKNOWN_PLACEHOLDER_WAS_IGNORED, placeholderName));\n","            } else {\n","                builder.append(populator.populate(events, parameter));\n","            }\n","        }\n","        builder.append(producerLine.substring(lastIndex));\n","        return builder.toString();\n","    }\n","}\n"],"test_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.actions.producer;\n","\n","import com.itextpdf.commons.actions.AbstractProductProcessITextEvent;\n","import com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper;\n","import com.itextpdf.commons.actions.data.ProductData;\n","import com.itextpdf.commons.actions.sequence.SequenceId;\n","import com.itextpdf.commons.ecosystem.ITextTestEvent;\n","import com.itextpdf.commons.exceptions.CommonsExceptionMessageConstant;\n","import com.itextpdf.commons.logs.CommonsLogMessageConstant;\n","import com.itextpdf.commons.utils.DateTimeUtil;\n","import com.itextpdf.commons.utils.MessageFormatUtil;\n","import com.itextpdf.test.ExtendedITextTest;\n","import com.itextpdf.test.LogLevelConstants;\n","import com.itextpdf.test.annotations.LogMessage;\n","import com.itextpdf.test.annotations.LogMessages;\n","import com.itextpdf.test.annotations.type.UnitTest;\n","\n","import java.util.ArrayList;\n","import java.util.Collections;\n","import java.util.List;\n","import org.junit.Assert;\n","import org.junit.Test;\n","import org.junit.experimental.categories.Category;\n","\n","@Category(UnitTest.class)\n","public class ProducerBuilderTest extends ExtendedITextTest {\n","\n","    @Test\n","    public void emptyEventsProducerLineTest() {\n","        Exception exception = Assert.assertThrows(IllegalArgumentException.class,\n","                () -> ProducerBuilder.modifyProducer(Collections.<AbstractProductProcessITextEvent>emptyList(), null));\n","        Assert.assertEquals(CommonsExceptionMessageConstant.NO_EVENTS_WERE_REGISTERED_FOR_THE_DOCUMENT,\n","                exception.getMessage());\n","    }\n","\n","    @Test\n","    public void nullEventsProducerLineTest() {\n","        Exception exception = Assert.assertThrows(IllegalArgumentException.class,\n","                () -> ProducerBuilder.modifyProducer((List<AbstractProductProcessITextEvent>)null, null));\n","        Assert.assertEquals(CommonsExceptionMessageConstant.NO_EVENTS_WERE_REGISTERED_FOR_THE_DOCUMENT,\n","                exception.getMessage());\n","    }\n","\n","    @Test\n","    public void plainTextNewProducerLineTest() {\n","        List<ConfirmedEventWrapper> events = getEvents(\"Plain Text\", 1, 2, 3);\n","        String newProducerLine = ProducerBuilder.modifyProducer(events, null);\n","\n","        Assert.assertEquals(\"Plain Text\", newProducerLine);\n","    }\n","\n","    @Test\n","    public void plainTextEmptyOldProducerLineTest() {\n","        List<ConfirmedEventWrapper> events = getEvents(\"Plain Text\", 1, 2, 3);\n","        String newProducerLine = ProducerBuilder.modifyProducer(events, \"\");\n","\n","        Assert.assertEquals(\"Plain Text\", newProducerLine);\n","    }\n","\n","    @Test\n","    public void plainTextExistingOldProducerLineTest() {\n","        List<ConfirmedEventWrapper> events = getEvents(\"Plain Text\", 1, 2, 3);\n","        String newProducerLine = ProducerBuilder.modifyProducer(events, \"Old producer\");\n","\n","        Assert.assertEquals(\"Old producer; modified using Plain Text\", newProducerLine);\n","    }\n","\n","    @Test\n","    public void plainTextExistingOldProducerWithModifiedPartLineTest() {\n","        List<ConfirmedEventWrapper> events = getEvents(\"New Author\", 1, 2, 3);\n","        String newProducerLine = ProducerBuilder.modifyProducer(events, \"Old producer; modified using Plain Text\");\n","\n","        Assert.assertEquals(\"Old producer; modified using Plain Text; modified using New Author\", newProducerLine);\n","    }\n","\n","\n","    @Test\n","    public void copyrightSinceProducerLineTest() {\n","        List<ConfirmedEventWrapper> events = getEvents(\"Prod. since ${copyrightSince}\", 1, 2, 3);\n","        String newProducerLine = ProducerBuilder.modifyProducer(events, null);\n","\n","        Assert.assertEquals(\"Prod. since 1901\", newProducerLine);\n","    }\n","\n","    @Test\n","    public void copyrightToProducerLineTest() {\n","        List<ConfirmedEventWrapper> events = getEvents(\"All rights reserved, ${copyrightTo}\", 1, 2, 3);\n","        String newProducerLine = ProducerBuilder.modifyProducer(events, null);\n","\n","        Assert.assertEquals(\"All rights reserved, 2103\", newProducerLine);\n","    }\n","\n","    @Test\n","    public void currentDateProducerLineTest() {\n","        List<ConfirmedEventWrapper> events = getEvents(\"Created at ${currentDate:yyyy}\", 1, 2, 3);\n","        String newProducerLine = ProducerBuilder.modifyProducer(events, null);\n","\n","        Assert.assertEquals(\"Created at \" + DateTimeUtil.format(DateTimeUtil.getCurrentTimeDate(), \"yyyy\"), newProducerLine);\n","    }\n","\n","    @Test\n","    public void currentDateComplexFormatProducerLineTest() {\n","        List<ConfirmedEventWrapper> events = getEvents(\"Created at ${currentDate:yyyy, '{\\\\'yes::yes\\\\'', yyyy}\", 1, 2, 3);\n","        String newProducerLine = ProducerBuilder.modifyProducer(events, null);\n","        String currentYear = DateTimeUtil.format(DateTimeUtil.getCurrentTimeDate(), \"yyyy\");\n","\n","        Assert.assertEquals(\"Created at \" + currentYear + \", {'yes::yes', \" + currentYear, newProducerLine);\n","    }\n","\n","    @Test\n","    public void currentDatePlaceholderFormatProducerLineTest() {\n","        List<ConfirmedEventWrapper> events = getEvents(\"Created at ${currentDate:'${currentDate'}\", 1, 2, 3);\n","        String newProducerLine = ProducerBuilder.modifyProducer(events, null);\n","\n","        Assert.assertEquals(\"Created at ${currentDate\", newProducerLine);\n","    }\n","\n","    @Test\n","    public void currentDateNoFormatProducerLineTest() {\n","        List<ConfirmedEventWrapper> events = getEvents(\"Created at ${currentDate}\", 1, 2, 3);\n","        Exception exception = Assert.assertThrows(IllegalArgumentException.class,\n","                () -> ProducerBuilder.modifyProducer(events, null));\n","        Assert.assertEquals(MessageFormatUtil.format(CommonsExceptionMessageConstant.INVALID_USAGE_FORMAT_REQUIRED, \"currentDate\"),\n","                exception.getMessage());\n","    }\n","\n","    @Test\n","    public void currentDateEmptyFormatProducerLineTest() {\n","        List<ConfirmedEventWrapper> events = getEvents(\"Created at ${currentDate:}\", 1, 2, 3);\n","        String newProducerLine = ProducerBuilder.modifyProducer(events, null);\n","\n","        Assert.assertEquals(\"Created at \", newProducerLine);\n","    }\n","\n","    @Test\n","    public void usedProductsProducerLineTest() {\n","        List<ConfirmedEventWrapper> events = getEvents(\"Used products: ${usedProducts:P #V (T 'version')}\", 1, 2, 3);\n","        String newProducerLine = ProducerBuilder.modifyProducer(events, null);\n","\n","        Assert.assertEquals(\n","                \"Used products: product1 #1.0 (type1 version), product2 #2.0 (type2 version), product3 #3.0 (type3 version)\",\n","                newProducerLine);\n","    }\n","\n","    @Test\n","    public void usedProductsEmptyFormatProducerLineTest() {\n","        List<ConfirmedEventWrapper> events = getEvents(\"Used products: ${usedProducts}\", 1, 2, 3);\n","        Exception exception = Assert.assertThrows(IllegalArgumentException.class,\n","                () -> ProducerBuilder.modifyProducer(events, null));\n","        Assert.assertEquals(MessageFormatUtil.format(CommonsExceptionMessageConstant.INVALID_USAGE_FORMAT_REQUIRED, \"usedProducts\"),\n","                exception.getMessage());\n","    }\n","\n","    @Test\n","    @LogMessages(messages = {\n","            @LogMessage(messageTemplate = CommonsLogMessageConstant.UNKNOWN_PLACEHOLDER_WAS_IGNORED, count = 3, logLevel = LogLevelConstants.INFO)\n","    })\n","    public void unknownPlaceHoldersTest() {\n","        List<ConfirmedEventWrapper> events =\n","                getEvents(\"${plchldr}|${plchldrWithParam:param}|${plchldrWithWeirdParam::$$:'''\\\\''}\", 1, 2, 3);\n","        String newProducerLine = ProducerBuilder.modifyProducer(events, null);\n","\n","        Assert.assertEquals(\"||\", newProducerLine);\n","    }\n","\n","    private List<ConfirmedEventWrapper> getEvents(String initialProducerLine, int ... indexes) {\n","        List<ConfirmedEventWrapper> events = new ArrayList<>();\n","\n","        for (int ind = 0; ind < indexes.length; ind++) {\n","            int i = indexes[ind];\n","            final ProductData productData = new ProductData(\"product\" + i, \"module\" + i, i + \".0\", 1900 + i, 2100 + i);\n","            events.add(new ConfirmedEventWrapper(\n","                    new ITextTestEvent(new SequenceId(), productData, null, \"testing\" + i),\n","                    \"type\" + i, ind == 0 ? initialProducerLine : \"iText product \" + i));\n","        }\n","\n","        return events;\n","    }\n","}\n"],"method_lines_dic":{"ProducerBuilder::::modifyProducer(java.util.List<? extends com.itextpdf.commons.actions.AbstractProductProcessITextEvent>,java.lang.String)":[97,116],"ProducerBuilder::::doAction()":[123,126],"ProducerBuilder::::buildProducer(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>)":[128,140],"ProducerBuilder::::populatePlaceholders(java.lang.String,java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>)":[142,172]},"test_method_lines_dic":{"ProducerBuilderTest::::emptyEventsProducerLineTest()":[50,56],"ProducerBuilderTest::::nullEventsProducerLineTest()":[58,64],"ProducerBuilderTest::::plainTextNewProducerLineTest()":[66,72],"ProducerBuilderTest::::plainTextEmptyOldProducerLineTest()":[74,80],"ProducerBuilderTest::::plainTextExistingOldProducerLineTest()":[82,88],"ProducerBuilderTest::::plainTextExistingOldProducerWithModifiedPartLineTest()":[90,96],"ProducerBuilderTest::::copyrightSinceProducerLineTest()":[99,105],"ProducerBuilderTest::::copyrightToProducerLineTest()":[107,113],"ProducerBuilderTest::::currentDateProducerLineTest()":[115,121],"ProducerBuilderTest::::currentDateComplexFormatProducerLineTest()":[123,130],"ProducerBuilderTest::::currentDatePlaceholderFormatProducerLineTest()":[132,138],"ProducerBuilderTest::::currentDateNoFormatProducerLineTest()":[140,147],"ProducerBuilderTest::::currentDateEmptyFormatProducerLineTest()":[149,155],"ProducerBuilderTest::::usedProductsProducerLineTest()":[157,165],"ProducerBuilderTest::::usedProductsEmptyFormatProducerLineTest()":[167,174],"ProducerBuilderTest::::unknownPlaceHoldersTest()":[176,186],"ProducerBuilderTest::::getEvents(java.lang.String,int[])":[188,200]},"reverse_method_lines_dic":{"97":"ProducerBuilder::::modifyProducer(java.util.List<? extends com.itextpdf.commons.actions.AbstractProductProcessITextEvent>,java.lang.String)","98":"ProducerBuilder::::modifyProducer(java.util.List<? extends com.itextpdf.commons.actions.AbstractProductProcessITextEvent>,java.lang.String)","99":"ProducerBuilder::::modifyProducer(java.util.List<? extends com.itextpdf.commons.actions.AbstractProductProcessITextEvent>,java.lang.String)","100":"ProducerBuilder::::modifyProducer(java.util.List<? extends com.itextpdf.commons.actions.AbstractProductProcessITextEvent>,java.lang.String)","101":"ProducerBuilder::::modifyProducer(java.util.List<? extends com.itextpdf.commons.actions.AbstractProductProcessITextEvent>,java.lang.String)","102":"ProducerBuilder::::modifyProducer(java.util.List<? extends com.itextpdf.commons.actions.AbstractProductProcessITextEvent>,java.lang.String)","103":"ProducerBuilder::::modifyProducer(java.util.List<? extends com.itextpdf.commons.actions.AbstractProductProcessITextEvent>,java.lang.String)","104":"ProducerBuilder::::modifyProducer(java.util.List<? extends com.itextpdf.commons.actions.AbstractProductProcessITextEvent>,java.lang.String)","105":"ProducerBuilder::::modifyProducer(java.util.List<? extends com.itextpdf.commons.actions.AbstractProductProcessITextEvent>,java.lang.String)","106":"ProducerBuilder::::modifyProducer(java.util.List<? extends com.itextpdf.commons.actions.AbstractProductProcessITextEvent>,java.lang.String)","107":"ProducerBuilder::::modifyProducer(java.util.List<? extends com.itextpdf.commons.actions.AbstractProductProcessITextEvent>,java.lang.String)","108":"ProducerBuilder::::modifyProducer(java.util.List<? extends com.itextpdf.commons.actions.AbstractProductProcessITextEvent>,java.lang.String)","109":"ProducerBuilder::::modifyProducer(java.util.List<? extends com.itextpdf.commons.actions.AbstractProductProcessITextEvent>,java.lang.String)","110":"ProducerBuilder::::modifyProducer(java.util.List<? extends com.itextpdf.commons.actions.AbstractProductProcessITextEvent>,java.lang.String)","111":"ProducerBuilder::::modifyProducer(java.util.List<? extends com.itextpdf.commons.actions.AbstractProductProcessITextEvent>,java.lang.String)","112":"ProducerBuilder::::modifyProducer(java.util.List<? extends com.itextpdf.commons.actions.AbstractProductProcessITextEvent>,java.lang.String)","113":"ProducerBuilder::::modifyProducer(java.util.List<? extends com.itextpdf.commons.actions.AbstractProductProcessITextEvent>,java.lang.String)","114":"ProducerBuilder::::modifyProducer(java.util.List<? extends com.itextpdf.commons.actions.AbstractProductProcessITextEvent>,java.lang.String)","115":"ProducerBuilder::::modifyProducer(java.util.List<? extends com.itextpdf.commons.actions.AbstractProductProcessITextEvent>,java.lang.String)","116":"ProducerBuilder::::modifyProducer(java.util.List<? extends com.itextpdf.commons.actions.AbstractProductProcessITextEvent>,java.lang.String)","123":"ProducerBuilder::::doAction()","124":"ProducerBuilder::::doAction()","125":"ProducerBuilder::::doAction()","126":"ProducerBuilder::::doAction()","128":"ProducerBuilder::::buildProducer(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>)","129":"ProducerBuilder::::buildProducer(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>)","130":"ProducerBuilder::::buildProducer(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>)","131":"ProducerBuilder::::buildProducer(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>)","132":"ProducerBuilder::::buildProducer(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>)","133":"ProducerBuilder::::buildProducer(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>)","134":"ProducerBuilder::::buildProducer(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>)","135":"ProducerBuilder::::buildProducer(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>)","136":"ProducerBuilder::::buildProducer(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>)","137":"ProducerBuilder::::buildProducer(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>)","138":"ProducerBuilder::::buildProducer(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>)","139":"ProducerBuilder::::buildProducer(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>)","140":"ProducerBuilder::::buildProducer(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>)","142":"ProducerBuilder::::populatePlaceholders(java.lang.String,java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>)","143":"ProducerBuilder::::populatePlaceholders(java.lang.String,java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>)","144":"ProducerBuilder::::populatePlaceholders(java.lang.String,java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>)","145":"ProducerBuilder::::populatePlaceholders(java.lang.String,java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>)","146":"ProducerBuilder::::populatePlaceholders(java.lang.String,java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>)","147":"ProducerBuilder::::populatePlaceholders(java.lang.String,java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>)","148":"ProducerBuilder::::populatePlaceholders(java.lang.String,java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>)","149":"ProducerBuilder::::populatePlaceholders(java.lang.String,java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>)","150":"ProducerBuilder::::populatePlaceholders(java.lang.String,java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>)","151":"ProducerBuilder::::populatePlaceholders(java.lang.String,java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>)","152":"ProducerBuilder::::populatePlaceholders(java.lang.String,java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>)","153":"ProducerBuilder::::populatePlaceholders(java.lang.String,java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>)","154":"ProducerBuilder::::populatePlaceholders(java.lang.String,java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>)","155":"ProducerBuilder::::populatePlaceholders(java.lang.String,java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>)","156":"ProducerBuilder::::populatePlaceholders(java.lang.String,java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>)","157":"ProducerBuilder::::populatePlaceholders(java.lang.String,java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>)","158":"ProducerBuilder::::populatePlaceholders(java.lang.String,java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>)","159":"ProducerBuilder::::populatePlaceholders(java.lang.String,java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>)","160":"ProducerBuilder::::populatePlaceholders(java.lang.String,java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>)","161":"ProducerBuilder::::populatePlaceholders(java.lang.String,java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>)","162":"ProducerBuilder::::populatePlaceholders(java.lang.String,java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>)","163":"ProducerBuilder::::populatePlaceholders(java.lang.String,java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>)","164":"ProducerBuilder::::populatePlaceholders(java.lang.String,java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>)","165":"ProducerBuilder::::populatePlaceholders(java.lang.String,java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>)","166":"ProducerBuilder::::populatePlaceholders(java.lang.String,java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>)","167":"ProducerBuilder::::populatePlaceholders(java.lang.String,java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>)","168":"ProducerBuilder::::populatePlaceholders(java.lang.String,java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>)","169":"ProducerBuilder::::populatePlaceholders(java.lang.String,java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>)","170":"ProducerBuilder::::populatePlaceholders(java.lang.String,java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>)","171":"ProducerBuilder::::populatePlaceholders(java.lang.String,java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>)","172":"ProducerBuilder::::populatePlaceholders(java.lang.String,java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>)"},"test_reverse_method_lines_dic":{"50":"ProducerBuilderTest::::emptyEventsProducerLineTest()","51":"ProducerBuilderTest::::emptyEventsProducerLineTest()","52":"ProducerBuilderTest::::emptyEventsProducerLineTest()","53":"ProducerBuilderTest::::emptyEventsProducerLineTest()","54":"ProducerBuilderTest::::emptyEventsProducerLineTest()","55":"ProducerBuilderTest::::emptyEventsProducerLineTest()","56":"ProducerBuilderTest::::emptyEventsProducerLineTest()","58":"ProducerBuilderTest::::nullEventsProducerLineTest()","59":"ProducerBuilderTest::::nullEventsProducerLineTest()","60":"ProducerBuilderTest::::nullEventsProducerLineTest()","61":"ProducerBuilderTest::::nullEventsProducerLineTest()","62":"ProducerBuilderTest::::nullEventsProducerLineTest()","63":"ProducerBuilderTest::::nullEventsProducerLineTest()","64":"ProducerBuilderTest::::nullEventsProducerLineTest()","66":"ProducerBuilderTest::::plainTextNewProducerLineTest()","67":"ProducerBuilderTest::::plainTextNewProducerLineTest()","68":"ProducerBuilderTest::::plainTextNewProducerLineTest()","69":"ProducerBuilderTest::::plainTextNewProducerLineTest()","70":"ProducerBuilderTest::::plainTextNewProducerLineTest()","71":"ProducerBuilderTest::::plainTextNewProducerLineTest()","72":"ProducerBuilderTest::::plainTextNewProducerLineTest()","74":"ProducerBuilderTest::::plainTextEmptyOldProducerLineTest()","75":"ProducerBuilderTest::::plainTextEmptyOldProducerLineTest()","76":"ProducerBuilderTest::::plainTextEmptyOldProducerLineTest()","77":"ProducerBuilderTest::::plainTextEmptyOldProducerLineTest()","78":"ProducerBuilderTest::::plainTextEmptyOldProducerLineTest()","79":"ProducerBuilderTest::::plainTextEmptyOldProducerLineTest()","80":"ProducerBuilderTest::::plainTextEmptyOldProducerLineTest()","82":"ProducerBuilderTest::::plainTextExistingOldProducerLineTest()","83":"ProducerBuilderTest::::plainTextExistingOldProducerLineTest()","84":"ProducerBuilderTest::::plainTextExistingOldProducerLineTest()","85":"ProducerBuilderTest::::plainTextExistingOldProducerLineTest()","86":"ProducerBuilderTest::::plainTextExistingOldProducerLineTest()","87":"ProducerBuilderTest::::plainTextExistingOldProducerLineTest()","88":"ProducerBuilderTest::::plainTextExistingOldProducerLineTest()","90":"ProducerBuilderTest::::plainTextExistingOldProducerWithModifiedPartLineTest()","91":"ProducerBuilderTest::::plainTextExistingOldProducerWithModifiedPartLineTest()","92":"ProducerBuilderTest::::plainTextExistingOldProducerWithModifiedPartLineTest()","93":"ProducerBuilderTest::::plainTextExistingOldProducerWithModifiedPartLineTest()","94":"ProducerBuilderTest::::plainTextExistingOldProducerWithModifiedPartLineTest()","95":"ProducerBuilderTest::::plainTextExistingOldProducerWithModifiedPartLineTest()","96":"ProducerBuilderTest::::plainTextExistingOldProducerWithModifiedPartLineTest()","99":"ProducerBuilderTest::::copyrightSinceProducerLineTest()","100":"ProducerBuilderTest::::copyrightSinceProducerLineTest()","101":"ProducerBuilderTest::::copyrightSinceProducerLineTest()","102":"ProducerBuilderTest::::copyrightSinceProducerLineTest()","103":"ProducerBuilderTest::::copyrightSinceProducerLineTest()","104":"ProducerBuilderTest::::copyrightSinceProducerLineTest()","105":"ProducerBuilderTest::::copyrightSinceProducerLineTest()","107":"ProducerBuilderTest::::copyrightToProducerLineTest()","108":"ProducerBuilderTest::::copyrightToProducerLineTest()","109":"ProducerBuilderTest::::copyrightToProducerLineTest()","110":"ProducerBuilderTest::::copyrightToProducerLineTest()","111":"ProducerBuilderTest::::copyrightToProducerLineTest()","112":"ProducerBuilderTest::::copyrightToProducerLineTest()","113":"ProducerBuilderTest::::copyrightToProducerLineTest()","115":"ProducerBuilderTest::::currentDateProducerLineTest()","116":"ProducerBuilderTest::::currentDateProducerLineTest()","117":"ProducerBuilderTest::::currentDateProducerLineTest()","118":"ProducerBuilderTest::::currentDateProducerLineTest()","119":"ProducerBuilderTest::::currentDateProducerLineTest()","120":"ProducerBuilderTest::::currentDateProducerLineTest()","121":"ProducerBuilderTest::::currentDateProducerLineTest()","123":"ProducerBuilderTest::::currentDateComplexFormatProducerLineTest()","124":"ProducerBuilderTest::::currentDateComplexFormatProducerLineTest()","125":"ProducerBuilderTest::::currentDateComplexFormatProducerLineTest()","126":"ProducerBuilderTest::::currentDateComplexFormatProducerLineTest()","127":"ProducerBuilderTest::::currentDateComplexFormatProducerLineTest()","128":"ProducerBuilderTest::::currentDateComplexFormatProducerLineTest()","129":"ProducerBuilderTest::::currentDateComplexFormatProducerLineTest()","130":"ProducerBuilderTest::::currentDateComplexFormatProducerLineTest()","132":"ProducerBuilderTest::::currentDatePlaceholderFormatProducerLineTest()","133":"ProducerBuilderTest::::currentDatePlaceholderFormatProducerLineTest()","134":"ProducerBuilderTest::::currentDatePlaceholderFormatProducerLineTest()","135":"ProducerBuilderTest::::currentDatePlaceholderFormatProducerLineTest()","136":"ProducerBuilderTest::::currentDatePlaceholderFormatProducerLineTest()","137":"ProducerBuilderTest::::currentDatePlaceholderFormatProducerLineTest()","138":"ProducerBuilderTest::::currentDatePlaceholderFormatProducerLineTest()","140":"ProducerBuilderTest::::currentDateNoFormatProducerLineTest()","141":"ProducerBuilderTest::::currentDateNoFormatProducerLineTest()","142":"ProducerBuilderTest::::currentDateNoFormatProducerLineTest()","143":"ProducerBuilderTest::::currentDateNoFormatProducerLineTest()","144":"ProducerBuilderTest::::currentDateNoFormatProducerLineTest()","145":"ProducerBuilderTest::::currentDateNoFormatProducerLineTest()","146":"ProducerBuilderTest::::currentDateNoFormatProducerLineTest()","147":"ProducerBuilderTest::::currentDateNoFormatProducerLineTest()","149":"ProducerBuilderTest::::currentDateEmptyFormatProducerLineTest()","150":"ProducerBuilderTest::::currentDateEmptyFormatProducerLineTest()","151":"ProducerBuilderTest::::currentDateEmptyFormatProducerLineTest()","152":"ProducerBuilderTest::::currentDateEmptyFormatProducerLineTest()","153":"ProducerBuilderTest::::currentDateEmptyFormatProducerLineTest()","154":"ProducerBuilderTest::::currentDateEmptyFormatProducerLineTest()","155":"ProducerBuilderTest::::currentDateEmptyFormatProducerLineTest()","157":"ProducerBuilderTest::::usedProductsProducerLineTest()","158":"ProducerBuilderTest::::usedProductsProducerLineTest()","159":"ProducerBuilderTest::::usedProductsProducerLineTest()","160":"ProducerBuilderTest::::usedProductsProducerLineTest()","161":"ProducerBuilderTest::::usedProductsProducerLineTest()","162":"ProducerBuilderTest::::usedProductsProducerLineTest()","163":"ProducerBuilderTest::::usedProductsProducerLineTest()","164":"ProducerBuilderTest::::usedProductsProducerLineTest()","165":"ProducerBuilderTest::::usedProductsProducerLineTest()","167":"ProducerBuilderTest::::usedProductsEmptyFormatProducerLineTest()","168":"ProducerBuilderTest::::usedProductsEmptyFormatProducerLineTest()","169":"ProducerBuilderTest::::usedProductsEmptyFormatProducerLineTest()","170":"ProducerBuilderTest::::usedProductsEmptyFormatProducerLineTest()","171":"ProducerBuilderTest::::usedProductsEmptyFormatProducerLineTest()","172":"ProducerBuilderTest::::usedProductsEmptyFormatProducerLineTest()","173":"ProducerBuilderTest::::usedProductsEmptyFormatProducerLineTest()","174":"ProducerBuilderTest::::usedProductsEmptyFormatProducerLineTest()","176":"ProducerBuilderTest::::unknownPlaceHoldersTest()","177":"ProducerBuilderTest::::unknownPlaceHoldersTest()","178":"ProducerBuilderTest::::unknownPlaceHoldersTest()","179":"ProducerBuilderTest::::unknownPlaceHoldersTest()","180":"ProducerBuilderTest::::unknownPlaceHoldersTest()","181":"ProducerBuilderTest::::unknownPlaceHoldersTest()","182":"ProducerBuilderTest::::unknownPlaceHoldersTest()","183":"ProducerBuilderTest::::unknownPlaceHoldersTest()","184":"ProducerBuilderTest::::unknownPlaceHoldersTest()","185":"ProducerBuilderTest::::unknownPlaceHoldersTest()","186":"ProducerBuilderTest::::unknownPlaceHoldersTest()","188":"ProducerBuilderTest::::getEvents(java.lang.String,int[])","189":"ProducerBuilderTest::::getEvents(java.lang.String,int[])","190":"ProducerBuilderTest::::getEvents(java.lang.String,int[])","191":"ProducerBuilderTest::::getEvents(java.lang.String,int[])","192":"ProducerBuilderTest::::getEvents(java.lang.String,int[])","193":"ProducerBuilderTest::::getEvents(java.lang.String,int[])","194":"ProducerBuilderTest::::getEvents(java.lang.String,int[])","195":"ProducerBuilderTest::::getEvents(java.lang.String,int[])","196":"ProducerBuilderTest::::getEvents(java.lang.String,int[])","197":"ProducerBuilderTest::::getEvents(java.lang.String,int[])","198":"ProducerBuilderTest::::getEvents(java.lang.String,int[])","199":"ProducerBuilderTest::::getEvents(java.lang.String,int[])","200":"ProducerBuilderTest::::getEvents(java.lang.String,int[])"},"tests":[{"test_lines":[50,56],"covered_lines":[47,49,68,73,74,75,76,77,79,80,82,98,99,100,129,130],"label":"ProducerBuilder::::buildProducer(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>)"},{"test_lines":[58,64],"covered_lines":[47,49,68,73,74,75,76,77,79,80,82,98,99,129,130],"label":"ProducerBuilder::::buildProducer(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>)"},{"test_lines":[66,72],"covered_lines":[47,49,68,73,74,75,76,77,79,80,82,98,99,100,101,102,107,110,111,112,129,137,139,143,144,146,147,170,171],"label":"ProducerBuilder::::modifyProducer(java.util.List<? extends com.itextpdf.commons.actions.AbstractProductProcessITextEvent>,java.lang.String)"},{"test_lines":[74,80],"covered_lines":[47,49,68,73,74,75,76,77,79,80,82,98,99,100,101,102,107,110,111,112,129,137,139,143,144,146,147,170,171],"label":"ProducerBuilder::::modifyProducer(java.util.List<? extends com.itextpdf.commons.actions.AbstractProductProcessITextEvent>,java.lang.String)"},{"test_lines":[82,88],"covered_lines":[47,49,68,73,74,75,76,77,79,80,82,98,99,100,101,102,107,110,111,114,129,137,139,143,144,146,147,170,171],"label":"ProducerBuilder::::modifyProducer(java.util.List<? extends com.itextpdf.commons.actions.AbstractProductProcessITextEvent>,java.lang.String)"},{"test_lines":[90,96],"covered_lines":[47,49,68,73,74,75,76,77,79,80,82,98,99,100,101,102,107,110,111,114,129,137,139,143,144,146,147,170,171],"label":"ProducerBuilder::::modifyProducer(java.util.List<? extends com.itextpdf.commons.actions.AbstractProductProcessITextEvent>,java.lang.String)"},{"test_lines":[99,105],"covered_lines":[47,49,68,73,74,75,76,77,79,80,82,98,99,100,101,102,107,110,111,112,129,137,139,143,144,146,147,148,149,151,152,154,155,156,162,163,167,169,170,171],"label":"ProducerBuilder::::modifyProducer(java.util.List<? extends com.itextpdf.commons.actions.AbstractProductProcessITextEvent>,java.lang.String)"},{"test_lines":[107,113],"covered_lines":[47,49,68,73,74,75,76,77,79,80,82,98,99,100,101,102,107,110,111,112,129,137,139,143,144,146,147,148,149,151,152,154,155,156,162,163,167,169,170,171],"label":"ProducerBuilder::::modifyProducer(java.util.List<? extends com.itextpdf.commons.actions.AbstractProductProcessITextEvent>,java.lang.String)"},{"test_lines":[115,121],"covered_lines":[47,49,68,73,74,75,76,77,79,80,82,98,99,100,101,102,107,110,111,112,129,137,139,143,144,146,147,148,149,151,152,154,155,158,159,162,163,167,169,170,171],"label":"ProducerBuilder::::modifyProducer(java.util.List<? extends com.itextpdf.commons.actions.AbstractProductProcessITextEvent>,java.lang.String)"},{"test_lines":[123,130],"covered_lines":[47,49,68,73,74,75,76,77,79,80,82,98,99,100,101,102,107,110,111,112,129,137,139,143,144,146,147,148,149,151,152,154,155,158,159,162,163,167,169,170,171],"label":"ProducerBuilder::::modifyProducer(java.util.List<? extends com.itextpdf.commons.actions.AbstractProductProcessITextEvent>,java.lang.String)"},{"test_lines":[132,138],"covered_lines":[47,49,68,73,74,75,76,77,79,80,82,98,99,100,101,102,107,110,111,112,129,137,139,143,144,146,147,148,149,151,152,154,155,158,159,162,163,167,169,170,171],"label":"ProducerBuilder::::modifyProducer(java.util.List<? extends com.itextpdf.commons.actions.AbstractProductProcessITextEvent>,java.lang.String)"},{"test_lines":[140,147],"covered_lines":[47,49,68,73,74,75,76,77,79,80,82,98,99,100,101,102,107,129,137,143,144,146,147,148,149,151,152,154,155,156],"label":"ProducerBuilder::::modifyProducer(java.util.List<? extends com.itextpdf.commons.actions.AbstractProductProcessITextEvent>,java.lang.String)"},{"test_lines":[149,155],"covered_lines":[47,49,68,73,74,75,76,77,79,80,82,98,99,100,101,102,107,110,111,112,129,137,139,143,144,146,147,148,149,151,152,154,155,158,159,162,163,167,169,170,171],"label":"ProducerBuilder::::modifyProducer(java.util.List<? extends com.itextpdf.commons.actions.AbstractProductProcessITextEvent>,java.lang.String)"},{"test_lines":[157,165],"covered_lines":[47,49,68,73,74,75,76,77,79,80,82,98,99,100,101,102,107,110,111,112,129,137,139,143,144,146,147,148,149,151,152,154,155,158,159,162,163,167,169,170,171],"label":"ProducerBuilder::::modifyProducer(java.util.List<? extends com.itextpdf.commons.actions.AbstractProductProcessITextEvent>,java.lang.String)"},{"test_lines":[167,174],"covered_lines":[47,49,68,73,74,75,76,77,79,80,82,98,99,100,101,102,107,129,137,143,144,146,147,148,149,151,152,154,155,156],"label":"ProducerBuilder::::modifyProducer(java.util.List<? extends com.itextpdf.commons.actions.AbstractProductProcessITextEvent>,java.lang.String)"},{"test_lines":[176,186],"covered_lines":[47,49,68,73,74,75,76,77,79,80,82,98,99,100,101,102,107,110,111,112,129,137,139,143,144,146,147,148,149,151,152,154,155,156,158,159,162,163,164,169,170,171],"label":"ProducerBuilder::::modifyProducer(java.util.List<? extends com.itextpdf.commons.actions.AbstractProductProcessITextEvent>,java.lang.String)"}]},"/bernard/dataset_construction/prep/repos/itext-java/commons/src/main/java/com/itextpdf/commons/actions/producer/CopyrightToPlaceholderPopulator.java":{"class_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.actions.producer;\n","\n","import com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper;\n","import com.itextpdf.commons.exceptions.CommonsExceptionMessageConstant;\n","import com.itextpdf.commons.utils.MessageFormatUtil;\n","\n","import java.util.List;\n","\n","/**\n"," * Class is used to populate <code>copyrightTo</code> placeholder. The resulting string is a\n"," * representation of the last year of copyright years range. Among all products involved into\n"," * product creation the latest <code>copyrightTo</code> year is picked as a resulting value\n"," */\n","class CopyrightToPlaceholderPopulator implements IPlaceholderPopulator {\n","\n","    public CopyrightToPlaceholderPopulator() {\n","        // Empty constructor.\n","    }\n","\n","    /**\n","     * Builds a replacement for a placeholder <code>copyrightTo</code> in accordance with the\n","     * registered events.\n","     *\n","     * @param events is a list of event involved into document processing. It is expected that it\n","     *               is not empty as such cases should be handled by {@link ProducerBuilder} without\n","     *               calling any {@link IPlaceholderPopulator}\n","     * @param parameter is a parameter for the placeholder. It should be <code>null</code> as\n","     *                  <code>copyrightTo</code> as the placeholder is not configurable\n","     *\n","     * @return the latest copyright year\n","     *\n","     * @throws IllegalArgumentException if <code>parameter</code> is not <code>null</code>\n","     */\n","    @Override\n","    public String populate(List<ConfirmedEventWrapper> events, String parameter) {\n","\n","        if (parameter != null) {\n","            throw new IllegalArgumentException(MessageFormatUtil.format(\n","                    CommonsExceptionMessageConstant.INVALID_USAGE_CONFIGURATION_FORBIDDEN, \"copyrightTo\")\n","            );\n","        }\n","\n","        // initial value, will be overwritten with product value\n","        int latestYear = Integer.MIN_VALUE;\n","        for (ConfirmedEventWrapper event : events) {\n","            int currentYear = event.getEvent().getProductData().getToCopyrightYear();\n","            if (currentYear > latestYear) {\n","                latestYear = currentYear;\n","            }\n","        }\n","        return String.valueOf(latestYear);\n","    }\n","}\n"],"test_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.actions.producer;\n","\n","import com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper;\n","import com.itextpdf.commons.actions.data.ProductData;\n","import com.itextpdf.commons.ecosystem.ITextTestEvent;\n","import com.itextpdf.commons.actions.sequence.SequenceId;\n","import com.itextpdf.test.ExtendedITextTest;\n","import com.itextpdf.test.annotations.type.UnitTest;\n","\n","import java.util.ArrayList;\n","import java.util.List;\n","import org.junit.Assert;\n","import org.junit.Test;\n","import org.junit.experimental.categories.Category;\n","\n","@Category(UnitTest.class)\n","public class CopyrightToPlaceholderPopulatorTest extends ExtendedITextTest {\n","    private CopyrightToPlaceholderPopulator populator = new CopyrightToPlaceholderPopulator();\n","\n","    @Test\n","    public void oneEventTest() {\n","        List<ConfirmedEventWrapper> events = getEvents(2010);\n","        String result = populator.populate(events, null);\n","        Assert.assertEquals(\"2010\", result);\n","    }\n","\n","    @Test\n","    public void severalEventsTest() {\n","        List<ConfirmedEventWrapper> events = getEvents(2007, 2030, 2020);\n","        String result = populator.populate(events, null);\n","        Assert.assertEquals(\"2030\", result);\n","    }\n","\n","    @Test\n","    public void severalEventsWithSameYearTest() {\n","        List<ConfirmedEventWrapper> events = getEvents(2009, 1998, 2009, 1998);\n","        String result = populator.populate(events, null);\n","        Assert.assertEquals(\"2009\", result);\n","    }\n","\n","\n","    private List<ConfirmedEventWrapper> getEvents(int ... years) {\n","        List<ConfirmedEventWrapper> events = new ArrayList<>();\n","        for (int year : years) {\n","            final ProductData productData = new ProductData(\"iText Test\", \"itext-test\", \"25.3\", 1900, year);\n","            events.add(new ConfirmedEventWrapper(\n","                    new ITextTestEvent(new SequenceId(), productData, null, \"testing\"),\n","                    \"AGPL\", \"iText test product line\"));\n","        }\n","        return events;\n","    }\n","}\n"],"method_lines_dic":{"CopyrightToPlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)":[56,74]},"test_method_lines_dic":{"CopyrightToPlaceholderPopulatorTest::::oneEventTest()":[42,47],"CopyrightToPlaceholderPopulatorTest::::severalEventsTest()":[49,54],"CopyrightToPlaceholderPopulatorTest::::severalEventsWithSameYearTest()":[56,61],"CopyrightToPlaceholderPopulatorTest::::getEvents(int[])":[64,73]},"reverse_method_lines_dic":{"56":"CopyrightToPlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)","57":"CopyrightToPlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)","58":"CopyrightToPlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)","59":"CopyrightToPlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)","60":"CopyrightToPlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)","61":"CopyrightToPlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)","62":"CopyrightToPlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)","63":"CopyrightToPlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)","64":"CopyrightToPlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)","65":"CopyrightToPlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)","66":"CopyrightToPlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)","67":"CopyrightToPlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)","68":"CopyrightToPlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)","69":"CopyrightToPlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)","70":"CopyrightToPlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)","71":"CopyrightToPlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)","72":"CopyrightToPlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)","73":"CopyrightToPlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)","74":"CopyrightToPlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)"},"test_reverse_method_lines_dic":{"42":"CopyrightToPlaceholderPopulatorTest::::oneEventTest()","43":"CopyrightToPlaceholderPopulatorTest::::oneEventTest()","44":"CopyrightToPlaceholderPopulatorTest::::oneEventTest()","45":"CopyrightToPlaceholderPopulatorTest::::oneEventTest()","46":"CopyrightToPlaceholderPopulatorTest::::oneEventTest()","47":"CopyrightToPlaceholderPopulatorTest::::oneEventTest()","49":"CopyrightToPlaceholderPopulatorTest::::severalEventsTest()","50":"CopyrightToPlaceholderPopulatorTest::::severalEventsTest()","51":"CopyrightToPlaceholderPopulatorTest::::severalEventsTest()","52":"CopyrightToPlaceholderPopulatorTest::::severalEventsTest()","53":"CopyrightToPlaceholderPopulatorTest::::severalEventsTest()","54":"CopyrightToPlaceholderPopulatorTest::::severalEventsTest()","56":"CopyrightToPlaceholderPopulatorTest::::severalEventsWithSameYearTest()","57":"CopyrightToPlaceholderPopulatorTest::::severalEventsWithSameYearTest()","58":"CopyrightToPlaceholderPopulatorTest::::severalEventsWithSameYearTest()","59":"CopyrightToPlaceholderPopulatorTest::::severalEventsWithSameYearTest()","60":"CopyrightToPlaceholderPopulatorTest::::severalEventsWithSameYearTest()","61":"CopyrightToPlaceholderPopulatorTest::::severalEventsWithSameYearTest()","64":"CopyrightToPlaceholderPopulatorTest::::getEvents(int[])","65":"CopyrightToPlaceholderPopulatorTest::::getEvents(int[])","66":"CopyrightToPlaceholderPopulatorTest::::getEvents(int[])","67":"CopyrightToPlaceholderPopulatorTest::::getEvents(int[])","68":"CopyrightToPlaceholderPopulatorTest::::getEvents(int[])","69":"CopyrightToPlaceholderPopulatorTest::::getEvents(int[])","70":"CopyrightToPlaceholderPopulatorTest::::getEvents(int[])","71":"CopyrightToPlaceholderPopulatorTest::::getEvents(int[])","72":"CopyrightToPlaceholderPopulatorTest::::getEvents(int[])","73":"CopyrightToPlaceholderPopulatorTest::::getEvents(int[])"},"tests":[{"test_lines":[42,47],"covered_lines":[38,40,59,66,67,68,69,70,72,73],"label":"CopyrightToPlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)"},{"test_lines":[49,54],"covered_lines":[38,40,59,66,67,68,69,70,72,73],"label":"CopyrightToPlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)"},{"test_lines":[56,61],"covered_lines":[38,40,59,66,67,68,69,70,72,73],"label":"CopyrightToPlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)"}]},"/bernard/dataset_construction/prep/repos/itext-java/commons/src/main/java/com/itextpdf/commons/actions/producer/CurrentDatePlaceholderPopulator.java":{"class_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.actions.producer;\n","\n","import com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper;\n","import com.itextpdf.commons.exceptions.CommonsExceptionMessageConstant;\n","import com.itextpdf.commons.utils.DateTimeUtil;\n","import com.itextpdf.commons.utils.MessageFormatUtil;\n","\n","import java.util.Arrays;\n","import java.util.Date;\n","import java.util.HashSet;\n","import java.util.List;\n","import java.util.Set;\n","\n","/**\n"," * Class is used to populate <code>currentDate</code> placeholder. Placeholder should be configured\n"," * with parameter defining the format of date output. Within format strings, unquoted letters from\n"," * <code>A</code> to <code>Z</code> and from <code>a</code> to <code>z</code> are process as pattern\n"," * letters. Chain of equal pattern letters forms an appropriate component of\n"," * <code>currentDate</code> format. There following components are supported:\n"," *\n"," * <p>\n"," * <ul>\n"," *     <li><code>d</code> is for the day of the month, from 1 through 31\n"," *     <li><code>dd</code> is for the day of the month, from 01 through 31\n"," *     <li><code>M</code> defines the month from 1 to 12\n"," *     <li><code>MM</code> defines the month from 01 to 12\n"," *     <li><code>MMM</code> defines the abbreviated name of the month\n"," *     <li><code>MMMM</code> defines the full name of month\n"," *     <li><code>yy</code> means the year from 00 to 99\n"," *     <li><code>yyyy</code> means the year in for digits format\n"," *     <li><code>s</code> shows current second, from 0 through 59\n"," *     <li><code>ss</code> shows current second, from 00 through 59\n"," *     <li><code>m</code> is replaced with the current minute from 0 to 59\n"," *     <li><code>mm</code> is replaced with the current minute from 00 to 59\n"," *     <li><code>H</code> stands for the current hour, using a 24-hour clock from 0 to 23\n"," *     <li><code>HH</code> stands for the current hour, using a 24-hour clock from 00 to 23\n"," * </ul>\n"," *\n"," * <p>\n"," * Text can be quoted using single quotes (') to avoid interpretation. All other characters are not\n"," * interpreted and just copied into the output string. String may contain escaped apostrophes\n"," * <code>\\'</code> which processed as characters. Backslash is used for escaping so you need double\n"," * backslash to print it <code>\\\\</code>. All the rest backslashes (not followed by apostrophe or\n"," * one more backslash) are simply ignored.\n"," *\n"," * <p>\n"," * The result of the processing is current date representing in accordance with the provided format.\n"," */\n","class CurrentDatePlaceholderPopulator extends AbstractFormattedPlaceholderPopulator {\n","\n","    private static final Set<String> ALLOWED_PATTERNS = new HashSet<>(Arrays.asList(\n","                \"dd\", \"MM\", \"MMM\", \"MMMM\", \"yy\", \"yyyy\", \"ss\", \"mm\", \"HH\"\n","            ));\n","\n","    public CurrentDatePlaceholderPopulator() {\n","        // Empty constructor.\n","    }\n","\n","    /**\n","     * Builds a replacement for a placeholder <code>currentDate</code> in accordance with the\n","     * provided format.\n","     *\n","     * @param events is a list of event involved into document processing. It is not used during\n","     *               the placeholder replacement\n","     * @param parameter defines output format in accordance with the description\n","     *\n","     * @return date of producer line creation in accordance with defined format\n","     *\n","     * @throws IllegalArgumentException if format of the date pattern is invalid\n","     */\n","    @Override\n","    public String populate(List<ConfirmedEventWrapper> events, String parameter) {\n","        if (parameter == null) {\n","            throw new IllegalArgumentException(MessageFormatUtil.format(\n","                    CommonsExceptionMessageConstant.INVALID_USAGE_FORMAT_REQUIRED, \"currentDate\")\n","            );\n","        }\n","\n","        final Date now = DateTimeUtil.getCurrentTimeDate();\n","        return formatDate(now, parameter);\n","    }\n","\n","    private String formatDate(Date date, String format) {\n","        final StringBuilder builder = new StringBuilder();\n","        char[] formatArray = format.toCharArray();\n","\n","        for (int i = 0; i < formatArray.length; i++) {\n","            if (formatArray[i] == APOSTROPHE) {\n","                i = attachQuotedString(i, builder, formatArray);\n","            } else if (isLetter(formatArray[i])) {\n","                i = processDateComponent(i, date, builder, formatArray);\n","            } else {\n","                builder.append(formatArray[i]);\n","            }\n","        }\n","\n","        return builder.toString();\n","    }\n","\n","    private int processDateComponent(int index, Date date, StringBuilder builder, char[] formatArray) {\n","        final StringBuilder peaceBuilder = new StringBuilder();\n","        final char currentChar = formatArray[index];\n","        peaceBuilder.append(currentChar);\n","        while (index + 1 < formatArray.length && currentChar == formatArray[index + 1]) {\n","            index++;\n","            peaceBuilder.append(formatArray[index]);\n","        }\n","        final String piece = peaceBuilder.toString();\n","        if (ALLOWED_PATTERNS.contains(piece)) {\n","            builder.append(DateTimeUtil.format(date, piece));\n","        } else {\n","            throw new IllegalArgumentException(MessageFormatUtil.format(\n","                    CommonsExceptionMessageConstant.PATTERN_CONTAINS_UNEXPECTED_COMPONENT, piece)\n","            );\n","        }\n","\n","        return index;\n","    }\n","}\n"],"test_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.actions.producer;\n","\n","import com.itextpdf.commons.exceptions.CommonsExceptionMessageConstant;\n","import com.itextpdf.commons.utils.DateTimeUtil;\n","import com.itextpdf.commons.utils.MessageFormatUtil;\n","import com.itextpdf.test.AssertUtil;\n","import com.itextpdf.test.ExtendedITextTest;\n","import com.itextpdf.test.annotations.type.UnitTest;\n","\n","import java.util.Date;\n","import org.junit.Assert;\n","import org.junit.Test;\n","import org.junit.experimental.categories.Category;\n","\n","@Category(UnitTest.class)\n","public class CurrentDatePlaceholderPopulatorTest extends ExtendedITextTest {\n","    private final CurrentDatePlaceholderPopulator populator = new CurrentDatePlaceholderPopulator();\n","\n","    @Test\n","    public void nullTest() {\n","        Exception exception = Assert.assertThrows(IllegalArgumentException.class,\n","                () -> populator.populate(null, null));\n","        Assert.assertEquals(MessageFormatUtil.format(CommonsExceptionMessageConstant.INVALID_USAGE_FORMAT_REQUIRED, \"currentDate\"),\n","                exception.getMessage());\n","    }\n","\n","    @Test\n","    public void plainTextTest() {\n","        String result = populator.populate(null, \"'plain text'\");\n","        Assert.assertEquals(\"plain text\", result);\n","    }\n","\n","    @Test\n","    public void plainTextWithIgnoredBackSlashesTest() {\n","        String result = populator.populate(null, \"'\\\\p\\\\l\\\\a\\\\i\\\\n \\\\t\\\\e\\\\x\\\\t'\");\n","        Assert.assertEquals(\"plain text\", result);\n","    }\n","\n","    @Test\n","    public void plainTextWithEscapedBackSlashesTest() {\n","        String result = populator.populate(null, \"'plain\\\\\\\\text'\");\n","        Assert.assertEquals(\"plain\\\\text\", result);\n","    }\n","\n","    @Test\n","    public void plainTextWithEscapedApostrophesTest() {\n","        String result = populator.populate(null, \"'plain\\\\'text'\");\n","        Assert.assertEquals(\"plain'text\", result);\n","    }\n","\n","    @Test\n","    public void plainTextSeveralQuotedStringsTest() {\n","        String result = populator.populate(null, \"'plain'' ''text'\");\n","        Assert.assertEquals(\"plain text\", result);\n","    }\n","\n","    @Test\n","    public void plainTextWithUnquotedCharactersTest() {\n","        String result = populator.populate(null, \"'plain text'$$$\");\n","        Assert.assertEquals(\"plain text$$$\", result);\n","    }\n","\n","    @Test\n","    public void plainTextEndlessQuotationErrorTest() {\n","        Exception exception = Assert.assertThrows(IllegalArgumentException.class,\n","                () -> populator.populate(null, \"'plain text\"));\n","        Assert.assertEquals(CommonsExceptionMessageConstant.PATTERN_CONTAINS_OPEN_QUOTATION,\n","                exception.getMessage());\n","    }\n","\n","    @Test\n","    public void plainTextMultipleQuotationsEndlessQuotationErrorTest() {\n","        Exception exception = Assert.assertThrows(IllegalArgumentException.class,\n","                () -> populator.populate(null, \"'plain'' ''text\"));\n","        Assert.assertEquals(CommonsExceptionMessageConstant.PATTERN_CONTAINS_OPEN_QUOTATION,\n","                exception.getMessage());\n","    }\n","\n","    @Test\n","    public void plainTextEscapedApostropheEndlessQuotationErrorTest() {\n","        Exception exception = Assert.assertThrows(IllegalArgumentException.class,\n","                () -> populator.populate(null, \"'plain text\\\\'\"));\n","        Assert.assertEquals(CommonsExceptionMessageConstant.PATTERN_CONTAINS_OPEN_QUOTATION,\n","                exception.getMessage());\n","    }\n","\n","    @Test\n","    public void validComponentsTest() {\n","        AssertUtil.doesNotThrow(() -> populator.populate(null, \"dd MM MMM MMMM yy yyyy HH mm ss\"));\n","    }\n","\n","    @Test\n","    public void validComponentsComparisonTest() {\n","        // the test may potentially fail if you started it at HH:59:59 so that expected result will\n","        // be generated at the beginning of the next hour.\n","        Date date = DateTimeUtil.getCurrentTimeDate();\n","        String result = populator.populate(null, \"dd MM yy yyyy HH\");\n","        String expectedResult = DateTimeUtil.format(date, \"dd MM yy yyyy HH\");\n","        Assert.assertEquals(expectedResult, result);\n","    }\n","\n","    @Test\n","    public void unexpectedLetterComponentTest() {\n","        Exception exception = Assert.assertThrows(IllegalArgumentException.class,\n","                () -> populator.populate(null, \"dd MM tyy yyyy HH\"));\n","        Assert.assertEquals(MessageFormatUtil.format(CommonsExceptionMessageConstant.PATTERN_CONTAINS_UNEXPECTED_COMPONENT, \"t\"),\n","                exception.getMessage());\n","    }\n","\n","    @Test\n","    public void unexpectedLongComponentTest() {\n","        Exception exception = Assert.assertThrows(IllegalArgumentException.class,\n","                () -> populator.populate(null, \"dd MMMMM yy yyyy HH\"));\n","        Assert.assertEquals(MessageFormatUtil.format(CommonsExceptionMessageConstant.PATTERN_CONTAINS_UNEXPECTED_COMPONENT, \"MMMMM\"),\n","                exception.getMessage());\n","    }\n","\n","    @Test\n","    public void unexpectedShortComponentTest() {\n","        Exception exception = Assert.assertThrows(IllegalArgumentException.class,\n","                () -> populator.populate(null, \"dd MM y yyyy HH\"));\n","        Assert.assertEquals(MessageFormatUtil.format(CommonsExceptionMessageConstant.PATTERN_CONTAINS_UNEXPECTED_COMPONENT, \"y\"),\n","                exception.getMessage());\n","    }\n","}\n"],"method_lines_dic":{"CurrentDatePlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)":[93,103],"CurrentDatePlaceholderPopulator::::formatDate(java.util.Date,java.lang.String)":[105,120],"CurrentDatePlaceholderPopulator::::processDateComponent(int,java.util.Date,java.lang.StringBuilder,char[])":[122,140]},"test_method_lines_dic":{"CurrentDatePlaceholderPopulatorTest::::nullTest()":[41,47],"CurrentDatePlaceholderPopulatorTest::::plainTextTest()":[49,53],"CurrentDatePlaceholderPopulatorTest::::plainTextWithIgnoredBackSlashesTest()":[55,59],"CurrentDatePlaceholderPopulatorTest::::plainTextWithEscapedBackSlashesTest()":[61,65],"CurrentDatePlaceholderPopulatorTest::::plainTextWithEscapedApostrophesTest()":[67,71],"CurrentDatePlaceholderPopulatorTest::::plainTextSeveralQuotedStringsTest()":[73,77],"CurrentDatePlaceholderPopulatorTest::::plainTextWithUnquotedCharactersTest()":[79,83],"CurrentDatePlaceholderPopulatorTest::::plainTextEndlessQuotationErrorTest()":[85,91],"CurrentDatePlaceholderPopulatorTest::::plainTextMultipleQuotationsEndlessQuotationErrorTest()":[93,99],"CurrentDatePlaceholderPopulatorTest::::plainTextEscapedApostropheEndlessQuotationErrorTest()":[101,107],"CurrentDatePlaceholderPopulatorTest::::validComponentsTest()":[109,112],"CurrentDatePlaceholderPopulatorTest::::validComponentsComparisonTest()":[114,122],"CurrentDatePlaceholderPopulatorTest::::unexpectedLetterComponentTest()":[124,130],"CurrentDatePlaceholderPopulatorTest::::unexpectedLongComponentTest()":[132,138],"CurrentDatePlaceholderPopulatorTest::::unexpectedShortComponentTest()":[140,146]},"reverse_method_lines_dic":{"93":"CurrentDatePlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)","94":"CurrentDatePlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)","95":"CurrentDatePlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)","96":"CurrentDatePlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)","97":"CurrentDatePlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)","98":"CurrentDatePlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)","99":"CurrentDatePlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)","100":"CurrentDatePlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)","101":"CurrentDatePlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)","102":"CurrentDatePlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)","103":"CurrentDatePlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)","105":"CurrentDatePlaceholderPopulator::::formatDate(java.util.Date,java.lang.String)","106":"CurrentDatePlaceholderPopulator::::formatDate(java.util.Date,java.lang.String)","107":"CurrentDatePlaceholderPopulator::::formatDate(java.util.Date,java.lang.String)","108":"CurrentDatePlaceholderPopulator::::formatDate(java.util.Date,java.lang.String)","109":"CurrentDatePlaceholderPopulator::::formatDate(java.util.Date,java.lang.String)","110":"CurrentDatePlaceholderPopulator::::formatDate(java.util.Date,java.lang.String)","111":"CurrentDatePlaceholderPopulator::::formatDate(java.util.Date,java.lang.String)","112":"CurrentDatePlaceholderPopulator::::formatDate(java.util.Date,java.lang.String)","113":"CurrentDatePlaceholderPopulator::::formatDate(java.util.Date,java.lang.String)","114":"CurrentDatePlaceholderPopulator::::formatDate(java.util.Date,java.lang.String)","115":"CurrentDatePlaceholderPopulator::::formatDate(java.util.Date,java.lang.String)","116":"CurrentDatePlaceholderPopulator::::formatDate(java.util.Date,java.lang.String)","117":"CurrentDatePlaceholderPopulator::::formatDate(java.util.Date,java.lang.String)","118":"CurrentDatePlaceholderPopulator::::formatDate(java.util.Date,java.lang.String)","119":"CurrentDatePlaceholderPopulator::::formatDate(java.util.Date,java.lang.String)","120":"CurrentDatePlaceholderPopulator::::formatDate(java.util.Date,java.lang.String)","122":"CurrentDatePlaceholderPopulator::::processDateComponent(int,java.util.Date,java.lang.StringBuilder,char[])","123":"CurrentDatePlaceholderPopulator::::processDateComponent(int,java.util.Date,java.lang.StringBuilder,char[])","124":"CurrentDatePlaceholderPopulator::::processDateComponent(int,java.util.Date,java.lang.StringBuilder,char[])","125":"CurrentDatePlaceholderPopulator::::processDateComponent(int,java.util.Date,java.lang.StringBuilder,char[])","126":"CurrentDatePlaceholderPopulator::::processDateComponent(int,java.util.Date,java.lang.StringBuilder,char[])","127":"CurrentDatePlaceholderPopulator::::processDateComponent(int,java.util.Date,java.lang.StringBuilder,char[])","128":"CurrentDatePlaceholderPopulator::::processDateComponent(int,java.util.Date,java.lang.StringBuilder,char[])","129":"CurrentDatePlaceholderPopulator::::processDateComponent(int,java.util.Date,java.lang.StringBuilder,char[])","130":"CurrentDatePlaceholderPopulator::::processDateComponent(int,java.util.Date,java.lang.StringBuilder,char[])","131":"CurrentDatePlaceholderPopulator::::processDateComponent(int,java.util.Date,java.lang.StringBuilder,char[])","132":"CurrentDatePlaceholderPopulator::::processDateComponent(int,java.util.Date,java.lang.StringBuilder,char[])","133":"CurrentDatePlaceholderPopulator::::processDateComponent(int,java.util.Date,java.lang.StringBuilder,char[])","134":"CurrentDatePlaceholderPopulator::::processDateComponent(int,java.util.Date,java.lang.StringBuilder,char[])","135":"CurrentDatePlaceholderPopulator::::processDateComponent(int,java.util.Date,java.lang.StringBuilder,char[])","136":"CurrentDatePlaceholderPopulator::::processDateComponent(int,java.util.Date,java.lang.StringBuilder,char[])","137":"CurrentDatePlaceholderPopulator::::processDateComponent(int,java.util.Date,java.lang.StringBuilder,char[])","138":"CurrentDatePlaceholderPopulator::::processDateComponent(int,java.util.Date,java.lang.StringBuilder,char[])","139":"CurrentDatePlaceholderPopulator::::processDateComponent(int,java.util.Date,java.lang.StringBuilder,char[])","140":"CurrentDatePlaceholderPopulator::::processDateComponent(int,java.util.Date,java.lang.StringBuilder,char[])"},"test_reverse_method_lines_dic":{"41":"CurrentDatePlaceholderPopulatorTest::::nullTest()","42":"CurrentDatePlaceholderPopulatorTest::::nullTest()","43":"CurrentDatePlaceholderPopulatorTest::::nullTest()","44":"CurrentDatePlaceholderPopulatorTest::::nullTest()","45":"CurrentDatePlaceholderPopulatorTest::::nullTest()","46":"CurrentDatePlaceholderPopulatorTest::::nullTest()","47":"CurrentDatePlaceholderPopulatorTest::::nullTest()","49":"CurrentDatePlaceholderPopulatorTest::::plainTextTest()","50":"CurrentDatePlaceholderPopulatorTest::::plainTextTest()","51":"CurrentDatePlaceholderPopulatorTest::::plainTextTest()","52":"CurrentDatePlaceholderPopulatorTest::::plainTextTest()","53":"CurrentDatePlaceholderPopulatorTest::::plainTextTest()","55":"CurrentDatePlaceholderPopulatorTest::::plainTextWithIgnoredBackSlashesTest()","56":"CurrentDatePlaceholderPopulatorTest::::plainTextWithIgnoredBackSlashesTest()","57":"CurrentDatePlaceholderPopulatorTest::::plainTextWithIgnoredBackSlashesTest()","58":"CurrentDatePlaceholderPopulatorTest::::plainTextWithIgnoredBackSlashesTest()","59":"CurrentDatePlaceholderPopulatorTest::::plainTextWithIgnoredBackSlashesTest()","61":"CurrentDatePlaceholderPopulatorTest::::plainTextWithEscapedBackSlashesTest()","62":"CurrentDatePlaceholderPopulatorTest::::plainTextWithEscapedBackSlashesTest()","63":"CurrentDatePlaceholderPopulatorTest::::plainTextWithEscapedBackSlashesTest()","64":"CurrentDatePlaceholderPopulatorTest::::plainTextWithEscapedBackSlashesTest()","65":"CurrentDatePlaceholderPopulatorTest::::plainTextWithEscapedBackSlashesTest()","67":"CurrentDatePlaceholderPopulatorTest::::plainTextWithEscapedApostrophesTest()","68":"CurrentDatePlaceholderPopulatorTest::::plainTextWithEscapedApostrophesTest()","69":"CurrentDatePlaceholderPopulatorTest::::plainTextWithEscapedApostrophesTest()","70":"CurrentDatePlaceholderPopulatorTest::::plainTextWithEscapedApostrophesTest()","71":"CurrentDatePlaceholderPopulatorTest::::plainTextWithEscapedApostrophesTest()","73":"CurrentDatePlaceholderPopulatorTest::::plainTextSeveralQuotedStringsTest()","74":"CurrentDatePlaceholderPopulatorTest::::plainTextSeveralQuotedStringsTest()","75":"CurrentDatePlaceholderPopulatorTest::::plainTextSeveralQuotedStringsTest()","76":"CurrentDatePlaceholderPopulatorTest::::plainTextSeveralQuotedStringsTest()","77":"CurrentDatePlaceholderPopulatorTest::::plainTextSeveralQuotedStringsTest()","79":"CurrentDatePlaceholderPopulatorTest::::plainTextWithUnquotedCharactersTest()","80":"CurrentDatePlaceholderPopulatorTest::::plainTextWithUnquotedCharactersTest()","81":"CurrentDatePlaceholderPopulatorTest::::plainTextWithUnquotedCharactersTest()","82":"CurrentDatePlaceholderPopulatorTest::::plainTextWithUnquotedCharactersTest()","83":"CurrentDatePlaceholderPopulatorTest::::plainTextWithUnquotedCharactersTest()","85":"CurrentDatePlaceholderPopulatorTest::::plainTextEndlessQuotationErrorTest()","86":"CurrentDatePlaceholderPopulatorTest::::plainTextEndlessQuotationErrorTest()","87":"CurrentDatePlaceholderPopulatorTest::::plainTextEndlessQuotationErrorTest()","88":"CurrentDatePlaceholderPopulatorTest::::plainTextEndlessQuotationErrorTest()","89":"CurrentDatePlaceholderPopulatorTest::::plainTextEndlessQuotationErrorTest()","90":"CurrentDatePlaceholderPopulatorTest::::plainTextEndlessQuotationErrorTest()","91":"CurrentDatePlaceholderPopulatorTest::::plainTextEndlessQuotationErrorTest()","93":"CurrentDatePlaceholderPopulatorTest::::plainTextMultipleQuotationsEndlessQuotationErrorTest()","94":"CurrentDatePlaceholderPopulatorTest::::plainTextMultipleQuotationsEndlessQuotationErrorTest()","95":"CurrentDatePlaceholderPopulatorTest::::plainTextMultipleQuotationsEndlessQuotationErrorTest()","96":"CurrentDatePlaceholderPopulatorTest::::plainTextMultipleQuotationsEndlessQuotationErrorTest()","97":"CurrentDatePlaceholderPopulatorTest::::plainTextMultipleQuotationsEndlessQuotationErrorTest()","98":"CurrentDatePlaceholderPopulatorTest::::plainTextMultipleQuotationsEndlessQuotationErrorTest()","99":"CurrentDatePlaceholderPopulatorTest::::plainTextMultipleQuotationsEndlessQuotationErrorTest()","101":"CurrentDatePlaceholderPopulatorTest::::plainTextEscapedApostropheEndlessQuotationErrorTest()","102":"CurrentDatePlaceholderPopulatorTest::::plainTextEscapedApostropheEndlessQuotationErrorTest()","103":"CurrentDatePlaceholderPopulatorTest::::plainTextEscapedApostropheEndlessQuotationErrorTest()","104":"CurrentDatePlaceholderPopulatorTest::::plainTextEscapedApostropheEndlessQuotationErrorTest()","105":"CurrentDatePlaceholderPopulatorTest::::plainTextEscapedApostropheEndlessQuotationErrorTest()","106":"CurrentDatePlaceholderPopulatorTest::::plainTextEscapedApostropheEndlessQuotationErrorTest()","107":"CurrentDatePlaceholderPopulatorTest::::plainTextEscapedApostropheEndlessQuotationErrorTest()","109":"CurrentDatePlaceholderPopulatorTest::::validComponentsTest()","110":"CurrentDatePlaceholderPopulatorTest::::validComponentsTest()","111":"CurrentDatePlaceholderPopulatorTest::::validComponentsTest()","112":"CurrentDatePlaceholderPopulatorTest::::validComponentsTest()","114":"CurrentDatePlaceholderPopulatorTest::::validComponentsComparisonTest()","115":"CurrentDatePlaceholderPopulatorTest::::validComponentsComparisonTest()","116":"CurrentDatePlaceholderPopulatorTest::::validComponentsComparisonTest()","117":"CurrentDatePlaceholderPopulatorTest::::validComponentsComparisonTest()","118":"CurrentDatePlaceholderPopulatorTest::::validComponentsComparisonTest()","119":"CurrentDatePlaceholderPopulatorTest::::validComponentsComparisonTest()","120":"CurrentDatePlaceholderPopulatorTest::::validComponentsComparisonTest()","121":"CurrentDatePlaceholderPopulatorTest::::validComponentsComparisonTest()","122":"CurrentDatePlaceholderPopulatorTest::::validComponentsComparisonTest()","124":"CurrentDatePlaceholderPopulatorTest::::unexpectedLetterComponentTest()","125":"CurrentDatePlaceholderPopulatorTest::::unexpectedLetterComponentTest()","126":"CurrentDatePlaceholderPopulatorTest::::unexpectedLetterComponentTest()","127":"CurrentDatePlaceholderPopulatorTest::::unexpectedLetterComponentTest()","128":"CurrentDatePlaceholderPopulatorTest::::unexpectedLetterComponentTest()","129":"CurrentDatePlaceholderPopulatorTest::::unexpectedLetterComponentTest()","130":"CurrentDatePlaceholderPopulatorTest::::unexpectedLetterComponentTest()","132":"CurrentDatePlaceholderPopulatorTest::::unexpectedLongComponentTest()","133":"CurrentDatePlaceholderPopulatorTest::::unexpectedLongComponentTest()","134":"CurrentDatePlaceholderPopulatorTest::::unexpectedLongComponentTest()","135":"CurrentDatePlaceholderPopulatorTest::::unexpectedLongComponentTest()","136":"CurrentDatePlaceholderPopulatorTest::::unexpectedLongComponentTest()","137":"CurrentDatePlaceholderPopulatorTest::::unexpectedLongComponentTest()","138":"CurrentDatePlaceholderPopulatorTest::::unexpectedLongComponentTest()","140":"CurrentDatePlaceholderPopulatorTest::::unexpectedShortComponentTest()","141":"CurrentDatePlaceholderPopulatorTest::::unexpectedShortComponentTest()","142":"CurrentDatePlaceholderPopulatorTest::::unexpectedShortComponentTest()","143":"CurrentDatePlaceholderPopulatorTest::::unexpectedShortComponentTest()","144":"CurrentDatePlaceholderPopulatorTest::::unexpectedShortComponentTest()","145":"CurrentDatePlaceholderPopulatorTest::::unexpectedShortComponentTest()","146":"CurrentDatePlaceholderPopulatorTest::::unexpectedShortComponentTest()"},"tests":[{"test_lines":[41,47],"covered_lines":[73,77,79,95,96],"label":"CurrentDatePlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)"},{"test_lines":[49,53],"covered_lines":[73,77,79,95,101,102,106,107,109,110,111,119],"label":"CurrentDatePlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)"},{"test_lines":[55,59],"covered_lines":[73,77,79,95,101,102,106,107,109,110,111,119],"label":"CurrentDatePlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)"},{"test_lines":[61,65],"covered_lines":[73,77,79,95,101,102,106,107,109,110,111,119],"label":"CurrentDatePlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)"},{"test_lines":[67,71],"covered_lines":[73,77,79,95,101,102,106,107,109,110,111,119],"label":"CurrentDatePlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)"},{"test_lines":[73,77],"covered_lines":[73,77,79,95,101,102,106,107,109,110,111,119],"label":"CurrentDatePlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)"},{"test_lines":[79,83],"covered_lines":[73,77,79,95,101,102,106,107,109,110,111,112,115,119],"label":"CurrentDatePlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)"},{"test_lines":[85,91],"covered_lines":[73,77,79,95,101,106,107,109,110],"label":"CurrentDatePlaceholderPopulator::::populate(java.util.List<com.itextpdf.commons.actions.confirmations.ConfirmedEventWrapper>,java.lang.String)"},{"test_lines":[93,99],"covered_lines":[73,77,79,95,101,106,107,109,110,111],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[101,107],"covered_lines":[73,77,79,95,101,106,107,109,110],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[109,112],"covered_lines":[73,77,79,95,101,102,106,107,109,110,112,113,115,119,123,124,125,126,127,128,130,131,132,139],"label":"CurrentDatePlaceholderPopulator::::processDateComponent(int,java.util.Date,java.lang.StringBuilder,char[])"},{"test_lines":[114,122],"covered_lines":[73,77,79,95,101,102,106,107,109,110,112,113,115,119,123,124,125,126,127,128,130,131,132,139],"label":"CurrentDatePlaceholderPopulator::::processDateComponent(int,java.util.Date,java.lang.StringBuilder,char[])"},{"test_lines":[124,130],"covered_lines":[73,77,79,95,101,106,107,109,110,112,113,115,123,124,125,126,127,128,130,131,132,134,139],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[132,138],"covered_lines":[73,77,79,95,101,106,107,109,110,112,113,115,123,124,125,126,127,128,130,131,132,134,139],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[140,146],"covered_lines":[73,77,79,95,101,106,107,109,110,112,113,115,123,124,125,126,127,128,130,131,132,134,139],"label":"<<NO FOCAL METHOD>>"}]},"/bernard/dataset_construction/prep/repos/itext-java/commons/src/main/java/com/itextpdf/commons/actions/contexts/ContextManager.java":{"class_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.actions.contexts;\n","\n","import com.itextpdf.commons.actions.NamespaceConstant;\n","import com.itextpdf.commons.actions.ProductNameConstant;\n","\n","import java.util.Collection;\n","import java.util.Collections;\n","import java.util.Comparator;\n","import java.util.SortedMap;\n","import java.util.TreeMap;\n","\n","/**\n"," * The class that retrieves context of its invocation.\n"," */\n","public class ContextManager {\n","\n","    private static final ContextManager INSTANCE;\n","    private final SortedMap<String, IContext> contextMappings = new TreeMap<>(new LengthComparator());\n","\n","    static {\n","        ContextManager local = new ContextManager();\n","        local.registerGenericContext(NamespaceConstant.ITEXT_CORE_NAMESPACES,\n","                Collections.singleton(ProductNameConstant.ITEXT_CORE));\n","\n","        local.registerGenericContext(Collections.singleton(NamespaceConstant.CORE_SIGN),\n","                Collections.singleton(ProductNameConstant.ITEXT_CORE_SIGN));\n","\n","        local.registerGenericContext(Collections.singletonList(NamespaceConstant.PDF_HTML),\n","                Collections.singleton(ProductNameConstant.PDF_HTML));\n","\n","        local.registerGenericContext(Collections.singletonList(NamespaceConstant.PDF_SWEEP),\n","                Collections.singleton(ProductNameConstant.PDF_SWEEP));\n","\n","        local.registerGenericContext(Collections.singletonList(NamespaceConstant.PDF_OCR_TESSERACT4),\n","                Collections.singleton(ProductNameConstant.PDF_OCR_TESSERACT4));\n","\n","        INSTANCE = local;\n","    }\n","\n","    ContextManager() {\n","\n","    }\n","\n","    /**\n","     * Gets the singleton instance of this class.\n","     *\n","     * @return the {@link ContextManager} instance\n","     */\n","    public static ContextManager getInstance() {\n","        return INSTANCE;\n","    }\n","\n","    /**\n","     * Gets the context associated with the passed class object.\n","     * The context is determined by class namespace.\n","     *\n","     * @param clazz the class for which the context will be determined.\n","     * @return the {@link IContext} associated with the class, or {@code null} if the class is unknown.\n","     */\n","    public IContext getContext(Class<?> clazz) {\n","        return clazz == null ? null : getContext(clazz.getName());\n","    }\n","\n","    /**\n","     * Gets the context associated with the passed class object.\n","     * The context is determined by class namespace.\n","     *\n","     * @param className the class name with the namespace for which the context will be determined.\n","     * @return the {@link IContext} associated with the class, or {@code null} if the class is unknown.\n","     */\n","    public IContext getContext(String className) {\n","        return getNamespaceMapping(getRecognisedNamespace(className));\n","    }\n","\n","    String getRecognisedNamespace(String className) {\n","        if (className != null) {\n","            String normalizedClassName = normalize(className);\n","            // If both \"a\" and \"a.b\" namespaces are registered,\n","            // iText should consider the context of \"a.b\" for an \"a.b\" event,\n","            // that's why the contexts are sorted by the length of the namespace\n","            for (String namespace : contextMappings.keySet()) {\n","                if (normalizedClassName.startsWith(namespace)) {\n","                    return namespace;\n","                }\n","            }\n","        }\n","        return null;\n","    }\n","\n","    void unregisterContext(Collection<String> namespaces) {\n","        for (String namespace : namespaces) {\n","            contextMappings.remove(normalize(namespace));\n","        }\n","    }\n","\n","    private IContext getNamespaceMapping(String namespace) {\n","        if (namespace != null) {\n","            return contextMappings.get(namespace);\n","        }\n","        return null;\n","    }\n","\n","    void registerGenericContext(Collection<String> namespaces, Collection<String> products) {\n","        final GenericContext context = new GenericContext(products);\n","        for (String namespace : namespaces) {\n","            contextMappings.put(normalize(namespace), context);\n","        }\n","    }\n","\n","    private static String normalize(String namespace) {\n","        // Conversion to lowercase is done to be compatible with possible changes in case of packages/namespaces\n","        return namespace.toLowerCase();\n","    }\n","\n","    private static class LengthComparator implements Comparator<String> {\n","        @Override\n","        public int compare(String o1, String o2) {\n","            int lengthComparison = Integer.compare(o2.length(), o1.length());\n","            if (0 == lengthComparison) {\n","                return o1.compareTo(o2);\n","            } else {\n","                return lengthComparison;\n","            }\n","        }\n","    }\n","}\n"],"test_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.actions.contexts;\n","\n","import com.itextpdf.commons.actions.NamespaceConstant;\n","import com.itextpdf.test.ExtendedITextTest;\n","import com.itextpdf.test.annotations.type.UnitTest;\n","\n","import java.util.Arrays;\n","import java.util.Collections;\n","import java.util.List;\n","import org.junit.Assert;\n","import org.junit.Test;\n","import org.junit.experimental.categories.Category;\n","\n","@Category(UnitTest.class)\n","public class ContextManagerTest extends ExtendedITextTest {\n","\n","    @Test\n","    public void getRecognisedNamespaceForSpecificNamespaceTest() {\n","        String outerNamespaces = NamespaceConstant.ITEXT.toLowerCase();\n","        String innerNamespaces = NamespaceConstant.PDF_HTML.toLowerCase();\n","\n","        Assert.assertTrue(innerNamespaces.startsWith(outerNamespaces));\n","\n","        ContextManager managerOuterBeforeInner = new ContextManager();\n","        managerOuterBeforeInner\n","                .registerGenericContext(Collections.singletonList(outerNamespaces), Collections.<String>emptyList());\n","        managerOuterBeforeInner\n","                .registerGenericContext(Collections.singletonList(innerNamespaces), Collections.<String>emptyList());\n","\n","        Assert.assertEquals(outerNamespaces,\n","                managerOuterBeforeInner.getRecognisedNamespace(outerNamespaces));\n","        Assert.assertEquals(innerNamespaces,\n","                managerOuterBeforeInner.getRecognisedNamespace(innerNamespaces));\n","\n","        ContextManager managerInnerBeforeOuter = new ContextManager();\n","        managerInnerBeforeOuter\n","                .registerGenericContext(Collections.singletonList(innerNamespaces), Collections.<String>emptyList());\n","        managerInnerBeforeOuter\n","                .registerGenericContext(Collections.singletonList(outerNamespaces), Collections.<String>emptyList());\n","\n","        Assert.assertEquals(outerNamespaces,\n","                managerInnerBeforeOuter.getRecognisedNamespace(outerNamespaces));\n","        Assert.assertEquals(innerNamespaces,\n","                managerInnerBeforeOuter.getRecognisedNamespace(innerNamespaces));\n","    }\n","\n","    @Test\n","    public void notRegisteredNamespaceTest() {\n","        String notRegisteredNamespace = \"com.hello.world\";\n","\n","        Assert.assertNull(ContextManager.getInstance().getRecognisedNamespace(notRegisteredNamespace));\n","    }\n","\n","    @Test\n","    public void unregisterNamespaceTest() {\n","        String testNamespace = \"com.hello.world\";\n","        String testNamespaceWithCapitals = \"com.Bye.World\";\n","        List<String> testNamespaces = Arrays.asList(\n","                testNamespace,\n","                testNamespaceWithCapitals\n","        );\n","\n","        ContextManager manager = new ContextManager();\n","        Assert.assertNull(manager.getRecognisedNamespace(testNamespace));\n","        Assert.assertNull(manager.getRecognisedNamespace(testNamespaceWithCapitals));\n","\n","        manager.registerGenericContext(testNamespaces, Arrays.asList(\"myProduct\"));\n","\n","        Assert.assertEquals(testNamespace,\n","                manager.getRecognisedNamespace(testNamespace + \".MyClass\"));\n","        Assert.assertEquals(testNamespaceWithCapitals.toLowerCase(),\n","                manager.getRecognisedNamespace(testNamespaceWithCapitals + \".MyClass\"));\n","\n","        manager.unregisterContext(testNamespaces);\n","\n","        Assert.assertNull(manager.getRecognisedNamespace(testNamespace));\n","        Assert.assertNull(manager.getRecognisedNamespace(testNamespaceWithCapitals));\n","    }\n","\n","    @Test\n","    public void registeredNamespaceTest() {\n","        String registeredNamespace = NamespaceConstant.CORE_LAYOUT + \"custompackage\";\n","\n","        Assert.assertEquals(NamespaceConstant.CORE_LAYOUT.toLowerCase(),\n","                ContextManager.getInstance().getRecognisedNamespace(registeredNamespace));\n","    }\n","}\n"],"method_lines_dic":{"ContextManager::::getInstance()":[71,73],"ContextManager::::getContext(java.lang.Class<?>)":[82,84],"ContextManager::::getContext(java.lang.String)":[93,95],"ContextManager::::getRecognisedNamespace(java.lang.String)":[97,110],"ContextManager::::unregisterContext(java.util.Collection<java.lang.String>)":[112,116],"ContextManager::::getNamespaceMapping(java.lang.String)":[118,123],"ContextManager::::registerGenericContext(java.util.Collection<java.lang.String>,java.util.Collection<java.lang.String>)":[125,130],"ContextManager::::normalize(java.lang.String)":[132,135],"ContextManager.LengthComparator::::compare(java.lang.String,java.lang.String)":[138,146]},"test_method_lines_dic":{"ContextManagerTest::::getRecognisedNamespaceForSpecificNamespaceTest()":[39,67],"ContextManagerTest::::notRegisteredNamespaceTest()":[69,74],"ContextManagerTest::::unregisterNamespaceTest()":[76,100],"ContextManagerTest::::registeredNamespaceTest()":[102,108]},"reverse_method_lines_dic":{"71":"ContextManager::::getInstance()","72":"ContextManager::::getInstance()","73":"ContextManager::::getInstance()","82":"ContextManager::::getContext(java.lang.Class<?>)","83":"ContextManager::::getContext(java.lang.Class<?>)","84":"ContextManager::::getContext(java.lang.Class<?>)","93":"ContextManager::::getContext(java.lang.String)","94":"ContextManager::::getContext(java.lang.String)","95":"ContextManager::::getContext(java.lang.String)","97":"ContextManager::::getRecognisedNamespace(java.lang.String)","98":"ContextManager::::getRecognisedNamespace(java.lang.String)","99":"ContextManager::::getRecognisedNamespace(java.lang.String)","100":"ContextManager::::getRecognisedNamespace(java.lang.String)","101":"ContextManager::::getRecognisedNamespace(java.lang.String)","102":"ContextManager::::getRecognisedNamespace(java.lang.String)","103":"ContextManager::::getRecognisedNamespace(java.lang.String)","104":"ContextManager::::getRecognisedNamespace(java.lang.String)","105":"ContextManager::::getRecognisedNamespace(java.lang.String)","106":"ContextManager::::getRecognisedNamespace(java.lang.String)","107":"ContextManager::::getRecognisedNamespace(java.lang.String)","108":"ContextManager::::getRecognisedNamespace(java.lang.String)","109":"ContextManager::::getRecognisedNamespace(java.lang.String)","110":"ContextManager::::getRecognisedNamespace(java.lang.String)","112":"ContextManager::::unregisterContext(java.util.Collection<java.lang.String>)","113":"ContextManager::::unregisterContext(java.util.Collection<java.lang.String>)","114":"ContextManager::::unregisterContext(java.util.Collection<java.lang.String>)","115":"ContextManager::::unregisterContext(java.util.Collection<java.lang.String>)","116":"ContextManager::::unregisterContext(java.util.Collection<java.lang.String>)","118":"ContextManager::::getNamespaceMapping(java.lang.String)","119":"ContextManager::::getNamespaceMapping(java.lang.String)","120":"ContextManager::::getNamespaceMapping(java.lang.String)","121":"ContextManager::::getNamespaceMapping(java.lang.String)","122":"ContextManager::::getNamespaceMapping(java.lang.String)","123":"ContextManager::::getNamespaceMapping(java.lang.String)","125":"ContextManager::::registerGenericContext(java.util.Collection<java.lang.String>,java.util.Collection<java.lang.String>)","126":"ContextManager::::registerGenericContext(java.util.Collection<java.lang.String>,java.util.Collection<java.lang.String>)","127":"ContextManager::::registerGenericContext(java.util.Collection<java.lang.String>,java.util.Collection<java.lang.String>)","128":"ContextManager::::registerGenericContext(java.util.Collection<java.lang.String>,java.util.Collection<java.lang.String>)","129":"ContextManager::::registerGenericContext(java.util.Collection<java.lang.String>,java.util.Collection<java.lang.String>)","130":"ContextManager::::registerGenericContext(java.util.Collection<java.lang.String>,java.util.Collection<java.lang.String>)","132":"ContextManager::::normalize(java.lang.String)","133":"ContextManager::::normalize(java.lang.String)","134":"ContextManager::::normalize(java.lang.String)","135":"ContextManager::::normalize(java.lang.String)","138":"ContextManager.LengthComparator::::compare(java.lang.String,java.lang.String)","139":"ContextManager.LengthComparator::::compare(java.lang.String,java.lang.String)","140":"ContextManager.LengthComparator::::compare(java.lang.String,java.lang.String)","141":"ContextManager.LengthComparator::::compare(java.lang.String,java.lang.String)","142":"ContextManager.LengthComparator::::compare(java.lang.String,java.lang.String)","143":"ContextManager.LengthComparator::::compare(java.lang.String,java.lang.String)","144":"ContextManager.LengthComparator::::compare(java.lang.String,java.lang.String)","145":"ContextManager.LengthComparator::::compare(java.lang.String,java.lang.String)","146":"ContextManager.LengthComparator::::compare(java.lang.String,java.lang.String)"},"test_reverse_method_lines_dic":{"39":"ContextManagerTest::::getRecognisedNamespaceForSpecificNamespaceTest()","40":"ContextManagerTest::::getRecognisedNamespaceForSpecificNamespaceTest()","41":"ContextManagerTest::::getRecognisedNamespaceForSpecificNamespaceTest()","42":"ContextManagerTest::::getRecognisedNamespaceForSpecificNamespaceTest()","43":"ContextManagerTest::::getRecognisedNamespaceForSpecificNamespaceTest()","44":"ContextManagerTest::::getRecognisedNamespaceForSpecificNamespaceTest()","45":"ContextManagerTest::::getRecognisedNamespaceForSpecificNamespaceTest()","46":"ContextManagerTest::::getRecognisedNamespaceForSpecificNamespaceTest()","47":"ContextManagerTest::::getRecognisedNamespaceForSpecificNamespaceTest()","48":"ContextManagerTest::::getRecognisedNamespaceForSpecificNamespaceTest()","49":"ContextManagerTest::::getRecognisedNamespaceForSpecificNamespaceTest()","50":"ContextManagerTest::::getRecognisedNamespaceForSpecificNamespaceTest()","51":"ContextManagerTest::::getRecognisedNamespaceForSpecificNamespaceTest()","52":"ContextManagerTest::::getRecognisedNamespaceForSpecificNamespaceTest()","53":"ContextManagerTest::::getRecognisedNamespaceForSpecificNamespaceTest()","54":"ContextManagerTest::::getRecognisedNamespaceForSpecificNamespaceTest()","55":"ContextManagerTest::::getRecognisedNamespaceForSpecificNamespaceTest()","56":"ContextManagerTest::::getRecognisedNamespaceForSpecificNamespaceTest()","57":"ContextManagerTest::::getRecognisedNamespaceForSpecificNamespaceTest()","58":"ContextManagerTest::::getRecognisedNamespaceForSpecificNamespaceTest()","59":"ContextManagerTest::::getRecognisedNamespaceForSpecificNamespaceTest()","60":"ContextManagerTest::::getRecognisedNamespaceForSpecificNamespaceTest()","61":"ContextManagerTest::::getRecognisedNamespaceForSpecificNamespaceTest()","62":"ContextManagerTest::::getRecognisedNamespaceForSpecificNamespaceTest()","63":"ContextManagerTest::::getRecognisedNamespaceForSpecificNamespaceTest()","64":"ContextManagerTest::::getRecognisedNamespaceForSpecificNamespaceTest()","65":"ContextManagerTest::::getRecognisedNamespaceForSpecificNamespaceTest()","66":"ContextManagerTest::::getRecognisedNamespaceForSpecificNamespaceTest()","67":"ContextManagerTest::::getRecognisedNamespaceForSpecificNamespaceTest()","69":"ContextManagerTest::::notRegisteredNamespaceTest()","70":"ContextManagerTest::::notRegisteredNamespaceTest()","71":"ContextManagerTest::::notRegisteredNamespaceTest()","72":"ContextManagerTest::::notRegisteredNamespaceTest()","73":"ContextManagerTest::::notRegisteredNamespaceTest()","74":"ContextManagerTest::::notRegisteredNamespaceTest()","76":"ContextManagerTest::::unregisterNamespaceTest()","77":"ContextManagerTest::::unregisterNamespaceTest()","78":"ContextManagerTest::::unregisterNamespaceTest()","79":"ContextManagerTest::::unregisterNamespaceTest()","80":"ContextManagerTest::::unregisterNamespaceTest()","81":"ContextManagerTest::::unregisterNamespaceTest()","82":"ContextManagerTest::::unregisterNamespaceTest()","83":"ContextManagerTest::::unregisterNamespaceTest()","84":"ContextManagerTest::::unregisterNamespaceTest()","85":"ContextManagerTest::::unregisterNamespaceTest()","86":"ContextManagerTest::::unregisterNamespaceTest()","87":"ContextManagerTest::::unregisterNamespaceTest()","88":"ContextManagerTest::::unregisterNamespaceTest()","89":"ContextManagerTest::::unregisterNamespaceTest()","90":"ContextManagerTest::::unregisterNamespaceTest()","91":"ContextManagerTest::::unregisterNamespaceTest()","92":"ContextManagerTest::::unregisterNamespaceTest()","93":"ContextManagerTest::::unregisterNamespaceTest()","94":"ContextManagerTest::::unregisterNamespaceTest()","95":"ContextManagerTest::::unregisterNamespaceTest()","96":"ContextManagerTest::::unregisterNamespaceTest()","97":"ContextManagerTest::::unregisterNamespaceTest()","98":"ContextManagerTest::::unregisterNamespaceTest()","99":"ContextManagerTest::::unregisterNamespaceTest()","100":"ContextManagerTest::::unregisterNamespaceTest()","102":"ContextManagerTest::::registeredNamespaceTest()","103":"ContextManagerTest::::registeredNamespaceTest()","104":"ContextManagerTest::::registeredNamespaceTest()","105":"ContextManagerTest::::registeredNamespaceTest()","106":"ContextManagerTest::::registeredNamespaceTest()","107":"ContextManagerTest::::registeredNamespaceTest()","108":"ContextManagerTest::::registeredNamespaceTest()"},"tests":[{"test_lines":[39,67],"covered_lines":[40,43,44,45,47,48,50,51,53,54,56,57,59,60,62,64,98,99,103,104,105,107,126,127,128,129,130,134,137,140,141,142,144],"label":"ContextManager::::getRecognisedNamespace(java.lang.String)"},{"test_lines":[69,74],"covered_lines":[40,43,44,45,47,48,50,51,53,54,56,57,59,60,62,64,72,98,99,103,104,107,109,126,127,128,129,130,134,137,140,141,142,144],"label":"ContextManager::::getRecognisedNamespace(java.lang.String)"},{"test_lines":[76,100],"covered_lines":[40,43,44,45,47,48,50,51,53,54,56,57,59,60,62,64,98,99,103,104,105,107,109,113,114,115,116,126,127,128,129,130,134,137,140,141,142,144],"label":"ContextManager::::unregisterContext(java.util.Collection<java.lang.String>)"},{"test_lines":[102,108],"covered_lines":[40,43,44,45,47,48,50,51,53,54,56,57,59,60,62,64,72,98,99,103,104,105,107,126,127,128,129,130,134,137,140,141,142,144],"label":"ContextManager::::getRecognisedNamespace(java.lang.String)"}]},"/bernard/dataset_construction/prep/repos/itext-java/commons/src/main/java/com/itextpdf/commons/actions/sequence/SequenceId.java":{"class_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.actions.sequence;\n","\n","import java.util.concurrent.atomic.AtomicLong;\n","\n","/**\n"," * The class represents unique numeric identifier with autoincrement strategy of generation.\n"," */\n","public final class SequenceId {\n","    private static final AtomicLong ID_GENERATOR = new AtomicLong();\n","\n","    private final long id;\n","\n","    /**\n","     * Creates a new instance of identifier.\n","     */\n","    public SequenceId() {\n","        this.id = ID_GENERATOR.incrementAndGet();\n","    }\n","\n","    /**\n","     * Obtains an id.\n","     *\n","     * @return id\n","     */\n","    public long getId() {\n","        return id;\n","    }\n","}\n"],"test_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.actions.sequence;\n","\n","import com.itextpdf.test.ExtendedITextTest;\n","import com.itextpdf.test.annotations.type.UnitTest;\n","\n","import org.junit.Assert;\n","import org.junit.Test;\n","import org.junit.experimental.categories.Category;\n","\n","@Category(UnitTest.class)\n","public class SequenceIdTest extends ExtendedITextTest {\n","    @Test\n","    public void differentIdsCreatedTest() {\n","        SequenceId sequenceId1 = new SequenceId();\n","        SequenceId sequenceId2 = new SequenceId();\n","\n","        Assert.assertNotEquals(sequenceId1.getId(), sequenceId2.getId());\n","    }\n","}\n"],"method_lines_dic":{"SequenceId::::getId()":[47,49]},"test_method_lines_dic":{"SequenceIdTest::::differentIdsCreatedTest()":[34,40]},"reverse_method_lines_dic":{"47":"SequenceId::::getId()","48":"SequenceId::::getId()","49":"SequenceId::::getId()"},"test_reverse_method_lines_dic":{"34":"SequenceIdTest::::differentIdsCreatedTest()","35":"SequenceIdTest::::differentIdsCreatedTest()","36":"SequenceIdTest::::differentIdsCreatedTest()","37":"SequenceIdTest::::differentIdsCreatedTest()","38":"SequenceIdTest::::differentIdsCreatedTest()","39":"SequenceIdTest::::differentIdsCreatedTest()","40":"SequenceIdTest::::differentIdsCreatedTest()"},"tests":[{"test_lines":[34,40],"covered_lines":[31,38,39,40,48],"label":"SequenceId::::getId()"}]},"/bernard/dataset_construction/prep/repos/itext-java/commons/src/main/java/com/itextpdf/commons/actions/sequence/SequenceIdManager.java":{"class_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.actions.sequence;\n","\n","import com.itextpdf.commons.exceptions.CommonsExceptionMessageConstant;\n","import com.itextpdf.commons.utils.MessageFormatUtil;\n","\n","/**\n"," * Util class which is responsible for marking of {@link AbstractIdentifiableElement} with\n"," * appropriate {@link SequenceId}.\n"," */\n","public final class SequenceIdManager {\n","    private SequenceIdManager() {}\n","\n","    /**\n","     * Provides an {@link AbstractIdentifiableElement} with a {@link SequenceId}. Note that it is\n","     * forbidden to override already existing identifier. If try to provide a new one then exception\n","     * will be thrown.\n","     *\n","     * @param element    is an identifiable element\n","     * @param sequenceId is an identifier to set\n","     *\n","     * @throws IllegalStateException if element already has an identifier\n","     */\n","    public static void setSequenceId(AbstractIdentifiableElement element, SequenceId sequenceId) {\n","        synchronized (element) {\n","            if (element.getSequenceId() == null) {\n","                element.setSequenceId(sequenceId);\n","            } else {\n","                    throw new IllegalStateException(MessageFormatUtil.format(\n","                            CommonsExceptionMessageConstant.ELEMENT_ALREADY_HAS_IDENTIFIER,\n","                            element.getSequenceId().getId(), sequenceId.getId()));\n","            }\n","        }\n","    }\n","\n","    /**\n","     * Gets an identifier of the element. If it was not provided will return <code>null</code>.\n","     *\n","     * @param element is an identifiable element\n","     *\n","     * @return the identifier of the element if presented and <code>null</code> otherwise\n","     */\n","    public static SequenceId getSequenceId(AbstractIdentifiableElement element) {\n","        return element.getSequenceId();\n","    }\n","}\n"],"test_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.actions.sequence;\n","\n","import com.itextpdf.commons.exceptions.CommonsExceptionMessageConstant;\n","import com.itextpdf.commons.utils.MessageFormatUtil;\n","import com.itextpdf.test.ExtendedITextTest;\n","import com.itextpdf.test.annotations.type.UnitTest;\n","\n","import org.junit.Assert;\n","import org.junit.Test;\n","import org.junit.experimental.categories.Category;\n","\n","@Category(UnitTest.class)\n","public class SequenceIdManagerTest extends ExtendedITextTest {\n","\n","    @Test\n","    public void setIdentifier() {\n","        IdentifiableElement element = new IdentifiableElement();\n","        Assert.assertNull(SequenceIdManager.getSequenceId(element));\n","\n","        SequenceId sequenceId = new SequenceId();\n","        SequenceIdManager.setSequenceId(element, sequenceId);\n","        Assert.assertEquals(sequenceId, SequenceIdManager.getSequenceId(element));\n","    }\n","\n","    @Test\n","    public void overrideIdentifierTest() {\n","        IdentifiableElement element = new IdentifiableElement();\n","        SequenceId sequenceId1 = new SequenceId();\n","        SequenceId sequenceId2 = new SequenceId();\n","        SequenceIdManager.setSequenceId(element, sequenceId1);\n","\n","        Exception e = Assert.assertThrows(IllegalStateException.class,\n","                () -> SequenceIdManager.setSequenceId(element, sequenceId2));\n","\n","        Assert.assertEquals(MessageFormatUtil.format(CommonsExceptionMessageConstant.ELEMENT_ALREADY_HAS_IDENTIFIER,\n","                sequenceId1.getId(), sequenceId2.getId()), e.getMessage());\n","    }\n","\n","    private static class IdentifiableElement extends AbstractIdentifiableElement {\n","\n","    }\n","}\n"],"method_lines_dic":{"SequenceIdManager::::setSequenceId(com.itextpdf.commons.actions.sequence.AbstractIdentifiableElement,com.itextpdf.commons.actions.sequence.SequenceId)":[45,55],"SequenceIdManager::::getSequenceId(com.itextpdf.commons.actions.sequence.AbstractIdentifiableElement)":[64,66]},"test_method_lines_dic":{"SequenceIdManagerTest::::setIdentifier()":[37,45],"SequenceIdManagerTest::::overrideIdentifierTest()":[47,59]},"reverse_method_lines_dic":{"45":"SequenceIdManager::::setSequenceId(com.itextpdf.commons.actions.sequence.AbstractIdentifiableElement,com.itextpdf.commons.actions.sequence.SequenceId)","46":"SequenceIdManager::::setSequenceId(com.itextpdf.commons.actions.sequence.AbstractIdentifiableElement,com.itextpdf.commons.actions.sequence.SequenceId)","47":"SequenceIdManager::::setSequenceId(com.itextpdf.commons.actions.sequence.AbstractIdentifiableElement,com.itextpdf.commons.actions.sequence.SequenceId)","48":"SequenceIdManager::::setSequenceId(com.itextpdf.commons.actions.sequence.AbstractIdentifiableElement,com.itextpdf.commons.actions.sequence.SequenceId)","49":"SequenceIdManager::::setSequenceId(com.itextpdf.commons.actions.sequence.AbstractIdentifiableElement,com.itextpdf.commons.actions.sequence.SequenceId)","50":"SequenceIdManager::::setSequenceId(com.itextpdf.commons.actions.sequence.AbstractIdentifiableElement,com.itextpdf.commons.actions.sequence.SequenceId)","51":"SequenceIdManager::::setSequenceId(com.itextpdf.commons.actions.sequence.AbstractIdentifiableElement,com.itextpdf.commons.actions.sequence.SequenceId)","52":"SequenceIdManager::::setSequenceId(com.itextpdf.commons.actions.sequence.AbstractIdentifiableElement,com.itextpdf.commons.actions.sequence.SequenceId)","53":"SequenceIdManager::::setSequenceId(com.itextpdf.commons.actions.sequence.AbstractIdentifiableElement,com.itextpdf.commons.actions.sequence.SequenceId)","54":"SequenceIdManager::::setSequenceId(com.itextpdf.commons.actions.sequence.AbstractIdentifiableElement,com.itextpdf.commons.actions.sequence.SequenceId)","55":"SequenceIdManager::::setSequenceId(com.itextpdf.commons.actions.sequence.AbstractIdentifiableElement,com.itextpdf.commons.actions.sequence.SequenceId)","64":"SequenceIdManager::::getSequenceId(com.itextpdf.commons.actions.sequence.AbstractIdentifiableElement)","65":"SequenceIdManager::::getSequenceId(com.itextpdf.commons.actions.sequence.AbstractIdentifiableElement)","66":"SequenceIdManager::::getSequenceId(com.itextpdf.commons.actions.sequence.AbstractIdentifiableElement)"},"test_reverse_method_lines_dic":{"37":"SequenceIdManagerTest::::setIdentifier()","38":"SequenceIdManagerTest::::setIdentifier()","39":"SequenceIdManagerTest::::setIdentifier()","40":"SequenceIdManagerTest::::setIdentifier()","41":"SequenceIdManagerTest::::setIdentifier()","42":"SequenceIdManagerTest::::setIdentifier()","43":"SequenceIdManagerTest::::setIdentifier()","44":"SequenceIdManagerTest::::setIdentifier()","45":"SequenceIdManagerTest::::setIdentifier()","47":"SequenceIdManagerTest::::overrideIdentifierTest()","48":"SequenceIdManagerTest::::overrideIdentifierTest()","49":"SequenceIdManagerTest::::overrideIdentifierTest()","50":"SequenceIdManagerTest::::overrideIdentifierTest()","51":"SequenceIdManagerTest::::overrideIdentifierTest()","52":"SequenceIdManagerTest::::overrideIdentifierTest()","53":"SequenceIdManagerTest::::overrideIdentifierTest()","54":"SequenceIdManagerTest::::overrideIdentifierTest()","55":"SequenceIdManagerTest::::overrideIdentifierTest()","56":"SequenceIdManagerTest::::overrideIdentifierTest()","57":"SequenceIdManagerTest::::overrideIdentifierTest()","58":"SequenceIdManagerTest::::overrideIdentifierTest()","59":"SequenceIdManagerTest::::overrideIdentifierTest()"},"tests":[{"test_lines":[37,45],"covered_lines":[46,47,48,54,55,65],"label":"SequenceIdManager::::setSequenceId(com.itextpdf.commons.actions.sequence.AbstractIdentifiableElement,com.itextpdf.commons.actions.sequence.SequenceId)"},{"test_lines":[47,59],"covered_lines":[46,47,48,50,52,54,55],"label":"SequenceIdManager::::setSequenceId(com.itextpdf.commons.actions.sequence.AbstractIdentifiableElement,com.itextpdf.commons.actions.sequence.SequenceId)"}]},"/bernard/dataset_construction/prep/repos/itext-java/commons/src/main/java/com/itextpdf/commons/exceptions/ITextException.java":{"class_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.exceptions;\n","\n","/**\n"," * General iText exception.\n"," *\n"," * <p>\n"," * Important note, not all iText exceptions are extended from ITextException.\n"," */\n","public class ITextException extends RuntimeException {\n","    /**\n","     * Creates a new ITextException with no error message and cause.\n","     */\n","    public ITextException() {\n","        super(CommonsExceptionMessageConstant.UNKNOWN_ITEXT_EXCEPTION);\n","    }\n","\n","    /**\n","     * Creates a new ITextException.\n","     *\n","     * @param message the detail message\n","     */\n","    public ITextException(String message) {\n","        super(message);\n","    }\n","\n","    /**\n","     * Creates a new ITextException.\n","     *\n","     * @param cause the cause (which is saved for later retrieval by {@link #getCause()} method)\n","     */\n","    public ITextException(Throwable cause) {\n","        super(CommonsExceptionMessageConstant.UNKNOWN_ITEXT_EXCEPTION, cause);\n","    }\n","\n","    /**\n","     * Creates a new ITextException.\n","     *\n","     * @param message the detail message\n","     * @param cause the cause (which is saved for later retrieval by {@link #getCause()} method)\n","     */\n","    public ITextException(String message, Throwable cause) { super(message, cause); }\n","}\n"],"test_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.exceptions;\n","\n","import com.itextpdf.test.ExtendedITextTest;\n","import com.itextpdf.test.annotations.type.UnitTest;\n","import org.junit.Assert;\n","import org.junit.Test;\n","import org.junit.experimental.categories.Category;\n","\n","@Category(UnitTest.class)\n","public class ITextExceptionTest extends ExtendedITextTest {\n","    @Test\n","    public void noParametersConstructorTest() {\n","        Exception exception = Assert.assertThrows(ITextException.class, () -> {\n","            throw new ITextException();\n","        });\n","        Assert.assertEquals(CommonsExceptionMessageConstant.UNKNOWN_ITEXT_EXCEPTION, exception.getMessage());\n","    }\n","\n","    @Test\n","    public void stringConstructorTest() {\n","        Exception exception = Assert.assertThrows(ITextException.class, () -> {\n","            throw new ITextException(\"message\");\n","        });\n","        Assert.assertEquals(\"message\", exception.getMessage());\n","    }\n","\n","    @Test\n","    public void throwableConstructorTest() {\n","        RuntimeException cause = new RuntimeException(\"cause\");\n","        Exception exception = Assert.assertThrows(ITextException.class, () -> {\n","            throw new ITextException(cause);\n","        });\n","\n","        Assert.assertEquals(CommonsExceptionMessageConstant.UNKNOWN_ITEXT_EXCEPTION, exception.getMessage());\n","        Assert.assertEquals(cause, exception.getCause());\n","    }\n","}\n"],"method_lines_dic":{},"test_method_lines_dic":{"ITextExceptionTest::::noParametersConstructorTest()":[33,39],"ITextExceptionTest::::stringConstructorTest()":[41,47],"ITextExceptionTest::::throwableConstructorTest()":[49,58]},"reverse_method_lines_dic":{},"test_reverse_method_lines_dic":{"33":"ITextExceptionTest::::noParametersConstructorTest()","34":"ITextExceptionTest::::noParametersConstructorTest()","35":"ITextExceptionTest::::noParametersConstructorTest()","36":"ITextExceptionTest::::noParametersConstructorTest()","37":"ITextExceptionTest::::noParametersConstructorTest()","38":"ITextExceptionTest::::noParametersConstructorTest()","39":"ITextExceptionTest::::noParametersConstructorTest()","41":"ITextExceptionTest::::stringConstructorTest()","42":"ITextExceptionTest::::stringConstructorTest()","43":"ITextExceptionTest::::stringConstructorTest()","44":"ITextExceptionTest::::stringConstructorTest()","45":"ITextExceptionTest::::stringConstructorTest()","46":"ITextExceptionTest::::stringConstructorTest()","47":"ITextExceptionTest::::stringConstructorTest()","49":"ITextExceptionTest::::throwableConstructorTest()","50":"ITextExceptionTest::::throwableConstructorTest()","51":"ITextExceptionTest::::throwableConstructorTest()","52":"ITextExceptionTest::::throwableConstructorTest()","53":"ITextExceptionTest::::throwableConstructorTest()","54":"ITextExceptionTest::::throwableConstructorTest()","55":"ITextExceptionTest::::throwableConstructorTest()","56":"ITextExceptionTest::::throwableConstructorTest()","57":"ITextExceptionTest::::throwableConstructorTest()","58":"ITextExceptionTest::::throwableConstructorTest()"},"tests":[{"test_lines":[33,39],"covered_lines":[36,37],"label":"<<UNRECOGNISED_METHOD>>"},{"test_lines":[41,47],"covered_lines":[45,46],"label":"<<UNRECOGNISED_METHOD>>"},{"test_lines":[49,58],"covered_lines":[54,55],"label":"<<UNRECOGNISED_METHOD>>"}]},"/bernard/dataset_construction/prep/repos/itext-java/commons/src/main/java/com/itextpdf/commons/exceptions/AggregatedException.java":{"class_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.exceptions;\n","\n","import java.util.ArrayList;\n","import java.util.Collections;\n","import java.util.List;\n","\n","/**\n"," * Composite exception class.\n"," */\n","public class AggregatedException extends ITextException {\n","    /**\n","     * Notifies that event processing failed.\n","     */\n","    public static final String ERROR_DURING_EVENT_PROCESSING = \"Error during event processing\";\n","\n","    private static final String AGGREGATED_MESSAGE = \"Aggregated message\";\n","    private final List<RuntimeException> aggregatedExceptions;\n","\n","    /**\n","     * Creates an instance of aggregated exception based on the collection of exceptions.\n","     *\n","     * @param aggregatedExceptions is a list of aggregated exceptions\n","     */\n","    public AggregatedException(List<RuntimeException> aggregatedExceptions) {\n","        super(\"\");\n","        this.aggregatedExceptions = new ArrayList<>(aggregatedExceptions);\n","    }\n","\n","    /**\n","     * Creates an instance of aggregated exception based on the collection of exceptions.\n","     *\n","     * @param message the detail message\n","     * @param aggregatedExceptions is a list of aggregated exceptions\n","     */\n","    public AggregatedException(String message, List<RuntimeException> aggregatedExceptions) {\n","        super(message);\n","        this.aggregatedExceptions = new ArrayList<>(aggregatedExceptions);\n","    }\n","\n","    /**\n","     * Builds message for the exception including its own message and all messages from the\n","     * aggregated exceptions.\n","     *\n","     * @return aggregated message\n","     */\n","    @Override\n","    public String getMessage() {\n","        String message = super.getMessage();\n","        if (message == null || message.isEmpty()) {\n","            message = AGGREGATED_MESSAGE;\n","        }\n","        final StringBuilder builder = new StringBuilder(message);\n","        builder.append(\":\\n\");\n","        for (int i = 0; i < aggregatedExceptions.size(); ++i) {\n","            Exception current = aggregatedExceptions.get(i);\n","            if (current != null) {\n","                builder.append(i).append(\") \").append(current.getMessage()).append('\\n');\n","            }\n","        }\n","        return builder.toString();\n","    }\n","\n","    /**\n","     * Gets a list of aggregated exceptions.\n","     *\n","     * @return aggregated exceptions\n","     */\n","    public List<Exception> getAggregatedExceptions() {\n","        return Collections.unmodifiableList(aggregatedExceptions);\n","    }\n","}\n"],"test_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.exceptions;\n","\n","import com.itextpdf.test.ExtendedITextTest;\n","import com.itextpdf.test.annotations.type.UnitTest;\n","\n","import java.util.ArrayList;\n","import java.util.List;\n","import org.junit.Assert;\n","import org.junit.Test;\n","import org.junit.experimental.categories.Category;\n","\n","@Category(UnitTest.class)\n","public class AggregatedExceptionTest extends ExtendedITextTest {\n","\n","    @Test\n","    public void aggregatedMessageWithGeneralMessageTest() {\n","        List<RuntimeException> exceptions = new ArrayList<>();\n","        exceptions.add(new RuntimeException(\"Message 1\"));\n","        exceptions.add(new RuntimeException(\"Message 2\"));\n","        exceptions.add(new CustomException(\"Message 3\"));\n","\n","        AggregatedException exception = new AggregatedException(\"General message\", exceptions);\n","        Assert.assertEquals(exceptions, exception.getAggregatedExceptions());\n","        Assert.assertEquals(\"General message:\\n\"\n","                + \"0) Message 1\\n\"\n","                + \"1) Message 2\\n\"\n","                + \"2) Message 3\\n\", exception.getMessage());\n","    }\n","\n","    @Test\n","    public void aggregatedMessageWithoutGeneralMessageTest() {\n","        List<RuntimeException> exceptions = new ArrayList<>();\n","        exceptions.add(new RuntimeException(\"Message 1\"));\n","        exceptions.add(new RuntimeException(\"Message 2\"));\n","        exceptions.add(new CustomException(\"Message 3\"));\n","\n","        AggregatedException exception = new AggregatedException(exceptions);\n","        Assert.assertEquals(\"Aggregated message:\\n\"\n","                + \"0) Message 1\\n\"\n","                + \"1) Message 2\\n\"\n","                + \"2) Message 3\\n\", exception.getMessage());\n","    }\n","\n","    private static final class CustomException extends RuntimeException {\n","        public CustomException(String message) {\n","            super(message);\n","        }\n","    }\n","}\n"],"method_lines_dic":{"AggregatedException::::getMessage()":[68,83],"AggregatedException::::getAggregatedExceptions()":[90,92]},"test_method_lines_dic":{"AggregatedExceptionTest::::aggregatedMessageWithGeneralMessageTest()":[37,50],"AggregatedExceptionTest::::aggregatedMessageWithoutGeneralMessageTest()":[52,64]},"reverse_method_lines_dic":{"68":"AggregatedException::::getMessage()","69":"AggregatedException::::getMessage()","70":"AggregatedException::::getMessage()","71":"AggregatedException::::getMessage()","72":"AggregatedException::::getMessage()","73":"AggregatedException::::getMessage()","74":"AggregatedException::::getMessage()","75":"AggregatedException::::getMessage()","76":"AggregatedException::::getMessage()","77":"AggregatedException::::getMessage()","78":"AggregatedException::::getMessage()","79":"AggregatedException::::getMessage()","80":"AggregatedException::::getMessage()","81":"AggregatedException::::getMessage()","82":"AggregatedException::::getMessage()","83":"AggregatedException::::getMessage()","90":"AggregatedException::::getAggregatedExceptions()","91":"AggregatedException::::getAggregatedExceptions()","92":"AggregatedException::::getAggregatedExceptions()"},"test_reverse_method_lines_dic":{"37":"AggregatedExceptionTest::::aggregatedMessageWithGeneralMessageTest()","38":"AggregatedExceptionTest::::aggregatedMessageWithGeneralMessageTest()","39":"AggregatedExceptionTest::::aggregatedMessageWithGeneralMessageTest()","40":"AggregatedExceptionTest::::aggregatedMessageWithGeneralMessageTest()","41":"AggregatedExceptionTest::::aggregatedMessageWithGeneralMessageTest()","42":"AggregatedExceptionTest::::aggregatedMessageWithGeneralMessageTest()","43":"AggregatedExceptionTest::::aggregatedMessageWithGeneralMessageTest()","44":"AggregatedExceptionTest::::aggregatedMessageWithGeneralMessageTest()","45":"AggregatedExceptionTest::::aggregatedMessageWithGeneralMessageTest()","46":"AggregatedExceptionTest::::aggregatedMessageWithGeneralMessageTest()","47":"AggregatedExceptionTest::::aggregatedMessageWithGeneralMessageTest()","48":"AggregatedExceptionTest::::aggregatedMessageWithGeneralMessageTest()","49":"AggregatedExceptionTest::::aggregatedMessageWithGeneralMessageTest()","50":"AggregatedExceptionTest::::aggregatedMessageWithGeneralMessageTest()","52":"AggregatedExceptionTest::::aggregatedMessageWithoutGeneralMessageTest()","53":"AggregatedExceptionTest::::aggregatedMessageWithoutGeneralMessageTest()","54":"AggregatedExceptionTest::::aggregatedMessageWithoutGeneralMessageTest()","55":"AggregatedExceptionTest::::aggregatedMessageWithoutGeneralMessageTest()","56":"AggregatedExceptionTest::::aggregatedMessageWithoutGeneralMessageTest()","57":"AggregatedExceptionTest::::aggregatedMessageWithoutGeneralMessageTest()","58":"AggregatedExceptionTest::::aggregatedMessageWithoutGeneralMessageTest()","59":"AggregatedExceptionTest::::aggregatedMessageWithoutGeneralMessageTest()","60":"AggregatedExceptionTest::::aggregatedMessageWithoutGeneralMessageTest()","61":"AggregatedExceptionTest::::aggregatedMessageWithoutGeneralMessageTest()","62":"AggregatedExceptionTest::::aggregatedMessageWithoutGeneralMessageTest()","63":"AggregatedExceptionTest::::aggregatedMessageWithoutGeneralMessageTest()","64":"AggregatedExceptionTest::::aggregatedMessageWithoutGeneralMessageTest()"},"tests":[{"test_lines":[37,50],"covered_lines":[58,59,60,70,71,74,75,76,77,78,79,82,91],"label":"AggregatedException::::getAggregatedExceptions()"},{"test_lines":[52,64],"covered_lines":[47,48,49,70,71,72,74,75,76,77,78,79,82],"label":"AggregatedException::::getMessage()"}]},"/bernard/dataset_construction/prep/repos/itext-java/commons/src/main/java/com/itextpdf/commons/utils/MessageFormatUtil.java":{"class_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.utils;\n","\n","import java.text.MessageFormat;\n","import java.util.Locale;\n","\n","/**\n"," * This file is a helper class for internal usage only.\n"," * Be aware that its API and functionality may be changed in future.\n"," */\n","public final class MessageFormatUtil {\n","\n","    private MessageFormatUtil() {\n","        // Empty constructor.\n","    }\n","\n","    /**\n","     * This method provides a generic way for formatting strings.\n","     * Indexed arguments can be referred with {index},\n","     * to escape curly braces you have to double them.\n","     *\n","     * <p>\n","     * Only basic escaping is allowed, single quotes in a set of curly braces are not supported and\n","     * multiple escaped braces in a row are also not supported\n","     * \n","     * <p>\n","     * Allowed {{{0}}}\n","     * Allowed '{0}'\n","     * Allowed '{{{0}}}'\n","     *\n","     * <p>\n","     * Not allowed {{'{0}'}}\n","     * Not allowed {{{{{0}}}}}\n","     *\n","     * @param pattern   to format\n","     * @param arguments arguments\n","     *\n","     * @return The formatted string\n","     */\n","    public static String format(String pattern, Object... arguments) {\n","        return new MessageFormat(\n","                pattern.replace(\"'\", \"''\")\n","                        .replace(\"{{{\",\"'{'{\" )\n","                        .replace(\"}}}\",\"}'}'\" )\n","                        .replace(\"{{\",\"'{'\" )\n","                        .replace(\"}}\",\"'}'\" )\n","                ,Locale.ROOT).format(arguments);\n","    }\n","}\n"],"test_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.utils;\n","\n","import com.itextpdf.test.ExtendedITextTest;\n","\n","import java.util.Arrays;\n","\n","import com.itextpdf.test.annotations.type.UnitTest;\n","import org.junit.Assert;\n","import org.junit.Test;\n","import org.junit.experimental.categories.Category;\n","import org.junit.runner.RunWith;\n","import org.junit.runners.Parameterized;\n","\n","@RunWith(Parameterized.class)\n","@Category(UnitTest.class)\n","public class MessageFormatUtilTest extends ExtendedITextTest {\n","\n","    private String expectedResult;\n","    private String pattern;\n","    private Object[] arguments;\n","\n","    public MessageFormatUtilTest(Object expectedResult, Object pattern, Object arguments, Object name) {\n","        this.expectedResult = (String) expectedResult;\n","        this.pattern = (String) pattern;\n","        this.arguments = (Object[]) arguments;\n","    }\n","\n","    @Parameterized.Parameters(name = \"{index}: {3} format: {1}; {0}\")\n","    public static Iterable<Object[]> dataSource() {\n","        return Arrays.asList(new Object[][]{\n","                {\"Plain message with params 1 test\", \"Plain message with params {0} {1}\", new Object[]{1, \"test\"}, \"test with simple params\"},\n","                {\"Message with 'single quotes'\", \"Message with 'single quotes'\", new Object[0], \"test with single quotes\"},\n","                {\"Message with ''doubled single quotes''\", \"Message with ''doubled single quotes''\", new Object[0], \"test with doubled single quotes\"},\n","                {\"Message with {curly braces} and a parameter {I'm between curly braces too}\", \"Message with {{curly braces}} and a parameter {{{0}}}\", new Object[]{\"I'm between curly braces too\"}, \"Test with curly braces\"},\n","                {\"'{value}'\", \"'{{{0}}}'\", new Object[]{\"value\"}, \"Mix om multiple brackets and quotes 1\"},\n","                {\"'value'\", \"'{0}'\", new Object[]{\"value\"}, \"Mix of brackets and quotes\"},\n","                {\"{'0'}\", \"{{'0'}}\", new Object[0], \"Mix of multiple brackets and quotes 2\"},\n","                {\"single opening brace {0 test\", \"single opening brace {{0 test\", new Object[0], \"Test single opening brace\"},\n","                {\"single closing  brace 0} test\", \"single closing  brace 0}} test\", new Object[0], \"Test single closing brace\"},\n","                {\"single opening + closing  brace {  test  }\", \"single opening + closing  brace {{  {0}  }}\", new Object[]{\"test\"}, \"Test single opening and closing brace\"},\n","        });\n","    }\n","\n","    @Test\n","    public void testFormatting() {\n","        Assert.assertEquals(expectedResult, MessageFormatUtil.format(pattern, arguments));\n","    }\n","}\n"],"method_lines_dic":{"MessageFormatUtil::::format(java.lang.String,java.lang.Object[])":[61,69]},"test_method_lines_dic":{"MessageFormatUtilTest::::dataSource()":[50,64],"MessageFormatUtilTest::::testFormatting()":[66,69]},"reverse_method_lines_dic":{"61":"MessageFormatUtil::::format(java.lang.String,java.lang.Object[])","62":"MessageFormatUtil::::format(java.lang.String,java.lang.Object[])","63":"MessageFormatUtil::::format(java.lang.String,java.lang.Object[])","64":"MessageFormatUtil::::format(java.lang.String,java.lang.Object[])","65":"MessageFormatUtil::::format(java.lang.String,java.lang.Object[])","66":"MessageFormatUtil::::format(java.lang.String,java.lang.Object[])","67":"MessageFormatUtil::::format(java.lang.String,java.lang.Object[])","68":"MessageFormatUtil::::format(java.lang.String,java.lang.Object[])","69":"MessageFormatUtil::::format(java.lang.String,java.lang.Object[])"},"test_reverse_method_lines_dic":{"50":"MessageFormatUtilTest::::dataSource()","51":"MessageFormatUtilTest::::dataSource()","52":"MessageFormatUtilTest::::dataSource()","53":"MessageFormatUtilTest::::dataSource()","54":"MessageFormatUtilTest::::dataSource()","55":"MessageFormatUtilTest::::dataSource()","56":"MessageFormatUtilTest::::dataSource()","57":"MessageFormatUtilTest::::dataSource()","58":"MessageFormatUtilTest::::dataSource()","59":"MessageFormatUtilTest::::dataSource()","60":"MessageFormatUtilTest::::dataSource()","61":"MessageFormatUtilTest::::dataSource()","62":"MessageFormatUtilTest::::dataSource()","63":"MessageFormatUtilTest::::dataSource()","64":"MessageFormatUtilTest::::dataSource()","66":"MessageFormatUtilTest::::testFormatting()","67":"MessageFormatUtilTest::::testFormatting()","68":"MessageFormatUtilTest::::testFormatting()","69":"MessageFormatUtilTest::::testFormatting()"},"tests":[{"test_lines":[66,69],"covered_lines":[62,63,64,65,66,67,68],"label":"MessageFormatUtil::::format(java.lang.String,java.lang.Object[])"}]},"/bernard/dataset_construction/prep/repos/itext-java/commons/src/main/java/com/itextpdf/commons/utils/DateTimeUtil.java":{"class_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.utils;\n","\n","import java.text.DateFormat;\n","import java.text.ParseException;\n","import java.text.SimpleDateFormat;\n","import java.util.Calendar;\n","import java.util.Date;\n","import java.util.GregorianCalendar;\n","import java.util.TimeZone;\n","\n","/**\n"," * This file is a helper class for internal usage only.\n"," * Be aware that its API and functionality may be changed in future.\n"," */\n","public final class DateTimeUtil {\n","    private static final String DEFAULT_PATTERN = \"yyyy-MM-dd\";\n","\n","    private DateTimeUtil() {\n","        // Empty constructor.\n","    }\n","\n","    /**\n","     * Gets the {@link Calendar} as UTC milliseconds from the epoch.\n","     *\n","     * @param calendar the calendar to be converted to millis\n","     *\n","     * @return the date as UTC milliseconds from the epoch\n","     */\n","    public static double getUtcMillisFromEpoch(Calendar calendar) {\n","        if (calendar == null) {\n","            calendar = new GregorianCalendar();\n","        }\n","        return calendar.getTimeInMillis();\n","    }\n","\n","    /**\n","     * Gets the date as {@link Calendar}.\n","     *\n","     * @param date the date to be returned as {@link Calendar}\n","     *\n","     * @return the date as {@link Calendar}\n","     */\n","    public static Calendar getCalendar(Date date) {\n","        if (date == null) {\n","            return null;\n","        }\n","        Calendar calendar = Calendar.getInstance();\n","        calendar.setTime(date);\n","        return calendar;\n","    }\n","\n","    /**\n","     * Gets a default {@link GregorianCalendar}.\n","     *\n","     * @return a default {@link GregorianCalendar} using the current time in the default\n","     * time zone with the default locale\n","     */\n","    public static Calendar getCurrentTimeCalendar() {\n","        return new GregorianCalendar();\n","    }\n","\n","\n","    /**\n","     * Gets current time consistently.\n","     *\n","     * @return the time at which it was allocated, measured to the nearest millisecond\n","     */\n","    public static Date getCurrentTimeDate() {\n","        return new Date();\n","    }\n","\n","    /**\n","     * Adds the specified amount of days to the given calendar field.\n","     *\n","     * @param calendar the calendar field where to add\n","     * @param days the amount of days to be added\n","     *\n","     * @return the time at which it was allocated, measured to the nearest millisecond\n","     */\n","    public static Calendar addDaysToCalendar(Calendar calendar, int days) {\n","        calendar.add(Calendar.DAY_OF_YEAR, days);\n","        return calendar;\n","    }\n","\n","    /**\n","     * Defines if date is in past.\n","     *\n","     * @param date the date to be compared with current date\n","     *\n","     * @return <code>true</code> if given date is in past, <code>false</code> instead\n","     */\n","    public static boolean isInPast(Date date) {\n","        return date.before(getCurrentTimeDate());\n","    }\n","\n","    /**\n","     * Gets the number of milliseconds since January 1, 1970, 00:00:00 GMT\n","     * represented by specified date.\n","     *\n","     * @param date the specified date to get time\n","     *\n","     * @return the number of milliseconds since January 1, 1970, 00:00:00 GMT\n","     * represented by the specified date\n","     */\n","    public static long getRelativeTime(Date date) {\n","        return date.getTime();\n","    }\n","\n","    /**\n","     * Adds provided number of milliseconds to the Date.\n","     * \n","     * @param date {@link Date} date to increase\n","     * @param millis number of milliseconds to add\n","     * \n","     * @return updated {@link Date}\n","     */\n","    public static Date addMillisToDate(Date date, long millis) {\n","        return new Date(DateTimeUtil.getRelativeTime(date) + millis);\n","    }\n","\n","    /**\n","     * Adds the specified amount of days to the given date.\n","     *\n","     * @param date the specified date to add\n","     * @param days the amount of days to be added\n","     *\n","     * @return a {@link Date} object representing the calendar's time value (millisecond\n","     * offset from the Epoch)\n","     */\n","    public static Date addDaysToDate(Date date, int days) {\n","        Calendar cal = new GregorianCalendar();\n","        cal.setTime(date);\n","        cal.add(Calendar.DAY_OF_YEAR, days);\n","        return cal.getTime();\n","    }\n","\n","    /**\n","     * Adds the specified amount of years to the given date.\n","     *\n","     * @param date the specified date to add\n","     * @param years the amount of years to be added\n","     *\n","     * @return a {@link Date} object representing the calendar's time value (millisecond\n","     * offset from the Epoch)\n","     */\n","    public static Date addYearsToDate(Date date, int years) {\n","        Calendar cal = new GregorianCalendar();\n","        cal.setTime(date);\n","        cal.add(Calendar.YEAR, years);\n","        return cal.getTime();\n","    }\n","\n","    /**\n","     * Parses passing date with default yyyy-MM-dd pattern.\n","     *\n","     * @param date is date to be parse\n","     *\n","     * @return parse date\n","     */\n","    public static Date parseWithDefaultPattern(String date) {\n","        return parse(date, DEFAULT_PATTERN);\n","    }\n","\n","    /**\n","     * Parses passing date with specified format.\n","     *\n","     * @param date the date to be parsed\n","     * @param format the format of parsing the date\n","     *\n","     * @return parsed date\n","     */\n","    public static Date parse(String date, String format) {\n","        try {\n","            return initParserSDF(format).parse(date);\n","        } catch (ParseException e) {\n","            throw new RuntimeException(e);\n","        }\n","    }\n","\n","    /**\n","     * Format passing date with default yyyy-MM-dd pattern.\n","     *\n","     * @param date the date to be formatted\n","     *\n","     * @return formatted date\n","     */\n","    public static String formatWithDefaultPattern(Date date) {\n","        return format(date, DEFAULT_PATTERN);\n","    }\n","\n","    /**\n","     * Format passing date with specified pattern.\n","     *\n","     * @param date date to be formatted\n","     * @param pattern pattern for format\n","     *\n","     * @return formatted date\n","     */\n","    public static String format(Date date, String pattern) {\n","        return initParserSDF(pattern).format(date);\n","    }\n","\n","    /**\n","     * Gets the offset of time zone from UTC at the specified date.\n","     *\n","     * @param date the date represented in milliseconds since January 1, 1970 00:00:00 GMT\n","     *\n","     * @return the offset of time zone from UTC at the specified date adjusted with the amount\n","     * of daylight saving.\n","     */\n","    public static long getCurrentTimeZoneOffset(Date date) {\n","        TimeZone tz = TimeZone.getDefault();\n","        return tz.getOffset(date.getTime());\n","    }\n","\n","    /**\n","     * Converts {@link Calendar} date to string of \"yyyy.MM.dd HH:mm:ss z\" format.\n","     *\n","     * @param date to convert.\n","     *\n","     * @return string date value.\n","     */\n","    public static String dateToString(Calendar date) {\n","        return new SimpleDateFormat(\"yyyy.MM.dd HH:mm:ss z\").format(date.getTime());\n","    }\n","\n","    private static DateFormat initParserSDF(String pattern) {\n","        final SimpleDateFormat parserSDF = new SimpleDateFormat(pattern);\n","        parserSDF.setCalendar(new GregorianCalendar());\n","        return parserSDF;\n","    }\n","}\n"],"test_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.utils;\n","\n","import com.itextpdf.test.ExtendedITextTest;\n","import com.itextpdf.test.annotations.type.UnitTest;\n","\n","import java.util.Calendar;\n","import java.util.Date;\n","import java.util.GregorianCalendar;\n","\n","import org.junit.Assert;\n","import org.junit.Test;\n","import org.junit.experimental.categories.Category;\n","\n","@Category(UnitTest.class)\n","public class DateTimeUtilTest extends ExtendedITextTest {\n","\n","    private static final double ZERO_DELTA = 1e-6;\n","    private static final double ONE_SECOND_DELTA = 1000.0;\n","\n","    @Test\n","    public void getCurrentTest() {\n","        long nowEpoch = new Date().getTime();\n","        long nowDateTimeUtilEpoch = DateTimeUtil.getCurrentTimeDate().getTime();\n","        Assert.assertEquals(nowEpoch, nowDateTimeUtilEpoch, ONE_SECOND_DELTA);\n","    }\n","\n","    @Test\n","    public void isInPastTest() {\n","        Date date = new Date(1);\n","        Assert.assertTrue(DateTimeUtil.isInPast(date));\n","    }\n","\n","    @Test\n","    public void parseDateAndGetUtcMillisFromEpochTest() {\n","        Date date = DateTimeUtil.parseWithDefaultPattern(\"2020-05-05\");\n","        Calendar parsedDate = DateTimeUtil.getCalendar(date);\n","\n","        double millisFromEpochTo2020_05_05 = DateTimeUtil.getUtcMillisFromEpoch(parsedDate);\n","\n","        long offset = DateTimeUtil.getCurrentTimeZoneOffset(date);\n","\n","        Assert.assertEquals(1588636800000d - offset, millisFromEpochTo2020_05_05, ZERO_DELTA);\n","    }\n","\n","    @Test\n","    public void getCalenderForNullDateTest() {\n","        Calendar result = DateTimeUtil.getCalendar(null);\n","        Assert.assertNull(result);\n","    }\n","\n","    @Test\n","    public void getCalenderTest() {\n","        Date testDate = DateTimeUtil.getCurrentTimeDate();\n","        Calendar result = DateTimeUtil.getCalendar(testDate);\n","        Assert.assertNotNull(result);\n","        Assert.assertEquals(testDate, result.getTime());\n","    }\n","\n","    @Test\n","    public void addMillisToDateTest() {\n","        Date almostCurrentTime = new Date(new Date().getTime() - 2000);\n","        long twoSeconds = 2000;\n","        Assert.assertEquals(new Date().getTime(),\n","                DateTimeUtil.addMillisToDate(almostCurrentTime, twoSeconds).getTime(), ONE_SECOND_DELTA);\n","    }\n","\n","    @Test\n","    public void compareUtcMillisFromEpochWithNullParamAndCurrentTimeTest() {\n","        double getUtcMillisFromEpochWithNullParam = DateTimeUtil.getUtcMillisFromEpoch(null);\n","        double millisFromEpochToCurrentTime = DateTimeUtil.getUtcMillisFromEpoch(DateTimeUtil.getCurrentTimeCalendar());\n","\n","        Assert.assertEquals(millisFromEpochToCurrentTime, getUtcMillisFromEpochWithNullParam, ONE_SECOND_DELTA);\n","    }\n","\n","    @Test\n","    public void parseDateAndGetRelativeTimeTest() {\n","        Date date = DateTimeUtil.parseWithDefaultPattern(\"2020-05-05\");\n","        double relativeTime = DateTimeUtil.getRelativeTime(date);\n","\n","        long offset = DateTimeUtil.getCurrentTimeZoneOffset(date);\n","\n","        Assert.assertEquals(1588636800000d - offset, relativeTime, ZERO_DELTA);\n","    }\n","\n","    @Test\n","    public void addYearPositiveValueTest () {\n","        GregorianCalendar originalDate = new GregorianCalendar(2000 + 1900, 1, 1);\n","        originalDate.getTime();\n","\n","        Date newDate = DateTimeUtil.addYearsToDate(originalDate.getTime(), 5);\n","\n","        Assert.assertEquals(2005, newDate.getYear());\n","    }\n","\n","    @Test\n","    public void addYearNegativeValueTest () {\n","        GregorianCalendar originalDate = new GregorianCalendar(2000 + 1900, 1, 1);\n","        originalDate.getTime();\n","\n","        Date newDate = DateTimeUtil.addYearsToDate(originalDate.getTime(), -3);\n","\n","        Assert.assertEquals(1997, newDate.getYear());\n","    }\n","}\n"],"method_lines_dic":{"DateTimeUtil::::getUtcMillisFromEpoch(java.util.Calendar)":[51,56],"DateTimeUtil::::getCalendar(java.util.Date)":[65,72],"DateTimeUtil::::getCurrentTimeCalendar()":[80,82],"DateTimeUtil::::getCurrentTimeDate()":[90,92],"DateTimeUtil::::addDaysToCalendar(java.util.Calendar,int)":[102,105],"DateTimeUtil::::isInPast(java.util.Date)":[114,116],"DateTimeUtil::::getRelativeTime(java.util.Date)":[127,129],"DateTimeUtil::::addMillisToDate(java.util.Date,long)":[139,141],"DateTimeUtil::::addDaysToDate(java.util.Date,int)":[152,157],"DateTimeUtil::::addYearsToDate(java.util.Date,int)":[168,173],"DateTimeUtil::::parseWithDefaultPattern(java.lang.String)":[182,184],"DateTimeUtil::::parse(java.lang.String,java.lang.String)":[194,200],"DateTimeUtil::::formatWithDefaultPattern(java.util.Date)":[209,211],"DateTimeUtil::::format(java.util.Date,java.lang.String)":[221,223],"DateTimeUtil::::getCurrentTimeZoneOffset(java.util.Date)":[233,236],"DateTimeUtil::::dateToString(java.util.Calendar)":[245,247],"DateTimeUtil::::initParserSDF(java.lang.String)":[249,253]},"test_method_lines_dic":{"DateTimeUtilTest::::getCurrentTest()":[42,47],"DateTimeUtilTest::::isInPastTest()":[49,53],"DateTimeUtilTest::::parseDateAndGetUtcMillisFromEpochTest()":[55,65],"DateTimeUtilTest::::getCalenderForNullDateTest()":[67,71],"DateTimeUtilTest::::getCalenderTest()":[73,79],"DateTimeUtilTest::::addMillisToDateTest()":[81,87],"DateTimeUtilTest::::compareUtcMillisFromEpochWithNullParamAndCurrentTimeTest()":[89,95],"DateTimeUtilTest::::parseDateAndGetRelativeTimeTest()":[97,105],"DateTimeUtilTest::::addYearPositiveValueTest()":[107,115],"DateTimeUtilTest::::addYearNegativeValueTest()":[117,125]},"reverse_method_lines_dic":{"51":"DateTimeUtil::::getUtcMillisFromEpoch(java.util.Calendar)","52":"DateTimeUtil::::getUtcMillisFromEpoch(java.util.Calendar)","53":"DateTimeUtil::::getUtcMillisFromEpoch(java.util.Calendar)","54":"DateTimeUtil::::getUtcMillisFromEpoch(java.util.Calendar)","55":"DateTimeUtil::::getUtcMillisFromEpoch(java.util.Calendar)","56":"DateTimeUtil::::getUtcMillisFromEpoch(java.util.Calendar)","65":"DateTimeUtil::::getCalendar(java.util.Date)","66":"DateTimeUtil::::getCalendar(java.util.Date)","67":"DateTimeUtil::::getCalendar(java.util.Date)","68":"DateTimeUtil::::getCalendar(java.util.Date)","69":"DateTimeUtil::::getCalendar(java.util.Date)","70":"DateTimeUtil::::getCalendar(java.util.Date)","71":"DateTimeUtil::::getCalendar(java.util.Date)","72":"DateTimeUtil::::getCalendar(java.util.Date)","80":"DateTimeUtil::::getCurrentTimeCalendar()","81":"DateTimeUtil::::getCurrentTimeCalendar()","82":"DateTimeUtil::::getCurrentTimeCalendar()","90":"DateTimeUtil::::getCurrentTimeDate()","91":"DateTimeUtil::::getCurrentTimeDate()","92":"DateTimeUtil::::getCurrentTimeDate()","102":"DateTimeUtil::::addDaysToCalendar(java.util.Calendar,int)","103":"DateTimeUtil::::addDaysToCalendar(java.util.Calendar,int)","104":"DateTimeUtil::::addDaysToCalendar(java.util.Calendar,int)","105":"DateTimeUtil::::addDaysToCalendar(java.util.Calendar,int)","114":"DateTimeUtil::::isInPast(java.util.Date)","115":"DateTimeUtil::::isInPast(java.util.Date)","116":"DateTimeUtil::::isInPast(java.util.Date)","127":"DateTimeUtil::::getRelativeTime(java.util.Date)","128":"DateTimeUtil::::getRelativeTime(java.util.Date)","129":"DateTimeUtil::::getRelativeTime(java.util.Date)","139":"DateTimeUtil::::addMillisToDate(java.util.Date,long)","140":"DateTimeUtil::::addMillisToDate(java.util.Date,long)","141":"DateTimeUtil::::addMillisToDate(java.util.Date,long)","152":"DateTimeUtil::::addDaysToDate(java.util.Date,int)","153":"DateTimeUtil::::addDaysToDate(java.util.Date,int)","154":"DateTimeUtil::::addDaysToDate(java.util.Date,int)","155":"DateTimeUtil::::addDaysToDate(java.util.Date,int)","156":"DateTimeUtil::::addDaysToDate(java.util.Date,int)","157":"DateTimeUtil::::addDaysToDate(java.util.Date,int)","168":"DateTimeUtil::::addYearsToDate(java.util.Date,int)","169":"DateTimeUtil::::addYearsToDate(java.util.Date,int)","170":"DateTimeUtil::::addYearsToDate(java.util.Date,int)","171":"DateTimeUtil::::addYearsToDate(java.util.Date,int)","172":"DateTimeUtil::::addYearsToDate(java.util.Date,int)","173":"DateTimeUtil::::addYearsToDate(java.util.Date,int)","182":"DateTimeUtil::::parseWithDefaultPattern(java.lang.String)","183":"DateTimeUtil::::parseWithDefaultPattern(java.lang.String)","184":"DateTimeUtil::::parseWithDefaultPattern(java.lang.String)","194":"DateTimeUtil::::parse(java.lang.String,java.lang.String)","195":"DateTimeUtil::::parse(java.lang.String,java.lang.String)","196":"DateTimeUtil::::parse(java.lang.String,java.lang.String)","197":"DateTimeUtil::::parse(java.lang.String,java.lang.String)","198":"DateTimeUtil::::parse(java.lang.String,java.lang.String)","199":"DateTimeUtil::::parse(java.lang.String,java.lang.String)","200":"DateTimeUtil::::parse(java.lang.String,java.lang.String)","209":"DateTimeUtil::::formatWithDefaultPattern(java.util.Date)","210":"DateTimeUtil::::formatWithDefaultPattern(java.util.Date)","211":"DateTimeUtil::::formatWithDefaultPattern(java.util.Date)","221":"DateTimeUtil::::format(java.util.Date,java.lang.String)","222":"DateTimeUtil::::format(java.util.Date,java.lang.String)","223":"DateTimeUtil::::format(java.util.Date,java.lang.String)","233":"DateTimeUtil::::getCurrentTimeZoneOffset(java.util.Date)","234":"DateTimeUtil::::getCurrentTimeZoneOffset(java.util.Date)","235":"DateTimeUtil::::getCurrentTimeZoneOffset(java.util.Date)","236":"DateTimeUtil::::getCurrentTimeZoneOffset(java.util.Date)","245":"DateTimeUtil::::dateToString(java.util.Calendar)","246":"DateTimeUtil::::dateToString(java.util.Calendar)","247":"DateTimeUtil::::dateToString(java.util.Calendar)","249":"DateTimeUtil::::initParserSDF(java.lang.String)","250":"DateTimeUtil::::initParserSDF(java.lang.String)","251":"DateTimeUtil::::initParserSDF(java.lang.String)","252":"DateTimeUtil::::initParserSDF(java.lang.String)","253":"DateTimeUtil::::initParserSDF(java.lang.String)"},"test_reverse_method_lines_dic":{"42":"DateTimeUtilTest::::getCurrentTest()","43":"DateTimeUtilTest::::getCurrentTest()","44":"DateTimeUtilTest::::getCurrentTest()","45":"DateTimeUtilTest::::getCurrentTest()","46":"DateTimeUtilTest::::getCurrentTest()","47":"DateTimeUtilTest::::getCurrentTest()","49":"DateTimeUtilTest::::isInPastTest()","50":"DateTimeUtilTest::::isInPastTest()","51":"DateTimeUtilTest::::isInPastTest()","52":"DateTimeUtilTest::::isInPastTest()","53":"DateTimeUtilTest::::isInPastTest()","55":"DateTimeUtilTest::::parseDateAndGetUtcMillisFromEpochTest()","56":"DateTimeUtilTest::::parseDateAndGetUtcMillisFromEpochTest()","57":"DateTimeUtilTest::::parseDateAndGetUtcMillisFromEpochTest()","58":"DateTimeUtilTest::::parseDateAndGetUtcMillisFromEpochTest()","59":"DateTimeUtilTest::::parseDateAndGetUtcMillisFromEpochTest()","60":"DateTimeUtilTest::::parseDateAndGetUtcMillisFromEpochTest()","61":"DateTimeUtilTest::::parseDateAndGetUtcMillisFromEpochTest()","62":"DateTimeUtilTest::::parseDateAndGetUtcMillisFromEpochTest()","63":"DateTimeUtilTest::::parseDateAndGetUtcMillisFromEpochTest()","64":"DateTimeUtilTest::::parseDateAndGetUtcMillisFromEpochTest()","65":"DateTimeUtilTest::::parseDateAndGetUtcMillisFromEpochTest()","67":"DateTimeUtilTest::::getCalenderForNullDateTest()","68":"DateTimeUtilTest::::getCalenderForNullDateTest()","69":"DateTimeUtilTest::::getCalenderForNullDateTest()","70":"DateTimeUtilTest::::getCalenderForNullDateTest()","71":"DateTimeUtilTest::::getCalenderForNullDateTest()","73":"DateTimeUtilTest::::getCalenderTest()","74":"DateTimeUtilTest::::getCalenderTest()","75":"DateTimeUtilTest::::getCalenderTest()","76":"DateTimeUtilTest::::getCalenderTest()","77":"DateTimeUtilTest::::getCalenderTest()","78":"DateTimeUtilTest::::getCalenderTest()","79":"DateTimeUtilTest::::getCalenderTest()","81":"DateTimeUtilTest::::addMillisToDateTest()","82":"DateTimeUtilTest::::addMillisToDateTest()","83":"DateTimeUtilTest::::addMillisToDateTest()","84":"DateTimeUtilTest::::addMillisToDateTest()","85":"DateTimeUtilTest::::addMillisToDateTest()","86":"DateTimeUtilTest::::addMillisToDateTest()","87":"DateTimeUtilTest::::addMillisToDateTest()","89":"DateTimeUtilTest::::compareUtcMillisFromEpochWithNullParamAndCurrentTimeTest()","90":"DateTimeUtilTest::::compareUtcMillisFromEpochWithNullParamAndCurrentTimeTest()","91":"DateTimeUtilTest::::compareUtcMillisFromEpochWithNullParamAndCurrentTimeTest()","92":"DateTimeUtilTest::::compareUtcMillisFromEpochWithNullParamAndCurrentTimeTest()","93":"DateTimeUtilTest::::compareUtcMillisFromEpochWithNullParamAndCurrentTimeTest()","94":"DateTimeUtilTest::::compareUtcMillisFromEpochWithNullParamAndCurrentTimeTest()","95":"DateTimeUtilTest::::compareUtcMillisFromEpochWithNullParamAndCurrentTimeTest()","97":"DateTimeUtilTest::::parseDateAndGetRelativeTimeTest()","98":"DateTimeUtilTest::::parseDateAndGetRelativeTimeTest()","99":"DateTimeUtilTest::::parseDateAndGetRelativeTimeTest()","100":"DateTimeUtilTest::::parseDateAndGetRelativeTimeTest()","101":"DateTimeUtilTest::::parseDateAndGetRelativeTimeTest()","102":"DateTimeUtilTest::::parseDateAndGetRelativeTimeTest()","103":"DateTimeUtilTest::::parseDateAndGetRelativeTimeTest()","104":"DateTimeUtilTest::::parseDateAndGetRelativeTimeTest()","105":"DateTimeUtilTest::::parseDateAndGetRelativeTimeTest()","107":"DateTimeUtilTest::::addYearPositiveValueTest()","108":"DateTimeUtilTest::::addYearPositiveValueTest()","109":"DateTimeUtilTest::::addYearPositiveValueTest()","110":"DateTimeUtilTest::::addYearPositiveValueTest()","111":"DateTimeUtilTest::::addYearPositiveValueTest()","112":"DateTimeUtilTest::::addYearPositiveValueTest()","113":"DateTimeUtilTest::::addYearPositiveValueTest()","114":"DateTimeUtilTest::::addYearPositiveValueTest()","115":"DateTimeUtilTest::::addYearPositiveValueTest()","117":"DateTimeUtilTest::::addYearNegativeValueTest()","118":"DateTimeUtilTest::::addYearNegativeValueTest()","119":"DateTimeUtilTest::::addYearNegativeValueTest()","120":"DateTimeUtilTest::::addYearNegativeValueTest()","121":"DateTimeUtilTest::::addYearNegativeValueTest()","122":"DateTimeUtilTest::::addYearNegativeValueTest()","123":"DateTimeUtilTest::::addYearNegativeValueTest()","124":"DateTimeUtilTest::::addYearNegativeValueTest()","125":"DateTimeUtilTest::::addYearNegativeValueTest()"},"tests":[{"test_lines":[42,47],"covered_lines":[91],"label":"DateTimeUtil::::getCurrentTimeDate()"},{"test_lines":[49,53],"covered_lines":[91,115],"label":"DateTimeUtil::::isInPast(java.util.Date)"},{"test_lines":[55,65],"covered_lines":[52,55,66,69,70,71,183,196,234,235,250,251,252],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[67,71],"covered_lines":[66,67],"label":"DateTimeUtil::::getCalendar(java.util.Date)"},{"test_lines":[73,79],"covered_lines":[66,69,70,71,91],"label":"DateTimeUtil::::getCalendar(java.util.Date)"},{"test_lines":[81,87],"covered_lines":[128,140],"label":"DateTimeUtil::::addMillisToDate(java.util.Date,long)"},{"test_lines":[89,95],"covered_lines":[52,53,55,81],"label":"DateTimeUtil::::getUtcMillisFromEpoch(java.util.Calendar)"},{"test_lines":[97,105],"covered_lines":[128,183,196,234,235,250,251,252],"label":"DateTimeUtil::::getRelativeTime(java.util.Date)"},{"test_lines":[107,115],"covered_lines":[169,170,171,172],"label":"DateTimeUtil::::addYearsToDate(java.util.Date,int)"},{"test_lines":[117,125],"covered_lines":[169,170,171,172],"label":"DateTimeUtil::::addYearsToDate(java.util.Date,int)"}]},"/bernard/dataset_construction/prep/repos/itext-java/commons/src/main/java/com/itextpdf/commons/utils/ZipFileWriter.java":{"class_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.utils;\n","\n","import com.itextpdf.commons.exceptions.CommonsExceptionMessageConstant;\n","\n","import java.io.Closeable;\n","import java.io.File;\n","import java.io.IOException;\n","import java.io.InputStream;\n","import java.nio.charset.StandardCharsets;\n","import java.nio.file.Files;\n","import java.util.zip.ZipEntry;\n","import java.util.zip.ZipOutputStream;\n","\n","/**\n"," * Allows writing entries into a zip file.\n"," */\n","public class ZipFileWriter implements Closeable {\n","\n","    private final ZipOutputStream outputStream;\n","\n","    /**\n","     * Creates an instance for zip file writing.\n","     *\n","     * @param archivePath the path to the zip file to write\n","     *\n","     * @throws IOException if some I/O exception occurs\n","     */\n","    public ZipFileWriter(String archivePath) throws IOException {\n","        if (archivePath == null) {\n","            throw new IOException(CommonsExceptionMessageConstant.FILE_NAME_CAN_NOT_BE_NULL);\n","        }\n","        if (FileUtil.isFileNotEmpty(archivePath) || FileUtil.directoryExists(archivePath)) {\n","            throw new IOException(\n","                    MessageFormatUtil.format(CommonsExceptionMessageConstant.FILE_NAME_ALREADY_EXIST, archivePath));\n","        }\n","        outputStream = new ZipOutputStream(FileUtil.getFileOutputStream(archivePath), StandardCharsets.UTF_8);\n","        outputStream.setMethod(ZipOutputStream.DEFLATED);\n","        outputStream.setLevel(9);\n","    }\n","\n","    /**\n","     * Add file from disk into zip archive.\n","     *\n","     * @param fileName the target name of the file inside zip after writing\n","     * @param file the path to the file on disk to archive\n","     *\n","     * @throws IOException if some I/O exception occurs\n","     */\n","    public void addEntry(String fileName, File file) throws IOException {\n","        if (file == null) {\n","            throw new IOException(CommonsExceptionMessageConstant.FILE_SHOULD_EXIST);\n","        }\n","        addEntry(fileName, Files.newInputStream(file.toPath()));\n","    }\n","\n","    /**\n","     * Add file into zip archive with data from stream.\n","     *\n","     * @param fileName the target name of the file inside zip after writing\n","     * @param inputStream the input stream to archive\n","     *\n","     * @throws IOException if some I/O exception occurs\n","     */\n","    public void addEntry(String fileName, InputStream inputStream) throws IOException {\n","        if (inputStream == null) {\n","            throw new IOException(CommonsExceptionMessageConstant.STREAM_CAN_NOT_BE_NULL);\n","        }\n","        addEntryToZip(fileName, zos -> {\n","            byte[] bytes = new byte[1024];\n","            int length;\n","            while ((length = inputStream.read(bytes)) > 0) {\n","                zos.write(bytes, 0, length);\n","            }\n","        });\n","    }\n","\n","    /**\n","     * Add file into zip archive with object serialized as JSON.\n","     *\n","     * @param fileName the target name of the file inside zip after writing\n","     * @param objectToAdd the object to serialize as JSON\n","     *\n","     * @throws IOException if some I/O exception occurs\n","     */\n","    public void addJsonEntry(String fileName, Object objectToAdd) throws IOException {\n","        if (objectToAdd == null) {\n","            throw new IOException(CommonsExceptionMessageConstant.JSON_OBJECT_CAN_NOT_BE_NULL);\n","        }\n","        addEntryToZip(fileName, zos -> {\n","            JsonUtil.serializeToStream(zos, objectToAdd);\n","        });\n","    }\n","\n","\n","    @Override\n","    public void close() throws IOException {\n","        outputStream.close();\n","    }\n","\n","    private void addEntryToZip(String fileName, ZipWriter writer) throws IOException {\n","        if (fileName == null) {\n","            throw new IOException(CommonsExceptionMessageConstant.FILE_NAME_SHOULD_BE_UNIQUE);\n","        }\n","        ZipEntry zipEntry = new ZipEntry(fileName);\n","        outputStream.putNextEntry(zipEntry);\n","        writer.write(outputStream);\n","    }\n","\n","    @FunctionalInterface\n","    private interface ZipWriter {\n","        void write(ZipOutputStream outputStream) throws IOException;\n","    }\n","}\n"],"test_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.utils;\n","\n","import com.itextpdf.commons.exceptions.CommonsExceptionMessageConstant;\n","import com.itextpdf.test.ExtendedITextTest;\n","import com.itextpdf.test.annotations.type.IntegrationTest;\n","\n","import java.io.ByteArrayInputStream;\n","import java.io.ByteArrayOutputStream;\n","import java.io.File;\n","import java.io.IOException;\n","import java.io.InputStream;\n","import java.nio.charset.StandardCharsets;\n","import java.util.Arrays;\n","import java.util.Set;\n","import org.junit.Assert;\n","import org.junit.BeforeClass;\n","import org.junit.Test;\n","import org.junit.experimental.categories.Category;\n","\n","@Category(IntegrationTest.class)\n","public class ZipFileWriterTest extends ExtendedITextTest {\n","\n","    private static final String SOURCE_FOLDER = \"./src/test/resources/com/itextpdf/commons/utils/ZipFileWriter/\";\n","    private static final String DESTINATION_FOLDER = \"./target/test/com/itextpdf/commons/utils/ZipFileWriter/\";\n","\n","    @BeforeClass\n","    public static void beforeClass() {\n","        createOrClearDestinationFolder(DESTINATION_FOLDER);\n","    }\n","\n","    @Test\n","    public void constructorWithNullPathTest() {\n","        Exception ex = Assert.assertThrows(IOException.class, () -> new ZipFileWriter(null));\n","        Assert.assertEquals(CommonsExceptionMessageConstant.FILE_NAME_CAN_NOT_BE_NULL, ex.getMessage());\n","    }\n","\n","    @Test\n","    public void constructorWithNotExistingDirsInPathTest() {\n","        Assert.assertThrows(IOException.class, () -> new ZipFileWriter(\n","                DESTINATION_FOLDER + \"notExistingDir/archive.zip\"));\n","    }\n","\n","    @Test\n","    public void constructorWithAlreadyExistedFilePathTest() throws IOException {\n","        final String fileName = \"constructorWithAlreadyExistedFilePath.zip\";\n","        FileUtil.copy(SOURCE_FOLDER + fileName, DESTINATION_FOLDER + fileName);\n","\n","        Exception ex = Assert.assertThrows(IOException.class,\n","                () -> new ZipFileWriter(DESTINATION_FOLDER + fileName));\n","        Assert.assertEquals(\n","                MessageFormatUtil.format(CommonsExceptionMessageConstant.FILE_NAME_ALREADY_EXIST,\n","                        DESTINATION_FOLDER + fileName),\n","                ex.getMessage());\n","    }\n","\n","    @Test\n","    public void constructorWithNotZipFileTest() throws IOException {\n","        final String fileName = \"testFile.txt\";\n","        FileUtil.copy(SOURCE_FOLDER + fileName, DESTINATION_FOLDER + fileName);\n","\n","        Exception ex = Assert.assertThrows(IOException.class,\n","                () -> new ZipFileWriter(DESTINATION_FOLDER + fileName));\n","        Assert.assertEquals(\n","                MessageFormatUtil.format(CommonsExceptionMessageConstant.FILE_NAME_ALREADY_EXIST,\n","                        DESTINATION_FOLDER + fileName), ex.getMessage());\n","    }\n","\n","    @Test\n","    public void constructorWithDirectoryPathTest() throws IOException {\n","        final String pathToDirectory = DESTINATION_FOLDER + \"constructorWithDirectoryPath/\";\n","        FileUtil.createDirectories(pathToDirectory);\n","\n","        Exception ex = Assert.assertThrows(IOException.class, () -> new ZipFileWriter(pathToDirectory));\n","        Assert.assertEquals(\n","                MessageFormatUtil.format(CommonsExceptionMessageConstant.FILE_NAME_ALREADY_EXIST, pathToDirectory),\n","                ex.getMessage());\n","    }\n","\n","    @Test\n","    // Android-Conversion-Ignore-Test (TODO DEVSIX-6906 fix different behavior of ZipFileWriter\\Reader)\n","    public void emptyZipCreationTest() throws IOException {\n","        final String pathToFile = DESTINATION_FOLDER + \"emptyZipCreation.zip\";\n","\n","        ZipFileWriter writer = new ZipFileWriter(pathToFile);\n","        writer.close();\n","        Assert.assertTrue(FileUtil.fileExists(pathToFile));\n","\n","        // We are not using ZipFileWriter in ZipFileReader tests, so we don't have testing cycles here.\n","        try (ZipFileReader zip = new ZipFileReader(pathToFile)) {\n","            Assert.assertTrue(zip.getFileNames().isEmpty());\n","        }\n","    }\n","\n","    @Test\n","    // Android-Conversion-Ignore-Test (TODO DEVSIX-6906 fix different behavior of ZipFileWriter\\Reader)\n","    public void addNullFileEntryTest() throws IOException {\n","        final String pathToFile = DESTINATION_FOLDER + \"addNullFileEntry.zip\";\n","\n","        try (ZipFileWriter writer = new ZipFileWriter(pathToFile)) {\n","            Exception ex = Assert.assertThrows(IOException.class,\n","                    () -> writer.addEntry(\"fileName.txt\", (File) null));\n","            Assert.assertEquals(CommonsExceptionMessageConstant.FILE_SHOULD_EXIST, ex.getMessage());\n","        }\n","    }\n","\n","    @Test\n","    // Android-Conversion-Ignore-Test (TODO DEVSIX-6906 fix different behavior of ZipFileWriter\\Reader)\n","    public void addEntryWithNotExistingFileTest() throws IOException {\n","        try (ZipFileWriter writer = new ZipFileWriter(\n","                DESTINATION_FOLDER + \"addEntryWithNotExistingFile.zip\")) {\n","            Assert.assertThrows(IOException.class,\n","                    () -> writer.addEntry(\"fileName\", new File(SOURCE_FOLDER + \"invalidPath\")));\n","        }\n","    }\n","\n","    @Test\n","    // Android-Conversion-Ignore-Test (TODO DEVSIX-6906 fix different behavior of ZipFileWriter\\Reader)\n","    public void addNullStreamEntryTest() throws IOException {\n","        final String pathToFile = DESTINATION_FOLDER + \"addNullStreamEntry.zip\";\n","\n","        try (ZipFileWriter writer = new ZipFileWriter(pathToFile)) {\n","            Exception ex = Assert.assertThrows(IOException.class,\n","                    () -> writer.addEntry(\"fileName.txt\", (InputStream) null));\n","            Assert.assertEquals(CommonsExceptionMessageConstant.STREAM_CAN_NOT_BE_NULL, ex.getMessage());\n","        }\n","    }\n","\n","    @Test\n","    // Android-Conversion-Ignore-Test (TODO DEVSIX-6906 fix different behavior of ZipFileWriter\\Reader)\n","    public void addNullJsonEntryTest() throws IOException {\n","        final String pathToFile = DESTINATION_FOLDER + \"addNullJsonEntry.zip\";\n","\n","        try (ZipFileWriter writer = new ZipFileWriter(pathToFile)) {\n","            Exception ex = Assert.assertThrows(IOException.class,\n","                    () -> writer.addJsonEntry(\"fileName.txt\", null));\n","            Assert.assertEquals(CommonsExceptionMessageConstant.JSON_OBJECT_CAN_NOT_BE_NULL, ex.getMessage());\n","        }\n","    }\n","\n","    @Test\n","    // Android-Conversion-Ignore-Test (TODO DEVSIX-6906 fix different behavior of ZipFileWriter\\Reader)\n","    public void addEntryWhenWriterIsClosedTest() throws IOException {\n","        final String pathToFile = DESTINATION_FOLDER + \"addEntryWhenWriterIsClosed.zip\";\n","\n","        ZipFileWriter writer = new ZipFileWriter(pathToFile);\n","        writer.close();\n","\n","        Assert.assertThrows(Exception.class,\n","                () -> writer.addEntry(\"firstName\", new File(SOURCE_FOLDER + \"testFile.txt\")));\n","    }\n","\n","    @Test\n","    public void addTextFileEntryTest() throws IOException {\n","        final String pathToFile = DESTINATION_FOLDER + \"addTextFileEntry.zip\";\n","        final String textFilePath = SOURCE_FOLDER + \"testFile.txt\";\n","        final String fileNameInZip = \"text.txt\";\n","\n","        try (ZipFileWriter writer = new ZipFileWriter(pathToFile)) {\n","            writer.addEntry(fileNameInZip, new File(textFilePath));\n","        }\n","\n","        try (ZipFileReader reader = new ZipFileReader(pathToFile);\n","                InputStream streamFromZip = reader.readFromZip(fileNameInZip);\n","                InputStream streamWithFile = FileUtil.getInputStreamForFile(textFilePath)) {\n","\n","            Set<String> fileNames = reader.getFileNames();\n","            Assert.assertEquals(1, fileNames.size());\n","            Assert.assertTrue(fileNames.contains(fileNameInZip));\n","            Assert.assertTrue(compareStreams(streamWithFile, streamFromZip));\n","        }\n","    }\n","\n","    @Test\n","    public void addInputStreamEntryInSubfolderTest() throws IOException {\n","        final String pathToFile = DESTINATION_FOLDER + \"addInputStreamEntryInSubfolder.zip\";\n","        final String textFilePath = SOURCE_FOLDER + \"testFile.txt\";\n","        final String fileNameInZip = \"subfolder/text.txt\";\n","\n","        try (ZipFileWriter writer = new ZipFileWriter(pathToFile)) {\n","            writer.addEntry(fileNameInZip, FileUtil.getInputStreamForFile(textFilePath));\n","        }\n","\n","        try (ZipFileReader reader = new ZipFileReader(pathToFile);\n","                InputStream streamFromZip = reader.readFromZip(fileNameInZip);\n","                InputStream streamWithFile = FileUtil.getInputStreamForFile(textFilePath)) {\n","\n","            Set<String> fileNames = reader.getFileNames();\n","            Assert.assertEquals(1, fileNames.size());\n","            Assert.assertTrue(fileNames.contains(fileNameInZip));\n","            Assert.assertTrue(compareStreams(streamWithFile, streamFromZip));\n","        }\n","    }\n","\n","    @Test\n","    public void addJsonEntryTest() throws IOException {\n","        final String pathToFile = DESTINATION_FOLDER + \"addJsonEntry.zip\";\n","        final String compareString = \"\\\"©\\\"\";\n","        final String fileNameInZip = \"entry.json\";\n","\n","        try (ZipFileWriter writer = new ZipFileWriter(pathToFile)) {\n","            writer.addJsonEntry(fileNameInZip, \"©\");\n","        }\n","\n","        try (ZipFileReader reader = new ZipFileReader(pathToFile);\n","                InputStream streamFromZip = reader.readFromZip(fileNameInZip);\n","                InputStream compareStream = new ByteArrayInputStream(compareString.getBytes(StandardCharsets.UTF_8))) {\n","\n","            Set<String> fileNames = reader.getFileNames();\n","            Assert.assertEquals(1, fileNames.size());\n","            Assert.assertTrue(fileNames.contains(fileNameInZip));\n","            Assert.assertTrue(compareStreams(compareStream, streamFromZip));\n","        }\n","    }\n","\n","    @Test\n","    public void addEntryWithSameFilePathTwiceTest() throws IOException {\n","        final String pathToFile = DESTINATION_FOLDER + \"addEntryWithSameFilePathTwice.zip\";\n","        final String fileNameInZip = \"entry.json\";\n","\n","        try (ZipFileWriter writer = new ZipFileWriter(pathToFile)) {\n","            writer.addJsonEntry(fileNameInZip, \"©\");\n","            Assert.assertThrows(IOException.class, () -> writer.addJsonEntry(fileNameInZip, \"aaa\"));\n","        }\n","    }\n","\n","    @Test\n","    public void addSeveralEntriesToZipTest() throws IOException {\n","        final String pathToFile = DESTINATION_FOLDER + \"addSeveralEntriesToZip.zip\";\n","        final String firstTextFilePath = SOURCE_FOLDER + \"testFile.txt\";\n","        final String secondTextFilePath = SOURCE_FOLDER + \"someTextFile.txt\";\n","        final String compareString = \"\\\"©\\\"\";\n","\n","        final String firstFileNameInZip = \"firstName.txt\";\n","        final String secondFileNameInZip = \"subfolder/secondName.txt\";\n","        final String thirdFileNameInZip = \"subfolder/subfolder/thirdName.json\";\n","\n","        try (ZipFileWriter writer = new ZipFileWriter(pathToFile)) {\n","            writer.addEntry(firstFileNameInZip, new File(firstTextFilePath));\n","            writer.addEntry(secondFileNameInZip, FileUtil.getInputStreamForFile(secondTextFilePath));\n","            writer.addJsonEntry(thirdFileNameInZip, \"©\");\n","        }\n","\n","        try (ZipFileReader reader = new ZipFileReader(pathToFile);\n","                InputStream streamWithFirstFromZip = reader.readFromZip(firstFileNameInZip);\n","                InputStream streamWithFirstFile = FileUtil.getInputStreamForFile(firstTextFilePath);\n","                InputStream streamWithSecondFromZip = reader.readFromZip(secondFileNameInZip);\n","                InputStream streamWithSecondFile = FileUtil.getInputStreamForFile(secondTextFilePath);\n","                InputStream streamWithJsonFromZip = reader.readFromZip(thirdFileNameInZip);\n","                InputStream compareStream = new ByteArrayInputStream(compareString.getBytes(StandardCharsets.UTF_8))) {\n","            Set<String> fileNames = reader.getFileNames();\n","            Assert.assertEquals(3, fileNames.size());\n","            Assert.assertTrue(fileNames.contains(firstFileNameInZip));\n","            Assert.assertTrue(fileNames.contains(secondFileNameInZip));\n","            Assert.assertTrue(fileNames.contains(thirdFileNameInZip));\n","\n","            Assert.assertTrue(compareStreams(streamWithFirstFile, streamWithFirstFromZip));\n","            Assert.assertTrue(compareStreams(streamWithSecondFile, streamWithSecondFromZip));\n","            Assert.assertTrue(compareStreams(compareStream, streamWithJsonFromZip));\n","        }\n","    }\n","\n","    @Test\n","    // Android-Conversion-Ignore-Test (TODO DEVSIX-6906 fix different behavior of ZipFileWriter\\Reader)\n","    public void addEntryWithNullFileNameTest() throws IOException {\n","        final String pathToFile = DESTINATION_FOLDER + \"addEntryWithNullFileName.zip\";\n","        final String firstTextFilePath = SOURCE_FOLDER + \"testFile.txt\";\n","\n","        try (ZipFileWriter writer = new ZipFileWriter(pathToFile)) {\n","            Exception ex = Assert.assertThrows(IOException.class,\n","                    () -> writer.addEntry(null, new File(firstTextFilePath)));\n","            Assert.assertEquals(CommonsExceptionMessageConstant.FILE_NAME_SHOULD_BE_UNIQUE, ex.getMessage());\n","        }\n","    }\n","\n","    private static boolean compareStreams(InputStream firstStream, InputStream secondStream) throws IOException {\n","        if (firstStream == null || secondStream == null) {\n","            throw new IOException(CommonsExceptionMessageConstant.STREAM_CAN_NOT_BE_NULL);\n","        }\n","        final byte[] firstStreamBytes = convertInputStreamToByteArray(firstStream);\n","        final byte[] secondStreamBytes = convertInputStreamToByteArray(secondStream);\n","\n","        return Arrays.equals(firstStreamBytes, secondStreamBytes);\n","    }\n","\n","    private static byte[] convertInputStreamToByteArray(InputStream inputStream) throws IOException {\n","        try (ByteArrayOutputStream result = new ByteArrayOutputStream()) {\n","            byte[] buffer = new byte[1024];\n","            int length;\n","            while ((length = inputStream.read(buffer)) != -1) {\n","                result.write(buffer, 0, length);\n","            }\n","            result.flush();\n","            return result.toByteArray();\n","        }\n","    }\n","}\n"],"method_lines_dic":{"ZipFileWriter::::addEntry(java.lang.String,java.io.File)":[71,76],"ZipFileWriter::::addEntry(java.lang.String,java.io.InputStream)":[86,97],"ZipFileWriter::::addJsonEntry(java.lang.String,java.lang.Object)":[107,114],"ZipFileWriter::::close()":[117,120],"ZipFileWriter::::addEntryToZip(java.lang.String,com.itextpdf.commons.utils.ZipFileWriter.ZipWriter)":[122,129],"ZipFileWriter.ZipWriter::::write(java.util.zip.ZipOutputStream)":[133,133]},"test_method_lines_dic":{"ZipFileWriterTest::::beforeClass()":[48,51],"ZipFileWriterTest::::constructorWithNullPathTest()":[53,57],"ZipFileWriterTest::::constructorWithNotExistingDirsInPathTest()":[59,63],"ZipFileWriterTest::::constructorWithAlreadyExistedFilePathTest()":[65,76],"ZipFileWriterTest::::constructorWithNotZipFileTest()":[78,88],"ZipFileWriterTest::::constructorWithDirectoryPathTest()":[90,99],"ZipFileWriterTest::::emptyZipCreationTest()":[101,114],"ZipFileWriterTest::::addNullFileEntryTest()":[116,126],"ZipFileWriterTest::::addEntryWithNotExistingFileTest()":[128,136],"ZipFileWriterTest::::addNullStreamEntryTest()":[138,148],"ZipFileWriterTest::::addNullJsonEntryTest()":[150,160],"ZipFileWriterTest::::addEntryWhenWriterIsClosedTest()":[162,172],"ZipFileWriterTest::::addTextFileEntryTest()":[174,193],"ZipFileWriterTest::::addInputStreamEntryInSubfolderTest()":[195,214],"ZipFileWriterTest::::addJsonEntryTest()":[216,235],"ZipFileWriterTest::::addEntryWithSameFilePathTwiceTest()":[237,246],"ZipFileWriterTest::::addSeveralEntriesToZipTest()":[248,282],"ZipFileWriterTest::::addEntryWithNullFileNameTest()":[284,295],"ZipFileWriterTest::::compareStreams(java.io.InputStream,java.io.InputStream)":[297,305],"ZipFileWriterTest::::convertInputStreamToByteArray(java.io.InputStream)":[307,317]},"reverse_method_lines_dic":{"71":"ZipFileWriter::::addEntry(java.lang.String,java.io.File)","72":"ZipFileWriter::::addEntry(java.lang.String,java.io.File)","73":"ZipFileWriter::::addEntry(java.lang.String,java.io.File)","74":"ZipFileWriter::::addEntry(java.lang.String,java.io.File)","75":"ZipFileWriter::::addEntry(java.lang.String,java.io.File)","76":"ZipFileWriter::::addEntry(java.lang.String,java.io.File)","86":"ZipFileWriter::::addEntry(java.lang.String,java.io.InputStream)","87":"ZipFileWriter::::addEntry(java.lang.String,java.io.InputStream)","88":"ZipFileWriter::::addEntry(java.lang.String,java.io.InputStream)","89":"ZipFileWriter::::addEntry(java.lang.String,java.io.InputStream)","90":"ZipFileWriter::::addEntry(java.lang.String,java.io.InputStream)","91":"ZipFileWriter::::addEntry(java.lang.String,java.io.InputStream)","92":"ZipFileWriter::::addEntry(java.lang.String,java.io.InputStream)","93":"ZipFileWriter::::addEntry(java.lang.String,java.io.InputStream)","94":"ZipFileWriter::::addEntry(java.lang.String,java.io.InputStream)","95":"ZipFileWriter::::addEntry(java.lang.String,java.io.InputStream)","96":"ZipFileWriter::::addEntry(java.lang.String,java.io.InputStream)","97":"ZipFileWriter::::addEntry(java.lang.String,java.io.InputStream)","107":"ZipFileWriter::::addJsonEntry(java.lang.String,java.lang.Object)","108":"ZipFileWriter::::addJsonEntry(java.lang.String,java.lang.Object)","109":"ZipFileWriter::::addJsonEntry(java.lang.String,java.lang.Object)","110":"ZipFileWriter::::addJsonEntry(java.lang.String,java.lang.Object)","111":"ZipFileWriter::::addJsonEntry(java.lang.String,java.lang.Object)","112":"ZipFileWriter::::addJsonEntry(java.lang.String,java.lang.Object)","113":"ZipFileWriter::::addJsonEntry(java.lang.String,java.lang.Object)","114":"ZipFileWriter::::addJsonEntry(java.lang.String,java.lang.Object)","117":"ZipFileWriter::::close()","118":"ZipFileWriter::::close()","119":"ZipFileWriter::::close()","120":"ZipFileWriter::::close()","122":"ZipFileWriter::::addEntryToZip(java.lang.String,com.itextpdf.commons.utils.ZipFileWriter.ZipWriter)","123":"ZipFileWriter::::addEntryToZip(java.lang.String,com.itextpdf.commons.utils.ZipFileWriter.ZipWriter)","124":"ZipFileWriter::::addEntryToZip(java.lang.String,com.itextpdf.commons.utils.ZipFileWriter.ZipWriter)","125":"ZipFileWriter::::addEntryToZip(java.lang.String,com.itextpdf.commons.utils.ZipFileWriter.ZipWriter)","126":"ZipFileWriter::::addEntryToZip(java.lang.String,com.itextpdf.commons.utils.ZipFileWriter.ZipWriter)","127":"ZipFileWriter::::addEntryToZip(java.lang.String,com.itextpdf.commons.utils.ZipFileWriter.ZipWriter)","128":"ZipFileWriter::::addEntryToZip(java.lang.String,com.itextpdf.commons.utils.ZipFileWriter.ZipWriter)","129":"ZipFileWriter::::addEntryToZip(java.lang.String,com.itextpdf.commons.utils.ZipFileWriter.ZipWriter)","133":"ZipFileWriter.ZipWriter::::write(java.util.zip.ZipOutputStream)"},"test_reverse_method_lines_dic":{"48":"ZipFileWriterTest::::beforeClass()","49":"ZipFileWriterTest::::beforeClass()","50":"ZipFileWriterTest::::beforeClass()","51":"ZipFileWriterTest::::beforeClass()","53":"ZipFileWriterTest::::constructorWithNullPathTest()","54":"ZipFileWriterTest::::constructorWithNullPathTest()","55":"ZipFileWriterTest::::constructorWithNullPathTest()","56":"ZipFileWriterTest::::constructorWithNullPathTest()","57":"ZipFileWriterTest::::constructorWithNullPathTest()","59":"ZipFileWriterTest::::constructorWithNotExistingDirsInPathTest()","60":"ZipFileWriterTest::::constructorWithNotExistingDirsInPathTest()","61":"ZipFileWriterTest::::constructorWithNotExistingDirsInPathTest()","62":"ZipFileWriterTest::::constructorWithNotExistingDirsInPathTest()","63":"ZipFileWriterTest::::constructorWithNotExistingDirsInPathTest()","65":"ZipFileWriterTest::::constructorWithAlreadyExistedFilePathTest()","66":"ZipFileWriterTest::::constructorWithAlreadyExistedFilePathTest()","67":"ZipFileWriterTest::::constructorWithAlreadyExistedFilePathTest()","68":"ZipFileWriterTest::::constructorWithAlreadyExistedFilePathTest()","69":"ZipFileWriterTest::::constructorWithAlreadyExistedFilePathTest()","70":"ZipFileWriterTest::::constructorWithAlreadyExistedFilePathTest()","71":"ZipFileWriterTest::::constructorWithAlreadyExistedFilePathTest()","72":"ZipFileWriterTest::::constructorWithAlreadyExistedFilePathTest()","73":"ZipFileWriterTest::::constructorWithAlreadyExistedFilePathTest()","74":"ZipFileWriterTest::::constructorWithAlreadyExistedFilePathTest()","75":"ZipFileWriterTest::::constructorWithAlreadyExistedFilePathTest()","76":"ZipFileWriterTest::::constructorWithAlreadyExistedFilePathTest()","78":"ZipFileWriterTest::::constructorWithNotZipFileTest()","79":"ZipFileWriterTest::::constructorWithNotZipFileTest()","80":"ZipFileWriterTest::::constructorWithNotZipFileTest()","81":"ZipFileWriterTest::::constructorWithNotZipFileTest()","82":"ZipFileWriterTest::::constructorWithNotZipFileTest()","83":"ZipFileWriterTest::::constructorWithNotZipFileTest()","84":"ZipFileWriterTest::::constructorWithNotZipFileTest()","85":"ZipFileWriterTest::::constructorWithNotZipFileTest()","86":"ZipFileWriterTest::::constructorWithNotZipFileTest()","87":"ZipFileWriterTest::::constructorWithNotZipFileTest()","88":"ZipFileWriterTest::::constructorWithNotZipFileTest()","90":"ZipFileWriterTest::::constructorWithDirectoryPathTest()","91":"ZipFileWriterTest::::constructorWithDirectoryPathTest()","92":"ZipFileWriterTest::::constructorWithDirectoryPathTest()","93":"ZipFileWriterTest::::constructorWithDirectoryPathTest()","94":"ZipFileWriterTest::::constructorWithDirectoryPathTest()","95":"ZipFileWriterTest::::constructorWithDirectoryPathTest()","96":"ZipFileWriterTest::::constructorWithDirectoryPathTest()","97":"ZipFileWriterTest::::constructorWithDirectoryPathTest()","98":"ZipFileWriterTest::::constructorWithDirectoryPathTest()","99":"ZipFileWriterTest::::constructorWithDirectoryPathTest()","101":"ZipFileWriterTest::::emptyZipCreationTest()","102":"ZipFileWriterTest::::emptyZipCreationTest()","103":"ZipFileWriterTest::::emptyZipCreationTest()","104":"ZipFileWriterTest::::emptyZipCreationTest()","105":"ZipFileWriterTest::::emptyZipCreationTest()","106":"ZipFileWriterTest::::emptyZipCreationTest()","107":"ZipFileWriterTest::::emptyZipCreationTest()","108":"ZipFileWriterTest::::emptyZipCreationTest()","109":"ZipFileWriterTest::::emptyZipCreationTest()","110":"ZipFileWriterTest::::emptyZipCreationTest()","111":"ZipFileWriterTest::::emptyZipCreationTest()","112":"ZipFileWriterTest::::emptyZipCreationTest()","113":"ZipFileWriterTest::::emptyZipCreationTest()","114":"ZipFileWriterTest::::emptyZipCreationTest()","116":"ZipFileWriterTest::::addNullFileEntryTest()","117":"ZipFileWriterTest::::addNullFileEntryTest()","118":"ZipFileWriterTest::::addNullFileEntryTest()","119":"ZipFileWriterTest::::addNullFileEntryTest()","120":"ZipFileWriterTest::::addNullFileEntryTest()","121":"ZipFileWriterTest::::addNullFileEntryTest()","122":"ZipFileWriterTest::::addNullFileEntryTest()","123":"ZipFileWriterTest::::addNullFileEntryTest()","124":"ZipFileWriterTest::::addNullFileEntryTest()","125":"ZipFileWriterTest::::addNullFileEntryTest()","126":"ZipFileWriterTest::::addNullFileEntryTest()","128":"ZipFileWriterTest::::addEntryWithNotExistingFileTest()","129":"ZipFileWriterTest::::addEntryWithNotExistingFileTest()","130":"ZipFileWriterTest::::addEntryWithNotExistingFileTest()","131":"ZipFileWriterTest::::addEntryWithNotExistingFileTest()","132":"ZipFileWriterTest::::addEntryWithNotExistingFileTest()","133":"ZipFileWriterTest::::addEntryWithNotExistingFileTest()","134":"ZipFileWriterTest::::addEntryWithNotExistingFileTest()","135":"ZipFileWriterTest::::addEntryWithNotExistingFileTest()","136":"ZipFileWriterTest::::addEntryWithNotExistingFileTest()","138":"ZipFileWriterTest::::addNullStreamEntryTest()","139":"ZipFileWriterTest::::addNullStreamEntryTest()","140":"ZipFileWriterTest::::addNullStreamEntryTest()","141":"ZipFileWriterTest::::addNullStreamEntryTest()","142":"ZipFileWriterTest::::addNullStreamEntryTest()","143":"ZipFileWriterTest::::addNullStreamEntryTest()","144":"ZipFileWriterTest::::addNullStreamEntryTest()","145":"ZipFileWriterTest::::addNullStreamEntryTest()","146":"ZipFileWriterTest::::addNullStreamEntryTest()","147":"ZipFileWriterTest::::addNullStreamEntryTest()","148":"ZipFileWriterTest::::addNullStreamEntryTest()","150":"ZipFileWriterTest::::addNullJsonEntryTest()","151":"ZipFileWriterTest::::addNullJsonEntryTest()","152":"ZipFileWriterTest::::addNullJsonEntryTest()","153":"ZipFileWriterTest::::addNullJsonEntryTest()","154":"ZipFileWriterTest::::addNullJsonEntryTest()","155":"ZipFileWriterTest::::addNullJsonEntryTest()","156":"ZipFileWriterTest::::addNullJsonEntryTest()","157":"ZipFileWriterTest::::addNullJsonEntryTest()","158":"ZipFileWriterTest::::addNullJsonEntryTest()","159":"ZipFileWriterTest::::addNullJsonEntryTest()","160":"ZipFileWriterTest::::addNullJsonEntryTest()","162":"ZipFileWriterTest::::addEntryWhenWriterIsClosedTest()","163":"ZipFileWriterTest::::addEntryWhenWriterIsClosedTest()","164":"ZipFileWriterTest::::addEntryWhenWriterIsClosedTest()","165":"ZipFileWriterTest::::addEntryWhenWriterIsClosedTest()","166":"ZipFileWriterTest::::addEntryWhenWriterIsClosedTest()","167":"ZipFileWriterTest::::addEntryWhenWriterIsClosedTest()","168":"ZipFileWriterTest::::addEntryWhenWriterIsClosedTest()","169":"ZipFileWriterTest::::addEntryWhenWriterIsClosedTest()","170":"ZipFileWriterTest::::addEntryWhenWriterIsClosedTest()","171":"ZipFileWriterTest::::addEntryWhenWriterIsClosedTest()","172":"ZipFileWriterTest::::addEntryWhenWriterIsClosedTest()","174":"ZipFileWriterTest::::addTextFileEntryTest()","175":"ZipFileWriterTest::::addTextFileEntryTest()","176":"ZipFileWriterTest::::addTextFileEntryTest()","177":"ZipFileWriterTest::::addTextFileEntryTest()","178":"ZipFileWriterTest::::addTextFileEntryTest()","179":"ZipFileWriterTest::::addTextFileEntryTest()","180":"ZipFileWriterTest::::addTextFileEntryTest()","181":"ZipFileWriterTest::::addTextFileEntryTest()","182":"ZipFileWriterTest::::addTextFileEntryTest()","183":"ZipFileWriterTest::::addTextFileEntryTest()","184":"ZipFileWriterTest::::addTextFileEntryTest()","185":"ZipFileWriterTest::::addTextFileEntryTest()","186":"ZipFileWriterTest::::addTextFileEntryTest()","187":"ZipFileWriterTest::::addTextFileEntryTest()","188":"ZipFileWriterTest::::addTextFileEntryTest()","189":"ZipFileWriterTest::::addTextFileEntryTest()","190":"ZipFileWriterTest::::addTextFileEntryTest()","191":"ZipFileWriterTest::::addTextFileEntryTest()","192":"ZipFileWriterTest::::addTextFileEntryTest()","193":"ZipFileWriterTest::::addTextFileEntryTest()","195":"ZipFileWriterTest::::addInputStreamEntryInSubfolderTest()","196":"ZipFileWriterTest::::addInputStreamEntryInSubfolderTest()","197":"ZipFileWriterTest::::addInputStreamEntryInSubfolderTest()","198":"ZipFileWriterTest::::addInputStreamEntryInSubfolderTest()","199":"ZipFileWriterTest::::addInputStreamEntryInSubfolderTest()","200":"ZipFileWriterTest::::addInputStreamEntryInSubfolderTest()","201":"ZipFileWriterTest::::addInputStreamEntryInSubfolderTest()","202":"ZipFileWriterTest::::addInputStreamEntryInSubfolderTest()","203":"ZipFileWriterTest::::addInputStreamEntryInSubfolderTest()","204":"ZipFileWriterTest::::addInputStreamEntryInSubfolderTest()","205":"ZipFileWriterTest::::addInputStreamEntryInSubfolderTest()","206":"ZipFileWriterTest::::addInputStreamEntryInSubfolderTest()","207":"ZipFileWriterTest::::addInputStreamEntryInSubfolderTest()","208":"ZipFileWriterTest::::addInputStreamEntryInSubfolderTest()","209":"ZipFileWriterTest::::addInputStreamEntryInSubfolderTest()","210":"ZipFileWriterTest::::addInputStreamEntryInSubfolderTest()","211":"ZipFileWriterTest::::addInputStreamEntryInSubfolderTest()","212":"ZipFileWriterTest::::addInputStreamEntryInSubfolderTest()","213":"ZipFileWriterTest::::addInputStreamEntryInSubfolderTest()","214":"ZipFileWriterTest::::addInputStreamEntryInSubfolderTest()","216":"ZipFileWriterTest::::addJsonEntryTest()","217":"ZipFileWriterTest::::addJsonEntryTest()","218":"ZipFileWriterTest::::addJsonEntryTest()","219":"ZipFileWriterTest::::addJsonEntryTest()","220":"ZipFileWriterTest::::addJsonEntryTest()","221":"ZipFileWriterTest::::addJsonEntryTest()","222":"ZipFileWriterTest::::addJsonEntryTest()","223":"ZipFileWriterTest::::addJsonEntryTest()","224":"ZipFileWriterTest::::addJsonEntryTest()","225":"ZipFileWriterTest::::addJsonEntryTest()","226":"ZipFileWriterTest::::addJsonEntryTest()","227":"ZipFileWriterTest::::addJsonEntryTest()","228":"ZipFileWriterTest::::addJsonEntryTest()","229":"ZipFileWriterTest::::addJsonEntryTest()","230":"ZipFileWriterTest::::addJsonEntryTest()","231":"ZipFileWriterTest::::addJsonEntryTest()","232":"ZipFileWriterTest::::addJsonEntryTest()","233":"ZipFileWriterTest::::addJsonEntryTest()","234":"ZipFileWriterTest::::addJsonEntryTest()","235":"ZipFileWriterTest::::addJsonEntryTest()","237":"ZipFileWriterTest::::addEntryWithSameFilePathTwiceTest()","238":"ZipFileWriterTest::::addEntryWithSameFilePathTwiceTest()","239":"ZipFileWriterTest::::addEntryWithSameFilePathTwiceTest()","240":"ZipFileWriterTest::::addEntryWithSameFilePathTwiceTest()","241":"ZipFileWriterTest::::addEntryWithSameFilePathTwiceTest()","242":"ZipFileWriterTest::::addEntryWithSameFilePathTwiceTest()","243":"ZipFileWriterTest::::addEntryWithSameFilePathTwiceTest()","244":"ZipFileWriterTest::::addEntryWithSameFilePathTwiceTest()","245":"ZipFileWriterTest::::addEntryWithSameFilePathTwiceTest()","246":"ZipFileWriterTest::::addEntryWithSameFilePathTwiceTest()","248":"ZipFileWriterTest::::addSeveralEntriesToZipTest()","249":"ZipFileWriterTest::::addSeveralEntriesToZipTest()","250":"ZipFileWriterTest::::addSeveralEntriesToZipTest()","251":"ZipFileWriterTest::::addSeveralEntriesToZipTest()","252":"ZipFileWriterTest::::addSeveralEntriesToZipTest()","253":"ZipFileWriterTest::::addSeveralEntriesToZipTest()","254":"ZipFileWriterTest::::addSeveralEntriesToZipTest()","255":"ZipFileWriterTest::::addSeveralEntriesToZipTest()","256":"ZipFileWriterTest::::addSeveralEntriesToZipTest()","257":"ZipFileWriterTest::::addSeveralEntriesToZipTest()","258":"ZipFileWriterTest::::addSeveralEntriesToZipTest()","259":"ZipFileWriterTest::::addSeveralEntriesToZipTest()","260":"ZipFileWriterTest::::addSeveralEntriesToZipTest()","261":"ZipFileWriterTest::::addSeveralEntriesToZipTest()","262":"ZipFileWriterTest::::addSeveralEntriesToZipTest()","263":"ZipFileWriterTest::::addSeveralEntriesToZipTest()","264":"ZipFileWriterTest::::addSeveralEntriesToZipTest()","265":"ZipFileWriterTest::::addSeveralEntriesToZipTest()","266":"ZipFileWriterTest::::addSeveralEntriesToZipTest()","267":"ZipFileWriterTest::::addSeveralEntriesToZipTest()","268":"ZipFileWriterTest::::addSeveralEntriesToZipTest()","269":"ZipFileWriterTest::::addSeveralEntriesToZipTest()","270":"ZipFileWriterTest::::addSeveralEntriesToZipTest()","271":"ZipFileWriterTest::::addSeveralEntriesToZipTest()","272":"ZipFileWriterTest::::addSeveralEntriesToZipTest()","273":"ZipFileWriterTest::::addSeveralEntriesToZipTest()","274":"ZipFileWriterTest::::addSeveralEntriesToZipTest()","275":"ZipFileWriterTest::::addSeveralEntriesToZipTest()","276":"ZipFileWriterTest::::addSeveralEntriesToZipTest()","277":"ZipFileWriterTest::::addSeveralEntriesToZipTest()","278":"ZipFileWriterTest::::addSeveralEntriesToZipTest()","279":"ZipFileWriterTest::::addSeveralEntriesToZipTest()","280":"ZipFileWriterTest::::addSeveralEntriesToZipTest()","281":"ZipFileWriterTest::::addSeveralEntriesToZipTest()","282":"ZipFileWriterTest::::addSeveralEntriesToZipTest()","284":"ZipFileWriterTest::::addEntryWithNullFileNameTest()","285":"ZipFileWriterTest::::addEntryWithNullFileNameTest()","286":"ZipFileWriterTest::::addEntryWithNullFileNameTest()","287":"ZipFileWriterTest::::addEntryWithNullFileNameTest()","288":"ZipFileWriterTest::::addEntryWithNullFileNameTest()","289":"ZipFileWriterTest::::addEntryWithNullFileNameTest()","290":"ZipFileWriterTest::::addEntryWithNullFileNameTest()","291":"ZipFileWriterTest::::addEntryWithNullFileNameTest()","292":"ZipFileWriterTest::::addEntryWithNullFileNameTest()","293":"ZipFileWriterTest::::addEntryWithNullFileNameTest()","294":"ZipFileWriterTest::::addEntryWithNullFileNameTest()","295":"ZipFileWriterTest::::addEntryWithNullFileNameTest()","297":"ZipFileWriterTest::::compareStreams(java.io.InputStream,java.io.InputStream)","298":"ZipFileWriterTest::::compareStreams(java.io.InputStream,java.io.InputStream)","299":"ZipFileWriterTest::::compareStreams(java.io.InputStream,java.io.InputStream)","300":"ZipFileWriterTest::::compareStreams(java.io.InputStream,java.io.InputStream)","301":"ZipFileWriterTest::::compareStreams(java.io.InputStream,java.io.InputStream)","302":"ZipFileWriterTest::::compareStreams(java.io.InputStream,java.io.InputStream)","303":"ZipFileWriterTest::::compareStreams(java.io.InputStream,java.io.InputStream)","304":"ZipFileWriterTest::::compareStreams(java.io.InputStream,java.io.InputStream)","305":"ZipFileWriterTest::::compareStreams(java.io.InputStream,java.io.InputStream)","307":"ZipFileWriterTest::::convertInputStreamToByteArray(java.io.InputStream)","308":"ZipFileWriterTest::::convertInputStreamToByteArray(java.io.InputStream)","309":"ZipFileWriterTest::::convertInputStreamToByteArray(java.io.InputStream)","310":"ZipFileWriterTest::::convertInputStreamToByteArray(java.io.InputStream)","311":"ZipFileWriterTest::::convertInputStreamToByteArray(java.io.InputStream)","312":"ZipFileWriterTest::::convertInputStreamToByteArray(java.io.InputStream)","313":"ZipFileWriterTest::::convertInputStreamToByteArray(java.io.InputStream)","314":"ZipFileWriterTest::::convertInputStreamToByteArray(java.io.InputStream)","315":"ZipFileWriterTest::::convertInputStreamToByteArray(java.io.InputStream)","316":"ZipFileWriterTest::::convertInputStreamToByteArray(java.io.InputStream)","317":"ZipFileWriterTest::::convertInputStreamToByteArray(java.io.InputStream)"},"tests":[{"test_lines":[53,57],"covered_lines":[50,51,52],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[65,76],"covered_lines":[50,51,54,55,56],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[78,88],"covered_lines":[50,51,54,55,56],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[90,99],"covered_lines":[50,51,54,55,56],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[101,114],"covered_lines":[50,51,54,58,59,60,61,119,120],"label":"<<NO FOCAL METHOD>>"},{"test_lines":[116,126],"covered_lines":[50,51,54,58,59,60,61,72,73,119,120],"label":"ZipFileWriter::::addEntry(java.lang.String,java.io.File)"},{"test_lines":[128,136],"covered_lines":[50,51,54,58,59,60,61,119,120],"label":"ZipFileWriter::::addEntry(java.lang.String,java.io.File)"},{"test_lines":[138,148],"covered_lines":[50,51,54,58,59,60,61,87,88,119,120],"label":"ZipFileWriter::::addEntry(java.lang.String,java.io.InputStream)"},{"test_lines":[150,160],"covered_lines":[50,51,54,58,59,60,61,108,109,119,120],"label":"ZipFileWriter::::addEntry(java.lang.String,java.io.InputStream)"},{"test_lines":[162,172],"covered_lines":[50,51,54,58,59,60,61,119,120,123,126],"label":"ZipFileWriter::::addEntryToZip(java.lang.String,com.itextpdf.commons.utils.ZipFileWriter.ZipWriter)"},{"test_lines":[174,193],"covered_lines":[50,51,54,58,59,60,61,72,75,76,87,90,91,93,94,96,97,119,120,123,126,127,128,129],"label":"ZipFileWriter::::addEntry(java.lang.String,java.io.File)"},{"test_lines":[195,214],"covered_lines":[50,51,54,58,59,60,61,87,90,91,93,94,96,97,119,120,123,126,127,128,129],"label":"ZipFileWriter::::addEntry(java.lang.String,java.io.InputStream)"},{"test_lines":[216,235],"covered_lines":[50,51,54,58,59,60,61,108,111,112,113,114,119,120,123,126,127,128,129],"label":"ZipFileWriter::::addJsonEntry(java.lang.String,java.lang.Object)"},{"test_lines":[237,246],"covered_lines":[50,51,54,58,59,60,61,108,111,112,113,114,119,120,123,126,127,128,129],"label":"ZipFileWriter::::addJsonEntry(java.lang.String,java.lang.Object)"},{"test_lines":[248,282],"covered_lines":[50,51,54,58,59,60,61,72,75,76,87,90,91,93,94,96,97,108,111,112,113,114,119,120,123,126,127,128,129],"label":"ZipFileWriter::::addEntryToZip(java.lang.String,com.itextpdf.commons.utils.ZipFileWriter.ZipWriter)"},{"test_lines":[284,295],"covered_lines":[50,51,54,58,59,60,61,119,120,123,124],"label":"ZipFileWriter::::addEntryToZip(java.lang.String,com.itextpdf.commons.utils.ZipFileWriter.ZipWriter)"}]},"/bernard/dataset_construction/prep/repos/itext-java/commons/src/main/java/com/itextpdf/commons/utils/JsonUtil.java":{"class_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.utils;\n","\n","import com.itextpdf.commons.logs.CommonsLogMessageConstant;\n","\n","import com.fasterxml.jackson.annotation.JsonInclude.Include;\n","import com.fasterxml.jackson.core.JsonGenerator.Feature;\n","import com.fasterxml.jackson.core.JsonProcessingException;\n","import com.fasterxml.jackson.core.type.TypeReference;\n","import com.fasterxml.jackson.core.util.DefaultIndenter;\n","import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;\n","import com.fasterxml.jackson.databind.DeserializationFeature;\n","import com.fasterxml.jackson.databind.JavaType;\n","import com.fasterxml.jackson.databind.JsonNode;\n","import com.fasterxml.jackson.databind.ObjectMapper;\n","import com.fasterxml.jackson.databind.ObjectWriter;\n","import com.fasterxml.jackson.databind.SerializationFeature;\n","import java.io.IOException;\n","import java.io.InputStream;\n","import java.io.OutputStream;\n","import org.slf4j.Logger;\n","import org.slf4j.LoggerFactory;\n","\n","/**\n"," * Utility class for JSON serialization and deserialization operations. Not for public use.\n"," */\n","public final class JsonUtil {\n","    private static final Logger LOGGER = LoggerFactory.getLogger(JsonUtil.class);\n","\n","    private JsonUtil() {\n","        // empty constructor\n","    }\n","\n","    /**\n","     * Compares two json strings without considering the order of the elements.\n","     *\n","     * @param expectedString expected json string\n","     * @param toCompare      string for comparison\n","     *\n","     * @return true if two json string are equals, false otherwise\n","     *\n","     * @throws IOException if an I/O error occurs\n","     */\n","    public static boolean areTwoJsonObjectEquals(String expectedString, String toCompare) throws IOException {\n","        final ObjectMapper mapper = new ObjectMapper();\n","\n","        JsonNode expectedObject = mapper.readTree(expectedString);\n","        JsonNode actualObject = mapper.readTree(toCompare);\n","\n","        return actualObject.equals(expectedObject);\n","    }\n","\n","    /**\n","     * Serializes passed object to provided JSON output stream.\n","     *\n","     * @param outputStream stream to which the object will be serialized\n","     * @param value the object which will be serialized\n","     */\n","    public static void serializeToStream(OutputStream outputStream, Object value) {\n","        serializeToStream(outputStream, value, new CustomPrettyPrinter());\n","    }\n","\n","    /**\n","     * Serializes passed object to JSON string.\n","     *\n","     * @param value the object which will be serialized\n","     *\n","     * @return the JSON string representation of passed object or {@code null} if it is impossible to serialize to JSON\n","     */\n","    public static String serializeToString(Object value) {\n","        return serializeToString(value, new CustomPrettyPrinter());\n","    }\n","\n","    /**\n","     * Serializes passed object to minimal JSON without spaces and line breaks and writes it into provided stream.\n","     *\n","     * @param outputStream stream to which the object will be serialized\n","     * @param value the object which will be serialized\n","     */\n","    public static void serializeToMinimalStream(OutputStream outputStream, Object value) {\n","        serializeToStream(outputStream, value, new MinimalPrinter());\n","    }\n","\n","    /**\n","     * Serializes passed object to minimal JSON string without spaces and line breaks.\n","     *\n","     * @param value the object which will be serialized\n","     *\n","     * @return the minimal JSON string representation of passed object or {@code null} if it is impossible to\n","     * serialize to JSON\n","     */\n","    public static String serializeToMinimalString(Object value) {\n","        return serializeToString(value, new MinimalPrinter());\n","    }\n","\n","    /**\n","     * Deserializes passed JSON stream to object with passed type.\n","     *\n","     * @param content the JSON stream which represent object\n","     * @param objectType the class of object as {@link Class} which will be deserialized\n","     * @param <T> the type of object which will be deserialized\n","     *\n","     * @return the deserialized object or {@code null} if operation of deserialization is impossible\n","     */\n","    public static <T> T deserializeFromStream(InputStream content, Class<T> objectType) {\n","        final ObjectMapper objectMapper = new ObjectMapper();\n","        return deserializeFromStream(content, objectMapper.constructType(objectType));\n","    }\n","\n","    /**\n","     * Deserializes passed JSON stream to object with passed type.\n","     *\n","     * @param content the JSON stream which represent object\n","     * @param objectType the class of object as {@link TypeReference} which will be deserialized\n","     * @param <T> the type of object which will be deserialized\n","     *\n","     * @return the deserialized object or {@code null} if operation of deserialization is impossible\n","     */\n","    public static <T> T deserializeFromStream(InputStream content, TypeReference<T> objectType) {\n","        final ObjectMapper objectMapper = new ObjectMapper();\n","        return deserializeFromStream(content, objectMapper.constructType(objectType));\n","    }\n","\n","    /**\n","     * Deserializes passed JSON stream to object with passed type.\n","     *\n","     * @param content the JSON stream which represent object\n","     * @param objectType the class of object as {@link JavaType} which will be deserialized\n","     * @param <T> the type of object which will be deserialized\n","     *\n","     * @return the deserialized object or {@code null} if operation of deserialization is impossible\n","     */\n","    public static <T> T deserializeFromStream(InputStream content, JavaType objectType) {\n","        final ObjectMapper objectMapper = new ObjectMapper();\n","        objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n","        try {\n","            return objectMapper.readValue(content, objectType);\n","        } catch (IOException ex) {\n","            LOGGER.warn(MessageFormatUtil.format(\n","                    CommonsLogMessageConstant.UNABLE_TO_DESERIALIZE_JSON, ex.getClass(), ex.getMessage()));\n","            return null;\n","        }\n","    }\n","\n","    /**\n","     * Deserializes passed JSON string to object with passed type.\n","     *\n","     * @param content the JSON string which represent object\n","     * @param objectType the class of object as {@link Class} which will be deserialized\n","     * @param <T> the type of object which will be deserialized\n","     *\n","     * @return the deserialized object or {@code null} if operation of deserialization is impossible\n","     */\n","    public static <T> T deserializeFromString(String content, Class<T> objectType) {\n","        final ObjectMapper objectMapper = new ObjectMapper();\n","        return deserializeFromString(content, objectMapper.constructType(objectType));\n","    }\n","\n","    /**\n","     * Deserializes passed JSON string to object with passed type.\n","     *\n","     * @param content the JSON string which represent object\n","     * @param objectType the class of object as {@link TypeReference} which will be deserialized\n","     * @param <T> the type of object which will be deserialized\n","     *\n","     * @return the deserialized object or {@code null} if operation of deserialization is impossible\n","     */\n","    public static <T> T deserializeFromString(String content, TypeReference<T> objectType) {\n","        final ObjectMapper objectMapper = new ObjectMapper();\n","        return deserializeFromString(content, objectMapper.constructType(objectType));\n","    }\n","\n","    /**\n","     * Deserializes passed JSON string to object with passed type.\n","     *\n","     * @param content the JSON string which represent object\n","     * @param objectType the class of object as {@link JavaType} which will be deserialized\n","     * @param <T> the type of object which will be deserialized\n","     *\n","     * @return the deserialized object or {@code null} if operation of deserialization is impossible\n","     */\n","    public static <T> T deserializeFromString(String content, JavaType objectType) {\n","        final ObjectMapper objectMapper = new ObjectMapper();\n","        objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n","        try {\n","            return objectMapper.readValue(content, objectType);\n","        } catch (JsonProcessingException ex) {\n","            LOGGER.warn(MessageFormatUtil.format(\n","                    CommonsLogMessageConstant.UNABLE_TO_DESERIALIZE_JSON, ex.getClass(), ex.getMessage()));\n","            return null;\n","        }\n","    }\n","\n","    /**\n","     * Creates and configure object writer with given {@link DefaultPrettyPrinter}.\n","     *\n","     * @param prettyPrinter specified pretty printer for indentation\n","     *\n","     * @return configured object writer\n","     */\n","    private static ObjectWriter createAndConfigureObjectWriter(DefaultPrettyPrinter prettyPrinter) {\n","        final ObjectMapper objectMapper = new ObjectMapper();\n","        objectMapper.enable(SerializationFeature.INDENT_OUTPUT);\n","        // Don't serialize null fields\n","        objectMapper.setSerializationInclusion(Include.NON_NULL);\n","        objectMapper.disable(Feature.AUTO_CLOSE_TARGET);\n","        return objectMapper.writer(prettyPrinter);\n","    }\n","\n","    /**\n","     * Serializes passed object to provided JSON output stream.\n","     *\n","     * @param outputStream  stream to which the object will be serialized\n","     * @param value the object which will be serialized\n","     * @param prettyPrinter specified pretty printer for indentation\n","     */\n","    private static void serializeToStream(OutputStream outputStream, Object value,\n","            DefaultPrettyPrinter prettyPrinter) {\n","        try {\n","            createAndConfigureObjectWriter(prettyPrinter).writeValue(outputStream, value);\n","        } catch (IOException ex) {\n","            LOGGER.warn(MessageFormatUtil.format(\n","                    CommonsLogMessageConstant.UNABLE_TO_SERIALIZE_OBJECT, ex.getClass(), ex.getMessage()));\n","        }\n","    }\n","\n","    /**\n","     * Serializes passed object to JSON string.\n","     *\n","     * @param value the object which will be serialized\n","     * @param prettyPrinter specified pretty printer for indentation\n","     *\n","     * @return the JSON string representation of passed object or {@code null} if it is impossible to serialize to JSON\n","     */\n","    private static String serializeToString(Object value, DefaultPrettyPrinter prettyPrinter) {\n","        try {\n","            return createAndConfigureObjectWriter(prettyPrinter).writeValueAsString(value);\n","        } catch (JsonProcessingException ex) {\n","            LOGGER.warn(MessageFormatUtil.format(\n","                    CommonsLogMessageConstant.UNABLE_TO_SERIALIZE_OBJECT, ex.getClass(), ex.getMessage()));\n","            return null;\n","        }\n","    }\n","\n","    /**\n","     * This class is used to define a custom separator and array\n","     * indent to achieve the same serialization in Java and .NET.\n","     */\n","    private static class CustomPrettyPrinter extends DefaultPrettyPrinter {\n","        public CustomPrettyPrinter() {\n","            _objectFieldValueSeparatorWithSpaces = \": \";\n","            indentArraysWith(DefaultIndenter.SYSTEM_LINEFEED_INSTANCE.withLinefeed(\"\\n\"));\n","            indentObjectsWith(DefaultIndenter.SYSTEM_LINEFEED_INSTANCE.withLinefeed(\"\\n\"));\n","        }\n","\n","        @Override\n","        public DefaultPrettyPrinter createInstance() {\n","            return new CustomPrettyPrinter();\n","        }\n","    }\n","\n","    /**\n","     * This class is used to define a printer which serialize to\n","     * minimal string, without extra spaces and line breaks.\n","     */\n","    private static class MinimalPrinter extends DefaultPrettyPrinter {\n","        public MinimalPrinter() {\n","            _objectFieldValueSeparatorWithSpaces = \":\";\n","            indentArraysWith(new DefaultIndenter(\"\", \"\"));\n","            indentObjectsWith(new DefaultIndenter(\"\", \"\"));\n","        }\n","\n","        @Override\n","        public DefaultPrettyPrinter createInstance() {\n","            return new MinimalPrinter();\n","        }\n","    }\n","}\n"],"test_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.utils;\n","\n","import com.itextpdf.commons.logs.CommonsLogMessageConstant;\n","import com.itextpdf.test.ExtendedITextTest;\n","import com.itextpdf.test.LogLevelConstants;\n","import com.itextpdf.test.annotations.LogMessage;\n","import com.itextpdf.test.annotations.LogMessages;\n","import com.itextpdf.test.annotations.type.UnitTest;\n","\n","import com.fasterxml.jackson.annotation.JsonProperty;\n","import com.fasterxml.jackson.core.type.TypeReference;\n","import java.io.ByteArrayOutputStream;\n","import java.io.IOException;\n","import java.io.InputStream;\n","import java.io.UnsupportedEncodingException;\n","import java.nio.charset.StandardCharsets;\n","import java.nio.file.Files;\n","import java.nio.file.Paths;\n","import java.util.Arrays;\n","import java.util.LinkedHashMap;\n","import java.util.Map;\n","import java.util.Objects;\n","import org.junit.Assert;\n","import org.junit.Test;\n","import org.junit.experimental.categories.Category;\n","\n","@Category(UnitTest.class)\n","public class JsonUtilTest extends ExtendedITextTest {\n","\n","    private static final String SOURCE_FOLDER = \"./src/test/resources/com/itextpdf/commons/utils/JsonUtilTest/\";\n","\n","    private static boolean isRunOnJava = false;\n","\n","    // Android-Conversion-Skip-Block-Start (cutting area is used to understand whether code is running on Android or not)\n","    static {\n","        isRunOnJava = true;\n","    }\n","    // Android-Conversion-Skip-Block-End\n","\n","    @Test\n","    public void utf8CharsetStringTest() {\n","        Assert.assertEquals(\"\\\"©\\\"\", JsonUtil.serializeToString(\"©\"));\n","    }\n","\n","    @Test\n","    public void utf8CharsetStreamTest() throws UnsupportedEncodingException {\n","        final ByteArrayOutputStream byteArray = new ByteArrayOutputStream();\n","        JsonUtil.serializeToStream(byteArray, \"©\");\n","        Assert.assertEquals(\"\\\"©\\\"\",\n","                EncodingUtil.convertToString(byteArray.toByteArray(), \"UTF-8\"));\n","    }\n","\n","    @Test\n","    public void serializeInstanceWithEnumStringTest() throws IOException {\n","        String cmp = SOURCE_FOLDER + \"classWithEnum.json\";\n","\n","        final ClassWithEnum classWithEnum = createClassWithEnumObject();\n","        String resultString = JsonUtil.serializeToString(classWithEnum);\n","\n","        String cmpString = getJsonStringFromFile(cmp);\n","        Assert.assertTrue(JsonUtil.areTwoJsonObjectEquals(cmpString, resultString));\n","    }\n","\n","    @Test\n","    // Android-Conversion-Ignore-Test (TODO DEVSIX-7371 investigate different behavior of a few iTextCore tests on Java and Android)\n","    public void serializeInstanceWithEnumStreamTest() throws IOException {\n","        String cmp;\n","        if (isRunOnJava) {\n","            cmp = SOURCE_FOLDER + \"classWithEnum.json\";\n","        } else {\n","            // Test is run on Android, so field order will be different from Java.\n","            cmp = SOURCE_FOLDER + \"classWithEnumAndroid.json\";\n","        }\n","\n","        try (InputStream inputStream = FileUtil.getInputStreamForFile(cmp);\n","                ByteArrayOutputStream baos = convertInputStreamToOutput(inputStream);\n","                ByteArrayOutputStream serializationResult = new ByteArrayOutputStream()) {\n","            JsonUtil.serializeToStream(serializationResult, createClassWithEnumObject());\n","            serializationResult.flush();\n","\n","            Assert.assertArrayEquals(baos.toByteArray(), serializationResult.toByteArray());\n","        }\n","    }\n","\n","    @Test\n","    public void serializeToMinimalInstanceWithEnumStringTest() throws IOException {\n","        String cmp = SOURCE_FOLDER + \"minimalClassWithEnum.json\";\n","\n","        final ClassWithEnum classWithEnum = createClassWithEnumObject();\n","        String resultString = JsonUtil.serializeToMinimalString(classWithEnum);\n","\n","        String compareString = getJsonStringFromFile(cmp);\n","        Assert.assertTrue(JsonUtil.areTwoJsonObjectEquals(compareString, resultString));\n","    }\n","\n","    @Test\n","    // Android-Conversion-Ignore-Test (TODO DEVSIX-7371 investigate different behavior of a few iTextCore tests on Java and Android)\n","    public void serializeToMinimalInstanceWithEnumStreamTest() throws IOException {\n","        String cmp;\n","        if (isRunOnJava) {\n","            cmp = SOURCE_FOLDER + \"minimalClassWithEnum.json\";\n","        } else {\n","            // Test is run on Android, so field order will be different from Java.\n","            cmp = SOURCE_FOLDER + \"minimalClassWithEnumAndroid.json\";\n","        }\n","\n","        try (InputStream inputStream = FileUtil.getInputStreamForFile(cmp);\n","                ByteArrayOutputStream baos = convertInputStreamToOutput(inputStream);\n","                ByteArrayOutputStream serializationResult = new ByteArrayOutputStream()) {\n","            JsonUtil.serializeToMinimalStream(serializationResult, createClassWithEnumObject());\n","            serializationResult.flush();\n","\n","            Assert.assertArrayEquals(baos.toByteArray(), serializationResult.toByteArray());\n","        }\n","    }\n","\n","    @Test\n","    public void serializeStringWithLineBreakStringTest() throws IOException {\n","        String cmp = SOURCE_FOLDER + \"stringsWithLineBreaks.json\";\n","\n","        String[] stringsForSerialization = createStringWithLineBreaks();\n","        String resultString = JsonUtil.serializeToString(stringsForSerialization);\n","\n","        String cmpString = getJsonStringFromFile(cmp);\n","        Assert.assertEquals(cmpString,resultString);\n","    }\n","\n","    @Test\n","    public void serializeStringWithLineBreakStreamTest() throws IOException {\n","        String path = SOURCE_FOLDER + \"stringsWithLineBreaks.json\";\n","\n","        try (InputStream inputStream = FileUtil.getInputStreamForFile(path);\n","                ByteArrayOutputStream baos = convertInputStreamToOutput(inputStream);\n","                ByteArrayOutputStream serializationResult = new ByteArrayOutputStream()) {\n","            JsonUtil.serializeToStream(serializationResult, createStringWithLineBreaks());\n","\n","            Assert.assertArrayEquals(baos.toByteArray(), serializationResult.toByteArray());\n","        }\n","    }\n","\n","    @Test\n","    public void serializeToMinimalStringWithLineBreakStringTest() throws IOException {\n","        String cmp = SOURCE_FOLDER + \"minimalStringsWithLineBreaks.json\";\n","\n","        String[] stringsForSerialization = createStringWithLineBreaks();\n","        String resultString = JsonUtil.serializeToMinimalString(stringsForSerialization);\n","\n","        String cmpString = getJsonStringFromFile(cmp);\n","        Assert.assertEquals(cmpString,resultString);\n","    }\n","\n","    @Test\n","    public void serializeToMinimalStringWithLineBreakStreamTest() throws IOException {\n","        String path = SOURCE_FOLDER + \"minimalStringsWithLineBreaks.json\";\n","\n","        try (InputStream inputStream = FileUtil.getInputStreamForFile(path);\n","                ByteArrayOutputStream baos = convertInputStreamToOutput(inputStream);\n","                ByteArrayOutputStream serializationResult = new ByteArrayOutputStream()) {\n","            JsonUtil.serializeToMinimalStream(serializationResult, createStringWithLineBreaks());\n","\n","            Assert.assertArrayEquals(baos.toByteArray(), serializationResult.toByteArray());\n","        }\n","    }\n","\n","    @Test\n","    public void serializeComplexStructureStringTest() throws IOException {\n","        String cmp = SOURCE_FOLDER + \"complexStructure.json\";\n","\n","        final ComplexStructure complexStructure = createComplexStructureObject();\n","        String resultString = JsonUtil.serializeToString(complexStructure);\n","\n","        String compareString = getJsonStringFromFile(cmp);\n","        Assert.assertTrue(JsonUtil.areTwoJsonObjectEquals(compareString, resultString));\n","    }\n","\n","    @Test\n","    // Android-Conversion-Ignore-Test (TODO DEVSIX-7371 investigate different behavior of a few iTextCore tests on Java and Android)\n","    public void serializeComplexStructureStreamTest() throws IOException {\n","        String cmp;\n","        if (isRunOnJava) {\n","            cmp = SOURCE_FOLDER + \"complexStructure.json\";\n","        } else {\n","            // Test is run on Android, so field order will be different from Java.\n","            cmp = SOURCE_FOLDER + \"complexStructureAndroid.json\";\n","        }\n","\n","        try (InputStream inputStream = FileUtil.getInputStreamForFile(cmp);\n","                ByteArrayOutputStream baos = convertInputStreamToOutput(inputStream);\n","                ByteArrayOutputStream serializationResult = new ByteArrayOutputStream()) {\n","            JsonUtil.serializeToStream(serializationResult, createComplexStructureObject());\n","\n","            Assert.assertNotEquals(0, serializationResult.size());\n","            Assert.assertArrayEquals(baos.toByteArray(), serializationResult.toByteArray());\n","        }\n","    }\n","\n","    @Test\n","    public void serializeToMinimalComplexStructureStringTest() throws IOException {\n","        String cmp = SOURCE_FOLDER + \"minimalComplexStructure.json\";\n","\n","        final ComplexStructure complexStructure = createComplexStructureObject();\n","        String resultString = JsonUtil.serializeToMinimalString(complexStructure);\n","\n","        String compareString = getJsonStringFromFile(cmp);\n","        Assert.assertTrue(JsonUtil.areTwoJsonObjectEquals(compareString, resultString));\n","    }\n","\n","    @Test\n","    // Android-Conversion-Ignore-Test (TODO DEVSIX-7371 investigate different behavior of a few iTextCore tests on Java and Android)\n","    public void serializeToMinimalComplexStructureStreamTest() throws IOException {\n","        String cmp;\n","        if (isRunOnJava) {\n","            cmp = SOURCE_FOLDER + \"minimalComplexStructure.json\";\n","        } else {\n","            // Test is run on Android, so field order will be different from Java.\n","            cmp = SOURCE_FOLDER + \"minimalComplexStructureAndroid.json\";\n","        }\n","\n","        try (InputStream inputStream = FileUtil.getInputStreamForFile(cmp);\n","                ByteArrayOutputStream baos = convertInputStreamToOutput(inputStream);\n","                ByteArrayOutputStream serializationResult = new ByteArrayOutputStream()) {\n","            JsonUtil.serializeToMinimalStream(serializationResult, createComplexStructureObject());\n","\n","            Assert.assertNotEquals(0, serializationResult.size());\n","            Assert.assertArrayEquals(baos.toByteArray(), serializationResult.toByteArray());\n","        }\n","    }\n","\n","    @Test\n","    public void serializeWithNullFieldsStringTest() throws IOException {\n","        String cmp = SOURCE_FOLDER + \"serializeWithNullFields.json\";\n","\n","        final ClassWithDefaultValue complexStructure =\n","                createClassWithDefaultValueObject(null, 4, null);\n","        String resultString = JsonUtil.serializeToString(complexStructure);\n","\n","        String compareString = getJsonStringFromFile(cmp);\n","        Assert.assertTrue(JsonUtil.areTwoJsonObjectEquals(compareString, resultString));\n","    }\n","\n","    @Test\n","    public void serializeWithNullFieldsStreamTest() throws IOException {\n","        String path = SOURCE_FOLDER + \"serializeWithNullFields.json\";\n","\n","        try (InputStream inputStream = FileUtil.getInputStreamForFile(path);\n","                ByteArrayOutputStream baos = convertInputStreamToOutput(inputStream);\n","                ByteArrayOutputStream serializationResult = new ByteArrayOutputStream()) {\n","            JsonUtil.serializeToStream(serializationResult,\n","                    createClassWithDefaultValueObject(null, 4, null));\n","\n","            Assert.assertArrayEquals(baos.toByteArray(), serializationResult.toByteArray());\n","        }\n","    }\n","\n","    @Test\n","    public void serializeToMinimalWithNullFieldsStringTest() throws IOException {\n","        String cmp = SOURCE_FOLDER + \"minimalSerializeWithNullFields.json\";\n","\n","        final ClassWithDefaultValue complexStructure =\n","                createClassWithDefaultValueObject(null, 4, null);\n","        String resultString = JsonUtil.serializeToMinimalString(complexStructure);\n","\n","        String compareString = getJsonStringFromFile(cmp);\n","        Assert.assertTrue(JsonUtil.areTwoJsonObjectEquals(compareString, resultString));\n","    }\n","\n","    @Test\n","    public void serializeToMinimalWithNullFieldsStreamTest() throws IOException {\n","        String path = SOURCE_FOLDER + \"minimalSerializeWithNullFields.json\";\n","\n","        try (InputStream inputStream = FileUtil.getInputStreamForFile(path);\n","                ByteArrayOutputStream baos = convertInputStreamToOutput(inputStream);\n","                ByteArrayOutputStream serializationResult = new ByteArrayOutputStream()) {\n","            JsonUtil.serializeToMinimalStream(serializationResult,\n","                    createClassWithDefaultValueObject(null, 4, null));\n","\n","            Assert.assertArrayEquals(baos.toByteArray(), serializationResult.toByteArray());\n","        }\n","    }\n","\n","    @Test\n","    @LogMessages(messages = {\n","            @LogMessage(messageTemplate = CommonsLogMessageConstant.UNABLE_TO_DESERIALIZE_JSON, logLevel =\n","                    LogLevelConstants.WARN)\n","    })\n","    public void deserializeInvalidJsonFileStringTest() throws IOException {\n","        String source = SOURCE_FOLDER + \"invalidJson.json\";\n","\n","        String jsonString = getJsonStringFromFile(source);\n","\n","        String resultStr = JsonUtil.<String>deserializeFromString(jsonString, String.class);\n","        Assert.assertNull(resultStr);\n","    }\n","\n","    @Test\n","    @LogMessages(messages = {\n","            @LogMessage(messageTemplate = CommonsLogMessageConstant.UNABLE_TO_DESERIALIZE_JSON, logLevel =\n","                    LogLevelConstants.WARN)\n","    })\n","    public void deserializeInvalidJsonFileStreamTest() throws IOException {\n","        String source = SOURCE_FOLDER + \"invalidJson.json\";\n","\n","        try (InputStream inputStream = FileUtil.getInputStreamForFile(source)) {\n","            String resultStr = JsonUtil.<String>deserializeFromStream(inputStream, String.class);\n","            Assert.assertNull(resultStr);\n","        }\n","    }\n","\n","    @Test\n","    public void deserializeWithDefaultValueStringTest() throws IOException {\n","        String source = SOURCE_FOLDER + \"classWithDefaultValue.json\";\n","\n","        String jsonString = getJsonStringFromFile(source);\n","\n","        ClassWithDefaultValue instance =\n","                JsonUtil.<ClassWithDefaultValue>deserializeFromString(jsonString, ClassWithDefaultValue.class);\n","        Assert.assertEquals(createClassWithDefaultValueObject(null, 2, 5.0), instance);\n","    }\n","\n","    @Test\n","    public void deserializeWithDefaultValueStreamTest() throws IOException {\n","        String source = SOURCE_FOLDER + \"classWithDefaultValue.json\";\n","\n","        try (InputStream inputStream = FileUtil.getInputStreamForFile(source)) {\n","            ClassWithDefaultValue instance =\n","                    JsonUtil.<ClassWithDefaultValue>deserializeFromStream(inputStream, ClassWithDefaultValue.class);\n","            Assert.assertEquals(createClassWithDefaultValueObject(null, 2, 5.0), instance);\n","        }\n","    }\n","\n","    @Test\n","    public void deserializeComplexStructureStringTest() throws IOException {\n","        String source = SOURCE_FOLDER + \"complexStructure.json\";\n","\n","        String jsonString = getJsonStringFromFile(source);\n","\n","        ComplexStructure complexStructure =\n","                JsonUtil.<ComplexStructure>deserializeFromString(jsonString, ComplexStructure.class);\n","\n","        Assert.assertEquals(createComplexStructureObject(), complexStructure);\n","    }\n","\n","    @Test\n","    public void deserializeComplexStructureStreamTest() throws IOException {\n","        String source = SOURCE_FOLDER + \"complexStructure.json\";\n","\n","        try (InputStream inputStream = FileUtil.getInputStreamForFile(source)) {\n","            ComplexStructure complexStructure =\n","                    JsonUtil.<ComplexStructure>deserializeFromStream(inputStream, ComplexStructure.class);\n","\n","            Assert.assertEquals(createComplexStructureObject(), complexStructure);\n","        }\n","    }\n","\n","    @Test\n","    public void deserializeInstanceWithEnumStringTest() throws IOException {\n","        String source = SOURCE_FOLDER + \"classWithEnum.json\";\n","\n","        String jsonString = getJsonStringFromFile(source);\n","\n","        ClassWithEnum classWithEnum = JsonUtil.<ClassWithEnum>deserializeFromString(jsonString, ClassWithEnum.class);\n","\n","        Assert.assertEquals(createClassWithEnumObject(), classWithEnum);\n","    }\n","\n","    @Test\n","    public void deserializeInstanceWithEnumStreamTest() throws IOException {\n","        String source = SOURCE_FOLDER + \"classWithEnum.json\";\n","\n","        try (InputStream inputStream = FileUtil.getInputStreamForFile(source)) {\n","            ClassWithEnum classWithEnum = JsonUtil\n","                    .<ClassWithEnum>deserializeFromStream(inputStream, ClassWithEnum.class);\n","\n","            Assert.assertEquals(createClassWithEnumObject(), classWithEnum);\n","        }\n","    }\n","\n","    @Test\n","    public void deserializeWithUnknownPropertiesStringTest() throws IOException {\n","        String source = SOURCE_FOLDER + \"classWithUnknownProperties.json\";\n","\n","        String jsonString = getJsonStringFromFile(source);\n","\n","        ClassWithDefaultValue instance =\n","                JsonUtil.<ClassWithDefaultValue>deserializeFromString(jsonString, ClassWithDefaultValue.class);\n","\n","        Assert.assertEquals(\n","                createClassWithDefaultValueObject(\"some small string\", 8, 26.0), instance);\n","    }\n","\n","    @Test\n","    public void deserializeWithUnknownPropertiesStreamTest() throws IOException {\n","        String source = SOURCE_FOLDER + \"classWithUnknownProperties.json\";\n","\n","        try (InputStream inputStream = FileUtil.getInputStreamForFile(source)) {\n","            ClassWithDefaultValue instance =\n","                    JsonUtil.<ClassWithDefaultValue>deserializeFromStream(inputStream, ClassWithDefaultValue.class);\n","\n","            Assert.assertNotNull(instance);\n","            Assert.assertEquals(\n","                    createClassWithDefaultValueObject(\"some small string\", 8, 26.0), instance);\n","        }\n","    }\n","\n","    @Test\n","    public void deserializeWithDefaultValueTypeReferenceStreamTest() throws IOException {\n","        String source = SOURCE_FOLDER + \"classWithDefaultValue.json\";\n","\n","        try (InputStream inputStream = FileUtil.getInputStreamForFile(source)) {\n","            ClassWithDefaultValue instance =\n","                    JsonUtil.<ClassWithDefaultValue>deserializeFromStream(inputStream,\n","                            new TypeReference<ClassWithDefaultValue>() {\n","                            });\n","            Assert.assertEquals(createClassWithDefaultValueObject(null, 2, 5.0), instance);\n","        }\n","    }\n","\n","    @Test\n","    public void deserializeWithDefaultValueTypeReferenceStringTest() throws IOException {\n","        String source = SOURCE_FOLDER + \"classWithDefaultValue.json\";\n","\n","        String jsonString = getJsonStringFromFile(source);\n","\n","        ClassWithDefaultValue instance =\n","                JsonUtil.<ClassWithDefaultValue>deserializeFromString(jsonString,\n","                        new TypeReference<ClassWithDefaultValue>() {\n","                        });\n","        Assert.assertEquals(createClassWithDefaultValueObject(null, 2, 5.0), instance);\n","    }\n","\n","    private String getJsonStringFromFile(String pathToFile) throws IOException {\n","        byte[] fileBytes = Files.readAllBytes(Paths.get(pathToFile));\n","        // Use String(byte[]) because there is autoporting for this\n","        // construction by sharpen by call JavaUtil#GetStringForBytes\n","        return new String(fileBytes, StandardCharsets.UTF_8);\n","    }\n","\n","    private static ByteArrayOutputStream convertInputStreamToOutput(InputStream inputStream) throws IOException {\n","        ByteArrayOutputStream result = new ByteArrayOutputStream();\n","        byte[] buffer = new byte[1024];\n","        int length;\n","        while ((length = inputStream.read(buffer)) != -1) {\n","            result.write(buffer, 0, length);\n","        }\n","        result.flush();\n","        return result;\n","    }\n","\n","    private static ComplexStructure createComplexStructureObject() {\n","        final ComplexStructure complexStructure = new ComplexStructure();\n","        complexStructure.map.put(\"FirstMapKey\", 15);\n","        complexStructure.map.put(\"SecondMapKey\", 8);\n","        complexStructure.str = \"StringFieldValue\";\n","        ChildInComplexStructure child = new ChildInComplexStructure();\n","        child.arrayStr = new String[] {\"someStr1\", \"someStr2\"};\n","        GrandsonComplexStructure grandson = new GrandsonComplexStructure();\n","        grandson.integer = 13;\n","        grandson.name = \"someName\";\n","        child.grandsons = new GrandsonComplexStructure[] {grandson, new GrandsonComplexStructure()};\n","        complexStructure.childsMap.put(\"ChildMapkey\", child);\n","        complexStructure.childsMap.put(\"ChildMapKey2\", new ChildInComplexStructure());\n","\n","        return complexStructure;\n","    }\n","\n","    private static ClassWithDefaultValue createClassWithDefaultValueObject(String firstString, int value,\n","            Double doubleValue) {\n","        return new ClassWithDefaultValue(firstString, value, doubleValue);\n","    }\n","\n","    private static ClassWithEnum createClassWithEnumObject() {\n","        final ClassWithEnum classWithEnum = new ClassWithEnum();\n","        classWithEnum.enumArray = new SomeEnum[] {SomeEnum.FIRST_VALUE, SomeEnum.FIRST_VALUE, SomeEnum.SECOND_VALUE};\n","        classWithEnum.firstValue = SomeEnum.SECOND_VALUE;\n","\n","        return classWithEnum;\n","    }\n","\n","    private static String[] createStringWithLineBreaks() {\n","        return new String[] {\"String\\n\\rtest\", \"  \\n   \\t\"};\n","    }\n","\n","\n","    private static class ComplexStructure {\n","        public Map<String, Integer> map = new LinkedHashMap<>();\n","        public String str = \"\";\n","        public Map<String, ChildInComplexStructure> childsMap = new LinkedHashMap<>();\n","\n","        @Override\n","        public boolean equals(Object o) {\n","            if (this == o) {\n","                return true;\n","            }\n","            if (o == null || getClass() != o.getClass()) {\n","                return false;\n","            }\n","\n","            ComplexStructure that = (ComplexStructure) o;\n","            return MapUtil.equals(map, that.map) && Objects.equals(str, that.str) && MapUtil\n","                    .equals(childsMap, that.childsMap);\n","        }\n","\n","        @Override\n","        public int hashCode() {\n","            int result = map != null ? MapUtil.getHashCode(map) : 0;\n","            result = 31 * result + (str != null ? str.hashCode() : 0);\n","            result = 31 * result + (childsMap != null ? MapUtil.getHashCode(childsMap) : 0);\n","            return result;\n","        }\n","    }\n","\n","    private static class ChildInComplexStructure {\n","        public String[] arrayStr = new String[] {\"\"};\n","        public GrandsonComplexStructure[] grandsons = new GrandsonComplexStructure[] {new GrandsonComplexStructure()};\n","\n","        @Override\n","        public boolean equals(Object o) {\n","            if (this == o) {\n","                return true;\n","            }\n","            if (o == null || getClass() != o.getClass()) {\n","                return false;\n","            }\n","\n","            ChildInComplexStructure that = (ChildInComplexStructure) o;\n","            return Arrays.equals(arrayStr, that.arrayStr) && Arrays.equals(grandsons, that.grandsons);\n","        }\n","\n","        @Override\n","        public int hashCode() {\n","            int result = Arrays.hashCode(arrayStr);\n","            result = 31 * result + Arrays.hashCode(grandsons);\n","            return result;\n","        }\n","    }\n","\n","    private static class GrandsonComplexStructure {\n","        public int integer = 0;\n","        public String name = \"\";\n","\n","\n","        @Override\n","        public boolean equals(Object o) {\n","            if (this == o) {\n","                return true;\n","            }\n","            if (o == null || getClass() != o.getClass()) {\n","                return false;\n","            }\n","\n","            GrandsonComplexStructure that = (GrandsonComplexStructure) o;\n","            return integer == that.integer && Objects.equals(name, that.name);\n","        }\n","\n","        @Override\n","        public int hashCode() {\n","            int result = integer;\n","            result = 31 * result + (name != null ? name.hashCode() : 0);\n","            return result;\n","        }\n","    }\n","\n","    private static class ClassWithEnum {\n","        public SomeEnum firstValue;\n","        public SomeEnum[] enumArray = new SomeEnum[] {};\n","\n","        @Override\n","        public boolean equals(Object o) {\n","            if (this == o) {\n","                return true;\n","            }\n","            if (o == null || getClass() != o.getClass()) {\n","                return false;\n","            }\n","            ClassWithEnum that = (ClassWithEnum) o;\n","            return firstValue == that.firstValue && Arrays.equals(enumArray, that.enumArray);\n","        }\n","\n","        @Override\n","        public int hashCode() {\n","            int result = Objects.hash(firstValue);\n","            result = 31 * result + Arrays.hashCode(enumArray);\n","            return result;\n","        }\n","    }\n","\n","    private static enum SomeEnum {\n","        FIRST_VALUE,\n","        SECOND_VALUE,\n","        THIRD_VALUE\n","    }\n","\n","    private static class ClassWithDefaultValue {\n","        public String firstString = \"defaultValue\";\n","        public Integer integer = 3;\n","        public Double doubleValue = 0.0;\n","\n","        public ClassWithDefaultValue(\n","                @JsonProperty(\"firstString\") String firstString,\n","                @JsonProperty(\"integer\") Integer integer,\n","                @JsonProperty(\"doubleValue\") Double doubleValue\n","        ) {\n","            if (firstString != null) {\n","                this.firstString = firstString;\n","            }\n","            if (integer != null) {\n","                this.integer = integer;\n","            }\n","            this.doubleValue = doubleValue;\n","        }\n","\n","        @Override\n","        public boolean equals(Object o) {\n","            if (this == o) {\n","                return true;\n","            }\n","            if (o == null || getClass() != o.getClass()) {\n","                return false;\n","            }\n","            ClassWithDefaultValue that = (ClassWithDefaultValue) o;\n","            return Objects.equals(firstString, that.firstString) && Objects.equals(integer, that.integer)\n","                    && Objects.equals(doubleValue, that.doubleValue);\n","        }\n","\n","        @Override\n","        public int hashCode() {\n","\n","            int result = (firstString == null ? 0 : firstString.hashCode());\n","            result = 31 * result + (integer == null ? 0 : integer.hashCode());\n","            result = 31 * result + (doubleValue == null ? 0 : doubleValue.hashCode());\n","            return result;\n","        }\n","    }\n","}\n"],"method_lines_dic":{"JsonUtil::::areTwoJsonObjectEquals(java.lang.String,java.lang.String)":[65,72],"JsonUtil::::serializeToStream(java.io.OutputStream,java.lang.Object)":[80,82],"JsonUtil::::serializeToString(java.lang.Object)":[91,93],"JsonUtil::::serializeToMinimalStream(java.io.OutputStream,java.lang.Object)":[101,103],"JsonUtil::::serializeToMinimalString(java.lang.Object)":[113,115],"JsonUtil::::deserializeFromStream(java.io.InputStream,java.lang.Class<T>)":[126,129],"JsonUtil::::deserializeFromString(java.lang.String,java.lang.Class<T>)":[175,178],"JsonUtil.CustomPrettyPrinter::::createInstance()":[277,280],"JsonUtil.MinimalPrinter::::createInstance()":[294,297]},"test_method_lines_dic":{"JsonUtilTest::::utf8CharsetStringTest()":[62,65],"JsonUtilTest::::utf8CharsetStreamTest()":[67,73],"JsonUtilTest::::serializeInstanceWithEnumStringTest()":[75,84],"JsonUtilTest::::serializeInstanceWithEnumStreamTest()":[86,105],"JsonUtilTest::::serializeToMinimalInstanceWithEnumStringTest()":[107,116],"JsonUtilTest::::serializeToMinimalInstanceWithEnumStreamTest()":[118,137],"JsonUtilTest::::serializeStringWithLineBreakStringTest()":[139,148],"JsonUtilTest::::serializeStringWithLineBreakStreamTest()":[150,161],"JsonUtilTest::::serializeToMinimalStringWithLineBreakStringTest()":[163,172],"JsonUtilTest::::serializeToMinimalStringWithLineBreakStreamTest()":[174,185],"JsonUtilTest::::serializeComplexStructureStringTest()":[187,196],"JsonUtilTest::::serializeComplexStructureStreamTest()":[198,217],"JsonUtilTest::::serializeToMinimalComplexStructureStringTest()":[219,228],"JsonUtilTest::::serializeToMinimalComplexStructureStreamTest()":[230,249],"JsonUtilTest::::serializeWithNullFieldsStringTest()":[251,261],"JsonUtilTest::::serializeWithNullFieldsStreamTest()":[263,275],"JsonUtilTest::::serializeToMinimalWithNullFieldsStringTest()":[277,287],"JsonUtilTest::::serializeToMinimalWithNullFieldsStreamTest()":[289,301],"JsonUtilTest::::deserializeInvalidJsonFileStringTest()":[303,315],"JsonUtilTest::::deserializeInvalidJsonFileStreamTest()":[317,329],"JsonUtilTest::::deserializeWithDefaultValueStringTest()":[331,340],"JsonUtilTest::::deserializeWithDefaultValueStreamTest()":[342,351],"JsonUtilTest::::deserializeComplexStructureStringTest()":[353,363],"JsonUtilTest::::deserializeComplexStructureStreamTest()":[365,375],"JsonUtilTest::::deserializeInstanceWithEnumStringTest()":[377,386],"JsonUtilTest::::deserializeInstanceWithEnumStreamTest()":[388,398],"JsonUtilTest::::deserializeWithUnknownPropertiesStringTest()":[400,411],"JsonUtilTest::::deserializeWithUnknownPropertiesStreamTest()":[413,425],"JsonUtilTest::::deserializeWithDefaultValueTypeReferenceStreamTest()":[427,438],"JsonUtilTest::::deserializeWithDefaultValueTypeReferenceStringTest()":[440,451],"JsonUtilTest::::getJsonStringFromFile(java.lang.String)":[453,458],"JsonUtilTest::::convertInputStreamToOutput(java.io.InputStream)":[460,469],"JsonUtilTest::::createComplexStructureObject()":[471,486],"JsonUtilTest::::createClassWithDefaultValueObject(java.lang.String,int,java.lang.Double)":[488,491],"JsonUtilTest::::createClassWithEnumObject()":[493,499],"JsonUtilTest::::createStringWithLineBreaks()":[501,503],"JsonUtilTest.ComplexStructure::::equals(java.lang.Object)":[511,523],"JsonUtilTest.ComplexStructure::::hashCode()":[525,531],"JsonUtilTest.ChildInComplexStructure::::equals(java.lang.Object)":[538,549],"JsonUtilTest.ChildInComplexStructure::::hashCode()":[551,556],"JsonUtilTest.GrandsonComplexStructure::::equals(java.lang.Object)":[564,575],"JsonUtilTest.GrandsonComplexStructure::::hashCode()":[577,582],"JsonUtilTest.ClassWithEnum::::equals(java.lang.Object)":[589,599],"JsonUtilTest.ClassWithEnum::::hashCode()":[601,606],"JsonUtilTest.ClassWithDefaultValue::::equals(java.lang.Object)":[634,645],"JsonUtilTest.ClassWithDefaultValue::::hashCode()":[647,654]},"reverse_method_lines_dic":{"65":"JsonUtil::::areTwoJsonObjectEquals(java.lang.String,java.lang.String)","66":"JsonUtil::::areTwoJsonObjectEquals(java.lang.String,java.lang.String)","67":"JsonUtil::::areTwoJsonObjectEquals(java.lang.String,java.lang.String)","68":"JsonUtil::::areTwoJsonObjectEquals(java.lang.String,java.lang.String)","69":"JsonUtil::::areTwoJsonObjectEquals(java.lang.String,java.lang.String)","70":"JsonUtil::::areTwoJsonObjectEquals(java.lang.String,java.lang.String)","71":"JsonUtil::::areTwoJsonObjectEquals(java.lang.String,java.lang.String)","72":"JsonUtil::::areTwoJsonObjectEquals(java.lang.String,java.lang.String)","80":"JsonUtil::::serializeToStream(java.io.OutputStream,java.lang.Object)","81":"JsonUtil::::serializeToStream(java.io.OutputStream,java.lang.Object)","82":"JsonUtil::::serializeToStream(java.io.OutputStream,java.lang.Object)","91":"JsonUtil::::serializeToString(java.lang.Object)","92":"JsonUtil::::serializeToString(java.lang.Object)","93":"JsonUtil::::serializeToString(java.lang.Object)","101":"JsonUtil::::serializeToMinimalStream(java.io.OutputStream,java.lang.Object)","102":"JsonUtil::::serializeToMinimalStream(java.io.OutputStream,java.lang.Object)","103":"JsonUtil::::serializeToMinimalStream(java.io.OutputStream,java.lang.Object)","113":"JsonUtil::::serializeToMinimalString(java.lang.Object)","114":"JsonUtil::::serializeToMinimalString(java.lang.Object)","115":"JsonUtil::::serializeToMinimalString(java.lang.Object)","126":"JsonUtil::::deserializeFromStream(java.io.InputStream,java.lang.Class<T>)","127":"JsonUtil::::deserializeFromStream(java.io.InputStream,java.lang.Class<T>)","128":"JsonUtil::::deserializeFromStream(java.io.InputStream,java.lang.Class<T>)","129":"JsonUtil::::deserializeFromStream(java.io.InputStream,java.lang.Class<T>)","175":"JsonUtil::::deserializeFromString(java.lang.String,java.lang.Class<T>)","176":"JsonUtil::::deserializeFromString(java.lang.String,java.lang.Class<T>)","177":"JsonUtil::::deserializeFromString(java.lang.String,java.lang.Class<T>)","178":"JsonUtil::::deserializeFromString(java.lang.String,java.lang.Class<T>)","277":"JsonUtil.CustomPrettyPrinter::::createInstance()","278":"JsonUtil.CustomPrettyPrinter::::createInstance()","279":"JsonUtil.CustomPrettyPrinter::::createInstance()","280":"JsonUtil.CustomPrettyPrinter::::createInstance()","294":"JsonUtil.MinimalPrinter::::createInstance()","295":"JsonUtil.MinimalPrinter::::createInstance()","296":"JsonUtil.MinimalPrinter::::createInstance()","297":"JsonUtil.MinimalPrinter::::createInstance()"},"test_reverse_method_lines_dic":{"62":"JsonUtilTest::::utf8CharsetStringTest()","63":"JsonUtilTest::::utf8CharsetStringTest()","64":"JsonUtilTest::::utf8CharsetStringTest()","65":"JsonUtilTest::::utf8CharsetStringTest()","67":"JsonUtilTest::::utf8CharsetStreamTest()","68":"JsonUtilTest::::utf8CharsetStreamTest()","69":"JsonUtilTest::::utf8CharsetStreamTest()","70":"JsonUtilTest::::utf8CharsetStreamTest()","71":"JsonUtilTest::::utf8CharsetStreamTest()","72":"JsonUtilTest::::utf8CharsetStreamTest()","73":"JsonUtilTest::::utf8CharsetStreamTest()","75":"JsonUtilTest::::serializeInstanceWithEnumStringTest()","76":"JsonUtilTest::::serializeInstanceWithEnumStringTest()","77":"JsonUtilTest::::serializeInstanceWithEnumStringTest()","78":"JsonUtilTest::::serializeInstanceWithEnumStringTest()","79":"JsonUtilTest::::serializeInstanceWithEnumStringTest()","80":"JsonUtilTest::::serializeInstanceWithEnumStringTest()","81":"JsonUtilTest::::serializeInstanceWithEnumStringTest()","82":"JsonUtilTest::::serializeInstanceWithEnumStringTest()","83":"JsonUtilTest::::serializeInstanceWithEnumStringTest()","84":"JsonUtilTest::::serializeInstanceWithEnumStringTest()","86":"JsonUtilTest::::serializeInstanceWithEnumStreamTest()","87":"JsonUtilTest::::serializeInstanceWithEnumStreamTest()","88":"JsonUtilTest::::serializeInstanceWithEnumStreamTest()","89":"JsonUtilTest::::serializeInstanceWithEnumStreamTest()","90":"JsonUtilTest::::serializeInstanceWithEnumStreamTest()","91":"JsonUtilTest::::serializeInstanceWithEnumStreamTest()","92":"JsonUtilTest::::serializeInstanceWithEnumStreamTest()","93":"JsonUtilTest::::serializeInstanceWithEnumStreamTest()","94":"JsonUtilTest::::serializeInstanceWithEnumStreamTest()","95":"JsonUtilTest::::serializeInstanceWithEnumStreamTest()","96":"JsonUtilTest::::serializeInstanceWithEnumStreamTest()","97":"JsonUtilTest::::serializeInstanceWithEnumStreamTest()","98":"JsonUtilTest::::serializeInstanceWithEnumStreamTest()","99":"JsonUtilTest::::serializeInstanceWithEnumStreamTest()","100":"JsonUtilTest::::serializeInstanceWithEnumStreamTest()","101":"JsonUtilTest::::serializeInstanceWithEnumStreamTest()","102":"JsonUtilTest::::serializeInstanceWithEnumStreamTest()","103":"JsonUtilTest::::serializeInstanceWithEnumStreamTest()","104":"JsonUtilTest::::serializeInstanceWithEnumStreamTest()","105":"JsonUtilTest::::serializeInstanceWithEnumStreamTest()","107":"JsonUtilTest::::serializeToMinimalInstanceWithEnumStringTest()","108":"JsonUtilTest::::serializeToMinimalInstanceWithEnumStringTest()","109":"JsonUtilTest::::serializeToMinimalInstanceWithEnumStringTest()","110":"JsonUtilTest::::serializeToMinimalInstanceWithEnumStringTest()","111":"JsonUtilTest::::serializeToMinimalInstanceWithEnumStringTest()","112":"JsonUtilTest::::serializeToMinimalInstanceWithEnumStringTest()","113":"JsonUtilTest::::serializeToMinimalInstanceWithEnumStringTest()","114":"JsonUtilTest::::serializeToMinimalInstanceWithEnumStringTest()","115":"JsonUtilTest::::serializeToMinimalInstanceWithEnumStringTest()","116":"JsonUtilTest::::serializeToMinimalInstanceWithEnumStringTest()","118":"JsonUtilTest::::serializeToMinimalInstanceWithEnumStreamTest()","119":"JsonUtilTest::::serializeToMinimalInstanceWithEnumStreamTest()","120":"JsonUtilTest::::serializeToMinimalInstanceWithEnumStreamTest()","121":"JsonUtilTest::::serializeToMinimalInstanceWithEnumStreamTest()","122":"JsonUtilTest::::serializeToMinimalInstanceWithEnumStreamTest()","123":"JsonUtilTest::::serializeToMinimalInstanceWithEnumStreamTest()","124":"JsonUtilTest::::serializeToMinimalInstanceWithEnumStreamTest()","125":"JsonUtilTest::::serializeToMinimalInstanceWithEnumStreamTest()","126":"JsonUtilTest::::serializeToMinimalInstanceWithEnumStreamTest()","127":"JsonUtilTest::::serializeToMinimalInstanceWithEnumStreamTest()","128":"JsonUtilTest::::serializeToMinimalInstanceWithEnumStreamTest()","129":"JsonUtilTest::::serializeToMinimalInstanceWithEnumStreamTest()","130":"JsonUtilTest::::serializeToMinimalInstanceWithEnumStreamTest()","131":"JsonUtilTest::::serializeToMinimalInstanceWithEnumStreamTest()","132":"JsonUtilTest::::serializeToMinimalInstanceWithEnumStreamTest()","133":"JsonUtilTest::::serializeToMinimalInstanceWithEnumStreamTest()","134":"JsonUtilTest::::serializeToMinimalInstanceWithEnumStreamTest()","135":"JsonUtilTest::::serializeToMinimalInstanceWithEnumStreamTest()","136":"JsonUtilTest::::serializeToMinimalInstanceWithEnumStreamTest()","137":"JsonUtilTest::::serializeToMinimalInstanceWithEnumStreamTest()","139":"JsonUtilTest::::serializeStringWithLineBreakStringTest()","140":"JsonUtilTest::::serializeStringWithLineBreakStringTest()","141":"JsonUtilTest::::serializeStringWithLineBreakStringTest()","142":"JsonUtilTest::::serializeStringWithLineBreakStringTest()","143":"JsonUtilTest::::serializeStringWithLineBreakStringTest()","144":"JsonUtilTest::::serializeStringWithLineBreakStringTest()","145":"JsonUtilTest::::serializeStringWithLineBreakStringTest()","146":"JsonUtilTest::::serializeStringWithLineBreakStringTest()","147":"JsonUtilTest::::serializeStringWithLineBreakStringTest()","148":"JsonUtilTest::::serializeStringWithLineBreakStringTest()","150":"JsonUtilTest::::serializeStringWithLineBreakStreamTest()","151":"JsonUtilTest::::serializeStringWithLineBreakStreamTest()","152":"JsonUtilTest::::serializeStringWithLineBreakStreamTest()","153":"JsonUtilTest::::serializeStringWithLineBreakStreamTest()","154":"JsonUtilTest::::serializeStringWithLineBreakStreamTest()","155":"JsonUtilTest::::serializeStringWithLineBreakStreamTest()","156":"JsonUtilTest::::serializeStringWithLineBreakStreamTest()","157":"JsonUtilTest::::serializeStringWithLineBreakStreamTest()","158":"JsonUtilTest::::serializeStringWithLineBreakStreamTest()","159":"JsonUtilTest::::serializeStringWithLineBreakStreamTest()","160":"JsonUtilTest::::serializeStringWithLineBreakStreamTest()","161":"JsonUtilTest::::serializeStringWithLineBreakStreamTest()","163":"JsonUtilTest::::serializeToMinimalStringWithLineBreakStringTest()","164":"JsonUtilTest::::serializeToMinimalStringWithLineBreakStringTest()","165":"JsonUtilTest::::serializeToMinimalStringWithLineBreakStringTest()","166":"JsonUtilTest::::serializeToMinimalStringWithLineBreakStringTest()","167":"JsonUtilTest::::serializeToMinimalStringWithLineBreakStringTest()","168":"JsonUtilTest::::serializeToMinimalStringWithLineBreakStringTest()","169":"JsonUtilTest::::serializeToMinimalStringWithLineBreakStringTest()","170":"JsonUtilTest::::serializeToMinimalStringWithLineBreakStringTest()","171":"JsonUtilTest::::serializeToMinimalStringWithLineBreakStringTest()","172":"JsonUtilTest::::serializeToMinimalStringWithLineBreakStringTest()","174":"JsonUtilTest::::serializeToMinimalStringWithLineBreakStreamTest()","175":"JsonUtilTest::::serializeToMinimalStringWithLineBreakStreamTest()","176":"JsonUtilTest::::serializeToMinimalStringWithLineBreakStreamTest()","177":"JsonUtilTest::::serializeToMinimalStringWithLineBreakStreamTest()","178":"JsonUtilTest::::serializeToMinimalStringWithLineBreakStreamTest()","179":"JsonUtilTest::::serializeToMinimalStringWithLineBreakStreamTest()","180":"JsonUtilTest::::serializeToMinimalStringWithLineBreakStreamTest()","181":"JsonUtilTest::::serializeToMinimalStringWithLineBreakStreamTest()","182":"JsonUtilTest::::serializeToMinimalStringWithLineBreakStreamTest()","183":"JsonUtilTest::::serializeToMinimalStringWithLineBreakStreamTest()","184":"JsonUtilTest::::serializeToMinimalStringWithLineBreakStreamTest()","185":"JsonUtilTest::::serializeToMinimalStringWithLineBreakStreamTest()","187":"JsonUtilTest::::serializeComplexStructureStringTest()","188":"JsonUtilTest::::serializeComplexStructureStringTest()","189":"JsonUtilTest::::serializeComplexStructureStringTest()","190":"JsonUtilTest::::serializeComplexStructureStringTest()","191":"JsonUtilTest::::serializeComplexStructureStringTest()","192":"JsonUtilTest::::serializeComplexStructureStringTest()","193":"JsonUtilTest::::serializeComplexStructureStringTest()","194":"JsonUtilTest::::serializeComplexStructureStringTest()","195":"JsonUtilTest::::serializeComplexStructureStringTest()","196":"JsonUtilTest::::serializeComplexStructureStringTest()","198":"JsonUtilTest::::serializeComplexStructureStreamTest()","199":"JsonUtilTest::::serializeComplexStructureStreamTest()","200":"JsonUtilTest::::serializeComplexStructureStreamTest()","201":"JsonUtilTest::::serializeComplexStructureStreamTest()","202":"JsonUtilTest::::serializeComplexStructureStreamTest()","203":"JsonUtilTest::::serializeComplexStructureStreamTest()","204":"JsonUtilTest::::serializeComplexStructureStreamTest()","205":"JsonUtilTest::::serializeComplexStructureStreamTest()","206":"JsonUtilTest::::serializeComplexStructureStreamTest()","207":"JsonUtilTest::::serializeComplexStructureStreamTest()","208":"JsonUtilTest::::serializeComplexStructureStreamTest()","209":"JsonUtilTest::::serializeComplexStructureStreamTest()","210":"JsonUtilTest::::serializeComplexStructureStreamTest()","211":"JsonUtilTest::::serializeComplexStructureStreamTest()","212":"JsonUtilTest::::serializeComplexStructureStreamTest()","213":"JsonUtilTest::::serializeComplexStructureStreamTest()","214":"JsonUtilTest::::serializeComplexStructureStreamTest()","215":"JsonUtilTest::::serializeComplexStructureStreamTest()","216":"JsonUtilTest::::serializeComplexStructureStreamTest()","217":"JsonUtilTest::::serializeComplexStructureStreamTest()","219":"JsonUtilTest::::serializeToMinimalComplexStructureStringTest()","220":"JsonUtilTest::::serializeToMinimalComplexStructureStringTest()","221":"JsonUtilTest::::serializeToMinimalComplexStructureStringTest()","222":"JsonUtilTest::::serializeToMinimalComplexStructureStringTest()","223":"JsonUtilTest::::serializeToMinimalComplexStructureStringTest()","224":"JsonUtilTest::::serializeToMinimalComplexStructureStringTest()","225":"JsonUtilTest::::serializeToMinimalComplexStructureStringTest()","226":"JsonUtilTest::::serializeToMinimalComplexStructureStringTest()","227":"JsonUtilTest::::serializeToMinimalComplexStructureStringTest()","228":"JsonUtilTest::::serializeToMinimalComplexStructureStringTest()","230":"JsonUtilTest::::serializeToMinimalComplexStructureStreamTest()","231":"JsonUtilTest::::serializeToMinimalComplexStructureStreamTest()","232":"JsonUtilTest::::serializeToMinimalComplexStructureStreamTest()","233":"JsonUtilTest::::serializeToMinimalComplexStructureStreamTest()","234":"JsonUtilTest::::serializeToMinimalComplexStructureStreamTest()","235":"JsonUtilTest::::serializeToMinimalComplexStructureStreamTest()","236":"JsonUtilTest::::serializeToMinimalComplexStructureStreamTest()","237":"JsonUtilTest::::serializeToMinimalComplexStructureStreamTest()","238":"JsonUtilTest::::serializeToMinimalComplexStructureStreamTest()","239":"JsonUtilTest::::serializeToMinimalComplexStructureStreamTest()","240":"JsonUtilTest::::serializeToMinimalComplexStructureStreamTest()","241":"JsonUtilTest::::serializeToMinimalComplexStructureStreamTest()","242":"JsonUtilTest::::serializeToMinimalComplexStructureStreamTest()","243":"JsonUtilTest::::serializeToMinimalComplexStructureStreamTest()","244":"JsonUtilTest::::serializeToMinimalComplexStructureStreamTest()","245":"JsonUtilTest::::serializeToMinimalComplexStructureStreamTest()","246":"JsonUtilTest::::serializeToMinimalComplexStructureStreamTest()","247":"JsonUtilTest::::serializeToMinimalComplexStructureStreamTest()","248":"JsonUtilTest::::serializeToMinimalComplexStructureStreamTest()","249":"JsonUtilTest::::serializeToMinimalComplexStructureStreamTest()","251":"JsonUtilTest::::serializeWithNullFieldsStringTest()","252":"JsonUtilTest::::serializeWithNullFieldsStringTest()","253":"JsonUtilTest::::serializeWithNullFieldsStringTest()","254":"JsonUtilTest::::serializeWithNullFieldsStringTest()","255":"JsonUtilTest::::serializeWithNullFieldsStringTest()","256":"JsonUtilTest::::serializeWithNullFieldsStringTest()","257":"JsonUtilTest::::serializeWithNullFieldsStringTest()","258":"JsonUtilTest::::serializeWithNullFieldsStringTest()","259":"JsonUtilTest::::serializeWithNullFieldsStringTest()","260":"JsonUtilTest::::serializeWithNullFieldsStringTest()","261":"JsonUtilTest::::serializeWithNullFieldsStringTest()","263":"JsonUtilTest::::serializeWithNullFieldsStreamTest()","264":"JsonUtilTest::::serializeWithNullFieldsStreamTest()","265":"JsonUtilTest::::serializeWithNullFieldsStreamTest()","266":"JsonUtilTest::::serializeWithNullFieldsStreamTest()","267":"JsonUtilTest::::serializeWithNullFieldsStreamTest()","268":"JsonUtilTest::::serializeWithNullFieldsStreamTest()","269":"JsonUtilTest::::serializeWithNullFieldsStreamTest()","270":"JsonUtilTest::::serializeWithNullFieldsStreamTest()","271":"JsonUtilTest::::serializeWithNullFieldsStreamTest()","272":"JsonUtilTest::::serializeWithNullFieldsStreamTest()","273":"JsonUtilTest::::serializeWithNullFieldsStreamTest()","274":"JsonUtilTest::::serializeWithNullFieldsStreamTest()","275":"JsonUtilTest::::serializeWithNullFieldsStreamTest()","277":"JsonUtilTest::::serializeToMinimalWithNullFieldsStringTest()","278":"JsonUtilTest::::serializeToMinimalWithNullFieldsStringTest()","279":"JsonUtilTest::::serializeToMinimalWithNullFieldsStringTest()","280":"JsonUtilTest::::serializeToMinimalWithNullFieldsStringTest()","281":"JsonUtilTest::::serializeToMinimalWithNullFieldsStringTest()","282":"JsonUtilTest::::serializeToMinimalWithNullFieldsStringTest()","283":"JsonUtilTest::::serializeToMinimalWithNullFieldsStringTest()","284":"JsonUtilTest::::serializeToMinimalWithNullFieldsStringTest()","285":"JsonUtilTest::::serializeToMinimalWithNullFieldsStringTest()","286":"JsonUtilTest::::serializeToMinimalWithNullFieldsStringTest()","287":"JsonUtilTest::::serializeToMinimalWithNullFieldsStringTest()","289":"JsonUtilTest::::serializeToMinimalWithNullFieldsStreamTest()","290":"JsonUtilTest::::serializeToMinimalWithNullFieldsStreamTest()","291":"JsonUtilTest::::serializeToMinimalWithNullFieldsStreamTest()","292":"JsonUtilTest::::serializeToMinimalWithNullFieldsStreamTest()","293":"JsonUtilTest::::serializeToMinimalWithNullFieldsStreamTest()","294":"JsonUtilTest::::serializeToMinimalWithNullFieldsStreamTest()","295":"JsonUtilTest::::serializeToMinimalWithNullFieldsStreamTest()","296":"JsonUtilTest::::serializeToMinimalWithNullFieldsStreamTest()","297":"JsonUtilTest::::serializeToMinimalWithNullFieldsStreamTest()","298":"JsonUtilTest::::serializeToMinimalWithNullFieldsStreamTest()","299":"JsonUtilTest::::serializeToMinimalWithNullFieldsStreamTest()","300":"JsonUtilTest::::serializeToMinimalWithNullFieldsStreamTest()","301":"JsonUtilTest::::serializeToMinimalWithNullFieldsStreamTest()","303":"JsonUtilTest::::deserializeInvalidJsonFileStringTest()","304":"JsonUtilTest::::deserializeInvalidJsonFileStringTest()","305":"JsonUtilTest::::deserializeInvalidJsonFileStringTest()","306":"JsonUtilTest::::deserializeInvalidJsonFileStringTest()","307":"JsonUtilTest::::deserializeInvalidJsonFileStringTest()","308":"JsonUtilTest::::deserializeInvalidJsonFileStringTest()","309":"JsonUtilTest::::deserializeInvalidJsonFileStringTest()","310":"JsonUtilTest::::deserializeInvalidJsonFileStringTest()","311":"JsonUtilTest::::deserializeInvalidJsonFileStringTest()","312":"JsonUtilTest::::deserializeInvalidJsonFileStringTest()","313":"JsonUtilTest::::deserializeInvalidJsonFileStringTest()","314":"JsonUtilTest::::deserializeInvalidJsonFileStringTest()","315":"JsonUtilTest::::deserializeInvalidJsonFileStringTest()","317":"JsonUtilTest::::deserializeInvalidJsonFileStreamTest()","318":"JsonUtilTest::::deserializeInvalidJsonFileStreamTest()","319":"JsonUtilTest::::deserializeInvalidJsonFileStreamTest()","320":"JsonUtilTest::::deserializeInvalidJsonFileStreamTest()","321":"JsonUtilTest::::deserializeInvalidJsonFileStreamTest()","322":"JsonUtilTest::::deserializeInvalidJsonFileStreamTest()","323":"JsonUtilTest::::deserializeInvalidJsonFileStreamTest()","324":"JsonUtilTest::::deserializeInvalidJsonFileStreamTest()","325":"JsonUtilTest::::deserializeInvalidJsonFileStreamTest()","326":"JsonUtilTest::::deserializeInvalidJsonFileStreamTest()","327":"JsonUtilTest::::deserializeInvalidJsonFileStreamTest()","328":"JsonUtilTest::::deserializeInvalidJsonFileStreamTest()","329":"JsonUtilTest::::deserializeInvalidJsonFileStreamTest()","331":"JsonUtilTest::::deserializeWithDefaultValueStringTest()","332":"JsonUtilTest::::deserializeWithDefaultValueStringTest()","333":"JsonUtilTest::::deserializeWithDefaultValueStringTest()","334":"JsonUtilTest::::deserializeWithDefaultValueStringTest()","335":"JsonUtilTest::::deserializeWithDefaultValueStringTest()","336":"JsonUtilTest::::deserializeWithDefaultValueStringTest()","337":"JsonUtilTest::::deserializeWithDefaultValueStringTest()","338":"JsonUtilTest::::deserializeWithDefaultValueStringTest()","339":"JsonUtilTest::::deserializeWithDefaultValueStringTest()","340":"JsonUtilTest::::deserializeWithDefaultValueStringTest()","342":"JsonUtilTest::::deserializeWithDefaultValueStreamTest()","343":"JsonUtilTest::::deserializeWithDefaultValueStreamTest()","344":"JsonUtilTest::::deserializeWithDefaultValueStreamTest()","345":"JsonUtilTest::::deserializeWithDefaultValueStreamTest()","346":"JsonUtilTest::::deserializeWithDefaultValueStreamTest()","347":"JsonUtilTest::::deserializeWithDefaultValueStreamTest()","348":"JsonUtilTest::::deserializeWithDefaultValueStreamTest()","349":"JsonUtilTest::::deserializeWithDefaultValueStreamTest()","350":"JsonUtilTest::::deserializeWithDefaultValueStreamTest()","351":"JsonUtilTest::::deserializeWithDefaultValueStreamTest()","353":"JsonUtilTest::::deserializeComplexStructureStringTest()","354":"JsonUtilTest::::deserializeComplexStructureStringTest()","355":"JsonUtilTest::::deserializeComplexStructureStringTest()","356":"JsonUtilTest::::deserializeComplexStructureStringTest()","357":"JsonUtilTest::::deserializeComplexStructureStringTest()","358":"JsonUtilTest::::deserializeComplexStructureStringTest()","359":"JsonUtilTest::::deserializeComplexStructureStringTest()","360":"JsonUtilTest::::deserializeComplexStructureStringTest()","361":"JsonUtilTest::::deserializeComplexStructureStringTest()","362":"JsonUtilTest::::deserializeComplexStructureStringTest()","363":"JsonUtilTest::::deserializeComplexStructureStringTest()","365":"JsonUtilTest::::deserializeComplexStructureStreamTest()","366":"JsonUtilTest::::deserializeComplexStructureStreamTest()","367":"JsonUtilTest::::deserializeComplexStructureStreamTest()","368":"JsonUtilTest::::deserializeComplexStructureStreamTest()","369":"JsonUtilTest::::deserializeComplexStructureStreamTest()","370":"JsonUtilTest::::deserializeComplexStructureStreamTest()","371":"JsonUtilTest::::deserializeComplexStructureStreamTest()","372":"JsonUtilTest::::deserializeComplexStructureStreamTest()","373":"JsonUtilTest::::deserializeComplexStructureStreamTest()","374":"JsonUtilTest::::deserializeComplexStructureStreamTest()","375":"JsonUtilTest::::deserializeComplexStructureStreamTest()","377":"JsonUtilTest::::deserializeInstanceWithEnumStringTest()","378":"JsonUtilTest::::deserializeInstanceWithEnumStringTest()","379":"JsonUtilTest::::deserializeInstanceWithEnumStringTest()","380":"JsonUtilTest::::deserializeInstanceWithEnumStringTest()","381":"JsonUtilTest::::deserializeInstanceWithEnumStringTest()","382":"JsonUtilTest::::deserializeInstanceWithEnumStringTest()","383":"JsonUtilTest::::deserializeInstanceWithEnumStringTest()","384":"JsonUtilTest::::deserializeInstanceWithEnumStringTest()","385":"JsonUtilTest::::deserializeInstanceWithEnumStringTest()","386":"JsonUtilTest::::deserializeInstanceWithEnumStringTest()","388":"JsonUtilTest::::deserializeInstanceWithEnumStreamTest()","389":"JsonUtilTest::::deserializeInstanceWithEnumStreamTest()","390":"JsonUtilTest::::deserializeInstanceWithEnumStreamTest()","391":"JsonUtilTest::::deserializeInstanceWithEnumStreamTest()","392":"JsonUtilTest::::deserializeInstanceWithEnumStreamTest()","393":"JsonUtilTest::::deserializeInstanceWithEnumStreamTest()","394":"JsonUtilTest::::deserializeInstanceWithEnumStreamTest()","395":"JsonUtilTest::::deserializeInstanceWithEnumStreamTest()","396":"JsonUtilTest::::deserializeInstanceWithEnumStreamTest()","397":"JsonUtilTest::::deserializeInstanceWithEnumStreamTest()","398":"JsonUtilTest::::deserializeInstanceWithEnumStreamTest()","400":"JsonUtilTest::::deserializeWithUnknownPropertiesStringTest()","401":"JsonUtilTest::::deserializeWithUnknownPropertiesStringTest()","402":"JsonUtilTest::::deserializeWithUnknownPropertiesStringTest()","403":"JsonUtilTest::::deserializeWithUnknownPropertiesStringTest()","404":"JsonUtilTest::::deserializeWithUnknownPropertiesStringTest()","405":"JsonUtilTest::::deserializeWithUnknownPropertiesStringTest()","406":"JsonUtilTest::::deserializeWithUnknownPropertiesStringTest()","407":"JsonUtilTest::::deserializeWithUnknownPropertiesStringTest()","408":"JsonUtilTest::::deserializeWithUnknownPropertiesStringTest()","409":"JsonUtilTest::::deserializeWithUnknownPropertiesStringTest()","410":"JsonUtilTest::::deserializeWithUnknownPropertiesStringTest()","411":"JsonUtilTest::::deserializeWithUnknownPropertiesStringTest()","413":"JsonUtilTest::::deserializeWithUnknownPropertiesStreamTest()","414":"JsonUtilTest::::deserializeWithUnknownPropertiesStreamTest()","415":"JsonUtilTest::::deserializeWithUnknownPropertiesStreamTest()","416":"JsonUtilTest::::deserializeWithUnknownPropertiesStreamTest()","417":"JsonUtilTest::::deserializeWithUnknownPropertiesStreamTest()","418":"JsonUtilTest::::deserializeWithUnknownPropertiesStreamTest()","419":"JsonUtilTest::::deserializeWithUnknownPropertiesStreamTest()","420":"JsonUtilTest::::deserializeWithUnknownPropertiesStreamTest()","421":"JsonUtilTest::::deserializeWithUnknownPropertiesStreamTest()","422":"JsonUtilTest::::deserializeWithUnknownPropertiesStreamTest()","423":"JsonUtilTest::::deserializeWithUnknownPropertiesStreamTest()","424":"JsonUtilTest::::deserializeWithUnknownPropertiesStreamTest()","425":"JsonUtilTest::::deserializeWithUnknownPropertiesStreamTest()","427":"JsonUtilTest::::deserializeWithDefaultValueTypeReferenceStreamTest()","428":"JsonUtilTest::::deserializeWithDefaultValueTypeReferenceStreamTest()","429":"JsonUtilTest::::deserializeWithDefaultValueTypeReferenceStreamTest()","430":"JsonUtilTest::::deserializeWithDefaultValueTypeReferenceStreamTest()","431":"JsonUtilTest::::deserializeWithDefaultValueTypeReferenceStreamTest()","432":"JsonUtilTest::::deserializeWithDefaultValueTypeReferenceStreamTest()","433":"JsonUtilTest::::deserializeWithDefaultValueTypeReferenceStreamTest()","434":"JsonUtilTest::::deserializeWithDefaultValueTypeReferenceStreamTest()","435":"JsonUtilTest::::deserializeWithDefaultValueTypeReferenceStreamTest()","436":"JsonUtilTest::::deserializeWithDefaultValueTypeReferenceStreamTest()","437":"JsonUtilTest::::deserializeWithDefaultValueTypeReferenceStreamTest()","438":"JsonUtilTest::::deserializeWithDefaultValueTypeReferenceStreamTest()","440":"JsonUtilTest::::deserializeWithDefaultValueTypeReferenceStringTest()","441":"JsonUtilTest::::deserializeWithDefaultValueTypeReferenceStringTest()","442":"JsonUtilTest::::deserializeWithDefaultValueTypeReferenceStringTest()","443":"JsonUtilTest::::deserializeWithDefaultValueTypeReferenceStringTest()","444":"JsonUtilTest::::deserializeWithDefaultValueTypeReferenceStringTest()","445":"JsonUtilTest::::deserializeWithDefaultValueTypeReferenceStringTest()","446":"JsonUtilTest::::deserializeWithDefaultValueTypeReferenceStringTest()","447":"JsonUtilTest::::deserializeWithDefaultValueTypeReferenceStringTest()","448":"JsonUtilTest::::deserializeWithDefaultValueTypeReferenceStringTest()","449":"JsonUtilTest::::deserializeWithDefaultValueTypeReferenceStringTest()","450":"JsonUtilTest::::deserializeWithDefaultValueTypeReferenceStringTest()","451":"JsonUtilTest::::deserializeWithDefaultValueTypeReferenceStringTest()","453":"JsonUtilTest::::getJsonStringFromFile(java.lang.String)","454":"JsonUtilTest::::getJsonStringFromFile(java.lang.String)","455":"JsonUtilTest::::getJsonStringFromFile(java.lang.String)","456":"JsonUtilTest::::getJsonStringFromFile(java.lang.String)","457":"JsonUtilTest::::getJsonStringFromFile(java.lang.String)","458":"JsonUtilTest::::getJsonStringFromFile(java.lang.String)","460":"JsonUtilTest::::convertInputStreamToOutput(java.io.InputStream)","461":"JsonUtilTest::::convertInputStreamToOutput(java.io.InputStream)","462":"JsonUtilTest::::convertInputStreamToOutput(java.io.InputStream)","463":"JsonUtilTest::::convertInputStreamToOutput(java.io.InputStream)","464":"JsonUtilTest::::convertInputStreamToOutput(java.io.InputStream)","465":"JsonUtilTest::::convertInputStreamToOutput(java.io.InputStream)","466":"JsonUtilTest::::convertInputStreamToOutput(java.io.InputStream)","467":"JsonUtilTest::::convertInputStreamToOutput(java.io.InputStream)","468":"JsonUtilTest::::convertInputStreamToOutput(java.io.InputStream)","469":"JsonUtilTest::::convertInputStreamToOutput(java.io.InputStream)","471":"JsonUtilTest::::createComplexStructureObject()","472":"JsonUtilTest::::createComplexStructureObject()","473":"JsonUtilTest::::createComplexStructureObject()","474":"JsonUtilTest::::createComplexStructureObject()","475":"JsonUtilTest::::createComplexStructureObject()","476":"JsonUtilTest::::createComplexStructureObject()","477":"JsonUtilTest::::createComplexStructureObject()","478":"JsonUtilTest::::createComplexStructureObject()","479":"JsonUtilTest::::createComplexStructureObject()","480":"JsonUtilTest::::createComplexStructureObject()","481":"JsonUtilTest::::createComplexStructureObject()","482":"JsonUtilTest::::createComplexStructureObject()","483":"JsonUtilTest::::createComplexStructureObject()","484":"JsonUtilTest::::createComplexStructureObject()","485":"JsonUtilTest::::createComplexStructureObject()","486":"JsonUtilTest::::createComplexStructureObject()","488":"JsonUtilTest::::createClassWithDefaultValueObject(java.lang.String,int,java.lang.Double)","489":"JsonUtilTest::::createClassWithDefaultValueObject(java.lang.String,int,java.lang.Double)","490":"JsonUtilTest::::createClassWithDefaultValueObject(java.lang.String,int,java.lang.Double)","491":"JsonUtilTest::::createClassWithDefaultValueObject(java.lang.String,int,java.lang.Double)","493":"JsonUtilTest::::createClassWithEnumObject()","494":"JsonUtilTest::::createClassWithEnumObject()","495":"JsonUtilTest::::createClassWithEnumObject()","496":"JsonUtilTest::::createClassWithEnumObject()","497":"JsonUtilTest::::createClassWithEnumObject()","498":"JsonUtilTest::::createClassWithEnumObject()","499":"JsonUtilTest::::createClassWithEnumObject()","501":"JsonUtilTest::::createStringWithLineBreaks()","502":"JsonUtilTest::::createStringWithLineBreaks()","503":"JsonUtilTest::::createStringWithLineBreaks()","511":"JsonUtilTest.ComplexStructure::::equals(java.lang.Object)","512":"JsonUtilTest.ComplexStructure::::equals(java.lang.Object)","513":"JsonUtilTest.ComplexStructure::::equals(java.lang.Object)","514":"JsonUtilTest.ComplexStructure::::equals(java.lang.Object)","515":"JsonUtilTest.ComplexStructure::::equals(java.lang.Object)","516":"JsonUtilTest.ComplexStructure::::equals(java.lang.Object)","517":"JsonUtilTest.ComplexStructure::::equals(java.lang.Object)","518":"JsonUtilTest.ComplexStructure::::equals(java.lang.Object)","519":"JsonUtilTest.ComplexStructure::::equals(java.lang.Object)","520":"JsonUtilTest.ComplexStructure::::equals(java.lang.Object)","521":"JsonUtilTest.ComplexStructure::::equals(java.lang.Object)","522":"JsonUtilTest.ComplexStructure::::equals(java.lang.Object)","523":"JsonUtilTest.ComplexStructure::::equals(java.lang.Object)","525":"JsonUtilTest.ComplexStructure::::hashCode()","526":"JsonUtilTest.ComplexStructure::::hashCode()","527":"JsonUtilTest.ComplexStructure::::hashCode()","528":"JsonUtilTest.ComplexStructure::::hashCode()","529":"JsonUtilTest.ComplexStructure::::hashCode()","530":"JsonUtilTest.ComplexStructure::::hashCode()","531":"JsonUtilTest.ComplexStructure::::hashCode()","538":"JsonUtilTest.ChildInComplexStructure::::equals(java.lang.Object)","539":"JsonUtilTest.ChildInComplexStructure::::equals(java.lang.Object)","540":"JsonUtilTest.ChildInComplexStructure::::equals(java.lang.Object)","541":"JsonUtilTest.ChildInComplexStructure::::equals(java.lang.Object)","542":"JsonUtilTest.ChildInComplexStructure::::equals(java.lang.Object)","543":"JsonUtilTest.ChildInComplexStructure::::equals(java.lang.Object)","544":"JsonUtilTest.ChildInComplexStructure::::equals(java.lang.Object)","545":"JsonUtilTest.ChildInComplexStructure::::equals(java.lang.Object)","546":"JsonUtilTest.ChildInComplexStructure::::equals(java.lang.Object)","547":"JsonUtilTest.ChildInComplexStructure::::equals(java.lang.Object)","548":"JsonUtilTest.ChildInComplexStructure::::equals(java.lang.Object)","549":"JsonUtilTest.ChildInComplexStructure::::equals(java.lang.Object)","551":"JsonUtilTest.ChildInComplexStructure::::hashCode()","552":"JsonUtilTest.ChildInComplexStructure::::hashCode()","553":"JsonUtilTest.ChildInComplexStructure::::hashCode()","554":"JsonUtilTest.ChildInComplexStructure::::hashCode()","555":"JsonUtilTest.ChildInComplexStructure::::hashCode()","556":"JsonUtilTest.ChildInComplexStructure::::hashCode()","564":"JsonUtilTest.GrandsonComplexStructure::::equals(java.lang.Object)","565":"JsonUtilTest.GrandsonComplexStructure::::equals(java.lang.Object)","566":"JsonUtilTest.GrandsonComplexStructure::::equals(java.lang.Object)","567":"JsonUtilTest.GrandsonComplexStructure::::equals(java.lang.Object)","568":"JsonUtilTest.GrandsonComplexStructure::::equals(java.lang.Object)","569":"JsonUtilTest.GrandsonComplexStructure::::equals(java.lang.Object)","570":"JsonUtilTest.GrandsonComplexStructure::::equals(java.lang.Object)","571":"JsonUtilTest.GrandsonComplexStructure::::equals(java.lang.Object)","572":"JsonUtilTest.GrandsonComplexStructure::::equals(java.lang.Object)","573":"JsonUtilTest.GrandsonComplexStructure::::equals(java.lang.Object)","574":"JsonUtilTest.GrandsonComplexStructure::::equals(java.lang.Object)","575":"JsonUtilTest.GrandsonComplexStructure::::equals(java.lang.Object)","577":"JsonUtilTest.GrandsonComplexStructure::::hashCode()","578":"JsonUtilTest.GrandsonComplexStructure::::hashCode()","579":"JsonUtilTest.GrandsonComplexStructure::::hashCode()","580":"JsonUtilTest.GrandsonComplexStructure::::hashCode()","581":"JsonUtilTest.GrandsonComplexStructure::::hashCode()","582":"JsonUtilTest.GrandsonComplexStructure::::hashCode()","589":"JsonUtilTest.ClassWithEnum::::equals(java.lang.Object)","590":"JsonUtilTest.ClassWithEnum::::equals(java.lang.Object)","591":"JsonUtilTest.ClassWithEnum::::equals(java.lang.Object)","592":"JsonUtilTest.ClassWithEnum::::equals(java.lang.Object)","593":"JsonUtilTest.ClassWithEnum::::equals(java.lang.Object)","594":"JsonUtilTest.ClassWithEnum::::equals(java.lang.Object)","595":"JsonUtilTest.ClassWithEnum::::equals(java.lang.Object)","596":"JsonUtilTest.ClassWithEnum::::equals(java.lang.Object)","597":"JsonUtilTest.ClassWithEnum::::equals(java.lang.Object)","598":"JsonUtilTest.ClassWithEnum::::equals(java.lang.Object)","599":"JsonUtilTest.ClassWithEnum::::equals(java.lang.Object)","601":"JsonUtilTest.ClassWithEnum::::hashCode()","602":"JsonUtilTest.ClassWithEnum::::hashCode()","603":"JsonUtilTest.ClassWithEnum::::hashCode()","604":"JsonUtilTest.ClassWithEnum::::hashCode()","605":"JsonUtilTest.ClassWithEnum::::hashCode()","606":"JsonUtilTest.ClassWithEnum::::hashCode()","634":"JsonUtilTest.ClassWithDefaultValue::::equals(java.lang.Object)","635":"JsonUtilTest.ClassWithDefaultValue::::equals(java.lang.Object)","636":"JsonUtilTest.ClassWithDefaultValue::::equals(java.lang.Object)","637":"JsonUtilTest.ClassWithDefaultValue::::equals(java.lang.Object)","638":"JsonUtilTest.ClassWithDefaultValue::::equals(java.lang.Object)","639":"JsonUtilTest.ClassWithDefaultValue::::equals(java.lang.Object)","640":"JsonUtilTest.ClassWithDefaultValue::::equals(java.lang.Object)","641":"JsonUtilTest.ClassWithDefaultValue::::equals(java.lang.Object)","642":"JsonUtilTest.ClassWithDefaultValue::::equals(java.lang.Object)","643":"JsonUtilTest.ClassWithDefaultValue::::equals(java.lang.Object)","644":"JsonUtilTest.ClassWithDefaultValue::::equals(java.lang.Object)","645":"JsonUtilTest.ClassWithDefaultValue::::equals(java.lang.Object)","647":"JsonUtilTest.ClassWithDefaultValue::::hashCode()","648":"JsonUtilTest.ClassWithDefaultValue::::hashCode()","649":"JsonUtilTest.ClassWithDefaultValue::::hashCode()","650":"JsonUtilTest.ClassWithDefaultValue::::hashCode()","651":"JsonUtilTest.ClassWithDefaultValue::::hashCode()","652":"JsonUtilTest.ClassWithDefaultValue::::hashCode()","653":"JsonUtilTest.ClassWithDefaultValue::::hashCode()","654":"JsonUtilTest.ClassWithDefaultValue::::hashCode()"},"tests":[{"test_lines":[62,65],"covered_lines":[49,92,223,224,226,227,228,258,271,272,273,274,275,279]},{"test_lines":[67,73],"covered_lines":[49,81,82,223,224,226,227,228,241,245,246,271,272,273,274,275,279]},{"test_lines":[75,84],"covered_lines":[49,66,68,69,71,92,223,224,226,227,228,258,271,272,273,274,275,279]},{"test_lines":[86,105],"covered_lines":[49,81,82,223,224,226,227,228,241,245,246,271,272,273,274,275,279]},{"test_lines":[107,116],"covered_lines":[49,66,68,69,71,114,223,224,226,227,228,258,288,289,290,291,292,296]},{"test_lines":[118,137],"covered_lines":[49,102,103,223,224,226,227,228,241,245,246,288,289,290,291,292,296]},{"test_lines":[139,148],"covered_lines":[49,92,223,224,226,227,228,258,271,272,273,274,275,279]},{"test_lines":[150,161],"covered_lines":[49,81,82,223,224,226,227,228,241,245,246,271,272,273,274,275,279]},{"test_lines":[163,172],"covered_lines":[49,114,223,224,226,227,228,258,288,289,290,291,292,296]},{"test_lines":[174,185],"covered_lines":[49,102,103,223,224,226,227,228,241,245,246,288,289,290,291,292,296]},{"test_lines":[187,196],"covered_lines":[49,66,68,69,71,92,223,224,226,227,228,258,271,272,273,274,275,279]},{"test_lines":[198,217],"covered_lines":[49,81,82,223,224,226,227,228,241,245,246,271,272,273,274,275,279]},{"test_lines":[219,228],"covered_lines":[49,66,68,69,71,114,223,224,226,227,228,258,288,289,290,291,292,296]},{"test_lines":[230,249],"covered_lines":[49,102,103,223,224,226,227,228,241,245,246,288,289,290,291,292,296]},{"test_lines":[251,261],"covered_lines":[49,66,68,69,71,92,223,224,226,227,228,258,271,272,273,274,275,279]},{"test_lines":[263,275],"covered_lines":[49,81,82,223,224,226,227,228,241,245,246,271,272,273,274,275,279]},{"test_lines":[277,287],"covered_lines":[49,66,68,69,71,114,223,224,226,227,228,258,288,289,290,291,292,296]},{"test_lines":[289,301],"covered_lines":[49,102,103,223,224,226,227,228,241,245,246,288,289,290,291,292,296]},{"test_lines":[303,315],"covered_lines":[49,176,177,204,205,208,209,210,211]},{"test_lines":[317,329],"covered_lines":[49,127,128,155,156,159,160,161,162]},{"test_lines":[331,340],"covered_lines":[49,176,177,204,205,207]},{"test_lines":[342,351],"covered_lines":[49,127,128,155,156,158]},{"test_lines":[353,363],"covered_lines":[49,176,177,204,205,207]},{"test_lines":[365,375],"covered_lines":[49,127,128,155,156,158]},{"test_lines":[377,386],"covered_lines":[49,176,177,204,205,207]},{"test_lines":[388,398],"covered_lines":[49,127,128,155,156,158]},{"test_lines":[400,411],"covered_lines":[49,176,177,204,205,207]},{"test_lines":[413,425],"covered_lines":[49,127,128,155,156,158]},{"test_lines":[427,438],"covered_lines":[49,141,142,155,156,158]},{"test_lines":[440,451],"covered_lines":[49,190,191,204,205,207]}]},"/bernard/dataset_construction/prep/repos/itext-java/commons/src/main/java/com/itextpdf/commons/utils/ZipFileReader.java":{"class_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.utils;\n","\n","import com.itextpdf.commons.exceptions.CommonsExceptionMessageConstant;\n","import com.itextpdf.commons.logs.CommonsLogMessageConstant;\n","\n","import java.io.BufferedInputStream;\n","import java.io.Closeable;\n","import java.io.IOException;\n","import java.io.InputStream;\n","import java.nio.charset.StandardCharsets;\n","import java.util.Enumeration;\n","import java.util.HashSet;\n","import java.util.Set;\n","import java.util.zip.ZipEntry;\n","import java.util.zip.ZipFile;\n","import org.slf4j.Logger;\n","import org.slf4j.LoggerFactory;\n","\n","/**\n"," * Allows reading entries from a zip file.\n"," */\n","public class ZipFileReader implements Closeable {\n","    private static final Logger LOGGER = LoggerFactory.getLogger(ZipFileReader.class);\n","\n","    private final ZipFile zipFile;\n","\n","    private int thresholdSize = 1_000_000_000;\n","    private int thresholdEntries = 10000;\n","    private double thresholdRatio = 10;\n","\n","    /**\n","     * Creates an instance for zip file reading.\n","     *\n","     * @param archivePath the path to the zip file to read\n","     *\n","     * @throws IOException if some I/O exception occurs\n","     */\n","    public ZipFileReader(String archivePath) throws IOException {\n","        if (archivePath == null) {\n","            throw new IOException(CommonsExceptionMessageConstant.FILE_NAME_CAN_NOT_BE_NULL);\n","        }\n","        zipFile = new ZipFile(archivePath, StandardCharsets.UTF_8);\n","    }\n","\n","    /**\n","     * Get all file entries paths inside the reading zip file.\n","     *\n","     * @return the {@link Set} of all file entries paths\n","     *\n","     * @throws IOException if some I/O exception occurs\n","     */\n","    public Set<String> getFileNames() throws IOException {\n","        final Set<String> fileNames = new HashSet<>();\n","\n","        final Enumeration<? extends ZipEntry> entries = zipFile.entries();\n","\n","        int totalSizeArchive = 0;\n","        int totalEntryArchive = 0;\n","        while (entries.hasMoreElements()) {\n","            ZipEntry entry = entries.nextElement();\n","            boolean zipBombSuspicious = false;\n","            try (InputStream in = new BufferedInputStream(zipFile.getInputStream(entry))) {\n","                totalEntryArchive++;\n","                int nBytes;\n","                byte[] buffer = new byte[2048];\n","                int totalSizeEntry = 0;\n","                while ((nBytes = in.read(buffer)) > 0) {\n","                    totalSizeEntry += nBytes;\n","                    totalSizeArchive += nBytes;\n","                    double compressionRatio = (double) totalSizeEntry / entry.getCompressedSize();\n","                    if (compressionRatio > thresholdRatio) {\n","                        zipBombSuspicious = true;\n","                        break;\n","                    }\n","                }\n","                if (zipBombSuspicious) {\n","                    LOGGER.warn(MessageFormatUtil.format(CommonsLogMessageConstant.RATIO_IS_HIGHLY_SUSPICIOUS,\n","                            thresholdRatio));\n","                    break;\n","                }\n","                if (totalSizeArchive > thresholdSize) {\n","                    LOGGER.warn(MessageFormatUtil.format(CommonsLogMessageConstant.UNCOMPRESSED_DATA_SIZE_IS_TOO_MUCH,\n","                            thresholdSize));\n","                    break;\n","                }\n","                if (totalEntryArchive > thresholdEntries) {\n","                    LOGGER.warn(MessageFormatUtil.format(CommonsLogMessageConstant.TOO_MUCH_ENTRIES_IN_ARCHIVE,\n","                            thresholdEntries));\n","                    break;\n","                }\n","            }\n","            if (!entry.isDirectory()) {\n","                fileNames.add(entry.getName());\n","            }\n","        }\n","        return fileNames;\n","    }\n","\n","    /**\n","     * Read single file from zip.\n","     *\n","     * @param fileName the file path inside zip to read\n","     *\n","     * @return the {@link InputStream} represents read file content\n","     *\n","     * @throws IOException if some I/O exception occurs\n","     */\n","    public InputStream readFromZip(String fileName) throws IOException {\n","        if (fileName == null) {\n","            throw new IOException(CommonsExceptionMessageConstant.FILE_NAME_CAN_NOT_BE_NULL);\n","        }\n","        ZipEntry entry = zipFile.getEntry(fileName);\n","        if (entry == null || entry.isDirectory()) {\n","            throw new IOException(MessageFormatUtil.format(\n","                    CommonsExceptionMessageConstant.ZIP_ENTRY_NOT_FOUND, fileName));\n","        }\n","        return zipFile.getInputStream(entry);\n","    }\n","\n","    /**\n","     * Sets the maximum total uncompressed data size to prevent a Zip Bomb Attack. Default value is 1 GB (1000000000).\n","     *\n","     * @param thresholdSize the threshold for maximum total size of the uncompressed data\n","     */\n","    public void setThresholdSize(int thresholdSize) {\n","        this.thresholdSize = thresholdSize;\n","    }\n","\n","    /**\n","     * Sets the maximum number of file entries in the archive to prevent a Zip Bomb Attack. Default value is 10000.\n","     *\n","     * @param thresholdEntries maximum number of file entries in the archive\n","     */\n","    public void setThresholdEntries(int thresholdEntries) {\n","        this.thresholdEntries = thresholdEntries;\n","    }\n","\n","    /**\n","     * Sets the maximum ratio between compressed and uncompressed data to prevent a Zip Bomb Attack. In general\n","     * the data compression ratio for most of the legit archives is 1 to 3. Default value is 10.\n","     *\n","     * @param thresholdRatio maximum ratio between compressed and uncompressed data\n","     */\n","    public void setThresholdRatio(double thresholdRatio) {\n","        this.thresholdRatio = thresholdRatio;\n","    }\n","\n","    @Override\n","    public void close() throws IOException {\n","        zipFile.close();\n","    }\n","}\n"],"test_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.utils;\n","\n","import com.itextpdf.commons.exceptions.CommonsExceptionMessageConstant;\n","import com.itextpdf.commons.logs.CommonsLogMessageConstant;\n","import com.itextpdf.test.ExtendedITextTest;\n","import com.itextpdf.test.annotations.LogMessage;\n","import com.itextpdf.test.annotations.LogMessages;\n","import com.itextpdf.test.annotations.type.UnitTest;\n","\n","import java.io.ByteArrayOutputStream;\n","import java.io.IOException;\n","import java.io.InputStream;\n","import java.util.Set;\n","import org.junit.Assert;\n","import org.junit.Test;\n","import org.junit.experimental.categories.Category;\n","\n","@Category(UnitTest.class)\n","public class ZipFileReaderTest extends ExtendedITextTest {\n","    private static final String SOURCE_FOLDER = \"./src/test/resources/com/itextpdf/commons/utils/ZipFileReaderTest/\";\n","\n","    @Test\n","    public void constructorWithNullPathTest() {\n","        Exception ex = Assert.assertThrows(IOException.class, () -> new ZipFileReader(null));\n","        Assert.assertEquals(CommonsExceptionMessageConstant.FILE_NAME_CAN_NOT_BE_NULL, ex.getMessage());\n","    }\n","\n","    @Test\n","    public void constructorWithInvalidPathTest() {\n","        Assert.assertThrows(Exception.class, () -> new ZipFileReader(\"invalidPath\"));\n","    }\n","\n","    @Test\n","    public void constructorWithNonZipPathTest() {\n","        Assert.assertThrows(Exception.class, () -> new ZipFileReader(SOURCE_FOLDER + \"firstFile.txt\"));\n","    }\n","\n","    @Test\n","    // Android-Conversion-Ignore-Test (TODO DEVSIX-6906 fix different behavior of ZipFileWriter\\Reader)\n","    public void getFileNamesFromEmptyZipTest() throws IOException {\n","        try (ZipFileReader fileReader = new ZipFileReader(SOURCE_FOLDER + \"emptyZip.zip\")) {\n","            Set<String> nameSet = fileReader.getFileNames();\n","\n","            Assert.assertTrue(nameSet.isEmpty());\n","        }\n","    }\n","\n","    @Test\n","    public void getFileNamesFromZipTest() throws IOException {\n","        try (ZipFileReader fileReader = new ZipFileReader(SOURCE_FOLDER + \"archive.zip\")) {\n","            Set<String> nameSet = fileReader.getFileNames();\n","\n","            Assert.assertNotNull(nameSet);\n","            Assert.assertEquals(6, nameSet.size());\n","            Assert.assertTrue(nameSet.contains(\"firstFile.txt\"));\n","            Assert.assertTrue(nameSet.contains(\"secondFile.txt\"));\n","            Assert.assertTrue(nameSet.contains(\"subfolder/thirdFile.txt\"));\n","            Assert.assertTrue(nameSet.contains(\"subfolder/fourthFile.txt\"));\n","            Assert.assertTrue(nameSet.contains(\"subfolder/subsubfolder/fifthFile.txt\"));\n","            Assert.assertTrue(nameSet.contains(\"subfolder/subsubfolder/sixthFile.txt\"));\n","        }\n","    }\n","\n","    @Test\n","    @LogMessages(messages = @LogMessage(messageTemplate = CommonsLogMessageConstant.UNCOMPRESSED_DATA_SIZE_IS_TOO_MUCH))\n","    public void getFileNamesFromZipBombBySettingThresholdSizeTest() throws IOException {\n","        try (ZipFileReader fileReader = new ZipFileReader(SOURCE_FOLDER + \"zipBombTest.zip\")) {\n","            fileReader.setThresholdRatio(1000);\n","            fileReader.setThresholdSize(10000);\n","            Set<String> nameSet = fileReader.getFileNames();\n","\n","            Assert.assertNotNull(nameSet);\n","            Assert.assertEquals(0, nameSet.size());\n","        }\n","    }\n","\n","    @Test\n","    @LogMessages(messages = @LogMessage(messageTemplate = CommonsLogMessageConstant.RATIO_IS_HIGHLY_SUSPICIOUS))\n","    public void getFileNamesFromZipBombBySettingThresholdRatioTest() throws IOException {\n","        try (ZipFileReader fileReader = new ZipFileReader(SOURCE_FOLDER + \"zipBombTest.zip\")) {\n","            fileReader.setThresholdRatio(5);\n","            Set<String> nameSet = fileReader.getFileNames();\n","\n","            Assert.assertNotNull(nameSet);\n","            Assert.assertEquals(0, nameSet.size());\n","        }\n","    }\n","\n","    @Test\n","    @LogMessages(messages = @LogMessage(messageTemplate = CommonsLogMessageConstant.TOO_MUCH_ENTRIES_IN_ARCHIVE))\n","    public void getFileNamesFromZipBombBySettingThresholdEntriesTest() throws IOException {\n","        try (ZipFileReader fileReader = new ZipFileReader(SOURCE_FOLDER + \"archive.zip\")) {\n","            fileReader.setThresholdEntries(5);\n","            Set<String> nameSet = fileReader.getFileNames();\n","\n","            Assert.assertNotNull(nameSet);\n","            Assert.assertTrue(nameSet.size() <= 5);\n","        }\n","    }\n","\n","    @Test\n","    public void readFromZipWithNullPathTest() throws IOException {\n","        try (ZipFileReader reader = new ZipFileReader(SOURCE_FOLDER + \"archive.zip\")) {\n","\n","            Exception ex = Assert.assertThrows(IOException.class, () -> reader.readFromZip(null));\n","            Assert.assertEquals(CommonsExceptionMessageConstant.FILE_NAME_CAN_NOT_BE_NULL, ex.getMessage());\n","        }\n","    }\n","\n","    @Test\n","    public void readFromZipWithNotExistingPathTest() throws IOException {\n","        final String fileName = \"name\";\n","\n","        try (ZipFileReader reader = new ZipFileReader(SOURCE_FOLDER + \"archive.zip\")) {\n","            Exception ex = Assert.assertThrows(IOException.class, () -> reader.readFromZip(fileName));\n","            Assert.assertEquals(MessageFormatUtil\n","                    .format(CommonsExceptionMessageConstant.ZIP_ENTRY_NOT_FOUND, fileName), ex.getMessage());\n","        }\n","    }\n","\n","    @Test\n","    public void readFromZipWithInvalidPathTest() throws IOException {\n","        final String fileName = \"thirdFile.txt\";\n","\n","        try (ZipFileReader reader = new ZipFileReader(SOURCE_FOLDER + \"archive.zip\")) {\n","            Exception ex = Assert.assertThrows(IOException.class, () -> reader.readFromZip(fileName));\n","            Assert.assertEquals(MessageFormatUtil\n","                    .format(CommonsExceptionMessageConstant.ZIP_ENTRY_NOT_FOUND, fileName), ex.getMessage());\n","        }\n","    }\n","\n","    @Test\n","    public void readFromZipWithPathAtRootTest() throws IOException {\n","        try (ZipFileReader reader = new ZipFileReader(SOURCE_FOLDER + \"archive.zip\");\n","                InputStream inputStream = reader.readFromZip(\"firstFile.txt\")) {\n","\n","            Assert.assertNotNull(inputStream);\n","            Assert.assertEquals(\"1\", convertInputStreamToString(inputStream));\n","        }\n","    }\n","\n","    @Test\n","    public void readFromZipWithFileInSubFolderTest() throws IOException {\n","        try (ZipFileReader reader = new ZipFileReader(SOURCE_FOLDER + \"archive.zip\");\n","                InputStream inputStream = reader.readFromZip(\"subfolder/thirdFile.txt\")) {\n","\n","            Assert.assertNotNull(inputStream);\n","            Assert.assertEquals(\"3\", convertInputStreamToString(inputStream));\n","        }\n","    }\n","\n","    @Test\n","    public void readFromZipWithFileInSubSubFolderPathTest() throws IOException {\n","        try (ZipFileReader reader = new ZipFileReader(SOURCE_FOLDER + \"archive.zip\");\n","                InputStream inputStream = reader.readFromZip(\"subfolder/subsubfolder/fifthFile.txt\")) {\n","\n","            Assert.assertNotNull(inputStream);\n","            Assert.assertEquals(\"5\", convertInputStreamToString(inputStream));\n","        }\n","    }\n","\n","    @Test\n","    public void readFromZipWithClosedReaderTest() throws IOException {\n","        ZipFileReader reader = new ZipFileReader(SOURCE_FOLDER + \"archive.zip\");\n","        reader.close();\n","        Assert.assertThrows(IllegalStateException.class,\n","                () -> reader.readFromZip(\"subfolder/subsubfolder/fifthFile.txt\"));\n","    }\n","\n","    private static String convertInputStreamToString(InputStream inputStream) throws IOException {\n","        try (ByteArrayOutputStream result = new ByteArrayOutputStream()) {\n","            byte[] buffer = new byte[1024];\n","            int length;\n","            while ((length = inputStream.read(buffer)) != -1) {\n","                result.write(buffer, 0, length);\n","            }\n","            result.flush();\n","            return EncodingUtil.convertToString(result.toByteArray(), \"UTF-8\");\n","        }\n","    }\n","}\n"],"method_lines_dic":{"ZipFileReader::::getFileNames()":[74,119],"ZipFileReader::::readFromZip(java.lang.String)":[130,140],"ZipFileReader::::setThresholdSize(int)":[147,149],"ZipFileReader::::setThresholdEntries(int)":[156,158],"ZipFileReader::::setThresholdRatio(double)":[166,168],"ZipFileReader::::close()":[170,173]},"test_method_lines_dic":{"ZipFileReaderTest::::constructorWithNullPathTest()":[44,48],"ZipFileReaderTest::::constructorWithInvalidPathTest()":[50,53],"ZipFileReaderTest::::constructorWithNonZipPathTest()":[55,58],"ZipFileReaderTest::::getFileNamesFromEmptyZipTest()":[60,68],"ZipFileReaderTest::::getFileNamesFromZipTest()":[70,84],"ZipFileReaderTest::::getFileNamesFromZipBombBySettingThresholdSizeTest()":[86,97],"ZipFileReaderTest::::getFileNamesFromZipBombBySettingThresholdRatioTest()":[99,109],"ZipFileReaderTest::::getFileNamesFromZipBombBySettingThresholdEntriesTest()":[111,121],"ZipFileReaderTest::::readFromZipWithNullPathTest()":[123,130],"ZipFileReaderTest::::readFromZipWithNotExistingPathTest()":[132,141],"ZipFileReaderTest::::readFromZipWithInvalidPathTest()":[143,152],"ZipFileReaderTest::::readFromZipWithPathAtRootTest()":[154,162],"ZipFileReaderTest::::readFromZipWithFileInSubFolderTest()":[164,172],"ZipFileReaderTest::::readFromZipWithFileInSubSubFolderPathTest()":[174,182],"ZipFileReaderTest::::readFromZipWithClosedReaderTest()":[184,190],"ZipFileReaderTest::::convertInputStreamToString(java.io.InputStream)":[192,202]},"reverse_method_lines_dic":{"74":"ZipFileReader::::getFileNames()","75":"ZipFileReader::::getFileNames()","76":"ZipFileReader::::getFileNames()","77":"ZipFileReader::::getFileNames()","78":"ZipFileReader::::getFileNames()","79":"ZipFileReader::::getFileNames()","80":"ZipFileReader::::getFileNames()","81":"ZipFileReader::::getFileNames()","82":"ZipFileReader::::getFileNames()","83":"ZipFileReader::::getFileNames()","84":"ZipFileReader::::getFileNames()","85":"ZipFileReader::::getFileNames()","86":"ZipFileReader::::getFileNames()","87":"ZipFileReader::::getFileNames()","88":"ZipFileReader::::getFileNames()","89":"ZipFileReader::::getFileNames()","90":"ZipFileReader::::getFileNames()","91":"ZipFileReader::::getFileNames()","92":"ZipFileReader::::getFileNames()","93":"ZipFileReader::::getFileNames()","94":"ZipFileReader::::getFileNames()","95":"ZipFileReader::::getFileNames()","96":"ZipFileReader::::getFileNames()","97":"ZipFileReader::::getFileNames()","98":"ZipFileReader::::getFileNames()","99":"ZipFileReader::::getFileNames()","100":"ZipFileReader::::getFileNames()","101":"ZipFileReader::::getFileNames()","102":"ZipFileReader::::getFileNames()","103":"ZipFileReader::::getFileNames()","104":"ZipFileReader::::getFileNames()","105":"ZipFileReader::::getFileNames()","106":"ZipFileReader::::getFileNames()","107":"ZipFileReader::::getFileNames()","108":"ZipFileReader::::getFileNames()","109":"ZipFileReader::::getFileNames()","110":"ZipFileReader::::getFileNames()","111":"ZipFileReader::::getFileNames()","112":"ZipFileReader::::getFileNames()","113":"ZipFileReader::::getFileNames()","114":"ZipFileReader::::getFileNames()","115":"ZipFileReader::::getFileNames()","116":"ZipFileReader::::getFileNames()","117":"ZipFileReader::::getFileNames()","118":"ZipFileReader::::getFileNames()","119":"ZipFileReader::::getFileNames()","130":"ZipFileReader::::readFromZip(java.lang.String)","131":"ZipFileReader::::readFromZip(java.lang.String)","132":"ZipFileReader::::readFromZip(java.lang.String)","133":"ZipFileReader::::readFromZip(java.lang.String)","134":"ZipFileReader::::readFromZip(java.lang.String)","135":"ZipFileReader::::readFromZip(java.lang.String)","136":"ZipFileReader::::readFromZip(java.lang.String)","137":"ZipFileReader::::readFromZip(java.lang.String)","138":"ZipFileReader::::readFromZip(java.lang.String)","139":"ZipFileReader::::readFromZip(java.lang.String)","140":"ZipFileReader::::readFromZip(java.lang.String)","147":"ZipFileReader::::setThresholdSize(int)","148":"ZipFileReader::::setThresholdSize(int)","149":"ZipFileReader::::setThresholdSize(int)","156":"ZipFileReader::::setThresholdEntries(int)","157":"ZipFileReader::::setThresholdEntries(int)","158":"ZipFileReader::::setThresholdEntries(int)","166":"ZipFileReader::::setThresholdRatio(double)","167":"ZipFileReader::::setThresholdRatio(double)","168":"ZipFileReader::::setThresholdRatio(double)","170":"ZipFileReader::::close()","171":"ZipFileReader::::close()","172":"ZipFileReader::::close()","173":"ZipFileReader::::close()"},"test_reverse_method_lines_dic":{"44":"ZipFileReaderTest::::constructorWithNullPathTest()","45":"ZipFileReaderTest::::constructorWithNullPathTest()","46":"ZipFileReaderTest::::constructorWithNullPathTest()","47":"ZipFileReaderTest::::constructorWithNullPathTest()","48":"ZipFileReaderTest::::constructorWithNullPathTest()","50":"ZipFileReaderTest::::constructorWithInvalidPathTest()","51":"ZipFileReaderTest::::constructorWithInvalidPathTest()","52":"ZipFileReaderTest::::constructorWithInvalidPathTest()","53":"ZipFileReaderTest::::constructorWithInvalidPathTest()","55":"ZipFileReaderTest::::constructorWithNonZipPathTest()","56":"ZipFileReaderTest::::constructorWithNonZipPathTest()","57":"ZipFileReaderTest::::constructorWithNonZipPathTest()","58":"ZipFileReaderTest::::constructorWithNonZipPathTest()","60":"ZipFileReaderTest::::getFileNamesFromEmptyZipTest()","61":"ZipFileReaderTest::::getFileNamesFromEmptyZipTest()","62":"ZipFileReaderTest::::getFileNamesFromEmptyZipTest()","63":"ZipFileReaderTest::::getFileNamesFromEmptyZipTest()","64":"ZipFileReaderTest::::getFileNamesFromEmptyZipTest()","65":"ZipFileReaderTest::::getFileNamesFromEmptyZipTest()","66":"ZipFileReaderTest::::getFileNamesFromEmptyZipTest()","67":"ZipFileReaderTest::::getFileNamesFromEmptyZipTest()","68":"ZipFileReaderTest::::getFileNamesFromEmptyZipTest()","70":"ZipFileReaderTest::::getFileNamesFromZipTest()","71":"ZipFileReaderTest::::getFileNamesFromZipTest()","72":"ZipFileReaderTest::::getFileNamesFromZipTest()","73":"ZipFileReaderTest::::getFileNamesFromZipTest()","74":"ZipFileReaderTest::::getFileNamesFromZipTest()","75":"ZipFileReaderTest::::getFileNamesFromZipTest()","76":"ZipFileReaderTest::::getFileNamesFromZipTest()","77":"ZipFileReaderTest::::getFileNamesFromZipTest()","78":"ZipFileReaderTest::::getFileNamesFromZipTest()","79":"ZipFileReaderTest::::getFileNamesFromZipTest()","80":"ZipFileReaderTest::::getFileNamesFromZipTest()","81":"ZipFileReaderTest::::getFileNamesFromZipTest()","82":"ZipFileReaderTest::::getFileNamesFromZipTest()","83":"ZipFileReaderTest::::getFileNamesFromZipTest()","84":"ZipFileReaderTest::::getFileNamesFromZipTest()","86":"ZipFileReaderTest::::getFileNamesFromZipBombBySettingThresholdSizeTest()","87":"ZipFileReaderTest::::getFileNamesFromZipBombBySettingThresholdSizeTest()","88":"ZipFileReaderTest::::getFileNamesFromZipBombBySettingThresholdSizeTest()","89":"ZipFileReaderTest::::getFileNamesFromZipBombBySettingThresholdSizeTest()","90":"ZipFileReaderTest::::getFileNamesFromZipBombBySettingThresholdSizeTest()","91":"ZipFileReaderTest::::getFileNamesFromZipBombBySettingThresholdSizeTest()","92":"ZipFileReaderTest::::getFileNamesFromZipBombBySettingThresholdSizeTest()","93":"ZipFileReaderTest::::getFileNamesFromZipBombBySettingThresholdSizeTest()","94":"ZipFileReaderTest::::getFileNamesFromZipBombBySettingThresholdSizeTest()","95":"ZipFileReaderTest::::getFileNamesFromZipBombBySettingThresholdSizeTest()","96":"ZipFileReaderTest::::getFileNamesFromZipBombBySettingThresholdSizeTest()","97":"ZipFileReaderTest::::getFileNamesFromZipBombBySettingThresholdSizeTest()","99":"ZipFileReaderTest::::getFileNamesFromZipBombBySettingThresholdRatioTest()","100":"ZipFileReaderTest::::getFileNamesFromZipBombBySettingThresholdRatioTest()","101":"ZipFileReaderTest::::getFileNamesFromZipBombBySettingThresholdRatioTest()","102":"ZipFileReaderTest::::getFileNamesFromZipBombBySettingThresholdRatioTest()","103":"ZipFileReaderTest::::getFileNamesFromZipBombBySettingThresholdRatioTest()","104":"ZipFileReaderTest::::getFileNamesFromZipBombBySettingThresholdRatioTest()","105":"ZipFileReaderTest::::getFileNamesFromZipBombBySettingThresholdRatioTest()","106":"ZipFileReaderTest::::getFileNamesFromZipBombBySettingThresholdRatioTest()","107":"ZipFileReaderTest::::getFileNamesFromZipBombBySettingThresholdRatioTest()","108":"ZipFileReaderTest::::getFileNamesFromZipBombBySettingThresholdRatioTest()","109":"ZipFileReaderTest::::getFileNamesFromZipBombBySettingThresholdRatioTest()","111":"ZipFileReaderTest::::getFileNamesFromZipBombBySettingThresholdEntriesTest()","112":"ZipFileReaderTest::::getFileNamesFromZipBombBySettingThresholdEntriesTest()","113":"ZipFileReaderTest::::getFileNamesFromZipBombBySettingThresholdEntriesTest()","114":"ZipFileReaderTest::::getFileNamesFromZipBombBySettingThresholdEntriesTest()","115":"ZipFileReaderTest::::getFileNamesFromZipBombBySettingThresholdEntriesTest()","116":"ZipFileReaderTest::::getFileNamesFromZipBombBySettingThresholdEntriesTest()","117":"ZipFileReaderTest::::getFileNamesFromZipBombBySettingThresholdEntriesTest()","118":"ZipFileReaderTest::::getFileNamesFromZipBombBySettingThresholdEntriesTest()","119":"ZipFileReaderTest::::getFileNamesFromZipBombBySettingThresholdEntriesTest()","120":"ZipFileReaderTest::::getFileNamesFromZipBombBySettingThresholdEntriesTest()","121":"ZipFileReaderTest::::getFileNamesFromZipBombBySettingThresholdEntriesTest()","123":"ZipFileReaderTest::::readFromZipWithNullPathTest()","124":"ZipFileReaderTest::::readFromZipWithNullPathTest()","125":"ZipFileReaderTest::::readFromZipWithNullPathTest()","126":"ZipFileReaderTest::::readFromZipWithNullPathTest()","127":"ZipFileReaderTest::::readFromZipWithNullPathTest()","128":"ZipFileReaderTest::::readFromZipWithNullPathTest()","129":"ZipFileReaderTest::::readFromZipWithNullPathTest()","130":"ZipFileReaderTest::::readFromZipWithNullPathTest()","132":"ZipFileReaderTest::::readFromZipWithNotExistingPathTest()","133":"ZipFileReaderTest::::readFromZipWithNotExistingPathTest()","134":"ZipFileReaderTest::::readFromZipWithNotExistingPathTest()","135":"ZipFileReaderTest::::readFromZipWithNotExistingPathTest()","136":"ZipFileReaderTest::::readFromZipWithNotExistingPathTest()","137":"ZipFileReaderTest::::readFromZipWithNotExistingPathTest()","138":"ZipFileReaderTest::::readFromZipWithNotExistingPathTest()","139":"ZipFileReaderTest::::readFromZipWithNotExistingPathTest()","140":"ZipFileReaderTest::::readFromZipWithNotExistingPathTest()","141":"ZipFileReaderTest::::readFromZipWithNotExistingPathTest()","143":"ZipFileReaderTest::::readFromZipWithInvalidPathTest()","144":"ZipFileReaderTest::::readFromZipWithInvalidPathTest()","145":"ZipFileReaderTest::::readFromZipWithInvalidPathTest()","146":"ZipFileReaderTest::::readFromZipWithInvalidPathTest()","147":"ZipFileReaderTest::::readFromZipWithInvalidPathTest()","148":"ZipFileReaderTest::::readFromZipWithInvalidPathTest()","149":"ZipFileReaderTest::::readFromZipWithInvalidPathTest()","150":"ZipFileReaderTest::::readFromZipWithInvalidPathTest()","151":"ZipFileReaderTest::::readFromZipWithInvalidPathTest()","152":"ZipFileReaderTest::::readFromZipWithInvalidPathTest()","154":"ZipFileReaderTest::::readFromZipWithPathAtRootTest()","155":"ZipFileReaderTest::::readFromZipWithPathAtRootTest()","156":"ZipFileReaderTest::::readFromZipWithPathAtRootTest()","157":"ZipFileReaderTest::::readFromZipWithPathAtRootTest()","158":"ZipFileReaderTest::::readFromZipWithPathAtRootTest()","159":"ZipFileReaderTest::::readFromZipWithPathAtRootTest()","160":"ZipFileReaderTest::::readFromZipWithPathAtRootTest()","161":"ZipFileReaderTest::::readFromZipWithPathAtRootTest()","162":"ZipFileReaderTest::::readFromZipWithPathAtRootTest()","164":"ZipFileReaderTest::::readFromZipWithFileInSubFolderTest()","165":"ZipFileReaderTest::::readFromZipWithFileInSubFolderTest()","166":"ZipFileReaderTest::::readFromZipWithFileInSubFolderTest()","167":"ZipFileReaderTest::::readFromZipWithFileInSubFolderTest()","168":"ZipFileReaderTest::::readFromZipWithFileInSubFolderTest()","169":"ZipFileReaderTest::::readFromZipWithFileInSubFolderTest()","170":"ZipFileReaderTest::::readFromZipWithFileInSubFolderTest()","171":"ZipFileReaderTest::::readFromZipWithFileInSubFolderTest()","172":"ZipFileReaderTest::::readFromZipWithFileInSubFolderTest()","174":"ZipFileReaderTest::::readFromZipWithFileInSubSubFolderPathTest()","175":"ZipFileReaderTest::::readFromZipWithFileInSubSubFolderPathTest()","176":"ZipFileReaderTest::::readFromZipWithFileInSubSubFolderPathTest()","177":"ZipFileReaderTest::::readFromZipWithFileInSubSubFolderPathTest()","178":"ZipFileReaderTest::::readFromZipWithFileInSubSubFolderPathTest()","179":"ZipFileReaderTest::::readFromZipWithFileInSubSubFolderPathTest()","180":"ZipFileReaderTest::::readFromZipWithFileInSubSubFolderPathTest()","181":"ZipFileReaderTest::::readFromZipWithFileInSubSubFolderPathTest()","182":"ZipFileReaderTest::::readFromZipWithFileInSubSubFolderPathTest()","184":"ZipFileReaderTest::::readFromZipWithClosedReaderTest()","185":"ZipFileReaderTest::::readFromZipWithClosedReaderTest()","186":"ZipFileReaderTest::::readFromZipWithClosedReaderTest()","187":"ZipFileReaderTest::::readFromZipWithClosedReaderTest()","188":"ZipFileReaderTest::::readFromZipWithClosedReaderTest()","189":"ZipFileReaderTest::::readFromZipWithClosedReaderTest()","190":"ZipFileReaderTest::::readFromZipWithClosedReaderTest()","192":"ZipFileReaderTest::::convertInputStreamToString(java.io.InputStream)","193":"ZipFileReaderTest::::convertInputStreamToString(java.io.InputStream)","194":"ZipFileReaderTest::::convertInputStreamToString(java.io.InputStream)","195":"ZipFileReaderTest::::convertInputStreamToString(java.io.InputStream)","196":"ZipFileReaderTest::::convertInputStreamToString(java.io.InputStream)","197":"ZipFileReaderTest::::convertInputStreamToString(java.io.InputStream)","198":"ZipFileReaderTest::::convertInputStreamToString(java.io.InputStream)","199":"ZipFileReaderTest::::convertInputStreamToString(java.io.InputStream)","200":"ZipFileReaderTest::::convertInputStreamToString(java.io.InputStream)","201":"ZipFileReaderTest::::convertInputStreamToString(java.io.InputStream)","202":"ZipFileReaderTest::::convertInputStreamToString(java.io.InputStream)"},"tests":[{"test_lines":[44,48],"covered_lines":[45,49,50,51,60,61,62]},{"test_lines":[50,53],"covered_lines":[45]},{"test_lines":[55,58],"covered_lines":[45]},{"test_lines":[60,68],"covered_lines":[45,49,50,51,60,61,64,65,75,77,79,80,81,118,172,173]},{"test_lines":[70,84],"covered_lines":[45,49,50,51,60,61,64,65,75,77,79,80,81,82,83,84,85,87,88,89,90,91,92,93,97,98,103,108,113,114,115,117,118,172,173]},{"test_lines":[86,97],"covered_lines":[45,49,50,51,60,61,64,65,75,77,79,80,81,82,83,84,85,87,88,89,90,91,92,93,97,98,103,104,105,113,118,148,149,167,168,172,173]},{"test_lines":[99,109],"covered_lines":[45,49,50,51,60,61,64,65,75,77,79,80,81,82,83,84,85,87,88,89,90,91,92,93,94,95,98,99,100,113,118,167,168,172,173]},{"test_lines":[111,121],"covered_lines":[45,49,50,51,60,61,64,65,75,77,79,80,81,82,83,84,85,87,88,89,90,91,92,93,97,98,103,108,109,110,113,114,115,117,118,157,158,172,173]},{"test_lines":[123,130],"covered_lines":[45,49,50,51,60,61,64,65,131,132,172,173]},{"test_lines":[132,141],"covered_lines":[45,49,50,51,60,61,64,65,131,134,135,136,172,173]},{"test_lines":[143,152],"covered_lines":[45,49,50,51,60,61,64,65,131,134,135,136,172,173]},{"test_lines":[154,162],"covered_lines":[45,49,50,51,60,61,64,65,131,134,135,139,172,173]},{"test_lines":[164,172],"covered_lines":[45,49,50,51,60,61,64,65,131,134,135,139,172,173]},{"test_lines":[174,182],"covered_lines":[45,49,50,51,60,61,64,65,131,134,135,139,172,173]},{"test_lines":[184,190],"covered_lines":[45,49,50,51,60,61,64,65,172,173]}]},"/bernard/dataset_construction/prep/repos/itext-java/commons/src/main/java/com/itextpdf/commons/utils/MapUtil.java":{"class_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.utils;\n","\n","import java.util.Map;\n","import java.util.Objects;\n","import java.util.function.BiFunction;\n","\n","/**\n"," * Utility class for work with collections. Not for public use.\n"," */\n","public final class MapUtil {\n","\n","    private static final int HASH_MULTIPLIER = 31;\n","\n","    private MapUtil() { }\n","\n","    /**\n","     * Checks if two {@link Map maps} are equal: the are of the same types and has equal number of stored\n","     * entries and both has the same set of keys ans each key is associated with an appropriate\n","     * value.\n","     *\n","     * @param m1 is the first map\n","     * @param m2 is the second map\n","     * @param <K> is a type of keys\n","     * @param <V> is a type of values\n","     *\n","     * @return {@code true} if maps are equal and {@code false} otherwise\n","     */\n","    public static <K, V> boolean equals(Map<K, V> m1, Map<K, V> m2) {\n","        if (m1 == m2) {\n","            return true;\n","        }\n","        if (m1 == null || m2 == null) {\n","            return false;\n","        }\n","\n","        if (! m1.getClass().equals(m2.getClass())) {\n","            return false;\n","        }\n","\n","        if (m1.size() != m2.size()) {\n","            return false;\n","        }\n","\n","        for (Map.Entry<K, V> entry : m1.entrySet()) {\n","            final V obj1 = entry.getValue();\n","            final V obj2 = m2.get(entry.getKey());\n","            if (!m2.containsKey(entry.getKey()) || !Objects.equals(obj1, obj2)) {\n","                return false;\n","            }\n","        }\n","\n","        return true;\n","    }\n","\n","    /**\n","     * Merges data from source Map into destination Map using provided function if key exists in both Maps.\n","     * If key doesn't exist in destination Map in will be putted directly.\n","     *\n","     * @param destination Map to which data will be merged.\n","     * @param source Map from which data will be taken.\n","     * @param valuesMerger function which will be used to merge Maps values.\n","     * @param <K> is a type of keys\n","     * @param <V> is a type of values\n","     */\n","    public static <K, V> void merge(Map<K, V> destination, Map<K, V> source, BiFunction<V, V, V> valuesMerger) {\n","        if (destination == source) {\n","            return;\n","        }\n","        for (Map.Entry<K, V> entry : source.entrySet()) {\n","            V value = destination.get(entry.getKey());\n","            if (value == null) {\n","                destination.put(entry.getKey(), entry.getValue());\n","            } else {\n","                destination.put(entry.getKey(), valuesMerger.apply(value, entry.getValue()));\n","            }\n","        }\n","    }\n","\n","    /**\n","     * Calculates the hash code of the {@link Map map}.\n","     *\n","     * @param m1 is the map\n","     * @param <K> is a type of keys\n","     * @param <V> is a type of values\n","     *\n","     * @return the hash code of the {@link Map map}.\n","     */\n","    public static <K, V> int getHashCode(Map<K, V> m1) {\n","        if (null == m1) {\n","            return 0;\n","        }\n","\n","        int hash = 0;\n","        for (Map.Entry<K, V> entry : m1.entrySet()) {\n","            final K key = entry.getKey();\n","            final V value = entry.getValue();\n","            hash = HASH_MULTIPLIER * hash + (key == null ? 0 : key.hashCode());\n","            hash = HASH_MULTIPLIER * hash + (value == null ? 0 : value.hashCode());\n","        }\n","\n","        return hash;\n","    }\n","\n","    /**\n","     * Puts value to map if the value is not null.\n","     *\n","     * @param map the map in which value can be pushed\n","     * @param key the key\n","     * @param value the value\n","     * @param <K> is a type of key\n","     * @param <V> is a type of value\n","     */\n","    public static <K, V> void putIfNotNull(Map<K, V> map, K key, V value) {\n","        if (value != null) {\n","            map.put(key, value);\n","        }\n","    }\n","}\n"],"test_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.utils;\n","\n","import com.itextpdf.test.ExtendedITextTest;\n","import com.itextpdf.test.annotations.type.UnitTest;\n","\n","import java.util.Collections;\n","import java.util.HashMap;\n","import java.util.Map;\n","import java.util.TreeMap;\n","import org.junit.Assert;\n","import org.junit.Test;\n","import org.junit.experimental.categories.Category;\n","\n","@Category(UnitTest.class)\n","public class MapUtilTest extends ExtendedITextTest {\n","\n","    @Test\n","    public void nullMapsAreEqualTest() {\n","        Assert.assertTrue(MapUtil.equals(null, null));\n","    }\n","\n","    @Test\n","    public void nullMapIsNotEqualToEmptyMapTest() {\n","        Assert.assertFalse(MapUtil.equals(new HashMap<String, String>(), null));\n","        Assert.assertFalse(MapUtil.equals(null, new HashMap<String, String>()));\n","    }\n","\n","    @Test\n","    public void mapsOfDifferentTypesAreNotEqualTest() {\n","        Assert.assertFalse(MapUtil.equals(new HashMap<String, String>(), new TreeMap<>()));\n","    }\n","\n","    @Test\n","    public void mapsOfDifferentSizeAreNotEqualTest() {\n","        Map<String, String> m1 = new HashMap<>();\n","        m1.put(\"m1\", \"m1\");\n","\n","        Map<String, String> m2 = new HashMap<>();\n","        m2.put(\"m1\", \"m1\");\n","        m2.put(\"m2\", \"m2\");\n","\n","        Assert.assertFalse(MapUtil.equals(m1, m2));\n","    }\n","\n","    @Test\n","    public void nullValueInMapTest() {\n","        Map<String, String> m1 = Collections.<String, String>singletonMap(\"nullKey\", null);\n","        Map<String, String> m2 = Collections.singletonMap(\"notNullKey\", \"notNull\");\n","\n","        Assert.assertFalse(MapUtil.equals(m1, m2));\n","    }\n","\n","    @Test\n","    public void mapsWithDifferentKeysAreNotEqualTest() {\n","        Map<String, String> m1 = new HashMap<>();\n","        m1.put(\"m1\", \"value\");\n","\n","        Map<String, String> m2 = new HashMap<>();\n","        m2.put(\"m2\", \"value\");\n","        Assert.assertFalse(MapUtil.equals(m1, m2));\n","    }\n","\n","    @Test\n","    public void mapsWithDifferentValuesAreNotEqualTest() {\n","        Map<String, String> m1 = new HashMap<>();\n","        m1.put(\"key\", \"m1\");\n","\n","        Map<String, String> m2 = new HashMap<>();\n","        m2.put(\"key\", \"m2\");\n","        Assert.assertFalse(MapUtil.equals(m1, m2));\n","    }\n","\n","    @Test\n","    public void equalArraysTest() {\n","        Map<String, String> m1 = new HashMap<>();\n","        m1.put(\"key\", \"value\");\n","\n","        Map<String, String> m2 = new HashMap<>();\n","        m2.put(\"key\", \"value\");\n","        Assert.assertTrue(MapUtil.equals(m1, m2));\n","    }\n","\n","    @Test\n","    public void putIfNotNullTest() {\n","        Map<String, String> m1 = new HashMap<>();\n","        MapUtil.putIfNotNull(m1, \"key\", null);\n","        Assert.assertTrue(m1.isEmpty());\n","        MapUtil.putIfNotNull(m1, \"key\", \"value\");\n","        Assert.assertFalse(m1.isEmpty());\n","        Assert.assertEquals(\"value\", m1.get(\"key\"));\n","\n","    }\n","\n","    @Test\n","    public void nullMapsEqualEqualHashCodeTest() {\n","        Assert.assertEquals(MapUtil.getHashCode((Map<String, String>)null), MapUtil.getHashCode((Map<String, String>)null));\n","    }\n","\n","    @Test\n","    public void nullMapEmptyMapDiffHashCodeTest() {\n","        Assert.assertEquals(MapUtil.getHashCode((Map<String, String>)null), MapUtil.getHashCode(new HashMap<String, String>()));\n","    }\n","\n","    @Test\n","    public void mapsOfDifferentTypesHashCodeTest() {\n","        Assert.assertEquals(MapUtil.getHashCode(new TreeMap<>()),\n","                MapUtil.getHashCode(new HashMap<String, String>()));\n","    }\n","\n","    @Test\n","    public void equalMapsHashCodeTest() {\n","        Map<String, String> m1 = new HashMap<>();\n","        m1.put(\"key\", \"value\");\n","\n","        Map<String, String> m2 = new HashMap<>();\n","        m2.put(\"key\", \"value\");\n","        Assert.assertEquals(MapUtil.getHashCode(m1), MapUtil.getHashCode(m2));\n","    }\n","\n","    @Test\n","    public void mapsMergeTest() {\n","        Map<Integer, Integer> destination = new HashMap<>();\n","        destination.put(1, 5);\n","        destination.put(2, 5);\n","        destination.put(4, 5);\n","        Map<Integer, Integer> source = new HashMap<>();\n","        source.put(1, 10);\n","        source.put(2, 10);\n","        source.put(3, 10);\n","        MapUtil.merge(destination, Collections.unmodifiableMap(source), (d, s) -> d + s);\n","\n","        Map<Integer, Integer> expectedMap = new HashMap<>();\n","        expectedMap.put(1, 15);\n","        expectedMap.put(2, 15);\n","        expectedMap.put(3, 10);\n","        expectedMap.put(4, 5);\n","        Assert.assertEquals(expectedMap, destination);\n","    }\n","\n","    @Test\n","    public void sameMapsMergeTest() {\n","        Map<Integer, Integer> map = new HashMap<>();\n","        map.put(1, 5);\n","        map.put(2, 5);\n","        map.put(4, 5);\n","        Map<Integer, Integer> expectedMap = new HashMap<>(map);\n","\n","        MapUtil.merge(map, map, (d, s) -> d + s);\n","        Assert.assertEquals(expectedMap, map);\n","    }\n","}\n"],"method_lines_dic":{"MapUtil::::equals(java.util.Map<K, V>,java.util.Map<K, V>)":[50,75],"MapUtil::::merge(java.util.Map<K, V>,java.util.Map<K, V>,java.util.function.BiFunction<V, V, V>)":[87,99],"MapUtil::::getHashCode(java.util.Map<K, V>)":[110,124],"MapUtil::::putIfNotNull(java.util.Map<K, V>,K,V)":[135,139]},"test_method_lines_dic":{"MapUtilTest::::nullMapsAreEqualTest()":[39,42],"MapUtilTest::::nullMapIsNotEqualToEmptyMapTest()":[44,48],"MapUtilTest::::mapsOfDifferentTypesAreNotEqualTest()":[50,53],"MapUtilTest::::mapsOfDifferentSizeAreNotEqualTest()":[55,65],"MapUtilTest::::nullValueInMapTest()":[67,73],"MapUtilTest::::mapsWithDifferentKeysAreNotEqualTest()":[75,83],"MapUtilTest::::mapsWithDifferentValuesAreNotEqualTest()":[85,93],"MapUtilTest::::equalArraysTest()":[95,103],"MapUtilTest::::putIfNotNullTest()":[105,114],"MapUtilTest::::nullMapsEqualEqualHashCodeTest()":[116,119],"MapUtilTest::::nullMapEmptyMapDiffHashCodeTest()":[121,124],"MapUtilTest::::mapsOfDifferentTypesHashCodeTest()":[126,130],"MapUtilTest::::equalMapsHashCodeTest()":[132,140],"MapUtilTest::::mapsMergeTest()":[142,160],"MapUtilTest::::sameMapsMergeTest()":[162,172]},"reverse_method_lines_dic":{"50":"MapUtil::::equals(java.util.Map<K, V>,java.util.Map<K, V>)","51":"MapUtil::::equals(java.util.Map<K, V>,java.util.Map<K, V>)","52":"MapUtil::::equals(java.util.Map<K, V>,java.util.Map<K, V>)","53":"MapUtil::::equals(java.util.Map<K, V>,java.util.Map<K, V>)","54":"MapUtil::::equals(java.util.Map<K, V>,java.util.Map<K, V>)","55":"MapUtil::::equals(java.util.Map<K, V>,java.util.Map<K, V>)","56":"MapUtil::::equals(java.util.Map<K, V>,java.util.Map<K, V>)","57":"MapUtil::::equals(java.util.Map<K, V>,java.util.Map<K, V>)","58":"MapUtil::::equals(java.util.Map<K, V>,java.util.Map<K, V>)","59":"MapUtil::::equals(java.util.Map<K, V>,java.util.Map<K, V>)","60":"MapUtil::::equals(java.util.Map<K, V>,java.util.Map<K, V>)","61":"MapUtil::::equals(java.util.Map<K, V>,java.util.Map<K, V>)","62":"MapUtil::::equals(java.util.Map<K, V>,java.util.Map<K, V>)","63":"MapUtil::::equals(java.util.Map<K, V>,java.util.Map<K, V>)","64":"MapUtil::::equals(java.util.Map<K, V>,java.util.Map<K, V>)","65":"MapUtil::::equals(java.util.Map<K, V>,java.util.Map<K, V>)","66":"MapUtil::::equals(java.util.Map<K, V>,java.util.Map<K, V>)","67":"MapUtil::::equals(java.util.Map<K, V>,java.util.Map<K, V>)","68":"MapUtil::::equals(java.util.Map<K, V>,java.util.Map<K, V>)","69":"MapUtil::::equals(java.util.Map<K, V>,java.util.Map<K, V>)","70":"MapUtil::::equals(java.util.Map<K, V>,java.util.Map<K, V>)","71":"MapUtil::::equals(java.util.Map<K, V>,java.util.Map<K, V>)","72":"MapUtil::::equals(java.util.Map<K, V>,java.util.Map<K, V>)","73":"MapUtil::::equals(java.util.Map<K, V>,java.util.Map<K, V>)","74":"MapUtil::::equals(java.util.Map<K, V>,java.util.Map<K, V>)","75":"MapUtil::::equals(java.util.Map<K, V>,java.util.Map<K, V>)","87":"MapUtil::::merge(java.util.Map<K, V>,java.util.Map<K, V>,java.util.function.BiFunction<V, V, V>)","88":"MapUtil::::merge(java.util.Map<K, V>,java.util.Map<K, V>,java.util.function.BiFunction<V, V, V>)","89":"MapUtil::::merge(java.util.Map<K, V>,java.util.Map<K, V>,java.util.function.BiFunction<V, V, V>)","90":"MapUtil::::merge(java.util.Map<K, V>,java.util.Map<K, V>,java.util.function.BiFunction<V, V, V>)","91":"MapUtil::::merge(java.util.Map<K, V>,java.util.Map<K, V>,java.util.function.BiFunction<V, V, V>)","92":"MapUtil::::merge(java.util.Map<K, V>,java.util.Map<K, V>,java.util.function.BiFunction<V, V, V>)","93":"MapUtil::::merge(java.util.Map<K, V>,java.util.Map<K, V>,java.util.function.BiFunction<V, V, V>)","94":"MapUtil::::merge(java.util.Map<K, V>,java.util.Map<K, V>,java.util.function.BiFunction<V, V, V>)","95":"MapUtil::::merge(java.util.Map<K, V>,java.util.Map<K, V>,java.util.function.BiFunction<V, V, V>)","96":"MapUtil::::merge(java.util.Map<K, V>,java.util.Map<K, V>,java.util.function.BiFunction<V, V, V>)","97":"MapUtil::::merge(java.util.Map<K, V>,java.util.Map<K, V>,java.util.function.BiFunction<V, V, V>)","98":"MapUtil::::merge(java.util.Map<K, V>,java.util.Map<K, V>,java.util.function.BiFunction<V, V, V>)","99":"MapUtil::::merge(java.util.Map<K, V>,java.util.Map<K, V>,java.util.function.BiFunction<V, V, V>)","110":"MapUtil::::getHashCode(java.util.Map<K, V>)","111":"MapUtil::::getHashCode(java.util.Map<K, V>)","112":"MapUtil::::getHashCode(java.util.Map<K, V>)","113":"MapUtil::::getHashCode(java.util.Map<K, V>)","114":"MapUtil::::getHashCode(java.util.Map<K, V>)","115":"MapUtil::::getHashCode(java.util.Map<K, V>)","116":"MapUtil::::getHashCode(java.util.Map<K, V>)","117":"MapUtil::::getHashCode(java.util.Map<K, V>)","118":"MapUtil::::getHashCode(java.util.Map<K, V>)","119":"MapUtil::::getHashCode(java.util.Map<K, V>)","120":"MapUtil::::getHashCode(java.util.Map<K, V>)","121":"MapUtil::::getHashCode(java.util.Map<K, V>)","122":"MapUtil::::getHashCode(java.util.Map<K, V>)","123":"MapUtil::::getHashCode(java.util.Map<K, V>)","124":"MapUtil::::getHashCode(java.util.Map<K, V>)","135":"MapUtil::::putIfNotNull(java.util.Map<K, V>,K,V)","136":"MapUtil::::putIfNotNull(java.util.Map<K, V>,K,V)","137":"MapUtil::::putIfNotNull(java.util.Map<K, V>,K,V)","138":"MapUtil::::putIfNotNull(java.util.Map<K, V>,K,V)","139":"MapUtil::::putIfNotNull(java.util.Map<K, V>,K,V)"},"test_reverse_method_lines_dic":{"39":"MapUtilTest::::nullMapsAreEqualTest()","40":"MapUtilTest::::nullMapsAreEqualTest()","41":"MapUtilTest::::nullMapsAreEqualTest()","42":"MapUtilTest::::nullMapsAreEqualTest()","44":"MapUtilTest::::nullMapIsNotEqualToEmptyMapTest()","45":"MapUtilTest::::nullMapIsNotEqualToEmptyMapTest()","46":"MapUtilTest::::nullMapIsNotEqualToEmptyMapTest()","47":"MapUtilTest::::nullMapIsNotEqualToEmptyMapTest()","48":"MapUtilTest::::nullMapIsNotEqualToEmptyMapTest()","50":"MapUtilTest::::mapsOfDifferentTypesAreNotEqualTest()","51":"MapUtilTest::::mapsOfDifferentTypesAreNotEqualTest()","52":"MapUtilTest::::mapsOfDifferentTypesAreNotEqualTest()","53":"MapUtilTest::::mapsOfDifferentTypesAreNotEqualTest()","55":"MapUtilTest::::mapsOfDifferentSizeAreNotEqualTest()","56":"MapUtilTest::::mapsOfDifferentSizeAreNotEqualTest()","57":"MapUtilTest::::mapsOfDifferentSizeAreNotEqualTest()","58":"MapUtilTest::::mapsOfDifferentSizeAreNotEqualTest()","59":"MapUtilTest::::mapsOfDifferentSizeAreNotEqualTest()","60":"MapUtilTest::::mapsOfDifferentSizeAreNotEqualTest()","61":"MapUtilTest::::mapsOfDifferentSizeAreNotEqualTest()","62":"MapUtilTest::::mapsOfDifferentSizeAreNotEqualTest()","63":"MapUtilTest::::mapsOfDifferentSizeAreNotEqualTest()","64":"MapUtilTest::::mapsOfDifferentSizeAreNotEqualTest()","65":"MapUtilTest::::mapsOfDifferentSizeAreNotEqualTest()","67":"MapUtilTest::::nullValueInMapTest()","68":"MapUtilTest::::nullValueInMapTest()","69":"MapUtilTest::::nullValueInMapTest()","70":"MapUtilTest::::nullValueInMapTest()","71":"MapUtilTest::::nullValueInMapTest()","72":"MapUtilTest::::nullValueInMapTest()","73":"MapUtilTest::::nullValueInMapTest()","75":"MapUtilTest::::mapsWithDifferentKeysAreNotEqualTest()","76":"MapUtilTest::::mapsWithDifferentKeysAreNotEqualTest()","77":"MapUtilTest::::mapsWithDifferentKeysAreNotEqualTest()","78":"MapUtilTest::::mapsWithDifferentKeysAreNotEqualTest()","79":"MapUtilTest::::mapsWithDifferentKeysAreNotEqualTest()","80":"MapUtilTest::::mapsWithDifferentKeysAreNotEqualTest()","81":"MapUtilTest::::mapsWithDifferentKeysAreNotEqualTest()","82":"MapUtilTest::::mapsWithDifferentKeysAreNotEqualTest()","83":"MapUtilTest::::mapsWithDifferentKeysAreNotEqualTest()","85":"MapUtilTest::::mapsWithDifferentValuesAreNotEqualTest()","86":"MapUtilTest::::mapsWithDifferentValuesAreNotEqualTest()","87":"MapUtilTest::::mapsWithDifferentValuesAreNotEqualTest()","88":"MapUtilTest::::mapsWithDifferentValuesAreNotEqualTest()","89":"MapUtilTest::::mapsWithDifferentValuesAreNotEqualTest()","90":"MapUtilTest::::mapsWithDifferentValuesAreNotEqualTest()","91":"MapUtilTest::::mapsWithDifferentValuesAreNotEqualTest()","92":"MapUtilTest::::mapsWithDifferentValuesAreNotEqualTest()","93":"MapUtilTest::::mapsWithDifferentValuesAreNotEqualTest()","95":"MapUtilTest::::equalArraysTest()","96":"MapUtilTest::::equalArraysTest()","97":"MapUtilTest::::equalArraysTest()","98":"MapUtilTest::::equalArraysTest()","99":"MapUtilTest::::equalArraysTest()","100":"MapUtilTest::::equalArraysTest()","101":"MapUtilTest::::equalArraysTest()","102":"MapUtilTest::::equalArraysTest()","103":"MapUtilTest::::equalArraysTest()","105":"MapUtilTest::::putIfNotNullTest()","106":"MapUtilTest::::putIfNotNullTest()","107":"MapUtilTest::::putIfNotNullTest()","108":"MapUtilTest::::putIfNotNullTest()","109":"MapUtilTest::::putIfNotNullTest()","110":"MapUtilTest::::putIfNotNullTest()","111":"MapUtilTest::::putIfNotNullTest()","112":"MapUtilTest::::putIfNotNullTest()","113":"MapUtilTest::::putIfNotNullTest()","114":"MapUtilTest::::putIfNotNullTest()","116":"MapUtilTest::::nullMapsEqualEqualHashCodeTest()","117":"MapUtilTest::::nullMapsEqualEqualHashCodeTest()","118":"MapUtilTest::::nullMapsEqualEqualHashCodeTest()","119":"MapUtilTest::::nullMapsEqualEqualHashCodeTest()","121":"MapUtilTest::::nullMapEmptyMapDiffHashCodeTest()","122":"MapUtilTest::::nullMapEmptyMapDiffHashCodeTest()","123":"MapUtilTest::::nullMapEmptyMapDiffHashCodeTest()","124":"MapUtilTest::::nullMapEmptyMapDiffHashCodeTest()","126":"MapUtilTest::::mapsOfDifferentTypesHashCodeTest()","127":"MapUtilTest::::mapsOfDifferentTypesHashCodeTest()","128":"MapUtilTest::::mapsOfDifferentTypesHashCodeTest()","129":"MapUtilTest::::mapsOfDifferentTypesHashCodeTest()","130":"MapUtilTest::::mapsOfDifferentTypesHashCodeTest()","132":"MapUtilTest::::equalMapsHashCodeTest()","133":"MapUtilTest::::equalMapsHashCodeTest()","134":"MapUtilTest::::equalMapsHashCodeTest()","135":"MapUtilTest::::equalMapsHashCodeTest()","136":"MapUtilTest::::equalMapsHashCodeTest()","137":"MapUtilTest::::equalMapsHashCodeTest()","138":"MapUtilTest::::equalMapsHashCodeTest()","139":"MapUtilTest::::equalMapsHashCodeTest()","140":"MapUtilTest::::equalMapsHashCodeTest()","142":"MapUtilTest::::mapsMergeTest()","143":"MapUtilTest::::mapsMergeTest()","144":"MapUtilTest::::mapsMergeTest()","145":"MapUtilTest::::mapsMergeTest()","146":"MapUtilTest::::mapsMergeTest()","147":"MapUtilTest::::mapsMergeTest()","148":"MapUtilTest::::mapsMergeTest()","149":"MapUtilTest::::mapsMergeTest()","150":"MapUtilTest::::mapsMergeTest()","151":"MapUtilTest::::mapsMergeTest()","152":"MapUtilTest::::mapsMergeTest()","153":"MapUtilTest::::mapsMergeTest()","154":"MapUtilTest::::mapsMergeTest()","155":"MapUtilTest::::mapsMergeTest()","156":"MapUtilTest::::mapsMergeTest()","157":"MapUtilTest::::mapsMergeTest()","158":"MapUtilTest::::mapsMergeTest()","159":"MapUtilTest::::mapsMergeTest()","160":"MapUtilTest::::mapsMergeTest()","162":"MapUtilTest::::sameMapsMergeTest()","163":"MapUtilTest::::sameMapsMergeTest()","164":"MapUtilTest::::sameMapsMergeTest()","165":"MapUtilTest::::sameMapsMergeTest()","166":"MapUtilTest::::sameMapsMergeTest()","167":"MapUtilTest::::sameMapsMergeTest()","168":"MapUtilTest::::sameMapsMergeTest()","169":"MapUtilTest::::sameMapsMergeTest()","170":"MapUtilTest::::sameMapsMergeTest()","171":"MapUtilTest::::sameMapsMergeTest()","172":"MapUtilTest::::sameMapsMergeTest()"},"tests":[{"test_lines":[39,42],"covered_lines":[51,52]},{"test_lines":[44,48],"covered_lines":[51,54,55]},{"test_lines":[50,53],"covered_lines":[51,54,58,59]},{"test_lines":[55,65],"covered_lines":[51,54,58,62,63]},{"test_lines":[67,73],"covered_lines":[51,54,58,62,66,67,68,69,70]},{"test_lines":[75,83],"covered_lines":[51,54,58,62,66,67,68,69,70]},{"test_lines":[85,93],"covered_lines":[51,54,58,62,66,67,68,69,70]},{"test_lines":[95,103],"covered_lines":[51,54,58,62,66,67,68,69,72,74]},{"test_lines":[105,114],"covered_lines":[136,137,139]},{"test_lines":[116,119],"covered_lines":[111,112]},{"test_lines":[121,124],"covered_lines":[111,112,115,116,123]},{"test_lines":[126,130],"covered_lines":[111,115,116,123]},{"test_lines":[132,140],"covered_lines":[111,115,116,117,118,119,120,121,123]},{"test_lines":[142,160],"covered_lines":[88,91,92,93,94,96,98,99]},{"test_lines":[162,172],"covered_lines":[88,89]}]},"/bernard/dataset_construction/prep/repos/itext-java/commons/src/main/java/com/itextpdf/commons/utils/Base64.java":{"class_content":["package com.itextpdf.commons.utils;\n","\n","import com.itextpdf.commons.logs.CommonsLogMessageConstant;\n","\n","import org.slf4j.Logger;\n","import org.slf4j.LoggerFactory;\n","\n","/**\n"," * Encodes and decodes to and from Base64 notation.\n"," * <p>\n"," * Homepage: <a href=\"http://iharder.net/base64\">http://iharder.net/base64</a>.\n"," * <br>\n"," * Change Log:\n"," * <br>\n"," * <ul>\n"," * <li>v2.2.1 - Fixed bug using URL_SAFE and ORDERED encodings. Fixed bug\n"," * when using very small files (~&lt; 40 bytes).</li>\n"," * <li>v2.2 - Added some helper methods for encoding/decoding directly from\n"," * one file to the next. Also added a main() method to support command line\n"," * encoding/decoding from one file to the next. Also added these Base64 dialects:\n"," * <ol>\n"," * <li>The default is RFC3548 format.</li>\n"," * <li>Calling Base64.setFormat(Base64.BASE64_FORMAT.URLSAFE_FORMAT) generates\n"," * URL and file name friendly format as described in Section 4 of RFC3548.\n"," * http://www.faqs.org/rfcs/rfc3548.html</li>\n"," * <li>Calling Base64.setFormat(Base64.BASE64_FORMAT.ORDERED_FORMAT) generates\n"," * URL and file name friendly format that preserves lexical ordering as described\n"," * in http://www.faqs.org/qa/rfcc-1940.html</li>\n"," * </ol>\n"," * Special thanks to Jim Kellerman at <a href=\"http://www.powerset.com/\">http://www.powerset.com/</a>\n"," * for contributing the new Base64 dialects.\n"," * </li>\n"," *\n"," * <li>v2.1 - Cleaned up javadoc comments and unused variables and methods. Added\n"," * some convenience methods for reading and writing to and from files.</li>\n"," * <li>v2.0.2 - Now specifies UTF-8 encoding in places where the code fails on systems\n"," * with other encodings (like EBCDIC).</li>\n"," * <li>v2.0.1 - Fixed an error when decoding a single byte, that is, when the\n"," * encoded data was a single byte.</li>\n"," * <li>v2.0 - I got rid of methods that used booleans to set options.\n"," * Now everything is more consolidated and cleaner. The code now detects\n"," * when data that's being decoded is gzip-compressed and will decompress it\n"," * automatically. Generally things are cleaner. You'll probably have to\n"," * change some method calls that you were making to support the new\n"," * options format (<tt>int</tt>s that you \"OR\" together).</li>\n"," * <li>v1.5.1 - Fixed bug when decompressing and decoding to a\n"," * byte[] using <tt>decode( String s, boolean gzipCompressed )</tt>.\n"," * Added the ability to \"suspend\" encoding in the Output Stream so\n"," * you can turn on and off the encoding if you need to embed base64\n"," * data in an otherwise \"normal\" stream (like an XML file).</li>\n"," * <li>v1.5 - Output stream pases on flush() command but doesn't do anything itself.\n"," * This helps when using GZIP streams.\n"," * Added the ability to GZip-compress objects before encoding them.</li>\n"," * <li>v1.4 - Added helper methods to read/write files.</li>\n"," * <li>v1.3.6 - Fixed OutputStream.flush() so that 'position' is reset.</li>\n"," * <li>v1.3.5 - Added flag to turn on and off line breaks. Fixed bug in input stream\n"," * where last buffer being read, if not completely full, was not returned.</li>\n"," * <li>v1.3.4 - Fixed when \"improperly padded stream\" error was thrown at the wrong time.</li>\n"," * <li>v1.3.3 - Fixed I/O streams which were totally messed up.</li>\n"," * </ul>\n"," * <br>\n"," * I am placing this code in the Public Domain. Do with it as you will.\n"," * This software comes with no guarantees or warranties but with\n"," * plenty of well-wishing instead!\n"," * Please visit <a href=\"http://iharder.net/base64\">http://iharder.net/base64</a>\n"," * periodically to check for updates or to contribute improvements.\n"," *\n"," * @author Robert Harder\n"," * @author rob@iharder.net\n"," * @version 2.2.1\n"," */\n","public class Base64 {\n","\n","    /* ********  P U B L I C   F I E L D S  ******** */\n","\n","\n","    /**\n","     * No options specified. Value is zero.\n","     */\n","    public static final int NO_OPTIONS = 0;\n","\n","    /**\n","     * Specify encoding.\n","     */\n","    public static final int ENCODE = 1;\n","\n","\n","    /**\n","     * Specify decoding.\n","     */\n","    public static final int DECODE = 0;\n","\n","\n","    /**\n","     * Specify that data should be gzip-compressed.\n","     */\n","    public static final int GZIP = 2;\n","\n","\n","    /**\n","     * Don't break lines when encoding (violates strict Base64 specification)\n","     */\n","    public static final int DONT_BREAK_LINES = 8;\n","\n","    /**\n","     * Encode using Base64-like encoding that is URL- and Filename-safe as described\n","     * in Section 4 of RFC3548:\n","     * <a href=\"http://www.faqs.org/rfcs/rfc3548.html\">http://www.faqs.org/rfcs/rfc3548.html</a>.\n","     * It is important to note that data encoded this way is <em>not</em> officially valid Base64,\n","     * or at the very least should not be called Base64 without also specifying that is\n","     * was encoded using the URL- and Filename-safe dialect.\n","     */\n","    public static final int URL_SAFE = 16;\n","\n","\n","    /**\n","     * Encode using the special \"ordered\" dialect of Base64 described here:\n","     * <a href=\"http://www.faqs.org/qa/rfcc-1940.html\">http://www.faqs.org/qa/rfcc-1940.html</a>.\n","     */\n","    public static final int ORDERED = 32;\n","\n","\n","    /* ********  P R I V A T E   F I E L D S  ******** */\n","\n","    /**\n","     * The Logger instance.\n","     */\n","    private static final Logger LOGGER = LoggerFactory.getLogger(Base64.class);\n","\n","    /**\n","     * Maximum line length (76) of Base64 output.\n","     */\n","    private static final int MAX_LINE_LENGTH = 76;\n","\n","\n","    /**\n","     * The equals sign (=) as a byte.\n","     */\n","    private static final byte EQUALS_SIGN = (byte) '=';\n","\n","\n","    /**\n","     * The new line character (\\n) as a byte.\n","     */\n","    private static final byte NEW_LINE = (byte) '\\n';\n","\n","\n","    /**\n","     * Preferred encoding.\n","     */\n","    private static final String PREFERRED_ENCODING = \"UTF-8\";\n","\n","\n","    // I think I end up not using the BAD_ENCODING indicator.\n","    //private static final byte BAD_ENCODING    = -9; // Indicates error in encoding\n","    private static final byte WHITE_SPACE_ENC = -5; // Indicates white space in encoding\n","    private static final byte EQUALS_SIGN_ENC = -1; // Indicates equals sign in encoding\n","\n","\n","    /* ********  S T A N D A R D   B A S E 6 4   A L P H A B E T  ******** */\n","\n","    /**\n","     * The 64 valid Base64 values.\n","     */\n","    //private static final byte[] ALPHABET;\n","    /* Host platform me be something funny like EBCDIC, so we hardcode these values. */\n","    private static final byte[] _STANDARD_ALPHABET =\n","            {\n","                    (byte) 'A', (byte) 'B', (byte) 'C', (byte) 'D', (byte) 'E', (byte) 'F', (byte) 'G',\n","                    (byte) 'H', (byte) 'I', (byte) 'J', (byte) 'K', (byte) 'L', (byte) 'M', (byte) 'N',\n","                    (byte) 'O', (byte) 'P', (byte) 'Q', (byte) 'R', (byte) 'S', (byte) 'T', (byte) 'U',\n","                    (byte) 'V', (byte) 'W', (byte) 'X', (byte) 'Y', (byte) 'Z',\n","                    (byte) 'a', (byte) 'b', (byte) 'c', (byte) 'd', (byte) 'e', (byte) 'f', (byte) 'g',\n","                    (byte) 'h', (byte) 'i', (byte) 'j', (byte) 'k', (byte) 'l', (byte) 'm', (byte) 'n',\n","                    (byte) 'o', (byte) 'p', (byte) 'q', (byte) 'r', (byte) 's', (byte) 't', (byte) 'u',\n","                    (byte) 'v', (byte) 'w', (byte) 'x', (byte) 'y', (byte) 'z',\n","                    (byte) '0', (byte) '1', (byte) '2', (byte) '3', (byte) '4', (byte) '5',\n","                    (byte) '6', (byte) '7', (byte) '8', (byte) '9', (byte) '+', (byte) '/'\n","            };\n","\n","\n","    /**\n","     * Translates a Base64 value to either its 6-bit reconstruction value\n","     * or a negative number indicating some other meaning.\n","     **/\n","    private static final byte[] _STANDARD_DECODABET =\n","            {\n","                    -9, -9, -9, -9, -9, -9, -9, -9, -9,                 // Decimal  0 -  8\n","                    -5, -5,                                      // Whitespace: Tab and Linefeed\n","                    -9, -9,                                      // Decimal 11 - 12\n","                    -5,                                         // Whitespace: Carriage Return\n","                    -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,     // Decimal 14 - 26\n","                    -9, -9, -9, -9, -9,                             // Decimal 27 - 31\n","                    -5,                                         // Whitespace: Space\n","                    -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,              // Decimal 33 - 42\n","                    62,                                         // Plus sign at decimal 43\n","                    -9, -9, -9,                                   // Decimal 44 - 46\n","                    63,                                         // Slash at decimal 47\n","                    52, 53, 54, 55, 56, 57, 58, 59, 60, 61,              // Numbers zero through nine\n","                    -9, -9, -9,                                   // Decimal 58 - 60\n","                    -1,                                         // Equals sign at decimal 61\n","                    -9, -9, -9,                                      // Decimal 62 - 64\n","                    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,            // Letters 'A' through 'N'\n","                    14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,        // Letters 'O' through 'Z'\n","                    -9, -9, -9, -9, -9, -9,                          // Decimal 91 - 96\n","                    26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,     // Letters 'a' through 'm'\n","                    39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,     // Letters 'n' through 'z'\n","                    -9, -9, -9, -9                                 // Decimal 123 - 126\n","        /*,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 127 - 139\n","        -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 140 - 152\n","        -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 153 - 165\n","        -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 166 - 178\n","        -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 179 - 191\n","        -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 192 - 204\n","        -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 205 - 217\n","        -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 218 - 230\n","        -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 231 - 243\n","        -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9         // Decimal 244 - 255 */\n","            };\n","\n","\n","    /* ********  U R L   S A F E   B A S E 6 4   A L P H A B E T  ******** */\n","\n","    /**\n","     * Used in the URL- and Filename-safe dialect described in Section 4 of RFC3548:\n","     * <a href=\"http://www.faqs.org/rfcs/rfc3548.html\">http://www.faqs.org/rfcs/rfc3548.html</a>.\n","     * Notice that the last two bytes become \"hyphen\" and \"underscore\" instead of \"plus\" and \"slash.\"\n","     */\n","    private static final byte[] _URL_SAFE_ALPHABET =\n","            {\n","                    (byte) 'A', (byte) 'B', (byte) 'C', (byte) 'D', (byte) 'E', (byte) 'F', (byte) 'G',\n","                    (byte) 'H', (byte) 'I', (byte) 'J', (byte) 'K', (byte) 'L', (byte) 'M', (byte) 'N',\n","                    (byte) 'O', (byte) 'P', (byte) 'Q', (byte) 'R', (byte) 'S', (byte) 'T', (byte) 'U',\n","                    (byte) 'V', (byte) 'W', (byte) 'X', (byte) 'Y', (byte) 'Z',\n","                    (byte) 'a', (byte) 'b', (byte) 'c', (byte) 'd', (byte) 'e', (byte) 'f', (byte) 'g',\n","                    (byte) 'h', (byte) 'i', (byte) 'j', (byte) 'k', (byte) 'l', (byte) 'm', (byte) 'n',\n","                    (byte) 'o', (byte) 'p', (byte) 'q', (byte) 'r', (byte) 's', (byte) 't', (byte) 'u',\n","                    (byte) 'v', (byte) 'w', (byte) 'x', (byte) 'y', (byte) 'z',\n","                    (byte) '0', (byte) '1', (byte) '2', (byte) '3', (byte) '4', (byte) '5',\n","                    (byte) '6', (byte) '7', (byte) '8', (byte) '9', (byte) '-', (byte) '_'\n","            };\n","\n","    /**\n","     * Used in decoding URL- and Filename-safe dialects of Base64.\n","     */\n","    private static final byte[] _URL_SAFE_DECODABET =\n","            {\n","                    -9, -9, -9, -9, -9, -9, -9, -9, -9,                 // Decimal  0 -  8\n","                    -5, -5,                                      // Whitespace: Tab and Linefeed\n","                    -9, -9,                                      // Decimal 11 - 12\n","                    -5,                                         // Whitespace: Carriage Return\n","                    -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,     // Decimal 14 - 26\n","                    -9, -9, -9, -9, -9,                             // Decimal 27 - 31\n","                    -5,                                         // Whitespace: Space\n","                    -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,              // Decimal 33 - 42\n","                    -9,                                         // Plus sign at decimal 43\n","                    -9,                                         // Decimal 44\n","                    62,                                         // Minus sign at decimal 45\n","                    -9,                                         // Decimal 46\n","                    -9,                                         // Slash at decimal 47\n","                    52, 53, 54, 55, 56, 57, 58, 59, 60, 61,              // Numbers zero through nine\n","                    -9, -9, -9,                                   // Decimal 58 - 60\n","                    -1,                                         // Equals sign at decimal 61\n","                    -9, -9, -9,                                   // Decimal 62 - 64\n","                    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,            // Letters 'A' through 'N'\n","                    14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,        // Letters 'O' through 'Z'\n","                    -9, -9, -9, -9,                                // Decimal 91 - 94\n","                    63,                                         // Underscore at decimal 95\n","                    -9,                                         // Decimal 96\n","                    26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,     // Letters 'a' through 'm'\n","                    39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,     // Letters 'n' through 'z'\n","                    -9, -9, -9, -9                                 // Decimal 123 - 126\n","      /*,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 127 - 139\n","      -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 140 - 152\n","      -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 153 - 165\n","      -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 166 - 178\n","      -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 179 - 191\n","      -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 192 - 204\n","      -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 205 - 217\n","      -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 218 - 230\n","      -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 231 - 243\n","      -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9         // Decimal 244 - 255 */\n","            };\n","\n","\n","\n","    /* ********  O R D E R E D   B A S E 6 4   A L P H A B E T  ******** */\n","\n","    /**\n","     * I don't get the point of this technique, but it is described here:\n","     * <a href=\"http://www.faqs.org/qa/rfcc-1940.html\">http://www.faqs.org/qa/rfcc-1940.html</a>.\n","     */\n","    private static final byte[] _ORDERED_ALPHABET =\n","            {\n","                    (byte) '-',\n","                    (byte) '0', (byte) '1', (byte) '2', (byte) '3', (byte) '4',\n","                    (byte) '5', (byte) '6', (byte) '7', (byte) '8', (byte) '9',\n","                    (byte) 'A', (byte) 'B', (byte) 'C', (byte) 'D', (byte) 'E', (byte) 'F', (byte) 'G',\n","                    (byte) 'H', (byte) 'I', (byte) 'J', (byte) 'K', (byte) 'L', (byte) 'M', (byte) 'N',\n","                    (byte) 'O', (byte) 'P', (byte) 'Q', (byte) 'R', (byte) 'S', (byte) 'T', (byte) 'U',\n","                    (byte) 'V', (byte) 'W', (byte) 'X', (byte) 'Y', (byte) 'Z',\n","                    (byte) '_',\n","                    (byte) 'a', (byte) 'b', (byte) 'c', (byte) 'd', (byte) 'e', (byte) 'f', (byte) 'g',\n","                    (byte) 'h', (byte) 'i', (byte) 'j', (byte) 'k', (byte) 'l', (byte) 'm', (byte) 'n',\n","                    (byte) 'o', (byte) 'p', (byte) 'q', (byte) 'r', (byte) 's', (byte) 't', (byte) 'u',\n","                    (byte) 'v', (byte) 'w', (byte) 'x', (byte) 'y', (byte) 'z'\n","            };\n","\n","    /**\n","     * Used in decoding the \"ordered\" dialect of Base64.\n","     */\n","    private static final byte[] _ORDERED_DECODABET =\n","            {\n","                    -9, -9, -9, -9, -9, -9, -9, -9, -9,                 // Decimal  0 -  8\n","                    -5, -5,                                      // Whitespace: Tab and Linefeed\n","                    -9, -9,                                      // Decimal 11 - 12\n","                    -5,                                         // Whitespace: Carriage Return\n","                    -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,     // Decimal 14 - 26\n","                    -9, -9, -9, -9, -9,                             // Decimal 27 - 31\n","                    -5,                                         // Whitespace: Space\n","                    -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,              // Decimal 33 - 42\n","                    -9,                                         // Plus sign at decimal 43\n","                    -9,                                         // Decimal 44\n","                    0,                                          // Minus sign at decimal 45\n","                    -9,                                         // Decimal 46\n","                    -9,                                         // Slash at decimal 47\n","                    1, 2, 3, 4, 5, 6, 7, 8, 9, 10,                       // Numbers zero through nine\n","                    -9, -9, -9,                                   // Decimal 58 - 60\n","                    -1,                                         // Equals sign at decimal 61\n","                    -9, -9, -9,                                   // Decimal 62 - 64\n","                    11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,     // Letters 'A' through 'M'\n","                    24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36,     // Letters 'N' through 'Z'\n","                    -9, -9, -9, -9,                                // Decimal 91 - 94\n","                    37,                                         // Underscore at decimal 95\n","                    -9,                                         // Decimal 96\n","                    38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,     // Letters 'a' through 'm'\n","                    51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,     // Letters 'n' through 'z'\n","                    -9, -9, -9, -9                                 // Decimal 123 - 126\n","      /*,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 127 - 139\n","        -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 140 - 152\n","        -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 153 - 165\n","        -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 166 - 178\n","        -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 179 - 191\n","        -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 192 - 204\n","        -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 205 - 217\n","        -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 218 - 230\n","        -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 231 - 243\n","        -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9         // Decimal 244 - 255 */\n","            };\n","\n","\n","    /* ********  D E T E R M I N E   W H I C H   A L H A B E T  ******** */\n","\n","\n","    /**\n","     * Returns one of the _SOMETHING_ALPHABET byte arrays depending on\n","     * the options specified.\n","     * It's possible, though silly, to specify ORDERED and URLSAFE\n","     * in which case one of them will be picked, though there is\n","     * no guarantee as to which one will be picked.\n","     */\n","    private static byte[] getAlphabet(int options) {\n","        if ((options & URL_SAFE) == URL_SAFE) return _URL_SAFE_ALPHABET;\n","        else if ((options & ORDERED) == ORDERED) return _ORDERED_ALPHABET;\n","        else return _STANDARD_ALPHABET;\n","\n","    }    // end getAlphabet\n","\n","\n","    /**\n","     * Returns one of the _SOMETHING_DECODABET byte arrays depending on\n","     * the options specified.\n","     * It's possible, though silly, to specify ORDERED and URL_SAFE\n","     * in which case one of them will be picked, though there is\n","     * no guarantee as to which one will be picked.\n","     */\n","    private static byte[] getDecodabet(int options) {\n","        if ((options & URL_SAFE) == URL_SAFE) return _URL_SAFE_DECODABET;\n","        else if ((options & ORDERED) == ORDERED) return _ORDERED_DECODABET;\n","        else return _STANDARD_DECODABET;\n","\n","    }    // end getAlphabet\n","\n","\n","    /**\n","     * Defeats instantiation.\n","     */\n","    private Base64() {\n","    }\n","\n","\n","    /**\n","     * Encodes or decodes two files from the command line;\n","     * <strong>feel free to delete this method (in fact you probably should)\n","     * if you're embedding this code into a larger program.</strong>\n","     public static final void main( String[] args ) {\n","     if( args.length < 3 ){\n","     usage(\"Not enough arguments.\");\n","     }   // end if: args.length < 3\n","     else {\n","     String flag = args[0];\n","     String infile = args[1];\n","     String outfile = args[2];\n","     if( flag.equals( \"-e\" ) ){\n","     Base64.encodeFileToFile( infile, outfile );\n","     }   // end if: encode\n","     else if( flag.equals( \"-d\" ) ) {\n","     Base64.decodeFileToFile( infile, outfile );\n","     }   // end else if: decode\n","     else {\n","     usage( \"Unknown flag: \" + flag );\n","     }   // end else\n","     }   // end else\n","     }   // end main\n","     */\n","\n","    /**\n","     * Prints command line usage.\n","     *\n","     * @param msg A message to include with usage info.\n","     */\n","    private static void usage(String msg) {\n","        System.err.println(msg);\n","        System.err.println(\"Usage: java Base64 -e|-d inputfile outputfile\");\n","    }   // end usage\n","\n","\n","    /* ********  E N C O D I N G   M E T H O D S  ******** */\n","\n","\n","    /**\n","     * Encodes up to the first three bytes of array <var>threeBytes</var>\n","     * and returns a four-byte array in Base64 notation.\n","     * The actual number of significant bytes in your array is\n","     * given by <var>numSigBytes</var>.\n","     * The array <var>threeBytes</var> needs only be as big as\n","     * <var>numSigBytes</var>.\n","     * Code can reuse a byte array by passing a four-byte array as <var>b4</var>.\n","     *\n","     * @param b4          A reusable byte array to reduce array instantiation\n","     * @param threeBytes  the array to convert\n","     * @param numSigBytes the number of significant bytes in your array\n","     * @return four byte array in Base64 notation.\n","     * @since 1.5.1\n","     */\n","    private static byte[] encode3to4(byte[] b4, byte[] threeBytes, int numSigBytes, int options) {\n","        encode3to4(threeBytes, 0, numSigBytes, b4, 0, options);\n","        return b4;\n","    }   // end encode3to4\n","\n","\n","    /**\n","     * Encodes up to three bytes of the array <var>source</var>\n","     * and writes the resulting four Base64 bytes to <var>destination</var>.\n","     * The source and destination arrays can be manipulated\n","     * anywhere along their length by specifying\n","     * <var>srcOffset</var> and <var>destOffset</var>.\n","     * This method does not check to make sure your arrays\n","     * are large enough to accomodate <var>srcOffset</var> + 3 for\n","     * the <var>source</var> array or <var>destOffset</var> + 4 for\n","     * the <var>destination</var> array.\n","     * The actual number of significant bytes in your array is\n","     * given by <var>numSigBytes</var>.\n","     * <p>\n","     * This is the lowest level of the encoding methods with\n","     * all possible parameters.\n","     *\n","     * @param source      the array to convert\n","     * @param srcOffset   the index where conversion begins\n","     * @param numSigBytes the number of significant bytes in your array\n","     * @param destination the array to hold the conversion\n","     * @param destOffset  the index where output will be put\n","     * @return the <var>destination</var> array\n","     * @since 1.3\n","     */\n","    private static byte[] encode3to4(\n","            byte[] source, int srcOffset, int numSigBytes,\n","            byte[] destination, int destOffset, int options) {\n","        byte[] ALPHABET = getAlphabet(options);\n","\n","        //           1         2         3\n","        // 01234567890123456789012345678901 Bit position\n","        // --------000000001111111122222222 Array position from threeBytes\n","        // --------|    ||    ||    ||    | Six bit groups to index ALPHABET\n","        //          >>18  >>12  >> 6  >> 0  Right shift necessary\n","        //                0x3f  0x3f  0x3f  Additional AND\n","\n","        // Create buffer with zero-padding if there are only one or two\n","        // significant bytes passed in the array.\n","        // We have to shift left 24 in order to flush out the 1's that appear\n","        // when Java treats a value as negative that is cast from a byte to an int.\n","        int inBuff = (numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0)\n","                | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0)\n","                | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);\n","\n","        switch (numSigBytes) {\n","            case 3:\n","                destination[destOffset] = ALPHABET[(inBuff >>> 18)];\n","                destination[destOffset + 1] = ALPHABET[(inBuff >>> 12) & 0x3f];\n","                destination[destOffset + 2] = ALPHABET[(inBuff >>> 6) & 0x3f];\n","                destination[destOffset + 3] = ALPHABET[(inBuff) & 0x3f];\n","                return destination;\n","\n","            case 2:\n","                destination[destOffset] = ALPHABET[(inBuff >>> 18)];\n","                destination[destOffset + 1] = ALPHABET[(inBuff >>> 12) & 0x3f];\n","                destination[destOffset + 2] = ALPHABET[(inBuff >>> 6) & 0x3f];\n","                destination[destOffset + 3] = EQUALS_SIGN;\n","                return destination;\n","\n","            case 1:\n","                destination[destOffset] = ALPHABET[(inBuff >>> 18)];\n","                destination[destOffset + 1] = ALPHABET[(inBuff >>> 12) & 0x3f];\n","                destination[destOffset + 2] = EQUALS_SIGN;\n","                destination[destOffset + 3] = EQUALS_SIGN;\n","                return destination;\n","\n","            default:\n","                return destination;\n","        }   // end switch\n","    }   // end encode3to4\n","\n","\n","    /**\n","     * Serializes an object and returns the Base64-encoded\n","     * version of that serialized object. If the object\n","     * cannot be serialized or there is another error,\n","     * the method will return <tt>null</tt>.\n","     * The object is not GZip-compressed before being encoded.\n","     *\n","     * @param serializableObject The object to encode\n","     * @return The Base64-encoded object\n","     * @since 1.4\n","     */\n","    public static String encodeObject(java.io.Serializable serializableObject) {\n","        return encodeObject(serializableObject, NO_OPTIONS);\n","    }   // end encodeObject\n","\n","\n","    /**\n","     * Serializes an object and returns the Base64-encoded\n","     * version of that serialized object. If the object\n","     * cannot be serialized or there is another error,\n","     * the method will return <tt>null</tt>.\n","     * <br>\n","     * Valid options:<pre>\n","     *   GZIP: gzip-compresses object before encoding it.\n","     *   DONT_BREAK_LINES: don't break lines at 76 characters\n","     *     <i>Note: Technically, this makes your encoding non-compliant.</i>\n","     * </pre>\n","     * <br>\n","     * Example: <code>encodeObject( myObj, Base64.GZIP )</code> or\n","     * <br>\n","     * Example: <code>encodeObject( myObj, Base64.GZIP | Base64.DONT_BREAK_LINES )</code>\n","     *\n","     * @param serializableObject The object to encode\n","     * @param options            Specified options\n","     * @return The Base64-encoded object\n","     * @see Base64#GZIP\n","     * @see Base64#DONT_BREAK_LINES\n","     * @since 2.0\n","     */\n","    public static String encodeObject(java.io.Serializable serializableObject, int options) {\n","        // Streams\n","        java.io.ByteArrayOutputStream baos = null;\n","        java.io.OutputStream b64os = null;\n","        java.io.ObjectOutputStream oos = null;\n","        java.util.zip.GZIPOutputStream gzos = null;\n","\n","        // Isolate options\n","        int gzip = (options & GZIP);\n","        int dontBreakLines = (options & DONT_BREAK_LINES);\n","\n","        try {\n","            // ObjectOutputStream -> (GZIP) -> Base64 -> ByteArrayOutputStream\n","            baos = new java.io.ByteArrayOutputStream();\n","            b64os = new Base64.OutputStream(baos, ENCODE | options);\n","\n","            // GZip?\n","            if (gzip == GZIP) {\n","                gzos = new java.util.zip.GZIPOutputStream(b64os);\n","                oos = new java.io.ObjectOutputStream(gzos);\n","            }   // end if: gzip\n","            else\n","                oos = new java.io.ObjectOutputStream(b64os);\n","\n","            oos.writeObject(serializableObject);\n","        }   // end try\n","        catch (java.io.IOException e) {\n","            LOGGER.debug(CommonsLogMessageConstant.BASE_64_EXCEPTION , e);\n","            return null;\n","        }   // end catch\n","        finally {\n","            try {\n","                oos.close();\n","            } catch (Exception e) {\n","            }\n","            try {\n","                gzos.close();\n","            } catch (Exception e) {\n","            }\n","            try {\n","                b64os.close();\n","            } catch (Exception e) {\n","            }\n","            try {\n","                baos.close();\n","            } catch (Exception e) {\n","            }\n","        }   // end finally\n","\n","        // Return value according to relevant encoding.\n","        try {\n","            return new String(baos.toByteArray(), PREFERRED_ENCODING);\n","        }   // end try\n","        catch (java.io.UnsupportedEncodingException uue) {\n","            return new String(baos.toByteArray());\n","        }   // end catch\n","\n","    }   // end encode\n","\n","\n","    /**\n","     * Encodes a byte array into Base64 notation.\n","     * Does not GZip-compress data.\n","     *\n","     * @param source The data to convert\n","     * @return The Base64-encoded data\n","     * @since 1.4\n","     */\n","    public static String encodeBytes(byte[] source) {\n","        return encodeBytes(source, 0, source.length, NO_OPTIONS);\n","    }   // end encodeBytes\n","\n","\n","    /**\n","     * Encodes a byte array into Base64 notation.\n","     * <p>\n","     * Valid options:<pre>\n","     *   GZIP: gzip-compresses object before encoding it.\n","     *   DONT_BREAK_LINES: don't break lines at 76 characters\n","     *     <i>Note: Technically, this makes your encoding non-compliant.</i>\n","     * </pre>\n","     * <p>\n","     * Example: <code>encodeBytes( myData, Base64.GZIP )</code> or\n","     * <p>\n","     * Example: <code>encodeBytes( myData, Base64.GZIP | Base64.DONT_BREAK_LINES )</code>\n","     *\n","     * @param source  The data to convert\n","     * @param options Specified options\n","     * @return        The Base64-encoded data\n","     * @see Base64#GZIP\n","     * @see Base64#DONT_BREAK_LINES\n","     * @since 2.0\n","     */\n","    public static String encodeBytes(byte[] source, int options) {\n","        return encodeBytes(source, 0, source.length, options);\n","    }   // end encodeBytes\n","\n","\n","    /**\n","     * Encodes a byte array into Base64 notation.\n","     * Does not GZip-compress data.\n","     *\n","     * @param source The data to convert\n","     * @param off    Offset in array where conversion should begin\n","     * @param len    Length of data to convert\n","     * @return       The Base64-encoded data\n","     * @since 1.4\n","     */\n","    public static String encodeBytes(byte[] source, int off, int len) {\n","        return encodeBytes(source, off, len, NO_OPTIONS);\n","    }   // end encodeBytes\n","\n","\n","    /**\n","     * Encodes a byte array into Base64 notation.\n","     * <p>\n","     * Valid options:<pre>\n","     *   GZIP: gzip-compresses object before encoding it.\n","     *   DONT_BREAK_LINES: don't break lines at 76 characters\n","     *     <i>Note: Technically, this makes your encoding non-compliant.</i>\n","     * </pre>\n","     * <p>\n","     * Example: <code>encodeBytes( myData, Base64.GZIP )</code> or\n","     * <p>\n","     * Example: <code>encodeBytes( myData, Base64.GZIP | Base64.DONT_BREAK_LINES )</code>\n","     *\n","     * @param source  The data to convert\n","     * @param off     Offset in array where conversion should begin\n","     * @param len     Length of data to convert\n","     * @param options Specified options\n","     *                alphabet type is pulled from this (standard, url-safe, ordered)\n","     * @return The Base64-encoded data\n","     * @see Base64#GZIP\n","     * @see Base64#DONT_BREAK_LINES\n","     * @since 2.0\n","     */\n","    public static String encodeBytes(byte[] source, int off, int len, int options) {\n","        // Isolate options\n","        int dontBreakLines = (options & DONT_BREAK_LINES);\n","        int gzip = (options & GZIP);\n","\n","        // Compress?\n","        if (gzip == GZIP) {\n","            java.io.ByteArrayOutputStream baos = null;\n","            java.util.zip.GZIPOutputStream gzos = null;\n","            Base64.OutputStream b64os = null;\n","\n","\n","            try {\n","                // GZip -> Base64 -> ByteArray\n","                baos = new java.io.ByteArrayOutputStream();\n","                b64os = new Base64.OutputStream(baos, ENCODE | options);\n","                gzos = new java.util.zip.GZIPOutputStream(b64os);\n","\n","                gzos.write(source, off, len);\n","                gzos.close();\n","            }   // end try\n","            catch (java.io.IOException e) {\n","                LOGGER.debug(CommonsLogMessageConstant.BASE_64_EXCEPTION , e);\n","                return null;\n","            }   // end catch\n","            finally {\n","                try {\n","                    gzos.close();\n","                } catch (Exception e) {\n","                }\n","                try {\n","                    b64os.close();\n","                } catch (Exception e) {\n","                }\n","                try {\n","                    baos.close();\n","                } catch (Exception e) {\n","                }\n","            }   // end finally\n","\n","            // Return value according to relevant encoding.\n","            try {\n","                return new String(baos.toByteArray(), PREFERRED_ENCODING);\n","            }   // end try\n","            catch (java.io.UnsupportedEncodingException uue) {\n","                return new String(baos.toByteArray());\n","            }   // end catch\n","        }   // end if: compress\n","\n","        // Else, don't compress. Better not to use streams at all then.\n","        else {\n","            // Convert option to boolean in way that code likes it.\n","            boolean breakLines = dontBreakLines == 0;\n","\n","            int len43 = len * 4 / 3;\n","            byte[] outBuff = new byte[(len43)                      // Main 4:3\n","                    + ((len % 3) > 0 ? 4 : 0)      // Account for padding\n","                    + (breakLines ? (len43 / MAX_LINE_LENGTH) : 0)]; // New lines\n","            int d = 0;\n","            int e = 0;\n","            int len2 = len - 2;\n","            int lineLength = 0;\n","            for (; d < len2; d += 3, e += 4) {\n","                encode3to4(source, d + off, 3, outBuff, e, options);\n","\n","                lineLength += 4;\n","                if (breakLines && lineLength == MAX_LINE_LENGTH) {\n","                    outBuff[e + 4] = NEW_LINE;\n","                    e++;\n","                    lineLength = 0;\n","                }   // end if: end of line\n","            }   // en dfor: each piece of array\n","\n","            if (d < len) {\n","                encode3to4(source, d + off, len - d, outBuff, e, options);\n","                e += 4;\n","            }   // end if: some padding needed\n","\n","\n","            // Return value according to relevant encoding.\n","            try {\n","                return new String(outBuff, 0, e, PREFERRED_ENCODING);\n","            }   // end try\n","            catch (java.io.UnsupportedEncodingException uue) {\n","                return new String(outBuff, 0, e);\n","            }   // end catch\n","\n","        }   // end else: don't compress\n","\n","    }   // end encodeBytes\n","\n","\n","\n","\n","\n","    /* ********  D E C O D I N G   M E T H O D S  ******** */\n","\n","\n","    /**\n","     * Decodes four bytes from array <var>source</var>\n","     * and writes the resulting bytes (up to three of them)\n","     * to <var>destination</var>.\n","     * The source and destination arrays can be manipulated\n","     * anywhere along their length by specifying\n","     * <var>srcOffset</var> and <var>destOffset</var>.\n","     * This method does not check to make sure your arrays\n","     * are large enough to accomodate <var>srcOffset</var> + 4 for\n","     * the <var>source</var> array or <var>destOffset</var> + 3 for\n","     * the <var>destination</var> array.\n","     * This method returns the actual number of bytes that\n","     * were converted from the Base64 encoding.\n","     * <p>\n","     * This is the lowest level of the decoding methods with\n","     * all possible parameters.\n","     *\n","     * @param source      the array to convert\n","     * @param srcOffset   the index where conversion begins\n","     * @param destination the array to hold the conversion\n","     * @param destOffset  the index where output will be put\n","     * @param options     alphabet type is pulled from this (standard, url-safe, ordered)\n","     * @return the number of decoded bytes converted\n","     * @since 1.3\n","     */\n","    private static int decode4to3(byte[] source, int srcOffset, byte[] destination, int destOffset, int options) {\n","        byte[] DECODABET = getDecodabet(options);\n","\n","        // Example: Dk==\n","        if (source[srcOffset + 2] == EQUALS_SIGN) {\n","            // Two ways to do the same thing. Don't know which way I like best.\n","            //int outBuff =   ( ( DECODABET[ source[ srcOffset    ] ] << 24 ) >>>  6 )\n","            //              | ( ( DECODABET[ source[ srcOffset + 1] ] << 24 ) >>> 12 );\n","            int outBuff = ((DECODABET[source[srcOffset]] & 0xFF) << 18)\n","                    | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12);\n","\n","            destination[destOffset] = (byte) (outBuff >>> 16);\n","            return 1;\n","        }\n","\n","        // Example: DkL=\n","        else if (source[srcOffset + 3] == EQUALS_SIGN) {\n","            // Two ways to do the same thing. Don't know which way I like best.\n","            //int outBuff =   ( ( DECODABET[ source[ srcOffset     ] ] << 24 ) >>>  6 )\n","            //              | ( ( DECODABET[ source[ srcOffset + 1 ] ] << 24 ) >>> 12 )\n","            //              | ( ( DECODABET[ source[ srcOffset + 2 ] ] << 24 ) >>> 18 );\n","            int outBuff = ((DECODABET[source[srcOffset]] & 0xFF) << 18)\n","                    | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12)\n","                    | ((DECODABET[source[srcOffset + 2]] & 0xFF) << 6);\n","\n","            destination[destOffset] = (byte) (outBuff >>> 16);\n","            destination[destOffset + 1] = (byte) (outBuff >>> 8);\n","            return 2;\n","        }\n","\n","        // Example: DkLE\n","        else {\n","            try {\n","                // Two ways to do the same thing. Don't know which way I like best.\n","                //int outBuff =   ( ( DECODABET[ source[ srcOffset     ] ] << 24 ) >>>  6 )\n","                //              | ( ( DECODABET[ source[ srcOffset + 1 ] ] << 24 ) >>> 12 )\n","                //              | ( ( DECODABET[ source[ srcOffset + 2 ] ] << 24 ) >>> 18 )\n","                //              | ( ( DECODABET[ source[ srcOffset + 3 ] ] << 24 ) >>> 24 );\n","                int outBuff = ((DECODABET[source[srcOffset]] & 0xFF) << 18)\n","                        | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12)\n","                        | ((DECODABET[source[srcOffset + 2]] & 0xFF) << 6)\n","                        | ((DECODABET[source[srcOffset + 3]] & 0xFF));\n","\n","\n","                destination[destOffset] = (byte) (outBuff >> 16);\n","                destination[destOffset + 1] = (byte) (outBuff >> 8);\n","                destination[destOffset + 2] = (byte) (outBuff);\n","\n","                return 3;\n","            } catch (Exception e) {\n","                System.out.println(\"\" + source[srcOffset] + \": \" + (DECODABET[source[srcOffset]]));\n","                System.out.println(\"\" + source[srcOffset + 1] + \": \" + (DECODABET[source[srcOffset + 1]]));\n","                System.out.println(\"\" + source[srcOffset + 2] + \": \" + (DECODABET[source[srcOffset + 2]]));\n","                System.out.println(\"\" + source[srcOffset + 3] + \": \" + (DECODABET[source[srcOffset + 3]]));\n","                return -1;\n","            }   // end catch\n","        }\n","    }   // end decodeToBytes\n","\n","\n","    /**\n","     * Very low-level access to decoding ASCII characters in\n","     * the form of a byte array. Does not support automatically\n","     * gunzipping or any other \"fancy\" features.\n","     *\n","     * @param source    The Base64 encoded data\n","     * @param off       The offset of where to begin decoding\n","     * @param len       The length of characters to decode\n","     * @param options   The options when decoding\n","     * @return decoded data\n","     * @since 1.3\n","     */\n","    public static byte[] decode(byte[] source, int off, int len, int options) {\n","        byte[] DECODABET = getDecodabet(options);\n","\n","        int len34 = len * 3 / 4;\n","        byte[] outBuff = new byte[len34]; // Upper limit on size of output\n","        int outBuffPosn = 0;\n","\n","        byte[] b4 = new byte[4];\n","        int b4Posn = 0;\n","        int i = 0;\n","        byte sbiCrop = 0;\n","        byte sbiDecode = 0;\n","        for (i = off; i < off + len; i++) {\n","            sbiCrop = (byte) (source[i] & 0x7f); // Only the low seven bits\n","            sbiDecode = DECODABET[sbiCrop];\n","\n","            if (sbiDecode >= WHITE_SPACE_ENC) // White space, Equals sign or better\n","            {\n","                if (sbiDecode >= EQUALS_SIGN_ENC) {\n","                    b4[b4Posn++] = sbiCrop;\n","                    if (b4Posn > 3) {\n","                        outBuffPosn += decode4to3(b4, 0, outBuff, outBuffPosn, options);\n","                        b4Posn = 0;\n","\n","                        // If that was the equals sign, break out of 'for' loop\n","                        if (sbiCrop == EQUALS_SIGN)\n","                            break;\n","                    }   // end if: quartet built\n","\n","                }   // end if: equals sign or better\n","\n","            }   // end if: white space, equals sign or better\n","            else {\n","                System.err.println(\"Bad Base64 input character at \" + i + \": \" + source[i] + \"(decimal)\");\n","                return null;\n","            }   // end else:\n","        }   // each input character\n","\n","        byte[] out = new byte[outBuffPosn];\n","        System.arraycopy(outBuff, 0, out, 0, outBuffPosn);\n","        return out;\n","    }   // end decode\n","\n","\n","    /**\n","     * Decodes data from Base64 notation, automatically\n","     * detecting gzip-compressed data and decompressing it.\n","     *\n","     * @param s the string to decode\n","     * @return the decoded data\n","     * @since 1.4\n","     */\n","    public static byte[] decode(String s) {\n","        return decode(s, NO_OPTIONS);\n","    }\n","\n","\n","    /**\n","     * Decodes data from Base64 notation, automatically\n","     * detecting gzip-compressed data and decompressing it.\n","     *\n","     * @param s       the string to decode\n","     * @param options encode options such as URL_SAFE\n","     * @return the decoded data\n","     * @since 1.4\n","     */\n","    public static byte[] decode(String s, int options) {\n","        byte[] bytes;\n","        try {\n","            bytes = s.getBytes(PREFERRED_ENCODING);\n","        }   // end try\n","        catch (java.io.UnsupportedEncodingException uee) {\n","            bytes = s.getBytes();\n","        }   // end catch\n","        //</change>\n","\n","        // Decode\n","        bytes = decode(bytes, 0, bytes.length, options);\n","\n","\n","        // Check to see if it's gzip-compressed\n","        // GZIP Magic Two-Byte Number: 0x8b1f (35615)\n","        if (bytes != null && bytes.length >= 4) {\n","\n","            int head = (bytes[0] & 0xff) | ((bytes[1] << 8) & 0xff00);\n","            if (java.util.zip.GZIPInputStream.GZIP_MAGIC == head) {\n","                java.io.ByteArrayInputStream bais = null;\n","                java.util.zip.GZIPInputStream gzis = null;\n","                java.io.ByteArrayOutputStream baos = null;\n","                byte[] buffer = new byte[2048];\n","                int length = 0;\n","\n","                try {\n","                    baos = new java.io.ByteArrayOutputStream();\n","                    bais = new java.io.ByteArrayInputStream(bytes);\n","                    gzis = new java.util.zip.GZIPInputStream(bais);\n","\n","                    while ((length = gzis.read(buffer)) >= 0) {\n","                        baos.write(buffer, 0, length);\n","                    }   // end while: reading input\n","\n","                    // No error? Get new bytes.\n","                    bytes = baos.toByteArray();\n","\n","                }   // end try\n","                catch (java.io.IOException e) {\n","                    // Just return originally-decoded bytes\n","                }   // end catch\n","                finally {\n","                    try {\n","                        baos.close();\n","                    } catch (Exception e) {\n","                    }\n","                    try {\n","                        gzis.close();\n","                    } catch (Exception e) {\n","                    }\n","                    try {\n","                        bais.close();\n","                    } catch (Exception e) {\n","                    }\n","                }   // end finally\n","\n","            }   // end if: gzipped\n","        }   // end if: bytes.length >= 2\n","\n","        return bytes;\n","    }   // end decode\n","\n","\n","    /**\n","     * Attempts to decode Base64 data and deserialize a Java\n","     * Object within. Returns <tt>null</tt> if there was an error.\n","     *\n","     * @param encodedObject The Base64 data to decode\n","     * @return The decoded and deserialized object\n","     * @since 1.5\n","     */\n","    public static Object decodeToObject(String encodedObject) {\n","        // Decode and gunzip if necessary\n","        byte[] objBytes = decode(encodedObject);\n","\n","        java.io.ByteArrayInputStream bais = null;\n","        java.io.ObjectInputStream ois = null;\n","        Object obj = null;\n","\n","        try {\n","            bais = new java.io.ByteArrayInputStream(objBytes);\n","            ois = new java.io.ObjectInputStream(bais);\n","\n","            obj = ois.readObject();\n","        }   // end try\n","        catch (java.io.IOException e) {\n","            LOGGER.debug(CommonsLogMessageConstant.BASE_64_EXCEPTION , e);\n","        }   // end catch\n","        catch (java.lang.ClassNotFoundException e) {\n","            LOGGER.debug(CommonsLogMessageConstant.BASE_64_EXCEPTION , e);\n","        }   // end catch\n","        finally {\n","            try {\n","                bais.close();\n","            } catch (Exception e) {\n","            }\n","            try {\n","                ois.close();\n","            } catch (Exception e) {\n","            }\n","        }   // end finally\n","\n","        return obj;\n","    }   // end decodeObject\n","\n","\n","    /**\n","     * Convenience method for encoding data to a file.\n","     *\n","     * @param dataToEncode byte array of data to encode in base64 form\n","     * @param filename     Filename for saving encoded data\n","     * @return <tt>true</tt> if successful, <tt>false</tt> otherwise\n","     * @since 2.1\n","     */\n","    public static boolean encodeToFile(byte[] dataToEncode, String filename) {\n","        boolean success = false;\n","        Base64.OutputStream bos = null;\n","        try {\n","            bos = new Base64.OutputStream(\n","                    new java.io.FileOutputStream(filename), Base64.ENCODE);\n","            bos.write(dataToEncode);\n","            success = true;\n","        }   // end try\n","        catch (java.io.IOException e) {\n","\n","            success = false;\n","        }   // end catch: java.io.IOException\n","        finally {\n","            try {\n","                bos.close();\n","            } catch (Exception e) {\n","            }\n","        }   // end finally\n","\n","        return success;\n","    }   // end encodeToFile\n","\n","\n","    /**\n","     * Convenience method for decoding data to a file.\n","     *\n","     * @param dataToDecode Base64-encoded data as a string\n","     * @param filename     Filename for saving decoded data\n","     * @return <tt>true</tt> if successful, <tt>false</tt> otherwise\n","     * @since 2.1\n","     */\n","    public static boolean decodeToFile(String dataToDecode, String filename) {\n","        boolean success = false;\n","        Base64.OutputStream bos = null;\n","        try {\n","            bos = new Base64.OutputStream(\n","                    new java.io.FileOutputStream(filename), Base64.DECODE);\n","            bos.write(dataToDecode.getBytes(PREFERRED_ENCODING));\n","            success = true;\n","        }   // end try\n","        catch (java.io.IOException e) {\n","            success = false;\n","        }   // end catch: java.io.IOException\n","        finally {\n","            try {\n","                bos.close();\n","            } catch (Exception e) {\n","            }\n","        }   // end finally\n","\n","        return success;\n","    }   // end decodeToFile\n","\n","\n","    /**\n","     * Convenience method for reading a base64-encoded\n","     * file and decoding it.\n","     *\n","     * @param filename Filename for reading encoded data\n","     * @return decoded byte array or null if unsuccessful\n","     * @since 2.1\n","     */\n","    public static byte[] decodeFromFile(String filename) {\n","        byte[] decodedData = null;\n","        Base64.InputStream bis = null;\n","        try {\n","            // Set up some useful variables\n","            java.io.File file = new java.io.File(filename);\n","            byte[] buffer = null;\n","            int length = 0;\n","            int numBytes = 0;\n","\n","            // Check for size of file\n","            if (file.length() > Integer.MAX_VALUE) {\n","                System.err.println(\"File is too big for this convenience method (\" + file.length() + \" bytes).\");\n","                return null;\n","            }   // end if: file too big for int index\n","            buffer = new byte[(int) file.length()];\n","\n","            // Open a stream\n","            bis = new Base64.InputStream(\n","                    new java.io.BufferedInputStream(\n","                            new java.io.FileInputStream(file)), Base64.DECODE);\n","\n","            // Read until done\n","            while ((numBytes = bis.read(buffer, length, 4096)) >= 0)\n","                length += numBytes;\n","\n","            // Save in a variable to return\n","            decodedData = new byte[length];\n","            System.arraycopy(buffer, 0, decodedData, 0, length);\n","\n","        }   // end try\n","        catch (java.io.IOException e) {\n","            System.err.println(\"Error decoding from file \" + filename);\n","        }   // end catch: java.io.IOException\n","        finally {\n","            if (null != bis) {\n","                try {\n","                    bis.close();\n","                } catch (Exception e) {\n","                }\n","            }\n","        }   // end finally\n","\n","        return decodedData;\n","    }   // end decodeFromFile\n","\n","\n","    /**\n","     * Convenience method for reading a binary file\n","     * and base64-encoding it.\n","     *\n","     * @param filename Filename for reading binary data\n","     * @return base64-encoded string or null if unsuccessful\n","     * @since 2.1\n","     */\n","    public static String encodeFromFile(String filename) {\n","        String encodedData = null;\n","        Base64.InputStream bis = null;\n","        try {\n","            // Set up some useful variables\n","            java.io.File file = new java.io.File(filename);\n","            byte[] buffer = new byte[Math.max((int) (file.length() * 1.4), 40)]; // Need max() for math on small files (v2.2.1)\n","            int length = 0;\n","            int numBytes = 0;\n","\n","            // Open a stream\n","            bis = new Base64.InputStream(\n","                    new java.io.BufferedInputStream(\n","                            new java.io.FileInputStream(file)), Base64.ENCODE);\n","\n","            // Read until done\n","            while ((numBytes = bis.read(buffer, length, 4096)) >= 0)\n","                length += numBytes;\n","\n","            // Save in a variable to return\n","            encodedData = new String(buffer, 0, length, Base64.PREFERRED_ENCODING);\n","\n","        }   // end try\n","        catch (java.io.IOException e) {\n","            System.err.println(\"Error encoding from file \" + filename);\n","        }   // end catch: java.io.IOException\n","        finally {\n","            try {\n","                bis.close();\n","            } catch (Exception e) {\n","            }\n","        }   // end finally\n","\n","        return encodedData;\n","    }   // end encodeFromFile\n","\n","    /**\n","     * Reads <tt>infile</tt> and encodes it to <tt>outfile</tt>.\n","     *\n","     * @param infile  Input file\n","     * @param outfile Output file\n","     * @since 2.2\n","     */\n","    public static void encodeFileToFile(String infile, String outfile) {\n","        String encoded = Base64.encodeFromFile(infile);\n","        java.io.OutputStream out = null;\n","        try {\n","            out = new java.io.BufferedOutputStream(\n","                    new java.io.FileOutputStream(outfile));\n","            out.write(encoded.getBytes(\"US-ASCII\")); // Strict, 7-bit output.\n","        }   // end try\n","        catch (java.io.IOException ex) {\n","            LOGGER.debug(CommonsLogMessageConstant.BASE_64_EXCEPTION , ex);\n","        }   // end catch\n","        finally {\n","            try {\n","                out.close();\n","            } catch (Exception ex) {\n","            }\n","        }   // end finally\n","    }   // end encodeFileToFile\n","\n","\n","    /**\n","     * Reads <tt>infile</tt> and decodes it to <tt>outfile</tt>.\n","     *\n","     * @param infile  Input file\n","     * @param outfile Output file\n","     * @since 2.2\n","     */\n","    public static void decodeFileToFile(String infile, String outfile) {\n","        byte[] decoded = Base64.decodeFromFile(infile);\n","        java.io.OutputStream out = null;\n","        try {\n","            out = new java.io.BufferedOutputStream(\n","                    new java.io.FileOutputStream(outfile));\n","            out.write(decoded);\n","        }   // end try\n","        catch (java.io.IOException ex) {\n","            LOGGER.debug(CommonsLogMessageConstant.BASE_64_EXCEPTION , ex);\n","        }   // end catch\n","        finally {\n","            try {\n","                out.close();\n","            } catch (Exception ex) {\n","            }\n","        }   // end finally\n","    }   // end decodeFileToFile\n","\n","\n","    /* ********  I N N E R   C L A S S   I N P U T S T R E A M  ******** */\n","\n","\n","    /**\n","     * A {@link Base64.InputStream} will read data from another\n","     * <tt>java.io.InputStream</tt>, given in the constructor,\n","     * and encode/decode to/from Base64 notation on the fly.\n","     *\n","     * @see Base64\n","     * @since 1.3\n","     */\n","    public static class InputStream extends java.io.FilterInputStream {\n","        private boolean encode;         // Encoding or decoding\n","        private int position;       // Current position in the buffer\n","        private byte[] buffer;         // Small buffer holding converted data\n","        private int bufferLength;   // Length of buffer (3 or 4)\n","        private int numSigBytes;    // Number of meaningful bytes in the buffer\n","        private int lineLength;\n","        private boolean breakLines;     // Break lines at less than 80 characters\n","        private int options;        // Record options used to create the stream.\n","        private byte[] alphabet;        // Local copies to avoid extra method calls\n","        private byte[] decodabet;        // Local copies to avoid extra method calls\n","\n","\n","        /**\n","         * Constructs a {@link Base64.InputStream} in DECODE mode.\n","         *\n","         * @param in the <tt>java.io.InputStream</tt> from which to read data.\n","         * @since 1.3\n","         */\n","        public InputStream(java.io.InputStream in) {\n","            this(in, DECODE);\n","        }   // end constructor\n","\n","\n","        /**\n","         * Constructs a {@link Base64.InputStream} in\n","         * either ENCODE or DECODE mode.\n","         * <br>\n","         * Valid options:<pre>\n","         *   ENCODE or DECODE: Encode or Decode as data is read.\n","         *   DONT_BREAK_LINES: don't break lines at 76 characters\n","         *     (only meaningful when encoding)\n","         *     <i>Note: Technically, this makes your encoding non-compliant.</i>\n","         * </pre>\n","         * <br>\n","         * Example: <code>new Base64.InputStream( in, Base64.DECODE )</code>\n","         *\n","         * @param in      the <tt>java.io.InputStream</tt> from which to read data.\n","         * @param options Specified options\n","         * @see Base64#ENCODE\n","         * @see Base64#DECODE\n","         * @see Base64#DONT_BREAK_LINES\n","         * @since 2.0\n","         */\n","        public InputStream(java.io.InputStream in, int options) {\n","            super(in);\n","            this.breakLines = (options & DONT_BREAK_LINES) != DONT_BREAK_LINES;\n","            this.encode = (options & ENCODE) == ENCODE;\n","            this.bufferLength = encode ? 4 : 3;\n","            this.buffer = new byte[bufferLength];\n","            this.position = -1;\n","            this.lineLength = 0;\n","            this.options = options; // Record for later, mostly to determine which alphabet to use\n","            this.alphabet = getAlphabet(options);\n","            this.decodabet = getDecodabet(options);\n","        }   // end constructor\n","\n","        /**\n","         * Reads enough of the input stream to convert\n","         * to/from Base64 and returns the next byte.\n","         *\n","         * @return next byte\n","         * @since 1.3\n","         */\n","        public int read() throws java.io.IOException {\n","            // Do we need to get data?\n","            if (position < 0) {\n","                if (encode) {\n","                    byte[] b3 = new byte[3];\n","                    int numBinaryBytes = 0;\n","                    for (int i = 0; i < 3; i++) {\n","                        try {\n","                            int b = in.read();\n","\n","                            // If end of stream, b is -1.\n","                            if (b >= 0) {\n","                                b3[i] = (byte) b;\n","                                numBinaryBytes++;\n","                            }   // end if: not end of stream\n","\n","                        }   // end try: read\n","                        catch (java.io.IOException e) {\n","                            // Only a problem if we got no data at all.\n","                            if (i == 0)\n","                                throw e;\n","\n","                        }   // end catch\n","                    }   // end for: each needed input byte\n","\n","                    if (numBinaryBytes > 0) {\n","                        encode3to4(b3, 0, numBinaryBytes, buffer, 0, options);\n","                        position = 0;\n","                        numSigBytes = 4;\n","                    }   // end if: got data\n","                    else {\n","                        return -1;\n","                    }   // end else\n","                }   // end if: encoding\n","\n","                // Else decoding\n","                else {\n","                    byte[] b4 = new byte[4];\n","                    int i = 0;\n","                    for (i = 0; i < 4; i++) {\n","                        // Read four \"meaningful\" bytes:\n","                        int b = 0;\n","                        do {\n","                            b = in.read();\n","                        }\n","                        while (b >= 0 && decodabet[b & 0x7f] <= WHITE_SPACE_ENC);\n","\n","                        if (b < 0)\n","                            break; // Reads a -1 if end of stream\n","\n","                        b4[i] = (byte) b;\n","                    }   // end for: each needed input byte\n","\n","                    if (i == 4) {\n","                        numSigBytes = decode4to3(b4, 0, buffer, 0, options);\n","                        position = 0;\n","                    }   // end if: got four characters\n","                    else if (i == 0) {\n","                        return -1;\n","                    }   // end else if: also padded correctly\n","                    else {\n","                        // Must have broken out from above.\n","                        throw new java.io.IOException(\"improperly.padded.base64.input\");\n","                    }   // end\n","\n","                }   // end else: decode\n","            }   // end else: get data\n","            // Got data?\n","            assert position >= 0;\n","            // End of relevant data?\n","            if ( /*!encode &&*/ position >= numSigBytes)\n","                return -1;\n","\n","            if (encode && breakLines && lineLength >= MAX_LINE_LENGTH) {\n","                lineLength = 0;\n","                return '\\n';\n","            }   // end if\n","            else {\n","                lineLength++;   // This isn't important when decoding\n","                // but throwing an extra \"if\" seems\n","                // just as wasteful.\n","\n","                int b = buffer[position++];\n","\n","                if (position >= bufferLength)\n","                    position = -1;\n","\n","                return b & 0xFF; // This is how you \"cast\" a byte that's\n","                // intended to be unsigned.\n","            }   // end else\n","        }   // end read\n","\n","\n","        /**\n","         * Calls {@link #read()} repeatedly until the end of stream\n","         * is reached or <var>len</var> bytes are read.\n","         * Returns number of bytes read into array or -1 if\n","         * end of stream is encountered.\n","         *\n","         * @param dest array to hold values\n","         * @param off  offset for array\n","         * @param len  max number of bytes to read into array\n","         * @return bytes read into array or -1 if end of stream is encountered.\n","         * @since 1.3\n","         */\n","        public int read(byte[] dest, int off, int len) throws java.io.IOException {\n","            int i;\n","            int b;\n","            for (i = 0; i < len; i++) {\n","                b = read();\n","\n","                //if( b < 0 && i == 0 )\n","                //    return -1;\n","\n","                if (b >= 0)\n","                    dest[off + i] = (byte) b;\n","                else if (i == 0)\n","                    return -1;\n","                else\n","                    break; // Out of 'for' loop\n","            }   // end for: each byte read\n","            return i;\n","        }   // end read\n","\n","    }   // end inner class InputStream\n","\n","\n","\n","\n","\n","\n","    /* ********  I N N E R   C L A S S   O U T P U T S T R E A M  ******** */\n","\n","\n","    /**\n","     * A {@link Base64.OutputStream} will write data to another\n","     * <tt>java.io.OutputStream</tt>, given in the constructor,\n","     * and encode/decode to/from Base64 notation on the fly.\n","     *\n","     * @see Base64\n","     * @since 1.3\n","     */\n","    public static class OutputStream extends java.io.FilterOutputStream {\n","        private boolean encode;\n","        private int position;\n","        private byte[] buffer;\n","        private int bufferLength;\n","        private int lineLength;\n","        private boolean breakLines;\n","        private byte[] b4; // Scratch used in a few places\n","        private boolean suspendEncoding;\n","        private int options; // Record for later\n","        private byte[] alphabet;        // Local copies to avoid extra method calls\n","        private byte[] decodabet;        // Local copies to avoid extra method calls\n","\n","        /**\n","         * Constructs a {@link Base64.OutputStream} in ENCODE mode.\n","         *\n","         * @param out the <tt>java.io.OutputStream</tt> to which data will be written.\n","         * @since 1.3\n","         */\n","        public OutputStream(java.io.OutputStream out) {\n","            this(out, ENCODE);\n","        }   // end constructor\n","\n","\n","        /**\n","         * Constructs a {@link Base64.OutputStream} in\n","         * either ENCODE or DECODE mode.\n","         * <br>\n","         * Valid options:<pre>\n","         *   ENCODE or DECODE: Encode or Decode as data is read.\n","         *   DONT_BREAK_LINES: don't break lines at 76 characters\n","         *     (only meaningful when encoding)\n","         *     <i>Note: Technically, this makes your encoding non-compliant.</i>\n","         * </pre>\n","         * <br>\n","         * Example: <code>new Base64.OutputStream( out, Base64.ENCODE )</code>\n","         *\n","         * @param out     the <tt>java.io.OutputStream</tt> to which data will be written.\n","         * @param options Specified options.\n","         * @see Base64#ENCODE\n","         * @see Base64#DECODE\n","         * @see Base64#DONT_BREAK_LINES\n","         * @since 1.3\n","         */\n","        public OutputStream(java.io.OutputStream out, int options) {\n","            super(out);\n","            this.breakLines = (options & DONT_BREAK_LINES) != DONT_BREAK_LINES;\n","            this.encode = (options & ENCODE) == ENCODE;\n","            this.bufferLength = encode ? 3 : 4;\n","            this.buffer = new byte[bufferLength];\n","            this.position = 0;\n","            this.lineLength = 0;\n","            this.suspendEncoding = false;\n","            this.b4 = new byte[4];\n","            this.options = options;\n","            this.alphabet = getAlphabet(options);\n","            this.decodabet = getDecodabet(options);\n","        }   // end constructor\n","\n","\n","        /**\n","         * Writes the byte to the output stream after\n","         * converting to/from Base64 notation.\n","         * When encoding, bytes are buffered three\n","         * at a time before the output stream actually\n","         * gets a write() call.\n","         * When decoding, bytes are buffered four\n","         * at a time.\n","         *\n","         * @param theByte the byte to write\n","         * @since 1.3\n","         */\n","        public void write(int theByte) throws java.io.IOException {\n","            // Encoding suspended?\n","            if (suspendEncoding) {\n","                super.out.write(theByte);\n","                return;\n","            }   // end if: supsended\n","\n","            // Encode?\n","            if (encode) {\n","                buffer[position++] = (byte) theByte;\n","                if (position >= bufferLength)  // Enough to encode.\n","                {\n","                    out.write(encode3to4(b4, buffer, bufferLength, options));\n","\n","                    lineLength += 4;\n","                    if (breakLines && lineLength >= MAX_LINE_LENGTH) {\n","                        out.write(NEW_LINE);\n","                        lineLength = 0;\n","                    }   // end if: end of line\n","\n","                    position = 0;\n","                }   // end if: enough to output\n","            }   // end if: encoding\n","\n","            // Else, Decoding\n","            else {\n","                // Meaningful Base64 character?\n","                if (decodabet[theByte & 0x7f] > WHITE_SPACE_ENC) {\n","                    buffer[position++] = (byte) theByte;\n","                    if (position >= bufferLength)  // Enough to output.\n","                    {\n","                        int len = Base64.decode4to3(buffer, 0, b4, 0, options);\n","                        out.write(b4, 0, len);\n","                        //out.write( Base64.decode4to3( buffer ) );\n","                        position = 0;\n","                    }   // end if: enough to output\n","                }   // end if: meaningful base64 character\n","                else if (decodabet[theByte & 0x7f] != WHITE_SPACE_ENC) {\n","                    throw new java.io.IOException(\"invalid.character.in.base64.data\");\n","                }   // end else: not white space either\n","            }   // end else: decoding\n","        }   // end write\n","\n","\n","        /**\n","         * Calls {@link #write(int)} repeatedly until <var>len</var>\n","         * bytes are written.\n","         *\n","         * @param theBytes array from which to read bytes\n","         * @param off      offset for array\n","         * @param len      max number of bytes to read into array\n","         * @since 1.3\n","         */\n","        public void write(byte[] theBytes, int off, int len) throws java.io.IOException {\n","            // Encoding suspended?\n","            if (suspendEncoding) {\n","                super.out.write(theBytes, off, len);\n","                return;\n","            }   // end if: supsended\n","\n","            for (int i = 0; i < len; i++) {\n","                write(theBytes[off + i]);\n","            }   // end for: each byte written\n","\n","        }   // end write\n","\n","\n","        /**\n","         * Method added by PHIL. [Thanks, PHIL. -Rob]\n","         * This pads the buffer without closing the stream.\n","         * @throws java.io.IOException if an I/O error occurs.\n","         */\n","        public void flushBase64() throws java.io.IOException {\n","            if (position > 0) {\n","                if (encode) {\n","                    out.write(encode3to4(b4, buffer, position, options));\n","                    position = 0;\n","                }   // end if: encoding\n","                else {\n","                    throw new java.io.IOException(\"base64.input.not.properly.padded\");\n","                }   // end else: decoding\n","            }   // end if: buffer partially full\n","\n","        }   // end flush\n","\n","\n","        /**\n","         * Flushes and closes (I think, in the superclass) the stream.\n","         *\n","         * @since 1.3\n","         */\n","        public void close() throws java.io.IOException {\n","            // 1. Ensure that pending characters are written\n","            flushBase64();\n","\n","            // 2. Actually close the stream\n","            // Base class both flushes and closes.\n","            super.close();\n","\n","            buffer = null;\n","            out = null;\n","        }   // end close\n","\n","\n","        /**\n","         * Suspends encoding of the stream.\n","         * May be helpful if you need to embed a piece of\n","         * base640-encoded data in a stream.\n","         *\n","         * @throws java.io.IOException if an I/O error occurs.\n","         *\n","         * @since 1.5.1\n","         */\n","        public void suspendEncoding() throws java.io.IOException {\n","            flushBase64();\n","            this.suspendEncoding = true;\n","        }   // end suspendEncoding\n","\n","\n","        /**\n","         * Resumes encoding of the stream.\n","         * May be helpful if you need to embed a piece of\n","         * base640-encoded data in a stream.\n","         *\n","         * @since 1.5.1\n","         */\n","        public void resumeEncoding() {\n","            this.suspendEncoding = false;\n","        }   // end resumeEncoding\n","\n","\n","    }   // end inner class OutputStream\n","\n","\n","}   // end class Base64\n"],"test_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.utils;\n","\n","import com.itextpdf.test.ExtendedITextTest;\n","import com.itextpdf.test.annotations.type.UnitTest;\n","\n","import org.junit.Assert;\n","import org.junit.Test;\n","import org.junit.experimental.categories.Category;\n","\n","@Category(UnitTest.class)\n","public class Base64Test extends ExtendedITextTest {\n","\n","    @Test\n","    public void testEncodeObjectForNullObject() {\n","        Assert.assertEquals(\"rO0ABXA=\", Base64.encodeObject(null));\n","    }\n","\n","    @Test\n","    public void testDecodeForSourceIsEmptyArray() {\n","        Assert.assertEquals(\"\", Base64.encodeBytes(new byte[] {}));\n","    }\n","\n","    @Test\n","    public void testDecodeForSourceIsEmptyArrayGzip() {\n","        //HEADER        FOOTER          example of signatures that can be generated\n","        //H4sIAAAAAAAAAAMAAAAAAAAAAAA=\t1f 8b 08 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 00 00 // windows\n","        //H4sIAAAAAAAA/wMAAAAAAAAAAAA=  1f 8b 08 00 00 00 00 00 00 ff 03 00 00 00 00 00 00 00 00 00 // unknown\n","        //H4sIAAAAAAAAAwMAAAAAAAAAAAA=\t1f 8b 08 00 00 00 00 00 00 03 03 00 00 00 00 00 00 00 00 00 // linux\n","        //H4sIAAAAAAAAAgMAAAAAAAAAAAA=\t1f 8b 08 00 00 00 00 00 00 02 03 00 00 00 00 00 00 00 00 00 // vms\n","        final String expectedHeaderWithoutOsFlag = \"H4sIAAAAAAAA\";\n","        final String expectedFooter = \"MAAAAAAAAAAAA=\";\n","        final int startIndexHeader = 0;\n","        final int endIndexHeaderWithoutOsFlag = 12;\n","        final int startIndexFooter = 14;\n","        final int endIndexFooter = 28;\n","\n","        String generatedBase64 = Base64.encodeBytes(new byte[] {}, Base64.GZIP);\n","\n","        String generatedHeader = generatedBase64.substring(startIndexHeader, endIndexHeaderWithoutOsFlag);\n","        String generatedFooter = generatedBase64.substring(startIndexFooter, endIndexFooter);\n","\n","        Assert.assertEquals(expectedHeaderWithoutOsFlag, generatedHeader);\n","        Assert.assertEquals(expectedFooter, generatedFooter);\n","    }\n","\n","}\n"],"method_lines_dic":{"Base64::::getAlphabet(int)":[362,367],"Base64::::getDecodabet(int)":[377,382],"Base64::::usage(java.lang.String)":[422,425],"Base64::::encode3to4(byte[],byte[],int,int)":[446,449],"Base64::::encode3to4(byte[],int,int,byte[],int,int)":[476,521],"Base64::::encodeObject(java.io.Serializable)":[535,537],"Base64::::encodeObject(java.io.Serializable,int)":[563,620],"Base64::::encodeBytes(byte[])":[631,633],"Base64::::encodeBytes(byte[],int)":[656,658],"Base64::::encodeBytes(byte[],int,int)":[671,673],"Base64::::encodeBytes(byte[],int,int,int)":[699,788],"Base64::::decode4to3(byte[],int,byte[],int,int)":[822,879],"Base64::::decode(byte[],int,int,int)":[894,935],"Base64::::decode(java.lang.String)":[946,948],"Base64::::decode(java.lang.String,int)":[960,1021],"Base64::::decodeToObject(java.lang.String)":[1032,1064],"Base64::::encodeToFile(byte[],java.lang.String)":[1075,1096],"Base64::::decodeToFile(java.lang.String,java.lang.String)":[1107,1127],"Base64::::decodeFromFile(java.lang.String)":[1138,1182],"Base64::::encodeFromFile(java.lang.String)":[1193,1227],"Base64::::encodeFileToFile(java.lang.String,java.lang.String)":[1236,1253],"Base64::::decodeFileToFile(java.lang.String,java.lang.String)":[1263,1280],"Base64.InputStream::::read()":[1358,1448],"Base64.InputStream::::read(byte[],int,int)":[1463,1480],"Base64.OutputStream::::write(int)":[1572,1613],"Base64.OutputStream::::write(byte[],int,int)":[1625,1636],"Base64.OutputStream::::flushBase64()":[1644,1655],"Base64.OutputStream::::close()":[1663,1673],"Base64.OutputStream::::suspendEncoding()":[1685,1688],"Base64.OutputStream::::resumeEncoding()":[1698,1700]},"test_method_lines_dic":{"Base64Test::::testEncodeObjectForNullObject()":[35,38],"Base64Test::::testDecodeForSourceIsEmptyArray()":[40,43],"Base64Test::::testDecodeForSourceIsEmptyArrayGzip()":[45,66]},"reverse_method_lines_dic":{"362":"Base64::::getAlphabet(int)","363":"Base64::::getAlphabet(int)","364":"Base64::::getAlphabet(int)","365":"Base64::::getAlphabet(int)","366":"Base64::::getAlphabet(int)","367":"Base64::::getAlphabet(int)","377":"Base64::::getDecodabet(int)","378":"Base64::::getDecodabet(int)","379":"Base64::::getDecodabet(int)","380":"Base64::::getDecodabet(int)","381":"Base64::::getDecodabet(int)","382":"Base64::::getDecodabet(int)","422":"Base64::::usage(java.lang.String)","423":"Base64::::usage(java.lang.String)","424":"Base64::::usage(java.lang.String)","425":"Base64::::usage(java.lang.String)","446":"Base64::::encode3to4(byte[],byte[],int,int)","447":"Base64::::encode3to4(byte[],byte[],int,int)","448":"Base64::::encode3to4(byte[],byte[],int,int)","449":"Base64::::encode3to4(byte[],byte[],int,int)","476":"Base64::::encode3to4(byte[],int,int,byte[],int,int)","477":"Base64::::encode3to4(byte[],int,int,byte[],int,int)","478":"Base64::::encode3to4(byte[],int,int,byte[],int,int)","479":"Base64::::encode3to4(byte[],int,int,byte[],int,int)","480":"Base64::::encode3to4(byte[],int,int,byte[],int,int)","481":"Base64::::encode3to4(byte[],int,int,byte[],int,int)","482":"Base64::::encode3to4(byte[],int,int,byte[],int,int)","483":"Base64::::encode3to4(byte[],int,int,byte[],int,int)","484":"Base64::::encode3to4(byte[],int,int,byte[],int,int)","485":"Base64::::encode3to4(byte[],int,int,byte[],int,int)","486":"Base64::::encode3to4(byte[],int,int,byte[],int,int)","487":"Base64::::encode3to4(byte[],int,int,byte[],int,int)","488":"Base64::::encode3to4(byte[],int,int,byte[],int,int)","489":"Base64::::encode3to4(byte[],int,int,byte[],int,int)","490":"Base64::::encode3to4(byte[],int,int,byte[],int,int)","491":"Base64::::encode3to4(byte[],int,int,byte[],int,int)","492":"Base64::::encode3to4(byte[],int,int,byte[],int,int)","493":"Base64::::encode3to4(byte[],int,int,byte[],int,int)","494":"Base64::::encode3to4(byte[],int,int,byte[],int,int)","495":"Base64::::encode3to4(byte[],int,int,byte[],int,int)","496":"Base64::::encode3to4(byte[],int,int,byte[],int,int)","497":"Base64::::encode3to4(byte[],int,int,byte[],int,int)","498":"Base64::::encode3to4(byte[],int,int,byte[],int,int)","499":"Base64::::encode3to4(byte[],int,int,byte[],int,int)","500":"Base64::::encode3to4(byte[],int,int,byte[],int,int)","501":"Base64::::encode3to4(byte[],int,int,byte[],int,int)","502":"Base64::::encode3to4(byte[],int,int,byte[],int,int)","503":"Base64::::encode3to4(byte[],int,int,byte[],int,int)","504":"Base64::::encode3to4(byte[],int,int,byte[],int,int)","505":"Base64::::encode3to4(byte[],int,int,byte[],int,int)","506":"Base64::::encode3to4(byte[],int,int,byte[],int,int)","507":"Base64::::encode3to4(byte[],int,int,byte[],int,int)","508":"Base64::::encode3to4(byte[],int,int,byte[],int,int)","509":"Base64::::encode3to4(byte[],int,int,byte[],int,int)","510":"Base64::::encode3to4(byte[],int,int,byte[],int,int)","511":"Base64::::encode3to4(byte[],int,int,byte[],int,int)","512":"Base64::::encode3to4(byte[],int,int,byte[],int,int)","513":"Base64::::encode3to4(byte[],int,int,byte[],int,int)","514":"Base64::::encode3to4(byte[],int,int,byte[],int,int)","515":"Base64::::encode3to4(byte[],int,int,byte[],int,int)","516":"Base64::::encode3to4(byte[],int,int,byte[],int,int)","517":"Base64::::encode3to4(byte[],int,int,byte[],int,int)","518":"Base64::::encode3to4(byte[],int,int,byte[],int,int)","519":"Base64::::encode3to4(byte[],int,int,byte[],int,int)","520":"Base64::::encode3to4(byte[],int,int,byte[],int,int)","521":"Base64::::encode3to4(byte[],int,int,byte[],int,int)","535":"Base64::::encodeObject(java.io.Serializable)","536":"Base64::::encodeObject(java.io.Serializable)","537":"Base64::::encodeObject(java.io.Serializable)","563":"Base64::::encodeObject(java.io.Serializable,int)","564":"Base64::::encodeObject(java.io.Serializable,int)","565":"Base64::::encodeObject(java.io.Serializable,int)","566":"Base64::::encodeObject(java.io.Serializable,int)","567":"Base64::::encodeObject(java.io.Serializable,int)","568":"Base64::::encodeObject(java.io.Serializable,int)","569":"Base64::::encodeObject(java.io.Serializable,int)","570":"Base64::::encodeObject(java.io.Serializable,int)","571":"Base64::::encodeObject(java.io.Serializable,int)","572":"Base64::::encodeObject(java.io.Serializable,int)","573":"Base64::::encodeObject(java.io.Serializable,int)","574":"Base64::::encodeObject(java.io.Serializable,int)","575":"Base64::::encodeObject(java.io.Serializable,int)","576":"Base64::::encodeObject(java.io.Serializable,int)","577":"Base64::::encodeObject(java.io.Serializable,int)","578":"Base64::::encodeObject(java.io.Serializable,int)","579":"Base64::::encodeObject(java.io.Serializable,int)","580":"Base64::::encodeObject(java.io.Serializable,int)","581":"Base64::::encodeObject(java.io.Serializable,int)","582":"Base64::::encodeObject(java.io.Serializable,int)","583":"Base64::::encodeObject(java.io.Serializable,int)","584":"Base64::::encodeObject(java.io.Serializable,int)","585":"Base64::::encodeObject(java.io.Serializable,int)","586":"Base64::::encodeObject(java.io.Serializable,int)","587":"Base64::::encodeObject(java.io.Serializable,int)","588":"Base64::::encodeObject(java.io.Serializable,int)","589":"Base64::::encodeObject(java.io.Serializable,int)","590":"Base64::::encodeObject(java.io.Serializable,int)","591":"Base64::::encodeObject(java.io.Serializable,int)","592":"Base64::::encodeObject(java.io.Serializable,int)","593":"Base64::::encodeObject(java.io.Serializable,int)","594":"Base64::::encodeObject(java.io.Serializable,int)","595":"Base64::::encodeObject(java.io.Serializable,int)","596":"Base64::::encodeObject(java.io.Serializable,int)","597":"Base64::::encodeObject(java.io.Serializable,int)","598":"Base64::::encodeObject(java.io.Serializable,int)","599":"Base64::::encodeObject(java.io.Serializable,int)","600":"Base64::::encodeObject(java.io.Serializable,int)","601":"Base64::::encodeObject(java.io.Serializable,int)","602":"Base64::::encodeObject(java.io.Serializable,int)","603":"Base64::::encodeObject(java.io.Serializable,int)","604":"Base64::::encodeObject(java.io.Serializable,int)","605":"Base64::::encodeObject(java.io.Serializable,int)","606":"Base64::::encodeObject(java.io.Serializable,int)","607":"Base64::::encodeObject(java.io.Serializable,int)","608":"Base64::::encodeObject(java.io.Serializable,int)","609":"Base64::::encodeObject(java.io.Serializable,int)","610":"Base64::::encodeObject(java.io.Serializable,int)","611":"Base64::::encodeObject(java.io.Serializable,int)","612":"Base64::::encodeObject(java.io.Serializable,int)","613":"Base64::::encodeObject(java.io.Serializable,int)","614":"Base64::::encodeObject(java.io.Serializable,int)","615":"Base64::::encodeObject(java.io.Serializable,int)","616":"Base64::::encodeObject(java.io.Serializable,int)","617":"Base64::::encodeObject(java.io.Serializable,int)","618":"Base64::::encodeObject(java.io.Serializable,int)","619":"Base64::::encodeObject(java.io.Serializable,int)","620":"Base64::::encodeObject(java.io.Serializable,int)","631":"Base64::::encodeBytes(byte[])","632":"Base64::::encodeBytes(byte[])","633":"Base64::::encodeBytes(byte[])","656":"Base64::::encodeBytes(byte[],int)","657":"Base64::::encodeBytes(byte[],int)","658":"Base64::::encodeBytes(byte[],int)","671":"Base64::::encodeBytes(byte[],int,int)","672":"Base64::::encodeBytes(byte[],int,int)","673":"Base64::::encodeBytes(byte[],int,int)","699":"Base64::::encodeBytes(byte[],int,int,int)","700":"Base64::::encodeBytes(byte[],int,int,int)","701":"Base64::::encodeBytes(byte[],int,int,int)","702":"Base64::::encodeBytes(byte[],int,int,int)","703":"Base64::::encodeBytes(byte[],int,int,int)","704":"Base64::::encodeBytes(byte[],int,int,int)","705":"Base64::::encodeBytes(byte[],int,int,int)","706":"Base64::::encodeBytes(byte[],int,int,int)","707":"Base64::::encodeBytes(byte[],int,int,int)","708":"Base64::::encodeBytes(byte[],int,int,int)","709":"Base64::::encodeBytes(byte[],int,int,int)","710":"Base64::::encodeBytes(byte[],int,int,int)","711":"Base64::::encodeBytes(byte[],int,int,int)","712":"Base64::::encodeBytes(byte[],int,int,int)","713":"Base64::::encodeBytes(byte[],int,int,int)","714":"Base64::::encodeBytes(byte[],int,int,int)","715":"Base64::::encodeBytes(byte[],int,int,int)","716":"Base64::::encodeBytes(byte[],int,int,int)","717":"Base64::::encodeBytes(byte[],int,int,int)","718":"Base64::::encodeBytes(byte[],int,int,int)","719":"Base64::::encodeBytes(byte[],int,int,int)","720":"Base64::::encodeBytes(byte[],int,int,int)","721":"Base64::::encodeBytes(byte[],int,int,int)","722":"Base64::::encodeBytes(byte[],int,int,int)","723":"Base64::::encodeBytes(byte[],int,int,int)","724":"Base64::::encodeBytes(byte[],int,int,int)","725":"Base64::::encodeBytes(byte[],int,int,int)","726":"Base64::::encodeBytes(byte[],int,int,int)","727":"Base64::::encodeBytes(byte[],int,int,int)","728":"Base64::::encodeBytes(byte[],int,int,int)","729":"Base64::::encodeBytes(byte[],int,int,int)","730":"Base64::::encodeBytes(byte[],int,int,int)","731":"Base64::::encodeBytes(byte[],int,int,int)","732":"Base64::::encodeBytes(byte[],int,int,int)","733":"Base64::::encodeBytes(byte[],int,int,int)","734":"Base64::::encodeBytes(byte[],int,int,int)","735":"Base64::::encodeBytes(byte[],int,int,int)","736":"Base64::::encodeBytes(byte[],int,int,int)","737":"Base64::::encodeBytes(byte[],int,int,int)","738":"Base64::::encodeBytes(byte[],int,int,int)","739":"Base64::::encodeBytes(byte[],int,int,int)","740":"Base64::::encodeBytes(byte[],int,int,int)","741":"Base64::::encodeBytes(byte[],int,int,int)","742":"Base64::::encodeBytes(byte[],int,int,int)","743":"Base64::::encodeBytes(byte[],int,int,int)","744":"Base64::::encodeBytes(byte[],int,int,int)","745":"Base64::::encodeBytes(byte[],int,int,int)","746":"Base64::::encodeBytes(byte[],int,int,int)","747":"Base64::::encodeBytes(byte[],int,int,int)","748":"Base64::::encodeBytes(byte[],int,int,int)","749":"Base64::::encodeBytes(byte[],int,int,int)","750":"Base64::::encodeBytes(byte[],int,int,int)","751":"Base64::::encodeBytes(byte[],int,int,int)","752":"Base64::::encodeBytes(byte[],int,int,int)","753":"Base64::::encodeBytes(byte[],int,int,int)","754":"Base64::::encodeBytes(byte[],int,int,int)","755":"Base64::::encodeBytes(byte[],int,int,int)","756":"Base64::::encodeBytes(byte[],int,int,int)","757":"Base64::::encodeBytes(byte[],int,int,int)","758":"Base64::::encodeBytes(byte[],int,int,int)","759":"Base64::::encodeBytes(byte[],int,int,int)","760":"Base64::::encodeBytes(byte[],int,int,int)","761":"Base64::::encodeBytes(byte[],int,int,int)","762":"Base64::::encodeBytes(byte[],int,int,int)","763":"Base64::::encodeBytes(byte[],int,int,int)","764":"Base64::::encodeBytes(byte[],int,int,int)","765":"Base64::::encodeBytes(byte[],int,int,int)","766":"Base64::::encodeBytes(byte[],int,int,int)","767":"Base64::::encodeBytes(byte[],int,int,int)","768":"Base64::::encodeBytes(byte[],int,int,int)","769":"Base64::::encodeBytes(byte[],int,int,int)","770":"Base64::::encodeBytes(byte[],int,int,int)","771":"Base64::::encodeBytes(byte[],int,int,int)","772":"Base64::::encodeBytes(byte[],int,int,int)","773":"Base64::::encodeBytes(byte[],int,int,int)","774":"Base64::::encodeBytes(byte[],int,int,int)","775":"Base64::::encodeBytes(byte[],int,int,int)","776":"Base64::::encodeBytes(byte[],int,int,int)","777":"Base64::::encodeBytes(byte[],int,int,int)","778":"Base64::::encodeBytes(byte[],int,int,int)","779":"Base64::::encodeBytes(byte[],int,int,int)","780":"Base64::::encodeBytes(byte[],int,int,int)","781":"Base64::::encodeBytes(byte[],int,int,int)","782":"Base64::::encodeBytes(byte[],int,int,int)","783":"Base64::::encodeBytes(byte[],int,int,int)","784":"Base64::::encodeBytes(byte[],int,int,int)","785":"Base64::::encodeBytes(byte[],int,int,int)","786":"Base64::::encodeBytes(byte[],int,int,int)","787":"Base64::::encodeBytes(byte[],int,int,int)","788":"Base64::::encodeBytes(byte[],int,int,int)","822":"Base64::::decode4to3(byte[],int,byte[],int,int)","823":"Base64::::decode4to3(byte[],int,byte[],int,int)","824":"Base64::::decode4to3(byte[],int,byte[],int,int)","825":"Base64::::decode4to3(byte[],int,byte[],int,int)","826":"Base64::::decode4to3(byte[],int,byte[],int,int)","827":"Base64::::decode4to3(byte[],int,byte[],int,int)","828":"Base64::::decode4to3(byte[],int,byte[],int,int)","829":"Base64::::decode4to3(byte[],int,byte[],int,int)","830":"Base64::::decode4to3(byte[],int,byte[],int,int)","831":"Base64::::decode4to3(byte[],int,byte[],int,int)","832":"Base64::::decode4to3(byte[],int,byte[],int,int)","833":"Base64::::decode4to3(byte[],int,byte[],int,int)","834":"Base64::::decode4to3(byte[],int,byte[],int,int)","835":"Base64::::decode4to3(byte[],int,byte[],int,int)","836":"Base64::::decode4to3(byte[],int,byte[],int,int)","837":"Base64::::decode4to3(byte[],int,byte[],int,int)","838":"Base64::::decode4to3(byte[],int,byte[],int,int)","839":"Base64::::decode4to3(byte[],int,byte[],int,int)","840":"Base64::::decode4to3(byte[],int,byte[],int,int)","841":"Base64::::decode4to3(byte[],int,byte[],int,int)","842":"Base64::::decode4to3(byte[],int,byte[],int,int)","843":"Base64::::decode4to3(byte[],int,byte[],int,int)","844":"Base64::::decode4to3(byte[],int,byte[],int,int)","845":"Base64::::decode4to3(byte[],int,byte[],int,int)","846":"Base64::::decode4to3(byte[],int,byte[],int,int)","847":"Base64::::decode4to3(byte[],int,byte[],int,int)","848":"Base64::::decode4to3(byte[],int,byte[],int,int)","849":"Base64::::decode4to3(byte[],int,byte[],int,int)","850":"Base64::::decode4to3(byte[],int,byte[],int,int)","851":"Base64::::decode4to3(byte[],int,byte[],int,int)","852":"Base64::::decode4to3(byte[],int,byte[],int,int)","853":"Base64::::decode4to3(byte[],int,byte[],int,int)","854":"Base64::::decode4to3(byte[],int,byte[],int,int)","855":"Base64::::decode4to3(byte[],int,byte[],int,int)","856":"Base64::::decode4to3(byte[],int,byte[],int,int)","857":"Base64::::decode4to3(byte[],int,byte[],int,int)","858":"Base64::::decode4to3(byte[],int,byte[],int,int)","859":"Base64::::decode4to3(byte[],int,byte[],int,int)","860":"Base64::::decode4to3(byte[],int,byte[],int,int)","861":"Base64::::decode4to3(byte[],int,byte[],int,int)","862":"Base64::::decode4to3(byte[],int,byte[],int,int)","863":"Base64::::decode4to3(byte[],int,byte[],int,int)","864":"Base64::::decode4to3(byte[],int,byte[],int,int)","865":"Base64::::decode4to3(byte[],int,byte[],int,int)","866":"Base64::::decode4to3(byte[],int,byte[],int,int)","867":"Base64::::decode4to3(byte[],int,byte[],int,int)","868":"Base64::::decode4to3(byte[],int,byte[],int,int)","869":"Base64::::decode4to3(byte[],int,byte[],int,int)","870":"Base64::::decode4to3(byte[],int,byte[],int,int)","871":"Base64::::decode4to3(byte[],int,byte[],int,int)","872":"Base64::::decode4to3(byte[],int,byte[],int,int)","873":"Base64::::decode4to3(byte[],int,byte[],int,int)","874":"Base64::::decode4to3(byte[],int,byte[],int,int)","875":"Base64::::decode4to3(byte[],int,byte[],int,int)","876":"Base64::::decode4to3(byte[],int,byte[],int,int)","877":"Base64::::decode4to3(byte[],int,byte[],int,int)","878":"Base64::::decode4to3(byte[],int,byte[],int,int)","879":"Base64::::decode4to3(byte[],int,byte[],int,int)","894":"Base64::::decode(byte[],int,int,int)","895":"Base64::::decode(byte[],int,int,int)","896":"Base64::::decode(byte[],int,int,int)","897":"Base64::::decode(byte[],int,int,int)","898":"Base64::::decode(byte[],int,int,int)","899":"Base64::::decode(byte[],int,int,int)","900":"Base64::::decode(byte[],int,int,int)","901":"Base64::::decode(byte[],int,int,int)","902":"Base64::::decode(byte[],int,int,int)","903":"Base64::::decode(byte[],int,int,int)","904":"Base64::::decode(byte[],int,int,int)","905":"Base64::::decode(byte[],int,int,int)","906":"Base64::::decode(byte[],int,int,int)","907":"Base64::::decode(byte[],int,int,int)","908":"Base64::::decode(byte[],int,int,int)","909":"Base64::::decode(byte[],int,int,int)","910":"Base64::::decode(byte[],int,int,int)","911":"Base64::::decode(byte[],int,int,int)","912":"Base64::::decode(byte[],int,int,int)","913":"Base64::::decode(byte[],int,int,int)","914":"Base64::::decode(byte[],int,int,int)","915":"Base64::::decode(byte[],int,int,int)","916":"Base64::::decode(byte[],int,int,int)","917":"Base64::::decode(byte[],int,int,int)","918":"Base64::::decode(byte[],int,int,int)","919":"Base64::::decode(byte[],int,int,int)","920":"Base64::::decode(byte[],int,int,int)","921":"Base64::::decode(byte[],int,int,int)","922":"Base64::::decode(byte[],int,int,int)","923":"Base64::::decode(byte[],int,int,int)","924":"Base64::::decode(byte[],int,int,int)","925":"Base64::::decode(byte[],int,int,int)","926":"Base64::::decode(byte[],int,int,int)","927":"Base64::::decode(byte[],int,int,int)","928":"Base64::::decode(byte[],int,int,int)","929":"Base64::::decode(byte[],int,int,int)","930":"Base64::::decode(byte[],int,int,int)","931":"Base64::::decode(byte[],int,int,int)","932":"Base64::::decode(byte[],int,int,int)","933":"Base64::::decode(byte[],int,int,int)","934":"Base64::::decode(byte[],int,int,int)","935":"Base64::::decode(byte[],int,int,int)","946":"Base64::::decode(java.lang.String)","947":"Base64::::decode(java.lang.String)","948":"Base64::::decode(java.lang.String)","960":"Base64::::decode(java.lang.String,int)","961":"Base64::::decode(java.lang.String,int)","962":"Base64::::decode(java.lang.String,int)","963":"Base64::::decode(java.lang.String,int)","964":"Base64::::decode(java.lang.String,int)","965":"Base64::::decode(java.lang.String,int)","966":"Base64::::decode(java.lang.String,int)","967":"Base64::::decode(java.lang.String,int)","968":"Base64::::decode(java.lang.String,int)","969":"Base64::::decode(java.lang.String,int)","970":"Base64::::decode(java.lang.String,int)","971":"Base64::::decode(java.lang.String,int)","972":"Base64::::decode(java.lang.String,int)","973":"Base64::::decode(java.lang.String,int)","974":"Base64::::decode(java.lang.String,int)","975":"Base64::::decode(java.lang.String,int)","976":"Base64::::decode(java.lang.String,int)","977":"Base64::::decode(java.lang.String,int)","978":"Base64::::decode(java.lang.String,int)","979":"Base64::::decode(java.lang.String,int)","980":"Base64::::decode(java.lang.String,int)","981":"Base64::::decode(java.lang.String,int)","982":"Base64::::decode(java.lang.String,int)","983":"Base64::::decode(java.lang.String,int)","984":"Base64::::decode(java.lang.String,int)","985":"Base64::::decode(java.lang.String,int)","986":"Base64::::decode(java.lang.String,int)","987":"Base64::::decode(java.lang.String,int)","988":"Base64::::decode(java.lang.String,int)","989":"Base64::::decode(java.lang.String,int)","990":"Base64::::decode(java.lang.String,int)","991":"Base64::::decode(java.lang.String,int)","992":"Base64::::decode(java.lang.String,int)","993":"Base64::::decode(java.lang.String,int)","994":"Base64::::decode(java.lang.String,int)","995":"Base64::::decode(java.lang.String,int)","996":"Base64::::decode(java.lang.String,int)","997":"Base64::::decode(java.lang.String,int)","998":"Base64::::decode(java.lang.String,int)","999":"Base64::::decode(java.lang.String,int)","1000":"Base64::::decode(java.lang.String,int)","1001":"Base64::::decode(java.lang.String,int)","1002":"Base64::::decode(java.lang.String,int)","1003":"Base64::::decode(java.lang.String,int)","1004":"Base64::::decode(java.lang.String,int)","1005":"Base64::::decode(java.lang.String,int)","1006":"Base64::::decode(java.lang.String,int)","1007":"Base64::::decode(java.lang.String,int)","1008":"Base64::::decode(java.lang.String,int)","1009":"Base64::::decode(java.lang.String,int)","1010":"Base64::::decode(java.lang.String,int)","1011":"Base64::::decode(java.lang.String,int)","1012":"Base64::::decode(java.lang.String,int)","1013":"Base64::::decode(java.lang.String,int)","1014":"Base64::::decode(java.lang.String,int)","1015":"Base64::::decode(java.lang.String,int)","1016":"Base64::::decode(java.lang.String,int)","1017":"Base64::::decode(java.lang.String,int)","1018":"Base64::::decode(java.lang.String,int)","1019":"Base64::::decode(java.lang.String,int)","1020":"Base64::::decode(java.lang.String,int)","1021":"Base64::::decode(java.lang.String,int)","1032":"Base64::::decodeToObject(java.lang.String)","1033":"Base64::::decodeToObject(java.lang.String)","1034":"Base64::::decodeToObject(java.lang.String)","1035":"Base64::::decodeToObject(java.lang.String)","1036":"Base64::::decodeToObject(java.lang.String)","1037":"Base64::::decodeToObject(java.lang.String)","1038":"Base64::::decodeToObject(java.lang.String)","1039":"Base64::::decodeToObject(java.lang.String)","1040":"Base64::::decodeToObject(java.lang.String)","1041":"Base64::::decodeToObject(java.lang.String)","1042":"Base64::::decodeToObject(java.lang.String)","1043":"Base64::::decodeToObject(java.lang.String)","1044":"Base64::::decodeToObject(java.lang.String)","1045":"Base64::::decodeToObject(java.lang.String)","1046":"Base64::::decodeToObject(java.lang.String)","1047":"Base64::::decodeToObject(java.lang.String)","1048":"Base64::::decodeToObject(java.lang.String)","1049":"Base64::::decodeToObject(java.lang.String)","1050":"Base64::::decodeToObject(java.lang.String)","1051":"Base64::::decodeToObject(java.lang.String)","1052":"Base64::::decodeToObject(java.lang.String)","1053":"Base64::::decodeToObject(java.lang.String)","1054":"Base64::::decodeToObject(java.lang.String)","1055":"Base64::::decodeToObject(java.lang.String)","1056":"Base64::::decodeToObject(java.lang.String)","1057":"Base64::::decodeToObject(java.lang.String)","1058":"Base64::::decodeToObject(java.lang.String)","1059":"Base64::::decodeToObject(java.lang.String)","1060":"Base64::::decodeToObject(java.lang.String)","1061":"Base64::::decodeToObject(java.lang.String)","1062":"Base64::::decodeToObject(java.lang.String)","1063":"Base64::::decodeToObject(java.lang.String)","1064":"Base64::::decodeToObject(java.lang.String)","1075":"Base64::::encodeToFile(byte[],java.lang.String)","1076":"Base64::::encodeToFile(byte[],java.lang.String)","1077":"Base64::::encodeToFile(byte[],java.lang.String)","1078":"Base64::::encodeToFile(byte[],java.lang.String)","1079":"Base64::::encodeToFile(byte[],java.lang.String)","1080":"Base64::::encodeToFile(byte[],java.lang.String)","1081":"Base64::::encodeToFile(byte[],java.lang.String)","1082":"Base64::::encodeToFile(byte[],java.lang.String)","1083":"Base64::::encodeToFile(byte[],java.lang.String)","1084":"Base64::::encodeToFile(byte[],java.lang.String)","1085":"Base64::::encodeToFile(byte[],java.lang.String)","1086":"Base64::::encodeToFile(byte[],java.lang.String)","1087":"Base64::::encodeToFile(byte[],java.lang.String)","1088":"Base64::::encodeToFile(byte[],java.lang.String)","1089":"Base64::::encodeToFile(byte[],java.lang.String)","1090":"Base64::::encodeToFile(byte[],java.lang.String)","1091":"Base64::::encodeToFile(byte[],java.lang.String)","1092":"Base64::::encodeToFile(byte[],java.lang.String)","1093":"Base64::::encodeToFile(byte[],java.lang.String)","1094":"Base64::::encodeToFile(byte[],java.lang.String)","1095":"Base64::::encodeToFile(byte[],java.lang.String)","1096":"Base64::::encodeToFile(byte[],java.lang.String)","1107":"Base64::::decodeToFile(java.lang.String,java.lang.String)","1108":"Base64::::decodeToFile(java.lang.String,java.lang.String)","1109":"Base64::::decodeToFile(java.lang.String,java.lang.String)","1110":"Base64::::decodeToFile(java.lang.String,java.lang.String)","1111":"Base64::::decodeToFile(java.lang.String,java.lang.String)","1112":"Base64::::decodeToFile(java.lang.String,java.lang.String)","1113":"Base64::::decodeToFile(java.lang.String,java.lang.String)","1114":"Base64::::decodeToFile(java.lang.String,java.lang.String)","1115":"Base64::::decodeToFile(java.lang.String,java.lang.String)","1116":"Base64::::decodeToFile(java.lang.String,java.lang.String)","1117":"Base64::::decodeToFile(java.lang.String,java.lang.String)","1118":"Base64::::decodeToFile(java.lang.String,java.lang.String)","1119":"Base64::::decodeToFile(java.lang.String,java.lang.String)","1120":"Base64::::decodeToFile(java.lang.String,java.lang.String)","1121":"Base64::::decodeToFile(java.lang.String,java.lang.String)","1122":"Base64::::decodeToFile(java.lang.String,java.lang.String)","1123":"Base64::::decodeToFile(java.lang.String,java.lang.String)","1124":"Base64::::decodeToFile(java.lang.String,java.lang.String)","1125":"Base64::::decodeToFile(java.lang.String,java.lang.String)","1126":"Base64::::decodeToFile(java.lang.String,java.lang.String)","1127":"Base64::::decodeToFile(java.lang.String,java.lang.String)","1138":"Base64::::decodeFromFile(java.lang.String)","1139":"Base64::::decodeFromFile(java.lang.String)","1140":"Base64::::decodeFromFile(java.lang.String)","1141":"Base64::::decodeFromFile(java.lang.String)","1142":"Base64::::decodeFromFile(java.lang.String)","1143":"Base64::::decodeFromFile(java.lang.String)","1144":"Base64::::decodeFromFile(java.lang.String)","1145":"Base64::::decodeFromFile(java.lang.String)","1146":"Base64::::decodeFromFile(java.lang.String)","1147":"Base64::::decodeFromFile(java.lang.String)","1148":"Base64::::decodeFromFile(java.lang.String)","1149":"Base64::::decodeFromFile(java.lang.String)","1150":"Base64::::decodeFromFile(java.lang.String)","1151":"Base64::::decodeFromFile(java.lang.String)","1152":"Base64::::decodeFromFile(java.lang.String)","1153":"Base64::::decodeFromFile(java.lang.String)","1154":"Base64::::decodeFromFile(java.lang.String)","1155":"Base64::::decodeFromFile(java.lang.String)","1156":"Base64::::decodeFromFile(java.lang.String)","1157":"Base64::::decodeFromFile(java.lang.String)","1158":"Base64::::decodeFromFile(java.lang.String)","1159":"Base64::::decodeFromFile(java.lang.String)","1160":"Base64::::decodeFromFile(java.lang.String)","1161":"Base64::::decodeFromFile(java.lang.String)","1162":"Base64::::decodeFromFile(java.lang.String)","1163":"Base64::::decodeFromFile(java.lang.String)","1164":"Base64::::decodeFromFile(java.lang.String)","1165":"Base64::::decodeFromFile(java.lang.String)","1166":"Base64::::decodeFromFile(java.lang.String)","1167":"Base64::::decodeFromFile(java.lang.String)","1168":"Base64::::decodeFromFile(java.lang.String)","1169":"Base64::::decodeFromFile(java.lang.String)","1170":"Base64::::decodeFromFile(java.lang.String)","1171":"Base64::::decodeFromFile(java.lang.String)","1172":"Base64::::decodeFromFile(java.lang.String)","1173":"Base64::::decodeFromFile(java.lang.String)","1174":"Base64::::decodeFromFile(java.lang.String)","1175":"Base64::::decodeFromFile(java.lang.String)","1176":"Base64::::decodeFromFile(java.lang.String)","1177":"Base64::::decodeFromFile(java.lang.String)","1178":"Base64::::decodeFromFile(java.lang.String)","1179":"Base64::::decodeFromFile(java.lang.String)","1180":"Base64::::decodeFromFile(java.lang.String)","1181":"Base64::::decodeFromFile(java.lang.String)","1182":"Base64::::decodeFromFile(java.lang.String)","1193":"Base64::::encodeFromFile(java.lang.String)","1194":"Base64::::encodeFromFile(java.lang.String)","1195":"Base64::::encodeFromFile(java.lang.String)","1196":"Base64::::encodeFromFile(java.lang.String)","1197":"Base64::::encodeFromFile(java.lang.String)","1198":"Base64::::encodeFromFile(java.lang.String)","1199":"Base64::::encodeFromFile(java.lang.String)","1200":"Base64::::encodeFromFile(java.lang.String)","1201":"Base64::::encodeFromFile(java.lang.String)","1202":"Base64::::encodeFromFile(java.lang.String)","1203":"Base64::::encodeFromFile(java.lang.String)","1204":"Base64::::encodeFromFile(java.lang.String)","1205":"Base64::::encodeFromFile(java.lang.String)","1206":"Base64::::encodeFromFile(java.lang.String)","1207":"Base64::::encodeFromFile(java.lang.String)","1208":"Base64::::encodeFromFile(java.lang.String)","1209":"Base64::::encodeFromFile(java.lang.String)","1210":"Base64::::encodeFromFile(java.lang.String)","1211":"Base64::::encodeFromFile(java.lang.String)","1212":"Base64::::encodeFromFile(java.lang.String)","1213":"Base64::::encodeFromFile(java.lang.String)","1214":"Base64::::encodeFromFile(java.lang.String)","1215":"Base64::::encodeFromFile(java.lang.String)","1216":"Base64::::encodeFromFile(java.lang.String)","1217":"Base64::::encodeFromFile(java.lang.String)","1218":"Base64::::encodeFromFile(java.lang.String)","1219":"Base64::::encodeFromFile(java.lang.String)","1220":"Base64::::encodeFromFile(java.lang.String)","1221":"Base64::::encodeFromFile(java.lang.String)","1222":"Base64::::encodeFromFile(java.lang.String)","1223":"Base64::::encodeFromFile(java.lang.String)","1224":"Base64::::encodeFromFile(java.lang.String)","1225":"Base64::::encodeFromFile(java.lang.String)","1226":"Base64::::encodeFromFile(java.lang.String)","1227":"Base64::::encodeFromFile(java.lang.String)","1236":"Base64::::encodeFileToFile(java.lang.String,java.lang.String)","1237":"Base64::::encodeFileToFile(java.lang.String,java.lang.String)","1238":"Base64::::encodeFileToFile(java.lang.String,java.lang.String)","1239":"Base64::::encodeFileToFile(java.lang.String,java.lang.String)","1240":"Base64::::encodeFileToFile(java.lang.String,java.lang.String)","1241":"Base64::::encodeFileToFile(java.lang.String,java.lang.String)","1242":"Base64::::encodeFileToFile(java.lang.String,java.lang.String)","1243":"Base64::::encodeFileToFile(java.lang.String,java.lang.String)","1244":"Base64::::encodeFileToFile(java.lang.String,java.lang.String)","1245":"Base64::::encodeFileToFile(java.lang.String,java.lang.String)","1246":"Base64::::encodeFileToFile(java.lang.String,java.lang.String)","1247":"Base64::::encodeFileToFile(java.lang.String,java.lang.String)","1248":"Base64::::encodeFileToFile(java.lang.String,java.lang.String)","1249":"Base64::::encodeFileToFile(java.lang.String,java.lang.String)","1250":"Base64::::encodeFileToFile(java.lang.String,java.lang.String)","1251":"Base64::::encodeFileToFile(java.lang.String,java.lang.String)","1252":"Base64::::encodeFileToFile(java.lang.String,java.lang.String)","1253":"Base64::::encodeFileToFile(java.lang.String,java.lang.String)","1263":"Base64::::decodeFileToFile(java.lang.String,java.lang.String)","1264":"Base64::::decodeFileToFile(java.lang.String,java.lang.String)","1265":"Base64::::decodeFileToFile(java.lang.String,java.lang.String)","1266":"Base64::::decodeFileToFile(java.lang.String,java.lang.String)","1267":"Base64::::decodeFileToFile(java.lang.String,java.lang.String)","1268":"Base64::::decodeFileToFile(java.lang.String,java.lang.String)","1269":"Base64::::decodeFileToFile(java.lang.String,java.lang.String)","1270":"Base64::::decodeFileToFile(java.lang.String,java.lang.String)","1271":"Base64::::decodeFileToFile(java.lang.String,java.lang.String)","1272":"Base64::::decodeFileToFile(java.lang.String,java.lang.String)","1273":"Base64::::decodeFileToFile(java.lang.String,java.lang.String)","1274":"Base64::::decodeFileToFile(java.lang.String,java.lang.String)","1275":"Base64::::decodeFileToFile(java.lang.String,java.lang.String)","1276":"Base64::::decodeFileToFile(java.lang.String,java.lang.String)","1277":"Base64::::decodeFileToFile(java.lang.String,java.lang.String)","1278":"Base64::::decodeFileToFile(java.lang.String,java.lang.String)","1279":"Base64::::decodeFileToFile(java.lang.String,java.lang.String)","1280":"Base64::::decodeFileToFile(java.lang.String,java.lang.String)","1358":"Base64.InputStream::::read()","1359":"Base64.InputStream::::read()","1360":"Base64.InputStream::::read()","1361":"Base64.InputStream::::read()","1362":"Base64.InputStream::::read()","1363":"Base64.InputStream::::read()","1364":"Base64.InputStream::::read()","1365":"Base64.InputStream::::read()","1366":"Base64.InputStream::::read()","1367":"Base64.InputStream::::read()","1368":"Base64.InputStream::::read()","1369":"Base64.InputStream::::read()","1370":"Base64.InputStream::::read()","1371":"Base64.InputStream::::read()","1372":"Base64.InputStream::::read()","1373":"Base64.InputStream::::read()","1374":"Base64.InputStream::::read()","1375":"Base64.InputStream::::read()","1376":"Base64.InputStream::::read()","1377":"Base64.InputStream::::read()","1378":"Base64.InputStream::::read()","1379":"Base64.InputStream::::read()","1380":"Base64.InputStream::::read()","1381":"Base64.InputStream::::read()","1382":"Base64.InputStream::::read()","1383":"Base64.InputStream::::read()","1384":"Base64.InputStream::::read()","1385":"Base64.InputStream::::read()","1386":"Base64.InputStream::::read()","1387":"Base64.InputStream::::read()","1388":"Base64.InputStream::::read()","1389":"Base64.InputStream::::read()","1390":"Base64.InputStream::::read()","1391":"Base64.InputStream::::read()","1392":"Base64.InputStream::::read()","1393":"Base64.InputStream::::read()","1394":"Base64.InputStream::::read()","1395":"Base64.InputStream::::read()","1396":"Base64.InputStream::::read()","1397":"Base64.InputStream::::read()","1398":"Base64.InputStream::::read()","1399":"Base64.InputStream::::read()","1400":"Base64.InputStream::::read()","1401":"Base64.InputStream::::read()","1402":"Base64.InputStream::::read()","1403":"Base64.InputStream::::read()","1404":"Base64.InputStream::::read()","1405":"Base64.InputStream::::read()","1406":"Base64.InputStream::::read()","1407":"Base64.InputStream::::read()","1408":"Base64.InputStream::::read()","1409":"Base64.InputStream::::read()","1410":"Base64.InputStream::::read()","1411":"Base64.InputStream::::read()","1412":"Base64.InputStream::::read()","1413":"Base64.InputStream::::read()","1414":"Base64.InputStream::::read()","1415":"Base64.InputStream::::read()","1416":"Base64.InputStream::::read()","1417":"Base64.InputStream::::read()","1418":"Base64.InputStream::::read()","1419":"Base64.InputStream::::read()","1420":"Base64.InputStream::::read()","1421":"Base64.InputStream::::read()","1422":"Base64.InputStream::::read()","1423":"Base64.InputStream::::read()","1424":"Base64.InputStream::::read()","1425":"Base64.InputStream::::read()","1426":"Base64.InputStream::::read()","1427":"Base64.InputStream::::read()","1428":"Base64.InputStream::::read()","1429":"Base64.InputStream::::read()","1430":"Base64.InputStream::::read()","1431":"Base64.InputStream::::read()","1432":"Base64.InputStream::::read()","1433":"Base64.InputStream::::read()","1434":"Base64.InputStream::::read()","1435":"Base64.InputStream::::read()","1436":"Base64.InputStream::::read()","1437":"Base64.InputStream::::read()","1438":"Base64.InputStream::::read()","1439":"Base64.InputStream::::read()","1440":"Base64.InputStream::::read()","1441":"Base64.InputStream::::read()","1442":"Base64.InputStream::::read()","1443":"Base64.InputStream::::read()","1444":"Base64.InputStream::::read()","1445":"Base64.InputStream::::read()","1446":"Base64.InputStream::::read()","1447":"Base64.InputStream::::read()","1448":"Base64.InputStream::::read()","1463":"Base64.InputStream::::read(byte[],int,int)","1464":"Base64.InputStream::::read(byte[],int,int)","1465":"Base64.InputStream::::read(byte[],int,int)","1466":"Base64.InputStream::::read(byte[],int,int)","1467":"Base64.InputStream::::read(byte[],int,int)","1468":"Base64.InputStream::::read(byte[],int,int)","1469":"Base64.InputStream::::read(byte[],int,int)","1470":"Base64.InputStream::::read(byte[],int,int)","1471":"Base64.InputStream::::read(byte[],int,int)","1472":"Base64.InputStream::::read(byte[],int,int)","1473":"Base64.InputStream::::read(byte[],int,int)","1474":"Base64.InputStream::::read(byte[],int,int)","1475":"Base64.InputStream::::read(byte[],int,int)","1476":"Base64.InputStream::::read(byte[],int,int)","1477":"Base64.InputStream::::read(byte[],int,int)","1478":"Base64.InputStream::::read(byte[],int,int)","1479":"Base64.InputStream::::read(byte[],int,int)","1480":"Base64.InputStream::::read(byte[],int,int)","1572":"Base64.OutputStream::::write(int)","1573":"Base64.OutputStream::::write(int)","1574":"Base64.OutputStream::::write(int)","1575":"Base64.OutputStream::::write(int)","1576":"Base64.OutputStream::::write(int)","1577":"Base64.OutputStream::::write(int)","1578":"Base64.OutputStream::::write(int)","1579":"Base64.OutputStream::::write(int)","1580":"Base64.OutputStream::::write(int)","1581":"Base64.OutputStream::::write(int)","1582":"Base64.OutputStream::::write(int)","1583":"Base64.OutputStream::::write(int)","1584":"Base64.OutputStream::::write(int)","1585":"Base64.OutputStream::::write(int)","1586":"Base64.OutputStream::::write(int)","1587":"Base64.OutputStream::::write(int)","1588":"Base64.OutputStream::::write(int)","1589":"Base64.OutputStream::::write(int)","1590":"Base64.OutputStream::::write(int)","1591":"Base64.OutputStream::::write(int)","1592":"Base64.OutputStream::::write(int)","1593":"Base64.OutputStream::::write(int)","1594":"Base64.OutputStream::::write(int)","1595":"Base64.OutputStream::::write(int)","1596":"Base64.OutputStream::::write(int)","1597":"Base64.OutputStream::::write(int)","1598":"Base64.OutputStream::::write(int)","1599":"Base64.OutputStream::::write(int)","1600":"Base64.OutputStream::::write(int)","1601":"Base64.OutputStream::::write(int)","1602":"Base64.OutputStream::::write(int)","1603":"Base64.OutputStream::::write(int)","1604":"Base64.OutputStream::::write(int)","1605":"Base64.OutputStream::::write(int)","1606":"Base64.OutputStream::::write(int)","1607":"Base64.OutputStream::::write(int)","1608":"Base64.OutputStream::::write(int)","1609":"Base64.OutputStream::::write(int)","1610":"Base64.OutputStream::::write(int)","1611":"Base64.OutputStream::::write(int)","1612":"Base64.OutputStream::::write(int)","1613":"Base64.OutputStream::::write(int)","1625":"Base64.OutputStream::::write(byte[],int,int)","1626":"Base64.OutputStream::::write(byte[],int,int)","1627":"Base64.OutputStream::::write(byte[],int,int)","1628":"Base64.OutputStream::::write(byte[],int,int)","1629":"Base64.OutputStream::::write(byte[],int,int)","1630":"Base64.OutputStream::::write(byte[],int,int)","1631":"Base64.OutputStream::::write(byte[],int,int)","1632":"Base64.OutputStream::::write(byte[],int,int)","1633":"Base64.OutputStream::::write(byte[],int,int)","1634":"Base64.OutputStream::::write(byte[],int,int)","1635":"Base64.OutputStream::::write(byte[],int,int)","1636":"Base64.OutputStream::::write(byte[],int,int)","1644":"Base64.OutputStream::::flushBase64()","1645":"Base64.OutputStream::::flushBase64()","1646":"Base64.OutputStream::::flushBase64()","1647":"Base64.OutputStream::::flushBase64()","1648":"Base64.OutputStream::::flushBase64()","1649":"Base64.OutputStream::::flushBase64()","1650":"Base64.OutputStream::::flushBase64()","1651":"Base64.OutputStream::::flushBase64()","1652":"Base64.OutputStream::::flushBase64()","1653":"Base64.OutputStream::::flushBase64()","1654":"Base64.OutputStream::::flushBase64()","1655":"Base64.OutputStream::::flushBase64()","1663":"Base64.OutputStream::::close()","1664":"Base64.OutputStream::::close()","1665":"Base64.OutputStream::::close()","1666":"Base64.OutputStream::::close()","1667":"Base64.OutputStream::::close()","1668":"Base64.OutputStream::::close()","1669":"Base64.OutputStream::::close()","1670":"Base64.OutputStream::::close()","1671":"Base64.OutputStream::::close()","1672":"Base64.OutputStream::::close()","1673":"Base64.OutputStream::::close()","1685":"Base64.OutputStream::::suspendEncoding()","1686":"Base64.OutputStream::::suspendEncoding()","1687":"Base64.OutputStream::::suspendEncoding()","1688":"Base64.OutputStream::::suspendEncoding()","1698":"Base64.OutputStream::::resumeEncoding()","1699":"Base64.OutputStream::::resumeEncoding()","1700":"Base64.OutputStream::::resumeEncoding()"},"test_reverse_method_lines_dic":{"35":"Base64Test::::testEncodeObjectForNullObject()","36":"Base64Test::::testEncodeObjectForNullObject()","37":"Base64Test::::testEncodeObjectForNullObject()","38":"Base64Test::::testEncodeObjectForNullObject()","40":"Base64Test::::testDecodeForSourceIsEmptyArray()","41":"Base64Test::::testDecodeForSourceIsEmptyArray()","42":"Base64Test::::testDecodeForSourceIsEmptyArray()","43":"Base64Test::::testDecodeForSourceIsEmptyArray()","45":"Base64Test::::testDecodeForSourceIsEmptyArrayGzip()","46":"Base64Test::::testDecodeForSourceIsEmptyArrayGzip()","47":"Base64Test::::testDecodeForSourceIsEmptyArrayGzip()","48":"Base64Test::::testDecodeForSourceIsEmptyArrayGzip()","49":"Base64Test::::testDecodeForSourceIsEmptyArrayGzip()","50":"Base64Test::::testDecodeForSourceIsEmptyArrayGzip()","51":"Base64Test::::testDecodeForSourceIsEmptyArrayGzip()","52":"Base64Test::::testDecodeForSourceIsEmptyArrayGzip()","53":"Base64Test::::testDecodeForSourceIsEmptyArrayGzip()","54":"Base64Test::::testDecodeForSourceIsEmptyArrayGzip()","55":"Base64Test::::testDecodeForSourceIsEmptyArrayGzip()","56":"Base64Test::::testDecodeForSourceIsEmptyArrayGzip()","57":"Base64Test::::testDecodeForSourceIsEmptyArrayGzip()","58":"Base64Test::::testDecodeForSourceIsEmptyArrayGzip()","59":"Base64Test::::testDecodeForSourceIsEmptyArrayGzip()","60":"Base64Test::::testDecodeForSourceIsEmptyArrayGzip()","61":"Base64Test::::testDecodeForSourceIsEmptyArrayGzip()","62":"Base64Test::::testDecodeForSourceIsEmptyArrayGzip()","63":"Base64Test::::testDecodeForSourceIsEmptyArrayGzip()","64":"Base64Test::::testDecodeForSourceIsEmptyArrayGzip()","65":"Base64Test::::testDecodeForSourceIsEmptyArrayGzip()","66":"Base64Test::::testDecodeForSourceIsEmptyArrayGzip()"},"tests":[{"test_lines":[35,38],"covered_lines":[128,167,186,229,246,293,312,363,364,365,378,379,380,447,448,479,492,496,498,499,500,501,502,505,506,507,508,509,536,565,566,567,568,571,572,576,577,580,585,587,595,597,600,604,607,609,614,1545,1546,1547,1548,1549,1550,1551,1552,1553,1554,1555,1556,1557,1574,1580,1581,1582,1584,1586,1587,1592,1613,1627,1632,1633,1636,1645,1646,1647,1648,1655,1665,1669,1671,1672,1673]},{"test_lines":[40,43],"covered_lines":[128,167,186,229,246,293,312,632,701,702,705,751,753,754,757,758,759,760,761,772,780]},{"test_lines":[45,66],"covered_lines":[128,167,186,229,246,293,312,363,364,365,378,379,380,447,448,479,492,496,498,499,500,501,502,505,506,507,508,509,657,701,702,705,706,707,708,713,714,715,717,718,726,728,731,734,736,741,1545,1546,1547,1548,1549,1550,1551,1552,1553,1554,1555,1556,1557,1574,1580,1581,1582,1584,1586,1587,1592,1613,1627,1632,1633,1636,1645,1646,1647,1648,1655,1665,1669,1671,1672,1673]}]},"/bernard/dataset_construction/prep/repos/itext-java/commons/src/main/java/com/itextpdf/commons/utils/DIContainer.java":{"class_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.utils;\n","\n","import java.util.concurrent.ConcurrentHashMap;\n","import java.util.function.Supplier;\n","\n","/**\n"," * A simple dependency injection container.\n"," * <p>\n"," * The container is thread-safe.\n"," */\n","public class DIContainer {\n","\n","    private static final ConcurrentHashMap<Class<?>, Supplier<Object>> instances = new ConcurrentHashMap<>();\n","\n","    private final ConcurrentHashMap<Class<?>, Object> localInstances = new ConcurrentHashMap<>();\n","\n","    static {\n","        DIContainerConfigurations.loadDefaultConfigurations();\n","    }\n","\n","\n","    /**\n","     * Creates a new instance of {@link DIContainer}.\n","     */\n","    public DIContainer() {\n","        // Empty constructor\n","    }\n","\n","    /**\n","     * Registers a default instance for a class.\n","     *\n","     * @param clazz    the class\n","     * @param supplier supplier of the instance\n","     */\n","    public static void registerDefault(Class<?> clazz, Supplier<Object> supplier) {\n","        instances.put(clazz, supplier);\n","    }\n","\n","    /**\n","     * Registers an instance for a class.\n","     *\n","     * @param clazz the class\n","     * @param inst  the instance\n","     */\n","    public void register(Class<?> clazz, Object inst) {\n","        localInstances.put(clazz, inst);\n","    }\n","\n","    /**\n","     * Gets an instance of a class.\n","     *\n","     * @param clazz the class\n","     * @param <T>   the type of the class\n","     *\n","     * @return the instance\n","     */\n","    public <T> T getInstance(Class<T> clazz) {\n","        Object supplier = localInstances.get(clazz);\n","        if (supplier == null) {\n","            supplier = instances.get(clazz).get();\n","        }\n","        if (supplier == null) {\n","            throw new RuntimeException(\"No instance registered for class \" + clazz.getName());\n","        }\n","        return (T) supplier;\n","    }\n","\n","    /**\n","     * Checks if an instance is registered for a class.\n","     * If the class is registered but the value is null, it will still return {@code true}.\n","     *\n","     * @param clazz the class\n","     *\n","     * @return {@code true} if an instance is registered, {@code false} otherwise\n","     */\n","    public boolean isRegistered(Class<?> clazz) {\n","        return localInstances.containsKey(clazz) || instances.containsKey(clazz);\n","    }\n","}\n"],"test_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.utils;\n","\n","import com.itextpdf.test.ExtendedITextTest;\n","import com.itextpdf.test.annotations.type.UnitTest;\n","\n","import org.junit.Assert;\n","import org.junit.Test;\n","import org.junit.experimental.categories.Category;\n","\n","@Category(UnitTest.class)\n","public class DIContainerTest extends ExtendedITextTest {\n","\n","    @Test\n","    public void testGetRegisteredInstance() {\n","        DIContainer di = new DIContainer();\n","        di.register(String.class, \"hello\");\n","        Assert.assertEquals(\"hello\", di.getInstance(String.class));\n","    }\n","\n","    @Test\n","    public void testRegisterDefaultInstance() {\n","        DIContainer.registerDefault(String.class, () -> \"hello\");\n","        DIContainer di = new DIContainer();\n","        Assert.assertEquals(\"hello\", di.getInstance(String.class));\n","    }\n","\n","}\n"],"method_lines_dic":{"DIContainer::::registerDefault(java.lang.Class<?>,java.util.function.Supplier<java.lang.Object>)":[57,59],"DIContainer::::register(java.lang.Class<?>,java.lang.Object)":[67,69],"DIContainer::::getInstance(java.lang.Class<T>)":[79,88],"DIContainer::::isRegistered(java.lang.Class<?>)":[98,100]},"test_method_lines_dic":{"DIContainerTest::::testGetRegisteredInstance()":[35,40],"DIContainerTest::::testRegisterDefaultInstance()":[42,47]},"reverse_method_lines_dic":{"57":"DIContainer::::registerDefault(java.lang.Class<?>,java.util.function.Supplier<java.lang.Object>)","58":"DIContainer::::registerDefault(java.lang.Class<?>,java.util.function.Supplier<java.lang.Object>)","59":"DIContainer::::registerDefault(java.lang.Class<?>,java.util.function.Supplier<java.lang.Object>)","67":"DIContainer::::register(java.lang.Class<?>,java.lang.Object)","68":"DIContainer::::register(java.lang.Class<?>,java.lang.Object)","69":"DIContainer::::register(java.lang.Class<?>,java.lang.Object)","79":"DIContainer::::getInstance(java.lang.Class<T>)","80":"DIContainer::::getInstance(java.lang.Class<T>)","81":"DIContainer::::getInstance(java.lang.Class<T>)","82":"DIContainer::::getInstance(java.lang.Class<T>)","83":"DIContainer::::getInstance(java.lang.Class<T>)","84":"DIContainer::::getInstance(java.lang.Class<T>)","85":"DIContainer::::getInstance(java.lang.Class<T>)","86":"DIContainer::::getInstance(java.lang.Class<T>)","87":"DIContainer::::getInstance(java.lang.Class<T>)","88":"DIContainer::::getInstance(java.lang.Class<T>)","98":"DIContainer::::isRegistered(java.lang.Class<?>)","99":"DIContainer::::isRegistered(java.lang.Class<?>)","100":"DIContainer::::isRegistered(java.lang.Class<?>)"},"test_reverse_method_lines_dic":{"35":"DIContainerTest::::testGetRegisteredInstance()","36":"DIContainerTest::::testGetRegisteredInstance()","37":"DIContainerTest::::testGetRegisteredInstance()","38":"DIContainerTest::::testGetRegisteredInstance()","39":"DIContainerTest::::testGetRegisteredInstance()","40":"DIContainerTest::::testGetRegisteredInstance()","42":"DIContainerTest::::testRegisterDefaultInstance()","43":"DIContainerTest::::testRegisterDefaultInstance()","44":"DIContainerTest::::testRegisterDefaultInstance()","45":"DIContainerTest::::testRegisterDefaultInstance()","46":"DIContainerTest::::testRegisterDefaultInstance()","47":"DIContainerTest::::testRegisterDefaultInstance()"},"tests":[{"test_lines":[35,40],"covered_lines":[35,37,40,41,47,49,68,69,80,81,84,87]},{"test_lines":[42,47],"covered_lines":[35,37,40,41,47,49,58,59,80,81,82,84,87]}]},"/bernard/dataset_construction/prep/repos/itext-java/commons/src/main/java/com/itextpdf/commons/utils/ProcessInfo.java":{"class_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.utils;\n","\n","/**\n"," * Class contains a process information, such as process exit code and process output.\n"," */\n","public final class ProcessInfo {\n","\n","    private final int exitCode;\n","    private final String processStdOutput;\n","    private final String processErrOutput;\n","\n","    /**\n","     * Create a new instance, containing a process information,\n","     * such as process exit code, process standard and error outputs.\n","     *\n","     * @param exitCode      exit code of the process.\n","     * @param processStdOutput the standard output of the process.\n","     * @param processErrOutput the error output of the process.\n","     */\n","    public ProcessInfo(int exitCode, String processStdOutput, String processErrOutput) {\n","        this.exitCode = exitCode;\n","        this.processStdOutput = processStdOutput;\n","        this.processErrOutput = processErrOutput;\n","    }\n","\n","    /**\n","     * Getter for a process exit code.\n","     *\n","     * @return Returns a process exit code.\n","     */\n","    public int getExitCode() {\n","        return exitCode;\n","    }\n","\n","    /**\n","     * Getter for a standard process output.\n","     *\n","     * @return Returns a process standard output string.\n","     */\n","    public String getProcessStdOutput() {\n","        return processStdOutput;\n","    }\n","\n","    /**\n","     * Getter for an error process output.\n","     *\n","     * @return Returns a process error output string.\n","     */\n","    public String getProcessErrOutput() {\n","        return processErrOutput;\n","    }\n","}\n"],"test_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.utils;\n","\n","import com.itextpdf.test.ExtendedITextTest;\n","import com.itextpdf.test.annotations.type.UnitTest;\n","\n","import org.junit.Assert;\n","import org.junit.Test;\n","import org.junit.experimental.categories.Category;\n","\n","@Category(UnitTest.class)\n","public class ProcessInfoTest extends ExtendedITextTest {\n","\n","    @Test\n","    public void getExitCodeTest() {\n","        int exitCode = 1;\n","        ProcessInfo processInfo = new ProcessInfo(exitCode, null,  null);\n","\n","        Assert.assertEquals(exitCode, processInfo.getExitCode());\n","    }\n","\n","    @Test\n","    public void getProcessStdOutput() {\n","        String stdOutput = \"output\";\n","        ProcessInfo processInfo = new ProcessInfo(0, stdOutput,  null);\n","\n","        Assert.assertEquals(stdOutput, processInfo.getProcessStdOutput());\n","    }\n","\n","    @Test\n","    public void getProcessErrOutput() {\n","        String stdOutput = \"output\";\n","        ProcessInfo processInfo = new ProcessInfo(0, null,  stdOutput);\n","\n","        Assert.assertEquals(stdOutput, processInfo.getProcessErrOutput());\n","    }\n","}\n"],"method_lines_dic":{"ProcessInfo::::getExitCode()":[53,55],"ProcessInfo::::getProcessStdOutput()":[62,64],"ProcessInfo::::getProcessErrOutput()":[71,73]},"test_method_lines_dic":{"ProcessInfoTest::::getExitCodeTest()":[35,41],"ProcessInfoTest::::getProcessStdOutput()":[43,49],"ProcessInfoTest::::getProcessErrOutput()":[51,57]},"reverse_method_lines_dic":{"53":"ProcessInfo::::getExitCode()","54":"ProcessInfo::::getExitCode()","55":"ProcessInfo::::getExitCode()","62":"ProcessInfo::::getProcessStdOutput()","63":"ProcessInfo::::getProcessStdOutput()","64":"ProcessInfo::::getProcessStdOutput()","71":"ProcessInfo::::getProcessErrOutput()","72":"ProcessInfo::::getProcessErrOutput()","73":"ProcessInfo::::getProcessErrOutput()"},"test_reverse_method_lines_dic":{"35":"ProcessInfoTest::::getExitCodeTest()","36":"ProcessInfoTest::::getExitCodeTest()","37":"ProcessInfoTest::::getExitCodeTest()","38":"ProcessInfoTest::::getExitCodeTest()","39":"ProcessInfoTest::::getExitCodeTest()","40":"ProcessInfoTest::::getExitCodeTest()","41":"ProcessInfoTest::::getExitCodeTest()","43":"ProcessInfoTest::::getProcessStdOutput()","44":"ProcessInfoTest::::getProcessStdOutput()","45":"ProcessInfoTest::::getProcessStdOutput()","46":"ProcessInfoTest::::getProcessStdOutput()","47":"ProcessInfoTest::::getProcessStdOutput()","48":"ProcessInfoTest::::getProcessStdOutput()","49":"ProcessInfoTest::::getProcessStdOutput()","51":"ProcessInfoTest::::getProcessErrOutput()","52":"ProcessInfoTest::::getProcessErrOutput()","53":"ProcessInfoTest::::getProcessErrOutput()","54":"ProcessInfoTest::::getProcessErrOutput()","55":"ProcessInfoTest::::getProcessErrOutput()","56":"ProcessInfoTest::::getProcessErrOutput()","57":"ProcessInfoTest::::getProcessErrOutput()"},"tests":[{"test_lines":[35,41],"covered_lines":[42,43,44,45,46,54]},{"test_lines":[43,49],"covered_lines":[42,43,44,45,46,63]},{"test_lines":[51,57],"covered_lines":[42,43,44,45,46,72]}]},"/bernard/dataset_construction/prep/repos/itext-java/commons/src/main/java/com/itextpdf/commons/utils/PlaceHolderTextUtil.java":{"class_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.utils;\n","\n","\n","/**\n"," * This class is used to generate placeholder text for the examples and tests.\n"," * It is not used anywhere in the actual code.\n"," * This provides a better way than using Lorem Ipsum text as it is more readable.\n"," */\n","public final class PlaceHolderTextUtil {\n","    // source: https://en.wikipedia.org/wiki/PDF\n","    private static final String TEMPLATE =\n","            \"Portable Document Format (PDF), standardized as ISO 32000, is a file format developed by Adobe in 1992 \"\n","                    + \"to present documents, including text formatting and images, in a manner independent of \"\n","                    + \"application software, hardware, and operating systems. Based on the PostScript language,\"\n","                    + \" each PDF file encapsulates a complete description of a fixed-layout flat document, including \"\n","                    + \"the text, fonts, vector graphics, raster images and other information needed to display it. \"\n","                    + \"PDF has its roots in \\\"The Camelot Project\\\" initiated by Adobe co-founder John Warnock in \"\n","                    + \"1991. \"\n","\n","                    + \"PDF was standardized as ISO 32000 in 2008. The last edition as ISO 32000-2:2020 was \"\n","                    + \"published in December 2020. \"\n","\n","                    + \"PDF files may contain a variety of content besides flat text and graphics including logical \"\n","                    + \"structuring elements, interactive elements such as annotations and form-fields, layers, rich \"\n","                    + \"media (including video content), three-dimensional objects using U3D or PRC, and various other\"\n","                    + \" data formats. The PDF specification also provides for encryption and digital signatures, file\"\n","                    + \" attachments, and metadata to enable workflows requiring these features. \"\n","\n","                    + \"History \" + \"Main article: History of PDF \"\n","                    + \"Adobe Systems made the PDF specification available free of charge in 1993. In the early years \"\n","                    + \"PDF was popular mainly in desktop publishing workflows, and competed with a variety of formats\"\n","                    + \" such as DjVu, Envoy, Common Ground Digital Paper, Farallon Replica and even Adobe's own \"\n","                    + \"PostScript format. \"\n","\n","                    + \"PDF was a proprietary format controlled by Adobe until it was released as an open standard on \"\n","                    + \"July 1, 2008, and published by the International Organization for Standardization as ISO \"\n","                    + \"32000-1:2008, at which time control of the specification passed to an ISO Committee of \"\n","                    + \"volunteer industry experts. In 2008, Adobe published a Public Patent License to ISO 32000-1 \"\n","                    + \"granting royalty-free rights for all patents owned by Adobe that are necessary to make, use, \"\n","                    + \"sell, and distribute PDF-compliant implementations. \"\n","\n","                    + \"PDF 1.7, the sixth edition of the PDF specification that became ISO 32000-1, includes some \"\n","                    + \"proprietary technologies defined only by Adobe, such as Adobe XML Forms Architecture (XFA) and\"\n","                    + \" JavaScript extension for Acrobat, which are referenced by ISO 32000-1 as normative and \"\n","                    + \"indispensable for the full implementation of the ISO 32000-1 specification. These \"\n","                    + \"proprietary technologies are not standardized and their specification is published only on \"\n","                    + \"Adobe's website. Many of them are also not supported by popular third-party \"\n","                    + \"implementations of PDF. \"\n","\n","                    + \"In December 2020, the second edition of PDF 2.0, ISO 32000-2:2020, was published, including \"\n","                    + \"clarifications, corrections, and critical updates to normative references. ISO 32000-2 \"\n","                    + \"does not include any proprietary technologies as normative references. \"\n","\n","                    + \"ISO's publication of ISO 32000-2 in 2017 ended the 24-year tradition of the latest PDF \"\n","                    + \"specification being freely available from Adobe. Starting in April, 2023, to provide PDF \"\n","                    + \"developers and stakeholders with their accustomed level of access, the PDF Association and its\"\n","                    + \" sponsors made ISO 32000-2 available for download at no cost. \"\n","\n","                    + \"Technical details \"\n","                    + \"A PDF file is often a combination of vector graphics, text, and bitmap graphics. The basic \"\n","                    + \"types of content in a PDF are: \"\n","\n","                    + \"Typeset text stored as content streams (i.e., not encoded in plain text); \"\n","                    + \"Vector graphics for illustrations and designs that consist of shapes and lines; \"\n","                    + \"Raster graphics for photographs and other types of images \"\n","                    + \"Multimedia objects in the document. \"\n","                    + \"In later PDF revisions, a PDF document can also support links (inside document or web page), \"\n","                    + \"forms, JavaScript (initially available as a plugin for Acrobat 3.0), or any other types of \"\n","                    + \"embedded contents that can be handled using plug-ins. \"\n","\n","                    + \"PDF combines three technologies: \"\n","\n","                    + \"An equivalent subset of the PostScript page description programming language but in \"\n","                    + \"declarative form, for generating the layout and graphics. \"\n","                    + \"A font-embedding/replacement system to allow fonts to travel with the documents. \"\n","                    + \"A structured storage system to bundle these elements and any associated content into a single \"\n","                    + \"file, with data compression where appropriate. \" + \"PostScript language \"\n","                    + \"PostScript is a page description language run in an interpreter to generate an image, a \"\n","                    + \"process requiring many resources. It can handle graphics and standard features of programming \"\n","                    + \"languages such as if statements and loop commands. PDF is largely based on PostScript but \"\n","                    + \"simplified to remove flow control features like these, while graphics commands equivalent to \"\n","                    + \"lineto remain. \"\n","\n","                    + \"Historically, the PostScript-like PDF code is generated from a source PostScript file. The \"\n","                    + \"graphics commands that are output by the PostScript code are collected and tokenized\"\n","                    + \".[clarification needed] Any files, graphics, or fonts to which the document refers also are \"\n","                    + \"collected. Then, everything is compressed to a single file. Therefore, the entire PostScript \"\n","                    + \"world (fonts, layout, measurements) remains intact.[citation needed] \"\n","\n","                    + \"As a document format, PDF has several advantages over PostScript: \"\n","\n","                    + \"PDF contains tokenized and interpreted results of the PostScript source code, for direct \"\n","                    + \"correspondence between changes to items in the PDF page description and changes to the \"\n","                    + \"resulting page appearance. \"\n","                    + \"PDF (since version 1.4) supports transparent graphics; PostScript does not. \"\n","                    + \"PostScript is an interpreted programming language with an implicit global state, so \"\n","                    + \"instructions accompanying the description of one page can affect the appearance of any \"\n","                    + \"following page. Therefore, all preceding pages in a PostScript document must be processed to \"\n","                    + \"determine the correct appearance of a given page, whereas each page in a PDF document is \"\n","                    + \"unaffected by the others. As a result, PDF viewers allow the user to quickly jump to the final\"\n","                    + \" pages of a long document, whereas a PostScript viewer needs to process all pages sequentially\"\n","                    + \" before being able to display the destination page (unless the optional PostScript Document \"\n","                    + \"Structuring Conventions have been carefully compiled and included). \"\n","                    + \"PDF 1.6 and later supports interactive 3D documents embedded in a PDF file: 3D drawings can be\"\n","                    + \" embedded using U3D or PRC and various other data formats. \"\n","\n","                    + \"File format \"\n","                    + \"A PDF file is organized using ASCII characters, except for certain elements that may have \"\n","                    + \"binary content. The file starts with a header containing a magic number (as a readable string)\"\n","                    + \" and the version of the format, for example %PDF-1.7. The format is a subset of a COS \"\n","                    + \"(\\\"Carousel\\\" Object Structure) format. A COS tree file consists primarily of objects, of \"\n","                    + \"which there are nine types: \"\n","\n","                    + \"Boolean values, representing true or false \" + \"Real numbers \" + \"Integers \"\n","                    + \"Strings, enclosed within parentheses ((...)) or represented as hexadecimal within single angle\"\n","                    + \" brackets (<...>). Strings may contain 8-bit characters. \"\n","                    + \"Names, starting with a forward slash (/) \"\n","                    + \"Arrays, ordered collections of objects enclosed within square brackets ([...]) \"\n","                    + \"Dictionaries, collections of objects indexed by names enclosed within double angle brackets \"\n","                    + \"(<<...>>) \"\n","                    + \"Streams, usually containing large amounts of optionally compressed binary data, preceded by a \"\n","                    + \"dictionary and enclosed between the stream and endstream keywords. \" + \"The null object \"\n","                    + \"Furthermore, there may be comments, introduced with the percent sign (%). Comments may contain\"\n","                    + \" 8-bit characters. \"\n","\n","                    + \"Objects may be either direct (embedded in another object) or indirect. Indirect objects are \"\n","                    + \"numbered with an object number and a generation number and defined between the obj and endobj \"\n","                    + \"keywords if residing in the document root. Beginning with PDF version 1.5, indirect objects \"\n","                    + \"(except other streams) may also be located in special streams known as object streams (marked \"\n","                    + \"/Type /ObjStm). This technique enables non-stream objects to have standard stream filters \"\n","                    + \"applied to them, reduces the size of files that have large numbers of small indirect objects \"\n","                    + \"and is especially useful for Tagged PDF. Object streams do not support specifying an object's \"\n","                    + \"generation number (other than 0). \"\n","\n","                    + \"An index table, also called the cross-reference table, is located near the end of the file and\"\n","                    + \" gives the byte offset of each indirect object from the start of the file. This design \"\n","                    + \"allows for efficient random access to the objects in the file, and also allows for small \"\n","                    + \"changes to be made without rewriting the entire file (incremental update). Before PDF version \"\n","                    + \"1.5, the table would always be in a special ASCII format, be marked with the xref keyword, and\"\n","                    + \" follow the main body composed of indirect objects. Version 1.5 introduced optional \"\n","                    + \"cross-reference streams, which have the form of a standard stream object, possibly with \"\n","                    + \"filters applied. Such a stream may be used instead of the ASCII cross-reference table and \"\n","                    + \"contains the offsets and other information in binary format. The format is flexible in that it\"\n","                    + \" allows for integer width specification (using the /W array), so that for example, a document \"\n","                    + \"not exceeding 64 KiB in size may dedicate only 2  bytes for object offsets. \"\n","\n","                    + \"At the end of a PDF file is a footer containing \"\n","\n","                    + \"The startxref keyword followed by an offset to the start of the cross-reference table \"\n","                    + \"(starting with the xref keyword) or the cross-reference stream object, followed by \"\n","                    + \"The %%EOF end-of-file marker. \"\n","                    + \"If a cross-reference stream is not being used, the footer is preceded by the trailer keyword \"\n","                    + \"followed by a dictionary containing information that would otherwise be contained in the \"\n","                    + \"cross-reference stream object's dictionary: \"\n","\n","                    + \"A reference to the root object of the tree structure, also known as the catalog (/Root) \"\n","                    + \"The count of indirect objects in the cross-reference table (/Size) \"\n","                    + \"Other optional information \"\n","                    + \"Within each page, there are one or multiple content streams that describe the text, vector and\"\n","                    + \" images being drawn on the page. The content stream is stack-based, similar to PostScript. \"\n","\n","                    + \"The maximum size of a PDF compared to Europe. \"\n","                    + \"There are two layouts to the PDF files: non-linearized (not \\\"optimized\\\") and linearized \"\n","                    + \"(\\\"optimized\\\"). Non-linearized PDF files can be smaller than their linear counterparts, \"\n","                    + \"though they are slower to access because portions of the data required to assemble pages of \"\n","                    + \"the document are scattered throughout the PDF file. Linearized PDF files (also called \"\n","                    + \"\\\"optimized\\\" or \\\"web optimized\\\" PDF files) are constructed in a manner that enables them to\"\n","                    + \" be read in a Web browser plugin without waiting for the entire file to download, since all \"\n","                    + \"objects required for the first page to display are optimally organized at the start of the \"\n","                    + \"file. PDF files may be optimized using Adobe Acrobat software or QPDF. \"\n","\n","                    + \"Page dimensions are not limited by the format itself. However, Adobe Acrobat imposes a limit \"\n","                    + \"of 15 million in by 15 million in, or 225 trillion in2 (145,161 km2). \"\n","\n","                    + \"Imaging model \"\n","                    + \"The basic design of how graphics are represented in PDF is very similar to that of PostScript,\"\n","                    + \" except for the use of transparency, which was added in PDF 1.4. \"\n","\n","                    + \"PDF graphics use a device-independent Cartesian coordinate system to describe the surface of a\"\n","                    + \" page. A PDF page description can use a matrix to scale, rotate, or skew graphical elements. A\"\n","                    + \" key concept in PDF is that of the graphics state, which is a collection of graphical \"\n","                    + \"parameters that may be changed, saved, and restored by a page description. PDF has (as of \"\n","                    + \"version 2.0) 25 graphics state properties, of which some of the most important are: \"\n","\n","                    + \"The current transformation matrix (CTM), which determines the coordinate system \"\n","                    + \"The clipping path \" + \"The color space \"\n","                    + \"The alpha constant, which is a key component of transparency \"\n","                    + \"Black point compensation control (introduced in PDF 2.0) \" + \"Vector graphics \"\n","                    + \"As in PostScript, vector graphics in PDF are constructed with paths. Paths are usually \"\n","                    + \"composed of lines and cubic Bézier curves, but can also be constructed from the outlines of \"\n","                    + \"text. Unlike PostScript, PDF does not allow a single path to mix text outlines with lines and \"\n","                    + \"curves. Paths can be stroked, filled, fill then stroked, or used for clipping. Strokes and \"\n","                    + \"fills can use any color set in the graphics state, including patterns. PDF supports several \"\n","                    + \"types of patterns. The simplest is the tiling pattern in which a piece of artwork is specified\"\n","                    + \" to be drawn repeatedly. This may be a colored tiling pattern, with the colors specified in \"\n","                    + \"the pattern object, or an uncolored tiling pattern, which defers color specification to the \"\n","                    + \"time the pattern is drawn. Beginning with PDF 1.3 there is also a shading pattern, which draws\"\n","                    + \" continuously varying colors. There are seven types of shading patterns of which the simplest \"\n","                    + \"are the axial shading (Type 2) and radial shading (Type 3). \"\n","\n","                    + \"Raster images \"\n","                    + \"Raster images in PDF (called Image XObjects) are represented by dictionaries with an \"\n","                    + \"associated stream. The dictionary describes the properties of the image, and the stream \"\n","                    + \"contains the image data. (Less commonly, small raster images may be embedded directly in a \"\n","                    + \"page description as an inline image.) Images are typically filtered for compression purposes. \"\n","                    + \"Image filters supported in PDF include the following general-purpose filters: \"\n","\n","                    + \"ASCII85Decode, a filter used to put the stream into 7-bit ASCII, \"\n","                    + \"ASCIIHexDecode, similar to ASCII85Decode but less compact, \"\n","                    + \"FlateDecode, a commonly used filter based on the deflate algorithm defined in RFC 1951 \"\n","                    + \"(deflate is also used in the gzip, PNG, and zip file formats among others); introduced in PDF \"\n","                    + \"1.2; it can use one of two groups of predictor functions for more compact zlib/deflate \"\n","                    + \"compression: Predictor 2 from the TIFF 6.0 specification and predictors (filters) from the PNG\"\n","                    + \" specification (RFC 2083), \"\n","                    + \"LZWDecode, a filter based on LZW Compression; it can use one of two groups of predictor \"\n","                    + \"functions for more compact LZW compression: Predictor 2 from the TIFF 6.0 specification and \"\n","                    + \"predictors (filters) from the PNG specification, \"\n","                    + \"RunLengthDecode, a simple compression method for streams with repetitive data using the \"\n","                    + \"run-length encoding algorithm and the image-specific filters, \"\n","                    + \"DCTDecode, a lossy filter based on the JPEG standard, \"\n","                    + \"CCITTFaxDecode, a lossless bi-level (black/white) filter based on the Group 3 or Group 4 CCITT\"\n","                    + \" (ITU-T) fax compression standard defined in ITU-T T.4 and T.6, \"\n","                    + \"JBIG2Decode, a lossy or lossless bi-level (black/white) filter based on the JBIG2 standard, \"\n","                    + \"introduced in PDF 1.4, and \"\n","                    + \"JPXDecode, a lossy or lossless filter based on the JPEG 2000 standard, introduced in PDF 1.5. \"\n","                    + \"Normally all image content in a PDF is embedded in the file. But PDF allows image data to be \"\n","                    + \"stored in external files by the use of external streams or Alternate Images. Standardized \"\n","                    + \"subsets of PDF, including PDF/A and PDF/X, prohibit these features. \"\n","\n","                    + \"Text \"\n","                    + \"Text in PDF is represented by text elements in page content streams. A text element specifies \"\n","                    + \"that characters should be drawn at certain positions. The characters are specified using the \"\n","                    + \"encoding of a selected font resource. \"\n","\n","                    + \"A font object in PDF is a description of a digital typeface. It may either describe the \"\n","                    + \"characteristics of a typeface, or it may include an embedded font file. The latter case is \"\n","                    + \"called an embedded font while the former is called an unembedded font. The font files that may\"\n","                    + \" be embedded are based on widely used standard digital font formats: Type 1 (and its \"\n","                    + \"compressed variant CFF), TrueType, and (beginning with PDF 1.6) OpenType. Additionally PDF \"\n","                    + \"supports the Type 3 variant in which the components of the font are described by PDF graphic \"\n","                    + \"operators. \"\n","\n","                    + \"Fourteen typefaces, known as the standard 14 fonts, have a special significance in PDF \"\n","                    + \"documents: \"\n","\n","                    + \"Times (v3) (in regular, italic, bold, and bold italic) \"\n","                    + \"Courier (in regular, oblique, bold and bold oblique) \"\n","                    + \"Helvetica (v3) (in regular, oblique, bold and bold oblique) \" + \"Symbol \" + \"Zapf Dingbats \"\n","                    + \"These fonts are sometimes called the base fourteen fonts. These fonts, or suitable \"\n","                    + \"substitute fonts with the same metrics, should be available in most PDF readers, but they are \"\n","                    + \"not guaranteed to be available in the reader, and may only display correctly if the system has\"\n","                    + \" them installed. Fonts may be substituted if they are not embedded in a PDF. \"\n","                    + \"Within text strings, characters are shown using character codes (integers) that map to glyphs \"\n","                    + \"in the current font using an encoding. There are several predefined encodings, including \"\n","                    + \"WinAnsi, MacRoman, and many encodings for East Asian languages and a font can have its own \"\n","                    + \"built-in encoding. (Although the WinAnsi and MacRoman encodings are derived from the \"\n","                    + \"historical properties of the Windows and Macintosh operating systems, fonts using these \"\n","                    + \"encodings work equally well on any platform.) PDF can specify a predefined encoding to use, \"\n","                    + \"the font's built-in encoding or provide a lookup table of differences to a predefined or \"\n","                    + \"built-in encoding (not recommended with TrueType fonts). The encoding mechanisms in PDF \"\n","                    + \"were designed for Type 1 fonts, and the rules for applying them to TrueType fonts are complex. \"\n","                    + \"For large fonts or fonts with non-standard glyphs, the special encodings Identity-H (for \"\n","                    + \"horizontal writing) and Identity-V (for vertical) are used. With such fonts, it is necessary \"\n","                    + \"to provide a ToUnicode table if semantic information about the characters is to be preserved. \"\n","                    + \"Transparency \"\n","                    + \"The original imaging model of PDF was, like PostScript's, opaque: each object drawn on the \"\n","                    + \"page completely replaced anything previously marked in the same location. In PDF 1.4 the \"\n","                    + \"imaging model was extended to allow transparency. When transparency is used, new objects \"\n","                    + \"interact with previously marked objects to produce blending effects. The addition of \"\n","                    + \"transparency to PDF was done by means of new extensions that were designed to be ignored in \"\n","                    + \"products written to PDF 1.3 and earlier specifications. As a result, files that use a small \"\n","                    + \"amount of transparency might view acceptably by older viewers, but files making extensive use \"\n","                    + \"of transparency could be viewed incorrectly by an older viewer. \"\n","\n","                    + \"The transparency extensions are based on the key concepts of transparency groups, blending \"\n","                    + \"modes, shape, and alpha. The model is closely aligned with the features of Adobe Illustrator \"\n","                    + \"version 9. The blend modes were based on those used by Adobe Photoshop at the time. When the \"\n","                    + \"PDF 1.4 specification was published, the formulas for calculating blend modes were kept secret\"\n","                    + \" by Adobe. They have since been published. \"\n","                    + \"The concept of a transparency group in PDF specification is independent of existing notions of\"\n","                    + \" \\\"group\\\" or \\\"layer\\\" in applications such as Adobe Illustrator. Those groupings reflect \"\n","                    + \"logical relationships among objects that are meaningful when editing those objects, but they \"\n","                    + \"are not part of the imaging model. \"\n","                    + \"Additional features \" + \"Logical structure and accessibility \"\n","                    + \"A \\\"tagged\\\" PDF (see clause 14.8 in ISO 32000) includes document structure and semantics \"\n","                    + \"information to enable reliable text extraction and accessibility. Technically speaking, tagged\"\n","                    + \" PDF is a stylized use of the format that builds on the logical structure framework introduced\"\n","                    + \" in PDF 1.3. Tagged PDF defines a set of standard structure types and attributes that allow \"\n","                    + \"page content (text, graphics, and images) to be extracted and reused for other purposes. \"\n","                    + \"Tagged PDF is not required in situations where a PDF file is intended only for print. Since \"\n","                    + \"the feature is optional, and since the rules for Tagged PDF were relatively vague in ISO \"\n","                    + \"32000-1, support for tagged PDF among consuming devices, including assistive technology (AT), \"\n","                    + \"is uneven as of 2021. ISO 32000-2, however, includes an improved discussion of tagged PDF \"\n","                    + \"which is anticipated to facilitate further adoption. \"\n","                    + \"An ISO-standardized subset of PDF specifically targeted at accessibility, PDF/UA, was first \"\n","                    + \"published in 2012. \"\n","\n","                    + \"Optional Content Groups (layers) \"\n","                    + \"With the introduction of PDF version 1.5 (2003) came the concept of Layers. Layers, more \"\n","                    + \"formally known as Optional Content Groups (OCGs), refer to sections of content in a PDF \"\n","                    + \"document that can be selectively viewed or hidden by document authors or viewers. This \"\n","                    + \"capability is useful in CAD drawings, layered artwork, maps, multi-language documents, etc. \"\n","\n","                    + \"Basically, it consists of an Optional Content Properties Dictionary added to the document root\"\n","                    + \". This dictionary contains an array of Optional Content Groups (OCGs), each describing a set \"\n","                    + \"of information and each of which may be individually displayed or suppressed, plus a set of \"\n","                    + \"Optional Content Configuration Dictionaries, which give the status (Displayed or Suppressed) \"\n","                    + \"of the given OCGs. \"\n","\n","                    + \"Encryption and signatures \"\n","                    + \"A PDF file may be encrypted, for security, in which case a password is needed to view or edit \"\n","                    + \"the contents. PDF 2.0 defines 256-bit AES encryption as standard for PDF 2.0 files. The PDF \"\n","                    + \"Reference also defines ways that third parties can define their own encryption systems for PDF\"\n","                    + \". \"\n","\n","                    + \"PDF files may be digitally signed, to provide secure authentication; complete details on \"\n","                    + \"implementing digital signatures in PDF is provided in ISO 32000-2. \"\n","\n","                    + \"PDF files may also contain embedded DRM restrictions that provide further controls that limit \"\n","                    + \"copying, editing, or printing. These restrictions depend on the reader software to obey them, \"\n","                    + \"so the security they provide is limited. \"\n","\n","                    + \"The standard security provided by PDF consists of two different methods and two different \"\n","                    + \"passwords: a user password, which encrypts the file and prevents opening, and an owner \"\n","                    + \"password, which specifies operations that should be restricted even when the document is \"\n","                    + \"decrypted, which can include modifying, printing, or copying text and graphics out of the \"\n","                    + \"document, or adding or modifying text notes and AcroForm fields. The user password encrypts \"\n","                    + \"the file, while the owner password does not, instead relying on client software to respect \"\n","                    + \"these restrictions. An owner password can easily be removed by software, including some free \"\n","                    + \"online services. Thus, the use restrictions that a document author places on a PDF \"\n","                    + \"document are not secure, and cannot be assured once the file is distributed; this warning is \"\n","                    + \"displayed when applying such restrictions using Adobe Acrobat software to create or edit PDF \"\n","                    + \"files. \"\n","\n","                    + \"Even without removing the password, most freeware or open source PDF readers ignore the \"\n","                    + \"permission \\\"protections\\\" and allow the user to print or make copy of excerpts of the text as\"\n","                    + \" if the document were not limited by password protection. \"\n","\n","                    + \"Beginning with PDF 1.5, Usage rights (UR) signatures are used to enable additional interactive\"\n","                    + \" features that are not available by default in a particular PDF viewer application. The \"\n","                    + \"signature is used to validate that the permissions have been granted by a bona fide granting \"\n","                    + \"authority. For example, it can be used to allow a user: \"\n","\n","                    + \"To save the PDF document along with a modified form or annotation data \"\n","                    + \"Import form data files in FDF, XFDF, and text (CSV/TSV) formats \"\n","                    + \"Export form data files in FDF and XFDF formats \" + \"Submit form data \"\n","                    + \"Instantiate new pages from named page templates \"\n","                    + \"Apply a digital signature to existing digital signature form field \"\n","                    + \"Create, delete, modify, copy, import, and export annotations \"\n","                    + \"For example, Adobe Systems grants permissions to enable additional features in Adobe Reader, \"\n","                    + \"using public-key cryptography. Adobe Reader verifies that the signature uses a certificate \"\n","                    + \"from an Adobe-authorized certificate authority. Any PDF application can use this same \"\n","                    + \"mechanism for its own purposes. \"\n","\n","                    + \"Under specific circumstances including non-patched systems of the receiver, the information \"\n","                    + \"the receiver of a digital signed document sees can be manipulated by the sender after the \"\n","                    + \"document has been signed by the signer. \"\n","\n","                    + \"PAdES (PDF Advanced Electronic Signatures) is a set of restrictions and extensions to PDF and \"\n","                    + \"ISO 32000-1 making it suitable for advanced electronic signatures. This is published by \"\n","                    + \"ETSI as TS 102 778. \"\n","\n","                    + \"File attachments \"\n","                    + \"PDF files can have file attachments which processors may access and open or save to a local \"\n","                    + \"filesystem. \"\n","\n","                    + \"Metadata \"\n","                    + \"PDF files can contain two types of metadata. The first is the Document Information \"\n","                    + \"Dictionary, a set of key/value fields such as author, title, subject, creation and update \"\n","                    + \"dates. This is optional and is referenced from an Info key in the trailer of the file. A small\"\n","                    + \" set of fields is defined and can be extended with additional text values if required. This \"\n","                    + \"method is deprecated in PDF 2.0. \"\n","\n","                    + \"In PDF 1.4, support was added for Metadata Streams, using the Extensible Metadata Platform \"\n","                    + \"(XMP) to add XML standards-based extensible metadata as used in other file formats. PDF 2.0 \"\n","                    + \"allows metadata to be attached to any object in the document, such as information about \"\n","                    + \"embedded illustrations, fonts, and images, as well as the whole document (attaching to the \"\n","                    + \"document catalog), using an extensible schema. \"\n","\n","                    + \"PDF documents can also contain display settings, including the page display layout and zoom \"\n","                    + \"level in a Viewer Preferences object. Adobe Reader uses these settings to override the user's \"\n","                    + \"default settings when opening the document. The free Adobe Reader cannot remove these \"\n","                    + \"settings. \"\n","\n","                    + \"Accessibility \"\n","                    + \"PDF files can be created specifically to be accessible for people with disabilities\"\n","                    + \". PDF file formats in use as of 2014 can include tags, text equivalents, \"\n","                    + \"captions, audio descriptions, and more. Some software can automatically produce tagged PDFs, \"\n","                    + \"but this feature is not always enabled by default. Leading screen readers, including \"\n","                    + \"JAWS, Window-Eyes, Hal, and Kurzweil 1000 and 3000 can read tagged PDF. Moreover, \"\n","                    + \"tagged PDFs can be re-flowed and magnified for readers with visual impairments. Adding tags to\"\n","                    + \" older PDFs and those that are generated from scanned documents can present some challenges. \"\n","\n","                    + \"One of the significant challenges with PDF accessibility is that PDF documents have three \"\n","                    + \"distinct views, which, depending on the document's creation, can be inconsistent with each \"\n","                    + \"other. The three views are (i) the physical view, (ii) the tags view, and (iii) the content \"\n","                    + \"view. The physical view is displayed and printed (what most people consider a PDF document). \"\n","                    + \"The tags view is what screen readers and other assistive technologies use to deliver \"\n","                    + \"high-quality navigation and reading experience to users with disabilities. The content view is\"\n","                    + \" based on the physical order of objects within the PDF's content stream and may be displayed \"\n","                    + \"by software that does not fully support the tags' view, such as the Reflow feature in Adobe's \"\n","                    + \"Reader. \"\n","\n","                    + \"PDF/UA, the International Standard for accessible PDF based on ISO 32000-1 was first published\"\n","                    + \" as ISO 14289–1 in 2012 and establishes normative language for accessible PDF technology. \"\n","\n","                    + \"Multimedia \"\n","                    + \"Rich Media PDF is a PDF file including interactive content that can be embedded or linked \"\n","                    + \"within the file. It can contain images, audio, video content, or buttons. For example, if the \"\n","                    + \"interactive PDF is a digital catalog for an E-commerce business, products can be listed on the\"\n","                    + \" PDF pages and can be added with images and links to the website and buttons to order directly\"\n","                    + \" from the document. \"\n","\n","                    + \"Forms \"\n","                    + \"Interactive Forms is a mechanism to add forms to the PDF file format. PDF currently supports \"\n","                    + \"two different methods for integrating data and PDF forms. Both formats today coexist in the \"\n","                    + \"PDF specification: \"\n","\n","                    + \"AcroForms (also known as Acrobat forms), introduced in the PDF 1.2 format specification and \"\n","                    + \"included in all later PDF specifications. \"\n","                    + \"XML Forms Architecture (XFA) forms, introduced in the PDF 1.5 format specification. Adobe XFA \"\n","                    + \"Forms are not compatible with AcroForms. XFA was deprecated from PDF with PDF 2.0. \"\n","                    + \"AcroForms were introduced in the PDF 1.2 format. AcroForms permit using objects (e.g. text \"\n","                    + \"boxes, Radio buttons, etc.) and some code (e.g. JavaScript). Alongside the standard PDF action\"\n","                    + \" types, interactive forms (AcroForms) support submitting, resetting, and importing data. The \"\n","                    + \"\\\"submit\\\" action transmits the names and values of selected interactive form fields to a \"\n","                    + \"specified uniform resource locator (URL). Interactive form field names and values may be \"\n","                    + \"submitted in any of the following formats, (depending on the settings of the action's \"\n","                    + \"ExportFormat, SubmitPDF, and XFDF flags): \"\n","\n","                    + \"HTML Form format \" + \"HTML 4.01 Specification since PDF 1.5; HTML 2.0 since 1.2 \"\n","                    + \"Forms Data Format (FDF) \"\n","                    + \"based on PDF, uses the same syntax and has essentially the same file structure, but is much \"\n","                    + \"simpler than PDF since the body of an FDF document consists of only one required object. Forms\"\n","                    + \" Data Format is defined in the PDF specification (since PDF 1.2). The Forms Data Format can be\"\n","                    + \" used when submitting form data to a server, receiving the response, and incorporating it into\"\n","                    + \" the interactive form. It can also be used to export form data to stand-alone files that can \"\n","                    + \"be imported back into the corresponding PDF interactive form. FDF was originally defined in \"\n","                    + \"1996 as part of ISO 32000-2:2017.[citation needed] \" + \"XML Forms Data Format (XFDF) \"\n","                    + \"(external XML Forms Data Format Specification, Version 2.0; supported since PDF 1.5; it \"\n","                    + \"replaced the \\\"XML\\\" form submission format defined in PDF 1.4) the XML version of Forms Data \"\n","                    + \"Format, but the XFDF implements only a subset of FDF containing forms and annotations. Some \"\n","                    + \"entries in the FDF dictionary do not have XFDF equivalents – such as the Status, Encoding, \"\n","                    + \"JavaScript, Page's keys, EmbeddedFDFs, Differences, and Target. In addition, XFDF does not \"\n","                    + \"allow the spawning, or addition, of new pages based on the given data; as can be done when \"\n","                    + \"using an FDF file. The XFDF specification is referenced (but not included) in PDF 1.5 \"\n","                    + \"specification (and in later versions). It is described separately in XML Forms Data Format \"\n","                    + \"Specification. The PDF 1.4 specification allowed form submissions in XML format, but this \"\n","                    + \"was replaced by submissions in XFDF format in the PDF 1.5 specification. XFDF conforms to the \"\n","                    + \"XML standard. XFDF can be used in the same way as FDF; e.g., form data is submitted to a \"\n","                    + \"server, modifications are made, then sent back and the new form data is imported in an \"\n","                    + \"interactive form. It can also be used to export form data to stand-alone files that can be \"\n","                    + \"imported back into the corresponding PDF interactive form. As of August 2019, XFDF 3.0 is an \"\n","                    + \"ISO/IEC standard under the formal name ISO 19444-1:2019 - Document management — XML Forms Data\"\n","                    + \" Format — Part 1: Use of ISO 32000-2 (XFDF 3.0). This standard is a normative reference of\"\n","                    + \" ISO 32000-2. \" + \"PDF \"\n","                    + \"The entire document can be submitted rather than individual fields and values, as was defined \"\n","                    + \"in PDF 1.4. \"\n","\n","                    + \"AcroForms can keep form field values in external stand-alone files containing key-value pairs.\"\n","                    + \" The external files may use Forms Data Format (FDF) and XML Forms Data Format (XFDF) files\"\n","                    + \". The usage rights (UR) signatures define rights for import form data files in \"\n","                    + \"FDF, XFDF, and text (CSV/TSV) formats, and export form data files in FDF and XFDF formats. \"\n","\n","                    + \"In PDF 1.5, Adobe Systems introduced a proprietary format for forms; Adobe XML Forms \"\n","                    + \"Architecture (XFA). Adobe XFA Forms are not compatible with ISO 32000's AcroForms feature, and\"\n","                    + \" most PDF processors do not handle XFA content. The XFA specification is referenced from ISO \"\n","                    + \"32000-1/PDF 1.7 as an external proprietary specification and was entirely deprecated from PDF \"\n","                    + \"with ISO 32000-2 (PDF 2.0). \"\n","\n","                    + \"Split and merge \" + \"PDF files can be splitted and merged, using applications. \"\n","\n","                    + \"Licensing \"\n","                    + \"Anyone may create applications that can read and write PDF files without having to pay \"\n","                    + \"royalties to Adobe Systems; Adobe holds patents to PDF, but licenses them for royalty-free use\"\n","                    + \" in developing software complying with its PDF specification. \";\n","\n","    private PlaceHolderTextUtil() {\n","        // Empty constructor\n","    }\n","\n","    /**\n","     * Gets the placeholder text.\n","     *\n","     * @param by     if you want to get the placeholder text by words or by characters\n","     * @param amount the number of words or characters\n","     *\n","     * @return the placeholder text\n","     */\n","    public static String getPlaceHolderText(PlaceHolderTextBy by, int amount) {\n","        if (by == PlaceHolderTextBy.WORDS) {\n","            return getPlaceHolderTextByWords(amount);\n","        } else {\n","            return getPlaceHolderTextByCharacters(amount);\n","        }\n","    }\n","\n","    private static String getPlaceHolderTextByWords(int amount) {\n","        final String[] words = TEMPLATE.split(\" \");\n","        final int approximateWordLength = 5;\n","        final int heuristic = amount * approximateWordLength;\n","        final StringBuilder sb = new StringBuilder(heuristic);\n","        for (int i = 0; i < amount; i++) {\n","            sb.append(words[i % words.length]);\n","            if (i + 1 == amount) {\n","                break;\n","            }\n","            sb.append(' ');\n","        }\n","        return sb.toString();\n","    }\n","\n","    private static String getPlaceHolderTextByCharacters(int amount) {\n","        final StringBuilder sb = new StringBuilder(amount);\n","        for (int i = 0; i < amount; i++) {\n","            sb.append(TEMPLATE.charAt(i % TEMPLATE.length()));\n","        }\n","        return sb.toString();\n","    }\n","\n","    /**\n","     * The enum Place holder text by.\n","     * This enum is used to get the placeholder text by words or by characters\n","     */\n","    public enum PlaceHolderTextBy {\n","        WORDS,\n","        CHARACTERS\n","    }\n","}\n"],"test_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.utils;\n","\n","import com.itextpdf.commons.utils.PlaceHolderTextUtil.PlaceHolderTextBy;\n","import com.itextpdf.test.ExtendedITextTest;\n","import com.itextpdf.test.annotations.type.UnitTest;\n","\n","import org.junit.Test;\n","import org.junit.experimental.categories.Category;\n","import static org.junit.Assert.assertEquals;\n","import static org.junit.Assert.assertTrue;\n","\n","\n","@Category(UnitTest.class)\n","public class PlaceHolderTextUtilTest extends ExtendedITextTest {\n","\n","    @Test\n","    public void GetPlaceHolderByCharacterTextSimple() {\n","        int amountOfCharacters = 24;\n","        String result = PlaceHolderTextUtil.getPlaceHolderText(PlaceHolderTextBy.CHARACTERS, amountOfCharacters);\n","        assertEquals(amountOfCharacters, result.length());\n","        assertEquals(result, \"Portable Document Format\");\n","    }\n","\n","\n","    @Test\n","    public void GetPlaceHolderByCharactersTextOverflow() {\n","        int amountOfCharacters = 31222 + 24;\n","        String result = PlaceHolderTextUtil.getPlaceHolderText(PlaceHolderTextBy.CHARACTERS, amountOfCharacters);\n","        assertEquals(amountOfCharacters, result.length());\n","        assertTrue(result.endsWith(\"Portable Document Format\"));\n","    }\n","\n","    @Test\n","    public void GetPlaceHolderByWordsTextSimple() {\n","        int amountOfWords = 5;\n","        String result = PlaceHolderTextUtil.getPlaceHolderText(PlaceHolderTextBy.WORDS, amountOfWords);\n","        assertEquals(44, result.length());\n","    }\n","\n","\n","    @Test\n","    public void GetPlaceHolderByWordsTextOverflow() {\n","        int amountOfCharacters = 4000;\n","        String result = PlaceHolderTextUtil.getPlaceHolderText(PlaceHolderTextBy.WORDS, amountOfCharacters);\n","        assertEquals(25472, result.length());\n","    }\n","\n","}\n"],"method_lines_dic":{"PlaceHolderTextUtil::::getPlaceHolderText(com.itextpdf.commons.utils.PlaceHolderTextUtil.PlaceHolderTextBy,int)":[512,518],"PlaceHolderTextUtil::::getPlaceHolderTextByWords(int)":[520,533],"PlaceHolderTextUtil::::getPlaceHolderTextByCharacters(int)":[535,541]},"test_method_lines_dic":{"PlaceHolderTextUtilTest::::GetPlaceHolderByCharacterTextSimple()":[38,44],"PlaceHolderTextUtilTest::::GetPlaceHolderByCharactersTextOverflow()":[47,53],"PlaceHolderTextUtilTest::::GetPlaceHolderByWordsTextSimple()":[55,60],"PlaceHolderTextUtilTest::::GetPlaceHolderByWordsTextOverflow()":[63,68]},"reverse_method_lines_dic":{"512":"PlaceHolderTextUtil::::getPlaceHolderText(com.itextpdf.commons.utils.PlaceHolderTextUtil.PlaceHolderTextBy,int)","513":"PlaceHolderTextUtil::::getPlaceHolderText(com.itextpdf.commons.utils.PlaceHolderTextUtil.PlaceHolderTextBy,int)","514":"PlaceHolderTextUtil::::getPlaceHolderText(com.itextpdf.commons.utils.PlaceHolderTextUtil.PlaceHolderTextBy,int)","515":"PlaceHolderTextUtil::::getPlaceHolderText(com.itextpdf.commons.utils.PlaceHolderTextUtil.PlaceHolderTextBy,int)","516":"PlaceHolderTextUtil::::getPlaceHolderText(com.itextpdf.commons.utils.PlaceHolderTextUtil.PlaceHolderTextBy,int)","517":"PlaceHolderTextUtil::::getPlaceHolderText(com.itextpdf.commons.utils.PlaceHolderTextUtil.PlaceHolderTextBy,int)","518":"PlaceHolderTextUtil::::getPlaceHolderText(com.itextpdf.commons.utils.PlaceHolderTextUtil.PlaceHolderTextBy,int)","520":"PlaceHolderTextUtil::::getPlaceHolderTextByWords(int)","521":"PlaceHolderTextUtil::::getPlaceHolderTextByWords(int)","522":"PlaceHolderTextUtil::::getPlaceHolderTextByWords(int)","523":"PlaceHolderTextUtil::::getPlaceHolderTextByWords(int)","524":"PlaceHolderTextUtil::::getPlaceHolderTextByWords(int)","525":"PlaceHolderTextUtil::::getPlaceHolderTextByWords(int)","526":"PlaceHolderTextUtil::::getPlaceHolderTextByWords(int)","527":"PlaceHolderTextUtil::::getPlaceHolderTextByWords(int)","528":"PlaceHolderTextUtil::::getPlaceHolderTextByWords(int)","529":"PlaceHolderTextUtil::::getPlaceHolderTextByWords(int)","530":"PlaceHolderTextUtil::::getPlaceHolderTextByWords(int)","531":"PlaceHolderTextUtil::::getPlaceHolderTextByWords(int)","532":"PlaceHolderTextUtil::::getPlaceHolderTextByWords(int)","533":"PlaceHolderTextUtil::::getPlaceHolderTextByWords(int)","535":"PlaceHolderTextUtil::::getPlaceHolderTextByCharacters(int)","536":"PlaceHolderTextUtil::::getPlaceHolderTextByCharacters(int)","537":"PlaceHolderTextUtil::::getPlaceHolderTextByCharacters(int)","538":"PlaceHolderTextUtil::::getPlaceHolderTextByCharacters(int)","539":"PlaceHolderTextUtil::::getPlaceHolderTextByCharacters(int)","540":"PlaceHolderTextUtil::::getPlaceHolderTextByCharacters(int)","541":"PlaceHolderTextUtil::::getPlaceHolderTextByCharacters(int)"},"test_reverse_method_lines_dic":{"38":"PlaceHolderTextUtilTest::::GetPlaceHolderByCharacterTextSimple()","39":"PlaceHolderTextUtilTest::::GetPlaceHolderByCharacterTextSimple()","40":"PlaceHolderTextUtilTest::::GetPlaceHolderByCharacterTextSimple()","41":"PlaceHolderTextUtilTest::::GetPlaceHolderByCharacterTextSimple()","42":"PlaceHolderTextUtilTest::::GetPlaceHolderByCharacterTextSimple()","43":"PlaceHolderTextUtilTest::::GetPlaceHolderByCharacterTextSimple()","44":"PlaceHolderTextUtilTest::::GetPlaceHolderByCharacterTextSimple()","47":"PlaceHolderTextUtilTest::::GetPlaceHolderByCharactersTextOverflow()","48":"PlaceHolderTextUtilTest::::GetPlaceHolderByCharactersTextOverflow()","49":"PlaceHolderTextUtilTest::::GetPlaceHolderByCharactersTextOverflow()","50":"PlaceHolderTextUtilTest::::GetPlaceHolderByCharactersTextOverflow()","51":"PlaceHolderTextUtilTest::::GetPlaceHolderByCharactersTextOverflow()","52":"PlaceHolderTextUtilTest::::GetPlaceHolderByCharactersTextOverflow()","53":"PlaceHolderTextUtilTest::::GetPlaceHolderByCharactersTextOverflow()","55":"PlaceHolderTextUtilTest::::GetPlaceHolderByWordsTextSimple()","56":"PlaceHolderTextUtilTest::::GetPlaceHolderByWordsTextSimple()","57":"PlaceHolderTextUtilTest::::GetPlaceHolderByWordsTextSimple()","58":"PlaceHolderTextUtilTest::::GetPlaceHolderByWordsTextSimple()","59":"PlaceHolderTextUtilTest::::GetPlaceHolderByWordsTextSimple()","60":"PlaceHolderTextUtilTest::::GetPlaceHolderByWordsTextSimple()","63":"PlaceHolderTextUtilTest::::GetPlaceHolderByWordsTextOverflow()","64":"PlaceHolderTextUtilTest::::GetPlaceHolderByWordsTextOverflow()","65":"PlaceHolderTextUtilTest::::GetPlaceHolderByWordsTextOverflow()","66":"PlaceHolderTextUtilTest::::GetPlaceHolderByWordsTextOverflow()","67":"PlaceHolderTextUtilTest::::GetPlaceHolderByWordsTextOverflow()","68":"PlaceHolderTextUtilTest::::GetPlaceHolderByWordsTextOverflow()"},"tests":[{"test_lines":[38,44],"covered_lines":[513,516,536,537,538,540,547,548,549]},{"test_lines":[47,53],"covered_lines":[513,516,536,537,538,540,547,548,549]},{"test_lines":[55,60],"covered_lines":[513,514,521,522,523,524,525,526,527,528,530,532,547,548,549]},{"test_lines":[63,68],"covered_lines":[513,514,521,522,523,524,525,526,527,528,530,532,547,548,549]}]},"/bernard/dataset_construction/prep/repos/itext-java/commons/src/main/java/com/itextpdf/commons/utils/SystemUtil.java":{"class_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.utils;\n","\n","import java.io.BufferedReader;\n","import java.io.File;\n","import java.io.IOException;\n","import java.io.InputStream;\n","import java.io.InputStreamReader;\n","import java.util.ArrayList;\n","import java.util.Collections;\n","import java.util.List;\n","import java.util.regex.Matcher;\n","import java.util.regex.Pattern;\n","\n","/**\n"," * This file is a helper class for internal usage only.\n"," * Be aware that its API and functionality may be changed in future.\n"," */\n","public final class SystemUtil {\n","\n","    private final static String SPLIT_REGEX = \"((\\\".+?\\\"|[^'\\\\s]|'.+?')+)\\\\s*\";\n","\n","    /**\n","     * Gets seed as long value of current time in milliseconds.\n","     *\n","     * @return current time in millis as long.\n","     */\n","    public static long getTimeBasedSeed() {\n","        return System.currentTimeMillis();\n","    }\n","\n","    /**\n","     * Gets seed as int value of current time in milliseconds.\n","     *\n","     * @return current time in millis as int.\n","     */\n","    public static int getTimeBasedIntSeed() {\n","        return (int) System.currentTimeMillis();\n","    }\n","\n","    private SystemUtil() {\n","        // Empty constructor.\n","    }\n","\n","    /**\n","     * Should be used in relative constructs (for example to check how many milliseconds have passed).\n","     *\n","     * <p>Shouldn't be used in the Date creation since the value returned by this method is different in С#.\n","     * For getting current time consistently use {@link DateTimeUtil#getCurrentTimeDate()}.\n","     *\n","     * @return relative time in milliseconds.\n","     */\n","    public static long getRelativeTimeMillis() {\n","        return System.currentTimeMillis();\n","    }\n","\n","    /**\n","     * Gets free available memory for JDK.\n","     *\n","     * @return available memory in bytes.\n","     */\n","    public static long getFreeMemory() {\n","        return Runtime.getRuntime().freeMemory();\n","    }\n","\n","    /**\n","     * Gets either java property or environment variable with given name.\n","     *\n","     * @param name the name of either java property or environment variable.\n","     * @return property or variable value or null if there is no such.\n","     */\n","    public static String getPropertyOrEnvironmentVariable(String name) {\n","        String s = System.getProperty(name);\n","        if (s == null) {\n","            s = System.getenv(name);\n","        }\n","        return s;\n","    }\n","\n","    /**\n","     * Executes the specified command and arguments in a separate process with the specified environment and working directory.\n","     * This method checks that exec is a valid operating system command. Which commands are valid is system-dependent,\n","     * but at the very least the command must be a non-empty and non-null.\n","     * The subprocess inherits the environment settings of the current process.\n","     * A minimal set of system dependent environment variables may be required to start a process on some operating systems.\n","     * The working directory of the new subprocess is the current working directory of the current process.\n","     *\n","     * @param exec a specified system command.\n","     * @param params a parameters for the specifed system command.\n","     *\n","     * @return true if subprocess was successfully executed, false otherwise.\n","     *\n","     * @throws IOException if any I/O error occurs.\n","     * @throws InterruptedException if process was interrupted.\n","     */\n","    public static boolean runProcessAndWait(String exec, String params) throws IOException, InterruptedException {\n","        return runProcessAndWait(exec, params, null);\n","    }\n","\n","    /**\n","     * Executes the specified command and arguments in a separate process with the specified environment and working directory.\n","     * This method checks that exec is a valid operating system command. Which commands are valid is system-dependent,\n","     * but at the very least the command must be a non-empty and non-null.\n","     * The subprocess inherits the environment settings of the current process.\n","     * A minimal set of system dependent environment variables may be required to start a process on some operating systems.\n","     * The working directory of the new subprocess is specified by workingDirPath.\n","     * If dir is null, the subprocess inherits the current working directory of the current process.\n","     *\n","     * @param exec a specified system command.\n","     * @param params a parameters for the specifed system command.\n","     * @param workingDirPath working dir for subprocess.\n","     *\n","     * @return true if subprocess was successfully executed, false otherwise.\n","     *\n","     * @throws IOException if any I/O error occurs.\n","     * @throws InterruptedException if process was interrupted.\n","     */\n","    public static boolean runProcessAndWait(String exec, String params,\n","                                            String workingDirPath) throws IOException, InterruptedException {\n","        return runProcessAndGetExitCode(exec, params, workingDirPath) == 0;\n","    }\n","\n","    /**\n","     * Executes the specified command and arguments in a separate process with the specified environment and working directory.\n","     * This method checks that exec is a valid operating system command. Which commands are valid is system-dependent,\n","     * but at the very least the command must be a non-empty and non-null.\n","     * The subprocess inherits the environment settings of the current process.\n","     * A minimal set of system dependent environment variables may be required to start a process on some operating systems.\n","     * The working directory of the new subprocess is the current working directory of the current process.\n","     *\n","     * @param exec a specified system command.\n","     * @param params a parameters for the specifed system command.\n","     *\n","     * @return exit code.\n","     *\n","     * @throws IOException if any I/O error occurs.\n","     * @throws InterruptedException if process was interrupted.\n","     */\n","    public static int runProcessAndGetExitCode(String exec, String params) throws IOException, InterruptedException {\n","        return runProcessAndGetExitCode(exec, params, null);\n","    }\n","\n","    /**\n","     * Executes the specified command and arguments in a separate process with the specified environment and working directory.\n","     * This method checks that exec is a valid operating system command. Which commands are valid is system-dependent,\n","     * but at the very least the command must be a non-empty and non-null.\n","     * The subprocess inherits the environment settings of the current process.\n","     * A minimal set of system dependent environment variables may be required to start a process on some operating systems.\n","     * The working directory of the new subprocess is specified by workingDirPath.\n","     * If dir is null, the subprocess inherits the current working directory of the current process.\n","     *\n","     * @param exec a specified system command.\n","     * @param params a parameters for the specifed system command.\n","     * @param workingDirPath working dir for subprocess.\n","     *\n","     * @return exit code.\n","     *\n","     * @throws IOException if any I/O error occurs.\n","     * @throws InterruptedException if process was interrupted.\n","     */\n","    public static int runProcessAndGetExitCode(String exec, String params,\n","                                               String workingDirPath) throws IOException, InterruptedException {\n","        Process p = runProcess(exec, params, workingDirPath);\n","        System.out.println(getProcessOutput(p));\n","        return p.waitFor();\n","    }\n","\n","    /**\n","     * Executes the specified command and arguments in a separate process with the specified environment and working\n","     * directory and returns output as a string.\n","     * This method checks that exec is a valid operating system command. Which commands are valid is system-dependent,\n","     * but at the very least the command must be a non-empty and non-null.\n","     * The subprocess inherits the environment settings of the current process.\n","     * A minimal set of system dependent environment variables may be required to start a process on some operating systems.\n","     * The working directory of the new subprocess is specified by workingDirPath.\n","     * If dir is null, the subprocess inherits the current working directory of the current process.\n","     *\n","     * @param command a specified system command.\n","     * @param params a parameters for the specifed system command.\n","     *\n","     * @return subprocess output result.\n","     *\n","     * @throws IOException if any I/O error occurs.\n","     */\n","    public static String runProcessAndGetOutput(String command, String params) throws IOException {\n","        return getProcessOutput(runProcess(command, params, null));\n","    }\n","\n","    /**\n","     * Executes the specified command and arguments in a separate process with the specified environment and working\n","     * directory and returns output errors as a string.\n","     * This method checks that exec is a valid operating system command. Which commands are valid is system-dependent,\n","     * but at the very least the command must be a non-empty and non-null.\n","     * The subprocess inherits the environment settings of the current process.\n","     * A minimal set of system dependent environment variables may be required to start a process on some operating systems.\n","     * The working directory of the new subprocess is specified by workingDirPath.\n","     * If dir is null, the subprocess inherits the current working directory of the current process.\n","     *\n","     * @param execPath a specified system command.\n","     * @param params a parameters for the specifed system command.\n","     *\n","     * @return subprocess errors as {@code StringBuilder}.\n","     *\n","     * @throws IOException if any I/O error occurs.\n","     */\n","    public static StringBuilder runProcessAndCollectErrors(String execPath, String params) throws IOException {\n","        return printProcessErrorsOutput(runProcess(execPath, params, null));\n","    }\n","\n","    /**\n","     * Executes the specified command and arguments in a separate process with the specified environment and working\n","     * directory and returns process info.\n","     * This method checks that exec is a valid operating system command. Which commands are valid is system-dependent,\n","     * but at the very least the command must be a non-empty and non-null.\n","     * The subprocess inherits the environment settings of the current process.\n","     * A minimal set of system dependent environment variables may be required to start a process on some operating systems.\n","     * The working directory of the new subprocess is specified by workingDirPath.\n","     * If dir is null, the subprocess inherits the current working directory of the current process.\n","     *\n","     * @param command a specified system command.\n","     * @param params a parameters for the specifed system command.\n","     *\n","     * @return process info instance.\n","     *\n","     * @throws IOException if any I/O error occurs.\n","     * @throws InterruptedException if process was interrupted.\n","     */\n","    public static ProcessInfo runProcessAndGetProcessInfo(String command, String params) throws IOException,\n","            InterruptedException {\n","        Process p = runProcess(command, params, null);\n","        String processStdOutput = printProcessStandardOutput(p).toString();\n","        String processErrOutput = printProcessErrorsOutput(p).toString();\n","        return new ProcessInfo(p.waitFor(), processStdOutput, processErrOutput);\n","    }\n","\n","    static Process runProcess(String execPath, String params, String workingDirPath) throws IOException {\n","        List<String> cmdList = prepareProcessArguments(execPath, params);\n","        String[] cmdArray = cmdList.toArray(new String[0]);\n","        if (workingDirPath != null) {\n","            File workingDir = new File(workingDirPath);\n","            return Runtime.getRuntime().exec(cmdArray, null, workingDir);\n","        } else {\n","            return Runtime.getRuntime().exec(cmdArray);\n","        }\n","    }\n","\n","    static List<String> prepareProcessArguments(String exec, String params) {\n","        List<String> cmdList;\n","        if (new File(exec).exists()) {\n","            cmdList = new ArrayList<>(Collections.singletonList(exec));\n","        } else {\n","            cmdList = new ArrayList<>(splitIntoProcessArguments(exec));\n","        }\n","        cmdList.addAll(splitIntoProcessArguments(params));\n","        return cmdList;\n","    }\n","\n","    static List<String> splitIntoProcessArguments(String line) {\n","        List<String> list = new ArrayList<>();\n","        Matcher m = Pattern.compile(SPLIT_REGEX).matcher(line);\n","        while (m.find()) {\n","            list.add(m.group(1).replace(\"'\", \"\").replace(\"\\\"\", \"\").trim());\n","        }\n","        return list;\n","    }\n","\n","    static String getProcessOutput(Process p) throws IOException {\n","        BufferedReader bri = new BufferedReader(new InputStreamReader(p.getInputStream()));\n","        BufferedReader bre = new BufferedReader(new InputStreamReader(p.getErrorStream()));\n","        String line;\n","        StringBuilder result = new StringBuilder();\n","        while ((line = bri.readLine()) != null) {\n","            result.append(line);\n","        }\n","        bri.close();\n","        if (result.length() > 0) {\n","            result.append('\\n');\n","        }\n","        while ((line = bre.readLine()) != null) {\n","            result.append(line);\n","        }\n","        bre.close();\n","        return result.toString();\n","    }\n","\n","    static StringBuilder printProcessErrorsOutput(Process p) throws IOException {\n","        return printProcessOutput(p.getErrorStream());\n","    }\n","\n","    static StringBuilder printProcessStandardOutput(Process p) throws IOException {\n","        return printProcessOutput(p.getInputStream());\n","    }\n","\n","    private static StringBuilder printProcessOutput(InputStream processStream) throws IOException {\n","        StringBuilder builder = new StringBuilder();\n","        BufferedReader bre = new BufferedReader(new InputStreamReader(processStream));\n","        String line;\n","        while ((line = bre.readLine()) != null) {\n","            System.out.println(line);\n","            builder.append(line);\n","        }\n","        bre.close();\n","        return builder;\n","    }\n","}\n"],"test_content":["/*\n","    This file is part of the iText (R) project.\n","    Copyright (c) 1998-2024 Apryse Group NV\n","    Authors: Apryse Software.\n","\n","    This program is offered under a commercial and under the AGPL license.\n","    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n","\n","    AGPL licensing:\n","    This program is free software: you can redistribute it and/or modify\n","    it under the terms of the GNU Affero General Public License as published by\n","    the Free Software Foundation, either version 3 of the License, or\n","    (at your option) any later version.\n","\n","    This program is distributed in the hope that it will be useful,\n","    but WITHOUT ANY WARRANTY; without even the implied warranty of\n","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n","    GNU Affero General Public License for more details.\n","\n","    You should have received a copy of the GNU Affero General Public License\n","    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n"," */\n","package com.itextpdf.commons.utils;\n","\n","import com.itextpdf.test.ExtendedITextTest;\n","import com.itextpdf.test.annotations.type.UnitTest;\n","\n","import java.io.ByteArrayInputStream;\n","import java.io.ByteArrayOutputStream;\n","import java.io.IOException;\n","import java.io.InputStream;\n","import java.io.OutputStream;\n","import java.util.Arrays;\n","import java.util.Collections;\n","import java.util.List;\n","import org.junit.Assert;\n","import org.junit.Before;\n","import org.junit.Test;\n","import org.junit.experimental.categories.Category;\n","\n","@Category(UnitTest.class)\n","public class SystemUtilTest extends ExtendedITextTest {\n","    private static final String MAGICK_COMPARE_ENVIRONMENT_VARIABLE = \"ITEXT_MAGICK_COMPARE_EXEC\";\n","    private static final String MAGICK_COMPARE_ENVIRONMENT_VARIABLE_LEGACY = \"compareExec\";\n","\n","    private final static String SOURCE_FOLDER = \"./src/test/resources/com/itextpdf/commons/utils/SystemUtilTest/\";\n","\n","    private static final String DESTINATION_FOLDER = \"./target/test/com/itextpdf/commons/utils/SystemUtilTest/\";\n","\n","    // This is empty file that used to check the logic for existed execution file\n","    private final static String STUB_EXEC_FILE = SOURCE_FOLDER + \"folder with space/stubFile\";\n","\n","    @Before\n","    public void setUp() {\n","        createOrClearDestinationFolder(DESTINATION_FOLDER);\n","    }\n","\n","    @Test\n","    public void prepareProcessArgumentsStubExecFileTest() {\n","        List<String> processArguments = SystemUtil.prepareProcessArguments(STUB_EXEC_FILE, \"param1 param2\");\n","        Assert.assertEquals(Arrays.asList(\n","                \"./src/test/resources/com/itextpdf/commons/utils/SystemUtilTest/folder with space/stubFile\", \"param1\",\n","                \"param2\"),\n","                processArguments);\n","    }\n","\n","    @Test\n","    public void prepareProcessArgumentsStubExecFileInQuotesTest() {\n","        String testLine = \"\\\"\" + STUB_EXEC_FILE + \"\\\"\" + \" compare\";\n","        List<String> processArguments = SystemUtil.prepareProcessArguments(testLine, \"param1 param2\");\n","        Assert.assertEquals(Arrays.asList(\n","                \"./src/test/resources/com/itextpdf/commons/utils/SystemUtilTest/folder with space/stubFile\", \"compare\",\n","                \"param1\", \"param2\"),\n","                processArguments);\n","    }\n","\n","    @Test\n","    public void prepareProcessArgumentsGsTest() {\n","        List<String> processArguments = SystemUtil.prepareProcessArguments(\"gs\", \"param1 param2\");\n","        Assert.assertEquals(Arrays.asList(\n","                \"gs\", \"param1\", \"param2\"),\n","                processArguments);\n","    }\n","\n","    @Test\n","    public void prepareProcessArgumentsMagickCompareTest() {\n","        List<String> processArguments = SystemUtil.prepareProcessArguments(\"magick compare\", \"param1 param2\");\n","        Assert.assertEquals(Arrays.asList(\n","                \"magick\", \"compare\", \"param1\", \"param2\"),\n","                processArguments);\n","    }\n","\n","    @Test\n","    public void splitIntoProcessArgumentsPathInQuotesTest() {\n","        List<String> processArguments = SystemUtil\n","                .splitIntoProcessArguments(\"\\\"C:\\\\Test directory with spaces\\\\file.exe\\\"\");\n","        Assert.assertEquals(Collections.singletonList(\n","                \"C:\\\\Test directory with spaces\\\\file.exe\"),\n","                processArguments);\n","    }\n","\n","    @Test\n","    public void splitIntoProcessArgumentsGsParamsTest() {\n","        List<String> processArguments = SystemUtil.splitIntoProcessArguments(\n","                \" -dSAFER -dNOPAUSE -dBATCH -sDEVICE=png16m -r150 -sOutputFile='./target/test/com/itextpdf/kernel/utils/CompareToolTest/cmp_simple_pdf_with_space .pdf-%03d.png' './src/test/resources/com/itextpdf/kernel/utils/CompareToolTest/cmp_simple_pdf_with_space .pdf'\");\n","        Assert.assertEquals(Arrays.asList(\n","                \"-dSAFER\", \"-dNOPAUSE\", \"-dBATCH\", \"-sDEVICE=png16m\", \"-r150\",\n","                \"-sOutputFile=./target/test/com/itextpdf/kernel/utils/CompareToolTest/cmp_simple_pdf_with_space .pdf-%03d.png\",\n","                \"./src/test/resources/com/itextpdf/kernel/utils/CompareToolTest/cmp_simple_pdf_with_space .pdf\"),\n","                processArguments);\n","    }\n","\n","    @Test\n","    public void splitIntoProcessArgumentsMagickCompareParamsTest() {\n","        List<String> processArguments = SystemUtil.splitIntoProcessArguments(\n","                \"'D:\\\\itext\\\\java\\\\itextcore\\\\kernel\\\\.\\\\target\\\\test\\\\com\\\\itextpdf\\\\kernel\\\\utils\\\\CompareToolTest\\\\simple_pdf.pdf-001.png' 'D:\\\\itext\\\\java\\\\itextcore\\\\kernel\\\\.\\\\target\\\\test\\\\com\\\\itextpdf\\\\kernel\\\\utils\\\\CompareToolTest\\\\cmp_simple_pdf_with_space .pdf-001.png' './target/test/com/itextpdf/kernel/utils/CompareToolTest/diff_simple_pdf.pdf_1.png'\");\n","        Assert.assertEquals(Arrays.asList(\n","                \"D:\\\\itext\\\\java\\\\itextcore\\\\kernel\\\\.\\\\target\\\\test\\\\com\\\\itextpdf\\\\kernel\\\\utils\\\\CompareToolTest\\\\simple_pdf.pdf-001.png\",\n","                \"D:\\\\itext\\\\java\\\\itextcore\\\\kernel\\\\.\\\\target\\\\test\\\\com\\\\itextpdf\\\\kernel\\\\utils\\\\CompareToolTest\\\\cmp_simple_pdf_with_space .pdf-001.png\",\n","                \"./target/test/com/itextpdf/kernel/utils/CompareToolTest/diff_simple_pdf.pdf_1.png\"),\n","                processArguments);\n","    }\n","\n","    @Test\n","    // There is no similar test in the C# version, since no way was found to test the Process class.\n","    public void printProcessErrorsOutputTest() throws IOException {\n","        StringBuilder stringBuilder = SystemUtil.printProcessErrorsOutput(new TestProcess());\n","        Assert.assertEquals(\"This is error info\", stringBuilder.toString());\n","    }\n","\n","    @Test\n","    // There is no similar test in the C# version, since no way was found to test the Process class.\n","    public void getProcessOutputTest() throws IOException {\n","        String result = SystemUtil.getProcessOutput(new TestProcess());\n","        Assert.assertEquals(\"This is process info\\n\"\n","                + \"This is error info\", result);\n","    }\n","\n","    @Test\n","    // There is no similar test in the C# version, since no way was found to test the Process class.\n","    public void getProcessOutputEmptyTest() throws IOException {\n","        String result = SystemUtil.getProcessOutput(new EmptyTestProcess());\n","        Assert.assertEquals(\"This is error info\", result);\n","    }\n","\n","    @Test\n","    // Android-Conversion-Ignore-Test (TODO DEVSIX-6441 fix problem with System#getEnv method)\n","    public void runProcessAndWaitWithWorkingDirectoryTest() throws IOException, InterruptedException {\n","        String imageMagickPath = SystemUtil.getPropertyOrEnvironmentVariable(MAGICK_COMPARE_ENVIRONMENT_VARIABLE);\n","        if (imageMagickPath == null) {\n","            imageMagickPath = SystemUtil.getPropertyOrEnvironmentVariable(MAGICK_COMPARE_ENVIRONMENT_VARIABLE_LEGACY);\n","        }\n","        String inputImage = \"image.jpg\";\n","        String cmpImage = \"cmp_image.jpg\";\n","        String diff = System.getProperty(\"user.dir\") + DESTINATION_FOLDER.substring(1) + \"diff.png\";\n","\n","        StringBuilder currCompareParams = new StringBuilder();\n","        currCompareParams\n","                .append(\"'\")\n","                .append(inputImage).append(\"' '\")\n","                .append(cmpImage).append(\"' '\")\n","                .append(diff).append(\"'\");\n","        boolean result = SystemUtil.runProcessAndWait(imageMagickPath, currCompareParams.toString(), SOURCE_FOLDER);\n","\n","        Assert.assertFalse(result);\n","        Assert.assertTrue(FileUtil.fileExists(diff));\n","    }\n","\n","    @Test\n","    // Android-Conversion-Ignore-Test (TODO DEVSIX-6441 fix problem with System#getEnv method)\n","    public void runProcessAndGetProcessInfoTest() throws IOException, InterruptedException {\n","        String imageMagickPath = SystemUtil.getPropertyOrEnvironmentVariable(MAGICK_COMPARE_ENVIRONMENT_VARIABLE);\n","        if (imageMagickPath == null) {\n","            imageMagickPath = SystemUtil.getPropertyOrEnvironmentVariable(MAGICK_COMPARE_ENVIRONMENT_VARIABLE_LEGACY);\n","        }\n","\n","        ProcessInfo processInfo = SystemUtil.runProcessAndGetProcessInfo(imageMagickPath,\"--version\");\n","\n","        Assert.assertNotNull(processInfo);\n","        Assert.assertEquals(0, processInfo.getExitCode());\n","    }\n","\n","\n","    static class TestProcess extends Process {\n","\n","        @Override\n","        public OutputStream getOutputStream() {\n","            return new ByteArrayOutputStream();\n","        }\n","\n","        @Override\n","        public InputStream getInputStream() {\n","            return new ByteArrayInputStream(\"This is process info\".getBytes());\n","        }\n","\n","        @Override\n","        public InputStream getErrorStream() {\n","            return new ByteArrayInputStream(\"This is error info\".getBytes());\n","        }\n","\n","        @Override\n","        public int waitFor() {\n","            return 0;\n","        }\n","\n","        @Override\n","        public int exitValue() {\n","            return 0;\n","        }\n","\n","        @Override\n","        public void destroy() {\n","\n","        }\n","    }\n","\n","    static class EmptyTestProcess extends TestProcess {\n","\n","        @Override\n","        public InputStream getInputStream() {\n","            return new ByteArrayInputStream(new byte[0]);\n","        }\n","    }\n","}\n"],"method_lines_dic":{"SystemUtil::::getTimeBasedSeed()":[49,51],"SystemUtil::::getTimeBasedIntSeed()":[58,60],"SystemUtil::::getRelativeTimeMillis()":[74,76],"SystemUtil::::getFreeMemory()":[83,85],"SystemUtil::::getPropertyOrEnvironmentVariable(java.lang.String)":[93,99],"SystemUtil::::runProcessAndWait(java.lang.String,java.lang.String)":[117,119],"SystemUtil::::runProcessAndWait(java.lang.String,java.lang.String,java.lang.String)":[139,142],"SystemUtil::::runProcessAndGetExitCode(java.lang.String,java.lang.String)":[160,162],"SystemUtil::::runProcessAndGetExitCode(java.lang.String,java.lang.String,java.lang.String)":[182,187],"SystemUtil::::runProcessAndGetOutput(java.lang.String,java.lang.String)":[206,208],"SystemUtil::::runProcessAndCollectErrors(java.lang.String,java.lang.String)":[227,229],"SystemUtil::::runProcessAndGetProcessInfo(java.lang.String,java.lang.String)":[249,255],"SystemUtil::::runProcess(java.lang.String,java.lang.String,java.lang.String)":[257,266],"SystemUtil::::prepareProcessArguments(java.lang.String,java.lang.String)":[268,277],"SystemUtil::::splitIntoProcessArguments(java.lang.String)":[279,286],"SystemUtil::::getProcessOutput(java.lang.Process)":[288,305],"SystemUtil::::printProcessErrorsOutput(java.lang.Process)":[307,309],"SystemUtil::::printProcessStandardOutput(java.lang.Process)":[311,313],"SystemUtil::::printProcessOutput(java.io.InputStream)":[315,325]},"test_method_lines_dic":{"SystemUtilTest::::setUp()":[53,56],"SystemUtilTest::::prepareProcessArgumentsStubExecFileTest()":[58,65],"SystemUtilTest::::prepareProcessArgumentsStubExecFileInQuotesTest()":[67,75],"SystemUtilTest::::prepareProcessArgumentsGsTest()":[77,83],"SystemUtilTest::::prepareProcessArgumentsMagickCompareTest()":[85,91],"SystemUtilTest::::splitIntoProcessArgumentsPathInQuotesTest()":[93,100],"SystemUtilTest::::splitIntoProcessArgumentsGsParamsTest()":[102,111],"SystemUtilTest::::splitIntoProcessArgumentsMagickCompareParamsTest()":[113,122],"SystemUtilTest::::printProcessErrorsOutputTest()":[124,129],"SystemUtilTest::::getProcessOutputTest()":[131,137],"SystemUtilTest::::getProcessOutputEmptyTest()":[139,144],"SystemUtilTest::::runProcessAndWaitWithWorkingDirectoryTest()":[146,167],"SystemUtilTest::::runProcessAndGetProcessInfoTest()":[169,181],"SystemUtilTest.TestProcess::::getOutputStream()":[186,189],"SystemUtilTest.TestProcess::::getInputStream()":[191,194],"SystemUtilTest.TestProcess::::getErrorStream()":[196,199],"SystemUtilTest.TestProcess::::waitFor()":[201,204],"SystemUtilTest.TestProcess::::exitValue()":[206,209],"SystemUtilTest.TestProcess::::destroy()":[211,214],"SystemUtilTest.EmptyTestProcess::::getInputStream()":[219,222]},"reverse_method_lines_dic":{"49":"SystemUtil::::getTimeBasedSeed()","50":"SystemUtil::::getTimeBasedSeed()","51":"SystemUtil::::getTimeBasedSeed()","58":"SystemUtil::::getTimeBasedIntSeed()","59":"SystemUtil::::getTimeBasedIntSeed()","60":"SystemUtil::::getTimeBasedIntSeed()","74":"SystemUtil::::getRelativeTimeMillis()","75":"SystemUtil::::getRelativeTimeMillis()","76":"SystemUtil::::getRelativeTimeMillis()","83":"SystemUtil::::getFreeMemory()","84":"SystemUtil::::getFreeMemory()","85":"SystemUtil::::getFreeMemory()","93":"SystemUtil::::getPropertyOrEnvironmentVariable(java.lang.String)","94":"SystemUtil::::getPropertyOrEnvironmentVariable(java.lang.String)","95":"SystemUtil::::getPropertyOrEnvironmentVariable(java.lang.String)","96":"SystemUtil::::getPropertyOrEnvironmentVariable(java.lang.String)","97":"SystemUtil::::getPropertyOrEnvironmentVariable(java.lang.String)","98":"SystemUtil::::getPropertyOrEnvironmentVariable(java.lang.String)","99":"SystemUtil::::getPropertyOrEnvironmentVariable(java.lang.String)","117":"SystemUtil::::runProcessAndWait(java.lang.String,java.lang.String)","118":"SystemUtil::::runProcessAndWait(java.lang.String,java.lang.String)","119":"SystemUtil::::runProcessAndWait(java.lang.String,java.lang.String)","139":"SystemUtil::::runProcessAndWait(java.lang.String,java.lang.String,java.lang.String)","140":"SystemUtil::::runProcessAndWait(java.lang.String,java.lang.String,java.lang.String)","141":"SystemUtil::::runProcessAndWait(java.lang.String,java.lang.String,java.lang.String)","142":"SystemUtil::::runProcessAndWait(java.lang.String,java.lang.String,java.lang.String)","160":"SystemUtil::::runProcessAndGetExitCode(java.lang.String,java.lang.String)","161":"SystemUtil::::runProcessAndGetExitCode(java.lang.String,java.lang.String)","162":"SystemUtil::::runProcessAndGetExitCode(java.lang.String,java.lang.String)","182":"SystemUtil::::runProcessAndGetExitCode(java.lang.String,java.lang.String,java.lang.String)","183":"SystemUtil::::runProcessAndGetExitCode(java.lang.String,java.lang.String,java.lang.String)","184":"SystemUtil::::runProcessAndGetExitCode(java.lang.String,java.lang.String,java.lang.String)","185":"SystemUtil::::runProcessAndGetExitCode(java.lang.String,java.lang.String,java.lang.String)","186":"SystemUtil::::runProcessAndGetExitCode(java.lang.String,java.lang.String,java.lang.String)","187":"SystemUtil::::runProcessAndGetExitCode(java.lang.String,java.lang.String,java.lang.String)","206":"SystemUtil::::runProcessAndGetOutput(java.lang.String,java.lang.String)","207":"SystemUtil::::runProcessAndGetOutput(java.lang.String,java.lang.String)","208":"SystemUtil::::runProcessAndGetOutput(java.lang.String,java.lang.String)","227":"SystemUtil::::runProcessAndCollectErrors(java.lang.String,java.lang.String)","228":"SystemUtil::::runProcessAndCollectErrors(java.lang.String,java.lang.String)","229":"SystemUtil::::runProcessAndCollectErrors(java.lang.String,java.lang.String)","249":"SystemUtil::::runProcessAndGetProcessInfo(java.lang.String,java.lang.String)","250":"SystemUtil::::runProcessAndGetProcessInfo(java.lang.String,java.lang.String)","251":"SystemUtil::::runProcessAndGetProcessInfo(java.lang.String,java.lang.String)","252":"SystemUtil::::runProcessAndGetProcessInfo(java.lang.String,java.lang.String)","253":"SystemUtil::::runProcessAndGetProcessInfo(java.lang.String,java.lang.String)","254":"SystemUtil::::runProcessAndGetProcessInfo(java.lang.String,java.lang.String)","255":"SystemUtil::::runProcessAndGetProcessInfo(java.lang.String,java.lang.String)","257":"SystemUtil::::runProcess(java.lang.String,java.lang.String,java.lang.String)","258":"SystemUtil::::runProcess(java.lang.String,java.lang.String,java.lang.String)","259":"SystemUtil::::runProcess(java.lang.String,java.lang.String,java.lang.String)","260":"SystemUtil::::runProcess(java.lang.String,java.lang.String,java.lang.String)","261":"SystemUtil::::runProcess(java.lang.String,java.lang.String,java.lang.String)","262":"SystemUtil::::runProcess(java.lang.String,java.lang.String,java.lang.String)","263":"SystemUtil::::runProcess(java.lang.String,java.lang.String,java.lang.String)","264":"SystemUtil::::runProcess(java.lang.String,java.lang.String,java.lang.String)","265":"SystemUtil::::runProcess(java.lang.String,java.lang.String,java.lang.String)","266":"SystemUtil::::runProcess(java.lang.String,java.lang.String,java.lang.String)","268":"SystemUtil::::prepareProcessArguments(java.lang.String,java.lang.String)","269":"SystemUtil::::prepareProcessArguments(java.lang.String,java.lang.String)","270":"SystemUtil::::prepareProcessArguments(java.lang.String,java.lang.String)","271":"SystemUtil::::prepareProcessArguments(java.lang.String,java.lang.String)","272":"SystemUtil::::prepareProcessArguments(java.lang.String,java.lang.String)","273":"SystemUtil::::prepareProcessArguments(java.lang.String,java.lang.String)","274":"SystemUtil::::prepareProcessArguments(java.lang.String,java.lang.String)","275":"SystemUtil::::prepareProcessArguments(java.lang.String,java.lang.String)","276":"SystemUtil::::prepareProcessArguments(java.lang.String,java.lang.String)","277":"SystemUtil::::prepareProcessArguments(java.lang.String,java.lang.String)","279":"SystemUtil::::splitIntoProcessArguments(java.lang.String)","280":"SystemUtil::::splitIntoProcessArguments(java.lang.String)","281":"SystemUtil::::splitIntoProcessArguments(java.lang.String)","282":"SystemUtil::::splitIntoProcessArguments(java.lang.String)","283":"SystemUtil::::splitIntoProcessArguments(java.lang.String)","284":"SystemUtil::::splitIntoProcessArguments(java.lang.String)","285":"SystemUtil::::splitIntoProcessArguments(java.lang.String)","286":"SystemUtil::::splitIntoProcessArguments(java.lang.String)","288":"SystemUtil::::getProcessOutput(java.lang.Process)","289":"SystemUtil::::getProcessOutput(java.lang.Process)","290":"SystemUtil::::getProcessOutput(java.lang.Process)","291":"SystemUtil::::getProcessOutput(java.lang.Process)","292":"SystemUtil::::getProcessOutput(java.lang.Process)","293":"SystemUtil::::getProcessOutput(java.lang.Process)","294":"SystemUtil::::getProcessOutput(java.lang.Process)","295":"SystemUtil::::getProcessOutput(java.lang.Process)","296":"SystemUtil::::getProcessOutput(java.lang.Process)","297":"SystemUtil::::getProcessOutput(java.lang.Process)","298":"SystemUtil::::getProcessOutput(java.lang.Process)","299":"SystemUtil::::getProcessOutput(java.lang.Process)","300":"SystemUtil::::getProcessOutput(java.lang.Process)","301":"SystemUtil::::getProcessOutput(java.lang.Process)","302":"SystemUtil::::getProcessOutput(java.lang.Process)","303":"SystemUtil::::getProcessOutput(java.lang.Process)","304":"SystemUtil::::getProcessOutput(java.lang.Process)","305":"SystemUtil::::getProcessOutput(java.lang.Process)","307":"SystemUtil::::printProcessErrorsOutput(java.lang.Process)","308":"SystemUtil::::printProcessErrorsOutput(java.lang.Process)","309":"SystemUtil::::printProcessErrorsOutput(java.lang.Process)","311":"SystemUtil::::printProcessStandardOutput(java.lang.Process)","312":"SystemUtil::::printProcessStandardOutput(java.lang.Process)","313":"SystemUtil::::printProcessStandardOutput(java.lang.Process)","315":"SystemUtil::::printProcessOutput(java.io.InputStream)","316":"SystemUtil::::printProcessOutput(java.io.InputStream)","317":"SystemUtil::::printProcessOutput(java.io.InputStream)","318":"SystemUtil::::printProcessOutput(java.io.InputStream)","319":"SystemUtil::::printProcessOutput(java.io.InputStream)","320":"SystemUtil::::printProcessOutput(java.io.InputStream)","321":"SystemUtil::::printProcessOutput(java.io.InputStream)","322":"SystemUtil::::printProcessOutput(java.io.InputStream)","323":"SystemUtil::::printProcessOutput(java.io.InputStream)","324":"SystemUtil::::printProcessOutput(java.io.InputStream)","325":"SystemUtil::::printProcessOutput(java.io.InputStream)"},"test_reverse_method_lines_dic":{"53":"SystemUtilTest::::setUp()","54":"SystemUtilTest::::setUp()","55":"SystemUtilTest::::setUp()","56":"SystemUtilTest::::setUp()","58":"SystemUtilTest::::prepareProcessArgumentsStubExecFileTest()","59":"SystemUtilTest::::prepareProcessArgumentsStubExecFileTest()","60":"SystemUtilTest::::prepareProcessArgumentsStubExecFileTest()","61":"SystemUtilTest::::prepareProcessArgumentsStubExecFileTest()","62":"SystemUtilTest::::prepareProcessArgumentsStubExecFileTest()","63":"SystemUtilTest::::prepareProcessArgumentsStubExecFileTest()","64":"SystemUtilTest::::prepareProcessArgumentsStubExecFileTest()","65":"SystemUtilTest::::prepareProcessArgumentsStubExecFileTest()","67":"SystemUtilTest::::prepareProcessArgumentsStubExecFileInQuotesTest()","68":"SystemUtilTest::::prepareProcessArgumentsStubExecFileInQuotesTest()","69":"SystemUtilTest::::prepareProcessArgumentsStubExecFileInQuotesTest()","70":"SystemUtilTest::::prepareProcessArgumentsStubExecFileInQuotesTest()","71":"SystemUtilTest::::prepareProcessArgumentsStubExecFileInQuotesTest()","72":"SystemUtilTest::::prepareProcessArgumentsStubExecFileInQuotesTest()","73":"SystemUtilTest::::prepareProcessArgumentsStubExecFileInQuotesTest()","74":"SystemUtilTest::::prepareProcessArgumentsStubExecFileInQuotesTest()","75":"SystemUtilTest::::prepareProcessArgumentsStubExecFileInQuotesTest()","77":"SystemUtilTest::::prepareProcessArgumentsGsTest()","78":"SystemUtilTest::::prepareProcessArgumentsGsTest()","79":"SystemUtilTest::::prepareProcessArgumentsGsTest()","80":"SystemUtilTest::::prepareProcessArgumentsGsTest()","81":"SystemUtilTest::::prepareProcessArgumentsGsTest()","82":"SystemUtilTest::::prepareProcessArgumentsGsTest()","83":"SystemUtilTest::::prepareProcessArgumentsGsTest()","85":"SystemUtilTest::::prepareProcessArgumentsMagickCompareTest()","86":"SystemUtilTest::::prepareProcessArgumentsMagickCompareTest()","87":"SystemUtilTest::::prepareProcessArgumentsMagickCompareTest()","88":"SystemUtilTest::::prepareProcessArgumentsMagickCompareTest()","89":"SystemUtilTest::::prepareProcessArgumentsMagickCompareTest()","90":"SystemUtilTest::::prepareProcessArgumentsMagickCompareTest()","91":"SystemUtilTest::::prepareProcessArgumentsMagickCompareTest()","93":"SystemUtilTest::::splitIntoProcessArgumentsPathInQuotesTest()","94":"SystemUtilTest::::splitIntoProcessArgumentsPathInQuotesTest()","95":"SystemUtilTest::::splitIntoProcessArgumentsPathInQuotesTest()","96":"SystemUtilTest::::splitIntoProcessArgumentsPathInQuotesTest()","97":"SystemUtilTest::::splitIntoProcessArgumentsPathInQuotesTest()","98":"SystemUtilTest::::splitIntoProcessArgumentsPathInQuotesTest()","99":"SystemUtilTest::::splitIntoProcessArgumentsPathInQuotesTest()","100":"SystemUtilTest::::splitIntoProcessArgumentsPathInQuotesTest()","102":"SystemUtilTest::::splitIntoProcessArgumentsGsParamsTest()","103":"SystemUtilTest::::splitIntoProcessArgumentsGsParamsTest()","104":"SystemUtilTest::::splitIntoProcessArgumentsGsParamsTest()","105":"SystemUtilTest::::splitIntoProcessArgumentsGsParamsTest()","106":"SystemUtilTest::::splitIntoProcessArgumentsGsParamsTest()","107":"SystemUtilTest::::splitIntoProcessArgumentsGsParamsTest()","108":"SystemUtilTest::::splitIntoProcessArgumentsGsParamsTest()","109":"SystemUtilTest::::splitIntoProcessArgumentsGsParamsTest()","110":"SystemUtilTest::::splitIntoProcessArgumentsGsParamsTest()","111":"SystemUtilTest::::splitIntoProcessArgumentsGsParamsTest()","113":"SystemUtilTest::::splitIntoProcessArgumentsMagickCompareParamsTest()","114":"SystemUtilTest::::splitIntoProcessArgumentsMagickCompareParamsTest()","115":"SystemUtilTest::::splitIntoProcessArgumentsMagickCompareParamsTest()","116":"SystemUtilTest::::splitIntoProcessArgumentsMagickCompareParamsTest()","117":"SystemUtilTest::::splitIntoProcessArgumentsMagickCompareParamsTest()","118":"SystemUtilTest::::splitIntoProcessArgumentsMagickCompareParamsTest()","119":"SystemUtilTest::::splitIntoProcessArgumentsMagickCompareParamsTest()","120":"SystemUtilTest::::splitIntoProcessArgumentsMagickCompareParamsTest()","121":"SystemUtilTest::::splitIntoProcessArgumentsMagickCompareParamsTest()","122":"SystemUtilTest::::splitIntoProcessArgumentsMagickCompareParamsTest()","124":"SystemUtilTest::::printProcessErrorsOutputTest()","125":"SystemUtilTest::::printProcessErrorsOutputTest()","126":"SystemUtilTest::::printProcessErrorsOutputTest()","127":"SystemUtilTest::::printProcessErrorsOutputTest()","128":"SystemUtilTest::::printProcessErrorsOutputTest()","129":"SystemUtilTest::::printProcessErrorsOutputTest()","131":"SystemUtilTest::::getProcessOutputTest()","132":"SystemUtilTest::::getProcessOutputTest()","133":"SystemUtilTest::::getProcessOutputTest()","134":"SystemUtilTest::::getProcessOutputTest()","135":"SystemUtilTest::::getProcessOutputTest()","136":"SystemUtilTest::::getProcessOutputTest()","137":"SystemUtilTest::::getProcessOutputTest()","139":"SystemUtilTest::::getProcessOutputEmptyTest()","140":"SystemUtilTest::::getProcessOutputEmptyTest()","141":"SystemUtilTest::::getProcessOutputEmptyTest()","142":"SystemUtilTest::::getProcessOutputEmptyTest()","143":"SystemUtilTest::::getProcessOutputEmptyTest()","144":"SystemUtilTest::::getProcessOutputEmptyTest()","146":"SystemUtilTest::::runProcessAndWaitWithWorkingDirectoryTest()","147":"SystemUtilTest::::runProcessAndWaitWithWorkingDirectoryTest()","148":"SystemUtilTest::::runProcessAndWaitWithWorkingDirectoryTest()","149":"SystemUtilTest::::runProcessAndWaitWithWorkingDirectoryTest()","150":"SystemUtilTest::::runProcessAndWaitWithWorkingDirectoryTest()","151":"SystemUtilTest::::runProcessAndWaitWithWorkingDirectoryTest()","152":"SystemUtilTest::::runProcessAndWaitWithWorkingDirectoryTest()","153":"SystemUtilTest::::runProcessAndWaitWithWorkingDirectoryTest()","154":"SystemUtilTest::::runProcessAndWaitWithWorkingDirectoryTest()","155":"SystemUtilTest::::runProcessAndWaitWithWorkingDirectoryTest()","156":"SystemUtilTest::::runProcessAndWaitWithWorkingDirectoryTest()","157":"SystemUtilTest::::runProcessAndWaitWithWorkingDirectoryTest()","158":"SystemUtilTest::::runProcessAndWaitWithWorkingDirectoryTest()","159":"SystemUtilTest::::runProcessAndWaitWithWorkingDirectoryTest()","160":"SystemUtilTest::::runProcessAndWaitWithWorkingDirectoryTest()","161":"SystemUtilTest::::runProcessAndWaitWithWorkingDirectoryTest()","162":"SystemUtilTest::::runProcessAndWaitWithWorkingDirectoryTest()","163":"SystemUtilTest::::runProcessAndWaitWithWorkingDirectoryTest()","164":"SystemUtilTest::::runProcessAndWaitWithWorkingDirectoryTest()","165":"SystemUtilTest::::runProcessAndWaitWithWorkingDirectoryTest()","166":"SystemUtilTest::::runProcessAndWaitWithWorkingDirectoryTest()","167":"SystemUtilTest::::runProcessAndWaitWithWorkingDirectoryTest()","169":"SystemUtilTest::::runProcessAndGetProcessInfoTest()","170":"SystemUtilTest::::runProcessAndGetProcessInfoTest()","171":"SystemUtilTest::::runProcessAndGetProcessInfoTest()","172":"SystemUtilTest::::runProcessAndGetProcessInfoTest()","173":"SystemUtilTest::::runProcessAndGetProcessInfoTest()","174":"SystemUtilTest::::runProcessAndGetProcessInfoTest()","175":"SystemUtilTest::::runProcessAndGetProcessInfoTest()","176":"SystemUtilTest::::runProcessAndGetProcessInfoTest()","177":"SystemUtilTest::::runProcessAndGetProcessInfoTest()","178":"SystemUtilTest::::runProcessAndGetProcessInfoTest()","179":"SystemUtilTest::::runProcessAndGetProcessInfoTest()","180":"SystemUtilTest::::runProcessAndGetProcessInfoTest()","181":"SystemUtilTest::::runProcessAndGetProcessInfoTest()","186":"SystemUtilTest.TestProcess::::getOutputStream()","187":"SystemUtilTest.TestProcess::::getOutputStream()","188":"SystemUtilTest.TestProcess::::getOutputStream()","189":"SystemUtilTest.TestProcess::::getOutputStream()","191":"SystemUtilTest.TestProcess::::getInputStream()","192":"SystemUtilTest.TestProcess::::getInputStream()","193":"SystemUtilTest.TestProcess::::getInputStream()","194":"SystemUtilTest.TestProcess::::getInputStream()","196":"SystemUtilTest.TestProcess::::getErrorStream()","197":"SystemUtilTest.TestProcess::::getErrorStream()","198":"SystemUtilTest.TestProcess::::getErrorStream()","199":"SystemUtilTest.TestProcess::::getErrorStream()","201":"SystemUtilTest.TestProcess::::waitFor()","202":"SystemUtilTest.TestProcess::::waitFor()","203":"SystemUtilTest.TestProcess::::waitFor()","204":"SystemUtilTest.TestProcess::::waitFor()","206":"SystemUtilTest.TestProcess::::exitValue()","207":"SystemUtilTest.TestProcess::::exitValue()","208":"SystemUtilTest.TestProcess::::exitValue()","209":"SystemUtilTest.TestProcess::::exitValue()","211":"SystemUtilTest.TestProcess::::destroy()","212":"SystemUtilTest.TestProcess::::destroy()","213":"SystemUtilTest.TestProcess::::destroy()","214":"SystemUtilTest.TestProcess::::destroy()","219":"SystemUtilTest.EmptyTestProcess::::getInputStream()","220":"SystemUtilTest.EmptyTestProcess::::getInputStream()","221":"SystemUtilTest.EmptyTestProcess::::getInputStream()","222":"SystemUtilTest.EmptyTestProcess::::getInputStream()"},"tests":[{"test_lines":[58,65],"covered_lines":[270,271,275,276,280,281,282,283,285]},{"test_lines":[67,75],"covered_lines":[270,273,275,276,280,281,282,283,285]},{"test_lines":[77,83],"covered_lines":[270,273,275,276,280,281,282,283,285]},{"test_lines":[85,91],"covered_lines":[270,273,275,276,280,281,282,283,285]},{"test_lines":[93,100],"covered_lines":[280,281,282,283,285]},{"test_lines":[102,111],"covered_lines":[280,281,282,283,285]},{"test_lines":[113,122],"covered_lines":[280,281,282,283,285]},{"test_lines":[124,129],"covered_lines":[308,316,317,319,320,321,323,324]},{"test_lines":[131,137],"covered_lines":[289,290,292,293,294,296,297,298,300,301,303,304]},{"test_lines":[139,144],"covered_lines":[289,290,292,293,296,297,300,301,303,304]}]}}