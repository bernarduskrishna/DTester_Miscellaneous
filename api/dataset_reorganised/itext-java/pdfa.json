{"/bernard/dataset_construction/prep/repos/itext-java/pdfa/src/main/java/com/itextpdf/pdfa/PdfADocument.java": {"class_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.pdfa;\n", "\n", "import com.itextpdf.io.logs.IoLogMessageConstant;\n", "import com.itextpdf.kernel.font.PdfFont;\n", "import com.itextpdf.kernel.pdf.DocumentProperties;\n", "import com.itextpdf.kernel.pdf.IConformanceLevel;\n", "import com.itextpdf.kernel.pdf.IPdfPageFactory;\n", "import com.itextpdf.kernel.pdf.IsoKey;\n", "import com.itextpdf.kernel.pdf.PdfAConformanceLevel;\n", "import com.itextpdf.kernel.pdf.PdfDocument;\n", "import com.itextpdf.kernel.pdf.PdfName;\n", "import com.itextpdf.kernel.pdf.PdfObject;\n", "import com.itextpdf.kernel.pdf.PdfOutputIntent;\n", "import com.itextpdf.kernel.pdf.PdfReader;\n", "import com.itextpdf.kernel.pdf.PdfResources;\n", "import com.itextpdf.kernel.pdf.PdfStream;\n", "import com.itextpdf.kernel.pdf.PdfVersion;\n", "import com.itextpdf.kernel.pdf.PdfWriter;\n", "import com.itextpdf.kernel.pdf.StampingProperties;\n", "import com.itextpdf.kernel.pdf.tagutils.TagStructureContext;\n", "import com.itextpdf.kernel.utils.ValidationContainer;\n", "import com.itextpdf.kernel.xmp.XMPConst;\n", "import com.itextpdf.kernel.xmp.XMPException;\n", "import com.itextpdf.kernel.xmp.XMPMeta;\n", "import com.itextpdf.kernel.xmp.XMPMetaFactory;\n", "import com.itextpdf.kernel.xmp.XMPUtils;\n", "import com.itextpdf.pdfa.checker.PdfA1Checker;\n", "import com.itextpdf.pdfa.checker.PdfA2Checker;\n", "import com.itextpdf.pdfa.checker.PdfA3Checker;\n", "import com.itextpdf.pdfa.checker.PdfA4Checker;\n", "import com.itextpdf.pdfa.checker.PdfAChecker;\n", "import com.itextpdf.pdfa.exceptions.PdfAConformanceException;\n", "import com.itextpdf.pdfa.exceptions.PdfaExceptionMessageConstant;\n", "import com.itextpdf.pdfa.logs.PdfALogMessageConstant;\n", "\n", "import java.io.IOException;\n", "import org.slf4j.Logger;\n", "import org.slf4j.LoggerFactory;\n", "\n", "/**\n", " * This class extends {@link PdfDocument} and is in charge of creating files\n", " * that comply with the PDF/A standard.\n", " *\n", " * Client code is still responsible for making sure the file is actually PDF/A\n", " * compliant: multiple steps must be undertaken (depending on the\n", " * {@link PdfAConformanceLevel}) to ensure that the PDF/A standard is followed.\n", " *\n", " * This class will throw exceptions, mostly {@link PdfAConformanceException},\n", " * and thus refuse to output a PDF/A file if at any point the document does not\n", " * adhere to the PDF/A guidelines specified by the {@link PdfAConformanceLevel}.\n", " */\n", "public class PdfADocument extends PdfDocument {\n", "\n", "    private static IPdfPageFactory pdfAPageFactory = new PdfAPageFactory();\n", "\n", "    protected PdfAChecker checker;\n", "\n", "    private boolean alreadyLoggedThatObjectFlushingWasNotPerformed = false;\n", "\n", "    private boolean alreadyLoggedThatPageFlushingWasNotPerformed = false;\n", "\n", "    private boolean isPdfADocument = true;\n", "\n", "    /**\n", "     * Constructs a new PdfADocument for writing purposes, i.e. from scratch. A\n", "     * PDF/A file has a conformance level, and must have an explicit output\n", "     * intent.\n", "     *\n", "     * @param writer the {@link PdfWriter} object to write to\n", "     * @param conformanceLevel the generation and strictness level of the PDF/A that must be followed.\n", "     * @param outputIntent a {@link PdfOutputIntent}\n", "     */\n", "    public PdfADocument(PdfWriter writer, PdfAConformanceLevel conformanceLevel, PdfOutputIntent outputIntent) {\n", "        this(writer, conformanceLevel, outputIntent, new DocumentProperties());\n", "    }\n", "\n", "    /**\n", "     * Constructs a new PdfADocument for writing purposes, i.e. from scratch. A\n", "     * PDF/A file has a conformance level, and must have an explicit output\n", "     * intent.\n", "     *\n", "     * @param writer the {@link PdfWriter} object to write to\n", "     * @param conformanceLevel the generation and strictness level of the PDF/A that must be followed.\n", "     * @param outputIntent a {@link PdfOutputIntent}\n", "     * @param properties a {@link com.itextpdf.kernel.pdf.DocumentProperties}\n", "     */\n", "    public PdfADocument(PdfWriter writer, PdfAConformanceLevel conformanceLevel, PdfOutputIntent outputIntent, DocumentProperties properties) {\n", "        super(writer, properties);\n", "        setChecker(conformanceLevel);\n", "        addOutputIntent(outputIntent);\n", "    }\n", "\n", "\n", "    /**\n", "     * No default font for PDF/A documents.\n", "     *\n", "     * @return {@code null}.\n", "     */\n", "    @Override\n", "    public PdfFont getDefaultFont() {\n", "        if (isPdfADocument) {\n", "            return null;\n", "        }\n", "        return super.getDefaultFont();\n", "    }\n", "\n", "    /**\n", "     * Opens a PDF/A document in the stamping mode.\n", "     *\n", "     * @param reader PDF reader.\n", "     * @param writer PDF writer.\n", "     */\n", "    public PdfADocument(PdfReader reader, PdfWriter writer) {\n", "        this(reader, writer, new StampingProperties());\n", "    }\n", "\n", "    /**\n", "     * Opens a PDF/A document in stamping mode.\n", "     *\n", "     * @param reader PDF reader.\n", "     * @param writer PDF writer.\n", "     * @param properties properties of the stamping process\n", "     */\n", "    public PdfADocument(PdfReader reader, PdfWriter writer, StampingProperties properties) {\n", "        this(reader, writer, properties, false);\n", "    }\n", "\n", "    PdfADocument(PdfReader reader, PdfWriter writer, StampingProperties properties, boolean tolerant) {\n", "        super(reader, writer, properties);\n", "        PdfAConformanceLevel conformanceLevel = reader.getPdfAConformanceLevel();\n", "        if (conformanceLevel == null) {\n", "            if (tolerant) {\n", "                isPdfADocument = false;\n", "            } else {\n", "                throw new PdfAConformanceException(\n", "                        PdfaExceptionMessageConstant.\n", "                                DOCUMENT_TO_READ_FROM_SHALL_BE_A_PDFA_CONFORMANT_FILE_WITH_VALID_XMP_METADATA);\n", "            }\n", "        }\n", "\n", "        setChecker(conformanceLevel);\n", "    }\n", "\n", "\n", "    /**\n", "     * {@inheritDoc}\n", "     */\n", "    @Override\n", "    public IConformanceLevel getConformanceLevel() {\n", "        if (isPdfADocument) {\n", "            return checker.getConformanceLevel();\n", "        } else {\n", "            return null;\n", "        }\n", "    }\n", "\n", "    /**\n", "     * {@inheritDoc}\n", "     *\n", "     * @param outputIntent {@inheritDoc}\n", "     */\n", "    @Override\n", "    public void addOutputIntent(PdfOutputIntent outputIntent) {\n", "        super.addOutputIntent(outputIntent);\n", "        checker.setPdfAOutputIntentColorSpace(getCatalog().getPdfObject());\n", "    }\n", "\n", "    void logThatPdfAPageFlushingWasNotPerformed() {\n", "        if (!alreadyLoggedThatPageFlushingWasNotPerformed) {\n", "            alreadyLoggedThatPageFlushingWasNotPerformed = true;\n", "            // This log message will be printed once for one instance of the document.\n", "            LoggerFactory.getLogger(PdfADocument.class).warn(PdfALogMessageConstant.PDFA_PAGE_FLUSHING_WAS_NOT_PERFORMED);\n", "        }\n", "    }\n", "\n", "    @Override\n", "    protected void addCustomMetadataExtensions(XMPMeta xmpMeta) {\n", "        if (!isPdfADocument) {\n", "            super.addCustomMetadataExtensions(xmpMeta);\n", "            return;\n", "        }\n", "\n", "        if (this.isTagged()) {\n", "            try {\n", "                if (xmpMeta.getPropertyInteger(XMPConst.NS_PDFUA_ID, XMPConst.PART) != null) {\n", "                    XMPMeta taggedExtensionMeta = XMPMetaFactory.parseFromString(PdfAXMPUtil.PDF_UA_EXTENSION);\n", "                    XMPUtils.appendProperties(taggedExtensionMeta, xmpMeta, true, false);\n", "                }\n", "            } catch (XMPException exc) {\n", "                Logger logger = LoggerFactory.getLogger(PdfADocument.class);\n", "                logger.error(IoLogMessageConstant.EXCEPTION_WHILE_UPDATING_XMPMETADATA, exc);\n", "            }\n", "        }\n", "    }\n", "\n", "    @Override\n", "    protected void updateXmpMetadata() {\n", "        if (!isPdfADocument) {\n", "            super.updateXmpMetadata();\n", "            return;\n", "        }\n", "\n", "        try {\n", "            XMPMeta xmpMeta = updateDefaultXmpMetadata();\n", "            xmpMeta.setProperty(XMPConst.NS_PDFA_ID, XMPConst.PART, checker.getConformanceLevel().getPart());\n", "            if (checker.getConformanceLevel().getConformance() != null) {\n", "                xmpMeta.setProperty(XMPConst.NS_PDFA_ID, XMPConst.CONFORMANCE,\n", "                        checker.getConformanceLevel().getConformance());\n", "            }\n", "            if (\"4\".equals(checker.getConformanceLevel().getPart())) {\n", "                xmpMeta.setProperty(XMPConst.NS_PDFA_ID, XMPConst.REV, PdfAConformanceLevel.PDF_A_4_REVISION);\n", "            }\n", "            addCustomMetadataExtensions(xmpMeta);\n", "            setXmpMetadata(xmpMeta);\n", "        } catch (XMPException e) {\n", "            Logger logger = LoggerFactory.getLogger(PdfADocument.class);\n", "            logger.error(IoLogMessageConstant.EXCEPTION_WHILE_UPDATING_XMPMETADATA, e);\n", "        }\n", "    }\n", "\n", "    @Override\n", "    protected void checkIsoConformance() {\n", "        setCheckerIfChanged();\n", "        super.checkIsoConformance();\n", "    }\n", "\n", "    /**\n", "     * @param obj           an object to conform.\n", "     * @param key           type of object to conform.\n", "     * @param resources     {@link PdfResources} associated with an object to check.\n", "     * @param contentStream current content stream.\n", "     * @param extra         extra data required for the check.\n", "     */\n", "    @Override\n", "    public void checkIsoConformance(Object obj, IsoKey key, PdfResources resources, PdfStream contentStream,\n", "            Object extra) {\n", "        setCheckerIfChanged();\n", "        super.checkIsoConformance(obj, key, resources, contentStream, extra);\n", "    }\n", "\n", "    @Override\n", "    protected void flushObject(PdfObject pdfObject, boolean canBeInObjStm) throws IOException {\n", "        if (!isPdfADocument) {\n", "            super.flushObject(pdfObject, canBeInObjStm);\n", "            return;\n", "        }\n", "\n", "        markObjectAsMustBeFlushed(pdfObject);\n", "        if (isClosing || checker.objectIsChecked(pdfObject)) {\n", "            super.flushObject(pdfObject, canBeInObjStm);\n", "        } else if (!alreadyLoggedThatObjectFlushingWasNotPerformed) {\n", "            alreadyLoggedThatObjectFlushingWasNotPerformed = true;\n", "            // This log message will be printed once for one instance of the document.\n", "            LoggerFactory.getLogger(PdfADocument.class)\n", "                    .warn(PdfALogMessageConstant.PDFA_OBJECT_FLUSHING_WAS_NOT_PERFORMED);\n", "        }\n", "    }\n", "\n", "    /**\n", "     * Sets the checker that defines the requirements of the PDF/A standard\n", "     * depending on conformance level.\n", "     *\n", "     * @param conformanceLevel {@link PdfAConformanceLevel}\n", "     */\n", "    protected void setChecker(PdfAConformanceLevel conformanceLevel) {\n", "        if (!isPdfADocument) {\n", "            return;\n", "        }\n", "        setChecker(getCorrectCheckerFromConformance(conformanceLevel));\n", "    }\n", "\n", "    protected void setChecker(PdfAChecker checker) {\n", "        if (!isPdfADocument) {\n", "            return;\n", "        }\n", "        this.checker = checker;\n", "        ValidationContainer validationContainer = new ValidationContainer();\n", "        validationContainer.addChecker(checker);\n", "        this.getDiContainer().register(ValidationContainer.class, validationContainer);\n", "    }\n", "\n", "    private void setCheckerIfChanged() {\n", "        if (!isPdfADocument) {\n", "            return;\n", "        }\n", "        if (!getDiContainer().isRegistered(ValidationContainer.class)) {\n", "            return;\n", "        }\n", "        ValidationContainer validationContainer = getDiContainer().getInstance(ValidationContainer.class);\n", "        if (validationContainer != null && !validationContainer.containsChecker(checker)) {\n", "            setChecker(checker);\n", "        }\n", "    }\n", "\n", "    private static PdfAChecker getCorrectCheckerFromConformance(PdfAConformanceLevel conformanceLevel) {\n", "        PdfAChecker checker;\n", "        switch (conformanceLevel.getPart()) {\n", "            case \"1\":\n", "                checker = new PdfA1Checker(conformanceLevel);\n", "                break;\n", "            case \"2\":\n", "                checker = new PdfA2Checker(conformanceLevel);\n", "                break;\n", "            case \"3\":\n", "                checker = new PdfA3Checker(conformanceLevel);\n", "                break;\n", "            case \"4\":\n", "                checker = new PdfA4Checker(conformanceLevel);\n", "                break;\n", "            default:\n", "                throw new IllegalArgumentException(PdfaExceptionMessageConstant\n", "                        .CANNOT_FIND_PDFA_CHECKER_FOR_SPECIFIED_NAME);\n", "        }\n", "        return checker;\n", "    }\n", "\n", "    /**\n", "     * Initializes tagStructureContext to track necessary information of document's tag structure.\n", "     */\n", "    @Override\n", "    protected void initTagStructureContext() {\n", "        if (isPdfADocument) {\n", "            tagStructureContext = new TagStructureContext(this, getPdfVersionForPdfA(checker.getConformanceLevel()));\n", "        } else {\n", "            super.initTagStructureContext();\n", "        }\n", "    }\n", "\n", "    @Override\n", "    protected IPdfPageFactory getPageFactory() {\n", "        if (isPdfADocument) {\n", "            return pdfAPageFactory;\n", "        } else {\n", "            return super.getPageFactory();\n", "        }\n", "    }\n", "\n", "    /**\n", "     * {@inheritDoc}\n", "     *\n", "     * @param appendMode {@inheritDoc}\n", "     */\n", "    @Override\n", "    protected void flushInfoDictionary(boolean appendMode) {\n", "        if (!isPdfADocument || (!\"4\".equals(checker.getConformanceLevel().getPart()))) {\n", "            super.flushInfoDictionary(appendMode);\n", "        } else if (getCatalog().getPdfObject().get(PdfName.PieceInfo) != null) {\n", "            // Leave only ModDate as required by 6.1.3 File trailer of pdf/a-4 spec\n", "            getDocumentInfo().removeCreationDate();\n", "            super.flushInfoDictionary(appendMode);\n", "        }\n", "    }\n", "\n", "    boolean isClosing() {\n", "        return isClosing;\n", "    }\n", "\n", "    private static PdfVersion getPdfVersionForPdfA(PdfAConformanceLevel conformanceLevel) {\n", "        PdfVersion version;\n", "        switch (conformanceLevel.getPart()) {\n", "            case \"1\":\n", "                version = PdfVersion.PDF_1_4;\n", "                break;\n", "            case \"2\":\n", "                version = PdfVersion.PDF_1_7;\n", "                break;\n", "            case \"3\":\n", "                version = PdfVersion.PDF_1_7;\n", "                break;\n", "            case \"4\":\n", "                version = PdfVersion.PDF_2_0;\n", "                break;\n", "            default:\n", "                version = PdfVersion.PDF_1_4;\n", "                break;\n", "        }\n", "        return version;\n", "    }\n", "}\n"], "test_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.pdfa;\n", "\n", "import com.itextpdf.commons.utils.FileUtil;\n", "import com.itextpdf.kernel.pdf.IsoKey;\n", "import com.itextpdf.kernel.pdf.PdfAConformanceLevel;\n", "import com.itextpdf.kernel.pdf.PdfOutputIntent;\n", "import com.itextpdf.kernel.pdf.PdfVersion;\n", "import com.itextpdf.kernel.pdf.PdfWriter;\n", "import com.itextpdf.kernel.pdf.WriterProperties;\n", "import com.itextpdf.pdfa.exceptions.PdfAConformanceException;\n", "import com.itextpdf.pdfa.exceptions.PdfaExceptionMessageConstant;\n", "import com.itextpdf.test.ExtendedITextTest;\n", "import com.itextpdf.test.annotations.type.UnitTest;\n", "\n", "import java.io.ByteArrayOutputStream;\n", "import java.io.IOException;\n", "import java.io.InputStream;\n", "import org.junit.Assert;\n", "import org.junit.Test;\n", "import org.junit.experimental.categories.Category;\n", "\n", "@Category(UnitTest.class)\n", "public class PdfADocumentTest extends ExtendedITextTest {\n", "    public static final String SOURCE_FOLDER = \"./src/test/resources/com/itextpdf/pdfa/\";\n", "\n", "    @Test\n", "    public void checkCadesSignatureTypeIsoConformance() throws IOException {\n", "        PdfWriter writer = new PdfWriter(new ByteArrayOutputStream(), new WriterProperties().setPdfVersion(PdfVersion.PDF_2_0));\n", "        InputStream is = FileUtil.getInputStreamForFile(SOURCE_FOLDER + \"sRGB Color Space Profile.icm\");\n", "        PdfADocument document = new PdfADocument(writer, PdfAConformanceLevel.PDF_A_4, new PdfOutputIntent(\"Custom\", \"\", \"http://www.color.org\", \"sRGB IEC61966-2.1\", is));\n", "        document.checkIsoConformance(true, IsoKey.SIGNATURE_TYPE, null, null);\n", "    }\n", "\n", "    @Test\n", "    public void checkCMSSignatureTypeIsoConformance() throws IOException {\n", "        PdfWriter writer = new PdfWriter(new ByteArrayOutputStream(), new WriterProperties().setPdfVersion(PdfVersion.PDF_2_0));\n", "        InputStream is = FileUtil.getInputStreamForFile(SOURCE_FOLDER + \"sRGB Color Space Profile.icm\");\n", "        PdfADocument document = new PdfADocument(writer, PdfAConformanceLevel.PDF_A_4, new PdfOutputIntent(\"Custom\", \"\", \"http://www.color.org\", \"sRGB IEC61966-2.1\", is));\n", "        Exception e = Assert.assertThrows(PdfAConformanceException.class, () -> document.checkIsoConformance(false, IsoKey.SIGNATURE_TYPE, null, null));\n", "        Assert.assertEquals(PdfaExceptionMessageConstant.SIGNATURE_SHALL_CONFORM_TO_ONE_OF_THE_PADES_PROFILE, e.getMessage());\n", "    }\n", "\n", "}\n"], "method_lines_dic": {"PdfADocument::::getDefaultFont()": [121, 127], "PdfADocument::::getConformanceLevel()": [170, 177], "PdfADocument::::logThatPdfAPageFlushingWasNotPerformed()": [190, 196], "PdfADocument::::updateXmpMetadata()": [218, 241], "PdfADocument::::checkIsoConformance()": [243, 247], "PdfADocument::::setChecker(com.itextpdf.pdfa.checker.PdfAChecker)": [294, 302], "PdfADocument::::setCheckerIfChanged()": [304, 315], "PdfADocument::::initTagStructureContext()": [342, 349], "PdfADocument::::getPageFactory()": [351, 358], "PdfADocument::::flushInfoDictionary(boolean)": [365, 374], "PdfADocument::::isClosing()": [376, 378]}, "test_method_lines_dic": {"PdfADocumentTest::::checkCadesSignatureTypeIsoConformance()": [48, 54], "PdfADocumentTest::::checkCMSSignatureTypeIsoConformance()": [56, 63]}, "reverse_method_lines_dic": {"121": "PdfADocument::::getDefaultFont()", "122": "PdfADocument::::getDefaultFont()", "123": "PdfADocument::::getDefaultFont()", "124": "PdfADocument::::getDefaultFont()", "125": "PdfADocument::::getDefaultFont()", "126": "PdfADocument::::getDefaultFont()", "127": "PdfADocument::::getDefaultFont()", "170": "PdfADocument::::getConformanceLevel()", "171": "PdfADocument::::getConformanceLevel()", "172": "PdfADocument::::getConformanceLevel()", "173": "PdfADocument::::getConformanceLevel()", "174": "PdfADocument::::getConformanceLevel()", "175": "PdfADocument::::getConformanceLevel()", "176": "PdfADocument::::getConformanceLevel()", "177": "PdfADocument::::getConformanceLevel()", "190": "PdfADocument::::logThatPdfAPageFlushingWasNotPerformed()", "191": "PdfADocument::::logThatPdfAPageFlushingWasNotPerformed()", "192": "PdfADocument::::logThatPdfAPageFlushingWasNotPerformed()", "193": "PdfADocument::::logThatPdfAPageFlushingWasNotPerformed()", "194": "PdfADocument::::logThatPdfAPageFlushingWasNotPerformed()", "195": "PdfADocument::::logThatPdfAPageFlushingWasNotPerformed()", "196": "PdfADocument::::logThatPdfAPageFlushingWasNotPerformed()", "218": "PdfADocument::::updateXmpMetadata()", "219": "PdfADocument::::updateXmpMetadata()", "220": "PdfADocument::::updateXmpMetadata()", "221": "PdfADocument::::updateXmpMetadata()", "222": "PdfADocument::::updateXmpMetadata()", "223": "PdfADocument::::updateXmpMetadata()", "224": "PdfADocument::::updateXmpMetadata()", "225": "PdfADocument::::updateXmpMetadata()", "226": "PdfADocument::::updateXmpMetadata()", "227": "PdfADocument::::updateXmpMetadata()", "228": "PdfADocument::::updateXmpMetadata()", "229": "PdfADocument::::updateXmpMetadata()", "230": "PdfADocument::::updateXmpMetadata()", "231": "PdfADocument::::updateXmpMetadata()", "232": "PdfADocument::::updateXmpMetadata()", "233": "PdfADocument::::updateXmpMetadata()", "234": "PdfADocument::::updateXmpMetadata()", "235": "PdfADocument::::updateXmpMetadata()", "236": "PdfADocument::::updateXmpMetadata()", "237": "PdfADocument::::updateXmpMetadata()", "238": "PdfADocument::::updateXmpMetadata()", "239": "PdfADocument::::updateXmpMetadata()", "240": "PdfADocument::::updateXmpMetadata()", "241": "PdfADocument::::updateXmpMetadata()", "243": "PdfADocument::::checkIsoConformance()", "244": "PdfADocument::::checkIsoConformance()", "245": "PdfADocument::::checkIsoConformance()", "246": "PdfADocument::::checkIsoConformance()", "247": "PdfADocument::::checkIsoConformance()", "294": "PdfADocument::::setChecker(com.itextpdf.pdfa.checker.PdfAChecker)", "295": "PdfADocument::::setChecker(com.itextpdf.pdfa.checker.PdfAChecker)", "296": "PdfADocument::::setChecker(com.itextpdf.pdfa.checker.PdfAChecker)", "297": "PdfADocument::::setChecker(com.itextpdf.pdfa.checker.PdfAChecker)", "298": "PdfADocument::::setChecker(com.itextpdf.pdfa.checker.PdfAChecker)", "299": "PdfADocument::::setChecker(com.itextpdf.pdfa.checker.PdfAChecker)", "300": "PdfADocument::::setChecker(com.itextpdf.pdfa.checker.PdfAChecker)", "301": "PdfADocument::::setChecker(com.itextpdf.pdfa.checker.PdfAChecker)", "302": "PdfADocument::::setChecker(com.itextpdf.pdfa.checker.PdfAChecker)", "304": "PdfADocument::::setCheckerIfChanged()", "305": "PdfADocument::::setCheckerIfChanged()", "306": "PdfADocument::::setCheckerIfChanged()", "307": "PdfADocument::::setCheckerIfChanged()", "308": "PdfADocument::::setCheckerIfChanged()", "309": "PdfADocument::::setCheckerIfChanged()", "310": "PdfADocument::::setCheckerIfChanged()", "311": "PdfADocument::::setCheckerIfChanged()", "312": "PdfADocument::::setCheckerIfChanged()", "313": "PdfADocument::::setCheckerIfChanged()", "314": "PdfADocument::::setCheckerIfChanged()", "315": "PdfADocument::::setCheckerIfChanged()", "342": "PdfADocument::::initTagStructureContext()", "343": "PdfADocument::::initTagStructureContext()", "344": "PdfADocument::::initTagStructureContext()", "345": "PdfADocument::::initTagStructureContext()", "346": "PdfADocument::::initTagStructureContext()", "347": "PdfADocument::::initTagStructureContext()", "348": "PdfADocument::::initTagStructureContext()", "349": "PdfADocument::::initTagStructureContext()", "351": "PdfADocument::::getPageFactory()", "352": "PdfADocument::::getPageFactory()", "353": "PdfADocument::::getPageFactory()", "354": "PdfADocument::::getPageFactory()", "355": "PdfADocument::::getPageFactory()", "356": "PdfADocument::::getPageFactory()", "357": "PdfADocument::::getPageFactory()", "358": "PdfADocument::::getPageFactory()", "365": "PdfADocument::::flushInfoDictionary(boolean)", "366": "PdfADocument::::flushInfoDictionary(boolean)", "367": "PdfADocument::::flushInfoDictionary(boolean)", "368": "PdfADocument::::flushInfoDictionary(boolean)", "369": "PdfADocument::::flushInfoDictionary(boolean)", "370": "PdfADocument::::flushInfoDictionary(boolean)", "371": "PdfADocument::::flushInfoDictionary(boolean)", "372": "PdfADocument::::flushInfoDictionary(boolean)", "373": "PdfADocument::::flushInfoDictionary(boolean)", "374": "PdfADocument::::flushInfoDictionary(boolean)", "376": "PdfADocument::::isClosing()", "377": "PdfADocument::::isClosing()", "378": "PdfADocument::::isClosing()"}, "test_reverse_method_lines_dic": {"48": "PdfADocumentTest::::checkCadesSignatureTypeIsoConformance()", "49": "PdfADocumentTest::::checkCadesSignatureTypeIsoConformance()", "50": "PdfADocumentTest::::checkCadesSignatureTypeIsoConformance()", "51": "PdfADocumentTest::::checkCadesSignatureTypeIsoConformance()", "52": "PdfADocumentTest::::checkCadesSignatureTypeIsoConformance()", "53": "PdfADocumentTest::::checkCadesSignatureTypeIsoConformance()", "54": "PdfADocumentTest::::checkCadesSignatureTypeIsoConformance()", "56": "PdfADocumentTest::::checkCMSSignatureTypeIsoConformance()", "57": "PdfADocumentTest::::checkCMSSignatureTypeIsoConformance()", "58": "PdfADocumentTest::::checkCMSSignatureTypeIsoConformance()", "59": "PdfADocumentTest::::checkCMSSignatureTypeIsoConformance()", "60": "PdfADocumentTest::::checkCMSSignatureTypeIsoConformance()", "61": "PdfADocumentTest::::checkCMSSignatureTypeIsoConformance()", "62": "PdfADocumentTest::::checkCMSSignatureTypeIsoConformance()", "63": "PdfADocumentTest::::checkCMSSignatureTypeIsoConformance()"}, "tests": [{"test_lines": [48, 54], "covered_lines": [76, 80, 82, 84, 96, 97, 110, 111, 112, 113, 186, 187, 188, 259, 260, 261, 288, 291, 292, 295, 298, 299, 300, 301, 302, 305, 308, 311, 312, 315, 319, 330, 331, 336]}, {"test_lines": [56, 63], "covered_lines": [76, 80, 82, 84, 96, 97, 110, 111, 112, 113, 186, 187, 188, 259, 288, 291, 292, 295, 298, 299, 300, 301, 302, 305, 308, 311, 312, 315, 319, 330, 331, 336]}]}, "/bernard/dataset_construction/prep/repos/itext-java/pdfa/src/main/java/com/itextpdf/pdfa/checker/PdfA3Checker.java": {"class_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.pdfa.checker;\n", "\n", "import com.itextpdf.kernel.pdf.PdfDictionary;\n", "import com.itextpdf.kernel.pdf.PdfName;\n", "import com.itextpdf.kernel.pdf.PdfObject;\n", "import com.itextpdf.kernel.pdf.PdfStream;\n", "import com.itextpdf.pdfa.exceptions.PdfAConformanceException;\n", "import com.itextpdf.kernel.pdf.PdfAConformanceLevel;\n", "import com.itextpdf.pdfa.exceptions.PdfaExceptionMessageConstant;\n", "import com.itextpdf.pdfa.logs.PdfAConformanceLogMessageConstant;\n", "\n", "import java.util.Collections;\n", "import org.slf4j.Logger;\n", "import org.slf4j.LoggerFactory;\n", "\n", "import java.util.Arrays;\n", "import java.util.HashSet;\n", "import java.util.Set;\n", "\n", "/**\n", " * PdfA3Checker defines the requirements of the PDF/A-3 standard and contains a\n", " * number of methods that override the implementations of its superclass\n", " * {@link PdfA2Checker}.\n", " * \n", " * The specification implemented by this class is ISO 19005-3\n", " */\n", "public class PdfA3Checker extends PdfA2Checker{\n", "    protected static final Set<PdfName> allowedAFRelationships = Collections\n", "            .unmodifiableSet(new HashSet<>(Arrays.asList(\n", "                    PdfName.Source,\n", "                    PdfName.Data,\n", "                    PdfName.Alternative,\n", "                    PdfName.Supplement,\n", "                    PdfName.Unspecified)));\n", "\n", "    /**\n", "     * Creates a PdfA3Checker with the required conformance level\n", "     * \n", "     * @param conformanceLevel the required conformance level, <code>a</code> or\n", "     * <code>u</code> or <code>b</code>\n", "     */\n", "    public PdfA3Checker(PdfAConformanceLevel conformanceLevel) {\n", "        super(conformanceLevel);\n", "    }\n", "\n", "    @Override\n", "    protected void checkFileSpec(PdfDictionary fileSpec) {\n", "        PdfName relationship = fileSpec.getAsName(PdfName.AFRelationship);\n", "        if (relationship == null || !allowedAFRelationships.contains(relationship)) {\n", "            throw new PdfAConformanceException(PdfaExceptionMessageConstant.FILE_SPECIFICATION_DICTIONARY_SHALL_CONTAIN_ONE_OF_THE_PREDEFINED_AFRELATIONSHIP_KEYS);\n", "        }\n", "\n", "        if (fileSpec.containsKey(PdfName.EF)) {\n", "            if (!fileSpec.containsKey(PdfName.F) || !fileSpec.containsKey(PdfName.UF) || !fileSpec.containsKey(PdfName.Desc)) {\n", "                throw new PdfAConformanceException(PdfaExceptionMessageConstant.FILE_SPECIFICATION_DICTIONARY_SHALL_CONTAIN_F_KEY_AND_UF_KEY);\n", "            }\n", "\n", "\n", "            PdfDictionary ef = fileSpec.getAsDictionary(PdfName.EF);\n", "            PdfStream embeddedFile = ef.getAsStream(PdfName.F);\n", "            if (embeddedFile == null) {\n", "                throw new PdfAConformanceException(PdfaExceptionMessageConstant.EF_KEY_OF_FILE_SPECIFICATION_DICTIONARY_SHALL_CONTAIN_DICTIONARY_WITH_VALID_F_KEY);\n", "            }\n", "\n", "            if (!embeddedFile.containsKey(PdfName.Subtype)) {\n", "                throw new PdfAConformanceException(PdfaExceptionMessageConstant.MIME_TYPE_SHALL_BE_SPECIFIED_USING_THE_SUBTYPE_KEY_OF_THE_FILE_SPECIFICATION_STREAM_DICTIONARY);\n", "            }\n", "\n", "            if (embeddedFile.containsKey(PdfName.Params)) {\n", "                PdfObject params = embeddedFile.get(PdfName.Params);\n", "                if (!params.isDictionary()) {\n", "                    throw new PdfAConformanceException(PdfaExceptionMessageConstant.EMBEDDED_FILE_SHALL_CONTAIN_PARAMS_KEY_WITH_DICTIONARY_AS_VALUE);\n", "                }\n", "                if (((PdfDictionary)params).getAsString(PdfName.ModDate) == null) {\n", "                    throw new PdfAConformanceException(PdfaExceptionMessageConstant.EMBEDDED_FILE_SHALL_CONTAIN_PARAMS_KEY_WITH_VALID_MODDATE_KEY);\n", "                }\n", "            } else {\n", "                Logger logger = LoggerFactory.getLogger(PdfAChecker.class);\n", "                logger.warn(PdfAConformanceLogMessageConstant.EMBEDDED_FILE_SHOULD_CONTAIN_PARAMS_KEY);\n", "            }\n", "        }\n", "    }\n", "}\n"], "test_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.pdfa.checker;\n", "\n", "import com.itextpdf.kernel.pdf.PdfAConformanceLevel;\n", "import com.itextpdf.kernel.pdf.PdfDictionary;\n", "import com.itextpdf.kernel.pdf.PdfName;\n", "import com.itextpdf.kernel.pdf.PdfStream;\n", "import com.itextpdf.pdfa.exceptions.PdfAConformanceException;\n", "import com.itextpdf.pdfa.exceptions.PdfaExceptionMessageConstant;\n", "import com.itextpdf.test.ExtendedITextTest;\n", "import com.itextpdf.test.annotations.type.UnitTest;\n", "import org.junit.Assert;\n", "import org.junit.Before;\n", "import org.junit.Test;\n", "import org.junit.experimental.categories.Category;\n", "\n", "@Category(UnitTest.class)\n", "public class PdfA3CheckerTest extends ExtendedITextTest {\n", "    private PdfA1Checker pdfA3Checker = new PdfA3Checker(PdfAConformanceLevel.PDF_A_3B);\n", "\n", "    @Before\n", "    public void before() {\n", "        pdfA3Checker.setFullCheckMode(true);\n", "    }\n", "\n", "    @Test\n", "    public void checkFileSpecNotContainsAFRelationshipKeyTest() {\n", "        PdfDictionary fileSpec = new PdfDictionary();\n", "        fileSpec.put(PdfName.EF, PdfName.Identity);\n", "        Exception e = Assert.assertThrows(PdfAConformanceException.class,\n", "                () -> pdfA3Checker.checkFileSpec(fileSpec)\n", "        );\n", "        Assert.assertEquals(PdfaExceptionMessageConstant.FILE_SPECIFICATION_DICTIONARY_SHALL_CONTAIN_ONE_OF_THE_PREDEFINED_AFRELATIONSHIP_KEYS, e.getMessage());\n", "    }\n", "\n", "    @Test\n", "    public void checkFileSpecNotContainsFKeyTest() {\n", "        PdfDictionary fileSpec = new PdfDictionary();\n", "        fileSpec.put(PdfName.EF, PdfName.Identity);\n", "        fileSpec.put(PdfName.AFRelationship, PdfName.Data);\n", "        Exception e = Assert.assertThrows(PdfAConformanceException.class,\n", "                () -> pdfA3Checker.checkFileSpec(fileSpec)\n", "        );\n", "        Assert.assertEquals(PdfaExceptionMessageConstant.FILE_SPECIFICATION_DICTIONARY_SHALL_CONTAIN_F_KEY_AND_UF_KEY, e.getMessage());\n", "    }\n", "\n", "    @Test\n", "    public void checkFileSpecContainsNullFKeyTest() {\n", "        PdfDictionary fileSpec = new PdfDictionary();\n", "        fileSpec.put(PdfName.EF, new PdfDictionary());\n", "        fileSpec.put(PdfName.F, PdfName.Identity);\n", "        fileSpec.put(PdfName.UF, PdfName.Identity);\n", "        fileSpec.put(PdfName.Desc, PdfName.Identity);\n", "        fileSpec.put(PdfName.AFRelationship, PdfName.Data);\n", "        Exception e = Assert.assertThrows(PdfAConformanceException.class,\n", "                () -> pdfA3Checker.checkFileSpec(fileSpec)\n", "        );\n", "        Assert.assertEquals(PdfaExceptionMessageConstant.EF_KEY_OF_FILE_SPECIFICATION_DICTIONARY_SHALL_CONTAIN_DICTIONARY_WITH_VALID_F_KEY, e.getMessage());\n", "    }\n", "\n", "    @Test\n", "    public void checkFileSpecContainsEmptyFKeyTest() {\n", "        PdfDictionary fileSpec = new PdfDictionary();\n", "        PdfDictionary ef = new PdfDictionary();\n", "        ef.put(PdfName.F, new PdfStream());\n", "        fileSpec.put(PdfName.EF, ef);\n", "        fileSpec.put(PdfName.F, new PdfDictionary());\n", "        fileSpec.put(PdfName.UF, PdfName.Identity);\n", "        fileSpec.put(PdfName.Desc, PdfName.Identity);\n", "        fileSpec.put(PdfName.AFRelationship, PdfName.Data);\n", "        Exception e = Assert.assertThrows(PdfAConformanceException.class,\n", "                () -> pdfA3Checker.checkFileSpec(fileSpec)\n", "        );\n", "        Assert.assertEquals(PdfaExceptionMessageConstant.MIME_TYPE_SHALL_BE_SPECIFIED_USING_THE_SUBTYPE_KEY_OF_THE_FILE_SPECIFICATION_STREAM_DICTIONARY, e.getMessage());\n", "    }\n", "\n", "    @Test\n", "    public void checkFileSpecContainsFKeyWithParamsTest() {\n", "        PdfDictionary fileSpec = new PdfDictionary();\n", "        PdfDictionary ef = new PdfDictionary();\n", "        PdfStream stream = new PdfStream();\n", "        stream.put(PdfName.Params, PdfName.Identity);\n", "        stream.put(PdfName.Subtype, PdfName.Identity);\n", "        ef.put(PdfName.F, stream);\n", "        fileSpec.put(PdfName.EF, ef);\n", "        fileSpec.put(PdfName.F, new PdfDictionary());\n", "        fileSpec.put(PdfName.UF, PdfName.Identity);\n", "        fileSpec.put(PdfName.Desc, PdfName.Identity);\n", "        fileSpec.put(PdfName.AFRelationship, PdfName.Data);\n", "        Exception e = Assert.assertThrows(PdfAConformanceException.class,\n", "                () -> pdfA3Checker.checkFileSpec(fileSpec)\n", "        );\n", "        Assert.assertEquals(PdfaExceptionMessageConstant.EMBEDDED_FILE_SHALL_CONTAIN_PARAMS_KEY_WITH_DICTIONARY_AS_VALUE, e.getMessage());\n", "    }\n", "}\n"], "method_lines_dic": {}, "test_method_lines_dic": {"PdfA3CheckerTest::::before()": [42, 45], "PdfA3CheckerTest::::checkFileSpecNotContainsAFRelationshipKeyTest()": [47, 55], "PdfA3CheckerTest::::checkFileSpecNotContainsFKeyTest()": [57, 66], "PdfA3CheckerTest::::checkFileSpecContainsNullFKeyTest()": [68, 80], "PdfA3CheckerTest::::checkFileSpecContainsEmptyFKeyTest()": [82, 96], "PdfA3CheckerTest::::checkFileSpecContainsFKeyWithParamsTest()": [98, 115]}, "reverse_method_lines_dic": {}, "test_reverse_method_lines_dic": {"42": "PdfA3CheckerTest::::before()", "43": "PdfA3CheckerTest::::before()", "44": "PdfA3CheckerTest::::before()", "45": "PdfA3CheckerTest::::before()", "47": "PdfA3CheckerTest::::checkFileSpecNotContainsAFRelationshipKeyTest()", "48": "PdfA3CheckerTest::::checkFileSpecNotContainsAFRelationshipKeyTest()", "49": "PdfA3CheckerTest::::checkFileSpecNotContainsAFRelationshipKeyTest()", "50": "PdfA3CheckerTest::::checkFileSpecNotContainsAFRelationshipKeyTest()", "51": "PdfA3CheckerTest::::checkFileSpecNotContainsAFRelationshipKeyTest()", "52": "PdfA3CheckerTest::::checkFileSpecNotContainsAFRelationshipKeyTest()", "53": "PdfA3CheckerTest::::checkFileSpecNotContainsAFRelationshipKeyTest()", "54": "PdfA3CheckerTest::::checkFileSpecNotContainsAFRelationshipKeyTest()", "55": "PdfA3CheckerTest::::checkFileSpecNotContainsAFRelationshipKeyTest()", "57": "PdfA3CheckerTest::::checkFileSpecNotContainsFKeyTest()", "58": "PdfA3CheckerTest::::checkFileSpecNotContainsFKeyTest()", "59": "PdfA3CheckerTest::::checkFileSpecNotContainsFKeyTest()", "60": "PdfA3CheckerTest::::checkFileSpecNotContainsFKeyTest()", "61": "PdfA3CheckerTest::::checkFileSpecNotContainsFKeyTest()", "62": "PdfA3CheckerTest::::checkFileSpecNotContainsFKeyTest()", "63": "PdfA3CheckerTest::::checkFileSpecNotContainsFKeyTest()", "64": "PdfA3CheckerTest::::checkFileSpecNotContainsFKeyTest()", "65": "PdfA3CheckerTest::::checkFileSpecNotContainsFKeyTest()", "66": "PdfA3CheckerTest::::checkFileSpecNotContainsFKeyTest()", "68": "PdfA3CheckerTest::::checkFileSpecContainsNullFKeyTest()", "69": "PdfA3CheckerTest::::checkFileSpecContainsNullFKeyTest()", "70": "PdfA3CheckerTest::::checkFileSpecContainsNullFKeyTest()", "71": "PdfA3CheckerTest::::checkFileSpecContainsNullFKeyTest()", "72": "PdfA3CheckerTest::::checkFileSpecContainsNullFKeyTest()", "73": "PdfA3CheckerTest::::checkFileSpecContainsNullFKeyTest()", "74": "PdfA3CheckerTest::::checkFileSpecContainsNullFKeyTest()", "75": "PdfA3CheckerTest::::checkFileSpecContainsNullFKeyTest()", "76": "PdfA3CheckerTest::::checkFileSpecContainsNullFKeyTest()", "77": "PdfA3CheckerTest::::checkFileSpecContainsNullFKeyTest()", "78": "PdfA3CheckerTest::::checkFileSpecContainsNullFKeyTest()", "79": "PdfA3CheckerTest::::checkFileSpecContainsNullFKeyTest()", "80": "PdfA3CheckerTest::::checkFileSpecContainsNullFKeyTest()", "82": "PdfA3CheckerTest::::checkFileSpecContainsEmptyFKeyTest()", "83": "PdfA3CheckerTest::::checkFileSpecContainsEmptyFKeyTest()", "84": "PdfA3CheckerTest::::checkFileSpecContainsEmptyFKeyTest()", "85": "PdfA3CheckerTest::::checkFileSpecContainsEmptyFKeyTest()", "86": "PdfA3CheckerTest::::checkFileSpecContainsEmptyFKeyTest()", "87": "PdfA3CheckerTest::::checkFileSpecContainsEmptyFKeyTest()", "88": "PdfA3CheckerTest::::checkFileSpecContainsEmptyFKeyTest()", "89": "PdfA3CheckerTest::::checkFileSpecContainsEmptyFKeyTest()", "90": "PdfA3CheckerTest::::checkFileSpecContainsEmptyFKeyTest()", "91": "PdfA3CheckerTest::::checkFileSpecContainsEmptyFKeyTest()", "92": "PdfA3CheckerTest::::checkFileSpecContainsEmptyFKeyTest()", "93": "PdfA3CheckerTest::::checkFileSpecContainsEmptyFKeyTest()", "94": "PdfA3CheckerTest::::checkFileSpecContainsEmptyFKeyTest()", "95": "PdfA3CheckerTest::::checkFileSpecContainsEmptyFKeyTest()", "96": "PdfA3CheckerTest::::checkFileSpecContainsEmptyFKeyTest()", "98": "PdfA3CheckerTest::::checkFileSpecContainsFKeyWithParamsTest()", "99": "PdfA3CheckerTest::::checkFileSpecContainsFKeyWithParamsTest()", "100": "PdfA3CheckerTest::::checkFileSpecContainsFKeyWithParamsTest()", "101": "PdfA3CheckerTest::::checkFileSpecContainsFKeyWithParamsTest()", "102": "PdfA3CheckerTest::::checkFileSpecContainsFKeyWithParamsTest()", "103": "PdfA3CheckerTest::::checkFileSpecContainsFKeyWithParamsTest()", "104": "PdfA3CheckerTest::::checkFileSpecContainsFKeyWithParamsTest()", "105": "PdfA3CheckerTest::::checkFileSpecContainsFKeyWithParamsTest()", "106": "PdfA3CheckerTest::::checkFileSpecContainsFKeyWithParamsTest()", "107": "PdfA3CheckerTest::::checkFileSpecContainsFKeyWithParamsTest()", "108": "PdfA3CheckerTest::::checkFileSpecContainsFKeyWithParamsTest()", "109": "PdfA3CheckerTest::::checkFileSpecContainsFKeyWithParamsTest()", "110": "PdfA3CheckerTest::::checkFileSpecContainsFKeyWithParamsTest()", "111": "PdfA3CheckerTest::::checkFileSpecContainsFKeyWithParamsTest()", "112": "PdfA3CheckerTest::::checkFileSpecContainsFKeyWithParamsTest()", "113": "PdfA3CheckerTest::::checkFileSpecContainsFKeyWithParamsTest()", "114": "PdfA3CheckerTest::::checkFileSpecContainsFKeyWithParamsTest()", "115": "PdfA3CheckerTest::::checkFileSpecContainsFKeyWithParamsTest()"}, "tests": [{"test_lines": [47, 55], "covered_lines": [50, 51, 65, 66, 70, 71, 72]}, {"test_lines": [57, 66], "covered_lines": [50, 51, 65, 66, 70, 71, 75, 76, 77]}, {"test_lines": [68, 80], "covered_lines": [50, 51, 65, 66, 70, 71, 75, 76, 81, 82, 83, 84]}, {"test_lines": [82, 96], "covered_lines": [50, 51, 65, 66, 70, 71, 75, 76, 81, 82, 83, 87, 88]}, {"test_lines": [98, 115], "covered_lines": [50, 51, 65, 66, 70, 71, 75, 76, 81, 82, 83, 87, 91, 92, 93, 94]}]}, "/bernard/dataset_construction/prep/repos/itext-java/pdfa/src/main/java/com/itextpdf/pdfa/checker/PdfA1Checker.java": {"class_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.pdfa.checker;\n", "\n", "import com.itextpdf.commons.utils.MessageFormatUtil;\n", "import com.itextpdf.forms.fields.PdfFormField;\n", "import com.itextpdf.io.font.PdfEncodings;\n", "import com.itextpdf.io.source.PdfTokenizer;\n", "import com.itextpdf.io.source.RandomAccessFileOrArray;\n", "import com.itextpdf.io.source.RandomAccessSourceFactory;\n", "import com.itextpdf.kernel.colors.Color;\n", "import com.itextpdf.kernel.colors.PatternColor;\n", "import com.itextpdf.kernel.exceptions.PdfException;\n", "import com.itextpdf.kernel.font.PdfFont;\n", "import com.itextpdf.kernel.font.PdfTrueTypeFont;\n", "import com.itextpdf.kernel.font.PdfType3Font;\n", "import com.itextpdf.kernel.pdf.PdfAConformanceLevel;\n", "import com.itextpdf.kernel.pdf.PdfArray;\n", "import com.itextpdf.kernel.pdf.PdfBoolean;\n", "import com.itextpdf.kernel.pdf.PdfCatalog;\n", "import com.itextpdf.kernel.pdf.PdfDictionary;\n", "import com.itextpdf.kernel.pdf.PdfName;\n", "import com.itextpdf.kernel.pdf.PdfNumber;\n", "import com.itextpdf.kernel.pdf.PdfObject;\n", "import com.itextpdf.kernel.pdf.PdfStream;\n", "import com.itextpdf.kernel.pdf.PdfString;\n", "import com.itextpdf.kernel.pdf.PdfXrefTable;\n", "import com.itextpdf.kernel.pdf.annot.PdfAnnotation;\n", "import com.itextpdf.kernel.pdf.canvas.CanvasGraphicsState;\n", "import com.itextpdf.kernel.pdf.canvas.parser.util.PdfCanvasParser;\n", "import com.itextpdf.kernel.pdf.colorspace.PdfColorSpace;\n", "import com.itextpdf.kernel.pdf.colorspace.PdfDeviceCs;\n", "import com.itextpdf.kernel.pdf.colorspace.PdfPattern;\n", "import com.itextpdf.kernel.pdf.colorspace.PdfSpecialCs;\n", "import com.itextpdf.kernel.utils.checkers.FontCheckUtil;\n", "import com.itextpdf.pdfa.exceptions.PdfAConformanceException;\n", "import com.itextpdf.pdfa.exceptions.PdfaExceptionMessageConstant;\n", "import com.itextpdf.pdfa.logs.PdfAConformanceLogMessageConstant;\n", "\n", "import java.io.IOException;\n", "import java.util.ArrayList;\n", "import java.util.Arrays;\n", "import java.util.Collections;\n", "import java.util.HashSet;\n", "import java.util.List;\n", "import java.util.Set;\n", "import org.slf4j.Logger;\n", "import org.slf4j.LoggerFactory;\n", "\n", "/**\n", " * PdfA1Checker defines the requirements of the PDF/A-1 standard and contains\n", " * method implementations from the abstract {@link PdfAChecker} class.\n", " * <p>\n", " * The specification implemented by this class is ISO 19005-1\n", " */\n", "public class PdfA1Checker extends PdfAChecker {\n", "\n", "    protected static final Set<PdfName> forbiddenAnnotations = Collections\n", "            .unmodifiableSet(new HashSet<>(Arrays.asList(\n", "                    PdfName.Sound,\n", "                    PdfName.Movie,\n", "                    PdfName.FileAttachment)));\n", "    protected static final Set<PdfName> contentAnnotations = Collections\n", "            .unmodifiableSet(new HashSet<>(Arrays.asList(\n", "                    PdfName.Text,\n", "                    PdfName.FreeText,\n", "                    PdfName.Line,\n", "                    PdfName.Square,\n", "                    PdfName.Circle,\n", "                    PdfName.Stamp,\n", "                    PdfName.Ink,\n", "                    PdfName.Popup)));\n", "    protected static final Set<PdfName> forbiddenActions = Collections\n", "            .unmodifiableSet(new HashSet<>(Arrays.asList(\n", "                    PdfName.Launch,\n", "                    PdfName.Sound,\n", "                    PdfName.Movie,\n", "                    PdfName.ResetForm,\n", "                    PdfName.ImportData,\n", "                    PdfName.JavaScript,\n", "                    PdfName.Hide)));\n", "    protected static final Set<PdfName> allowedNamedActions = Collections\n", "            .unmodifiableSet(new HashSet<>(Arrays.asList(\n", "                    PdfName.NextPage,\n", "                    PdfName.PrevPage,\n", "                    PdfName.FirstPage,\n", "                    PdfName.LastPage)));\n", "    protected static final Set<PdfName> allowedRenderingIntents = Collections\n", "            .unmodifiableSet(new HashSet<>(Arrays.asList(\n", "                    PdfName.RelativeColorimetric,\n", "                    PdfName.AbsoluteColorimetric,\n", "                    PdfName.Perceptual,\n", "                    PdfName.Saturation)));\n", "    private static final int MAX_NUMBER_OF_DEVICEN_COLOR_COMPONENTS = 8;\n", "\n", "    private static final Logger logger = LoggerFactory.getLogger(PdfAChecker.class);\n", "\n", "    /**\n", "     * Creates a PdfA1Checker with the required conformance level\n", "     *\n", "     * @param conformanceLevel the required conformance level, <code>a</code> or\n", "     *                         <code>b</code>\n", "     */\n", "    public PdfA1Checker(PdfAConformanceLevel conformanceLevel) {\n", "        super(conformanceLevel);\n", "    }\n", "\n", "    @Override\n", "    public void checkCanvasStack(char stackOperation) {\n", "        if ('q' == stackOperation) {\n", "            if (++gsStackDepth > PdfA1Checker.maxGsStackDepth)\n", "                throw new PdfAConformanceException(PdfaExceptionMessageConstant.GRAPHICS_STATE_STACK_DEPTH_IS_GREATER_THAN_28);\n", "        } else if ('Q' == stackOperation) {\n", "            gsStackDepth--;\n", "        }\n", "    }\n", "\n", "    @Override\n", "    public void checkInlineImage(PdfStream inlineImage, PdfDictionary currentColorSpaces) {\n", "        PdfObject filter = inlineImage.get(PdfName.Filter);\n", "        if (filter instanceof PdfName) {\n", "            if (filter.equals(PdfName.LZWDecode)) {\n", "                throw new PdfAConformanceException(PdfaExceptionMessageConstant.LZWDECODE_FILTER_IS_NOT_PERMITTED);\n", "            }\n", "        } else if (filter instanceof PdfArray) {\n", "            for (int i = 0; i < ((PdfArray) filter).size(); i++) {\n", "                PdfName f = ((PdfArray) filter).getAsName(i);\n", "                if (f.equals(PdfName.LZWDecode)) {\n", "                    throw new PdfAConformanceException(PdfaExceptionMessageConstant.LZWDECODE_FILTER_IS_NOT_PERMITTED);\n", "                }\n", "            }\n", "        }\n", "\n", "        checkImage(inlineImage, currentColorSpaces);\n", "    }\n", "\n", "    /**\n", "     * {@inheritDoc}\n", "     */\n", "    @Deprecated\n", "    @Override\n", "    public void checkColor(Color color, PdfDictionary currentColorSpaces, Boolean fill, PdfStream stream) {\n", "        checkColor(null, color, currentColorSpaces, fill, stream);\n", "    }\n", "\n", "    /**\n", "     * {@inheritDoc}\n", "     */\n", "    @Override\n", "    public void checkColor(CanvasGraphicsState graphicsState, Color color, PdfDictionary currentColorSpaces, Boolean fill, PdfStream stream) {\n", "        checkColorSpace(color.getColorSpace(), stream, currentColorSpaces, true, fill);\n", "        if (color instanceof PatternColor) {\n", "            PdfPattern pattern = ((PatternColor) color).getPattern();\n", "            if (pattern instanceof PdfPattern.Tiling) {\n", "                checkContentStream((PdfStream) pattern.getPdfObject());\n", "            }\n", "        }\n", "    }\n", "\n", "    /**\n", "     * {@inheritDoc}\n", "     */\n", "    @Override\n", "    public void checkColorSpace(PdfColorSpace colorSpace, PdfObject pdfObject, PdfDictionary currentColorSpaces,\n", "            boolean checkAlternate, Boolean fill) {\n", "        if (colorSpace instanceof PdfSpecialCs.Separation) {\n", "            colorSpace = ((PdfSpecialCs.Separation) colorSpace).getBaseCs();\n", "        } else if (colorSpace instanceof PdfSpecialCs.DeviceN) {\n", "            PdfSpecialCs.DeviceN deviceNColorspace = (PdfSpecialCs.DeviceN) colorSpace;\n", "            if (deviceNColorspace.getNumberOfComponents() > MAX_NUMBER_OF_DEVICEN_COLOR_COMPONENTS) {\n", "                throw new PdfAConformanceException(PdfaExceptionMessageConstant.\n", "                        THE_NUMBER_OF_COLOR_COMPONENTS_IN_DEVICE_N_COLORSPACE_SHOULD_NOT_EXCEED,\n", "                        MAX_NUMBER_OF_DEVICEN_COLOR_COMPONENTS);\n", "            }\n", "            colorSpace = deviceNColorspace.getBaseCs();\n", "        }\n", "\n", "        if (colorSpace instanceof PdfDeviceCs.Rgb) {\n", "            if (cmykIsUsed || !cmykUsedObjects.isEmpty()) {\n", "                throw new PdfAConformanceException(PdfaExceptionMessageConstant.DEVICERGB_AND_DEVICECMYK_COLORSPACES_CANNOT_BE_USED_BOTH_IN_ONE_FILE);\n", "            }\n", "            rgbUsedObjects.add(pdfObject);\n", "        } else if (colorSpace instanceof PdfDeviceCs.Cmyk) {\n", "            if (rgbIsUsed || !rgbUsedObjects.isEmpty()) {\n", "                throw new PdfAConformanceException(PdfaExceptionMessageConstant.DEVICERGB_AND_DEVICECMYK_COLORSPACES_CANNOT_BE_USED_BOTH_IN_ONE_FILE);\n", "            }\n", "            cmykUsedObjects.add(pdfObject);\n", "        } else if (colorSpace instanceof PdfDeviceCs.Gray) {\n", "            grayUsedObjects.add(pdfObject);\n", "        }\n", "    }\n", "\n", "\n", "    @Override\n", "    public void checkXrefTable(PdfXrefTable xrefTable) {\n", "        if (xrefTable.getCountOfIndirectObjects() > getMaxNumberOfIndirectObjects()) {\n", "            throw new PdfAConformanceException(PdfaExceptionMessageConstant.MAXIMUM_NUMBER_OF_INDIRECT_OBJECTS_EXCEEDED);\n", "        }\n", "    }\n", "\n", "    @Override\n", "    protected Set<PdfName> getForbiddenActions() {\n", "        return forbiddenActions;\n", "    }\n", "\n", "    @Override\n", "    protected Set<PdfName> getAllowedNamedActions() {\n", "        return allowedNamedActions;\n", "    }\n", "\n", "    @Override\n", "    protected long getMaxNumberOfIndirectObjects() {\n", "        return 8_388_607;\n", "    }\n", "\n", "    /**\n", "     * {@inheritDoc}\n", "     */\n", "    @Override\n", "    protected void checkColorsUsages() {\n", "        // Do not check anything here. All checks are in checkPageColorsUsages.\n", "    }\n", "\n", "    /**\n", "     * {@inheritDoc}\n", "     */\n", "    @Override\n", "    protected void checkPageColorsUsages(PdfDictionary pageDict, PdfDictionary pageResources) {\n", "        if ((rgbIsUsed || cmykIsUsed || grayIsUsed || !rgbUsedObjects.isEmpty() || !cmykUsedObjects.isEmpty() ||\n", "                grayUsedObjects.isEmpty()) && pdfAOutputIntentColorSpace == null) {\n", "            throw new PdfAConformanceException(PdfaExceptionMessageConstant.IF_DEVICE_RGB_CMYK_GRAY_USED_IN_FILE_THAT_FILE_SHALL_CONTAIN_PDFA_OUTPUTINTENT);\n", "        }\n", "\n", "        if (rgbIsUsed || !rgbUsedObjects.isEmpty()) {\n", "            if (!ICC_COLOR_SPACE_RGB.equals(pdfAOutputIntentColorSpace)) {\n", "                throw new PdfAConformanceException(PdfaExceptionMessageConstant.DEVICERGB_MAY_BE_USED_ONLY_IF_THE_FILE_HAS_A_RGB_PDFA_OUTPUT_INTENT);\n", "            }\n", "        }\n", "        if (cmykIsUsed || !cmykUsedObjects.isEmpty()) {\n", "            if (!ICC_COLOR_SPACE_CMYK.equals(pdfAOutputIntentColorSpace)) {\n", "                throw new PdfAConformanceException(PdfaExceptionMessageConstant.DEVICECMYK_MAY_BE_USED_ONLY_IF_THE_FILE_HAS_A_CMYK_PDFA_OUTPUT_INTENT);\n", "            }\n", "        }\n", "    }\n", "\n", "    @Override\n", "    public void checkExtGState(CanvasGraphicsState extGState, PdfStream contentStream) {\n", "        if (extGState.getTransferFunction() != null) {\n", "            throw new PdfAConformanceException(PdfaExceptionMessageConstant.AN_EXTGSTATE_DICTIONARY_SHALL_NOT_CONTAIN_THE_TR_KEY);\n", "        }\n", "        PdfObject transferFunction2 = extGState.getTransferFunction2();\n", "        if (transferFunction2 != null && !PdfName.Default.equals(transferFunction2)) {\n", "            throw new PdfAConformanceException(PdfaExceptionMessageConstant.AN_EXTGSTATE_DICTIONARY_SHALL_NOT_CONTAIN_THE_TR_2_KEY_WITH_A_VALUE_OTHER_THAN_DEFAULT);\n", "        }\n", "\n", "        checkRenderingIntent(extGState.getRenderingIntent());\n", "\n", "        PdfObject softMask = extGState.getSoftMask();\n", "        if (softMask != null && !PdfName.None.equals(softMask)) {\n", "            throw new PdfAConformanceException(PdfaExceptionMessageConstant.THE_SMASK_KEY_IS_NOT_ALLOWED_IN_EXTGSTATE);\n", "        }\n", "\n", "        PdfObject bm = extGState.getBlendMode();\n", "        if (bm != null && !PdfName.Normal.equals(bm) && !PdfName.Compatible.equals(bm)) {\n", "            throw new PdfAConformanceException(PdfaExceptionMessageConstant.BLEND_MODE_SHALL_HAVE_VALUE_NORMAL_OR_COMPATIBLE);\n", "        }\n", "\n", "        Float ca = extGState.getStrokeOpacity();\n", "        if (ca != null && ca != 1) {\n", "            throw new PdfAConformanceException(PdfaExceptionMessageConstant.TRANSPARENCY_IS_NOT_ALLOWED_CA_SHALL_BE_EQUAL_TO_1);\n", "        }\n", "\n", "        ca = extGState.getFillOpacity();\n", "        if (ca != null && ca != 1) {\n", "            throw new PdfAConformanceException(PdfaExceptionMessageConstant.TRANSPARENCY_IS_NOT_ALLOWED_AND_CA_SHALL_BE_EQUAL_TO_1);\n", "        }\n", "    }\n", "\n", "    @Override\n", "    public void checkFontGlyphs(PdfFont font, PdfStream contentStream) {\n", "        // This check is irrelevant for the PdfA1 checker, so the body of the method is empty\n", "    }\n", "\n", "    @Override\n", "    public void checkRenderingIntent(PdfName intent) {\n", "        if (intent == null)\n", "            return;\n", "\n", "        if (!allowedRenderingIntents.contains(intent)) {\n", "            throw new PdfAConformanceException(PdfaExceptionMessageConstant.IF_SPECIFIED_RENDERING_SHALL_BE_ONE_OF_THE_FOLLOWING_RELATIVECOLORIMETRIC_ABSOLUTECOLORIMETRIC_PERCEPTUAL_OR_SATURATION);\n", "        }\n", "    }\n", "\n", "    @Override\n", "    public void checkFont(PdfFont pdfFont) {\n", "        if (!pdfFont.isEmbedded()) {\n", "            throw new PdfAConformanceException(PdfaExceptionMessageConstant.ALL_THE_FONTS_MUST_BE_EMBEDDED_THIS_ONE_IS_NOT_0)\n", "                    .setMessageParams(pdfFont.getFontProgram().getFontNames().getFontName());\n", "        }\n", "\n", "        if (pdfFont instanceof PdfTrueTypeFont) {\n", "            PdfTrueTypeFont trueTypeFont = (PdfTrueTypeFont) pdfFont;\n", "            boolean symbolic = trueTypeFont.getFontEncoding().isFontSpecific();\n", "            if (symbolic) {\n", "                checkSymbolicTrueTypeFont(trueTypeFont);\n", "            } else {\n", "                checkNonSymbolicTrueTypeFont(trueTypeFont);\n", "            }\n", "        }\n", "\n", "        if (pdfFont instanceof PdfType3Font) {\n", "            PdfDictionary charProcs = pdfFont.getPdfObject().getAsDictionary(PdfName.CharProcs);\n", "            for (PdfName charName : charProcs.keySet()) {\n", "                checkContentStream(charProcs.getAsStream(charName));\n", "            }\n", "        }\n", "    }\n", "\n", "    /**\n", "     * {@inheritDoc}\n", "     *\n", "     * @param crypto {@inheritDoc}\n", "     */\n", "    @Override\n", "    public void checkCrypto(PdfObject crypto) {\n", "        if (crypto != null) {\n", "            throw new PdfAConformanceException(\n", "                    PdfaExceptionMessageConstant.KEYWORD_ENCRYPT_SHALL_NOT_BE_USED_IN_THE_TRAILER_DICTIONARY);\n", "        }\n", "    }\n", "\n", "    /**\n", "     * {@inheritDoc}\n", "     */\n", "    @Override\n", "    public void checkSignatureType(boolean isCAdES) {\n", "        //nothing to do\n", "    }\n", "\n", "    /**\n", "     * {@inheritDoc}\n", "     *\n", "     * @param text {@inheritDoc}\n", "     * @param font {@inheritDoc}\n", "     */\n", "    @Override\n", "    public void checkText(String text, PdfFont font) {\n", "        int index = FontCheckUtil.checkGlyphsOfText(text, font, new ACharacterChecker());\n", "        if (index != -1) {\n", "            throw new PdfAConformanceException(\n", "                    PdfaExceptionMessageConstant.EMBEDDED_FONTS_SHALL_DEFINE_ALL_REFERENCED_GLYPHS);\n", "        }\n", "    }\n", "\n", "    @Override\n", "    protected void checkPageTransparency(PdfDictionary pageDict, PdfDictionary pageResources) {\n", "        // This check is irrelevant for the PdfA1 checker, so the body of the method is empty\n", "    }\n", "\n", "    @Override\n", "    protected void checkContentStream(PdfStream contentStream) {\n", "        if (isFullCheckMode() || contentStream.isModified()) {\n", "            byte[] contentBytes = contentStream.getBytes();\n", "            PdfTokenizer tokenizer = new PdfTokenizer(\n", "                    new RandomAccessFileOrArray(new RandomAccessSourceFactory().createSource(contentBytes)));\n", "\n", "            PdfCanvasParser parser = new PdfCanvasParser(tokenizer);\n", "            List<PdfObject> operands = new ArrayList<>();\n", "            try {\n", "                while (parser.parse(operands).size() > 0) {\n", "                    for (PdfObject operand : operands) {\n", "                        checkContentStreamObject(operand);\n", "                    }\n", "                }\n", "            } catch (IOException e) {\n", "                throw new PdfException(PdfaExceptionMessageConstant.CANNOT_PARSE_CONTENT_STREAM, e);\n", "            }\n", "        }\n", "    }\n", "\n", "    @Override\n", "    protected void checkNonSymbolicTrueTypeFont(PdfTrueTypeFont trueTypeFont) {\n", "        String encoding = trueTypeFont.getFontEncoding().getBaseEncoding();\n", "        // non-symbolic true type font will always has an encoding entry in font dictionary in itext\n", "        if (!PdfEncodings.WINANSI.equals(encoding) && !PdfEncodings.MACROMAN.equals(encoding) || trueTypeFont.getFontEncoding().hasDifferences()) {\n", "            throw new PdfAConformanceException(PdfaExceptionMessageConstant.ALL_NON_SYMBOLIC_TRUE_TYPE_FONT_SHALL_SPECIFY_MAC_ROMAN_OR_WIN_ANSI_ENCODING_AS_THE_ENCODING_ENTRY, trueTypeFont);\n", "        }\n", "    }\n", "\n", "    @Override\n", "    protected void checkSymbolicTrueTypeFont(PdfTrueTypeFont trueTypeFont) {\n", "        if (trueTypeFont.getFontEncoding().hasDifferences()) {\n", "            throw new PdfAConformanceException(PdfaExceptionMessageConstant.ALL_SYMBOLIC_TRUE_TYPE_FONTS_SHALL_NOT_SPECIFY_ENCODING);\n", "        }\n", "\n", "        // if symbolic font encoding doesn't have differences, itext won't write encoding for such font\n", "    }\n", "\n", "    @Override\n", "    protected void checkImage(PdfStream image, PdfDictionary currentColorSpaces) {\n", "        PdfColorSpace colorSpace = null;\n", "        if (isAlreadyChecked(image)) {\n", "            colorSpace = checkedObjectsColorspace.get(image);\n", "            checkColorSpace(colorSpace, image, currentColorSpaces, true, null);\n", "            return;\n", "        }\n", "        PdfObject colorSpaceObj = image.get(PdfName.ColorSpace);\n", "        if (colorSpaceObj != null) {\n", "            colorSpace = PdfColorSpace.makeColorSpace(colorSpaceObj);\n", "            checkColorSpace(colorSpace, image, currentColorSpaces, true, null);\n", "            checkedObjectsColorspace.put(image, colorSpace);\n", "        }\n", "\n", "        if (image.containsKey(PdfName.Alternates)) {\n", "            throw new PdfAConformanceException(PdfaExceptionMessageConstant.AN_IMAGE_DICTIONARY_SHALL_NOT_CONTAIN_ALTERNATES_KEY);\n", "        }\n", "        if (image.containsKey(PdfName.OPI)) {\n", "            throw new PdfAConformanceException(PdfaExceptionMessageConstant.AN_IMAGE_DICTIONARY_SHALL_NOT_CONTAIN_OPI_KEY);\n", "        }\n", "\n", "        if (image.containsKey(PdfName.Interpolate) && (boolean) image.getAsBool(PdfName.Interpolate)) {\n", "            throw new PdfAConformanceException(PdfaExceptionMessageConstant.THE_VALUE_OF_INTERPOLATE_KEY_SHALL_BE_FALSE);\n", "        }\n", "\n", "        checkRenderingIntent(image.getAsName(PdfName.Intent));\n", "\n", "        if (image.containsKey(PdfName.SMask) && !PdfName.None.equals(image.getAsName(PdfName.SMask))) {\n", "            throw new PdfAConformanceException(PdfaExceptionMessageConstant.THE_SMASK_KEY_IS_NOT_ALLOWED_IN_XOBJECTS);\n", "        }\n", "    }\n", "\n", "    @Override\n", "    protected void checkFormXObject(PdfStream form) {\n", "        if (isAlreadyChecked(form)) return;\n", "\n", "        if (form.containsKey(PdfName.OPI)) {\n", "            throw new PdfAConformanceException(PdfaExceptionMessageConstant.A_FORM_XOBJECT_DICTIONARY_SHALL_NOT_CONTAIN_OPI_KEY);\n", "        }\n", "        if (form.containsKey(PdfName.PS)) {\n", "            throw new PdfAConformanceException(PdfaExceptionMessageConstant.A_FORM_XOBJECT_DICTIONARY_SHALL_NOT_CONTAIN_PS_KEY);\n", "        }\n", "        if (PdfName.PS.equals(form.getAsName(PdfName.Subtype2))) {\n", "            throw new PdfAConformanceException(PdfaExceptionMessageConstant.A_FORM_XOBJECT_DICTIONARY_SHALL_NOT_CONTAIN_SUBTYPE2_KEY_WITH_A_VALUE_OF_PS);\n", "        }\n", "\n", "        if (form.containsKey(PdfName.SMask) && !PdfName.None.equals(form.getAsName(PdfName.SMask))) {\n", "            throw new PdfAConformanceException(PdfaExceptionMessageConstant.THE_SMASK_KEY_IS_NOT_ALLOWED_IN_XOBJECTS);\n", "        }\n", "\n", "        if (isContainsTransparencyGroup(form)) {\n", "            throw new PdfAConformanceException(PdfaExceptionMessageConstant.A_GROUP_OBJECT_WITH_AN_S_KEY_WITH_A_VALUE_OF_TRANSPARENCY_SHALL_NOT_BE_INCLUDED_IN_A_FORM_XOBJECT);\n", "        }\n", "\n", "        checkResources(form.getAsDictionary(PdfName.Resources), form);\n", "        checkContentStream(form);\n", "    }\n", "\n", "    @Override\n", "    protected void checkLogicalStructure(PdfDictionary catalog) {\n", "        if (checkStructure(conformanceLevel)) {\n", "            PdfDictionary markInfo = catalog.getAsDictionary(PdfName.MarkInfo);\n", "            if (markInfo == null || markInfo.getAsBoolean(PdfName.Marked) == null || !markInfo.getAsBoolean(PdfName.Marked).getValue()) {\n", "                throw new PdfAConformanceException(PdfaExceptionMessageConstant.A_CATALOG_SHALL_INCLUDE_MARK_INFO_DICTIONARY_WITH_MARKED_TRUE_VALUE);\n", "            }\n", "            if (!catalog.containsKey(PdfName.Lang)) {\n", "                logger.warn(PdfAConformanceLogMessageConstant.CATALOG_SHOULD_CONTAIN_LANG_ENTRY);\n", "            }\n", "        }\n", "    }\n", "\n", "    @Override\n", "    protected void checkMetaData(PdfDictionary catalog) {\n", "        if (!catalog.containsKey(PdfName.Metadata)) {\n", "            throw new PdfAConformanceException(PdfaExceptionMessageConstant.A_CATALOG_DICTIONARY_SHALL_CONTAIN_METADATA_ENTRY);\n", "        }\n", "    }\n", "\n", "    @Override\n", "    protected void checkOutputIntents(PdfDictionary catalog) {\n", "        PdfArray outputIntents = catalog.getAsArray(PdfName.OutputIntents);\n", "        if (outputIntents == null)\n", "            return;\n", "\n", "        int i;\n", "        PdfObject destOutputProfile = null;\n", "        for (i = 0; i < outputIntents.size() && destOutputProfile == null; ++i) {\n", "            destOutputProfile = outputIntents.getAsDictionary(i).get(PdfName.DestOutputProfile);\n", "        }\n", "        for (; i < outputIntents.size(); ++i) {\n", "            PdfObject otherDestOutputProfile = outputIntents.getAsDictionary(i).get(PdfName.DestOutputProfile);\n", "            if (otherDestOutputProfile != null && destOutputProfile != otherDestOutputProfile) {\n", "                throw new PdfAConformanceException(PdfaExceptionMessageConstant.IF_OUTPUTINTENTS_ARRAY_HAS_MORE_THAN_ONE_ENTRY_WITH_DESTOUTPUTPROFILE_KEY_THE_SAME_INDIRECT_OBJECT_SHALL_BE_USED_AS_THE_VALUE_OF_THAT_OBJECT);\n", "            }\n", "        }\n", "\n", "    }\n", "\n", "    @Override\n", "    protected void checkPdfNumber(PdfNumber number) {\n", "        if (number.hasDecimalPoint()) {\n", "            if (Math.abs(number.longValue()) > getMaxRealValue()) {\n", "                throw new PdfAConformanceException(PdfaExceptionMessageConstant.REAL_NUMBER_IS_OUT_OF_RANGE);\n", "            }\n", "        } else {\n", "            if (number.longValue() > getMaxIntegerValue() || number.longValue() < getMinIntegerValue()) {\n", "                throw new PdfAConformanceException(PdfaExceptionMessageConstant.INTEGER_NUMBER_IS_OUT_OF_RANGE);\n", "            }\n", "        }\n", "    }\n", "\n", "    /**\n", "     * Retrieve maximum allowed real value.\n", "     * @return maximum allowed real number\n", "     */\n", "    protected double getMaxRealValue() {\n", "        return 32767;\n", "    }\n", "\n", "    /**\n", "     * Retrieve maximal allowed integer value.\n", "     * @return maximal allowed integer number\n", "     */\n", "    protected long getMaxIntegerValue() {\n", "        return Integer.MAX_VALUE;\n", "    }\n", "\n", "    /**\n", "     * Retrieve minimal allowed integer value.\n", "     * @return minimal allowed integer number\n", "     */\n", "    protected long getMinIntegerValue() {\n", "        return Integer.MIN_VALUE;\n", "    }\n", "\n", "    @Override\n", "    protected void checkPdfArray(PdfArray array) {\n", "        if (array.size() > getMaxArrayCapacity()) {\n", "            throw new PdfAConformanceException(PdfaExceptionMessageConstant.MAXIMUM_ARRAY_CAPACITY_IS_EXCEEDED);\n", "        }\n", "    }\n", "\n", "    @Override\n", "    protected void checkPdfDictionary(PdfDictionary dictionary) {\n", "        if (dictionary.size() > getMaxDictionaryCapacity()) {\n", "            throw new PdfAConformanceException(PdfaExceptionMessageConstant.MAXIMUM_DICTIONARY_CAPACITY_IS_EXCEEDED);\n", "        }\n", "    }\n", "\n", "    @Override\n", "    protected void checkPdfStream(PdfStream stream) {\n", "        checkPdfDictionary(stream);\n", "\n", "        if (stream.containsKey(PdfName.F) || stream.containsKey(PdfName.FFilter) || stream.containsKey(PdfName.FDecodeParams)) {\n", "            throw new PdfAConformanceException(PdfaExceptionMessageConstant.STREAM_OBJECT_DICTIONARY_SHALL_NOT_CONTAIN_THE_F_FFILTER_OR_FDECODEPARAMS_KEYS);\n", "        }\n", "\n", "        PdfObject filter = stream.get(PdfName.Filter);\n", "        if (filter instanceof PdfName) {\n", "            if (filter.equals(PdfName.LZWDecode))\n", "                throw new PdfAConformanceException(PdfaExceptionMessageConstant.LZWDECODE_FILTER_IS_NOT_PERMITTED);\n", "        } else if (filter instanceof PdfArray) {\n", "            for (PdfObject f : ((PdfArray) filter)) {\n", "                if (f.equals(PdfName.LZWDecode))\n", "                    throw new PdfAConformanceException(PdfaExceptionMessageConstant.LZWDECODE_FILTER_IS_NOT_PERMITTED);\n", "            }\n", "        }\n", "    }\n", "\n", "    @Override\n", "    protected void checkPdfName(PdfName name) {\n", "        if (name.getValue().length() > getMaxNameLength()) {\n", "            throw new PdfAConformanceException(PdfaExceptionMessageConstant.PDF_NAME_IS_TOO_LONG);\n", "        }\n", "    }\n", "\n", "    /**\n", "     * Retrieve maximum allowed length of the name object.\n", "     *\n", "     * @return maximum allowed length of the name\n", "     */\n", "    protected int getMaxNameLength() {\n", "        return 127;\n", "    }\n", "\n", "    @Override\n", "    protected void checkPdfString(PdfString string) {\n", "        if (string.getValueBytes().length > getMaxStringLength()) {\n", "            throw new PdfAConformanceException(PdfaExceptionMessageConstant.PDF_STRING_IS_TOO_LONG);\n", "        }\n", "    }\n", "\n", "    /**\n", "     * Returns maximum allowed bytes length of the string in a PDF document.\n", "     *\n", "     * @return maximum string length\n", "     */\n", "    protected int getMaxStringLength() {\n", "        return 65535;\n", "    }\n", "\n", "    @Override\n", "    protected void checkPageSize(PdfDictionary page) {\n", "\n", "    }\n", "\n", "    @Override\n", "    protected void checkFileSpec(PdfDictionary fileSpec) {\n", "        if (fileSpec.containsKey(PdfName.EF)) {\n", "            throw new PdfAConformanceException(PdfaExceptionMessageConstant.FILE_SPECIFICATION_DICTIONARY_SHALL_NOT_CONTAIN_THE_EF_KEY);\n", "        }\n", "    }\n", "\n", "    /**\n", "     * {@inheritDoc}\n", "     */\n", "    @Override\n", "    protected void checkAnnotation(PdfDictionary annotDic) {\n", "        PdfName subtype = annotDic.getAsName(PdfName.Subtype);\n", "\n", "        if (subtype == null) {\n", "            throw new PdfAConformanceException(PdfaExceptionMessageConstant.ANNOTATION_TYPE_0_IS_NOT_PERMITTED).setMessageParams(\"null\");\n", "        }\n", "        if (getForbiddenAnnotations().contains(subtype)) {\n", "            throw new PdfAConformanceException(PdfaExceptionMessageConstant.ANNOTATION_TYPE_0_IS_NOT_PERMITTED).setMessageParams(subtype.getValue());\n", "        }\n", "        PdfNumber ca = annotDic.getAsNumber(PdfName.CA);\n", "        if (ca != null && ca.floatValue() != 1.0) {\n", "            throw new PdfAConformanceException(PdfaExceptionMessageConstant.AN_ANNOTATION_DICTIONARY_SHALL_NOT_CONTAIN_THE_CA_KEY_WITH_A_VALUE_OTHER_THAN_1);\n", "        }\n", "        if (!annotDic.containsKey(PdfName.F)) {\n", "            throw new PdfAConformanceException(PdfaExceptionMessageConstant.AN_ANNOTATION_DICTIONARY_SHALL_CONTAIN_THE_F_KEY);\n", "        }\n", "\n", "        int flags = (int) annotDic.getAsInt(PdfName.F);\n", "        if (!checkFlag(flags, PdfAnnotation.PRINT) || checkFlag(flags, PdfAnnotation.HIDDEN) || checkFlag(flags, PdfAnnotation.INVISIBLE) ||\n", "                checkFlag(flags, PdfAnnotation.NO_VIEW)) {\n", "            throw new PdfAConformanceException(PdfaExceptionMessageConstant.THE_F_KEYS_PRINT_FLAG_BIT_SHALL_BE_SET_TO_1_AND_ITS_HIDDEN_INVISIBLE_AND_NOVIEW_FLAG_BITS_SHALL_BE_SET_TO_0);\n", "        }\n", "        if (subtype.equals(PdfName.Text) && (!checkFlag(flags, PdfAnnotation.NO_ZOOM) || !checkFlag(flags, PdfAnnotation.NO_ROTATE))) {\n", "            throw new PdfAConformanceException(PdfAConformanceLogMessageConstant.TEXT_ANNOTATIONS_SHOULD_SET_THE_NOZOOM_AND_NOROTATE_FLAG_BITS_OF_THE_F_KEY_TO_1);\n", "        }\n", "        if (annotDic.containsKey(PdfName.C) || annotDic.containsKey(PdfName.IC)) {\n", "            if (!ICC_COLOR_SPACE_RGB.equals(pdfAOutputIntentColorSpace)) {\n", "                throw new PdfAConformanceException(PdfaExceptionMessageConstant.DESTOUTPUTPROFILE_IN_THE_PDFA1_OUTPUTINTENT_DICTIONARY_SHALL_BE_RGB);\n", "            }\n", "        }\n", "\n", "        PdfDictionary ap = annotDic.getAsDictionary(PdfName.AP);\n", "        if (ap != null) {\n", "            if (ap.containsKey(PdfName.D) || ap.containsKey(PdfName.R)) {\n", "                throw new PdfAConformanceException(PdfaExceptionMessageConstant.APPEARANCE_DICTIONARY_SHALL_CONTAIN_ONLY_THE_N_KEY_WITH_STREAM_VALUE);\n", "            }\n", "            if (PdfName.Widget.equals(annotDic.getAsName(PdfName.Subtype)) &&\n", "                    (PdfName.Btn.equals(PdfFormField.getFormType(annotDic)))) {\n", "                if (ap.getAsDictionary(PdfName.N) == null) {\n", "                    throw new PdfAConformanceException(PdfaExceptionMessageConstant.N_KEY_SHALL_BE_APPEARANCE_SUBDICTIONARY);\n", "                }\n", "            } else {\n", "                if (ap.getAsStream(PdfName.N) == null) {\n", "                    throw new PdfAConformanceException(PdfaExceptionMessageConstant.APPEARANCE_DICTIONARY_SHALL_CONTAIN_ONLY_THE_N_KEY_WITH_STREAM_VALUE);\n", "                }\n", "            }\n", "            checkResourcesOfAppearanceStreams(ap);\n", "        }\n", "\n", "        if (PdfName.Widget.equals(subtype) && (annotDic.containsKey(PdfName.AA) || annotDic.containsKey(PdfName.A))) {\n", "            throw new PdfAConformanceException(PdfaExceptionMessageConstant.WIDGET_ANNOTATION_DICTIONARY_OR_FIELD_DICTIONARY_SHALL_NOT_INCLUDE_A_OR_AA_ENTRY);\n", "        }\n", "\n", "        if (annotDic.containsKey(PdfName.AA)) {\n", "            throw new PdfAConformanceException(PdfaExceptionMessageConstant.AN_ANNOTATION_DICTIONARY_SHALL_NOT_CONTAIN_AA_KEY);\n", "        }\n", "\n", "        if (checkStructure(conformanceLevel)) {\n", "            if (contentAnnotations.contains(subtype) && !annotDic.containsKey(PdfName.Contents)) {\n", "                logger.warn(MessageFormatUtil.format(\n", "                        PdfAConformanceLogMessageConstant.ANNOTATION_OF_TYPE_0_SHOULD_HAVE_CONTENTS_KEY, subtype.getValue()));\n", "            }\n", "        }\n", "    }\n", "\n", "    /**\n", "     * Gets forbidden annotation types.\n", "     *\n", "     * @return a set of forbidden annotation types\n", "     */\n", "    protected Set<PdfName> getForbiddenAnnotations() {\n", "        return forbiddenAnnotations;\n", "    }\n", "\n", "    @Override\n", "    protected void checkForm(PdfDictionary form) {\n", "        if (form == null)\n", "            return;\n", "\n", "        PdfBoolean needAppearances = form.getAsBoolean(PdfName.NeedAppearances);\n", "        if (needAppearances != null && needAppearances.getValue()) {\n", "            throw new PdfAConformanceException(PdfaExceptionMessageConstant.NEEDAPPEARANCES_FLAG_OF_THE_INTERACTIVE_FORM_DICTIONARY_SHALL_EITHER_NOT_BE_PRESENTED_OR_SHALL_BE_FALSE);\n", "        }\n", "\n", "        checkResources(form.getAsDictionary(PdfName.DR), form);\n", "\n", "        PdfArray fields = form.getAsArray(PdfName.Fields);\n", "        if (fields != null) {\n", "            fields = getFormFields(fields);\n", "            for (PdfObject field : fields) {\n", "                PdfDictionary fieldDic = (PdfDictionary) field;\n", "                if (fieldDic.containsKey(PdfName.A) || fieldDic.containsKey(PdfName.AA)) {\n", "                    throw new PdfAConformanceException(PdfaExceptionMessageConstant.WIDGET_ANNOTATION_DICTIONARY_OR_FIELD_DICTIONARY_SHALL_NOT_INCLUDE_A_OR_AA_ENTRY);\n", "                }\n", "                checkResources(fieldDic.getAsDictionary(PdfName.DR), fieldDic);\n", "            }\n", "        }\n", "    }\n", "\n", "    @Override\n", "    protected void checkAction(PdfDictionary action) {\n", "        if (isAlreadyChecked(action)) return;\n", "\n", "        PdfName s = action.getAsName(PdfName.S);\n", "        if (getForbiddenActions().contains(s)) {\n", "            throw new PdfAConformanceException(PdfaExceptionMessageConstant._0_ACTIONS_ARE_NOT_ALLOWED).setMessageParams(s.getValue());\n", "        }\n", "        if (s.equals(PdfName.Named)) {\n", "            PdfName n = action.getAsName(PdfName.N);\n", "            if (n != null && !getAllowedNamedActions().contains(n)) {\n", "                throw new PdfAConformanceException(PdfaExceptionMessageConstant.NAMED_ACTION_TYPE_0_IS_NOT_ALLOWED).setMessageParams(n.getValue());\n", "            }\n", "        }\n", "        if (s.equals(PdfName.SetState) || s.equals(PdfName.NoOp)) {\n", "            throw new PdfAConformanceException(PdfaExceptionMessageConstant.DEPRECATED_SETSTATE_AND_NOOP_ACTIONS_ARE_NOT_ALLOWED);\n", "        }\n", "    }\n", "\n", "    /**\n", "     * {@inheritDoc}\n", "     */\n", "    @Override\n", "    protected void checkCatalog(PdfCatalog catalog) {\n", "        String pdfVersion = catalog.getDocument().getPdfVersion().toString();\n", "        if ('1' != pdfVersion.charAt(4) || ('1' > pdfVersion.charAt(6) || '7' < pdfVersion.charAt(6))) {\n", "            throw new PdfAConformanceException(\n", "                    MessageFormatUtil.format(PdfaExceptionMessageConstant.THE_FILE_HEADER_SHALL_CONTAIN_RIGHT_PDF_VERSION, \"1\"));\n", "        }\n", "    }\n", "\n", "    @Override\n", "    protected void checkCatalogValidEntries(PdfDictionary catalogDict) {\n", "        if (catalogDict.containsKey(PdfName.AA)) {\n", "            throw new PdfAConformanceException(PdfaExceptionMessageConstant.A_CATALOG_DICTIONARY_SHALL_NOT_CONTAIN_AA_ENTRY);\n", "        }\n", "        if (catalogDict.containsKey(PdfName.OCProperties)) {\n", "            throw new PdfAConformanceException(PdfaExceptionMessageConstant.A_CATALOG_DICTIONARY_SHALL_NOT_CONTAIN_OCPROPERTIES_KEY);\n", "        }\n", "        if (catalogDict.containsKey(PdfName.Names)) {\n", "            if (catalogDict.getAsDictionary(PdfName.Names).containsKey(PdfName.EmbeddedFiles)) {\n", "                throw new PdfAConformanceException(PdfaExceptionMessageConstant.A_NAME_DICTIONARY_SHALL_NOT_CONTAIN_THE_EMBEDDED_FILES_KEY);\n", "            }\n", "        }\n", "    }\n", "\n", "    @Override\n", "    protected void checkPageObject(PdfDictionary pageDict, PdfDictionary pageResources) {\n", "        PdfDictionary actions = pageDict.getAsDictionary(PdfName.AA);\n", "        if (actions != null) {\n", "            for (PdfName key : actions.keySet()) {\n", "                PdfDictionary action = actions.getAsDictionary(key);\n", "                checkAction(action);\n", "            }\n", "        }\n", "        if (isContainsTransparencyGroup(pageDict)) {\n", "            throw new PdfAConformanceException(PdfaExceptionMessageConstant.A_GROUP_OBJECT_WITH_AN_S_KEY_WITH_A_VALUE_OF_TRANSPARENCY_SHALL_NOT_BE_INCLUDED_IN_A_PAGE_XOBJECT);\n", "        }\n", "    }\n", "\n", "    @Override\n", "    protected void checkTrailer(PdfDictionary trailer) {\n", "    }\n", "\n", "    /**\n", "     * Gets a {@link PdfArray} of fields with kids from a {@link PdfArray} of {@link PdfDictionary} objects.\n", "     *\n", "     * @param array the {@link PdfArray} of form fields {@link PdfDictionary} objects\n", "     *\n", "     * @return the {@link PdfArray} of form fields\n", "     */\n", "    protected PdfArray getFormFields(PdfArray array) {\n", "        PdfArray fields = new PdfArray();\n", "        for (PdfObject field : array) {\n", "            PdfArray kids = ((PdfDictionary) field).getAsArray(PdfName.Kids);\n", "            fields.add(field);\n", "            if (kids != null) {\n", "                fields.addAll(getFormFields(kids));\n", "            }\n", "        }\n", "        return fields;\n", "    }\n", "\n", "    private int getMaxArrayCapacity() {\n", "        return 8191;\n", "    }\n", "\n", "    private int getMaxDictionaryCapacity() {\n", "        return 4095;\n", "    }\n", "\n", "    private static final class ACharacterChecker implements FontCheckUtil.CharacterChecker {\n", "        @Override\n", "        public boolean check(int ch, PdfFont font) {\n", "            return !font.containsGlyph(ch);\n", "        }\n", "    }\n", "}\n"], "test_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.pdfa.checker;\n", "\n", "import com.itextpdf.commons.utils.MessageFormatUtil;\n", "import com.itextpdf.kernel.colors.Color;\n", "import com.itextpdf.kernel.colors.PatternColor;\n", "import com.itextpdf.kernel.pdf.PdfAConformanceLevel;\n", "import com.itextpdf.kernel.pdf.PdfArray;\n", "import com.itextpdf.kernel.pdf.PdfBoolean;\n", "import com.itextpdf.kernel.pdf.PdfDictionary;\n", "import com.itextpdf.kernel.pdf.PdfName;\n", "import com.itextpdf.kernel.pdf.PdfNumber;\n", "import com.itextpdf.kernel.pdf.PdfStream;\n", "import com.itextpdf.kernel.pdf.colorspace.PdfPattern;\n", "import com.itextpdf.pdfa.exceptions.PdfAConformanceException;\n", "import com.itextpdf.pdfa.exceptions.PdfaExceptionMessageConstant;\n", "import com.itextpdf.test.AssertUtil;\n", "import com.itextpdf.test.ExtendedITextTest;\n", "import com.itextpdf.test.annotations.type.UnitTest;\n", "\n", "import org.junit.Assert;\n", "import org.junit.Before;\n", "import org.junit.Test;\n", "import org.junit.experimental.categories.Category;\n", "\n", "@Category(UnitTest.class)\n", "public class PdfA1CheckerTest extends ExtendedITextTest {\n", "\n", "    private PdfA1Checker pdfA1Checker = new PdfA1Checker(PdfAConformanceLevel.PDF_A_1B);\n", "\n", "    @Before\n", "    public void before() {\n", "        pdfA1Checker.setFullCheckMode(true);\n", "    }\n", "\n", "    @Test\n", "    public void checkCatalogDictionaryWithoutAAEntry() {\n", "        PdfDictionary catalog = new PdfDictionary();\n", "        catalog.put(PdfName.AA, new PdfDictionary());\n", "\n", "        Exception e = Assert.assertThrows(PdfAConformanceException.class,\n", "                () -> pdfA1Checker.checkCatalogValidEntries(catalog)\n", "        );\n", "        Assert.assertEquals(PdfaExceptionMessageConstant.A_CATALOG_DICTIONARY_SHALL_NOT_CONTAIN_AA_ENTRY, e.getMessage());\n", "    }\n", "\n", "    @Test\n", "    public void checkCatalogDictionaryWithoutOCPropertiesEntry() {\n", "        PdfDictionary catalog = new PdfDictionary();\n", "        catalog.put(PdfName.OCProperties, new PdfDictionary());\n", "\n", "        Exception e = Assert.assertThrows(PdfAConformanceException.class,\n", "                () -> pdfA1Checker.checkCatalogValidEntries(catalog)\n", "        );\n", "        Assert.assertEquals(PdfaExceptionMessageConstant.A_CATALOG_DICTIONARY_SHALL_NOT_CONTAIN_OCPROPERTIES_KEY, e.getMessage());\n", "    }\n", "\n", "    @Test\n", "    public void checkCatalogDictionaryWithoutEmbeddedFiles() {\n", "        PdfDictionary names = new PdfDictionary();\n", "        names.put(PdfName.EmbeddedFiles, new PdfDictionary());\n", "\n", "        PdfDictionary catalog = new PdfDictionary();\n", "        catalog.put(PdfName.Names, names);\n", "\n", "        Exception e = Assert.assertThrows(PdfAConformanceException.class,\n", "                () -> pdfA1Checker.checkCatalogValidEntries(catalog)\n", "        );\n", "        Assert.assertEquals(PdfaExceptionMessageConstant.A_NAME_DICTIONARY_SHALL_NOT_CONTAIN_THE_EMBEDDED_FILES_KEY, e.getMessage());\n", "    }\n", "\n", "    @Test\n", "    public void checkValidCatalog() {\n", "        pdfA1Checker.checkCatalogValidEntries(new PdfDictionary());\n", "\n", "        // checkCatalogValidEntries doesn't change the state of any object\n", "        // and doesn't return any value. The only result is exception which\n", "        // was or wasn't thrown. Successful scenario is tested here therefore\n", "        // no assertion is provided\n", "    }\n", "\n", "    @Test\n", "    public void deprecatedCheckColorShadingTest() {\n", "        PdfDictionary patternDict = new PdfDictionary();\n", "        patternDict.put(PdfName.ExtGState, new PdfDictionary());\n", "        PdfPattern.Shading pattern = new PdfPattern.Shading(patternDict);\n", "\n", "        PdfDictionary dictionary = new PdfDictionary();\n", "        dictionary.put(PdfName.ColorSpace, PdfName.DeviceCMYK);\n", "        pattern.setShading(dictionary);\n", "\n", "        Color color = new PatternColor(pattern);\n", "\n", "        AssertUtil.doesNotThrow(() -> {\n", "            pdfA1Checker.checkColor(color, new PdfDictionary(), true, null);\n", "        });\n", "    }\n", "\n", "    @Test\n", "    public void checkSignatureTest() {\n", "        PdfDictionary dict = new PdfDictionary();\n", "        pdfA1Checker.checkSignature(dict);\n", "        Assert.assertTrue(pdfA1Checker.objectIsChecked(dict));\n", "    }\n", "\n", "    @Test\n", "    public void checkSignatureTypeTest() {\n", "        pdfA1Checker.checkSignatureType(true);\n", "        //nothing to check, only for coverage\n", "    }\n", "\n", "    @Test\n", "    public void checkLZWDecodeInInlineImage() {\n", "        PdfStream stream = new PdfStream();\n", "        stream.put(PdfName.Filter, PdfName.LZWDecode);\n", "        Exception e = Assert.assertThrows(PdfAConformanceException.class,\n", "                () -> pdfA1Checker.checkInlineImage(stream, null)\n", "        );\n", "        Assert.assertEquals(PdfaExceptionMessageConstant.LZWDECODE_FILTER_IS_NOT_PERMITTED, e.getMessage());\n", "    }\n", "\n", "    @Test\n", "    public void checkLZWDecodeArrayInInlineImage() {\n", "        PdfStream stream = new PdfStream();\n", "        PdfArray array = new PdfArray();\n", "        array.add(PdfName.LZWDecode);\n", "        stream.put(PdfName.Filter, array);\n", "        Exception e = Assert.assertThrows(PdfAConformanceException.class,\n", "                () -> pdfA1Checker.checkInlineImage(stream, null)\n", "        );\n", "        Assert.assertEquals(PdfaExceptionMessageConstant.LZWDECODE_FILTER_IS_NOT_PERMITTED, e.getMessage());\n", "    }\n", "\n", "    @Test\n", "    public void checkEmptyImageTwiceTest() {\n", "        PdfStream image = new PdfStream();\n", "        pdfA1Checker.checkImage(image, null);\n", "        pdfA1Checker.checkImage(image, null);\n", "        //nothing to check, expecting that no error is thrown\n", "    }\n", "\n", "    @Test\n", "    public void checkImageWithAlternateTest() {\n", "        PdfStream image = new PdfStream();\n", "        image.put(PdfName.Alternates, PdfName.Identity);\n", "        Exception e = Assert.assertThrows(PdfAConformanceException.class,\n", "                () -> pdfA1Checker.checkImage(image, null)\n", "        );\n", "        Assert.assertEquals(PdfaExceptionMessageConstant.AN_IMAGE_DICTIONARY_SHALL_NOT_CONTAIN_ALTERNATES_KEY, e.getMessage());\n", "    }\n", "\n", "    @Test\n", "    public void checkImageWithOPITest() {\n", "        PdfStream image = new PdfStream();\n", "        image.put(PdfName.OPI, PdfName.Identity);\n", "        Exception e = Assert.assertThrows(PdfAConformanceException.class,\n", "                () -> pdfA1Checker.checkImage(image, null)\n", "        );\n", "        Assert.assertEquals(PdfaExceptionMessageConstant.AN_IMAGE_DICTIONARY_SHALL_NOT_CONTAIN_OPI_KEY, e.getMessage());\n", "    }\n", "\n", "    @Test\n", "    public void checkImageWithInterpolateTest() {\n", "        PdfStream image = new PdfStream();\n", "        image.put(PdfName.Interpolate, new PdfBoolean(true));\n", "        Exception e = Assert.assertThrows(PdfAConformanceException.class,\n", "                () -> pdfA1Checker.checkImage(image, null)\n", "        );\n", "        Assert.assertEquals(PdfaExceptionMessageConstant.THE_VALUE_OF_INTERPOLATE_KEY_SHALL_BE_FALSE, e.getMessage());\n", "    }\n", "\n", "    @Test\n", "    public void checkImageWithSMaskTest() {\n", "        PdfStream image = new PdfStream();\n", "        image.put(PdfName.SMask, PdfName.Identity);\n", "        Exception e = Assert.assertThrows(PdfAConformanceException.class,\n", "                () -> pdfA1Checker.checkImage(image, null)\n", "        );\n", "        Assert.assertEquals(PdfaExceptionMessageConstant.THE_SMASK_KEY_IS_NOT_ALLOWED_IN_XOBJECTS, e.getMessage());\n", "    }\n", "\n", "    @Test\n", "    public void checkFormXObjectWithOPITest() {\n", "        PdfStream form = new PdfStream();\n", "        form.put(PdfName.OPI, PdfName.Identity);\n", "        Exception e = Assert.assertThrows(PdfAConformanceException.class,\n", "                () -> pdfA1Checker.checkFormXObject(form)\n", "        );\n", "        Assert.assertEquals(PdfaExceptionMessageConstant.A_FORM_XOBJECT_DICTIONARY_SHALL_NOT_CONTAIN_OPI_KEY, e.getMessage());\n", "    }\n", "\n", "    @Test\n", "    public void checkFormXObjectWithPSTest() {\n", "        PdfStream form = new PdfStream();\n", "        form.put(PdfName.PS, PdfName.Identity);\n", "        Exception e = Assert.assertThrows(PdfAConformanceException.class,\n", "                () -> pdfA1Checker.checkFormXObject(form)\n", "        );\n", "        Assert.assertEquals(PdfaExceptionMessageConstant.A_FORM_XOBJECT_DICTIONARY_SHALL_NOT_CONTAIN_PS_KEY, e.getMessage());\n", "    }\n", "\n", "    @Test\n", "    public void checkFormXObjectWithSubtype2PSTest() {\n", "        PdfStream form = new PdfStream();\n", "        form.put(PdfName.Subtype2, PdfName.PS);\n", "        Exception e = Assert.assertThrows(PdfAConformanceException.class,\n", "                () -> pdfA1Checker.checkFormXObject(form)\n", "        );\n", "        Assert.assertEquals(PdfaExceptionMessageConstant.A_FORM_XOBJECT_DICTIONARY_SHALL_NOT_CONTAIN_SUBTYPE2_KEY_WITH_A_VALUE_OF_PS, e.getMessage());\n", "    }\n", "\n", "    @Test\n", "    public void checkFormXObjectWithSMaskTest() {\n", "        PdfStream form = new PdfStream();\n", "        form.put(PdfName.SMask, PdfName.Identity);\n", "        Exception e = Assert.assertThrows(PdfAConformanceException.class,\n", "                () -> pdfA1Checker.checkFormXObject(form)\n", "        );\n", "        Assert.assertEquals(PdfaExceptionMessageConstant.THE_SMASK_KEY_IS_NOT_ALLOWED_IN_XOBJECTS, e.getMessage());\n", "    }\n", "\n", "    @Test\n", "    public void checkCatalogContainsMetadataTest() {\n", "        PdfDictionary catalog = new PdfDictionary();\n", "        Exception e = Assert.assertThrows(PdfAConformanceException.class,\n", "                () -> pdfA1Checker.checkMetaData(catalog)\n", "        );\n", "        Assert.assertEquals(PdfaExceptionMessageConstant.A_CATALOG_DICTIONARY_SHALL_CONTAIN_METADATA_ENTRY, e.getMessage());\n", "    }\n", "\n", "    @Test\n", "    public void checkOutputIntentsTest() {\n", "        PdfDictionary catalog = new PdfDictionary();\n", "        PdfArray array = new PdfArray();\n", "        PdfDictionary dictionary = new PdfDictionary();\n", "        dictionary.put(PdfName.DestOutputProfile, PdfName.Identity);\n", "        PdfDictionary dictionary2 = new PdfDictionary();\n", "        dictionary2.put(PdfName.DestOutputProfile, PdfName.Crypt);\n", "        array.add(dictionary);\n", "        array.add(dictionary2);\n", "        catalog.put(PdfName.OutputIntents, array);\n", "        Exception e = Assert.assertThrows(PdfAConformanceException.class,\n", "                () -> pdfA1Checker.checkOutputIntents(catalog)\n", "        );\n", "        Assert.assertEquals(PdfaExceptionMessageConstant.IF_OUTPUTINTENTS_ARRAY_HAS_MORE_THAN_ONE_ENTRY_WITH_DESTOUTPUTPROFILE_KEY_THE_SAME_INDIRECT_OBJECT_SHALL_BE_USED_AS_THE_VALUE_OF_THAT_OBJECT, e.getMessage());\n", "        //nothing to check, expecting that no error is thrown\n", "    }\n", "\n", "    @Test\n", "    public void checkLZWDecodeInPdfStreamTest() {\n", "        PdfStream stream = new PdfStream();\n", "        stream.put(PdfName.Filter, PdfName.LZWDecode);\n", "        Exception e = Assert.assertThrows(PdfAConformanceException.class,\n", "                () -> pdfA1Checker.checkPdfStream(stream)\n", "        );\n", "        Assert.assertEquals(PdfaExceptionMessageConstant.LZWDECODE_FILTER_IS_NOT_PERMITTED, e.getMessage());\n", "    }\n", "\n", "    @Test\n", "    public void checkLZWDecodeInPdfStreamArrayTest() {\n", "        PdfStream stream = new PdfStream();\n", "        PdfArray array = new PdfArray();\n", "        array.add(PdfName.LZWDecode);\n", "        stream.put(PdfName.Filter, array);\n", "        Exception e = Assert.assertThrows(PdfAConformanceException.class,\n", "                () -> pdfA1Checker.checkPdfStream(stream)\n", "        );\n", "        Assert.assertEquals(PdfaExceptionMessageConstant.LZWDECODE_FILTER_IS_NOT_PERMITTED, e.getMessage());\n", "    }\n", "\n", "    @Test\n", "    public void checkFileSpecTest() {\n", "        pdfA1Checker.checkFileSpec(new PdfDictionary());\n", "        //nothing to check, only for coverage\n", "    }\n", "\n", "    @Test\n", "    public void checkEmptyAnnotationTest() {\n", "        PdfDictionary annotation = new PdfDictionary();\n", "        Exception e = Assert.assertThrows(PdfAConformanceException.class,\n", "                () -> pdfA1Checker.checkAnnotation(annotation)\n", "        );\n", "        Assert.assertEquals(MessageFormatUtil.format(PdfaExceptionMessageConstant.ANNOTATION_TYPE_0_IS_NOT_PERMITTED, \"null\"), e.getMessage());\n", "    }\n", "\n", "    @Test\n", "    public void checkAnnotationWithoutFKeyTest() {\n", "        PdfDictionary annotation = new PdfDictionary();\n", "        annotation.put(PdfName.Subtype, PdfName.Identity);\n", "        Exception e = Assert.assertThrows(PdfAConformanceException.class,\n", "                () -> pdfA1Checker.checkAnnotation(annotation)\n", "        );\n", "        Assert.assertEquals(MessageFormatUtil.format(PdfaExceptionMessageConstant.AN_ANNOTATION_DICTIONARY_SHALL_CONTAIN_THE_F_KEY, \"null\"), e.getMessage());\n", "    }\n", "}\n"], "method_lines_dic": {"PdfA1Checker::::checkCanvasStack(char)": [128, 136], "PdfA1Checker::::getForbiddenActions()": [221, 224], "PdfA1Checker::::getAllowedNamedActions()": [226, 229], "PdfA1Checker::::getMaxNumberOfIndirectObjects()": [231, 234], "PdfA1Checker::::checkColorsUsages()": [239, 242], "PdfA1Checker::::checkSignatureType(boolean)": [355, 358], "PdfA1Checker::::getMaxRealValue()": [535, 537], "PdfA1Checker::::getMaxIntegerValue()": [543, 545], "PdfA1Checker::::getMinIntegerValue()": [551, 553], "PdfA1Checker::::getMaxNameLength()": [601, 603], "PdfA1Checker::::getMaxStringLength()": [617, 619], "PdfA1Checker::::getForbiddenAnnotations()": [707, 709], "PdfA1Checker::::getMaxArrayCapacity()": [819, 821], "PdfA1Checker::::getMaxDictionaryCapacity()": [823, 825]}, "test_method_lines_dic": {"PdfA1CheckerTest::::before()": [52, 55], "PdfA1CheckerTest::::checkCatalogDictionaryWithoutAAEntry()": [57, 66], "PdfA1CheckerTest::::checkCatalogDictionaryWithoutOCPropertiesEntry()": [68, 77], "PdfA1CheckerTest::::checkCatalogDictionaryWithoutEmbeddedFiles()": [79, 91], "PdfA1CheckerTest::::checkValidCatalog()": [93, 101], "PdfA1CheckerTest::::deprecatedCheckColorShadingTest()": [103, 118], "PdfA1CheckerTest::::checkSignatureTest()": [120, 125], "PdfA1CheckerTest::::checkSignatureTypeTest()": [127, 131], "PdfA1CheckerTest::::checkLZWDecodeInInlineImage()": [133, 141], "PdfA1CheckerTest::::checkLZWDecodeArrayInInlineImage()": [143, 153], "PdfA1CheckerTest::::checkEmptyImageTwiceTest()": [155, 161], "PdfA1CheckerTest::::checkImageWithAlternateTest()": [163, 171], "PdfA1CheckerTest::::checkImageWithOPITest()": [173, 181], "PdfA1CheckerTest::::checkImageWithInterpolateTest()": [183, 191], "PdfA1CheckerTest::::checkImageWithSMaskTest()": [193, 201], "PdfA1CheckerTest::::checkFormXObjectWithOPITest()": [203, 211], "PdfA1CheckerTest::::checkFormXObjectWithPSTest()": [213, 221], "PdfA1CheckerTest::::checkFormXObjectWithSubtype2PSTest()": [223, 231], "PdfA1CheckerTest::::checkFormXObjectWithSMaskTest()": [233, 241], "PdfA1CheckerTest::::checkCatalogContainsMetadataTest()": [243, 250], "PdfA1CheckerTest::::checkOutputIntentsTest()": [252, 268], "PdfA1CheckerTest::::checkLZWDecodeInPdfStreamTest()": [270, 278], "PdfA1CheckerTest::::checkLZWDecodeInPdfStreamArrayTest()": [280, 290], "PdfA1CheckerTest::::checkFileSpecTest()": [292, 296], "PdfA1CheckerTest::::checkEmptyAnnotationTest()": [298, 305], "PdfA1CheckerTest::::checkAnnotationWithoutFKeyTest()": [307, 315]}, "reverse_method_lines_dic": {"128": "PdfA1Checker::::checkCanvasStack(char)", "129": "PdfA1Checker::::checkCanvasStack(char)", "130": "PdfA1Checker::::checkCanvasStack(char)", "131": "PdfA1Checker::::checkCanvasStack(char)", "132": "PdfA1Checker::::checkCanvasStack(char)", "133": "PdfA1Checker::::checkCanvasStack(char)", "134": "PdfA1Checker::::checkCanvasStack(char)", "135": "PdfA1Checker::::checkCanvasStack(char)", "136": "PdfA1Checker::::checkCanvasStack(char)", "221": "PdfA1Checker::::getForbiddenActions()", "222": "PdfA1Checker::::getForbiddenActions()", "223": "PdfA1Checker::::getForbiddenActions()", "224": "PdfA1Checker::::getForbiddenActions()", "226": "PdfA1Checker::::getAllowedNamedActions()", "227": "PdfA1Checker::::getAllowedNamedActions()", "228": "PdfA1Checker::::getAllowedNamedActions()", "229": "PdfA1Checker::::getAllowedNamedActions()", "231": "PdfA1Checker::::getMaxNumberOfIndirectObjects()", "232": "PdfA1Checker::::getMaxNumberOfIndirectObjects()", "233": "PdfA1Checker::::getMaxNumberOfIndirectObjects()", "234": "PdfA1Checker::::getMaxNumberOfIndirectObjects()", "239": "PdfA1Checker::::checkColorsUsages()", "240": "PdfA1Checker::::checkColorsUsages()", "241": "PdfA1Checker::::checkColorsUsages()", "242": "PdfA1Checker::::checkColorsUsages()", "355": "PdfA1Checker::::checkSignatureType(boolean)", "356": "PdfA1Checker::::checkSignatureType(boolean)", "357": "PdfA1Checker::::checkSignatureType(boolean)", "358": "PdfA1Checker::::checkSignatureType(boolean)", "535": "PdfA1Checker::::getMaxRealValue()", "536": "PdfA1Checker::::getMaxRealValue()", "537": "PdfA1Checker::::getMaxRealValue()", "543": "PdfA1Checker::::getMaxIntegerValue()", "544": "PdfA1Checker::::getMaxIntegerValue()", "545": "PdfA1Checker::::getMaxIntegerValue()", "551": "PdfA1Checker::::getMinIntegerValue()", "552": "PdfA1Checker::::getMinIntegerValue()", "553": "PdfA1Checker::::getMinIntegerValue()", "601": "PdfA1Checker::::getMaxNameLength()", "602": "PdfA1Checker::::getMaxNameLength()", "603": "PdfA1Checker::::getMaxNameLength()", "617": "PdfA1Checker::::getMaxStringLength()", "618": "PdfA1Checker::::getMaxStringLength()", "619": "PdfA1Checker::::getMaxStringLength()", "707": "PdfA1Checker::::getForbiddenAnnotations()", "708": "PdfA1Checker::::getForbiddenAnnotations()", "709": "PdfA1Checker::::getForbiddenAnnotations()", "819": "PdfA1Checker::::getMaxArrayCapacity()", "820": "PdfA1Checker::::getMaxArrayCapacity()", "821": "PdfA1Checker::::getMaxArrayCapacity()", "823": "PdfA1Checker::::getMaxDictionaryCapacity()", "824": "PdfA1Checker::::getMaxDictionaryCapacity()", "825": "PdfA1Checker::::getMaxDictionaryCapacity()"}, "test_reverse_method_lines_dic": {"52": "PdfA1CheckerTest::::before()", "53": "PdfA1CheckerTest::::before()", "54": "PdfA1CheckerTest::::before()", "55": "PdfA1CheckerTest::::before()", "57": "PdfA1CheckerTest::::checkCatalogDictionaryWithoutAAEntry()", "58": "PdfA1CheckerTest::::checkCatalogDictionaryWithoutAAEntry()", "59": "PdfA1CheckerTest::::checkCatalogDictionaryWithoutAAEntry()", "60": "PdfA1CheckerTest::::checkCatalogDictionaryWithoutAAEntry()", "61": "PdfA1CheckerTest::::checkCatalogDictionaryWithoutAAEntry()", "62": "PdfA1CheckerTest::::checkCatalogDictionaryWithoutAAEntry()", "63": "PdfA1CheckerTest::::checkCatalogDictionaryWithoutAAEntry()", "64": "PdfA1CheckerTest::::checkCatalogDictionaryWithoutAAEntry()", "65": "PdfA1CheckerTest::::checkCatalogDictionaryWithoutAAEntry()", "66": "PdfA1CheckerTest::::checkCatalogDictionaryWithoutAAEntry()", "68": "PdfA1CheckerTest::::checkCatalogDictionaryWithoutOCPropertiesEntry()", "69": "PdfA1CheckerTest::::checkCatalogDictionaryWithoutOCPropertiesEntry()", "70": "PdfA1CheckerTest::::checkCatalogDictionaryWithoutOCPropertiesEntry()", "71": "PdfA1CheckerTest::::checkCatalogDictionaryWithoutOCPropertiesEntry()", "72": "PdfA1CheckerTest::::checkCatalogDictionaryWithoutOCPropertiesEntry()", "73": "PdfA1CheckerTest::::checkCatalogDictionaryWithoutOCPropertiesEntry()", "74": "PdfA1CheckerTest::::checkCatalogDictionaryWithoutOCPropertiesEntry()", "75": "PdfA1CheckerTest::::checkCatalogDictionaryWithoutOCPropertiesEntry()", "76": "PdfA1CheckerTest::::checkCatalogDictionaryWithoutOCPropertiesEntry()", "77": "PdfA1CheckerTest::::checkCatalogDictionaryWithoutOCPropertiesEntry()", "79": "PdfA1CheckerTest::::checkCatalogDictionaryWithoutEmbeddedFiles()", "80": "PdfA1CheckerTest::::checkCatalogDictionaryWithoutEmbeddedFiles()", "81": "PdfA1CheckerTest::::checkCatalogDictionaryWithoutEmbeddedFiles()", "82": "PdfA1CheckerTest::::checkCatalogDictionaryWithoutEmbeddedFiles()", "83": "PdfA1CheckerTest::::checkCatalogDictionaryWithoutEmbeddedFiles()", "84": "PdfA1CheckerTest::::checkCatalogDictionaryWithoutEmbeddedFiles()", "85": "PdfA1CheckerTest::::checkCatalogDictionaryWithoutEmbeddedFiles()", "86": "PdfA1CheckerTest::::checkCatalogDictionaryWithoutEmbeddedFiles()", "87": "PdfA1CheckerTest::::checkCatalogDictionaryWithoutEmbeddedFiles()", "88": "PdfA1CheckerTest::::checkCatalogDictionaryWithoutEmbeddedFiles()", "89": "PdfA1CheckerTest::::checkCatalogDictionaryWithoutEmbeddedFiles()", "90": "PdfA1CheckerTest::::checkCatalogDictionaryWithoutEmbeddedFiles()", "91": "PdfA1CheckerTest::::checkCatalogDictionaryWithoutEmbeddedFiles()", "93": "PdfA1CheckerTest::::checkValidCatalog()", "94": "PdfA1CheckerTest::::checkValidCatalog()", "95": "PdfA1CheckerTest::::checkValidCatalog()", "96": "PdfA1CheckerTest::::checkValidCatalog()", "97": "PdfA1CheckerTest::::checkValidCatalog()", "98": "PdfA1CheckerTest::::checkValidCatalog()", "99": "PdfA1CheckerTest::::checkValidCatalog()", "100": "PdfA1CheckerTest::::checkValidCatalog()", "101": "PdfA1CheckerTest::::checkValidCatalog()", "103": "PdfA1CheckerTest::::deprecatedCheckColorShadingTest()", "104": "PdfA1CheckerTest::::deprecatedCheckColorShadingTest()", "105": "PdfA1CheckerTest::::deprecatedCheckColorShadingTest()", "106": "PdfA1CheckerTest::::deprecatedCheckColorShadingTest()", "107": "PdfA1CheckerTest::::deprecatedCheckColorShadingTest()", "108": "PdfA1CheckerTest::::deprecatedCheckColorShadingTest()", "109": "PdfA1CheckerTest::::deprecatedCheckColorShadingTest()", "110": "PdfA1CheckerTest::::deprecatedCheckColorShadingTest()", "111": "PdfA1CheckerTest::::deprecatedCheckColorShadingTest()", "112": "PdfA1CheckerTest::::deprecatedCheckColorShadingTest()", "113": "PdfA1CheckerTest::::deprecatedCheckColorShadingTest()", "114": "PdfA1CheckerTest::::deprecatedCheckColorShadingTest()", "115": "PdfA1CheckerTest::::deprecatedCheckColorShadingTest()", "116": "PdfA1CheckerTest::::deprecatedCheckColorShadingTest()", "117": "PdfA1CheckerTest::::deprecatedCheckColorShadingTest()", "118": "PdfA1CheckerTest::::deprecatedCheckColorShadingTest()", "120": "PdfA1CheckerTest::::checkSignatureTest()", "121": "PdfA1CheckerTest::::checkSignatureTest()", "122": "PdfA1CheckerTest::::checkSignatureTest()", "123": "PdfA1CheckerTest::::checkSignatureTest()", "124": "PdfA1CheckerTest::::checkSignatureTest()", "125": "PdfA1CheckerTest::::checkSignatureTest()", "127": "PdfA1CheckerTest::::checkSignatureTypeTest()", "128": "PdfA1CheckerTest::::checkSignatureTypeTest()", "129": "PdfA1CheckerTest::::checkSignatureTypeTest()", "130": "PdfA1CheckerTest::::checkSignatureTypeTest()", "131": "PdfA1CheckerTest::::checkSignatureTypeTest()", "133": "PdfA1CheckerTest::::checkLZWDecodeInInlineImage()", "134": "PdfA1CheckerTest::::checkLZWDecodeInInlineImage()", "135": "PdfA1CheckerTest::::checkLZWDecodeInInlineImage()", "136": "PdfA1CheckerTest::::checkLZWDecodeInInlineImage()", "137": "PdfA1CheckerTest::::checkLZWDecodeInInlineImage()", "138": "PdfA1CheckerTest::::checkLZWDecodeInInlineImage()", "139": "PdfA1CheckerTest::::checkLZWDecodeInInlineImage()", "140": "PdfA1CheckerTest::::checkLZWDecodeInInlineImage()", "141": "PdfA1CheckerTest::::checkLZWDecodeInInlineImage()", "143": "PdfA1CheckerTest::::checkLZWDecodeArrayInInlineImage()", "144": "PdfA1CheckerTest::::checkLZWDecodeArrayInInlineImage()", "145": "PdfA1CheckerTest::::checkLZWDecodeArrayInInlineImage()", "146": "PdfA1CheckerTest::::checkLZWDecodeArrayInInlineImage()", "147": "PdfA1CheckerTest::::checkLZWDecodeArrayInInlineImage()", "148": "PdfA1CheckerTest::::checkLZWDecodeArrayInInlineImage()", "149": "PdfA1CheckerTest::::checkLZWDecodeArrayInInlineImage()", "150": "PdfA1CheckerTest::::checkLZWDecodeArrayInInlineImage()", "151": "PdfA1CheckerTest::::checkLZWDecodeArrayInInlineImage()", "152": "PdfA1CheckerTest::::checkLZWDecodeArrayInInlineImage()", "153": "PdfA1CheckerTest::::checkLZWDecodeArrayInInlineImage()", "155": "PdfA1CheckerTest::::checkEmptyImageTwiceTest()", "156": "PdfA1CheckerTest::::checkEmptyImageTwiceTest()", "157": "PdfA1CheckerTest::::checkEmptyImageTwiceTest()", "158": "PdfA1CheckerTest::::checkEmptyImageTwiceTest()", "159": "PdfA1CheckerTest::::checkEmptyImageTwiceTest()", "160": "PdfA1CheckerTest::::checkEmptyImageTwiceTest()", "161": "PdfA1CheckerTest::::checkEmptyImageTwiceTest()", "163": "PdfA1CheckerTest::::checkImageWithAlternateTest()", "164": "PdfA1CheckerTest::::checkImageWithAlternateTest()", "165": "PdfA1CheckerTest::::checkImageWithAlternateTest()", "166": "PdfA1CheckerTest::::checkImageWithAlternateTest()", "167": "PdfA1CheckerTest::::checkImageWithAlternateTest()", "168": "PdfA1CheckerTest::::checkImageWithAlternateTest()", "169": "PdfA1CheckerTest::::checkImageWithAlternateTest()", "170": "PdfA1CheckerTest::::checkImageWithAlternateTest()", "171": "PdfA1CheckerTest::::checkImageWithAlternateTest()", "173": "PdfA1CheckerTest::::checkImageWithOPITest()", "174": "PdfA1CheckerTest::::checkImageWithOPITest()", "175": "PdfA1CheckerTest::::checkImageWithOPITest()", "176": "PdfA1CheckerTest::::checkImageWithOPITest()", "177": "PdfA1CheckerTest::::checkImageWithOPITest()", "178": "PdfA1CheckerTest::::checkImageWithOPITest()", "179": "PdfA1CheckerTest::::checkImageWithOPITest()", "180": "PdfA1CheckerTest::::checkImageWithOPITest()", "181": "PdfA1CheckerTest::::checkImageWithOPITest()", "183": "PdfA1CheckerTest::::checkImageWithInterpolateTest()", "184": "PdfA1CheckerTest::::checkImageWithInterpolateTest()", "185": "PdfA1CheckerTest::::checkImageWithInterpolateTest()", "186": "PdfA1CheckerTest::::checkImageWithInterpolateTest()", "187": "PdfA1CheckerTest::::checkImageWithInterpolateTest()", "188": "PdfA1CheckerTest::::checkImageWithInterpolateTest()", "189": "PdfA1CheckerTest::::checkImageWithInterpolateTest()", "190": "PdfA1CheckerTest::::checkImageWithInterpolateTest()", "191": "PdfA1CheckerTest::::checkImageWithInterpolateTest()", "193": "PdfA1CheckerTest::::checkImageWithSMaskTest()", "194": "PdfA1CheckerTest::::checkImageWithSMaskTest()", "195": "PdfA1CheckerTest::::checkImageWithSMaskTest()", "196": "PdfA1CheckerTest::::checkImageWithSMaskTest()", "197": "PdfA1CheckerTest::::checkImageWithSMaskTest()", "198": "PdfA1CheckerTest::::checkImageWithSMaskTest()", "199": "PdfA1CheckerTest::::checkImageWithSMaskTest()", "200": "PdfA1CheckerTest::::checkImageWithSMaskTest()", "201": "PdfA1CheckerTest::::checkImageWithSMaskTest()", "203": "PdfA1CheckerTest::::checkFormXObjectWithOPITest()", "204": "PdfA1CheckerTest::::checkFormXObjectWithOPITest()", "205": "PdfA1CheckerTest::::checkFormXObjectWithOPITest()", "206": "PdfA1CheckerTest::::checkFormXObjectWithOPITest()", "207": "PdfA1CheckerTest::::checkFormXObjectWithOPITest()", "208": "PdfA1CheckerTest::::checkFormXObjectWithOPITest()", "209": "PdfA1CheckerTest::::checkFormXObjectWithOPITest()", "210": "PdfA1CheckerTest::::checkFormXObjectWithOPITest()", "211": "PdfA1CheckerTest::::checkFormXObjectWithOPITest()", "213": "PdfA1CheckerTest::::checkFormXObjectWithPSTest()", "214": "PdfA1CheckerTest::::checkFormXObjectWithPSTest()", "215": "PdfA1CheckerTest::::checkFormXObjectWithPSTest()", "216": "PdfA1CheckerTest::::checkFormXObjectWithPSTest()", "217": "PdfA1CheckerTest::::checkFormXObjectWithPSTest()", "218": "PdfA1CheckerTest::::checkFormXObjectWithPSTest()", "219": "PdfA1CheckerTest::::checkFormXObjectWithPSTest()", "220": "PdfA1CheckerTest::::checkFormXObjectWithPSTest()", "221": "PdfA1CheckerTest::::checkFormXObjectWithPSTest()", "223": "PdfA1CheckerTest::::checkFormXObjectWithSubtype2PSTest()", "224": "PdfA1CheckerTest::::checkFormXObjectWithSubtype2PSTest()", "225": "PdfA1CheckerTest::::checkFormXObjectWithSubtype2PSTest()", "226": "PdfA1CheckerTest::::checkFormXObjectWithSubtype2PSTest()", "227": "PdfA1CheckerTest::::checkFormXObjectWithSubtype2PSTest()", "228": "PdfA1CheckerTest::::checkFormXObjectWithSubtype2PSTest()", "229": "PdfA1CheckerTest::::checkFormXObjectWithSubtype2PSTest()", "230": "PdfA1CheckerTest::::checkFormXObjectWithSubtype2PSTest()", "231": "PdfA1CheckerTest::::checkFormXObjectWithSubtype2PSTest()", "233": "PdfA1CheckerTest::::checkFormXObjectWithSMaskTest()", "234": "PdfA1CheckerTest::::checkFormXObjectWithSMaskTest()", "235": "PdfA1CheckerTest::::checkFormXObjectWithSMaskTest()", "236": "PdfA1CheckerTest::::checkFormXObjectWithSMaskTest()", "237": "PdfA1CheckerTest::::checkFormXObjectWithSMaskTest()", "238": "PdfA1CheckerTest::::checkFormXObjectWithSMaskTest()", "239": "PdfA1CheckerTest::::checkFormXObjectWithSMaskTest()", "240": "PdfA1CheckerTest::::checkFormXObjectWithSMaskTest()", "241": "PdfA1CheckerTest::::checkFormXObjectWithSMaskTest()", "243": "PdfA1CheckerTest::::checkCatalogContainsMetadataTest()", "244": "PdfA1CheckerTest::::checkCatalogContainsMetadataTest()", "245": "PdfA1CheckerTest::::checkCatalogContainsMetadataTest()", "246": "PdfA1CheckerTest::::checkCatalogContainsMetadataTest()", "247": "PdfA1CheckerTest::::checkCatalogContainsMetadataTest()", "248": "PdfA1CheckerTest::::checkCatalogContainsMetadataTest()", "249": "PdfA1CheckerTest::::checkCatalogContainsMetadataTest()", "250": "PdfA1CheckerTest::::checkCatalogContainsMetadataTest()", "252": "PdfA1CheckerTest::::checkOutputIntentsTest()", "253": "PdfA1CheckerTest::::checkOutputIntentsTest()", "254": "PdfA1CheckerTest::::checkOutputIntentsTest()", "255": "PdfA1CheckerTest::::checkOutputIntentsTest()", "256": "PdfA1CheckerTest::::checkOutputIntentsTest()", "257": "PdfA1CheckerTest::::checkOutputIntentsTest()", "258": "PdfA1CheckerTest::::checkOutputIntentsTest()", "259": "PdfA1CheckerTest::::checkOutputIntentsTest()", "260": "PdfA1CheckerTest::::checkOutputIntentsTest()", "261": "PdfA1CheckerTest::::checkOutputIntentsTest()", "262": "PdfA1CheckerTest::::checkOutputIntentsTest()", "263": "PdfA1CheckerTest::::checkOutputIntentsTest()", "264": "PdfA1CheckerTest::::checkOutputIntentsTest()", "265": "PdfA1CheckerTest::::checkOutputIntentsTest()", "266": "PdfA1CheckerTest::::checkOutputIntentsTest()", "267": "PdfA1CheckerTest::::checkOutputIntentsTest()", "268": "PdfA1CheckerTest::::checkOutputIntentsTest()", "270": "PdfA1CheckerTest::::checkLZWDecodeInPdfStreamTest()", "271": "PdfA1CheckerTest::::checkLZWDecodeInPdfStreamTest()", "272": "PdfA1CheckerTest::::checkLZWDecodeInPdfStreamTest()", "273": "PdfA1CheckerTest::::checkLZWDecodeInPdfStreamTest()", "274": "PdfA1CheckerTest::::checkLZWDecodeInPdfStreamTest()", "275": "PdfA1CheckerTest::::checkLZWDecodeInPdfStreamTest()", "276": "PdfA1CheckerTest::::checkLZWDecodeInPdfStreamTest()", "277": "PdfA1CheckerTest::::checkLZWDecodeInPdfStreamTest()", "278": "PdfA1CheckerTest::::checkLZWDecodeInPdfStreamTest()", "280": "PdfA1CheckerTest::::checkLZWDecodeInPdfStreamArrayTest()", "281": "PdfA1CheckerTest::::checkLZWDecodeInPdfStreamArrayTest()", "282": "PdfA1CheckerTest::::checkLZWDecodeInPdfStreamArrayTest()", "283": "PdfA1CheckerTest::::checkLZWDecodeInPdfStreamArrayTest()", "284": "PdfA1CheckerTest::::checkLZWDecodeInPdfStreamArrayTest()", "285": "PdfA1CheckerTest::::checkLZWDecodeInPdfStreamArrayTest()", "286": "PdfA1CheckerTest::::checkLZWDecodeInPdfStreamArrayTest()", "287": "PdfA1CheckerTest::::checkLZWDecodeInPdfStreamArrayTest()", "288": "PdfA1CheckerTest::::checkLZWDecodeInPdfStreamArrayTest()", "289": "PdfA1CheckerTest::::checkLZWDecodeInPdfStreamArrayTest()", "290": "PdfA1CheckerTest::::checkLZWDecodeInPdfStreamArrayTest()", "292": "PdfA1CheckerTest::::checkFileSpecTest()", "293": "PdfA1CheckerTest::::checkFileSpecTest()", "294": "PdfA1CheckerTest::::checkFileSpecTest()", "295": "PdfA1CheckerTest::::checkFileSpecTest()", "296": "PdfA1CheckerTest::::checkFileSpecTest()", "298": "PdfA1CheckerTest::::checkEmptyAnnotationTest()", "299": "PdfA1CheckerTest::::checkEmptyAnnotationTest()", "300": "PdfA1CheckerTest::::checkEmptyAnnotationTest()", "301": "PdfA1CheckerTest::::checkEmptyAnnotationTest()", "302": "PdfA1CheckerTest::::checkEmptyAnnotationTest()", "303": "PdfA1CheckerTest::::checkEmptyAnnotationTest()", "304": "PdfA1CheckerTest::::checkEmptyAnnotationTest()", "305": "PdfA1CheckerTest::::checkEmptyAnnotationTest()", "307": "PdfA1CheckerTest::::checkAnnotationWithoutFKeyTest()", "308": "PdfA1CheckerTest::::checkAnnotationWithoutFKeyTest()", "309": "PdfA1CheckerTest::::checkAnnotationWithoutFKeyTest()", "310": "PdfA1CheckerTest::::checkAnnotationWithoutFKeyTest()", "311": "PdfA1CheckerTest::::checkAnnotationWithoutFKeyTest()", "312": "PdfA1CheckerTest::::checkAnnotationWithoutFKeyTest()", "313": "PdfA1CheckerTest::::checkAnnotationWithoutFKeyTest()", "314": "PdfA1CheckerTest::::checkAnnotationWithoutFKeyTest()", "315": "PdfA1CheckerTest::::checkAnnotationWithoutFKeyTest()"}, "tests": [{"test_lines": [57, 66], "covered_lines": [78, 79, 83, 84, 93, 94, 102, 103, 108, 109, 116, 125, 126, 769, 770]}, {"test_lines": [68, 77], "covered_lines": [78, 79, 83, 84, 93, 94, 102, 103, 108, 109, 116, 125, 126, 769, 772, 773]}, {"test_lines": [79, 91], "covered_lines": [78, 79, 83, 84, 93, 94, 102, 103, 108, 109, 116, 125, 126, 769, 772, 775, 776, 777]}, {"test_lines": [93, 101], "covered_lines": [78, 79, 83, 84, 93, 94, 102, 103, 108, 109, 116, 125, 126, 769, 772, 775, 780]}, {"test_lines": [103, 118], "covered_lines": [78, 79, 83, 84, 93, 94, 102, 103, 108, 109, 116, 125, 126, 163, 164, 171, 172, 173, 174, 178, 186, 188, 198, 203, 208, 211]}, {"test_lines": [120, 125], "covered_lines": [78, 79, 83, 84, 93, 94, 102, 103, 108, 109, 116, 125, 126]}, {"test_lines": [127, 131], "covered_lines": [78, 79, 83, 84, 93, 94, 102, 103, 108, 109, 116, 125, 126, 358]}, {"test_lines": [133, 141], "covered_lines": [78, 79, 83, 84, 93, 94, 102, 103, 108, 109, 116, 125, 126, 140, 141, 142, 143]}, {"test_lines": [143, 153], "covered_lines": [78, 79, 83, 84, 93, 94, 102, 103, 108, 109, 116, 125, 126, 140, 141, 145, 146, 147, 148, 149]}, {"test_lines": [155, 161], "covered_lines": [78, 79, 83, 84, 93, 94, 102, 103, 108, 109, 116, 125, 126, 186, 188, 198, 203, 208, 211, 306, 307, 421, 422, 423, 424, 425, 427, 428, 434, 437, 441, 445, 447, 450]}, {"test_lines": [163, 171], "covered_lines": [78, 79, 83, 84, 93, 94, 102, 103, 108, 109, 116, 125, 126, 421, 422, 427, 428, 434, 435]}, {"test_lines": [173, 181], "covered_lines": [78, 79, 83, 84, 93, 94, 102, 103, 108, 109, 116, 125, 126, 421, 422, 427, 428, 434, 437, 438]}, {"test_lines": [183, 191], "covered_lines": [78, 79, 83, 84, 93, 94, 102, 103, 108, 109, 116, 125, 126, 421, 422, 427, 428, 434, 437, 441, 442]}, {"test_lines": [193, 201], "covered_lines": [78, 79, 83, 84, 93, 94, 102, 103, 108, 109, 116, 125, 126, 306, 307, 421, 422, 427, 428, 434, 437, 441, 445, 447, 448]}, {"test_lines": [203, 211], "covered_lines": [78, 79, 83, 84, 93, 94, 102, 103, 108, 109, 116, 125, 126, 454, 456, 457]}, {"test_lines": [213, 221], "covered_lines": [78, 79, 83, 84, 93, 94, 102, 103, 108, 109, 116, 125, 126, 454, 456, 459, 460]}, {"test_lines": [223, 231], "covered_lines": [78, 79, 83, 84, 93, 94, 102, 103, 108, 109, 116, 125, 126, 454, 456, 459, 462, 463]}, {"test_lines": [233, 241], "covered_lines": [78, 79, 83, 84, 93, 94, 102, 103, 108, 109, 116, 125, 126, 454, 456, 459, 462, 466, 467]}, {"test_lines": [243, 250], "covered_lines": [78, 79, 83, 84, 93, 94, 102, 103, 108, 109, 116, 125, 126, 493, 494]}, {"test_lines": [252, 268], "covered_lines": [78, 79, 83, 84, 93, 94, 102, 103, 108, 109, 116, 125, 126, 500, 501, 505, 506, 507, 509, 510, 511, 512]}, {"test_lines": [270, 278], "covered_lines": [78, 79, 83, 84, 93, 94, 102, 103, 108, 109, 116, 125, 126, 564, 567, 571, 573, 577, 578, 579, 580, 824]}, {"test_lines": [280, 290], "covered_lines": [78, 79, 83, 84, 93, 94, 102, 103, 108, 109, 116, 125, 126, 564, 567, 571, 573, 577, 578, 581, 582, 583, 584, 824]}, {"test_lines": [292, 296], "covered_lines": [78, 79, 83, 84, 93, 94, 102, 103, 108, 109, 116, 125, 126, 628, 631]}, {"test_lines": [298, 305], "covered_lines": [78, 79, 83, 84, 93, 94, 102, 103, 108, 109, 116, 125, 126, 638, 640, 641]}, {"test_lines": [307, 315], "covered_lines": [78, 79, 83, 84, 93, 94, 102, 103, 108, 109, 116, 125, 126, 638, 640, 643, 646, 647, 650, 651, 708]}]}, "/bernard/dataset_construction/prep/repos/itext-java/pdfa/src/main/java/com/itextpdf/pdfa/checker/PdfA2Checker.java": {"class_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.pdfa.checker;\n", "\n", "import com.itextpdf.commons.utils.MessageFormatUtil;\n", "import com.itextpdf.forms.fields.PdfFormField;\n", "import com.itextpdf.io.colors.IccProfile;\n", "import com.itextpdf.io.font.FontEncoding;\n", "import com.itextpdf.io.font.PdfEncodings;\n", "import com.itextpdf.io.image.ImageDataFactory;\n", "import com.itextpdf.io.image.Jpeg2000ImageData;\n", "import com.itextpdf.kernel.colors.Color;\n", "import com.itextpdf.kernel.colors.PatternColor;\n", "import com.itextpdf.kernel.font.PdfFont;\n", "import com.itextpdf.kernel.font.PdfTrueTypeFont;\n", "import com.itextpdf.kernel.font.PdfType3Font;\n", "import com.itextpdf.kernel.font.Type3Glyph;\n", "import com.itextpdf.kernel.geom.Rectangle;\n", "import com.itextpdf.kernel.pdf.PdfAConformanceLevel;\n", "import com.itextpdf.kernel.pdf.PdfArray;\n", "import com.itextpdf.kernel.pdf.PdfBoolean;\n", "import com.itextpdf.kernel.pdf.PdfDictionary;\n", "import com.itextpdf.kernel.pdf.PdfName;\n", "import com.itextpdf.kernel.pdf.PdfNumber;\n", "import com.itextpdf.kernel.pdf.PdfObject;\n", "import com.itextpdf.kernel.pdf.PdfStream;\n", "import com.itextpdf.kernel.pdf.PdfString;\n", "import com.itextpdf.kernel.pdf.annot.PdfAnnotation;\n", "import com.itextpdf.kernel.pdf.canvas.CanvasGraphicsState;\n", "import com.itextpdf.kernel.pdf.colorspace.PdfCieBasedCs;\n", "import com.itextpdf.kernel.pdf.colorspace.PdfColorSpace;\n", "import com.itextpdf.kernel.pdf.colorspace.PdfDeviceCs;\n", "import com.itextpdf.kernel.pdf.colorspace.PdfPattern;\n", "import com.itextpdf.kernel.pdf.colorspace.PdfSpecialCs;\n", "import com.itextpdf.kernel.pdf.extgstate.PdfExtGState;\n", "import com.itextpdf.pdfa.exceptions.PdfAConformanceException;\n", "import com.itextpdf.pdfa.exceptions.PdfaExceptionMessageConstant;\n", "import com.itextpdf.pdfa.logs.PdfAConformanceLogMessageConstant;\n", "\n", "import java.util.ArrayList;\n", "import java.util.Arrays;\n", "import java.util.Collections;\n", "import java.util.HashMap;\n", "import java.util.HashSet;\n", "import java.util.List;\n", "import java.util.Map;\n", "import java.util.Set;\n", "import org.slf4j.Logger;\n", "import org.slf4j.LoggerFactory;\n", "\n", "/**\n", " * PdfA2Checker defines the requirements of the PDF/A-2 standard and contains a\n", " * number of methods that override the implementations of its superclass\n", " * {@link PdfA1Checker}.\n", " * <p>\n", " * The specification implemented by this class is ISO 19005-2\n", " */\n", "public class PdfA2Checker extends PdfA1Checker {\n", "\n", "    protected static final Set<PdfName> forbiddenAnnotations = Collections\n", "            .unmodifiableSet(new HashSet<>(Arrays.asList(\n", "                    PdfName._3D,\n", "                    PdfName.Sound,\n", "                    PdfName.Screen,\n", "                    PdfName.Movie)));\n", "\n", "    protected static final Set<PdfName> apLessAnnotations = Collections.unmodifiableSet(\n", "            new HashSet<>(Arrays.asList(PdfName.Popup, PdfName.Link)));\n", "\n", "    protected static final Set<PdfName> forbiddenActions = Collections\n", "            .unmodifiableSet(new HashSet<>(Arrays.asList(\n", "                    PdfName.Launch,\n", "                    PdfName.Sound,\n", "                    PdfName.Movie,\n", "                    PdfName.ResetForm,\n", "                    PdfName.ImportData,\n", "                    PdfName.JavaScript,\n", "                    PdfName.Hide,\n", "                    PdfName.SetOCGState,\n", "                    PdfName.Rendition,\n", "                    PdfName.Trans,\n", "                    PdfName.GoTo3DView)));\n", "    protected static final Set<PdfName> allowedBlendModes = Collections\n", "            .unmodifiableSet(new HashSet<>(Arrays.asList(\n", "                    PdfName.Normal,\n", "                    PdfName.Compatible,\n", "                    PdfName.Multiply,\n", "                    PdfName.Screen,\n", "                    PdfName.Overlay,\n", "                    PdfName.Darken,\n", "                    PdfName.Lighten,\n", "                    PdfName.ColorDodge,\n", "                    PdfName.ColorBurn,\n", "                    PdfName.HardLight,\n", "                    PdfName.SoftLight,\n", "                    PdfName.Difference,\n", "                    PdfName.Exclusion,\n", "                    PdfName.Hue,\n", "                    PdfName.Saturation,\n", "                    PdfName.Color,\n", "                    PdfName.Luminosity)));\n", "\n", "    protected static final Set<PdfName> allowedFilters = Collections\n", "            .unmodifiableSet(new HashSet<>(Arrays.asList(\n", "                    PdfName.ASCIIHexDecode,\n", "                    PdfName.ASCII85Decode,\n", "                    PdfName.RunLengthDecode,\n", "                    PdfName.FlateDecode,\n", "                    PdfName.CCITTFaxDecode,\n", "                    PdfName.JBIG2Decode,\n", "                    PdfName.DCTDecode,\n", "                    PdfName.JPXDecode,\n", "                    PdfName.Crypt)));\n", "\n", "    protected static final Set<PdfName> allowedInlineImageFilters = Collections\n", "            .unmodifiableSet(new HashSet<>(Arrays.asList(\n", "                    PdfName.DeviceGray,\n", "                    PdfName.DeviceRGB,\n", "                    PdfName.DeviceCMYK,\n", "                    PdfName.Indexed,\n", "                    PdfName.ASCIIHexDecode,\n", "                    PdfName.ASCII85Decode,\n", "                    PdfName.FlateDecode,\n", "                    PdfName.RunLengthDecode,\n", "                    PdfName.CCITTFaxDecode,\n", "                    PdfName.DCTDecode,\n", "                    PdfName.G,\n", "                    PdfName.RGB,\n", "                    PdfName.CMYK,\n", "                    PdfName.I,\n", "                    PdfName.AHx,\n", "                    PdfName.A85,\n", "                    PdfName.Fl,\n", "                    PdfName.RL,\n", "                    PdfName.CCF,\n", "                    PdfName.DCT)));\n", "\n", "    protected Set<PdfObject> transparencyObjects = new HashSet<>();\n", "\n", "    static final int MAX_PAGE_SIZE = 14400;\n", "    static final int MIN_PAGE_SIZE = 3;\n", "    private static final int MAX_NUMBER_OF_DEVICEN_COLOR_COMPONENTS = 32;\n", "\n", "    private static final Logger logger = LoggerFactory.getLogger(PdfAChecker.class);\n", "\n", "    private static final String TRANSPARENCY_ERROR_MESSAGE =\n", "            PdfAConformanceException.THE_DOCUMENT_DOES_NOT_CONTAIN_A_PDFA_OUTPUTINTENT_BUT_PAGE_CONTAINS_TRANSPARENCY_AND_DOES_NOT_CONTAIN_BLENDING_COLOR_SPACE;\n", "\n", "    private boolean currentFillCsIsIccBasedCMYK = false;\n", "    private boolean currentStrokeCsIsIccBasedCMYK = false;\n", "\n", "    private Map<PdfName, PdfArray> separationColorSpaces = new HashMap<>();\n", "\n", "    /**\n", "     * Creates a PdfA2Checker with the required conformance level\n", "     *\n", "     * @param conformanceLevel the required conformance level, <code>a</code> or\n", "     *                         <code>u</code> or <code>b</code>\n", "     */\n", "    public PdfA2Checker(PdfAConformanceLevel conformanceLevel) {\n", "        super(conformanceLevel);\n", "    }\n", "\n", "    @Override\n", "    public void checkInlineImage(PdfStream inlineImage, PdfDictionary currentColorSpaces) {\n", "        PdfObject filter = inlineImage.get(PdfName.Filter);\n", "        if (filter instanceof PdfName) {\n", "            if (filter.equals(PdfName.LZWDecode)) {\n", "                throw new PdfAConformanceException(PdfaExceptionMessageConstant.LZWDECODE_FILTER_IS_NOT_PERMITTED);\n", "            }\n", "            if (filter.equals(PdfName.Crypt)) {\n", "                throw new PdfAConformanceException(PdfaExceptionMessageConstant.CRYPT_FILTER_IS_NOT_PERMITTED_INLINE_IMAGE);\n", "            }\n", "            if (!allowedInlineImageFilters.contains((PdfName) filter)) {\n", "                throw new PdfAConformanceException(PdfaExceptionMessageConstant.INVALID_INLINE_IMAGE_FILTER_USAGE);\n", "            }\n", "        } else if (filter instanceof PdfArray) {\n", "            for (int i = 0; i < ((PdfArray) filter).size(); i++) {\n", "                PdfName f = ((PdfArray) filter).getAsName(i);\n", "                if (f.equals(PdfName.LZWDecode))\n", "                    throw new PdfAConformanceException(PdfaExceptionMessageConstant.LZWDECODE_FILTER_IS_NOT_PERMITTED);\n", "                if (f.equals(PdfName.Crypt)) {\n", "                    throw new PdfAConformanceException(PdfaExceptionMessageConstant.CRYPT_FILTER_IS_NOT_PERMITTED_INLINE_IMAGE);\n", "                }\n", "                if (!allowedInlineImageFilters.contains((PdfName) f)) {\n", "                    throw new PdfAConformanceException(PdfaExceptionMessageConstant.INVALID_INLINE_IMAGE_FILTER_USAGE);\n", "                }\n", "            }\n", "        }\n", "\n", "        checkImage(inlineImage, currentColorSpaces);\n", "    }\n", "\n", "    /**\n", "     * {@inheritDoc}\n", "     */\n", "    @Override\n", "    @Deprecated\n", "    public void checkColor(Color color, PdfDictionary currentColorSpaces, Boolean fill, PdfStream contentStream) {\n", "        checkColor(null, color, currentColorSpaces, fill, contentStream);\n", "    }\n", "\n", "    /**\n", "     * {@inheritDoc}\n", "     */\n", "    @Override\n", "    public void checkColor(CanvasGraphicsState gState, Color color, PdfDictionary currentColorSpaces,\n", "                                    Boolean fill, PdfStream contentStream) {\n", "        if (color instanceof PatternColor) {\n", "            PdfPattern pattern = ((PatternColor) color).getPattern();\n", "            if (pattern instanceof PdfPattern.Shading) {\n", "                PdfDictionary shadingDictionary = ((PdfPattern.Shading) pattern).getShading();\n", "                PdfObject colorSpace = shadingDictionary.get(PdfName.ColorSpace);\n", "                checkColorSpace(PdfColorSpace.makeColorSpace(colorSpace), contentStream, currentColorSpaces, true, true);\n", "                if (gState == null) {\n", "                    //Note that this method of getting ExtGState won't work for PatternType = 1, and won't always work\n", "                    //for PatternType = 2, since it's an optional parameter there, so this code is just a fallback for the\n", "                    //user input.\n", "                    final PdfDictionary extGStateDict = ((PdfDictionary) pattern.getPdfObject()).getAsDictionary(PdfName.ExtGState);\n", "                    gState = new UpdateCanvasGraphicsState(extGStateDict);\n", "                }\n", "                checkExtGState(gState, contentStream);\n", "            } else if (pattern instanceof PdfPattern.Tiling) {\n", "                checkContentStream((PdfStream) pattern.getPdfObject());\n", "            }\n", "        }\n", "\n", "        super.checkColor(gState, color, currentColorSpaces, fill, contentStream);\n", "    }\n", "\n", "    /**\n", "     * {@inheritDoc}\n", "     */\n", "    @Override\n", "    public void checkColorSpace(PdfColorSpace colorSpace, PdfObject pdfObject, PdfDictionary currentColorSpaces,\n", "            boolean checkAlternate, Boolean fill) {\n", "        if (fill != null) {\n", "            if ((boolean) fill) {\n", "                currentFillCsIsIccBasedCMYK = false;\n", "            } else {\n", "                currentStrokeCsIsIccBasedCMYK = false;\n", "            }\n", "        }\n", "\n", "        if (colorSpace instanceof PdfSpecialCs.Separation) {\n", "\n", "            PdfSpecialCs.Separation separation = (PdfSpecialCs.Separation) colorSpace;\n", "            checkSeparationCS((PdfArray) separation.getPdfObject());\n", "            if (checkAlternate) {\n", "                checkColorSpace(separation.getBaseCs(), pdfObject, currentColorSpaces, false, fill);\n", "            }\n", "\n", "        } else if (colorSpace instanceof PdfSpecialCs.DeviceN) {\n", "\n", "            PdfSpecialCs.DeviceN deviceN = (PdfSpecialCs.DeviceN) colorSpace;\n", "            checkNumberOfDeviceNComponents(deviceN);\n", "            //According to spec DeviceN is an array of size 4 or 5 depending on whether it contains attributes or not (see ISO 32000-2:2020 8.6.6.5)\n", "            //for the pdf/a-2 it should look as follows: [/DeviceN names alternateSpace tintTransform attributes], since colourants dictionary is\n", "            // located in attributes and according to pdf/a-2 spec it should always be present.\n", "            if (((PdfArray) deviceN.getPdfObject()).size() != 5) {\n", "                throw new PdfAConformanceException(PdfaExceptionMessageConstant.COLORANTS_DICTIONARY_SHALL_NOT_BE_EMPTY_IN_DEVICE_N_COLORSPACE);\n", "            }\n", "            PdfDictionary attributes = ((PdfArray) deviceN.getPdfObject()).getAsDictionary(4);\n", "            PdfDictionary colorants = attributes.getAsDictionary(PdfName.Colorants);\n", "            if (colorants != null && !colorants.isEmpty()) {\n", "                for (Map.Entry<PdfName, PdfObject> entry : colorants.entrySet()) {\n", "                    PdfArray separation = (PdfArray) entry.getValue();\n", "                    checkSeparationInsideDeviceN(separation, ((PdfArray) deviceN.getPdfObject()).get(2), ((PdfArray) deviceN.getPdfObject()).get(3));\n", "                }\n", "            } else {\n", "                throw new PdfAConformanceException(PdfaExceptionMessageConstant.COLORANTS_DICTIONARY_SHALL_NOT_BE_EMPTY_IN_DEVICE_N_COLORSPACE);\n", "            }\n", "\n", "            if (checkAlternate) {\n", "                checkColorSpace(deviceN.getBaseCs(), pdfObject, currentColorSpaces, false, fill);\n", "            }\n", "\n", "        } else if (colorSpace instanceof PdfSpecialCs.Indexed) {\n", "            if (checkAlternate) {\n", "                checkColorSpace(((PdfSpecialCs.Indexed) colorSpace).getBaseCs(), pdfObject, currentColorSpaces, true, fill);\n", "            }\n", "        } else if (colorSpace instanceof PdfSpecialCs.UncoloredTilingPattern) {\n", "            if (checkAlternate) {\n", "                checkColorSpace(((PdfSpecialCs.UncoloredTilingPattern) colorSpace).getUnderlyingColorSpace(), pdfObject,\n", "                        currentColorSpaces, true, fill);\n", "            }\n", "        } else {\n", "            if (colorSpace instanceof PdfDeviceCs.Rgb) {\n", "                if (!checkDefaultCS(pdfObject, currentColorSpaces, fill, PdfName.DefaultRGB, 3)) {\n", "                    rgbUsedObjects.add(pdfObject);\n", "                }\n", "            } else if (colorSpace instanceof PdfDeviceCs.Cmyk) {\n", "                if (!checkDefaultCS(pdfObject, currentColorSpaces, fill, PdfName.DefaultCMYK, 4)) {\n", "                    cmykUsedObjects.add(pdfObject);\n", "                }\n", "            } else if (colorSpace instanceof PdfDeviceCs.Gray) {\n", "                if (!checkDefaultCS(pdfObject, currentColorSpaces, fill, PdfName.DefaultGray, 1)) {\n", "                    grayUsedObjects.add(pdfObject);\n", "                }\n", "            }\n", "        }\n", "\n", "        if (fill != null && colorSpace instanceof PdfCieBasedCs.IccBased) {\n", "            byte[] iccBytes = ((PdfArray) colorSpace.getPdfObject()).getAsStream(1).getBytes();\n", "            if (ICC_COLOR_SPACE_CMYK.equals(IccProfile.getIccColorSpaceName(iccBytes))) {\n", "                if ((boolean) fill) {\n", "                    currentFillCsIsIccBasedCMYK = true;\n", "                } else {\n", "                    currentStrokeCsIsIccBasedCMYK = true;\n", "                }\n", "            }\n", "        }\n", "    }\n", "\n", "    @Override\n", "    public void checkExtGState(CanvasGraphicsState extGState, PdfStream contentStream) {\n", "        if (Integer.valueOf(1).equals(extGState.getOverprintMode())) {\n", "            if (extGState.getFillOverprint() && currentFillCsIsIccBasedCMYK) {\n", "                throw new PdfAConformanceException(PdfaExceptionMessageConstant.OVERPRINT_MODE_SHALL_NOT_BE_ONE_WHEN_AN_ICCBASED_CMYK_COLOUR_SPACE_IS_USED_AND_WHEN_OVERPRINTING_IS_SET_TO_TRUE);\n", "            }\n", "            if (extGState.getStrokeOverprint() && currentStrokeCsIsIccBasedCMYK) {\n", "                throw new PdfAConformanceException(PdfaExceptionMessageConstant.OVERPRINT_MODE_SHALL_NOT_BE_ONE_WHEN_AN_ICCBASED_CMYK_COLOUR_SPACE_IS_USED_AND_WHEN_OVERPRINTING_IS_SET_TO_TRUE);\n", "            }\n", "        }\n", "\n", "        if (extGState.getTransferFunction() != null) {\n", "            throw new PdfAConformanceException(PdfaExceptionMessageConstant.AN_EXTGSTATE_DICTIONARY_SHALL_NOT_CONTAIN_THE_TR_KEY);\n", "        }\n", "        if (extGState.getHTP() != null) {\n", "            throw new PdfAConformanceException(PdfaExceptionMessageConstant.AN_EXTGSTATE_DICTIONARY_SHALL_NOT_CONTAIN_THE_HTP_KEY);\n", "        }\n", "\n", "        PdfObject transferFunction2 = extGState.getTransferFunction2();\n", "        if (transferFunction2 != null && !PdfName.Default.equals(transferFunction2)) {\n", "            throw new PdfAConformanceException(PdfaExceptionMessageConstant.AN_EXTGSTATE_DICTIONARY_SHALL_NOT_CONTAIN_THE_TR_2_KEY_WITH_A_VALUE_OTHER_THAN_DEFAULT);\n", "        }\n", "\n", "        if (extGState.getHalftone() instanceof PdfDictionary) {\n", "            PdfDictionary halftoneDict = (PdfDictionary) extGState.getHalftone();\n", "            Integer halftoneType = halftoneDict.getAsInt(PdfName.HalftoneType);\n", "            if (halftoneType != 1 && halftoneType != 5) {\n", "                throw new PdfAConformanceException(PdfaExceptionMessageConstant.ALL_HALFTONES_SHALL_HAVE_HALFTONETYPE_1_OR_5);\n", "            }\n", "\n", "            if (halftoneDict.containsKey(PdfName.HalftoneName)) {\n", "                throw new PdfAConformanceException(PdfaExceptionMessageConstant.HALFTONES_SHALL_NOT_CONTAIN_HALFTONENAME);\n", "            }\n", "        }\n", "\n", "        checkRenderingIntent(extGState.getRenderingIntent());\n", "\n", "        if (extGState.getSoftMask() != null && extGState.getSoftMask() instanceof PdfDictionary) {\n", "            transparencyObjects.add(contentStream);\n", "        }\n", "        if (extGState.getStrokeOpacity() < 1) {\n", "            transparencyObjects.add(contentStream);\n", "        }\n", "        if (extGState.getFillOpacity() < 1) {\n", "            transparencyObjects.add(contentStream);\n", "        }\n", "\n", "        PdfObject bm = extGState.getBlendMode();\n", "        if (bm != null) {\n", "            if (!PdfName.Normal.equals(bm)) {\n", "                transparencyObjects.add(contentStream);\n", "            }\n", "            if (bm instanceof PdfArray) {\n", "                for (PdfObject b : (PdfArray) bm) {\n", "                    checkBlendMode((PdfName) b);\n", "                }\n", "            } else if (bm instanceof PdfName) {\n", "                checkBlendMode((PdfName) bm);\n", "            }\n", "        }\n", "    }\n", "\n", "    @Override\n", "    public void checkSignature(PdfDictionary signatureDict) {\n", "        if (isAlreadyChecked(signatureDict)) {\n", "            return;\n", "        }\n", "\n", "        PdfArray references = signatureDict.getAsArray(PdfName.Reference);\n", "        if (references != null) {\n", "            for (int i = 0; i < references.size(); i++) {\n", "                PdfDictionary referenceDict = references.getAsDictionary(i);\n", "                if (referenceDict.containsKey(PdfName.DigestLocation)\n", "                        || referenceDict.containsKey(PdfName.DigestMethod)\n", "                        || referenceDict.containsKey(PdfName.DigestValue)) {\n", "                    throw new PdfAConformanceException(\n", "                            PdfaExceptionMessageConstant.SIGNATURE_REFERENCES_DICTIONARY_SHALL_NOT_CONTAIN_DIGESTLOCATION_DIGESTMETHOD_DIGESTVALUE);\n", "                }\n", "            }\n", "        }\n", "    }\n", "\n", "    protected void checkNumberOfDeviceNComponents(PdfSpecialCs.DeviceN deviceN) {\n", "        if (deviceN.getNumberOfComponents() > MAX_NUMBER_OF_DEVICEN_COLOR_COMPONENTS) {\n", "            throw new PdfAConformanceException(PdfaExceptionMessageConstant.\n", "                    THE_NUMBER_OF_COLOR_COMPONENTS_IN_DEVICE_N_COLORSPACE_SHOULD_NOT_EXCEED,\n", "                    MAX_NUMBER_OF_DEVICEN_COLOR_COMPONENTS);\n", "        }\n", "    }\n", "\n", "    @Override\n", "    protected void checkNonSymbolicTrueTypeFont(PdfTrueTypeFont trueTypeFont) {\n", "        String encoding = trueTypeFont.getFontEncoding().getBaseEncoding();\n", "        // non-symbolic true type font will always has an encoding entry in font dictionary in itext\n", "        if (!PdfEncodings.WINANSI.equals(encoding) && !PdfEncodings.MACROMAN.equals(encoding)) {\n", "            throw new PdfAConformanceException(PdfaExceptionMessageConstant.ALL_NON_SYMBOLIC_TRUE_TYPE_FONT_SHALL_SPECIFY_MAC_ROMAN_ENCODING_OR_WIN_ANSI_ENCODING, trueTypeFont);\n", "        }\n", "\n", "        // if font has differences array, itext ensures that all names in it are listed in AdobeGlyphList\n", "    }\n", "\n", "    @Override\n", "    protected double getMaxRealValue() {\n", "        return Float.MAX_VALUE;\n", "    }\n", "\n", "    @Override\n", "    protected int getMaxStringLength() {\n", "        return 32767;\n", "    }\n", "    @Override\n", "    protected void checkPdfArray(PdfArray array) {\n", "        // currently no validation for arrays is implemented for PDF/A 2\n", "    }\n", "\n", "    @Override\n", "    protected void checkPdfDictionary(PdfDictionary dictionary) {\n", "        // currently no validation for dictionaries is implemented for PDF/A 2\n", "    }\n", "\n", "    /**\n", "     * {@inheritDoc}\n", "     */\n", "    @Override\n", "    protected void checkAnnotation(PdfDictionary annotDic) {\n", "        PdfName subtype = annotDic.getAsName(PdfName.Subtype);\n", "\n", "        if (subtype == null) {\n", "            throw new PdfAConformanceException(PdfaExceptionMessageConstant.ANNOTATION_TYPE_0_IS_NOT_PERMITTED).setMessageParams(\"null\");\n", "        }\n", "        if (getForbiddenAnnotations().contains(subtype)) {\n", "            throw new PdfAConformanceException(PdfaExceptionMessageConstant.ANNOTATION_TYPE_0_IS_NOT_PERMITTED).setMessageParams(subtype.getValue());\n", "        }\n", "\n", "        if (!subtype.equals(PdfName.Popup)) {\n", "            PdfNumber f = annotDic.getAsNumber(PdfName.F);\n", "            if (f == null) {\n", "                throw new PdfAConformanceException(PdfaExceptionMessageConstant.AN_ANNOTATION_DICTIONARY_SHALL_CONTAIN_THE_F_KEY);\n", "            }\n", "            int flags = f.intValue();\n", "            if (!checkFlag(flags, PdfAnnotation.PRINT)\n", "                    || checkFlag(flags, PdfAnnotation.HIDDEN)\n", "                    || checkFlag(flags, PdfAnnotation.INVISIBLE)\n", "                    || checkFlag(flags, PdfAnnotation.NO_VIEW)\n", "                    || checkFlag(flags, PdfAnnotation.TOGGLE_NO_VIEW)) {\n", "                throw new PdfAConformanceException(PdfaExceptionMessageConstant.THE_F_KEYS_PRINT_FLAG_BIT_SHALL_BE_SET_TO_1_AND_ITS_HIDDEN_INVISIBLE_NOVIEW_AND_TOGGLENOVIEW_FLAG_BITS_SHALL_BE_SET_TO_0);\n", "            }\n", "            if (subtype.equals(PdfName.Text)) {\n", "                if (!checkFlag(flags, PdfAnnotation.NO_ZOOM) || !checkFlag(flags, PdfAnnotation.NO_ROTATE)) {\n", "                    throw new PdfAConformanceException(PdfAConformanceLogMessageConstant.TEXT_ANNOTATIONS_SHOULD_SET_THE_NOZOOM_AND_NOROTATE_FLAG_BITS_OF_THE_F_KEY_TO_1);\n", "                }\n", "            }\n", "        }\n", "\n", "        checkAnnotationAgainstActions(annotDic);\n", "\n", "        if (checkStructure(conformanceLevel)) {\n", "            if (contentAnnotations.contains(subtype) && !annotDic.containsKey(PdfName.Contents)) {\n", "                logger.warn(MessageFormatUtil.format(\n", "                        PdfAConformanceLogMessageConstant.ANNOTATION_OF_TYPE_0_SHOULD_HAVE_CONTENTS_KEY, subtype.getValue()));\n", "            }\n", "        }\n", "\n", "        PdfDictionary ap = annotDic.getAsDictionary(PdfName.AP);\n", "        if (ap != null) {\n", "            if (ap.containsKey(PdfName.R) || ap.containsKey(PdfName.D)) {\n", "                throw new PdfAConformanceException(PdfaExceptionMessageConstant.APPEARANCE_DICTIONARY_SHALL_CONTAIN_ONLY_THE_N_KEY_WITH_STREAM_VALUE);\n", "            }\n", "            PdfObject n = ap.get(PdfName.N);\n", "            if (PdfName.Widget.equals(subtype) && PdfName.Btn.equals(PdfFormField.getFormType(annotDic))) {\n", "                if (n == null || !n.isDictionary())\n", "                    throw new PdfAConformanceException(PdfaExceptionMessageConstant.APPEARANCE_DICTIONARY_OF_WIDGET_SUBTYPE_AND_BTN_FIELD_TYPE_SHALL_CONTAIN_ONLY_THE_N_KEY_WITH_DICTIONARY_VALUE);\n", "            } else {\n", "                if (n == null || !n.isStream())\n", "                    throw new PdfAConformanceException(PdfaExceptionMessageConstant.APPEARANCE_DICTIONARY_SHALL_CONTAIN_ONLY_THE_N_KEY_WITH_STREAM_VALUE);\n", "            }\n", "\n", "            checkResourcesOfAppearanceStreams(ap);\n", "        } else {\n", "            boolean isCorrectRect = false;\n", "            PdfArray rect = annotDic.getAsArray(PdfName.Rect);\n", "            if (rect != null && rect.size() == 4) {\n", "                PdfNumber index0 = rect.getAsNumber(0);\n", "                PdfNumber index1 = rect.getAsNumber(1);\n", "                PdfNumber index2 = rect.getAsNumber(2);\n", "                PdfNumber index3 = rect.getAsNumber(3);\n", "                if (index0 != null && index1 != null && index2 != null && index3 != null &&\n", "                        index0.floatValue() == index2.floatValue() && index1.floatValue() == index3.floatValue())\n", "                    isCorrectRect = true;\n", "            }\n", "            if (!getAppearanceLessAnnotations().contains(subtype) && !isCorrectRect)\n", "                throw new PdfAConformanceException(PdfaExceptionMessageConstant.EVERY_ANNOTATION_SHALL_HAVE_AT_LEAST_ONE_APPEARANCE_DICTIONARY);\n", "        }\n", "    }\n", "\n", "    /**\n", "     * Gets annotation types which are allowed not to have appearance stream.\n", "     *\n", "     * @return set of annotation names.\n", "     */\n", "    protected Set<PdfName> getAppearanceLessAnnotations() {\n", "        return apLessAnnotations;\n", "    }\n", "\n", "    /**\n", "     * Checked annotation against actions, exception will be thrown if either {@code A}\n", "     * or {@code AA} actions aren't allowed for specific type of annotation.\n", "     *\n", "     * @param annotDic an annotation PDF dictionary\n", "     */\n", "    protected void checkAnnotationAgainstActions(PdfDictionary annotDic) {\n", "        if (PdfName.Widget.equals(annotDic.getAsName(PdfName.Subtype))\n", "                && (annotDic.containsKey(PdfName.AA) || annotDic.containsKey(PdfName.A))) {\n", "\n", "            throw new PdfAConformanceException(PdfaExceptionMessageConstant.WIDGET_ANNOTATION_DICTIONARY_OR_FIELD_DICTIONARY_SHALL_NOT_INCLUDE_A_OR_AA_ENTRY);\n", "        }\n", "        if (annotDic.containsKey(PdfName.AA)) {\n", "            throw new PdfAConformanceException(PdfaExceptionMessageConstant.AN_ANNOTATION_DICTIONARY_SHALL_NOT_CONTAIN_AA_KEY);\n", "        }\n", "    }\n", "\n", "    /**\n", "     * {@inheritDoc}\n", "     */\n", "    @Override\n", "    protected Set<PdfName> getForbiddenAnnotations() {\n", "        return forbiddenAnnotations;\n", "    }\n", "\n", "    @Override\n", "    protected void checkAppearanceStream(PdfStream appearanceStream) {\n", "        if (isAlreadyChecked(appearanceStream)) {\n", "            return;\n", "        }\n", "\n", "        if (isContainsTransparencyGroup(appearanceStream)) {\n", "            this.transparencyObjects.add(appearanceStream);\n", "        }\n", "        checkResources(appearanceStream.getAsDictionary(PdfName.Resources), appearanceStream);\n", "    }\n", "\n", "    @Override\n", "    protected void checkForm(PdfDictionary form) {\n", "        if (form != null) {\n", "            PdfBoolean needAppearances = form.getAsBoolean(PdfName.NeedAppearances);\n", "            if (needAppearances != null && needAppearances.getValue()) {\n", "                throw new PdfAConformanceException(PdfaExceptionMessageConstant.NEEDAPPEARANCES_FLAG_OF_THE_INTERACTIVE_FORM_DICTIONARY_SHALL_EITHER_NOT_BE_PRESENTED_OR_SHALL_BE_FALSE);\n", "            }\n", "            if (form.containsKey(PdfName.XFA)) {\n", "                throw new PdfAConformanceException(PdfaExceptionMessageConstant.THE_INTERACTIVE_FORM_DICTIONARY_SHALL_NOT_CONTAIN_THE_XFA_KEY);\n", "            }\n", "            checkResources(form.getAsDictionary(PdfName.DR), form);\n", "\n", "            PdfArray fields = form.getAsArray(PdfName.Fields);\n", "            if (fields != null) {\n", "                fields = getFormFields(fields);\n", "                for (PdfObject field : fields) {\n", "                    PdfDictionary fieldDic = (PdfDictionary) field;\n", "                    checkResources(fieldDic.getAsDictionary(PdfName.DR), fieldDic);\n", "                }\n", "            }\n", "        }\n", "    }\n", "\n", "\n", "    /**\n", "     *  Checks if the catalog is compliant with the PDF/A-2 standard.\n", "     *\n", "     *  @param dict the catalog dictionary\n", "     */\n", "    protected void checkCatalogAAConformance(PdfDictionary dict) {\n", "        if (dict.containsKey(PdfName.AA)) {\n", "            throw new PdfAConformanceException(\n", "                    PdfAConformanceException.A_CATALOG_DICTIONARY_SHALL_NOT_CONTAIN_AA_ENTRY);\n", "        }\n", "    }\n", "\n", "    @Override\n", "    protected void checkCatalogValidEntries(PdfDictionary catalogDict) {\n", "        if (catalogDict.containsKey(PdfName.NeedsRendering)) {\n", "            throw new PdfAConformanceException(PdfaExceptionMessageConstant.THE_CATALOG_DICTIONARY_SHALL_NOT_CONTAIN_THE_NEEDSRENDERING_KEY);\n", "        }\n", "\n", "        checkCatalogAAConformance(catalogDict);\n", "        if (catalogDict.containsKey(PdfName.Requirements)) {\n", "            throw new PdfAConformanceException(PdfaExceptionMessageConstant.A_CATALOG_DICTIONARY_SHALL_NOT_CONTAIN_REQUIREMENTS_ENTRY);\n", "        }\n", "\n", "        PdfDictionary permissions = catalogDict.getAsDictionary(PdfName.Perms);\n", "        if (permissions != null) {\n", "            for (PdfName dictKey : permissions.keySet()) {\n", "                if (PdfName.DocMDP.equals(dictKey)) {\n", "                    PdfDictionary signatureDict = permissions.getAsDictionary(PdfName.DocMDP);\n", "                    if (signatureDict != null) {\n", "                        checkSignature(signatureDict);\n", "                    }\n", "                } else if (PdfName.UR3.equals(dictKey)) {\n", "                } else {\n", "                    throw new PdfAConformanceException(PdfaExceptionMessageConstant.NO_KEYS_OTHER_THAN_UR3_AND_DOC_MDP_SHALL_BE_PRESENT_IN_A_PERMISSIONS_DICTIONARY);\n", "                }\n", "            }\n", "        }\n", "\n", "        PdfDictionary namesDictionary = catalogDict.getAsDictionary(PdfName.Names);\n", "        if (namesDictionary != null && namesDictionary.containsKey(PdfName.AlternatePresentations)) {\n", "            throw new PdfAConformanceException(PdfaExceptionMessageConstant.A_CATALOG_DICTIONARY_SHALL_NOT_CONTAIN_ALTERNATEPRESENTATIONS_NAMES_ENTRY);\n", "        }\n", "\n", "        checkOCProperties(catalogDict.getAsDictionary(PdfName.OCProperties));\n", "    }\n", "\n", "    @Override\n", "    protected void checkPageSize(PdfDictionary page) {\n", "        PdfName[] boxNames = new PdfName[]{PdfName.MediaBox, PdfName.CropBox, PdfName.TrimBox, PdfName.ArtBox, PdfName.BleedBox};\n", "        for (PdfName boxName : boxNames) {\n", "            Rectangle box = page.getAsRectangle(boxName);\n", "            if (box != null) {\n", "                float width = box.getWidth();\n", "                float height = box.getHeight();\n", "                if (width < MIN_PAGE_SIZE || width > MAX_PAGE_SIZE || height < MIN_PAGE_SIZE || height > MAX_PAGE_SIZE)\n", "                    throw new PdfAConformanceException(PdfaExceptionMessageConstant.THE_PAGE_LESS_3_UNITS_NO_GREATER_14400_IN_EITHER_DIRECTION);\n", "            }\n", "        }\n", "    }\n", "\n", "    @Override\n", "    protected void checkFileSpec(PdfDictionary fileSpec) {\n", "        if (fileSpec.containsKey(PdfName.EF)) {\n", "            if (!fileSpec.containsKey(PdfName.F) || !fileSpec.containsKey(PdfName.UF)) {\n", "                throw new PdfAConformanceException(PdfaExceptionMessageConstant.FILE_SPECIFICATION_DICTIONARY_SHALL_CONTAIN_F_KEY_AND_UF_KEY);\n", "            }\n", "            if (!fileSpec.containsKey(PdfName.Desc)) {\n", "                logger.warn(PdfAConformanceLogMessageConstant.FILE_SPECIFICATION_DICTIONARY_SHOULD_CONTAIN_DESC_KEY);\n", "            }\n", "\n", "            PdfDictionary ef = fileSpec.getAsDictionary(PdfName.EF);\n", "            PdfStream embeddedFile = ef.getAsStream(PdfName.F);\n", "            if (embeddedFile == null) {\n", "                throw new PdfAConformanceException(PdfaExceptionMessageConstant.EF_KEY_OF_FILE_SPECIFICATION_DICTIONARY_SHALL_CONTAIN_DICTIONARY_WITH_VALID_F_KEY);\n", "            }\n", "            // iText doesn't check whether provided file is compliant to PDF-A specs.\n", "            logger.warn(PdfAConformanceLogMessageConstant.EMBEDDED_FILE_SHALL_BE_COMPLIANT_WITH_SPEC);\n", "        }\n", "    }\n", "\n", "    @Override\n", "    protected void checkPdfStream(PdfStream stream) {\n", "        checkPdfDictionary(stream);\n", "\n", "        if (stream.containsKey(PdfName.F) || stream.containsKey(PdfName.FFilter) || stream.containsKey(PdfName.FDecodeParams)) {\n", "            throw new PdfAConformanceException(PdfaExceptionMessageConstant.STREAM_OBJECT_DICTIONARY_SHALL_NOT_CONTAIN_THE_F_FFILTER_OR_FDECODEPARAMS_KEYS);\n", "        }\n", "\n", "        PdfObject filter = stream.get(PdfName.Filter);\n", "        if (filter instanceof PdfName) {\n", "            if (filter.equals(PdfName.LZWDecode))\n", "                throw new PdfAConformanceException(PdfaExceptionMessageConstant.LZWDECODE_FILTER_IS_NOT_PERMITTED);\n", "            if (filter.equals(PdfName.Crypt)) {\n", "                PdfDictionary decodeParams = stream.getAsDictionary(PdfName.DecodeParms);\n", "                if (decodeParams != null) {\n", "                    PdfName cryptFilterName = decodeParams.getAsName(PdfName.Name);\n", "                    if (cryptFilterName != null && !cryptFilterName.equals(PdfName.Identity)) {\n", "                        throw new PdfAConformanceException(PdfaExceptionMessageConstant.NOT_IDENTITY_CRYPT_FILTER_IS_NOT_PERMITTED);\n", "                    }\n", "                }\n", "            }\n", "            if (!allowedFilters.contains((PdfName) filter)) {\n", "                throw new PdfAConformanceException(PdfaExceptionMessageConstant.INVALID_STREAM_FILTER_USAGE);\n", "            }\n", "        } else if (filter instanceof PdfArray) {\n", "            for (int i = 0; i < ((PdfArray) filter).size(); i++) {\n", "                PdfName f = ((PdfArray) filter).getAsName(i);\n", "                if (f.equals(PdfName.LZWDecode))\n", "                    throw new PdfAConformanceException(PdfaExceptionMessageConstant.LZWDECODE_FILTER_IS_NOT_PERMITTED);\n", "                if (f.equals(PdfName.Crypt)) {\n", "                    PdfArray decodeParams = stream.getAsArray(PdfName.DecodeParms);\n", "                    if (decodeParams != null && i < decodeParams.size()) {\n", "                        PdfDictionary decodeParam = decodeParams.getAsDictionary(i);\n", "                        PdfName cryptFilterName = decodeParam.getAsName(PdfName.Name);\n", "                        if (cryptFilterName != null && !cryptFilterName.equals(PdfName.Identity)) {\n", "                            throw new PdfAConformanceException(PdfaExceptionMessageConstant.NOT_IDENTITY_CRYPT_FILTER_IS_NOT_PERMITTED);\n", "                        }\n", "                    }\n", "                }\n", "                if (!allowedFilters.contains((PdfName) f)) {\n", "                    throw new PdfAConformanceException(PdfaExceptionMessageConstant.INVALID_STREAM_FILTER_USAGE);\n", "                }\n", "            }\n", "        }\n", "    }\n", "\n", "    /**\n", "     *  Checks if the page is compliant with the PDF/A-2 standard.\n", "     *\n", "     *  @param dict the page dictionary\n", "     */\n", "    protected void checkPageAAConformance(PdfDictionary dict) {\n", "        if (dict.containsKey(PdfName.AA)) {\n", "            throw new PdfAConformanceException(PdfaExceptionMessageConstant.THE_PAGE_DICTIONARY_SHALL_NOT_CONTAIN_AA_ENTRY);\n", "        }\n", "    }\n", "\n", "    @Override\n", "    protected void checkPageObject(PdfDictionary pageDict, PdfDictionary pageResources) {\n", "        checkPageAAConformance(pageDict);\n", "        if (pageDict.containsKey(PdfName.PresSteps)) {\n", "            throw new PdfAConformanceException(PdfaExceptionMessageConstant.THE_PAGE_DICTIONARY_SHALL_NOT_CONTAIN_PRESSTEPS_ENTRY);\n", "        }\n", "\n", "        if (isContainsTransparencyGroup(pageDict)) {\n", "            PdfObject cs = pageDict.getAsDictionary(PdfName.Group).get(PdfName.CS);\n", "            if (cs != null) {\n", "                PdfDictionary currentColorSpaces = pageResources.getAsDictionary(PdfName.ColorSpace);\n", "                checkColorSpace(PdfColorSpace.makeColorSpace(cs), pageDict, currentColorSpaces, true, null);\n", "            }\n", "        }\n", "    }\n", "\n", "    @Override\n", "    protected void checkPageTransparency(PdfDictionary pageDict, PdfDictionary pageResources) {\n", "        if (pdfAOutputIntentColorSpace == null\n", "                && transparencyObjects.size() > 0\n", "                && (pageDict.getAsDictionary(PdfName.Group) == null || pageDict.getAsDictionary(PdfName.Group).get(PdfName.CS) == null)) {\n", "            checkContentsForTransparency(pageDict);\n", "            checkAnnotationsForTransparency(pageDict.getAsArray(PdfName.Annots));\n", "            checkResourcesForTransparency(pageResources, new HashSet<PdfObject>());\n", "        }\n", "    }\n", "\n", "    @Override\n", "    protected void checkOutputIntents(PdfDictionary catalog) {\n", "        PdfArray outputIntents = catalog.getAsArray(PdfName.OutputIntents);\n", "        if (outputIntents == null)\n", "            return;\n", "\n", "        int i;\n", "        PdfObject destOutputProfile = null;\n", "        for (i = 0; i < outputIntents.size() && destOutputProfile == null; ++i) {\n", "            destOutputProfile = outputIntents.getAsDictionary(i).get(PdfName.DestOutputProfile);\n", "        }\n", "        for (; i < outputIntents.size(); ++i) {\n", "            PdfObject otherDestOutputProfile = outputIntents.getAsDictionary(i).get(PdfName.DestOutputProfile);\n", "            if (otherDestOutputProfile != null && destOutputProfile != otherDestOutputProfile) {\n", "                throw new PdfAConformanceException(PdfaExceptionMessageConstant.IF_OUTPUTINTENTS_ARRAY_HAS_MORE_THAN_ONE_ENTRY_WITH_DESTOUTPUTPROFILE_KEY_THE_SAME_INDIRECT_OBJECT_SHALL_BE_USED_AS_THE_VALUE_OF_THAT_OBJECT);\n", "            }\n", "        }\n", "\n", "        if (destOutputProfile != null) {\n", "            String deviceClass = IccProfile.getIccDeviceClass(((PdfStream) destOutputProfile).getBytes());\n", "            if (!ICC_DEVICE_CLASS_OUTPUT_PROFILE.equals(deviceClass) && !ICC_DEVICE_CLASS_MONITOR_PROFILE.equals(deviceClass)) {\n", "                throw new PdfAConformanceException(PdfaExceptionMessageConstant.PROFILE_STREAM_OF_OUTPUTINTENT_SHALL_BE_OUTPUT_PROFILE_PRTR_OR_MONITOR_PROFILE_MNTR);\n", "            }\n", "\n", "            String cs = IccProfile.getIccColorSpaceName(((PdfStream) destOutputProfile).getBytes());\n", "            if (!ICC_COLOR_SPACE_RGB.equals(cs) && !ICC_COLOR_SPACE_CMYK.equals(cs) && !ICC_COLOR_SPACE_GRAY.equals(cs)) {\n", "                throw new PdfAConformanceException(PdfaExceptionMessageConstant.OUTPUT_INTENT_COLOR_SPACE_SHALL_BE_EITHER_GRAY_RGB_OR_CMYK);\n", "            }\n", "        }\n", "    }\n", "\n", "    @Override\n", "    protected Set<PdfName> getForbiddenActions() {\n", "        return forbiddenActions;\n", "    }\n", "\n", "    @Override\n", "    protected Set<PdfName> getAllowedNamedActions() {\n", "        return allowedNamedActions;\n", "    }\n", "\n", "    /**\n", "     * {@inheritDoc}\n", "     */\n", "    @Override\n", "    protected void checkPageColorsUsages(PdfDictionary pageDict, PdfDictionary pageResources) {\n", "        if ((rgbIsUsed || cmykIsUsed || grayIsUsed || !rgbUsedObjects.isEmpty() || !cmykUsedObjects.isEmpty() ||\n", "                !grayUsedObjects.isEmpty()) && pdfAOutputIntentColorSpace == null) {\n", "            throw new PdfAConformanceException(PdfaExceptionMessageConstant.IF_DEVICE_RGB_CMYK_GRAY_USED_IN_FILE_THAT_FILE_SHALL_CONTAIN_PDFA_OUTPUTINTENT_OR_DEFAULT_RGB_CMYK_GRAY_IN_USAGE_CONTEXT);\n", "        }\n", "\n", "        if (rgbIsUsed || !rgbUsedObjects.isEmpty()) {\n", "            if (!ICC_COLOR_SPACE_RGB.equals(pdfAOutputIntentColorSpace)) {\n", "                throw new PdfAConformanceException(PdfaExceptionMessageConstant.DEVICERGB_MAY_BE_USED_ONLY_IF_THE_FILE_HAS_A_RGB_PDFA_OUTPUT_INTENT_OR_DEFAULTRGB_IN_USAGE_CONTEXT);\n", "            }\n", "        }\n", "        if (cmykIsUsed || !cmykUsedObjects.isEmpty()) {\n", "            if (!ICC_COLOR_SPACE_CMYK.equals(pdfAOutputIntentColorSpace)) {\n", "                throw new PdfAConformanceException(PdfaExceptionMessageConstant.DEVICECMYK_MAY_BE_USED_ONLY_IF_THE_FILE_HAS_A_CMYK_PDFA_OUTPUT_INTENT_OR_DEFAULTCMYK_IN_USAGE_CONTEXT);\n", "            }\n", "        }\n", "    }\n", "\n", "    private void checkOCProperties(PdfDictionary oCProperties) {\n", "        if (oCProperties != null) {\n", "            List<PdfDictionary> configList = new ArrayList<>();\n", "            PdfDictionary d = oCProperties.getAsDictionary(PdfName.D);\n", "            if (d != null) {\n", "                configList.add(d);\n", "            }\n", "            PdfArray configs = oCProperties.getAsArray(PdfName.Configs);\n", "            if (configs != null) {\n", "                for (PdfObject config : configs) {\n", "                    configList.add((PdfDictionary) config);\n", "                }\n", "            }\n", "\n", "            HashSet<PdfObject> ocgs = new HashSet<>();\n", "            PdfArray ocgsArray = oCProperties.getAsArray(PdfName.OCGs);\n", "            if (ocgsArray != null) {\n", "                for (PdfObject ocg : ocgsArray) {\n", "                    ocgs.add(ocg);\n", "                }\n", "            }\n", "\n", "            HashSet<String> names = new HashSet<>();\n", "\n", "            for (PdfDictionary config : configList) {\n", "                checkCatalogConfig(config, ocgs, names);\n", "            }\n", "        }\n", "    }\n", "\n", "    @Override\n", "    protected void checkImage(PdfStream image, PdfDictionary currentColorSpaces) {\n", "        PdfColorSpace colorSpace = null;\n", "        if (isAlreadyChecked(image)) {\n", "            colorSpace = checkedObjectsColorspace.get(image);\n", "            checkColorSpace(colorSpace, image, currentColorSpaces, true, null);\n", "            return;\n", "        }\n", "\n", "        PdfObject colorSpaceObj = image.get(PdfName.ColorSpace);\n", "        if (colorSpaceObj != null) {\n", "            colorSpace = PdfColorSpace.makeColorSpace(colorSpaceObj);\n", "            checkColorSpace(colorSpace, image, currentColorSpaces, true, null);\n", "            checkedObjectsColorspace.put(image, colorSpace);\n", "        }\n", "\n", "        if (image.containsKey(PdfName.Alternates)) {\n", "            throw new PdfAConformanceException(PdfaExceptionMessageConstant.AN_IMAGE_DICTIONARY_SHALL_NOT_CONTAIN_ALTERNATES_KEY);\n", "        }\n", "        if (image.containsKey(PdfName.OPI)) {\n", "            throw new PdfAConformanceException(PdfaExceptionMessageConstant.AN_IMAGE_DICTIONARY_SHALL_NOT_CONTAIN_OPI_KEY);\n", "        }\n", "\n", "        if (image.containsKey(PdfName.Interpolate) && (boolean) image.getAsBool(PdfName.Interpolate)) {\n", "            throw new PdfAConformanceException(PdfaExceptionMessageConstant.THE_VALUE_OF_INTERPOLATE_KEY_SHALL_BE_FALSE);\n", "        }\n", "        checkRenderingIntent(image.getAsName(PdfName.Intent));\n", "\n", "        if (image.getAsStream(PdfName.SMask) != null) {\n", "            transparencyObjects.add(image);\n", "        }\n", "\n", "        if (image.containsKey(PdfName.SMaskInData) && image.getAsInt(PdfName.SMaskInData) > 0) {\n", "            transparencyObjects.add(image);\n", "        }\n", "\n", "        if (PdfName.JPXDecode.equals(image.get(PdfName.Filter))) {\n", "            Jpeg2000ImageData jpgImage = (Jpeg2000ImageData) ImageDataFactory.createJpeg2000(image.getBytes(false));\n", "            Jpeg2000ImageData.Parameters params = jpgImage.getParameters();\n", "\n", "            /* Concerning !params.isJpxBaseline check\n", "             *\n", "             * In pdf/a-2 ISO (ISO 19005-2:2011  6.2.8.3 JPEG2000) is stated that:\n", "             * \"Only the JPX baseline set of features, ... , shall be used.\"\n", "             *\n", "             * Also in jpeg2000 ISO (ISO/IEC 15444-2:2004   Annex M: M.9.2 Support for JPX feature set) is stated that:\n", "             * \"In general, a JPX reader is not required to support the entire set of features defined within this Recommendation |International Standard.\n", "             * However, to promote interoperability, the following baseline set of features is defined. Files that\n", "             * are written in such a way as to allow a reader that supports only this JPX baseline set of features to properly open the\n", "             * file shall contain a CLi field in the File Type box with the value 'jpxb' (0x6a70 7862); all JPX baseline readers are\n", "             * required to properly support all files with this code in the compatibility list in the File Type box.\"\n", "             *\n", "             * Therefore, I assumed that a file, which doesn't has the jpxb flag (which can be checked with the isJpxBaseline flag)\n", "             * uses not only JPX baseline set of features.\n", "             *\n", "             * But, all the test files used in iText5 failed on this check, so may be my assumption is wrong.\n", "             */\n", "            if (!params.isJp2 /*|| !params.isJpxBaseline*/) {\n", "                throw new PdfAConformanceException(PdfaExceptionMessageConstant.ONLY_JPX_BASELINE_SET_OF_FEATURES_SHALL_BE_USED);\n", "            }\n", "\n", "            if (params.numOfComps != 1 && params.numOfComps != 3 && params.numOfComps != 4) {\n", "                throw new PdfAConformanceException(PdfaExceptionMessageConstant.THE_NUMBER_OF_COLOUR_CHANNELS_IN_THE_JPEG2000_DATA_SHALL_BE_1_3_OR_4);\n", "            }\n", "\n", "            if (params.colorSpecBoxes != null && params.colorSpecBoxes.size() > 1) {\n", "                int numOfApprox0x01 = 0;\n", "                for (Jpeg2000ImageData.ColorSpecBox colorSpecBox : params.colorSpecBoxes) {\n", "                    if (colorSpecBox.getApprox() == 1) {\n", "                        ++numOfApprox0x01;\n", "                        if (numOfApprox0x01 == 1 &&\n", "                                colorSpecBox.getMeth() != 1 && colorSpecBox.getMeth() != 2 && colorSpecBox.getMeth() != 3) {\n", "                            throw new PdfAConformanceException(PdfaExceptionMessageConstant.THE_VALUE_OF_THE_METH_ENTRY_IN_COLR_BOX_SHALL_BE_1_2_OR_3);\n", "                        }\n", "\n", "                        if (image.get(PdfName.ColorSpace) == null) {\n", "                            switch (colorSpecBox.getEnumCs()) {\n", "                                case 1:\n", "                                    PdfDeviceCs.Gray deviceGrayCs = new PdfDeviceCs.Gray();\n", "                                    checkColorSpace(deviceGrayCs, image, currentColorSpaces, true, null);\n", "                                    checkedObjectsColorspace.put(image, deviceGrayCs);\n", "                                    break;\n", "                                case 3:\n", "                                    PdfDeviceCs.Rgb deviceRgbCs = new PdfDeviceCs.Rgb();\n", "                                    checkColorSpace(deviceRgbCs, image, currentColorSpaces, true, null);\n", "                                    checkedObjectsColorspace.put(image, deviceRgbCs);\n", "                                    break;\n", "                                case 12:\n", "                                    PdfDeviceCs.Cmyk deviceCmykCs = new PdfDeviceCs.Cmyk();\n", "                                    checkColorSpace(deviceCmykCs, image, currentColorSpaces, true, null);\n", "                                    checkedObjectsColorspace.put(image, deviceCmykCs);\n", "                                    break;\n", "                            }\n", "                        }\n", "                    }\n", "                    if (colorSpecBox.getEnumCs() == 19) {\n", "                        throw new PdfAConformanceException(PdfaExceptionMessageConstant.JPEG2000_ENUMERATED_COLOUR_SPACE_19_CIEJAB_SHALL_NOT_BE_USED);\n", "                    }\n", "                }\n", "                if (numOfApprox0x01 != 1) {\n", "                    throw new PdfAConformanceException(PdfaExceptionMessageConstant.EXACTLY_ONE_COLOUR_SPACE_SPECIFICATION_SHALL_HAVE_THE_VALUE_0X01_IN_THE_APPROX_FIELD);\n", "                }\n", "            }\n", "\n", "            if (jpgImage.getBpc() < 1 || jpgImage.getBpc() > 38) {\n", "                throw new PdfAConformanceException(PdfaExceptionMessageConstant.THE_BIT_DEPTH_OF_THE_JPEG2000_DATA_SHALL_HAVE_A_VALUE_IN_THE_RANGE_1_TO_38);\n", "            }\n", "\n", "            // The Bits Per Component box specifies the bit depth of each component.\n", "            // If the bit depth of all components in the codestream is the same (in both sign and precision),\n", "            // then this box shall not be found. Otherwise, this box specifies the bit depth of each individual component.\n", "            if (params.bpcBoxData != null) {\n", "                throw new PdfAConformanceException(PdfaExceptionMessageConstant.ALL_COLOUR_CHANNELS_IN_THE_JPEG2000_DATA_SHALL_HAVE_THE_SAME_BIT_DEPTH);\n", "            }\n", "        }\n", "    }\n", "\n", "    @Override\n", "    public void checkFontGlyphs(PdfFont font, PdfStream contentStream) {\n", "        if (font instanceof PdfType3Font) {\n", "            checkType3FontGlyphs((PdfType3Font) font, contentStream);\n", "        }\n", "    }\n", "\n", "    /**\n", "     * For pdf/a-2+ checkers use the {@code checkFormXObject(PdfStream form, PdfStream contentStream)} method\n", "     *\n", "     * @param form the {@link PdfStream} to check\n", "     */\n", "    @Override\n", "    @Deprecated\n", "    protected void checkFormXObject(PdfStream form) {\n", "        checkFormXObject(form, null);\n", "    }\n", "\n", "    /**\n", "     * Verify the conformity of the Form XObject with appropriate\n", "     * specification. Throws PdfAConformanceException if any discrepancy was found\n", "     *\n", "     * @param form the {@link PdfStream} to be checked\n", "     * @param contentStream the {@link PdfStream} current content stream\n", "     */\n", "    protected void checkFormXObject(PdfStream form, PdfStream contentStream) {\n", "        if (isAlreadyChecked(form)) return;\n", "\n", "        if (form.containsKey(PdfName.OPI)) {\n", "            throw new PdfAConformanceException(PdfaExceptionMessageConstant.A_FORM_XOBJECT_DICTIONARY_SHALL_NOT_CONTAIN_OPI_KEY);\n", "        }\n", "        if (form.containsKey(PdfName.PS)) {\n", "            throw new PdfAConformanceException(PdfaExceptionMessageConstant.A_FORM_XOBJECT_DICTIONARY_SHALL_NOT_CONTAIN_PS_KEY);\n", "        }\n", "        if (PdfName.PS.equals(form.getAsName(PdfName.Subtype2))) {\n", "            throw new PdfAConformanceException(PdfaExceptionMessageConstant.A_FORM_XOBJECT_DICTIONARY_SHALL_NOT_CONTAIN_SUBTYPE2_KEY_WITH_A_VALUE_OF_PS);\n", "        }\n", "\n", "        checkTransparencyGroup(form, contentStream);\n", "\n", "        checkResources(form.getAsDictionary(PdfName.Resources), contentStream != null ? contentStream : form);\n", "        checkContentStream(form);\n", "    }\n", "\n", "    /**\n", "     * Verify the conformity of the transparency group XObject with appropriate\n", "     * specification. Throws PdfAConformanceException if any discrepancy was found\n", "     *\n", "     * @param form the {@link PdfStream} transparency group XObject.\n", "     * @param contentStream the {@link PdfStream} current content stream\n", "     */\n", "    protected void checkTransparencyGroup(PdfStream form, PdfStream contentStream) {\n", "        if (isContainsTransparencyGroup(form)) {\n", "            if (contentStream != null) {\n", "                transparencyObjects.add(contentStream);\n", "            } else {\n", "                transparencyObjects.add(form);\n", "            }\n", "            PdfObject cs = form.getAsDictionary(PdfName.Group).get(PdfName.CS);\n", "            PdfDictionary resources = form.getAsDictionary(PdfName.Resources);\n", "            if (cs != null && resources != null) {\n", "                PdfDictionary currentColorSpaces = resources.getAsDictionary(PdfName.ColorSpace);\n", "                checkColorSpace(PdfColorSpace.makeColorSpace(cs), contentStream != null ? contentStream : form,\n", "                        currentColorSpaces, true, null);\n", "            }\n", "        }\n", "    }\n", "\n", "    /**\n", "     * Check optional content configuration dictionary against AS key.\n", "     *\n", "     * @param config a content configuration dictionary\n", "     */\n", "    protected void checkContentConfigurationDictAgainstAsKey(PdfDictionary config) {\n", "        if (config.containsKey(PdfName.AS)) {\n", "            throw new PdfAConformanceException(PdfAConformanceException.THE_AS_KEY_SHALL_NOT_APPEAR_IN_ANY_OPTIONAL_CONTENT_CONFIGURATION_DICTIONARY);\n", "        }\n", "    }\n", "\n", "    /**\n", "     * Retrieve transparency error message valid for the pdf/a standard being used.\n", "     *\n", "     * @return error message.\n", "     */\n", "    protected String getTransparencyErrorMessage() {\n", "        return TRANSPARENCY_ERROR_MESSAGE;\n", "    }\n", "\n", "    /**\n", "     * Check if blendMode is compatible with pdf/a standard being used.\n", "     *\n", "     * @param blendMode blend mode name to check.\n", "     */\n", "    protected void checkBlendMode(PdfName blendMode) {\n", "        if (!allowedBlendModes.contains(blendMode)) {\n", "            throw new PdfAConformanceException(PdfAConformanceException.ONLY_STANDARD_BLEND_MODES_SHALL_BE_USED_FOR_THE_VALUE_OF_THE_BM_KEY_IN_AN_EXTENDED_GRAPHIC_STATE_DICTIONARY);\n", "        }\n", "    }\n", "\n", "    void checkContentsForTransparency(PdfDictionary pageDict) {\n", "        PdfStream contentStream = pageDict.getAsStream(PdfName.Contents);\n", "        if (contentStream != null && transparencyObjects.contains(contentStream)) {\n", "            throw new PdfAConformanceException(getTransparencyErrorMessage());\n", "        } else {\n", "            PdfArray contentSteamArray = pageDict.getAsArray(PdfName.Contents);\n", "            if (contentSteamArray != null) {\n", "                for (int i = 0; i < contentSteamArray.size(); i++) {\n", "                    if (transparencyObjects.contains(contentSteamArray.get(i))) {\n", "                        throw new PdfAConformanceException(getTransparencyErrorMessage());\n", "                    }\n", "                }\n", "            }\n", "        }\n", "    }\n", "\n", "    void checkAnnotationsForTransparency(PdfArray annotations) {\n", "        if (annotations == null) {\n", "            return;\n", "        }\n", "        for (int i = 0; i < annotations.size(); ++i) {\n", "            PdfDictionary annot = annotations.getAsDictionary(i);\n", "            if (this.transparencyObjects.contains(annot)) {\n", "                throw new PdfAConformanceException(getTransparencyErrorMessage());\n", "            }\n", "\n", "            PdfDictionary ap = annot.getAsDictionary(PdfName.AP);\n", "            if (ap != null) {\n", "                checkAppearanceStreamForTransparency(ap, new HashSet<PdfObject>());\n", "            }\n", "        }\n", "    }\n", "\n", "    private void checkAppearanceStreamForTransparency(PdfDictionary ap, Set<PdfObject> checkedObjects) {\n", "        if (checkedObjects.contains(ap)) {\n", "            return;\n", "        } else {\n", "            checkedObjects.add(ap);\n", "        }\n", "\n", "        for (final PdfObject val : ap.values()) {\n", "            if (this.transparencyObjects.contains(val)) {\n", "                throw new PdfAConformanceException(getTransparencyErrorMessage());\n", "            } else if (val.isDictionary()) {\n", "                checkAppearanceStreamForTransparency((PdfDictionary) val, checkedObjects);\n", "            } else if (val.isStream()) {\n", "                checkObjectWithResourcesForTransparency(val, checkedObjects);\n", "            }\n", "        }\n", "    }\n", "\n", "    private void checkObjectWithResourcesForTransparency(PdfObject objectWithResources, Set<PdfObject> checkedObjects) {\n", "        if (checkedObjects.contains(objectWithResources)) {\n", "            return;\n", "        } else {\n", "            checkedObjects.add(objectWithResources);\n", "        }\n", "\n", "        if (this.transparencyObjects.contains(objectWithResources)) {\n", "            throw new PdfAConformanceException(getTransparencyErrorMessage());\n", "        }\n", "        if (objectWithResources instanceof PdfDictionary) {\n", "            checkResourcesForTransparency(((PdfDictionary) objectWithResources).getAsDictionary(PdfName.Resources), checkedObjects);\n", "        }\n", "    }\n", "\n", "    void checkResourcesForTransparency(PdfDictionary resources, Set<PdfObject> checkedObjects) {\n", "        if (resources != null) {\n", "            checkSingleResourceTypeForTransparency(resources.getAsDictionary(PdfName.XObject), checkedObjects);\n", "            checkSingleResourceTypeForTransparency(resources.getAsDictionary(PdfName.Pattern), checkedObjects);\n", "        }\n", "    }\n", "\n", "    private void checkSingleResourceTypeForTransparency(PdfDictionary singleResourceDict, Set<PdfObject> checkedObjects) {\n", "        if (singleResourceDict != null) {\n", "            for (PdfObject resource : singleResourceDict.values()) {\n", "                checkObjectWithResourcesForTransparency(resource, checkedObjects);\n", "            }\n", "        }\n", "    }\n", "\n", "    private void checkSeparationInsideDeviceN(PdfArray separation, PdfObject deviceNColorSpace, PdfObject deviceNTintTransform) {\n", "        if (!isAltCSIsTheSame(separation.get(2), deviceNColorSpace) ||\n", "                !deviceNTintTransform.equals(separation.get(3))) {\n", "            logger.warn(PdfAConformanceLogMessageConstant.TINT_TRANSFORM_AND_ALTERNATE_SPACE_OF_SEPARATION_ARRAYS_IN_THE_COLORANTS_OF_DEVICE_N_SHOULD_BE_CONSISTENT_WITH_SAME_ATTRIBUTES_OF_DEVICE_N);\n", "        }\n", "        checkSeparationCS(separation);\n", "    }\n", "\n", "    private void checkSeparationCS(PdfArray separation) {\n", "        if (separationColorSpaces.containsKey(separation.getAsName(0))) {\n", "            boolean altCSIsTheSame;\n", "            boolean tintTransformIsTheSame;\n", "\n", "            PdfArray sameNameSeparation = separationColorSpaces.get(separation.getAsName(0));\n", "            PdfObject cs1 = separation.get(2);\n", "            PdfObject cs2 = sameNameSeparation.get(2);\n", "            altCSIsTheSame = isAltCSIsTheSame(cs1, cs2);\n", "            // TODO(DEVSIX-1672) in fact need to check if objects content is equal. ISO 19005-2, 6.2.4.4 \"Separation and DeviceN colour spaces\":\n", "            // In evaluating equivalence, the PDF objects shall be compared, rather than the computational\n", "            // result of the use of those PDF objects. Compression and whether or not an object is direct or indirect shall be ignored.\n", "            PdfObject f1Obj = separation.get(3);\n", "            PdfObject f2Obj = sameNameSeparation.get(3);\n", "            //Can be a stream or dict\n", "            boolean bothAllowedType = (f1Obj.getType() == f2Obj.getType()) && (f1Obj.isDictionary() || f1Obj.isStream());\n", "            //Check if the indirect references are equal\n", "            tintTransformIsTheSame = bothAllowedType && f1Obj.equals(f2Obj);\n", "\n", "\n", "            if (!altCSIsTheSame || !tintTransformIsTheSame) {\n", "                throw new PdfAConformanceException(PdfaExceptionMessageConstant.TINT_TRANSFORM_AND_ALTERNATE_SPACE_SHALL_BE_THE_SAME_FOR_THE_ALL_SEPARATION_CS_WITH_THE_SAME_NAME);\n", "            }\n", "        } else {\n", "            separationColorSpaces.put(separation.getAsName(0), separation);\n", "        }\n", "    }\n", "\n", "    private boolean isAltCSIsTheSame(PdfObject cs1, PdfObject cs2) {\n", "        boolean altCSIsTheSame = false;\n", "        if (cs1 instanceof PdfName) {\n", "            altCSIsTheSame = cs1.equals(cs2);\n", "        } else if (cs1 instanceof PdfArray && cs2 instanceof PdfArray) {\n", "            // TODO(DEVSIX-1672) in fact need to check if objects content is equal. ISO 19005-2, 6.2.4.4 \"Separation and DeviceN colour spaces\":\n", "            // In evaluating equivalence, the PDF objects shall be compared, rather than the computational\n", "            // result of the use of those PDF objects. Compression and whether or not an object is direct or indirect shall be ignored.\n", "            altCSIsTheSame = ((PdfArray) cs1).get(0).equals(((PdfArray) cs1).get(0));\n", "        }\n", "        return altCSIsTheSame;\n", "    }\n", "\n", "    private void checkCatalogConfig(PdfDictionary config, HashSet<PdfObject> ocgs, HashSet<String> names)  {\n", "        PdfString name = config.getAsString(PdfName.Name);\n", "        if (name == null) {\n", "            throw new PdfAConformanceException(PdfaExceptionMessageConstant.OPTIONAL_CONTENT_CONFIGURATION_DICTIONARY_SHALL_CONTAIN_NAME_ENTRY);\n", "        }\n", "        if (!names.add(name.toUnicodeString())) {\n", "            throw new PdfAConformanceException(PdfaExceptionMessageConstant.VALUE_OF_NAME_ENTRY_SHALL_BE_UNIQUE_AMONG_ALL_OPTIONAL_CONTENT_CONFIGURATION_DICTIONARIES);\n", "        }\n", "        checkContentConfigurationDictAgainstAsKey(config);\n", "\n", "        PdfArray orderArray = config.getAsArray(PdfName.Order);\n", "        if (orderArray != null) {\n", "            HashSet<PdfObject> order = new HashSet<>();\n", "            fillOrderRecursively(orderArray, order);\n", "            if (!order.equals(ocgs)) {\n", "                throw new PdfAConformanceException(\n", "                        PdfaExceptionMessageConstant.ORDER_ARRAY_SHALL_CONTAIN_REFERENCES_TO_ALL_OCGS);\n", "            }\n", "        }\n", "    }\n", "\n", "    private void fillOrderRecursively(PdfArray orderArray, Set<PdfObject> order) {\n", "        for (PdfObject orderItem : orderArray) {\n", "            if (!orderItem.isArray()) {\n", "                order.add(orderItem);\n", "            } else {\n", "                fillOrderRecursively((PdfArray) orderItem, order);\n", "            }\n", "        }\n", "    }\n", "\n", "    private boolean checkDefaultCS(PdfObject pdfObject, PdfDictionary currentColorSpaces, Boolean fill, PdfName defaultCsName,\n", "            int numOfComponents) {\n", "        if (currentColorSpaces == null)\n", "            return false;\n", "        if (!currentColorSpaces.containsKey(defaultCsName))\n", "            return false;\n", "\n", "        PdfObject defaultCsObj = currentColorSpaces.get(defaultCsName);\n", "        PdfColorSpace defaultCs = PdfColorSpace.makeColorSpace(defaultCsObj);\n", "        if (defaultCs instanceof PdfDeviceCs)\n", "            throw new PdfAConformanceException(PdfaExceptionMessageConstant.COLOR_SPACE_0_SHALL_BE_DEVICE_INDEPENDENT).setMessageParams(defaultCsName.toString());\n", "\n", "        if (defaultCs.getNumberOfComponents() != numOfComponents)\n", "            throw new PdfAConformanceException(PdfaExceptionMessageConstant.COLOR_SPACE_0_SHALL_HAVE_1_COMPONENTS).setMessageParams(defaultCsName.getValue(), numOfComponents);\n", "\n", "        checkColorSpace(defaultCs, pdfObject, currentColorSpaces, false, fill);\n", "        return true;\n", "    }\n", "\n", "    private void checkType3FontGlyphs(PdfType3Font font, PdfStream contentStream) {\n", "        for (int i = 0; i <= PdfFont.SIMPLE_FONT_MAX_CHAR_CODE_VALUE; ++i) {\n", "            FontEncoding fontEncoding = font.getFontEncoding();\n", "            if (fontEncoding.canDecode(i)) {\n", "                Type3Glyph type3Glyph = font.getType3Glyph(fontEncoding.getUnicode(i));\n", "                if (type3Glyph != null) {\n", "                    checkFormXObject(type3Glyph.getContentStream(), contentStream);\n", "                }\n", "            }\n", "        }\n", "    }\n", "\n", "    private static final class UpdateCanvasGraphicsState extends CanvasGraphicsState {\n", "        public UpdateCanvasGraphicsState(PdfDictionary extGStateDict) {\n", "            updateFromExtGState(new PdfExtGState(extGStateDict));\n", "        }\n", "    }\n", "}\n"], "test_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.pdfa.checker;\n", "\n", "import com.itextpdf.commons.utils.MessageFormatUtil;\n", "import com.itextpdf.kernel.colors.Color;\n", "import com.itextpdf.kernel.colors.PatternColor;\n", "import com.itextpdf.kernel.pdf.PdfAConformanceLevel;\n", "import com.itextpdf.kernel.pdf.PdfArray;\n", "import com.itextpdf.kernel.pdf.PdfBoolean;\n", "import com.itextpdf.kernel.pdf.PdfDictionary;\n", "import com.itextpdf.kernel.pdf.PdfName;\n", "import com.itextpdf.kernel.pdf.PdfNumber;\n", "import com.itextpdf.kernel.pdf.PdfStream;\n", "import com.itextpdf.kernel.pdf.PdfString;\n", "import com.itextpdf.kernel.pdf.canvas.CanvasGraphicsState;\n", "import com.itextpdf.kernel.pdf.colorspace.PdfDeviceCs;\n", "import com.itextpdf.kernel.pdf.colorspace.PdfPattern;\n", "import com.itextpdf.kernel.pdf.colorspace.PdfSpecialCs;\n", "import com.itextpdf.kernel.pdf.extgstate.PdfExtGState;\n", "import com.itextpdf.kernel.pdf.function.PdfType4Function;\n", "import com.itextpdf.pdfa.exceptions.PdfAConformanceException;\n", "import com.itextpdf.pdfa.exceptions.PdfaExceptionMessageConstant;\n", "import com.itextpdf.test.AssertUtil;\n", "import com.itextpdf.test.ExtendedITextTest;\n", "import com.itextpdf.test.annotations.type.UnitTest;\n", "\n", "import java.nio.charset.StandardCharsets;\n", "import java.util.ArrayList;\n", "import java.util.List;\n", "import org.junit.Assert;\n", "import org.junit.Test;\n", "import org.junit.experimental.categories.Category;\n", "\n", "@Category(UnitTest.class)\n", "public class PdfA2CheckerTest extends ExtendedITextTest {\n", "    private PdfA2Checker pdfA2Checker = new PdfA2Checker(PdfAConformanceLevel.PDF_A_2B);\n", "\n", "    @Test\n", "    public void checkNameEntryShouldBeUniqueBetweenDefaultAndAdditionalConfigs() {\n", "        PdfDictionary ocProperties = new PdfDictionary();\n", "        PdfDictionary d = new PdfDictionary();\n", "        d.put(PdfName.Name, new PdfString(\"CustomName\"));\n", "        PdfArray configs = new PdfArray();\n", "        PdfDictionary config = new PdfDictionary();\n", "        config.put(PdfName.Name, new PdfString(\"CustomName\"));\n", "        configs.add(config);\n", "        ocProperties.put(PdfName.D, d);\n", "        ocProperties.put(PdfName.Configs, configs);\n", "\n", "        PdfDictionary catalog = new PdfDictionary();\n", "        catalog.put(PdfName.OCProperties, ocProperties);\n", "\n", "        Exception e = Assert.assertThrows(PdfAConformanceException.class,\n", "                () -> pdfA2Checker.checkCatalogValidEntries(catalog)\n", "        );\n", "        Assert.assertEquals(PdfaExceptionMessageConstant.VALUE_OF_NAME_ENTRY_SHALL_BE_UNIQUE_AMONG_ALL_OPTIONAL_CONTENT_CONFIGURATION_DICTIONARIES,\n", "                e.getMessage());\n", "    }\n", "\n", "    @Test\n", "    public void checkAsKeyInContentConfigDictTest() {\n", "        PdfDictionary ocProperties = new PdfDictionary();\n", "        PdfArray configs = new PdfArray();\n", "        PdfDictionary config = new PdfDictionary();\n", "        config.put(PdfName.Name, new PdfString(\"CustomName\"));\n", "        config.put(PdfName.AS, new PdfArray());\n", "        configs.add(config);\n", "        ocProperties.put(PdfName.Configs, configs);\n", "\n", "        PdfDictionary catalog = new PdfDictionary();\n", "        catalog.put(PdfName.OCProperties, ocProperties);\n", "\n", "        Exception e = Assert.assertThrows(PdfAConformanceException.class, () -> pdfA2Checker.checkCatalogValidEntries(catalog));\n", "        Assert.assertEquals(PdfAConformanceException.THE_AS_KEY_SHALL_NOT_APPEAR_IN_ANY_OPTIONAL_CONTENT_CONFIGURATION_DICTIONARY,\n", "                e.getMessage());\n", "    }\n", "\n", "    @Test\n", "    public void checkNameEntryShouldBeUniqueBetweenAdditionalConfigs() {\n", "        PdfDictionary ocProperties = new PdfDictionary();\n", "        PdfDictionary d = new PdfDictionary();\n", "        d.put(PdfName.Name, new PdfString(\"CustomName\"));\n", "        PdfArray configs = new PdfArray();\n", "        PdfDictionary config = new PdfDictionary();\n", "        config.put(PdfName.Name, new PdfString(\"CustomName1\"));\n", "        configs.add(config);\n", "        config = new PdfDictionary();\n", "        config.put(PdfName.Name, new PdfString(\"CustomName1\"));\n", "        configs.add(config);\n", "        ocProperties.put(PdfName.D, d);\n", "        ocProperties.put(PdfName.Configs, configs);\n", "\n", "        PdfDictionary catalog = new PdfDictionary();\n", "        catalog.put(PdfName.OCProperties, ocProperties);\n", "\n", "        Exception e = Assert.assertThrows(PdfAConformanceException.class,\n", "                () -> pdfA2Checker.checkCatalogValidEntries(catalog)\n", "        );\n", "        Assert.assertEquals(PdfaExceptionMessageConstant.VALUE_OF_NAME_ENTRY_SHALL_BE_UNIQUE_AMONG_ALL_OPTIONAL_CONTENT_CONFIGURATION_DICTIONARIES,\n", "                e.getMessage());\n", "    }\n", "\n", "    @Test\n", "    public void checkOCCDContainName() {\n", "        PdfDictionary ocProperties = new PdfDictionary();\n", "        PdfDictionary d = new PdfDictionary();\n", "        PdfArray configs = new PdfArray();\n", "        PdfDictionary config = new PdfDictionary();\n", "        config.put(PdfName.Name, new PdfString(\"CustomName1\"));\n", "        configs.add(config);\n", "        config = new PdfDictionary();\n", "        config.put(PdfName.Name, new PdfString(\"CustomName2\"));\n", "        configs.add(config);\n", "        ocProperties.put(PdfName.D, d);\n", "        ocProperties.put(PdfName.Configs, configs);\n", "\n", "        PdfDictionary catalog = new PdfDictionary();\n", "        catalog.put(PdfName.OCProperties, ocProperties);\n", "\n", "        Exception e = Assert.assertThrows(PdfAConformanceException.class,\n", "                () -> pdfA2Checker.checkCatalogValidEntries(catalog)\n", "        );\n", "        Assert.assertEquals(PdfaExceptionMessageConstant.OPTIONAL_CONTENT_CONFIGURATION_DICTIONARY_SHALL_CONTAIN_NAME_ENTRY,\n", "                e.getMessage());\n", "    }\n", "\n", "    @Test\n", "    public void checkOrderArrayDoesNotContainRedundantReferences()  {\n", "        PdfDictionary ocProperties = new PdfDictionary();\n", "        PdfDictionary d = new PdfDictionary();\n", "        d.put(PdfName.Name, new PdfString(\"CustomName\"));\n", "        PdfArray configs = new PdfArray();\n", "        PdfDictionary config = new PdfDictionary();\n", "        config.put(PdfName.Name, new PdfString(\"CustomName1\"));\n", "        PdfArray order = new PdfArray();\n", "        PdfDictionary orderItem = new PdfDictionary();\n", "        orderItem.put(PdfName.Name, new PdfString(\"CustomName2\"));\n", "        order.add(orderItem);\n", "        PdfDictionary orderItem1 = new PdfDictionary();\n", "        orderItem1.put(PdfName.Name, new PdfString(\"CustomName3\"));\n", "        order.add(orderItem1);\n", "        config.put(PdfName.Order, order);\n", "\n", "        PdfArray ocgs = new PdfArray();\n", "        ocgs.add(orderItem);\n", "\n", "        ocProperties.put(PdfName.OCGs, ocgs);\n", "\n", "        configs.add(config);\n", "\n", "\n", "        ocProperties.put(PdfName.D, d);\n", "        ocProperties.put(PdfName.Configs, configs);\n", "\n", "        PdfDictionary catalog = new PdfDictionary();\n", "        catalog.put(PdfName.OCProperties, ocProperties);\n", "\n", "        Exception e = Assert.assertThrows(PdfAConformanceException.class,\n", "                () -> pdfA2Checker.checkCatalogValidEntries(catalog)\n", "        );\n", "        Assert.assertEquals(PdfaExceptionMessageConstant.ORDER_ARRAY_SHALL_CONTAIN_REFERENCES_TO_ALL_OCGS, e.getMessage());\n", "    }\n", "\n", "    @Test\n", "    public void checkOrderArrayContainsReferencesToAllOCGs() {\n", "        PdfDictionary ocProperties = new PdfDictionary();\n", "        PdfDictionary d = new PdfDictionary();\n", "        d.put(PdfName.Name, new PdfString(\"CustomName\"));\n", "        PdfArray configs = new PdfArray();\n", "        PdfDictionary config = new PdfDictionary();\n", "        config.put(PdfName.Name, new PdfString(\"CustomName1\"));\n", "        PdfArray order = new PdfArray();\n", "        PdfDictionary orderItem = new PdfDictionary();\n", "        orderItem.put(PdfName.Name, new PdfString(\"CustomName2\"));\n", "        order.add(orderItem);\n", "        PdfDictionary orderItem1 = new PdfDictionary();\n", "        orderItem1.put(PdfName.Name, new PdfString(\"CustomName3\"));\n", "        config.put(PdfName.Order, order);\n", "\n", "        PdfArray ocgs = new PdfArray();\n", "        ocgs.add(orderItem);\n", "        ocgs.add(orderItem1);\n", "\n", "        ocProperties.put(PdfName.OCGs, ocgs);\n", "\n", "        configs.add(config);\n", "\n", "        ocProperties.put(PdfName.D, d);\n", "        ocProperties.put(PdfName.Configs, configs);\n", "\n", "        PdfDictionary catalog = new PdfDictionary();\n", "        catalog.put(PdfName.OCProperties, ocProperties);\n", "\n", "        Exception e = Assert.assertThrows(PdfAConformanceException.class,\n", "                () -> pdfA2Checker.checkCatalogValidEntries(catalog)\n", "        );\n", "        Assert.assertEquals(PdfaExceptionMessageConstant.ORDER_ARRAY_SHALL_CONTAIN_REFERENCES_TO_ALL_OCGS, e.getMessage());\n", "    }\n", "\n", "    @Test\n", "    public void checkOrderArrayAndOCGsMatch() {\n", "        PdfDictionary ocProperties = new PdfDictionary();\n", "        PdfDictionary d = new PdfDictionary();\n", "        d.put(PdfName.Name, new PdfString(\"CustomName\"));\n", "        PdfArray configs = new PdfArray();\n", "        PdfDictionary config = new PdfDictionary();\n", "        config.put(PdfName.Name, new PdfString(\"CustomName1\"));\n", "        PdfArray order = new PdfArray();\n", "        PdfDictionary orderItem = new PdfDictionary();\n", "        orderItem.put(PdfName.Name, new PdfString(\"CustomName2\"));\n", "        order.add(orderItem);\n", "        PdfDictionary orderItem1 = new PdfDictionary();\n", "        orderItem1.put(PdfName.Name, new PdfString(\"CustomName3\"));\n", "        order.add(orderItem1);\n", "        config.put(PdfName.Order, order);\n", "\n", "        PdfArray ocgs = new PdfArray();\n", "        PdfDictionary orderItem2 = new PdfDictionary();\n", "        orderItem2.put(PdfName.Name, new PdfString(\"CustomName4\"));\n", "        ocgs.add(orderItem2);\n", "        PdfDictionary orderItem3 = new PdfDictionary();\n", "        orderItem3.put(PdfName.Name, new PdfString(\"CustomName5\"));\n", "        ocgs.add(orderItem3);\n", "\n", "        ocProperties.put(PdfName.OCGs, ocgs);\n", "\n", "        configs.add(config);\n", "\n", "        ocProperties.put(PdfName.D, d);\n", "        ocProperties.put(PdfName.Configs, configs);\n", "\n", "        PdfDictionary catalog = new PdfDictionary();\n", "        catalog.put(PdfName.OCProperties, ocProperties);\n", "\n", "        Exception e = Assert.assertThrows(PdfAConformanceException.class,\n", "                () -> pdfA2Checker.checkCatalogValidEntries(catalog)\n", "        );\n", "        Assert.assertEquals(PdfaExceptionMessageConstant.ORDER_ARRAY_SHALL_CONTAIN_REFERENCES_TO_ALL_OCGS, e.getMessage());\n", "    }\n", "\n", "    @Test\n", "    public void checkAbsenceOfOptionalConfigEntryAllowed() {\n", "        PdfDictionary ocProperties = new PdfDictionary();\n", "\n", "        PdfDictionary d = new PdfDictionary();\n", "        d.put(PdfName.Name, new PdfString(\"CustomName\"));\n", "\n", "        PdfDictionary orderItem = new PdfDictionary();\n", "        orderItem.put(PdfName.Name, new PdfString(\"CustomName2\"));\n", "\n", "        PdfArray ocgs = new PdfArray();\n", "        ocgs.add(orderItem);\n", "\n", "        ocProperties.put(PdfName.OCGs, ocgs);\n", "        ocProperties.put(PdfName.D, d);\n", "\n", "        PdfDictionary catalog = new PdfDictionary();\n", "        catalog.put(PdfName.OCProperties, ocProperties);\n", "\n", "        pdfA2Checker.checkCatalogValidEntries(catalog);\n", "\n", "        // checkCatalogValidEntries doesn't change the state of any object\n", "        // and doesn't return any value. The only result is exception which\n", "        // was or wasn't thrown. Successful scenario is tested here therefore\n", "        // no assertion is provided\n", "    }\n", "\n", "    @Test\n", "    public void checkAbsenceOfOptionalOrderEntryAllowed() {\n", "        PdfDictionary ocProperties = new PdfDictionary();\n", "\n", "        PdfDictionary d = new PdfDictionary();\n", "        d.put(PdfName.Name, new PdfString(\"CustomName\"));\n", "\n", "        PdfDictionary orderItem = new PdfDictionary();\n", "        orderItem.put(PdfName.Name, new PdfString(\"CustomName2\"));\n", "\n", "        PdfArray ocgs = new PdfArray();\n", "        ocgs.add(orderItem);\n", "\n", "        PdfArray configs = new PdfArray();\n", "\n", "        PdfDictionary config = new PdfDictionary();\n", "        config.put(PdfName.Name, new PdfString(\"CustomName1\"));\n", "\n", "        configs.add(config);\n", "\n", "        ocProperties.put(PdfName.OCGs, ocgs);\n", "        ocProperties.put(PdfName.D, d);\n", "        ocProperties.put(PdfName.Configs, configs);\n", "\n", "        PdfDictionary catalog = new PdfDictionary();\n", "        catalog.put(PdfName.OCProperties, ocProperties);\n", "\n", "        pdfA2Checker.checkCatalogValidEntries(catalog);\n", "\n", "\n", "        // checkCatalogValidEntries doesn't change the state of any object\n", "        // and doesn't return any value. The only result is exception which\n", "        // was or wasn't thrown. Successful scenario is tested here therefore\n", "        // no assertion is provided\n", "    }\n", "\n", "    @Test\n", "    public void checkCatalogDictionaryWithoutAlternatePresentations() {\n", "        PdfDictionary names = new PdfDictionary();\n", "        names.put(PdfName.AlternatePresentations, new PdfDictionary());\n", "\n", "        PdfDictionary catalog = new PdfDictionary();\n", "        catalog.put(PdfName.Names, names);\n", "\n", "        Exception e = Assert.assertThrows(PdfAConformanceException.class,\n", "                () -> pdfA2Checker.checkCatalogValidEntries(catalog)\n", "        );\n", "        Assert.assertEquals(PdfaExceptionMessageConstant.A_CATALOG_DICTIONARY_SHALL_NOT_CONTAIN_ALTERNATEPRESENTATIONS_NAMES_ENTRY,\n", "                e.getMessage());\n", "    }\n", "\n", "    @Test\n", "    public void checkCatalogDictionaryWithoutRequirements() {\n", "        PdfDictionary catalog = new PdfDictionary();\n", "        catalog.put(PdfName.Requirements, new PdfDictionary());\n", "\n", "        Exception e = Assert.assertThrows(PdfAConformanceException.class,\n", "                () -> pdfA2Checker.checkCatalogValidEntries(catalog)\n", "        );\n", "        Assert.assertEquals(PdfaExceptionMessageConstant.A_CATALOG_DICTIONARY_SHALL_NOT_CONTAIN_REQUIREMENTS_ENTRY, e.getMessage());\n", "    }\n", "\n", "    @Test\n", "    public void deviceNColorspaceNoAttributesDictionary() {\n", "        int numberOfComponents = 2;\n", "        List<String> tmpArray = new ArrayList<String>(numberOfComponents);\n", "        float[] transformArray = new float[numberOfComponents * 2];\n", "\n", "        for (int i = 0; i < numberOfComponents; i++) {\n", "            tmpArray.add(\"MyColor\" + i + 1);\n", "            transformArray[i * 2] = 0;\n", "            transformArray[i * 2 + 1]  = 1;\n", "        }\n", "        PdfType4Function function = new PdfType4Function(transformArray, new float[]{0, 1, 0, 1, 0, 1},\n", "                \"{0}\".getBytes(StandardCharsets.ISO_8859_1));\n", "\n", "        PdfDictionary currentColorSpaces = new PdfDictionary();\n", "\n", "        //TODO DEVSIX-4203 should not cause an IndexOutOfBoundException.\n", "        // Should throw PdfAConformanceException as Colorants dictionary always must be present\n", "        // for Pdf/A-2\n", "        Assert.assertThrows(RuntimeException.class,\n", "                () -> pdfA2Checker.checkColorSpace(new PdfSpecialCs.DeviceN(tmpArray, new PdfDeviceCs.Rgb(), function),\n", "                        null, currentColorSpaces, true, false)\n", "        );\n", "    }\n", "\n", "    @Test\n", "    public void checkColorShadingTest() {\n", "        PdfDictionary patternDict = new PdfDictionary();\n", "        patternDict.put(PdfName.ExtGState, new PdfDictionary());\n", "        PdfPattern.Shading pattern = new PdfPattern.Shading(patternDict);\n", "\n", "        PdfDictionary dictionary = new PdfDictionary();\n", "        dictionary.put(PdfName.ColorSpace, PdfName.DeviceCMYK);\n", "        pattern.setShading(dictionary);\n", "\n", "        Color color = new PatternColor(pattern);\n", "\n", "        AssertUtil.doesNotThrow(() -> {\n", "            pdfA2Checker.checkColor(null, color, new PdfDictionary(), true, null);\n", "        });\n", "    }\n", "\n", "    @Test\n", "    public void deprecatedCheckColorShadingTest() {\n", "        PdfDictionary patternDict = new PdfDictionary();\n", "        patternDict.put(PdfName.ExtGState, new PdfDictionary());\n", "        PdfPattern.Shading pattern = new PdfPattern.Shading(patternDict);\n", "\n", "        PdfDictionary dictionary = new PdfDictionary();\n", "        dictionary.put(PdfName.ColorSpace, PdfName.DeviceCMYK);\n", "        pattern.setShading(dictionary);\n", "\n", "        Color color = new PatternColor(pattern);\n", "\n", "        AssertUtil.doesNotThrow(() -> {\n", "            pdfA2Checker.checkColor(color, new PdfDictionary(), true, null);\n", "        });\n", "    }\n", "\n", "    @Test\n", "    public void checkColorShadingWithoutExtGStatePropertyInPatternDictTest() {\n", "        PdfDictionary patternDict = new PdfDictionary();\n", "        patternDict.put(PdfName.PatternType, new PdfNumber(2));\n", "        PdfPattern.Shading pattern = new PdfPattern.Shading(patternDict);\n", "\n", "        PdfDictionary dictionary = new PdfDictionary();\n", "        dictionary.put(PdfName.ColorSpace, PdfName.DeviceCMYK);\n", "        pattern.setShading(dictionary);\n", "\n", "        Color color = new PatternColor(pattern);\n", "\n", "        AssertUtil.doesNotThrow(() -> {\n", "            pdfA2Checker.checkColor(new UpdateCanvasGraphicsState(new PdfDictionary()),\n", "                    color, new PdfDictionary(), true, null);\n", "        });\n", "    }\n", "\n", "    @Test\n", "    public void checkSignatureTest() {\n", "        PdfDictionary signatureDict = createSignatureDict();\n", "        pdfA2Checker.checkSignature(signatureDict);\n", "        Assert.assertTrue(pdfA2Checker.objectIsChecked(signatureDict));\n", "    }\n", "\n", "    @Test\n", "    public void checkSignatureDigestMethodTest() {\n", "        PdfDictionary signatureDict = createSignatureDict();\n", "        PdfArray types = (PdfArray) signatureDict.get(PdfName.Reference);\n", "        PdfDictionary reference = (PdfDictionary) types.get(0);\n", "        PdfArray digestMethod = new PdfArray();\n", "        digestMethod.add(new PdfName(\"SHA256\"));\n", "        reference.put(PdfName.DigestMethod, digestMethod);\n", "\n", "        Exception e = Assert.assertThrows(PdfAConformanceException.class,\n", "                () -> pdfA2Checker.checkSignature(signatureDict));\n", "        Assert.assertEquals(PdfaExceptionMessageConstant.SIGNATURE_REFERENCES_DICTIONARY_SHALL_NOT_CONTAIN_DIGESTLOCATION_DIGESTMETHOD_DIGESTVALUE,\n", "                e.getMessage());\n", "    }\n", "\n", "    @Test\n", "    public void checkLZWDecodeInInlineImage() {\n", "        PdfStream stream = new PdfStream();\n", "        stream.put(PdfName.Filter, PdfName.LZWDecode);\n", "        Exception e = Assert.assertThrows(PdfAConformanceException.class,\n", "                () -> pdfA2Checker.checkInlineImage(stream, null)\n", "        );\n", "        Assert.assertEquals(PdfaExceptionMessageConstant.LZWDECODE_FILTER_IS_NOT_PERMITTED, e.getMessage());\n", "    }\n", "\n", "    @Test\n", "    public void checkImageWithAlternateTest() {\n", "        PdfStream image = new PdfStream();\n", "        image.put(PdfName.Alternates, PdfName.Identity);\n", "        Exception e = Assert.assertThrows(PdfAConformanceException.class,\n", "                () -> pdfA2Checker.checkImage(image, null)\n", "        );\n", "        Assert.assertEquals(PdfaExceptionMessageConstant.AN_IMAGE_DICTIONARY_SHALL_NOT_CONTAIN_ALTERNATES_KEY, e.getMessage());\n", "    }\n", "\n", "    @Test\n", "    public void checkImageWithOPITest() {\n", "        PdfStream image = new PdfStream();\n", "        image.put(PdfName.OPI, PdfName.Identity);\n", "        Exception e = Assert.assertThrows(PdfAConformanceException.class,\n", "                () -> pdfA2Checker.checkImage(image, null)\n", "        );\n", "        Assert.assertEquals(PdfaExceptionMessageConstant.AN_IMAGE_DICTIONARY_SHALL_NOT_CONTAIN_OPI_KEY, e.getMessage());\n", "    }\n", "\n", "    @Test\n", "    public void checkImageWithInterpolateTest() {\n", "        PdfStream image = new PdfStream();\n", "        image.put(PdfName.Interpolate, new PdfBoolean(true));\n", "        Exception e = Assert.assertThrows(PdfAConformanceException.class,\n", "                () -> pdfA2Checker.checkImage(image, null)\n", "        );\n", "        Assert.assertEquals(PdfaExceptionMessageConstant.THE_VALUE_OF_INTERPOLATE_KEY_SHALL_BE_FALSE, e.getMessage());\n", "    }\n", "\n", "    @Test\n", "    public void checkFormXObjectWithOPITest() {\n", "        PdfStream form = new PdfStream();\n", "        form.put(PdfName.OPI, PdfName.Identity);\n", "        Exception e = Assert.assertThrows(PdfAConformanceException.class,\n", "                () -> pdfA2Checker.checkFormXObject(form)\n", "        );\n", "        Assert.assertEquals(PdfaExceptionMessageConstant.A_FORM_XOBJECT_DICTIONARY_SHALL_NOT_CONTAIN_OPI_KEY, e.getMessage());\n", "    }\n", "\n", "    @Test\n", "    public void checkFormXObjectWithPSTest() {\n", "        PdfStream form = new PdfStream();\n", "        form.put(PdfName.PS, PdfName.Identity);\n", "        Exception e = Assert.assertThrows(PdfAConformanceException.class,\n", "                () -> pdfA2Checker.checkFormXObject(form)\n", "        );\n", "        Assert.assertEquals(PdfaExceptionMessageConstant.A_FORM_XOBJECT_DICTIONARY_SHALL_NOT_CONTAIN_PS_KEY, e.getMessage());\n", "    }\n", "\n", "    @Test\n", "    public void checkCryptInInlineImage() {\n", "        PdfStream stream = new PdfStream();\n", "        stream.put(PdfName.Filter, PdfName.Crypt);\n", "        Exception e = Assert.assertThrows(PdfAConformanceException.class,\n", "                () -> pdfA2Checker.checkInlineImage(stream, null)\n", "        );\n", "        Assert.assertEquals(PdfaExceptionMessageConstant.CRYPT_FILTER_IS_NOT_PERMITTED_INLINE_IMAGE, e.getMessage());\n", "    }\n", "\n", "\n", "    @Test\n", "    public void checkLZWDecodeArrayInInlineImage() {\n", "        PdfStream stream = new PdfStream();\n", "        PdfArray array = new PdfArray();\n", "        array.add(PdfName.LZWDecode);\n", "        stream.put(PdfName.Filter, array);\n", "        Exception e = Assert.assertThrows(PdfAConformanceException.class,\n", "                () -> pdfA2Checker.checkInlineImage(stream, null)\n", "        );\n", "        Assert.assertEquals(PdfaExceptionMessageConstant.LZWDECODE_FILTER_IS_NOT_PERMITTED, e.getMessage());\n", "    }\n", "\n", "    @Test\n", "    public void checkCryptArrayInInlineImage() {\n", "        PdfStream stream = new PdfStream();\n", "        PdfArray array = new PdfArray();\n", "        array.add(PdfName.Crypt);\n", "        stream.put(PdfName.Filter, array);\n", "        Exception e = Assert.assertThrows(PdfAConformanceException.class,\n", "                () -> pdfA2Checker.checkInlineImage(stream, null)\n", "        );\n", "        Assert.assertEquals(PdfaExceptionMessageConstant.CRYPT_FILTER_IS_NOT_PERMITTED_INLINE_IMAGE, e.getMessage());\n", "    }\n", "\n", "    @Test\n", "    public void checkAllowedArrayFilterInInlineImage() {\n", "        PdfStream stream = new PdfStream();\n", "        PdfArray array = new PdfArray();\n", "        array.add(PdfName.Identity);\n", "        stream.put(PdfName.Filter, array);\n", "        Exception e = Assert.assertThrows(PdfAConformanceException.class,\n", "                () -> pdfA2Checker.checkInlineImage(stream, null)\n", "        );\n", "        Assert.assertEquals(PdfaExceptionMessageConstant.INVALID_INLINE_IMAGE_FILTER_USAGE, e.getMessage());\n", "    }\n", "\n", "    @Test\n", "    public void checkAllowedFilterInInlineImage() {\n", "        PdfStream stream = new PdfStream();\n", "        stream.put(PdfName.Filter, PdfName.Identity);\n", "        Exception e = Assert.assertThrows(PdfAConformanceException.class,\n", "                () -> pdfA2Checker.checkInlineImage(stream, null)\n", "        );\n", "        Assert.assertEquals(PdfaExceptionMessageConstant.INVALID_INLINE_IMAGE_FILTER_USAGE, e.getMessage());\n", "    }\n", "\n", "    @Test\n", "    public void checkEmptyAnnotationTest() {\n", "        PdfDictionary annotation = new PdfDictionary();\n", "        Exception e = Assert.assertThrows(PdfAConformanceException.class,\n", "                () -> pdfA2Checker.checkAnnotation(annotation)\n", "        );\n", "        Assert.assertEquals(MessageFormatUtil.format(PdfaExceptionMessageConstant.ANNOTATION_TYPE_0_IS_NOT_PERMITTED, \"null\"), e.getMessage());\n", "    }\n", "\n", "    @Test\n", "    public void checkAnnotationAgainstActionsWithATest() {\n", "        PdfDictionary annotation = new PdfDictionary();\n", "        annotation.put(PdfName.A, PdfName.Identity);\n", "        annotation.put(PdfName.Subtype, PdfName.Widget);\n", "        Exception e = Assert.assertThrows(PdfAConformanceException.class,\n", "                () -> pdfA2Checker.checkAnnotationAgainstActions(annotation)\n", "        );\n", "        Assert.assertEquals(PdfaExceptionMessageConstant.WIDGET_ANNOTATION_DICTIONARY_OR_FIELD_DICTIONARY_SHALL_NOT_INCLUDE_A_OR_AA_ENTRY, e.getMessage());\n", "    }\n", "\n", "    @Test\n", "    public void checkAnnotationAgainstActionsWithAATest() {\n", "        PdfDictionary annotation = new PdfDictionary();\n", "        annotation.put(PdfName.AA, PdfName.Identity);\n", "        Exception e = Assert.assertThrows(PdfAConformanceException.class,\n", "                () -> pdfA2Checker.checkAnnotationAgainstActions(annotation)\n", "        );\n", "        Assert.assertEquals(PdfaExceptionMessageConstant.AN_ANNOTATION_DICTIONARY_SHALL_NOT_CONTAIN_AA_KEY, e.getMessage());\n", "    }\n", "\n", "    @Test\n", "    public void checkNeedsRenderingCatalogTest() {\n", "        PdfDictionary catalog = new PdfDictionary();\n", "        catalog.put(PdfName.NeedsRendering, new PdfBoolean(true));\n", "        Exception e = Assert.assertThrows(PdfAConformanceException.class,\n", "                () -> pdfA2Checker.checkCatalogValidEntries(catalog)\n", "        );\n", "        Assert.assertEquals(PdfaExceptionMessageConstant.THE_CATALOG_DICTIONARY_SHALL_NOT_CONTAIN_THE_NEEDSRENDERING_KEY, e.getMessage());\n", "    }\n", "\n", "    @Test\n", "    public void checkCatalogContainsAATest() {\n", "        PdfDictionary catalog = new PdfDictionary();\n", "        catalog.put(PdfName.AA,  PdfName.Identity);\n", "        Exception e = Assert.assertThrows(PdfAConformanceException.class,\n", "                () -> pdfA2Checker.checkCatalogValidEntries(catalog)\n", "        );\n", "        Assert.assertEquals(PdfaExceptionMessageConstant.A_CATALOG_DICTIONARY_SHALL_NOT_CONTAIN_AA_ENTRY, e.getMessage());\n", "    }\n", "\n", "    @Test\n", "    public void checkCatalogContainsSignatureTest() {\n", "        PdfDictionary catalog = new PdfDictionary();\n", "        PdfDictionary perms = new PdfDictionary();\n", "        PdfDictionary docMdp = new PdfDictionary();\n", "        perms.put(PdfName.DocMDP, docMdp);\n", "        catalog.put(PdfName.Perms,  perms);\n", "        pdfA2Checker.checkCatalogValidEntries(catalog);\n", "        //nothing to check, expecting that no error is thrown\n", "    }\n", "\n", "    @Test\n", "    public void checkPageSizeTest() {\n", "        PdfDictionary page = new PdfDictionary();\n", "        PdfArray rect = new PdfArray();\n", "        rect.add(new PdfNumber(0));\n", "        rect.add(new PdfNumber(0));\n", "        rect.add(new PdfNumber(0));\n", "        rect.add(new PdfNumber(0));\n", "        page.put(PdfName.CropBox, rect);\n", "        Exception e = Assert.assertThrows(PdfAConformanceException.class,\n", "                () -> pdfA2Checker.checkPageSize(page)\n", "        );\n", "        Assert.assertEquals(PdfaExceptionMessageConstant.THE_PAGE_LESS_3_UNITS_NO_GREATER_14400_IN_EITHER_DIRECTION, e.getMessage());\n", "        //nothing to check, expecting that no error is thrown\n", "    }\n", "\n", "    @Test\n", "    public void checkOutputIntentsTest() {\n", "        PdfDictionary catalog = new PdfDictionary();\n", "        PdfArray array = new PdfArray();\n", "        PdfDictionary dictionary = new PdfDictionary();\n", "        dictionary.put(PdfName.DestOutputProfile, PdfName.Identity);\n", "        PdfDictionary dictionary2 = new PdfDictionary();\n", "        dictionary2.put(PdfName.DestOutputProfile, PdfName.Crypt);\n", "        array.add(dictionary);\n", "        array.add(dictionary2);\n", "        catalog.put(PdfName.OutputIntents, array);\n", "        Exception e = Assert.assertThrows(PdfAConformanceException.class,\n", "                () -> pdfA2Checker.checkOutputIntents(catalog)\n", "        );\n", "        Assert.assertEquals(PdfaExceptionMessageConstant.IF_OUTPUTINTENTS_ARRAY_HAS_MORE_THAN_ONE_ENTRY_WITH_DESTOUTPUTPROFILE_KEY_THE_SAME_INDIRECT_OBJECT_SHALL_BE_USED_AS_THE_VALUE_OF_THAT_OBJECT, e.getMessage());\n", "        //nothing to check, expecting that no error is thrown\n", "    }\n", "    @Test\n", "    public void checkCatalogContainsInvalidPermsTest() {\n", "        PdfDictionary catalog = new PdfDictionary();\n", "        PdfDictionary perms = new PdfDictionary();\n", "        perms.put(PdfName.Identity, PdfName.Identity);\n", "        catalog.put(PdfName.Perms,  perms);\n", "        Exception e = Assert.assertThrows(PdfAConformanceException.class,\n", "                () -> pdfA2Checker.checkCatalogValidEntries(catalog)\n", "        );\n", "        Assert.assertEquals(PdfaExceptionMessageConstant.NO_KEYS_OTHER_THAN_UR3_AND_DOC_MDP_SHALL_BE_PRESENT_IN_A_PERMISSIONS_DICTIONARY, e.getMessage());\n", "    }\n", "\n", "    @Test\n", "    public void checkFileSpecNotContainsFKeyTest() {\n", "        PdfDictionary fileSpec = new PdfDictionary();\n", "        fileSpec.put(PdfName.EF, PdfName.Identity);\n", "        Exception e = Assert.assertThrows(PdfAConformanceException.class,\n", "                () -> pdfA2Checker.checkFileSpec(fileSpec)\n", "        );\n", "        Assert.assertEquals(PdfaExceptionMessageConstant.FILE_SPECIFICATION_DICTIONARY_SHALL_CONTAIN_F_KEY_AND_UF_KEY, e.getMessage());\n", "    }\n", "\n", "    @Test\n", "    public void checkFileSpecContainsNullFKeyTest() {\n", "        PdfDictionary fileSpec = new PdfDictionary();\n", "        fileSpec.put(PdfName.EF, new PdfDictionary());\n", "        fileSpec.put(PdfName.F, PdfName.Identity);\n", "        fileSpec.put(PdfName.UF, PdfName.Identity);\n", "        fileSpec.put(PdfName.Desc, PdfName.Identity);\n", "        Exception e = Assert.assertThrows(PdfAConformanceException.class,\n", "                () -> pdfA2Checker.checkFileSpec(fileSpec)\n", "        );\n", "        Assert.assertEquals(PdfaExceptionMessageConstant.EF_KEY_OF_FILE_SPECIFICATION_DICTIONARY_SHALL_CONTAIN_DICTIONARY_WITH_VALID_F_KEY, e.getMessage());\n", "    }\n", "\n", "    @Test\n", "    public void checkPdfStreamContainsFKeyTest() {\n", "        PdfStream pdfStream = new PdfStream();\n", "        pdfStream.put(PdfName.F, PdfName.Identity);\n", "        Exception e = Assert.assertThrows(PdfAConformanceException.class,\n", "                () -> pdfA2Checker.checkPdfStream(pdfStream)\n", "        );\n", "        Assert.assertEquals(PdfaExceptionMessageConstant.STREAM_OBJECT_DICTIONARY_SHALL_NOT_CONTAIN_THE_F_FFILTER_OR_FDECODEPARAMS_KEYS, e.getMessage());\n", "    }\n", "\n", "    @Test\n", "    public void checkPdfStreamContainsLZWDecodeKeyTest() {\n", "        PdfStream pdfStream = new PdfStream();\n", "        pdfStream.put(PdfName.Filter, PdfName.LZWDecode);\n", "        Exception e = Assert.assertThrows(PdfAConformanceException.class,\n", "                () -> pdfA2Checker.checkPdfStream(pdfStream)\n", "        );\n", "        Assert.assertEquals(PdfaExceptionMessageConstant.LZWDECODE_FILTER_IS_NOT_PERMITTED, e.getMessage());\n", "    }\n", "\n", "    @Test\n", "    public void checkPdfStreamContainsLZWDecodeArrayKeyTest() {\n", "        PdfStream pdfStream = new PdfStream();\n", "        PdfArray array = new PdfArray();\n", "        array.add(PdfName.LZWDecode);\n", "        pdfStream.put(PdfName.Filter, array);\n", "        Exception e = Assert.assertThrows(PdfAConformanceException.class,\n", "                () -> pdfA2Checker.checkPdfStream(pdfStream)\n", "        );\n", "        Assert.assertEquals(PdfaExceptionMessageConstant.LZWDECODE_FILTER_IS_NOT_PERMITTED, e.getMessage());\n", "    }\n", "\n", "    @Test\n", "    public void checkPdfStreamContainsCryptKeyTest() {\n", "        PdfStream pdfStream = new PdfStream();\n", "        pdfStream.put(PdfName.Filter, PdfName.Crypt);\n", "        PdfDictionary decodeParams = new PdfDictionary();\n", "        decodeParams.put(PdfName.Name, PdfName.Crypt);\n", "        pdfStream.put(PdfName.DecodeParms, decodeParams);\n", "        Exception e = Assert.assertThrows(PdfAConformanceException.class,\n", "                () -> pdfA2Checker.checkPdfStream(pdfStream)\n", "        );\n", "        Assert.assertEquals(PdfaExceptionMessageConstant.NOT_IDENTITY_CRYPT_FILTER_IS_NOT_PERMITTED, e.getMessage());\n", "    }\n", "\n", "    @Test\n", "    public void checkPdfStreamContainsCryptArrayKeyTest() {\n", "        PdfStream pdfStream = new PdfStream();\n", "        PdfArray array = new PdfArray();\n", "        array.add(PdfName.Crypt);\n", "        pdfStream.put(PdfName.Filter, array);\n", "        PdfDictionary decodeParams = new PdfDictionary();\n", "        PdfArray decodeArray = new PdfArray();\n", "        decodeArray.add(decodeParams);\n", "        decodeParams.put(PdfName.Name, PdfName.Crypt);\n", "        pdfStream.put(PdfName.DecodeParms, decodeArray);\n", "        Exception e = Assert.assertThrows(PdfAConformanceException.class,\n", "                () -> pdfA2Checker.checkPdfStream(pdfStream)\n", "        );\n", "        Assert.assertEquals(PdfaExceptionMessageConstant.NOT_IDENTITY_CRYPT_FILTER_IS_NOT_PERMITTED, e.getMessage());\n", "    }\n", "\n", "    @Test\n", "    public void checkColorSpaceWithDeviceNWithoutAttributes() {\n", "        List<String> tmpArray = new ArrayList<String>(3);\n", "        float[] transformArray = new float[6];\n", "        tmpArray.add(\"Black\");\n", "        tmpArray.add(\"Magenta\");\n", "        tmpArray.add(\"White\");\n", "\n", "        for (int i = 0; i < 3; i++) {\n", "            transformArray[i * 2] = 0;\n", "            transformArray[i * 2 + 1]  = 1;\n", "        }\n", "        PdfType4Function function = new PdfType4Function(transformArray, new float[]{0, 1, 0, 1, 0, 1},\n", "                \"{0}\".getBytes(StandardCharsets.ISO_8859_1));\n", "\n", "        PdfArray deviceNAsArray = ((PdfArray)(new  PdfSpecialCs.DeviceN(tmpArray, new PdfDeviceCs.Rgb(), function)).getPdfObject());\n", "        PdfDictionary currentColorSpaces = new PdfDictionary();\n", "\n", "\n", "        Exception e = Assert.assertThrows(PdfAConformanceException.class,\n", "                () -> pdfA2Checker.checkColorSpace(new PdfSpecialCs.DeviceN(deviceNAsArray), currentColorSpaces, true, false)\n", "        );\n", "        Assert.assertEquals(PdfaExceptionMessageConstant.COLORANTS_DICTIONARY_SHALL_NOT_BE_EMPTY_IN_DEVICE_N_COLORSPACE, e.getMessage());\n", "    }\n", "\n", "\n", "    @Test\n", "    public void checkColorSpaceWithDeviceNWithoutColorants() {\n", "        List<String> tmpArray = new ArrayList<String>(3);\n", "        float[] transformArray = new float[6];\n", "        tmpArray.add(\"Black\");\n", "        tmpArray.add(\"Magenta\");\n", "        tmpArray.add(\"White\");\n", "\n", "        for (int i = 0; i < 3; i++) {\n", "            transformArray[i * 2] = 0;\n", "            transformArray[i * 2 + 1]  = 1;\n", "        }\n", "        PdfType4Function function = new PdfType4Function(transformArray, new float[]{0, 1, 0, 1, 0, 1},\n", "                \"{0}\".getBytes(StandardCharsets.ISO_8859_1));\n", "\n", "        PdfArray deviceNAsArray = ((PdfArray)(new  PdfSpecialCs.DeviceN(tmpArray, new PdfDeviceCs.Rgb(), function)).getPdfObject());\n", "        PdfDictionary currentColorSpaces = new PdfDictionary();\n", "        PdfDictionary attributes = new PdfDictionary();\n", "        deviceNAsArray.add(attributes);\n", "\n", "\n", "        Exception e = Assert.assertThrows(PdfAConformanceException.class,\n", "                () -> pdfA2Checker.checkColorSpace(new PdfSpecialCs.DeviceN(deviceNAsArray), currentColorSpaces, true, false)\n", "        );\n", "        Assert.assertEquals(PdfaExceptionMessageConstant.COLORANTS_DICTIONARY_SHALL_NOT_BE_EMPTY_IN_DEVICE_N_COLORSPACE, e.getMessage());\n", "    }\n", "\n", "    private static PdfDictionary createSignatureDict() {\n", "        PdfDictionary signatureDict = new PdfDictionary();\n", "\n", "        PdfDictionary reference = new PdfDictionary();\n", "        PdfDictionary transformParams = new PdfDictionary();\n", "        transformParams.put(PdfName.P, new PdfNumber(1));\n", "        transformParams.put(PdfName.V, new PdfName(\"1.2\"));\n", "        transformParams.put(PdfName.Type, PdfName.TransformParams);\n", "        reference.put(PdfName.TransformMethod, PdfName.DocMDP);\n", "        reference.put(PdfName.Type, PdfName.SigRef);\n", "        reference.put(PdfName.TransformParams, transformParams);\n", "\n", "        PdfArray types = new PdfArray();\n", "        types.add(reference);\n", "        signatureDict.put(PdfName.Reference, types);\n", "\n", "        return signatureDict;\n", "    }\n", "\n", "    private static final class UpdateCanvasGraphicsState extends CanvasGraphicsState {\n", "        public UpdateCanvasGraphicsState(PdfDictionary extGStateDict) {\n", "            updateFromExtGState(new PdfExtGState(extGStateDict));\n", "        }\n", "    }\n", "}\n"], "method_lines_dic": {"PdfA2Checker::::getMaxRealValue()": [436, 439], "PdfA2Checker::::getMaxStringLength()": [441, 444], "PdfA2Checker::::getAppearanceLessAnnotations()": [535, 537], "PdfA2Checker::::getForbiddenAnnotations()": [559, 562], "PdfA2Checker::::getForbiddenActions()": [795, 798], "PdfA2Checker::::getAllowedNamedActions()": [800, 803], "PdfA2Checker::::getTransparencyErrorMessage()": [1058, 1060]}, "test_method_lines_dic": {"PdfA2CheckerTest::::checkNameEntryShouldBeUniqueBetweenDefaultAndAdditionalConfigs()": [59, 79], "PdfA2CheckerTest::::checkAsKeyInContentConfigDictTest()": [81, 97], "PdfA2CheckerTest::::checkNameEntryShouldBeUniqueBetweenAdditionalConfigs()": [99, 122], "PdfA2CheckerTest::::checkOCCDContainName()": [124, 146], "PdfA2CheckerTest::::checkOrderArrayDoesNotContainRedundantReferences()": [148, 183], "PdfA2CheckerTest::::checkOrderArrayContainsReferencesToAllOCGs()": [185, 219], "PdfA2CheckerTest::::checkOrderArrayAndOCGsMatch()": [221, 260], "PdfA2CheckerTest::::checkAbsenceOfOptionalConfigEntryAllowed()": [262, 287], "PdfA2CheckerTest::::checkAbsenceOfOptionalOrderEntryAllowed()": [289, 323], "PdfA2CheckerTest::::checkCatalogDictionaryWithoutAlternatePresentations()": [325, 338], "PdfA2CheckerTest::::checkCatalogDictionaryWithoutRequirements()": [340, 349], "PdfA2CheckerTest::::deviceNColorspaceNoAttributesDictionary()": [351, 374], "PdfA2CheckerTest::::checkColorShadingTest()": [376, 391], "PdfA2CheckerTest::::deprecatedCheckColorShadingTest()": [393, 408], "PdfA2CheckerTest::::checkColorShadingWithoutExtGStatePropertyInPatternDictTest()": [410, 426], "PdfA2CheckerTest::::checkSignatureTest()": [428, 433], "PdfA2CheckerTest::::checkSignatureDigestMethodTest()": [435, 448], "PdfA2CheckerTest::::checkLZWDecodeInInlineImage()": [450, 458], "PdfA2CheckerTest::::checkImageWithAlternateTest()": [460, 468], "PdfA2CheckerTest::::checkImageWithOPITest()": [470, 478], "PdfA2CheckerTest::::checkImageWithInterpolateTest()": [480, 488], "PdfA2CheckerTest::::checkFormXObjectWithOPITest()": [490, 498], "PdfA2CheckerTest::::checkFormXObjectWithPSTest()": [500, 508], "PdfA2CheckerTest::::checkCryptInInlineImage()": [510, 518], "PdfA2CheckerTest::::checkLZWDecodeArrayInInlineImage()": [521, 531], "PdfA2CheckerTest::::checkCryptArrayInInlineImage()": [533, 543], "PdfA2CheckerTest::::checkAllowedArrayFilterInInlineImage()": [545, 555], "PdfA2CheckerTest::::checkAllowedFilterInInlineImage()": [557, 565], "PdfA2CheckerTest::::checkEmptyAnnotationTest()": [567, 574], "PdfA2CheckerTest::::checkAnnotationAgainstActionsWithATest()": [576, 585], "PdfA2CheckerTest::::checkAnnotationAgainstActionsWithAATest()": [587, 595], "PdfA2CheckerTest::::checkNeedsRenderingCatalogTest()": [597, 605], "PdfA2CheckerTest::::checkCatalogContainsAATest()": [607, 615], "PdfA2CheckerTest::::checkCatalogContainsSignatureTest()": [617, 626], "PdfA2CheckerTest::::checkPageSizeTest()": [628, 642], "PdfA2CheckerTest::::checkOutputIntentsTest()": [644, 660], "PdfA2CheckerTest::::checkCatalogContainsInvalidPermsTest()": [661, 671], "PdfA2CheckerTest::::checkFileSpecNotContainsFKeyTest()": [673, 681], "PdfA2CheckerTest::::checkFileSpecContainsNullFKeyTest()": [683, 694], "PdfA2CheckerTest::::checkPdfStreamContainsFKeyTest()": [696, 704], "PdfA2CheckerTest::::checkPdfStreamContainsLZWDecodeKeyTest()": [706, 714], "PdfA2CheckerTest::::checkPdfStreamContainsLZWDecodeArrayKeyTest()": [716, 726], "PdfA2CheckerTest::::checkPdfStreamContainsCryptKeyTest()": [728, 739], "PdfA2CheckerTest::::checkPdfStreamContainsCryptArrayKeyTest()": [741, 756], "PdfA2CheckerTest::::checkColorSpaceWithDeviceNWithoutAttributes()": [758, 781], "PdfA2CheckerTest::::checkColorSpaceWithDeviceNWithoutColorants()": [784, 809], "PdfA2CheckerTest::::createSignatureDict()": [811, 828]}, "reverse_method_lines_dic": {"436": "PdfA2Checker::::getMaxRealValue()", "437": "PdfA2Checker::::getMaxRealValue()", "438": "PdfA2Checker::::getMaxRealValue()", "439": "PdfA2Checker::::getMaxRealValue()", "441": "PdfA2Checker::::getMaxStringLength()", "442": "PdfA2Checker::::getMaxStringLength()", "443": "PdfA2Checker::::getMaxStringLength()", "444": "PdfA2Checker::::getMaxStringLength()", "535": "PdfA2Checker::::getAppearanceLessAnnotations()", "536": "PdfA2Checker::::getAppearanceLessAnnotations()", "537": "PdfA2Checker::::getAppearanceLessAnnotations()", "559": "PdfA2Checker::::getForbiddenAnnotations()", "560": "PdfA2Checker::::getForbiddenAnnotations()", "561": "PdfA2Checker::::getForbiddenAnnotations()", "562": "PdfA2Checker::::getForbiddenAnnotations()", "795": "PdfA2Checker::::getForbiddenActions()", "796": "PdfA2Checker::::getForbiddenActions()", "797": "PdfA2Checker::::getForbiddenActions()", "798": "PdfA2Checker::::getForbiddenActions()", "800": "PdfA2Checker::::getAllowedNamedActions()", "801": "PdfA2Checker::::getAllowedNamedActions()", "802": "PdfA2Checker::::getAllowedNamedActions()", "803": "PdfA2Checker::::getAllowedNamedActions()", "1058": "PdfA2Checker::::getTransparencyErrorMessage()", "1059": "PdfA2Checker::::getTransparencyErrorMessage()", "1060": "PdfA2Checker::::getTransparencyErrorMessage()"}, "test_reverse_method_lines_dic": {"59": "PdfA2CheckerTest::::checkNameEntryShouldBeUniqueBetweenDefaultAndAdditionalConfigs()", "60": "PdfA2CheckerTest::::checkNameEntryShouldBeUniqueBetweenDefaultAndAdditionalConfigs()", "61": "PdfA2CheckerTest::::checkNameEntryShouldBeUniqueBetweenDefaultAndAdditionalConfigs()", "62": "PdfA2CheckerTest::::checkNameEntryShouldBeUniqueBetweenDefaultAndAdditionalConfigs()", "63": "PdfA2CheckerTest::::checkNameEntryShouldBeUniqueBetweenDefaultAndAdditionalConfigs()", "64": "PdfA2CheckerTest::::checkNameEntryShouldBeUniqueBetweenDefaultAndAdditionalConfigs()", "65": "PdfA2CheckerTest::::checkNameEntryShouldBeUniqueBetweenDefaultAndAdditionalConfigs()", "66": "PdfA2CheckerTest::::checkNameEntryShouldBeUniqueBetweenDefaultAndAdditionalConfigs()", "67": "PdfA2CheckerTest::::checkNameEntryShouldBeUniqueBetweenDefaultAndAdditionalConfigs()", "68": "PdfA2CheckerTest::::checkNameEntryShouldBeUniqueBetweenDefaultAndAdditionalConfigs()", "69": "PdfA2CheckerTest::::checkNameEntryShouldBeUniqueBetweenDefaultAndAdditionalConfigs()", "70": "PdfA2CheckerTest::::checkNameEntryShouldBeUniqueBetweenDefaultAndAdditionalConfigs()", "71": "PdfA2CheckerTest::::checkNameEntryShouldBeUniqueBetweenDefaultAndAdditionalConfigs()", "72": "PdfA2CheckerTest::::checkNameEntryShouldBeUniqueBetweenDefaultAndAdditionalConfigs()", "73": "PdfA2CheckerTest::::checkNameEntryShouldBeUniqueBetweenDefaultAndAdditionalConfigs()", "74": "PdfA2CheckerTest::::checkNameEntryShouldBeUniqueBetweenDefaultAndAdditionalConfigs()", "75": "PdfA2CheckerTest::::checkNameEntryShouldBeUniqueBetweenDefaultAndAdditionalConfigs()", "76": "PdfA2CheckerTest::::checkNameEntryShouldBeUniqueBetweenDefaultAndAdditionalConfigs()", "77": "PdfA2CheckerTest::::checkNameEntryShouldBeUniqueBetweenDefaultAndAdditionalConfigs()", "78": "PdfA2CheckerTest::::checkNameEntryShouldBeUniqueBetweenDefaultAndAdditionalConfigs()", "79": "PdfA2CheckerTest::::checkNameEntryShouldBeUniqueBetweenDefaultAndAdditionalConfigs()", "81": "PdfA2CheckerTest::::checkAsKeyInContentConfigDictTest()", "82": "PdfA2CheckerTest::::checkAsKeyInContentConfigDictTest()", "83": "PdfA2CheckerTest::::checkAsKeyInContentConfigDictTest()", "84": "PdfA2CheckerTest::::checkAsKeyInContentConfigDictTest()", "85": "PdfA2CheckerTest::::checkAsKeyInContentConfigDictTest()", "86": "PdfA2CheckerTest::::checkAsKeyInContentConfigDictTest()", "87": "PdfA2CheckerTest::::checkAsKeyInContentConfigDictTest()", "88": "PdfA2CheckerTest::::checkAsKeyInContentConfigDictTest()", "89": "PdfA2CheckerTest::::checkAsKeyInContentConfigDictTest()", "90": "PdfA2CheckerTest::::checkAsKeyInContentConfigDictTest()", "91": "PdfA2CheckerTest::::checkAsKeyInContentConfigDictTest()", "92": "PdfA2CheckerTest::::checkAsKeyInContentConfigDictTest()", "93": "PdfA2CheckerTest::::checkAsKeyInContentConfigDictTest()", "94": "PdfA2CheckerTest::::checkAsKeyInContentConfigDictTest()", "95": "PdfA2CheckerTest::::checkAsKeyInContentConfigDictTest()", "96": "PdfA2CheckerTest::::checkAsKeyInContentConfigDictTest()", "97": "PdfA2CheckerTest::::checkAsKeyInContentConfigDictTest()", "99": "PdfA2CheckerTest::::checkNameEntryShouldBeUniqueBetweenAdditionalConfigs()", "100": "PdfA2CheckerTest::::checkNameEntryShouldBeUniqueBetweenAdditionalConfigs()", "101": "PdfA2CheckerTest::::checkNameEntryShouldBeUniqueBetweenAdditionalConfigs()", "102": "PdfA2CheckerTest::::checkNameEntryShouldBeUniqueBetweenAdditionalConfigs()", "103": "PdfA2CheckerTest::::checkNameEntryShouldBeUniqueBetweenAdditionalConfigs()", "104": "PdfA2CheckerTest::::checkNameEntryShouldBeUniqueBetweenAdditionalConfigs()", "105": "PdfA2CheckerTest::::checkNameEntryShouldBeUniqueBetweenAdditionalConfigs()", "106": "PdfA2CheckerTest::::checkNameEntryShouldBeUniqueBetweenAdditionalConfigs()", "107": "PdfA2CheckerTest::::checkNameEntryShouldBeUniqueBetweenAdditionalConfigs()", "108": "PdfA2CheckerTest::::checkNameEntryShouldBeUniqueBetweenAdditionalConfigs()", "109": "PdfA2CheckerTest::::checkNameEntryShouldBeUniqueBetweenAdditionalConfigs()", "110": "PdfA2CheckerTest::::checkNameEntryShouldBeUniqueBetweenAdditionalConfigs()", "111": "PdfA2CheckerTest::::checkNameEntryShouldBeUniqueBetweenAdditionalConfigs()", "112": "PdfA2CheckerTest::::checkNameEntryShouldBeUniqueBetweenAdditionalConfigs()", "113": "PdfA2CheckerTest::::checkNameEntryShouldBeUniqueBetweenAdditionalConfigs()", "114": "PdfA2CheckerTest::::checkNameEntryShouldBeUniqueBetweenAdditionalConfigs()", "115": "PdfA2CheckerTest::::checkNameEntryShouldBeUniqueBetweenAdditionalConfigs()", "116": "PdfA2CheckerTest::::checkNameEntryShouldBeUniqueBetweenAdditionalConfigs()", "117": "PdfA2CheckerTest::::checkNameEntryShouldBeUniqueBetweenAdditionalConfigs()", "118": "PdfA2CheckerTest::::checkNameEntryShouldBeUniqueBetweenAdditionalConfigs()", "119": "PdfA2CheckerTest::::checkNameEntryShouldBeUniqueBetweenAdditionalConfigs()", "120": "PdfA2CheckerTest::::checkNameEntryShouldBeUniqueBetweenAdditionalConfigs()", "121": "PdfA2CheckerTest::::checkNameEntryShouldBeUniqueBetweenAdditionalConfigs()", "122": "PdfA2CheckerTest::::checkNameEntryShouldBeUniqueBetweenAdditionalConfigs()", "124": "PdfA2CheckerTest::::checkOCCDContainName()", "125": "PdfA2CheckerTest::::checkOCCDContainName()", "126": "PdfA2CheckerTest::::checkOCCDContainName()", "127": "PdfA2CheckerTest::::checkOCCDContainName()", "128": "PdfA2CheckerTest::::checkOCCDContainName()", "129": "PdfA2CheckerTest::::checkOCCDContainName()", "130": "PdfA2CheckerTest::::checkOCCDContainName()", "131": "PdfA2CheckerTest::::checkOCCDContainName()", "132": "PdfA2CheckerTest::::checkOCCDContainName()", "133": "PdfA2CheckerTest::::checkOCCDContainName()", "134": "PdfA2CheckerTest::::checkOCCDContainName()", "135": "PdfA2CheckerTest::::checkOCCDContainName()", "136": "PdfA2CheckerTest::::checkOCCDContainName()", "137": "PdfA2CheckerTest::::checkOCCDContainName()", "138": "PdfA2CheckerTest::::checkOCCDContainName()", "139": "PdfA2CheckerTest::::checkOCCDContainName()", "140": "PdfA2CheckerTest::::checkOCCDContainName()", "141": "PdfA2CheckerTest::::checkOCCDContainName()", "142": "PdfA2CheckerTest::::checkOCCDContainName()", "143": "PdfA2CheckerTest::::checkOCCDContainName()", "144": "PdfA2CheckerTest::::checkOCCDContainName()", "145": "PdfA2CheckerTest::::checkOCCDContainName()", "146": "PdfA2CheckerTest::::checkOCCDContainName()", "148": "PdfA2CheckerTest::::checkOrderArrayDoesNotContainRedundantReferences()", "149": "PdfA2CheckerTest::::checkOrderArrayDoesNotContainRedundantReferences()", "150": "PdfA2CheckerTest::::checkOrderArrayDoesNotContainRedundantReferences()", "151": "PdfA2CheckerTest::::checkOrderArrayDoesNotContainRedundantReferences()", "152": "PdfA2CheckerTest::::checkOrderArrayDoesNotContainRedundantReferences()", "153": "PdfA2CheckerTest::::checkOrderArrayDoesNotContainRedundantReferences()", "154": "PdfA2CheckerTest::::checkOrderArrayDoesNotContainRedundantReferences()", "155": "PdfA2CheckerTest::::checkOrderArrayDoesNotContainRedundantReferences()", "156": "PdfA2CheckerTest::::checkOrderArrayDoesNotContainRedundantReferences()", "157": "PdfA2CheckerTest::::checkOrderArrayDoesNotContainRedundantReferences()", "158": "PdfA2CheckerTest::::checkOrderArrayDoesNotContainRedundantReferences()", "159": "PdfA2CheckerTest::::checkOrderArrayDoesNotContainRedundantReferences()", "160": "PdfA2CheckerTest::::checkOrderArrayDoesNotContainRedundantReferences()", "161": "PdfA2CheckerTest::::checkOrderArrayDoesNotContainRedundantReferences()", "162": "PdfA2CheckerTest::::checkOrderArrayDoesNotContainRedundantReferences()", "163": "PdfA2CheckerTest::::checkOrderArrayDoesNotContainRedundantReferences()", "164": "PdfA2CheckerTest::::checkOrderArrayDoesNotContainRedundantReferences()", "165": "PdfA2CheckerTest::::checkOrderArrayDoesNotContainRedundantReferences()", "166": "PdfA2CheckerTest::::checkOrderArrayDoesNotContainRedundantReferences()", "167": "PdfA2CheckerTest::::checkOrderArrayDoesNotContainRedundantReferences()", "168": "PdfA2CheckerTest::::checkOrderArrayDoesNotContainRedundantReferences()", "169": "PdfA2CheckerTest::::checkOrderArrayDoesNotContainRedundantReferences()", "170": "PdfA2CheckerTest::::checkOrderArrayDoesNotContainRedundantReferences()", "171": "PdfA2CheckerTest::::checkOrderArrayDoesNotContainRedundantReferences()", "172": "PdfA2CheckerTest::::checkOrderArrayDoesNotContainRedundantReferences()", "173": "PdfA2CheckerTest::::checkOrderArrayDoesNotContainRedundantReferences()", "174": "PdfA2CheckerTest::::checkOrderArrayDoesNotContainRedundantReferences()", "175": "PdfA2CheckerTest::::checkOrderArrayDoesNotContainRedundantReferences()", "176": "PdfA2CheckerTest::::checkOrderArrayDoesNotContainRedundantReferences()", "177": "PdfA2CheckerTest::::checkOrderArrayDoesNotContainRedundantReferences()", "178": "PdfA2CheckerTest::::checkOrderArrayDoesNotContainRedundantReferences()", "179": "PdfA2CheckerTest::::checkOrderArrayDoesNotContainRedundantReferences()", "180": "PdfA2CheckerTest::::checkOrderArrayDoesNotContainRedundantReferences()", "181": "PdfA2CheckerTest::::checkOrderArrayDoesNotContainRedundantReferences()", "182": "PdfA2CheckerTest::::checkOrderArrayDoesNotContainRedundantReferences()", "183": "PdfA2CheckerTest::::checkOrderArrayDoesNotContainRedundantReferences()", "185": "PdfA2CheckerTest::::checkOrderArrayContainsReferencesToAllOCGs()", "186": "PdfA2CheckerTest::::checkOrderArrayContainsReferencesToAllOCGs()", "187": "PdfA2CheckerTest::::checkOrderArrayContainsReferencesToAllOCGs()", "188": "PdfA2CheckerTest::::checkOrderArrayContainsReferencesToAllOCGs()", "189": "PdfA2CheckerTest::::checkOrderArrayContainsReferencesToAllOCGs()", "190": "PdfA2CheckerTest::::checkOrderArrayContainsReferencesToAllOCGs()", "191": "PdfA2CheckerTest::::checkOrderArrayContainsReferencesToAllOCGs()", "192": "PdfA2CheckerTest::::checkOrderArrayContainsReferencesToAllOCGs()", "193": "PdfA2CheckerTest::::checkOrderArrayContainsReferencesToAllOCGs()", "194": "PdfA2CheckerTest::::checkOrderArrayContainsReferencesToAllOCGs()", "195": "PdfA2CheckerTest::::checkOrderArrayContainsReferencesToAllOCGs()", "196": "PdfA2CheckerTest::::checkOrderArrayContainsReferencesToAllOCGs()", "197": "PdfA2CheckerTest::::checkOrderArrayContainsReferencesToAllOCGs()", "198": "PdfA2CheckerTest::::checkOrderArrayContainsReferencesToAllOCGs()", "199": "PdfA2CheckerTest::::checkOrderArrayContainsReferencesToAllOCGs()", "200": "PdfA2CheckerTest::::checkOrderArrayContainsReferencesToAllOCGs()", "201": "PdfA2CheckerTest::::checkOrderArrayContainsReferencesToAllOCGs()", "202": "PdfA2CheckerTest::::checkOrderArrayContainsReferencesToAllOCGs()", "203": "PdfA2CheckerTest::::checkOrderArrayContainsReferencesToAllOCGs()", "204": "PdfA2CheckerTest::::checkOrderArrayContainsReferencesToAllOCGs()", "205": "PdfA2CheckerTest::::checkOrderArrayContainsReferencesToAllOCGs()", "206": "PdfA2CheckerTest::::checkOrderArrayContainsReferencesToAllOCGs()", "207": "PdfA2CheckerTest::::checkOrderArrayContainsReferencesToAllOCGs()", "208": "PdfA2CheckerTest::::checkOrderArrayContainsReferencesToAllOCGs()", "209": "PdfA2CheckerTest::::checkOrderArrayContainsReferencesToAllOCGs()", "210": "PdfA2CheckerTest::::checkOrderArrayContainsReferencesToAllOCGs()", "211": "PdfA2CheckerTest::::checkOrderArrayContainsReferencesToAllOCGs()", "212": "PdfA2CheckerTest::::checkOrderArrayContainsReferencesToAllOCGs()", "213": "PdfA2CheckerTest::::checkOrderArrayContainsReferencesToAllOCGs()", "214": "PdfA2CheckerTest::::checkOrderArrayContainsReferencesToAllOCGs()", "215": "PdfA2CheckerTest::::checkOrderArrayContainsReferencesToAllOCGs()", "216": "PdfA2CheckerTest::::checkOrderArrayContainsReferencesToAllOCGs()", "217": "PdfA2CheckerTest::::checkOrderArrayContainsReferencesToAllOCGs()", "218": "PdfA2CheckerTest::::checkOrderArrayContainsReferencesToAllOCGs()", "219": "PdfA2CheckerTest::::checkOrderArrayContainsReferencesToAllOCGs()", "221": "PdfA2CheckerTest::::checkOrderArrayAndOCGsMatch()", "222": "PdfA2CheckerTest::::checkOrderArrayAndOCGsMatch()", "223": "PdfA2CheckerTest::::checkOrderArrayAndOCGsMatch()", "224": "PdfA2CheckerTest::::checkOrderArrayAndOCGsMatch()", "225": "PdfA2CheckerTest::::checkOrderArrayAndOCGsMatch()", "226": "PdfA2CheckerTest::::checkOrderArrayAndOCGsMatch()", "227": "PdfA2CheckerTest::::checkOrderArrayAndOCGsMatch()", "228": "PdfA2CheckerTest::::checkOrderArrayAndOCGsMatch()", "229": "PdfA2CheckerTest::::checkOrderArrayAndOCGsMatch()", "230": "PdfA2CheckerTest::::checkOrderArrayAndOCGsMatch()", "231": "PdfA2CheckerTest::::checkOrderArrayAndOCGsMatch()", "232": "PdfA2CheckerTest::::checkOrderArrayAndOCGsMatch()", "233": "PdfA2CheckerTest::::checkOrderArrayAndOCGsMatch()", "234": "PdfA2CheckerTest::::checkOrderArrayAndOCGsMatch()", "235": "PdfA2CheckerTest::::checkOrderArrayAndOCGsMatch()", "236": "PdfA2CheckerTest::::checkOrderArrayAndOCGsMatch()", "237": "PdfA2CheckerTest::::checkOrderArrayAndOCGsMatch()", "238": "PdfA2CheckerTest::::checkOrderArrayAndOCGsMatch()", "239": "PdfA2CheckerTest::::checkOrderArrayAndOCGsMatch()", "240": "PdfA2CheckerTest::::checkOrderArrayAndOCGsMatch()", "241": "PdfA2CheckerTest::::checkOrderArrayAndOCGsMatch()", "242": "PdfA2CheckerTest::::checkOrderArrayAndOCGsMatch()", "243": "PdfA2CheckerTest::::checkOrderArrayAndOCGsMatch()", "244": "PdfA2CheckerTest::::checkOrderArrayAndOCGsMatch()", "245": "PdfA2CheckerTest::::checkOrderArrayAndOCGsMatch()", "246": "PdfA2CheckerTest::::checkOrderArrayAndOCGsMatch()", "247": "PdfA2CheckerTest::::checkOrderArrayAndOCGsMatch()", "248": "PdfA2CheckerTest::::checkOrderArrayAndOCGsMatch()", "249": "PdfA2CheckerTest::::checkOrderArrayAndOCGsMatch()", "250": "PdfA2CheckerTest::::checkOrderArrayAndOCGsMatch()", "251": "PdfA2CheckerTest::::checkOrderArrayAndOCGsMatch()", "252": "PdfA2CheckerTest::::checkOrderArrayAndOCGsMatch()", "253": "PdfA2CheckerTest::::checkOrderArrayAndOCGsMatch()", "254": "PdfA2CheckerTest::::checkOrderArrayAndOCGsMatch()", "255": "PdfA2CheckerTest::::checkOrderArrayAndOCGsMatch()", "256": "PdfA2CheckerTest::::checkOrderArrayAndOCGsMatch()", "257": "PdfA2CheckerTest::::checkOrderArrayAndOCGsMatch()", "258": "PdfA2CheckerTest::::checkOrderArrayAndOCGsMatch()", "259": "PdfA2CheckerTest::::checkOrderArrayAndOCGsMatch()", "260": "PdfA2CheckerTest::::checkOrderArrayAndOCGsMatch()", "262": "PdfA2CheckerTest::::checkAbsenceOfOptionalConfigEntryAllowed()", "263": "PdfA2CheckerTest::::checkAbsenceOfOptionalConfigEntryAllowed()", "264": "PdfA2CheckerTest::::checkAbsenceOfOptionalConfigEntryAllowed()", "265": "PdfA2CheckerTest::::checkAbsenceOfOptionalConfigEntryAllowed()", "266": "PdfA2CheckerTest::::checkAbsenceOfOptionalConfigEntryAllowed()", "267": "PdfA2CheckerTest::::checkAbsenceOfOptionalConfigEntryAllowed()", "268": "PdfA2CheckerTest::::checkAbsenceOfOptionalConfigEntryAllowed()", "269": "PdfA2CheckerTest::::checkAbsenceOfOptionalConfigEntryAllowed()", "270": "PdfA2CheckerTest::::checkAbsenceOfOptionalConfigEntryAllowed()", "271": "PdfA2CheckerTest::::checkAbsenceOfOptionalConfigEntryAllowed()", "272": "PdfA2CheckerTest::::checkAbsenceOfOptionalConfigEntryAllowed()", "273": "PdfA2CheckerTest::::checkAbsenceOfOptionalConfigEntryAllowed()", "274": "PdfA2CheckerTest::::checkAbsenceOfOptionalConfigEntryAllowed()", "275": "PdfA2CheckerTest::::checkAbsenceOfOptionalConfigEntryAllowed()", "276": "PdfA2CheckerTest::::checkAbsenceOfOptionalConfigEntryAllowed()", "277": "PdfA2CheckerTest::::checkAbsenceOfOptionalConfigEntryAllowed()", "278": "PdfA2CheckerTest::::checkAbsenceOfOptionalConfigEntryAllowed()", "279": "PdfA2CheckerTest::::checkAbsenceOfOptionalConfigEntryAllowed()", "280": "PdfA2CheckerTest::::checkAbsenceOfOptionalConfigEntryAllowed()", "281": "PdfA2CheckerTest::::checkAbsenceOfOptionalConfigEntryAllowed()", "282": "PdfA2CheckerTest::::checkAbsenceOfOptionalConfigEntryAllowed()", "283": "PdfA2CheckerTest::::checkAbsenceOfOptionalConfigEntryAllowed()", "284": "PdfA2CheckerTest::::checkAbsenceOfOptionalConfigEntryAllowed()", "285": "PdfA2CheckerTest::::checkAbsenceOfOptionalConfigEntryAllowed()", "286": "PdfA2CheckerTest::::checkAbsenceOfOptionalConfigEntryAllowed()", "287": "PdfA2CheckerTest::::checkAbsenceOfOptionalConfigEntryAllowed()", "289": "PdfA2CheckerTest::::checkAbsenceOfOptionalOrderEntryAllowed()", "290": "PdfA2CheckerTest::::checkAbsenceOfOptionalOrderEntryAllowed()", "291": "PdfA2CheckerTest::::checkAbsenceOfOptionalOrderEntryAllowed()", "292": "PdfA2CheckerTest::::checkAbsenceOfOptionalOrderEntryAllowed()", "293": "PdfA2CheckerTest::::checkAbsenceOfOptionalOrderEntryAllowed()", "294": "PdfA2CheckerTest::::checkAbsenceOfOptionalOrderEntryAllowed()", "295": "PdfA2CheckerTest::::checkAbsenceOfOptionalOrderEntryAllowed()", "296": "PdfA2CheckerTest::::checkAbsenceOfOptionalOrderEntryAllowed()", "297": "PdfA2CheckerTest::::checkAbsenceOfOptionalOrderEntryAllowed()", "298": "PdfA2CheckerTest::::checkAbsenceOfOptionalOrderEntryAllowed()", "299": "PdfA2CheckerTest::::checkAbsenceOfOptionalOrderEntryAllowed()", "300": "PdfA2CheckerTest::::checkAbsenceOfOptionalOrderEntryAllowed()", "301": "PdfA2CheckerTest::::checkAbsenceOfOptionalOrderEntryAllowed()", "302": "PdfA2CheckerTest::::checkAbsenceOfOptionalOrderEntryAllowed()", "303": "PdfA2CheckerTest::::checkAbsenceOfOptionalOrderEntryAllowed()", "304": "PdfA2CheckerTest::::checkAbsenceOfOptionalOrderEntryAllowed()", "305": "PdfA2CheckerTest::::checkAbsenceOfOptionalOrderEntryAllowed()", "306": "PdfA2CheckerTest::::checkAbsenceOfOptionalOrderEntryAllowed()", "307": "PdfA2CheckerTest::::checkAbsenceOfOptionalOrderEntryAllowed()", "308": "PdfA2CheckerTest::::checkAbsenceOfOptionalOrderEntryAllowed()", "309": "PdfA2CheckerTest::::checkAbsenceOfOptionalOrderEntryAllowed()", "310": "PdfA2CheckerTest::::checkAbsenceOfOptionalOrderEntryAllowed()", "311": "PdfA2CheckerTest::::checkAbsenceOfOptionalOrderEntryAllowed()", "312": "PdfA2CheckerTest::::checkAbsenceOfOptionalOrderEntryAllowed()", "313": "PdfA2CheckerTest::::checkAbsenceOfOptionalOrderEntryAllowed()", "314": "PdfA2CheckerTest::::checkAbsenceOfOptionalOrderEntryAllowed()", "315": "PdfA2CheckerTest::::checkAbsenceOfOptionalOrderEntryAllowed()", "316": "PdfA2CheckerTest::::checkAbsenceOfOptionalOrderEntryAllowed()", "317": "PdfA2CheckerTest::::checkAbsenceOfOptionalOrderEntryAllowed()", "318": "PdfA2CheckerTest::::checkAbsenceOfOptionalOrderEntryAllowed()", "319": "PdfA2CheckerTest::::checkAbsenceOfOptionalOrderEntryAllowed()", "320": "PdfA2CheckerTest::::checkAbsenceOfOptionalOrderEntryAllowed()", "321": "PdfA2CheckerTest::::checkAbsenceOfOptionalOrderEntryAllowed()", "322": "PdfA2CheckerTest::::checkAbsenceOfOptionalOrderEntryAllowed()", "323": "PdfA2CheckerTest::::checkAbsenceOfOptionalOrderEntryAllowed()", "325": "PdfA2CheckerTest::::checkCatalogDictionaryWithoutAlternatePresentations()", "326": "PdfA2CheckerTest::::checkCatalogDictionaryWithoutAlternatePresentations()", "327": "PdfA2CheckerTest::::checkCatalogDictionaryWithoutAlternatePresentations()", "328": "PdfA2CheckerTest::::checkCatalogDictionaryWithoutAlternatePresentations()", "329": "PdfA2CheckerTest::::checkCatalogDictionaryWithoutAlternatePresentations()", "330": "PdfA2CheckerTest::::checkCatalogDictionaryWithoutAlternatePresentations()", "331": "PdfA2CheckerTest::::checkCatalogDictionaryWithoutAlternatePresentations()", "332": "PdfA2CheckerTest::::checkCatalogDictionaryWithoutAlternatePresentations()", "333": "PdfA2CheckerTest::::checkCatalogDictionaryWithoutAlternatePresentations()", "334": "PdfA2CheckerTest::::checkCatalogDictionaryWithoutAlternatePresentations()", "335": "PdfA2CheckerTest::::checkCatalogDictionaryWithoutAlternatePresentations()", "336": "PdfA2CheckerTest::::checkCatalogDictionaryWithoutAlternatePresentations()", "337": "PdfA2CheckerTest::::checkCatalogDictionaryWithoutAlternatePresentations()", "338": "PdfA2CheckerTest::::checkCatalogDictionaryWithoutAlternatePresentations()", "340": "PdfA2CheckerTest::::checkCatalogDictionaryWithoutRequirements()", "341": "PdfA2CheckerTest::::checkCatalogDictionaryWithoutRequirements()", "342": "PdfA2CheckerTest::::checkCatalogDictionaryWithoutRequirements()", "343": "PdfA2CheckerTest::::checkCatalogDictionaryWithoutRequirements()", "344": "PdfA2CheckerTest::::checkCatalogDictionaryWithoutRequirements()", "345": "PdfA2CheckerTest::::checkCatalogDictionaryWithoutRequirements()", "346": "PdfA2CheckerTest::::checkCatalogDictionaryWithoutRequirements()", "347": "PdfA2CheckerTest::::checkCatalogDictionaryWithoutRequirements()", "348": "PdfA2CheckerTest::::checkCatalogDictionaryWithoutRequirements()", "349": "PdfA2CheckerTest::::checkCatalogDictionaryWithoutRequirements()", "351": "PdfA2CheckerTest::::deviceNColorspaceNoAttributesDictionary()", "352": "PdfA2CheckerTest::::deviceNColorspaceNoAttributesDictionary()", "353": "PdfA2CheckerTest::::deviceNColorspaceNoAttributesDictionary()", "354": "PdfA2CheckerTest::::deviceNColorspaceNoAttributesDictionary()", "355": "PdfA2CheckerTest::::deviceNColorspaceNoAttributesDictionary()", "356": "PdfA2CheckerTest::::deviceNColorspaceNoAttributesDictionary()", "357": "PdfA2CheckerTest::::deviceNColorspaceNoAttributesDictionary()", "358": "PdfA2CheckerTest::::deviceNColorspaceNoAttributesDictionary()", "359": "PdfA2CheckerTest::::deviceNColorspaceNoAttributesDictionary()", "360": "PdfA2CheckerTest::::deviceNColorspaceNoAttributesDictionary()", "361": "PdfA2CheckerTest::::deviceNColorspaceNoAttributesDictionary()", "362": "PdfA2CheckerTest::::deviceNColorspaceNoAttributesDictionary()", "363": "PdfA2CheckerTest::::deviceNColorspaceNoAttributesDictionary()", "364": "PdfA2CheckerTest::::deviceNColorspaceNoAttributesDictionary()", "365": "PdfA2CheckerTest::::deviceNColorspaceNoAttributesDictionary()", "366": "PdfA2CheckerTest::::deviceNColorspaceNoAttributesDictionary()", "367": "PdfA2CheckerTest::::deviceNColorspaceNoAttributesDictionary()", "368": "PdfA2CheckerTest::::deviceNColorspaceNoAttributesDictionary()", "369": "PdfA2CheckerTest::::deviceNColorspaceNoAttributesDictionary()", "370": "PdfA2CheckerTest::::deviceNColorspaceNoAttributesDictionary()", "371": "PdfA2CheckerTest::::deviceNColorspaceNoAttributesDictionary()", "372": "PdfA2CheckerTest::::deviceNColorspaceNoAttributesDictionary()", "373": "PdfA2CheckerTest::::deviceNColorspaceNoAttributesDictionary()", "374": "PdfA2CheckerTest::::deviceNColorspaceNoAttributesDictionary()", "376": "PdfA2CheckerTest::::checkColorShadingTest()", "377": "PdfA2CheckerTest::::checkColorShadingTest()", "378": "PdfA2CheckerTest::::checkColorShadingTest()", "379": "PdfA2CheckerTest::::checkColorShadingTest()", "380": "PdfA2CheckerTest::::checkColorShadingTest()", "381": "PdfA2CheckerTest::::checkColorShadingTest()", "382": "PdfA2CheckerTest::::checkColorShadingTest()", "383": "PdfA2CheckerTest::::checkColorShadingTest()", "384": "PdfA2CheckerTest::::checkColorShadingTest()", "385": "PdfA2CheckerTest::::checkColorShadingTest()", "386": "PdfA2CheckerTest::::checkColorShadingTest()", "387": "PdfA2CheckerTest::::checkColorShadingTest()", "388": "PdfA2CheckerTest::::checkColorShadingTest()", "389": "PdfA2CheckerTest::::checkColorShadingTest()", "390": "PdfA2CheckerTest::::checkColorShadingTest()", "391": "PdfA2CheckerTest::::checkColorShadingTest()", "393": "PdfA2CheckerTest::::deprecatedCheckColorShadingTest()", "394": "PdfA2CheckerTest::::deprecatedCheckColorShadingTest()", "395": "PdfA2CheckerTest::::deprecatedCheckColorShadingTest()", "396": "PdfA2CheckerTest::::deprecatedCheckColorShadingTest()", "397": "PdfA2CheckerTest::::deprecatedCheckColorShadingTest()", "398": "PdfA2CheckerTest::::deprecatedCheckColorShadingTest()", "399": "PdfA2CheckerTest::::deprecatedCheckColorShadingTest()", "400": "PdfA2CheckerTest::::deprecatedCheckColorShadingTest()", "401": "PdfA2CheckerTest::::deprecatedCheckColorShadingTest()", "402": "PdfA2CheckerTest::::deprecatedCheckColorShadingTest()", "403": "PdfA2CheckerTest::::deprecatedCheckColorShadingTest()", "404": "PdfA2CheckerTest::::deprecatedCheckColorShadingTest()", "405": "PdfA2CheckerTest::::deprecatedCheckColorShadingTest()", "406": "PdfA2CheckerTest::::deprecatedCheckColorShadingTest()", "407": "PdfA2CheckerTest::::deprecatedCheckColorShadingTest()", "408": "PdfA2CheckerTest::::deprecatedCheckColorShadingTest()", "410": "PdfA2CheckerTest::::checkColorShadingWithoutExtGStatePropertyInPatternDictTest()", "411": "PdfA2CheckerTest::::checkColorShadingWithoutExtGStatePropertyInPatternDictTest()", "412": "PdfA2CheckerTest::::checkColorShadingWithoutExtGStatePropertyInPatternDictTest()", "413": "PdfA2CheckerTest::::checkColorShadingWithoutExtGStatePropertyInPatternDictTest()", "414": "PdfA2CheckerTest::::checkColorShadingWithoutExtGStatePropertyInPatternDictTest()", "415": "PdfA2CheckerTest::::checkColorShadingWithoutExtGStatePropertyInPatternDictTest()", "416": "PdfA2CheckerTest::::checkColorShadingWithoutExtGStatePropertyInPatternDictTest()", "417": "PdfA2CheckerTest::::checkColorShadingWithoutExtGStatePropertyInPatternDictTest()", "418": "PdfA2CheckerTest::::checkColorShadingWithoutExtGStatePropertyInPatternDictTest()", "419": "PdfA2CheckerTest::::checkColorShadingWithoutExtGStatePropertyInPatternDictTest()", "420": "PdfA2CheckerTest::::checkColorShadingWithoutExtGStatePropertyInPatternDictTest()", "421": "PdfA2CheckerTest::::checkColorShadingWithoutExtGStatePropertyInPatternDictTest()", "422": "PdfA2CheckerTest::::checkColorShadingWithoutExtGStatePropertyInPatternDictTest()", "423": "PdfA2CheckerTest::::checkColorShadingWithoutExtGStatePropertyInPatternDictTest()", "424": "PdfA2CheckerTest::::checkColorShadingWithoutExtGStatePropertyInPatternDictTest()", "425": "PdfA2CheckerTest::::checkColorShadingWithoutExtGStatePropertyInPatternDictTest()", "426": "PdfA2CheckerTest::::checkColorShadingWithoutExtGStatePropertyInPatternDictTest()", "428": "PdfA2CheckerTest::::checkSignatureTest()", "429": "PdfA2CheckerTest::::checkSignatureTest()", "430": "PdfA2CheckerTest::::checkSignatureTest()", "431": "PdfA2CheckerTest::::checkSignatureTest()", "432": "PdfA2CheckerTest::::checkSignatureTest()", "433": "PdfA2CheckerTest::::checkSignatureTest()", "435": "PdfA2CheckerTest::::checkSignatureDigestMethodTest()", "436": "PdfA2CheckerTest::::checkSignatureDigestMethodTest()", "437": "PdfA2CheckerTest::::checkSignatureDigestMethodTest()", "438": "PdfA2CheckerTest::::checkSignatureDigestMethodTest()", "439": "PdfA2CheckerTest::::checkSignatureDigestMethodTest()", "440": "PdfA2CheckerTest::::checkSignatureDigestMethodTest()", "441": "PdfA2CheckerTest::::checkSignatureDigestMethodTest()", "442": "PdfA2CheckerTest::::checkSignatureDigestMethodTest()", "443": "PdfA2CheckerTest::::checkSignatureDigestMethodTest()", "444": "PdfA2CheckerTest::::checkSignatureDigestMethodTest()", "445": "PdfA2CheckerTest::::checkSignatureDigestMethodTest()", "446": "PdfA2CheckerTest::::checkSignatureDigestMethodTest()", "447": "PdfA2CheckerTest::::checkSignatureDigestMethodTest()", "448": "PdfA2CheckerTest::::checkSignatureDigestMethodTest()", "450": "PdfA2CheckerTest::::checkLZWDecodeInInlineImage()", "451": "PdfA2CheckerTest::::checkLZWDecodeInInlineImage()", "452": "PdfA2CheckerTest::::checkLZWDecodeInInlineImage()", "453": "PdfA2CheckerTest::::checkLZWDecodeInInlineImage()", "454": "PdfA2CheckerTest::::checkLZWDecodeInInlineImage()", "455": "PdfA2CheckerTest::::checkLZWDecodeInInlineImage()", "456": "PdfA2CheckerTest::::checkLZWDecodeInInlineImage()", "457": "PdfA2CheckerTest::::checkLZWDecodeInInlineImage()", "458": "PdfA2CheckerTest::::checkLZWDecodeInInlineImage()", "460": "PdfA2CheckerTest::::checkImageWithAlternateTest()", "461": "PdfA2CheckerTest::::checkImageWithAlternateTest()", "462": "PdfA2CheckerTest::::checkImageWithAlternateTest()", "463": "PdfA2CheckerTest::::checkImageWithAlternateTest()", "464": "PdfA2CheckerTest::::checkImageWithAlternateTest()", "465": "PdfA2CheckerTest::::checkImageWithAlternateTest()", "466": "PdfA2CheckerTest::::checkImageWithAlternateTest()", "467": "PdfA2CheckerTest::::checkImageWithAlternateTest()", "468": "PdfA2CheckerTest::::checkImageWithAlternateTest()", "470": "PdfA2CheckerTest::::checkImageWithOPITest()", "471": "PdfA2CheckerTest::::checkImageWithOPITest()", "472": "PdfA2CheckerTest::::checkImageWithOPITest()", "473": "PdfA2CheckerTest::::checkImageWithOPITest()", "474": "PdfA2CheckerTest::::checkImageWithOPITest()", "475": "PdfA2CheckerTest::::checkImageWithOPITest()", "476": "PdfA2CheckerTest::::checkImageWithOPITest()", "477": "PdfA2CheckerTest::::checkImageWithOPITest()", "478": "PdfA2CheckerTest::::checkImageWithOPITest()", "480": "PdfA2CheckerTest::::checkImageWithInterpolateTest()", "481": "PdfA2CheckerTest::::checkImageWithInterpolateTest()", "482": "PdfA2CheckerTest::::checkImageWithInterpolateTest()", "483": "PdfA2CheckerTest::::checkImageWithInterpolateTest()", "484": "PdfA2CheckerTest::::checkImageWithInterpolateTest()", "485": "PdfA2CheckerTest::::checkImageWithInterpolateTest()", "486": "PdfA2CheckerTest::::checkImageWithInterpolateTest()", "487": "PdfA2CheckerTest::::checkImageWithInterpolateTest()", "488": "PdfA2CheckerTest::::checkImageWithInterpolateTest()", "490": "PdfA2CheckerTest::::checkFormXObjectWithOPITest()", "491": "PdfA2CheckerTest::::checkFormXObjectWithOPITest()", "492": "PdfA2CheckerTest::::checkFormXObjectWithOPITest()", "493": "PdfA2CheckerTest::::checkFormXObjectWithOPITest()", "494": "PdfA2CheckerTest::::checkFormXObjectWithOPITest()", "495": "PdfA2CheckerTest::::checkFormXObjectWithOPITest()", "496": "PdfA2CheckerTest::::checkFormXObjectWithOPITest()", "497": "PdfA2CheckerTest::::checkFormXObjectWithOPITest()", "498": "PdfA2CheckerTest::::checkFormXObjectWithOPITest()", "500": "PdfA2CheckerTest::::checkFormXObjectWithPSTest()", "501": "PdfA2CheckerTest::::checkFormXObjectWithPSTest()", "502": "PdfA2CheckerTest::::checkFormXObjectWithPSTest()", "503": "PdfA2CheckerTest::::checkFormXObjectWithPSTest()", "504": "PdfA2CheckerTest::::checkFormXObjectWithPSTest()", "505": "PdfA2CheckerTest::::checkFormXObjectWithPSTest()", "506": "PdfA2CheckerTest::::checkFormXObjectWithPSTest()", "507": "PdfA2CheckerTest::::checkFormXObjectWithPSTest()", "508": "PdfA2CheckerTest::::checkFormXObjectWithPSTest()", "510": "PdfA2CheckerTest::::checkCryptInInlineImage()", "511": "PdfA2CheckerTest::::checkCryptInInlineImage()", "512": "PdfA2CheckerTest::::checkCryptInInlineImage()", "513": "PdfA2CheckerTest::::checkCryptInInlineImage()", "514": "PdfA2CheckerTest::::checkCryptInInlineImage()", "515": "PdfA2CheckerTest::::checkCryptInInlineImage()", "516": "PdfA2CheckerTest::::checkCryptInInlineImage()", "517": "PdfA2CheckerTest::::checkCryptInInlineImage()", "518": "PdfA2CheckerTest::::checkCryptInInlineImage()", "521": "PdfA2CheckerTest::::checkLZWDecodeArrayInInlineImage()", "522": "PdfA2CheckerTest::::checkLZWDecodeArrayInInlineImage()", "523": "PdfA2CheckerTest::::checkLZWDecodeArrayInInlineImage()", "524": "PdfA2CheckerTest::::checkLZWDecodeArrayInInlineImage()", "525": "PdfA2CheckerTest::::checkLZWDecodeArrayInInlineImage()", "526": "PdfA2CheckerTest::::checkLZWDecodeArrayInInlineImage()", "527": "PdfA2CheckerTest::::checkLZWDecodeArrayInInlineImage()", "528": "PdfA2CheckerTest::::checkLZWDecodeArrayInInlineImage()", "529": "PdfA2CheckerTest::::checkLZWDecodeArrayInInlineImage()", "530": "PdfA2CheckerTest::::checkLZWDecodeArrayInInlineImage()", "531": "PdfA2CheckerTest::::checkLZWDecodeArrayInInlineImage()", "533": "PdfA2CheckerTest::::checkCryptArrayInInlineImage()", "534": "PdfA2CheckerTest::::checkCryptArrayInInlineImage()", "535": "PdfA2CheckerTest::::checkCryptArrayInInlineImage()", "536": "PdfA2CheckerTest::::checkCryptArrayInInlineImage()", "537": "PdfA2CheckerTest::::checkCryptArrayInInlineImage()", "538": "PdfA2CheckerTest::::checkCryptArrayInInlineImage()", "539": "PdfA2CheckerTest::::checkCryptArrayInInlineImage()", "540": "PdfA2CheckerTest::::checkCryptArrayInInlineImage()", "541": "PdfA2CheckerTest::::checkCryptArrayInInlineImage()", "542": "PdfA2CheckerTest::::checkCryptArrayInInlineImage()", "543": "PdfA2CheckerTest::::checkCryptArrayInInlineImage()", "545": "PdfA2CheckerTest::::checkAllowedArrayFilterInInlineImage()", "546": "PdfA2CheckerTest::::checkAllowedArrayFilterInInlineImage()", "547": "PdfA2CheckerTest::::checkAllowedArrayFilterInInlineImage()", "548": "PdfA2CheckerTest::::checkAllowedArrayFilterInInlineImage()", "549": "PdfA2CheckerTest::::checkAllowedArrayFilterInInlineImage()", "550": "PdfA2CheckerTest::::checkAllowedArrayFilterInInlineImage()", "551": "PdfA2CheckerTest::::checkAllowedArrayFilterInInlineImage()", "552": "PdfA2CheckerTest::::checkAllowedArrayFilterInInlineImage()", "553": "PdfA2CheckerTest::::checkAllowedArrayFilterInInlineImage()", "554": "PdfA2CheckerTest::::checkAllowedArrayFilterInInlineImage()", "555": "PdfA2CheckerTest::::checkAllowedArrayFilterInInlineImage()", "557": "PdfA2CheckerTest::::checkAllowedFilterInInlineImage()", "558": "PdfA2CheckerTest::::checkAllowedFilterInInlineImage()", "559": "PdfA2CheckerTest::::checkAllowedFilterInInlineImage()", "560": "PdfA2CheckerTest::::checkAllowedFilterInInlineImage()", "561": "PdfA2CheckerTest::::checkAllowedFilterInInlineImage()", "562": "PdfA2CheckerTest::::checkAllowedFilterInInlineImage()", "563": "PdfA2CheckerTest::::checkAllowedFilterInInlineImage()", "564": "PdfA2CheckerTest::::checkAllowedFilterInInlineImage()", "565": "PdfA2CheckerTest::::checkAllowedFilterInInlineImage()", "567": "PdfA2CheckerTest::::checkEmptyAnnotationTest()", "568": "PdfA2CheckerTest::::checkEmptyAnnotationTest()", "569": "PdfA2CheckerTest::::checkEmptyAnnotationTest()", "570": "PdfA2CheckerTest::::checkEmptyAnnotationTest()", "571": "PdfA2CheckerTest::::checkEmptyAnnotationTest()", "572": "PdfA2CheckerTest::::checkEmptyAnnotationTest()", "573": "PdfA2CheckerTest::::checkEmptyAnnotationTest()", "574": "PdfA2CheckerTest::::checkEmptyAnnotationTest()", "576": "PdfA2CheckerTest::::checkAnnotationAgainstActionsWithATest()", "577": "PdfA2CheckerTest::::checkAnnotationAgainstActionsWithATest()", "578": "PdfA2CheckerTest::::checkAnnotationAgainstActionsWithATest()", "579": "PdfA2CheckerTest::::checkAnnotationAgainstActionsWithATest()", "580": "PdfA2CheckerTest::::checkAnnotationAgainstActionsWithATest()", "581": "PdfA2CheckerTest::::checkAnnotationAgainstActionsWithATest()", "582": "PdfA2CheckerTest::::checkAnnotationAgainstActionsWithATest()", "583": "PdfA2CheckerTest::::checkAnnotationAgainstActionsWithATest()", "584": "PdfA2CheckerTest::::checkAnnotationAgainstActionsWithATest()", "585": "PdfA2CheckerTest::::checkAnnotationAgainstActionsWithATest()", "587": "PdfA2CheckerTest::::checkAnnotationAgainstActionsWithAATest()", "588": "PdfA2CheckerTest::::checkAnnotationAgainstActionsWithAATest()", "589": "PdfA2CheckerTest::::checkAnnotationAgainstActionsWithAATest()", "590": "PdfA2CheckerTest::::checkAnnotationAgainstActionsWithAATest()", "591": "PdfA2CheckerTest::::checkAnnotationAgainstActionsWithAATest()", "592": "PdfA2CheckerTest::::checkAnnotationAgainstActionsWithAATest()", "593": "PdfA2CheckerTest::::checkAnnotationAgainstActionsWithAATest()", "594": "PdfA2CheckerTest::::checkAnnotationAgainstActionsWithAATest()", "595": "PdfA2CheckerTest::::checkAnnotationAgainstActionsWithAATest()", "597": "PdfA2CheckerTest::::checkNeedsRenderingCatalogTest()", "598": "PdfA2CheckerTest::::checkNeedsRenderingCatalogTest()", "599": "PdfA2CheckerTest::::checkNeedsRenderingCatalogTest()", "600": "PdfA2CheckerTest::::checkNeedsRenderingCatalogTest()", "601": "PdfA2CheckerTest::::checkNeedsRenderingCatalogTest()", "602": "PdfA2CheckerTest::::checkNeedsRenderingCatalogTest()", "603": "PdfA2CheckerTest::::checkNeedsRenderingCatalogTest()", "604": "PdfA2CheckerTest::::checkNeedsRenderingCatalogTest()", "605": "PdfA2CheckerTest::::checkNeedsRenderingCatalogTest()", "607": "PdfA2CheckerTest::::checkCatalogContainsAATest()", "608": "PdfA2CheckerTest::::checkCatalogContainsAATest()", "609": "PdfA2CheckerTest::::checkCatalogContainsAATest()", "610": "PdfA2CheckerTest::::checkCatalogContainsAATest()", "611": "PdfA2CheckerTest::::checkCatalogContainsAATest()", "612": "PdfA2CheckerTest::::checkCatalogContainsAATest()", "613": "PdfA2CheckerTest::::checkCatalogContainsAATest()", "614": "PdfA2CheckerTest::::checkCatalogContainsAATest()", "615": "PdfA2CheckerTest::::checkCatalogContainsAATest()", "617": "PdfA2CheckerTest::::checkCatalogContainsSignatureTest()", "618": "PdfA2CheckerTest::::checkCatalogContainsSignatureTest()", "619": "PdfA2CheckerTest::::checkCatalogContainsSignatureTest()", "620": "PdfA2CheckerTest::::checkCatalogContainsSignatureTest()", "621": "PdfA2CheckerTest::::checkCatalogContainsSignatureTest()", "622": "PdfA2CheckerTest::::checkCatalogContainsSignatureTest()", "623": "PdfA2CheckerTest::::checkCatalogContainsSignatureTest()", "624": "PdfA2CheckerTest::::checkCatalogContainsSignatureTest()", "625": "PdfA2CheckerTest::::checkCatalogContainsSignatureTest()", "626": "PdfA2CheckerTest::::checkCatalogContainsSignatureTest()", "628": "PdfA2CheckerTest::::checkPageSizeTest()", "629": "PdfA2CheckerTest::::checkPageSizeTest()", "630": "PdfA2CheckerTest::::checkPageSizeTest()", "631": "PdfA2CheckerTest::::checkPageSizeTest()", "632": "PdfA2CheckerTest::::checkPageSizeTest()", "633": "PdfA2CheckerTest::::checkPageSizeTest()", "634": "PdfA2CheckerTest::::checkPageSizeTest()", "635": "PdfA2CheckerTest::::checkPageSizeTest()", "636": "PdfA2CheckerTest::::checkPageSizeTest()", "637": "PdfA2CheckerTest::::checkPageSizeTest()", "638": "PdfA2CheckerTest::::checkPageSizeTest()", "639": "PdfA2CheckerTest::::checkPageSizeTest()", "640": "PdfA2CheckerTest::::checkPageSizeTest()", "641": "PdfA2CheckerTest::::checkPageSizeTest()", "642": "PdfA2CheckerTest::::checkPageSizeTest()", "644": "PdfA2CheckerTest::::checkOutputIntentsTest()", "645": "PdfA2CheckerTest::::checkOutputIntentsTest()", "646": "PdfA2CheckerTest::::checkOutputIntentsTest()", "647": "PdfA2CheckerTest::::checkOutputIntentsTest()", "648": "PdfA2CheckerTest::::checkOutputIntentsTest()", "649": "PdfA2CheckerTest::::checkOutputIntentsTest()", "650": "PdfA2CheckerTest::::checkOutputIntentsTest()", "651": "PdfA2CheckerTest::::checkOutputIntentsTest()", "652": "PdfA2CheckerTest::::checkOutputIntentsTest()", "653": "PdfA2CheckerTest::::checkOutputIntentsTest()", "654": "PdfA2CheckerTest::::checkOutputIntentsTest()", "655": "PdfA2CheckerTest::::checkOutputIntentsTest()", "656": "PdfA2CheckerTest::::checkOutputIntentsTest()", "657": "PdfA2CheckerTest::::checkOutputIntentsTest()", "658": "PdfA2CheckerTest::::checkOutputIntentsTest()", "659": "PdfA2CheckerTest::::checkOutputIntentsTest()", "660": "PdfA2CheckerTest::::checkOutputIntentsTest()", "661": "PdfA2CheckerTest::::checkCatalogContainsInvalidPermsTest()", "662": "PdfA2CheckerTest::::checkCatalogContainsInvalidPermsTest()", "663": "PdfA2CheckerTest::::checkCatalogContainsInvalidPermsTest()", "664": "PdfA2CheckerTest::::checkCatalogContainsInvalidPermsTest()", "665": "PdfA2CheckerTest::::checkCatalogContainsInvalidPermsTest()", "666": "PdfA2CheckerTest::::checkCatalogContainsInvalidPermsTest()", "667": "PdfA2CheckerTest::::checkCatalogContainsInvalidPermsTest()", "668": "PdfA2CheckerTest::::checkCatalogContainsInvalidPermsTest()", "669": "PdfA2CheckerTest::::checkCatalogContainsInvalidPermsTest()", "670": "PdfA2CheckerTest::::checkCatalogContainsInvalidPermsTest()", "671": "PdfA2CheckerTest::::checkCatalogContainsInvalidPermsTest()", "673": "PdfA2CheckerTest::::checkFileSpecNotContainsFKeyTest()", "674": "PdfA2CheckerTest::::checkFileSpecNotContainsFKeyTest()", "675": "PdfA2CheckerTest::::checkFileSpecNotContainsFKeyTest()", "676": "PdfA2CheckerTest::::checkFileSpecNotContainsFKeyTest()", "677": "PdfA2CheckerTest::::checkFileSpecNotContainsFKeyTest()", "678": "PdfA2CheckerTest::::checkFileSpecNotContainsFKeyTest()", "679": "PdfA2CheckerTest::::checkFileSpecNotContainsFKeyTest()", "680": "PdfA2CheckerTest::::checkFileSpecNotContainsFKeyTest()", "681": "PdfA2CheckerTest::::checkFileSpecNotContainsFKeyTest()", "683": "PdfA2CheckerTest::::checkFileSpecContainsNullFKeyTest()", "684": "PdfA2CheckerTest::::checkFileSpecContainsNullFKeyTest()", "685": "PdfA2CheckerTest::::checkFileSpecContainsNullFKeyTest()", "686": "PdfA2CheckerTest::::checkFileSpecContainsNullFKeyTest()", "687": "PdfA2CheckerTest::::checkFileSpecContainsNullFKeyTest()", "688": "PdfA2CheckerTest::::checkFileSpecContainsNullFKeyTest()", "689": "PdfA2CheckerTest::::checkFileSpecContainsNullFKeyTest()", "690": "PdfA2CheckerTest::::checkFileSpecContainsNullFKeyTest()", "691": "PdfA2CheckerTest::::checkFileSpecContainsNullFKeyTest()", "692": "PdfA2CheckerTest::::checkFileSpecContainsNullFKeyTest()", "693": "PdfA2CheckerTest::::checkFileSpecContainsNullFKeyTest()", "694": "PdfA2CheckerTest::::checkFileSpecContainsNullFKeyTest()", "696": "PdfA2CheckerTest::::checkPdfStreamContainsFKeyTest()", "697": "PdfA2CheckerTest::::checkPdfStreamContainsFKeyTest()", "698": "PdfA2CheckerTest::::checkPdfStreamContainsFKeyTest()", "699": "PdfA2CheckerTest::::checkPdfStreamContainsFKeyTest()", "700": "PdfA2CheckerTest::::checkPdfStreamContainsFKeyTest()", "701": "PdfA2CheckerTest::::checkPdfStreamContainsFKeyTest()", "702": "PdfA2CheckerTest::::checkPdfStreamContainsFKeyTest()", "703": "PdfA2CheckerTest::::checkPdfStreamContainsFKeyTest()", "704": "PdfA2CheckerTest::::checkPdfStreamContainsFKeyTest()", "706": "PdfA2CheckerTest::::checkPdfStreamContainsLZWDecodeKeyTest()", "707": "PdfA2CheckerTest::::checkPdfStreamContainsLZWDecodeKeyTest()", "708": "PdfA2CheckerTest::::checkPdfStreamContainsLZWDecodeKeyTest()", "709": "PdfA2CheckerTest::::checkPdfStreamContainsLZWDecodeKeyTest()", "710": "PdfA2CheckerTest::::checkPdfStreamContainsLZWDecodeKeyTest()", "711": "PdfA2CheckerTest::::checkPdfStreamContainsLZWDecodeKeyTest()", "712": "PdfA2CheckerTest::::checkPdfStreamContainsLZWDecodeKeyTest()", "713": "PdfA2CheckerTest::::checkPdfStreamContainsLZWDecodeKeyTest()", "714": "PdfA2CheckerTest::::checkPdfStreamContainsLZWDecodeKeyTest()", "716": "PdfA2CheckerTest::::checkPdfStreamContainsLZWDecodeArrayKeyTest()", "717": "PdfA2CheckerTest::::checkPdfStreamContainsLZWDecodeArrayKeyTest()", "718": "PdfA2CheckerTest::::checkPdfStreamContainsLZWDecodeArrayKeyTest()", "719": "PdfA2CheckerTest::::checkPdfStreamContainsLZWDecodeArrayKeyTest()", "720": "PdfA2CheckerTest::::checkPdfStreamContainsLZWDecodeArrayKeyTest()", "721": "PdfA2CheckerTest::::checkPdfStreamContainsLZWDecodeArrayKeyTest()", "722": "PdfA2CheckerTest::::checkPdfStreamContainsLZWDecodeArrayKeyTest()", "723": "PdfA2CheckerTest::::checkPdfStreamContainsLZWDecodeArrayKeyTest()", "724": "PdfA2CheckerTest::::checkPdfStreamContainsLZWDecodeArrayKeyTest()", "725": "PdfA2CheckerTest::::checkPdfStreamContainsLZWDecodeArrayKeyTest()", "726": "PdfA2CheckerTest::::checkPdfStreamContainsLZWDecodeArrayKeyTest()", "728": "PdfA2CheckerTest::::checkPdfStreamContainsCryptKeyTest()", "729": "PdfA2CheckerTest::::checkPdfStreamContainsCryptKeyTest()", "730": "PdfA2CheckerTest::::checkPdfStreamContainsCryptKeyTest()", "731": "PdfA2CheckerTest::::checkPdfStreamContainsCryptKeyTest()", "732": "PdfA2CheckerTest::::checkPdfStreamContainsCryptKeyTest()", "733": "PdfA2CheckerTest::::checkPdfStreamContainsCryptKeyTest()", "734": "PdfA2CheckerTest::::checkPdfStreamContainsCryptKeyTest()", "735": "PdfA2CheckerTest::::checkPdfStreamContainsCryptKeyTest()", "736": "PdfA2CheckerTest::::checkPdfStreamContainsCryptKeyTest()", "737": "PdfA2CheckerTest::::checkPdfStreamContainsCryptKeyTest()", "738": "PdfA2CheckerTest::::checkPdfStreamContainsCryptKeyTest()", "739": "PdfA2CheckerTest::::checkPdfStreamContainsCryptKeyTest()", "741": "PdfA2CheckerTest::::checkPdfStreamContainsCryptArrayKeyTest()", "742": "PdfA2CheckerTest::::checkPdfStreamContainsCryptArrayKeyTest()", "743": "PdfA2CheckerTest::::checkPdfStreamContainsCryptArrayKeyTest()", "744": "PdfA2CheckerTest::::checkPdfStreamContainsCryptArrayKeyTest()", "745": "PdfA2CheckerTest::::checkPdfStreamContainsCryptArrayKeyTest()", "746": "PdfA2CheckerTest::::checkPdfStreamContainsCryptArrayKeyTest()", "747": "PdfA2CheckerTest::::checkPdfStreamContainsCryptArrayKeyTest()", "748": "PdfA2CheckerTest::::checkPdfStreamContainsCryptArrayKeyTest()", "749": "PdfA2CheckerTest::::checkPdfStreamContainsCryptArrayKeyTest()", "750": "PdfA2CheckerTest::::checkPdfStreamContainsCryptArrayKeyTest()", "751": "PdfA2CheckerTest::::checkPdfStreamContainsCryptArrayKeyTest()", "752": "PdfA2CheckerTest::::checkPdfStreamContainsCryptArrayKeyTest()", "753": "PdfA2CheckerTest::::checkPdfStreamContainsCryptArrayKeyTest()", "754": "PdfA2CheckerTest::::checkPdfStreamContainsCryptArrayKeyTest()", "755": "PdfA2CheckerTest::::checkPdfStreamContainsCryptArrayKeyTest()", "756": "PdfA2CheckerTest::::checkPdfStreamContainsCryptArrayKeyTest()", "758": "PdfA2CheckerTest::::checkColorSpaceWithDeviceNWithoutAttributes()", "759": "PdfA2CheckerTest::::checkColorSpaceWithDeviceNWithoutAttributes()", "760": "PdfA2CheckerTest::::checkColorSpaceWithDeviceNWithoutAttributes()", "761": "PdfA2CheckerTest::::checkColorSpaceWithDeviceNWithoutAttributes()", "762": "PdfA2CheckerTest::::checkColorSpaceWithDeviceNWithoutAttributes()", "763": "PdfA2CheckerTest::::checkColorSpaceWithDeviceNWithoutAttributes()", "764": "PdfA2CheckerTest::::checkColorSpaceWithDeviceNWithoutAttributes()", "765": "PdfA2CheckerTest::::checkColorSpaceWithDeviceNWithoutAttributes()", "766": "PdfA2CheckerTest::::checkColorSpaceWithDeviceNWithoutAttributes()", "767": "PdfA2CheckerTest::::checkColorSpaceWithDeviceNWithoutAttributes()", "768": "PdfA2CheckerTest::::checkColorSpaceWithDeviceNWithoutAttributes()", "769": "PdfA2CheckerTest::::checkColorSpaceWithDeviceNWithoutAttributes()", "770": "PdfA2CheckerTest::::checkColorSpaceWithDeviceNWithoutAttributes()", "771": "PdfA2CheckerTest::::checkColorSpaceWithDeviceNWithoutAttributes()", "772": "PdfA2CheckerTest::::checkColorSpaceWithDeviceNWithoutAttributes()", "773": "PdfA2CheckerTest::::checkColorSpaceWithDeviceNWithoutAttributes()", "774": "PdfA2CheckerTest::::checkColorSpaceWithDeviceNWithoutAttributes()", "775": "PdfA2CheckerTest::::checkColorSpaceWithDeviceNWithoutAttributes()", "776": "PdfA2CheckerTest::::checkColorSpaceWithDeviceNWithoutAttributes()", "777": "PdfA2CheckerTest::::checkColorSpaceWithDeviceNWithoutAttributes()", "778": "PdfA2CheckerTest::::checkColorSpaceWithDeviceNWithoutAttributes()", "779": "PdfA2CheckerTest::::checkColorSpaceWithDeviceNWithoutAttributes()", "780": "PdfA2CheckerTest::::checkColorSpaceWithDeviceNWithoutAttributes()", "781": "PdfA2CheckerTest::::checkColorSpaceWithDeviceNWithoutAttributes()", "784": "PdfA2CheckerTest::::checkColorSpaceWithDeviceNWithoutColorants()", "785": "PdfA2CheckerTest::::checkColorSpaceWithDeviceNWithoutColorants()", "786": "PdfA2CheckerTest::::checkColorSpaceWithDeviceNWithoutColorants()", "787": "PdfA2CheckerTest::::checkColorSpaceWithDeviceNWithoutColorants()", "788": "PdfA2CheckerTest::::checkColorSpaceWithDeviceNWithoutColorants()", "789": "PdfA2CheckerTest::::checkColorSpaceWithDeviceNWithoutColorants()", "790": "PdfA2CheckerTest::::checkColorSpaceWithDeviceNWithoutColorants()", "791": "PdfA2CheckerTest::::checkColorSpaceWithDeviceNWithoutColorants()", "792": "PdfA2CheckerTest::::checkColorSpaceWithDeviceNWithoutColorants()", "793": "PdfA2CheckerTest::::checkColorSpaceWithDeviceNWithoutColorants()", "794": "PdfA2CheckerTest::::checkColorSpaceWithDeviceNWithoutColorants()", "795": "PdfA2CheckerTest::::checkColorSpaceWithDeviceNWithoutColorants()", "796": "PdfA2CheckerTest::::checkColorSpaceWithDeviceNWithoutColorants()", "797": "PdfA2CheckerTest::::checkColorSpaceWithDeviceNWithoutColorants()", "798": "PdfA2CheckerTest::::checkColorSpaceWithDeviceNWithoutColorants()", "799": "PdfA2CheckerTest::::checkColorSpaceWithDeviceNWithoutColorants()", "800": "PdfA2CheckerTest::::checkColorSpaceWithDeviceNWithoutColorants()", "801": "PdfA2CheckerTest::::checkColorSpaceWithDeviceNWithoutColorants()", "802": "PdfA2CheckerTest::::checkColorSpaceWithDeviceNWithoutColorants()", "803": "PdfA2CheckerTest::::checkColorSpaceWithDeviceNWithoutColorants()", "804": "PdfA2CheckerTest::::checkColorSpaceWithDeviceNWithoutColorants()", "805": "PdfA2CheckerTest::::checkColorSpaceWithDeviceNWithoutColorants()", "806": "PdfA2CheckerTest::::checkColorSpaceWithDeviceNWithoutColorants()", "807": "PdfA2CheckerTest::::checkColorSpaceWithDeviceNWithoutColorants()", "808": "PdfA2CheckerTest::::checkColorSpaceWithDeviceNWithoutColorants()", "809": "PdfA2CheckerTest::::checkColorSpaceWithDeviceNWithoutColorants()", "811": "PdfA2CheckerTest::::createSignatureDict()", "812": "PdfA2CheckerTest::::createSignatureDict()", "813": "PdfA2CheckerTest::::createSignatureDict()", "814": "PdfA2CheckerTest::::createSignatureDict()", "815": "PdfA2CheckerTest::::createSignatureDict()", "816": "PdfA2CheckerTest::::createSignatureDict()", "817": "PdfA2CheckerTest::::createSignatureDict()", "818": "PdfA2CheckerTest::::createSignatureDict()", "819": "PdfA2CheckerTest::::createSignatureDict()", "820": "PdfA2CheckerTest::::createSignatureDict()", "821": "PdfA2CheckerTest::::createSignatureDict()", "822": "PdfA2CheckerTest::::createSignatureDict()", "823": "PdfA2CheckerTest::::createSignatureDict()", "824": "PdfA2CheckerTest::::createSignatureDict()", "825": "PdfA2CheckerTest::::createSignatureDict()", "826": "PdfA2CheckerTest::::createSignatureDict()", "827": "PdfA2CheckerTest::::createSignatureDict()", "828": "PdfA2CheckerTest::::createSignatureDict()"}, "tests": [{"test_lines": [59, 79], "covered_lines": [80, 81, 87, 88, 90, 91, 103, 104, 123, 124, 135, 136, 158, 164, 169, 170, 172, 181, 182, 606, 610, 614, 618, 619, 623, 624, 638, 639, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 841, 842, 843, 849, 851, 852, 853, 1048, 1051, 1204, 1205, 1208, 1209, 1211, 1213, 1214, 1222]}, {"test_lines": [81, 97], "covered_lines": [80, 81, 87, 88, 90, 91, 103, 104, 123, 124, 135, 136, 158, 164, 169, 170, 172, 181, 182, 606, 610, 614, 618, 619, 623, 624, 638, 639, 828, 829, 830, 831, 834, 835, 836, 837, 838, 841, 842, 843, 849, 851, 1048, 1049]}, {"test_lines": [99, 122], "covered_lines": [80, 81, 87, 88, 90, 91, 103, 104, 123, 124, 135, 136, 158, 164, 169, 170, 172, 181, 182, 606, 610, 614, 618, 619, 623, 624, 638, 639, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 841, 842, 843, 849, 851, 852, 853, 1048, 1051, 1204, 1205, 1208, 1209, 1211, 1213, 1214, 1222]}, {"test_lines": [124, 146], "covered_lines": [80, 81, 87, 88, 90, 91, 103, 104, 123, 124, 135, 136, 158, 164, 169, 170, 172, 181, 182, 606, 610, 614, 618, 619, 623, 624, 638, 639, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 841, 842, 843, 849, 851, 1204, 1205, 1206]}, {"test_lines": [148, 183], "covered_lines": [80, 81, 87, 88, 90, 91, 103, 104, 123, 124, 135, 136, 158, 164, 169, 170, 172, 181, 182, 606, 610, 614, 618, 619, 623, 624, 638, 639, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 849, 851, 852, 853, 1048, 1051, 1204, 1205, 1208, 1211, 1213, 1214, 1215, 1216, 1217, 1218, 1222, 1225, 1226, 1227, 1231, 1232]}, {"test_lines": [185, 219], "covered_lines": [80, 81, 87, 88, 90, 91, 103, 104, 123, 124, 135, 136, 158, 164, 169, 170, 172, 181, 182, 606, 610, 614, 618, 619, 623, 624, 638, 639, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 849, 851, 852, 853, 1048, 1051, 1204, 1205, 1208, 1211, 1213, 1214, 1215, 1216, 1217, 1218, 1222, 1225, 1226, 1227, 1231, 1232]}, {"test_lines": [221, 260], "covered_lines": [80, 81, 87, 88, 90, 91, 103, 104, 123, 124, 135, 136, 158, 164, 169, 170, 172, 181, 182, 606, 610, 614, 618, 619, 623, 624, 638, 639, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 849, 851, 852, 853, 1048, 1051, 1204, 1205, 1208, 1211, 1213, 1214, 1215, 1216, 1217, 1218, 1222, 1225, 1226, 1227, 1231, 1232]}, {"test_lines": [262, 287], "covered_lines": [80, 81, 87, 88, 90, 91, 103, 104, 123, 124, 135, 136, 158, 164, 169, 170, 172, 181, 182, 606, 610, 614, 618, 619, 623, 624, 638, 639, 643, 644, 828, 829, 830, 831, 832, 834, 835, 841, 842, 843, 844, 845, 846, 849, 851, 852, 853, 855, 1048, 1051, 1204, 1205, 1208, 1211, 1213, 1214, 1222]}, {"test_lines": [289, 323], "covered_lines": [80, 81, 87, 88, 90, 91, 103, 104, 123, 124, 135, 136, 158, 164, 169, 170, 172, 181, 182, 606, 610, 614, 618, 619, 623, 624, 638, 639, 643, 644, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 849, 851, 852, 853, 855, 1048, 1051, 1204, 1205, 1208, 1211, 1213, 1214, 1222]}, {"test_lines": [325, 338], "covered_lines": [80, 81, 87, 88, 90, 91, 103, 104, 123, 124, 135, 136, 158, 164, 169, 170, 172, 181, 182, 606, 610, 614, 618, 619, 623, 624, 638, 639, 640]}, {"test_lines": [340, 349], "covered_lines": [80, 81, 87, 88, 90, 91, 103, 104, 123, 124, 135, 136, 158, 164, 169, 170, 172, 181, 182, 606, 610, 614, 618, 619, 620]}, {"test_lines": [351, 374], "covered_lines": [80, 81, 87, 88, 90, 91, 103, 104, 123, 124, 135, 136, 158, 164, 169, 170, 172, 181, 182, 257, 258, 261, 265, 273, 275, 276, 280, 281, 418, 423]}, {"test_lines": [376, 391], "covered_lines": [80, 81, 87, 88, 90, 91, 103, 104, 123, 124, 135, 136, 158, 164, 169, 170, 172, 181, 182, 229, 230, 231, 232, 233, 234, 235, 239, 240, 242, 243, 248, 249, 257, 258, 259, 265, 273, 298, 302, 308, 312, 313, 314, 316, 323, 333, 337, 346, 349, 353, 354, 358, 370, 372, 375, 378, 382, 383, 384, 387, 391, 392, 395, 1068, 1071, 1236, 1238, 1239, 1266, 1267, 1268]}, {"test_lines": [393, 408], "covered_lines": [80, 81, 87, 88, 90, 91, 103, 104, 123, 124, 135, 136, 158, 164, 169, 170, 172, 181, 182, 220, 221, 229, 230, 231, 232, 233, 234, 235, 239, 240, 242, 243, 248, 249, 257, 258, 259, 265, 273, 298, 302, 308, 312, 313, 314, 316, 323, 333, 337, 346, 349, 353, 354, 358, 370, 372, 375, 378, 382, 383, 384, 387, 391, 392, 395, 1068, 1071, 1236, 1238, 1239, 1266, 1267, 1268]}, {"test_lines": [410, 426], "covered_lines": [80, 81, 87, 88, 90, 91, 103, 104, 123, 124, 135, 136, 158, 164, 169, 170, 172, 181, 182, 229, 230, 231, 232, 233, 234, 235, 242, 243, 248, 249, 257, 258, 259, 265, 273, 298, 302, 308, 312, 313, 314, 316, 323, 333, 337, 346, 349, 353, 354, 358, 370, 372, 375, 378, 382, 383, 384, 387, 391, 392, 395, 1068, 1071, 1236, 1238, 1239]}, {"test_lines": [428, 433], "covered_lines": [80, 81, 87, 88, 90, 91, 103, 104, 123, 124, 135, 136, 158, 164, 169, 170, 172, 181, 182, 399, 403, 404, 405, 406, 407, 408, 409, 415]}, {"test_lines": [435, 448], "covered_lines": [80, 81, 87, 88, 90, 91, 103, 104, 123, 124, 135, 136, 158, 164, 169, 170, 172, 181, 182, 399, 403, 404, 405, 406, 407, 408, 410]}, {"test_lines": [450, 458], "covered_lines": [80, 81, 87, 88, 90, 91, 103, 104, 123, 124, 135, 136, 158, 164, 169, 170, 172, 181, 182, 186, 187, 188, 189]}, {"test_lines": [460, 468], "covered_lines": [80, 81, 87, 88, 90, 91, 103, 104, 123, 124, 135, 136, 158, 164, 169, 170, 172, 181, 182, 859, 860, 866, 867, 873, 874]}, {"test_lines": [470, 478], "covered_lines": [80, 81, 87, 88, 90, 91, 103, 104, 123, 124, 135, 136, 158, 164, 169, 170, 172, 181, 182, 859, 860, 866, 867, 873, 876, 877]}, {"test_lines": [480, 488], "covered_lines": [80, 81, 87, 88, 90, 91, 103, 104, 123, 124, 135, 136, 158, 164, 169, 170, 172, 181, 182, 859, 860, 866, 867, 873, 876, 880, 881]}, {"test_lines": [490, 498], "covered_lines": [80, 81, 87, 88, 90, 91, 103, 104, 123, 124, 135, 136, 158, 164, 169, 170, 172, 181, 182, 1000, 1002, 1003]}, {"test_lines": [500, 508], "covered_lines": [80, 81, 87, 88, 90, 91, 103, 104, 123, 124, 135, 136, 158, 164, 169, 170, 172, 181, 182, 1000, 1002, 1005, 1006]}, {"test_lines": [510, 518], "covered_lines": [80, 81, 87, 88, 90, 91, 103, 104, 123, 124, 135, 136, 158, 164, 169, 170, 172, 181, 182, 186, 187, 188, 191, 192]}, {"test_lines": [521, 531], "covered_lines": [80, 81, 87, 88, 90, 91, 103, 104, 123, 124, 135, 136, 158, 164, 169, 170, 172, 181, 182, 186, 187, 197, 198, 199, 200, 201]}, {"test_lines": [533, 543], "covered_lines": [80, 81, 87, 88, 90, 91, 103, 104, 123, 124, 135, 136, 158, 164, 169, 170, 172, 181, 182, 186, 187, 197, 198, 199, 200, 202, 203]}, {"test_lines": [545, 555], "covered_lines": [80, 81, 87, 88, 90, 91, 103, 104, 123, 124, 135, 136, 158, 164, 169, 170, 172, 181, 182, 186, 187, 197, 198, 199, 200, 202, 205, 206]}, {"test_lines": [557, 565], "covered_lines": [80, 81, 87, 88, 90, 91, 103, 104, 123, 124, 135, 136, 158, 164, 169, 170, 172, 181, 182, 186, 187, 188, 191, 194, 195]}, {"test_lines": [567, 574], "covered_lines": [80, 81, 87, 88, 90, 91, 103, 104, 123, 124, 135, 136, 158, 164, 169, 170, 172, 181, 182, 460, 462, 463]}, {"test_lines": [576, 585], "covered_lines": [80, 81, 87, 88, 90, 91, 103, 104, 123, 124, 135, 136, 158, 164, 169, 170, 172, 181, 182, 546, 547, 549]}, {"test_lines": [587, 595], "covered_lines": [80, 81, 87, 88, 90, 91, 103, 104, 123, 124, 135, 136, 158, 164, 169, 170, 172, 181, 182, 546, 551, 552]}, {"test_lines": [597, 605], "covered_lines": [80, 81, 87, 88, 90, 91, 103, 104, 123, 124, 135, 136, 158, 164, 169, 170, 172, 181, 182, 614, 615]}, {"test_lines": [607, 615], "covered_lines": [80, 81, 87, 88, 90, 91, 103, 104, 123, 124, 135, 136, 158, 164, 169, 170, 172, 181, 182, 606, 607]}, {"test_lines": [617, 626], "covered_lines": [80, 81, 87, 88, 90, 91, 103, 104, 123, 124, 135, 136, 158, 164, 169, 170, 172, 181, 182, 399, 403, 404, 415, 606, 610, 614, 618, 619, 623, 624, 625, 626, 627, 628, 629, 631, 635, 638, 639, 643, 644, 828, 855]}, {"test_lines": [628, 642], "covered_lines": [80, 81, 87, 88, 90, 91, 103, 104, 123, 124, 135, 136, 158, 164, 169, 170, 172, 181, 182, 648, 649, 650, 651, 652, 653, 654, 655]}, {"test_lines": [644, 660], "covered_lines": [80, 81, 87, 88, 90, 91, 103, 104, 123, 124, 135, 136, 158, 164, 169, 170, 172, 181, 182, 766, 767, 771, 772, 773, 775, 776, 777, 778]}, {"test_lines": [661, 671], "covered_lines": [80, 81, 87, 88, 90, 91, 103, 104, 123, 124, 135, 136, 158, 164, 169, 170, 172, 181, 182, 606, 610, 614, 618, 619, 623, 624, 625, 626, 631, 633]}, {"test_lines": [673, 681], "covered_lines": [80, 81, 87, 88, 90, 91, 103, 104, 123, 124, 135, 136, 158, 164, 169, 170, 172, 181, 182, 662, 663, 664]}, {"test_lines": [683, 694], "covered_lines": [80, 81, 87, 88, 90, 91, 103, 104, 123, 124, 135, 136, 158, 164, 169, 170, 172, 181, 182, 662, 663, 666, 670, 671, 672, 673]}, {"test_lines": [696, 704], "covered_lines": [80, 81, 87, 88, 90, 91, 103, 104, 123, 124, 135, 136, 158, 164, 169, 170, 172, 181, 182, 453, 682, 684, 685]}, {"test_lines": [706, 714], "covered_lines": [80, 81, 87, 88, 90, 91, 103, 104, 123, 124, 135, 136, 158, 164, 169, 170, 172, 181, 182, 453, 682, 684, 688, 689, 690, 691]}, {"test_lines": [716, 726], "covered_lines": [80, 81, 87, 88, 90, 91, 103, 104, 123, 124, 135, 136, 158, 164, 169, 170, 172, 181, 182, 453, 682, 684, 688, 689, 704, 705, 706, 707, 708]}, {"test_lines": [728, 739], "covered_lines": [80, 81, 87, 88, 90, 91, 103, 104, 123, 124, 135, 136, 158, 164, 169, 170, 172, 181, 182, 453, 682, 684, 688, 689, 690, 692, 693, 694, 695, 696, 697]}, {"test_lines": [741, 756], "covered_lines": [80, 81, 87, 88, 90, 91, 103, 104, 123, 124, 135, 136, 158, 164, 169, 170, 172, 181, 182, 453, 682, 684, 688, 689, 704, 705, 706, 707, 709, 710, 711, 712, 713, 714, 715]}, {"test_lines": [758, 781], "covered_lines": [80, 81, 87, 88, 90, 91, 103, 104, 123, 124, 135, 136, 158, 164, 169, 170, 172, 181, 182, 257, 258, 261, 265, 273, 275, 276, 280, 281, 418, 423]}, {"test_lines": [784, 809], "covered_lines": [80, 81, 87, 88, 90, 91, 103, 104, 123, 124, 135, 136, 158, 164, 169, 170, 172, 181, 182, 257, 258, 261, 265, 273, 275, 276, 280, 283, 284, 285, 291, 418, 423]}]}}