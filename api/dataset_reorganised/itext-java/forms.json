{"/bernard/dataset_construction/prep/repos/itext-java/forms/src/main/java/com/itextpdf/forms/PdfAcroForm.java": {"class_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.forms;\n", "\n", "import com.itextpdf.commons.utils.MessageFormatUtil;\n", "import com.itextpdf.commons.utils.StringSplitUtil;\n", "import com.itextpdf.forms.exceptions.FormsExceptionMessageConstant;\n", "import com.itextpdf.forms.fields.AbstractPdfFormField;\n", "import com.itextpdf.forms.fields.PdfFormAnnotation;\n", "import com.itextpdf.forms.fields.PdfFormAnnotationUtil;\n", "import com.itextpdf.forms.fields.PdfFormCreator;\n", "import com.itextpdf.forms.fields.PdfFormField;\n", "import com.itextpdf.forms.fields.PdfFormFieldMergeUtil;\n", "import com.itextpdf.forms.fields.merging.MergeFieldsStrategy;\n", "import com.itextpdf.forms.fields.merging.OnDuplicateFormFieldNameStrategy;\n", "import com.itextpdf.forms.logs.FormsLogMessageConstants;\n", "import com.itextpdf.forms.xfa.XfaForm;\n", "import com.itextpdf.kernel.exceptions.PdfException;\n", "import com.itextpdf.kernel.geom.AffineTransform;\n", "import com.itextpdf.kernel.geom.Point;\n", "import com.itextpdf.kernel.geom.Rectangle;\n", "import com.itextpdf.kernel.pdf.IsoKey;\n", "import com.itextpdf.kernel.pdf.PdfArray;\n", "import com.itextpdf.kernel.pdf.PdfBoolean;\n", "import com.itextpdf.kernel.pdf.PdfDictionary;\n", "import com.itextpdf.kernel.pdf.PdfDocument;\n", "import com.itextpdf.kernel.pdf.PdfName;\n", "import com.itextpdf.kernel.pdf.PdfNumber;\n", "import com.itextpdf.kernel.pdf.PdfObject;\n", "import com.itextpdf.kernel.pdf.PdfObjectWrapper;\n", "import com.itextpdf.kernel.pdf.PdfPage;\n", "import com.itextpdf.kernel.pdf.PdfStream;\n", "import com.itextpdf.kernel.pdf.PdfString;\n", "import com.itextpdf.kernel.pdf.PdfVersion;\n", "import com.itextpdf.kernel.pdf.VersionConforming;\n", "import com.itextpdf.kernel.pdf.annot.PdfAnnotation;\n", "import com.itextpdf.kernel.pdf.canvas.PdfCanvas;\n", "import com.itextpdf.kernel.pdf.tagutils.TagReference;\n", "import com.itextpdf.kernel.pdf.tagutils.TagTreePointer;\n", "import com.itextpdf.kernel.pdf.xobject.PdfFormXObject;\n", "\n", "import java.util.Collection;\n", "import java.util.Collections;\n", "import java.util.LinkedHashMap;\n", "import java.util.LinkedHashSet;\n", "import java.util.List;\n", "import java.util.Map;\n", "import java.util.Map.Entry;\n", "import java.util.Set;\n", "import org.slf4j.Logger;\n", "import org.slf4j.LoggerFactory;\n", "\n", "/**\n", " * This class represents the static form technology AcroForm on a PDF file.\n", " */\n", "public class PdfAcroForm extends PdfObjectWrapper<PdfDictionary> {\n", "\n", "    private static final Logger LOGGER = LoggerFactory.getLogger(PdfAcroForm.class);\n", "\n", "    /**\n", "     * To be used with {@link #setSignatureFlags}.\n", "     * <br>\n", "     * <blockquote>\n", "     * If set, the document contains at least one signature field. This flag\n", "     * allows a conforming reader to enable user interface items (such as menu\n", "     * items or pushbuttons) related to signature processing without having to\n", "     * scan the entire document for the presence of signature fields.\n", "     * (ISO 32000-1, section 12.7.2 \"Interactive Form Dictionary\")\n", "     * </blockquote>\n", "     */\n", "    public static final int SIGNATURE_EXIST = 1;\n", "\n", "    /**\n", "     * To be used with {@link #setSignatureFlags}.\n", "     * <br>\n", "     * <blockquote>\n", "     * If set, the document contains signatures that may be invalidated if the\n", "     * file is saved (written) in a way that alters its previous contents, as\n", "     * opposed to an incremental update. Merely updating the file by appending\n", "     * new information to the end of the previous version is safe. Conforming\n", "     * readers may use this flag to inform a user requesting a full save that\n", "     * signatures will be invalidated and require explicit confirmation before\n", "     * continuing with the operation.\n", "     * (ISO 32000-1, section 12.7.2 \"Interactive Form Dictionary\")\n", "     * </blockquote>\n", "     */\n", "    public static final int APPEND_ONLY = 2;\n", "\n", "    /**\n", "     * Keeps track of whether or not appearances must be generated by the form\n", "     * fields themselves, or by the PDF viewer application. Default is\n", "     * <code>true</code>.\n", "     */\n", "    protected boolean generateAppearance = true;\n", "\n", "    /**\n", "     * A map of field names and their associated {@link PdfFormField form field}\n", "     * objects.\n", "     */\n", "    protected Map<String, PdfFormField> fields = new LinkedHashMap<>();\n", "\n", "    /**\n", "     * The PdfDocument to which the PdfAcroForm belongs.\n", "     */\n", "    protected PdfDocument document;\n", "\n", "    private PdfDictionary defaultResources;\n", "    private Set<PdfFormField> fieldsForFlattening = new LinkedHashSet<>();\n", "    private XfaForm xfaForm;\n", "\n", "    /**\n", "     * Creates a PdfAcroForm as a wrapper of a dictionary.\n", "     * Also initializes an XFA form if an <code>/XFA</code> entry is present in\n", "     * the dictionary.\n", "     *\n", "     * @param pdfObject the PdfDictionary to be wrapped\n", "     */\n", "    private PdfAcroForm(PdfDictionary pdfObject, PdfDocument pdfDocument) {\n", "        super(pdfObject);\n", "        document = pdfDocument;\n", "        fields = populateFormFieldsMap();\n", "        xfaForm = new XfaForm(pdfObject);\n", "    }\n", "\n", "    /**\n", "     * Creates a PdfAcroForm from a {@link PdfArray} of fields.\n", "     * Also initializes an empty XFA form.\n", "     *\n", "     * @param fields a {@link PdfArray} of {@link PdfDictionary} objects\n", "     */\n", "    private PdfAcroForm(PdfArray fields) {\n", "        this(createAcroFormDictionaryByFields(fields), null);\n", "        setForbidRelease();\n", "    }\n", "\n", "    /**\n", "     * Retrieves AcroForm from the document. If there is no AcroForm in the\n", "     * document Catalog and createIfNotExist flag is true then the AcroForm\n", "     * dictionary will be created and added to the document.\n", "     *\n", "     * @param document         the document to retrieve the {@link PdfAcroForm} from\n", "     * @param createIfNotExist when <code>true</code>, this method will create a {@link PdfAcroForm} if none exists\n", "     *                         for this document\n", "     *\n", "     * @return the {@link PdfDocument document}'s AcroForm,\n", "     * or a new one provided that <code>createIfNotExist</code> parameter is <code>true</code>, otherwise\n", "     * <code>null</code>.\n", "     */\n", "    public static PdfAcroForm getAcroForm(PdfDocument document, boolean createIfNotExist) {\n", "        return getAcroForm(document, createIfNotExist, new MergeFieldsStrategy());\n", "    }\n", "\n", "    /**\n", "     * Retrieves AcroForm from the document. If there is no AcroForm in the\n", "     * document Catalog and createIfNotExist flag is true then the AcroForm\n", "     * dictionary will be created and added to the document.\n", "     *\n", "     * @param document                     the document to retrieve the {@link PdfAcroForm} from\n", "     * @param createIfNotExist             when <code>true</code>, this method will create a {@link PdfAcroForm} if none\n", "     *                                     exists for\n", "     *                                     this document\n", "     * @param onDuplicateFieldNameStrategy the strategy to be used when a field with the same name already exists\n", "     *\n", "     * @return the {@link PdfDocument document}'s AcroForm,\n", "     * or a new one provided that <code>createIfNotExist</code> parameter is <code>true</code>, otherwise\n", "     * <code>null</code>.\n", "     */\n", "    public static PdfAcroForm getAcroForm(PdfDocument document, boolean createIfNotExist,\n", "            OnDuplicateFormFieldNameStrategy onDuplicateFieldNameStrategy) {\n", "        document.getDiContainer().register(OnDuplicateFormFieldNameStrategy.class, onDuplicateFieldNameStrategy);\n", "        PdfDictionary acroFormDictionary = document.getCatalog().getPdfObject().getAsDictionary(PdfName.AcroForm);\n", "        PdfAcroForm acroForm = null;\n", "        if (acroFormDictionary == null) {\n", "            if (createIfNotExist) {\n", "                acroForm = new PdfAcroForm(new PdfArray());\n", "                acroForm.makeIndirect(document);\n", "                document.getCatalog().put(PdfName.AcroForm, acroForm.getPdfObject());\n", "                document.getCatalog().setModified();\n", "            }\n", "        } else {\n", "            acroForm = new PdfAcroForm(acroFormDictionary, document);\n", "        }\n", "\n", "        if (acroForm != null) {\n", "            acroForm.defaultResources = acroForm.getDefaultResources();\n", "            if (acroForm.defaultResources == null) {\n", "                acroForm.defaultResources = new PdfDictionary();\n", "            }\n", "            acroForm.document = document;\n", "            acroForm.xfaForm = new XfaForm(document);\n", "        }\n", "\n", "        return acroForm;\n", "    }\n", "\n", "\n", "    /**\n", "     * This method adds the field to the last page in the document.\n", "     * If there's no pages, creates a new one.\n", "     *\n", "     * @param field the {@link PdfFormField} to be added to the form\n", "     */\n", "    public void addField(PdfFormField field) {\n", "        if (!field.getPdfObject().containsKey(PdfName.T)) {\n", "            throw new PdfException(FormsExceptionMessageConstant.FORM_FIELD_MUST_HAVE_A_NAME);\n", "        }\n", "\n", "        PdfPage page;\n", "        if (document.getNumberOfPages() == 0) {\n", "            document.addNewPage();\n", "        }\n", "        page = document.getLastPage();\n", "        addField(field, page);\n", "    }\n", "\n", "    /**\n", "     * This method adds the field to a specific page.\n", "     *\n", "     * @param field the {@link PdfFormField} to be added to the form\n", "     * @param page  the {@link PdfPage} on which to add the field\n", "     */\n", "    public void addField(PdfFormField field, PdfPage page) {\n", "        addField(field, page, true);\n", "    }\n", "\n", "    /**\n", "     * This method adds the field to a specific page.\n", "     *\n", "     * @param field the {@link PdfFormField} to be added to the form\n", "     * @param page  the {@link PdfPage} on which to add the field\n", "     * @param throwExceptionOnError true if the exception is expected to be thrown in case of error.\n", "     */\n", "    public void addField(PdfFormField field, PdfPage page, boolean throwExceptionOnError) {\n", "        if (!field.getPdfObject().containsKey(PdfName.T)) {\n", "            if (throwExceptionOnError) {\n", "                throw new PdfException(FormsExceptionMessageConstant.FORM_FIELD_MUST_HAVE_A_NAME);\n", "            } else {\n", "                LOGGER.warn(FormsLogMessageConstants.FORM_FIELD_MUST_HAVE_A_NAME);\n", "                return;\n", "            }\n", "        }\n", "        PdfFormFieldMergeUtil.mergeKidsWithSameNames(field, throwExceptionOnError);\n", "\n", "        // PdfPageFormCopier expects that we replace existed field by a new one in case they have the same names.\n", "        if (needToAddToAcroform(field, throwExceptionOnError)) {\n", "            PdfArray fieldsArray = getFields();\n", "            fieldsArray.add(field.getPdfObject());\n", "            fieldsArray.setModified();\n", "            fields.put(field.getFieldName().toUnicodeString(), field);\n", "        }\n", "        PdfDictionary fieldDict = field.getPdfObject();\n", "        processKids(fields.get(field.getFieldName().toUnicodeString()), page);\n", "\n", "        if (fieldDict.containsKey(PdfName.Subtype) && page != null) {\n", "            defineWidgetPageAndAddToIt(page, fieldDict, false);\n", "        }\n", "\n", "        setModified();\n", "    }\n", "\n", "\n", "    /**\n", "     * This method merges field with its annotation and places it on the given\n", "     * page. This method also work if the field has more than one widget\n", "     * annotation, but doesn't work with no annotations.\n", "     *\n", "     * @param field the {@link PdfFormField} to be added to the form\n", "     * @param page  the {@link PdfPage} on which to add the field\n", "     */\n", "    public void addFieldAppearanceToPage(PdfFormField field, PdfPage page) {\n", "        PdfDictionary fieldDict = field.getPdfObject();\n", "        PdfArray kids = field.getKids();\n", "        if (kids == null) {\n", "            return;\n", "        }\n", "\n", "        if (kids.size() == 1) {\n", "            PdfDictionary kidDict = (PdfDictionary) kids.get(0);\n", "            if (PdfFormAnnotationUtil.isPureWidget(kidDict)) {\n", "                // kid is pure widget, merge it with parent field\n", "                PdfFormAnnotationUtil.mergeWidgetWithParentField(field);\n", "                defineWidgetPageAndAddToIt(page, fieldDict, false);\n", "                return;\n", "            }\n", "        }\n", "\n", "        for (int i = 0; i < kids.size(); ++i) {\n", "            PdfDictionary kidDict = (PdfDictionary) kids.get(i);\n", "            if (PdfFormAnnotationUtil.isPureWidgetOrMergedField(kidDict)) {\n", "                // kid is either a pure widget or a merged field\n", "                defineWidgetPageAndAddToIt(page, kidDict, false);\n", "            }\n", "        }\n", "    }\n", "\n", "    /**\n", "     * Gets root fields (i.e. direct children of Acroform dictionary).\n", "     *\n", "     * @return a map of field names and their associated {@link PdfFormField form field} objects\n", "     */\n", "    public Map<String, PdfFormField> getRootFormFields() {\n", "        if (fields.size() == 0) {\n", "            fields = populateFormFieldsMap();\n", "        }\n", "        //TODO DEVSIX-6504 Fix copyField logic.\n", "        return fields;\n", "    }\n", "\n", "    /**\n", "     * Gets all {@link PdfFormField form field}s as a {@link Map} including fields kids.\n", "     *\n", "     * @return a map of field names and their associated {@link PdfFormField form field} objects\n", "     */\n", "    public Map<String, PdfFormField> getAllFormFields() {\n", "        if (fields.isEmpty()) {\n", "            fields = populateFormFieldsMap();\n", "        }\n", "        final Map<String, PdfFormField> allFields = new LinkedHashMap<>(fields);\n", "        for (Entry<String, PdfFormField> field : fields.entrySet()) {\n", "            final List<PdfFormField> kids = field.getValue().getAllChildFormFields();\n", "            for (PdfFormField kid : kids) {\n", "                final PdfString kidFieldName = kid.getFieldName();\n", "                if (kidFieldName != null) {\n", "                    allFields.put(kidFieldName.toUnicodeString(), kid);\n", "                }\n", "            }\n", "        }\n", "        return allFields;\n", "    }\n", "\n", "    /**\n", "     * Gets all {@link AbstractPdfFormField form field}s as a {@link Set} including fields kids and nameless fields.\n", "     *\n", "     * @return a set of {@link AbstractPdfFormField form field} objects.\n", "     */\n", "    public Set<AbstractPdfFormField> getAllFormFieldsAndAnnotations() {\n", "        if (fields.isEmpty()) {\n", "            fields = populateFormFieldsMap();\n", "        }\n", "        Set<AbstractPdfFormField> allFields = new LinkedHashSet<>();\n", "        for (Entry<String, PdfFormField> field : fields.entrySet()) {\n", "            allFields.add(field.getValue());\n", "            List<AbstractPdfFormField> kids = field.getValue().getAllChildFields();\n", "            allFields.addAll(kids);\n", "        }\n", "        return allFields;\n", "    }\n", "\n", "    /**\n", "     * Gets a collection of {@link PdfFormField form field}s, prepared for flattening using {@link #partialFormFlattening} method.\n", "     * If returned collection is empty, all form fields will be flattened on {@link #flattenFields flattenFields} call.\n", "     *\n", "     * @return a collection of {@link PdfFormField form field}s for flattening\n", "     */\n", "    public Collection<PdfFormField> getFieldsForFlattening() {\n", "        return Collections.unmodifiableCollection(fieldsForFlattening);\n", "    }\n", "\n", "    /**\n", "     * Gets the {@link PdfDocument} this {@link PdfAcroForm} belongs to.\n", "     *\n", "     * @return the document of this form\n", "     */\n", "    public PdfDocument getPdfDocument() {\n", "        return document;\n", "    }\n", "\n", "    /**\n", "     * Sets the <code>NeedAppearances</code> boolean property on the AcroForm.\n", "     * NeedAppearances has been deprecated in PDF 2.0.\n", "     * <br>\n", "     * <blockquote>\n", "     * NeedAppearances is a flag specifying whether to construct appearance\n", "     * streams and appearance dictionaries for all widget annotations in the\n", "     * document.\n", "     * (ISO 32000-1, section 12.7.2 \"Interactive Form Dictionary\")\n", "     * </blockquote>\n", "     *\n", "     * @param needAppearances a boolean. Default value is <code>false</code>\n", "     * @return current AcroForm.\n", "     */\n", "    public PdfAcroForm setNeedAppearances(boolean needAppearances) {\n", "        if (VersionConforming.validatePdfVersionForDeprecatedFeatureLogError(document, PdfVersion.PDF_2_0, VersionConforming.DEPRECATED_NEED_APPEARANCES_IN_ACROFORM)) {\n", "            getPdfObject().remove(PdfName.NeedAppearances);\n", "            setModified();\n", "        } else {\n", "            put(PdfName.NeedAppearances, PdfBoolean.valueOf(needAppearances));\n", "        }\n", "        return this;\n", "    }\n", "\n", "    /**\n", "     * Gets the <code>NeedAppearances</code> boolean property on the AcroForm.\n", "     * NeedAppearances has been deprecated in PDF 2.0.\n", "     * <br>\n", "     * <blockquote>\n", "     * NeedAppearances is a flag specifying whether to construct appearance\n", "     * streams and appearance dictionaries for all widget annotations in the\n", "     * document.\n", "     * (ISO 32000-1, section 12.7.2 \"Interactive Form Dictionary\")\n", "     * </blockquote>\n", "     *\n", "     * @return the <code>NeedAppearances</code> property as a {@link PdfBoolean}. Default value is <code>false</code>\n", "     */\n", "    public PdfBoolean getNeedAppearances() {\n", "        return getPdfObject().getAsBoolean(PdfName.NeedAppearances);\n", "    }\n", "\n", "    /**\n", "     * Sets the <code>SigFlags</code> integer property on the AcroForm.\n", "     * <br>\n", "     * <blockquote>\n", "     * SigFlags is a set of flags specifying various document-level\n", "     * characteristics related to signature fields.\n", "     * (ISO 32000-1, section 12.7.2 \"Interactive Form Dictionary\")\n", "     * </blockquote>\n", "     *\n", "     * @param sigFlags an integer. Use {@link #SIGNATURE_EXIST} and/or {@link #APPEND_ONLY}.\n", "     *                 Use bitwise OR operator to combine these values. Default value is <code>0</code>\n", "     * @return current AcroForm.\n", "     */\n", "    public PdfAcroForm setSignatureFlags(int sigFlags) {\n", "        return put(PdfName.SigFlags, new PdfNumber(sigFlags));\n", "    }\n", "\n", "    /**\n", "     * Changes the <code>SigFlags</code> integer property on the AcroForm.\n", "     * This method allows only to add flags, not to remove them.\n", "     * <br>\n", "     * <blockquote>\n", "     * SigFlags is a set of flags specifying various document-level\n", "     * characteristics related to signature fields.\n", "     * (ISO 32000-1, section 12.7.2 \"Interactive Form Dictionary\")\n", "     * </blockquote>\n", "     *\n", "     * @param sigFlag an integer. Use {@link #SIGNATURE_EXIST} and/or {@link #APPEND_ONLY}.\n", "     *                Use bitwise OR operator to combine these values. Default is <code>0</code>\n", "     * @return current AcroForm.\n", "     */\n", "    public PdfAcroForm setSignatureFlag(int sigFlag) {\n", "        int flags = getSignatureFlags();\n", "        flags = flags | sigFlag;\n", "\n", "        return setSignatureFlags(flags);\n", "    }\n", "\n", "    /**\n", "     * Gets the <code>SigFlags</code> integer property on the AcroForm.\n", "     * <br>\n", "     * <blockquote>\n", "     * SigFlags is a set of flags specifying various document-level\n", "     * characteristics related to signature fields\n", "     * (ISO 32000-1, section 12.7.2 \"Interactive Form Dictionary\")\n", "     * </blockquote>\n", "     *\n", "     * @return current value for <code>SigFlags</code>.\n", "     */\n", "    public int getSignatureFlags() {\n", "        PdfNumber f = getPdfObject().getAsNumber(PdfName.SigFlags);\n", "        if (f == null) {\n", "            return 0;\n", "        } else {\n", "            return f.intValue();\n", "        }\n", "    }\n", "\n", "    /**\n", "     * Sets the <code>CO</code> array property on the AcroForm.\n", "     * <br>\n", "     * <blockquote>\n", "     * <code>CO</code>, Calculation Order, is an array of indirect references to\n", "     * field dictionaries with calculation actions, defining the calculation\n", "     * order in which their values will be recalculated when the value of any\n", "     * field changes\n", "     * (ISO 32000-1, section 12.7.2 \"Interactive Form Dictionary\")\n", "     * </blockquote>\n", "     *\n", "     * @param calculationOrder an array of indirect references\n", "     * @return current AcroForm\n", "     */\n", "    public PdfAcroForm setCalculationOrder(PdfArray calculationOrder) {\n", "        return put(PdfName.CO, calculationOrder);\n", "    }\n", "\n", "    /**\n", "     * Gets the <code>CO</code> array property on the AcroForm.\n", "     * <br>\n", "     * <blockquote>\n", "     * <code>CO</code>, Calculation Order, is an array of indirect references to\n", "     * field dictionaries with calculation actions, defining the calculation\n", "     * order in which their values will be recalculated when the value of any\n", "     * field changes\n", "     * (ISO 32000-1, section 12.7.2 \"Interactive Form Dictionary\")\n", "     * </blockquote>\n", "     *\n", "     * @return an array of indirect references\n", "     */\n", "    public PdfArray getCalculationOrder() {\n", "        return getPdfObject().getAsArray(PdfName.CO);\n", "    }\n", "\n", "    /**\n", "     * Sets the <code>DR</code> dictionary property on the AcroForm.\n", "     * <br>\n", "     * <blockquote>\n", "     * <code>DR</code> is a resource dictionary containing default resources\n", "     * (such as fonts, patterns, or colour spaces) that shall be used by form\n", "     * field appearance streams. At a minimum, this dictionary shall contain a\n", "     * Font entry specifying the resource name and font dictionary of the\n", "     * default font for displaying text.\n", "     * (ISO 32000-1, section 12.7.2 \"Interactive Form Dictionary\")\n", "     * </blockquote>\n", "     *\n", "     * @param defaultResources a resource dictionary\n", "     * @return current AcroForm\n", "     */\n", "    public PdfAcroForm setDefaultResources(PdfDictionary defaultResources) {\n", "        return put(PdfName.DR, defaultResources);\n", "    }\n", "\n", "    /**\n", "     * Gets the <code>DR</code> dictionary property on the AcroForm.\n", "     * <br>\n", "     * <blockquote>\n", "     * <code>DR</code> is a resource dictionary containing default resources\n", "     * (such as fonts, patterns, or colour spaces) that shall be used by form\n", "     * field appearance streams. At a minimum, this dictionary shall contain a\n", "     * Font entry specifying the resource name and font dictionary of the\n", "     * default font for displaying text.\n", "     * (ISO 32000-1, section 12.7.2 \"Interactive Form Dictionary\")\n", "     * </blockquote>\n", "     *\n", "     * @return a resource dictionary\n", "     */\n", "    public PdfDictionary getDefaultResources() {\n", "        return getPdfObject().getAsDictionary(PdfName.DR);\n", "    }\n", "\n", "    /**\n", "     * Sets the <code>DA</code> String property on the AcroForm.\n", "     * <br>\n", "     * This method sets a default (fallback value) for the <code>DA</code>\n", "     * attribute of variable text {@link PdfFormField form field}s.\n", "     *\n", "     * @param appearance a String containing a sequence of valid PDF syntax\n", "     * @return current AcroForm\n", "     */\n", "    public PdfAcroForm setDefaultAppearance(String appearance) {\n", "        return put(PdfName.DA, new PdfString(appearance));\n", "    }\n", "\n", "    /**\n", "     * Gets the <code>DA</code> String property on the AcroForm.\n", "     * <br>\n", "     * This method returns the default (fallback value) for the <code>DA</code>\n", "     * attribute of variable text {@link PdfFormField form field}s.\n", "     *\n", "     * @return the form-wide default appearance, as a <code>String</code>\n", "     */\n", "    public PdfString getDefaultAppearance() {\n", "        return getPdfObject().getAsString(PdfName.DA);\n", "    }\n", "\n", "    /**\n", "     * Sets the <code>Q</code> integer property on the AcroForm.\n", "     * <br>\n", "     * This method sets a default (fallback value) for the <code>Q</code>\n", "     * attribute of variable text {@link PdfFormField form field}s.\n", "     *\n", "     * @param justification an integer representing a justification value\n", "     * @return current AcroForm\n", "     * @see PdfFormField#setJustification(com.itextpdf.layout.properties.TextAlignment)\n", "     */\n", "    public PdfAcroForm setDefaultJustification(int justification) {\n", "        return put(PdfName.Q, new PdfNumber(justification));\n", "    }\n", "\n", "    /**\n", "     * Gets the <code>Q</code> integer property on the AcroForm.\n", "     * <br>\n", "     * This method gets the default (fallback value) for the <code>Q</code>\n", "     * attribute of variable text {@link PdfFormField form field}s.\n", "     *\n", "     * @return an integer representing a justification value\n", "     * @see PdfFormField#getJustification()\n", "     */\n", "    public PdfNumber getDefaultJustification() {\n", "        return getPdfObject().getAsNumber(PdfName.Q);\n", "    }\n", "\n", "    /**\n", "     * Sets the <code>XFA</code> property on the AcroForm.\n", "     * <br>\n", "     * <code>XFA</code> can either be a {@link PdfStream} or a {@link PdfArray}.\n", "     * Its contents must be valid XFA.\n", "     *\n", "     * @param xfaResource a stream containing the XDP\n", "     * @return current AcroForm\n", "     */\n", "    public PdfAcroForm setXFAResource(PdfStream xfaResource) {\n", "        return put(PdfName.XFA, xfaResource);\n", "    }\n", "\n", "    /**\n", "     * Sets the <code>XFA</code> property on the AcroForm.\n", "     * <br>\n", "     * <code>XFA</code> can either be a {@link PdfStream} or a {@link PdfArray}.\n", "     * Its contents must be valid XFA.\n", "     *\n", "     * @param xfaResource an array of text string and stream pairs representing\n", "     *                    the individual packets comprising the XML Data Package. (ISO 32000-1,\n", "     *                    section 12.7.2 \"Interactive Form Dictionary\")\n", "     * @return current AcroForm\n", "     */\n", "    public PdfAcroForm setXFAResource(PdfArray xfaResource) {\n", "        return put(PdfName.XFA, xfaResource);\n", "    }\n", "\n", "    /**\n", "     * Gets the <code>XFA</code> property on the AcroForm.\n", "     *\n", "     * @return an object representing the entire XDP. It can either be a\n", "     * {@link PdfStream} or a {@link PdfArray}.\n", "     */\n", "    public PdfObject getXFAResource() {\n", "        return getPdfObject().get(PdfName.XFA);\n", "    }\n", "\n", "    /**\n", "     * Gets a {@link PdfFormField form field} by its name.\n", "     *\n", "     * @param fieldName the name of the {@link PdfFormField form field} to retrieve\n", "     * @return the {@link PdfFormField form field}, or <code>null</code> if it\n", "     * isn't present\n", "     */\n", "    public PdfFormField getField(String fieldName) {\n", "        if (fields.get(fieldName) != null) {\n", "            return fields.get(fieldName);\n", "        }\n", "        final String[] splitFieldsArray = StringSplitUtil.splitKeepTrailingWhiteSpace(fieldName, '.');\n", "        if (splitFieldsArray.length == 0) {\n", "            return null;\n", "        }\n", "        PdfFormField parentFormField = fields.get(splitFieldsArray[0]);\n", "        PdfFormField kidField = parentFormField;\n", "        for (int i = 1; i < splitFieldsArray.length; i++) {\n", "            if (parentFormField == null || parentFormField.isFlushed()) {\n", "                return null;\n", "            }\n", "            kidField = parentFormField.getChildField(splitFieldsArray[i]);\n", "            parentFormField = kidField;\n", "        }\n", "        return kidField;\n", "    }\n", "\n", "    /**\n", "     * Gets the attribute generateAppearance, which tells {@link #flattenFields()}\n", "     * to generate an appearance Stream for all {@link PdfFormField form field}s\n", "     * that don't have one.\n", "     *\n", "     * @return bolean value indicating if the appearances need to be generated\n", "     */\n", "    public boolean isGenerateAppearance() {\n", "        return generateAppearance;\n", "    }\n", "\n", "    /**\n", "     * Sets the attribute generateAppearance, which tells {@link #flattenFields()}\n", "     * to generate an appearance Stream for all {@link PdfFormField form field}s\n", "     * that don't have one.\n", "     * <p>\n", "     * Not generating appearances will speed up form flattening but the results\n", "     * can be unexpected in Acrobat. Don't use it unless your environment is\n", "     * well controlled. The default is <CODE>true</CODE>.\n", "     * <p>\n", "     * If generateAppearance is set to <code>true</code>, then\n", "     * <code>NeedAppearances</code> is set to <code>false</code>. This does not\n", "     * apply vice versa.\n", "     * <p>\n", "     * Note, this method does not change default behaviour of {@link PdfFormField#setValue(String)} method.\n", "     *\n", "     * @param generateAppearance a boolean\n", "     */\n", "    public void setGenerateAppearance(boolean generateAppearance) {\n", "        if (generateAppearance) {\n", "            getPdfObject().remove(PdfName.NeedAppearances);\n", "            setModified();\n", "        }\n", "        this.generateAppearance = generateAppearance;\n", "    }\n", "    /**\n", "     * Flattens interactive {@link PdfFormField form field}s in the document. If\n", "     * no fields have been explicitly included via {@link #partialFormFlattening},\n", "     * then all fields are flattened. Otherwise only the included fields are\n", "     * flattened.\n", "     */\n", "    public void flattenFields() {\n", "        if (document.isAppendMode()) {\n", "            throw new PdfException(FormsExceptionMessageConstant.FIELD_FLATTENING_IS_NOT_SUPPORTED_IN_APPEND_MODE);\n", "        }\n", "        Set<PdfFormField> fields;\n", "        if (fieldsForFlattening.isEmpty()) {\n", "            this.fields.clear();\n", "            fields = getAllFormFieldsWithoutNames();\n", "        } else {\n", "            fields = new LinkedHashSet<>();\n", "            for (PdfFormField field : fieldsForFlattening) {\n", "                fields.addAll(prepareFieldsForFlattening(field));\n", "            }\n", "        }\n", "\n", "        // In case of appearance resources and page resources are the same object, it would not be possible to add\n", "        // the xObject to the page resources. So in that case we would copy page resources and use the copy for\n", "        // xObject, so that circular reference is avoided.\n", "        // We copy beforehand firstly not to produce a copy every time, and secondly not to copy all the\n", "        // xObjects that have already been added to the page resources.\n", "        Map<Integer, PdfObject> initialPageResourceClones = new LinkedHashMap<>();\n", "        for (int i = 1; i <= document.getNumberOfPages(); i++) {\n", "            PdfObject resources = document.getPage(i).getPdfObject().getAsDictionary(PdfName.Resources);\n", "            initialPageResourceClones.put(i, resources == null ? null : resources.clone());\n", "        }\n", "\n", "        Set<PdfPage> wrappedPages = new LinkedHashSet<>();\n", "        PdfPage page;\n", "        for (PdfFormField formField : fields) {\n", "            for (PdfFormAnnotation fieldAnnot: formField.getChildFormAnnotations()) {\n", "                final PdfDictionary fieldObject = fieldAnnot.getPdfObject();\n", "                page = getFieldPage(fieldObject);\n", "                if (page == null) {\n", "                    continue;\n", "                }\n", "\n", "                final PdfAnnotation annotation = PdfAnnotation.makeAnnotation(fieldObject);\n", "                TagTreePointer tagPointer = null;\n", "                if (annotation != null && document.isTagged()) {\n", "                    tagPointer = document.getTagStructureContext().removeAnnotationTag(annotation);\n", "                }\n", "\n", "                PdfDictionary appDic = fieldObject.getAsDictionary(PdfName.AP);\n", "                PdfObject asNormal = null;\n", "                if (appDic != null) {\n", "                    asNormal = appDic.getAsStream(PdfName.N);\n", "                    if (asNormal == null) {\n", "                        asNormal = appDic.getAsDictionary(PdfName.N);\n", "                    }\n", "                }\n", "                if (generateAppearance) {\n", "                    if (appDic == null || asNormal == null) {\n", "                        fieldAnnot.regenerateField();\n", "                        appDic = fieldObject.getAsDictionary(PdfName.AP);\n", "                    }\n", "                }\n", "                PdfObject normal = appDic != null ? appDic.get(PdfName.N) : null;\n", "                if (null != normal) {\n", "                    PdfFormXObject xObject = null;\n", "                    if (normal.isStream()) {\n", "                        xObject = new PdfFormXObject((PdfStream) normal);\n", "                    } else if (normal.isDictionary()) {\n", "                        PdfName as = fieldObject.getAsName(PdfName.AS);\n", "                        if (((PdfDictionary) normal).getAsStream(as) != null) {\n", "                            xObject = new PdfFormXObject(((PdfDictionary) normal).getAsStream(as));\n", "                            xObject.makeIndirect(document);\n", "                        }\n", "                    }\n", "\n", "                    if (xObject != null) {\n", "                        //subtype is required field for FormXObject, but can be omitted in normal appearance.\n", "                        xObject.put(PdfName.Subtype, PdfName.Form);\n", "                        Rectangle annotBBox = fieldObject.getAsRectangle(PdfName.Rect);\n", "                        if (page.isFlushed()) {\n", "                            throw new PdfException(\n", "                                    FormsExceptionMessageConstant.PAGE_ALREADY_FLUSHED_USE_ADD_FIELD_APPEARANCE_TO_PAGE_METHOD_BEFORE_PAGE_FLUSHING);\n", "                        }\n", "                        PdfCanvas canvas = new PdfCanvas(page, !wrappedPages.contains(page));\n", "                        wrappedPages.add(page);\n", "\n", "                        // Here we avoid circular reference which might occur when page resources and the appearance xObject's\n", "                        // resources are the same object\n", "                        PdfObject xObjectResources = xObject.getPdfObject().get(PdfName.Resources);\n", "                        PdfObject pageResources = page.getResources().getPdfObject();\n", "                        if (xObjectResources != null && xObjectResources == pageResources) {\n", "                            xObject.getPdfObject().put(PdfName.Resources,\n", "                                    initialPageResourceClones.get(document.getPageNumber(page)));\n", "                        }\n", "\n", "                        if (tagPointer != null) {\n", "                            tagPointer.setPageForTagging(page);\n", "                            TagReference tagRef = tagPointer.getTagReference();\n", "                            canvas.openTag(tagRef);\n", "                        }\n", "\n", "                        AffineTransform at = calcFieldAppTransformToAnnotRect(xObject, annotBBox);\n", "                        float[] m = new float[6];\n", "                        at.getMatrix(m);\n", "                        canvas.addXObjectWithTransformationMatrix(xObject, m[0], m[1], m[2], m[3], m[4], m[5]);\n", "\n", "                        if (tagPointer != null) {\n", "                            canvas.closeTag();\n", "                        }\n", "                    }\n", "                } else {\n", "                    LOGGER.warn(FormsLogMessageConstants.N_ENTRY_IS_REQUIRED_FOR_APPEARANCE_DICTIONARY);\n", "                }\n", "\n", "                PdfArray fFields = getFields();\n", "                if (annotation != null) {\n", "                    page.removeAnnotation(annotation);\n", "                }\n", "                removeFieldFromParentAndAcroForm(fFields, fieldObject);\n", "            }\n", "        }\n", "\n", "        getPdfObject().remove(PdfName.NeedAppearances);\n", "        if (fieldsForFlattening.size() == 0) {\n", "            getFields().clear();\n", "        }\n", "        if (getFields().isEmpty()) {\n", "            document.getCatalog().remove(PdfName.AcroForm);\n", "        }\n", "    }\n", "\n", "    /**\n", "     * Tries to remove the {@link PdfFormField form field} with the specified\n", "     * name from the document.\n", "     *\n", "     * @param fieldName the name of the {@link PdfFormField form field} to remove\n", "     * @return a boolean representing whether or not the removal succeeded.\n", "     */\n", "    public boolean removeField(String fieldName) {\n", "        PdfFormField field = getField(fieldName);\n", "        if (field == null) {\n", "            return false;\n", "        }\n", "\n", "        PdfDictionary fieldObject = field.getPdfObject();\n", "        PdfPage page = getFieldPage(fieldObject);\n", "\n", "        PdfAnnotation annotation = PdfAnnotation.makeAnnotation(fieldObject);\n", "        if (page != null && annotation != null) {\n", "            page.removeAnnotation(annotation);\n", "        }\n", "\n", "        PdfDictionary parent = field.getParent();\n", "        PdfFormField parentField = field.getParentField();\n", "        if (parent != null) {\n", "            PdfArray kids = parent.getAsArray(PdfName.Kids);\n", "            if (parentField != null) {\n", "                parentField.removeChild(field);\n", "            }\n", "            kids.remove(fieldObject);\n", "            kids.setModified();\n", "            parent.setModified();\n", "            return true;\n", "        }\n", "\n", "        PdfArray fieldsPdfArray = getFields();\n", "        if (fieldsPdfArray.contains(fieldObject)) {\n", "            fieldsPdfArray.remove(fieldObject);\n", "            this.fields.remove(fieldName);\n", "            fieldsPdfArray.setModified();\n", "            setModified();\n", "            return true;\n", "        }\n", "        return false;\n", "    }\n", "\n", "    /**\n", "     * Adds a {@link PdfFormField form field}, identified by name, to the list of fields to be flattened.\n", "     * Does not perform a flattening operation in itself.\n", "     *\n", "     * @param fieldName the name of the {@link PdfFormField form field} to be flattened\n", "     */\n", "    public void partialFormFlattening(String fieldName) {\n", "        PdfFormField field = getAllFormFields().get(fieldName);\n", "        if (field != null) {\n", "            fieldsForFlattening.add(field);\n", "        }\n", "    }\n", "\n", "    /**\n", "     * Changes the identifier of a {@link PdfFormField form field}.\n", "     *\n", "     * @param oldName the current name of the field\n", "     * @param newName the new name of the field. Must not be used currently.\n", "     */\n", "    public void renameField(String oldName, String newName) {\n", "        final PdfFormField oldField = getField(oldName);\n", "        if (oldField == null) {\n", "            LOGGER.warn(MessageFormatUtil.format(\n", "                    FormsLogMessageConstants.FIELDNAME_NOT_FOUND_OPERATION_CAN_NOT_BE_COMPLETED, oldName));\n", "            return;\n", "        }\n", "        getField(oldName).setFieldName(newName);\n", "        PdfFormField field = fields.get(oldName);\n", "        if (field != null) {\n", "            fields.remove(oldName);\n", "            fields.put(newName, field);\n", "        }\n", "    }\n", "\n", "    /**\n", "     * Creates an in-memory copy of a {@link PdfFormField}. This new field is\n", "     * not added to the document.\n", "     *\n", "     * @param name the name of the {@link PdfFormField form field} to be copied\n", "     * @return a clone of the original {@link PdfFormField}\n", "     */\n", "    public PdfFormField copyField(String name) {\n", "        PdfFormField oldField = getField(name);\n", "        if (oldField != null) {\n", "            return PdfFormCreator.createFormField(\n", "                    (PdfDictionary) oldField.getPdfObject().clone().makeIndirect(document));\n", "        }\n", "        return null;\n", "    }\n", "\n", "    /**\n", "     * Replaces the {@link PdfFormField} of a certain name with another\n", "     * {@link PdfFormField}.\n", "     *\n", "     * @param name  the name of the {@link PdfFormField form field} to be replaced\n", "     * @param field the new {@link PdfFormField}\n", "     */\n", "    public void replaceField(String name, PdfFormField field) {\n", "        if (name == null) {\n", "            LOGGER.warn(FormsLogMessageConstants.PROVIDE_FORMFIELD_NAME);\n", "            return;\n", "        }\n", "        removeField(name);\n", "        final int lastDotIndex = name.lastIndexOf('.');\n", "        if (lastDotIndex == -1) {\n", "            addField(field);\n", "            return;\n", "        }\n", "        final String parentName = name.substring(0, lastDotIndex);\n", "        final PdfFormField parent = getField(parentName);\n", "        if (parent == null) {\n", "            addField(field);\n", "        } else {\n", "            parent.addKid(field);\n", "        }\n", "    }\n", "\n", "    /**\n", "     * Disables appearance stream regeneration for all the root fields in the Acroform, so all of its children\n", "     * in the hierarchy will also not be regenerated.\n", "     */\n", "    public void disableRegenerationForAllFields() {\n", "        for (PdfFormField rootField : getRootFormFields().values()) {\n", "            rootField.disableFieldRegeneration();\n", "        }\n", "    }\n", "\n", "    /**\n", "     * Enables appearance stream regeneration for all the fields in the Acroform and regenerates them.\n", "     */\n", "    public void enableRegenerationForAllFields() {\n", "        for (PdfFormField rootField : getRootFormFields().values()) {\n", "            rootField.enableFieldRegeneration();\n", "        }\n", "    }\n", "\n", "    /**\n", "     * Gets all AcroForm fields in the document.\n", "     *\n", "     * @return a {@link PdfArray} of field dictionaries\n", "     */\n", "    protected PdfArray getFields() {\n", "        PdfArray fields = getPdfObject().getAsArray(PdfName.Fields);\n", "        if (fields == null) {\n", "            LOGGER.warn(FormsLogMessageConstants.NO_FIELDS_IN_ACROFORM);\n", "            fields = new PdfArray();\n", "            getPdfObject().put(PdfName.Fields, fields);\n", "        }\n", "        return fields;\n", "    }\n", "\n", "    @Override\n", "    protected boolean isWrappedObjectMustBeIndirect() {\n", "        return false;\n", "    }\n", "\n", "    private Map<String, PdfFormField> populateFormFieldsMap() {\n", "        final PdfArray rawFields = getFields();\n", "        Map<String, PdfFormField> fields = new LinkedHashMap<>();\n", "        final PdfArray shouldBeRemoved = new PdfArray();\n", "        for (PdfObject field : rawFields) {\n", "            if (field.isFlushed()) {\n", "                LOGGER.info(FormsLogMessageConstants.FORM_FIELD_WAS_FLUSHED);\n", "                continue;\n", "            }\n", "\n", "            PdfFormField formField = PdfFormField.makeFormField(field, document);\n", "            if (formField == null) {\n", "                // Pure annotation can't be in AcroForm dictionary\n", "                // Ok, let's just skip them, they were (will be) processed with their parents if any\n", "                LOGGER.warn(FormsLogMessageConstants.ANNOTATION_IN_ACROFORM_DICTIONARY);\n", "                continue;\n", "            }\n", "            PdfFormFieldMergeUtil.mergeKidsWithSameNames(formField, false);\n", "\n", "            PdfString fieldName = formField.getFieldName();\n", "            if (fieldName != null) {\n", "                String name = formField.getFieldName().toUnicodeString();\n", "\n", "                if (formField.isInReadingMode() || !fields.containsKey(name) ||\n", "                        !PdfFormFieldMergeUtil.mergeTwoFieldsWithTheSameNames(fields.get(name), formField, true)) {\n", "                    fields.put(formField.getFieldName().toUnicodeString(), formField);\n", "                } else {\n", "                    shouldBeRemoved.add(field);\n", "                }\n", "            }\n", "        }\n", "        for (PdfObject field : shouldBeRemoved) {\n", "            rawFields.remove(field);\n", "        }\n", "\n", "        return fields;\n", "    }\n", "\n", "    private void removeFieldFromParentAndAcroForm(PdfArray formFields, PdfDictionary fieldObject) {\n", "        formFields.remove(fieldObject);\n", "        PdfDictionary parent = fieldObject.getAsDictionary(PdfName.Parent);\n", "        if (parent != null) {\n", "            PdfArray kids = parent.getAsArray(PdfName.Kids);\n", "            if (kids == null) {\n", "                formFields.remove(parent);\n", "            } else {\n", "                kids.remove(fieldObject);\n", "                if (kids.isEmpty()) {\n", "                    removeFieldFromParentAndAcroForm(formFields, parent);\n", "                }\n", "            }\n", "        }\n", "    }\n", "\n", "    private void processKids(PdfFormField field, PdfPage page) {\n", "        PdfArray kids = field.getKids();\n", "        if (kids == null) {\n", "            return;\n", "        }\n", "\n", "        if (kids.size() == 1) {\n", "            PdfDictionary kidDict = (PdfDictionary) kids.get(0);\n", "            PdfName type = kidDict.getAsName(PdfName.Subtype);\n", "            if (PdfName.Widget.equals(type)) {\n", "                if (PdfFormAnnotationUtil.isPureWidget(kidDict)) {\n", "                    // kid is not merged field with widget\n", "                    PdfFormAnnotationUtil.mergeWidgetWithParentField(field);\n", "                    defineWidgetPageAndAddToIt(page, field.getPdfObject(), true);\n", "                } else {\n", "                    defineWidgetPageAndAddToIt(page, kidDict, true);\n", "                }\n", "                return;\n", "            }\n", "        }\n", "        for (AbstractPdfFormField child : field.getChildFields()) {\n", "            if (PdfFormAnnotationUtil.isPureWidgetOrMergedField(child.getPdfObject())) {\n", "                defineWidgetPageAndAddToIt(page, child.getPdfObject(), true);\n", "            } else if (child instanceof PdfFormField) {\n", "                processKids((PdfFormField)child, page);\n", "            }\n", "        }\n", "    }\n", "\n", "    private void defineWidgetPageAndAddToIt(PdfPage currentPage, PdfDictionary mergedFieldAndWidget, boolean warnIfPageFlushed) {\n", "        PdfAnnotation annot = PdfAnnotation.makeAnnotation(mergedFieldAndWidget);\n", "        PdfPage page = getFieldPage(mergedFieldAndWidget);\n", "        if (page != null) {\n", "            PdfFormAnnotationUtil.addWidgetAnnotationToPage(page, annot);\n", "            return;\n", "        }\n", "        PdfDictionary pageDic = annot.getPageObject();\n", "        if (pageDic == null) {\n", "            PdfFormAnnotationUtil.addWidgetAnnotationToPage(currentPage, annot);\n", "        } else {\n", "            if (warnIfPageFlushed && pageDic.isFlushed()) {\n", "                throw new PdfException(\n", "                        FormsExceptionMessageConstant.PAGE_ALREADY_FLUSHED_USE_ADD_FIELD_APPEARANCE_TO_PAGE_METHOD_BEFORE_PAGE_FLUSHING);\n", "            }\n", "            PdfDocument doc = pageDic.getIndirectReference().getDocument();\n", "            PdfPage widgetPage = doc.getPage(pageDic);\n", "            PdfFormAnnotationUtil.addWidgetAnnotationToPage(widgetPage == null ? currentPage : widgetPage, annot);\n", "        }\n", "    }\n", "\n", "    /**\n", "     * Determines whether the AcroForm contains XFA data.\n", "     *\n", "     * @return a boolean\n", "     */\n", "    public boolean hasXfaForm() {\n", "        return xfaForm != null && xfaForm.isXfaPresent();\n", "    }\n", "\n", "    /**\n", "     * Gets the {@link XfaForm} atribute.\n", "     *\n", "     * @return the XFA form object\n", "     */\n", "    public XfaForm getXfaForm() {\n", "        return xfaForm;\n", "    }\n", "\n", "    /**\n", "     * Removes the XFA stream from the document.\n", "     */\n", "    public void removeXfaForm() {\n", "        if (hasXfaForm()) {\n", "            PdfDictionary root = document.getCatalog().getPdfObject();\n", "            PdfDictionary acroform = root.getAsDictionary(PdfName.AcroForm);\n", "            acroform.remove(PdfName.XFA);\n", "            xfaForm = null;\n", "        }\n", "    }\n", "\n", "    /**\n", "     * Put a key/value pair in the dictionary and overwrite previous value if it already exists.\n", "     *\n", "     * @param key   the key as pdf name\n", "     * @param value the value as pdf object\n", "     *\n", "     * @return this {@link PdfAcroForm} instance\n", "     */\n", "    public PdfAcroForm put(PdfName key, PdfObject value) {\n", "        getPdfObject().put(key, value);\n", "        setModified();\n", "        return this;\n", "    }\n", "\n", "    /**\n", "     * Releases underlying pdf object and other pdf entities used by wrapper.\n", "     * This method should be called instead of direct call to {@link PdfObject#release()} if the wrapper is used.\n", "     */\n", "    public void release() {\n", "        unsetForbidRelease();\n", "        getPdfObject().release();\n", "        if (fields != null) {\n", "            for (PdfFormField field : fields.values()) {\n", "                field.release();\n", "            }\n", "            fields.clear();\n", "            fields = null;\n", "        }\n", "    }\n", "\n", "    @Override\n", "    public PdfObjectWrapper<PdfDictionary> setModified() {\n", "        if (getPdfObject().getIndirectReference() != null) {\n", "            super.setModified();\n", "        } else {\n", "            document.getCatalog().setModified();\n", "        }\n", "        return this;\n", "    }\n", "\n", "    private static PdfDictionary createAcroFormDictionaryByFields(PdfArray fields) {\n", "        PdfDictionary dictionary = new PdfDictionary();\n", "        dictionary.put(PdfName.Fields, fields);\n", "        return dictionary;\n", "    }\n", "\n", "    private PdfPage getFieldPage(PdfDictionary annotDict) {\n", "        PdfDictionary pageDic = annotDict.getAsDictionary(PdfName.P);\n", "        if (pageDic != null) {\n", "            return document.getPage(pageDic);\n", "        }\n", "        for (int i = 1; i <= document.getNumberOfPages(); i++) {\n", "            PdfPage page = document.getPage(i);\n", "            if (!page.isFlushed()) {\n", "                PdfAnnotation annotation = PdfAnnotation.makeAnnotation(annotDict);\n", "                if (annotation != null && page.containsAnnotation(annotation)) {\n", "                    return page;\n", "                }\n", "            }\n", "        }\n", "        return null;\n", "    }\n", "\n", "    private Set<PdfFormField> prepareFieldsForFlattening(PdfFormField field) {\n", "        Set<PdfFormField> preparedFields = new LinkedHashSet<>();\n", "        preparedFields.add(field);\n", "        for (PdfFormField child : field.getChildFormFields()) {\n", "            preparedFields.addAll(prepareFieldsForFlattening(child));\n", "        }\n", "\n", "        return preparedFields;\n", "    }\n", "\n", "    private AffineTransform calcFieldAppTransformToAnnotRect(PdfFormXObject xObject, Rectangle annotBBox) {\n", "        PdfArray bBox = xObject.getBBox();\n", "        if (bBox.size() != 4) {\n", "            bBox = new PdfArray(new Rectangle(0, 0));\n", "            xObject.setBBox(bBox);\n", "        }\n", "        float[] xObjBBox = bBox.toFloatArray();\n", "\n", "        PdfArray xObjMatrix = xObject.getPdfObject().getAsArray(PdfName.Matrix);\n", "        Rectangle transformedRect;\n", "        if (xObjMatrix != null && xObjMatrix.size() == 6) {\n", "            Point[] xObjRectPoints = new Point[]{\n", "                    new Point(xObjBBox[0], xObjBBox[1]),\n", "                    new Point(xObjBBox[0], xObjBBox[3]),\n", "                    new Point(xObjBBox[2], xObjBBox[1]),\n", "                    new Point(xObjBBox[2], xObjBBox[3])\n", "            };\n", "            Point[] transformedAppBoxPoints = new Point[xObjRectPoints.length];\n", "            new AffineTransform(xObjMatrix.toDoubleArray()).transform(xObjRectPoints, 0, transformedAppBoxPoints, 0, xObjRectPoints.length);\n", "\n", "            float[] transformedRectArr = new float[] {\n", "                    Float.MAX_VALUE, Float.MAX_VALUE,\n", "                    -Float.MAX_VALUE, -Float.MAX_VALUE,\n", "            };\n", "            for (Point p : transformedAppBoxPoints) {\n", "                transformedRectArr[0] = (float) Math.min(transformedRectArr[0], p.x);\n", "                transformedRectArr[1] = (float) Math.min(transformedRectArr[1], p.y);\n", "                transformedRectArr[2] = (float) Math.max(transformedRectArr[2], p.x);\n", "                transformedRectArr[3] = (float) Math.max(transformedRectArr[3], p.y);\n", "            }\n", "\n", "            transformedRect = new Rectangle(transformedRectArr[0], transformedRectArr[1], transformedRectArr[2] - transformedRectArr[0], transformedRectArr[3] - transformedRectArr[1]);\n", "        } else {\n", "            transformedRect = new Rectangle(0, 0).setBbox(xObjBBox[0], xObjBBox[1], xObjBBox[2], xObjBBox[3]);\n", "        }\n", "\n", "        AffineTransform at = AffineTransform.getTranslateInstance(-transformedRect.getX(), -transformedRect.getY());\n", "        float scaleX = transformedRect.getWidth() == 0 ? 1 : annotBBox.getWidth() / transformedRect.getWidth();\n", "        float scaleY = transformedRect.getHeight() == 0 ? 1 : annotBBox.getHeight() / transformedRect.getHeight();\n", "        at.preConcatenate(AffineTransform.getScaleInstance(scaleX, scaleY));\n", "        at.preConcatenate(AffineTransform.getTranslateInstance(annotBBox.getX(), annotBBox.getY()));\n", "\n", "        return at;\n", "    }\n", "\n", "    private Set<PdfFormField> getAllFormFieldsWithoutNames() {\n", "        if (fields.isEmpty()) {\n", "            fields = populateFormFieldsMap();\n", "        }\n", "        Set<PdfFormField> allFields = new LinkedHashSet<>();\n", "        for (Entry<String, PdfFormField> field : fields.entrySet()) {\n", "            allFields.add(field.getValue());\n", "            List<PdfFormField> kids = field.getValue().getAllChildFormFields();\n", "            allFields.addAll(kids);\n", "        }\n", "        return allFields;\n", "    }\n", "\n", "    private boolean needToAddToAcroform(PdfFormField field, boolean throwExceptionOnError) {\n", "        final String fieldNameBeforeMergeCall = field.getFieldName().toUnicodeString();\n", "        if (!fields.containsKey(fieldNameBeforeMergeCall)) {\n", "            return true;\n", "        }\n", "        if (!PdfFormFieldMergeUtil.mergeTwoFieldsWithTheSameNames(fields.get(fieldNameBeforeMergeCall), field,\n", "                throwExceptionOnError)) {\n", "            return true;\n", "        }\n", "        final boolean isFieldNameChanged = !fieldNameBeforeMergeCall.equals(field.getFieldName().toUnicodeString());\n", "        return isFieldNameChanged;\n", "    }\n", "}\n"], "test_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.forms;\n", "\n", "import com.itextpdf.commons.utils.MessageFormatUtil;\n", "import com.itextpdf.forms.exceptions.FormsExceptionMessageConstant;\n", "import com.itextpdf.forms.fields.AbstractPdfFormField;\n", "import com.itextpdf.forms.fields.PdfFormAnnotation;\n", "import com.itextpdf.forms.fields.PdfFormCreator;\n", "import com.itextpdf.forms.fields.PdfFormField;\n", "import com.itextpdf.forms.fields.PdfTextFormField;\n", "import com.itextpdf.forms.fields.TextFormFieldBuilder;\n", "import com.itextpdf.forms.logs.FormsLogMessageConstants;\n", "import com.itextpdf.forms.fields.PdfFormAnnotationUtil;\n", "import com.itextpdf.io.source.ByteArrayOutputStream;\n", "import com.itextpdf.kernel.exceptions.PdfException;\n", "import com.itextpdf.kernel.geom.Rectangle;\n", "import com.itextpdf.kernel.pdf.PdfArray;\n", "import com.itextpdf.kernel.pdf.PdfBoolean;\n", "import com.itextpdf.kernel.pdf.PdfDictionary;\n", "import com.itextpdf.kernel.pdf.PdfDocument;\n", "import com.itextpdf.kernel.pdf.PdfName;\n", "import com.itextpdf.kernel.pdf.PdfNumber;\n", "import com.itextpdf.kernel.pdf.PdfObject;\n", "import com.itextpdf.kernel.pdf.PdfPage;\n", "import com.itextpdf.kernel.pdf.PdfStream;\n", "import com.itextpdf.kernel.pdf.PdfString;\n", "import com.itextpdf.kernel.pdf.PdfVersion;\n", "import com.itextpdf.kernel.pdf.PdfWriter;\n", "import com.itextpdf.kernel.pdf.WriterProperties;\n", "import com.itextpdf.test.ExtendedITextTest;\n", "import com.itextpdf.test.annotations.LogMessage;\n", "import com.itextpdf.test.annotations.LogMessages;\n", "import com.itextpdf.test.annotations.type.UnitTest;\n", "import org.junit.Assert;\n", "import org.junit.Test;\n", "import org.junit.experimental.categories.Category;\n", "\n", "import java.util.List;\n", "\n", "@Category(UnitTest.class)\n", "public class PdfAcroFormTest extends ExtendedITextTest {\n", "\n", "    @Test\n", "    public void setSignatureFlagsTest() {\n", "        try(PdfDocument outputDoc = createDocument()) {\n", "            PdfAcroForm acroForm = PdfFormCreator.getAcroForm(outputDoc, true);\n", "            acroForm.setSignatureFlags(65);\n", "\n", "            boolean isModified = acroForm.getPdfObject().isModified();\n", "            boolean isReleaseForbidden = acroForm.getPdfObject().isReleaseForbidden();\n", "            PdfObject sigFlags = acroForm.getPdfObject().get(PdfName.SigFlags);\n", "            outputDoc.close();\n", "\n", "            Assert.assertEquals(new PdfNumber(65), sigFlags);\n", "            Assert.assertTrue(isModified);\n", "            Assert.assertTrue(isReleaseForbidden);\n", "        }\n", "    }\n", "\n", "    @Test\n", "    public void addChildToFormFieldTest() {\n", "        try (PdfDocument outputDoc = createDocument()) {\n", "            PdfAcroForm acroForm = PdfFormCreator.getAcroForm(outputDoc, true);\n", "            PdfFormField field = new TextFormFieldBuilder(outputDoc, \"text1\")\n", "                    .setWidgetRectangle(new Rectangle(100, 700, 200, 20)).createText();\n", "            acroForm.addField(field);\n", "            PdfFormField root = new TextFormFieldBuilder(outputDoc, \"root\")\n", "                    .setWidgetRectangle(new Rectangle(100, 600, 200, 20)).createText();\n", "            PdfFormField child = new TextFormFieldBuilder(outputDoc, \"child\")\n", "                    .setWidgetRectangle(new Rectangle(100, 300, 200, 20)).createText();\n", "            root.addKid(child);\n", "            acroForm.addField(root);\n", "            Assert.assertEquals(2, acroForm.fields.size());\n", "            PdfArray fieldKids = root.getKids();\n", "            Assert.assertEquals(2, fieldKids.size());\n", "        }\n", "    }\n", "\n", "    @Test\n", "    public void addChildToWidgetTest() {\n", "        try (PdfDocument outputDoc = createDocument()) {\n", "            PdfAcroForm acroForm = PdfFormCreator.getAcroForm(outputDoc, true);\n", "            PdfArray options = new PdfArray();\n", "            options.add(new PdfString(\"1\"));\n", "            options.add(new PdfString(\"2\"));\n", "            PdfTextFormField text = new TextFormFieldBuilder(outputDoc, \"text\")\n", "                    .setWidgetRectangle(new Rectangle(36, 696, 20, 20)).createText();\n", "            PdfTextFormField childText = new TextFormFieldBuilder(outputDoc, \"childText\")\n", "                    .setWidgetRectangle(new Rectangle(36, 696, 20, 20)).createText();\n", "            text.addKid(childText);\n", "            acroForm.addField(text);\n", "            Assert.assertEquals(1, acroForm.fields.size());\n", "            List<AbstractPdfFormField> fieldKids = text.getChildFields();\n", "            Assert.assertEquals(2, fieldKids.size());\n", "        }\n", "    }\n", "\n", "    @Test\n", "    public void getFormFieldChildTest() {\n", "        try(PdfDocument outputDoc = createDocument()) {\n", "            PdfAcroForm acroForm = PdfFormCreator.getAcroForm(outputDoc, true);\n", "            PdfFormField field = new TextFormFieldBuilder(outputDoc, \"text1\")\n", "                    .setWidgetRectangle(new Rectangle(100, 700, 200, 20)).createText();\n", "            acroForm.addField(field);\n", "\n", "            PdfFormField root = new TextFormFieldBuilder(outputDoc, \"root\")\n", "                    .setWidgetRectangle(new Rectangle(100, 600, 200, 20)).createText();\n", "            PdfFormField child = new TextFormFieldBuilder(outputDoc, \"child\")\n", "                    .setWidgetRectangle(new Rectangle(100, 600, 200, 20)).createText();\n", "            root.addKid(child);\n", "            acroForm.addField(root);\n", "            PdfFormField childField = acroForm.getField(\"root.child\");\n", "            Assert.assertEquals(\"root.child\", childField.getFieldName().toString());\n", "        }\n", "    }\n", "\n", "    @Test\n", "    public void getFormFieldWithEqualChildNamesTest() {\n", "        try(PdfDocument outputDoc = createDocument()) {\n", "            PdfAcroForm acroForm = PdfFormCreator.getAcroForm(outputDoc, true);\n", "            PdfFormField field = new TextFormFieldBuilder(outputDoc, \"text1\")\n", "                    .setWidgetRectangle(new Rectangle(100, 700, 200, 20)).createText();\n", "            acroForm.addField(field);\n", "\n", "            PdfFormField root = new TextFormFieldBuilder(outputDoc, \"root\")\n", "                    .setWidgetRectangle(new Rectangle(100, 600, 200, 20)).createText();\n", "            PdfFormField child = new TextFormFieldBuilder(outputDoc, \"field\")\n", "                    .setWidgetRectangle(new Rectangle(100, 300, 200, 20)).createText();\n", "            PdfFormField child1 = new TextFormFieldBuilder(outputDoc, \"field\")\n", "                    .setWidgetRectangle(new Rectangle(100, 300, 200, 20)).createText();\n", "            PdfFormField child2 = new TextFormFieldBuilder(outputDoc, \"another_name\")\n", "                    .setWidgetRectangle(new Rectangle(100, 300, 200, 20)).createText();\n", "            child1.addKid(child2);\n", "            child.addKid(child1);\n", "            root.addKid(child);\n", "            acroForm.addField(root);\n", "            PdfFormField childField = acroForm.getField(\"root.field.field.another_name\");\n", "            Assert.assertEquals(\"root.field.field.another_name\", childField.getFieldName().toString());\n", "        }\n", "    }\n", "\n", "    @Test\n", "    public void changeFieldNameTest() {\n", "        try(PdfDocument outputDoc = createDocument()) {\n", "            PdfAcroForm acroForm = PdfFormCreator.getAcroForm(outputDoc, true);\n", "            PdfFormField field = new TextFormFieldBuilder(outputDoc, \"text1\")\n", "                    .setWidgetRectangle(new Rectangle(100, 700, 200, 20)).createText();\n", "            acroForm.addField(field);\n", "\n", "            PdfFormField root = new TextFormFieldBuilder(outputDoc, \"root\")\n", "                    .setWidgetRectangle(new Rectangle(100, 600, 200, 20)).createText();\n", "            PdfFormField child = new TextFormFieldBuilder(outputDoc, \"child\")\n", "                    .setWidgetRectangle(new Rectangle(100, 300, 200, 20)).createText();\n", "            root.addKid(child);\n", "            acroForm.addField(root);\n", "            acroForm.getField(\"root\").setFieldName(\"diff\");\n", "            PdfFormField childField = PdfFormCreator.getAcroForm(outputDoc, true).getField(\"diff.child\");\n", "            Assert.assertEquals(\"diff.child\", childField.getFieldName().toString());\n", "        }\n", "    }\n", "\n", "    @Test\n", "    public void removeChildFromFormFieldTest() {\n", "        try(PdfDocument outputDoc = createDocument()) {\n", "            outputDoc.addNewPage();\n", "            PdfAcroForm acroForm = PdfFormCreator.getAcroForm(outputDoc, true);\n", "            PdfFormField field = new TextFormFieldBuilder(outputDoc, \"text1\")\n", "                    .setWidgetRectangle(new Rectangle(100, 700, 200, 20)).createText().setValue(\"text1\");\n", "            acroForm.addField(field);\n", "\n", "            PdfFormField root = new TextFormFieldBuilder(outputDoc, \"root\")\n", "                    .setWidgetRectangle(new Rectangle(100, 600, 200, 20)).createText().setValue(\"root\");\n", "            PdfFormField child = new TextFormFieldBuilder(outputDoc, \"child\")\n", "                    .setWidgetRectangle(new Rectangle(100, 300, 200, 20)).createText().setValue(\"child\");\n", "            PdfFormField child1 = new TextFormFieldBuilder(outputDoc, \"aaaaa\")\n", "                    .setWidgetRectangle(new Rectangle(100, 400, 200, 20)).createText().setValue(\"aaaaa\");\n", "            PdfFormField child2 = new TextFormFieldBuilder(outputDoc, \"bbbbb\")\n", "                    .setWidgetRectangle(new Rectangle(100, 500, 200, 20)).createText().setValue(\"bbbbb\");\n", "            child1.addKid(child2);\n", "            child.addKid(child1);\n", "            root.addKid(child);\n", "            acroForm.addField(root);\n", "            acroForm.removeField(\"root.child.aaaaa\");\n", "            Assert.assertEquals(2, acroForm.fields.size());\n", "            Assert.assertEquals(2, root.getKids().size());\n", "        }\n", "    }\n", "\n", "    @Test\n", "    public void getChildFromFormFieldWithDifferentAmountOfChildrenTest() {\n", "        try(PdfDocument outputDoc = createDocument()) {\n", "            outputDoc.addNewPage();\n", "            PdfAcroForm acroForm = PdfFormCreator.getAcroForm(outputDoc, true);\n", "            PdfFormField field = new TextFormFieldBuilder(outputDoc, \"text1\")\n", "                    .setWidgetRectangle(new Rectangle(100, 700, 200, 20)).createText().setValue(\"text1\");\n", "            acroForm.addField(field);\n", "\n", "            PdfFormField root = new TextFormFieldBuilder(outputDoc, \"root\")\n", "                    .setWidgetRectangle(new Rectangle(100, 600, 200, 20)).createText().setValue(\"root\");\n", "            PdfFormField child = new TextFormFieldBuilder(outputDoc, \"child\")\n", "                    .setWidgetRectangle(new Rectangle(100, 300, 200, 20)).createText().setValue(\"child\");\n", "            PdfFormField child1 = new TextFormFieldBuilder(outputDoc, \"aaaaa\")\n", "                    .setWidgetRectangle(new Rectangle(100, 400, 200, 20)).createText().setValue(\"aaaaa\");\n", "            PdfFormField child2 = new TextFormFieldBuilder(outputDoc, \"bbbbb\")\n", "                    .setWidgetRectangle(new Rectangle(100, 500, 200, 20)).createText().setValue(\"bbbbb\");\n", "            PdfFormField child3 = new TextFormFieldBuilder(outputDoc, \"child1\")\n", "                    .setWidgetRectangle(new Rectangle(100, 500, 200, 20)).createText().setValue(\"child1\");\n", "            PdfFormField child4 = new TextFormFieldBuilder(outputDoc, \"child2\")\n", "                    .setWidgetRectangle(new Rectangle(100, 500, 200, 20)).createText().setValue(\"child2\");\n", "            PdfFormField child5 = new TextFormFieldBuilder(outputDoc, \"child2\")\n", "                    .setWidgetRectangle(new Rectangle(100, 500, 200, 20)).createText().setValue(\"child2\");\n", "            child1.addKid(child2);\n", "            child1.addKid(child3);\n", "            child1.addKid(child4);\n", "            child4.addKid(child5);\n", "            child.addKid(child1);\n", "            root.addKid(child);\n", "            acroForm.addField(root);\n", "            PdfFormField childField = acroForm.getField(\"root.child.aaaaa.child2\");\n", "            Assert.assertEquals(\"root.child.aaaaa.child2\", childField.getFieldName().toString());\n", "\n", "            Assert.assertEquals(2, acroForm.getFields().size());\n", "            Assert.assertEquals(2, root.getKids().size());\n", "        }\n", "    }\n", "\n", "    @Test\n", "    public void checkFormFieldsSizeTest() {\n", "        try(PdfDocument outputDoc = createDocument()) {\n", "            outputDoc.addNewPage();\n", "            PdfAcroForm acroForm = PdfFormCreator.getAcroForm(outputDoc, true);\n", "            Assert.assertEquals(0, acroForm.getAllFormFields().size());\n", "            Assert.assertEquals(0, acroForm.getAllFormFieldsAndAnnotations().size());\n", "\n", "            PdfDictionary fieldDict = new PdfDictionary();\n", "            fieldDict.put(PdfName.FT, PdfName.Tx);\n", "            PdfFormField field = PdfFormField.makeFormField(fieldDict.makeIndirect(outputDoc), outputDoc);\n", "            field.setFieldName(\"Field1\");\n", "            acroForm.addField(field);\n", "            Assert.assertEquals(1, acroForm.getAllFormFields().size());\n", "            Assert.assertEquals(1, acroForm.getAllFormFieldsAndAnnotations().size());\n", "\n", "            PdfDictionary annotDict = new PdfDictionary();\n", "            annotDict.put(PdfName.Subtype, PdfName.Widget);\n", "            field.addKid(PdfFormAnnotation.makeFormAnnotation(annotDict, outputDoc));\n", "            Assert.assertEquals(1, acroForm.getAllFormFields().size());\n", "            Assert.assertEquals(2, acroForm.getAllFormFieldsAndAnnotations().size());\n", "        }\n", "    }\n", "\n", "    @Test\n", "    public void fieldKidsWithTheSameNamesTest() {\n", "        try (PdfDocument outputDoc = createDocument()) {\n", "            outputDoc.addNewPage();\n", "            PdfAcroForm acroForm = PdfFormCreator.getAcroForm(outputDoc, true);\n", "\n", "            PdfFormField root = new TextFormFieldBuilder(outputDoc, \"root\").createText().setValue(\"root\");\n", "            PdfFormField child = new TextFormFieldBuilder(outputDoc, \"child\").createText()\n", "                    .setValue(\"child\");\n", "            PdfFormField sameChild = new TextFormFieldBuilder(outputDoc, \"child\").createText()\n", "                    .setValue(\"child\");\n", "            PdfFormField child1 = new TextFormFieldBuilder(outputDoc, \"aaaaa\")\n", "                    .setWidgetRectangle(new Rectangle(100, 400, 200, 20)).createText()\n", "                    .setValue(\"aaaaa\");\n", "            PdfFormField child2 = new TextFormFieldBuilder(outputDoc, \"bbbbb\")\n", "                    .setWidgetRectangle(new Rectangle(100, 500, 200, 20)).createText()\n", "                    .setValue(\"bbbbb\");\n", "            PdfFormField child3 = new TextFormFieldBuilder(outputDoc, \"aaaaa\")\n", "                    .setWidgetRectangle(new Rectangle(100, 500, 200, 20)).createText()\n", "                    .setValue(\"aaaaa\");\n", "\n", "            child.addKid(child1);\n", "            child.addKid(child2);\n", "            sameChild.addKid(child2);\n", "            sameChild.addKid(child3);\n", "            root.addKid(child);\n", "            root.addKid(sameChild);\n", "            acroForm.addField(root);\n", "\n", "            Assert.assertEquals(1, acroForm.getFields().size());\n", "            Assert.assertEquals(1, root.getKids().size());\n", "            Assert.assertEquals(2, child.getKids().size());\n", "        }\n", "    }\n", "\n", "    @Test\n", "    @LogMessages(messages = @LogMessage(messageTemplate = FormsLogMessageConstants.FORM_FIELD_MUST_HAVE_A_NAME))\n", "    public void namelessFieldTest() {\n", "        try (PdfDocument outputDoc = createDocument()) {\n", "            outputDoc.addNewPage();\n", "            PdfAcroForm acroForm = PdfFormCreator.getAcroForm(outputDoc, true);\n", "            PdfDictionary fieldDict = new PdfDictionary();\n", "            fieldDict.put(PdfName.FT, PdfName.Tx);\n", "            PdfFormField field = PdfFormField.makeFormField(fieldDict.makeIndirect(outputDoc), outputDoc);\n", "            Exception e = Assert.assertThrows(PdfException.class, () -> acroForm.addField(field));\n", "            Assert.assertEquals(FormsExceptionMessageConstant.FORM_FIELD_MUST_HAVE_A_NAME, e.getMessage());\n", "\n", "            outputDoc.addNewPage();\n", "            PdfPage page = outputDoc.getLastPage();\n", "            e = Assert.assertThrows(PdfException.class, () -> acroForm.addField(field, page));\n", "            Assert.assertEquals(FormsExceptionMessageConstant.FORM_FIELD_MUST_HAVE_A_NAME, e.getMessage());\n", "\n", "            acroForm.addField(field, page, false);\n", "\n", "            Assert.assertEquals(0, acroForm.getRootFormFields().size());\n", "        }\n", "    }\n", "\n", "    @Test\n", "    public void addRootFieldsWithTheSameNamesTest() {\n", "        try (PdfDocument outputDoc = createDocument()) {\n", "            outputDoc.addNewPage();\n", "            PdfAcroForm acroForm = PdfFormCreator.getAcroForm(outputDoc, true);\n", "\n", "            PdfFormField root = new TextFormFieldBuilder(outputDoc, \"root\").createText().setValue(\"root\");\n", "            PdfFormField sameRoot = new TextFormFieldBuilder(outputDoc, \"root\").createText().setValue(\"root\");\n", "\n", "            PdfFormField child1 = new TextFormFieldBuilder(outputDoc, \"aaaaa\")\n", "                    .setWidgetRectangle(new Rectangle(100, 400, 200, 20)).createText()\n", "                    .setValue(\"aaaaa\");\n", "            PdfFormField child2 = new TextFormFieldBuilder(outputDoc, \"bbbbb\")\n", "                    .setWidgetRectangle(new Rectangle(100, 500, 200, 20)).createText()\n", "                    .setValue(\"bbbbb\");\n", "\n", "            root.addKid(child1);\n", "            sameRoot.addKid(child2);\n", "            acroForm.addField(root);\n", "            acroForm.addField(sameRoot);\n", "\n", "            Assert.assertEquals(1, acroForm.getFields().size());\n", "            Assert.assertEquals(2, root.getKids().size());\n", "        }\n", "    }\n", "\n", "    @Test\n", "    public void addMergedRootFieldsWithTheSameNamesTest() {\n", "        try (PdfDocument outputDoc = createDocument()) {\n", "            outputDoc.addNewPage();\n", "            PdfAcroForm acroForm = PdfFormCreator.getAcroForm(outputDoc, true);\n", "\n", "            PdfFormField firstField = new TextFormFieldBuilder(outputDoc, \"root\")\n", "                    .setWidgetRectangle(new Rectangle(100, 400, 200, 20))\n", "                    .createText().setValue(\"root\");\n", "            PdfFormField secondField = new TextFormFieldBuilder(outputDoc, \"root\")\n", "                    .setWidgetRectangle(new Rectangle(100, 500, 200, 30))\n", "                    .createText().setValue(\"root\");\n", "\n", "            acroForm.addField(firstField);\n", "            acroForm.addField(secondField);\n", "\n", "            Assert.assertEquals(1, acroForm.getFields().size());\n", "            Assert.assertEquals(2, acroForm.getField(\"root\").getKids().size());\n", "            Assert.assertEquals(2, acroForm.getField(\"root\").getChildFields().size());\n", "        }\n", "    }\n", "\n", "    @Test\n", "    public void addFieldsWithTheSameNamesButDifferentValuesTest() {\n", "        try (PdfDocument outputDoc = createDocument()) {\n", "            outputDoc.addNewPage();\n", "            PdfAcroForm acroForm = PdfFormCreator.getAcroForm(outputDoc, true);\n", "\n", "            PdfFormField firstField = new TextFormFieldBuilder(outputDoc, \"root\")\n", "                    .createText().setValue(\"first\");\n", "            PdfFormField secondField = new TextFormFieldBuilder(outputDoc, \"root\")\n", "                    .createText().setValue(\"second\");\n", "\n", "            acroForm.addField(firstField);\n", "\n", "            Exception e = Assert.assertThrows(PdfException.class, () -> acroForm.addField(secondField));\n", "            Assert.assertEquals(MessageFormatUtil.format(FormsExceptionMessageConstant.CANNOT_MERGE_FORMFIELDS, \"root\"),\n", "                    e.getMessage());\n", "        }\n", "    }\n", "\n", "    @Test\n", "    public void addRootFieldWithMergedFieldKidTest() {\n", "        try (PdfDocument outputDoc = createDocument()) {\n", "            outputDoc.addNewPage();\n", "            PdfAcroForm acroForm = PdfFormCreator.getAcroForm(outputDoc, true);\n", "\n", "            PdfFormField firstField = new TextFormFieldBuilder(outputDoc, \"root\")\n", "                    .createText().setValue(\"root\");\n", "            PdfFormField mergedField = new TextFormFieldBuilder(outputDoc, \"root\")\n", "                    .setWidgetRectangle(new Rectangle(100, 500, 200, 30))\n", "                    .createText();\n", "\n", "            firstField.addKid(mergedField);\n", "            acroForm.addField(firstField);\n", "\n", "            Assert.assertEquals(1, acroForm.getFields().size());\n", "            Assert.assertEquals(1, acroForm.getField(\"root\").getKids().size());\n", "\n", "            Assert.assertTrue(PdfFormAnnotationUtil.isPureWidgetOrMergedField(\n", "                    (PdfDictionary) acroForm.getField(\"root\").getKids().get(0)));\n", "            Assert.assertFalse(PdfFormAnnotationUtil.isPureWidget(\n", "                    (PdfDictionary) acroForm.getField(\"root\").getKids().get(0)));\n", "        }\n", "    }\n", "\n", "    @Test\n", "    public void addRootFieldWithDirtyNamedAnnotationsTest() {\n", "        try (PdfDocument outputDoc = createDocument()) {\n", "            outputDoc.addNewPage();\n", "            PdfAcroForm acroForm = PdfFormCreator.getAcroForm(outputDoc, true);\n", "\n", "            PdfFormField rootField = new TextFormFieldBuilder(outputDoc, \"root\")\n", "                    .createText().setValue(\"root\");\n", "            PdfFormField firstDirtyAnnot = new TextFormFieldBuilder(outputDoc, \"root\")\n", "                    .setWidgetRectangle(new Rectangle(100, 500, 200, 30))\n", "                    .createText();\n", "            firstDirtyAnnot.getPdfObject().remove(PdfName.V);\n", "            PdfFormField secondDirtyAnnot = new TextFormFieldBuilder(outputDoc, \"root\")\n", "                    .setWidgetRectangle(new Rectangle(200, 600, 300, 40))\n", "                    .createText();\n", "            secondDirtyAnnot.getPdfObject().remove(PdfName.V);\n", "\n", "            rootField.addKid(firstDirtyAnnot);\n", "            rootField.addKid(secondDirtyAnnot);\n", "\n", "            Assert.assertEquals(1, rootField.getKids().size());\n", "            Assert.assertEquals(2, firstDirtyAnnot.getKids().size());\n", "\n", "            acroForm.addField(rootField);\n", "\n", "            Assert.assertEquals(1, acroForm.getFields().size());\n", "\n", "            PdfArray fieldKids = acroForm.getField(\"root\").getKids();\n", "            Assert.assertEquals(1, fieldKids.size());\n", "\n", "            Assert.assertFalse(PdfFormAnnotationUtil.isPureWidget((PdfDictionary) fieldKids.get(0)));\n", "        }\n", "    }\n", "\n", "    @Test\n", "    public void addRootFieldWithDirtyUnnamedAnnotationsTest() {\n", "        try (PdfDocument outputDoc = createDocument()) {\n", "            outputDoc.addNewPage();\n", "            PdfAcroForm acroForm = PdfFormCreator.getAcroForm(outputDoc, true);\n", "\n", "            PdfFormField rootField = new TextFormFieldBuilder(outputDoc, \"root\")\n", "                    .createText().setValue(\"root\");\n", "            PdfFormField firstDirtyAnnot = new TextFormFieldBuilder(outputDoc, \"root\")\n", "                    .setWidgetRectangle(new Rectangle(100, 500, 200, 30))\n", "                    .createText();\n", "            firstDirtyAnnot.getPdfObject().remove(PdfName.V);\n", "            // Remove name in order to make dirty annotation being merged\n", "            firstDirtyAnnot.getPdfObject().remove(PdfName.T);\n", "            \n", "            PdfFormField secondDirtyAnnot = new TextFormFieldBuilder(outputDoc, \"root\")\n", "                    .setWidgetRectangle(new Rectangle(200, 600, 300, 40))\n", "                    .createText();\n", "            secondDirtyAnnot.getPdfObject().remove(PdfName.V);\n", "            // Remove name in order to make dirty annotation being merged\n", "            secondDirtyAnnot.getPdfObject().remove(PdfName.T);\n", "\n", "            rootField.addKid(firstDirtyAnnot);\n", "            rootField.addKid(secondDirtyAnnot);\n", "\n", "            Assert.assertEquals(1, rootField.getKids().size());\n", "            Assert.assertEquals(2, firstDirtyAnnot.getKids().size());\n", "\n", "            acroForm.addField(rootField);\n", "\n", "            Assert.assertEquals(1, acroForm.getFields().size());\n", "\n", "            PdfArray fieldKids = acroForm.getField(\"root\").getKids();\n", "            Assert.assertEquals(2, fieldKids.size());\n", "\n", "            Assert.assertTrue(PdfFormAnnotationUtil.isPureWidget((PdfDictionary) fieldKids.get(0)));\n", "            Assert.assertTrue(PdfFormAnnotationUtil.isPureWidget((PdfDictionary) fieldKids.get(1)));\n", "        }\n", "    }\n", "\n", "    @Test\n", "    public void mergeFieldsWhenKidsWasFlushedTest() {\n", "        try (PdfDocument outputDoc = createDocument()) {\n", "            outputDoc.addNewPage();\n", "            outputDoc.addNewPage();\n", "            PdfAcroForm acroForm = PdfFormCreator.getAcroForm(outputDoc, true);\n", "\n", "            PdfFormField firstField = new TextFormFieldBuilder(outputDoc, \"root\")\n", "                    .setWidgetRectangle(new Rectangle(100, 400, 200, 20)).setPage(1)\n", "                    .createText().setValue(\"root\");\n", "            PdfFormField secondField = new TextFormFieldBuilder(outputDoc, \"root\")\n", "                    .setWidgetRectangle(new Rectangle(100, 500, 200, 30)).setPage(2)\n", "                    .createText().setValue(\"root\");\n", "            PdfFormField thirdField = new TextFormFieldBuilder(outputDoc, \"root\")\n", "                    .setWidgetRectangle(new Rectangle(100, 600, 200, 40)).setPage(2)\n", "                    .createText().setValue(\"root\");\n", "\n", "            acroForm.addField(firstField);\n", "            acroForm.addField(secondField);\n", "\n", "            // flush first page, also first widget will be flushed\n", "            outputDoc.getPage(1).flush();\n", "\n", "            // recreate acroform and add field\n", "            acroForm = PdfFormCreator.getAcroForm(outputDoc, true);\n", "            acroForm.addField(thirdField);\n", "\n", "            Assert.assertEquals(1, acroForm.getFields().size());\n", "            Assert.assertEquals(3, acroForm.getField(\"root\").getKids().size());\n", "            Assert.assertEquals(2, acroForm.getField(\"root\").getChildFields().size());\n", "        }\n", "    }\n", "\n", "    @Test\n", "    public void addMergedRootFieldTest() {\n", "        try (PdfDocument outputDoc = createDocument()) {\n", "            PdfPage page = outputDoc.addNewPage();\n", "            PdfAcroForm acroForm = PdfFormCreator.getAcroForm(outputDoc, true);\n", "\n", "            PdfFormField mergedField = new TextFormFieldBuilder(outputDoc, \"root\").setPage(page)\n", "                    .setWidgetRectangle(new Rectangle(100, 500, 200, 30))\n", "                    .createText().setValue(\"root\");\n", "\n", "            Assert.assertEquals(0, page.getAnnotsSize());\n", "            acroForm.addField(mergedField);\n", "            Assert.assertEquals(1, page.getAnnotsSize());\n", "\n", "            Assert.assertEquals(1, acroForm.getFields().size());\n", "            PdfFormField root = acroForm.getField(\"root\");\n", "            Assert.assertNull(root.getKids());\n", "            Assert.assertTrue(PdfFormAnnotationUtil.isPureWidgetOrMergedField(root.getPdfObject()));\n", "            Assert.assertFalse(PdfFormAnnotationUtil.isPureWidget(root.getPdfObject()));\n", "        }\n", "    }\n", "\n", "    @Test\n", "    public void setCalculationOrderTest() {\n", "        try (PdfDocument outputDoc = createDocument()) {\n", "\n", "            PdfAcroForm acroForm = PdfFormCreator.getAcroForm(outputDoc, true);\n", "            PdfArray calculationOrderArray = new PdfArray(new int[] {1, 0});\n", "            acroForm.setCalculationOrder(calculationOrderArray);\n", "\n", "            boolean isModified = acroForm.getPdfObject().isModified();\n", "            boolean isReleaseForbidden = acroForm.getPdfObject().isReleaseForbidden();\n", "            PdfObject calculationOrder = acroForm.getPdfObject().get(PdfName.CO);\n", "            outputDoc.close();\n", "\n", "            Assert.assertEquals(calculationOrderArray, calculationOrder);\n", "            Assert.assertTrue(isModified);\n", "            Assert.assertTrue(isReleaseForbidden);\n", "        }\n", "    }\n", "\n", "    @Test\n", "    public void setDefaultAppearanceTest() {\n", "        try (PdfDocument outputDoc = createDocument()) {\n", "\n", "            PdfAcroForm acroForm = PdfFormCreator.getAcroForm(outputDoc, true);\n", "            acroForm.setDefaultAppearance(\"default appearance\");\n", "\n", "            boolean isModified = acroForm.getPdfObject().isModified();\n", "            boolean isReleaseForbidden = acroForm.getPdfObject().isReleaseForbidden();\n", "            PdfObject calculationOrder = acroForm.getPdfObject().get(PdfName.DA);\n", "            outputDoc.close();\n", "\n", "            Assert.assertEquals(new PdfString(\"default appearance\"), calculationOrder);\n", "            Assert.assertTrue(isModified);\n", "            Assert.assertTrue(isReleaseForbidden);\n", "        }\n", "    }\n", "\n", "    @Test\n", "    public void setDefaultJustificationTest() {\n", "        try (PdfDocument outputDoc = createDocument()) {\n", "\n", "            PdfAcroForm acroForm = PdfFormCreator.getAcroForm(outputDoc, true);\n", "            acroForm.setDefaultJustification(14);\n", "\n", "            boolean isModified = acroForm.getPdfObject().isModified();\n", "            boolean isReleaseForbidden = acroForm.getPdfObject().isReleaseForbidden();\n", "            PdfObject defaultJustification = acroForm.getPdfObject().get(PdfName.Q);\n", "            outputDoc.close();\n", "\n", "            Assert.assertEquals(new PdfNumber(14), defaultJustification);\n", "            Assert.assertTrue(isModified);\n", "            Assert.assertTrue(isReleaseForbidden);\n", "        }\n", "    }\n", "\n", "    @Test\n", "    public void setDefaultResourcesTest() {\n", "        try (PdfDocument outputDoc = createDocument()) {\n", "\n", "            PdfAcroForm acroForm = PdfFormCreator.getAcroForm(outputDoc, true);\n", "\n", "            PdfDictionary dictionary = new PdfDictionary();\n", "            PdfFormCreator.getAcroForm(outputDoc, true).setDefaultResources(dictionary);\n", "\n", "            boolean isModified = acroForm.getPdfObject().isModified();\n", "            boolean isReleaseForbidden = acroForm.getPdfObject().isReleaseForbidden();\n", "            PdfObject defaultResourcesDict = acroForm.getPdfObject().get(PdfName.DR);\n", "            outputDoc.close();\n", "\n", "            Assert.assertEquals(dictionary, defaultResourcesDict);\n", "            Assert.assertTrue(isModified);\n", "            Assert.assertTrue(isReleaseForbidden);\n", "        }\n", "    }\n", "\n", "    @Test\n", "    public void setNeedAppearancesTest() {\n", "        try (PdfDocument outputDoc = createDocument()) {\n", "\n", "            PdfAcroForm acroForm = PdfFormCreator.getAcroForm(outputDoc, true);\n", "            acroForm.setNeedAppearances(false);\n", "\n", "            boolean isModified = acroForm.getPdfObject().isModified();\n", "            boolean isReleaseForbidden = acroForm.getPdfObject().isReleaseForbidden();\n", "            PdfObject needAppearance = acroForm.getPdfObject().get(PdfName.NeedAppearances);\n", "\n", "            outputDoc.close();\n", "\n", "            Assert.assertEquals(new PdfBoolean(false), needAppearance);\n", "            Assert.assertTrue(isModified);\n", "            Assert.assertTrue(isReleaseForbidden);\n", "        }\n", "    }\n", "\n", "    @Test\n", "    @LogMessages(messages = @LogMessage(messageTemplate = \"NeedAppearances has been deprecated in PDF 2.0. Appearance streams are required in PDF 2.0.\"))\n", "    public void setNeedAppearancesInPdf2Test() {\n", "        PdfDocument outputDoc = new PdfDocument(\n", "                new PdfWriter(new ByteArrayOutputStream(), new WriterProperties().setPdfVersion(\n", "                        PdfVersion.PDF_2_0)));\n", "        outputDoc.addNewPage();\n", "\n", "        PdfAcroForm acroForm = PdfFormCreator.getAcroForm(outputDoc, true);\n", "        acroForm.setNeedAppearances(false);\n", "\n", "        boolean isModified = acroForm.getPdfObject().isModified();\n", "        boolean isReleaseForbidden = acroForm.getPdfObject().isReleaseForbidden();\n", "        PdfObject needAppearance = acroForm.getPdfObject().get(PdfName.NeedAppearances);\n", "\n", "        outputDoc.close();\n", "\n", "        Assert.assertNull(needAppearance);\n", "        Assert.assertTrue(isModified);\n", "        Assert.assertTrue(isReleaseForbidden);\n", "    }\n", "\n", "    @Test\n", "    public void setGenerateAppearanceTest() {\n", "        try (PdfDocument outputDoc = createDocument()) {\n", "\n", "            PdfAcroForm acroForm = PdfFormCreator.getAcroForm(outputDoc, true);\n", "            acroForm.setNeedAppearances(false);\n", "            acroForm.setGenerateAppearance(true);\n", "\n", "            boolean isModified = acroForm.getPdfObject().isModified();\n", "            boolean isReleaseForbidden = acroForm.getPdfObject().isReleaseForbidden();\n", "            boolean isGenerateAppearance = acroForm.isGenerateAppearance();\n", "            Object needAppearances = acroForm.getPdfObject().get(PdfName.NeedAppearances);\n", "            outputDoc.close();\n", "\n", "            Assert.assertNull(needAppearances);\n", "            Assert.assertTrue(isGenerateAppearance);\n", "            Assert.assertTrue(isModified);\n", "            Assert.assertTrue(isReleaseForbidden);\n", "        }\n", "    }\n", "\n", "    @Test\n", "    public void setXFAResourcePdfArrayTest() {\n", "        try (PdfDocument outputDoc = createDocument()) {\n", "\n", "            PdfAcroForm acroForm = PdfFormCreator.getAcroForm(outputDoc, true);\n", "            PdfArray array = new PdfArray();\n", "            acroForm.setXFAResource(array);\n", "\n", "            boolean isModified = acroForm.getPdfObject().isModified();\n", "            boolean isReleaseForbidden = acroForm.getPdfObject().isReleaseForbidden();\n", "            PdfObject xfaObject = acroForm.getPdfObject().get(PdfName.XFA);\n", "            outputDoc.close();\n", "\n", "            Assert.assertEquals(array, xfaObject);\n", "            Assert.assertTrue(isModified);\n", "            Assert.assertTrue(isReleaseForbidden);\n", "        }\n", "    }\n", "\n", "    @Test\n", "    public void setXFAResourcePdfStreamTest() {\n", "        try (PdfDocument outputDoc = createDocument()) {\n", "\n", "            PdfAcroForm acroForm = PdfFormCreator.getAcroForm(outputDoc, true);\n", "            PdfStream stream = new PdfStream();\n", "            acroForm.setXFAResource(stream);\n", "\n", "            boolean isModified = acroForm.getPdfObject().isModified();\n", "            boolean isReleaseForbidden = acroForm.getPdfObject().isReleaseForbidden();\n", "            PdfObject xfaObject = acroForm.getPdfObject().get(PdfName.XFA);\n", "            outputDoc.close();\n", "\n", "            Assert.assertEquals(stream, xfaObject);\n", "            Assert.assertTrue(isModified);\n", "            Assert.assertTrue(isReleaseForbidden);\n", "        }\n", "    }\n", "\n", "    @Test\n", "    public  void replaceFormFieldRootLevelReplacesExistingFieldTest() {\n", "        try(PdfDocument outputDoc = createDocument()) {\n", "            outputDoc.addNewPage();\n", "            PdfAcroForm acroForm = PdfFormCreator.getAcroForm(outputDoc, true);\n", "            PdfDictionary fieldDict = new PdfDictionary();\n", "            fieldDict.put(PdfName.FT, PdfName.Tx);\n", "            fieldDict.put(PdfName.T, new PdfString(\"field1\"));\n", "            PdfFormField field = PdfFormField.makeFormField(fieldDict.makeIndirect(outputDoc), outputDoc);\n", "\n", "            assert field != null;\n", "            acroForm.addField(field);\n", "            Assert.assertEquals(1, acroForm.getRootFormFields().size());\n", "\n", "\n", "            PdfDictionary fieldDictReplace = new PdfDictionary();\n", "            fieldDictReplace.put(PdfName.FT, PdfName.Tx);\n", "            fieldDictReplace.put(PdfName.T, new PdfString(\"field2\"));\n", "            PdfFormField fieldReplace = PdfFormField.makeFormField(fieldDictReplace.makeIndirect(outputDoc), outputDoc);\n", "\n", "            acroForm.replaceField(\"field1\", fieldReplace);\n", "            Assert.assertEquals(1, acroForm.getRootFormFields().size());\n", "            Assert.assertEquals(\"field2\", acroForm.getField(\"field2\").getFieldName().toUnicodeString());\n", "\n", "        }\n", "    }\n", "\n", "    @Test\n", "    @LogMessages(messages = @LogMessage(messageTemplate = FormsLogMessageConstants.PROVIDE_FORMFIELD_NAME))\n", "    public void replaceWithNullNameLogsErrorTest(){\n", "        try(PdfDocument outputDoc = createDocument()) {\n", "            outputDoc.addNewPage();\n", "            PdfAcroForm acroForm = PdfFormCreator.getAcroForm(outputDoc, true);\n", "            PdfDictionary fieldDict = new PdfDictionary();\n", "            fieldDict.put(PdfName.FT, PdfName.Tx);\n", "            fieldDict.put(PdfName.T, new PdfString(\"field1\"));\n", "            PdfFormField field = PdfFormField.makeFormField(fieldDict.makeIndirect(outputDoc), outputDoc);\n", "\n", "            assert field != null;\n", "            acroForm.addField(field);\n", "            Assert.assertEquals(1, acroForm.getRootFormFields().size());\n", "\n", "\n", "            PdfDictionary fieldDictReplace = new PdfDictionary();\n", "            fieldDictReplace.put(PdfName.FT, PdfName.Tx);\n", "            fieldDictReplace.put(PdfName.T, new PdfString(\"field2\"));\n", "            PdfFormField fieldReplace = PdfFormField.makeFormField(fieldDictReplace.makeIndirect(outputDoc), outputDoc);\n", "\n", "            acroForm.replaceField(null, fieldReplace);\n", "            Assert.assertEquals(1, acroForm.getRootFormFields().size());\n", "        }\n", "\n", "    }\n", "\n", "    @Test\n", "    public  void replaceFormFieldOneDeepReplacesExistingFieldTest() {\n", "        try(PdfDocument outputDoc = createDocument()) {\n", "            outputDoc.addNewPage();\n", "            PdfAcroForm acroForm = PdfFormCreator.getAcroForm(outputDoc, true);\n", "            PdfDictionary fieldDict = new PdfDictionary();\n", "            fieldDict.put(PdfName.FT, PdfName.Tx);\n", "            fieldDict.put(PdfName.T, new PdfString(\"field1\"));\n", "            PdfFormField field = PdfFormField.makeFormField(fieldDict.makeIndirect(outputDoc), outputDoc);\n", "\n", "            PdfDictionary fieldDictChild = new PdfDictionary();\n", "            fieldDictChild.put(PdfName.FT, PdfName.Tx);\n", "            fieldDictChild.put(PdfName.T, new PdfString(\"child1\"));\n", "            PdfFormField fieldChild = PdfFormField.makeFormField(fieldDictChild.makeIndirect(outputDoc), outputDoc);\n", "            assert field != null;\n", "            assert fieldChild != null;\n", "\n", "            field.addKid(fieldChild);\n", "\n", "            acroForm.addField(field);\n", "            Assert.assertEquals(1, acroForm.getRootFormFields().size());\n", "\n", "\n", "            PdfDictionary fieldDictReplace = new PdfDictionary();\n", "            fieldDictReplace.put(PdfName.FT, PdfName.Tx);\n", "            fieldDictReplace.put(PdfName.T, new PdfString(\"field2\"));\n", "            PdfFormField fieldReplace = PdfFormField.makeFormField(fieldDictReplace.makeIndirect(outputDoc), outputDoc);\n", "\n", "            acroForm.replaceField(\"field1.child1\", fieldReplace);\n", "            Assert.assertEquals(1, acroForm.getRootFormFields().size());\n", "            Assert.assertEquals(\"field1.field2\", acroForm.getField(\"field1.field2\").getFieldName().toUnicodeString());\n", "\n", "        }\n", "    }\n", "\n", "\n", "    private static PdfDocument createDocument() {\n", "        PdfDocument outputDoc = new PdfDocument(new PdfWriter(new ByteArrayOutputStream()));\n", "        outputDoc.addNewPage();\n", "        return outputDoc;\n", "    }\n", "}\n"], "method_lines_dic": {"PdfAcroForm::::addField(com.itextpdf.forms.fields.PdfFormField)": [223, 234], "PdfAcroForm::::getRootFormFields()": [321, 327], "PdfAcroForm::::getAllFormFields()": [334, 349], "PdfAcroForm::::getAllFormFieldsAndAnnotations()": [356, 367], "PdfAcroForm::::getFieldsForFlattening()": [375, 377], "PdfAcroForm::::getPdfDocument()": [384, 386], "PdfAcroForm::::setNeedAppearances(boolean)": [402, 410], "PdfAcroForm::::getNeedAppearances()": [425, 427], "PdfAcroForm::::setSignatureFlags(int)": [442, 444], "PdfAcroForm::::setSignatureFlag(int)": [460, 465], "PdfAcroForm::::getSignatureFlags()": [478, 485], "PdfAcroForm::::getCalculationOrder()": [518, 520], "PdfAcroForm::::getDefaultResources()": [555, 557], "PdfAcroForm::::setDefaultAppearance(java.lang.String)": [568, 570], "PdfAcroForm::::getDefaultAppearance()": [580, 582], "PdfAcroForm::::setDefaultJustification(int)": [594, 596], "PdfAcroForm::::getDefaultJustification()": [607, 609], "PdfAcroForm::::getXFAResource()": [645, 647], "PdfAcroForm::::getField(java.lang.String)": [656, 674], "PdfAcroForm::::isGenerateAppearance()": [683, 685], "PdfAcroForm::::setGenerateAppearance(boolean)": [704, 710], "PdfAcroForm::::flattenFields()": [717, 840], "PdfAcroForm::::removeField(java.lang.String)": [849, 885], "PdfAcroForm::::partialFormFlattening(java.lang.String)": [893, 898], "PdfAcroForm::::renameField(java.lang.String,java.lang.String)": [906, 919], "PdfAcroForm::::copyField(java.lang.String)": [928, 935], "PdfAcroForm::::replaceField(java.lang.String,com.itextpdf.forms.fields.PdfFormField)": [944, 962], "PdfAcroForm::::disableRegenerationForAllFields()": [968, 972], "PdfAcroForm::::enableRegenerationForAllFields()": [977, 981], "PdfAcroForm::::getFields()": [988, 996], "PdfAcroForm::::isWrappedObjectMustBeIndirect()": [998, 1001], "PdfAcroForm::::populateFormFieldsMap()": [1003, 1039], "PdfAcroForm::::hasXfaForm()": [1112, 1114], "PdfAcroForm::::getXfaForm()": [1121, 1123], "PdfAcroForm::::removeXfaForm()": [1128, 1135], "PdfAcroForm::::release()": [1155, 1165], "PdfAcroForm::::setModified()": [1167, 1175], "PdfAcroForm::::prepareFieldsForFlattening(com.itextpdf.forms.fields.PdfFormField)": [1200, 1208], "PdfAcroForm::::getAllFormFieldsWithoutNames()": [1255, 1266], "PdfAcroForm::::needToAddToAcroform(com.itextpdf.forms.fields.PdfFormField,boolean)": [1268, 1279]}, "test_method_lines_dic": {"PdfAcroFormTest::::setSignatureFlagsTest()": [64, 79], "PdfAcroFormTest::::addChildToFormFieldTest()": [81, 98], "PdfAcroFormTest::::addChildToWidgetTest()": [100, 117], "PdfAcroFormTest::::getFormFieldChildTest()": [119, 136], "PdfAcroFormTest::::getFormFieldWithEqualChildNamesTest()": [138, 161], "PdfAcroFormTest::::changeFieldNameTest()": [163, 181], "PdfAcroFormTest::::removeChildFromFormFieldTest()": [183, 208], "PdfAcroFormTest::::getChildFromFormFieldWithDifferentAmountOfChildrenTest()": [210, 246], "PdfAcroFormTest::::checkFormFieldsSizeTest()": [248, 270], "PdfAcroFormTest::::fieldKidsWithTheSameNamesTest()": [272, 305], "PdfAcroFormTest::::namelessFieldTest()": [307, 328], "PdfAcroFormTest::::addRootFieldsWithTheSameNamesTest()": [330, 354], "PdfAcroFormTest::::addMergedRootFieldsWithTheSameNamesTest()": [356, 376], "PdfAcroFormTest::::addFieldsWithTheSameNamesButDifferentValuesTest()": [378, 395], "PdfAcroFormTest::::addRootFieldWithMergedFieldKidTest()": [397, 420], "PdfAcroFormTest::::addRootFieldWithDirtyNamedAnnotationsTest()": [422, 454], "PdfAcroFormTest::::addRootFieldWithDirtyUnnamedAnnotationsTest()": [456, 494], "PdfAcroFormTest::::mergeFieldsWhenKidsWasFlushedTest()": [496, 527], "PdfAcroFormTest::::addMergedRootFieldTest()": [529, 549], "PdfAcroFormTest::::setCalculationOrderTest()": [551, 568], "PdfAcroFormTest::::setDefaultAppearanceTest()": [570, 586], "PdfAcroFormTest::::setDefaultJustificationTest()": [588, 604], "PdfAcroFormTest::::setDefaultResourcesTest()": [606, 624], "PdfAcroFormTest::::setNeedAppearancesTest()": [626, 643], "PdfAcroFormTest::::setNeedAppearancesInPdf2Test()": [645, 665], "PdfAcroFormTest::::setGenerateAppearanceTest()": [667, 686], "PdfAcroFormTest::::setXFAResourcePdfArrayTest()": [688, 705], "PdfAcroFormTest::::setXFAResourcePdfStreamTest()": [707, 724], "PdfAcroFormTest::::replaceFormFieldRootLevelReplacesExistingFieldTest()": [726, 751], "PdfAcroFormTest::::replaceWithNullNameLogsErrorTest()": [753, 778], "PdfAcroFormTest::::replaceFormFieldOneDeepReplacesExistingFieldTest()": [780, 813], "PdfAcroFormTest::::createDocument()": [816, 820]}, "reverse_method_lines_dic": {"223": "PdfAcroForm::::addField(com.itextpdf.forms.fields.PdfFormField)", "224": "PdfAcroForm::::addField(com.itextpdf.forms.fields.PdfFormField)", "225": "PdfAcroForm::::addField(com.itextpdf.forms.fields.PdfFormField)", "226": "PdfAcroForm::::addField(com.itextpdf.forms.fields.PdfFormField)", "227": "PdfAcroForm::::addField(com.itextpdf.forms.fields.PdfFormField)", "228": "PdfAcroForm::::addField(com.itextpdf.forms.fields.PdfFormField)", "229": "PdfAcroForm::::addField(com.itextpdf.forms.fields.PdfFormField)", "230": "PdfAcroForm::::addField(com.itextpdf.forms.fields.PdfFormField)", "231": "PdfAcroForm::::addField(com.itextpdf.forms.fields.PdfFormField)", "232": "PdfAcroForm::::addField(com.itextpdf.forms.fields.PdfFormField)", "233": "PdfAcroForm::::addField(com.itextpdf.forms.fields.PdfFormField)", "234": "PdfAcroForm::::addField(com.itextpdf.forms.fields.PdfFormField)", "321": "PdfAcroForm::::getRootFormFields()", "322": "PdfAcroForm::::getRootFormFields()", "323": "PdfAcroForm::::getRootFormFields()", "324": "PdfAcroForm::::getRootFormFields()", "325": "PdfAcroForm::::getRootFormFields()", "326": "PdfAcroForm::::getRootFormFields()", "327": "PdfAcroForm::::getRootFormFields()", "334": "PdfAcroForm::::getAllFormFields()", "335": "PdfAcroForm::::getAllFormFields()", "336": "PdfAcroForm::::getAllFormFields()", "337": "PdfAcroForm::::getAllFormFields()", "338": "PdfAcroForm::::getAllFormFields()", "339": "PdfAcroForm::::getAllFormFields()", "340": "PdfAcroForm::::getAllFormFields()", "341": "PdfAcroForm::::getAllFormFields()", "342": "PdfAcroForm::::getAllFormFields()", "343": "PdfAcroForm::::getAllFormFields()", "344": "PdfAcroForm::::getAllFormFields()", "345": "PdfAcroForm::::getAllFormFields()", "346": "PdfAcroForm::::getAllFormFields()", "347": "PdfAcroForm::::getAllFormFields()", "348": "PdfAcroForm::::getAllFormFields()", "349": "PdfAcroForm::::getAllFormFields()", "356": "PdfAcroForm::::getAllFormFieldsAndAnnotations()", "357": "PdfAcroForm::::getAllFormFieldsAndAnnotations()", "358": "PdfAcroForm::::getAllFormFieldsAndAnnotations()", "359": "PdfAcroForm::::getAllFormFieldsAndAnnotations()", "360": "PdfAcroForm::::getAllFormFieldsAndAnnotations()", "361": "PdfAcroForm::::getAllFormFieldsAndAnnotations()", "362": "PdfAcroForm::::getAllFormFieldsAndAnnotations()", "363": "PdfAcroForm::::getAllFormFieldsAndAnnotations()", "364": "PdfAcroForm::::getAllFormFieldsAndAnnotations()", "365": "PdfAcroForm::::getAllFormFieldsAndAnnotations()", "366": "PdfAcroForm::::getAllFormFieldsAndAnnotations()", "367": "PdfAcroForm::::getAllFormFieldsAndAnnotations()", "375": "PdfAcroForm::::getFieldsForFlattening()", "376": "PdfAcroForm::::getFieldsForFlattening()", "377": "PdfAcroForm::::getFieldsForFlattening()", "384": "PdfAcroForm::::getPdfDocument()", "385": "PdfAcroForm::::getPdfDocument()", "386": "PdfAcroForm::::getPdfDocument()", "402": "PdfAcroForm::::setNeedAppearances(boolean)", "403": "PdfAcroForm::::setNeedAppearances(boolean)", "404": "PdfAcroForm::::setNeedAppearances(boolean)", "405": "PdfAcroForm::::setNeedAppearances(boolean)", "406": "PdfAcroForm::::setNeedAppearances(boolean)", "407": "PdfAcroForm::::setNeedAppearances(boolean)", "408": "PdfAcroForm::::setNeedAppearances(boolean)", "409": "PdfAcroForm::::setNeedAppearances(boolean)", "410": "PdfAcroForm::::setNeedAppearances(boolean)", "425": "PdfAcroForm::::getNeedAppearances()", "426": "PdfAcroForm::::getNeedAppearances()", "427": "PdfAcroForm::::getNeedAppearances()", "442": "PdfAcroForm::::setSignatureFlags(int)", "443": "PdfAcroForm::::setSignatureFlags(int)", "444": "PdfAcroForm::::setSignatureFlags(int)", "460": "PdfAcroForm::::setSignatureFlag(int)", "461": "PdfAcroForm::::setSignatureFlag(int)", "462": "PdfAcroForm::::setSignatureFlag(int)", "463": "PdfAcroForm::::setSignatureFlag(int)", "464": "PdfAcroForm::::setSignatureFlag(int)", "465": "PdfAcroForm::::setSignatureFlag(int)", "478": "PdfAcroForm::::getSignatureFlags()", "479": "PdfAcroForm::::getSignatureFlags()", "480": "PdfAcroForm::::getSignatureFlags()", "481": "PdfAcroForm::::getSignatureFlags()", "482": "PdfAcroForm::::getSignatureFlags()", "483": "PdfAcroForm::::getSignatureFlags()", "484": "PdfAcroForm::::getSignatureFlags()", "485": "PdfAcroForm::::getSignatureFlags()", "518": "PdfAcroForm::::getCalculationOrder()", "519": "PdfAcroForm::::getCalculationOrder()", "520": "PdfAcroForm::::getCalculationOrder()", "555": "PdfAcroForm::::getDefaultResources()", "556": "PdfAcroForm::::getDefaultResources()", "557": "PdfAcroForm::::getDefaultResources()", "568": "PdfAcroForm::::setDefaultAppearance(java.lang.String)", "569": "PdfAcroForm::::setDefaultAppearance(java.lang.String)", "570": "PdfAcroForm::::setDefaultAppearance(java.lang.String)", "580": "PdfAcroForm::::getDefaultAppearance()", "581": "PdfAcroForm::::getDefaultAppearance()", "582": "PdfAcroForm::::getDefaultAppearance()", "594": "PdfAcroForm::::setDefaultJustification(int)", "595": "PdfAcroForm::::setDefaultJustification(int)", "596": "PdfAcroForm::::setDefaultJustification(int)", "607": "PdfAcroForm::::getDefaultJustification()", "608": "PdfAcroForm::::getDefaultJustification()", "609": "PdfAcroForm::::getDefaultJustification()", "645": "PdfAcroForm::::getXFAResource()", "646": "PdfAcroForm::::getXFAResource()", "647": "PdfAcroForm::::getXFAResource()", "656": "PdfAcroForm::::getField(java.lang.String)", "657": "PdfAcroForm::::getField(java.lang.String)", "658": "PdfAcroForm::::getField(java.lang.String)", "659": "PdfAcroForm::::getField(java.lang.String)", "660": "PdfAcroForm::::getField(java.lang.String)", "661": "PdfAcroForm::::getField(java.lang.String)", "662": "PdfAcroForm::::getField(java.lang.String)", "663": "PdfAcroForm::::getField(java.lang.String)", "664": "PdfAcroForm::::getField(java.lang.String)", "665": "PdfAcroForm::::getField(java.lang.String)", "666": "PdfAcroForm::::getField(java.lang.String)", "667": "PdfAcroForm::::getField(java.lang.String)", "668": "PdfAcroForm::::getField(java.lang.String)", "669": "PdfAcroForm::::getField(java.lang.String)", "670": "PdfAcroForm::::getField(java.lang.String)", "671": "PdfAcroForm::::getField(java.lang.String)", "672": "PdfAcroForm::::getField(java.lang.String)", "673": "PdfAcroForm::::getField(java.lang.String)", "674": "PdfAcroForm::::getField(java.lang.String)", "683": "PdfAcroForm::::isGenerateAppearance()", "684": "PdfAcroForm::::isGenerateAppearance()", "685": "PdfAcroForm::::isGenerateAppearance()", "704": "PdfAcroForm::::setGenerateAppearance(boolean)", "705": "PdfAcroForm::::setGenerateAppearance(boolean)", "706": "PdfAcroForm::::setGenerateAppearance(boolean)", "707": "PdfAcroForm::::setGenerateAppearance(boolean)", "708": "PdfAcroForm::::setGenerateAppearance(boolean)", "709": "PdfAcroForm::::setGenerateAppearance(boolean)", "710": "PdfAcroForm::::setGenerateAppearance(boolean)", "717": "PdfAcroForm::::flattenFields()", "718": "PdfAcroForm::::flattenFields()", "719": "PdfAcroForm::::flattenFields()", "720": "PdfAcroForm::::flattenFields()", "721": "PdfAcroForm::::flattenFields()", "722": "PdfAcroForm::::flattenFields()", "723": "PdfAcroForm::::flattenFields()", "724": "PdfAcroForm::::flattenFields()", "725": "PdfAcroForm::::flattenFields()", "726": "PdfAcroForm::::flattenFields()", "727": "PdfAcroForm::::flattenFields()", "728": "PdfAcroForm::::flattenFields()", "729": "PdfAcroForm::::flattenFields()", "730": "PdfAcroForm::::flattenFields()", "731": "PdfAcroForm::::flattenFields()", "732": "PdfAcroForm::::flattenFields()", "733": "PdfAcroForm::::flattenFields()", "734": "PdfAcroForm::::flattenFields()", "735": "PdfAcroForm::::flattenFields()", "736": "PdfAcroForm::::flattenFields()", "737": "PdfAcroForm::::flattenFields()", "738": "PdfAcroForm::::flattenFields()", "739": "PdfAcroForm::::flattenFields()", "740": "PdfAcroForm::::flattenFields()", "741": "PdfAcroForm::::flattenFields()", "742": "PdfAcroForm::::flattenFields()", "743": "PdfAcroForm::::flattenFields()", "744": "PdfAcroForm::::flattenFields()", "745": "PdfAcroForm::::flattenFields()", "746": "PdfAcroForm::::flattenFields()", "747": "PdfAcroForm::::flattenFields()", "748": "PdfAcroForm::::flattenFields()", "749": "PdfAcroForm::::flattenFields()", "750": "PdfAcroForm::::flattenFields()", "751": "PdfAcroForm::::flattenFields()", "752": "PdfAcroForm::::flattenFields()", "753": "PdfAcroForm::::flattenFields()", "754": "PdfAcroForm::::flattenFields()", "755": "PdfAcroForm::::flattenFields()", "756": "PdfAcroForm::::flattenFields()", "757": "PdfAcroForm::::flattenFields()", "758": "PdfAcroForm::::flattenFields()", "759": "PdfAcroForm::::flattenFields()", "760": "PdfAcroForm::::flattenFields()", "761": "PdfAcroForm::::flattenFields()", "762": "PdfAcroForm::::flattenFields()", "763": "PdfAcroForm::::flattenFields()", "764": "PdfAcroForm::::flattenFields()", "765": "PdfAcroForm::::flattenFields()", "766": "PdfAcroForm::::flattenFields()", "767": "PdfAcroForm::::flattenFields()", "768": "PdfAcroForm::::flattenFields()", "769": "PdfAcroForm::::flattenFields()", "770": "PdfAcroForm::::flattenFields()", "771": "PdfAcroForm::::flattenFields()", "772": "PdfAcroForm::::flattenFields()", "773": "PdfAcroForm::::flattenFields()", "774": "PdfAcroForm::::flattenFields()", "775": "PdfAcroForm::::flattenFields()", "776": "PdfAcroForm::::flattenFields()", "777": "PdfAcroForm::::flattenFields()", "778": "PdfAcroForm::::flattenFields()", "779": "PdfAcroForm::::flattenFields()", "780": "PdfAcroForm::::flattenFields()", "781": "PdfAcroForm::::flattenFields()", "782": "PdfAcroForm::::flattenFields()", "783": "PdfAcroForm::::flattenFields()", "784": "PdfAcroForm::::flattenFields()", "785": "PdfAcroForm::::flattenFields()", "786": "PdfAcroForm::::flattenFields()", "787": "PdfAcroForm::::flattenFields()", "788": "PdfAcroForm::::flattenFields()", "789": "PdfAcroForm::::flattenFields()", "790": "PdfAcroForm::::flattenFields()", "791": "PdfAcroForm::::flattenFields()", "792": "PdfAcroForm::::flattenFields()", "793": "PdfAcroForm::::flattenFields()", "794": "PdfAcroForm::::flattenFields()", "795": "PdfAcroForm::::flattenFields()", "796": "PdfAcroForm::::flattenFields()", "797": "PdfAcroForm::::flattenFields()", "798": "PdfAcroForm::::flattenFields()", "799": "PdfAcroForm::::flattenFields()", "800": "PdfAcroForm::::flattenFields()", "801": "PdfAcroForm::::flattenFields()", "802": "PdfAcroForm::::flattenFields()", "803": "PdfAcroForm::::flattenFields()", "804": "PdfAcroForm::::flattenFields()", "805": "PdfAcroForm::::flattenFields()", "806": "PdfAcroForm::::flattenFields()", "807": "PdfAcroForm::::flattenFields()", "808": "PdfAcroForm::::flattenFields()", "809": "PdfAcroForm::::flattenFields()", "810": "PdfAcroForm::::flattenFields()", "811": "PdfAcroForm::::flattenFields()", "812": "PdfAcroForm::::flattenFields()", "813": "PdfAcroForm::::flattenFields()", "814": "PdfAcroForm::::flattenFields()", "815": "PdfAcroForm::::flattenFields()", "816": "PdfAcroForm::::flattenFields()", "817": "PdfAcroForm::::flattenFields()", "818": "PdfAcroForm::::flattenFields()", "819": "PdfAcroForm::::flattenFields()", "820": "PdfAcroForm::::flattenFields()", "821": "PdfAcroForm::::flattenFields()", "822": "PdfAcroForm::::flattenFields()", "823": "PdfAcroForm::::flattenFields()", "824": "PdfAcroForm::::flattenFields()", "825": "PdfAcroForm::::flattenFields()", "826": "PdfAcroForm::::flattenFields()", "827": "PdfAcroForm::::flattenFields()", "828": "PdfAcroForm::::flattenFields()", "829": "PdfAcroForm::::flattenFields()", "830": "PdfAcroForm::::flattenFields()", "831": "PdfAcroForm::::flattenFields()", "832": "PdfAcroForm::::flattenFields()", "833": "PdfAcroForm::::flattenFields()", "834": "PdfAcroForm::::flattenFields()", "835": "PdfAcroForm::::flattenFields()", "836": "PdfAcroForm::::flattenFields()", "837": "PdfAcroForm::::flattenFields()", "838": "PdfAcroForm::::flattenFields()", "839": "PdfAcroForm::::flattenFields()", "840": "PdfAcroForm::::flattenFields()", "849": "PdfAcroForm::::removeField(java.lang.String)", "850": "PdfAcroForm::::removeField(java.lang.String)", "851": "PdfAcroForm::::removeField(java.lang.String)", "852": "PdfAcroForm::::removeField(java.lang.String)", "853": "PdfAcroForm::::removeField(java.lang.String)", "854": "PdfAcroForm::::removeField(java.lang.String)", "855": "PdfAcroForm::::removeField(java.lang.String)", "856": "PdfAcroForm::::removeField(java.lang.String)", "857": "PdfAcroForm::::removeField(java.lang.String)", "858": "PdfAcroForm::::removeField(java.lang.String)", "859": "PdfAcroForm::::removeField(java.lang.String)", "860": "PdfAcroForm::::removeField(java.lang.String)", "861": "PdfAcroForm::::removeField(java.lang.String)", "862": "PdfAcroForm::::removeField(java.lang.String)", "863": "PdfAcroForm::::removeField(java.lang.String)", "864": "PdfAcroForm::::removeField(java.lang.String)", "865": "PdfAcroForm::::removeField(java.lang.String)", "866": "PdfAcroForm::::removeField(java.lang.String)", "867": "PdfAcroForm::::removeField(java.lang.String)", "868": "PdfAcroForm::::removeField(java.lang.String)", "869": "PdfAcroForm::::removeField(java.lang.String)", "870": "PdfAcroForm::::removeField(java.lang.String)", "871": "PdfAcroForm::::removeField(java.lang.String)", "872": "PdfAcroForm::::removeField(java.lang.String)", "873": "PdfAcroForm::::removeField(java.lang.String)", "874": "PdfAcroForm::::removeField(java.lang.String)", "875": "PdfAcroForm::::removeField(java.lang.String)", "876": "PdfAcroForm::::removeField(java.lang.String)", "877": "PdfAcroForm::::removeField(java.lang.String)", "878": "PdfAcroForm::::removeField(java.lang.String)", "879": "PdfAcroForm::::removeField(java.lang.String)", "880": "PdfAcroForm::::removeField(java.lang.String)", "881": "PdfAcroForm::::removeField(java.lang.String)", "882": "PdfAcroForm::::removeField(java.lang.String)", "883": "PdfAcroForm::::removeField(java.lang.String)", "884": "PdfAcroForm::::removeField(java.lang.String)", "885": "PdfAcroForm::::removeField(java.lang.String)", "893": "PdfAcroForm::::partialFormFlattening(java.lang.String)", "894": "PdfAcroForm::::partialFormFlattening(java.lang.String)", "895": "PdfAcroForm::::partialFormFlattening(java.lang.String)", "896": "PdfAcroForm::::partialFormFlattening(java.lang.String)", "897": "PdfAcroForm::::partialFormFlattening(java.lang.String)", "898": "PdfAcroForm::::partialFormFlattening(java.lang.String)", "906": "PdfAcroForm::::renameField(java.lang.String,java.lang.String)", "907": "PdfAcroForm::::renameField(java.lang.String,java.lang.String)", "908": "PdfAcroForm::::renameField(java.lang.String,java.lang.String)", "909": "PdfAcroForm::::renameField(java.lang.String,java.lang.String)", "910": "PdfAcroForm::::renameField(java.lang.String,java.lang.String)", "911": "PdfAcroForm::::renameField(java.lang.String,java.lang.String)", "912": "PdfAcroForm::::renameField(java.lang.String,java.lang.String)", "913": "PdfAcroForm::::renameField(java.lang.String,java.lang.String)", "914": "PdfAcroForm::::renameField(java.lang.String,java.lang.String)", "915": "PdfAcroForm::::renameField(java.lang.String,java.lang.String)", "916": "PdfAcroForm::::renameField(java.lang.String,java.lang.String)", "917": "PdfAcroForm::::renameField(java.lang.String,java.lang.String)", "918": "PdfAcroForm::::renameField(java.lang.String,java.lang.String)", "919": "PdfAcroForm::::renameField(java.lang.String,java.lang.String)", "928": "PdfAcroForm::::copyField(java.lang.String)", "929": "PdfAcroForm::::copyField(java.lang.String)", "930": "PdfAcroForm::::copyField(java.lang.String)", "931": "PdfAcroForm::::copyField(java.lang.String)", "932": "PdfAcroForm::::copyField(java.lang.String)", "933": "PdfAcroForm::::copyField(java.lang.String)", "934": "PdfAcroForm::::copyField(java.lang.String)", "935": "PdfAcroForm::::copyField(java.lang.String)", "944": "PdfAcroForm::::replaceField(java.lang.String,com.itextpdf.forms.fields.PdfFormField)", "945": "PdfAcroForm::::replaceField(java.lang.String,com.itextpdf.forms.fields.PdfFormField)", "946": "PdfAcroForm::::replaceField(java.lang.String,com.itextpdf.forms.fields.PdfFormField)", "947": "PdfAcroForm::::replaceField(java.lang.String,com.itextpdf.forms.fields.PdfFormField)", "948": "PdfAcroForm::::replaceField(java.lang.String,com.itextpdf.forms.fields.PdfFormField)", "949": "PdfAcroForm::::replaceField(java.lang.String,com.itextpdf.forms.fields.PdfFormField)", "950": "PdfAcroForm::::replaceField(java.lang.String,com.itextpdf.forms.fields.PdfFormField)", "951": "PdfAcroForm::::replaceField(java.lang.String,com.itextpdf.forms.fields.PdfFormField)", "952": "PdfAcroForm::::replaceField(java.lang.String,com.itextpdf.forms.fields.PdfFormField)", "953": "PdfAcroForm::::replaceField(java.lang.String,com.itextpdf.forms.fields.PdfFormField)", "954": "PdfAcroForm::::replaceField(java.lang.String,com.itextpdf.forms.fields.PdfFormField)", "955": "PdfAcroForm::::replaceField(java.lang.String,com.itextpdf.forms.fields.PdfFormField)", "956": "PdfAcroForm::::replaceField(java.lang.String,com.itextpdf.forms.fields.PdfFormField)", "957": "PdfAcroForm::::replaceField(java.lang.String,com.itextpdf.forms.fields.PdfFormField)", "958": "PdfAcroForm::::replaceField(java.lang.String,com.itextpdf.forms.fields.PdfFormField)", "959": "PdfAcroForm::::replaceField(java.lang.String,com.itextpdf.forms.fields.PdfFormField)", "960": "PdfAcroForm::::replaceField(java.lang.String,com.itextpdf.forms.fields.PdfFormField)", "961": "PdfAcroForm::::replaceField(java.lang.String,com.itextpdf.forms.fields.PdfFormField)", "962": "PdfAcroForm::::replaceField(java.lang.String,com.itextpdf.forms.fields.PdfFormField)", "968": "PdfAcroForm::::disableRegenerationForAllFields()", "969": "PdfAcroForm::::disableRegenerationForAllFields()", "970": "PdfAcroForm::::disableRegenerationForAllFields()", "971": "PdfAcroForm::::disableRegenerationForAllFields()", "972": "PdfAcroForm::::disableRegenerationForAllFields()", "977": "PdfAcroForm::::enableRegenerationForAllFields()", "978": "PdfAcroForm::::enableRegenerationForAllFields()", "979": "PdfAcroForm::::enableRegenerationForAllFields()", "980": "PdfAcroForm::::enableRegenerationForAllFields()", "981": "PdfAcroForm::::enableRegenerationForAllFields()", "988": "PdfAcroForm::::getFields()", "989": "PdfAcroForm::::getFields()", "990": "PdfAcroForm::::getFields()", "991": "PdfAcroForm::::getFields()", "992": "PdfAcroForm::::getFields()", "993": "PdfAcroForm::::getFields()", "994": "PdfAcroForm::::getFields()", "995": "PdfAcroForm::::getFields()", "996": "PdfAcroForm::::getFields()", "998": "PdfAcroForm::::isWrappedObjectMustBeIndirect()", "999": "PdfAcroForm::::isWrappedObjectMustBeIndirect()", "1000": "PdfAcroForm::::isWrappedObjectMustBeIndirect()", "1001": "PdfAcroForm::::isWrappedObjectMustBeIndirect()", "1003": "PdfAcroForm::::populateFormFieldsMap()", "1004": "PdfAcroForm::::populateFormFieldsMap()", "1005": "PdfAcroForm::::populateFormFieldsMap()", "1006": "PdfAcroForm::::populateFormFieldsMap()", "1007": "PdfAcroForm::::populateFormFieldsMap()", "1008": "PdfAcroForm::::populateFormFieldsMap()", "1009": "PdfAcroForm::::populateFormFieldsMap()", "1010": "PdfAcroForm::::populateFormFieldsMap()", "1011": "PdfAcroForm::::populateFormFieldsMap()", "1012": "PdfAcroForm::::populateFormFieldsMap()", "1013": "PdfAcroForm::::populateFormFieldsMap()", "1014": "PdfAcroForm::::populateFormFieldsMap()", "1015": "PdfAcroForm::::populateFormFieldsMap()", "1016": "PdfAcroForm::::populateFormFieldsMap()", "1017": "PdfAcroForm::::populateFormFieldsMap()", "1018": "PdfAcroForm::::populateFormFieldsMap()", "1019": "PdfAcroForm::::populateFormFieldsMap()", "1020": "PdfAcroForm::::populateFormFieldsMap()", "1021": "PdfAcroForm::::populateFormFieldsMap()", "1022": "PdfAcroForm::::populateFormFieldsMap()", "1023": "PdfAcroForm::::populateFormFieldsMap()", "1024": "PdfAcroForm::::populateFormFieldsMap()", "1025": "PdfAcroForm::::populateFormFieldsMap()", "1026": "PdfAcroForm::::populateFormFieldsMap()", "1027": "PdfAcroForm::::populateFormFieldsMap()", "1028": "PdfAcroForm::::populateFormFieldsMap()", "1029": "PdfAcroForm::::populateFormFieldsMap()", "1030": "PdfAcroForm::::populateFormFieldsMap()", "1031": "PdfAcroForm::::populateFormFieldsMap()", "1032": "PdfAcroForm::::populateFormFieldsMap()", "1033": "PdfAcroForm::::populateFormFieldsMap()", "1034": "PdfAcroForm::::populateFormFieldsMap()", "1035": "PdfAcroForm::::populateFormFieldsMap()", "1036": "PdfAcroForm::::populateFormFieldsMap()", "1037": "PdfAcroForm::::populateFormFieldsMap()", "1038": "PdfAcroForm::::populateFormFieldsMap()", "1039": "PdfAcroForm::::populateFormFieldsMap()", "1112": "PdfAcroForm::::hasXfaForm()", "1113": "PdfAcroForm::::hasXfaForm()", "1114": "PdfAcroForm::::hasXfaForm()", "1121": "PdfAcroForm::::getXfaForm()", "1122": "PdfAcroForm::::getXfaForm()", "1123": "PdfAcroForm::::getXfaForm()", "1128": "PdfAcroForm::::removeXfaForm()", "1129": "PdfAcroForm::::removeXfaForm()", "1130": "PdfAcroForm::::removeXfaForm()", "1131": "PdfAcroForm::::removeXfaForm()", "1132": "PdfAcroForm::::removeXfaForm()", "1133": "PdfAcroForm::::removeXfaForm()", "1134": "PdfAcroForm::::removeXfaForm()", "1135": "PdfAcroForm::::removeXfaForm()", "1155": "PdfAcroForm::::release()", "1156": "PdfAcroForm::::release()", "1157": "PdfAcroForm::::release()", "1158": "PdfAcroForm::::release()", "1159": "PdfAcroForm::::release()", "1160": "PdfAcroForm::::release()", "1161": "PdfAcroForm::::release()", "1162": "PdfAcroForm::::release()", "1163": "PdfAcroForm::::release()", "1164": "PdfAcroForm::::release()", "1165": "PdfAcroForm::::release()", "1167": "PdfAcroForm::::setModified()", "1168": "PdfAcroForm::::setModified()", "1169": "PdfAcroForm::::setModified()", "1170": "PdfAcroForm::::setModified()", "1171": "PdfAcroForm::::setModified()", "1172": "PdfAcroForm::::setModified()", "1173": "PdfAcroForm::::setModified()", "1174": "PdfAcroForm::::setModified()", "1175": "PdfAcroForm::::setModified()", "1200": "PdfAcroForm::::prepareFieldsForFlattening(com.itextpdf.forms.fields.PdfFormField)", "1201": "PdfAcroForm::::prepareFieldsForFlattening(com.itextpdf.forms.fields.PdfFormField)", "1202": "PdfAcroForm::::prepareFieldsForFlattening(com.itextpdf.forms.fields.PdfFormField)", "1203": "PdfAcroForm::::prepareFieldsForFlattening(com.itextpdf.forms.fields.PdfFormField)", "1204": "PdfAcroForm::::prepareFieldsForFlattening(com.itextpdf.forms.fields.PdfFormField)", "1205": "PdfAcroForm::::prepareFieldsForFlattening(com.itextpdf.forms.fields.PdfFormField)", "1206": "PdfAcroForm::::prepareFieldsForFlattening(com.itextpdf.forms.fields.PdfFormField)", "1207": "PdfAcroForm::::prepareFieldsForFlattening(com.itextpdf.forms.fields.PdfFormField)", "1208": "PdfAcroForm::::prepareFieldsForFlattening(com.itextpdf.forms.fields.PdfFormField)", "1255": "PdfAcroForm::::getAllFormFieldsWithoutNames()", "1256": "PdfAcroForm::::getAllFormFieldsWithoutNames()", "1257": "PdfAcroForm::::getAllFormFieldsWithoutNames()", "1258": "PdfAcroForm::::getAllFormFieldsWithoutNames()", "1259": "PdfAcroForm::::getAllFormFieldsWithoutNames()", "1260": "PdfAcroForm::::getAllFormFieldsWithoutNames()", "1261": "PdfAcroForm::::getAllFormFieldsWithoutNames()", "1262": "PdfAcroForm::::getAllFormFieldsWithoutNames()", "1263": "PdfAcroForm::::getAllFormFieldsWithoutNames()", "1264": "PdfAcroForm::::getAllFormFieldsWithoutNames()", "1265": "PdfAcroForm::::getAllFormFieldsWithoutNames()", "1266": "PdfAcroForm::::getAllFormFieldsWithoutNames()", "1268": "PdfAcroForm::::needToAddToAcroform(com.itextpdf.forms.fields.PdfFormField,boolean)", "1269": "PdfAcroForm::::needToAddToAcroform(com.itextpdf.forms.fields.PdfFormField,boolean)", "1270": "PdfAcroForm::::needToAddToAcroform(com.itextpdf.forms.fields.PdfFormField,boolean)", "1271": "PdfAcroForm::::needToAddToAcroform(com.itextpdf.forms.fields.PdfFormField,boolean)", "1272": "PdfAcroForm::::needToAddToAcroform(com.itextpdf.forms.fields.PdfFormField,boolean)", "1273": "PdfAcroForm::::needToAddToAcroform(com.itextpdf.forms.fields.PdfFormField,boolean)", "1274": "PdfAcroForm::::needToAddToAcroform(com.itextpdf.forms.fields.PdfFormField,boolean)", "1275": "PdfAcroForm::::needToAddToAcroform(com.itextpdf.forms.fields.PdfFormField,boolean)", "1276": "PdfAcroForm::::needToAddToAcroform(com.itextpdf.forms.fields.PdfFormField,boolean)", "1277": "PdfAcroForm::::needToAddToAcroform(com.itextpdf.forms.fields.PdfFormField,boolean)", "1278": "PdfAcroForm::::needToAddToAcroform(com.itextpdf.forms.fields.PdfFormField,boolean)", "1279": "PdfAcroForm::::needToAddToAcroform(com.itextpdf.forms.fields.PdfFormField,boolean)"}, "test_reverse_method_lines_dic": {"64": "PdfAcroFormTest::::setSignatureFlagsTest()", "65": "PdfAcroFormTest::::setSignatureFlagsTest()", "66": "PdfAcroFormTest::::setSignatureFlagsTest()", "67": "PdfAcroFormTest::::setSignatureFlagsTest()", "68": "PdfAcroFormTest::::setSignatureFlagsTest()", "69": "PdfAcroFormTest::::setSignatureFlagsTest()", "70": "PdfAcroFormTest::::setSignatureFlagsTest()", "71": "PdfAcroFormTest::::setSignatureFlagsTest()", "72": "PdfAcroFormTest::::setSignatureFlagsTest()", "73": "PdfAcroFormTest::::setSignatureFlagsTest()", "74": "PdfAcroFormTest::::setSignatureFlagsTest()", "75": "PdfAcroFormTest::::setSignatureFlagsTest()", "76": "PdfAcroFormTest::::setSignatureFlagsTest()", "77": "PdfAcroFormTest::::setSignatureFlagsTest()", "78": "PdfAcroFormTest::::setSignatureFlagsTest()", "79": "PdfAcroFormTest::::setSignatureFlagsTest()", "81": "PdfAcroFormTest::::addChildToFormFieldTest()", "82": "PdfAcroFormTest::::addChildToFormFieldTest()", "83": "PdfAcroFormTest::::addChildToFormFieldTest()", "84": "PdfAcroFormTest::::addChildToFormFieldTest()", "85": "PdfAcroFormTest::::addChildToFormFieldTest()", "86": "PdfAcroFormTest::::addChildToFormFieldTest()", "87": "PdfAcroFormTest::::addChildToFormFieldTest()", "88": "PdfAcroFormTest::::addChildToFormFieldTest()", "89": "PdfAcroFormTest::::addChildToFormFieldTest()", "90": "PdfAcroFormTest::::addChildToFormFieldTest()", "91": "PdfAcroFormTest::::addChildToFormFieldTest()", "92": "PdfAcroFormTest::::addChildToFormFieldTest()", "93": "PdfAcroFormTest::::addChildToFormFieldTest()", "94": "PdfAcroFormTest::::addChildToFormFieldTest()", "95": "PdfAcroFormTest::::addChildToFormFieldTest()", "96": "PdfAcroFormTest::::addChildToFormFieldTest()", "97": "PdfAcroFormTest::::addChildToFormFieldTest()", "98": "PdfAcroFormTest::::addChildToFormFieldTest()", "100": "PdfAcroFormTest::::addChildToWidgetTest()", "101": "PdfAcroFormTest::::addChildToWidgetTest()", "102": "PdfAcroFormTest::::addChildToWidgetTest()", "103": "PdfAcroFormTest::::addChildToWidgetTest()", "104": "PdfAcroFormTest::::addChildToWidgetTest()", "105": "PdfAcroFormTest::::addChildToWidgetTest()", "106": "PdfAcroFormTest::::addChildToWidgetTest()", "107": "PdfAcroFormTest::::addChildToWidgetTest()", "108": "PdfAcroFormTest::::addChildToWidgetTest()", "109": "PdfAcroFormTest::::addChildToWidgetTest()", "110": "PdfAcroFormTest::::addChildToWidgetTest()", "111": "PdfAcroFormTest::::addChildToWidgetTest()", "112": "PdfAcroFormTest::::addChildToWidgetTest()", "113": "PdfAcroFormTest::::addChildToWidgetTest()", "114": "PdfAcroFormTest::::addChildToWidgetTest()", "115": "PdfAcroFormTest::::addChildToWidgetTest()", "116": "PdfAcroFormTest::::addChildToWidgetTest()", "117": "PdfAcroFormTest::::addChildToWidgetTest()", "119": "PdfAcroFormTest::::getFormFieldChildTest()", "120": "PdfAcroFormTest::::getFormFieldChildTest()", "121": "PdfAcroFormTest::::getFormFieldChildTest()", "122": "PdfAcroFormTest::::getFormFieldChildTest()", "123": "PdfAcroFormTest::::getFormFieldChildTest()", "124": "PdfAcroFormTest::::getFormFieldChildTest()", "125": "PdfAcroFormTest::::getFormFieldChildTest()", "126": "PdfAcroFormTest::::getFormFieldChildTest()", "127": "PdfAcroFormTest::::getFormFieldChildTest()", "128": "PdfAcroFormTest::::getFormFieldChildTest()", "129": "PdfAcroFormTest::::getFormFieldChildTest()", "130": "PdfAcroFormTest::::getFormFieldChildTest()", "131": "PdfAcroFormTest::::getFormFieldChildTest()", "132": "PdfAcroFormTest::::getFormFieldChildTest()", "133": "PdfAcroFormTest::::getFormFieldChildTest()", "134": "PdfAcroFormTest::::getFormFieldChildTest()", "135": "PdfAcroFormTest::::getFormFieldChildTest()", "136": "PdfAcroFormTest::::getFormFieldChildTest()", "138": "PdfAcroFormTest::::getFormFieldWithEqualChildNamesTest()", "139": "PdfAcroFormTest::::getFormFieldWithEqualChildNamesTest()", "140": "PdfAcroFormTest::::getFormFieldWithEqualChildNamesTest()", "141": "PdfAcroFormTest::::getFormFieldWithEqualChildNamesTest()", "142": "PdfAcroFormTest::::getFormFieldWithEqualChildNamesTest()", "143": "PdfAcroFormTest::::getFormFieldWithEqualChildNamesTest()", "144": "PdfAcroFormTest::::getFormFieldWithEqualChildNamesTest()", "145": "PdfAcroFormTest::::getFormFieldWithEqualChildNamesTest()", "146": "PdfAcroFormTest::::getFormFieldWithEqualChildNamesTest()", "147": "PdfAcroFormTest::::getFormFieldWithEqualChildNamesTest()", "148": "PdfAcroFormTest::::getFormFieldWithEqualChildNamesTest()", "149": "PdfAcroFormTest::::getFormFieldWithEqualChildNamesTest()", "150": "PdfAcroFormTest::::getFormFieldWithEqualChildNamesTest()", "151": "PdfAcroFormTest::::getFormFieldWithEqualChildNamesTest()", "152": "PdfAcroFormTest::::getFormFieldWithEqualChildNamesTest()", "153": "PdfAcroFormTest::::getFormFieldWithEqualChildNamesTest()", "154": "PdfAcroFormTest::::getFormFieldWithEqualChildNamesTest()", "155": "PdfAcroFormTest::::getFormFieldWithEqualChildNamesTest()", "156": "PdfAcroFormTest::::getFormFieldWithEqualChildNamesTest()", "157": "PdfAcroFormTest::::getFormFieldWithEqualChildNamesTest()", "158": "PdfAcroFormTest::::getFormFieldWithEqualChildNamesTest()", "159": "PdfAcroFormTest::::getFormFieldWithEqualChildNamesTest()", "160": "PdfAcroFormTest::::getFormFieldWithEqualChildNamesTest()", "161": "PdfAcroFormTest::::getFormFieldWithEqualChildNamesTest()", "163": "PdfAcroFormTest::::changeFieldNameTest()", "164": "PdfAcroFormTest::::changeFieldNameTest()", "165": "PdfAcroFormTest::::changeFieldNameTest()", "166": "PdfAcroFormTest::::changeFieldNameTest()", "167": "PdfAcroFormTest::::changeFieldNameTest()", "168": "PdfAcroFormTest::::changeFieldNameTest()", "169": "PdfAcroFormTest::::changeFieldNameTest()", "170": "PdfAcroFormTest::::changeFieldNameTest()", "171": "PdfAcroFormTest::::changeFieldNameTest()", "172": "PdfAcroFormTest::::changeFieldNameTest()", "173": "PdfAcroFormTest::::changeFieldNameTest()", "174": "PdfAcroFormTest::::changeFieldNameTest()", "175": "PdfAcroFormTest::::changeFieldNameTest()", "176": "PdfAcroFormTest::::changeFieldNameTest()", "177": "PdfAcroFormTest::::changeFieldNameTest()", "178": "PdfAcroFormTest::::changeFieldNameTest()", "179": "PdfAcroFormTest::::changeFieldNameTest()", "180": "PdfAcroFormTest::::changeFieldNameTest()", "181": "PdfAcroFormTest::::changeFieldNameTest()", "183": "PdfAcroFormTest::::removeChildFromFormFieldTest()", "184": "PdfAcroFormTest::::removeChildFromFormFieldTest()", "185": "PdfAcroFormTest::::removeChildFromFormFieldTest()", "186": "PdfAcroFormTest::::removeChildFromFormFieldTest()", "187": "PdfAcroFormTest::::removeChildFromFormFieldTest()", "188": "PdfAcroFormTest::::removeChildFromFormFieldTest()", "189": "PdfAcroFormTest::::removeChildFromFormFieldTest()", "190": "PdfAcroFormTest::::removeChildFromFormFieldTest()", "191": "PdfAcroFormTest::::removeChildFromFormFieldTest()", "192": "PdfAcroFormTest::::removeChildFromFormFieldTest()", "193": "PdfAcroFormTest::::removeChildFromFormFieldTest()", "194": "PdfAcroFormTest::::removeChildFromFormFieldTest()", "195": "PdfAcroFormTest::::removeChildFromFormFieldTest()", "196": "PdfAcroFormTest::::removeChildFromFormFieldTest()", "197": "PdfAcroFormTest::::removeChildFromFormFieldTest()", "198": "PdfAcroFormTest::::removeChildFromFormFieldTest()", "199": "PdfAcroFormTest::::removeChildFromFormFieldTest()", "200": "PdfAcroFormTest::::removeChildFromFormFieldTest()", "201": "PdfAcroFormTest::::removeChildFromFormFieldTest()", "202": "PdfAcroFormTest::::removeChildFromFormFieldTest()", "203": "PdfAcroFormTest::::removeChildFromFormFieldTest()", "204": "PdfAcroFormTest::::removeChildFromFormFieldTest()", "205": "PdfAcroFormTest::::removeChildFromFormFieldTest()", "206": "PdfAcroFormTest::::removeChildFromFormFieldTest()", "207": "PdfAcroFormTest::::removeChildFromFormFieldTest()", "208": "PdfAcroFormTest::::removeChildFromFormFieldTest()", "210": "PdfAcroFormTest::::getChildFromFormFieldWithDifferentAmountOfChildrenTest()", "211": "PdfAcroFormTest::::getChildFromFormFieldWithDifferentAmountOfChildrenTest()", "212": "PdfAcroFormTest::::getChildFromFormFieldWithDifferentAmountOfChildrenTest()", "213": "PdfAcroFormTest::::getChildFromFormFieldWithDifferentAmountOfChildrenTest()", "214": "PdfAcroFormTest::::getChildFromFormFieldWithDifferentAmountOfChildrenTest()", "215": "PdfAcroFormTest::::getChildFromFormFieldWithDifferentAmountOfChildrenTest()", "216": "PdfAcroFormTest::::getChildFromFormFieldWithDifferentAmountOfChildrenTest()", "217": "PdfAcroFormTest::::getChildFromFormFieldWithDifferentAmountOfChildrenTest()", "218": "PdfAcroFormTest::::getChildFromFormFieldWithDifferentAmountOfChildrenTest()", "219": "PdfAcroFormTest::::getChildFromFormFieldWithDifferentAmountOfChildrenTest()", "220": "PdfAcroFormTest::::getChildFromFormFieldWithDifferentAmountOfChildrenTest()", "221": "PdfAcroFormTest::::getChildFromFormFieldWithDifferentAmountOfChildrenTest()", "222": "PdfAcroFormTest::::getChildFromFormFieldWithDifferentAmountOfChildrenTest()", "223": "PdfAcroFormTest::::getChildFromFormFieldWithDifferentAmountOfChildrenTest()", "224": "PdfAcroFormTest::::getChildFromFormFieldWithDifferentAmountOfChildrenTest()", "225": "PdfAcroFormTest::::getChildFromFormFieldWithDifferentAmountOfChildrenTest()", "226": "PdfAcroFormTest::::getChildFromFormFieldWithDifferentAmountOfChildrenTest()", "227": "PdfAcroFormTest::::getChildFromFormFieldWithDifferentAmountOfChildrenTest()", "228": "PdfAcroFormTest::::getChildFromFormFieldWithDifferentAmountOfChildrenTest()", "229": "PdfAcroFormTest::::getChildFromFormFieldWithDifferentAmountOfChildrenTest()", "230": "PdfAcroFormTest::::getChildFromFormFieldWithDifferentAmountOfChildrenTest()", "231": "PdfAcroFormTest::::getChildFromFormFieldWithDifferentAmountOfChildrenTest()", "232": "PdfAcroFormTest::::getChildFromFormFieldWithDifferentAmountOfChildrenTest()", "233": "PdfAcroFormTest::::getChildFromFormFieldWithDifferentAmountOfChildrenTest()", "234": "PdfAcroFormTest::::getChildFromFormFieldWithDifferentAmountOfChildrenTest()", "235": "PdfAcroFormTest::::getChildFromFormFieldWithDifferentAmountOfChildrenTest()", "236": "PdfAcroFormTest::::getChildFromFormFieldWithDifferentAmountOfChildrenTest()", "237": "PdfAcroFormTest::::getChildFromFormFieldWithDifferentAmountOfChildrenTest()", "238": "PdfAcroFormTest::::getChildFromFormFieldWithDifferentAmountOfChildrenTest()", "239": "PdfAcroFormTest::::getChildFromFormFieldWithDifferentAmountOfChildrenTest()", "240": "PdfAcroFormTest::::getChildFromFormFieldWithDifferentAmountOfChildrenTest()", "241": "PdfAcroFormTest::::getChildFromFormFieldWithDifferentAmountOfChildrenTest()", "242": "PdfAcroFormTest::::getChildFromFormFieldWithDifferentAmountOfChildrenTest()", "243": "PdfAcroFormTest::::getChildFromFormFieldWithDifferentAmountOfChildrenTest()", "244": "PdfAcroFormTest::::getChildFromFormFieldWithDifferentAmountOfChildrenTest()", "245": "PdfAcroFormTest::::getChildFromFormFieldWithDifferentAmountOfChildrenTest()", "246": "PdfAcroFormTest::::getChildFromFormFieldWithDifferentAmountOfChildrenTest()", "248": "PdfAcroFormTest::::checkFormFieldsSizeTest()", "249": "PdfAcroFormTest::::checkFormFieldsSizeTest()", "250": "PdfAcroFormTest::::checkFormFieldsSizeTest()", "251": "PdfAcroFormTest::::checkFormFieldsSizeTest()", "252": "PdfAcroFormTest::::checkFormFieldsSizeTest()", "253": "PdfAcroFormTest::::checkFormFieldsSizeTest()", "254": "PdfAcroFormTest::::checkFormFieldsSizeTest()", "255": "PdfAcroFormTest::::checkFormFieldsSizeTest()", "256": "PdfAcroFormTest::::checkFormFieldsSizeTest()", "257": "PdfAcroFormTest::::checkFormFieldsSizeTest()", "258": "PdfAcroFormTest::::checkFormFieldsSizeTest()", "259": "PdfAcroFormTest::::checkFormFieldsSizeTest()", "260": "PdfAcroFormTest::::checkFormFieldsSizeTest()", "261": "PdfAcroFormTest::::checkFormFieldsSizeTest()", "262": "PdfAcroFormTest::::checkFormFieldsSizeTest()", "263": "PdfAcroFormTest::::checkFormFieldsSizeTest()", "264": "PdfAcroFormTest::::checkFormFieldsSizeTest()", "265": "PdfAcroFormTest::::checkFormFieldsSizeTest()", "266": "PdfAcroFormTest::::checkFormFieldsSizeTest()", "267": "PdfAcroFormTest::::checkFormFieldsSizeTest()", "268": "PdfAcroFormTest::::checkFormFieldsSizeTest()", "269": "PdfAcroFormTest::::checkFormFieldsSizeTest()", "270": "PdfAcroFormTest::::checkFormFieldsSizeTest()", "272": "PdfAcroFormTest::::fieldKidsWithTheSameNamesTest()", "273": "PdfAcroFormTest::::fieldKidsWithTheSameNamesTest()", "274": "PdfAcroFormTest::::fieldKidsWithTheSameNamesTest()", "275": "PdfAcroFormTest::::fieldKidsWithTheSameNamesTest()", "276": "PdfAcroFormTest::::fieldKidsWithTheSameNamesTest()", "277": "PdfAcroFormTest::::fieldKidsWithTheSameNamesTest()", "278": "PdfAcroFormTest::::fieldKidsWithTheSameNamesTest()", "279": "PdfAcroFormTest::::fieldKidsWithTheSameNamesTest()", "280": "PdfAcroFormTest::::fieldKidsWithTheSameNamesTest()", "281": "PdfAcroFormTest::::fieldKidsWithTheSameNamesTest()", "282": "PdfAcroFormTest::::fieldKidsWithTheSameNamesTest()", "283": "PdfAcroFormTest::::fieldKidsWithTheSameNamesTest()", "284": "PdfAcroFormTest::::fieldKidsWithTheSameNamesTest()", "285": "PdfAcroFormTest::::fieldKidsWithTheSameNamesTest()", "286": "PdfAcroFormTest::::fieldKidsWithTheSameNamesTest()", "287": "PdfAcroFormTest::::fieldKidsWithTheSameNamesTest()", "288": "PdfAcroFormTest::::fieldKidsWithTheSameNamesTest()", "289": "PdfAcroFormTest::::fieldKidsWithTheSameNamesTest()", "290": "PdfAcroFormTest::::fieldKidsWithTheSameNamesTest()", "291": "PdfAcroFormTest::::fieldKidsWithTheSameNamesTest()", "292": "PdfAcroFormTest::::fieldKidsWithTheSameNamesTest()", "293": "PdfAcroFormTest::::fieldKidsWithTheSameNamesTest()", "294": "PdfAcroFormTest::::fieldKidsWithTheSameNamesTest()", "295": "PdfAcroFormTest::::fieldKidsWithTheSameNamesTest()", "296": "PdfAcroFormTest::::fieldKidsWithTheSameNamesTest()", "297": "PdfAcroFormTest::::fieldKidsWithTheSameNamesTest()", "298": "PdfAcroFormTest::::fieldKidsWithTheSameNamesTest()", "299": "PdfAcroFormTest::::fieldKidsWithTheSameNamesTest()", "300": "PdfAcroFormTest::::fieldKidsWithTheSameNamesTest()", "301": "PdfAcroFormTest::::fieldKidsWithTheSameNamesTest()", "302": "PdfAcroFormTest::::fieldKidsWithTheSameNamesTest()", "303": "PdfAcroFormTest::::fieldKidsWithTheSameNamesTest()", "304": "PdfAcroFormTest::::fieldKidsWithTheSameNamesTest()", "305": "PdfAcroFormTest::::fieldKidsWithTheSameNamesTest()", "307": "PdfAcroFormTest::::namelessFieldTest()", "308": "PdfAcroFormTest::::namelessFieldTest()", "309": "PdfAcroFormTest::::namelessFieldTest()", "310": "PdfAcroFormTest::::namelessFieldTest()", "311": "PdfAcroFormTest::::namelessFieldTest()", "312": "PdfAcroFormTest::::namelessFieldTest()", "313": "PdfAcroFormTest::::namelessFieldTest()", "314": "PdfAcroFormTest::::namelessFieldTest()", "315": "PdfAcroFormTest::::namelessFieldTest()", "316": "PdfAcroFormTest::::namelessFieldTest()", "317": "PdfAcroFormTest::::namelessFieldTest()", "318": "PdfAcroFormTest::::namelessFieldTest()", "319": "PdfAcroFormTest::::namelessFieldTest()", "320": "PdfAcroFormTest::::namelessFieldTest()", "321": "PdfAcroFormTest::::namelessFieldTest()", "322": "PdfAcroFormTest::::namelessFieldTest()", "323": "PdfAcroFormTest::::namelessFieldTest()", "324": "PdfAcroFormTest::::namelessFieldTest()", "325": "PdfAcroFormTest::::namelessFieldTest()", "326": "PdfAcroFormTest::::namelessFieldTest()", "327": "PdfAcroFormTest::::namelessFieldTest()", "328": "PdfAcroFormTest::::namelessFieldTest()", "330": "PdfAcroFormTest::::addRootFieldsWithTheSameNamesTest()", "331": "PdfAcroFormTest::::addRootFieldsWithTheSameNamesTest()", "332": "PdfAcroFormTest::::addRootFieldsWithTheSameNamesTest()", "333": "PdfAcroFormTest::::addRootFieldsWithTheSameNamesTest()", "334": "PdfAcroFormTest::::addRootFieldsWithTheSameNamesTest()", "335": "PdfAcroFormTest::::addRootFieldsWithTheSameNamesTest()", "336": "PdfAcroFormTest::::addRootFieldsWithTheSameNamesTest()", "337": "PdfAcroFormTest::::addRootFieldsWithTheSameNamesTest()", "338": "PdfAcroFormTest::::addRootFieldsWithTheSameNamesTest()", "339": "PdfAcroFormTest::::addRootFieldsWithTheSameNamesTest()", "340": "PdfAcroFormTest::::addRootFieldsWithTheSameNamesTest()", "341": "PdfAcroFormTest::::addRootFieldsWithTheSameNamesTest()", "342": "PdfAcroFormTest::::addRootFieldsWithTheSameNamesTest()", "343": "PdfAcroFormTest::::addRootFieldsWithTheSameNamesTest()", "344": "PdfAcroFormTest::::addRootFieldsWithTheSameNamesTest()", "345": "PdfAcroFormTest::::addRootFieldsWithTheSameNamesTest()", "346": "PdfAcroFormTest::::addRootFieldsWithTheSameNamesTest()", "347": "PdfAcroFormTest::::addRootFieldsWithTheSameNamesTest()", "348": "PdfAcroFormTest::::addRootFieldsWithTheSameNamesTest()", "349": "PdfAcroFormTest::::addRootFieldsWithTheSameNamesTest()", "350": "PdfAcroFormTest::::addRootFieldsWithTheSameNamesTest()", "351": "PdfAcroFormTest::::addRootFieldsWithTheSameNamesTest()", "352": "PdfAcroFormTest::::addRootFieldsWithTheSameNamesTest()", "353": "PdfAcroFormTest::::addRootFieldsWithTheSameNamesTest()", "354": "PdfAcroFormTest::::addRootFieldsWithTheSameNamesTest()", "356": "PdfAcroFormTest::::addMergedRootFieldsWithTheSameNamesTest()", "357": "PdfAcroFormTest::::addMergedRootFieldsWithTheSameNamesTest()", "358": "PdfAcroFormTest::::addMergedRootFieldsWithTheSameNamesTest()", "359": "PdfAcroFormTest::::addMergedRootFieldsWithTheSameNamesTest()", "360": "PdfAcroFormTest::::addMergedRootFieldsWithTheSameNamesTest()", "361": "PdfAcroFormTest::::addMergedRootFieldsWithTheSameNamesTest()", "362": "PdfAcroFormTest::::addMergedRootFieldsWithTheSameNamesTest()", "363": "PdfAcroFormTest::::addMergedRootFieldsWithTheSameNamesTest()", "364": "PdfAcroFormTest::::addMergedRootFieldsWithTheSameNamesTest()", "365": "PdfAcroFormTest::::addMergedRootFieldsWithTheSameNamesTest()", "366": "PdfAcroFormTest::::addMergedRootFieldsWithTheSameNamesTest()", "367": "PdfAcroFormTest::::addMergedRootFieldsWithTheSameNamesTest()", "368": "PdfAcroFormTest::::addMergedRootFieldsWithTheSameNamesTest()", "369": "PdfAcroFormTest::::addMergedRootFieldsWithTheSameNamesTest()", "370": "PdfAcroFormTest::::addMergedRootFieldsWithTheSameNamesTest()", "371": "PdfAcroFormTest::::addMergedRootFieldsWithTheSameNamesTest()", "372": "PdfAcroFormTest::::addMergedRootFieldsWithTheSameNamesTest()", "373": "PdfAcroFormTest::::addMergedRootFieldsWithTheSameNamesTest()", "374": "PdfAcroFormTest::::addMergedRootFieldsWithTheSameNamesTest()", "375": "PdfAcroFormTest::::addMergedRootFieldsWithTheSameNamesTest()", "376": "PdfAcroFormTest::::addMergedRootFieldsWithTheSameNamesTest()", "378": "PdfAcroFormTest::::addFieldsWithTheSameNamesButDifferentValuesTest()", "379": "PdfAcroFormTest::::addFieldsWithTheSameNamesButDifferentValuesTest()", "380": "PdfAcroFormTest::::addFieldsWithTheSameNamesButDifferentValuesTest()", "381": "PdfAcroFormTest::::addFieldsWithTheSameNamesButDifferentValuesTest()", "382": "PdfAcroFormTest::::addFieldsWithTheSameNamesButDifferentValuesTest()", "383": "PdfAcroFormTest::::addFieldsWithTheSameNamesButDifferentValuesTest()", "384": "PdfAcroFormTest::::addFieldsWithTheSameNamesButDifferentValuesTest()", "385": "PdfAcroFormTest::::addFieldsWithTheSameNamesButDifferentValuesTest()", "386": "PdfAcroFormTest::::addFieldsWithTheSameNamesButDifferentValuesTest()", "387": "PdfAcroFormTest::::addFieldsWithTheSameNamesButDifferentValuesTest()", "388": "PdfAcroFormTest::::addFieldsWithTheSameNamesButDifferentValuesTest()", "389": "PdfAcroFormTest::::addFieldsWithTheSameNamesButDifferentValuesTest()", "390": "PdfAcroFormTest::::addFieldsWithTheSameNamesButDifferentValuesTest()", "391": "PdfAcroFormTest::::addFieldsWithTheSameNamesButDifferentValuesTest()", "392": "PdfAcroFormTest::::addFieldsWithTheSameNamesButDifferentValuesTest()", "393": "PdfAcroFormTest::::addFieldsWithTheSameNamesButDifferentValuesTest()", "394": "PdfAcroFormTest::::addFieldsWithTheSameNamesButDifferentValuesTest()", "395": "PdfAcroFormTest::::addFieldsWithTheSameNamesButDifferentValuesTest()", "397": "PdfAcroFormTest::::addRootFieldWithMergedFieldKidTest()", "398": "PdfAcroFormTest::::addRootFieldWithMergedFieldKidTest()", "399": "PdfAcroFormTest::::addRootFieldWithMergedFieldKidTest()", "400": "PdfAcroFormTest::::addRootFieldWithMergedFieldKidTest()", "401": "PdfAcroFormTest::::addRootFieldWithMergedFieldKidTest()", "402": "PdfAcroFormTest::::addRootFieldWithMergedFieldKidTest()", "403": "PdfAcroFormTest::::addRootFieldWithMergedFieldKidTest()", "404": "PdfAcroFormTest::::addRootFieldWithMergedFieldKidTest()", "405": "PdfAcroFormTest::::addRootFieldWithMergedFieldKidTest()", "406": "PdfAcroFormTest::::addRootFieldWithMergedFieldKidTest()", "407": "PdfAcroFormTest::::addRootFieldWithMergedFieldKidTest()", "408": "PdfAcroFormTest::::addRootFieldWithMergedFieldKidTest()", "409": "PdfAcroFormTest::::addRootFieldWithMergedFieldKidTest()", "410": "PdfAcroFormTest::::addRootFieldWithMergedFieldKidTest()", "411": "PdfAcroFormTest::::addRootFieldWithMergedFieldKidTest()", "412": "PdfAcroFormTest::::addRootFieldWithMergedFieldKidTest()", "413": "PdfAcroFormTest::::addRootFieldWithMergedFieldKidTest()", "414": "PdfAcroFormTest::::addRootFieldWithMergedFieldKidTest()", "415": "PdfAcroFormTest::::addRootFieldWithMergedFieldKidTest()", "416": "PdfAcroFormTest::::addRootFieldWithMergedFieldKidTest()", "417": "PdfAcroFormTest::::addRootFieldWithMergedFieldKidTest()", "418": "PdfAcroFormTest::::addRootFieldWithMergedFieldKidTest()", "419": "PdfAcroFormTest::::addRootFieldWithMergedFieldKidTest()", "420": "PdfAcroFormTest::::addRootFieldWithMergedFieldKidTest()", "422": "PdfAcroFormTest::::addRootFieldWithDirtyNamedAnnotationsTest()", "423": "PdfAcroFormTest::::addRootFieldWithDirtyNamedAnnotationsTest()", "424": "PdfAcroFormTest::::addRootFieldWithDirtyNamedAnnotationsTest()", "425": "PdfAcroFormTest::::addRootFieldWithDirtyNamedAnnotationsTest()", "426": "PdfAcroFormTest::::addRootFieldWithDirtyNamedAnnotationsTest()", "427": "PdfAcroFormTest::::addRootFieldWithDirtyNamedAnnotationsTest()", "428": "PdfAcroFormTest::::addRootFieldWithDirtyNamedAnnotationsTest()", "429": "PdfAcroFormTest::::addRootFieldWithDirtyNamedAnnotationsTest()", "430": "PdfAcroFormTest::::addRootFieldWithDirtyNamedAnnotationsTest()", "431": "PdfAcroFormTest::::addRootFieldWithDirtyNamedAnnotationsTest()", "432": "PdfAcroFormTest::::addRootFieldWithDirtyNamedAnnotationsTest()", "433": "PdfAcroFormTest::::addRootFieldWithDirtyNamedAnnotationsTest()", "434": "PdfAcroFormTest::::addRootFieldWithDirtyNamedAnnotationsTest()", "435": "PdfAcroFormTest::::addRootFieldWithDirtyNamedAnnotationsTest()", "436": "PdfAcroFormTest::::addRootFieldWithDirtyNamedAnnotationsTest()", "437": "PdfAcroFormTest::::addRootFieldWithDirtyNamedAnnotationsTest()", "438": "PdfAcroFormTest::::addRootFieldWithDirtyNamedAnnotationsTest()", "439": "PdfAcroFormTest::::addRootFieldWithDirtyNamedAnnotationsTest()", "440": "PdfAcroFormTest::::addRootFieldWithDirtyNamedAnnotationsTest()", "441": "PdfAcroFormTest::::addRootFieldWithDirtyNamedAnnotationsTest()", "442": "PdfAcroFormTest::::addRootFieldWithDirtyNamedAnnotationsTest()", "443": "PdfAcroFormTest::::addRootFieldWithDirtyNamedAnnotationsTest()", "444": "PdfAcroFormTest::::addRootFieldWithDirtyNamedAnnotationsTest()", "445": "PdfAcroFormTest::::addRootFieldWithDirtyNamedAnnotationsTest()", "446": "PdfAcroFormTest::::addRootFieldWithDirtyNamedAnnotationsTest()", "447": "PdfAcroFormTest::::addRootFieldWithDirtyNamedAnnotationsTest()", "448": "PdfAcroFormTest::::addRootFieldWithDirtyNamedAnnotationsTest()", "449": "PdfAcroFormTest::::addRootFieldWithDirtyNamedAnnotationsTest()", "450": "PdfAcroFormTest::::addRootFieldWithDirtyNamedAnnotationsTest()", "451": "PdfAcroFormTest::::addRootFieldWithDirtyNamedAnnotationsTest()", "452": "PdfAcroFormTest::::addRootFieldWithDirtyNamedAnnotationsTest()", "453": "PdfAcroFormTest::::addRootFieldWithDirtyNamedAnnotationsTest()", "454": "PdfAcroFormTest::::addRootFieldWithDirtyNamedAnnotationsTest()", "456": "PdfAcroFormTest::::addRootFieldWithDirtyUnnamedAnnotationsTest()", "457": "PdfAcroFormTest::::addRootFieldWithDirtyUnnamedAnnotationsTest()", "458": "PdfAcroFormTest::::addRootFieldWithDirtyUnnamedAnnotationsTest()", "459": "PdfAcroFormTest::::addRootFieldWithDirtyUnnamedAnnotationsTest()", "460": "PdfAcroFormTest::::addRootFieldWithDirtyUnnamedAnnotationsTest()", "461": "PdfAcroFormTest::::addRootFieldWithDirtyUnnamedAnnotationsTest()", "462": "PdfAcroFormTest::::addRootFieldWithDirtyUnnamedAnnotationsTest()", "463": "PdfAcroFormTest::::addRootFieldWithDirtyUnnamedAnnotationsTest()", "464": "PdfAcroFormTest::::addRootFieldWithDirtyUnnamedAnnotationsTest()", "465": "PdfAcroFormTest::::addRootFieldWithDirtyUnnamedAnnotationsTest()", "466": "PdfAcroFormTest::::addRootFieldWithDirtyUnnamedAnnotationsTest()", "467": "PdfAcroFormTest::::addRootFieldWithDirtyUnnamedAnnotationsTest()", "468": "PdfAcroFormTest::::addRootFieldWithDirtyUnnamedAnnotationsTest()", "469": "PdfAcroFormTest::::addRootFieldWithDirtyUnnamedAnnotationsTest()", "470": "PdfAcroFormTest::::addRootFieldWithDirtyUnnamedAnnotationsTest()", "471": "PdfAcroFormTest::::addRootFieldWithDirtyUnnamedAnnotationsTest()", "472": "PdfAcroFormTest::::addRootFieldWithDirtyUnnamedAnnotationsTest()", "473": "PdfAcroFormTest::::addRootFieldWithDirtyUnnamedAnnotationsTest()", "474": "PdfAcroFormTest::::addRootFieldWithDirtyUnnamedAnnotationsTest()", "475": "PdfAcroFormTest::::addRootFieldWithDirtyUnnamedAnnotationsTest()", "476": "PdfAcroFormTest::::addRootFieldWithDirtyUnnamedAnnotationsTest()", "477": "PdfAcroFormTest::::addRootFieldWithDirtyUnnamedAnnotationsTest()", "478": "PdfAcroFormTest::::addRootFieldWithDirtyUnnamedAnnotationsTest()", "479": "PdfAcroFormTest::::addRootFieldWithDirtyUnnamedAnnotationsTest()", "480": "PdfAcroFormTest::::addRootFieldWithDirtyUnnamedAnnotationsTest()", "481": "PdfAcroFormTest::::addRootFieldWithDirtyUnnamedAnnotationsTest()", "482": "PdfAcroFormTest::::addRootFieldWithDirtyUnnamedAnnotationsTest()", "483": "PdfAcroFormTest::::addRootFieldWithDirtyUnnamedAnnotationsTest()", "484": "PdfAcroFormTest::::addRootFieldWithDirtyUnnamedAnnotationsTest()", "485": "PdfAcroFormTest::::addRootFieldWithDirtyUnnamedAnnotationsTest()", "486": "PdfAcroFormTest::::addRootFieldWithDirtyUnnamedAnnotationsTest()", "487": "PdfAcroFormTest::::addRootFieldWithDirtyUnnamedAnnotationsTest()", "488": "PdfAcroFormTest::::addRootFieldWithDirtyUnnamedAnnotationsTest()", "489": "PdfAcroFormTest::::addRootFieldWithDirtyUnnamedAnnotationsTest()", "490": "PdfAcroFormTest::::addRootFieldWithDirtyUnnamedAnnotationsTest()", "491": "PdfAcroFormTest::::addRootFieldWithDirtyUnnamedAnnotationsTest()", "492": "PdfAcroFormTest::::addRootFieldWithDirtyUnnamedAnnotationsTest()", "493": "PdfAcroFormTest::::addRootFieldWithDirtyUnnamedAnnotationsTest()", "494": "PdfAcroFormTest::::addRootFieldWithDirtyUnnamedAnnotationsTest()", "496": "PdfAcroFormTest::::mergeFieldsWhenKidsWasFlushedTest()", "497": "PdfAcroFormTest::::mergeFieldsWhenKidsWasFlushedTest()", "498": "PdfAcroFormTest::::mergeFieldsWhenKidsWasFlushedTest()", "499": "PdfAcroFormTest::::mergeFieldsWhenKidsWasFlushedTest()", "500": "PdfAcroFormTest::::mergeFieldsWhenKidsWasFlushedTest()", "501": "PdfAcroFormTest::::mergeFieldsWhenKidsWasFlushedTest()", "502": "PdfAcroFormTest::::mergeFieldsWhenKidsWasFlushedTest()", "503": "PdfAcroFormTest::::mergeFieldsWhenKidsWasFlushedTest()", "504": "PdfAcroFormTest::::mergeFieldsWhenKidsWasFlushedTest()", "505": "PdfAcroFormTest::::mergeFieldsWhenKidsWasFlushedTest()", "506": "PdfAcroFormTest::::mergeFieldsWhenKidsWasFlushedTest()", "507": "PdfAcroFormTest::::mergeFieldsWhenKidsWasFlushedTest()", "508": "PdfAcroFormTest::::mergeFieldsWhenKidsWasFlushedTest()", "509": "PdfAcroFormTest::::mergeFieldsWhenKidsWasFlushedTest()", "510": "PdfAcroFormTest::::mergeFieldsWhenKidsWasFlushedTest()", "511": "PdfAcroFormTest::::mergeFieldsWhenKidsWasFlushedTest()", "512": "PdfAcroFormTest::::mergeFieldsWhenKidsWasFlushedTest()", "513": "PdfAcroFormTest::::mergeFieldsWhenKidsWasFlushedTest()", "514": "PdfAcroFormTest::::mergeFieldsWhenKidsWasFlushedTest()", "515": "PdfAcroFormTest::::mergeFieldsWhenKidsWasFlushedTest()", "516": "PdfAcroFormTest::::mergeFieldsWhenKidsWasFlushedTest()", "517": "PdfAcroFormTest::::mergeFieldsWhenKidsWasFlushedTest()", "518": "PdfAcroFormTest::::mergeFieldsWhenKidsWasFlushedTest()", "519": "PdfAcroFormTest::::mergeFieldsWhenKidsWasFlushedTest()", "520": "PdfAcroFormTest::::mergeFieldsWhenKidsWasFlushedTest()", "521": "PdfAcroFormTest::::mergeFieldsWhenKidsWasFlushedTest()", "522": "PdfAcroFormTest::::mergeFieldsWhenKidsWasFlushedTest()", "523": "PdfAcroFormTest::::mergeFieldsWhenKidsWasFlushedTest()", "524": "PdfAcroFormTest::::mergeFieldsWhenKidsWasFlushedTest()", "525": "PdfAcroFormTest::::mergeFieldsWhenKidsWasFlushedTest()", "526": "PdfAcroFormTest::::mergeFieldsWhenKidsWasFlushedTest()", "527": "PdfAcroFormTest::::mergeFieldsWhenKidsWasFlushedTest()", "529": "PdfAcroFormTest::::addMergedRootFieldTest()", "530": "PdfAcroFormTest::::addMergedRootFieldTest()", "531": "PdfAcroFormTest::::addMergedRootFieldTest()", "532": "PdfAcroFormTest::::addMergedRootFieldTest()", "533": "PdfAcroFormTest::::addMergedRootFieldTest()", "534": "PdfAcroFormTest::::addMergedRootFieldTest()", "535": "PdfAcroFormTest::::addMergedRootFieldTest()", "536": "PdfAcroFormTest::::addMergedRootFieldTest()", "537": "PdfAcroFormTest::::addMergedRootFieldTest()", "538": "PdfAcroFormTest::::addMergedRootFieldTest()", "539": "PdfAcroFormTest::::addMergedRootFieldTest()", "540": "PdfAcroFormTest::::addMergedRootFieldTest()", "541": "PdfAcroFormTest::::addMergedRootFieldTest()", "542": "PdfAcroFormTest::::addMergedRootFieldTest()", "543": "PdfAcroFormTest::::addMergedRootFieldTest()", "544": "PdfAcroFormTest::::addMergedRootFieldTest()", "545": "PdfAcroFormTest::::addMergedRootFieldTest()", "546": "PdfAcroFormTest::::addMergedRootFieldTest()", "547": "PdfAcroFormTest::::addMergedRootFieldTest()", "548": "PdfAcroFormTest::::addMergedRootFieldTest()", "549": "PdfAcroFormTest::::addMergedRootFieldTest()", "551": "PdfAcroFormTest::::setCalculationOrderTest()", "552": "PdfAcroFormTest::::setCalculationOrderTest()", "553": "PdfAcroFormTest::::setCalculationOrderTest()", "554": "PdfAcroFormTest::::setCalculationOrderTest()", "555": "PdfAcroFormTest::::setCalculationOrderTest()", "556": "PdfAcroFormTest::::setCalculationOrderTest()", "557": "PdfAcroFormTest::::setCalculationOrderTest()", "558": "PdfAcroFormTest::::setCalculationOrderTest()", "559": "PdfAcroFormTest::::setCalculationOrderTest()", "560": "PdfAcroFormTest::::setCalculationOrderTest()", "561": "PdfAcroFormTest::::setCalculationOrderTest()", "562": "PdfAcroFormTest::::setCalculationOrderTest()", "563": "PdfAcroFormTest::::setCalculationOrderTest()", "564": "PdfAcroFormTest::::setCalculationOrderTest()", "565": "PdfAcroFormTest::::setCalculationOrderTest()", "566": "PdfAcroFormTest::::setCalculationOrderTest()", "567": "PdfAcroFormTest::::setCalculationOrderTest()", "568": "PdfAcroFormTest::::setCalculationOrderTest()", "570": "PdfAcroFormTest::::setDefaultAppearanceTest()", "571": "PdfAcroFormTest::::setDefaultAppearanceTest()", "572": "PdfAcroFormTest::::setDefaultAppearanceTest()", "573": "PdfAcroFormTest::::setDefaultAppearanceTest()", "574": "PdfAcroFormTest::::setDefaultAppearanceTest()", "575": "PdfAcroFormTest::::setDefaultAppearanceTest()", "576": "PdfAcroFormTest::::setDefaultAppearanceTest()", "577": "PdfAcroFormTest::::setDefaultAppearanceTest()", "578": "PdfAcroFormTest::::setDefaultAppearanceTest()", "579": "PdfAcroFormTest::::setDefaultAppearanceTest()", "580": "PdfAcroFormTest::::setDefaultAppearanceTest()", "581": "PdfAcroFormTest::::setDefaultAppearanceTest()", "582": "PdfAcroFormTest::::setDefaultAppearanceTest()", "583": "PdfAcroFormTest::::setDefaultAppearanceTest()", "584": "PdfAcroFormTest::::setDefaultAppearanceTest()", "585": "PdfAcroFormTest::::setDefaultAppearanceTest()", "586": "PdfAcroFormTest::::setDefaultAppearanceTest()", "588": "PdfAcroFormTest::::setDefaultJustificationTest()", "589": "PdfAcroFormTest::::setDefaultJustificationTest()", "590": "PdfAcroFormTest::::setDefaultJustificationTest()", "591": "PdfAcroFormTest::::setDefaultJustificationTest()", "592": "PdfAcroFormTest::::setDefaultJustificationTest()", "593": "PdfAcroFormTest::::setDefaultJustificationTest()", "594": "PdfAcroFormTest::::setDefaultJustificationTest()", "595": "PdfAcroFormTest::::setDefaultJustificationTest()", "596": "PdfAcroFormTest::::setDefaultJustificationTest()", "597": "PdfAcroFormTest::::setDefaultJustificationTest()", "598": "PdfAcroFormTest::::setDefaultJustificationTest()", "599": "PdfAcroFormTest::::setDefaultJustificationTest()", "600": "PdfAcroFormTest::::setDefaultJustificationTest()", "601": "PdfAcroFormTest::::setDefaultJustificationTest()", "602": "PdfAcroFormTest::::setDefaultJustificationTest()", "603": "PdfAcroFormTest::::setDefaultJustificationTest()", "604": "PdfAcroFormTest::::setDefaultJustificationTest()", "606": "PdfAcroFormTest::::setDefaultResourcesTest()", "607": "PdfAcroFormTest::::setDefaultResourcesTest()", "608": "PdfAcroFormTest::::setDefaultResourcesTest()", "609": "PdfAcroFormTest::::setDefaultResourcesTest()", "610": "PdfAcroFormTest::::setDefaultResourcesTest()", "611": "PdfAcroFormTest::::setDefaultResourcesTest()", "612": "PdfAcroFormTest::::setDefaultResourcesTest()", "613": "PdfAcroFormTest::::setDefaultResourcesTest()", "614": "PdfAcroFormTest::::setDefaultResourcesTest()", "615": "PdfAcroFormTest::::setDefaultResourcesTest()", "616": "PdfAcroFormTest::::setDefaultResourcesTest()", "617": "PdfAcroFormTest::::setDefaultResourcesTest()", "618": "PdfAcroFormTest::::setDefaultResourcesTest()", "619": "PdfAcroFormTest::::setDefaultResourcesTest()", "620": "PdfAcroFormTest::::setDefaultResourcesTest()", "621": "PdfAcroFormTest::::setDefaultResourcesTest()", "622": "PdfAcroFormTest::::setDefaultResourcesTest()", "623": "PdfAcroFormTest::::setDefaultResourcesTest()", "624": "PdfAcroFormTest::::setDefaultResourcesTest()", "626": "PdfAcroFormTest::::setNeedAppearancesTest()", "627": "PdfAcroFormTest::::setNeedAppearancesTest()", "628": "PdfAcroFormTest::::setNeedAppearancesTest()", "629": "PdfAcroFormTest::::setNeedAppearancesTest()", "630": "PdfAcroFormTest::::setNeedAppearancesTest()", "631": "PdfAcroFormTest::::setNeedAppearancesTest()", "632": "PdfAcroFormTest::::setNeedAppearancesTest()", "633": "PdfAcroFormTest::::setNeedAppearancesTest()", "634": "PdfAcroFormTest::::setNeedAppearancesTest()", "635": "PdfAcroFormTest::::setNeedAppearancesTest()", "636": "PdfAcroFormTest::::setNeedAppearancesTest()", "637": "PdfAcroFormTest::::setNeedAppearancesTest()", "638": "PdfAcroFormTest::::setNeedAppearancesTest()", "639": "PdfAcroFormTest::::setNeedAppearancesTest()", "640": "PdfAcroFormTest::::setNeedAppearancesTest()", "641": "PdfAcroFormTest::::setNeedAppearancesTest()", "642": "PdfAcroFormTest::::setNeedAppearancesTest()", "643": "PdfAcroFormTest::::setNeedAppearancesTest()", "645": "PdfAcroFormTest::::setNeedAppearancesInPdf2Test()", "646": "PdfAcroFormTest::::setNeedAppearancesInPdf2Test()", "647": "PdfAcroFormTest::::setNeedAppearancesInPdf2Test()", "648": "PdfAcroFormTest::::setNeedAppearancesInPdf2Test()", "649": "PdfAcroFormTest::::setNeedAppearancesInPdf2Test()", "650": "PdfAcroFormTest::::setNeedAppearancesInPdf2Test()", "651": "PdfAcroFormTest::::setNeedAppearancesInPdf2Test()", "652": "PdfAcroFormTest::::setNeedAppearancesInPdf2Test()", "653": "PdfAcroFormTest::::setNeedAppearancesInPdf2Test()", "654": "PdfAcroFormTest::::setNeedAppearancesInPdf2Test()", "655": "PdfAcroFormTest::::setNeedAppearancesInPdf2Test()", "656": "PdfAcroFormTest::::setNeedAppearancesInPdf2Test()", "657": "PdfAcroFormTest::::setNeedAppearancesInPdf2Test()", "658": "PdfAcroFormTest::::setNeedAppearancesInPdf2Test()", "659": "PdfAcroFormTest::::setNeedAppearancesInPdf2Test()", "660": "PdfAcroFormTest::::setNeedAppearancesInPdf2Test()", "661": "PdfAcroFormTest::::setNeedAppearancesInPdf2Test()", "662": "PdfAcroFormTest::::setNeedAppearancesInPdf2Test()", "663": "PdfAcroFormTest::::setNeedAppearancesInPdf2Test()", "664": "PdfAcroFormTest::::setNeedAppearancesInPdf2Test()", "665": "PdfAcroFormTest::::setNeedAppearancesInPdf2Test()", "667": "PdfAcroFormTest::::setGenerateAppearanceTest()", "668": "PdfAcroFormTest::::setGenerateAppearanceTest()", "669": "PdfAcroFormTest::::setGenerateAppearanceTest()", "670": "PdfAcroFormTest::::setGenerateAppearanceTest()", "671": "PdfAcroFormTest::::setGenerateAppearanceTest()", "672": "PdfAcroFormTest::::setGenerateAppearanceTest()", "673": "PdfAcroFormTest::::setGenerateAppearanceTest()", "674": "PdfAcroFormTest::::setGenerateAppearanceTest()", "675": "PdfAcroFormTest::::setGenerateAppearanceTest()", "676": "PdfAcroFormTest::::setGenerateAppearanceTest()", "677": "PdfAcroFormTest::::setGenerateAppearanceTest()", "678": "PdfAcroFormTest::::setGenerateAppearanceTest()", "679": "PdfAcroFormTest::::setGenerateAppearanceTest()", "680": "PdfAcroFormTest::::setGenerateAppearanceTest()", "681": "PdfAcroFormTest::::setGenerateAppearanceTest()", "682": "PdfAcroFormTest::::setGenerateAppearanceTest()", "683": "PdfAcroFormTest::::setGenerateAppearanceTest()", "684": "PdfAcroFormTest::::setGenerateAppearanceTest()", "685": "PdfAcroFormTest::::setGenerateAppearanceTest()", "686": "PdfAcroFormTest::::setGenerateAppearanceTest()", "688": "PdfAcroFormTest::::setXFAResourcePdfArrayTest()", "689": "PdfAcroFormTest::::setXFAResourcePdfArrayTest()", "690": "PdfAcroFormTest::::setXFAResourcePdfArrayTest()", "691": "PdfAcroFormTest::::setXFAResourcePdfArrayTest()", "692": "PdfAcroFormTest::::setXFAResourcePdfArrayTest()", "693": "PdfAcroFormTest::::setXFAResourcePdfArrayTest()", "694": "PdfAcroFormTest::::setXFAResourcePdfArrayTest()", "695": "PdfAcroFormTest::::setXFAResourcePdfArrayTest()", "696": "PdfAcroFormTest::::setXFAResourcePdfArrayTest()", "697": "PdfAcroFormTest::::setXFAResourcePdfArrayTest()", "698": "PdfAcroFormTest::::setXFAResourcePdfArrayTest()", "699": "PdfAcroFormTest::::setXFAResourcePdfArrayTest()", "700": "PdfAcroFormTest::::setXFAResourcePdfArrayTest()", "701": "PdfAcroFormTest::::setXFAResourcePdfArrayTest()", "702": "PdfAcroFormTest::::setXFAResourcePdfArrayTest()", "703": "PdfAcroFormTest::::setXFAResourcePdfArrayTest()", "704": "PdfAcroFormTest::::setXFAResourcePdfArrayTest()", "705": "PdfAcroFormTest::::setXFAResourcePdfArrayTest()", "707": "PdfAcroFormTest::::setXFAResourcePdfStreamTest()", "708": "PdfAcroFormTest::::setXFAResourcePdfStreamTest()", "709": "PdfAcroFormTest::::setXFAResourcePdfStreamTest()", "710": "PdfAcroFormTest::::setXFAResourcePdfStreamTest()", "711": "PdfAcroFormTest::::setXFAResourcePdfStreamTest()", "712": "PdfAcroFormTest::::setXFAResourcePdfStreamTest()", "713": "PdfAcroFormTest::::setXFAResourcePdfStreamTest()", "714": "PdfAcroFormTest::::setXFAResourcePdfStreamTest()", "715": "PdfAcroFormTest::::setXFAResourcePdfStreamTest()", "716": "PdfAcroFormTest::::setXFAResourcePdfStreamTest()", "717": "PdfAcroFormTest::::setXFAResourcePdfStreamTest()", "718": "PdfAcroFormTest::::setXFAResourcePdfStreamTest()", "719": "PdfAcroFormTest::::setXFAResourcePdfStreamTest()", "720": "PdfAcroFormTest::::setXFAResourcePdfStreamTest()", "721": "PdfAcroFormTest::::setXFAResourcePdfStreamTest()", "722": "PdfAcroFormTest::::setXFAResourcePdfStreamTest()", "723": "PdfAcroFormTest::::setXFAResourcePdfStreamTest()", "724": "PdfAcroFormTest::::setXFAResourcePdfStreamTest()", "726": "PdfAcroFormTest::::replaceFormFieldRootLevelReplacesExistingFieldTest()", "727": "PdfAcroFormTest::::replaceFormFieldRootLevelReplacesExistingFieldTest()", "728": "PdfAcroFormTest::::replaceFormFieldRootLevelReplacesExistingFieldTest()", "729": "PdfAcroFormTest::::replaceFormFieldRootLevelReplacesExistingFieldTest()", "730": "PdfAcroFormTest::::replaceFormFieldRootLevelReplacesExistingFieldTest()", "731": "PdfAcroFormTest::::replaceFormFieldRootLevelReplacesExistingFieldTest()", "732": "PdfAcroFormTest::::replaceFormFieldRootLevelReplacesExistingFieldTest()", "733": "PdfAcroFormTest::::replaceFormFieldRootLevelReplacesExistingFieldTest()", "734": "PdfAcroFormTest::::replaceFormFieldRootLevelReplacesExistingFieldTest()", "735": "PdfAcroFormTest::::replaceFormFieldRootLevelReplacesExistingFieldTest()", "736": "PdfAcroFormTest::::replaceFormFieldRootLevelReplacesExistingFieldTest()", "737": "PdfAcroFormTest::::replaceFormFieldRootLevelReplacesExistingFieldTest()", "738": "PdfAcroFormTest::::replaceFormFieldRootLevelReplacesExistingFieldTest()", "739": "PdfAcroFormTest::::replaceFormFieldRootLevelReplacesExistingFieldTest()", "740": "PdfAcroFormTest::::replaceFormFieldRootLevelReplacesExistingFieldTest()", "741": "PdfAcroFormTest::::replaceFormFieldRootLevelReplacesExistingFieldTest()", "742": "PdfAcroFormTest::::replaceFormFieldRootLevelReplacesExistingFieldTest()", "743": "PdfAcroFormTest::::replaceFormFieldRootLevelReplacesExistingFieldTest()", "744": "PdfAcroFormTest::::replaceFormFieldRootLevelReplacesExistingFieldTest()", "745": "PdfAcroFormTest::::replaceFormFieldRootLevelReplacesExistingFieldTest()", "746": "PdfAcroFormTest::::replaceFormFieldRootLevelReplacesExistingFieldTest()", "747": "PdfAcroFormTest::::replaceFormFieldRootLevelReplacesExistingFieldTest()", "748": "PdfAcroFormTest::::replaceFormFieldRootLevelReplacesExistingFieldTest()", "749": "PdfAcroFormTest::::replaceFormFieldRootLevelReplacesExistingFieldTest()", "750": "PdfAcroFormTest::::replaceFormFieldRootLevelReplacesExistingFieldTest()", "751": "PdfAcroFormTest::::replaceFormFieldRootLevelReplacesExistingFieldTest()", "753": "PdfAcroFormTest::::replaceWithNullNameLogsErrorTest()", "754": "PdfAcroFormTest::::replaceWithNullNameLogsErrorTest()", "755": "PdfAcroFormTest::::replaceWithNullNameLogsErrorTest()", "756": "PdfAcroFormTest::::replaceWithNullNameLogsErrorTest()", "757": "PdfAcroFormTest::::replaceWithNullNameLogsErrorTest()", "758": "PdfAcroFormTest::::replaceWithNullNameLogsErrorTest()", "759": "PdfAcroFormTest::::replaceWithNullNameLogsErrorTest()", "760": "PdfAcroFormTest::::replaceWithNullNameLogsErrorTest()", "761": "PdfAcroFormTest::::replaceWithNullNameLogsErrorTest()", "762": "PdfAcroFormTest::::replaceWithNullNameLogsErrorTest()", "763": "PdfAcroFormTest::::replaceWithNullNameLogsErrorTest()", "764": "PdfAcroFormTest::::replaceWithNullNameLogsErrorTest()", "765": "PdfAcroFormTest::::replaceWithNullNameLogsErrorTest()", "766": "PdfAcroFormTest::::replaceWithNullNameLogsErrorTest()", "767": "PdfAcroFormTest::::replaceWithNullNameLogsErrorTest()", "768": "PdfAcroFormTest::::replaceWithNullNameLogsErrorTest()", "769": "PdfAcroFormTest::::replaceWithNullNameLogsErrorTest()", "770": "PdfAcroFormTest::::replaceWithNullNameLogsErrorTest()", "771": "PdfAcroFormTest::::replaceWithNullNameLogsErrorTest()", "772": "PdfAcroFormTest::::replaceWithNullNameLogsErrorTest()", "773": "PdfAcroFormTest::::replaceWithNullNameLogsErrorTest()", "774": "PdfAcroFormTest::::replaceWithNullNameLogsErrorTest()", "775": "PdfAcroFormTest::::replaceWithNullNameLogsErrorTest()", "776": "PdfAcroFormTest::::replaceWithNullNameLogsErrorTest()", "777": "PdfAcroFormTest::::replaceWithNullNameLogsErrorTest()", "778": "PdfAcroFormTest::::replaceWithNullNameLogsErrorTest()", "780": "PdfAcroFormTest::::replaceFormFieldOneDeepReplacesExistingFieldTest()", "781": "PdfAcroFormTest::::replaceFormFieldOneDeepReplacesExistingFieldTest()", "782": "PdfAcroFormTest::::replaceFormFieldOneDeepReplacesExistingFieldTest()", "783": "PdfAcroFormTest::::replaceFormFieldOneDeepReplacesExistingFieldTest()", "784": "PdfAcroFormTest::::replaceFormFieldOneDeepReplacesExistingFieldTest()", "785": "PdfAcroFormTest::::replaceFormFieldOneDeepReplacesExistingFieldTest()", "786": "PdfAcroFormTest::::replaceFormFieldOneDeepReplacesExistingFieldTest()", "787": "PdfAcroFormTest::::replaceFormFieldOneDeepReplacesExistingFieldTest()", "788": "PdfAcroFormTest::::replaceFormFieldOneDeepReplacesExistingFieldTest()", "789": "PdfAcroFormTest::::replaceFormFieldOneDeepReplacesExistingFieldTest()", "790": "PdfAcroFormTest::::replaceFormFieldOneDeepReplacesExistingFieldTest()", "791": "PdfAcroFormTest::::replaceFormFieldOneDeepReplacesExistingFieldTest()", "792": "PdfAcroFormTest::::replaceFormFieldOneDeepReplacesExistingFieldTest()", "793": "PdfAcroFormTest::::replaceFormFieldOneDeepReplacesExistingFieldTest()", "794": "PdfAcroFormTest::::replaceFormFieldOneDeepReplacesExistingFieldTest()", "795": "PdfAcroFormTest::::replaceFormFieldOneDeepReplacesExistingFieldTest()", "796": "PdfAcroFormTest::::replaceFormFieldOneDeepReplacesExistingFieldTest()", "797": "PdfAcroFormTest::::replaceFormFieldOneDeepReplacesExistingFieldTest()", "798": "PdfAcroFormTest::::replaceFormFieldOneDeepReplacesExistingFieldTest()", "799": "PdfAcroFormTest::::replaceFormFieldOneDeepReplacesExistingFieldTest()", "800": "PdfAcroFormTest::::replaceFormFieldOneDeepReplacesExistingFieldTest()", "801": "PdfAcroFormTest::::replaceFormFieldOneDeepReplacesExistingFieldTest()", "802": "PdfAcroFormTest::::replaceFormFieldOneDeepReplacesExistingFieldTest()", "803": "PdfAcroFormTest::::replaceFormFieldOneDeepReplacesExistingFieldTest()", "804": "PdfAcroFormTest::::replaceFormFieldOneDeepReplacesExistingFieldTest()", "805": "PdfAcroFormTest::::replaceFormFieldOneDeepReplacesExistingFieldTest()", "806": "PdfAcroFormTest::::replaceFormFieldOneDeepReplacesExistingFieldTest()", "807": "PdfAcroFormTest::::replaceFormFieldOneDeepReplacesExistingFieldTest()", "808": "PdfAcroFormTest::::replaceFormFieldOneDeepReplacesExistingFieldTest()", "809": "PdfAcroFormTest::::replaceFormFieldOneDeepReplacesExistingFieldTest()", "810": "PdfAcroFormTest::::replaceFormFieldOneDeepReplacesExistingFieldTest()", "811": "PdfAcroFormTest::::replaceFormFieldOneDeepReplacesExistingFieldTest()", "812": "PdfAcroFormTest::::replaceFormFieldOneDeepReplacesExistingFieldTest()", "813": "PdfAcroFormTest::::replaceFormFieldOneDeepReplacesExistingFieldTest()", "816": "PdfAcroFormTest::::createDocument()", "817": "PdfAcroFormTest::::createDocument()", "818": "PdfAcroFormTest::::createDocument()", "819": "PdfAcroFormTest::::createDocument()", "820": "PdfAcroFormTest::::createDocument()"}, "tests": [{"test_lines": [64, 79], "covered_lines": [78, 114, 120, 128, 139, 140, 141, 142, 143, 152, 153, 154, 170, 190, 191, 192, 193, 194, 195, 196, 197, 198, 204, 205, 206, 207, 209, 210, 213, 443, 556, 989, 990, 995, 1000, 1004, 1005, 1006, 1007, 1034, 1038, 1146, 1147, 1148, 1169, 1170, 1174, 1178, 1179, 1180]}, {"test_lines": [81, 98], "covered_lines": [78, 114, 120, 128, 139, 140, 141, 142, 143, 152, 153, 154, 170, 190, 191, 192, 193, 194, 195, 196, 197, 198, 204, 205, 206, 207, 209, 210, 213, 224, 229, 232, 233, 234, 243, 244, 254, 262, 265, 266, 267, 268, 269, 271, 272, 274, 275, 278, 279, 556, 989, 990, 995, 1000, 1004, 1005, 1006, 1007, 1034, 1038, 1058, 1059, 1063, 1064, 1065, 1066, 1067, 1069, 1070, 1074, 1077, 1078, 1079, 1080, 1081, 1083, 1084, 1087, 1088, 1089, 1090, 1091, 1093, 1094, 1095, 1105, 1169, 1170, 1174, 1178, 1179, 1180, 1184, 1185, 1186, 1188, 1189, 1190, 1191, 1192, 1197, 1269, 1270, 1271]}, {"test_lines": [100, 117], "covered_lines": [78, 114, 120, 128, 139, 140, 141, 142, 143, 152, 153, 154, 170, 190, 191, 192, 193, 194, 195, 196, 197, 198, 204, 205, 206, 207, 209, 210, 213, 224, 229, 232, 233, 234, 243, 244, 254, 262, 265, 266, 267, 268, 269, 271, 272, 274, 278, 279, 556, 989, 990, 995, 1000, 1004, 1005, 1006, 1007, 1034, 1038, 1058, 1059, 1063, 1064, 1065, 1066, 1067, 1069, 1070, 1074, 1077, 1078, 1079, 1080, 1081, 1083, 1084, 1087, 1088, 1089, 1093, 1094, 1095, 1105, 1169, 1170, 1174, 1178, 1179, 1180, 1184, 1185, 1188, 1189, 1190, 1191, 1192, 1197, 1269, 1270, 1271]}, {"test_lines": [119, 136], "covered_lines": [78, 114, 120, 128, 139, 140, 141, 142, 143, 152, 153, 154, 170, 190, 191, 192, 193, 194, 195, 196, 197, 198, 204, 205, 206, 207, 209, 210, 213, 224, 229, 232, 233, 234, 243, 244, 254, 262, 265, 266, 267, 268, 269, 271, 272, 274, 275, 278, 279, 556, 657, 660, 661, 664, 665, 666, 667, 670, 671, 673, 989, 990, 995, 1000, 1004, 1005, 1006, 1007, 1034, 1038, 1058, 1059, 1063, 1064, 1065, 1066, 1067, 1069, 1070, 1074, 1077, 1078, 1079, 1080, 1081, 1083, 1084, 1087, 1088, 1089, 1090, 1091, 1093, 1094, 1095, 1105, 1169, 1170, 1174, 1178, 1179, 1180, 1184, 1185, 1186, 1188, 1189, 1190, 1191, 1192, 1197, 1269, 1270, 1271]}, {"test_lines": [138, 161], "covered_lines": [78, 114, 120, 128, 139, 140, 141, 142, 143, 152, 153, 154, 170, 190, 191, 192, 193, 194, 195, 196, 197, 198, 204, 205, 206, 207, 209, 210, 213, 224, 229, 232, 233, 234, 243, 244, 254, 262, 265, 266, 267, 268, 269, 271, 272, 274, 275, 278, 279, 556, 657, 660, 661, 664, 665, 666, 667, 670, 671, 673, 989, 990, 995, 1000, 1004, 1005, 1006, 1007, 1034, 1038, 1058, 1059, 1063, 1064, 1065, 1066, 1067, 1069, 1070, 1074, 1077, 1078, 1079, 1080, 1081, 1083, 1084, 1087, 1088, 1089, 1090, 1091, 1093, 1094, 1095, 1105, 1169, 1170, 1174, 1178, 1179, 1180, 1184, 1185, 1186, 1188, 1189, 1190, 1191, 1192, 1197, 1269, 1270, 1271]}, {"test_lines": [163, 181], "covered_lines": [78, 114, 120, 128, 139, 140, 141, 142, 143, 152, 153, 154, 170, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 204, 205, 206, 207, 209, 210, 213, 224, 229, 232, 233, 234, 243, 244, 254, 262, 265, 266, 267, 268, 269, 271, 272, 274, 275, 278, 279, 556, 657, 658, 660, 661, 664, 665, 666, 667, 670, 671, 673, 989, 990, 995, 1000, 1004, 1005, 1006, 1007, 1008, 1013, 1014, 1020, 1022, 1023, 1024, 1026, 1028, 1033, 1034, 1038, 1058, 1059, 1063, 1064, 1065, 1066, 1067, 1069, 1070, 1074, 1077, 1078, 1079, 1080, 1081, 1083, 1084, 1087, 1088, 1089, 1090, 1091, 1093, 1094, 1095, 1105, 1169, 1170, 1174, 1178, 1179, 1180, 1184, 1185, 1186, 1188, 1189, 1190, 1191, 1192, 1197, 1269, 1270, 1271]}, {"test_lines": [183, 208], "covered_lines": [78, 114, 120, 128, 139, 140, 141, 142, 143, 152, 153, 154, 170, 190, 191, 192, 193, 194, 195, 196, 197, 198, 204, 205, 206, 207, 209, 210, 213, 224, 229, 232, 233, 234, 243, 244, 254, 262, 265, 266, 267, 268, 269, 271, 272, 274, 275, 278, 279, 556, 657, 660, 661, 664, 665, 666, 667, 670, 671, 673, 850, 851, 855, 856, 858, 859, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 989, 990, 995, 1000, 1004, 1005, 1006, 1007, 1034, 1038, 1058, 1059, 1063, 1064, 1065, 1066, 1067, 1069, 1070, 1074, 1077, 1078, 1079, 1080, 1081, 1083, 1084, 1087, 1088, 1089, 1090, 1091, 1093, 1094, 1095, 1105, 1169, 1170, 1174, 1178, 1179, 1180, 1184, 1185, 1186, 1188, 1189, 1190, 1191, 1192, 1197, 1269, 1270, 1271]}, {"test_lines": [210, 246], "covered_lines": [78, 114, 120, 128, 139, 140, 141, 142, 143, 152, 153, 154, 170, 190, 191, 192, 193, 194, 195, 196, 197, 198, 204, 205, 206, 207, 209, 210, 213, 224, 229, 232, 233, 234, 243, 244, 254, 262, 265, 266, 267, 268, 269, 271, 272, 274, 275, 278, 279, 556, 657, 660, 661, 664, 665, 666, 667, 670, 671, 673, 989, 990, 995, 1000, 1004, 1005, 1006, 1007, 1034, 1038, 1058, 1059, 1063, 1064, 1065, 1066, 1067, 1069, 1070, 1074, 1077, 1078, 1079, 1080, 1081, 1083, 1084, 1087, 1088, 1089, 1090, 1091, 1093, 1094, 1095, 1105, 1169, 1170, 1174, 1178, 1179, 1180, 1184, 1185, 1186, 1188, 1189, 1190, 1191, 1192, 1197, 1269, 1270, 1271]}, {"test_lines": [248, 270], "covered_lines": [78, 114, 120, 128, 139, 140, 141, 142, 143, 152, 153, 154, 170, 190, 191, 192, 193, 194, 195, 196, 197, 198, 204, 205, 206, 207, 209, 210, 213, 224, 229, 232, 233, 234, 243, 244, 254, 262, 265, 266, 267, 268, 269, 271, 272, 274, 278, 279, 335, 336, 338, 339, 340, 341, 347, 348, 357, 358, 360, 361, 362, 363, 364, 365, 366, 556, 989, 990, 995, 1000, 1004, 1005, 1006, 1007, 1034, 1038, 1058, 1059, 1060, 1169, 1170, 1174, 1178, 1179, 1180, 1269, 1270, 1271]}, {"test_lines": [272, 305], "covered_lines": [78, 114, 120, 128, 139, 140, 141, 142, 143, 152, 153, 154, 170, 190, 191, 192, 193, 194, 195, 196, 197, 198, 204, 205, 206, 207, 209, 210, 213, 224, 229, 232, 233, 234, 243, 244, 254, 262, 265, 266, 267, 268, 269, 271, 272, 274, 278, 279, 556, 989, 990, 995, 1000, 1004, 1005, 1006, 1007, 1034, 1038, 1058, 1059, 1063, 1064, 1065, 1066, 1067, 1069, 1070, 1074, 1077, 1078, 1079, 1080, 1081, 1083, 1084, 1087, 1088, 1089, 1093, 1094, 1095, 1105, 1169, 1170, 1174, 1178, 1179, 1180, 1184, 1185, 1188, 1189, 1190, 1191, 1192, 1197, 1269, 1270, 1271]}, {"test_lines": [307, 328], "covered_lines": [78, 114, 120, 128, 139, 140, 141, 142, 143, 152, 153, 154, 170, 190, 191, 192, 193, 194, 195, 196, 197, 198, 204, 205, 206, 207, 209, 210, 213, 224, 225, 254, 255, 256, 258, 259, 322, 323, 326, 556, 989, 990, 995, 1000, 1004, 1005, 1006, 1007, 1034, 1038, 1178, 1179, 1180]}, {"test_lines": [330, 354], "covered_lines": [78, 114, 120, 128, 139, 140, 141, 142, 143, 152, 153, 154, 170, 190, 191, 192, 193, 194, 195, 196, 197, 198, 204, 205, 206, 207, 209, 210, 213, 224, 229, 232, 233, 234, 243, 244, 254, 262, 265, 266, 267, 268, 269, 271, 272, 274, 278, 279, 556, 989, 990, 995, 1000, 1004, 1005, 1006, 1007, 1034, 1038, 1058, 1059, 1063, 1064, 1065, 1066, 1067, 1069, 1070, 1074, 1077, 1078, 1079, 1080, 1081, 1083, 1084, 1087, 1088, 1089, 1090, 1091, 1093, 1094, 1095, 1105, 1169, 1170, 1174, 1178, 1179, 1180, 1184, 1185, 1186, 1188, 1189, 1190, 1191, 1192, 1197, 1269, 1270, 1271, 1273, 1277, 1278]}, {"test_lines": [356, 376], "covered_lines": [78, 114, 120, 128, 139, 140, 141, 142, 143, 152, 153, 154, 170, 190, 191, 192, 193, 194, 195, 196, 197, 198, 204, 205, 206, 207, 209, 210, 213, 224, 229, 232, 233, 234, 243, 244, 254, 262, 265, 266, 267, 268, 269, 271, 272, 274, 275, 278, 279, 556, 657, 658, 989, 990, 995, 1000, 1004, 1005, 1006, 1007, 1034, 1038, 1058, 1059, 1063, 1064, 1065, 1066, 1067, 1069, 1070, 1074, 1077, 1078, 1079, 1083, 1084, 1087, 1088, 1089, 1090, 1091, 1093, 1094, 1095, 1105, 1169, 1170, 1174, 1178, 1179, 1180, 1184, 1185, 1186, 1188, 1189, 1190, 1191, 1192, 1197, 1269, 1270, 1271, 1273, 1277, 1278]}, {"test_lines": [378, 395], "covered_lines": [78, 114, 120, 128, 139, 140, 141, 142, 143, 152, 153, 154, 170, 190, 191, 192, 193, 194, 195, 196, 197, 198, 204, 205, 206, 207, 209, 210, 213, 224, 229, 232, 233, 234, 243, 244, 254, 262, 265, 266, 267, 268, 269, 271, 272, 274, 278, 279, 556, 989, 990, 995, 1000, 1004, 1005, 1006, 1007, 1034, 1038, 1058, 1059, 1060, 1169, 1170, 1174, 1178, 1179, 1180, 1269, 1270, 1271]}, {"test_lines": [397, 420], "covered_lines": [78, 114, 120, 128, 139, 140, 141, 142, 143, 152, 153, 154, 170, 190, 191, 192, 193, 194, 195, 196, 197, 198, 204, 205, 206, 207, 209, 210, 213, 224, 229, 232, 233, 234, 243, 244, 254, 262, 265, 266, 267, 268, 269, 271, 272, 274, 278, 279, 556, 657, 658, 989, 990, 995, 1000, 1004, 1005, 1006, 1007, 1034, 1038, 1058, 1059, 1063, 1064, 1065, 1066, 1067, 1069, 1070, 1074, 1077, 1078, 1080, 1081, 1083, 1084, 1087, 1088, 1089, 1093, 1094, 1095, 1105, 1169, 1170, 1174, 1178, 1179, 1180, 1184, 1185, 1188, 1189, 1190, 1191, 1192, 1197, 1269, 1270, 1271]}, {"test_lines": [422, 454], "covered_lines": [78, 114, 120, 128, 139, 140, 141, 142, 143, 152, 153, 154, 170, 190, 191, 192, 193, 194, 195, 196, 197, 198, 204, 205, 206, 207, 209, 210, 213, 224, 229, 232, 233, 234, 243, 244, 254, 262, 265, 266, 267, 268, 269, 271, 272, 274, 278, 279, 556, 657, 658, 989, 990, 995, 1000, 1004, 1005, 1006, 1007, 1034, 1038, 1058, 1059, 1063, 1064, 1065, 1066, 1077, 1078, 1079, 1080, 1081, 1083, 1084, 1087, 1088, 1089, 1093, 1094, 1095, 1105, 1169, 1170, 1174, 1178, 1179, 1180, 1184, 1185, 1188, 1189, 1190, 1191, 1192, 1197, 1269, 1270, 1271]}, {"test_lines": [456, 494], "covered_lines": [78, 114, 120, 128, 139, 140, 141, 142, 143, 152, 153, 154, 170, 190, 191, 192, 193, 194, 195, 196, 197, 198, 204, 205, 206, 207, 209, 210, 213, 224, 229, 232, 233, 234, 243, 244, 254, 262, 265, 266, 267, 268, 269, 271, 272, 274, 278, 279, 556, 657, 658, 989, 990, 995, 1000, 1004, 1005, 1006, 1007, 1034, 1038, 1058, 1059, 1063, 1077, 1078, 1079, 1083, 1084, 1087, 1088, 1089, 1093, 1094, 1095, 1105, 1169, 1170, 1174, 1178, 1179, 1180, 1184, 1185, 1188, 1189, 1190, 1191, 1192, 1197, 1269, 1270, 1271]}, {"test_lines": [496, 527], "covered_lines": [78, 114, 120, 128, 139, 140, 141, 142, 143, 152, 153, 154, 170, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 204, 205, 206, 207, 209, 210, 213, 224, 229, 232, 233, 234, 243, 244, 254, 262, 265, 266, 267, 268, 269, 271, 272, 274, 275, 278, 279, 556, 657, 658, 989, 990, 995, 1000, 1004, 1005, 1006, 1007, 1008, 1013, 1014, 1020, 1022, 1023, 1024, 1026, 1028, 1033, 1034, 1038, 1058, 1059, 1063, 1064, 1065, 1066, 1067, 1069, 1070, 1074, 1077, 1078, 1079, 1083, 1084, 1087, 1088, 1089, 1090, 1091, 1169, 1170, 1174, 1178, 1179, 1180, 1184, 1185, 1186, 1269, 1270, 1271, 1273, 1277, 1278]}, {"test_lines": [529, 549], "covered_lines": [78, 114, 120, 128, 139, 140, 141, 142, 143, 152, 153, 154, 170, 190, 191, 192, 193, 194, 195, 196, 197, 198, 204, 205, 206, 207, 209, 210, 213, 224, 229, 232, 233, 234, 243, 244, 254, 262, 265, 266, 267, 268, 269, 271, 272, 274, 275, 278, 279, 556, 657, 658, 989, 990, 995, 1000, 1004, 1005, 1006, 1007, 1034, 1038, 1058, 1059, 1063, 1064, 1065, 1066, 1067, 1069, 1070, 1074, 1087, 1088, 1089, 1090, 1091, 1169, 1170, 1174, 1178, 1179, 1180, 1184, 1185, 1186, 1269, 1270, 1271]}, {"test_lines": [551, 568], "covered_lines": [78, 114, 120, 128, 139, 140, 141, 142, 143, 152, 153, 154, 170, 190, 191, 192, 193, 194, 195, 196, 197, 198, 204, 205, 206, 207, 209, 210, 213, 502, 556, 989, 990, 995, 1000, 1004, 1005, 1006, 1007, 1034, 1038, 1146, 1147, 1148, 1169, 1170, 1174, 1178, 1179, 1180]}, {"test_lines": [570, 586], "covered_lines": [78, 114, 120, 128, 139, 140, 141, 142, 143, 152, 153, 154, 170, 190, 191, 192, 193, 194, 195, 196, 197, 198, 204, 205, 206, 207, 209, 210, 213, 556, 569, 989, 990, 995, 1000, 1004, 1005, 1006, 1007, 1034, 1038, 1146, 1147, 1148, 1169, 1170, 1174, 1178, 1179, 1180]}, {"test_lines": [588, 604], "covered_lines": [78, 114, 120, 128, 139, 140, 141, 142, 143, 152, 153, 154, 170, 190, 191, 192, 193, 194, 195, 196, 197, 198, 204, 205, 206, 207, 209, 210, 213, 556, 595, 989, 990, 995, 1000, 1004, 1005, 1006, 1007, 1034, 1038, 1146, 1147, 1148, 1169, 1170, 1174, 1178, 1179, 1180]}, {"test_lines": [606, 624], "covered_lines": [78, 114, 120, 128, 139, 140, 141, 142, 143, 152, 153, 154, 170, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 204, 205, 206, 207, 209, 210, 213, 538, 556, 989, 990, 995, 1000, 1004, 1005, 1006, 1007, 1034, 1038, 1146, 1147, 1148, 1169, 1170, 1174, 1178, 1179, 1180]}, {"test_lines": [626, 643], "covered_lines": [78, 114, 120, 128, 139, 140, 141, 142, 143, 152, 153, 154, 170, 190, 191, 192, 193, 194, 195, 196, 197, 198, 204, 205, 206, 207, 209, 210, 213, 403, 407, 409, 556, 989, 990, 995, 1000, 1004, 1005, 1006, 1007, 1034, 1038, 1146, 1147, 1148, 1169, 1170, 1174, 1178, 1179, 1180]}, {"test_lines": [645, 665], "covered_lines": [78, 114, 120, 128, 139, 140, 141, 142, 143, 152, 153, 154, 170, 190, 191, 192, 193, 194, 195, 196, 197, 198, 204, 205, 206, 207, 209, 210, 213, 403, 404, 405, 409, 556, 989, 990, 995, 1000, 1004, 1005, 1006, 1007, 1034, 1038, 1169, 1170, 1174, 1178, 1179, 1180]}, {"test_lines": [667, 686], "covered_lines": [78, 114, 120, 128, 139, 140, 141, 142, 143, 152, 153, 154, 170, 190, 191, 192, 193, 194, 195, 196, 197, 198, 204, 205, 206, 207, 209, 210, 213, 403, 407, 409, 556, 684, 705, 706, 707, 709, 710, 989, 990, 995, 1000, 1004, 1005, 1006, 1007, 1034, 1038, 1146, 1147, 1148, 1169, 1170, 1174, 1178, 1179, 1180]}, {"test_lines": [688, 705], "covered_lines": [78, 114, 120, 128, 139, 140, 141, 142, 143, 152, 153, 154, 170, 190, 191, 192, 193, 194, 195, 196, 197, 198, 204, 205, 206, 207, 209, 210, 213, 556, 636, 989, 990, 995, 1000, 1004, 1005, 1006, 1007, 1034, 1038, 1146, 1147, 1148, 1169, 1170, 1174, 1178, 1179, 1180]}, {"test_lines": [707, 724], "covered_lines": [78, 114, 120, 128, 139, 140, 141, 142, 143, 152, 153, 154, 170, 190, 191, 192, 193, 194, 195, 196, 197, 198, 204, 205, 206, 207, 209, 210, 213, 556, 621, 989, 990, 995, 1000, 1004, 1005, 1006, 1007, 1034, 1038, 1146, 1147, 1148, 1169, 1170, 1174, 1178, 1179, 1180]}, {"test_lines": [726, 751], "covered_lines": [78, 114, 120, 128, 139, 140, 141, 142, 143, 152, 153, 154, 170, 190, 191, 192, 193, 194, 195, 196, 197, 198, 204, 205, 206, 207, 209, 210, 213, 224, 229, 232, 233, 234, 243, 244, 254, 262, 265, 266, 267, 268, 269, 271, 272, 274, 278, 279, 322, 326, 556, 657, 658, 850, 851, 855, 856, 858, 859, 863, 864, 865, 876, 877, 878, 879, 880, 881, 882, 945, 949, 950, 951, 952, 953, 989, 990, 995, 1000, 1004, 1005, 1006, 1007, 1034, 1038, 1058, 1059, 1060, 1169, 1170, 1174, 1178, 1179, 1180, 1184, 1185, 1188, 1189, 1190, 1191, 1192, 1197, 1269, 1270, 1271]}, {"test_lines": [753, 778], "covered_lines": [78, 114, 120, 128, 139, 140, 141, 142, 143, 152, 153, 154, 170, 190, 191, 192, 193, 194, 195, 196, 197, 198, 204, 205, 206, 207, 209, 210, 213, 224, 229, 232, 233, 234, 243, 244, 254, 262, 265, 266, 267, 268, 269, 271, 272, 274, 278, 279, 322, 326, 556, 945, 946, 947, 989, 990, 995, 1000, 1004, 1005, 1006, 1007, 1034, 1038, 1058, 1059, 1060, 1169, 1170, 1174, 1178, 1179, 1180, 1269, 1270, 1271]}, {"test_lines": [780, 813], "covered_lines": [78, 114, 120, 128, 139, 140, 141, 142, 143, 152, 153, 154, 170, 190, 191, 192, 193, 194, 195, 196, 197, 198, 204, 205, 206, 207, 209, 210, 213, 224, 229, 232, 233, 234, 243, 244, 254, 262, 265, 266, 267, 268, 269, 271, 272, 274, 278, 279, 322, 326, 556, 657, 658, 660, 661, 664, 665, 666, 667, 670, 671, 673, 850, 851, 855, 856, 858, 859, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 945, 949, 950, 951, 955, 956, 957, 960, 962, 989, 990, 995, 1000, 1004, 1005, 1006, 1007, 1034, 1038, 1058, 1059, 1060, 1063, 1064, 1065, 1066, 1077, 1078, 1080, 1081, 1083, 1084, 1169, 1170, 1174, 1178, 1179, 1180, 1184, 1185, 1188, 1189, 1190, 1191, 1192, 1197, 1269, 1270, 1271]}]}, "/bernard/dataset_construction/prep/repos/itext-java/forms/src/main/java/com/itextpdf/forms/util/RegisterDefaultDiContainer.java": {"class_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.forms.util;\n", "\n", "import com.itextpdf.commons.utils.DIContainer;\n", "import com.itextpdf.forms.fields.merging.MergeFieldsStrategy;\n", "import com.itextpdf.forms.fields.merging.OnDuplicateFormFieldNameStrategy;\n", "\n", "/**\n", " * Registers a default instance for a dependency injection container.\n", " */\n", "public class RegisterDefaultDiContainer {\n", "\n", "    /**\n", "     * Creates an instance of {@link RegisterDefaultDiContainer}.\n", "     */\n", "    public RegisterDefaultDiContainer() {\n", "        // Empty constructor but should be public as we need it for automatic class loading\n", "        // sharp\n", "    }\n", "\n", "    static {\n", "        DIContainer.registerDefault(OnDuplicateFormFieldNameStrategy.class, () -> new MergeFieldsStrategy());\n", "    }\n", "}\n"], "test_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.forms.util;\n", "\n", "import com.itextpdf.forms.fields.merging.MergeFieldsStrategy;\n", "import com.itextpdf.forms.fields.merging.OnDuplicateFormFieldNameStrategy;\n", "import com.itextpdf.io.source.ByteArrayOutputStream;\n", "import com.itextpdf.kernel.pdf.PdfDocument;\n", "import com.itextpdf.kernel.pdf.PdfWriter;\n", "import com.itextpdf.test.ExtendedITextTest;\n", "import com.itextpdf.test.annotations.type.UnitTest;\n", "\n", "import org.junit.Assert;\n", "import org.junit.Test;\n", "import org.junit.experimental.categories.Category;\n", "\n", "\n", "@Category(UnitTest.class)\n", "public class RegisterDefaultDiContainerTest extends ExtendedITextTest {\n", "\n", "    @Test\n", "    public void testDefaultRegistrationFormsModule() {\n", "        PdfDocument pdfDocument = new PdfDocument(new PdfWriter(new ByteArrayOutputStream()));\n", "        OnDuplicateFormFieldNameStrategy strategy = pdfDocument.getDiContainer()\n", "                .getInstance(OnDuplicateFormFieldNameStrategy.class);\n", "        Assert.assertEquals(MergeFieldsStrategy.class, strategy.getClass());\n", "    }\n", "}\n"], "method_lines_dic": {}, "test_method_lines_dic": {"RegisterDefaultDiContainerTest::::testDefaultRegistrationFormsModule()": [41, 47]}, "reverse_method_lines_dic": {}, "test_reverse_method_lines_dic": {"41": "RegisterDefaultDiContainerTest::::testDefaultRegistrationFormsModule()", "42": "RegisterDefaultDiContainerTest::::testDefaultRegistrationFormsModule()", "43": "RegisterDefaultDiContainerTest::::testDefaultRegistrationFormsModule()", "44": "RegisterDefaultDiContainerTest::::testDefaultRegistrationFormsModule()", "45": "RegisterDefaultDiContainerTest::::testDefaultRegistrationFormsModule()", "46": "RegisterDefaultDiContainerTest::::testDefaultRegistrationFormsModule()", "47": "RegisterDefaultDiContainerTest::::testDefaultRegistrationFormsModule()"}, "tests": [{"test_lines": [41, 47], "covered_lines": [43, 44]}]}, "/bernard/dataset_construction/prep/repos/itext-java/forms/src/main/java/com/itextpdf/forms/fields/FormFieldBuilder.java": {"class_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.forms.fields;\n", "\n", "import com.itextpdf.kernel.pdf.IConformanceLevel;\n", "import com.itextpdf.kernel.pdf.PdfAConformanceLevel;\n", "import com.itextpdf.kernel.pdf.PdfDocument;\n", "\n", "/**\n", " * Builder for form field.\n", " *\n", " * @param <T> specific form field builder which extends this class.\n", " */\n", "public abstract class FormFieldBuilder<T extends FormFieldBuilder<T>> {\n", "\n", "    /**\n", "     * Document to be used for form field creation.\n", "     */\n", "    private final PdfDocument document;\n", "    /**\n", "     * Name of the form field.\n", "     */\n", "    private final String formFieldName;\n", "    /**\n", "     * Conformance level of the form field.\n", "     */\n", "    private IConformanceLevel conformanceLevel = null;\n", "\n", "    /**\n", "     * Creates builder for {@link PdfFormField} creation.\n", "     *\n", "     * @param document document to be used for form field creation\n", "     * @param formFieldName name of the form field\n", "     */\n", "    protected FormFieldBuilder(PdfDocument document, String formFieldName) {\n", "        this.document = document;\n", "        this.formFieldName = formFieldName;\n", "        if (document != null) {\n", "            this.conformanceLevel = document.getConformanceLevel();\n", "        }\n", "    }\n", "\n", "    /**\n", "     * Gets document to be used for form field creation.\n", "     *\n", "     * @return {@link PdfDocument} instance\n", "     */\n", "    public PdfDocument getDocument() {\n", "        return document;\n", "    }\n", "\n", "    /**\n", "     * Gets name of the form field.\n", "     *\n", "     * @return name to be used for form field creation\n", "     */\n", "    public String getFormFieldName() {\n", "        return formFieldName;\n", "    }\n", "\n", "    /**\n", "     * Gets conformance level for form field creation.\n", "     *\n", "     * @return instance of {@link PdfAConformanceLevel} to be used for form field creation\n", "     * @deprecated since 8.0.4 will return {@link IConformanceLevel} in next major release\n", "     */\n", "    @Deprecated\n", "    public PdfAConformanceLevel getConformanceLevel() {\n", "        if (conformanceLevel instanceof PdfAConformanceLevel){\n", "            return (PdfAConformanceLevel) conformanceLevel;\n", "        }\n", "        return  null;\n", "    }\n", "\n", "    /**\n", "     * Gets conformance level for form field creation.\n", "     *\n", "     * @return instance of {@link IConformanceLevel} to be used for form field creation\n", "     *\n", "     * @deprecated since 8.0.4 will be renamed to getConformanceLevel()\n", "     */\n", "    @Deprecated\n", "    public IConformanceLevel getGenericConformanceLevel() {\n", "        return conformanceLevel;\n", "    }\n", "\n", "    /**\n", "     * Sets conformance level for form field creation.\n", "     *\n", "     * @param conformanceLevel instance of {@link PdfAConformanceLevel} to be used for form field creation\n", "     * @return this builder\n", "     *\n", "     * @deprecated since 8.0.4 conformance level param will change to {@link IConformanceLevel}\n", "     */\n", "    @Deprecated\n", "    public T setConformanceLevel(PdfAConformanceLevel conformanceLevel) {\n", "        this.conformanceLevel = conformanceLevel;\n", "        return getThis();\n", "    }\n", "\n", "    /**\n", "     * Sets conformance level for form field creation.\n", "     *\n", "     * @param conformanceLevel Instance of {@link IConformanceLevel} to be used for form field creation.\n", "     * @return This builder.\n", "     * @deprecated since 8.0.4 will be renamed to setConformanceLevel\n", "     */\n", "    @Deprecated\n", "    public T setGenericConformanceLevel(IConformanceLevel conformanceLevel) {\n", "        this.conformanceLevel = conformanceLevel;\n", "        return getThis();\n", "    }\n", "\n", "    /**\n", "     * Returns this builder object. Required for superclass methods.\n", "     *\n", "     * @return this builder\n", "     */\n", "    protected abstract T getThis();\n", "}\n"], "test_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.forms.fields;\n", "\n", "import com.itextpdf.kernel.pdf.PdfAConformanceLevel;\n", "import com.itextpdf.kernel.pdf.PdfDocument;\n", "import com.itextpdf.kernel.pdf.PdfUAConformanceLevel;\n", "import com.itextpdf.kernel.pdf.PdfWriter;\n", "import com.itextpdf.test.ExtendedITextTest;\n", "import com.itextpdf.test.annotations.type.UnitTest;\n", "import org.junit.Assert;\n", "import org.junit.Test;\n", "import org.junit.experimental.categories.Category;\n", "\n", "import java.io.ByteArrayOutputStream;\n", "\n", "@Category(UnitTest.class)\n", "public class FormFieldBuilderTest extends ExtendedITextTest {\n", "    private static final PdfDocument DUMMY_DOCUMENT = new PdfDocument(new PdfWriter(new ByteArrayOutputStream()));\n", "    private static final String DUMMY_NAME = \"dummy name\";\n", "\n", "    @Test\n", "    public void constructorTest() {\n", "        TestBuilder builder = new TestBuilder(DUMMY_DOCUMENT, DUMMY_NAME);\n", "\n", "        Assert.assertSame(DUMMY_DOCUMENT, builder.getDocument());\n", "        Assert.assertSame(DUMMY_NAME, builder.getFormFieldName());\n", "    }\n", "\n", "\n", "    @Test\n", "    public void getSetConformanceLevelTest() {\n", "        TestBuilder builder = new TestBuilder(DUMMY_DOCUMENT, DUMMY_NAME);\n", "        builder.setGenericConformanceLevel(PdfAConformanceLevel.PDF_A_1A);\n", "        Assert.assertSame(PdfAConformanceLevel.PDF_A_1A, builder.getGenericConformanceLevel());\n", "    }\n", "\n", "    @Test\n", "    public void getSetConformanceLevelDepreceatedTest() {\n", "        TestBuilder builder = new TestBuilder(DUMMY_DOCUMENT, DUMMY_NAME);\n", "        builder.setConformanceLevel(PdfAConformanceLevel.PDF_A_1A);\n", "        Assert.assertSame(PdfAConformanceLevel.PDF_A_1A, builder.getConformanceLevel());\n", "    }\n", "\n", "\n", "    @Test\n", "    public void getSetConformanceLevelDifferentTest() {\n", "        TestBuilder builder = new TestBuilder(DUMMY_DOCUMENT, DUMMY_NAME);\n", "        builder.setGenericConformanceLevel(PdfUAConformanceLevel.PDFUA_1);\n", "        Assert.assertNull(builder.getConformanceLevel());\n", "    }\n", "\n", "    private static class TestBuilder extends FormFieldBuilder<TestBuilder> {\n", "\n", "        protected TestBuilder(PdfDocument document, String formFieldName) {\n", "            super(document, formFieldName);\n", "        }\n", "\n", "        @Override\n", "        protected TestBuilder getThis() {\n", "            return this;\n", "        }\n", "    }\n", "}\n"], "method_lines_dic": {"FormFieldBuilder::::getDocument()": [68, 70], "FormFieldBuilder::::getFormFieldName()": [77, 79], "FormFieldBuilder::::getConformanceLevel()": [87, 93], "FormFieldBuilder::::getGenericConformanceLevel()": [102, 105], "FormFieldBuilder::::getThis()": [139, 139]}, "test_method_lines_dic": {"FormFieldBuilderTest::::constructorTest()": [42, 48], "FormFieldBuilderTest::::getSetConformanceLevelTest()": [51, 56], "FormFieldBuilderTest::::getSetConformanceLevelDepreceatedTest()": [58, 63], "FormFieldBuilderTest::::getSetConformanceLevelDifferentTest()": [66, 71], "FormFieldBuilderTest.TestBuilder::::getThis()": [79, 82]}, "reverse_method_lines_dic": {"68": "FormFieldBuilder::::getDocument()", "69": "FormFieldBuilder::::getDocument()", "70": "FormFieldBuilder::::getDocument()", "77": "FormFieldBuilder::::getFormFieldName()", "78": "FormFieldBuilder::::getFormFieldName()", "79": "FormFieldBuilder::::getFormFieldName()", "87": "FormFieldBuilder::::getConformanceLevel()", "88": "FormFieldBuilder::::getConformanceLevel()", "89": "FormFieldBuilder::::getConformanceLevel()", "90": "FormFieldBuilder::::getConformanceLevel()", "91": "FormFieldBuilder::::getConformanceLevel()", "92": "FormFieldBuilder::::getConformanceLevel()", "93": "FormFieldBuilder::::getConformanceLevel()", "102": "FormFieldBuilder::::getGenericConformanceLevel()", "103": "FormFieldBuilder::::getGenericConformanceLevel()", "104": "FormFieldBuilder::::getGenericConformanceLevel()", "105": "FormFieldBuilder::::getGenericConformanceLevel()", "139": "FormFieldBuilder::::getThis()"}, "test_reverse_method_lines_dic": {"42": "FormFieldBuilderTest::::constructorTest()", "43": "FormFieldBuilderTest::::constructorTest()", "44": "FormFieldBuilderTest::::constructorTest()", "45": "FormFieldBuilderTest::::constructorTest()", "46": "FormFieldBuilderTest::::constructorTest()", "47": "FormFieldBuilderTest::::constructorTest()", "48": "FormFieldBuilderTest::::constructorTest()", "51": "FormFieldBuilderTest::::getSetConformanceLevelTest()", "52": "FormFieldBuilderTest::::getSetConformanceLevelTest()", "53": "FormFieldBuilderTest::::getSetConformanceLevelTest()", "54": "FormFieldBuilderTest::::getSetConformanceLevelTest()", "55": "FormFieldBuilderTest::::getSetConformanceLevelTest()", "56": "FormFieldBuilderTest::::getSetConformanceLevelTest()", "58": "FormFieldBuilderTest::::getSetConformanceLevelDepreceatedTest()", "59": "FormFieldBuilderTest::::getSetConformanceLevelDepreceatedTest()", "60": "FormFieldBuilderTest::::getSetConformanceLevelDepreceatedTest()", "61": "FormFieldBuilderTest::::getSetConformanceLevelDepreceatedTest()", "62": "FormFieldBuilderTest::::getSetConformanceLevelDepreceatedTest()", "63": "FormFieldBuilderTest::::getSetConformanceLevelDepreceatedTest()", "66": "FormFieldBuilderTest::::getSetConformanceLevelDifferentTest()", "67": "FormFieldBuilderTest::::getSetConformanceLevelDifferentTest()", "68": "FormFieldBuilderTest::::getSetConformanceLevelDifferentTest()", "69": "FormFieldBuilderTest::::getSetConformanceLevelDifferentTest()", "70": "FormFieldBuilderTest::::getSetConformanceLevelDifferentTest()", "71": "FormFieldBuilderTest::::getSetConformanceLevelDifferentTest()", "79": "FormFieldBuilderTest.TestBuilder::::getThis()", "80": "FormFieldBuilderTest.TestBuilder::::getThis()", "81": "FormFieldBuilderTest.TestBuilder::::getThis()", "82": "FormFieldBuilderTest.TestBuilder::::getThis()"}, "tests": [{"test_lines": [42, 48], "covered_lines": [47, 55, 56, 57, 58, 59, 61, 69, 78]}, {"test_lines": [51, 56], "covered_lines": [47, 55, 56, 57, 58, 59, 61, 104, 130, 131]}, {"test_lines": [58, 63], "covered_lines": [47, 55, 56, 57, 58, 59, 61, 89, 90, 117, 118]}, {"test_lines": [66, 71], "covered_lines": [47, 55, 56, 57, 58, 59, 61, 89, 92, 130, 131]}]}, "/bernard/dataset_construction/prep/repos/itext-java/forms/src/main/java/com/itextpdf/forms/fields/TerminalFormFieldBuilder.java": {"class_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.forms.fields;\n", "\n", "import com.itextpdf.kernel.font.PdfFont;\n", "import com.itextpdf.kernel.geom.Rectangle;\n", "import com.itextpdf.kernel.pdf.PdfDocument;\n", "import com.itextpdf.kernel.pdf.PdfPage;\n", "\n", "/**\n", " * Builder for terminal form field.\n", " *\n", " * @param <T> specific terminal form field builder which extends this class.\n", " */\n", "public abstract class TerminalFormFieldBuilder<T extends TerminalFormFieldBuilder<T>> extends FormFieldBuilder<T> {\n", "    /**\n", "     * Rectangle which defines widget placement.\n", "     */\n", "    private Rectangle widgetRectangle = null;\n", "    /**\n", "     * Page number to place widget at.\n", "     */\n", "    private int page = 0;\n", "    private PdfFont font;\n", "\n", "    /**\n", "     * Creates builder for terminal form field creation.\n", "     *\n", "     * @param document document to be used for form field creation\n", "     * @param formFieldName name of the form field\n", "     */\n", "    protected TerminalFormFieldBuilder(PdfDocument document, String formFieldName) {\n", "        super(document, formFieldName);\n", "    }\n", "\n", "    /**\n", "     * Gets rectangle which defines widget's placement.\n", "     *\n", "     * @return instance of {@link Rectangle} for widget placement\n", "     */\n", "    public Rectangle getWidgetRectangle() {\n", "        return widgetRectangle;\n", "    }\n", "\n", "    /**\n", "     * Gets page to be used for widget creation.\n", "     *\n", "     * @return number of page to place widget at\n", "     */\n", "    public int getPage() {\n", "        return page;\n", "    }\n", "\n", "    /**\n", "     * Sets page to be used for widget creation.\n", "     *\n", "     * @param page instance of {@link PdfPage}. Shall belong to already provided {@link PdfDocument}\n", "     * @return this builder\n", "     */\n", "    public T setPage(PdfPage page) {\n", "        this.page = getDocument().getPageNumber(page);\n", "        return getThis();\n", "    }\n", "\n", "    /**\n", "     * Sets page to be used for widget creation.\n", "     *\n", "     * @param page number of page to place widget at\n", "     * @return this builder\n", "     */\n", "    public T setPage(int page) {\n", "        this.page = page;\n", "        return getThis();\n", "    }\n", "\n", "    /**\n", "     * Sets rectangle which defines widget's placement.\n", "     *\n", "     * @param widgetRectangle instance of {@link Rectangle} for widget placement\n", "     * @return this builder\n", "     */\n", "    public T setWidgetRectangle(Rectangle widgetRectangle) {\n", "        this.widgetRectangle = widgetRectangle;\n", "        return getThis();\n", "    }\n", "\n", "    void setPageToField(PdfFormField field) {\n", "        if (page != 0) {\n", "            field.getFirstFormAnnotation().setPage(page);\n", "        }\n", "    }\n", "    void setPageToField(PdfFormAnnotation field) {\n", "        if (page != 0) {\n", "            field.setPage(page);\n", "        }\n", "    }\n", "\n", "    /**\n", "     * Set font to be used for form field creation.\n", "     *\n", "     * @param font instance of {@link PdfFont}.\n", "     *\n", "     * @return this builder\n", "     */\n", "    public T setFont(PdfFont font) {\n", "        this.font = font;\n", "        return getThis();\n", "    }\n", "\n", "    /**\n", "     * Get font to be used for form field creation.\n", "     *\n", "     * @return instance of {@link PdfFont}.\n", "     */\n", "    public PdfFont getFont() {\n", "        return font;\n", "    }\n", "\n", "}\n"], "test_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.forms.fields;\n", "\n", "import com.itextpdf.kernel.geom.Rectangle;\n", "import com.itextpdf.kernel.pdf.PdfDictionary;\n", "import com.itextpdf.kernel.pdf.PdfDocument;\n", "import com.itextpdf.kernel.pdf.PdfPage;\n", "import com.itextpdf.kernel.pdf.PdfWriter;\n", "import com.itextpdf.test.ExtendedITextTest;\n", "import com.itextpdf.test.annotations.type.UnitTest;\n", "import org.junit.Assert;\n", "import org.junit.Test;\n", "import org.junit.experimental.categories.Category;\n", "\n", "import java.io.ByteArrayOutputStream;\n", "\n", "@Category(UnitTest.class)\n", "public class TerminalFormFieldBuilderTest extends ExtendedITextTest {\n", "\n", "    private static final PdfDocument DUMMY_DOCUMENT = new PdfDocument(new PdfWriter(new ByteArrayOutputStream()));\n", "    private static final String DUMMY_NAME = \"dummy name\";\n", "    private static final Rectangle DUMMY_RECTANGLE = new Rectangle(7, 11, 13, 17);\n", "\n", "    @Test\n", "    public void constructorTest() {\n", "        TestBuilder builder = new TestBuilder(DUMMY_DOCUMENT, DUMMY_NAME);\n", "\n", "        Assert.assertSame(DUMMY_DOCUMENT, builder.getDocument());\n", "        Assert.assertSame(DUMMY_NAME, builder.getFormFieldName());\n", "    }\n", "\n", "    @Test\n", "    public void getSetWidgetTest() {\n", "        TestBuilder builder = new TestBuilder(DUMMY_DOCUMENT, DUMMY_NAME);\n", "        builder.setWidgetRectangle(DUMMY_RECTANGLE);\n", "\n", "        Assert.assertSame(DUMMY_RECTANGLE, builder.getWidgetRectangle());\n", "    }\n", "\n", "    @Test\n", "    public void getSetPageTest() {\n", "        TestBuilder builder = new TestBuilder(DUMMY_DOCUMENT, DUMMY_NAME);\n", "        PdfPage page = DUMMY_DOCUMENT.addNewPage();\n", "        builder.setPage(page);\n", "\n", "        Assert.assertEquals(1, builder.getPage());\n", "\n", "        builder.setPage(5);\n", "\n", "        Assert.assertEquals(5, builder.getPage());\n", "    }\n", "\n", "    @Test\n", "    public void setPageToFieldTest() {\n", "        TestBuilder builder = new TestBuilder(DUMMY_DOCUMENT, DUMMY_NAME);\n", "        builder.setPage(5);\n", "\n", "        PdfFormAnnotation formFieldAnnot = new PdfFormAnnotation((PdfDictionary)new PdfDictionary().makeIndirect(DUMMY_DOCUMENT)) {\n", "            @Override\n", "            public PdfFormAnnotation setPage(int pageNum) {\n", "                Assert.assertEquals(5, pageNum);\n", "                return this;\n", "            }\n", "        };\n", "        PdfFormField formField = PdfFormCreator.createFormField(DUMMY_DOCUMENT).addKid(formFieldAnnot);\n", "        builder.setPageToField(formField);\n", "    }\n", "\n", "    private static class TestBuilder extends TerminalFormFieldBuilder<TestBuilder> {\n", "\n", "        protected TestBuilder(PdfDocument document, String formFieldName) {\n", "            super(document, formFieldName);\n", "        }\n", "\n", "        @Override\n", "        protected TestBuilder getThis() {\n", "            return this;\n", "        }\n", "    }\n", "}\n"], "method_lines_dic": {"TerminalFormFieldBuilder::::getWidgetRectangle()": [61, 63], "TerminalFormFieldBuilder::::getPage()": [70, 72], "TerminalFormFieldBuilder::::setPage(int)": [91, 94], "TerminalFormFieldBuilder::::setPageToField(com.itextpdf.forms.fields.PdfFormField)": [107, 111], "TerminalFormFieldBuilder::::setPageToField(com.itextpdf.forms.fields.PdfFormAnnotation)": [112, 116], "TerminalFormFieldBuilder::::getFont()": [135, 137]}, "test_method_lines_dic": {"TerminalFormFieldBuilderTest::::constructorTest()": [45, 51], "TerminalFormFieldBuilderTest::::getSetWidgetTest()": [53, 59], "TerminalFormFieldBuilderTest::::getSetPageTest()": [61, 72], "TerminalFormFieldBuilderTest::::setPageToFieldTest()": [74, 88], "TerminalFormFieldBuilderTest.TestBuilder::::getThis()": [96, 99]}, "reverse_method_lines_dic": {"61": "TerminalFormFieldBuilder::::getWidgetRectangle()", "62": "TerminalFormFieldBuilder::::getWidgetRectangle()", "63": "TerminalFormFieldBuilder::::getWidgetRectangle()", "70": "TerminalFormFieldBuilder::::getPage()", "71": "TerminalFormFieldBuilder::::getPage()", "72": "TerminalFormFieldBuilder::::getPage()", "91": "TerminalFormFieldBuilder::::setPage(int)", "92": "TerminalFormFieldBuilder::::setPage(int)", "93": "TerminalFormFieldBuilder::::setPage(int)", "94": "TerminalFormFieldBuilder::::setPage(int)", "107": "TerminalFormFieldBuilder::::setPageToField(com.itextpdf.forms.fields.PdfFormField)", "108": "TerminalFormFieldBuilder::::setPageToField(com.itextpdf.forms.fields.PdfFormField)", "109": "TerminalFormFieldBuilder::::setPageToField(com.itextpdf.forms.fields.PdfFormField)", "110": "TerminalFormFieldBuilder::::setPageToField(com.itextpdf.forms.fields.PdfFormField)", "111": "TerminalFormFieldBuilder::::setPageToField(com.itextpdf.forms.fields.PdfFormField)", "112": "TerminalFormFieldBuilder::::setPageToField(com.itextpdf.forms.fields.PdfFormAnnotation)", "113": "TerminalFormFieldBuilder::::setPageToField(com.itextpdf.forms.fields.PdfFormAnnotation)", "114": "TerminalFormFieldBuilder::::setPageToField(com.itextpdf.forms.fields.PdfFormAnnotation)", "115": "TerminalFormFieldBuilder::::setPageToField(com.itextpdf.forms.fields.PdfFormAnnotation)", "116": "TerminalFormFieldBuilder::::setPageToField(com.itextpdf.forms.fields.PdfFormAnnotation)", "135": "TerminalFormFieldBuilder::::getFont()", "136": "TerminalFormFieldBuilder::::getFont()", "137": "TerminalFormFieldBuilder::::getFont()"}, "test_reverse_method_lines_dic": {"45": "TerminalFormFieldBuilderTest::::constructorTest()", "46": "TerminalFormFieldBuilderTest::::constructorTest()", "47": "TerminalFormFieldBuilderTest::::constructorTest()", "48": "TerminalFormFieldBuilderTest::::constructorTest()", "49": "TerminalFormFieldBuilderTest::::constructorTest()", "50": "TerminalFormFieldBuilderTest::::constructorTest()", "51": "TerminalFormFieldBuilderTest::::constructorTest()", "53": "TerminalFormFieldBuilderTest::::getSetWidgetTest()", "54": "TerminalFormFieldBuilderTest::::getSetWidgetTest()", "55": "TerminalFormFieldBuilderTest::::getSetWidgetTest()", "56": "TerminalFormFieldBuilderTest::::getSetWidgetTest()", "57": "TerminalFormFieldBuilderTest::::getSetWidgetTest()", "58": "TerminalFormFieldBuilderTest::::getSetWidgetTest()", "59": "TerminalFormFieldBuilderTest::::getSetWidgetTest()", "61": "TerminalFormFieldBuilderTest::::getSetPageTest()", "62": "TerminalFormFieldBuilderTest::::getSetPageTest()", "63": "TerminalFormFieldBuilderTest::::getSetPageTest()", "64": "TerminalFormFieldBuilderTest::::getSetPageTest()", "65": "TerminalFormFieldBuilderTest::::getSetPageTest()", "66": "TerminalFormFieldBuilderTest::::getSetPageTest()", "67": "TerminalFormFieldBuilderTest::::getSetPageTest()", "68": "TerminalFormFieldBuilderTest::::getSetPageTest()", "69": "TerminalFormFieldBuilderTest::::getSetPageTest()", "70": "TerminalFormFieldBuilderTest::::getSetPageTest()", "71": "TerminalFormFieldBuilderTest::::getSetPageTest()", "72": "TerminalFormFieldBuilderTest::::getSetPageTest()", "74": "TerminalFormFieldBuilderTest::::setPageToFieldTest()", "75": "TerminalFormFieldBuilderTest::::setPageToFieldTest()", "76": "TerminalFormFieldBuilderTest::::setPageToFieldTest()", "77": "TerminalFormFieldBuilderTest::::setPageToFieldTest()", "78": "TerminalFormFieldBuilderTest::::setPageToFieldTest()", "79": "TerminalFormFieldBuilderTest::::setPageToFieldTest()", "80": "TerminalFormFieldBuilderTest::::setPageToFieldTest()", "81": "TerminalFormFieldBuilderTest::::setPageToFieldTest()", "82": "TerminalFormFieldBuilderTest::::setPageToFieldTest()", "83": "TerminalFormFieldBuilderTest::::setPageToFieldTest()", "84": "TerminalFormFieldBuilderTest::::setPageToFieldTest()", "85": "TerminalFormFieldBuilderTest::::setPageToFieldTest()", "86": "TerminalFormFieldBuilderTest::::setPageToFieldTest()", "87": "TerminalFormFieldBuilderTest::::setPageToFieldTest()", "88": "TerminalFormFieldBuilderTest::::setPageToFieldTest()", "96": "TerminalFormFieldBuilderTest.TestBuilder::::getThis()", "97": "TerminalFormFieldBuilderTest.TestBuilder::::getThis()", "98": "TerminalFormFieldBuilderTest.TestBuilder::::getThis()", "99": "TerminalFormFieldBuilderTest.TestBuilder::::getThis()"}, "tests": [{"test_lines": [45, 51], "covered_lines": [39, 43, 53, 54]}, {"test_lines": [53, 59], "covered_lines": [39, 43, 53, 54, 62, 103, 104]}, {"test_lines": [61, 72], "covered_lines": [39, 43, 53, 54, 71, 81, 82, 92, 93]}, {"test_lines": [74, 88], "covered_lines": [39, 43, 53, 54, 92, 93, 108, 109, 111]}]}, "/bernard/dataset_construction/prep/repos/itext-java/forms/src/main/java/com/itextpdf/forms/fields/FormsMetaInfoStaticContainer.java": {"class_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.forms.fields;\n", "\n", "import com.itextpdf.commons.utils.Action;\n", "import com.itextpdf.layout.renderer.MetaInfoContainer;\n", "\n", "/**\n", " * Class to store meta info that will be used in forms module in static context.\n", " */\n", "public final class FormsMetaInfoStaticContainer {\n", "\n", "    private static ThreadLocal<MetaInfoContainer> metaInfoForLayout = new ThreadLocal<>();\n", "\n", "    private FormsMetaInfoStaticContainer() {\n", "        // Empty constructor.\n", "    }\n", "\n", "    /**\n", "     * Sets meta info related to forms into static context, executes the action and then cleans meta info.\n", "     *\n", "     * <p>\n", "     * Keep in mind that this instance will only be accessible from the same thread.\n", "     *\n", "     * @param metaInfoContainer instance to be set.\n", "     * @param action action which will be executed while meta info is set to static context.\n", "     */\n", "    // TODO DEVSIX-6368 We want to prevent customer code being run while meta info is in the static context\n", "    public static void useMetaInfoDuringTheAction(MetaInfoContainer metaInfoContainer, Action action) {\n", "        try {\n", "            metaInfoForLayout.set(metaInfoContainer);\n", "            action.execute();\n", "        } finally {\n", "            metaInfoForLayout.set(null);\n", "        }\n", "    }\n", "\n", "    /**\n", "     * Gets meta info which was set previously.\n", "     *\n", "     * <p>\n", "     * Keep in mind that this operation will return meta info instance which was set previously from the same thread.\n", "     *\n", "     * @return meta info instance.\n", "     */\n", "    static MetaInfoContainer getMetaInfoForLayout() {\n", "        return metaInfoForLayout.get();\n", "    }\n", "}\n"], "test_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.forms.fields;\n", "\n", "import com.itextpdf.commons.actions.contexts.IMetaInfo;\n", "import com.itextpdf.layout.renderer.MetaInfoContainer;\n", "import com.itextpdf.test.ExtendedITextTest;\n", "import com.itextpdf.test.annotations.type.UnitTest;\n", "import org.junit.Assert;\n", "import org.junit.Test;\n", "import org.junit.experimental.categories.Category;\n", "\n", "@Category(UnitTest.class)\n", "public class FormsMetaInfoStaticContainerTest extends ExtendedITextTest {\n", "\n", "    @Test\n", "    public void useMetaInfoDuringTheActionOneThreadTest() {\n", "        MetaInfoContainer metaInfo1 = new MetaInfoContainer(new IMetaInfo() {});\n", "        MetaInfoContainer metaInfo2 = new MetaInfoContainer(new IMetaInfo() {});\n", "\n", "        FormsMetaInfoStaticContainer.useMetaInfoDuringTheAction(metaInfo1, () -> {\n", "            Assert.assertSame(metaInfo1, FormsMetaInfoStaticContainer.getMetaInfoForLayout());\n", "\n", "            FormsMetaInfoStaticContainer.useMetaInfoDuringTheAction(metaInfo2,\n", "                    () -> Assert.assertSame(metaInfo2, FormsMetaInfoStaticContainer.getMetaInfoForLayout()));\n", "\n", "            Assert.assertNull(FormsMetaInfoStaticContainer.getMetaInfoForLayout());\n", "        });\n", "\n", "        Assert.assertNull(FormsMetaInfoStaticContainer.getMetaInfoForLayout());\n", "    }\n", "\n", "    @Test\n", "    public void useMetaInfoDuringTheActionSeveralThreadsTest() throws InterruptedException {\n", "        MetaInfoCheckClass metaInfoCheckClass1 = new MetaInfoCheckClass(null);\n", "        MetaInfoCheckClass metaInfoCheckClass2 = new MetaInfoCheckClass(metaInfoCheckClass1);\n", "        MetaInfoCheckClass metaInfoCheckClass3 = new MetaInfoCheckClass(metaInfoCheckClass2);\n", "\n", "        Thread thread = new Thread(() -> metaInfoCheckClass3.checkMetaInfo());\n", "        thread.start();\n", "        thread.join();\n", "\n", "        Assert.assertFalse(metaInfoCheckClass1.isCheckFailed());\n", "        Assert.assertFalse(metaInfoCheckClass2.isCheckFailed());\n", "        Assert.assertFalse(metaInfoCheckClass3.isCheckFailed());\n", "    }\n", "\n", "    private static class MetaInfoCheckClass {\n", "\n", "        private MetaInfoCheckClass metaInfoCheckClass = null;\n", "        private boolean checkFailed = false;\n", "\n", "        public MetaInfoCheckClass(MetaInfoCheckClass metaInfoCheckClass) {\n", "            this.metaInfoCheckClass = metaInfoCheckClass;\n", "        }\n", "\n", "        public void checkMetaInfo() {\n", "            MetaInfoContainer metaInfo = new MetaInfoContainer(new IMetaInfo() {\n", "            });\n", "\n", "            FormsMetaInfoStaticContainer.useMetaInfoDuringTheAction(metaInfo, () -> {\n", "                if (metaInfoCheckClass != null) {\n", "                    Thread thread = new Thread(() -> metaInfoCheckClass.checkMetaInfo());\n", "                    thread.start();\n", "                    try {\n", "                        thread.join();\n", "                    } catch (Exception ignored) {\n", "                        checkFailed = true;\n", "                    }\n", "                }\n", "\n", "                checkFailed |= metaInfo != FormsMetaInfoStaticContainer.getMetaInfoForLayout();\n", "            });\n", "\n", "            checkFailed |= FormsMetaInfoStaticContainer.getMetaInfoForLayout() != null;\n", "        }\n", "\n", "        public boolean isCheckFailed() {\n", "            return checkFailed;\n", "        }\n", "    }\n", "}\n"], "method_lines_dic": {"FormsMetaInfoStaticContainer::::getMetaInfoForLayout()": [66, 68]}, "test_method_lines_dic": {"FormsMetaInfoStaticContainerTest::::useMetaInfoDuringTheActionOneThreadTest()": [36, 51], "FormsMetaInfoStaticContainerTest::::useMetaInfoDuringTheActionSeveralThreadsTest()": [53, 66], "FormsMetaInfoStaticContainerTest.MetaInfoCheckClass::::checkMetaInfo()": [77, 96], "FormsMetaInfoStaticContainerTest.MetaInfoCheckClass::::isCheckFailed()": [98, 100]}, "reverse_method_lines_dic": {"66": "FormsMetaInfoStaticContainer::::getMetaInfoForLayout()", "67": "FormsMetaInfoStaticContainer::::getMetaInfoForLayout()", "68": "FormsMetaInfoStaticContainer::::getMetaInfoForLayout()"}, "test_reverse_method_lines_dic": {"36": "FormsMetaInfoStaticContainerTest::::useMetaInfoDuringTheActionOneThreadTest()", "37": "FormsMetaInfoStaticContainerTest::::useMetaInfoDuringTheActionOneThreadTest()", "38": "FormsMetaInfoStaticContainerTest::::useMetaInfoDuringTheActionOneThreadTest()", "39": "FormsMetaInfoStaticContainerTest::::useMetaInfoDuringTheActionOneThreadTest()", "40": "FormsMetaInfoStaticContainerTest::::useMetaInfoDuringTheActionOneThreadTest()", "41": "FormsMetaInfoStaticContainerTest::::useMetaInfoDuringTheActionOneThreadTest()", "42": "FormsMetaInfoStaticContainerTest::::useMetaInfoDuringTheActionOneThreadTest()", "43": "FormsMetaInfoStaticContainerTest::::useMetaInfoDuringTheActionOneThreadTest()", "44": "FormsMetaInfoStaticContainerTest::::useMetaInfoDuringTheActionOneThreadTest()", "45": "FormsMetaInfoStaticContainerTest::::useMetaInfoDuringTheActionOneThreadTest()", "46": "FormsMetaInfoStaticContainerTest::::useMetaInfoDuringTheActionOneThreadTest()", "47": "FormsMetaInfoStaticContainerTest::::useMetaInfoDuringTheActionOneThreadTest()", "48": "FormsMetaInfoStaticContainerTest::::useMetaInfoDuringTheActionOneThreadTest()", "49": "FormsMetaInfoStaticContainerTest::::useMetaInfoDuringTheActionOneThreadTest()", "50": "FormsMetaInfoStaticContainerTest::::useMetaInfoDuringTheActionOneThreadTest()", "51": "FormsMetaInfoStaticContainerTest::::useMetaInfoDuringTheActionOneThreadTest()", "53": "FormsMetaInfoStaticContainerTest::::useMetaInfoDuringTheActionSeveralThreadsTest()", "54": "FormsMetaInfoStaticContainerTest::::useMetaInfoDuringTheActionSeveralThreadsTest()", "55": "FormsMetaInfoStaticContainerTest::::useMetaInfoDuringTheActionSeveralThreadsTest()", "56": "FormsMetaInfoStaticContainerTest::::useMetaInfoDuringTheActionSeveralThreadsTest()", "57": "FormsMetaInfoStaticContainerTest::::useMetaInfoDuringTheActionSeveralThreadsTest()", "58": "FormsMetaInfoStaticContainerTest::::useMetaInfoDuringTheActionSeveralThreadsTest()", "59": "FormsMetaInfoStaticContainerTest::::useMetaInfoDuringTheActionSeveralThreadsTest()", "60": "FormsMetaInfoStaticContainerTest::::useMetaInfoDuringTheActionSeveralThreadsTest()", "61": "FormsMetaInfoStaticContainerTest::::useMetaInfoDuringTheActionSeveralThreadsTest()", "62": "FormsMetaInfoStaticContainerTest::::useMetaInfoDuringTheActionSeveralThreadsTest()", "63": "FormsMetaInfoStaticContainerTest::::useMetaInfoDuringTheActionSeveralThreadsTest()", "64": "FormsMetaInfoStaticContainerTest::::useMetaInfoDuringTheActionSeveralThreadsTest()", "65": "FormsMetaInfoStaticContainerTest::::useMetaInfoDuringTheActionSeveralThreadsTest()", "66": "FormsMetaInfoStaticContainerTest::::useMetaInfoDuringTheActionSeveralThreadsTest()", "77": "FormsMetaInfoStaticContainerTest.MetaInfoCheckClass::::checkMetaInfo()", "78": "FormsMetaInfoStaticContainerTest.MetaInfoCheckClass::::checkMetaInfo()", "79": "FormsMetaInfoStaticContainerTest.MetaInfoCheckClass::::checkMetaInfo()", "80": "FormsMetaInfoStaticContainerTest.MetaInfoCheckClass::::checkMetaInfo()", "81": "FormsMetaInfoStaticContainerTest.MetaInfoCheckClass::::checkMetaInfo()", "82": "FormsMetaInfoStaticContainerTest.MetaInfoCheckClass::::checkMetaInfo()", "83": "FormsMetaInfoStaticContainerTest.MetaInfoCheckClass::::checkMetaInfo()", "84": "FormsMetaInfoStaticContainerTest.MetaInfoCheckClass::::checkMetaInfo()", "85": "FormsMetaInfoStaticContainerTest.MetaInfoCheckClass::::checkMetaInfo()", "86": "FormsMetaInfoStaticContainerTest.MetaInfoCheckClass::::checkMetaInfo()", "87": "FormsMetaInfoStaticContainerTest.MetaInfoCheckClass::::checkMetaInfo()", "88": "FormsMetaInfoStaticContainerTest.MetaInfoCheckClass::::checkMetaInfo()", "89": "FormsMetaInfoStaticContainerTest.MetaInfoCheckClass::::checkMetaInfo()", "90": "FormsMetaInfoStaticContainerTest.MetaInfoCheckClass::::checkMetaInfo()", "91": "FormsMetaInfoStaticContainerTest.MetaInfoCheckClass::::checkMetaInfo()", "92": "FormsMetaInfoStaticContainerTest.MetaInfoCheckClass::::checkMetaInfo()", "93": "FormsMetaInfoStaticContainerTest.MetaInfoCheckClass::::checkMetaInfo()", "94": "FormsMetaInfoStaticContainerTest.MetaInfoCheckClass::::checkMetaInfo()", "95": "FormsMetaInfoStaticContainerTest.MetaInfoCheckClass::::checkMetaInfo()", "96": "FormsMetaInfoStaticContainerTest.MetaInfoCheckClass::::checkMetaInfo()", "98": "FormsMetaInfoStaticContainerTest.MetaInfoCheckClass::::isCheckFailed()", "99": "FormsMetaInfoStaticContainerTest.MetaInfoCheckClass::::isCheckFailed()", "100": "FormsMetaInfoStaticContainerTest.MetaInfoCheckClass::::isCheckFailed()"}, "tests": [{"test_lines": [36, 51], "covered_lines": [33, 51, 52, 54, 55, 56, 67]}, {"test_lines": [53, 66], "covered_lines": [33, 51, 52, 54, 55, 56, 67]}]}, "/bernard/dataset_construction/prep/repos/itext-java/forms/src/main/java/com/itextpdf/forms/form/element/InputField.java": {"class_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.forms.form.element;\n", "\n", "import com.itextpdf.forms.FormDefaultAccessibilityProperties;\n", "import com.itextpdf.forms.exceptions.FormsExceptionMessageConstant;\n", "import com.itextpdf.forms.form.FormProperty;\n", "import com.itextpdf.forms.form.renderer.InputFieldRenderer;\n", "import com.itextpdf.kernel.pdf.tagutils.AccessibilityProperties;\n", "import com.itextpdf.layout.element.Paragraph;\n", "import com.itextpdf.layout.properties.BoxSizingPropertyValue;\n", "import com.itextpdf.layout.properties.Property;\n", "import com.itextpdf.layout.properties.UnitValue;\n", "import com.itextpdf.layout.renderer.IRenderer;\n", "\n", "/**\n", " * Extension of the {@link FormField} class representing a button so that\n", " * a {@link InputFieldRenderer} is used.\n", " */\n", "public class InputField extends FormField<InputField> implements IPlaceholderable {\n", "\n", "    /**\n", "     * Default padding X offset.\n", "     */\n", "    private static final float X_OFFSET = 2;\n", "\n", "    /**\n", "     * The placeholder paragraph.\n", "     */\n", "    private Paragraph placeholder;\n", "\n", "    /**\n", "     * Field rotation, counterclockwise. Must be a multiple of 90 degrees.\n", "     */\n", "    private int rotation = 0;\n", "\n", "    /**\n", "     * Creates a new input field.\n", "     *\n", "     * @param id the id\n", "     */\n", "    public InputField(String id) {\n", "        super(id);\n", "        setProperties();\n", "    }\n", "\n", "    /**\n", "     * Determines, whether the input field will be password.\n", "     * \n", "     * <p>\n", "     * Usually means that instead of glyphs '*' will be shown in case of flatten field.\n", "     * \n", "     * <p>\n", "     * If the field is not flatten, value will be ignored.\n", "     * \n", "     * @param isPassword {@code true} is this field shall be considered as password, {@code false} otherwise\n", "     * \n", "     * @return this input field\n", "     */\n", "    public InputField useAsPassword(boolean isPassword) {\n", "        setProperty(FormProperty.FORM_FIELD_PASSWORD_FLAG, isPassword);\n", "        return this;\n", "    }\n", "\n", "    /**\n", "     * {@inheritDoc}\n", "     */\n", "    @Override\n", "    public Paragraph getPlaceholder() {\n", "        return placeholder;\n", "    }\n", "\n", "    /**\n", "     * {@inheritDoc}\n", "     */\n", "    @Override\n", "    public void setPlaceholder(Paragraph placeholder) {\n", "        this.placeholder = placeholder;\n", "    }\n", "\n", "    /* (non-Javadoc)\n", "     * @see FormField#getDefaultProperty(int)\n", "     */\n", "    @Override\n", "    public <T1> T1 getDefaultProperty(int property) {\n", "        switch (property) {\n", "            case FormProperty.FORM_FIELD_PASSWORD_FLAG:\n", "                return (T1) (Object) false;\n", "            case FormProperty.FORM_FIELD_SIZE:\n", "                return (T1) (Object) 20;\n", "            default:\n", "                return super.<T1>getDefaultProperty(property);\n", "        }\n", "    }\n", "\n", "    /**\n", "     * Get rotation.\n", "     *\n", "     * @return rotation value.\n", "     */\n", "    public int getRotation() {\n", "        return this.rotation;\n", "    }\n", "\n", "    /**\n", "     * Set rotation of the input field.\n", "     *\n", "     * @param rotation new rotation value, counterclockwise. Must be a multiple of 90 degrees.\n", "     *                 It has sense only in interactive mode, see {@link FormField#setInteractive}.\n", "     *\n", "     * @return the edited {@link InputField}.\n", "     */\n", "    public InputField setRotation(int rotation) {\n", "        if (rotation % 90 != 0) {\n", "            throw new IllegalArgumentException(FormsExceptionMessageConstant.INVALID_ROTATION_VALUE);\n", "        }\n", "\n", "        this.rotation = rotation;\n", "        return this;\n", "    }\n", "\n", "    /**\n", "     * {@inheritDoc}\n", "     */\n", "    @Override\n", "    public AccessibilityProperties getAccessibilityProperties() {\n", "        if (tagProperties == null) {\n", "            tagProperties = new FormDefaultAccessibilityProperties(FormDefaultAccessibilityProperties.FORM_FIELD_TEXT);\n", "        }\n", "\n", "        return tagProperties;\n", "    }\n", "\n", "    /* (non-Javadoc)\n", "     * @see com.itextpdf.layout.element.AbstractElement#makeNewRenderer()\n", "     */\n", "    @Override\n", "    protected IRenderer makeNewRenderer() {\n", "        return new InputFieldRenderer(this);\n", "    }\n", "\n", "    private void setProperties() {\n", "        setProperty(Property.PADDING_LEFT, UnitValue.createPointValue(X_OFFSET));\n", "        setProperty(Property.PADDING_RIGHT, UnitValue.createPointValue(X_OFFSET));\n", "        setProperty(Property.BOX_SIZING, BoxSizingPropertyValue.BORDER_BOX);\n", "    }\n", "}\n"], "test_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.forms.form.element;\n", "\n", "import com.itextpdf.forms.PdfAcroForm;\n", "import com.itextpdf.forms.exceptions.FormsExceptionMessageConstant;\n", "import com.itextpdf.forms.fields.PdfFormField;\n", "import com.itextpdf.forms.fields.TextFormFieldBuilder;\n", "import com.itextpdf.forms.form.FormProperty;\n", "import com.itextpdf.io.font.constants.StandardFonts;\n", "import com.itextpdf.kernel.colors.ColorConstants;\n", "import com.itextpdf.kernel.font.PdfFontFactory;\n", "import com.itextpdf.kernel.geom.Rectangle;\n", "import com.itextpdf.kernel.pdf.PdfDocument;\n", "import com.itextpdf.kernel.pdf.PdfPage;\n", "import com.itextpdf.kernel.pdf.PdfWriter;\n", "import com.itextpdf.kernel.utils.CompareTool;\n", "import com.itextpdf.layout.Document;\n", "import com.itextpdf.layout.borders.Border;\n", "import com.itextpdf.layout.borders.DashedBorder;\n", "import com.itextpdf.layout.borders.SolidBorder;\n", "import com.itextpdf.layout.element.Div;\n", "import com.itextpdf.layout.properties.BoxSizingPropertyValue;\n", "import com.itextpdf.layout.properties.Property;\n", "import com.itextpdf.layout.properties.TextAlignment;\n", "import com.itextpdf.layout.properties.UnitValue;\n", "import com.itextpdf.test.ExtendedITextTest;\n", "import com.itextpdf.test.annotations.type.IntegrationTest;\n", "\n", "import java.io.IOException;\n", "import org.junit.Assert;\n", "import org.junit.BeforeClass;\n", "import org.junit.Test;\n", "import org.junit.experimental.categories.Category;\n", "\n", "@Category(IntegrationTest.class)\n", "public class InputFieldTest extends ExtendedITextTest {\n", "    public static final String SOURCE_FOLDER =\n", "            \"./src/test/resources/com/itextpdf/forms/form/element/InputFieldTest/\";\n", "    public static final String DESTINATION_FOLDER =\n", "            \"./target/test/com/itextpdf/forms/form/element/InputFieldTest/\";\n", "\n", "    @BeforeClass\n", "    public static void beforeClass() {\n", "        createOrClearDestinationFolder(DESTINATION_FOLDER);\n", "    }\n", "\n", "    @Test\n", "    public void basicInputFieldTest() throws IOException, InterruptedException {\n", "        String outPdf = DESTINATION_FOLDER + \"basicInputField.pdf\";\n", "        String cmpPdf = SOURCE_FOLDER + \"cmp_basicInputField.pdf\";\n", "\n", "        try (Document document = new Document(new PdfDocument(new PdfWriter(outPdf)))) {\n", "            InputField formInputField = new InputField(\"form input field\");\n", "            formInputField.setProperty(FormProperty.FORM_FIELD_FLATTEN, false);\n", "            formInputField.setProperty(FormProperty.FORM_FIELD_VALUE, \"form input field\");\n", "            document.add(formInputField);\n", "\n", "            InputField flattenInputField = new InputField(\"flatten input field\");\n", "            flattenInputField.setProperty(FormProperty.FORM_FIELD_FLATTEN, true);\n", "            flattenInputField.setProperty(FormProperty.FORM_FIELD_VALUE, \"flatten input field\");\n", "            document.add(flattenInputField);\n", "        }\n", "\n", "        Assert.assertNull(new CompareTool().compareByContent(outPdf, cmpPdf, DESTINATION_FOLDER));\n", "    }\n", "\n", "    @Test\n", "    public void noValueInputFieldTest() throws IOException, InterruptedException {\n", "        String outPdf = DESTINATION_FOLDER + \"noValueInputField.pdf\";\n", "        String cmpPdf = SOURCE_FOLDER + \"cmp_noValueInputField.pdf\";\n", "\n", "        try (Document document = new Document(new PdfDocument(new PdfWriter(outPdf)))) {\n", "            InputField flattenInputField = new InputField(\"no value input field\");\n", "            flattenInputField.setProperty(FormProperty.FORM_FIELD_FLATTEN, null);\n", "            flattenInputField.setProperty(FormProperty.FORM_FIELD_VALUE, null);\n", "            flattenInputField.setProperty(Property.BORDER, new SolidBorder(2f));\n", "            document.add(flattenInputField);\n", "        }\n", "\n", "        Assert.assertNull(new CompareTool().compareByContent(outPdf, cmpPdf, DESTINATION_FOLDER));\n", "    }\n", "\n", "    @Test\n", "    public void inputFieldDoesNotFitTest() throws IOException, InterruptedException {\n", "        String outPdf = DESTINATION_FOLDER + \"inputFieldDoesNotFit.pdf\";\n", "        String cmpPdf = SOURCE_FOLDER + \"cmp_inputFieldDoesNotFit.pdf\";\n", "\n", "        try (Document document = new Document(new PdfDocument(new PdfWriter(outPdf)))) {\n", "            Div div = new Div();\n", "            div.setWidth(UnitValue.createPointValue(400));\n", "            div.setHeight(UnitValue.createPointValue(752));\n", "            div.setBackgroundColor(ColorConstants.PINK);\n", "            document.add(div);\n", "\n", "            InputField flattenInputField = new InputField(\"input field does not fit\");\n", "            flattenInputField.setProperty(FormProperty.FORM_FIELD_FLATTEN, true);\n", "            flattenInputField.setProperty(FormProperty.FORM_FIELD_VALUE, \"input field does not fit\");\n", "            flattenInputField.setProperty(Property.BORDER, new SolidBorder(2f));\n", "            document.add(flattenInputField);\n", "        }\n", "\n", "        Assert.assertNull(new CompareTool().compareByContent(outPdf, cmpPdf, DESTINATION_FOLDER));\n", "    }\n", "\n", "    @Test\n", "    public void inputFieldWithLangTest() throws IOException, InterruptedException {\n", "        String outPdf = DESTINATION_FOLDER + \"inputFieldWithLang.pdf\";\n", "        String cmpPdf = SOURCE_FOLDER + \"cmp_inputFieldWithLang.pdf\";\n", "\n", "        try (Document document = new Document(new PdfDocument(new PdfWriter(outPdf)))) {\n", "            document.getPdfDocument().setTagged();\n", "            InputField flattenInputField = new InputField(\"input field with lang\");\n", "            flattenInputField.setProperty(FormProperty.FORM_FIELD_FLATTEN, false);\n", "            flattenInputField.setProperty(FormProperty.FORM_FIELD_VALUE, \"input field with lang\");\n", "\n", "            flattenInputField.setProperty(FormProperty.FORM_ACCESSIBILITY_LANGUAGE, \"random_lang\");\n", "            flattenInputField.setProperty(Property.BORDER, new SolidBorder(2f));\n", "            document.add(flattenInputField);\n", "        }\n", "\n", "        Assert.assertNull(new CompareTool().compareByContent(outPdf, cmpPdf, DESTINATION_FOLDER));\n", "    }\n", "\n", "    @Test\n", "    public void inputFieldWithNullLangTest() throws IOException, InterruptedException {\n", "        String outPdf = DESTINATION_FOLDER + \"inputFieldWithNullLang.pdf\";\n", "        String cmpPdf = SOURCE_FOLDER + \"cmp_inputFieldWithNullLang.pdf\";\n", "\n", "        try (Document document = new Document(new PdfDocument(new PdfWriter(outPdf)))) {\n", "            document.getPdfDocument().setTagged();\n", "            InputField flattenInputField = new InputField(\"input field with null lang\");\n", "            flattenInputField.setProperty(FormProperty.FORM_FIELD_FLATTEN, false);\n", "            flattenInputField.setProperty(FormProperty.FORM_FIELD_VALUE, \"input field with null lang\");\n", "\n", "            flattenInputField.setProperty(FormProperty.FORM_ACCESSIBILITY_LANGUAGE, null);\n", "            flattenInputField.setProperty(Property.BORDER, new SolidBorder(2f));\n", "            document.add(flattenInputField);\n", "        }\n", "\n", "        Assert.assertNull(new CompareTool().compareByContent(outPdf, cmpPdf, DESTINATION_FOLDER));\n", "    }\n", "\n", "    @Test\n", "    public void inputFieldWithPasswordTest() throws IOException, InterruptedException {\n", "        String outPdf = DESTINATION_FOLDER + \"inputFieldWithPassword.pdf\";\n", "        String cmpPdf = SOURCE_FOLDER + \"cmp_inputFieldWithPassword.pdf\";\n", "\n", "        try (Document document = new Document(new PdfDocument(new PdfWriter(outPdf)))) {\n", "            InputField formInputField = new InputField(\"form input field with password\");\n", "            formInputField.setProperty(FormProperty.FORM_FIELD_FLATTEN, false);\n", "            formInputField.setProperty(FormProperty.FORM_FIELD_VALUE, \"form input field with password\");\n", "            formInputField.setProperty(Property.BORDER, new SolidBorder(2f));\n", "            formInputField.setProperty(FormProperty.FORM_FIELD_PASSWORD_FLAG, true);\n", "            document.add(formInputField);\n", "\n", "            InputField flattenInputField = new InputField(\"flatten input field with password\");\n", "            flattenInputField.setProperty(FormProperty.FORM_FIELD_FLATTEN, true);\n", "            flattenInputField.setProperty(FormProperty.FORM_FIELD_VALUE, \"flatten input field with password\");\n", "            flattenInputField.setProperty(Property.BORDER, new SolidBorder(2f));\n", "            flattenInputField.setProperty(FormProperty.FORM_FIELD_PASSWORD_FLAG, true);\n", "            document.add(flattenInputField);\n", "        }\n", "\n", "        Assert.assertNull(new CompareTool().compareByContent(outPdf, cmpPdf, DESTINATION_FOLDER));\n", "    }\n", "\n", "    @Test\n", "    public void heightInputFieldTest() throws IOException, InterruptedException {\n", "        String outPdf = DESTINATION_FOLDER + \"heightInputField.pdf\";\n", "        String cmpPdf = SOURCE_FOLDER + \"cmp_heightInputField.pdf\";\n", "\n", "        try (Document document = new Document(new PdfDocument(new PdfWriter(outPdf)))) {\n", "            InputField flattenInputField = new InputField(\"flatten input field with height\");\n", "            flattenInputField.setProperty(FormProperty.FORM_FIELD_FLATTEN, true);\n", "            flattenInputField.setProperty(FormProperty.FORM_FIELD_VALUE, \"flatten input field with height\");\n", "            flattenInputField.setProperty(Property.HEIGHT, new UnitValue(UnitValue.POINT, 100));\n", "            flattenInputField.setProperty(Property.BORDER, new SolidBorder(2f));\n", "            document.add(flattenInputField);\n", "        }\n", "\n", "        Assert.assertNull(new CompareTool().compareByContent(outPdf, cmpPdf, DESTINATION_FOLDER));\n", "    }\n", "\n", "    @Test\n", "    public void minHeightInputFieldTest() throws IOException, InterruptedException {\n", "        String outPdf = DESTINATION_FOLDER + \"minHeightInputField.pdf\";\n", "        String cmpPdf = SOURCE_FOLDER + \"cmp_minHeightInputField.pdf\";\n", "\n", "        try (Document document = new Document(new PdfDocument(new PdfWriter(outPdf)))) {\n", "            InputField flattenInputField = new InputField(\"flatten input field with height\");\n", "            flattenInputField.setProperty(FormProperty.FORM_FIELD_FLATTEN, true);\n", "            flattenInputField.setProperty(FormProperty.FORM_FIELD_VALUE, \"flatten input field with height\");\n", "            flattenInputField.setProperty(Property.MIN_HEIGHT, new UnitValue(UnitValue.POINT, 100));\n", "            flattenInputField.setProperty(Property.BORDER, new SolidBorder(2f));\n", "            document.add(flattenInputField);\n", "        }\n", "\n", "        Assert.assertNull(new CompareTool().compareByContent(outPdf, cmpPdf, DESTINATION_FOLDER));\n", "    }\n", "\n", "    @Test\n", "    public void maxHeightInputFieldTest() throws IOException, InterruptedException {\n", "        String outPdf = DESTINATION_FOLDER + \"maxHeightInputField.pdf\";\n", "        String cmpPdf = SOURCE_FOLDER + \"cmp_maxHeightInputField.pdf\";\n", "\n", "        try (Document document = new Document(new PdfDocument(new PdfWriter(outPdf)))) {\n", "            InputField flattenInputField = new InputField(\"flatten input field with height\");\n", "            flattenInputField.setProperty(FormProperty.FORM_FIELD_FLATTEN, true);\n", "            flattenInputField.setProperty(FormProperty.FORM_FIELD_VALUE, \"flatten input field with height\");\n", "            flattenInputField.setProperty(Property.MAX_HEIGHT, new UnitValue(UnitValue.POINT, 10));\n", "            flattenInputField.setProperty(Property.BORDER, new SolidBorder(2f));\n", "            document.add(flattenInputField);\n", "        }\n", "\n", "        Assert.assertNull(new CompareTool().compareByContent(outPdf, cmpPdf, DESTINATION_FOLDER));\n", "    }\n", "\n", "    @Test\n", "    public void inputFieldWithJustificationTest() throws IOException, InterruptedException {\n", "        String outPdf = DESTINATION_FOLDER + \"inputFieldWithJustification.pdf\";\n", "        String cmpPdf = SOURCE_FOLDER + \"cmp_inputFieldWithJustification.pdf\";\n", "\n", "        try (Document document = new Document(new PdfDocument(new PdfWriter(outPdf)))) {\n", "            InputField flattenInputField = new InputField(\"input field\");\n", "            flattenInputField.setValue(\"input field\");\n", "            flattenInputField.setInteractive(true);\n", "            flattenInputField.setTextAlignment(TextAlignment.CENTER);\n", "            document.add(flattenInputField);\n", "        }\n", "\n", "        Assert.assertNull(new CompareTool().compareByContent(outPdf, cmpPdf, DESTINATION_FOLDER));\n", "    }\n", "\n", "    @Test\n", "    public void inputFieldWithBorderTest() throws IOException, InterruptedException {\n", "        String outPdf = DESTINATION_FOLDER + \"inputFieldWithBorder.pdf\";\n", "        String cmpPdf = SOURCE_FOLDER + \"cmp_inputFieldWithBorder.pdf\";\n", "\n", "        try (Document document = new Document(new PdfDocument(new PdfWriter(outPdf)))) {\n", "            InputField flattenInputField = new InputField(\"input field\");\n", "            flattenInputField.setValue(\"input field\");\n", "            flattenInputField.setInteractive(true);\n", "            flattenInputField.setBorder(new DashedBorder(ColorConstants.ORANGE, 10));\n", "            document.add(flattenInputField);\n", "        }\n", "\n", "        Assert.assertNull(new CompareTool().compareByContent(outPdf, cmpPdf, DESTINATION_FOLDER));\n", "    }\n", "\n", "    @Test\n", "    public void rotationTest() throws IOException, InterruptedException {\n", "        String outPdf = DESTINATION_FOLDER + \"rotationTest.pdf\";\n", "        String cmpPdf = SOURCE_FOLDER + \"cmp_rotationTest.pdf\";\n", "        try (Document document = new Document(new PdfDocument(new PdfWriter(outPdf)))) {\n", "            String value = \"Long long text\";\n", "            Border border = new SolidBorder(ColorConstants.BLUE, 1);\n", "\n", "            InputField inputField0 = new InputField(\"1\");\n", "            inputField0.setValue(value);\n", "            inputField0.setHeight(50);\n", "            inputField0.setWidth(100);\n", "            inputField0.setBorder(border);\n", "            inputField0.setInteractive(true);\n", "            document.add(inputField0);\n", "\n", "            InputField inputField90 = new InputField(\"1\");\n", "            inputField90.setValue(value);\n", "            inputField90.setHeight(50);\n", "            inputField90.setWidth(100);\n", "            inputField90.setBorder(border);\n", "            inputField90.setInteractive(true);\n", "            inputField90.setRotation(90);\n", "            document.add(inputField90);\n", "\n", "            InputField inputField180 = new InputField(\"1\");\n", "            inputField180.setValue(value);\n", "            inputField180.setHeight(50);\n", "            inputField180.setWidth(100);\n", "            inputField180.setBorder(border);\n", "            inputField180.setInteractive(true);\n", "            inputField180.setRotation(180);\n", "            document.add(inputField180);\n", "\n", "            InputField inputField270 = new InputField(\"1\");\n", "            inputField270.setValue(value);\n", "            inputField270.setHeight(50);\n", "            inputField270.setWidth(100);\n", "            inputField270.setBorder(border);\n", "            inputField270.setInteractive(true);\n", "            inputField270.setRotation(270);\n", "            document.add(inputField270);\n", "\n", "            InputField inputField45 = new InputField(\"1\");\n", "            Exception exception = Assert.assertThrows(IllegalArgumentException.class,\n", "                    () -> inputField45.setRotation(45));\n", "            Assert.assertEquals(FormsExceptionMessageConstant.INVALID_ROTATION_VALUE, exception.getMessage());\n", "        }\n", "\n", "        Assert.assertNull(new CompareTool().compareByContent(outPdf, cmpPdf, DESTINATION_FOLDER, \"diff\"));\n", "    }\n", "\n", "    @Test\n", "    public void borderBoxesTest() throws IOException, InterruptedException {\n", "        String outPdf = DESTINATION_FOLDER + \"borderBoxes.pdf\";\n", "        String cmpPdf = SOURCE_FOLDER + \"cmp_borderBoxes.pdf\";\n", "\n", "        try (Document document = new Document(new PdfDocument(new PdfWriter(outPdf)))) {\n", "            // BORDER_BOX\n", "            InputField interactiveInputField = new InputField(\"interactiveInputField\")\n", "                    .setBorder(new SolidBorder(ColorConstants.PINK, 10));\n", "            interactiveInputField.setWidth(200);\n", "            interactiveInputField.setInteractive(true);\n", "            interactiveInputField.setValue(\"interactive border box\");\n", "            interactiveInputField.setProperty(Property.BOX_SIZING, BoxSizingPropertyValue.BORDER_BOX);\n", "            document.add(interactiveInputField);\n", "\n", "            // CONTENT_BOX\n", "            InputField interactiveInputField2 = new InputField(\"interactiveInputField2\")\n", "                    .setBorder(new SolidBorder(ColorConstants.YELLOW, 10));\n", "            interactiveInputField2.setWidth(200);\n", "            interactiveInputField2.setInteractive(true);\n", "            interactiveInputField2.setValue(\"interactive content box\");\n", "            interactiveInputField2.setProperty(Property.BOX_SIZING, BoxSizingPropertyValue.CONTENT_BOX);\n", "            document.add(interactiveInputField2);\n", "\n", "            // BORDER_BOX\n", "            InputField flattenInputField = new InputField(\"flattenInputField\")\n", "                    .setBorder(new SolidBorder(ColorConstants.PINK, 10));\n", "            flattenInputField.setWidth(200);\n", "            flattenInputField.setInteractive(false);\n", "            flattenInputField.setValue(\"border box\");\n", "            flattenInputField.setProperty(Property.BOX_SIZING, BoxSizingPropertyValue.BORDER_BOX);\n", "            document.add(flattenInputField);\n", "\n", "            // CONTENT_BOX\n", "            InputField flattenInputField2 = new InputField(\"flattenInputField2\").setBorder(\n", "                    new SolidBorder(ColorConstants.YELLOW, 10));\n", "            flattenInputField2.setWidth(200);\n", "            flattenInputField2.setInteractive(false);\n", "            flattenInputField2.setValue(\"content box\");\n", "            flattenInputField2.setProperty(Property.BOX_SIZING, BoxSizingPropertyValue.CONTENT_BOX);\n", "            document.add(flattenInputField2);\n", "        }\n", "\n", "        Assert.assertNull(new CompareTool().compareByContent(outPdf, cmpPdf, DESTINATION_FOLDER));\n", "    }\n", "\n", "    @Test\n", "    public void setFontInputFieldTest() throws IOException, InterruptedException {\n", "        String outPdf = DESTINATION_FOLDER + \"setFontInputField.pdf\";\n", "        String cmpPdf = SOURCE_FOLDER + \"cmp_setFontInputField.pdf\";\n", "\n", "        try (Document document = new Document(new PdfDocument(new PdfWriter(outPdf)))) {\n", "            InputField inputField = new InputField(\"inputField\");\n", "            inputField.setInteractive(true);\n", "            inputField.setFont(PdfFontFactory.createFont(StandardFonts.COURIER));\n", "            inputField.setFontSize(10);\n", "            inputField.setValue(\"Some value\");\n", "            document.add(inputField);\n", "        }\n", "        Assert.assertNull(new CompareTool().compareByContent(outPdf, cmpPdf, DESTINATION_FOLDER));\n", "    }\n", "\n", "    @Test\n", "    public void multiPageInputFieldTest() throws IOException, InterruptedException {\n", "        String outPdf = DESTINATION_FOLDER + \"multiPageInputField.pdf\";\n", "        String cmpPdf = SOURCE_FOLDER + \"cmp_multiPageInputField.pdf\";\n", "\n", "        try (PdfDocument document = new PdfDocument(new PdfWriter(outPdf))) {\n", "            PdfAcroForm form = PdfAcroForm.getAcroForm(document, true);\n", "            for (int i = 0; i < 10; i++) {\n", "                document.addNewPage();\n", "                Rectangle rect = new Rectangle(210, 490, 150, 22);\n", "                final PdfFormField inputField = new TextFormFieldBuilder(document, \"fing\").setWidgetRectangle(rect)\n", "                        .createText();\n", "                inputField.setValue(\"some value\").setFont(PdfFontFactory.createFont(StandardFonts.COURIER))\n", "                        .setFontSize(10);\n", "                PdfPage page = document.getPage(i + 1);\n", "                form.addField(inputField, page);\n", "                if (i > 2) {\n", "                    page.flush();\n", "                }\n", "            }\n", "        }\n", "        Assert.assertNull(new CompareTool().compareByContent(outPdf, cmpPdf, DESTINATION_FOLDER));\n", "    }\n", "\n", "    @Test\n", "    public void multiPageInputFieldFormFlushTest() throws IOException, InterruptedException {\n", "        String outPdf = DESTINATION_FOLDER + \"multiPageInputFieldFormFlush.pdf\";\n", "        String cmpPdf = SOURCE_FOLDER + \"cmp_multiPageInputFieldFormFlush.pdf\";\n", "\n", "        try (PdfDocument document = new PdfDocument(new PdfWriter(outPdf))) {\n", "            PdfAcroForm form = PdfAcroForm.getAcroForm(document, true);\n", "            for (int i = 0; i < 10; i++) {\n", "                document.addNewPage();\n", "                Rectangle rect = new Rectangle(210, 490, 150, 22);\n", "                final PdfFormField inputField = new TextFormFieldBuilder(document, \"fing\").setWidgetRectangle(rect)\n", "                        .createText();\n", "                inputField.setValue(\"some value\").setFont(PdfFontFactory.createFont(StandardFonts.COURIER))\n", "                        .setFontSize(10);\n", "                PdfPage page = document.getPage(i + 1);\n", "                form.addField(inputField, page);\n", "                page.flush();\n", "                inputField.flush();\n", "                // simulate behaviour from applyAcrofield methods that always get the acroforms\n", "                form = PdfAcroForm.getAcroForm(document, true);\n", "            }\n", "        }\n", "        Assert.assertNull(new CompareTool().compareByContent(outPdf, cmpPdf, DESTINATION_FOLDER));\n", "    }\n", "}\n"], "method_lines_dic": {"InputField::::useAsPassword(boolean)": [80, 83], "InputField::::getPlaceholder()": [88, 91], "InputField::::getDefaultProperty(int)": [104, 114], "InputField::::getRotation()": [121, 123], "InputField::::setRotation(int)": [133, 140], "InputField::::getAccessibilityProperties()": [145, 152], "InputField::::makeNewRenderer()": [157, 160], "InputField::::setProperties()": [162, 166]}, "test_method_lines_dic": {"InputFieldTest::::beforeClass()": [63, 66], "InputFieldTest::::basicInputFieldTest()": [68, 86], "InputFieldTest::::noValueInputFieldTest()": [88, 102], "InputFieldTest::::inputFieldDoesNotFitTest()": [104, 124], "InputFieldTest::::inputFieldWithLangTest()": [126, 143], "InputFieldTest::::inputFieldWithNullLangTest()": [145, 162], "InputFieldTest::::inputFieldWithPasswordTest()": [164, 186], "InputFieldTest::::heightInputFieldTest()": [188, 203], "InputFieldTest::::minHeightInputFieldTest()": [205, 220], "InputFieldTest::::maxHeightInputFieldTest()": [222, 237], "InputFieldTest::::inputFieldWithJustificationTest()": [239, 253], "InputFieldTest::::inputFieldWithBorderTest()": [255, 269], "InputFieldTest::::rotationTest()": [271, 321], "InputFieldTest::::borderBoxesTest()": [323, 367], "InputFieldTest::::setFontInputFieldTest()": [369, 383], "InputFieldTest::::multiPageInputFieldTest()": [385, 407], "InputFieldTest::::multiPageInputFieldFormFlushTest()": [409, 432]}, "reverse_method_lines_dic": {"80": "InputField::::useAsPassword(boolean)", "81": "InputField::::useAsPassword(boolean)", "82": "InputField::::useAsPassword(boolean)", "83": "InputField::::useAsPassword(boolean)", "88": "InputField::::getPlaceholder()", "89": "InputField::::getPlaceholder()", "90": "InputField::::getPlaceholder()", "91": "InputField::::getPlaceholder()", "104": "InputField::::getDefaultProperty(int)", "105": "InputField::::getDefaultProperty(int)", "106": "InputField::::getDefaultProperty(int)", "107": "InputField::::getDefaultProperty(int)", "108": "InputField::::getDefaultProperty(int)", "109": "InputField::::getDefaultProperty(int)", "110": "InputField::::getDefaultProperty(int)", "111": "InputField::::getDefaultProperty(int)", "112": "InputField::::getDefaultProperty(int)", "113": "InputField::::getDefaultProperty(int)", "114": "InputField::::getDefaultProperty(int)", "121": "InputField::::getRotation()", "122": "InputField::::getRotation()", "123": "InputField::::getRotation()", "133": "InputField::::setRotation(int)", "134": "InputField::::setRotation(int)", "135": "InputField::::setRotation(int)", "136": "InputField::::setRotation(int)", "137": "InputField::::setRotation(int)", "138": "InputField::::setRotation(int)", "139": "InputField::::setRotation(int)", "140": "InputField::::setRotation(int)", "145": "InputField::::getAccessibilityProperties()", "146": "InputField::::getAccessibilityProperties()", "147": "InputField::::getAccessibilityProperties()", "148": "InputField::::getAccessibilityProperties()", "149": "InputField::::getAccessibilityProperties()", "150": "InputField::::getAccessibilityProperties()", "151": "InputField::::getAccessibilityProperties()", "152": "InputField::::getAccessibilityProperties()", "157": "InputField::::makeNewRenderer()", "158": "InputField::::makeNewRenderer()", "159": "InputField::::makeNewRenderer()", "160": "InputField::::makeNewRenderer()", "162": "InputField::::setProperties()", "163": "InputField::::setProperties()", "164": "InputField::::setProperties()", "165": "InputField::::setProperties()", "166": "InputField::::setProperties()"}, "test_reverse_method_lines_dic": {"63": "InputFieldTest::::beforeClass()", "64": "InputFieldTest::::beforeClass()", "65": "InputFieldTest::::beforeClass()", "66": "InputFieldTest::::beforeClass()", "68": "InputFieldTest::::basicInputFieldTest()", "69": "InputFieldTest::::basicInputFieldTest()", "70": "InputFieldTest::::basicInputFieldTest()", "71": "InputFieldTest::::basicInputFieldTest()", "72": "InputFieldTest::::basicInputFieldTest()", "73": "InputFieldTest::::basicInputFieldTest()", "74": "InputFieldTest::::basicInputFieldTest()", "75": "InputFieldTest::::basicInputFieldTest()", "76": "InputFieldTest::::basicInputFieldTest()", "77": "InputFieldTest::::basicInputFieldTest()", "78": "InputFieldTest::::basicInputFieldTest()", "79": "InputFieldTest::::basicInputFieldTest()", "80": "InputFieldTest::::basicInputFieldTest()", "81": "InputFieldTest::::basicInputFieldTest()", "82": "InputFieldTest::::basicInputFieldTest()", "83": "InputFieldTest::::basicInputFieldTest()", "84": "InputFieldTest::::basicInputFieldTest()", "85": "InputFieldTest::::basicInputFieldTest()", "86": "InputFieldTest::::basicInputFieldTest()", "88": "InputFieldTest::::noValueInputFieldTest()", "89": "InputFieldTest::::noValueInputFieldTest()", "90": "InputFieldTest::::noValueInputFieldTest()", "91": "InputFieldTest::::noValueInputFieldTest()", "92": "InputFieldTest::::noValueInputFieldTest()", "93": "InputFieldTest::::noValueInputFieldTest()", "94": "InputFieldTest::::noValueInputFieldTest()", "95": "InputFieldTest::::noValueInputFieldTest()", "96": "InputFieldTest::::noValueInputFieldTest()", "97": "InputFieldTest::::noValueInputFieldTest()", "98": "InputFieldTest::::noValueInputFieldTest()", "99": "InputFieldTest::::noValueInputFieldTest()", "100": "InputFieldTest::::noValueInputFieldTest()", "101": "InputFieldTest::::noValueInputFieldTest()", "102": "InputFieldTest::::noValueInputFieldTest()", "104": "InputFieldTest::::inputFieldDoesNotFitTest()", "105": "InputFieldTest::::inputFieldDoesNotFitTest()", "106": "InputFieldTest::::inputFieldDoesNotFitTest()", "107": "InputFieldTest::::inputFieldDoesNotFitTest()", "108": "InputFieldTest::::inputFieldDoesNotFitTest()", "109": "InputFieldTest::::inputFieldDoesNotFitTest()", "110": "InputFieldTest::::inputFieldDoesNotFitTest()", "111": "InputFieldTest::::inputFieldDoesNotFitTest()", "112": "InputFieldTest::::inputFieldDoesNotFitTest()", "113": "InputFieldTest::::inputFieldDoesNotFitTest()", "114": "InputFieldTest::::inputFieldDoesNotFitTest()", "115": "InputFieldTest::::inputFieldDoesNotFitTest()", "116": "InputFieldTest::::inputFieldDoesNotFitTest()", "117": "InputFieldTest::::inputFieldDoesNotFitTest()", "118": "InputFieldTest::::inputFieldDoesNotFitTest()", "119": "InputFieldTest::::inputFieldDoesNotFitTest()", "120": "InputFieldTest::::inputFieldDoesNotFitTest()", "121": "InputFieldTest::::inputFieldDoesNotFitTest()", "122": "InputFieldTest::::inputFieldDoesNotFitTest()", "123": "InputFieldTest::::inputFieldDoesNotFitTest()", "124": "InputFieldTest::::inputFieldDoesNotFitTest()", "126": "InputFieldTest::::inputFieldWithLangTest()", "127": "InputFieldTest::::inputFieldWithLangTest()", "128": "InputFieldTest::::inputFieldWithLangTest()", "129": "InputFieldTest::::inputFieldWithLangTest()", "130": "InputFieldTest::::inputFieldWithLangTest()", "131": "InputFieldTest::::inputFieldWithLangTest()", "132": "InputFieldTest::::inputFieldWithLangTest()", "133": "InputFieldTest::::inputFieldWithLangTest()", "134": "InputFieldTest::::inputFieldWithLangTest()", "135": "InputFieldTest::::inputFieldWithLangTest()", "136": "InputFieldTest::::inputFieldWithLangTest()", "137": "InputFieldTest::::inputFieldWithLangTest()", "138": "InputFieldTest::::inputFieldWithLangTest()", "139": "InputFieldTest::::inputFieldWithLangTest()", "140": "InputFieldTest::::inputFieldWithLangTest()", "141": "InputFieldTest::::inputFieldWithLangTest()", "142": "InputFieldTest::::inputFieldWithLangTest()", "143": "InputFieldTest::::inputFieldWithLangTest()", "145": "InputFieldTest::::inputFieldWithNullLangTest()", "146": "InputFieldTest::::inputFieldWithNullLangTest()", "147": "InputFieldTest::::inputFieldWithNullLangTest()", "148": "InputFieldTest::::inputFieldWithNullLangTest()", "149": "InputFieldTest::::inputFieldWithNullLangTest()", "150": "InputFieldTest::::inputFieldWithNullLangTest()", "151": "InputFieldTest::::inputFieldWithNullLangTest()", "152": "InputFieldTest::::inputFieldWithNullLangTest()", "153": "InputFieldTest::::inputFieldWithNullLangTest()", "154": "InputFieldTest::::inputFieldWithNullLangTest()", "155": "InputFieldTest::::inputFieldWithNullLangTest()", "156": "InputFieldTest::::inputFieldWithNullLangTest()", "157": "InputFieldTest::::inputFieldWithNullLangTest()", "158": "InputFieldTest::::inputFieldWithNullLangTest()", "159": "InputFieldTest::::inputFieldWithNullLangTest()", "160": "InputFieldTest::::inputFieldWithNullLangTest()", "161": "InputFieldTest::::inputFieldWithNullLangTest()", "162": "InputFieldTest::::inputFieldWithNullLangTest()", "164": "InputFieldTest::::inputFieldWithPasswordTest()", "165": "InputFieldTest::::inputFieldWithPasswordTest()", "166": "InputFieldTest::::inputFieldWithPasswordTest()", "167": "InputFieldTest::::inputFieldWithPasswordTest()", "168": "InputFieldTest::::inputFieldWithPasswordTest()", "169": "InputFieldTest::::inputFieldWithPasswordTest()", "170": "InputFieldTest::::inputFieldWithPasswordTest()", "171": "InputFieldTest::::inputFieldWithPasswordTest()", "172": "InputFieldTest::::inputFieldWithPasswordTest()", "173": "InputFieldTest::::inputFieldWithPasswordTest()", "174": "InputFieldTest::::inputFieldWithPasswordTest()", "175": "InputFieldTest::::inputFieldWithPasswordTest()", "176": "InputFieldTest::::inputFieldWithPasswordTest()", "177": "InputFieldTest::::inputFieldWithPasswordTest()", "178": "InputFieldTest::::inputFieldWithPasswordTest()", "179": "InputFieldTest::::inputFieldWithPasswordTest()", "180": "InputFieldTest::::inputFieldWithPasswordTest()", "181": "InputFieldTest::::inputFieldWithPasswordTest()", "182": "InputFieldTest::::inputFieldWithPasswordTest()", "183": "InputFieldTest::::inputFieldWithPasswordTest()", "184": "InputFieldTest::::inputFieldWithPasswordTest()", "185": "InputFieldTest::::inputFieldWithPasswordTest()", "186": "InputFieldTest::::inputFieldWithPasswordTest()", "188": "InputFieldTest::::heightInputFieldTest()", "189": "InputFieldTest::::heightInputFieldTest()", "190": "InputFieldTest::::heightInputFieldTest()", "191": "InputFieldTest::::heightInputFieldTest()", "192": "InputFieldTest::::heightInputFieldTest()", "193": "InputFieldTest::::heightInputFieldTest()", "194": "InputFieldTest::::heightInputFieldTest()", "195": "InputFieldTest::::heightInputFieldTest()", "196": "InputFieldTest::::heightInputFieldTest()", "197": "InputFieldTest::::heightInputFieldTest()", "198": "InputFieldTest::::heightInputFieldTest()", "199": "InputFieldTest::::heightInputFieldTest()", "200": "InputFieldTest::::heightInputFieldTest()", "201": "InputFieldTest::::heightInputFieldTest()", "202": "InputFieldTest::::heightInputFieldTest()", "203": "InputFieldTest::::heightInputFieldTest()", "205": "InputFieldTest::::minHeightInputFieldTest()", "206": "InputFieldTest::::minHeightInputFieldTest()", "207": "InputFieldTest::::minHeightInputFieldTest()", "208": "InputFieldTest::::minHeightInputFieldTest()", "209": "InputFieldTest::::minHeightInputFieldTest()", "210": "InputFieldTest::::minHeightInputFieldTest()", "211": "InputFieldTest::::minHeightInputFieldTest()", "212": "InputFieldTest::::minHeightInputFieldTest()", "213": "InputFieldTest::::minHeightInputFieldTest()", "214": "InputFieldTest::::minHeightInputFieldTest()", "215": "InputFieldTest::::minHeightInputFieldTest()", "216": "InputFieldTest::::minHeightInputFieldTest()", "217": "InputFieldTest::::minHeightInputFieldTest()", "218": "InputFieldTest::::minHeightInputFieldTest()", "219": "InputFieldTest::::minHeightInputFieldTest()", "220": "InputFieldTest::::minHeightInputFieldTest()", "222": "InputFieldTest::::maxHeightInputFieldTest()", "223": "InputFieldTest::::maxHeightInputFieldTest()", "224": "InputFieldTest::::maxHeightInputFieldTest()", "225": "InputFieldTest::::maxHeightInputFieldTest()", "226": "InputFieldTest::::maxHeightInputFieldTest()", "227": "InputFieldTest::::maxHeightInputFieldTest()", "228": "InputFieldTest::::maxHeightInputFieldTest()", "229": "InputFieldTest::::maxHeightInputFieldTest()", "230": "InputFieldTest::::maxHeightInputFieldTest()", "231": "InputFieldTest::::maxHeightInputFieldTest()", "232": "InputFieldTest::::maxHeightInputFieldTest()", "233": "InputFieldTest::::maxHeightInputFieldTest()", "234": "InputFieldTest::::maxHeightInputFieldTest()", "235": "InputFieldTest::::maxHeightInputFieldTest()", "236": "InputFieldTest::::maxHeightInputFieldTest()", "237": "InputFieldTest::::maxHeightInputFieldTest()", "239": "InputFieldTest::::inputFieldWithJustificationTest()", "240": "InputFieldTest::::inputFieldWithJustificationTest()", "241": "InputFieldTest::::inputFieldWithJustificationTest()", "242": "InputFieldTest::::inputFieldWithJustificationTest()", "243": "InputFieldTest::::inputFieldWithJustificationTest()", "244": "InputFieldTest::::inputFieldWithJustificationTest()", "245": "InputFieldTest::::inputFieldWithJustificationTest()", "246": "InputFieldTest::::inputFieldWithJustificationTest()", "247": "InputFieldTest::::inputFieldWithJustificationTest()", "248": "InputFieldTest::::inputFieldWithJustificationTest()", "249": "InputFieldTest::::inputFieldWithJustificationTest()", "250": "InputFieldTest::::inputFieldWithJustificationTest()", "251": "InputFieldTest::::inputFieldWithJustificationTest()", "252": "InputFieldTest::::inputFieldWithJustificationTest()", "253": "InputFieldTest::::inputFieldWithJustificationTest()", "255": "InputFieldTest::::inputFieldWithBorderTest()", "256": "InputFieldTest::::inputFieldWithBorderTest()", "257": "InputFieldTest::::inputFieldWithBorderTest()", "258": "InputFieldTest::::inputFieldWithBorderTest()", "259": "InputFieldTest::::inputFieldWithBorderTest()", "260": "InputFieldTest::::inputFieldWithBorderTest()", "261": "InputFieldTest::::inputFieldWithBorderTest()", "262": "InputFieldTest::::inputFieldWithBorderTest()", "263": "InputFieldTest::::inputFieldWithBorderTest()", "264": "InputFieldTest::::inputFieldWithBorderTest()", "265": "InputFieldTest::::inputFieldWithBorderTest()", "266": "InputFieldTest::::inputFieldWithBorderTest()", "267": "InputFieldTest::::inputFieldWithBorderTest()", "268": "InputFieldTest::::inputFieldWithBorderTest()", "269": "InputFieldTest::::inputFieldWithBorderTest()", "271": "InputFieldTest::::rotationTest()", "272": "InputFieldTest::::rotationTest()", "273": "InputFieldTest::::rotationTest()", "274": "InputFieldTest::::rotationTest()", "275": "InputFieldTest::::rotationTest()", "276": "InputFieldTest::::rotationTest()", "277": "InputFieldTest::::rotationTest()", "278": "InputFieldTest::::rotationTest()", "279": "InputFieldTest::::rotationTest()", "280": "InputFieldTest::::rotationTest()", "281": "InputFieldTest::::rotationTest()", "282": "InputFieldTest::::rotationTest()", "283": "InputFieldTest::::rotationTest()", "284": "InputFieldTest::::rotationTest()", "285": "InputFieldTest::::rotationTest()", "286": "InputFieldTest::::rotationTest()", "287": "InputFieldTest::::rotationTest()", "288": "InputFieldTest::::rotationTest()", "289": "InputFieldTest::::rotationTest()", "290": "InputFieldTest::::rotationTest()", "291": "InputFieldTest::::rotationTest()", "292": "InputFieldTest::::rotationTest()", "293": "InputFieldTest::::rotationTest()", "294": "InputFieldTest::::rotationTest()", "295": "InputFieldTest::::rotationTest()", "296": "InputFieldTest::::rotationTest()", "297": "InputFieldTest::::rotationTest()", "298": "InputFieldTest::::rotationTest()", "299": "InputFieldTest::::rotationTest()", "300": "InputFieldTest::::rotationTest()", "301": "InputFieldTest::::rotationTest()", "302": "InputFieldTest::::rotationTest()", "303": "InputFieldTest::::rotationTest()", "304": "InputFieldTest::::rotationTest()", "305": "InputFieldTest::::rotationTest()", "306": "InputFieldTest::::rotationTest()", "307": "InputFieldTest::::rotationTest()", "308": "InputFieldTest::::rotationTest()", "309": "InputFieldTest::::rotationTest()", "310": "InputFieldTest::::rotationTest()", "311": "InputFieldTest::::rotationTest()", "312": "InputFieldTest::::rotationTest()", "313": "InputFieldTest::::rotationTest()", "314": "InputFieldTest::::rotationTest()", "315": "InputFieldTest::::rotationTest()", "316": "InputFieldTest::::rotationTest()", "317": "InputFieldTest::::rotationTest()", "318": "InputFieldTest::::rotationTest()", "319": "InputFieldTest::::rotationTest()", "320": "InputFieldTest::::rotationTest()", "321": "InputFieldTest::::rotationTest()", "323": "InputFieldTest::::borderBoxesTest()", "324": "InputFieldTest::::borderBoxesTest()", "325": "InputFieldTest::::borderBoxesTest()", "326": "InputFieldTest::::borderBoxesTest()", "327": "InputFieldTest::::borderBoxesTest()", "328": "InputFieldTest::::borderBoxesTest()", "329": "InputFieldTest::::borderBoxesTest()", "330": "InputFieldTest::::borderBoxesTest()", "331": "InputFieldTest::::borderBoxesTest()", "332": "InputFieldTest::::borderBoxesTest()", "333": "InputFieldTest::::borderBoxesTest()", "334": "InputFieldTest::::borderBoxesTest()", "335": "InputFieldTest::::borderBoxesTest()", "336": "InputFieldTest::::borderBoxesTest()", "337": "InputFieldTest::::borderBoxesTest()", "338": "InputFieldTest::::borderBoxesTest()", "339": "InputFieldTest::::borderBoxesTest()", "340": "InputFieldTest::::borderBoxesTest()", "341": "InputFieldTest::::borderBoxesTest()", "342": "InputFieldTest::::borderBoxesTest()", "343": "InputFieldTest::::borderBoxesTest()", "344": "InputFieldTest::::borderBoxesTest()", "345": "InputFieldTest::::borderBoxesTest()", "346": "InputFieldTest::::borderBoxesTest()", "347": "InputFieldTest::::borderBoxesTest()", "348": "InputFieldTest::::borderBoxesTest()", "349": "InputFieldTest::::borderBoxesTest()", "350": "InputFieldTest::::borderBoxesTest()", "351": "InputFieldTest::::borderBoxesTest()", "352": "InputFieldTest::::borderBoxesTest()", "353": "InputFieldTest::::borderBoxesTest()", "354": "InputFieldTest::::borderBoxesTest()", "355": "InputFieldTest::::borderBoxesTest()", "356": "InputFieldTest::::borderBoxesTest()", "357": "InputFieldTest::::borderBoxesTest()", "358": "InputFieldTest::::borderBoxesTest()", "359": "InputFieldTest::::borderBoxesTest()", "360": "InputFieldTest::::borderBoxesTest()", "361": "InputFieldTest::::borderBoxesTest()", "362": "InputFieldTest::::borderBoxesTest()", "363": "InputFieldTest::::borderBoxesTest()", "364": "InputFieldTest::::borderBoxesTest()", "365": "InputFieldTest::::borderBoxesTest()", "366": "InputFieldTest::::borderBoxesTest()", "367": "InputFieldTest::::borderBoxesTest()", "369": "InputFieldTest::::setFontInputFieldTest()", "370": "InputFieldTest::::setFontInputFieldTest()", "371": "InputFieldTest::::setFontInputFieldTest()", "372": "InputFieldTest::::setFontInputFieldTest()", "373": "InputFieldTest::::setFontInputFieldTest()", "374": "InputFieldTest::::setFontInputFieldTest()", "375": "InputFieldTest::::setFontInputFieldTest()", "376": "InputFieldTest::::setFontInputFieldTest()", "377": "InputFieldTest::::setFontInputFieldTest()", "378": "InputFieldTest::::setFontInputFieldTest()", "379": "InputFieldTest::::setFontInputFieldTest()", "380": "InputFieldTest::::setFontInputFieldTest()", "381": "InputFieldTest::::setFontInputFieldTest()", "382": "InputFieldTest::::setFontInputFieldTest()", "383": "InputFieldTest::::setFontInputFieldTest()", "385": "InputFieldTest::::multiPageInputFieldTest()", "386": "InputFieldTest::::multiPageInputFieldTest()", "387": "InputFieldTest::::multiPageInputFieldTest()", "388": "InputFieldTest::::multiPageInputFieldTest()", "389": "InputFieldTest::::multiPageInputFieldTest()", "390": "InputFieldTest::::multiPageInputFieldTest()", "391": "InputFieldTest::::multiPageInputFieldTest()", "392": "InputFieldTest::::multiPageInputFieldTest()", "393": "InputFieldTest::::multiPageInputFieldTest()", "394": "InputFieldTest::::multiPageInputFieldTest()", "395": "InputFieldTest::::multiPageInputFieldTest()", "396": "InputFieldTest::::multiPageInputFieldTest()", "397": "InputFieldTest::::multiPageInputFieldTest()", "398": "InputFieldTest::::multiPageInputFieldTest()", "399": "InputFieldTest::::multiPageInputFieldTest()", "400": "InputFieldTest::::multiPageInputFieldTest()", "401": "InputFieldTest::::multiPageInputFieldTest()", "402": "InputFieldTest::::multiPageInputFieldTest()", "403": "InputFieldTest::::multiPageInputFieldTest()", "404": "InputFieldTest::::multiPageInputFieldTest()", "405": "InputFieldTest::::multiPageInputFieldTest()", "406": "InputFieldTest::::multiPageInputFieldTest()", "407": "InputFieldTest::::multiPageInputFieldTest()", "409": "InputFieldTest::::multiPageInputFieldFormFlushTest()", "410": "InputFieldTest::::multiPageInputFieldFormFlushTest()", "411": "InputFieldTest::::multiPageInputFieldFormFlushTest()", "412": "InputFieldTest::::multiPageInputFieldFormFlushTest()", "413": "InputFieldTest::::multiPageInputFieldFormFlushTest()", "414": "InputFieldTest::::multiPageInputFieldFormFlushTest()", "415": "InputFieldTest::::multiPageInputFieldFormFlushTest()", "416": "InputFieldTest::::multiPageInputFieldFormFlushTest()", "417": "InputFieldTest::::multiPageInputFieldFormFlushTest()", "418": "InputFieldTest::::multiPageInputFieldFormFlushTest()", "419": "InputFieldTest::::multiPageInputFieldFormFlushTest()", "420": "InputFieldTest::::multiPageInputFieldFormFlushTest()", "421": "InputFieldTest::::multiPageInputFieldFormFlushTest()", "422": "InputFieldTest::::multiPageInputFieldFormFlushTest()", "423": "InputFieldTest::::multiPageInputFieldFormFlushTest()", "424": "InputFieldTest::::multiPageInputFieldFormFlushTest()", "425": "InputFieldTest::::multiPageInputFieldFormFlushTest()", "426": "InputFieldTest::::multiPageInputFieldFormFlushTest()", "427": "InputFieldTest::::multiPageInputFieldFormFlushTest()", "428": "InputFieldTest::::multiPageInputFieldFormFlushTest()", "429": "InputFieldTest::::multiPageInputFieldFormFlushTest()", "430": "InputFieldTest::::multiPageInputFieldFormFlushTest()", "431": "InputFieldTest::::multiPageInputFieldFormFlushTest()", "432": "InputFieldTest::::multiPageInputFieldFormFlushTest()"}, "tests": [{"test_lines": [68, 86], "covered_lines": [55, 63, 64, 65, 90, 106, 108, 110, 112, 122, 147, 148, 151, 159, 163, 164, 165, 166]}, {"test_lines": [88, 102], "covered_lines": [55, 63, 64, 65, 90, 106, 108, 110, 112, 147, 148, 151, 159, 163, 164, 165, 166]}, {"test_lines": [104, 124], "covered_lines": [55, 63, 64, 65, 106, 108, 110, 112, 147, 148, 151, 159, 163, 164, 165, 166]}, {"test_lines": [126, 143], "covered_lines": [55, 63, 64, 65, 90, 106, 108, 110, 112, 122, 147, 148, 151, 159, 163, 164, 165, 166]}, {"test_lines": [145, 162], "covered_lines": [55, 63, 64, 65, 90, 106, 108, 110, 112, 122, 147, 148, 151, 159, 163, 164, 165, 166]}, {"test_lines": [164, 186], "covered_lines": [55, 63, 64, 65, 90, 106, 110, 112, 122, 147, 148, 151, 159, 163, 164, 165, 166]}, {"test_lines": [188, 203], "covered_lines": [55, 63, 64, 65, 106, 108, 110, 112, 147, 148, 151, 159, 163, 164, 165, 166]}, {"test_lines": [205, 220], "covered_lines": [55, 63, 64, 65, 106, 108, 110, 112, 147, 148, 151, 159, 163, 164, 165, 166]}, {"test_lines": [222, 237], "covered_lines": [55, 63, 64, 65, 106, 108, 110, 112, 147, 148, 151, 159, 163, 164, 165, 166]}, {"test_lines": [239, 253], "covered_lines": [55, 63, 64, 65, 90, 106, 108, 110, 112, 122, 147, 148, 151, 159, 163, 164, 165, 166]}, {"test_lines": [255, 269], "covered_lines": [55, 63, 64, 65, 90, 106, 108, 110, 112, 122, 147, 148, 151, 159, 163, 164, 165, 166]}, {"test_lines": [271, 321], "covered_lines": [55, 63, 64, 65, 90, 106, 108, 112, 122, 134, 135, 138, 139, 147, 148, 151, 159, 163, 164, 165, 166]}, {"test_lines": [323, 367], "covered_lines": [55, 63, 64, 65, 90, 106, 108, 112, 122, 147, 148, 151, 159, 163, 164, 165, 166]}, {"test_lines": [369, 383], "covered_lines": [55, 63, 64, 65, 90, 106, 108, 110, 112, 122, 147, 148, 151, 159, 163, 164, 165, 166]}, {"test_lines": [385, 407], "covered_lines": [55, 63, 64, 65, 90, 106, 112, 147, 148, 151, 159, 163, 164, 165, 166]}, {"test_lines": [409, 432], "covered_lines": [55, 63, 64, 65, 90, 106, 112, 147, 148, 151, 159, 163, 164, 165, 166]}]}, "/bernard/dataset_construction/prep/repos/itext-java/forms/src/main/java/com/itextpdf/forms/form/element/TextArea.java": {"class_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.forms.form.element;\n", "\n", "import com.itextpdf.forms.FormDefaultAccessibilityProperties;\n", "import com.itextpdf.forms.form.FormProperty;\n", "import com.itextpdf.forms.form.renderer.TextAreaRenderer;\n", "import com.itextpdf.kernel.pdf.tagutils.AccessibilityProperties;\n", "import com.itextpdf.layout.element.Paragraph;\n", "import com.itextpdf.layout.properties.BoxSizingPropertyValue;\n", "import com.itextpdf.layout.properties.Leading;\n", "import com.itextpdf.layout.properties.Property;\n", "import com.itextpdf.layout.properties.UnitValue;\n", "import com.itextpdf.layout.renderer.IRenderer;\n", "\n", "/**\n", " * Extension of the {@link FormField} class representing a button so that\n", " * a {@link TextAreaRenderer} is used instead of the default renderer for fields.\n", " */\n", "public class TextArea extends FormField<TextArea> implements IPlaceholderable {\n", "\n", "    /**\n", "     * Default padding X offset.\n", "     */\n", "    private static final float X_OFFSET = 3;\n", "\n", "    /**\n", "     * The placeholder paragraph.\n", "     */\n", "    private Paragraph placeholder;\n", "\n", "    /**\n", "     * Creates a new {@link TextArea} instance.\n", "     *\n", "     * @param id the id\n", "     */\n", "    public TextArea(String id) {\n", "        super(id);\n", "        setProperties();\n", "    }\n", "\n", "    /**\n", "     * Determines, whether the input field will be password.\n", "     *\n", "     * <p>\n", "     * Usually means that instead of glyphs '*' will be shown in case of flatten field.\n", "     *\n", "     * <p>\n", "     * If the field is not flatten, value will be ignored.\n", "     *\n", "     * @param isPassword {@code true} is this field shall be considered as password, {@code false} otherwise\n", "     *\n", "     * @return this input field\n", "     */\n", "    public TextArea useAsPassword(boolean isPassword) {\n", "        setProperty(FormProperty.FORM_FIELD_PASSWORD_FLAG, isPassword);\n", "        return this;\n", "    }\n", "\n", "    /* (non-Javadoc)\n", "     * @see FormField#getDefaultProperty(int)\n", "     */\n", "    @Override\n", "    public <T1> T1 getDefaultProperty(int property) {\n", "        switch (property) {\n", "            case FormProperty.FORM_FIELD_ROWS:\n", "                return (T1) (Object) 2;\n", "            case FormProperty.FORM_FIELD_COLS:\n", "                return (T1) (Object) 20;\n", "            default:\n", "                return super.<T1>getDefaultProperty(property);\n", "        }\n", "    }\n", "\n", "    /**\n", "     * {@inheritDoc}\n", "     */\n", "    @Override\n", "    public Paragraph getPlaceholder() {\n", "        return placeholder;\n", "    }\n", "\n", "    /**\n", "     * {@inheritDoc}\n", "     */\n", "    @Override\n", "    public void setPlaceholder(Paragraph placeholder) {\n", "        this.placeholder = placeholder;\n", "    }\n", "\n", "    /**\n", "     * {@inheritDoc}\n", "     */\n", "    @Override\n", "    public AccessibilityProperties getAccessibilityProperties() {\n", "        if (this.tagProperties == null){\n", "            tagProperties = new FormDefaultAccessibilityProperties(FormDefaultAccessibilityProperties.FORM_FIELD_TEXT);\n", "        }\n", "        return tagProperties;\n", "    }\n", "\n", "    /* (non-Javadoc)\n", "     * @see com.itextpdf.layout.element.AbstractElement#makeNewRenderer()\n", "     */\n", "    @Override\n", "    protected IRenderer makeNewRenderer() {\n", "        return new TextAreaRenderer(this);\n", "    }\n", "\n", "    private void setProperties() {\n", "        setProperty(Property.PADDING_LEFT, UnitValue.createPointValue(X_OFFSET));\n", "        setProperty(Property.PADDING_RIGHT, UnitValue.createPointValue(X_OFFSET));\n", "        setProperty(Property.PADDING_TOP, UnitValue.createPointValue(X_OFFSET));\n", "        setProperty(Property.PADDING_BOTTOM, UnitValue.createPointValue(X_OFFSET));\n", "        \n", "        setProperty(Property.BOX_SIZING, BoxSizingPropertyValue.BORDER_BOX);\n", "        \n", "        setProperty(Property.LEADING, new Leading(Leading.MULTIPLIED, 1));\n", "    }\n", "}\n"], "test_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.forms.form.element;\n", "\n", "import com.itextpdf.forms.form.FormProperty;\n", "import com.itextpdf.io.logs.IoLogMessageConstant;\n", "import com.itextpdf.kernel.colors.ColorConstants;\n", "import com.itextpdf.kernel.pdf.PdfDocument;\n", "import com.itextpdf.kernel.pdf.PdfWriter;\n", "import com.itextpdf.kernel.utils.CompareTool;\n", "import com.itextpdf.layout.Document;\n", "import com.itextpdf.layout.borders.DashedBorder;\n", "import com.itextpdf.layout.borders.SolidBorder;\n", "import com.itextpdf.layout.element.Div;\n", "import com.itextpdf.layout.properties.Leading;\n", "import com.itextpdf.layout.properties.Property;\n", "import com.itextpdf.layout.properties.TextAlignment;\n", "import com.itextpdf.layout.properties.UnitValue;\n", "import com.itextpdf.test.ExtendedITextTest;\n", "import com.itextpdf.test.annotations.LogMessage;\n", "import com.itextpdf.test.annotations.LogMessages;\n", "import com.itextpdf.test.annotations.type.IntegrationTest;\n", "\n", "import java.io.IOException;\n", "import org.junit.Assert;\n", "import org.junit.BeforeClass;\n", "import org.junit.Test;\n", "import org.junit.experimental.categories.Category;\n", "\n", "@Category(IntegrationTest.class)\n", "public class TextAreaTest extends ExtendedITextTest {\n", "    public static final String SOURCE_FOLDER =\n", "            \"./src/test/resources/com/itextpdf/forms/form/element/TextAreaTest/\";\n", "    public static final String DESTINATION_FOLDER =\n", "            \"./target/test/com/itextpdf/forms/form/element/TextAreaTest/\";\n", "\n", "    @BeforeClass\n", "    public static void beforeClass() {\n", "        createOrClearDestinationFolder(DESTINATION_FOLDER);\n", "    }\n", "\n", "    @Test\n", "    public void basicTextAreaTest() throws IOException, InterruptedException {\n", "        String outPdf = DESTINATION_FOLDER + \"basicTextArea.pdf\";\n", "        String cmpPdf = SOURCE_FOLDER + \"cmp_basicTextArea.pdf\";\n", "\n", "        try (Document document = new Document(new PdfDocument(new PdfWriter(outPdf)))) {\n", "            TextArea formTextArea = new TextArea(\"form text area\");\n", "            formTextArea.setProperty(FormProperty.FORM_FIELD_FLATTEN, false);\n", "            formTextArea.setProperty(FormProperty.FORM_FIELD_VALUE, \"form\\ntext\\narea\");\n", "            document.add(formTextArea);\n", "\n", "            TextArea flattenTextArea = new TextArea(\"flatten text area\");\n", "            flattenTextArea.setProperty(FormProperty.FORM_FIELD_FLATTEN, true);\n", "            flattenTextArea.setProperty(FormProperty.FORM_FIELD_VALUE, \"flatten\\ntext\\narea\");\n", "            document.add(flattenTextArea);\n", "        }\n", "\n", "        Assert.assertNull(new CompareTool().compareByContent(outPdf, cmpPdf, DESTINATION_FOLDER));\n", "    }\n", "\n", "    @Test\n", "    @LogMessages(messages = @LogMessage(\n", "            messageTemplate = IoLogMessageConstant.PROPERTY_IN_PERCENTS_NOT_SUPPORTED, count = 16))\n", "    public void percentFontTextAreaTest() throws IOException, InterruptedException {\n", "        String outPdf = DESTINATION_FOLDER + \"percentFontTextArea.pdf\";\n", "        String cmpPdf = SOURCE_FOLDER + \"cmp_percentFontTextArea.pdf\";\n", "\n", "        try (Document document = new Document(new PdfDocument(new PdfWriter(outPdf)))) {\n", "            TextArea formTextArea = new TextArea(\"form text area\");\n", "            formTextArea.setProperty(FormProperty.FORM_FIELD_FLATTEN, false);\n", "            formTextArea.setProperty(FormProperty.FORM_FIELD_VALUE, \"form\\ntext\\narea\");\n", "            formTextArea.setProperty(Property.FONT_SIZE, UnitValue.createPercentValue(10));\n", "            document.add(formTextArea);\n", "\n", "            TextArea flattenTextArea = new TextArea(\"flatten text area\");\n", "            flattenTextArea.setProperty(FormProperty.FORM_FIELD_FLATTEN, true);\n", "            flattenTextArea.setProperty(FormProperty.FORM_FIELD_VALUE, \"flatten\\ntext\\narea\");\n", "            formTextArea.setProperty(Property.FONT_SIZE, UnitValue.createPercentValue(10));\n", "            document.add(flattenTextArea);\n", "        }\n", "\n", "        Assert.assertNull(new CompareTool().compareByContent(outPdf, cmpPdf, DESTINATION_FOLDER));\n", "    }\n", "\n", "    @Test\n", "    public void heightTextAreaTest() throws IOException, InterruptedException {\n", "        String outPdf = DESTINATION_FOLDER + \"heightTextArea.pdf\";\n", "        String cmpPdf = SOURCE_FOLDER + \"cmp_heightTextArea.pdf\";\n", "\n", "        try (Document document = new Document(new PdfDocument(new PdfWriter(outPdf)))) {\n", "            TextArea flattenTextArea = new TextArea(\"flatten text area with height\");\n", "            flattenTextArea.setProperty(FormProperty.FORM_FIELD_FLATTEN, true);\n", "            flattenTextArea.setProperty(FormProperty.FORM_FIELD_VALUE, \"flatten\\ntext area\\nwith height\");\n", "            flattenTextArea.setProperty(Property.HEIGHT, new UnitValue(UnitValue.POINT, 100));\n", "            flattenTextArea.setProperty(Property.BORDER, new SolidBorder(2f));\n", "            document.add(flattenTextArea);\n", "        }\n", "\n", "        Assert.assertNull(new CompareTool().compareByContent(outPdf, cmpPdf, DESTINATION_FOLDER));\n", "    }\n", "\n", "    @Test\n", "    public void minHeightTextAreaTest() throws IOException, InterruptedException {\n", "        String outPdf = DESTINATION_FOLDER + \"minHeightTextArea.pdf\";\n", "        String cmpPdf = SOURCE_FOLDER + \"cmp_minHeightTextArea.pdf\";\n", "\n", "        try (Document document = new Document(new PdfDocument(new PdfWriter(outPdf)))) {\n", "            TextArea flattenTextArea = new TextArea(\"flatten text area with height\");\n", "            flattenTextArea.setProperty(FormProperty.FORM_FIELD_FLATTEN, true);\n", "            flattenTextArea.setProperty(FormProperty.FORM_FIELD_VALUE, \"flatten\\ntext area\\nwith height\");\n", "            flattenTextArea.setProperty(Property.MIN_HEIGHT, new UnitValue(UnitValue.POINT, 100));\n", "            flattenTextArea.setProperty(Property.BORDER, new SolidBorder(2f));\n", "            document.add(flattenTextArea);\n", "        }\n", "\n", "        Assert.assertNull(new CompareTool().compareByContent(outPdf, cmpPdf, DESTINATION_FOLDER));\n", "    }\n", "\n", "    @Test\n", "    public void hugeMarginPaddingBorderTest() throws IOException, InterruptedException {\n", "        String outPdf = DESTINATION_FOLDER + \"hugeMarginPaddingBorder.pdf\";\n", "        String cmpPdf = SOURCE_FOLDER + \"cmp_hugeMarginPaddingBorder.pdf\";\n", "\n", "        try (Document document = new Document(new PdfDocument(new PdfWriter(outPdf)))) {\n", "            TextArea formTextArea = new TextArea(\"interactive text area with paddings\");\n", "            formTextArea.setInteractive(true);\n", "            formTextArea.setValue(\"interactive\\ntext area\\nwith paddings\");\n", "            formTextArea.setBorder(new SolidBorder(20));\n", "            formTextArea.setProperty(Property.PADDING_BOTTOM, UnitValue.createPointValue(20));\n", "            formTextArea.setProperty(Property.PADDING_TOP, UnitValue.createPointValue(20));\n", "            formTextArea.setProperty(Property.PADDING_RIGHT, UnitValue.createPointValue(20));\n", "            formTextArea.setProperty(Property.PADDING_LEFT, UnitValue.createPointValue(20));\n", "            formTextArea.setProperty(Property.MARGIN_BOTTOM, UnitValue.createPointValue(20));\n", "            formTextArea.setProperty(Property.MARGIN_TOP, UnitValue.createPointValue(20));\n", "            formTextArea.setProperty(Property.MARGIN_RIGHT, UnitValue.createPointValue(20));\n", "            formTextArea.setProperty(Property.MARGIN_LEFT, UnitValue.createPointValue(20));\n", "            document.add(formTextArea);\n", "\n", "            TextArea flattenTextArea = new TextArea(\"flatten text area with paddings\");\n", "            flattenTextArea.setInteractive(false);\n", "            flattenTextArea.setValue(\"flatten\\ntext area\\nwith paddings\");\n", "            flattenTextArea.setBorder(new SolidBorder(20));\n", "            flattenTextArea.setProperty(Property.PADDING_BOTTOM, UnitValue.createPointValue(20));\n", "            flattenTextArea.setProperty(Property.PADDING_TOP, UnitValue.createPointValue(20));\n", "            flattenTextArea.setProperty(Property.PADDING_RIGHT, UnitValue.createPointValue(20));\n", "            flattenTextArea.setProperty(Property.PADDING_LEFT, UnitValue.createPointValue(20));\n", "            flattenTextArea.setProperty(Property.MARGIN_BOTTOM, UnitValue.createPointValue(20));\n", "            flattenTextArea.setProperty(Property.MARGIN_TOP, UnitValue.createPointValue(20));\n", "            flattenTextArea.setProperty(Property.MARGIN_RIGHT, UnitValue.createPointValue(20));\n", "            flattenTextArea.setProperty(Property.MARGIN_LEFT, UnitValue.createPointValue(20));\n", "            document.add(flattenTextArea);\n", "        }\n", "\n", "        Assert.assertNull(new CompareTool().compareByContent(outPdf, cmpPdf, DESTINATION_FOLDER));\n", "    }\n", "\n", "    @Test\n", "    public void textAreaDoesNotFitTest() throws IOException, InterruptedException {\n", "        String outPdf = DESTINATION_FOLDER + \"textAreaDoesNotFit.pdf\";\n", "        String cmpPdf = SOURCE_FOLDER + \"cmp_textAreaDoesNotFit.pdf\";\n", "\n", "        try (Document document = new Document(new PdfDocument(new PdfWriter(outPdf)))) {\n", "            Div div = new Div();\n", "            div.setWidth(UnitValue.createPointValue(400));\n", "            div.setHeight(UnitValue.createPointValue(730));\n", "            div.setBackgroundColor(ColorConstants.PINK);\n", "            document.add(div);\n", "\n", "            TextArea textArea = new TextArea(\"text area\");\n", "            textArea.setInteractive(true);\n", "            textArea.setProperty(FormProperty.FORM_FIELD_VALUE,\n", "                    \"some text to not\\nbe able to fit in on the page\\nmore text just text\\nreally big height\");\n", "            textArea.setHeight(50);\n", "            textArea.setProperty(Property.BORDER, new SolidBorder(2f));\n", "            document.add(textArea);\n", "        }\n", "\n", "        Assert.assertNull(new CompareTool().compareByContent(outPdf, cmpPdf, DESTINATION_FOLDER));\n", "    }\n", "\n", "    @Test\n", "    public void textAreaWith0FontSizeDoesNotFitTest() throws IOException, InterruptedException {\n", "        String outPdf = DESTINATION_FOLDER + \"textAreaWith0FontSizeDoesNotFit.pdf\";\n", "        String cmpPdf = SOURCE_FOLDER + \"cmp_textAreaWith0FontSizeDoesNotFit.pdf\";\n", "\n", "        try (Document document = new Document(new PdfDocument(new PdfWriter(outPdf)))) {\n", "            document.add(new Div().setBackgroundColor(ColorConstants.RED).setHeight(695));\n", "\n", "            TextArea textArea = new TextArea(\"text area\");\n", "            textArea.setInteractive(true);\n", "            textArea.setProperty(FormProperty.FORM_FIELD_VALUE,\n", "                    \"Font\\n size \\nof this\\nText Area will \\nbe approximated\\nbased on the content\");\n", "            textArea.setProperty(Property.BORDER, new SolidBorder(1f));\n", "            textArea.setFontSize(0);\n", "            textArea.setHeight(75);\n", "            document.add(textArea);\n", "\n", "            document.add(new Div().setBackgroundColor(ColorConstants.RED).setHeight(695));\n", "\n", "            TextArea flattenTextArea = new TextArea(\"text area\");\n", "            flattenTextArea.setInteractive(false);\n", "            flattenTextArea.setProperty(FormProperty.FORM_FIELD_VALUE,\n", "                    \"Font\\n size \\nof this\\nText Area will \\nbe approximated\\nbased on the content\");\n", "            flattenTextArea.setProperty(Property.BORDER, new SolidBorder(1f));\n", "            flattenTextArea.setFontSize(0);\n", "            flattenTextArea.setHeight(75);\n", "            document.add(flattenTextArea);\n", "        }\n", "\n", "        Assert.assertNull(new CompareTool().compareByContent(outPdf, cmpPdf, DESTINATION_FOLDER));\n", "    }\n", "\n", "    @Test\n", "    public void textAreaWith0FontSizeFitsTest() throws IOException, InterruptedException {\n", "        String outPdf = DESTINATION_FOLDER + \"textAreaWith0FontSizeFits.pdf\";\n", "        String cmpPdf = SOURCE_FOLDER + \"cmp_textAreaWith0FontSizeFits.pdf\";\n", "\n", "        try (Document document = new Document(new PdfDocument(new PdfWriter(outPdf)))) {\n", "            TextArea textArea = new TextArea(\"text area\");\n", "            textArea.setInteractive(true);\n", "            textArea.setProperty(FormProperty.FORM_FIELD_VALUE,\n", "                    \"Font\\n size \\nof this\\nText Area will \\nbe approximated\\nbased on the content\");\n", "            textArea.setProperty(Property.BORDER, new SolidBorder(1f));\n", "            textArea.setFontSize(0);\n", "            textArea.setHeight(75);\n", "            document.add(textArea);\n", "\n", "            TextArea flattenTextArea = new TextArea(\"text area\");\n", "            flattenTextArea.setInteractive(false);\n", "            flattenTextArea.setProperty(FormProperty.FORM_FIELD_VALUE,\n", "                    \"Font\\n size \\nof this\\nText Area will \\nbe approximated\\nbased on the content\");\n", "            flattenTextArea.setProperty(Property.BORDER, new SolidBorder(1f));\n", "            flattenTextArea.setFontSize(0);\n", "            flattenTextArea.setHeight(75);\n", "            document.add(flattenTextArea);\n", "        }\n", "\n", "        Assert.assertNull(new CompareTool().compareByContent(outPdf, cmpPdf, DESTINATION_FOLDER));\n", "    }\n", "\n", "    @Test\n", "    public void textAreaWith0FontSizeWithoutHeightTest() throws IOException, InterruptedException {\n", "        String outPdf = DESTINATION_FOLDER + \"textAreaWith0FontSizeWithoutHeight.pdf\";\n", "        String cmpPdf = SOURCE_FOLDER + \"cmp_textAreaWith0FontSizeWithoutHeight.pdf\";\n", "\n", "        try (Document document = new Document(new PdfDocument(new PdfWriter(outPdf)))) {\n", "            TextArea textArea = new TextArea(\"text area\");\n", "            textArea.setInteractive(true);\n", "            textArea.setProperty(FormProperty.FORM_FIELD_VALUE, \"Font\\n size \\nof this\\nText Area will not \"\n", "                    + \"\\nbe approximated\\nbased on the content\\nbecause height is not set\");\n", "            textArea.setProperty(Property.BORDER, new SolidBorder(1f));\n", "            textArea.setFontSize(0);\n", "            document.add(textArea);\n", "\n", "            TextArea flattenTextArea = new TextArea(\"text area\");\n", "            flattenTextArea.setInteractive(false);\n", "            flattenTextArea.setProperty(FormProperty.FORM_FIELD_VALUE, \"Font\\n size \\nof this\\nText Area will not \"\n", "                    + \"\\nbe approximated\\nbased on the content\\nbecause height is not set\");\n", "            flattenTextArea.setProperty(Property.BORDER, new SolidBorder(1f));\n", "            flattenTextArea.setFontSize(0);\n", "            document.add(flattenTextArea);\n", "        }\n", "\n", "        Assert.assertNull(new CompareTool().compareByContent(outPdf, cmpPdf, DESTINATION_FOLDER));\n", "    }\n", "\n", "    @Test\n", "    public void textAreaWithBorderLessThan1Test() throws IOException, InterruptedException {\n", "        String outPdf = DESTINATION_FOLDER + \"textAreaWithBorderLessThan1.pdf\";\n", "        String cmpPdf = SOURCE_FOLDER + \"cmp_textAreaWithBorderLessThan1.pdf\";\n", "\n", "        try (Document document = new Document(new PdfDocument(new PdfWriter(outPdf)))) {\n", "            TextArea textArea = new TextArea(\"text area\");\n", "            textArea.setInteractive(true);\n", "            textArea.setProperty(FormProperty.FORM_FIELD_VALUE,\n", "                    \"Is border visible?\\nAnd after clicking on the field?\\nIt should be by the way\");\n", "            textArea.setProperty(Property.BORDER, new SolidBorder(0.5f));\n", "            document.add(textArea);\n", "        }\n", "\n", "        Assert.assertNull(new CompareTool().compareByContent(outPdf, cmpPdf, DESTINATION_FOLDER));\n", "    }\n", "\n", "    @Test\n", "    public void textAreaWithJustificationTest() throws IOException, InterruptedException {\n", "        String outPdf = DESTINATION_FOLDER + \"textAreaWithJustification.pdf\";\n", "        String cmpPdf = SOURCE_FOLDER + \"cmp_textAreaWithJustification.pdf\";\n", "\n", "        try (Document document = new Document(new PdfDocument(new PdfWriter(outPdf)))) {\n", "            TextArea textArea = new TextArea(\"text area\");\n", "            textArea.setValue(\"text area with justification\\nWords shall be in the center\\nAre they?\");\n", "            textArea.setInteractive(true);\n", "            textArea.setTextAlignment(TextAlignment.CENTER);\n", "            document.add(textArea);\n", "\n", "            TextArea flattenedTextArea = new TextArea(\"flattened text area\");\n", "            flattenedTextArea.setValue(\"text area with justification\\nWords shall be in the center\\nAre they?\");\n", "            flattenedTextArea.setInteractive(false);\n", "            flattenedTextArea.setTextAlignment(TextAlignment.CENTER);\n", "            document.add(flattenedTextArea);\n", "        }\n", "\n", "        Assert.assertNull(new CompareTool().compareByContent(outPdf, cmpPdf, DESTINATION_FOLDER));\n", "    }\n", "\n", "    @Test\n", "    public void textAreaWithCustomBorderTest() throws IOException, InterruptedException {\n", "        String outPdf = DESTINATION_FOLDER + \"textAreaWithCustomBorder.pdf\";\n", "        String cmpPdf = SOURCE_FOLDER + \"cmp_textAreaWithCustomBorder.pdf\";\n", "\n", "        try (Document document = new Document(new PdfDocument(new PdfWriter(outPdf)))) {\n", "            TextArea textArea = new TextArea(\"text area\");\n", "            textArea.setValue(\"text area with custom border\\nBorder shall be orange, 10 points wide and dashed\");\n", "            textArea.setInteractive(true);\n", "            textArea.setBorder(new DashedBorder(ColorConstants.ORANGE, 10));\n", "            document.add(textArea);\n", "\n", "            TextArea flattenedTextArea = new TextArea(\"flattened text area\");\n", "            flattenedTextArea.setValue(\n", "                    \"text area with custom border\\nBorder shall be orange, 10 points wide and dashed\");\n", "            flattenedTextArea.setInteractive(false);\n", "            flattenedTextArea.setBorder(new DashedBorder(ColorConstants.ORANGE, 10));\n", "            document.add(flattenedTextArea);\n", "        }\n", "\n", "        Assert.assertNull(new CompareTool().compareByContent(outPdf, cmpPdf, DESTINATION_FOLDER));\n", "    }\n", "\n", "    @Test\n", "    public void maxHeightTextAreaTest() throws IOException, InterruptedException {\n", "        String outPdf = DESTINATION_FOLDER + \"maxHeightTextArea.pdf\";\n", "        String cmpPdf = SOURCE_FOLDER + \"cmp_maxHeightTextArea.pdf\";\n", "\n", "        try (Document document = new Document(new PdfDocument(new PdfWriter(outPdf)))) {\n", "            TextArea flattenTextArea = new TextArea(\"flatten text area with height\");\n", "            flattenTextArea.setProperty(FormProperty.FORM_FIELD_FLATTEN, true);\n", "            flattenTextArea.setProperty(FormProperty.FORM_FIELD_VALUE, \"flatten\\ntext area\\nwith height\");\n", "            flattenTextArea.setProperty(Property.MAX_HEIGHT, new UnitValue(UnitValue.POINT, 28));\n", "            flattenTextArea.setProperty(Property.BORDER, new SolidBorder(2f));\n", "            document.add(flattenTextArea);\n", "        }\n", "\n", "        Assert.assertNull(new CompareTool().compareByContent(outPdf, cmpPdf, DESTINATION_FOLDER));\n", "    }\n", "\n", "    @Test\n", "    public void textAreaWithCustomLeadingTest() throws IOException, InterruptedException {\n", "        String outPdf = DESTINATION_FOLDER + \"textAreaWithCustomLeading.pdf\";\n", "        String cmpPdf = SOURCE_FOLDER + \"cmp_textAreaWithCustomLeading.pdf\";\n", "\n", "        try (Document document = new Document(new PdfDocument(new PdfWriter(outPdf)))) {\n", "            TextArea textArea = new TextArea(\"text1\").setBorder(new SolidBorder(ColorConstants.PINK, 1));\n", "            textArea.setValue(\"text area with 1 used as the basis for the leading calculation\");\n", "            textArea.setInteractive(true);\n", "            textArea.setProperty(Property.LEADING, new Leading(Leading.MULTIPLIED, 1));\n", "            textArea.setProperty(Property.MARGIN_BOTTOM, UnitValue.createPointValue(5));\n", "            document.add(textArea);\n", "\n", "            TextArea textArea2 = new TextArea(\"text2\").setBorder(new SolidBorder(ColorConstants.YELLOW, 1));\n", "            textArea2.setValue(\"text area with 3 used as the basis for the leading calculation\");\n", "            textArea2.setInteractive(true);\n", "            textArea2.setProperty(Property.LEADING, new Leading(Leading.MULTIPLIED, 3));\n", "            textArea2.setProperty(Property.MARGIN_BOTTOM, UnitValue.createPointValue(5));\n", "            document.add(textArea2);\n", "\n", "            TextArea flattenedTextArea = new TextArea(\"text3\").setBorder(new SolidBorder(ColorConstants.PINK, 1));\n", "            flattenedTextArea.setValue(\"text area with 5 used as the basis for the leading calculation\");\n", "            flattenedTextArea.setInteractive(false);\n", "            flattenedTextArea.setProperty(Property.LEADING, new Leading(Leading.MULTIPLIED, 5));\n", "            flattenedTextArea.setProperty(Property.MARGIN_BOTTOM, UnitValue.createPointValue(5));\n", "            document.add(flattenedTextArea);\n", "\n", "            TextArea flattenedTextArea2 = new TextArea(\"text4\").setBorder(new SolidBorder(ColorConstants.YELLOW, 1));\n", "            flattenedTextArea2.setValue(\"text area with 0.5 used as the basis for the leading calculation\");\n", "            flattenedTextArea2.setInteractive(false);\n", "            flattenedTextArea2.setProperty(Property.LEADING, new Leading(Leading.MULTIPLIED, 0.5f));\n", "            document.add(flattenedTextArea2);\n", "        }\n", "\n", "        Assert.assertNull(new CompareTool().compareByContent(outPdf, cmpPdf, DESTINATION_FOLDER));\n", "    }\n", "}\n"], "method_lines_dic": {"TextArea::::useAsPassword(boolean)": [75, 78], "TextArea::::getDefaultProperty(int)": [83, 93], "TextArea::::getPlaceholder()": [98, 101], "TextArea::::getAccessibilityProperties()": [114, 120], "TextArea::::makeNewRenderer()": [125, 128], "TextArea::::setProperties()": [130, 139]}, "test_method_lines_dic": {"TextAreaTest::::beforeClass()": [57, 60], "TextAreaTest::::basicTextAreaTest()": [62, 80], "TextAreaTest::::percentFontTextAreaTest()": [82, 104], "TextAreaTest::::heightTextAreaTest()": [106, 121], "TextAreaTest::::minHeightTextAreaTest()": [123, 138], "TextAreaTest::::hugeMarginPaddingBorderTest()": [140, 176], "TextAreaTest::::textAreaDoesNotFitTest()": [178, 200], "TextAreaTest::::textAreaWith0FontSizeDoesNotFitTest()": [202, 232], "TextAreaTest::::textAreaWith0FontSizeFitsTest()": [234, 260], "TextAreaTest::::textAreaWith0FontSizeWithoutHeightTest()": [262, 286], "TextAreaTest::::textAreaWithBorderLessThan1Test()": [288, 303], "TextAreaTest::::textAreaWithJustificationTest()": [305, 325], "TextAreaTest::::textAreaWithCustomBorderTest()": [327, 348], "TextAreaTest::::maxHeightTextAreaTest()": [350, 365], "TextAreaTest::::textAreaWithCustomLeadingTest()": [367, 402]}, "reverse_method_lines_dic": {"75": "TextArea::::useAsPassword(boolean)", "76": "TextArea::::useAsPassword(boolean)", "77": "TextArea::::useAsPassword(boolean)", "78": "TextArea::::useAsPassword(boolean)", "83": "TextArea::::getDefaultProperty(int)", "84": "TextArea::::getDefaultProperty(int)", "85": "TextArea::::getDefaultProperty(int)", "86": "TextArea::::getDefaultProperty(int)", "87": "TextArea::::getDefaultProperty(int)", "88": "TextArea::::getDefaultProperty(int)", "89": "TextArea::::getDefaultProperty(int)", "90": "TextArea::::getDefaultProperty(int)", "91": "TextArea::::getDefaultProperty(int)", "92": "TextArea::::getDefaultProperty(int)", "93": "TextArea::::getDefaultProperty(int)", "98": "TextArea::::getPlaceholder()", "99": "TextArea::::getPlaceholder()", "100": "TextArea::::getPlaceholder()", "101": "TextArea::::getPlaceholder()", "114": "TextArea::::getAccessibilityProperties()", "115": "TextArea::::getAccessibilityProperties()", "116": "TextArea::::getAccessibilityProperties()", "117": "TextArea::::getAccessibilityProperties()", "118": "TextArea::::getAccessibilityProperties()", "119": "TextArea::::getAccessibilityProperties()", "120": "TextArea::::getAccessibilityProperties()", "125": "TextArea::::makeNewRenderer()", "126": "TextArea::::makeNewRenderer()", "127": "TextArea::::makeNewRenderer()", "128": "TextArea::::makeNewRenderer()", "130": "TextArea::::setProperties()", "131": "TextArea::::setProperties()", "132": "TextArea::::setProperties()", "133": "TextArea::::setProperties()", "134": "TextArea::::setProperties()", "135": "TextArea::::setProperties()", "136": "TextArea::::setProperties()", "137": "TextArea::::setProperties()", "138": "TextArea::::setProperties()", "139": "TextArea::::setProperties()"}, "test_reverse_method_lines_dic": {"57": "TextAreaTest::::beforeClass()", "58": "TextAreaTest::::beforeClass()", "59": "TextAreaTest::::beforeClass()", "60": "TextAreaTest::::beforeClass()", "62": "TextAreaTest::::basicTextAreaTest()", "63": "TextAreaTest::::basicTextAreaTest()", "64": "TextAreaTest::::basicTextAreaTest()", "65": "TextAreaTest::::basicTextAreaTest()", "66": "TextAreaTest::::basicTextAreaTest()", "67": "TextAreaTest::::basicTextAreaTest()", "68": "TextAreaTest::::basicTextAreaTest()", "69": "TextAreaTest::::basicTextAreaTest()", "70": "TextAreaTest::::basicTextAreaTest()", "71": "TextAreaTest::::basicTextAreaTest()", "72": "TextAreaTest::::basicTextAreaTest()", "73": "TextAreaTest::::basicTextAreaTest()", "74": "TextAreaTest::::basicTextAreaTest()", "75": "TextAreaTest::::basicTextAreaTest()", "76": "TextAreaTest::::basicTextAreaTest()", "77": "TextAreaTest::::basicTextAreaTest()", "78": "TextAreaTest::::basicTextAreaTest()", "79": "TextAreaTest::::basicTextAreaTest()", "80": "TextAreaTest::::basicTextAreaTest()", "82": "TextAreaTest::::percentFontTextAreaTest()", "83": "TextAreaTest::::percentFontTextAreaTest()", "84": "TextAreaTest::::percentFontTextAreaTest()", "85": "TextAreaTest::::percentFontTextAreaTest()", "86": "TextAreaTest::::percentFontTextAreaTest()", "87": "TextAreaTest::::percentFontTextAreaTest()", "88": "TextAreaTest::::percentFontTextAreaTest()", "89": "TextAreaTest::::percentFontTextAreaTest()", "90": "TextAreaTest::::percentFontTextAreaTest()", "91": "TextAreaTest::::percentFontTextAreaTest()", "92": "TextAreaTest::::percentFontTextAreaTest()", "93": "TextAreaTest::::percentFontTextAreaTest()", "94": "TextAreaTest::::percentFontTextAreaTest()", "95": "TextAreaTest::::percentFontTextAreaTest()", "96": "TextAreaTest::::percentFontTextAreaTest()", "97": "TextAreaTest::::percentFontTextAreaTest()", "98": "TextAreaTest::::percentFontTextAreaTest()", "99": "TextAreaTest::::percentFontTextAreaTest()", "100": "TextAreaTest::::percentFontTextAreaTest()", "101": "TextAreaTest::::percentFontTextAreaTest()", "102": "TextAreaTest::::percentFontTextAreaTest()", "103": "TextAreaTest::::percentFontTextAreaTest()", "104": "TextAreaTest::::percentFontTextAreaTest()", "106": "TextAreaTest::::heightTextAreaTest()", "107": "TextAreaTest::::heightTextAreaTest()", "108": "TextAreaTest::::heightTextAreaTest()", "109": "TextAreaTest::::heightTextAreaTest()", "110": "TextAreaTest::::heightTextAreaTest()", "111": "TextAreaTest::::heightTextAreaTest()", "112": "TextAreaTest::::heightTextAreaTest()", "113": "TextAreaTest::::heightTextAreaTest()", "114": "TextAreaTest::::heightTextAreaTest()", "115": "TextAreaTest::::heightTextAreaTest()", "116": "TextAreaTest::::heightTextAreaTest()", "117": "TextAreaTest::::heightTextAreaTest()", "118": "TextAreaTest::::heightTextAreaTest()", "119": "TextAreaTest::::heightTextAreaTest()", "120": "TextAreaTest::::heightTextAreaTest()", "121": "TextAreaTest::::heightTextAreaTest()", "123": "TextAreaTest::::minHeightTextAreaTest()", "124": "TextAreaTest::::minHeightTextAreaTest()", "125": "TextAreaTest::::minHeightTextAreaTest()", "126": "TextAreaTest::::minHeightTextAreaTest()", "127": "TextAreaTest::::minHeightTextAreaTest()", "128": "TextAreaTest::::minHeightTextAreaTest()", "129": "TextAreaTest::::minHeightTextAreaTest()", "130": "TextAreaTest::::minHeightTextAreaTest()", "131": "TextAreaTest::::minHeightTextAreaTest()", "132": "TextAreaTest::::minHeightTextAreaTest()", "133": "TextAreaTest::::minHeightTextAreaTest()", "134": "TextAreaTest::::minHeightTextAreaTest()", "135": "TextAreaTest::::minHeightTextAreaTest()", "136": "TextAreaTest::::minHeightTextAreaTest()", "137": "TextAreaTest::::minHeightTextAreaTest()", "138": "TextAreaTest::::minHeightTextAreaTest()", "140": "TextAreaTest::::hugeMarginPaddingBorderTest()", "141": "TextAreaTest::::hugeMarginPaddingBorderTest()", "142": "TextAreaTest::::hugeMarginPaddingBorderTest()", "143": "TextAreaTest::::hugeMarginPaddingBorderTest()", "144": "TextAreaTest::::hugeMarginPaddingBorderTest()", "145": "TextAreaTest::::hugeMarginPaddingBorderTest()", "146": "TextAreaTest::::hugeMarginPaddingBorderTest()", "147": "TextAreaTest::::hugeMarginPaddingBorderTest()", "148": "TextAreaTest::::hugeMarginPaddingBorderTest()", "149": "TextAreaTest::::hugeMarginPaddingBorderTest()", "150": "TextAreaTest::::hugeMarginPaddingBorderTest()", "151": "TextAreaTest::::hugeMarginPaddingBorderTest()", "152": "TextAreaTest::::hugeMarginPaddingBorderTest()", "153": "TextAreaTest::::hugeMarginPaddingBorderTest()", "154": "TextAreaTest::::hugeMarginPaddingBorderTest()", "155": "TextAreaTest::::hugeMarginPaddingBorderTest()", "156": "TextAreaTest::::hugeMarginPaddingBorderTest()", "157": "TextAreaTest::::hugeMarginPaddingBorderTest()", "158": "TextAreaTest::::hugeMarginPaddingBorderTest()", "159": "TextAreaTest::::hugeMarginPaddingBorderTest()", "160": "TextAreaTest::::hugeMarginPaddingBorderTest()", "161": "TextAreaTest::::hugeMarginPaddingBorderTest()", "162": "TextAreaTest::::hugeMarginPaddingBorderTest()", "163": "TextAreaTest::::hugeMarginPaddingBorderTest()", "164": "TextAreaTest::::hugeMarginPaddingBorderTest()", "165": "TextAreaTest::::hugeMarginPaddingBorderTest()", "166": "TextAreaTest::::hugeMarginPaddingBorderTest()", "167": "TextAreaTest::::hugeMarginPaddingBorderTest()", "168": "TextAreaTest::::hugeMarginPaddingBorderTest()", "169": "TextAreaTest::::hugeMarginPaddingBorderTest()", "170": "TextAreaTest::::hugeMarginPaddingBorderTest()", "171": "TextAreaTest::::hugeMarginPaddingBorderTest()", "172": "TextAreaTest::::hugeMarginPaddingBorderTest()", "173": "TextAreaTest::::hugeMarginPaddingBorderTest()", "174": "TextAreaTest::::hugeMarginPaddingBorderTest()", "175": "TextAreaTest::::hugeMarginPaddingBorderTest()", "176": "TextAreaTest::::hugeMarginPaddingBorderTest()", "178": "TextAreaTest::::textAreaDoesNotFitTest()", "179": "TextAreaTest::::textAreaDoesNotFitTest()", "180": "TextAreaTest::::textAreaDoesNotFitTest()", "181": "TextAreaTest::::textAreaDoesNotFitTest()", "182": "TextAreaTest::::textAreaDoesNotFitTest()", "183": "TextAreaTest::::textAreaDoesNotFitTest()", "184": "TextAreaTest::::textAreaDoesNotFitTest()", "185": "TextAreaTest::::textAreaDoesNotFitTest()", "186": "TextAreaTest::::textAreaDoesNotFitTest()", "187": "TextAreaTest::::textAreaDoesNotFitTest()", "188": "TextAreaTest::::textAreaDoesNotFitTest()", "189": "TextAreaTest::::textAreaDoesNotFitTest()", "190": "TextAreaTest::::textAreaDoesNotFitTest()", "191": "TextAreaTest::::textAreaDoesNotFitTest()", "192": "TextAreaTest::::textAreaDoesNotFitTest()", "193": "TextAreaTest::::textAreaDoesNotFitTest()", "194": "TextAreaTest::::textAreaDoesNotFitTest()", "195": "TextAreaTest::::textAreaDoesNotFitTest()", "196": "TextAreaTest::::textAreaDoesNotFitTest()", "197": "TextAreaTest::::textAreaDoesNotFitTest()", "198": "TextAreaTest::::textAreaDoesNotFitTest()", "199": "TextAreaTest::::textAreaDoesNotFitTest()", "200": "TextAreaTest::::textAreaDoesNotFitTest()", "202": "TextAreaTest::::textAreaWith0FontSizeDoesNotFitTest()", "203": "TextAreaTest::::textAreaWith0FontSizeDoesNotFitTest()", "204": "TextAreaTest::::textAreaWith0FontSizeDoesNotFitTest()", "205": "TextAreaTest::::textAreaWith0FontSizeDoesNotFitTest()", "206": "TextAreaTest::::textAreaWith0FontSizeDoesNotFitTest()", "207": "TextAreaTest::::textAreaWith0FontSizeDoesNotFitTest()", "208": "TextAreaTest::::textAreaWith0FontSizeDoesNotFitTest()", "209": "TextAreaTest::::textAreaWith0FontSizeDoesNotFitTest()", "210": "TextAreaTest::::textAreaWith0FontSizeDoesNotFitTest()", "211": "TextAreaTest::::textAreaWith0FontSizeDoesNotFitTest()", "212": "TextAreaTest::::textAreaWith0FontSizeDoesNotFitTest()", "213": "TextAreaTest::::textAreaWith0FontSizeDoesNotFitTest()", "214": "TextAreaTest::::textAreaWith0FontSizeDoesNotFitTest()", "215": "TextAreaTest::::textAreaWith0FontSizeDoesNotFitTest()", "216": "TextAreaTest::::textAreaWith0FontSizeDoesNotFitTest()", "217": "TextAreaTest::::textAreaWith0FontSizeDoesNotFitTest()", "218": "TextAreaTest::::textAreaWith0FontSizeDoesNotFitTest()", "219": "TextAreaTest::::textAreaWith0FontSizeDoesNotFitTest()", "220": "TextAreaTest::::textAreaWith0FontSizeDoesNotFitTest()", "221": "TextAreaTest::::textAreaWith0FontSizeDoesNotFitTest()", "222": "TextAreaTest::::textAreaWith0FontSizeDoesNotFitTest()", "223": "TextAreaTest::::textAreaWith0FontSizeDoesNotFitTest()", "224": "TextAreaTest::::textAreaWith0FontSizeDoesNotFitTest()", "225": "TextAreaTest::::textAreaWith0FontSizeDoesNotFitTest()", "226": "TextAreaTest::::textAreaWith0FontSizeDoesNotFitTest()", "227": "TextAreaTest::::textAreaWith0FontSizeDoesNotFitTest()", "228": "TextAreaTest::::textAreaWith0FontSizeDoesNotFitTest()", "229": "TextAreaTest::::textAreaWith0FontSizeDoesNotFitTest()", "230": "TextAreaTest::::textAreaWith0FontSizeDoesNotFitTest()", "231": "TextAreaTest::::textAreaWith0FontSizeDoesNotFitTest()", "232": "TextAreaTest::::textAreaWith0FontSizeDoesNotFitTest()", "234": "TextAreaTest::::textAreaWith0FontSizeFitsTest()", "235": "TextAreaTest::::textAreaWith0FontSizeFitsTest()", "236": "TextAreaTest::::textAreaWith0FontSizeFitsTest()", "237": "TextAreaTest::::textAreaWith0FontSizeFitsTest()", "238": "TextAreaTest::::textAreaWith0FontSizeFitsTest()", "239": "TextAreaTest::::textAreaWith0FontSizeFitsTest()", "240": "TextAreaTest::::textAreaWith0FontSizeFitsTest()", "241": "TextAreaTest::::textAreaWith0FontSizeFitsTest()", "242": "TextAreaTest::::textAreaWith0FontSizeFitsTest()", "243": "TextAreaTest::::textAreaWith0FontSizeFitsTest()", "244": "TextAreaTest::::textAreaWith0FontSizeFitsTest()", "245": "TextAreaTest::::textAreaWith0FontSizeFitsTest()", "246": "TextAreaTest::::textAreaWith0FontSizeFitsTest()", "247": "TextAreaTest::::textAreaWith0FontSizeFitsTest()", "248": "TextAreaTest::::textAreaWith0FontSizeFitsTest()", "249": "TextAreaTest::::textAreaWith0FontSizeFitsTest()", "250": "TextAreaTest::::textAreaWith0FontSizeFitsTest()", "251": "TextAreaTest::::textAreaWith0FontSizeFitsTest()", "252": "TextAreaTest::::textAreaWith0FontSizeFitsTest()", "253": "TextAreaTest::::textAreaWith0FontSizeFitsTest()", "254": "TextAreaTest::::textAreaWith0FontSizeFitsTest()", "255": "TextAreaTest::::textAreaWith0FontSizeFitsTest()", "256": "TextAreaTest::::textAreaWith0FontSizeFitsTest()", "257": "TextAreaTest::::textAreaWith0FontSizeFitsTest()", "258": "TextAreaTest::::textAreaWith0FontSizeFitsTest()", "259": "TextAreaTest::::textAreaWith0FontSizeFitsTest()", "260": "TextAreaTest::::textAreaWith0FontSizeFitsTest()", "262": "TextAreaTest::::textAreaWith0FontSizeWithoutHeightTest()", "263": "TextAreaTest::::textAreaWith0FontSizeWithoutHeightTest()", "264": "TextAreaTest::::textAreaWith0FontSizeWithoutHeightTest()", "265": "TextAreaTest::::textAreaWith0FontSizeWithoutHeightTest()", "266": "TextAreaTest::::textAreaWith0FontSizeWithoutHeightTest()", "267": "TextAreaTest::::textAreaWith0FontSizeWithoutHeightTest()", "268": "TextAreaTest::::textAreaWith0FontSizeWithoutHeightTest()", "269": "TextAreaTest::::textAreaWith0FontSizeWithoutHeightTest()", "270": "TextAreaTest::::textAreaWith0FontSizeWithoutHeightTest()", "271": "TextAreaTest::::textAreaWith0FontSizeWithoutHeightTest()", "272": "TextAreaTest::::textAreaWith0FontSizeWithoutHeightTest()", "273": "TextAreaTest::::textAreaWith0FontSizeWithoutHeightTest()", "274": "TextAreaTest::::textAreaWith0FontSizeWithoutHeightTest()", "275": "TextAreaTest::::textAreaWith0FontSizeWithoutHeightTest()", "276": "TextAreaTest::::textAreaWith0FontSizeWithoutHeightTest()", "277": "TextAreaTest::::textAreaWith0FontSizeWithoutHeightTest()", "278": "TextAreaTest::::textAreaWith0FontSizeWithoutHeightTest()", "279": "TextAreaTest::::textAreaWith0FontSizeWithoutHeightTest()", "280": "TextAreaTest::::textAreaWith0FontSizeWithoutHeightTest()", "281": "TextAreaTest::::textAreaWith0FontSizeWithoutHeightTest()", "282": "TextAreaTest::::textAreaWith0FontSizeWithoutHeightTest()", "283": "TextAreaTest::::textAreaWith0FontSizeWithoutHeightTest()", "284": "TextAreaTest::::textAreaWith0FontSizeWithoutHeightTest()", "285": "TextAreaTest::::textAreaWith0FontSizeWithoutHeightTest()", "286": "TextAreaTest::::textAreaWith0FontSizeWithoutHeightTest()", "288": "TextAreaTest::::textAreaWithBorderLessThan1Test()", "289": "TextAreaTest::::textAreaWithBorderLessThan1Test()", "290": "TextAreaTest::::textAreaWithBorderLessThan1Test()", "291": "TextAreaTest::::textAreaWithBorderLessThan1Test()", "292": "TextAreaTest::::textAreaWithBorderLessThan1Test()", "293": "TextAreaTest::::textAreaWithBorderLessThan1Test()", "294": "TextAreaTest::::textAreaWithBorderLessThan1Test()", "295": "TextAreaTest::::textAreaWithBorderLessThan1Test()", "296": "TextAreaTest::::textAreaWithBorderLessThan1Test()", "297": "TextAreaTest::::textAreaWithBorderLessThan1Test()", "298": "TextAreaTest::::textAreaWithBorderLessThan1Test()", "299": "TextAreaTest::::textAreaWithBorderLessThan1Test()", "300": "TextAreaTest::::textAreaWithBorderLessThan1Test()", "301": "TextAreaTest::::textAreaWithBorderLessThan1Test()", "302": "TextAreaTest::::textAreaWithBorderLessThan1Test()", "303": "TextAreaTest::::textAreaWithBorderLessThan1Test()", "305": "TextAreaTest::::textAreaWithJustificationTest()", "306": "TextAreaTest::::textAreaWithJustificationTest()", "307": "TextAreaTest::::textAreaWithJustificationTest()", "308": "TextAreaTest::::textAreaWithJustificationTest()", "309": "TextAreaTest::::textAreaWithJustificationTest()", "310": "TextAreaTest::::textAreaWithJustificationTest()", "311": "TextAreaTest::::textAreaWithJustificationTest()", "312": "TextAreaTest::::textAreaWithJustificationTest()", "313": "TextAreaTest::::textAreaWithJustificationTest()", "314": "TextAreaTest::::textAreaWithJustificationTest()", "315": "TextAreaTest::::textAreaWithJustificationTest()", "316": "TextAreaTest::::textAreaWithJustificationTest()", "317": "TextAreaTest::::textAreaWithJustificationTest()", "318": "TextAreaTest::::textAreaWithJustificationTest()", "319": "TextAreaTest::::textAreaWithJustificationTest()", "320": "TextAreaTest::::textAreaWithJustificationTest()", "321": "TextAreaTest::::textAreaWithJustificationTest()", "322": "TextAreaTest::::textAreaWithJustificationTest()", "323": "TextAreaTest::::textAreaWithJustificationTest()", "324": "TextAreaTest::::textAreaWithJustificationTest()", "325": "TextAreaTest::::textAreaWithJustificationTest()", "327": "TextAreaTest::::textAreaWithCustomBorderTest()", "328": "TextAreaTest::::textAreaWithCustomBorderTest()", "329": "TextAreaTest::::textAreaWithCustomBorderTest()", "330": "TextAreaTest::::textAreaWithCustomBorderTest()", "331": "TextAreaTest::::textAreaWithCustomBorderTest()", "332": "TextAreaTest::::textAreaWithCustomBorderTest()", "333": "TextAreaTest::::textAreaWithCustomBorderTest()", "334": "TextAreaTest::::textAreaWithCustomBorderTest()", "335": "TextAreaTest::::textAreaWithCustomBorderTest()", "336": "TextAreaTest::::textAreaWithCustomBorderTest()", "337": "TextAreaTest::::textAreaWithCustomBorderTest()", "338": "TextAreaTest::::textAreaWithCustomBorderTest()", "339": "TextAreaTest::::textAreaWithCustomBorderTest()", "340": "TextAreaTest::::textAreaWithCustomBorderTest()", "341": "TextAreaTest::::textAreaWithCustomBorderTest()", "342": "TextAreaTest::::textAreaWithCustomBorderTest()", "343": "TextAreaTest::::textAreaWithCustomBorderTest()", "344": "TextAreaTest::::textAreaWithCustomBorderTest()", "345": "TextAreaTest::::textAreaWithCustomBorderTest()", "346": "TextAreaTest::::textAreaWithCustomBorderTest()", "347": "TextAreaTest::::textAreaWithCustomBorderTest()", "348": "TextAreaTest::::textAreaWithCustomBorderTest()", "350": "TextAreaTest::::maxHeightTextAreaTest()", "351": "TextAreaTest::::maxHeightTextAreaTest()", "352": "TextAreaTest::::maxHeightTextAreaTest()", "353": "TextAreaTest::::maxHeightTextAreaTest()", "354": "TextAreaTest::::maxHeightTextAreaTest()", "355": "TextAreaTest::::maxHeightTextAreaTest()", "356": "TextAreaTest::::maxHeightTextAreaTest()", "357": "TextAreaTest::::maxHeightTextAreaTest()", "358": "TextAreaTest::::maxHeightTextAreaTest()", "359": "TextAreaTest::::maxHeightTextAreaTest()", "360": "TextAreaTest::::maxHeightTextAreaTest()", "361": "TextAreaTest::::maxHeightTextAreaTest()", "362": "TextAreaTest::::maxHeightTextAreaTest()", "363": "TextAreaTest::::maxHeightTextAreaTest()", "364": "TextAreaTest::::maxHeightTextAreaTest()", "365": "TextAreaTest::::maxHeightTextAreaTest()", "367": "TextAreaTest::::textAreaWithCustomLeadingTest()", "368": "TextAreaTest::::textAreaWithCustomLeadingTest()", "369": "TextAreaTest::::textAreaWithCustomLeadingTest()", "370": "TextAreaTest::::textAreaWithCustomLeadingTest()", "371": "TextAreaTest::::textAreaWithCustomLeadingTest()", "372": "TextAreaTest::::textAreaWithCustomLeadingTest()", "373": "TextAreaTest::::textAreaWithCustomLeadingTest()", "374": "TextAreaTest::::textAreaWithCustomLeadingTest()", "375": "TextAreaTest::::textAreaWithCustomLeadingTest()", "376": "TextAreaTest::::textAreaWithCustomLeadingTest()", "377": "TextAreaTest::::textAreaWithCustomLeadingTest()", "378": "TextAreaTest::::textAreaWithCustomLeadingTest()", "379": "TextAreaTest::::textAreaWithCustomLeadingTest()", "380": "TextAreaTest::::textAreaWithCustomLeadingTest()", "381": "TextAreaTest::::textAreaWithCustomLeadingTest()", "382": "TextAreaTest::::textAreaWithCustomLeadingTest()", "383": "TextAreaTest::::textAreaWithCustomLeadingTest()", "384": "TextAreaTest::::textAreaWithCustomLeadingTest()", "385": "TextAreaTest::::textAreaWithCustomLeadingTest()", "386": "TextAreaTest::::textAreaWithCustomLeadingTest()", "387": "TextAreaTest::::textAreaWithCustomLeadingTest()", "388": "TextAreaTest::::textAreaWithCustomLeadingTest()", "389": "TextAreaTest::::textAreaWithCustomLeadingTest()", "390": "TextAreaTest::::textAreaWithCustomLeadingTest()", "391": "TextAreaTest::::textAreaWithCustomLeadingTest()", "392": "TextAreaTest::::textAreaWithCustomLeadingTest()", "393": "TextAreaTest::::textAreaWithCustomLeadingTest()", "394": "TextAreaTest::::textAreaWithCustomLeadingTest()", "395": "TextAreaTest::::textAreaWithCustomLeadingTest()", "396": "TextAreaTest::::textAreaWithCustomLeadingTest()", "397": "TextAreaTest::::textAreaWithCustomLeadingTest()", "398": "TextAreaTest::::textAreaWithCustomLeadingTest()", "399": "TextAreaTest::::textAreaWithCustomLeadingTest()", "400": "TextAreaTest::::textAreaWithCustomLeadingTest()", "401": "TextAreaTest::::textAreaWithCustomLeadingTest()", "402": "TextAreaTest::::textAreaWithCustomLeadingTest()"}, "tests": [{"test_lines": [62, 80], "covered_lines": [58, 59, 60, 85, 89, 91, 100, 116, 117, 119, 127, 131, 132, 133, 134, 136, 138, 139]}, {"test_lines": [82, 104], "covered_lines": [58, 59, 60, 85, 89, 91, 100, 116, 117, 119, 127, 131, 132, 133, 134, 136, 138, 139]}, {"test_lines": [106, 121], "covered_lines": [58, 59, 60, 85, 89, 91, 116, 117, 119, 127, 131, 132, 133, 134, 136, 138, 139]}, {"test_lines": [123, 138], "covered_lines": [58, 59, 60, 85, 89, 91, 116, 117, 119, 127, 131, 132, 133, 134, 136, 138, 139]}, {"test_lines": [140, 176], "covered_lines": [58, 59, 60, 85, 89, 91, 100, 116, 117, 119, 127, 131, 132, 133, 134, 136, 138, 139]}, {"test_lines": [178, 200], "covered_lines": [58, 59, 60, 85, 89, 91, 100, 116, 117, 119, 127, 131, 132, 133, 134, 136, 138, 139]}, {"test_lines": [202, 232], "covered_lines": [58, 59, 60, 85, 89, 91, 100, 116, 117, 119, 127, 131, 132, 133, 134, 136, 138, 139]}, {"test_lines": [234, 260], "covered_lines": [58, 59, 60, 85, 89, 91, 100, 116, 117, 119, 127, 131, 132, 133, 134, 136, 138, 139]}, {"test_lines": [262, 286], "covered_lines": [58, 59, 60, 85, 89, 91, 100, 116, 117, 119, 127, 131, 132, 133, 134, 136, 138, 139]}, {"test_lines": [288, 303], "covered_lines": [58, 59, 60, 85, 89, 91, 100, 116, 117, 119, 127, 131, 132, 133, 134, 136, 138, 139]}, {"test_lines": [305, 325], "covered_lines": [58, 59, 60, 85, 89, 91, 100, 116, 117, 119, 127, 131, 132, 133, 134, 136, 138, 139]}, {"test_lines": [327, 348], "covered_lines": [58, 59, 60, 85, 89, 91, 100, 116, 117, 119, 127, 131, 132, 133, 134, 136, 138, 139]}, {"test_lines": [350, 365], "covered_lines": [58, 59, 60, 85, 89, 91, 116, 117, 119, 127, 131, 132, 133, 134, 136, 138, 139]}, {"test_lines": [367, 402], "covered_lines": [58, 59, 60, 85, 89, 91, 100, 116, 117, 119, 127, 131, 132, 133, 134, 136, 138, 139]}]}, "/bernard/dataset_construction/prep/repos/itext-java/forms/src/main/java/com/itextpdf/forms/form/element/ComboBoxField.java": {"class_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.forms.form.element;\n", "\n", "import com.itextpdf.commons.utils.MessageFormatUtil;\n", "import com.itextpdf.forms.FormDefaultAccessibilityProperties;\n", "import com.itextpdf.forms.exceptions.FormsExceptionMessageConstant;\n", "import com.itextpdf.forms.form.FormProperty;\n", "import com.itextpdf.forms.form.renderer.SelectFieldComboBoxRenderer;\n", "import com.itextpdf.forms.logs.FormsLogMessageConstants;\n", "import com.itextpdf.kernel.pdf.tagutils.AccessibilityProperties;\n", "import com.itextpdf.layout.renderer.IRenderer;\n", "\n", "import org.slf4j.Logger;\n", "import org.slf4j.LoggerFactory;\n", "\n", "/**\n", " * A field that represents a control for selecting one of the provided options.\n", " */\n", "public class ComboBoxField extends AbstractSelectField {\n", "    private static final Logger LOGGER = LoggerFactory.getLogger(ComboBoxField.class);\n", "\n", "    private String selectedExportValue;\n", "\n", "    /**\n", "     * Creates a new select field box.\n", "     *\n", "     * @param id the id\n", "     */\n", "    public ComboBoxField(String id) {\n", "        super(id);\n", "    }\n", "\n", "    /**\n", "     * Gets the export value of the selected option.\n", "     *\n", "     * @return the export value of the selected option. This may be null if no value has been selected.\n", "     */\n", "    public String getSelectedExportValue() {\n", "        return selectedExportValue;\n", "    }\n", "\n", "\n", "    /**\n", "     * Selects an option by its index. The index is zero-based.\n", "     *\n", "     * @param index the index of the option to select.\n", "     *\n", "     * @return this {@link ComboBoxField} instance.\n", "     *\n", "     * @throws IndexOutOfBoundsException if the index is out of bounds.\n", "     */\n", "    public ComboBoxField setSelected(int index) {\n", "        if (index < 0 || index >= this.getItems().size()) {\n", "            String message = MessageFormatUtil.format(FormsExceptionMessageConstant.INDEX_OUT_OF_BOUNDS, index,\n", "                    this.getItems().size());\n", "            throw new IndexOutOfBoundsException(message);\n", "        }\n", "        setSelected(this.getItems().get(index));\n", "        return this;\n", "    }\n", "\n", "    /**\n", "     * Selects an option by its export value.\n", "     *\n", "     * @param value the export value of the option to select.\n", "     *\n", "     * @return this {@link ComboBoxField} instance.\n", "     */\n", "    public ComboBoxField setSelected(String value) {\n", "        clearSelected();\n", "        selectedExportValue = value;\n", "        boolean found = false;\n", "        for (SelectFieldItem option : this.getItems()) {\n", "            if (option.getExportValue().equals(value)) {\n", "                if (!found) {\n", "                    option.getElement().setProperty(FormProperty.FORM_FIELD_SELECTED, true);\n", "                    found = true;\n", "                } else {\n", "                    LOGGER.warn(FormsLogMessageConstants.DUPLICATE_EXPORT_VALUE);\n", "                }\n", "            }\n", "        }\n", "        return this;\n", "    }\n", "\n", "    /**\n", "     * Selects an option by its value. This will use the export value of the\n", "     * option to match it to existing options.\n", "     *\n", "     * @param item the option to select.\n", "     *\n", "     * @return this {@link ComboBoxField} instance.\n", "     */\n", "    public ComboBoxField setSelected(SelectFieldItem item) {\n", "        if (item == null) {\n", "            return this;\n", "        }\n", "        setSelected(item.getExportValue());\n", "        return this;\n", "    }\n", "\n", "    /**\n", "     * Add an option to the element.\n", "     *\n", "     * @param option a {@link SelectFieldItem}.\n", "     */\n", "    @Override\n", "    public void addOption(SelectFieldItem option) {\n", "        boolean found = false;\n", "        for (SelectFieldItem item : this.getItems()) {\n", "            if (item.getExportValue().equals(option.getExportValue())) {\n", "                found = true;\n", "                break;\n", "            }\n", "        }\n", "        if (found) {\n", "            LOGGER.warn(FormsLogMessageConstants.DUPLICATE_EXPORT_VALUE);\n", "        }\n", "        super.addOption(option);\n", "    }\n", "\n", "\n", "    /**\n", "     * Gets the selected option.\n", "     *\n", "     * @return the selected option. This may be null if no option has been selected.\n", "     */\n", "    public SelectFieldItem getSelectedOption() {\n", "        if (selectedExportValue == null) {\n", "            return null;\n", "        }\n", "        for (SelectFieldItem option : this.getItems()) {\n", "            if (option.getExportValue().equals(selectedExportValue)) {\n", "                return option;\n", "            }\n", "        }\n", "        return null;\n", "    }\n", "\n", "    /**\n", "     * {@inheritDoc}\n", "     */\n", "    @Override\n", "    public AccessibilityProperties getAccessibilityProperties() {\n", "        if (tagProperties == null){\n", "            tagProperties = new FormDefaultAccessibilityProperties(\n", "                    FormDefaultAccessibilityProperties.FORM_FIELD_LIST_BOX);\n", "        }\n", "        return tagProperties;\n", "    }\n", "\n", "    @Override\n", "    protected IRenderer makeNewRenderer() {\n", "        return new SelectFieldComboBoxRenderer(this);\n", "    }\n", "\n", "    private void clearSelected() {\n", "        this.selectedExportValue = null;\n", "        for (SelectFieldItem option : this.getItems()) {\n", "            option.getElement().deleteOwnProperty(FormProperty.FORM_FIELD_SELECTED);\n", "        }\n", "    }\n", "}\n"], "test_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.forms.form.element;\n", "\n", "import com.itextpdf.forms.form.FormProperty;\n", "import com.itextpdf.forms.logs.FormsLogMessageConstants;\n", "import com.itextpdf.kernel.colors.Color;\n", "import com.itextpdf.kernel.colors.ColorConstants;\n", "import com.itextpdf.kernel.pdf.PdfDocument;\n", "import com.itextpdf.kernel.pdf.PdfWriter;\n", "import com.itextpdf.kernel.utils.CompareTool;\n", "import com.itextpdf.layout.Document;\n", "import com.itextpdf.layout.borders.Border;\n", "import com.itextpdf.layout.borders.SolidBorder;\n", "import com.itextpdf.layout.element.Div;\n", "import com.itextpdf.layout.properties.Property;\n", "import com.itextpdf.layout.properties.RenderingMode;\n", "import com.itextpdf.layout.properties.UnitValue;\n", "import com.itextpdf.test.ExtendedITextTest;\n", "import com.itextpdf.test.annotations.LogMessage;\n", "import com.itextpdf.test.annotations.LogMessages;\n", "import com.itextpdf.test.annotations.type.IntegrationTest;\n", "\n", "import java.io.IOException;\n", "import java.util.ArrayList;\n", "import java.util.List;\n", "import org.junit.Assert;\n", "import org.junit.BeforeClass;\n", "import org.junit.Test;\n", "import org.junit.experimental.categories.Category;\n", "\n", "@Category(IntegrationTest.class)\n", "public class ComboBoxFieldTest extends ExtendedITextTest {\n", "    public static final String SOURCE_FOLDER =\n", "            \"./src/test/resources/com/itextpdf/forms/form/element/ComboBoxFieldTest/\";\n", "    public static final String DESTINATION_FOLDER =\n", "            \"./target/test/com/itextpdf/forms/form/element/ComboBoxFieldTest/\";\n", "\n", "    @BeforeClass\n", "    public static void beforeClass() {\n", "        createOrClearDestinationFolder(DESTINATION_FOLDER);\n", "    }\n", "\n", "    @Test\n", "    public void emptyComboBoxFieldTest() throws IOException, InterruptedException {\n", "        String outPdf = DESTINATION_FOLDER + \"emptyComboBoxField.pdf\";\n", "        String cmpPdf = SOURCE_FOLDER + \"cmp_emptyComboBoxField.pdf\";\n", "        try (Document document = new Document(new PdfDocument(new PdfWriter(outPdf)))) {\n", "            ComboBoxField flattenComboBoxField = new ComboBoxField(\"flatten empty combo box field\");\n", "            flattenComboBoxField.setInteractive(false);\n", "            flattenComboBoxField.setBackgroundColor(ColorConstants.RED);\n", "            document.add(flattenComboBoxField);\n", "\n", "            ComboBoxField comboBoxWithBorder = new ComboBoxField(\"with boderder\");\n", "            comboBoxWithBorder.setBorder(new SolidBorder(ColorConstants.BLUE, 1));\n", "            document.add(comboBoxWithBorder);\n", "\n", "            ComboBoxField comboBoxWithBackgroundColor = new ComboBoxField(\"with background color\");\n", "            comboBoxWithBackgroundColor.setBackgroundColor(ColorConstants.GREEN);\n", "            comboBoxWithBackgroundColor.setInteractive(true);\n", "            document.add(comboBoxWithBackgroundColor);\n", "\n", "            ComboBoxField comboBoxWithBorderAndBackgroundColor = new ComboBoxField(\"with border\");\n", "            comboBoxWithBorderAndBackgroundColor.setBorder(new SolidBorder(ColorConstants.BLUE, 1));\n", "            comboBoxWithBorderAndBackgroundColor.setInteractive(true);\n", "            document.add(comboBoxWithBorderAndBackgroundColor);\n", "        }\n", "\n", "        Assert.assertNull(new CompareTool().compareByContent(outPdf, cmpPdf, DESTINATION_FOLDER));\n", "    }\n", "\n", "\n", "    @Test\n", "    public void basicComboBoxFieldTest() throws IOException, InterruptedException {\n", "        String outPdf = DESTINATION_FOLDER + \"basicComboBoxField.pdf\";\n", "        String cmpPdf = SOURCE_FOLDER + \"cmp_basicComboBoxField.pdf\";\n", "\n", "        try (Document document = new Document(new PdfDocument(new PdfWriter(outPdf)))) {\n", "            ComboBoxField formComboBoxField = new ComboBoxField(\"form combo box field\");\n", "            formComboBoxField.setInteractive(true);\n", "            formComboBoxField.addOption(new SelectFieldItem(\"option 1\"));\n", "            formComboBoxField.addOption(new SelectFieldItem(\"option 2\"));\n", "            document.add(formComboBoxField);\n", "\n", "            ComboBoxField flattenComboBoxField = new ComboBoxField(\"flatten combo box field\");\n", "            flattenComboBoxField.setInteractive(false);\n", "            flattenComboBoxField.addOption(new SelectFieldItem(\"option 1\"));\n", "            flattenComboBoxField.addOption(new SelectFieldItem(\"option 2\"));\n", "            document.add(flattenComboBoxField);\n", "\n", "            ComboBoxField formComboBoxFieldSelected = new ComboBoxField(\"form combo box field selected\");\n", "            formComboBoxFieldSelected.setInteractive(true);\n", "            formComboBoxFieldSelected.addOption(new SelectFieldItem(\"option 1\"));\n", "            formComboBoxFieldSelected.addOption(new SelectFieldItem(\"option 2\"));\n", "            formComboBoxFieldSelected.setSelected(\"option 1\");\n", "            document.add(formComboBoxFieldSelected);\n", "\n", "            ComboBoxField flattenComboBoxFieldSelected = new ComboBoxField(\"flatten combo box field selected\");\n", "            flattenComboBoxFieldSelected.setInteractive(false);\n", "            flattenComboBoxFieldSelected.addOption(new SelectFieldItem(\"option 1\"));\n", "            flattenComboBoxFieldSelected.addOption(new SelectFieldItem(\"option 2\"));\n", "            flattenComboBoxFieldSelected.setSelected(\"option 1\");\n", "            document.add(flattenComboBoxFieldSelected);\n", "\n", "        }\n", "\n", "        Assert.assertNull(new CompareTool().compareByContent(outPdf, cmpPdf, DESTINATION_FOLDER));\n", "    }\n", "\n", "\n", "    @Test\n", "    public void basicComboBoxFieldWithBordersTest() throws IOException, InterruptedException {\n", "        String outPdf = DESTINATION_FOLDER + \"basicComboBoxBorderTest.pdf\";\n", "        String cmpPdf = SOURCE_FOLDER + \"cmp_basicComboBoxBorderTest.pdf\";\n", "        List<Border> borderList = new ArrayList<>();\n", "        borderList.add(new SolidBorder(ColorConstants.RED, .7f));\n", "        borderList.add(new SolidBorder(ColorConstants.GREEN, 1));\n", "        borderList.add(new SolidBorder(ColorConstants.BLUE, 2));\n", "        try (Document document = new Document(new PdfDocument(new PdfWriter(outPdf)))) {\n", "            for (int i = 0; i < borderList.size(); i++) {\n", "\n", "                ComboBoxField formComboBoxField = new ComboBoxField(\"form combo box field\" + i);\n", "                formComboBoxField.setInteractive(true);\n", "\n", "                SelectFieldItem option1 = new SelectFieldItem(\"option 1\");\n", "                formComboBoxField.addOption(option1);\n", "                SelectFieldItem option2 = new SelectFieldItem(\"option 2\");\n", "                formComboBoxField.addOption(option2);\n", "                formComboBoxField.setSelected(option1);\n", "\n", "                formComboBoxField.setBorder(borderList.get(i));\n", "                document.add(formComboBoxField);\n", "\n", "                ComboBoxField flattenComboBoxField = new ComboBoxField(\"flatten combo box field\" + i);\n", "                flattenComboBoxField.setInteractive(false);\n", "                SelectFieldItem option3 = new SelectFieldItem(\"option 1\");\n", "                flattenComboBoxField.addOption(option3);\n", "                flattenComboBoxField.setSelected(option3);\n", "                flattenComboBoxField.setBorder(borderList.get(i));\n", "                SelectFieldItem option4 = new SelectFieldItem(\"option 2\");\n", "                flattenComboBoxField.addOption(option4);\n", "                document.add(flattenComboBoxField);\n", "            }\n", "        }\n", "\n", "        Assert.assertNull(new CompareTool().compareByContent(outPdf, cmpPdf, DESTINATION_FOLDER));\n", "    }\n", "\n", "    @Test\n", "    public void basicComboBoxFieldWithBackgroundTest() throws IOException, InterruptedException {\n", "        String outPdf = DESTINATION_FOLDER + \"basicComboBoxBackgroundTest.pdf\";\n", "        String cmpPdf = SOURCE_FOLDER + \"cmp_basicComboBoxBackgroundTest.pdf\";\n", "        List<Color> borderList = new ArrayList<>();\n", "        borderList.add(ColorConstants.RED);\n", "        borderList.add(ColorConstants.GREEN);\n", "        borderList.add(ColorConstants.BLUE);\n", "        try (Document document = new Document(new PdfDocument(new PdfWriter(outPdf)))) {\n", "            for (int i = 0; i < borderList.size(); i++) {\n", "\n", "                ComboBoxField formComboBoxField = new ComboBoxField(\"form combo box field\" + i);\n", "                formComboBoxField.setInteractive(true);\n", "\n", "                SelectFieldItem option1 = new SelectFieldItem(\"option 1\");\n", "                formComboBoxField.addOption(option1);\n", "                SelectFieldItem option2 = new SelectFieldItem(\"option 2\");\n", "                formComboBoxField.addOption(option2);\n", "                formComboBoxField.setSelected(option1);\n", "\n", "                formComboBoxField.setBackgroundColor(borderList.get(i));\n", "                document.add(formComboBoxField);\n", "\n", "                ComboBoxField flattenComboBoxField = new ComboBoxField(\"flatten combo box field\" + i);\n", "                flattenComboBoxField.setInteractive(false);\n", "                SelectFieldItem option3 = new SelectFieldItem(\"option 1\");\n", "                flattenComboBoxField.addOption(option3);\n", "                flattenComboBoxField.setSelected(option3);\n", "                flattenComboBoxField.setBackgroundColor(borderList.get(i));\n", "                SelectFieldItem option4 = new SelectFieldItem(\"option 2\");\n", "                flattenComboBoxField.addOption(option4);\n", "                document.add(flattenComboBoxField);\n", "            }\n", "        }\n", "\n", "        Assert.assertNull(new CompareTool().compareByContent(outPdf, cmpPdf, DESTINATION_FOLDER));\n", "    }\n", "\n", "    @Test\n", "    public void comboBoxFieldWithoutSelectionTest() throws IOException, InterruptedException {\n", "        String outPdf = DESTINATION_FOLDER + \"comboBoxFieldWithoutSelection.pdf\";\n", "        String cmpPdf = SOURCE_FOLDER + \"cmp_comboBoxFieldWithoutSelection.pdf\";\n", "\n", "        try (Document document = new Document(new PdfDocument(new PdfWriter(outPdf)))) {\n", "\n", "            ComboBoxField flattenComboBoxFieldWithFont = new ComboBoxField(\"flatten combo box field with font\");\n", "            flattenComboBoxFieldWithFont.setProperty(FormProperty.FORM_FIELD_FLATTEN, true);\n", "            flattenComboBoxFieldWithFont.setBackgroundColor(ColorConstants.RED);\n", "            flattenComboBoxFieldWithFont.addOption(new SelectFieldItem(\"option 1\"));\n", "            flattenComboBoxFieldWithFont.addOption(new SelectFieldItem(\"option 2\"));\n", "            document.add(flattenComboBoxFieldWithFont);\n", "\n", "            ComboBoxField flattenComboBoxFieldWithPercentFont = new ComboBoxField(\n", "                    \"flatten combo box field with percent font\");\n", "            flattenComboBoxFieldWithPercentFont.setProperty(FormProperty.FORM_FIELD_FLATTEN, true);\n", "            flattenComboBoxFieldWithPercentFont.setBackgroundColor(ColorConstants.RED);\n", "            flattenComboBoxFieldWithPercentFont.addOption(new SelectFieldItem(\"option 1\"));\n", "            flattenComboBoxFieldWithPercentFont.addOption(new SelectFieldItem(\"option 2\"));\n", "            flattenComboBoxFieldWithPercentFont.setProperty(Property.FONT_SIZE, UnitValue.createPercentValue(30));\n", "            document.add(flattenComboBoxFieldWithPercentFont);\n", "        }\n", "\n", "        Assert.assertNull(new CompareTool().compareByContent(outPdf, cmpPdf, DESTINATION_FOLDER));\n", "    }\n", "\n", "    @Test\n", "    public void comboBoxFieldWithHeightTest() throws IOException, InterruptedException {\n", "        String outPdf = DESTINATION_FOLDER + \"comboBoxFieldWithHeight.pdf\";\n", "        String cmpPdf = SOURCE_FOLDER + \"cmp_comboBoxFieldWithHeight.pdf\";\n", "\n", "        try (Document document = new Document(new PdfDocument(new PdfWriter(outPdf)))) {\n", "\n", "            ComboBoxField flattenComboBoxField = new ComboBoxField(\"flatten combo box field with height\");\n", "            flattenComboBoxField.setBackgroundColor(ColorConstants.RED);\n", "            flattenComboBoxField.addOption(new SelectFieldItem(\"option 1\"));\n", "            flattenComboBoxField.addOption(new SelectFieldItem(\"option 2\"));\n", "            flattenComboBoxField.setSelected(\"option 2\");\n", "            flattenComboBoxField.setProperty(Property.HEIGHT, UnitValue.createPointValue(100));\n", "            document.add(flattenComboBoxField);\n", "        }\n", "\n", "        Assert.assertNull(new CompareTool().compareByContent(outPdf, cmpPdf, DESTINATION_FOLDER));\n", "    }\n", "\n", "    @Test\n", "    public void comboBoxFieldWithMinHeightTest() throws IOException, InterruptedException {\n", "        String outPdf = DESTINATION_FOLDER + \"comboBoxFieldWithMinHeight.pdf\";\n", "        String cmpPdf = SOURCE_FOLDER + \"cmp_comboBoxFieldWithMinHeight.pdf\";\n", "\n", "        try (Document document = new Document(new PdfDocument(new PdfWriter(outPdf)))) {\n", "            ComboBoxField flattenComboBoxField = new ComboBoxField(\"flatten combo box field with min height\");\n", "            flattenComboBoxField.setBackgroundColor(ColorConstants.RED);\n", "            flattenComboBoxField.addOption(new SelectFieldItem(\"option 1\"));\n", "            flattenComboBoxField.addOption(new SelectFieldItem(\"option 2\"));\n", "            flattenComboBoxField.setSelected(\"option 2\");\n", "            flattenComboBoxField.setProperty(Property.MIN_HEIGHT, UnitValue.createPointValue(100));\n", "            document.add(flattenComboBoxField);\n", "        }\n", "\n", "        Assert.assertNull(new CompareTool().compareByContent(outPdf, cmpPdf, DESTINATION_FOLDER));\n", "    }\n", "\n", "    @Test\n", "    public void comboBoxFieldWithMaxHeightTest() throws IOException, InterruptedException {\n", "        String outPdf = DESTINATION_FOLDER + \"comboBoxFieldWithMaxHeight.pdf\";\n", "        String cmpPdf = SOURCE_FOLDER + \"cmp_comboBoxFieldWithMaxHeight.pdf\";\n", "        try (Document document = new Document(new PdfDocument(new PdfWriter(outPdf)))) {\n", "            ComboBoxField flattenComboBoxField = new ComboBoxField(\"flatten combo box field with max height\");\n", "            flattenComboBoxField.setBackgroundColor(ColorConstants.RED);\n", "            flattenComboBoxField.addOption(new SelectFieldItem(\"option 1\"));\n", "            flattenComboBoxField.addOption(new SelectFieldItem(\"option 2\"));\n", "            flattenComboBoxField.setSelected(\"option 1\");\n", "            flattenComboBoxField.setProperty(Property.MAX_HEIGHT, UnitValue.createPointValue(10));\n", "            document.add(flattenComboBoxField);\n", "        }\n", "\n", "        Assert.assertNull(new CompareTool().compareByContent(outPdf, cmpPdf, DESTINATION_FOLDER));\n", "    }\n", "\n", "    @Test\n", "    public void comboBoxFieldCannotFitTest() throws IOException, InterruptedException {\n", "        String outPdf = DESTINATION_FOLDER + \"comboBoxFieldCannotFit.pdf\";\n", "        String cmpPdf = SOURCE_FOLDER + \"cmp_comboBoxFieldCannotFit.pdf\";\n", "\n", "        try (Document document = new Document(new PdfDocument(new PdfWriter(outPdf)))) {\n", "            Div div = new Div();\n", "            div.setWidth(UnitValue.createPointValue(400));\n", "            div.setHeight(UnitValue.createPointValue(755));\n", "            div.setBackgroundColor(ColorConstants.PINK);\n", "            document.add(div);\n", "\n", "            ComboBoxField flattenComboBoxField = new ComboBoxField(\"flatten combo box cannot fit\");\n", "            flattenComboBoxField.setProperty(FormProperty.FORM_FIELD_FLATTEN, true);\n", "            flattenComboBoxField.setBackgroundColor(ColorConstants.RED);\n", "            flattenComboBoxField.addOption(new SelectFieldItem(\"option 1\"));\n", "            flattenComboBoxField.addOption(new SelectFieldItem(\"option 2\"));\n", "            flattenComboBoxField.setSelected(\"option 1\");\n", "            document.add(flattenComboBoxField);\n", "        }\n", "\n", "        Assert.assertNull(new CompareTool().compareByContent(outPdf, cmpPdf, DESTINATION_FOLDER));\n", "    }\n", "\n", "    @Test\n", "    public void comboBoxFieldWithLangTest() throws IOException, InterruptedException {\n", "        String outPdf = DESTINATION_FOLDER + \"comboBoxFieldWithLang.pdf\";\n", "        String cmpPdf = SOURCE_FOLDER + \"cmp_comboBoxFieldWithLang.pdf\";\n", "        try (Document document = new Document(new PdfDocument(new PdfWriter(outPdf)))) {\n", "            ComboBoxField flattenComboBoxField = new ComboBoxField(\"flatten combo box with lang\");\n", "            flattenComboBoxField.setBackgroundColor(ColorConstants.RED);\n", "            flattenComboBoxField.addOption(new SelectFieldItem(\"option 1\"));\n", "            flattenComboBoxField.addOption(new SelectFieldItem(\"option 2\"));\n", "            flattenComboBoxField.setSelected(\"option 1\");\n", "\n", "            //TODO DEVSIX-8205 Use setLanguage method from AccessibilityProperties\n", "            flattenComboBoxField.setProperty(FormProperty.FORM_ACCESSIBILITY_LANGUAGE, \"random_lang\");\n", "            document.add(flattenComboBoxField);\n", "        }\n", "\n", "        Assert.assertNull(new CompareTool().compareByContent(outPdf, cmpPdf, DESTINATION_FOLDER));\n", "    }\n", "\n", "    @Test\n", "    public void setFontSizeTest() throws IOException, InterruptedException {\n", "        // test different font sizes\n", "        String outPdf = DESTINATION_FOLDER + \"comboBoxFontSizeTest.pdf\";\n", "        String cmpPdf = SOURCE_FOLDER + \"cmp_comboBoxFontSizeTest.pdf\";\n", "        Float[] fontSizes = {4F, 8F, 12F, 16F, 20F, 24F};\n", "\n", "        try (Document document = new Document(new PdfDocument(new PdfWriter(outPdf)))) {\n", "            for (Float fontSize : fontSizes) {\n", "                ComboBoxField formComboBoxFieldSelected = new ComboBoxField(\n", "                        \"form combo box field selected\" + Math.round((float) fontSize));\n", "                formComboBoxFieldSelected.setInteractive(true);\n", "                formComboBoxFieldSelected.addOption(new SelectFieldItem(\"option 1\"));\n", "                formComboBoxFieldSelected.addOption(new SelectFieldItem(\"option 2\"));\n", "                formComboBoxFieldSelected.setFontSize((float) fontSize);\n", "                formComboBoxFieldSelected.setSelected(\"option 1\");\n", "                document.add(formComboBoxFieldSelected);\n", "\n", "                ComboBoxField flattenComboBoxFieldSelected = new ComboBoxField(\n", "                        \"flatten combo box field selected\" + Math.round((float) fontSize));\n", "                flattenComboBoxFieldSelected.setInteractive(false);\n", "                flattenComboBoxFieldSelected.addOption(new SelectFieldItem(\"option 1\"));\n", "                flattenComboBoxFieldSelected.addOption(new SelectFieldItem(\"option 2\"));\n", "                flattenComboBoxFieldSelected.setFontSize((float) fontSize);\n", "                flattenComboBoxFieldSelected.setSelected(\"option 1\");\n", "                document.add(flattenComboBoxFieldSelected);\n", "            }\n", "        }\n", "        Assert.assertNull(new CompareTool().compareByContent(outPdf, cmpPdf, DESTINATION_FOLDER));\n", "    }\n", "\n", "    @Test\n", "    public void nonSelectedInHtml2PdfSelectsFirstTest() throws IOException, InterruptedException {\n", "        // test different font sizes\n", "        String outPdf = DESTINATION_FOLDER + \"nonSelectedInHtml2PdfSelectsFirst.pdf\";\n", "        String cmpPdf = SOURCE_FOLDER + \"cmp_nonSelectedInHtml2PdfSelectsFirst.pdf\";\n", "\n", "        try (Document document = new Document(new PdfDocument(new PdfWriter(outPdf)))) {\n", "            ComboBoxField formComboBoxFieldSelected = new ComboBoxField(\"form combo box field selected\");\n", "            formComboBoxFieldSelected.setProperty(Property.RENDERING_MODE, RenderingMode.HTML_MODE);\n", "            formComboBoxFieldSelected.setInteractive(true);\n", "            formComboBoxFieldSelected.setWidth(150);\n", "            formComboBoxFieldSelected.addOption(new SelectFieldItem(\"option 1\"));\n", "            formComboBoxFieldSelected.addOption(new SelectFieldItem(\"option 2\"));\n", "            document.add(formComboBoxFieldSelected);\n", "        }\n", "        Assert.assertNull(new CompareTool().compareByContent(outPdf, cmpPdf, DESTINATION_FOLDER));\n", "    }\n", "\n", "    @Test\n", "    public void setFontColorTest() throws IOException, InterruptedException {\n", "        // test different font sizes\n", "        String outPdf = DESTINATION_FOLDER + \"comboBoxFontColorTest.pdf\";\n", "        String cmpPdf = SOURCE_FOLDER + \"cmp_comboBoxFontColorTest.pdf\";\n", "        Color[] colors = {ColorConstants.GREEN, ColorConstants.RED, ColorConstants.BLUE, ColorConstants.YELLOW,\n", "                ColorConstants.ORANGE, ColorConstants.PINK};\n", "\n", "        try (Document document = new Document(new PdfDocument(new PdfWriter(outPdf)))) {\n", "            for (int i = 0; i < colors.length; i++) {\n", "                Color color = colors[i];\n", "                ComboBoxField formComboBoxFieldSelected = new ComboBoxField(\"form combo box field selected\" + i);\n", "                formComboBoxFieldSelected.setInteractive(true);\n", "                formComboBoxFieldSelected.addOption(new SelectFieldItem(\"option 1\"));\n", "                formComboBoxFieldSelected.addOption(new SelectFieldItem(\"option 2\"));\n", "                formComboBoxFieldSelected.setFontColor(color);\n", "                formComboBoxFieldSelected.setSelected(\"option 1\");\n", "                document.add(formComboBoxFieldSelected);\n", "\n", "                ComboBoxField flattenComboBoxFieldSelected = new ComboBoxField(\"flatten combo box field selected\" + i);\n", "                flattenComboBoxFieldSelected.setInteractive(false);\n", "                flattenComboBoxFieldSelected.addOption(new SelectFieldItem(\"option 1\"));\n", "                flattenComboBoxFieldSelected.addOption(new SelectFieldItem(\"option 2\"));\n", "                flattenComboBoxFieldSelected.setFontColor(color);\n", "                flattenComboBoxFieldSelected.setSelected(\"option 1\");\n", "                document.add(flattenComboBoxFieldSelected);\n", "            }\n", "        }\n", "        Assert.assertNull(new CompareTool().compareByContent(outPdf, cmpPdf, DESTINATION_FOLDER));\n", "    }\n", "\n", "\n", "    @Test\n", "    public void noneSelectedIsNullTest() {\n", "        ComboBoxField comboBoxField = new ComboBoxField(\"test\");\n", "        comboBoxField.addOption(new SelectFieldItem(\"option 1\"));\n", "        comboBoxField.addOption(new SelectFieldItem(\"option 2\"));\n", "\n", "        Assert.assertNull(comboBoxField.getSelectedOption());\n", "    }\n", "\n", "    @Test\n", "    public void setSelectedByExportValueTest() {\n", "        ComboBoxField comboBoxField = new ComboBoxField(\"test\");\n", "        comboBoxField.addOption(new SelectFieldItem(\"option 1\"));\n", "        comboBoxField.addOption(new SelectFieldItem(\"option 2\"));\n", "        comboBoxField.addOption(new SelectFieldItem(\"option 3\"));\n", "\n", "        comboBoxField.setSelected(\"option 1\");\n", "        Assert.assertEquals(\"option 1\", comboBoxField.getSelectedOption().getDisplayValue());\n", "        Assert.assertEquals(\"option 1\", comboBoxField.getSelectedOption().getExportValue());\n", "\n", "    }\n", "\n", "    @Test\n", "    public void setSelectedByDisplayValueTest() {\n", "        ComboBoxField comboBoxField = new ComboBoxField(\"test\");\n", "        comboBoxField.addOption(new SelectFieldItem(\"option 1\", \"1\"));\n", "        comboBoxField.addOption(new SelectFieldItem(\"option 2\", \"2\"));\n", "        comboBoxField.addOption(new SelectFieldItem(\"option 3\", \"3\"));\n", "\n", "        comboBoxField.setSelected(\"1\");\n", "        Assert.assertNull(comboBoxField.getSelectedOption());\n", "    }\n", "\n", "    @Test\n", "    public void setSelectByDisplayValueTest() {\n", "        ComboBoxField comboBoxField = new ComboBoxField(\"test\");\n", "        comboBoxField.addOption(new SelectFieldItem(\"option 1\", \"1\"));\n", "        comboBoxField.addOption(new SelectFieldItem(\"option 2\", \"2\"));\n", "        comboBoxField.addOption(new SelectFieldItem(\"option 3\", \"3\"));\n", "\n", "        comboBoxField.setSelected(\"option 1\");\n", "        Assert.assertEquals(\"option 1\", comboBoxField.getSelectedOption().getExportValue());\n", "        Assert.assertEquals(\"1\", comboBoxField.getSelectedOption().getDisplayValue());\n", "    }\n", "\n", "    @Test\n", "    public void setSelectedByIndexTest() {\n", "        ComboBoxField comboBoxField = new ComboBoxField(\"test\");\n", "        comboBoxField.addOption(new SelectFieldItem(\"option 1\"));\n", "        comboBoxField.addOption(new SelectFieldItem(\"option 2\"));\n", "        comboBoxField.addOption(new SelectFieldItem(\"option 3\"));\n", "\n", "        comboBoxField.setSelected(1);\n", "        Assert.assertEquals(\"option 2\", comboBoxField.getSelectedOption().getDisplayValue());\n", "        Assert.assertEquals(\"option 2\", comboBoxField.getSelectedOption().getExportValue());\n", "    }\n", "\n", "    @Test\n", "    public void setSelectedByIndexOutOfBoundsTest() {\n", "        ComboBoxField comboBoxField = new ComboBoxField(\"test\");\n", "        comboBoxField.addOption(new SelectFieldItem(\"option 1\"));\n", "        comboBoxField.addOption(new SelectFieldItem(\"option 2\"));\n", "        comboBoxField.addOption(new SelectFieldItem(\"option 3\"));\n", "\n", "        Assert.assertThrows(IndexOutOfBoundsException.class, () -> comboBoxField.setSelected(3));\n", "    }\n", "\n", "    @Test\n", "    public void setSelectByIndexNegativeOutOfBoundsTest() {\n", "        ComboBoxField comboBoxField = new ComboBoxField(\"test\");\n", "        comboBoxField.addOption(new SelectFieldItem(\"option 1\"));\n", "        comboBoxField.addOption(new SelectFieldItem(\"option 2\"));\n", "        comboBoxField.addOption(new SelectFieldItem(\"option 3\"));\n", "        Assert.assertThrows(IndexOutOfBoundsException.class, () -> comboBoxField.setSelected(-1));\n", "    }\n", "\n", "    @Test\n", "    public void setBySelectFieldItem() {\n", "        ComboBoxField comboBoxField = new ComboBoxField(\"test\");\n", "        SelectFieldItem option1 = new SelectFieldItem(\"option 1\", \"1\");\n", "        comboBoxField.addOption(option1);\n", "        comboBoxField.addOption(new SelectFieldItem(\"option 2\", \"2\"));\n", "        comboBoxField.addOption(new SelectFieldItem(\"option 3\", \"3\"));\n", "\n", "        comboBoxField.setSelected(option1);\n", "        Assert.assertEquals(\"option 1\", comboBoxField.getSelectedOption().getExportValue());\n", "        Assert.assertEquals(\"1\", comboBoxField.getSelectedOption().getDisplayValue());\n", "    }\n", "\n", "    @Test\n", "    public void setBySelectFieldItemNullTest() {\n", "        ComboBoxField comboBoxField = new ComboBoxField(\"test\");\n", "        comboBoxField.addOption(new SelectFieldItem(\"option 1\", \"1\"));\n", "        comboBoxField.addOption(new SelectFieldItem(\"option 2\", \"2\"));\n", "\n", "        comboBoxField.setSelected((SelectFieldItem) null);\n", "        Assert.assertNull(comboBoxField.getSelectedOption());\n", "    }\n", "\n", "    @Test\n", "    public void setBySelectFieldItemNotInOptionsTest() {\n", "        ComboBoxField comboBoxField = new ComboBoxField(\"test\");\n", "        comboBoxField.addOption(new SelectFieldItem(\"option 1\", \"1\"));\n", "        comboBoxField.addOption(new SelectFieldItem(\"option 2\", \"2\"));\n", "\n", "        comboBoxField.setSelected(new SelectFieldItem(\"option 3\", \"3\"));\n", "        Assert.assertNull(comboBoxField.getSelectedOption());\n", "    }\n", "\n", "    @Test\n", "    @LogMessages(messages = {\n", "            @LogMessage(messageTemplate = FormsLogMessageConstants.DUPLICATE_EXPORT_VALUE, count = 1)\n", "    })\n", "    public void addingOptionsWithSameExportValuesLogsWarningTest() {\n", "        ComboBoxField comboBoxField = new ComboBoxField(\"test\");\n", "        comboBoxField.addOption(new SelectFieldItem(\"option 1\", \"1\"));\n", "        comboBoxField.addOption(new SelectFieldItem(\"option 1\", \"2\"));\n", "        Assert.assertEquals(2, comboBoxField.getItems().size());\n", "    }\n", "\n", "\n", "    @Test\n", "    public void addingWithDuplicateDisplayValueTest() {\n", "        ComboBoxField comboBoxField = new ComboBoxField(\"test\");\n", "        comboBoxField.addOption(new SelectFieldItem(\"option 1\", \"1\"));\n", "        comboBoxField.addOption(new SelectFieldItem(\"option 2\", \"1\"));\n", "        Assert.assertEquals(2, comboBoxField.getItems().size());\n", "    }\n", "\n", "    @Test\n", "    public void addingOptionWithNullExportValueTest() {\n", "        ComboBoxField comboBoxField = new ComboBoxField(\"test\");\n", "        Assert.assertThrows(IllegalArgumentException.class,\n", "                () -> comboBoxField.addOption(new SelectFieldItem(\"option 1\", (String) null)));\n", "    }\n", "\n", "    @Test\n", "    public void basicComboBoxFieldTaggedTest() throws IOException, InterruptedException {\n", "        String outPdf = DESTINATION_FOLDER + \"basicComboBoxFieldTagged.pdf\";\n", "        String cmpPdf = SOURCE_FOLDER + \"cmp_basicComboBoxFieldTagged.pdf\";\n", "\n", "        try (Document document = new Document(new PdfDocument(new PdfWriter(outPdf)))) {\n", "            document.getPdfDocument().setTagged();\n", "            ComboBoxField formComboBoxField = new ComboBoxField(\"form combo box field\");\n", "            formComboBoxField.setInteractive(true);\n", "            formComboBoxField.addOption(new SelectFieldItem(\"option 1\"));\n", "            formComboBoxField.addOption(new SelectFieldItem(\"option 2\"));\n", "            document.add(formComboBoxField);\n", "\n", "            ComboBoxField flattenComboBoxField = new ComboBoxField(\"flatten combo box field\");\n", "            flattenComboBoxField.setInteractive(false);\n", "            flattenComboBoxField.addOption(new SelectFieldItem(\"option 1\"));\n", "            flattenComboBoxField.addOption(new SelectFieldItem(\"option 2\"));\n", "            document.add(flattenComboBoxField);\n", "\n", "            ComboBoxField formComboBoxFieldSelected = new ComboBoxField(\"form combo box field selected\");\n", "            formComboBoxFieldSelected.setInteractive(true);\n", "            formComboBoxFieldSelected.addOption(new SelectFieldItem(\"option 1\"));\n", "            formComboBoxFieldSelected.addOption(new SelectFieldItem(\"option 2\"));\n", "            formComboBoxFieldSelected.setSelected(\"option 1\");\n", "            document.add(formComboBoxFieldSelected);\n", "\n", "            ComboBoxField flattenComboBoxFieldSelected = new ComboBoxField(\"flatten combo box field selected\");\n", "            flattenComboBoxFieldSelected.setInteractive(false);\n", "            flattenComboBoxFieldSelected.addOption(new SelectFieldItem(\"option 1\"));\n", "            flattenComboBoxFieldSelected.addOption(new SelectFieldItem(\"option 2\"));\n", "            flattenComboBoxFieldSelected.setSelected(\"option 1\");\n", "            document.add(flattenComboBoxFieldSelected);\n", "\n", "        }\n", "\n", "        Assert.assertNull(new CompareTool().compareByContent(outPdf, cmpPdf, DESTINATION_FOLDER));\n", "    }\n", "\n", "\n", "}\n"], "method_lines_dic": {"ComboBoxField::::getSelectedExportValue()": [59, 61], "ComboBoxField::::setSelected(int)": [73, 81], "ComboBoxField::::setSelected(java.lang.String)": [90, 105], "ComboBoxField::::setSelected(com.itextpdf.forms.form.element.SelectFieldItem)": [115, 121], "ComboBoxField::::addOption(com.itextpdf.forms.form.element.SelectFieldItem)": [128, 141], "ComboBoxField::::getSelectedOption()": [149, 159], "ComboBoxField::::getAccessibilityProperties()": [164, 171], "ComboBoxField::::makeNewRenderer()": [173, 176], "ComboBoxField::::clearSelected()": [178, 183]}, "test_method_lines_dic": {"ComboBoxFieldTest::::beforeClass()": [59, 62], "ComboBoxFieldTest::::emptyComboBoxFieldTest()": [64, 90], "ComboBoxFieldTest::::basicComboBoxFieldTest()": [93, 128], "ComboBoxFieldTest::::basicComboBoxFieldWithBordersTest()": [131, 167], "ComboBoxFieldTest::::basicComboBoxFieldWithBackgroundTest()": [169, 205], "ComboBoxFieldTest::::comboBoxFieldWithoutSelectionTest()": [207, 232], "ComboBoxFieldTest::::comboBoxFieldWithHeightTest()": [234, 251], "ComboBoxFieldTest::::comboBoxFieldWithMinHeightTest()": [253, 269], "ComboBoxFieldTest::::comboBoxFieldWithMaxHeightTest()": [271, 286], "ComboBoxFieldTest::::comboBoxFieldCannotFitTest()": [288, 310], "ComboBoxFieldTest::::comboBoxFieldWithLangTest()": [312, 329], "ComboBoxFieldTest::::setFontSizeTest()": [331, 360], "ComboBoxFieldTest::::nonSelectedInHtml2PdfSelectsFirstTest()": [362, 378], "ComboBoxFieldTest::::setFontColorTest()": [380, 409], "ComboBoxFieldTest::::noneSelectedIsNullTest()": [412, 419], "ComboBoxFieldTest::::setSelectedByExportValueTest()": [421, 432], "ComboBoxFieldTest::::setSelectedByDisplayValueTest()": [434, 443], "ComboBoxFieldTest::::setSelectByDisplayValueTest()": [445, 455], "ComboBoxFieldTest::::setSelectedByIndexTest()": [457, 467], "ComboBoxFieldTest::::setSelectedByIndexOutOfBoundsTest()": [469, 477], "ComboBoxFieldTest::::setSelectByIndexNegativeOutOfBoundsTest()": [479, 486], "ComboBoxFieldTest::::setBySelectFieldItem()": [488, 499], "ComboBoxFieldTest::::setBySelectFieldItemNullTest()": [501, 509], "ComboBoxFieldTest::::setBySelectFieldItemNotInOptionsTest()": [511, 519], "ComboBoxFieldTest::::addingOptionsWithSameExportValuesLogsWarningTest()": [521, 530], "ComboBoxFieldTest::::addingWithDuplicateDisplayValueTest()": [533, 539], "ComboBoxFieldTest::::addingOptionWithNullExportValueTest()": [541, 546], "ComboBoxFieldTest::::basicComboBoxFieldTaggedTest()": [548, 584]}, "reverse_method_lines_dic": {"59": "ComboBoxField::::getSelectedExportValue()", "60": "ComboBoxField::::getSelectedExportValue()", "61": "ComboBoxField::::getSelectedExportValue()", "73": "ComboBoxField::::setSelected(int)", "74": "ComboBoxField::::setSelected(int)", "75": "ComboBoxField::::setSelected(int)", "76": "ComboBoxField::::setSelected(int)", "77": "ComboBoxField::::setSelected(int)", "78": "ComboBoxField::::setSelected(int)", "79": "ComboBoxField::::setSelected(int)", "80": "ComboBoxField::::setSelected(int)", "81": "ComboBoxField::::setSelected(int)", "90": "ComboBoxField::::setSelected(java.lang.String)", "91": "ComboBoxField::::setSelected(java.lang.String)", "92": "ComboBoxField::::setSelected(java.lang.String)", "93": "ComboBoxField::::setSelected(java.lang.String)", "94": "ComboBoxField::::setSelected(java.lang.String)", "95": "ComboBoxField::::setSelected(java.lang.String)", "96": "ComboBoxField::::setSelected(java.lang.String)", "97": "ComboBoxField::::setSelected(java.lang.String)", "98": "ComboBoxField::::setSelected(java.lang.String)", "99": "ComboBoxField::::setSelected(java.lang.String)", "100": "ComboBoxField::::setSelected(java.lang.String)", "101": "ComboBoxField::::setSelected(java.lang.String)", "102": "ComboBoxField::::setSelected(java.lang.String)", "103": "ComboBoxField::::setSelected(java.lang.String)", "104": "ComboBoxField::::setSelected(java.lang.String)", "105": "ComboBoxField::::setSelected(java.lang.String)", "115": "ComboBoxField::::setSelected(com.itextpdf.forms.form.element.SelectFieldItem)", "116": "ComboBoxField::::setSelected(com.itextpdf.forms.form.element.SelectFieldItem)", "117": "ComboBoxField::::setSelected(com.itextpdf.forms.form.element.SelectFieldItem)", "118": "ComboBoxField::::setSelected(com.itextpdf.forms.form.element.SelectFieldItem)", "119": "ComboBoxField::::setSelected(com.itextpdf.forms.form.element.SelectFieldItem)", "120": "ComboBoxField::::setSelected(com.itextpdf.forms.form.element.SelectFieldItem)", "121": "ComboBoxField::::setSelected(com.itextpdf.forms.form.element.SelectFieldItem)", "128": "ComboBoxField::::addOption(com.itextpdf.forms.form.element.SelectFieldItem)", "129": "ComboBoxField::::addOption(com.itextpdf.forms.form.element.SelectFieldItem)", "130": "ComboBoxField::::addOption(com.itextpdf.forms.form.element.SelectFieldItem)", "131": "ComboBoxField::::addOption(com.itextpdf.forms.form.element.SelectFieldItem)", "132": "ComboBoxField::::addOption(com.itextpdf.forms.form.element.SelectFieldItem)", "133": "ComboBoxField::::addOption(com.itextpdf.forms.form.element.SelectFieldItem)", "134": "ComboBoxField::::addOption(com.itextpdf.forms.form.element.SelectFieldItem)", "135": "ComboBoxField::::addOption(com.itextpdf.forms.form.element.SelectFieldItem)", "136": "ComboBoxField::::addOption(com.itextpdf.forms.form.element.SelectFieldItem)", "137": "ComboBoxField::::addOption(com.itextpdf.forms.form.element.SelectFieldItem)", "138": "ComboBoxField::::addOption(com.itextpdf.forms.form.element.SelectFieldItem)", "139": "ComboBoxField::::addOption(com.itextpdf.forms.form.element.SelectFieldItem)", "140": "ComboBoxField::::addOption(com.itextpdf.forms.form.element.SelectFieldItem)", "141": "ComboBoxField::::addOption(com.itextpdf.forms.form.element.SelectFieldItem)", "149": "ComboBoxField::::getSelectedOption()", "150": "ComboBoxField::::getSelectedOption()", "151": "ComboBoxField::::getSelectedOption()", "152": "ComboBoxField::::getSelectedOption()", "153": "ComboBoxField::::getSelectedOption()", "154": "ComboBoxField::::getSelectedOption()", "155": "ComboBoxField::::getSelectedOption()", "156": "ComboBoxField::::getSelectedOption()", "157": "ComboBoxField::::getSelectedOption()", "158": "ComboBoxField::::getSelectedOption()", "159": "ComboBoxField::::getSelectedOption()", "164": "ComboBoxField::::getAccessibilityProperties()", "165": "ComboBoxField::::getAccessibilityProperties()", "166": "ComboBoxField::::getAccessibilityProperties()", "167": "ComboBoxField::::getAccessibilityProperties()", "168": "ComboBoxField::::getAccessibilityProperties()", "169": "ComboBoxField::::getAccessibilityProperties()", "170": "ComboBoxField::::getAccessibilityProperties()", "171": "ComboBoxField::::getAccessibilityProperties()", "173": "ComboBoxField::::makeNewRenderer()", "174": "ComboBoxField::::makeNewRenderer()", "175": "ComboBoxField::::makeNewRenderer()", "176": "ComboBoxField::::makeNewRenderer()", "178": "ComboBoxField::::clearSelected()", "179": "ComboBoxField::::clearSelected()", "180": "ComboBoxField::::clearSelected()", "181": "ComboBoxField::::clearSelected()", "182": "ComboBoxField::::clearSelected()", "183": "ComboBoxField::::clearSelected()"}, "test_reverse_method_lines_dic": {"59": "ComboBoxFieldTest::::beforeClass()", "60": "ComboBoxFieldTest::::beforeClass()", "61": "ComboBoxFieldTest::::beforeClass()", "62": "ComboBoxFieldTest::::beforeClass()", "64": "ComboBoxFieldTest::::emptyComboBoxFieldTest()", "65": "ComboBoxFieldTest::::emptyComboBoxFieldTest()", "66": "ComboBoxFieldTest::::emptyComboBoxFieldTest()", "67": "ComboBoxFieldTest::::emptyComboBoxFieldTest()", "68": "ComboBoxFieldTest::::emptyComboBoxFieldTest()", "69": "ComboBoxFieldTest::::emptyComboBoxFieldTest()", "70": "ComboBoxFieldTest::::emptyComboBoxFieldTest()", "71": "ComboBoxFieldTest::::emptyComboBoxFieldTest()", "72": "ComboBoxFieldTest::::emptyComboBoxFieldTest()", "73": "ComboBoxFieldTest::::emptyComboBoxFieldTest()", "74": "ComboBoxFieldTest::::emptyComboBoxFieldTest()", "75": "ComboBoxFieldTest::::emptyComboBoxFieldTest()", "76": "ComboBoxFieldTest::::emptyComboBoxFieldTest()", "77": "ComboBoxFieldTest::::emptyComboBoxFieldTest()", "78": "ComboBoxFieldTest::::emptyComboBoxFieldTest()", "79": "ComboBoxFieldTest::::emptyComboBoxFieldTest()", "80": "ComboBoxFieldTest::::emptyComboBoxFieldTest()", "81": "ComboBoxFieldTest::::emptyComboBoxFieldTest()", "82": "ComboBoxFieldTest::::emptyComboBoxFieldTest()", "83": "ComboBoxFieldTest::::emptyComboBoxFieldTest()", "84": "ComboBoxFieldTest::::emptyComboBoxFieldTest()", "85": "ComboBoxFieldTest::::emptyComboBoxFieldTest()", "86": "ComboBoxFieldTest::::emptyComboBoxFieldTest()", "87": "ComboBoxFieldTest::::emptyComboBoxFieldTest()", "88": "ComboBoxFieldTest::::emptyComboBoxFieldTest()", "89": "ComboBoxFieldTest::::emptyComboBoxFieldTest()", "90": "ComboBoxFieldTest::::emptyComboBoxFieldTest()", "93": "ComboBoxFieldTest::::basicComboBoxFieldTest()", "94": "ComboBoxFieldTest::::basicComboBoxFieldTest()", "95": "ComboBoxFieldTest::::basicComboBoxFieldTest()", "96": "ComboBoxFieldTest::::basicComboBoxFieldTest()", "97": "ComboBoxFieldTest::::basicComboBoxFieldTest()", "98": "ComboBoxFieldTest::::basicComboBoxFieldTest()", "99": "ComboBoxFieldTest::::basicComboBoxFieldTest()", "100": "ComboBoxFieldTest::::basicComboBoxFieldTest()", "101": "ComboBoxFieldTest::::basicComboBoxFieldTest()", "102": "ComboBoxFieldTest::::basicComboBoxFieldTest()", "103": "ComboBoxFieldTest::::basicComboBoxFieldTest()", "104": "ComboBoxFieldTest::::basicComboBoxFieldTest()", "105": "ComboBoxFieldTest::::basicComboBoxFieldTest()", "106": "ComboBoxFieldTest::::basicComboBoxFieldTest()", "107": "ComboBoxFieldTest::::basicComboBoxFieldTest()", "108": "ComboBoxFieldTest::::basicComboBoxFieldTest()", "109": "ComboBoxFieldTest::::basicComboBoxFieldTest()", "110": "ComboBoxFieldTest::::basicComboBoxFieldTest()", "111": "ComboBoxFieldTest::::basicComboBoxFieldTest()", "112": "ComboBoxFieldTest::::basicComboBoxFieldTest()", "113": "ComboBoxFieldTest::::basicComboBoxFieldTest()", "114": "ComboBoxFieldTest::::basicComboBoxFieldTest()", "115": "ComboBoxFieldTest::::basicComboBoxFieldTest()", "116": "ComboBoxFieldTest::::basicComboBoxFieldTest()", "117": "ComboBoxFieldTest::::basicComboBoxFieldTest()", "118": "ComboBoxFieldTest::::basicComboBoxFieldTest()", "119": "ComboBoxFieldTest::::basicComboBoxFieldTest()", "120": "ComboBoxFieldTest::::basicComboBoxFieldTest()", "121": "ComboBoxFieldTest::::basicComboBoxFieldTest()", "122": "ComboBoxFieldTest::::basicComboBoxFieldTest()", "123": "ComboBoxFieldTest::::basicComboBoxFieldTest()", "124": "ComboBoxFieldTest::::basicComboBoxFieldTest()", "125": "ComboBoxFieldTest::::basicComboBoxFieldTest()", "126": "ComboBoxFieldTest::::basicComboBoxFieldTest()", "127": "ComboBoxFieldTest::::basicComboBoxFieldTest()", "128": "ComboBoxFieldTest::::basicComboBoxFieldTest()", "131": "ComboBoxFieldTest::::basicComboBoxFieldWithBordersTest()", "132": "ComboBoxFieldTest::::basicComboBoxFieldWithBordersTest()", "133": "ComboBoxFieldTest::::basicComboBoxFieldWithBordersTest()", "134": "ComboBoxFieldTest::::basicComboBoxFieldWithBordersTest()", "135": "ComboBoxFieldTest::::basicComboBoxFieldWithBordersTest()", "136": "ComboBoxFieldTest::::basicComboBoxFieldWithBordersTest()", "137": "ComboBoxFieldTest::::basicComboBoxFieldWithBordersTest()", "138": "ComboBoxFieldTest::::basicComboBoxFieldWithBordersTest()", "139": "ComboBoxFieldTest::::basicComboBoxFieldWithBordersTest()", "140": "ComboBoxFieldTest::::basicComboBoxFieldWithBordersTest()", "141": "ComboBoxFieldTest::::basicComboBoxFieldWithBordersTest()", "142": "ComboBoxFieldTest::::basicComboBoxFieldWithBordersTest()", "143": "ComboBoxFieldTest::::basicComboBoxFieldWithBordersTest()", "144": "ComboBoxFieldTest::::basicComboBoxFieldWithBordersTest()", "145": "ComboBoxFieldTest::::basicComboBoxFieldWithBordersTest()", "146": "ComboBoxFieldTest::::basicComboBoxFieldWithBordersTest()", "147": "ComboBoxFieldTest::::basicComboBoxFieldWithBordersTest()", "148": "ComboBoxFieldTest::::basicComboBoxFieldWithBordersTest()", "149": "ComboBoxFieldTest::::basicComboBoxFieldWithBordersTest()", "150": "ComboBoxFieldTest::::basicComboBoxFieldWithBordersTest()", "151": "ComboBoxFieldTest::::basicComboBoxFieldWithBordersTest()", "152": "ComboBoxFieldTest::::basicComboBoxFieldWithBordersTest()", "153": "ComboBoxFieldTest::::basicComboBoxFieldWithBordersTest()", "154": "ComboBoxFieldTest::::basicComboBoxFieldWithBordersTest()", "155": "ComboBoxFieldTest::::basicComboBoxFieldWithBordersTest()", "156": "ComboBoxFieldTest::::basicComboBoxFieldWithBordersTest()", "157": "ComboBoxFieldTest::::basicComboBoxFieldWithBordersTest()", "158": "ComboBoxFieldTest::::basicComboBoxFieldWithBordersTest()", "159": "ComboBoxFieldTest::::basicComboBoxFieldWithBordersTest()", "160": "ComboBoxFieldTest::::basicComboBoxFieldWithBordersTest()", "161": "ComboBoxFieldTest::::basicComboBoxFieldWithBordersTest()", "162": "ComboBoxFieldTest::::basicComboBoxFieldWithBordersTest()", "163": "ComboBoxFieldTest::::basicComboBoxFieldWithBordersTest()", "164": "ComboBoxFieldTest::::basicComboBoxFieldWithBordersTest()", "165": "ComboBoxFieldTest::::basicComboBoxFieldWithBordersTest()", "166": "ComboBoxFieldTest::::basicComboBoxFieldWithBordersTest()", "167": "ComboBoxFieldTest::::basicComboBoxFieldWithBordersTest()", "169": "ComboBoxFieldTest::::basicComboBoxFieldWithBackgroundTest()", "170": "ComboBoxFieldTest::::basicComboBoxFieldWithBackgroundTest()", "171": "ComboBoxFieldTest::::basicComboBoxFieldWithBackgroundTest()", "172": "ComboBoxFieldTest::::basicComboBoxFieldWithBackgroundTest()", "173": "ComboBoxFieldTest::::basicComboBoxFieldWithBackgroundTest()", "174": "ComboBoxFieldTest::::basicComboBoxFieldWithBackgroundTest()", "175": "ComboBoxFieldTest::::basicComboBoxFieldWithBackgroundTest()", "176": "ComboBoxFieldTest::::basicComboBoxFieldWithBackgroundTest()", "177": "ComboBoxFieldTest::::basicComboBoxFieldWithBackgroundTest()", "178": "ComboBoxFieldTest::::basicComboBoxFieldWithBackgroundTest()", "179": "ComboBoxFieldTest::::basicComboBoxFieldWithBackgroundTest()", "180": "ComboBoxFieldTest::::basicComboBoxFieldWithBackgroundTest()", "181": "ComboBoxFieldTest::::basicComboBoxFieldWithBackgroundTest()", "182": "ComboBoxFieldTest::::basicComboBoxFieldWithBackgroundTest()", "183": "ComboBoxFieldTest::::basicComboBoxFieldWithBackgroundTest()", "184": "ComboBoxFieldTest::::basicComboBoxFieldWithBackgroundTest()", "185": "ComboBoxFieldTest::::basicComboBoxFieldWithBackgroundTest()", "186": "ComboBoxFieldTest::::basicComboBoxFieldWithBackgroundTest()", "187": "ComboBoxFieldTest::::basicComboBoxFieldWithBackgroundTest()", "188": "ComboBoxFieldTest::::basicComboBoxFieldWithBackgroundTest()", "189": "ComboBoxFieldTest::::basicComboBoxFieldWithBackgroundTest()", "190": "ComboBoxFieldTest::::basicComboBoxFieldWithBackgroundTest()", "191": "ComboBoxFieldTest::::basicComboBoxFieldWithBackgroundTest()", "192": "ComboBoxFieldTest::::basicComboBoxFieldWithBackgroundTest()", "193": "ComboBoxFieldTest::::basicComboBoxFieldWithBackgroundTest()", "194": "ComboBoxFieldTest::::basicComboBoxFieldWithBackgroundTest()", "195": "ComboBoxFieldTest::::basicComboBoxFieldWithBackgroundTest()", "196": "ComboBoxFieldTest::::basicComboBoxFieldWithBackgroundTest()", "197": "ComboBoxFieldTest::::basicComboBoxFieldWithBackgroundTest()", "198": "ComboBoxFieldTest::::basicComboBoxFieldWithBackgroundTest()", "199": "ComboBoxFieldTest::::basicComboBoxFieldWithBackgroundTest()", "200": "ComboBoxFieldTest::::basicComboBoxFieldWithBackgroundTest()", "201": "ComboBoxFieldTest::::basicComboBoxFieldWithBackgroundTest()", "202": "ComboBoxFieldTest::::basicComboBoxFieldWithBackgroundTest()", "203": "ComboBoxFieldTest::::basicComboBoxFieldWithBackgroundTest()", "204": "ComboBoxFieldTest::::basicComboBoxFieldWithBackgroundTest()", "205": "ComboBoxFieldTest::::basicComboBoxFieldWithBackgroundTest()", "207": "ComboBoxFieldTest::::comboBoxFieldWithoutSelectionTest()", "208": "ComboBoxFieldTest::::comboBoxFieldWithoutSelectionTest()", "209": "ComboBoxFieldTest::::comboBoxFieldWithoutSelectionTest()", "210": "ComboBoxFieldTest::::comboBoxFieldWithoutSelectionTest()", "211": "ComboBoxFieldTest::::comboBoxFieldWithoutSelectionTest()", "212": "ComboBoxFieldTest::::comboBoxFieldWithoutSelectionTest()", "213": "ComboBoxFieldTest::::comboBoxFieldWithoutSelectionTest()", "214": "ComboBoxFieldTest::::comboBoxFieldWithoutSelectionTest()", "215": "ComboBoxFieldTest::::comboBoxFieldWithoutSelectionTest()", "216": "ComboBoxFieldTest::::comboBoxFieldWithoutSelectionTest()", "217": "ComboBoxFieldTest::::comboBoxFieldWithoutSelectionTest()", "218": "ComboBoxFieldTest::::comboBoxFieldWithoutSelectionTest()", "219": "ComboBoxFieldTest::::comboBoxFieldWithoutSelectionTest()", "220": "ComboBoxFieldTest::::comboBoxFieldWithoutSelectionTest()", "221": "ComboBoxFieldTest::::comboBoxFieldWithoutSelectionTest()", "222": "ComboBoxFieldTest::::comboBoxFieldWithoutSelectionTest()", "223": "ComboBoxFieldTest::::comboBoxFieldWithoutSelectionTest()", "224": "ComboBoxFieldTest::::comboBoxFieldWithoutSelectionTest()", "225": "ComboBoxFieldTest::::comboBoxFieldWithoutSelectionTest()", "226": "ComboBoxFieldTest::::comboBoxFieldWithoutSelectionTest()", "227": "ComboBoxFieldTest::::comboBoxFieldWithoutSelectionTest()", "228": "ComboBoxFieldTest::::comboBoxFieldWithoutSelectionTest()", "229": "ComboBoxFieldTest::::comboBoxFieldWithoutSelectionTest()", "230": "ComboBoxFieldTest::::comboBoxFieldWithoutSelectionTest()", "231": "ComboBoxFieldTest::::comboBoxFieldWithoutSelectionTest()", "232": "ComboBoxFieldTest::::comboBoxFieldWithoutSelectionTest()", "234": "ComboBoxFieldTest::::comboBoxFieldWithHeightTest()", "235": "ComboBoxFieldTest::::comboBoxFieldWithHeightTest()", "236": "ComboBoxFieldTest::::comboBoxFieldWithHeightTest()", "237": "ComboBoxFieldTest::::comboBoxFieldWithHeightTest()", "238": "ComboBoxFieldTest::::comboBoxFieldWithHeightTest()", "239": "ComboBoxFieldTest::::comboBoxFieldWithHeightTest()", "240": "ComboBoxFieldTest::::comboBoxFieldWithHeightTest()", "241": "ComboBoxFieldTest::::comboBoxFieldWithHeightTest()", "242": "ComboBoxFieldTest::::comboBoxFieldWithHeightTest()", "243": "ComboBoxFieldTest::::comboBoxFieldWithHeightTest()", "244": "ComboBoxFieldTest::::comboBoxFieldWithHeightTest()", "245": "ComboBoxFieldTest::::comboBoxFieldWithHeightTest()", "246": "ComboBoxFieldTest::::comboBoxFieldWithHeightTest()", "247": "ComboBoxFieldTest::::comboBoxFieldWithHeightTest()", "248": "ComboBoxFieldTest::::comboBoxFieldWithHeightTest()", "249": "ComboBoxFieldTest::::comboBoxFieldWithHeightTest()", "250": "ComboBoxFieldTest::::comboBoxFieldWithHeightTest()", "251": "ComboBoxFieldTest::::comboBoxFieldWithHeightTest()", "253": "ComboBoxFieldTest::::comboBoxFieldWithMinHeightTest()", "254": "ComboBoxFieldTest::::comboBoxFieldWithMinHeightTest()", "255": "ComboBoxFieldTest::::comboBoxFieldWithMinHeightTest()", "256": "ComboBoxFieldTest::::comboBoxFieldWithMinHeightTest()", "257": "ComboBoxFieldTest::::comboBoxFieldWithMinHeightTest()", "258": "ComboBoxFieldTest::::comboBoxFieldWithMinHeightTest()", "259": "ComboBoxFieldTest::::comboBoxFieldWithMinHeightTest()", "260": "ComboBoxFieldTest::::comboBoxFieldWithMinHeightTest()", "261": "ComboBoxFieldTest::::comboBoxFieldWithMinHeightTest()", "262": "ComboBoxFieldTest::::comboBoxFieldWithMinHeightTest()", "263": "ComboBoxFieldTest::::comboBoxFieldWithMinHeightTest()", "264": "ComboBoxFieldTest::::comboBoxFieldWithMinHeightTest()", "265": "ComboBoxFieldTest::::comboBoxFieldWithMinHeightTest()", "266": "ComboBoxFieldTest::::comboBoxFieldWithMinHeightTest()", "267": "ComboBoxFieldTest::::comboBoxFieldWithMinHeightTest()", "268": "ComboBoxFieldTest::::comboBoxFieldWithMinHeightTest()", "269": "ComboBoxFieldTest::::comboBoxFieldWithMinHeightTest()", "271": "ComboBoxFieldTest::::comboBoxFieldWithMaxHeightTest()", "272": "ComboBoxFieldTest::::comboBoxFieldWithMaxHeightTest()", "273": "ComboBoxFieldTest::::comboBoxFieldWithMaxHeightTest()", "274": "ComboBoxFieldTest::::comboBoxFieldWithMaxHeightTest()", "275": "ComboBoxFieldTest::::comboBoxFieldWithMaxHeightTest()", "276": "ComboBoxFieldTest::::comboBoxFieldWithMaxHeightTest()", "277": "ComboBoxFieldTest::::comboBoxFieldWithMaxHeightTest()", "278": "ComboBoxFieldTest::::comboBoxFieldWithMaxHeightTest()", "279": "ComboBoxFieldTest::::comboBoxFieldWithMaxHeightTest()", "280": "ComboBoxFieldTest::::comboBoxFieldWithMaxHeightTest()", "281": "ComboBoxFieldTest::::comboBoxFieldWithMaxHeightTest()", "282": "ComboBoxFieldTest::::comboBoxFieldWithMaxHeightTest()", "283": "ComboBoxFieldTest::::comboBoxFieldWithMaxHeightTest()", "284": "ComboBoxFieldTest::::comboBoxFieldWithMaxHeightTest()", "285": "ComboBoxFieldTest::::comboBoxFieldWithMaxHeightTest()", "286": "ComboBoxFieldTest::::comboBoxFieldWithMaxHeightTest()", "288": "ComboBoxFieldTest::::comboBoxFieldCannotFitTest()", "289": "ComboBoxFieldTest::::comboBoxFieldCannotFitTest()", "290": "ComboBoxFieldTest::::comboBoxFieldCannotFitTest()", "291": "ComboBoxFieldTest::::comboBoxFieldCannotFitTest()", "292": "ComboBoxFieldTest::::comboBoxFieldCannotFitTest()", "293": "ComboBoxFieldTest::::comboBoxFieldCannotFitTest()", "294": "ComboBoxFieldTest::::comboBoxFieldCannotFitTest()", "295": "ComboBoxFieldTest::::comboBoxFieldCannotFitTest()", "296": "ComboBoxFieldTest::::comboBoxFieldCannotFitTest()", "297": "ComboBoxFieldTest::::comboBoxFieldCannotFitTest()", "298": "ComboBoxFieldTest::::comboBoxFieldCannotFitTest()", "299": "ComboBoxFieldTest::::comboBoxFieldCannotFitTest()", "300": "ComboBoxFieldTest::::comboBoxFieldCannotFitTest()", "301": "ComboBoxFieldTest::::comboBoxFieldCannotFitTest()", "302": "ComboBoxFieldTest::::comboBoxFieldCannotFitTest()", "303": "ComboBoxFieldTest::::comboBoxFieldCannotFitTest()", "304": "ComboBoxFieldTest::::comboBoxFieldCannotFitTest()", "305": "ComboBoxFieldTest::::comboBoxFieldCannotFitTest()", "306": "ComboBoxFieldTest::::comboBoxFieldCannotFitTest()", "307": "ComboBoxFieldTest::::comboBoxFieldCannotFitTest()", "308": "ComboBoxFieldTest::::comboBoxFieldCannotFitTest()", "309": "ComboBoxFieldTest::::comboBoxFieldCannotFitTest()", "310": "ComboBoxFieldTest::::comboBoxFieldCannotFitTest()", "312": "ComboBoxFieldTest::::comboBoxFieldWithLangTest()", "313": "ComboBoxFieldTest::::comboBoxFieldWithLangTest()", "314": "ComboBoxFieldTest::::comboBoxFieldWithLangTest()", "315": "ComboBoxFieldTest::::comboBoxFieldWithLangTest()", "316": "ComboBoxFieldTest::::comboBoxFieldWithLangTest()", "317": "ComboBoxFieldTest::::comboBoxFieldWithLangTest()", "318": "ComboBoxFieldTest::::comboBoxFieldWithLangTest()", "319": "ComboBoxFieldTest::::comboBoxFieldWithLangTest()", "320": "ComboBoxFieldTest::::comboBoxFieldWithLangTest()", "321": "ComboBoxFieldTest::::comboBoxFieldWithLangTest()", "322": "ComboBoxFieldTest::::comboBoxFieldWithLangTest()", "323": "ComboBoxFieldTest::::comboBoxFieldWithLangTest()", "324": "ComboBoxFieldTest::::comboBoxFieldWithLangTest()", "325": "ComboBoxFieldTest::::comboBoxFieldWithLangTest()", "326": "ComboBoxFieldTest::::comboBoxFieldWithLangTest()", "327": "ComboBoxFieldTest::::comboBoxFieldWithLangTest()", "328": "ComboBoxFieldTest::::comboBoxFieldWithLangTest()", "329": "ComboBoxFieldTest::::comboBoxFieldWithLangTest()", "331": "ComboBoxFieldTest::::setFontSizeTest()", "332": "ComboBoxFieldTest::::setFontSizeTest()", "333": "ComboBoxFieldTest::::setFontSizeTest()", "334": "ComboBoxFieldTest::::setFontSizeTest()", "335": "ComboBoxFieldTest::::setFontSizeTest()", "336": "ComboBoxFieldTest::::setFontSizeTest()", "337": "ComboBoxFieldTest::::setFontSizeTest()", "338": "ComboBoxFieldTest::::setFontSizeTest()", "339": "ComboBoxFieldTest::::setFontSizeTest()", "340": "ComboBoxFieldTest::::setFontSizeTest()", "341": "ComboBoxFieldTest::::setFontSizeTest()", "342": "ComboBoxFieldTest::::setFontSizeTest()", "343": "ComboBoxFieldTest::::setFontSizeTest()", "344": "ComboBoxFieldTest::::setFontSizeTest()", "345": "ComboBoxFieldTest::::setFontSizeTest()", "346": "ComboBoxFieldTest::::setFontSizeTest()", "347": "ComboBoxFieldTest::::setFontSizeTest()", "348": "ComboBoxFieldTest::::setFontSizeTest()", "349": "ComboBoxFieldTest::::setFontSizeTest()", "350": "ComboBoxFieldTest::::setFontSizeTest()", "351": "ComboBoxFieldTest::::setFontSizeTest()", "352": "ComboBoxFieldTest::::setFontSizeTest()", "353": "ComboBoxFieldTest::::setFontSizeTest()", "354": "ComboBoxFieldTest::::setFontSizeTest()", "355": "ComboBoxFieldTest::::setFontSizeTest()", "356": "ComboBoxFieldTest::::setFontSizeTest()", "357": "ComboBoxFieldTest::::setFontSizeTest()", "358": "ComboBoxFieldTest::::setFontSizeTest()", "359": "ComboBoxFieldTest::::setFontSizeTest()", "360": "ComboBoxFieldTest::::setFontSizeTest()", "362": "ComboBoxFieldTest::::nonSelectedInHtml2PdfSelectsFirstTest()", "363": "ComboBoxFieldTest::::nonSelectedInHtml2PdfSelectsFirstTest()", "364": "ComboBoxFieldTest::::nonSelectedInHtml2PdfSelectsFirstTest()", "365": "ComboBoxFieldTest::::nonSelectedInHtml2PdfSelectsFirstTest()", "366": "ComboBoxFieldTest::::nonSelectedInHtml2PdfSelectsFirstTest()", "367": "ComboBoxFieldTest::::nonSelectedInHtml2PdfSelectsFirstTest()", "368": "ComboBoxFieldTest::::nonSelectedInHtml2PdfSelectsFirstTest()", "369": "ComboBoxFieldTest::::nonSelectedInHtml2PdfSelectsFirstTest()", "370": "ComboBoxFieldTest::::nonSelectedInHtml2PdfSelectsFirstTest()", "371": "ComboBoxFieldTest::::nonSelectedInHtml2PdfSelectsFirstTest()", "372": "ComboBoxFieldTest::::nonSelectedInHtml2PdfSelectsFirstTest()", "373": "ComboBoxFieldTest::::nonSelectedInHtml2PdfSelectsFirstTest()", "374": "ComboBoxFieldTest::::nonSelectedInHtml2PdfSelectsFirstTest()", "375": "ComboBoxFieldTest::::nonSelectedInHtml2PdfSelectsFirstTest()", "376": "ComboBoxFieldTest::::nonSelectedInHtml2PdfSelectsFirstTest()", "377": "ComboBoxFieldTest::::nonSelectedInHtml2PdfSelectsFirstTest()", "378": "ComboBoxFieldTest::::nonSelectedInHtml2PdfSelectsFirstTest()", "380": "ComboBoxFieldTest::::setFontColorTest()", "381": "ComboBoxFieldTest::::setFontColorTest()", "382": "ComboBoxFieldTest::::setFontColorTest()", "383": "ComboBoxFieldTest::::setFontColorTest()", "384": "ComboBoxFieldTest::::setFontColorTest()", "385": "ComboBoxFieldTest::::setFontColorTest()", "386": "ComboBoxFieldTest::::setFontColorTest()", "387": "ComboBoxFieldTest::::setFontColorTest()", "388": "ComboBoxFieldTest::::setFontColorTest()", "389": "ComboBoxFieldTest::::setFontColorTest()", "390": "ComboBoxFieldTest::::setFontColorTest()", "391": "ComboBoxFieldTest::::setFontColorTest()", "392": "ComboBoxFieldTest::::setFontColorTest()", "393": "ComboBoxFieldTest::::setFontColorTest()", "394": "ComboBoxFieldTest::::setFontColorTest()", "395": "ComboBoxFieldTest::::setFontColorTest()", "396": "ComboBoxFieldTest::::setFontColorTest()", "397": "ComboBoxFieldTest::::setFontColorTest()", "398": "ComboBoxFieldTest::::setFontColorTest()", "399": "ComboBoxFieldTest::::setFontColorTest()", "400": "ComboBoxFieldTest::::setFontColorTest()", "401": "ComboBoxFieldTest::::setFontColorTest()", "402": "ComboBoxFieldTest::::setFontColorTest()", "403": "ComboBoxFieldTest::::setFontColorTest()", "404": "ComboBoxFieldTest::::setFontColorTest()", "405": "ComboBoxFieldTest::::setFontColorTest()", "406": "ComboBoxFieldTest::::setFontColorTest()", "407": "ComboBoxFieldTest::::setFontColorTest()", "408": "ComboBoxFieldTest::::setFontColorTest()", "409": "ComboBoxFieldTest::::setFontColorTest()", "412": "ComboBoxFieldTest::::noneSelectedIsNullTest()", "413": "ComboBoxFieldTest::::noneSelectedIsNullTest()", "414": "ComboBoxFieldTest::::noneSelectedIsNullTest()", "415": "ComboBoxFieldTest::::noneSelectedIsNullTest()", "416": "ComboBoxFieldTest::::noneSelectedIsNullTest()", "417": "ComboBoxFieldTest::::noneSelectedIsNullTest()", "418": "ComboBoxFieldTest::::noneSelectedIsNullTest()", "419": "ComboBoxFieldTest::::noneSelectedIsNullTest()", "421": "ComboBoxFieldTest::::setSelectedByExportValueTest()", "422": "ComboBoxFieldTest::::setSelectedByExportValueTest()", "423": "ComboBoxFieldTest::::setSelectedByExportValueTest()", "424": "ComboBoxFieldTest::::setSelectedByExportValueTest()", "425": "ComboBoxFieldTest::::setSelectedByExportValueTest()", "426": "ComboBoxFieldTest::::setSelectedByExportValueTest()", "427": "ComboBoxFieldTest::::setSelectedByExportValueTest()", "428": "ComboBoxFieldTest::::setSelectedByExportValueTest()", "429": "ComboBoxFieldTest::::setSelectedByExportValueTest()", "430": "ComboBoxFieldTest::::setSelectedByExportValueTest()", "431": "ComboBoxFieldTest::::setSelectedByExportValueTest()", "432": "ComboBoxFieldTest::::setSelectedByExportValueTest()", "434": "ComboBoxFieldTest::::setSelectedByDisplayValueTest()", "435": "ComboBoxFieldTest::::setSelectedByDisplayValueTest()", "436": "ComboBoxFieldTest::::setSelectedByDisplayValueTest()", "437": "ComboBoxFieldTest::::setSelectedByDisplayValueTest()", "438": "ComboBoxFieldTest::::setSelectedByDisplayValueTest()", "439": "ComboBoxFieldTest::::setSelectedByDisplayValueTest()", "440": "ComboBoxFieldTest::::setSelectedByDisplayValueTest()", "441": "ComboBoxFieldTest::::setSelectedByDisplayValueTest()", "442": "ComboBoxFieldTest::::setSelectedByDisplayValueTest()", "443": "ComboBoxFieldTest::::setSelectedByDisplayValueTest()", "445": "ComboBoxFieldTest::::setSelectByDisplayValueTest()", "446": "ComboBoxFieldTest::::setSelectByDisplayValueTest()", "447": "ComboBoxFieldTest::::setSelectByDisplayValueTest()", "448": "ComboBoxFieldTest::::setSelectByDisplayValueTest()", "449": "ComboBoxFieldTest::::setSelectByDisplayValueTest()", "450": "ComboBoxFieldTest::::setSelectByDisplayValueTest()", "451": "ComboBoxFieldTest::::setSelectByDisplayValueTest()", "452": "ComboBoxFieldTest::::setSelectByDisplayValueTest()", "453": "ComboBoxFieldTest::::setSelectByDisplayValueTest()", "454": "ComboBoxFieldTest::::setSelectByDisplayValueTest()", "455": "ComboBoxFieldTest::::setSelectByDisplayValueTest()", "457": "ComboBoxFieldTest::::setSelectedByIndexTest()", "458": "ComboBoxFieldTest::::setSelectedByIndexTest()", "459": "ComboBoxFieldTest::::setSelectedByIndexTest()", "460": "ComboBoxFieldTest::::setSelectedByIndexTest()", "461": "ComboBoxFieldTest::::setSelectedByIndexTest()", "462": "ComboBoxFieldTest::::setSelectedByIndexTest()", "463": "ComboBoxFieldTest::::setSelectedByIndexTest()", "464": "ComboBoxFieldTest::::setSelectedByIndexTest()", "465": "ComboBoxFieldTest::::setSelectedByIndexTest()", "466": "ComboBoxFieldTest::::setSelectedByIndexTest()", "467": "ComboBoxFieldTest::::setSelectedByIndexTest()", "469": "ComboBoxFieldTest::::setSelectedByIndexOutOfBoundsTest()", "470": "ComboBoxFieldTest::::setSelectedByIndexOutOfBoundsTest()", "471": "ComboBoxFieldTest::::setSelectedByIndexOutOfBoundsTest()", "472": "ComboBoxFieldTest::::setSelectedByIndexOutOfBoundsTest()", "473": "ComboBoxFieldTest::::setSelectedByIndexOutOfBoundsTest()", "474": "ComboBoxFieldTest::::setSelectedByIndexOutOfBoundsTest()", "475": "ComboBoxFieldTest::::setSelectedByIndexOutOfBoundsTest()", "476": "ComboBoxFieldTest::::setSelectedByIndexOutOfBoundsTest()", "477": "ComboBoxFieldTest::::setSelectedByIndexOutOfBoundsTest()", "479": "ComboBoxFieldTest::::setSelectByIndexNegativeOutOfBoundsTest()", "480": "ComboBoxFieldTest::::setSelectByIndexNegativeOutOfBoundsTest()", "481": "ComboBoxFieldTest::::setSelectByIndexNegativeOutOfBoundsTest()", "482": "ComboBoxFieldTest::::setSelectByIndexNegativeOutOfBoundsTest()", "483": "ComboBoxFieldTest::::setSelectByIndexNegativeOutOfBoundsTest()", "484": "ComboBoxFieldTest::::setSelectByIndexNegativeOutOfBoundsTest()", "485": "ComboBoxFieldTest::::setSelectByIndexNegativeOutOfBoundsTest()", "486": "ComboBoxFieldTest::::setSelectByIndexNegativeOutOfBoundsTest()", "488": "ComboBoxFieldTest::::setBySelectFieldItem()", "489": "ComboBoxFieldTest::::setBySelectFieldItem()", "490": "ComboBoxFieldTest::::setBySelectFieldItem()", "491": "ComboBoxFieldTest::::setBySelectFieldItem()", "492": "ComboBoxFieldTest::::setBySelectFieldItem()", "493": "ComboBoxFieldTest::::setBySelectFieldItem()", "494": "ComboBoxFieldTest::::setBySelectFieldItem()", "495": "ComboBoxFieldTest::::setBySelectFieldItem()", "496": "ComboBoxFieldTest::::setBySelectFieldItem()", "497": "ComboBoxFieldTest::::setBySelectFieldItem()", "498": "ComboBoxFieldTest::::setBySelectFieldItem()", "499": "ComboBoxFieldTest::::setBySelectFieldItem()", "501": "ComboBoxFieldTest::::setBySelectFieldItemNullTest()", "502": "ComboBoxFieldTest::::setBySelectFieldItemNullTest()", "503": "ComboBoxFieldTest::::setBySelectFieldItemNullTest()", "504": "ComboBoxFieldTest::::setBySelectFieldItemNullTest()", "505": "ComboBoxFieldTest::::setBySelectFieldItemNullTest()", "506": "ComboBoxFieldTest::::setBySelectFieldItemNullTest()", "507": "ComboBoxFieldTest::::setBySelectFieldItemNullTest()", "508": "ComboBoxFieldTest::::setBySelectFieldItemNullTest()", "509": "ComboBoxFieldTest::::setBySelectFieldItemNullTest()", "511": "ComboBoxFieldTest::::setBySelectFieldItemNotInOptionsTest()", "512": "ComboBoxFieldTest::::setBySelectFieldItemNotInOptionsTest()", "513": "ComboBoxFieldTest::::setBySelectFieldItemNotInOptionsTest()", "514": "ComboBoxFieldTest::::setBySelectFieldItemNotInOptionsTest()", "515": "ComboBoxFieldTest::::setBySelectFieldItemNotInOptionsTest()", "516": "ComboBoxFieldTest::::setBySelectFieldItemNotInOptionsTest()", "517": "ComboBoxFieldTest::::setBySelectFieldItemNotInOptionsTest()", "518": "ComboBoxFieldTest::::setBySelectFieldItemNotInOptionsTest()", "519": "ComboBoxFieldTest::::setBySelectFieldItemNotInOptionsTest()", "521": "ComboBoxFieldTest::::addingOptionsWithSameExportValuesLogsWarningTest()", "522": "ComboBoxFieldTest::::addingOptionsWithSameExportValuesLogsWarningTest()", "523": "ComboBoxFieldTest::::addingOptionsWithSameExportValuesLogsWarningTest()", "524": "ComboBoxFieldTest::::addingOptionsWithSameExportValuesLogsWarningTest()", "525": "ComboBoxFieldTest::::addingOptionsWithSameExportValuesLogsWarningTest()", "526": "ComboBoxFieldTest::::addingOptionsWithSameExportValuesLogsWarningTest()", "527": "ComboBoxFieldTest::::addingOptionsWithSameExportValuesLogsWarningTest()", "528": "ComboBoxFieldTest::::addingOptionsWithSameExportValuesLogsWarningTest()", "529": "ComboBoxFieldTest::::addingOptionsWithSameExportValuesLogsWarningTest()", "530": "ComboBoxFieldTest::::addingOptionsWithSameExportValuesLogsWarningTest()", "533": "ComboBoxFieldTest::::addingWithDuplicateDisplayValueTest()", "534": "ComboBoxFieldTest::::addingWithDuplicateDisplayValueTest()", "535": "ComboBoxFieldTest::::addingWithDuplicateDisplayValueTest()", "536": "ComboBoxFieldTest::::addingWithDuplicateDisplayValueTest()", "537": "ComboBoxFieldTest::::addingWithDuplicateDisplayValueTest()", "538": "ComboBoxFieldTest::::addingWithDuplicateDisplayValueTest()", "539": "ComboBoxFieldTest::::addingWithDuplicateDisplayValueTest()", "541": "ComboBoxFieldTest::::addingOptionWithNullExportValueTest()", "542": "ComboBoxFieldTest::::addingOptionWithNullExportValueTest()", "543": "ComboBoxFieldTest::::addingOptionWithNullExportValueTest()", "544": "ComboBoxFieldTest::::addingOptionWithNullExportValueTest()", "545": "ComboBoxFieldTest::::addingOptionWithNullExportValueTest()", "546": "ComboBoxFieldTest::::addingOptionWithNullExportValueTest()", "548": "ComboBoxFieldTest::::basicComboBoxFieldTaggedTest()", "549": "ComboBoxFieldTest::::basicComboBoxFieldTaggedTest()", "550": "ComboBoxFieldTest::::basicComboBoxFieldTaggedTest()", "551": "ComboBoxFieldTest::::basicComboBoxFieldTaggedTest()", "552": "ComboBoxFieldTest::::basicComboBoxFieldTaggedTest()", "553": "ComboBoxFieldTest::::basicComboBoxFieldTaggedTest()", "554": "ComboBoxFieldTest::::basicComboBoxFieldTaggedTest()", "555": "ComboBoxFieldTest::::basicComboBoxFieldTaggedTest()", "556": "ComboBoxFieldTest::::basicComboBoxFieldTaggedTest()", "557": "ComboBoxFieldTest::::basicComboBoxFieldTaggedTest()", "558": "ComboBoxFieldTest::::basicComboBoxFieldTaggedTest()", "559": "ComboBoxFieldTest::::basicComboBoxFieldTaggedTest()", "560": "ComboBoxFieldTest::::basicComboBoxFieldTaggedTest()", "561": "ComboBoxFieldTest::::basicComboBoxFieldTaggedTest()", "562": "ComboBoxFieldTest::::basicComboBoxFieldTaggedTest()", "563": "ComboBoxFieldTest::::basicComboBoxFieldTaggedTest()", "564": "ComboBoxFieldTest::::basicComboBoxFieldTaggedTest()", "565": "ComboBoxFieldTest::::basicComboBoxFieldTaggedTest()", "566": "ComboBoxFieldTest::::basicComboBoxFieldTaggedTest()", "567": "ComboBoxFieldTest::::basicComboBoxFieldTaggedTest()", "568": "ComboBoxFieldTest::::basicComboBoxFieldTaggedTest()", "569": "ComboBoxFieldTest::::basicComboBoxFieldTaggedTest()", "570": "ComboBoxFieldTest::::basicComboBoxFieldTaggedTest()", "571": "ComboBoxFieldTest::::basicComboBoxFieldTaggedTest()", "572": "ComboBoxFieldTest::::basicComboBoxFieldTaggedTest()", "573": "ComboBoxFieldTest::::basicComboBoxFieldTaggedTest()", "574": "ComboBoxFieldTest::::basicComboBoxFieldTaggedTest()", "575": "ComboBoxFieldTest::::basicComboBoxFieldTaggedTest()", "576": "ComboBoxFieldTest::::basicComboBoxFieldTaggedTest()", "577": "ComboBoxFieldTest::::basicComboBoxFieldTaggedTest()", "578": "ComboBoxFieldTest::::basicComboBoxFieldTaggedTest()", "579": "ComboBoxFieldTest::::basicComboBoxFieldTaggedTest()", "580": "ComboBoxFieldTest::::basicComboBoxFieldTaggedTest()", "581": "ComboBoxFieldTest::::basicComboBoxFieldTaggedTest()", "582": "ComboBoxFieldTest::::basicComboBoxFieldTaggedTest()", "583": "ComboBoxFieldTest::::basicComboBoxFieldTaggedTest()", "584": "ComboBoxFieldTest::::basicComboBoxFieldTaggedTest()"}, "tests": [{"test_lines": [64, 90], "covered_lines": [41, 51, 52, 60, 91, 92, 93, 94, 104, 150, 151, 153, 158, 166, 167, 170, 175, 179, 180, 183]}, {"test_lines": [93, 128], "covered_lines": [41, 51, 52, 60, 91, 92, 93, 94, 95, 96, 97, 98, 103, 104, 130, 131, 132, 136, 137, 140, 141, 150, 151, 153, 154, 155, 157, 158, 166, 167, 170, 175, 179, 180, 181, 182, 183]}, {"test_lines": [131, 167], "covered_lines": [41, 51, 52, 91, 92, 93, 94, 95, 96, 97, 98, 103, 104, 116, 119, 120, 130, 131, 132, 136, 137, 140, 141, 150, 153, 154, 155, 166, 167, 170, 175, 179, 180, 181, 182, 183]}, {"test_lines": [169, 205], "covered_lines": [41, 51, 52, 91, 92, 93, 94, 95, 96, 97, 98, 103, 104, 116, 119, 120, 130, 131, 132, 136, 137, 140, 141, 150, 153, 154, 155, 166, 167, 170, 175, 179, 180, 181, 182, 183]}, {"test_lines": [207, 232], "covered_lines": [41, 51, 52, 60, 130, 131, 132, 136, 137, 140, 141, 150, 151, 166, 167, 170, 175]}, {"test_lines": [234, 251], "covered_lines": [41, 51, 52, 91, 92, 93, 94, 95, 96, 97, 98, 103, 104, 130, 131, 132, 136, 137, 140, 141, 166, 167, 170, 175, 179, 180, 181, 182, 183]}, {"test_lines": [253, 269], "covered_lines": [41, 51, 52, 91, 92, 93, 94, 95, 96, 97, 98, 103, 104, 130, 131, 132, 136, 137, 140, 141, 166, 167, 170, 175, 179, 180, 181, 182, 183]}, {"test_lines": [271, 286], "covered_lines": [41, 51, 52, 91, 92, 93, 94, 95, 96, 97, 98, 103, 104, 130, 131, 132, 136, 137, 140, 141, 166, 167, 170, 175, 179, 180, 181, 182, 183]}, {"test_lines": [288, 310], "covered_lines": [41, 51, 52, 91, 92, 93, 94, 95, 96, 97, 98, 103, 104, 130, 131, 132, 136, 137, 140, 141, 166, 167, 170, 175, 179, 180, 181, 182, 183]}, {"test_lines": [312, 329], "covered_lines": [41, 51, 52, 91, 92, 93, 94, 95, 96, 97, 98, 103, 104, 130, 131, 132, 136, 137, 140, 141, 166, 167, 170, 175, 179, 180, 181, 182, 183]}, {"test_lines": [331, 360], "covered_lines": [41, 51, 52, 91, 92, 93, 94, 95, 96, 97, 98, 103, 104, 130, 131, 132, 136, 137, 140, 141, 150, 153, 154, 155, 166, 167, 170, 175, 179, 180, 181, 182, 183]}, {"test_lines": [362, 378], "covered_lines": [41, 51, 52, 60, 74, 79, 80, 91, 92, 93, 94, 95, 96, 97, 98, 103, 104, 116, 119, 120, 130, 131, 132, 136, 137, 140, 141, 150, 151, 166, 167, 170, 175, 179, 180, 181, 182, 183]}, {"test_lines": [380, 409], "covered_lines": [41, 51, 52, 91, 92, 93, 94, 95, 96, 97, 98, 103, 104, 130, 131, 132, 136, 137, 140, 141, 150, 153, 154, 155, 166, 167, 170, 175, 179, 180, 181, 182, 183]}, {"test_lines": [412, 419], "covered_lines": [41, 51, 52, 130, 131, 132, 136, 137, 140, 141, 150, 151]}, {"test_lines": [421, 432], "covered_lines": [41, 51, 52, 91, 92, 93, 94, 95, 96, 97, 98, 103, 104, 130, 131, 132, 136, 137, 140, 141, 150, 153, 154, 155, 179, 180, 181, 182, 183]}, {"test_lines": [434, 443], "covered_lines": [41, 51, 52, 91, 92, 93, 94, 95, 103, 104, 130, 131, 132, 136, 137, 140, 141, 150, 153, 154, 157, 158, 179, 180, 181, 182, 183]}, {"test_lines": [445, 455], "covered_lines": [41, 51, 52, 91, 92, 93, 94, 95, 96, 97, 98, 103, 104, 130, 131, 132, 136, 137, 140, 141, 150, 153, 154, 155, 179, 180, 181, 182, 183]}, {"test_lines": [457, 467], "covered_lines": [41, 51, 52, 74, 79, 80, 91, 92, 93, 94, 95, 96, 97, 98, 103, 104, 116, 119, 120, 130, 131, 132, 136, 137, 140, 141, 150, 153, 154, 155, 157, 179, 180, 181, 182, 183]}, {"test_lines": [469, 477], "covered_lines": [41, 51, 52, 74, 75, 76, 77, 130, 131, 132, 136, 137, 140, 141]}, {"test_lines": [479, 486], "covered_lines": [41, 51, 52, 74, 75, 76, 77, 130, 131, 132, 136, 137, 140, 141]}, {"test_lines": [488, 499], "covered_lines": [41, 51, 52, 91, 92, 93, 94, 95, 96, 97, 98, 103, 104, 116, 119, 120, 130, 131, 132, 136, 137, 140, 141, 150, 153, 154, 155, 179, 180, 181, 182, 183]}, {"test_lines": [501, 509], "covered_lines": [41, 51, 52, 116, 117, 130, 131, 132, 136, 137, 140, 141, 150, 151]}, {"test_lines": [511, 519], "covered_lines": [41, 51, 52, 91, 92, 93, 94, 95, 103, 104, 116, 119, 120, 130, 131, 132, 136, 137, 140, 141, 150, 153, 154, 157, 158, 179, 180, 181, 182, 183]}, {"test_lines": [521, 530], "covered_lines": [41, 51, 52, 130, 131, 132, 133, 134, 137, 138, 140, 141]}, {"test_lines": [533, 539], "covered_lines": [41, 51, 52, 130, 131, 132, 136, 137, 140, 141]}, {"test_lines": [541, 546], "covered_lines": [41, 51, 52]}, {"test_lines": [548, 584], "covered_lines": [41, 51, 52, 60, 91, 92, 93, 94, 95, 96, 97, 98, 103, 104, 130, 131, 132, 136, 137, 140, 141, 150, 151, 153, 154, 155, 157, 158, 166, 167, 170, 175, 179, 180, 181, 182, 183]}]}, "/bernard/dataset_construction/prep/repos/itext-java/forms/src/main/java/com/itextpdf/forms/form/element/ListBoxField.java": {"class_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.forms.form.element;\n", "\n", "import com.itextpdf.forms.FormDefaultAccessibilityProperties;\n", "import com.itextpdf.forms.form.FormProperty;\n", "import com.itextpdf.forms.form.renderer.SelectFieldListBoxRenderer;\n", "import com.itextpdf.kernel.pdf.tagutils.AccessibilityProperties;\n", "import com.itextpdf.layout.properties.BoxSizingPropertyValue;\n", "import com.itextpdf.layout.properties.OverflowPropertyValue;\n", "import com.itextpdf.layout.properties.Property;\n", "import com.itextpdf.layout.properties.UnitValue;\n", "import com.itextpdf.layout.renderer.IRenderer;\n", "\n", "import java.util.ArrayList;\n", "import java.util.List;\n", "\n", "/**\n", " * A field that represents a control for selecting one or several of the provided options.\n", " */\n", "public class ListBoxField extends AbstractSelectField {\n", "\n", "    /**\n", "     * Create a new list box field.\n", "     *\n", "     * @param size the size of the list box, which will define the height of visible properties,\n", "     *             shall be greater than zero\n", "     * @param allowMultipleSelection a boolean flag that defines whether multiple options are allowed\n", "     *                              to be selected at once\n", "     * @param id the id\n", "     */\n", "    public ListBoxField(String id, int size, boolean allowMultipleSelection) {\n", "        super(id);\n", "        setProperty(FormProperty.FORM_FIELD_SIZE, size);\n", "        setProperty(FormProperty.FORM_FIELD_MULTIPLE, allowMultipleSelection);\n", "        setProperty(Property.BOX_SIZING, BoxSizingPropertyValue.BORDER_BOX);\n", "        setProperty(Property.PADDING_LEFT, UnitValue.createPointValue(1));\n", "        setProperty(Property.PADDING_RIGHT, UnitValue.createPointValue(1));\n", "        setProperty(Property.PADDING_TOP, UnitValue.createPointValue(1));\n", "        setProperty(Property.PADDING_BOTTOM, UnitValue.createPointValue(1));\n", "\n", "        // This property allows to show selected item if height is smaller than the size of all items\n", "        setProperty(Property.OVERFLOW_Y, OverflowPropertyValue.HIDDEN);\n", "    }\n", "\n", "    /* (non-Javadoc)\n", "     * @see FormField#getDefaultProperty(int)\n", "     */\n", "    @Override\n", "    public <T1> T1 getDefaultProperty(int property) {\n", "        switch (property) {\n", "            case FormProperty.FORM_FIELD_MULTIPLE:\n", "                return (T1) (Object) false;\n", "            case FormProperty.FORM_FIELD_SIZE:\n", "                return (T1) (Object) 4;\n", "            default:\n", "                return super.<T1>getDefaultProperty(property);\n", "        }\n", "    }\n", "\n", "    /**\n", "     * Add an option for {@link ListBoxField}. The option is not selected.\n", "     *\n", "     * @param option string representation of the option.\n", "     * @return this {@link ListBoxField}.\n", "     */\n", "    public ListBoxField addOption(String option) {\n", "        return addOption(option, false);\n", "    }\n", "\n", "    /**\n", "     * Add an option for {@link ListBoxField}.\n", "     *\n", "     * @param option string representation of the option.\n", "     * @param selected {@code true} is the option if selected, {@code false} otherwise.\n", "     * @return this {@link ListBoxField}.\n", "     */\n", "    public ListBoxField addOption(String option, boolean selected) {\n", "        SelectFieldItem item = new SelectFieldItem(option);\n", "        addOption(item);\n", "        item.getElement().setProperty(FormProperty.FORM_FIELD_SELECTED, selected);\n", "\n", "        return this;\n", "    }\n", "\n", "    /**\n", "     * Get a list of selected options.\n", "     *\n", "     * @return a list of display values of selected options.\n", "     */\n", "    public List<String> getSelectedStrings() {\n", "        List<String> selectedStrings = new ArrayList<String>();\n", "        for (SelectFieldItem option : options) {\n", "            if (Boolean.TRUE.equals(option.getElement().<Boolean>getProperty(FormProperty.FORM_FIELD_SELECTED))) {\n", "                selectedStrings.add(option.getDisplayValue());\n", "            }\n", "        }\n", "\n", "        return selectedStrings;\n", "    }\n", "\n", "    /**\n", "     * {@inheritDoc}\n", "     */\n", "    @Override\n", "    public AccessibilityProperties getAccessibilityProperties() {\n", "        if (tagProperties == null) {\n", "            tagProperties = new FormDefaultAccessibilityProperties(\n", "                    FormDefaultAccessibilityProperties.FORM_FIELD_LIST_BOX);\n", "        }\n", "        return tagProperties;\n", "    }\n", "\n", "    @Override\n", "    protected IRenderer makeNewRenderer() {\n", "        return new SelectFieldListBoxRenderer(this);\n", "    }\n", "}\n"], "test_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.forms.form.element;\n", "\n", "import com.itextpdf.forms.PdfAcroForm;\n", "import com.itextpdf.forms.exceptions.FormsExceptionMessageConstant;\n", "import com.itextpdf.forms.fields.ChoiceFormFieldBuilder;\n", "import com.itextpdf.forms.fields.PdfChoiceFormField;\n", "import com.itextpdf.forms.form.FormProperty;\n", "import com.itextpdf.io.font.constants.StandardFonts;\n", "import com.itextpdf.io.logs.IoLogMessageConstant;\n", "import com.itextpdf.kernel.colors.ColorConstants;\n", "import com.itextpdf.kernel.exceptions.PdfException;\n", "import com.itextpdf.kernel.font.PdfFontFactory;\n", "import com.itextpdf.kernel.geom.Rectangle;\n", "import com.itextpdf.kernel.pdf.PdfArray;\n", "import com.itextpdf.kernel.pdf.PdfDocument;\n", "import com.itextpdf.kernel.pdf.PdfNumber;\n", "import com.itextpdf.kernel.pdf.PdfString;\n", "import com.itextpdf.kernel.pdf.PdfWriter;\n", "import com.itextpdf.kernel.utils.CompareTool;\n", "import com.itextpdf.layout.Document;\n", "import com.itextpdf.layout.borders.DashedBorder;\n", "import com.itextpdf.layout.borders.SolidBorder;\n", "import com.itextpdf.layout.element.Div;\n", "import com.itextpdf.layout.element.Paragraph;\n", "import com.itextpdf.layout.logs.LayoutLogMessageConstant;\n", "import com.itextpdf.layout.properties.Property;\n", "import com.itextpdf.layout.properties.TextAlignment;\n", "import com.itextpdf.layout.properties.UnitValue;\n", "import com.itextpdf.test.ExtendedITextTest;\n", "import com.itextpdf.test.annotations.LogMessage;\n", "import com.itextpdf.test.annotations.LogMessages;\n", "import com.itextpdf.test.annotations.type.IntegrationTest;\n", "\n", "import java.io.ByteArrayOutputStream;\n", "import java.io.IOException;\n", "import org.junit.Assert;\n", "import org.junit.BeforeClass;\n", "import org.junit.Test;\n", "import org.junit.experimental.categories.Category;\n", "\n", "@Category(IntegrationTest.class)\n", "public class ListBoxFieldTest extends ExtendedITextTest {\n", "    public static final String SOURCE_FOLDER =\n", "            \"./src/test/resources/com/itextpdf/forms/form/element/ListBoxFieldTest/\";\n", "    public static final String DESTINATION_FOLDER =\n", "            \"./target/test/com/itextpdf/forms/form/element/ListBoxFieldTest/\";\n", "\n", "    @BeforeClass\n", "    public static void beforeClass() {\n", "        createOrClearDestinationFolder(DESTINATION_FOLDER);\n", "    }\n", "    \n", "    @Test\n", "    public void emptyListBoxFieldTest() throws IOException, InterruptedException {\n", "        String outPdf = DESTINATION_FOLDER + \"emptyListBoxField.pdf\";\n", "        String cmpPdf = SOURCE_FOLDER + \"cmp_emptyListBoxField.pdf\";\n", "\n", "        try (Document document = new Document(new PdfDocument(new PdfWriter(outPdf)))) {\n", "            ListBoxField flattenListBoxField = new ListBoxField(\"flatten empty list box field\", 0, false);\n", "            flattenListBoxField.setProperty(FormProperty.FORM_FIELD_FLATTEN, true);\n", "            flattenListBoxField.setBackgroundColor(ColorConstants.RED);\n", "            document.add(flattenListBoxField);\n", "        }\n", "\n", "        Assert.assertNull(new CompareTool().compareByContent(outPdf, cmpPdf, DESTINATION_FOLDER));\n", "    }\n", "\n", "    @Test\n", "    public void basicListBoxFieldTest() throws IOException, InterruptedException {\n", "        String outPdf = DESTINATION_FOLDER + \"basicListBoxField.pdf\";\n", "        String cmpPdf = SOURCE_FOLDER + \"cmp_basicListBoxField.pdf\";\n", "\n", "        try (Document document = new Document(new PdfDocument(new PdfWriter(outPdf)))) {\n", "            ListBoxField formListBoxField = new ListBoxField(\"form list box field\", 2, false);\n", "            formListBoxField.setInteractive(true);\n", "            formListBoxField.addOption(\"option 1\", false);\n", "            formListBoxField.addOption(\"option 2\", true);\n", "            document.add(formListBoxField);\n", "\n", "            ListBoxField flattenListBoxField = new ListBoxField(\"flatten list box field\", 2, false);\n", "            flattenListBoxField.setProperty(FormProperty.FORM_FIELD_FLATTEN, true);\n", "            flattenListBoxField.addOption(\"option 1\", false);\n", "            flattenListBoxField.addOption(\"option 2\", true);\n", "            document.add(flattenListBoxField);\n", "\n", "            Paragraph option3 = new Paragraph(\"option 3\");\n", "            option3.setProperty(FormProperty.FORM_FIELD_SELECTED, true);\n", "            option3.setMargin(0);\n", "            option3.setMultipliedLeading(2);\n", "\n", "            ListBoxField flattenListBoxFieldWithMultipleSelection =\n", "                    new ListBoxField(\"flatten list box field with multiple selection\", 3, true);\n", "            flattenListBoxFieldWithMultipleSelection.setInteractive(false);\n", "            flattenListBoxFieldWithMultipleSelection.addOption(\"option 1\", false);\n", "            flattenListBoxFieldWithMultipleSelection.addOption(\"option 2\", true);\n", "            flattenListBoxFieldWithMultipleSelection.addOption(option3);\n", "            document.add(flattenListBoxFieldWithMultipleSelection);\n", "        }\n", "\n", "        Assert.assertNull(new CompareTool().compareByContent(outPdf, cmpPdf, DESTINATION_FOLDER));\n", "    }\n", "\n", "    @Test\n", "    @LogMessages(messages = @LogMessage(\n", "            messageTemplate = IoLogMessageConstant.PROPERTY_IN_PERCENTS_NOT_SUPPORTED, count = 22))\n", "    public void listBoxFieldWithFontSizeTest() throws IOException, InterruptedException {\n", "        String outPdf = DESTINATION_FOLDER + \"listBoxFieldWithFontSize.pdf\";\n", "        String cmpPdf = SOURCE_FOLDER + \"cmp_listBoxFieldWithFontSize.pdf\";\n", "\n", "        try (Document document = new Document(new PdfDocument(new PdfWriter(outPdf)))) {\n", "            ListBoxField formListBoxFieldWithFont = new ListBoxField(\"flatten list box field with font\", 0, false);\n", "            formListBoxFieldWithFont.setInteractive(true);\n", "            formListBoxFieldWithFont.setBackgroundColor(ColorConstants.RED);\n", "            formListBoxFieldWithFont.addOption(\"option 1\");\n", "            formListBoxFieldWithFont.addOption(\"option 2\");\n", "            formListBoxFieldWithFont.setFont(PdfFontFactory.createFont(StandardFonts.COURIER));\n", "            formListBoxFieldWithFont.setFontSize(6);\n", "            document.add(formListBoxFieldWithFont);\n", "\n", "            document.add(new Paragraph(\"line break\"));\n", "\n", "            ListBoxField flattenListBoxFieldWithFont = new ListBoxField(\"flatten list box field with font\", 0, false);\n", "            flattenListBoxFieldWithFont.setInteractive(false);\n", "            flattenListBoxFieldWithFont.setBackgroundColor(ColorConstants.RED);\n", "            flattenListBoxFieldWithFont.addOption(\"option 1\");\n", "            flattenListBoxFieldWithFont.addOption(\"option 2\");\n", "            flattenListBoxFieldWithFont.setFont(PdfFontFactory.createFont(StandardFonts.COURIER));\n", "            flattenListBoxFieldWithFont.setFontSize(6);\n", "            document.add(flattenListBoxFieldWithFont);\n", "\n", "            document.add(new Paragraph(\"line break\"));\n", "\n", "            ListBoxField flattenListBoxFieldWithPercentFont =\n", "                    new ListBoxField(\"flatten list box field with percent font\", 0, false);\n", "            flattenListBoxFieldWithFont.setInteractive(false);\n", "            flattenListBoxFieldWithPercentFont.setBackgroundColor(ColorConstants.RED);\n", "            flattenListBoxFieldWithPercentFont.addOption(\"option 1\");\n", "            flattenListBoxFieldWithPercentFont.addOption(\"option 2\");\n", "            flattenListBoxFieldWithPercentFont.setFont(PdfFontFactory.createFont(StandardFonts.COURIER));\n", "            flattenListBoxFieldWithPercentFont.setProperty(Property.FONT_SIZE, UnitValue.createPercentValue(6));\n", "            document.add(flattenListBoxFieldWithPercentFont);\n", "        }\n", "\n", "        Assert.assertNull(new CompareTool().compareByContent(outPdf, cmpPdf, DESTINATION_FOLDER));\n", "    }\n", "\n", "    @Test\n", "    public void listBoxFieldWithMarginsTest() throws IOException, InterruptedException {\n", "        String outPdf = DESTINATION_FOLDER + \"listBoxFieldWithMargins.pdf\";\n", "        String cmpPdf = SOURCE_FOLDER + \"cmp_listBoxFieldWithMargins.pdf\";\n", "\n", "        try (Document document = new Document(new PdfDocument(new PdfWriter(outPdf)))) {\n", "            Paragraph option1 = new Paragraph(\"option 1\");\n", "            option1.setProperty(FormProperty.FORM_FIELD_LABEL, \"option 1\");\n", "            option1.setMargin(4);\n", "\n", "            Paragraph option2 = new Paragraph(\"option 2\");\n", "            option2.setProperty(FormProperty.FORM_FIELD_SELECTED, true);\n", "            option2.setProperty(FormProperty.FORM_FIELD_LABEL, \"option 2\");\n", "            option2.setMargin(4);\n", "\n", "            ListBoxField listBoxField = new ListBoxField(\"list box field with margins\", 1, false);\n", "            listBoxField.setInteractive(false);\n", "            listBoxField.setBackgroundColor(ColorConstants.RED);\n", "            listBoxField.addOption(option1);\n", "            listBoxField.addOption(option2);\n", "            document.add(listBoxField);\n", "\n", "            document.add(new Paragraph(\"line break\"));\n", "\n", "            document.add(listBoxField);\n", "\n", "            document.add(new Paragraph(\"line break\"));\n", "\n", "            document.add(listBoxField.setInteractive(true));\n", "        }\n", "\n", "        Assert.assertNull(new CompareTool().compareByContent(outPdf, cmpPdf, DESTINATION_FOLDER));\n", "    }\n", "\n", "    @Test\n", "    public void listBoxFieldWithHeightTest() throws IOException, InterruptedException {\n", "        String outPdf = DESTINATION_FOLDER + \"listBoxFieldWithHeight.pdf\";\n", "        String cmpPdf = SOURCE_FOLDER + \"cmp_listBoxFieldWithHeight.pdf\";\n", "\n", "        try (Document document = new Document(new PdfDocument(new PdfWriter(outPdf)))) {\n", "            ListBoxField listBoxField = new ListBoxField(\"list box field with height\", 0, false);\n", "            listBoxField.setInteractive(false);\n", "            listBoxField.setBackgroundColor(ColorConstants.RED);\n", "            listBoxField.addOption(\"option 1\");\n", "            listBoxField.addOption(\"option 2\", true);\n", "            listBoxField.setHeight(100);\n", "            document.add(listBoxField);\n", "\n", "            document.add(new Paragraph(\"line break\"));\n", "\n", "            document.add(listBoxField.setInteractive(true));\n", "        }\n", "\n", "        Assert.assertNull(new CompareTool().compareByContent(outPdf, cmpPdf, DESTINATION_FOLDER));\n", "    }\n", "\n", "    @Test\n", "    public void listBoxFieldWithMinHeightTest() throws IOException, InterruptedException {\n", "        String outPdf = DESTINATION_FOLDER + \"listBoxFieldWithMinHeight.pdf\";\n", "        String cmpPdf = SOURCE_FOLDER + \"cmp_listBoxFieldWithMinHeight.pdf\";\n", "\n", "        try (Document document = new Document(new PdfDocument(new PdfWriter(outPdf)))) {\n", "            ListBoxField listBoxField = new ListBoxField(\"list box field with height\", 0, false);\n", "            listBoxField.setInteractive(false);\n", "            listBoxField.setBackgroundColor(ColorConstants.RED);\n", "            listBoxField.addOption(\"option 1\");\n", "            listBoxField.addOption(\"option 2\", true);\n", "            listBoxField.setProperty(Property.MIN_HEIGHT, UnitValue.createPointValue(100));\n", "            document.add(listBoxField);\n", "\n", "            document.add(new Paragraph(\"line break\"));\n", "\n", "            document.add(listBoxField.setInteractive(true));\n", "        }\n", "\n", "        Assert.assertNull(new CompareTool().compareByContent(outPdf, cmpPdf, DESTINATION_FOLDER));\n", "    }\n", "\n", "    @Test\n", "    @LogMessages(messages = @LogMessage(messageTemplate = IoLogMessageConstant.CLIP_ELEMENT, count = 2))\n", "    public void listBoxFieldWithMaxHeightTest() throws IOException, InterruptedException {\n", "        String outPdf = DESTINATION_FOLDER + \"listBoxFieldWithMaxHeight.pdf\";\n", "        String cmpPdf = SOURCE_FOLDER + \"cmp_listBoxFieldWithMaxHeight.pdf\";\n", "\n", "        try (Document document = new Document(new PdfDocument(new PdfWriter(outPdf)))) {\n", "            ListBoxField listBoxField = new ListBoxField(\"list box field with height\", 0, false);\n", "            listBoxField.setInteractive(false);\n", "            listBoxField.setBackgroundColor(ColorConstants.RED);\n", "            listBoxField.addOption(\"option 1\", false);\n", "            listBoxField.addOption(\"option 2\", true);\n", "            listBoxField.setProperty(Property.MAX_HEIGHT, UnitValue.createPointValue(25));\n", "            document.add(listBoxField);\n", "\n", "            document.add(new Paragraph(\"line break\"));\n", "\n", "            document.add(listBoxField.setInteractive(true));\n", "        }\n", "\n", "        Assert.assertNull(new CompareTool().compareByContent(outPdf, cmpPdf, DESTINATION_FOLDER));\n", "    }\n", "\n", "    @Test\n", "    public void listBoxFieldCannotFitTest() throws IOException, InterruptedException {\n", "        String outPdf = DESTINATION_FOLDER + \"listBoxFieldCannotFit.pdf\";\n", "        String cmpPdf = SOURCE_FOLDER + \"cmp_listBoxFieldCannotFit.pdf\";\n", "\n", "        try (Document document = new Document(new PdfDocument(new PdfWriter(outPdf)))) {\n", "            Div div = new Div();\n", "            div.setWidth(UnitValue.createPointValue(400));\n", "            div.setHeight(UnitValue.createPointValue(740));\n", "            div.setBackgroundColor(ColorConstants.PINK);\n", "            document.add(div);\n", "            \n", "            ListBoxField listBoxField = new ListBoxField(\"list box field cannot fit\", 0, false);\n", "            listBoxField.setInteractive(true);\n", "            listBoxField.setBackgroundColor(ColorConstants.RED);\n", "            listBoxField.addOption(\"option 1\", true);\n", "            listBoxField.addOption(\"option 2\");\n", "            document.add(listBoxField);\n", "        }\n", "\n", "        Assert.assertNull(new CompareTool().compareByContent(outPdf, cmpPdf, DESTINATION_FOLDER));\n", "    }\n", "\n", "    @Test\n", "    public void listBoxFieldCannotFitByWidthTest() throws IOException, InterruptedException {\n", "        String outPdf = DESTINATION_FOLDER + \"listBoxFieldCannotFitByWidth.pdf\";\n", "        String cmpPdf = SOURCE_FOLDER + \"cmp_listBoxFieldCannotFitByWidth.pdf\";\n", "\n", "        try (Document document = new Document(new PdfDocument(new PdfWriter(outPdf)))) {\n", "            Paragraph option1 = new Paragraph(\"option 1\");\n", "            option1.setProperty(FormProperty.FORM_FIELD_SELECTED, true);\n", "            option1.setProperty(FormProperty.FORM_FIELD_LABEL, \"option 1\");\n", "\n", "            Paragraph option2 = new Paragraph(\"option 2\");\n", "            option2.setProperty(FormProperty.FORM_FIELD_LABEL, \"option 2\");\n", "\n", "            ListBoxField listBoxField = new ListBoxField(\"list box field cannot fit by width\", 0, false);\n", "            listBoxField.setInteractive(false);\n", "            listBoxField.setBackgroundColor(ColorConstants.RED);\n", "            listBoxField.setProperty(Property.WIDTH, UnitValue.createPointValue(600));\n", "            listBoxField.setBorder(new SolidBorder(20));\n", "            listBoxField.addOption(option1);\n", "            listBoxField.addOption(option2);\n", "            document.add(listBoxField);\n", "\n", "            document.add(new Paragraph(\"Line break\"));\n", "\n", "            document.add(listBoxField.setInteractive(true));\n", "        }\n", "\n", "        Assert.assertNull(new CompareTool().compareByContent(outPdf, cmpPdf, DESTINATION_FOLDER));\n", "    }\n", "\n", "    @Test\n", "    public void listBoxFieldWithLangTest() throws IOException, InterruptedException {\n", "        String outPdf = DESTINATION_FOLDER + \"listBoxFieldWithLang.pdf\";\n", "        String cmpPdf = SOURCE_FOLDER + \"cmp_listBoxFieldWithLang.pdf\";\n", "\n", "        try (Document document = new Document(new PdfDocument(new PdfWriter(outPdf)))) {\n", "            document.getPdfDocument().setTagged();\n", "            ListBoxField listBoxField = new ListBoxField(\"list box field with lang\", 0, false);\n", "            listBoxField.setInteractive(false);\n", "            listBoxField.setBackgroundColor(ColorConstants.RED);\n", "            listBoxField.addOption(\"option 1\");\n", "            listBoxField.addOption(\"option 2\");\n", "            listBoxField.setProperty(FormProperty.FORM_ACCESSIBILITY_LANGUAGE, \"random_lang\");\n", "            document.add(listBoxField);\n", "\n", "            document.add(new Paragraph(\"Line break\"));\n", "\n", "            document.add(listBoxField.setInteractive(true));\n", "        }\n", "\n", "        Assert.assertNull(new CompareTool().compareByContent(outPdf, cmpPdf, DESTINATION_FOLDER));\n", "    }\n", "\n", "    @Test\n", "    public void colorsBordersTest() throws IOException, InterruptedException {\n", "        String outPdf = DESTINATION_FOLDER + \"colorsBorders.pdf\";\n", "        String cmpPdf = SOURCE_FOLDER + \"cmp_colorsBorders.pdf\";\n", "\n", "        try (Document document = new Document(new PdfDocument(new PdfWriter(outPdf)))) {\n", "            ListBoxField listBoxField = new ListBoxField(\"coloured list box field with borders\", 0, false);\n", "            listBoxField.setInteractive(false);\n", "            listBoxField.setBackgroundColor(ColorConstants.RED);\n", "            listBoxField.addOption(\"option 1\");\n", "            listBoxField.addOption(\"option 2\", true);\n", "            listBoxField.setBorder(new DashedBorder(ColorConstants.BLUE, 3));\n", "            listBoxField.setFontColor(ColorConstants.GREEN);\n", "            document.add(listBoxField);\n", "\n", "            document.add(new Paragraph(\"Line break\"));\n", "\n", "            document.add(listBoxField.setInteractive(true));\n", "        }\n", "\n", "        Assert.assertNull(new CompareTool().compareByContent(outPdf, cmpPdf, DESTINATION_FOLDER));\n", "    }\n", "\n", "    @Test\n", "    public void longListTest() throws IOException, InterruptedException {\n", "        String outPdf = DESTINATION_FOLDER + \"longList.pdf\";\n", "        String cmpPdf = SOURCE_FOLDER + \"cmp_longList.pdf\";\n", "\n", "        try (Document document = new Document(new PdfDocument(new PdfWriter(outPdf)))) {\n", "            ListBoxField listBoxField = new ListBoxField(\"long list box field\", 4, true);\n", "            listBoxField.setInteractive(false);\n", "            listBoxField.addOption(\"option 1\");\n", "            listBoxField.addOption(\"option 2\");\n", "            listBoxField.addOption(\"option 3\");\n", "            listBoxField.addOption(\"option 4\");\n", "            listBoxField.addOption(\"option 5\");\n", "            listBoxField.addOption(\"option 6\", true);\n", "            listBoxField.addOption(\"option 7\");\n", "            listBoxField.addOption(\"option 8\");\n", "            listBoxField.addOption(\"option 9\");\n", "            listBoxField.addOption(\"very very very long long long option 10\", true);\n", "            listBoxField.addOption(\"option 11\");\n", "\n", "            document.add(listBoxField);\n", "\n", "            document.add(new Paragraph(\"Line break\"));\n", "\n", "            document.add(listBoxField.setInteractive(true));\n", "        }\n", "\n", "        Assert.assertNull(new CompareTool().compareByContent(outPdf, cmpPdf, DESTINATION_FOLDER));\n", "    }\n", "\n", "    @Test\n", "    public void justificationTest() throws IOException, InterruptedException {\n", "        String outPdf = DESTINATION_FOLDER + \"justification.pdf\";\n", "        String cmpPdf = SOURCE_FOLDER + \"cmp_justification.pdf\";\n", "\n", "        try (Document document = new Document(new PdfDocument(new PdfWriter(outPdf)))) {\n", "            ListBoxField listBoxField = new ListBoxField(\"left box field\", 0, false);\n", "            listBoxField.setInteractive(false);\n", "            listBoxField.setWidth(200);\n", "            listBoxField.setTextAlignment(TextAlignment.LEFT);\n", "            listBoxField.addOption(\"option 1\");\n", "            listBoxField.addOption(\"option 2\", true);\n", "            document.add(listBoxField);\n", "\n", "            document.add(new Paragraph(\"Line break\"));\n", "\n", "            document.add(listBoxField.setInteractive(true));\n", "\n", "            ListBoxField centerListBoxField = new ListBoxField(\"center box field\", 0, false);\n", "            centerListBoxField.setInteractive(false);\n", "            centerListBoxField.setWidth(200);\n", "            centerListBoxField.setTextAlignment(TextAlignment.CENTER);\n", "            centerListBoxField.addOption(\"option 1\");\n", "            centerListBoxField.addOption(\"option 2\", true);\n", "            document.add(centerListBoxField);\n", "\n", "            document.add(new Paragraph(\"Line break\"));\n", "\n", "            document.add(centerListBoxField.setInteractive(true));\n", "\n", "            ListBoxField rightListBoxField = new ListBoxField(\"right box field\", 0, false);\n", "            rightListBoxField.setInteractive(false);\n", "            rightListBoxField.setWidth(200);\n", "            rightListBoxField.setTextAlignment(TextAlignment.RIGHT);\n", "            rightListBoxField.addOption(\"option 1\");\n", "            rightListBoxField.addOption(\"option 2\", true);\n", "            document.add(rightListBoxField);\n", "\n", "            document.add(new Paragraph(\"Line break\"));\n", "\n", "            document.add(rightListBoxField.setInteractive(true));\n", "        }\n", "\n", "        Assert.assertNull(new CompareTool().compareByContent(outPdf, cmpPdf, DESTINATION_FOLDER));\n", "    }\n", "\n", "    @Test\n", "    public void exportValueTest() throws IOException, InterruptedException {\n", "        String outPdf = DESTINATION_FOLDER + \"exportValue.pdf\";\n", "        String cmpPdf = SOURCE_FOLDER + \"cmp_exportValue.pdf\";\n", "\n", "        try (Document document = new Document(new PdfDocument(new PdfWriter(outPdf)))) {\n", "            ListBoxField listBoxField = new ListBoxField(\"export value field\", 0, true);\n", "            listBoxField.setInteractive(false);\n", "            listBoxField.setWidth(200);\n", "            listBoxField.addOption(new SelectFieldItem(\"English\"));\n", "            listBoxField.addOption(new SelectFieldItem(\"German\", \"Deutch\"), true);\n", "            listBoxField.addOption(new SelectFieldItem(\"Italian\", \"Italiano\"), true);\n", "            document.add(listBoxField);\n", "\n", "            document.add(new Paragraph(\"Line break\"));\n", "\n", "            document.add(listBoxField.setInteractive(true));\n", "        }\n", "\n", "        Assert.assertNull(new CompareTool().compareByContent(outPdf, cmpPdf, DESTINATION_FOLDER));\n", "    }\n", "\n", "    @Test\n", "    public void invalidOptionsTest() throws IOException, InterruptedException {\n", "        String outPdf = DESTINATION_FOLDER + \"invalidOptions.pdf\";\n", "        String cmpPdf = SOURCE_FOLDER + \"cmp_invalidOptions.pdf\";\n", "\n", "        try (PdfDocument doc = new PdfDocument(new PdfWriter(outPdf))) {\n", "            ListBoxField listBoxField = new ListBoxField(\"invalid\", 0, true);\n", "            listBoxField.setInteractive(true);\n", "            listBoxField.setWidth(200);\n", "\n", "            // Invalid options array here\n", "            PdfArray option1 = new PdfArray();\n", "            option1.add(new PdfString(\"English\"));\n", "            option1.add(new PdfString(\"English\"));\n", "            option1.add(new PdfString(\"English3\"));\n", "            PdfArray option2 = new PdfArray();\n", "            option2.add(new PdfString(\"German\"));\n", "            option2.add(new PdfString(\"Deutch\"));\n", "            PdfArray option3 = new PdfArray();\n", "            option3.add(new PdfString(\"Italian\"));\n", "            PdfArray options = new PdfArray();\n", "            options.add(option1);\n", "            options.add(option2);\n", "            options.add(option3);\n", "            options.add(new PdfArray());\n", "\n", "            PdfChoiceFormField field = new ChoiceFormFieldBuilder(doc, \"invalid\")\n", "                    .setWidgetRectangle(new Rectangle(100, 500, 100, 100))\n", "                    .createList();\n", "            field.setOptions(options);\n", "            field.getFirstFormAnnotation().setFormFieldElement(listBoxField);\n", "\n", "            PdfAcroForm.getAcroForm(doc, true).addField(field);\n", "        }\n", "\n", "        Assert.assertNull(new CompareTool().compareByContent(outPdf, cmpPdf, DESTINATION_FOLDER));\n", "    }\n", "\n", "    @Test\n", "    @LogMessages(messages = @LogMessage(messageTemplate = LayoutLogMessageConstant.ELEMENT_DOES_NOT_FIT_AREA, count = 1))\n", "    public void listBoxIsBiggerThanPage() throws IOException, InterruptedException {\n", "        String outPdf = DESTINATION_FOLDER + \"listBoxIsBiggerThenPage.pdf\";\n", "        String cmpPdf = SOURCE_FOLDER + \"cmp_listBoxIsBiggerThenPage.pdf\";\n", "        Document document = new Document(new PdfDocument(new PdfWriter(outPdf))) ;\n", "        ListBoxField list = (ListBoxField) new ListBoxField(\"name\", 200, false).setInteractive(true);\n", "        list.setBackgroundColor(ColorConstants.RED);\n", "        list.addOption(\"value1\");\n", "        list.addOption(\"value2\");\n", "        document.add(new Paragraph(\"s\\no\\nm\\ne\\nl\\no\\nn\\ng\\nt\\ne\\nx\\nt\\n\"));\n", "        document.add(list);\n", "        document.close();\n", "\n", "        Assert.assertNull(new CompareTool().compareByContent(outPdf, cmpPdf, DESTINATION_FOLDER));\n", "    }\n", "\n", "    @Test\n", "    @LogMessages(messages = @LogMessage(messageTemplate = LayoutLogMessageConstant.ELEMENT_DOES_NOT_FIT_AREA, count = 1))\n", "    public void listBoxIsBiggerThanPageNonI() throws IOException, InterruptedException {\n", "        String outPdf = DESTINATION_FOLDER + \"listBoxIsBiggerThenPageNonI.pdf\";\n", "        String cmpPdf = SOURCE_FOLDER + \"cmp_listBoxIsBiggerThenPageNonI.pdf\";\n", "        Document document = new Document(new PdfDocument(new PdfWriter(outPdf))) ;\n", "        ListBoxField list = (ListBoxField) new ListBoxField(\"name\", 200, false);\n", "        list.setBackgroundColor(ColorConstants.RED);\n", "        list.addOption(\"value1\");\n", "        list.addOption(\"value2\");\n", "        document.add(new Paragraph(\"s\\no\\nm\\ne\\nl\\no\\nn\\ng\\nt\\ne\\nx\\nt\\n\"));\n", "        document.add(list);\n", "        document.close();\n", "\n", "        Assert.assertNull(new CompareTool().compareByContent(outPdf, cmpPdf, DESTINATION_FOLDER));\n", "    }\n", "\n", "    @Test\n", "    public void invalidOptionsExceptionTest() throws IOException, InterruptedException {\n", "        try (PdfDocument doc = new PdfDocument(new PdfWriter(new ByteArrayOutputStream()))) {\n", "            ChoiceFormFieldBuilder builder = new ChoiceFormFieldBuilder(doc, \"invalid\")\n", "                    .setWidgetRectangle(new Rectangle(100, 500, 100, 100));\n", "\n", "            PdfArray option1 = new PdfArray();\n", "            option1.add(new PdfString(\"English\"));\n", "            option1.add(new PdfString(\"English\"));\n", "            option1.add(new PdfString(\"English3\"));\n", "            PdfArray options = new PdfArray();\n", "            options.add(option1);\n", "            Exception e = Assert.assertThrows(IllegalArgumentException.class,  () -> builder.setOptions(options));\n", "            Assert.assertEquals(FormsExceptionMessageConstant.INNER_ARRAY_SHALL_HAVE_TWO_ELEMENTS, e.getMessage());\n", "            options.clear();\n", "\n", "            option1 = new PdfArray();\n", "            option1.add(new PdfString(\"English\"));\n", "            option1.add(new PdfNumber(1));\n", "            options.add(option1);\n", "            e = Assert.assertThrows(IllegalArgumentException.class,  () -> builder.setOptions(options));\n", "            Assert.assertEquals(FormsExceptionMessageConstant.OPTION_ELEMENT_MUST_BE_STRING_OR_ARRAY, e.getMessage());\n", "\n", "            PdfArray options2 = new PdfArray();\n", "            options2.add(new PdfNumber(1));\n", "            e = Assert.assertThrows(IllegalArgumentException.class,  () -> builder.setOptions(options2));\n", "            Assert.assertEquals(FormsExceptionMessageConstant.OPTION_ELEMENT_MUST_BE_STRING_OR_ARRAY, e.getMessage());\n", "        }\n", "    }\n", "}\n"], "method_lines_dic": {"ListBoxField::::getDefaultProperty(int)": [69, 79], "ListBoxField::::addOption(java.lang.String)": [87, 89], "ListBoxField::::addOption(java.lang.String,boolean)": [98, 104], "ListBoxField::::getSelectedStrings()": [111, 120], "ListBoxField::::getAccessibilityProperties()": [125, 132], "ListBoxField::::makeNewRenderer()": [134, 137]}, "test_method_lines_dic": {"ListBoxFieldTest::::beforeClass()": [70, 73], "ListBoxFieldTest::::emptyListBoxFieldTest()": [75, 88], "ListBoxFieldTest::::basicListBoxFieldTest()": [90, 123], "ListBoxFieldTest::::listBoxFieldWithFontSizeTest()": [125, 167], "ListBoxFieldTest::::listBoxFieldWithMarginsTest()": [169, 201], "ListBoxFieldTest::::listBoxFieldWithHeightTest()": [203, 223], "ListBoxFieldTest::::listBoxFieldWithMinHeightTest()": [225, 245], "ListBoxFieldTest::::listBoxFieldWithMaxHeightTest()": [247, 268], "ListBoxFieldTest::::listBoxFieldCannotFitTest()": [270, 291], "ListBoxFieldTest::::listBoxFieldCannotFitByWidthTest()": [293, 321], "ListBoxFieldTest::::listBoxFieldWithLangTest()": [323, 344], "ListBoxFieldTest::::colorsBordersTest()": [346, 367], "ListBoxFieldTest::::longListTest()": [369, 397], "ListBoxFieldTest::::justificationTest()": [399, 443], "ListBoxFieldTest::::exportValueTest()": [445, 465], "ListBoxFieldTest::::invalidOptionsTest()": [467, 503], "ListBoxFieldTest::::listBoxIsBiggerThanPage()": [505, 520], "ListBoxFieldTest::::listBoxIsBiggerThanPageNonI()": [522, 537], "ListBoxFieldTest::::invalidOptionsExceptionTest()": [539, 567]}, "reverse_method_lines_dic": {"69": "ListBoxField::::getDefaultProperty(int)", "70": "ListBoxField::::getDefaultProperty(int)", "71": "ListBoxField::::getDefaultProperty(int)", "72": "ListBoxField::::getDefaultProperty(int)", "73": "ListBoxField::::getDefaultProperty(int)", "74": "ListBoxField::::getDefaultProperty(int)", "75": "ListBoxField::::getDefaultProperty(int)", "76": "ListBoxField::::getDefaultProperty(int)", "77": "ListBoxField::::getDefaultProperty(int)", "78": "ListBoxField::::getDefaultProperty(int)", "79": "ListBoxField::::getDefaultProperty(int)", "87": "ListBoxField::::addOption(java.lang.String)", "88": "ListBoxField::::addOption(java.lang.String)", "89": "ListBoxField::::addOption(java.lang.String)", "98": "ListBoxField::::addOption(java.lang.String,boolean)", "99": "ListBoxField::::addOption(java.lang.String,boolean)", "100": "ListBoxField::::addOption(java.lang.String,boolean)", "101": "ListBoxField::::addOption(java.lang.String,boolean)", "102": "ListBoxField::::addOption(java.lang.String,boolean)", "103": "ListBoxField::::addOption(java.lang.String,boolean)", "104": "ListBoxField::::addOption(java.lang.String,boolean)", "111": "ListBoxField::::getSelectedStrings()", "112": "ListBoxField::::getSelectedStrings()", "113": "ListBoxField::::getSelectedStrings()", "114": "ListBoxField::::getSelectedStrings()", "115": "ListBoxField::::getSelectedStrings()", "116": "ListBoxField::::getSelectedStrings()", "117": "ListBoxField::::getSelectedStrings()", "118": "ListBoxField::::getSelectedStrings()", "119": "ListBoxField::::getSelectedStrings()", "120": "ListBoxField::::getSelectedStrings()", "125": "ListBoxField::::getAccessibilityProperties()", "126": "ListBoxField::::getAccessibilityProperties()", "127": "ListBoxField::::getAccessibilityProperties()", "128": "ListBoxField::::getAccessibilityProperties()", "129": "ListBoxField::::getAccessibilityProperties()", "130": "ListBoxField::::getAccessibilityProperties()", "131": "ListBoxField::::getAccessibilityProperties()", "132": "ListBoxField::::getAccessibilityProperties()", "134": "ListBoxField::::makeNewRenderer()", "135": "ListBoxField::::makeNewRenderer()", "136": "ListBoxField::::makeNewRenderer()", "137": "ListBoxField::::makeNewRenderer()"}, "test_reverse_method_lines_dic": {"70": "ListBoxFieldTest::::beforeClass()", "71": "ListBoxFieldTest::::beforeClass()", "72": "ListBoxFieldTest::::beforeClass()", "73": "ListBoxFieldTest::::beforeClass()", "75": "ListBoxFieldTest::::emptyListBoxFieldTest()", "76": "ListBoxFieldTest::::emptyListBoxFieldTest()", "77": "ListBoxFieldTest::::emptyListBoxFieldTest()", "78": "ListBoxFieldTest::::emptyListBoxFieldTest()", "79": "ListBoxFieldTest::::emptyListBoxFieldTest()", "80": "ListBoxFieldTest::::emptyListBoxFieldTest()", "81": "ListBoxFieldTest::::emptyListBoxFieldTest()", "82": "ListBoxFieldTest::::emptyListBoxFieldTest()", "83": "ListBoxFieldTest::::emptyListBoxFieldTest()", "84": "ListBoxFieldTest::::emptyListBoxFieldTest()", "85": "ListBoxFieldTest::::emptyListBoxFieldTest()", "86": "ListBoxFieldTest::::emptyListBoxFieldTest()", "87": "ListBoxFieldTest::::emptyListBoxFieldTest()", "88": "ListBoxFieldTest::::emptyListBoxFieldTest()", "90": "ListBoxFieldTest::::basicListBoxFieldTest()", "91": "ListBoxFieldTest::::basicListBoxFieldTest()", "92": "ListBoxFieldTest::::basicListBoxFieldTest()", "93": "ListBoxFieldTest::::basicListBoxFieldTest()", "94": "ListBoxFieldTest::::basicListBoxFieldTest()", "95": "ListBoxFieldTest::::basicListBoxFieldTest()", "96": "ListBoxFieldTest::::basicListBoxFieldTest()", "97": "ListBoxFieldTest::::basicListBoxFieldTest()", "98": "ListBoxFieldTest::::basicListBoxFieldTest()", "99": "ListBoxFieldTest::::basicListBoxFieldTest()", "100": "ListBoxFieldTest::::basicListBoxFieldTest()", "101": "ListBoxFieldTest::::basicListBoxFieldTest()", "102": "ListBoxFieldTest::::basicListBoxFieldTest()", "103": "ListBoxFieldTest::::basicListBoxFieldTest()", "104": "ListBoxFieldTest::::basicListBoxFieldTest()", "105": "ListBoxFieldTest::::basicListBoxFieldTest()", "106": "ListBoxFieldTest::::basicListBoxFieldTest()", "107": "ListBoxFieldTest::::basicListBoxFieldTest()", "108": "ListBoxFieldTest::::basicListBoxFieldTest()", "109": "ListBoxFieldTest::::basicListBoxFieldTest()", "110": "ListBoxFieldTest::::basicListBoxFieldTest()", "111": "ListBoxFieldTest::::basicListBoxFieldTest()", "112": "ListBoxFieldTest::::basicListBoxFieldTest()", "113": "ListBoxFieldTest::::basicListBoxFieldTest()", "114": "ListBoxFieldTest::::basicListBoxFieldTest()", "115": "ListBoxFieldTest::::basicListBoxFieldTest()", "116": "ListBoxFieldTest::::basicListBoxFieldTest()", "117": "ListBoxFieldTest::::basicListBoxFieldTest()", "118": "ListBoxFieldTest::::basicListBoxFieldTest()", "119": "ListBoxFieldTest::::basicListBoxFieldTest()", "120": "ListBoxFieldTest::::basicListBoxFieldTest()", "121": "ListBoxFieldTest::::basicListBoxFieldTest()", "122": "ListBoxFieldTest::::basicListBoxFieldTest()", "123": "ListBoxFieldTest::::basicListBoxFieldTest()", "125": "ListBoxFieldTest::::listBoxFieldWithFontSizeTest()", "126": "ListBoxFieldTest::::listBoxFieldWithFontSizeTest()", "127": "ListBoxFieldTest::::listBoxFieldWithFontSizeTest()", "128": "ListBoxFieldTest::::listBoxFieldWithFontSizeTest()", "129": "ListBoxFieldTest::::listBoxFieldWithFontSizeTest()", "130": "ListBoxFieldTest::::listBoxFieldWithFontSizeTest()", "131": "ListBoxFieldTest::::listBoxFieldWithFontSizeTest()", "132": "ListBoxFieldTest::::listBoxFieldWithFontSizeTest()", "133": "ListBoxFieldTest::::listBoxFieldWithFontSizeTest()", "134": "ListBoxFieldTest::::listBoxFieldWithFontSizeTest()", "135": "ListBoxFieldTest::::listBoxFieldWithFontSizeTest()", "136": "ListBoxFieldTest::::listBoxFieldWithFontSizeTest()", "137": "ListBoxFieldTest::::listBoxFieldWithFontSizeTest()", "138": "ListBoxFieldTest::::listBoxFieldWithFontSizeTest()", "139": "ListBoxFieldTest::::listBoxFieldWithFontSizeTest()", "140": "ListBoxFieldTest::::listBoxFieldWithFontSizeTest()", "141": "ListBoxFieldTest::::listBoxFieldWithFontSizeTest()", "142": "ListBoxFieldTest::::listBoxFieldWithFontSizeTest()", "143": "ListBoxFieldTest::::listBoxFieldWithFontSizeTest()", "144": "ListBoxFieldTest::::listBoxFieldWithFontSizeTest()", "145": "ListBoxFieldTest::::listBoxFieldWithFontSizeTest()", "146": "ListBoxFieldTest::::listBoxFieldWithFontSizeTest()", "147": "ListBoxFieldTest::::listBoxFieldWithFontSizeTest()", "148": "ListBoxFieldTest::::listBoxFieldWithFontSizeTest()", "149": "ListBoxFieldTest::::listBoxFieldWithFontSizeTest()", "150": "ListBoxFieldTest::::listBoxFieldWithFontSizeTest()", "151": "ListBoxFieldTest::::listBoxFieldWithFontSizeTest()", "152": "ListBoxFieldTest::::listBoxFieldWithFontSizeTest()", "153": "ListBoxFieldTest::::listBoxFieldWithFontSizeTest()", "154": "ListBoxFieldTest::::listBoxFieldWithFontSizeTest()", "155": "ListBoxFieldTest::::listBoxFieldWithFontSizeTest()", "156": "ListBoxFieldTest::::listBoxFieldWithFontSizeTest()", "157": "ListBoxFieldTest::::listBoxFieldWithFontSizeTest()", "158": "ListBoxFieldTest::::listBoxFieldWithFontSizeTest()", "159": "ListBoxFieldTest::::listBoxFieldWithFontSizeTest()", "160": "ListBoxFieldTest::::listBoxFieldWithFontSizeTest()", "161": "ListBoxFieldTest::::listBoxFieldWithFontSizeTest()", "162": "ListBoxFieldTest::::listBoxFieldWithFontSizeTest()", "163": "ListBoxFieldTest::::listBoxFieldWithFontSizeTest()", "164": "ListBoxFieldTest::::listBoxFieldWithFontSizeTest()", "165": "ListBoxFieldTest::::listBoxFieldWithFontSizeTest()", "166": "ListBoxFieldTest::::listBoxFieldWithFontSizeTest()", "167": "ListBoxFieldTest::::listBoxFieldWithFontSizeTest()", "169": "ListBoxFieldTest::::listBoxFieldWithMarginsTest()", "170": "ListBoxFieldTest::::listBoxFieldWithMarginsTest()", "171": "ListBoxFieldTest::::listBoxFieldWithMarginsTest()", "172": "ListBoxFieldTest::::listBoxFieldWithMarginsTest()", "173": "ListBoxFieldTest::::listBoxFieldWithMarginsTest()", "174": "ListBoxFieldTest::::listBoxFieldWithMarginsTest()", "175": "ListBoxFieldTest::::listBoxFieldWithMarginsTest()", "176": "ListBoxFieldTest::::listBoxFieldWithMarginsTest()", "177": "ListBoxFieldTest::::listBoxFieldWithMarginsTest()", "178": "ListBoxFieldTest::::listBoxFieldWithMarginsTest()", "179": "ListBoxFieldTest::::listBoxFieldWithMarginsTest()", "180": "ListBoxFieldTest::::listBoxFieldWithMarginsTest()", "181": "ListBoxFieldTest::::listBoxFieldWithMarginsTest()", "182": "ListBoxFieldTest::::listBoxFieldWithMarginsTest()", "183": "ListBoxFieldTest::::listBoxFieldWithMarginsTest()", "184": "ListBoxFieldTest::::listBoxFieldWithMarginsTest()", "185": "ListBoxFieldTest::::listBoxFieldWithMarginsTest()", "186": "ListBoxFieldTest::::listBoxFieldWithMarginsTest()", "187": "ListBoxFieldTest::::listBoxFieldWithMarginsTest()", "188": "ListBoxFieldTest::::listBoxFieldWithMarginsTest()", "189": "ListBoxFieldTest::::listBoxFieldWithMarginsTest()", "190": "ListBoxFieldTest::::listBoxFieldWithMarginsTest()", "191": "ListBoxFieldTest::::listBoxFieldWithMarginsTest()", "192": "ListBoxFieldTest::::listBoxFieldWithMarginsTest()", "193": "ListBoxFieldTest::::listBoxFieldWithMarginsTest()", "194": "ListBoxFieldTest::::listBoxFieldWithMarginsTest()", "195": "ListBoxFieldTest::::listBoxFieldWithMarginsTest()", "196": "ListBoxFieldTest::::listBoxFieldWithMarginsTest()", "197": "ListBoxFieldTest::::listBoxFieldWithMarginsTest()", "198": "ListBoxFieldTest::::listBoxFieldWithMarginsTest()", "199": "ListBoxFieldTest::::listBoxFieldWithMarginsTest()", "200": "ListBoxFieldTest::::listBoxFieldWithMarginsTest()", "201": "ListBoxFieldTest::::listBoxFieldWithMarginsTest()", "203": "ListBoxFieldTest::::listBoxFieldWithHeightTest()", "204": "ListBoxFieldTest::::listBoxFieldWithHeightTest()", "205": "ListBoxFieldTest::::listBoxFieldWithHeightTest()", "206": "ListBoxFieldTest::::listBoxFieldWithHeightTest()", "207": "ListBoxFieldTest::::listBoxFieldWithHeightTest()", "208": "ListBoxFieldTest::::listBoxFieldWithHeightTest()", "209": "ListBoxFieldTest::::listBoxFieldWithHeightTest()", "210": "ListBoxFieldTest::::listBoxFieldWithHeightTest()", "211": "ListBoxFieldTest::::listBoxFieldWithHeightTest()", "212": "ListBoxFieldTest::::listBoxFieldWithHeightTest()", "213": "ListBoxFieldTest::::listBoxFieldWithHeightTest()", "214": "ListBoxFieldTest::::listBoxFieldWithHeightTest()", "215": "ListBoxFieldTest::::listBoxFieldWithHeightTest()", "216": "ListBoxFieldTest::::listBoxFieldWithHeightTest()", "217": "ListBoxFieldTest::::listBoxFieldWithHeightTest()", "218": "ListBoxFieldTest::::listBoxFieldWithHeightTest()", "219": "ListBoxFieldTest::::listBoxFieldWithHeightTest()", "220": "ListBoxFieldTest::::listBoxFieldWithHeightTest()", "221": "ListBoxFieldTest::::listBoxFieldWithHeightTest()", "222": "ListBoxFieldTest::::listBoxFieldWithHeightTest()", "223": "ListBoxFieldTest::::listBoxFieldWithHeightTest()", "225": "ListBoxFieldTest::::listBoxFieldWithMinHeightTest()", "226": "ListBoxFieldTest::::listBoxFieldWithMinHeightTest()", "227": "ListBoxFieldTest::::listBoxFieldWithMinHeightTest()", "228": "ListBoxFieldTest::::listBoxFieldWithMinHeightTest()", "229": "ListBoxFieldTest::::listBoxFieldWithMinHeightTest()", "230": "ListBoxFieldTest::::listBoxFieldWithMinHeightTest()", "231": "ListBoxFieldTest::::listBoxFieldWithMinHeightTest()", "232": "ListBoxFieldTest::::listBoxFieldWithMinHeightTest()", "233": "ListBoxFieldTest::::listBoxFieldWithMinHeightTest()", "234": "ListBoxFieldTest::::listBoxFieldWithMinHeightTest()", "235": "ListBoxFieldTest::::listBoxFieldWithMinHeightTest()", "236": "ListBoxFieldTest::::listBoxFieldWithMinHeightTest()", "237": "ListBoxFieldTest::::listBoxFieldWithMinHeightTest()", "238": "ListBoxFieldTest::::listBoxFieldWithMinHeightTest()", "239": "ListBoxFieldTest::::listBoxFieldWithMinHeightTest()", "240": "ListBoxFieldTest::::listBoxFieldWithMinHeightTest()", "241": "ListBoxFieldTest::::listBoxFieldWithMinHeightTest()", "242": "ListBoxFieldTest::::listBoxFieldWithMinHeightTest()", "243": "ListBoxFieldTest::::listBoxFieldWithMinHeightTest()", "244": "ListBoxFieldTest::::listBoxFieldWithMinHeightTest()", "245": "ListBoxFieldTest::::listBoxFieldWithMinHeightTest()", "247": "ListBoxFieldTest::::listBoxFieldWithMaxHeightTest()", "248": "ListBoxFieldTest::::listBoxFieldWithMaxHeightTest()", "249": "ListBoxFieldTest::::listBoxFieldWithMaxHeightTest()", "250": "ListBoxFieldTest::::listBoxFieldWithMaxHeightTest()", "251": "ListBoxFieldTest::::listBoxFieldWithMaxHeightTest()", "252": "ListBoxFieldTest::::listBoxFieldWithMaxHeightTest()", "253": "ListBoxFieldTest::::listBoxFieldWithMaxHeightTest()", "254": "ListBoxFieldTest::::listBoxFieldWithMaxHeightTest()", "255": "ListBoxFieldTest::::listBoxFieldWithMaxHeightTest()", "256": "ListBoxFieldTest::::listBoxFieldWithMaxHeightTest()", "257": "ListBoxFieldTest::::listBoxFieldWithMaxHeightTest()", "258": "ListBoxFieldTest::::listBoxFieldWithMaxHeightTest()", "259": "ListBoxFieldTest::::listBoxFieldWithMaxHeightTest()", "260": "ListBoxFieldTest::::listBoxFieldWithMaxHeightTest()", "261": "ListBoxFieldTest::::listBoxFieldWithMaxHeightTest()", "262": "ListBoxFieldTest::::listBoxFieldWithMaxHeightTest()", "263": "ListBoxFieldTest::::listBoxFieldWithMaxHeightTest()", "264": "ListBoxFieldTest::::listBoxFieldWithMaxHeightTest()", "265": "ListBoxFieldTest::::listBoxFieldWithMaxHeightTest()", "266": "ListBoxFieldTest::::listBoxFieldWithMaxHeightTest()", "267": "ListBoxFieldTest::::listBoxFieldWithMaxHeightTest()", "268": "ListBoxFieldTest::::listBoxFieldWithMaxHeightTest()", "270": "ListBoxFieldTest::::listBoxFieldCannotFitTest()", "271": "ListBoxFieldTest::::listBoxFieldCannotFitTest()", "272": "ListBoxFieldTest::::listBoxFieldCannotFitTest()", "273": "ListBoxFieldTest::::listBoxFieldCannotFitTest()", "274": "ListBoxFieldTest::::listBoxFieldCannotFitTest()", "275": "ListBoxFieldTest::::listBoxFieldCannotFitTest()", "276": "ListBoxFieldTest::::listBoxFieldCannotFitTest()", "277": "ListBoxFieldTest::::listBoxFieldCannotFitTest()", "278": "ListBoxFieldTest::::listBoxFieldCannotFitTest()", "279": "ListBoxFieldTest::::listBoxFieldCannotFitTest()", "280": "ListBoxFieldTest::::listBoxFieldCannotFitTest()", "281": "ListBoxFieldTest::::listBoxFieldCannotFitTest()", "282": "ListBoxFieldTest::::listBoxFieldCannotFitTest()", "283": "ListBoxFieldTest::::listBoxFieldCannotFitTest()", "284": "ListBoxFieldTest::::listBoxFieldCannotFitTest()", "285": "ListBoxFieldTest::::listBoxFieldCannotFitTest()", "286": "ListBoxFieldTest::::listBoxFieldCannotFitTest()", "287": "ListBoxFieldTest::::listBoxFieldCannotFitTest()", "288": "ListBoxFieldTest::::listBoxFieldCannotFitTest()", "289": "ListBoxFieldTest::::listBoxFieldCannotFitTest()", "290": "ListBoxFieldTest::::listBoxFieldCannotFitTest()", "291": "ListBoxFieldTest::::listBoxFieldCannotFitTest()", "293": "ListBoxFieldTest::::listBoxFieldCannotFitByWidthTest()", "294": "ListBoxFieldTest::::listBoxFieldCannotFitByWidthTest()", "295": "ListBoxFieldTest::::listBoxFieldCannotFitByWidthTest()", "296": "ListBoxFieldTest::::listBoxFieldCannotFitByWidthTest()", "297": "ListBoxFieldTest::::listBoxFieldCannotFitByWidthTest()", "298": "ListBoxFieldTest::::listBoxFieldCannotFitByWidthTest()", "299": "ListBoxFieldTest::::listBoxFieldCannotFitByWidthTest()", "300": "ListBoxFieldTest::::listBoxFieldCannotFitByWidthTest()", "301": "ListBoxFieldTest::::listBoxFieldCannotFitByWidthTest()", "302": "ListBoxFieldTest::::listBoxFieldCannotFitByWidthTest()", "303": "ListBoxFieldTest::::listBoxFieldCannotFitByWidthTest()", "304": "ListBoxFieldTest::::listBoxFieldCannotFitByWidthTest()", "305": "ListBoxFieldTest::::listBoxFieldCannotFitByWidthTest()", "306": "ListBoxFieldTest::::listBoxFieldCannotFitByWidthTest()", "307": "ListBoxFieldTest::::listBoxFieldCannotFitByWidthTest()", "308": "ListBoxFieldTest::::listBoxFieldCannotFitByWidthTest()", "309": "ListBoxFieldTest::::listBoxFieldCannotFitByWidthTest()", "310": "ListBoxFieldTest::::listBoxFieldCannotFitByWidthTest()", "311": "ListBoxFieldTest::::listBoxFieldCannotFitByWidthTest()", "312": "ListBoxFieldTest::::listBoxFieldCannotFitByWidthTest()", "313": "ListBoxFieldTest::::listBoxFieldCannotFitByWidthTest()", "314": "ListBoxFieldTest::::listBoxFieldCannotFitByWidthTest()", "315": "ListBoxFieldTest::::listBoxFieldCannotFitByWidthTest()", "316": "ListBoxFieldTest::::listBoxFieldCannotFitByWidthTest()", "317": "ListBoxFieldTest::::listBoxFieldCannotFitByWidthTest()", "318": "ListBoxFieldTest::::listBoxFieldCannotFitByWidthTest()", "319": "ListBoxFieldTest::::listBoxFieldCannotFitByWidthTest()", "320": "ListBoxFieldTest::::listBoxFieldCannotFitByWidthTest()", "321": "ListBoxFieldTest::::listBoxFieldCannotFitByWidthTest()", "323": "ListBoxFieldTest::::listBoxFieldWithLangTest()", "324": "ListBoxFieldTest::::listBoxFieldWithLangTest()", "325": "ListBoxFieldTest::::listBoxFieldWithLangTest()", "326": "ListBoxFieldTest::::listBoxFieldWithLangTest()", "327": "ListBoxFieldTest::::listBoxFieldWithLangTest()", "328": "ListBoxFieldTest::::listBoxFieldWithLangTest()", "329": "ListBoxFieldTest::::listBoxFieldWithLangTest()", "330": "ListBoxFieldTest::::listBoxFieldWithLangTest()", "331": "ListBoxFieldTest::::listBoxFieldWithLangTest()", "332": "ListBoxFieldTest::::listBoxFieldWithLangTest()", "333": "ListBoxFieldTest::::listBoxFieldWithLangTest()", "334": "ListBoxFieldTest::::listBoxFieldWithLangTest()", "335": "ListBoxFieldTest::::listBoxFieldWithLangTest()", "336": "ListBoxFieldTest::::listBoxFieldWithLangTest()", "337": "ListBoxFieldTest::::listBoxFieldWithLangTest()", "338": "ListBoxFieldTest::::listBoxFieldWithLangTest()", "339": "ListBoxFieldTest::::listBoxFieldWithLangTest()", "340": "ListBoxFieldTest::::listBoxFieldWithLangTest()", "341": "ListBoxFieldTest::::listBoxFieldWithLangTest()", "342": "ListBoxFieldTest::::listBoxFieldWithLangTest()", "343": "ListBoxFieldTest::::listBoxFieldWithLangTest()", "344": "ListBoxFieldTest::::listBoxFieldWithLangTest()", "346": "ListBoxFieldTest::::colorsBordersTest()", "347": "ListBoxFieldTest::::colorsBordersTest()", "348": "ListBoxFieldTest::::colorsBordersTest()", "349": "ListBoxFieldTest::::colorsBordersTest()", "350": "ListBoxFieldTest::::colorsBordersTest()", "351": "ListBoxFieldTest::::colorsBordersTest()", "352": "ListBoxFieldTest::::colorsBordersTest()", "353": "ListBoxFieldTest::::colorsBordersTest()", "354": "ListBoxFieldTest::::colorsBordersTest()", "355": "ListBoxFieldTest::::colorsBordersTest()", "356": "ListBoxFieldTest::::colorsBordersTest()", "357": "ListBoxFieldTest::::colorsBordersTest()", "358": "ListBoxFieldTest::::colorsBordersTest()", "359": "ListBoxFieldTest::::colorsBordersTest()", "360": "ListBoxFieldTest::::colorsBordersTest()", "361": "ListBoxFieldTest::::colorsBordersTest()", "362": "ListBoxFieldTest::::colorsBordersTest()", "363": "ListBoxFieldTest::::colorsBordersTest()", "364": "ListBoxFieldTest::::colorsBordersTest()", "365": "ListBoxFieldTest::::colorsBordersTest()", "366": "ListBoxFieldTest::::colorsBordersTest()", "367": "ListBoxFieldTest::::colorsBordersTest()", "369": "ListBoxFieldTest::::longListTest()", "370": "ListBoxFieldTest::::longListTest()", "371": "ListBoxFieldTest::::longListTest()", "372": "ListBoxFieldTest::::longListTest()", "373": "ListBoxFieldTest::::longListTest()", "374": "ListBoxFieldTest::::longListTest()", "375": "ListBoxFieldTest::::longListTest()", "376": "ListBoxFieldTest::::longListTest()", "377": "ListBoxFieldTest::::longListTest()", "378": "ListBoxFieldTest::::longListTest()", "379": "ListBoxFieldTest::::longListTest()", "380": "ListBoxFieldTest::::longListTest()", "381": "ListBoxFieldTest::::longListTest()", "382": "ListBoxFieldTest::::longListTest()", "383": "ListBoxFieldTest::::longListTest()", "384": "ListBoxFieldTest::::longListTest()", "385": "ListBoxFieldTest::::longListTest()", "386": "ListBoxFieldTest::::longListTest()", "387": "ListBoxFieldTest::::longListTest()", "388": "ListBoxFieldTest::::longListTest()", "389": "ListBoxFieldTest::::longListTest()", "390": "ListBoxFieldTest::::longListTest()", "391": "ListBoxFieldTest::::longListTest()", "392": "ListBoxFieldTest::::longListTest()", "393": "ListBoxFieldTest::::longListTest()", "394": "ListBoxFieldTest::::longListTest()", "395": "ListBoxFieldTest::::longListTest()", "396": "ListBoxFieldTest::::longListTest()", "397": "ListBoxFieldTest::::longListTest()", "399": "ListBoxFieldTest::::justificationTest()", "400": "ListBoxFieldTest::::justificationTest()", "401": "ListBoxFieldTest::::justificationTest()", "402": "ListBoxFieldTest::::justificationTest()", "403": "ListBoxFieldTest::::justificationTest()", "404": "ListBoxFieldTest::::justificationTest()", "405": "ListBoxFieldTest::::justificationTest()", "406": "ListBoxFieldTest::::justificationTest()", "407": "ListBoxFieldTest::::justificationTest()", "408": "ListBoxFieldTest::::justificationTest()", "409": "ListBoxFieldTest::::justificationTest()", "410": "ListBoxFieldTest::::justificationTest()", "411": "ListBoxFieldTest::::justificationTest()", "412": "ListBoxFieldTest::::justificationTest()", "413": "ListBoxFieldTest::::justificationTest()", "414": "ListBoxFieldTest::::justificationTest()", "415": "ListBoxFieldTest::::justificationTest()", "416": "ListBoxFieldTest::::justificationTest()", "417": "ListBoxFieldTest::::justificationTest()", "418": "ListBoxFieldTest::::justificationTest()", "419": "ListBoxFieldTest::::justificationTest()", "420": "ListBoxFieldTest::::justificationTest()", "421": "ListBoxFieldTest::::justificationTest()", "422": "ListBoxFieldTest::::justificationTest()", "423": "ListBoxFieldTest::::justificationTest()", "424": "ListBoxFieldTest::::justificationTest()", "425": "ListBoxFieldTest::::justificationTest()", "426": "ListBoxFieldTest::::justificationTest()", "427": "ListBoxFieldTest::::justificationTest()", "428": "ListBoxFieldTest::::justificationTest()", "429": "ListBoxFieldTest::::justificationTest()", "430": "ListBoxFieldTest::::justificationTest()", "431": "ListBoxFieldTest::::justificationTest()", "432": "ListBoxFieldTest::::justificationTest()", "433": "ListBoxFieldTest::::justificationTest()", "434": "ListBoxFieldTest::::justificationTest()", "435": "ListBoxFieldTest::::justificationTest()", "436": "ListBoxFieldTest::::justificationTest()", "437": "ListBoxFieldTest::::justificationTest()", "438": "ListBoxFieldTest::::justificationTest()", "439": "ListBoxFieldTest::::justificationTest()", "440": "ListBoxFieldTest::::justificationTest()", "441": "ListBoxFieldTest::::justificationTest()", "442": "ListBoxFieldTest::::justificationTest()", "443": "ListBoxFieldTest::::justificationTest()", "445": "ListBoxFieldTest::::exportValueTest()", "446": "ListBoxFieldTest::::exportValueTest()", "447": "ListBoxFieldTest::::exportValueTest()", "448": "ListBoxFieldTest::::exportValueTest()", "449": "ListBoxFieldTest::::exportValueTest()", "450": "ListBoxFieldTest::::exportValueTest()", "451": "ListBoxFieldTest::::exportValueTest()", "452": "ListBoxFieldTest::::exportValueTest()", "453": "ListBoxFieldTest::::exportValueTest()", "454": "ListBoxFieldTest::::exportValueTest()", "455": "ListBoxFieldTest::::exportValueTest()", "456": "ListBoxFieldTest::::exportValueTest()", "457": "ListBoxFieldTest::::exportValueTest()", "458": "ListBoxFieldTest::::exportValueTest()", "459": "ListBoxFieldTest::::exportValueTest()", "460": "ListBoxFieldTest::::exportValueTest()", "461": "ListBoxFieldTest::::exportValueTest()", "462": "ListBoxFieldTest::::exportValueTest()", "463": "ListBoxFieldTest::::exportValueTest()", "464": "ListBoxFieldTest::::exportValueTest()", "465": "ListBoxFieldTest::::exportValueTest()", "467": "ListBoxFieldTest::::invalidOptionsTest()", "468": "ListBoxFieldTest::::invalidOptionsTest()", "469": "ListBoxFieldTest::::invalidOptionsTest()", "470": "ListBoxFieldTest::::invalidOptionsTest()", "471": "ListBoxFieldTest::::invalidOptionsTest()", "472": "ListBoxFieldTest::::invalidOptionsTest()", "473": "ListBoxFieldTest::::invalidOptionsTest()", "474": "ListBoxFieldTest::::invalidOptionsTest()", "475": "ListBoxFieldTest::::invalidOptionsTest()", "476": "ListBoxFieldTest::::invalidOptionsTest()", "477": "ListBoxFieldTest::::invalidOptionsTest()", "478": "ListBoxFieldTest::::invalidOptionsTest()", "479": "ListBoxFieldTest::::invalidOptionsTest()", "480": "ListBoxFieldTest::::invalidOptionsTest()", "481": "ListBoxFieldTest::::invalidOptionsTest()", "482": "ListBoxFieldTest::::invalidOptionsTest()", "483": "ListBoxFieldTest::::invalidOptionsTest()", "484": "ListBoxFieldTest::::invalidOptionsTest()", "485": "ListBoxFieldTest::::invalidOptionsTest()", "486": "ListBoxFieldTest::::invalidOptionsTest()", "487": "ListBoxFieldTest::::invalidOptionsTest()", "488": "ListBoxFieldTest::::invalidOptionsTest()", "489": "ListBoxFieldTest::::invalidOptionsTest()", "490": "ListBoxFieldTest::::invalidOptionsTest()", "491": "ListBoxFieldTest::::invalidOptionsTest()", "492": "ListBoxFieldTest::::invalidOptionsTest()", "493": "ListBoxFieldTest::::invalidOptionsTest()", "494": "ListBoxFieldTest::::invalidOptionsTest()", "495": "ListBoxFieldTest::::invalidOptionsTest()", "496": "ListBoxFieldTest::::invalidOptionsTest()", "497": "ListBoxFieldTest::::invalidOptionsTest()", "498": "ListBoxFieldTest::::invalidOptionsTest()", "499": "ListBoxFieldTest::::invalidOptionsTest()", "500": "ListBoxFieldTest::::invalidOptionsTest()", "501": "ListBoxFieldTest::::invalidOptionsTest()", "502": "ListBoxFieldTest::::invalidOptionsTest()", "503": "ListBoxFieldTest::::invalidOptionsTest()", "505": "ListBoxFieldTest::::listBoxIsBiggerThanPage()", "506": "ListBoxFieldTest::::listBoxIsBiggerThanPage()", "507": "ListBoxFieldTest::::listBoxIsBiggerThanPage()", "508": "ListBoxFieldTest::::listBoxIsBiggerThanPage()", "509": "ListBoxFieldTest::::listBoxIsBiggerThanPage()", "510": "ListBoxFieldTest::::listBoxIsBiggerThanPage()", "511": "ListBoxFieldTest::::listBoxIsBiggerThanPage()", "512": "ListBoxFieldTest::::listBoxIsBiggerThanPage()", "513": "ListBoxFieldTest::::listBoxIsBiggerThanPage()", "514": "ListBoxFieldTest::::listBoxIsBiggerThanPage()", "515": "ListBoxFieldTest::::listBoxIsBiggerThanPage()", "516": "ListBoxFieldTest::::listBoxIsBiggerThanPage()", "517": "ListBoxFieldTest::::listBoxIsBiggerThanPage()", "518": "ListBoxFieldTest::::listBoxIsBiggerThanPage()", "519": "ListBoxFieldTest::::listBoxIsBiggerThanPage()", "520": "ListBoxFieldTest::::listBoxIsBiggerThanPage()", "522": "ListBoxFieldTest::::listBoxIsBiggerThanPageNonI()", "523": "ListBoxFieldTest::::listBoxIsBiggerThanPageNonI()", "524": "ListBoxFieldTest::::listBoxIsBiggerThanPageNonI()", "525": "ListBoxFieldTest::::listBoxIsBiggerThanPageNonI()", "526": "ListBoxFieldTest::::listBoxIsBiggerThanPageNonI()", "527": "ListBoxFieldTest::::listBoxIsBiggerThanPageNonI()", "528": "ListBoxFieldTest::::listBoxIsBiggerThanPageNonI()", "529": "ListBoxFieldTest::::listBoxIsBiggerThanPageNonI()", "530": "ListBoxFieldTest::::listBoxIsBiggerThanPageNonI()", "531": "ListBoxFieldTest::::listBoxIsBiggerThanPageNonI()", "532": "ListBoxFieldTest::::listBoxIsBiggerThanPageNonI()", "533": "ListBoxFieldTest::::listBoxIsBiggerThanPageNonI()", "534": "ListBoxFieldTest::::listBoxIsBiggerThanPageNonI()", "535": "ListBoxFieldTest::::listBoxIsBiggerThanPageNonI()", "536": "ListBoxFieldTest::::listBoxIsBiggerThanPageNonI()", "537": "ListBoxFieldTest::::listBoxIsBiggerThanPageNonI()", "539": "ListBoxFieldTest::::invalidOptionsExceptionTest()", "540": "ListBoxFieldTest::::invalidOptionsExceptionTest()", "541": "ListBoxFieldTest::::invalidOptionsExceptionTest()", "542": "ListBoxFieldTest::::invalidOptionsExceptionTest()", "543": "ListBoxFieldTest::::invalidOptionsExceptionTest()", "544": "ListBoxFieldTest::::invalidOptionsExceptionTest()", "545": "ListBoxFieldTest::::invalidOptionsExceptionTest()", "546": "ListBoxFieldTest::::invalidOptionsExceptionTest()", "547": "ListBoxFieldTest::::invalidOptionsExceptionTest()", "548": "ListBoxFieldTest::::invalidOptionsExceptionTest()", "549": "ListBoxFieldTest::::invalidOptionsExceptionTest()", "550": "ListBoxFieldTest::::invalidOptionsExceptionTest()", "551": "ListBoxFieldTest::::invalidOptionsExceptionTest()", "552": "ListBoxFieldTest::::invalidOptionsExceptionTest()", "553": "ListBoxFieldTest::::invalidOptionsExceptionTest()", "554": "ListBoxFieldTest::::invalidOptionsExceptionTest()", "555": "ListBoxFieldTest::::invalidOptionsExceptionTest()", "556": "ListBoxFieldTest::::invalidOptionsExceptionTest()", "557": "ListBoxFieldTest::::invalidOptionsExceptionTest()", "558": "ListBoxFieldTest::::invalidOptionsExceptionTest()", "559": "ListBoxFieldTest::::invalidOptionsExceptionTest()", "560": "ListBoxFieldTest::::invalidOptionsExceptionTest()", "561": "ListBoxFieldTest::::invalidOptionsExceptionTest()", "562": "ListBoxFieldTest::::invalidOptionsExceptionTest()", "563": "ListBoxFieldTest::::invalidOptionsExceptionTest()", "564": "ListBoxFieldTest::::invalidOptionsExceptionTest()", "565": "ListBoxFieldTest::::invalidOptionsExceptionTest()", "566": "ListBoxFieldTest::::invalidOptionsExceptionTest()", "567": "ListBoxFieldTest::::invalidOptionsExceptionTest()"}, "tests": [{"test_lines": [75, 88], "covered_lines": [53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 71, 77, 127, 128, 131, 136]}, {"test_lines": [90, 123], "covered_lines": [53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 71, 77, 99, 100, 101, 103, 112, 113, 114, 115, 117, 119, 127, 128, 131, 136]}, {"test_lines": [125, 167], "covered_lines": [53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 71, 77, 88, 99, 100, 101, 103, 112, 113, 114, 117, 119, 127, 128, 131, 136]}, {"test_lines": [169, 201], "covered_lines": [53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 71, 77, 112, 113, 114, 115, 117, 119, 127, 128, 131, 136]}, {"test_lines": [203, 223], "covered_lines": [53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 71, 77, 88, 99, 100, 101, 103, 112, 113, 114, 115, 117, 119, 127, 128, 131, 136]}, {"test_lines": [225, 245], "covered_lines": [53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 71, 77, 88, 99, 100, 101, 103, 112, 113, 114, 115, 117, 119, 127, 128, 131, 136]}, {"test_lines": [247, 268], "covered_lines": [53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 71, 77, 99, 100, 101, 103, 112, 113, 114, 115, 117, 119, 127, 128, 131, 136]}, {"test_lines": [270, 291], "covered_lines": [53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 71, 77, 88, 99, 100, 101, 103, 112, 113, 114, 115, 117, 119, 127, 128, 131, 136]}, {"test_lines": [293, 321], "covered_lines": [53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 71, 77, 112, 113, 114, 115, 117, 119, 127, 128, 131, 136]}, {"test_lines": [323, 344], "covered_lines": [53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 71, 77, 88, 99, 100, 101, 103, 112, 113, 114, 117, 119, 127, 128, 131, 136]}, {"test_lines": [346, 367], "covered_lines": [53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 71, 77, 88, 99, 100, 101, 103, 112, 113, 114, 115, 117, 119, 127, 128, 131, 136]}, {"test_lines": [369, 397], "covered_lines": [53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 71, 77, 88, 99, 100, 101, 103, 112, 113, 114, 115, 117, 119, 127, 128, 131, 136]}, {"test_lines": [399, 443], "covered_lines": [53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 71, 77, 88, 99, 100, 101, 103, 112, 113, 114, 115, 117, 119, 127, 128, 131, 136]}, {"test_lines": [445, 465], "covered_lines": [53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 71, 77, 112, 113, 114, 115, 117, 119, 127, 128, 131, 136]}, {"test_lines": [467, 503], "covered_lines": [53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 71, 77, 127, 128, 131, 136]}, {"test_lines": [505, 520], "covered_lines": [53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 71, 77, 88, 99, 100, 101, 103, 112, 113, 114, 117, 119, 127, 128, 131, 136]}, {"test_lines": [522, 537], "covered_lines": [53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 71, 77, 88, 99, 100, 101, 103, 127, 128, 131, 136]}]}, "/bernard/dataset_construction/prep/repos/itext-java/forms/src/main/java/com/itextpdf/forms/form/element/SelectFieldItem.java": {"class_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.forms.form.element;\n", "\n", "import com.itextpdf.commons.utils.MessageFormatUtil;\n", "import com.itextpdf.forms.exceptions.FormsExceptionMessageConstant;\n", "import com.itextpdf.forms.form.FormProperty;\n", "import com.itextpdf.kernel.exceptions.PdfException;\n", "import com.itextpdf.layout.element.IBlockElement;\n", "import com.itextpdf.layout.element.Paragraph;\n", "\n", "/**\n", " * A field that represents a control for selecting one of the provided options.\n", " * It is used in the {@link ComboBoxField} class.\n", " */\n", "public class SelectFieldItem {\n", "    /**\n", "     * The export value of the item.\n", "     * this is the value of the form which will be submitted. If the display value is not set, the export value will be\n", "     * used as display value.\n", "     */\n", "    private final String exportValue;\n", "    /**\n", "     * The display value of the item.\n", "     * This is the value which will be displayed in the dropdown.\n", "     */\n", "    private final String displayValue;\n", "\n", "    /**\n", "     * The option element of the item.\n", "     * This is the element which will be displayed in the dropdown.\n", "     * It allows for customization\n", "     */\n", "    private final IBlockElement optionElement;\n", "\n", "\n", "    /**\n", "     * Create a new {@link SelectFieldItem}.\n", "     *\n", "     * @param exportValue  the export value of the item.\n", "     * @param displayValue the display value of the item.\n", "     */\n", "    public SelectFieldItem(String exportValue, String displayValue) {\n", "        this(exportValue, displayValue, new Paragraph(displayValue).setMargin(0).setMultipliedLeading(1));\n", "    }\n", "\n", "    /**\n", "     * Create a new {@link SelectFieldItem}.\n", "     *\n", "     * @param value the export value of the item.\n", "     */\n", "    public SelectFieldItem(String value) {\n", "        this(value, null, new Paragraph(value).setMargin(0).setMultipliedLeading(1));\n", "    }\n", "\n", "    /**\n", "     * Create a new {@link SelectFieldItem}.\n", "     *\n", "     * @param value         the export value of the item.\n", "     * @param optionElement the option element of the item.\n", "     */\n", "    public SelectFieldItem(String value, IBlockElement optionElement) {\n", "        this(value, null, optionElement);\n", "    }\n", "\n", "    /**\n", "     * Create a new {@link SelectFieldItem}.\n", "     *\n", "     * @param exportValue   the export value of the item.\n", "     * @param displayValue  the display value of the item.\n", "     * @param optionElement the option element of the item.\n", "     */\n", "    public SelectFieldItem(String exportValue, String displayValue, IBlockElement optionElement) {\n", "        if (exportValue == null) {\n", "            throw new PdfException(\n", "                    MessageFormatUtil.format(FormsExceptionMessageConstant.VALUE_SHALL_NOT_BE_NULL, \"exportValue\"));\n", "        }\n", "        this.exportValue = exportValue;\n", "        this.displayValue = displayValue;\n", "        if (optionElement == null) {\n", "            throw new PdfException(FormsExceptionMessageConstant.OPTION_ELEMENT_SHALL_NOT_BE_NULL);\n", "        }\n", "        this.optionElement = optionElement;\n", "        setLabel();\n", "    }\n", "\n", "    /**\n", "     * Get the export value of the item.\n", "     *\n", "     * @return export value.\n", "     */\n", "    public String getExportValue() {\n", "        return exportValue;\n", "    }\n", "\n", "    /**\n", "     * Get the display value of the item.\n", "     * If the display value is not set, the export value will be used as display value.\n", "     *\n", "     * @return display value.\n", "     */\n", "    public String getDisplayValue() {\n", "        if (displayValue != null) {\n", "            return displayValue;\n", "        }\n", "        return exportValue;\n", "    }\n", "\n", "    /**\n", "     * Get the option element of the item.\n", "     *\n", "     * <p>\n", "     * This is the element which will be displayed in the dropdown.\n", "     * It allows for customization.\n", "     *\n", "     * @return option element.\n", "     */\n", "    public IBlockElement getElement() {\n", "        return optionElement;\n", "    }\n", "\n", "    /**\n", "     * Check if the item has a display value. and export value.\n", "     *\n", "     * @return {@code true} if the item has both export and display values, {@code false} otherwise.\n", "     */\n", "    public boolean hasExportAndDisplayValues() {\n", "        return exportValue != null && displayValue != null;\n", "    }\n", "\n", "    private void setLabel() {\n", "        optionElement.setProperty(FormProperty.FORM_FIELD_LABEL, getDisplayValue());\n", "    }\n", "}\n"], "test_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.forms.form.element;\n", "\n", "import com.itextpdf.kernel.exceptions.PdfException;\n", "import com.itextpdf.layout.element.Paragraph;\n", "import com.itextpdf.test.ExtendedITextTest;\n", "import com.itextpdf.test.ITextTest;\n", "import com.itextpdf.test.annotations.type.UnitTest;\n", "\n", "import org.junit.Assert;\n", "import org.junit.Test;\n", "import org.junit.experimental.categories.Category;\n", "\n", "@Category(UnitTest.class)\n", "public class SelectFieldItemTest extends ExtendedITextTest {\n", "\n", "    @Test\n", "    public void newSelectFieldItem2ParamConstructorTest() {\n", "        SelectFieldItem item = new SelectFieldItem(\"exportValue\", \"displayValue\");\n", "        Assert.assertEquals(\"exportValue\", item.getExportValue());\n", "        Assert.assertEquals(\"displayValue\", item.getDisplayValue());\n", "    }\n", "\n", "    @Test\n", "    public void newSelectFieldItem1ParamConstructorTest() {\n", "        SelectFieldItem item = new SelectFieldItem(\"exportValue\");\n", "        Assert.assertEquals(\"exportValue\", item.getExportValue());\n", "        Assert.assertEquals(\"exportValue\", item.getDisplayValue());\n", "    }\n", "\n", "    @Test\n", "    public void newSelectFieldItem3ParamConstructorTest1() {\n", "        SelectFieldItem item = new SelectFieldItem(\"exportValue\", \"displayValue\", new Paragraph(\"displayValue\"));\n", "        Assert.assertEquals(\"exportValue\", item.getExportValue());\n", "        Assert.assertEquals(\"displayValue\", item.getDisplayValue());\n", "        Assert.assertTrue(item.getElement() instanceof Paragraph);\n", "    }\n", "\n", "\n", "    @Test\n", "    public void newSelectFieldItem3ParamConstructorTest2() {\n", "        Assert.assertThrows(PdfException.class, () -> {\n", "            new SelectFieldItem(\"exportValue\", \"displayValue\", null);\n", "        });\n", "    }\n", "\n", "    @Test\n", "    public void newSelectFieldItem3ParamConstructorTest3() {\n", "        Assert.assertThrows(PdfException.class, () -> {\n", "            new SelectFieldItem(null, \"displayValue\", new Paragraph(\"displayValue\"));\n", "        });\n", "    }\n", "\n", "    @Test\n", "    public void hasExportAndDisplayValuesTest01() {\n", "        SelectFieldItem item = new SelectFieldItem(\"exportValue\", \"displayValue\");\n", "        Assert.assertTrue(item.hasExportAndDisplayValues());\n", "    }\n", "\n", "    @Test\n", "    public void hasExportAndDisplayValuesTest02() {\n", "        SelectFieldItem item = new SelectFieldItem(\"exportValue\");\n", "        Assert.assertFalse(item.hasExportAndDisplayValues());\n", "    }\n", "\n", "    @Test\n", "    public void hasExportAndDisplayValuesTest03() {\n", "        SelectFieldItem item = new SelectFieldItem(\"exportValue\", new Paragraph(\"displayValue\"));\n", "        Assert.assertFalse(item.hasExportAndDisplayValues());\n", "    }\n", "\n", "    @Test\n", "    public void hasExportAndDisplayValuesTest04() {\n", "        SelectFieldItem item = new SelectFieldItem(\"exportValue\", null, new Paragraph(\"displayValue\"));\n", "        Assert.assertFalse(item.hasExportAndDisplayValues());\n", "    }\n", "\n", "    @Test\n", "    public void hasExportAndDisplayValuesTest05() {\n", "        SelectFieldItem item = new SelectFieldItem(\"exportValue\", \"displayValue\", new Paragraph(\"displayValue\"));\n", "        Assert.assertTrue(item.hasExportAndDisplayValues());\n", "    }\n", "}\n"], "method_lines_dic": {"SelectFieldItem::::getExportValue()": [112, 114], "SelectFieldItem::::getDisplayValue()": [122, 127], "SelectFieldItem::::getElement()": [138, 140], "SelectFieldItem::::hasExportAndDisplayValues()": [147, 149], "SelectFieldItem::::setLabel()": [151, 153]}, "test_method_lines_dic": {"SelectFieldItemTest::::newSelectFieldItem2ParamConstructorTest()": [38, 43], "SelectFieldItemTest::::newSelectFieldItem1ParamConstructorTest()": [45, 50], "SelectFieldItemTest::::newSelectFieldItem3ParamConstructorTest1()": [52, 58], "SelectFieldItemTest::::newSelectFieldItem3ParamConstructorTest2()": [61, 66], "SelectFieldItemTest::::newSelectFieldItem3ParamConstructorTest3()": [68, 73], "SelectFieldItemTest::::hasExportAndDisplayValuesTest01()": [75, 79], "SelectFieldItemTest::::hasExportAndDisplayValuesTest02()": [81, 85], "SelectFieldItemTest::::hasExportAndDisplayValuesTest03()": [87, 91], "SelectFieldItemTest::::hasExportAndDisplayValuesTest04()": [93, 97], "SelectFieldItemTest::::hasExportAndDisplayValuesTest05()": [99, 103]}, "reverse_method_lines_dic": {"112": "SelectFieldItem::::getExportValue()", "113": "SelectFieldItem::::getExportValue()", "114": "SelectFieldItem::::getExportValue()", "122": "SelectFieldItem::::getDisplayValue()", "123": "SelectFieldItem::::getDisplayValue()", "124": "SelectFieldItem::::getDisplayValue()", "125": "SelectFieldItem::::getDisplayValue()", "126": "SelectFieldItem::::getDisplayValue()", "127": "SelectFieldItem::::getDisplayValue()", "138": "SelectFieldItem::::getElement()", "139": "SelectFieldItem::::getElement()", "140": "SelectFieldItem::::getElement()", "147": "SelectFieldItem::::hasExportAndDisplayValues()", "148": "SelectFieldItem::::hasExportAndDisplayValues()", "149": "SelectFieldItem::::hasExportAndDisplayValues()", "151": "SelectFieldItem::::setLabel()", "152": "SelectFieldItem::::setLabel()", "153": "SelectFieldItem::::setLabel()"}, "test_reverse_method_lines_dic": {"38": "SelectFieldItemTest::::newSelectFieldItem2ParamConstructorTest()", "39": "SelectFieldItemTest::::newSelectFieldItem2ParamConstructorTest()", "40": "SelectFieldItemTest::::newSelectFieldItem2ParamConstructorTest()", "41": "SelectFieldItemTest::::newSelectFieldItem2ParamConstructorTest()", "42": "SelectFieldItemTest::::newSelectFieldItem2ParamConstructorTest()", "43": "SelectFieldItemTest::::newSelectFieldItem2ParamConstructorTest()", "45": "SelectFieldItemTest::::newSelectFieldItem1ParamConstructorTest()", "46": "SelectFieldItemTest::::newSelectFieldItem1ParamConstructorTest()", "47": "SelectFieldItemTest::::newSelectFieldItem1ParamConstructorTest()", "48": "SelectFieldItemTest::::newSelectFieldItem1ParamConstructorTest()", "49": "SelectFieldItemTest::::newSelectFieldItem1ParamConstructorTest()", "50": "SelectFieldItemTest::::newSelectFieldItem1ParamConstructorTest()", "52": "SelectFieldItemTest::::newSelectFieldItem3ParamConstructorTest1()", "53": "SelectFieldItemTest::::newSelectFieldItem3ParamConstructorTest1()", "54": "SelectFieldItemTest::::newSelectFieldItem3ParamConstructorTest1()", "55": "SelectFieldItemTest::::newSelectFieldItem3ParamConstructorTest1()", "56": "SelectFieldItemTest::::newSelectFieldItem3ParamConstructorTest1()", "57": "SelectFieldItemTest::::newSelectFieldItem3ParamConstructorTest1()", "58": "SelectFieldItemTest::::newSelectFieldItem3ParamConstructorTest1()", "61": "SelectFieldItemTest::::newSelectFieldItem3ParamConstructorTest2()", "62": "SelectFieldItemTest::::newSelectFieldItem3ParamConstructorTest2()", "63": "SelectFieldItemTest::::newSelectFieldItem3ParamConstructorTest2()", "64": "SelectFieldItemTest::::newSelectFieldItem3ParamConstructorTest2()", "65": "SelectFieldItemTest::::newSelectFieldItem3ParamConstructorTest2()", "66": "SelectFieldItemTest::::newSelectFieldItem3ParamConstructorTest2()", "68": "SelectFieldItemTest::::newSelectFieldItem3ParamConstructorTest3()", "69": "SelectFieldItemTest::::newSelectFieldItem3ParamConstructorTest3()", "70": "SelectFieldItemTest::::newSelectFieldItem3ParamConstructorTest3()", "71": "SelectFieldItemTest::::newSelectFieldItem3ParamConstructorTest3()", "72": "SelectFieldItemTest::::newSelectFieldItem3ParamConstructorTest3()", "73": "SelectFieldItemTest::::newSelectFieldItem3ParamConstructorTest3()", "75": "SelectFieldItemTest::::hasExportAndDisplayValuesTest01()", "76": "SelectFieldItemTest::::hasExportAndDisplayValuesTest01()", "77": "SelectFieldItemTest::::hasExportAndDisplayValuesTest01()", "78": "SelectFieldItemTest::::hasExportAndDisplayValuesTest01()", "79": "SelectFieldItemTest::::hasExportAndDisplayValuesTest01()", "81": "SelectFieldItemTest::::hasExportAndDisplayValuesTest02()", "82": "SelectFieldItemTest::::hasExportAndDisplayValuesTest02()", "83": "SelectFieldItemTest::::hasExportAndDisplayValuesTest02()", "84": "SelectFieldItemTest::::hasExportAndDisplayValuesTest02()", "85": "SelectFieldItemTest::::hasExportAndDisplayValuesTest02()", "87": "SelectFieldItemTest::::hasExportAndDisplayValuesTest03()", "88": "SelectFieldItemTest::::hasExportAndDisplayValuesTest03()", "89": "SelectFieldItemTest::::hasExportAndDisplayValuesTest03()", "90": "SelectFieldItemTest::::hasExportAndDisplayValuesTest03()", "91": "SelectFieldItemTest::::hasExportAndDisplayValuesTest03()", "93": "SelectFieldItemTest::::hasExportAndDisplayValuesTest04()", "94": "SelectFieldItemTest::::hasExportAndDisplayValuesTest04()", "95": "SelectFieldItemTest::::hasExportAndDisplayValuesTest04()", "96": "SelectFieldItemTest::::hasExportAndDisplayValuesTest04()", "97": "SelectFieldItemTest::::hasExportAndDisplayValuesTest04()", "99": "SelectFieldItemTest::::hasExportAndDisplayValuesTest05()", "100": "SelectFieldItemTest::::hasExportAndDisplayValuesTest05()", "101": "SelectFieldItemTest::::hasExportAndDisplayValuesTest05()", "102": "SelectFieldItemTest::::hasExportAndDisplayValuesTest05()", "103": "SelectFieldItemTest::::hasExportAndDisplayValuesTest05()"}, "tests": [{"test_lines": [38, 43], "covered_lines": [64, 65, 93, 94, 98, 99, 100, 103, 104, 105, 113, 123, 124, 152, 153]}, {"test_lines": [45, 50], "covered_lines": [73, 74, 93, 94, 98, 99, 100, 103, 104, 105, 113, 123, 126, 152, 153]}, {"test_lines": [52, 58], "covered_lines": [93, 94, 98, 99, 100, 103, 104, 105, 113, 123, 124, 139, 152, 153]}, {"test_lines": [61, 66], "covered_lines": [93, 94, 98, 99, 100, 101]}, {"test_lines": [68, 73], "covered_lines": [93, 94, 95, 96]}, {"test_lines": [75, 79], "covered_lines": [64, 65, 93, 94, 98, 99, 100, 103, 104, 105, 123, 124, 148, 152, 153]}, {"test_lines": [81, 85], "covered_lines": [73, 74, 93, 94, 98, 99, 100, 103, 104, 105, 123, 126, 148, 152, 153]}, {"test_lines": [87, 91], "covered_lines": [83, 84, 93, 94, 98, 99, 100, 103, 104, 105, 123, 126, 148, 152, 153]}, {"test_lines": [93, 97], "covered_lines": [93, 94, 98, 99, 100, 103, 104, 105, 123, 126, 148, 152, 153]}, {"test_lines": [99, 103], "covered_lines": [93, 94, 98, 99, 100, 103, 104, 105, 123, 124, 148, 152, 153]}]}, "/bernard/dataset_construction/prep/repos/itext-java/forms/src/main/java/com/itextpdf/forms/form/element/Button.java": {"class_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.forms.form.element;\n", "\n", "import com.itextpdf.forms.FormDefaultAccessibilityProperties;\n", "import com.itextpdf.forms.form.renderer.ButtonRenderer;\n", "import com.itextpdf.kernel.colors.Color;\n", "import com.itextpdf.kernel.colors.ColorConstants;\n", "import com.itextpdf.kernel.pdf.tagutils.AccessibilityProperties;\n", "import com.itextpdf.layout.element.BlockElement;\n", "import com.itextpdf.layout.element.IBlockElement;\n", "import com.itextpdf.layout.element.Image;\n", "import com.itextpdf.layout.element.Paragraph;\n", "import com.itextpdf.layout.properties.BoxSizingPropertyValue;\n", "import com.itextpdf.layout.properties.Property;\n", "import com.itextpdf.layout.properties.TextAlignment;\n", "import com.itextpdf.layout.properties.UnitValue;\n", "import com.itextpdf.layout.properties.VerticalAlignment;\n", "import com.itextpdf.layout.renderer.IRenderer;\n", "\n", "/**\n", " * Extension of the {@link FormField} class representing a button in html.\n", " */\n", "public class Button extends FormField<Button> {\n", "    private static final VerticalAlignment DEFAULT_VERTICAL_ALIGNMENT = VerticalAlignment.MIDDLE;\n", "    private static final TextAlignment DEFAULT_TEXT_ALIGNMENT = TextAlignment.CENTER;\n", "    private static final Color DEFAULT_BACKGROUND_COLOR = ColorConstants.LIGHT_GRAY;\n", "\n", "    /**\n", "     * Indicates if it's the button with only single line caption.\n", "     */\n", "    private boolean singleLine = false;\n", "\n", "    /**\n", "     * Creates a new {@link Button} instance.\n", "     *\n", "     * @param id the id\n", "     */\n", "    public Button(String id) {\n", "        super(id);\n", "        setTextAlignment(DEFAULT_TEXT_ALIGNMENT);\n", "        setBackgroundColor(DEFAULT_BACKGROUND_COLOR);\n", "        // Draw the borders inside the element by default\n", "        setProperty(Property.BOX_SIZING, BoxSizingPropertyValue.BORDER_BOX);\n", "    }\n", "\n", "    /**\n", "     * Adds any block element to the div's contents.\n", "     *\n", "     * @param element a {@link BlockElement}\n", "     * @return this Element\n", "     */\n", "    public Button add(IBlockElement element) {\n", "        singleLine = false;\n", "        childElements.add(element);\n", "        return this;\n", "    }\n", "\n", "    /**\n", "     * Adds an image to the div's contents.\n", "     *\n", "     * @param element an {@link Image}\n", "     * @return this Element\n", "     */\n", "    public Button add(Image element) {\n", "        singleLine = false;\n", "        childElements.add(element);\n", "        return this;\n", "    }\n", "\n", "    /**\n", "     * Indicates if this element represents an input with type button in html.\n", "     *\n", "     * @return true if it's the button with only one line caption.\n", "     */\n", "    public boolean isSingleLine() {\n", "        return singleLine;\n", "    }\n", "\n", "    /**\n", "     * Sets passed string value to the single line button caption.\n", "     * Value will be clipped if it is not fit into single line. For multiple line value\n", "     * use {@link Button#setValue(String)}. Note that when adding other elements to the button\n", "     * after this method is called, this added value can be multiline.\n", "     *\n", "     * @param value string value to be set as caption.\n", "     *\n", "     * @return this same {@link Button} instance.\n", "     */\n", "    public Button setSingleLineValue(String value) {\n", "        setValue(value);\n", "        setProperty(Property.KEEP_TOGETHER, Boolean.FALSE);\n", "        singleLine = true;\n", "        return this;\n", "    }\n", "\n", "    /**\n", "     * Adds passed string value as paragraph to the button.\n", "     * Value can be multiline if it is not fit into single line. For single line value\n", "     * use {@link Button#setSingleLineValue(String)}. Note that the new value will replace all already added elements.\n", "     *\n", "     * @param value string value to be added into button.\n", "     *\n", "     * @return {@inheritDoc}\n", "     */\n", "    @Override\n", "    public IFormField setValue(String value) {\n", "        childElements.clear();\n", "        Paragraph paragraph = new Paragraph(value)\n", "                .setMargin(0)\n", "                .setMultipliedLeading(1)\n", "                .setVerticalAlignment(DEFAULT_VERTICAL_ALIGNMENT)\n", "                .setTextAlignment(DEFAULT_TEXT_ALIGNMENT);\n", "\n", "        if (this.<Object>getProperty(Property.FONT) != null) {\n", "            paragraph.setProperty(Property.FONT, this.<Object>getProperty(Property.FONT));\n", "        }\n", "        if (this.<UnitValue>getProperty(Property.FONT_SIZE) != null) {\n", "            paragraph.setFontSize(this.<UnitValue>getProperty(Property.FONT_SIZE).getValue());\n", "        }\n", "        return add(paragraph);\n", "    }\n", "\n", "    /**\n", "     * {@inheritDoc}\n", "     *\n", "     * @return {@inheritDoc}\n", "     */\n", "    @Override\n", "    public <T1> T1 getDefaultProperty(int property) {\n", "        if (property == Property.KEEP_TOGETHER) {\n", "            return (T1) (Object) true;\n", "        }\n", "        return super.<T1>getDefaultProperty(property);\n", "    }\n", "\n", "    /**\n", "     * {@inheritDoc}\n", "     */\n", "    @Override\n", "    public AccessibilityProperties getAccessibilityProperties() {\n", "        if (tagProperties == null){\n", "            tagProperties = new FormDefaultAccessibilityProperties(\n", "                    FormDefaultAccessibilityProperties.FORM_FIELD_PUSH_BUTTON);\n", "        }\n", "        return tagProperties;\n", "    }\n", "\n", "\n", "    /**\n", "     * {@inheritDoc}\n", "     *\n", "     * @return {@inheritDoc}\n", "     */\n", "    @Override\n", "    protected IRenderer makeNewRenderer() {\n", "        return new ButtonRenderer(this);\n", "    }\n", "}\n"], "test_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.forms.form.element;\n", "\n", "import com.itextpdf.commons.utils.FileUtil;\n", "import com.itextpdf.forms.PdfAcroForm;\n", "import com.itextpdf.forms.fields.PdfButtonFormField;\n", "import com.itextpdf.forms.fields.PdfFormAnnotation;\n", "import com.itextpdf.forms.fields.PdfFormCreator;\n", "import com.itextpdf.forms.fields.PushButtonFormFieldBuilder;\n", "import com.itextpdf.forms.fields.borders.FormBorderFactory;\n", "import com.itextpdf.forms.form.FormProperty;\n", "import com.itextpdf.forms.form.renderer.ButtonRenderer;\n", "import com.itextpdf.forms.form.renderer.InputFieldRenderer;\n", "import com.itextpdf.io.font.constants.StandardFonts;\n", "import com.itextpdf.io.image.ImageDataFactory;\n", "import com.itextpdf.io.util.StreamUtil;\n", "import com.itextpdf.kernel.colors.ColorConstants;\n", "import com.itextpdf.kernel.font.PdfFontFactory;\n", "import com.itextpdf.kernel.geom.Rectangle;\n", "import com.itextpdf.kernel.pdf.PdfDictionary;\n", "import com.itextpdf.kernel.pdf.PdfDocument;\n", "import com.itextpdf.kernel.pdf.PdfName;\n", "import com.itextpdf.kernel.pdf.PdfWriter;\n", "import com.itextpdf.kernel.pdf.annot.PdfAnnotation;\n", "import com.itextpdf.kernel.pdf.xobject.PdfImageXObject;\n", "import com.itextpdf.kernel.utils.CompareTool;\n", "import com.itextpdf.layout.Document;\n", "import com.itextpdf.layout.borders.DashedBorder;\n", "import com.itextpdf.layout.borders.SolidBorder;\n", "import com.itextpdf.layout.element.Image;\n", "import com.itextpdf.layout.element.Paragraph;\n", "import com.itextpdf.layout.properties.BoxSizingPropertyValue;\n", "import com.itextpdf.layout.properties.Property;\n", "import com.itextpdf.layout.properties.UnitValue;\n", "import com.itextpdf.layout.properties.VerticalAlignment;\n", "import com.itextpdf.test.ExtendedITextTest;\n", "import com.itextpdf.test.annotations.type.IntegrationTest;\n", "\n", "import java.io.IOException;\n", "import org.junit.Assert;\n", "import org.junit.BeforeClass;\n", "import org.junit.Test;\n", "import org.junit.experimental.categories.Category;\n", "\n", "@Category(IntegrationTest.class)\n", "public class ButtonTest extends ExtendedITextTest {\n", "    public static final String SOURCE_FOLDER =\n", "            \"./src/test/resources/com/itextpdf/forms/form/element/ButtonTest/\";\n", "    public static final String DESTINATION_FOLDER =\n", "            \"./target/test/com/itextpdf/forms/form/element/ButtonTest/\";\n", "\n", "    @BeforeClass\n", "    public static void beforeClass() {\n", "        createOrClearDestinationFolder(DESTINATION_FOLDER);\n", "    }\n", "\n", "    @Test\n", "    public void basicButtonTest() throws IOException, InterruptedException {\n", "        String outPdf = DESTINATION_FOLDER + \"basicButton.pdf\";\n", "        String cmpPdf = SOURCE_FOLDER + \"cmp_basicButton.pdf\";\n", "\n", "        try (Document document = new Document(new PdfDocument(new PdfWriter(outPdf)))) {\n", "            Button formButton = new Button(\"form button\");\n", "            formButton.setProperty(FormProperty.FORM_FIELD_FLATTEN, false);\n", "            formButton.add(new Paragraph(\"form button\"));\n", "            formButton.add(new Paragraph(\"paragraph with yellow border inside button\")\n", "                    .setBorder(new SolidBorder(ColorConstants.YELLOW, 1)));\n", "            document.add(formButton);\n", "\n", "            document.add(new Paragraph(\"\"));\n", "\n", "            Button flattenButton = new Button(\"flatten button\");\n", "            flattenButton.setProperty(FormProperty.FORM_FIELD_FLATTEN, true);\n", "            flattenButton.add(new Paragraph(\"flatten button\"));\n", "            flattenButton.add(new Paragraph(\"paragraph with pink border inside button\")\n", "                    .setBorder(new SolidBorder(ColorConstants.PINK, 1)));\n", "            document.add(flattenButton);\n", "        }\n", "\n", "        Assert.assertNull(new CompareTool().compareByContent(outPdf, cmpPdf, DESTINATION_FOLDER));\n", "    }\n", "\n", "    @Test\n", "    public void basicButtonTestWithFontDiffersOnParagraph() throws IOException, InterruptedException {\n", "        String outPdf = DESTINATION_FOLDER + \"basicButtonWithFontDiffersOnParagraph.pdf\";\n", "        String cmpPdf = SOURCE_FOLDER + \"cmp_basicButtonWithFontDiffersOnParagraph.pdf\";\n", "\n", "        try (Document document = new Document(new PdfDocument(new PdfWriter(outPdf)))) {\n", "            Button formButton = new Button(\"form button\");\n", "\n", "            formButton.setProperty(FormProperty.FORM_FIELD_FLATTEN, false);\n", "            formButton.setFont(PdfFontFactory.createFont(StandardFonts.HELVETICA_BOLD));\n", "            formButton.add(new Paragraph(\"form button\"));\n", "            formButton.add(new Paragraph(\"paragraph with yellow border inside button\")\n", "                    .setFont(PdfFontFactory.createFont(StandardFonts.COURIER))\n", "                    .setBorder(new SolidBorder(ColorConstants.YELLOW, 1)));\n", "            document.add(formButton);\n", "\n", "            document.add(new Paragraph(\"\"));\n", "\n", "            Button flattenButton = new Button(\"flatten button\");\n", "            flattenButton.setProperty(FormProperty.FORM_FIELD_FLATTEN, true);\n", "            flattenButton.add(new Paragraph(\"flatten button\"));\n", "\n", "            flattenButton.setFont(PdfFontFactory.createFont(StandardFonts.HELVETICA_BOLD));\n", "            flattenButton.add(new Paragraph(\"paragraph with pink border inside button\")\n", "                    .setFont(PdfFontFactory.createFont(StandardFonts.COURIER))\n", "                    .setBorder(new SolidBorder(ColorConstants.PINK, 1)));\n", "            document.add(flattenButton);\n", "        }\n", "\n", "        Assert.assertNull(new CompareTool().compareByContent(outPdf, cmpPdf, DESTINATION_FOLDER));\n", "    }\n", "\n", "    @Test\n", "    public void basicButtonTestWithFont() throws IOException, InterruptedException {\n", "        String outPdf = DESTINATION_FOLDER + \"basicButtonWithFont.pdf\";\n", "        String cmpPdf = SOURCE_FOLDER + \"cmp_basicButtonWithFon.pdf\";\n", "\n", "        try (Document document = new Document(new PdfDocument(new PdfWriter(outPdf)))) {\n", "            Button formButton = new Button(\"form button\");\n", "\n", "            formButton.setProperty(FormProperty.FORM_FIELD_FLATTEN, false);\n", "            formButton.setFont(PdfFontFactory.createFont(StandardFonts.HELVETICA_BOLD));\n", "            formButton.add(new Paragraph(\"form button\"));\n", "            formButton.add(new Paragraph(\"paragraph with yellow border inside button\")\n", "                    .setBorder(new SolidBorder(ColorConstants.YELLOW, 1)));\n", "            document.add(formButton);\n", "\n", "            document.add(new Paragraph(\"\"));\n", "\n", "            Button flattenButton = new Button(\"flatten button\");\n", "            flattenButton.setProperty(FormProperty.FORM_FIELD_FLATTEN, true);\n", "            flattenButton.add(new Paragraph(\"flatten button\"));\n", "\n", "            flattenButton.setFont(PdfFontFactory.createFont(StandardFonts.HELVETICA_BOLD));\n", "            flattenButton.add(new Paragraph(\"paragraph with pink border inside button\")\n", "                    .setBorder(new SolidBorder(ColorConstants.PINK, 1)));\n", "            document.add(flattenButton);\n", "        }\n", "\n", "        Assert.assertNull(new CompareTool().compareByContent(outPdf, cmpPdf, DESTINATION_FOLDER));\n", "    }\n", "\n", "    @Test\n", "    public void customizedButtonTest() throws IOException, InterruptedException {\n", "        String outPdf = DESTINATION_FOLDER + \"customizedButton.pdf\";\n", "        String cmpPdf = SOURCE_FOLDER + \"cmp_customizedButton.pdf\";\n", "\n", "        try (Document document = new Document(new PdfDocument(new PdfWriter(outPdf)))) {\n", "            Button formButton = new Button(\"form button\");\n", "            formButton.setProperty(FormProperty.FORM_FIELD_FLATTEN, false);\n", "            formButton.setValue(\"form button\");\n", "            formButton.setFontColor(ColorConstants.BLUE);\n", "            formButton.setBackgroundColor(ColorConstants.YELLOW);\n", "            formButton.setBorder(new SolidBorder(ColorConstants.GREEN, 2));\n", "            document.add(formButton);\n", "\n", "            document.add(new Paragraph(\"\"));\n", "\n", "            Button flattenButton = new Button(\"flatten  button\");\n", "            flattenButton.setProperty(FormProperty.FORM_FIELD_FLATTEN, true);\n", "            flattenButton.setValue(\"flatten button\");\n", "            flattenButton.setFontColor(ColorConstants.BLUE);\n", "            flattenButton.setBackgroundColor(ColorConstants.YELLOW);\n", "            flattenButton.setBorder(new SolidBorder(ColorConstants.GREEN, 2));\n", "            document.add(flattenButton);\n", "        }\n", "\n", "        Assert.assertNull(new CompareTool().compareByContent(outPdf, cmpPdf, DESTINATION_FOLDER));\n", "    }\n", "\n", "    @Test\n", "    public void buttonVerticalAlignmentTest() throws IOException, InterruptedException {\n", "        String outPdf = DESTINATION_FOLDER + \"buttonVerticalAlignment.pdf\";\n", "        String cmpPdf = SOURCE_FOLDER + \"cmp_buttonVerticalAlignment.pdf\";\n", "\n", "        try (Document document = new Document(new PdfDocument(new PdfWriter(outPdf)))) {\n", "            Button formButton = new Button(\"form button\");\n", "            formButton.setProperty(FormProperty.FORM_FIELD_FLATTEN, false);\n", "            formButton.setValue(\"capture on bottom\");\n", "            formButton.setProperty(Property.VERTICAL_ALIGNMENT, VerticalAlignment.BOTTOM);\n", "            formButton.setProperty(Property.HEIGHT, UnitValue.createPointValue(100));\n", "            document.add(formButton);\n", "        }\n", "\n", "        Assert.assertNull(new CompareTool().compareByContent(outPdf, cmpPdf, DESTINATION_FOLDER));\n", "    }\n", "\n", "    @Test\n", "    public void addButtonInTwoWaysTest() throws IOException, InterruptedException {\n", "        String outPdf = DESTINATION_FOLDER + \"addButtonInTwoWays.pdf\";\n", "        String cmpPdf = SOURCE_FOLDER + \"cmp_addButtonInTwoWays.pdf\";\n", "        String imagePath = SOURCE_FOLDER + \"Desert.jpg\";\n", "\n", "        try (Document document = new Document(new PdfDocument(new PdfWriter(outPdf)))) {\n", "            // Create push button using html element\n", "            Button formButton = new Button(\"button\");\n", "            formButton.setProperty(FormProperty.FORM_FIELD_FLATTEN, false);\n", "            formButton.setProperty(Property.WIDTH, UnitValue.createPointValue(100));\n", "            formButton.setProperty(Property.HEIGHT, UnitValue.createPointValue(100));\n", "            formButton.add(new Image(new PdfImageXObject(ImageDataFactory.create(\n", "                    StreamUtil.inputStreamToArray(FileUtil.getInputStreamForFile(imagePath)))))\n", "                    .setWidth(98).setHeight(98));\n", "            formButton.setFontColor(ColorConstants.BLUE);\n", "            formButton.setBackgroundColor(ColorConstants.YELLOW);\n", "            formButton.setBorder(new SolidBorder(ColorConstants.GREEN, 1));\n", "            document.add(formButton);\n", "\n", "            // Create push button using form field\n", "            PdfAcroForm form = PdfFormCreator.getAcroForm(document.getPdfDocument(), true);\n", "            PdfButtonFormField button = new PushButtonFormFieldBuilder(document.getPdfDocument(), \"push\")\n", "                    .setWidgetRectangle(new Rectangle(36, 600, 100, 100))\n", "                    .createPushButton();\n", "            button.setImage(imagePath);\n", "            button.getFirstFormAnnotation()\n", "                    .setBorderWidth(1).setBorderColor(ColorConstants.MAGENTA).setBackgroundColor(ColorConstants.PINK)\n", "                    .setVisibility(PdfFormAnnotation.VISIBLE);\n", "            form.addField(button);\n", "        }\n", "\n", "        Assert.assertNull(new CompareTool().compareByContent(outPdf, cmpPdf, DESTINATION_FOLDER));\n", "    }\n", "\n", "    @Test\n", "    public void borderBoxesTest() throws IOException, InterruptedException {\n", "        String outPdf = DESTINATION_FOLDER + \"borderBoxes.pdf\";\n", "        String cmpPdf = SOURCE_FOLDER + \"cmp_borderBoxes.pdf\";\n", "\n", "        try (Document document = new Document(new PdfDocument(new PdfWriter(outPdf)))) {\n", "            // BORDER_BOX\n", "            Button interactiveButton = new Button(\"interactiveButton\")\n", "                    .setBorder(new SolidBorder(ColorConstants.PINK, 10));\n", "            interactiveButton.setWidth(200);\n", "            interactiveButton.setInteractive(true);\n", "            interactiveButton.setValue(\"interactive border box\");\n", "            interactiveButton.setProperty(Property.BOX_SIZING, BoxSizingPropertyValue.BORDER_BOX);\n", "            document.add(interactiveButton);\n", "\n", "            // CONTENT_BOX\n", "            Button interactiveButton2 = new Button(\"interactiveButton\")\n", "                    .setBorder(new SolidBorder(ColorConstants.YELLOW, 10));\n", "            interactiveButton2.setWidth(200);\n", "            interactiveButton2.setInteractive(true);\n", "            interactiveButton2.setValue(\"interactive content box\");\n", "            interactiveButton2.setProperty(Property.BOX_SIZING, BoxSizingPropertyValue.CONTENT_BOX);\n", "            document.add(interactiveButton2);\n", "\n", "            // BORDER_BOX\n", "            Button flattenButton = new Button(\"flattenButton\")\n", "                    .setBorder(new SolidBorder(ColorConstants.PINK, 10));\n", "            flattenButton.setWidth(200);\n", "            flattenButton.setInteractive(false);\n", "            flattenButton.setValue(\"flatten border box\");\n", "            flattenButton.setProperty(Property.BOX_SIZING, BoxSizingPropertyValue.BORDER_BOX);\n", "            document.add(flattenButton);\n", "\n", "            // CONTENT_BOX\n", "            Button flattenButton2 = new Button(\"flattenButton\")\n", "                    .setBorder(new SolidBorder(ColorConstants.YELLOW, 10));\n", "            flattenButton2.setWidth(200);\n", "            flattenButton2.setInteractive(false);\n", "            flattenButton2.setValue(\"flatten content box\");\n", "            flattenButton2.setProperty(Property.BOX_SIZING, BoxSizingPropertyValue.CONTENT_BOX);\n", "            document.add(flattenButton2);\n", "        }\n", "\n", "        Assert.assertNull(new CompareTool().compareByContent(outPdf, cmpPdf, DESTINATION_FOLDER));\n", "    }\n", "\n", "    @Test\n", "    public void borderTypesTest() throws IOException, InterruptedException {\n", "        String outPdf = DESTINATION_FOLDER + \"borderTypes.pdf\";\n", "        String cmpPdf = SOURCE_FOLDER + \"cmp_borderTypes.pdf\";\n", "\n", "        try (Document document = new Document(new PdfDocument(new PdfWriter(outPdf)))) {\n", "            // DASHED\n", "            Button button = new Button(\"button\")\n", "                    .setBorder(new DashedBorder(ColorConstants.PINK, 10))\n", "                    .setBackgroundColor(ColorConstants.YELLOW);\n", "            button.setWidth(100);\n", "            button.setInteractive(true);\n", "            button.setValue(\"dashed\");\n", "            document.add(button);\n", "\n", "            PdfDictionary bs = new PdfDictionary();\n", "            // UNDERLINE\n", "            bs.put(PdfName.S, PdfAnnotation.STYLE_UNDERLINE);\n", "            Button button2 = new Button(\"button2\")\n", "                    .setBorder(FormBorderFactory.getBorder(bs, 10f, ColorConstants.YELLOW,\n", "                            ColorConstants.ORANGE))\n", "                    .setBackgroundColor(ColorConstants.PINK);\n", "            button2.setSize(100);\n", "            button2.setInteractive(true);\n", "            button2.setValue(\"underline\");\n", "            document.add(button2);\n", "\n", "            // INSET\n", "            bs.put(PdfName.S, PdfAnnotation.STYLE_INSET);\n", "            Button button3 = new Button(\"button3\")\n", "                    .setBorder(FormBorderFactory.getBorder(bs, 10f, ColorConstants.PINK,\n", "                            ColorConstants.RED))\n", "                    .setBackgroundColor(ColorConstants.YELLOW);\n", "            button3.setSize(100);\n", "            button3.setInteractive(true);\n", "            button3.setValue(\"inset\");\n", "            document.add(button3);\n", "\n", "            // BEVELLED\n", "            bs.put(PdfName.S, PdfAnnotation.STYLE_BEVELED);\n", "            Button button4 = new Button(\"button4\")\n", "                    .setBorder(FormBorderFactory.getBorder(bs, 10f, ColorConstants.YELLOW,\n", "                            ColorConstants.ORANGE))\n", "                    .setBackgroundColor(ColorConstants.PINK);\n", "            button4.setSize(100);\n", "            button4.setInteractive(true);\n", "            button4.setValue(\"bevelled\");\n", "            document.add(button4);\n", "        }\n", "\n", "        Assert.assertNull(new CompareTool().compareByContent(outPdf, cmpPdf, DESTINATION_FOLDER));\n", "    }\n", "\n", "    @Test\n", "    public void isFlattenTest() {\n", "        Button button = new Button(\"button\");\n", "        button.setProperty(FormProperty.FORM_FIELD_FLATTEN, false);\n", "        ButtonRenderer buttonRenderer = new ButtonRenderer(button);\n", "        Assert.assertFalse(buttonRenderer.isFlatten());\n", "        button.setProperty(FormProperty.FORM_FIELD_FLATTEN, true);\n", "        Assert.assertTrue(buttonRenderer.isFlatten());\n", "        InputField inputField = new InputField(\"input\");\n", "        inputField.setProperty(FormProperty.FORM_FIELD_FLATTEN, false);\n", "        button.add(inputField);\n", "        buttonRenderer = (ButtonRenderer) button.createRendererSubTree();\n", "        Assert.assertTrue(((InputFieldRenderer)buttonRenderer.getChildRenderers().get(0)\n", "                .setParent(buttonRenderer)).isFlatten());\n", "    }\n", "}\n"], "method_lines_dic": {"Button::::isSingleLine()": [96, 98], "Button::::setSingleLineValue(java.lang.String)": [110, 115], "Button::::setValue(java.lang.String)": [126, 142], "Button::::getDefaultProperty(int)": [149, 155], "Button::::getAccessibilityProperties()": [160, 167], "Button::::makeNewRenderer()": [175, 178]}, "test_method_lines_dic": {"ButtonTest::::beforeClass()": [73, 76], "ButtonTest::::basicButtonTest()": [78, 102], "ButtonTest::::basicButtonTestWithFontDiffersOnParagraph()": [104, 134], "ButtonTest::::basicButtonTestWithFont()": [136, 164], "ButtonTest::::customizedButtonTest()": [166, 192], "ButtonTest::::buttonVerticalAlignmentTest()": [194, 209], "ButtonTest::::addButtonInTwoWaysTest()": [211, 244], "ButtonTest::::borderBoxesTest()": [246, 290], "ButtonTest::::borderTypesTest()": [292, 343], "ButtonTest::::isFlattenTest()": [345, 359]}, "reverse_method_lines_dic": {"96": "Button::::isSingleLine()", "97": "Button::::isSingleLine()", "98": "Button::::isSingleLine()", "110": "Button::::setSingleLineValue(java.lang.String)", "111": "Button::::setSingleLineValue(java.lang.String)", "112": "Button::::setSingleLineValue(java.lang.String)", "113": "Button::::setSingleLineValue(java.lang.String)", "114": "Button::::setSingleLineValue(java.lang.String)", "115": "Button::::setSingleLineValue(java.lang.String)", "126": "Button::::setValue(java.lang.String)", "127": "Button::::setValue(java.lang.String)", "128": "Button::::setValue(java.lang.String)", "129": "Button::::setValue(java.lang.String)", "130": "Button::::setValue(java.lang.String)", "131": "Button::::setValue(java.lang.String)", "132": "Button::::setValue(java.lang.String)", "133": "Button::::setValue(java.lang.String)", "134": "Button::::setValue(java.lang.String)", "135": "Button::::setValue(java.lang.String)", "136": "Button::::setValue(java.lang.String)", "137": "Button::::setValue(java.lang.String)", "138": "Button::::setValue(java.lang.String)", "139": "Button::::setValue(java.lang.String)", "140": "Button::::setValue(java.lang.String)", "141": "Button::::setValue(java.lang.String)", "142": "Button::::setValue(java.lang.String)", "149": "Button::::getDefaultProperty(int)", "150": "Button::::getDefaultProperty(int)", "151": "Button::::getDefaultProperty(int)", "152": "Button::::getDefaultProperty(int)", "153": "Button::::getDefaultProperty(int)", "154": "Button::::getDefaultProperty(int)", "155": "Button::::getDefaultProperty(int)", "160": "Button::::getAccessibilityProperties()", "161": "Button::::getAccessibilityProperties()", "162": "Button::::getAccessibilityProperties()", "163": "Button::::getAccessibilityProperties()", "164": "Button::::getAccessibilityProperties()", "165": "Button::::getAccessibilityProperties()", "166": "Button::::getAccessibilityProperties()", "167": "Button::::getAccessibilityProperties()", "175": "Button::::makeNewRenderer()", "176": "Button::::makeNewRenderer()", "177": "Button::::makeNewRenderer()", "178": "Button::::makeNewRenderer()"}, "test_reverse_method_lines_dic": {"73": "ButtonTest::::beforeClass()", "74": "ButtonTest::::beforeClass()", "75": "ButtonTest::::beforeClass()", "76": "ButtonTest::::beforeClass()", "78": "ButtonTest::::basicButtonTest()", "79": "ButtonTest::::basicButtonTest()", "80": "ButtonTest::::basicButtonTest()", "81": "ButtonTest::::basicButtonTest()", "82": "ButtonTest::::basicButtonTest()", "83": "ButtonTest::::basicButtonTest()", "84": "ButtonTest::::basicButtonTest()", "85": "ButtonTest::::basicButtonTest()", "86": "ButtonTest::::basicButtonTest()", "87": "ButtonTest::::basicButtonTest()", "88": "ButtonTest::::basicButtonTest()", "89": "ButtonTest::::basicButtonTest()", "90": "ButtonTest::::basicButtonTest()", "91": "ButtonTest::::basicButtonTest()", "92": "ButtonTest::::basicButtonTest()", "93": "ButtonTest::::basicButtonTest()", "94": "ButtonTest::::basicButtonTest()", "95": "ButtonTest::::basicButtonTest()", "96": "ButtonTest::::basicButtonTest()", "97": "ButtonTest::::basicButtonTest()", "98": "ButtonTest::::basicButtonTest()", "99": "ButtonTest::::basicButtonTest()", "100": "ButtonTest::::basicButtonTest()", "101": "ButtonTest::::basicButtonTest()", "102": "ButtonTest::::basicButtonTest()", "104": "ButtonTest::::basicButtonTestWithFontDiffersOnParagraph()", "105": "ButtonTest::::basicButtonTestWithFontDiffersOnParagraph()", "106": "ButtonTest::::basicButtonTestWithFontDiffersOnParagraph()", "107": "ButtonTest::::basicButtonTestWithFontDiffersOnParagraph()", "108": "ButtonTest::::basicButtonTestWithFontDiffersOnParagraph()", "109": "ButtonTest::::basicButtonTestWithFontDiffersOnParagraph()", "110": "ButtonTest::::basicButtonTestWithFontDiffersOnParagraph()", "111": "ButtonTest::::basicButtonTestWithFontDiffersOnParagraph()", "112": "ButtonTest::::basicButtonTestWithFontDiffersOnParagraph()", "113": "ButtonTest::::basicButtonTestWithFontDiffersOnParagraph()", "114": "ButtonTest::::basicButtonTestWithFontDiffersOnParagraph()", "115": "ButtonTest::::basicButtonTestWithFontDiffersOnParagraph()", "116": "ButtonTest::::basicButtonTestWithFontDiffersOnParagraph()", "117": "ButtonTest::::basicButtonTestWithFontDiffersOnParagraph()", "118": "ButtonTest::::basicButtonTestWithFontDiffersOnParagraph()", "119": "ButtonTest::::basicButtonTestWithFontDiffersOnParagraph()", "120": "ButtonTest::::basicButtonTestWithFontDiffersOnParagraph()", "121": "ButtonTest::::basicButtonTestWithFontDiffersOnParagraph()", "122": "ButtonTest::::basicButtonTestWithFontDiffersOnParagraph()", "123": "ButtonTest::::basicButtonTestWithFontDiffersOnParagraph()", "124": "ButtonTest::::basicButtonTestWithFontDiffersOnParagraph()", "125": "ButtonTest::::basicButtonTestWithFontDiffersOnParagraph()", "126": "ButtonTest::::basicButtonTestWithFontDiffersOnParagraph()", "127": "ButtonTest::::basicButtonTestWithFontDiffersOnParagraph()", "128": "ButtonTest::::basicButtonTestWithFontDiffersOnParagraph()", "129": "ButtonTest::::basicButtonTestWithFontDiffersOnParagraph()", "130": "ButtonTest::::basicButtonTestWithFontDiffersOnParagraph()", "131": "ButtonTest::::basicButtonTestWithFontDiffersOnParagraph()", "132": "ButtonTest::::basicButtonTestWithFontDiffersOnParagraph()", "133": "ButtonTest::::basicButtonTestWithFontDiffersOnParagraph()", "134": "ButtonTest::::basicButtonTestWithFontDiffersOnParagraph()", "136": "ButtonTest::::basicButtonTestWithFont()", "137": "ButtonTest::::basicButtonTestWithFont()", "138": "ButtonTest::::basicButtonTestWithFont()", "139": "ButtonTest::::basicButtonTestWithFont()", "140": "ButtonTest::::basicButtonTestWithFont()", "141": "ButtonTest::::basicButtonTestWithFont()", "142": "ButtonTest::::basicButtonTestWithFont()", "143": "ButtonTest::::basicButtonTestWithFont()", "144": "ButtonTest::::basicButtonTestWithFont()", "145": "ButtonTest::::basicButtonTestWithFont()", "146": "ButtonTest::::basicButtonTestWithFont()", "147": "ButtonTest::::basicButtonTestWithFont()", "148": "ButtonTest::::basicButtonTestWithFont()", "149": "ButtonTest::::basicButtonTestWithFont()", "150": "ButtonTest::::basicButtonTestWithFont()", "151": "ButtonTest::::basicButtonTestWithFont()", "152": "ButtonTest::::basicButtonTestWithFont()", "153": "ButtonTest::::basicButtonTestWithFont()", "154": "ButtonTest::::basicButtonTestWithFont()", "155": "ButtonTest::::basicButtonTestWithFont()", "156": "ButtonTest::::basicButtonTestWithFont()", "157": "ButtonTest::::basicButtonTestWithFont()", "158": "ButtonTest::::basicButtonTestWithFont()", "159": "ButtonTest::::basicButtonTestWithFont()", "160": "ButtonTest::::basicButtonTestWithFont()", "161": "ButtonTest::::basicButtonTestWithFont()", "162": "ButtonTest::::basicButtonTestWithFont()", "163": "ButtonTest::::basicButtonTestWithFont()", "164": "ButtonTest::::basicButtonTestWithFont()", "166": "ButtonTest::::customizedButtonTest()", "167": "ButtonTest::::customizedButtonTest()", "168": "ButtonTest::::customizedButtonTest()", "169": "ButtonTest::::customizedButtonTest()", "170": "ButtonTest::::customizedButtonTest()", "171": "ButtonTest::::customizedButtonTest()", "172": "ButtonTest::::customizedButtonTest()", "173": "ButtonTest::::customizedButtonTest()", "174": "ButtonTest::::customizedButtonTest()", "175": "ButtonTest::::customizedButtonTest()", "176": "ButtonTest::::customizedButtonTest()", "177": "ButtonTest::::customizedButtonTest()", "178": "ButtonTest::::customizedButtonTest()", "179": "ButtonTest::::customizedButtonTest()", "180": "ButtonTest::::customizedButtonTest()", "181": "ButtonTest::::customizedButtonTest()", "182": "ButtonTest::::customizedButtonTest()", "183": "ButtonTest::::customizedButtonTest()", "184": "ButtonTest::::customizedButtonTest()", "185": "ButtonTest::::customizedButtonTest()", "186": "ButtonTest::::customizedButtonTest()", "187": "ButtonTest::::customizedButtonTest()", "188": "ButtonTest::::customizedButtonTest()", "189": "ButtonTest::::customizedButtonTest()", "190": "ButtonTest::::customizedButtonTest()", "191": "ButtonTest::::customizedButtonTest()", "192": "ButtonTest::::customizedButtonTest()", "194": "ButtonTest::::buttonVerticalAlignmentTest()", "195": "ButtonTest::::buttonVerticalAlignmentTest()", "196": "ButtonTest::::buttonVerticalAlignmentTest()", "197": "ButtonTest::::buttonVerticalAlignmentTest()", "198": "ButtonTest::::buttonVerticalAlignmentTest()", "199": "ButtonTest::::buttonVerticalAlignmentTest()", "200": "ButtonTest::::buttonVerticalAlignmentTest()", "201": "ButtonTest::::buttonVerticalAlignmentTest()", "202": "ButtonTest::::buttonVerticalAlignmentTest()", "203": "ButtonTest::::buttonVerticalAlignmentTest()", "204": "ButtonTest::::buttonVerticalAlignmentTest()", "205": "ButtonTest::::buttonVerticalAlignmentTest()", "206": "ButtonTest::::buttonVerticalAlignmentTest()", "207": "ButtonTest::::buttonVerticalAlignmentTest()", "208": "ButtonTest::::buttonVerticalAlignmentTest()", "209": "ButtonTest::::buttonVerticalAlignmentTest()", "211": "ButtonTest::::addButtonInTwoWaysTest()", "212": "ButtonTest::::addButtonInTwoWaysTest()", "213": "ButtonTest::::addButtonInTwoWaysTest()", "214": "ButtonTest::::addButtonInTwoWaysTest()", "215": "ButtonTest::::addButtonInTwoWaysTest()", "216": "ButtonTest::::addButtonInTwoWaysTest()", "217": "ButtonTest::::addButtonInTwoWaysTest()", "218": "ButtonTest::::addButtonInTwoWaysTest()", "219": "ButtonTest::::addButtonInTwoWaysTest()", "220": "ButtonTest::::addButtonInTwoWaysTest()", "221": "ButtonTest::::addButtonInTwoWaysTest()", "222": "ButtonTest::::addButtonInTwoWaysTest()", "223": "ButtonTest::::addButtonInTwoWaysTest()", "224": "ButtonTest::::addButtonInTwoWaysTest()", "225": "ButtonTest::::addButtonInTwoWaysTest()", "226": "ButtonTest::::addButtonInTwoWaysTest()", "227": "ButtonTest::::addButtonInTwoWaysTest()", "228": "ButtonTest::::addButtonInTwoWaysTest()", "229": "ButtonTest::::addButtonInTwoWaysTest()", "230": "ButtonTest::::addButtonInTwoWaysTest()", "231": "ButtonTest::::addButtonInTwoWaysTest()", "232": "ButtonTest::::addButtonInTwoWaysTest()", "233": "ButtonTest::::addButtonInTwoWaysTest()", "234": "ButtonTest::::addButtonInTwoWaysTest()", "235": "ButtonTest::::addButtonInTwoWaysTest()", "236": "ButtonTest::::addButtonInTwoWaysTest()", "237": "ButtonTest::::addButtonInTwoWaysTest()", "238": "ButtonTest::::addButtonInTwoWaysTest()", "239": "ButtonTest::::addButtonInTwoWaysTest()", "240": "ButtonTest::::addButtonInTwoWaysTest()", "241": "ButtonTest::::addButtonInTwoWaysTest()", "242": "ButtonTest::::addButtonInTwoWaysTest()", "243": "ButtonTest::::addButtonInTwoWaysTest()", "244": "ButtonTest::::addButtonInTwoWaysTest()", "246": "ButtonTest::::borderBoxesTest()", "247": "ButtonTest::::borderBoxesTest()", "248": "ButtonTest::::borderBoxesTest()", "249": "ButtonTest::::borderBoxesTest()", "250": "ButtonTest::::borderBoxesTest()", "251": "ButtonTest::::borderBoxesTest()", "252": "ButtonTest::::borderBoxesTest()", "253": "ButtonTest::::borderBoxesTest()", "254": "ButtonTest::::borderBoxesTest()", "255": "ButtonTest::::borderBoxesTest()", "256": "ButtonTest::::borderBoxesTest()", "257": "ButtonTest::::borderBoxesTest()", "258": "ButtonTest::::borderBoxesTest()", "259": "ButtonTest::::borderBoxesTest()", "260": "ButtonTest::::borderBoxesTest()", "261": "ButtonTest::::borderBoxesTest()", "262": "ButtonTest::::borderBoxesTest()", "263": "ButtonTest::::borderBoxesTest()", "264": "ButtonTest::::borderBoxesTest()", "265": "ButtonTest::::borderBoxesTest()", "266": "ButtonTest::::borderBoxesTest()", "267": "ButtonTest::::borderBoxesTest()", "268": "ButtonTest::::borderBoxesTest()", "269": "ButtonTest::::borderBoxesTest()", "270": "ButtonTest::::borderBoxesTest()", "271": "ButtonTest::::borderBoxesTest()", "272": "ButtonTest::::borderBoxesTest()", "273": "ButtonTest::::borderBoxesTest()", "274": "ButtonTest::::borderBoxesTest()", "275": "ButtonTest::::borderBoxesTest()", "276": "ButtonTest::::borderBoxesTest()", "277": "ButtonTest::::borderBoxesTest()", "278": "ButtonTest::::borderBoxesTest()", "279": "ButtonTest::::borderBoxesTest()", "280": "ButtonTest::::borderBoxesTest()", "281": "ButtonTest::::borderBoxesTest()", "282": "ButtonTest::::borderBoxesTest()", "283": "ButtonTest::::borderBoxesTest()", "284": "ButtonTest::::borderBoxesTest()", "285": "ButtonTest::::borderBoxesTest()", "286": "ButtonTest::::borderBoxesTest()", "287": "ButtonTest::::borderBoxesTest()", "288": "ButtonTest::::borderBoxesTest()", "289": "ButtonTest::::borderBoxesTest()", "290": "ButtonTest::::borderBoxesTest()", "292": "ButtonTest::::borderTypesTest()", "293": "ButtonTest::::borderTypesTest()", "294": "ButtonTest::::borderTypesTest()", "295": "ButtonTest::::borderTypesTest()", "296": "ButtonTest::::borderTypesTest()", "297": "ButtonTest::::borderTypesTest()", "298": "ButtonTest::::borderTypesTest()", "299": "ButtonTest::::borderTypesTest()", "300": "ButtonTest::::borderTypesTest()", "301": "ButtonTest::::borderTypesTest()", "302": "ButtonTest::::borderTypesTest()", "303": "ButtonTest::::borderTypesTest()", "304": "ButtonTest::::borderTypesTest()", "305": "ButtonTest::::borderTypesTest()", "306": "ButtonTest::::borderTypesTest()", "307": "ButtonTest::::borderTypesTest()", "308": "ButtonTest::::borderTypesTest()", "309": "ButtonTest::::borderTypesTest()", "310": "ButtonTest::::borderTypesTest()", "311": "ButtonTest::::borderTypesTest()", "312": "ButtonTest::::borderTypesTest()", "313": "ButtonTest::::borderTypesTest()", "314": "ButtonTest::::borderTypesTest()", "315": "ButtonTest::::borderTypesTest()", "316": "ButtonTest::::borderTypesTest()", "317": "ButtonTest::::borderTypesTest()", "318": "ButtonTest::::borderTypesTest()", "319": "ButtonTest::::borderTypesTest()", "320": "ButtonTest::::borderTypesTest()", "321": "ButtonTest::::borderTypesTest()", "322": "ButtonTest::::borderTypesTest()", "323": "ButtonTest::::borderTypesTest()", "324": "ButtonTest::::borderTypesTest()", "325": "ButtonTest::::borderTypesTest()", "326": "ButtonTest::::borderTypesTest()", "327": "ButtonTest::::borderTypesTest()", "328": "ButtonTest::::borderTypesTest()", "329": "ButtonTest::::borderTypesTest()", "330": "ButtonTest::::borderTypesTest()", "331": "ButtonTest::::borderTypesTest()", "332": "ButtonTest::::borderTypesTest()", "333": "ButtonTest::::borderTypesTest()", "334": "ButtonTest::::borderTypesTest()", "335": "ButtonTest::::borderTypesTest()", "336": "ButtonTest::::borderTypesTest()", "337": "ButtonTest::::borderTypesTest()", "338": "ButtonTest::::borderTypesTest()", "339": "ButtonTest::::borderTypesTest()", "340": "ButtonTest::::borderTypesTest()", "341": "ButtonTest::::borderTypesTest()", "342": "ButtonTest::::borderTypesTest()", "343": "ButtonTest::::borderTypesTest()", "345": "ButtonTest::::isFlattenTest()", "346": "ButtonTest::::isFlattenTest()", "347": "ButtonTest::::isFlattenTest()", "348": "ButtonTest::::isFlattenTest()", "349": "ButtonTest::::isFlattenTest()", "350": "ButtonTest::::isFlattenTest()", "351": "ButtonTest::::isFlattenTest()", "352": "ButtonTest::::isFlattenTest()", "353": "ButtonTest::::isFlattenTest()", "354": "ButtonTest::::isFlattenTest()", "355": "ButtonTest::::isFlattenTest()", "356": "ButtonTest::::isFlattenTest()", "357": "ButtonTest::::isFlattenTest()", "358": "ButtonTest::::isFlattenTest()", "359": "ButtonTest::::isFlattenTest()"}, "tests": [{"test_lines": [78, 102], "covered_lines": [45, 46, 47, 52, 60, 61, 62, 64, 65, 74, 75, 76, 97, 151, 154, 162, 163, 166, 177]}, {"test_lines": [104, 134], "covered_lines": [45, 46, 47, 52, 60, 61, 62, 64, 65, 74, 75, 76, 97, 151, 154, 162, 163, 166, 177]}, {"test_lines": [136, 164], "covered_lines": [45, 46, 47, 52, 60, 61, 62, 64, 65, 74, 75, 76, 97, 151, 154, 162, 163, 166, 177]}, {"test_lines": [166, 192], "covered_lines": [45, 46, 47, 52, 60, 61, 62, 64, 65, 74, 75, 76, 97, 128, 129, 130, 131, 132, 133, 135, 138, 141, 151, 154, 162, 163, 166, 177]}, {"test_lines": [194, 209], "covered_lines": [45, 46, 47, 52, 60, 61, 62, 64, 65, 74, 75, 76, 97, 128, 129, 130, 131, 132, 133, 135, 138, 141, 151, 154, 162, 163, 166, 177]}, {"test_lines": [211, 244], "covered_lines": [45, 46, 47, 52, 60, 61, 62, 64, 65, 86, 87, 88, 97, 151, 154, 162, 163, 166, 177]}, {"test_lines": [246, 290], "covered_lines": [45, 46, 47, 52, 60, 61, 62, 64, 65, 74, 75, 76, 97, 128, 129, 130, 131, 132, 133, 135, 138, 141, 151, 154, 162, 163, 166, 177]}, {"test_lines": [292, 343], "covered_lines": [45, 46, 47, 52, 60, 61, 62, 64, 65, 74, 75, 76, 97, 128, 129, 130, 131, 132, 133, 135, 138, 141, 151, 154, 162, 163, 166, 177]}, {"test_lines": [345, 359], "covered_lines": [45, 46, 47, 52, 60, 61, 62, 64, 65, 74, 75, 76, 177]}]}, "/bernard/dataset_construction/prep/repos/itext-java/forms/src/main/java/com/itextpdf/forms/form/renderer/SelectFieldListBoxRenderer.java": {"class_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.forms.form.renderer;\n", "\n", "import com.itextpdf.commons.utils.MessageFormatUtil;\n", "import com.itextpdf.forms.fields.ChoiceFormFieldBuilder;\n", "import com.itextpdf.forms.fields.PdfChoiceFormField;\n", "import com.itextpdf.forms.fields.PdfFormCreator;\n", "import com.itextpdf.forms.form.FormProperty;\n", "import com.itextpdf.forms.form.element.AbstractSelectField;\n", "import com.itextpdf.forms.form.element.ListBoxField;\n", "import com.itextpdf.forms.util.BorderStyleUtil;\n", "import com.itextpdf.forms.util.FormFieldRendererUtil;\n", "import com.itextpdf.io.logs.IoLogMessageConstant;\n", "import com.itextpdf.kernel.colors.ColorConstants;\n", "import com.itextpdf.kernel.colors.DeviceRgb;\n", "import com.itextpdf.kernel.font.PdfFont;\n", "import com.itextpdf.kernel.geom.Rectangle;\n", "import com.itextpdf.kernel.pdf.PdfDocument;\n", "import com.itextpdf.kernel.pdf.PdfPage;\n", "import com.itextpdf.kernel.pdf.tagutils.AccessibilityProperties;\n", "import com.itextpdf.layout.element.Div;\n", "import com.itextpdf.layout.element.IBlockElement;\n", "import com.itextpdf.layout.element.Paragraph;\n", "import com.itextpdf.layout.font.FontProvider;\n", "import com.itextpdf.layout.layout.LayoutContext;\n", "import com.itextpdf.layout.layout.LayoutResult;\n", "import com.itextpdf.layout.properties.Background;\n", "import com.itextpdf.layout.properties.OverflowPropertyValue;\n", "import com.itextpdf.layout.properties.Property;\n", "import com.itextpdf.layout.properties.RenderingMode;\n", "import com.itextpdf.layout.properties.TextAlignment;\n", "import com.itextpdf.layout.properties.TransparentColor;\n", "import com.itextpdf.layout.properties.UnitValue;\n", "import com.itextpdf.layout.renderer.AbstractRenderer;\n", "import com.itextpdf.layout.renderer.DrawContext;\n", "import com.itextpdf.layout.renderer.IRenderer;\n", "\n", "import java.util.ArrayList;\n", "import java.util.List;\n", "import java.util.Map;\n", "import org.slf4j.Logger;\n", "import org.slf4j.LoggerFactory;\n", "\n", "/**\n", " * The {@link SelectFieldListBoxRenderer} implementation for select field renderer.\n", " */\n", "public class SelectFieldListBoxRenderer extends AbstractSelectFieldRenderer {\n", "\n", "    /**\n", "     * Creates a new {@link SelectFieldListBoxRenderer} instance.\n", "     *\n", "     * @param modelElement the model element\n", "     */\n", "    public SelectFieldListBoxRenderer(AbstractSelectField modelElement) {\n", "        super(modelElement);\n", "    }\n", "\n", "    @Override\n", "    public IRenderer getNextRenderer() {\n", "        return new SelectFieldListBoxRenderer((AbstractSelectField) modelElement);\n", "    }\n", "\n", "    @Override\n", "    public LayoutResult layout(LayoutContext layoutContext) {\n", "        LayoutResult layoutResult = super.layout(layoutContext);\n", "        // options container is the only kid of the select field renderer by design\n", "        IRenderer optionsContainer = childRenderers.size() == 1 ? childRenderers.get(0) : null;\n", "\n", "        if (!isFlatten() || layoutResult.getStatus() != LayoutResult.FULL ||\n", "                optionsContainer == null || optionsContainer.getOccupiedArea() == null) {\n", "            return layoutResult;\n", "        }\n", "\n", "        if (isOverflowProperty(OverflowPropertyValue.HIDDEN, this, Property.OVERFLOW_Y)) {\n", "            List<IRenderer> selectedOptions = getSelectedOptions(this);\n", "            IRenderer firstSelectedOption;\n", "            if (!selectedOptions.isEmpty() &&\n", "                    (firstSelectedOption = selectedOptions.get(0)).getOccupiedArea() != null) {\n", "                Rectangle borderAreaBBox = getBorderAreaBBox();\n", "                Rectangle optionBBox = firstSelectedOption.getOccupiedArea().getBBox().clone();\n", "                if (firstSelectedOption instanceof AbstractRenderer) {\n", "                    ((AbstractRenderer) firstSelectedOption).applyMargins(optionBBox, false);\n", "                }\n", "                if (optionBBox.getHeight() < borderAreaBBox.getHeight()) {\n", "                    float selectedBottom = optionBBox.getBottom();\n", "                    float borderAreaBBoxBottom = borderAreaBBox.getBottom();\n", "                    if (selectedBottom < borderAreaBBoxBottom) {\n", "                        optionsContainer.move(0, borderAreaBBoxBottom - selectedBottom);\n", "                    }\n", "                } else {\n", "                    optionsContainer.move(0, borderAreaBBox.getTop() - optionBBox.getTop());\n", "                }\n", "            }\n", "        }\n", "\n", "        return layoutResult;\n", "    }\n", "\n", "    @Override\n", "    protected boolean allowLastYLineRecursiveExtraction() {\n", "        return false;\n", "    }\n", "\n", "    @Override\n", "    protected IRenderer createFlatRenderer() {\n", "        AbstractSelectField selectField = (AbstractSelectField) modelElement;\n", "        List<IBlockElement> options = selectField.getOptions();\n", "\n", "        Div optionsContainer = new Div();\n", "        for (IBlockElement option : options) {\n", "            optionsContainer.add(option);\n", "        }\n", "        String lang = getLang();\n", "        if (lang != null) {\n", "            AccessibilityProperties properties = optionsContainer.getAccessibilityProperties();\n", "            if (properties.getLanguage() == null) {\n", "                properties.setLanguage(lang);\n", "            }\n", "        }\n", "\n", "        IRenderer rendererSubTree;\n", "        if (optionsContainer.getChildren().isEmpty()) {\n", "            Paragraph pStub = new Paragraph(\"\\u00A0\").setMargin(0);\n", "            pStub.setProperty(Property.OVERFLOW_X, OverflowPropertyValue.VISIBLE);\n", "            pStub.setProperty(Property.OVERFLOW_Y, OverflowPropertyValue.VISIBLE);\n", "            // applying this property for the sake of finding this element as option\n", "            pStub.setProperty(FormProperty.FORM_FIELD_SELECTED, false);\n", "            optionsContainer.add(pStub);\n", "            rendererSubTree = optionsContainer.createRendererSubTree();\n", "        } else {\n", "            rendererSubTree = optionsContainer.createRendererSubTree();\n", "\n", "            List<IRenderer> selectedOptions = getSelectedOptions(rendererSubTree);\n", "            for (IRenderer selectedOption : selectedOptions) {\n", "                applySelectedStyle(selectedOption);\n", "            }\n", "        }\n", "        return rendererSubTree;\n", "    }\n", "\n", "    @Override\n", "    protected float getFinalSelectFieldHeight(float availableHeight, float actualHeight, boolean isClippedHeight) {\n", "        Float height = retrieveHeight();\n", "        float calculatedHeight;\n", "        if (height == null) {\n", "            calculatedHeight = getCalculatedHeight(this);\n", "\n", "            Float maxHeight = retrieveMaxHeight();\n", "            if (maxHeight != null && maxHeight < calculatedHeight) {\n", "                calculatedHeight = (float) maxHeight;\n", "            }\n", "            Float minHeight = retrieveMinHeight();\n", "            if (minHeight != null && minHeight > calculatedHeight) {\n", "                calculatedHeight = (float) minHeight;\n", "            }\n", "        } else {\n", "            calculatedHeight = height.floatValue();\n", "        }\n", "        return super.getFinalSelectFieldHeight(availableHeight, calculatedHeight, isClippedHeight);\n", "    }\n", "\n", "    @Override\n", "    protected void applyAcroField(DrawContext drawContext) {\n", "        // Retrieve font properties\n", "        PdfFont font = getResolvedFont(drawContext.getDocument());\n", "        UnitValue fontSize = (UnitValue) this.getPropertyAsUnitValue(Property.FONT_SIZE);\n", "        if (!fontSize.isPointValue()) {\n", "            Logger logger = LoggerFactory.getLogger(SelectFieldListBoxRenderer.class);\n", "            logger.error(MessageFormatUtil.format(IoLogMessageConstant.PROPERTY_IN_PERCENTS_NOT_SUPPORTED,\n", "                    Property.FONT_SIZE));\n", "        }\n", "\n", "        final PdfDocument doc = drawContext.getDocument();\n", "        final Rectangle area = this.getOccupiedArea().getBBox().clone();\n", "        final PdfPage page = doc.getPage(occupiedArea.getPageNumber());\n", "\n", "        applyMargins(area, false);\n", "        final Map<Integer, Object> properties = FormFieldRendererUtil.removeProperties(this.modelElement);\n", "        // Some properties are set to the HtmlDocumentRenderer, which is root renderer for this ButtonRenderer, but\n", "        // in forms logic root renderer is CanvasRenderer, and these properties will have default values. So\n", "        // we get them from renderer and set these properties to model element, which will be passed to forms logic.\n", "        modelElement.setProperty(Property.FONT_PROVIDER, this.<FontProvider>getProperty(Property.FONT_PROVIDER));\n", "        modelElement.setProperty(Property.RENDERING_MODE, this.<RenderingMode>getProperty(Property.RENDERING_MODE));\n", "\n", "        ListBoxField lbModelElement = (ListBoxField) modelElement;\n", "        List<String> selectedOptions = lbModelElement.getSelectedStrings();\n", "        ChoiceFormFieldBuilder builder = new ChoiceFormFieldBuilder(doc, getModelId())\n", "                .setGenericConformanceLevel(getGenericConformanceLevel(doc))\n", "                .setFont(font)\n", "                .setWidgetRectangle(area);\n", "        setupBuilderValues(builder, lbModelElement);\n", "        PdfChoiceFormField choiceField = builder.createList();\n", "        choiceField.disableFieldRegeneration();\n", "        applyAccessibilityProperties(choiceField,drawContext.getDocument());\n", "        choiceField.setFontSize(fontSize.getValue());\n", "        choiceField.setMultiSelect(isMultiple());\n", "        choiceField.setListSelected(selectedOptions.toArray(new String[selectedOptions.size()]));\n", "\n", "        TransparentColor color = getPropertyAsTransparentColor(Property.FONT_COLOR);\n", "        if (color != null) {\n", "            choiceField.setColor(color.getColor());\n", "        }\n", "        choiceField.setJustification(this.<TextAlignment>getProperty(Property.TEXT_ALIGNMENT));\n", "\n", "        BorderStyleUtil.applyBorderProperty(this, choiceField.getFirstFormAnnotation());\n", "\n", "        Background background = this.<Background>getProperty(Property.BACKGROUND);\n", "        if (background != null) {\n", "            choiceField.getFirstFormAnnotation().setBackgroundColor(background.getColor());\n", "        }\n", "\n", "        choiceField.getFirstFormAnnotation().setFormFieldElement(lbModelElement);\n", "        choiceField.enableFieldRegeneration();\n", "        PdfFormCreator.getAcroForm(doc, true).addField(choiceField, page);\n", "        FormFieldRendererUtil.reapplyProperties(this.modelElement, properties);\n", "\n", "    }\n", "\n", "    private float getCalculatedHeight(IRenderer flatRenderer) {\n", "        Integer sizeProp = this.<Integer>getProperty(FormProperty.FORM_FIELD_SIZE);\n", "        int size;\n", "        if (sizeProp == null || sizeProp <= 0) {\n", "            // Ensure height will not be negative or zero.\n", "            // There is no particular reason for setting specifically 4.\n", "            size = 4;\n", "        } else {\n", "            size = (int)sizeProp;\n", "        }\n", "        float maxOptionActualHeight = getMaxOptionActualHeight(flatRenderer);\n", "        if (maxOptionActualHeight == Float.MIN_VALUE) {\n", "            UnitValue fontSize = flatRenderer.<UnitValue>getProperty(Property.FONT_SIZE);\n", "            if (fontSize != null && fontSize.isPointValue()) {\n", "                // according to default styles for options (min-height: 1.2em)\n", "                maxOptionActualHeight = fontSize.getValue() * 1.2f;\n", "            } else {\n", "                maxOptionActualHeight = 0;\n", "            }\n", "        }\n", "\n", "        return size * maxOptionActualHeight;\n", "    }\n", "\n", "    private float getMaxOptionActualHeight(IRenderer flatRenderer) {\n", "        float maxActualHeight = Float.MIN_VALUE;\n", "        for (IRenderer child : flatRenderer.getChildRenderers()) {\n", "            if (isOptionRenderer(child)) {\n", "                float childHeight;\n", "                if (child instanceof AbstractRenderer) {\n", "                    AbstractRenderer abstractChild = (AbstractRenderer) child;\n", "                    childHeight = abstractChild.applyMargins(abstractChild.getOccupiedAreaBBox(), false).getHeight();\n", "                } else {\n", "                    childHeight = child.getOccupiedArea().getBBox().getHeight();\n", "                }\n", "                if (childHeight > maxActualHeight) {\n", "                    maxActualHeight = childHeight;\n", "                }\n", "            } else {\n", "                float maxNestedHeight = getMaxOptionActualHeight(child);\n", "                if (maxNestedHeight > maxActualHeight) {\n", "                    maxActualHeight = maxNestedHeight;\n", "                }\n", "            }\n", "        }\n", "        return maxActualHeight;\n", "    }\n", "\n", "    private List<IRenderer> getSelectedOptions(IRenderer rendererSubTree) {\n", "        List<IRenderer> selectedOptions = new ArrayList<>();\n", "        List<IRenderer> optionsWhichMarkedSelected = getOptionsMarkedSelected(rendererSubTree);\n", "        if (!optionsWhichMarkedSelected.isEmpty()) {\n", "            if (isMultiple()) {\n", "                selectedOptions.addAll(optionsWhichMarkedSelected);\n", "            } else {\n", "                selectedOptions.add(optionsWhichMarkedSelected.get(optionsWhichMarkedSelected.size() - 1));\n", "            }\n", "        }\n", "        return selectedOptions;\n", "    }\n", "\n", "    private boolean isMultiple() {\n", "        Boolean propertyAsBoolean = getPropertyAsBoolean(FormProperty.FORM_FIELD_MULTIPLE);\n", "        return propertyAsBoolean != null && (boolean) propertyAsBoolean;\n", "    }\n", "\n", "    private void applySelectedStyle(IRenderer selectedOption) {\n", "        selectedOption.setProperty(Property.BACKGROUND, new Background(new DeviceRgb(0, 120, 215)));\n", "        setFontColorRecursively(selectedOption);\n", "    }\n", "\n", "    /**\n", "     * The `select` tag has default color css property,\n", "     * therefore it makes sense to explicitly override this property to all children,\n", "     * otherwise it will be not applied due to the css resolving mechanism.\n", "     */\n", "    private void setFontColorRecursively(IRenderer selectedOption) {\n", "        selectedOption.setProperty(Property.FONT_COLOR, new TransparentColor(ColorConstants.WHITE));\n", "        for (IRenderer renderer : selectedOption.getChildRenderers()) {\n", "            setFontColorRecursively(renderer);\n", "        }\n", "    }\n", "}\n"], "test_content": ["/*\n", "    This file is part of the iText (R) project.\n", "    Copyright (c) 1998-2024 Apryse Group NV\n", "    Authors: Apryse Software.\n", "\n", "    This program is offered under a commercial and under the AGPL license.\n", "    For commercial licensing, contact us at https://itextpdf.com/sales.  For AGPL licensing, see below.\n", "\n", "    AGPL licensing:\n", "    This program is free software: you can redistribute it and/or modify\n", "    it under the terms of the GNU Affero General Public License as published by\n", "    the Free Software Foundation, either version 3 of the License, or\n", "    (at your option) any later version.\n", "\n", "    This program is distributed in the hope that it will be useful,\n", "    but WITHOUT ANY WARRANTY; without even the implied warranty of\n", "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", "    GNU Affero General Public License for more details.\n", "\n", "    You should have received a copy of the GNU Affero General Public License\n", "    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n", " */\n", "package com.itextpdf.forms.form.renderer;\n", "\n", "import com.itextpdf.forms.form.FormProperty;\n", "import com.itextpdf.forms.form.element.AbstractSelectField;\n", "import com.itextpdf.forms.form.element.ListBoxField;\n", "import com.itextpdf.io.source.ByteArrayOutputStream;\n", "import com.itextpdf.kernel.pdf.PdfAConformanceLevel;\n", "import com.itextpdf.kernel.pdf.PdfDocument;\n", "import com.itextpdf.kernel.pdf.PdfWriter;\n", "import com.itextpdf.layout.renderer.IRenderer;\n", "import com.itextpdf.test.ExtendedITextTest;\n", "import com.itextpdf.test.annotations.type.UnitTest;\n", "\n", "import org.junit.Assert;\n", "import org.junit.Test;\n", "import org.junit.experimental.categories.Category;\n", "\n", "@Category(UnitTest.class)\n", "public class SelectFieldListBoxRendererTest extends ExtendedITextTest {\n", "    \n", "    @Test\n", "    public void getNextRendererTest() {\n", "        SelectFieldListBoxRenderer listBoxRenderer = new SelectFieldListBoxRenderer(new ListBoxField(\"\", 0, false));\n", "        IRenderer nextRenderer = listBoxRenderer.getNextRenderer();\n", "        \n", "        Assert.assertTrue(nextRenderer instanceof SelectFieldListBoxRenderer);\n", "    }\n", "    \n", "    @Test\n", "    public void allowLastYLineRecursiveExtractionTest() {\n", "        CustomSelectFieldListBoxRenderer listBoxRenderer =\n", "                new CustomSelectFieldListBoxRenderer(new ListBoxField(\"\", 0, false));\n", "        boolean lastY = listBoxRenderer.callAllowLastYLineRecursiveExtraction();\n", "        \n", "        Assert.assertFalse(lastY);\n", "    }\n", "\n", "    @Test\n", "    public void pdfAConformanceLevelTest() {\n", "        SelectFieldListBoxRenderer renderer = new SelectFieldListBoxRenderer(new ListBoxField(\"\", 1, false));\n", "        Assert.assertNull(renderer.getGenericConformanceLevel(null));\n", "    }\n", "\n", "    @Test\n", "    public void pdfAConformanceLevelWithDocumentTest() {\n", "        PdfDocument pdfDocument = new PdfDocument(new PdfWriter(new ByteArrayOutputStream()));\n", "        SelectFieldListBoxRenderer renderer = new SelectFieldListBoxRenderer(new ListBoxField(\"\", 1, false));\n", "        Assert.assertNull(renderer.getGenericConformanceLevel(pdfDocument));\n", "    }\n", "\n", "    @Test\n", "    public void pdfAConformanceLevelWithConformanceLevelTest() {\n", "        PdfDocument pdfDocument = new PdfDocument(new PdfWriter(new ByteArrayOutputStream()));\n", "        SelectFieldListBoxRenderer renderer = new SelectFieldListBoxRenderer(new ListBoxField(\"\", 1, false));\n", "        renderer.setProperty(FormProperty.FORM_CONFORMANCE_LEVEL, PdfAConformanceLevel.PDF_A_1B);\n", "        Assert.assertEquals(PdfAConformanceLevel.PDF_A_1B, renderer.getGenericConformanceLevel(pdfDocument));\n", "    }\n", "    \n", "    private static class CustomSelectFieldListBoxRenderer extends SelectFieldListBoxRenderer {\n", "        public CustomSelectFieldListBoxRenderer(AbstractSelectField modelElement) {\n", "            super(modelElement);\n", "        }\n", "        \n", "        public boolean callAllowLastYLineRecursiveExtraction() {\n", "            return this.allowLastYLineRecursiveExtraction();\n", "        }\n", "    }\n", "}\n"], "method_lines_dic": {"SelectFieldListBoxRenderer::::getNextRenderer()": [79, 82], "SelectFieldListBoxRenderer::::allowLastYLineRecursiveExtraction()": [120, 123], "SelectFieldListBoxRenderer::::createFlatRenderer()": [125, 160], "SelectFieldListBoxRenderer::::getFinalSelectFieldHeight(float,float,boolean)": [162, 181], "SelectFieldListBoxRenderer::::isMultiple()": [301, 304]}, "test_method_lines_dic": {"SelectFieldListBoxRendererTest::::getNextRendererTest()": [43, 49], "SelectFieldListBoxRendererTest::::allowLastYLineRecursiveExtractionTest()": [51, 58], "SelectFieldListBoxRendererTest::::pdfAConformanceLevelTest()": [60, 64], "SelectFieldListBoxRendererTest::::pdfAConformanceLevelWithDocumentTest()": [66, 71], "SelectFieldListBoxRendererTest::::pdfAConformanceLevelWithConformanceLevelTest()": [73, 79], "SelectFieldListBoxRendererTest.CustomSelectFieldListBoxRenderer::::callAllowLastYLineRecursiveExtraction()": [86, 88]}, "reverse_method_lines_dic": {"79": "SelectFieldListBoxRenderer::::getNextRenderer()", "80": "SelectFieldListBoxRenderer::::getNextRenderer()", "81": "SelectFieldListBoxRenderer::::getNextRenderer()", "82": "SelectFieldListBoxRenderer::::getNextRenderer()", "120": "SelectFieldListBoxRenderer::::allowLastYLineRecursiveExtraction()", "121": "SelectFieldListBoxRenderer::::allowLastYLineRecursiveExtraction()", "122": "SelectFieldListBoxRenderer::::allowLastYLineRecursiveExtraction()", "123": "SelectFieldListBoxRenderer::::allowLastYLineRecursiveExtraction()", "125": "SelectFieldListBoxRenderer::::createFlatRenderer()", "126": "SelectFieldListBoxRenderer::::createFlatRenderer()", "127": "SelectFieldListBoxRenderer::::createFlatRenderer()", "128": "SelectFieldListBoxRenderer::::createFlatRenderer()", "129": "SelectFieldListBoxRenderer::::createFlatRenderer()", "130": "SelectFieldListBoxRenderer::::createFlatRenderer()", "131": "SelectFieldListBoxRenderer::::createFlatRenderer()", "132": "SelectFieldListBoxRenderer::::createFlatRenderer()", "133": "SelectFieldListBoxRenderer::::createFlatRenderer()", "134": "SelectFieldListBoxRenderer::::createFlatRenderer()", "135": "SelectFieldListBoxRenderer::::createFlatRenderer()", "136": "SelectFieldListBoxRenderer::::createFlatRenderer()", "137": "SelectFieldListBoxRenderer::::createFlatRenderer()", "138": "SelectFieldListBoxRenderer::::createFlatRenderer()", "139": "SelectFieldListBoxRenderer::::createFlatRenderer()", "140": "SelectFieldListBoxRenderer::::createFlatRenderer()", "141": "SelectFieldListBoxRenderer::::createFlatRenderer()", "142": "SelectFieldListBoxRenderer::::createFlatRenderer()", "143": "SelectFieldListBoxRenderer::::createFlatRenderer()", "144": "SelectFieldListBoxRenderer::::createFlatRenderer()", "145": "SelectFieldListBoxRenderer::::createFlatRenderer()", "146": "SelectFieldListBoxRenderer::::createFlatRenderer()", "147": "SelectFieldListBoxRenderer::::createFlatRenderer()", "148": "SelectFieldListBoxRenderer::::createFlatRenderer()", "149": "SelectFieldListBoxRenderer::::createFlatRenderer()", "150": "SelectFieldListBoxRenderer::::createFlatRenderer()", "151": "SelectFieldListBoxRenderer::::createFlatRenderer()", "152": "SelectFieldListBoxRenderer::::createFlatRenderer()", "153": "SelectFieldListBoxRenderer::::createFlatRenderer()", "154": "SelectFieldListBoxRenderer::::createFlatRenderer()", "155": "SelectFieldListBoxRenderer::::createFlatRenderer()", "156": "SelectFieldListBoxRenderer::::createFlatRenderer()", "157": "SelectFieldListBoxRenderer::::createFlatRenderer()", "158": "SelectFieldListBoxRenderer::::createFlatRenderer()", "159": "SelectFieldListBoxRenderer::::createFlatRenderer()", "160": "SelectFieldListBoxRenderer::::createFlatRenderer()", "162": "SelectFieldListBoxRenderer::::getFinalSelectFieldHeight(float,float,boolean)", "163": "SelectFieldListBoxRenderer::::getFinalSelectFieldHeight(float,float,boolean)", "164": "SelectFieldListBoxRenderer::::getFinalSelectFieldHeight(float,float,boolean)", "165": "SelectFieldListBoxRenderer::::getFinalSelectFieldHeight(float,float,boolean)", "166": "SelectFieldListBoxRenderer::::getFinalSelectFieldHeight(float,float,boolean)", "167": "SelectFieldListBoxRenderer::::getFinalSelectFieldHeight(float,float,boolean)", "168": "SelectFieldListBoxRenderer::::getFinalSelectFieldHeight(float,float,boolean)", "169": "SelectFieldListBoxRenderer::::getFinalSelectFieldHeight(float,float,boolean)", "170": "SelectFieldListBoxRenderer::::getFinalSelectFieldHeight(float,float,boolean)", "171": "SelectFieldListBoxRenderer::::getFinalSelectFieldHeight(float,float,boolean)", "172": "SelectFieldListBoxRenderer::::getFinalSelectFieldHeight(float,float,boolean)", "173": "SelectFieldListBoxRenderer::::getFinalSelectFieldHeight(float,float,boolean)", "174": "SelectFieldListBoxRenderer::::getFinalSelectFieldHeight(float,float,boolean)", "175": "SelectFieldListBoxRenderer::::getFinalSelectFieldHeight(float,float,boolean)", "176": "SelectFieldListBoxRenderer::::getFinalSelectFieldHeight(float,float,boolean)", "177": "SelectFieldListBoxRenderer::::getFinalSelectFieldHeight(float,float,boolean)", "178": "SelectFieldListBoxRenderer::::getFinalSelectFieldHeight(float,float,boolean)", "179": "SelectFieldListBoxRenderer::::getFinalSelectFieldHeight(float,float,boolean)", "180": "SelectFieldListBoxRenderer::::getFinalSelectFieldHeight(float,float,boolean)", "181": "SelectFieldListBoxRenderer::::getFinalSelectFieldHeight(float,float,boolean)", "301": "SelectFieldListBoxRenderer::::isMultiple()", "302": "SelectFieldListBoxRenderer::::isMultiple()", "303": "SelectFieldListBoxRenderer::::isMultiple()", "304": "SelectFieldListBoxRenderer::::isMultiple()"}, "test_reverse_method_lines_dic": {"43": "SelectFieldListBoxRendererTest::::getNextRendererTest()", "44": "SelectFieldListBoxRendererTest::::getNextRendererTest()", "45": "SelectFieldListBoxRendererTest::::getNextRendererTest()", "46": "SelectFieldListBoxRendererTest::::getNextRendererTest()", "47": "SelectFieldListBoxRendererTest::::getNextRendererTest()", "48": "SelectFieldListBoxRendererTest::::getNextRendererTest()", "49": "SelectFieldListBoxRendererTest::::getNextRendererTest()", "51": "SelectFieldListBoxRendererTest::::allowLastYLineRecursiveExtractionTest()", "52": "SelectFieldListBoxRendererTest::::allowLastYLineRecursiveExtractionTest()", "53": "SelectFieldListBoxRendererTest::::allowLastYLineRecursiveExtractionTest()", "54": "SelectFieldListBoxRendererTest::::allowLastYLineRecursiveExtractionTest()", "55": "SelectFieldListBoxRendererTest::::allowLastYLineRecursiveExtractionTest()", "56": "SelectFieldListBoxRendererTest::::allowLastYLineRecursiveExtractionTest()", "57": "SelectFieldListBoxRendererTest::::allowLastYLineRecursiveExtractionTest()", "58": "SelectFieldListBoxRendererTest::::allowLastYLineRecursiveExtractionTest()", "60": "SelectFieldListBoxRendererTest::::pdfAConformanceLevelTest()", "61": "SelectFieldListBoxRendererTest::::pdfAConformanceLevelTest()", "62": "SelectFieldListBoxRendererTest::::pdfAConformanceLevelTest()", "63": "SelectFieldListBoxRendererTest::::pdfAConformanceLevelTest()", "64": "SelectFieldListBoxRendererTest::::pdfAConformanceLevelTest()", "66": "SelectFieldListBoxRendererTest::::pdfAConformanceLevelWithDocumentTest()", "67": "SelectFieldListBoxRendererTest::::pdfAConformanceLevelWithDocumentTest()", "68": "SelectFieldListBoxRendererTest::::pdfAConformanceLevelWithDocumentTest()", "69": "SelectFieldListBoxRendererTest::::pdfAConformanceLevelWithDocumentTest()", "70": "SelectFieldListBoxRendererTest::::pdfAConformanceLevelWithDocumentTest()", "71": "SelectFieldListBoxRendererTest::::pdfAConformanceLevelWithDocumentTest()", "73": "SelectFieldListBoxRendererTest::::pdfAConformanceLevelWithConformanceLevelTest()", "74": "SelectFieldListBoxRendererTest::::pdfAConformanceLevelWithConformanceLevelTest()", "75": "SelectFieldListBoxRendererTest::::pdfAConformanceLevelWithConformanceLevelTest()", "76": "SelectFieldListBoxRendererTest::::pdfAConformanceLevelWithConformanceLevelTest()", "77": "SelectFieldListBoxRendererTest::::pdfAConformanceLevelWithConformanceLevelTest()", "78": "SelectFieldListBoxRendererTest::::pdfAConformanceLevelWithConformanceLevelTest()", "79": "SelectFieldListBoxRendererTest::::pdfAConformanceLevelWithConformanceLevelTest()", "86": "SelectFieldListBoxRendererTest.CustomSelectFieldListBoxRenderer::::callAllowLastYLineRecursiveExtraction()", "87": "SelectFieldListBoxRendererTest.CustomSelectFieldListBoxRenderer::::callAllowLastYLineRecursiveExtraction()", "88": "SelectFieldListBoxRendererTest.CustomSelectFieldListBoxRenderer::::callAllowLastYLineRecursiveExtraction()"}, "tests": [{"test_lines": [43, 49], "covered_lines": [76, 77, 81, 127, 128, 130, 131, 134, 135, 143, 144, 145, 146, 148, 149, 150, 151, 159]}, {"test_lines": [51, 58], "covered_lines": [76, 77, 122, 127, 128, 130, 131, 134, 135, 143, 144, 145, 146, 148, 149, 150, 151, 159]}, {"test_lines": [60, 64], "covered_lines": [76, 77, 127, 128, 130, 131, 134, 135, 143, 144, 145, 146, 148, 149, 150, 151, 159]}, {"test_lines": [66, 71], "covered_lines": [76, 77, 127, 128, 130, 131, 134, 135, 143, 144, 145, 146, 148, 149, 150, 151, 159]}, {"test_lines": [73, 79], "covered_lines": [76, 77, 127, 128, 130, 131, 134, 135, 143, 144, 145, 146, 148, 149, 150, 151, 159]}]}}