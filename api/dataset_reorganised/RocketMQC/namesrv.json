{
  "/bernard/dataset_construction/prep/repos/RocketMQC/namesrv/src/main/java/org/apache/rocketmq/namesrv/processor/DefaultRequestProcessor.java": {
    "class_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.namesrv.processor;\n",
      "\n",
      "import io.netty.channel.ChannelHandlerContext;\n",
      "import java.io.UnsupportedEncodingException;\n",
      "import java.util.Properties;\n",
      "import java.util.concurrent.atomic.AtomicLong;\n",
      "import org.apache.rocketmq.common.DataVersion;\n",
      "import org.apache.rocketmq.common.MQVersion;\n",
      "import org.apache.rocketmq.common.MQVersion.Version;\n",
      "import org.apache.rocketmq.common.MixAll;\n",
      "import org.apache.rocketmq.common.UtilAll;\n",
      "import org.apache.rocketmq.common.constant.LoggerName;\n",
      "import org.apache.rocketmq.common.help.FAQUrl;\n",
      "import org.apache.rocketmq.logging.InternalLogger;\n",
      "import org.apache.rocketmq.logging.InternalLoggerFactory;\n",
      "import org.apache.rocketmq.common.namesrv.NamesrvUtil;\n",
      "import org.apache.rocketmq.common.namesrv.RegisterBrokerResult;\n",
      "import org.apache.rocketmq.common.protocol.RequestCode;\n",
      "import org.apache.rocketmq.common.protocol.ResponseCode;\n",
      "import org.apache.rocketmq.common.protocol.body.RegisterBrokerBody;\n",
      "import org.apache.rocketmq.common.protocol.body.TopicConfigSerializeWrapper;\n",
      "import org.apache.rocketmq.common.protocol.header.GetTopicsByClusterRequestHeader;\n",
      "import org.apache.rocketmq.common.protocol.header.namesrv.DeleteKVConfigRequestHeader;\n",
      "import org.apache.rocketmq.common.protocol.header.namesrv.DeleteTopicInNamesrvRequestHeader;\n",
      "import org.apache.rocketmq.common.protocol.header.namesrv.GetKVConfigRequestHeader;\n",
      "import org.apache.rocketmq.common.protocol.header.namesrv.GetKVConfigResponseHeader;\n",
      "import org.apache.rocketmq.common.protocol.header.namesrv.GetKVListByNamespaceRequestHeader;\n",
      "import org.apache.rocketmq.common.protocol.header.namesrv.GetRouteInfoRequestHeader;\n",
      "import org.apache.rocketmq.common.protocol.header.namesrv.PutKVConfigRequestHeader;\n",
      "import org.apache.rocketmq.common.protocol.header.namesrv.QueryDataVersionRequestHeader;\n",
      "import org.apache.rocketmq.common.protocol.header.namesrv.QueryDataVersionResponseHeader;\n",
      "import org.apache.rocketmq.common.protocol.header.namesrv.RegisterBrokerRequestHeader;\n",
      "import org.apache.rocketmq.common.protocol.header.namesrv.RegisterBrokerResponseHeader;\n",
      "import org.apache.rocketmq.common.protocol.header.namesrv.UnRegisterBrokerRequestHeader;\n",
      "import org.apache.rocketmq.common.protocol.header.namesrv.WipeWritePermOfBrokerRequestHeader;\n",
      "import org.apache.rocketmq.common.protocol.header.namesrv.WipeWritePermOfBrokerResponseHeader;\n",
      "import org.apache.rocketmq.common.protocol.route.TopicRouteData;\n",
      "import org.apache.rocketmq.namesrv.NamesrvController;\n",
      "import org.apache.rocketmq.remoting.common.RemotingHelper;\n",
      "import org.apache.rocketmq.remoting.exception.RemotingCommandException;\n",
      "import org.apache.rocketmq.remoting.netty.AsyncNettyRequestProcessor;\n",
      "import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;\n",
      "import org.apache.rocketmq.remoting.protocol.RemotingCommand;\n",
      "\n",
      "/**\n",
      " * AsyncNettyRequestProcessor\u662f\u62bd\u8c61\u7c7b\uff0c\u4f46\u662f\u901a\u8fc7\u4e00\u4e2aasyncProcessRequest\u65b9\u6cd5\u8c03\u7528\u4e86\u7236\u63a5\u53e3\u7684processRequest\u65b9\u6cd5\uff0cprocessRequest\u4efb\u7136\u4ea4\u7ed9\u5b50\u7c7b\u5b9e\u73b0\n",
      " */\n",
      "public class DefaultRequestProcessor extends AsyncNettyRequestProcessor implements NettyRequestProcessor {\n",
      "    private static InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.NAMESRV_LOGGER_NAME);\n",
      "\n",
      "    protected final NamesrvController namesrvController;\n",
      "\n",
      "    public DefaultRequestProcessor(NamesrvController namesrvController) {\n",
      "        this.namesrvController = namesrvController;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public RemotingCommand processRequest(ChannelHandlerContext ctx,\n",
      "        RemotingCommand request) throws RemotingCommandException {\n",
      "\n",
      "        if (ctx != null) {\n",
      "            log.debug(\"receive request, {} {} {}\",\n",
      "                request.getCode(),\n",
      "                RemotingHelper.parseChannelRemoteAddr(ctx.channel()),\n",
      "                request);\n",
      "        }\n",
      "\n",
      "\n",
      "        switch (request.getCode()) {\n",
      "            case RequestCode.PUT_KV_CONFIG:\n",
      "                return this.putKVConfig(ctx, request);\n",
      "            case RequestCode.GET_KV_CONFIG:\n",
      "                return this.getKVConfig(ctx, request);\n",
      "            case RequestCode.DELETE_KV_CONFIG:\n",
      "                return this.deleteKVConfig(ctx, request);\n",
      "            case RequestCode.QUERY_DATA_VERSION:\n",
      "                return queryBrokerTopicConfig(ctx, request);\n",
      "            //\u8bf7\u6c42\u5904\u7406\u4e4b\u6ce8\u518cbroker\u7684\u8bf7\u6c42\n",
      "            case RequestCode.REGISTER_BROKER:\n",
      "                Version brokerVersion = MQVersion.value2Version(request.getVersion());\n",
      "                if (brokerVersion.ordinal() >= MQVersion.Version.V3_0_11.ordinal()) {\n",
      "                    return this.registerBrokerWithFilterServer(ctx, request);\n",
      "                } else {\n",
      "                    //\u6838\u5fc3\u6ce8\u518c\u903b\u8f91\n",
      "                    return this.registerBroker(ctx, request);\n",
      "                }\n",
      "            case RequestCode.UNREGISTER_BROKER:\n",
      "                return this.unregisterBroker(ctx, request);\n",
      "            case RequestCode.GET_ROUTEINFO_BY_TOPIC:\n",
      "                return this.getRouteInfoByTopic(ctx, request);\n",
      "            case RequestCode.GET_BROKER_CLUSTER_INFO:\n",
      "                return this.getBrokerClusterInfo(ctx, request);\n",
      "            case RequestCode.WIPE_WRITE_PERM_OF_BROKER:\n",
      "                return this.wipeWritePermOfBroker(ctx, request);\n",
      "            case RequestCode.GET_ALL_TOPIC_LIST_FROM_NAMESERVER:\n",
      "                return getAllTopicListFromNameserver(ctx, request);\n",
      "            case RequestCode.DELETE_TOPIC_IN_NAMESRV:\n",
      "                return deleteTopicInNamesrv(ctx, request);\n",
      "            case RequestCode.GET_KVLIST_BY_NAMESPACE:\n",
      "                return this.getKVListByNamespace(ctx, request);\n",
      "            case RequestCode.GET_TOPICS_BY_CLUSTER:\n",
      "                return this.getTopicsByCluster(ctx, request);\n",
      "            case RequestCode.GET_SYSTEM_TOPIC_LIST_FROM_NS:\n",
      "                return this.getSystemTopicListFromNs(ctx, request);\n",
      "            case RequestCode.GET_UNIT_TOPIC_LIST:\n",
      "                return this.getUnitTopicList(ctx, request);\n",
      "            case RequestCode.GET_HAS_UNIT_SUB_TOPIC_LIST:\n",
      "                return this.getHasUnitSubTopicList(ctx, request);\n",
      "            case RequestCode.GET_HAS_UNIT_SUB_UNUNIT_TOPIC_LIST:\n",
      "                return this.getHasUnitSubUnUnitTopicList(ctx, request);\n",
      "            case RequestCode.UPDATE_NAMESRV_CONFIG:\n",
      "                return this.updateConfig(ctx, request);\n",
      "            case RequestCode.GET_NAMESRV_CONFIG:\n",
      "                return this.getConfig(ctx, request);\n",
      "            default:\n",
      "                break;\n",
      "        }\n",
      "        return null;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public boolean rejectRequest() {\n",
      "        return false;\n",
      "    }\n",
      "\n",
      "    public RemotingCommand putKVConfig(ChannelHandlerContext ctx,\n",
      "        RemotingCommand request) throws RemotingCommandException {\n",
      "        final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n",
      "        final PutKVConfigRequestHeader requestHeader =\n",
      "            (PutKVConfigRequestHeader) request.decodeCommandCustomHeader(PutKVConfigRequestHeader.class);\n",
      "\n",
      "        this.namesrvController.getKvConfigManager().putKVConfig(\n",
      "            requestHeader.getNamespace(),\n",
      "            requestHeader.getKey(),\n",
      "            requestHeader.getValue()\n",
      "        );\n",
      "\n",
      "        response.setCode(ResponseCode.SUCCESS);\n",
      "        response.setRemark(null);\n",
      "        return response;\n",
      "    }\n",
      "\n",
      "    public RemotingCommand getKVConfig(ChannelHandlerContext ctx,\n",
      "        RemotingCommand request) throws RemotingCommandException {\n",
      "        final RemotingCommand response = RemotingCommand.createResponseCommand(GetKVConfigResponseHeader.class);\n",
      "        final GetKVConfigResponseHeader responseHeader = (GetKVConfigResponseHeader) response.readCustomHeader();\n",
      "        final GetKVConfigRequestHeader requestHeader =\n",
      "            (GetKVConfigRequestHeader) request.decodeCommandCustomHeader(GetKVConfigRequestHeader.class);\n",
      "\n",
      "        String value = this.namesrvController.getKvConfigManager().getKVConfig(\n",
      "            requestHeader.getNamespace(),\n",
      "            requestHeader.getKey()\n",
      "        );\n",
      "\n",
      "        if (value != null) {\n",
      "            responseHeader.setValue(value);\n",
      "            response.setCode(ResponseCode.SUCCESS);\n",
      "            response.setRemark(null);\n",
      "            return response;\n",
      "        }\n",
      "\n",
      "        response.setCode(ResponseCode.QUERY_NOT_FOUND);\n",
      "        response.setRemark(\"No config item, Namespace: \" + requestHeader.getNamespace() + \" Key: \" + requestHeader.getKey());\n",
      "        return response;\n",
      "    }\n",
      "\n",
      "    public RemotingCommand deleteKVConfig(ChannelHandlerContext ctx,\n",
      "        RemotingCommand request) throws RemotingCommandException {\n",
      "        final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n",
      "        final DeleteKVConfigRequestHeader requestHeader =\n",
      "            (DeleteKVConfigRequestHeader) request.decodeCommandCustomHeader(DeleteKVConfigRequestHeader.class);\n",
      "\n",
      "        this.namesrvController.getKvConfigManager().deleteKVConfig(\n",
      "            requestHeader.getNamespace(),\n",
      "            requestHeader.getKey()\n",
      "        );\n",
      "\n",
      "        response.setCode(ResponseCode.SUCCESS);\n",
      "        response.setRemark(null);\n",
      "        return response;\n",
      "    }\n",
      "\n",
      "    public RemotingCommand registerBrokerWithFilterServer(ChannelHandlerContext ctx, RemotingCommand request)\n",
      "        throws RemotingCommandException {\n",
      "        final RemotingCommand response = RemotingCommand.createResponseCommand(RegisterBrokerResponseHeader.class);\n",
      "        final RegisterBrokerResponseHeader responseHeader = (RegisterBrokerResponseHeader) response.readCustomHeader();\n",
      "        final RegisterBrokerRequestHeader requestHeader =\n",
      "            (RegisterBrokerRequestHeader) request.decodeCommandCustomHeader(RegisterBrokerRequestHeader.class);\n",
      "\n",
      "        if (!checksum(ctx, request, requestHeader)) {\n",
      "            response.setCode(ResponseCode.SYSTEM_ERROR);\n",
      "            response.setRemark(\"crc32 not match\");\n",
      "            return response;\n",
      "        }\n",
      "\n",
      "        RegisterBrokerBody registerBrokerBody = new RegisterBrokerBody();\n",
      "\n",
      "        if (request.getBody() != null) {\n",
      "            try {\n",
      "                registerBrokerBody = RegisterBrokerBody.decode(request.getBody(), requestHeader.isCompressed());\n",
      "            } catch (Exception e) {\n",
      "                throw new RemotingCommandException(\"Failed to decode RegisterBrokerBody\", e);\n",
      "            }\n",
      "        } else {\n",
      "            registerBrokerBody.getTopicConfigSerializeWrapper().getDataVersion().setCounter(new AtomicLong(0));\n",
      "            registerBrokerBody.getTopicConfigSerializeWrapper().getDataVersion().setTimestamp(0);\n",
      "        }\n",
      "\n",
      "        RegisterBrokerResult result = this.namesrvController.getRouteInfoManager().registerBroker(\n",
      "            requestHeader.getClusterName(),\n",
      "            requestHeader.getBrokerAddr(),\n",
      "            requestHeader.getBrokerName(),\n",
      "            requestHeader.getBrokerId(),\n",
      "            requestHeader.getHaServerAddr(),\n",
      "            registerBrokerBody.getTopicConfigSerializeWrapper(),\n",
      "            registerBrokerBody.getFilterServerList(),\n",
      "            ctx.channel());\n",
      "\n",
      "        responseHeader.setHaServerAddr(result.getHaServerAddr());\n",
      "        responseHeader.setMasterAddr(result.getMasterAddr());\n",
      "\n",
      "        byte[] jsonValue = this.namesrvController.getKvConfigManager().getKVListByNamespace(NamesrvUtil.NAMESPACE_ORDER_TOPIC_CONFIG);\n",
      "        response.setBody(jsonValue);\n",
      "\n",
      "        response.setCode(ResponseCode.SUCCESS);\n",
      "        response.setRemark(null);\n",
      "        return response;\n",
      "    }\n",
      "\n",
      "    private boolean checksum(ChannelHandlerContext ctx, RemotingCommand request,\n",
      "        RegisterBrokerRequestHeader requestHeader) {\n",
      "        if (requestHeader.getBodyCrc32() != 0) {\n",
      "            final int crc32 = UtilAll.crc32(request.getBody());\n",
      "            if (crc32 != requestHeader.getBodyCrc32()) {\n",
      "                log.warn(String.format(\"receive registerBroker request,crc32 not match,from %s\",\n",
      "                    RemotingHelper.parseChannelRemoteAddr(ctx.channel())));\n",
      "                return false;\n",
      "            }\n",
      "        }\n",
      "        return true;\n",
      "    }\n",
      "\n",
      "    public RemotingCommand queryBrokerTopicConfig(ChannelHandlerContext ctx,\n",
      "        RemotingCommand request) throws RemotingCommandException {\n",
      "        final RemotingCommand response = RemotingCommand.createResponseCommand(QueryDataVersionResponseHeader.class);\n",
      "        final QueryDataVersionResponseHeader responseHeader = (QueryDataVersionResponseHeader) response.readCustomHeader();\n",
      "        final QueryDataVersionRequestHeader requestHeader =\n",
      "            (QueryDataVersionRequestHeader) request.decodeCommandCustomHeader(QueryDataVersionRequestHeader.class);\n",
      "        DataVersion dataVersion = DataVersion.decode(request.getBody(), DataVersion.class);\n",
      "\n",
      "        Boolean changed = this.namesrvController.getRouteInfoManager().isBrokerTopicConfigChanged(requestHeader.getBrokerAddr(), dataVersion);\n",
      "        if (!changed) {\n",
      "            this.namesrvController.getRouteInfoManager().updateBrokerInfoUpdateTimestamp(requestHeader.getBrokerAddr());\n",
      "        }\n",
      "\n",
      "        DataVersion nameSeverDataVersion = this.namesrvController.getRouteInfoManager().queryBrokerTopicConfig(requestHeader.getBrokerAddr());\n",
      "        response.setCode(ResponseCode.SUCCESS);\n",
      "        response.setRemark(null);\n",
      "\n",
      "        if (nameSeverDataVersion != null) {\n",
      "            response.setBody(nameSeverDataVersion.encode());\n",
      "        }\n",
      "        responseHeader.setChanged(changed);\n",
      "        return response;\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u5b8c\u6210broker\u5411NameServer\u6ce8\u518c\n",
      "     * @param ctx\n",
      "     * @param request\n",
      "     * @return\n",
      "     * @throws RemotingCommandException\n",
      "     */\n",
      "    public RemotingCommand registerBroker(ChannelHandlerContext ctx,\n",
      "        RemotingCommand request) throws RemotingCommandException {\n",
      "        final RemotingCommand response = RemotingCommand.createResponseCommand(RegisterBrokerResponseHeader.class);\n",
      "        //\u4e0b\u65b9\u89e3\u6790\u6ce8\u518c\u8bf7\u6c42\uff0c\u6784\u9020\u8fd4\u56de\u54cd\u5e94\n",
      "        final RegisterBrokerResponseHeader responseHeader = (RegisterBrokerResponseHeader) response.readCustomHeader();\n",
      "        final RegisterBrokerRequestHeader requestHeader =\n",
      "            (RegisterBrokerRequestHeader) request.decodeCommandCustomHeader(RegisterBrokerRequestHeader.class);\n",
      "\n",
      "        if (!checksum(ctx, request, requestHeader)) {\n",
      "            response.setCode(ResponseCode.SYSTEM_ERROR);\n",
      "            response.setRemark(\"crc32 not match\");\n",
      "            return response;\n",
      "        }\n",
      "\n",
      "        TopicConfigSerializeWrapper topicConfigWrapper;\n",
      "        if (request.getBody() != null) {\n",
      "            topicConfigWrapper = TopicConfigSerializeWrapper.decode(request.getBody(), TopicConfigSerializeWrapper.class);\n",
      "        } else {\n",
      "            topicConfigWrapper = new TopicConfigSerializeWrapper();\n",
      "            topicConfigWrapper.getDataVersion().setCounter(new AtomicLong(0));\n",
      "            topicConfigWrapper.getDataVersion().setTimestamp(0);\n",
      "        }\n",
      "\n",
      "        //\u6ce8\u518c\u6838\u5fc3\u903b\u8f91\uff0c\u8c03\u7528 \uff08\u8def\u7531\u6570\u636e\u7ba1\u7406\u7ec4\u4ef6\uff09RouteInfoManager().registerBroker\uff08\uff09\n",
      "        RegisterBrokerResult result = this.namesrvController.getRouteInfoManager().registerBroker(\n",
      "            requestHeader.getClusterName(),\n",
      "            requestHeader.getBrokerAddr(),\n",
      "            requestHeader.getBrokerName(),\n",
      "            requestHeader.getBrokerId(),\n",
      "            requestHeader.getHaServerAddr(),\n",
      "            topicConfigWrapper,\n",
      "            null,\n",
      "            ctx.channel()\n",
      "        );\n",
      "\n",
      "        //\u4e0b\u65b9\u6784\u9020\u8fd4\u56de\u54cd\u5e94\n",
      "        responseHeader.setHaServerAddr(result.getHaServerAddr());\n",
      "        responseHeader.setMasterAddr(result.getMasterAddr());\n",
      "\n",
      "        byte[] jsonValue = this.namesrvController.getKvConfigManager().getKVListByNamespace(NamesrvUtil.NAMESPACE_ORDER_TOPIC_CONFIG);\n",
      "        response.setBody(jsonValue);\n",
      "        response.setCode(ResponseCode.SUCCESS);\n",
      "        response.setRemark(null);\n",
      "        return response;\n",
      "    }\n",
      "\n",
      "    public RemotingCommand unregisterBroker(ChannelHandlerContext ctx,\n",
      "        RemotingCommand request) throws RemotingCommandException {\n",
      "        final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n",
      "        final UnRegisterBrokerRequestHeader requestHeader =\n",
      "            (UnRegisterBrokerRequestHeader) request.decodeCommandCustomHeader(UnRegisterBrokerRequestHeader.class);\n",
      "\n",
      "        this.namesrvController.getRouteInfoManager().unregisterBroker(\n",
      "            requestHeader.getClusterName(),\n",
      "            requestHeader.getBrokerAddr(),\n",
      "            requestHeader.getBrokerName(),\n",
      "            requestHeader.getBrokerId());\n",
      "\n",
      "        response.setCode(ResponseCode.SUCCESS);\n",
      "        response.setRemark(null);\n",
      "        return response;\n",
      "    }\n",
      "\n",
      "    public RemotingCommand getRouteInfoByTopic(ChannelHandlerContext ctx,\n",
      "        RemotingCommand request) throws RemotingCommandException {\n",
      "        final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n",
      "        final GetRouteInfoRequestHeader requestHeader =\n",
      "            (GetRouteInfoRequestHeader) request.decodeCommandCustomHeader(GetRouteInfoRequestHeader.class);\n",
      "\n",
      "        TopicRouteData topicRouteData = this.namesrvController.getRouteInfoManager().pickupTopicRouteData(requestHeader.getTopic());\n",
      "\n",
      "        if (topicRouteData != null) {\n",
      "            if (this.namesrvController.getNamesrvConfig().isOrderMessageEnable()) {\n",
      "                String orderTopicConf =\n",
      "                    this.namesrvController.getKvConfigManager().getKVConfig(NamesrvUtil.NAMESPACE_ORDER_TOPIC_CONFIG,\n",
      "                        requestHeader.getTopic());\n",
      "                topicRouteData.setOrderTopicConf(orderTopicConf);\n",
      "            }\n",
      "\n",
      "            byte[] content = topicRouteData.encode();\n",
      "            response.setBody(content);\n",
      "            response.setCode(ResponseCode.SUCCESS);\n",
      "            response.setRemark(null);\n",
      "            return response;\n",
      "        }\n",
      "\n",
      "        response.setCode(ResponseCode.TOPIC_NOT_EXIST);\n",
      "        response.setRemark(\"No topic route info in name server for the topic: \" + requestHeader.getTopic()\n",
      "            + FAQUrl.suggestTodo(FAQUrl.APPLY_TOPIC_URL));\n",
      "        return response;\n",
      "    }\n",
      "\n",
      "    private RemotingCommand getBrokerClusterInfo(ChannelHandlerContext ctx, RemotingCommand request) {\n",
      "        final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n",
      "\n",
      "        byte[] content = this.namesrvController.getRouteInfoManager().getAllClusterInfo();\n",
      "        response.setBody(content);\n",
      "\n",
      "        response.setCode(ResponseCode.SUCCESS);\n",
      "        response.setRemark(null);\n",
      "        return response;\n",
      "    }\n",
      "\n",
      "    private RemotingCommand wipeWritePermOfBroker(ChannelHandlerContext ctx,\n",
      "        RemotingCommand request) throws RemotingCommandException {\n",
      "        final RemotingCommand response = RemotingCommand.createResponseCommand(WipeWritePermOfBrokerResponseHeader.class);\n",
      "        final WipeWritePermOfBrokerResponseHeader responseHeader = (WipeWritePermOfBrokerResponseHeader) response.readCustomHeader();\n",
      "        final WipeWritePermOfBrokerRequestHeader requestHeader =\n",
      "            (WipeWritePermOfBrokerRequestHeader) request.decodeCommandCustomHeader(WipeWritePermOfBrokerRequestHeader.class);\n",
      "\n",
      "        int wipeTopicCnt = this.namesrvController.getRouteInfoManager().wipeWritePermOfBrokerByLock(requestHeader.getBrokerName());\n",
      "\n",
      "        if (ctx != null) {\n",
      "            log.info(\"wipe write perm of broker[{}], client: {}, {}\",\n",
      "                    requestHeader.getBrokerName(),\n",
      "                    RemotingHelper.parseChannelRemoteAddr(ctx.channel()),\n",
      "                    wipeTopicCnt);\n",
      "        }\n",
      "\n",
      "        responseHeader.setWipeTopicCount(wipeTopicCnt);\n",
      "        response.setCode(ResponseCode.SUCCESS);\n",
      "        response.setRemark(null);\n",
      "        return response;\n",
      "    }\n",
      "\n",
      "    private RemotingCommand getAllTopicListFromNameserver(ChannelHandlerContext ctx, RemotingCommand request) {\n",
      "        final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n",
      "\n",
      "        byte[] body = this.namesrvController.getRouteInfoManager().getAllTopicList();\n",
      "\n",
      "        response.setBody(body);\n",
      "        response.setCode(ResponseCode.SUCCESS);\n",
      "        response.setRemark(null);\n",
      "        return response;\n",
      "    }\n",
      "\n",
      "    private RemotingCommand deleteTopicInNamesrv(ChannelHandlerContext ctx,\n",
      "        RemotingCommand request) throws RemotingCommandException {\n",
      "        final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n",
      "        final DeleteTopicInNamesrvRequestHeader requestHeader =\n",
      "            (DeleteTopicInNamesrvRequestHeader) request.decodeCommandCustomHeader(DeleteTopicInNamesrvRequestHeader.class);\n",
      "\n",
      "        this.namesrvController.getRouteInfoManager().deleteTopic(requestHeader.getTopic());\n",
      "\n",
      "        response.setCode(ResponseCode.SUCCESS);\n",
      "        response.setRemark(null);\n",
      "        return response;\n",
      "    }\n",
      "\n",
      "    private RemotingCommand getKVListByNamespace(ChannelHandlerContext ctx,\n",
      "        RemotingCommand request) throws RemotingCommandException {\n",
      "        final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n",
      "        final GetKVListByNamespaceRequestHeader requestHeader =\n",
      "            (GetKVListByNamespaceRequestHeader) request.decodeCommandCustomHeader(GetKVListByNamespaceRequestHeader.class);\n",
      "\n",
      "        byte[] jsonValue = this.namesrvController.getKvConfigManager().getKVListByNamespace(\n",
      "            requestHeader.getNamespace());\n",
      "        if (null != jsonValue) {\n",
      "            response.setBody(jsonValue);\n",
      "            response.setCode(ResponseCode.SUCCESS);\n",
      "            response.setRemark(null);\n",
      "            return response;\n",
      "        }\n",
      "\n",
      "        response.setCode(ResponseCode.QUERY_NOT_FOUND);\n",
      "        response.setRemark(\"No config item, Namespace: \" + requestHeader.getNamespace());\n",
      "        return response;\n",
      "    }\n",
      "\n",
      "    private RemotingCommand getTopicsByCluster(ChannelHandlerContext ctx,\n",
      "        RemotingCommand request) throws RemotingCommandException {\n",
      "        final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n",
      "        final GetTopicsByClusterRequestHeader requestHeader =\n",
      "            (GetTopicsByClusterRequestHeader) request.decodeCommandCustomHeader(GetTopicsByClusterRequestHeader.class);\n",
      "\n",
      "        byte[] body = this.namesrvController.getRouteInfoManager().getTopicsByCluster(requestHeader.getCluster());\n",
      "\n",
      "        response.setBody(body);\n",
      "        response.setCode(ResponseCode.SUCCESS);\n",
      "        response.setRemark(null);\n",
      "        return response;\n",
      "    }\n",
      "\n",
      "    private RemotingCommand getSystemTopicListFromNs(ChannelHandlerContext ctx,\n",
      "        RemotingCommand request) throws RemotingCommandException {\n",
      "        final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n",
      "\n",
      "        byte[] body = this.namesrvController.getRouteInfoManager().getSystemTopicList();\n",
      "\n",
      "        response.setBody(body);\n",
      "        response.setCode(ResponseCode.SUCCESS);\n",
      "        response.setRemark(null);\n",
      "        return response;\n",
      "    }\n",
      "\n",
      "    private RemotingCommand getUnitTopicList(ChannelHandlerContext ctx,\n",
      "        RemotingCommand request) throws RemotingCommandException {\n",
      "        final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n",
      "\n",
      "        byte[] body = this.namesrvController.getRouteInfoManager().getUnitTopics();\n",
      "\n",
      "        response.setBody(body);\n",
      "        response.setCode(ResponseCode.SUCCESS);\n",
      "        response.setRemark(null);\n",
      "        return response;\n",
      "    }\n",
      "\n",
      "    private RemotingCommand getHasUnitSubTopicList(ChannelHandlerContext ctx,\n",
      "        RemotingCommand request) throws RemotingCommandException {\n",
      "        final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n",
      "\n",
      "        byte[] body = this.namesrvController.getRouteInfoManager().getHasUnitSubTopicList();\n",
      "\n",
      "        response.setBody(body);\n",
      "        response.setCode(ResponseCode.SUCCESS);\n",
      "        response.setRemark(null);\n",
      "        return response;\n",
      "    }\n",
      "\n",
      "    private RemotingCommand getHasUnitSubUnUnitTopicList(ChannelHandlerContext ctx, RemotingCommand request)\n",
      "        throws RemotingCommandException {\n",
      "        final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n",
      "\n",
      "        byte[] body = this.namesrvController.getRouteInfoManager().getHasUnitSubUnUnitTopicList();\n",
      "\n",
      "        response.setBody(body);\n",
      "        response.setCode(ResponseCode.SUCCESS);\n",
      "        response.setRemark(null);\n",
      "        return response;\n",
      "    }\n",
      "\n",
      "    private RemotingCommand updateConfig(ChannelHandlerContext ctx, RemotingCommand request) {\n",
      "        if (ctx != null) {\n",
      "            log.info(\"updateConfig called by {}\", RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n",
      "        }\n",
      "\n",
      "        final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n",
      "\n",
      "        byte[] body = request.getBody();\n",
      "        if (body != null) {\n",
      "            String bodyStr;\n",
      "            try {\n",
      "                bodyStr = new String(body, MixAll.DEFAULT_CHARSET);\n",
      "            } catch (UnsupportedEncodingException e) {\n",
      "                log.error(\"updateConfig byte array to string error: \", e);\n",
      "                response.setCode(ResponseCode.SYSTEM_ERROR);\n",
      "                response.setRemark(\"UnsupportedEncodingException \" + e);\n",
      "                return response;\n",
      "            }\n",
      "\n",
      "            Properties properties = MixAll.string2Properties(bodyStr);\n",
      "            if (properties == null) {\n",
      "                log.error(\"updateConfig MixAll.string2Properties error {}\", bodyStr);\n",
      "                response.setCode(ResponseCode.SYSTEM_ERROR);\n",
      "                response.setRemark(\"string2Properties error\");\n",
      "                return response;\n",
      "            }\n",
      "\n",
      "            this.namesrvController.getConfiguration().update(properties);\n",
      "        }\n",
      "\n",
      "        response.setCode(ResponseCode.SUCCESS);\n",
      "        response.setRemark(null);\n",
      "        return response;\n",
      "    }\n",
      "\n",
      "    private RemotingCommand getConfig(ChannelHandlerContext ctx, RemotingCommand request) {\n",
      "        final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n",
      "\n",
      "        String content = this.namesrvController.getConfiguration().getAllConfigsFormatString();\n",
      "        if (content != null && content.length() > 0) {\n",
      "            try {\n",
      "                response.setBody(content.getBytes(MixAll.DEFAULT_CHARSET));\n",
      "            } catch (UnsupportedEncodingException e) {\n",
      "                log.error(\"getConfig error, \", e);\n",
      "                response.setCode(ResponseCode.SYSTEM_ERROR);\n",
      "                response.setRemark(\"UnsupportedEncodingException \" + e);\n",
      "                return response;\n",
      "            }\n",
      "        }\n",
      "\n",
      "        response.setCode(ResponseCode.SUCCESS);\n",
      "        response.setRemark(null);\n",
      "        return response;\n",
      "    }\n",
      "\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.namesrv.processor;\n",
      "\n",
      "import io.netty.channel.Channel;\n",
      "import io.netty.channel.ChannelHandlerContext;\n",
      "import java.lang.reflect.Field;\n",
      "import java.lang.reflect.Modifier;\n",
      "import java.util.ArrayList;\n",
      "import java.util.HashMap;\n",
      "import java.util.Map;\n",
      "import java.util.concurrent.ConcurrentHashMap;\n",
      "import org.apache.rocketmq.common.TopicConfig;\n",
      "import org.apache.rocketmq.logging.InternalLogger;\n",
      "import org.apache.rocketmq.common.namesrv.NamesrvConfig;\n",
      "import org.apache.rocketmq.common.namesrv.RegisterBrokerResult;\n",
      "import org.apache.rocketmq.common.protocol.RequestCode;\n",
      "import org.apache.rocketmq.common.protocol.ResponseCode;\n",
      "import org.apache.rocketmq.common.protocol.body.TopicConfigSerializeWrapper;\n",
      "import org.apache.rocketmq.common.protocol.header.namesrv.DeleteKVConfigRequestHeader;\n",
      "import org.apache.rocketmq.common.protocol.header.namesrv.GetKVConfigRequestHeader;\n",
      "import org.apache.rocketmq.common.protocol.header.namesrv.GetKVConfigResponseHeader;\n",
      "import org.apache.rocketmq.common.protocol.header.namesrv.PutKVConfigRequestHeader;\n",
      "import org.apache.rocketmq.common.protocol.header.namesrv.RegisterBrokerRequestHeader;\n",
      "import org.apache.rocketmq.common.protocol.route.BrokerData;\n",
      "import org.apache.rocketmq.namesrv.NamesrvController;\n",
      "import org.apache.rocketmq.namesrv.routeinfo.RouteInfoManager;\n",
      "import org.apache.rocketmq.remoting.exception.RemotingCommandException;\n",
      "import org.apache.rocketmq.remoting.netty.NettyServerConfig;\n",
      "import org.apache.rocketmq.remoting.protocol.RemotingCommand;\n",
      "import org.assertj.core.util.Maps;\n",
      "import org.junit.Before;\n",
      "import org.junit.Test;\n",
      "\n",
      "import static org.assertj.core.api.Assertions.assertThat;\n",
      "import static org.mockito.Mockito.mock;\n",
      "import static org.mockito.Mockito.when;\n",
      "\n",
      "public class DefaultRequestProcessorTest {\n",
      "    private DefaultRequestProcessor defaultRequestProcessor;\n",
      "\n",
      "    private NamesrvController namesrvController;\n",
      "\n",
      "    private NamesrvConfig namesrvConfig;\n",
      "\n",
      "    private NettyServerConfig nettyServerConfig;\n",
      "\n",
      "    private RouteInfoManager routeInfoManager;\n",
      "\n",
      "    private InternalLogger logger;\n",
      "\n",
      "    @Before\n",
      "    public void init() throws Exception {\n",
      "        namesrvConfig = new NamesrvConfig();\n",
      "        nettyServerConfig = new NettyServerConfig();\n",
      "        routeInfoManager = new RouteInfoManager();\n",
      "\n",
      "        namesrvController = new NamesrvController(namesrvConfig, nettyServerConfig);\n",
      "\n",
      "        Field field = NamesrvController.class.getDeclaredField(\"routeInfoManager\");\n",
      "        field.setAccessible(true);\n",
      "        field.set(namesrvController, routeInfoManager);\n",
      "        defaultRequestProcessor = new DefaultRequestProcessor(namesrvController);\n",
      "\n",
      "        registerRouteInfoManager();\n",
      "\n",
      "        logger = mock(InternalLogger.class);\n",
      "        setFinalStatic(DefaultRequestProcessor.class.getDeclaredField(\"log\"), logger);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testProcessRequest_PutKVConfig() throws RemotingCommandException {\n",
      "        PutKVConfigRequestHeader header = new PutKVConfigRequestHeader();\n",
      "        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.PUT_KV_CONFIG,\n",
      "            header);\n",
      "        request.addExtField(\"namespace\", \"namespace\");\n",
      "        request.addExtField(\"key\", \"key\");\n",
      "        request.addExtField(\"value\", \"value\");\n",
      "\n",
      "        RemotingCommand response = defaultRequestProcessor.processRequest(null, request);\n",
      "\n",
      "        assertThat(response.getCode()).isEqualTo(ResponseCode.SUCCESS);\n",
      "        assertThat(response.getRemark()).isNull();\n",
      "\n",
      "        assertThat(namesrvController.getKvConfigManager().getKVConfig(\"namespace\", \"key\"))\n",
      "            .isEqualTo(\"value\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testProcessRequest_GetKVConfigReturnNotNull() throws RemotingCommandException {\n",
      "        namesrvController.getKvConfigManager().putKVConfig(\"namespace\", \"key\", \"value\");\n",
      "\n",
      "        GetKVConfigRequestHeader header = new GetKVConfigRequestHeader();\n",
      "        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.GET_KV_CONFIG,\n",
      "            header);\n",
      "        request.addExtField(\"namespace\", \"namespace\");\n",
      "        request.addExtField(\"key\", \"key\");\n",
      "\n",
      "        RemotingCommand response = defaultRequestProcessor.processRequest(null, request);\n",
      "\n",
      "        assertThat(response.getCode()).isEqualTo(ResponseCode.SUCCESS);\n",
      "        assertThat(response.getRemark()).isNull();\n",
      "\n",
      "        GetKVConfigResponseHeader responseHeader = (GetKVConfigResponseHeader) response\n",
      "            .readCustomHeader();\n",
      "\n",
      "        assertThat(responseHeader.getValue()).isEqualTo(\"value\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testProcessRequest_GetKVConfigReturnNull() throws RemotingCommandException {\n",
      "        GetKVConfigRequestHeader header = new GetKVConfigRequestHeader();\n",
      "        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.GET_KV_CONFIG,\n",
      "            header);\n",
      "        request.addExtField(\"namespace\", \"namespace\");\n",
      "        request.addExtField(\"key\", \"key\");\n",
      "\n",
      "        RemotingCommand response = defaultRequestProcessor.processRequest(null, request);\n",
      "\n",
      "        assertThat(response.getCode()).isEqualTo(ResponseCode.QUERY_NOT_FOUND);\n",
      "        assertThat(response.getRemark()).isEqualTo(\"No config item, Namespace: namespace Key: key\");\n",
      "\n",
      "        GetKVConfigResponseHeader responseHeader = (GetKVConfigResponseHeader) response\n",
      "            .readCustomHeader();\n",
      "\n",
      "        assertThat(responseHeader.getValue()).isNull();\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testProcessRequest_DeleteKVConfig() throws RemotingCommandException {\n",
      "        namesrvController.getKvConfigManager().putKVConfig(\"namespace\", \"key\", \"value\");\n",
      "\n",
      "        DeleteKVConfigRequestHeader header = new DeleteKVConfigRequestHeader();\n",
      "        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.DELETE_KV_CONFIG,\n",
      "            header);\n",
      "        request.addExtField(\"namespace\", \"namespace\");\n",
      "        request.addExtField(\"key\", \"key\");\n",
      "\n",
      "        RemotingCommand response = defaultRequestProcessor.processRequest(null, request);\n",
      "\n",
      "        assertThat(response.getCode()).isEqualTo(ResponseCode.SUCCESS);\n",
      "        assertThat(response.getRemark()).isNull();\n",
      "\n",
      "        assertThat(namesrvController.getKvConfigManager().getKVConfig(\"namespace\", \"key\"))\n",
      "            .isNull();\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testProcessRequest_RegisterBroker() throws RemotingCommandException,\n",
      "        NoSuchFieldException, IllegalAccessException {\n",
      "        RemotingCommand request = genSampleRegisterCmd(true);\n",
      "\n",
      "        ChannelHandlerContext ctx = mock(ChannelHandlerContext.class);\n",
      "        when(ctx.channel()).thenReturn(null);\n",
      "\n",
      "        RemotingCommand response = defaultRequestProcessor.processRequest(ctx, request);\n",
      "\n",
      "        assertThat(response.getCode()).isEqualTo(ResponseCode.SUCCESS);\n",
      "        assertThat(response.getRemark()).isNull();\n",
      "\n",
      "        RouteInfoManager routes = namesrvController.getRouteInfoManager();\n",
      "        Field brokerAddrTable = RouteInfoManager.class.getDeclaredField(\"brokerAddrTable\");\n",
      "        brokerAddrTable.setAccessible(true);\n",
      "\n",
      "        BrokerData broker = new BrokerData();\n",
      "        broker.setBrokerName(\"broker\");\n",
      "        broker.setBrokerAddrs((HashMap) Maps.newHashMap(new Long(2333), \"10.10.1.1\"));\n",
      "\n",
      "        assertThat((Map) brokerAddrTable.get(routes))\n",
      "            .contains(new HashMap.SimpleEntry(\"broker\", broker));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testProcessRequest_RegisterBrokerWithFilterServer() throws RemotingCommandException,\n",
      "        NoSuchFieldException, IllegalAccessException {\n",
      "        RemotingCommand request = genSampleRegisterCmd(true);\n",
      "\n",
      "        // version >= MQVersion.Version.V3_0_11.ordinal() to register with filter server\n",
      "        request.setVersion(100);\n",
      "\n",
      "        ChannelHandlerContext ctx = mock(ChannelHandlerContext.class);\n",
      "        when(ctx.channel()).thenReturn(null);\n",
      "\n",
      "        RemotingCommand response = defaultRequestProcessor.processRequest(ctx, request);\n",
      "\n",
      "        assertThat(response.getCode()).isEqualTo(ResponseCode.SUCCESS);\n",
      "        assertThat(response.getRemark()).isNull();\n",
      "\n",
      "        RouteInfoManager routes = namesrvController.getRouteInfoManager();\n",
      "        Field brokerAddrTable = RouteInfoManager.class.getDeclaredField(\"brokerAddrTable\");\n",
      "        brokerAddrTable.setAccessible(true);\n",
      "\n",
      "        BrokerData broker = new BrokerData();\n",
      "        broker.setBrokerName(\"broker\");\n",
      "        broker.setBrokerAddrs((HashMap) Maps.newHashMap(new Long(2333), \"10.10.1.1\"));\n",
      "\n",
      "        assertThat((Map) brokerAddrTable.get(routes))\n",
      "            .contains(new HashMap.SimpleEntry(\"broker\", broker));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testProcessRequest_UnregisterBroker() throws RemotingCommandException, NoSuchFieldException, IllegalAccessException {\n",
      "        ChannelHandlerContext ctx = mock(ChannelHandlerContext.class);\n",
      "        when(ctx.channel()).thenReturn(null);\n",
      "\n",
      "        //Register broker\n",
      "        RemotingCommand regRequest = genSampleRegisterCmd(true);\n",
      "        defaultRequestProcessor.processRequest(ctx, regRequest);\n",
      "\n",
      "        //Unregister broker\n",
      "        RemotingCommand unregRequest = genSampleRegisterCmd(false);\n",
      "        RemotingCommand unregResponse = defaultRequestProcessor.processRequest(ctx, unregRequest);\n",
      "\n",
      "        assertThat(unregResponse.getCode()).isEqualTo(ResponseCode.SUCCESS);\n",
      "        assertThat(unregResponse.getRemark()).isNull();\n",
      "\n",
      "        RouteInfoManager routes = namesrvController.getRouteInfoManager();\n",
      "        Field brokerAddrTable = RouteInfoManager.class.getDeclaredField(\"brokerAddrTable\");\n",
      "        brokerAddrTable.setAccessible(true);\n",
      "\n",
      "        assertThat((Map) brokerAddrTable.get(routes)).isNotEmpty();\n",
      "    }\n",
      "\n",
      "    private static RemotingCommand genSampleRegisterCmd(boolean reg) {\n",
      "        RegisterBrokerRequestHeader header = new RegisterBrokerRequestHeader();\n",
      "        header.setBrokerName(\"broker\");\n",
      "        RemotingCommand request = RemotingCommand.createRequestCommand(\n",
      "            reg ? RequestCode.REGISTER_BROKER : RequestCode.UNREGISTER_BROKER, header);\n",
      "        request.addExtField(\"brokerName\", \"broker\");\n",
      "        request.addExtField(\"brokerAddr\", \"10.10.1.1\");\n",
      "        request.addExtField(\"clusterName\", \"cluster\");\n",
      "        request.addExtField(\"haServerAddr\", \"10.10.2.1\");\n",
      "        request.addExtField(\"brokerId\", \"2333\");\n",
      "        return request;\n",
      "    }\n",
      "\n",
      "    private static void setFinalStatic(Field field, Object newValue) throws Exception {\n",
      "        field.setAccessible(true);\n",
      "        Field modifiersField = Field.class.getDeclaredField(\"modifiers\");\n",
      "        modifiersField.setAccessible(true);\n",
      "        modifiersField.setInt(field, field.getModifiers() & ~Modifier.FINAL);\n",
      "        field.set(null, newValue);\n",
      "    }\n",
      "\n",
      "    private void registerRouteInfoManager() {\n",
      "        TopicConfigSerializeWrapper topicConfigSerializeWrapper = new TopicConfigSerializeWrapper();\n",
      "        ConcurrentHashMap<String, TopicConfig> topicConfigConcurrentHashMap = new ConcurrentHashMap<>();\n",
      "        TopicConfig topicConfig = new TopicConfig();\n",
      "        topicConfig.setWriteQueueNums(8);\n",
      "        topicConfig.setTopicName(\"unit-test\");\n",
      "        topicConfig.setPerm(6);\n",
      "        topicConfig.setReadQueueNums(8);\n",
      "        topicConfig.setOrder(false);\n",
      "        topicConfigConcurrentHashMap.put(\"unit-test\", topicConfig);\n",
      "        topicConfigSerializeWrapper.setTopicConfigTable(topicConfigConcurrentHashMap);\n",
      "        Channel channel = mock(Channel.class);\n",
      "        RegisterBrokerResult registerBrokerResult = routeInfoManager.registerBroker(\"default-cluster\", \"127.0.0.1:10911\", \"default-broker\", 1234, \"127.0.0.1:1001\",\n",
      "            topicConfigSerializeWrapper, new ArrayList<String>(), channel);\n",
      "\n",
      "    }\n",
      "}"
    ],
    "method_lines_dic": {
      "DefaultRequestProcessor::::rejectRequest()": [
        137,
        140
      ]
    },
    "test_method_lines_dic": {
      "DefaultRequestProcessorTest::::init()": [
        66,
        83
      ],
      "DefaultRequestProcessorTest::::testProcessRequest_PutKVConfig()": [
        85,
        101
      ],
      "DefaultRequestProcessorTest::::testProcessRequest_GetKVConfigReturnNotNull()": [
        103,
        122
      ],
      "DefaultRequestProcessorTest::::testProcessRequest_GetKVConfigReturnNull()": [
        124,
        141
      ],
      "DefaultRequestProcessorTest::::testProcessRequest_DeleteKVConfig()": [
        143,
        160
      ],
      "DefaultRequestProcessorTest::::testProcessRequest_RegisterBroker()": [
        162,
        185
      ],
      "DefaultRequestProcessorTest::::testProcessRequest_RegisterBrokerWithFilterServer()": [
        187,
        213
      ],
      "DefaultRequestProcessorTest::::testProcessRequest_UnregisterBroker()": [
        215,
        236
      ],
      "DefaultRequestProcessorTest::::genSampleRegisterCmd(boolean)": [
        238,
        249
      ],
      "DefaultRequestProcessorTest::::setFinalStatic(java.lang.reflect.Field,java.lang.Object)": [
        251,
        257
      ],
      "DefaultRequestProcessorTest::::registerRouteInfoManager()": [
        259,
        274
      ]
    },
    "reverse_method_lines_dic": {
      "137": "DefaultRequestProcessor::::rejectRequest()",
      "138": "DefaultRequestProcessor::::rejectRequest()",
      "139": "DefaultRequestProcessor::::rejectRequest()",
      "140": "DefaultRequestProcessor::::rejectRequest()"
    },
    "test_reverse_method_lines_dic": {
      "66": "DefaultRequestProcessorTest::::init()",
      "67": "DefaultRequestProcessorTest::::init()",
      "68": "DefaultRequestProcessorTest::::init()",
      "69": "DefaultRequestProcessorTest::::init()",
      "70": "DefaultRequestProcessorTest::::init()",
      "71": "DefaultRequestProcessorTest::::init()",
      "72": "DefaultRequestProcessorTest::::init()",
      "73": "DefaultRequestProcessorTest::::init()",
      "74": "DefaultRequestProcessorTest::::init()",
      "75": "DefaultRequestProcessorTest::::init()",
      "76": "DefaultRequestProcessorTest::::init()",
      "77": "DefaultRequestProcessorTest::::init()",
      "78": "DefaultRequestProcessorTest::::init()",
      "79": "DefaultRequestProcessorTest::::init()",
      "80": "DefaultRequestProcessorTest::::init()",
      "81": "DefaultRequestProcessorTest::::init()",
      "82": "DefaultRequestProcessorTest::::init()",
      "83": "DefaultRequestProcessorTest::::init()",
      "85": "DefaultRequestProcessorTest::::testProcessRequest_PutKVConfig()",
      "86": "DefaultRequestProcessorTest::::testProcessRequest_PutKVConfig()",
      "87": "DefaultRequestProcessorTest::::testProcessRequest_PutKVConfig()",
      "88": "DefaultRequestProcessorTest::::testProcessRequest_PutKVConfig()",
      "89": "DefaultRequestProcessorTest::::testProcessRequest_PutKVConfig()",
      "90": "DefaultRequestProcessorTest::::testProcessRequest_PutKVConfig()",
      "91": "DefaultRequestProcessorTest::::testProcessRequest_PutKVConfig()",
      "92": "DefaultRequestProcessorTest::::testProcessRequest_PutKVConfig()",
      "93": "DefaultRequestProcessorTest::::testProcessRequest_PutKVConfig()",
      "94": "DefaultRequestProcessorTest::::testProcessRequest_PutKVConfig()",
      "95": "DefaultRequestProcessorTest::::testProcessRequest_PutKVConfig()",
      "96": "DefaultRequestProcessorTest::::testProcessRequest_PutKVConfig()",
      "97": "DefaultRequestProcessorTest::::testProcessRequest_PutKVConfig()",
      "98": "DefaultRequestProcessorTest::::testProcessRequest_PutKVConfig()",
      "99": "DefaultRequestProcessorTest::::testProcessRequest_PutKVConfig()",
      "100": "DefaultRequestProcessorTest::::testProcessRequest_PutKVConfig()",
      "101": "DefaultRequestProcessorTest::::testProcessRequest_PutKVConfig()",
      "103": "DefaultRequestProcessorTest::::testProcessRequest_GetKVConfigReturnNotNull()",
      "104": "DefaultRequestProcessorTest::::testProcessRequest_GetKVConfigReturnNotNull()",
      "105": "DefaultRequestProcessorTest::::testProcessRequest_GetKVConfigReturnNotNull()",
      "106": "DefaultRequestProcessorTest::::testProcessRequest_GetKVConfigReturnNotNull()",
      "107": "DefaultRequestProcessorTest::::testProcessRequest_GetKVConfigReturnNotNull()",
      "108": "DefaultRequestProcessorTest::::testProcessRequest_GetKVConfigReturnNotNull()",
      "109": "DefaultRequestProcessorTest::::testProcessRequest_GetKVConfigReturnNotNull()",
      "110": "DefaultRequestProcessorTest::::testProcessRequest_GetKVConfigReturnNotNull()",
      "111": "DefaultRequestProcessorTest::::testProcessRequest_GetKVConfigReturnNotNull()",
      "112": "DefaultRequestProcessorTest::::testProcessRequest_GetKVConfigReturnNotNull()",
      "113": "DefaultRequestProcessorTest::::testProcessRequest_GetKVConfigReturnNotNull()",
      "114": "DefaultRequestProcessorTest::::testProcessRequest_GetKVConfigReturnNotNull()",
      "115": "DefaultRequestProcessorTest::::testProcessRequest_GetKVConfigReturnNotNull()",
      "116": "DefaultRequestProcessorTest::::testProcessRequest_GetKVConfigReturnNotNull()",
      "117": "DefaultRequestProcessorTest::::testProcessRequest_GetKVConfigReturnNotNull()",
      "118": "DefaultRequestProcessorTest::::testProcessRequest_GetKVConfigReturnNotNull()",
      "119": "DefaultRequestProcessorTest::::testProcessRequest_GetKVConfigReturnNotNull()",
      "120": "DefaultRequestProcessorTest::::testProcessRequest_GetKVConfigReturnNotNull()",
      "121": "DefaultRequestProcessorTest::::testProcessRequest_GetKVConfigReturnNotNull()",
      "122": "DefaultRequestProcessorTest::::testProcessRequest_GetKVConfigReturnNotNull()",
      "124": "DefaultRequestProcessorTest::::testProcessRequest_GetKVConfigReturnNull()",
      "125": "DefaultRequestProcessorTest::::testProcessRequest_GetKVConfigReturnNull()",
      "126": "DefaultRequestProcessorTest::::testProcessRequest_GetKVConfigReturnNull()",
      "127": "DefaultRequestProcessorTest::::testProcessRequest_GetKVConfigReturnNull()",
      "128": "DefaultRequestProcessorTest::::testProcessRequest_GetKVConfigReturnNull()",
      "129": "DefaultRequestProcessorTest::::testProcessRequest_GetKVConfigReturnNull()",
      "130": "DefaultRequestProcessorTest::::testProcessRequest_GetKVConfigReturnNull()",
      "131": "DefaultRequestProcessorTest::::testProcessRequest_GetKVConfigReturnNull()",
      "132": "DefaultRequestProcessorTest::::testProcessRequest_GetKVConfigReturnNull()",
      "133": "DefaultRequestProcessorTest::::testProcessRequest_GetKVConfigReturnNull()",
      "134": "DefaultRequestProcessorTest::::testProcessRequest_GetKVConfigReturnNull()",
      "135": "DefaultRequestProcessorTest::::testProcessRequest_GetKVConfigReturnNull()",
      "136": "DefaultRequestProcessorTest::::testProcessRequest_GetKVConfigReturnNull()",
      "137": "DefaultRequestProcessorTest::::testProcessRequest_GetKVConfigReturnNull()",
      "138": "DefaultRequestProcessorTest::::testProcessRequest_GetKVConfigReturnNull()",
      "139": "DefaultRequestProcessorTest::::testProcessRequest_GetKVConfigReturnNull()",
      "140": "DefaultRequestProcessorTest::::testProcessRequest_GetKVConfigReturnNull()",
      "141": "DefaultRequestProcessorTest::::testProcessRequest_GetKVConfigReturnNull()",
      "143": "DefaultRequestProcessorTest::::testProcessRequest_DeleteKVConfig()",
      "144": "DefaultRequestProcessorTest::::testProcessRequest_DeleteKVConfig()",
      "145": "DefaultRequestProcessorTest::::testProcessRequest_DeleteKVConfig()",
      "146": "DefaultRequestProcessorTest::::testProcessRequest_DeleteKVConfig()",
      "147": "DefaultRequestProcessorTest::::testProcessRequest_DeleteKVConfig()",
      "148": "DefaultRequestProcessorTest::::testProcessRequest_DeleteKVConfig()",
      "149": "DefaultRequestProcessorTest::::testProcessRequest_DeleteKVConfig()",
      "150": "DefaultRequestProcessorTest::::testProcessRequest_DeleteKVConfig()",
      "151": "DefaultRequestProcessorTest::::testProcessRequest_DeleteKVConfig()",
      "152": "DefaultRequestProcessorTest::::testProcessRequest_DeleteKVConfig()",
      "153": "DefaultRequestProcessorTest::::testProcessRequest_DeleteKVConfig()",
      "154": "DefaultRequestProcessorTest::::testProcessRequest_DeleteKVConfig()",
      "155": "DefaultRequestProcessorTest::::testProcessRequest_DeleteKVConfig()",
      "156": "DefaultRequestProcessorTest::::testProcessRequest_DeleteKVConfig()",
      "157": "DefaultRequestProcessorTest::::testProcessRequest_DeleteKVConfig()",
      "158": "DefaultRequestProcessorTest::::testProcessRequest_DeleteKVConfig()",
      "159": "DefaultRequestProcessorTest::::testProcessRequest_DeleteKVConfig()",
      "160": "DefaultRequestProcessorTest::::testProcessRequest_DeleteKVConfig()",
      "162": "DefaultRequestProcessorTest::::testProcessRequest_RegisterBroker()",
      "163": "DefaultRequestProcessorTest::::testProcessRequest_RegisterBroker()",
      "164": "DefaultRequestProcessorTest::::testProcessRequest_RegisterBroker()",
      "165": "DefaultRequestProcessorTest::::testProcessRequest_RegisterBroker()",
      "166": "DefaultRequestProcessorTest::::testProcessRequest_RegisterBroker()",
      "167": "DefaultRequestProcessorTest::::testProcessRequest_RegisterBroker()",
      "168": "DefaultRequestProcessorTest::::testProcessRequest_RegisterBroker()",
      "169": "DefaultRequestProcessorTest::::testProcessRequest_RegisterBroker()",
      "170": "DefaultRequestProcessorTest::::testProcessRequest_RegisterBroker()",
      "171": "DefaultRequestProcessorTest::::testProcessRequest_RegisterBroker()",
      "172": "DefaultRequestProcessorTest::::testProcessRequest_RegisterBroker()",
      "173": "DefaultRequestProcessorTest::::testProcessRequest_RegisterBroker()",
      "174": "DefaultRequestProcessorTest::::testProcessRequest_RegisterBroker()",
      "175": "DefaultRequestProcessorTest::::testProcessRequest_RegisterBroker()",
      "176": "DefaultRequestProcessorTest::::testProcessRequest_RegisterBroker()",
      "177": "DefaultRequestProcessorTest::::testProcessRequest_RegisterBroker()",
      "178": "DefaultRequestProcessorTest::::testProcessRequest_RegisterBroker()",
      "179": "DefaultRequestProcessorTest::::testProcessRequest_RegisterBroker()",
      "180": "DefaultRequestProcessorTest::::testProcessRequest_RegisterBroker()",
      "181": "DefaultRequestProcessorTest::::testProcessRequest_RegisterBroker()",
      "182": "DefaultRequestProcessorTest::::testProcessRequest_RegisterBroker()",
      "183": "DefaultRequestProcessorTest::::testProcessRequest_RegisterBroker()",
      "184": "DefaultRequestProcessorTest::::testProcessRequest_RegisterBroker()",
      "185": "DefaultRequestProcessorTest::::testProcessRequest_RegisterBroker()",
      "187": "DefaultRequestProcessorTest::::testProcessRequest_RegisterBrokerWithFilterServer()",
      "188": "DefaultRequestProcessorTest::::testProcessRequest_RegisterBrokerWithFilterServer()",
      "189": "DefaultRequestProcessorTest::::testProcessRequest_RegisterBrokerWithFilterServer()",
      "190": "DefaultRequestProcessorTest::::testProcessRequest_RegisterBrokerWithFilterServer()",
      "191": "DefaultRequestProcessorTest::::testProcessRequest_RegisterBrokerWithFilterServer()",
      "192": "DefaultRequestProcessorTest::::testProcessRequest_RegisterBrokerWithFilterServer()",
      "193": "DefaultRequestProcessorTest::::testProcessRequest_RegisterBrokerWithFilterServer()",
      "194": "DefaultRequestProcessorTest::::testProcessRequest_RegisterBrokerWithFilterServer()",
      "195": "DefaultRequestProcessorTest::::testProcessRequest_RegisterBrokerWithFilterServer()",
      "196": "DefaultRequestProcessorTest::::testProcessRequest_RegisterBrokerWithFilterServer()",
      "197": "DefaultRequestProcessorTest::::testProcessRequest_RegisterBrokerWithFilterServer()",
      "198": "DefaultRequestProcessorTest::::testProcessRequest_RegisterBrokerWithFilterServer()",
      "199": "DefaultRequestProcessorTest::::testProcessRequest_RegisterBrokerWithFilterServer()",
      "200": "DefaultRequestProcessorTest::::testProcessRequest_RegisterBrokerWithFilterServer()",
      "201": "DefaultRequestProcessorTest::::testProcessRequest_RegisterBrokerWithFilterServer()",
      "202": "DefaultRequestProcessorTest::::testProcessRequest_RegisterBrokerWithFilterServer()",
      "203": "DefaultRequestProcessorTest::::testProcessRequest_RegisterBrokerWithFilterServer()",
      "204": "DefaultRequestProcessorTest::::testProcessRequest_RegisterBrokerWithFilterServer()",
      "205": "DefaultRequestProcessorTest::::testProcessRequest_RegisterBrokerWithFilterServer()",
      "206": "DefaultRequestProcessorTest::::testProcessRequest_RegisterBrokerWithFilterServer()",
      "207": "DefaultRequestProcessorTest::::testProcessRequest_RegisterBrokerWithFilterServer()",
      "208": "DefaultRequestProcessorTest::::testProcessRequest_RegisterBrokerWithFilterServer()",
      "209": "DefaultRequestProcessorTest::::testProcessRequest_RegisterBrokerWithFilterServer()",
      "210": "DefaultRequestProcessorTest::::testProcessRequest_RegisterBrokerWithFilterServer()",
      "211": "DefaultRequestProcessorTest::::testProcessRequest_RegisterBrokerWithFilterServer()",
      "212": "DefaultRequestProcessorTest::::testProcessRequest_RegisterBrokerWithFilterServer()",
      "213": "DefaultRequestProcessorTest::::testProcessRequest_RegisterBrokerWithFilterServer()",
      "215": "DefaultRequestProcessorTest::::testProcessRequest_UnregisterBroker()",
      "216": "DefaultRequestProcessorTest::::testProcessRequest_UnregisterBroker()",
      "217": "DefaultRequestProcessorTest::::testProcessRequest_UnregisterBroker()",
      "218": "DefaultRequestProcessorTest::::testProcessRequest_UnregisterBroker()",
      "219": "DefaultRequestProcessorTest::::testProcessRequest_UnregisterBroker()",
      "220": "DefaultRequestProcessorTest::::testProcessRequest_UnregisterBroker()",
      "221": "DefaultRequestProcessorTest::::testProcessRequest_UnregisterBroker()",
      "222": "DefaultRequestProcessorTest::::testProcessRequest_UnregisterBroker()",
      "223": "DefaultRequestProcessorTest::::testProcessRequest_UnregisterBroker()",
      "224": "DefaultRequestProcessorTest::::testProcessRequest_UnregisterBroker()",
      "225": "DefaultRequestProcessorTest::::testProcessRequest_UnregisterBroker()",
      "226": "DefaultRequestProcessorTest::::testProcessRequest_UnregisterBroker()",
      "227": "DefaultRequestProcessorTest::::testProcessRequest_UnregisterBroker()",
      "228": "DefaultRequestProcessorTest::::testProcessRequest_UnregisterBroker()",
      "229": "DefaultRequestProcessorTest::::testProcessRequest_UnregisterBroker()",
      "230": "DefaultRequestProcessorTest::::testProcessRequest_UnregisterBroker()",
      "231": "DefaultRequestProcessorTest::::testProcessRequest_UnregisterBroker()",
      "232": "DefaultRequestProcessorTest::::testProcessRequest_UnregisterBroker()",
      "233": "DefaultRequestProcessorTest::::testProcessRequest_UnregisterBroker()",
      "234": "DefaultRequestProcessorTest::::testProcessRequest_UnregisterBroker()",
      "235": "DefaultRequestProcessorTest::::testProcessRequest_UnregisterBroker()",
      "236": "DefaultRequestProcessorTest::::testProcessRequest_UnregisterBroker()",
      "238": "DefaultRequestProcessorTest::::genSampleRegisterCmd(boolean)",
      "239": "DefaultRequestProcessorTest::::genSampleRegisterCmd(boolean)",
      "240": "DefaultRequestProcessorTest::::genSampleRegisterCmd(boolean)",
      "241": "DefaultRequestProcessorTest::::genSampleRegisterCmd(boolean)",
      "242": "DefaultRequestProcessorTest::::genSampleRegisterCmd(boolean)",
      "243": "DefaultRequestProcessorTest::::genSampleRegisterCmd(boolean)",
      "244": "DefaultRequestProcessorTest::::genSampleRegisterCmd(boolean)",
      "245": "DefaultRequestProcessorTest::::genSampleRegisterCmd(boolean)",
      "246": "DefaultRequestProcessorTest::::genSampleRegisterCmd(boolean)",
      "247": "DefaultRequestProcessorTest::::genSampleRegisterCmd(boolean)",
      "248": "DefaultRequestProcessorTest::::genSampleRegisterCmd(boolean)",
      "249": "DefaultRequestProcessorTest::::genSampleRegisterCmd(boolean)",
      "251": "DefaultRequestProcessorTest::::setFinalStatic(java.lang.reflect.Field,java.lang.Object)",
      "252": "DefaultRequestProcessorTest::::setFinalStatic(java.lang.reflect.Field,java.lang.Object)",
      "253": "DefaultRequestProcessorTest::::setFinalStatic(java.lang.reflect.Field,java.lang.Object)",
      "254": "DefaultRequestProcessorTest::::setFinalStatic(java.lang.reflect.Field,java.lang.Object)",
      "255": "DefaultRequestProcessorTest::::setFinalStatic(java.lang.reflect.Field,java.lang.Object)",
      "256": "DefaultRequestProcessorTest::::setFinalStatic(java.lang.reflect.Field,java.lang.Object)",
      "257": "DefaultRequestProcessorTest::::setFinalStatic(java.lang.reflect.Field,java.lang.Object)",
      "259": "DefaultRequestProcessorTest::::registerRouteInfoManager()",
      "260": "DefaultRequestProcessorTest::::registerRouteInfoManager()",
      "261": "DefaultRequestProcessorTest::::registerRouteInfoManager()",
      "262": "DefaultRequestProcessorTest::::registerRouteInfoManager()",
      "263": "DefaultRequestProcessorTest::::registerRouteInfoManager()",
      "264": "DefaultRequestProcessorTest::::registerRouteInfoManager()",
      "265": "DefaultRequestProcessorTest::::registerRouteInfoManager()",
      "266": "DefaultRequestProcessorTest::::registerRouteInfoManager()",
      "267": "DefaultRequestProcessorTest::::registerRouteInfoManager()",
      "268": "DefaultRequestProcessorTest::::registerRouteInfoManager()",
      "269": "DefaultRequestProcessorTest::::registerRouteInfoManager()",
      "270": "DefaultRequestProcessorTest::::registerRouteInfoManager()",
      "271": "DefaultRequestProcessorTest::::registerRouteInfoManager()",
      "272": "DefaultRequestProcessorTest::::registerRouteInfoManager()",
      "273": "DefaultRequestProcessorTest::::registerRouteInfoManager()",
      "274": "DefaultRequestProcessorTest::::registerRouteInfoManager()"
    },
    "tests": [
      {
        "test_lines": [
          85,
          101
        ],
        "covered_lines": [
          65,
          69,
          70,
          71,
          77,
          85,
          87,
          144,
          145,
          146,
          148,
          149,
          150,
          151,
          154,
          155,
          156
        ]
      },
      {
        "test_lines": [
          103,
          122
        ],
        "covered_lines": [
          65,
          69,
          70,
          71,
          77,
          85,
          89,
          161,
          162,
          163,
          164,
          166,
          167,
          168,
          171,
          172,
          173,
          174,
          175
        ]
      },
      {
        "test_lines": [
          124,
          141
        ],
        "covered_lines": [
          65,
          69,
          70,
          71,
          77,
          85,
          89,
          161,
          162,
          163,
          164,
          166,
          167,
          168,
          171,
          178,
          179,
          180
        ]
      },
      {
        "test_lines": [
          143,
          160
        ],
        "covered_lines": [
          65,
          69,
          70,
          71,
          77,
          85,
          91,
          185,
          186,
          187,
          189,
          190,
          191,
          194,
          195,
          196
        ]
      },
      {
        "test_lines": [
          162,
          185
        ],
        "covered_lines": [
          65,
          69,
          70,
          71,
          77,
          78,
          79,
          80,
          85,
          96,
          97,
          101,
          248,
          256,
          292,
          294,
          295,
          296,
          298,
          305,
          308,
          309,
          310,
          314,
          315,
          316,
          317,
          318,
          319,
          322,
          326,
          327,
          329,
          330,
          331,
          332,
          333
        ]
      },
      {
        "test_lines": [
          187,
          213
        ],
        "covered_lines": [
          65,
          69,
          70,
          71,
          77,
          78,
          79,
          80,
          85,
          96,
          97,
          98,
          201,
          202,
          203,
          204,
          206,
          212,
          214,
          221,
          222,
          225,
          226,
          227,
          228,
          229,
          230,
          231,
          232,
          233,
          235,
          236,
          238,
          239,
          241,
          242,
          243,
          248,
          256
        ]
      },
      {
        "test_lines": [
          215,
          236
        ],
        "covered_lines": [
          65,
          69,
          70,
          71,
          77,
          78,
          79,
          80,
          85,
          96,
          97,
          101,
          104,
          248,
          256,
          292,
          294,
          295,
          296,
          298,
          305,
          308,
          309,
          310,
          314,
          315,
          316,
          317,
          318,
          319,
          322,
          326,
          327,
          329,
          330,
          331,
          332,
          333,
          338,
          339,
          340,
          342,
          343,
          344,
          345,
          346,
          348,
          349,
          350
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/RocketMQC/namesrv/src/main/java/org/apache/rocketmq/namesrv/routeinfo/RouteInfoManager.java": {
    "class_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.namesrv.routeinfo;\n",
      "\n",
      "import io.netty.channel.Channel;\n",
      "import java.util.HashMap;\n",
      "import java.util.HashSet;\n",
      "import java.util.Iterator;\n",
      "import java.util.LinkedList;\n",
      "import java.util.List;\n",
      "import java.util.Map;\n",
      "import java.util.Map.Entry;\n",
      "import java.util.Set;\n",
      "import java.util.concurrent.ConcurrentMap;\n",
      "import java.util.concurrent.locks.ReadWriteLock;\n",
      "import java.util.concurrent.locks.ReentrantReadWriteLock;\n",
      "import org.apache.rocketmq.common.DataVersion;\n",
      "import org.apache.rocketmq.common.MixAll;\n",
      "import org.apache.rocketmq.common.TopicConfig;\n",
      "import org.apache.rocketmq.common.constant.LoggerName;\n",
      "import org.apache.rocketmq.common.constant.PermName;\n",
      "import org.apache.rocketmq.logging.InternalLogger;\n",
      "import org.apache.rocketmq.logging.InternalLoggerFactory;\n",
      "import org.apache.rocketmq.common.namesrv.RegisterBrokerResult;\n",
      "import org.apache.rocketmq.common.protocol.body.ClusterInfo;\n",
      "import org.apache.rocketmq.common.protocol.body.TopicConfigSerializeWrapper;\n",
      "import org.apache.rocketmq.common.protocol.body.TopicList;\n",
      "import org.apache.rocketmq.common.protocol.route.BrokerData;\n",
      "import org.apache.rocketmq.common.protocol.route.QueueData;\n",
      "import org.apache.rocketmq.common.protocol.route.TopicRouteData;\n",
      "import org.apache.rocketmq.common.sysflag.TopicSysFlag;\n",
      "import org.apache.rocketmq.remoting.common.RemotingUtil;\n",
      "\n",
      "public class RouteInfoManager {\n",
      "    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.NAMESRV_LOGGER_NAME);\n",
      "    private final static long BROKER_CHANNEL_EXPIRED_TIME = 1000 * 60 * 2;\n",
      "    private final ReadWriteLock lock = new ReentrantReadWriteLock();\n",
      "    private final HashMap<String/* topic */, List<QueueData>> topicQueueTable;\n",
      "    private final HashMap<String/* brokerName */, BrokerData> brokerAddrTable;\n",
      "    private final HashMap<String/* clusterName */, Set<String/* brokerName */>> clusterAddrTable;\n",
      "    private final HashMap<String/* brokerAddr */, BrokerLiveInfo> brokerLiveTable;\n",
      "    private final HashMap<String/* brokerAddr */, List<String>/* Filter Server */> filterServerTable;\n",
      "\n",
      "    public RouteInfoManager() {\n",
      "        this.topicQueueTable = new HashMap<String, List<QueueData>>(1024);\n",
      "        this.brokerAddrTable = new HashMap<String, BrokerData>(128);\n",
      "        this.clusterAddrTable = new HashMap<String, Set<String>>(32);\n",
      "        this.brokerLiveTable = new HashMap<String, BrokerLiveInfo>(256);\n",
      "        this.filterServerTable = new HashMap<String, List<String>>(256);\n",
      "    }\n",
      "\n",
      "    public byte[] getAllClusterInfo() {\n",
      "        ClusterInfo clusterInfoSerializeWrapper = new ClusterInfo();\n",
      "        clusterInfoSerializeWrapper.setBrokerAddrTable(this.brokerAddrTable);\n",
      "        clusterInfoSerializeWrapper.setClusterAddrTable(this.clusterAddrTable);\n",
      "        return clusterInfoSerializeWrapper.encode();\n",
      "    }\n",
      "\n",
      "    public void deleteTopic(final String topic) {\n",
      "        try {\n",
      "            try {\n",
      "                this.lock.writeLock().lockInterruptibly();\n",
      "                this.topicQueueTable.remove(topic);\n",
      "            } finally {\n",
      "                this.lock.writeLock().unlock();\n",
      "            }\n",
      "        } catch (Exception e) {\n",
      "            log.error(\"deleteTopic Exception\", e);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    public byte[] getAllTopicList() {\n",
      "        TopicList topicList = new TopicList();\n",
      "        try {\n",
      "            try {\n",
      "                this.lock.readLock().lockInterruptibly();\n",
      "                topicList.getTopicList().addAll(this.topicQueueTable.keySet());\n",
      "            } finally {\n",
      "                this.lock.readLock().unlock();\n",
      "            }\n",
      "        } catch (Exception e) {\n",
      "            log.error(\"getAllTopicList Exception\", e);\n",
      "        }\n",
      "\n",
      "        return topicList.encode();\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u6ce8\u518cbroker\u5230NameServer\u4e0a\uff0cclusterName\uff0cbrokerAddr\uff0cbrokerName\uff0cbrokerId\u7b49\u4fe1\u606f\u52a0\u5165\u5230\u5bf9\u5e94\u7684\u8def\u7531\u6570\u636e\u8868\u4e2d\u53bb\n",
      "     * \u4f7f\u7528ReadWriteLock\u8fdb\u884c\u8bfb\u5199\u9501\u52a0\u9501\n",
      "     * @param clusterName\n",
      "     * @param brokerAddr\n",
      "     * @param brokerName\n",
      "     * @param brokerId\n",
      "     * @param haServerAddr\n",
      "     * @param topicConfigWrapper\n",
      "     * @param filterServerList\n",
      "     * @param channel\n",
      "     * @return\n",
      "     */\n",
      "    public RegisterBrokerResult registerBroker(\n",
      "        final String clusterName,\n",
      "        final String brokerAddr,\n",
      "        final String brokerName,\n",
      "        final long brokerId,\n",
      "        final String haServerAddr,\n",
      "        final TopicConfigSerializeWrapper topicConfigWrapper,\n",
      "        final List<String> filterServerList,\n",
      "        final Channel channel) {\n",
      "        RegisterBrokerResult result = new RegisterBrokerResult();\n",
      "        try {\n",
      "            try {\n",
      "                //\u52a0\u5165\u5199\u9501\uff0c\u540c\u4e00\u65f6\u95f4\uff0c\u53ea\u80fd\u4e00\u4e2a\u7ebf\u7a0b\u6267\u884c\n",
      "                this.lock.writeLock().lockInterruptibly();\n",
      "\n",
      "                Set<String> brokerNames = this.clusterAddrTable.get(clusterName);\n",
      "                if (null == brokerNames) {\n",
      "                    brokerNames = new HashSet<String>();\n",
      "                    this.clusterAddrTable.put(clusterName, brokerNames);\n",
      "                }\n",
      "                //\u5c06brokerName\u52a0\u5165\u5230\u8fd9\u4e2aset\u96c6\u5408\u53bb\uff0c\u6bcf\u969430s\u53d1\u9001\u6ce8\u518c\u8bf7\u6c42\u4f5c\u4e3a\u5fc3\u8df3\uff0c\u8fd9\u91cc\u4f1a\u53bb\u91cd\n",
      "                brokerNames.add(brokerName);\n",
      "\n",
      "                boolean registerFirst = false;\n",
      "                //\u5b58\u653e\u4e86\u6240\u6709broker\u7684\u8be6\u7ec6\u8def\u7531\u6570\u636e\uff0c\u6839\u636ebrokerName\u83b7\u53d6\u7684BrokerData\n",
      "                BrokerData brokerData = this.brokerAddrTable.get(brokerName);\n",
      "\n",
      "                //\u7b2c\u4e00\u6b21\u8bf7\u6c42\uff0c\u8fd9\u91cc\u5c31\u662fnull\uff0c\u5c01\u88c5\u4e00\u4e2abrokerdata\uff0c\u653e\u5165\u5230\u8def\u7531\u6570\u636e\u8868\n",
      "                if (null == brokerData) {\n",
      "                    registerFirst = true;\n",
      "                    brokerData = new BrokerData(clusterName, brokerName, new HashMap<Long, String>());\n",
      "                    this.brokerAddrTable.put(brokerName, brokerData);\n",
      "                }\n",
      "                Map<Long, String> brokerAddrsMap = brokerData.getBrokerAddrs();\n",
      "                //Switch slave to master: first remove <1, IP:PORT> in namesrv, then add <0, IP:PORT>\n",
      "                //The same IP:PORT must only have one record in brokerAddrTable\n",
      "                Iterator<Entry<Long, String>> it = brokerAddrsMap.entrySet().iterator();\n",
      "                while (it.hasNext()) {\n",
      "                    Entry<Long, String> item = it.next();\n",
      "                    if (null != brokerAddr && brokerAddr.equals(item.getValue()) && brokerId != item.getKey()) {\n",
      "                        it.remove();\n",
      "                    }\n",
      "                }\n",
      "\n",
      "                String oldAddr = brokerData.getBrokerAddrs().put(brokerId, brokerAddr);\n",
      "                registerFirst = registerFirst || (null == oldAddr);\n",
      "\n",
      "                if (null != topicConfigWrapper\n",
      "                    && MixAll.MASTER_ID == brokerId) {\n",
      "                    if (this.isBrokerTopicConfigChanged(brokerAddr, topicConfigWrapper.getDataVersion())\n",
      "                        || registerFirst) {\n",
      "                        ConcurrentMap<String, TopicConfig> tcTable =\n",
      "                            topicConfigWrapper.getTopicConfigTable();\n",
      "                        if (tcTable != null) {\n",
      "                            for (Map.Entry<String, TopicConfig> entry : tcTable.entrySet()) {\n",
      "                                this.createAndUpdateQueueData(brokerName, entry.getValue());\n",
      "                            }\n",
      "                        }\n",
      "                    }\n",
      "                }\n",
      "\n",
      "                //\u5fc3\u8df3\u673a\u5236\uff1abroker\u6bcf\u8fc730s\u5c31\u4f1a\u5c01\u88c5\u4e00\u4e2a\u65b0\u7684BrokerLiveInfo\u653e\u5165map\uff0c\u8986\u76d6\u4e4b\u524d\u7684\u4e0a\u4e00\u6b21\u7684BrokerLiveInfo\n",
      "                BrokerLiveInfo prevBrokerLiveInfo = this.brokerLiveTable.put(brokerAddr,\n",
      "                    new BrokerLiveInfo(\n",
      "                        System.currentTimeMillis(),\n",
      "                        topicConfigWrapper.getDataVersion(),\n",
      "                        channel,\n",
      "                        haServerAddr));\n",
      "                if (null == prevBrokerLiveInfo) {\n",
      "                    log.info(\"new broker registered, {} HAServer: {}\", brokerAddr, haServerAddr);\n",
      "                }\n",
      "\n",
      "                if (filterServerList != null) {\n",
      "                    if (filterServerList.isEmpty()) {\n",
      "                        this.filterServerTable.remove(brokerAddr);\n",
      "                    } else {\n",
      "                        this.filterServerTable.put(brokerAddr, filterServerList);\n",
      "                    }\n",
      "                }\n",
      "\n",
      "                if (MixAll.MASTER_ID != brokerId) {\n",
      "                    String masterAddr = brokerData.getBrokerAddrs().get(MixAll.MASTER_ID);\n",
      "                    if (masterAddr != null) {\n",
      "                        BrokerLiveInfo brokerLiveInfo = this.brokerLiveTable.get(masterAddr);\n",
      "                        if (brokerLiveInfo != null) {\n",
      "                            result.setHaServerAddr(brokerLiveInfo.getHaServerAddr());\n",
      "                            result.setMasterAddr(masterAddr);\n",
      "                        }\n",
      "                    }\n",
      "                }\n",
      "            } finally {\n",
      "                this.lock.writeLock().unlock();\n",
      "            }\n",
      "        } catch (Exception e) {\n",
      "            log.error(\"registerBroker Exception\", e);\n",
      "        }\n",
      "\n",
      "        return result;\n",
      "    }\n",
      "\n",
      "    public boolean isBrokerTopicConfigChanged(final String brokerAddr, final DataVersion dataVersion) {\n",
      "        DataVersion prev = queryBrokerTopicConfig(brokerAddr);\n",
      "        return null == prev || !prev.equals(dataVersion);\n",
      "    }\n",
      "\n",
      "    public DataVersion queryBrokerTopicConfig(final String brokerAddr) {\n",
      "        BrokerLiveInfo prev = this.brokerLiveTable.get(brokerAddr);\n",
      "        if (prev != null) {\n",
      "            return prev.getDataVersion();\n",
      "        }\n",
      "        return null;\n",
      "    }\n",
      "\n",
      "    public void updateBrokerInfoUpdateTimestamp(final String brokerAddr) {\n",
      "        BrokerLiveInfo prev = this.brokerLiveTable.get(brokerAddr);\n",
      "        if (prev != null) {\n",
      "            prev.setLastUpdateTimestamp(System.currentTimeMillis());\n",
      "        }\n",
      "    }\n",
      "\n",
      "    private void createAndUpdateQueueData(final String brokerName, final TopicConfig topicConfig) {\n",
      "        QueueData queueData = new QueueData();\n",
      "        queueData.setBrokerName(brokerName);\n",
      "        queueData.setWriteQueueNums(topicConfig.getWriteQueueNums());\n",
      "        queueData.setReadQueueNums(topicConfig.getReadQueueNums());\n",
      "        queueData.setPerm(topicConfig.getPerm());\n",
      "        queueData.setTopicSynFlag(topicConfig.getTopicSysFlag());\n",
      "\n",
      "        List<QueueData> queueDataList = this.topicQueueTable.get(topicConfig.getTopicName());\n",
      "        if (null == queueDataList) {\n",
      "            queueDataList = new LinkedList<QueueData>();\n",
      "            queueDataList.add(queueData);\n",
      "            this.topicQueueTable.put(topicConfig.getTopicName(), queueDataList);\n",
      "            log.info(\"new topic registered, {} {}\", topicConfig.getTopicName(), queueData);\n",
      "        } else {\n",
      "            boolean addNewOne = true;\n",
      "\n",
      "            Iterator<QueueData> it = queueDataList.iterator();\n",
      "            while (it.hasNext()) {\n",
      "                QueueData qd = it.next();\n",
      "                if (qd.getBrokerName().equals(brokerName)) {\n",
      "                    if (qd.equals(queueData)) {\n",
      "                        addNewOne = false;\n",
      "                    } else {\n",
      "                        log.info(\"topic changed, {} OLD: {} NEW: {}\", topicConfig.getTopicName(), qd,\n",
      "                            queueData);\n",
      "                        it.remove();\n",
      "                    }\n",
      "                }\n",
      "            }\n",
      "\n",
      "            if (addNewOne) {\n",
      "                queueDataList.add(queueData);\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    public int wipeWritePermOfBrokerByLock(final String brokerName) {\n",
      "        try {\n",
      "            try {\n",
      "                this.lock.writeLock().lockInterruptibly();\n",
      "                return wipeWritePermOfBroker(brokerName);\n",
      "            } finally {\n",
      "                this.lock.writeLock().unlock();\n",
      "            }\n",
      "        } catch (Exception e) {\n",
      "            log.error(\"wipeWritePermOfBrokerByLock Exception\", e);\n",
      "        }\n",
      "\n",
      "        return 0;\n",
      "    }\n",
      "\n",
      "    private int wipeWritePermOfBroker(final String brokerName) {\n",
      "        int wipeTopicCnt = 0;\n",
      "        Iterator<Entry<String, List<QueueData>>> itTopic = this.topicQueueTable.entrySet().iterator();\n",
      "        while (itTopic.hasNext()) {\n",
      "            Entry<String, List<QueueData>> entry = itTopic.next();\n",
      "            List<QueueData> qdList = entry.getValue();\n",
      "\n",
      "            Iterator<QueueData> it = qdList.iterator();\n",
      "            while (it.hasNext()) {\n",
      "                QueueData qd = it.next();\n",
      "                if (qd.getBrokerName().equals(brokerName)) {\n",
      "                    int perm = qd.getPerm();\n",
      "                    perm &= ~PermName.PERM_WRITE;\n",
      "                    qd.setPerm(perm);\n",
      "                    wipeTopicCnt++;\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "\n",
      "        return wipeTopicCnt;\n",
      "    }\n",
      "\n",
      "    public void unregisterBroker(\n",
      "        final String clusterName,\n",
      "        final String brokerAddr,\n",
      "        final String brokerName,\n",
      "        final long brokerId) {\n",
      "        try {\n",
      "            try {\n",
      "                this.lock.writeLock().lockInterruptibly();\n",
      "                BrokerLiveInfo brokerLiveInfo = this.brokerLiveTable.remove(brokerAddr);\n",
      "                log.info(\"unregisterBroker, remove from brokerLiveTable {}, {}\",\n",
      "                    brokerLiveInfo != null ? \"OK\" : \"Failed\",\n",
      "                    brokerAddr\n",
      "                );\n",
      "\n",
      "                this.filterServerTable.remove(brokerAddr);\n",
      "\n",
      "                boolean removeBrokerName = false;\n",
      "                BrokerData brokerData = this.brokerAddrTable.get(brokerName);\n",
      "                if (null != brokerData) {\n",
      "                    String addr = brokerData.getBrokerAddrs().remove(brokerId);\n",
      "                    log.info(\"unregisterBroker, remove addr from brokerAddrTable {}, {}\",\n",
      "                        addr != null ? \"OK\" : \"Failed\",\n",
      "                        brokerAddr\n",
      "                    );\n",
      "\n",
      "                    if (brokerData.getBrokerAddrs().isEmpty()) {\n",
      "                        this.brokerAddrTable.remove(brokerName);\n",
      "                        log.info(\"unregisterBroker, remove name from brokerAddrTable OK, {}\",\n",
      "                            brokerName\n",
      "                        );\n",
      "\n",
      "                        removeBrokerName = true;\n",
      "                    }\n",
      "                }\n",
      "\n",
      "                if (removeBrokerName) {\n",
      "                    Set<String> nameSet = this.clusterAddrTable.get(clusterName);\n",
      "                    if (nameSet != null) {\n",
      "                        boolean removed = nameSet.remove(brokerName);\n",
      "                        log.info(\"unregisterBroker, remove name from clusterAddrTable {}, {}\",\n",
      "                            removed ? \"OK\" : \"Failed\",\n",
      "                            brokerName);\n",
      "\n",
      "                        if (nameSet.isEmpty()) {\n",
      "                            this.clusterAddrTable.remove(clusterName);\n",
      "                            log.info(\"unregisterBroker, remove cluster from clusterAddrTable {}\",\n",
      "                                clusterName\n",
      "                            );\n",
      "                        }\n",
      "                    }\n",
      "                    this.removeTopicByBrokerName(brokerName);\n",
      "                }\n",
      "            } finally {\n",
      "                this.lock.writeLock().unlock();\n",
      "            }\n",
      "        } catch (Exception e) {\n",
      "            log.error(\"unregisterBroker Exception\", e);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    private void removeTopicByBrokerName(final String brokerName) {\n",
      "        Iterator<Entry<String, List<QueueData>>> itMap = this.topicQueueTable.entrySet().iterator();\n",
      "        while (itMap.hasNext()) {\n",
      "            Entry<String, List<QueueData>> entry = itMap.next();\n",
      "\n",
      "            String topic = entry.getKey();\n",
      "            List<QueueData> queueDataList = entry.getValue();\n",
      "            Iterator<QueueData> it = queueDataList.iterator();\n",
      "            while (it.hasNext()) {\n",
      "                QueueData qd = it.next();\n",
      "                if (qd.getBrokerName().equals(brokerName)) {\n",
      "                    log.info(\"removeTopicByBrokerName, remove one broker's topic {} {}\", topic, qd);\n",
      "                    it.remove();\n",
      "                }\n",
      "            }\n",
      "\n",
      "            if (queueDataList.isEmpty()) {\n",
      "                log.info(\"removeTopicByBrokerName, remove the topic all queue {}\", topic);\n",
      "                itMap.remove();\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    public TopicRouteData pickupTopicRouteData(final String topic) {\n",
      "        TopicRouteData topicRouteData = new TopicRouteData();\n",
      "        boolean foundQueueData = false;\n",
      "        boolean foundBrokerData = false;\n",
      "        Set<String> brokerNameSet = new HashSet<String>();\n",
      "        List<BrokerData> brokerDataList = new LinkedList<BrokerData>();\n",
      "        topicRouteData.setBrokerDatas(brokerDataList);\n",
      "\n",
      "        HashMap<String, List<String>> filterServerMap = new HashMap<String, List<String>>();\n",
      "        topicRouteData.setFilterServerTable(filterServerMap);\n",
      "\n",
      "        try {\n",
      "            try {\n",
      "                this.lock.readLock().lockInterruptibly();\n",
      "                List<QueueData> queueDataList = this.topicQueueTable.get(topic);\n",
      "                if (queueDataList != null) {\n",
      "                    topicRouteData.setQueueDatas(queueDataList);\n",
      "                    foundQueueData = true;\n",
      "\n",
      "                    Iterator<QueueData> it = queueDataList.iterator();\n",
      "                    while (it.hasNext()) {\n",
      "                        QueueData qd = it.next();\n",
      "                        brokerNameSet.add(qd.getBrokerName());\n",
      "                    }\n",
      "\n",
      "                    for (String brokerName : brokerNameSet) {\n",
      "                        BrokerData brokerData = this.brokerAddrTable.get(brokerName);\n",
      "                        if (null != brokerData) {\n",
      "                            BrokerData brokerDataClone = new BrokerData(brokerData.getCluster(), brokerData.getBrokerName(), (HashMap<Long, String>) brokerData\n",
      "                                .getBrokerAddrs().clone());\n",
      "                            brokerDataList.add(brokerDataClone);\n",
      "                            foundBrokerData = true;\n",
      "                            for (final String brokerAddr : brokerDataClone.getBrokerAddrs().values()) {\n",
      "                                List<String> filterServerList = this.filterServerTable.get(brokerAddr);\n",
      "                                filterServerMap.put(brokerAddr, filterServerList);\n",
      "                            }\n",
      "                        }\n",
      "                    }\n",
      "                }\n",
      "            } finally {\n",
      "                this.lock.readLock().unlock();\n",
      "            }\n",
      "        } catch (Exception e) {\n",
      "            log.error(\"pickupTopicRouteData Exception\", e);\n",
      "        }\n",
      "\n",
      "        log.debug(\"pickupTopicRouteData {} {}\", topic, topicRouteData);\n",
      "\n",
      "        if (foundBrokerData && foundQueueData) {\n",
      "            return topicRouteData;\n",
      "        }\n",
      "\n",
      "        return null;\n",
      "    }\n",
      "\n",
      "    public void scanNotActiveBroker() {\n",
      "        //\u5fc3\u8df3\u673a\u5236\uff1a\u904d\u5386brokerLiveTable \u62ff\u5230\u6700\u8fd1\u4e00\u6b21\u5fc3\u8df3\u7684BrokerLiveInfo\n",
      "        Iterator<Entry<String, BrokerLiveInfo>> it = this.brokerLiveTable.entrySet().iterator();\n",
      "        while (it.hasNext()) {\n",
      "            Entry<String, BrokerLiveInfo> next = it.next();\n",
      "            long last = next.getValue().getLastUpdateTimestamp();\n",
      "            //\u5fc3\u8df3\u673a\u5236\uff1a\u5982\u679c\u4e24\u5206\u949f\u90fd\u6ca1\u6709\u6536\u5230\u5bf9\u5e94\u7684\u5fc3\u8df3\u6570\u636e\uff0c\u5219\u8bf4\u660ebroker\u6b7b\u6389\u4e86\n",
      "            if ((last + BROKER_CHANNEL_EXPIRED_TIME) < System.currentTimeMillis()) {\n",
      "                RemotingUtil.closeChannel(next.getValue().getChannel());\n",
      "                it.remove();\n",
      "                log.warn(\"The broker channel expired, {} {}ms\", next.getKey(), BROKER_CHANNEL_EXPIRED_TIME);\n",
      "                //\u5fc3\u8df3\u673a\u5236\uff1a\u4f1a\u628a\u8fd9\u4e2abroker\u4ece\u8def\u7531\u6570\u636e\u8868\u91cc\u5254\u9664\u51fa\u53bb(\u5c06\u4e0b\u7ebf\u7684broker\u7684\u4fe1\u606f)\n",
      "                this.onChannelDestroy(next.getKey(), next.getValue().getChannel());\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * \u4f7f\u7528HashMap\u5b9a\u4e49\u4e86topicQueueTable\u3001brokerAddrTable\u3001clusterAddrTable\u3001clusterAddrTable\u3001filterServerTable\n",
      "     * \u5728onChannelDestroy\u65b9\u6cd5\u91cc\u5934\u4f7f\u7528\u8bfb\u5199\u9501\u5bf9\u8fd9\u4e9bmap\u8fdb\u884c\u5e76\u53d1\u63a7\u5236\n",
      "     * \u9996\u5148\u627e\u4e8b\u4ef6channel\u5bf9\u5e94\u7684broker\u4fe1\u606f\uff0c\u7136\u540e\u5c06\u5176\u4ecebrokerLiveTable\u3001filterServerTable\u3001brokerAddrTable\u3001clusterAddrTable\u3001topicQueueTable\u4e2d\u79fb\u9664\n",
      "     * @param remoteAddr\n",
      "     * @param channel\n",
      "     */\n",
      "    public void onChannelDestroy(String remoteAddr, Channel channel) {\n",
      "        String brokerAddrFound = null;\n",
      "        if (channel != null) {\n",
      "            try {\n",
      "                try {\n",
      "                    this.lock.readLock().lockInterruptibly();\n",
      "                    Iterator<Entry<String, BrokerLiveInfo>> itBrokerLiveTable =\n",
      "                        this.brokerLiveTable.entrySet().iterator();\n",
      "                    while (itBrokerLiveTable.hasNext()) {\n",
      "                        Entry<String, BrokerLiveInfo> entry = itBrokerLiveTable.next();\n",
      "                        if (entry.getValue().getChannel() == channel) {\n",
      "                            brokerAddrFound = entry.getKey();\n",
      "                            break;\n",
      "                        }\n",
      "                    }\n",
      "                } finally {\n",
      "                    this.lock.readLock().unlock();\n",
      "                }\n",
      "            } catch (Exception e) {\n",
      "                log.error(\"onChannelDestroy Exception\", e);\n",
      "            }\n",
      "        }\n",
      "\n",
      "        if (null == brokerAddrFound) {\n",
      "            brokerAddrFound = remoteAddr;\n",
      "        } else {\n",
      "            log.info(\"the broker's channel destroyed, {}, clean it's data structure at once\", brokerAddrFound);\n",
      "        }\n",
      "\n",
      "        if (brokerAddrFound != null && brokerAddrFound.length() > 0) {\n",
      "\n",
      "            try {\n",
      "                try {\n",
      "                    this.lock.writeLock().lockInterruptibly();\n",
      "                    this.brokerLiveTable.remove(brokerAddrFound);\n",
      "                    this.filterServerTable.remove(brokerAddrFound);\n",
      "                    String brokerNameFound = null;\n",
      "                    boolean removeBrokerName = false;\n",
      "                    Iterator<Entry<String, BrokerData>> itBrokerAddrTable =\n",
      "                        this.brokerAddrTable.entrySet().iterator();\n",
      "                    while (itBrokerAddrTable.hasNext() && (null == brokerNameFound)) {\n",
      "                        BrokerData brokerData = itBrokerAddrTable.next().getValue();\n",
      "\n",
      "                        Iterator<Entry<Long, String>> it = brokerData.getBrokerAddrs().entrySet().iterator();\n",
      "                        while (it.hasNext()) {\n",
      "                            Entry<Long, String> entry = it.next();\n",
      "                            Long brokerId = entry.getKey();\n",
      "                            String brokerAddr = entry.getValue();\n",
      "                            if (brokerAddr.equals(brokerAddrFound)) {\n",
      "                                brokerNameFound = brokerData.getBrokerName();\n",
      "                                it.remove();\n",
      "                                log.info(\"remove brokerAddr[{}, {}] from brokerAddrTable, because channel destroyed\",\n",
      "                                    brokerId, brokerAddr);\n",
      "                                break;\n",
      "                            }\n",
      "                        }\n",
      "\n",
      "                        if (brokerData.getBrokerAddrs().isEmpty()) {\n",
      "                            removeBrokerName = true;\n",
      "                            itBrokerAddrTable.remove();\n",
      "                            log.info(\"remove brokerName[{}] from brokerAddrTable, because channel destroyed\",\n",
      "                                brokerData.getBrokerName());\n",
      "                        }\n",
      "                    }\n",
      "\n",
      "                    if (brokerNameFound != null && removeBrokerName) {\n",
      "                        Iterator<Entry<String, Set<String>>> it = this.clusterAddrTable.entrySet().iterator();\n",
      "                        while (it.hasNext()) {\n",
      "                            Entry<String, Set<String>> entry = it.next();\n",
      "                            String clusterName = entry.getKey();\n",
      "                            Set<String> brokerNames = entry.getValue();\n",
      "                            boolean removed = brokerNames.remove(brokerNameFound);\n",
      "                            if (removed) {\n",
      "                                log.info(\"remove brokerName[{}], clusterName[{}] from clusterAddrTable, because channel destroyed\",\n",
      "                                    brokerNameFound, clusterName);\n",
      "\n",
      "                                if (brokerNames.isEmpty()) {\n",
      "                                    log.info(\"remove the clusterName[{}] from clusterAddrTable, because channel destroyed and no broker in this cluster\",\n",
      "                                        clusterName);\n",
      "                                    it.remove();\n",
      "                                }\n",
      "\n",
      "                                break;\n",
      "                            }\n",
      "                        }\n",
      "                    }\n",
      "\n",
      "                    if (removeBrokerName) {\n",
      "                        Iterator<Entry<String, List<QueueData>>> itTopicQueueTable =\n",
      "                            this.topicQueueTable.entrySet().iterator();\n",
      "                        while (itTopicQueueTable.hasNext()) {\n",
      "                            Entry<String, List<QueueData>> entry = itTopicQueueTable.next();\n",
      "                            String topic = entry.getKey();\n",
      "                            List<QueueData> queueDataList = entry.getValue();\n",
      "\n",
      "                            Iterator<QueueData> itQueueData = queueDataList.iterator();\n",
      "                            while (itQueueData.hasNext()) {\n",
      "                                QueueData queueData = itQueueData.next();\n",
      "                                if (queueData.getBrokerName().equals(brokerNameFound)) {\n",
      "                                    itQueueData.remove();\n",
      "                                    log.info(\"remove topic[{} {}], from topicQueueTable, because channel destroyed\",\n",
      "                                        topic, queueData);\n",
      "                                }\n",
      "                            }\n",
      "\n",
      "                            if (queueDataList.isEmpty()) {\n",
      "                                itTopicQueueTable.remove();\n",
      "                                log.info(\"remove topic[{}] all queue, from topicQueueTable, because channel destroyed\",\n",
      "                                    topic);\n",
      "                            }\n",
      "                        }\n",
      "                    }\n",
      "                } finally {\n",
      "                    this.lock.writeLock().unlock();\n",
      "                }\n",
      "            } catch (Exception e) {\n",
      "                log.error(\"onChannelDestroy Exception\", e);\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    public void printAllPeriodically() {\n",
      "        try {\n",
      "            try {\n",
      "                this.lock.readLock().lockInterruptibly();\n",
      "                log.info(\"--------------------------------------------------------\");\n",
      "                {\n",
      "                    log.info(\"topicQueueTable SIZE: {}\", this.topicQueueTable.size());\n",
      "                    Iterator<Entry<String, List<QueueData>>> it = this.topicQueueTable.entrySet().iterator();\n",
      "                    while (it.hasNext()) {\n",
      "                        Entry<String, List<QueueData>> next = it.next();\n",
      "                        log.info(\"topicQueueTable Topic: {} {}\", next.getKey(), next.getValue());\n",
      "                    }\n",
      "                }\n",
      "\n",
      "                {\n",
      "                    log.info(\"brokerAddrTable SIZE: {}\", this.brokerAddrTable.size());\n",
      "                    Iterator<Entry<String, BrokerData>> it = this.brokerAddrTable.entrySet().iterator();\n",
      "                    while (it.hasNext()) {\n",
      "                        Entry<String, BrokerData> next = it.next();\n",
      "                        log.info(\"brokerAddrTable brokerName: {} {}\", next.getKey(), next.getValue());\n",
      "                    }\n",
      "                }\n",
      "\n",
      "                {\n",
      "                    log.info(\"brokerLiveTable SIZE: {}\", this.brokerLiveTable.size());\n",
      "                    Iterator<Entry<String, BrokerLiveInfo>> it = this.brokerLiveTable.entrySet().iterator();\n",
      "                    while (it.hasNext()) {\n",
      "                        Entry<String, BrokerLiveInfo> next = it.next();\n",
      "                        log.info(\"brokerLiveTable brokerAddr: {} {}\", next.getKey(), next.getValue());\n",
      "                    }\n",
      "                }\n",
      "\n",
      "                {\n",
      "                    log.info(\"clusterAddrTable SIZE: {}\", this.clusterAddrTable.size());\n",
      "                    Iterator<Entry<String, Set<String>>> it = this.clusterAddrTable.entrySet().iterator();\n",
      "                    while (it.hasNext()) {\n",
      "                        Entry<String, Set<String>> next = it.next();\n",
      "                        log.info(\"clusterAddrTable clusterName: {} {}\", next.getKey(), next.getValue());\n",
      "                    }\n",
      "                }\n",
      "            } finally {\n",
      "                this.lock.readLock().unlock();\n",
      "            }\n",
      "        } catch (Exception e) {\n",
      "            log.error(\"printAllPeriodically Exception\", e);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    public byte[] getSystemTopicList() {\n",
      "        TopicList topicList = new TopicList();\n",
      "        try {\n",
      "            try {\n",
      "                this.lock.readLock().lockInterruptibly();\n",
      "                for (Map.Entry<String, Set<String>> entry : clusterAddrTable.entrySet()) {\n",
      "                    topicList.getTopicList().add(entry.getKey());\n",
      "                    topicList.getTopicList().addAll(entry.getValue());\n",
      "                }\n",
      "\n",
      "                if (brokerAddrTable != null && !brokerAddrTable.isEmpty()) {\n",
      "                    Iterator<String> it = brokerAddrTable.keySet().iterator();\n",
      "                    while (it.hasNext()) {\n",
      "                        BrokerData bd = brokerAddrTable.get(it.next());\n",
      "                        HashMap<Long, String> brokerAddrs = bd.getBrokerAddrs();\n",
      "                        if (brokerAddrs != null && !brokerAddrs.isEmpty()) {\n",
      "                            Iterator<Long> it2 = brokerAddrs.keySet().iterator();\n",
      "                            topicList.setBrokerAddr(brokerAddrs.get(it2.next()));\n",
      "                            break;\n",
      "                        }\n",
      "                    }\n",
      "                }\n",
      "            } finally {\n",
      "                this.lock.readLock().unlock();\n",
      "            }\n",
      "        } catch (Exception e) {\n",
      "            log.error(\"getAllTopicList Exception\", e);\n",
      "        }\n",
      "\n",
      "        return topicList.encode();\n",
      "    }\n",
      "\n",
      "    public byte[] getTopicsByCluster(String cluster) {\n",
      "        TopicList topicList = new TopicList();\n",
      "        try {\n",
      "            try {\n",
      "                this.lock.readLock().lockInterruptibly();\n",
      "                Set<String> brokerNameSet = this.clusterAddrTable.get(cluster);\n",
      "                for (String brokerName : brokerNameSet) {\n",
      "                    Iterator<Entry<String, List<QueueData>>> topicTableIt =\n",
      "                        this.topicQueueTable.entrySet().iterator();\n",
      "                    while (topicTableIt.hasNext()) {\n",
      "                        Entry<String, List<QueueData>> topicEntry = topicTableIt.next();\n",
      "                        String topic = topicEntry.getKey();\n",
      "                        List<QueueData> queueDatas = topicEntry.getValue();\n",
      "                        for (QueueData queueData : queueDatas) {\n",
      "                            if (brokerName.equals(queueData.getBrokerName())) {\n",
      "                                topicList.getTopicList().add(topic);\n",
      "                                break;\n",
      "                            }\n",
      "                        }\n",
      "                    }\n",
      "                }\n",
      "            } finally {\n",
      "                this.lock.readLock().unlock();\n",
      "            }\n",
      "        } catch (Exception e) {\n",
      "            log.error(\"getAllTopicList Exception\", e);\n",
      "        }\n",
      "\n",
      "        return topicList.encode();\n",
      "    }\n",
      "\n",
      "    public byte[] getUnitTopics() {\n",
      "        TopicList topicList = new TopicList();\n",
      "        try {\n",
      "            try {\n",
      "                this.lock.readLock().lockInterruptibly();\n",
      "                Iterator<Entry<String, List<QueueData>>> topicTableIt =\n",
      "                    this.topicQueueTable.entrySet().iterator();\n",
      "                while (topicTableIt.hasNext()) {\n",
      "                    Entry<String, List<QueueData>> topicEntry = topicTableIt.next();\n",
      "                    String topic = topicEntry.getKey();\n",
      "                    List<QueueData> queueDatas = topicEntry.getValue();\n",
      "                    if (queueDatas != null && queueDatas.size() > 0\n",
      "                        && TopicSysFlag.hasUnitFlag(queueDatas.get(0).getTopicSynFlag())) {\n",
      "                        topicList.getTopicList().add(topic);\n",
      "                    }\n",
      "                }\n",
      "            } finally {\n",
      "                this.lock.readLock().unlock();\n",
      "            }\n",
      "        } catch (Exception e) {\n",
      "            log.error(\"getAllTopicList Exception\", e);\n",
      "        }\n",
      "\n",
      "        return topicList.encode();\n",
      "    }\n",
      "\n",
      "    public byte[] getHasUnitSubTopicList() {\n",
      "        TopicList topicList = new TopicList();\n",
      "        try {\n",
      "            try {\n",
      "                this.lock.readLock().lockInterruptibly();\n",
      "                Iterator<Entry<String, List<QueueData>>> topicTableIt =\n",
      "                    this.topicQueueTable.entrySet().iterator();\n",
      "                while (topicTableIt.hasNext()) {\n",
      "                    Entry<String, List<QueueData>> topicEntry = topicTableIt.next();\n",
      "                    String topic = topicEntry.getKey();\n",
      "                    List<QueueData> queueDatas = topicEntry.getValue();\n",
      "                    if (queueDatas != null && queueDatas.size() > 0\n",
      "                        && TopicSysFlag.hasUnitSubFlag(queueDatas.get(0).getTopicSynFlag())) {\n",
      "                        topicList.getTopicList().add(topic);\n",
      "                    }\n",
      "                }\n",
      "            } finally {\n",
      "                this.lock.readLock().unlock();\n",
      "            }\n",
      "        } catch (Exception e) {\n",
      "            log.error(\"getAllTopicList Exception\", e);\n",
      "        }\n",
      "\n",
      "        return topicList.encode();\n",
      "    }\n",
      "\n",
      "    public byte[] getHasUnitSubUnUnitTopicList() {\n",
      "        TopicList topicList = new TopicList();\n",
      "        try {\n",
      "            try {\n",
      "                this.lock.readLock().lockInterruptibly();\n",
      "                Iterator<Entry<String, List<QueueData>>> topicTableIt =\n",
      "                    this.topicQueueTable.entrySet().iterator();\n",
      "                while (topicTableIt.hasNext()) {\n",
      "                    Entry<String, List<QueueData>> topicEntry = topicTableIt.next();\n",
      "                    String topic = topicEntry.getKey();\n",
      "                    List<QueueData> queueDatas = topicEntry.getValue();\n",
      "                    if (queueDatas != null && queueDatas.size() > 0\n",
      "                        && !TopicSysFlag.hasUnitFlag(queueDatas.get(0).getTopicSynFlag())\n",
      "                        && TopicSysFlag.hasUnitSubFlag(queueDatas.get(0).getTopicSynFlag())) {\n",
      "                        topicList.getTopicList().add(topic);\n",
      "                    }\n",
      "                }\n",
      "            } finally {\n",
      "                this.lock.readLock().unlock();\n",
      "            }\n",
      "        } catch (Exception e) {\n",
      "            log.error(\"getAllTopicList Exception\", e);\n",
      "        }\n",
      "\n",
      "        return topicList.encode();\n",
      "    }\n",
      "}\n",
      "\n",
      "class BrokerLiveInfo {\n",
      "    private long lastUpdateTimestamp;\n",
      "    private DataVersion dataVersion;\n",
      "    private Channel channel;\n",
      "    private String haServerAddr;\n",
      "\n",
      "    public BrokerLiveInfo(long lastUpdateTimestamp, DataVersion dataVersion, Channel channel,\n",
      "        String haServerAddr) {\n",
      "        this.lastUpdateTimestamp = lastUpdateTimestamp;\n",
      "        this.dataVersion = dataVersion;\n",
      "        this.channel = channel;\n",
      "        this.haServerAddr = haServerAddr;\n",
      "    }\n",
      "\n",
      "    public long getLastUpdateTimestamp() {\n",
      "        return lastUpdateTimestamp;\n",
      "    }\n",
      "\n",
      "    public void setLastUpdateTimestamp(long lastUpdateTimestamp) {\n",
      "        this.lastUpdateTimestamp = lastUpdateTimestamp;\n",
      "    }\n",
      "\n",
      "    public DataVersion getDataVersion() {\n",
      "        return dataVersion;\n",
      "    }\n",
      "\n",
      "    public void setDataVersion(DataVersion dataVersion) {\n",
      "        this.dataVersion = dataVersion;\n",
      "    }\n",
      "\n",
      "    public Channel getChannel() {\n",
      "        return channel;\n",
      "    }\n",
      "\n",
      "    public void setChannel(Channel channel) {\n",
      "        this.channel = channel;\n",
      "    }\n",
      "\n",
      "    public String getHaServerAddr() {\n",
      "        return haServerAddr;\n",
      "    }\n",
      "\n",
      "    public void setHaServerAddr(String haServerAddr) {\n",
      "        this.haServerAddr = haServerAddr;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public String toString() {\n",
      "        return \"BrokerLiveInfo [lastUpdateTimestamp=\" + lastUpdateTimestamp + \", dataVersion=\" + dataVersion\n",
      "            + \", channel=\" + channel + \", haServerAddr=\" + haServerAddr + \"]\";\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.namesrv.routeinfo;\n",
      "\n",
      "import io.netty.channel.Channel;\n",
      "import java.util.ArrayList;\n",
      "import java.util.concurrent.ConcurrentHashMap;\n",
      "import org.apache.rocketmq.common.TopicConfig;\n",
      "import org.apache.rocketmq.common.namesrv.RegisterBrokerResult;\n",
      "import org.apache.rocketmq.common.protocol.body.TopicConfigSerializeWrapper;\n",
      "import org.apache.rocketmq.common.protocol.route.TopicRouteData;\n",
      "import org.junit.After;\n",
      "import org.junit.Assert;\n",
      "import org.junit.Before;\n",
      "import org.junit.Test;\n",
      "\n",
      "import static org.assertj.core.api.Assertions.assertThat;\n",
      "import static org.mockito.Mockito.mock;\n",
      "\n",
      "public class RouteInfoManagerTest {\n",
      "\n",
      "    private static RouteInfoManager routeInfoManager;\n",
      "\n",
      "    @Before\n",
      "    public void setup() {\n",
      "        routeInfoManager = new RouteInfoManager();\n",
      "        testRegisterBroker();\n",
      "    }\n",
      "\n",
      "    @After\n",
      "    public void terminate() {\n",
      "        routeInfoManager.printAllPeriodically();\n",
      "        routeInfoManager.unregisterBroker(\"default-cluster\", \"127.0.0.1:10911\", \"default-broker\", 1234);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testGetAllClusterInfo() {\n",
      "        byte[] clusterInfo = routeInfoManager.getAllClusterInfo();\n",
      "        assertThat(clusterInfo).isNotNull();\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testGetAllTopicList() {\n",
      "        byte[] topicInfo = routeInfoManager.getAllTopicList();\n",
      "        Assert.assertTrue(topicInfo != null);\n",
      "        assertThat(topicInfo).isNotNull();\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testRegisterBroker() {\n",
      "        TopicConfigSerializeWrapper topicConfigSerializeWrapper = new TopicConfigSerializeWrapper();\n",
      "        ConcurrentHashMap<String, TopicConfig> topicConfigConcurrentHashMap = new ConcurrentHashMap<>();\n",
      "        TopicConfig topicConfig = new TopicConfig();\n",
      "        topicConfig.setWriteQueueNums(8);\n",
      "        topicConfig.setTopicName(\"unit-test\");\n",
      "        topicConfig.setPerm(6);\n",
      "        topicConfig.setReadQueueNums(8);\n",
      "        topicConfig.setOrder(false);\n",
      "        topicConfigConcurrentHashMap.put(\"unit-test\", topicConfig);\n",
      "        topicConfigSerializeWrapper.setTopicConfigTable(topicConfigConcurrentHashMap);\n",
      "        Channel channel = mock(Channel.class);\n",
      "        RegisterBrokerResult registerBrokerResult = routeInfoManager.registerBroker(\"default-cluster\", \"127.0.0.1:10911\", \"default-broker\", 1234, \"127.0.0.1:1001\",\n",
      "            topicConfigSerializeWrapper, new ArrayList<String>(), channel);\n",
      "        assertThat(registerBrokerResult).isNotNull();\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testWipeWritePermOfBrokerByLock() {\n",
      "        int result = routeInfoManager.wipeWritePermOfBrokerByLock(\"default-broker\");\n",
      "        assertThat(result).isEqualTo(0);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testPickupTopicRouteData() {\n",
      "        TopicRouteData result = routeInfoManager.pickupTopicRouteData(\"unit_test\");\n",
      "        assertThat(result).isNull();\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testGetSystemTopicList() {\n",
      "        byte[] topicList = routeInfoManager.getSystemTopicList();\n",
      "        assertThat(topicList).isNotNull();\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testGetTopicsByCluster() {\n",
      "        byte[] topicList = routeInfoManager.getTopicsByCluster(\"default-cluster\");\n",
      "        assertThat(topicList).isNotNull();\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testGetUnitTopics() {\n",
      "        byte[] topicList = routeInfoManager.getUnitTopics();\n",
      "        assertThat(topicList).isNotNull();\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testGetHasUnitSubTopicList() {\n",
      "        byte[] topicList = routeInfoManager.getHasUnitSubTopicList();\n",
      "        assertThat(topicList).isNotNull();\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testGetHasUnitSubUnUnitTopicList() {\n",
      "        byte[] topicList = routeInfoManager.getHasUnitSubUnUnitTopicList();\n",
      "        assertThat(topicList).isNotNull();\n",
      "    }\n",
      "}"
    ],
    "method_lines_dic": {
      "RouteInfoManager::::getAllClusterInfo()": [
        66,
        71
      ],
      "RouteInfoManager::::deleteTopic(java.lang.String)": [
        73,
        84
      ],
      "RouteInfoManager::::getAllTopicList()": [
        86,
        100
      ],
      "RouteInfoManager::::queryBrokerTopicConfig(java.lang.String)": [
        220,
        226
      ],
      "RouteInfoManager::::updateBrokerInfoUpdateTimestamp(java.lang.String)": [
        228,
        233
      ],
      "RouteInfoManager::::wipeWritePermOfBrokerByLock(java.lang.String)": [
        272,
        285
      ],
      "RouteInfoManager::::wipeWritePermOfBroker(java.lang.String)": [
        287,
        307
      ],
      "RouteInfoManager::::unregisterBroker(java.lang.String,java.lang.String,java.lang.String,long)": [
        309,
        367
      ],
      "RouteInfoManager::::removeTopicByBrokerName(java.lang.String)": [
        369,
        390
      ],
      "RouteInfoManager::::pickupTopicRouteData(java.lang.String)": [
        392,
        445
      ],
      "RouteInfoManager::::scanNotActiveBroker()": [
        447,
        462
      ],
      "RouteInfoManager::::printAllPeriodically()": [
        592,
        638
      ],
      "RouteInfoManager::::getSystemTopicList()": [
        640,
        670
      ],
      "RouteInfoManager::::getTopicsByCluster(java.lang.String)": [
        672,
        701
      ],
      "RouteInfoManager::::getUnitTopics()": [
        703,
        727
      ],
      "RouteInfoManager::::getHasUnitSubTopicList()": [
        729,
        753
      ],
      "RouteInfoManager::::getHasUnitSubUnUnitTopicList()": [
        755,
        780
      ],
      "BrokerLiveInfo::::getLastUpdateTimestamp()": [
        797,
        799
      ],
      "BrokerLiveInfo::::setLastUpdateTimestamp(long)": [
        801,
        803
      ],
      "BrokerLiveInfo::::getDataVersion()": [
        805,
        807
      ],
      "BrokerLiveInfo::::getChannel()": [
        813,
        815
      ],
      "BrokerLiveInfo::::getHaServerAddr()": [
        821,
        823
      ],
      "BrokerLiveInfo::::setHaServerAddr(java.lang.String)": [
        825,
        827
      ],
      "BrokerLiveInfo::::toString()": [
        829,
        833
      ]
    },
    "test_method_lines_dic": {
      "RouteInfoManagerTest::::setup()": [
        38,
        42
      ],
      "RouteInfoManagerTest::::terminate()": [
        44,
        48
      ],
      "RouteInfoManagerTest::::testGetAllClusterInfo()": [
        50,
        54
      ],
      "RouteInfoManagerTest::::testGetAllTopicList()": [
        56,
        61
      ],
      "RouteInfoManagerTest::::testRegisterBroker()": [
        63,
        79
      ],
      "RouteInfoManagerTest::::testWipeWritePermOfBrokerByLock()": [
        81,
        85
      ],
      "RouteInfoManagerTest::::testPickupTopicRouteData()": [
        87,
        91
      ],
      "RouteInfoManagerTest::::testGetSystemTopicList()": [
        93,
        97
      ],
      "RouteInfoManagerTest::::testGetTopicsByCluster()": [
        99,
        103
      ],
      "RouteInfoManagerTest::::testGetUnitTopics()": [
        105,
        109
      ],
      "RouteInfoManagerTest::::testGetHasUnitSubTopicList()": [
        111,
        115
      ],
      "RouteInfoManagerTest::::testGetHasUnitSubUnUnitTopicList()": [
        117,
        121
      ]
    },
    "reverse_method_lines_dic": {
      "66": "RouteInfoManager::::getAllClusterInfo()",
      "67": "RouteInfoManager::::getAllClusterInfo()",
      "68": "RouteInfoManager::::getAllClusterInfo()",
      "69": "RouteInfoManager::::getAllClusterInfo()",
      "70": "RouteInfoManager::::getAllClusterInfo()",
      "71": "RouteInfoManager::::getAllClusterInfo()",
      "73": "RouteInfoManager::::deleteTopic(java.lang.String)",
      "74": "RouteInfoManager::::deleteTopic(java.lang.String)",
      "75": "RouteInfoManager::::deleteTopic(java.lang.String)",
      "76": "RouteInfoManager::::deleteTopic(java.lang.String)",
      "77": "RouteInfoManager::::deleteTopic(java.lang.String)",
      "78": "RouteInfoManager::::deleteTopic(java.lang.String)",
      "79": "RouteInfoManager::::deleteTopic(java.lang.String)",
      "80": "RouteInfoManager::::deleteTopic(java.lang.String)",
      "81": "RouteInfoManager::::deleteTopic(java.lang.String)",
      "82": "RouteInfoManager::::deleteTopic(java.lang.String)",
      "83": "RouteInfoManager::::deleteTopic(java.lang.String)",
      "84": "RouteInfoManager::::deleteTopic(java.lang.String)",
      "86": "RouteInfoManager::::getAllTopicList()",
      "87": "RouteInfoManager::::getAllTopicList()",
      "88": "RouteInfoManager::::getAllTopicList()",
      "89": "RouteInfoManager::::getAllTopicList()",
      "90": "RouteInfoManager::::getAllTopicList()",
      "91": "RouteInfoManager::::getAllTopicList()",
      "92": "RouteInfoManager::::getAllTopicList()",
      "93": "RouteInfoManager::::getAllTopicList()",
      "94": "RouteInfoManager::::getAllTopicList()",
      "95": "RouteInfoManager::::getAllTopicList()",
      "96": "RouteInfoManager::::getAllTopicList()",
      "97": "RouteInfoManager::::getAllTopicList()",
      "98": "RouteInfoManager::::getAllTopicList()",
      "99": "RouteInfoManager::::getAllTopicList()",
      "100": "RouteInfoManager::::getAllTopicList()",
      "220": "RouteInfoManager::::queryBrokerTopicConfig(java.lang.String)",
      "221": "RouteInfoManager::::queryBrokerTopicConfig(java.lang.String)",
      "222": "RouteInfoManager::::queryBrokerTopicConfig(java.lang.String)",
      "223": "RouteInfoManager::::queryBrokerTopicConfig(java.lang.String)",
      "224": "RouteInfoManager::::queryBrokerTopicConfig(java.lang.String)",
      "225": "RouteInfoManager::::queryBrokerTopicConfig(java.lang.String)",
      "226": "RouteInfoManager::::queryBrokerTopicConfig(java.lang.String)",
      "228": "RouteInfoManager::::updateBrokerInfoUpdateTimestamp(java.lang.String)",
      "229": "RouteInfoManager::::updateBrokerInfoUpdateTimestamp(java.lang.String)",
      "230": "RouteInfoManager::::updateBrokerInfoUpdateTimestamp(java.lang.String)",
      "231": "RouteInfoManager::::updateBrokerInfoUpdateTimestamp(java.lang.String)",
      "232": "RouteInfoManager::::updateBrokerInfoUpdateTimestamp(java.lang.String)",
      "233": "RouteInfoManager::::updateBrokerInfoUpdateTimestamp(java.lang.String)",
      "272": "RouteInfoManager::::wipeWritePermOfBrokerByLock(java.lang.String)",
      "273": "RouteInfoManager::::wipeWritePermOfBrokerByLock(java.lang.String)",
      "274": "RouteInfoManager::::wipeWritePermOfBrokerByLock(java.lang.String)",
      "275": "RouteInfoManager::::wipeWritePermOfBrokerByLock(java.lang.String)",
      "276": "RouteInfoManager::::wipeWritePermOfBrokerByLock(java.lang.String)",
      "277": "RouteInfoManager::::wipeWritePermOfBrokerByLock(java.lang.String)",
      "278": "RouteInfoManager::::wipeWritePermOfBrokerByLock(java.lang.String)",
      "279": "RouteInfoManager::::wipeWritePermOfBrokerByLock(java.lang.String)",
      "280": "RouteInfoManager::::wipeWritePermOfBrokerByLock(java.lang.String)",
      "281": "RouteInfoManager::::wipeWritePermOfBrokerByLock(java.lang.String)",
      "282": "RouteInfoManager::::wipeWritePermOfBrokerByLock(java.lang.String)",
      "283": "RouteInfoManager::::wipeWritePermOfBrokerByLock(java.lang.String)",
      "284": "RouteInfoManager::::wipeWritePermOfBrokerByLock(java.lang.String)",
      "285": "RouteInfoManager::::wipeWritePermOfBrokerByLock(java.lang.String)",
      "287": "RouteInfoManager::::wipeWritePermOfBroker(java.lang.String)",
      "288": "RouteInfoManager::::wipeWritePermOfBroker(java.lang.String)",
      "289": "RouteInfoManager::::wipeWritePermOfBroker(java.lang.String)",
      "290": "RouteInfoManager::::wipeWritePermOfBroker(java.lang.String)",
      "291": "RouteInfoManager::::wipeWritePermOfBroker(java.lang.String)",
      "292": "RouteInfoManager::::wipeWritePermOfBroker(java.lang.String)",
      "293": "RouteInfoManager::::wipeWritePermOfBroker(java.lang.String)",
      "294": "RouteInfoManager::::wipeWritePermOfBroker(java.lang.String)",
      "295": "RouteInfoManager::::wipeWritePermOfBroker(java.lang.String)",
      "296": "RouteInfoManager::::wipeWritePermOfBroker(java.lang.String)",
      "297": "RouteInfoManager::::wipeWritePermOfBroker(java.lang.String)",
      "298": "RouteInfoManager::::wipeWritePermOfBroker(java.lang.String)",
      "299": "RouteInfoManager::::wipeWritePermOfBroker(java.lang.String)",
      "300": "RouteInfoManager::::wipeWritePermOfBroker(java.lang.String)",
      "301": "RouteInfoManager::::wipeWritePermOfBroker(java.lang.String)",
      "302": "RouteInfoManager::::wipeWritePermOfBroker(java.lang.String)",
      "303": "RouteInfoManager::::wipeWritePermOfBroker(java.lang.String)",
      "304": "RouteInfoManager::::wipeWritePermOfBroker(java.lang.String)",
      "305": "RouteInfoManager::::wipeWritePermOfBroker(java.lang.String)",
      "306": "RouteInfoManager::::wipeWritePermOfBroker(java.lang.String)",
      "307": "RouteInfoManager::::wipeWritePermOfBroker(java.lang.String)",
      "309": "RouteInfoManager::::unregisterBroker(java.lang.String,java.lang.String,java.lang.String,long)",
      "310": "RouteInfoManager::::unregisterBroker(java.lang.String,java.lang.String,java.lang.String,long)",
      "311": "RouteInfoManager::::unregisterBroker(java.lang.String,java.lang.String,java.lang.String,long)",
      "312": "RouteInfoManager::::unregisterBroker(java.lang.String,java.lang.String,java.lang.String,long)",
      "313": "RouteInfoManager::::unregisterBroker(java.lang.String,java.lang.String,java.lang.String,long)",
      "314": "RouteInfoManager::::unregisterBroker(java.lang.String,java.lang.String,java.lang.String,long)",
      "315": "RouteInfoManager::::unregisterBroker(java.lang.String,java.lang.String,java.lang.String,long)",
      "316": "RouteInfoManager::::unregisterBroker(java.lang.String,java.lang.String,java.lang.String,long)",
      "317": "RouteInfoManager::::unregisterBroker(java.lang.String,java.lang.String,java.lang.String,long)",
      "318": "RouteInfoManager::::unregisterBroker(java.lang.String,java.lang.String,java.lang.String,long)",
      "319": "RouteInfoManager::::unregisterBroker(java.lang.String,java.lang.String,java.lang.String,long)",
      "320": "RouteInfoManager::::unregisterBroker(java.lang.String,java.lang.String,java.lang.String,long)",
      "321": "RouteInfoManager::::unregisterBroker(java.lang.String,java.lang.String,java.lang.String,long)",
      "322": "RouteInfoManager::::unregisterBroker(java.lang.String,java.lang.String,java.lang.String,long)",
      "323": "RouteInfoManager::::unregisterBroker(java.lang.String,java.lang.String,java.lang.String,long)",
      "324": "RouteInfoManager::::unregisterBroker(java.lang.String,java.lang.String,java.lang.String,long)",
      "325": "RouteInfoManager::::unregisterBroker(java.lang.String,java.lang.String,java.lang.String,long)",
      "326": "RouteInfoManager::::unregisterBroker(java.lang.String,java.lang.String,java.lang.String,long)",
      "327": "RouteInfoManager::::unregisterBroker(java.lang.String,java.lang.String,java.lang.String,long)",
      "328": "RouteInfoManager::::unregisterBroker(java.lang.String,java.lang.String,java.lang.String,long)",
      "329": "RouteInfoManager::::unregisterBroker(java.lang.String,java.lang.String,java.lang.String,long)",
      "330": "RouteInfoManager::::unregisterBroker(java.lang.String,java.lang.String,java.lang.String,long)",
      "331": "RouteInfoManager::::unregisterBroker(java.lang.String,java.lang.String,java.lang.String,long)",
      "332": "RouteInfoManager::::unregisterBroker(java.lang.String,java.lang.String,java.lang.String,long)",
      "333": "RouteInfoManager::::unregisterBroker(java.lang.String,java.lang.String,java.lang.String,long)",
      "334": "RouteInfoManager::::unregisterBroker(java.lang.String,java.lang.String,java.lang.String,long)",
      "335": "RouteInfoManager::::unregisterBroker(java.lang.String,java.lang.String,java.lang.String,long)",
      "336": "RouteInfoManager::::unregisterBroker(java.lang.String,java.lang.String,java.lang.String,long)",
      "337": "RouteInfoManager::::unregisterBroker(java.lang.String,java.lang.String,java.lang.String,long)",
      "338": "RouteInfoManager::::unregisterBroker(java.lang.String,java.lang.String,java.lang.String,long)",
      "339": "RouteInfoManager::::unregisterBroker(java.lang.String,java.lang.String,java.lang.String,long)",
      "340": "RouteInfoManager::::unregisterBroker(java.lang.String,java.lang.String,java.lang.String,long)",
      "341": "RouteInfoManager::::unregisterBroker(java.lang.String,java.lang.String,java.lang.String,long)",
      "342": "RouteInfoManager::::unregisterBroker(java.lang.String,java.lang.String,java.lang.String,long)",
      "343": "RouteInfoManager::::unregisterBroker(java.lang.String,java.lang.String,java.lang.String,long)",
      "344": "RouteInfoManager::::unregisterBroker(java.lang.String,java.lang.String,java.lang.String,long)",
      "345": "RouteInfoManager::::unregisterBroker(java.lang.String,java.lang.String,java.lang.String,long)",
      "346": "RouteInfoManager::::unregisterBroker(java.lang.String,java.lang.String,java.lang.String,long)",
      "347": "RouteInfoManager::::unregisterBroker(java.lang.String,java.lang.String,java.lang.String,long)",
      "348": "RouteInfoManager::::unregisterBroker(java.lang.String,java.lang.String,java.lang.String,long)",
      "349": "RouteInfoManager::::unregisterBroker(java.lang.String,java.lang.String,java.lang.String,long)",
      "350": "RouteInfoManager::::unregisterBroker(java.lang.String,java.lang.String,java.lang.String,long)",
      "351": "RouteInfoManager::::unregisterBroker(java.lang.String,java.lang.String,java.lang.String,long)",
      "352": "RouteInfoManager::::unregisterBroker(java.lang.String,java.lang.String,java.lang.String,long)",
      "353": "RouteInfoManager::::unregisterBroker(java.lang.String,java.lang.String,java.lang.String,long)",
      "354": "RouteInfoManager::::unregisterBroker(java.lang.String,java.lang.String,java.lang.String,long)",
      "355": "RouteInfoManager::::unregisterBroker(java.lang.String,java.lang.String,java.lang.String,long)",
      "356": "RouteInfoManager::::unregisterBroker(java.lang.String,java.lang.String,java.lang.String,long)",
      "357": "RouteInfoManager::::unregisterBroker(java.lang.String,java.lang.String,java.lang.String,long)",
      "358": "RouteInfoManager::::unregisterBroker(java.lang.String,java.lang.String,java.lang.String,long)",
      "359": "RouteInfoManager::::unregisterBroker(java.lang.String,java.lang.String,java.lang.String,long)",
      "360": "RouteInfoManager::::unregisterBroker(java.lang.String,java.lang.String,java.lang.String,long)",
      "361": "RouteInfoManager::::unregisterBroker(java.lang.String,java.lang.String,java.lang.String,long)",
      "362": "RouteInfoManager::::unregisterBroker(java.lang.String,java.lang.String,java.lang.String,long)",
      "363": "RouteInfoManager::::unregisterBroker(java.lang.String,java.lang.String,java.lang.String,long)",
      "364": "RouteInfoManager::::unregisterBroker(java.lang.String,java.lang.String,java.lang.String,long)",
      "365": "RouteInfoManager::::unregisterBroker(java.lang.String,java.lang.String,java.lang.String,long)",
      "366": "RouteInfoManager::::unregisterBroker(java.lang.String,java.lang.String,java.lang.String,long)",
      "367": "RouteInfoManager::::unregisterBroker(java.lang.String,java.lang.String,java.lang.String,long)",
      "369": "RouteInfoManager::::removeTopicByBrokerName(java.lang.String)",
      "370": "RouteInfoManager::::removeTopicByBrokerName(java.lang.String)",
      "371": "RouteInfoManager::::removeTopicByBrokerName(java.lang.String)",
      "372": "RouteInfoManager::::removeTopicByBrokerName(java.lang.String)",
      "373": "RouteInfoManager::::removeTopicByBrokerName(java.lang.String)",
      "374": "RouteInfoManager::::removeTopicByBrokerName(java.lang.String)",
      "375": "RouteInfoManager::::removeTopicByBrokerName(java.lang.String)",
      "376": "RouteInfoManager::::removeTopicByBrokerName(java.lang.String)",
      "377": "RouteInfoManager::::removeTopicByBrokerName(java.lang.String)",
      "378": "RouteInfoManager::::removeTopicByBrokerName(java.lang.String)",
      "379": "RouteInfoManager::::removeTopicByBrokerName(java.lang.String)",
      "380": "RouteInfoManager::::removeTopicByBrokerName(java.lang.String)",
      "381": "RouteInfoManager::::removeTopicByBrokerName(java.lang.String)",
      "382": "RouteInfoManager::::removeTopicByBrokerName(java.lang.String)",
      "383": "RouteInfoManager::::removeTopicByBrokerName(java.lang.String)",
      "384": "RouteInfoManager::::removeTopicByBrokerName(java.lang.String)",
      "385": "RouteInfoManager::::removeTopicByBrokerName(java.lang.String)",
      "386": "RouteInfoManager::::removeTopicByBrokerName(java.lang.String)",
      "387": "RouteInfoManager::::removeTopicByBrokerName(java.lang.String)",
      "388": "RouteInfoManager::::removeTopicByBrokerName(java.lang.String)",
      "389": "RouteInfoManager::::removeTopicByBrokerName(java.lang.String)",
      "390": "RouteInfoManager::::removeTopicByBrokerName(java.lang.String)",
      "392": "RouteInfoManager::::pickupTopicRouteData(java.lang.String)",
      "393": "RouteInfoManager::::pickupTopicRouteData(java.lang.String)",
      "394": "RouteInfoManager::::pickupTopicRouteData(java.lang.String)",
      "395": "RouteInfoManager::::pickupTopicRouteData(java.lang.String)",
      "396": "RouteInfoManager::::pickupTopicRouteData(java.lang.String)",
      "397": "RouteInfoManager::::pickupTopicRouteData(java.lang.String)",
      "398": "RouteInfoManager::::pickupTopicRouteData(java.lang.String)",
      "399": "RouteInfoManager::::pickupTopicRouteData(java.lang.String)",
      "400": "RouteInfoManager::::pickupTopicRouteData(java.lang.String)",
      "401": "RouteInfoManager::::pickupTopicRouteData(java.lang.String)",
      "402": "RouteInfoManager::::pickupTopicRouteData(java.lang.String)",
      "403": "RouteInfoManager::::pickupTopicRouteData(java.lang.String)",
      "404": "RouteInfoManager::::pickupTopicRouteData(java.lang.String)",
      "405": "RouteInfoManager::::pickupTopicRouteData(java.lang.String)",
      "406": "RouteInfoManager::::pickupTopicRouteData(java.lang.String)",
      "407": "RouteInfoManager::::pickupTopicRouteData(java.lang.String)",
      "408": "RouteInfoManager::::pickupTopicRouteData(java.lang.String)",
      "409": "RouteInfoManager::::pickupTopicRouteData(java.lang.String)",
      "410": "RouteInfoManager::::pickupTopicRouteData(java.lang.String)",
      "411": "RouteInfoManager::::pickupTopicRouteData(java.lang.String)",
      "412": "RouteInfoManager::::pickupTopicRouteData(java.lang.String)",
      "413": "RouteInfoManager::::pickupTopicRouteData(java.lang.String)",
      "414": "RouteInfoManager::::pickupTopicRouteData(java.lang.String)",
      "415": "RouteInfoManager::::pickupTopicRouteData(java.lang.String)",
      "416": "RouteInfoManager::::pickupTopicRouteData(java.lang.String)",
      "417": "RouteInfoManager::::pickupTopicRouteData(java.lang.String)",
      "418": "RouteInfoManager::::pickupTopicRouteData(java.lang.String)",
      "419": "RouteInfoManager::::pickupTopicRouteData(java.lang.String)",
      "420": "RouteInfoManager::::pickupTopicRouteData(java.lang.String)",
      "421": "RouteInfoManager::::pickupTopicRouteData(java.lang.String)",
      "422": "RouteInfoManager::::pickupTopicRouteData(java.lang.String)",
      "423": "RouteInfoManager::::pickupTopicRouteData(java.lang.String)",
      "424": "RouteInfoManager::::pickupTopicRouteData(java.lang.String)",
      "425": "RouteInfoManager::::pickupTopicRouteData(java.lang.String)",
      "426": "RouteInfoManager::::pickupTopicRouteData(java.lang.String)",
      "427": "RouteInfoManager::::pickupTopicRouteData(java.lang.String)",
      "428": "RouteInfoManager::::pickupTopicRouteData(java.lang.String)",
      "429": "RouteInfoManager::::pickupTopicRouteData(java.lang.String)",
      "430": "RouteInfoManager::::pickupTopicRouteData(java.lang.String)",
      "431": "RouteInfoManager::::pickupTopicRouteData(java.lang.String)",
      "432": "RouteInfoManager::::pickupTopicRouteData(java.lang.String)",
      "433": "RouteInfoManager::::pickupTopicRouteData(java.lang.String)",
      "434": "RouteInfoManager::::pickupTopicRouteData(java.lang.String)",
      "435": "RouteInfoManager::::pickupTopicRouteData(java.lang.String)",
      "436": "RouteInfoManager::::pickupTopicRouteData(java.lang.String)",
      "437": "RouteInfoManager::::pickupTopicRouteData(java.lang.String)",
      "438": "RouteInfoManager::::pickupTopicRouteData(java.lang.String)",
      "439": "RouteInfoManager::::pickupTopicRouteData(java.lang.String)",
      "440": "RouteInfoManager::::pickupTopicRouteData(java.lang.String)",
      "441": "RouteInfoManager::::pickupTopicRouteData(java.lang.String)",
      "442": "RouteInfoManager::::pickupTopicRouteData(java.lang.String)",
      "443": "RouteInfoManager::::pickupTopicRouteData(java.lang.String)",
      "444": "RouteInfoManager::::pickupTopicRouteData(java.lang.String)",
      "445": "RouteInfoManager::::pickupTopicRouteData(java.lang.String)",
      "447": "RouteInfoManager::::scanNotActiveBroker()",
      "448": "RouteInfoManager::::scanNotActiveBroker()",
      "449": "RouteInfoManager::::scanNotActiveBroker()",
      "450": "RouteInfoManager::::scanNotActiveBroker()",
      "451": "RouteInfoManager::::scanNotActiveBroker()",
      "452": "RouteInfoManager::::scanNotActiveBroker()",
      "453": "RouteInfoManager::::scanNotActiveBroker()",
      "454": "RouteInfoManager::::scanNotActiveBroker()",
      "455": "RouteInfoManager::::scanNotActiveBroker()",
      "456": "RouteInfoManager::::scanNotActiveBroker()",
      "457": "RouteInfoManager::::scanNotActiveBroker()",
      "458": "RouteInfoManager::::scanNotActiveBroker()",
      "459": "RouteInfoManager::::scanNotActiveBroker()",
      "460": "RouteInfoManager::::scanNotActiveBroker()",
      "461": "RouteInfoManager::::scanNotActiveBroker()",
      "462": "RouteInfoManager::::scanNotActiveBroker()",
      "592": "RouteInfoManager::::printAllPeriodically()",
      "593": "RouteInfoManager::::printAllPeriodically()",
      "594": "RouteInfoManager::::printAllPeriodically()",
      "595": "RouteInfoManager::::printAllPeriodically()",
      "596": "RouteInfoManager::::printAllPeriodically()",
      "597": "RouteInfoManager::::printAllPeriodically()",
      "598": "RouteInfoManager::::printAllPeriodically()",
      "599": "RouteInfoManager::::printAllPeriodically()",
      "600": "RouteInfoManager::::printAllPeriodically()",
      "601": "RouteInfoManager::::printAllPeriodically()",
      "602": "RouteInfoManager::::printAllPeriodically()",
      "603": "RouteInfoManager::::printAllPeriodically()",
      "604": "RouteInfoManager::::printAllPeriodically()",
      "605": "RouteInfoManager::::printAllPeriodically()",
      "606": "RouteInfoManager::::printAllPeriodically()",
      "607": "RouteInfoManager::::printAllPeriodically()",
      "608": "RouteInfoManager::::printAllPeriodically()",
      "609": "RouteInfoManager::::printAllPeriodically()",
      "610": "RouteInfoManager::::printAllPeriodically()",
      "611": "RouteInfoManager::::printAllPeriodically()",
      "612": "RouteInfoManager::::printAllPeriodically()",
      "613": "RouteInfoManager::::printAllPeriodically()",
      "614": "RouteInfoManager::::printAllPeriodically()",
      "615": "RouteInfoManager::::printAllPeriodically()",
      "616": "RouteInfoManager::::printAllPeriodically()",
      "617": "RouteInfoManager::::printAllPeriodically()",
      "618": "RouteInfoManager::::printAllPeriodically()",
      "619": "RouteInfoManager::::printAllPeriodically()",
      "620": "RouteInfoManager::::printAllPeriodically()",
      "621": "RouteInfoManager::::printAllPeriodically()",
      "622": "RouteInfoManager::::printAllPeriodically()",
      "623": "RouteInfoManager::::printAllPeriodically()",
      "624": "RouteInfoManager::::printAllPeriodically()",
      "625": "RouteInfoManager::::printAllPeriodically()",
      "626": "RouteInfoManager::::printAllPeriodically()",
      "627": "RouteInfoManager::::printAllPeriodically()",
      "628": "RouteInfoManager::::printAllPeriodically()",
      "629": "RouteInfoManager::::printAllPeriodically()",
      "630": "RouteInfoManager::::printAllPeriodically()",
      "631": "RouteInfoManager::::printAllPeriodically()",
      "632": "RouteInfoManager::::printAllPeriodically()",
      "633": "RouteInfoManager::::printAllPeriodically()",
      "634": "RouteInfoManager::::printAllPeriodically()",
      "635": "RouteInfoManager::::printAllPeriodically()",
      "636": "RouteInfoManager::::printAllPeriodically()",
      "637": "RouteInfoManager::::printAllPeriodically()",
      "638": "RouteInfoManager::::printAllPeriodically()",
      "640": "RouteInfoManager::::getSystemTopicList()",
      "641": "RouteInfoManager::::getSystemTopicList()",
      "642": "RouteInfoManager::::getSystemTopicList()",
      "643": "RouteInfoManager::::getSystemTopicList()",
      "644": "RouteInfoManager::::getSystemTopicList()",
      "645": "RouteInfoManager::::getSystemTopicList()",
      "646": "RouteInfoManager::::getSystemTopicList()",
      "647": "RouteInfoManager::::getSystemTopicList()",
      "648": "RouteInfoManager::::getSystemTopicList()",
      "649": "RouteInfoManager::::getSystemTopicList()",
      "650": "RouteInfoManager::::getSystemTopicList()",
      "651": "RouteInfoManager::::getSystemTopicList()",
      "652": "RouteInfoManager::::getSystemTopicList()",
      "653": "RouteInfoManager::::getSystemTopicList()",
      "654": "RouteInfoManager::::getSystemTopicList()",
      "655": "RouteInfoManager::::getSystemTopicList()",
      "656": "RouteInfoManager::::getSystemTopicList()",
      "657": "RouteInfoManager::::getSystemTopicList()",
      "658": "RouteInfoManager::::getSystemTopicList()",
      "659": "RouteInfoManager::::getSystemTopicList()",
      "660": "RouteInfoManager::::getSystemTopicList()",
      "661": "RouteInfoManager::::getSystemTopicList()",
      "662": "RouteInfoManager::::getSystemTopicList()",
      "663": "RouteInfoManager::::getSystemTopicList()",
      "664": "RouteInfoManager::::getSystemTopicList()",
      "665": "RouteInfoManager::::getSystemTopicList()",
      "666": "RouteInfoManager::::getSystemTopicList()",
      "667": "RouteInfoManager::::getSystemTopicList()",
      "668": "RouteInfoManager::::getSystemTopicList()",
      "669": "RouteInfoManager::::getSystemTopicList()",
      "670": "RouteInfoManager::::getSystemTopicList()",
      "672": "RouteInfoManager::::getTopicsByCluster(java.lang.String)",
      "673": "RouteInfoManager::::getTopicsByCluster(java.lang.String)",
      "674": "RouteInfoManager::::getTopicsByCluster(java.lang.String)",
      "675": "RouteInfoManager::::getTopicsByCluster(java.lang.String)",
      "676": "RouteInfoManager::::getTopicsByCluster(java.lang.String)",
      "677": "RouteInfoManager::::getTopicsByCluster(java.lang.String)",
      "678": "RouteInfoManager::::getTopicsByCluster(java.lang.String)",
      "679": "RouteInfoManager::::getTopicsByCluster(java.lang.String)",
      "680": "RouteInfoManager::::getTopicsByCluster(java.lang.String)",
      "681": "RouteInfoManager::::getTopicsByCluster(java.lang.String)",
      "682": "RouteInfoManager::::getTopicsByCluster(java.lang.String)",
      "683": "RouteInfoManager::::getTopicsByCluster(java.lang.String)",
      "684": "RouteInfoManager::::getTopicsByCluster(java.lang.String)",
      "685": "RouteInfoManager::::getTopicsByCluster(java.lang.String)",
      "686": "RouteInfoManager::::getTopicsByCluster(java.lang.String)",
      "687": "RouteInfoManager::::getTopicsByCluster(java.lang.String)",
      "688": "RouteInfoManager::::getTopicsByCluster(java.lang.String)",
      "689": "RouteInfoManager::::getTopicsByCluster(java.lang.String)",
      "690": "RouteInfoManager::::getTopicsByCluster(java.lang.String)",
      "691": "RouteInfoManager::::getTopicsByCluster(java.lang.String)",
      "692": "RouteInfoManager::::getTopicsByCluster(java.lang.String)",
      "693": "RouteInfoManager::::getTopicsByCluster(java.lang.String)",
      "694": "RouteInfoManager::::getTopicsByCluster(java.lang.String)",
      "695": "RouteInfoManager::::getTopicsByCluster(java.lang.String)",
      "696": "RouteInfoManager::::getTopicsByCluster(java.lang.String)",
      "697": "RouteInfoManager::::getTopicsByCluster(java.lang.String)",
      "698": "RouteInfoManager::::getTopicsByCluster(java.lang.String)",
      "699": "RouteInfoManager::::getTopicsByCluster(java.lang.String)",
      "700": "RouteInfoManager::::getTopicsByCluster(java.lang.String)",
      "701": "RouteInfoManager::::getTopicsByCluster(java.lang.String)",
      "703": "RouteInfoManager::::getUnitTopics()",
      "704": "RouteInfoManager::::getUnitTopics()",
      "705": "RouteInfoManager::::getUnitTopics()",
      "706": "RouteInfoManager::::getUnitTopics()",
      "707": "RouteInfoManager::::getUnitTopics()",
      "708": "RouteInfoManager::::getUnitTopics()",
      "709": "RouteInfoManager::::getUnitTopics()",
      "710": "RouteInfoManager::::getUnitTopics()",
      "711": "RouteInfoManager::::getUnitTopics()",
      "712": "RouteInfoManager::::getUnitTopics()",
      "713": "RouteInfoManager::::getUnitTopics()",
      "714": "RouteInfoManager::::getUnitTopics()",
      "715": "RouteInfoManager::::getUnitTopics()",
      "716": "RouteInfoManager::::getUnitTopics()",
      "717": "RouteInfoManager::::getUnitTopics()",
      "718": "RouteInfoManager::::getUnitTopics()",
      "719": "RouteInfoManager::::getUnitTopics()",
      "720": "RouteInfoManager::::getUnitTopics()",
      "721": "RouteInfoManager::::getUnitTopics()",
      "722": "RouteInfoManager::::getUnitTopics()",
      "723": "RouteInfoManager::::getUnitTopics()",
      "724": "RouteInfoManager::::getUnitTopics()",
      "725": "RouteInfoManager::::getUnitTopics()",
      "726": "RouteInfoManager::::getUnitTopics()",
      "727": "RouteInfoManager::::getUnitTopics()",
      "729": "RouteInfoManager::::getHasUnitSubTopicList()",
      "730": "RouteInfoManager::::getHasUnitSubTopicList()",
      "731": "RouteInfoManager::::getHasUnitSubTopicList()",
      "732": "RouteInfoManager::::getHasUnitSubTopicList()",
      "733": "RouteInfoManager::::getHasUnitSubTopicList()",
      "734": "RouteInfoManager::::getHasUnitSubTopicList()",
      "735": "RouteInfoManager::::getHasUnitSubTopicList()",
      "736": "RouteInfoManager::::getHasUnitSubTopicList()",
      "737": "RouteInfoManager::::getHasUnitSubTopicList()",
      "738": "RouteInfoManager::::getHasUnitSubTopicList()",
      "739": "RouteInfoManager::::getHasUnitSubTopicList()",
      "740": "RouteInfoManager::::getHasUnitSubTopicList()",
      "741": "RouteInfoManager::::getHasUnitSubTopicList()",
      "742": "RouteInfoManager::::getHasUnitSubTopicList()",
      "743": "RouteInfoManager::::getHasUnitSubTopicList()",
      "744": "RouteInfoManager::::getHasUnitSubTopicList()",
      "745": "RouteInfoManager::::getHasUnitSubTopicList()",
      "746": "RouteInfoManager::::getHasUnitSubTopicList()",
      "747": "RouteInfoManager::::getHasUnitSubTopicList()",
      "748": "RouteInfoManager::::getHasUnitSubTopicList()",
      "749": "RouteInfoManager::::getHasUnitSubTopicList()",
      "750": "RouteInfoManager::::getHasUnitSubTopicList()",
      "751": "RouteInfoManager::::getHasUnitSubTopicList()",
      "752": "RouteInfoManager::::getHasUnitSubTopicList()",
      "753": "RouteInfoManager::::getHasUnitSubTopicList()",
      "755": "RouteInfoManager::::getHasUnitSubUnUnitTopicList()",
      "756": "RouteInfoManager::::getHasUnitSubUnUnitTopicList()",
      "757": "RouteInfoManager::::getHasUnitSubUnUnitTopicList()",
      "758": "RouteInfoManager::::getHasUnitSubUnUnitTopicList()",
      "759": "RouteInfoManager::::getHasUnitSubUnUnitTopicList()",
      "760": "RouteInfoManager::::getHasUnitSubUnUnitTopicList()",
      "761": "RouteInfoManager::::getHasUnitSubUnUnitTopicList()",
      "762": "RouteInfoManager::::getHasUnitSubUnUnitTopicList()",
      "763": "RouteInfoManager::::getHasUnitSubUnUnitTopicList()",
      "764": "RouteInfoManager::::getHasUnitSubUnUnitTopicList()",
      "765": "RouteInfoManager::::getHasUnitSubUnUnitTopicList()",
      "766": "RouteInfoManager::::getHasUnitSubUnUnitTopicList()",
      "767": "RouteInfoManager::::getHasUnitSubUnUnitTopicList()",
      "768": "RouteInfoManager::::getHasUnitSubUnUnitTopicList()",
      "769": "RouteInfoManager::::getHasUnitSubUnUnitTopicList()",
      "770": "RouteInfoManager::::getHasUnitSubUnUnitTopicList()",
      "771": "RouteInfoManager::::getHasUnitSubUnUnitTopicList()",
      "772": "RouteInfoManager::::getHasUnitSubUnUnitTopicList()",
      "773": "RouteInfoManager::::getHasUnitSubUnUnitTopicList()",
      "774": "RouteInfoManager::::getHasUnitSubUnUnitTopicList()",
      "775": "RouteInfoManager::::getHasUnitSubUnUnitTopicList()",
      "776": "RouteInfoManager::::getHasUnitSubUnUnitTopicList()",
      "777": "RouteInfoManager::::getHasUnitSubUnUnitTopicList()",
      "778": "RouteInfoManager::::getHasUnitSubUnUnitTopicList()",
      "779": "RouteInfoManager::::getHasUnitSubUnUnitTopicList()",
      "780": "RouteInfoManager::::getHasUnitSubUnUnitTopicList()",
      "797": "BrokerLiveInfo::::getLastUpdateTimestamp()",
      "798": "BrokerLiveInfo::::getLastUpdateTimestamp()",
      "799": "BrokerLiveInfo::::getLastUpdateTimestamp()",
      "801": "BrokerLiveInfo::::setLastUpdateTimestamp(long)",
      "802": "BrokerLiveInfo::::setLastUpdateTimestamp(long)",
      "803": "BrokerLiveInfo::::setLastUpdateTimestamp(long)",
      "805": "BrokerLiveInfo::::getDataVersion()",
      "806": "BrokerLiveInfo::::getDataVersion()",
      "807": "BrokerLiveInfo::::getDataVersion()",
      "813": "BrokerLiveInfo::::getChannel()",
      "814": "BrokerLiveInfo::::getChannel()",
      "815": "BrokerLiveInfo::::getChannel()",
      "821": "BrokerLiveInfo::::getHaServerAddr()",
      "822": "BrokerLiveInfo::::getHaServerAddr()",
      "823": "BrokerLiveInfo::::getHaServerAddr()",
      "825": "BrokerLiveInfo::::setHaServerAddr(java.lang.String)",
      "826": "BrokerLiveInfo::::setHaServerAddr(java.lang.String)",
      "827": "BrokerLiveInfo::::setHaServerAddr(java.lang.String)",
      "829": "BrokerLiveInfo::::toString()",
      "830": "BrokerLiveInfo::::toString()",
      "831": "BrokerLiveInfo::::toString()",
      "832": "BrokerLiveInfo::::toString()",
      "833": "BrokerLiveInfo::::toString()"
    },
    "test_reverse_method_lines_dic": {
      "38": "RouteInfoManagerTest::::setup()",
      "39": "RouteInfoManagerTest::::setup()",
      "40": "RouteInfoManagerTest::::setup()",
      "41": "RouteInfoManagerTest::::setup()",
      "42": "RouteInfoManagerTest::::setup()",
      "44": "RouteInfoManagerTest::::terminate()",
      "45": "RouteInfoManagerTest::::terminate()",
      "46": "RouteInfoManagerTest::::terminate()",
      "47": "RouteInfoManagerTest::::terminate()",
      "48": "RouteInfoManagerTest::::terminate()",
      "50": "RouteInfoManagerTest::::testGetAllClusterInfo()",
      "51": "RouteInfoManagerTest::::testGetAllClusterInfo()",
      "52": "RouteInfoManagerTest::::testGetAllClusterInfo()",
      "53": "RouteInfoManagerTest::::testGetAllClusterInfo()",
      "54": "RouteInfoManagerTest::::testGetAllClusterInfo()",
      "56": "RouteInfoManagerTest::::testGetAllTopicList()",
      "57": "RouteInfoManagerTest::::testGetAllTopicList()",
      "58": "RouteInfoManagerTest::::testGetAllTopicList()",
      "59": "RouteInfoManagerTest::::testGetAllTopicList()",
      "60": "RouteInfoManagerTest::::testGetAllTopicList()",
      "61": "RouteInfoManagerTest::::testGetAllTopicList()",
      "63": "RouteInfoManagerTest::::testRegisterBroker()",
      "64": "RouteInfoManagerTest::::testRegisterBroker()",
      "65": "RouteInfoManagerTest::::testRegisterBroker()",
      "66": "RouteInfoManagerTest::::testRegisterBroker()",
      "67": "RouteInfoManagerTest::::testRegisterBroker()",
      "68": "RouteInfoManagerTest::::testRegisterBroker()",
      "69": "RouteInfoManagerTest::::testRegisterBroker()",
      "70": "RouteInfoManagerTest::::testRegisterBroker()",
      "71": "RouteInfoManagerTest::::testRegisterBroker()",
      "72": "RouteInfoManagerTest::::testRegisterBroker()",
      "73": "RouteInfoManagerTest::::testRegisterBroker()",
      "74": "RouteInfoManagerTest::::testRegisterBroker()",
      "75": "RouteInfoManagerTest::::testRegisterBroker()",
      "76": "RouteInfoManagerTest::::testRegisterBroker()",
      "77": "RouteInfoManagerTest::::testRegisterBroker()",
      "78": "RouteInfoManagerTest::::testRegisterBroker()",
      "79": "RouteInfoManagerTest::::testRegisterBroker()",
      "81": "RouteInfoManagerTest::::testWipeWritePermOfBrokerByLock()",
      "82": "RouteInfoManagerTest::::testWipeWritePermOfBrokerByLock()",
      "83": "RouteInfoManagerTest::::testWipeWritePermOfBrokerByLock()",
      "84": "RouteInfoManagerTest::::testWipeWritePermOfBrokerByLock()",
      "85": "RouteInfoManagerTest::::testWipeWritePermOfBrokerByLock()",
      "87": "RouteInfoManagerTest::::testPickupTopicRouteData()",
      "88": "RouteInfoManagerTest::::testPickupTopicRouteData()",
      "89": "RouteInfoManagerTest::::testPickupTopicRouteData()",
      "90": "RouteInfoManagerTest::::testPickupTopicRouteData()",
      "91": "RouteInfoManagerTest::::testPickupTopicRouteData()",
      "93": "RouteInfoManagerTest::::testGetSystemTopicList()",
      "94": "RouteInfoManagerTest::::testGetSystemTopicList()",
      "95": "RouteInfoManagerTest::::testGetSystemTopicList()",
      "96": "RouteInfoManagerTest::::testGetSystemTopicList()",
      "97": "RouteInfoManagerTest::::testGetSystemTopicList()",
      "99": "RouteInfoManagerTest::::testGetTopicsByCluster()",
      "100": "RouteInfoManagerTest::::testGetTopicsByCluster()",
      "101": "RouteInfoManagerTest::::testGetTopicsByCluster()",
      "102": "RouteInfoManagerTest::::testGetTopicsByCluster()",
      "103": "RouteInfoManagerTest::::testGetTopicsByCluster()",
      "105": "RouteInfoManagerTest::::testGetUnitTopics()",
      "106": "RouteInfoManagerTest::::testGetUnitTopics()",
      "107": "RouteInfoManagerTest::::testGetUnitTopics()",
      "108": "RouteInfoManagerTest::::testGetUnitTopics()",
      "109": "RouteInfoManagerTest::::testGetUnitTopics()",
      "111": "RouteInfoManagerTest::::testGetHasUnitSubTopicList()",
      "112": "RouteInfoManagerTest::::testGetHasUnitSubTopicList()",
      "113": "RouteInfoManagerTest::::testGetHasUnitSubTopicList()",
      "114": "RouteInfoManagerTest::::testGetHasUnitSubTopicList()",
      "115": "RouteInfoManagerTest::::testGetHasUnitSubTopicList()",
      "117": "RouteInfoManagerTest::::testGetHasUnitSubUnUnitTopicList()",
      "118": "RouteInfoManagerTest::::testGetHasUnitSubUnUnitTopicList()",
      "119": "RouteInfoManagerTest::::testGetHasUnitSubUnUnitTopicList()",
      "120": "RouteInfoManagerTest::::testGetHasUnitSubUnUnitTopicList()",
      "121": "RouteInfoManagerTest::::testGetHasUnitSubUnUnitTopicList()"
    },
    "tests": [
      {
        "test_lines": [
          50,
          54
        ],
        "covered_lines": [
          49,
          51,
          58,
          59,
          60,
          61,
          62,
          63,
          64,
          67,
          68,
          69,
          70,
          124,
          128,
          130,
          131,
          132,
          133,
          136,
          138,
          140,
          143,
          144,
          145,
          146,
          148,
          151,
          152,
          159,
          160,
          162,
          177,
          179,
          180,
          183,
          184,
          187,
          188,
          189,
          195,
          196,
          197,
          206,
          207,
          210,
          212,
          316,
          317,
          318,
          323,
          325,
          326,
          327,
          328,
          329,
          334,
          335,
          336,
          340,
          344,
          345,
          346,
          347,
          348,
          352,
          353,
          354,
          359,
          362,
          363,
          366,
          367,
          370,
          371,
          390,
          595,
          596,
          598,
          599,
          600,
          607,
          608,
          609,
          610,
          611,
          612,
          616,
          617,
          618,
          619,
          620,
          621,
          625,
          626,
          627,
          628,
          629,
          630,
          633,
          634,
          637,
          638,
          790,
          791,
          792,
          793,
          794,
          795,
          831
        ]
      },
      {
        "test_lines": [
          56,
          61
        ],
        "covered_lines": [
          49,
          51,
          58,
          59,
          60,
          61,
          62,
          63,
          64,
          87,
          90,
          91,
          93,
          94,
          97,
          99,
          124,
          128,
          130,
          131,
          132,
          133,
          136,
          138,
          140,
          143,
          144,
          145,
          146,
          148,
          151,
          152,
          159,
          160,
          162,
          177,
          179,
          180,
          183,
          184,
          187,
          188,
          189,
          195,
          196,
          197,
          206,
          207,
          210,
          212,
          316,
          317,
          318,
          323,
          325,
          326,
          327,
          328,
          329,
          334,
          335,
          336,
          340,
          344,
          345,
          346,
          347,
          348,
          352,
          353,
          354,
          359,
          362,
          363,
          366,
          367,
          370,
          371,
          390,
          595,
          596,
          598,
          599,
          600,
          607,
          608,
          609,
          610,
          611,
          612,
          616,
          617,
          618,
          619,
          620,
          621,
          625,
          626,
          627,
          628,
          629,
          630,
          633,
          634,
          637,
          638,
          790,
          791,
          792,
          793,
          794,
          795,
          831
        ]
      },
      {
        "test_lines": [
          63,
          79
        ],
        "covered_lines": [
          49,
          51,
          58,
          59,
          60,
          61,
          62,
          63,
          64,
          124,
          128,
          130,
          131,
          132,
          133,
          136,
          138,
          140,
          143,
          144,
          145,
          146,
          148,
          151,
          152,
          153,
          154,
          157,
          159,
          160,
          162,
          177,
          179,
          180,
          183,
          184,
          187,
          188,
          189,
          195,
          196,
          197,
          206,
          207,
          210,
          212,
          316,
          317,
          318,
          323,
          325,
          326,
          327,
          328,
          329,
          334,
          335,
          336,
          340,
          344,
          345,
          346,
          347,
          348,
          352,
          353,
          354,
          359,
          362,
          363,
          366,
          367,
          370,
          371,
          390,
          595,
          596,
          598,
          599,
          600,
          607,
          608,
          609,
          610,
          611,
          612,
          616,
          617,
          618,
          619,
          620,
          621,
          625,
          626,
          627,
          628,
          629,
          630,
          633,
          634,
          637,
          638,
          790,
          791,
          792,
          793,
          794,
          795,
          831
        ]
      },
      {
        "test_lines": [
          81,
          85
        ],
        "covered_lines": [
          49,
          51,
          58,
          59,
          60,
          61,
          62,
          63,
          64,
          124,
          128,
          130,
          131,
          132,
          133,
          136,
          138,
          140,
          143,
          144,
          145,
          146,
          148,
          151,
          152,
          159,
          160,
          162,
          177,
          179,
          180,
          183,
          184,
          187,
          188,
          189,
          195,
          196,
          197,
          206,
          207,
          210,
          212,
          275,
          276,
          278,
          288,
          289,
          290,
          306,
          316,
          317,
          318,
          323,
          325,
          326,
          327,
          328,
          329,
          334,
          335,
          336,
          340,
          344,
          345,
          346,
          347,
          348,
          352,
          353,
          354,
          359,
          362,
          363,
          366,
          367,
          370,
          371,
          390,
          595,
          596,
          598,
          599,
          600,
          607,
          608,
          609,
          610,
          611,
          612,
          616,
          617,
          618,
          619,
          620,
          621,
          625,
          626,
          627,
          628,
          629,
          630,
          633,
          634,
          637,
          638,
          790,
          791,
          792,
          793,
          794,
          795,
          831
        ]
      },
      {
        "test_lines": [
          87,
          91
        ],
        "covered_lines": [
          49,
          51,
          58,
          59,
          60,
          61,
          62,
          63,
          64,
          124,
          128,
          130,
          131,
          132,
          133,
          136,
          138,
          140,
          143,
          144,
          145,
          146,
          148,
          151,
          152,
          159,
          160,
          162,
          177,
          179,
          180,
          183,
          184,
          187,
          188,
          189,
          195,
          196,
          197,
          206,
          207,
          210,
          212,
          316,
          317,
          318,
          323,
          325,
          326,
          327,
          328,
          329,
          334,
          335,
          336,
          340,
          344,
          345,
          346,
          347,
          348,
          352,
          353,
          354,
          359,
          362,
          363,
          366,
          367,
          370,
          371,
          390,
          393,
          394,
          395,
          396,
          397,
          398,
          400,
          401,
          405,
          406,
          407,
          432,
          433,
          436,
          438,
          440,
          444,
          595,
          596,
          598,
          599,
          600,
          607,
          608,
          609,
          610,
          611,
          612,
          616,
          617,
          618,
          619,
          620,
          621,
          625,
          626,
          627,
          628,
          629,
          630,
          633,
          634,
          637,
          638,
          790,
          791,
          792,
          793,
          794,
          795,
          831
        ]
      },
      {
        "test_lines": [
          93,
          97
        ],
        "covered_lines": [
          49,
          51,
          58,
          59,
          60,
          61,
          62,
          63,
          64,
          124,
          128,
          130,
          131,
          132,
          133,
          136,
          138,
          140,
          143,
          144,
          145,
          146,
          148,
          151,
          152,
          159,
          160,
          162,
          177,
          179,
          180,
          183,
          184,
          187,
          188,
          189,
          195,
          196,
          197,
          206,
          207,
          210,
          212,
          316,
          317,
          318,
          323,
          325,
          326,
          327,
          328,
          329,
          334,
          335,
          336,
          340,
          344,
          345,
          346,
          347,
          348,
          352,
          353,
          354,
          359,
          362,
          363,
          366,
          367,
          370,
          371,
          390,
          595,
          596,
          598,
          599,
          600,
          607,
          608,
          609,
          610,
          611,
          612,
          616,
          617,
          618,
          619,
          620,
          621,
          625,
          626,
          627,
          628,
          629,
          630,
          633,
          634,
          637,
          638,
          641,
          644,
          645,
          646,
          647,
          648,
          650,
          651,
          652,
          653,
          654,
          655,
          656,
          657,
          658,
          663,
          664,
          667,
          669,
          790,
          791,
          792,
          793,
          794,
          795,
          831
        ]
      },
      {
        "test_lines": [
          99,
          103
        ],
        "covered_lines": [
          49,
          51,
          58,
          59,
          60,
          61,
          62,
          63,
          64,
          124,
          128,
          130,
          131,
          132,
          133,
          136,
          138,
          140,
          143,
          144,
          145,
          146,
          148,
          151,
          152,
          159,
          160,
          162,
          177,
          179,
          180,
          183,
          184,
          187,
          188,
          189,
          195,
          196,
          197,
          206,
          207,
          210,
          212,
          316,
          317,
          318,
          323,
          325,
          326,
          327,
          328,
          329,
          334,
          335,
          336,
          340,
          344,
          345,
          346,
          347,
          348,
          352,
          353,
          354,
          359,
          362,
          363,
          366,
          367,
          370,
          371,
          390,
          595,
          596,
          598,
          599,
          600,
          607,
          608,
          609,
          610,
          611,
          612,
          616,
          617,
          618,
          619,
          620,
          621,
          625,
          626,
          627,
          628,
          629,
          630,
          633,
          634,
          637,
          638,
          673,
          676,
          677,
          678,
          679,
          680,
          681,
          692,
          694,
          695,
          698,
          700,
          790,
          791,
          792,
          793,
          794,
          795,
          831
        ]
      },
      {
        "test_lines": [
          105,
          109
        ],
        "covered_lines": [
          49,
          51,
          58,
          59,
          60,
          61,
          62,
          63,
          64,
          124,
          128,
          130,
          131,
          132,
          133,
          136,
          138,
          140,
          143,
          144,
          145,
          146,
          148,
          151,
          152,
          159,
          160,
          162,
          177,
          179,
          180,
          183,
          184,
          187,
          188,
          189,
          195,
          196,
          197,
          206,
          207,
          210,
          212,
          316,
          317,
          318,
          323,
          325,
          326,
          327,
          328,
          329,
          334,
          335,
          336,
          340,
          344,
          345,
          346,
          347,
          348,
          352,
          353,
          354,
          359,
          362,
          363,
          366,
          367,
          370,
          371,
          390,
          595,
          596,
          598,
          599,
          600,
          607,
          608,
          609,
          610,
          611,
          612,
          616,
          617,
          618,
          619,
          620,
          621,
          625,
          626,
          627,
          628,
          629,
          630,
          633,
          634,
          637,
          638,
          704,
          707,
          708,
          709,
          710,
          720,
          721,
          724,
          726,
          790,
          791,
          792,
          793,
          794,
          795,
          831
        ]
      },
      {
        "test_lines": [
          111,
          115
        ],
        "covered_lines": [
          49,
          51,
          58,
          59,
          60,
          61,
          62,
          63,
          64,
          124,
          128,
          130,
          131,
          132,
          133,
          136,
          138,
          140,
          143,
          144,
          145,
          146,
          148,
          151,
          152,
          159,
          160,
          162,
          177,
          179,
          180,
          183,
          184,
          187,
          188,
          189,
          195,
          196,
          197,
          206,
          207,
          210,
          212,
          316,
          317,
          318,
          323,
          325,
          326,
          327,
          328,
          329,
          334,
          335,
          336,
          340,
          344,
          345,
          346,
          347,
          348,
          352,
          353,
          354,
          359,
          362,
          363,
          366,
          367,
          370,
          371,
          390,
          595,
          596,
          598,
          599,
          600,
          607,
          608,
          609,
          610,
          611,
          612,
          616,
          617,
          618,
          619,
          620,
          621,
          625,
          626,
          627,
          628,
          629,
          630,
          633,
          634,
          637,
          638,
          730,
          733,
          734,
          735,
          736,
          746,
          747,
          750,
          752,
          790,
          791,
          792,
          793,
          794,
          795,
          831
        ]
      },
      {
        "test_lines": [
          117,
          121
        ],
        "covered_lines": [
          49,
          51,
          58,
          59,
          60,
          61,
          62,
          63,
          64,
          124,
          128,
          130,
          131,
          132,
          133,
          136,
          138,
          140,
          143,
          144,
          145,
          146,
          148,
          151,
          152,
          159,
          160,
          162,
          177,
          179,
          180,
          183,
          184,
          187,
          188,
          189,
          195,
          196,
          197,
          206,
          207,
          210,
          212,
          316,
          317,
          318,
          323,
          325,
          326,
          327,
          328,
          329,
          334,
          335,
          336,
          340,
          344,
          345,
          346,
          347,
          348,
          352,
          353,
          354,
          359,
          362,
          363,
          366,
          367,
          370,
          371,
          390,
          595,
          596,
          598,
          599,
          600,
          607,
          608,
          609,
          610,
          611,
          612,
          616,
          617,
          618,
          619,
          620,
          621,
          625,
          626,
          627,
          628,
          629,
          630,
          633,
          634,
          637,
          638,
          756,
          759,
          760,
          761,
          762,
          773,
          774,
          777,
          779,
          790,
          791,
          792,
          793,
          794,
          795,
          831
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/RocketMQC/namesrv/src/main/java/org/apache/rocketmq/namesrv/routeinfo/BrokerHousekeepingService.java": {
    "class_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.namesrv.routeinfo;\n",
      "\n",
      "import io.netty.channel.Channel;\n",
      "import org.apache.rocketmq.common.constant.LoggerName;\n",
      "import org.apache.rocketmq.logging.InternalLogger;\n",
      "import org.apache.rocketmq.logging.InternalLoggerFactory;\n",
      "import org.apache.rocketmq.namesrv.NamesrvController;\n",
      "import org.apache.rocketmq.remoting.ChannelEventListener;\n",
      "\n",
      "/**\n",
      " * \u7528\u4e8e\u5904\u7406channel\u5173\u95ed\u8fde\u63a5\u5f02\u5e38\u7a7a\u95f2\u4e8b\u4ef6\uff0c\u5b9e\u73b0\u4e86ChannelEventListener\u63a5\u53e3\uff0c\u9664\u4e86onChannelConnect\u5916\uff0c\u5176\u4f59\u5404\u4e2a\u65b9\u6cd5\u5747\u59d4\u6258\u7ed9NamesrvController\u7684routeInfoManager\u7684onChannelDestroy\u65b9\u6cd5\n",
      " */\n",
      "public class BrokerHousekeepingService implements ChannelEventListener {\n",
      "    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.NAMESRV_LOGGER_NAME);\n",
      "    private final NamesrvController namesrvController;\n",
      "\n",
      "    public BrokerHousekeepingService(NamesrvController namesrvController) {\n",
      "        this.namesrvController = namesrvController;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public void onChannelConnect(String remoteAddr, Channel channel) {\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public void onChannelClose(String remoteAddr, Channel channel) {\n",
      "        this.namesrvController.getRouteInfoManager().onChannelDestroy(remoteAddr, channel);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public void onChannelException(String remoteAddr, Channel channel) {\n",
      "        this.namesrvController.getRouteInfoManager().onChannelDestroy(remoteAddr, channel);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public void onChannelIdle(String remoteAddr, Channel channel) {\n",
      "        this.namesrvController.getRouteInfoManager().onChannelDestroy(remoteAddr, channel);\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "\n",
      "package org.apache.rocketmq.namesrv.routeinfo;\n",
      "\n",
      "import org.apache.rocketmq.common.namesrv.NamesrvConfig;\n",
      "import org.apache.rocketmq.namesrv.NamesrvController;\n",
      "import org.apache.rocketmq.remoting.netty.NettyServerConfig;\n",
      "import org.junit.AfterClass;\n",
      "import org.junit.BeforeClass;\n",
      "import org.junit.Test;\n",
      "\n",
      "public class BrokerHousekeepingServiceTest {\n",
      "    private static BrokerHousekeepingService brokerHousekeepingService;\n",
      "\n",
      "    @BeforeClass\n",
      "    public static void setup() {\n",
      "        NamesrvController namesrvController = new NamesrvController(\n",
      "            new NamesrvConfig(),\n",
      "            new NettyServerConfig()\n",
      "        );\n",
      "        brokerHousekeepingService = new BrokerHousekeepingService(namesrvController);\n",
      "    }\n",
      "\n",
      "    @AfterClass\n",
      "    public static void terminate() {\n",
      "\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testOnChannelClose() {\n",
      "        brokerHousekeepingService.onChannelClose(\"127.0.0.1:9876\", null);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testOnChannelException() {\n",
      "        brokerHousekeepingService.onChannelException(\"127.0.0.1:9876\", null);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testOnChannelIdle() {\n",
      "        brokerHousekeepingService.onChannelException(\"127.0.0.1:9876\", null);\n",
      "    }\n",
      "\n",
      "}"
    ],
    "method_lines_dic": {},
    "test_method_lines_dic": {
      "BrokerHousekeepingServiceTest::::setup()": [
        30,
        37
      ],
      "BrokerHousekeepingServiceTest::::terminate()": [
        39,
        42
      ],
      "BrokerHousekeepingServiceTest::::testOnChannelClose()": [
        44,
        47
      ],
      "BrokerHousekeepingServiceTest::::testOnChannelException()": [
        49,
        52
      ],
      "BrokerHousekeepingServiceTest::::testOnChannelIdle()": [
        54,
        57
      ]
    },
    "reverse_method_lines_dic": {},
    "test_reverse_method_lines_dic": {
      "30": "BrokerHousekeepingServiceTest::::setup()",
      "31": "BrokerHousekeepingServiceTest::::setup()",
      "32": "BrokerHousekeepingServiceTest::::setup()",
      "33": "BrokerHousekeepingServiceTest::::setup()",
      "34": "BrokerHousekeepingServiceTest::::setup()",
      "35": "BrokerHousekeepingServiceTest::::setup()",
      "36": "BrokerHousekeepingServiceTest::::setup()",
      "37": "BrokerHousekeepingServiceTest::::setup()",
      "39": "BrokerHousekeepingServiceTest::::terminate()",
      "40": "BrokerHousekeepingServiceTest::::terminate()",
      "41": "BrokerHousekeepingServiceTest::::terminate()",
      "42": "BrokerHousekeepingServiceTest::::terminate()",
      "44": "BrokerHousekeepingServiceTest::::testOnChannelClose()",
      "45": "BrokerHousekeepingServiceTest::::testOnChannelClose()",
      "46": "BrokerHousekeepingServiceTest::::testOnChannelClose()",
      "47": "BrokerHousekeepingServiceTest::::testOnChannelClose()",
      "49": "BrokerHousekeepingServiceTest::::testOnChannelException()",
      "50": "BrokerHousekeepingServiceTest::::testOnChannelException()",
      "51": "BrokerHousekeepingServiceTest::::testOnChannelException()",
      "52": "BrokerHousekeepingServiceTest::::testOnChannelException()",
      "54": "BrokerHousekeepingServiceTest::::testOnChannelIdle()",
      "55": "BrokerHousekeepingServiceTest::::testOnChannelIdle()",
      "56": "BrokerHousekeepingServiceTest::::testOnChannelIdle()",
      "57": "BrokerHousekeepingServiceTest::::testOnChannelIdle()"
    },
    "tests": [
      {
        "test_lines": [
          44,
          47
        ],
        "covered_lines": [
          30,
          33,
          34,
          35,
          43,
          44
        ]
      },
      {
        "test_lines": [
          49,
          52
        ],
        "covered_lines": [
          30,
          33,
          34,
          35,
          48,
          49
        ]
      },
      {
        "test_lines": [
          54,
          57
        ],
        "covered_lines": [
          30,
          33,
          34,
          35,
          48,
          49
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/RocketMQC/namesrv/src/main/java/org/apache/rocketmq/namesrv/kvconfig/KVConfigSerializeWrapper.java": {
    "class_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.namesrv.kvconfig;\n",
      "\n",
      "import java.util.HashMap;\n",
      "import org.apache.rocketmq.remoting.protocol.RemotingSerializable;\n",
      "\n",
      "public class KVConfigSerializeWrapper extends RemotingSerializable {\n",
      "    private HashMap<String/* Namespace */, HashMap<String/* Key */, String/* Value */>> configTable;\n",
      "\n",
      "    public HashMap<String, HashMap<String, String>> getConfigTable() {\n",
      "        return configTable;\n",
      "    }\n",
      "\n",
      "    public void setConfigTable(HashMap<String, HashMap<String, String>> configTable) {\n",
      "        this.configTable = configTable;\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.namesrv.kvconfig;\n",
      "\n",
      "import java.util.HashMap;\n",
      "import org.apache.rocketmq.common.namesrv.NamesrvUtil;\n",
      "import org.junit.Before;\n",
      "import org.junit.Test;\n",
      "\n",
      "import static org.assertj.core.api.Assertions.assertThat;\n",
      "\n",
      "public class KVConfigSerializeWrapperTest {\n",
      "    private KVConfigSerializeWrapper kvConfigSerializeWrapper;\n",
      "\n",
      "    @Before\n",
      "    public void setup() throws Exception {\n",
      "        kvConfigSerializeWrapper = new KVConfigSerializeWrapper();\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testEncodeAndDecode() {\n",
      "        HashMap<String, HashMap<String, String>> result = new HashMap<>();\n",
      "        HashMap<String, String> kvs = new HashMap<>();\n",
      "        kvs.put(\"broker-name\", \"default-broker\");\n",
      "        kvs.put(\"topic-name\", \"default-topic\");\n",
      "        kvs.put(\"cid\", \"default-consumer-name\");\n",
      "        result.put(NamesrvUtil.NAMESPACE_ORDER_TOPIC_CONFIG, kvs);\n",
      "        kvConfigSerializeWrapper.setConfigTable(result);\n",
      "        //KVConfigSerializeWrapper\u8f6c\u6362\u4e3ajson\n",
      "        byte[] serializeByte = KVConfigSerializeWrapper.encode(kvConfigSerializeWrapper);\n",
      "        assertThat(serializeByte).isNotNull();\n",
      "        //json\u5bf9\u5e94\u8f6c\u6362\u4e3aKVConfigSerializeWrapper\n",
      "        KVConfigSerializeWrapper deserializeObject = KVConfigSerializeWrapper.decode(serializeByte, KVConfigSerializeWrapper.class);\n",
      "        assertThat(deserializeObject.getConfigTable()).containsKey(NamesrvUtil.NAMESPACE_ORDER_TOPIC_CONFIG);\n",
      "        assertThat(deserializeObject.getConfigTable().get(NamesrvUtil.NAMESPACE_ORDER_TOPIC_CONFIG).get(\"broker-name\")).isEqualTo(\"default-broker\");\n",
      "        assertThat(deserializeObject.getConfigTable().get(NamesrvUtil.NAMESPACE_ORDER_TOPIC_CONFIG).get(\"topic-name\")).isEqualTo(\"default-topic\");\n",
      "        assertThat(deserializeObject.getConfigTable().get(NamesrvUtil.NAMESPACE_ORDER_TOPIC_CONFIG).get(\"cid\")).isEqualTo(\"default-consumer-name\");\n",
      "    }\n",
      "\n",
      "}"
    ],
    "method_lines_dic": {
      "KVConfigSerializeWrapper::::getConfigTable()": [
        25,
        27
      ],
      "KVConfigSerializeWrapper::::setConfigTable(java.util.HashMap<java.lang.String, java.util.HashMap<java.lang.String, java.lang.String>>)": [
        29,
        31
      ]
    },
    "test_method_lines_dic": {
      "KVConfigSerializeWrapperTest::::setup()": [
        29,
        32
      ],
      "KVConfigSerializeWrapperTest::::testEncodeAndDecode()": [
        34,
        52
      ]
    },
    "reverse_method_lines_dic": {
      "25": "KVConfigSerializeWrapper::::getConfigTable()",
      "26": "KVConfigSerializeWrapper::::getConfigTable()",
      "27": "KVConfigSerializeWrapper::::getConfigTable()",
      "29": "KVConfigSerializeWrapper::::setConfigTable(java.util.HashMap<java.lang.String, java.util.HashMap<java.lang.String, java.lang.String>>)",
      "30": "KVConfigSerializeWrapper::::setConfigTable(java.util.HashMap<java.lang.String, java.util.HashMap<java.lang.String, java.lang.String>>)",
      "31": "KVConfigSerializeWrapper::::setConfigTable(java.util.HashMap<java.lang.String, java.util.HashMap<java.lang.String, java.lang.String>>)"
    },
    "test_reverse_method_lines_dic": {
      "29": "KVConfigSerializeWrapperTest::::setup()",
      "30": "KVConfigSerializeWrapperTest::::setup()",
      "31": "KVConfigSerializeWrapperTest::::setup()",
      "32": "KVConfigSerializeWrapperTest::::setup()",
      "34": "KVConfigSerializeWrapperTest::::testEncodeAndDecode()",
      "35": "KVConfigSerializeWrapperTest::::testEncodeAndDecode()",
      "36": "KVConfigSerializeWrapperTest::::testEncodeAndDecode()",
      "37": "KVConfigSerializeWrapperTest::::testEncodeAndDecode()",
      "38": "KVConfigSerializeWrapperTest::::testEncodeAndDecode()",
      "39": "KVConfigSerializeWrapperTest::::testEncodeAndDecode()",
      "40": "KVConfigSerializeWrapperTest::::testEncodeAndDecode()",
      "41": "KVConfigSerializeWrapperTest::::testEncodeAndDecode()",
      "42": "KVConfigSerializeWrapperTest::::testEncodeAndDecode()",
      "43": "KVConfigSerializeWrapperTest::::testEncodeAndDecode()",
      "44": "KVConfigSerializeWrapperTest::::testEncodeAndDecode()",
      "45": "KVConfigSerializeWrapperTest::::testEncodeAndDecode()",
      "46": "KVConfigSerializeWrapperTest::::testEncodeAndDecode()",
      "47": "KVConfigSerializeWrapperTest::::testEncodeAndDecode()",
      "48": "KVConfigSerializeWrapperTest::::testEncodeAndDecode()",
      "49": "KVConfigSerializeWrapperTest::::testEncodeAndDecode()",
      "50": "KVConfigSerializeWrapperTest::::testEncodeAndDecode()",
      "51": "KVConfigSerializeWrapperTest::::testEncodeAndDecode()",
      "52": "KVConfigSerializeWrapperTest::::testEncodeAndDecode()"
    },
    "tests": [
      {
        "test_lines": [
          34,
          52
        ],
        "covered_lines": [
          22,
          26,
          30,
          31
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/RocketMQC/namesrv/src/main/java/org/apache/rocketmq/namesrv/kvconfig/KVConfigManager.java": {
    "class_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.namesrv.kvconfig;\n",
      "\n",
      "import java.io.IOException;\n",
      "import java.util.HashMap;\n",
      "import java.util.Iterator;\n",
      "import java.util.Map.Entry;\n",
      "import java.util.concurrent.locks.ReadWriteLock;\n",
      "import java.util.concurrent.locks.ReentrantReadWriteLock;\n",
      "import org.apache.rocketmq.common.MixAll;\n",
      "import org.apache.rocketmq.common.constant.LoggerName;\n",
      "import org.apache.rocketmq.logging.InternalLogger;\n",
      "import org.apache.rocketmq.logging.InternalLoggerFactory;\n",
      "import org.apache.rocketmq.common.protocol.body.KVTable;\n",
      "import org.apache.rocketmq.namesrv.NamesrvController;\n",
      "public class KVConfigManager {\n",
      "    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.NAMESRV_LOGGER_NAME);\n",
      "\n",
      "    private final NamesrvController namesrvController;\n",
      "\n",
      "    //\u4f7f\u7528\u8bfb\u5199\u9501\u63d0\u5347\u8bfb\u5199\u6027\u80fd\uff0c\u914d\u7f6e\u4fe1\u606f\u4e00\u822c\u8bfb\u591a\u5199\u5c11\uff0c\u63d0\u9ad8\u5e76\u53d1\u8bfb\u7684\u6027\u80fd\n",
      "    private final ReadWriteLock lock = new ReentrantReadWriteLock();\n",
      "    private final HashMap<String/* Namespace */, HashMap<String/* Key */, String/* Value */>> configTable =\n",
      "        new HashMap<String, HashMap<String, String>>();\n",
      "\n",
      "\n",
      "    public KVConfigManager(NamesrvController namesrvController) {\n",
      "        this.namesrvController = namesrvController;\n",
      "    }\n",
      "\n",
      "    public void load() {\n",
      "        String content = null;\n",
      "        try {\n",
      "            content = MixAll.file2String(this.namesrvController.getNamesrvConfig().getKvConfigPath());\n",
      "        } catch (IOException e) {\n",
      "            log.warn(\"Load KV config table exception\", e);\n",
      "        }\n",
      "        if (content != null) {\n",
      "            KVConfigSerializeWrapper kvConfigSerializeWrapper =\n",
      "                KVConfigSerializeWrapper.fromJson(content, KVConfigSerializeWrapper.class);\n",
      "            if (null != kvConfigSerializeWrapper) {\n",
      "                this.configTable.putAll(kvConfigSerializeWrapper.getConfigTable());\n",
      "                log.info(\"load KV config table OK\");\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "    //\u6587\u4ef6\u4fdd\u5b58\u914d\u7f6e\u4fe1\u606f,1 \u4fdd\u5b58\u5230configTable hashmap\u4e2d\uff0c2 \u4ececonfigTable\u5230\u672c\u5730\u6587\u4ef6\n",
      "    public void putKVConfig(final String namespace, final String key, final String value) {\n",
      "        try {\n",
      "            this.lock.writeLock().lockInterruptibly();\n",
      "            try {\n",
      "                HashMap<String, String> kvTable = this.configTable.get(namespace);\n",
      "                if (null == kvTable) {\n",
      "                    kvTable = new HashMap<String, String>();\n",
      "                    this.configTable.put(namespace, kvTable);\n",
      "                    log.info(\"putKVConfig create new Namespace {}\", namespace);\n",
      "                }\n",
      "\n",
      "                final String prev = kvTable.put(key, value);\n",
      "                if (null != prev) {\n",
      "                    log.info(\"putKVConfig update config item, Namespace: {} Key: {} Value: {}\",\n",
      "                        namespace, key, value);\n",
      "                } else {\n",
      "                    log.info(\"putKVConfig create new config item, Namespace: {} Key: {} Value: {}\",\n",
      "                        namespace, key, value);\n",
      "                }\n",
      "            } finally {\n",
      "                this.lock.writeLock().unlock();\n",
      "            }\n",
      "        } catch (InterruptedException e) {\n",
      "            log.error(\"putKVConfig InterruptedException\", e);\n",
      "        }\n",
      "        //\u6587\u4ef6\u4fdd\u5b58\u914d\u7f6e\u4fe1\u606f,\u4ececonfigTable\u5230\u672c\u5730\u6587\u4ef6\n",
      "        this.persist();\n",
      "    }\n",
      "\n",
      "    public void persist() {\n",
      "        try {\n",
      "            this.lock.readLock().lockInterruptibly();\n",
      "            try {\n",
      "                KVConfigSerializeWrapper kvConfigSerializeWrapper = new KVConfigSerializeWrapper();\n",
      "                kvConfigSerializeWrapper.setConfigTable(this.configTable);\n",
      "                //\u8fd4\u56de\u5982\uff0c{\"configTable\":{\"ORDER_TOPIC_CONFIG\":{\"UnitTest\":\"test\"}}}\n",
      "                String content = kvConfigSerializeWrapper.toJson();\n",
      "\n",
      "                if (null != content) {\n",
      "                    //\u6587\u4ef6\u4fdd\u5b58\uff08\u5220\u9664\uff09\u914d\u7f6e\u4fe1\u606f,\u4ececonfigTable\u5230\u672c\u5730\u6587\u4ef6\n",
      "                    MixAll.string2File(content, this.namesrvController.getNamesrvConfig().getKvConfigPath());\n",
      "                }\n",
      "            } catch (IOException e) {\n",
      "                log.error(\"persist kvconfig Exception, \"\n",
      "                    + this.namesrvController.getNamesrvConfig().getKvConfigPath(), e);\n",
      "            } finally {\n",
      "                this.lock.readLock().unlock();\n",
      "            }\n",
      "        } catch (InterruptedException e) {\n",
      "            log.error(\"persist InterruptedException\", e);\n",
      "        }\n",
      "\n",
      "    }\n",
      "\n",
      "    public void deleteKVConfig(final String namespace, final String key) {\n",
      "        try {\n",
      "            this.lock.writeLock().lockInterruptibly();\n",
      "            try {\n",
      "                HashMap<String, String> kvTable = this.configTable.get(namespace);\n",
      "                if (null != kvTable) {\n",
      "                    String value = kvTable.remove(key);\n",
      "                    log.info(\"deleteKVConfig delete a config item, Namespace: {} Key: {} Value: {}\",\n",
      "                        namespace, key, value);\n",
      "                }\n",
      "            } finally {\n",
      "                this.lock.writeLock().unlock();\n",
      "            }\n",
      "        } catch (InterruptedException e) {\n",
      "            log.error(\"deleteKVConfig InterruptedException\", e);\n",
      "        }\n",
      "\n",
      "        this.persist();\n",
      "    }\n",
      "\n",
      "    public byte[] getKVListByNamespace(final String namespace) {\n",
      "        try {\n",
      "            this.lock.readLock().lockInterruptibly();\n",
      "            try {\n",
      "                HashMap<String, String> kvTable = this.configTable.get(namespace);\n",
      "                if (null != kvTable) {\n",
      "                    KVTable table = new KVTable();\n",
      "                    table.setTable(kvTable);\n",
      "                    return table.encode();\n",
      "                }\n",
      "            } finally {\n",
      "                this.lock.readLock().unlock();\n",
      "            }\n",
      "        } catch (InterruptedException e) {\n",
      "            log.error(\"getKVListByNamespace InterruptedException\", e);\n",
      "        }\n",
      "\n",
      "        return null;\n",
      "    }\n",
      "\n",
      "    public String getKVConfig(final String namespace, final String key) {\n",
      "        try {\n",
      "            this.lock.readLock().lockInterruptibly();\n",
      "            try {\n",
      "                HashMap<String, String> kvTable = this.configTable.get(namespace);\n",
      "                if (null != kvTable) {\n",
      "                    return kvTable.get(key);\n",
      "                }\n",
      "            } finally {\n",
      "                this.lock.readLock().unlock();\n",
      "            }\n",
      "        } catch (InterruptedException e) {\n",
      "            log.error(\"getKVConfig InterruptedException\", e);\n",
      "        }\n",
      "\n",
      "        return null;\n",
      "    }\n",
      "\n",
      "    public void printAllPeriodically() {\n",
      "        try {\n",
      "            this.lock.readLock().lockInterruptibly();\n",
      "            try {\n",
      "                log.info(\"--------------------------------------------------------\");\n",
      "\n",
      "                {\n",
      "                    log.info(\"configTable SIZE: {}\", this.configTable.size());\n",
      "                    Iterator<Entry<String, HashMap<String, String>>> it =\n",
      "                        this.configTable.entrySet().iterator();\n",
      "                    while (it.hasNext()) {\n",
      "                        Entry<String, HashMap<String, String>> next = it.next();\n",
      "                        Iterator<Entry<String, String>> itSub = next.getValue().entrySet().iterator();\n",
      "                        while (itSub.hasNext()) {\n",
      "                            Entry<String, String> nextSub = itSub.next();\n",
      "                            log.info(\"configTable NS: {} Key: {} Value: {}\", next.getKey(), nextSub.getKey(),\n",
      "                                nextSub.getValue());\n",
      "                        }\n",
      "                    }\n",
      "                }\n",
      "            } finally {\n",
      "                this.lock.readLock().unlock();\n",
      "            }\n",
      "        } catch (InterruptedException e) {\n",
      "            log.error(\"printAllPeriodically InterruptedException\", e);\n",
      "        }\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.namesrv.kvconfig;\n",
      "\n",
      "import org.apache.rocketmq.common.namesrv.NamesrvUtil;\n",
      "import org.apache.rocketmq.namesrv.NameServerInstanceTest;\n",
      "import org.junit.Assert;\n",
      "import org.junit.Before;\n",
      "import org.junit.Test;\n",
      "\n",
      "import static org.assertj.core.api.Assertions.assertThat;\n",
      "\n",
      "public class KVConfigManagerTest extends NameServerInstanceTest {\n",
      "    private KVConfigManager kvConfigManager;\n",
      "\n",
      "    @Before\n",
      "    public void setup() throws Exception {\n",
      "        kvConfigManager = new KVConfigManager(nameSrvController);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testPutKVConfig() {\n",
      "        //\u6587\u4ef6\u4fdd\u5b58\u914d\u7f6e\u4fe1\u606f,1 \u4fdd\u5b58\u5230configTable hashmap\u4e2d\uff0c2 \u4ececonfigTable\u5230\u672c\u5730\u6587\u4ef6\n",
      "        //\u4fdd\u5b58\u4fe1\u606f{\"configTable\":{\"ORDER_TOPIC_CONFIG\":{\"UnitTest\":\"test\"}}}\n",
      "        kvConfigManager.putKVConfig(NamesrvUtil.NAMESPACE_ORDER_TOPIC_CONFIG, \"UnitTest\", \"test\");\n",
      "        byte[] kvConfig = kvConfigManager.getKVListByNamespace(NamesrvUtil.NAMESPACE_ORDER_TOPIC_CONFIG);\n",
      "        assertThat(kvConfig).isNotNull();\n",
      "        String value = kvConfigManager.getKVConfig(NamesrvUtil.NAMESPACE_ORDER_TOPIC_CONFIG, \"UnitTest\");\n",
      "        assertThat(value).isEqualTo(\"test\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void testDeleteKVConfig() {\n",
      "        kvConfigManager.deleteKVConfig(NamesrvUtil.NAMESPACE_ORDER_TOPIC_CONFIG, \"UnitTest\");\n",
      "        byte[] kvConfig = kvConfigManager.getKVListByNamespace(NamesrvUtil.NAMESPACE_ORDER_TOPIC_CONFIG);\n",
      "        assertThat(kvConfig).isNull();\n",
      "        Assert.assertTrue(kvConfig == null);\n",
      "        String value = kvConfigManager.getKVConfig(NamesrvUtil.NAMESPACE_ORDER_TOPIC_CONFIG, \"UnitTest\");\n",
      "        assertThat(value).isNull();\n",
      "    }\n",
      "}"
    ],
    "method_lines_dic": {
      "KVConfigManager::::load()": [
        46,
        61
      ],
      "KVConfigManager::::putKVConfig(java.lang.String,java.lang.String,java.lang.String)": [
        63,
        90
      ],
      "KVConfigManager::::persist()": [
        92,
        115
      ],
      "KVConfigManager::::deleteKVConfig(java.lang.String,java.lang.String)": [
        117,
        135
      ],
      "KVConfigManager::::getKVListByNamespace(java.lang.String)": [
        137,
        155
      ],
      "KVConfigManager::::getKVConfig(java.lang.String,java.lang.String)": [
        157,
        173
      ],
      "KVConfigManager::::printAllPeriodically()": [
        175,
        201
      ]
    },
    "test_method_lines_dic": {
      "KVConfigManagerTest::::setup()": [
        30,
        33
      ],
      "KVConfigManagerTest::::testPutKVConfig()": [
        35,
        44
      ],
      "KVConfigManagerTest::::testDeleteKVConfig()": [
        46,
        54
      ]
    },
    "reverse_method_lines_dic": {
      "46": "KVConfigManager::::load()",
      "47": "KVConfigManager::::load()",
      "48": "KVConfigManager::::load()",
      "49": "KVConfigManager::::load()",
      "50": "KVConfigManager::::load()",
      "51": "KVConfigManager::::load()",
      "52": "KVConfigManager::::load()",
      "53": "KVConfigManager::::load()",
      "54": "KVConfigManager::::load()",
      "55": "KVConfigManager::::load()",
      "56": "KVConfigManager::::load()",
      "57": "KVConfigManager::::load()",
      "58": "KVConfigManager::::load()",
      "59": "KVConfigManager::::load()",
      "60": "KVConfigManager::::load()",
      "61": "KVConfigManager::::load()",
      "63": "KVConfigManager::::putKVConfig(java.lang.String,java.lang.String,java.lang.String)",
      "64": "KVConfigManager::::putKVConfig(java.lang.String,java.lang.String,java.lang.String)",
      "65": "KVConfigManager::::putKVConfig(java.lang.String,java.lang.String,java.lang.String)",
      "66": "KVConfigManager::::putKVConfig(java.lang.String,java.lang.String,java.lang.String)",
      "67": "KVConfigManager::::putKVConfig(java.lang.String,java.lang.String,java.lang.String)",
      "68": "KVConfigManager::::putKVConfig(java.lang.String,java.lang.String,java.lang.String)",
      "69": "KVConfigManager::::putKVConfig(java.lang.String,java.lang.String,java.lang.String)",
      "70": "KVConfigManager::::putKVConfig(java.lang.String,java.lang.String,java.lang.String)",
      "71": "KVConfigManager::::putKVConfig(java.lang.String,java.lang.String,java.lang.String)",
      "72": "KVConfigManager::::putKVConfig(java.lang.String,java.lang.String,java.lang.String)",
      "73": "KVConfigManager::::putKVConfig(java.lang.String,java.lang.String,java.lang.String)",
      "74": "KVConfigManager::::putKVConfig(java.lang.String,java.lang.String,java.lang.String)",
      "75": "KVConfigManager::::putKVConfig(java.lang.String,java.lang.String,java.lang.String)",
      "76": "KVConfigManager::::putKVConfig(java.lang.String,java.lang.String,java.lang.String)",
      "77": "KVConfigManager::::putKVConfig(java.lang.String,java.lang.String,java.lang.String)",
      "78": "KVConfigManager::::putKVConfig(java.lang.String,java.lang.String,java.lang.String)",
      "79": "KVConfigManager::::putKVConfig(java.lang.String,java.lang.String,java.lang.String)",
      "80": "KVConfigManager::::putKVConfig(java.lang.String,java.lang.String,java.lang.String)",
      "81": "KVConfigManager::::putKVConfig(java.lang.String,java.lang.String,java.lang.String)",
      "82": "KVConfigManager::::putKVConfig(java.lang.String,java.lang.String,java.lang.String)",
      "83": "KVConfigManager::::putKVConfig(java.lang.String,java.lang.String,java.lang.String)",
      "84": "KVConfigManager::::putKVConfig(java.lang.String,java.lang.String,java.lang.String)",
      "85": "KVConfigManager::::putKVConfig(java.lang.String,java.lang.String,java.lang.String)",
      "86": "KVConfigManager::::putKVConfig(java.lang.String,java.lang.String,java.lang.String)",
      "87": "KVConfigManager::::putKVConfig(java.lang.String,java.lang.String,java.lang.String)",
      "88": "KVConfigManager::::putKVConfig(java.lang.String,java.lang.String,java.lang.String)",
      "89": "KVConfigManager::::putKVConfig(java.lang.String,java.lang.String,java.lang.String)",
      "90": "KVConfigManager::::putKVConfig(java.lang.String,java.lang.String,java.lang.String)",
      "92": "KVConfigManager::::persist()",
      "93": "KVConfigManager::::persist()",
      "94": "KVConfigManager::::persist()",
      "95": "KVConfigManager::::persist()",
      "96": "KVConfigManager::::persist()",
      "97": "KVConfigManager::::persist()",
      "98": "KVConfigManager::::persist()",
      "99": "KVConfigManager::::persist()",
      "100": "KVConfigManager::::persist()",
      "101": "KVConfigManager::::persist()",
      "102": "KVConfigManager::::persist()",
      "103": "KVConfigManager::::persist()",
      "104": "KVConfigManager::::persist()",
      "105": "KVConfigManager::::persist()",
      "106": "KVConfigManager::::persist()",
      "107": "KVConfigManager::::persist()",
      "108": "KVConfigManager::::persist()",
      "109": "KVConfigManager::::persist()",
      "110": "KVConfigManager::::persist()",
      "111": "KVConfigManager::::persist()",
      "112": "KVConfigManager::::persist()",
      "113": "KVConfigManager::::persist()",
      "114": "KVConfigManager::::persist()",
      "115": "KVConfigManager::::persist()",
      "117": "KVConfigManager::::deleteKVConfig(java.lang.String,java.lang.String)",
      "118": "KVConfigManager::::deleteKVConfig(java.lang.String,java.lang.String)",
      "119": "KVConfigManager::::deleteKVConfig(java.lang.String,java.lang.String)",
      "120": "KVConfigManager::::deleteKVConfig(java.lang.String,java.lang.String)",
      "121": "KVConfigManager::::deleteKVConfig(java.lang.String,java.lang.String)",
      "122": "KVConfigManager::::deleteKVConfig(java.lang.String,java.lang.String)",
      "123": "KVConfigManager::::deleteKVConfig(java.lang.String,java.lang.String)",
      "124": "KVConfigManager::::deleteKVConfig(java.lang.String,java.lang.String)",
      "125": "KVConfigManager::::deleteKVConfig(java.lang.String,java.lang.String)",
      "126": "KVConfigManager::::deleteKVConfig(java.lang.String,java.lang.String)",
      "127": "KVConfigManager::::deleteKVConfig(java.lang.String,java.lang.String)",
      "128": "KVConfigManager::::deleteKVConfig(java.lang.String,java.lang.String)",
      "129": "KVConfigManager::::deleteKVConfig(java.lang.String,java.lang.String)",
      "130": "KVConfigManager::::deleteKVConfig(java.lang.String,java.lang.String)",
      "131": "KVConfigManager::::deleteKVConfig(java.lang.String,java.lang.String)",
      "132": "KVConfigManager::::deleteKVConfig(java.lang.String,java.lang.String)",
      "133": "KVConfigManager::::deleteKVConfig(java.lang.String,java.lang.String)",
      "134": "KVConfigManager::::deleteKVConfig(java.lang.String,java.lang.String)",
      "135": "KVConfigManager::::deleteKVConfig(java.lang.String,java.lang.String)",
      "137": "KVConfigManager::::getKVListByNamespace(java.lang.String)",
      "138": "KVConfigManager::::getKVListByNamespace(java.lang.String)",
      "139": "KVConfigManager::::getKVListByNamespace(java.lang.String)",
      "140": "KVConfigManager::::getKVListByNamespace(java.lang.String)",
      "141": "KVConfigManager::::getKVListByNamespace(java.lang.String)",
      "142": "KVConfigManager::::getKVListByNamespace(java.lang.String)",
      "143": "KVConfigManager::::getKVListByNamespace(java.lang.String)",
      "144": "KVConfigManager::::getKVListByNamespace(java.lang.String)",
      "145": "KVConfigManager::::getKVListByNamespace(java.lang.String)",
      "146": "KVConfigManager::::getKVListByNamespace(java.lang.String)",
      "147": "KVConfigManager::::getKVListByNamespace(java.lang.String)",
      "148": "KVConfigManager::::getKVListByNamespace(java.lang.String)",
      "149": "KVConfigManager::::getKVListByNamespace(java.lang.String)",
      "150": "KVConfigManager::::getKVListByNamespace(java.lang.String)",
      "151": "KVConfigManager::::getKVListByNamespace(java.lang.String)",
      "152": "KVConfigManager::::getKVListByNamespace(java.lang.String)",
      "153": "KVConfigManager::::getKVListByNamespace(java.lang.String)",
      "154": "KVConfigManager::::getKVListByNamespace(java.lang.String)",
      "155": "KVConfigManager::::getKVListByNamespace(java.lang.String)",
      "157": "KVConfigManager::::getKVConfig(java.lang.String,java.lang.String)",
      "158": "KVConfigManager::::getKVConfig(java.lang.String,java.lang.String)",
      "159": "KVConfigManager::::getKVConfig(java.lang.String,java.lang.String)",
      "160": "KVConfigManager::::getKVConfig(java.lang.String,java.lang.String)",
      "161": "KVConfigManager::::getKVConfig(java.lang.String,java.lang.String)",
      "162": "KVConfigManager::::getKVConfig(java.lang.String,java.lang.String)",
      "163": "KVConfigManager::::getKVConfig(java.lang.String,java.lang.String)",
      "164": "KVConfigManager::::getKVConfig(java.lang.String,java.lang.String)",
      "165": "KVConfigManager::::getKVConfig(java.lang.String,java.lang.String)",
      "166": "KVConfigManager::::getKVConfig(java.lang.String,java.lang.String)",
      "167": "KVConfigManager::::getKVConfig(java.lang.String,java.lang.String)",
      "168": "KVConfigManager::::getKVConfig(java.lang.String,java.lang.String)",
      "169": "KVConfigManager::::getKVConfig(java.lang.String,java.lang.String)",
      "170": "KVConfigManager::::getKVConfig(java.lang.String,java.lang.String)",
      "171": "KVConfigManager::::getKVConfig(java.lang.String,java.lang.String)",
      "172": "KVConfigManager::::getKVConfig(java.lang.String,java.lang.String)",
      "173": "KVConfigManager::::getKVConfig(java.lang.String,java.lang.String)",
      "175": "KVConfigManager::::printAllPeriodically()",
      "176": "KVConfigManager::::printAllPeriodically()",
      "177": "KVConfigManager::::printAllPeriodically()",
      "178": "KVConfigManager::::printAllPeriodically()",
      "179": "KVConfigManager::::printAllPeriodically()",
      "180": "KVConfigManager::::printAllPeriodically()",
      "181": "KVConfigManager::::printAllPeriodically()",
      "182": "KVConfigManager::::printAllPeriodically()",
      "183": "KVConfigManager::::printAllPeriodically()",
      "184": "KVConfigManager::::printAllPeriodically()",
      "185": "KVConfigManager::::printAllPeriodically()",
      "186": "KVConfigManager::::printAllPeriodically()",
      "187": "KVConfigManager::::printAllPeriodically()",
      "188": "KVConfigManager::::printAllPeriodically()",
      "189": "KVConfigManager::::printAllPeriodically()",
      "190": "KVConfigManager::::printAllPeriodically()",
      "191": "KVConfigManager::::printAllPeriodically()",
      "192": "KVConfigManager::::printAllPeriodically()",
      "193": "KVConfigManager::::printAllPeriodically()",
      "194": "KVConfigManager::::printAllPeriodically()",
      "195": "KVConfigManager::::printAllPeriodically()",
      "196": "KVConfigManager::::printAllPeriodically()",
      "197": "KVConfigManager::::printAllPeriodically()",
      "198": "KVConfigManager::::printAllPeriodically()",
      "199": "KVConfigManager::::printAllPeriodically()",
      "200": "KVConfigManager::::printAllPeriodically()",
      "201": "KVConfigManager::::printAllPeriodically()"
    },
    "test_reverse_method_lines_dic": {
      "30": "KVConfigManagerTest::::setup()",
      "31": "KVConfigManagerTest::::setup()",
      "32": "KVConfigManagerTest::::setup()",
      "33": "KVConfigManagerTest::::setup()",
      "35": "KVConfigManagerTest::::testPutKVConfig()",
      "36": "KVConfigManagerTest::::testPutKVConfig()",
      "37": "KVConfigManagerTest::::testPutKVConfig()",
      "38": "KVConfigManagerTest::::testPutKVConfig()",
      "39": "KVConfigManagerTest::::testPutKVConfig()",
      "40": "KVConfigManagerTest::::testPutKVConfig()",
      "41": "KVConfigManagerTest::::testPutKVConfig()",
      "42": "KVConfigManagerTest::::testPutKVConfig()",
      "43": "KVConfigManagerTest::::testPutKVConfig()",
      "44": "KVConfigManagerTest::::testPutKVConfig()",
      "46": "KVConfigManagerTest::::testDeleteKVConfig()",
      "47": "KVConfigManagerTest::::testDeleteKVConfig()",
      "48": "KVConfigManagerTest::::testDeleteKVConfig()",
      "49": "KVConfigManagerTest::::testDeleteKVConfig()",
      "50": "KVConfigManagerTest::::testDeleteKVConfig()",
      "51": "KVConfigManagerTest::::testDeleteKVConfig()",
      "52": "KVConfigManagerTest::::testDeleteKVConfig()",
      "53": "KVConfigManagerTest::::testDeleteKVConfig()",
      "54": "KVConfigManagerTest::::testDeleteKVConfig()"
    },
    "tests": [
      {
        "test_lines": [
          35,
          44
        ],
        "covered_lines": [
          32,
          37,
          38,
          42,
          43,
          44,
          47,
          49,
          52,
          53,
          54,
          55,
          56,
          57,
          58,
          61,
          65,
          67,
          68,
          69,
          70,
          71,
          74,
          75,
          79,
          83,
          84,
          87,
          89,
          90,
          94,
          96,
          97,
          99,
          101,
          103,
          109,
          110,
          113,
          115,
          139,
          141,
          142,
          143,
          144,
          145,
          148,
          159,
          161,
          162,
          163,
          166
        ]
      },
      {
        "test_lines": [
          46,
          54
        ],
        "covered_lines": [
          32,
          37,
          38,
          42,
          43,
          44,
          47,
          49,
          52,
          53,
          54,
          55,
          56,
          57,
          58,
          61,
          94,
          96,
          97,
          99,
          101,
          103,
          109,
          110,
          113,
          115,
          119,
          121,
          122,
          128,
          129,
          132,
          134,
          135,
          139,
          141,
          142,
          148,
          149,
          152,
          154,
          159,
          161,
          162,
          166,
          167,
          170,
          172
        ]
      }
    ]
  }
}