{"/bernard/dataset_construction/prep/repos/RocketMQC/logging/src/main/java/org/apache/rocketmq/logging/InnerLoggerFactory.java": {"class_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package org.apache.rocketmq.logging;\n", "\n", "import org.apache.rocketmq.logging.inner.Logger;\n", "\n", "import java.util.HashMap;\n", "import java.util.Map;\n", "\n", "public class InnerLoggerFactory extends InternalLoggerFactory {\n", "\n", "    public InnerLoggerFactory() {\n", "        doRegister();\n", "    }\n", "\n", "    @Override\n", "    protected InternalLogger getLoggerInstance(String name) {\n", "        return new InnerLogger(name);\n", "    }\n", "\n", "    @Override\n", "    protected String getLoggerType() {\n", "        return LOGGER_INNER;\n", "    }\n", "\n", "    @Override\n", "    protected void shutdown() {\n", "        Logger.getRepository().shutdown();\n", "    }\n", "\n", "    public static class InnerLogger implements InternalLogger {\n", "\n", "        private Logger logger;\n", "\n", "        public InnerLogger(String name) {\n", "            logger = Logger.getLogger(name);\n", "        }\n", "\n", "        @Override\n", "        public String getName() {\n", "            return logger.getName();\n", "        }\n", "\n", "        @Override\n", "        public void debug(String var1) {\n", "            logger.debug(var1);\n", "        }\n", "\n", "        @Override\n", "        public void debug(String var1, Throwable var2) {\n", "            logger.debug(var1, var2);\n", "        }\n", "\n", "        @Override\n", "        public void info(String var1) {\n", "            logger.info(var1);\n", "        }\n", "\n", "        @Override\n", "        public void info(String var1, Throwable var2) {\n", "            logger.info(var1, var2);\n", "        }\n", "\n", "        @Override\n", "        public void warn(String var1) {\n", "            logger.warn(var1);\n", "        }\n", "\n", "        @Override\n", "        public void warn(String var1, Throwable var2) {\n", "            logger.warn(var1, var2);\n", "        }\n", "\n", "        @Override\n", "        public void error(String var1) {\n", "            logger.error(var1);\n", "        }\n", "\n", "        @Override\n", "        public void error(String var1, Throwable var2) {\n", "            logger.error(var1, var2);\n", "        }\n", "\n", "        @Override\n", "        public void debug(String var1, Object var2) {\n", "            FormattingTuple format = MessageFormatter.format(var1, var2);\n", "            logger.debug(format.getMessage(), format.getThrowable());\n", "        }\n", "\n", "        @Override\n", "        public void debug(String var1, Object var2, Object var3) {\n", "            FormattingTuple format = MessageFormatter.format(var1, var2, var3);\n", "            logger.debug(format.getMessage(), format.getThrowable());\n", "        }\n", "\n", "        @Override\n", "        public void debug(String var1, Object... var2) {\n", "            FormattingTuple format = MessageFormatter.arrayFormat(var1, var2);\n", "            logger.debug(format.getMessage(), format.getThrowable());\n", "        }\n", "\n", "        @Override\n", "        public void info(String var1, Object var2) {\n", "            FormattingTuple format = MessageFormatter.format(var1, var2);\n", "            logger.info(format.getMessage(), format.getThrowable());\n", "        }\n", "\n", "        @Override\n", "        public void info(String var1, Object var2, Object var3) {\n", "            FormattingTuple format = MessageFormatter.format(var1, var2, var3);\n", "            logger.info(format.getMessage(), format.getThrowable());\n", "        }\n", "\n", "        @Override\n", "        public void info(String var1, Object... var2) {\n", "            FormattingTuple format = MessageFormatter.arrayFormat(var1, var2);\n", "            logger.info(format.getMessage(), format.getThrowable());\n", "        }\n", "\n", "        @Override\n", "        public void warn(String var1, Object var2) {\n", "            FormattingTuple format = MessageFormatter.format(var1, var2);\n", "            logger.warn(format.getMessage(), format.getThrowable());\n", "        }\n", "\n", "        @Override\n", "        public void warn(String var1, Object... var2) {\n", "            FormattingTuple format = MessageFormatter.arrayFormat(var1, var2);\n", "            logger.warn(format.getMessage(), format.getThrowable());\n", "        }\n", "\n", "        @Override\n", "        public void warn(String var1, Object var2, Object var3) {\n", "            FormattingTuple format = MessageFormatter.format(var1, var2, var3);\n", "            logger.warn(format.getMessage(), format.getThrowable());\n", "        }\n", "\n", "        @Override\n", "        public void error(String var1, Object var2) {\n", "            FormattingTuple format = MessageFormatter.format(var1, var2);\n", "            logger.warn(format.getMessage(), format.getThrowable());\n", "        }\n", "\n", "        @Override\n", "        public void error(String var1, Object var2, Object var3) {\n", "            FormattingTuple format = MessageFormatter.format(var1, var2, var3);\n", "            logger.warn(format.getMessage(), format.getThrowable());\n", "        }\n", "\n", "        @Override\n", "        public void error(String var1, Object... var2) {\n", "            FormattingTuple format = MessageFormatter.arrayFormat(var1, var2);\n", "            logger.warn(format.getMessage(), format.getThrowable());\n", "        }\n", "\n", "        public Logger getLogger() {\n", "            return logger;\n", "        }\n", "    }\n", "\n", "\n", "    public static class FormattingTuple {\n", "        private String message;\n", "        private Throwable throwable;\n", "        private Object[] argArray;\n", "\n", "        public FormattingTuple(String message) {\n", "            this(message, null, null);\n", "        }\n", "\n", "        public FormattingTuple(String message, Object[] argArray, Throwable throwable) {\n", "            this.message = message;\n", "            this.throwable = throwable;\n", "            if (throwable == null) {\n", "                this.argArray = argArray;\n", "            } else {\n", "                this.argArray = trimmedCopy(argArray);\n", "            }\n", "\n", "        }\n", "\n", "        static Object[] trimmedCopy(Object[] argArray) {\n", "            if (argArray != null && argArray.length != 0) {\n", "                int trimemdLen = argArray.length - 1;\n", "                Object[] trimmed = new Object[trimemdLen];\n", "                System.arraycopy(argArray, 0, trimmed, 0, trimemdLen);\n", "                return trimmed;\n", "            } else {\n", "                throw new IllegalStateException(\"non-sensical empty or null argument array\");\n", "            }\n", "        }\n", "\n", "        public String getMessage() {\n", "            return this.message;\n", "        }\n", "\n", "        public Object[] getArgArray() {\n", "            return this.argArray;\n", "        }\n", "\n", "        public Throwable getThrowable() {\n", "            return this.throwable;\n", "        }\n", "    }\n", "\n", "    public static class MessageFormatter {\n", "\n", "        public MessageFormatter() {\n", "        }\n", "\n", "        public static FormattingTuple format(String messagePattern, Object arg) {\n", "            return arrayFormat(messagePattern, new Object[]{arg});\n", "        }\n", "\n", "        public static FormattingTuple format(String messagePattern, Object arg1, Object arg2) {\n", "            return arrayFormat(messagePattern, new Object[]{arg1, arg2});\n", "        }\n", "\n", "        static Throwable getThrowableCandidate(Object[] argArray) {\n", "            if (argArray != null && argArray.length != 0) {\n", "                Object lastEntry = argArray[argArray.length - 1];\n", "                return lastEntry instanceof Throwable ? (Throwable) lastEntry : null;\n", "            } else {\n", "                return null;\n", "            }\n", "        }\n", "\n", "        public static FormattingTuple arrayFormat(String messagePattern, Object[] argArray) {\n", "            Throwable throwableCandidate = getThrowableCandidate(argArray);\n", "            if (messagePattern == null) {\n", "                return new FormattingTuple(null, argArray, throwableCandidate);\n", "            } else if (argArray == null) {\n", "                return new FormattingTuple(messagePattern);\n", "            } else {\n", "                int i = 0;\n", "                StringBuilder sbuf = new StringBuilder(messagePattern.length() + 50);\n", "\n", "                int len;\n", "                for (len = 0; len < argArray.length; ++len) {\n", "                    int j = messagePattern.indexOf(\"{}\", i);\n", "                    if (j == -1) {\n", "                        if (i == 0) {\n", "                            return new FormattingTuple(messagePattern, argArray, throwableCandidate);\n", "                        }\n", "\n", "                        sbuf.append(messagePattern.substring(i, messagePattern.length()));\n", "                        return new FormattingTuple(sbuf.toString(), argArray, throwableCandidate);\n", "                    }\n", "\n", "                    if (isEscapeDelimeter(messagePattern, j)) {\n", "                        if (!isDoubleEscaped(messagePattern, j)) {\n", "                            --len;\n", "                            sbuf.append(messagePattern.substring(i, j - 1));\n", "                            sbuf.append('{');\n", "                            i = j + 1;\n", "                        } else {\n", "                            sbuf.append(messagePattern.substring(i, j - 1));\n", "                            deeplyAppendParameter(sbuf, argArray[len], null);\n", "                            i = j + 2;\n", "                        }\n", "                    } else {\n", "                        sbuf.append(messagePattern.substring(i, j));\n", "                        deeplyAppendParameter(sbuf, argArray[len], null);\n", "                        i = j + 2;\n", "                    }\n", "                }\n", "\n", "                sbuf.append(messagePattern.substring(i, messagePattern.length()));\n", "                if (len < argArray.length - 1) {\n", "                    return new FormattingTuple(sbuf.toString(), argArray, throwableCandidate);\n", "                } else {\n", "                    return new FormattingTuple(sbuf.toString(), argArray, null);\n", "                }\n", "            }\n", "        }\n", "\n", "        static boolean isEscapeDelimeter(String messagePattern, int delimeterStartIndex) {\n", "            if (delimeterStartIndex == 0) {\n", "                return false;\n", "            } else {\n", "                char potentialEscape = messagePattern.charAt(delimeterStartIndex - 1);\n", "                return potentialEscape == 92;\n", "            }\n", "        }\n", "\n", "        static boolean isDoubleEscaped(String messagePattern, int delimeterStartIndex) {\n", "            return delimeterStartIndex >= 2 && messagePattern.charAt(delimeterStartIndex - 2) == 92;\n", "        }\n", "\n", "        private static void deeplyAppendParameter(StringBuilder sbuf, Object o, Map<Object[], Object> seenMap) {\n", "            if (o == null) {\n", "                sbuf.append(\"null\");\n", "            } else {\n", "                if (!o.getClass().isArray()) {\n", "                    safeObjectAppend(sbuf, o);\n", "                } else if (o instanceof boolean[]) {\n", "                    booleanArrayAppend(sbuf, (boolean[]) o);\n", "                } else if (o instanceof byte[]) {\n", "                    byteArrayAppend(sbuf, (byte[]) o);\n", "                } else if (o instanceof char[]) {\n", "                    charArrayAppend(sbuf, (char[]) o);\n", "                } else if (o instanceof short[]) {\n", "                    shortArrayAppend(sbuf, (short[]) o);\n", "                } else if (o instanceof int[]) {\n", "                    intArrayAppend(sbuf, (int[]) o);\n", "                } else if (o instanceof long[]) {\n", "                    longArrayAppend(sbuf, (long[]) o);\n", "                } else if (o instanceof float[]) {\n", "                    floatArrayAppend(sbuf, (float[]) o);\n", "                } else if (o instanceof double[]) {\n", "                    doubleArrayAppend(sbuf, (double[]) o);\n", "                } else {\n", "                    objectArrayAppend(sbuf, (Object[]) o, seenMap);\n", "                }\n", "\n", "            }\n", "        }\n", "\n", "        private static void safeObjectAppend(StringBuilder sbuf, Object o) {\n", "            try {\n", "                String t = o.toString();\n", "                sbuf.append(t);\n", "            } catch (Throwable var3) {\n", "                System.err.println(\"RocketMQ InnerLogger: Failed toString() invocation on an object of type [\" + o.getClass().getName() + \"]\");\n", "                var3.printStackTrace();\n", "                sbuf.append(\"[FAILED toString()]\");\n", "            }\n", "\n", "        }\n", "\n", "        private static void objectArrayAppend(StringBuilder sbuf, Object[] a, Map<Object[], Object> seenMap) {\n", "            if (seenMap == null) {\n", "                seenMap = new HashMap<Object[], Object>();\n", "            }\n", "            sbuf.append('[');\n", "            if (!seenMap.containsKey(a)) {\n", "                seenMap.put(a, null);\n", "                int len = a.length;\n", "\n", "                for (int i = 0; i < len; ++i) {\n", "                    deeplyAppendParameter(sbuf, a[i], seenMap);\n", "                    if (i != len - 1) {\n", "                        sbuf.append(\", \");\n", "                    }\n", "                }\n", "\n", "                seenMap.remove(a);\n", "            } else {\n", "                sbuf.append(\"...\");\n", "            }\n", "\n", "            sbuf.append(']');\n", "        }\n", "\n", "        private static void booleanArrayAppend(StringBuilder sbuf, boolean[] a) {\n", "            sbuf.append('[');\n", "            int len = a.length;\n", "\n", "            for (int i = 0; i < len; ++i) {\n", "                sbuf.append(a[i]);\n", "                if (i != len - 1) {\n", "                    sbuf.append(\", \");\n", "                }\n", "            }\n", "\n", "            sbuf.append(']');\n", "        }\n", "\n", "        private static void byteArrayAppend(StringBuilder sbuf, byte[] a) {\n", "            sbuf.append('[');\n", "            int len = a.length;\n", "\n", "            for (int i = 0; i < len; ++i) {\n", "                sbuf.append(a[i]);\n", "                if (i != len - 1) {\n", "                    sbuf.append(\", \");\n", "                }\n", "            }\n", "\n", "            sbuf.append(']');\n", "        }\n", "\n", "        private static void charArrayAppend(StringBuilder sbuf, char[] a) {\n", "            sbuf.append('[');\n", "            int len = a.length;\n", "\n", "            for (int i = 0; i < len; ++i) {\n", "                sbuf.append(a[i]);\n", "                if (i != len - 1) {\n", "                    sbuf.append(\", \");\n", "                }\n", "            }\n", "\n", "            sbuf.append(']');\n", "        }\n", "\n", "        private static void shortArrayAppend(StringBuilder sbuf, short[] a) {\n", "            sbuf.append('[');\n", "            int len = a.length;\n", "\n", "            for (int i = 0; i < len; ++i) {\n", "                sbuf.append(a[i]);\n", "                if (i != len - 1) {\n", "                    sbuf.append(\", \");\n", "                }\n", "            }\n", "\n", "            sbuf.append(']');\n", "        }\n", "\n", "        private static void intArrayAppend(StringBuilder sbuf, int[] a) {\n", "            sbuf.append('[');\n", "            int len = a.length;\n", "\n", "            for (int i = 0; i < len; ++i) {\n", "                sbuf.append(a[i]);\n", "                if (i != len - 1) {\n", "                    sbuf.append(\", \");\n", "                }\n", "            }\n", "\n", "            sbuf.append(']');\n", "        }\n", "\n", "        private static void longArrayAppend(StringBuilder sbuf, long[] a) {\n", "            sbuf.append('[');\n", "            int len = a.length;\n", "\n", "            for (int i = 0; i < len; ++i) {\n", "                sbuf.append(a[i]);\n", "                if (i != len - 1) {\n", "                    sbuf.append(\", \");\n", "                }\n", "            }\n", "\n", "            sbuf.append(']');\n", "        }\n", "\n", "        private static void floatArrayAppend(StringBuilder sbuf, float[] a) {\n", "            sbuf.append('[');\n", "            int len = a.length;\n", "\n", "            for (int i = 0; i < len; ++i) {\n", "                sbuf.append(a[i]);\n", "                if (i != len - 1) {\n", "                    sbuf.append(\", \");\n", "                }\n", "            }\n", "\n", "            sbuf.append(']');\n", "        }\n", "\n", "        private static void doubleArrayAppend(StringBuilder sbuf, double[] a) {\n", "            sbuf.append('[');\n", "            int len = a.length;\n", "\n", "            for (int i = 0; i < len; ++i) {\n", "                sbuf.append(a[i]);\n", "                if (i != len - 1) {\n", "                    sbuf.append(\", \");\n", "                }\n", "            }\n", "\n", "            sbuf.append(']');\n", "        }\n", "    }\n", "}\n"], "test_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package org.apache.rocketmq.logging;\n", "\n", "import org.apache.rocketmq.logging.inner.Appender;\n", "import org.apache.rocketmq.logging.inner.Level;\n", "import org.apache.rocketmq.logging.inner.Logger;\n", "import org.apache.rocketmq.logging.inner.LoggingBuilder;\n", "import org.junit.After;\n", "import org.junit.Assert;\n", "import org.junit.Before;\n", "import org.junit.Test;\n", "\n", "import java.io.ByteArrayOutputStream;\n", "import java.io.PrintStream;\n", "\n", "public class InnerLoggerFactoryTest extends BasicLoggerTest {\n", "\n", "    private ByteArrayOutputStream byteArrayOutputStream;\n", "\n", "    public static final String LOGGER = \"ConsoleLogger\";\n", "\n", "    private PrintStream out;\n", "\n", "    @Before\n", "    public void initLogger() {\n", "        out = System.out;\n", "        byteArrayOutputStream = new ByteArrayOutputStream();\n", "        System.setOut(new PrintStream(byteArrayOutputStream));\n", "\n", "        Appender consoleAppender = LoggingBuilder.newAppenderBuilder()\n", "            .withConsoleAppender(LoggingBuilder.SYSTEM_OUT)\n", "            .withLayout(LoggingBuilder.newLayoutBuilder().withDefaultLayout().build()).build();\n", "\n", "        Logger consoleLogger = Logger.getLogger(\"ConsoleLogger\");\n", "        consoleLogger.setAdditivity(false);\n", "        consoleLogger.addAppender(consoleAppender);\n", "        consoleLogger.setLevel(Level.INFO);\n", "    }\n", "\n", "    @After\n", "    public void fixConsole() {\n", "        System.setOut(out);\n", "    }\n", "\n", "    @Test\n", "    public void testInnerLoggerFactory() {\n", "        InternalLoggerFactory.setCurrentLoggerType(InternalLoggerFactory.LOGGER_INNER);\n", "\n", "        InternalLogger logger1 = InnerLoggerFactory.getLogger(LOGGER);\n", "        InternalLogger logger = InternalLoggerFactory.getLogger(LOGGER);\n", "\n", "        Assert.assertTrue(logger.getName().equals(logger1.getName()));\n", "\n", "        InternalLogger logger2 = InnerLoggerFactory.getLogger(InnerLoggerFactoryTest.class);\n", "        InnerLoggerFactory.InnerLogger logger3 = (InnerLoggerFactory.InnerLogger) logger2;\n", "\n", "        logger.info(\"innerLogger inner info Message\");\n", "        logger.error(\"innerLogger inner error Message\", new RuntimeException());\n", "        logger.debug(\"innerLogger inner debug message\");\n", "        logger3.info(\"innerLogger info message\");\n", "        logger3.error(\"logback error message\");\n", "        logger3.info(\"info {}\", \"hahahah\");\n", "        logger3.warn(\"warn {}\", \"hahahah\");\n", "        logger3.warn(\"logger3 warn\");\n", "        logger3.error(\"error {}\", \"hahahah\");\n", "        logger3.debug(\"debug {}\", \"hahahah\");\n", "\n", "        String content = new String(byteArrayOutputStream.toByteArray());\n", "        System.out.println(content);\n", "\n", "        Assert.assertTrue(content.contains(\"InnerLoggerFactoryTest\"));\n", "        Assert.assertTrue(content.contains(\"info\"));\n", "        Assert.assertTrue(content.contains(\"RuntimeException\"));\n", "        Assert.assertTrue(!content.contains(\"debug\"));\n", "    }\n", "}\n"], "method_lines_dic": {"InnerLoggerFactory::::getLoggerInstance(java.lang.String)": [31, 34], "InnerLoggerFactory::::getLoggerType()": [36, 39], "InnerLoggerFactory::::shutdown()": [41, 44], "InnerLoggerFactory.InnerLogger::::getName()": [54, 57], "InnerLoggerFactory.InnerLogger::::debug(java.lang.String)": [59, 62], "InnerLoggerFactory.InnerLogger::::debug(java.lang.String,java.lang.Throwable)": [64, 67], "InnerLoggerFactory.InnerLogger::::info(java.lang.String)": [69, 72], "InnerLoggerFactory.InnerLogger::::info(java.lang.String,java.lang.Throwable)": [74, 77], "InnerLoggerFactory.InnerLogger::::warn(java.lang.String)": [79, 82], "InnerLoggerFactory.InnerLogger::::warn(java.lang.String,java.lang.Throwable)": [84, 87], "InnerLoggerFactory.InnerLogger::::error(java.lang.String)": [89, 92], "InnerLoggerFactory.InnerLogger::::error(java.lang.String,java.lang.Throwable)": [94, 97], "InnerLoggerFactory.InnerLogger::::debug(java.lang.String,java.lang.Object)": [99, 103], "InnerLoggerFactory.InnerLogger::::debug(java.lang.String,java.lang.Object,java.lang.Object)": [105, 109], "InnerLoggerFactory.InnerLogger::::debug(java.lang.String,java.lang.Object[])": [111, 115], "InnerLoggerFactory.InnerLogger::::info(java.lang.String,java.lang.Object)": [117, 121], "InnerLoggerFactory.InnerLogger::::info(java.lang.String,java.lang.Object,java.lang.Object)": [123, 127], "InnerLoggerFactory.InnerLogger::::info(java.lang.String,java.lang.Object[])": [129, 133], "InnerLoggerFactory.InnerLogger::::warn(java.lang.String,java.lang.Object)": [135, 139], "InnerLoggerFactory.InnerLogger::::warn(java.lang.String,java.lang.Object[])": [141, 145], "InnerLoggerFactory.InnerLogger::::warn(java.lang.String,java.lang.Object,java.lang.Object)": [147, 151], "InnerLoggerFactory.InnerLogger::::error(java.lang.String,java.lang.Object)": [153, 157], "InnerLoggerFactory.InnerLogger::::error(java.lang.String,java.lang.Object,java.lang.Object)": [159, 163], "InnerLoggerFactory.InnerLogger::::error(java.lang.String,java.lang.Object[])": [165, 169], "InnerLoggerFactory.InnerLogger::::getLogger()": [171, 173], "InnerLoggerFactory.FormattingTuple::::trimmedCopy(java.lang.Object[])": [197, 206], "InnerLoggerFactory.FormattingTuple::::getMessage()": [208, 210], "InnerLoggerFactory.FormattingTuple::::getArgArray()": [212, 214], "InnerLoggerFactory.FormattingTuple::::getThrowable()": [216, 218], "InnerLoggerFactory.MessageFormatter::::format(java.lang.String,java.lang.Object)": [226, 228], "InnerLoggerFactory.MessageFormatter::::format(java.lang.String,java.lang.Object,java.lang.Object)": [230, 232], "InnerLoggerFactory.MessageFormatter::::getThrowableCandidate(java.lang.Object[])": [234, 241], "InnerLoggerFactory.MessageFormatter::::arrayFormat(java.lang.String,java.lang.Object[])": [243, 290], "InnerLoggerFactory.MessageFormatter::::isEscapeDelimeter(java.lang.String,int)": [292, 299], "InnerLoggerFactory.MessageFormatter::::isDoubleEscaped(java.lang.String,int)": [301, 303], "InnerLoggerFactory.MessageFormatter::::deeplyAppendParameter(java.lang.StringBuilder,java.lang.Object,java.util.Map<java.lang.Object[], java.lang.Object>)": [305, 332], "InnerLoggerFactory.MessageFormatter::::safeObjectAppend(java.lang.StringBuilder,java.lang.Object)": [334, 344], "InnerLoggerFactory.MessageFormatter::::objectArrayAppend(java.lang.StringBuilder,java.lang.Object[],java.util.Map<java.lang.Object[], java.lang.Object>)": [346, 368], "InnerLoggerFactory.MessageFormatter::::booleanArrayAppend(java.lang.StringBuilder,boolean[])": [370, 382], "InnerLoggerFactory.MessageFormatter::::byteArrayAppend(java.lang.StringBuilder,byte[])": [384, 396], "InnerLoggerFactory.MessageFormatter::::charArrayAppend(java.lang.StringBuilder,char[])": [398, 410], "InnerLoggerFactory.MessageFormatter::::shortArrayAppend(java.lang.StringBuilder,short[])": [412, 424], "InnerLoggerFactory.MessageFormatter::::intArrayAppend(java.lang.StringBuilder,int[])": [426, 438], "InnerLoggerFactory.MessageFormatter::::longArrayAppend(java.lang.StringBuilder,long[])": [440, 452], "InnerLoggerFactory.MessageFormatter::::floatArrayAppend(java.lang.StringBuilder,float[])": [454, 466], "InnerLoggerFactory.MessageFormatter::::doubleArrayAppend(java.lang.StringBuilder,double[])": [468, 480]}, "test_method_lines_dic": {"InnerLoggerFactoryTest::::initLogger()": [40, 54], "InnerLoggerFactoryTest::::fixConsole()": [56, 59], "InnerLoggerFactoryTest::::testInnerLoggerFactory()": [61, 91]}, "reverse_method_lines_dic": {"31": "InnerLoggerFactory::::getLoggerInstance(java.lang.String)", "32": "InnerLoggerFactory::::getLoggerInstance(java.lang.String)", "33": "InnerLoggerFactory::::getLoggerInstance(java.lang.String)", "34": "InnerLoggerFactory::::getLoggerInstance(java.lang.String)", "36": "InnerLoggerFactory::::getLoggerType()", "37": "InnerLoggerFactory::::getLoggerType()", "38": "InnerLoggerFactory::::getLoggerType()", "39": "InnerLoggerFactory::::getLoggerType()", "41": "InnerLoggerFactory::::shutdown()", "42": "InnerLoggerFactory::::shutdown()", "43": "InnerLoggerFactory::::shutdown()", "44": "InnerLoggerFactory::::shutdown()", "54": "InnerLoggerFactory.InnerLogger::::getName()", "55": "InnerLoggerFactory.InnerLogger::::getName()", "56": "InnerLoggerFactory.InnerLogger::::getName()", "57": "InnerLoggerFactory.InnerLogger::::getName()", "59": "InnerLoggerFactory.InnerLogger::::debug(java.lang.String)", "60": "InnerLoggerFactory.InnerLogger::::debug(java.lang.String)", "61": "InnerLoggerFactory.InnerLogger::::debug(java.lang.String)", "62": "InnerLoggerFactory.InnerLogger::::debug(java.lang.String)", "64": "InnerLoggerFactory.InnerLogger::::debug(java.lang.String,java.lang.Throwable)", "65": "InnerLoggerFactory.InnerLogger::::debug(java.lang.String,java.lang.Throwable)", "66": "InnerLoggerFactory.InnerLogger::::debug(java.lang.String,java.lang.Throwable)", "67": "InnerLoggerFactory.InnerLogger::::debug(java.lang.String,java.lang.Throwable)", "69": "InnerLoggerFactory.InnerLogger::::info(java.lang.String)", "70": "InnerLoggerFactory.InnerLogger::::info(java.lang.String)", "71": "InnerLoggerFactory.InnerLogger::::info(java.lang.String)", "72": "InnerLoggerFactory.InnerLogger::::info(java.lang.String)", "74": "InnerLoggerFactory.InnerLogger::::info(java.lang.String,java.lang.Throwable)", "75": "InnerLoggerFactory.InnerLogger::::info(java.lang.String,java.lang.Throwable)", "76": "InnerLoggerFactory.InnerLogger::::info(java.lang.String,java.lang.Throwable)", "77": "InnerLoggerFactory.InnerLogger::::info(java.lang.String,java.lang.Throwable)", "79": "InnerLoggerFactory.InnerLogger::::warn(java.lang.String)", "80": "InnerLoggerFactory.InnerLogger::::warn(java.lang.String)", "81": "InnerLoggerFactory.InnerLogger::::warn(java.lang.String)", "82": "InnerLoggerFactory.InnerLogger::::warn(java.lang.String)", "84": "InnerLoggerFactory.InnerLogger::::warn(java.lang.String,java.lang.Throwable)", "85": "InnerLoggerFactory.InnerLogger::::warn(java.lang.String,java.lang.Throwable)", "86": "InnerLoggerFactory.InnerLogger::::warn(java.lang.String,java.lang.Throwable)", "87": "InnerLoggerFactory.InnerLogger::::warn(java.lang.String,java.lang.Throwable)", "89": "InnerLoggerFactory.InnerLogger::::error(java.lang.String)", "90": "InnerLoggerFactory.InnerLogger::::error(java.lang.String)", "91": "InnerLoggerFactory.InnerLogger::::error(java.lang.String)", "92": "InnerLoggerFactory.InnerLogger::::error(java.lang.String)", "94": "InnerLoggerFactory.InnerLogger::::error(java.lang.String,java.lang.Throwable)", "95": "InnerLoggerFactory.InnerLogger::::error(java.lang.String,java.lang.Throwable)", "96": "InnerLoggerFactory.InnerLogger::::error(java.lang.String,java.lang.Throwable)", "97": "InnerLoggerFactory.InnerLogger::::error(java.lang.String,java.lang.Throwable)", "99": "InnerLoggerFactory.InnerLogger::::debug(java.lang.String,java.lang.Object)", "100": "InnerLoggerFactory.InnerLogger::::debug(java.lang.String,java.lang.Object)", "101": "InnerLoggerFactory.InnerLogger::::debug(java.lang.String,java.lang.Object)", "102": "InnerLoggerFactory.InnerLogger::::debug(java.lang.String,java.lang.Object)", "103": "InnerLoggerFactory.InnerLogger::::debug(java.lang.String,java.lang.Object)", "105": "InnerLoggerFactory.InnerLogger::::debug(java.lang.String,java.lang.Object,java.lang.Object)", "106": "InnerLoggerFactory.InnerLogger::::debug(java.lang.String,java.lang.Object,java.lang.Object)", "107": "InnerLoggerFactory.InnerLogger::::debug(java.lang.String,java.lang.Object,java.lang.Object)", "108": "InnerLoggerFactory.InnerLogger::::debug(java.lang.String,java.lang.Object,java.lang.Object)", "109": "InnerLoggerFactory.InnerLogger::::debug(java.lang.String,java.lang.Object,java.lang.Object)", "111": "InnerLoggerFactory.InnerLogger::::debug(java.lang.String,java.lang.Object[])", "112": "InnerLoggerFactory.InnerLogger::::debug(java.lang.String,java.lang.Object[])", "113": "InnerLoggerFactory.InnerLogger::::debug(java.lang.String,java.lang.Object[])", "114": "InnerLoggerFactory.InnerLogger::::debug(java.lang.String,java.lang.Object[])", "115": "InnerLoggerFactory.InnerLogger::::debug(java.lang.String,java.lang.Object[])", "117": "InnerLoggerFactory.InnerLogger::::info(java.lang.String,java.lang.Object)", "118": "InnerLoggerFactory.InnerLogger::::info(java.lang.String,java.lang.Object)", "119": "InnerLoggerFactory.InnerLogger::::info(java.lang.String,java.lang.Object)", "120": "InnerLoggerFactory.InnerLogger::::info(java.lang.String,java.lang.Object)", "121": "InnerLoggerFactory.InnerLogger::::info(java.lang.String,java.lang.Object)", "123": "InnerLoggerFactory.InnerLogger::::info(java.lang.String,java.lang.Object,java.lang.Object)", "124": "InnerLoggerFactory.InnerLogger::::info(java.lang.String,java.lang.Object,java.lang.Object)", "125": "InnerLoggerFactory.InnerLogger::::info(java.lang.String,java.lang.Object,java.lang.Object)", "126": "InnerLoggerFactory.InnerLogger::::info(java.lang.String,java.lang.Object,java.lang.Object)", "127": "InnerLoggerFactory.InnerLogger::::info(java.lang.String,java.lang.Object,java.lang.Object)", "129": "InnerLoggerFactory.InnerLogger::::info(java.lang.String,java.lang.Object[])", "130": "InnerLoggerFactory.InnerLogger::::info(java.lang.String,java.lang.Object[])", "131": "InnerLoggerFactory.InnerLogger::::info(java.lang.String,java.lang.Object[])", "132": "InnerLoggerFactory.InnerLogger::::info(java.lang.String,java.lang.Object[])", "133": "InnerLoggerFactory.InnerLogger::::info(java.lang.String,java.lang.Object[])", "135": "InnerLoggerFactory.InnerLogger::::warn(java.lang.String,java.lang.Object)", "136": "InnerLoggerFactory.InnerLogger::::warn(java.lang.String,java.lang.Object)", "137": "InnerLoggerFactory.InnerLogger::::warn(java.lang.String,java.lang.Object)", "138": "InnerLoggerFactory.InnerLogger::::warn(java.lang.String,java.lang.Object)", "139": "InnerLoggerFactory.InnerLogger::::warn(java.lang.String,java.lang.Object)", "141": "InnerLoggerFactory.InnerLogger::::warn(java.lang.String,java.lang.Object[])", "142": "InnerLoggerFactory.InnerLogger::::warn(java.lang.String,java.lang.Object[])", "143": "InnerLoggerFactory.InnerLogger::::warn(java.lang.String,java.lang.Object[])", "144": "InnerLoggerFactory.InnerLogger::::warn(java.lang.String,java.lang.Object[])", "145": "InnerLoggerFactory.InnerLogger::::warn(java.lang.String,java.lang.Object[])", "147": "InnerLoggerFactory.InnerLogger::::warn(java.lang.String,java.lang.Object,java.lang.Object)", "148": "InnerLoggerFactory.InnerLogger::::warn(java.lang.String,java.lang.Object,java.lang.Object)", "149": "InnerLoggerFactory.InnerLogger::::warn(java.lang.String,java.lang.Object,java.lang.Object)", "150": "InnerLoggerFactory.InnerLogger::::warn(java.lang.String,java.lang.Object,java.lang.Object)", "151": "InnerLoggerFactory.InnerLogger::::warn(java.lang.String,java.lang.Object,java.lang.Object)", "153": "InnerLoggerFactory.InnerLogger::::error(java.lang.String,java.lang.Object)", "154": "InnerLoggerFactory.InnerLogger::::error(java.lang.String,java.lang.Object)", "155": "InnerLoggerFactory.InnerLogger::::error(java.lang.String,java.lang.Object)", "156": "InnerLoggerFactory.InnerLogger::::error(java.lang.String,java.lang.Object)", "157": "InnerLoggerFactory.InnerLogger::::error(java.lang.String,java.lang.Object)", "159": "InnerLoggerFactory.InnerLogger::::error(java.lang.String,java.lang.Object,java.lang.Object)", "160": "InnerLoggerFactory.InnerLogger::::error(java.lang.String,java.lang.Object,java.lang.Object)", "161": "InnerLoggerFactory.InnerLogger::::error(java.lang.String,java.lang.Object,java.lang.Object)", "162": "InnerLoggerFactory.InnerLogger::::error(java.lang.String,java.lang.Object,java.lang.Object)", "163": "InnerLoggerFactory.InnerLogger::::error(java.lang.String,java.lang.Object,java.lang.Object)", "165": "InnerLoggerFactory.InnerLogger::::error(java.lang.String,java.lang.Object[])", "166": "InnerLoggerFactory.InnerLogger::::error(java.lang.String,java.lang.Object[])", "167": "InnerLoggerFactory.InnerLogger::::error(java.lang.String,java.lang.Object[])", "168": "InnerLoggerFactory.InnerLogger::::error(java.lang.String,java.lang.Object[])", "169": "InnerLoggerFactory.InnerLogger::::error(java.lang.String,java.lang.Object[])", "171": "InnerLoggerFactory.InnerLogger::::getLogger()", "172": "InnerLoggerFactory.InnerLogger::::getLogger()", "173": "InnerLoggerFactory.InnerLogger::::getLogger()", "197": "InnerLoggerFactory.FormattingTuple::::trimmedCopy(java.lang.Object[])", "198": "InnerLoggerFactory.FormattingTuple::::trimmedCopy(java.lang.Object[])", "199": "InnerLoggerFactory.FormattingTuple::::trimmedCopy(java.lang.Object[])", "200": "InnerLoggerFactory.FormattingTuple::::trimmedCopy(java.lang.Object[])", "201": "InnerLoggerFactory.FormattingTuple::::trimmedCopy(java.lang.Object[])", "202": "InnerLoggerFactory.FormattingTuple::::trimmedCopy(java.lang.Object[])", "203": "InnerLoggerFactory.FormattingTuple::::trimmedCopy(java.lang.Object[])", "204": "InnerLoggerFactory.FormattingTuple::::trimmedCopy(java.lang.Object[])", "205": "InnerLoggerFactory.FormattingTuple::::trimmedCopy(java.lang.Object[])", "206": "InnerLoggerFactory.FormattingTuple::::trimmedCopy(java.lang.Object[])", "208": "InnerLoggerFactory.FormattingTuple::::getMessage()", "209": "InnerLoggerFactory.FormattingTuple::::getMessage()", "210": "InnerLoggerFactory.FormattingTuple::::getMessage()", "212": "InnerLoggerFactory.FormattingTuple::::getArgArray()", "213": "InnerLoggerFactory.FormattingTuple::::getArgArray()", "214": "InnerLoggerFactory.FormattingTuple::::getArgArray()", "216": "InnerLoggerFactory.FormattingTuple::::getThrowable()", "217": "InnerLoggerFactory.FormattingTuple::::getThrowable()", "218": "InnerLoggerFactory.FormattingTuple::::getThrowable()", "226": "InnerLoggerFactory.MessageFormatter::::format(java.lang.String,java.lang.Object)", "227": "InnerLoggerFactory.MessageFormatter::::format(java.lang.String,java.lang.Object)", "228": "InnerLoggerFactory.MessageFormatter::::format(java.lang.String,java.lang.Object)", "230": "InnerLoggerFactory.MessageFormatter::::format(java.lang.String,java.lang.Object,java.lang.Object)", "231": "InnerLoggerFactory.MessageFormatter::::format(java.lang.String,java.lang.Object,java.lang.Object)", "232": "InnerLoggerFactory.MessageFormatter::::format(java.lang.String,java.lang.Object,java.lang.Object)", "234": "InnerLoggerFactory.MessageFormatter::::getThrowableCandidate(java.lang.Object[])", "235": "InnerLoggerFactory.MessageFormatter::::getThrowableCandidate(java.lang.Object[])", "236": "InnerLoggerFactory.MessageFormatter::::getThrowableCandidate(java.lang.Object[])", "237": "InnerLoggerFactory.MessageFormatter::::getThrowableCandidate(java.lang.Object[])", "238": "InnerLoggerFactory.MessageFormatter::::getThrowableCandidate(java.lang.Object[])", "239": "InnerLoggerFactory.MessageFormatter::::getThrowableCandidate(java.lang.Object[])", "240": "InnerLoggerFactory.MessageFormatter::::getThrowableCandidate(java.lang.Object[])", "241": "InnerLoggerFactory.MessageFormatter::::getThrowableCandidate(java.lang.Object[])", "243": "InnerLoggerFactory.MessageFormatter::::arrayFormat(java.lang.String,java.lang.Object[])", "244": "InnerLoggerFactory.MessageFormatter::::arrayFormat(java.lang.String,java.lang.Object[])", "245": "InnerLoggerFactory.MessageFormatter::::arrayFormat(java.lang.String,java.lang.Object[])", "246": "InnerLoggerFactory.MessageFormatter::::arrayFormat(java.lang.String,java.lang.Object[])", "247": "InnerLoggerFactory.MessageFormatter::::arrayFormat(java.lang.String,java.lang.Object[])", "248": "InnerLoggerFactory.MessageFormatter::::arrayFormat(java.lang.String,java.lang.Object[])", "249": "InnerLoggerFactory.MessageFormatter::::arrayFormat(java.lang.String,java.lang.Object[])", "250": "InnerLoggerFactory.MessageFormatter::::arrayFormat(java.lang.String,java.lang.Object[])", "251": "InnerLoggerFactory.MessageFormatter::::arrayFormat(java.lang.String,java.lang.Object[])", "252": "InnerLoggerFactory.MessageFormatter::::arrayFormat(java.lang.String,java.lang.Object[])", "253": "InnerLoggerFactory.MessageFormatter::::arrayFormat(java.lang.String,java.lang.Object[])", "254": "InnerLoggerFactory.MessageFormatter::::arrayFormat(java.lang.String,java.lang.Object[])", "255": "InnerLoggerFactory.MessageFormatter::::arrayFormat(java.lang.String,java.lang.Object[])", "256": "InnerLoggerFactory.MessageFormatter::::arrayFormat(java.lang.String,java.lang.Object[])", "257": "InnerLoggerFactory.MessageFormatter::::arrayFormat(java.lang.String,java.lang.Object[])", "258": "InnerLoggerFactory.MessageFormatter::::arrayFormat(java.lang.String,java.lang.Object[])", "259": "InnerLoggerFactory.MessageFormatter::::arrayFormat(java.lang.String,java.lang.Object[])", "260": "InnerLoggerFactory.MessageFormatter::::arrayFormat(java.lang.String,java.lang.Object[])", "261": "InnerLoggerFactory.MessageFormatter::::arrayFormat(java.lang.String,java.lang.Object[])", "262": "InnerLoggerFactory.MessageFormatter::::arrayFormat(java.lang.String,java.lang.Object[])", "263": "InnerLoggerFactory.MessageFormatter::::arrayFormat(java.lang.String,java.lang.Object[])", "264": "InnerLoggerFactory.MessageFormatter::::arrayFormat(java.lang.String,java.lang.Object[])", "265": "InnerLoggerFactory.MessageFormatter::::arrayFormat(java.lang.String,java.lang.Object[])", "266": "InnerLoggerFactory.MessageFormatter::::arrayFormat(java.lang.String,java.lang.Object[])", "267": "InnerLoggerFactory.MessageFormatter::::arrayFormat(java.lang.String,java.lang.Object[])", "268": "InnerLoggerFactory.MessageFormatter::::arrayFormat(java.lang.String,java.lang.Object[])", "269": "InnerLoggerFactory.MessageFormatter::::arrayFormat(java.lang.String,java.lang.Object[])", "270": "InnerLoggerFactory.MessageFormatter::::arrayFormat(java.lang.String,java.lang.Object[])", "271": "InnerLoggerFactory.MessageFormatter::::arrayFormat(java.lang.String,java.lang.Object[])", "272": "InnerLoggerFactory.MessageFormatter::::arrayFormat(java.lang.String,java.lang.Object[])", "273": "InnerLoggerFactory.MessageFormatter::::arrayFormat(java.lang.String,java.lang.Object[])", "274": "InnerLoggerFactory.MessageFormatter::::arrayFormat(java.lang.String,java.lang.Object[])", "275": "InnerLoggerFactory.MessageFormatter::::arrayFormat(java.lang.String,java.lang.Object[])", "276": "InnerLoggerFactory.MessageFormatter::::arrayFormat(java.lang.String,java.lang.Object[])", "277": "InnerLoggerFactory.MessageFormatter::::arrayFormat(java.lang.String,java.lang.Object[])", "278": "InnerLoggerFactory.MessageFormatter::::arrayFormat(java.lang.String,java.lang.Object[])", "279": "InnerLoggerFactory.MessageFormatter::::arrayFormat(java.lang.String,java.lang.Object[])", "280": "InnerLoggerFactory.MessageFormatter::::arrayFormat(java.lang.String,java.lang.Object[])", "281": "InnerLoggerFactory.MessageFormatter::::arrayFormat(java.lang.String,java.lang.Object[])", "282": "InnerLoggerFactory.MessageFormatter::::arrayFormat(java.lang.String,java.lang.Object[])", "283": "InnerLoggerFactory.MessageFormatter::::arrayFormat(java.lang.String,java.lang.Object[])", "284": "InnerLoggerFactory.MessageFormatter::::arrayFormat(java.lang.String,java.lang.Object[])", "285": "InnerLoggerFactory.MessageFormatter::::arrayFormat(java.lang.String,java.lang.Object[])", "286": "InnerLoggerFactory.MessageFormatter::::arrayFormat(java.lang.String,java.lang.Object[])", "287": "InnerLoggerFactory.MessageFormatter::::arrayFormat(java.lang.String,java.lang.Object[])", "288": "InnerLoggerFactory.MessageFormatter::::arrayFormat(java.lang.String,java.lang.Object[])", "289": "InnerLoggerFactory.MessageFormatter::::arrayFormat(java.lang.String,java.lang.Object[])", "290": "InnerLoggerFactory.MessageFormatter::::arrayFormat(java.lang.String,java.lang.Object[])", "292": "InnerLoggerFactory.MessageFormatter::::isEscapeDelimeter(java.lang.String,int)", "293": "InnerLoggerFactory.MessageFormatter::::isEscapeDelimeter(java.lang.String,int)", "294": "InnerLoggerFactory.MessageFormatter::::isEscapeDelimeter(java.lang.String,int)", "295": "InnerLoggerFactory.MessageFormatter::::isEscapeDelimeter(java.lang.String,int)", "296": "InnerLoggerFactory.MessageFormatter::::isEscapeDelimeter(java.lang.String,int)", "297": "InnerLoggerFactory.MessageFormatter::::isEscapeDelimeter(java.lang.String,int)", "298": "InnerLoggerFactory.MessageFormatter::::isEscapeDelimeter(java.lang.String,int)", "299": "InnerLoggerFactory.MessageFormatter::::isEscapeDelimeter(java.lang.String,int)", "301": "InnerLoggerFactory.MessageFormatter::::isDoubleEscaped(java.lang.String,int)", "302": "InnerLoggerFactory.MessageFormatter::::isDoubleEscaped(java.lang.String,int)", "303": "InnerLoggerFactory.MessageFormatter::::isDoubleEscaped(java.lang.String,int)", "305": "InnerLoggerFactory.MessageFormatter::::deeplyAppendParameter(java.lang.StringBuilder,java.lang.Object,java.util.Map<java.lang.Object[], java.lang.Object>)", "306": "InnerLoggerFactory.MessageFormatter::::deeplyAppendParameter(java.lang.StringBuilder,java.lang.Object,java.util.Map<java.lang.Object[], java.lang.Object>)", "307": "InnerLoggerFactory.MessageFormatter::::deeplyAppendParameter(java.lang.StringBuilder,java.lang.Object,java.util.Map<java.lang.Object[], java.lang.Object>)", "308": "InnerLoggerFactory.MessageFormatter::::deeplyAppendParameter(java.lang.StringBuilder,java.lang.Object,java.util.Map<java.lang.Object[], java.lang.Object>)", "309": "InnerLoggerFactory.MessageFormatter::::deeplyAppendParameter(java.lang.StringBuilder,java.lang.Object,java.util.Map<java.lang.Object[], java.lang.Object>)", "310": "InnerLoggerFactory.MessageFormatter::::deeplyAppendParameter(java.lang.StringBuilder,java.lang.Object,java.util.Map<java.lang.Object[], java.lang.Object>)", "311": "InnerLoggerFactory.MessageFormatter::::deeplyAppendParameter(java.lang.StringBuilder,java.lang.Object,java.util.Map<java.lang.Object[], java.lang.Object>)", "312": "InnerLoggerFactory.MessageFormatter::::deeplyAppendParameter(java.lang.StringBuilder,java.lang.Object,java.util.Map<java.lang.Object[], java.lang.Object>)", "313": "InnerLoggerFactory.MessageFormatter::::deeplyAppendParameter(java.lang.StringBuilder,java.lang.Object,java.util.Map<java.lang.Object[], java.lang.Object>)", "314": "InnerLoggerFactory.MessageFormatter::::deeplyAppendParameter(java.lang.StringBuilder,java.lang.Object,java.util.Map<java.lang.Object[], java.lang.Object>)", "315": "InnerLoggerFactory.MessageFormatter::::deeplyAppendParameter(java.lang.StringBuilder,java.lang.Object,java.util.Map<java.lang.Object[], java.lang.Object>)", "316": "InnerLoggerFactory.MessageFormatter::::deeplyAppendParameter(java.lang.StringBuilder,java.lang.Object,java.util.Map<java.lang.Object[], java.lang.Object>)", "317": "InnerLoggerFactory.MessageFormatter::::deeplyAppendParameter(java.lang.StringBuilder,java.lang.Object,java.util.Map<java.lang.Object[], java.lang.Object>)", "318": "InnerLoggerFactory.MessageFormatter::::deeplyAppendParameter(java.lang.StringBuilder,java.lang.Object,java.util.Map<java.lang.Object[], java.lang.Object>)", "319": "InnerLoggerFactory.MessageFormatter::::deeplyAppendParameter(java.lang.StringBuilder,java.lang.Object,java.util.Map<java.lang.Object[], java.lang.Object>)", "320": "InnerLoggerFactory.MessageFormatter::::deeplyAppendParameter(java.lang.StringBuilder,java.lang.Object,java.util.Map<java.lang.Object[], java.lang.Object>)", "321": "InnerLoggerFactory.MessageFormatter::::deeplyAppendParameter(java.lang.StringBuilder,java.lang.Object,java.util.Map<java.lang.Object[], java.lang.Object>)", "322": "InnerLoggerFactory.MessageFormatter::::deeplyAppendParameter(java.lang.StringBuilder,java.lang.Object,java.util.Map<java.lang.Object[], java.lang.Object>)", "323": "InnerLoggerFactory.MessageFormatter::::deeplyAppendParameter(java.lang.StringBuilder,java.lang.Object,java.util.Map<java.lang.Object[], java.lang.Object>)", "324": "InnerLoggerFactory.MessageFormatter::::deeplyAppendParameter(java.lang.StringBuilder,java.lang.Object,java.util.Map<java.lang.Object[], java.lang.Object>)", "325": "InnerLoggerFactory.MessageFormatter::::deeplyAppendParameter(java.lang.StringBuilder,java.lang.Object,java.util.Map<java.lang.Object[], java.lang.Object>)", "326": "InnerLoggerFactory.MessageFormatter::::deeplyAppendParameter(java.lang.StringBuilder,java.lang.Object,java.util.Map<java.lang.Object[], java.lang.Object>)", "327": "InnerLoggerFactory.MessageFormatter::::deeplyAppendParameter(java.lang.StringBuilder,java.lang.Object,java.util.Map<java.lang.Object[], java.lang.Object>)", "328": "InnerLoggerFactory.MessageFormatter::::deeplyAppendParameter(java.lang.StringBuilder,java.lang.Object,java.util.Map<java.lang.Object[], java.lang.Object>)", "329": "InnerLoggerFactory.MessageFormatter::::deeplyAppendParameter(java.lang.StringBuilder,java.lang.Object,java.util.Map<java.lang.Object[], java.lang.Object>)", "330": "InnerLoggerFactory.MessageFormatter::::deeplyAppendParameter(java.lang.StringBuilder,java.lang.Object,java.util.Map<java.lang.Object[], java.lang.Object>)", "331": "InnerLoggerFactory.MessageFormatter::::deeplyAppendParameter(java.lang.StringBuilder,java.lang.Object,java.util.Map<java.lang.Object[], java.lang.Object>)", "332": "InnerLoggerFactory.MessageFormatter::::deeplyAppendParameter(java.lang.StringBuilder,java.lang.Object,java.util.Map<java.lang.Object[], java.lang.Object>)", "334": "InnerLoggerFactory.MessageFormatter::::safeObjectAppend(java.lang.StringBuilder,java.lang.Object)", "335": "InnerLoggerFactory.MessageFormatter::::safeObjectAppend(java.lang.StringBuilder,java.lang.Object)", "336": "InnerLoggerFactory.MessageFormatter::::safeObjectAppend(java.lang.StringBuilder,java.lang.Object)", "337": "InnerLoggerFactory.MessageFormatter::::safeObjectAppend(java.lang.StringBuilder,java.lang.Object)", "338": "InnerLoggerFactory.MessageFormatter::::safeObjectAppend(java.lang.StringBuilder,java.lang.Object)", "339": "InnerLoggerFactory.MessageFormatter::::safeObjectAppend(java.lang.StringBuilder,java.lang.Object)", "340": "InnerLoggerFactory.MessageFormatter::::safeObjectAppend(java.lang.StringBuilder,java.lang.Object)", "341": "InnerLoggerFactory.MessageFormatter::::safeObjectAppend(java.lang.StringBuilder,java.lang.Object)", "342": "InnerLoggerFactory.MessageFormatter::::safeObjectAppend(java.lang.StringBuilder,java.lang.Object)", "343": "InnerLoggerFactory.MessageFormatter::::safeObjectAppend(java.lang.StringBuilder,java.lang.Object)", "344": "InnerLoggerFactory.MessageFormatter::::safeObjectAppend(java.lang.StringBuilder,java.lang.Object)", "346": "InnerLoggerFactory.MessageFormatter::::objectArrayAppend(java.lang.StringBuilder,java.lang.Object[],java.util.Map<java.lang.Object[], java.lang.Object>)", "347": "InnerLoggerFactory.MessageFormatter::::objectArrayAppend(java.lang.StringBuilder,java.lang.Object[],java.util.Map<java.lang.Object[], java.lang.Object>)", "348": "InnerLoggerFactory.MessageFormatter::::objectArrayAppend(java.lang.StringBuilder,java.lang.Object[],java.util.Map<java.lang.Object[], java.lang.Object>)", "349": "InnerLoggerFactory.MessageFormatter::::objectArrayAppend(java.lang.StringBuilder,java.lang.Object[],java.util.Map<java.lang.Object[], java.lang.Object>)", "350": "InnerLoggerFactory.MessageFormatter::::objectArrayAppend(java.lang.StringBuilder,java.lang.Object[],java.util.Map<java.lang.Object[], java.lang.Object>)", "351": "InnerLoggerFactory.MessageFormatter::::objectArrayAppend(java.lang.StringBuilder,java.lang.Object[],java.util.Map<java.lang.Object[], java.lang.Object>)", "352": "InnerLoggerFactory.MessageFormatter::::objectArrayAppend(java.lang.StringBuilder,java.lang.Object[],java.util.Map<java.lang.Object[], java.lang.Object>)", "353": "InnerLoggerFactory.MessageFormatter::::objectArrayAppend(java.lang.StringBuilder,java.lang.Object[],java.util.Map<java.lang.Object[], java.lang.Object>)", "354": "InnerLoggerFactory.MessageFormatter::::objectArrayAppend(java.lang.StringBuilder,java.lang.Object[],java.util.Map<java.lang.Object[], java.lang.Object>)", "355": "InnerLoggerFactory.MessageFormatter::::objectArrayAppend(java.lang.StringBuilder,java.lang.Object[],java.util.Map<java.lang.Object[], java.lang.Object>)", "356": "InnerLoggerFactory.MessageFormatter::::objectArrayAppend(java.lang.StringBuilder,java.lang.Object[],java.util.Map<java.lang.Object[], java.lang.Object>)", "357": "InnerLoggerFactory.MessageFormatter::::objectArrayAppend(java.lang.StringBuilder,java.lang.Object[],java.util.Map<java.lang.Object[], java.lang.Object>)", "358": "InnerLoggerFactory.MessageFormatter::::objectArrayAppend(java.lang.StringBuilder,java.lang.Object[],java.util.Map<java.lang.Object[], java.lang.Object>)", "359": "InnerLoggerFactory.MessageFormatter::::objectArrayAppend(java.lang.StringBuilder,java.lang.Object[],java.util.Map<java.lang.Object[], java.lang.Object>)", "360": "InnerLoggerFactory.MessageFormatter::::objectArrayAppend(java.lang.StringBuilder,java.lang.Object[],java.util.Map<java.lang.Object[], java.lang.Object>)", "361": "InnerLoggerFactory.MessageFormatter::::objectArrayAppend(java.lang.StringBuilder,java.lang.Object[],java.util.Map<java.lang.Object[], java.lang.Object>)", "362": "InnerLoggerFactory.MessageFormatter::::objectArrayAppend(java.lang.StringBuilder,java.lang.Object[],java.util.Map<java.lang.Object[], java.lang.Object>)", "363": "InnerLoggerFactory.MessageFormatter::::objectArrayAppend(java.lang.StringBuilder,java.lang.Object[],java.util.Map<java.lang.Object[], java.lang.Object>)", "364": "InnerLoggerFactory.MessageFormatter::::objectArrayAppend(java.lang.StringBuilder,java.lang.Object[],java.util.Map<java.lang.Object[], java.lang.Object>)", "365": "InnerLoggerFactory.MessageFormatter::::objectArrayAppend(java.lang.StringBuilder,java.lang.Object[],java.util.Map<java.lang.Object[], java.lang.Object>)", "366": "InnerLoggerFactory.MessageFormatter::::objectArrayAppend(java.lang.StringBuilder,java.lang.Object[],java.util.Map<java.lang.Object[], java.lang.Object>)", "367": "InnerLoggerFactory.MessageFormatter::::objectArrayAppend(java.lang.StringBuilder,java.lang.Object[],java.util.Map<java.lang.Object[], java.lang.Object>)", "368": "InnerLoggerFactory.MessageFormatter::::objectArrayAppend(java.lang.StringBuilder,java.lang.Object[],java.util.Map<java.lang.Object[], java.lang.Object>)", "370": "InnerLoggerFactory.MessageFormatter::::booleanArrayAppend(java.lang.StringBuilder,boolean[])", "371": "InnerLoggerFactory.MessageFormatter::::booleanArrayAppend(java.lang.StringBuilder,boolean[])", "372": "InnerLoggerFactory.MessageFormatter::::booleanArrayAppend(java.lang.StringBuilder,boolean[])", "373": "InnerLoggerFactory.MessageFormatter::::booleanArrayAppend(java.lang.StringBuilder,boolean[])", "374": "InnerLoggerFactory.MessageFormatter::::booleanArrayAppend(java.lang.StringBuilder,boolean[])", "375": "InnerLoggerFactory.MessageFormatter::::booleanArrayAppend(java.lang.StringBuilder,boolean[])", "376": "InnerLoggerFactory.MessageFormatter::::booleanArrayAppend(java.lang.StringBuilder,boolean[])", "377": "InnerLoggerFactory.MessageFormatter::::booleanArrayAppend(java.lang.StringBuilder,boolean[])", "378": "InnerLoggerFactory.MessageFormatter::::booleanArrayAppend(java.lang.StringBuilder,boolean[])", "379": "InnerLoggerFactory.MessageFormatter::::booleanArrayAppend(java.lang.StringBuilder,boolean[])", "380": "InnerLoggerFactory.MessageFormatter::::booleanArrayAppend(java.lang.StringBuilder,boolean[])", "381": "InnerLoggerFactory.MessageFormatter::::booleanArrayAppend(java.lang.StringBuilder,boolean[])", "382": "InnerLoggerFactory.MessageFormatter::::booleanArrayAppend(java.lang.StringBuilder,boolean[])", "384": "InnerLoggerFactory.MessageFormatter::::byteArrayAppend(java.lang.StringBuilder,byte[])", "385": "InnerLoggerFactory.MessageFormatter::::byteArrayAppend(java.lang.StringBuilder,byte[])", "386": "InnerLoggerFactory.MessageFormatter::::byteArrayAppend(java.lang.StringBuilder,byte[])", "387": "InnerLoggerFactory.MessageFormatter::::byteArrayAppend(java.lang.StringBuilder,byte[])", "388": "InnerLoggerFactory.MessageFormatter::::byteArrayAppend(java.lang.StringBuilder,byte[])", "389": "InnerLoggerFactory.MessageFormatter::::byteArrayAppend(java.lang.StringBuilder,byte[])", "390": "InnerLoggerFactory.MessageFormatter::::byteArrayAppend(java.lang.StringBuilder,byte[])", "391": "InnerLoggerFactory.MessageFormatter::::byteArrayAppend(java.lang.StringBuilder,byte[])", "392": "InnerLoggerFactory.MessageFormatter::::byteArrayAppend(java.lang.StringBuilder,byte[])", "393": "InnerLoggerFactory.MessageFormatter::::byteArrayAppend(java.lang.StringBuilder,byte[])", "394": "InnerLoggerFactory.MessageFormatter::::byteArrayAppend(java.lang.StringBuilder,byte[])", "395": "InnerLoggerFactory.MessageFormatter::::byteArrayAppend(java.lang.StringBuilder,byte[])", "396": "InnerLoggerFactory.MessageFormatter::::byteArrayAppend(java.lang.StringBuilder,byte[])", "398": "InnerLoggerFactory.MessageFormatter::::charArrayAppend(java.lang.StringBuilder,char[])", "399": "InnerLoggerFactory.MessageFormatter::::charArrayAppend(java.lang.StringBuilder,char[])", "400": "InnerLoggerFactory.MessageFormatter::::charArrayAppend(java.lang.StringBuilder,char[])", "401": "InnerLoggerFactory.MessageFormatter::::charArrayAppend(java.lang.StringBuilder,char[])", "402": "InnerLoggerFactory.MessageFormatter::::charArrayAppend(java.lang.StringBuilder,char[])", "403": "InnerLoggerFactory.MessageFormatter::::charArrayAppend(java.lang.StringBuilder,char[])", "404": "InnerLoggerFactory.MessageFormatter::::charArrayAppend(java.lang.StringBuilder,char[])", "405": "InnerLoggerFactory.MessageFormatter::::charArrayAppend(java.lang.StringBuilder,char[])", "406": "InnerLoggerFactory.MessageFormatter::::charArrayAppend(java.lang.StringBuilder,char[])", "407": "InnerLoggerFactory.MessageFormatter::::charArrayAppend(java.lang.StringBuilder,char[])", "408": "InnerLoggerFactory.MessageFormatter::::charArrayAppend(java.lang.StringBuilder,char[])", "409": "InnerLoggerFactory.MessageFormatter::::charArrayAppend(java.lang.StringBuilder,char[])", "410": "InnerLoggerFactory.MessageFormatter::::charArrayAppend(java.lang.StringBuilder,char[])", "412": "InnerLoggerFactory.MessageFormatter::::shortArrayAppend(java.lang.StringBuilder,short[])", "413": "InnerLoggerFactory.MessageFormatter::::shortArrayAppend(java.lang.StringBuilder,short[])", "414": "InnerLoggerFactory.MessageFormatter::::shortArrayAppend(java.lang.StringBuilder,short[])", "415": "InnerLoggerFactory.MessageFormatter::::shortArrayAppend(java.lang.StringBuilder,short[])", "416": "InnerLoggerFactory.MessageFormatter::::shortArrayAppend(java.lang.StringBuilder,short[])", "417": "InnerLoggerFactory.MessageFormatter::::shortArrayAppend(java.lang.StringBuilder,short[])", "418": "InnerLoggerFactory.MessageFormatter::::shortArrayAppend(java.lang.StringBuilder,short[])", "419": "InnerLoggerFactory.MessageFormatter::::shortArrayAppend(java.lang.StringBuilder,short[])", "420": "InnerLoggerFactory.MessageFormatter::::shortArrayAppend(java.lang.StringBuilder,short[])", "421": "InnerLoggerFactory.MessageFormatter::::shortArrayAppend(java.lang.StringBuilder,short[])", "422": "InnerLoggerFactory.MessageFormatter::::shortArrayAppend(java.lang.StringBuilder,short[])", "423": "InnerLoggerFactory.MessageFormatter::::shortArrayAppend(java.lang.StringBuilder,short[])", "424": "InnerLoggerFactory.MessageFormatter::::shortArrayAppend(java.lang.StringBuilder,short[])", "426": "InnerLoggerFactory.MessageFormatter::::intArrayAppend(java.lang.StringBuilder,int[])", "427": "InnerLoggerFactory.MessageFormatter::::intArrayAppend(java.lang.StringBuilder,int[])", "428": "InnerLoggerFactory.MessageFormatter::::intArrayAppend(java.lang.StringBuilder,int[])", "429": "InnerLoggerFactory.MessageFormatter::::intArrayAppend(java.lang.StringBuilder,int[])", "430": "InnerLoggerFactory.MessageFormatter::::intArrayAppend(java.lang.StringBuilder,int[])", "431": "InnerLoggerFactory.MessageFormatter::::intArrayAppend(java.lang.StringBuilder,int[])", "432": "InnerLoggerFactory.MessageFormatter::::intArrayAppend(java.lang.StringBuilder,int[])", "433": "InnerLoggerFactory.MessageFormatter::::intArrayAppend(java.lang.StringBuilder,int[])", "434": "InnerLoggerFactory.MessageFormatter::::intArrayAppend(java.lang.StringBuilder,int[])", "435": "InnerLoggerFactory.MessageFormatter::::intArrayAppend(java.lang.StringBuilder,int[])", "436": "InnerLoggerFactory.MessageFormatter::::intArrayAppend(java.lang.StringBuilder,int[])", "437": "InnerLoggerFactory.MessageFormatter::::intArrayAppend(java.lang.StringBuilder,int[])", "438": "InnerLoggerFactory.MessageFormatter::::intArrayAppend(java.lang.StringBuilder,int[])", "440": "InnerLoggerFactory.MessageFormatter::::longArrayAppend(java.lang.StringBuilder,long[])", "441": "InnerLoggerFactory.MessageFormatter::::longArrayAppend(java.lang.StringBuilder,long[])", "442": "InnerLoggerFactory.MessageFormatter::::longArrayAppend(java.lang.StringBuilder,long[])", "443": "InnerLoggerFactory.MessageFormatter::::longArrayAppend(java.lang.StringBuilder,long[])", "444": "InnerLoggerFactory.MessageFormatter::::longArrayAppend(java.lang.StringBuilder,long[])", "445": "InnerLoggerFactory.MessageFormatter::::longArrayAppend(java.lang.StringBuilder,long[])", "446": "InnerLoggerFactory.MessageFormatter::::longArrayAppend(java.lang.StringBuilder,long[])", "447": "InnerLoggerFactory.MessageFormatter::::longArrayAppend(java.lang.StringBuilder,long[])", "448": "InnerLoggerFactory.MessageFormatter::::longArrayAppend(java.lang.StringBuilder,long[])", "449": "InnerLoggerFactory.MessageFormatter::::longArrayAppend(java.lang.StringBuilder,long[])", "450": "InnerLoggerFactory.MessageFormatter::::longArrayAppend(java.lang.StringBuilder,long[])", "451": "InnerLoggerFactory.MessageFormatter::::longArrayAppend(java.lang.StringBuilder,long[])", "452": "InnerLoggerFactory.MessageFormatter::::longArrayAppend(java.lang.StringBuilder,long[])", "454": "InnerLoggerFactory.MessageFormatter::::floatArrayAppend(java.lang.StringBuilder,float[])", "455": "InnerLoggerFactory.MessageFormatter::::floatArrayAppend(java.lang.StringBuilder,float[])", "456": "InnerLoggerFactory.MessageFormatter::::floatArrayAppend(java.lang.StringBuilder,float[])", "457": "InnerLoggerFactory.MessageFormatter::::floatArrayAppend(java.lang.StringBuilder,float[])", "458": "InnerLoggerFactory.MessageFormatter::::floatArrayAppend(java.lang.StringBuilder,float[])", "459": "InnerLoggerFactory.MessageFormatter::::floatArrayAppend(java.lang.StringBuilder,float[])", "460": "InnerLoggerFactory.MessageFormatter::::floatArrayAppend(java.lang.StringBuilder,float[])", "461": "InnerLoggerFactory.MessageFormatter::::floatArrayAppend(java.lang.StringBuilder,float[])", "462": "InnerLoggerFactory.MessageFormatter::::floatArrayAppend(java.lang.StringBuilder,float[])", "463": "InnerLoggerFactory.MessageFormatter::::floatArrayAppend(java.lang.StringBuilder,float[])", "464": "InnerLoggerFactory.MessageFormatter::::floatArrayAppend(java.lang.StringBuilder,float[])", "465": "InnerLoggerFactory.MessageFormatter::::floatArrayAppend(java.lang.StringBuilder,float[])", "466": "InnerLoggerFactory.MessageFormatter::::floatArrayAppend(java.lang.StringBuilder,float[])", "468": "InnerLoggerFactory.MessageFormatter::::doubleArrayAppend(java.lang.StringBuilder,double[])", "469": "InnerLoggerFactory.MessageFormatter::::doubleArrayAppend(java.lang.StringBuilder,double[])", "470": "InnerLoggerFactory.MessageFormatter::::doubleArrayAppend(java.lang.StringBuilder,double[])", "471": "InnerLoggerFactory.MessageFormatter::::doubleArrayAppend(java.lang.StringBuilder,double[])", "472": "InnerLoggerFactory.MessageFormatter::::doubleArrayAppend(java.lang.StringBuilder,double[])", "473": "InnerLoggerFactory.MessageFormatter::::doubleArrayAppend(java.lang.StringBuilder,double[])", "474": "InnerLoggerFactory.MessageFormatter::::doubleArrayAppend(java.lang.StringBuilder,double[])", "475": "InnerLoggerFactory.MessageFormatter::::doubleArrayAppend(java.lang.StringBuilder,double[])", "476": "InnerLoggerFactory.MessageFormatter::::doubleArrayAppend(java.lang.StringBuilder,double[])", "477": "InnerLoggerFactory.MessageFormatter::::doubleArrayAppend(java.lang.StringBuilder,double[])", "478": "InnerLoggerFactory.MessageFormatter::::doubleArrayAppend(java.lang.StringBuilder,double[])", "479": "InnerLoggerFactory.MessageFormatter::::doubleArrayAppend(java.lang.StringBuilder,double[])", "480": "InnerLoggerFactory.MessageFormatter::::doubleArrayAppend(java.lang.StringBuilder,double[])"}, "test_reverse_method_lines_dic": {"40": "InnerLoggerFactoryTest::::initLogger()", "41": "InnerLoggerFactoryTest::::initLogger()", "42": "InnerLoggerFactoryTest::::initLogger()", "43": "InnerLoggerFactoryTest::::initLogger()", "44": "InnerLoggerFactoryTest::::initLogger()", "45": "InnerLoggerFactoryTest::::initLogger()", "46": "InnerLoggerFactoryTest::::initLogger()", "47": "InnerLoggerFactoryTest::::initLogger()", "48": "InnerLoggerFactoryTest::::initLogger()", "49": "InnerLoggerFactoryTest::::initLogger()", "50": "InnerLoggerFactoryTest::::initLogger()", "51": "InnerLoggerFactoryTest::::initLogger()", "52": "InnerLoggerFactoryTest::::initLogger()", "53": "InnerLoggerFactoryTest::::initLogger()", "54": "InnerLoggerFactoryTest::::initLogger()", "56": "InnerLoggerFactoryTest::::fixConsole()", "57": "InnerLoggerFactoryTest::::fixConsole()", "58": "InnerLoggerFactoryTest::::fixConsole()", "59": "InnerLoggerFactoryTest::::fixConsole()", "61": "InnerLoggerFactoryTest::::testInnerLoggerFactory()", "62": "InnerLoggerFactoryTest::::testInnerLoggerFactory()", "63": "InnerLoggerFactoryTest::::testInnerLoggerFactory()", "64": "InnerLoggerFactoryTest::::testInnerLoggerFactory()", "65": "InnerLoggerFactoryTest::::testInnerLoggerFactory()", "66": "InnerLoggerFactoryTest::::testInnerLoggerFactory()", "67": "InnerLoggerFactoryTest::::testInnerLoggerFactory()", "68": "InnerLoggerFactoryTest::::testInnerLoggerFactory()", "69": "InnerLoggerFactoryTest::::testInnerLoggerFactory()", "70": "InnerLoggerFactoryTest::::testInnerLoggerFactory()", "71": "InnerLoggerFactoryTest::::testInnerLoggerFactory()", "72": "InnerLoggerFactoryTest::::testInnerLoggerFactory()", "73": "InnerLoggerFactoryTest::::testInnerLoggerFactory()", "74": "InnerLoggerFactoryTest::::testInnerLoggerFactory()", "75": "InnerLoggerFactoryTest::::testInnerLoggerFactory()", "76": "InnerLoggerFactoryTest::::testInnerLoggerFactory()", "77": "InnerLoggerFactoryTest::::testInnerLoggerFactory()", "78": "InnerLoggerFactoryTest::::testInnerLoggerFactory()", "79": "InnerLoggerFactoryTest::::testInnerLoggerFactory()", "80": "InnerLoggerFactoryTest::::testInnerLoggerFactory()", "81": "InnerLoggerFactoryTest::::testInnerLoggerFactory()", "82": "InnerLoggerFactoryTest::::testInnerLoggerFactory()", "83": "InnerLoggerFactoryTest::::testInnerLoggerFactory()", "84": "InnerLoggerFactoryTest::::testInnerLoggerFactory()", "85": "InnerLoggerFactoryTest::::testInnerLoggerFactory()", "86": "InnerLoggerFactoryTest::::testInnerLoggerFactory()", "87": "InnerLoggerFactoryTest::::testInnerLoggerFactory()", "88": "InnerLoggerFactoryTest::::testInnerLoggerFactory()", "89": "InnerLoggerFactoryTest::::testInnerLoggerFactory()", "90": "InnerLoggerFactoryTest::::testInnerLoggerFactory()", "91": "InnerLoggerFactoryTest::::testInnerLoggerFactory()"}, "tests": [{"test_lines": [61, 91], "covered_lines": [27, 28, 29, 33, 38, 50, 51, 52, 56, 61, 62, 71, 72, 81, 82, 91, 92, 96, 97, 101, 102, 103, 119, 120, 121, 137, 138, 139, 155, 156, 157, 186, 187, 188, 189, 190, 195, 209, 217, 227, 235, 236, 237, 244, 245, 247, 250, 251, 254, 255, 256, 265, 277, 278, 279, 283, 284, 287, 293, 296, 297, 306, 309, 310, 332, 336, 337, 342, 344]}]}, "/bernard/dataset_construction/prep/repos/RocketMQC/logging/src/main/java/org/apache/rocketmq/logging/Slf4jLoggerFactory.java": {"class_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package org.apache.rocketmq.logging;\n", "\n", "import org.slf4j.Logger;\n", "import org.slf4j.LoggerFactory;\n", "\n", "public class Slf4jLoggerFactory extends InternalLoggerFactory {\n", "\n", "    public Slf4jLoggerFactory() {\n", "        LoggerFactory.getILoggerFactory();\n", "        doRegister();\n", "    }\n", "\n", "    @Override\n", "    protected String getLoggerType() {\n", "        return InternalLoggerFactory.LOGGER_SLF4J;\n", "    }\n", "\n", "    @Override\n", "    protected InternalLogger getLoggerInstance(String name) {\n", "        return new Slf4jLogger(name);\n", "    }\n", "\n", "    @Override\n", "    protected void shutdown() {\n", "\n", "    }\n", "\n", "    public static class Slf4jLogger implements InternalLogger {\n", "\n", "        private Logger logger = null;\n", "\n", "        public Slf4jLogger(String name) {\n", "            logger = LoggerFactory.getLogger(name);\n", "        }\n", "\n", "        @Override\n", "        public String getName() {\n", "            return logger.getName();\n", "        }\n", "\n", "        @Override\n", "        public void debug(String s) {\n", "            logger.debug(s);\n", "        }\n", "\n", "        @Override\n", "        public void debug(String s, Object o) {\n", "            logger.debug(s, o);\n", "        }\n", "\n", "        @Override\n", "        public void debug(String s, Object o, Object o1) {\n", "            logger.debug(s, o, o1);\n", "        }\n", "\n", "        @Override\n", "        public void debug(String s, Object... objects) {\n", "            logger.debug(s, objects);\n", "        }\n", "\n", "        @Override\n", "        public void debug(String s, Throwable throwable) {\n", "            logger.debug(s, throwable);\n", "        }\n", "\n", "        @Override\n", "        public void info(String s) {\n", "            logger.info(s);\n", "        }\n", "\n", "        @Override\n", "        public void info(String s, Object o) {\n", "            logger.info(s, o);\n", "        }\n", "\n", "        @Override\n", "        public void info(String s, Object o, Object o1) {\n", "            logger.info(s, o, o1);\n", "        }\n", "\n", "        @Override\n", "        public void info(String s, Object... objects) {\n", "            logger.info(s, objects);\n", "        }\n", "\n", "        @Override\n", "        public void info(String s, Throwable throwable) {\n", "            logger.info(s, throwable);\n", "        }\n", "\n", "        @Override\n", "        public void warn(String s) {\n", "            logger.warn(s);\n", "        }\n", "\n", "        @Override\n", "        public void warn(String s, Object o) {\n", "            logger.warn(s, o);\n", "        }\n", "\n", "        @Override\n", "        public void warn(String s, Object... objects) {\n", "            logger.warn(s, objects);\n", "        }\n", "\n", "        @Override\n", "        public void warn(String s, Object o, Object o1) {\n", "            logger.warn(s, o, o1);\n", "        }\n", "\n", "        @Override\n", "        public void warn(String s, Throwable throwable) {\n", "            logger.warn(s, throwable);\n", "        }\n", "\n", "        @Override\n", "        public void error(String s) {\n", "            logger.error(s);\n", "        }\n", "\n", "        @Override\n", "        public void error(String s, Object o) {\n", "            logger.error(s, o);\n", "        }\n", "\n", "        @Override\n", "        public void error(String s, Object o, Object o1) {\n", "            logger.error(s, o, o1);\n", "        }\n", "\n", "        @Override\n", "        public void error(String s, Object... objects) {\n", "            logger.error(s, objects);\n", "        }\n", "\n", "        @Override\n", "        public void error(String s, Throwable throwable) {\n", "            logger.error(s, throwable);\n", "        }\n", "    }\n", "}\n"], "test_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package org.apache.rocketmq.logging;\n", "\n", "import ch.qos.logback.classic.joran.JoranConfigurator;\n", "import ch.qos.logback.core.Context;\n", "import ch.qos.logback.core.joran.spi.JoranException;\n", "import org.junit.Assert;\n", "import org.junit.Before;\n", "import org.junit.Test;\n", "import org.slf4j.ILoggerFactory;\n", "import org.slf4j.LoggerFactory;\n", "\n", "import java.io.IOException;\n", "import java.net.URL;\n", "\n", "public class Slf4jLoggerFactoryTest extends BasicLoggerTest {\n", "\n", "    public static final String LOGGER = \"Slf4jTestLogger\";\n", "\n", "    @Before\n", "    public void initLogback() throws JoranException {\n", "        InternalLoggerFactory.setCurrentLoggerType(InternalLoggerFactory.LOGGER_SLF4J);\n", "        System.setProperty(\"loggingDir\", loggingDir);\n", "        ILoggerFactory iLoggerFactory = LoggerFactory.getILoggerFactory();\n", "        JoranConfigurator joranConfigurator = new JoranConfigurator();\n", "        joranConfigurator.setContext((Context) iLoggerFactory);\n", "        URL logbackConfigFile = Slf4jLoggerFactoryTest.class.getClassLoader().getResource(\"logback_test.xml\");\n", "        if (logbackConfigFile == null) {\n", "            throw new RuntimeException(\"can't find logback_test.xml\");\n", "        } else {\n", "            joranConfigurator.doConfigure(logbackConfigFile);\n", "        }\n", "    }\n", "\n", "    @Test\n", "    public void testSlf4j() throws IOException {\n", "        InternalLogger logger1 = Slf4jLoggerFactory.getLogger(LOGGER);\n", "        InternalLogger logger = InternalLoggerFactory.getLogger(LOGGER);\n", "        Assert.assertTrue(logger.getName().equals(logger1.getName()));\n", "        InternalLogger logger2 = Slf4jLoggerFactory.getLogger(Slf4jLoggerFactoryTest.class);\n", "        Slf4jLoggerFactory.Slf4jLogger logger3 = (Slf4jLoggerFactory.Slf4jLogger) logger2;\n", "\n", "        String file = loggingDir + \"/logback_test.log\";\n", "\n", "        logger.info(\"logback slf4j info Message\");\n", "        logger.error(\"logback slf4j error Message\", new RuntimeException(\"test\"));\n", "        logger.debug(\"logback slf4j debug message\");\n", "        logger3.info(\"logback info message\");\n", "        logger3.error(\"logback error message\");\n", "        logger3.info(\"info {}\", \"hahahah\");\n", "        logger3.warn(\"warn {}\", \"hahahah\");\n", "        logger3.warn(\"logger3 warn\");\n", "        logger3.error(\"error {}\", \"hahahah\");\n", "        logger3.debug(\"debug {}\", \"hahahah\");\n", "        String content = readFile(file);\n", "        System.out.println(content);\n", "\n", "        Assert.assertTrue(content.contains(\"Slf4jLoggerFactoryTest\"));\n", "        Assert.assertTrue(content.contains(\"info\"));\n", "        Assert.assertTrue(content.contains(\"RuntimeException\"));\n", "        Assert.assertTrue(!content.contains(\"debug\"));\n", "    }\n", "\n", "}\n"], "method_lines_dic": {"Slf4jLoggerFactory::::getLoggerType()": [30, 33], "Slf4jLoggerFactory::::getLoggerInstance(java.lang.String)": [35, 38], "Slf4jLoggerFactory::::shutdown()": [40, 43], "Slf4jLoggerFactory.Slf4jLogger::::getName()": [53, 56], "Slf4jLoggerFactory.Slf4jLogger::::debug(java.lang.String)": [58, 61], "Slf4jLoggerFactory.Slf4jLogger::::debug(java.lang.String,java.lang.Object)": [63, 66], "Slf4jLoggerFactory.Slf4jLogger::::debug(java.lang.String,java.lang.Object,java.lang.Object)": [68, 71], "Slf4jLoggerFactory.Slf4jLogger::::debug(java.lang.String,java.lang.Object[])": [73, 76], "Slf4jLoggerFactory.Slf4jLogger::::debug(java.lang.String,java.lang.Throwable)": [78, 81], "Slf4jLoggerFactory.Slf4jLogger::::info(java.lang.String)": [83, 86], "Slf4jLoggerFactory.Slf4jLogger::::info(java.lang.String,java.lang.Object)": [88, 91], "Slf4jLoggerFactory.Slf4jLogger::::info(java.lang.String,java.lang.Object,java.lang.Object)": [93, 96], "Slf4jLoggerFactory.Slf4jLogger::::info(java.lang.String,java.lang.Object[])": [98, 101], "Slf4jLoggerFactory.Slf4jLogger::::info(java.lang.String,java.lang.Throwable)": [103, 106], "Slf4jLoggerFactory.Slf4jLogger::::warn(java.lang.String)": [108, 111], "Slf4jLoggerFactory.Slf4jLogger::::warn(java.lang.String,java.lang.Object)": [113, 116], "Slf4jLoggerFactory.Slf4jLogger::::warn(java.lang.String,java.lang.Object[])": [118, 121], "Slf4jLoggerFactory.Slf4jLogger::::warn(java.lang.String,java.lang.Object,java.lang.Object)": [123, 126], "Slf4jLoggerFactory.Slf4jLogger::::warn(java.lang.String,java.lang.Throwable)": [128, 131], "Slf4jLoggerFactory.Slf4jLogger::::error(java.lang.String)": [133, 136], "Slf4jLoggerFactory.Slf4jLogger::::error(java.lang.String,java.lang.Object)": [138, 141], "Slf4jLoggerFactory.Slf4jLogger::::error(java.lang.String,java.lang.Object,java.lang.Object)": [143, 146], "Slf4jLoggerFactory.Slf4jLogger::::error(java.lang.String,java.lang.Object[])": [148, 151], "Slf4jLoggerFactory.Slf4jLogger::::error(java.lang.String,java.lang.Throwable)": [153, 156]}, "test_method_lines_dic": {"Slf4jLoggerFactoryTest::::initLogback()": [36, 49], "Slf4jLoggerFactoryTest::::testSlf4j()": [51, 78]}, "reverse_method_lines_dic": {"30": "Slf4jLoggerFactory::::getLoggerType()", "31": "Slf4jLoggerFactory::::getLoggerType()", "32": "Slf4jLoggerFactory::::getLoggerType()", "33": "Slf4jLoggerFactory::::getLoggerType()", "35": "Slf4jLoggerFactory::::getLoggerInstance(java.lang.String)", "36": "Slf4jLoggerFactory::::getLoggerInstance(java.lang.String)", "37": "Slf4jLoggerFactory::::getLoggerInstance(java.lang.String)", "38": "Slf4jLoggerFactory::::getLoggerInstance(java.lang.String)", "40": "Slf4jLoggerFactory::::shutdown()", "41": "Slf4jLoggerFactory::::shutdown()", "42": "Slf4jLoggerFactory::::shutdown()", "43": "Slf4jLoggerFactory::::shutdown()", "53": "Slf4jLoggerFactory.Slf4jLogger::::getName()", "54": "Slf4jLoggerFactory.Slf4jLogger::::getName()", "55": "Slf4jLoggerFactory.Slf4jLogger::::getName()", "56": "Slf4jLoggerFactory.Slf4jLogger::::getName()", "58": "Slf4jLoggerFactory.Slf4jLogger::::debug(java.lang.String)", "59": "Slf4jLoggerFactory.Slf4jLogger::::debug(java.lang.String)", "60": "Slf4jLoggerFactory.Slf4jLogger::::debug(java.lang.String)", "61": "Slf4jLoggerFactory.Slf4jLogger::::debug(java.lang.String)", "63": "Slf4jLoggerFactory.Slf4jLogger::::debug(java.lang.String,java.lang.Object)", "64": "Slf4jLoggerFactory.Slf4jLogger::::debug(java.lang.String,java.lang.Object)", "65": "Slf4jLoggerFactory.Slf4jLogger::::debug(java.lang.String,java.lang.Object)", "66": "Slf4jLoggerFactory.Slf4jLogger::::debug(java.lang.String,java.lang.Object)", "68": "Slf4jLoggerFactory.Slf4jLogger::::debug(java.lang.String,java.lang.Object,java.lang.Object)", "69": "Slf4jLoggerFactory.Slf4jLogger::::debug(java.lang.String,java.lang.Object,java.lang.Object)", "70": "Slf4jLoggerFactory.Slf4jLogger::::debug(java.lang.String,java.lang.Object,java.lang.Object)", "71": "Slf4jLoggerFactory.Slf4jLogger::::debug(java.lang.String,java.lang.Object,java.lang.Object)", "73": "Slf4jLoggerFactory.Slf4jLogger::::debug(java.lang.String,java.lang.Object[])", "74": "Slf4jLoggerFactory.Slf4jLogger::::debug(java.lang.String,java.lang.Object[])", "75": "Slf4jLoggerFactory.Slf4jLogger::::debug(java.lang.String,java.lang.Object[])", "76": "Slf4jLoggerFactory.Slf4jLogger::::debug(java.lang.String,java.lang.Object[])", "78": "Slf4jLoggerFactory.Slf4jLogger::::debug(java.lang.String,java.lang.Throwable)", "79": "Slf4jLoggerFactory.Slf4jLogger::::debug(java.lang.String,java.lang.Throwable)", "80": "Slf4jLoggerFactory.Slf4jLogger::::debug(java.lang.String,java.lang.Throwable)", "81": "Slf4jLoggerFactory.Slf4jLogger::::debug(java.lang.String,java.lang.Throwable)", "83": "Slf4jLoggerFactory.Slf4jLogger::::info(java.lang.String)", "84": "Slf4jLoggerFactory.Slf4jLogger::::info(java.lang.String)", "85": "Slf4jLoggerFactory.Slf4jLogger::::info(java.lang.String)", "86": "Slf4jLoggerFactory.Slf4jLogger::::info(java.lang.String)", "88": "Slf4jLoggerFactory.Slf4jLogger::::info(java.lang.String,java.lang.Object)", "89": "Slf4jLoggerFactory.Slf4jLogger::::info(java.lang.String,java.lang.Object)", "90": "Slf4jLoggerFactory.Slf4jLogger::::info(java.lang.String,java.lang.Object)", "91": "Slf4jLoggerFactory.Slf4jLogger::::info(java.lang.String,java.lang.Object)", "93": "Slf4jLoggerFactory.Slf4jLogger::::info(java.lang.String,java.lang.Object,java.lang.Object)", "94": "Slf4jLoggerFactory.Slf4jLogger::::info(java.lang.String,java.lang.Object,java.lang.Object)", "95": "Slf4jLoggerFactory.Slf4jLogger::::info(java.lang.String,java.lang.Object,java.lang.Object)", "96": "Slf4jLoggerFactory.Slf4jLogger::::info(java.lang.String,java.lang.Object,java.lang.Object)", "98": "Slf4jLoggerFactory.Slf4jLogger::::info(java.lang.String,java.lang.Object[])", "99": "Slf4jLoggerFactory.Slf4jLogger::::info(java.lang.String,java.lang.Object[])", "100": "Slf4jLoggerFactory.Slf4jLogger::::info(java.lang.String,java.lang.Object[])", "101": "Slf4jLoggerFactory.Slf4jLogger::::info(java.lang.String,java.lang.Object[])", "103": "Slf4jLoggerFactory.Slf4jLogger::::info(java.lang.String,java.lang.Throwable)", "104": "Slf4jLoggerFactory.Slf4jLogger::::info(java.lang.String,java.lang.Throwable)", "105": "Slf4jLoggerFactory.Slf4jLogger::::info(java.lang.String,java.lang.Throwable)", "106": "Slf4jLoggerFactory.Slf4jLogger::::info(java.lang.String,java.lang.Throwable)", "108": "Slf4jLoggerFactory.Slf4jLogger::::warn(java.lang.String)", "109": "Slf4jLoggerFactory.Slf4jLogger::::warn(java.lang.String)", "110": "Slf4jLoggerFactory.Slf4jLogger::::warn(java.lang.String)", "111": "Slf4jLoggerFactory.Slf4jLogger::::warn(java.lang.String)", "113": "Slf4jLoggerFactory.Slf4jLogger::::warn(java.lang.String,java.lang.Object)", "114": "Slf4jLoggerFactory.Slf4jLogger::::warn(java.lang.String,java.lang.Object)", "115": "Slf4jLoggerFactory.Slf4jLogger::::warn(java.lang.String,java.lang.Object)", "116": "Slf4jLoggerFactory.Slf4jLogger::::warn(java.lang.String,java.lang.Object)", "118": "Slf4jLoggerFactory.Slf4jLogger::::warn(java.lang.String,java.lang.Object[])", "119": "Slf4jLoggerFactory.Slf4jLogger::::warn(java.lang.String,java.lang.Object[])", "120": "Slf4jLoggerFactory.Slf4jLogger::::warn(java.lang.String,java.lang.Object[])", "121": "Slf4jLoggerFactory.Slf4jLogger::::warn(java.lang.String,java.lang.Object[])", "123": "Slf4jLoggerFactory.Slf4jLogger::::warn(java.lang.String,java.lang.Object,java.lang.Object)", "124": "Slf4jLoggerFactory.Slf4jLogger::::warn(java.lang.String,java.lang.Object,java.lang.Object)", "125": "Slf4jLoggerFactory.Slf4jLogger::::warn(java.lang.String,java.lang.Object,java.lang.Object)", "126": "Slf4jLoggerFactory.Slf4jLogger::::warn(java.lang.String,java.lang.Object,java.lang.Object)", "128": "Slf4jLoggerFactory.Slf4jLogger::::warn(java.lang.String,java.lang.Throwable)", "129": "Slf4jLoggerFactory.Slf4jLogger::::warn(java.lang.String,java.lang.Throwable)", "130": "Slf4jLoggerFactory.Slf4jLogger::::warn(java.lang.String,java.lang.Throwable)", "131": "Slf4jLoggerFactory.Slf4jLogger::::warn(java.lang.String,java.lang.Throwable)", "133": "Slf4jLoggerFactory.Slf4jLogger::::error(java.lang.String)", "134": "Slf4jLoggerFactory.Slf4jLogger::::error(java.lang.String)", "135": "Slf4jLoggerFactory.Slf4jLogger::::error(java.lang.String)", "136": "Slf4jLoggerFactory.Slf4jLogger::::error(java.lang.String)", "138": "Slf4jLoggerFactory.Slf4jLogger::::error(java.lang.String,java.lang.Object)", "139": "Slf4jLoggerFactory.Slf4jLogger::::error(java.lang.String,java.lang.Object)", "140": "Slf4jLoggerFactory.Slf4jLogger::::error(java.lang.String,java.lang.Object)", "141": "Slf4jLoggerFactory.Slf4jLogger::::error(java.lang.String,java.lang.Object)", "143": "Slf4jLoggerFactory.Slf4jLogger::::error(java.lang.String,java.lang.Object,java.lang.Object)", "144": "Slf4jLoggerFactory.Slf4jLogger::::error(java.lang.String,java.lang.Object,java.lang.Object)", "145": "Slf4jLoggerFactory.Slf4jLogger::::error(java.lang.String,java.lang.Object,java.lang.Object)", "146": "Slf4jLoggerFactory.Slf4jLogger::::error(java.lang.String,java.lang.Object,java.lang.Object)", "148": "Slf4jLoggerFactory.Slf4jLogger::::error(java.lang.String,java.lang.Object[])", "149": "Slf4jLoggerFactory.Slf4jLogger::::error(java.lang.String,java.lang.Object[])", "150": "Slf4jLoggerFactory.Slf4jLogger::::error(java.lang.String,java.lang.Object[])", "151": "Slf4jLoggerFactory.Slf4jLogger::::error(java.lang.String,java.lang.Object[])", "153": "Slf4jLoggerFactory.Slf4jLogger::::error(java.lang.String,java.lang.Throwable)", "154": "Slf4jLoggerFactory.Slf4jLogger::::error(java.lang.String,java.lang.Throwable)", "155": "Slf4jLoggerFactory.Slf4jLogger::::error(java.lang.String,java.lang.Throwable)", "156": "Slf4jLoggerFactory.Slf4jLogger::::error(java.lang.String,java.lang.Throwable)"}, "test_reverse_method_lines_dic": {"36": "Slf4jLoggerFactoryTest::::initLogback()", "37": "Slf4jLoggerFactoryTest::::initLogback()", "38": "Slf4jLoggerFactoryTest::::initLogback()", "39": "Slf4jLoggerFactoryTest::::initLogback()", "40": "Slf4jLoggerFactoryTest::::initLogback()", "41": "Slf4jLoggerFactoryTest::::initLogback()", "42": "Slf4jLoggerFactoryTest::::initLogback()", "43": "Slf4jLoggerFactoryTest::::initLogback()", "44": "Slf4jLoggerFactoryTest::::initLogback()", "45": "Slf4jLoggerFactoryTest::::initLogback()", "46": "Slf4jLoggerFactoryTest::::initLogback()", "47": "Slf4jLoggerFactoryTest::::initLogback()", "48": "Slf4jLoggerFactoryTest::::initLogback()", "49": "Slf4jLoggerFactoryTest::::initLogback()", "51": "Slf4jLoggerFactoryTest::::testSlf4j()", "52": "Slf4jLoggerFactoryTest::::testSlf4j()", "53": "Slf4jLoggerFactoryTest::::testSlf4j()", "54": "Slf4jLoggerFactoryTest::::testSlf4j()", "55": "Slf4jLoggerFactoryTest::::testSlf4j()", "56": "Slf4jLoggerFactoryTest::::testSlf4j()", "57": "Slf4jLoggerFactoryTest::::testSlf4j()", "58": "Slf4jLoggerFactoryTest::::testSlf4j()", "59": "Slf4jLoggerFactoryTest::::testSlf4j()", "60": "Slf4jLoggerFactoryTest::::testSlf4j()", "61": "Slf4jLoggerFactoryTest::::testSlf4j()", "62": "Slf4jLoggerFactoryTest::::testSlf4j()", "63": "Slf4jLoggerFactoryTest::::testSlf4j()", "64": "Slf4jLoggerFactoryTest::::testSlf4j()", "65": "Slf4jLoggerFactoryTest::::testSlf4j()", "66": "Slf4jLoggerFactoryTest::::testSlf4j()", "67": "Slf4jLoggerFactoryTest::::testSlf4j()", "68": "Slf4jLoggerFactoryTest::::testSlf4j()", "69": "Slf4jLoggerFactoryTest::::testSlf4j()", "70": "Slf4jLoggerFactoryTest::::testSlf4j()", "71": "Slf4jLoggerFactoryTest::::testSlf4j()", "72": "Slf4jLoggerFactoryTest::::testSlf4j()", "73": "Slf4jLoggerFactoryTest::::testSlf4j()", "74": "Slf4jLoggerFactoryTest::::testSlf4j()", "75": "Slf4jLoggerFactoryTest::::testSlf4j()", "76": "Slf4jLoggerFactoryTest::::testSlf4j()", "77": "Slf4jLoggerFactoryTest::::testSlf4j()", "78": "Slf4jLoggerFactoryTest::::testSlf4j()"}, "tests": [{"test_lines": [51, 78], "covered_lines": [25, 26, 27, 28, 32, 37, 47, 49, 50, 51, 55, 60, 61, 65, 66, 85, 86, 90, 91, 110, 111, 115, 116, 135, 136, 140, 141, 155, 156]}]}, "/bernard/dataset_construction/prep/repos/RocketMQC/logging/src/main/java/org/apache/rocketmq/logging/inner/LoggingBuilder.java": {"class_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package org.apache.rocketmq.logging.inner;\n", "\n", "import java.io.BufferedWriter;\n", "import java.io.File;\n", "import java.io.FileNotFoundException;\n", "import java.io.FileOutputStream;\n", "import java.io.FilterWriter;\n", "import java.io.IOException;\n", "import java.io.InterruptedIOException;\n", "import java.io.OutputStream;\n", "import java.io.OutputStreamWriter;\n", "import java.io.Writer;\n", "import java.text.MessageFormat;\n", "import java.text.SimpleDateFormat;\n", "import java.util.ArrayList;\n", "import java.util.Calendar;\n", "import java.util.Collection;\n", "import java.util.Date;\n", "import java.util.Enumeration;\n", "import java.util.GregorianCalendar;\n", "import java.util.HashMap;\n", "import java.util.List;\n", "import java.util.Locale;\n", "import java.util.Map;\n", "import java.util.TimeZone;\n", "\n", "public class LoggingBuilder {\n", "\n", "    public static final String SYSTEM_OUT = \"System.out\";\n", "    public static final String SYSTEM_ERR = \"System.err\";\n", "\n", "    public static final String LOGGING_ENCODING = \"rocketmq.logging.inner.encoding\";\n", "    public static final String ENCODING = System.getProperty(LOGGING_ENCODING, \"UTF-8\");\n", "\n", "    public static AppenderBuilder newAppenderBuilder() {\n", "        return new AppenderBuilder();\n", "    }\n", "\n", "    public static class AppenderBuilder {\n", "        private AsyncAppender asyncAppender;\n", "\n", "        private Appender appender = null;\n", "\n", "        private AppenderBuilder() {\n", "\n", "        }\n", "\n", "        public AppenderBuilder withLayout(Layout layout) {\n", "            appender.setLayout(layout);\n", "            return this;\n", "        }\n", "\n", "        public AppenderBuilder withName(String name) {\n", "            appender.setName(name);\n", "            return this;\n", "        }\n", "\n", "        public AppenderBuilder withConsoleAppender(String target) {\n", "            ConsoleAppender consoleAppender = new ConsoleAppender();\n", "            consoleAppender.setTarget(target);\n", "            consoleAppender.activateOptions();\n", "            this.appender = consoleAppender;\n", "            return this;\n", "        }\n", "\n", "        public AppenderBuilder withFileAppender(String file) {\n", "            FileAppender appender = new FileAppender();\n", "            appender.setFile(file);\n", "            appender.setAppend(true);\n", "            appender.setBufferedIO(false);\n", "            appender.setEncoding(ENCODING);\n", "            appender.setImmediateFlush(true);\n", "            appender.activateOptions();\n", "            this.appender = appender;\n", "            return this;\n", "        }\n", "\n", "        public AppenderBuilder withRollingFileAppender(String file, String maxFileSize, int maxFileIndex) {\n", "            RollingFileAppender appender = new RollingFileAppender();\n", "            appender.setFile(file);\n", "            appender.setAppend(true);\n", "            appender.setBufferedIO(false);\n", "            appender.setEncoding(ENCODING);\n", "            appender.setImmediateFlush(true);\n", "            appender.setMaximumFileSize(Integer.parseInt(maxFileSize));\n", "            appender.setMaxBackupIndex(maxFileIndex);\n", "            appender.activateOptions();\n", "            this.appender = appender;\n", "            return this;\n", "        }\n", "\n", "        public AppenderBuilder withDailyFileRollingAppender(String file, String datePattern) {\n", "            DailyRollingFileAppender appender = new DailyRollingFileAppender();\n", "            appender.setFile(file);\n", "            appender.setAppend(true);\n", "            appender.setBufferedIO(false);\n", "            appender.setEncoding(ENCODING);\n", "            appender.setImmediateFlush(true);\n", "            appender.setDatePattern(datePattern);\n", "            appender.activateOptions();\n", "            this.appender = appender;\n", "            return this;\n", "        }\n", "\n", "        public AppenderBuilder withAsync(boolean blocking, int buffSize) {\n", "            AsyncAppender asyncAppender = new AsyncAppender();\n", "            asyncAppender.setBlocking(blocking);\n", "            asyncAppender.setBufferSize(buffSize);\n", "            this.asyncAppender = asyncAppender;\n", "            return this;\n", "        }\n", "\n", "        public Appender build() {\n", "            if (appender == null) {\n", "                throw new RuntimeException(\"please specify appender first\");\n", "            }\n", "            if (asyncAppender != null) {\n", "                asyncAppender.addAppender(appender);\n", "                return asyncAppender;\n", "            } else {\n", "                return appender;\n", "            }\n", "        }\n", "    }\n", "\n", "    public static class AsyncAppender extends Appender implements Appender.AppenderPipeline {\n", "\n", "        public static final int DEFAULT_BUFFER_SIZE = 128;\n", "\n", "        private final List<LoggingEvent> buffer = new ArrayList<LoggingEvent>();\n", "\n", "        private final Map<String, DiscardSummary> discardMap = new HashMap<String, DiscardSummary>();\n", "\n", "        private int bufferSize = DEFAULT_BUFFER_SIZE;\n", "\n", "        private final AppenderPipelineImpl appenderPipeline;\n", "\n", "        private final Thread dispatcher;\n", "\n", "        private boolean blocking = true;\n", "\n", "        public AsyncAppender() {\n", "            appenderPipeline = new AppenderPipelineImpl();\n", "\n", "            dispatcher = new Thread(new Dispatcher(this, buffer, discardMap, appenderPipeline));\n", "\n", "            dispatcher.setDaemon(true);\n", "\n", "            dispatcher.setName(\"AsyncAppender-Dispatcher-\" + dispatcher.getName());\n", "            dispatcher.start();\n", "        }\n", "\n", "        public void addAppender(final Appender newAppender) {\n", "            synchronized (appenderPipeline) {\n", "                appenderPipeline.addAppender(newAppender);\n", "            }\n", "        }\n", "\n", "        public void append(final LoggingEvent event) {\n", "            if ((dispatcher == null) || !dispatcher.isAlive() || (bufferSize <= 0)) {\n", "                synchronized (appenderPipeline) {\n", "                    appenderPipeline.appendLoopOnAppenders(event);\n", "                }\n", "\n", "                return;\n", "            }\n", "\n", "            event.getThreadName();\n", "            event.getRenderedMessage();\n", "\n", "            synchronized (buffer) {\n", "                while (true) {\n", "                    int previousSize = buffer.size();\n", "\n", "                    if (previousSize < bufferSize) {\n", "                        buffer.add(event);\n", "\n", "                        if (previousSize == 0) {\n", "                            buffer.notifyAll();\n", "                        }\n", "\n", "                        break;\n", "                    }\n", "\n", "                    boolean discard = true;\n", "                    if (blocking\n", "                        && !Thread.interrupted()\n", "                        && Thread.currentThread() != dispatcher) {\n", "                        try {\n", "                            buffer.wait();\n", "                            discard = false;\n", "                        } catch (InterruptedException e) {\n", "                            Thread.currentThread().interrupt();\n", "                        }\n", "                    }\n", "                    if (discard) {\n", "                        String loggerName = event.getLoggerName();\n", "                        DiscardSummary summary = discardMap.get(loggerName);\n", "\n", "                        if (summary == null) {\n", "                            summary = new DiscardSummary(event);\n", "                            discardMap.put(loggerName, summary);\n", "                        } else {\n", "                            summary.add(event);\n", "                        }\n", "\n", "                        break;\n", "                    }\n", "                }\n", "            }\n", "        }\n", "\n", "        public void close() {\n", "\n", "            synchronized (buffer) {\n", "                closed = true;\n", "                buffer.notifyAll();\n", "            }\n", "\n", "            try {\n", "                dispatcher.join();\n", "            } catch (InterruptedException e) {\n", "                Thread.currentThread().interrupt();\n", "                SysLogger.error(\n", "                    \"Got an InterruptedException while waiting for the \"\n", "                        + \"dispatcher to finish.\", e);\n", "            }\n", "\n", "            synchronized (appenderPipeline) {\n", "                Enumeration iter = appenderPipeline.getAllAppenders();\n", "                if (iter != null) {\n", "                    while (iter.hasMoreElements()) {\n", "                        Object next = iter.nextElement();\n", "                        if (next instanceof Appender) {\n", "                            ((Appender) next).close();\n", "                        }\n", "                    }\n", "                }\n", "            }\n", "        }\n", "\n", "        public Enumeration getAllAppenders() {\n", "            synchronized (appenderPipeline) {\n", "                return appenderPipeline.getAllAppenders();\n", "            }\n", "        }\n", "\n", "        public Appender getAppender(final String name) {\n", "            synchronized (appenderPipeline) {\n", "                return appenderPipeline.getAppender(name);\n", "            }\n", "        }\n", "\n", "        public boolean isAttached(final Appender appender) {\n", "            synchronized (appenderPipeline) {\n", "                return appenderPipeline.isAttached(appender);\n", "            }\n", "        }\n", "\n", "        public void removeAllAppenders() {\n", "            synchronized (appenderPipeline) {\n", "                appenderPipeline.removeAllAppenders();\n", "            }\n", "        }\n", "\n", "        public void removeAppender(final Appender appender) {\n", "            synchronized (appenderPipeline) {\n", "                appenderPipeline.removeAppender(appender);\n", "            }\n", "        }\n", "\n", "        public void removeAppender(final String name) {\n", "            synchronized (appenderPipeline) {\n", "                appenderPipeline.removeAppender(name);\n", "            }\n", "        }\n", "\n", "        public void setBufferSize(final int size) {\n", "            if (size < 0) {\n", "                throw new NegativeArraySizeException(\"size\");\n", "            }\n", "\n", "            synchronized (buffer) {\n", "                bufferSize = (size < 1) ? 1 : size;\n", "                buffer.notifyAll();\n", "            }\n", "        }\n", "\n", "        public int getBufferSize() {\n", "            return bufferSize;\n", "        }\n", "\n", "        public void setBlocking(final boolean value) {\n", "            synchronized (buffer) {\n", "                blocking = value;\n", "                buffer.notifyAll();\n", "            }\n", "        }\n", "\n", "        public boolean getBlocking() {\n", "            return blocking;\n", "        }\n", "\n", "        private final class DiscardSummary {\n", "\n", "            private LoggingEvent maxEvent;\n", "\n", "            private int count;\n", "\n", "            public DiscardSummary(final LoggingEvent event) {\n", "                maxEvent = event;\n", "                count = 1;\n", "            }\n", "\n", "            public void add(final LoggingEvent event) {\n", "                if (event.getLevel().toInt() > maxEvent.getLevel().toInt()) {\n", "                    maxEvent = event;\n", "                }\n", "                count++;\n", "            }\n", "\n", "            public LoggingEvent createEvent() {\n", "                String msg =\n", "                    MessageFormat.format(\n", "                        \"Discarded {0} messages due to full event buffer including: {1}\",\n", "                        count, maxEvent.getMessage());\n", "\n", "                return new LoggingEvent(\n", "                    \"AsyncAppender.DONT_REPORT_LOCATION\",\n", "                    Logger.getLogger(maxEvent.getLoggerName()),\n", "                    maxEvent.getLevel(),\n", "                    msg,\n", "                    null);\n", "            }\n", "        }\n", "\n", "        private class Dispatcher implements Runnable {\n", "\n", "            private final AsyncAppender parent;\n", "\n", "            private final List<LoggingEvent> buffer;\n", "\n", "            private final Map<String, DiscardSummary> discardMap;\n", "\n", "            private final AppenderPipelineImpl appenderPipeline;\n", "\n", "            public Dispatcher(\n", "                final AsyncAppender parent, final List<LoggingEvent> buffer, final Map<String, DiscardSummary> discardMap,\n", "                final AppenderPipelineImpl appenderPipeline) {\n", "\n", "                this.parent = parent;\n", "                this.buffer = buffer;\n", "                this.appenderPipeline = appenderPipeline;\n", "                this.discardMap = discardMap;\n", "            }\n", "\n", "            public void run() {\n", "                boolean isActive = true;\n", "\n", "                try {\n", "                    while (isActive) {\n", "                        LoggingEvent[] events = null;\n", "\n", "                        synchronized (buffer) {\n", "                            int bufferSize = buffer.size();\n", "                            isActive = !parent.closed;\n", "\n", "                            while ((bufferSize == 0) && isActive) {\n", "                                buffer.wait();\n", "                                bufferSize = buffer.size();\n", "                                isActive = !parent.closed;\n", "                            }\n", "\n", "                            if (bufferSize > 0) {\n", "                                events = new LoggingEvent[bufferSize + discardMap.size()];\n", "                                buffer.toArray(events);\n", "\n", "                                int index = bufferSize;\n", "                                Collection<DiscardSummary> values = discardMap.values();\n", "                                for (DiscardSummary value : values) {\n", "                                    events[index++] = value.createEvent();\n", "                                }\n", "\n", "                                buffer.clear();\n", "                                discardMap.clear();\n", "\n", "                                buffer.notifyAll();\n", "                            }\n", "                        }\n", "                        if (events != null) {\n", "                            for (LoggingEvent event : events) {\n", "                                synchronized (appenderPipeline) {\n", "                                    appenderPipeline.appendLoopOnAppenders(event);\n", "                                }\n", "                            }\n", "                        }\n", "                    }\n", "                } catch (InterruptedException ex) {\n", "                    Thread.currentThread().interrupt();\n", "                }\n", "            }\n", "        }\n", "    }\n", "\n", "    private static class QuietWriter extends FilterWriter {\n", "\n", "        protected Appender appender;\n", "\n", "        public QuietWriter(Writer writer, Appender appender) {\n", "            super(writer);\n", "            this.appender = appender;\n", "        }\n", "\n", "        public void write(String string) {\n", "            if (string != null) {\n", "                try {\n", "                    out.write(string);\n", "                } catch (Exception e) {\n", "                    appender.handleError(\"Failed to write [\" + string + \"].\", e,\n", "                        Appender.CODE_WRITE_FAILURE);\n", "                }\n", "            }\n", "        }\n", "\n", "        public void flush() {\n", "            try {\n", "                out.flush();\n", "            } catch (Exception e) {\n", "                appender.handleError(\"Failed to flush writer,\", e,\n", "                    Appender.CODE_FLUSH_FAILURE);\n", "            }\n", "        }\n", "    }\n", "\n", "    public static class WriterAppender extends Appender {\n", "\n", "\n", "        protected boolean immediateFlush = true;\n", "\n", "        protected String encoding;\n", "\n", "\n", "        protected QuietWriter qw;\n", "\n", "        public WriterAppender() {\n", "\n", "        }\n", "\n", "        public void setImmediateFlush(boolean value) {\n", "            immediateFlush = value;\n", "        }\n", "\n", "\n", "        public boolean getImmediateFlush() {\n", "            return immediateFlush;\n", "        }\n", "\n", "        public void activateOptions() {\n", "        }\n", "\n", "\n", "        public void append(LoggingEvent event) {\n", "            if (!checkEntryConditions()) {\n", "                return;\n", "            }\n", "            subAppend(event);\n", "        }\n", "\n", "        protected boolean checkEntryConditions() {\n", "            if (this.closed) {\n", "                SysLogger.warn(\"Not allowed to write to a closed appender.\");\n", "                return false;\n", "            }\n", "\n", "            if (this.qw == null) {\n", "                handleError(\"No output stream or file set for the appender named [\" +\n", "                    name + \"].\");\n", "                return false;\n", "            }\n", "\n", "            if (this.layout == null) {\n", "                handleError(\"No layout set for the appender named [\" + name + \"].\");\n", "                return false;\n", "            }\n", "            return true;\n", "        }\n", "\n", "        public synchronized void close() {\n", "            if (this.closed) {\n", "                return;\n", "            }\n", "            this.closed = true;\n", "            writeFooter();\n", "            reset();\n", "        }\n", "\n", "        protected void closeWriter() {\n", "            if (qw != null) {\n", "                try {\n", "                    qw.close();\n", "                } catch (IOException e) {\n", "                    handleError(\"Could not close \" + qw, e, CODE_CLOSE_FAILURE);\n", "                }\n", "            }\n", "        }\n", "\n", "        protected OutputStreamWriter createWriter(OutputStream os) {\n", "            OutputStreamWriter retval = null;\n", "\n", "            String enc = getEncoding();\n", "            if (enc != null) {\n", "                try {\n", "                    retval = new OutputStreamWriter(os, enc);\n", "                } catch (IOException e) {\n", "                    SysLogger.warn(\"Error initializing output writer.\");\n", "                    SysLogger.warn(\"Unsupported encoding?\");\n", "                }\n", "            }\n", "            if (retval == null) {\n", "                retval = new OutputStreamWriter(os);\n", "            }\n", "            return retval;\n", "        }\n", "\n", "        public String getEncoding() {\n", "            return encoding;\n", "        }\n", "\n", "        public void setEncoding(String value) {\n", "            encoding = value;\n", "        }\n", "\n", "\n", "        public synchronized void setWriter(Writer writer) {\n", "            reset();\n", "            this.qw = new QuietWriter(writer, this);\n", "            writeHeader();\n", "        }\n", "\n", "        protected void subAppend(LoggingEvent event) {\n", "            this.qw.write(this.layout.format(event));\n", "\n", "            if (layout.ignoresThrowable()) {\n", "                String[] s = event.getThrowableStr();\n", "                if (s != null) {\n", "                    for (String s1 : s) {\n", "                        this.qw.write(s1);\n", "                        this.qw.write(LINE_SEP);\n", "                    }\n", "                }\n", "            }\n", "\n", "            if (shouldFlush(event)) {\n", "                this.qw.flush();\n", "            }\n", "        }\n", "\n", "        protected void reset() {\n", "            closeWriter();\n", "            this.qw = null;\n", "        }\n", "\n", "        protected void writeFooter() {\n", "            if (layout != null) {\n", "                String f = layout.getFooter();\n", "                if (f != null && this.qw != null) {\n", "                    this.qw.write(f);\n", "                    this.qw.flush();\n", "                }\n", "            }\n", "        }\n", "\n", "        protected void writeHeader() {\n", "            if (layout != null) {\n", "                String h = layout.getHeader();\n", "                if (h != null && this.qw != null) {\n", "                    this.qw.write(h);\n", "                }\n", "            }\n", "        }\n", "\n", "        protected boolean shouldFlush(final LoggingEvent event) {\n", "            return event != null && immediateFlush;\n", "        }\n", "    }\n", "\n", "\n", "    public static class FileAppender extends WriterAppender {\n", "\n", "        protected boolean fileAppend = true;\n", "\n", "        protected String fileName = null;\n", "\n", "        protected boolean bufferedIO = false;\n", "\n", "        protected int bufferSize = 8 * 1024;\n", "\n", "        public FileAppender() {\n", "        }\n", "\n", "        public FileAppender(Layout layout, String filename, boolean append)\n", "            throws IOException {\n", "            this.layout = layout;\n", "            this.setFile(filename, append, false, bufferSize);\n", "        }\n", "\n", "        public void setFile(String file) {\n", "            fileName = file.trim();\n", "        }\n", "\n", "        public boolean getAppend() {\n", "            return fileAppend;\n", "        }\n", "\n", "        public String getFile() {\n", "            return fileName;\n", "        }\n", "\n", "        public void activateOptions() {\n", "            if (fileName != null) {\n", "                try {\n", "                    setFile(fileName, fileAppend, bufferedIO, bufferSize);\n", "                } catch (IOException e) {\n", "                    handleError(\"setFile(\" + fileName + \",\" + fileAppend + \") call failed.\",\n", "                        e, CODE_FILE_OPEN_FAILURE);\n", "                }\n", "            } else {\n", "                SysLogger.warn(\"File option not set for appender [\" + name + \"].\");\n", "                SysLogger.warn(\"Are you using FileAppender instead of ConsoleAppender?\");\n", "            }\n", "        }\n", "\n", "        protected void closeFile() {\n", "            if (this.qw != null) {\n", "                try {\n", "                    this.qw.close();\n", "                } catch (IOException e) {\n", "                    if (e instanceof InterruptedIOException) {\n", "                        Thread.currentThread().interrupt();\n", "                    }\n", "                    SysLogger.error(\"Could not close \" + qw, e);\n", "                }\n", "            }\n", "        }\n", "\n", "        public boolean getBufferedIO() {\n", "            return this.bufferedIO;\n", "        }\n", "\n", "        public int getBufferSize() {\n", "            return this.bufferSize;\n", "        }\n", "\n", "        public void setAppend(boolean flag) {\n", "            fileAppend = flag;\n", "        }\n", "\n", "        public void setBufferedIO(boolean bufferedIO) {\n", "            this.bufferedIO = bufferedIO;\n", "            if (bufferedIO) {\n", "                immediateFlush = false;\n", "            }\n", "        }\n", "\n", "        public void setBufferSize(int bufferSize) {\n", "            this.bufferSize = bufferSize;\n", "        }\n", "\n", "        public synchronized void setFile(String fileName, boolean append, boolean bufferedIO, int bufferSize)\n", "            throws IOException {\n", "            SysLogger.debug(\"setFile called: \" + fileName + \", \" + append);\n", "\n", "            if (bufferedIO) {\n", "                setImmediateFlush(false);\n", "            }\n", "\n", "            reset();\n", "            FileOutputStream ostream;\n", "            try {\n", "                ostream = new FileOutputStream(fileName, append);\n", "            } catch (FileNotFoundException ex) {\n", "                String parentName = new File(fileName).getParent();\n", "                if (parentName != null) {\n", "                    File parentDir = new File(parentName);\n", "                    if (!parentDir.exists() && parentDir.mkdirs()) {\n", "                        ostream = new FileOutputStream(fileName, append);\n", "                    } else {\n", "                        throw ex;\n", "                    }\n", "                } else {\n", "                    throw ex;\n", "                }\n", "            }\n", "            Writer fw = createWriter(ostream);\n", "            if (bufferedIO) {\n", "                fw = new BufferedWriter(fw, bufferSize);\n", "            }\n", "            this.setQWForFiles(fw);\n", "            this.fileName = fileName;\n", "            this.fileAppend = append;\n", "            this.bufferedIO = bufferedIO;\n", "            this.bufferSize = bufferSize;\n", "            writeHeader();\n", "            SysLogger.debug(\"setFile ended\");\n", "        }\n", "\n", "        protected void setQWForFiles(Writer writer) {\n", "            this.qw = new QuietWriter(writer, this);\n", "        }\n", "\n", "        protected void reset() {\n", "            closeFile();\n", "            this.fileName = null;\n", "            super.reset();\n", "        }\n", "    }\n", "\n", "\n", "    public static class RollingFileAppender extends FileAppender {\n", "\n", "        protected long maxFileSize = 10 * 1024 * 1024;\n", "\n", "        protected int maxBackupIndex = 1;\n", "\n", "        private long nextRollover = 0;\n", "\n", "        public RollingFileAppender() {\n", "            super();\n", "        }\n", "\n", "        public int getMaxBackupIndex() {\n", "            return maxBackupIndex;\n", "        }\n", "\n", "        public long getMaximumFileSize() {\n", "            return maxFileSize;\n", "        }\n", "\n", "        public void rollOver() {\n", "            File target;\n", "            File file;\n", "\n", "            if (qw != null) {\n", "                long size = ((CountingQuietWriter) qw).getCount();\n", "                SysLogger.debug(\"rolling over count=\" + size);\n", "                nextRollover = size + maxFileSize;\n", "            }\n", "            SysLogger.debug(\"maxBackupIndex=\" + maxBackupIndex);\n", "\n", "            boolean renameSucceeded = true;\n", "            if (maxBackupIndex > 0) {\n", "                file = new File(fileName + '.' + maxBackupIndex);\n", "                if (file.exists()) {\n", "                    renameSucceeded = file.delete();\n", "                }\n", "\n", "                for (int i = maxBackupIndex - 1; i >= 1 && renameSucceeded; i--) {\n", "                    file = new File(fileName + \".\" + i);\n", "                    if (file.exists()) {\n", "                        target = new File(fileName + '.' + (i + 1));\n", "                        SysLogger.debug(\"Renaming file \" + file + \" to \" + target);\n", "                        renameSucceeded = file.renameTo(target);\n", "                    }\n", "                }\n", "\n", "                if (renameSucceeded) {\n", "                    target = new File(fileName + \".\" + 1);\n", "\n", "                    this.closeFile(); // keep windows happy.\n", "\n", "                    file = new File(fileName);\n", "                    SysLogger.debug(\"Renaming file \" + file + \" to \" + target);\n", "                    renameSucceeded = file.renameTo(target);\n", "\n", "                    if (!renameSucceeded) {\n", "                        try {\n", "                            this.setFile(fileName, true, bufferedIO, bufferSize);\n", "                        } catch (IOException e) {\n", "                            if (e instanceof InterruptedIOException) {\n", "                                Thread.currentThread().interrupt();\n", "                            }\n", "                            SysLogger.error(\"setFile(\" + fileName + \", true) call failed.\", e);\n", "                        }\n", "                    }\n", "                }\n", "            }\n", "\n", "            if (renameSucceeded) {\n", "                try {\n", "                    this.setFile(fileName, false, bufferedIO, bufferSize);\n", "                    nextRollover = 0;\n", "                } catch (IOException e) {\n", "                    if (e instanceof InterruptedIOException) {\n", "                        Thread.currentThread().interrupt();\n", "                    }\n", "                    SysLogger.error(\"setFile(\" + fileName + \", false) call failed.\", e);\n", "                }\n", "            }\n", "        }\n", "\n", "        public synchronized void setFile(String fileName, boolean append, boolean bufferedIO, int bufferSize)\n", "            throws IOException {\n", "            super.setFile(fileName, append, this.bufferedIO, this.bufferSize);\n", "            if (append) {\n", "                File f = new File(fileName);\n", "                ((CountingQuietWriter) qw).setCount(f.length());\n", "            }\n", "        }\n", "\n", "        public void setMaxBackupIndex(int maxBackups) {\n", "            this.maxBackupIndex = maxBackups;\n", "        }\n", "\n", "        public void setMaximumFileSize(long maxFileSize) {\n", "            this.maxFileSize = maxFileSize;\n", "        }\n", "\n", "        protected void setQWForFiles(Writer writer) {\n", "            this.qw = new CountingQuietWriter(writer, this);\n", "        }\n", "\n", "        protected void subAppend(LoggingEvent event) {\n", "            super.subAppend(event);\n", "            if (fileName != null && qw != null) {\n", "                long size = ((CountingQuietWriter) qw).getCount();\n", "                if (size >= maxFileSize && size >= nextRollover) {\n", "                    rollOver();\n", "                }\n", "            }\n", "        }\n", "\n", "        protected class CountingQuietWriter extends QuietWriter {\n", "\n", "            protected long count;\n", "\n", "            public CountingQuietWriter(Writer writer, Appender appender) {\n", "                super(writer, appender);\n", "            }\n", "\n", "            public void write(String string) {\n", "                try {\n", "                    out.write(string);\n", "                    count += string.length();\n", "                } catch (IOException e) {\n", "                    appender.handleError(\"Write failure.\", e, Appender.CODE_WRITE_FAILURE);\n", "                }\n", "            }\n", "\n", "            public long getCount() {\n", "                return count;\n", "            }\n", "\n", "            public void setCount(long count) {\n", "                this.count = count;\n", "            }\n", "\n", "        }\n", "    }\n", "\n", "\n", "    public static class DailyRollingFileAppender extends FileAppender {\n", "\n", "        static final int TOP_OF_TROUBLE = -1;\n", "        static final int TOP_OF_MINUTE = 0;\n", "        static final int TOP_OF_HOUR = 1;\n", "        static final int HALF_DAY = 2;\n", "        static final int TOP_OF_DAY = 3;\n", "        static final int TOP_OF_WEEK = 4;\n", "        static final int TOP_OF_MONTH = 5;\n", "\n", "\n", "        /**\n", "         * The date pattern. By default, the pattern is set to\n", "         * \"'.'yyyy-MM-dd\" meaning daily rollover.\n", "         */\n", "        private String datePattern = \"'.'yyyy-MM-dd\";\n", "\n", "        private String scheduledFilename;\n", "\n", "        private long nextCheck = System.currentTimeMillis() - 1;\n", "\n", "        Date now = new Date();\n", "\n", "        SimpleDateFormat sdf;\n", "\n", "        RollingCalendar rc = new RollingCalendar();\n", "\n", "        final TimeZone gmtTimeZone = TimeZone.getTimeZone(\"GMT\");\n", "\n", "\n", "        public void setDatePattern(String pattern) {\n", "            datePattern = pattern;\n", "        }\n", "\n", "        public String getDatePattern() {\n", "            return datePattern;\n", "        }\n", "\n", "        public void activateOptions() {\n", "            super.activateOptions();\n", "            if (datePattern != null && fileName != null) {\n", "                now.setTime(System.currentTimeMillis());\n", "                sdf = new SimpleDateFormat(datePattern);\n", "                int type = computeCheckPeriod();\n", "                printPeriodicity(type);\n", "                rc.setType(type);\n", "                File file = new File(fileName);\n", "                scheduledFilename = fileName + sdf.format(new Date(file.lastModified()));\n", "\n", "            } else {\n", "                SysLogger.error(\"Either File or DatePattern options are not set for appender [\" + name + \"].\");\n", "            }\n", "        }\n", "\n", "        void printPeriodicity(int type) {\n", "            switch (type) {\n", "                case TOP_OF_MINUTE:\n", "                    SysLogger.debug(\"Appender [\" + name + \"] to be rolled every minute.\");\n", "                    break;\n", "                case TOP_OF_HOUR:\n", "                    SysLogger.debug(\"Appender [\" + name + \"] to be rolled on top of every hour.\");\n", "                    break;\n", "                case HALF_DAY:\n", "                    SysLogger.debug(\"Appender [\" + name + \"] to be rolled at midday and midnight.\");\n", "                    break;\n", "                case TOP_OF_DAY:\n", "                    SysLogger.debug(\"Appender [\" + name + \"] to be rolled at midnight.\");\n", "                    break;\n", "                case TOP_OF_WEEK:\n", "                    SysLogger.debug(\"Appender [\" + name + \"] to be rolled at start of week.\");\n", "                    break;\n", "                case TOP_OF_MONTH:\n", "                    SysLogger.debug(\"Appender [\" + name + \"] to be rolled at start of every month.\");\n", "                    break;\n", "                default:\n", "                    SysLogger.warn(\"Unknown periodicity for appender [\" + name + \"].\");\n", "            }\n", "        }\n", "\n", "        int computeCheckPeriod() {\n", "            RollingCalendar rollingCalendar = new RollingCalendar(gmtTimeZone, Locale.getDefault());\n", "            // set sate to 1970-01-01 00:00:00 GMT\n", "            Date epoch = new Date(0);\n", "            if (datePattern != null) {\n", "                for (int i = TOP_OF_MINUTE; i <= TOP_OF_MONTH; i++) {\n", "                    SimpleDateFormat simpleDateFormat = new SimpleDateFormat(datePattern);\n", "                    simpleDateFormat.setTimeZone(gmtTimeZone);\n", "                    String r0 = simpleDateFormat.format(epoch);\n", "                    rollingCalendar.setType(i);\n", "                    Date next = new Date(rollingCalendar.getNextCheckMillis(epoch));\n", "                    String r1 = simpleDateFormat.format(next);\n", "                    if (r0 != null && r1 != null && !r0.equals(r1)) {\n", "                        return i;\n", "                    }\n", "                }\n", "            }\n", "            return TOP_OF_TROUBLE;\n", "        }\n", "\n", "        void rollOver() throws IOException {\n", "\n", "            if (datePattern == null) {\n", "                handleError(\"Missing DatePattern option in rollOver().\");\n", "                return;\n", "            }\n", "\n", "            String datedFilename = fileName + sdf.format(now);\n", "\n", "            if (scheduledFilename.equals(datedFilename)) {\n", "                return;\n", "            }\n", "            this.closeFile();\n", "\n", "            File target = new File(scheduledFilename);\n", "            if (target.exists() && !target.delete()) {\n", "                SysLogger.error(\"Failed to delete [\" + scheduledFilename + \"].\");\n", "            }\n", "\n", "            File file = new File(fileName);\n", "            boolean result = file.renameTo(target);\n", "            if (result) {\n", "                SysLogger.debug(fileName + \" -> \" + scheduledFilename);\n", "            } else {\n", "                SysLogger.error(\"Failed to rename [\" + fileName + \"] to [\" + scheduledFilename + \"].\");\n", "            }\n", "\n", "            try {\n", "                this.setFile(fileName, true, this.bufferedIO, this.bufferSize);\n", "            } catch (IOException e) {\n", "                handleError(\"setFile(\" + fileName + \", true) call failed.\");\n", "            }\n", "            scheduledFilename = datedFilename;\n", "        }\n", "\n", "        protected void subAppend(LoggingEvent event) {\n", "            long n = System.currentTimeMillis();\n", "            if (n >= nextCheck) {\n", "                now.setTime(n);\n", "                nextCheck = rc.getNextCheckMillis(now);\n", "                try {\n", "                    rollOver();\n", "                } catch (IOException ioe) {\n", "                    if (ioe instanceof InterruptedIOException) {\n", "                        Thread.currentThread().interrupt();\n", "                    }\n", "                    SysLogger.error(\"rollOver() failed.\", ioe);\n", "                }\n", "            }\n", "            super.subAppend(event);\n", "        }\n", "    }\n", "\n", "    private static class RollingCalendar extends GregorianCalendar {\n", "        private static final long serialVersionUID = -3560331770601814177L;\n", "\n", "        int type = DailyRollingFileAppender.TOP_OF_TROUBLE;\n", "\n", "        RollingCalendar() {\n", "            super();\n", "        }\n", "\n", "        RollingCalendar(TimeZone tz, Locale locale) {\n", "            super(tz, locale);\n", "        }\n", "\n", "        void setType(int type) {\n", "            this.type = type;\n", "        }\n", "\n", "        public long getNextCheckMillis(Date now) {\n", "            return getNextCheckDate(now).getTime();\n", "        }\n", "\n", "        public Date getNextCheckDate(Date now) {\n", "            this.setTime(now);\n", "\n", "            switch (type) {\n", "                case DailyRollingFileAppender.TOP_OF_MINUTE:\n", "                    this.set(Calendar.SECOND, 0);\n", "                    this.set(Calendar.MILLISECOND, 0);\n", "                    this.add(Calendar.MINUTE, 1);\n", "                    break;\n", "                case DailyRollingFileAppender.TOP_OF_HOUR:\n", "                    this.set(Calendar.MINUTE, 0);\n", "                    this.set(Calendar.SECOND, 0);\n", "                    this.set(Calendar.MILLISECOND, 0);\n", "                    this.add(Calendar.HOUR_OF_DAY, 1);\n", "                    break;\n", "                case DailyRollingFileAppender.HALF_DAY:\n", "                    this.set(Calendar.MINUTE, 0);\n", "                    this.set(Calendar.SECOND, 0);\n", "                    this.set(Calendar.MILLISECOND, 0);\n", "                    int hour = get(Calendar.HOUR_OF_DAY);\n", "                    if (hour < 12) {\n", "                        this.set(Calendar.HOUR_OF_DAY, 12);\n", "                    } else {\n", "                        this.set(Calendar.HOUR_OF_DAY, 0);\n", "                        this.add(Calendar.DAY_OF_MONTH, 1);\n", "                    }\n", "                    break;\n", "                case DailyRollingFileAppender.TOP_OF_DAY:\n", "                    this.set(Calendar.HOUR_OF_DAY, 0);\n", "                    this.set(Calendar.MINUTE, 0);\n", "                    this.set(Calendar.SECOND, 0);\n", "                    this.set(Calendar.MILLISECOND, 0);\n", "                    this.add(Calendar.DATE, 1);\n", "                    break;\n", "                case DailyRollingFileAppender.TOP_OF_WEEK:\n", "                    this.set(Calendar.DAY_OF_WEEK, getFirstDayOfWeek());\n", "                    this.set(Calendar.HOUR_OF_DAY, 0);\n", "                    this.set(Calendar.MINUTE, 0);\n", "                    this.set(Calendar.SECOND, 0);\n", "                    this.set(Calendar.MILLISECOND, 0);\n", "                    this.add(Calendar.WEEK_OF_YEAR, 1);\n", "                    break;\n", "                case DailyRollingFileAppender.TOP_OF_MONTH:\n", "                    this.set(Calendar.DATE, 1);\n", "                    this.set(Calendar.HOUR_OF_DAY, 0);\n", "                    this.set(Calendar.MINUTE, 0);\n", "                    this.set(Calendar.SECOND, 0);\n", "                    this.set(Calendar.MILLISECOND, 0);\n", "                    this.add(Calendar.MONTH, 1);\n", "                    break;\n", "                default:\n", "                    throw new IllegalStateException(\"Unknown periodicity type.\");\n", "            }\n", "            return getTime();\n", "        }\n", "    }\n", "\n", "    public static class ConsoleAppender extends WriterAppender {\n", "\n", "        protected String target = SYSTEM_OUT;\n", "\n", "        public ConsoleAppender() {\n", "        }\n", "\n", "        public void setTarget(String value) {\n", "            String v = value.trim();\n", "\n", "            if (SYSTEM_OUT.equalsIgnoreCase(v)) {\n", "                target = SYSTEM_OUT;\n", "            } else if (SYSTEM_ERR.equalsIgnoreCase(v)) {\n", "                target = SYSTEM_ERR;\n", "            } else {\n", "                targetWarn(value);\n", "            }\n", "        }\n", "\n", "        public String getTarget() {\n", "            return target;\n", "        }\n", "\n", "        void targetWarn(String val) {\n", "            SysLogger.warn(\"[\" + val + \"] should be System.out or System.err.\");\n", "            SysLogger.warn(\"Using previously set target, System.out by default.\");\n", "        }\n", "\n", "        public void activateOptions() {\n", "            if (target.equals(SYSTEM_ERR)) {\n", "                setWriter(createWriter(System.err));\n", "            } else {\n", "                setWriter(createWriter(System.out));\n", "            }\n", "            super.activateOptions();\n", "        }\n", "\n", "        protected final void closeWriter() {\n", "\n", "        }\n", "    }\n", "\n", "    public static LayoutBuilder newLayoutBuilder() {\n", "        return new LayoutBuilder();\n", "    }\n", "\n", "    public static class LayoutBuilder {\n", "\n", "        private Layout layout;\n", "\n", "        public LayoutBuilder withSimpleLayout() {\n", "            layout = new SimpleLayout();\n", "            return this;\n", "        }\n", "\n", "        public LayoutBuilder withDefaultLayout() {\n", "            layout = new DefaultLayout();\n", "            return this;\n", "        }\n", "\n", "        public Layout build() {\n", "            if (layout == null) {\n", "                layout = new SimpleLayout();\n", "            }\n", "            return layout;\n", "        }\n", "    }\n", "\n", "    public static class SimpleLayout extends Layout {\n", "\n", "        @Override\n", "        public String format(LoggingEvent event) {\n", "\n", "            StringBuilder sb = new StringBuilder();\n", "            sb.append(event.getLevel().toString());\n", "            sb.append(\" - \");\n", "            sb.append(event.getRenderedMessage());\n", "            sb.append(\"\\r\\n\");\n", "            return sb.toString();\n", "        }\n", "\n", "        @Override\n", "        public boolean ignoresThrowable() {\n", "            return false;\n", "        }\n", "    }\n", "\n", "\n", "    /**\n", "     * %d{yyy-MM-dd HH:mm:ss,SSS} %p %c{1}%L - %m%n\n", "     */\n", "    public static class DefaultLayout extends Layout {\n", "        @Override\n", "        public String format(LoggingEvent event) {\n", "\n", "            StringBuilder sb = new StringBuilder();\n", "            SimpleDateFormat simpleDateFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss,SSS\");\n", "            String format = simpleDateFormat.format(new Date(event.timeStamp));\n", "            sb.append(format);\n", "            sb.append(\" \");\n", "            sb.append(event.getLevel());\n", "            sb.append(\" \");\n", "            sb.append(event.getLoggerName());\n", "            sb.append(\" - \");\n", "            sb.append(event.getMessage());\n", "            String[] throwableStr = event.getThrowableStr();\n", "            if (throwableStr != null) {\n", "                sb.append(\"\\r\\n\");\n", "                for (String s : throwableStr) {\n", "                    sb.append(s);\n", "                    sb.append(\"\\r\\n\");\n", "                }\n", "            }\n", "            sb.append(\"\\r\\n\");\n", "            return sb.toString();\n", "        }\n", "\n", "        @Override\n", "        public boolean ignoresThrowable() {\n", "            return false;\n", "        }\n", "    }\n", "}\n"], "test_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package org.apache.rocketmq.logging.inner;\n", "\n", "import org.apache.rocketmq.logging.BasicLoggerTest;\n", "import org.junit.Assert;\n", "import org.junit.Test;\n", "\n", "import java.io.ByteArrayOutputStream;\n", "import java.io.File;\n", "import java.io.FilenameFilter;\n", "import java.io.PrintStream;\n", "\n", "public class LoggingBuilderTest extends BasicLoggerTest {\n", "\n", "    @Test\n", "    public void testConsole() {\n", "        PrintStream out = System.out;\n", "        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n", "        System.setOut(new PrintStream(byteArrayOutputStream));\n", "\n", "        Appender consoleAppender = LoggingBuilder.newAppenderBuilder()\n", "            .withConsoleAppender(LoggingBuilder.SYSTEM_OUT)\n", "            .withLayout(LoggingBuilder.newLayoutBuilder().withDefaultLayout().build()).build();\n", "        consoleAppender.doAppend(loggingEvent);\n", "        String result = new String(byteArrayOutputStream.toByteArray());\n", "        System.setOut(out);\n", "\n", "        Assert.assertTrue(result.contains(loggingEvent.getMessage().toString()));\n", "\n", "    }\n", "\n", "    @Test\n", "    public void testFileAppender() throws InterruptedException {\n", "        String logFile = loggingDir + \"/file.log\";\n", "        Appender rollingFileAppender = LoggingBuilder.newAppenderBuilder().withAsync(false, 102400)\n", "            .withFileAppender(logFile).withLayout(LoggingBuilder.newLayoutBuilder().withDefaultLayout().build()).build();\n", "\n", "        for (int i = 0; i < 10; i++) {\n", "            rollingFileAppender.doAppend(loggingEvent);\n", "        }\n", "        rollingFileAppender.close();\n", "\n", "        File file = new File(logFile);\n", "        Assert.assertTrue(file.length() > 0);\n", "    }\n", "\n", "    @Test\n", "    public void testRollingFileAppender() throws InterruptedException {\n", "\n", "        String rollingFile = loggingDir + \"/rolling.log\";\n", "        Appender rollingFileAppender = LoggingBuilder.newAppenderBuilder().withAsync(false, 1024)\n", "            .withRollingFileAppender(rollingFile, \"1024\", 5)\n", "            .withLayout(LoggingBuilder.newLayoutBuilder().withDefaultLayout().build()).build();\n", "\n", "        for (int i = 0; i < 100; i++) {\n", "            rollingFileAppender.doAppend(loggingEvent);\n", "        }\n", "        rollingFileAppender.close();\n", "\n", "        int cc = 0;\n", "        for (int i = 0; i < 5; i++) {\n", "            File file;\n", "            if (i == 0) {\n", "                file = new File(rollingFile);\n", "            } else {\n", "                file = new File(rollingFile + \".\" + i);\n", "            }\n", "            if (file.exists() && file.length() > 0) {\n", "                cc += 1;\n", "            }\n", "        }\n", "        Assert.assertTrue(cc >= 2);\n", "    }\n", "\n", "    //@Test\n", "    public void testDailyRollingFileAppender() throws InterruptedException {\n", "        String rollingFile = loggingDir + \"/daily-rolling--222.log\";\n", "        Appender rollingFileAppender = LoggingBuilder.newAppenderBuilder().withAsync(false, 1024)\n", "            .withDailyFileRollingAppender(rollingFile, \"'.'yyyy-MM-dd_HH-mm-ss-SSS\")\n", "            .withLayout(LoggingBuilder.newLayoutBuilder().withDefaultLayout().build()).build();\n", "\n", "        for (int i = 0; i < 100; i++) {\n", "            rollingFileAppender.doAppend(loggingEvent);\n", "        }\n", "\n", "        rollingFileAppender.close();\n", "\n", "        File file = new File(loggingDir);\n", "        String[] list = file.list(new FilenameFilter() {\n", "            @Override\n", "            public boolean accept(File dir, String name) {\n", "                return name.startsWith(\"daily-rolling--222.log\");\n", "            }\n", "        });\n", "        Assert.assertTrue(list.length > 0);\n", "    }\n", "}\n"], "method_lines_dic": {"LoggingBuilder::::newAppenderBuilder()": [52, 54], "LoggingBuilder.AppenderBuilder::::withLayout(org.apache.rocketmq.logging.inner.Layout)": [65, 68], "LoggingBuilder.AppenderBuilder::::withName(java.lang.String)": [70, 73], "LoggingBuilder.AppenderBuilder::::withConsoleAppender(java.lang.String)": [75, 81], "LoggingBuilder.AppenderBuilder::::withFileAppender(java.lang.String)": [83, 93], "LoggingBuilder.AppenderBuilder::::withRollingFileAppender(java.lang.String,java.lang.String,int)": [95, 107], "LoggingBuilder.AppenderBuilder::::withDailyFileRollingAppender(java.lang.String,java.lang.String)": [109, 120], "LoggingBuilder.AppenderBuilder::::withAsync(boolean,int)": [122, 128], "LoggingBuilder.AppenderBuilder::::build()": [130, 140], "LoggingBuilder.AsyncAppender::::addAppender(org.apache.rocketmq.logging.inner.Appender)": [170, 174], "LoggingBuilder.AsyncAppender::::append(org.apache.rocketmq.logging.inner.LoggingEvent)": [176, 228], "LoggingBuilder.AsyncAppender::::close()": [230, 257], "LoggingBuilder.AsyncAppender::::getAllAppenders()": [259, 263], "LoggingBuilder.AsyncAppender::::getAppender(java.lang.String)": [265, 269], "LoggingBuilder.AsyncAppender::::isAttached(org.apache.rocketmq.logging.inner.Appender)": [271, 275], "LoggingBuilder.AsyncAppender::::removeAllAppenders()": [277, 281], "LoggingBuilder.AsyncAppender::::removeAppender(org.apache.rocketmq.logging.inner.Appender)": [283, 287], "LoggingBuilder.AsyncAppender::::removeAppender(java.lang.String)": [289, 293], "LoggingBuilder.AsyncAppender::::setBufferSize(int)": [295, 304], "LoggingBuilder.AsyncAppender::::getBufferSize()": [306, 308], "LoggingBuilder.AsyncAppender::::setBlocking(boolean)": [310, 315], "LoggingBuilder.AsyncAppender::::getBlocking()": [317, 319], "LoggingBuilder.AsyncAppender.DiscardSummary::::add(org.apache.rocketmq.logging.inner.LoggingEvent)": [332, 337], "LoggingBuilder.AsyncAppender.DiscardSummary::::createEvent()": [339, 351], "LoggingBuilder.AsyncAppender.Dispatcher::::run()": [374, 418], "LoggingBuilder.QuietWriter::::write(java.lang.String)": [431, 440], "LoggingBuilder.QuietWriter::::flush()": [442, 449], "LoggingBuilder.WriterAppender::::setImmediateFlush(boolean)": [466, 468], "LoggingBuilder.WriterAppender::::getImmediateFlush()": [471, 473], "LoggingBuilder.WriterAppender::::activateOptions()": [475, 476], "LoggingBuilder.WriterAppender::::append(org.apache.rocketmq.logging.inner.LoggingEvent)": [479, 484], "LoggingBuilder.WriterAppender::::checkEntryConditions()": [486, 503], "LoggingBuilder.WriterAppender::::close()": [505, 512], "LoggingBuilder.WriterAppender::::closeWriter()": [514, 522], "LoggingBuilder.WriterAppender::::createWriter(java.io.OutputStream)": [524, 540], "LoggingBuilder.WriterAppender::::getEncoding()": [542, 544], "LoggingBuilder.WriterAppender::::setEncoding(java.lang.String)": [546, 548], "LoggingBuilder.WriterAppender::::setWriter(java.io.Writer)": [551, 555], "LoggingBuilder.WriterAppender::::subAppend(org.apache.rocketmq.logging.inner.LoggingEvent)": [557, 573], "LoggingBuilder.WriterAppender::::reset()": [575, 578], "LoggingBuilder.WriterAppender::::writeFooter()": [580, 588], "LoggingBuilder.WriterAppender::::writeHeader()": [590, 597], "LoggingBuilder.WriterAppender::::shouldFlush(org.apache.rocketmq.logging.inner.LoggingEvent)": [599, 601], "LoggingBuilder.FileAppender::::setFile(java.lang.String)": [624, 626], "LoggingBuilder.FileAppender::::getAppend()": [628, 630], "LoggingBuilder.FileAppender::::getFile()": [632, 634], "LoggingBuilder.FileAppender::::activateOptions()": [636, 648], "LoggingBuilder.FileAppender::::closeFile()": [650, 661], "LoggingBuilder.FileAppender::::getBufferedIO()": [663, 665], "LoggingBuilder.FileAppender::::getBufferSize()": [667, 669], "LoggingBuilder.FileAppender::::setAppend(boolean)": [671, 673], "LoggingBuilder.FileAppender::::setBufferedIO(boolean)": [675, 680], "LoggingBuilder.FileAppender::::setBufferSize(int)": [682, 684], "LoggingBuilder.FileAppender::::setFile(java.lang.String,boolean,boolean,int)": [686, 722], "LoggingBuilder.FileAppender::::setQWForFiles(java.io.Writer)": [724, 726], "LoggingBuilder.FileAppender::::reset()": [728, 732], "LoggingBuilder.RollingFileAppender::::getMaxBackupIndex()": [748, 750], "LoggingBuilder.RollingFileAppender::::getMaximumFileSize()": [752, 754], "LoggingBuilder.RollingFileAppender::::rollOver()": [756, 816], "LoggingBuilder.RollingFileAppender::::setFile(java.lang.String,boolean,boolean,int)": [818, 825], "LoggingBuilder.RollingFileAppender::::setMaxBackupIndex(int)": [827, 829], "LoggingBuilder.RollingFileAppender::::setMaximumFileSize(long)": [831, 833], "LoggingBuilder.RollingFileAppender::::setQWForFiles(java.io.Writer)": [835, 837], "LoggingBuilder.RollingFileAppender::::subAppend(org.apache.rocketmq.logging.inner.LoggingEvent)": [839, 847], "LoggingBuilder.RollingFileAppender.CountingQuietWriter::::write(java.lang.String)": [857, 864], "LoggingBuilder.RollingFileAppender.CountingQuietWriter::::getCount()": [866, 868], "LoggingBuilder.RollingFileAppender.CountingQuietWriter::::setCount(long)": [870, 872], "LoggingBuilder.DailyRollingFileAppender::::setDatePattern(java.lang.String)": [908, 910], "LoggingBuilder.DailyRollingFileAppender::::getDatePattern()": [912, 914], "LoggingBuilder.DailyRollingFileAppender::::activateOptions()": [916, 930], "LoggingBuilder.DailyRollingFileAppender::::printPeriodicity(int)": [932, 955], "LoggingBuilder.DailyRollingFileAppender::::computeCheckPeriod()": [957, 975], "LoggingBuilder.DailyRollingFileAppender::::rollOver()": [977, 1010], "LoggingBuilder.DailyRollingFileAppender::::subAppend(org.apache.rocketmq.logging.inner.LoggingEvent)": [1012, 1027], "LoggingBuilder.RollingCalendar::::setType(int)": [1043, 1045], "LoggingBuilder.RollingCalendar::::getNextCheckMillis(java.util.Date)": [1047, 1049], "LoggingBuilder.RollingCalendar::::getNextCheckDate(java.util.Date)": [1051, 1105], "LoggingBuilder.ConsoleAppender::::setTarget(java.lang.String)": [1115, 1125], "LoggingBuilder.ConsoleAppender::::getTarget()": [1127, 1129], "LoggingBuilder.ConsoleAppender::::targetWarn(java.lang.String)": [1131, 1134], "LoggingBuilder.ConsoleAppender::::activateOptions()": [1136, 1143], "LoggingBuilder.ConsoleAppender::::closeWriter()": [1145, 1147], "LoggingBuilder::::newLayoutBuilder()": [1150, 1152], "LoggingBuilder.LayoutBuilder::::withSimpleLayout()": [1158, 1161], "LoggingBuilder.LayoutBuilder::::withDefaultLayout()": [1163, 1166], "LoggingBuilder.LayoutBuilder::::build()": [1168, 1173], "LoggingBuilder.SimpleLayout::::format(org.apache.rocketmq.logging.inner.LoggingEvent)": [1178, 1187], "LoggingBuilder.SimpleLayout::::ignoresThrowable()": [1189, 1192], "LoggingBuilder.DefaultLayout::::format(org.apache.rocketmq.logging.inner.LoggingEvent)": [1200, 1223], "LoggingBuilder.DefaultLayout::::ignoresThrowable()": [1225, 1228]}, "test_method_lines_dic": {"LoggingBuilderTest::::testConsole()": [31, 46], "LoggingBuilderTest::::testFileAppender()": [48, 61], "LoggingBuilderTest::::testRollingFileAppender()": [63, 89], "LoggingBuilderTest::::testDailyRollingFileAppender()": [92, 112]}, "reverse_method_lines_dic": {"52": "LoggingBuilder::::newAppenderBuilder()", "53": "LoggingBuilder::::newAppenderBuilder()", "54": "LoggingBuilder::::newAppenderBuilder()", "65": "LoggingBuilder.AppenderBuilder::::withLayout(org.apache.rocketmq.logging.inner.Layout)", "66": "LoggingBuilder.AppenderBuilder::::withLayout(org.apache.rocketmq.logging.inner.Layout)", "67": "LoggingBuilder.AppenderBuilder::::withLayout(org.apache.rocketmq.logging.inner.Layout)", "68": "LoggingBuilder.AppenderBuilder::::withLayout(org.apache.rocketmq.logging.inner.Layout)", "70": "LoggingBuilder.AppenderBuilder::::withName(java.lang.String)", "71": "LoggingBuilder.AppenderBuilder::::withName(java.lang.String)", "72": "LoggingBuilder.AppenderBuilder::::withName(java.lang.String)", "73": "LoggingBuilder.AppenderBuilder::::withName(java.lang.String)", "75": "LoggingBuilder.AppenderBuilder::::withConsoleAppender(java.lang.String)", "76": "LoggingBuilder.AppenderBuilder::::withConsoleAppender(java.lang.String)", "77": "LoggingBuilder.AppenderBuilder::::withConsoleAppender(java.lang.String)", "78": "LoggingBuilder.AppenderBuilder::::withConsoleAppender(java.lang.String)", "79": "LoggingBuilder.AppenderBuilder::::withConsoleAppender(java.lang.String)", "80": "LoggingBuilder.AppenderBuilder::::withConsoleAppender(java.lang.String)", "81": "LoggingBuilder.AppenderBuilder::::withConsoleAppender(java.lang.String)", "83": "LoggingBuilder.AppenderBuilder::::withFileAppender(java.lang.String)", "84": "LoggingBuilder.AppenderBuilder::::withFileAppender(java.lang.String)", "85": "LoggingBuilder.AppenderBuilder::::withFileAppender(java.lang.String)", "86": "LoggingBuilder.AppenderBuilder::::withFileAppender(java.lang.String)", "87": "LoggingBuilder.AppenderBuilder::::withFileAppender(java.lang.String)", "88": "LoggingBuilder.AppenderBuilder::::withFileAppender(java.lang.String)", "89": "LoggingBuilder.AppenderBuilder::::withFileAppender(java.lang.String)", "90": "LoggingBuilder.AppenderBuilder::::withFileAppender(java.lang.String)", "91": "LoggingBuilder.AppenderBuilder::::withFileAppender(java.lang.String)", "92": "LoggingBuilder.AppenderBuilder::::withFileAppender(java.lang.String)", "93": "LoggingBuilder.AppenderBuilder::::withFileAppender(java.lang.String)", "95": "LoggingBuilder.AppenderBuilder::::withRollingFileAppender(java.lang.String,java.lang.String,int)", "96": "LoggingBuilder.AppenderBuilder::::withRollingFileAppender(java.lang.String,java.lang.String,int)", "97": "LoggingBuilder.AppenderBuilder::::withRollingFileAppender(java.lang.String,java.lang.String,int)", "98": "LoggingBuilder.AppenderBuilder::::withRollingFileAppender(java.lang.String,java.lang.String,int)", "99": "LoggingBuilder.AppenderBuilder::::withRollingFileAppender(java.lang.String,java.lang.String,int)", "100": "LoggingBuilder.AppenderBuilder::::withRollingFileAppender(java.lang.String,java.lang.String,int)", "101": "LoggingBuilder.AppenderBuilder::::withRollingFileAppender(java.lang.String,java.lang.String,int)", "102": "LoggingBuilder.AppenderBuilder::::withRollingFileAppender(java.lang.String,java.lang.String,int)", "103": "LoggingBuilder.AppenderBuilder::::withRollingFileAppender(java.lang.String,java.lang.String,int)", "104": "LoggingBuilder.AppenderBuilder::::withRollingFileAppender(java.lang.String,java.lang.String,int)", "105": "LoggingBuilder.AppenderBuilder::::withRollingFileAppender(java.lang.String,java.lang.String,int)", "106": "LoggingBuilder.AppenderBuilder::::withRollingFileAppender(java.lang.String,java.lang.String,int)", "107": "LoggingBuilder.AppenderBuilder::::withRollingFileAppender(java.lang.String,java.lang.String,int)", "109": "LoggingBuilder.AppenderBuilder::::withDailyFileRollingAppender(java.lang.String,java.lang.String)", "110": "LoggingBuilder.AppenderBuilder::::withDailyFileRollingAppender(java.lang.String,java.lang.String)", "111": "LoggingBuilder.AppenderBuilder::::withDailyFileRollingAppender(java.lang.String,java.lang.String)", "112": "LoggingBuilder.AppenderBuilder::::withDailyFileRollingAppender(java.lang.String,java.lang.String)", "113": "LoggingBuilder.AppenderBuilder::::withDailyFileRollingAppender(java.lang.String,java.lang.String)", "114": "LoggingBuilder.AppenderBuilder::::withDailyFileRollingAppender(java.lang.String,java.lang.String)", "115": "LoggingBuilder.AppenderBuilder::::withDailyFileRollingAppender(java.lang.String,java.lang.String)", "116": "LoggingBuilder.AppenderBuilder::::withDailyFileRollingAppender(java.lang.String,java.lang.String)", "117": "LoggingBuilder.AppenderBuilder::::withDailyFileRollingAppender(java.lang.String,java.lang.String)", "118": "LoggingBuilder.AppenderBuilder::::withDailyFileRollingAppender(java.lang.String,java.lang.String)", "119": "LoggingBuilder.AppenderBuilder::::withDailyFileRollingAppender(java.lang.String,java.lang.String)", "120": "LoggingBuilder.AppenderBuilder::::withDailyFileRollingAppender(java.lang.String,java.lang.String)", "122": "LoggingBuilder.AppenderBuilder::::withAsync(boolean,int)", "123": "LoggingBuilder.AppenderBuilder::::withAsync(boolean,int)", "124": "LoggingBuilder.AppenderBuilder::::withAsync(boolean,int)", "125": "LoggingBuilder.AppenderBuilder::::withAsync(boolean,int)", "126": "LoggingBuilder.AppenderBuilder::::withAsync(boolean,int)", "127": "LoggingBuilder.AppenderBuilder::::withAsync(boolean,int)", "128": "LoggingBuilder.AppenderBuilder::::withAsync(boolean,int)", "130": "LoggingBuilder.AppenderBuilder::::build()", "131": "LoggingBuilder.AppenderBuilder::::build()", "132": "LoggingBuilder.AppenderBuilder::::build()", "133": "LoggingBuilder.AppenderBuilder::::build()", "134": "LoggingBuilder.AppenderBuilder::::build()", "135": "LoggingBuilder.AppenderBuilder::::build()", "136": "LoggingBuilder.AppenderBuilder::::build()", "137": "LoggingBuilder.AppenderBuilder::::build()", "138": "LoggingBuilder.AppenderBuilder::::build()", "139": "LoggingBuilder.AppenderBuilder::::build()", "140": "LoggingBuilder.AppenderBuilder::::build()", "170": "LoggingBuilder.AsyncAppender::::addAppender(org.apache.rocketmq.logging.inner.Appender)", "171": "LoggingBuilder.AsyncAppender::::addAppender(org.apache.rocketmq.logging.inner.Appender)", "172": "LoggingBuilder.AsyncAppender::::addAppender(org.apache.rocketmq.logging.inner.Appender)", "173": "LoggingBuilder.AsyncAppender::::addAppender(org.apache.rocketmq.logging.inner.Appender)", "174": "LoggingBuilder.AsyncAppender::::addAppender(org.apache.rocketmq.logging.inner.Appender)", "176": "LoggingBuilder.AsyncAppender::::append(org.apache.rocketmq.logging.inner.LoggingEvent)", "177": "LoggingBuilder.AsyncAppender::::append(org.apache.rocketmq.logging.inner.LoggingEvent)", "178": "LoggingBuilder.AsyncAppender::::append(org.apache.rocketmq.logging.inner.LoggingEvent)", "179": "LoggingBuilder.AsyncAppender::::append(org.apache.rocketmq.logging.inner.LoggingEvent)", "180": "LoggingBuilder.AsyncAppender::::append(org.apache.rocketmq.logging.inner.LoggingEvent)", "181": "LoggingBuilder.AsyncAppender::::append(org.apache.rocketmq.logging.inner.LoggingEvent)", "182": "LoggingBuilder.AsyncAppender::::append(org.apache.rocketmq.logging.inner.LoggingEvent)", "183": "LoggingBuilder.AsyncAppender::::append(org.apache.rocketmq.logging.inner.LoggingEvent)", "184": "LoggingBuilder.AsyncAppender::::append(org.apache.rocketmq.logging.inner.LoggingEvent)", "185": "LoggingBuilder.AsyncAppender::::append(org.apache.rocketmq.logging.inner.LoggingEvent)", "186": "LoggingBuilder.AsyncAppender::::append(org.apache.rocketmq.logging.inner.LoggingEvent)", "187": "LoggingBuilder.AsyncAppender::::append(org.apache.rocketmq.logging.inner.LoggingEvent)", "188": "LoggingBuilder.AsyncAppender::::append(org.apache.rocketmq.logging.inner.LoggingEvent)", "189": "LoggingBuilder.AsyncAppender::::append(org.apache.rocketmq.logging.inner.LoggingEvent)", "190": "LoggingBuilder.AsyncAppender::::append(org.apache.rocketmq.logging.inner.LoggingEvent)", "191": "LoggingBuilder.AsyncAppender::::append(org.apache.rocketmq.logging.inner.LoggingEvent)", "192": "LoggingBuilder.AsyncAppender::::append(org.apache.rocketmq.logging.inner.LoggingEvent)", "193": "LoggingBuilder.AsyncAppender::::append(org.apache.rocketmq.logging.inner.LoggingEvent)", "194": "LoggingBuilder.AsyncAppender::::append(org.apache.rocketmq.logging.inner.LoggingEvent)", "195": "LoggingBuilder.AsyncAppender::::append(org.apache.rocketmq.logging.inner.LoggingEvent)", "196": "LoggingBuilder.AsyncAppender::::append(org.apache.rocketmq.logging.inner.LoggingEvent)", "197": "LoggingBuilder.AsyncAppender::::append(org.apache.rocketmq.logging.inner.LoggingEvent)", "198": "LoggingBuilder.AsyncAppender::::append(org.apache.rocketmq.logging.inner.LoggingEvent)", "199": "LoggingBuilder.AsyncAppender::::append(org.apache.rocketmq.logging.inner.LoggingEvent)", "200": "LoggingBuilder.AsyncAppender::::append(org.apache.rocketmq.logging.inner.LoggingEvent)", "201": "LoggingBuilder.AsyncAppender::::append(org.apache.rocketmq.logging.inner.LoggingEvent)", "202": "LoggingBuilder.AsyncAppender::::append(org.apache.rocketmq.logging.inner.LoggingEvent)", "203": "LoggingBuilder.AsyncAppender::::append(org.apache.rocketmq.logging.inner.LoggingEvent)", "204": "LoggingBuilder.AsyncAppender::::append(org.apache.rocketmq.logging.inner.LoggingEvent)", "205": "LoggingBuilder.AsyncAppender::::append(org.apache.rocketmq.logging.inner.LoggingEvent)", "206": "LoggingBuilder.AsyncAppender::::append(org.apache.rocketmq.logging.inner.LoggingEvent)", "207": "LoggingBuilder.AsyncAppender::::append(org.apache.rocketmq.logging.inner.LoggingEvent)", "208": "LoggingBuilder.AsyncAppender::::append(org.apache.rocketmq.logging.inner.LoggingEvent)", "209": "LoggingBuilder.AsyncAppender::::append(org.apache.rocketmq.logging.inner.LoggingEvent)", "210": "LoggingBuilder.AsyncAppender::::append(org.apache.rocketmq.logging.inner.LoggingEvent)", "211": "LoggingBuilder.AsyncAppender::::append(org.apache.rocketmq.logging.inner.LoggingEvent)", "212": "LoggingBuilder.AsyncAppender::::append(org.apache.rocketmq.logging.inner.LoggingEvent)", "213": "LoggingBuilder.AsyncAppender::::append(org.apache.rocketmq.logging.inner.LoggingEvent)", "214": "LoggingBuilder.AsyncAppender::::append(org.apache.rocketmq.logging.inner.LoggingEvent)", "215": "LoggingBuilder.AsyncAppender::::append(org.apache.rocketmq.logging.inner.LoggingEvent)", "216": "LoggingBuilder.AsyncAppender::::append(org.apache.rocketmq.logging.inner.LoggingEvent)", "217": "LoggingBuilder.AsyncAppender::::append(org.apache.rocketmq.logging.inner.LoggingEvent)", "218": "LoggingBuilder.AsyncAppender::::append(org.apache.rocketmq.logging.inner.LoggingEvent)", "219": "LoggingBuilder.AsyncAppender::::append(org.apache.rocketmq.logging.inner.LoggingEvent)", "220": "LoggingBuilder.AsyncAppender::::append(org.apache.rocketmq.logging.inner.LoggingEvent)", "221": "LoggingBuilder.AsyncAppender::::append(org.apache.rocketmq.logging.inner.LoggingEvent)", "222": "LoggingBuilder.AsyncAppender::::append(org.apache.rocketmq.logging.inner.LoggingEvent)", "223": "LoggingBuilder.AsyncAppender::::append(org.apache.rocketmq.logging.inner.LoggingEvent)", "224": "LoggingBuilder.AsyncAppender::::append(org.apache.rocketmq.logging.inner.LoggingEvent)", "225": "LoggingBuilder.AsyncAppender::::append(org.apache.rocketmq.logging.inner.LoggingEvent)", "226": "LoggingBuilder.AsyncAppender::::append(org.apache.rocketmq.logging.inner.LoggingEvent)", "227": "LoggingBuilder.AsyncAppender::::append(org.apache.rocketmq.logging.inner.LoggingEvent)", "228": "LoggingBuilder.AsyncAppender::::append(org.apache.rocketmq.logging.inner.LoggingEvent)", "230": "LoggingBuilder.AsyncAppender::::close()", "231": "LoggingBuilder.AsyncAppender::::close()", "232": "LoggingBuilder.AsyncAppender::::close()", "233": "LoggingBuilder.AsyncAppender::::close()", "234": "LoggingBuilder.AsyncAppender::::close()", "235": "LoggingBuilder.AsyncAppender::::close()", "236": "LoggingBuilder.AsyncAppender::::close()", "237": "LoggingBuilder.AsyncAppender::::close()", "238": "LoggingBuilder.AsyncAppender::::close()", "239": "LoggingBuilder.AsyncAppender::::close()", "240": "LoggingBuilder.AsyncAppender::::close()", "241": "LoggingBuilder.AsyncAppender::::close()", "242": "LoggingBuilder.AsyncAppender::::close()", "243": "LoggingBuilder.AsyncAppender::::close()", "244": "LoggingBuilder.AsyncAppender::::close()", "245": "LoggingBuilder.AsyncAppender::::close()", "246": "LoggingBuilder.AsyncAppender::::close()", "247": "LoggingBuilder.AsyncAppender::::close()", "248": "LoggingBuilder.AsyncAppender::::close()", "249": "LoggingBuilder.AsyncAppender::::close()", "250": "LoggingBuilder.AsyncAppender::::close()", "251": "LoggingBuilder.AsyncAppender::::close()", "252": "LoggingBuilder.AsyncAppender::::close()", "253": "LoggingBuilder.AsyncAppender::::close()", "254": "LoggingBuilder.AsyncAppender::::close()", "255": "LoggingBuilder.AsyncAppender::::close()", "256": "LoggingBuilder.AsyncAppender::::close()", "257": "LoggingBuilder.AsyncAppender::::close()", "259": "LoggingBuilder.AsyncAppender::::getAllAppenders()", "260": "LoggingBuilder.AsyncAppender::::getAllAppenders()", "261": "LoggingBuilder.AsyncAppender::::getAllAppenders()", "262": "LoggingBuilder.AsyncAppender::::getAllAppenders()", "263": "LoggingBuilder.AsyncAppender::::getAllAppenders()", "265": "LoggingBuilder.AsyncAppender::::getAppender(java.lang.String)", "266": "LoggingBuilder.AsyncAppender::::getAppender(java.lang.String)", "267": "LoggingBuilder.AsyncAppender::::getAppender(java.lang.String)", "268": "LoggingBuilder.AsyncAppender::::getAppender(java.lang.String)", "269": "LoggingBuilder.AsyncAppender::::getAppender(java.lang.String)", "271": "LoggingBuilder.AsyncAppender::::isAttached(org.apache.rocketmq.logging.inner.Appender)", "272": "LoggingBuilder.AsyncAppender::::isAttached(org.apache.rocketmq.logging.inner.Appender)", "273": "LoggingBuilder.AsyncAppender::::isAttached(org.apache.rocketmq.logging.inner.Appender)", "274": "LoggingBuilder.AsyncAppender::::isAttached(org.apache.rocketmq.logging.inner.Appender)", "275": "LoggingBuilder.AsyncAppender::::isAttached(org.apache.rocketmq.logging.inner.Appender)", "277": "LoggingBuilder.AsyncAppender::::removeAllAppenders()", "278": "LoggingBuilder.AsyncAppender::::removeAllAppenders()", "279": "LoggingBuilder.AsyncAppender::::removeAllAppenders()", "280": "LoggingBuilder.AsyncAppender::::removeAllAppenders()", "281": "LoggingBuilder.AsyncAppender::::removeAllAppenders()", "283": "LoggingBuilder.AsyncAppender::::removeAppender(org.apache.rocketmq.logging.inner.Appender)", "284": "LoggingBuilder.AsyncAppender::::removeAppender(org.apache.rocketmq.logging.inner.Appender)", "285": "LoggingBuilder.AsyncAppender::::removeAppender(org.apache.rocketmq.logging.inner.Appender)", "286": "LoggingBuilder.AsyncAppender::::removeAppender(org.apache.rocketmq.logging.inner.Appender)", "287": "LoggingBuilder.AsyncAppender::::removeAppender(org.apache.rocketmq.logging.inner.Appender)", "289": "LoggingBuilder.AsyncAppender::::removeAppender(java.lang.String)", "290": "LoggingBuilder.AsyncAppender::::removeAppender(java.lang.String)", "291": "LoggingBuilder.AsyncAppender::::removeAppender(java.lang.String)", "292": "LoggingBuilder.AsyncAppender::::removeAppender(java.lang.String)", "293": "LoggingBuilder.AsyncAppender::::removeAppender(java.lang.String)", "295": "LoggingBuilder.AsyncAppender::::setBufferSize(int)", "296": "LoggingBuilder.AsyncAppender::::setBufferSize(int)", "297": "LoggingBuilder.AsyncAppender::::setBufferSize(int)", "298": "LoggingBuilder.AsyncAppender::::setBufferSize(int)", "299": "LoggingBuilder.AsyncAppender::::setBufferSize(int)", "300": "LoggingBuilder.AsyncAppender::::setBufferSize(int)", "301": "LoggingBuilder.AsyncAppender::::setBufferSize(int)", "302": "LoggingBuilder.AsyncAppender::::setBufferSize(int)", "303": "LoggingBuilder.AsyncAppender::::setBufferSize(int)", "304": "LoggingBuilder.AsyncAppender::::setBufferSize(int)", "306": "LoggingBuilder.AsyncAppender::::getBufferSize()", "307": "LoggingBuilder.AsyncAppender::::getBufferSize()", "308": "LoggingBuilder.AsyncAppender::::getBufferSize()", "310": "LoggingBuilder.AsyncAppender::::setBlocking(boolean)", "311": "LoggingBuilder.AsyncAppender::::setBlocking(boolean)", "312": "LoggingBuilder.AsyncAppender::::setBlocking(boolean)", "313": "LoggingBuilder.AsyncAppender::::setBlocking(boolean)", "314": "LoggingBuilder.AsyncAppender::::setBlocking(boolean)", "315": "LoggingBuilder.AsyncAppender::::setBlocking(boolean)", "317": "LoggingBuilder.AsyncAppender::::getBlocking()", "318": "LoggingBuilder.AsyncAppender::::getBlocking()", "319": "LoggingBuilder.AsyncAppender::::getBlocking()", "332": "LoggingBuilder.AsyncAppender.DiscardSummary::::add(org.apache.rocketmq.logging.inner.LoggingEvent)", "333": "LoggingBuilder.AsyncAppender.DiscardSummary::::add(org.apache.rocketmq.logging.inner.LoggingEvent)", "334": "LoggingBuilder.AsyncAppender.DiscardSummary::::add(org.apache.rocketmq.logging.inner.LoggingEvent)", "335": "LoggingBuilder.AsyncAppender.DiscardSummary::::add(org.apache.rocketmq.logging.inner.LoggingEvent)", "336": "LoggingBuilder.AsyncAppender.DiscardSummary::::add(org.apache.rocketmq.logging.inner.LoggingEvent)", "337": "LoggingBuilder.AsyncAppender.DiscardSummary::::add(org.apache.rocketmq.logging.inner.LoggingEvent)", "339": "LoggingBuilder.AsyncAppender.DiscardSummary::::createEvent()", "340": "LoggingBuilder.AsyncAppender.DiscardSummary::::createEvent()", "341": "LoggingBuilder.AsyncAppender.DiscardSummary::::createEvent()", "342": "LoggingBuilder.AsyncAppender.DiscardSummary::::createEvent()", "343": "LoggingBuilder.AsyncAppender.DiscardSummary::::createEvent()", "344": "LoggingBuilder.AsyncAppender.DiscardSummary::::createEvent()", "345": "LoggingBuilder.AsyncAppender.DiscardSummary::::createEvent()", "346": "LoggingBuilder.AsyncAppender.DiscardSummary::::createEvent()", "347": "LoggingBuilder.AsyncAppender.DiscardSummary::::createEvent()", "348": "LoggingBuilder.AsyncAppender.DiscardSummary::::createEvent()", "349": "LoggingBuilder.AsyncAppender.DiscardSummary::::createEvent()", "350": "LoggingBuilder.AsyncAppender.DiscardSummary::::createEvent()", "351": "LoggingBuilder.AsyncAppender.DiscardSummary::::createEvent()", "374": "LoggingBuilder.AsyncAppender.Dispatcher::::run()", "375": "LoggingBuilder.AsyncAppender.Dispatcher::::run()", "376": "LoggingBuilder.AsyncAppender.Dispatcher::::run()", "377": "LoggingBuilder.AsyncAppender.Dispatcher::::run()", "378": "LoggingBuilder.AsyncAppender.Dispatcher::::run()", "379": "LoggingBuilder.AsyncAppender.Dispatcher::::run()", "380": "LoggingBuilder.AsyncAppender.Dispatcher::::run()", "381": "LoggingBuilder.AsyncAppender.Dispatcher::::run()", "382": "LoggingBuilder.AsyncAppender.Dispatcher::::run()", "383": "LoggingBuilder.AsyncAppender.Dispatcher::::run()", "384": "LoggingBuilder.AsyncAppender.Dispatcher::::run()", "385": "LoggingBuilder.AsyncAppender.Dispatcher::::run()", "386": "LoggingBuilder.AsyncAppender.Dispatcher::::run()", "387": "LoggingBuilder.AsyncAppender.Dispatcher::::run()", "388": "LoggingBuilder.AsyncAppender.Dispatcher::::run()", "389": "LoggingBuilder.AsyncAppender.Dispatcher::::run()", "390": "LoggingBuilder.AsyncAppender.Dispatcher::::run()", "391": "LoggingBuilder.AsyncAppender.Dispatcher::::run()", "392": "LoggingBuilder.AsyncAppender.Dispatcher::::run()", "393": "LoggingBuilder.AsyncAppender.Dispatcher::::run()", "394": "LoggingBuilder.AsyncAppender.Dispatcher::::run()", "395": "LoggingBuilder.AsyncAppender.Dispatcher::::run()", "396": "LoggingBuilder.AsyncAppender.Dispatcher::::run()", "397": "LoggingBuilder.AsyncAppender.Dispatcher::::run()", "398": "LoggingBuilder.AsyncAppender.Dispatcher::::run()", "399": "LoggingBuilder.AsyncAppender.Dispatcher::::run()", "400": "LoggingBuilder.AsyncAppender.Dispatcher::::run()", "401": "LoggingBuilder.AsyncAppender.Dispatcher::::run()", "402": "LoggingBuilder.AsyncAppender.Dispatcher::::run()", "403": "LoggingBuilder.AsyncAppender.Dispatcher::::run()", "404": "LoggingBuilder.AsyncAppender.Dispatcher::::run()", "405": "LoggingBuilder.AsyncAppender.Dispatcher::::run()", "406": "LoggingBuilder.AsyncAppender.Dispatcher::::run()", "407": "LoggingBuilder.AsyncAppender.Dispatcher::::run()", "408": "LoggingBuilder.AsyncAppender.Dispatcher::::run()", "409": "LoggingBuilder.AsyncAppender.Dispatcher::::run()", "410": "LoggingBuilder.AsyncAppender.Dispatcher::::run()", "411": "LoggingBuilder.AsyncAppender.Dispatcher::::run()", "412": "LoggingBuilder.AsyncAppender.Dispatcher::::run()", "413": "LoggingBuilder.AsyncAppender.Dispatcher::::run()", "414": "LoggingBuilder.AsyncAppender.Dispatcher::::run()", "415": "LoggingBuilder.AsyncAppender.Dispatcher::::run()", "416": "LoggingBuilder.AsyncAppender.Dispatcher::::run()", "417": "LoggingBuilder.AsyncAppender.Dispatcher::::run()", "418": "LoggingBuilder.AsyncAppender.Dispatcher::::run()", "431": "LoggingBuilder.QuietWriter::::write(java.lang.String)", "432": "LoggingBuilder.QuietWriter::::write(java.lang.String)", "433": "LoggingBuilder.QuietWriter::::write(java.lang.String)", "434": "LoggingBuilder.QuietWriter::::write(java.lang.String)", "435": "LoggingBuilder.QuietWriter::::write(java.lang.String)", "436": "LoggingBuilder.QuietWriter::::write(java.lang.String)", "437": "LoggingBuilder.QuietWriter::::write(java.lang.String)", "438": "LoggingBuilder.QuietWriter::::write(java.lang.String)", "439": "LoggingBuilder.QuietWriter::::write(java.lang.String)", "440": "LoggingBuilder.QuietWriter::::write(java.lang.String)", "442": "LoggingBuilder.QuietWriter::::flush()", "443": "LoggingBuilder.QuietWriter::::flush()", "444": "LoggingBuilder.QuietWriter::::flush()", "445": "LoggingBuilder.QuietWriter::::flush()", "446": "LoggingBuilder.QuietWriter::::flush()", "447": "LoggingBuilder.QuietWriter::::flush()", "448": "LoggingBuilder.QuietWriter::::flush()", "449": "LoggingBuilder.QuietWriter::::flush()", "466": "LoggingBuilder.WriterAppender::::setImmediateFlush(boolean)", "467": "LoggingBuilder.WriterAppender::::setImmediateFlush(boolean)", "468": "LoggingBuilder.WriterAppender::::setImmediateFlush(boolean)", "471": "LoggingBuilder.WriterAppender::::getImmediateFlush()", "472": "LoggingBuilder.WriterAppender::::getImmediateFlush()", "473": "LoggingBuilder.WriterAppender::::getImmediateFlush()", "475": "LoggingBuilder.WriterAppender::::activateOptions()", "476": "LoggingBuilder.WriterAppender::::activateOptions()", "479": "LoggingBuilder.WriterAppender::::append(org.apache.rocketmq.logging.inner.LoggingEvent)", "480": "LoggingBuilder.WriterAppender::::append(org.apache.rocketmq.logging.inner.LoggingEvent)", "481": "LoggingBuilder.WriterAppender::::append(org.apache.rocketmq.logging.inner.LoggingEvent)", "482": "LoggingBuilder.WriterAppender::::append(org.apache.rocketmq.logging.inner.LoggingEvent)", "483": "LoggingBuilder.WriterAppender::::append(org.apache.rocketmq.logging.inner.LoggingEvent)", "484": "LoggingBuilder.WriterAppender::::append(org.apache.rocketmq.logging.inner.LoggingEvent)", "486": "LoggingBuilder.WriterAppender::::checkEntryConditions()", "487": "LoggingBuilder.WriterAppender::::checkEntryConditions()", "488": "LoggingBuilder.WriterAppender::::checkEntryConditions()", "489": "LoggingBuilder.WriterAppender::::checkEntryConditions()", "490": "LoggingBuilder.WriterAppender::::checkEntryConditions()", "491": "LoggingBuilder.WriterAppender::::checkEntryConditions()", "492": "LoggingBuilder.WriterAppender::::checkEntryConditions()", "493": "LoggingBuilder.WriterAppender::::checkEntryConditions()", "494": "LoggingBuilder.WriterAppender::::checkEntryConditions()", "495": "LoggingBuilder.WriterAppender::::checkEntryConditions()", "496": "LoggingBuilder.WriterAppender::::checkEntryConditions()", "497": "LoggingBuilder.WriterAppender::::checkEntryConditions()", "498": "LoggingBuilder.WriterAppender::::checkEntryConditions()", "499": "LoggingBuilder.WriterAppender::::checkEntryConditions()", "500": "LoggingBuilder.WriterAppender::::checkEntryConditions()", "501": "LoggingBuilder.WriterAppender::::checkEntryConditions()", "502": "LoggingBuilder.WriterAppender::::checkEntryConditions()", "503": "LoggingBuilder.WriterAppender::::checkEntryConditions()", "505": "LoggingBuilder.WriterAppender::::close()", "506": "LoggingBuilder.WriterAppender::::close()", "507": "LoggingBuilder.WriterAppender::::close()", "508": "LoggingBuilder.WriterAppender::::close()", "509": "LoggingBuilder.WriterAppender::::close()", "510": "LoggingBuilder.WriterAppender::::close()", "511": "LoggingBuilder.WriterAppender::::close()", "512": "LoggingBuilder.WriterAppender::::close()", "514": "LoggingBuilder.WriterAppender::::closeWriter()", "515": "LoggingBuilder.WriterAppender::::closeWriter()", "516": "LoggingBuilder.WriterAppender::::closeWriter()", "517": "LoggingBuilder.WriterAppender::::closeWriter()", "518": "LoggingBuilder.WriterAppender::::closeWriter()", "519": "LoggingBuilder.WriterAppender::::closeWriter()", "520": "LoggingBuilder.WriterAppender::::closeWriter()", "521": "LoggingBuilder.WriterAppender::::closeWriter()", "522": "LoggingBuilder.WriterAppender::::closeWriter()", "524": "LoggingBuilder.WriterAppender::::createWriter(java.io.OutputStream)", "525": "LoggingBuilder.WriterAppender::::createWriter(java.io.OutputStream)", "526": "LoggingBuilder.WriterAppender::::createWriter(java.io.OutputStream)", "527": "LoggingBuilder.WriterAppender::::createWriter(java.io.OutputStream)", "528": "LoggingBuilder.WriterAppender::::createWriter(java.io.OutputStream)", "529": "LoggingBuilder.WriterAppender::::createWriter(java.io.OutputStream)", "530": "LoggingBuilder.WriterAppender::::createWriter(java.io.OutputStream)", "531": "LoggingBuilder.WriterAppender::::createWriter(java.io.OutputStream)", "532": "LoggingBuilder.WriterAppender::::createWriter(java.io.OutputStream)", "533": "LoggingBuilder.WriterAppender::::createWriter(java.io.OutputStream)", "534": "LoggingBuilder.WriterAppender::::createWriter(java.io.OutputStream)", "535": "LoggingBuilder.WriterAppender::::createWriter(java.io.OutputStream)", "536": "LoggingBuilder.WriterAppender::::createWriter(java.io.OutputStream)", "537": "LoggingBuilder.WriterAppender::::createWriter(java.io.OutputStream)", "538": "LoggingBuilder.WriterAppender::::createWriter(java.io.OutputStream)", "539": "LoggingBuilder.WriterAppender::::createWriter(java.io.OutputStream)", "540": "LoggingBuilder.WriterAppender::::createWriter(java.io.OutputStream)", "542": "LoggingBuilder.WriterAppender::::getEncoding()", "543": "LoggingBuilder.WriterAppender::::getEncoding()", "544": "LoggingBuilder.WriterAppender::::getEncoding()", "546": "LoggingBuilder.WriterAppender::::setEncoding(java.lang.String)", "547": "LoggingBuilder.WriterAppender::::setEncoding(java.lang.String)", "548": "LoggingBuilder.WriterAppender::::setEncoding(java.lang.String)", "551": "LoggingBuilder.WriterAppender::::setWriter(java.io.Writer)", "552": "LoggingBuilder.WriterAppender::::setWriter(java.io.Writer)", "553": "LoggingBuilder.WriterAppender::::setWriter(java.io.Writer)", "554": "LoggingBuilder.WriterAppender::::setWriter(java.io.Writer)", "555": "LoggingBuilder.WriterAppender::::setWriter(java.io.Writer)", "557": "LoggingBuilder.WriterAppender::::subAppend(org.apache.rocketmq.logging.inner.LoggingEvent)", "558": "LoggingBuilder.WriterAppender::::subAppend(org.apache.rocketmq.logging.inner.LoggingEvent)", "559": "LoggingBuilder.WriterAppender::::subAppend(org.apache.rocketmq.logging.inner.LoggingEvent)", "560": "LoggingBuilder.WriterAppender::::subAppend(org.apache.rocketmq.logging.inner.LoggingEvent)", "561": "LoggingBuilder.WriterAppender::::subAppend(org.apache.rocketmq.logging.inner.LoggingEvent)", "562": "LoggingBuilder.WriterAppender::::subAppend(org.apache.rocketmq.logging.inner.LoggingEvent)", "563": "LoggingBuilder.WriterAppender::::subAppend(org.apache.rocketmq.logging.inner.LoggingEvent)", "564": "LoggingBuilder.WriterAppender::::subAppend(org.apache.rocketmq.logging.inner.LoggingEvent)", "565": "LoggingBuilder.WriterAppender::::subAppend(org.apache.rocketmq.logging.inner.LoggingEvent)", "566": "LoggingBuilder.WriterAppender::::subAppend(org.apache.rocketmq.logging.inner.LoggingEvent)", "567": "LoggingBuilder.WriterAppender::::subAppend(org.apache.rocketmq.logging.inner.LoggingEvent)", "568": "LoggingBuilder.WriterAppender::::subAppend(org.apache.rocketmq.logging.inner.LoggingEvent)", "569": "LoggingBuilder.WriterAppender::::subAppend(org.apache.rocketmq.logging.inner.LoggingEvent)", "570": "LoggingBuilder.WriterAppender::::subAppend(org.apache.rocketmq.logging.inner.LoggingEvent)", "571": "LoggingBuilder.WriterAppender::::subAppend(org.apache.rocketmq.logging.inner.LoggingEvent)", "572": "LoggingBuilder.WriterAppender::::subAppend(org.apache.rocketmq.logging.inner.LoggingEvent)", "573": "LoggingBuilder.WriterAppender::::subAppend(org.apache.rocketmq.logging.inner.LoggingEvent)", "575": "LoggingBuilder.WriterAppender::::reset()", "576": "LoggingBuilder.WriterAppender::::reset()", "577": "LoggingBuilder.WriterAppender::::reset()", "578": "LoggingBuilder.WriterAppender::::reset()", "580": "LoggingBuilder.WriterAppender::::writeFooter()", "581": "LoggingBuilder.WriterAppender::::writeFooter()", "582": "LoggingBuilder.WriterAppender::::writeFooter()", "583": "LoggingBuilder.WriterAppender::::writeFooter()", "584": "LoggingBuilder.WriterAppender::::writeFooter()", "585": "LoggingBuilder.WriterAppender::::writeFooter()", "586": "LoggingBuilder.WriterAppender::::writeFooter()", "587": "LoggingBuilder.WriterAppender::::writeFooter()", "588": "LoggingBuilder.WriterAppender::::writeFooter()", "590": "LoggingBuilder.WriterAppender::::writeHeader()", "591": "LoggingBuilder.WriterAppender::::writeHeader()", "592": "LoggingBuilder.WriterAppender::::writeHeader()", "593": "LoggingBuilder.WriterAppender::::writeHeader()", "594": "LoggingBuilder.WriterAppender::::writeHeader()", "595": "LoggingBuilder.WriterAppender::::writeHeader()", "596": "LoggingBuilder.WriterAppender::::writeHeader()", "597": "LoggingBuilder.WriterAppender::::writeHeader()", "599": "LoggingBuilder.WriterAppender::::shouldFlush(org.apache.rocketmq.logging.inner.LoggingEvent)", "600": "LoggingBuilder.WriterAppender::::shouldFlush(org.apache.rocketmq.logging.inner.LoggingEvent)", "601": "LoggingBuilder.WriterAppender::::shouldFlush(org.apache.rocketmq.logging.inner.LoggingEvent)", "624": "LoggingBuilder.FileAppender::::setFile(java.lang.String)", "625": "LoggingBuilder.FileAppender::::setFile(java.lang.String)", "626": "LoggingBuilder.FileAppender::::setFile(java.lang.String)", "628": "LoggingBuilder.FileAppender::::getAppend()", "629": "LoggingBuilder.FileAppender::::getAppend()", "630": "LoggingBuilder.FileAppender::::getAppend()", "632": "LoggingBuilder.FileAppender::::getFile()", "633": "LoggingBuilder.FileAppender::::getFile()", "634": "LoggingBuilder.FileAppender::::getFile()", "636": "LoggingBuilder.FileAppender::::activateOptions()", "637": "LoggingBuilder.FileAppender::::activateOptions()", "638": "LoggingBuilder.FileAppender::::activateOptions()", "639": "LoggingBuilder.FileAppender::::activateOptions()", "640": "LoggingBuilder.FileAppender::::activateOptions()", "641": "LoggingBuilder.FileAppender::::activateOptions()", "642": "LoggingBuilder.FileAppender::::activateOptions()", "643": "LoggingBuilder.FileAppender::::activateOptions()", "644": "LoggingBuilder.FileAppender::::activateOptions()", "645": "LoggingBuilder.FileAppender::::activateOptions()", "646": "LoggingBuilder.FileAppender::::activateOptions()", "647": "LoggingBuilder.FileAppender::::activateOptions()", "648": "LoggingBuilder.FileAppender::::activateOptions()", "650": "LoggingBuilder.FileAppender::::closeFile()", "651": "LoggingBuilder.FileAppender::::closeFile()", "652": "LoggingBuilder.FileAppender::::closeFile()", "653": "LoggingBuilder.FileAppender::::closeFile()", "654": "LoggingBuilder.FileAppender::::closeFile()", "655": "LoggingBuilder.FileAppender::::closeFile()", "656": "LoggingBuilder.FileAppender::::closeFile()", "657": "LoggingBuilder.FileAppender::::closeFile()", "658": "LoggingBuilder.FileAppender::::closeFile()", "659": "LoggingBuilder.FileAppender::::closeFile()", "660": "LoggingBuilder.FileAppender::::closeFile()", "661": "LoggingBuilder.FileAppender::::closeFile()", "663": "LoggingBuilder.FileAppender::::getBufferedIO()", "664": "LoggingBuilder.FileAppender::::getBufferedIO()", "665": "LoggingBuilder.FileAppender::::getBufferedIO()", "667": "LoggingBuilder.FileAppender::::getBufferSize()", "668": "LoggingBuilder.FileAppender::::getBufferSize()", "669": "LoggingBuilder.FileAppender::::getBufferSize()", "671": "LoggingBuilder.FileAppender::::setAppend(boolean)", "672": "LoggingBuilder.FileAppender::::setAppend(boolean)", "673": "LoggingBuilder.FileAppender::::setAppend(boolean)", "675": "LoggingBuilder.FileAppender::::setBufferedIO(boolean)", "676": "LoggingBuilder.FileAppender::::setBufferedIO(boolean)", "677": "LoggingBuilder.FileAppender::::setBufferedIO(boolean)", "678": "LoggingBuilder.FileAppender::::setBufferedIO(boolean)", "679": "LoggingBuilder.FileAppender::::setBufferedIO(boolean)", "680": "LoggingBuilder.FileAppender::::setBufferedIO(boolean)", "682": "LoggingBuilder.FileAppender::::setBufferSize(int)", "683": "LoggingBuilder.FileAppender::::setBufferSize(int)", "684": "LoggingBuilder.FileAppender::::setBufferSize(int)", "686": "LoggingBuilder.FileAppender::::setFile(java.lang.String,boolean,boolean,int)", "687": "LoggingBuilder.FileAppender::::setFile(java.lang.String,boolean,boolean,int)", "688": "LoggingBuilder.FileAppender::::setFile(java.lang.String,boolean,boolean,int)", "689": "LoggingBuilder.FileAppender::::setFile(java.lang.String,boolean,boolean,int)", "690": "LoggingBuilder.FileAppender::::setFile(java.lang.String,boolean,boolean,int)", "691": "LoggingBuilder.FileAppender::::setFile(java.lang.String,boolean,boolean,int)", "692": "LoggingBuilder.FileAppender::::setFile(java.lang.String,boolean,boolean,int)", "693": "LoggingBuilder.FileAppender::::setFile(java.lang.String,boolean,boolean,int)", "694": "LoggingBuilder.FileAppender::::setFile(java.lang.String,boolean,boolean,int)", "695": "LoggingBuilder.FileAppender::::setFile(java.lang.String,boolean,boolean,int)", "696": "LoggingBuilder.FileAppender::::setFile(java.lang.String,boolean,boolean,int)", "697": "LoggingBuilder.FileAppender::::setFile(java.lang.String,boolean,boolean,int)", "698": "LoggingBuilder.FileAppender::::setFile(java.lang.String,boolean,boolean,int)", "699": "LoggingBuilder.FileAppender::::setFile(java.lang.String,boolean,boolean,int)", "700": "LoggingBuilder.FileAppender::::setFile(java.lang.String,boolean,boolean,int)", "701": "LoggingBuilder.FileAppender::::setFile(java.lang.String,boolean,boolean,int)", "702": "LoggingBuilder.FileAppender::::setFile(java.lang.String,boolean,boolean,int)", "703": "LoggingBuilder.FileAppender::::setFile(java.lang.String,boolean,boolean,int)", "704": "LoggingBuilder.FileAppender::::setFile(java.lang.String,boolean,boolean,int)", "705": "LoggingBuilder.FileAppender::::setFile(java.lang.String,boolean,boolean,int)", "706": "LoggingBuilder.FileAppender::::setFile(java.lang.String,boolean,boolean,int)", "707": "LoggingBuilder.FileAppender::::setFile(java.lang.String,boolean,boolean,int)", "708": "LoggingBuilder.FileAppender::::setFile(java.lang.String,boolean,boolean,int)", "709": "LoggingBuilder.FileAppender::::setFile(java.lang.String,boolean,boolean,int)", "710": "LoggingBuilder.FileAppender::::setFile(java.lang.String,boolean,boolean,int)", "711": "LoggingBuilder.FileAppender::::setFile(java.lang.String,boolean,boolean,int)", "712": "LoggingBuilder.FileAppender::::setFile(java.lang.String,boolean,boolean,int)", "713": "LoggingBuilder.FileAppender::::setFile(java.lang.String,boolean,boolean,int)", "714": "LoggingBuilder.FileAppender::::setFile(java.lang.String,boolean,boolean,int)", "715": "LoggingBuilder.FileAppender::::setFile(java.lang.String,boolean,boolean,int)", "716": "LoggingBuilder.FileAppender::::setFile(java.lang.String,boolean,boolean,int)", "717": "LoggingBuilder.FileAppender::::setFile(java.lang.String,boolean,boolean,int)", "718": "LoggingBuilder.FileAppender::::setFile(java.lang.String,boolean,boolean,int)", "719": "LoggingBuilder.FileAppender::::setFile(java.lang.String,boolean,boolean,int)", "720": "LoggingBuilder.FileAppender::::setFile(java.lang.String,boolean,boolean,int)", "721": "LoggingBuilder.FileAppender::::setFile(java.lang.String,boolean,boolean,int)", "722": "LoggingBuilder.FileAppender::::setFile(java.lang.String,boolean,boolean,int)", "724": "LoggingBuilder.FileAppender::::setQWForFiles(java.io.Writer)", "725": "LoggingBuilder.FileAppender::::setQWForFiles(java.io.Writer)", "726": "LoggingBuilder.FileAppender::::setQWForFiles(java.io.Writer)", "728": "LoggingBuilder.FileAppender::::reset()", "729": "LoggingBuilder.FileAppender::::reset()", "730": "LoggingBuilder.FileAppender::::reset()", "731": "LoggingBuilder.FileAppender::::reset()", "732": "LoggingBuilder.FileAppender::::reset()", "748": "LoggingBuilder.RollingFileAppender::::getMaxBackupIndex()", "749": "LoggingBuilder.RollingFileAppender::::getMaxBackupIndex()", "750": "LoggingBuilder.RollingFileAppender::::getMaxBackupIndex()", "752": "LoggingBuilder.RollingFileAppender::::getMaximumFileSize()", "753": "LoggingBuilder.RollingFileAppender::::getMaximumFileSize()", "754": "LoggingBuilder.RollingFileAppender::::getMaximumFileSize()", "756": "LoggingBuilder.RollingFileAppender::::rollOver()", "757": "LoggingBuilder.RollingFileAppender::::rollOver()", "758": "LoggingBuilder.RollingFileAppender::::rollOver()", "759": "LoggingBuilder.RollingFileAppender::::rollOver()", "760": "LoggingBuilder.RollingFileAppender::::rollOver()", "761": "LoggingBuilder.RollingFileAppender::::rollOver()", "762": "LoggingBuilder.RollingFileAppender::::rollOver()", "763": "LoggingBuilder.RollingFileAppender::::rollOver()", "764": "LoggingBuilder.RollingFileAppender::::rollOver()", "765": "LoggingBuilder.RollingFileAppender::::rollOver()", "766": "LoggingBuilder.RollingFileAppender::::rollOver()", "767": "LoggingBuilder.RollingFileAppender::::rollOver()", "768": "LoggingBuilder.RollingFileAppender::::rollOver()", "769": "LoggingBuilder.RollingFileAppender::::rollOver()", "770": "LoggingBuilder.RollingFileAppender::::rollOver()", "771": "LoggingBuilder.RollingFileAppender::::rollOver()", "772": "LoggingBuilder.RollingFileAppender::::rollOver()", "773": "LoggingBuilder.RollingFileAppender::::rollOver()", "774": "LoggingBuilder.RollingFileAppender::::rollOver()", "775": "LoggingBuilder.RollingFileAppender::::rollOver()", "776": "LoggingBuilder.RollingFileAppender::::rollOver()", "777": "LoggingBuilder.RollingFileAppender::::rollOver()", "778": "LoggingBuilder.RollingFileAppender::::rollOver()", "779": "LoggingBuilder.RollingFileAppender::::rollOver()", "780": "LoggingBuilder.RollingFileAppender::::rollOver()", "781": "LoggingBuilder.RollingFileAppender::::rollOver()", "782": "LoggingBuilder.RollingFileAppender::::rollOver()", "783": "LoggingBuilder.RollingFileAppender::::rollOver()", "784": "LoggingBuilder.RollingFileAppender::::rollOver()", "785": "LoggingBuilder.RollingFileAppender::::rollOver()", "786": "LoggingBuilder.RollingFileAppender::::rollOver()", "787": "LoggingBuilder.RollingFileAppender::::rollOver()", "788": "LoggingBuilder.RollingFileAppender::::rollOver()", "789": "LoggingBuilder.RollingFileAppender::::rollOver()", "790": "LoggingBuilder.RollingFileAppender::::rollOver()", "791": "LoggingBuilder.RollingFileAppender::::rollOver()", "792": "LoggingBuilder.RollingFileAppender::::rollOver()", "793": "LoggingBuilder.RollingFileAppender::::rollOver()", "794": "LoggingBuilder.RollingFileAppender::::rollOver()", "795": "LoggingBuilder.RollingFileAppender::::rollOver()", "796": "LoggingBuilder.RollingFileAppender::::rollOver()", "797": "LoggingBuilder.RollingFileAppender::::rollOver()", "798": "LoggingBuilder.RollingFileAppender::::rollOver()", "799": "LoggingBuilder.RollingFileAppender::::rollOver()", "800": "LoggingBuilder.RollingFileAppender::::rollOver()", "801": "LoggingBuilder.RollingFileAppender::::rollOver()", "802": "LoggingBuilder.RollingFileAppender::::rollOver()", "803": "LoggingBuilder.RollingFileAppender::::rollOver()", "804": "LoggingBuilder.RollingFileAppender::::rollOver()", "805": "LoggingBuilder.RollingFileAppender::::rollOver()", "806": "LoggingBuilder.RollingFileAppender::::rollOver()", "807": "LoggingBuilder.RollingFileAppender::::rollOver()", "808": "LoggingBuilder.RollingFileAppender::::rollOver()", "809": "LoggingBuilder.RollingFileAppender::::rollOver()", "810": "LoggingBuilder.RollingFileAppender::::rollOver()", "811": "LoggingBuilder.RollingFileAppender::::rollOver()", "812": "LoggingBuilder.RollingFileAppender::::rollOver()", "813": "LoggingBuilder.RollingFileAppender::::rollOver()", "814": "LoggingBuilder.RollingFileAppender::::rollOver()", "815": "LoggingBuilder.RollingFileAppender::::rollOver()", "816": "LoggingBuilder.RollingFileAppender::::rollOver()", "818": "LoggingBuilder.RollingFileAppender::::setFile(java.lang.String,boolean,boolean,int)", "819": "LoggingBuilder.RollingFileAppender::::setFile(java.lang.String,boolean,boolean,int)", "820": "LoggingBuilder.RollingFileAppender::::setFile(java.lang.String,boolean,boolean,int)", "821": "LoggingBuilder.RollingFileAppender::::setFile(java.lang.String,boolean,boolean,int)", "822": "LoggingBuilder.RollingFileAppender::::setFile(java.lang.String,boolean,boolean,int)", "823": "LoggingBuilder.RollingFileAppender::::setFile(java.lang.String,boolean,boolean,int)", "824": "LoggingBuilder.RollingFileAppender::::setFile(java.lang.String,boolean,boolean,int)", "825": "LoggingBuilder.RollingFileAppender::::setFile(java.lang.String,boolean,boolean,int)", "827": "LoggingBuilder.RollingFileAppender::::setMaxBackupIndex(int)", "828": "LoggingBuilder.RollingFileAppender::::setMaxBackupIndex(int)", "829": "LoggingBuilder.RollingFileAppender::::setMaxBackupIndex(int)", "831": "LoggingBuilder.RollingFileAppender::::setMaximumFileSize(long)", "832": "LoggingBuilder.RollingFileAppender::::setMaximumFileSize(long)", "833": "LoggingBuilder.RollingFileAppender::::setMaximumFileSize(long)", "835": "LoggingBuilder.RollingFileAppender::::setQWForFiles(java.io.Writer)", "836": "LoggingBuilder.RollingFileAppender::::setQWForFiles(java.io.Writer)", "837": "LoggingBuilder.RollingFileAppender::::setQWForFiles(java.io.Writer)", "839": "LoggingBuilder.RollingFileAppender::::subAppend(org.apache.rocketmq.logging.inner.LoggingEvent)", "840": "LoggingBuilder.RollingFileAppender::::subAppend(org.apache.rocketmq.logging.inner.LoggingEvent)", "841": "LoggingBuilder.RollingFileAppender::::subAppend(org.apache.rocketmq.logging.inner.LoggingEvent)", "842": "LoggingBuilder.RollingFileAppender::::subAppend(org.apache.rocketmq.logging.inner.LoggingEvent)", "843": "LoggingBuilder.RollingFileAppender::::subAppend(org.apache.rocketmq.logging.inner.LoggingEvent)", "844": "LoggingBuilder.RollingFileAppender::::subAppend(org.apache.rocketmq.logging.inner.LoggingEvent)", "845": "LoggingBuilder.RollingFileAppender::::subAppend(org.apache.rocketmq.logging.inner.LoggingEvent)", "846": "LoggingBuilder.RollingFileAppender::::subAppend(org.apache.rocketmq.logging.inner.LoggingEvent)", "847": "LoggingBuilder.RollingFileAppender::::subAppend(org.apache.rocketmq.logging.inner.LoggingEvent)", "857": "LoggingBuilder.RollingFileAppender.CountingQuietWriter::::write(java.lang.String)", "858": "LoggingBuilder.RollingFileAppender.CountingQuietWriter::::write(java.lang.String)", "859": "LoggingBuilder.RollingFileAppender.CountingQuietWriter::::write(java.lang.String)", "860": "LoggingBuilder.RollingFileAppender.CountingQuietWriter::::write(java.lang.String)", "861": "LoggingBuilder.RollingFileAppender.CountingQuietWriter::::write(java.lang.String)", "862": "LoggingBuilder.RollingFileAppender.CountingQuietWriter::::write(java.lang.String)", "863": "LoggingBuilder.RollingFileAppender.CountingQuietWriter::::write(java.lang.String)", "864": "LoggingBuilder.RollingFileAppender.CountingQuietWriter::::write(java.lang.String)", "866": "LoggingBuilder.RollingFileAppender.CountingQuietWriter::::getCount()", "867": "LoggingBuilder.RollingFileAppender.CountingQuietWriter::::getCount()", "868": "LoggingBuilder.RollingFileAppender.CountingQuietWriter::::getCount()", "870": "LoggingBuilder.RollingFileAppender.CountingQuietWriter::::setCount(long)", "871": "LoggingBuilder.RollingFileAppender.CountingQuietWriter::::setCount(long)", "872": "LoggingBuilder.RollingFileAppender.CountingQuietWriter::::setCount(long)", "908": "LoggingBuilder.DailyRollingFileAppender::::setDatePattern(java.lang.String)", "909": "LoggingBuilder.DailyRollingFileAppender::::setDatePattern(java.lang.String)", "910": "LoggingBuilder.DailyRollingFileAppender::::setDatePattern(java.lang.String)", "912": "LoggingBuilder.DailyRollingFileAppender::::getDatePattern()", "913": "LoggingBuilder.DailyRollingFileAppender::::getDatePattern()", "914": "LoggingBuilder.DailyRollingFileAppender::::getDatePattern()", "916": "LoggingBuilder.DailyRollingFileAppender::::activateOptions()", "917": "LoggingBuilder.DailyRollingFileAppender::::activateOptions()", "918": "LoggingBuilder.DailyRollingFileAppender::::activateOptions()", "919": "LoggingBuilder.DailyRollingFileAppender::::activateOptions()", "920": "LoggingBuilder.DailyRollingFileAppender::::activateOptions()", "921": "LoggingBuilder.DailyRollingFileAppender::::activateOptions()", "922": "LoggingBuilder.DailyRollingFileAppender::::activateOptions()", "923": "LoggingBuilder.DailyRollingFileAppender::::activateOptions()", "924": "LoggingBuilder.DailyRollingFileAppender::::activateOptions()", "925": "LoggingBuilder.DailyRollingFileAppender::::activateOptions()", "926": "LoggingBuilder.DailyRollingFileAppender::::activateOptions()", "927": "LoggingBuilder.DailyRollingFileAppender::::activateOptions()", "928": "LoggingBuilder.DailyRollingFileAppender::::activateOptions()", "929": "LoggingBuilder.DailyRollingFileAppender::::activateOptions()", "930": "LoggingBuilder.DailyRollingFileAppender::::activateOptions()", "932": "LoggingBuilder.DailyRollingFileAppender::::printPeriodicity(int)", "933": "LoggingBuilder.DailyRollingFileAppender::::printPeriodicity(int)", "934": "LoggingBuilder.DailyRollingFileAppender::::printPeriodicity(int)", "935": "LoggingBuilder.DailyRollingFileAppender::::printPeriodicity(int)", "936": "LoggingBuilder.DailyRollingFileAppender::::printPeriodicity(int)", "937": "LoggingBuilder.DailyRollingFileAppender::::printPeriodicity(int)", "938": "LoggingBuilder.DailyRollingFileAppender::::printPeriodicity(int)", "939": "LoggingBuilder.DailyRollingFileAppender::::printPeriodicity(int)", "940": "LoggingBuilder.DailyRollingFileAppender::::printPeriodicity(int)", "941": "LoggingBuilder.DailyRollingFileAppender::::printPeriodicity(int)", "942": "LoggingBuilder.DailyRollingFileAppender::::printPeriodicity(int)", "943": "LoggingBuilder.DailyRollingFileAppender::::printPeriodicity(int)", "944": "LoggingBuilder.DailyRollingFileAppender::::printPeriodicity(int)", "945": "LoggingBuilder.DailyRollingFileAppender::::printPeriodicity(int)", "946": "LoggingBuilder.DailyRollingFileAppender::::printPeriodicity(int)", "947": "LoggingBuilder.DailyRollingFileAppender::::printPeriodicity(int)", "948": "LoggingBuilder.DailyRollingFileAppender::::printPeriodicity(int)", "949": "LoggingBuilder.DailyRollingFileAppender::::printPeriodicity(int)", "950": "LoggingBuilder.DailyRollingFileAppender::::printPeriodicity(int)", "951": "LoggingBuilder.DailyRollingFileAppender::::printPeriodicity(int)", "952": "LoggingBuilder.DailyRollingFileAppender::::printPeriodicity(int)", "953": "LoggingBuilder.DailyRollingFileAppender::::printPeriodicity(int)", "954": "LoggingBuilder.DailyRollingFileAppender::::printPeriodicity(int)", "955": "LoggingBuilder.DailyRollingFileAppender::::printPeriodicity(int)", "957": "LoggingBuilder.DailyRollingFileAppender::::computeCheckPeriod()", "958": "LoggingBuilder.DailyRollingFileAppender::::computeCheckPeriod()", "959": "LoggingBuilder.DailyRollingFileAppender::::computeCheckPeriod()", "960": "LoggingBuilder.DailyRollingFileAppender::::computeCheckPeriod()", "961": "LoggingBuilder.DailyRollingFileAppender::::computeCheckPeriod()", "962": "LoggingBuilder.DailyRollingFileAppender::::computeCheckPeriod()", "963": "LoggingBuilder.DailyRollingFileAppender::::computeCheckPeriod()", "964": "LoggingBuilder.DailyRollingFileAppender::::computeCheckPeriod()", "965": "LoggingBuilder.DailyRollingFileAppender::::computeCheckPeriod()", "966": "LoggingBuilder.DailyRollingFileAppender::::computeCheckPeriod()", "967": "LoggingBuilder.DailyRollingFileAppender::::computeCheckPeriod()", "968": "LoggingBuilder.DailyRollingFileAppender::::computeCheckPeriod()", "969": "LoggingBuilder.DailyRollingFileAppender::::computeCheckPeriod()", "970": "LoggingBuilder.DailyRollingFileAppender::::computeCheckPeriod()", "971": "LoggingBuilder.DailyRollingFileAppender::::computeCheckPeriod()", "972": "LoggingBuilder.DailyRollingFileAppender::::computeCheckPeriod()", "973": "LoggingBuilder.DailyRollingFileAppender::::computeCheckPeriod()", "974": "LoggingBuilder.DailyRollingFileAppender::::computeCheckPeriod()", "975": "LoggingBuilder.DailyRollingFileAppender::::computeCheckPeriod()", "977": "LoggingBuilder.DailyRollingFileAppender::::rollOver()", "978": "LoggingBuilder.DailyRollingFileAppender::::rollOver()", "979": "LoggingBuilder.DailyRollingFileAppender::::rollOver()", "980": "LoggingBuilder.DailyRollingFileAppender::::rollOver()", "981": "LoggingBuilder.DailyRollingFileAppender::::rollOver()", "982": "LoggingBuilder.DailyRollingFileAppender::::rollOver()", "983": "LoggingBuilder.DailyRollingFileAppender::::rollOver()", "984": "LoggingBuilder.DailyRollingFileAppender::::rollOver()", "985": "LoggingBuilder.DailyRollingFileAppender::::rollOver()", "986": "LoggingBuilder.DailyRollingFileAppender::::rollOver()", "987": "LoggingBuilder.DailyRollingFileAppender::::rollOver()", "988": "LoggingBuilder.DailyRollingFileAppender::::rollOver()", "989": "LoggingBuilder.DailyRollingFileAppender::::rollOver()", "990": "LoggingBuilder.DailyRollingFileAppender::::rollOver()", "991": "LoggingBuilder.DailyRollingFileAppender::::rollOver()", "992": "LoggingBuilder.DailyRollingFileAppender::::rollOver()", "993": "LoggingBuilder.DailyRollingFileAppender::::rollOver()", "994": "LoggingBuilder.DailyRollingFileAppender::::rollOver()", "995": "LoggingBuilder.DailyRollingFileAppender::::rollOver()", "996": "LoggingBuilder.DailyRollingFileAppender::::rollOver()", "997": "LoggingBuilder.DailyRollingFileAppender::::rollOver()", "998": "LoggingBuilder.DailyRollingFileAppender::::rollOver()", "999": "LoggingBuilder.DailyRollingFileAppender::::rollOver()", "1000": "LoggingBuilder.DailyRollingFileAppender::::rollOver()", "1001": "LoggingBuilder.DailyRollingFileAppender::::rollOver()", "1002": "LoggingBuilder.DailyRollingFileAppender::::rollOver()", "1003": "LoggingBuilder.DailyRollingFileAppender::::rollOver()", "1004": "LoggingBuilder.DailyRollingFileAppender::::rollOver()", "1005": "LoggingBuilder.DailyRollingFileAppender::::rollOver()", "1006": "LoggingBuilder.DailyRollingFileAppender::::rollOver()", "1007": "LoggingBuilder.DailyRollingFileAppender::::rollOver()", "1008": "LoggingBuilder.DailyRollingFileAppender::::rollOver()", "1009": "LoggingBuilder.DailyRollingFileAppender::::rollOver()", "1010": "LoggingBuilder.DailyRollingFileAppender::::rollOver()", "1012": "LoggingBuilder.DailyRollingFileAppender::::subAppend(org.apache.rocketmq.logging.inner.LoggingEvent)", "1013": "LoggingBuilder.DailyRollingFileAppender::::subAppend(org.apache.rocketmq.logging.inner.LoggingEvent)", "1014": "LoggingBuilder.DailyRollingFileAppender::::subAppend(org.apache.rocketmq.logging.inner.LoggingEvent)", "1015": "LoggingBuilder.DailyRollingFileAppender::::subAppend(org.apache.rocketmq.logging.inner.LoggingEvent)", "1016": "LoggingBuilder.DailyRollingFileAppender::::subAppend(org.apache.rocketmq.logging.inner.LoggingEvent)", "1017": "LoggingBuilder.DailyRollingFileAppender::::subAppend(org.apache.rocketmq.logging.inner.LoggingEvent)", "1018": "LoggingBuilder.DailyRollingFileAppender::::subAppend(org.apache.rocketmq.logging.inner.LoggingEvent)", "1019": "LoggingBuilder.DailyRollingFileAppender::::subAppend(org.apache.rocketmq.logging.inner.LoggingEvent)", "1020": "LoggingBuilder.DailyRollingFileAppender::::subAppend(org.apache.rocketmq.logging.inner.LoggingEvent)", "1021": "LoggingBuilder.DailyRollingFileAppender::::subAppend(org.apache.rocketmq.logging.inner.LoggingEvent)", "1022": "LoggingBuilder.DailyRollingFileAppender::::subAppend(org.apache.rocketmq.logging.inner.LoggingEvent)", "1023": "LoggingBuilder.DailyRollingFileAppender::::subAppend(org.apache.rocketmq.logging.inner.LoggingEvent)", "1024": "LoggingBuilder.DailyRollingFileAppender::::subAppend(org.apache.rocketmq.logging.inner.LoggingEvent)", "1025": "LoggingBuilder.DailyRollingFileAppender::::subAppend(org.apache.rocketmq.logging.inner.LoggingEvent)", "1026": "LoggingBuilder.DailyRollingFileAppender::::subAppend(org.apache.rocketmq.logging.inner.LoggingEvent)", "1027": "LoggingBuilder.DailyRollingFileAppender::::subAppend(org.apache.rocketmq.logging.inner.LoggingEvent)", "1043": "LoggingBuilder.RollingCalendar::::setType(int)", "1044": "LoggingBuilder.RollingCalendar::::setType(int)", "1045": "LoggingBuilder.RollingCalendar::::setType(int)", "1047": "LoggingBuilder.RollingCalendar::::getNextCheckMillis(java.util.Date)", "1048": "LoggingBuilder.RollingCalendar::::getNextCheckMillis(java.util.Date)", "1049": "LoggingBuilder.RollingCalendar::::getNextCheckMillis(java.util.Date)", "1051": "LoggingBuilder.RollingCalendar::::getNextCheckDate(java.util.Date)", "1052": "LoggingBuilder.RollingCalendar::::getNextCheckDate(java.util.Date)", "1053": "LoggingBuilder.RollingCalendar::::getNextCheckDate(java.util.Date)", "1054": "LoggingBuilder.RollingCalendar::::getNextCheckDate(java.util.Date)", "1055": "LoggingBuilder.RollingCalendar::::getNextCheckDate(java.util.Date)", "1056": "LoggingBuilder.RollingCalendar::::getNextCheckDate(java.util.Date)", "1057": "LoggingBuilder.RollingCalendar::::getNextCheckDate(java.util.Date)", "1058": "LoggingBuilder.RollingCalendar::::getNextCheckDate(java.util.Date)", "1059": "LoggingBuilder.RollingCalendar::::getNextCheckDate(java.util.Date)", "1060": "LoggingBuilder.RollingCalendar::::getNextCheckDate(java.util.Date)", "1061": "LoggingBuilder.RollingCalendar::::getNextCheckDate(java.util.Date)", "1062": "LoggingBuilder.RollingCalendar::::getNextCheckDate(java.util.Date)", "1063": "LoggingBuilder.RollingCalendar::::getNextCheckDate(java.util.Date)", "1064": "LoggingBuilder.RollingCalendar::::getNextCheckDate(java.util.Date)", "1065": "LoggingBuilder.RollingCalendar::::getNextCheckDate(java.util.Date)", "1066": "LoggingBuilder.RollingCalendar::::getNextCheckDate(java.util.Date)", "1067": "LoggingBuilder.RollingCalendar::::getNextCheckDate(java.util.Date)", "1068": "LoggingBuilder.RollingCalendar::::getNextCheckDate(java.util.Date)", "1069": "LoggingBuilder.RollingCalendar::::getNextCheckDate(java.util.Date)", "1070": "LoggingBuilder.RollingCalendar::::getNextCheckDate(java.util.Date)", "1071": "LoggingBuilder.RollingCalendar::::getNextCheckDate(java.util.Date)", "1072": "LoggingBuilder.RollingCalendar::::getNextCheckDate(java.util.Date)", "1073": "LoggingBuilder.RollingCalendar::::getNextCheckDate(java.util.Date)", "1074": "LoggingBuilder.RollingCalendar::::getNextCheckDate(java.util.Date)", "1075": "LoggingBuilder.RollingCalendar::::getNextCheckDate(java.util.Date)", "1076": "LoggingBuilder.RollingCalendar::::getNextCheckDate(java.util.Date)", "1077": "LoggingBuilder.RollingCalendar::::getNextCheckDate(java.util.Date)", "1078": "LoggingBuilder.RollingCalendar::::getNextCheckDate(java.util.Date)", "1079": "LoggingBuilder.RollingCalendar::::getNextCheckDate(java.util.Date)", "1080": "LoggingBuilder.RollingCalendar::::getNextCheckDate(java.util.Date)", "1081": "LoggingBuilder.RollingCalendar::::getNextCheckDate(java.util.Date)", "1082": "LoggingBuilder.RollingCalendar::::getNextCheckDate(java.util.Date)", "1083": "LoggingBuilder.RollingCalendar::::getNextCheckDate(java.util.Date)", "1084": "LoggingBuilder.RollingCalendar::::getNextCheckDate(java.util.Date)", "1085": "LoggingBuilder.RollingCalendar::::getNextCheckDate(java.util.Date)", "1086": "LoggingBuilder.RollingCalendar::::getNextCheckDate(java.util.Date)", "1087": "LoggingBuilder.RollingCalendar::::getNextCheckDate(java.util.Date)", "1088": "LoggingBuilder.RollingCalendar::::getNextCheckDate(java.util.Date)", "1089": "LoggingBuilder.RollingCalendar::::getNextCheckDate(java.util.Date)", "1090": "LoggingBuilder.RollingCalendar::::getNextCheckDate(java.util.Date)", "1091": "LoggingBuilder.RollingCalendar::::getNextCheckDate(java.util.Date)", "1092": "LoggingBuilder.RollingCalendar::::getNextCheckDate(java.util.Date)", "1093": "LoggingBuilder.RollingCalendar::::getNextCheckDate(java.util.Date)", "1094": "LoggingBuilder.RollingCalendar::::getNextCheckDate(java.util.Date)", "1095": "LoggingBuilder.RollingCalendar::::getNextCheckDate(java.util.Date)", "1096": "LoggingBuilder.RollingCalendar::::getNextCheckDate(java.util.Date)", "1097": "LoggingBuilder.RollingCalendar::::getNextCheckDate(java.util.Date)", "1098": "LoggingBuilder.RollingCalendar::::getNextCheckDate(java.util.Date)", "1099": "LoggingBuilder.RollingCalendar::::getNextCheckDate(java.util.Date)", "1100": "LoggingBuilder.RollingCalendar::::getNextCheckDate(java.util.Date)", "1101": "LoggingBuilder.RollingCalendar::::getNextCheckDate(java.util.Date)", "1102": "LoggingBuilder.RollingCalendar::::getNextCheckDate(java.util.Date)", "1103": "LoggingBuilder.RollingCalendar::::getNextCheckDate(java.util.Date)", "1104": "LoggingBuilder.RollingCalendar::::getNextCheckDate(java.util.Date)", "1105": "LoggingBuilder.RollingCalendar::::getNextCheckDate(java.util.Date)", "1115": "LoggingBuilder.ConsoleAppender::::setTarget(java.lang.String)", "1116": "LoggingBuilder.ConsoleAppender::::setTarget(java.lang.String)", "1117": "LoggingBuilder.ConsoleAppender::::setTarget(java.lang.String)", "1118": "LoggingBuilder.ConsoleAppender::::setTarget(java.lang.String)", "1119": "LoggingBuilder.ConsoleAppender::::setTarget(java.lang.String)", "1120": "LoggingBuilder.ConsoleAppender::::setTarget(java.lang.String)", "1121": "LoggingBuilder.ConsoleAppender::::setTarget(java.lang.String)", "1122": "LoggingBuilder.ConsoleAppender::::setTarget(java.lang.String)", "1123": "LoggingBuilder.ConsoleAppender::::setTarget(java.lang.String)", "1124": "LoggingBuilder.ConsoleAppender::::setTarget(java.lang.String)", "1125": "LoggingBuilder.ConsoleAppender::::setTarget(java.lang.String)", "1127": "LoggingBuilder.ConsoleAppender::::getTarget()", "1128": "LoggingBuilder.ConsoleAppender::::getTarget()", "1129": "LoggingBuilder.ConsoleAppender::::getTarget()", "1131": "LoggingBuilder.ConsoleAppender::::targetWarn(java.lang.String)", "1132": "LoggingBuilder.ConsoleAppender::::targetWarn(java.lang.String)", "1133": "LoggingBuilder.ConsoleAppender::::targetWarn(java.lang.String)", "1134": "LoggingBuilder.ConsoleAppender::::targetWarn(java.lang.String)", "1136": "LoggingBuilder.ConsoleAppender::::activateOptions()", "1137": "LoggingBuilder.ConsoleAppender::::activateOptions()", "1138": "LoggingBuilder.ConsoleAppender::::activateOptions()", "1139": "LoggingBuilder.ConsoleAppender::::activateOptions()", "1140": "LoggingBuilder.ConsoleAppender::::activateOptions()", "1141": "LoggingBuilder.ConsoleAppender::::activateOptions()", "1142": "LoggingBuilder.ConsoleAppender::::activateOptions()", "1143": "LoggingBuilder.ConsoleAppender::::activateOptions()", "1145": "LoggingBuilder.ConsoleAppender::::closeWriter()", "1146": "LoggingBuilder.ConsoleAppender::::closeWriter()", "1147": "LoggingBuilder.ConsoleAppender::::closeWriter()", "1150": "LoggingBuilder::::newLayoutBuilder()", "1151": "LoggingBuilder::::newLayoutBuilder()", "1152": "LoggingBuilder::::newLayoutBuilder()", "1158": "LoggingBuilder.LayoutBuilder::::withSimpleLayout()", "1159": "LoggingBuilder.LayoutBuilder::::withSimpleLayout()", "1160": "LoggingBuilder.LayoutBuilder::::withSimpleLayout()", "1161": "LoggingBuilder.LayoutBuilder::::withSimpleLayout()", "1163": "LoggingBuilder.LayoutBuilder::::withDefaultLayout()", "1164": "LoggingBuilder.LayoutBuilder::::withDefaultLayout()", "1165": "LoggingBuilder.LayoutBuilder::::withDefaultLayout()", "1166": "LoggingBuilder.LayoutBuilder::::withDefaultLayout()", "1168": "LoggingBuilder.LayoutBuilder::::build()", "1169": "LoggingBuilder.LayoutBuilder::::build()", "1170": "LoggingBuilder.LayoutBuilder::::build()", "1171": "LoggingBuilder.LayoutBuilder::::build()", "1172": "LoggingBuilder.LayoutBuilder::::build()", "1173": "LoggingBuilder.LayoutBuilder::::build()", "1178": "LoggingBuilder.SimpleLayout::::format(org.apache.rocketmq.logging.inner.LoggingEvent)", "1179": "LoggingBuilder.SimpleLayout::::format(org.apache.rocketmq.logging.inner.LoggingEvent)", "1180": "LoggingBuilder.SimpleLayout::::format(org.apache.rocketmq.logging.inner.LoggingEvent)", "1181": "LoggingBuilder.SimpleLayout::::format(org.apache.rocketmq.logging.inner.LoggingEvent)", "1182": "LoggingBuilder.SimpleLayout::::format(org.apache.rocketmq.logging.inner.LoggingEvent)", "1183": "LoggingBuilder.SimpleLayout::::format(org.apache.rocketmq.logging.inner.LoggingEvent)", "1184": "LoggingBuilder.SimpleLayout::::format(org.apache.rocketmq.logging.inner.LoggingEvent)", "1185": "LoggingBuilder.SimpleLayout::::format(org.apache.rocketmq.logging.inner.LoggingEvent)", "1186": "LoggingBuilder.SimpleLayout::::format(org.apache.rocketmq.logging.inner.LoggingEvent)", "1187": "LoggingBuilder.SimpleLayout::::format(org.apache.rocketmq.logging.inner.LoggingEvent)", "1189": "LoggingBuilder.SimpleLayout::::ignoresThrowable()", "1190": "LoggingBuilder.SimpleLayout::::ignoresThrowable()", "1191": "LoggingBuilder.SimpleLayout::::ignoresThrowable()", "1192": "LoggingBuilder.SimpleLayout::::ignoresThrowable()", "1200": "LoggingBuilder.DefaultLayout::::format(org.apache.rocketmq.logging.inner.LoggingEvent)", "1201": "LoggingBuilder.DefaultLayout::::format(org.apache.rocketmq.logging.inner.LoggingEvent)", "1202": "LoggingBuilder.DefaultLayout::::format(org.apache.rocketmq.logging.inner.LoggingEvent)", "1203": "LoggingBuilder.DefaultLayout::::format(org.apache.rocketmq.logging.inner.LoggingEvent)", "1204": "LoggingBuilder.DefaultLayout::::format(org.apache.rocketmq.logging.inner.LoggingEvent)", "1205": "LoggingBuilder.DefaultLayout::::format(org.apache.rocketmq.logging.inner.LoggingEvent)", "1206": "LoggingBuilder.DefaultLayout::::format(org.apache.rocketmq.logging.inner.LoggingEvent)", "1207": "LoggingBuilder.DefaultLayout::::format(org.apache.rocketmq.logging.inner.LoggingEvent)", "1208": "LoggingBuilder.DefaultLayout::::format(org.apache.rocketmq.logging.inner.LoggingEvent)", "1209": "LoggingBuilder.DefaultLayout::::format(org.apache.rocketmq.logging.inner.LoggingEvent)", "1210": "LoggingBuilder.DefaultLayout::::format(org.apache.rocketmq.logging.inner.LoggingEvent)", "1211": "LoggingBuilder.DefaultLayout::::format(org.apache.rocketmq.logging.inner.LoggingEvent)", "1212": "LoggingBuilder.DefaultLayout::::format(org.apache.rocketmq.logging.inner.LoggingEvent)", "1213": "LoggingBuilder.DefaultLayout::::format(org.apache.rocketmq.logging.inner.LoggingEvent)", "1214": "LoggingBuilder.DefaultLayout::::format(org.apache.rocketmq.logging.inner.LoggingEvent)", "1215": "LoggingBuilder.DefaultLayout::::format(org.apache.rocketmq.logging.inner.LoggingEvent)", "1216": "LoggingBuilder.DefaultLayout::::format(org.apache.rocketmq.logging.inner.LoggingEvent)", "1217": "LoggingBuilder.DefaultLayout::::format(org.apache.rocketmq.logging.inner.LoggingEvent)", "1218": "LoggingBuilder.DefaultLayout::::format(org.apache.rocketmq.logging.inner.LoggingEvent)", "1219": "LoggingBuilder.DefaultLayout::::format(org.apache.rocketmq.logging.inner.LoggingEvent)", "1220": "LoggingBuilder.DefaultLayout::::format(org.apache.rocketmq.logging.inner.LoggingEvent)", "1221": "LoggingBuilder.DefaultLayout::::format(org.apache.rocketmq.logging.inner.LoggingEvent)", "1222": "LoggingBuilder.DefaultLayout::::format(org.apache.rocketmq.logging.inner.LoggingEvent)", "1223": "LoggingBuilder.DefaultLayout::::format(org.apache.rocketmq.logging.inner.LoggingEvent)", "1225": "LoggingBuilder.DefaultLayout::::ignoresThrowable()", "1226": "LoggingBuilder.DefaultLayout::::ignoresThrowable()", "1227": "LoggingBuilder.DefaultLayout::::ignoresThrowable()", "1228": "LoggingBuilder.DefaultLayout::::ignoresThrowable()"}, "test_reverse_method_lines_dic": {"31": "LoggingBuilderTest::::testConsole()", "32": "LoggingBuilderTest::::testConsole()", "33": "LoggingBuilderTest::::testConsole()", "34": "LoggingBuilderTest::::testConsole()", "35": "LoggingBuilderTest::::testConsole()", "36": "LoggingBuilderTest::::testConsole()", "37": "LoggingBuilderTest::::testConsole()", "38": "LoggingBuilderTest::::testConsole()", "39": "LoggingBuilderTest::::testConsole()", "40": "LoggingBuilderTest::::testConsole()", "41": "LoggingBuilderTest::::testConsole()", "42": "LoggingBuilderTest::::testConsole()", "43": "LoggingBuilderTest::::testConsole()", "44": "LoggingBuilderTest::::testConsole()", "45": "LoggingBuilderTest::::testConsole()", "46": "LoggingBuilderTest::::testConsole()", "48": "LoggingBuilderTest::::testFileAppender()", "49": "LoggingBuilderTest::::testFileAppender()", "50": "LoggingBuilderTest::::testFileAppender()", "51": "LoggingBuilderTest::::testFileAppender()", "52": "LoggingBuilderTest::::testFileAppender()", "53": "LoggingBuilderTest::::testFileAppender()", "54": "LoggingBuilderTest::::testFileAppender()", "55": "LoggingBuilderTest::::testFileAppender()", "56": "LoggingBuilderTest::::testFileAppender()", "57": "LoggingBuilderTest::::testFileAppender()", "58": "LoggingBuilderTest::::testFileAppender()", "59": "LoggingBuilderTest::::testFileAppender()", "60": "LoggingBuilderTest::::testFileAppender()", "61": "LoggingBuilderTest::::testFileAppender()", "63": "LoggingBuilderTest::::testRollingFileAppender()", "64": "LoggingBuilderTest::::testRollingFileAppender()", "65": "LoggingBuilderTest::::testRollingFileAppender()", "66": "LoggingBuilderTest::::testRollingFileAppender()", "67": "LoggingBuilderTest::::testRollingFileAppender()", "68": "LoggingBuilderTest::::testRollingFileAppender()", "69": "LoggingBuilderTest::::testRollingFileAppender()", "70": "LoggingBuilderTest::::testRollingFileAppender()", "71": "LoggingBuilderTest::::testRollingFileAppender()", "72": "LoggingBuilderTest::::testRollingFileAppender()", "73": "LoggingBuilderTest::::testRollingFileAppender()", "74": "LoggingBuilderTest::::testRollingFileAppender()", "75": "LoggingBuilderTest::::testRollingFileAppender()", "76": "LoggingBuilderTest::::testRollingFileAppender()", "77": "LoggingBuilderTest::::testRollingFileAppender()", "78": "LoggingBuilderTest::::testRollingFileAppender()", "79": "LoggingBuilderTest::::testRollingFileAppender()", "80": "LoggingBuilderTest::::testRollingFileAppender()", "81": "LoggingBuilderTest::::testRollingFileAppender()", "82": "LoggingBuilderTest::::testRollingFileAppender()", "83": "LoggingBuilderTest::::testRollingFileAppender()", "84": "LoggingBuilderTest::::testRollingFileAppender()", "85": "LoggingBuilderTest::::testRollingFileAppender()", "86": "LoggingBuilderTest::::testRollingFileAppender()", "87": "LoggingBuilderTest::::testRollingFileAppender()", "88": "LoggingBuilderTest::::testRollingFileAppender()", "89": "LoggingBuilderTest::::testRollingFileAppender()", "92": "LoggingBuilderTest::::testDailyRollingFileAppender()", "93": "LoggingBuilderTest::::testDailyRollingFileAppender()", "94": "LoggingBuilderTest::::testDailyRollingFileAppender()", "95": "LoggingBuilderTest::::testDailyRollingFileAppender()", "96": "LoggingBuilderTest::::testDailyRollingFileAppender()", "97": "LoggingBuilderTest::::testDailyRollingFileAppender()", "98": "LoggingBuilderTest::::testDailyRollingFileAppender()", "99": "LoggingBuilderTest::::testDailyRollingFileAppender()", "100": "LoggingBuilderTest::::testDailyRollingFileAppender()", "101": "LoggingBuilderTest::::testDailyRollingFileAppender()", "102": "LoggingBuilderTest::::testDailyRollingFileAppender()", "103": "LoggingBuilderTest::::testDailyRollingFileAppender()", "104": "LoggingBuilderTest::::testDailyRollingFileAppender()", "105": "LoggingBuilderTest::::testDailyRollingFileAppender()", "106": "LoggingBuilderTest::::testDailyRollingFileAppender()", "107": "LoggingBuilderTest::::testDailyRollingFileAppender()", "108": "LoggingBuilderTest::::testDailyRollingFileAppender()", "109": "LoggingBuilderTest::::testDailyRollingFileAppender()", "110": "LoggingBuilderTest::::testDailyRollingFileAppender()", "111": "LoggingBuilderTest::::testDailyRollingFileAppender()", "112": "LoggingBuilderTest::::testDailyRollingFileAppender()"}, "tests": [{"test_lines": [31, 46], "covered_lines": [50, 53, 59, 61, 63, 66, 67, 76, 77, 78, 79, 80, 131, 134, 138, 427, 428, 429, 432, 434, 438, 440, 444, 448, 449, 455, 462, 464, 476, 480, 483, 484, 487, 492, 498, 502, 525, 527, 528, 536, 537, 539, 543, 552, 553, 554, 555, 558, 560, 570, 571, 573, 576, 577, 578, 591, 597, 600, 1110, 1112, 1113, 1116, 1118, 1119, 1125, 1137, 1140, 1142, 1143, 1147, 1151, 1154, 1164, 1165, 1169, 1172, 1199, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1221, 1222, 1227]}, {"test_lines": [48, 61], "covered_lines": [50, 53, 59, 61, 63, 66, 67, 84, 85, 86, 87, 88, 89, 90, 91, 92, 123, 124, 125, 126, 127, 131, 134, 135, 136, 147, 149, 151, 157, 159, 160, 162, 164, 166, 167, 168, 171, 172, 173, 174, 177, 185, 186, 188, 190, 192, 193, 195, 196, 227, 228, 232, 233, 234, 235, 238, 244, 246, 247, 248, 249, 250, 251, 252, 254, 256, 257, 296, 300, 301, 302, 303, 304, 311, 312, 313, 314, 315, 366, 368, 369, 370, 371, 372, 375, 378, 379, 381, 382, 383, 385, 386, 387, 388, 391, 392, 393, 395, 396, 397, 401, 402, 404, 406, 407, 408, 409, 410, 411, 414, 417, 418, 427, 428, 429, 432, 434, 438, 440, 444, 448, 449, 455, 462, 464, 467, 468, 480, 483, 484, 487, 492, 498, 502, 506, 509, 510, 511, 512, 515, 517, 520, 522, 525, 527, 528, 530, 534, 536, 539, 543, 547, 548, 558, 560, 570, 571, 573, 576, 577, 578, 581, 582, 583, 588, 591, 597, 600, 607, 609, 611, 613, 615, 616, 625, 626, 637, 639, 643, 648, 651, 653, 659, 661, 672, 673, 676, 677, 680, 688, 690, 694, 697, 710, 711, 712, 715, 716, 717, 718, 719, 720, 721, 722, 725, 726, 729, 730, 731, 732, 1151, 1154, 1164, 1165, 1169, 1172, 1199, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1221, 1222, 1227]}, {"test_lines": [63, 89], "covered_lines": [50, 53, 59, 61, 63, 66, 67, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 123, 124, 125, 126, 127, 131, 134, 135, 136, 147, 149, 151, 157, 159, 160, 162, 164, 166, 167, 168, 171, 172, 173, 174, 177, 185, 186, 188, 190, 192, 193, 195, 196, 227, 228, 232, 233, 234, 235, 238, 244, 246, 247, 248, 249, 250, 251, 252, 254, 256, 257, 296, 300, 301, 302, 303, 304, 311, 312, 313, 314, 315, 366, 368, 369, 370, 371, 372, 375, 378, 379, 381, 382, 383, 385, 386, 387, 388, 391, 392, 393, 395, 396, 397, 401, 402, 404, 406, 407, 408, 409, 410, 411, 414, 417, 418, 427, 428, 429, 444, 448, 449, 455, 462, 464, 467, 468, 480, 483, 484, 487, 492, 498, 502, 506, 509, 510, 511, 512, 515, 517, 520, 522, 525, 527, 528, 530, 534, 536, 539, 543, 547, 548, 558, 560, 570, 571, 573, 576, 577, 578, 581, 582, 583, 588, 591, 592, 593, 597, 600, 607, 609, 611, 613, 615, 616, 625, 626, 637, 639, 643, 648, 651, 653, 659, 661, 672, 673, 676, 677, 680, 688, 690, 694, 697, 710, 711, 712, 715, 716, 717, 718, 719, 720, 721, 722, 729, 730, 731, 732, 738, 740, 742, 745, 746, 760, 761, 762, 763, 765, 767, 768, 769, 770, 771, 774, 775, 776, 777, 778, 779, 783, 784, 786, 788, 789, 790, 792, 805, 807, 808, 814, 816, 820, 821, 822, 823, 825, 828, 829, 832, 833, 836, 837, 840, 841, 842, 843, 844, 847, 853, 854, 855, 859, 860, 863, 864, 867, 871, 872, 1151, 1154, 1164, 1165, 1169, 1172, 1199, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1221, 1222, 1227]}]}, "/bernard/dataset_construction/prep/repos/RocketMQC/logging/src/main/java/org/apache/rocketmq/logging/inner/Logger.java": {"class_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package org.apache.rocketmq.logging.inner;\n", "\n", "import java.util.Enumeration;\n", "import java.util.Hashtable;\n", "import java.util.Vector;\n", "\n", "\n", "public class Logger implements Appender.AppenderPipeline {\n", "\n", "    private static final String FQCN = Logger.class.getName();\n", "\n", "    private static final DefaultLoggerRepository REPOSITORY = new DefaultLoggerRepository(new RootLogger(Level.DEBUG));\n", "\n", "    public static LoggerRepository getRepository() {\n", "        return REPOSITORY;\n", "    }\n", "\n", "    private String name;\n", "\n", "    volatile private Level level;\n", "\n", "    volatile private Logger parent;\n", "\n", "    Appender.AppenderPipelineImpl appenderPipeline;\n", "\n", "    private boolean additive = true;\n", "\n", "    private Logger(String name) {\n", "        this.name = name;\n", "    }\n", "\n", "    static public Logger getLogger(String name) {\n", "        return getRepository().getLogger(name);\n", "    }\n", "\n", "    static public Logger getLogger(Class clazz) {\n", "        return getRepository().getLogger(clazz.getName());\n", "    }\n", "\n", "    public static Logger getRootLogger() {\n", "        return getRepository().getRootLogger();\n", "    }\n", "\n", "    synchronized public void addAppender(Appender newAppender) {\n", "        if (appenderPipeline == null) {\n", "            appenderPipeline = new Appender.AppenderPipelineImpl();\n", "        }\n", "        appenderPipeline.addAppender(newAppender);\n", "    }\n", "\n", "    public void callAppenders(LoggingEvent event) {\n", "        int writes = 0;\n", "\n", "        for (Logger logger = this; logger != null; logger = logger.parent) {\n", "            synchronized (logger) {\n", "                if (logger.appenderPipeline != null) {\n", "                    writes += logger.appenderPipeline.appendLoopOnAppenders(event);\n", "                }\n", "                if (!logger.additive) {\n", "                    break;\n", "                }\n", "            }\n", "        }\n", "\n", "        if (writes == 0) {\n", "            getRepository().emitNoAppenderWarning(this);\n", "        }\n", "    }\n", "\n", "    synchronized void closeNestedAppenders() {\n", "        Enumeration enumeration = this.getAllAppenders();\n", "        if (enumeration != null) {\n", "            while (enumeration.hasMoreElements()) {\n", "                Appender a = (Appender) enumeration.nextElement();\n", "                if (a instanceof Appender.AppenderPipeline) {\n", "                    a.close();\n", "                }\n", "            }\n", "        }\n", "    }\n", "\n", "    public void debug(Object message) {\n", "        if (getRepository().isDisabled(Level.DEBUG_INT)) {\n", "            return;\n", "        }\n", "        if (Level.DEBUG.isGreaterOrEqual(this.getEffectiveLevel())) {\n", "            forcedLog(FQCN, Level.DEBUG, message, null);\n", "        }\n", "    }\n", "\n", "\n", "    public void debug(Object message, Throwable t) {\n", "        if (getRepository().isDisabled(Level.DEBUG_INT)) {\n", "            return;\n", "        }\n", "        if (Level.DEBUG.isGreaterOrEqual(this.getEffectiveLevel())) {\n", "            forcedLog(FQCN, Level.DEBUG, message, t);\n", "        }\n", "    }\n", "\n", "\n", "    public void error(Object message) {\n", "        if (getRepository().isDisabled(Level.ERROR_INT)) {\n", "            return;\n", "        }\n", "        if (Level.ERROR.isGreaterOrEqual(this.getEffectiveLevel())) {\n", "            forcedLog(FQCN, Level.ERROR, message, null);\n", "        }\n", "    }\n", "\n", "    public void error(Object message, Throwable t) {\n", "        if (getRepository().isDisabled(Level.ERROR_INT)) {\n", "            return;\n", "        }\n", "        if (Level.ERROR.isGreaterOrEqual(this.getEffectiveLevel())) {\n", "            forcedLog(FQCN, Level.ERROR, message, t);\n", "        }\n", "\n", "    }\n", "\n", "\n", "    protected void forcedLog(String fqcn, Level level, Object message, Throwable t) {\n", "        callAppenders(new LoggingEvent(fqcn, this, level, message, t));\n", "    }\n", "\n", "\n", "    synchronized public Enumeration getAllAppenders() {\n", "        if (appenderPipeline == null) {\n", "            return null;\n", "        } else {\n", "            return appenderPipeline.getAllAppenders();\n", "        }\n", "    }\n", "\n", "    synchronized public Appender getAppender(String name) {\n", "        if (appenderPipeline == null || name == null) {\n", "            return null;\n", "        }\n", "\n", "        return appenderPipeline.getAppender(name);\n", "    }\n", "\n", "    public Level getEffectiveLevel() {\n", "        for (Logger c = this; c != null; c = c.parent) {\n", "            if (c.level != null) {\n", "                return c.level;\n", "            }\n", "        }\n", "        return null;\n", "    }\n", "\n", "    public final String getName() {\n", "        return name;\n", "    }\n", "\n", "    final public Level getLevel() {\n", "        return this.level;\n", "    }\n", "\n", "\n", "    public void info(Object message) {\n", "        if (getRepository().isDisabled(Level.INFO_INT)) {\n", "            return;\n", "        }\n", "        if (Level.INFO.isGreaterOrEqual(this.getEffectiveLevel())) {\n", "            forcedLog(FQCN, Level.INFO, message, null);\n", "        }\n", "    }\n", "\n", "    public void info(Object message, Throwable t) {\n", "        if (getRepository().isDisabled(Level.INFO_INT)) {\n", "            return;\n", "        }\n", "        if (Level.INFO.isGreaterOrEqual(this.getEffectiveLevel())) {\n", "            forcedLog(FQCN, Level.INFO, message, t);\n", "        }\n", "    }\n", "\n", "    public boolean isAttached(Appender appender) {\n", "        return appender != null && appenderPipeline != null && appenderPipeline.isAttached(appender);\n", "    }\n", "\n", "    synchronized public void removeAllAppenders() {\n", "        if (appenderPipeline != null) {\n", "            appenderPipeline.removeAllAppenders();\n", "            appenderPipeline = null;\n", "        }\n", "    }\n", "\n", "    synchronized public void removeAppender(Appender appender) {\n", "        if (appender == null || appenderPipeline == null) {\n", "            return;\n", "        }\n", "        appenderPipeline.removeAppender(appender);\n", "    }\n", "\n", "    synchronized public void removeAppender(String name) {\n", "        if (name == null || appenderPipeline == null) {\n", "            return;\n", "        }\n", "        appenderPipeline.removeAppender(name);\n", "    }\n", "\n", "    public void setAdditivity(boolean additive) {\n", "        this.additive = additive;\n", "    }\n", "\n", "    public void setLevel(Level level) {\n", "        this.level = level;\n", "    }\n", "\n", "    public void warn(Object message) {\n", "        if (getRepository().isDisabled(Level.WARN_INT)) {\n", "            return;\n", "        }\n", "\n", "        if (Level.WARN.isGreaterOrEqual(this.getEffectiveLevel())) {\n", "            forcedLog(FQCN, Level.WARN, message, null);\n", "        }\n", "    }\n", "\n", "    public void warn(Object message, Throwable t) {\n", "        if (getRepository().isDisabled(Level.WARN_INT)) {\n", "            return;\n", "        }\n", "        if (Level.WARN.isGreaterOrEqual(this.getEffectiveLevel())) {\n", "            forcedLog(FQCN, Level.WARN, message, t);\n", "        }\n", "    }\n", "\n", "    public interface LoggerRepository {\n", "\n", "        boolean isDisabled(int level);\n", "\n", "        void setLogLevel(Level level);\n", "\n", "        void emitNoAppenderWarning(Logger cat);\n", "\n", "        Level getLogLevel();\n", "\n", "        Logger getLogger(String name);\n", "\n", "        Logger getRootLogger();\n", "\n", "        Logger exists(String name);\n", "\n", "        void shutdown();\n", "\n", "        Enumeration getCurrentLoggers();\n", "    }\n", "\n", "    public static class ProvisionNode extends Vector<Logger> {\n", "\n", "        ProvisionNode(Logger logger) {\n", "            super();\n", "            addElement(logger);\n", "        }\n", "    }\n", "\n", "    public static class DefaultLoggerRepository implements LoggerRepository {\n", "\n", "        final Hashtable<CategoryKey,Object> ht = new Hashtable<CategoryKey,Object>();\n", "        Logger root;\n", "\n", "        int logLevelInt;\n", "        Level logLevel;\n", "\n", "        boolean emittedNoAppenderWarning = false;\n", "\n", "        public DefaultLoggerRepository(Logger root) {\n", "            this.root = root;\n", "            setLogLevel(Level.ALL);\n", "        }\n", "\n", "        public void emitNoAppenderWarning(Logger cat) {\n", "            if (!this.emittedNoAppenderWarning) {\n", "                SysLogger.warn(\"No appenders could be found for logger (\" + cat.getName() + \").\");\n", "                SysLogger.warn(\"Please initialize the logger system properly.\");\n", "                this.emittedNoAppenderWarning = true;\n", "            }\n", "        }\n", "\n", "        public Logger exists(String name) {\n", "            Object o = ht.get(new CategoryKey(name));\n", "            if (o instanceof Logger) {\n", "                return (Logger) o;\n", "            } else {\n", "                return null;\n", "            }\n", "        }\n", "\n", "        public void setLogLevel(Level l) {\n", "            if (l != null) {\n", "                logLevelInt = l.level;\n", "                logLevel = l;\n", "            }\n", "        }\n", "\n", "        public Level getLogLevel() {\n", "            return logLevel;\n", "        }\n", "\n", "\n", "        public Logger getLogger(String name) {\n", "            CategoryKey key = new CategoryKey(name);\n", "            Logger logger;\n", "\n", "            synchronized (ht) {\n", "                Object o = ht.get(key);\n", "                if (o == null) {\n", "                    logger = makeNewLoggerInstance(name);\n", "                    ht.put(key, logger);\n", "                    updateParents(logger);\n", "                    return logger;\n", "                } else if (o instanceof Logger) {\n", "                    return (Logger) o;\n", "                } else if (o instanceof ProvisionNode) {\n", "                    logger = makeNewLoggerInstance(name);\n", "                    ht.put(key, logger);\n", "                    updateChildren((ProvisionNode) o, logger);\n", "                    updateParents(logger);\n", "                    return logger;\n", "                } else {\n", "                    return null;\n", "                }\n", "            }\n", "        }\n", "\n", "        public Logger makeNewLoggerInstance(String name) {\n", "            return new Logger(name);\n", "        }\n", "\n", "        public Enumeration getCurrentLoggers() {\n", "            Vector<Logger> loggers = new Vector<Logger>(ht.size());\n", "\n", "            Enumeration elems = ht.elements();\n", "            while (elems.hasMoreElements()) {\n", "                Object o = elems.nextElement();\n", "                if (o instanceof Logger) {\n", "                    Logger logger = (Logger)o;\n", "                    loggers.addElement(logger);\n", "                }\n", "            }\n", "            return loggers.elements();\n", "        }\n", "\n", "\n", "        public Logger getRootLogger() {\n", "            return root;\n", "        }\n", "\n", "        public boolean isDisabled(int level) {\n", "            return logLevelInt > level;\n", "        }\n", "\n", "\n", "        public void shutdown() {\n", "            Logger root = getRootLogger();\n", "            root.closeNestedAppenders();\n", "\n", "            synchronized (ht) {\n", "                Enumeration cats = this.getCurrentLoggers();\n", "                while (cats.hasMoreElements()) {\n", "                    Logger c = (Logger) cats.nextElement();\n", "                    c.closeNestedAppenders();\n", "                }\n", "                root.removeAllAppenders();\n", "            }\n", "        }\n", "\n", "\n", "        private void updateParents(Logger cat) {\n", "            String name = cat.name;\n", "            int length = name.length();\n", "            boolean parentFound = false;\n", "\n", "            for (int i = name.lastIndexOf('.', length - 1); i >= 0;\n", "                 i = name.lastIndexOf('.', i - 1)) {\n", "                String substr = name.substring(0, i);\n", "\n", "                CategoryKey key = new CategoryKey(substr);\n", "                Object o = ht.get(key);\n", "                if (o == null) {\n", "                    ht.put(key, new ProvisionNode(cat));\n", "                } else if (o instanceof Logger) {\n", "                    parentFound = true;\n", "                    cat.parent = (Logger) o;\n", "                    break;\n", "                } else if (o instanceof ProvisionNode) {\n", "                    ((ProvisionNode) o).addElement(cat);\n", "                } else {\n", "                    Exception e = new IllegalStateException(\"unexpected object type \" + o.getClass() + \" in ht.\");\n", "                    e.printStackTrace();\n", "                }\n", "            }\n", "            if (!parentFound) {\n", "                cat.parent = root;\n", "            }\n", "        }\n", "\n", "        private void updateChildren(ProvisionNode pn, Logger logger) {\n", "            final int last = pn.size();\n", "\n", "            for (int i = 0; i < last; i++) {\n", "                Logger l = pn.elementAt(i);\n", "                if (!l.parent.name.startsWith(logger.name)) {\n", "                    logger.parent = l.parent;\n", "                    l.parent = logger;\n", "                }\n", "            }\n", "        }\n", "\n", "        private class CategoryKey {\n", "\n", "            String name;\n", "            int hashCache;\n", "\n", "            CategoryKey(String name) {\n", "                this.name = name;\n", "                hashCache = name.hashCode();\n", "            }\n", "\n", "            final public int hashCode() {\n", "                return hashCache;\n", "            }\n", "\n", "            final public boolean equals(Object o) {\n", "                if (this == o) {\n", "                    return true;\n", "                }\n", "\n", "                if (o != null && o instanceof CategoryKey) {\n", "                    CategoryKey cc = (CategoryKey) o;\n", "                    return name.equals(cc.name);\n", "                } else {\n", "                    return false;\n", "                }\n", "            }\n", "        }\n", "\n", "    }\n", "\n", "    public static class RootLogger extends Logger {\n", "\n", "        public RootLogger(Level level) {\n", "            super(\"root\");\n", "            setLevel(level);\n", "        }\n", "    }\n", "}\n"], "test_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package org.apache.rocketmq.logging.inner;\n", "\n", "import org.apache.rocketmq.logging.BasicLoggerTest;\n", "import org.apache.rocketmq.logging.InnerLoggerFactory;\n", "import org.apache.rocketmq.logging.InternalLogger;\n", "import org.apache.rocketmq.logging.InternalLoggerFactory;\n", "import org.junit.After;\n", "import org.junit.Assert;\n", "import org.junit.Before;\n", "import org.junit.Test;\n", "\n", "import java.io.ByteArrayOutputStream;\n", "import java.io.IOException;\n", "import java.io.PrintStream;\n", "\n", "public class LoggerTest extends BasicLoggerTest {\n", "\n", "\n", "    @Before\n", "    public void init() {\n", "        InternalLoggerFactory.setCurrentLoggerType(InnerLoggerFactory.LOGGER_INNER);\n", "    }\n", "\n", "    @Test\n", "    public void testInnerConsoleLogger() throws IOException {\n", "        PrintStream out = System.out;\n", "        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n", "        System.setOut(new PrintStream(byteArrayOutputStream));\n", "\n", "        Appender consoleAppender = LoggingBuilder.newAppenderBuilder()\n", "            .withConsoleAppender(LoggingBuilder.SYSTEM_OUT)\n", "            .withLayout(LoggingBuilder.newLayoutBuilder().withDefaultLayout().build()).build();\n", "\n", "        Logger.getLogger(\"ConsoleLogger\").addAppender(consoleAppender);\n", "        Logger.getLogger(\"ConsoleLogger\").setLevel(Level.INFO);\n", "\n", "        InternalLogger consoleLogger1 = InternalLoggerFactory.getLogger(\"ConsoleLogger\");\n", "        consoleLogger1.info(\"console info Message\");\n", "        consoleLogger1.error(\"console error Message\", new RuntimeException());\n", "        consoleLogger1.debug(\"console debug message\");\n", "\n", "        consoleLogger1.info(\"console {} test\", \"simple\");\n", "        consoleLogger1.info(\"[WATERMARK] Send Queue Size: {} SlowTimeMills: {}\", 1, 300);\n", "        consoleLogger1.info(\"new consumer connected, group: {} {} {} channel: {}\", \"mygroup\", \"orderly\",\n", "            \"broudcast\", new RuntimeException(\"simple object\"));\n", "\n", "        System.setOut(out);\n", "        consoleAppender.close();\n", "\n", "        String result = new String(byteArrayOutputStream.toByteArray());\n", "\n", "        System.out.println(result);\n", "\n", "        Assert.assertTrue(result.contains(\"info\"));\n", "        Assert.assertTrue(result.contains(\"RuntimeException\"));\n", "        Assert.assertTrue(result.contains(\"WATERMARK\"));\n", "        Assert.assertTrue(result.contains(\"consumer\"));\n", "        Assert.assertTrue(result.contains(\"broudcast\"));\n", "        Assert.assertTrue(result.contains(\"simple test\"));\n", "        Assert.assertTrue(!result.contains(\"debug\"));\n", "    }\n", "\n", "    @Test\n", "    public void testInnerFileLogger() throws IOException {\n", "        String file = loggingDir + \"/inner.log\";\n", "\n", "        Logger fileLogger = Logger.getLogger(\"innerLogger\");\n", "\n", "        Appender myappender = LoggingBuilder.newAppenderBuilder()\n", "            .withDailyFileRollingAppender(file, \"'.'yyyy-MM-dd\")\n", "            .withName(\"innerAppender\")\n", "            .withLayout(LoggingBuilder.newLayoutBuilder().withDefaultLayout().build()).build();\n", "\n", "        fileLogger.addAppender(myappender);\n", "        fileLogger.setLevel(Level.INFO);\n", "\n", "        InternalLogger innerLogger = InternalLoggerFactory.getLogger(\"innerLogger\");\n", "\n", "        innerLogger.info(\"fileLogger info Message\");\n", "        innerLogger.error(\"fileLogger error Message\", new RuntimeException());\n", "        innerLogger.debug(\"fileLogger debug message\");\n", "\n", "        myappender.close();\n", "\n", "        String content = readFile(file);\n", "\n", "        System.out.println(content);\n", "\n", "        Assert.assertTrue(content.contains(\"info\"));\n", "        Assert.assertTrue(content.contains(\"RuntimeException\"));\n", "        Assert.assertTrue(!content.contains(\"debug\"));\n", "    }\n", "\n", "    @After\n", "    public void close() {\n", "        InternalLoggerFactory.setCurrentLoggerType(null);\n", "    }\n", "}\n"], "method_lines_dic": {"Logger::::getRepository()": [31, 33], "Logger::::getLogger(java.lang.String)": [49, 51], "Logger::::getLogger(java.lang.Class)": [53, 55], "Logger::::getRootLogger()": [57, 59], "Logger::::addAppender(org.apache.rocketmq.logging.inner.Appender)": [61, 66], "Logger::::callAppenders(org.apache.rocketmq.logging.inner.LoggingEvent)": [68, 85], "Logger::::closeNestedAppenders()": [87, 97], "Logger::::debug(java.lang.Object)": [99, 106], "Logger::::debug(java.lang.Object,java.lang.Throwable)": [109, 116], "Logger::::error(java.lang.Object)": [119, 126], "Logger::::error(java.lang.Object,java.lang.Throwable)": [128, 136], "Logger::::forcedLog(java.lang.String,org.apache.rocketmq.logging.inner.Level,java.lang.Object,java.lang.Throwable)": [139, 141], "Logger::::getAllAppenders()": [144, 150], "Logger::::getAppender(java.lang.String)": [152, 158], "Logger::::getEffectiveLevel()": [160, 167], "Logger::::getName()": [169, 171], "Logger::::getLevel()": [173, 175], "Logger::::info(java.lang.Object)": [178, 185], "Logger::::info(java.lang.Object,java.lang.Throwable)": [187, 194], "Logger::::isAttached(org.apache.rocketmq.logging.inner.Appender)": [196, 198], "Logger::::removeAllAppenders()": [200, 205], "Logger::::removeAppender(org.apache.rocketmq.logging.inner.Appender)": [207, 212], "Logger::::removeAppender(java.lang.String)": [214, 219], "Logger::::setAdditivity(boolean)": [221, 223], "Logger::::setLevel(org.apache.rocketmq.logging.inner.Level)": [225, 227], "Logger::::warn(java.lang.Object)": [229, 237], "Logger::::warn(java.lang.Object,java.lang.Throwable)": [239, 246], "Logger.LoggerRepository::::isDisabled(int)": [250, 250], "Logger.LoggerRepository::::setLogLevel(org.apache.rocketmq.logging.inner.Level)": [252, 252], "Logger.LoggerRepository::::emitNoAppenderWarning(org.apache.rocketmq.logging.inner.Logger)": [254, 254], "Logger.LoggerRepository::::getLogLevel()": [256, 256], "Logger.LoggerRepository::::getLogger(java.lang.String)": [258, 258], "Logger.LoggerRepository::::getRootLogger()": [260, 260], "Logger.LoggerRepository::::exists(java.lang.String)": [262, 262], "Logger.LoggerRepository::::shutdown()": [264, 264], "Logger.LoggerRepository::::getCurrentLoggers()": [266, 266], "Logger.DefaultLoggerRepository::::emitNoAppenderWarning(org.apache.rocketmq.logging.inner.Logger)": [292, 298], "Logger.DefaultLoggerRepository::::exists(java.lang.String)": [300, 307], "Logger.DefaultLoggerRepository::::setLogLevel(org.apache.rocketmq.logging.inner.Level)": [309, 314], "Logger.DefaultLoggerRepository::::getLogLevel()": [316, 318], "Logger.DefaultLoggerRepository::::getLogger(java.lang.String)": [321, 344], "Logger.DefaultLoggerRepository::::makeNewLoggerInstance(java.lang.String)": [346, 348], "Logger.DefaultLoggerRepository::::getCurrentLoggers()": [350, 362], "Logger.DefaultLoggerRepository::::getRootLogger()": [365, 367], "Logger.DefaultLoggerRepository::::isDisabled(int)": [369, 371], "Logger.DefaultLoggerRepository::::shutdown()": [374, 386], "Logger.DefaultLoggerRepository::::updateParents(org.apache.rocketmq.logging.inner.Logger)": [389, 416], "Logger.DefaultLoggerRepository::::updateChildren(org.apache.rocketmq.logging.inner.Logger.ProvisionNode,org.apache.rocketmq.logging.inner.Logger)": [418, 428], "Logger.DefaultLoggerRepository.CategoryKey::::hashCode()": [440, 442], "Logger.DefaultLoggerRepository.CategoryKey::::equals(java.lang.Object)": [444, 455]}, "test_method_lines_dic": {"LoggerTest::::init()": [36, 39], "LoggerTest::::testInnerConsoleLogger()": [41, 78], "LoggerTest::::testInnerFileLogger()": [80, 109], "LoggerTest::::close()": [111, 114]}, "reverse_method_lines_dic": {"31": "Logger::::getRepository()", "32": "Logger::::getRepository()", "33": "Logger::::getRepository()", "49": "Logger::::getLogger(java.lang.String)", "50": "Logger::::getLogger(java.lang.String)", "51": "Logger::::getLogger(java.lang.String)", "53": "Logger::::getLogger(java.lang.Class)", "54": "Logger::::getLogger(java.lang.Class)", "55": "Logger::::getLogger(java.lang.Class)", "57": "Logger::::getRootLogger()", "58": "Logger::::getRootLogger()", "59": "Logger::::getRootLogger()", "61": "Logger::::addAppender(org.apache.rocketmq.logging.inner.Appender)", "62": "Logger::::addAppender(org.apache.rocketmq.logging.inner.Appender)", "63": "Logger::::addAppender(org.apache.rocketmq.logging.inner.Appender)", "64": "Logger::::addAppender(org.apache.rocketmq.logging.inner.Appender)", "65": "Logger::::addAppender(org.apache.rocketmq.logging.inner.Appender)", "66": "Logger::::addAppender(org.apache.rocketmq.logging.inner.Appender)", "68": "Logger::::callAppenders(org.apache.rocketmq.logging.inner.LoggingEvent)", "69": "Logger::::callAppenders(org.apache.rocketmq.logging.inner.LoggingEvent)", "70": "Logger::::callAppenders(org.apache.rocketmq.logging.inner.LoggingEvent)", "71": "Logger::::callAppenders(org.apache.rocketmq.logging.inner.LoggingEvent)", "72": "Logger::::callAppenders(org.apache.rocketmq.logging.inner.LoggingEvent)", "73": "Logger::::callAppenders(org.apache.rocketmq.logging.inner.LoggingEvent)", "74": "Logger::::callAppenders(org.apache.rocketmq.logging.inner.LoggingEvent)", "75": "Logger::::callAppenders(org.apache.rocketmq.logging.inner.LoggingEvent)", "76": "Logger::::callAppenders(org.apache.rocketmq.logging.inner.LoggingEvent)", "77": "Logger::::callAppenders(org.apache.rocketmq.logging.inner.LoggingEvent)", "78": "Logger::::callAppenders(org.apache.rocketmq.logging.inner.LoggingEvent)", "79": "Logger::::callAppenders(org.apache.rocketmq.logging.inner.LoggingEvent)", "80": "Logger::::callAppenders(org.apache.rocketmq.logging.inner.LoggingEvent)", "81": "Logger::::callAppenders(org.apache.rocketmq.logging.inner.LoggingEvent)", "82": "Logger::::callAppenders(org.apache.rocketmq.logging.inner.LoggingEvent)", "83": "Logger::::callAppenders(org.apache.rocketmq.logging.inner.LoggingEvent)", "84": "Logger::::callAppenders(org.apache.rocketmq.logging.inner.LoggingEvent)", "85": "Logger::::callAppenders(org.apache.rocketmq.logging.inner.LoggingEvent)", "87": "Logger::::closeNestedAppenders()", "88": "Logger::::closeNestedAppenders()", "89": "Logger::::closeNestedAppenders()", "90": "Logger::::closeNestedAppenders()", "91": "Logger::::closeNestedAppenders()", "92": "Logger::::closeNestedAppenders()", "93": "Logger::::closeNestedAppenders()", "94": "Logger::::closeNestedAppenders()", "95": "Logger::::closeNestedAppenders()", "96": "Logger::::closeNestedAppenders()", "97": "Logger::::closeNestedAppenders()", "99": "Logger::::debug(java.lang.Object)", "100": "Logger::::debug(java.lang.Object)", "101": "Logger::::debug(java.lang.Object)", "102": "Logger::::debug(java.lang.Object)", "103": "Logger::::debug(java.lang.Object)", "104": "Logger::::debug(java.lang.Object)", "105": "Logger::::debug(java.lang.Object)", "106": "Logger::::debug(java.lang.Object)", "109": "Logger::::debug(java.lang.Object,java.lang.Throwable)", "110": "Logger::::debug(java.lang.Object,java.lang.Throwable)", "111": "Logger::::debug(java.lang.Object,java.lang.Throwable)", "112": "Logger::::debug(java.lang.Object,java.lang.Throwable)", "113": "Logger::::debug(java.lang.Object,java.lang.Throwable)", "114": "Logger::::debug(java.lang.Object,java.lang.Throwable)", "115": "Logger::::debug(java.lang.Object,java.lang.Throwable)", "116": "Logger::::debug(java.lang.Object,java.lang.Throwable)", "119": "Logger::::error(java.lang.Object)", "120": "Logger::::error(java.lang.Object)", "121": "Logger::::error(java.lang.Object)", "122": "Logger::::error(java.lang.Object)", "123": "Logger::::error(java.lang.Object)", "124": "Logger::::error(java.lang.Object)", "125": "Logger::::error(java.lang.Object)", "126": "Logger::::error(java.lang.Object)", "128": "Logger::::error(java.lang.Object,java.lang.Throwable)", "129": "Logger::::error(java.lang.Object,java.lang.Throwable)", "130": "Logger::::error(java.lang.Object,java.lang.Throwable)", "131": "Logger::::error(java.lang.Object,java.lang.Throwable)", "132": "Logger::::error(java.lang.Object,java.lang.Throwable)", "133": "Logger::::error(java.lang.Object,java.lang.Throwable)", "134": "Logger::::error(java.lang.Object,java.lang.Throwable)", "135": "Logger::::error(java.lang.Object,java.lang.Throwable)", "136": "Logger::::error(java.lang.Object,java.lang.Throwable)", "139": "Logger::::forcedLog(java.lang.String,org.apache.rocketmq.logging.inner.Level,java.lang.Object,java.lang.Throwable)", "140": "Logger::::forcedLog(java.lang.String,org.apache.rocketmq.logging.inner.Level,java.lang.Object,java.lang.Throwable)", "141": "Logger::::forcedLog(java.lang.String,org.apache.rocketmq.logging.inner.Level,java.lang.Object,java.lang.Throwable)", "144": "Logger::::getAllAppenders()", "145": "Logger::::getAllAppenders()", "146": "Logger::::getAllAppenders()", "147": "Logger::::getAllAppenders()", "148": "Logger::::getAllAppenders()", "149": "Logger::::getAllAppenders()", "150": "Logger::::getAllAppenders()", "152": "Logger::::getAppender(java.lang.String)", "153": "Logger::::getAppender(java.lang.String)", "154": "Logger::::getAppender(java.lang.String)", "155": "Logger::::getAppender(java.lang.String)", "156": "Logger::::getAppender(java.lang.String)", "157": "Logger::::getAppender(java.lang.String)", "158": "Logger::::getAppender(java.lang.String)", "160": "Logger::::getEffectiveLevel()", "161": "Logger::::getEffectiveLevel()", "162": "Logger::::getEffectiveLevel()", "163": "Logger::::getEffectiveLevel()", "164": "Logger::::getEffectiveLevel()", "165": "Logger::::getEffectiveLevel()", "166": "Logger::::getEffectiveLevel()", "167": "Logger::::getEffectiveLevel()", "169": "Logger::::getName()", "170": "Logger::::getName()", "171": "Logger::::getName()", "173": "Logger::::getLevel()", "174": "Logger::::getLevel()", "175": "Logger::::getLevel()", "178": "Logger::::info(java.lang.Object)", "179": "Logger::::info(java.lang.Object)", "180": "Logger::::info(java.lang.Object)", "181": "Logger::::info(java.lang.Object)", "182": "Logger::::info(java.lang.Object)", "183": "Logger::::info(java.lang.Object)", "184": "Logger::::info(java.lang.Object)", "185": "Logger::::info(java.lang.Object)", "187": "Logger::::info(java.lang.Object,java.lang.Throwable)", "188": "Logger::::info(java.lang.Object,java.lang.Throwable)", "189": "Logger::::info(java.lang.Object,java.lang.Throwable)", "190": "Logger::::info(java.lang.Object,java.lang.Throwable)", "191": "Logger::::info(java.lang.Object,java.lang.Throwable)", "192": "Logger::::info(java.lang.Object,java.lang.Throwable)", "193": "Logger::::info(java.lang.Object,java.lang.Throwable)", "194": "Logger::::info(java.lang.Object,java.lang.Throwable)", "196": "Logger::::isAttached(org.apache.rocketmq.logging.inner.Appender)", "197": "Logger::::isAttached(org.apache.rocketmq.logging.inner.Appender)", "198": "Logger::::isAttached(org.apache.rocketmq.logging.inner.Appender)", "200": "Logger::::removeAllAppenders()", "201": "Logger::::removeAllAppenders()", "202": "Logger::::removeAllAppenders()", "203": "Logger::::removeAllAppenders()", "204": "Logger::::removeAllAppenders()", "205": "Logger::::removeAllAppenders()", "207": "Logger::::removeAppender(org.apache.rocketmq.logging.inner.Appender)", "208": "Logger::::removeAppender(org.apache.rocketmq.logging.inner.Appender)", "209": "Logger::::removeAppender(org.apache.rocketmq.logging.inner.Appender)", "210": "Logger::::removeAppender(org.apache.rocketmq.logging.inner.Appender)", "211": "Logger::::removeAppender(org.apache.rocketmq.logging.inner.Appender)", "212": "Logger::::removeAppender(org.apache.rocketmq.logging.inner.Appender)", "214": "Logger::::removeAppender(java.lang.String)", "215": "Logger::::removeAppender(java.lang.String)", "216": "Logger::::removeAppender(java.lang.String)", "217": "Logger::::removeAppender(java.lang.String)", "218": "Logger::::removeAppender(java.lang.String)", "219": "Logger::::removeAppender(java.lang.String)", "221": "Logger::::setAdditivity(boolean)", "222": "Logger::::setAdditivity(boolean)", "223": "Logger::::setAdditivity(boolean)", "225": "Logger::::setLevel(org.apache.rocketmq.logging.inner.Level)", "226": "Logger::::setLevel(org.apache.rocketmq.logging.inner.Level)", "227": "Logger::::setLevel(org.apache.rocketmq.logging.inner.Level)", "229": "Logger::::warn(java.lang.Object)", "230": "Logger::::warn(java.lang.Object)", "231": "Logger::::warn(java.lang.Object)", "232": "Logger::::warn(java.lang.Object)", "233": "Logger::::warn(java.lang.Object)", "234": "Logger::::warn(java.lang.Object)", "235": "Logger::::warn(java.lang.Object)", "236": "Logger::::warn(java.lang.Object)", "237": "Logger::::warn(java.lang.Object)", "239": "Logger::::warn(java.lang.Object,java.lang.Throwable)", "240": "Logger::::warn(java.lang.Object,java.lang.Throwable)", "241": "Logger::::warn(java.lang.Object,java.lang.Throwable)", "242": "Logger::::warn(java.lang.Object,java.lang.Throwable)", "243": "Logger::::warn(java.lang.Object,java.lang.Throwable)", "244": "Logger::::warn(java.lang.Object,java.lang.Throwable)", "245": "Logger::::warn(java.lang.Object,java.lang.Throwable)", "246": "Logger::::warn(java.lang.Object,java.lang.Throwable)", "250": "Logger.LoggerRepository::::isDisabled(int)", "252": "Logger.LoggerRepository::::setLogLevel(org.apache.rocketmq.logging.inner.Level)", "254": "Logger.LoggerRepository::::emitNoAppenderWarning(org.apache.rocketmq.logging.inner.Logger)", "256": "Logger.LoggerRepository::::getLogLevel()", "258": "Logger.LoggerRepository::::getLogger(java.lang.String)", "260": "Logger.LoggerRepository::::getRootLogger()", "262": "Logger.LoggerRepository::::exists(java.lang.String)", "264": "Logger.LoggerRepository::::shutdown()", "266": "Logger.LoggerRepository::::getCurrentLoggers()", "292": "Logger.DefaultLoggerRepository::::emitNoAppenderWarning(org.apache.rocketmq.logging.inner.Logger)", "293": "Logger.DefaultLoggerRepository::::emitNoAppenderWarning(org.apache.rocketmq.logging.inner.Logger)", "294": "Logger.DefaultLoggerRepository::::emitNoAppenderWarning(org.apache.rocketmq.logging.inner.Logger)", "295": "Logger.DefaultLoggerRepository::::emitNoAppenderWarning(org.apache.rocketmq.logging.inner.Logger)", "296": "Logger.DefaultLoggerRepository::::emitNoAppenderWarning(org.apache.rocketmq.logging.inner.Logger)", "297": "Logger.DefaultLoggerRepository::::emitNoAppenderWarning(org.apache.rocketmq.logging.inner.Logger)", "298": "Logger.DefaultLoggerRepository::::emitNoAppenderWarning(org.apache.rocketmq.logging.inner.Logger)", "300": "Logger.DefaultLoggerRepository::::exists(java.lang.String)", "301": "Logger.DefaultLoggerRepository::::exists(java.lang.String)", "302": "Logger.DefaultLoggerRepository::::exists(java.lang.String)", "303": "Logger.DefaultLoggerRepository::::exists(java.lang.String)", "304": "Logger.DefaultLoggerRepository::::exists(java.lang.String)", "305": "Logger.DefaultLoggerRepository::::exists(java.lang.String)", "306": "Logger.DefaultLoggerRepository::::exists(java.lang.String)", "307": "Logger.DefaultLoggerRepository::::exists(java.lang.String)", "309": "Logger.DefaultLoggerRepository::::setLogLevel(org.apache.rocketmq.logging.inner.Level)", "310": "Logger.DefaultLoggerRepository::::setLogLevel(org.apache.rocketmq.logging.inner.Level)", "311": "Logger.DefaultLoggerRepository::::setLogLevel(org.apache.rocketmq.logging.inner.Level)", "312": "Logger.DefaultLoggerRepository::::setLogLevel(org.apache.rocketmq.logging.inner.Level)", "313": "Logger.DefaultLoggerRepository::::setLogLevel(org.apache.rocketmq.logging.inner.Level)", "314": "Logger.DefaultLoggerRepository::::setLogLevel(org.apache.rocketmq.logging.inner.Level)", "316": "Logger.DefaultLoggerRepository::::getLogLevel()", "317": "Logger.DefaultLoggerRepository::::getLogLevel()", "318": "Logger.DefaultLoggerRepository::::getLogLevel()", "321": "Logger.DefaultLoggerRepository::::getLogger(java.lang.String)", "322": "Logger.DefaultLoggerRepository::::getLogger(java.lang.String)", "323": "Logger.DefaultLoggerRepository::::getLogger(java.lang.String)", "324": "Logger.DefaultLoggerRepository::::getLogger(java.lang.String)", "325": "Logger.DefaultLoggerRepository::::getLogger(java.lang.String)", "326": "Logger.DefaultLoggerRepository::::getLogger(java.lang.String)", "327": "Logger.DefaultLoggerRepository::::getLogger(java.lang.String)", "328": "Logger.DefaultLoggerRepository::::getLogger(java.lang.String)", "329": "Logger.DefaultLoggerRepository::::getLogger(java.lang.String)", "330": "Logger.DefaultLoggerRepository::::getLogger(java.lang.String)", "331": "Logger.DefaultLoggerRepository::::getLogger(java.lang.String)", "332": "Logger.DefaultLoggerRepository::::getLogger(java.lang.String)", "333": "Logger.DefaultLoggerRepository::::getLogger(java.lang.String)", "334": "Logger.DefaultLoggerRepository::::getLogger(java.lang.String)", "335": "Logger.DefaultLoggerRepository::::getLogger(java.lang.String)", "336": "Logger.DefaultLoggerRepository::::getLogger(java.lang.String)", "337": "Logger.DefaultLoggerRepository::::getLogger(java.lang.String)", "338": "Logger.DefaultLoggerRepository::::getLogger(java.lang.String)", "339": "Logger.DefaultLoggerRepository::::getLogger(java.lang.String)", "340": "Logger.DefaultLoggerRepository::::getLogger(java.lang.String)", "341": "Logger.DefaultLoggerRepository::::getLogger(java.lang.String)", "342": "Logger.DefaultLoggerRepository::::getLogger(java.lang.String)", "343": "Logger.DefaultLoggerRepository::::getLogger(java.lang.String)", "344": "Logger.DefaultLoggerRepository::::getLogger(java.lang.String)", "346": "Logger.DefaultLoggerRepository::::makeNewLoggerInstance(java.lang.String)", "347": "Logger.DefaultLoggerRepository::::makeNewLoggerInstance(java.lang.String)", "348": "Logger.DefaultLoggerRepository::::makeNewLoggerInstance(java.lang.String)", "350": "Logger.DefaultLoggerRepository::::getCurrentLoggers()", "351": "Logger.DefaultLoggerRepository::::getCurrentLoggers()", "352": "Logger.DefaultLoggerRepository::::getCurrentLoggers()", "353": "Logger.DefaultLoggerRepository::::getCurrentLoggers()", "354": "Logger.DefaultLoggerRepository::::getCurrentLoggers()", "355": "Logger.DefaultLoggerRepository::::getCurrentLoggers()", "356": "Logger.DefaultLoggerRepository::::getCurrentLoggers()", "357": "Logger.DefaultLoggerRepository::::getCurrentLoggers()", "358": "Logger.DefaultLoggerRepository::::getCurrentLoggers()", "359": "Logger.DefaultLoggerRepository::::getCurrentLoggers()", "360": "Logger.DefaultLoggerRepository::::getCurrentLoggers()", "361": "Logger.DefaultLoggerRepository::::getCurrentLoggers()", "362": "Logger.DefaultLoggerRepository::::getCurrentLoggers()", "365": "Logger.DefaultLoggerRepository::::getRootLogger()", "366": "Logger.DefaultLoggerRepository::::getRootLogger()", "367": "Logger.DefaultLoggerRepository::::getRootLogger()", "369": "Logger.DefaultLoggerRepository::::isDisabled(int)", "370": "Logger.DefaultLoggerRepository::::isDisabled(int)", "371": "Logger.DefaultLoggerRepository::::isDisabled(int)", "374": "Logger.DefaultLoggerRepository::::shutdown()", "375": "Logger.DefaultLoggerRepository::::shutdown()", "376": "Logger.DefaultLoggerRepository::::shutdown()", "377": "Logger.DefaultLoggerRepository::::shutdown()", "378": "Logger.DefaultLoggerRepository::::shutdown()", "379": "Logger.DefaultLoggerRepository::::shutdown()", "380": "Logger.DefaultLoggerRepository::::shutdown()", "381": "Logger.DefaultLoggerRepository::::shutdown()", "382": "Logger.DefaultLoggerRepository::::shutdown()", "383": "Logger.DefaultLoggerRepository::::shutdown()", "384": "Logger.DefaultLoggerRepository::::shutdown()", "385": "Logger.DefaultLoggerRepository::::shutdown()", "386": "Logger.DefaultLoggerRepository::::shutdown()", "389": "Logger.DefaultLoggerRepository::::updateParents(org.apache.rocketmq.logging.inner.Logger)", "390": "Logger.DefaultLoggerRepository::::updateParents(org.apache.rocketmq.logging.inner.Logger)", "391": "Logger.DefaultLoggerRepository::::updateParents(org.apache.rocketmq.logging.inner.Logger)", "392": "Logger.DefaultLoggerRepository::::updateParents(org.apache.rocketmq.logging.inner.Logger)", "393": "Logger.DefaultLoggerRepository::::updateParents(org.apache.rocketmq.logging.inner.Logger)", "394": "Logger.DefaultLoggerRepository::::updateParents(org.apache.rocketmq.logging.inner.Logger)", "395": "Logger.DefaultLoggerRepository::::updateParents(org.apache.rocketmq.logging.inner.Logger)", "396": "Logger.DefaultLoggerRepository::::updateParents(org.apache.rocketmq.logging.inner.Logger)", "397": "Logger.DefaultLoggerRepository::::updateParents(org.apache.rocketmq.logging.inner.Logger)", "398": "Logger.DefaultLoggerRepository::::updateParents(org.apache.rocketmq.logging.inner.Logger)", "399": "Logger.DefaultLoggerRepository::::updateParents(org.apache.rocketmq.logging.inner.Logger)", "400": "Logger.DefaultLoggerRepository::::updateParents(org.apache.rocketmq.logging.inner.Logger)", "401": "Logger.DefaultLoggerRepository::::updateParents(org.apache.rocketmq.logging.inner.Logger)", "402": "Logger.DefaultLoggerRepository::::updateParents(org.apache.rocketmq.logging.inner.Logger)", "403": "Logger.DefaultLoggerRepository::::updateParents(org.apache.rocketmq.logging.inner.Logger)", "404": "Logger.DefaultLoggerRepository::::updateParents(org.apache.rocketmq.logging.inner.Logger)", "405": "Logger.DefaultLoggerRepository::::updateParents(org.apache.rocketmq.logging.inner.Logger)", "406": "Logger.DefaultLoggerRepository::::updateParents(org.apache.rocketmq.logging.inner.Logger)", "407": "Logger.DefaultLoggerRepository::::updateParents(org.apache.rocketmq.logging.inner.Logger)", "408": "Logger.DefaultLoggerRepository::::updateParents(org.apache.rocketmq.logging.inner.Logger)", "409": "Logger.DefaultLoggerRepository::::updateParents(org.apache.rocketmq.logging.inner.Logger)", "410": "Logger.DefaultLoggerRepository::::updateParents(org.apache.rocketmq.logging.inner.Logger)", "411": "Logger.DefaultLoggerRepository::::updateParents(org.apache.rocketmq.logging.inner.Logger)", "412": "Logger.DefaultLoggerRepository::::updateParents(org.apache.rocketmq.logging.inner.Logger)", "413": "Logger.DefaultLoggerRepository::::updateParents(org.apache.rocketmq.logging.inner.Logger)", "414": "Logger.DefaultLoggerRepository::::updateParents(org.apache.rocketmq.logging.inner.Logger)", "415": "Logger.DefaultLoggerRepository::::updateParents(org.apache.rocketmq.logging.inner.Logger)", "416": "Logger.DefaultLoggerRepository::::updateParents(org.apache.rocketmq.logging.inner.Logger)", "418": "Logger.DefaultLoggerRepository::::updateChildren(org.apache.rocketmq.logging.inner.Logger.ProvisionNode,org.apache.rocketmq.logging.inner.Logger)", "419": "Logger.DefaultLoggerRepository::::updateChildren(org.apache.rocketmq.logging.inner.Logger.ProvisionNode,org.apache.rocketmq.logging.inner.Logger)", "420": "Logger.DefaultLoggerRepository::::updateChildren(org.apache.rocketmq.logging.inner.Logger.ProvisionNode,org.apache.rocketmq.logging.inner.Logger)", "421": "Logger.DefaultLoggerRepository::::updateChildren(org.apache.rocketmq.logging.inner.Logger.ProvisionNode,org.apache.rocketmq.logging.inner.Logger)", "422": "Logger.DefaultLoggerRepository::::updateChildren(org.apache.rocketmq.logging.inner.Logger.ProvisionNode,org.apache.rocketmq.logging.inner.Logger)", "423": "Logger.DefaultLoggerRepository::::updateChildren(org.apache.rocketmq.logging.inner.Logger.ProvisionNode,org.apache.rocketmq.logging.inner.Logger)", "424": "Logger.DefaultLoggerRepository::::updateChildren(org.apache.rocketmq.logging.inner.Logger.ProvisionNode,org.apache.rocketmq.logging.inner.Logger)", "425": "Logger.DefaultLoggerRepository::::updateChildren(org.apache.rocketmq.logging.inner.Logger.ProvisionNode,org.apache.rocketmq.logging.inner.Logger)", "426": "Logger.DefaultLoggerRepository::::updateChildren(org.apache.rocketmq.logging.inner.Logger.ProvisionNode,org.apache.rocketmq.logging.inner.Logger)", "427": "Logger.DefaultLoggerRepository::::updateChildren(org.apache.rocketmq.logging.inner.Logger.ProvisionNode,org.apache.rocketmq.logging.inner.Logger)", "428": "Logger.DefaultLoggerRepository::::updateChildren(org.apache.rocketmq.logging.inner.Logger.ProvisionNode,org.apache.rocketmq.logging.inner.Logger)", "440": "Logger.DefaultLoggerRepository.CategoryKey::::hashCode()", "441": "Logger.DefaultLoggerRepository.CategoryKey::::hashCode()", "442": "Logger.DefaultLoggerRepository.CategoryKey::::hashCode()", "444": "Logger.DefaultLoggerRepository.CategoryKey::::equals(java.lang.Object)", "445": "Logger.DefaultLoggerRepository.CategoryKey::::equals(java.lang.Object)", "446": "Logger.DefaultLoggerRepository.CategoryKey::::equals(java.lang.Object)", "447": "Logger.DefaultLoggerRepository.CategoryKey::::equals(java.lang.Object)", "448": "Logger.DefaultLoggerRepository.CategoryKey::::equals(java.lang.Object)", "449": "Logger.DefaultLoggerRepository.CategoryKey::::equals(java.lang.Object)", "450": "Logger.DefaultLoggerRepository.CategoryKey::::equals(java.lang.Object)", "451": "Logger.DefaultLoggerRepository.CategoryKey::::equals(java.lang.Object)", "452": "Logger.DefaultLoggerRepository.CategoryKey::::equals(java.lang.Object)", "453": "Logger.DefaultLoggerRepository.CategoryKey::::equals(java.lang.Object)", "454": "Logger.DefaultLoggerRepository.CategoryKey::::equals(java.lang.Object)", "455": "Logger.DefaultLoggerRepository.CategoryKey::::equals(java.lang.Object)"}, "test_reverse_method_lines_dic": {"36": "LoggerTest::::init()", "37": "LoggerTest::::init()", "38": "LoggerTest::::init()", "39": "LoggerTest::::init()", "41": "LoggerTest::::testInnerConsoleLogger()", "42": "LoggerTest::::testInnerConsoleLogger()", "43": "LoggerTest::::testInnerConsoleLogger()", "44": "LoggerTest::::testInnerConsoleLogger()", "45": "LoggerTest::::testInnerConsoleLogger()", "46": "LoggerTest::::testInnerConsoleLogger()", "47": "LoggerTest::::testInnerConsoleLogger()", "48": "LoggerTest::::testInnerConsoleLogger()", "49": "LoggerTest::::testInnerConsoleLogger()", "50": "LoggerTest::::testInnerConsoleLogger()", "51": "LoggerTest::::testInnerConsoleLogger()", "52": "LoggerTest::::testInnerConsoleLogger()", "53": "LoggerTest::::testInnerConsoleLogger()", "54": "LoggerTest::::testInnerConsoleLogger()", "55": "LoggerTest::::testInnerConsoleLogger()", "56": "LoggerTest::::testInnerConsoleLogger()", "57": "LoggerTest::::testInnerConsoleLogger()", "58": "LoggerTest::::testInnerConsoleLogger()", "59": "LoggerTest::::testInnerConsoleLogger()", "60": "LoggerTest::::testInnerConsoleLogger()", "61": "LoggerTest::::testInnerConsoleLogger()", "62": "LoggerTest::::testInnerConsoleLogger()", "63": "LoggerTest::::testInnerConsoleLogger()", "64": "LoggerTest::::testInnerConsoleLogger()", "65": "LoggerTest::::testInnerConsoleLogger()", "66": "LoggerTest::::testInnerConsoleLogger()", "67": "LoggerTest::::testInnerConsoleLogger()", "68": "LoggerTest::::testInnerConsoleLogger()", "69": "LoggerTest::::testInnerConsoleLogger()", "70": "LoggerTest::::testInnerConsoleLogger()", "71": "LoggerTest::::testInnerConsoleLogger()", "72": "LoggerTest::::testInnerConsoleLogger()", "73": "LoggerTest::::testInnerConsoleLogger()", "74": "LoggerTest::::testInnerConsoleLogger()", "75": "LoggerTest::::testInnerConsoleLogger()", "76": "LoggerTest::::testInnerConsoleLogger()", "77": "LoggerTest::::testInnerConsoleLogger()", "78": "LoggerTest::::testInnerConsoleLogger()", "80": "LoggerTest::::testInnerFileLogger()", "81": "LoggerTest::::testInnerFileLogger()", "82": "LoggerTest::::testInnerFileLogger()", "83": "LoggerTest::::testInnerFileLogger()", "84": "LoggerTest::::testInnerFileLogger()", "85": "LoggerTest::::testInnerFileLogger()", "86": "LoggerTest::::testInnerFileLogger()", "87": "LoggerTest::::testInnerFileLogger()", "88": "LoggerTest::::testInnerFileLogger()", "89": "LoggerTest::::testInnerFileLogger()", "90": "LoggerTest::::testInnerFileLogger()", "91": "LoggerTest::::testInnerFileLogger()", "92": "LoggerTest::::testInnerFileLogger()", "93": "LoggerTest::::testInnerFileLogger()", "94": "LoggerTest::::testInnerFileLogger()", "95": "LoggerTest::::testInnerFileLogger()", "96": "LoggerTest::::testInnerFileLogger()", "97": "LoggerTest::::testInnerFileLogger()", "98": "LoggerTest::::testInnerFileLogger()", "99": "LoggerTest::::testInnerFileLogger()", "100": "LoggerTest::::testInnerFileLogger()", "101": "LoggerTest::::testInnerFileLogger()", "102": "LoggerTest::::testInnerFileLogger()", "103": "LoggerTest::::testInnerFileLogger()", "104": "LoggerTest::::testInnerFileLogger()", "105": "LoggerTest::::testInnerFileLogger()", "106": "LoggerTest::::testInnerFileLogger()", "107": "LoggerTest::::testInnerFileLogger()", "108": "LoggerTest::::testInnerFileLogger()", "109": "LoggerTest::::testInnerFileLogger()", "111": "LoggerTest::::close()", "112": "LoggerTest::::close()", "113": "LoggerTest::::close()", "114": "LoggerTest::::close()"}, "tests": [{"test_lines": [41, 78], "covered_lines": [27, 29, 32, 43, 45, 46, 47, 50, 62, 63, 65, 66, 69, 71, 72, 73, 74, 76, 79, 82, 85, 100, 103, 106, 129, 132, 133, 136, 140, 141, 161, 162, 163, 170, 179, 182, 183, 185, 188, 191, 192, 194, 226, 227, 279, 285, 287, 288, 289, 290, 310, 311, 312, 314, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 347, 370, 390, 391, 392, 394, 413, 414, 416, 435, 436, 437, 438, 441, 445, 449, 450, 451, 463, 464, 465]}, {"test_lines": [80, 109], "covered_lines": [27, 29, 32, 43, 45, 46, 47, 50, 62, 63, 65, 66, 69, 71, 72, 73, 74, 76, 79, 82, 85, 100, 103, 106, 129, 132, 133, 136, 140, 141, 161, 162, 163, 170, 179, 182, 183, 185, 226, 227, 279, 285, 287, 288, 289, 290, 310, 311, 312, 314, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 347, 370, 390, 391, 392, 394, 413, 414, 416, 435, 436, 437, 438, 441, 445, 449, 450, 451, 463, 464, 465]}]}, "/bernard/dataset_construction/prep/repos/RocketMQC/logging/src/main/java/org/apache/rocketmq/logging/inner/Layout.java": {"class_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package org.apache.rocketmq.logging.inner;\n", "\n", "public abstract class Layout {\n", "\n", "    public abstract String format(LoggingEvent event);\n", "\n", "    public String getContentType() {\n", "        return \"text/plain\";\n", "    }\n", "\n", "    public String getHeader() {\n", "        return null;\n", "    }\n", "\n", "    public String getFooter() {\n", "        return null;\n", "    }\n", "\n", "\n", "    abstract public boolean ignoresThrowable();\n", "\n", "}"], "test_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package org.apache.rocketmq.logging.inner;\n", "\n", "import org.apache.rocketmq.logging.BasicLoggerTest;\n", "import org.junit.Assert;\n", "import org.junit.Test;\n", "\n", "public class LayoutTest extends BasicLoggerTest {\n", "\n", "    @Test\n", "    public void testSimpleLayout() {\n", "        Layout layout = LoggingBuilder.newLayoutBuilder().withSimpleLayout().build();\n", "        String format = layout.format(loggingEvent);\n", "        Assert.assertTrue(format.contains(\"junit\"));\n", "    }\n", "\n", "    @Test\n", "    public void testDefaultLayout() {\n", "        Layout layout = LoggingBuilder.newLayoutBuilder().withDefaultLayout().build();\n", "        String format = layout.format(loggingEvent);\n", "        String contentType = layout.getContentType();\n", "        Assert.assertTrue(contentType.contains(\"text\"));\n", "        Assert.assertTrue(format.contains(\"createLoggingEvent\"));\n", "        Assert.assertTrue(format.contains(\"createLogging error\"));\n", "        Assert.assertTrue(format.contains(Thread.currentThread().getName()));\n", "    }\n", "\n", "    @Test\n", "    public void testLogFormat() {\n", "        Layout innerLayout = LoggingBuilder.newLayoutBuilder().withDefaultLayout().build();\n", "\n", "        LoggingEvent loggingEvent = new LoggingEvent(Logger.class.getName(), logger, org.apache.rocketmq.logging.inner.Level.INFO,\n", "            \"junit test error\", null);\n", "        String format = innerLayout.format(loggingEvent);\n", "\n", "        System.out.println(format);\n", "    }\n", "}\n"], "method_lines_dic": {"Layout::::format(org.apache.rocketmq.logging.inner.LoggingEvent)": [22, 22], "Layout::::getContentType()": [24, 26], "Layout::::getHeader()": [28, 30], "Layout::::getFooter()": [32, 34], "Layout::::ignoresThrowable()": [37, 37]}, "test_method_lines_dic": {"LayoutTest::::testSimpleLayout()": [26, 31], "LayoutTest::::testDefaultLayout()": [33, 42], "LayoutTest::::testLogFormat()": [44, 53]}, "reverse_method_lines_dic": {"22": "Layout::::format(org.apache.rocketmq.logging.inner.LoggingEvent)", "24": "Layout::::getContentType()", "25": "Layout::::getContentType()", "26": "Layout::::getContentType()", "28": "Layout::::getHeader()", "29": "Layout::::getHeader()", "30": "Layout::::getHeader()", "32": "Layout::::getFooter()", "33": "Layout::::getFooter()", "34": "Layout::::getFooter()", "37": "Layout::::ignoresThrowable()"}, "test_reverse_method_lines_dic": {"26": "LayoutTest::::testSimpleLayout()", "27": "LayoutTest::::testSimpleLayout()", "28": "LayoutTest::::testSimpleLayout()", "29": "LayoutTest::::testSimpleLayout()", "30": "LayoutTest::::testSimpleLayout()", "31": "LayoutTest::::testSimpleLayout()", "33": "LayoutTest::::testDefaultLayout()", "34": "LayoutTest::::testDefaultLayout()", "35": "LayoutTest::::testDefaultLayout()", "36": "LayoutTest::::testDefaultLayout()", "37": "LayoutTest::::testDefaultLayout()", "38": "LayoutTest::::testDefaultLayout()", "39": "LayoutTest::::testDefaultLayout()", "40": "LayoutTest::::testDefaultLayout()", "41": "LayoutTest::::testDefaultLayout()", "42": "LayoutTest::::testDefaultLayout()", "44": "LayoutTest::::testLogFormat()", "45": "LayoutTest::::testLogFormat()", "46": "LayoutTest::::testLogFormat()", "47": "LayoutTest::::testLogFormat()", "48": "LayoutTest::::testLogFormat()", "49": "LayoutTest::::testLogFormat()", "50": "LayoutTest::::testLogFormat()", "51": "LayoutTest::::testLogFormat()", "52": "LayoutTest::::testLogFormat()", "53": "LayoutTest::::testLogFormat()"}, "tests": [{"test_lines": [26, 31], "covered_lines": [20]}, {"test_lines": [33, 42], "covered_lines": [20, 25]}, {"test_lines": [44, 53], "covered_lines": [20]}]}, "/bernard/dataset_construction/prep/repos/RocketMQC/logging/src/main/java/org/apache/rocketmq/logging/inner/Appender.java": {"class_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package org.apache.rocketmq.logging.inner;\n", "\n", "\n", "import java.io.InterruptedIOException;\n", "import java.util.Enumeration;\n", "import java.util.Vector;\n", "\n", "public abstract class Appender {\n", "\n", "    public static final int CODE_WRITE_FAILURE = 1;\n", "    public static final int CODE_FLUSH_FAILURE = 2;\n", "    public static final int CODE_CLOSE_FAILURE = 3;\n", "    public static final int CODE_FILE_OPEN_FAILURE = 4;\n", "\n", "    public final static String LINE_SEP = System.getProperty(\"line.separator\");\n", "\n", "    boolean firstTime = true;\n", "\n", "    protected Layout layout;\n", "\n", "    protected String name;\n", "\n", "    protected boolean closed = false;\n", "\n", "    public void activateOptions() {\n", "    }\n", "\n", "    abstract protected void append(LoggingEvent event);\n", "\n", "    public void finalize() {\n", "        try {\n", "            super.finalize();\n", "        } catch (Throwable throwable) {\n", "            SysLogger.error(\"Finalizing appender named [\" + name + \"]. error\", throwable);\n", "        }\n", "        if (this.closed) {\n", "            return;\n", "        }\n", "\n", "        SysLogger.debug(\"Finalizing appender named [\" + name + \"].\");\n", "        close();\n", "    }\n", "\n", "    public Layout getLayout() {\n", "        return layout;\n", "    }\n", "\n", "    public final String getName() {\n", "        return this.name;\n", "    }\n", "\n", "    public synchronized void doAppend(LoggingEvent event) {\n", "        if (closed) {\n", "            SysLogger.error(\"Attempted to append to closed appender named [\" + name + \"].\");\n", "            return;\n", "        }\n", "        this.append(event);\n", "    }\n", "\n", "    public void setLayout(Layout layout) {\n", "        this.layout = layout;\n", "    }\n", "\n", "    public void setName(String name) {\n", "        this.name = name;\n", "    }\n", "\n", "    public abstract void close();\n", "\n", "    public void handleError(String message, Exception e, int errorCode) {\n", "        if (e instanceof InterruptedIOException || e instanceof InterruptedException) {\n", "            Thread.currentThread().interrupt();\n", "        }\n", "        if (firstTime) {\n", "            SysLogger.error(message + \" code:\" + errorCode, e);\n", "            firstTime = false;\n", "        }\n", "    }\n", "\n", "    public void handleError(String message) {\n", "        if (firstTime) {\n", "            SysLogger.error(message);\n", "            firstTime = false;\n", "        }\n", "    }\n", "\n", "\n", "    public interface AppenderPipeline {\n", "\n", "        void addAppender(Appender newAppender);\n", "\n", "        Enumeration getAllAppenders();\n", "\n", "        Appender getAppender(String name);\n", "\n", "        boolean isAttached(Appender appender);\n", "\n", "        void removeAllAppenders();\n", "\n", "        void removeAppender(Appender appender);\n", "\n", "        void removeAppender(String name);\n", "    }\n", "\n", "\n", "    public static class AppenderPipelineImpl implements AppenderPipeline {\n", "\n", "\n", "        protected Vector<Appender> appenderList;\n", "\n", "        public void addAppender(Appender newAppender) {\n", "            if (newAppender == null) {\n", "                return;\n", "            }\n", "\n", "            if (appenderList == null) {\n", "                appenderList = new Vector<Appender>(1);\n", "            }\n", "            if (!appenderList.contains(newAppender)) {\n", "                appenderList.addElement(newAppender);\n", "            }\n", "        }\n", "\n", "        public int appendLoopOnAppenders(LoggingEvent event) {\n", "            int size = 0;\n", "            Appender appender;\n", "\n", "            if (appenderList != null) {\n", "                size = appenderList.size();\n", "                for (int i = 0; i < size; i++) {\n", "                    appender = appenderList.elementAt(i);\n", "                    appender.doAppend(event);\n", "                }\n", "            }\n", "            return size;\n", "        }\n", "\n", "        public Enumeration getAllAppenders() {\n", "            if (appenderList == null) {\n", "                return null;\n", "            } else {\n", "                return appenderList.elements();\n", "            }\n", "        }\n", "\n", "        public Appender getAppender(String name) {\n", "            if (appenderList == null || name == null) {\n", "                return null;\n", "            }\n", "\n", "            int size = appenderList.size();\n", "            Appender appender;\n", "            for (int i = 0; i < size; i++) {\n", "                appender = appenderList.elementAt(i);\n", "                if (name.equals(appender.getName())) {\n", "                    return appender;\n", "                }\n", "            }\n", "            return null;\n", "        }\n", "\n", "        public boolean isAttached(Appender appender) {\n", "            if (appenderList == null || appender == null) {\n", "                return false;\n", "            }\n", "\n", "            int size = appenderList.size();\n", "            Appender a;\n", "            for (int i = 0; i < size; i++) {\n", "                a = appenderList.elementAt(i);\n", "                if (a == appender) {\n", "                    return true;\n", "                }\n", "            }\n", "            return false;\n", "        }\n", "\n", "        public void removeAllAppenders() {\n", "            if (appenderList != null) {\n", "                int len = appenderList.size();\n", "                for (int i = 0; i < len; i++) {\n", "                    Appender a = appenderList.elementAt(i);\n", "                    a.close();\n", "                }\n", "                appenderList.removeAllElements();\n", "                appenderList = null;\n", "            }\n", "        }\n", "\n", "        public void removeAppender(Appender appender) {\n", "            if (appender == null || appenderList == null) {\n", "                return;\n", "            }\n", "            appenderList.removeElement(appender);\n", "        }\n", "\n", "        public void removeAppender(String name) {\n", "            if (name == null || appenderList == null) {\n", "                return;\n", "            }\n", "            int size = appenderList.size();\n", "            for (int i = 0; i < size; i++) {\n", "                if (name.equals((appenderList.elementAt(i)).getName())) {\n", "                    appenderList.removeElementAt(i);\n", "                    break;\n", "                }\n", "            }\n", "        }\n", "\n", "    }\n", "}\n"], "test_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package org.apache.rocketmq.logging.inner;\n", "\n", "import org.apache.rocketmq.logging.BasicLoggerTest;\n", "import org.junit.Assert;\n", "import org.junit.Test;\n", "\n", "import java.io.ByteArrayOutputStream;\n", "import java.io.IOException;\n", "import java.io.PrintStream;\n", "\n", "public class AppenderTest extends BasicLoggerTest {\n", "\n", "    @Test\n", "    public void testConsole() {\n", "        SysLogger.setQuietMode(false);\n", "        SysLogger.setInternalDebugging(true);\n", "        PrintStream out = System.out;\n", "        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n", "        System.setOut(new PrintStream(byteArrayOutputStream));\n", "\n", "        Appender consoleAppender = LoggingBuilder.newAppenderBuilder()\n", "            .withConsoleAppender(LoggingBuilder.SYSTEM_OUT)\n", "            .withLayout(LoggingBuilder.newLayoutBuilder().withDefaultLayout().build()).build();\n", "\n", "        LoggingBuilder.ConsoleAppender consoleAppender1 = (LoggingBuilder.ConsoleAppender) consoleAppender;\n", "        String target = consoleAppender1.getTarget();\n", "        Assert.assertTrue(target.equals(LoggingBuilder.SYSTEM_OUT));\n", "\n", "        Layout layout = consoleAppender.getLayout();\n", "        Assert.assertTrue(layout instanceof LoggingBuilder.DefaultLayout);\n", "\n", "        Logger consoleLogger = Logger.getLogger(\"ConsoleLogger\");\n", "        consoleLogger.setAdditivity(false);\n", "        consoleLogger.addAppender(consoleAppender);\n", "        consoleLogger.setLevel(Level.INFO);\n", "\n", "        Logger.getRootLogger().addAppender(consoleAppender);\n", "        Logger.getLogger(AppenderTest.class).info(\"this is a AppenderTest log\");\n", "\n", "        Logger.getLogger(\"ConsoleLogger\").info(\"console info Message\");\n", "        Logger.getLogger(\"ConsoleLogger\").error(\"console error Message\", new RuntimeException());\n", "        Logger.getLogger(\"ConsoleLogger\").debug(\"console debug message\");\n", "        System.setOut(out);\n", "        consoleAppender.close();\n", "\n", "        String result = new String(byteArrayOutputStream.toByteArray());\n", "\n", "        Assert.assertTrue(result.contains(\"info\"));\n", "        Assert.assertTrue(result.contains(\"RuntimeException\"));\n", "        Assert.assertTrue(!result.contains(\"debug\"));\n", "        Assert.assertTrue(result.contains(\"AppenderTest\"));\n", "    }\n", "\n", "    @Test\n", "    public void testInnerFile() throws IOException {\n", "        String file = loggingDir + \"/logger.log\";\n", "\n", "        Logger fileLogger = Logger.getLogger(\"fileLogger\");\n", "\n", "        Appender myappender = LoggingBuilder.newAppenderBuilder()\n", "            .withDailyFileRollingAppender(file, \"'.'yyyy-MM-dd\")\n", "            .withName(\"myappender\")\n", "            .withLayout(LoggingBuilder.newLayoutBuilder().withDefaultLayout().build()).build();\n", "\n", "        fileLogger.addAppender(myappender);\n", "\n", "        Logger.getLogger(\"fileLogger\").setLevel(Level.INFO);\n", "\n", "        Logger.getLogger(\"fileLogger\").info(\"fileLogger info Message\");\n", "        Logger.getLogger(\"fileLogger\").error(\"fileLogger error Message\", new RuntimeException());\n", "        Logger.getLogger(\"fileLogger\").debug(\"fileLogger debug message\");\n", "\n", "        myappender.close();\n", "\n", "        String content = readFile(file);\n", "\n", "        System.out.println(content);\n", "\n", "        Assert.assertTrue(content.contains(\"info\"));\n", "        Assert.assertTrue(content.contains(\"RuntimeException\"));\n", "        Assert.assertTrue(!content.contains(\"debug\"));\n", "    }\n", "\n", "\n", "\n", "    @Test\n", "    public void asyncAppenderTest() {\n", "        Appender appender = LoggingBuilder.newAppenderBuilder().withAsync(false, 1024)\n", "            .withConsoleAppender(LoggingBuilder.SYSTEM_OUT)\n", "            .withLayout(LoggingBuilder.newLayoutBuilder().withDefaultLayout().build()).build();\n", "        Assert.assertTrue(appender instanceof LoggingBuilder.AsyncAppender);\n", "        LoggingBuilder.AsyncAppender asyncAppender = (LoggingBuilder.AsyncAppender) appender;\n", "        Assert.assertTrue(!asyncAppender.getBlocking());\n", "        Assert.assertTrue(asyncAppender.getBufferSize() > 0);\n", "    }\n", "\n", "    @Test\n", "    public void testWriteAppender() {\n", "        LoggingBuilder.WriterAppender writerAppender = new LoggingBuilder.WriterAppender();\n", "        writerAppender.setImmediateFlush(true);\n", "        Assert.assertTrue(writerAppender.getImmediateFlush());\n", "    }\n", "\n", "    @Test\n", "    public void testFileAppender() throws IOException {\n", "        LoggingBuilder.FileAppender fileAppender = new LoggingBuilder.FileAppender(\n", "            new LoggingBuilder.SimpleLayout(), loggingDir + \"/simple.log\", true);\n", "        fileAppender.setBufferSize(1024);\n", "        int bufferSize = fileAppender.getBufferSize();\n", "        boolean bufferedIO = fileAppender.getBufferedIO();\n", "        Assert.assertTrue(!bufferedIO);\n", "        Assert.assertTrue(bufferSize > 0);\n", "        Assert.assertTrue(fileAppender.getAppend());\n", "\n", "        LoggingBuilder.RollingFileAppender rollingFileAppender = new LoggingBuilder.RollingFileAppender();\n", "        rollingFileAppender.setImmediateFlush(true);\n", "        rollingFileAppender.setMaximumFileSize(1024 * 1024);\n", "        rollingFileAppender.setMaxBackupIndex(10);\n", "        rollingFileAppender.setAppend(true);\n", "        rollingFileAppender.setFile(loggingDir + \"/rolling_file.log\");\n", "        rollingFileAppender.setName(\"myRollingFileAppender\");\n", "\n", "        rollingFileAppender.activateOptions();\n", "\n", "        Assert.assertTrue(rollingFileAppender.getMaximumFileSize() > 0);\n", "        Assert.assertTrue(rollingFileAppender.getMaxBackupIndex() == 10);\n", "    }\n", "\n", "    @Test\n", "    public void testDailyRollingAppender() {\n", "        LoggingBuilder.DailyRollingFileAppender dailyRollingFileAppender = new LoggingBuilder.DailyRollingFileAppender();\n", "        dailyRollingFileAppender.setFile(loggingDir + \"/daily.log\");\n", "        dailyRollingFileAppender.setName(\"dailyAppender\");\n", "        dailyRollingFileAppender.setAppend(true);\n", "        dailyRollingFileAppender.setDatePattern(\"'.'yyyy-mm-dd\");\n", "        String datePattern = dailyRollingFileAppender.getDatePattern();\n", "        Assert.assertTrue(datePattern != null);\n", "        dailyRollingFileAppender.activateOptions();\n", "    }\n", "\n", "}\n", "\n", "\n"], "method_lines_dic": {"Appender::::activateOptions()": [42, 43], "Appender::::append(org.apache.rocketmq.logging.inner.LoggingEvent)": [45, 45], "Appender::::finalize()": [47, 59], "Appender::::getLayout()": [61, 63], "Appender::::getName()": [65, 67], "Appender::::doAppend(org.apache.rocketmq.logging.inner.LoggingEvent)": [69, 75], "Appender::::setLayout(org.apache.rocketmq.logging.inner.Layout)": [77, 79], "Appender::::setName(java.lang.String)": [81, 83], "Appender::::close()": [85, 85], "Appender::::handleError(java.lang.String,java.lang.Exception,int)": [87, 95], "Appender::::handleError(java.lang.String)": [97, 102], "Appender.AppenderPipeline::::addAppender(org.apache.rocketmq.logging.inner.Appender)": [107, 107], "Appender.AppenderPipeline::::getAllAppenders()": [109, 109], "Appender.AppenderPipeline::::getAppender(java.lang.String)": [111, 111], "Appender.AppenderPipeline::::isAttached(org.apache.rocketmq.logging.inner.Appender)": [113, 113], "Appender.AppenderPipeline::::removeAllAppenders()": [115, 115], "Appender.AppenderPipeline::::removeAppender(org.apache.rocketmq.logging.inner.Appender)": [117, 117], "Appender.AppenderPipeline::::removeAppender(java.lang.String)": [119, 119], "Appender.AppenderPipelineImpl::::addAppender(org.apache.rocketmq.logging.inner.Appender)": [128, 139], "Appender.AppenderPipelineImpl::::appendLoopOnAppenders(org.apache.rocketmq.logging.inner.LoggingEvent)": [141, 153], "Appender.AppenderPipelineImpl::::getAllAppenders()": [155, 161], "Appender.AppenderPipelineImpl::::getAppender(java.lang.String)": [163, 177], "Appender.AppenderPipelineImpl::::isAttached(org.apache.rocketmq.logging.inner.Appender)": [179, 193], "Appender.AppenderPipelineImpl::::removeAllAppenders()": [195, 205], "Appender.AppenderPipelineImpl::::removeAppender(org.apache.rocketmq.logging.inner.Appender)": [207, 212], "Appender.AppenderPipelineImpl::::removeAppender(java.lang.String)": [214, 225]}, "test_method_lines_dic": {"AppenderTest::::testConsole()": [30, 69], "AppenderTest::::testInnerFile()": [71, 99], "AppenderTest::::asyncAppenderTest()": [103, 112], "AppenderTest::::testWriteAppender()": [114, 119], "AppenderTest::::testFileAppender()": [121, 144], "AppenderTest::::testDailyRollingAppender()": [146, 156]}, "reverse_method_lines_dic": {"42": "Appender::::activateOptions()", "43": "Appender::::activateOptions()", "45": "Appender::::append(org.apache.rocketmq.logging.inner.LoggingEvent)", "47": "Appender::::finalize()", "48": "Appender::::finalize()", "49": "Appender::::finalize()", "50": "Appender::::finalize()", "51": "Appender::::finalize()", "52": "Appender::::finalize()", "53": "Appender::::finalize()", "54": "Appender::::finalize()", "55": "Appender::::finalize()", "56": "Appender::::finalize()", "57": "Appender::::finalize()", "58": "Appender::::finalize()", "59": "Appender::::finalize()", "61": "Appender::::getLayout()", "62": "Appender::::getLayout()", "63": "Appender::::getLayout()", "65": "Appender::::getName()", "66": "Appender::::getName()", "67": "Appender::::getName()", "69": "Appender::::doAppend(org.apache.rocketmq.logging.inner.LoggingEvent)", "70": "Appender::::doAppend(org.apache.rocketmq.logging.inner.LoggingEvent)", "71": "Appender::::doAppend(org.apache.rocketmq.logging.inner.LoggingEvent)", "72": "Appender::::doAppend(org.apache.rocketmq.logging.inner.LoggingEvent)", "73": "Appender::::doAppend(org.apache.rocketmq.logging.inner.LoggingEvent)", "74": "Appender::::doAppend(org.apache.rocketmq.logging.inner.LoggingEvent)", "75": "Appender::::doAppend(org.apache.rocketmq.logging.inner.LoggingEvent)", "77": "Appender::::setLayout(org.apache.rocketmq.logging.inner.Layout)", "78": "Appender::::setLayout(org.apache.rocketmq.logging.inner.Layout)", "79": "Appender::::setLayout(org.apache.rocketmq.logging.inner.Layout)", "81": "Appender::::setName(java.lang.String)", "82": "Appender::::setName(java.lang.String)", "83": "Appender::::setName(java.lang.String)", "85": "Appender::::close()", "87": "Appender::::handleError(java.lang.String,java.lang.Exception,int)", "88": "Appender::::handleError(java.lang.String,java.lang.Exception,int)", "89": "Appender::::handleError(java.lang.String,java.lang.Exception,int)", "90": "Appender::::handleError(java.lang.String,java.lang.Exception,int)", "91": "Appender::::handleError(java.lang.String,java.lang.Exception,int)", "92": "Appender::::handleError(java.lang.String,java.lang.Exception,int)", "93": "Appender::::handleError(java.lang.String,java.lang.Exception,int)", "94": "Appender::::handleError(java.lang.String,java.lang.Exception,int)", "95": "Appender::::handleError(java.lang.String,java.lang.Exception,int)", "97": "Appender::::handleError(java.lang.String)", "98": "Appender::::handleError(java.lang.String)", "99": "Appender::::handleError(java.lang.String)", "100": "Appender::::handleError(java.lang.String)", "101": "Appender::::handleError(java.lang.String)", "102": "Appender::::handleError(java.lang.String)", "107": "Appender.AppenderPipeline::::addAppender(org.apache.rocketmq.logging.inner.Appender)", "109": "Appender.AppenderPipeline::::getAllAppenders()", "111": "Appender.AppenderPipeline::::getAppender(java.lang.String)", "113": "Appender.AppenderPipeline::::isAttached(org.apache.rocketmq.logging.inner.Appender)", "115": "Appender.AppenderPipeline::::removeAllAppenders()", "117": "Appender.AppenderPipeline::::removeAppender(org.apache.rocketmq.logging.inner.Appender)", "119": "Appender.AppenderPipeline::::removeAppender(java.lang.String)", "128": "Appender.AppenderPipelineImpl::::addAppender(org.apache.rocketmq.logging.inner.Appender)", "129": "Appender.AppenderPipelineImpl::::addAppender(org.apache.rocketmq.logging.inner.Appender)", "130": "Appender.AppenderPipelineImpl::::addAppender(org.apache.rocketmq.logging.inner.Appender)", "131": "Appender.AppenderPipelineImpl::::addAppender(org.apache.rocketmq.logging.inner.Appender)", "132": "Appender.AppenderPipelineImpl::::addAppender(org.apache.rocketmq.logging.inner.Appender)", "133": "Appender.AppenderPipelineImpl::::addAppender(org.apache.rocketmq.logging.inner.Appender)", "134": "Appender.AppenderPipelineImpl::::addAppender(org.apache.rocketmq.logging.inner.Appender)", "135": "Appender.AppenderPipelineImpl::::addAppender(org.apache.rocketmq.logging.inner.Appender)", "136": "Appender.AppenderPipelineImpl::::addAppender(org.apache.rocketmq.logging.inner.Appender)", "137": "Appender.AppenderPipelineImpl::::addAppender(org.apache.rocketmq.logging.inner.Appender)", "138": "Appender.AppenderPipelineImpl::::addAppender(org.apache.rocketmq.logging.inner.Appender)", "139": "Appender.AppenderPipelineImpl::::addAppender(org.apache.rocketmq.logging.inner.Appender)", "141": "Appender.AppenderPipelineImpl::::appendLoopOnAppenders(org.apache.rocketmq.logging.inner.LoggingEvent)", "142": "Appender.AppenderPipelineImpl::::appendLoopOnAppenders(org.apache.rocketmq.logging.inner.LoggingEvent)", "143": "Appender.AppenderPipelineImpl::::appendLoopOnAppenders(org.apache.rocketmq.logging.inner.LoggingEvent)", "144": "Appender.AppenderPipelineImpl::::appendLoopOnAppenders(org.apache.rocketmq.logging.inner.LoggingEvent)", "145": "Appender.AppenderPipelineImpl::::appendLoopOnAppenders(org.apache.rocketmq.logging.inner.LoggingEvent)", "146": "Appender.AppenderPipelineImpl::::appendLoopOnAppenders(org.apache.rocketmq.logging.inner.LoggingEvent)", "147": "Appender.AppenderPipelineImpl::::appendLoopOnAppenders(org.apache.rocketmq.logging.inner.LoggingEvent)", "148": "Appender.AppenderPipelineImpl::::appendLoopOnAppenders(org.apache.rocketmq.logging.inner.LoggingEvent)", "149": "Appender.AppenderPipelineImpl::::appendLoopOnAppenders(org.apache.rocketmq.logging.inner.LoggingEvent)", "150": "Appender.AppenderPipelineImpl::::appendLoopOnAppenders(org.apache.rocketmq.logging.inner.LoggingEvent)", "151": "Appender.AppenderPipelineImpl::::appendLoopOnAppenders(org.apache.rocketmq.logging.inner.LoggingEvent)", "152": "Appender.AppenderPipelineImpl::::appendLoopOnAppenders(org.apache.rocketmq.logging.inner.LoggingEvent)", "153": "Appender.AppenderPipelineImpl::::appendLoopOnAppenders(org.apache.rocketmq.logging.inner.LoggingEvent)", "155": "Appender.AppenderPipelineImpl::::getAllAppenders()", "156": "Appender.AppenderPipelineImpl::::getAllAppenders()", "157": "Appender.AppenderPipelineImpl::::getAllAppenders()", "158": "Appender.AppenderPipelineImpl::::getAllAppenders()", "159": "Appender.AppenderPipelineImpl::::getAllAppenders()", "160": "Appender.AppenderPipelineImpl::::getAllAppenders()", "161": "Appender.AppenderPipelineImpl::::getAllAppenders()", "163": "Appender.AppenderPipelineImpl::::getAppender(java.lang.String)", "164": "Appender.AppenderPipelineImpl::::getAppender(java.lang.String)", "165": "Appender.AppenderPipelineImpl::::getAppender(java.lang.String)", "166": "Appender.AppenderPipelineImpl::::getAppender(java.lang.String)", "167": "Appender.AppenderPipelineImpl::::getAppender(java.lang.String)", "168": "Appender.AppenderPipelineImpl::::getAppender(java.lang.String)", "169": "Appender.AppenderPipelineImpl::::getAppender(java.lang.String)", "170": "Appender.AppenderPipelineImpl::::getAppender(java.lang.String)", "171": "Appender.AppenderPipelineImpl::::getAppender(java.lang.String)", "172": "Appender.AppenderPipelineImpl::::getAppender(java.lang.String)", "173": "Appender.AppenderPipelineImpl::::getAppender(java.lang.String)", "174": "Appender.AppenderPipelineImpl::::getAppender(java.lang.String)", "175": "Appender.AppenderPipelineImpl::::getAppender(java.lang.String)", "176": "Appender.AppenderPipelineImpl::::getAppender(java.lang.String)", "177": "Appender.AppenderPipelineImpl::::getAppender(java.lang.String)", "179": "Appender.AppenderPipelineImpl::::isAttached(org.apache.rocketmq.logging.inner.Appender)", "180": "Appender.AppenderPipelineImpl::::isAttached(org.apache.rocketmq.logging.inner.Appender)", "181": "Appender.AppenderPipelineImpl::::isAttached(org.apache.rocketmq.logging.inner.Appender)", "182": "Appender.AppenderPipelineImpl::::isAttached(org.apache.rocketmq.logging.inner.Appender)", "183": "Appender.AppenderPipelineImpl::::isAttached(org.apache.rocketmq.logging.inner.Appender)", "184": "Appender.AppenderPipelineImpl::::isAttached(org.apache.rocketmq.logging.inner.Appender)", "185": "Appender.AppenderPipelineImpl::::isAttached(org.apache.rocketmq.logging.inner.Appender)", "186": "Appender.AppenderPipelineImpl::::isAttached(org.apache.rocketmq.logging.inner.Appender)", "187": "Appender.AppenderPipelineImpl::::isAttached(org.apache.rocketmq.logging.inner.Appender)", "188": "Appender.AppenderPipelineImpl::::isAttached(org.apache.rocketmq.logging.inner.Appender)", "189": "Appender.AppenderPipelineImpl::::isAttached(org.apache.rocketmq.logging.inner.Appender)", "190": "Appender.AppenderPipelineImpl::::isAttached(org.apache.rocketmq.logging.inner.Appender)", "191": "Appender.AppenderPipelineImpl::::isAttached(org.apache.rocketmq.logging.inner.Appender)", "192": "Appender.AppenderPipelineImpl::::isAttached(org.apache.rocketmq.logging.inner.Appender)", "193": "Appender.AppenderPipelineImpl::::isAttached(org.apache.rocketmq.logging.inner.Appender)", "195": "Appender.AppenderPipelineImpl::::removeAllAppenders()", "196": "Appender.AppenderPipelineImpl::::removeAllAppenders()", "197": "Appender.AppenderPipelineImpl::::removeAllAppenders()", "198": "Appender.AppenderPipelineImpl::::removeAllAppenders()", "199": "Appender.AppenderPipelineImpl::::removeAllAppenders()", "200": "Appender.AppenderPipelineImpl::::removeAllAppenders()", "201": "Appender.AppenderPipelineImpl::::removeAllAppenders()", "202": "Appender.AppenderPipelineImpl::::removeAllAppenders()", "203": "Appender.AppenderPipelineImpl::::removeAllAppenders()", "204": "Appender.AppenderPipelineImpl::::removeAllAppenders()", "205": "Appender.AppenderPipelineImpl::::removeAllAppenders()", "207": "Appender.AppenderPipelineImpl::::removeAppender(org.apache.rocketmq.logging.inner.Appender)", "208": "Appender.AppenderPipelineImpl::::removeAppender(org.apache.rocketmq.logging.inner.Appender)", "209": "Appender.AppenderPipelineImpl::::removeAppender(org.apache.rocketmq.logging.inner.Appender)", "210": "Appender.AppenderPipelineImpl::::removeAppender(org.apache.rocketmq.logging.inner.Appender)", "211": "Appender.AppenderPipelineImpl::::removeAppender(org.apache.rocketmq.logging.inner.Appender)", "212": "Appender.AppenderPipelineImpl::::removeAppender(org.apache.rocketmq.logging.inner.Appender)", "214": "Appender.AppenderPipelineImpl::::removeAppender(java.lang.String)", "215": "Appender.AppenderPipelineImpl::::removeAppender(java.lang.String)", "216": "Appender.AppenderPipelineImpl::::removeAppender(java.lang.String)", "217": "Appender.AppenderPipelineImpl::::removeAppender(java.lang.String)", "218": "Appender.AppenderPipelineImpl::::removeAppender(java.lang.String)", "219": "Appender.AppenderPipelineImpl::::removeAppender(java.lang.String)", "220": "Appender.AppenderPipelineImpl::::removeAppender(java.lang.String)", "221": "Appender.AppenderPipelineImpl::::removeAppender(java.lang.String)", "222": "Appender.AppenderPipelineImpl::::removeAppender(java.lang.String)", "223": "Appender.AppenderPipelineImpl::::removeAppender(java.lang.String)", "224": "Appender.AppenderPipelineImpl::::removeAppender(java.lang.String)", "225": "Appender.AppenderPipelineImpl::::removeAppender(java.lang.String)"}, "test_reverse_method_lines_dic": {"30": "AppenderTest::::testConsole()", "31": "AppenderTest::::testConsole()", "32": "AppenderTest::::testConsole()", "33": "AppenderTest::::testConsole()", "34": "AppenderTest::::testConsole()", "35": "AppenderTest::::testConsole()", "36": "AppenderTest::::testConsole()", "37": "AppenderTest::::testConsole()", "38": "AppenderTest::::testConsole()", "39": "AppenderTest::::testConsole()", "40": "AppenderTest::::testConsole()", "41": "AppenderTest::::testConsole()", "42": "AppenderTest::::testConsole()", "43": "AppenderTest::::testConsole()", "44": "AppenderTest::::testConsole()", "45": "AppenderTest::::testConsole()", "46": "AppenderTest::::testConsole()", "47": "AppenderTest::::testConsole()", "48": "AppenderTest::::testConsole()", "49": "AppenderTest::::testConsole()", "50": "AppenderTest::::testConsole()", "51": "AppenderTest::::testConsole()", "52": "AppenderTest::::testConsole()", "53": "AppenderTest::::testConsole()", "54": "AppenderTest::::testConsole()", "55": "AppenderTest::::testConsole()", "56": "AppenderTest::::testConsole()", "57": "AppenderTest::::testConsole()", "58": "AppenderTest::::testConsole()", "59": "AppenderTest::::testConsole()", "60": "AppenderTest::::testConsole()", "61": "AppenderTest::::testConsole()", "62": "AppenderTest::::testConsole()", "63": "AppenderTest::::testConsole()", "64": "AppenderTest::::testConsole()", "65": "AppenderTest::::testConsole()", "66": "AppenderTest::::testConsole()", "67": "AppenderTest::::testConsole()", "68": "AppenderTest::::testConsole()", "69": "AppenderTest::::testConsole()", "71": "AppenderTest::::testInnerFile()", "72": "AppenderTest::::testInnerFile()", "73": "AppenderTest::::testInnerFile()", "74": "AppenderTest::::testInnerFile()", "75": "AppenderTest::::testInnerFile()", "76": "AppenderTest::::testInnerFile()", "77": "AppenderTest::::testInnerFile()", "78": "AppenderTest::::testInnerFile()", "79": "AppenderTest::::testInnerFile()", "80": "AppenderTest::::testInnerFile()", "81": "AppenderTest::::testInnerFile()", "82": "AppenderTest::::testInnerFile()", "83": "AppenderTest::::testInnerFile()", "84": "AppenderTest::::testInnerFile()", "85": "AppenderTest::::testInnerFile()", "86": "AppenderTest::::testInnerFile()", "87": "AppenderTest::::testInnerFile()", "88": "AppenderTest::::testInnerFile()", "89": "AppenderTest::::testInnerFile()", "90": "AppenderTest::::testInnerFile()", "91": "AppenderTest::::testInnerFile()", "92": "AppenderTest::::testInnerFile()", "93": "AppenderTest::::testInnerFile()", "94": "AppenderTest::::testInnerFile()", "95": "AppenderTest::::testInnerFile()", "96": "AppenderTest::::testInnerFile()", "97": "AppenderTest::::testInnerFile()", "98": "AppenderTest::::testInnerFile()", "99": "AppenderTest::::testInnerFile()", "103": "AppenderTest::::asyncAppenderTest()", "104": "AppenderTest::::asyncAppenderTest()", "105": "AppenderTest::::asyncAppenderTest()", "106": "AppenderTest::::asyncAppenderTest()", "107": "AppenderTest::::asyncAppenderTest()", "108": "AppenderTest::::asyncAppenderTest()", "109": "AppenderTest::::asyncAppenderTest()", "110": "AppenderTest::::asyncAppenderTest()", "111": "AppenderTest::::asyncAppenderTest()", "112": "AppenderTest::::asyncAppenderTest()", "114": "AppenderTest::::testWriteAppender()", "115": "AppenderTest::::testWriteAppender()", "116": "AppenderTest::::testWriteAppender()", "117": "AppenderTest::::testWriteAppender()", "118": "AppenderTest::::testWriteAppender()", "119": "AppenderTest::::testWriteAppender()", "121": "AppenderTest::::testFileAppender()", "122": "AppenderTest::::testFileAppender()", "123": "AppenderTest::::testFileAppender()", "124": "AppenderTest::::testFileAppender()", "125": "AppenderTest::::testFileAppender()", "126": "AppenderTest::::testFileAppender()", "127": "AppenderTest::::testFileAppender()", "128": "AppenderTest::::testFileAppender()", "129": "AppenderTest::::testFileAppender()", "130": "AppenderTest::::testFileAppender()", "131": "AppenderTest::::testFileAppender()", "132": "AppenderTest::::testFileAppender()", "133": "AppenderTest::::testFileAppender()", "134": "AppenderTest::::testFileAppender()", "135": "AppenderTest::::testFileAppender()", "136": "AppenderTest::::testFileAppender()", "137": "AppenderTest::::testFileAppender()", "138": "AppenderTest::::testFileAppender()", "139": "AppenderTest::::testFileAppender()", "140": "AppenderTest::::testFileAppender()", "141": "AppenderTest::::testFileAppender()", "142": "AppenderTest::::testFileAppender()", "143": "AppenderTest::::testFileAppender()", "144": "AppenderTest::::testFileAppender()", "146": "AppenderTest::::testDailyRollingAppender()", "147": "AppenderTest::::testDailyRollingAppender()", "148": "AppenderTest::::testDailyRollingAppender()", "149": "AppenderTest::::testDailyRollingAppender()", "150": "AppenderTest::::testDailyRollingAppender()", "151": "AppenderTest::::testDailyRollingAppender()", "152": "AppenderTest::::testDailyRollingAppender()", "153": "AppenderTest::::testDailyRollingAppender()", "154": "AppenderTest::::testDailyRollingAppender()", "155": "AppenderTest::::testDailyRollingAppender()", "156": "AppenderTest::::testDailyRollingAppender()"}, "tests": [{"test_lines": [30, 69], "covered_lines": [25, 32, 34, 40, 62, 70, 74, 75, 78, 79, 123, 129, 133, 134, 136, 137, 139, 142, 145, 146, 147, 148, 149, 152]}, {"test_lines": [71, 99], "covered_lines": [25, 32, 34, 40, 70, 74, 75, 78, 79, 82, 83, 123, 129, 133, 134, 136, 137, 139, 142, 145, 146, 147, 148, 149, 152]}, {"test_lines": [103, 112], "covered_lines": [25, 32, 34, 40, 78, 79, 123, 129, 133, 134, 136, 137, 139]}, {"test_lines": [114, 119], "covered_lines": [25, 32, 34, 40]}, {"test_lines": [121, 144], "covered_lines": [25, 32, 34, 40, 82, 83]}, {"test_lines": [146, 156], "covered_lines": [25, 32, 34, 40, 82, 83]}]}, "/bernard/dataset_construction/prep/repos/RocketMQC/logging/src/main/java/org/apache/rocketmq/logging/inner/Level.java": {"class_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package org.apache.rocketmq.logging.inner;\n", "\n", "import java.io.Serializable;\n", "\n", "public class Level implements Serializable {\n", "\n", "    transient int level;\n", "    transient String levelStr;\n", "    transient int syslogEquivalent;\n", "\n", "    public final static int OFF_INT = Integer.MAX_VALUE;\n", "    public final static int ERROR_INT = 40000;\n", "    public final static int WARN_INT = 30000;\n", "    public final static int INFO_INT = 20000;\n", "    public final static int DEBUG_INT = 10000;\n", "    public final static int ALL_INT = Integer.MIN_VALUE;\n", "\n", "\n", "    private static final String ALL_NAME = \"ALL\";\n", "\n", "    private static final String DEBUG_NAME = \"DEBUG\";\n", "\n", "    private static final String INFO_NAME = \"INFO\";\n", "\n", "    private static final String WARN_NAME = \"WARN\";\n", "\n", "    private static final String ERROR_NAME = \"ERROR\";\n", "\n", "    private static final String OFF_NAME = \"OFF\";\n", "\n", "    final static public Level OFF = new Level(OFF_INT, OFF_NAME, 0);\n", "\n", "    final static public Level ERROR = new Level(ERROR_INT, ERROR_NAME, 3);\n", "\n", "    final static public Level WARN = new Level(WARN_INT, WARN_NAME, 4);\n", "\n", "    final static public Level INFO = new Level(INFO_INT, INFO_NAME, 6);\n", "\n", "    final static public Level DEBUG = new Level(DEBUG_INT, DEBUG_NAME, 7);\n", "\n", "    final static public Level ALL = new Level(ALL_INT, ALL_NAME, 7);\n", "\n", "    static final long serialVersionUID = 3491141966387921974L;\n", "\n", "    protected Level(int level, String levelStr, int syslogEquivalent) {\n", "        this.level = level;\n", "        this.levelStr = levelStr;\n", "        this.syslogEquivalent = syslogEquivalent;\n", "    }\n", "\n", "    public static Level toLevel(String sArg) {\n", "        return toLevel(sArg, Level.DEBUG);\n", "    }\n", "\n", "    public static Level toLevel(int val) {\n", "        return toLevel(val, Level.DEBUG);\n", "    }\n", "\n", "    public static Level toLevel(int val, Level defaultLevel) {\n", "        switch (val) {\n", "            case ALL_INT:\n", "                return ALL;\n", "            case DEBUG_INT:\n", "                return Level.DEBUG;\n", "            case INFO_INT:\n", "                return Level.INFO;\n", "            case WARN_INT:\n", "                return Level.WARN;\n", "            case ERROR_INT:\n", "                return Level.ERROR;\n", "            case OFF_INT:\n", "                return OFF;\n", "            default:\n", "                return defaultLevel;\n", "        }\n", "    }\n", "\n", "    public static Level toLevel(String sArg, Level defaultLevel) {\n", "        if (sArg == null) {\n", "            return defaultLevel;\n", "        }\n", "        String s = sArg.toUpperCase();\n", "\n", "        if (s.equals(ALL_NAME)) {\n", "            return Level.ALL;\n", "        }\n", "        if (s.equals(DEBUG_NAME)) {\n", "            return Level.DEBUG;\n", "        }\n", "        if (s.equals(INFO_NAME)) {\n", "            return Level.INFO;\n", "        }\n", "        if (s.equals(WARN_NAME)) {\n", "            return Level.WARN;\n", "        }\n", "        if (s.equals(ERROR_NAME)) {\n", "            return Level.ERROR;\n", "        }\n", "        if (s.equals(OFF_NAME)) {\n", "            return Level.OFF;\n", "        }\n", "\n", "        if (s.equals(INFO_NAME)) {\n", "            return Level.INFO;\n", "        }\n", "        return defaultLevel;\n", "    }\n", "\n", "\n", "    public boolean equals(Object o) {\n", "        if (o instanceof Level) {\n", "            Level r = (Level) o;\n", "            return this.level == r.level;\n", "        } else {\n", "            return false;\n", "        }\n", "    }\n", "\n", "    @Override\n", "    public int hashCode() {\n", "        int result = level;\n", "        result = 31 * result + (levelStr != null ? levelStr.hashCode() : 0);\n", "        result = 31 * result + syslogEquivalent;\n", "        return result;\n", "    }\n", "\n", "    public boolean isGreaterOrEqual(Level r) {\n", "        return level >= r.level;\n", "    }\n", "\n", "    final public String toString() {\n", "        return levelStr;\n", "    }\n", "\n", "    public final int toInt() {\n", "        return level;\n", "    }\n", "\n", "}\n"], "test_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package org.apache.rocketmq.logging.inner;\n", "\n", "import org.junit.Assert;\n", "import org.junit.Test;\n", "\n", "public class LevelTest {\n", "\n", "    @Test\n", "    public void levelTest() {\n", "        Level info = Level.toLevel(\"info\");\n", "        Level error = Level.toLevel(3);\n", "        Assert.assertTrue(error != null && info != null);\n", "    }\n", "\n", "    @Test\n", "    public void loggerLevel(){\n", "        Level level = Logger.getRootLogger().getLevel();\n", "        Assert.assertTrue(level!=null);\n", "    }\n", "}\n"], "method_lines_dic": {"Level::::toLevel(java.lang.String)": [68, 70], "Level::::toLevel(int)": [72, 74], "Level::::toLevel(int,org.apache.rocketmq.logging.inner.Level)": [76, 93], "Level::::toLevel(java.lang.String,org.apache.rocketmq.logging.inner.Level)": [95, 124], "Level::::equals(java.lang.Object)": [127, 134], "Level::::hashCode()": [136, 142], "Level::::isGreaterOrEqual(org.apache.rocketmq.logging.inner.Level)": [144, 146], "Level::::toString()": [148, 150], "Level::::toInt()": [152, 154]}, "test_method_lines_dic": {"LevelTest::::levelTest()": [25, 30], "LevelTest::::loggerLevel()": [32, 36]}, "reverse_method_lines_dic": {"68": "Level::::toLevel(java.lang.String)", "69": "Level::::toLevel(java.lang.String)", "70": "Level::::toLevel(java.lang.String)", "72": "Level::::toLevel(int)", "73": "Level::::toLevel(int)", "74": "Level::::toLevel(int)", "76": "Level::::toLevel(int,org.apache.rocketmq.logging.inner.Level)", "77": "Level::::toLevel(int,org.apache.rocketmq.logging.inner.Level)", "78": "Level::::toLevel(int,org.apache.rocketmq.logging.inner.Level)", "79": "Level::::toLevel(int,org.apache.rocketmq.logging.inner.Level)", "80": "Level::::toLevel(int,org.apache.rocketmq.logging.inner.Level)", "81": "Level::::toLevel(int,org.apache.rocketmq.logging.inner.Level)", "82": "Level::::toLevel(int,org.apache.rocketmq.logging.inner.Level)", "83": "Level::::toLevel(int,org.apache.rocketmq.logging.inner.Level)", "84": "Level::::toLevel(int,org.apache.rocketmq.logging.inner.Level)", "85": "Level::::toLevel(int,org.apache.rocketmq.logging.inner.Level)", "86": "Level::::toLevel(int,org.apache.rocketmq.logging.inner.Level)", "87": "Level::::toLevel(int,org.apache.rocketmq.logging.inner.Level)", "88": "Level::::toLevel(int,org.apache.rocketmq.logging.inner.Level)", "89": "Level::::toLevel(int,org.apache.rocketmq.logging.inner.Level)", "90": "Level::::toLevel(int,org.apache.rocketmq.logging.inner.Level)", "91": "Level::::toLevel(int,org.apache.rocketmq.logging.inner.Level)", "92": "Level::::toLevel(int,org.apache.rocketmq.logging.inner.Level)", "93": "Level::::toLevel(int,org.apache.rocketmq.logging.inner.Level)", "95": "Level::::toLevel(java.lang.String,org.apache.rocketmq.logging.inner.Level)", "96": "Level::::toLevel(java.lang.String,org.apache.rocketmq.logging.inner.Level)", "97": "Level::::toLevel(java.lang.String,org.apache.rocketmq.logging.inner.Level)", "98": "Level::::toLevel(java.lang.String,org.apache.rocketmq.logging.inner.Level)", "99": "Level::::toLevel(java.lang.String,org.apache.rocketmq.logging.inner.Level)", "100": "Level::::toLevel(java.lang.String,org.apache.rocketmq.logging.inner.Level)", "101": "Level::::toLevel(java.lang.String,org.apache.rocketmq.logging.inner.Level)", "102": "Level::::toLevel(java.lang.String,org.apache.rocketmq.logging.inner.Level)", "103": "Level::::toLevel(java.lang.String,org.apache.rocketmq.logging.inner.Level)", "104": "Level::::toLevel(java.lang.String,org.apache.rocketmq.logging.inner.Level)", "105": "Level::::toLevel(java.lang.String,org.apache.rocketmq.logging.inner.Level)", "106": "Level::::toLevel(java.lang.String,org.apache.rocketmq.logging.inner.Level)", "107": "Level::::toLevel(java.lang.String,org.apache.rocketmq.logging.inner.Level)", "108": "Level::::toLevel(java.lang.String,org.apache.rocketmq.logging.inner.Level)", "109": "Level::::toLevel(java.lang.String,org.apache.rocketmq.logging.inner.Level)", "110": "Level::::toLevel(java.lang.String,org.apache.rocketmq.logging.inner.Level)", "111": "Level::::toLevel(java.lang.String,org.apache.rocketmq.logging.inner.Level)", "112": "Level::::toLevel(java.lang.String,org.apache.rocketmq.logging.inner.Level)", "113": "Level::::toLevel(java.lang.String,org.apache.rocketmq.logging.inner.Level)", "114": "Level::::toLevel(java.lang.String,org.apache.rocketmq.logging.inner.Level)", "115": "Level::::toLevel(java.lang.String,org.apache.rocketmq.logging.inner.Level)", "116": "Level::::toLevel(java.lang.String,org.apache.rocketmq.logging.inner.Level)", "117": "Level::::toLevel(java.lang.String,org.apache.rocketmq.logging.inner.Level)", "118": "Level::::toLevel(java.lang.String,org.apache.rocketmq.logging.inner.Level)", "119": "Level::::toLevel(java.lang.String,org.apache.rocketmq.logging.inner.Level)", "120": "Level::::toLevel(java.lang.String,org.apache.rocketmq.logging.inner.Level)", "121": "Level::::toLevel(java.lang.String,org.apache.rocketmq.logging.inner.Level)", "122": "Level::::toLevel(java.lang.String,org.apache.rocketmq.logging.inner.Level)", "123": "Level::::toLevel(java.lang.String,org.apache.rocketmq.logging.inner.Level)", "124": "Level::::toLevel(java.lang.String,org.apache.rocketmq.logging.inner.Level)", "127": "Level::::equals(java.lang.Object)", "128": "Level::::equals(java.lang.Object)", "129": "Level::::equals(java.lang.Object)", "130": "Level::::equals(java.lang.Object)", "131": "Level::::equals(java.lang.Object)", "132": "Level::::equals(java.lang.Object)", "133": "Level::::equals(java.lang.Object)", "134": "Level::::equals(java.lang.Object)", "136": "Level::::hashCode()", "137": "Level::::hashCode()", "138": "Level::::hashCode()", "139": "Level::::hashCode()", "140": "Level::::hashCode()", "141": "Level::::hashCode()", "142": "Level::::hashCode()", "144": "Level::::isGreaterOrEqual(org.apache.rocketmq.logging.inner.Level)", "145": "Level::::isGreaterOrEqual(org.apache.rocketmq.logging.inner.Level)", "146": "Level::::isGreaterOrEqual(org.apache.rocketmq.logging.inner.Level)", "148": "Level::::toString()", "149": "Level::::toString()", "150": "Level::::toString()", "152": "Level::::toInt()", "153": "Level::::toInt()", "154": "Level::::toInt()"}, "test_reverse_method_lines_dic": {"25": "LevelTest::::levelTest()", "26": "LevelTest::::levelTest()", "27": "LevelTest::::levelTest()", "28": "LevelTest::::levelTest()", "29": "LevelTest::::levelTest()", "30": "LevelTest::::levelTest()", "32": "LevelTest::::loggerLevel()", "33": "LevelTest::::loggerLevel()", "34": "LevelTest::::loggerLevel()", "35": "LevelTest::::loggerLevel()", "36": "LevelTest::::loggerLevel()"}, "tests": [{"test_lines": [25, 30], "covered_lines": [48, 50, 52, 54, 56, 58, 62, 63, 64, 65, 66, 69, 73, 77, 91, 96, 99, 101, 104, 107, 108]}, {"test_lines": [32, 36], "covered_lines": [48, 50, 52, 54, 56, 58, 62, 63, 64, 65, 66]}]}}