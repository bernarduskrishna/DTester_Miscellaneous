{
  "/bernard/dataset_construction/prep/repos/RocketMQC/acl/src/main/java/org/apache/rocketmq/acl/plain/PlainAccessValidator.java": {
    "class_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.acl.plain;\n",
      "\n",
      "import java.util.List;\n",
      "import java.util.Map;\n",
      "import java.util.SortedMap;\n",
      "import java.util.TreeMap;\n",
      "import org.apache.rocketmq.acl.AccessResource;\n",
      "import org.apache.rocketmq.acl.AccessValidator;\n",
      "import org.apache.rocketmq.acl.common.AclException;\n",
      "import org.apache.rocketmq.acl.common.AclUtils;\n",
      "import org.apache.rocketmq.acl.common.Permission;\n",
      "import org.apache.rocketmq.acl.common.SessionCredentials;\n",
      "import org.apache.rocketmq.common.AclConfig;\n",
      "import org.apache.rocketmq.common.MixAll;\n",
      "import org.apache.rocketmq.common.PlainAccessConfig;\n",
      "import org.apache.rocketmq.common.protocol.RequestCode;\n",
      "import org.apache.rocketmq.common.protocol.header.GetConsumerListByGroupRequestHeader;\n",
      "import org.apache.rocketmq.common.protocol.header.UnregisterClientRequestHeader;\n",
      "import org.apache.rocketmq.common.protocol.header.UpdateConsumerOffsetRequestHeader;\n",
      "import org.apache.rocketmq.common.protocol.heartbeat.ConsumerData;\n",
      "import org.apache.rocketmq.common.protocol.heartbeat.HeartbeatData;\n",
      "import org.apache.rocketmq.common.protocol.heartbeat.SubscriptionData;\n",
      "import org.apache.rocketmq.remoting.protocol.RemotingCommand;\n",
      "\n",
      "import static org.apache.rocketmq.acl.plain.PlainAccessResource.getRetryTopic;\n",
      "\n",
      "public class PlainAccessValidator implements AccessValidator {\n",
      "\n",
      "    private PlainPermissionManager aclPlugEngine;\n",
      "\n",
      "    public PlainAccessValidator() {\n",
      "        aclPlugEngine = new PlainPermissionManager();\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public AccessResource parse(RemotingCommand request, String remoteAddr) {\n",
      "        PlainAccessResource accessResource = new PlainAccessResource();\n",
      "        if (remoteAddr != null && remoteAddr.contains(\":\")) {\n",
      "            accessResource.setWhiteRemoteAddress(remoteAddr.substring(0, remoteAddr.lastIndexOf(':')));\n",
      "        } else {\n",
      "            accessResource.setWhiteRemoteAddress(remoteAddr);\n",
      "        }\n",
      "\n",
      "        accessResource.setRequestCode(request.getCode());\n",
      "\n",
      "        if (request.getExtFields() == null) {\n",
      "            // If request's extFields is null,then return accessResource directly(users can use whiteAddress pattern)\n",
      "            // The following logic codes depend on the request's extFields not to be null.\n",
      "            return accessResource;\n",
      "        }\n",
      "        accessResource.setAccessKey(request.getExtFields().get(SessionCredentials.ACCESS_KEY));\n",
      "        accessResource.setSignature(request.getExtFields().get(SessionCredentials.SIGNATURE));\n",
      "        accessResource.setSecretToken(request.getExtFields().get(SessionCredentials.SECURITY_TOKEN));\n",
      "\n",
      "        try {\n",
      "            switch (request.getCode()) {\n",
      "                case RequestCode.SEND_MESSAGE:\n",
      "                    accessResource.addResourceAndPerm(request.getExtFields().get(\"topic\"), Permission.PUB);\n",
      "                    break;\n",
      "                case RequestCode.SEND_MESSAGE_V2:\n",
      "                    accessResource.addResourceAndPerm(request.getExtFields().get(\"b\"), Permission.PUB);\n",
      "                    break;\n",
      "                case RequestCode.CONSUMER_SEND_MSG_BACK:\n",
      "                    accessResource.addResourceAndPerm(request.getExtFields().get(\"originTopic\"), Permission.PUB);\n",
      "                    accessResource.addResourceAndPerm(getRetryTopic(request.getExtFields().get(\"group\")), Permission.SUB);\n",
      "                    break;\n",
      "                case RequestCode.PULL_MESSAGE:\n",
      "                    accessResource.addResourceAndPerm(request.getExtFields().get(\"topic\"), Permission.SUB);\n",
      "                    accessResource.addResourceAndPerm(getRetryTopic(request.getExtFields().get(\"consumerGroup\")), Permission.SUB);\n",
      "                    break;\n",
      "                case RequestCode.QUERY_MESSAGE:\n",
      "                    accessResource.addResourceAndPerm(request.getExtFields().get(\"topic\"), Permission.SUB);\n",
      "                    break;\n",
      "                case RequestCode.HEART_BEAT:\n",
      "                    HeartbeatData heartbeatData = HeartbeatData.decode(request.getBody(), HeartbeatData.class);\n",
      "                    for (ConsumerData data : heartbeatData.getConsumerDataSet()) {\n",
      "                        accessResource.addResourceAndPerm(getRetryTopic(data.getGroupName()), Permission.SUB);\n",
      "                        for (SubscriptionData subscriptionData : data.getSubscriptionDataSet()) {\n",
      "                            accessResource.addResourceAndPerm(subscriptionData.getTopic(), Permission.SUB);\n",
      "                        }\n",
      "                    }\n",
      "                    break;\n",
      "                case RequestCode.UNREGISTER_CLIENT:\n",
      "                    final UnregisterClientRequestHeader unregisterClientRequestHeader =\n",
      "                        (UnregisterClientRequestHeader) request\n",
      "                            .decodeCommandCustomHeader(UnregisterClientRequestHeader.class);\n",
      "                    accessResource.addResourceAndPerm(getRetryTopic(unregisterClientRequestHeader.getConsumerGroup()), Permission.SUB);\n",
      "                    break;\n",
      "                case RequestCode.GET_CONSUMER_LIST_BY_GROUP:\n",
      "                    final GetConsumerListByGroupRequestHeader getConsumerListByGroupRequestHeader =\n",
      "                        (GetConsumerListByGroupRequestHeader) request\n",
      "                            .decodeCommandCustomHeader(GetConsumerListByGroupRequestHeader.class);\n",
      "                    accessResource.addResourceAndPerm(getRetryTopic(getConsumerListByGroupRequestHeader.getConsumerGroup()), Permission.SUB);\n",
      "                    break;\n",
      "                case RequestCode.UPDATE_CONSUMER_OFFSET:\n",
      "                    final UpdateConsumerOffsetRequestHeader updateConsumerOffsetRequestHeader =\n",
      "                        (UpdateConsumerOffsetRequestHeader) request\n",
      "                            .decodeCommandCustomHeader(UpdateConsumerOffsetRequestHeader.class);\n",
      "                    accessResource.addResourceAndPerm(getRetryTopic(updateConsumerOffsetRequestHeader.getConsumerGroup()), Permission.SUB);\n",
      "                    accessResource.addResourceAndPerm(updateConsumerOffsetRequestHeader.getTopic(), Permission.SUB);\n",
      "                    break;\n",
      "                default:\n",
      "                    break;\n",
      "\n",
      "            }\n",
      "        } catch (Throwable t) {\n",
      "            throw new AclException(t.getMessage(), t);\n",
      "        }\n",
      "\n",
      "        // Content\n",
      "        SortedMap<String, String> map = new TreeMap<String, String>();\n",
      "        for (Map.Entry<String, String> entry : request.getExtFields().entrySet()) {\n",
      "            if (!SessionCredentials.SIGNATURE.equals(entry.getKey())\n",
      "                    && !MixAll.UNIQUE_MSG_QUERY_FLAG.equals(entry.getKey())) {\n",
      "                map.put(entry.getKey(), entry.getValue());\n",
      "            }\n",
      "        }\n",
      "        accessResource.setContent(AclUtils.combineRequestContent(request, map));\n",
      "        return accessResource;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public void validate(AccessResource accessResource) {\n",
      "        aclPlugEngine.validate((PlainAccessResource) accessResource);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public boolean updateAccessConfig(PlainAccessConfig plainAccessConfig) {\n",
      "        return aclPlugEngine.updateAccessConfig(plainAccessConfig);\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public boolean deleteAccessConfig(String accesskey) {\n",
      "        return aclPlugEngine.deleteAccessConfig(accesskey);\n",
      "    }\n",
      "\n",
      "    @Override public String getAclConfigVersion() {\n",
      "        return aclPlugEngine.getAclConfigDataVersion();\n",
      "    }\n",
      "\n",
      "    @Override public boolean updateGlobalWhiteAddrsConfig(List<String> globalWhiteAddrsList) {\n",
      "        return aclPlugEngine.updateGlobalWhiteAddrsConfig(globalWhiteAddrsList);\n",
      "    }\n",
      "\n",
      "    @Override public AclConfig getAllAclConfig() {\n",
      "        return aclPlugEngine.getAllAclConfig();\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.acl.plain;\n",
      "\n",
      "\n",
      "import java.nio.ByteBuffer;\n",
      "import java.util.ArrayList;\n",
      "import java.util.HashSet;\n",
      "import java.util.List;\n",
      "import java.util.Map;\n",
      "import java.util.Set;\n",
      "\n",
      "import org.apache.rocketmq.acl.common.AclClientRPCHook;\n",
      "import org.apache.rocketmq.acl.common.AclConstants;\n",
      "import org.apache.rocketmq.acl.common.AclException;\n",
      "import org.apache.rocketmq.acl.common.AclUtils;\n",
      "import org.apache.rocketmq.acl.common.SessionCredentials;\n",
      "import org.apache.rocketmq.common.AclConfig;\n",
      "import org.apache.rocketmq.common.MixAll;\n",
      "import org.apache.rocketmq.common.PlainAccessConfig;\n",
      "import org.apache.rocketmq.common.protocol.RequestCode;\n",
      "import org.apache.rocketmq.common.protocol.header.*;\n",
      "import org.apache.rocketmq.common.protocol.heartbeat.ConsumerData;\n",
      "import org.apache.rocketmq.common.protocol.heartbeat.HeartbeatData;\n",
      "import org.apache.rocketmq.common.protocol.heartbeat.ProducerData;\n",
      "import org.apache.rocketmq.common.protocol.heartbeat.SubscriptionData;\n",
      "import org.apache.rocketmq.remoting.protocol.RemotingCommand;\n",
      "import org.junit.Assert;\n",
      "import org.junit.Before;\n",
      "import org.junit.Test;\n",
      "\n",
      "public class PlainAccessValidatorTest {\n",
      "\n",
      "    private PlainAccessValidator plainAccessValidator;\n",
      "    private AclClientRPCHook aclClient;\n",
      "    private SessionCredentials sessionCredentials;\n",
      "    @Before\n",
      "    public void init() {\n",
      "        System.setProperty(\"rocketmq.home.dir\", \"src/test/resources\");\n",
      "        System.setProperty(\"rocketmq.acl.plain.file\", \"/conf/plain_acl.yml\");\n",
      "        plainAccessValidator = new PlainAccessValidator();\n",
      "        sessionCredentials = new SessionCredentials();\n",
      "        sessionCredentials.setAccessKey(\"RocketMQ\");\n",
      "        sessionCredentials.setSecretKey(\"12345678\");\n",
      "        sessionCredentials.setSecurityToken(\"87654321\");\n",
      "        aclClient = new AclClientRPCHook(sessionCredentials);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void contentTest() {\n",
      "        SendMessageRequestHeader messageRequestHeader = new SendMessageRequestHeader();\n",
      "        messageRequestHeader.setTopic(\"topicA\");\n",
      "        RemotingCommand remotingCommand = RemotingCommand.createRequestCommand(RequestCode.SEND_MESSAGE, messageRequestHeader);\n",
      "        aclClient.doBeforeRequest(\"\", remotingCommand);\n",
      "\n",
      "        ByteBuffer buf = remotingCommand.encodeHeader();\n",
      "        buf.getInt();\n",
      "        buf = ByteBuffer.allocate(buf.limit() - buf.position()).put(buf);\n",
      "        buf.position(0);\n",
      "        PlainAccessResource accessResource = (PlainAccessResource) plainAccessValidator.parse(RemotingCommand.decode(buf), \"127.0.0.1\");\n",
      "        String signature = AclUtils.calSignature(accessResource.getContent(), sessionCredentials.getSecretKey());\n",
      "\n",
      "        Assert.assertEquals(accessResource.getSignature(), signature);\n",
      "\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void validateTest() {\n",
      "        SendMessageRequestHeader messageRequestHeader = new SendMessageRequestHeader();\n",
      "        messageRequestHeader.setTopic(\"topicB\");\n",
      "        RemotingCommand remotingCommand = RemotingCommand.createRequestCommand(RequestCode.SEND_MESSAGE, messageRequestHeader);\n",
      "        aclClient.doBeforeRequest(\"\", remotingCommand);\n",
      "\n",
      "        ByteBuffer buf = remotingCommand.encodeHeader();\n",
      "        buf.getInt();\n",
      "        buf = ByteBuffer.allocate(buf.limit() - buf.position()).put(buf);\n",
      "        buf.position(0);\n",
      "        PlainAccessResource accessResource = (PlainAccessResource) plainAccessValidator.parse(RemotingCommand.decode(buf), \"192.168.0.1\");\n",
      "        plainAccessValidator.validate(accessResource);\n",
      "\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void validateSendMessageTest() {\n",
      "        SendMessageRequestHeader messageRequestHeader = new SendMessageRequestHeader();\n",
      "        messageRequestHeader.setTopic(\"topicB\");\n",
      "        RemotingCommand remotingCommand = RemotingCommand.createRequestCommand(RequestCode.SEND_MESSAGE, messageRequestHeader);\n",
      "        aclClient.doBeforeRequest(\"\", remotingCommand);\n",
      "\n",
      "        ByteBuffer buf = remotingCommand.encodeHeader();\n",
      "        buf.getInt();\n",
      "        buf = ByteBuffer.allocate(buf.limit() - buf.position()).put(buf);\n",
      "        buf.position(0);\n",
      "        PlainAccessResource accessResource = (PlainAccessResource) plainAccessValidator.parse(RemotingCommand.decode(buf), \"192.168.0.1\");\n",
      "        plainAccessValidator.validate(accessResource);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void validateSendMessageV2Test() {\n",
      "        SendMessageRequestHeader messageRequestHeader = new SendMessageRequestHeader();\n",
      "        messageRequestHeader.setTopic(\"topicC\");\n",
      "        RemotingCommand remotingCommand = RemotingCommand.createRequestCommand(RequestCode.SEND_MESSAGE_V2, SendMessageRequestHeaderV2.createSendMessageRequestHeaderV2(messageRequestHeader));\n",
      "        aclClient.doBeforeRequest(\"\", remotingCommand);\n",
      "\n",
      "        ByteBuffer buf = remotingCommand.encodeHeader();\n",
      "        buf.getInt();\n",
      "        buf = ByteBuffer.allocate(buf.limit() - buf.position()).put(buf);\n",
      "        buf.position(0);\n",
      "        PlainAccessResource accessResource = (PlainAccessResource) plainAccessValidator.parse(RemotingCommand.decode(buf), \"192.168.0.1:9876\");\n",
      "        plainAccessValidator.validate(accessResource);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void validateForAdminCommandWithOutAclRPCHook() {\n",
      "        RemotingCommand consumerOffsetAdminRequest = RemotingCommand.createRequestCommand(RequestCode.GET_ALL_CONSUMER_OFFSET, null);\n",
      "        plainAccessValidator.parse(consumerOffsetAdminRequest, \"192.168.0.1:9876\");\n",
      "\n",
      "        RemotingCommand subscriptionGroupAdminRequest = RemotingCommand.createRequestCommand(RequestCode.GET_ALL_SUBSCRIPTIONGROUP_CONFIG, null);\n",
      "        plainAccessValidator.parse(subscriptionGroupAdminRequest, \"192.168.0.1:9876\");\n",
      "\n",
      "        RemotingCommand delayOffsetAdminRequest = RemotingCommand.createRequestCommand(RequestCode.GET_ALL_DELAY_OFFSET, null);\n",
      "        plainAccessValidator.parse(delayOffsetAdminRequest, \"192.168.0.1:9876\");\n",
      "\n",
      "        RemotingCommand allTopicConfigAdminRequest = RemotingCommand.createRequestCommand(RequestCode.GET_ALL_TOPIC_CONFIG, null);\n",
      "        plainAccessValidator.parse(allTopicConfigAdminRequest, \"192.168.0.1:9876\");\n",
      "\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void validatePullMessageTest() {\n",
      "        PullMessageRequestHeader pullMessageRequestHeader=new PullMessageRequestHeader();\n",
      "        pullMessageRequestHeader.setTopic(\"topicC\");\n",
      "        pullMessageRequestHeader.setConsumerGroup(\"consumerGroupA\");\n",
      "        RemotingCommand remotingCommand = RemotingCommand.createRequestCommand(RequestCode.PULL_MESSAGE,pullMessageRequestHeader);\n",
      "        aclClient.doBeforeRequest(\"\", remotingCommand);\n",
      "        ByteBuffer buf = remotingCommand.encodeHeader();\n",
      "        buf.getInt();\n",
      "        buf = ByteBuffer.allocate(buf.limit() - buf.position()).put(buf);\n",
      "        buf.position(0);\n",
      "        PlainAccessResource accessResource = (PlainAccessResource) plainAccessValidator.parse(RemotingCommand.decode(buf), \"192.168.0.1:9876\");\n",
      "        plainAccessValidator.validate(accessResource);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void validateConsumeMessageBackTest() {\n",
      "        ConsumerSendMsgBackRequestHeader consumerSendMsgBackRequestHeader=new ConsumerSendMsgBackRequestHeader();\n",
      "        consumerSendMsgBackRequestHeader.setOriginTopic(\"topicC\");\n",
      "        consumerSendMsgBackRequestHeader.setGroup(\"consumerGroupA\");\n",
      "        RemotingCommand remotingCommand = RemotingCommand.createRequestCommand(RequestCode.CONSUMER_SEND_MSG_BACK,consumerSendMsgBackRequestHeader);\n",
      "        aclClient.doBeforeRequest(\"\", remotingCommand);\n",
      "        ByteBuffer buf = remotingCommand.encodeHeader();\n",
      "        buf.getInt();\n",
      "        buf = ByteBuffer.allocate(buf.limit() - buf.position()).put(buf);\n",
      "        buf.position(0);\n",
      "        PlainAccessResource accessResource = (PlainAccessResource) plainAccessValidator.parse(RemotingCommand.decode(buf), \"192.168.0.1:9876\");\n",
      "        plainAccessValidator.validate(accessResource);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void validateQueryMessageTest() {\n",
      "        QueryMessageRequestHeader queryMessageRequestHeader=new QueryMessageRequestHeader();\n",
      "        queryMessageRequestHeader.setTopic(\"topicC\");\n",
      "        RemotingCommand remotingCommand = RemotingCommand.createRequestCommand(RequestCode.QUERY_MESSAGE,queryMessageRequestHeader);\n",
      "        aclClient.doBeforeRequest(\"\", remotingCommand);\n",
      "        ByteBuffer buf = remotingCommand.encodeHeader();\n",
      "        buf.getInt();\n",
      "        buf = ByteBuffer.allocate(buf.limit() - buf.position()).put(buf);\n",
      "        buf.position(0);\n",
      "        PlainAccessResource accessResource = (PlainAccessResource) plainAccessValidator.parse(RemotingCommand.decode(buf), \"192.168.0.1:9876\");\n",
      "        plainAccessValidator.validate(accessResource);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void validateQueryMessageByKeyTest() {\n",
      "        QueryMessageRequestHeader queryMessageRequestHeader=new QueryMessageRequestHeader();\n",
      "        queryMessageRequestHeader.setTopic(\"topicC\");\n",
      "        RemotingCommand remotingCommand = RemotingCommand.createRequestCommand(RequestCode.QUERY_MESSAGE,queryMessageRequestHeader);\n",
      "        aclClient.doBeforeRequest(\"\", remotingCommand);\n",
      "        remotingCommand.addExtField(MixAll.UNIQUE_MSG_QUERY_FLAG, \"false\");\n",
      "        ByteBuffer buf = remotingCommand.encodeHeader();\n",
      "        buf.getInt();\n",
      "        buf = ByteBuffer.allocate(buf.limit() - buf.position()).put(buf);\n",
      "        buf.position(0);\n",
      "        PlainAccessResource accessResource = (PlainAccessResource) plainAccessValidator.parse(RemotingCommand.decode(buf), \"192.168.1.1:9876\");\n",
      "        plainAccessValidator.validate(accessResource);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void validateHeartBeatTest() {\n",
      "        HeartbeatData heartbeatData=new HeartbeatData();\n",
      "        Set<ProducerData> producerDataSet=new HashSet<>();\n",
      "        Set<ConsumerData> consumerDataSet=new HashSet<>();\n",
      "        Set<SubscriptionData> subscriptionDataSet=new HashSet<>();\n",
      "        ProducerData producerData=new ProducerData();\n",
      "        producerData.setGroupName(\"producerGroupA\");\n",
      "        ConsumerData consumerData=new ConsumerData();\n",
      "        consumerData.setGroupName(\"consumerGroupA\");\n",
      "        SubscriptionData subscriptionData=new SubscriptionData();\n",
      "        subscriptionData.setTopic(\"topicC\");\n",
      "        producerDataSet.add(producerData);\n",
      "        consumerDataSet.add(consumerData);\n",
      "        subscriptionDataSet.add(subscriptionData);\n",
      "        consumerData.setSubscriptionDataSet(subscriptionDataSet);\n",
      "        heartbeatData.setProducerDataSet(producerDataSet);\n",
      "        heartbeatData.setConsumerDataSet(consumerDataSet);\n",
      "        RemotingCommand remotingCommand = RemotingCommand.createRequestCommand(RequestCode.HEART_BEAT,null);\n",
      "        remotingCommand.setBody(heartbeatData.encode());\n",
      "        aclClient.doBeforeRequest(\"\", remotingCommand);\n",
      "        ByteBuffer buf = remotingCommand.encode();\n",
      "        buf.getInt();\n",
      "        buf = ByteBuffer.allocate(buf.limit() - buf.position()).put(buf);\n",
      "        buf.position(0);\n",
      "        PlainAccessResource accessResource = (PlainAccessResource) plainAccessValidator.parse(RemotingCommand.decode(buf), \"192.168.0.1:9876\");\n",
      "        plainAccessValidator.validate(accessResource);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void validateUnRegisterClientTest() {\n",
      "        UnregisterClientRequestHeader unregisterClientRequestHeader=new UnregisterClientRequestHeader();\n",
      "        unregisterClientRequestHeader.setConsumerGroup(\"consumerGroupA\");\n",
      "        RemotingCommand remotingCommand = RemotingCommand.createRequestCommand(RequestCode.UNREGISTER_CLIENT,unregisterClientRequestHeader);\n",
      "        aclClient.doBeforeRequest(\"\", remotingCommand);\n",
      "        ByteBuffer buf = remotingCommand.encodeHeader();\n",
      "        buf.getInt();\n",
      "        buf = ByteBuffer.allocate(buf.limit() - buf.position()).put(buf);\n",
      "        buf.position(0);\n",
      "        PlainAccessResource accessResource = (PlainAccessResource) plainAccessValidator.parse(RemotingCommand.decode(buf), \"192.168.0.1:9876\");\n",
      "        plainAccessValidator.validate(accessResource);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void validateGetConsumerListByGroupTest() {\n",
      "        GetConsumerListByGroupRequestHeader getConsumerListByGroupRequestHeader=new GetConsumerListByGroupRequestHeader();\n",
      "        getConsumerListByGroupRequestHeader.setConsumerGroup(\"consumerGroupA\");\n",
      "        RemotingCommand remotingCommand = RemotingCommand.createRequestCommand(RequestCode.GET_CONSUMER_LIST_BY_GROUP,getConsumerListByGroupRequestHeader);\n",
      "        aclClient.doBeforeRequest(\"\", remotingCommand);\n",
      "        ByteBuffer buf = remotingCommand.encodeHeader();\n",
      "        buf.getInt();\n",
      "        buf = ByteBuffer.allocate(buf.limit() - buf.position()).put(buf);\n",
      "        buf.position(0);\n",
      "        PlainAccessResource accessResource = (PlainAccessResource) plainAccessValidator.parse(RemotingCommand.decode(buf), \"192.168.0.1:9876\");\n",
      "        plainAccessValidator.validate(accessResource);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void validateUpdateConsumerOffSetTest() {\n",
      "        UpdateConsumerOffsetRequestHeader updateConsumerOffsetRequestHeader=new UpdateConsumerOffsetRequestHeader();\n",
      "        updateConsumerOffsetRequestHeader.setConsumerGroup(\"consumerGroupA\");\n",
      "        RemotingCommand remotingCommand = RemotingCommand.createRequestCommand(RequestCode.UPDATE_CONSUMER_OFFSET,updateConsumerOffsetRequestHeader);\n",
      "        aclClient.doBeforeRequest(\"\", remotingCommand);\n",
      "        ByteBuffer buf = remotingCommand.encodeHeader();\n",
      "        buf.getInt();\n",
      "        buf = ByteBuffer.allocate(buf.limit() - buf.position()).put(buf);\n",
      "        buf.position(0);\n",
      "        PlainAccessResource accessResource = (PlainAccessResource) plainAccessValidator.parse(RemotingCommand.decode(buf), \"192.168.0.1:9876\");\n",
      "        plainAccessValidator.validate(accessResource);\n",
      "    }\n",
      "\n",
      "    @Test(expected = AclException.class)\n",
      "    public void validateNullAccessKeyTest() {\n",
      "        SessionCredentials sessionCredentials=new SessionCredentials();\n",
      "        sessionCredentials.setAccessKey(\"RocketMQ1\");\n",
      "        sessionCredentials.setSecretKey(\"1234\");\n",
      "        AclClientRPCHook aclClientRPCHook=new AclClientRPCHook(sessionCredentials);\n",
      "        SendMessageRequestHeader messageRequestHeader = new SendMessageRequestHeader();\n",
      "        messageRequestHeader.setTopic(\"topicB\");\n",
      "        RemotingCommand remotingCommand = RemotingCommand.createRequestCommand(RequestCode.SEND_MESSAGE, messageRequestHeader);\n",
      "        aclClientRPCHook.doBeforeRequest(\"\", remotingCommand);\n",
      "\n",
      "        ByteBuffer buf = remotingCommand.encodeHeader();\n",
      "        buf.getInt();\n",
      "        buf = ByteBuffer.allocate(buf.limit() - buf.position()).put(buf);\n",
      "        buf.position(0);\n",
      "        PlainAccessResource accessResource = (PlainAccessResource) plainAccessValidator.parse(RemotingCommand.decode(buf), \"192.168.1.1\");\n",
      "        plainAccessValidator.validate(accessResource);\n",
      "    }\n",
      "\n",
      "    @Test(expected = AclException.class)\n",
      "    public void validateErrorSecretKeyTest() {\n",
      "        SessionCredentials sessionCredentials=new SessionCredentials();\n",
      "        sessionCredentials.setAccessKey(\"RocketMQ\");\n",
      "        sessionCredentials.setSecretKey(\"1234\");\n",
      "        AclClientRPCHook aclClientRPCHook=new AclClientRPCHook(sessionCredentials);\n",
      "        SendMessageRequestHeader messageRequestHeader = new SendMessageRequestHeader();\n",
      "        messageRequestHeader.setTopic(\"topicB\");\n",
      "        RemotingCommand remotingCommand = RemotingCommand.createRequestCommand(RequestCode.SEND_MESSAGE, messageRequestHeader);\n",
      "        aclClientRPCHook.doBeforeRequest(\"\", remotingCommand);\n",
      "\n",
      "        ByteBuffer buf = remotingCommand.encodeHeader();\n",
      "        buf.getInt();\n",
      "        buf = ByteBuffer.allocate(buf.limit() - buf.position()).put(buf);\n",
      "        buf.position(0);\n",
      "        PlainAccessResource accessResource = (PlainAccessResource) plainAccessValidator.parse(RemotingCommand.decode(buf), \"192.168.1.1\");\n",
      "        plainAccessValidator.validate(accessResource);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void validateGetAllTopicConfigTest() {\n",
      "        String whiteRemoteAddress = \"192.168.0.1\";\n",
      "        RemotingCommand remotingCommand = RemotingCommand.createRequestCommand(RequestCode.GET_ALL_TOPIC_CONFIG, null);\n",
      "\n",
      "        ByteBuffer buf = remotingCommand.encodeHeader();\n",
      "        buf.getInt();\n",
      "        buf = ByteBuffer.allocate(buf.limit() - buf.position()).put(buf);\n",
      "        buf.position(0);\n",
      "        PlainAccessResource accessResource = (PlainAccessResource) plainAccessValidator.parse(RemotingCommand.decode(buf), whiteRemoteAddress);\n",
      "        plainAccessValidator.validate(accessResource);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void updateAccessAclYamlConfigNormalTest() {\n",
      "        System.setProperty(\"rocketmq.home.dir\", \"src/test/resources\");\n",
      "        System.setProperty(\"rocketmq.acl.plain.file\", \"/conf/plain_acl_update_create.yml\");\n",
      "\n",
      "        String targetFileName = \"src/test/resources/conf/plain_acl_update_create.yml\";\n",
      "        Map<String, Object> backUpAclConfigMap = AclUtils.getYamlDataObject(targetFileName, Map.class);\n",
      "\n",
      "        PlainAccessConfig plainAccessConfig = new PlainAccessConfig();\n",
      "        plainAccessConfig.setAccessKey(\"RocketMQ\");\n",
      "        plainAccessConfig.setSecretKey(\"1234567890\");\n",
      "        plainAccessConfig.setDefaultGroupPerm(\"PUB\");\n",
      "        plainAccessConfig.setDefaultTopicPerm(\"SUB\");\n",
      "        List<String> topicPerms = new ArrayList<String>();\n",
      "        topicPerms.add(\"topicC=PUB|SUB\");\n",
      "        topicPerms.add(\"topicB=PUB\");\n",
      "        plainAccessConfig.setTopicPerms(topicPerms);\n",
      "        List<String> groupPerms = new ArrayList<String>();\n",
      "        groupPerms.add(\"groupB=PUB|SUB\");\n",
      "        groupPerms.add(\"groupC=DENY\");\n",
      "        plainAccessConfig.setGroupPerms(groupPerms);\n",
      "\n",
      "        PlainAccessValidator plainAccessValidator = new PlainAccessValidator();\n",
      "        // Update acl access yaml config file\n",
      "        plainAccessValidator.updateAccessConfig(plainAccessConfig);\n",
      "\n",
      "        Map<String, Object> readableMap = AclUtils.getYamlDataObject(targetFileName, Map.class);\n",
      "        List<Map<String, Object>> accounts =  (List<Map<String, Object>>)readableMap.get(\"accounts\");\n",
      "        Map<String, Object> verifyMap = null;\n",
      "        for (Map<String, Object> account : accounts) {\n",
      "            if (account.get(\"accessKey\").equals(plainAccessConfig.getAccessKey())) {\n",
      "                verifyMap = account;\n",
      "                break;\n",
      "            }\n",
      "        }\n",
      "\n",
      "        Assert.assertEquals(verifyMap.get(AclConstants.CONFIG_SECRET_KEY),\"1234567890\");\n",
      "        Assert.assertEquals(verifyMap.get(AclConstants.CONFIG_DEFAULT_TOPIC_PERM),\"SUB\");\n",
      "        Assert.assertEquals(verifyMap.get(AclConstants.CONFIG_DEFAULT_GROUP_PERM),\"PUB\");\n",
      "        Assert.assertEquals(verifyMap.get(AclConstants.CONFIG_ADMIN_ROLE),false);\n",
      "        Assert.assertEquals(verifyMap.get(AclConstants.CONFIG_WHITE_ADDR),\"192.168.0.*\");\n",
      "        Assert.assertEquals(((List)verifyMap.get(AclConstants.CONFIG_TOPIC_PERMS)).size(),2);\n",
      "        Assert.assertEquals(((List)verifyMap.get(AclConstants.CONFIG_GROUP_PERMS)).size(),2);\n",
      "\n",
      "        // Verify the dateversion element is correct or not\n",
      "        List<Map<String, Object>> dataVersions = (List<Map<String, Object>>) readableMap.get(\"dataVersion\");\n",
      "        Assert.assertEquals(1,dataVersions.get(0).get(\"counter\"));\n",
      "\n",
      "        // Restore the backup file and flush to yaml file\n",
      "        AclUtils.writeDataObject(targetFileName, backUpAclConfigMap);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void updateAccessAclYamlConfigTest() {\n",
      "        System.setProperty(\"rocketmq.home.dir\", \"src/test/resources\");\n",
      "        System.setProperty(\"rocketmq.acl.plain.file\", \"/conf/plain_acl_update_create.yml\");\n",
      "\n",
      "        String targetFileName = \"src/test/resources/conf/plain_acl_update_create.yml\";\n",
      "        Map<String, Object> backUpAclConfigMap = AclUtils.getYamlDataObject(targetFileName, Map.class);\n",
      "\n",
      "        PlainAccessConfig plainAccessConfig = new PlainAccessConfig();\n",
      "        plainAccessConfig.setAccessKey(\"RocketMQ\");\n",
      "        plainAccessConfig.setSecretKey(\"123456789111\");\n",
      "\n",
      "        PlainAccessValidator plainAccessValidator = new PlainAccessValidator();\n",
      "        // Update element in the acl access yaml config file\n",
      "        plainAccessValidator.updateAccessConfig(plainAccessConfig);\n",
      "\n",
      "        Map<String, Object> readableMap = AclUtils.getYamlDataObject(targetFileName, Map.class);\n",
      "        List<Map<String, Object>> accounts =  (List<Map<String, Object>>)readableMap.get(AclConstants.CONFIG_ACCOUNTS);\n",
      "        Map<String, Object> verifyMap = null;\n",
      "        for (Map<String, Object> account : accounts) {\n",
      "            if (account.get(AclConstants.CONFIG_ACCESS_KEY).equals(plainAccessConfig.getAccessKey())) {\n",
      "                verifyMap = account;\n",
      "                break;\n",
      "            }\n",
      "        }\n",
      "        Assert.assertEquals(verifyMap.get(AclConstants.CONFIG_SECRET_KEY),\"123456789111\");\n",
      "\n",
      "        // Restore the backup file and flush to yaml file\n",
      "        AclUtils.writeDataObject(targetFileName, backUpAclConfigMap);\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    public void createAndUpdateAccessAclYamlConfigNormalTest() {\n",
      "        System.setProperty(\"rocketmq.home.dir\", \"src/test/resources\");\n",
      "        System.setProperty(\"rocketmq.acl.plain.file\", \"/conf/plain_acl_update_create.yml\");\n",
      "\n",
      "        String targetFileName = \"src/test/resources/conf/plain_acl_update_create.yml\";\n",
      "        Map<String, Object> backUpAclConfigMap = AclUtils.getYamlDataObject(targetFileName, Map.class);\n",
      "\n",
      "        PlainAccessConfig plainAccessConfig = new PlainAccessConfig();\n",
      "        plainAccessConfig.setAccessKey(\"RocketMQ33\");\n",
      "        plainAccessConfig.setSecretKey(\"123456789111\");\n",
      "        plainAccessConfig.setDefaultGroupPerm(\"PUB\");\n",
      "        plainAccessConfig.setDefaultTopicPerm(\"DENY\");\n",
      "        List<String> topicPerms = new ArrayList<String>();\n",
      "        topicPerms.add(\"topicC=PUB|SUB\");\n",
      "        topicPerms.add(\"topicB=PUB\");\n",
      "        plainAccessConfig.setTopicPerms(topicPerms);\n",
      "        List<String> groupPerms = new ArrayList<String>();\n",
      "        groupPerms.add(\"groupB=PUB|SUB\");\n",
      "        groupPerms.add(\"groupC=DENY\");\n",
      "        plainAccessConfig.setGroupPerms(groupPerms);\n",
      "\n",
      "        PlainAccessValidator plainAccessValidator = new PlainAccessValidator();\n",
      "        // Create element in the acl access yaml config file\n",
      "        plainAccessValidator.updateAccessConfig(plainAccessConfig);\n",
      "\n",
      "        Map<String, Object> readableMap = AclUtils.getYamlDataObject(targetFileName, Map.class);\n",
      "        List<Map<String, Object>> accounts =  (List<Map<String, Object>>)readableMap.get(AclConstants.CONFIG_ACCOUNTS);\n",
      "        Map<String, Object> verifyMap = null;\n",
      "        for (Map<String, Object> account : accounts) {\n",
      "            if (account.get(AclConstants.CONFIG_ACCESS_KEY).equals(plainAccessConfig.getAccessKey())) {\n",
      "                verifyMap = account;\n",
      "                break;\n",
      "            }\n",
      "        }\n",
      "        Assert.assertEquals(verifyMap.get(AclConstants.CONFIG_SECRET_KEY),\"123456789111\");\n",
      "        Assert.assertEquals(verifyMap.get(AclConstants.CONFIG_DEFAULT_TOPIC_PERM),\"DENY\");\n",
      "        Assert.assertEquals(verifyMap.get(AclConstants.CONFIG_DEFAULT_GROUP_PERM),\"PUB\");\n",
      "        Assert.assertEquals(((List)verifyMap.get(AclConstants.CONFIG_TOPIC_PERMS)).size(),2);\n",
      "        Assert.assertEquals(((List)verifyMap.get(AclConstants.CONFIG_GROUP_PERMS)).size(),2);\n",
      "        Assert.assertTrue(((List)verifyMap.get(AclConstants.CONFIG_TOPIC_PERMS)).contains(\"topicC=PUB|SUB\"));\n",
      "        Assert.assertTrue(((List)verifyMap.get(AclConstants.CONFIG_TOPIC_PERMS)).contains(\"topicB=PUB\"));\n",
      "        Assert.assertTrue(((List)verifyMap.get(AclConstants.CONFIG_GROUP_PERMS)).contains(\"groupB=PUB|SUB\"));\n",
      "        Assert.assertTrue(((List)verifyMap.get(AclConstants.CONFIG_GROUP_PERMS)).contains(\"groupC=DENY\"));\n",
      "\n",
      "        // Verify the dateversion element is correct or not\n",
      "        List<Map<String, Object>> dataVersions = (List<Map<String, Object>>) readableMap.get(AclConstants.CONFIG_DATA_VERSION);\n",
      "        Assert.assertEquals(1,dataVersions.get(0).get(AclConstants.CONFIG_COUNTER));\n",
      "\n",
      "        // Update element in the acl config yaml file\n",
      "        PlainAccessConfig plainAccessConfig2 = new PlainAccessConfig();\n",
      "        plainAccessConfig2.setAccessKey(\"rocketmq2\");\n",
      "        plainAccessConfig2.setSecretKey(\"1234567890123\");\n",
      "\n",
      "        // Update acl access yaml config file secondly\n",
      "        plainAccessValidator.updateAccessConfig(plainAccessConfig2);\n",
      "\n",
      "        Map<String, Object> readableMap2 = AclUtils.getYamlDataObject(targetFileName, Map.class);\n",
      "        List<Map<String, Object>> accounts2 =  (List<Map<String, Object>>)readableMap2.get(AclConstants.CONFIG_ACCOUNTS);\n",
      "        Map<String, Object> verifyMap2 = null;\n",
      "        for (Map<String, Object> account : accounts2) {\n",
      "            if (account.get(AclConstants.CONFIG_ACCESS_KEY).equals(plainAccessConfig2.getAccessKey())) {\n",
      "                verifyMap2 = account;\n",
      "                break;\n",
      "            }\n",
      "        }\n",
      "\n",
      "        // Verify the dateversion element after updating is correct or not\n",
      "        List<Map<String, Object>> dataVersions2 = (List<Map<String, Object>>) readableMap2.get(AclConstants.CONFIG_DATA_VERSION);\n",
      "        Assert.assertEquals(2,dataVersions2.get(0).get(AclConstants.CONFIG_COUNTER));\n",
      "        Assert.assertEquals(verifyMap2.get(AclConstants.CONFIG_SECRET_KEY),\"1234567890123\");\n",
      "\n",
      "\n",
      "        // Restore the backup file and flush to yaml file\n",
      "        AclUtils.writeDataObject(targetFileName, backUpAclConfigMap);\n",
      "    }\n",
      "\n",
      "    @Test(expected = AclException.class)\n",
      "    public void updateAccessAclYamlConfigExceptionTest() {\n",
      "        System.setProperty(\"rocketmq.home.dir\", \"src/test/resources\");\n",
      "        System.setProperty(\"rocketmq.acl.plain.file\", \"/conf/plain_acl_update_create.yml\");\n",
      "\n",
      "        PlainAccessConfig plainAccessConfig = new PlainAccessConfig();\n",
      "        plainAccessConfig.setAccessKey(\"RocketMQ\");\n",
      "        plainAccessConfig.setSecretKey(\"12345\");\n",
      "\n",
      "        PlainAccessValidator plainAccessValidator = new PlainAccessValidator();\n",
      "        // Update acl access yaml config file\n",
      "        plainAccessValidator.updateAccessConfig(plainAccessConfig);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void deleteAccessAclYamlConfigNormalTest() {\n",
      "        System.setProperty(\"rocketmq.home.dir\", \"src/test/resources\");\n",
      "        System.setProperty(\"rocketmq.acl.plain.file\", \"/conf/plain_acl_delete.yml\");\n",
      "\n",
      "        String targetFileName = \"src/test/resources/conf/plain_acl_delete.yml\";\n",
      "        Map<String, Object> backUpAclConfigMap = AclUtils.getYamlDataObject(targetFileName, Map.class);\n",
      "\n",
      "\n",
      "        String accessKey = \"rocketmq2\";\n",
      "        PlainAccessValidator plainAccessValidator = new PlainAccessValidator();\n",
      "        plainAccessValidator.deleteAccessConfig(accessKey);\n",
      "\n",
      "        Map<String, Object> readableMap = AclUtils.getYamlDataObject(targetFileName, Map.class);\n",
      "        List<Map<String, Object>> accounts =  (List<Map<String, Object>>)readableMap.get(AclConstants.CONFIG_ACCOUNTS);\n",
      "        Map<String, Object> verifyMap = null;\n",
      "        for (Map<String, Object> account : accounts) {\n",
      "            if (account.get(AclConstants.CONFIG_ACCESS_KEY).equals(accessKey)) {\n",
      "                verifyMap = account;\n",
      "                break;\n",
      "            }\n",
      "        }\n",
      "\n",
      "        // Verify the specified element is removed or not\n",
      "        Assert.assertEquals(verifyMap,null);\n",
      "        // Verify the dateversion element is correct or not\n",
      "        List<Map<String, Object>> dataVersions = (List<Map<String, Object>>) readableMap.get(AclConstants.CONFIG_DATA_VERSION);\n",
      "        Assert.assertEquals(1,dataVersions.get(0).get(AclConstants.CONFIG_COUNTER));\n",
      "        \n",
      "        // Restore the backup file and flush to yaml file\n",
      "        AclUtils.writeDataObject(targetFileName, backUpAclConfigMap);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void updateAccessAclYamlConfigWithNoAccoutsExceptionTest() {\n",
      "        System.setProperty(\"rocketmq.home.dir\", \"src/test/resources\");\n",
      "        System.setProperty(\"rocketmq.acl.plain.file\", \"/conf/plain_acl_with_no_accouts.yml\");\n",
      "\n",
      "        String targetFileName = \"src/test/resources/conf/plain_acl_with_no_accouts.yml\";\n",
      "        Map<String, Object> backUpAclConfigMap = AclUtils.getYamlDataObject(targetFileName, Map.class);\n",
      "\n",
      "        PlainAccessConfig plainAccessConfig = new PlainAccessConfig();\n",
      "        plainAccessConfig.setAccessKey(\"RocketMQ\");\n",
      "        plainAccessConfig.setSecretKey(\"1234567890\");\n",
      "\n",
      "        PlainAccessValidator plainAccessValidator = new PlainAccessValidator();\n",
      "        // Update acl access yaml config file and verify the return value is true\n",
      "        Assert.assertEquals(plainAccessValidator.updateAccessConfig(plainAccessConfig), false);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void updateGlobalWhiteAddrsNormalTest() {\n",
      "        System.setProperty(\"rocketmq.home.dir\", \"src/test/resources\");\n",
      "        System.setProperty(\"rocketmq.acl.plain.file\", \"/conf/plain_acl_global_white_addrs.yml\");\n",
      "\n",
      "        String targetFileName = \"src/test/resources/conf/plain_acl_global_white_addrs.yml\";\n",
      "        Map<String, Object> backUpAclConfigMap = AclUtils.getYamlDataObject(targetFileName, Map.class);\n",
      "\n",
      "        PlainAccessValidator plainAccessValidator = new PlainAccessValidator();\n",
      "        // Update global white remote addr value list in the acl access yaml config file\n",
      "\n",
      "        List<String> globalWhiteAddrsList = new ArrayList<String>();\n",
      "        globalWhiteAddrsList.add(\"10.10.154.1\");\n",
      "        globalWhiteAddrsList.add(\"10.10.154.2\");\n",
      "        globalWhiteAddrsList.add(\"10.10.154.3\");\n",
      "        plainAccessValidator.updateGlobalWhiteAddrsConfig(globalWhiteAddrsList);\n",
      "\n",
      "        Map<String, Object> readableMap = AclUtils.getYamlDataObject(targetFileName, Map.class);\n",
      "\n",
      "        List<String> globalWhiteAddrList =  (List<String>)readableMap.get(AclConstants.CONFIG_GLOBAL_WHITE_ADDRS);\n",
      "        Assert.assertTrue(globalWhiteAddrList.contains(\"10.10.154.1\"));\n",
      "        Assert.assertTrue(globalWhiteAddrList.contains(\"10.10.154.2\"));\n",
      "        Assert.assertTrue(globalWhiteAddrList.contains(\"10.10.154.3\"));\n",
      "\n",
      "        // Verify the dateversion element is correct or not\n",
      "        List<Map<String, Object>> dataVersions = (List<Map<String, Object>>) readableMap.get(AclConstants.CONFIG_DATA_VERSION);\n",
      "        Assert.assertEquals(1,dataVersions.get(0).get(AclConstants.CONFIG_COUNTER));\n",
      "\n",
      "        // Restore the backup file and flush to yaml file\n",
      "        AclUtils.writeDataObject(targetFileName, backUpAclConfigMap);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void getAllAclConfigTest(){\n",
      "        PlainAccessValidator plainAccessValidator = new PlainAccessValidator();\n",
      "        AclConfig aclConfig = plainAccessValidator.getAllAclConfig();\n",
      "        Assert.assertEquals(aclConfig.getGlobalWhiteAddrs().size(), 2);\n",
      "        Assert.assertEquals(aclConfig.getPlainAccessConfigs().size(), 2);\n",
      "    }\n",
      "\n",
      "}\n"
    ],
    "method_lines_dic": {
      "PlainAccessValidator::::validate(org.apache.rocketmq.acl.AccessResource)": [
        138,
        141
      ],
      "PlainAccessValidator::::deleteAccessConfig(java.lang.String)": [
        148,
        151
      ],
      "PlainAccessValidator::::getAclConfigVersion()": [
        153,
        155
      ],
      "PlainAccessValidator::::updateGlobalWhiteAddrsConfig(java.util.List<java.lang.String>)": [
        157,
        159
      ],
      "PlainAccessValidator::::getAllAclConfig()": [
        161,
        163
      ]
    },
    "test_method_lines_dic": {
      "PlainAccessValidatorTest::::init()": [
        51,
        61
      ],
      "PlainAccessValidatorTest::::contentTest()": [
        63,
        79
      ],
      "PlainAccessValidatorTest::::validateTest()": [
        81,
        95
      ],
      "PlainAccessValidatorTest::::validateSendMessageTest()": [
        97,
        110
      ],
      "PlainAccessValidatorTest::::validateSendMessageV2Test()": [
        112,
        125
      ],
      "PlainAccessValidatorTest::::validateForAdminCommandWithOutAclRPCHook()": [
        127,
        141
      ],
      "PlainAccessValidatorTest::::validatePullMessageTest()": [
        143,
        156
      ],
      "PlainAccessValidatorTest::::validateConsumeMessageBackTest()": [
        158,
        171
      ],
      "PlainAccessValidatorTest::::validateQueryMessageTest()": [
        173,
        185
      ],
      "PlainAccessValidatorTest::::validateQueryMessageByKeyTest()": [
        187,
        200
      ],
      "PlainAccessValidatorTest::::validateHeartBeatTest()": [
        202,
        229
      ],
      "PlainAccessValidatorTest::::validateUnRegisterClientTest()": [
        231,
        243
      ],
      "PlainAccessValidatorTest::::validateGetConsumerListByGroupTest()": [
        245,
        257
      ],
      "PlainAccessValidatorTest::::validateUpdateConsumerOffSetTest()": [
        259,
        271
      ],
      "PlainAccessValidatorTest::::validateNullAccessKeyTest()": [
        273,
        290
      ],
      "PlainAccessValidatorTest::::validateErrorSecretKeyTest()": [
        292,
        309
      ],
      "PlainAccessValidatorTest::::validateGetAllTopicConfigTest()": [
        311,
        322
      ],
      "PlainAccessValidatorTest::::updateAccessAclYamlConfigNormalTest()": [
        324,
        374
      ],
      "PlainAccessValidatorTest::::updateAccessAclYamlConfigTest()": [
        376,
        405
      ],
      "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()": [
        408,
        483
      ],
      "PlainAccessValidatorTest::::updateAccessAclYamlConfigExceptionTest()": [
        485,
        497
      ],
      "PlainAccessValidatorTest::::deleteAccessAclYamlConfigNormalTest()": [
        499,
        530
      ],
      "PlainAccessValidatorTest::::updateAccessAclYamlConfigWithNoAccoutsExceptionTest()": [
        532,
        547
      ],
      "PlainAccessValidatorTest::::updateGlobalWhiteAddrsNormalTest()": [
        549,
        579
      ],
      "PlainAccessValidatorTest::::getAllAclConfigTest()": [
        581,
        587
      ]
    },
    "reverse_method_lines_dic": {
      "138": "PlainAccessValidator::::validate(org.apache.rocketmq.acl.AccessResource)",
      "139": "PlainAccessValidator::::validate(org.apache.rocketmq.acl.AccessResource)",
      "140": "PlainAccessValidator::::validate(org.apache.rocketmq.acl.AccessResource)",
      "141": "PlainAccessValidator::::validate(org.apache.rocketmq.acl.AccessResource)",
      "148": "PlainAccessValidator::::deleteAccessConfig(java.lang.String)",
      "149": "PlainAccessValidator::::deleteAccessConfig(java.lang.String)",
      "150": "PlainAccessValidator::::deleteAccessConfig(java.lang.String)",
      "151": "PlainAccessValidator::::deleteAccessConfig(java.lang.String)",
      "153": "PlainAccessValidator::::getAclConfigVersion()",
      "154": "PlainAccessValidator::::getAclConfigVersion()",
      "155": "PlainAccessValidator::::getAclConfigVersion()",
      "157": "PlainAccessValidator::::updateGlobalWhiteAddrsConfig(java.util.List<java.lang.String>)",
      "158": "PlainAccessValidator::::updateGlobalWhiteAddrsConfig(java.util.List<java.lang.String>)",
      "159": "PlainAccessValidator::::updateGlobalWhiteAddrsConfig(java.util.List<java.lang.String>)",
      "161": "PlainAccessValidator::::getAllAclConfig()",
      "162": "PlainAccessValidator::::getAllAclConfig()",
      "163": "PlainAccessValidator::::getAllAclConfig()"
    },
    "test_reverse_method_lines_dic": {
      "51": "PlainAccessValidatorTest::::init()",
      "52": "PlainAccessValidatorTest::::init()",
      "53": "PlainAccessValidatorTest::::init()",
      "54": "PlainAccessValidatorTest::::init()",
      "55": "PlainAccessValidatorTest::::init()",
      "56": "PlainAccessValidatorTest::::init()",
      "57": "PlainAccessValidatorTest::::init()",
      "58": "PlainAccessValidatorTest::::init()",
      "59": "PlainAccessValidatorTest::::init()",
      "60": "PlainAccessValidatorTest::::init()",
      "61": "PlainAccessValidatorTest::::init()",
      "63": "PlainAccessValidatorTest::::contentTest()",
      "64": "PlainAccessValidatorTest::::contentTest()",
      "65": "PlainAccessValidatorTest::::contentTest()",
      "66": "PlainAccessValidatorTest::::contentTest()",
      "67": "PlainAccessValidatorTest::::contentTest()",
      "68": "PlainAccessValidatorTest::::contentTest()",
      "69": "PlainAccessValidatorTest::::contentTest()",
      "70": "PlainAccessValidatorTest::::contentTest()",
      "71": "PlainAccessValidatorTest::::contentTest()",
      "72": "PlainAccessValidatorTest::::contentTest()",
      "73": "PlainAccessValidatorTest::::contentTest()",
      "74": "PlainAccessValidatorTest::::contentTest()",
      "75": "PlainAccessValidatorTest::::contentTest()",
      "76": "PlainAccessValidatorTest::::contentTest()",
      "77": "PlainAccessValidatorTest::::contentTest()",
      "78": "PlainAccessValidatorTest::::contentTest()",
      "79": "PlainAccessValidatorTest::::contentTest()",
      "81": "PlainAccessValidatorTest::::validateTest()",
      "82": "PlainAccessValidatorTest::::validateTest()",
      "83": "PlainAccessValidatorTest::::validateTest()",
      "84": "PlainAccessValidatorTest::::validateTest()",
      "85": "PlainAccessValidatorTest::::validateTest()",
      "86": "PlainAccessValidatorTest::::validateTest()",
      "87": "PlainAccessValidatorTest::::validateTest()",
      "88": "PlainAccessValidatorTest::::validateTest()",
      "89": "PlainAccessValidatorTest::::validateTest()",
      "90": "PlainAccessValidatorTest::::validateTest()",
      "91": "PlainAccessValidatorTest::::validateTest()",
      "92": "PlainAccessValidatorTest::::validateTest()",
      "93": "PlainAccessValidatorTest::::validateTest()",
      "94": "PlainAccessValidatorTest::::validateTest()",
      "95": "PlainAccessValidatorTest::::validateTest()",
      "97": "PlainAccessValidatorTest::::validateSendMessageTest()",
      "98": "PlainAccessValidatorTest::::validateSendMessageTest()",
      "99": "PlainAccessValidatorTest::::validateSendMessageTest()",
      "100": "PlainAccessValidatorTest::::validateSendMessageTest()",
      "101": "PlainAccessValidatorTest::::validateSendMessageTest()",
      "102": "PlainAccessValidatorTest::::validateSendMessageTest()",
      "103": "PlainAccessValidatorTest::::validateSendMessageTest()",
      "104": "PlainAccessValidatorTest::::validateSendMessageTest()",
      "105": "PlainAccessValidatorTest::::validateSendMessageTest()",
      "106": "PlainAccessValidatorTest::::validateSendMessageTest()",
      "107": "PlainAccessValidatorTest::::validateSendMessageTest()",
      "108": "PlainAccessValidatorTest::::validateSendMessageTest()",
      "109": "PlainAccessValidatorTest::::validateSendMessageTest()",
      "110": "PlainAccessValidatorTest::::validateSendMessageTest()",
      "112": "PlainAccessValidatorTest::::validateSendMessageV2Test()",
      "113": "PlainAccessValidatorTest::::validateSendMessageV2Test()",
      "114": "PlainAccessValidatorTest::::validateSendMessageV2Test()",
      "115": "PlainAccessValidatorTest::::validateSendMessageV2Test()",
      "116": "PlainAccessValidatorTest::::validateSendMessageV2Test()",
      "117": "PlainAccessValidatorTest::::validateSendMessageV2Test()",
      "118": "PlainAccessValidatorTest::::validateSendMessageV2Test()",
      "119": "PlainAccessValidatorTest::::validateSendMessageV2Test()",
      "120": "PlainAccessValidatorTest::::validateSendMessageV2Test()",
      "121": "PlainAccessValidatorTest::::validateSendMessageV2Test()",
      "122": "PlainAccessValidatorTest::::validateSendMessageV2Test()",
      "123": "PlainAccessValidatorTest::::validateSendMessageV2Test()",
      "124": "PlainAccessValidatorTest::::validateSendMessageV2Test()",
      "125": "PlainAccessValidatorTest::::validateSendMessageV2Test()",
      "127": "PlainAccessValidatorTest::::validateForAdminCommandWithOutAclRPCHook()",
      "128": "PlainAccessValidatorTest::::validateForAdminCommandWithOutAclRPCHook()",
      "129": "PlainAccessValidatorTest::::validateForAdminCommandWithOutAclRPCHook()",
      "130": "PlainAccessValidatorTest::::validateForAdminCommandWithOutAclRPCHook()",
      "131": "PlainAccessValidatorTest::::validateForAdminCommandWithOutAclRPCHook()",
      "132": "PlainAccessValidatorTest::::validateForAdminCommandWithOutAclRPCHook()",
      "133": "PlainAccessValidatorTest::::validateForAdminCommandWithOutAclRPCHook()",
      "134": "PlainAccessValidatorTest::::validateForAdminCommandWithOutAclRPCHook()",
      "135": "PlainAccessValidatorTest::::validateForAdminCommandWithOutAclRPCHook()",
      "136": "PlainAccessValidatorTest::::validateForAdminCommandWithOutAclRPCHook()",
      "137": "PlainAccessValidatorTest::::validateForAdminCommandWithOutAclRPCHook()",
      "138": "PlainAccessValidatorTest::::validateForAdminCommandWithOutAclRPCHook()",
      "139": "PlainAccessValidatorTest::::validateForAdminCommandWithOutAclRPCHook()",
      "140": "PlainAccessValidatorTest::::validateForAdminCommandWithOutAclRPCHook()",
      "141": "PlainAccessValidatorTest::::validateForAdminCommandWithOutAclRPCHook()",
      "143": "PlainAccessValidatorTest::::validatePullMessageTest()",
      "144": "PlainAccessValidatorTest::::validatePullMessageTest()",
      "145": "PlainAccessValidatorTest::::validatePullMessageTest()",
      "146": "PlainAccessValidatorTest::::validatePullMessageTest()",
      "147": "PlainAccessValidatorTest::::validatePullMessageTest()",
      "148": "PlainAccessValidatorTest::::validatePullMessageTest()",
      "149": "PlainAccessValidatorTest::::validatePullMessageTest()",
      "150": "PlainAccessValidatorTest::::validatePullMessageTest()",
      "151": "PlainAccessValidatorTest::::validatePullMessageTest()",
      "152": "PlainAccessValidatorTest::::validatePullMessageTest()",
      "153": "PlainAccessValidatorTest::::validatePullMessageTest()",
      "154": "PlainAccessValidatorTest::::validatePullMessageTest()",
      "155": "PlainAccessValidatorTest::::validatePullMessageTest()",
      "156": "PlainAccessValidatorTest::::validatePullMessageTest()",
      "158": "PlainAccessValidatorTest::::validateConsumeMessageBackTest()",
      "159": "PlainAccessValidatorTest::::validateConsumeMessageBackTest()",
      "160": "PlainAccessValidatorTest::::validateConsumeMessageBackTest()",
      "161": "PlainAccessValidatorTest::::validateConsumeMessageBackTest()",
      "162": "PlainAccessValidatorTest::::validateConsumeMessageBackTest()",
      "163": "PlainAccessValidatorTest::::validateConsumeMessageBackTest()",
      "164": "PlainAccessValidatorTest::::validateConsumeMessageBackTest()",
      "165": "PlainAccessValidatorTest::::validateConsumeMessageBackTest()",
      "166": "PlainAccessValidatorTest::::validateConsumeMessageBackTest()",
      "167": "PlainAccessValidatorTest::::validateConsumeMessageBackTest()",
      "168": "PlainAccessValidatorTest::::validateConsumeMessageBackTest()",
      "169": "PlainAccessValidatorTest::::validateConsumeMessageBackTest()",
      "170": "PlainAccessValidatorTest::::validateConsumeMessageBackTest()",
      "171": "PlainAccessValidatorTest::::validateConsumeMessageBackTest()",
      "173": "PlainAccessValidatorTest::::validateQueryMessageTest()",
      "174": "PlainAccessValidatorTest::::validateQueryMessageTest()",
      "175": "PlainAccessValidatorTest::::validateQueryMessageTest()",
      "176": "PlainAccessValidatorTest::::validateQueryMessageTest()",
      "177": "PlainAccessValidatorTest::::validateQueryMessageTest()",
      "178": "PlainAccessValidatorTest::::validateQueryMessageTest()",
      "179": "PlainAccessValidatorTest::::validateQueryMessageTest()",
      "180": "PlainAccessValidatorTest::::validateQueryMessageTest()",
      "181": "PlainAccessValidatorTest::::validateQueryMessageTest()",
      "182": "PlainAccessValidatorTest::::validateQueryMessageTest()",
      "183": "PlainAccessValidatorTest::::validateQueryMessageTest()",
      "184": "PlainAccessValidatorTest::::validateQueryMessageTest()",
      "185": "PlainAccessValidatorTest::::validateQueryMessageTest()",
      "187": "PlainAccessValidatorTest::::validateQueryMessageByKeyTest()",
      "188": "PlainAccessValidatorTest::::validateQueryMessageByKeyTest()",
      "189": "PlainAccessValidatorTest::::validateQueryMessageByKeyTest()",
      "190": "PlainAccessValidatorTest::::validateQueryMessageByKeyTest()",
      "191": "PlainAccessValidatorTest::::validateQueryMessageByKeyTest()",
      "192": "PlainAccessValidatorTest::::validateQueryMessageByKeyTest()",
      "193": "PlainAccessValidatorTest::::validateQueryMessageByKeyTest()",
      "194": "PlainAccessValidatorTest::::validateQueryMessageByKeyTest()",
      "195": "PlainAccessValidatorTest::::validateQueryMessageByKeyTest()",
      "196": "PlainAccessValidatorTest::::validateQueryMessageByKeyTest()",
      "197": "PlainAccessValidatorTest::::validateQueryMessageByKeyTest()",
      "198": "PlainAccessValidatorTest::::validateQueryMessageByKeyTest()",
      "199": "PlainAccessValidatorTest::::validateQueryMessageByKeyTest()",
      "200": "PlainAccessValidatorTest::::validateQueryMessageByKeyTest()",
      "202": "PlainAccessValidatorTest::::validateHeartBeatTest()",
      "203": "PlainAccessValidatorTest::::validateHeartBeatTest()",
      "204": "PlainAccessValidatorTest::::validateHeartBeatTest()",
      "205": "PlainAccessValidatorTest::::validateHeartBeatTest()",
      "206": "PlainAccessValidatorTest::::validateHeartBeatTest()",
      "207": "PlainAccessValidatorTest::::validateHeartBeatTest()",
      "208": "PlainAccessValidatorTest::::validateHeartBeatTest()",
      "209": "PlainAccessValidatorTest::::validateHeartBeatTest()",
      "210": "PlainAccessValidatorTest::::validateHeartBeatTest()",
      "211": "PlainAccessValidatorTest::::validateHeartBeatTest()",
      "212": "PlainAccessValidatorTest::::validateHeartBeatTest()",
      "213": "PlainAccessValidatorTest::::validateHeartBeatTest()",
      "214": "PlainAccessValidatorTest::::validateHeartBeatTest()",
      "215": "PlainAccessValidatorTest::::validateHeartBeatTest()",
      "216": "PlainAccessValidatorTest::::validateHeartBeatTest()",
      "217": "PlainAccessValidatorTest::::validateHeartBeatTest()",
      "218": "PlainAccessValidatorTest::::validateHeartBeatTest()",
      "219": "PlainAccessValidatorTest::::validateHeartBeatTest()",
      "220": "PlainAccessValidatorTest::::validateHeartBeatTest()",
      "221": "PlainAccessValidatorTest::::validateHeartBeatTest()",
      "222": "PlainAccessValidatorTest::::validateHeartBeatTest()",
      "223": "PlainAccessValidatorTest::::validateHeartBeatTest()",
      "224": "PlainAccessValidatorTest::::validateHeartBeatTest()",
      "225": "PlainAccessValidatorTest::::validateHeartBeatTest()",
      "226": "PlainAccessValidatorTest::::validateHeartBeatTest()",
      "227": "PlainAccessValidatorTest::::validateHeartBeatTest()",
      "228": "PlainAccessValidatorTest::::validateHeartBeatTest()",
      "229": "PlainAccessValidatorTest::::validateHeartBeatTest()",
      "231": "PlainAccessValidatorTest::::validateUnRegisterClientTest()",
      "232": "PlainAccessValidatorTest::::validateUnRegisterClientTest()",
      "233": "PlainAccessValidatorTest::::validateUnRegisterClientTest()",
      "234": "PlainAccessValidatorTest::::validateUnRegisterClientTest()",
      "235": "PlainAccessValidatorTest::::validateUnRegisterClientTest()",
      "236": "PlainAccessValidatorTest::::validateUnRegisterClientTest()",
      "237": "PlainAccessValidatorTest::::validateUnRegisterClientTest()",
      "238": "PlainAccessValidatorTest::::validateUnRegisterClientTest()",
      "239": "PlainAccessValidatorTest::::validateUnRegisterClientTest()",
      "240": "PlainAccessValidatorTest::::validateUnRegisterClientTest()",
      "241": "PlainAccessValidatorTest::::validateUnRegisterClientTest()",
      "242": "PlainAccessValidatorTest::::validateUnRegisterClientTest()",
      "243": "PlainAccessValidatorTest::::validateUnRegisterClientTest()",
      "245": "PlainAccessValidatorTest::::validateGetConsumerListByGroupTest()",
      "246": "PlainAccessValidatorTest::::validateGetConsumerListByGroupTest()",
      "247": "PlainAccessValidatorTest::::validateGetConsumerListByGroupTest()",
      "248": "PlainAccessValidatorTest::::validateGetConsumerListByGroupTest()",
      "249": "PlainAccessValidatorTest::::validateGetConsumerListByGroupTest()",
      "250": "PlainAccessValidatorTest::::validateGetConsumerListByGroupTest()",
      "251": "PlainAccessValidatorTest::::validateGetConsumerListByGroupTest()",
      "252": "PlainAccessValidatorTest::::validateGetConsumerListByGroupTest()",
      "253": "PlainAccessValidatorTest::::validateGetConsumerListByGroupTest()",
      "254": "PlainAccessValidatorTest::::validateGetConsumerListByGroupTest()",
      "255": "PlainAccessValidatorTest::::validateGetConsumerListByGroupTest()",
      "256": "PlainAccessValidatorTest::::validateGetConsumerListByGroupTest()",
      "257": "PlainAccessValidatorTest::::validateGetConsumerListByGroupTest()",
      "259": "PlainAccessValidatorTest::::validateUpdateConsumerOffSetTest()",
      "260": "PlainAccessValidatorTest::::validateUpdateConsumerOffSetTest()",
      "261": "PlainAccessValidatorTest::::validateUpdateConsumerOffSetTest()",
      "262": "PlainAccessValidatorTest::::validateUpdateConsumerOffSetTest()",
      "263": "PlainAccessValidatorTest::::validateUpdateConsumerOffSetTest()",
      "264": "PlainAccessValidatorTest::::validateUpdateConsumerOffSetTest()",
      "265": "PlainAccessValidatorTest::::validateUpdateConsumerOffSetTest()",
      "266": "PlainAccessValidatorTest::::validateUpdateConsumerOffSetTest()",
      "267": "PlainAccessValidatorTest::::validateUpdateConsumerOffSetTest()",
      "268": "PlainAccessValidatorTest::::validateUpdateConsumerOffSetTest()",
      "269": "PlainAccessValidatorTest::::validateUpdateConsumerOffSetTest()",
      "270": "PlainAccessValidatorTest::::validateUpdateConsumerOffSetTest()",
      "271": "PlainAccessValidatorTest::::validateUpdateConsumerOffSetTest()",
      "273": "PlainAccessValidatorTest::::validateNullAccessKeyTest()",
      "274": "PlainAccessValidatorTest::::validateNullAccessKeyTest()",
      "275": "PlainAccessValidatorTest::::validateNullAccessKeyTest()",
      "276": "PlainAccessValidatorTest::::validateNullAccessKeyTest()",
      "277": "PlainAccessValidatorTest::::validateNullAccessKeyTest()",
      "278": "PlainAccessValidatorTest::::validateNullAccessKeyTest()",
      "279": "PlainAccessValidatorTest::::validateNullAccessKeyTest()",
      "280": "PlainAccessValidatorTest::::validateNullAccessKeyTest()",
      "281": "PlainAccessValidatorTest::::validateNullAccessKeyTest()",
      "282": "PlainAccessValidatorTest::::validateNullAccessKeyTest()",
      "283": "PlainAccessValidatorTest::::validateNullAccessKeyTest()",
      "284": "PlainAccessValidatorTest::::validateNullAccessKeyTest()",
      "285": "PlainAccessValidatorTest::::validateNullAccessKeyTest()",
      "286": "PlainAccessValidatorTest::::validateNullAccessKeyTest()",
      "287": "PlainAccessValidatorTest::::validateNullAccessKeyTest()",
      "288": "PlainAccessValidatorTest::::validateNullAccessKeyTest()",
      "289": "PlainAccessValidatorTest::::validateNullAccessKeyTest()",
      "290": "PlainAccessValidatorTest::::validateNullAccessKeyTest()",
      "292": "PlainAccessValidatorTest::::validateErrorSecretKeyTest()",
      "293": "PlainAccessValidatorTest::::validateErrorSecretKeyTest()",
      "294": "PlainAccessValidatorTest::::validateErrorSecretKeyTest()",
      "295": "PlainAccessValidatorTest::::validateErrorSecretKeyTest()",
      "296": "PlainAccessValidatorTest::::validateErrorSecretKeyTest()",
      "297": "PlainAccessValidatorTest::::validateErrorSecretKeyTest()",
      "298": "PlainAccessValidatorTest::::validateErrorSecretKeyTest()",
      "299": "PlainAccessValidatorTest::::validateErrorSecretKeyTest()",
      "300": "PlainAccessValidatorTest::::validateErrorSecretKeyTest()",
      "301": "PlainAccessValidatorTest::::validateErrorSecretKeyTest()",
      "302": "PlainAccessValidatorTest::::validateErrorSecretKeyTest()",
      "303": "PlainAccessValidatorTest::::validateErrorSecretKeyTest()",
      "304": "PlainAccessValidatorTest::::validateErrorSecretKeyTest()",
      "305": "PlainAccessValidatorTest::::validateErrorSecretKeyTest()",
      "306": "PlainAccessValidatorTest::::validateErrorSecretKeyTest()",
      "307": "PlainAccessValidatorTest::::validateErrorSecretKeyTest()",
      "308": "PlainAccessValidatorTest::::validateErrorSecretKeyTest()",
      "309": "PlainAccessValidatorTest::::validateErrorSecretKeyTest()",
      "311": "PlainAccessValidatorTest::::validateGetAllTopicConfigTest()",
      "312": "PlainAccessValidatorTest::::validateGetAllTopicConfigTest()",
      "313": "PlainAccessValidatorTest::::validateGetAllTopicConfigTest()",
      "314": "PlainAccessValidatorTest::::validateGetAllTopicConfigTest()",
      "315": "PlainAccessValidatorTest::::validateGetAllTopicConfigTest()",
      "316": "PlainAccessValidatorTest::::validateGetAllTopicConfigTest()",
      "317": "PlainAccessValidatorTest::::validateGetAllTopicConfigTest()",
      "318": "PlainAccessValidatorTest::::validateGetAllTopicConfigTest()",
      "319": "PlainAccessValidatorTest::::validateGetAllTopicConfigTest()",
      "320": "PlainAccessValidatorTest::::validateGetAllTopicConfigTest()",
      "321": "PlainAccessValidatorTest::::validateGetAllTopicConfigTest()",
      "322": "PlainAccessValidatorTest::::validateGetAllTopicConfigTest()",
      "324": "PlainAccessValidatorTest::::updateAccessAclYamlConfigNormalTest()",
      "325": "PlainAccessValidatorTest::::updateAccessAclYamlConfigNormalTest()",
      "326": "PlainAccessValidatorTest::::updateAccessAclYamlConfigNormalTest()",
      "327": "PlainAccessValidatorTest::::updateAccessAclYamlConfigNormalTest()",
      "328": "PlainAccessValidatorTest::::updateAccessAclYamlConfigNormalTest()",
      "329": "PlainAccessValidatorTest::::updateAccessAclYamlConfigNormalTest()",
      "330": "PlainAccessValidatorTest::::updateAccessAclYamlConfigNormalTest()",
      "331": "PlainAccessValidatorTest::::updateAccessAclYamlConfigNormalTest()",
      "332": "PlainAccessValidatorTest::::updateAccessAclYamlConfigNormalTest()",
      "333": "PlainAccessValidatorTest::::updateAccessAclYamlConfigNormalTest()",
      "334": "PlainAccessValidatorTest::::updateAccessAclYamlConfigNormalTest()",
      "335": "PlainAccessValidatorTest::::updateAccessAclYamlConfigNormalTest()",
      "336": "PlainAccessValidatorTest::::updateAccessAclYamlConfigNormalTest()",
      "337": "PlainAccessValidatorTest::::updateAccessAclYamlConfigNormalTest()",
      "338": "PlainAccessValidatorTest::::updateAccessAclYamlConfigNormalTest()",
      "339": "PlainAccessValidatorTest::::updateAccessAclYamlConfigNormalTest()",
      "340": "PlainAccessValidatorTest::::updateAccessAclYamlConfigNormalTest()",
      "341": "PlainAccessValidatorTest::::updateAccessAclYamlConfigNormalTest()",
      "342": "PlainAccessValidatorTest::::updateAccessAclYamlConfigNormalTest()",
      "343": "PlainAccessValidatorTest::::updateAccessAclYamlConfigNormalTest()",
      "344": "PlainAccessValidatorTest::::updateAccessAclYamlConfigNormalTest()",
      "345": "PlainAccessValidatorTest::::updateAccessAclYamlConfigNormalTest()",
      "346": "PlainAccessValidatorTest::::updateAccessAclYamlConfigNormalTest()",
      "347": "PlainAccessValidatorTest::::updateAccessAclYamlConfigNormalTest()",
      "348": "PlainAccessValidatorTest::::updateAccessAclYamlConfigNormalTest()",
      "349": "PlainAccessValidatorTest::::updateAccessAclYamlConfigNormalTest()",
      "350": "PlainAccessValidatorTest::::updateAccessAclYamlConfigNormalTest()",
      "351": "PlainAccessValidatorTest::::updateAccessAclYamlConfigNormalTest()",
      "352": "PlainAccessValidatorTest::::updateAccessAclYamlConfigNormalTest()",
      "353": "PlainAccessValidatorTest::::updateAccessAclYamlConfigNormalTest()",
      "354": "PlainAccessValidatorTest::::updateAccessAclYamlConfigNormalTest()",
      "355": "PlainAccessValidatorTest::::updateAccessAclYamlConfigNormalTest()",
      "356": "PlainAccessValidatorTest::::updateAccessAclYamlConfigNormalTest()",
      "357": "PlainAccessValidatorTest::::updateAccessAclYamlConfigNormalTest()",
      "358": "PlainAccessValidatorTest::::updateAccessAclYamlConfigNormalTest()",
      "359": "PlainAccessValidatorTest::::updateAccessAclYamlConfigNormalTest()",
      "360": "PlainAccessValidatorTest::::updateAccessAclYamlConfigNormalTest()",
      "361": "PlainAccessValidatorTest::::updateAccessAclYamlConfigNormalTest()",
      "362": "PlainAccessValidatorTest::::updateAccessAclYamlConfigNormalTest()",
      "363": "PlainAccessValidatorTest::::updateAccessAclYamlConfigNormalTest()",
      "364": "PlainAccessValidatorTest::::updateAccessAclYamlConfigNormalTest()",
      "365": "PlainAccessValidatorTest::::updateAccessAclYamlConfigNormalTest()",
      "366": "PlainAccessValidatorTest::::updateAccessAclYamlConfigNormalTest()",
      "367": "PlainAccessValidatorTest::::updateAccessAclYamlConfigNormalTest()",
      "368": "PlainAccessValidatorTest::::updateAccessAclYamlConfigNormalTest()",
      "369": "PlainAccessValidatorTest::::updateAccessAclYamlConfigNormalTest()",
      "370": "PlainAccessValidatorTest::::updateAccessAclYamlConfigNormalTest()",
      "371": "PlainAccessValidatorTest::::updateAccessAclYamlConfigNormalTest()",
      "372": "PlainAccessValidatorTest::::updateAccessAclYamlConfigNormalTest()",
      "373": "PlainAccessValidatorTest::::updateAccessAclYamlConfigNormalTest()",
      "374": "PlainAccessValidatorTest::::updateAccessAclYamlConfigNormalTest()",
      "376": "PlainAccessValidatorTest::::updateAccessAclYamlConfigTest()",
      "377": "PlainAccessValidatorTest::::updateAccessAclYamlConfigTest()",
      "378": "PlainAccessValidatorTest::::updateAccessAclYamlConfigTest()",
      "379": "PlainAccessValidatorTest::::updateAccessAclYamlConfigTest()",
      "380": "PlainAccessValidatorTest::::updateAccessAclYamlConfigTest()",
      "381": "PlainAccessValidatorTest::::updateAccessAclYamlConfigTest()",
      "382": "PlainAccessValidatorTest::::updateAccessAclYamlConfigTest()",
      "383": "PlainAccessValidatorTest::::updateAccessAclYamlConfigTest()",
      "384": "PlainAccessValidatorTest::::updateAccessAclYamlConfigTest()",
      "385": "PlainAccessValidatorTest::::updateAccessAclYamlConfigTest()",
      "386": "PlainAccessValidatorTest::::updateAccessAclYamlConfigTest()",
      "387": "PlainAccessValidatorTest::::updateAccessAclYamlConfigTest()",
      "388": "PlainAccessValidatorTest::::updateAccessAclYamlConfigTest()",
      "389": "PlainAccessValidatorTest::::updateAccessAclYamlConfigTest()",
      "390": "PlainAccessValidatorTest::::updateAccessAclYamlConfigTest()",
      "391": "PlainAccessValidatorTest::::updateAccessAclYamlConfigTest()",
      "392": "PlainAccessValidatorTest::::updateAccessAclYamlConfigTest()",
      "393": "PlainAccessValidatorTest::::updateAccessAclYamlConfigTest()",
      "394": "PlainAccessValidatorTest::::updateAccessAclYamlConfigTest()",
      "395": "PlainAccessValidatorTest::::updateAccessAclYamlConfigTest()",
      "396": "PlainAccessValidatorTest::::updateAccessAclYamlConfigTest()",
      "397": "PlainAccessValidatorTest::::updateAccessAclYamlConfigTest()",
      "398": "PlainAccessValidatorTest::::updateAccessAclYamlConfigTest()",
      "399": "PlainAccessValidatorTest::::updateAccessAclYamlConfigTest()",
      "400": "PlainAccessValidatorTest::::updateAccessAclYamlConfigTest()",
      "401": "PlainAccessValidatorTest::::updateAccessAclYamlConfigTest()",
      "402": "PlainAccessValidatorTest::::updateAccessAclYamlConfigTest()",
      "403": "PlainAccessValidatorTest::::updateAccessAclYamlConfigTest()",
      "404": "PlainAccessValidatorTest::::updateAccessAclYamlConfigTest()",
      "405": "PlainAccessValidatorTest::::updateAccessAclYamlConfigTest()",
      "408": "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()",
      "409": "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()",
      "410": "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()",
      "411": "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()",
      "412": "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()",
      "413": "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()",
      "414": "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()",
      "415": "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()",
      "416": "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()",
      "417": "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()",
      "418": "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()",
      "419": "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()",
      "420": "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()",
      "421": "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()",
      "422": "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()",
      "423": "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()",
      "424": "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()",
      "425": "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()",
      "426": "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()",
      "427": "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()",
      "428": "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()",
      "429": "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()",
      "430": "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()",
      "431": "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()",
      "432": "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()",
      "433": "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()",
      "434": "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()",
      "435": "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()",
      "436": "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()",
      "437": "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()",
      "438": "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()",
      "439": "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()",
      "440": "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()",
      "441": "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()",
      "442": "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()",
      "443": "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()",
      "444": "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()",
      "445": "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()",
      "446": "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()",
      "447": "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()",
      "448": "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()",
      "449": "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()",
      "450": "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()",
      "451": "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()",
      "452": "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()",
      "453": "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()",
      "454": "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()",
      "455": "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()",
      "456": "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()",
      "457": "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()",
      "458": "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()",
      "459": "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()",
      "460": "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()",
      "461": "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()",
      "462": "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()",
      "463": "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()",
      "464": "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()",
      "465": "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()",
      "466": "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()",
      "467": "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()",
      "468": "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()",
      "469": "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()",
      "470": "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()",
      "471": "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()",
      "472": "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()",
      "473": "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()",
      "474": "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()",
      "475": "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()",
      "476": "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()",
      "477": "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()",
      "478": "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()",
      "479": "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()",
      "480": "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()",
      "481": "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()",
      "482": "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()",
      "483": "PlainAccessValidatorTest::::createAndUpdateAccessAclYamlConfigNormalTest()",
      "485": "PlainAccessValidatorTest::::updateAccessAclYamlConfigExceptionTest()",
      "486": "PlainAccessValidatorTest::::updateAccessAclYamlConfigExceptionTest()",
      "487": "PlainAccessValidatorTest::::updateAccessAclYamlConfigExceptionTest()",
      "488": "PlainAccessValidatorTest::::updateAccessAclYamlConfigExceptionTest()",
      "489": "PlainAccessValidatorTest::::updateAccessAclYamlConfigExceptionTest()",
      "490": "PlainAccessValidatorTest::::updateAccessAclYamlConfigExceptionTest()",
      "491": "PlainAccessValidatorTest::::updateAccessAclYamlConfigExceptionTest()",
      "492": "PlainAccessValidatorTest::::updateAccessAclYamlConfigExceptionTest()",
      "493": "PlainAccessValidatorTest::::updateAccessAclYamlConfigExceptionTest()",
      "494": "PlainAccessValidatorTest::::updateAccessAclYamlConfigExceptionTest()",
      "495": "PlainAccessValidatorTest::::updateAccessAclYamlConfigExceptionTest()",
      "496": "PlainAccessValidatorTest::::updateAccessAclYamlConfigExceptionTest()",
      "497": "PlainAccessValidatorTest::::updateAccessAclYamlConfigExceptionTest()",
      "499": "PlainAccessValidatorTest::::deleteAccessAclYamlConfigNormalTest()",
      "500": "PlainAccessValidatorTest::::deleteAccessAclYamlConfigNormalTest()",
      "501": "PlainAccessValidatorTest::::deleteAccessAclYamlConfigNormalTest()",
      "502": "PlainAccessValidatorTest::::deleteAccessAclYamlConfigNormalTest()",
      "503": "PlainAccessValidatorTest::::deleteAccessAclYamlConfigNormalTest()",
      "504": "PlainAccessValidatorTest::::deleteAccessAclYamlConfigNormalTest()",
      "505": "PlainAccessValidatorTest::::deleteAccessAclYamlConfigNormalTest()",
      "506": "PlainAccessValidatorTest::::deleteAccessAclYamlConfigNormalTest()",
      "507": "PlainAccessValidatorTest::::deleteAccessAclYamlConfigNormalTest()",
      "508": "PlainAccessValidatorTest::::deleteAccessAclYamlConfigNormalTest()",
      "509": "PlainAccessValidatorTest::::deleteAccessAclYamlConfigNormalTest()",
      "510": "PlainAccessValidatorTest::::deleteAccessAclYamlConfigNormalTest()",
      "511": "PlainAccessValidatorTest::::deleteAccessAclYamlConfigNormalTest()",
      "512": "PlainAccessValidatorTest::::deleteAccessAclYamlConfigNormalTest()",
      "513": "PlainAccessValidatorTest::::deleteAccessAclYamlConfigNormalTest()",
      "514": "PlainAccessValidatorTest::::deleteAccessAclYamlConfigNormalTest()",
      "515": "PlainAccessValidatorTest::::deleteAccessAclYamlConfigNormalTest()",
      "516": "PlainAccessValidatorTest::::deleteAccessAclYamlConfigNormalTest()",
      "517": "PlainAccessValidatorTest::::deleteAccessAclYamlConfigNormalTest()",
      "518": "PlainAccessValidatorTest::::deleteAccessAclYamlConfigNormalTest()",
      "519": "PlainAccessValidatorTest::::deleteAccessAclYamlConfigNormalTest()",
      "520": "PlainAccessValidatorTest::::deleteAccessAclYamlConfigNormalTest()",
      "521": "PlainAccessValidatorTest::::deleteAccessAclYamlConfigNormalTest()",
      "522": "PlainAccessValidatorTest::::deleteAccessAclYamlConfigNormalTest()",
      "523": "PlainAccessValidatorTest::::deleteAccessAclYamlConfigNormalTest()",
      "524": "PlainAccessValidatorTest::::deleteAccessAclYamlConfigNormalTest()",
      "525": "PlainAccessValidatorTest::::deleteAccessAclYamlConfigNormalTest()",
      "526": "PlainAccessValidatorTest::::deleteAccessAclYamlConfigNormalTest()",
      "527": "PlainAccessValidatorTest::::deleteAccessAclYamlConfigNormalTest()",
      "528": "PlainAccessValidatorTest::::deleteAccessAclYamlConfigNormalTest()",
      "529": "PlainAccessValidatorTest::::deleteAccessAclYamlConfigNormalTest()",
      "530": "PlainAccessValidatorTest::::deleteAccessAclYamlConfigNormalTest()",
      "532": "PlainAccessValidatorTest::::updateAccessAclYamlConfigWithNoAccoutsExceptionTest()",
      "533": "PlainAccessValidatorTest::::updateAccessAclYamlConfigWithNoAccoutsExceptionTest()",
      "534": "PlainAccessValidatorTest::::updateAccessAclYamlConfigWithNoAccoutsExceptionTest()",
      "535": "PlainAccessValidatorTest::::updateAccessAclYamlConfigWithNoAccoutsExceptionTest()",
      "536": "PlainAccessValidatorTest::::updateAccessAclYamlConfigWithNoAccoutsExceptionTest()",
      "537": "PlainAccessValidatorTest::::updateAccessAclYamlConfigWithNoAccoutsExceptionTest()",
      "538": "PlainAccessValidatorTest::::updateAccessAclYamlConfigWithNoAccoutsExceptionTest()",
      "539": "PlainAccessValidatorTest::::updateAccessAclYamlConfigWithNoAccoutsExceptionTest()",
      "540": "PlainAccessValidatorTest::::updateAccessAclYamlConfigWithNoAccoutsExceptionTest()",
      "541": "PlainAccessValidatorTest::::updateAccessAclYamlConfigWithNoAccoutsExceptionTest()",
      "542": "PlainAccessValidatorTest::::updateAccessAclYamlConfigWithNoAccoutsExceptionTest()",
      "543": "PlainAccessValidatorTest::::updateAccessAclYamlConfigWithNoAccoutsExceptionTest()",
      "544": "PlainAccessValidatorTest::::updateAccessAclYamlConfigWithNoAccoutsExceptionTest()",
      "545": "PlainAccessValidatorTest::::updateAccessAclYamlConfigWithNoAccoutsExceptionTest()",
      "546": "PlainAccessValidatorTest::::updateAccessAclYamlConfigWithNoAccoutsExceptionTest()",
      "547": "PlainAccessValidatorTest::::updateAccessAclYamlConfigWithNoAccoutsExceptionTest()",
      "549": "PlainAccessValidatorTest::::updateGlobalWhiteAddrsNormalTest()",
      "550": "PlainAccessValidatorTest::::updateGlobalWhiteAddrsNormalTest()",
      "551": "PlainAccessValidatorTest::::updateGlobalWhiteAddrsNormalTest()",
      "552": "PlainAccessValidatorTest::::updateGlobalWhiteAddrsNormalTest()",
      "553": "PlainAccessValidatorTest::::updateGlobalWhiteAddrsNormalTest()",
      "554": "PlainAccessValidatorTest::::updateGlobalWhiteAddrsNormalTest()",
      "555": "PlainAccessValidatorTest::::updateGlobalWhiteAddrsNormalTest()",
      "556": "PlainAccessValidatorTest::::updateGlobalWhiteAddrsNormalTest()",
      "557": "PlainAccessValidatorTest::::updateGlobalWhiteAddrsNormalTest()",
      "558": "PlainAccessValidatorTest::::updateGlobalWhiteAddrsNormalTest()",
      "559": "PlainAccessValidatorTest::::updateGlobalWhiteAddrsNormalTest()",
      "560": "PlainAccessValidatorTest::::updateGlobalWhiteAddrsNormalTest()",
      "561": "PlainAccessValidatorTest::::updateGlobalWhiteAddrsNormalTest()",
      "562": "PlainAccessValidatorTest::::updateGlobalWhiteAddrsNormalTest()",
      "563": "PlainAccessValidatorTest::::updateGlobalWhiteAddrsNormalTest()",
      "564": "PlainAccessValidatorTest::::updateGlobalWhiteAddrsNormalTest()",
      "565": "PlainAccessValidatorTest::::updateGlobalWhiteAddrsNormalTest()",
      "566": "PlainAccessValidatorTest::::updateGlobalWhiteAddrsNormalTest()",
      "567": "PlainAccessValidatorTest::::updateGlobalWhiteAddrsNormalTest()",
      "568": "PlainAccessValidatorTest::::updateGlobalWhiteAddrsNormalTest()",
      "569": "PlainAccessValidatorTest::::updateGlobalWhiteAddrsNormalTest()",
      "570": "PlainAccessValidatorTest::::updateGlobalWhiteAddrsNormalTest()",
      "571": "PlainAccessValidatorTest::::updateGlobalWhiteAddrsNormalTest()",
      "572": "PlainAccessValidatorTest::::updateGlobalWhiteAddrsNormalTest()",
      "573": "PlainAccessValidatorTest::::updateGlobalWhiteAddrsNormalTest()",
      "574": "PlainAccessValidatorTest::::updateGlobalWhiteAddrsNormalTest()",
      "575": "PlainAccessValidatorTest::::updateGlobalWhiteAddrsNormalTest()",
      "576": "PlainAccessValidatorTest::::updateGlobalWhiteAddrsNormalTest()",
      "577": "PlainAccessValidatorTest::::updateGlobalWhiteAddrsNormalTest()",
      "578": "PlainAccessValidatorTest::::updateGlobalWhiteAddrsNormalTest()",
      "579": "PlainAccessValidatorTest::::updateGlobalWhiteAddrsNormalTest()",
      "581": "PlainAccessValidatorTest::::getAllAclConfigTest()",
      "582": "PlainAccessValidatorTest::::getAllAclConfigTest()",
      "583": "PlainAccessValidatorTest::::getAllAclConfigTest()",
      "584": "PlainAccessValidatorTest::::getAllAclConfigTest()",
      "585": "PlainAccessValidatorTest::::getAllAclConfigTest()",
      "586": "PlainAccessValidatorTest::::getAllAclConfigTest()",
      "587": "PlainAccessValidatorTest::::getAllAclConfigTest()"
    },
    "tests": [
      {
        "test_lines": [
          63,
          79
        ],
        "covered_lines": [
          47,
          48,
          49,
          53,
          54,
          57,
          60,
          62,
          67,
          68,
          69,
          72,
          74,
          75,
          124,
          127,
          128,
          129,
          130,
          131,
          133,
          134,
          135
        ]
      },
      {
        "test_lines": [
          81,
          95
        ],
        "covered_lines": [
          47,
          48,
          49,
          53,
          54,
          57,
          60,
          62,
          67,
          68,
          69,
          72,
          74,
          75,
          124,
          127,
          128,
          129,
          130,
          131,
          133,
          134,
          135,
          140,
          141
        ]
      },
      {
        "test_lines": [
          97,
          110
        ],
        "covered_lines": [
          47,
          48,
          49,
          53,
          54,
          57,
          60,
          62,
          67,
          68,
          69,
          72,
          74,
          75,
          124,
          127,
          128,
          129,
          130,
          131,
          133,
          134,
          135,
          140,
          141
        ]
      },
      {
        "test_lines": [
          112,
          125
        ],
        "covered_lines": [
          47,
          48,
          49,
          53,
          54,
          55,
          60,
          62,
          67,
          68,
          69,
          72,
          77,
          78,
          124,
          127,
          128,
          129,
          130,
          131,
          133,
          134,
          135,
          140,
          141
        ]
      },
      {
        "test_lines": [
          127,
          141
        ],
        "covered_lines": [
          47,
          48,
          49,
          53,
          54,
          55,
          60,
          62,
          65
        ]
      },
      {
        "test_lines": [
          143,
          156
        ],
        "covered_lines": [
          47,
          48,
          49,
          53,
          54,
          55,
          60,
          62,
          67,
          68,
          69,
          72,
          84,
          85,
          86,
          124,
          127,
          128,
          129,
          130,
          131,
          133,
          134,
          135,
          140,
          141
        ]
      },
      {
        "test_lines": [
          158,
          171
        ],
        "covered_lines": [
          47,
          48,
          49,
          53,
          54,
          55,
          60,
          62,
          67,
          68,
          69,
          72,
          80,
          81,
          82,
          124,
          127,
          128,
          129,
          130,
          131,
          133,
          134,
          135,
          140,
          141
        ]
      },
      {
        "test_lines": [
          173,
          185
        ],
        "covered_lines": [
          47,
          48,
          49,
          53,
          54,
          55,
          60,
          62,
          67,
          68,
          69,
          72,
          88,
          89,
          124,
          127,
          128,
          129,
          130,
          131,
          133,
          134,
          135,
          140,
          141
        ]
      },
      {
        "test_lines": [
          187,
          200
        ],
        "covered_lines": [
          47,
          48,
          49,
          53,
          54,
          55,
          60,
          62,
          67,
          68,
          69,
          72,
          88,
          89,
          124,
          127,
          128,
          129,
          130,
          131,
          133,
          134,
          135,
          140,
          141
        ]
      },
      {
        "test_lines": [
          202,
          229
        ],
        "covered_lines": [
          47,
          48,
          49,
          53,
          54,
          55,
          60,
          62,
          67,
          68,
          69,
          72,
          91,
          92,
          93,
          94,
          95,
          96,
          97,
          98,
          124,
          127,
          128,
          129,
          130,
          131,
          133,
          134,
          135,
          140,
          141
        ]
      },
      {
        "test_lines": [
          231,
          243
        ],
        "covered_lines": [
          47,
          48,
          49,
          53,
          54,
          55,
          60,
          62,
          67,
          68,
          69,
          72,
          100,
          102,
          103,
          104,
          124,
          127,
          128,
          129,
          130,
          131,
          133,
          134,
          135,
          140,
          141
        ]
      },
      {
        "test_lines": [
          245,
          257
        ],
        "covered_lines": [
          47,
          48,
          49,
          53,
          54,
          55,
          60,
          62,
          67,
          68,
          69,
          72,
          106,
          108,
          109,
          110,
          124,
          127,
          128,
          129,
          130,
          131,
          133,
          134,
          135,
          140,
          141
        ]
      },
      {
        "test_lines": [
          259,
          271
        ],
        "covered_lines": [
          47,
          48,
          49,
          53,
          54,
          55,
          60,
          62,
          67,
          68,
          69,
          72,
          112,
          114,
          115,
          116,
          117,
          124,
          127,
          128,
          129,
          130,
          131,
          133,
          134,
          135,
          140,
          141
        ]
      },
      {
        "test_lines": [
          273,
          290
        ],
        "covered_lines": [
          47,
          48,
          49,
          53,
          54,
          57,
          60,
          62,
          67,
          68,
          69,
          72,
          74,
          75,
          124,
          127,
          128,
          129,
          130,
          131,
          133,
          134,
          135
        ]
      },
      {
        "test_lines": [
          292,
          309
        ],
        "covered_lines": [
          47,
          48,
          49,
          53,
          54,
          57,
          60,
          62,
          67,
          68,
          69,
          72,
          74,
          75,
          124,
          127,
          128,
          129,
          130,
          131,
          133,
          134,
          135
        ]
      },
      {
        "test_lines": [
          311,
          322
        ],
        "covered_lines": [
          47,
          48,
          49,
          53,
          54,
          57,
          60,
          62,
          65,
          140,
          141
        ]
      },
      {
        "test_lines": [
          324,
          374
        ],
        "covered_lines": [
          47,
          48,
          49,
          145
        ]
      },
      {
        "test_lines": [
          376,
          405
        ],
        "covered_lines": [
          47,
          48,
          49,
          145
        ]
      },
      {
        "test_lines": [
          408,
          483
        ],
        "covered_lines": [
          47,
          48,
          49,
          145
        ]
      },
      {
        "test_lines": [
          485,
          497
        ],
        "covered_lines": [
          47,
          48,
          49
        ]
      },
      {
        "test_lines": [
          499,
          530
        ],
        "covered_lines": [
          47,
          48,
          49,
          150
        ]
      },
      {
        "test_lines": [
          532,
          547
        ],
        "covered_lines": [
          47,
          48,
          49,
          145
        ]
      },
      {
        "test_lines": [
          549,
          579
        ],
        "covered_lines": [
          47,
          48,
          49,
          158
        ]
      },
      {
        "test_lines": [
          581,
          587
        ],
        "covered_lines": [
          47,
          48,
          49,
          162
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/RocketMQC/acl/src/main/java/org/apache/rocketmq/acl/plain/PlainPermissionManager.java": {
    "class_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.acl.plain;\n",
      "\n",
      "import com.alibaba.fastjson.JSONArray;\n",
      "import com.alibaba.fastjson.JSONObject;\n",
      "import java.io.File;\n",
      "import java.util.ArrayList;\n",
      "import java.util.HashMap;\n",
      "import java.util.Iterator;\n",
      "import java.util.LinkedHashMap;\n",
      "import java.util.List;\n",
      "import java.util.Map;\n",
      "import org.apache.commons.lang3.StringUtils;\n",
      "import org.apache.rocketmq.acl.common.AclConstants;\n",
      "import org.apache.rocketmq.acl.common.AclException;\n",
      "import org.apache.rocketmq.acl.common.AclUtils;\n",
      "import org.apache.rocketmq.acl.common.Permission;\n",
      "import org.apache.rocketmq.common.AclConfig;\n",
      "import org.apache.rocketmq.common.DataVersion;\n",
      "import org.apache.rocketmq.common.MixAll;\n",
      "import org.apache.rocketmq.common.PlainAccessConfig;\n",
      "import org.apache.rocketmq.common.constant.LoggerName;\n",
      "import org.apache.rocketmq.logging.InternalLogger;\n",
      "import org.apache.rocketmq.logging.InternalLoggerFactory;\n",
      "import org.apache.rocketmq.srvutil.FileWatchService;\n",
      "\n",
      "public class PlainPermissionManager {\n",
      "\n",
      "    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);\n",
      "\n",
      "    private static final String DEFAULT_PLAIN_ACL_FILE = \"/conf/plain_acl.yml\";\n",
      "\n",
      "    private String fileHome = System.getProperty(MixAll.ROCKETMQ_HOME_PROPERTY,\n",
      "        System.getenv(MixAll.ROCKETMQ_HOME_ENV));\n",
      "\n",
      "    private String fileName = System.getProperty(\"rocketmq.acl.plain.file\", DEFAULT_PLAIN_ACL_FILE);\n",
      "\n",
      "    private  Map<String/** AccessKey **/, PlainAccessResource> plainAccessResourceMap = new HashMap<>();\n",
      "\n",
      "    private  List<RemoteAddressStrategy> globalWhiteRemoteAddressStrategy = new ArrayList<>();\n",
      "\n",
      "    private RemoteAddressStrategyFactory remoteAddressStrategyFactory = new RemoteAddressStrategyFactory();\n",
      "\n",
      "    private boolean isWatchStart;\n",
      "\n",
      "    private final DataVersion dataVersion = new DataVersion();\n",
      "\n",
      "    public PlainPermissionManager() {\n",
      "        load();\n",
      "        watch();\n",
      "    }\n",
      "\n",
      "    public void load() {\n",
      "\n",
      "        Map<String, PlainAccessResource> plainAccessResourceMap = new HashMap<>();\n",
      "        List<RemoteAddressStrategy> globalWhiteRemoteAddressStrategy = new ArrayList<>();\n",
      "\n",
      "        JSONObject plainAclConfData = AclUtils.getYamlDataObject(fileHome + File.separator + fileName,\n",
      "            JSONObject.class);\n",
      "        if (plainAclConfData == null || plainAclConfData.isEmpty()) {\n",
      "            throw new AclException(String.format(\"%s file is not data\", fileHome + File.separator + fileName));\n",
      "        }\n",
      "        log.info(\"Broker plain acl conf data is : \", plainAclConfData.toString());\n",
      "        JSONArray globalWhiteRemoteAddressesList = plainAclConfData.getJSONArray(\"globalWhiteRemoteAddresses\");\n",
      "        if (globalWhiteRemoteAddressesList != null && !globalWhiteRemoteAddressesList.isEmpty()) {\n",
      "            for (int i = 0; i < globalWhiteRemoteAddressesList.size(); i++) {\n",
      "                globalWhiteRemoteAddressStrategy.add(remoteAddressStrategyFactory.\n",
      "                        getRemoteAddressStrategy(globalWhiteRemoteAddressesList.getString(i)));\n",
      "            }\n",
      "        }\n",
      "\n",
      "        JSONArray accounts = plainAclConfData.getJSONArray(AclConstants.CONFIG_ACCOUNTS);\n",
      "        if (accounts != null && !accounts.isEmpty()) {\n",
      "            List<PlainAccessConfig> plainAccessConfigList = accounts.toJavaList(PlainAccessConfig.class);\n",
      "            for (PlainAccessConfig plainAccessConfig : plainAccessConfigList) {\n",
      "                PlainAccessResource plainAccessResource = buildPlainAccessResource(plainAccessConfig);\n",
      "                plainAccessResourceMap.put(plainAccessResource.getAccessKey(),plainAccessResource);\n",
      "            }\n",
      "        }\n",
      "\n",
      "        // For loading dataversion part just\n",
      "        JSONArray tempDataVersion = plainAclConfData.getJSONArray(AclConstants.CONFIG_DATA_VERSION);\n",
      "        if (tempDataVersion != null && !tempDataVersion.isEmpty()) {\n",
      "            List<DataVersion> dataVersion = tempDataVersion.toJavaList(DataVersion.class);\n",
      "            DataVersion firstElement = dataVersion.get(0);\n",
      "            this.dataVersion.assignNewOne(firstElement);\n",
      "        }\n",
      "\n",
      "        this.globalWhiteRemoteAddressStrategy = globalWhiteRemoteAddressStrategy;\n",
      "        this.plainAccessResourceMap = plainAccessResourceMap;\n",
      "    }\n",
      "\n",
      "    public String getAclConfigDataVersion() {\n",
      "        return this.dataVersion.toJson();\n",
      "    }\n",
      "\n",
      "    private Map<String, Object> updateAclConfigFileVersion(Map<String, Object> updateAclConfigMap) {\n",
      "\n",
      "        dataVersion.nextVersion();\n",
      "        List<Map<String, Object>> versionElement = new ArrayList<Map<String, Object>>();\n",
      "        Map<String, Object> accountsMap = new LinkedHashMap<String, Object>() {\n",
      "            {\n",
      "                put(AclConstants.CONFIG_COUNTER, dataVersion.getCounter().longValue());\n",
      "                put(AclConstants.CONFIG_TIME_STAMP, dataVersion.getTimestamp());\n",
      "            }\n",
      "        };\n",
      "        versionElement.add(accountsMap);\n",
      "        updateAclConfigMap.put(AclConstants.CONFIG_DATA_VERSION, versionElement);\n",
      "        return updateAclConfigMap;\n",
      "    }\n",
      "\n",
      "    public boolean updateAccessConfig(PlainAccessConfig plainAccessConfig) {\n",
      "\n",
      "        if (plainAccessConfig == null) {\n",
      "            log.error(\"Parameter value plainAccessConfig is null,Please check your parameter\");\n",
      "            return false;\n",
      "        }\n",
      "\n",
      "        Map<String, Object> aclAccessConfigMap = AclUtils.getYamlDataObject(fileHome + File.separator + fileName,\n",
      "            Map.class);\n",
      "\n",
      "        List<Map<String, Object>> accounts = (List<Map<String, Object>>) aclAccessConfigMap.get(AclConstants.CONFIG_ACCOUNTS);\n",
      "        Map<String, Object> updateAccountMap = null;\n",
      "        if (accounts != null) {\n",
      "            for (Map<String, Object> account : accounts) {\n",
      "                if (account.get(AclConstants.CONFIG_ACCESS_KEY).equals(plainAccessConfig.getAccessKey())) {\n",
      "                    // Update acl access config elements\n",
      "                    accounts.remove(account);\n",
      "                    updateAccountMap = createAclAccessConfigMap(account, plainAccessConfig);\n",
      "                    accounts.add(updateAccountMap);\n",
      "                    aclAccessConfigMap.put(AclConstants.CONFIG_ACCOUNTS, accounts);\n",
      "\n",
      "                    if (AclUtils.writeDataObject(fileHome + File.separator + fileName, updateAclConfigFileVersion(aclAccessConfigMap))) {\n",
      "                        return true;\n",
      "                    }\n",
      "                    return false;\n",
      "                }\n",
      "            }\n",
      "            // Create acl access config elements\n",
      "            accounts.add(createAclAccessConfigMap(null, plainAccessConfig));\n",
      "            aclAccessConfigMap.put(AclConstants.CONFIG_ACCOUNTS, accounts);\n",
      "            if (AclUtils.writeDataObject(fileHome + File.separator + fileName, updateAclConfigFileVersion(aclAccessConfigMap))) {\n",
      "                return true;\n",
      "            }\n",
      "            return false;\n",
      "        }\n",
      "\n",
      "        log.error(\"Users must ensure that the acl yaml config file has accounts node element\");\n",
      "        return false;\n",
      "    }\n",
      "\n",
      "    private Map<String, Object> createAclAccessConfigMap(Map<String, Object> existedAccountMap, PlainAccessConfig plainAccessConfig) {\n",
      "        \n",
      "        Map<String, Object> newAccountsMap = null;\n",
      "        if (existedAccountMap == null) {\n",
      "            newAccountsMap = new LinkedHashMap<String, Object>();\n",
      "        } else {\n",
      "            newAccountsMap = existedAccountMap;\n",
      "        }\n",
      "\n",
      "        if (StringUtils.isEmpty(plainAccessConfig.getAccessKey()) ||\n",
      "            plainAccessConfig.getAccessKey().length() <= AclConstants.ACCESS_KEY_MIN_LENGTH) {\n",
      "            throw new AclException(String.format(\n",
      "                    \"The accessKey=%s cannot be null and length should longer than 6\",\n",
      "                    plainAccessConfig.getAccessKey()));\n",
      "        }\n",
      "        newAccountsMap.put(AclConstants.CONFIG_ACCESS_KEY, plainAccessConfig.getAccessKey());\n",
      "\n",
      "        if (!StringUtils.isEmpty(plainAccessConfig.getSecretKey())) {\n",
      "            if (plainAccessConfig.getSecretKey().length() <= AclConstants.SECRET_KEY_MIN_LENGTH) {\n",
      "                throw new AclException(String.format(\n",
      "                    \"The secretKey=%s value length should longer than 6\",\n",
      "                    plainAccessConfig.getSecretKey()));\n",
      "            }\n",
      "            newAccountsMap.put(AclConstants.CONFIG_SECRET_KEY, (String) plainAccessConfig.getSecretKey());\n",
      "        }\n",
      "        if (!StringUtils.isEmpty(plainAccessConfig.getWhiteRemoteAddress())) {\n",
      "            newAccountsMap.put(AclConstants.CONFIG_WHITE_ADDR, plainAccessConfig.getWhiteRemoteAddress());\n",
      "        }\n",
      "        if (!StringUtils.isEmpty(String.valueOf(plainAccessConfig.isAdmin()))) {\n",
      "            newAccountsMap.put(AclConstants.CONFIG_ADMIN_ROLE, plainAccessConfig.isAdmin());\n",
      "        }\n",
      "        if (!StringUtils.isEmpty(plainAccessConfig.getDefaultTopicPerm())) {\n",
      "            newAccountsMap.put(AclConstants.CONFIG_DEFAULT_TOPIC_PERM, plainAccessConfig.getDefaultTopicPerm());\n",
      "        }\n",
      "        if (!StringUtils.isEmpty(plainAccessConfig.getDefaultGroupPerm())) {\n",
      "            newAccountsMap.put(AclConstants.CONFIG_DEFAULT_GROUP_PERM, plainAccessConfig.getDefaultGroupPerm());\n",
      "        }\n",
      "        if (plainAccessConfig.getTopicPerms() != null && !plainAccessConfig.getTopicPerms().isEmpty()) {\n",
      "            newAccountsMap.put(AclConstants.CONFIG_TOPIC_PERMS, plainAccessConfig.getTopicPerms());\n",
      "        }\n",
      "        if (plainAccessConfig.getGroupPerms() != null && !plainAccessConfig.getGroupPerms().isEmpty()) {\n",
      "            newAccountsMap.put(AclConstants.CONFIG_GROUP_PERMS, plainAccessConfig.getGroupPerms());\n",
      "        }\n",
      "\n",
      "        return newAccountsMap;\n",
      "    }\n",
      "\n",
      "    public boolean deleteAccessConfig(String accesskey) {\n",
      "        if (StringUtils.isEmpty(accesskey)) {\n",
      "            log.error(\"Parameter value accesskey is null or empty String,Please check your parameter\");\n",
      "            return false;\n",
      "        }\n",
      "\n",
      "        Map<String, Object> aclAccessConfigMap = AclUtils.getYamlDataObject(fileHome + File.separator + fileName,\n",
      "                    Map.class);\n",
      "\n",
      "        List<Map<String, Object>> accounts = (List<Map<String, Object>>) aclAccessConfigMap.get(\"accounts\");\n",
      "        if (accounts != null) {\n",
      "            Iterator<Map<String, Object>> itemIterator = accounts.iterator();\n",
      "            while (itemIterator.hasNext()) {\n",
      "\n",
      "                if (itemIterator.next().get(AclConstants.CONFIG_ACCESS_KEY).equals(accesskey)) {\n",
      "                    // Delete the related acl config element\n",
      "                    itemIterator.remove();\n",
      "                    aclAccessConfigMap.put(AclConstants.CONFIG_ACCOUNTS, accounts);\n",
      "\n",
      "                    if (AclUtils.writeDataObject(fileHome + File.separator + fileName, updateAclConfigFileVersion(aclAccessConfigMap))) {\n",
      "                        return true;\n",
      "                    }\n",
      "                    return false;\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "        log.error(\"Users must ensure that the acl yaml config file has related acl config elements\");\n",
      "\n",
      "        return false;\n",
      "    }\n",
      "\n",
      "    public boolean updateGlobalWhiteAddrsConfig(List<String> globalWhiteAddrsList) {\n",
      "\n",
      "        if (globalWhiteAddrsList == null) {\n",
      "            log.error(\"Parameter value globalWhiteAddrsList is null,Please check your parameter\");\n",
      "            return false;\n",
      "        }\n",
      "\n",
      "        Map<String, Object> aclAccessConfigMap = AclUtils.getYamlDataObject(fileHome + File.separator + fileName,\n",
      "            Map.class);\n",
      "\n",
      "        List<String> globalWhiteRemoteAddrList = (List<String>) aclAccessConfigMap.get(AclConstants.CONFIG_GLOBAL_WHITE_ADDRS);\n",
      "\n",
      "        if (globalWhiteRemoteAddrList != null) {\n",
      "            globalWhiteRemoteAddrList.clear();\n",
      "            globalWhiteRemoteAddrList.addAll(globalWhiteAddrsList);\n",
      "\n",
      "            // Update globalWhiteRemoteAddr element in memeory map firstly\n",
      "            aclAccessConfigMap.put(AclConstants.CONFIG_GLOBAL_WHITE_ADDRS,globalWhiteRemoteAddrList);\n",
      "            if (AclUtils.writeDataObject(fileHome + File.separator + fileName, updateAclConfigFileVersion(aclAccessConfigMap))) {\n",
      "                return true;\n",
      "            }\n",
      "            return false;\n",
      "        }\n",
      "\n",
      "        log.error(\"Users must ensure that the acl yaml config file has globalWhiteRemoteAddresses flag firstly\");\n",
      "        return false;\n",
      "    }\n",
      "\n",
      "    public AclConfig getAllAclConfig() {\n",
      "        AclConfig aclConfig = new AclConfig();\n",
      "        List<PlainAccessConfig> configs = new ArrayList<>();\n",
      "        List<String> whiteAddrs = new ArrayList<>();\n",
      "        JSONObject plainAclConfData = AclUtils.getYamlDataObject(fileHome + File.separator + fileName,\n",
      "                JSONObject.class);\n",
      "        if (plainAclConfData == null || plainAclConfData.isEmpty()) {\n",
      "            throw new AclException(String.format(\"%s file is not data\", fileHome + File.separator + fileName));\n",
      "        }\n",
      "        JSONArray globalWhiteAddrs = plainAclConfData.getJSONArray(AclConstants.CONFIG_GLOBAL_WHITE_ADDRS);\n",
      "        if (globalWhiteAddrs != null && !globalWhiteAddrs.isEmpty()) {\n",
      "            whiteAddrs = globalWhiteAddrs.toJavaList(String.class);\n",
      "        }\n",
      "        JSONArray accounts = plainAclConfData.getJSONArray(AclConstants.CONFIG_ACCOUNTS);\n",
      "        if (accounts != null && !accounts.isEmpty()) {\n",
      "            configs = accounts.toJavaList(PlainAccessConfig.class);\n",
      "        }\n",
      "        aclConfig.setGlobalWhiteAddrs(whiteAddrs);\n",
      "        aclConfig.setPlainAccessConfigs(configs);\n",
      "        return aclConfig;\n",
      "    }\n",
      "\n",
      "    private void watch() {\n",
      "        try {\n",
      "            String watchFilePath = fileHome + fileName;\n",
      "            FileWatchService fileWatchService = new FileWatchService(new String[] {watchFilePath}, new FileWatchService.Listener() {\n",
      "                @Override\n",
      "                public void onChanged(String path) {\n",
      "                    log.info(\"The plain acl yml changed, reload the context\");\n",
      "                    load();\n",
      "                }\n",
      "            });\n",
      "            fileWatchService.start();\n",
      "            log.info(\"Succeed to start AclWatcherService\");\n",
      "            this.isWatchStart = true;\n",
      "        } catch (Exception e) {\n",
      "            log.error(\"Failed to start AclWatcherService\", e);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    void checkPerm(PlainAccessResource needCheckedAccess, PlainAccessResource ownedAccess) {\n",
      "        if (Permission.needAdminPerm(needCheckedAccess.getRequestCode()) && !ownedAccess.isAdmin()) {\n",
      "            throw new AclException(String.format(\"Need admin permission for request code=%d, but accessKey=%s is not\", needCheckedAccess.getRequestCode(), ownedAccess.getAccessKey()));\n",
      "        }\n",
      "        Map<String, Byte> needCheckedPermMap = needCheckedAccess.getResourcePermMap();\n",
      "        Map<String, Byte> ownedPermMap = ownedAccess.getResourcePermMap();\n",
      "\n",
      "        if (needCheckedPermMap == null) {\n",
      "            // If the needCheckedPermMap is null,then return\n",
      "            return;\n",
      "        }\n",
      "\n",
      "        if (ownedPermMap == null && ownedAccess.isAdmin()) {\n",
      "            // If the ownedPermMap is null and it is an admin user, then return\n",
      "            return;\n",
      "        }\n",
      "\n",
      "        for (Map.Entry<String, Byte> needCheckedEntry : needCheckedPermMap.entrySet()) {\n",
      "            String resource = needCheckedEntry.getKey();\n",
      "            Byte neededPerm = needCheckedEntry.getValue();\n",
      "            boolean isGroup = PlainAccessResource.isRetryTopic(resource);\n",
      "\n",
      "            if (ownedPermMap == null || !ownedPermMap.containsKey(resource)) {\n",
      "                // Check the default perm\n",
      "                byte ownedPerm = isGroup ? ownedAccess.getDefaultGroupPerm() :\n",
      "                    ownedAccess.getDefaultTopicPerm();\n",
      "                if (!Permission.checkPermission(neededPerm, ownedPerm)) {\n",
      "                    throw new AclException(String.format(\"No default permission for %s\", PlainAccessResource.printStr(resource, isGroup)));\n",
      "                }\n",
      "                continue;\n",
      "            }\n",
      "            if (!Permission.checkPermission(neededPerm, ownedPermMap.get(resource))) {\n",
      "                throw new AclException(String.format(\"No default permission for %s\", PlainAccessResource.printStr(resource, isGroup)));\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    void clearPermissionInfo() {\n",
      "        this.plainAccessResourceMap.clear();\n",
      "        this.globalWhiteRemoteAddressStrategy.clear();\n",
      "    }\n",
      "\n",
      "    public PlainAccessResource buildPlainAccessResource(PlainAccessConfig plainAccessConfig) throws AclException {\n",
      "        if (plainAccessConfig.getAccessKey() == null\n",
      "            || plainAccessConfig.getSecretKey() == null\n",
      "            || plainAccessConfig.getAccessKey().length() <= AclConstants.ACCESS_KEY_MIN_LENGTH\n",
      "            || plainAccessConfig.getSecretKey().length() <= AclConstants.SECRET_KEY_MIN_LENGTH) {\n",
      "            throw new AclException(String.format(\n",
      "                \"The accessKey=%s and secretKey=%s cannot be null and length should longer than 6\",\n",
      "                    plainAccessConfig.getAccessKey(), plainAccessConfig.getSecretKey()));\n",
      "        }\n",
      "        PlainAccessResource plainAccessResource = new PlainAccessResource();\n",
      "        plainAccessResource.setAccessKey(plainAccessConfig.getAccessKey());\n",
      "        plainAccessResource.setSecretKey(plainAccessConfig.getSecretKey());\n",
      "        plainAccessResource.setWhiteRemoteAddress(plainAccessConfig.getWhiteRemoteAddress());\n",
      "\n",
      "        plainAccessResource.setAdmin(plainAccessConfig.isAdmin());\n",
      "\n",
      "        plainAccessResource.setDefaultGroupPerm(Permission.parsePermFromString(plainAccessConfig.getDefaultGroupPerm()));\n",
      "        plainAccessResource.setDefaultTopicPerm(Permission.parsePermFromString(plainAccessConfig.getDefaultTopicPerm()));\n",
      "\n",
      "        Permission.parseResourcePerms(plainAccessResource, false, plainAccessConfig.getGroupPerms());\n",
      "        Permission.parseResourcePerms(plainAccessResource, true, plainAccessConfig.getTopicPerms());\n",
      "\n",
      "        plainAccessResource.setRemoteAddressStrategy(remoteAddressStrategyFactory.\n",
      "                getRemoteAddressStrategy(plainAccessResource.getWhiteRemoteAddress()));\n",
      "\n",
      "        return plainAccessResource;\n",
      "    }\n",
      "\n",
      "    public void validate(PlainAccessResource plainAccessResource) {\n",
      "\n",
      "        // Check the global white remote addr\n",
      "        for (RemoteAddressStrategy remoteAddressStrategy : globalWhiteRemoteAddressStrategy) {\n",
      "            if (remoteAddressStrategy.match(plainAccessResource)) {\n",
      "                return;\n",
      "            }\n",
      "        }\n",
      "\n",
      "        if (plainAccessResource.getAccessKey() == null) {\n",
      "            throw new AclException(String.format(\"No accessKey is configured\"));\n",
      "        }\n",
      "\n",
      "        if (!plainAccessResourceMap.containsKey(plainAccessResource.getAccessKey())) {\n",
      "            throw new AclException(String.format(\"No acl config for %s\", plainAccessResource.getAccessKey()));\n",
      "        }\n",
      "\n",
      "        // Check the white addr for accesskey\n",
      "        PlainAccessResource ownedAccess = plainAccessResourceMap.get(plainAccessResource.getAccessKey());\n",
      "        if (ownedAccess.getRemoteAddressStrategy().match(plainAccessResource)) {\n",
      "            return;\n",
      "        }\n",
      "\n",
      "        // Check the signature\n",
      "        String signature = AclUtils.calSignature(plainAccessResource.getContent(), ownedAccess.getSecretKey());\n",
      "        if (!signature.equals(plainAccessResource.getSignature())) {\n",
      "            throw new AclException(String.format(\"Check signature failed for accessKey=%s\", plainAccessResource.getAccessKey()));\n",
      "        }\n",
      "        // Check perm of each resource\n",
      "\n",
      "        checkPerm(plainAccessResource, ownedAccess);\n",
      "    }\n",
      "\n",
      "    public boolean isWatchStart() {\n",
      "        return isWatchStart;\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.acl.plain;\n",
      "\n",
      "import java.io.File;\n",
      "import java.io.FileWriter;\n",
      "import java.io.IOException;\n",
      "import java.util.ArrayList;\n",
      "import java.util.HashSet;\n",
      "import java.util.List;\n",
      "import java.util.Map;\n",
      "import java.util.Set;\n",
      "import org.apache.commons.lang3.reflect.FieldUtils;\n",
      "import org.apache.rocketmq.acl.common.AclException;\n",
      "import org.apache.rocketmq.acl.common.AclUtils;\n",
      "import org.apache.rocketmq.acl.common.Permission;\n",
      "import org.apache.rocketmq.common.PlainAccessConfig;\n",
      "import org.junit.Assert;\n",
      "import org.junit.Before;\n",
      "import org.junit.Test;\n",
      "\n",
      "public class PlainPermissionManagerTest {\n",
      "\n",
      "    PlainPermissionManager plainPermissionManager;\n",
      "    PlainAccessResource PUBPlainAccessResource;\n",
      "    PlainAccessResource SUBPlainAccessResource;\n",
      "    PlainAccessResource ANYPlainAccessResource;\n",
      "    PlainAccessResource DENYPlainAccessResource;\n",
      "    PlainAccessResource plainAccessResource = new PlainAccessResource();\n",
      "    PlainAccessConfig plainAccessConfig = new PlainAccessConfig();\n",
      "    Set<Integer> adminCode = new HashSet<>();\n",
      "\n",
      "    @Before\n",
      "    public void init() throws NoSuchFieldException, SecurityException, IOException {\n",
      "        // UPDATE_AND_CREATE_TOPIC\n",
      "        adminCode.add(17);\n",
      "        // UPDATE_BROKER_CONFIG\n",
      "        adminCode.add(25);\n",
      "        // DELETE_TOPIC_IN_BROKER\n",
      "        adminCode.add(215);\n",
      "        // UPDATE_AND_CREATE_SUBSCRIPTIONGROUP\n",
      "        adminCode.add(200);\n",
      "        // DELETE_SUBSCRIPTIONGROUP\n",
      "        adminCode.add(207);\n",
      "\n",
      "        PUBPlainAccessResource = clonePlainAccessResource(Permission.PUB);\n",
      "        SUBPlainAccessResource = clonePlainAccessResource(Permission.SUB);\n",
      "        ANYPlainAccessResource = clonePlainAccessResource(Permission.ANY);\n",
      "        DENYPlainAccessResource = clonePlainAccessResource(Permission.DENY);\n",
      "\n",
      "        System.setProperty(\"rocketmq.home.dir\", \"src/test/resources\");\n",
      "        System.setProperty(\"rocketmq.acl.plain.file\", \"/conf/plain_acl.yml\");\n",
      "        \n",
      "        plainPermissionManager = new PlainPermissionManager();\n",
      "\n",
      "    }\n",
      "\n",
      "    public PlainAccessResource clonePlainAccessResource(byte perm) {\n",
      "        PlainAccessResource painAccessResource = new PlainAccessResource();\n",
      "        painAccessResource.setAccessKey(\"RocketMQ\");\n",
      "        painAccessResource.setSecretKey(\"12345678\");\n",
      "        painAccessResource.setWhiteRemoteAddress(\"127.0.\" + perm + \".*\");\n",
      "        painAccessResource.setDefaultGroupPerm(perm);\n",
      "        painAccessResource.setDefaultTopicPerm(perm);\n",
      "        painAccessResource.addResourceAndPerm(PlainAccessResource.getRetryTopic(\"groupA\"), Permission.PUB);\n",
      "        painAccessResource.addResourceAndPerm(PlainAccessResource.getRetryTopic(\"groupB\"), Permission.SUB);\n",
      "        painAccessResource.addResourceAndPerm(PlainAccessResource.getRetryTopic(\"groupC\"), Permission.ANY);\n",
      "        painAccessResource.addResourceAndPerm(PlainAccessResource.getRetryTopic(\"groupD\"), Permission.DENY);\n",
      "\n",
      "        painAccessResource.addResourceAndPerm(\"topicA\", Permission.PUB);\n",
      "        painAccessResource.addResourceAndPerm(\"topicB\", Permission.SUB);\n",
      "        painAccessResource.addResourceAndPerm(\"topicC\", Permission.ANY);\n",
      "        painAccessResource.addResourceAndPerm(\"topicD\", Permission.DENY);\n",
      "        return painAccessResource;\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void buildPlainAccessResourceTest() {\n",
      "        PlainAccessResource plainAccessResource = null;\n",
      "        PlainAccessConfig plainAccess = new PlainAccessConfig();\n",
      "\n",
      "        plainAccess.setAccessKey(\"RocketMQ\");\n",
      "        plainAccess.setSecretKey(\"12345678\");\n",
      "        plainAccessResource = plainPermissionManager.buildPlainAccessResource(plainAccess);\n",
      "        Assert.assertEquals(plainAccessResource.getAccessKey(), \"RocketMQ\");\n",
      "        Assert.assertEquals(plainAccessResource.getSecretKey(), \"12345678\");\n",
      "\n",
      "        plainAccess.setWhiteRemoteAddress(\"127.0.0.1\");\n",
      "        plainAccessResource = plainPermissionManager.buildPlainAccessResource(plainAccess);\n",
      "        Assert.assertEquals(plainAccessResource.getWhiteRemoteAddress(), \"127.0.0.1\");\n",
      "\n",
      "        plainAccess.setAdmin(true);\n",
      "        plainAccessResource = plainPermissionManager.buildPlainAccessResource(plainAccess);\n",
      "        Assert.assertEquals(plainAccessResource.isAdmin(), true);\n",
      "\n",
      "        List<String> groups = new ArrayList<String>();\n",
      "        groups.add(\"groupA=DENY\");\n",
      "        groups.add(\"groupB=PUB|SUB\");\n",
      "        groups.add(\"groupC=PUB\");\n",
      "        plainAccess.setGroupPerms(groups);\n",
      "        plainAccessResource = plainPermissionManager.buildPlainAccessResource(plainAccess);\n",
      "        Map<String, Byte> resourcePermMap = plainAccessResource.getResourcePermMap();\n",
      "        Assert.assertEquals(resourcePermMap.size(), 3);\n",
      "\n",
      "        Assert.assertEquals(resourcePermMap.get(PlainAccessResource.getRetryTopic(\"groupA\")).byteValue(), Permission.DENY);\n",
      "        Assert.assertEquals(resourcePermMap.get(PlainAccessResource.getRetryTopic(\"groupB\")).byteValue(), Permission.PUB|Permission.SUB);\n",
      "        Assert.assertEquals(resourcePermMap.get(PlainAccessResource.getRetryTopic(\"groupC\")).byteValue(), Permission.PUB);\n",
      "\n",
      "        List<String> topics = new ArrayList<String>();\n",
      "        topics.add(\"topicA=DENY\");\n",
      "        topics.add(\"topicB=PUB|SUB\");\n",
      "        topics.add(\"topicC=PUB\");\n",
      "        plainAccess.setTopicPerms(topics);\n",
      "        plainAccessResource = plainPermissionManager.buildPlainAccessResource(plainAccess);\n",
      "        resourcePermMap = plainAccessResource.getResourcePermMap();\n",
      "        Assert.assertEquals(resourcePermMap.size(), 6);\n",
      "\n",
      "        Assert.assertEquals(resourcePermMap.get(\"topicA\").byteValue(), Permission.DENY);\n",
      "        Assert.assertEquals(resourcePermMap.get(\"topicB\").byteValue(), Permission.PUB|Permission.SUB);\n",
      "        Assert.assertEquals(resourcePermMap.get(\"topicC\").byteValue(), Permission.PUB);\n",
      "    }\n",
      "\n",
      "    @Test(expected = AclException.class)\n",
      "    public void checkPermAdmin() {\n",
      "        PlainAccessResource plainAccessResource = new PlainAccessResource();\n",
      "        plainAccessResource.setRequestCode(17);\n",
      "        plainPermissionManager.checkPerm(plainAccessResource, PUBPlainAccessResource);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void checkPerm() {\n",
      "\n",
      "        PlainAccessResource plainAccessResource = new PlainAccessResource();\n",
      "        plainAccessResource.addResourceAndPerm(\"topicA\", Permission.PUB);\n",
      "        plainPermissionManager.checkPerm(plainAccessResource, PUBPlainAccessResource);\n",
      "        plainAccessResource.addResourceAndPerm(\"topicB\", Permission.SUB);\n",
      "        plainPermissionManager.checkPerm(plainAccessResource, ANYPlainAccessResource);\n",
      "\n",
      "        plainAccessResource = new PlainAccessResource();\n",
      "        plainAccessResource.addResourceAndPerm(\"topicB\", Permission.SUB);\n",
      "        plainPermissionManager.checkPerm(plainAccessResource, SUBPlainAccessResource);\n",
      "        plainAccessResource.addResourceAndPerm(\"topicA\", Permission.PUB);\n",
      "        plainPermissionManager.checkPerm(plainAccessResource, ANYPlainAccessResource);\n",
      "\n",
      "    }\n",
      "    @Test(expected = AclException.class)\n",
      "    public void checkErrorPermDefaultValueNotMatch() {\n",
      "\n",
      "        plainAccessResource = new PlainAccessResource();\n",
      "        plainAccessResource.addResourceAndPerm(\"topicF\", Permission.PUB);\n",
      "        plainPermissionManager.checkPerm(plainAccessResource, SUBPlainAccessResource);\n",
      "    }\n",
      "    @Test(expected = AclException.class)\n",
      "    public void accountNullTest() {\n",
      "        plainAccessConfig.setAccessKey(null);\n",
      "        plainPermissionManager.buildPlainAccessResource(plainAccessConfig);\n",
      "    }\n",
      "\n",
      "    @Test(expected = AclException.class)\n",
      "    public void accountThanTest() {\n",
      "        plainAccessConfig.setAccessKey(\"123\");\n",
      "        plainPermissionManager.buildPlainAccessResource(plainAccessConfig);\n",
      "    }\n",
      "\n",
      "    @Test(expected = AclException.class)\n",
      "    public void passWordtNullTest() {\n",
      "        plainAccessConfig.setAccessKey(null);\n",
      "        plainPermissionManager.buildPlainAccessResource(plainAccessConfig);\n",
      "    }\n",
      "\n",
      "    @Test(expected = AclException.class)\n",
      "    public void passWordThanTest() {\n",
      "        plainAccessConfig.setAccessKey(\"123\");\n",
      "        plainPermissionManager.buildPlainAccessResource(plainAccessConfig);\n",
      "    }\n",
      "\n",
      "    @Test(expected = AclException.class)\n",
      "    public void testPlainAclPlugEngineInit() {\n",
      "        System.setProperty(\"rocketmq.home.dir\", \"\");\n",
      "        new PlainPermissionManager().load();\n",
      "    }\n",
      "\n",
      "    @SuppressWarnings(\"unchecked\")\n",
      "    @Test\n",
      "    public void cleanAuthenticationInfoTest() throws IllegalAccessException {\n",
      "        // PlainPermissionManager.addPlainAccessResource(plainAccessResource);\n",
      "        Map<String, List<PlainAccessResource>> plainAccessResourceMap = (Map<String, List<PlainAccessResource>>) FieldUtils.readDeclaredField(plainPermissionManager, \"plainAccessResourceMap\", true);\n",
      "        Assert.assertFalse(plainAccessResourceMap.isEmpty());\n",
      "\n",
      "        plainPermissionManager.clearPermissionInfo();\n",
      "        plainAccessResourceMap = (Map<String, List<PlainAccessResource>>) FieldUtils.readDeclaredField(plainPermissionManager, \"plainAccessResourceMap\", true);\n",
      "        Assert.assertTrue(plainAccessResourceMap.isEmpty());\n",
      "        // RemoveDataVersionFromYamlFile(\"src/test/resources/conf/plain_acl.yml\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void isWatchStartTest() {\n",
      "\n",
      "        PlainPermissionManager plainPermissionManager = new PlainPermissionManager();\n",
      "        Assert.assertTrue(plainPermissionManager.isWatchStart());\n",
      "        // RemoveDataVersionFromYamlFile(\"src/test/resources/conf/plain_acl.yml\");\n",
      "\n",
      "    }\n",
      "\n",
      "\n",
      "    @Test\n",
      "    public void testWatch() throws IOException, IllegalAccessException ,InterruptedException{\n",
      "        System.setProperty(\"rocketmq.home.dir\", \"src/test/resources\");\n",
      "        System.setProperty(\"rocketmq.acl.plain.file\", \"/conf/plain_acl-test.yml\");\n",
      "        String fileName =System.getProperty(\"rocketmq.home.dir\", \"src/test/resources\")+System.getProperty(\"rocketmq.acl.plain.file\", \"/conf/plain_acl.yml\");\n",
      "        File transport = new File(fileName);\n",
      "        transport.delete();\n",
      "        transport.createNewFile();\n",
      "        FileWriter writer = new FileWriter(transport);\n",
      "        writer.write(\"accounts:\\r\\n\");\n",
      "        writer.write(\"- accessKey: watchrocketmq\\r\\n\");\n",
      "        writer.write(\"  secretKey: 12345678\\r\\n\");\n",
      "        writer.write(\"  whiteRemoteAddress: 127.0.0.1\\r\\n\");\n",
      "        writer.write(\"  admin: true\\r\\n\");\n",
      "        writer.flush();\n",
      "        writer.close();\n",
      "\n",
      "\n",
      "        PlainPermissionManager plainPermissionManager = new PlainPermissionManager();\n",
      "        Assert.assertTrue(plainPermissionManager.isWatchStart());\n",
      "\n",
      "        {\n",
      "            Map<String, PlainAccessResource> plainAccessResourceMap = (Map<String, PlainAccessResource>) FieldUtils.readDeclaredField(plainPermissionManager, \"plainAccessResourceMap\", true);\n",
      "            PlainAccessResource accessResource = plainAccessResourceMap.get(\"watchrocketmq\");\n",
      "            Assert.assertNotNull(accessResource);\n",
      "            Assert.assertEquals(accessResource.getSecretKey(), \"12345678\");\n",
      "            Assert.assertTrue(accessResource.isAdmin());\n",
      "\n",
      "        }\n",
      "\n",
      "        Map<String, Object> updatedMap = AclUtils.getYamlDataObject(fileName, Map.class);\n",
      "        List<Map<String, Object>> accounts = (List<Map<String, Object>>) updatedMap.get(\"accounts\");\n",
      "        accounts.get(0).remove(\"accessKey\");\n",
      "        accounts.get(0).remove(\"secretKey\");\n",
      "        accounts.get(0).put(\"accessKey\", \"watchrocketmq1\");\n",
      "        accounts.get(0).put(\"secretKey\", \"88888888\");\n",
      "        accounts.get(0).put(\"admin\", \"false\");\n",
      "        // Update file and flush to yaml file\n",
      "        AclUtils.writeDataObject(fileName, updatedMap);\n",
      "\n",
      "        Thread.sleep(1000);\n",
      "        {\n",
      "            Map<String, PlainAccessResource> plainAccessResourceMap = (Map<String, PlainAccessResource>) FieldUtils.readDeclaredField(plainPermissionManager, \"plainAccessResourceMap\", true);\n",
      "            PlainAccessResource accessResource = plainAccessResourceMap.get(\"watchrocketmq1\");\n",
      "            Assert.assertNotNull(accessResource);\n",
      "            Assert.assertEquals(accessResource.getSecretKey(), \"88888888\");\n",
      "            Assert.assertFalse(accessResource.isAdmin());\n",
      "\n",
      "        }\n",
      "        transport.delete();\n",
      "        System.setProperty(\"rocketmq.home.dir\", \"src/test/resources\");\n",
      "        System.setProperty(\"rocketmq.acl.plain.file\", \"/conf/plain_acl.yml\");\n",
      "    }\n",
      "\n",
      "    @Test(expected = AclException.class)\n",
      "    public void initializeTest() {\n",
      "        System.setProperty(\"rocketmq.acl.plain.file\", \"/conf/plain_acl_null.yml\");\n",
      "        new PlainPermissionManager();\n",
      "\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "PlainPermissionManager::::load()": [
        68,
        106
      ],
      "PlainPermissionManager::::getAclConfigDataVersion()": [
        108,
        110
      ],
      "PlainPermissionManager::::updateAclConfigFileVersion(java.util.Map<java.lang.String, java.lang.Object>)": [
        112,
        125
      ],
      "PlainPermissionManager::::deleteAccessConfig(java.lang.String)": [
        214,
        243
      ],
      "PlainPermissionManager::::updateGlobalWhiteAddrsConfig(java.util.List<java.lang.String>)": [
        245,
        271
      ],
      "PlainPermissionManager::::getAllAclConfig()": [
        273,
        293
      ],
      "PlainPermissionManager::::watch()": [
        295,
        311
      ],
      "PlainPermissionManager::::checkPerm(org.apache.rocketmq.acl.plain.PlainAccessResource,org.apache.rocketmq.acl.plain.PlainAccessResource)": [
        313,
        348
      ],
      "PlainPermissionManager::::clearPermissionInfo()": [
        350,
        353
      ],
      "PlainPermissionManager::::validate(org.apache.rocketmq.acl.plain.PlainAccessResource)": [
        383,
        414
      ],
      "PlainPermissionManager::::isWatchStart()": [
        416,
        418
      ]
    },
    "test_method_lines_dic": {
      "PlainPermissionManagerTest::::init()": [
        47,
        70
      ],
      "PlainPermissionManagerTest::::clonePlainAccessResource(byte)": [
        72,
        89
      ],
      "PlainPermissionManagerTest::::buildPlainAccessResourceTest()": [
        91,
        135
      ],
      "PlainPermissionManagerTest::::checkPermAdmin()": [
        137,
        142
      ],
      "PlainPermissionManagerTest::::checkPerm()": [
        144,
        159
      ],
      "PlainPermissionManagerTest::::checkErrorPermDefaultValueNotMatch()": [
        160,
        166
      ],
      "PlainPermissionManagerTest::::accountNullTest()": [
        167,
        171
      ],
      "PlainPermissionManagerTest::::accountThanTest()": [
        173,
        177
      ],
      "PlainPermissionManagerTest::::passWordtNullTest()": [
        179,
        183
      ],
      "PlainPermissionManagerTest::::passWordThanTest()": [
        185,
        189
      ],
      "PlainPermissionManagerTest::::testPlainAclPlugEngineInit()": [
        191,
        195
      ],
      "PlainPermissionManagerTest::::cleanAuthenticationInfoTest()": [
        197,
        208
      ],
      "PlainPermissionManagerTest::::isWatchStartTest()": [
        210,
        217
      ],
      "PlainPermissionManagerTest::::testWatch()": [
        220,
        272
      ],
      "PlainPermissionManagerTest::::initializeTest()": [
        274,
        279
      ]
    },
    "reverse_method_lines_dic": {
      "68": "PlainPermissionManager::::load()",
      "69": "PlainPermissionManager::::load()",
      "70": "PlainPermissionManager::::load()",
      "71": "PlainPermissionManager::::load()",
      "72": "PlainPermissionManager::::load()",
      "73": "PlainPermissionManager::::load()",
      "74": "PlainPermissionManager::::load()",
      "75": "PlainPermissionManager::::load()",
      "76": "PlainPermissionManager::::load()",
      "77": "PlainPermissionManager::::load()",
      "78": "PlainPermissionManager::::load()",
      "79": "PlainPermissionManager::::load()",
      "80": "PlainPermissionManager::::load()",
      "81": "PlainPermissionManager::::load()",
      "82": "PlainPermissionManager::::load()",
      "83": "PlainPermissionManager::::load()",
      "84": "PlainPermissionManager::::load()",
      "85": "PlainPermissionManager::::load()",
      "86": "PlainPermissionManager::::load()",
      "87": "PlainPermissionManager::::load()",
      "88": "PlainPermissionManager::::load()",
      "89": "PlainPermissionManager::::load()",
      "90": "PlainPermissionManager::::load()",
      "91": "PlainPermissionManager::::load()",
      "92": "PlainPermissionManager::::load()",
      "93": "PlainPermissionManager::::load()",
      "94": "PlainPermissionManager::::load()",
      "95": "PlainPermissionManager::::load()",
      "96": "PlainPermissionManager::::load()",
      "97": "PlainPermissionManager::::load()",
      "98": "PlainPermissionManager::::load()",
      "99": "PlainPermissionManager::::load()",
      "100": "PlainPermissionManager::::load()",
      "101": "PlainPermissionManager::::load()",
      "102": "PlainPermissionManager::::load()",
      "103": "PlainPermissionManager::::load()",
      "104": "PlainPermissionManager::::load()",
      "105": "PlainPermissionManager::::load()",
      "106": "PlainPermissionManager::::load()",
      "108": "PlainPermissionManager::::getAclConfigDataVersion()",
      "109": "PlainPermissionManager::::getAclConfigDataVersion()",
      "110": "PlainPermissionManager::::getAclConfigDataVersion()",
      "112": "PlainPermissionManager::::updateAclConfigFileVersion(java.util.Map<java.lang.String, java.lang.Object>)",
      "113": "PlainPermissionManager::::updateAclConfigFileVersion(java.util.Map<java.lang.String, java.lang.Object>)",
      "114": "PlainPermissionManager::::updateAclConfigFileVersion(java.util.Map<java.lang.String, java.lang.Object>)",
      "115": "PlainPermissionManager::::updateAclConfigFileVersion(java.util.Map<java.lang.String, java.lang.Object>)",
      "116": "PlainPermissionManager::::updateAclConfigFileVersion(java.util.Map<java.lang.String, java.lang.Object>)",
      "117": "PlainPermissionManager::::updateAclConfigFileVersion(java.util.Map<java.lang.String, java.lang.Object>)",
      "118": "PlainPermissionManager::::updateAclConfigFileVersion(java.util.Map<java.lang.String, java.lang.Object>)",
      "119": "PlainPermissionManager::::updateAclConfigFileVersion(java.util.Map<java.lang.String, java.lang.Object>)",
      "120": "PlainPermissionManager::::updateAclConfigFileVersion(java.util.Map<java.lang.String, java.lang.Object>)",
      "121": "PlainPermissionManager::::updateAclConfigFileVersion(java.util.Map<java.lang.String, java.lang.Object>)",
      "122": "PlainPermissionManager::::updateAclConfigFileVersion(java.util.Map<java.lang.String, java.lang.Object>)",
      "123": "PlainPermissionManager::::updateAclConfigFileVersion(java.util.Map<java.lang.String, java.lang.Object>)",
      "124": "PlainPermissionManager::::updateAclConfigFileVersion(java.util.Map<java.lang.String, java.lang.Object>)",
      "125": "PlainPermissionManager::::updateAclConfigFileVersion(java.util.Map<java.lang.String, java.lang.Object>)",
      "214": "PlainPermissionManager::::deleteAccessConfig(java.lang.String)",
      "215": "PlainPermissionManager::::deleteAccessConfig(java.lang.String)",
      "216": "PlainPermissionManager::::deleteAccessConfig(java.lang.String)",
      "217": "PlainPermissionManager::::deleteAccessConfig(java.lang.String)",
      "218": "PlainPermissionManager::::deleteAccessConfig(java.lang.String)",
      "219": "PlainPermissionManager::::deleteAccessConfig(java.lang.String)",
      "220": "PlainPermissionManager::::deleteAccessConfig(java.lang.String)",
      "221": "PlainPermissionManager::::deleteAccessConfig(java.lang.String)",
      "222": "PlainPermissionManager::::deleteAccessConfig(java.lang.String)",
      "223": "PlainPermissionManager::::deleteAccessConfig(java.lang.String)",
      "224": "PlainPermissionManager::::deleteAccessConfig(java.lang.String)",
      "225": "PlainPermissionManager::::deleteAccessConfig(java.lang.String)",
      "226": "PlainPermissionManager::::deleteAccessConfig(java.lang.String)",
      "227": "PlainPermissionManager::::deleteAccessConfig(java.lang.String)",
      "228": "PlainPermissionManager::::deleteAccessConfig(java.lang.String)",
      "229": "PlainPermissionManager::::deleteAccessConfig(java.lang.String)",
      "230": "PlainPermissionManager::::deleteAccessConfig(java.lang.String)",
      "231": "PlainPermissionManager::::deleteAccessConfig(java.lang.String)",
      "232": "PlainPermissionManager::::deleteAccessConfig(java.lang.String)",
      "233": "PlainPermissionManager::::deleteAccessConfig(java.lang.String)",
      "234": "PlainPermissionManager::::deleteAccessConfig(java.lang.String)",
      "235": "PlainPermissionManager::::deleteAccessConfig(java.lang.String)",
      "236": "PlainPermissionManager::::deleteAccessConfig(java.lang.String)",
      "237": "PlainPermissionManager::::deleteAccessConfig(java.lang.String)",
      "238": "PlainPermissionManager::::deleteAccessConfig(java.lang.String)",
      "239": "PlainPermissionManager::::deleteAccessConfig(java.lang.String)",
      "240": "PlainPermissionManager::::deleteAccessConfig(java.lang.String)",
      "241": "PlainPermissionManager::::deleteAccessConfig(java.lang.String)",
      "242": "PlainPermissionManager::::deleteAccessConfig(java.lang.String)",
      "243": "PlainPermissionManager::::deleteAccessConfig(java.lang.String)",
      "245": "PlainPermissionManager::::updateGlobalWhiteAddrsConfig(java.util.List<java.lang.String>)",
      "246": "PlainPermissionManager::::updateGlobalWhiteAddrsConfig(java.util.List<java.lang.String>)",
      "247": "PlainPermissionManager::::updateGlobalWhiteAddrsConfig(java.util.List<java.lang.String>)",
      "248": "PlainPermissionManager::::updateGlobalWhiteAddrsConfig(java.util.List<java.lang.String>)",
      "249": "PlainPermissionManager::::updateGlobalWhiteAddrsConfig(java.util.List<java.lang.String>)",
      "250": "PlainPermissionManager::::updateGlobalWhiteAddrsConfig(java.util.List<java.lang.String>)",
      "251": "PlainPermissionManager::::updateGlobalWhiteAddrsConfig(java.util.List<java.lang.String>)",
      "252": "PlainPermissionManager::::updateGlobalWhiteAddrsConfig(java.util.List<java.lang.String>)",
      "253": "PlainPermissionManager::::updateGlobalWhiteAddrsConfig(java.util.List<java.lang.String>)",
      "254": "PlainPermissionManager::::updateGlobalWhiteAddrsConfig(java.util.List<java.lang.String>)",
      "255": "PlainPermissionManager::::updateGlobalWhiteAddrsConfig(java.util.List<java.lang.String>)",
      "256": "PlainPermissionManager::::updateGlobalWhiteAddrsConfig(java.util.List<java.lang.String>)",
      "257": "PlainPermissionManager::::updateGlobalWhiteAddrsConfig(java.util.List<java.lang.String>)",
      "258": "PlainPermissionManager::::updateGlobalWhiteAddrsConfig(java.util.List<java.lang.String>)",
      "259": "PlainPermissionManager::::updateGlobalWhiteAddrsConfig(java.util.List<java.lang.String>)",
      "260": "PlainPermissionManager::::updateGlobalWhiteAddrsConfig(java.util.List<java.lang.String>)",
      "261": "PlainPermissionManager::::updateGlobalWhiteAddrsConfig(java.util.List<java.lang.String>)",
      "262": "PlainPermissionManager::::updateGlobalWhiteAddrsConfig(java.util.List<java.lang.String>)",
      "263": "PlainPermissionManager::::updateGlobalWhiteAddrsConfig(java.util.List<java.lang.String>)",
      "264": "PlainPermissionManager::::updateGlobalWhiteAddrsConfig(java.util.List<java.lang.String>)",
      "265": "PlainPermissionManager::::updateGlobalWhiteAddrsConfig(java.util.List<java.lang.String>)",
      "266": "PlainPermissionManager::::updateGlobalWhiteAddrsConfig(java.util.List<java.lang.String>)",
      "267": "PlainPermissionManager::::updateGlobalWhiteAddrsConfig(java.util.List<java.lang.String>)",
      "268": "PlainPermissionManager::::updateGlobalWhiteAddrsConfig(java.util.List<java.lang.String>)",
      "269": "PlainPermissionManager::::updateGlobalWhiteAddrsConfig(java.util.List<java.lang.String>)",
      "270": "PlainPermissionManager::::updateGlobalWhiteAddrsConfig(java.util.List<java.lang.String>)",
      "271": "PlainPermissionManager::::updateGlobalWhiteAddrsConfig(java.util.List<java.lang.String>)",
      "273": "PlainPermissionManager::::getAllAclConfig()",
      "274": "PlainPermissionManager::::getAllAclConfig()",
      "275": "PlainPermissionManager::::getAllAclConfig()",
      "276": "PlainPermissionManager::::getAllAclConfig()",
      "277": "PlainPermissionManager::::getAllAclConfig()",
      "278": "PlainPermissionManager::::getAllAclConfig()",
      "279": "PlainPermissionManager::::getAllAclConfig()",
      "280": "PlainPermissionManager::::getAllAclConfig()",
      "281": "PlainPermissionManager::::getAllAclConfig()",
      "282": "PlainPermissionManager::::getAllAclConfig()",
      "283": "PlainPermissionManager::::getAllAclConfig()",
      "284": "PlainPermissionManager::::getAllAclConfig()",
      "285": "PlainPermissionManager::::getAllAclConfig()",
      "286": "PlainPermissionManager::::getAllAclConfig()",
      "287": "PlainPermissionManager::::getAllAclConfig()",
      "288": "PlainPermissionManager::::getAllAclConfig()",
      "289": "PlainPermissionManager::::getAllAclConfig()",
      "290": "PlainPermissionManager::::getAllAclConfig()",
      "291": "PlainPermissionManager::::getAllAclConfig()",
      "292": "PlainPermissionManager::::getAllAclConfig()",
      "293": "PlainPermissionManager::::getAllAclConfig()",
      "295": "PlainPermissionManager::::watch()",
      "296": "PlainPermissionManager::::watch()",
      "297": "PlainPermissionManager::::watch()",
      "298": "PlainPermissionManager::::watch()",
      "299": "PlainPermissionManager::::watch()",
      "300": "PlainPermissionManager::::watch()",
      "301": "PlainPermissionManager::::watch()",
      "302": "PlainPermissionManager::::watch()",
      "303": "PlainPermissionManager::::watch()",
      "304": "PlainPermissionManager::::watch()",
      "305": "PlainPermissionManager::::watch()",
      "306": "PlainPermissionManager::::watch()",
      "307": "PlainPermissionManager::::watch()",
      "308": "PlainPermissionManager::::watch()",
      "309": "PlainPermissionManager::::watch()",
      "310": "PlainPermissionManager::::watch()",
      "311": "PlainPermissionManager::::watch()",
      "313": "PlainPermissionManager::::checkPerm(org.apache.rocketmq.acl.plain.PlainAccessResource,org.apache.rocketmq.acl.plain.PlainAccessResource)",
      "314": "PlainPermissionManager::::checkPerm(org.apache.rocketmq.acl.plain.PlainAccessResource,org.apache.rocketmq.acl.plain.PlainAccessResource)",
      "315": "PlainPermissionManager::::checkPerm(org.apache.rocketmq.acl.plain.PlainAccessResource,org.apache.rocketmq.acl.plain.PlainAccessResource)",
      "316": "PlainPermissionManager::::checkPerm(org.apache.rocketmq.acl.plain.PlainAccessResource,org.apache.rocketmq.acl.plain.PlainAccessResource)",
      "317": "PlainPermissionManager::::checkPerm(org.apache.rocketmq.acl.plain.PlainAccessResource,org.apache.rocketmq.acl.plain.PlainAccessResource)",
      "318": "PlainPermissionManager::::checkPerm(org.apache.rocketmq.acl.plain.PlainAccessResource,org.apache.rocketmq.acl.plain.PlainAccessResource)",
      "319": "PlainPermissionManager::::checkPerm(org.apache.rocketmq.acl.plain.PlainAccessResource,org.apache.rocketmq.acl.plain.PlainAccessResource)",
      "320": "PlainPermissionManager::::checkPerm(org.apache.rocketmq.acl.plain.PlainAccessResource,org.apache.rocketmq.acl.plain.PlainAccessResource)",
      "321": "PlainPermissionManager::::checkPerm(org.apache.rocketmq.acl.plain.PlainAccessResource,org.apache.rocketmq.acl.plain.PlainAccessResource)",
      "322": "PlainPermissionManager::::checkPerm(org.apache.rocketmq.acl.plain.PlainAccessResource,org.apache.rocketmq.acl.plain.PlainAccessResource)",
      "323": "PlainPermissionManager::::checkPerm(org.apache.rocketmq.acl.plain.PlainAccessResource,org.apache.rocketmq.acl.plain.PlainAccessResource)",
      "324": "PlainPermissionManager::::checkPerm(org.apache.rocketmq.acl.plain.PlainAccessResource,org.apache.rocketmq.acl.plain.PlainAccessResource)",
      "325": "PlainPermissionManager::::checkPerm(org.apache.rocketmq.acl.plain.PlainAccessResource,org.apache.rocketmq.acl.plain.PlainAccessResource)",
      "326": "PlainPermissionManager::::checkPerm(org.apache.rocketmq.acl.plain.PlainAccessResource,org.apache.rocketmq.acl.plain.PlainAccessResource)",
      "327": "PlainPermissionManager::::checkPerm(org.apache.rocketmq.acl.plain.PlainAccessResource,org.apache.rocketmq.acl.plain.PlainAccessResource)",
      "328": "PlainPermissionManager::::checkPerm(org.apache.rocketmq.acl.plain.PlainAccessResource,org.apache.rocketmq.acl.plain.PlainAccessResource)",
      "329": "PlainPermissionManager::::checkPerm(org.apache.rocketmq.acl.plain.PlainAccessResource,org.apache.rocketmq.acl.plain.PlainAccessResource)",
      "330": "PlainPermissionManager::::checkPerm(org.apache.rocketmq.acl.plain.PlainAccessResource,org.apache.rocketmq.acl.plain.PlainAccessResource)",
      "331": "PlainPermissionManager::::checkPerm(org.apache.rocketmq.acl.plain.PlainAccessResource,org.apache.rocketmq.acl.plain.PlainAccessResource)",
      "332": "PlainPermissionManager::::checkPerm(org.apache.rocketmq.acl.plain.PlainAccessResource,org.apache.rocketmq.acl.plain.PlainAccessResource)",
      "333": "PlainPermissionManager::::checkPerm(org.apache.rocketmq.acl.plain.PlainAccessResource,org.apache.rocketmq.acl.plain.PlainAccessResource)",
      "334": "PlainPermissionManager::::checkPerm(org.apache.rocketmq.acl.plain.PlainAccessResource,org.apache.rocketmq.acl.plain.PlainAccessResource)",
      "335": "PlainPermissionManager::::checkPerm(org.apache.rocketmq.acl.plain.PlainAccessResource,org.apache.rocketmq.acl.plain.PlainAccessResource)",
      "336": "PlainPermissionManager::::checkPerm(org.apache.rocketmq.acl.plain.PlainAccessResource,org.apache.rocketmq.acl.plain.PlainAccessResource)",
      "337": "PlainPermissionManager::::checkPerm(org.apache.rocketmq.acl.plain.PlainAccessResource,org.apache.rocketmq.acl.plain.PlainAccessResource)",
      "338": "PlainPermissionManager::::checkPerm(org.apache.rocketmq.acl.plain.PlainAccessResource,org.apache.rocketmq.acl.plain.PlainAccessResource)",
      "339": "PlainPermissionManager::::checkPerm(org.apache.rocketmq.acl.plain.PlainAccessResource,org.apache.rocketmq.acl.plain.PlainAccessResource)",
      "340": "PlainPermissionManager::::checkPerm(org.apache.rocketmq.acl.plain.PlainAccessResource,org.apache.rocketmq.acl.plain.PlainAccessResource)",
      "341": "PlainPermissionManager::::checkPerm(org.apache.rocketmq.acl.plain.PlainAccessResource,org.apache.rocketmq.acl.plain.PlainAccessResource)",
      "342": "PlainPermissionManager::::checkPerm(org.apache.rocketmq.acl.plain.PlainAccessResource,org.apache.rocketmq.acl.plain.PlainAccessResource)",
      "343": "PlainPermissionManager::::checkPerm(org.apache.rocketmq.acl.plain.PlainAccessResource,org.apache.rocketmq.acl.plain.PlainAccessResource)",
      "344": "PlainPermissionManager::::checkPerm(org.apache.rocketmq.acl.plain.PlainAccessResource,org.apache.rocketmq.acl.plain.PlainAccessResource)",
      "345": "PlainPermissionManager::::checkPerm(org.apache.rocketmq.acl.plain.PlainAccessResource,org.apache.rocketmq.acl.plain.PlainAccessResource)",
      "346": "PlainPermissionManager::::checkPerm(org.apache.rocketmq.acl.plain.PlainAccessResource,org.apache.rocketmq.acl.plain.PlainAccessResource)",
      "347": "PlainPermissionManager::::checkPerm(org.apache.rocketmq.acl.plain.PlainAccessResource,org.apache.rocketmq.acl.plain.PlainAccessResource)",
      "348": "PlainPermissionManager::::checkPerm(org.apache.rocketmq.acl.plain.PlainAccessResource,org.apache.rocketmq.acl.plain.PlainAccessResource)",
      "350": "PlainPermissionManager::::clearPermissionInfo()",
      "351": "PlainPermissionManager::::clearPermissionInfo()",
      "352": "PlainPermissionManager::::clearPermissionInfo()",
      "353": "PlainPermissionManager::::clearPermissionInfo()",
      "383": "PlainPermissionManager::::validate(org.apache.rocketmq.acl.plain.PlainAccessResource)",
      "384": "PlainPermissionManager::::validate(org.apache.rocketmq.acl.plain.PlainAccessResource)",
      "385": "PlainPermissionManager::::validate(org.apache.rocketmq.acl.plain.PlainAccessResource)",
      "386": "PlainPermissionManager::::validate(org.apache.rocketmq.acl.plain.PlainAccessResource)",
      "387": "PlainPermissionManager::::validate(org.apache.rocketmq.acl.plain.PlainAccessResource)",
      "388": "PlainPermissionManager::::validate(org.apache.rocketmq.acl.plain.PlainAccessResource)",
      "389": "PlainPermissionManager::::validate(org.apache.rocketmq.acl.plain.PlainAccessResource)",
      "390": "PlainPermissionManager::::validate(org.apache.rocketmq.acl.plain.PlainAccessResource)",
      "391": "PlainPermissionManager::::validate(org.apache.rocketmq.acl.plain.PlainAccessResource)",
      "392": "PlainPermissionManager::::validate(org.apache.rocketmq.acl.plain.PlainAccessResource)",
      "393": "PlainPermissionManager::::validate(org.apache.rocketmq.acl.plain.PlainAccessResource)",
      "394": "PlainPermissionManager::::validate(org.apache.rocketmq.acl.plain.PlainAccessResource)",
      "395": "PlainPermissionManager::::validate(org.apache.rocketmq.acl.plain.PlainAccessResource)",
      "396": "PlainPermissionManager::::validate(org.apache.rocketmq.acl.plain.PlainAccessResource)",
      "397": "PlainPermissionManager::::validate(org.apache.rocketmq.acl.plain.PlainAccessResource)",
      "398": "PlainPermissionManager::::validate(org.apache.rocketmq.acl.plain.PlainAccessResource)",
      "399": "PlainPermissionManager::::validate(org.apache.rocketmq.acl.plain.PlainAccessResource)",
      "400": "PlainPermissionManager::::validate(org.apache.rocketmq.acl.plain.PlainAccessResource)",
      "401": "PlainPermissionManager::::validate(org.apache.rocketmq.acl.plain.PlainAccessResource)",
      "402": "PlainPermissionManager::::validate(org.apache.rocketmq.acl.plain.PlainAccessResource)",
      "403": "PlainPermissionManager::::validate(org.apache.rocketmq.acl.plain.PlainAccessResource)",
      "404": "PlainPermissionManager::::validate(org.apache.rocketmq.acl.plain.PlainAccessResource)",
      "405": "PlainPermissionManager::::validate(org.apache.rocketmq.acl.plain.PlainAccessResource)",
      "406": "PlainPermissionManager::::validate(org.apache.rocketmq.acl.plain.PlainAccessResource)",
      "407": "PlainPermissionManager::::validate(org.apache.rocketmq.acl.plain.PlainAccessResource)",
      "408": "PlainPermissionManager::::validate(org.apache.rocketmq.acl.plain.PlainAccessResource)",
      "409": "PlainPermissionManager::::validate(org.apache.rocketmq.acl.plain.PlainAccessResource)",
      "410": "PlainPermissionManager::::validate(org.apache.rocketmq.acl.plain.PlainAccessResource)",
      "411": "PlainPermissionManager::::validate(org.apache.rocketmq.acl.plain.PlainAccessResource)",
      "412": "PlainPermissionManager::::validate(org.apache.rocketmq.acl.plain.PlainAccessResource)",
      "413": "PlainPermissionManager::::validate(org.apache.rocketmq.acl.plain.PlainAccessResource)",
      "414": "PlainPermissionManager::::validate(org.apache.rocketmq.acl.plain.PlainAccessResource)",
      "416": "PlainPermissionManager::::isWatchStart()",
      "417": "PlainPermissionManager::::isWatchStart()",
      "418": "PlainPermissionManager::::isWatchStart()"
    },
    "test_reverse_method_lines_dic": {
      "47": "PlainPermissionManagerTest::::init()",
      "48": "PlainPermissionManagerTest::::init()",
      "49": "PlainPermissionManagerTest::::init()",
      "50": "PlainPermissionManagerTest::::init()",
      "51": "PlainPermissionManagerTest::::init()",
      "52": "PlainPermissionManagerTest::::init()",
      "53": "PlainPermissionManagerTest::::init()",
      "54": "PlainPermissionManagerTest::::init()",
      "55": "PlainPermissionManagerTest::::init()",
      "56": "PlainPermissionManagerTest::::init()",
      "57": "PlainPermissionManagerTest::::init()",
      "58": "PlainPermissionManagerTest::::init()",
      "59": "PlainPermissionManagerTest::::init()",
      "60": "PlainPermissionManagerTest::::init()",
      "61": "PlainPermissionManagerTest::::init()",
      "62": "PlainPermissionManagerTest::::init()",
      "63": "PlainPermissionManagerTest::::init()",
      "64": "PlainPermissionManagerTest::::init()",
      "65": "PlainPermissionManagerTest::::init()",
      "66": "PlainPermissionManagerTest::::init()",
      "67": "PlainPermissionManagerTest::::init()",
      "68": "PlainPermissionManagerTest::::init()",
      "69": "PlainPermissionManagerTest::::init()",
      "70": "PlainPermissionManagerTest::::init()",
      "72": "PlainPermissionManagerTest::::clonePlainAccessResource(byte)",
      "73": "PlainPermissionManagerTest::::clonePlainAccessResource(byte)",
      "74": "PlainPermissionManagerTest::::clonePlainAccessResource(byte)",
      "75": "PlainPermissionManagerTest::::clonePlainAccessResource(byte)",
      "76": "PlainPermissionManagerTest::::clonePlainAccessResource(byte)",
      "77": "PlainPermissionManagerTest::::clonePlainAccessResource(byte)",
      "78": "PlainPermissionManagerTest::::clonePlainAccessResource(byte)",
      "79": "PlainPermissionManagerTest::::clonePlainAccessResource(byte)",
      "80": "PlainPermissionManagerTest::::clonePlainAccessResource(byte)",
      "81": "PlainPermissionManagerTest::::clonePlainAccessResource(byte)",
      "82": "PlainPermissionManagerTest::::clonePlainAccessResource(byte)",
      "83": "PlainPermissionManagerTest::::clonePlainAccessResource(byte)",
      "84": "PlainPermissionManagerTest::::clonePlainAccessResource(byte)",
      "85": "PlainPermissionManagerTest::::clonePlainAccessResource(byte)",
      "86": "PlainPermissionManagerTest::::clonePlainAccessResource(byte)",
      "87": "PlainPermissionManagerTest::::clonePlainAccessResource(byte)",
      "88": "PlainPermissionManagerTest::::clonePlainAccessResource(byte)",
      "89": "PlainPermissionManagerTest::::clonePlainAccessResource(byte)",
      "91": "PlainPermissionManagerTest::::buildPlainAccessResourceTest()",
      "92": "PlainPermissionManagerTest::::buildPlainAccessResourceTest()",
      "93": "PlainPermissionManagerTest::::buildPlainAccessResourceTest()",
      "94": "PlainPermissionManagerTest::::buildPlainAccessResourceTest()",
      "95": "PlainPermissionManagerTest::::buildPlainAccessResourceTest()",
      "96": "PlainPermissionManagerTest::::buildPlainAccessResourceTest()",
      "97": "PlainPermissionManagerTest::::buildPlainAccessResourceTest()",
      "98": "PlainPermissionManagerTest::::buildPlainAccessResourceTest()",
      "99": "PlainPermissionManagerTest::::buildPlainAccessResourceTest()",
      "100": "PlainPermissionManagerTest::::buildPlainAccessResourceTest()",
      "101": "PlainPermissionManagerTest::::buildPlainAccessResourceTest()",
      "102": "PlainPermissionManagerTest::::buildPlainAccessResourceTest()",
      "103": "PlainPermissionManagerTest::::buildPlainAccessResourceTest()",
      "104": "PlainPermissionManagerTest::::buildPlainAccessResourceTest()",
      "105": "PlainPermissionManagerTest::::buildPlainAccessResourceTest()",
      "106": "PlainPermissionManagerTest::::buildPlainAccessResourceTest()",
      "107": "PlainPermissionManagerTest::::buildPlainAccessResourceTest()",
      "108": "PlainPermissionManagerTest::::buildPlainAccessResourceTest()",
      "109": "PlainPermissionManagerTest::::buildPlainAccessResourceTest()",
      "110": "PlainPermissionManagerTest::::buildPlainAccessResourceTest()",
      "111": "PlainPermissionManagerTest::::buildPlainAccessResourceTest()",
      "112": "PlainPermissionManagerTest::::buildPlainAccessResourceTest()",
      "113": "PlainPermissionManagerTest::::buildPlainAccessResourceTest()",
      "114": "PlainPermissionManagerTest::::buildPlainAccessResourceTest()",
      "115": "PlainPermissionManagerTest::::buildPlainAccessResourceTest()",
      "116": "PlainPermissionManagerTest::::buildPlainAccessResourceTest()",
      "117": "PlainPermissionManagerTest::::buildPlainAccessResourceTest()",
      "118": "PlainPermissionManagerTest::::buildPlainAccessResourceTest()",
      "119": "PlainPermissionManagerTest::::buildPlainAccessResourceTest()",
      "120": "PlainPermissionManagerTest::::buildPlainAccessResourceTest()",
      "121": "PlainPermissionManagerTest::::buildPlainAccessResourceTest()",
      "122": "PlainPermissionManagerTest::::buildPlainAccessResourceTest()",
      "123": "PlainPermissionManagerTest::::buildPlainAccessResourceTest()",
      "124": "PlainPermissionManagerTest::::buildPlainAccessResourceTest()",
      "125": "PlainPermissionManagerTest::::buildPlainAccessResourceTest()",
      "126": "PlainPermissionManagerTest::::buildPlainAccessResourceTest()",
      "127": "PlainPermissionManagerTest::::buildPlainAccessResourceTest()",
      "128": "PlainPermissionManagerTest::::buildPlainAccessResourceTest()",
      "129": "PlainPermissionManagerTest::::buildPlainAccessResourceTest()",
      "130": "PlainPermissionManagerTest::::buildPlainAccessResourceTest()",
      "131": "PlainPermissionManagerTest::::buildPlainAccessResourceTest()",
      "132": "PlainPermissionManagerTest::::buildPlainAccessResourceTest()",
      "133": "PlainPermissionManagerTest::::buildPlainAccessResourceTest()",
      "134": "PlainPermissionManagerTest::::buildPlainAccessResourceTest()",
      "135": "PlainPermissionManagerTest::::buildPlainAccessResourceTest()",
      "137": "PlainPermissionManagerTest::::checkPermAdmin()",
      "138": "PlainPermissionManagerTest::::checkPermAdmin()",
      "139": "PlainPermissionManagerTest::::checkPermAdmin()",
      "140": "PlainPermissionManagerTest::::checkPermAdmin()",
      "141": "PlainPermissionManagerTest::::checkPermAdmin()",
      "142": "PlainPermissionManagerTest::::checkPermAdmin()",
      "144": "PlainPermissionManagerTest::::checkPerm()",
      "145": "PlainPermissionManagerTest::::checkPerm()",
      "146": "PlainPermissionManagerTest::::checkPerm()",
      "147": "PlainPermissionManagerTest::::checkPerm()",
      "148": "PlainPermissionManagerTest::::checkPerm()",
      "149": "PlainPermissionManagerTest::::checkPerm()",
      "150": "PlainPermissionManagerTest::::checkPerm()",
      "151": "PlainPermissionManagerTest::::checkPerm()",
      "152": "PlainPermissionManagerTest::::checkPerm()",
      "153": "PlainPermissionManagerTest::::checkPerm()",
      "154": "PlainPermissionManagerTest::::checkPerm()",
      "155": "PlainPermissionManagerTest::::checkPerm()",
      "156": "PlainPermissionManagerTest::::checkPerm()",
      "157": "PlainPermissionManagerTest::::checkPerm()",
      "158": "PlainPermissionManagerTest::::checkPerm()",
      "159": "PlainPermissionManagerTest::::checkPerm()",
      "160": "PlainPermissionManagerTest::::checkErrorPermDefaultValueNotMatch()",
      "161": "PlainPermissionManagerTest::::checkErrorPermDefaultValueNotMatch()",
      "162": "PlainPermissionManagerTest::::checkErrorPermDefaultValueNotMatch()",
      "163": "PlainPermissionManagerTest::::checkErrorPermDefaultValueNotMatch()",
      "164": "PlainPermissionManagerTest::::checkErrorPermDefaultValueNotMatch()",
      "165": "PlainPermissionManagerTest::::checkErrorPermDefaultValueNotMatch()",
      "166": "PlainPermissionManagerTest::::checkErrorPermDefaultValueNotMatch()",
      "167": "PlainPermissionManagerTest::::accountNullTest()",
      "168": "PlainPermissionManagerTest::::accountNullTest()",
      "169": "PlainPermissionManagerTest::::accountNullTest()",
      "170": "PlainPermissionManagerTest::::accountNullTest()",
      "171": "PlainPermissionManagerTest::::accountNullTest()",
      "173": "PlainPermissionManagerTest::::accountThanTest()",
      "174": "PlainPermissionManagerTest::::accountThanTest()",
      "175": "PlainPermissionManagerTest::::accountThanTest()",
      "176": "PlainPermissionManagerTest::::accountThanTest()",
      "177": "PlainPermissionManagerTest::::accountThanTest()",
      "179": "PlainPermissionManagerTest::::passWordtNullTest()",
      "180": "PlainPermissionManagerTest::::passWordtNullTest()",
      "181": "PlainPermissionManagerTest::::passWordtNullTest()",
      "182": "PlainPermissionManagerTest::::passWordtNullTest()",
      "183": "PlainPermissionManagerTest::::passWordtNullTest()",
      "185": "PlainPermissionManagerTest::::passWordThanTest()",
      "186": "PlainPermissionManagerTest::::passWordThanTest()",
      "187": "PlainPermissionManagerTest::::passWordThanTest()",
      "188": "PlainPermissionManagerTest::::passWordThanTest()",
      "189": "PlainPermissionManagerTest::::passWordThanTest()",
      "191": "PlainPermissionManagerTest::::testPlainAclPlugEngineInit()",
      "192": "PlainPermissionManagerTest::::testPlainAclPlugEngineInit()",
      "193": "PlainPermissionManagerTest::::testPlainAclPlugEngineInit()",
      "194": "PlainPermissionManagerTest::::testPlainAclPlugEngineInit()",
      "195": "PlainPermissionManagerTest::::testPlainAclPlugEngineInit()",
      "197": "PlainPermissionManagerTest::::cleanAuthenticationInfoTest()",
      "198": "PlainPermissionManagerTest::::cleanAuthenticationInfoTest()",
      "199": "PlainPermissionManagerTest::::cleanAuthenticationInfoTest()",
      "200": "PlainPermissionManagerTest::::cleanAuthenticationInfoTest()",
      "201": "PlainPermissionManagerTest::::cleanAuthenticationInfoTest()",
      "202": "PlainPermissionManagerTest::::cleanAuthenticationInfoTest()",
      "203": "PlainPermissionManagerTest::::cleanAuthenticationInfoTest()",
      "204": "PlainPermissionManagerTest::::cleanAuthenticationInfoTest()",
      "205": "PlainPermissionManagerTest::::cleanAuthenticationInfoTest()",
      "206": "PlainPermissionManagerTest::::cleanAuthenticationInfoTest()",
      "207": "PlainPermissionManagerTest::::cleanAuthenticationInfoTest()",
      "208": "PlainPermissionManagerTest::::cleanAuthenticationInfoTest()",
      "210": "PlainPermissionManagerTest::::isWatchStartTest()",
      "211": "PlainPermissionManagerTest::::isWatchStartTest()",
      "212": "PlainPermissionManagerTest::::isWatchStartTest()",
      "213": "PlainPermissionManagerTest::::isWatchStartTest()",
      "214": "PlainPermissionManagerTest::::isWatchStartTest()",
      "215": "PlainPermissionManagerTest::::isWatchStartTest()",
      "216": "PlainPermissionManagerTest::::isWatchStartTest()",
      "217": "PlainPermissionManagerTest::::isWatchStartTest()",
      "220": "PlainPermissionManagerTest::::testWatch()",
      "221": "PlainPermissionManagerTest::::testWatch()",
      "222": "PlainPermissionManagerTest::::testWatch()",
      "223": "PlainPermissionManagerTest::::testWatch()",
      "224": "PlainPermissionManagerTest::::testWatch()",
      "225": "PlainPermissionManagerTest::::testWatch()",
      "226": "PlainPermissionManagerTest::::testWatch()",
      "227": "PlainPermissionManagerTest::::testWatch()",
      "228": "PlainPermissionManagerTest::::testWatch()",
      "229": "PlainPermissionManagerTest::::testWatch()",
      "230": "PlainPermissionManagerTest::::testWatch()",
      "231": "PlainPermissionManagerTest::::testWatch()",
      "232": "PlainPermissionManagerTest::::testWatch()",
      "233": "PlainPermissionManagerTest::::testWatch()",
      "234": "PlainPermissionManagerTest::::testWatch()",
      "235": "PlainPermissionManagerTest::::testWatch()",
      "236": "PlainPermissionManagerTest::::testWatch()",
      "237": "PlainPermissionManagerTest::::testWatch()",
      "238": "PlainPermissionManagerTest::::testWatch()",
      "239": "PlainPermissionManagerTest::::testWatch()",
      "240": "PlainPermissionManagerTest::::testWatch()",
      "241": "PlainPermissionManagerTest::::testWatch()",
      "242": "PlainPermissionManagerTest::::testWatch()",
      "243": "PlainPermissionManagerTest::::testWatch()",
      "244": "PlainPermissionManagerTest::::testWatch()",
      "245": "PlainPermissionManagerTest::::testWatch()",
      "246": "PlainPermissionManagerTest::::testWatch()",
      "247": "PlainPermissionManagerTest::::testWatch()",
      "248": "PlainPermissionManagerTest::::testWatch()",
      "249": "PlainPermissionManagerTest::::testWatch()",
      "250": "PlainPermissionManagerTest::::testWatch()",
      "251": "PlainPermissionManagerTest::::testWatch()",
      "252": "PlainPermissionManagerTest::::testWatch()",
      "253": "PlainPermissionManagerTest::::testWatch()",
      "254": "PlainPermissionManagerTest::::testWatch()",
      "255": "PlainPermissionManagerTest::::testWatch()",
      "256": "PlainPermissionManagerTest::::testWatch()",
      "257": "PlainPermissionManagerTest::::testWatch()",
      "258": "PlainPermissionManagerTest::::testWatch()",
      "259": "PlainPermissionManagerTest::::testWatch()",
      "260": "PlainPermissionManagerTest::::testWatch()",
      "261": "PlainPermissionManagerTest::::testWatch()",
      "262": "PlainPermissionManagerTest::::testWatch()",
      "263": "PlainPermissionManagerTest::::testWatch()",
      "264": "PlainPermissionManagerTest::::testWatch()",
      "265": "PlainPermissionManagerTest::::testWatch()",
      "266": "PlainPermissionManagerTest::::testWatch()",
      "267": "PlainPermissionManagerTest::::testWatch()",
      "268": "PlainPermissionManagerTest::::testWatch()",
      "269": "PlainPermissionManagerTest::::testWatch()",
      "270": "PlainPermissionManagerTest::::testWatch()",
      "271": "PlainPermissionManagerTest::::testWatch()",
      "272": "PlainPermissionManagerTest::::testWatch()",
      "274": "PlainPermissionManagerTest::::initializeTest()",
      "275": "PlainPermissionManagerTest::::initializeTest()",
      "276": "PlainPermissionManagerTest::::initializeTest()",
      "277": "PlainPermissionManagerTest::::initializeTest()",
      "278": "PlainPermissionManagerTest::::initializeTest()",
      "279": "PlainPermissionManagerTest::::initializeTest()"
    },
    "tests": [
      {
        "test_lines": [
          91,
          135
        ],
        "covered_lines": [
          44,
          48,
          49,
          51,
          53,
          55,
          57,
          61,
          63,
          64,
          65,
          66,
          70,
          71,
          73,
          75,
          78,
          79,
          80,
          81,
          82,
          83,
          87,
          88,
          89,
          90,
          91,
          92,
          93,
          97,
          98,
          104,
          105,
          106,
          297,
          298,
          305,
          306,
          307,
          310,
          311,
          356,
          357,
          358,
          359,
          364,
          365,
          366,
          367,
          369,
          371,
          372,
          374,
          375,
          377,
          378,
          380
        ]
      },
      {
        "test_lines": [
          137,
          142
        ],
        "covered_lines": [
          44,
          48,
          49,
          51,
          53,
          55,
          57,
          61,
          63,
          64,
          65,
          66,
          70,
          71,
          73,
          75,
          78,
          79,
          80,
          81,
          82,
          83,
          87,
          88,
          89,
          90,
          91,
          92,
          93,
          97,
          98,
          104,
          105,
          106,
          297,
          298,
          305,
          306,
          307,
          310,
          311,
          314,
          315,
          356,
          357,
          358,
          359,
          364,
          365,
          366,
          367,
          369,
          371,
          372,
          374,
          375,
          377,
          378,
          380
        ]
      },
      {
        "test_lines": [
          144,
          159
        ],
        "covered_lines": [
          44,
          48,
          49,
          51,
          53,
          55,
          57,
          61,
          63,
          64,
          65,
          66,
          70,
          71,
          73,
          75,
          78,
          79,
          80,
          81,
          82,
          83,
          87,
          88,
          89,
          90,
          91,
          92,
          93,
          97,
          98,
          104,
          105,
          106,
          297,
          298,
          305,
          306,
          307,
          310,
          311,
          314,
          317,
          318,
          320,
          325,
          330,
          331,
          332,
          333,
          335,
          344,
          347,
          348,
          356,
          357,
          358,
          359,
          364,
          365,
          366,
          367,
          369,
          371,
          372,
          374,
          375,
          377,
          378,
          380
        ]
      },
      {
        "test_lines": [
          160,
          166
        ],
        "covered_lines": [
          44,
          48,
          49,
          51,
          53,
          55,
          57,
          61,
          63,
          64,
          65,
          66,
          70,
          71,
          73,
          75,
          78,
          79,
          80,
          81,
          82,
          83,
          87,
          88,
          89,
          90,
          91,
          92,
          93,
          97,
          98,
          104,
          105,
          106,
          297,
          298,
          305,
          306,
          307,
          310,
          311,
          314,
          317,
          318,
          320,
          325,
          330,
          331,
          332,
          333,
          335,
          337,
          338,
          339,
          340,
          356,
          357,
          358,
          359,
          364,
          365,
          366,
          367,
          369,
          371,
          372,
          374,
          375,
          377,
          378,
          380
        ]
      },
      {
        "test_lines": [
          167,
          171
        ],
        "covered_lines": [
          44,
          48,
          49,
          51,
          53,
          55,
          57,
          61,
          63,
          64,
          65,
          66,
          70,
          71,
          73,
          75,
          78,
          79,
          80,
          81,
          82,
          83,
          87,
          88,
          89,
          90,
          91,
          92,
          93,
          97,
          98,
          104,
          105,
          106,
          297,
          298,
          305,
          306,
          307,
          310,
          311,
          356,
          357,
          358,
          359,
          360,
          362,
          364,
          365,
          366,
          367,
          369,
          371,
          372,
          374,
          375,
          377,
          378,
          380
        ]
      },
      {
        "test_lines": [
          173,
          177
        ],
        "covered_lines": [
          44,
          48,
          49,
          51,
          53,
          55,
          57,
          61,
          63,
          64,
          65,
          66,
          70,
          71,
          73,
          75,
          78,
          79,
          80,
          81,
          82,
          83,
          87,
          88,
          89,
          90,
          91,
          92,
          93,
          97,
          98,
          104,
          105,
          106,
          297,
          298,
          305,
          306,
          307,
          310,
          311,
          356,
          357,
          358,
          359,
          360,
          362,
          364,
          365,
          366,
          367,
          369,
          371,
          372,
          374,
          375,
          377,
          378,
          380
        ]
      },
      {
        "test_lines": [
          179,
          183
        ],
        "covered_lines": [
          44,
          48,
          49,
          51,
          53,
          55,
          57,
          61,
          63,
          64,
          65,
          66,
          70,
          71,
          73,
          75,
          78,
          79,
          80,
          81,
          82,
          83,
          87,
          88,
          89,
          90,
          91,
          92,
          93,
          97,
          98,
          104,
          105,
          106,
          297,
          298,
          305,
          306,
          307,
          310,
          311,
          356,
          357,
          358,
          359,
          360,
          362,
          364,
          365,
          366,
          367,
          369,
          371,
          372,
          374,
          375,
          377,
          378,
          380
        ]
      },
      {
        "test_lines": [
          185,
          189
        ],
        "covered_lines": [
          44,
          48,
          49,
          51,
          53,
          55,
          57,
          61,
          63,
          64,
          65,
          66,
          70,
          71,
          73,
          75,
          78,
          79,
          80,
          81,
          82,
          83,
          87,
          88,
          89,
          90,
          91,
          92,
          93,
          97,
          98,
          104,
          105,
          106,
          297,
          298,
          305,
          306,
          307,
          310,
          311,
          356,
          357,
          358,
          359,
          360,
          362,
          364,
          365,
          366,
          367,
          369,
          371,
          372,
          374,
          375,
          377,
          378,
          380
        ]
      },
      {
        "test_lines": [
          191,
          195
        ],
        "covered_lines": [
          44,
          48,
          49,
          51,
          53,
          55,
          57,
          61,
          63,
          64,
          65,
          66,
          70,
          71,
          73,
          75,
          76,
          78,
          79,
          80,
          81,
          82,
          83,
          87,
          88,
          89,
          90,
          91,
          92,
          93,
          97,
          98,
          104,
          105,
          106,
          297,
          298,
          305,
          306,
          307,
          310,
          311,
          356,
          357,
          358,
          359,
          364,
          365,
          366,
          367,
          369,
          371,
          372,
          374,
          375,
          377,
          378,
          380
        ]
      },
      {
        "test_lines": [
          197,
          208
        ],
        "covered_lines": [
          44,
          48,
          49,
          51,
          53,
          55,
          57,
          61,
          63,
          64,
          65,
          66,
          70,
          71,
          73,
          75,
          78,
          79,
          80,
          81,
          82,
          83,
          87,
          88,
          89,
          90,
          91,
          92,
          93,
          97,
          98,
          104,
          105,
          106,
          297,
          298,
          305,
          306,
          307,
          310,
          311,
          351,
          352,
          353,
          356,
          357,
          358,
          359,
          364,
          365,
          366,
          367,
          369,
          371,
          372,
          374,
          375,
          377,
          378,
          380
        ]
      },
      {
        "test_lines": [
          210,
          217
        ],
        "covered_lines": [
          44,
          48,
          49,
          51,
          53,
          55,
          57,
          61,
          63,
          64,
          65,
          66,
          70,
          71,
          73,
          75,
          78,
          79,
          80,
          81,
          82,
          83,
          87,
          88,
          89,
          90,
          91,
          92,
          93,
          97,
          98,
          104,
          105,
          106,
          297,
          298,
          305,
          306,
          307,
          310,
          311,
          356,
          357,
          358,
          359,
          364,
          365,
          366,
          367,
          369,
          371,
          372,
          374,
          375,
          377,
          378,
          380,
          417
        ]
      },
      {
        "test_lines": [
          220,
          272
        ],
        "covered_lines": [
          44,
          48,
          49,
          51,
          53,
          55,
          57,
          61,
          63,
          64,
          65,
          66,
          70,
          71,
          73,
          75,
          78,
          79,
          80,
          81,
          82,
          83,
          87,
          88,
          89,
          90,
          91,
          92,
          93,
          97,
          98,
          104,
          105,
          106,
          297,
          298,
          301,
          302,
          303,
          305,
          306,
          307,
          310,
          311,
          356,
          357,
          358,
          359,
          364,
          365,
          366,
          367,
          369,
          371,
          372,
          374,
          375,
          377,
          378,
          380,
          417
        ]
      },
      {
        "test_lines": [
          274,
          279
        ],
        "covered_lines": [
          44,
          48,
          49,
          51,
          53,
          55,
          57,
          61,
          63,
          64,
          65,
          66,
          70,
          71,
          73,
          75,
          76,
          78,
          79,
          80,
          81,
          82,
          83,
          87,
          88,
          89,
          90,
          91,
          92,
          93,
          97,
          98,
          104,
          105,
          106,
          297,
          298,
          305,
          306,
          307,
          310,
          311,
          356,
          357,
          358,
          359,
          364,
          365,
          366,
          367,
          369,
          371,
          372,
          374,
          375,
          377,
          378,
          380
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/RocketMQC/acl/src/main/java/org/apache/rocketmq/acl/common/AclSigner.java": {
    "class_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.acl.common;\n",
      "\n",
      "import java.nio.charset.Charset;\n",
      "import javax.crypto.Mac;\n",
      "import javax.crypto.spec.SecretKeySpec;\n",
      "import org.apache.commons.codec.binary.Base64;\n",
      "import org.apache.rocketmq.common.constant.LoggerName;\n",
      "import org.apache.rocketmq.logging.InternalLogger;\n",
      "import org.apache.rocketmq.logging.InternalLoggerFactory;\n",
      "\n",
      "public class AclSigner {\n",
      "    public static final Charset DEFAULT_CHARSET = Charset.forName(\"UTF-8\");\n",
      "    public static final SigningAlgorithm DEFAULT_ALGORITHM = SigningAlgorithm.HmacSHA1;\n",
      "    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.ROCKETMQ_AUTHORIZE_LOGGER_NAME);\n",
      "    private static final int CAL_SIGNATURE_FAILED = 10015;\n",
      "    private static final String CAL_SIGNATURE_FAILED_MSG = \"[%s:signature-failed] unable to calculate a request signature. error=%s\";\n",
      "\n",
      "    public static String calSignature(String data, String key) throws AclException {\n",
      "        return calSignature(data, key, DEFAULT_ALGORITHM, DEFAULT_CHARSET);\n",
      "    }\n",
      "\n",
      "    public static String calSignature(String data, String key, SigningAlgorithm algorithm,\n",
      "        Charset charset) throws AclException {\n",
      "        return signAndBase64Encode(data, key, algorithm, charset);\n",
      "    }\n",
      "\n",
      "    private static String signAndBase64Encode(String data, String key, SigningAlgorithm algorithm, Charset charset)\n",
      "        throws AclException {\n",
      "        try {\n",
      "            byte[] signature = sign(data.getBytes(charset), key.getBytes(charset), algorithm);\n",
      "            return new String(Base64.encodeBase64(signature), DEFAULT_CHARSET);\n",
      "        } catch (Exception e) {\n",
      "            String message = String.format(CAL_SIGNATURE_FAILED_MSG, CAL_SIGNATURE_FAILED, e.getMessage());\n",
      "            log.error(message, e);\n",
      "            throw new AclException(\"CAL_SIGNATURE_FAILED\", CAL_SIGNATURE_FAILED, message, e);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    private static byte[] sign(byte[] data, byte[] key, SigningAlgorithm algorithm) throws AclException {\n",
      "        try {\n",
      "            Mac mac = Mac.getInstance(algorithm.toString());\n",
      "            mac.init(new SecretKeySpec(key, algorithm.toString()));\n",
      "            return mac.doFinal(data);\n",
      "        } catch (Exception e) {\n",
      "            String message = String.format(CAL_SIGNATURE_FAILED_MSG, CAL_SIGNATURE_FAILED, e.getMessage());\n",
      "            log.error(message, e);\n",
      "            throw new AclException(\"CAL_SIGNATURE_FAILED\", CAL_SIGNATURE_FAILED, message, e);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    public static String calSignature(byte[] data, String key) throws AclException {\n",
      "        return calSignature(data, key, DEFAULT_ALGORITHM, DEFAULT_CHARSET);\n",
      "    }\n",
      "\n",
      "    public static String calSignature(byte[] data, String key, SigningAlgorithm algorithm,\n",
      "        Charset charset) throws AclException {\n",
      "        return signAndBase64Encode(data, key, algorithm, charset);\n",
      "    }\n",
      "\n",
      "    private static String signAndBase64Encode(byte[] data, String key, SigningAlgorithm algorithm, Charset charset)\n",
      "        throws AclException {\n",
      "        try {\n",
      "            byte[] signature = sign(data, key.getBytes(charset), algorithm);\n",
      "            return new String(Base64.encodeBase64(signature), DEFAULT_CHARSET);\n",
      "        } catch (Exception e) {\n",
      "            String message = String.format(CAL_SIGNATURE_FAILED_MSG, CAL_SIGNATURE_FAILED, e.getMessage());\n",
      "            log.error(message, e);\n",
      "            throw new AclException(\"CAL_SIGNATURE_FAILED\", CAL_SIGNATURE_FAILED, message, e);\n",
      "        }\n",
      "    }\n",
      "\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.acl.common;\n",
      "\n",
      "import org.junit.Test;\n",
      "\n",
      "public class AclSignerTest {\n",
      "\n",
      "    @Test(expected = Exception.class)\n",
      "    public void calSignatureExceptionTest(){\n",
      "        AclSigner.calSignature(new byte[]{},\"\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void calSignatureTest(){\n",
      "        AclSigner.calSignature(\"RocketMQ\",\"12345678\");\n",
      "        AclSigner.calSignature(\"RocketMQ\".getBytes(),\"12345678\");\n",
      "    }\n",
      "\n",
      "}\n"
    ],
    "method_lines_dic": {
      "AclSigner::::calSignature(java.lang.String,java.lang.String)": [
        34,
        36
      ],
      "AclSigner::::calSignature(java.lang.String,java.lang.String,org.apache.rocketmq.acl.common.SigningAlgorithm,java.nio.charset.Charset)": [
        38,
        41
      ],
      "AclSigner::::signAndBase64Encode(java.lang.String,java.lang.String,org.apache.rocketmq.acl.common.SigningAlgorithm,java.nio.charset.Charset)": [
        43,
        53
      ],
      "AclSigner::::sign(byte[],byte[],org.apache.rocketmq.acl.common.SigningAlgorithm)": [
        55,
        65
      ],
      "AclSigner::::calSignature(byte[],java.lang.String)": [
        67,
        69
      ],
      "AclSigner::::calSignature(byte[],java.lang.String,org.apache.rocketmq.acl.common.SigningAlgorithm,java.nio.charset.Charset)": [
        71,
        74
      ],
      "AclSigner::::signAndBase64Encode(byte[],java.lang.String,org.apache.rocketmq.acl.common.SigningAlgorithm,java.nio.charset.Charset)": [
        76,
        86
      ]
    },
    "test_method_lines_dic": {
      "AclSignerTest::::calSignatureExceptionTest()": [
        23,
        26
      ],
      "AclSignerTest::::calSignatureTest()": [
        28,
        32
      ]
    },
    "reverse_method_lines_dic": {
      "34": "AclSigner::::calSignature(java.lang.String,java.lang.String)",
      "35": "AclSigner::::calSignature(java.lang.String,java.lang.String)",
      "36": "AclSigner::::calSignature(java.lang.String,java.lang.String)",
      "38": "AclSigner::::calSignature(java.lang.String,java.lang.String,org.apache.rocketmq.acl.common.SigningAlgorithm,java.nio.charset.Charset)",
      "39": "AclSigner::::calSignature(java.lang.String,java.lang.String,org.apache.rocketmq.acl.common.SigningAlgorithm,java.nio.charset.Charset)",
      "40": "AclSigner::::calSignature(java.lang.String,java.lang.String,org.apache.rocketmq.acl.common.SigningAlgorithm,java.nio.charset.Charset)",
      "41": "AclSigner::::calSignature(java.lang.String,java.lang.String,org.apache.rocketmq.acl.common.SigningAlgorithm,java.nio.charset.Charset)",
      "43": "AclSigner::::signAndBase64Encode(java.lang.String,java.lang.String,org.apache.rocketmq.acl.common.SigningAlgorithm,java.nio.charset.Charset)",
      "44": "AclSigner::::signAndBase64Encode(java.lang.String,java.lang.String,org.apache.rocketmq.acl.common.SigningAlgorithm,java.nio.charset.Charset)",
      "45": "AclSigner::::signAndBase64Encode(java.lang.String,java.lang.String,org.apache.rocketmq.acl.common.SigningAlgorithm,java.nio.charset.Charset)",
      "46": "AclSigner::::signAndBase64Encode(java.lang.String,java.lang.String,org.apache.rocketmq.acl.common.SigningAlgorithm,java.nio.charset.Charset)",
      "47": "AclSigner::::signAndBase64Encode(java.lang.String,java.lang.String,org.apache.rocketmq.acl.common.SigningAlgorithm,java.nio.charset.Charset)",
      "48": "AclSigner::::signAndBase64Encode(java.lang.String,java.lang.String,org.apache.rocketmq.acl.common.SigningAlgorithm,java.nio.charset.Charset)",
      "49": "AclSigner::::signAndBase64Encode(java.lang.String,java.lang.String,org.apache.rocketmq.acl.common.SigningAlgorithm,java.nio.charset.Charset)",
      "50": "AclSigner::::signAndBase64Encode(java.lang.String,java.lang.String,org.apache.rocketmq.acl.common.SigningAlgorithm,java.nio.charset.Charset)",
      "51": "AclSigner::::signAndBase64Encode(java.lang.String,java.lang.String,org.apache.rocketmq.acl.common.SigningAlgorithm,java.nio.charset.Charset)",
      "52": "AclSigner::::signAndBase64Encode(java.lang.String,java.lang.String,org.apache.rocketmq.acl.common.SigningAlgorithm,java.nio.charset.Charset)",
      "53": "AclSigner::::signAndBase64Encode(java.lang.String,java.lang.String,org.apache.rocketmq.acl.common.SigningAlgorithm,java.nio.charset.Charset)",
      "55": "AclSigner::::sign(byte[],byte[],org.apache.rocketmq.acl.common.SigningAlgorithm)",
      "56": "AclSigner::::sign(byte[],byte[],org.apache.rocketmq.acl.common.SigningAlgorithm)",
      "57": "AclSigner::::sign(byte[],byte[],org.apache.rocketmq.acl.common.SigningAlgorithm)",
      "58": "AclSigner::::sign(byte[],byte[],org.apache.rocketmq.acl.common.SigningAlgorithm)",
      "59": "AclSigner::::sign(byte[],byte[],org.apache.rocketmq.acl.common.SigningAlgorithm)",
      "60": "AclSigner::::sign(byte[],byte[],org.apache.rocketmq.acl.common.SigningAlgorithm)",
      "61": "AclSigner::::sign(byte[],byte[],org.apache.rocketmq.acl.common.SigningAlgorithm)",
      "62": "AclSigner::::sign(byte[],byte[],org.apache.rocketmq.acl.common.SigningAlgorithm)",
      "63": "AclSigner::::sign(byte[],byte[],org.apache.rocketmq.acl.common.SigningAlgorithm)",
      "64": "AclSigner::::sign(byte[],byte[],org.apache.rocketmq.acl.common.SigningAlgorithm)",
      "65": "AclSigner::::sign(byte[],byte[],org.apache.rocketmq.acl.common.SigningAlgorithm)",
      "67": "AclSigner::::calSignature(byte[],java.lang.String)",
      "68": "AclSigner::::calSignature(byte[],java.lang.String)",
      "69": "AclSigner::::calSignature(byte[],java.lang.String)",
      "71": "AclSigner::::calSignature(byte[],java.lang.String,org.apache.rocketmq.acl.common.SigningAlgorithm,java.nio.charset.Charset)",
      "72": "AclSigner::::calSignature(byte[],java.lang.String,org.apache.rocketmq.acl.common.SigningAlgorithm,java.nio.charset.Charset)",
      "73": "AclSigner::::calSignature(byte[],java.lang.String,org.apache.rocketmq.acl.common.SigningAlgorithm,java.nio.charset.Charset)",
      "74": "AclSigner::::calSignature(byte[],java.lang.String,org.apache.rocketmq.acl.common.SigningAlgorithm,java.nio.charset.Charset)",
      "76": "AclSigner::::signAndBase64Encode(byte[],java.lang.String,org.apache.rocketmq.acl.common.SigningAlgorithm,java.nio.charset.Charset)",
      "77": "AclSigner::::signAndBase64Encode(byte[],java.lang.String,org.apache.rocketmq.acl.common.SigningAlgorithm,java.nio.charset.Charset)",
      "78": "AclSigner::::signAndBase64Encode(byte[],java.lang.String,org.apache.rocketmq.acl.common.SigningAlgorithm,java.nio.charset.Charset)",
      "79": "AclSigner::::signAndBase64Encode(byte[],java.lang.String,org.apache.rocketmq.acl.common.SigningAlgorithm,java.nio.charset.Charset)",
      "80": "AclSigner::::signAndBase64Encode(byte[],java.lang.String,org.apache.rocketmq.acl.common.SigningAlgorithm,java.nio.charset.Charset)",
      "81": "AclSigner::::signAndBase64Encode(byte[],java.lang.String,org.apache.rocketmq.acl.common.SigningAlgorithm,java.nio.charset.Charset)",
      "82": "AclSigner::::signAndBase64Encode(byte[],java.lang.String,org.apache.rocketmq.acl.common.SigningAlgorithm,java.nio.charset.Charset)",
      "83": "AclSigner::::signAndBase64Encode(byte[],java.lang.String,org.apache.rocketmq.acl.common.SigningAlgorithm,java.nio.charset.Charset)",
      "84": "AclSigner::::signAndBase64Encode(byte[],java.lang.String,org.apache.rocketmq.acl.common.SigningAlgorithm,java.nio.charset.Charset)",
      "85": "AclSigner::::signAndBase64Encode(byte[],java.lang.String,org.apache.rocketmq.acl.common.SigningAlgorithm,java.nio.charset.Charset)",
      "86": "AclSigner::::signAndBase64Encode(byte[],java.lang.String,org.apache.rocketmq.acl.common.SigningAlgorithm,java.nio.charset.Charset)"
    },
    "test_reverse_method_lines_dic": {
      "23": "AclSignerTest::::calSignatureExceptionTest()",
      "24": "AclSignerTest::::calSignatureExceptionTest()",
      "25": "AclSignerTest::::calSignatureExceptionTest()",
      "26": "AclSignerTest::::calSignatureExceptionTest()",
      "28": "AclSignerTest::::calSignatureTest()",
      "29": "AclSignerTest::::calSignatureTest()",
      "30": "AclSignerTest::::calSignatureTest()",
      "31": "AclSignerTest::::calSignatureTest()",
      "32": "AclSignerTest::::calSignatureTest()"
    },
    "tests": [
      {
        "test_lines": [
          23,
          26
        ],
        "covered_lines": [
          28,
          29,
          30,
          57,
          60,
          61,
          62,
          63,
          81,
          82,
          83,
          84
        ]
      },
      {
        "test_lines": [
          28,
          32
        ],
        "covered_lines": [
          28,
          29,
          30,
          35,
          40,
          46,
          47,
          57,
          58,
          59,
          68,
          73,
          79,
          80
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/RocketMQC/acl/src/main/java/org/apache/rocketmq/acl/common/SessionCredentials.java": {
    "class_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.acl.common;\n",
      "\n",
      "import java.io.File;\n",
      "import java.io.IOException;\n",
      "import java.nio.charset.Charset;\n",
      "import java.util.Properties;\n",
      "import org.apache.rocketmq.common.MixAll;\n",
      "\n",
      "public class SessionCredentials {\n",
      "    public static final Charset CHARSET = Charset.forName(\"UTF-8\");\n",
      "    public static final String ACCESS_KEY = \"AccessKey\";\n",
      "    public static final String SECRET_KEY = \"SecretKey\";\n",
      "    public static final String SIGNATURE = \"Signature\";\n",
      "    public static final String SECURITY_TOKEN = \"SecurityToken\";\n",
      "\n",
      "    public static final String KEY_FILE = System.getProperty(\"rocketmq.client.keyFile\",\n",
      "        System.getProperty(\"user.home\") + File.separator + \"key\");\n",
      "\n",
      "    private String accessKey;\n",
      "    private String secretKey;\n",
      "    private String securityToken;\n",
      "    private String signature;\n",
      "\n",
      "    public SessionCredentials() {\n",
      "        String keyContent = null;\n",
      "        try {\n",
      "            keyContent = MixAll.file2String(KEY_FILE);\n",
      "        } catch (IOException ignore) {\n",
      "        }\n",
      "        if (keyContent != null) {\n",
      "            Properties prop = MixAll.string2Properties(keyContent);\n",
      "            if (prop != null) {\n",
      "                this.updateContent(prop);\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    public SessionCredentials(String accessKey, String secretKey) {\n",
      "        this.accessKey = accessKey;\n",
      "        this.secretKey = secretKey;\n",
      "    }\n",
      "\n",
      "    public SessionCredentials(String accessKey, String secretKey, String securityToken) {\n",
      "        this(accessKey, secretKey);\n",
      "        this.securityToken = securityToken;\n",
      "    }\n",
      "\n",
      "    public void updateContent(Properties prop) {\n",
      "        {\n",
      "            String value = prop.getProperty(ACCESS_KEY);\n",
      "            if (value != null) {\n",
      "                this.accessKey = value.trim();\n",
      "            }\n",
      "        }\n",
      "        {\n",
      "            String value = prop.getProperty(SECRET_KEY);\n",
      "            if (value != null) {\n",
      "                this.secretKey = value.trim();\n",
      "            }\n",
      "        }\n",
      "        {\n",
      "            String value = prop.getProperty(SECURITY_TOKEN);\n",
      "            if (value != null) {\n",
      "                this.securityToken = value.trim();\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    public String getAccessKey() {\n",
      "        return accessKey;\n",
      "    }\n",
      "\n",
      "    public void setAccessKey(String accessKey) {\n",
      "        this.accessKey = accessKey;\n",
      "    }\n",
      "\n",
      "    public String getSecretKey() {\n",
      "        return secretKey;\n",
      "    }\n",
      "\n",
      "    public void setSecretKey(String secretKey) {\n",
      "        this.secretKey = secretKey;\n",
      "    }\n",
      "\n",
      "    public String getSignature() {\n",
      "        return signature;\n",
      "    }\n",
      "\n",
      "    public void setSignature(String signature) {\n",
      "        this.signature = signature;\n",
      "    }\n",
      "\n",
      "    public String getSecurityToken() {\n",
      "        return securityToken;\n",
      "    }\n",
      "\n",
      "    public void setSecurityToken(final String securityToken) {\n",
      "        this.securityToken = securityToken;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public int hashCode() {\n",
      "        final int prime = 31;\n",
      "        int result = 1;\n",
      "        result = prime * result + ((accessKey == null) ? 0 : accessKey.hashCode());\n",
      "        result = prime * result + ((secretKey == null) ? 0 : secretKey.hashCode());\n",
      "        result = prime * result + ((signature == null) ? 0 : signature.hashCode());\n",
      "        return result;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public boolean equals(Object obj) {\n",
      "        if (this == obj)\n",
      "            return true;\n",
      "        if (obj == null)\n",
      "            return false;\n",
      "        if (getClass() != obj.getClass())\n",
      "            return false;\n",
      "\n",
      "        SessionCredentials other = (SessionCredentials) obj;\n",
      "        if (accessKey == null) {\n",
      "            if (other.accessKey != null)\n",
      "                return false;\n",
      "        } else if (!accessKey.equals(other.accessKey))\n",
      "            return false;\n",
      "\n",
      "        if (secretKey == null) {\n",
      "            if (other.secretKey != null)\n",
      "                return false;\n",
      "        } else if (!secretKey.equals(other.secretKey))\n",
      "            return false;\n",
      "\n",
      "        if (signature == null) {\n",
      "            if (other.signature != null)\n",
      "                return false;\n",
      "        } else if (!signature.equals(other.signature))\n",
      "            return false;\n",
      "\n",
      "        return true;\n",
      "    }\n",
      "\n",
      "    @Override\n",
      "    public String toString() {\n",
      "        return \"SessionCredentials [accessKey=\" + accessKey + \", secretKey=\" + secretKey + \", signature=\"\n",
      "            + signature + \", SecurityToken=\" + securityToken + \"]\";\n",
      "    }\n",
      "}"
    ],
    "test_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.acl.common;\n",
      "\n",
      "import org.junit.Assert;\n",
      "import org.junit.Test;\n",
      "\n",
      "import java.util.Properties;\n",
      "\n",
      "public class SessionCredentialsTest {\n",
      "\n",
      "    @Test\n",
      "    public void equalsTest(){\n",
      "        SessionCredentials sessionCredentials=new SessionCredentials(\"RocketMQ\",\"12345678\");\n",
      "        sessionCredentials.setSecurityToken(\"abcd\");\n",
      "        SessionCredentials other=new SessionCredentials(\"RocketMQ\",\"12345678\",\"abcd\");\n",
      "        Assert.assertTrue(sessionCredentials.equals(other));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void updateContentTest(){\n",
      "        SessionCredentials sessionCredentials=new SessionCredentials();\n",
      "        Properties properties=new Properties();\n",
      "        properties.setProperty(SessionCredentials.ACCESS_KEY,\"RocketMQ\");\n",
      "        properties.setProperty(SessionCredentials.SECRET_KEY,\"12345678\");\n",
      "        properties.setProperty(SessionCredentials.SECURITY_TOKEN,\"abcd\");\n",
      "        sessionCredentials.updateContent(properties);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void SessionCredentialHashCodeTest(){\n",
      "        SessionCredentials sessionCredentials=new SessionCredentials();\n",
      "        Properties properties=new Properties();\n",
      "        properties.setProperty(SessionCredentials.ACCESS_KEY,\"RocketMQ\");\n",
      "        properties.setProperty(SessionCredentials.SECRET_KEY,\"12345678\");\n",
      "        properties.setProperty(SessionCredentials.SECURITY_TOKEN,\"abcd\");\n",
      "        sessionCredentials.updateContent(properties);\n",
      "        Assert.assertEquals(sessionCredentials.hashCode(),353652211);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void SessionCredentialEqualsTest(){\n",
      "        SessionCredentials sessionCredential1 =new SessionCredentials();\n",
      "        Properties properties1=new Properties();\n",
      "        properties1.setProperty(SessionCredentials.ACCESS_KEY,\"RocketMQ\");\n",
      "        properties1.setProperty(SessionCredentials.SECRET_KEY,\"12345678\");\n",
      "        properties1.setProperty(SessionCredentials.SECURITY_TOKEN,\"abcd\");\n",
      "        sessionCredential1.updateContent(properties1);\n",
      "\n",
      "        SessionCredentials sessionCredential2 =new SessionCredentials();\n",
      "        Properties properties2=new Properties();\n",
      "        properties2.setProperty(SessionCredentials.ACCESS_KEY,\"RocketMQ\");\n",
      "        properties2.setProperty(SessionCredentials.SECRET_KEY,\"12345678\");\n",
      "        properties2.setProperty(SessionCredentials.SECURITY_TOKEN,\"abcd\");\n",
      "        sessionCredential2.updateContent(properties2);\n",
      "\n",
      "        Assert.assertTrue(sessionCredential2.equals(sessionCredential1));\n",
      "        sessionCredential2.setSecretKey(\"1234567899\");\n",
      "        sessionCredential2.setSignature(\"1234567899\");\n",
      "        Assert.assertFalse(sessionCredential2.equals(sessionCredential1));\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void SessionCredentialToStringTest(){\n",
      "        SessionCredentials sessionCredential1 =new SessionCredentials();\n",
      "        Properties properties1=new Properties();\n",
      "        properties1.setProperty(SessionCredentials.ACCESS_KEY,\"RocketMQ\");\n",
      "        properties1.setProperty(SessionCredentials.SECRET_KEY,\"12345678\");\n",
      "        properties1.setProperty(SessionCredentials.SECURITY_TOKEN,\"abcd\");\n",
      "        sessionCredential1.updateContent(properties1);\n",
      "\n",
      "        Assert.assertEquals(sessionCredential1.toString(),\n",
      "            \"SessionCredentials [accessKey=RocketMQ, secretKey=12345678, signature=null, SecurityToken=abcd]\");\n",
      "    }\n",
      "\n",
      "\n",
      "}\n"
    ],
    "method_lines_dic": {
      "SessionCredentials::::updateContent(java.util.Properties)": [
        64,
        83
      ],
      "SessionCredentials::::getAccessKey()": [
        85,
        87
      ],
      "SessionCredentials::::setAccessKey(java.lang.String)": [
        89,
        91
      ],
      "SessionCredentials::::getSecretKey()": [
        93,
        95
      ],
      "SessionCredentials::::setSecretKey(java.lang.String)": [
        97,
        99
      ],
      "SessionCredentials::::getSignature()": [
        101,
        103
      ],
      "SessionCredentials::::setSignature(java.lang.String)": [
        105,
        107
      ],
      "SessionCredentials::::getSecurityToken()": [
        109,
        111
      ],
      "SessionCredentials::::setSecurityToken(java.lang.String)": [
        113,
        115
      ],
      "SessionCredentials::::hashCode()": [
        117,
        125
      ],
      "SessionCredentials::::equals(java.lang.Object)": [
        127,
        156
      ],
      "SessionCredentials::::toString()": [
        158,
        162
      ]
    },
    "test_method_lines_dic": {
      "SessionCredentialsTest::::equalsTest()": [
        26,
        32
      ],
      "SessionCredentialsTest::::updateContentTest()": [
        34,
        42
      ],
      "SessionCredentialsTest::::SessionCredentialHashCodeTest()": [
        44,
        53
      ],
      "SessionCredentialsTest::::SessionCredentialEqualsTest()": [
        55,
        75
      ],
      "SessionCredentialsTest::::SessionCredentialToStringTest()": [
        77,
        88
      ]
    },
    "reverse_method_lines_dic": {
      "64": "SessionCredentials::::updateContent(java.util.Properties)",
      "65": "SessionCredentials::::updateContent(java.util.Properties)",
      "66": "SessionCredentials::::updateContent(java.util.Properties)",
      "67": "SessionCredentials::::updateContent(java.util.Properties)",
      "68": "SessionCredentials::::updateContent(java.util.Properties)",
      "69": "SessionCredentials::::updateContent(java.util.Properties)",
      "70": "SessionCredentials::::updateContent(java.util.Properties)",
      "71": "SessionCredentials::::updateContent(java.util.Properties)",
      "72": "SessionCredentials::::updateContent(java.util.Properties)",
      "73": "SessionCredentials::::updateContent(java.util.Properties)",
      "74": "SessionCredentials::::updateContent(java.util.Properties)",
      "75": "SessionCredentials::::updateContent(java.util.Properties)",
      "76": "SessionCredentials::::updateContent(java.util.Properties)",
      "77": "SessionCredentials::::updateContent(java.util.Properties)",
      "78": "SessionCredentials::::updateContent(java.util.Properties)",
      "79": "SessionCredentials::::updateContent(java.util.Properties)",
      "80": "SessionCredentials::::updateContent(java.util.Properties)",
      "81": "SessionCredentials::::updateContent(java.util.Properties)",
      "82": "SessionCredentials::::updateContent(java.util.Properties)",
      "83": "SessionCredentials::::updateContent(java.util.Properties)",
      "85": "SessionCredentials::::getAccessKey()",
      "86": "SessionCredentials::::getAccessKey()",
      "87": "SessionCredentials::::getAccessKey()",
      "89": "SessionCredentials::::setAccessKey(java.lang.String)",
      "90": "SessionCredentials::::setAccessKey(java.lang.String)",
      "91": "SessionCredentials::::setAccessKey(java.lang.String)",
      "93": "SessionCredentials::::getSecretKey()",
      "94": "SessionCredentials::::getSecretKey()",
      "95": "SessionCredentials::::getSecretKey()",
      "97": "SessionCredentials::::setSecretKey(java.lang.String)",
      "98": "SessionCredentials::::setSecretKey(java.lang.String)",
      "99": "SessionCredentials::::setSecretKey(java.lang.String)",
      "101": "SessionCredentials::::getSignature()",
      "102": "SessionCredentials::::getSignature()",
      "103": "SessionCredentials::::getSignature()",
      "105": "SessionCredentials::::setSignature(java.lang.String)",
      "106": "SessionCredentials::::setSignature(java.lang.String)",
      "107": "SessionCredentials::::setSignature(java.lang.String)",
      "109": "SessionCredentials::::getSecurityToken()",
      "110": "SessionCredentials::::getSecurityToken()",
      "111": "SessionCredentials::::getSecurityToken()",
      "113": "SessionCredentials::::setSecurityToken(java.lang.String)",
      "114": "SessionCredentials::::setSecurityToken(java.lang.String)",
      "115": "SessionCredentials::::setSecurityToken(java.lang.String)",
      "117": "SessionCredentials::::hashCode()",
      "118": "SessionCredentials::::hashCode()",
      "119": "SessionCredentials::::hashCode()",
      "120": "SessionCredentials::::hashCode()",
      "121": "SessionCredentials::::hashCode()",
      "122": "SessionCredentials::::hashCode()",
      "123": "SessionCredentials::::hashCode()",
      "124": "SessionCredentials::::hashCode()",
      "125": "SessionCredentials::::hashCode()",
      "127": "SessionCredentials::::equals(java.lang.Object)",
      "128": "SessionCredentials::::equals(java.lang.Object)",
      "129": "SessionCredentials::::equals(java.lang.Object)",
      "130": "SessionCredentials::::equals(java.lang.Object)",
      "131": "SessionCredentials::::equals(java.lang.Object)",
      "132": "SessionCredentials::::equals(java.lang.Object)",
      "133": "SessionCredentials::::equals(java.lang.Object)",
      "134": "SessionCredentials::::equals(java.lang.Object)",
      "135": "SessionCredentials::::equals(java.lang.Object)",
      "136": "SessionCredentials::::equals(java.lang.Object)",
      "137": "SessionCredentials::::equals(java.lang.Object)",
      "138": "SessionCredentials::::equals(java.lang.Object)",
      "139": "SessionCredentials::::equals(java.lang.Object)",
      "140": "SessionCredentials::::equals(java.lang.Object)",
      "141": "SessionCredentials::::equals(java.lang.Object)",
      "142": "SessionCredentials::::equals(java.lang.Object)",
      "143": "SessionCredentials::::equals(java.lang.Object)",
      "144": "SessionCredentials::::equals(java.lang.Object)",
      "145": "SessionCredentials::::equals(java.lang.Object)",
      "146": "SessionCredentials::::equals(java.lang.Object)",
      "147": "SessionCredentials::::equals(java.lang.Object)",
      "148": "SessionCredentials::::equals(java.lang.Object)",
      "149": "SessionCredentials::::equals(java.lang.Object)",
      "150": "SessionCredentials::::equals(java.lang.Object)",
      "151": "SessionCredentials::::equals(java.lang.Object)",
      "152": "SessionCredentials::::equals(java.lang.Object)",
      "153": "SessionCredentials::::equals(java.lang.Object)",
      "154": "SessionCredentials::::equals(java.lang.Object)",
      "155": "SessionCredentials::::equals(java.lang.Object)",
      "156": "SessionCredentials::::equals(java.lang.Object)",
      "158": "SessionCredentials::::toString()",
      "159": "SessionCredentials::::toString()",
      "160": "SessionCredentials::::toString()",
      "161": "SessionCredentials::::toString()",
      "162": "SessionCredentials::::toString()"
    },
    "test_reverse_method_lines_dic": {
      "26": "SessionCredentialsTest::::equalsTest()",
      "27": "SessionCredentialsTest::::equalsTest()",
      "28": "SessionCredentialsTest::::equalsTest()",
      "29": "SessionCredentialsTest::::equalsTest()",
      "30": "SessionCredentialsTest::::equalsTest()",
      "31": "SessionCredentialsTest::::equalsTest()",
      "32": "SessionCredentialsTest::::equalsTest()",
      "34": "SessionCredentialsTest::::updateContentTest()",
      "35": "SessionCredentialsTest::::updateContentTest()",
      "36": "SessionCredentialsTest::::updateContentTest()",
      "37": "SessionCredentialsTest::::updateContentTest()",
      "38": "SessionCredentialsTest::::updateContentTest()",
      "39": "SessionCredentialsTest::::updateContentTest()",
      "40": "SessionCredentialsTest::::updateContentTest()",
      "41": "SessionCredentialsTest::::updateContentTest()",
      "42": "SessionCredentialsTest::::updateContentTest()",
      "44": "SessionCredentialsTest::::SessionCredentialHashCodeTest()",
      "45": "SessionCredentialsTest::::SessionCredentialHashCodeTest()",
      "46": "SessionCredentialsTest::::SessionCredentialHashCodeTest()",
      "47": "SessionCredentialsTest::::SessionCredentialHashCodeTest()",
      "48": "SessionCredentialsTest::::SessionCredentialHashCodeTest()",
      "49": "SessionCredentialsTest::::SessionCredentialHashCodeTest()",
      "50": "SessionCredentialsTest::::SessionCredentialHashCodeTest()",
      "51": "SessionCredentialsTest::::SessionCredentialHashCodeTest()",
      "52": "SessionCredentialsTest::::SessionCredentialHashCodeTest()",
      "53": "SessionCredentialsTest::::SessionCredentialHashCodeTest()",
      "55": "SessionCredentialsTest::::SessionCredentialEqualsTest()",
      "56": "SessionCredentialsTest::::SessionCredentialEqualsTest()",
      "57": "SessionCredentialsTest::::SessionCredentialEqualsTest()",
      "58": "SessionCredentialsTest::::SessionCredentialEqualsTest()",
      "59": "SessionCredentialsTest::::SessionCredentialEqualsTest()",
      "60": "SessionCredentialsTest::::SessionCredentialEqualsTest()",
      "61": "SessionCredentialsTest::::SessionCredentialEqualsTest()",
      "62": "SessionCredentialsTest::::SessionCredentialEqualsTest()",
      "63": "SessionCredentialsTest::::SessionCredentialEqualsTest()",
      "64": "SessionCredentialsTest::::SessionCredentialEqualsTest()",
      "65": "SessionCredentialsTest::::SessionCredentialEqualsTest()",
      "66": "SessionCredentialsTest::::SessionCredentialEqualsTest()",
      "67": "SessionCredentialsTest::::SessionCredentialEqualsTest()",
      "68": "SessionCredentialsTest::::SessionCredentialEqualsTest()",
      "69": "SessionCredentialsTest::::SessionCredentialEqualsTest()",
      "70": "SessionCredentialsTest::::SessionCredentialEqualsTest()",
      "71": "SessionCredentialsTest::::SessionCredentialEqualsTest()",
      "72": "SessionCredentialsTest::::SessionCredentialEqualsTest()",
      "73": "SessionCredentialsTest::::SessionCredentialEqualsTest()",
      "74": "SessionCredentialsTest::::SessionCredentialEqualsTest()",
      "75": "SessionCredentialsTest::::SessionCredentialEqualsTest()",
      "77": "SessionCredentialsTest::::SessionCredentialToStringTest()",
      "78": "SessionCredentialsTest::::SessionCredentialToStringTest()",
      "79": "SessionCredentialsTest::::SessionCredentialToStringTest()",
      "80": "SessionCredentialsTest::::SessionCredentialToStringTest()",
      "81": "SessionCredentialsTest::::SessionCredentialToStringTest()",
      "82": "SessionCredentialsTest::::SessionCredentialToStringTest()",
      "83": "SessionCredentialsTest::::SessionCredentialToStringTest()",
      "84": "SessionCredentialsTest::::SessionCredentialToStringTest()",
      "85": "SessionCredentialsTest::::SessionCredentialToStringTest()",
      "86": "SessionCredentialsTest::::SessionCredentialToStringTest()",
      "87": "SessionCredentialsTest::::SessionCredentialToStringTest()",
      "88": "SessionCredentialsTest::::SessionCredentialToStringTest()"
    },
    "tests": [
      {
        "test_lines": [
          26,
          32
        ],
        "covered_lines": [
          26,
          32,
          33,
          54,
          55,
          56,
          57,
          60,
          61,
          62,
          114,
          115,
          129,
          131,
          133,
          136,
          137,
          140,
          143,
          146,
          149,
          150,
          155
        ]
      },
      {
        "test_lines": [
          34,
          42
        ],
        "covered_lines": [
          26,
          32,
          33,
          40,
          41,
          43,
          45,
          46,
          52,
          66,
          67,
          68,
          72,
          73,
          74,
          78,
          79,
          80,
          83
        ]
      },
      {
        "test_lines": [
          44,
          53
        ],
        "covered_lines": [
          26,
          32,
          33,
          40,
          41,
          43,
          45,
          46,
          52,
          66,
          67,
          68,
          72,
          73,
          74,
          78,
          79,
          80,
          83,
          119,
          120,
          121,
          122,
          123,
          124
        ]
      },
      {
        "test_lines": [
          55,
          75
        ],
        "covered_lines": [
          26,
          32,
          33,
          40,
          41,
          43,
          45,
          46,
          52,
          66,
          67,
          68,
          72,
          73,
          74,
          78,
          79,
          80,
          83,
          98,
          99,
          106,
          107,
          129,
          131,
          133,
          136,
          137,
          140,
          143,
          146,
          147,
          149,
          150,
          155
        ]
      },
      {
        "test_lines": [
          77,
          88
        ],
        "covered_lines": [
          26,
          32,
          33,
          40,
          41,
          43,
          45,
          46,
          52,
          66,
          67,
          68,
          72,
          73,
          74,
          78,
          79,
          80,
          83,
          160
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/RocketMQC/acl/src/main/java/org/apache/rocketmq/acl/common/AclUtils.java": {
    "class_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.acl.common;\n",
      "\n",
      "import com.alibaba.fastjson.JSONObject;\n",
      "import java.io.File;\n",
      "import java.io.FileInputStream;\n",
      "import java.io.FileNotFoundException;\n",
      "import java.io.FileWriter;\n",
      "import java.io.IOException;\n",
      "import java.io.PrintWriter;\n",
      "import java.util.ArrayList;\n",
      "import java.util.Map;\n",
      "import java.util.SortedMap;\n",
      "import org.apache.commons.lang3.StringUtils;\n",
      "import org.apache.rocketmq.common.constant.LoggerName;\n",
      "import org.apache.rocketmq.logging.InternalLogger;\n",
      "import org.apache.rocketmq.logging.InternalLoggerFactory;\n",
      "import org.apache.rocketmq.remoting.RPCHook;\n",
      "import org.apache.rocketmq.remoting.protocol.RemotingCommand;\n",
      "import org.yaml.snakeyaml.Yaml;\n",
      "\n",
      "import static org.apache.rocketmq.acl.common.SessionCredentials.CHARSET;\n",
      "\n",
      "public class AclUtils {\n",
      "\n",
      "    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);\n",
      "\n",
      "    public static byte[] combineRequestContent(RemotingCommand request, SortedMap<String, String> fieldsMap) {\n",
      "        try {\n",
      "            StringBuilder sb = new StringBuilder(\"\");\n",
      "            for (Map.Entry<String, String> entry : fieldsMap.entrySet()) {\n",
      "                if (!SessionCredentials.SIGNATURE.equals(entry.getKey())) {\n",
      "                    sb.append(entry.getValue());\n",
      "                }\n",
      "            }\n",
      "\n",
      "            return AclUtils.combineBytes(sb.toString().getBytes(CHARSET), request.getBody());\n",
      "        } catch (Exception e) {\n",
      "            throw new RuntimeException(\"Incompatible exception.\", e);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    public static byte[] combineBytes(byte[] b1, byte[] b2) {\n",
      "        int size = (null != b1 ? b1.length : 0) + (null != b2 ? b2.length : 0);\n",
      "        byte[] total = new byte[size];\n",
      "        if (null != b1)\n",
      "            System.arraycopy(b1, 0, total, 0, b1.length);\n",
      "        if (null != b2)\n",
      "            System.arraycopy(b2, 0, total, b1.length, b2.length);\n",
      "        return total;\n",
      "    }\n",
      "\n",
      "    public static String calSignature(byte[] data, String secretKey) {\n",
      "        String signature = AclSigner.calSignature(data, secretKey);\n",
      "        return signature;\n",
      "    }\n",
      "\n",
      "    public static void IPv6AddressCheck(String netaddress) {\n",
      "        if (isAsterisk(netaddress) || isMinus(netaddress)) {\n",
      "            int asterisk = netaddress.indexOf(\"*\");\n",
      "            int minus = netaddress.indexOf(\"-\");\n",
      "//            '*' must be the end of netaddress if it exists\n",
      "            if (asterisk > -1 && asterisk != netaddress.length() - 1) {\n",
      "                throw new AclException(String.format(\"Netaddress examine scope Exception netaddress is %s\", netaddress));\n",
      "            }\n",
      "\n",
      "//            format like \"2::ac5:78:1-200:*\" or \"2::ac5:78:1-200\" is legal\n",
      "            if (minus > -1) {\n",
      "                if (asterisk == -1) {\n",
      "                    if (minus <= netaddress.lastIndexOf(\":\")) {\n",
      "                        throw new AclException(String.format(\"Netaddress examine scope Exception netaddress is %s\", netaddress));\n",
      "                    }\n",
      "                } else {\n",
      "                    if (minus <= netaddress.lastIndexOf(\":\", netaddress.lastIndexOf(\":\") - 1)) {\n",
      "                        throw new AclException(String.format(\"Netaddress examine scope Exception netaddress is %s\", netaddress));\n",
      "                    }\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    public static String v6ipProcess(String netaddress) {\n",
      "        int part;\n",
      "        String subAddress;\n",
      "        boolean isAsterisk = isAsterisk(netaddress);\n",
      "        boolean isMinus = isMinus(netaddress);\n",
      "        if (isAsterisk && isMinus) {\n",
      "            part = 6;\n",
      "            int lastColon = netaddress.lastIndexOf(':');\n",
      "            int secondLastColon = netaddress.substring(0, lastColon).lastIndexOf(':');\n",
      "            subAddress = netaddress.substring(0, secondLastColon);\n",
      "        } else if (!isAsterisk && !isMinus) {\n",
      "            part = 8;\n",
      "            subAddress = netaddress;\n",
      "        } else {\n",
      "            part = 7;\n",
      "            subAddress = netaddress.substring(0, netaddress.lastIndexOf(':'));\n",
      "        }\n",
      "        return expandIP(subAddress, part);\n",
      "    }\n",
      "\n",
      "    public static void verify(String netaddress, int index) {\n",
      "        if (!AclUtils.isScope(netaddress, index)) {\n",
      "            throw new AclException(String.format(\"Netaddress examine scope Exception netaddress is %s\", netaddress));\n",
      "        }\n",
      "    }\n",
      "\n",
      "    public static String[] getAddresses(String netaddress, String partialAddress) {\n",
      "        String[] parAddStrArray = StringUtils.split(partialAddress.substring(1, partialAddress.length() - 1), \",\");\n",
      "        String address = netaddress.substring(0, netaddress.indexOf(\"{\"));\n",
      "        String[] addreeStrArray = new String[parAddStrArray.length];\n",
      "        for (int i = 0; i < parAddStrArray.length; i++) {\n",
      "            addreeStrArray[i] = address + parAddStrArray[i];\n",
      "        }\n",
      "        return addreeStrArray;\n",
      "    }\n",
      "\n",
      "    public static boolean isScope(String netaddress, int index) {\n",
      "//        IPv6 Address\n",
      "        if (isColon(netaddress)) {\n",
      "            netaddress = expandIP(netaddress, 8);\n",
      "            String[] strArray = StringUtils.split(netaddress, \":\");\n",
      "            return isIPv6Scope(strArray, index);\n",
      "        }\n",
      "\n",
      "        String[] strArray = StringUtils.split(netaddress, \".\");\n",
      "        if (strArray.length != 4) {\n",
      "            return false;\n",
      "        }\n",
      "        return isScope(strArray, index);\n",
      "\n",
      "    }\n",
      "\n",
      "    public static boolean isScope(String[] num, int index) {\n",
      "        if (num.length <= index) {\n",
      "\n",
      "        }\n",
      "        for (int i = 0; i < index; i++) {\n",
      "            if (!isScope(num[i])) {\n",
      "                return false;\n",
      "            }\n",
      "        }\n",
      "        return true;\n",
      "\n",
      "    }\n",
      "\n",
      "    public static boolean isColon(String netaddress) {\n",
      "        return netaddress.indexOf(':') > -1;\n",
      "    }\n",
      "\n",
      "    public static boolean isScope(String num) {\n",
      "        return isScope(Integer.valueOf(num.trim()));\n",
      "    }\n",
      "\n",
      "    public static boolean isScope(int num) {\n",
      "        return num >= 0 && num <= 255;\n",
      "    }\n",
      "\n",
      "    public static boolean isAsterisk(String asterisk) {\n",
      "        return asterisk.indexOf('*') > -1;\n",
      "    }\n",
      "\n",
      "    public static boolean isComma(String colon) {\n",
      "        return colon.indexOf(',') > -1;\n",
      "    }\n",
      "\n",
      "    public static boolean isMinus(String minus) {\n",
      "        return minus.indexOf('-') > -1;\n",
      "\n",
      "    }\n",
      "\n",
      "    public static boolean isIPv6Scope(String[] num, int index) {\n",
      "        for (int i = 0; i < index; i++) {\n",
      "            int value;\n",
      "            try {\n",
      "                value = Integer.parseInt(num[i], 16);\n",
      "            } catch (NumberFormatException e) {\n",
      "                return false;\n",
      "            }\n",
      "            if (!isIPv6Scope(value)) {\n",
      "                return false;\n",
      "            }\n",
      "        }\n",
      "        return true;\n",
      "    }\n",
      "\n",
      "    public static boolean isIPv6Scope(int num) {\n",
      "        int min = Integer.parseInt(\"0\", 16);\n",
      "        int max = Integer.parseInt(\"ffff\", 16);\n",
      "        return num >= min && num <= max;\n",
      "    }\n",
      "\n",
      "    public static String expandIP(String netaddress, int part) {\n",
      "        boolean compress = false;\n",
      "        int compressIndex = -1;\n",
      "        String[] strArray = StringUtils.split(netaddress, \":\");\n",
      "        ArrayList<Integer> indexes = new ArrayList<>();\n",
      "        for (int i = 0; i < netaddress.length(); i++) {\n",
      "            if (netaddress.charAt(i) == ':') {\n",
      "                if (indexes.size() > 0 && i - indexes.get(indexes.size() - 1) == 1) {\n",
      "                    compressIndex = i;\n",
      "                    compress = true;\n",
      "                }\n",
      "                indexes.add(i);\n",
      "            }\n",
      "        }\n",
      "\n",
      "        for (int i = 0; i < strArray.length; i++) {\n",
      "            if (strArray[i].length() < 4) {\n",
      "                strArray[i] = \"0000\".substring(0, 4 - strArray[i].length()) + strArray[i];\n",
      "            }\n",
      "        }\n",
      "\n",
      "        StringBuilder sb = new StringBuilder();\n",
      "        if (compress) {\n",
      "            int pos = indexes.indexOf(compressIndex);\n",
      "            int index = 0;\n",
      "            if (!netaddress.startsWith(\":\")) {\n",
      "                for (int i = 0; i < pos; i++) {\n",
      "                    sb.append(strArray[index]).append(\":\");\n",
      "                    index += 1;\n",
      "                }\n",
      "            }\n",
      "            int zeroNum = part - strArray.length;\n",
      "            if (netaddress.endsWith(\":\")) {\n",
      "                for (int i = 0; i < zeroNum; i++) {\n",
      "                    sb.append(\"0000\");\n",
      "                    if (i != zeroNum - 1) {\n",
      "                        sb.append(\":\");\n",
      "                    }\n",
      "                }\n",
      "            } else {\n",
      "                for (int i = 0; i < zeroNum; i++) {\n",
      "                    sb.append(\"0000\").append(\":\");\n",
      "                }\n",
      "                for (int i = index; i < strArray.length; i++) {\n",
      "                    sb.append(strArray[i]);\n",
      "                    if (i != strArray.length - 1) {\n",
      "                        sb.append(\":\");\n",
      "                    }\n",
      "                }\n",
      "            }\n",
      "        } else {\n",
      "            for (int i = 0; i < strArray.length; i++) {\n",
      "                sb.append(strArray[i]);\n",
      "                if (i != strArray.length - 1) {\n",
      "                    sb.append(\":\");\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "        return sb.toString().toUpperCase();\n",
      "    }\n",
      "\n",
      "    public static <T> T getYamlDataObject(String path, Class<T> clazz) {\n",
      "        Yaml yaml = new Yaml();\n",
      "        FileInputStream fis = null;\n",
      "        try {\n",
      "            fis = new FileInputStream(new File(path));\n",
      "            return yaml.loadAs(fis, clazz);\n",
      "        } catch (FileNotFoundException ignore) {\n",
      "            return null;\n",
      "        } catch (Exception e) {\n",
      "            throw new AclException(e.getMessage());\n",
      "        } finally {\n",
      "            if (fis != null) {\n",
      "                try {\n",
      "                    fis.close();\n",
      "                } catch (IOException ignore) {\n",
      "                }\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    public static boolean writeDataObject(String path, Map<String, Object> dataMap) {\n",
      "        Yaml yaml = new Yaml();\n",
      "        PrintWriter pw = null;\n",
      "        try {\n",
      "            pw = new PrintWriter(new FileWriter(path));\n",
      "            String dumpAsMap = yaml.dumpAsMap(dataMap);\n",
      "            pw.print(dumpAsMap);\n",
      "            pw.flush();\n",
      "        } catch (Exception e) {\n",
      "            throw new AclException(e.getMessage());\n",
      "        } finally {\n",
      "            if (pw != null) {\n",
      "                pw.close();\n",
      "            }\n",
      "        }\n",
      "        return true;\n",
      "    }\n",
      "\n",
      "    public static RPCHook getAclRPCHook(String fileName) {\n",
      "        JSONObject yamlDataObject = null;\n",
      "        try {\n",
      "            yamlDataObject = AclUtils.getYamlDataObject(fileName,\n",
      "                JSONObject.class);\n",
      "        } catch (Exception e) {\n",
      "            log.error(\"Convert yaml file to data object error, \", e);\n",
      "            return null;\n",
      "        }\n",
      "\n",
      "        if (yamlDataObject == null || yamlDataObject.isEmpty()) {\n",
      "            log.warn(\"Cannot find conf file :{}, acl isn't be enabled.\", fileName);\n",
      "            return null;\n",
      "        }\n",
      "\n",
      "        String accessKey = yamlDataObject.getString(AclConstants.CONFIG_ACCESS_KEY);\n",
      "        String secretKey = yamlDataObject.getString(AclConstants.CONFIG_SECRET_KEY);\n",
      "\n",
      "        if (StringUtils.isBlank(accessKey) || StringUtils.isBlank(secretKey)) {\n",
      "            log.warn(\"AccessKey or secretKey is blank, the acl is not enabled.\");\n",
      "\n",
      "            return null;\n",
      "        }\n",
      "        return new AclClientRPCHook(new SessionCredentials(accessKey, secretKey));\n",
      "    }\n",
      "\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.acl.common;\n",
      "\n",
      "import com.alibaba.fastjson.JSONObject;\n",
      "import java.io.File;\n",
      "import java.io.IOException;\n",
      "import java.util.ArrayList;\n",
      "import java.util.HashMap;\n",
      "import java.util.LinkedHashMap;\n",
      "import java.util.List;\n",
      "import java.util.Map;\n",
      "import org.apache.commons.lang3.StringUtils;\n",
      "import org.apache.rocketmq.remoting.RPCHook;\n",
      "import org.junit.Assert;\n",
      "import org.junit.Test;\n",
      "\n",
      "public class AclUtilsTest {\n",
      "\n",
      "    @Test\n",
      "    public void getAddresses() {\n",
      "        String address = \"1.1.1.{1,2,3,4}\";\n",
      "        String[] addressArray = AclUtils.getAddresses(address, \"{1,2,3,4}\");\n",
      "        List<String> newAddressList = new ArrayList<>();\n",
      "        for (String a : addressArray) {\n",
      "            newAddressList.add(a);\n",
      "        }\n",
      "\n",
      "        List<String> addressList = new ArrayList<>();\n",
      "        addressList.add(\"1.1.1.1\");\n",
      "        addressList.add(\"1.1.1.2\");\n",
      "        addressList.add(\"1.1.1.3\");\n",
      "        addressList.add(\"1.1.1.4\");\n",
      "        Assert.assertEquals(newAddressList, addressList);\n",
      "\n",
      "//        IPv6 test\n",
      "        String ipv6Address = \"1:ac41:9987::bb22:666:{1,2,3,4}\";\n",
      "        String[] ipv6AddressArray = AclUtils.getAddresses(ipv6Address, \"{1,2,3,4}\");\n",
      "        List<String> newIPv6AddressList = new ArrayList<>();\n",
      "        for (String a : ipv6AddressArray) {\n",
      "            newIPv6AddressList.add(a);\n",
      "        }\n",
      "\n",
      "        List<String> ipv6AddressList = new ArrayList<>();\n",
      "        ipv6AddressList.add(\"1:ac41:9987::bb22:666:1\");\n",
      "        ipv6AddressList.add(\"1:ac41:9987::bb22:666:2\");\n",
      "        ipv6AddressList.add(\"1:ac41:9987::bb22:666:3\");\n",
      "        ipv6AddressList.add(\"1:ac41:9987::bb22:666:4\");\n",
      "        Assert.assertEquals(newIPv6AddressList, ipv6AddressList);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void isScopeStringArray() {\n",
      "        String address = \"12\";\n",
      "\n",
      "        for (int i = 0; i < 6; i++) {\n",
      "            boolean isScope = AclUtils.isScope(address, 4);\n",
      "            if (i == 3) {\n",
      "                Assert.assertTrue(isScope);\n",
      "            } else {\n",
      "                Assert.assertFalse(isScope);\n",
      "            }\n",
      "            address = address + \".12\";\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void isScopeArray() {\n",
      "        String[] adderss = StringUtils.split(\"12.12.12.12\", \".\");\n",
      "        boolean isScope = AclUtils.isScope(adderss, 4);\n",
      "        Assert.assertTrue(isScope);\n",
      "        isScope = AclUtils.isScope(adderss, 3);\n",
      "        Assert.assertTrue(isScope);\n",
      "\n",
      "        adderss = StringUtils.split(\"12.12.1222.1222\", \".\");\n",
      "        isScope = AclUtils.isScope(adderss, 4);\n",
      "        Assert.assertFalse(isScope);\n",
      "        isScope = AclUtils.isScope(adderss, 3);\n",
      "        Assert.assertFalse(isScope);\n",
      "\n",
      "//        IPv6 test\n",
      "        adderss = StringUtils.split(\"1050:0000:0000:0000:0005:0600:300c:326b\", \":\");\n",
      "        isScope = AclUtils.isIPv6Scope(adderss, 8);\n",
      "        Assert.assertTrue(isScope);\n",
      "        isScope = AclUtils.isIPv6Scope(adderss, 4);\n",
      "        Assert.assertTrue(isScope);\n",
      "\n",
      "        adderss = StringUtils.split(\"1050:9876:0000:0000:0005:akkg:300c:326b\", \":\");\n",
      "        isScope = AclUtils.isIPv6Scope(adderss, 8);\n",
      "        Assert.assertFalse(isScope);\n",
      "        isScope = AclUtils.isIPv6Scope(adderss, 4);\n",
      "        Assert.assertTrue(isScope);\n",
      "\n",
      "        adderss = StringUtils.split(AclUtils.expandIP(\"1050::0005:akkg:300c:326b\", 8), \":\");\n",
      "        isScope = AclUtils.isIPv6Scope(adderss, 8);\n",
      "        Assert.assertFalse(isScope);\n",
      "        isScope = AclUtils.isIPv6Scope(adderss, 4);\n",
      "        Assert.assertTrue(isScope);\n",
      "\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void isScopeStringTest() {\n",
      "        for (int i = 0; i < 256; i++) {\n",
      "            boolean isScope = AclUtils.isScope(i + \"\");\n",
      "            Assert.assertTrue(isScope);\n",
      "        }\n",
      "        boolean isScope = AclUtils.isScope(\"-1\");\n",
      "        Assert.assertFalse(isScope);\n",
      "        isScope = AclUtils.isScope(\"256\");\n",
      "        Assert.assertFalse(isScope);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void isScopeTest() {\n",
      "        for (int i = 0; i < 256; i++) {\n",
      "            boolean isScope = AclUtils.isScope(i);\n",
      "            Assert.assertTrue(isScope);\n",
      "        }\n",
      "        boolean isScope = AclUtils.isScope(-1);\n",
      "        Assert.assertFalse(isScope);\n",
      "        isScope = AclUtils.isScope(256);\n",
      "        Assert.assertFalse(isScope);\n",
      "\n",
      "        //        IPv6 test\n",
      "        int min = Integer.parseInt(\"0\", 16);\n",
      "        int max = Integer.parseInt(\"ffff\", 16);\n",
      "        for (int i = min; i < max + 1; i++) {\n",
      "            isScope = AclUtils.isIPv6Scope(i);\n",
      "            Assert.assertTrue(isScope);\n",
      "        }\n",
      "        isScope = AclUtils.isIPv6Scope(-1);\n",
      "        Assert.assertFalse(isScope);\n",
      "        isScope = AclUtils.isIPv6Scope(max + 1);\n",
      "        Assert.assertFalse(isScope);\n",
      "\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void isAsteriskTest() {\n",
      "        boolean isAsterisk = AclUtils.isAsterisk(\"*\");\n",
      "        Assert.assertTrue(isAsterisk);\n",
      "\n",
      "        isAsterisk = AclUtils.isAsterisk(\",\");\n",
      "        Assert.assertFalse(isAsterisk);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void isColonTest() {\n",
      "        boolean isColon = AclUtils.isComma(\",\");\n",
      "        Assert.assertTrue(isColon);\n",
      "\n",
      "        isColon = AclUtils.isComma(\"-\");\n",
      "        Assert.assertFalse(isColon);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void isMinusTest() {\n",
      "        boolean isMinus = AclUtils.isMinus(\"-\");\n",
      "        Assert.assertTrue(isMinus);\n",
      "\n",
      "        isMinus = AclUtils.isMinus(\"*\");\n",
      "        Assert.assertFalse(isMinus);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void v6ipProcessTest() {\n",
      "        String remoteAddr = \"5::7:6:1-200:*\";\n",
      "        String[] strArray = StringUtils.split(remoteAddr, \":\");\n",
      "        Assert.assertEquals(AclUtils.v6ipProcess(remoteAddr), \"0005:0000:0000:0000:0007:0006\");\n",
      "//        Assert.assertEquals(AclUtils.v6ipProcess(remoteAddr, strArray, 3), \"0005:0000:0000:0000:0007:0006\");\n",
      "\n",
      "        remoteAddr = \"5::7:6:1-200\";\n",
      "        strArray = StringUtils.split(remoteAddr, \":\");\n",
      "        Assert.assertEquals(AclUtils.v6ipProcess(remoteAddr), \"0005:0000:0000:0000:0000:0007:0006\");\n",
      "//        Assert.assertEquals(AclUtils.v6ipProcess(remoteAddr, strArray, 3), \"0005:0000:0000:0000:0000:0007:0006\");\n",
      "\n",
      "        remoteAddr = \"5::7:6:*\";\n",
      "        strArray = StringUtils.split(remoteAddr, \":\");\n",
      "        Assert.assertEquals(AclUtils.v6ipProcess(remoteAddr), \"0005:0000:0000:0000:0000:0007:0006\");\n",
      "//        Assert.assertEquals(AclUtils.v6ipProcess(remoteAddr, strArray, 3), \"0005:0000:0000:0000:0000:0007:0006\");\n",
      "\n",
      "        remoteAddr = \"5:7:6:*\";\n",
      "        strArray = StringUtils.split(remoteAddr, \":\");\n",
      "        Assert.assertEquals(AclUtils.v6ipProcess(remoteAddr), \"0005:0007:0006\");\n",
      "//        Assert.assertEquals(AclUtils.v6ipProcess(remoteAddr, strArray, 3), \"0005:0007:0006\");\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void expandIPTest() {\n",
      "        Assert.assertEquals(AclUtils.expandIP(\"::1\", 8), \"0000:0000:0000:0000:0000:0000:0000:0001\");\n",
      "        Assert.assertEquals(AclUtils.expandIP(\"3::\", 8), \"0003:0000:0000:0000:0000:0000:0000:0000\");\n",
      "        Assert.assertEquals(AclUtils.expandIP(\"2::2\", 8), \"0002:0000:0000:0000:0000:0000:0000:0002\");\n",
      "        Assert.assertEquals(AclUtils.expandIP(\"4::aac4:92\", 8), \"0004:0000:0000:0000:0000:0000:AAC4:0092\");\n",
      "        Assert.assertEquals(AclUtils.expandIP(\"ab23:56:901a::cc6:765:bb:9011\", 8), \"AB23:0056:901A:0000:0CC6:0765:00BB:9011\");\n",
      "        Assert.assertEquals(AclUtils.expandIP(\"ab23:56:901a:1:cc6:765:bb:9011\", 8), \"AB23:0056:901A:0001:0CC6:0765:00BB:9011\");\n",
      "        Assert.assertEquals(AclUtils.expandIP(\"5::7:6\", 6), \"0005:0000:0000:0000:0007:0006\");\n",
      "    }\n",
      "\n",
      "    @SuppressWarnings(\"unchecked\")\n",
      "    @Test\n",
      "    public void getYamlDataObjectTest() {\n",
      "\n",
      "        Map<String, Object> map = AclUtils.getYamlDataObject(\"src/test/resources/conf/plain_acl_correct.yml\", Map.class);\n",
      "        Assert.assertFalse(map.isEmpty());\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void writeDataObject2YamlFileTest() throws IOException {\n",
      "\n",
      "        String targetFileName = \"src/test/resources/conf/plain_write_acl.yml\";\n",
      "        File transport = new File(targetFileName);\n",
      "        transport.delete();\n",
      "        transport.createNewFile();\n",
      "\n",
      "        Map<String, Object> aclYamlMap = new HashMap<String, Object>();\n",
      "\n",
      "        // For globalWhiteRemoteAddrs element in acl yaml config file\n",
      "        List<String> globalWhiteRemoteAddrs = new ArrayList<String>();\n",
      "        globalWhiteRemoteAddrs.add(\"10.10.103.*\");\n",
      "        globalWhiteRemoteAddrs.add(\"192.168.0.*\");\n",
      "        aclYamlMap.put(\"globalWhiteRemoteAddrs\", globalWhiteRemoteAddrs);\n",
      "\n",
      "        // For accounts element in acl yaml config file\n",
      "        List<Map<String, Object>> accounts = new ArrayList<Map<String, Object>>();\n",
      "        Map<String, Object> accountsMap = new LinkedHashMap<String, Object>() {\n",
      "            {\n",
      "                put(\"accessKey\", \"RocketMQ\");\n",
      "                put(\"secretKey\", \"12345678\");\n",
      "                put(\"whiteRemoteAddress\", \"whiteRemoteAddress\");\n",
      "                put(\"admin\", \"true\");\n",
      "            }\n",
      "        };\n",
      "        accounts.add(accountsMap);\n",
      "        aclYamlMap.put(\"accounts\", accounts);\n",
      "        Assert.assertTrue(AclUtils.writeDataObject(targetFileName, aclYamlMap));\n",
      "\n",
      "        transport.delete();\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void updateExistedYamlFileTest() throws IOException {\n",
      "\n",
      "        String targetFileName = \"src/test/resources/conf/plain_update_acl.yml\";\n",
      "        File transport = new File(targetFileName);\n",
      "        transport.delete();\n",
      "        transport.createNewFile();\n",
      "\n",
      "        Map<String, Object> aclYamlMap = new HashMap<String, Object>();\n",
      "\n",
      "        // For globalWhiteRemoteAddrs element in acl yaml config file\n",
      "        List<String> globalWhiteRemoteAddrs = new ArrayList<String>();\n",
      "        globalWhiteRemoteAddrs.add(\"10.10.103.*\");\n",
      "        globalWhiteRemoteAddrs.add(\"192.168.0.*\");\n",
      "        aclYamlMap.put(\"globalWhiteRemoteAddrs\", globalWhiteRemoteAddrs);\n",
      "\n",
      "        // Write file to yaml file\n",
      "        AclUtils.writeDataObject(targetFileName, aclYamlMap);\n",
      "\n",
      "        Map<String, Object> updatedMap = AclUtils.getYamlDataObject(targetFileName, Map.class);\n",
      "        List<String> globalWhiteRemoteAddrList = (List<String>) updatedMap.get(\"globalWhiteRemoteAddrs\");\n",
      "        globalWhiteRemoteAddrList.clear();\n",
      "        globalWhiteRemoteAddrList.add(\"192.168.1.2\");\n",
      "\n",
      "        // Update file and flush to yaml file\n",
      "        AclUtils.writeDataObject(targetFileName, updatedMap);\n",
      "\n",
      "        Map<String, Object> readableMap = AclUtils.getYamlDataObject(targetFileName, Map.class);\n",
      "        List<String> updatedGlobalWhiteRemoteAddrs = (List<String>) readableMap.get(\"globalWhiteRemoteAddrs\");\n",
      "        Assert.assertEquals(\"192.168.1.2\", updatedGlobalWhiteRemoteAddrs.get(0));\n",
      "\n",
      "        transport.delete();\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void getYamlDataIgnoreFileNotFoundExceptionTest() {\n",
      "\n",
      "        JSONObject yamlDataObject = AclUtils.getYamlDataObject(\"plain_acl.yml\", JSONObject.class);\n",
      "        Assert.assertTrue(yamlDataObject == null);\n",
      "    }\n",
      "\n",
      "    @Test(expected = Exception.class)\n",
      "    public void getYamlDataExceptionTest() {\n",
      "\n",
      "        AclUtils.getYamlDataObject(\"src/test/resources/conf/plain_acl_format_error.yml\", Map.class);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void getAclRPCHookTest() {\n",
      "\n",
      "        RPCHook errorContRPCHook = AclUtils.getAclRPCHook(\"src/test/resources/conf/plain_acl_format_error.yml\");\n",
      "        Assert.assertNull(errorContRPCHook);\n",
      "\n",
      "        RPCHook noFileRPCHook = AclUtils.getAclRPCHook(\"src/test/resources/plain_acl_format_error1.yml\");\n",
      "        Assert.assertNull(noFileRPCHook);\n",
      "\n",
      "        RPCHook emptyContRPCHook = AclUtils.getAclRPCHook(\"src/test/resources/conf/plain_acl_null.yml\");\n",
      "        Assert.assertNull(emptyContRPCHook);\n",
      "\n",
      "        RPCHook incompleteContRPCHook = AclUtils.getAclRPCHook(\"src/test/resources/conf/plain_acl_incomplete.yml\");\n",
      "        Assert.assertNull(incompleteContRPCHook);\n",
      "    }\n",
      "\n",
      "}\n"
    ],
    "method_lines_dic": {
      "AclUtils::::combineBytes(byte[],byte[])": [
        58,
        66
      ],
      "AclUtils::::calSignature(byte[],java.lang.String)": [
        68,
        71
      ],
      "AclUtils::::IPv6AddressCheck(java.lang.String)": [
        73,
        95
      ],
      "AclUtils::::v6ipProcess(java.lang.String)": [
        97,
        115
      ],
      "AclUtils::::verify(java.lang.String,int)": [
        117,
        121
      ],
      "AclUtils::::getAddresses(java.lang.String,java.lang.String)": [
        123,
        131
      ],
      "AclUtils::::isScope(java.lang.String,int)": [
        133,
        147
      ],
      "AclUtils::::isScope(java.lang.String[],int)": [
        149,
        160
      ],
      "AclUtils::::isColon(java.lang.String)": [
        162,
        164
      ],
      "AclUtils::::isScope(java.lang.String)": [
        166,
        168
      ],
      "AclUtils::::isScope(int)": [
        170,
        172
      ],
      "AclUtils::::isAsterisk(java.lang.String)": [
        174,
        176
      ],
      "AclUtils::::isComma(java.lang.String)": [
        178,
        180
      ],
      "AclUtils::::isMinus(java.lang.String)": [
        182,
        185
      ],
      "AclUtils::::isIPv6Scope(java.lang.String[],int)": [
        187,
        200
      ],
      "AclUtils::::isIPv6Scope(int)": [
        202,
        206
      ],
      "AclUtils::::expandIP(java.lang.String,int)": [
        208,
        267
      ],
      "AclUtils::::getYamlDataObject(java.lang.String,java.lang.Class<T>)": [
        269,
        287
      ],
      "AclUtils::::writeDataObject(java.lang.String,java.util.Map<java.lang.String, java.lang.Object>)": [
        289,
        305
      ],
      "AclUtils::::getAclRPCHook(java.lang.String)": [
        307,
        331
      ]
    },
    "test_method_lines_dic": {
      "AclUtilsTest::::getAddresses()": [
        34,
        64
      ],
      "AclUtilsTest::::isScopeStringArray()": [
        66,
        79
      ],
      "AclUtilsTest::::isScopeArray()": [
        81,
        114
      ],
      "AclUtilsTest::::isScopeStringTest()": [
        116,
        126
      ],
      "AclUtilsTest::::isScopeTest()": [
        128,
        151
      ],
      "AclUtilsTest::::isAsteriskTest()": [
        153,
        160
      ],
      "AclUtilsTest::::isColonTest()": [
        162,
        169
      ],
      "AclUtilsTest::::isMinusTest()": [
        171,
        178
      ],
      "AclUtilsTest::::v6ipProcessTest()": [
        180,
        201
      ],
      "AclUtilsTest::::expandIPTest()": [
        203,
        212
      ],
      "AclUtilsTest::::getYamlDataObjectTest()": [
        214,
        220
      ],
      "AclUtilsTest::::writeDataObject2YamlFileTest()": [
        222,
        253
      ],
      "AclUtilsTest::::updateExistedYamlFileTest()": [
        255,
        287
      ],
      "AclUtilsTest::::getYamlDataIgnoreFileNotFoundExceptionTest()": [
        289,
        294
      ],
      "AclUtilsTest::::getYamlDataExceptionTest()": [
        296,
        300
      ],
      "AclUtilsTest::::getAclRPCHookTest()": [
        302,
        316
      ]
    },
    "reverse_method_lines_dic": {
      "58": "AclUtils::::combineBytes(byte[],byte[])",
      "59": "AclUtils::::combineBytes(byte[],byte[])",
      "60": "AclUtils::::combineBytes(byte[],byte[])",
      "61": "AclUtils::::combineBytes(byte[],byte[])",
      "62": "AclUtils::::combineBytes(byte[],byte[])",
      "63": "AclUtils::::combineBytes(byte[],byte[])",
      "64": "AclUtils::::combineBytes(byte[],byte[])",
      "65": "AclUtils::::combineBytes(byte[],byte[])",
      "66": "AclUtils::::combineBytes(byte[],byte[])",
      "68": "AclUtils::::calSignature(byte[],java.lang.String)",
      "69": "AclUtils::::calSignature(byte[],java.lang.String)",
      "70": "AclUtils::::calSignature(byte[],java.lang.String)",
      "71": "AclUtils::::calSignature(byte[],java.lang.String)",
      "73": "AclUtils::::IPv6AddressCheck(java.lang.String)",
      "74": "AclUtils::::IPv6AddressCheck(java.lang.String)",
      "75": "AclUtils::::IPv6AddressCheck(java.lang.String)",
      "76": "AclUtils::::IPv6AddressCheck(java.lang.String)",
      "77": "AclUtils::::IPv6AddressCheck(java.lang.String)",
      "78": "AclUtils::::IPv6AddressCheck(java.lang.String)",
      "79": "AclUtils::::IPv6AddressCheck(java.lang.String)",
      "80": "AclUtils::::IPv6AddressCheck(java.lang.String)",
      "81": "AclUtils::::IPv6AddressCheck(java.lang.String)",
      "82": "AclUtils::::IPv6AddressCheck(java.lang.String)",
      "83": "AclUtils::::IPv6AddressCheck(java.lang.String)",
      "84": "AclUtils::::IPv6AddressCheck(java.lang.String)",
      "85": "AclUtils::::IPv6AddressCheck(java.lang.String)",
      "86": "AclUtils::::IPv6AddressCheck(java.lang.String)",
      "87": "AclUtils::::IPv6AddressCheck(java.lang.String)",
      "88": "AclUtils::::IPv6AddressCheck(java.lang.String)",
      "89": "AclUtils::::IPv6AddressCheck(java.lang.String)",
      "90": "AclUtils::::IPv6AddressCheck(java.lang.String)",
      "91": "AclUtils::::IPv6AddressCheck(java.lang.String)",
      "92": "AclUtils::::IPv6AddressCheck(java.lang.String)",
      "93": "AclUtils::::IPv6AddressCheck(java.lang.String)",
      "94": "AclUtils::::IPv6AddressCheck(java.lang.String)",
      "95": "AclUtils::::IPv6AddressCheck(java.lang.String)",
      "97": "AclUtils::::v6ipProcess(java.lang.String)",
      "98": "AclUtils::::v6ipProcess(java.lang.String)",
      "99": "AclUtils::::v6ipProcess(java.lang.String)",
      "100": "AclUtils::::v6ipProcess(java.lang.String)",
      "101": "AclUtils::::v6ipProcess(java.lang.String)",
      "102": "AclUtils::::v6ipProcess(java.lang.String)",
      "103": "AclUtils::::v6ipProcess(java.lang.String)",
      "104": "AclUtils::::v6ipProcess(java.lang.String)",
      "105": "AclUtils::::v6ipProcess(java.lang.String)",
      "106": "AclUtils::::v6ipProcess(java.lang.String)",
      "107": "AclUtils::::v6ipProcess(java.lang.String)",
      "108": "AclUtils::::v6ipProcess(java.lang.String)",
      "109": "AclUtils::::v6ipProcess(java.lang.String)",
      "110": "AclUtils::::v6ipProcess(java.lang.String)",
      "111": "AclUtils::::v6ipProcess(java.lang.String)",
      "112": "AclUtils::::v6ipProcess(java.lang.String)",
      "113": "AclUtils::::v6ipProcess(java.lang.String)",
      "114": "AclUtils::::v6ipProcess(java.lang.String)",
      "115": "AclUtils::::v6ipProcess(java.lang.String)",
      "117": "AclUtils::::verify(java.lang.String,int)",
      "118": "AclUtils::::verify(java.lang.String,int)",
      "119": "AclUtils::::verify(java.lang.String,int)",
      "120": "AclUtils::::verify(java.lang.String,int)",
      "121": "AclUtils::::verify(java.lang.String,int)",
      "123": "AclUtils::::getAddresses(java.lang.String,java.lang.String)",
      "124": "AclUtils::::getAddresses(java.lang.String,java.lang.String)",
      "125": "AclUtils::::getAddresses(java.lang.String,java.lang.String)",
      "126": "AclUtils::::getAddresses(java.lang.String,java.lang.String)",
      "127": "AclUtils::::getAddresses(java.lang.String,java.lang.String)",
      "128": "AclUtils::::getAddresses(java.lang.String,java.lang.String)",
      "129": "AclUtils::::getAddresses(java.lang.String,java.lang.String)",
      "130": "AclUtils::::getAddresses(java.lang.String,java.lang.String)",
      "131": "AclUtils::::getAddresses(java.lang.String,java.lang.String)",
      "133": "AclUtils::::isScope(java.lang.String,int)",
      "134": "AclUtils::::isScope(java.lang.String,int)",
      "135": "AclUtils::::isScope(java.lang.String,int)",
      "136": "AclUtils::::isScope(java.lang.String,int)",
      "137": "AclUtils::::isScope(java.lang.String,int)",
      "138": "AclUtils::::isScope(java.lang.String,int)",
      "139": "AclUtils::::isScope(java.lang.String,int)",
      "140": "AclUtils::::isScope(java.lang.String,int)",
      "141": "AclUtils::::isScope(java.lang.String,int)",
      "142": "AclUtils::::isScope(java.lang.String,int)",
      "143": "AclUtils::::isScope(java.lang.String,int)",
      "144": "AclUtils::::isScope(java.lang.String,int)",
      "145": "AclUtils::::isScope(java.lang.String,int)",
      "146": "AclUtils::::isScope(java.lang.String,int)",
      "147": "AclUtils::::isScope(java.lang.String,int)",
      "149": "AclUtils::::isScope(java.lang.String[],int)",
      "150": "AclUtils::::isScope(java.lang.String[],int)",
      "151": "AclUtils::::isScope(java.lang.String[],int)",
      "152": "AclUtils::::isScope(java.lang.String[],int)",
      "153": "AclUtils::::isScope(java.lang.String[],int)",
      "154": "AclUtils::::isScope(java.lang.String[],int)",
      "155": "AclUtils::::isScope(java.lang.String[],int)",
      "156": "AclUtils::::isScope(java.lang.String[],int)",
      "157": "AclUtils::::isScope(java.lang.String[],int)",
      "158": "AclUtils::::isScope(java.lang.String[],int)",
      "159": "AclUtils::::isScope(java.lang.String[],int)",
      "160": "AclUtils::::isScope(java.lang.String[],int)",
      "162": "AclUtils::::isColon(java.lang.String)",
      "163": "AclUtils::::isColon(java.lang.String)",
      "164": "AclUtils::::isColon(java.lang.String)",
      "166": "AclUtils::::isScope(java.lang.String)",
      "167": "AclUtils::::isScope(java.lang.String)",
      "168": "AclUtils::::isScope(java.lang.String)",
      "170": "AclUtils::::isScope(int)",
      "171": "AclUtils::::isScope(int)",
      "172": "AclUtils::::isScope(int)",
      "174": "AclUtils::::isAsterisk(java.lang.String)",
      "175": "AclUtils::::isAsterisk(java.lang.String)",
      "176": "AclUtils::::isAsterisk(java.lang.String)",
      "178": "AclUtils::::isComma(java.lang.String)",
      "179": "AclUtils::::isComma(java.lang.String)",
      "180": "AclUtils::::isComma(java.lang.String)",
      "182": "AclUtils::::isMinus(java.lang.String)",
      "183": "AclUtils::::isMinus(java.lang.String)",
      "184": "AclUtils::::isMinus(java.lang.String)",
      "185": "AclUtils::::isMinus(java.lang.String)",
      "187": "AclUtils::::isIPv6Scope(java.lang.String[],int)",
      "188": "AclUtils::::isIPv6Scope(java.lang.String[],int)",
      "189": "AclUtils::::isIPv6Scope(java.lang.String[],int)",
      "190": "AclUtils::::isIPv6Scope(java.lang.String[],int)",
      "191": "AclUtils::::isIPv6Scope(java.lang.String[],int)",
      "192": "AclUtils::::isIPv6Scope(java.lang.String[],int)",
      "193": "AclUtils::::isIPv6Scope(java.lang.String[],int)",
      "194": "AclUtils::::isIPv6Scope(java.lang.String[],int)",
      "195": "AclUtils::::isIPv6Scope(java.lang.String[],int)",
      "196": "AclUtils::::isIPv6Scope(java.lang.String[],int)",
      "197": "AclUtils::::isIPv6Scope(java.lang.String[],int)",
      "198": "AclUtils::::isIPv6Scope(java.lang.String[],int)",
      "199": "AclUtils::::isIPv6Scope(java.lang.String[],int)",
      "200": "AclUtils::::isIPv6Scope(java.lang.String[],int)",
      "202": "AclUtils::::isIPv6Scope(int)",
      "203": "AclUtils::::isIPv6Scope(int)",
      "204": "AclUtils::::isIPv6Scope(int)",
      "205": "AclUtils::::isIPv6Scope(int)",
      "206": "AclUtils::::isIPv6Scope(int)",
      "208": "AclUtils::::expandIP(java.lang.String,int)",
      "209": "AclUtils::::expandIP(java.lang.String,int)",
      "210": "AclUtils::::expandIP(java.lang.String,int)",
      "211": "AclUtils::::expandIP(java.lang.String,int)",
      "212": "AclUtils::::expandIP(java.lang.String,int)",
      "213": "AclUtils::::expandIP(java.lang.String,int)",
      "214": "AclUtils::::expandIP(java.lang.String,int)",
      "215": "AclUtils::::expandIP(java.lang.String,int)",
      "216": "AclUtils::::expandIP(java.lang.String,int)",
      "217": "AclUtils::::expandIP(java.lang.String,int)",
      "218": "AclUtils::::expandIP(java.lang.String,int)",
      "219": "AclUtils::::expandIP(java.lang.String,int)",
      "220": "AclUtils::::expandIP(java.lang.String,int)",
      "221": "AclUtils::::expandIP(java.lang.String,int)",
      "222": "AclUtils::::expandIP(java.lang.String,int)",
      "223": "AclUtils::::expandIP(java.lang.String,int)",
      "224": "AclUtils::::expandIP(java.lang.String,int)",
      "225": "AclUtils::::expandIP(java.lang.String,int)",
      "226": "AclUtils::::expandIP(java.lang.String,int)",
      "227": "AclUtils::::expandIP(java.lang.String,int)",
      "228": "AclUtils::::expandIP(java.lang.String,int)",
      "229": "AclUtils::::expandIP(java.lang.String,int)",
      "230": "AclUtils::::expandIP(java.lang.String,int)",
      "231": "AclUtils::::expandIP(java.lang.String,int)",
      "232": "AclUtils::::expandIP(java.lang.String,int)",
      "233": "AclUtils::::expandIP(java.lang.String,int)",
      "234": "AclUtils::::expandIP(java.lang.String,int)",
      "235": "AclUtils::::expandIP(java.lang.String,int)",
      "236": "AclUtils::::expandIP(java.lang.String,int)",
      "237": "AclUtils::::expandIP(java.lang.String,int)",
      "238": "AclUtils::::expandIP(java.lang.String,int)",
      "239": "AclUtils::::expandIP(java.lang.String,int)",
      "240": "AclUtils::::expandIP(java.lang.String,int)",
      "241": "AclUtils::::expandIP(java.lang.String,int)",
      "242": "AclUtils::::expandIP(java.lang.String,int)",
      "243": "AclUtils::::expandIP(java.lang.String,int)",
      "244": "AclUtils::::expandIP(java.lang.String,int)",
      "245": "AclUtils::::expandIP(java.lang.String,int)",
      "246": "AclUtils::::expandIP(java.lang.String,int)",
      "247": "AclUtils::::expandIP(java.lang.String,int)",
      "248": "AclUtils::::expandIP(java.lang.String,int)",
      "249": "AclUtils::::expandIP(java.lang.String,int)",
      "250": "AclUtils::::expandIP(java.lang.String,int)",
      "251": "AclUtils::::expandIP(java.lang.String,int)",
      "252": "AclUtils::::expandIP(java.lang.String,int)",
      "253": "AclUtils::::expandIP(java.lang.String,int)",
      "254": "AclUtils::::expandIP(java.lang.String,int)",
      "255": "AclUtils::::expandIP(java.lang.String,int)",
      "256": "AclUtils::::expandIP(java.lang.String,int)",
      "257": "AclUtils::::expandIP(java.lang.String,int)",
      "258": "AclUtils::::expandIP(java.lang.String,int)",
      "259": "AclUtils::::expandIP(java.lang.String,int)",
      "260": "AclUtils::::expandIP(java.lang.String,int)",
      "261": "AclUtils::::expandIP(java.lang.String,int)",
      "262": "AclUtils::::expandIP(java.lang.String,int)",
      "263": "AclUtils::::expandIP(java.lang.String,int)",
      "264": "AclUtils::::expandIP(java.lang.String,int)",
      "265": "AclUtils::::expandIP(java.lang.String,int)",
      "266": "AclUtils::::expandIP(java.lang.String,int)",
      "267": "AclUtils::::expandIP(java.lang.String,int)",
      "269": "AclUtils::::getYamlDataObject(java.lang.String,java.lang.Class<T>)",
      "270": "AclUtils::::getYamlDataObject(java.lang.String,java.lang.Class<T>)",
      "271": "AclUtils::::getYamlDataObject(java.lang.String,java.lang.Class<T>)",
      "272": "AclUtils::::getYamlDataObject(java.lang.String,java.lang.Class<T>)",
      "273": "AclUtils::::getYamlDataObject(java.lang.String,java.lang.Class<T>)",
      "274": "AclUtils::::getYamlDataObject(java.lang.String,java.lang.Class<T>)",
      "275": "AclUtils::::getYamlDataObject(java.lang.String,java.lang.Class<T>)",
      "276": "AclUtils::::getYamlDataObject(java.lang.String,java.lang.Class<T>)",
      "277": "AclUtils::::getYamlDataObject(java.lang.String,java.lang.Class<T>)",
      "278": "AclUtils::::getYamlDataObject(java.lang.String,java.lang.Class<T>)",
      "279": "AclUtils::::getYamlDataObject(java.lang.String,java.lang.Class<T>)",
      "280": "AclUtils::::getYamlDataObject(java.lang.String,java.lang.Class<T>)",
      "281": "AclUtils::::getYamlDataObject(java.lang.String,java.lang.Class<T>)",
      "282": "AclUtils::::getYamlDataObject(java.lang.String,java.lang.Class<T>)",
      "283": "AclUtils::::getYamlDataObject(java.lang.String,java.lang.Class<T>)",
      "284": "AclUtils::::getYamlDataObject(java.lang.String,java.lang.Class<T>)",
      "285": "AclUtils::::getYamlDataObject(java.lang.String,java.lang.Class<T>)",
      "286": "AclUtils::::getYamlDataObject(java.lang.String,java.lang.Class<T>)",
      "287": "AclUtils::::getYamlDataObject(java.lang.String,java.lang.Class<T>)",
      "289": "AclUtils::::writeDataObject(java.lang.String,java.util.Map<java.lang.String, java.lang.Object>)",
      "290": "AclUtils::::writeDataObject(java.lang.String,java.util.Map<java.lang.String, java.lang.Object>)",
      "291": "AclUtils::::writeDataObject(java.lang.String,java.util.Map<java.lang.String, java.lang.Object>)",
      "292": "AclUtils::::writeDataObject(java.lang.String,java.util.Map<java.lang.String, java.lang.Object>)",
      "293": "AclUtils::::writeDataObject(java.lang.String,java.util.Map<java.lang.String, java.lang.Object>)",
      "294": "AclUtils::::writeDataObject(java.lang.String,java.util.Map<java.lang.String, java.lang.Object>)",
      "295": "AclUtils::::writeDataObject(java.lang.String,java.util.Map<java.lang.String, java.lang.Object>)",
      "296": "AclUtils::::writeDataObject(java.lang.String,java.util.Map<java.lang.String, java.lang.Object>)",
      "297": "AclUtils::::writeDataObject(java.lang.String,java.util.Map<java.lang.String, java.lang.Object>)",
      "298": "AclUtils::::writeDataObject(java.lang.String,java.util.Map<java.lang.String, java.lang.Object>)",
      "299": "AclUtils::::writeDataObject(java.lang.String,java.util.Map<java.lang.String, java.lang.Object>)",
      "300": "AclUtils::::writeDataObject(java.lang.String,java.util.Map<java.lang.String, java.lang.Object>)",
      "301": "AclUtils::::writeDataObject(java.lang.String,java.util.Map<java.lang.String, java.lang.Object>)",
      "302": "AclUtils::::writeDataObject(java.lang.String,java.util.Map<java.lang.String, java.lang.Object>)",
      "303": "AclUtils::::writeDataObject(java.lang.String,java.util.Map<java.lang.String, java.lang.Object>)",
      "304": "AclUtils::::writeDataObject(java.lang.String,java.util.Map<java.lang.String, java.lang.Object>)",
      "305": "AclUtils::::writeDataObject(java.lang.String,java.util.Map<java.lang.String, java.lang.Object>)",
      "307": "AclUtils::::getAclRPCHook(java.lang.String)",
      "308": "AclUtils::::getAclRPCHook(java.lang.String)",
      "309": "AclUtils::::getAclRPCHook(java.lang.String)",
      "310": "AclUtils::::getAclRPCHook(java.lang.String)",
      "311": "AclUtils::::getAclRPCHook(java.lang.String)",
      "312": "AclUtils::::getAclRPCHook(java.lang.String)",
      "313": "AclUtils::::getAclRPCHook(java.lang.String)",
      "314": "AclUtils::::getAclRPCHook(java.lang.String)",
      "315": "AclUtils::::getAclRPCHook(java.lang.String)",
      "316": "AclUtils::::getAclRPCHook(java.lang.String)",
      "317": "AclUtils::::getAclRPCHook(java.lang.String)",
      "318": "AclUtils::::getAclRPCHook(java.lang.String)",
      "319": "AclUtils::::getAclRPCHook(java.lang.String)",
      "320": "AclUtils::::getAclRPCHook(java.lang.String)",
      "321": "AclUtils::::getAclRPCHook(java.lang.String)",
      "322": "AclUtils::::getAclRPCHook(java.lang.String)",
      "323": "AclUtils::::getAclRPCHook(java.lang.String)",
      "324": "AclUtils::::getAclRPCHook(java.lang.String)",
      "325": "AclUtils::::getAclRPCHook(java.lang.String)",
      "326": "AclUtils::::getAclRPCHook(java.lang.String)",
      "327": "AclUtils::::getAclRPCHook(java.lang.String)",
      "328": "AclUtils::::getAclRPCHook(java.lang.String)",
      "329": "AclUtils::::getAclRPCHook(java.lang.String)",
      "330": "AclUtils::::getAclRPCHook(java.lang.String)",
      "331": "AclUtils::::getAclRPCHook(java.lang.String)"
    },
    "test_reverse_method_lines_dic": {
      "34": "AclUtilsTest::::getAddresses()",
      "35": "AclUtilsTest::::getAddresses()",
      "36": "AclUtilsTest::::getAddresses()",
      "37": "AclUtilsTest::::getAddresses()",
      "38": "AclUtilsTest::::getAddresses()",
      "39": "AclUtilsTest::::getAddresses()",
      "40": "AclUtilsTest::::getAddresses()",
      "41": "AclUtilsTest::::getAddresses()",
      "42": "AclUtilsTest::::getAddresses()",
      "43": "AclUtilsTest::::getAddresses()",
      "44": "AclUtilsTest::::getAddresses()",
      "45": "AclUtilsTest::::getAddresses()",
      "46": "AclUtilsTest::::getAddresses()",
      "47": "AclUtilsTest::::getAddresses()",
      "48": "AclUtilsTest::::getAddresses()",
      "49": "AclUtilsTest::::getAddresses()",
      "50": "AclUtilsTest::::getAddresses()",
      "51": "AclUtilsTest::::getAddresses()",
      "52": "AclUtilsTest::::getAddresses()",
      "53": "AclUtilsTest::::getAddresses()",
      "54": "AclUtilsTest::::getAddresses()",
      "55": "AclUtilsTest::::getAddresses()",
      "56": "AclUtilsTest::::getAddresses()",
      "57": "AclUtilsTest::::getAddresses()",
      "58": "AclUtilsTest::::getAddresses()",
      "59": "AclUtilsTest::::getAddresses()",
      "60": "AclUtilsTest::::getAddresses()",
      "61": "AclUtilsTest::::getAddresses()",
      "62": "AclUtilsTest::::getAddresses()",
      "63": "AclUtilsTest::::getAddresses()",
      "64": "AclUtilsTest::::getAddresses()",
      "66": "AclUtilsTest::::isScopeStringArray()",
      "67": "AclUtilsTest::::isScopeStringArray()",
      "68": "AclUtilsTest::::isScopeStringArray()",
      "69": "AclUtilsTest::::isScopeStringArray()",
      "70": "AclUtilsTest::::isScopeStringArray()",
      "71": "AclUtilsTest::::isScopeStringArray()",
      "72": "AclUtilsTest::::isScopeStringArray()",
      "73": "AclUtilsTest::::isScopeStringArray()",
      "74": "AclUtilsTest::::isScopeStringArray()",
      "75": "AclUtilsTest::::isScopeStringArray()",
      "76": "AclUtilsTest::::isScopeStringArray()",
      "77": "AclUtilsTest::::isScopeStringArray()",
      "78": "AclUtilsTest::::isScopeStringArray()",
      "79": "AclUtilsTest::::isScopeStringArray()",
      "81": "AclUtilsTest::::isScopeArray()",
      "82": "AclUtilsTest::::isScopeArray()",
      "83": "AclUtilsTest::::isScopeArray()",
      "84": "AclUtilsTest::::isScopeArray()",
      "85": "AclUtilsTest::::isScopeArray()",
      "86": "AclUtilsTest::::isScopeArray()",
      "87": "AclUtilsTest::::isScopeArray()",
      "88": "AclUtilsTest::::isScopeArray()",
      "89": "AclUtilsTest::::isScopeArray()",
      "90": "AclUtilsTest::::isScopeArray()",
      "91": "AclUtilsTest::::isScopeArray()",
      "92": "AclUtilsTest::::isScopeArray()",
      "93": "AclUtilsTest::::isScopeArray()",
      "94": "AclUtilsTest::::isScopeArray()",
      "95": "AclUtilsTest::::isScopeArray()",
      "96": "AclUtilsTest::::isScopeArray()",
      "97": "AclUtilsTest::::isScopeArray()",
      "98": "AclUtilsTest::::isScopeArray()",
      "99": "AclUtilsTest::::isScopeArray()",
      "100": "AclUtilsTest::::isScopeArray()",
      "101": "AclUtilsTest::::isScopeArray()",
      "102": "AclUtilsTest::::isScopeArray()",
      "103": "AclUtilsTest::::isScopeArray()",
      "104": "AclUtilsTest::::isScopeArray()",
      "105": "AclUtilsTest::::isScopeArray()",
      "106": "AclUtilsTest::::isScopeArray()",
      "107": "AclUtilsTest::::isScopeArray()",
      "108": "AclUtilsTest::::isScopeArray()",
      "109": "AclUtilsTest::::isScopeArray()",
      "110": "AclUtilsTest::::isScopeArray()",
      "111": "AclUtilsTest::::isScopeArray()",
      "112": "AclUtilsTest::::isScopeArray()",
      "113": "AclUtilsTest::::isScopeArray()",
      "114": "AclUtilsTest::::isScopeArray()",
      "116": "AclUtilsTest::::isScopeStringTest()",
      "117": "AclUtilsTest::::isScopeStringTest()",
      "118": "AclUtilsTest::::isScopeStringTest()",
      "119": "AclUtilsTest::::isScopeStringTest()",
      "120": "AclUtilsTest::::isScopeStringTest()",
      "121": "AclUtilsTest::::isScopeStringTest()",
      "122": "AclUtilsTest::::isScopeStringTest()",
      "123": "AclUtilsTest::::isScopeStringTest()",
      "124": "AclUtilsTest::::isScopeStringTest()",
      "125": "AclUtilsTest::::isScopeStringTest()",
      "126": "AclUtilsTest::::isScopeStringTest()",
      "128": "AclUtilsTest::::isScopeTest()",
      "129": "AclUtilsTest::::isScopeTest()",
      "130": "AclUtilsTest::::isScopeTest()",
      "131": "AclUtilsTest::::isScopeTest()",
      "132": "AclUtilsTest::::isScopeTest()",
      "133": "AclUtilsTest::::isScopeTest()",
      "134": "AclUtilsTest::::isScopeTest()",
      "135": "AclUtilsTest::::isScopeTest()",
      "136": "AclUtilsTest::::isScopeTest()",
      "137": "AclUtilsTest::::isScopeTest()",
      "138": "AclUtilsTest::::isScopeTest()",
      "139": "AclUtilsTest::::isScopeTest()",
      "140": "AclUtilsTest::::isScopeTest()",
      "141": "AclUtilsTest::::isScopeTest()",
      "142": "AclUtilsTest::::isScopeTest()",
      "143": "AclUtilsTest::::isScopeTest()",
      "144": "AclUtilsTest::::isScopeTest()",
      "145": "AclUtilsTest::::isScopeTest()",
      "146": "AclUtilsTest::::isScopeTest()",
      "147": "AclUtilsTest::::isScopeTest()",
      "148": "AclUtilsTest::::isScopeTest()",
      "149": "AclUtilsTest::::isScopeTest()",
      "150": "AclUtilsTest::::isScopeTest()",
      "151": "AclUtilsTest::::isScopeTest()",
      "153": "AclUtilsTest::::isAsteriskTest()",
      "154": "AclUtilsTest::::isAsteriskTest()",
      "155": "AclUtilsTest::::isAsteriskTest()",
      "156": "AclUtilsTest::::isAsteriskTest()",
      "157": "AclUtilsTest::::isAsteriskTest()",
      "158": "AclUtilsTest::::isAsteriskTest()",
      "159": "AclUtilsTest::::isAsteriskTest()",
      "160": "AclUtilsTest::::isAsteriskTest()",
      "162": "AclUtilsTest::::isColonTest()",
      "163": "AclUtilsTest::::isColonTest()",
      "164": "AclUtilsTest::::isColonTest()",
      "165": "AclUtilsTest::::isColonTest()",
      "166": "AclUtilsTest::::isColonTest()",
      "167": "AclUtilsTest::::isColonTest()",
      "168": "AclUtilsTest::::isColonTest()",
      "169": "AclUtilsTest::::isColonTest()",
      "171": "AclUtilsTest::::isMinusTest()",
      "172": "AclUtilsTest::::isMinusTest()",
      "173": "AclUtilsTest::::isMinusTest()",
      "174": "AclUtilsTest::::isMinusTest()",
      "175": "AclUtilsTest::::isMinusTest()",
      "176": "AclUtilsTest::::isMinusTest()",
      "177": "AclUtilsTest::::isMinusTest()",
      "178": "AclUtilsTest::::isMinusTest()",
      "180": "AclUtilsTest::::v6ipProcessTest()",
      "181": "AclUtilsTest::::v6ipProcessTest()",
      "182": "AclUtilsTest::::v6ipProcessTest()",
      "183": "AclUtilsTest::::v6ipProcessTest()",
      "184": "AclUtilsTest::::v6ipProcessTest()",
      "185": "AclUtilsTest::::v6ipProcessTest()",
      "186": "AclUtilsTest::::v6ipProcessTest()",
      "187": "AclUtilsTest::::v6ipProcessTest()",
      "188": "AclUtilsTest::::v6ipProcessTest()",
      "189": "AclUtilsTest::::v6ipProcessTest()",
      "190": "AclUtilsTest::::v6ipProcessTest()",
      "191": "AclUtilsTest::::v6ipProcessTest()",
      "192": "AclUtilsTest::::v6ipProcessTest()",
      "193": "AclUtilsTest::::v6ipProcessTest()",
      "194": "AclUtilsTest::::v6ipProcessTest()",
      "195": "AclUtilsTest::::v6ipProcessTest()",
      "196": "AclUtilsTest::::v6ipProcessTest()",
      "197": "AclUtilsTest::::v6ipProcessTest()",
      "198": "AclUtilsTest::::v6ipProcessTest()",
      "199": "AclUtilsTest::::v6ipProcessTest()",
      "200": "AclUtilsTest::::v6ipProcessTest()",
      "201": "AclUtilsTest::::v6ipProcessTest()",
      "203": "AclUtilsTest::::expandIPTest()",
      "204": "AclUtilsTest::::expandIPTest()",
      "205": "AclUtilsTest::::expandIPTest()",
      "206": "AclUtilsTest::::expandIPTest()",
      "207": "AclUtilsTest::::expandIPTest()",
      "208": "AclUtilsTest::::expandIPTest()",
      "209": "AclUtilsTest::::expandIPTest()",
      "210": "AclUtilsTest::::expandIPTest()",
      "211": "AclUtilsTest::::expandIPTest()",
      "212": "AclUtilsTest::::expandIPTest()",
      "214": "AclUtilsTest::::getYamlDataObjectTest()",
      "215": "AclUtilsTest::::getYamlDataObjectTest()",
      "216": "AclUtilsTest::::getYamlDataObjectTest()",
      "217": "AclUtilsTest::::getYamlDataObjectTest()",
      "218": "AclUtilsTest::::getYamlDataObjectTest()",
      "219": "AclUtilsTest::::getYamlDataObjectTest()",
      "220": "AclUtilsTest::::getYamlDataObjectTest()",
      "222": "AclUtilsTest::::writeDataObject2YamlFileTest()",
      "223": "AclUtilsTest::::writeDataObject2YamlFileTest()",
      "224": "AclUtilsTest::::writeDataObject2YamlFileTest()",
      "225": "AclUtilsTest::::writeDataObject2YamlFileTest()",
      "226": "AclUtilsTest::::writeDataObject2YamlFileTest()",
      "227": "AclUtilsTest::::writeDataObject2YamlFileTest()",
      "228": "AclUtilsTest::::writeDataObject2YamlFileTest()",
      "229": "AclUtilsTest::::writeDataObject2YamlFileTest()",
      "230": "AclUtilsTest::::writeDataObject2YamlFileTest()",
      "231": "AclUtilsTest::::writeDataObject2YamlFileTest()",
      "232": "AclUtilsTest::::writeDataObject2YamlFileTest()",
      "233": "AclUtilsTest::::writeDataObject2YamlFileTest()",
      "234": "AclUtilsTest::::writeDataObject2YamlFileTest()",
      "235": "AclUtilsTest::::writeDataObject2YamlFileTest()",
      "236": "AclUtilsTest::::writeDataObject2YamlFileTest()",
      "237": "AclUtilsTest::::writeDataObject2YamlFileTest()",
      "238": "AclUtilsTest::::writeDataObject2YamlFileTest()",
      "239": "AclUtilsTest::::writeDataObject2YamlFileTest()",
      "240": "AclUtilsTest::::writeDataObject2YamlFileTest()",
      "241": "AclUtilsTest::::writeDataObject2YamlFileTest()",
      "242": "AclUtilsTest::::writeDataObject2YamlFileTest()",
      "243": "AclUtilsTest::::writeDataObject2YamlFileTest()",
      "244": "AclUtilsTest::::writeDataObject2YamlFileTest()",
      "245": "AclUtilsTest::::writeDataObject2YamlFileTest()",
      "246": "AclUtilsTest::::writeDataObject2YamlFileTest()",
      "247": "AclUtilsTest::::writeDataObject2YamlFileTest()",
      "248": "AclUtilsTest::::writeDataObject2YamlFileTest()",
      "249": "AclUtilsTest::::writeDataObject2YamlFileTest()",
      "250": "AclUtilsTest::::writeDataObject2YamlFileTest()",
      "251": "AclUtilsTest::::writeDataObject2YamlFileTest()",
      "252": "AclUtilsTest::::writeDataObject2YamlFileTest()",
      "253": "AclUtilsTest::::writeDataObject2YamlFileTest()",
      "255": "AclUtilsTest::::updateExistedYamlFileTest()",
      "256": "AclUtilsTest::::updateExistedYamlFileTest()",
      "257": "AclUtilsTest::::updateExistedYamlFileTest()",
      "258": "AclUtilsTest::::updateExistedYamlFileTest()",
      "259": "AclUtilsTest::::updateExistedYamlFileTest()",
      "260": "AclUtilsTest::::updateExistedYamlFileTest()",
      "261": "AclUtilsTest::::updateExistedYamlFileTest()",
      "262": "AclUtilsTest::::updateExistedYamlFileTest()",
      "263": "AclUtilsTest::::updateExistedYamlFileTest()",
      "264": "AclUtilsTest::::updateExistedYamlFileTest()",
      "265": "AclUtilsTest::::updateExistedYamlFileTest()",
      "266": "AclUtilsTest::::updateExistedYamlFileTest()",
      "267": "AclUtilsTest::::updateExistedYamlFileTest()",
      "268": "AclUtilsTest::::updateExistedYamlFileTest()",
      "269": "AclUtilsTest::::updateExistedYamlFileTest()",
      "270": "AclUtilsTest::::updateExistedYamlFileTest()",
      "271": "AclUtilsTest::::updateExistedYamlFileTest()",
      "272": "AclUtilsTest::::updateExistedYamlFileTest()",
      "273": "AclUtilsTest::::updateExistedYamlFileTest()",
      "274": "AclUtilsTest::::updateExistedYamlFileTest()",
      "275": "AclUtilsTest::::updateExistedYamlFileTest()",
      "276": "AclUtilsTest::::updateExistedYamlFileTest()",
      "277": "AclUtilsTest::::updateExistedYamlFileTest()",
      "278": "AclUtilsTest::::updateExistedYamlFileTest()",
      "279": "AclUtilsTest::::updateExistedYamlFileTest()",
      "280": "AclUtilsTest::::updateExistedYamlFileTest()",
      "281": "AclUtilsTest::::updateExistedYamlFileTest()",
      "282": "AclUtilsTest::::updateExistedYamlFileTest()",
      "283": "AclUtilsTest::::updateExistedYamlFileTest()",
      "284": "AclUtilsTest::::updateExistedYamlFileTest()",
      "285": "AclUtilsTest::::updateExistedYamlFileTest()",
      "286": "AclUtilsTest::::updateExistedYamlFileTest()",
      "287": "AclUtilsTest::::updateExistedYamlFileTest()",
      "289": "AclUtilsTest::::getYamlDataIgnoreFileNotFoundExceptionTest()",
      "290": "AclUtilsTest::::getYamlDataIgnoreFileNotFoundExceptionTest()",
      "291": "AclUtilsTest::::getYamlDataIgnoreFileNotFoundExceptionTest()",
      "292": "AclUtilsTest::::getYamlDataIgnoreFileNotFoundExceptionTest()",
      "293": "AclUtilsTest::::getYamlDataIgnoreFileNotFoundExceptionTest()",
      "294": "AclUtilsTest::::getYamlDataIgnoreFileNotFoundExceptionTest()",
      "296": "AclUtilsTest::::getYamlDataExceptionTest()",
      "297": "AclUtilsTest::::getYamlDataExceptionTest()",
      "298": "AclUtilsTest::::getYamlDataExceptionTest()",
      "299": "AclUtilsTest::::getYamlDataExceptionTest()",
      "300": "AclUtilsTest::::getYamlDataExceptionTest()",
      "302": "AclUtilsTest::::getAclRPCHookTest()",
      "303": "AclUtilsTest::::getAclRPCHookTest()",
      "304": "AclUtilsTest::::getAclRPCHookTest()",
      "305": "AclUtilsTest::::getAclRPCHookTest()",
      "306": "AclUtilsTest::::getAclRPCHookTest()",
      "307": "AclUtilsTest::::getAclRPCHookTest()",
      "308": "AclUtilsTest::::getAclRPCHookTest()",
      "309": "AclUtilsTest::::getAclRPCHookTest()",
      "310": "AclUtilsTest::::getAclRPCHookTest()",
      "311": "AclUtilsTest::::getAclRPCHookTest()",
      "312": "AclUtilsTest::::getAclRPCHookTest()",
      "313": "AclUtilsTest::::getAclRPCHookTest()",
      "314": "AclUtilsTest::::getAclRPCHookTest()",
      "315": "AclUtilsTest::::getAclRPCHookTest()",
      "316": "AclUtilsTest::::getAclRPCHookTest()"
    },
    "tests": [
      {
        "test_lines": [
          34,
          64
        ],
        "covered_lines": [
          41,
          124,
          125,
          126,
          127,
          128,
          130
        ]
      },
      {
        "test_lines": [
          66,
          79
        ],
        "covered_lines": [
          41,
          135,
          141,
          142,
          143,
          145,
          150,
          153,
          154,
          158,
          163,
          167,
          171
        ]
      },
      {
        "test_lines": [
          81,
          114
        ],
        "covered_lines": [
          41,
          150,
          153,
          154,
          155,
          158,
          167,
          171,
          188,
          191,
          192,
          193,
          194,
          195,
          199,
          203,
          204,
          205,
          209,
          210,
          211,
          212,
          213,
          214,
          215,
          216,
          217,
          219,
          223,
          224,
          229,
          230,
          231,
          232,
          233,
          234,
          235,
          236,
          239,
          240,
          248,
          249,
          251,
          252,
          253,
          254,
          258,
          266
        ]
      },
      {
        "test_lines": [
          116,
          126
        ],
        "covered_lines": [
          41,
          167,
          171
        ]
      },
      {
        "test_lines": [
          128,
          151
        ],
        "covered_lines": [
          41,
          171,
          203,
          204,
          205
        ]
      },
      {
        "test_lines": [
          153,
          160
        ],
        "covered_lines": [
          41,
          175
        ]
      },
      {
        "test_lines": [
          162,
          169
        ],
        "covered_lines": [
          41,
          179
        ]
      },
      {
        "test_lines": [
          171,
          178
        ],
        "covered_lines": [
          41,
          183
        ]
      },
      {
        "test_lines": [
          180,
          201
        ],
        "covered_lines": [
          41,
          100,
          101,
          102,
          103,
          104,
          105,
          106,
          107,
          111,
          112,
          114,
          175,
          183,
          209,
          210,
          211,
          212,
          213,
          214,
          215,
          216,
          217,
          219,
          223,
          224,
          225,
          229,
          230,
          231,
          232,
          233,
          234,
          235,
          236,
          239,
          240,
          248,
          249,
          251,
          252,
          253,
          254,
          258,
          259,
          260,
          261,
          262,
          266
        ]
      },
      {
        "test_lines": [
          203,
          212
        ],
        "covered_lines": [
          41,
          209,
          210,
          211,
          212,
          213,
          214,
          215,
          216,
          217,
          219,
          223,
          224,
          225,
          229,
          230,
          231,
          232,
          233,
          234,
          235,
          236,
          239,
          240,
          241,
          242,
          243,
          244,
          248,
          249,
          251,
          252,
          253,
          254,
          258,
          259,
          260,
          261,
          262,
          266
        ]
      },
      {
        "test_lines": [
          214,
          220
        ],
        "covered_lines": [
          41,
          270,
          271,
          273,
          274,
          280,
          282,
          284
        ]
      },
      {
        "test_lines": [
          222,
          253
        ],
        "covered_lines": [
          41,
          290,
          291,
          293,
          294,
          295,
          296,
          300,
          301,
          304
        ]
      },
      {
        "test_lines": [
          255,
          287
        ],
        "covered_lines": [
          41,
          270,
          271,
          273,
          274,
          280,
          282,
          284,
          290,
          291,
          293,
          294,
          295,
          296,
          300,
          301,
          304
        ]
      },
      {
        "test_lines": [
          289,
          294
        ],
        "covered_lines": [
          41,
          270,
          271,
          275,
          276,
          280
        ]
      },
      {
        "test_lines": [
          296,
          300
        ],
        "covered_lines": [
          41,
          270,
          271,
          273,
          277,
          278,
          280,
          282,
          284,
          286
        ]
      },
      {
        "test_lines": [
          302,
          316
        ],
        "covered_lines": [
          41,
          270,
          271,
          273,
          274,
          275,
          276,
          277,
          278,
          280,
          282,
          284,
          286,
          308,
          310,
          312,
          313,
          314,
          315,
          317,
          318,
          319,
          322,
          323,
          325,
          326,
          328
        ]
      }
    ]
  },
  "/bernard/dataset_construction/prep/repos/RocketMQC/acl/src/main/java/org/apache/rocketmq/acl/common/Permission.java": {
    "class_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.acl.common;\n",
      "\n",
      "import java.util.HashSet;\n",
      "import java.util.List;\n",
      "import java.util.Set;\n",
      "import org.apache.commons.lang3.StringUtils;\n",
      "import org.apache.rocketmq.acl.plain.PlainAccessResource;\n",
      "import org.apache.rocketmq.common.protocol.RequestCode;\n",
      "\n",
      "public class Permission {\n",
      "\n",
      "    public static final byte DENY = 1;\n",
      "    public static final byte ANY = 1 << 1;\n",
      "    public static final byte PUB = 1 << 2;\n",
      "    public static final byte SUB = 1 << 3;\n",
      "\n",
      "    public static final Set<Integer> ADMIN_CODE = new HashSet<Integer>();\n",
      "\n",
      "    static {\n",
      "        // UPDATE_AND_CREATE_TOPIC\n",
      "        ADMIN_CODE.add(RequestCode.UPDATE_AND_CREATE_TOPIC);\n",
      "        // UPDATE_BROKER_CONFIG\n",
      "        ADMIN_CODE.add(RequestCode.UPDATE_BROKER_CONFIG);\n",
      "        // DELETE_TOPIC_IN_BROKER\n",
      "        ADMIN_CODE.add(RequestCode.DELETE_TOPIC_IN_BROKER);\n",
      "        // UPDATE_AND_CREATE_SUBSCRIPTIONGROUP\n",
      "        ADMIN_CODE.add(RequestCode.UPDATE_AND_CREATE_SUBSCRIPTIONGROUP);\n",
      "        // DELETE_SUBSCRIPTIONGROUP\n",
      "        ADMIN_CODE.add(RequestCode.DELETE_SUBSCRIPTIONGROUP);\n",
      "    }\n",
      "\n",
      "    public static boolean checkPermission(byte neededPerm, byte ownedPerm) {\n",
      "        if ((ownedPerm & DENY) > 0) {\n",
      "            return false;\n",
      "        }\n",
      "        if ((neededPerm & ANY) > 0) {\n",
      "            return ((ownedPerm & PUB) > 0) || ((ownedPerm & SUB) > 0);\n",
      "        }\n",
      "        return (neededPerm & ownedPerm) > 0;\n",
      "    }\n",
      "\n",
      "    public static byte parsePermFromString(String permString) {\n",
      "        if (permString == null) {\n",
      "            return Permission.DENY;\n",
      "        }\n",
      "        switch (permString.trim()) {\n",
      "            case \"PUB\":\n",
      "                return Permission.PUB;\n",
      "            case \"SUB\":\n",
      "                return Permission.SUB;\n",
      "            case \"PUB|SUB\":\n",
      "            case \"SUB|PUB\":\n",
      "                return Permission.PUB | Permission.SUB;\n",
      "            case \"DENY\":\n",
      "                return Permission.DENY;\n",
      "            default:\n",
      "                return Permission.DENY;\n",
      "        }\n",
      "    }\n",
      "\n",
      "    public static void parseResourcePerms(PlainAccessResource plainAccessResource, Boolean isTopic,\n",
      "        List<String> resources) {\n",
      "        if (resources == null || resources.isEmpty()) {\n",
      "            return;\n",
      "        }\n",
      "        for (String resource : resources) {\n",
      "            String[] items = StringUtils.split(resource, \"=\");\n",
      "            if (items.length == 2) {\n",
      "                plainAccessResource.addResourceAndPerm(isTopic ? items[0].trim() : PlainAccessResource.getRetryTopic(items[0].trim()), parsePermFromString(items[1].trim()));\n",
      "            } else {\n",
      "                throw new AclException(String.format(\"Parse resource permission failed for %s:%s\", isTopic ? \"topic\" : \"group\", resource));\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    public static boolean needAdminPerm(Integer code) {\n",
      "        return ADMIN_CODE.contains(code);\n",
      "    }\n",
      "}\n"
    ],
    "test_content": [
      "/*\n",
      " * Licensed to the Apache Software Foundation (ASF) under one or more\n",
      " * contributor license agreements.  See the NOTICE file distributed with\n",
      " * this work for additional information regarding copyright ownership.\n",
      " * The ASF licenses this file to You under the Apache License, Version 2.0\n",
      " * (the \"License\"); you may not use this file except in compliance with\n",
      " * the License.  You may obtain a copy of the License at\n",
      " *\n",
      " *     http://www.apache.org/licenses/LICENSE-2.0\n",
      " *\n",
      " * Unless required by applicable law or agreed to in writing, software\n",
      " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      " * See the License for the specific language governing permissions and\n",
      " * limitations under the License.\n",
      " */\n",
      "package org.apache.rocketmq.acl.common;\n",
      "\n",
      "import java.util.ArrayList;\n",
      "import java.util.HashSet;\n",
      "import java.util.List;\n",
      "import java.util.Map;\n",
      "import java.util.Set;\n",
      "import org.apache.rocketmq.acl.plain.PlainAccessResource;\n",
      "import org.junit.Assert;\n",
      "import org.junit.Test;\n",
      "\n",
      "public class PermissionTest {\n",
      "\n",
      "    @Test\n",
      "    public void fromStringGetPermissionTest() {\n",
      "        byte perm = Permission.parsePermFromString(\"PUB\");\n",
      "        Assert.assertEquals(perm, Permission.PUB);\n",
      "\n",
      "        perm = Permission.parsePermFromString(\"SUB\");\n",
      "        Assert.assertEquals(perm, Permission.SUB);\n",
      "\n",
      "        perm = Permission.parsePermFromString(\"PUB|SUB\");\n",
      "        Assert.assertEquals(perm, Permission.PUB|Permission.SUB);\n",
      "\n",
      "        perm = Permission.parsePermFromString(\"SUB|PUB\");\n",
      "        Assert.assertEquals(perm, Permission.PUB|Permission.SUB);\n",
      "\n",
      "        perm = Permission.parsePermFromString(\"DENY\");\n",
      "        Assert.assertEquals(perm, Permission.DENY);\n",
      "\n",
      "        perm = Permission.parsePermFromString(\"1\");\n",
      "        Assert.assertEquals(perm, Permission.DENY);\n",
      "\n",
      "        perm = Permission.parsePermFromString(null);\n",
      "        Assert.assertEquals(perm, Permission.DENY);\n",
      "\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void checkPermissionTest() {\n",
      "        boolean boo = Permission.checkPermission(Permission.DENY, Permission.DENY);\n",
      "        Assert.assertFalse(boo);\n",
      "\n",
      "        boo = Permission.checkPermission(Permission.PUB, Permission.PUB);\n",
      "        Assert.assertTrue(boo);\n",
      "\n",
      "        boo = Permission.checkPermission(Permission.SUB, Permission.SUB);\n",
      "        Assert.assertTrue(boo);\n",
      "\n",
      "        boo = Permission.checkPermission(Permission.PUB, (byte) (Permission.PUB|Permission.SUB));\n",
      "        Assert.assertTrue(boo);\n",
      "\n",
      "        boo = Permission.checkPermission(Permission.SUB, (byte) (Permission.PUB|Permission.SUB));\n",
      "        Assert.assertTrue(boo);\n",
      "\n",
      "        boo = Permission.checkPermission(Permission.ANY, (byte) (Permission.PUB|Permission.SUB));\n",
      "        Assert.assertTrue(boo);\n",
      "\n",
      "        boo = Permission.checkPermission(Permission.ANY, Permission.SUB);\n",
      "        Assert.assertTrue(boo);\n",
      "\n",
      "        boo = Permission.checkPermission(Permission.ANY, Permission.PUB);\n",
      "        Assert.assertTrue(boo);\n",
      "\n",
      "        boo = Permission.checkPermission(Permission.DENY, Permission.ANY);\n",
      "        Assert.assertFalse(boo);\n",
      "\n",
      "        boo = Permission.checkPermission(Permission.DENY, Permission.PUB);\n",
      "        Assert.assertFalse(boo);\n",
      "\n",
      "        boo = Permission.checkPermission(Permission.DENY, Permission.SUB);\n",
      "        Assert.assertFalse(boo);\n",
      "\n",
      "    }\n",
      "\n",
      "    @Test(expected = AclException.class)\n",
      "    public void setTopicPermTest() {\n",
      "        PlainAccessResource plainAccessResource = new PlainAccessResource();\n",
      "        Map<String, Byte> resourcePermMap = plainAccessResource.getResourcePermMap();\n",
      "\n",
      "        Permission.parseResourcePerms(plainAccessResource, false, null);\n",
      "        Assert.assertNull(resourcePermMap);\n",
      "\n",
      "        List<String> groups = new ArrayList<>();\n",
      "        Permission.parseResourcePerms(plainAccessResource, false, groups);\n",
      "        Assert.assertNull(resourcePermMap);\n",
      "\n",
      "        groups.add(\"groupA=DENY\");\n",
      "        groups.add(\"groupB=PUB|SUB\");\n",
      "        groups.add(\"groupC=PUB\");\n",
      "        Permission.parseResourcePerms(plainAccessResource, false, groups);\n",
      "        resourcePermMap = plainAccessResource.getResourcePermMap();\n",
      "\n",
      "        byte perm = resourcePermMap.get(PlainAccessResource.getRetryTopic(\"groupA\"));\n",
      "        Assert.assertEquals(perm, Permission.DENY);\n",
      "\n",
      "        perm = resourcePermMap.get(PlainAccessResource.getRetryTopic(\"groupB\"));\n",
      "        Assert.assertEquals(perm,Permission.PUB|Permission.SUB);\n",
      "\n",
      "        perm = resourcePermMap.get(PlainAccessResource.getRetryTopic(\"groupC\"));\n",
      "        Assert.assertEquals(perm, Permission.PUB);\n",
      "\n",
      "        List<String> topics = new ArrayList<>();\n",
      "        topics.add(\"topicA=DENY\");\n",
      "        topics.add(\"topicB=PUB|SUB\");\n",
      "        topics.add(\"topicC=PUB\");\n",
      "\n",
      "        Permission.parseResourcePerms(plainAccessResource, true, topics);\n",
      "\n",
      "        perm = resourcePermMap.get(\"topicA\");\n",
      "        Assert.assertEquals(perm, Permission.DENY);\n",
      "\n",
      "        perm = resourcePermMap.get(\"topicB\");\n",
      "        Assert.assertEquals(perm, Permission.PUB|Permission.SUB);\n",
      "\n",
      "        perm = resourcePermMap.get(\"topicC\");\n",
      "        Assert.assertEquals(perm, Permission.PUB);\n",
      "\n",
      "        List<String> erron = new ArrayList<>();\n",
      "        erron.add(\"\");\n",
      "        Permission.parseResourcePerms(plainAccessResource, false, erron);\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void checkAdminCodeTest() {\n",
      "        Set<Integer> code = new HashSet<>();\n",
      "        code.add(17);\n",
      "        code.add(25);\n",
      "        code.add(215);\n",
      "        code.add(200);\n",
      "        code.add(207);\n",
      "\n",
      "        for (int i = 0; i < 400; i++) {\n",
      "            boolean boo = Permission.needAdminPerm(i);\n",
      "            if (boo) {\n",
      "                Assert.assertTrue(code.contains(i));\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    @Test\n",
      "    public void AclExceptionTest(){\n",
      "        AclException aclException = new AclException(\"CAL_SIGNATURE_FAILED\",10015);\n",
      "        AclException aclExceptionWithMessage = new AclException(\"CAL_SIGNATURE_FAILED\",10015,\"CAL_SIGNATURE_FAILED Exception\");\n",
      "        Assert.assertEquals(aclException.getCode(),10015);\n",
      "        Assert.assertEquals(aclExceptionWithMessage.getStatus(),\"CAL_SIGNATURE_FAILED\");\n",
      "        aclException.setCode(10016);\n",
      "        Assert.assertEquals(aclException.getCode(),10016);\n",
      "        aclException.setStatus(\"netaddress examine scope Exception netaddress\");\n",
      "        Assert.assertEquals(aclException.getStatus(),\"netaddress examine scope Exception netaddress\");\n",
      "    }\n",
      "}\n"
    ],
    "method_lines_dic": {
      "Permission::::checkPermission(byte,byte)": [
        48,
        56
      ],
      "Permission::::parsePermFromString(java.lang.String)": [
        58,
        75
      ],
      "Permission::::parseResourcePerms(org.apache.rocketmq.acl.plain.PlainAccessResource,java.lang.Boolean,java.util.List<java.lang.String>)": [
        77,
        90
      ],
      "Permission::::needAdminPerm(java.lang.Integer)": [
        92,
        94
      ]
    },
    "test_method_lines_dic": {
      "PermissionTest::::fromStringGetPermissionTest()": [
        30,
        53
      ],
      "PermissionTest::::checkPermissionTest()": [
        55,
        90
      ],
      "PermissionTest::::setTopicPermTest()": [
        92,
        138
      ],
      "PermissionTest::::checkAdminCodeTest()": [
        140,
        155
      ],
      "PermissionTest::::AclExceptionTest()": [
        157,
        167
      ]
    },
    "reverse_method_lines_dic": {
      "48": "Permission::::checkPermission(byte,byte)",
      "49": "Permission::::checkPermission(byte,byte)",
      "50": "Permission::::checkPermission(byte,byte)",
      "51": "Permission::::checkPermission(byte,byte)",
      "52": "Permission::::checkPermission(byte,byte)",
      "53": "Permission::::checkPermission(byte,byte)",
      "54": "Permission::::checkPermission(byte,byte)",
      "55": "Permission::::checkPermission(byte,byte)",
      "56": "Permission::::checkPermission(byte,byte)",
      "58": "Permission::::parsePermFromString(java.lang.String)",
      "59": "Permission::::parsePermFromString(java.lang.String)",
      "60": "Permission::::parsePermFromString(java.lang.String)",
      "61": "Permission::::parsePermFromString(java.lang.String)",
      "62": "Permission::::parsePermFromString(java.lang.String)",
      "63": "Permission::::parsePermFromString(java.lang.String)",
      "64": "Permission::::parsePermFromString(java.lang.String)",
      "65": "Permission::::parsePermFromString(java.lang.String)",
      "66": "Permission::::parsePermFromString(java.lang.String)",
      "67": "Permission::::parsePermFromString(java.lang.String)",
      "68": "Permission::::parsePermFromString(java.lang.String)",
      "69": "Permission::::parsePermFromString(java.lang.String)",
      "70": "Permission::::parsePermFromString(java.lang.String)",
      "71": "Permission::::parsePermFromString(java.lang.String)",
      "72": "Permission::::parsePermFromString(java.lang.String)",
      "73": "Permission::::parsePermFromString(java.lang.String)",
      "74": "Permission::::parsePermFromString(java.lang.String)",
      "75": "Permission::::parsePermFromString(java.lang.String)",
      "77": "Permission::::parseResourcePerms(org.apache.rocketmq.acl.plain.PlainAccessResource,java.lang.Boolean,java.util.List<java.lang.String>)",
      "78": "Permission::::parseResourcePerms(org.apache.rocketmq.acl.plain.PlainAccessResource,java.lang.Boolean,java.util.List<java.lang.String>)",
      "79": "Permission::::parseResourcePerms(org.apache.rocketmq.acl.plain.PlainAccessResource,java.lang.Boolean,java.util.List<java.lang.String>)",
      "80": "Permission::::parseResourcePerms(org.apache.rocketmq.acl.plain.PlainAccessResource,java.lang.Boolean,java.util.List<java.lang.String>)",
      "81": "Permission::::parseResourcePerms(org.apache.rocketmq.acl.plain.PlainAccessResource,java.lang.Boolean,java.util.List<java.lang.String>)",
      "82": "Permission::::parseResourcePerms(org.apache.rocketmq.acl.plain.PlainAccessResource,java.lang.Boolean,java.util.List<java.lang.String>)",
      "83": "Permission::::parseResourcePerms(org.apache.rocketmq.acl.plain.PlainAccessResource,java.lang.Boolean,java.util.List<java.lang.String>)",
      "84": "Permission::::parseResourcePerms(org.apache.rocketmq.acl.plain.PlainAccessResource,java.lang.Boolean,java.util.List<java.lang.String>)",
      "85": "Permission::::parseResourcePerms(org.apache.rocketmq.acl.plain.PlainAccessResource,java.lang.Boolean,java.util.List<java.lang.String>)",
      "86": "Permission::::parseResourcePerms(org.apache.rocketmq.acl.plain.PlainAccessResource,java.lang.Boolean,java.util.List<java.lang.String>)",
      "87": "Permission::::parseResourcePerms(org.apache.rocketmq.acl.plain.PlainAccessResource,java.lang.Boolean,java.util.List<java.lang.String>)",
      "88": "Permission::::parseResourcePerms(org.apache.rocketmq.acl.plain.PlainAccessResource,java.lang.Boolean,java.util.List<java.lang.String>)",
      "89": "Permission::::parseResourcePerms(org.apache.rocketmq.acl.plain.PlainAccessResource,java.lang.Boolean,java.util.List<java.lang.String>)",
      "90": "Permission::::parseResourcePerms(org.apache.rocketmq.acl.plain.PlainAccessResource,java.lang.Boolean,java.util.List<java.lang.String>)",
      "92": "Permission::::needAdminPerm(java.lang.Integer)",
      "93": "Permission::::needAdminPerm(java.lang.Integer)",
      "94": "Permission::::needAdminPerm(java.lang.Integer)"
    },
    "test_reverse_method_lines_dic": {
      "30": "PermissionTest::::fromStringGetPermissionTest()",
      "31": "PermissionTest::::fromStringGetPermissionTest()",
      "32": "PermissionTest::::fromStringGetPermissionTest()",
      "33": "PermissionTest::::fromStringGetPermissionTest()",
      "34": "PermissionTest::::fromStringGetPermissionTest()",
      "35": "PermissionTest::::fromStringGetPermissionTest()",
      "36": "PermissionTest::::fromStringGetPermissionTest()",
      "37": "PermissionTest::::fromStringGetPermissionTest()",
      "38": "PermissionTest::::fromStringGetPermissionTest()",
      "39": "PermissionTest::::fromStringGetPermissionTest()",
      "40": "PermissionTest::::fromStringGetPermissionTest()",
      "41": "PermissionTest::::fromStringGetPermissionTest()",
      "42": "PermissionTest::::fromStringGetPermissionTest()",
      "43": "PermissionTest::::fromStringGetPermissionTest()",
      "44": "PermissionTest::::fromStringGetPermissionTest()",
      "45": "PermissionTest::::fromStringGetPermissionTest()",
      "46": "PermissionTest::::fromStringGetPermissionTest()",
      "47": "PermissionTest::::fromStringGetPermissionTest()",
      "48": "PermissionTest::::fromStringGetPermissionTest()",
      "49": "PermissionTest::::fromStringGetPermissionTest()",
      "50": "PermissionTest::::fromStringGetPermissionTest()",
      "51": "PermissionTest::::fromStringGetPermissionTest()",
      "52": "PermissionTest::::fromStringGetPermissionTest()",
      "53": "PermissionTest::::fromStringGetPermissionTest()",
      "55": "PermissionTest::::checkPermissionTest()",
      "56": "PermissionTest::::checkPermissionTest()",
      "57": "PermissionTest::::checkPermissionTest()",
      "58": "PermissionTest::::checkPermissionTest()",
      "59": "PermissionTest::::checkPermissionTest()",
      "60": "PermissionTest::::checkPermissionTest()",
      "61": "PermissionTest::::checkPermissionTest()",
      "62": "PermissionTest::::checkPermissionTest()",
      "63": "PermissionTest::::checkPermissionTest()",
      "64": "PermissionTest::::checkPermissionTest()",
      "65": "PermissionTest::::checkPermissionTest()",
      "66": "PermissionTest::::checkPermissionTest()",
      "67": "PermissionTest::::checkPermissionTest()",
      "68": "PermissionTest::::checkPermissionTest()",
      "69": "PermissionTest::::checkPermissionTest()",
      "70": "PermissionTest::::checkPermissionTest()",
      "71": "PermissionTest::::checkPermissionTest()",
      "72": "PermissionTest::::checkPermissionTest()",
      "73": "PermissionTest::::checkPermissionTest()",
      "74": "PermissionTest::::checkPermissionTest()",
      "75": "PermissionTest::::checkPermissionTest()",
      "76": "PermissionTest::::checkPermissionTest()",
      "77": "PermissionTest::::checkPermissionTest()",
      "78": "PermissionTest::::checkPermissionTest()",
      "79": "PermissionTest::::checkPermissionTest()",
      "80": "PermissionTest::::checkPermissionTest()",
      "81": "PermissionTest::::checkPermissionTest()",
      "82": "PermissionTest::::checkPermissionTest()",
      "83": "PermissionTest::::checkPermissionTest()",
      "84": "PermissionTest::::checkPermissionTest()",
      "85": "PermissionTest::::checkPermissionTest()",
      "86": "PermissionTest::::checkPermissionTest()",
      "87": "PermissionTest::::checkPermissionTest()",
      "88": "PermissionTest::::checkPermissionTest()",
      "89": "PermissionTest::::checkPermissionTest()",
      "90": "PermissionTest::::checkPermissionTest()",
      "92": "PermissionTest::::setTopicPermTest()",
      "93": "PermissionTest::::setTopicPermTest()",
      "94": "PermissionTest::::setTopicPermTest()",
      "95": "PermissionTest::::setTopicPermTest()",
      "96": "PermissionTest::::setTopicPermTest()",
      "97": "PermissionTest::::setTopicPermTest()",
      "98": "PermissionTest::::setTopicPermTest()",
      "99": "PermissionTest::::setTopicPermTest()",
      "100": "PermissionTest::::setTopicPermTest()",
      "101": "PermissionTest::::setTopicPermTest()",
      "102": "PermissionTest::::setTopicPermTest()",
      "103": "PermissionTest::::setTopicPermTest()",
      "104": "PermissionTest::::setTopicPermTest()",
      "105": "PermissionTest::::setTopicPermTest()",
      "106": "PermissionTest::::setTopicPermTest()",
      "107": "PermissionTest::::setTopicPermTest()",
      "108": "PermissionTest::::setTopicPermTest()",
      "109": "PermissionTest::::setTopicPermTest()",
      "110": "PermissionTest::::setTopicPermTest()",
      "111": "PermissionTest::::setTopicPermTest()",
      "112": "PermissionTest::::setTopicPermTest()",
      "113": "PermissionTest::::setTopicPermTest()",
      "114": "PermissionTest::::setTopicPermTest()",
      "115": "PermissionTest::::setTopicPermTest()",
      "116": "PermissionTest::::setTopicPermTest()",
      "117": "PermissionTest::::setTopicPermTest()",
      "118": "PermissionTest::::setTopicPermTest()",
      "119": "PermissionTest::::setTopicPermTest()",
      "120": "PermissionTest::::setTopicPermTest()",
      "121": "PermissionTest::::setTopicPermTest()",
      "122": "PermissionTest::::setTopicPermTest()",
      "123": "PermissionTest::::setTopicPermTest()",
      "124": "PermissionTest::::setTopicPermTest()",
      "125": "PermissionTest::::setTopicPermTest()",
      "126": "PermissionTest::::setTopicPermTest()",
      "127": "PermissionTest::::setTopicPermTest()",
      "128": "PermissionTest::::setTopicPermTest()",
      "129": "PermissionTest::::setTopicPermTest()",
      "130": "PermissionTest::::setTopicPermTest()",
      "131": "PermissionTest::::setTopicPermTest()",
      "132": "PermissionTest::::setTopicPermTest()",
      "133": "PermissionTest::::setTopicPermTest()",
      "134": "PermissionTest::::setTopicPermTest()",
      "135": "PermissionTest::::setTopicPermTest()",
      "136": "PermissionTest::::setTopicPermTest()",
      "137": "PermissionTest::::setTopicPermTest()",
      "138": "PermissionTest::::setTopicPermTest()",
      "140": "PermissionTest::::checkAdminCodeTest()",
      "141": "PermissionTest::::checkAdminCodeTest()",
      "142": "PermissionTest::::checkAdminCodeTest()",
      "143": "PermissionTest::::checkAdminCodeTest()",
      "144": "PermissionTest::::checkAdminCodeTest()",
      "145": "PermissionTest::::checkAdminCodeTest()",
      "146": "PermissionTest::::checkAdminCodeTest()",
      "147": "PermissionTest::::checkAdminCodeTest()",
      "148": "PermissionTest::::checkAdminCodeTest()",
      "149": "PermissionTest::::checkAdminCodeTest()",
      "150": "PermissionTest::::checkAdminCodeTest()",
      "151": "PermissionTest::::checkAdminCodeTest()",
      "152": "PermissionTest::::checkAdminCodeTest()",
      "153": "PermissionTest::::checkAdminCodeTest()",
      "154": "PermissionTest::::checkAdminCodeTest()",
      "155": "PermissionTest::::checkAdminCodeTest()",
      "157": "PermissionTest::::AclExceptionTest()",
      "158": "PermissionTest::::AclExceptionTest()",
      "159": "PermissionTest::::AclExceptionTest()",
      "160": "PermissionTest::::AclExceptionTest()",
      "161": "PermissionTest::::AclExceptionTest()",
      "162": "PermissionTest::::AclExceptionTest()",
      "163": "PermissionTest::::AclExceptionTest()",
      "164": "PermissionTest::::AclExceptionTest()",
      "165": "PermissionTest::::AclExceptionTest()",
      "166": "PermissionTest::::AclExceptionTest()",
      "167": "PermissionTest::::AclExceptionTest()"
    },
    "tests": [
      {
        "test_lines": [
          30,
          53
        ],
        "covered_lines": [
          33,
          37,
          39,
          41,
          43,
          45,
          46,
          59,
          60,
          62,
          64,
          66,
          69,
          71,
          73
        ]
      },
      {
        "test_lines": [
          55,
          90
        ],
        "covered_lines": [
          33,
          37,
          39,
          41,
          43,
          45,
          46,
          49,
          50,
          52,
          53,
          55
        ]
      },
      {
        "test_lines": [
          92,
          138
        ],
        "covered_lines": [
          33,
          37,
          39,
          41,
          43,
          45,
          46,
          59,
          62,
          64,
          69,
          71,
          79,
          80,
          82,
          83,
          84,
          85,
          87,
          89,
          90
        ]
      },
      {
        "test_lines": [
          140,
          155
        ],
        "covered_lines": [
          33,
          37,
          39,
          41,
          43,
          45,
          46,
          93
        ]
      }
    ]
  }
}