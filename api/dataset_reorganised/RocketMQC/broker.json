{"/bernard/dataset_construction/prep/repos/RocketMQC/broker/src/main/java/org/apache/rocketmq/broker/BrokerStartup.java": {"class_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "package org.apache.rocketmq.broker;\n", "\n", "import ch.qos.logback.classic.LoggerContext;\n", "import ch.qos.logback.classic.joran.JoranConfigurator;\n", "import org.apache.commons.cli.CommandLine;\n", "import org.apache.commons.cli.Option;\n", "import org.apache.commons.cli.Options;\n", "import org.apache.commons.cli.PosixParser;\n", "import org.apache.rocketmq.common.BrokerConfig;\n", "import org.apache.rocketmq.common.MQVersion;\n", "import org.apache.rocketmq.common.MixAll;\n", "import org.apache.rocketmq.common.constant.LoggerName;\n", "import org.apache.rocketmq.logging.InternalLogger;\n", "import org.apache.rocketmq.logging.InternalLoggerFactory;\n", "import org.apache.rocketmq.remoting.common.RemotingUtil;\n", "import org.apache.rocketmq.remoting.common.TlsMode;\n", "import org.apache.rocketmq.remoting.netty.NettyClientConfig;\n", "import org.apache.rocketmq.remoting.netty.NettyServerConfig;\n", "import org.apache.rocketmq.remoting.netty.NettySystemConfig;\n", "import org.apache.rocketmq.remoting.netty.TlsSystemConfig;\n", "import org.apache.rocketmq.remoting.protocol.RemotingCommand;\n", "import org.apache.rocketmq.srvutil.ServerUtil;\n", "import org.apache.rocketmq.store.config.BrokerRole;\n", "import org.apache.rocketmq.store.config.MessageStoreConfig;\n", "import org.slf4j.LoggerFactory;\n", "\n", "import java.io.BufferedInputStream;\n", "import java.io.FileInputStream;\n", "import java.io.InputStream;\n", "import java.util.Properties;\n", "import java.util.concurrent.atomic.AtomicInteger;\n", "\n", "import static org.apache.rocketmq.remoting.netty.TlsSystemConfig.TLS_ENABLE;\n", "\n", "public class BrokerStartup {\n", "    public static Properties properties = null;\n", "    public static CommandLine commandLine = null;\n", "    public static String configFile = null;\n", "    public static InternalLogger log;\n", "\n", "    public static void main(String[] args) {\n", "        start(createBrokerController(args));\n", "    }\n", "\n", "    public static BrokerController start(BrokerController controller) {\n", "        try {\n", "\n", "            controller.start();\n", "\n", "            String tip = \"The broker[\" + controller.getBrokerConfig().getBrokerName() + \", \"\n", "                + controller.getBrokerAddr() + \"] boot success. serializeType=\" + RemotingCommand.getSerializeTypeConfigInThisServer();\n", "\n", "            if (null != controller.getBrokerConfig().getNamesrvAddr()) {\n", "                tip += \" and name server is \" + controller.getBrokerConfig().getNamesrvAddr();\n", "            }\n", "\n", "            log.info(tip);\n", "            System.out.printf(\"%s%n\", tip);\n", "            return controller;\n", "        } catch (Throwable e) {\n", "            e.printStackTrace();\n", "            System.exit(-1);\n", "        }\n", "\n", "        return null;\n", "    }\n", "\n", "    public static void shutdown(final BrokerController controller) {\n", "        if (null != controller) {\n", "            controller.shutdown();\n", "        }\n", "    }\n", "\n", "    public static BrokerController createBrokerController(String[] args) {\n", "        System.setProperty(RemotingCommand.REMOTING_VERSION_KEY, Integer.toString(MQVersion.CURRENT_VERSION));\n", "\n", "        if (null == System.getProperty(NettySystemConfig.COM_ROCKETMQ_REMOTING_SOCKET_SNDBUF_SIZE)) {\n", "            NettySystemConfig.socketSndbufSize = 131072;\n", "        }\n", "\n", "        if (null == System.getProperty(NettySystemConfig.COM_ROCKETMQ_REMOTING_SOCKET_RCVBUF_SIZE)) {\n", "            NettySystemConfig.socketRcvbufSize = 131072;\n", "        }\n", "\n", "        try {\n", "            //PackageConflictDetect.detectFastjson();\n", "            Options options = ServerUtil.buildCommandlineOptions(new Options());\n", "            commandLine = ServerUtil.parseCmdLine(\"mqbroker\", args, buildCommandlineOptions(options),\n", "                new PosixParser());\n", "            if (null == commandLine) {\n", "                System.exit(-1);\n", "            }\n", "\n", "            final BrokerConfig brokerConfig = new BrokerConfig();\n", "            final NettyServerConfig nettyServerConfig = new NettyServerConfig();\n", "            final NettyClientConfig nettyClientConfig = new NettyClientConfig();\n", "\n", "            nettyClientConfig.setUseTLS(Boolean.parseBoolean(System.getProperty(TLS_ENABLE,\n", "                String.valueOf(TlsSystemConfig.tlsMode == TlsMode.ENFORCING))));\n", "            nettyServerConfig.setListenPort(10911);\n", "            final MessageStoreConfig messageStoreConfig = new MessageStoreConfig();\n", "\n", "            if (BrokerRole.SLAVE == messageStoreConfig.getBrokerRole()) {\n", "                int ratio = messageStoreConfig.getAccessMessageInMemoryMaxRatio() - 10;\n", "                messageStoreConfig.setAccessMessageInMemoryMaxRatio(ratio);\n", "            }\n", "\n", "            if (commandLine.hasOption('c')) {\n", "                String file = commandLine.getOptionValue('c');\n", "                if (file != null) {\n", "                    configFile = file;\n", "                    InputStream in = new BufferedInputStream(new FileInputStream(file));\n", "                    properties = new Properties();\n", "                    properties.load(in);\n", "\n", "                    properties2SystemEnv(properties);\n", "                    MixAll.properties2Object(properties, brokerConfig);\n", "                    MixAll.properties2Object(properties, nettyServerConfig);\n", "                    MixAll.properties2Object(properties, nettyClientConfig);\n", "                    MixAll.properties2Object(properties, messageStoreConfig);\n", "\n", "                    BrokerPathConfigHelper.setBrokerConfigPath(file);\n", "                    in.close();\n", "                }\n", "            }\n", "\n", "            MixAll.properties2Object(ServerUtil.commandLine2Properties(commandLine), brokerConfig);\n", "\n", "            if (null == brokerConfig.getRocketmqHome()) {\n", "                System.out.printf(\"Please set the %s variable in your environment to match the location of the RocketMQ installation\", MixAll.ROCKETMQ_HOME_ENV);\n", "                System.exit(-2);\n", "            }\n", "\n", "            String namesrvAddr = brokerConfig.getNamesrvAddr();\n", "            if (null != namesrvAddr) {\n", "                try {\n", "                    String[] addrArray = namesrvAddr.split(\";\");\n", "                    for (String addr : addrArray) {\n", "                        RemotingUtil.string2SocketAddress(addr);\n", "                    }\n", "                } catch (Exception e) {\n", "                    System.out.printf(\n", "                        \"The Name Server Address[%s] illegal, please set it as follows, \\\"127.0.0.1:9876;192.168.0.1:9876\\\"%n\",\n", "                        namesrvAddr);\n", "                    System.exit(-3);\n", "                }\n", "            }\n", "\n", "            switch (messageStoreConfig.getBrokerRole()) {\n", "                case ASYNC_MASTER:\n", "                case SYNC_MASTER:\n", "                    brokerConfig.setBrokerId(MixAll.MASTER_ID);\n", "                    break;\n", "                case SLAVE:\n", "                    if (brokerConfig.getBrokerId() <= 0) {\n", "                        System.out.printf(\"Slave's brokerId must be > 0\");\n", "                        System.exit(-3);\n", "                    }\n", "\n", "                    break;\n", "                default:\n", "                    break;\n", "            }\n", "\n", "            if (messageStoreConfig.isEnableDLegerCommitLog()) {\n", "                brokerConfig.setBrokerId(-1);\n", "            }\n", "\n", "            messageStoreConfig.setHaListenPort(nettyServerConfig.getListenPort() + 1);\n", "            LoggerContext lc = (LoggerContext) LoggerFactory.getILoggerFactory();\n", "            JoranConfigurator configurator = new JoranConfigurator();\n", "            configurator.setContext(lc);\n", "            lc.reset();\n", "            configurator.doConfigure(brokerConfig.getRocketmqHome() + \"/conf/logback_broker.xml\");\n", "\n", "            if (commandLine.hasOption('p')) {\n", "                InternalLogger console = InternalLoggerFactory.getLogger(LoggerName.BROKER_CONSOLE_NAME);\n", "                MixAll.printObjectProperties(console, brokerConfig);\n", "                MixAll.printObjectProperties(console, nettyServerConfig);\n", "                MixAll.printObjectProperties(console, nettyClientConfig);\n", "                MixAll.printObjectProperties(console, messageStoreConfig);\n", "                System.exit(0);\n", "            } else if (commandLine.hasOption('m')) {\n", "                InternalLogger console = InternalLoggerFactory.getLogger(LoggerName.BROKER_CONSOLE_NAME);\n", "                MixAll.printObjectProperties(console, brokerConfig, true);\n", "                MixAll.printObjectProperties(console, nettyServerConfig, true);\n", "                MixAll.printObjectProperties(console, nettyClientConfig, true);\n", "                MixAll.printObjectProperties(console, messageStoreConfig, true);\n", "                System.exit(0);\n", "            }\n", "\n", "            log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);\n", "            MixAll.printObjectProperties(log, brokerConfig);\n", "            MixAll.printObjectProperties(log, nettyServerConfig);\n", "            MixAll.printObjectProperties(log, nettyClientConfig);\n", "            MixAll.printObjectProperties(log, messageStoreConfig);\n", "\n", "            final BrokerController controller = new BrokerController(\n", "                brokerConfig,\n", "                nettyServerConfig,\n", "                nettyClientConfig,\n", "                messageStoreConfig);\n", "            // remember all configs to prevent discard\n", "            controller.getConfiguration().registerConfig(properties);\n", "\n", "            boolean initResult = controller.initialize();\n", "            if (!initResult) {\n", "                controller.shutdown();\n", "                System.exit(-3);\n", "            }\n", "\n", "            Runtime.getRuntime().addShutdownHook(new Thread(new Runnable() {\n", "                private volatile boolean hasShutdown = false;\n", "                private AtomicInteger shutdownTimes = new AtomicInteger(0);\n", "\n", "                @Override\n", "                public void run() {\n", "                    synchronized (this) {\n", "                        log.info(\"Shutdown hook was invoked, {}\", this.shutdownTimes.incrementAndGet());\n", "                        if (!this.hasShutdown) {\n", "                            this.hasShutdown = true;\n", "                            long beginTime = System.currentTimeMillis();\n", "                            controller.shutdown();\n", "                            long consumingTimeTotal = System.currentTimeMillis() - beginTime;\n", "                            log.info(\"Shutdown hook over, consuming total time(ms): {}\", consumingTimeTotal);\n", "                        }\n", "                    }\n", "                }\n", "            }, \"ShutdownHook\"));\n", "\n", "            return controller;\n", "        } catch (Throwable e) {\n", "            e.printStackTrace();\n", "            System.exit(-1);\n", "        }\n", "\n", "        return null;\n", "    }\n", "\n", "    private static void properties2SystemEnv(Properties properties) {\n", "        if (properties == null) {\n", "            return;\n", "        }\n", "        String rmqAddressServerDomain = properties.getProperty(\"rmqAddressServerDomain\", MixAll.WS_DOMAIN_NAME);\n", "        String rmqAddressServerSubGroup = properties.getProperty(\"rmqAddressServerSubGroup\", MixAll.WS_DOMAIN_SUBGROUP);\n", "        System.setProperty(\"rocketmq.namesrv.domain\", rmqAddressServerDomain);\n", "        System.setProperty(\"rocketmq.namesrv.domain.subgroup\", rmqAddressServerSubGroup);\n", "    }\n", "\n", "    private static Options buildCommandlineOptions(final Options options) {\n", "        Option opt = new Option(\"c\", \"configFile\", true, \"Broker config properties file\");\n", "        opt.setRequired(false);\n", "        options.addOption(opt);\n", "\n", "        opt = new Option(\"p\", \"printConfigItem\", false, \"Print all config item\");\n", "        opt.setRequired(false);\n", "        options.addOption(opt);\n", "\n", "        opt = new Option(\"m\", \"printImportantConfig\", false, \"Print important config item\");\n", "        opt.setRequired(false);\n", "        options.addOption(opt);\n", "\n", "        return options;\n", "    }\n", "}\n"], "test_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package org.apache.rocketmq.broker;\n", "\n", "import java.lang.reflect.InvocationTargetException;\n", "import java.lang.reflect.Method;\n", "import java.util.Properties;\n", "import org.junit.Assert;\n", "import org.junit.Test;\n", "\n", "public class BrokerStartupTest {\n", "\n", "    private String storePathRootDir = \".\";\n", "\n", "    @Test\n", "    public void testProperties2SystemEnv() throws NoSuchMethodException, InvocationTargetException,\n", "        IllegalAccessException {\n", "        Properties properties = new Properties();\n", "        Class<BrokerStartup> clazz = BrokerStartup.class;\n", "        Method method = clazz.getDeclaredMethod(\"properties2SystemEnv\", Properties.class);\n", "        method.setAccessible(true);\n", "        System.setProperty(\"rocketmq.namesrv.domain\", \"value\");\n", "        method.invoke(null, properties);\n", "        Assert.assertEquals(\"value\", System.getProperty(\"rocketmq.namesrv.domain\"));\n", "    }\n", "}"], "method_lines_dic": {"BrokerStartup::::main(java.lang.String[])": [57, 59], "BrokerStartup::::start(org.apache.rocketmq.broker.BrokerController)": [61, 82], "BrokerStartup::::shutdown(org.apache.rocketmq.broker.BrokerController)": [84, 88], "BrokerStartup::::createBrokerController(java.lang.String[])": [90, 254], "BrokerStartup::::properties2SystemEnv(java.util.Properties)": [256, 264]}, "test_method_lines_dic": {"BrokerStartupTest::::testProperties2SystemEnv()": [30, 40]}, "reverse_method_lines_dic": {"57": "BrokerStartup::::main(java.lang.String[])", "58": "BrokerStartup::::main(java.lang.String[])", "59": "BrokerStartup::::main(java.lang.String[])", "61": "BrokerStartup::::start(org.apache.rocketmq.broker.BrokerController)", "62": "BrokerStartup::::start(org.apache.rocketmq.broker.BrokerController)", "63": "BrokerStartup::::start(org.apache.rocketmq.broker.BrokerController)", "64": "BrokerStartup::::start(org.apache.rocketmq.broker.BrokerController)", "65": "BrokerStartup::::start(org.apache.rocketmq.broker.BrokerController)", "66": "BrokerStartup::::start(org.apache.rocketmq.broker.BrokerController)", "67": "BrokerStartup::::start(org.apache.rocketmq.broker.BrokerController)", "68": "BrokerStartup::::start(org.apache.rocketmq.broker.BrokerController)", "69": "BrokerStartup::::start(org.apache.rocketmq.broker.BrokerController)", "70": "BrokerStartup::::start(org.apache.rocketmq.broker.BrokerController)", "71": "BrokerStartup::::start(org.apache.rocketmq.broker.BrokerController)", "72": "BrokerStartup::::start(org.apache.rocketmq.broker.BrokerController)", "73": "BrokerStartup::::start(org.apache.rocketmq.broker.BrokerController)", "74": "BrokerStartup::::start(org.apache.rocketmq.broker.BrokerController)", "75": "BrokerStartup::::start(org.apache.rocketmq.broker.BrokerController)", "76": "BrokerStartup::::start(org.apache.rocketmq.broker.BrokerController)", "77": "BrokerStartup::::start(org.apache.rocketmq.broker.BrokerController)", "78": "BrokerStartup::::start(org.apache.rocketmq.broker.BrokerController)", "79": "BrokerStartup::::start(org.apache.rocketmq.broker.BrokerController)", "80": "BrokerStartup::::start(org.apache.rocketmq.broker.BrokerController)", "81": "BrokerStartup::::start(org.apache.rocketmq.broker.BrokerController)", "82": "BrokerStartup::::start(org.apache.rocketmq.broker.BrokerController)", "84": "BrokerStartup::::shutdown(org.apache.rocketmq.broker.BrokerController)", "85": "BrokerStartup::::shutdown(org.apache.rocketmq.broker.BrokerController)", "86": "BrokerStartup::::shutdown(org.apache.rocketmq.broker.BrokerController)", "87": "BrokerStartup::::shutdown(org.apache.rocketmq.broker.BrokerController)", "88": "BrokerStartup::::shutdown(org.apache.rocketmq.broker.BrokerController)", "90": "BrokerStartup::::createBrokerController(java.lang.String[])", "91": "BrokerStartup::::createBrokerController(java.lang.String[])", "92": "BrokerStartup::::createBrokerController(java.lang.String[])", "93": "BrokerStartup::::createBrokerController(java.lang.String[])", "94": "BrokerStartup::::createBrokerController(java.lang.String[])", "95": "BrokerStartup::::createBrokerController(java.lang.String[])", "96": "BrokerStartup::::createBrokerController(java.lang.String[])", "97": "BrokerStartup::::createBrokerController(java.lang.String[])", "98": "BrokerStartup::::createBrokerController(java.lang.String[])", "99": "BrokerStartup::::createBrokerController(java.lang.String[])", "100": "BrokerStartup::::createBrokerController(java.lang.String[])", "101": "BrokerStartup::::createBrokerController(java.lang.String[])", "102": "BrokerStartup::::createBrokerController(java.lang.String[])", "103": "BrokerStartup::::createBrokerController(java.lang.String[])", "104": "BrokerStartup::::createBrokerController(java.lang.String[])", "105": "BrokerStartup::::createBrokerController(java.lang.String[])", "106": "BrokerStartup::::createBrokerController(java.lang.String[])", "107": "BrokerStartup::::createBrokerController(java.lang.String[])", "108": "BrokerStartup::::createBrokerController(java.lang.String[])", "109": "BrokerStartup::::createBrokerController(java.lang.String[])", "110": "BrokerStartup::::createBrokerController(java.lang.String[])", "111": "BrokerStartup::::createBrokerController(java.lang.String[])", "112": "BrokerStartup::::createBrokerController(java.lang.String[])", "113": "BrokerStartup::::createBrokerController(java.lang.String[])", "114": "BrokerStartup::::createBrokerController(java.lang.String[])", "115": "BrokerStartup::::createBrokerController(java.lang.String[])", "116": "BrokerStartup::::createBrokerController(java.lang.String[])", "117": "BrokerStartup::::createBrokerController(java.lang.String[])", "118": "BrokerStartup::::createBrokerController(java.lang.String[])", "119": "BrokerStartup::::createBrokerController(java.lang.String[])", "120": "BrokerStartup::::createBrokerController(java.lang.String[])", "121": "BrokerStartup::::createBrokerController(java.lang.String[])", "122": "BrokerStartup::::createBrokerController(java.lang.String[])", "123": "BrokerStartup::::createBrokerController(java.lang.String[])", "124": "BrokerStartup::::createBrokerController(java.lang.String[])", "125": "BrokerStartup::::createBrokerController(java.lang.String[])", "126": "BrokerStartup::::createBrokerController(java.lang.String[])", "127": "BrokerStartup::::createBrokerController(java.lang.String[])", "128": "BrokerStartup::::createBrokerController(java.lang.String[])", "129": "BrokerStartup::::createBrokerController(java.lang.String[])", "130": "BrokerStartup::::createBrokerController(java.lang.String[])", "131": "BrokerStartup::::createBrokerController(java.lang.String[])", "132": "BrokerStartup::::createBrokerController(java.lang.String[])", "133": "BrokerStartup::::createBrokerController(java.lang.String[])", "134": "BrokerStartup::::createBrokerController(java.lang.String[])", "135": "BrokerStartup::::createBrokerController(java.lang.String[])", "136": "BrokerStartup::::createBrokerController(java.lang.String[])", "137": "BrokerStartup::::createBrokerController(java.lang.String[])", "138": "BrokerStartup::::createBrokerController(java.lang.String[])", "139": "BrokerStartup::::createBrokerController(java.lang.String[])", "140": "BrokerStartup::::createBrokerController(java.lang.String[])", "141": "BrokerStartup::::createBrokerController(java.lang.String[])", "142": "BrokerStartup::::createBrokerController(java.lang.String[])", "143": "BrokerStartup::::createBrokerController(java.lang.String[])", "144": "BrokerStartup::::createBrokerController(java.lang.String[])", "145": "BrokerStartup::::createBrokerController(java.lang.String[])", "146": "BrokerStartup::::createBrokerController(java.lang.String[])", "147": "BrokerStartup::::createBrokerController(java.lang.String[])", "148": "BrokerStartup::::createBrokerController(java.lang.String[])", "149": "BrokerStartup::::createBrokerController(java.lang.String[])", "150": "BrokerStartup::::createBrokerController(java.lang.String[])", "151": "BrokerStartup::::createBrokerController(java.lang.String[])", "152": "BrokerStartup::::createBrokerController(java.lang.String[])", "153": "BrokerStartup::::createBrokerController(java.lang.String[])", "154": "BrokerStartup::::createBrokerController(java.lang.String[])", "155": "BrokerStartup::::createBrokerController(java.lang.String[])", "156": "BrokerStartup::::createBrokerController(java.lang.String[])", "157": "BrokerStartup::::createBrokerController(java.lang.String[])", "158": "BrokerStartup::::createBrokerController(java.lang.String[])", "159": "BrokerStartup::::createBrokerController(java.lang.String[])", "160": "BrokerStartup::::createBrokerController(java.lang.String[])", "161": "BrokerStartup::::createBrokerController(java.lang.String[])", "162": "BrokerStartup::::createBrokerController(java.lang.String[])", "163": "BrokerStartup::::createBrokerController(java.lang.String[])", "164": "BrokerStartup::::createBrokerController(java.lang.String[])", "165": "BrokerStartup::::createBrokerController(java.lang.String[])", "166": "BrokerStartup::::createBrokerController(java.lang.String[])", "167": "BrokerStartup::::createBrokerController(java.lang.String[])", "168": "BrokerStartup::::createBrokerController(java.lang.String[])", "169": "BrokerStartup::::createBrokerController(java.lang.String[])", "170": "BrokerStartup::::createBrokerController(java.lang.String[])", "171": "BrokerStartup::::createBrokerController(java.lang.String[])", "172": "BrokerStartup::::createBrokerController(java.lang.String[])", "173": "BrokerStartup::::createBrokerController(java.lang.String[])", "174": "BrokerStartup::::createBrokerController(java.lang.String[])", "175": "BrokerStartup::::createBrokerController(java.lang.String[])", "176": "BrokerStartup::::createBrokerController(java.lang.String[])", "177": "BrokerStartup::::createBrokerController(java.lang.String[])", "178": "BrokerStartup::::createBrokerController(java.lang.String[])", "179": "BrokerStartup::::createBrokerController(java.lang.String[])", "180": "BrokerStartup::::createBrokerController(java.lang.String[])", "181": "BrokerStartup::::createBrokerController(java.lang.String[])", "182": "BrokerStartup::::createBrokerController(java.lang.String[])", "183": "BrokerStartup::::createBrokerController(java.lang.String[])", "184": "BrokerStartup::::createBrokerController(java.lang.String[])", "185": "BrokerStartup::::createBrokerController(java.lang.String[])", "186": "BrokerStartup::::createBrokerController(java.lang.String[])", "187": "BrokerStartup::::createBrokerController(java.lang.String[])", "188": "BrokerStartup::::createBrokerController(java.lang.String[])", "189": "BrokerStartup::::createBrokerController(java.lang.String[])", "190": "BrokerStartup::::createBrokerController(java.lang.String[])", "191": "BrokerStartup::::createBrokerController(java.lang.String[])", "192": "BrokerStartup::::createBrokerController(java.lang.String[])", "193": "BrokerStartup::::createBrokerController(java.lang.String[])", "194": "BrokerStartup::::createBrokerController(java.lang.String[])", "195": "BrokerStartup::::createBrokerController(java.lang.String[])", "196": "BrokerStartup::::createBrokerController(java.lang.String[])", "197": "BrokerStartup::::createBrokerController(java.lang.String[])", "198": "BrokerStartup::::createBrokerController(java.lang.String[])", "199": "BrokerStartup::::createBrokerController(java.lang.String[])", "200": "BrokerStartup::::createBrokerController(java.lang.String[])", "201": "BrokerStartup::::createBrokerController(java.lang.String[])", "202": "BrokerStartup::::createBrokerController(java.lang.String[])", "203": "BrokerStartup::::createBrokerController(java.lang.String[])", "204": "BrokerStartup::::createBrokerController(java.lang.String[])", "205": "BrokerStartup::::createBrokerController(java.lang.String[])", "206": "BrokerStartup::::createBrokerController(java.lang.String[])", "207": "BrokerStartup::::createBrokerController(java.lang.String[])", "208": "BrokerStartup::::createBrokerController(java.lang.String[])", "209": "BrokerStartup::::createBrokerController(java.lang.String[])", "210": "BrokerStartup::::createBrokerController(java.lang.String[])", "211": "BrokerStartup::::createBrokerController(java.lang.String[])", "212": "BrokerStartup::::createBrokerController(java.lang.String[])", "213": "BrokerStartup::::createBrokerController(java.lang.String[])", "214": "BrokerStartup::::createBrokerController(java.lang.String[])", "215": "BrokerStartup::::createBrokerController(java.lang.String[])", "216": "BrokerStartup::::createBrokerController(java.lang.String[])", "217": "BrokerStartup::::createBrokerController(java.lang.String[])", "218": "BrokerStartup::::createBrokerController(java.lang.String[])", "219": "BrokerStartup::::createBrokerController(java.lang.String[])", "220": "BrokerStartup::::createBrokerController(java.lang.String[])", "221": "BrokerStartup::::createBrokerController(java.lang.String[])", "222": "BrokerStartup::::createBrokerController(java.lang.String[])", "223": "BrokerStartup::::createBrokerController(java.lang.String[])", "224": "BrokerStartup::::createBrokerController(java.lang.String[])", "225": "BrokerStartup::::createBrokerController(java.lang.String[])", "226": "BrokerStartup::::createBrokerController(java.lang.String[])", "227": "BrokerStartup::::createBrokerController(java.lang.String[])", "228": "BrokerStartup::::createBrokerController(java.lang.String[])", "229": "BrokerStartup::::createBrokerController(java.lang.String[])", "230": "BrokerStartup::::createBrokerController(java.lang.String[])", "231": "BrokerStartup::::createBrokerController(java.lang.String[])", "232": "BrokerStartup::::createBrokerController(java.lang.String[])", "233": "BrokerStartup::::createBrokerController(java.lang.String[])", "234": "BrokerStartup::::createBrokerController(java.lang.String[])", "235": "BrokerStartup::::createBrokerController(java.lang.String[])", "236": "BrokerStartup::::createBrokerController(java.lang.String[])", "237": "BrokerStartup::::createBrokerController(java.lang.String[])", "238": "BrokerStartup::::createBrokerController(java.lang.String[])", "239": "BrokerStartup::::createBrokerController(java.lang.String[])", "240": "BrokerStartup::::createBrokerController(java.lang.String[])", "241": "BrokerStartup::::createBrokerController(java.lang.String[])", "242": "BrokerStartup::::createBrokerController(java.lang.String[])", "243": "BrokerStartup::::createBrokerController(java.lang.String[])", "244": "BrokerStartup::::createBrokerController(java.lang.String[])", "245": "BrokerStartup::::createBrokerController(java.lang.String[])", "246": "BrokerStartup::::createBrokerController(java.lang.String[])", "247": "BrokerStartup::::createBrokerController(java.lang.String[])", "248": "BrokerStartup::::createBrokerController(java.lang.String[])", "249": "BrokerStartup::::createBrokerController(java.lang.String[])", "250": "BrokerStartup::::createBrokerController(java.lang.String[])", "251": "BrokerStartup::::createBrokerController(java.lang.String[])", "252": "BrokerStartup::::createBrokerController(java.lang.String[])", "253": "BrokerStartup::::createBrokerController(java.lang.String[])", "254": "BrokerStartup::::createBrokerController(java.lang.String[])", "256": "BrokerStartup::::properties2SystemEnv(java.util.Properties)", "257": "BrokerStartup::::properties2SystemEnv(java.util.Properties)", "258": "BrokerStartup::::properties2SystemEnv(java.util.Properties)", "259": "BrokerStartup::::properties2SystemEnv(java.util.Properties)", "260": "BrokerStartup::::properties2SystemEnv(java.util.Properties)", "261": "BrokerStartup::::properties2SystemEnv(java.util.Properties)", "262": "BrokerStartup::::properties2SystemEnv(java.util.Properties)", "263": "BrokerStartup::::properties2SystemEnv(java.util.Properties)", "264": "BrokerStartup::::properties2SystemEnv(java.util.Properties)"}, "test_reverse_method_lines_dic": {"30": "BrokerStartupTest::::testProperties2SystemEnv()", "31": "BrokerStartupTest::::testProperties2SystemEnv()", "32": "BrokerStartupTest::::testProperties2SystemEnv()", "33": "BrokerStartupTest::::testProperties2SystemEnv()", "34": "BrokerStartupTest::::testProperties2SystemEnv()", "35": "BrokerStartupTest::::testProperties2SystemEnv()", "36": "BrokerStartupTest::::testProperties2SystemEnv()", "37": "BrokerStartupTest::::testProperties2SystemEnv()", "38": "BrokerStartupTest::::testProperties2SystemEnv()", "39": "BrokerStartupTest::::testProperties2SystemEnv()", "40": "BrokerStartupTest::::testProperties2SystemEnv()"}, "tests": [{"test_lines": [30, 40], "covered_lines": [52, 53, 54, 257, 260, 261, 262, 263, 264]}]}, "/bernard/dataset_construction/prep/repos/RocketMQC/broker/src/main/java/org/apache/rocketmq/broker/BrokerController.java": {"class_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "package org.apache.rocketmq.broker;\n", "\n", "import java.io.IOException;\n", "import java.net.InetSocketAddress;\n", "import java.util.ArrayList;\n", "import java.util.HashMap;\n", "import java.util.Iterator;\n", "import java.util.List;\n", "import java.util.Map;\n", "import java.util.concurrent.BlockingQueue;\n", "import java.util.concurrent.ConcurrentHashMap;\n", "import java.util.concurrent.ConcurrentMap;\n", "import java.util.concurrent.ExecutorService;\n", "import java.util.concurrent.Executors;\n", "import java.util.concurrent.Future;\n", "import java.util.concurrent.LinkedBlockingQueue;\n", "import java.util.concurrent.ScheduledExecutorService;\n", "import java.util.concurrent.ThreadPoolExecutor;\n", "import java.util.concurrent.TimeUnit;\n", "import org.apache.rocketmq.acl.AccessValidator;\n", "import org.apache.rocketmq.broker.client.ClientHousekeepingService;\n", "import org.apache.rocketmq.broker.client.ConsumerIdsChangeListener;\n", "import org.apache.rocketmq.broker.client.ConsumerManager;\n", "import org.apache.rocketmq.broker.client.DefaultConsumerIdsChangeListener;\n", "import org.apache.rocketmq.broker.client.ProducerManager;\n", "import org.apache.rocketmq.broker.client.net.Broker2Client;\n", "import org.apache.rocketmq.broker.client.rebalance.RebalanceLockManager;\n", "import org.apache.rocketmq.broker.dledger.DLedgerRoleChangeHandler;\n", "import org.apache.rocketmq.broker.filter.CommitLogDispatcherCalcBitMap;\n", "import org.apache.rocketmq.broker.filter.ConsumerFilterManager;\n", "import org.apache.rocketmq.broker.filtersrv.FilterServerManager;\n", "import org.apache.rocketmq.broker.latency.BrokerFastFailure;\n", "import org.apache.rocketmq.broker.latency.BrokerFixedThreadPoolExecutor;\n", "import org.apache.rocketmq.broker.longpolling.NotifyMessageArrivingListener;\n", "import org.apache.rocketmq.broker.longpolling.PullRequestHoldService;\n", "import org.apache.rocketmq.broker.mqtrace.ConsumeMessageHook;\n", "import org.apache.rocketmq.broker.mqtrace.SendMessageHook;\n", "import org.apache.rocketmq.broker.offset.ConsumerOffsetManager;\n", "import org.apache.rocketmq.broker.out.BrokerOuterAPI;\n", "import org.apache.rocketmq.broker.plugin.MessageStoreFactory;\n", "import org.apache.rocketmq.broker.plugin.MessageStorePluginContext;\n", "import org.apache.rocketmq.broker.processor.AdminBrokerProcessor;\n", "import org.apache.rocketmq.broker.processor.ClientManageProcessor;\n", "import org.apache.rocketmq.broker.processor.ConsumerManageProcessor;\n", "import org.apache.rocketmq.broker.processor.EndTransactionProcessor;\n", "import org.apache.rocketmq.broker.processor.PullMessageProcessor;\n", "import org.apache.rocketmq.broker.processor.QueryMessageProcessor;\n", "import org.apache.rocketmq.broker.processor.ReplyMessageProcessor;\n", "import org.apache.rocketmq.broker.processor.SendMessageProcessor;\n", "import org.apache.rocketmq.broker.slave.SlaveSynchronize;\n", "import org.apache.rocketmq.broker.subscription.SubscriptionGroupManager;\n", "import org.apache.rocketmq.broker.topic.TopicConfigManager;\n", "import org.apache.rocketmq.broker.transaction.AbstractTransactionalMessageCheckListener;\n", "import org.apache.rocketmq.broker.transaction.TransactionalMessageCheckService;\n", "import org.apache.rocketmq.broker.transaction.TransactionalMessageService;\n", "import org.apache.rocketmq.broker.transaction.queue.DefaultTransactionalMessageCheckListener;\n", "import org.apache.rocketmq.broker.transaction.queue.TransactionalMessageBridge;\n", "import org.apache.rocketmq.broker.transaction.queue.TransactionalMessageServiceImpl;\n", "import org.apache.rocketmq.broker.util.ServiceProvider;\n", "import org.apache.rocketmq.common.BrokerConfig;\n", "import org.apache.rocketmq.common.Configuration;\n", "import org.apache.rocketmq.common.DataVersion;\n", "import org.apache.rocketmq.common.ThreadFactoryImpl;\n", "import org.apache.rocketmq.common.TopicConfig;\n", "import org.apache.rocketmq.common.UtilAll;\n", "import org.apache.rocketmq.common.constant.LoggerName;\n", "import org.apache.rocketmq.common.constant.PermName;\n", "import org.apache.rocketmq.common.namesrv.RegisterBrokerResult;\n", "import org.apache.rocketmq.common.protocol.RequestCode;\n", "import org.apache.rocketmq.common.protocol.body.TopicConfigSerializeWrapper;\n", "import org.apache.rocketmq.common.stats.MomentStatsItem;\n", "import org.apache.rocketmq.logging.InternalLogger;\n", "import org.apache.rocketmq.logging.InternalLoggerFactory;\n", "import org.apache.rocketmq.remoting.RPCHook;\n", "import org.apache.rocketmq.remoting.RemotingServer;\n", "import org.apache.rocketmq.remoting.common.TlsMode;\n", "import org.apache.rocketmq.remoting.netty.NettyClientConfig;\n", "import org.apache.rocketmq.remoting.netty.NettyRemotingServer;\n", "import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;\n", "import org.apache.rocketmq.remoting.netty.NettyServerConfig;\n", "import org.apache.rocketmq.remoting.netty.RequestTask;\n", "import org.apache.rocketmq.remoting.netty.TlsSystemConfig;\n", "import org.apache.rocketmq.remoting.protocol.RemotingCommand;\n", "import org.apache.rocketmq.srvutil.FileWatchService;\n", "import org.apache.rocketmq.store.DefaultMessageStore;\n", "import org.apache.rocketmq.store.MessageArrivingListener;\n", "import org.apache.rocketmq.store.MessageStore;\n", "import org.apache.rocketmq.store.config.BrokerRole;\n", "import org.apache.rocketmq.store.config.MessageStoreConfig;\n", "import org.apache.rocketmq.store.dledger.DLedgerCommitLog;\n", "import org.apache.rocketmq.store.stats.BrokerStats;\n", "import org.apache.rocketmq.store.stats.BrokerStatsManager;\n", "\n", "public class BrokerController {\n", "    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);\n", "    private static final InternalLogger LOG_PROTECTION = InternalLoggerFactory.getLogger(LoggerName.PROTECTION_LOGGER_NAME);\n", "    private static final InternalLogger LOG_WATER_MARK = InternalLoggerFactory.getLogger(LoggerName.WATER_MARK_LOGGER_NAME);\n", "    private final BrokerConfig brokerConfig;\n", "    private final NettyServerConfig nettyServerConfig;\n", "    private final NettyClientConfig nettyClientConfig;\n", "    private final MessageStoreConfig messageStoreConfig;\n", "    private final ConsumerOffsetManager consumerOffsetManager;\n", "    private final ConsumerManager consumerManager;\n", "    private final ConsumerFilterManager consumerFilterManager;\n", "    private final ProducerManager producerManager;\n", "    private final ClientHousekeepingService clientHousekeepingService;\n", "    private final PullMessageProcessor pullMessageProcessor;\n", "    private final PullRequestHoldService pullRequestHoldService;\n", "    private final MessageArrivingListener messageArrivingListener;\n", "    private final Broker2Client broker2Client;\n", "    private final SubscriptionGroupManager subscriptionGroupManager;\n", "    private final ConsumerIdsChangeListener consumerIdsChangeListener;\n", "    private final RebalanceLockManager rebalanceLockManager = new RebalanceLockManager();\n", "    private final BrokerOuterAPI brokerOuterAPI;\n", "    private final ScheduledExecutorService scheduledExecutorService = Executors.newSingleThreadScheduledExecutor(new ThreadFactoryImpl(\n", "        \"BrokerControllerScheduledThread\"));\n", "    private final SlaveSynchronize slaveSynchronize;\n", "    private final BlockingQueue<Runnable> sendThreadPoolQueue;\n", "    private final BlockingQueue<Runnable> pullThreadPoolQueue;\n", "    private final BlockingQueue<Runnable> replyThreadPoolQueue;\n", "    private final BlockingQueue<Runnable> queryThreadPoolQueue;\n", "    private final BlockingQueue<Runnable> clientManagerThreadPoolQueue;\n", "    private final BlockingQueue<Runnable> heartbeatThreadPoolQueue;\n", "    private final BlockingQueue<Runnable> consumerManagerThreadPoolQueue;\n", "    private final BlockingQueue<Runnable> endTransactionThreadPoolQueue;\n", "    private final FilterServerManager filterServerManager;\n", "    private final BrokerStatsManager brokerStatsManager;\n", "    private final List<SendMessageHook> sendMessageHookList = new ArrayList<SendMessageHook>();\n", "    private final List<ConsumeMessageHook> consumeMessageHookList = new ArrayList<ConsumeMessageHook>();\n", "    private MessageStore messageStore;\n", "    private RemotingServer remotingServer;\n", "    private RemotingServer fastRemotingServer;\n", "    private TopicConfigManager topicConfigManager;\n", "    private ExecutorService sendMessageExecutor;\n", "    private ExecutorService pullMessageExecutor;\n", "    private ExecutorService replyMessageExecutor;\n", "    private ExecutorService queryMessageExecutor;\n", "    private ExecutorService adminBrokerExecutor;\n", "    private ExecutorService clientManageExecutor;\n", "    private ExecutorService heartbeatExecutor;\n", "    private ExecutorService consumerManageExecutor;\n", "    private ExecutorService endTransactionExecutor;\n", "    private boolean updateMasterHAServerAddrPeriodically = false;\n", "    private BrokerStats brokerStats;\n", "    private InetSocketAddress storeHost;\n", "    private BrokerFastFailure brokerFastFailure;\n", "    private Configuration configuration;\n", "    private FileWatchService fileWatchService;\n", "    private TransactionalMessageCheckService transactionalMessageCheckService;\n", "    private TransactionalMessageService transactionalMessageService;\n", "    private AbstractTransactionalMessageCheckListener transactionalMessageCheckListener;\n", "    private Future<?> slaveSyncFuture;\n", "    private Map<Class,AccessValidator> accessValidatorMap = new HashMap<Class, AccessValidator>();\n", "\n", "    public BrokerController(\n", "        final BrokerConfig brokerConfig,\n", "        final NettyServerConfig nettyServerConfig,\n", "        final NettyClientConfig nettyClientConfig,\n", "        final MessageStoreConfig messageStoreConfig\n", "    ) {\n", "        this.brokerConfig = brokerConfig;\n", "        this.nettyServerConfig = nettyServerConfig;\n", "        this.nettyClientConfig = nettyClientConfig;\n", "        this.messageStoreConfig = messageStoreConfig;\n", "        this.consumerOffsetManager = new ConsumerOffsetManager(this);\n", "        this.topicConfigManager = new TopicConfigManager(this);\n", "        this.pullMessageProcessor = new PullMessageProcessor(this);\n", "        this.pullRequestHoldService = new PullRequestHoldService(this);\n", "        this.messageArrivingListener = new NotifyMessageArrivingListener(this.pullRequestHoldService);\n", "        this.consumerIdsChangeListener = new DefaultConsumerIdsChangeListener(this);\n", "        this.consumerManager = new ConsumerManager(this.consumerIdsChangeListener);\n", "        this.consumerFilterManager = new ConsumerFilterManager(this);\n", "        this.producerManager = new ProducerManager();\n", "        this.clientHousekeepingService = new ClientHousekeepingService(this);\n", "        this.broker2Client = new Broker2Client(this);\n", "        this.subscriptionGroupManager = new SubscriptionGroupManager(this);\n", "        this.brokerOuterAPI = new BrokerOuterAPI(nettyClientConfig);\n", "        this.filterServerManager = new FilterServerManager(this);\n", "\n", "        this.slaveSynchronize = new SlaveSynchronize(this);\n", "\n", "        this.sendThreadPoolQueue = new LinkedBlockingQueue<Runnable>(this.brokerConfig.getSendThreadPoolQueueCapacity());\n", "        this.pullThreadPoolQueue = new LinkedBlockingQueue<Runnable>(this.brokerConfig.getPullThreadPoolQueueCapacity());\n", "        this.replyThreadPoolQueue = new LinkedBlockingQueue<Runnable>(this.brokerConfig.getReplyThreadPoolQueueCapacity());\n", "        this.queryThreadPoolQueue = new LinkedBlockingQueue<Runnable>(this.brokerConfig.getQueryThreadPoolQueueCapacity());\n", "        this.clientManagerThreadPoolQueue = new LinkedBlockingQueue<Runnable>(this.brokerConfig.getClientManagerThreadPoolQueueCapacity());\n", "        this.consumerManagerThreadPoolQueue = new LinkedBlockingQueue<Runnable>(this.brokerConfig.getConsumerManagerThreadPoolQueueCapacity());\n", "        this.heartbeatThreadPoolQueue = new LinkedBlockingQueue<Runnable>(this.brokerConfig.getHeartbeatThreadPoolQueueCapacity());\n", "        this.endTransactionThreadPoolQueue = new LinkedBlockingQueue<Runnable>(this.brokerConfig.getEndTransactionPoolQueueCapacity());\n", "\n", "        this.brokerStatsManager = new BrokerStatsManager(this.brokerConfig.getBrokerClusterName());\n", "        this.setStoreHost(new InetSocketAddress(this.getBrokerConfig().getBrokerIP1(), this.getNettyServerConfig().getListenPort()));\n", "\n", "        this.brokerFastFailure = new BrokerFastFailure(this);\n", "        this.configuration = new Configuration(\n", "            log,\n", "            BrokerPathConfigHelper.getBrokerConfigPath(),\n", "            this.brokerConfig, this.nettyServerConfig, this.nettyClientConfig, this.messageStoreConfig\n", "        );\n", "    }\n", "\n", "    public BrokerConfig getBrokerConfig() {\n", "        return brokerConfig;\n", "    }\n", "\n", "    public NettyServerConfig getNettyServerConfig() {\n", "        return nettyServerConfig;\n", "    }\n", "\n", "    public BlockingQueue<Runnable> getPullThreadPoolQueue() {\n", "        return pullThreadPoolQueue;\n", "    }\n", "\n", "    public BlockingQueue<Runnable> getQueryThreadPoolQueue() {\n", "        return queryThreadPoolQueue;\n", "    }\n", "\n", "    public boolean initialize() throws CloneNotSupportedException {\n", "        boolean result = this.topicConfigManager.load();\n", "\n", "        result = result && this.consumerOffsetManager.load();\n", "        result = result && this.subscriptionGroupManager.load();\n", "        result = result && this.consumerFilterManager.load();\n", "\n", "        if (result) {\n", "            try {\n", "                //\u6d88\u606f\u5b58\u50a8\n", "                this.messageStore =\n", "                    new DefaultMessageStore(this.messageStoreConfig, this.brokerStatsManager, this.messageArrivingListener,\n", "                        this.brokerConfig);\n", "                if (messageStoreConfig.isEnableDLegerCommitLog()) {\n", "                    DLedgerRoleChangeHandler roleChangeHandler = new DLedgerRoleChangeHandler(this, (DefaultMessageStore) messageStore);\n", "                    ((DLedgerCommitLog)((DefaultMessageStore) messageStore).getCommitLog()).getdLedgerServer().getdLedgerLeaderElector().addRoleChangeHandler(roleChangeHandler);\n", "                }\n", "                this.brokerStats = new BrokerStats((DefaultMessageStore) this.messageStore);\n", "                //load plugin\n", "                MessageStorePluginContext context = new MessageStorePluginContext(messageStoreConfig, brokerStatsManager, messageArrivingListener, brokerConfig);\n", "                this.messageStore = MessageStoreFactory.build(context, this.messageStore);\n", "                this.messageStore.getDispatcherList().addFirst(new CommitLogDispatcherCalcBitMap(this.brokerConfig, this.consumerFilterManager));\n", "            } catch (IOException e) {\n", "                result = false;\n", "                log.error(\"Failed to initialize\", e);\n", "            }\n", "        }\n", "\n", "        //\u52a0\u8f7dcommitlog\uff0cconsumequeue\uff0cabort\u6587\u4ef6\uff0cindexfile\u7b49\n", "        result = result && this.messageStore.load();\n", "\n", "        if (result) {\n", "            this.remotingServer = new NettyRemotingServer(this.nettyServerConfig, this.clientHousekeepingService);\n", "            NettyServerConfig fastConfig = (NettyServerConfig) this.nettyServerConfig.clone();\n", "            fastConfig.setListenPort(nettyServerConfig.getListenPort() - 2);\n", "            this.fastRemotingServer = new NettyRemotingServer(fastConfig, this.clientHousekeepingService);\n", "            this.sendMessageExecutor = new BrokerFixedThreadPoolExecutor(\n", "                this.brokerConfig.getSendMessageThreadPoolNums(),\n", "                this.brokerConfig.getSendMessageThreadPoolNums(),\n", "                1000 * 60,\n", "                TimeUnit.MILLISECONDS,\n", "                this.sendThreadPoolQueue,\n", "                new ThreadFactoryImpl(\"SendMessageThread_\"));\n", "\n", "            this.pullMessageExecutor = new BrokerFixedThreadPoolExecutor(\n", "                this.brokerConfig.getPullMessageThreadPoolNums(),\n", "                this.brokerConfig.getPullMessageThreadPoolNums(),\n", "                1000 * 60,\n", "                TimeUnit.MILLISECONDS,\n", "                this.pullThreadPoolQueue,\n", "                new ThreadFactoryImpl(\"PullMessageThread_\"));\n", "\n", "            this.replyMessageExecutor = new BrokerFixedThreadPoolExecutor(\n", "                this.brokerConfig.getProcessReplyMessageThreadPoolNums(),\n", "                this.brokerConfig.getProcessReplyMessageThreadPoolNums(),\n", "                1000 * 60,\n", "                TimeUnit.MILLISECONDS,\n", "                this.replyThreadPoolQueue,\n", "                new ThreadFactoryImpl(\"ProcessReplyMessageThread_\"));\n", "\n", "            this.queryMessageExecutor = new BrokerFixedThreadPoolExecutor(\n", "                this.brokerConfig.getQueryMessageThreadPoolNums(),\n", "                this.brokerConfig.getQueryMessageThreadPoolNums(),\n", "                1000 * 60,\n", "                TimeUnit.MILLISECONDS,\n", "                this.queryThreadPoolQueue,\n", "                new ThreadFactoryImpl(\"QueryMessageThread_\"));\n", "\n", "            this.adminBrokerExecutor =\n", "                Executors.newFixedThreadPool(this.brokerConfig.getAdminBrokerThreadPoolNums(), new ThreadFactoryImpl(\n", "                    \"AdminBrokerThread_\"));\n", "\n", "            this.clientManageExecutor = new ThreadPoolExecutor(\n", "                this.brokerConfig.getClientManageThreadPoolNums(),\n", "                this.brokerConfig.getClientManageThreadPoolNums(),\n", "                1000 * 60,\n", "                TimeUnit.MILLISECONDS,\n", "                this.clientManagerThreadPoolQueue,\n", "                new ThreadFactoryImpl(\"ClientManageThread_\"));\n", "\n", "            this.heartbeatExecutor = new BrokerFixedThreadPoolExecutor(\n", "                this.brokerConfig.getHeartbeatThreadPoolNums(),\n", "                this.brokerConfig.getHeartbeatThreadPoolNums(),\n", "                1000 * 60,\n", "                TimeUnit.MILLISECONDS,\n", "                this.heartbeatThreadPoolQueue,\n", "                new ThreadFactoryImpl(\"HeartbeatThread_\", true));\n", "\n", "            this.endTransactionExecutor = new BrokerFixedThreadPoolExecutor(\n", "                this.brokerConfig.getEndTransactionThreadPoolNums(),\n", "                this.brokerConfig.getEndTransactionThreadPoolNums(),\n", "                1000 * 60,\n", "                TimeUnit.MILLISECONDS,\n", "                this.endTransactionThreadPoolQueue,\n", "                new ThreadFactoryImpl(\"EndTransactionThread_\"));\n", "\n", "            this.consumerManageExecutor =\n", "                Executors.newFixedThreadPool(this.brokerConfig.getConsumerManageThreadPoolNums(), new ThreadFactoryImpl(\n", "                    \"ConsumerManageThread_\"));\n", "\n", "            this.registerProcessor();\n", "\n", "            final long initialDelay = UtilAll.computeNextMorningTimeMillis() - System.currentTimeMillis();\n", "            final long period = 1000 * 60 * 60 * 24;\n", "            this.scheduledExecutorService.scheduleAtFixedRate(new Runnable() {\n", "                @Override\n", "                public void run() {\n", "                    try {\n", "                        BrokerController.this.getBrokerStats().record();\n", "                    } catch (Throwable e) {\n", "                        log.error(\"schedule record error.\", e);\n", "                    }\n", "                }\n", "            }, initialDelay, period, TimeUnit.MILLISECONDS);\n", "\n", "            this.scheduledExecutorService.scheduleAtFixedRate(new Runnable() {\n", "                @Override\n", "                public void run() {\n", "                    try {\n", "                        BrokerController.this.consumerOffsetManager.persist();\n", "                    } catch (Throwable e) {\n", "                        log.error(\"schedule persist consumerOffset error.\", e);\n", "                    }\n", "                }\n", "            }, 1000 * 10, this.brokerConfig.getFlushConsumerOffsetInterval(), TimeUnit.MILLISECONDS);\n", "\n", "            this.scheduledExecutorService.scheduleAtFixedRate(new Runnable() {\n", "                @Override\n", "                public void run() {\n", "                    try {\n", "                        BrokerController.this.consumerFilterManager.persist();\n", "                    } catch (Throwable e) {\n", "                        log.error(\"schedule persist consumer filter error.\", e);\n", "                    }\n", "                }\n", "            }, 1000 * 10, 1000 * 10, TimeUnit.MILLISECONDS);\n", "\n", "            this.scheduledExecutorService.scheduleAtFixedRate(new Runnable() {\n", "                @Override\n", "                public void run() {\n", "                    try {\n", "                        BrokerController.this.protectBroker();\n", "                    } catch (Throwable e) {\n", "                        log.error(\"protectBroker error.\", e);\n", "                    }\n", "                }\n", "            }, 3, 3, TimeUnit.MINUTES);\n", "\n", "            this.scheduledExecutorService.scheduleAtFixedRate(new Runnable() {\n", "                @Override\n", "                public void run() {\n", "                    try {\n", "                        BrokerController.this.printWaterMark();\n", "                    } catch (Throwable e) {\n", "                        log.error(\"printWaterMark error.\", e);\n", "                    }\n", "                }\n", "            }, 10, 1, TimeUnit.SECONDS);\n", "\n", "            this.scheduledExecutorService.scheduleAtFixedRate(new Runnable() {\n", "\n", "                @Override\n", "                public void run() {\n", "                    try {\n", "                        log.info(\"dispatch behind commit log {} bytes\", BrokerController.this.getMessageStore().dispatchBehindBytes());\n", "                    } catch (Throwable e) {\n", "                        log.error(\"schedule dispatchBehindBytes error.\", e);\n", "                    }\n", "                }\n", "            }, 1000 * 10, 1000 * 60, TimeUnit.MILLISECONDS);\n", "\n", "            if (this.brokerConfig.getNamesrvAddr() != null) {\n", "                this.brokerOuterAPI.updateNameServerAddressList(this.brokerConfig.getNamesrvAddr());\n", "                log.info(\"Set user specified name server address: {}\", this.brokerConfig.getNamesrvAddr());\n", "            } else if (this.brokerConfig.isFetchNamesrvAddrByAddressServer()) {\n", "                this.scheduledExecutorService.scheduleAtFixedRate(new Runnable() {\n", "\n", "                    @Override\n", "                    public void run() {\n", "                        try {\n", "                            BrokerController.this.brokerOuterAPI.fetchNameServerAddr();\n", "                        } catch (Throwable e) {\n", "                            log.error(\"ScheduledTask fetchNameServerAddr exception\", e);\n", "                        }\n", "                    }\n", "                }, 1000 * 10, 1000 * 60 * 2, TimeUnit.MILLISECONDS);\n", "            }\n", "\n", "            if (!messageStoreConfig.isEnableDLegerCommitLog()) {\n", "                if (BrokerRole.SLAVE == this.messageStoreConfig.getBrokerRole()) {\n", "                    if (this.messageStoreConfig.getHaMasterAddress() != null && this.messageStoreConfig.getHaMasterAddress().length() >= 6) {\n", "                        this.messageStore.updateHaMasterAddress(this.messageStoreConfig.getHaMasterAddress());\n", "                        this.updateMasterHAServerAddrPeriodically = false;\n", "                    } else {\n", "                        this.updateMasterHAServerAddrPeriodically = true;\n", "                    }\n", "                } else {\n", "                    this.scheduledExecutorService.scheduleAtFixedRate(new Runnable() {\n", "                        @Override\n", "                        public void run() {\n", "                            try {\n", "                                BrokerController.this.printMasterAndSlaveDiff();\n", "                            } catch (Throwable e) {\n", "                                log.error(\"schedule printMasterAndSlaveDiff error.\", e);\n", "                            }\n", "                        }\n", "                    }, 1000 * 10, 1000 * 60, TimeUnit.MILLISECONDS);\n", "                }\n", "            }\n", "\n", "            if (TlsSystemConfig.tlsMode != TlsMode.DISABLED) {\n", "                // Register a listener to reload SslContext\n", "                try {\n", "                    fileWatchService = new FileWatchService(\n", "                        new String[] {\n", "                            TlsSystemConfig.tlsServerCertPath,\n", "                            TlsSystemConfig.tlsServerKeyPath,\n", "                            TlsSystemConfig.tlsServerTrustCertPath\n", "                        },\n", "                        new FileWatchService.Listener() {\n", "                            boolean certChanged, keyChanged = false;\n", "\n", "                            @Override\n", "                            public void onChanged(String path) {\n", "                                if (path.equals(TlsSystemConfig.tlsServerTrustCertPath)) {\n", "                                    log.info(\"The trust certificate changed, reload the ssl context\");\n", "                                    reloadServerSslContext();\n", "                                }\n", "                                if (path.equals(TlsSystemConfig.tlsServerCertPath)) {\n", "                                    certChanged = true;\n", "                                }\n", "                                if (path.equals(TlsSystemConfig.tlsServerKeyPath)) {\n", "                                    keyChanged = true;\n", "                                }\n", "                                if (certChanged && keyChanged) {\n", "                                    log.info(\"The certificate and private key changed, reload the ssl context\");\n", "                                    certChanged = keyChanged = false;\n", "                                    reloadServerSslContext();\n", "                                }\n", "                            }\n", "\n", "                            private void reloadServerSslContext() {\n", "                                ((NettyRemotingServer) remotingServer).loadSslContext();\n", "                                ((NettyRemotingServer) fastRemotingServer).loadSslContext();\n", "                            }\n", "                        });\n", "                } catch (Exception e) {\n", "                    log.warn(\"FileWatchService created error, can't load the certificate dynamically\");\n", "                }\n", "            }\n", "            initialTransaction();\n", "            initialAcl();\n", "            initialRpcHooks();\n", "        }\n", "        return result;\n", "    }\n", "\n", "    private void initialTransaction() {\n", "        this.transactionalMessageService = ServiceProvider.loadClass(ServiceProvider.TRANSACTION_SERVICE_ID, TransactionalMessageService.class);\n", "        if (null == this.transactionalMessageService) {\n", "            this.transactionalMessageService = new TransactionalMessageServiceImpl(new TransactionalMessageBridge(this, this.getMessageStore()));\n", "            log.warn(\"Load default transaction message hook service: {}\", TransactionalMessageServiceImpl.class.getSimpleName());\n", "        }\n", "        this.transactionalMessageCheckListener = ServiceProvider.loadClass(ServiceProvider.TRANSACTION_LISTENER_ID, AbstractTransactionalMessageCheckListener.class);\n", "        if (null == this.transactionalMessageCheckListener) {\n", "            this.transactionalMessageCheckListener = new DefaultTransactionalMessageCheckListener();\n", "            log.warn(\"Load default discard message hook service: {}\", DefaultTransactionalMessageCheckListener.class.getSimpleName());\n", "        }\n", "        this.transactionalMessageCheckListener.setBrokerController(this);\n", "        this.transactionalMessageCheckService = new TransactionalMessageCheckService(this);\n", "    }\n", "\n", "    private void initialAcl() {\n", "        if (!this.brokerConfig.isAclEnable()) {\n", "            log.info(\"The broker dose not enable acl\");\n", "            return;\n", "        }\n", "\n", "        List<AccessValidator> accessValidators = ServiceProvider.load(ServiceProvider.ACL_VALIDATOR_ID, AccessValidator.class);\n", "        if (accessValidators == null || accessValidators.isEmpty()) {\n", "            log.info(\"The broker dose not load the AccessValidator\");\n", "            return;\n", "        }\n", "\n", "        for (AccessValidator accessValidator: accessValidators) {\n", "            final AccessValidator validator = accessValidator;\n", "            accessValidatorMap.put(validator.getClass(),validator);\n", "            this.registerServerRPCHook(new RPCHook() {\n", "\n", "                @Override\n", "                public void doBeforeRequest(String remoteAddr, RemotingCommand request) {\n", "                    //Do not catch the exception\n", "                    validator.validate(validator.parse(request, remoteAddr));\n", "                }\n", "\n", "                @Override\n", "                public void doAfterResponse(String remoteAddr, RemotingCommand request, RemotingCommand response) {\n", "                }\n", "            });\n", "        }\n", "    }\n", "\n", "\n", "    private void initialRpcHooks() {\n", "\n", "        List<RPCHook> rpcHooks = ServiceProvider.load(ServiceProvider.RPC_HOOK_ID, RPCHook.class);\n", "        if (rpcHooks == null || rpcHooks.isEmpty()) {\n", "            return;\n", "        }\n", "        for (RPCHook rpcHook: rpcHooks) {\n", "            this.registerServerRPCHook(rpcHook);\n", "        }\n", "    }\n", "\n", "    public void registerProcessor() {\n", "        /**\n", "         * SendMessageProcessor\n", "         */\n", "        SendMessageProcessor sendProcessor = new SendMessageProcessor(this);\n", "        sendProcessor.registerSendMessageHook(sendMessageHookList);\n", "        sendProcessor.registerConsumeMessageHook(consumeMessageHookList);\n", "\n", "        //\u5904\u7406\u5bf9\u5e94\u6d88\u606f\u7684\u63a5\u6536\n", "        this.remotingServer.registerProcessor(RequestCode.SEND_MESSAGE, sendProcessor, this.sendMessageExecutor);\n", "        this.remotingServer.registerProcessor(RequestCode.SEND_MESSAGE_V2, sendProcessor, this.sendMessageExecutor);\n", "        this.remotingServer.registerProcessor(RequestCode.SEND_BATCH_MESSAGE, sendProcessor, this.sendMessageExecutor);\n", "        this.remotingServer.registerProcessor(RequestCode.CONSUMER_SEND_MSG_BACK, sendProcessor, this.sendMessageExecutor);\n", "        this.fastRemotingServer.registerProcessor(RequestCode.SEND_MESSAGE, sendProcessor, this.sendMessageExecutor);\n", "        this.fastRemotingServer.registerProcessor(RequestCode.SEND_MESSAGE_V2, sendProcessor, this.sendMessageExecutor);\n", "        this.fastRemotingServer.registerProcessor(RequestCode.SEND_BATCH_MESSAGE, sendProcessor, this.sendMessageExecutor);\n", "        this.fastRemotingServer.registerProcessor(RequestCode.CONSUMER_SEND_MSG_BACK, sendProcessor, this.sendMessageExecutor);\n", "        /**\n", "         * PullMessageProcessor\n", "         */\n", "        this.remotingServer.registerProcessor(RequestCode.PULL_MESSAGE, this.pullMessageProcessor, this.pullMessageExecutor);\n", "        this.pullMessageProcessor.registerConsumeMessageHook(consumeMessageHookList);\n", "\n", "        /**\n", "         * ReplyMessageProcessor\n", "         */\n", "        ReplyMessageProcessor replyMessageProcessor = new ReplyMessageProcessor(this);\n", "        replyMessageProcessor.registerSendMessageHook(sendMessageHookList);\n", "\n", "        this.remotingServer.registerProcessor(RequestCode.SEND_REPLY_MESSAGE, replyMessageProcessor, replyMessageExecutor);\n", "        this.remotingServer.registerProcessor(RequestCode.SEND_REPLY_MESSAGE_V2, replyMessageProcessor, replyMessageExecutor);\n", "        this.fastRemotingServer.registerProcessor(RequestCode.SEND_REPLY_MESSAGE, replyMessageProcessor, replyMessageExecutor);\n", "        this.fastRemotingServer.registerProcessor(RequestCode.SEND_REPLY_MESSAGE_V2, replyMessageProcessor, replyMessageExecutor);\n", "\n", "        /**\n", "         * QueryMessageProcessor\n", "         */\n", "        NettyRequestProcessor queryProcessor = new QueryMessageProcessor(this);\n", "        this.remotingServer.registerProcessor(RequestCode.QUERY_MESSAGE, queryProcessor, this.queryMessageExecutor);\n", "        this.remotingServer.registerProcessor(RequestCode.VIEW_MESSAGE_BY_ID, queryProcessor, this.queryMessageExecutor);\n", "\n", "        this.fastRemotingServer.registerProcessor(RequestCode.QUERY_MESSAGE, queryProcessor, this.queryMessageExecutor);\n", "        this.fastRemotingServer.registerProcessor(RequestCode.VIEW_MESSAGE_BY_ID, queryProcessor, this.queryMessageExecutor);\n", "\n", "        /**\n", "         * ClientManageProcessor\n", "         */\n", "        ClientManageProcessor clientProcessor = new ClientManageProcessor(this);\n", "        this.remotingServer.registerProcessor(RequestCode.HEART_BEAT, clientProcessor, this.heartbeatExecutor);\n", "        this.remotingServer.registerProcessor(RequestCode.UNREGISTER_CLIENT, clientProcessor, this.clientManageExecutor);\n", "        this.remotingServer.registerProcessor(RequestCode.CHECK_CLIENT_CONFIG, clientProcessor, this.clientManageExecutor);\n", "\n", "        this.fastRemotingServer.registerProcessor(RequestCode.HEART_BEAT, clientProcessor, this.heartbeatExecutor);\n", "        this.fastRemotingServer.registerProcessor(RequestCode.UNREGISTER_CLIENT, clientProcessor, this.clientManageExecutor);\n", "        this.fastRemotingServer.registerProcessor(RequestCode.CHECK_CLIENT_CONFIG, clientProcessor, this.clientManageExecutor);\n", "\n", "        /**\n", "         * ConsumerManageProcessor\n", "         */\n", "        ConsumerManageProcessor consumerManageProcessor = new ConsumerManageProcessor(this);\n", "        this.remotingServer.registerProcessor(RequestCode.GET_CONSUMER_LIST_BY_GROUP, consumerManageProcessor, this.consumerManageExecutor);\n", "        this.remotingServer.registerProcessor(RequestCode.UPDATE_CONSUMER_OFFSET, consumerManageProcessor, this.consumerManageExecutor);\n", "        this.remotingServer.registerProcessor(RequestCode.QUERY_CONSUMER_OFFSET, consumerManageProcessor, this.consumerManageExecutor);\n", "\n", "        this.fastRemotingServer.registerProcessor(RequestCode.GET_CONSUMER_LIST_BY_GROUP, consumerManageProcessor, this.consumerManageExecutor);\n", "        this.fastRemotingServer.registerProcessor(RequestCode.UPDATE_CONSUMER_OFFSET, consumerManageProcessor, this.consumerManageExecutor);\n", "        this.fastRemotingServer.registerProcessor(RequestCode.QUERY_CONSUMER_OFFSET, consumerManageProcessor, this.consumerManageExecutor);\n", "\n", "        /**\n", "         * EndTransactionProcessor\n", "         */\n", "        this.remotingServer.registerProcessor(RequestCode.END_TRANSACTION, new EndTransactionProcessor(this), this.endTransactionExecutor);\n", "        this.fastRemotingServer.registerProcessor(RequestCode.END_TRANSACTION, new EndTransactionProcessor(this), this.endTransactionExecutor);\n", "\n", "        /**\n", "         * Default\n", "         */\n", "        AdminBrokerProcessor adminProcessor = new AdminBrokerProcessor(this);\n", "        this.remotingServer.registerDefaultProcessor(adminProcessor, this.adminBrokerExecutor);\n", "        this.fastRemotingServer.registerDefaultProcessor(adminProcessor, this.adminBrokerExecutor);\n", "    }\n", "\n", "    public BrokerStats getBrokerStats() {\n", "        return brokerStats;\n", "    }\n", "\n", "    public void setBrokerStats(BrokerStats brokerStats) {\n", "        this.brokerStats = brokerStats;\n", "    }\n", "\n", "    public void protectBroker() {\n", "        if (this.brokerConfig.isDisableConsumeIfConsumerReadSlowly()) {\n", "            final Iterator<Map.Entry<String, MomentStatsItem>> it = this.brokerStatsManager.getMomentStatsItemSetFallSize().getStatsItemTable().entrySet().iterator();\n", "            while (it.hasNext()) {\n", "                final Map.Entry<String, MomentStatsItem> next = it.next();\n", "                final long fallBehindBytes = next.getValue().getValue().get();\n", "                if (fallBehindBytes > this.brokerConfig.getConsumerFallbehindThreshold()) {\n", "                    final String[] split = next.getValue().getStatsKey().split(\"@\");\n", "                    final String group = split[2];\n", "                    LOG_PROTECTION.info(\"[PROTECT_BROKER] the consumer[{}] consume slowly, {} bytes, disable it\", group, fallBehindBytes);\n", "                    this.subscriptionGroupManager.disableConsume(group);\n", "                }\n", "            }\n", "        }\n", "    }\n", "\n", "    public long headSlowTimeMills(BlockingQueue<Runnable> q) {\n", "        long slowTimeMills = 0;\n", "        final Runnable peek = q.peek();\n", "        if (peek != null) {\n", "            RequestTask rt = BrokerFastFailure.castRunnable(peek);\n", "            slowTimeMills = rt == null ? 0 : this.messageStore.now() - rt.getCreateTimestamp();\n", "        }\n", "\n", "        if (slowTimeMills < 0) {\n", "            slowTimeMills = 0;\n", "        }\n", "\n", "        return slowTimeMills;\n", "    }\n", "\n", "    public long headSlowTimeMills4SendThreadPoolQueue() {\n", "        return this.headSlowTimeMills(this.sendThreadPoolQueue);\n", "    }\n", "\n", "    public long headSlowTimeMills4PullThreadPoolQueue() {\n", "        return this.headSlowTimeMills(this.pullThreadPoolQueue);\n", "    }\n", "\n", "    public long headSlowTimeMills4QueryThreadPoolQueue() {\n", "        return this.headSlowTimeMills(this.queryThreadPoolQueue);\n", "    }\n", "\n", "    public long headSlowTimeMills4EndTransactionThreadPoolQueue() {\n", "        return this.headSlowTimeMills(this.endTransactionThreadPoolQueue);\n", "    }\n", "\n", "    public void printWaterMark() {\n", "        LOG_WATER_MARK.info(\"[WATERMARK] Send Queue Size: {} SlowTimeMills: {}\", this.sendThreadPoolQueue.size(), headSlowTimeMills4SendThreadPoolQueue());\n", "        LOG_WATER_MARK.info(\"[WATERMARK] Pull Queue Size: {} SlowTimeMills: {}\", this.pullThreadPoolQueue.size(), headSlowTimeMills4PullThreadPoolQueue());\n", "        LOG_WATER_MARK.info(\"[WATERMARK] Query Queue Size: {} SlowTimeMills: {}\", this.queryThreadPoolQueue.size(), headSlowTimeMills4QueryThreadPoolQueue());\n", "        LOG_WATER_MARK.info(\"[WATERMARK] Transaction Queue Size: {} SlowTimeMills: {}\", this.endTransactionThreadPoolQueue.size(), headSlowTimeMills4EndTransactionThreadPoolQueue());\n", "    }\n", "\n", "    public MessageStore getMessageStore() {\n", "        return messageStore;\n", "    }\n", "\n", "    public void setMessageStore(MessageStore messageStore) {\n", "        this.messageStore = messageStore;\n", "    }\n", "\n", "    private void printMasterAndSlaveDiff() {\n", "        long diff = this.messageStore.slaveFallBehindMuch();\n", "\n", "        // XXX: warn and notify me\n", "        log.info(\"Slave fall behind master: {} bytes\", diff);\n", "    }\n", "\n", "    public Broker2Client getBroker2Client() {\n", "        return broker2Client;\n", "    }\n", "\n", "    public ConsumerManager getConsumerManager() {\n", "        return consumerManager;\n", "    }\n", "\n", "    public ConsumerFilterManager getConsumerFilterManager() {\n", "        return consumerFilterManager;\n", "    }\n", "\n", "    public ConsumerOffsetManager getConsumerOffsetManager() {\n", "        return consumerOffsetManager;\n", "    }\n", "\n", "    public MessageStoreConfig getMessageStoreConfig() {\n", "        return messageStoreConfig;\n", "    }\n", "\n", "    public ProducerManager getProducerManager() {\n", "        return producerManager;\n", "    }\n", "\n", "    public void setFastRemotingServer(RemotingServer fastRemotingServer) {\n", "        this.fastRemotingServer = fastRemotingServer;\n", "    }\n", "\n", "    public PullMessageProcessor getPullMessageProcessor() {\n", "        return pullMessageProcessor;\n", "    }\n", "\n", "    public PullRequestHoldService getPullRequestHoldService() {\n", "        return pullRequestHoldService;\n", "    }\n", "\n", "    public SubscriptionGroupManager getSubscriptionGroupManager() {\n", "        return subscriptionGroupManager;\n", "    }\n", "\n", "    public void shutdown() {\n", "        if (this.brokerStatsManager != null) {\n", "            this.brokerStatsManager.shutdown();\n", "        }\n", "\n", "        if (this.clientHousekeepingService != null) {\n", "            this.clientHousekeepingService.shutdown();\n", "        }\n", "\n", "        if (this.pullRequestHoldService != null) {\n", "            this.pullRequestHoldService.shutdown();\n", "        }\n", "\n", "        if (this.remotingServer != null) {\n", "            this.remotingServer.shutdown();\n", "        }\n", "\n", "        if (this.fastRemotingServer != null) {\n", "            this.fastRemotingServer.shutdown();\n", "        }\n", "\n", "        if (this.fileWatchService != null) {\n", "            this.fileWatchService.shutdown();\n", "        }\n", "\n", "        if (this.messageStore != null) {\n", "            this.messageStore.shutdown();\n", "        }\n", "\n", "        this.scheduledExecutorService.shutdown();\n", "        try {\n", "            this.scheduledExecutorService.awaitTermination(5000, TimeUnit.MILLISECONDS);\n", "        } catch (InterruptedException e) {\n", "        }\n", "\n", "        this.unregisterBrokerAll();\n", "\n", "        if (this.sendMessageExecutor != null) {\n", "            this.sendMessageExecutor.shutdown();\n", "        }\n", "\n", "        if (this.pullMessageExecutor != null) {\n", "            this.pullMessageExecutor.shutdown();\n", "        }\n", "\n", "        if (this.replyMessageExecutor != null) {\n", "            this.replyMessageExecutor.shutdown();\n", "        }\n", "\n", "        if (this.adminBrokerExecutor != null) {\n", "            this.adminBrokerExecutor.shutdown();\n", "        }\n", "\n", "        if (this.brokerOuterAPI != null) {\n", "            this.brokerOuterAPI.shutdown();\n", "        }\n", "\n", "        this.consumerOffsetManager.persist();\n", "\n", "        if (this.filterServerManager != null) {\n", "            this.filterServerManager.shutdown();\n", "        }\n", "\n", "        if (this.brokerFastFailure != null) {\n", "            this.brokerFastFailure.shutdown();\n", "        }\n", "\n", "        if (this.consumerFilterManager != null) {\n", "            this.consumerFilterManager.persist();\n", "        }\n", "\n", "        if (this.clientManageExecutor != null) {\n", "            this.clientManageExecutor.shutdown();\n", "        }\n", "\n", "        if (this.queryMessageExecutor != null) {\n", "            this.queryMessageExecutor.shutdown();\n", "        }\n", "\n", "        if (this.consumerManageExecutor != null) {\n", "            this.consumerManageExecutor.shutdown();\n", "        }\n", "\n", "        if (this.fileWatchService != null) {\n", "            this.fileWatchService.shutdown();\n", "        }\n", "        if (this.transactionalMessageCheckService != null) {\n", "            this.transactionalMessageCheckService.shutdown(false);\n", "        }\n", "\n", "        if (this.endTransactionExecutor != null) {\n", "            this.endTransactionExecutor.shutdown();\n", "        }\n", "    }\n", "\n", "    private void unregisterBrokerAll() {\n", "        this.brokerOuterAPI.unregisterBrokerAll(\n", "            this.brokerConfig.getBrokerClusterName(),\n", "            this.getBrokerAddr(),\n", "            this.brokerConfig.getBrokerName(),\n", "            this.brokerConfig.getBrokerId());\n", "    }\n", "\n", "    public String getBrokerAddr() {\n", "        return this.brokerConfig.getBrokerIP1() + \":\" + this.nettyServerConfig.getListenPort();\n", "    }\n", "\n", "    public void start() throws Exception {\n", "        if (this.messageStore != null) {\n", "            this.messageStore.start();\n", "        }\n", "\n", "        if (this.remotingServer != null) {\n", "            this.remotingServer.start();\n", "        }\n", "\n", "        if (this.fastRemotingServer != null) {\n", "            this.fastRemotingServer.start();\n", "        }\n", "\n", "        if (this.fileWatchService != null) {\n", "            this.fileWatchService.start();\n", "        }\n", "\n", "        if (this.brokerOuterAPI != null) {\n", "            this.brokerOuterAPI.start();\n", "        }\n", "\n", "        if (this.pullRequestHoldService != null) {\n", "            this.pullRequestHoldService.start();\n", "        }\n", "\n", "        if (this.clientHousekeepingService != null) {\n", "            this.clientHousekeepingService.start();\n", "        }\n", "\n", "        if (this.filterServerManager != null) {\n", "            this.filterServerManager.start();\n", "        }\n", "\n", "        if (!messageStoreConfig.isEnableDLegerCommitLog()) {\n", "            startProcessorByHa(messageStoreConfig.getBrokerRole());\n", "            handleSlaveSynchronize(messageStoreConfig.getBrokerRole());\n", "            this.registerBrokerAll(true, false, true);\n", "        }\n", "\n", "        this.scheduledExecutorService.scheduleAtFixedRate(new Runnable() {\n", "\n", "            @Override\n", "            public void run() {\n", "                try {\n", "                    //\u6bcf\u9694\u4e00\u6bb5\u65f6\u95f4\u5c31\u4f1a\u53d1\u9001\u4e00\u4e2a\u6ce8\u518c\u8bf7\u6c42\uff0c\u9ed8\u8ba430s\n", "                    BrokerController.this.registerBrokerAll(true, false, brokerConfig.isForceRegister());\n", "                } catch (Throwable e) {\n", "                    log.error(\"registerBrokerAll Exception\", e);\n", "                }\n", "            }\n", "        }, 1000 * 10, Math.max(10000, Math.min(brokerConfig.getRegisterNameServerPeriod(), 60000)), TimeUnit.MILLISECONDS);\n", "\n", "        if (this.brokerStatsManager != null) {\n", "            this.brokerStatsManager.start();\n", "        }\n", "\n", "        if (this.brokerFastFailure != null) {\n", "            this.brokerFastFailure.start();\n", "        }\n", "\n", "\n", "    }\n", "\n", "    public synchronized void registerIncrementBrokerData(TopicConfig topicConfig, DataVersion dataVersion) {\n", "        TopicConfig registerTopicConfig = topicConfig;\n", "        if (!PermName.isWriteable(this.getBrokerConfig().getBrokerPermission())\n", "            || !PermName.isReadable(this.getBrokerConfig().getBrokerPermission())) {\n", "            registerTopicConfig =\n", "                new TopicConfig(topicConfig.getTopicName(), topicConfig.getReadQueueNums(), topicConfig.getWriteQueueNums(),\n", "                    this.brokerConfig.getBrokerPermission());\n", "        }\n", "\n", "        ConcurrentMap<String, TopicConfig> topicConfigTable = new ConcurrentHashMap<String, TopicConfig>();\n", "        topicConfigTable.put(topicConfig.getTopicName(), registerTopicConfig);\n", "        TopicConfigSerializeWrapper topicConfigSerializeWrapper = new TopicConfigSerializeWrapper();\n", "        topicConfigSerializeWrapper.setDataVersion(dataVersion);\n", "        topicConfigSerializeWrapper.setTopicConfigTable(topicConfigTable);\n", "\n", "        doRegisterBrokerAll(true, false, topicConfigSerializeWrapper);\n", "    }\n", "\n", "    public synchronized void registerBrokerAll(final boolean checkOrderConfig, boolean oneway, boolean forceRegister) {\n", "        TopicConfigSerializeWrapper topicConfigWrapper = this.getTopicConfigManager().buildTopicConfigSerializeWrapper();\n", "\n", "        if (!PermName.isWriteable(this.getBrokerConfig().getBrokerPermission())\n", "            || !PermName.isReadable(this.getBrokerConfig().getBrokerPermission())) {\n", "            ConcurrentHashMap<String, TopicConfig> topicConfigTable = new ConcurrentHashMap<String, TopicConfig>();\n", "            for (TopicConfig topicConfig : topicConfigWrapper.getTopicConfigTable().values()) {\n", "                TopicConfig tmp =\n", "                    new TopicConfig(topicConfig.getTopicName(), topicConfig.getReadQueueNums(), topicConfig.getWriteQueueNums(),\n", "                        this.brokerConfig.getBrokerPermission());\n", "                topicConfigTable.put(topicConfig.getTopicName(), tmp);\n", "            }\n", "            topicConfigWrapper.setTopicConfigTable(topicConfigTable);\n", "        }\n", "\n", "        if (forceRegister || needRegister(this.brokerConfig.getBrokerClusterName(),\n", "            this.getBrokerAddr(),\n", "            this.brokerConfig.getBrokerName(),\n", "            this.brokerConfig.getBrokerId(),\n", "            this.brokerConfig.getRegisterBrokerTimeoutMills())) {\n", "            doRegisterBrokerAll(checkOrderConfig, oneway, topicConfigWrapper);\n", "        }\n", "    }\n", "\n", "    private void doRegisterBrokerAll(boolean checkOrderConfig, boolean oneway,\n", "        TopicConfigSerializeWrapper topicConfigWrapper) {\n", "        List<RegisterBrokerResult> registerBrokerResultList = this.brokerOuterAPI.registerBrokerAll(\n", "            this.brokerConfig.getBrokerClusterName(),\n", "            this.getBrokerAddr(),\n", "            this.brokerConfig.getBrokerName(),\n", "            this.brokerConfig.getBrokerId(),\n", "            this.getHAServerAddr(),\n", "            topicConfigWrapper,\n", "            this.filterServerManager.buildNewFilterServerList(),\n", "            oneway,\n", "            this.brokerConfig.getRegisterBrokerTimeoutMills(),\n", "            this.brokerConfig.isCompressedRegister());\n", "\n", "        if (registerBrokerResultList.size() > 0) {\n", "            RegisterBrokerResult registerBrokerResult = registerBrokerResultList.get(0);\n", "            if (registerBrokerResult != null) {\n", "                if (this.updateMasterHAServerAddrPeriodically && registerBrokerResult.getHaServerAddr() != null) {\n", "                    this.messageStore.updateHaMasterAddress(registerBrokerResult.getHaServerAddr());\n", "                }\n", "\n", "                this.slaveSynchronize.setMasterAddr(registerBrokerResult.getMasterAddr());\n", "\n", "                if (checkOrderConfig) {\n", "                    this.getTopicConfigManager().updateOrderTopicConfig(registerBrokerResult.getKvTable());\n", "                }\n", "            }\n", "        }\n", "    }\n", "\n", "    private boolean needRegister(final String clusterName,\n", "        final String brokerAddr,\n", "        final String brokerName,\n", "        final long brokerId,\n", "        final int timeoutMills) {\n", "\n", "        TopicConfigSerializeWrapper topicConfigWrapper = this.getTopicConfigManager().buildTopicConfigSerializeWrapper();\n", "        List<Boolean> changeList = brokerOuterAPI.needRegister(clusterName, brokerAddr, brokerName, brokerId, topicConfigWrapper, timeoutMills);\n", "        boolean needRegister = false;\n", "        for (Boolean changed : changeList) {\n", "            if (changed) {\n", "                needRegister = true;\n", "                break;\n", "            }\n", "        }\n", "        return needRegister;\n", "    }\n", "\n", "    public TopicConfigManager getTopicConfigManager() {\n", "        return topicConfigManager;\n", "    }\n", "\n", "    public void setTopicConfigManager(TopicConfigManager topicConfigManager) {\n", "        this.topicConfigManager = topicConfigManager;\n", "    }\n", "\n", "    public String getHAServerAddr() {\n", "        return this.brokerConfig.getBrokerIP2() + \":\" + this.messageStoreConfig.getHaListenPort();\n", "    }\n", "\n", "    public RebalanceLockManager getRebalanceLockManager() {\n", "        return rebalanceLockManager;\n", "    }\n", "\n", "    public SlaveSynchronize getSlaveSynchronize() {\n", "        return slaveSynchronize;\n", "    }\n", "\n", "    public ExecutorService getPullMessageExecutor() {\n", "        return pullMessageExecutor;\n", "    }\n", "\n", "    public void setPullMessageExecutor(ExecutorService pullMessageExecutor) {\n", "        this.pullMessageExecutor = pullMessageExecutor;\n", "    }\n", "\n", "    public BlockingQueue<Runnable> getSendThreadPoolQueue() {\n", "        return sendThreadPoolQueue;\n", "    }\n", "\n", "    public FilterServerManager getFilterServerManager() {\n", "        return filterServerManager;\n", "    }\n", "\n", "    public BrokerStatsManager getBrokerStatsManager() {\n", "        return brokerStatsManager;\n", "    }\n", "\n", "    public List<SendMessageHook> getSendMessageHookList() {\n", "        return sendMessageHookList;\n", "    }\n", "\n", "    public void registerSendMessageHook(final SendMessageHook hook) {\n", "        this.sendMessageHookList.add(hook);\n", "        log.info(\"register SendMessageHook Hook, {}\", hook.hookName());\n", "    }\n", "\n", "    public List<ConsumeMessageHook> getConsumeMessageHookList() {\n", "        return consumeMessageHookList;\n", "    }\n", "\n", "    public void registerConsumeMessageHook(final ConsumeMessageHook hook) {\n", "        this.consumeMessageHookList.add(hook);\n", "        log.info(\"register ConsumeMessageHook Hook, {}\", hook.hookName());\n", "    }\n", "\n", "    public void registerServerRPCHook(RPCHook rpcHook) {\n", "        getRemotingServer().registerRPCHook(rpcHook);\n", "        this.fastRemotingServer.registerRPCHook(rpcHook);\n", "    }\n", "\n", "    public RemotingServer getRemotingServer() {\n", "        return remotingServer;\n", "    }\n", "\n", "    public void setRemotingServer(RemotingServer remotingServer) {\n", "        this.remotingServer = remotingServer;\n", "    }\n", "\n", "    public void registerClientRPCHook(RPCHook rpcHook) {\n", "        this.getBrokerOuterAPI().registerRPCHook(rpcHook);\n", "    }\n", "\n", "    public BrokerOuterAPI getBrokerOuterAPI() {\n", "        return brokerOuterAPI;\n", "    }\n", "\n", "    public InetSocketAddress getStoreHost() {\n", "        return storeHost;\n", "    }\n", "\n", "    public void setStoreHost(InetSocketAddress storeHost) {\n", "        this.storeHost = storeHost;\n", "    }\n", "\n", "    public Configuration getConfiguration() {\n", "        return this.configuration;\n", "    }\n", "\n", "    public BlockingQueue<Runnable> getHeartbeatThreadPoolQueue() {\n", "        return heartbeatThreadPoolQueue;\n", "    }\n", "\n", "    public TransactionalMessageCheckService getTransactionalMessageCheckService() {\n", "        return transactionalMessageCheckService;\n", "    }\n", "\n", "    public void setTransactionalMessageCheckService(\n", "        TransactionalMessageCheckService transactionalMessageCheckService) {\n", "        this.transactionalMessageCheckService = transactionalMessageCheckService;\n", "    }\n", "\n", "    public TransactionalMessageService getTransactionalMessageService() {\n", "        return transactionalMessageService;\n", "    }\n", "\n", "    public void setTransactionalMessageService(TransactionalMessageService transactionalMessageService) {\n", "        this.transactionalMessageService = transactionalMessageService;\n", "    }\n", "\n", "    public AbstractTransactionalMessageCheckListener getTransactionalMessageCheckListener() {\n", "        return transactionalMessageCheckListener;\n", "    }\n", "\n", "    public void setTransactionalMessageCheckListener(\n", "        AbstractTransactionalMessageCheckListener transactionalMessageCheckListener) {\n", "        this.transactionalMessageCheckListener = transactionalMessageCheckListener;\n", "    }\n", "\n", "\n", "    public BlockingQueue<Runnable> getEndTransactionThreadPoolQueue() {\n", "        return endTransactionThreadPoolQueue;\n", "\n", "    }\n", "\n", "    public Map<Class, AccessValidator> getAccessValidatorMap() {\n", "        return accessValidatorMap;\n", "    }\n", "\n", "    private void handleSlaveSynchronize(BrokerRole role) {\n", "        if (role == BrokerRole.SLAVE) {\n", "            if (null != slaveSyncFuture) {\n", "                slaveSyncFuture.cancel(false);\n", "            }\n", "            this.slaveSynchronize.setMasterAddr(null);\n", "            slaveSyncFuture = this.scheduledExecutorService.scheduleAtFixedRate(new Runnable() {\n", "                @Override\n", "                public void run() {\n", "                    try {\n", "                        BrokerController.this.slaveSynchronize.syncAll();\n", "                    }\n", "                    catch (Throwable e) {\n", "                        log.error(\"ScheduledTask SlaveSynchronize syncAll error.\", e);\n", "                    }\n", "                }\n", "            }, 1000 * 3, 1000 * 10, TimeUnit.MILLISECONDS);\n", "        } else {\n", "            //handle the slave synchronise\n", "            if (null != slaveSyncFuture) {\n", "                slaveSyncFuture.cancel(false);\n", "            }\n", "            this.slaveSynchronize.setMasterAddr(null);\n", "        }\n", "    }\n", "\n", "    public void changeToSlave(int brokerId) {\n", "        log.info(\"Begin to change to slave brokerName={} brokerId={}\", brokerConfig.getBrokerName(), brokerId);\n", "\n", "        //change the role\n", "        brokerConfig.setBrokerId(brokerId == 0 ? 1 : brokerId); //TO DO check\n", "        messageStoreConfig.setBrokerRole(BrokerRole.SLAVE);\n", "\n", "        //handle the scheduled service\n", "        try {\n", "            this.messageStore.handleScheduleMessageService(BrokerRole.SLAVE);\n", "        } catch (Throwable t) {\n", "            log.error(\"[MONITOR] handleScheduleMessageService failed when changing to slave\", t);\n", "        }\n", "\n", "        //handle the transactional service\n", "        try {\n", "            this.shutdownProcessorByHa();\n", "        } catch (Throwable t) {\n", "            log.error(\"[MONITOR] shutdownProcessorByHa failed when changing to slave\", t);\n", "        }\n", "\n", "        //handle the slave synchronise\n", "        handleSlaveSynchronize(BrokerRole.SLAVE);\n", "\n", "        try {\n", "            this.registerBrokerAll(true, true, brokerConfig.isForceRegister());\n", "        } catch (Throwable ignored) {\n", "\n", "        }\n", "        log.info(\"Finish to change to slave brokerName={} brokerId={}\", brokerConfig.getBrokerName(), brokerId);\n", "    }\n", "\n", "\n", "\n", "    public void changeToMaster(BrokerRole role) {\n", "        if (role == BrokerRole.SLAVE) {\n", "            return;\n", "        }\n", "        log.info(\"Begin to change to master brokerName={}\", brokerConfig.getBrokerName());\n", "\n", "        //handle the slave synchronise\n", "        handleSlaveSynchronize(role);\n", "\n", "        //handle the scheduled service\n", "        try {\n", "            this.messageStore.handleScheduleMessageService(role);\n", "        } catch (Throwable t) {\n", "            log.error(\"[MONITOR] handleScheduleMessageService failed when changing to master\", t);\n", "        }\n", "\n", "        //handle the transactional service\n", "        try {\n", "            this.startProcessorByHa(BrokerRole.SYNC_MASTER);\n", "        } catch (Throwable t) {\n", "            log.error(\"[MONITOR] startProcessorByHa failed when changing to master\", t);\n", "        }\n", "\n", "        //if the operations above are totally successful, we change to master\n", "        brokerConfig.setBrokerId(0); //TO DO check\n", "        messageStoreConfig.setBrokerRole(role);\n", "\n", "        try {\n", "            this.registerBrokerAll(true, true, brokerConfig.isForceRegister());\n", "        } catch (Throwable ignored) {\n", "\n", "        }\n", "        log.info(\"Finish to change to master brokerName={}\", brokerConfig.getBrokerName());\n", "    }\n", "\n", "    private void startProcessorByHa(BrokerRole role) {\n", "        if (BrokerRole.SLAVE != role) {\n", "            if (this.transactionalMessageCheckService != null) {\n", "                this.transactionalMessageCheckService.start();\n", "            }\n", "        }\n", "    }\n", "\n", "    private void shutdownProcessorByHa() {\n", "        if (this.transactionalMessageCheckService != null) {\n", "            this.transactionalMessageCheckService.shutdown(true);\n", "        }\n", "    }\n", "\n", "    public ExecutorService getSendMessageExecutor() {\n", "        return sendMessageExecutor;\n", "    }\n", "}\n"], "test_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package org.apache.rocketmq.broker;\n", "\n", "import java.io.File;\n", "import org.apache.rocketmq.common.BrokerConfig;\n", "import org.apache.rocketmq.common.UtilAll;\n", "import org.apache.rocketmq.remoting.netty.NettyClientConfig;\n", "import org.apache.rocketmq.remoting.netty.NettyServerConfig;\n", "import org.apache.rocketmq.store.config.MessageStoreConfig;\n", "import org.junit.After;\n", "import org.junit.Ignore;\n", "import org.junit.Test;\n", "\n", "import static org.assertj.core.api.Assertions.assertThat;\n", "\n", "public class BrokerControllerTest {\n", "\n", "    @Test\n", "    public void testBrokerRestart() throws Exception {\n", "        BrokerController brokerController = new BrokerController(\n", "            new BrokerConfig(),\n", "            new NettyServerConfig(),\n", "            new NettyClientConfig(),\n", "            new MessageStoreConfig());\n", "        assertThat(brokerController.initialize());\n", "        brokerController.start();\n", "        brokerController.shutdown();\n", "    }\n", "\n", "    @After\n", "    public void destroy() {\n", "        UtilAll.deleteFile(new File(new MessageStoreConfig().getStorePathRootDir()));\n", "    }\n", "}\n"], "method_lines_dic": {"BrokerController::::getBrokerConfig()": [218, 220], "BrokerController::::getNettyServerConfig()": [222, 224], "BrokerController::::getPullThreadPoolQueue()": [226, 228], "BrokerController::::getQueryThreadPoolQueue()": [230, 232], "BrokerController::::initialize()": [234, 489], "BrokerController::::initialTransaction()": [491, 504], "BrokerController::::initialAcl()": [506, 534], "BrokerController::::initialRpcHooks()": [537, 546], "BrokerController::::registerProcessor()": [548, 628], "BrokerController::::getBrokerStats()": [630, 632], "BrokerController::::protectBroker()": [638, 652], "BrokerController::::headSlowTimeMills(java.util.concurrent.BlockingQueue<java.lang.Runnable>)": [654, 667], "BrokerController::::headSlowTimeMills4SendThreadPoolQueue()": [669, 671], "BrokerController::::headSlowTimeMills4PullThreadPoolQueue()": [673, 675], "BrokerController::::headSlowTimeMills4QueryThreadPoolQueue()": [677, 679], "BrokerController::::headSlowTimeMills4EndTransactionThreadPoolQueue()": [681, 683], "BrokerController::::printWaterMark()": [685, 690], "BrokerController::::getMessageStore()": [692, 694], "BrokerController::::printMasterAndSlaveDiff()": [700, 705], "BrokerController::::getBroker2Client()": [707, 709], "BrokerController::::getConsumerManager()": [711, 713], "BrokerController::::getConsumerFilterManager()": [715, 717], "BrokerController::::getConsumerOffsetManager()": [719, 721], "BrokerController::::getMessageStoreConfig()": [723, 725], "BrokerController::::getProducerManager()": [727, 729], "BrokerController::::getPullMessageProcessor()": [735, 737], "BrokerController::::getPullRequestHoldService()": [739, 741], "BrokerController::::getSubscriptionGroupManager()": [743, 745], "BrokerController::::shutdown()": [747, 840], "BrokerController::::unregisterBrokerAll()": [842, 848], "BrokerController::::getBrokerAddr()": [850, 852], "BrokerController::::start()": [854, 915], "BrokerController::::registerBrokerAll(boolean,boolean,boolean)": [935, 957], "BrokerController::::needRegister(java.lang.String,java.lang.String,java.lang.String,long,int)": [989, 1005], "BrokerController::::getTopicConfigManager()": [1007, 1009], "BrokerController::::setTopicConfigManager(org.apache.rocketmq.broker.topic.TopicConfigManager)": [1011, 1013], "BrokerController::::getHAServerAddr()": [1015, 1017], "BrokerController::::getRebalanceLockManager()": [1019, 1021], "BrokerController::::getSlaveSynchronize()": [1023, 1025], "BrokerController::::getPullMessageExecutor()": [1027, 1029], "BrokerController::::setPullMessageExecutor(java.util.concurrent.ExecutorService)": [1031, 1033], "BrokerController::::getSendThreadPoolQueue()": [1035, 1037], "BrokerController::::getFilterServerManager()": [1039, 1041], "BrokerController::::getBrokerStatsManager()": [1043, 1045], "BrokerController::::getSendMessageHookList()": [1047, 1049], "BrokerController::::registerSendMessageHook(org.apache.rocketmq.broker.mqtrace.SendMessageHook)": [1051, 1054], "BrokerController::::getConsumeMessageHookList()": [1056, 1058], "BrokerController::::registerConsumeMessageHook(org.apache.rocketmq.broker.mqtrace.ConsumeMessageHook)": [1060, 1063], "BrokerController::::getRemotingServer()": [1070, 1072], "BrokerController::::getBrokerOuterAPI()": [1082, 1084], "BrokerController::::getStoreHost()": [1086, 1088], "BrokerController::::setStoreHost(java.net.InetSocketAddress)": [1090, 1092], "BrokerController::::getConfiguration()": [1094, 1096], "BrokerController::::getHeartbeatThreadPoolQueue()": [1098, 1100], "BrokerController::::getTransactionalMessageCheckService()": [1102, 1104], "BrokerController::::setTransactionalMessageCheckService(org.apache.rocketmq.broker.transaction.TransactionalMessageCheckService)": [1106, 1109], "BrokerController::::getTransactionalMessageService()": [1111, 1113], "BrokerController::::setTransactionalMessageService(org.apache.rocketmq.broker.transaction.TransactionalMessageService)": [1115, 1117], "BrokerController::::getTransactionalMessageCheckListener()": [1119, 1121], "BrokerController::::setTransactionalMessageCheckListener(org.apache.rocketmq.broker.transaction.AbstractTransactionalMessageCheckListener)": [1123, 1126], "BrokerController::::getEndTransactionThreadPoolQueue()": [1129, 1132], "BrokerController::::getAccessValidatorMap()": [1134, 1136], "BrokerController::::changeToSlave(int)": [1164, 1194], "BrokerController::::shutdownProcessorByHa()": [1241, 1245], "BrokerController::::getSendMessageExecutor()": [1247, 1249]}, "test_method_lines_dic": {"BrokerControllerTest::::testBrokerRestart()": [34, 44], "BrokerControllerTest::::destroy()": [46, 49]}, "reverse_method_lines_dic": {"218": "BrokerController::::getBrokerConfig()", "219": "BrokerController::::getBrokerConfig()", "220": "BrokerController::::getBrokerConfig()", "222": "BrokerController::::getNettyServerConfig()", "223": "BrokerController::::getNettyServerConfig()", "224": "BrokerController::::getNettyServerConfig()", "226": "BrokerController::::getPullThreadPoolQueue()", "227": "BrokerController::::getPullThreadPoolQueue()", "228": "BrokerController::::getPullThreadPoolQueue()", "230": "BrokerController::::getQueryThreadPoolQueue()", "231": "BrokerController::::getQueryThreadPoolQueue()", "232": "BrokerController::::getQueryThreadPoolQueue()", "234": "BrokerController::::initialize()", "235": "BrokerController::::initialize()", "236": "BrokerController::::initialize()", "237": "BrokerController::::initialize()", "238": "BrokerController::::initialize()", "239": "BrokerController::::initialize()", "240": "BrokerController::::initialize()", "241": "BrokerController::::initialize()", "242": "BrokerController::::initialize()", "243": "BrokerController::::initialize()", "244": "BrokerController::::initialize()", "245": "BrokerController::::initialize()", "246": "BrokerController::::initialize()", "247": "BrokerController::::initialize()", "248": "BrokerController::::initialize()", "249": "BrokerController::::initialize()", "250": "BrokerController::::initialize()", "251": "BrokerController::::initialize()", "252": "BrokerController::::initialize()", "253": "BrokerController::::initialize()", "254": "BrokerController::::initialize()", "255": "BrokerController::::initialize()", "256": "BrokerController::::initialize()", "257": "BrokerController::::initialize()", "258": "BrokerController::::initialize()", "259": "BrokerController::::initialize()", "260": "BrokerController::::initialize()", "261": "BrokerController::::initialize()", "262": "BrokerController::::initialize()", "263": "BrokerController::::initialize()", "264": "BrokerController::::initialize()", "265": "BrokerController::::initialize()", "266": "BrokerController::::initialize()", "267": "BrokerController::::initialize()", "268": "BrokerController::::initialize()", "269": "BrokerController::::initialize()", "270": "BrokerController::::initialize()", "271": "BrokerController::::initialize()", "272": "BrokerController::::initialize()", "273": "BrokerController::::initialize()", "274": "BrokerController::::initialize()", "275": "BrokerController::::initialize()", "276": "BrokerController::::initialize()", "277": "BrokerController::::initialize()", "278": "BrokerController::::initialize()", "279": "BrokerController::::initialize()", "280": "BrokerController::::initialize()", "281": "BrokerController::::initialize()", "282": "BrokerController::::initialize()", "283": "BrokerController::::initialize()", "284": "BrokerController::::initialize()", "285": "BrokerController::::initialize()", "286": "BrokerController::::initialize()", "287": "BrokerController::::initialize()", "288": "BrokerController::::initialize()", "289": "BrokerController::::initialize()", "290": "BrokerController::::initialize()", "291": "BrokerController::::initialize()", "292": "BrokerController::::initialize()", "293": "BrokerController::::initialize()", "294": "BrokerController::::initialize()", "295": "BrokerController::::initialize()", "296": "BrokerController::::initialize()", "297": "BrokerController::::initialize()", "298": "BrokerController::::initialize()", "299": "BrokerController::::initialize()", "300": "BrokerController::::initialize()", "301": "BrokerController::::initialize()", "302": "BrokerController::::initialize()", "303": "BrokerController::::initialize()", "304": "BrokerController::::initialize()", "305": "BrokerController::::initialize()", "306": "BrokerController::::initialize()", "307": "BrokerController::::initialize()", "308": "BrokerController::::initialize()", "309": "BrokerController::::initialize()", "310": "BrokerController::::initialize()", "311": "BrokerController::::initialize()", "312": "BrokerController::::initialize()", "313": "BrokerController::::initialize()", "314": "BrokerController::::initialize()", "315": "BrokerController::::initialize()", "316": "BrokerController::::initialize()", "317": "BrokerController::::initialize()", "318": "BrokerController::::initialize()", "319": "BrokerController::::initialize()", "320": "BrokerController::::initialize()", "321": "BrokerController::::initialize()", "322": "BrokerController::::initialize()", "323": "BrokerController::::initialize()", "324": "BrokerController::::initialize()", "325": "BrokerController::::initialize()", "326": "BrokerController::::initialize()", "327": "BrokerController::::initialize()", "328": "BrokerController::::initialize()", "329": "BrokerController::::initialize()", "330": "BrokerController::::initialize()", "331": "BrokerController::::initialize()", "332": "BrokerController::::initialize()", "333": "BrokerController::::initialize()", "334": "BrokerController::::initialize()", "335": "BrokerController::::initialize()", "336": "BrokerController::::initialize()", "337": "BrokerController::::initialize()", "338": "BrokerController::::initialize()", "339": "BrokerController::::initialize()", "340": "BrokerController::::initialize()", "341": "BrokerController::::initialize()", "342": "BrokerController::::initialize()", "343": "BrokerController::::initialize()", "344": "BrokerController::::initialize()", "345": "BrokerController::::initialize()", "346": "BrokerController::::initialize()", "347": "BrokerController::::initialize()", "348": "BrokerController::::initialize()", "349": "BrokerController::::initialize()", "350": "BrokerController::::initialize()", "351": "BrokerController::::initialize()", "352": "BrokerController::::initialize()", "353": "BrokerController::::initialize()", "354": "BrokerController::::initialize()", "355": "BrokerController::::initialize()", "356": "BrokerController::::initialize()", "357": "BrokerController::::initialize()", "358": "BrokerController::::initialize()", "359": "BrokerController::::initialize()", "360": "BrokerController::::initialize()", "361": "BrokerController::::initialize()", "362": "BrokerController::::initialize()", "363": "BrokerController::::initialize()", "364": "BrokerController::::initialize()", "365": "BrokerController::::initialize()", "366": "BrokerController::::initialize()", "367": "BrokerController::::initialize()", "368": "BrokerController::::initialize()", "369": "BrokerController::::initialize()", "370": "BrokerController::::initialize()", "371": "BrokerController::::initialize()", "372": "BrokerController::::initialize()", "373": "BrokerController::::initialize()", "374": "BrokerController::::initialize()", "375": "BrokerController::::initialize()", "376": "BrokerController::::initialize()", "377": "BrokerController::::initialize()", "378": "BrokerController::::initialize()", "379": "BrokerController::::initialize()", "380": "BrokerController::::initialize()", "381": "BrokerController::::initialize()", "382": "BrokerController::::initialize()", "383": "BrokerController::::initialize()", "384": "BrokerController::::initialize()", "385": "BrokerController::::initialize()", "386": "BrokerController::::initialize()", "387": "BrokerController::::initialize()", "388": "BrokerController::::initialize()", "389": "BrokerController::::initialize()", "390": "BrokerController::::initialize()", "391": "BrokerController::::initialize()", "392": "BrokerController::::initialize()", "393": "BrokerController::::initialize()", "394": "BrokerController::::initialize()", "395": "BrokerController::::initialize()", "396": "BrokerController::::initialize()", "397": "BrokerController::::initialize()", "398": "BrokerController::::initialize()", "399": "BrokerController::::initialize()", "400": "BrokerController::::initialize()", "401": "BrokerController::::initialize()", "402": "BrokerController::::initialize()", "403": "BrokerController::::initialize()", "404": "BrokerController::::initialize()", "405": "BrokerController::::initialize()", "406": "BrokerController::::initialize()", "407": "BrokerController::::initialize()", "408": "BrokerController::::initialize()", "409": "BrokerController::::initialize()", "410": "BrokerController::::initialize()", "411": "BrokerController::::initialize()", "412": "BrokerController::::initialize()", "413": "BrokerController::::initialize()", "414": "BrokerController::::initialize()", "415": "BrokerController::::initialize()", "416": "BrokerController::::initialize()", "417": "BrokerController::::initialize()", "418": "BrokerController::::initialize()", "419": "BrokerController::::initialize()", "420": "BrokerController::::initialize()", "421": "BrokerController::::initialize()", "422": "BrokerController::::initialize()", "423": "BrokerController::::initialize()", "424": "BrokerController::::initialize()", "425": "BrokerController::::initialize()", "426": "BrokerController::::initialize()", "427": "BrokerController::::initialize()", "428": "BrokerController::::initialize()", "429": "BrokerController::::initialize()", "430": "BrokerController::::initialize()", "431": "BrokerController::::initialize()", "432": "BrokerController::::initialize()", "433": "BrokerController::::initialize()", "434": "BrokerController::::initialize()", "435": "BrokerController::::initialize()", "436": "BrokerController::::initialize()", "437": "BrokerController::::initialize()", "438": "BrokerController::::initialize()", "439": "BrokerController::::initialize()", "440": "BrokerController::::initialize()", "441": "BrokerController::::initialize()", "442": "BrokerController::::initialize()", "443": "BrokerController::::initialize()", "444": "BrokerController::::initialize()", "445": "BrokerController::::initialize()", "446": "BrokerController::::initialize()", "447": "BrokerController::::initialize()", "448": "BrokerController::::initialize()", "449": "BrokerController::::initialize()", "450": "BrokerController::::initialize()", "451": "BrokerController::::initialize()", "452": "BrokerController::::initialize()", "453": "BrokerController::::initialize()", "454": "BrokerController::::initialize()", "455": "BrokerController::::initialize()", "456": "BrokerController::::initialize()", "457": "BrokerController::::initialize()", "458": "BrokerController::::initialize()", "459": "BrokerController::::initialize()", "460": "BrokerController::::initialize()", "461": "BrokerController::::initialize()", "462": "BrokerController::::initialize()", "463": "BrokerController::::initialize()", "464": "BrokerController::::initialize()", "465": "BrokerController::::initialize()", "466": "BrokerController::::initialize()", "467": "BrokerController::::initialize()", "468": "BrokerController::::initialize()", "469": "BrokerController::::initialize()", "470": "BrokerController::::initialize()", "471": "BrokerController::::initialize()", "472": "BrokerController::::initialize()", "473": "BrokerController::::initialize()", "474": "BrokerController::::initialize()", "475": "BrokerController::::initialize()", "476": "BrokerController::::initialize()", "477": "BrokerController::::initialize()", "478": "BrokerController::::initialize()", "479": "BrokerController::::initialize()", "480": "BrokerController::::initialize()", "481": "BrokerController::::initialize()", "482": "BrokerController::::initialize()", "483": "BrokerController::::initialize()", "484": "BrokerController::::initialize()", "485": "BrokerController::::initialize()", "486": "BrokerController::::initialize()", "487": "BrokerController::::initialize()", "488": "BrokerController::::initialize()", "489": "BrokerController::::initialize()", "491": "BrokerController::::initialTransaction()", "492": "BrokerController::::initialTransaction()", "493": "BrokerController::::initialTransaction()", "494": "BrokerController::::initialTransaction()", "495": "BrokerController::::initialTransaction()", "496": "BrokerController::::initialTransaction()", "497": "BrokerController::::initialTransaction()", "498": "BrokerController::::initialTransaction()", "499": "BrokerController::::initialTransaction()", "500": "BrokerController::::initialTransaction()", "501": "BrokerController::::initialTransaction()", "502": "BrokerController::::initialTransaction()", "503": "BrokerController::::initialTransaction()", "504": "BrokerController::::initialTransaction()", "506": "BrokerController::::initialAcl()", "507": "BrokerController::::initialAcl()", "508": "BrokerController::::initialAcl()", "509": "BrokerController::::initialAcl()", "510": "BrokerController::::initialAcl()", "511": "BrokerController::::initialAcl()", "512": "BrokerController::::initialAcl()", "513": "BrokerController::::initialAcl()", "514": "BrokerController::::initialAcl()", "515": "BrokerController::::initialAcl()", "516": "BrokerController::::initialAcl()", "517": "BrokerController::::initialAcl()", "518": "BrokerController::::initialAcl()", "519": "BrokerController::::initialAcl()", "520": "BrokerController::::initialAcl()", "521": "BrokerController::::initialAcl()", "522": "BrokerController::::initialAcl()", "523": "BrokerController::::initialAcl()", "524": "BrokerController::::initialAcl()", "525": "BrokerController::::initialAcl()", "526": "BrokerController::::initialAcl()", "527": "BrokerController::::initialAcl()", "528": "BrokerController::::initialAcl()", "529": "BrokerController::::initialAcl()", "530": "BrokerController::::initialAcl()", "531": "BrokerController::::initialAcl()", "532": "BrokerController::::initialAcl()", "533": "BrokerController::::initialAcl()", "534": "BrokerController::::initialAcl()", "537": "BrokerController::::initialRpcHooks()", "538": "BrokerController::::initialRpcHooks()", "539": "BrokerController::::initialRpcHooks()", "540": "BrokerController::::initialRpcHooks()", "541": "BrokerController::::initialRpcHooks()", "542": "BrokerController::::initialRpcHooks()", "543": "BrokerController::::initialRpcHooks()", "544": "BrokerController::::initialRpcHooks()", "545": "BrokerController::::initialRpcHooks()", "546": "BrokerController::::initialRpcHooks()", "548": "BrokerController::::registerProcessor()", "549": "BrokerController::::registerProcessor()", "550": "BrokerController::::registerProcessor()", "551": "BrokerController::::registerProcessor()", "552": "BrokerController::::registerProcessor()", "553": "BrokerController::::registerProcessor()", "554": "BrokerController::::registerProcessor()", "555": "BrokerController::::registerProcessor()", "556": "BrokerController::::registerProcessor()", "557": "BrokerController::::registerProcessor()", "558": "BrokerController::::registerProcessor()", "559": "BrokerController::::registerProcessor()", "560": "BrokerController::::registerProcessor()", "561": "BrokerController::::registerProcessor()", "562": "BrokerController::::registerProcessor()", "563": "BrokerController::::registerProcessor()", "564": "BrokerController::::registerProcessor()", "565": "BrokerController::::registerProcessor()", "566": "BrokerController::::registerProcessor()", "567": "BrokerController::::registerProcessor()", "568": "BrokerController::::registerProcessor()", "569": "BrokerController::::registerProcessor()", "570": "BrokerController::::registerProcessor()", "571": "BrokerController::::registerProcessor()", "572": "BrokerController::::registerProcessor()", "573": "BrokerController::::registerProcessor()", "574": "BrokerController::::registerProcessor()", "575": "BrokerController::::registerProcessor()", "576": "BrokerController::::registerProcessor()", "577": "BrokerController::::registerProcessor()", "578": "BrokerController::::registerProcessor()", "579": "BrokerController::::registerProcessor()", "580": "BrokerController::::registerProcessor()", "581": "BrokerController::::registerProcessor()", "582": "BrokerController::::registerProcessor()", "583": "BrokerController::::registerProcessor()", "584": "BrokerController::::registerProcessor()", "585": "BrokerController::::registerProcessor()", "586": "BrokerController::::registerProcessor()", "587": "BrokerController::::registerProcessor()", "588": "BrokerController::::registerProcessor()", "589": "BrokerController::::registerProcessor()", "590": "BrokerController::::registerProcessor()", "591": "BrokerController::::registerProcessor()", "592": "BrokerController::::registerProcessor()", "593": "BrokerController::::registerProcessor()", "594": "BrokerController::::registerProcessor()", "595": "BrokerController::::registerProcessor()", "596": "BrokerController::::registerProcessor()", "597": "BrokerController::::registerProcessor()", "598": "BrokerController::::registerProcessor()", "599": "BrokerController::::registerProcessor()", "600": "BrokerController::::registerProcessor()", "601": "BrokerController::::registerProcessor()", "602": "BrokerController::::registerProcessor()", "603": "BrokerController::::registerProcessor()", "604": "BrokerController::::registerProcessor()", "605": "BrokerController::::registerProcessor()", "606": "BrokerController::::registerProcessor()", "607": "BrokerController::::registerProcessor()", "608": "BrokerController::::registerProcessor()", "609": "BrokerController::::registerProcessor()", "610": "BrokerController::::registerProcessor()", "611": "BrokerController::::registerProcessor()", "612": "BrokerController::::registerProcessor()", "613": "BrokerController::::registerProcessor()", "614": "BrokerController::::registerProcessor()", "615": "BrokerController::::registerProcessor()", "616": "BrokerController::::registerProcessor()", "617": "BrokerController::::registerProcessor()", "618": "BrokerController::::registerProcessor()", "619": "BrokerController::::registerProcessor()", "620": "BrokerController::::registerProcessor()", "621": "BrokerController::::registerProcessor()", "622": "BrokerController::::registerProcessor()", "623": "BrokerController::::registerProcessor()", "624": "BrokerController::::registerProcessor()", "625": "BrokerController::::registerProcessor()", "626": "BrokerController::::registerProcessor()", "627": "BrokerController::::registerProcessor()", "628": "BrokerController::::registerProcessor()", "630": "BrokerController::::getBrokerStats()", "631": "BrokerController::::getBrokerStats()", "632": "BrokerController::::getBrokerStats()", "638": "BrokerController::::protectBroker()", "639": "BrokerController::::protectBroker()", "640": "BrokerController::::protectBroker()", "641": "BrokerController::::protectBroker()", "642": "BrokerController::::protectBroker()", "643": "BrokerController::::protectBroker()", "644": "BrokerController::::protectBroker()", "645": "BrokerController::::protectBroker()", "646": "BrokerController::::protectBroker()", "647": "BrokerController::::protectBroker()", "648": "BrokerController::::protectBroker()", "649": "BrokerController::::protectBroker()", "650": "BrokerController::::protectBroker()", "651": "BrokerController::::protectBroker()", "652": "BrokerController::::protectBroker()", "654": "BrokerController::::headSlowTimeMills(java.util.concurrent.BlockingQueue<java.lang.Runnable>)", "655": "BrokerController::::headSlowTimeMills(java.util.concurrent.BlockingQueue<java.lang.Runnable>)", "656": "BrokerController::::headSlowTimeMills(java.util.concurrent.BlockingQueue<java.lang.Runnable>)", "657": "BrokerController::::headSlowTimeMills(java.util.concurrent.BlockingQueue<java.lang.Runnable>)", "658": "BrokerController::::headSlowTimeMills(java.util.concurrent.BlockingQueue<java.lang.Runnable>)", "659": "BrokerController::::headSlowTimeMills(java.util.concurrent.BlockingQueue<java.lang.Runnable>)", "660": "BrokerController::::headSlowTimeMills(java.util.concurrent.BlockingQueue<java.lang.Runnable>)", "661": "BrokerController::::headSlowTimeMills(java.util.concurrent.BlockingQueue<java.lang.Runnable>)", "662": "BrokerController::::headSlowTimeMills(java.util.concurrent.BlockingQueue<java.lang.Runnable>)", "663": "BrokerController::::headSlowTimeMills(java.util.concurrent.BlockingQueue<java.lang.Runnable>)", "664": "BrokerController::::headSlowTimeMills(java.util.concurrent.BlockingQueue<java.lang.Runnable>)", "665": "BrokerController::::headSlowTimeMills(java.util.concurrent.BlockingQueue<java.lang.Runnable>)", "666": "BrokerController::::headSlowTimeMills(java.util.concurrent.BlockingQueue<java.lang.Runnable>)", "667": "BrokerController::::headSlowTimeMills(java.util.concurrent.BlockingQueue<java.lang.Runnable>)", "669": "BrokerController::::headSlowTimeMills4SendThreadPoolQueue()", "670": "BrokerController::::headSlowTimeMills4SendThreadPoolQueue()", "671": "BrokerController::::headSlowTimeMills4SendThreadPoolQueue()", "673": "BrokerController::::headSlowTimeMills4PullThreadPoolQueue()", "674": "BrokerController::::headSlowTimeMills4PullThreadPoolQueue()", "675": "BrokerController::::headSlowTimeMills4PullThreadPoolQueue()", "677": "BrokerController::::headSlowTimeMills4QueryThreadPoolQueue()", "678": "BrokerController::::headSlowTimeMills4QueryThreadPoolQueue()", "679": "BrokerController::::headSlowTimeMills4QueryThreadPoolQueue()", "681": "BrokerController::::headSlowTimeMills4EndTransactionThreadPoolQueue()", "682": "BrokerController::::headSlowTimeMills4EndTransactionThreadPoolQueue()", "683": "BrokerController::::headSlowTimeMills4EndTransactionThreadPoolQueue()", "685": "BrokerController::::printWaterMark()", "686": "BrokerController::::printWaterMark()", "687": "BrokerController::::printWaterMark()", "688": "BrokerController::::printWaterMark()", "689": "BrokerController::::printWaterMark()", "690": "BrokerController::::printWaterMark()", "692": "BrokerController::::getMessageStore()", "693": "BrokerController::::getMessageStore()", "694": "BrokerController::::getMessageStore()", "700": "BrokerController::::printMasterAndSlaveDiff()", "701": "BrokerController::::printMasterAndSlaveDiff()", "702": "BrokerController::::printMasterAndSlaveDiff()", "703": "BrokerController::::printMasterAndSlaveDiff()", "704": "BrokerController::::printMasterAndSlaveDiff()", "705": "BrokerController::::printMasterAndSlaveDiff()", "707": "BrokerController::::getBroker2Client()", "708": "BrokerController::::getBroker2Client()", "709": "BrokerController::::getBroker2Client()", "711": "BrokerController::::getConsumerManager()", "712": "BrokerController::::getConsumerManager()", "713": "BrokerController::::getConsumerManager()", "715": "BrokerController::::getConsumerFilterManager()", "716": "BrokerController::::getConsumerFilterManager()", "717": "BrokerController::::getConsumerFilterManager()", "719": "BrokerController::::getConsumerOffsetManager()", "720": "BrokerController::::getConsumerOffsetManager()", "721": "BrokerController::::getConsumerOffsetManager()", "723": "BrokerController::::getMessageStoreConfig()", "724": "BrokerController::::getMessageStoreConfig()", "725": "BrokerController::::getMessageStoreConfig()", "727": "BrokerController::::getProducerManager()", "728": "BrokerController::::getProducerManager()", "729": "BrokerController::::getProducerManager()", "735": "BrokerController::::getPullMessageProcessor()", "736": "BrokerController::::getPullMessageProcessor()", "737": "BrokerController::::getPullMessageProcessor()", "739": "BrokerController::::getPullRequestHoldService()", "740": "BrokerController::::getPullRequestHoldService()", "741": "BrokerController::::getPullRequestHoldService()", "743": "BrokerController::::getSubscriptionGroupManager()", "744": "BrokerController::::getSubscriptionGroupManager()", "745": "BrokerController::::getSubscriptionGroupManager()", "747": "BrokerController::::shutdown()", "748": "BrokerController::::shutdown()", "749": "BrokerController::::shutdown()", "750": "BrokerController::::shutdown()", "751": "BrokerController::::shutdown()", "752": "BrokerController::::shutdown()", "753": "BrokerController::::shutdown()", "754": "BrokerController::::shutdown()", "755": "BrokerController::::shutdown()", "756": "BrokerController::::shutdown()", "757": "BrokerController::::shutdown()", "758": "BrokerController::::shutdown()", "759": "BrokerController::::shutdown()", "760": "BrokerController::::shutdown()", "761": "BrokerController::::shutdown()", "762": "BrokerController::::shutdown()", "763": "BrokerController::::shutdown()", "764": "BrokerController::::shutdown()", "765": "BrokerController::::shutdown()", "766": "BrokerController::::shutdown()", "767": "BrokerController::::shutdown()", "768": "BrokerController::::shutdown()", "769": "BrokerController::::shutdown()", "770": "BrokerController::::shutdown()", "771": "BrokerController::::shutdown()", "772": "BrokerController::::shutdown()", "773": "BrokerController::::shutdown()", "774": "BrokerController::::shutdown()", "775": "BrokerController::::shutdown()", "776": "BrokerController::::shutdown()", "777": "BrokerController::::shutdown()", "778": "BrokerController::::shutdown()", "779": "BrokerController::::shutdown()", "780": "BrokerController::::shutdown()", "781": "BrokerController::::shutdown()", "782": "BrokerController::::shutdown()", "783": "BrokerController::::shutdown()", "784": "BrokerController::::shutdown()", "785": "BrokerController::::shutdown()", "786": "BrokerController::::shutdown()", "787": "BrokerController::::shutdown()", "788": "BrokerController::::shutdown()", "789": "BrokerController::::shutdown()", "790": "BrokerController::::shutdown()", "791": "BrokerController::::shutdown()", "792": "BrokerController::::shutdown()", "793": "BrokerController::::shutdown()", "794": "BrokerController::::shutdown()", "795": "BrokerController::::shutdown()", "796": "BrokerController::::shutdown()", "797": "BrokerController::::shutdown()", "798": "BrokerController::::shutdown()", "799": "BrokerController::::shutdown()", "800": "BrokerController::::shutdown()", "801": "BrokerController::::shutdown()", "802": "BrokerController::::shutdown()", "803": "BrokerController::::shutdown()", "804": "BrokerController::::shutdown()", "805": "BrokerController::::shutdown()", "806": "BrokerController::::shutdown()", "807": "BrokerController::::shutdown()", "808": "BrokerController::::shutdown()", "809": "BrokerController::::shutdown()", "810": "BrokerController::::shutdown()", "811": "BrokerController::::shutdown()", "812": "BrokerController::::shutdown()", "813": "BrokerController::::shutdown()", "814": "BrokerController::::shutdown()", "815": "BrokerController::::shutdown()", "816": "BrokerController::::shutdown()", "817": "BrokerController::::shutdown()", "818": "BrokerController::::shutdown()", "819": "BrokerController::::shutdown()", "820": "BrokerController::::shutdown()", "821": "BrokerController::::shutdown()", "822": "BrokerController::::shutdown()", "823": "BrokerController::::shutdown()", "824": "BrokerController::::shutdown()", "825": "BrokerController::::shutdown()", "826": "BrokerController::::shutdown()", "827": "BrokerController::::shutdown()", "828": "BrokerController::::shutdown()", "829": "BrokerController::::shutdown()", "830": "BrokerController::::shutdown()", "831": "BrokerController::::shutdown()", "832": "BrokerController::::shutdown()", "833": "BrokerController::::shutdown()", "834": "BrokerController::::shutdown()", "835": "BrokerController::::shutdown()", "836": "BrokerController::::shutdown()", "837": "BrokerController::::shutdown()", "838": "BrokerController::::shutdown()", "839": "BrokerController::::shutdown()", "840": "BrokerController::::shutdown()", "842": "BrokerController::::unregisterBrokerAll()", "843": "BrokerController::::unregisterBrokerAll()", "844": "BrokerController::::unregisterBrokerAll()", "845": "BrokerController::::unregisterBrokerAll()", "846": "BrokerController::::unregisterBrokerAll()", "847": "BrokerController::::unregisterBrokerAll()", "848": "BrokerController::::unregisterBrokerAll()", "850": "BrokerController::::getBrokerAddr()", "851": "BrokerController::::getBrokerAddr()", "852": "BrokerController::::getBrokerAddr()", "854": "BrokerController::::start()", "855": "BrokerController::::start()", "856": "BrokerController::::start()", "857": "BrokerController::::start()", "858": "BrokerController::::start()", "859": "BrokerController::::start()", "860": "BrokerController::::start()", "861": "BrokerController::::start()", "862": "BrokerController::::start()", "863": "BrokerController::::start()", "864": "BrokerController::::start()", "865": "BrokerController::::start()", "866": "BrokerController::::start()", "867": "BrokerController::::start()", "868": "BrokerController::::start()", "869": "BrokerController::::start()", "870": "BrokerController::::start()", "871": "BrokerController::::start()", "872": "BrokerController::::start()", "873": "BrokerController::::start()", "874": "BrokerController::::start()", "875": "BrokerController::::start()", "876": "BrokerController::::start()", "877": "BrokerController::::start()", "878": "BrokerController::::start()", "879": "BrokerController::::start()", "880": "BrokerController::::start()", "881": "BrokerController::::start()", "882": "BrokerController::::start()", "883": "BrokerController::::start()", "884": "BrokerController::::start()", "885": "BrokerController::::start()", "886": "BrokerController::::start()", "887": "BrokerController::::start()", "888": "BrokerController::::start()", "889": "BrokerController::::start()", "890": "BrokerController::::start()", "891": "BrokerController::::start()", "892": "BrokerController::::start()", "893": "BrokerController::::start()", "894": "BrokerController::::start()", "895": "BrokerController::::start()", "896": "BrokerController::::start()", "897": "BrokerController::::start()", "898": "BrokerController::::start()", "899": "BrokerController::::start()", "900": "BrokerController::::start()", "901": "BrokerController::::start()", "902": "BrokerController::::start()", "903": "BrokerController::::start()", "904": "BrokerController::::start()", "905": "BrokerController::::start()", "906": "BrokerController::::start()", "907": "BrokerController::::start()", "908": "BrokerController::::start()", "909": "BrokerController::::start()", "910": "BrokerController::::start()", "911": "BrokerController::::start()", "912": "BrokerController::::start()", "913": "BrokerController::::start()", "914": "BrokerController::::start()", "915": "BrokerController::::start()", "935": "BrokerController::::registerBrokerAll(boolean,boolean,boolean)", "936": "BrokerController::::registerBrokerAll(boolean,boolean,boolean)", "937": "BrokerController::::registerBrokerAll(boolean,boolean,boolean)", "938": "BrokerController::::registerBrokerAll(boolean,boolean,boolean)", "939": "BrokerController::::registerBrokerAll(boolean,boolean,boolean)", "940": "BrokerController::::registerBrokerAll(boolean,boolean,boolean)", "941": "BrokerController::::registerBrokerAll(boolean,boolean,boolean)", "942": "BrokerController::::registerBrokerAll(boolean,boolean,boolean)", "943": "BrokerController::::registerBrokerAll(boolean,boolean,boolean)", "944": "BrokerController::::registerBrokerAll(boolean,boolean,boolean)", "945": "BrokerController::::registerBrokerAll(boolean,boolean,boolean)", "946": "BrokerController::::registerBrokerAll(boolean,boolean,boolean)", "947": "BrokerController::::registerBrokerAll(boolean,boolean,boolean)", "948": "BrokerController::::registerBrokerAll(boolean,boolean,boolean)", "949": "BrokerController::::registerBrokerAll(boolean,boolean,boolean)", "950": "BrokerController::::registerBrokerAll(boolean,boolean,boolean)", "951": "BrokerController::::registerBrokerAll(boolean,boolean,boolean)", "952": "BrokerController::::registerBrokerAll(boolean,boolean,boolean)", "953": "BrokerController::::registerBrokerAll(boolean,boolean,boolean)", "954": "BrokerController::::registerBrokerAll(boolean,boolean,boolean)", "955": "BrokerController::::registerBrokerAll(boolean,boolean,boolean)", "956": "BrokerController::::registerBrokerAll(boolean,boolean,boolean)", "957": "BrokerController::::registerBrokerAll(boolean,boolean,boolean)", "989": "BrokerController::::needRegister(java.lang.String,java.lang.String,java.lang.String,long,int)", "990": "BrokerController::::needRegister(java.lang.String,java.lang.String,java.lang.String,long,int)", "991": "BrokerController::::needRegister(java.lang.String,java.lang.String,java.lang.String,long,int)", "992": "BrokerController::::needRegister(java.lang.String,java.lang.String,java.lang.String,long,int)", "993": "BrokerController::::needRegister(java.lang.String,java.lang.String,java.lang.String,long,int)", "994": "BrokerController::::needRegister(java.lang.String,java.lang.String,java.lang.String,long,int)", "995": "BrokerController::::needRegister(java.lang.String,java.lang.String,java.lang.String,long,int)", "996": "BrokerController::::needRegister(java.lang.String,java.lang.String,java.lang.String,long,int)", "997": "BrokerController::::needRegister(java.lang.String,java.lang.String,java.lang.String,long,int)", "998": "BrokerController::::needRegister(java.lang.String,java.lang.String,java.lang.String,long,int)", "999": "BrokerController::::needRegister(java.lang.String,java.lang.String,java.lang.String,long,int)", "1000": "BrokerController::::needRegister(java.lang.String,java.lang.String,java.lang.String,long,int)", "1001": "BrokerController::::needRegister(java.lang.String,java.lang.String,java.lang.String,long,int)", "1002": "BrokerController::::needRegister(java.lang.String,java.lang.String,java.lang.String,long,int)", "1003": "BrokerController::::needRegister(java.lang.String,java.lang.String,java.lang.String,long,int)", "1004": "BrokerController::::needRegister(java.lang.String,java.lang.String,java.lang.String,long,int)", "1005": "BrokerController::::needRegister(java.lang.String,java.lang.String,java.lang.String,long,int)", "1007": "BrokerController::::getTopicConfigManager()", "1008": "BrokerController::::getTopicConfigManager()", "1009": "BrokerController::::getTopicConfigManager()", "1011": "BrokerController::::setTopicConfigManager(org.apache.rocketmq.broker.topic.TopicConfigManager)", "1012": "BrokerController::::setTopicConfigManager(org.apache.rocketmq.broker.topic.TopicConfigManager)", "1013": "BrokerController::::setTopicConfigManager(org.apache.rocketmq.broker.topic.TopicConfigManager)", "1015": "BrokerController::::getHAServerAddr()", "1016": "BrokerController::::getHAServerAddr()", "1017": "BrokerController::::getHAServerAddr()", "1019": "BrokerController::::getRebalanceLockManager()", "1020": "BrokerController::::getRebalanceLockManager()", "1021": "BrokerController::::getRebalanceLockManager()", "1023": "BrokerController::::getSlaveSynchronize()", "1024": "BrokerController::::getSlaveSynchronize()", "1025": "BrokerController::::getSlaveSynchronize()", "1027": "BrokerController::::getPullMessageExecutor()", "1028": "BrokerController::::getPullMessageExecutor()", "1029": "BrokerController::::getPullMessageExecutor()", "1031": "BrokerController::::setPullMessageExecutor(java.util.concurrent.ExecutorService)", "1032": "BrokerController::::setPullMessageExecutor(java.util.concurrent.ExecutorService)", "1033": "BrokerController::::setPullMessageExecutor(java.util.concurrent.ExecutorService)", "1035": "BrokerController::::getSendThreadPoolQueue()", "1036": "BrokerController::::getSendThreadPoolQueue()", "1037": "BrokerController::::getSendThreadPoolQueue()", "1039": "BrokerController::::getFilterServerManager()", "1040": "BrokerController::::getFilterServerManager()", "1041": "BrokerController::::getFilterServerManager()", "1043": "BrokerController::::getBrokerStatsManager()", "1044": "BrokerController::::getBrokerStatsManager()", "1045": "BrokerController::::getBrokerStatsManager()", "1047": "BrokerController::::getSendMessageHookList()", "1048": "BrokerController::::getSendMessageHookList()", "1049": "BrokerController::::getSendMessageHookList()", "1051": "BrokerController::::registerSendMessageHook(org.apache.rocketmq.broker.mqtrace.SendMessageHook)", "1052": "BrokerController::::registerSendMessageHook(org.apache.rocketmq.broker.mqtrace.SendMessageHook)", "1053": "BrokerController::::registerSendMessageHook(org.apache.rocketmq.broker.mqtrace.SendMessageHook)", "1054": "BrokerController::::registerSendMessageHook(org.apache.rocketmq.broker.mqtrace.SendMessageHook)", "1056": "BrokerController::::getConsumeMessageHookList()", "1057": "BrokerController::::getConsumeMessageHookList()", "1058": "BrokerController::::getConsumeMessageHookList()", "1060": "BrokerController::::registerConsumeMessageHook(org.apache.rocketmq.broker.mqtrace.ConsumeMessageHook)", "1061": "BrokerController::::registerConsumeMessageHook(org.apache.rocketmq.broker.mqtrace.ConsumeMessageHook)", "1062": "BrokerController::::registerConsumeMessageHook(org.apache.rocketmq.broker.mqtrace.ConsumeMessageHook)", "1063": "BrokerController::::registerConsumeMessageHook(org.apache.rocketmq.broker.mqtrace.ConsumeMessageHook)", "1070": "BrokerController::::getRemotingServer()", "1071": "BrokerController::::getRemotingServer()", "1072": "BrokerController::::getRemotingServer()", "1082": "BrokerController::::getBrokerOuterAPI()", "1083": "BrokerController::::getBrokerOuterAPI()", "1084": "BrokerController::::getBrokerOuterAPI()", "1086": "BrokerController::::getStoreHost()", "1087": "BrokerController::::getStoreHost()", "1088": "BrokerController::::getStoreHost()", "1090": "BrokerController::::setStoreHost(java.net.InetSocketAddress)", "1091": "BrokerController::::setStoreHost(java.net.InetSocketAddress)", "1092": "BrokerController::::setStoreHost(java.net.InetSocketAddress)", "1094": "BrokerController::::getConfiguration()", "1095": "BrokerController::::getConfiguration()", "1096": "BrokerController::::getConfiguration()", "1098": "BrokerController::::getHeartbeatThreadPoolQueue()", "1099": "BrokerController::::getHeartbeatThreadPoolQueue()", "1100": "BrokerController::::getHeartbeatThreadPoolQueue()", "1102": "BrokerController::::getTransactionalMessageCheckService()", "1103": "BrokerController::::getTransactionalMessageCheckService()", "1104": "BrokerController::::getTransactionalMessageCheckService()", "1106": "BrokerController::::setTransactionalMessageCheckService(org.apache.rocketmq.broker.transaction.TransactionalMessageCheckService)", "1107": "BrokerController::::setTransactionalMessageCheckService(org.apache.rocketmq.broker.transaction.TransactionalMessageCheckService)", "1108": "BrokerController::::setTransactionalMessageCheckService(org.apache.rocketmq.broker.transaction.TransactionalMessageCheckService)", "1109": "BrokerController::::setTransactionalMessageCheckService(org.apache.rocketmq.broker.transaction.TransactionalMessageCheckService)", "1111": "BrokerController::::getTransactionalMessageService()", "1112": "BrokerController::::getTransactionalMessageService()", "1113": "BrokerController::::getTransactionalMessageService()", "1115": "BrokerController::::setTransactionalMessageService(org.apache.rocketmq.broker.transaction.TransactionalMessageService)", "1116": "BrokerController::::setTransactionalMessageService(org.apache.rocketmq.broker.transaction.TransactionalMessageService)", "1117": "BrokerController::::setTransactionalMessageService(org.apache.rocketmq.broker.transaction.TransactionalMessageService)", "1119": "BrokerController::::getTransactionalMessageCheckListener()", "1120": "BrokerController::::getTransactionalMessageCheckListener()", "1121": "BrokerController::::getTransactionalMessageCheckListener()", "1123": "BrokerController::::setTransactionalMessageCheckListener(org.apache.rocketmq.broker.transaction.AbstractTransactionalMessageCheckListener)", "1124": "BrokerController::::setTransactionalMessageCheckListener(org.apache.rocketmq.broker.transaction.AbstractTransactionalMessageCheckListener)", "1125": "BrokerController::::setTransactionalMessageCheckListener(org.apache.rocketmq.broker.transaction.AbstractTransactionalMessageCheckListener)", "1126": "BrokerController::::setTransactionalMessageCheckListener(org.apache.rocketmq.broker.transaction.AbstractTransactionalMessageCheckListener)", "1129": "BrokerController::::getEndTransactionThreadPoolQueue()", "1130": "BrokerController::::getEndTransactionThreadPoolQueue()", "1131": "BrokerController::::getEndTransactionThreadPoolQueue()", "1132": "BrokerController::::getEndTransactionThreadPoolQueue()", "1134": "BrokerController::::getAccessValidatorMap()", "1135": "BrokerController::::getAccessValidatorMap()", "1136": "BrokerController::::getAccessValidatorMap()", "1164": "BrokerController::::changeToSlave(int)", "1165": "BrokerController::::changeToSlave(int)", "1166": "BrokerController::::changeToSlave(int)", "1167": "BrokerController::::changeToSlave(int)", "1168": "BrokerController::::changeToSlave(int)", "1169": "BrokerController::::changeToSlave(int)", "1170": "BrokerController::::changeToSlave(int)", "1171": "BrokerController::::changeToSlave(int)", "1172": "BrokerController::::changeToSlave(int)", "1173": "BrokerController::::changeToSlave(int)", "1174": "BrokerController::::changeToSlave(int)", "1175": "BrokerController::::changeToSlave(int)", "1176": "BrokerController::::changeToSlave(int)", "1177": "BrokerController::::changeToSlave(int)", "1178": "BrokerController::::changeToSlave(int)", "1179": "BrokerController::::changeToSlave(int)", "1180": "BrokerController::::changeToSlave(int)", "1181": "BrokerController::::changeToSlave(int)", "1182": "BrokerController::::changeToSlave(int)", "1183": "BrokerController::::changeToSlave(int)", "1184": "BrokerController::::changeToSlave(int)", "1185": "BrokerController::::changeToSlave(int)", "1186": "BrokerController::::changeToSlave(int)", "1187": "BrokerController::::changeToSlave(int)", "1188": "BrokerController::::changeToSlave(int)", "1189": "BrokerController::::changeToSlave(int)", "1190": "BrokerController::::changeToSlave(int)", "1191": "BrokerController::::changeToSlave(int)", "1192": "BrokerController::::changeToSlave(int)", "1193": "BrokerController::::changeToSlave(int)", "1194": "BrokerController::::changeToSlave(int)", "1241": "BrokerController::::shutdownProcessorByHa()", "1242": "BrokerController::::shutdownProcessorByHa()", "1243": "BrokerController::::shutdownProcessorByHa()", "1244": "BrokerController::::shutdownProcessorByHa()", "1245": "BrokerController::::shutdownProcessorByHa()", "1247": "BrokerController::::getSendMessageExecutor()", "1248": "BrokerController::::getSendMessageExecutor()", "1249": "BrokerController::::getSendMessageExecutor()"}, "test_reverse_method_lines_dic": {"34": "BrokerControllerTest::::testBrokerRestart()", "35": "BrokerControllerTest::::testBrokerRestart()", "36": "BrokerControllerTest::::testBrokerRestart()", "37": "BrokerControllerTest::::testBrokerRestart()", "38": "BrokerControllerTest::::testBrokerRestart()", "39": "BrokerControllerTest::::testBrokerRestart()", "40": "BrokerControllerTest::::testBrokerRestart()", "41": "BrokerControllerTest::::testBrokerRestart()", "42": "BrokerControllerTest::::testBrokerRestart()", "43": "BrokerControllerTest::::testBrokerRestart()", "44": "BrokerControllerTest::::testBrokerRestart()", "46": "BrokerControllerTest::::destroy()", "47": "BrokerControllerTest::::destroy()", "48": "BrokerControllerTest::::destroy()", "49": "BrokerControllerTest::::destroy()"}, "tests": [{"test_lines": [34, 44], "covered_lines": [111, 112, 113, 129, 131, 144, 145, 159, 169, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 210, 211, 213, 216, 219, 223, 227, 235, 237, 238, 239, 241, 244, 247, 251, 253, 254, 255, 259, 263, 265, 266, 267, 268, 269, 270, 271, 272, 278, 279, 280, 286, 287, 288, 294, 295, 296, 302, 303, 306, 307, 308, 314, 315, 316, 322, 323, 324, 330, 331, 334, 336, 337, 338, 349, 358, 360, 371, 382, 393, 405, 408, 422, 423, 431, 444, 447, 453, 454, 482, 484, 485, 486, 488, 492, 493, 497, 498, 502, 503, 504, 507, 508, 509, 539, 540, 541, 552, 553, 554, 557, 558, 559, 560, 561, 562, 563, 564, 568, 569, 574, 575, 577, 578, 579, 580, 585, 586, 587, 589, 590, 595, 596, 597, 598, 600, 601, 602, 607, 608, 609, 610, 612, 613, 614, 619, 620, 625, 626, 627, 628, 693, 724, 748, 749, 752, 753, 756, 757, 760, 761, 764, 765, 768, 769, 772, 773, 776, 778, 780, 782, 784, 785, 788, 789, 792, 793, 796, 797, 800, 801, 804, 806, 807, 810, 811, 814, 815, 818, 819, 822, 823, 826, 827, 830, 831, 833, 834, 837, 838, 840, 843, 844, 845, 846, 847, 848, 851, 855, 856, 859, 860, 863, 864, 867, 868, 871, 872, 875, 876, 879, 880, 883, 884, 887, 888, 889, 890, 893, 904, 906, 907, 910, 911, 915, 936, 938, 939, 950, 955, 957, 961, 962, 963, 964, 965, 966, 968, 970, 971, 973, 987, 1008, 1016, 1036, 1091, 1092, 1099, 1112, 1120, 1130, 1139, 1157, 1160, 1162, 1234, 1235, 1236, 1239]}]}, "/bernard/dataset_construction/prep/repos/RocketMQC/broker/src/main/java/org/apache/rocketmq/broker/latency/BrokerFastFailure.java": {"class_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "package org.apache.rocketmq.broker.latency;\n", "\n", "import java.util.concurrent.BlockingQueue;\n", "import java.util.concurrent.Executors;\n", "import java.util.concurrent.ScheduledExecutorService;\n", "import java.util.concurrent.TimeUnit;\n", "import org.apache.rocketmq.broker.BrokerController;\n", "import org.apache.rocketmq.common.ThreadFactoryImpl;\n", "import org.apache.rocketmq.common.constant.LoggerName;\n", "import org.apache.rocketmq.logging.InternalLogger;\n", "import org.apache.rocketmq.logging.InternalLoggerFactory;\n", "import org.apache.rocketmq.remoting.netty.RequestTask;\n", "import org.apache.rocketmq.remoting.protocol.RemotingSysResponseCode;\n", "\n", "public class BrokerFastFailure {\n", "    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);\n", "    private final ScheduledExecutorService scheduledExecutorService = Executors.newSingleThreadScheduledExecutor(new ThreadFactoryImpl(\n", "        \"BrokerFastFailureScheduledThread\"));\n", "    private final BrokerController brokerController;\n", "\n", "    public BrokerFastFailure(final BrokerController brokerController) {\n", "        this.brokerController = brokerController;\n", "    }\n", "\n", "    public static RequestTask castRunnable(final Runnable runnable) {\n", "        try {\n", "            if (runnable instanceof FutureTaskExt) {\n", "                FutureTaskExt object = (FutureTaskExt) runnable;\n", "                return (RequestTask) object.getRunnable();\n", "            }\n", "        } catch (Throwable e) {\n", "            log.error(String.format(\"castRunnable exception, %s\", runnable.getClass().getName()), e);\n", "        }\n", "\n", "        return null;\n", "    }\n", "\n", "    public void start() {\n", "        this.scheduledExecutorService.scheduleAtFixedRate(new Runnable() {\n", "            @Override\n", "            public void run() {\n", "                if (brokerController.getBrokerConfig().isBrokerFastFailureEnable()) {\n", "                    cleanExpiredRequest();\n", "                }\n", "            }\n", "        }, 1000, 10, TimeUnit.MILLISECONDS);\n", "    }\n", "\n", "    private void cleanExpiredRequest() {\n", "        while (this.brokerController.getMessageStore().isOSPageCacheBusy()) {\n", "            try {\n", "                if (!this.brokerController.getSendThreadPoolQueue().isEmpty()) {\n", "                    final Runnable runnable = this.brokerController.getSendThreadPoolQueue().poll(0, TimeUnit.SECONDS);\n", "                    if (null == runnable) {\n", "                        break;\n", "                    }\n", "\n", "                    final RequestTask rt = castRunnable(runnable);\n", "                    rt.returnResponse(RemotingSysResponseCode.SYSTEM_BUSY, String.format(\"[PCBUSY_CLEAN_QUEUE]broker busy, start flow control for a while, period in queue: %sms, size of queue: %d\", System.currentTimeMillis() - rt.getCreateTimestamp(), this.brokerController.getSendThreadPoolQueue().size()));\n", "                } else {\n", "                    break;\n", "                }\n", "            } catch (Throwable ignored) {\n", "            }\n", "        }\n", "\n", "        cleanExpiredRequestInQueue(this.brokerController.getSendThreadPoolQueue(),\n", "            this.brokerController.getBrokerConfig().getWaitTimeMillsInSendQueue());\n", "\n", "        cleanExpiredRequestInQueue(this.brokerController.getPullThreadPoolQueue(),\n", "            this.brokerController.getBrokerConfig().getWaitTimeMillsInPullQueue());\n", "\n", "        cleanExpiredRequestInQueue(this.brokerController.getHeartbeatThreadPoolQueue(),\n", "            this.brokerController.getBrokerConfig().getWaitTimeMillsInHeartbeatQueue());\n", "\n", "        cleanExpiredRequestInQueue(this.brokerController.getEndTransactionThreadPoolQueue(), this\n", "            .brokerController.getBrokerConfig().getWaitTimeMillsInTransactionQueue());\n", "    }\n", "\n", "    void cleanExpiredRequestInQueue(final BlockingQueue<Runnable> blockingQueue, final long maxWaitTimeMillsInQueue) {\n", "        while (true) {\n", "            try {\n", "                if (!blockingQueue.isEmpty()) {\n", "                    final Runnable runnable = blockingQueue.peek();\n", "                    if (null == runnable) {\n", "                        break;\n", "                    }\n", "                    final RequestTask rt = castRunnable(runnable);\n", "                    if (rt == null || rt.isStopRun()) {\n", "                        break;\n", "                    }\n", "\n", "                    final long behind = System.currentTimeMillis() - rt.getCreateTimestamp();\n", "                    if (behind >= maxWaitTimeMillsInQueue) {\n", "                        if (blockingQueue.remove(runnable)) {\n", "                            rt.setStopRun(true);\n", "                            rt.returnResponse(RemotingSysResponseCode.SYSTEM_BUSY, String.format(\"[TIMEOUT_CLEAN_QUEUE]broker busy, start flow control for a while, period in queue: %sms, size of queue: %d\", behind, blockingQueue.size()));\n", "                        }\n", "                    } else {\n", "                        break;\n", "                    }\n", "                } else {\n", "                    break;\n", "                }\n", "            } catch (Throwable ignored) {\n", "            }\n", "        }\n", "    }\n", "\n", "    public void shutdown() {\n", "        this.scheduledExecutorService.shutdown();\n", "    }\n", "}\n"], "test_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "package org.apache.rocketmq.broker.latency;\n", "\n", "import java.util.concurrent.BlockingQueue;\n", "import java.util.concurrent.LinkedBlockingQueue;\n", "import java.util.concurrent.TimeUnit;\n", "import org.apache.rocketmq.remoting.netty.RequestTask;\n", "import org.junit.Test;\n", "\n", "import static org.assertj.core.api.Assertions.assertThat;\n", "\n", "public class BrokerFastFailureTest {\n", "    @Test\n", "    public void testCleanExpiredRequestInQueue() throws Exception {\n", "        BrokerFastFailure brokerFastFailure = new BrokerFastFailure(null);\n", "\n", "        BlockingQueue<Runnable> queue = new LinkedBlockingQueue<>();\n", "        brokerFastFailure.cleanExpiredRequestInQueue(queue, 1);\n", "        assertThat(queue.size()).isZero();\n", "\n", "        //Normal Runnable\n", "        Runnable runnable = new Runnable() {\n", "            @Override\n", "            public void run() {\n", "\n", "            }\n", "        };\n", "        queue.add(runnable);\n", "\n", "        assertThat(queue.size()).isEqualTo(1);\n", "        brokerFastFailure.cleanExpiredRequestInQueue(queue, 1);\n", "        assertThat(queue.size()).isEqualTo(1);\n", "\n", "        queue.clear();\n", "\n", "        //With expired request\n", "        RequestTask expiredRequest = new RequestTask(runnable, null, null);\n", "        queue.add(new FutureTaskExt<>(expiredRequest, null));\n", "        TimeUnit.MILLISECONDS.sleep(100);\n", "\n", "        RequestTask requestTask = new RequestTask(runnable, null, null);\n", "        queue.add(new FutureTaskExt<>(requestTask, null));\n", "\n", "        assertThat(queue.size()).isEqualTo(2);\n", "        brokerFastFailure.cleanExpiredRequestInQueue(queue, 100);\n", "        assertThat(queue.size()).isEqualTo(1);\n", "        assertThat(((FutureTaskExt) queue.peek()).getRunnable()).isEqualTo(requestTask);\n", "    }\n", "\n", "}"], "method_lines_dic": {"BrokerFastFailure::::castRunnable(java.lang.Runnable)": [41, 52], "BrokerFastFailure::::start()": [54, 63], "BrokerFastFailure::::cleanExpiredRequest()": [65, 94], "BrokerFastFailure::::cleanExpiredRequestInQueue(java.util.concurrent.BlockingQueue<java.lang.Runnable>,long)": [96, 124], "BrokerFastFailure::::shutdown()": [126, 128]}, "test_method_lines_dic": {"BrokerFastFailureTest::::testCleanExpiredRequestInQueue()": [28, 63]}, "reverse_method_lines_dic": {"41": "BrokerFastFailure::::castRunnable(java.lang.Runnable)", "42": "BrokerFastFailure::::castRunnable(java.lang.Runnable)", "43": "BrokerFastFailure::::castRunnable(java.lang.Runnable)", "44": "BrokerFastFailure::::castRunnable(java.lang.Runnable)", "45": "BrokerFastFailure::::castRunnable(java.lang.Runnable)", "46": "BrokerFastFailure::::castRunnable(java.lang.Runnable)", "47": "BrokerFastFailure::::castRunnable(java.lang.Runnable)", "48": "BrokerFastFailure::::castRunnable(java.lang.Runnable)", "49": "BrokerFastFailure::::castRunnable(java.lang.Runnable)", "50": "BrokerFastFailure::::castRunnable(java.lang.Runnable)", "51": "BrokerFastFailure::::castRunnable(java.lang.Runnable)", "52": "BrokerFastFailure::::castRunnable(java.lang.Runnable)", "54": "BrokerFastFailure::::start()", "55": "BrokerFastFailure::::start()", "56": "BrokerFastFailure::::start()", "57": "BrokerFastFailure::::start()", "58": "BrokerFastFailure::::start()", "59": "BrokerFastFailure::::start()", "60": "BrokerFastFailure::::start()", "61": "BrokerFastFailure::::start()", "62": "BrokerFastFailure::::start()", "63": "BrokerFastFailure::::start()", "65": "BrokerFastFailure::::cleanExpiredRequest()", "66": "BrokerFastFailure::::cleanExpiredRequest()", "67": "BrokerFastFailure::::cleanExpiredRequest()", "68": "BrokerFastFailure::::cleanExpiredRequest()", "69": "BrokerFastFailure::::cleanExpiredRequest()", "70": "BrokerFastFailure::::cleanExpiredRequest()", "71": "BrokerFastFailure::::cleanExpiredRequest()", "72": "BrokerFastFailure::::cleanExpiredRequest()", "73": "BrokerFastFailure::::cleanExpiredRequest()", "74": "BrokerFastFailure::::cleanExpiredRequest()", "75": "BrokerFastFailure::::cleanExpiredRequest()", "76": "BrokerFastFailure::::cleanExpiredRequest()", "77": "BrokerFastFailure::::cleanExpiredRequest()", "78": "BrokerFastFailure::::cleanExpiredRequest()", "79": "BrokerFastFailure::::cleanExpiredRequest()", "80": "BrokerFastFailure::::cleanExpiredRequest()", "81": "BrokerFastFailure::::cleanExpiredRequest()", "82": "BrokerFastFailure::::cleanExpiredRequest()", "83": "BrokerFastFailure::::cleanExpiredRequest()", "84": "BrokerFastFailure::::cleanExpiredRequest()", "85": "BrokerFastFailure::::cleanExpiredRequest()", "86": "BrokerFastFailure::::cleanExpiredRequest()", "87": "BrokerFastFailure::::cleanExpiredRequest()", "88": "BrokerFastFailure::::cleanExpiredRequest()", "89": "BrokerFastFailure::::cleanExpiredRequest()", "90": "BrokerFastFailure::::cleanExpiredRequest()", "91": "BrokerFastFailure::::cleanExpiredRequest()", "92": "BrokerFastFailure::::cleanExpiredRequest()", "93": "BrokerFastFailure::::cleanExpiredRequest()", "94": "BrokerFastFailure::::cleanExpiredRequest()", "96": "BrokerFastFailure::::cleanExpiredRequestInQueue(java.util.concurrent.BlockingQueue<java.lang.Runnable>,long)", "97": "BrokerFastFailure::::cleanExpiredRequestInQueue(java.util.concurrent.BlockingQueue<java.lang.Runnable>,long)", "98": "BrokerFastFailure::::cleanExpiredRequestInQueue(java.util.concurrent.BlockingQueue<java.lang.Runnable>,long)", "99": "BrokerFastFailure::::cleanExpiredRequestInQueue(java.util.concurrent.BlockingQueue<java.lang.Runnable>,long)", "100": "BrokerFastFailure::::cleanExpiredRequestInQueue(java.util.concurrent.BlockingQueue<java.lang.Runnable>,long)", "101": "BrokerFastFailure::::cleanExpiredRequestInQueue(java.util.concurrent.BlockingQueue<java.lang.Runnable>,long)", "102": "BrokerFastFailure::::cleanExpiredRequestInQueue(java.util.concurrent.BlockingQueue<java.lang.Runnable>,long)", "103": "BrokerFastFailure::::cleanExpiredRequestInQueue(java.util.concurrent.BlockingQueue<java.lang.Runnable>,long)", "104": "BrokerFastFailure::::cleanExpiredRequestInQueue(java.util.concurrent.BlockingQueue<java.lang.Runnable>,long)", "105": "BrokerFastFailure::::cleanExpiredRequestInQueue(java.util.concurrent.BlockingQueue<java.lang.Runnable>,long)", "106": "BrokerFastFailure::::cleanExpiredRequestInQueue(java.util.concurrent.BlockingQueue<java.lang.Runnable>,long)", "107": "BrokerFastFailure::::cleanExpiredRequestInQueue(java.util.concurrent.BlockingQueue<java.lang.Runnable>,long)", "108": "BrokerFastFailure::::cleanExpiredRequestInQueue(java.util.concurrent.BlockingQueue<java.lang.Runnable>,long)", "109": "BrokerFastFailure::::cleanExpiredRequestInQueue(java.util.concurrent.BlockingQueue<java.lang.Runnable>,long)", "110": "BrokerFastFailure::::cleanExpiredRequestInQueue(java.util.concurrent.BlockingQueue<java.lang.Runnable>,long)", "111": "BrokerFastFailure::::cleanExpiredRequestInQueue(java.util.concurrent.BlockingQueue<java.lang.Runnable>,long)", "112": "BrokerFastFailure::::cleanExpiredRequestInQueue(java.util.concurrent.BlockingQueue<java.lang.Runnable>,long)", "113": "BrokerFastFailure::::cleanExpiredRequestInQueue(java.util.concurrent.BlockingQueue<java.lang.Runnable>,long)", "114": "BrokerFastFailure::::cleanExpiredRequestInQueue(java.util.concurrent.BlockingQueue<java.lang.Runnable>,long)", "115": "BrokerFastFailure::::cleanExpiredRequestInQueue(java.util.concurrent.BlockingQueue<java.lang.Runnable>,long)", "116": "BrokerFastFailure::::cleanExpiredRequestInQueue(java.util.concurrent.BlockingQueue<java.lang.Runnable>,long)", "117": "BrokerFastFailure::::cleanExpiredRequestInQueue(java.util.concurrent.BlockingQueue<java.lang.Runnable>,long)", "118": "BrokerFastFailure::::cleanExpiredRequestInQueue(java.util.concurrent.BlockingQueue<java.lang.Runnable>,long)", "119": "BrokerFastFailure::::cleanExpiredRequestInQueue(java.util.concurrent.BlockingQueue<java.lang.Runnable>,long)", "120": "BrokerFastFailure::::cleanExpiredRequestInQueue(java.util.concurrent.BlockingQueue<java.lang.Runnable>,long)", "121": "BrokerFastFailure::::cleanExpiredRequestInQueue(java.util.concurrent.BlockingQueue<java.lang.Runnable>,long)", "122": "BrokerFastFailure::::cleanExpiredRequestInQueue(java.util.concurrent.BlockingQueue<java.lang.Runnable>,long)", "123": "BrokerFastFailure::::cleanExpiredRequestInQueue(java.util.concurrent.BlockingQueue<java.lang.Runnable>,long)", "124": "BrokerFastFailure::::cleanExpiredRequestInQueue(java.util.concurrent.BlockingQueue<java.lang.Runnable>,long)", "126": "BrokerFastFailure::::shutdown()", "127": "BrokerFastFailure::::shutdown()", "128": "BrokerFastFailure::::shutdown()"}, "test_reverse_method_lines_dic": {"28": "BrokerFastFailureTest::::testCleanExpiredRequestInQueue()", "29": "BrokerFastFailureTest::::testCleanExpiredRequestInQueue()", "30": "BrokerFastFailureTest::::testCleanExpiredRequestInQueue()", "31": "BrokerFastFailureTest::::testCleanExpiredRequestInQueue()", "32": "BrokerFastFailureTest::::testCleanExpiredRequestInQueue()", "33": "BrokerFastFailureTest::::testCleanExpiredRequestInQueue()", "34": "BrokerFastFailureTest::::testCleanExpiredRequestInQueue()", "35": "BrokerFastFailureTest::::testCleanExpiredRequestInQueue()", "36": "BrokerFastFailureTest::::testCleanExpiredRequestInQueue()", "37": "BrokerFastFailureTest::::testCleanExpiredRequestInQueue()", "38": "BrokerFastFailureTest::::testCleanExpiredRequestInQueue()", "39": "BrokerFastFailureTest::::testCleanExpiredRequestInQueue()", "40": "BrokerFastFailureTest::::testCleanExpiredRequestInQueue()", "41": "BrokerFastFailureTest::::testCleanExpiredRequestInQueue()", "42": "BrokerFastFailureTest::::testCleanExpiredRequestInQueue()", "43": "BrokerFastFailureTest::::testCleanExpiredRequestInQueue()", "44": "BrokerFastFailureTest::::testCleanExpiredRequestInQueue()", "45": "BrokerFastFailureTest::::testCleanExpiredRequestInQueue()", "46": "BrokerFastFailureTest::::testCleanExpiredRequestInQueue()", "47": "BrokerFastFailureTest::::testCleanExpiredRequestInQueue()", "48": "BrokerFastFailureTest::::testCleanExpiredRequestInQueue()", "49": "BrokerFastFailureTest::::testCleanExpiredRequestInQueue()", "50": "BrokerFastFailureTest::::testCleanExpiredRequestInQueue()", "51": "BrokerFastFailureTest::::testCleanExpiredRequestInQueue()", "52": "BrokerFastFailureTest::::testCleanExpiredRequestInQueue()", "53": "BrokerFastFailureTest::::testCleanExpiredRequestInQueue()", "54": "BrokerFastFailureTest::::testCleanExpiredRequestInQueue()", "55": "BrokerFastFailureTest::::testCleanExpiredRequestInQueue()", "56": "BrokerFastFailureTest::::testCleanExpiredRequestInQueue()", "57": "BrokerFastFailureTest::::testCleanExpiredRequestInQueue()", "58": "BrokerFastFailureTest::::testCleanExpiredRequestInQueue()", "59": "BrokerFastFailureTest::::testCleanExpiredRequestInQueue()", "60": "BrokerFastFailureTest::::testCleanExpiredRequestInQueue()", "61": "BrokerFastFailureTest::::testCleanExpiredRequestInQueue()", "62": "BrokerFastFailureTest::::testCleanExpiredRequestInQueue()", "63": "BrokerFastFailureTest::::testCleanExpiredRequestInQueue()"}, "tests": [{"test_lines": [28, 63], "covered_lines": [32, 33, 37, 38, 39, 43, 44, 45, 49, 51, 99, 100, 101, 104, 105, 106, 109, 110, 111, 112, 116, 119, 121, 122, 124]}]}, "/bernard/dataset_construction/prep/repos/RocketMQC/broker/src/main/java/org/apache/rocketmq/broker/processor/PullMessageProcessor.java": {"class_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "package org.apache.rocketmq.broker.processor;\n", "\n", "import io.netty.channel.Channel;\n", "import io.netty.channel.ChannelFuture;\n", "import io.netty.channel.ChannelFutureListener;\n", "import io.netty.channel.ChannelHandlerContext;\n", "import io.netty.channel.FileRegion;\n", "import java.nio.ByteBuffer;\n", "import java.util.List;\n", "import org.apache.rocketmq.broker.BrokerController;\n", "import org.apache.rocketmq.broker.client.ConsumerGroupInfo;\n", "import org.apache.rocketmq.broker.filter.ConsumerFilterData;\n", "import org.apache.rocketmq.broker.filter.ConsumerFilterManager;\n", "import org.apache.rocketmq.broker.filter.ExpressionForRetryMessageFilter;\n", "import org.apache.rocketmq.broker.filter.ExpressionMessageFilter;\n", "import org.apache.rocketmq.broker.longpolling.PullRequest;\n", "import org.apache.rocketmq.broker.mqtrace.ConsumeMessageContext;\n", "import org.apache.rocketmq.broker.mqtrace.ConsumeMessageHook;\n", "import org.apache.rocketmq.broker.pagecache.ManyMessageTransfer;\n", "import org.apache.rocketmq.common.MixAll;\n", "import org.apache.rocketmq.common.TopicConfig;\n", "import org.apache.rocketmq.common.TopicFilterType;\n", "import org.apache.rocketmq.common.constant.LoggerName;\n", "import org.apache.rocketmq.common.constant.PermName;\n", "import org.apache.rocketmq.common.filter.ExpressionType;\n", "import org.apache.rocketmq.common.filter.FilterAPI;\n", "import org.apache.rocketmq.common.help.FAQUrl;\n", "import org.apache.rocketmq.common.message.MessageDecoder;\n", "import org.apache.rocketmq.common.message.MessageQueue;\n", "import org.apache.rocketmq.common.protocol.ResponseCode;\n", "import org.apache.rocketmq.common.protocol.header.PullMessageRequestHeader;\n", "import org.apache.rocketmq.common.protocol.header.PullMessageResponseHeader;\n", "import org.apache.rocketmq.common.protocol.heartbeat.MessageModel;\n", "import org.apache.rocketmq.common.protocol.heartbeat.SubscriptionData;\n", "import org.apache.rocketmq.common.protocol.topic.OffsetMovedEvent;\n", "import org.apache.rocketmq.common.subscription.SubscriptionGroupConfig;\n", "import org.apache.rocketmq.common.sysflag.MessageSysFlag;\n", "import org.apache.rocketmq.common.sysflag.PullSysFlag;\n", "import org.apache.rocketmq.common.topic.TopicValidator;\n", "import org.apache.rocketmq.logging.InternalLogger;\n", "import org.apache.rocketmq.logging.InternalLoggerFactory;\n", "import org.apache.rocketmq.remoting.common.RemotingHelper;\n", "import org.apache.rocketmq.remoting.common.RemotingUtil;\n", "import org.apache.rocketmq.remoting.exception.RemotingCommandException;\n", "import org.apache.rocketmq.remoting.netty.AsyncNettyRequestProcessor;\n", "import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;\n", "import org.apache.rocketmq.remoting.netty.RequestTask;\n", "import org.apache.rocketmq.remoting.protocol.RemotingCommand;\n", "import org.apache.rocketmq.store.GetMessageResult;\n", "import org.apache.rocketmq.store.MessageExtBrokerInner;\n", "import org.apache.rocketmq.store.MessageFilter;\n", "import org.apache.rocketmq.store.PutMessageResult;\n", "import org.apache.rocketmq.store.config.BrokerRole;\n", "import org.apache.rocketmq.store.stats.BrokerStatsManager;\n", "\n", "/**\n", " * PullMessageProcessor\u5176\u5b9e\u662f\u7ee7\u627f\u4e86NettyRequestProcessor\u63a5\u53e3\u65e2\u7136\u7ee7\u627f\u4e86\u8fd9\u4e2a\u63a5\u53e3\uff0c\u6d88\u606f\u62c9\u53d6\u5904\u7406\u5668\n", " * PullMessageProcessor\u4e3b\u8981\u7684\u5de5\u4f5c\u662f\u6839\u636e\u5ba2\u6237\u7aef\u63d0\u4f9b\u7684offset\uff0c\u4eceConsumeQueue\u4e2d\u83b7\u53d6\u5230\u8be5topic-queueId\u5728CommitLog\u4e2d\u7684\u8d77\u59cb\u4f4d\u7f6e\uff0c\n", " * \u6bcf\u6b21\u8bfb\u53d6\u6d88\u606f\u90fd\u4f1a\u4eceConsumeQueue\u4e2d\u5c3d\u53ef\u80fd\u591a\u7684\u8bfb\u53d6\u6d88\u606f\uff0c\u5e76\u8ba1\u7b97\u51fa\u5ba2\u6237\u7aef\u4e0b\u6b21\u7684offset,\u628a\u7ed3\u679c\u8fd4\u56de\n", " */\n", "public class PullMessageProcessor extends AsyncNettyRequestProcessor implements NettyRequestProcessor {\n", "    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);\n", "    private final BrokerController brokerController;\n", "    private List<ConsumeMessageHook> consumeMessageHookList;\n", "\n", "    public PullMessageProcessor(final BrokerController brokerController) {\n", "        this.brokerController = brokerController;\n", "    }\n", "\n", "    @Override\n", "    public RemotingCommand processRequest(final ChannelHandlerContext ctx,\n", "        RemotingCommand request) throws RemotingCommandException {\n", "        return this.processRequest(ctx.channel(), request, true);\n", "    }\n", "\n", "    @Override\n", "    public boolean rejectRequest() {\n", "        return false;\n", "    }\n", "\n", "    /**\n", "     * \u6d88\u8d39\u8005\u4f1a\u4e0d\u505c\u7684\u4ecePullRequest\u7684\u961f\u5217\u91cc\u53d6request\u7136\u540e\u5411broker\u8bf7\u6c42\u6d88\u606f\uff0c\u5f97\u5230broker\u7684\u54cd\u5e94\u540e\u4f1a\u505a\u76f8\u5e94\u5904\u7406\u5e76\u628aPullRequest\u653e\u56de\u961f\u5217\u4ee5\u4fbf\u4e0b\u4e00\u6b21\u8bf7\u6c42\n", "     * broker\u5728\u67e5\u4e0d\u5230\u6d88\u606f\u7684\u60c5\u51b5\u4e0b\u4f1ahold\u4f4f\u8bf7\u6c42\uff0c\u5728ReputMessageService\u4e0d\u505c\u6784\u5efaConsumeQueue\u7684\u65f6\u5019\uff0c\u4f1a\u62ff\u51fahold\u4f4f\u7684\u8bf7\u6c42\u8fdb\u884c\u4e8c\u6b21\u5904\u7406\n", "     *\n", "     * @param channel\n", "     * @param request\n", "     * @param brokerAllowSuspend\n", "     * @return\n", "     * @throws RemotingCommandException\n", "     */\n", "    private RemotingCommand processRequest(final Channel channel, RemotingCommand request, boolean brokerAllowSuspend)\n", "        throws RemotingCommandException {\n", "        RemotingCommand response = RemotingCommand.createResponseCommand(PullMessageResponseHeader.class);\n", "        final PullMessageResponseHeader responseHeader = (PullMessageResponseHeader) response.readCustomHeader();\n", "        final PullMessageRequestHeader requestHeader =\n", "            (PullMessageRequestHeader) request.decodeCommandCustomHeader(PullMessageRequestHeader.class);\n", "\n", "        response.setOpaque(request.getOpaque());\n", "\n", "        log.debug(\"receive PullMessage request command, {}\", request);\n", "\n", "        //broker \u662f\u5426\u53ef\u8bfb\n", "        if (!PermName.isReadable(this.brokerController.getBrokerConfig().getBrokerPermission())) {\n", "            response.setCode(ResponseCode.NO_PERMISSION);\n", "            response.setRemark(String.format(\"the broker[%s] pulling message is forbidden\", this.brokerController.getBrokerConfig().getBrokerIP1()));\n", "            return response;\n", "        }\n", "\n", "        SubscriptionGroupConfig subscriptionGroupConfig =\n", "            this.brokerController.getSubscriptionGroupManager().findSubscriptionGroupConfig(requestHeader.getConsumerGroup());\n", "        if (null == subscriptionGroupConfig) {\n", "            response.setCode(ResponseCode.SUBSCRIPTION_GROUP_NOT_EXIST);\n", "            response.setRemark(String.format(\"subscription group [%s] does not exist, %s\", requestHeader.getConsumerGroup(), FAQUrl.suggestTodo(FAQUrl.SUBSCRIPTION_GROUP_NOT_EXIST)));\n", "            return response;\n", "        }\n", "\n", "        if (!subscriptionGroupConfig.isConsumeEnable()) {\n", "            response.setCode(ResponseCode.NO_PERMISSION);\n", "            response.setRemark(\"subscription group no permission, \" + requestHeader.getConsumerGroup());\n", "            return response;\n", "        }\n", "\n", "        final boolean hasSuspendFlag = PullSysFlag.hasSuspendFlag(requestHeader.getSysFlag());\n", "        final boolean hasCommitOffsetFlag = PullSysFlag.hasCommitOffsetFlag(requestHeader.getSysFlag());\n", "        final boolean hasSubscriptionFlag = PullSysFlag.hasSubscriptionFlag(requestHeader.getSysFlag());\n", "\n", "        final long suspendTimeoutMillisLong = hasSuspendFlag ? requestHeader.getSuspendTimeoutMillis() : 0;\n", "\n", "        //topic\u4e0d\u5b58\u5728\n", "        TopicConfig topicConfig = this.brokerController.getTopicConfigManager().selectTopicConfig(requestHeader.getTopic());\n", "        if (null == topicConfig) {\n", "            log.error(\"the topic {} not exist, consumer: {}\", requestHeader.getTopic(), RemotingHelper.parseChannelRemoteAddr(channel));\n", "            response.setCode(ResponseCode.TOPIC_NOT_EXIST);\n", "            response.setRemark(String.format(\"topic[%s] not exist, apply first please! %s\", requestHeader.getTopic(), FAQUrl.suggestTodo(FAQUrl.APPLY_TOPIC_URL)));\n", "            return response;\n", "        }\n", "\n", "        if (!PermName.isReadable(topicConfig.getPerm())) {\n", "            response.setCode(ResponseCode.NO_PERMISSION);\n", "            response.setRemark(\"the topic[\" + requestHeader.getTopic() + \"] pulling message is forbidden\");\n", "            return response;\n", "        }\n", "\n", "        //\u662f\u5426\u6709\u53ef\u8bfb\u7684\u961f\u5217\n", "        if (requestHeader.getQueueId() < 0 || requestHeader.getQueueId() >= topicConfig.getReadQueueNums()) {\n", "            String errorInfo = String.format(\"queueId[%d] is illegal, topic:[%s] topicConfig.readQueueNums:[%d] consumer:[%s]\",\n", "                requestHeader.getQueueId(), requestHeader.getTopic(), topicConfig.getReadQueueNums(), channel.remoteAddress());\n", "            log.warn(errorInfo);\n", "            response.setCode(ResponseCode.SYSTEM_ERROR);\n", "            response.setRemark(errorInfo);\n", "            return response;\n", "        }\n", "\n", "        SubscriptionData subscriptionData = null;\n", "        ConsumerFilterData consumerFilterData = null;\n", "        if (hasSubscriptionFlag) {\n", "            try {\n", "                subscriptionData = FilterAPI.build(\n", "                    requestHeader.getTopic(), requestHeader.getSubscription(), requestHeader.getExpressionType()\n", "                );\n", "                if (!ExpressionType.isTagType(subscriptionData.getExpressionType())) {\n", "                    consumerFilterData = ConsumerFilterManager.build(\n", "                        requestHeader.getTopic(), requestHeader.getConsumerGroup(), requestHeader.getSubscription(),\n", "                        requestHeader.getExpressionType(), requestHeader.getSubVersion()\n", "                    );\n", "                    assert consumerFilterData != null;\n", "                }\n", "            } catch (Exception e) {\n", "                log.warn(\"Parse the consumer's subscription[{}] failed, group: {}\", requestHeader.getSubscription(),\n", "                    requestHeader.getConsumerGroup());\n", "                response.setCode(ResponseCode.SUBSCRIPTION_PARSE_FAILED);\n", "                response.setRemark(\"parse the consumer's subscription failed\");\n", "                return response;\n", "            }\n", "        } else {\n", "            //\u6709\u65e0consumerGroup\n", "            ConsumerGroupInfo consumerGroupInfo =\n", "                this.brokerController.getConsumerManager().getConsumerGroupInfo(requestHeader.getConsumerGroup());\n", "            if (null == consumerGroupInfo) {\n", "                log.warn(\"the consumer's group info not exist, group: {}\", requestHeader.getConsumerGroup());\n", "                response.setCode(ResponseCode.SUBSCRIPTION_NOT_EXIST);\n", "                response.setRemark(\"the consumer's group info not exist\" + FAQUrl.suggestTodo(FAQUrl.SAME_GROUP_DIFFERENT_TOPIC));\n", "                return response;\n", "            }\n", "\n", "            if (!subscriptionGroupConfig.isConsumeBroadcastEnable()\n", "                && consumerGroupInfo.getMessageModel() == MessageModel.BROADCASTING) {\n", "                response.setCode(ResponseCode.NO_PERMISSION);\n", "                response.setRemark(\"the consumer group[\" + requestHeader.getConsumerGroup() + \"] can not consume by broadcast way\");\n", "                return response;\n", "            }\n", "\n", "            subscriptionData = consumerGroupInfo.findSubscriptionData(requestHeader.getTopic());\n", "            if (null == subscriptionData) {\n", "                log.warn(\"the consumer's subscription not exist, group: {}, topic:{}\", requestHeader.getConsumerGroup(), requestHeader.getTopic());\n", "                response.setCode(ResponseCode.SUBSCRIPTION_NOT_EXIST);\n", "                response.setRemark(\"the consumer's subscription not exist\" + FAQUrl.suggestTodo(FAQUrl.SAME_GROUP_DIFFERENT_TOPIC));\n", "                return response;\n", "            }\n", "\n", "            if (subscriptionData.getSubVersion() < requestHeader.getSubVersion()) {\n", "                log.warn(\"The broker's subscription is not latest, group: {} {}\", requestHeader.getConsumerGroup(),\n", "                    subscriptionData.getSubString());\n", "                response.setCode(ResponseCode.SUBSCRIPTION_NOT_LATEST);\n", "                response.setRemark(\"the consumer's subscription not latest\");\n", "                return response;\n", "            }\n", "            if (!ExpressionType.isTagType(subscriptionData.getExpressionType())) {\n", "                consumerFilterData = this.brokerController.getConsumerFilterManager().get(requestHeader.getTopic(),\n", "                    requestHeader.getConsumerGroup());\n", "                if (consumerFilterData == null) {\n", "                    response.setCode(ResponseCode.FILTER_DATA_NOT_EXIST);\n", "                    response.setRemark(\"The broker's consumer filter data is not exist!Your expression may be wrong!\");\n", "                    return response;\n", "                }\n", "                if (consumerFilterData.getClientVersion() < requestHeader.getSubVersion()) {\n", "                    log.warn(\"The broker's consumer filter data is not latest, group: {}, topic: {}, serverV: {}, clientV: {}\",\n", "                        requestHeader.getConsumerGroup(), requestHeader.getTopic(), consumerFilterData.getClientVersion(), requestHeader.getSubVersion());\n", "                    response.setCode(ResponseCode.FILTER_DATA_NOT_LATEST);\n", "                    response.setRemark(\"the consumer's consumer filter data not latest\");\n", "                    return response;\n", "                }\n", "            }\n", "        }\n", "\n", "        if (!ExpressionType.isTagType(subscriptionData.getExpressionType())\n", "            && !this.brokerController.getBrokerConfig().isEnablePropertyFilter()) {\n", "            response.setCode(ResponseCode.SYSTEM_ERROR);\n", "            response.setRemark(\"The broker does not support consumer to filter message by \" + subscriptionData.getExpressionType());\n", "            return response;\n", "        }\n", "\n", "        MessageFilter messageFilter;\n", "        if (this.brokerController.getBrokerConfig().isFilterSupportRetry()) {\n", "            messageFilter = new ExpressionForRetryMessageFilter(subscriptionData, consumerFilterData,\n", "                this.brokerController.getConsumerFilterManager());\n", "        } else {\n", "            messageFilter = new ExpressionMessageFilter(subscriptionData, consumerFilterData,\n", "                this.brokerController.getConsumerFilterManager());\n", "        }\n", "\n", "        //\u4ecestore\u4e2d\u83b7\u53d6\u5bf9\u5e94\u7684group\uff0ctopic\uff0cqueueId,\u8d77\u59cb\u504f\u79fb\u91cf\u7684\u6d88\u606f\u5185\u5bb9\uff0c\u4ee5\u53ca\u6240\u7ed9\u4f4d\u7f6e\u5230\u8bf7\u6c42\u7684\u6700\u5927\u53ef\u8bfb\u4f4d\u7f6e\n", "        final GetMessageResult getMessageResult =\n", "            this.brokerController.getMessageStore().getMessage(requestHeader.getConsumerGroup(), requestHeader.getTopic(),\n", "                requestHeader.getQueueId(), requestHeader.getQueueOffset(), requestHeader.getMaxMsgNums(), messageFilter);\n", "        if (getMessageResult != null) { //\u6d88\u606f\u6b63\u5e38\n", "            response.setRemark(getMessageResult.getStatus().name());\n", "            responseHeader.setNextBeginOffset(getMessageResult.getNextBeginOffset());\n", "            responseHeader.setMinOffset(getMessageResult.getMinOffset());\n", "            responseHeader.setMaxOffset(getMessageResult.getMaxOffset());\n", "\n", "            if (getMessageResult.isSuggestPullingFromSlave()) {\n", "                responseHeader.setSuggestWhichBrokerId(subscriptionGroupConfig.getWhichBrokerWhenConsumeSlowly());\n", "            } else {\n", "                responseHeader.setSuggestWhichBrokerId(MixAll.MASTER_ID);\n", "            }\n", "\n", "            switch (this.brokerController.getMessageStoreConfig().getBrokerRole()) {\n", "                case ASYNC_MASTER:\n", "                case SYNC_MASTER:\n", "                    break;\n", "                case SLAVE:\n", "                    //slave\u8282\u70b9\u662f\u5426\u53ef\u8bfb\n", "                    if (!this.brokerController.getBrokerConfig().isSlaveReadEnable()) {\n", "                        response.setCode(ResponseCode.PULL_RETRY_IMMEDIATELY);\n", "                        responseHeader.setSuggestWhichBrokerId(MixAll.MASTER_ID);\n", "                    }\n", "                    break;\n", "            }\n", "\n", "            if (this.brokerController.getBrokerConfig().isSlaveReadEnable()) {\n", "                // consume too slow ,redirect to another machine\n", "                if (getMessageResult.isSuggestPullingFromSlave()) {\n", "                    responseHeader.setSuggestWhichBrokerId(subscriptionGroupConfig.getWhichBrokerWhenConsumeSlowly());\n", "                }\n", "                // consume ok\n", "                else {\n", "                    responseHeader.setSuggestWhichBrokerId(subscriptionGroupConfig.getBrokerId());\n", "                }\n", "            } else {\n", "                responseHeader.setSuggestWhichBrokerId(MixAll.MASTER_ID);\n", "            }\n", "            //\u6210\u529f(SUCCESS)\u3001\u672a\u627e\u5230\u7b26\u5408\u6761\u4ef6\u7684\u6d88\u606f(PULL_NOT_FOUND)\u3001\u76f4\u63a5\u91cd\u8bd5(PULL_RETRY_IMMEDIATELY)\u3001\u6d88\u606f\u88ab\u79fb\u52a8(PULL_OFFSET_MOVED)\n", "            switch (getMessageResult.getStatus()) {\n", "                case FOUND:\n", "                    response.setCode(ResponseCode.SUCCESS);\n", "                    break;\n", "                case MESSAGE_WAS_REMOVING:\n", "                    response.setCode(ResponseCode.PULL_RETRY_IMMEDIATELY);\n", "                    break;\n", "                case NO_MATCHED_LOGIC_QUEUE:\n", "                case NO_MESSAGE_IN_QUEUE:\n", "                    if (0 != requestHeader.getQueueOffset()) {\n", "                        response.setCode(ResponseCode.PULL_OFFSET_MOVED);\n", "\n", "                        // XXX: warn and notify me\n", "                        log.info(\"the broker store no queue data, fix the request offset {} to {}, Topic: {} QueueId: {} Consumer Group: {}\",\n", "                            requestHeader.getQueueOffset(),\n", "                            getMessageResult.getNextBeginOffset(),\n", "                            requestHeader.getTopic(),\n", "                            requestHeader.getQueueId(),\n", "                            requestHeader.getConsumerGroup()\n", "                        );\n", "                    } else {\n", "                        response.setCode(ResponseCode.PULL_NOT_FOUND);\n", "                    }\n", "                    break;\n", "                case NO_MATCHED_MESSAGE:\n", "                    response.setCode(ResponseCode.PULL_RETRY_IMMEDIATELY);\n", "                    break;\n", "                case OFFSET_FOUND_NULL:\n", "                    response.setCode(ResponseCode.PULL_NOT_FOUND);\n", "                    break;\n", "                case OFFSET_OVERFLOW_BADLY:\n", "                    response.setCode(ResponseCode.PULL_OFFSET_MOVED);\n", "                    // XXX: warn and notify me\n", "                    log.info(\"the request offset: {} over flow badly, broker max offset: {}, consumer: {}\",\n", "                        requestHeader.getQueueOffset(), getMessageResult.getMaxOffset(), channel.remoteAddress());\n", "                    break;\n", "                case OFFSET_OVERFLOW_ONE:\n", "                    response.setCode(ResponseCode.PULL_NOT_FOUND);\n", "                    break;\n", "                case OFFSET_TOO_SMALL:\n", "                    response.setCode(ResponseCode.PULL_OFFSET_MOVED);\n", "                    log.info(\"the request offset too small. group={}, topic={}, requestOffset={}, brokerMinOffset={}, clientIp={}\",\n", "                        requestHeader.getConsumerGroup(), requestHeader.getTopic(), requestHeader.getQueueOffset(),\n", "                        getMessageResult.getMinOffset(), channel.remoteAddress());\n", "                    break;\n", "                default:\n", "                    assert false;\n", "                    break;\n", "            }\n", "\n", "            //\u524d\u7f6e\u5904\u7406\u6dfb\u52a0\n", "            if (this.hasConsumeMessageHook()) {\n", "                ConsumeMessageContext context = new ConsumeMessageContext();\n", "                context.setConsumerGroup(requestHeader.getConsumerGroup());\n", "                context.setTopic(requestHeader.getTopic());\n", "                context.setQueueId(requestHeader.getQueueId());\n", "\n", "                String owner = request.getExtFields().get(BrokerStatsManager.COMMERCIAL_OWNER);\n", "\n", "                switch (response.getCode()) {\n", "                    case ResponseCode.SUCCESS:\n", "                        int commercialBaseCount = brokerController.getBrokerConfig().getCommercialBaseCount();\n", "                        int incValue = getMessageResult.getMsgCount4Commercial() * commercialBaseCount;\n", "\n", "                        context.setCommercialRcvStats(BrokerStatsManager.StatsType.RCV_SUCCESS);\n", "                        context.setCommercialRcvTimes(incValue);\n", "                        context.setCommercialRcvSize(getMessageResult.getBufferTotalSize());\n", "                        context.setCommercialOwner(owner);\n", "\n", "                        break;\n", "                    case ResponseCode.PULL_NOT_FOUND:\n", "                        if (!brokerAllowSuspend) {\n", "\n", "                            context.setCommercialRcvStats(BrokerStatsManager.StatsType.RCV_EPOLLS);\n", "                            context.setCommercialRcvTimes(1);\n", "                            context.setCommercialOwner(owner);\n", "\n", "                        }\n", "                        break;\n", "                    case ResponseCode.PULL_RETRY_IMMEDIATELY:\n", "                    case ResponseCode.PULL_OFFSET_MOVED:\n", "                        context.setCommercialRcvStats(BrokerStatsManager.StatsType.RCV_EPOLLS);\n", "                        context.setCommercialRcvTimes(1);\n", "                        context.setCommercialOwner(owner);\n", "                        break;\n", "                    default:\n", "                        assert false;\n", "                        break;\n", "                }\n", "\n", "                this.executeConsumeMessageHookBefore(context);\n", "            }\n", "\n", "            switch (response.getCode()) {\n", "                case ResponseCode.SUCCESS:\n", "\n", "                    this.brokerController.getBrokerStatsManager().incGroupGetNums(requestHeader.getConsumerGroup(), requestHeader.getTopic(),\n", "                        getMessageResult.getMessageCount());\n", "\n", "                    this.brokerController.getBrokerStatsManager().incGroupGetSize(requestHeader.getConsumerGroup(), requestHeader.getTopic(),\n", "                        getMessageResult.getBufferTotalSize());\n", "\n", "                    this.brokerController.getBrokerStatsManager().incBrokerGetNums(getMessageResult.getMessageCount());\n", "                    if (this.brokerController.getBrokerConfig().isTransferMsgByHeap()) {\n", "                        final long beginTimeMills = this.brokerController.getMessageStore().now();\n", "                        final byte[] r = this.readGetMessageResult(getMessageResult, requestHeader.getConsumerGroup(), requestHeader.getTopic(), requestHeader.getQueueId());\n", "                        this.brokerController.getBrokerStatsManager().incGroupGetLatency(requestHeader.getConsumerGroup(),\n", "                            requestHeader.getTopic(), requestHeader.getQueueId(),\n", "                            (int) (this.brokerController.getMessageStore().now() - beginTimeMills));\n", "                        response.setBody(r);\n", "                    } else {\n", "                        try {\n", "                            //\u96f6\u62f7\u8d1d\u7684\u5b9e\u73b0\n", "                            FileRegion fileRegion =\n", "                                new ManyMessageTransfer(response.encodeHeader(getMessageResult.getBufferTotalSize()), getMessageResult);\n", "                            channel.writeAndFlush(fileRegion).addListener(new ChannelFutureListener() {\n", "                                @Override\n", "                                public void operationComplete(ChannelFuture future) throws Exception {\n", "                                    getMessageResult.release();\n", "                                    if (!future.isSuccess()) {\n", "                                        log.error(\"transfer many message by pagecache failed, {}\", channel.remoteAddress(), future.cause());\n", "                                    }\n", "                                }\n", "                            });\n", "                        } catch (Throwable e) {\n", "                            log.error(\"transfer many message by pagecache exception\", e);\n", "                            getMessageResult.release();\n", "                        }\n", "\n", "                        response = null;\n", "                    }\n", "                    break;\n", "                case ResponseCode.PULL_NOT_FOUND:\n", "\n", "                    if (brokerAllowSuspend && hasSuspendFlag) {\n", "                        long pollingTimeMills = suspendTimeoutMillisLong;\n", "                        // \u5982\u679cbroker\u5f00\u542f\u4e86\u957f\u8f6e\u8be2\uff0c\u5219\u5c06\u957f\u8f6e\u8be2\u65f6\u95f4\u8bbe\u7f6e\u4e3a30s(\u6d88\u8d39\u8005\u4f20\u8fc7\u6765\u7684\uff0c\u9ed8\u8ba430s)\uff0c\u5426\u5219\u8bbe\u7f6e\u4e3a1s\n", "                        if (!this.brokerController.getBrokerConfig().isLongPollingEnable()) {\n", "                            pollingTimeMills = this.brokerController.getBrokerConfig().getShortPollingTimeMills();\n", "                        }\n", "\n", "                        String topic = requestHeader.getTopic();\n", "                        long offset = requestHeader.getQueueOffset();\n", "                        int queueId = requestHeader.getQueueId();\n", "                        // \u5c06\u8fd9\u6b21\u8bf7\u6c42\u7684\u4fe1\u606f\u5305\u62ecchannel\u5168\u90e8\u5c01\u88c5\u5230PullRequest\uff0c\u5e76\u4fdd\u5b58\u5230pullRequestTable\uff0c\u5373\u628a\u5f53\u524d\u7684request hold\u4f4f\n", "                        PullRequest pullRequest = new PullRequest(request, channel, pollingTimeMills,\n", "                            this.brokerController.getMessageStore().now(), offset, subscriptionData, messageFilter);\n", "                        //\u5176\u5b9e\u5c31\u662f\u5c06ManyPullRequest\u8fdb\u884c\u4e86\u5c01\u88c5\uff0cPullRequestHoldService\u6bcf\u96945\u79d2\u8f6e\u8bad\u4e00\u6b21\uff0c\u7528\u4e8e\u652f\u6301\u8f6e\u8bad\u673a\u5236\u3002ManyPullRequest\u4ee3\u8868\u7d2f\u8ba1\u62c9\u53d6\u6d88\u606f\u4efb\u52a1\n", "                        this.brokerController.getPullRequestHoldService().suspendPullRequest(topic, queueId, pullRequest);\n", "                        response = null;\n", "                        break;\n", "                    }\n", "\n", "                case ResponseCode.PULL_RETRY_IMMEDIATELY:\n", "                    break;\n", "                case ResponseCode.PULL_OFFSET_MOVED:\n", "                    if (this.brokerController.getMessageStoreConfig().getBrokerRole() != BrokerRole.SLAVE\n", "                        || this.brokerController.getMessageStoreConfig().isOffsetCheckInSlave()) {\n", "                        MessageQueue mq = new MessageQueue();\n", "                        mq.setTopic(requestHeader.getTopic());\n", "                        mq.setQueueId(requestHeader.getQueueId());\n", "                        mq.setBrokerName(this.brokerController.getBrokerConfig().getBrokerName());\n", "\n", "                        OffsetMovedEvent event = new OffsetMovedEvent();\n", "                        event.setConsumerGroup(requestHeader.getConsumerGroup());\n", "                        event.setMessageQueue(mq);\n", "                        event.setOffsetRequest(requestHeader.getQueueOffset());\n", "                        event.setOffsetNew(getMessageResult.getNextBeginOffset());\n", "                        this.generateOffsetMovedEvent(event);\n", "                        log.warn(\n", "                            \"PULL_OFFSET_MOVED:correction offset. topic={}, groupId={}, requestOffset={}, newOffset={}, suggestBrokerId={}\",\n", "                            requestHeader.getTopic(), requestHeader.getConsumerGroup(), event.getOffsetRequest(), event.getOffsetNew(),\n", "                            responseHeader.getSuggestWhichBrokerId());\n", "                    } else {\n", "                        responseHeader.setSuggestWhichBrokerId(subscriptionGroupConfig.getBrokerId());\n", "                        response.setCode(ResponseCode.PULL_RETRY_IMMEDIATELY);\n", "                        log.warn(\"PULL_OFFSET_MOVED:none correction. topic={}, groupId={}, requestOffset={}, suggestBrokerId={}\",\n", "                            requestHeader.getTopic(), requestHeader.getConsumerGroup(), requestHeader.getQueueOffset(),\n", "                            responseHeader.getSuggestWhichBrokerId());\n", "                    }\n", "\n", "                    break;\n", "                default:\n", "                    assert false;\n", "            }\n", "        } else {\n", "            response.setCode(ResponseCode.SYSTEM_ERROR);\n", "            response.setRemark(\"store getMessage return null\");\n", "        }\n", "\n", "        boolean storeOffsetEnable = brokerAllowSuspend;\n", "        storeOffsetEnable = storeOffsetEnable && hasCommitOffsetFlag;\n", "        //\u53ea\u4f1a\u5b58\u50a8\u504f\u79fb\u5230master\u8282\u70b9\n", "        storeOffsetEnable = storeOffsetEnable\n", "            && this.brokerController.getMessageStoreConfig().getBrokerRole() != BrokerRole.SLAVE;\n", "        if (storeOffsetEnable) {\n", "            this.brokerController.getConsumerOffsetManager().commitOffset(RemotingHelper.parseChannelRemoteAddr(channel),\n", "                requestHeader.getConsumerGroup(), requestHeader.getTopic(), requestHeader.getQueueId(), requestHeader.getCommitOffset());\n", "        }\n", "        return response;\n", "    }\n", "\n", "    public boolean hasConsumeMessageHook() {\n", "        return consumeMessageHookList != null && !this.consumeMessageHookList.isEmpty();\n", "    }\n", "\n", "    public void executeConsumeMessageHookBefore(final ConsumeMessageContext context) {\n", "        if (hasConsumeMessageHook()) {\n", "            for (ConsumeMessageHook hook : this.consumeMessageHookList) {\n", "                try {\n", "                    hook.consumeMessageBefore(context);\n", "                } catch (Throwable e) {\n", "                }\n", "            }\n", "        }\n", "    }\n", "\n", "    private byte[] readGetMessageResult(final GetMessageResult getMessageResult, final String group, final String topic,\n", "        final int queueId) {\n", "        final ByteBuffer byteBuffer = ByteBuffer.allocate(getMessageResult.getBufferTotalSize());\n", "\n", "        long storeTimestamp = 0;\n", "        try {\n", "            List<ByteBuffer> messageBufferList = getMessageResult.getMessageBufferList();\n", "            for (ByteBuffer bb : messageBufferList) {\n", "\n", "                byteBuffer.put(bb);\n", "                int sysFlag = bb.getInt(MessageDecoder.SYSFLAG_POSITION);\n", "//                bornhost has the IPv4 ip if the MessageSysFlag.BORNHOST_V6_FLAG bit of sysFlag is 0\n", "//                IPv4 host = ip(4 byte) + port(4 byte); IPv6 host = ip(16 byte) + port(4 byte)\n", "                int bornhostLength = (sysFlag & MessageSysFlag.BORNHOST_V6_FLAG) == 0 ? 8 : 20;\n", "                int msgStoreTimePos = 4 // 1 TOTALSIZE\n", "                    + 4 // 2 MAGICCODE\n", "                    + 4 // 3 BODYCRC\n", "                    + 4 // 4 QUEUEID\n", "                    + 4 // 5 FLAG\n", "                    + 8 // 6 QUEUEOFFSET\n", "                    + 8 // 7 PHYSICALOFFSET\n", "                    + 4 // 8 SYSFLAG\n", "                    + 8 // 9 BORNTIMESTAMP\n", "                    + bornhostLength; // 10 BORNHOST\n", "                storeTimestamp = bb.getLong(msgStoreTimePos);\n", "            }\n", "        } finally {\n", "            getMessageResult.release();\n", "        }\n", "\n", "        this.brokerController.getBrokerStatsManager().recordDiskFallBehindTime(group, topic, queueId, this.brokerController.getMessageStore().now() - storeTimestamp);\n", "        return byteBuffer.array();\n", "    }\n", "\n", "    private void generateOffsetMovedEvent(final OffsetMovedEvent event) {\n", "        try {\n", "            MessageExtBrokerInner msgInner = new MessageExtBrokerInner();\n", "            msgInner.setTopic(TopicValidator.RMQ_SYS_OFFSET_MOVED_EVENT);\n", "            msgInner.setTags(event.getConsumerGroup());\n", "            msgInner.setDelayTimeLevel(0);\n", "            msgInner.setKeys(event.getConsumerGroup());\n", "            msgInner.setBody(event.encode());\n", "            msgInner.setFlag(0);\n", "            msgInner.setPropertiesString(MessageDecoder.messageProperties2String(msgInner.getProperties()));\n", "            msgInner.setTagsCode(MessageExtBrokerInner.tagsString2tagsCode(TopicFilterType.SINGLE_TAG, msgInner.getTags()));\n", "\n", "            msgInner.setQueueId(0);\n", "            msgInner.setSysFlag(0);\n", "            msgInner.setBornTimestamp(System.currentTimeMillis());\n", "            msgInner.setBornHost(RemotingUtil.string2SocketAddress(this.brokerController.getBrokerAddr()));\n", "            msgInner.setStoreHost(msgInner.getBornHost());\n", "\n", "            msgInner.setReconsumeTimes(0);\n", "\n", "            PutMessageResult putMessageResult = this.brokerController.getMessageStore().putMessage(msgInner);\n", "        } catch (Exception e) {\n", "            log.warn(String.format(\"generateOffsetMovedEvent Exception, %s\", event.toString()), e);\n", "        }\n", "    }\n", "\n", "    public void executeRequestWhenWakeup(final Channel channel,\n", "        final RemotingCommand request) throws RemotingCommandException {\n", "        Runnable run = new Runnable() {\n", "            @Override\n", "            public void run() {\n", "                try {\n", "                    final RemotingCommand response = PullMessageProcessor.this.processRequest(channel, request, false);\n", "\n", "                    if (response != null) {\n", "                        response.setOpaque(request.getOpaque());\n", "                        response.markResponseType();\n", "                        try {\n", "                            channel.writeAndFlush(response).addListener(new ChannelFutureListener() {\n", "                                @Override\n", "                                public void operationComplete(ChannelFuture future) throws Exception {\n", "                                    if (!future.isSuccess()) {\n", "                                        log.error(\"processRequestWrapper response to {} failed\",\n", "                                            future.channel().remoteAddress(), future.cause());\n", "                                        log.error(request.toString());\n", "                                        log.error(response.toString());\n", "                                    }\n", "                                }\n", "                            });\n", "                        } catch (Throwable e) {\n", "                            log.error(\"processRequestWrapper process request over, but response failed\", e);\n", "                            log.error(request.toString());\n", "                            log.error(response.toString());\n", "                        }\n", "                    }\n", "                } catch (RemotingCommandException e1) {\n", "                    log.error(\"excuteRequestWhenWakeup run\", e1);\n", "                }\n", "            }\n", "        };\n", "        this.brokerController.getPullMessageExecutor().submit(new RequestTask(run, channel, request));\n", "    }\n", "\n", "    public void registerConsumeMessageHook(List<ConsumeMessageHook> sendMessageHookList) {\n", "        this.consumeMessageHookList = sendMessageHookList;\n", "    }\n", "}\n"], "test_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "package org.apache.rocketmq.broker.processor;\n", "\n", "import io.netty.channel.Channel;\n", "import io.netty.channel.ChannelHandlerContext;\n", "import java.net.InetSocketAddress;\n", "import java.util.ArrayList;\n", "import java.util.HashSet;\n", "import java.util.List;\n", "import java.util.Set;\n", "import org.apache.rocketmq.broker.BrokerController;\n", "import org.apache.rocketmq.broker.client.ClientChannelInfo;\n", "import org.apache.rocketmq.broker.filter.ExpressionMessageFilter;\n", "import org.apache.rocketmq.broker.mqtrace.ConsumeMessageContext;\n", "import org.apache.rocketmq.broker.mqtrace.ConsumeMessageHook;\n", "import org.apache.rocketmq.common.BrokerConfig;\n", "import org.apache.rocketmq.common.TopicConfig;\n", "import org.apache.rocketmq.common.consumer.ConsumeFromWhere;\n", "import org.apache.rocketmq.common.protocol.RequestCode;\n", "import org.apache.rocketmq.common.protocol.ResponseCode;\n", "import org.apache.rocketmq.common.protocol.header.PullMessageRequestHeader;\n", "import org.apache.rocketmq.common.protocol.heartbeat.ConsumeType;\n", "import org.apache.rocketmq.common.protocol.heartbeat.ConsumerData;\n", "import org.apache.rocketmq.common.protocol.heartbeat.MessageModel;\n", "import org.apache.rocketmq.common.protocol.heartbeat.SubscriptionData;\n", "import org.apache.rocketmq.remoting.exception.RemotingCommandException;\n", "import org.apache.rocketmq.remoting.netty.NettyClientConfig;\n", "import org.apache.rocketmq.remoting.netty.NettyServerConfig;\n", "import org.apache.rocketmq.remoting.protocol.RemotingCommand;\n", "import org.apache.rocketmq.store.GetMessageResult;\n", "import org.apache.rocketmq.store.GetMessageStatus;\n", "import org.apache.rocketmq.store.MessageStore;\n", "import org.apache.rocketmq.store.config.MessageStoreConfig;\n", "import org.junit.Before;\n", "import org.junit.Test;\n", "import org.junit.runner.RunWith;\n", "import org.mockito.Mock;\n", "import org.mockito.Spy;\n", "import org.mockito.junit.MockitoJUnitRunner;\n", "\n", "import static org.assertj.core.api.Assertions.assertThat;\n", "import static org.mockito.ArgumentMatchers.any;\n", "import static org.mockito.ArgumentMatchers.anyInt;\n", "import static org.mockito.ArgumentMatchers.anyLong;\n", "import static org.mockito.ArgumentMatchers.anyString;\n", "import static org.mockito.Mockito.mock;\n", "import static org.mockito.Mockito.when;\n", "\n", "@RunWith(MockitoJUnitRunner.class)\n", "public class PullMessageProcessorTest {\n", "    private PullMessageProcessor pullMessageProcessor;\n", "    @Spy\n", "    private BrokerController brokerController = new BrokerController(new BrokerConfig(), new NettyServerConfig(), new NettyClientConfig(), new MessageStoreConfig());\n", "    @Mock\n", "    private ChannelHandlerContext handlerContext;\n", "    @Mock\n", "    private MessageStore messageStore;\n", "    private ClientChannelInfo clientChannelInfo;\n", "    private String group = \"FooBarGroup\";\n", "    private String topic = \"FooBar\";\n", "\n", "    @Before\n", "    public void init() {\n", "        brokerController.setMessageStore(messageStore);\n", "        pullMessageProcessor = new PullMessageProcessor(brokerController);\n", "        Channel mockChannel = mock(Channel.class);\n", "        when(mockChannel.remoteAddress()).thenReturn(new InetSocketAddress(1024));\n", "        when(handlerContext.channel()).thenReturn(mockChannel);\n", "        brokerController.getTopicConfigManager().getTopicConfigTable().put(topic, new TopicConfig());\n", "        clientChannelInfo = new ClientChannelInfo(mockChannel);\n", "        ConsumerData consumerData = createConsumerData(group, topic);\n", "        brokerController.getConsumerManager().registerConsumer(\n", "            consumerData.getGroupName(),\n", "            clientChannelInfo,\n", "            consumerData.getConsumeType(),\n", "            consumerData.getMessageModel(),\n", "            consumerData.getConsumeFromWhere(),\n", "            consumerData.getSubscriptionDataSet(),\n", "            false);\n", "    }\n", "\n", "    @Test\n", "    public void testProcessRequest_TopicNotExist() throws RemotingCommandException {\n", "        brokerController.getTopicConfigManager().getTopicConfigTable().remove(topic);\n", "        final RemotingCommand request = createPullMsgCommand(RequestCode.PULL_MESSAGE);\n", "        RemotingCommand response = pullMessageProcessor.processRequest(handlerContext, request);\n", "        assertThat(response).isNotNull();\n", "        assertThat(response.getCode()).isEqualTo(ResponseCode.TOPIC_NOT_EXIST);\n", "        assertThat(response.getRemark()).contains(\"topic[\" + topic + \"] not exist\");\n", "    }\n", "\n", "    @Test\n", "    public void testProcessRequest_SubNotExist() throws RemotingCommandException {\n", "        brokerController.getConsumerManager().unregisterConsumer(group, clientChannelInfo, false);\n", "        final RemotingCommand request = createPullMsgCommand(RequestCode.PULL_MESSAGE);\n", "        RemotingCommand response = pullMessageProcessor.processRequest(handlerContext, request);\n", "        assertThat(response).isNotNull();\n", "        assertThat(response.getCode()).isEqualTo(ResponseCode.SUBSCRIPTION_NOT_EXIST);\n", "        assertThat(response.getRemark()).contains(\"consumer's group info not exist\");\n", "    }\n", "\n", "    @Test\n", "    public void testProcessRequest_SubNotLatest() throws RemotingCommandException {\n", "        final RemotingCommand request = createPullMsgCommand(RequestCode.PULL_MESSAGE);\n", "        request.addExtField(\"subVersion\", String.valueOf(101));\n", "        RemotingCommand response = pullMessageProcessor.processRequest(handlerContext, request);\n", "        assertThat(response).isNotNull();\n", "        assertThat(response.getCode()).isEqualTo(ResponseCode.SUBSCRIPTION_NOT_LATEST);\n", "        assertThat(response.getRemark()).contains(\"subscription not latest\");\n", "    }\n", "\n", "    @Test\n", "    public void testProcessRequest_Found() throws RemotingCommandException {\n", "        GetMessageResult getMessageResult = createGetMessageResult();\n", "        when(messageStore.getMessage(anyString(), anyString(), anyInt(), anyLong(), anyInt(), any(ExpressionMessageFilter.class))).thenReturn(getMessageResult);\n", "\n", "        final RemotingCommand request = createPullMsgCommand(RequestCode.PULL_MESSAGE);\n", "        RemotingCommand response = pullMessageProcessor.processRequest(handlerContext, request);\n", "        assertThat(response).isNotNull();\n", "        assertThat(response.getCode()).isEqualTo(ResponseCode.SUCCESS);\n", "    }\n", "\n", "    @Test\n", "    public void testProcessRequest_FoundWithHook() throws RemotingCommandException {\n", "        GetMessageResult getMessageResult = createGetMessageResult();\n", "        when(messageStore.getMessage(anyString(), anyString(), anyInt(), anyLong(), anyInt(), any(ExpressionMessageFilter.class))).thenReturn(getMessageResult);\n", "        List<ConsumeMessageHook> consumeMessageHookList = new ArrayList<>();\n", "        final ConsumeMessageContext[] messageContext = new ConsumeMessageContext[1];\n", "        ConsumeMessageHook consumeMessageHook = new ConsumeMessageHook() {\n", "            @Override\n", "            public String hookName() {\n", "                return \"TestHook\";\n", "            }\n", "\n", "            @Override\n", "            public void consumeMessageBefore(ConsumeMessageContext context) {\n", "                messageContext[0] = context;\n", "            }\n", "\n", "            @Override\n", "            public void consumeMessageAfter(ConsumeMessageContext context) {\n", "            }\n", "        };\n", "        consumeMessageHookList.add(consumeMessageHook);\n", "        pullMessageProcessor.registerConsumeMessageHook(consumeMessageHookList);\n", "        final RemotingCommand request = createPullMsgCommand(RequestCode.PULL_MESSAGE);\n", "        RemotingCommand response = pullMessageProcessor.processRequest(handlerContext, request);\n", "        assertThat(response).isNotNull();\n", "        assertThat(response.getCode()).isEqualTo(ResponseCode.SUCCESS);\n", "        assertThat(messageContext[0]).isNotNull();\n", "        assertThat(messageContext[0].getConsumerGroup()).isEqualTo(group);\n", "        assertThat(messageContext[0].getTopic()).isEqualTo(topic);\n", "        assertThat(messageContext[0].getQueueId()).isEqualTo(1);\n", "    }\n", "\n", "    @Test\n", "    public void testProcessRequest_MsgWasRemoving() throws RemotingCommandException {\n", "        GetMessageResult getMessageResult = createGetMessageResult();\n", "        getMessageResult.setStatus(GetMessageStatus.MESSAGE_WAS_REMOVING);\n", "        when(messageStore.getMessage(anyString(), anyString(), anyInt(), anyLong(), anyInt(), any(ExpressionMessageFilter.class))).thenReturn(getMessageResult);\n", "\n", "        final RemotingCommand request = createPullMsgCommand(RequestCode.PULL_MESSAGE);\n", "        RemotingCommand response = pullMessageProcessor.processRequest(handlerContext, request);\n", "        assertThat(response).isNotNull();\n", "        assertThat(response.getCode()).isEqualTo(ResponseCode.PULL_RETRY_IMMEDIATELY);\n", "    }\n", "\n", "    @Test\n", "    public void testProcessRequest_NoMsgInQueue() throws RemotingCommandException {\n", "        GetMessageResult getMessageResult = createGetMessageResult();\n", "        getMessageResult.setStatus(GetMessageStatus.NO_MESSAGE_IN_QUEUE);\n", "        when(messageStore.getMessage(anyString(), anyString(), anyInt(), anyLong(), anyInt(), any(ExpressionMessageFilter.class))).thenReturn(getMessageResult);\n", "\n", "        final RemotingCommand request = createPullMsgCommand(RequestCode.PULL_MESSAGE);\n", "        RemotingCommand response = pullMessageProcessor.processRequest(handlerContext, request);\n", "        assertThat(response).isNotNull();\n", "        assertThat(response.getCode()).isEqualTo(ResponseCode.PULL_OFFSET_MOVED);\n", "    }\n", "\n", "    private RemotingCommand createPullMsgCommand(int requestCode) {\n", "        PullMessageRequestHeader requestHeader = new PullMessageRequestHeader();\n", "        requestHeader.setCommitOffset(123L);\n", "        requestHeader.setConsumerGroup(group);\n", "        requestHeader.setMaxMsgNums(100);\n", "        requestHeader.setQueueId(1);\n", "        requestHeader.setQueueOffset(456L);\n", "        requestHeader.setSubscription(\"*\");\n", "        requestHeader.setTopic(topic);\n", "        requestHeader.setSysFlag(0);\n", "        requestHeader.setSubVersion(100L);\n", "        RemotingCommand request = RemotingCommand.createRequestCommand(requestCode, requestHeader);\n", "        request.makeCustomHeaderToNet();\n", "        return request;\n", "    }\n", "\n", "    static ConsumerData createConsumerData(String group, String topic) {\n", "        ConsumerData consumerData = new ConsumerData();\n", "        consumerData.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);\n", "        consumerData.setConsumeType(ConsumeType.CONSUME_PASSIVELY);\n", "        consumerData.setGroupName(group);\n", "        consumerData.setMessageModel(MessageModel.CLUSTERING);\n", "        Set<SubscriptionData> subscriptionDataSet = new HashSet<>();\n", "        SubscriptionData subscriptionData = new SubscriptionData();\n", "        subscriptionData.setTopic(topic);\n", "        subscriptionData.setSubString(\"*\");\n", "        subscriptionData.setSubVersion(100L);\n", "        subscriptionDataSet.add(subscriptionData);\n", "        consumerData.setSubscriptionDataSet(subscriptionDataSet);\n", "        return consumerData;\n", "    }\n", "\n", "    private GetMessageResult createGetMessageResult() {\n", "        GetMessageResult getMessageResult = new GetMessageResult();\n", "        getMessageResult.setStatus(GetMessageStatus.FOUND);\n", "        getMessageResult.setMinOffset(100);\n", "        getMessageResult.setMaxOffset(1024);\n", "        getMessageResult.setNextBeginOffset(516);\n", "        return getMessageResult;\n", "    }\n", "}"], "method_lines_dic": {"PullMessageProcessor::::rejectRequest()": [92, 95], "PullMessageProcessor::::hasConsumeMessageHook()": [502, 504], "PullMessageProcessor::::executeConsumeMessageHookBefore(org.apache.rocketmq.broker.mqtrace.ConsumeMessageContext)": [506, 515], "PullMessageProcessor::::registerConsumeMessageHook(java.util.List<org.apache.rocketmq.broker.mqtrace.ConsumeMessageHook>)": [614, 616]}, "test_method_lines_dic": {"PullMessageProcessorTest::::init()": [77, 95], "PullMessageProcessorTest::::testProcessRequest_TopicNotExist()": [97, 105], "PullMessageProcessorTest::::testProcessRequest_SubNotExist()": [107, 115], "PullMessageProcessorTest::::testProcessRequest_SubNotLatest()": [117, 125], "PullMessageProcessorTest::::testProcessRequest_Found()": [127, 136], "PullMessageProcessorTest::::testProcessRequest_FoundWithHook()": [138, 169], "PullMessageProcessorTest::::testProcessRequest_MsgWasRemoving()": [171, 181], "PullMessageProcessorTest::::testProcessRequest_NoMsgInQueue()": [183, 193], "PullMessageProcessorTest::::createPullMsgCommand(int)": [195, 209], "PullMessageProcessorTest::::createConsumerData(java.lang.String,java.lang.String)": [211, 225], "PullMessageProcessorTest::::createGetMessageResult()": [227, 234]}, "reverse_method_lines_dic": {"92": "PullMessageProcessor::::rejectRequest()", "93": "PullMessageProcessor::::rejectRequest()", "94": "PullMessageProcessor::::rejectRequest()", "95": "PullMessageProcessor::::rejectRequest()", "502": "PullMessageProcessor::::hasConsumeMessageHook()", "503": "PullMessageProcessor::::hasConsumeMessageHook()", "504": "PullMessageProcessor::::hasConsumeMessageHook()", "506": "PullMessageProcessor::::executeConsumeMessageHookBefore(org.apache.rocketmq.broker.mqtrace.ConsumeMessageContext)", "507": "PullMessageProcessor::::executeConsumeMessageHookBefore(org.apache.rocketmq.broker.mqtrace.ConsumeMessageContext)", "508": "PullMessageProcessor::::executeConsumeMessageHookBefore(org.apache.rocketmq.broker.mqtrace.ConsumeMessageContext)", "509": "PullMessageProcessor::::executeConsumeMessageHookBefore(org.apache.rocketmq.broker.mqtrace.ConsumeMessageContext)", "510": "PullMessageProcessor::::executeConsumeMessageHookBefore(org.apache.rocketmq.broker.mqtrace.ConsumeMessageContext)", "511": "PullMessageProcessor::::executeConsumeMessageHookBefore(org.apache.rocketmq.broker.mqtrace.ConsumeMessageContext)", "512": "PullMessageProcessor::::executeConsumeMessageHookBefore(org.apache.rocketmq.broker.mqtrace.ConsumeMessageContext)", "513": "PullMessageProcessor::::executeConsumeMessageHookBefore(org.apache.rocketmq.broker.mqtrace.ConsumeMessageContext)", "514": "PullMessageProcessor::::executeConsumeMessageHookBefore(org.apache.rocketmq.broker.mqtrace.ConsumeMessageContext)", "515": "PullMessageProcessor::::executeConsumeMessageHookBefore(org.apache.rocketmq.broker.mqtrace.ConsumeMessageContext)", "614": "PullMessageProcessor::::registerConsumeMessageHook(java.util.List<org.apache.rocketmq.broker.mqtrace.ConsumeMessageHook>)", "615": "PullMessageProcessor::::registerConsumeMessageHook(java.util.List<org.apache.rocketmq.broker.mqtrace.ConsumeMessageHook>)", "616": "PullMessageProcessor::::registerConsumeMessageHook(java.util.List<org.apache.rocketmq.broker.mqtrace.ConsumeMessageHook>)"}, "test_reverse_method_lines_dic": {"77": "PullMessageProcessorTest::::init()", "78": "PullMessageProcessorTest::::init()", "79": "PullMessageProcessorTest::::init()", "80": "PullMessageProcessorTest::::init()", "81": "PullMessageProcessorTest::::init()", "82": "PullMessageProcessorTest::::init()", "83": "PullMessageProcessorTest::::init()", "84": "PullMessageProcessorTest::::init()", "85": "PullMessageProcessorTest::::init()", "86": "PullMessageProcessorTest::::init()", "87": "PullMessageProcessorTest::::init()", "88": "PullMessageProcessorTest::::init()", "89": "PullMessageProcessorTest::::init()", "90": "PullMessageProcessorTest::::init()", "91": "PullMessageProcessorTest::::init()", "92": "PullMessageProcessorTest::::init()", "93": "PullMessageProcessorTest::::init()", "94": "PullMessageProcessorTest::::init()", "95": "PullMessageProcessorTest::::init()", "97": "PullMessageProcessorTest::::testProcessRequest_TopicNotExist()", "98": "PullMessageProcessorTest::::testProcessRequest_TopicNotExist()", "99": "PullMessageProcessorTest::::testProcessRequest_TopicNotExist()", "100": "PullMessageProcessorTest::::testProcessRequest_TopicNotExist()", "101": "PullMessageProcessorTest::::testProcessRequest_TopicNotExist()", "102": "PullMessageProcessorTest::::testProcessRequest_TopicNotExist()", "103": "PullMessageProcessorTest::::testProcessRequest_TopicNotExist()", "104": "PullMessageProcessorTest::::testProcessRequest_TopicNotExist()", "105": "PullMessageProcessorTest::::testProcessRequest_TopicNotExist()", "107": "PullMessageProcessorTest::::testProcessRequest_SubNotExist()", "108": "PullMessageProcessorTest::::testProcessRequest_SubNotExist()", "109": "PullMessageProcessorTest::::testProcessRequest_SubNotExist()", "110": "PullMessageProcessorTest::::testProcessRequest_SubNotExist()", "111": "PullMessageProcessorTest::::testProcessRequest_SubNotExist()", "112": "PullMessageProcessorTest::::testProcessRequest_SubNotExist()", "113": "PullMessageProcessorTest::::testProcessRequest_SubNotExist()", "114": "PullMessageProcessorTest::::testProcessRequest_SubNotExist()", "115": "PullMessageProcessorTest::::testProcessRequest_SubNotExist()", "117": "PullMessageProcessorTest::::testProcessRequest_SubNotLatest()", "118": "PullMessageProcessorTest::::testProcessRequest_SubNotLatest()", "119": "PullMessageProcessorTest::::testProcessRequest_SubNotLatest()", "120": "PullMessageProcessorTest::::testProcessRequest_SubNotLatest()", "121": "PullMessageProcessorTest::::testProcessRequest_SubNotLatest()", "122": "PullMessageProcessorTest::::testProcessRequest_SubNotLatest()", "123": "PullMessageProcessorTest::::testProcessRequest_SubNotLatest()", "124": "PullMessageProcessorTest::::testProcessRequest_SubNotLatest()", "125": "PullMessageProcessorTest::::testProcessRequest_SubNotLatest()", "127": "PullMessageProcessorTest::::testProcessRequest_Found()", "128": "PullMessageProcessorTest::::testProcessRequest_Found()", "129": "PullMessageProcessorTest::::testProcessRequest_Found()", "130": "PullMessageProcessorTest::::testProcessRequest_Found()", "131": "PullMessageProcessorTest::::testProcessRequest_Found()", "132": "PullMessageProcessorTest::::testProcessRequest_Found()", "133": "PullMessageProcessorTest::::testProcessRequest_Found()", "134": "PullMessageProcessorTest::::testProcessRequest_Found()", "135": "PullMessageProcessorTest::::testProcessRequest_Found()", "136": "PullMessageProcessorTest::::testProcessRequest_Found()", "138": "PullMessageProcessorTest::::testProcessRequest_FoundWithHook()", "139": "PullMessageProcessorTest::::testProcessRequest_FoundWithHook()", "140": "PullMessageProcessorTest::::testProcessRequest_FoundWithHook()", "141": "PullMessageProcessorTest::::testProcessRequest_FoundWithHook()", "142": "PullMessageProcessorTest::::testProcessRequest_FoundWithHook()", "143": "PullMessageProcessorTest::::testProcessRequest_FoundWithHook()", "144": "PullMessageProcessorTest::::testProcessRequest_FoundWithHook()", "145": "PullMessageProcessorTest::::testProcessRequest_FoundWithHook()", "146": "PullMessageProcessorTest::::testProcessRequest_FoundWithHook()", "147": "PullMessageProcessorTest::::testProcessRequest_FoundWithHook()", "148": "PullMessageProcessorTest::::testProcessRequest_FoundWithHook()", "149": "PullMessageProcessorTest::::testProcessRequest_FoundWithHook()", "150": "PullMessageProcessorTest::::testProcessRequest_FoundWithHook()", "151": "PullMessageProcessorTest::::testProcessRequest_FoundWithHook()", "152": "PullMessageProcessorTest::::testProcessRequest_FoundWithHook()", "153": "PullMessageProcessorTest::::testProcessRequest_FoundWithHook()", "154": "PullMessageProcessorTest::::testProcessRequest_FoundWithHook()", "155": "PullMessageProcessorTest::::testProcessRequest_FoundWithHook()", "156": "PullMessageProcessorTest::::testProcessRequest_FoundWithHook()", "157": "PullMessageProcessorTest::::testProcessRequest_FoundWithHook()", "158": "PullMessageProcessorTest::::testProcessRequest_FoundWithHook()", "159": "PullMessageProcessorTest::::testProcessRequest_FoundWithHook()", "160": "PullMessageProcessorTest::::testProcessRequest_FoundWithHook()", "161": "PullMessageProcessorTest::::testProcessRequest_FoundWithHook()", "162": "PullMessageProcessorTest::::testProcessRequest_FoundWithHook()", "163": "PullMessageProcessorTest::::testProcessRequest_FoundWithHook()", "164": "PullMessageProcessorTest::::testProcessRequest_FoundWithHook()", "165": "PullMessageProcessorTest::::testProcessRequest_FoundWithHook()", "166": "PullMessageProcessorTest::::testProcessRequest_FoundWithHook()", "167": "PullMessageProcessorTest::::testProcessRequest_FoundWithHook()", "168": "PullMessageProcessorTest::::testProcessRequest_FoundWithHook()", "169": "PullMessageProcessorTest::::testProcessRequest_FoundWithHook()", "171": "PullMessageProcessorTest::::testProcessRequest_MsgWasRemoving()", "172": "PullMessageProcessorTest::::testProcessRequest_MsgWasRemoving()", "173": "PullMessageProcessorTest::::testProcessRequest_MsgWasRemoving()", "174": "PullMessageProcessorTest::::testProcessRequest_MsgWasRemoving()", "175": "PullMessageProcessorTest::::testProcessRequest_MsgWasRemoving()", "176": "PullMessageProcessorTest::::testProcessRequest_MsgWasRemoving()", "177": "PullMessageProcessorTest::::testProcessRequest_MsgWasRemoving()", "178": "PullMessageProcessorTest::::testProcessRequest_MsgWasRemoving()", "179": "PullMessageProcessorTest::::testProcessRequest_MsgWasRemoving()", "180": "PullMessageProcessorTest::::testProcessRequest_MsgWasRemoving()", "181": "PullMessageProcessorTest::::testProcessRequest_MsgWasRemoving()", "183": "PullMessageProcessorTest::::testProcessRequest_NoMsgInQueue()", "184": "PullMessageProcessorTest::::testProcessRequest_NoMsgInQueue()", "185": "PullMessageProcessorTest::::testProcessRequest_NoMsgInQueue()", "186": "PullMessageProcessorTest::::testProcessRequest_NoMsgInQueue()", "187": "PullMessageProcessorTest::::testProcessRequest_NoMsgInQueue()", "188": "PullMessageProcessorTest::::testProcessRequest_NoMsgInQueue()", "189": "PullMessageProcessorTest::::testProcessRequest_NoMsgInQueue()", "190": "PullMessageProcessorTest::::testProcessRequest_NoMsgInQueue()", "191": "PullMessageProcessorTest::::testProcessRequest_NoMsgInQueue()", "192": "PullMessageProcessorTest::::testProcessRequest_NoMsgInQueue()", "193": "PullMessageProcessorTest::::testProcessRequest_NoMsgInQueue()", "195": "PullMessageProcessorTest::::createPullMsgCommand(int)", "196": "PullMessageProcessorTest::::createPullMsgCommand(int)", "197": "PullMessageProcessorTest::::createPullMsgCommand(int)", "198": "PullMessageProcessorTest::::createPullMsgCommand(int)", "199": "PullMessageProcessorTest::::createPullMsgCommand(int)", "200": "PullMessageProcessorTest::::createPullMsgCommand(int)", "201": "PullMessageProcessorTest::::createPullMsgCommand(int)", "202": "PullMessageProcessorTest::::createPullMsgCommand(int)", "203": "PullMessageProcessorTest::::createPullMsgCommand(int)", "204": "PullMessageProcessorTest::::createPullMsgCommand(int)", "205": "PullMessageProcessorTest::::createPullMsgCommand(int)", "206": "PullMessageProcessorTest::::createPullMsgCommand(int)", "207": "PullMessageProcessorTest::::createPullMsgCommand(int)", "208": "PullMessageProcessorTest::::createPullMsgCommand(int)", "209": "PullMessageProcessorTest::::createPullMsgCommand(int)", "211": "PullMessageProcessorTest::::createConsumerData(java.lang.String,java.lang.String)", "212": "PullMessageProcessorTest::::createConsumerData(java.lang.String,java.lang.String)", "213": "PullMessageProcessorTest::::createConsumerData(java.lang.String,java.lang.String)", "214": "PullMessageProcessorTest::::createConsumerData(java.lang.String,java.lang.String)", "215": "PullMessageProcessorTest::::createConsumerData(java.lang.String,java.lang.String)", "216": "PullMessageProcessorTest::::createConsumerData(java.lang.String,java.lang.String)", "217": "PullMessageProcessorTest::::createConsumerData(java.lang.String,java.lang.String)", "218": "PullMessageProcessorTest::::createConsumerData(java.lang.String,java.lang.String)", "219": "PullMessageProcessorTest::::createConsumerData(java.lang.String,java.lang.String)", "220": "PullMessageProcessorTest::::createConsumerData(java.lang.String,java.lang.String)", "221": "PullMessageProcessorTest::::createConsumerData(java.lang.String,java.lang.String)", "222": "PullMessageProcessorTest::::createConsumerData(java.lang.String,java.lang.String)", "223": "PullMessageProcessorTest::::createConsumerData(java.lang.String,java.lang.String)", "224": "PullMessageProcessorTest::::createConsumerData(java.lang.String,java.lang.String)", "225": "PullMessageProcessorTest::::createConsumerData(java.lang.String,java.lang.String)", "227": "PullMessageProcessorTest::::createGetMessageResult()", "228": "PullMessageProcessorTest::::createGetMessageResult()", "229": "PullMessageProcessorTest::::createGetMessageResult()", "230": "PullMessageProcessorTest::::createGetMessageResult()", "231": "PullMessageProcessorTest::::createGetMessageResult()", "232": "PullMessageProcessorTest::::createGetMessageResult()", "233": "PullMessageProcessorTest::::createGetMessageResult()", "234": "PullMessageProcessorTest::::createGetMessageResult()"}, "tests": [{"test_lines": [97, 105], "covered_lines": [77, 78, 82, 83, 84, 89, 109, 110, 111, 112, 114, 116, 119, 125, 126, 127, 133, 139, 140, 141, 143, 146, 147, 148, 149, 150, 151]}, {"test_lines": [107, 115], "covered_lines": [77, 78, 82, 83, 84, 89, 109, 110, 111, 112, 114, 116, 119, 125, 126, 127, 133, 139, 140, 141, 143, 146, 147, 154, 161, 170, 171, 172, 193, 194, 195, 196, 197, 198, 199]}, {"test_lines": [117, 125], "covered_lines": [77, 78, 82, 83, 84, 89, 109, 110, 111, 112, 114, 116, 119, 125, 126, 127, 133, 139, 140, 141, 143, 146, 147, 154, 161, 170, 171, 172, 193, 194, 195, 202, 209, 210, 217, 218, 219, 220, 221, 222]}, {"test_lines": [127, 136], "covered_lines": [77, 78, 82, 83, 84, 89, 109, 110, 111, 112, 114, 116, 119, 125, 126, 127, 133, 139, 140, 141, 143, 146, 147, 154, 161, 170, 171, 172, 193, 194, 195, 202, 209, 210, 217, 224, 242, 250, 254, 255, 259, 260, 261, 262, 263, 264, 265, 266, 268, 271, 274, 277, 287, 297, 300, 302, 303, 351, 393, 396, 397, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 490, 491, 493, 494, 495, 499, 503, 519, 521, 523, 524, 544, 545, 547, 548]}, {"test_lines": [138, 169], "covered_lines": [77, 78, 82, 83, 84, 89, 109, 110, 111, 112, 114, 116, 119, 125, 126, 127, 133, 139, 140, 141, 143, 146, 147, 154, 161, 170, 171, 172, 193, 194, 195, 202, 209, 210, 217, 224, 242, 250, 254, 255, 259, 260, 261, 262, 263, 264, 265, 266, 268, 271, 274, 277, 287, 297, 300, 302, 303, 351, 352, 353, 354, 355, 357, 359, 361, 362, 364, 365, 366, 367, 369, 390, 393, 396, 397, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 490, 491, 493, 494, 495, 499, 503, 507, 508, 510, 512, 513, 515, 519, 521, 523, 524, 544, 545, 547, 548, 615, 616]}, {"test_lines": [171, 181], "covered_lines": [77, 78, 82, 83, 84, 89, 109, 110, 111, 112, 114, 116, 119, 125, 126, 127, 133, 139, 140, 141, 143, 146, 147, 154, 161, 170, 171, 172, 193, 194, 195, 202, 209, 210, 217, 224, 242, 250, 254, 255, 259, 260, 261, 262, 263, 264, 265, 266, 268, 271, 274, 277, 287, 297, 300, 305, 306, 351, 393, 454, 490, 491, 493, 494, 495, 499, 503]}, {"test_lines": [183, 193], "covered_lines": [77, 78, 82, 83, 84, 89, 109, 110, 111, 112, 114, 116, 119, 125, 126, 127, 133, 139, 140, 141, 143, 146, 147, 154, 161, 170, 171, 172, 193, 194, 195, 202, 209, 210, 217, 224, 242, 250, 254, 255, 259, 260, 261, 262, 263, 264, 265, 266, 268, 271, 274, 277, 287, 297, 300, 309, 310, 313, 314, 315, 316, 317, 318, 351, 393, 456, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 490, 491, 493, 494, 495, 499, 503, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 566, 567, 569, 571, 574, 575]}]}, "/bernard/dataset_construction/prep/repos/RocketMQC/broker/src/main/java/org/apache/rocketmq/broker/processor/EndTransactionProcessor.java": {"class_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "package org.apache.rocketmq.broker.processor;\n", "\n", "import io.netty.channel.ChannelHandlerContext;\n", "import org.apache.rocketmq.broker.BrokerController;\n", "import org.apache.rocketmq.broker.transaction.OperationResult;\n", "import org.apache.rocketmq.common.TopicFilterType;\n", "import org.apache.rocketmq.common.constant.LoggerName;\n", "import org.apache.rocketmq.common.message.MessageAccessor;\n", "import org.apache.rocketmq.common.message.MessageConst;\n", "import org.apache.rocketmq.common.message.MessageDecoder;\n", "import org.apache.rocketmq.common.message.MessageExt;\n", "import org.apache.rocketmq.common.protocol.ResponseCode;\n", "import org.apache.rocketmq.common.protocol.header.EndTransactionRequestHeader;\n", "import org.apache.rocketmq.common.sysflag.MessageSysFlag;\n", "import org.apache.rocketmq.logging.InternalLogger;\n", "import org.apache.rocketmq.logging.InternalLoggerFactory;\n", "import org.apache.rocketmq.remoting.common.RemotingHelper;\n", "import org.apache.rocketmq.remoting.exception.RemotingCommandException;\n", "import org.apache.rocketmq.remoting.netty.AsyncNettyRequestProcessor;\n", "import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;\n", "import org.apache.rocketmq.remoting.protocol.RemotingCommand;\n", "import org.apache.rocketmq.store.MessageExtBrokerInner;\n", "import org.apache.rocketmq.store.PutMessageResult;\n", "import org.apache.rocketmq.store.config.BrokerRole;\n", "\n", "/**\n", " * EndTransaction processor: process commit and rollback message\n", " *\n", " * \u4e8b\u52a1\u6d88\u606f\uff1abroker\u5904\u7406producer\u63d0\u4ea4\u7684\u63d0\u4ea4/\u56de\u6eda\u6d88\u606f\n", " */\n", "public class EndTransactionProcessor extends AsyncNettyRequestProcessor implements NettyRequestProcessor {\n", "    private static final InternalLogger LOGGER = InternalLoggerFactory.getLogger(LoggerName.TRANSACTION_LOGGER_NAME);\n", "    private final BrokerController brokerController;\n", "\n", "    public EndTransactionProcessor(final BrokerController brokerController) {\n", "        this.brokerController = brokerController;\n", "    }\n", "\n", "    @Override\n", "    public RemotingCommand processRequest(ChannelHandlerContext ctx, RemotingCommand request) throws\n", "        RemotingCommandException {\n", "        final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n", "        final EndTransactionRequestHeader requestHeader =\n", "            (EndTransactionRequestHeader)request.decodeCommandCustomHeader(EndTransactionRequestHeader.class);\n", "        LOGGER.debug(\"Transaction request:{}\", requestHeader);\n", "        if (BrokerRole.SLAVE == brokerController.getMessageStoreConfig().getBrokerRole()) {\n", "            response.setCode(ResponseCode.SLAVE_NOT_AVAILABLE);\n", "            LOGGER.warn(\"Message store is slave mode, so end transaction is forbidden. \");\n", "            return response;\n", "        }\n", "\n", "        if (requestHeader.getFromTransactionCheck()) {\n", "            switch (requestHeader.getCommitOrRollback()) {\n", "                case MessageSysFlag.TRANSACTION_NOT_TYPE: {\n", "                    LOGGER.warn(\"Check producer[{}] transaction state, but it's pending status.\"\n", "                            + \"RequestHeader: {} Remark: {}\",\n", "                        RemotingHelper.parseChannelRemoteAddr(ctx.channel()),\n", "                        requestHeader.toString(),\n", "                        request.getRemark());\n", "                    return null;\n", "                }\n", "\n", "                case MessageSysFlag.TRANSACTION_COMMIT_TYPE: {\n", "                    LOGGER.warn(\"Check producer[{}] transaction state, the producer commit the message.\"\n", "                            + \"RequestHeader: {} Remark: {}\",\n", "                        RemotingHelper.parseChannelRemoteAddr(ctx.channel()),\n", "                        requestHeader.toString(),\n", "                        request.getRemark());\n", "\n", "                    break;\n", "                }\n", "\n", "                case MessageSysFlag.TRANSACTION_ROLLBACK_TYPE: {\n", "                    LOGGER.warn(\"Check producer[{}] transaction state, the producer rollback the message.\"\n", "                            + \"RequestHeader: {} Remark: {}\",\n", "                        RemotingHelper.parseChannelRemoteAddr(ctx.channel()),\n", "                        requestHeader.toString(),\n", "                        request.getRemark());\n", "                    break;\n", "                }\n", "                default:\n", "                    return null;\n", "            }\n", "        } else {\n", "            switch (requestHeader.getCommitOrRollback()) {\n", "                case MessageSysFlag.TRANSACTION_NOT_TYPE: {\n", "                    LOGGER.warn(\"The producer[{}] end transaction in sending message,  and it's pending status.\"\n", "                            + \"RequestHeader: {} Remark: {}\",\n", "                        RemotingHelper.parseChannelRemoteAddr(ctx.channel()),\n", "                        requestHeader.toString(),\n", "                        request.getRemark());\n", "                    return null;\n", "                }\n", "\n", "                case MessageSysFlag.TRANSACTION_COMMIT_TYPE: {\n", "                    break;\n", "                }\n", "\n", "                case MessageSysFlag.TRANSACTION_ROLLBACK_TYPE: {\n", "                    LOGGER.warn(\"The producer[{}] end transaction in sending message, rollback the message.\"\n", "                            + \"RequestHeader: {} Remark: {}\",\n", "                        RemotingHelper.parseChannelRemoteAddr(ctx.channel()),\n", "                        requestHeader.toString(),\n", "                        request.getRemark());\n", "                    break;\n", "                }\n", "                default:\n", "                    return null;\n", "            }\n", "        }\n", "        OperationResult result = new OperationResult();\n", "        if (MessageSysFlag.TRANSACTION_COMMIT_TYPE == requestHeader.getCommitOrRollback()) {\n", "            //\u901a\u8fc7\u504f\u79fb\u91cf\u83b7\u53d6\u5bf9\u5e94half\u6d88\u606f\n", "            result = this.brokerController.getTransactionalMessageService().commitMessage(requestHeader);\n", "            if (result.getResponseCode() == ResponseCode.SUCCESS) {\n", "                RemotingCommand res = checkPrepareMessage(result.getPrepareMessage(), requestHeader);\n", "                if (res.getCode() == ResponseCode.SUCCESS) {\n", "                    //\u8fd9\u91cc\u4e3b\u8981\u83b7\u53d6\u539f\u6765\u7684topic\u548cqueue\u4fe1\u606f\uff0c\u6062\u590d\u539f\u4e3b\u9898\n", "                    MessageExtBrokerInner msgInner = endMessageTransaction(result.getPrepareMessage());\n", "                    msgInner.setSysFlag(MessageSysFlag.resetTransactionValue(msgInner.getSysFlag(), requestHeader.getCommitOrRollback()));\n", "                    msgInner.setQueueOffset(requestHeader.getTranStateTableOffset());\n", "                    msgInner.setPreparedTransactionOffset(requestHeader.getCommitLogOffset());\n", "                    msgInner.setStoreTimestamp(result.getPrepareMessage().getStoreTimestamp());\n", "                    MessageAccessor.clearProperty(msgInner, MessageConst.PROPERTY_TRANSACTION_PREPARED);\n", "                    //\u5c06\u6d88\u606f\u653e\u5165messageStore\u4e2d\n", "                    RemotingCommand sendResult = sendFinalMessage(msgInner);\n", "                    if (sendResult.getCode() == ResponseCode.SUCCESS) {\n", "                        //\u5220\u9664half\u6d88\u606f\uff0c\u903b\u8f91\u5220\u9664\uff0c\u901a\u8fc7\u6dfb\u52a0\u6d88\u606f\u5230RMQ_SYS_TRANS_OP_HALF_TOPIC\u4e3b\u9898\n", "                        this.brokerController.getTransactionalMessageService().deletePrepareMessage(result.getPrepareMessage());\n", "                    }\n", "                    return sendResult;\n", "                }\n", "                return res;\n", "            }\n", "        } else if (MessageSysFlag.TRANSACTION_ROLLBACK_TYPE == requestHeader.getCommitOrRollback()) {\n", "            result = this.brokerController.getTransactionalMessageService().rollbackMessage(requestHeader);\n", "            if (result.getResponseCode() == ResponseCode.SUCCESS) {\n", "                RemotingCommand res = checkPrepareMessage(result.getPrepareMessage(), requestHeader);\n", "                if (res.getCode() == ResponseCode.SUCCESS) {\n", "                    //\u5220\u9664half\u6d88\u606f\uff0c\u903b\u8f91\u5220\u9664\uff0c\u901a\u8fc7\u6dfb\u52a0\u6d88\u606f\u5230RMQ_SYS_TRANS_OP_HALF_TOPIC\u4e3b\u9898\n", "                    this.brokerController.getTransactionalMessageService().deletePrepareMessage(result.getPrepareMessage());\n", "                }\n", "                return res;\n", "            }\n", "        }\n", "        response.setCode(result.getResponseCode());\n", "        response.setRemark(result.getResponseRemark());\n", "        return response;\n", "    }\n", "\n", "    @Override\n", "    public boolean rejectRequest() {\n", "        return false;\n", "    }\n", "\n", "    private RemotingCommand checkPrepareMessage(MessageExt msgExt, EndTransactionRequestHeader requestHeader) {\n", "        final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n", "        if (msgExt != null) {\n", "            final String pgroupRead = msgExt.getProperty(MessageConst.PROPERTY_PRODUCER_GROUP);\n", "            if (!pgroupRead.equals(requestHeader.getProducerGroup())) {\n", "                response.setCode(ResponseCode.SYSTEM_ERROR);\n", "                response.setRemark(\"The producer group wrong\");\n", "                return response;\n", "            }\n", "\n", "            if (msgExt.getQueueOffset() != requestHeader.getTranStateTableOffset()) {\n", "                response.setCode(ResponseCode.SYSTEM_ERROR);\n", "                response.setRemark(\"The transaction state table offset wrong\");\n", "                return response;\n", "            }\n", "\n", "            if (msgExt.getCommitLogOffset() != requestHeader.getCommitLogOffset()) {\n", "                response.setCode(ResponseCode.SYSTEM_ERROR);\n", "                response.setRemark(\"The commit log offset wrong\");\n", "                return response;\n", "            }\n", "        } else {\n", "            response.setCode(ResponseCode.SYSTEM_ERROR);\n", "            response.setRemark(\"Find prepared transaction message failed\");\n", "            return response;\n", "        }\n", "        response.setCode(ResponseCode.SUCCESS);\n", "        return response;\n", "    }\n", "\n", "    private MessageExtBrokerInner endMessageTransaction(MessageExt msgExt) {\n", "        MessageExtBrokerInner msgInner = new MessageExtBrokerInner();\n", "        msgInner.setTopic(msgExt.getUserProperty(MessageConst.PROPERTY_REAL_TOPIC));\n", "        msgInner.setQueueId(Integer.parseInt(msgExt.getUserProperty(MessageConst.PROPERTY_REAL_QUEUE_ID)));\n", "        msgInner.setBody(msgExt.getBody());\n", "        msgInner.setFlag(msgExt.getFlag());\n", "        msgInner.setBornTimestamp(msgExt.getBornTimestamp());\n", "        msgInner.setBornHost(msgExt.getBornHost());\n", "        msgInner.setStoreHost(msgExt.getStoreHost());\n", "        msgInner.setReconsumeTimes(msgExt.getReconsumeTimes());\n", "        msgInner.setWaitStoreMsgOK(false);\n", "        msgInner.setTransactionId(msgExt.getUserProperty(MessageConst.PROPERTY_UNIQ_CLIENT_MESSAGE_ID_KEYIDX));\n", "        msgInner.setSysFlag(msgExt.getSysFlag());\n", "        TopicFilterType topicFilterType =\n", "            (msgInner.getSysFlag() & MessageSysFlag.MULTI_TAGS_FLAG) == MessageSysFlag.MULTI_TAGS_FLAG ? TopicFilterType.MULTI_TAG\n", "                : TopicFilterType.SINGLE_TAG;\n", "        long tagsCodeValue = MessageExtBrokerInner.tagsString2tagsCode(topicFilterType, msgInner.getTags());\n", "        msgInner.setTagsCode(tagsCodeValue);\n", "        MessageAccessor.setProperties(msgInner, msgExt.getProperties());\n", "        msgInner.setPropertiesString(MessageDecoder.messageProperties2String(msgExt.getProperties()));\n", "        MessageAccessor.clearProperty(msgInner, MessageConst.PROPERTY_REAL_TOPIC);\n", "        MessageAccessor.clearProperty(msgInner, MessageConst.PROPERTY_REAL_QUEUE_ID);\n", "        return msgInner;\n", "    }\n", "\n", "    private RemotingCommand sendFinalMessage(MessageExtBrokerInner msgInner) {\n", "        final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n", "        final PutMessageResult putMessageResult = this.brokerController.getMessageStore().putMessage(msgInner);\n", "        if (putMessageResult != null) {\n", "            switch (putMessageResult.getPutMessageStatus()) {\n", "                // Success\n", "                case PUT_OK:\n", "                case FLUSH_DISK_TIMEOUT:\n", "                case FLUSH_SLAVE_TIMEOUT:\n", "                case SLAVE_NOT_AVAILABLE:\n", "                    response.setCode(ResponseCode.SUCCESS);\n", "                    response.setRemark(null);\n", "                    break;\n", "                // Failed\n", "                case CREATE_MAPEDFILE_FAILED:\n", "                    response.setCode(ResponseCode.SYSTEM_ERROR);\n", "                    response.setRemark(\"Create mapped file failed.\");\n", "                    break;\n", "                case MESSAGE_ILLEGAL:\n", "                case PROPERTIES_SIZE_EXCEEDED:\n", "                    response.setCode(ResponseCode.MESSAGE_ILLEGAL);\n", "                    response.setRemark(\"The message is illegal, maybe msg body or properties length not matched. msg body length limit 128k, msg properties length limit 32k.\");\n", "                    break;\n", "                case SERVICE_NOT_AVAILABLE:\n", "                    response.setCode(ResponseCode.SERVICE_NOT_AVAILABLE);\n", "                    response.setRemark(\"Service not available now.\");\n", "                    break;\n", "                case OS_PAGECACHE_BUSY:\n", "                    response.setCode(ResponseCode.SYSTEM_ERROR);\n", "                    response.setRemark(\"OS page cache busy, please try another machine\");\n", "                    break;\n", "                case UNKNOWN_ERROR:\n", "                    response.setCode(ResponseCode.SYSTEM_ERROR);\n", "                    response.setRemark(\"UNKNOWN_ERROR\");\n", "                    break;\n", "                default:\n", "                    response.setCode(ResponseCode.SYSTEM_ERROR);\n", "                    response.setRemark(\"UNKNOWN_ERROR DEFAULT\");\n", "                    break;\n", "            }\n", "            return response;\n", "        } else {\n", "            response.setCode(ResponseCode.SYSTEM_ERROR);\n", "            response.setRemark(\"store putMessage return null\");\n", "        }\n", "        return response;\n", "    }\n", "}\n"], "test_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "package org.apache.rocketmq.broker.processor;\n", "\n", "import io.netty.channel.ChannelHandlerContext;\n", "import org.apache.rocketmq.broker.BrokerController;\n", "import org.apache.rocketmq.broker.transaction.OperationResult;\n", "import org.apache.rocketmq.broker.transaction.TransactionalMessageService;\n", "import org.apache.rocketmq.common.BrokerConfig;\n", "import org.apache.rocketmq.common.message.MessageAccessor;\n", "import org.apache.rocketmq.common.message.MessageConst;\n", "import org.apache.rocketmq.common.message.MessageExt;\n", "import org.apache.rocketmq.common.protocol.RequestCode;\n", "import org.apache.rocketmq.common.protocol.ResponseCode;\n", "import org.apache.rocketmq.common.protocol.header.EndTransactionRequestHeader;\n", "import org.apache.rocketmq.common.sysflag.MessageSysFlag;\n", "import org.apache.rocketmq.remoting.exception.RemotingCommandException;\n", "import org.apache.rocketmq.remoting.netty.NettyClientConfig;\n", "import org.apache.rocketmq.remoting.netty.NettyServerConfig;\n", "import org.apache.rocketmq.remoting.protocol.RemotingCommand;\n", "import org.apache.rocketmq.store.AppendMessageResult;\n", "import org.apache.rocketmq.store.AppendMessageStatus;\n", "import org.apache.rocketmq.store.MessageExtBrokerInner;\n", "import org.apache.rocketmq.store.MessageStore;\n", "import org.apache.rocketmq.store.PutMessageResult;\n", "import org.apache.rocketmq.store.PutMessageStatus;\n", "import org.apache.rocketmq.store.config.MessageStoreConfig;\n", "import org.junit.Before;\n", "import org.junit.Test;\n", "import org.junit.runner.RunWith;\n", "import org.mockito.Mock;\n", "import org.mockito.Spy;\n", "import org.mockito.junit.MockitoJUnitRunner;\n", "\n", "import static org.assertj.core.api.Assertions.assertThat;\n", "import static org.mockito.ArgumentMatchers.any;\n", "import static org.mockito.Mockito.when;\n", "\n", "@RunWith(MockitoJUnitRunner.class)\n", "public class EndTransactionProcessorTest {\n", "\n", "    private EndTransactionProcessor endTransactionProcessor;\n", "\n", "    @Mock\n", "    private ChannelHandlerContext handlerContext;\n", "\n", "    @Spy\n", "    private BrokerController\n", "        brokerController = new BrokerController(new BrokerConfig(), new NettyServerConfig(), new NettyClientConfig(),\n", "        new MessageStoreConfig());\n", "\n", "    @Mock\n", "    private MessageStore messageStore;\n", "\n", "    @Mock\n", "    private TransactionalMessageService transactionMsgService;\n", "\n", "    @Before\n", "    public void init() {\n", "        brokerController.setMessageStore(messageStore);\n", "        brokerController.setTransactionalMessageService(transactionMsgService);\n", "        endTransactionProcessor = new EndTransactionProcessor(brokerController);\n", "    }\n", "\n", "    private OperationResult createResponse(int status){\n", "        OperationResult response = new OperationResult();\n", "        response.setPrepareMessage(createDefaultMessageExt());\n", "        response.setResponseCode(status);\n", "        response.setResponseRemark(null);\n", "        return response;\n", "    }\n", "\n", "    @Test\n", "    public void testProcessRequest() throws RemotingCommandException {\n", "        when(transactionMsgService.commitMessage(any(EndTransactionRequestHeader.class))).thenReturn(createResponse(ResponseCode.SUCCESS));\n", "        when(messageStore.putMessage(any(MessageExtBrokerInner.class))).thenReturn(new PutMessageResult\n", "            (PutMessageStatus.PUT_OK, new AppendMessageResult(AppendMessageStatus.PUT_OK)));\n", "        RemotingCommand request = createEndTransactionMsgCommand(MessageSysFlag.TRANSACTION_COMMIT_TYPE, false);\n", "        RemotingCommand response = endTransactionProcessor.processRequest(handlerContext, request);\n", "        assertThat(response.getCode()).isEqualTo(ResponseCode.SUCCESS);\n", "    }\n", "\n", "    @Test\n", "    public void testProcessRequest_CheckMessage() throws RemotingCommandException {\n", "        when(transactionMsgService.commitMessage(any(EndTransactionRequestHeader.class))).thenReturn(createResponse(ResponseCode.SUCCESS));\n", "        when(messageStore.putMessage(any(MessageExtBrokerInner.class))).thenReturn(new PutMessageResult\n", "            (PutMessageStatus.PUT_OK, new AppendMessageResult(AppendMessageStatus.PUT_OK)));\n", "        RemotingCommand request = createEndTransactionMsgCommand(MessageSysFlag.TRANSACTION_COMMIT_TYPE, true);\n", "        RemotingCommand response = endTransactionProcessor.processRequest(handlerContext, request);\n", "        assertThat(response.getCode()).isEqualTo(ResponseCode.SUCCESS);\n", "    }\n", "\n", "    @Test\n", "    public void testProcessRequest_NotType() throws RemotingCommandException {\n", "        RemotingCommand request = createEndTransactionMsgCommand(MessageSysFlag.TRANSACTION_NOT_TYPE, true);\n", "        RemotingCommand response = endTransactionProcessor.processRequest(handlerContext, request);\n", "        assertThat(response).isNull();\n", "    }\n", "\n", "    @Test\n", "    public void testProcessRequest_RollBack() throws RemotingCommandException {\n", "        when(transactionMsgService.rollbackMessage(any(EndTransactionRequestHeader.class))).thenReturn(createResponse(ResponseCode.SUCCESS));\n", "        RemotingCommand request = createEndTransactionMsgCommand(MessageSysFlag.TRANSACTION_ROLLBACK_TYPE, true);\n", "        RemotingCommand response = endTransactionProcessor.processRequest(handlerContext, request);\n", "        assertThat(response.getCode()).isEqualTo(ResponseCode.SUCCESS);\n", "    }\n", "\n", "    private MessageExt createDefaultMessageExt() {\n", "        MessageExt messageExt = new MessageExt();\n", "        messageExt.setMsgId(\"12345678\");\n", "        messageExt.setQueueId(0);\n", "        messageExt.setCommitLogOffset(123456789L);\n", "        messageExt.setQueueOffset(1234);\n", "        MessageAccessor.putProperty(messageExt, MessageConst.PROPERTY_REAL_QUEUE_ID, \"0\");\n", "        MessageAccessor.putProperty(messageExt, MessageConst.PROPERTY_TRANSACTION_PREPARED, \"true\");\n", "        MessageAccessor.putProperty(messageExt, MessageConst.PROPERTY_PRODUCER_GROUP, \"testTransactionGroup\");\n", "        return messageExt;\n", "    }\n", "\n", "    private EndTransactionRequestHeader createEndTransactionRequestHeader(int status, boolean isCheckMsg) {\n", "        EndTransactionRequestHeader header = new EndTransactionRequestHeader();\n", "        header.setCommitLogOffset(123456789L);\n", "        header.setFromTransactionCheck(isCheckMsg);\n", "        header.setCommitOrRollback(status);\n", "        header.setMsgId(\"12345678\");\n", "        header.setTransactionId(\"123\");\n", "        header.setProducerGroup(\"testTransactionGroup\");\n", "        header.setTranStateTableOffset(1234L);\n", "        return header;\n", "    }\n", "\n", "    private RemotingCommand createEndTransactionMsgCommand(int status, boolean isCheckMsg) {\n", "        EndTransactionRequestHeader header = createEndTransactionRequestHeader(status, isCheckMsg);\n", "        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.END_TRANSACTION, header);\n", "        request.makeCustomHeaderToNet();\n", "        return request;\n", "    }\n", "}\n"], "method_lines_dic": {"EndTransactionProcessor::::rejectRequest()": [167, 170]}, "test_method_lines_dic": {"EndTransactionProcessorTest::::init()": [72, 77], "EndTransactionProcessorTest::::createResponse(int)": [79, 85], "EndTransactionProcessorTest::::testProcessRequest()": [87, 95], "EndTransactionProcessorTest::::testProcessRequest_CheckMessage()": [97, 105], "EndTransactionProcessorTest::::testProcessRequest_NotType()": [107, 112], "EndTransactionProcessorTest::::testProcessRequest_RollBack()": [114, 120], "EndTransactionProcessorTest::::createDefaultMessageExt()": [122, 132], "EndTransactionProcessorTest::::createEndTransactionRequestHeader(int,boolean)": [134, 144], "EndTransactionProcessorTest::::createEndTransactionMsgCommand(int,boolean)": [146, 151]}, "reverse_method_lines_dic": {"167": "EndTransactionProcessor::::rejectRequest()", "168": "EndTransactionProcessor::::rejectRequest()", "169": "EndTransactionProcessor::::rejectRequest()", "170": "EndTransactionProcessor::::rejectRequest()"}, "test_reverse_method_lines_dic": {"72": "EndTransactionProcessorTest::::init()", "73": "EndTransactionProcessorTest::::init()", "74": "EndTransactionProcessorTest::::init()", "75": "EndTransactionProcessorTest::::init()", "76": "EndTransactionProcessorTest::::init()", "77": "EndTransactionProcessorTest::::init()", "79": "EndTransactionProcessorTest::::createResponse(int)", "80": "EndTransactionProcessorTest::::createResponse(int)", "81": "EndTransactionProcessorTest::::createResponse(int)", "82": "EndTransactionProcessorTest::::createResponse(int)", "83": "EndTransactionProcessorTest::::createResponse(int)", "84": "EndTransactionProcessorTest::::createResponse(int)", "85": "EndTransactionProcessorTest::::createResponse(int)", "87": "EndTransactionProcessorTest::::testProcessRequest()", "88": "EndTransactionProcessorTest::::testProcessRequest()", "89": "EndTransactionProcessorTest::::testProcessRequest()", "90": "EndTransactionProcessorTest::::testProcessRequest()", "91": "EndTransactionProcessorTest::::testProcessRequest()", "92": "EndTransactionProcessorTest::::testProcessRequest()", "93": "EndTransactionProcessorTest::::testProcessRequest()", "94": "EndTransactionProcessorTest::::testProcessRequest()", "95": "EndTransactionProcessorTest::::testProcessRequest()", "97": "EndTransactionProcessorTest::::testProcessRequest_CheckMessage()", "98": "EndTransactionProcessorTest::::testProcessRequest_CheckMessage()", "99": "EndTransactionProcessorTest::::testProcessRequest_CheckMessage()", "100": "EndTransactionProcessorTest::::testProcessRequest_CheckMessage()", "101": "EndTransactionProcessorTest::::testProcessRequest_CheckMessage()", "102": "EndTransactionProcessorTest::::testProcessRequest_CheckMessage()", "103": "EndTransactionProcessorTest::::testProcessRequest_CheckMessage()", "104": "EndTransactionProcessorTest::::testProcessRequest_CheckMessage()", "105": "EndTransactionProcessorTest::::testProcessRequest_CheckMessage()", "107": "EndTransactionProcessorTest::::testProcessRequest_NotType()", "108": "EndTransactionProcessorTest::::testProcessRequest_NotType()", "109": "EndTransactionProcessorTest::::testProcessRequest_NotType()", "110": "EndTransactionProcessorTest::::testProcessRequest_NotType()", "111": "EndTransactionProcessorTest::::testProcessRequest_NotType()", "112": "EndTransactionProcessorTest::::testProcessRequest_NotType()", "114": "EndTransactionProcessorTest::::testProcessRequest_RollBack()", "115": "EndTransactionProcessorTest::::testProcessRequest_RollBack()", "116": "EndTransactionProcessorTest::::testProcessRequest_RollBack()", "117": "EndTransactionProcessorTest::::testProcessRequest_RollBack()", "118": "EndTransactionProcessorTest::::testProcessRequest_RollBack()", "119": "EndTransactionProcessorTest::::testProcessRequest_RollBack()", "120": "EndTransactionProcessorTest::::testProcessRequest_RollBack()", "122": "EndTransactionProcessorTest::::createDefaultMessageExt()", "123": "EndTransactionProcessorTest::::createDefaultMessageExt()", "124": "EndTransactionProcessorTest::::createDefaultMessageExt()", "125": "EndTransactionProcessorTest::::createDefaultMessageExt()", "126": "EndTransactionProcessorTest::::createDefaultMessageExt()", "127": "EndTransactionProcessorTest::::createDefaultMessageExt()", "128": "EndTransactionProcessorTest::::createDefaultMessageExt()", "129": "EndTransactionProcessorTest::::createDefaultMessageExt()", "130": "EndTransactionProcessorTest::::createDefaultMessageExt()", "131": "EndTransactionProcessorTest::::createDefaultMessageExt()", "132": "EndTransactionProcessorTest::::createDefaultMessageExt()", "134": "EndTransactionProcessorTest::::createEndTransactionRequestHeader(int,boolean)", "135": "EndTransactionProcessorTest::::createEndTransactionRequestHeader(int,boolean)", "136": "EndTransactionProcessorTest::::createEndTransactionRequestHeader(int,boolean)", "137": "EndTransactionProcessorTest::::createEndTransactionRequestHeader(int,boolean)", "138": "EndTransactionProcessorTest::::createEndTransactionRequestHeader(int,boolean)", "139": "EndTransactionProcessorTest::::createEndTransactionRequestHeader(int,boolean)", "140": "EndTransactionProcessorTest::::createEndTransactionRequestHeader(int,boolean)", "141": "EndTransactionProcessorTest::::createEndTransactionRequestHeader(int,boolean)", "142": "EndTransactionProcessorTest::::createEndTransactionRequestHeader(int,boolean)", "143": "EndTransactionProcessorTest::::createEndTransactionRequestHeader(int,boolean)", "144": "EndTransactionProcessorTest::::createEndTransactionRequestHeader(int,boolean)", "146": "EndTransactionProcessorTest::::createEndTransactionMsgCommand(int,boolean)", "147": "EndTransactionProcessorTest::::createEndTransactionMsgCommand(int,boolean)", "148": "EndTransactionProcessorTest::::createEndTransactionMsgCommand(int,boolean)", "149": "EndTransactionProcessorTest::::createEndTransactionMsgCommand(int,boolean)", "150": "EndTransactionProcessorTest::::createEndTransactionMsgCommand(int,boolean)", "151": "EndTransactionProcessorTest::::createEndTransactionMsgCommand(int,boolean)"}, "tests": [{"test_lines": [87, 95], "covered_lines": [48, 51, 52, 53, 58, 59, 60, 61, 62, 68, 101, 112, 127, 128, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 145, 147, 173, 174, 175, 176, 182, 188, 193, 198, 199, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 228, 229, 230, 231, 237, 238, 239, 267]}, {"test_lines": [97, 105], "covered_lines": [48, 51, 52, 53, 58, 59, 60, 61, 62, 68, 69, 80, 82, 83, 84, 86, 127, 128, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 145, 147, 173, 174, 175, 176, 182, 188, 193, 198, 199, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 228, 229, 230, 231, 237, 238, 239, 267]}, {"test_lines": [107, 112], "covered_lines": [48, 51, 52, 53, 58, 59, 60, 61, 62, 68, 69, 71, 73, 74, 75, 76]}, {"test_lines": [114, 120], "covered_lines": [48, 51, 52, 53, 58, 59, 60, 61, 62, 68, 69, 90, 92, 93, 94, 95, 127, 128, 151, 152, 153, 154, 155, 157, 159, 173, 174, 175, 176, 182, 188, 193, 198, 199]}]}, "/bernard/dataset_construction/prep/repos/RocketMQC/broker/src/main/java/org/apache/rocketmq/broker/processor/AdminBrokerProcessor.java": {"class_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "package org.apache.rocketmq.broker.processor;\n", "\n", "import com.alibaba.fastjson.JSON;\n", "import io.netty.channel.Channel;\n", "import io.netty.channel.ChannelHandlerContext;\n", "import org.apache.rocketmq.acl.AccessValidator;\n", "import org.apache.rocketmq.acl.plain.PlainAccessValidator;\n", "import org.apache.rocketmq.broker.BrokerController;\n", "import org.apache.rocketmq.broker.client.ClientChannelInfo;\n", "import org.apache.rocketmq.broker.client.ConsumerGroupInfo;\n", "import org.apache.rocketmq.broker.filter.ConsumerFilterData;\n", "import org.apache.rocketmq.broker.filter.ExpressionMessageFilter;\n", "import org.apache.rocketmq.common.topic.TopicValidator;\n", "import org.apache.rocketmq.broker.transaction.queue.TransactionalMessageUtil;\n", "import org.apache.rocketmq.common.AclConfig;\n", "import org.apache.rocketmq.common.MQVersion;\n", "import org.apache.rocketmq.common.MixAll;\n", "import org.apache.rocketmq.common.PlainAccessConfig;\n", "import org.apache.rocketmq.common.TopicConfig;\n", "import org.apache.rocketmq.common.UtilAll;\n", "import org.apache.rocketmq.common.admin.ConsumeStats;\n", "import org.apache.rocketmq.common.admin.OffsetWrapper;\n", "import org.apache.rocketmq.common.admin.TopicOffset;\n", "import org.apache.rocketmq.common.admin.TopicStatsTable;\n", "import org.apache.rocketmq.common.constant.LoggerName;\n", "import org.apache.rocketmq.common.message.MessageAccessor;\n", "import org.apache.rocketmq.common.message.MessageConst;\n", "import org.apache.rocketmq.common.message.MessageDecoder;\n", "import org.apache.rocketmq.common.message.MessageExt;\n", "import org.apache.rocketmq.common.message.MessageId;\n", "import org.apache.rocketmq.common.message.MessageQueue;\n", "import org.apache.rocketmq.common.protocol.RequestCode;\n", "import org.apache.rocketmq.common.protocol.ResponseCode;\n", "import org.apache.rocketmq.common.protocol.body.BrokerStatsData;\n", "import org.apache.rocketmq.common.protocol.body.BrokerStatsItem;\n", "import org.apache.rocketmq.common.protocol.body.Connection;\n", "import org.apache.rocketmq.common.protocol.body.ConsumeQueueData;\n", "import org.apache.rocketmq.common.protocol.body.ConsumeStatsList;\n", "import org.apache.rocketmq.common.protocol.body.ConsumerConnection;\n", "import org.apache.rocketmq.common.protocol.body.GroupList;\n", "import org.apache.rocketmq.common.protocol.body.KVTable;\n", "import org.apache.rocketmq.common.protocol.body.LockBatchRequestBody;\n", "import org.apache.rocketmq.common.protocol.body.LockBatchResponseBody;\n", "import org.apache.rocketmq.common.protocol.body.ProducerConnection;\n", "import org.apache.rocketmq.common.protocol.body.QueryConsumeQueueResponseBody;\n", "import org.apache.rocketmq.common.protocol.body.QueryConsumeTimeSpanBody;\n", "import org.apache.rocketmq.common.protocol.body.QueryCorrectionOffsetBody;\n", "import org.apache.rocketmq.common.protocol.body.QueueTimeSpan;\n", "import org.apache.rocketmq.common.protocol.body.TopicList;\n", "import org.apache.rocketmq.common.protocol.body.UnlockBatchRequestBody;\n", "import org.apache.rocketmq.common.protocol.header.CloneGroupOffsetRequestHeader;\n", "import org.apache.rocketmq.common.protocol.header.ConsumeMessageDirectlyResultRequestHeader;\n", "import org.apache.rocketmq.common.protocol.header.CreateAccessConfigRequestHeader;\n", "import org.apache.rocketmq.common.protocol.header.CreateTopicRequestHeader;\n", "import org.apache.rocketmq.common.protocol.header.DeleteAccessConfigRequestHeader;\n", "import org.apache.rocketmq.common.protocol.header.DeleteSubscriptionGroupRequestHeader;\n", "import org.apache.rocketmq.common.protocol.header.DeleteTopicRequestHeader;\n", "import org.apache.rocketmq.common.protocol.header.GetAllTopicConfigResponseHeader;\n", "import org.apache.rocketmq.common.protocol.header.GetBrokerAclConfigResponseHeader;\n", "import org.apache.rocketmq.common.protocol.header.GetBrokerClusterAclConfigResponseBody;\n", "import org.apache.rocketmq.common.protocol.header.GetBrokerClusterAclConfigResponseHeader;\n", "import org.apache.rocketmq.common.protocol.header.GetBrokerConfigResponseHeader;\n", "import org.apache.rocketmq.common.protocol.header.GetConsumeStatsInBrokerHeader;\n", "import org.apache.rocketmq.common.protocol.header.GetConsumeStatsRequestHeader;\n", "import org.apache.rocketmq.common.protocol.header.GetConsumerConnectionListRequestHeader;\n", "import org.apache.rocketmq.common.protocol.header.GetConsumerRunningInfoRequestHeader;\n", "import org.apache.rocketmq.common.protocol.header.GetConsumerStatusRequestHeader;\n", "import org.apache.rocketmq.common.protocol.header.GetEarliestMsgStoretimeRequestHeader;\n", "import org.apache.rocketmq.common.protocol.header.GetEarliestMsgStoretimeResponseHeader;\n", "import org.apache.rocketmq.common.protocol.header.GetMaxOffsetRequestHeader;\n", "import org.apache.rocketmq.common.protocol.header.GetMaxOffsetResponseHeader;\n", "import org.apache.rocketmq.common.protocol.header.GetMinOffsetRequestHeader;\n", "import org.apache.rocketmq.common.protocol.header.GetMinOffsetResponseHeader;\n", "import org.apache.rocketmq.common.protocol.header.GetProducerConnectionListRequestHeader;\n", "import org.apache.rocketmq.common.protocol.header.GetTopicStatsInfoRequestHeader;\n", "import org.apache.rocketmq.common.protocol.header.QueryConsumeQueueRequestHeader;\n", "import org.apache.rocketmq.common.protocol.header.QueryConsumeTimeSpanRequestHeader;\n", "import org.apache.rocketmq.common.protocol.header.QueryCorrectionOffsetHeader;\n", "import org.apache.rocketmq.common.protocol.header.QueryTopicConsumeByWhoRequestHeader;\n", "import org.apache.rocketmq.common.protocol.header.ResetOffsetRequestHeader;\n", "import org.apache.rocketmq.common.protocol.header.ResumeCheckHalfMessageRequestHeader;\n", "import org.apache.rocketmq.common.protocol.header.SearchOffsetRequestHeader;\n", "import org.apache.rocketmq.common.protocol.header.SearchOffsetResponseHeader;\n", "import org.apache.rocketmq.common.protocol.header.UpdateGlobalWhiteAddrsConfigRequestHeader;\n", "import org.apache.rocketmq.common.protocol.header.ViewBrokerStatsDataRequestHeader;\n", "import org.apache.rocketmq.common.protocol.header.filtersrv.RegisterFilterServerRequestHeader;\n", "import org.apache.rocketmq.common.protocol.header.filtersrv.RegisterFilterServerResponseHeader;\n", "import org.apache.rocketmq.common.protocol.heartbeat.SubscriptionData;\n", "import org.apache.rocketmq.common.stats.StatsItem;\n", "import org.apache.rocketmq.common.stats.StatsSnapshot;\n", "import org.apache.rocketmq.common.subscription.SubscriptionGroupConfig;\n", "import org.apache.rocketmq.filter.util.BitsArray;\n", "import org.apache.rocketmq.logging.InternalLogger;\n", "import org.apache.rocketmq.logging.InternalLoggerFactory;\n", "import org.apache.rocketmq.remoting.common.RemotingHelper;\n", "import org.apache.rocketmq.remoting.exception.RemotingCommandException;\n", "import org.apache.rocketmq.remoting.exception.RemotingTimeoutException;\n", "import org.apache.rocketmq.remoting.netty.AsyncNettyRequestProcessor;\n", "import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;\n", "import org.apache.rocketmq.remoting.protocol.LanguageCode;\n", "import org.apache.rocketmq.remoting.protocol.RemotingCommand;\n", "import org.apache.rocketmq.remoting.protocol.RemotingSerializable;\n", "import org.apache.rocketmq.store.ConsumeQueue;\n", "import org.apache.rocketmq.store.ConsumeQueueExt;\n", "import org.apache.rocketmq.store.DefaultMessageStore;\n", "import org.apache.rocketmq.store.MessageExtBrokerInner;\n", "import org.apache.rocketmq.store.MessageFilter;\n", "import org.apache.rocketmq.store.MessageStore;\n", "import org.apache.rocketmq.store.PutMessageResult;\n", "import org.apache.rocketmq.store.PutMessageStatus;\n", "import org.apache.rocketmq.store.SelectMappedBufferResult;\n", "\n", "import java.io.UnsupportedEncodingException;\n", "import java.net.UnknownHostException;\n", "import java.util.ArrayList;\n", "import java.util.HashMap;\n", "import java.util.HashSet;\n", "import java.util.Iterator;\n", "import java.util.List;\n", "import java.util.Map;\n", "import java.util.Properties;\n", "import java.util.Set;\n", "import java.util.concurrent.ConcurrentMap;\n", "\n", "public class AdminBrokerProcessor extends AsyncNettyRequestProcessor implements NettyRequestProcessor {\n", "    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);\n", "    private final BrokerController brokerController;\n", "\n", "    public AdminBrokerProcessor(final BrokerController brokerController) {\n", "        this.brokerController = brokerController;\n", "    }\n", "\n", "    @Override\n", "    public RemotingCommand processRequest(ChannelHandlerContext ctx,\n", "        RemotingCommand request) throws RemotingCommandException {\n", "        switch (request.getCode()) {\n", "            case RequestCode.UPDATE_AND_CREATE_TOPIC:\n", "                return this.updateAndCreateTopic(ctx, request);\n", "            case RequestCode.DELETE_TOPIC_IN_BROKER:\n", "                return this.deleteTopic(ctx, request);\n", "            case RequestCode.GET_ALL_TOPIC_CONFIG:\n", "                return this.getAllTopicConfig(ctx, request);\n", "            case RequestCode.UPDATE_BROKER_CONFIG:\n", "                return this.updateBrokerConfig(ctx, request);\n", "            case RequestCode.GET_BROKER_CONFIG:\n", "                return this.getBrokerConfig(ctx, request);\n", "            case RequestCode.SEARCH_OFFSET_BY_TIMESTAMP:\n", "                return this.searchOffsetByTimestamp(ctx, request);\n", "            case RequestCode.GET_MAX_OFFSET:\n", "                return this.getMaxOffset(ctx, request);\n", "            case RequestCode.GET_MIN_OFFSET:\n", "                return this.getMinOffset(ctx, request);\n", "            case RequestCode.GET_EARLIEST_MSG_STORETIME:\n", "                return this.getEarliestMsgStoretime(ctx, request);\n", "            case RequestCode.GET_BROKER_RUNTIME_INFO:\n", "                return this.getBrokerRuntimeInfo(ctx, request);\n", "            case RequestCode.LOCK_BATCH_MQ:\n", "                return this.lockBatchMQ(ctx, request);\n", "            case RequestCode.UNLOCK_BATCH_MQ:\n", "                return this.unlockBatchMQ(ctx, request);\n", "            case RequestCode.UPDATE_AND_CREATE_SUBSCRIPTIONGROUP:\n", "                return this.updateAndCreateSubscriptionGroup(ctx, request);\n", "            case RequestCode.GET_ALL_SUBSCRIPTIONGROUP_CONFIG:\n", "                return this.getAllSubscriptionGroup(ctx, request);\n", "            case RequestCode.DELETE_SUBSCRIPTIONGROUP:\n", "                return this.deleteSubscriptionGroup(ctx, request);\n", "            case RequestCode.GET_TOPIC_STATS_INFO:\n", "                return this.getTopicStatsInfo(ctx, request);\n", "            case RequestCode.GET_CONSUMER_CONNECTION_LIST:\n", "                return this.getConsumerConnectionList(ctx, request);\n", "            case RequestCode.GET_PRODUCER_CONNECTION_LIST:\n", "                return this.getProducerConnectionList(ctx, request);\n", "            case RequestCode.GET_CONSUME_STATS:\n", "                return this.getConsumeStats(ctx, request);\n", "            case RequestCode.GET_ALL_CONSUMER_OFFSET:\n", "                return this.getAllConsumerOffset(ctx, request);\n", "            case RequestCode.GET_ALL_DELAY_OFFSET:\n", "                return this.getAllDelayOffset(ctx, request);\n", "            case RequestCode.INVOKE_BROKER_TO_RESET_OFFSET:\n", "                return this.resetOffset(ctx, request);\n", "            case RequestCode.INVOKE_BROKER_TO_GET_CONSUMER_STATUS:\n", "                return this.getConsumerStatus(ctx, request);\n", "            case RequestCode.QUERY_TOPIC_CONSUME_BY_WHO:\n", "                return this.queryTopicConsumeByWho(ctx, request);\n", "            case RequestCode.REGISTER_FILTER_SERVER:\n", "                return this.registerFilterServer(ctx, request);\n", "            case RequestCode.QUERY_CONSUME_TIME_SPAN:\n", "                return this.queryConsumeTimeSpan(ctx, request);\n", "            case RequestCode.GET_SYSTEM_TOPIC_LIST_FROM_BROKER:\n", "                return this.getSystemTopicListFromBroker(ctx, request);\n", "            case RequestCode.CLEAN_EXPIRED_CONSUMEQUEUE:\n", "                return this.cleanExpiredConsumeQueue();\n", "            case RequestCode.CLEAN_UNUSED_TOPIC:\n", "                return this.cleanUnusedTopic();\n", "            case RequestCode.GET_CONSUMER_RUNNING_INFO:\n", "                return this.getConsumerRunningInfo(ctx, request);\n", "            case RequestCode.QUERY_CORRECTION_OFFSET:\n", "                return this.queryCorrectionOffset(ctx, request);\n", "            case RequestCode.CONSUME_MESSAGE_DIRECTLY:\n", "                return this.consumeMessageDirectly(ctx, request);\n", "            case RequestCode.CLONE_GROUP_OFFSET:\n", "                return this.cloneGroupOffset(ctx, request);\n", "            case RequestCode.VIEW_BROKER_STATS_DATA:\n", "                return ViewBrokerStatsData(ctx, request);\n", "            case RequestCode.GET_BROKER_CONSUME_STATS:\n", "                return fetchAllConsumeStatsInBroker(ctx, request);\n", "            case RequestCode.QUERY_CONSUME_QUEUE:\n", "                return queryConsumeQueue(ctx, request);\n", "            case RequestCode.UPDATE_AND_CREATE_ACL_CONFIG:\n", "                return updateAndCreateAccessConfig(ctx, request);\n", "            case RequestCode.DELETE_ACL_CONFIG:\n", "                return deleteAccessConfig(ctx, request);\n", "            case RequestCode.GET_BROKER_CLUSTER_ACL_INFO:\n", "                return getBrokerAclConfigVersion(ctx, request);\n", "            case RequestCode.UPDATE_GLOBAL_WHITE_ADDRS_CONFIG:\n", "                return updateGlobalWhiteAddrsConfig(ctx, request);\n", "            case RequestCode.RESUME_CHECK_HALF_MESSAGE:\n", "                return resumeCheckHalfMessage(ctx, request);\n", "            case RequestCode.GET_BROKER_CLUSTER_ACL_CONFIG:\n", "                return getBrokerClusterAclConfig(ctx, request);\n", "            default:\n", "                break;\n", "        }\n", "\n", "        return null;\n", "    }\n", "\n", "    @Override\n", "    public boolean rejectRequest() {\n", "        return false;\n", "    }\n", "\n", "    private synchronized RemotingCommand updateAndCreateTopic(ChannelHandlerContext ctx,\n", "        RemotingCommand request) throws RemotingCommandException {\n", "        final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n", "        final CreateTopicRequestHeader requestHeader =\n", "            (CreateTopicRequestHeader) request.decodeCommandCustomHeader(CreateTopicRequestHeader.class);\n", "        log.info(\"updateAndCreateTopic called by {}\", RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n", "\n", "        String topic = requestHeader.getTopic();\n", "\n", "        if (!TopicValidator.validateTopic(topic, response)) {\n", "            return response;\n", "        }\n", "        if (TopicValidator.isSystemTopic(topic, response)) {\n", "            return response;\n", "        }\n", "\n", "        TopicConfig topicConfig = new TopicConfig(topic);\n", "        topicConfig.setReadQueueNums(requestHeader.getReadQueueNums());\n", "        topicConfig.setWriteQueueNums(requestHeader.getWriteQueueNums());\n", "        topicConfig.setTopicFilterType(requestHeader.getTopicFilterTypeEnum());\n", "        topicConfig.setPerm(requestHeader.getPerm());\n", "        topicConfig.setTopicSysFlag(requestHeader.getTopicSysFlag() == null ? 0 : requestHeader.getTopicSysFlag());\n", "\n", "        this.brokerController.getTopicConfigManager().updateTopicConfig(topicConfig);\n", "\n", "        this.brokerController.registerIncrementBrokerData(topicConfig, this.brokerController.getTopicConfigManager().getDataVersion());\n", "\n", "        response.setCode(ResponseCode.SUCCESS);\n", "        return response;\n", "    }\n", "\n", "    private synchronized RemotingCommand deleteTopic(ChannelHandlerContext ctx,\n", "        RemotingCommand request) throws RemotingCommandException {\n", "        final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n", "        DeleteTopicRequestHeader requestHeader =\n", "            (DeleteTopicRequestHeader) request.decodeCommandCustomHeader(DeleteTopicRequestHeader.class);\n", "\n", "        log.info(\"deleteTopic called by {}\", RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n", "\n", "        String topic = requestHeader.getTopic();\n", "        if (!TopicValidator.validateTopic(topic, response)) {\n", "            return response;\n", "        }\n", "        if (TopicValidator.isSystemTopic(topic, response)) {\n", "            return response;\n", "        }\n", "\n", "        this.brokerController.getTopicConfigManager().deleteTopicConfig(topic);\n", "        this.brokerController.getMessageStore()\n", "            .cleanUnusedTopic(this.brokerController.getTopicConfigManager().getTopicConfigTable().keySet());\n", "        if (this.brokerController.getBrokerConfig().isAutoDeleteUnusedStats()) {\n", "            this.brokerController.getBrokerStatsManager().onTopicDeleted(requestHeader.getTopic());\n", "        }\n", "        response.setCode(ResponseCode.SUCCESS);\n", "        response.setRemark(null);\n", "        return response;\n", "    }\n", "\n", "    private synchronized RemotingCommand updateAndCreateAccessConfig(ChannelHandlerContext ctx,\n", "        RemotingCommand request) throws RemotingCommandException {\n", "        final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n", "\n", "        final CreateAccessConfigRequestHeader requestHeader =\n", "            (CreateAccessConfigRequestHeader) request.decodeCommandCustomHeader(CreateAccessConfigRequestHeader.class);\n", "\n", "        PlainAccessConfig accessConfig = new PlainAccessConfig();\n", "        accessConfig.setAccessKey(requestHeader.getAccessKey());\n", "        accessConfig.setSecretKey(requestHeader.getSecretKey());\n", "        accessConfig.setWhiteRemoteAddress(requestHeader.getWhiteRemoteAddress());\n", "        accessConfig.setDefaultTopicPerm(requestHeader.getDefaultTopicPerm());\n", "        accessConfig.setDefaultGroupPerm(requestHeader.getDefaultGroupPerm());\n", "        accessConfig.setTopicPerms(UtilAll.string2List(requestHeader.getTopicPerms(), \",\"));\n", "        accessConfig.setGroupPerms(UtilAll.string2List(requestHeader.getGroupPerms(), \",\"));\n", "        accessConfig.setAdmin(requestHeader.isAdmin());\n", "        try {\n", "\n", "            AccessValidator accessValidator = this.brokerController.getAccessValidatorMap().get(PlainAccessValidator.class);\n", "            if (accessValidator.updateAccessConfig(accessConfig)) {\n", "                response.setCode(ResponseCode.SUCCESS);\n", "                response.setOpaque(request.getOpaque());\n", "                response.markResponseType();\n", "                response.setRemark(null);\n", "                ctx.writeAndFlush(response);\n", "            } else {\n", "                String errorMsg = \"The accesskey[\" + requestHeader.getAccessKey() + \"] corresponding to accessConfig has been updated failed.\";\n", "                log.warn(errorMsg);\n", "                response.setCode(ResponseCode.UPDATE_AND_CREATE_ACL_CONFIG_FAILED);\n", "                response.setRemark(errorMsg);\n", "                return response;\n", "            }\n", "        } catch (Exception e) {\n", "            log.error(\"Failed to generate a proper update accessvalidator response\", e);\n", "            response.setCode(ResponseCode.UPDATE_AND_CREATE_ACL_CONFIG_FAILED);\n", "            response.setRemark(e.getMessage());\n", "            return response;\n", "        }\n", "\n", "        return null;\n", "    }\n", "\n", "    private synchronized RemotingCommand deleteAccessConfig(ChannelHandlerContext ctx,\n", "        RemotingCommand request) throws RemotingCommandException {\n", "        final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n", "\n", "        final DeleteAccessConfigRequestHeader requestHeader =\n", "            (DeleteAccessConfigRequestHeader) request.decodeCommandCustomHeader(DeleteAccessConfigRequestHeader.class);\n", "        log.info(\"DeleteAccessConfig called by {}\", RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n", "\n", "        try {\n", "            String accessKey = requestHeader.getAccessKey();\n", "            AccessValidator accessValidator = this.brokerController.getAccessValidatorMap().get(PlainAccessValidator.class);\n", "            if (accessValidator.deleteAccessConfig(accessKey)) {\n", "                response.setCode(ResponseCode.SUCCESS);\n", "                response.setOpaque(request.getOpaque());\n", "                response.markResponseType();\n", "                response.setRemark(null);\n", "                ctx.writeAndFlush(response);\n", "            } else {\n", "                String errorMsg = \"The accesskey[\" + requestHeader.getAccessKey() + \"] corresponding to accessConfig has been deleted failed.\";\n", "                log.warn(errorMsg);\n", "                response.setCode(ResponseCode.DELETE_ACL_CONFIG_FAILED);\n", "                response.setRemark(errorMsg);\n", "                return response;\n", "            }\n", "\n", "        } catch (Exception e) {\n", "            log.error(\"Failed to generate a proper delete accessvalidator response\", e);\n", "            response.setCode(ResponseCode.DELETE_ACL_CONFIG_FAILED);\n", "            response.setRemark(e.getMessage());\n", "            return response;\n", "        }\n", "\n", "        return null;\n", "    }\n", "\n", "    private synchronized RemotingCommand updateGlobalWhiteAddrsConfig(ChannelHandlerContext ctx,\n", "        RemotingCommand request) throws RemotingCommandException {\n", "\n", "        final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n", "\n", "        final UpdateGlobalWhiteAddrsConfigRequestHeader requestHeader =\n", "            (UpdateGlobalWhiteAddrsConfigRequestHeader) request.decodeCommandCustomHeader(UpdateGlobalWhiteAddrsConfigRequestHeader.class);\n", "\n", "        try {\n", "            AccessValidator accessValidator = this.brokerController.getAccessValidatorMap().get(PlainAccessValidator.class);\n", "            if (accessValidator.updateGlobalWhiteAddrsConfig(UtilAll.string2List(requestHeader.getGlobalWhiteAddrs(), \",\"))) {\n", "                response.setCode(ResponseCode.SUCCESS);\n", "                response.setOpaque(request.getOpaque());\n", "                response.markResponseType();\n", "                response.setRemark(null);\n", "                ctx.writeAndFlush(response);\n", "            } else {\n", "                String errorMsg = \"The globalWhiteAddresses[\" + requestHeader.getGlobalWhiteAddrs() + \"] has been updated failed.\";\n", "                log.warn(errorMsg);\n", "                response.setCode(ResponseCode.UPDATE_GLOBAL_WHITE_ADDRS_CONFIG_FAILED);\n", "                response.setRemark(errorMsg);\n", "                return response;\n", "            }\n", "        } catch (Exception e) {\n", "            log.error(\"Failed to generate a proper update globalWhiteAddresses response\", e);\n", "            response.setCode(ResponseCode.UPDATE_GLOBAL_WHITE_ADDRS_CONFIG_FAILED);\n", "            response.setRemark(e.getMessage());\n", "            return response;\n", "        }\n", "\n", "        return null;\n", "    }\n", "\n", "    private RemotingCommand getBrokerAclConfigVersion(ChannelHandlerContext ctx, RemotingCommand request) {\n", "\n", "        final RemotingCommand response = RemotingCommand.createResponseCommand(GetBrokerAclConfigResponseHeader.class);\n", "\n", "        final GetBrokerAclConfigResponseHeader responseHeader = (GetBrokerAclConfigResponseHeader)response.readCustomHeader();\n", "\n", "        try {\n", "            AccessValidator accessValidator = this.brokerController.getAccessValidatorMap().get(PlainAccessValidator.class);\n", "\n", "            responseHeader.setVersion(accessValidator.getAclConfigVersion());\n", "            responseHeader.setBrokerAddr(this.brokerController.getBrokerAddr());\n", "            responseHeader.setBrokerName(this.brokerController.getBrokerConfig().getBrokerName());\n", "            responseHeader.setClusterName(this.brokerController.getBrokerConfig().getBrokerClusterName());\n", "\n", "            response.setCode(ResponseCode.SUCCESS);\n", "            response.setRemark(null);\n", "            return response;\n", "        } catch (Exception e) {\n", "            log.error(\"Failed to generate a proper getBrokerAclConfigVersion response\", e);\n", "        }\n", "\n", "        return null;\n", "    }\n", "\n", "    private RemotingCommand getBrokerClusterAclConfig(ChannelHandlerContext ctx, RemotingCommand request) {\n", "\n", "        final RemotingCommand response = RemotingCommand.createResponseCommand(GetBrokerClusterAclConfigResponseHeader.class);\n", "\n", "        try {\n", "            AccessValidator accessValidator = this.brokerController.getAccessValidatorMap().get(PlainAccessValidator.class);\n", "            GetBrokerClusterAclConfigResponseBody body = new GetBrokerClusterAclConfigResponseBody();\n", "            AclConfig aclConfig = accessValidator.getAllAclConfig();\n", "            body.setGlobalWhiteAddrs(aclConfig.getGlobalWhiteAddrs());\n", "            body.setPlainAccessConfigs(aclConfig.getPlainAccessConfigs());\n", "            response.setCode(ResponseCode.SUCCESS);\n", "            response.setBody(body.encode());\n", "            response.setRemark(null);\n", "            return response;\n", "        } catch (Exception e) {\n", "            log.error(\"Failed to generate a proper getBrokerClusterAclConfig response\", e);\n", "        }\n", "\n", "        return null;\n", "    }\n", "\n", "    private RemotingCommand getAllTopicConfig(ChannelHandlerContext ctx, RemotingCommand request) {\n", "        final RemotingCommand response = RemotingCommand.createResponseCommand(GetAllTopicConfigResponseHeader.class);\n", "        // final GetAllTopicConfigResponseHeader responseHeader =\n", "        // (GetAllTopicConfigResponseHeader) response.readCustomHeader();\n", "\n", "        String content = this.brokerController.getTopicConfigManager().encode();\n", "        if (content != null && content.length() > 0) {\n", "            try {\n", "                response.setBody(content.getBytes(MixAll.DEFAULT_CHARSET));\n", "            } catch (UnsupportedEncodingException e) {\n", "                log.error(\"\", e);\n", "\n", "                response.setCode(ResponseCode.SYSTEM_ERROR);\n", "                response.setRemark(\"UnsupportedEncodingException \" + e);\n", "                return response;\n", "            }\n", "        } else {\n", "            log.error(\"No topic in this broker, client: {}\", ctx.channel().remoteAddress());\n", "            response.setCode(ResponseCode.SYSTEM_ERROR);\n", "            response.setRemark(\"No topic in this broker\");\n", "            return response;\n", "        }\n", "\n", "        response.setCode(ResponseCode.SUCCESS);\n", "        response.setRemark(null);\n", "\n", "        return response;\n", "    }\n", "\n", "    private synchronized RemotingCommand updateBrokerConfig(ChannelHandlerContext ctx, RemotingCommand request) {\n", "        final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n", "\n", "        log.info(\"updateBrokerConfig called by {}\", RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n", "\n", "        byte[] body = request.getBody();\n", "        if (body != null) {\n", "            try {\n", "                String bodyStr = new String(body, MixAll.DEFAULT_CHARSET);\n", "                Properties properties = MixAll.string2Properties(bodyStr);\n", "                if (properties != null) {\n", "                    log.info(\"updateBrokerConfig, new config: [{}] client: {} \", properties, ctx.channel().remoteAddress());\n", "                    this.brokerController.getConfiguration().update(properties);\n", "                    if (properties.containsKey(\"brokerPermission\")) {\n", "                        this.brokerController.getTopicConfigManager().getDataVersion().nextVersion();\n", "                        this.brokerController.registerBrokerAll(false, false, true);\n", "                    }\n", "                } else {\n", "                    log.error(\"string2Properties error\");\n", "                    response.setCode(ResponseCode.SYSTEM_ERROR);\n", "                    response.setRemark(\"string2Properties error\");\n", "                    return response;\n", "                }\n", "            } catch (UnsupportedEncodingException e) {\n", "                log.error(\"\", e);\n", "                response.setCode(ResponseCode.SYSTEM_ERROR);\n", "                response.setRemark(\"UnsupportedEncodingException \" + e);\n", "                return response;\n", "            }\n", "        }\n", "\n", "        response.setCode(ResponseCode.SUCCESS);\n", "        response.setRemark(null);\n", "        return response;\n", "    }\n", "\n", "    private RemotingCommand getBrokerConfig(ChannelHandlerContext ctx, RemotingCommand request) {\n", "\n", "        final RemotingCommand response = RemotingCommand.createResponseCommand(GetBrokerConfigResponseHeader.class);\n", "        final GetBrokerConfigResponseHeader responseHeader = (GetBrokerConfigResponseHeader) response.readCustomHeader();\n", "\n", "        String content = this.brokerController.getConfiguration().getAllConfigsFormatString();\n", "        if (content != null && content.length() > 0) {\n", "            try {\n", "                response.setBody(content.getBytes(MixAll.DEFAULT_CHARSET));\n", "            } catch (UnsupportedEncodingException e) {\n", "                log.error(\"\", e);\n", "\n", "                response.setCode(ResponseCode.SYSTEM_ERROR);\n", "                response.setRemark(\"UnsupportedEncodingException \" + e);\n", "                return response;\n", "            }\n", "        }\n", "\n", "        responseHeader.setVersion(this.brokerController.getConfiguration().getDataVersionJson());\n", "\n", "        response.setCode(ResponseCode.SUCCESS);\n", "        response.setRemark(null);\n", "        return response;\n", "    }\n", "\n", "    private RemotingCommand searchOffsetByTimestamp(ChannelHandlerContext ctx,\n", "        RemotingCommand request) throws RemotingCommandException {\n", "        final RemotingCommand response = RemotingCommand.createResponseCommand(SearchOffsetResponseHeader.class);\n", "        final SearchOffsetResponseHeader responseHeader = (SearchOffsetResponseHeader) response.readCustomHeader();\n", "        final SearchOffsetRequestHeader requestHeader =\n", "            (SearchOffsetRequestHeader) request.decodeCommandCustomHeader(SearchOffsetRequestHeader.class);\n", "\n", "        long offset = this.brokerController.getMessageStore().getOffsetInQueueByTime(requestHeader.getTopic(), requestHeader.getQueueId(),\n", "            requestHeader.getTimestamp());\n", "\n", "        responseHeader.setOffset(offset);\n", "\n", "        response.setCode(ResponseCode.SUCCESS);\n", "        response.setRemark(null);\n", "        return response;\n", "    }\n", "\n", "    private RemotingCommand getMaxOffset(ChannelHandlerContext ctx,\n", "        RemotingCommand request) throws RemotingCommandException {\n", "        final RemotingCommand response = RemotingCommand.createResponseCommand(GetMaxOffsetResponseHeader.class);\n", "        final GetMaxOffsetResponseHeader responseHeader = (GetMaxOffsetResponseHeader) response.readCustomHeader();\n", "        final GetMaxOffsetRequestHeader requestHeader =\n", "            (GetMaxOffsetRequestHeader) request.decodeCommandCustomHeader(GetMaxOffsetRequestHeader.class);\n", "\n", "        long offset = this.brokerController.getMessageStore().getMaxOffsetInQueue(requestHeader.getTopic(), requestHeader.getQueueId());\n", "\n", "        responseHeader.setOffset(offset);\n", "\n", "        response.setCode(ResponseCode.SUCCESS);\n", "        response.setRemark(null);\n", "        return response;\n", "    }\n", "\n", "    private RemotingCommand getMinOffset(ChannelHandlerContext ctx,\n", "        RemotingCommand request) throws RemotingCommandException {\n", "        final RemotingCommand response = RemotingCommand.createResponseCommand(GetMinOffsetResponseHeader.class);\n", "        final GetMinOffsetResponseHeader responseHeader = (GetMinOffsetResponseHeader) response.readCustomHeader();\n", "        final GetMinOffsetRequestHeader requestHeader =\n", "            (GetMinOffsetRequestHeader) request.decodeCommandCustomHeader(GetMinOffsetRequestHeader.class);\n", "\n", "        long offset = this.brokerController.getMessageStore().getMinOffsetInQueue(requestHeader.getTopic(), requestHeader.getQueueId());\n", "\n", "        responseHeader.setOffset(offset);\n", "        response.setCode(ResponseCode.SUCCESS);\n", "        response.setRemark(null);\n", "        return response;\n", "    }\n", "\n", "    private RemotingCommand getEarliestMsgStoretime(ChannelHandlerContext ctx,\n", "        RemotingCommand request) throws RemotingCommandException {\n", "        final RemotingCommand response = RemotingCommand.createResponseCommand(GetEarliestMsgStoretimeResponseHeader.class);\n", "        final GetEarliestMsgStoretimeResponseHeader responseHeader = (GetEarliestMsgStoretimeResponseHeader) response.readCustomHeader();\n", "        final GetEarliestMsgStoretimeRequestHeader requestHeader =\n", "            (GetEarliestMsgStoretimeRequestHeader) request.decodeCommandCustomHeader(GetEarliestMsgStoretimeRequestHeader.class);\n", "\n", "        long timestamp =\n", "            this.brokerController.getMessageStore().getEarliestMessageTime(requestHeader.getTopic(), requestHeader.getQueueId());\n", "\n", "        responseHeader.setTimestamp(timestamp);\n", "        response.setCode(ResponseCode.SUCCESS);\n", "        response.setRemark(null);\n", "        return response;\n", "    }\n", "\n", "    private RemotingCommand getBrokerRuntimeInfo(ChannelHandlerContext ctx, RemotingCommand request) {\n", "        final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n", "\n", "        HashMap<String, String> runtimeInfo = this.prepareRuntimeInfo();\n", "        KVTable kvTable = new KVTable();\n", "        kvTable.setTable(runtimeInfo);\n", "\n", "        byte[] body = kvTable.encode();\n", "        response.setBody(body);\n", "        response.setCode(ResponseCode.SUCCESS);\n", "        response.setRemark(null);\n", "        return response;\n", "    }\n", "\n", "    private RemotingCommand lockBatchMQ(ChannelHandlerContext ctx,\n", "        RemotingCommand request) throws RemotingCommandException {\n", "        final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n", "        LockBatchRequestBody requestBody = LockBatchRequestBody.decode(request.getBody(), LockBatchRequestBody.class);\n", "\n", "        Set<MessageQueue> lockOKMQSet = this.brokerController.getRebalanceLockManager().tryLockBatch(\n", "            requestBody.getConsumerGroup(),\n", "            requestBody.getMqSet(),\n", "            requestBody.getClientId());\n", "\n", "        LockBatchResponseBody responseBody = new LockBatchResponseBody();\n", "        responseBody.setLockOKMQSet(lockOKMQSet);\n", "\n", "        response.setBody(responseBody.encode());\n", "        response.setCode(ResponseCode.SUCCESS);\n", "        response.setRemark(null);\n", "        return response;\n", "    }\n", "\n", "    private RemotingCommand unlockBatchMQ(ChannelHandlerContext ctx,\n", "        RemotingCommand request) throws RemotingCommandException {\n", "        final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n", "        UnlockBatchRequestBody requestBody = UnlockBatchRequestBody.decode(request.getBody(), UnlockBatchRequestBody.class);\n", "\n", "        this.brokerController.getRebalanceLockManager().unlockBatch(\n", "            requestBody.getConsumerGroup(),\n", "            requestBody.getMqSet(),\n", "            requestBody.getClientId());\n", "\n", "        response.setCode(ResponseCode.SUCCESS);\n", "        response.setRemark(null);\n", "        return response;\n", "    }\n", "\n", "    private RemotingCommand updateAndCreateSubscriptionGroup(ChannelHandlerContext ctx, RemotingCommand request)\n", "        throws RemotingCommandException {\n", "        final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n", "\n", "        log.info(\"updateAndCreateSubscriptionGroup called by {}\", RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n", "\n", "        SubscriptionGroupConfig config = RemotingSerializable.decode(request.getBody(), SubscriptionGroupConfig.class);\n", "        if (config != null) {\n", "            this.brokerController.getSubscriptionGroupManager().updateSubscriptionGroupConfig(config);\n", "        }\n", "\n", "        response.setCode(ResponseCode.SUCCESS);\n", "        response.setRemark(null);\n", "        return response;\n", "    }\n", "\n", "    private RemotingCommand getAllSubscriptionGroup(ChannelHandlerContext ctx,\n", "        RemotingCommand request) throws RemotingCommandException {\n", "        final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n", "        String content = this.brokerController.getSubscriptionGroupManager().encode();\n", "        if (content != null && content.length() > 0) {\n", "            try {\n", "                response.setBody(content.getBytes(MixAll.DEFAULT_CHARSET));\n", "            } catch (UnsupportedEncodingException e) {\n", "                log.error(\"\", e);\n", "\n", "                response.setCode(ResponseCode.SYSTEM_ERROR);\n", "                response.setRemark(\"UnsupportedEncodingException \" + e);\n", "                return response;\n", "            }\n", "        } else {\n", "            log.error(\"No subscription group in this broker, client:{} \", ctx.channel().remoteAddress());\n", "            response.setCode(ResponseCode.SYSTEM_ERROR);\n", "            response.setRemark(\"No subscription group in this broker\");\n", "            return response;\n", "        }\n", "\n", "        response.setCode(ResponseCode.SUCCESS);\n", "        response.setRemark(null);\n", "\n", "        return response;\n", "    }\n", "\n", "    private RemotingCommand deleteSubscriptionGroup(ChannelHandlerContext ctx,\n", "        RemotingCommand request) throws RemotingCommandException {\n", "        final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n", "        DeleteSubscriptionGroupRequestHeader requestHeader =\n", "            (DeleteSubscriptionGroupRequestHeader) request.decodeCommandCustomHeader(DeleteSubscriptionGroupRequestHeader.class);\n", "\n", "        log.info(\"deleteSubscriptionGroup called by {}\", RemotingHelper.parseChannelRemoteAddr(ctx.channel()));\n", "\n", "        this.brokerController.getSubscriptionGroupManager().deleteSubscriptionGroupConfig(requestHeader.getGroupName());\n", "\n", "        if (this.brokerController.getBrokerConfig().isAutoDeleteUnusedStats()) {\n", "            this.brokerController.getBrokerStatsManager().onGroupDeleted(requestHeader.getGroupName());\n", "        }\n", "        response.setCode(ResponseCode.SUCCESS);\n", "        response.setRemark(null);\n", "        return response;\n", "    }\n", "\n", "    private RemotingCommand getTopicStatsInfo(ChannelHandlerContext ctx,\n", "        RemotingCommand request) throws RemotingCommandException {\n", "        final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n", "        final GetTopicStatsInfoRequestHeader requestHeader =\n", "            (GetTopicStatsInfoRequestHeader) request.decodeCommandCustomHeader(GetTopicStatsInfoRequestHeader.class);\n", "\n", "        final String topic = requestHeader.getTopic();\n", "        TopicConfig topicConfig = this.brokerController.getTopicConfigManager().selectTopicConfig(topic);\n", "        if (null == topicConfig) {\n", "            response.setCode(ResponseCode.TOPIC_NOT_EXIST);\n", "            response.setRemark(\"topic[\" + topic + \"] not exist\");\n", "            return response;\n", "        }\n", "\n", "        TopicStatsTable topicStatsTable = new TopicStatsTable();\n", "        for (int i = 0; i < topicConfig.getWriteQueueNums(); i++) {\n", "            MessageQueue mq = new MessageQueue();\n", "            mq.setTopic(topic);\n", "            mq.setBrokerName(this.brokerController.getBrokerConfig().getBrokerName());\n", "            mq.setQueueId(i);\n", "\n", "            TopicOffset topicOffset = new TopicOffset();\n", "            long min = this.brokerController.getMessageStore().getMinOffsetInQueue(topic, i);\n", "            if (min < 0)\n", "                min = 0;\n", "\n", "            long max = this.brokerController.getMessageStore().getMaxOffsetInQueue(topic, i);\n", "            if (max < 0)\n", "                max = 0;\n", "\n", "            long timestamp = 0;\n", "            if (max > 0) {\n", "                timestamp = this.brokerController.getMessageStore().getMessageStoreTimeStamp(topic, i, max - 1);\n", "            }\n", "\n", "            topicOffset.setMinOffset(min);\n", "            topicOffset.setMaxOffset(max);\n", "            topicOffset.setLastUpdateTimestamp(timestamp);\n", "\n", "            topicStatsTable.getOffsetTable().put(mq, topicOffset);\n", "        }\n", "\n", "        byte[] body = topicStatsTable.encode();\n", "        response.setBody(body);\n", "        response.setCode(ResponseCode.SUCCESS);\n", "        response.setRemark(null);\n", "        return response;\n", "    }\n", "\n", "    private RemotingCommand getConsumerConnectionList(ChannelHandlerContext ctx,\n", "        RemotingCommand request) throws RemotingCommandException {\n", "        final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n", "        final GetConsumerConnectionListRequestHeader requestHeader =\n", "            (GetConsumerConnectionListRequestHeader) request.decodeCommandCustomHeader(GetConsumerConnectionListRequestHeader.class);\n", "\n", "        ConsumerGroupInfo consumerGroupInfo =\n", "            this.brokerController.getConsumerManager().getConsumerGroupInfo(requestHeader.getConsumerGroup());\n", "        if (consumerGroupInfo != null) {\n", "            ConsumerConnection bodydata = new ConsumerConnection();\n", "            bodydata.setConsumeFromWhere(consumerGroupInfo.getConsumeFromWhere());\n", "            bodydata.setConsumeType(consumerGroupInfo.getConsumeType());\n", "            bodydata.setMessageModel(consumerGroupInfo.getMessageModel());\n", "            bodydata.getSubscriptionTable().putAll(consumerGroupInfo.getSubscriptionTable());\n", "\n", "            Iterator<Map.Entry<Channel, ClientChannelInfo>> it = consumerGroupInfo.getChannelInfoTable().entrySet().iterator();\n", "            while (it.hasNext()) {\n", "                ClientChannelInfo info = it.next().getValue();\n", "                Connection connection = new Connection();\n", "                connection.setClientId(info.getClientId());\n", "                connection.setLanguage(info.getLanguage());\n", "                connection.setVersion(info.getVersion());\n", "                connection.setClientAddr(RemotingHelper.parseChannelRemoteAddr(info.getChannel()));\n", "\n", "                bodydata.getConnectionSet().add(connection);\n", "            }\n", "\n", "            byte[] body = bodydata.encode();\n", "            response.setBody(body);\n", "            response.setCode(ResponseCode.SUCCESS);\n", "            response.setRemark(null);\n", "\n", "            return response;\n", "        }\n", "\n", "        response.setCode(ResponseCode.CONSUMER_NOT_ONLINE);\n", "        response.setRemark(\"the consumer group[\" + requestHeader.getConsumerGroup() + \"] not online\");\n", "        return response;\n", "    }\n", "\n", "    private RemotingCommand getProducerConnectionList(ChannelHandlerContext ctx,\n", "        RemotingCommand request) throws RemotingCommandException {\n", "        final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n", "        final GetProducerConnectionListRequestHeader requestHeader =\n", "            (GetProducerConnectionListRequestHeader) request.decodeCommandCustomHeader(GetProducerConnectionListRequestHeader.class);\n", "\n", "        ProducerConnection bodydata = new ProducerConnection();\n", "        Map<Channel, ClientChannelInfo> channelInfoHashMap =\n", "            this.brokerController.getProducerManager().getGroupChannelTable().get(requestHeader.getProducerGroup());\n", "        if (channelInfoHashMap != null) {\n", "            Iterator<Map.Entry<Channel, ClientChannelInfo>> it = channelInfoHashMap.entrySet().iterator();\n", "            while (it.hasNext()) {\n", "                ClientChannelInfo info = it.next().getValue();\n", "                Connection connection = new Connection();\n", "                connection.setClientId(info.getClientId());\n", "                connection.setLanguage(info.getLanguage());\n", "                connection.setVersion(info.getVersion());\n", "                connection.setClientAddr(RemotingHelper.parseChannelRemoteAddr(info.getChannel()));\n", "\n", "                bodydata.getConnectionSet().add(connection);\n", "            }\n", "\n", "            byte[] body = bodydata.encode();\n", "            response.setBody(body);\n", "            response.setCode(ResponseCode.SUCCESS);\n", "            response.setRemark(null);\n", "            return response;\n", "        }\n", "\n", "        response.setCode(ResponseCode.SYSTEM_ERROR);\n", "        response.setRemark(\"the producer group[\" + requestHeader.getProducerGroup() + \"] not exist\");\n", "        return response;\n", "    }\n", "\n", "    private RemotingCommand getConsumeStats(ChannelHandlerContext ctx,\n", "        RemotingCommand request) throws RemotingCommandException {\n", "        final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n", "        final GetConsumeStatsRequestHeader requestHeader =\n", "            (GetConsumeStatsRequestHeader) request.decodeCommandCustomHeader(GetConsumeStatsRequestHeader.class);\n", "\n", "        ConsumeStats consumeStats = new ConsumeStats();\n", "\n", "        Set<String> topics = new HashSet<String>();\n", "        if (UtilAll.isBlank(requestHeader.getTopic())) {\n", "            topics = this.brokerController.getConsumerOffsetManager().whichTopicByConsumer(requestHeader.getConsumerGroup());\n", "        } else {\n", "            topics.add(requestHeader.getTopic());\n", "        }\n", "\n", "        for (String topic : topics) {\n", "            TopicConfig topicConfig = this.brokerController.getTopicConfigManager().selectTopicConfig(topic);\n", "            if (null == topicConfig) {\n", "                log.warn(\"consumeStats, topic config not exist, {}\", topic);\n", "                continue;\n", "            }\n", "\n", "            {\n", "                SubscriptionData findSubscriptionData =\n", "                    this.brokerController.getConsumerManager().findSubscriptionData(requestHeader.getConsumerGroup(), topic);\n", "\n", "                if (null == findSubscriptionData\n", "                    && this.brokerController.getConsumerManager().findSubscriptionDataCount(requestHeader.getConsumerGroup()) > 0) {\n", "                    log.warn(\"consumeStats, the consumer group[{}], topic[{}] not exist\", requestHeader.getConsumerGroup(), topic);\n", "                    continue;\n", "                }\n", "            }\n", "\n", "            for (int i = 0; i < topicConfig.getReadQueueNums(); i++) {\n", "                MessageQueue mq = new MessageQueue();\n", "                mq.setTopic(topic);\n", "                mq.setBrokerName(this.brokerController.getBrokerConfig().getBrokerName());\n", "                mq.setQueueId(i);\n", "\n", "                OffsetWrapper offsetWrapper = new OffsetWrapper();\n", "\n", "                long brokerOffset = this.brokerController.getMessageStore().getMaxOffsetInQueue(topic, i);\n", "                if (brokerOffset < 0)\n", "                    brokerOffset = 0;\n", "\n", "                long consumerOffset = this.brokerController.getConsumerOffsetManager().queryOffset(\n", "                    requestHeader.getConsumerGroup(),\n", "                    topic,\n", "                    i);\n", "                if (consumerOffset < 0)\n", "                    consumerOffset = 0;\n", "\n", "                offsetWrapper.setBrokerOffset(brokerOffset);\n", "                offsetWrapper.setConsumerOffset(consumerOffset);\n", "\n", "                long timeOffset = consumerOffset - 1;\n", "                if (timeOffset >= 0) {\n", "                    long lastTimestamp = this.brokerController.getMessageStore().getMessageStoreTimeStamp(topic, i, timeOffset);\n", "                    if (lastTimestamp > 0) {\n", "                        offsetWrapper.setLastTimestamp(lastTimestamp);\n", "                    }\n", "                }\n", "\n", "                consumeStats.getOffsetTable().put(mq, offsetWrapper);\n", "            }\n", "\n", "            double consumeTps = this.brokerController.getBrokerStatsManager().tpsGroupGetNums(requestHeader.getConsumerGroup(), topic);\n", "\n", "            consumeTps += consumeStats.getConsumeTps();\n", "            consumeStats.setConsumeTps(consumeTps);\n", "        }\n", "\n", "        byte[] body = consumeStats.encode();\n", "        response.setBody(body);\n", "        response.setCode(ResponseCode.SUCCESS);\n", "        response.setRemark(null);\n", "        return response;\n", "    }\n", "\n", "    private RemotingCommand getAllConsumerOffset(ChannelHandlerContext ctx, RemotingCommand request) {\n", "        final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n", "\n", "        String content = this.brokerController.getConsumerOffsetManager().encode();\n", "        if (content != null && content.length() > 0) {\n", "            try {\n", "                response.setBody(content.getBytes(MixAll.DEFAULT_CHARSET));\n", "            } catch (UnsupportedEncodingException e) {\n", "                log.error(\"get all consumer offset from master error.\", e);\n", "\n", "                response.setCode(ResponseCode.SYSTEM_ERROR);\n", "                response.setRemark(\"UnsupportedEncodingException \" + e);\n", "                return response;\n", "            }\n", "        } else {\n", "            log.error(\"No consumer offset in this broker, client: {} \", ctx.channel().remoteAddress());\n", "            response.setCode(ResponseCode.SYSTEM_ERROR);\n", "            response.setRemark(\"No consumer offset in this broker\");\n", "            return response;\n", "        }\n", "\n", "        response.setCode(ResponseCode.SUCCESS);\n", "        response.setRemark(null);\n", "\n", "        return response;\n", "    }\n", "\n", "    private RemotingCommand getAllDelayOffset(ChannelHandlerContext ctx, RemotingCommand request) {\n", "        final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n", "\n", "        if (!(this.brokerController.getMessageStore() instanceof DefaultMessageStore)) {\n", "            log.error(\"Delay offset not supported in this messagetore, client: {} \", ctx.channel().remoteAddress());\n", "            response.setCode(ResponseCode.SYSTEM_ERROR);\n", "            response.setRemark(\"Delay offset not supported in this messagetore\");\n", "            return response;\n", "        }\n", "\n", "        String content = ((DefaultMessageStore) this.brokerController.getMessageStore()).getScheduleMessageService().encode();\n", "        if (content != null && content.length() > 0) {\n", "            try {\n", "                response.setBody(content.getBytes(MixAll.DEFAULT_CHARSET));\n", "            } catch (UnsupportedEncodingException e) {\n", "                log.error(\"Get all delay offset from master error.\", e);\n", "\n", "                response.setCode(ResponseCode.SYSTEM_ERROR);\n", "                response.setRemark(\"UnsupportedEncodingException \" + e);\n", "                return response;\n", "            }\n", "        } else {\n", "            log.error(\"No delay offset in this broker, client: {} \", ctx.channel().remoteAddress());\n", "            response.setCode(ResponseCode.SYSTEM_ERROR);\n", "            response.setRemark(\"No delay offset in this broker\");\n", "            return response;\n", "        }\n", "\n", "        response.setCode(ResponseCode.SUCCESS);\n", "        response.setRemark(null);\n", "\n", "        return response;\n", "    }\n", "\n", "    public RemotingCommand resetOffset(ChannelHandlerContext ctx,\n", "        RemotingCommand request) throws RemotingCommandException {\n", "        final ResetOffsetRequestHeader requestHeader =\n", "            (ResetOffsetRequestHeader) request.decodeCommandCustomHeader(ResetOffsetRequestHeader.class);\n", "        log.info(\"[reset-offset] reset offset started by {}. topic={}, group={}, timestamp={}, isForce={}\",\n", "            RemotingHelper.parseChannelRemoteAddr(ctx.channel()), requestHeader.getTopic(), requestHeader.getGroup(),\n", "            requestHeader.getTimestamp(), requestHeader.isForce());\n", "        boolean isC = false;\n", "        LanguageCode language = request.getLanguage();\n", "        switch (language) {\n", "            case CPP:\n", "                isC = true;\n", "                break;\n", "        }\n", "        return this.brokerController.getBroker2Client().resetOffset(requestHeader.getTopic(), requestHeader.getGroup(),\n", "            requestHeader.getTimestamp(), requestHeader.isForce(), isC);\n", "    }\n", "\n", "    public RemotingCommand getConsumerStatus(ChannelHandlerContext ctx,\n", "        RemotingCommand request) throws RemotingCommandException {\n", "        final GetConsumerStatusRequestHeader requestHeader =\n", "            (GetConsumerStatusRequestHeader) request.decodeCommandCustomHeader(GetConsumerStatusRequestHeader.class);\n", "\n", "        log.info(\"[get-consumer-status] get consumer status by {}. topic={}, group={}\",\n", "            RemotingHelper.parseChannelRemoteAddr(ctx.channel()), requestHeader.getTopic(), requestHeader.getGroup());\n", "\n", "        return this.brokerController.getBroker2Client().getConsumeStatus(requestHeader.getTopic(), requestHeader.getGroup(),\n", "            requestHeader.getClientAddr());\n", "    }\n", "\n", "    private RemotingCommand queryTopicConsumeByWho(ChannelHandlerContext ctx,\n", "        RemotingCommand request) throws RemotingCommandException {\n", "        final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n", "        QueryTopicConsumeByWhoRequestHeader requestHeader =\n", "            (QueryTopicConsumeByWhoRequestHeader) request.decodeCommandCustomHeader(QueryTopicConsumeByWhoRequestHeader.class);\n", "\n", "        HashSet<String> groups = this.brokerController.getConsumerManager().queryTopicConsumeByWho(requestHeader.getTopic());\n", "\n", "        Set<String> groupInOffset = this.brokerController.getConsumerOffsetManager().whichGroupByTopic(requestHeader.getTopic());\n", "        if (groupInOffset != null && !groupInOffset.isEmpty()) {\n", "            groups.addAll(groupInOffset);\n", "        }\n", "\n", "        GroupList groupList = new GroupList();\n", "        groupList.setGroupList(groups);\n", "        byte[] body = groupList.encode();\n", "\n", "        response.setBody(body);\n", "        response.setCode(ResponseCode.SUCCESS);\n", "        response.setRemark(null);\n", "        return response;\n", "    }\n", "\n", "    private RemotingCommand registerFilterServer(ChannelHandlerContext ctx,\n", "        RemotingCommand request) throws RemotingCommandException {\n", "        final RemotingCommand response = RemotingCommand.createResponseCommand(RegisterFilterServerResponseHeader.class);\n", "        final RegisterFilterServerResponseHeader responseHeader = (RegisterFilterServerResponseHeader) response.readCustomHeader();\n", "        final RegisterFilterServerRequestHeader requestHeader =\n", "            (RegisterFilterServerRequestHeader) request.decodeCommandCustomHeader(RegisterFilterServerRequestHeader.class);\n", "\n", "        this.brokerController.getFilterServerManager().registerFilterServer(ctx.channel(), requestHeader.getFilterServerAddr());\n", "\n", "        responseHeader.setBrokerId(this.brokerController.getBrokerConfig().getBrokerId());\n", "        responseHeader.setBrokerName(this.brokerController.getBrokerConfig().getBrokerName());\n", "\n", "        response.setCode(ResponseCode.SUCCESS);\n", "        response.setRemark(null);\n", "        return response;\n", "    }\n", "\n", "    private RemotingCommand queryConsumeTimeSpan(ChannelHandlerContext ctx,\n", "        RemotingCommand request) throws RemotingCommandException {\n", "        final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n", "        QueryConsumeTimeSpanRequestHeader requestHeader =\n", "            (QueryConsumeTimeSpanRequestHeader) request.decodeCommandCustomHeader(QueryConsumeTimeSpanRequestHeader.class);\n", "\n", "        final String topic = requestHeader.getTopic();\n", "        TopicConfig topicConfig = this.brokerController.getTopicConfigManager().selectTopicConfig(topic);\n", "        if (null == topicConfig) {\n", "            response.setCode(ResponseCode.TOPIC_NOT_EXIST);\n", "            response.setRemark(\"topic[\" + topic + \"] not exist\");\n", "            return response;\n", "        }\n", "\n", "        List<QueueTimeSpan> timeSpanSet = new ArrayList<QueueTimeSpan>();\n", "        for (int i = 0; i < topicConfig.getWriteQueueNums(); i++) {\n", "            QueueTimeSpan timeSpan = new QueueTimeSpan();\n", "            MessageQueue mq = new MessageQueue();\n", "            mq.setTopic(topic);\n", "            mq.setBrokerName(this.brokerController.getBrokerConfig().getBrokerName());\n", "            mq.setQueueId(i);\n", "            timeSpan.setMessageQueue(mq);\n", "\n", "            long minTime = this.brokerController.getMessageStore().getEarliestMessageTime(topic, i);\n", "            timeSpan.setMinTimeStamp(minTime);\n", "\n", "            long max = this.brokerController.getMessageStore().getMaxOffsetInQueue(topic, i);\n", "            long maxTime = this.brokerController.getMessageStore().getMessageStoreTimeStamp(topic, i, max - 1);\n", "            timeSpan.setMaxTimeStamp(maxTime);\n", "\n", "            long consumeTime;\n", "            long consumerOffset = this.brokerController.getConsumerOffsetManager().queryOffset(\n", "                requestHeader.getGroup(), topic, i);\n", "            if (consumerOffset > 0) {\n", "                consumeTime = this.brokerController.getMessageStore().getMessageStoreTimeStamp(topic, i, consumerOffset - 1);\n", "            } else {\n", "                consumeTime = minTime;\n", "            }\n", "            timeSpan.setConsumeTimeStamp(consumeTime);\n", "\n", "            long maxBrokerOffset = this.brokerController.getMessageStore().getMaxOffsetInQueue(requestHeader.getTopic(), i);\n", "            if (consumerOffset < maxBrokerOffset) {\n", "                long nextTime = this.brokerController.getMessageStore().getMessageStoreTimeStamp(topic, i, consumerOffset);\n", "                timeSpan.setDelayTime(System.currentTimeMillis() - nextTime);\n", "            }\n", "            timeSpanSet.add(timeSpan);\n", "        }\n", "\n", "        QueryConsumeTimeSpanBody queryConsumeTimeSpanBody = new QueryConsumeTimeSpanBody();\n", "        queryConsumeTimeSpanBody.setConsumeTimeSpanSet(timeSpanSet);\n", "        response.setBody(queryConsumeTimeSpanBody.encode());\n", "        response.setCode(ResponseCode.SUCCESS);\n", "        response.setRemark(null);\n", "        return response;\n", "    }\n", "\n", "    private RemotingCommand getSystemTopicListFromBroker(ChannelHandlerContext ctx, RemotingCommand request)\n", "        throws RemotingCommandException {\n", "        final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n", "\n", "        Set<String> topics = TopicValidator.getSystemTopicSet();\n", "        TopicList topicList = new TopicList();\n", "        topicList.setTopicList(topics);\n", "        response.setBody(topicList.encode());\n", "        response.setCode(ResponseCode.SUCCESS);\n", "        response.setRemark(null);\n", "        return response;\n", "    }\n", "\n", "    public RemotingCommand cleanExpiredConsumeQueue() {\n", "        log.warn(\"invoke cleanExpiredConsumeQueue start.\");\n", "        final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n", "        brokerController.getMessageStore().cleanExpiredConsumerQueue();\n", "        log.warn(\"invoke cleanExpiredConsumeQueue end.\");\n", "        response.setCode(ResponseCode.SUCCESS);\n", "        response.setRemark(null);\n", "        return response;\n", "    }\n", "\n", "    public RemotingCommand cleanUnusedTopic() {\n", "        log.warn(\"invoke cleanUnusedTopic start.\");\n", "        final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n", "        brokerController.getMessageStore().cleanUnusedTopic(brokerController.getTopicConfigManager().getTopicConfigTable().keySet());\n", "        log.warn(\"invoke cleanUnusedTopic end.\");\n", "        response.setCode(ResponseCode.SUCCESS);\n", "        response.setRemark(null);\n", "        return response;\n", "    }\n", "\n", "    private RemotingCommand getConsumerRunningInfo(ChannelHandlerContext ctx,\n", "        RemotingCommand request) throws RemotingCommandException {\n", "        final GetConsumerRunningInfoRequestHeader requestHeader =\n", "            (GetConsumerRunningInfoRequestHeader) request.decodeCommandCustomHeader(GetConsumerRunningInfoRequestHeader.class);\n", "\n", "        return this.callConsumer(RequestCode.GET_CONSUMER_RUNNING_INFO, request, requestHeader.getConsumerGroup(),\n", "            requestHeader.getClientId());\n", "    }\n", "\n", "    private RemotingCommand queryCorrectionOffset(ChannelHandlerContext ctx,\n", "        RemotingCommand request) throws RemotingCommandException {\n", "        final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n", "        QueryCorrectionOffsetHeader requestHeader =\n", "            (QueryCorrectionOffsetHeader) request.decodeCommandCustomHeader(QueryCorrectionOffsetHeader.class);\n", "\n", "        Map<Integer, Long> correctionOffset = this.brokerController.getConsumerOffsetManager()\n", "            .queryMinOffsetInAllGroup(requestHeader.getTopic(), requestHeader.getFilterGroups());\n", "\n", "        Map<Integer, Long> compareOffset =\n", "            this.brokerController.getConsumerOffsetManager().queryOffset(requestHeader.getTopic(), requestHeader.getCompareGroup());\n", "\n", "        if (compareOffset != null && !compareOffset.isEmpty()) {\n", "            for (Map.Entry<Integer, Long> entry : compareOffset.entrySet()) {\n", "                Integer queueId = entry.getKey();\n", "                correctionOffset.put(queueId,\n", "                    correctionOffset.get(queueId) > entry.getValue() ? Long.MAX_VALUE : correctionOffset.get(queueId));\n", "            }\n", "        }\n", "\n", "        QueryCorrectionOffsetBody body = new QueryCorrectionOffsetBody();\n", "        body.setCorrectionOffsets(correctionOffset);\n", "        response.setBody(body.encode());\n", "        response.setCode(ResponseCode.SUCCESS);\n", "        response.setRemark(null);\n", "        return response;\n", "    }\n", "\n", "    private RemotingCommand consumeMessageDirectly(ChannelHandlerContext ctx,\n", "        RemotingCommand request) throws RemotingCommandException {\n", "        final ConsumeMessageDirectlyResultRequestHeader requestHeader = (ConsumeMessageDirectlyResultRequestHeader) request\n", "            .decodeCommandCustomHeader(ConsumeMessageDirectlyResultRequestHeader.class);\n", "\n", "        request.getExtFields().put(\"brokerName\", this.brokerController.getBrokerConfig().getBrokerName());\n", "        SelectMappedBufferResult selectMappedBufferResult = null;\n", "        try {\n", "            MessageId messageId = MessageDecoder.decodeMessageId(requestHeader.getMsgId());\n", "            selectMappedBufferResult = this.brokerController.getMessageStore().selectOneMessageByOffset(messageId.getOffset());\n", "\n", "            byte[] body = new byte[selectMappedBufferResult.getSize()];\n", "            selectMappedBufferResult.getByteBuffer().get(body);\n", "            request.setBody(body);\n", "        } catch (UnknownHostException e) {\n", "        } finally {\n", "            if (selectMappedBufferResult != null) {\n", "                selectMappedBufferResult.release();\n", "            }\n", "        }\n", "\n", "        return this.callConsumer(RequestCode.CONSUME_MESSAGE_DIRECTLY, request, requestHeader.getConsumerGroup(),\n", "            requestHeader.getClientId());\n", "    }\n", "\n", "    private RemotingCommand cloneGroupOffset(ChannelHandlerContext ctx,\n", "        RemotingCommand request) throws RemotingCommandException {\n", "        final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n", "        CloneGroupOffsetRequestHeader requestHeader =\n", "            (CloneGroupOffsetRequestHeader) request.decodeCommandCustomHeader(CloneGroupOffsetRequestHeader.class);\n", "\n", "        Set<String> topics;\n", "        if (UtilAll.isBlank(requestHeader.getTopic())) {\n", "            topics = this.brokerController.getConsumerOffsetManager().whichTopicByConsumer(requestHeader.getSrcGroup());\n", "        } else {\n", "            topics = new HashSet<String>();\n", "            topics.add(requestHeader.getTopic());\n", "        }\n", "\n", "        for (String topic : topics) {\n", "            TopicConfig topicConfig = this.brokerController.getTopicConfigManager().selectTopicConfig(topic);\n", "            if (null == topicConfig) {\n", "                log.warn(\"[cloneGroupOffset], topic config not exist, {}\", topic);\n", "                continue;\n", "            }\n", "\n", "            if (!requestHeader.isOffline()) {\n", "\n", "                SubscriptionData findSubscriptionData =\n", "                    this.brokerController.getConsumerManager().findSubscriptionData(requestHeader.getSrcGroup(), topic);\n", "                if (this.brokerController.getConsumerManager().findSubscriptionDataCount(requestHeader.getSrcGroup()) > 0\n", "                    && findSubscriptionData == null) {\n", "                    log.warn(\"[cloneGroupOffset], the consumer group[{}], topic[{}] not exist\", requestHeader.getSrcGroup(), topic);\n", "                    continue;\n", "                }\n", "            }\n", "\n", "            this.brokerController.getConsumerOffsetManager().cloneOffset(requestHeader.getSrcGroup(), requestHeader.getDestGroup(),\n", "                requestHeader.getTopic());\n", "        }\n", "\n", "        response.setCode(ResponseCode.SUCCESS);\n", "        response.setRemark(null);\n", "        return response;\n", "    }\n", "\n", "    private RemotingCommand ViewBrokerStatsData(ChannelHandlerContext ctx,\n", "        RemotingCommand request) throws RemotingCommandException {\n", "        final ViewBrokerStatsDataRequestHeader requestHeader =\n", "            (ViewBrokerStatsDataRequestHeader) request.decodeCommandCustomHeader(ViewBrokerStatsDataRequestHeader.class);\n", "        final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n", "        MessageStore messageStore = this.brokerController.getMessageStore();\n", "\n", "        StatsItem statsItem = messageStore.getBrokerStatsManager().getStatsItem(requestHeader.getStatsName(), requestHeader.getStatsKey());\n", "        if (null == statsItem) {\n", "            response.setCode(ResponseCode.SYSTEM_ERROR);\n", "            response.setRemark(String.format(\"The stats <%s> <%s> not exist\", requestHeader.getStatsName(), requestHeader.getStatsKey()));\n", "            return response;\n", "        }\n", "\n", "        BrokerStatsData brokerStatsData = new BrokerStatsData();\n", "\n", "        {\n", "            BrokerStatsItem it = new BrokerStatsItem();\n", "            StatsSnapshot ss = statsItem.getStatsDataInMinute();\n", "            it.setSum(ss.getSum());\n", "            it.setTps(ss.getTps());\n", "            it.setAvgpt(ss.getAvgpt());\n", "            brokerStatsData.setStatsMinute(it);\n", "        }\n", "\n", "        {\n", "            BrokerStatsItem it = new BrokerStatsItem();\n", "            StatsSnapshot ss = statsItem.getStatsDataInHour();\n", "            it.setSum(ss.getSum());\n", "            it.setTps(ss.getTps());\n", "            it.setAvgpt(ss.getAvgpt());\n", "            brokerStatsData.setStatsHour(it);\n", "        }\n", "\n", "        {\n", "            BrokerStatsItem it = new BrokerStatsItem();\n", "            StatsSnapshot ss = statsItem.getStatsDataInDay();\n", "            it.setSum(ss.getSum());\n", "            it.setTps(ss.getTps());\n", "            it.setAvgpt(ss.getAvgpt());\n", "            brokerStatsData.setStatsDay(it);\n", "        }\n", "\n", "        response.setBody(brokerStatsData.encode());\n", "        response.setCode(ResponseCode.SUCCESS);\n", "        response.setRemark(null);\n", "        return response;\n", "    }\n", "\n", "    private RemotingCommand fetchAllConsumeStatsInBroker(ChannelHandlerContext ctx, RemotingCommand request)\n", "        throws RemotingCommandException {\n", "        final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n", "        GetConsumeStatsInBrokerHeader requestHeader =\n", "            (GetConsumeStatsInBrokerHeader) request.decodeCommandCustomHeader(GetConsumeStatsInBrokerHeader.class);\n", "        boolean isOrder = requestHeader.isOrder();\n", "        ConcurrentMap<String, SubscriptionGroupConfig> subscriptionGroups =\n", "            brokerController.getSubscriptionGroupManager().getSubscriptionGroupTable();\n", "\n", "        List<Map<String/* subscriptionGroupName */, List<ConsumeStats>>> brokerConsumeStatsList =\n", "            new ArrayList<Map<String, List<ConsumeStats>>>();\n", "\n", "        long totalDiff = 0L;\n", "\n", "        for (String group : subscriptionGroups.keySet()) {\n", "            Map<String, List<ConsumeStats>> subscripTopicConsumeMap = new HashMap<String, List<ConsumeStats>>();\n", "            Set<String> topics = this.brokerController.getConsumerOffsetManager().whichTopicByConsumer(group);\n", "            List<ConsumeStats> consumeStatsList = new ArrayList<ConsumeStats>();\n", "            for (String topic : topics) {\n", "                ConsumeStats consumeStats = new ConsumeStats();\n", "                TopicConfig topicConfig = this.brokerController.getTopicConfigManager().selectTopicConfig(topic);\n", "                if (null == topicConfig) {\n", "                    log.warn(\"consumeStats, topic config not exist, {}\", topic);\n", "                    continue;\n", "                }\n", "\n", "                if (isOrder && !topicConfig.isOrder()) {\n", "                    continue;\n", "                }\n", "\n", "                {\n", "                    SubscriptionData findSubscriptionData = this.brokerController.getConsumerManager().findSubscriptionData(group, topic);\n", "\n", "                    if (null == findSubscriptionData\n", "                        && this.brokerController.getConsumerManager().findSubscriptionDataCount(group) > 0) {\n", "                        log.warn(\"consumeStats, the consumer group[{}], topic[{}] not exist\", group, topic);\n", "                        continue;\n", "                    }\n", "                }\n", "\n", "                for (int i = 0; i < topicConfig.getWriteQueueNums(); i++) {\n", "                    MessageQueue mq = new MessageQueue();\n", "                    mq.setTopic(topic);\n", "                    mq.setBrokerName(this.brokerController.getBrokerConfig().getBrokerName());\n", "                    mq.setQueueId(i);\n", "                    OffsetWrapper offsetWrapper = new OffsetWrapper();\n", "                    long brokerOffset = this.brokerController.getMessageStore().getMaxOffsetInQueue(topic, i);\n", "                    if (brokerOffset < 0)\n", "                        brokerOffset = 0;\n", "                    long consumerOffset = this.brokerController.getConsumerOffsetManager().queryOffset(\n", "                        group,\n", "                        topic,\n", "                        i);\n", "                    if (consumerOffset < 0)\n", "                        consumerOffset = 0;\n", "\n", "                    offsetWrapper.setBrokerOffset(brokerOffset);\n", "                    offsetWrapper.setConsumerOffset(consumerOffset);\n", "\n", "                    long timeOffset = consumerOffset - 1;\n", "                    if (timeOffset >= 0) {\n", "                        long lastTimestamp = this.brokerController.getMessageStore().getMessageStoreTimeStamp(topic, i, timeOffset);\n", "                        if (lastTimestamp > 0) {\n", "                            offsetWrapper.setLastTimestamp(lastTimestamp);\n", "                        }\n", "                    }\n", "                    consumeStats.getOffsetTable().put(mq, offsetWrapper);\n", "                }\n", "                double consumeTps = this.brokerController.getBrokerStatsManager().tpsGroupGetNums(group, topic);\n", "                consumeTps += consumeStats.getConsumeTps();\n", "                consumeStats.setConsumeTps(consumeTps);\n", "                totalDiff += consumeStats.computeTotalDiff();\n", "                consumeStatsList.add(consumeStats);\n", "            }\n", "            subscripTopicConsumeMap.put(group, consumeStatsList);\n", "            brokerConsumeStatsList.add(subscripTopicConsumeMap);\n", "        }\n", "        ConsumeStatsList consumeStats = new ConsumeStatsList();\n", "        consumeStats.setBrokerAddr(brokerController.getBrokerAddr());\n", "        consumeStats.setConsumeStatsList(brokerConsumeStatsList);\n", "        consumeStats.setTotalDiff(totalDiff);\n", "        response.setBody(consumeStats.encode());\n", "        response.setCode(ResponseCode.SUCCESS);\n", "        response.setRemark(null);\n", "        return response;\n", "    }\n", "\n", "    private HashMap<String, String> prepareRuntimeInfo() {\n", "        HashMap<String, String> runtimeInfo = this.brokerController.getMessageStore().getRuntimeInfo();\n", "        runtimeInfo.put(\"brokerVersionDesc\", MQVersion.getVersionDesc(MQVersion.CURRENT_VERSION));\n", "        runtimeInfo.put(\"brokerVersion\", String.valueOf(MQVersion.CURRENT_VERSION));\n", "\n", "        runtimeInfo.put(\"msgPutTotalYesterdayMorning\",\n", "            String.valueOf(this.brokerController.getBrokerStats().getMsgPutTotalYesterdayMorning()));\n", "        runtimeInfo.put(\"msgPutTotalTodayMorning\", String.valueOf(this.brokerController.getBrokerStats().getMsgPutTotalTodayMorning()));\n", "        runtimeInfo.put(\"msgPutTotalTodayNow\", String.valueOf(this.brokerController.getBrokerStats().getMsgPutTotalTodayNow()));\n", "\n", "        runtimeInfo.put(\"msgGetTotalYesterdayMorning\",\n", "            String.valueOf(this.brokerController.getBrokerStats().getMsgGetTotalYesterdayMorning()));\n", "        runtimeInfo.put(\"msgGetTotalTodayMorning\", String.valueOf(this.brokerController.getBrokerStats().getMsgGetTotalTodayMorning()));\n", "        runtimeInfo.put(\"msgGetTotalTodayNow\", String.valueOf(this.brokerController.getBrokerStats().getMsgGetTotalTodayNow()));\n", "\n", "        runtimeInfo.put(\"sendThreadPoolQueueSize\", String.valueOf(this.brokerController.getSendThreadPoolQueue().size()));\n", "\n", "        runtimeInfo.put(\"sendThreadPoolQueueCapacity\",\n", "            String.valueOf(this.brokerController.getBrokerConfig().getSendThreadPoolQueueCapacity()));\n", "\n", "        runtimeInfo.put(\"pullThreadPoolQueueSize\", String.valueOf(this.brokerController.getPullThreadPoolQueue().size()));\n", "        runtimeInfo.put(\"pullThreadPoolQueueCapacity\",\n", "            String.valueOf(this.brokerController.getBrokerConfig().getPullThreadPoolQueueCapacity()));\n", "\n", "        runtimeInfo.put(\"queryThreadPoolQueueSize\", String.valueOf(this.brokerController.getQueryThreadPoolQueue().size()));\n", "        runtimeInfo.put(\"queryThreadPoolQueueCapacity\",\n", "            String.valueOf(this.brokerController.getBrokerConfig().getQueryThreadPoolQueueCapacity()));\n", "\n", "        runtimeInfo.put(\"EndTransactionQueueSize\", String.valueOf(this.brokerController.getEndTransactionThreadPoolQueue().size()));\n", "        runtimeInfo.put(\"EndTransactionThreadPoolQueueCapacity\",\n", "            String.valueOf(this.brokerController.getBrokerConfig().getEndTransactionPoolQueueCapacity()));\n", "\n", "        runtimeInfo.put(\"dispatchBehindBytes\", String.valueOf(this.brokerController.getMessageStore().dispatchBehindBytes()));\n", "        runtimeInfo.put(\"pageCacheLockTimeMills\", String.valueOf(this.brokerController.getMessageStore().lockTimeMills()));\n", "\n", "        runtimeInfo.put(\"sendThreadPoolQueueHeadWaitTimeMills\", String.valueOf(this.brokerController.headSlowTimeMills4SendThreadPoolQueue()));\n", "        runtimeInfo.put(\"pullThreadPoolQueueHeadWaitTimeMills\", String.valueOf(this.brokerController.headSlowTimeMills4PullThreadPoolQueue()));\n", "        runtimeInfo.put(\"queryThreadPoolQueueHeadWaitTimeMills\", String.valueOf(this.brokerController.headSlowTimeMills4QueryThreadPoolQueue()));\n", "\n", "        runtimeInfo.put(\"earliestMessageTimeStamp\", String.valueOf(this.brokerController.getMessageStore().getEarliestMessageTime()));\n", "        runtimeInfo.put(\"startAcceptSendRequestTimeStamp\", String.valueOf(this.brokerController.getBrokerConfig().getStartAcceptSendRequestTimeStamp()));\n", "        if (this.brokerController.getMessageStore() instanceof DefaultMessageStore) {\n", "            DefaultMessageStore defaultMessageStore = (DefaultMessageStore) this.brokerController.getMessageStore();\n", "            runtimeInfo.put(\"remainTransientStoreBufferNumbs\", String.valueOf(defaultMessageStore.remainTransientStoreBufferNumbs()));\n", "            if (defaultMessageStore.getMessageStoreConfig().isTransientStorePoolEnable()) {\n", "                runtimeInfo.put(\"remainHowManyDataToCommit\", MixAll.humanReadableByteCount(defaultMessageStore.getCommitLog().remainHowManyDataToCommit(), false));\n", "            }\n", "            runtimeInfo.put(\"remainHowManyDataToFlush\", MixAll.humanReadableByteCount(defaultMessageStore.getCommitLog().remainHowManyDataToFlush(), false));\n", "        }\n", "\n", "        java.io.File commitLogDir = new java.io.File(this.brokerController.getMessageStoreConfig().getStorePathRootDir());\n", "        if (commitLogDir.exists()) {\n", "            runtimeInfo.put(\"commitLogDirCapacity\", String.format(\"Total : %s, Free : %s.\", MixAll.humanReadableByteCount(commitLogDir.getTotalSpace(), false), MixAll.humanReadableByteCount(commitLogDir.getFreeSpace(), false)));\n", "        }\n", "\n", "        return runtimeInfo;\n", "    }\n", "\n", "    private RemotingCommand callConsumer(\n", "        final int requestCode,\n", "        final RemotingCommand request,\n", "        final String consumerGroup,\n", "        final String clientId) throws RemotingCommandException {\n", "        final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n", "        ClientChannelInfo clientChannelInfo = this.brokerController.getConsumerManager().findChannel(consumerGroup, clientId);\n", "\n", "        if (null == clientChannelInfo) {\n", "            response.setCode(ResponseCode.SYSTEM_ERROR);\n", "            response.setRemark(String.format(\"The Consumer <%s> <%s> not online\", consumerGroup, clientId));\n", "            return response;\n", "        }\n", "\n", "        if (clientChannelInfo.getVersion() < MQVersion.Version.V3_1_8_SNAPSHOT.ordinal()) {\n", "            response.setCode(ResponseCode.SYSTEM_ERROR);\n", "            response.setRemark(String.format(\"The Consumer <%s> Version <%s> too low to finish, please upgrade it to V3_1_8_SNAPSHOT\",\n", "                clientId,\n", "                MQVersion.getVersionDesc(clientChannelInfo.getVersion())));\n", "            return response;\n", "        }\n", "\n", "        try {\n", "            RemotingCommand newRequest = RemotingCommand.createRequestCommand(requestCode, null);\n", "            newRequest.setExtFields(request.getExtFields());\n", "            newRequest.setBody(request.getBody());\n", "\n", "            return this.brokerController.getBroker2Client().callClient(clientChannelInfo.getChannel(), newRequest);\n", "        } catch (RemotingTimeoutException e) {\n", "            response.setCode(ResponseCode.CONSUME_MSG_TIMEOUT);\n", "            response\n", "                .setRemark(String.format(\"consumer <%s> <%s> Timeout: %s\", consumerGroup, clientId, RemotingHelper.exceptionSimpleDesc(e)));\n", "            return response;\n", "        } catch (Exception e) {\n", "            response.setCode(ResponseCode.SYSTEM_ERROR);\n", "            response.setRemark(\n", "                String.format(\"invoke consumer <%s> <%s> Exception: %s\", consumerGroup, clientId, RemotingHelper.exceptionSimpleDesc(e)));\n", "            return response;\n", "        }\n", "    }\n", "\n", "    private RemotingCommand queryConsumeQueue(ChannelHandlerContext ctx,\n", "        RemotingCommand request) throws RemotingCommandException {\n", "        QueryConsumeQueueRequestHeader requestHeader =\n", "            (QueryConsumeQueueRequestHeader) request.decodeCommandCustomHeader(QueryConsumeQueueRequestHeader.class);\n", "\n", "        RemotingCommand response = RemotingCommand.createResponseCommand(null);\n", "\n", "        ConsumeQueue consumeQueue = this.brokerController.getMessageStore().getConsumeQueue(requestHeader.getTopic(),\n", "            requestHeader.getQueueId());\n", "        if (consumeQueue == null) {\n", "            response.setCode(ResponseCode.SYSTEM_ERROR);\n", "            response.setRemark(String.format(\"%d@%s is not exist!\", requestHeader.getQueueId(), requestHeader.getTopic()));\n", "            return response;\n", "        }\n", "        response.setCode(ResponseCode.SUCCESS);\n", "\n", "        QueryConsumeQueueResponseBody body = new QueryConsumeQueueResponseBody();\n", "        body.setMaxQueueIndex(consumeQueue.getMaxOffsetInQueue());\n", "        body.setMinQueueIndex(consumeQueue.getMinOffsetInQueue());\n", "\n", "        MessageFilter messageFilter = null;\n", "        if (requestHeader.getConsumerGroup() != null) {\n", "            SubscriptionData subscriptionData = this.brokerController.getConsumerManager().findSubscriptionData(\n", "                requestHeader.getConsumerGroup(), requestHeader.getTopic()\n", "            );\n", "            body.setSubscriptionData(subscriptionData);\n", "            if (subscriptionData == null) {\n", "                body.setFilterData(String.format(\"%s@%s is not online!\", requestHeader.getConsumerGroup(), requestHeader.getTopic()));\n", "            } else {\n", "                ConsumerFilterData filterData = this.brokerController.getConsumerFilterManager()\n", "                    .get(requestHeader.getTopic(), requestHeader.getConsumerGroup());\n", "                body.setFilterData(JSON.toJSONString(filterData, true));\n", "\n", "                messageFilter = new ExpressionMessageFilter(subscriptionData, filterData,\n", "                    this.brokerController.getConsumerFilterManager());\n", "            }\n", "        }\n", "\n", "        SelectMappedBufferResult result = consumeQueue.getIndexBuffer(requestHeader.getIndex());\n", "        if (result == null) {\n", "            response.setRemark(String.format(\"Index %d of %d@%s is not exist!\", requestHeader.getIndex(), requestHeader.getQueueId(), requestHeader.getTopic()));\n", "            return response;\n", "        }\n", "        try {\n", "            List<ConsumeQueueData> queues = new ArrayList<>();\n", "            for (int i = 0; i < result.getSize() && i < requestHeader.getCount() * ConsumeQueue.CQ_STORE_UNIT_SIZE; i += ConsumeQueue.CQ_STORE_UNIT_SIZE) {\n", "                ConsumeQueueData one = new ConsumeQueueData();\n", "                one.setPhysicOffset(result.getByteBuffer().getLong());\n", "                one.setPhysicSize(result.getByteBuffer().getInt());\n", "                one.setTagsCode(result.getByteBuffer().getLong());\n", "\n", "                if (!consumeQueue.isExtAddr(one.getTagsCode())) {\n", "                    queues.add(one);\n", "                    continue;\n", "                }\n", "\n", "                ConsumeQueueExt.CqExtUnit cqExtUnit = consumeQueue.getExt(one.getTagsCode());\n", "                if (cqExtUnit != null) {\n", "                    one.setExtendDataJson(JSON.toJSONString(cqExtUnit));\n", "                    if (cqExtUnit.getFilterBitMap() != null) {\n", "                        one.setBitMap(BitsArray.create(cqExtUnit.getFilterBitMap()).toString());\n", "                    }\n", "                    if (messageFilter != null) {\n", "                        one.setEval(messageFilter.isMatchedByConsumeQueue(cqExtUnit.getTagsCode(), cqExtUnit));\n", "                    }\n", "                } else {\n", "                    one.setMsg(\"Cq extend not exist!addr: \" + one.getTagsCode());\n", "                }\n", "\n", "                queues.add(one);\n", "            }\n", "            body.setQueueData(queues);\n", "        } finally {\n", "            result.release();\n", "        }\n", "        response.setBody(body.encode());\n", "        return response;\n", "    }\n", "\n", "    private RemotingCommand resumeCheckHalfMessage(ChannelHandlerContext ctx,\n", "        RemotingCommand request)\n", "        throws RemotingCommandException {\n", "        final ResumeCheckHalfMessageRequestHeader requestHeader = (ResumeCheckHalfMessageRequestHeader) request\n", "            .decodeCommandCustomHeader(ResumeCheckHalfMessageRequestHeader.class);\n", "        final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n", "        SelectMappedBufferResult selectMappedBufferResult = null;\n", "        try {\n", "            MessageId messageId = MessageDecoder.decodeMessageId(requestHeader.getMsgId());\n", "            selectMappedBufferResult = this.brokerController.getMessageStore()\n", "                .selectOneMessageByOffset(messageId.getOffset());\n", "            MessageExt msg = MessageDecoder.decode(selectMappedBufferResult.getByteBuffer());\n", "            msg.putUserProperty(MessageConst.PROPERTY_TRANSACTION_CHECK_TIMES, String.valueOf(0));\n", "            PutMessageResult putMessageResult = this.brokerController.getMessageStore()\n", "                .putMessage(toMessageExtBrokerInner(msg));\n", "            if (putMessageResult != null\n", "                && putMessageResult.getPutMessageStatus() == PutMessageStatus.PUT_OK) {\n", "                log.info(\n", "                    \"Put message back to RMQ_SYS_TRANS_HALF_TOPIC. real topic={}\",\n", "                    msg.getUserProperty(MessageConst.PROPERTY_REAL_TOPIC));\n", "                response.setCode(ResponseCode.SUCCESS);\n", "                response.setRemark(null);\n", "            } else {\n", "                log.error(\"Put message back to RMQ_SYS_TRANS_HALF_TOPIC failed.\");\n", "                response.setCode(ResponseCode.SYSTEM_ERROR);\n", "                response.setRemark(\"Put message back to RMQ_SYS_TRANS_HALF_TOPIC failed.\");\n", "            }\n", "        } catch (Exception e) {\n", "            log.error(\"Exception was thrown when putting message back to RMQ_SYS_TRANS_HALF_TOPIC.\");\n", "            response.setCode(ResponseCode.SYSTEM_ERROR);\n", "            response.setRemark(\"Exception was thrown when putting message back to RMQ_SYS_TRANS_HALF_TOPIC.\");\n", "        } finally {\n", "            if (selectMappedBufferResult != null) {\n", "                selectMappedBufferResult.release();\n", "            }\n", "        }\n", "        return response;\n", "    }\n", "\n", "    private MessageExtBrokerInner toMessageExtBrokerInner(MessageExt msgExt) {\n", "        MessageExtBrokerInner inner = new MessageExtBrokerInner();\n", "        inner.setTopic(TransactionalMessageUtil.buildHalfTopic());\n", "        inner.setBody(msgExt.getBody());\n", "        inner.setFlag(msgExt.getFlag());\n", "        MessageAccessor.setProperties(inner, msgExt.getProperties());\n", "        inner.setPropertiesString(MessageDecoder.messageProperties2String(msgExt.getProperties()));\n", "        inner.setTagsCode(MessageExtBrokerInner.tagsString2tagsCode(msgExt.getTags()));\n", "        inner.setQueueId(0);\n", "        inner.setSysFlag(msgExt.getSysFlag());\n", "        inner.setBornHost(msgExt.getBornHost());\n", "        inner.setBornTimestamp(msgExt.getBornTimestamp());\n", "        inner.setStoreHost(msgExt.getStoreHost());\n", "        inner.setReconsumeTimes(msgExt.getReconsumeTimes());\n", "        inner.setMsgId(msgExt.getMsgId());\n", "        inner.setWaitStoreMsgOK(false);\n", "        return inner;\n", "    }\n", "}\n"], "test_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "package org.apache.rocketmq.broker.processor;\n", "\n", "import com.google.common.collect.Sets;\n", "import io.netty.channel.ChannelHandlerContext;\n", "import org.apache.rocketmq.broker.BrokerController;\n", "import org.apache.rocketmq.common.BrokerConfig;\n", "import org.apache.rocketmq.common.MixAll;\n", "import org.apache.rocketmq.common.TopicFilterType;\n", "import org.apache.rocketmq.common.constant.PermName;\n", "import org.apache.rocketmq.common.message.MessageAccessor;\n", "import org.apache.rocketmq.common.message.MessageConst;\n", "import org.apache.rocketmq.common.message.MessageExt;\n", "import org.apache.rocketmq.common.protocol.RequestCode;\n", "import org.apache.rocketmq.common.protocol.ResponseCode;\n", "import org.apache.rocketmq.common.protocol.header.CreateTopicRequestHeader;\n", "import org.apache.rocketmq.common.protocol.header.DeleteTopicRequestHeader;\n", "import org.apache.rocketmq.common.protocol.header.ResumeCheckHalfMessageRequestHeader;\n", "import org.apache.rocketmq.common.topic.TopicValidator;\n", "import org.apache.rocketmq.remoting.exception.RemotingCommandException;\n", "import org.apache.rocketmq.remoting.netty.NettyClientConfig;\n", "import org.apache.rocketmq.remoting.netty.NettyServerConfig;\n", "import org.apache.rocketmq.remoting.protocol.RemotingCommand;\n", "import org.apache.rocketmq.store.AppendMessageResult;\n", "import org.apache.rocketmq.store.AppendMessageStatus;\n", "import org.apache.rocketmq.store.MappedFile;\n", "import org.apache.rocketmq.store.MessageExtBrokerInner;\n", "import org.apache.rocketmq.store.MessageStore;\n", "import org.apache.rocketmq.store.PutMessageResult;\n", "import org.apache.rocketmq.store.PutMessageStatus;\n", "import org.apache.rocketmq.store.SelectMappedBufferResult;\n", "import org.apache.rocketmq.store.config.MessageStoreConfig;\n", "import org.junit.Before;\n", "import org.junit.Test;\n", "import org.junit.runner.RunWith;\n", "import org.mockito.Mock;\n", "import org.mockito.Spy;\n", "import org.mockito.junit.MockitoJUnitRunner;\n", "\n", "import java.net.UnknownHostException;\n", "import java.nio.ByteBuffer;\n", "import java.util.Set;\n", "\n", "import static org.assertj.core.api.Assertions.assertThat;\n", "import static org.mockito.ArgumentMatchers.any;\n", "import static org.mockito.Mockito.when;\n", "\n", "@RunWith(MockitoJUnitRunner.class)\n", "public class AdminBrokerProcessorTest {\n", "\n", "    private AdminBrokerProcessor adminBrokerProcessor;\n", "\n", "    @Mock\n", "    private ChannelHandlerContext handlerContext;\n", "\n", "    @Spy\n", "    private BrokerController\n", "            brokerController = new BrokerController(new BrokerConfig(), new NettyServerConfig(), new NettyClientConfig(),\n", "            new MessageStoreConfig());\n", "\n", "    @Mock\n", "    private MessageStore messageStore;\n", "\n", "    private Set<String> systemTopicSet;\n", "\n", "    @Before\n", "    public void init() {\n", "        brokerController.setMessageStore(messageStore);\n", "        adminBrokerProcessor = new AdminBrokerProcessor(brokerController);\n", "\n", "        systemTopicSet = Sets.newHashSet(\n", "                TopicValidator.RMQ_SYS_SELF_TEST_TOPIC,\n", "                TopicValidator.RMQ_SYS_BENCHMARK_TOPIC,\n", "                TopicValidator.RMQ_SYS_SCHEDULE_TOPIC,\n", "                TopicValidator.RMQ_SYS_OFFSET_MOVED_EVENT,\n", "                TopicValidator.AUTO_CREATE_TOPIC_KEY_TOPIC,\n", "                this.brokerController.getBrokerConfig().getBrokerClusterName(),\n", "                this.brokerController.getBrokerConfig().getBrokerClusterName() + \"_\" + MixAll.REPLY_TOPIC_POSTFIX);\n", "        if (this.brokerController.getBrokerConfig().isTraceTopicEnable()) {\n", "            systemTopicSet.add(this.brokerController.getBrokerConfig().getMsgTraceTopicName());\n", "        }\n", "    }\n", "\n", "    @Test\n", "    public void testProcessRequest_success() throws RemotingCommandException, UnknownHostException {\n", "        RemotingCommand request = createResumeCheckHalfMessageCommand();\n", "        when(messageStore.selectOneMessageByOffset(any(Long.class))).thenReturn(createSelectMappedBufferResult());\n", "        when(messageStore.putMessage(any(MessageExtBrokerInner.class))).thenReturn(new PutMessageResult\n", "                (PutMessageStatus.PUT_OK, new AppendMessageResult(AppendMessageStatus.PUT_OK)));\n", "        RemotingCommand response = adminBrokerProcessor.processRequest(handlerContext, request);\n", "        assertThat(response.getCode()).isEqualTo(ResponseCode.SUCCESS);\n", "    }\n", "\n", "    @Test\n", "    public void testProcessRequest_fail() throws RemotingCommandException, UnknownHostException {\n", "        RemotingCommand request = createResumeCheckHalfMessageCommand();\n", "        when(messageStore.selectOneMessageByOffset(any(Long.class))).thenReturn(createSelectMappedBufferResult());\n", "        when(messageStore.putMessage(any(MessageExtBrokerInner.class))).thenReturn(new PutMessageResult\n", "                (PutMessageStatus.UNKNOWN_ERROR, new AppendMessageResult(AppendMessageStatus.UNKNOWN_ERROR)));\n", "        RemotingCommand response = adminBrokerProcessor.processRequest(handlerContext, request);\n", "        assertThat(response.getCode()).isEqualTo(ResponseCode.SYSTEM_ERROR);\n", "    }\n", "\n", "    @Test\n", "    public void testUpdateAndCreateTopic() throws Exception {\n", "        //test system topic\n", "        for (String topic : systemTopicSet) {\n", "            RemotingCommand request = buildCreateTopicRequest(topic);\n", "            RemotingCommand response = adminBrokerProcessor.processRequest(handlerContext, request);\n", "            assertThat(response.getCode()).isEqualTo(ResponseCode.SYSTEM_ERROR);\n", "            assertThat(response.getRemark()).isEqualTo(\"The topic[\" + topic + \"] is conflict with system topic.\");\n", "        }\n", "\n", "        //test validate error topic\n", "        String topic = \"\";\n", "        RemotingCommand request = buildCreateTopicRequest(topic);\n", "        RemotingCommand response = adminBrokerProcessor.processRequest(handlerContext, request);\n", "        assertThat(response.getCode()).isEqualTo(ResponseCode.SYSTEM_ERROR);\n", "\n", "        topic = \"TEST_CREATE_TOPIC\";\n", "        request = buildCreateTopicRequest(topic);\n", "        response = adminBrokerProcessor.processRequest(handlerContext, request);\n", "        assertThat(response.getCode()).isEqualTo(ResponseCode.SUCCESS);\n", "\n", "    }\n", "\n", "    @Test\n", "    public void testDeleteTopic() throws Exception {\n", "        //test system topic\n", "        for (String topic : systemTopicSet) {\n", "            RemotingCommand request = buildDeleteTopicRequest(topic);\n", "            RemotingCommand response = adminBrokerProcessor.processRequest(handlerContext, request);\n", "            assertThat(response.getCode()).isEqualTo(ResponseCode.SYSTEM_ERROR);\n", "            assertThat(response.getRemark()).isEqualTo(\"The topic[\" + topic + \"] is conflict with system topic.\");\n", "        }\n", "\n", "        String topic = \"TEST_DELETE_TOPIC\";\n", "        RemotingCommand request = buildDeleteTopicRequest(topic);\n", "        RemotingCommand response = adminBrokerProcessor.processRequest(handlerContext, request);\n", "        assertThat(response.getCode()).isEqualTo(ResponseCode.SUCCESS);\n", "    }\n", "\n", "    private RemotingCommand buildCreateTopicRequest(String topic) {\n", "        CreateTopicRequestHeader requestHeader = new CreateTopicRequestHeader();\n", "        requestHeader.setTopic(topic);\n", "        requestHeader.setTopicFilterType(TopicFilterType.SINGLE_TAG.name());\n", "        requestHeader.setReadQueueNums(8);\n", "        requestHeader.setWriteQueueNums(8);\n", "        requestHeader.setPerm(PermName.PERM_READ | PermName.PERM_WRITE);\n", "\n", "        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.UPDATE_AND_CREATE_TOPIC, requestHeader);\n", "        request.makeCustomHeaderToNet();\n", "        return request;\n", "    }\n", "\n", "    private RemotingCommand buildDeleteTopicRequest(String topic) {\n", "        DeleteTopicRequestHeader requestHeader = new DeleteTopicRequestHeader();\n", "        requestHeader.setTopic(topic);\n", "\n", "        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.DELETE_TOPIC_IN_BROKER, requestHeader);\n", "        request.makeCustomHeaderToNet();\n", "        return request;\n", "    }\n", "\n", "    private MessageExt createDefaultMessageExt() {\n", "        MessageExt messageExt = new MessageExt();\n", "        messageExt.setMsgId(\"12345678\");\n", "        messageExt.setQueueId(0);\n", "        messageExt.setCommitLogOffset(123456789L);\n", "        messageExt.setQueueOffset(1234);\n", "        MessageAccessor.putProperty(messageExt, MessageConst.PROPERTY_REAL_QUEUE_ID, \"0\");\n", "        MessageAccessor.putProperty(messageExt, MessageConst.PROPERTY_REAL_TOPIC, \"testTopic\");\n", "        MessageAccessor.putProperty(messageExt, MessageConst.PROPERTY_TRANSACTION_CHECK_TIMES, \"15\");\n", "        return messageExt;\n", "    }\n", "\n", "    private SelectMappedBufferResult createSelectMappedBufferResult() {\n", "        SelectMappedBufferResult result = new SelectMappedBufferResult(0, ByteBuffer.allocate(1024), 0, new MappedFile());\n", "        return result;\n", "    }\n", "\n", "    private ResumeCheckHalfMessageRequestHeader createResumeCheckHalfMessageRequestHeader() {\n", "        ResumeCheckHalfMessageRequestHeader header = new ResumeCheckHalfMessageRequestHeader();\n", "        header.setMsgId(\"C0A803CA00002A9F0000000000031367\");\n", "        return header;\n", "    }\n", "\n", "    private RemotingCommand createResumeCheckHalfMessageCommand() {\n", "        ResumeCheckHalfMessageRequestHeader header = createResumeCheckHalfMessageRequestHeader();\n", "        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.RESUME_CHECK_HALF_MESSAGE, header);\n", "        request.makeCustomHeaderToNet();\n", "        return request;\n", "    }\n", "}\n"], "method_lines_dic": {"AdminBrokerProcessor::::rejectRequest()": [244, 247], "AdminBrokerProcessor::::cleanExpiredConsumeQueue()": [1127, 1135], "AdminBrokerProcessor::::cleanUnusedTopic()": [1137, 1145], "AdminBrokerProcessor::::prepareRuntimeInfo()": [1386, 1442]}, "test_method_lines_dic": {"AdminBrokerProcessorTest::::init()": [81, 97], "AdminBrokerProcessorTest::::testProcessRequest_success()": [99, 107], "AdminBrokerProcessorTest::::testProcessRequest_fail()": [109, 117], "AdminBrokerProcessorTest::::testUpdateAndCreateTopic()": [119, 140], "AdminBrokerProcessorTest::::testDeleteTopic()": [142, 156], "AdminBrokerProcessorTest::::buildCreateTopicRequest(java.lang.String)": [158, 169], "AdminBrokerProcessorTest::::buildDeleteTopicRequest(java.lang.String)": [171, 178], "AdminBrokerProcessorTest::::createDefaultMessageExt()": [180, 190], "AdminBrokerProcessorTest::::createSelectMappedBufferResult()": [192, 195], "AdminBrokerProcessorTest::::createResumeCheckHalfMessageRequestHeader()": [197, 201], "AdminBrokerProcessorTest::::createResumeCheckHalfMessageCommand()": [203, 208]}, "reverse_method_lines_dic": {"244": "AdminBrokerProcessor::::rejectRequest()", "245": "AdminBrokerProcessor::::rejectRequest()", "246": "AdminBrokerProcessor::::rejectRequest()", "247": "AdminBrokerProcessor::::rejectRequest()", "1127": "AdminBrokerProcessor::::cleanExpiredConsumeQueue()", "1128": "AdminBrokerProcessor::::cleanExpiredConsumeQueue()", "1129": "AdminBrokerProcessor::::cleanExpiredConsumeQueue()", "1130": "AdminBrokerProcessor::::cleanExpiredConsumeQueue()", "1131": "AdminBrokerProcessor::::cleanExpiredConsumeQueue()", "1132": "AdminBrokerProcessor::::cleanExpiredConsumeQueue()", "1133": "AdminBrokerProcessor::::cleanExpiredConsumeQueue()", "1134": "AdminBrokerProcessor::::cleanExpiredConsumeQueue()", "1135": "AdminBrokerProcessor::::cleanExpiredConsumeQueue()", "1137": "AdminBrokerProcessor::::cleanUnusedTopic()", "1138": "AdminBrokerProcessor::::cleanUnusedTopic()", "1139": "AdminBrokerProcessor::::cleanUnusedTopic()", "1140": "AdminBrokerProcessor::::cleanUnusedTopic()", "1141": "AdminBrokerProcessor::::cleanUnusedTopic()", "1142": "AdminBrokerProcessor::::cleanUnusedTopic()", "1143": "AdminBrokerProcessor::::cleanUnusedTopic()", "1144": "AdminBrokerProcessor::::cleanUnusedTopic()", "1145": "AdminBrokerProcessor::::cleanUnusedTopic()", "1386": "AdminBrokerProcessor::::prepareRuntimeInfo()", "1387": "AdminBrokerProcessor::::prepareRuntimeInfo()", "1388": "AdminBrokerProcessor::::prepareRuntimeInfo()", "1389": "AdminBrokerProcessor::::prepareRuntimeInfo()", "1390": "AdminBrokerProcessor::::prepareRuntimeInfo()", "1391": "AdminBrokerProcessor::::prepareRuntimeInfo()", "1392": "AdminBrokerProcessor::::prepareRuntimeInfo()", "1393": "AdminBrokerProcessor::::prepareRuntimeInfo()", "1394": "AdminBrokerProcessor::::prepareRuntimeInfo()", "1395": "AdminBrokerProcessor::::prepareRuntimeInfo()", "1396": "AdminBrokerProcessor::::prepareRuntimeInfo()", "1397": "AdminBrokerProcessor::::prepareRuntimeInfo()", "1398": "AdminBrokerProcessor::::prepareRuntimeInfo()", "1399": "AdminBrokerProcessor::::prepareRuntimeInfo()", "1400": "AdminBrokerProcessor::::prepareRuntimeInfo()", "1401": "AdminBrokerProcessor::::prepareRuntimeInfo()", "1402": "AdminBrokerProcessor::::prepareRuntimeInfo()", "1403": "AdminBrokerProcessor::::prepareRuntimeInfo()", "1404": "AdminBrokerProcessor::::prepareRuntimeInfo()", "1405": "AdminBrokerProcessor::::prepareRuntimeInfo()", "1406": "AdminBrokerProcessor::::prepareRuntimeInfo()", "1407": "AdminBrokerProcessor::::prepareRuntimeInfo()", "1408": "AdminBrokerProcessor::::prepareRuntimeInfo()", "1409": "AdminBrokerProcessor::::prepareRuntimeInfo()", "1410": "AdminBrokerProcessor::::prepareRuntimeInfo()", "1411": "AdminBrokerProcessor::::prepareRuntimeInfo()", "1412": "AdminBrokerProcessor::::prepareRuntimeInfo()", "1413": "AdminBrokerProcessor::::prepareRuntimeInfo()", "1414": "AdminBrokerProcessor::::prepareRuntimeInfo()", "1415": "AdminBrokerProcessor::::prepareRuntimeInfo()", "1416": "AdminBrokerProcessor::::prepareRuntimeInfo()", "1417": "AdminBrokerProcessor::::prepareRuntimeInfo()", "1418": "AdminBrokerProcessor::::prepareRuntimeInfo()", "1419": "AdminBrokerProcessor::::prepareRuntimeInfo()", "1420": "AdminBrokerProcessor::::prepareRuntimeInfo()", "1421": "AdminBrokerProcessor::::prepareRuntimeInfo()", "1422": "AdminBrokerProcessor::::prepareRuntimeInfo()", "1423": "AdminBrokerProcessor::::prepareRuntimeInfo()", "1424": "AdminBrokerProcessor::::prepareRuntimeInfo()", "1425": "AdminBrokerProcessor::::prepareRuntimeInfo()", "1426": "AdminBrokerProcessor::::prepareRuntimeInfo()", "1427": "AdminBrokerProcessor::::prepareRuntimeInfo()", "1428": "AdminBrokerProcessor::::prepareRuntimeInfo()", "1429": "AdminBrokerProcessor::::prepareRuntimeInfo()", "1430": "AdminBrokerProcessor::::prepareRuntimeInfo()", "1431": "AdminBrokerProcessor::::prepareRuntimeInfo()", "1432": "AdminBrokerProcessor::::prepareRuntimeInfo()", "1433": "AdminBrokerProcessor::::prepareRuntimeInfo()", "1434": "AdminBrokerProcessor::::prepareRuntimeInfo()", "1435": "AdminBrokerProcessor::::prepareRuntimeInfo()", "1436": "AdminBrokerProcessor::::prepareRuntimeInfo()", "1437": "AdminBrokerProcessor::::prepareRuntimeInfo()", "1438": "AdminBrokerProcessor::::prepareRuntimeInfo()", "1439": "AdminBrokerProcessor::::prepareRuntimeInfo()", "1440": "AdminBrokerProcessor::::prepareRuntimeInfo()", "1441": "AdminBrokerProcessor::::prepareRuntimeInfo()", "1442": "AdminBrokerProcessor::::prepareRuntimeInfo()"}, "test_reverse_method_lines_dic": {"81": "AdminBrokerProcessorTest::::init()", "82": "AdminBrokerProcessorTest::::init()", "83": "AdminBrokerProcessorTest::::init()", "84": "AdminBrokerProcessorTest::::init()", "85": "AdminBrokerProcessorTest::::init()", "86": "AdminBrokerProcessorTest::::init()", "87": "AdminBrokerProcessorTest::::init()", "88": "AdminBrokerProcessorTest::::init()", "89": "AdminBrokerProcessorTest::::init()", "90": "AdminBrokerProcessorTest::::init()", "91": "AdminBrokerProcessorTest::::init()", "92": "AdminBrokerProcessorTest::::init()", "93": "AdminBrokerProcessorTest::::init()", "94": "AdminBrokerProcessorTest::::init()", "95": "AdminBrokerProcessorTest::::init()", "96": "AdminBrokerProcessorTest::::init()", "97": "AdminBrokerProcessorTest::::init()", "99": "AdminBrokerProcessorTest::::testProcessRequest_success()", "100": "AdminBrokerProcessorTest::::testProcessRequest_success()", "101": "AdminBrokerProcessorTest::::testProcessRequest_success()", "102": "AdminBrokerProcessorTest::::testProcessRequest_success()", "103": "AdminBrokerProcessorTest::::testProcessRequest_success()", "104": "AdminBrokerProcessorTest::::testProcessRequest_success()", "105": "AdminBrokerProcessorTest::::testProcessRequest_success()", "106": "AdminBrokerProcessorTest::::testProcessRequest_success()", "107": "AdminBrokerProcessorTest::::testProcessRequest_success()", "109": "AdminBrokerProcessorTest::::testProcessRequest_fail()", "110": "AdminBrokerProcessorTest::::testProcessRequest_fail()", "111": "AdminBrokerProcessorTest::::testProcessRequest_fail()", "112": "AdminBrokerProcessorTest::::testProcessRequest_fail()", "113": "AdminBrokerProcessorTest::::testProcessRequest_fail()", "114": "AdminBrokerProcessorTest::::testProcessRequest_fail()", "115": "AdminBrokerProcessorTest::::testProcessRequest_fail()", "116": "AdminBrokerProcessorTest::::testProcessRequest_fail()", "117": "AdminBrokerProcessorTest::::testProcessRequest_fail()", "119": "AdminBrokerProcessorTest::::testUpdateAndCreateTopic()", "120": "AdminBrokerProcessorTest::::testUpdateAndCreateTopic()", "121": "AdminBrokerProcessorTest::::testUpdateAndCreateTopic()", "122": "AdminBrokerProcessorTest::::testUpdateAndCreateTopic()", "123": "AdminBrokerProcessorTest::::testUpdateAndCreateTopic()", "124": "AdminBrokerProcessorTest::::testUpdateAndCreateTopic()", "125": "AdminBrokerProcessorTest::::testUpdateAndCreateTopic()", "126": "AdminBrokerProcessorTest::::testUpdateAndCreateTopic()", "127": "AdminBrokerProcessorTest::::testUpdateAndCreateTopic()", "128": "AdminBrokerProcessorTest::::testUpdateAndCreateTopic()", "129": "AdminBrokerProcessorTest::::testUpdateAndCreateTopic()", "130": "AdminBrokerProcessorTest::::testUpdateAndCreateTopic()", "131": "AdminBrokerProcessorTest::::testUpdateAndCreateTopic()", "132": "AdminBrokerProcessorTest::::testUpdateAndCreateTopic()", "133": "AdminBrokerProcessorTest::::testUpdateAndCreateTopic()", "134": "AdminBrokerProcessorTest::::testUpdateAndCreateTopic()", "135": "AdminBrokerProcessorTest::::testUpdateAndCreateTopic()", "136": "AdminBrokerProcessorTest::::testUpdateAndCreateTopic()", "137": "AdminBrokerProcessorTest::::testUpdateAndCreateTopic()", "138": "AdminBrokerProcessorTest::::testUpdateAndCreateTopic()", "139": "AdminBrokerProcessorTest::::testUpdateAndCreateTopic()", "140": "AdminBrokerProcessorTest::::testUpdateAndCreateTopic()", "142": "AdminBrokerProcessorTest::::testDeleteTopic()", "143": "AdminBrokerProcessorTest::::testDeleteTopic()", "144": "AdminBrokerProcessorTest::::testDeleteTopic()", "145": "AdminBrokerProcessorTest::::testDeleteTopic()", "146": "AdminBrokerProcessorTest::::testDeleteTopic()", "147": "AdminBrokerProcessorTest::::testDeleteTopic()", "148": "AdminBrokerProcessorTest::::testDeleteTopic()", "149": "AdminBrokerProcessorTest::::testDeleteTopic()", "150": "AdminBrokerProcessorTest::::testDeleteTopic()", "151": "AdminBrokerProcessorTest::::testDeleteTopic()", "152": "AdminBrokerProcessorTest::::testDeleteTopic()", "153": "AdminBrokerProcessorTest::::testDeleteTopic()", "154": "AdminBrokerProcessorTest::::testDeleteTopic()", "155": "AdminBrokerProcessorTest::::testDeleteTopic()", "156": "AdminBrokerProcessorTest::::testDeleteTopic()", "158": "AdminBrokerProcessorTest::::buildCreateTopicRequest(java.lang.String)", "159": "AdminBrokerProcessorTest::::buildCreateTopicRequest(java.lang.String)", "160": "AdminBrokerProcessorTest::::buildCreateTopicRequest(java.lang.String)", "161": "AdminBrokerProcessorTest::::buildCreateTopicRequest(java.lang.String)", "162": "AdminBrokerProcessorTest::::buildCreateTopicRequest(java.lang.String)", "163": "AdminBrokerProcessorTest::::buildCreateTopicRequest(java.lang.String)", "164": "AdminBrokerProcessorTest::::buildCreateTopicRequest(java.lang.String)", "165": "AdminBrokerProcessorTest::::buildCreateTopicRequest(java.lang.String)", "166": "AdminBrokerProcessorTest::::buildCreateTopicRequest(java.lang.String)", "167": "AdminBrokerProcessorTest::::buildCreateTopicRequest(java.lang.String)", "168": "AdminBrokerProcessorTest::::buildCreateTopicRequest(java.lang.String)", "169": "AdminBrokerProcessorTest::::buildCreateTopicRequest(java.lang.String)", "171": "AdminBrokerProcessorTest::::buildDeleteTopicRequest(java.lang.String)", "172": "AdminBrokerProcessorTest::::buildDeleteTopicRequest(java.lang.String)", "173": "AdminBrokerProcessorTest::::buildDeleteTopicRequest(java.lang.String)", "174": "AdminBrokerProcessorTest::::buildDeleteTopicRequest(java.lang.String)", "175": "AdminBrokerProcessorTest::::buildDeleteTopicRequest(java.lang.String)", "176": "AdminBrokerProcessorTest::::buildDeleteTopicRequest(java.lang.String)", "177": "AdminBrokerProcessorTest::::buildDeleteTopicRequest(java.lang.String)", "178": "AdminBrokerProcessorTest::::buildDeleteTopicRequest(java.lang.String)", "180": "AdminBrokerProcessorTest::::createDefaultMessageExt()", "181": "AdminBrokerProcessorTest::::createDefaultMessageExt()", "182": "AdminBrokerProcessorTest::::createDefaultMessageExt()", "183": "AdminBrokerProcessorTest::::createDefaultMessageExt()", "184": "AdminBrokerProcessorTest::::createDefaultMessageExt()", "185": "AdminBrokerProcessorTest::::createDefaultMessageExt()", "186": "AdminBrokerProcessorTest::::createDefaultMessageExt()", "187": "AdminBrokerProcessorTest::::createDefaultMessageExt()", "188": "AdminBrokerProcessorTest::::createDefaultMessageExt()", "189": "AdminBrokerProcessorTest::::createDefaultMessageExt()", "190": "AdminBrokerProcessorTest::::createDefaultMessageExt()", "192": "AdminBrokerProcessorTest::::createSelectMappedBufferResult()", "193": "AdminBrokerProcessorTest::::createSelectMappedBufferResult()", "194": "AdminBrokerProcessorTest::::createSelectMappedBufferResult()", "195": "AdminBrokerProcessorTest::::createSelectMappedBufferResult()", "197": "AdminBrokerProcessorTest::::createResumeCheckHalfMessageRequestHeader()", "198": "AdminBrokerProcessorTest::::createResumeCheckHalfMessageRequestHeader()", "199": "AdminBrokerProcessorTest::::createResumeCheckHalfMessageRequestHeader()", "200": "AdminBrokerProcessorTest::::createResumeCheckHalfMessageRequestHeader()", "201": "AdminBrokerProcessorTest::::createResumeCheckHalfMessageRequestHeader()", "203": "AdminBrokerProcessorTest::::createResumeCheckHalfMessageCommand()", "204": "AdminBrokerProcessorTest::::createResumeCheckHalfMessageCommand()", "205": "AdminBrokerProcessorTest::::createResumeCheckHalfMessageCommand()", "206": "AdminBrokerProcessorTest::::createResumeCheckHalfMessageCommand()", "207": "AdminBrokerProcessorTest::::createResumeCheckHalfMessageCommand()", "208": "AdminBrokerProcessorTest::::createResumeCheckHalfMessageCommand()"}, "tests": [{"test_lines": [99, 107], "covered_lines": [142, 145, 146, 147, 152, 234, 1567, 1568, 1569, 1570, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1583, 1584, 1585, 1596, 1597, 1600, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619]}, {"test_lines": [109, 117], "covered_lines": [142, 145, 146, 147, 152, 234, 1567, 1568, 1569, 1570, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1587, 1588, 1589, 1596, 1597, 1600, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619]}, {"test_lines": [119, 140], "covered_lines": [142, 145, 146, 147, 152, 154, 251, 252, 253, 254, 256, 258, 259, 261, 262, 265, 266, 267, 268, 269, 270, 272, 274, 276, 277]}, {"test_lines": [142, 156], "covered_lines": [142, 145, 146, 147, 152, 156, 282, 283, 284, 286, 288, 289, 292, 293, 296, 297, 298, 299, 302, 303, 304]}]}, "/bernard/dataset_construction/prep/repos/RocketMQC/broker/src/main/java/org/apache/rocketmq/broker/processor/ClientManageProcessor.java": {"class_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "package org.apache.rocketmq.broker.processor;\n", "\n", "import io.netty.channel.ChannelHandlerContext;\n", "import org.apache.rocketmq.broker.BrokerController;\n", "import org.apache.rocketmq.broker.client.ClientChannelInfo;\n", "import org.apache.rocketmq.common.MixAll;\n", "import org.apache.rocketmq.common.constant.LoggerName;\n", "import org.apache.rocketmq.common.constant.PermName;\n", "import org.apache.rocketmq.common.filter.ExpressionType;\n", "import org.apache.rocketmq.common.protocol.RequestCode;\n", "import org.apache.rocketmq.common.protocol.ResponseCode;\n", "import org.apache.rocketmq.common.protocol.body.CheckClientRequestBody;\n", "import org.apache.rocketmq.common.protocol.header.UnregisterClientRequestHeader;\n", "import org.apache.rocketmq.common.protocol.header.UnregisterClientResponseHeader;\n", "import org.apache.rocketmq.common.protocol.heartbeat.ConsumerData;\n", "import org.apache.rocketmq.common.protocol.heartbeat.HeartbeatData;\n", "import org.apache.rocketmq.common.protocol.heartbeat.ProducerData;\n", "import org.apache.rocketmq.common.protocol.heartbeat.SubscriptionData;\n", "import org.apache.rocketmq.common.subscription.SubscriptionGroupConfig;\n", "import org.apache.rocketmq.common.sysflag.TopicSysFlag;\n", "import org.apache.rocketmq.filter.FilterFactory;\n", "import org.apache.rocketmq.logging.InternalLogger;\n", "import org.apache.rocketmq.logging.InternalLoggerFactory;\n", "import org.apache.rocketmq.remoting.common.RemotingHelper;\n", "import org.apache.rocketmq.remoting.exception.RemotingCommandException;\n", "import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;\n", "import org.apache.rocketmq.remoting.netty.AsyncNettyRequestProcessor;\n", "import org.apache.rocketmq.remoting.protocol.RemotingCommand;\n", "\n", "public class ClientManageProcessor extends AsyncNettyRequestProcessor implements NettyRequestProcessor {\n", "    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);\n", "    private final BrokerController brokerController;\n", "\n", "    public ClientManageProcessor(final BrokerController brokerController) {\n", "        this.brokerController = brokerController;\n", "    }\n", "\n", "    @Override\n", "    public RemotingCommand processRequest(ChannelHandlerContext ctx, RemotingCommand request)\n", "        throws RemotingCommandException {\n", "        switch (request.getCode()) {\n", "            case RequestCode.HEART_BEAT:\n", "                return this.heartBeat(ctx, request);\n", "            case RequestCode.UNREGISTER_CLIENT:\n", "                return this.unregisterClient(ctx, request);\n", "            case RequestCode.CHECK_CLIENT_CONFIG:\n", "                return this.checkClientConfig(ctx, request);\n", "            default:\n", "                break;\n", "        }\n", "        return null;\n", "    }\n", "\n", "    @Override\n", "    public boolean rejectRequest() {\n", "        return false;\n", "    }\n", "\n", "    public RemotingCommand heartBeat(ChannelHandlerContext ctx, RemotingCommand request) {\n", "        RemotingCommand response = RemotingCommand.createResponseCommand(null);\n", "        HeartbeatData heartbeatData = HeartbeatData.decode(request.getBody(), HeartbeatData.class);\n", "        ClientChannelInfo clientChannelInfo = new ClientChannelInfo(\n", "            ctx.channel(),\n", "            heartbeatData.getClientID(),\n", "            request.getLanguage(),\n", "            request.getVersion()\n", "        );\n", "\n", "        for (ConsumerData data : heartbeatData.getConsumerDataSet()) {\n", "            SubscriptionGroupConfig subscriptionGroupConfig =\n", "                this.brokerController.getSubscriptionGroupManager().findSubscriptionGroupConfig(\n", "                    data.getGroupName());\n", "            boolean isNotifyConsumerIdsChangedEnable = true;\n", "            if (null != subscriptionGroupConfig) {\n", "                isNotifyConsumerIdsChangedEnable = subscriptionGroupConfig.isNotifyConsumerIdsChangedEnable();\n", "                int topicSysFlag = 0;\n", "                if (data.isUnitMode()) {\n", "                    topicSysFlag = TopicSysFlag.buildSysFlag(false, true);\n", "                }\n", "                String newTopic = MixAll.getRetryTopic(data.getGroupName());\n", "                this.brokerController.getTopicConfigManager().createTopicInSendMessageBackMethod(\n", "                    newTopic,\n", "                    subscriptionGroupConfig.getRetryQueueNums(),\n", "                    PermName.PERM_WRITE | PermName.PERM_READ, topicSysFlag);\n", "            }\n", "\n", "            boolean changed = this.brokerController.getConsumerManager().registerConsumer(\n", "                data.getGroupName(),\n", "                clientChannelInfo,\n", "                data.getConsumeType(),\n", "                data.getMessageModel(),\n", "                data.getConsumeFromWhere(),\n", "                data.getSubscriptionDataSet(),\n", "                isNotifyConsumerIdsChangedEnable\n", "            );\n", "\n", "            if (changed) {\n", "                log.info(\"registerConsumer info changed {} {}\",\n", "                    data.toString(),\n", "                    RemotingHelper.parseChannelRemoteAddr(ctx.channel())\n", "                );\n", "            }\n", "        }\n", "\n", "        for (ProducerData data : heartbeatData.getProducerDataSet()) {\n", "            this.brokerController.getProducerManager().registerProducer(data.getGroupName(),\n", "                clientChannelInfo);\n", "        }\n", "        response.setCode(ResponseCode.SUCCESS);\n", "        response.setRemark(null);\n", "        return response;\n", "    }\n", "\n", "    public RemotingCommand unregisterClient(ChannelHandlerContext ctx, RemotingCommand request)\n", "        throws RemotingCommandException {\n", "        final RemotingCommand response =\n", "            RemotingCommand.createResponseCommand(UnregisterClientResponseHeader.class);\n", "        final UnregisterClientRequestHeader requestHeader =\n", "            (UnregisterClientRequestHeader) request\n", "                .decodeCommandCustomHeader(UnregisterClientRequestHeader.class);\n", "\n", "        ClientChannelInfo clientChannelInfo = new ClientChannelInfo(\n", "            ctx.channel(),\n", "            requestHeader.getClientID(),\n", "            request.getLanguage(),\n", "            request.getVersion());\n", "        {\n", "            final String group = requestHeader.getProducerGroup();\n", "            if (group != null) {\n", "                this.brokerController.getProducerManager().unregisterProducer(group, clientChannelInfo);\n", "            }\n", "        }\n", "\n", "        {\n", "            final String group = requestHeader.getConsumerGroup();\n", "            if (group != null) {\n", "                SubscriptionGroupConfig subscriptionGroupConfig =\n", "                    this.brokerController.getSubscriptionGroupManager().findSubscriptionGroupConfig(group);\n", "                boolean isNotifyConsumerIdsChangedEnable = true;\n", "                if (null != subscriptionGroupConfig) {\n", "                    isNotifyConsumerIdsChangedEnable = subscriptionGroupConfig.isNotifyConsumerIdsChangedEnable();\n", "                }\n", "                this.brokerController.getConsumerManager().unregisterConsumer(group, clientChannelInfo, isNotifyConsumerIdsChangedEnable);\n", "            }\n", "        }\n", "\n", "        response.setCode(ResponseCode.SUCCESS);\n", "        response.setRemark(null);\n", "        return response;\n", "    }\n", "\n", "    public RemotingCommand checkClientConfig(ChannelHandlerContext ctx, RemotingCommand request)\n", "        throws RemotingCommandException {\n", "        final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n", "\n", "        CheckClientRequestBody requestBody = CheckClientRequestBody.decode(request.getBody(),\n", "            CheckClientRequestBody.class);\n", "\n", "        if (requestBody != null && requestBody.getSubscriptionData() != null) {\n", "            SubscriptionData subscriptionData = requestBody.getSubscriptionData();\n", "\n", "            if (ExpressionType.isTagType(subscriptionData.getExpressionType())) {\n", "                response.setCode(ResponseCode.SUCCESS);\n", "                response.setRemark(null);\n", "                return response;\n", "            }\n", "\n", "            if (!this.brokerController.getBrokerConfig().isEnablePropertyFilter()) {\n", "                response.setCode(ResponseCode.SYSTEM_ERROR);\n", "                response.setRemark(\"The broker does not support consumer to filter message by \" + subscriptionData.getExpressionType());\n", "                return response;\n", "            }\n", "\n", "            try {\n", "                FilterFactory.INSTANCE.get(subscriptionData.getExpressionType()).compile(subscriptionData.getSubString());\n", "            } catch (Exception e) {\n", "                log.warn(\"Client {}@{} filter message, but failed to compile expression! sub={}, error={}\",\n", "                    requestBody.getClientId(), requestBody.getGroup(), requestBody.getSubscriptionData(), e.getMessage());\n", "                response.setCode(ResponseCode.SUBSCRIPTION_PARSE_FAILED);\n", "                response.setRemark(e.getMessage());\n", "                return response;\n", "            }\n", "        }\n", "\n", "        response.setCode(ResponseCode.SUCCESS);\n", "        response.setRemark(null);\n", "        return response;\n", "    }\n", "}\n"], "test_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "package org.apache.rocketmq.broker.processor;\n", "\n", "import io.netty.channel.Channel;\n", "import io.netty.channel.ChannelHandlerContext;\n", "import java.util.HashMap;\n", "import java.util.Map;\n", "import java.util.UUID;\n", "import org.apache.rocketmq.broker.BrokerController;\n", "import org.apache.rocketmq.broker.client.ClientChannelInfo;\n", "import org.apache.rocketmq.broker.client.ConsumerGroupInfo;\n", "import org.apache.rocketmq.common.BrokerConfig;\n", "import org.apache.rocketmq.common.protocol.RequestCode;\n", "import org.apache.rocketmq.common.protocol.ResponseCode;\n", "import org.apache.rocketmq.common.protocol.header.UnregisterClientRequestHeader;\n", "import org.apache.rocketmq.common.protocol.heartbeat.ConsumerData;\n", "import org.apache.rocketmq.remoting.exception.RemotingCommandException;\n", "import org.apache.rocketmq.remoting.netty.NettyClientConfig;\n", "import org.apache.rocketmq.remoting.netty.NettyServerConfig;\n", "import org.apache.rocketmq.remoting.protocol.LanguageCode;\n", "import org.apache.rocketmq.remoting.protocol.RemotingCommand;\n", "import org.apache.rocketmq.store.config.MessageStoreConfig;\n", "import org.junit.Before;\n", "import org.junit.Test;\n", "import org.junit.runner.RunWith;\n", "import org.mockito.Mock;\n", "import org.mockito.Spy;\n", "import org.mockito.junit.MockitoJUnitRunner;\n", "\n", "import static org.apache.rocketmq.broker.processor.PullMessageProcessorTest.createConsumerData;\n", "import static org.assertj.core.api.Assertions.assertThat;\n", "import static org.mockito.Mockito.when;\n", "\n", "@RunWith(MockitoJUnitRunner.class)\n", "public class ClientManageProcessorTest {\n", "    private ClientManageProcessor clientManageProcessor;\n", "    @Spy\n", "    private BrokerController brokerController = new BrokerController(new BrokerConfig(), new NettyServerConfig(), new NettyClientConfig(), new MessageStoreConfig());\n", "    @Mock\n", "    private ChannelHandlerContext handlerContext;\n", "    @Mock\n", "    private Channel channel;\n", "\n", "    private ClientChannelInfo clientChannelInfo;\n", "    private String clientId = UUID.randomUUID().toString();\n", "    private String group = \"FooBarGroup\";\n", "    private String topic = \"FooBar\";\n", "\n", "    @Before\n", "    public void init() {\n", "        when(handlerContext.channel()).thenReturn(channel);\n", "        clientManageProcessor = new ClientManageProcessor(brokerController);\n", "        clientChannelInfo = new ClientChannelInfo(channel, clientId, LanguageCode.JAVA, 100);\n", "        brokerController.getProducerManager().registerProducer(group, clientChannelInfo);\n", "\n", "        ConsumerData consumerData = createConsumerData(group, topic);\n", "        brokerController.getConsumerManager().registerConsumer(\n", "            consumerData.getGroupName(),\n", "            clientChannelInfo,\n", "            consumerData.getConsumeType(),\n", "            consumerData.getMessageModel(),\n", "            consumerData.getConsumeFromWhere(),\n", "            consumerData.getSubscriptionDataSet(),\n", "            false);\n", "    }\n", "\n", "    @Test\n", "    public void processRequest_UnRegisterProducer() throws Exception {\n", "        brokerController.getProducerManager().registerProducer(group, clientChannelInfo);\n", "        Map<Channel, ClientChannelInfo> channelMap = brokerController.getProducerManager().getGroupChannelTable().get(group);\n", "        assertThat(channelMap).isNotNull();\n", "        assertThat(channelMap.get(channel)).isEqualTo(clientChannelInfo);\n", "\n", "        RemotingCommand request = createUnRegisterProducerCommand();\n", "        RemotingCommand response = clientManageProcessor.processRequest(handlerContext, request);\n", "        assertThat(response).isNotNull();\n", "        assertThat(response.getCode()).isEqualTo(ResponseCode.SUCCESS);\n", "\n", "        channelMap = brokerController.getProducerManager().getGroupChannelTable().get(group);\n", "        assertThat(channelMap).isNull();\n", "    }\n", "\n", "    @Test\n", "    public void processRequest_UnRegisterConsumer() throws RemotingCommandException {\n", "        ConsumerGroupInfo consumerGroupInfo = brokerController.getConsumerManager().getConsumerGroupInfo(group);\n", "        assertThat(consumerGroupInfo).isNotNull();\n", "\n", "        RemotingCommand request = createUnRegisterConsumerCommand();\n", "        RemotingCommand response = clientManageProcessor.processRequest(handlerContext, request);\n", "        assertThat(response).isNotNull();\n", "        assertThat(response.getCode()).isEqualTo(ResponseCode.SUCCESS);\n", "\n", "        consumerGroupInfo = brokerController.getConsumerManager().getConsumerGroupInfo(group);\n", "        assertThat(consumerGroupInfo).isNull();\n", "    }\n", "\n", "    private RemotingCommand createUnRegisterProducerCommand() {\n", "        UnregisterClientRequestHeader requestHeader = new UnregisterClientRequestHeader();\n", "        requestHeader.setClientID(clientId);\n", "        requestHeader.setProducerGroup(group);\n", "        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.UNREGISTER_CLIENT, requestHeader);\n", "        request.setLanguage(LanguageCode.JAVA);\n", "        request.setVersion(100);\n", "        request.makeCustomHeaderToNet();\n", "        return request;\n", "    }\n", "\n", "    private RemotingCommand createUnRegisterConsumerCommand() {\n", "        UnregisterClientRequestHeader requestHeader = new UnregisterClientRequestHeader();\n", "        requestHeader.setClientID(clientId);\n", "        requestHeader.setConsumerGroup(group);\n", "        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.UNREGISTER_CLIENT, requestHeader);\n", "        request.setLanguage(LanguageCode.JAVA);\n", "        request.setVersion(100);\n", "        request.makeCustomHeaderToNet();\n", "        return request;\n", "    }\n", "}"], "method_lines_dic": {"ClientManageProcessor::::rejectRequest()": [70, 73]}, "test_method_lines_dic": {"ClientManageProcessorTest::::init()": [64, 80], "ClientManageProcessorTest::::processRequest_UnRegisterProducer()": [82, 96], "ClientManageProcessorTest::::processRequest_UnRegisterConsumer()": [98, 110], "ClientManageProcessorTest::::createUnRegisterProducerCommand()": [112, 121], "ClientManageProcessorTest::::createUnRegisterConsumerCommand()": [123, 132]}, "reverse_method_lines_dic": {"70": "ClientManageProcessor::::rejectRequest()", "71": "ClientManageProcessor::::rejectRequest()", "72": "ClientManageProcessor::::rejectRequest()", "73": "ClientManageProcessor::::rejectRequest()"}, "test_reverse_method_lines_dic": {"64": "ClientManageProcessorTest::::init()", "65": "ClientManageProcessorTest::::init()", "66": "ClientManageProcessorTest::::init()", "67": "ClientManageProcessorTest::::init()", "68": "ClientManageProcessorTest::::init()", "69": "ClientManageProcessorTest::::init()", "70": "ClientManageProcessorTest::::init()", "71": "ClientManageProcessorTest::::init()", "72": "ClientManageProcessorTest::::init()", "73": "ClientManageProcessorTest::::init()", "74": "ClientManageProcessorTest::::init()", "75": "ClientManageProcessorTest::::init()", "76": "ClientManageProcessorTest::::init()", "77": "ClientManageProcessorTest::::init()", "78": "ClientManageProcessorTest::::init()", "79": "ClientManageProcessorTest::::init()", "80": "ClientManageProcessorTest::::init()", "82": "ClientManageProcessorTest::::processRequest_UnRegisterProducer()", "83": "ClientManageProcessorTest::::processRequest_UnRegisterProducer()", "84": "ClientManageProcessorTest::::processRequest_UnRegisterProducer()", "85": "ClientManageProcessorTest::::processRequest_UnRegisterProducer()", "86": "ClientManageProcessorTest::::processRequest_UnRegisterProducer()", "87": "ClientManageProcessorTest::::processRequest_UnRegisterProducer()", "88": "ClientManageProcessorTest::::processRequest_UnRegisterProducer()", "89": "ClientManageProcessorTest::::processRequest_UnRegisterProducer()", "90": "ClientManageProcessorTest::::processRequest_UnRegisterProducer()", "91": "ClientManageProcessorTest::::processRequest_UnRegisterProducer()", "92": "ClientManageProcessorTest::::processRequest_UnRegisterProducer()", "93": "ClientManageProcessorTest::::processRequest_UnRegisterProducer()", "94": "ClientManageProcessorTest::::processRequest_UnRegisterProducer()", "95": "ClientManageProcessorTest::::processRequest_UnRegisterProducer()", "96": "ClientManageProcessorTest::::processRequest_UnRegisterProducer()", "98": "ClientManageProcessorTest::::processRequest_UnRegisterConsumer()", "99": "ClientManageProcessorTest::::processRequest_UnRegisterConsumer()", "100": "ClientManageProcessorTest::::processRequest_UnRegisterConsumer()", "101": "ClientManageProcessorTest::::processRequest_UnRegisterConsumer()", "102": "ClientManageProcessorTest::::processRequest_UnRegisterConsumer()", "103": "ClientManageProcessorTest::::processRequest_UnRegisterConsumer()", "104": "ClientManageProcessorTest::::processRequest_UnRegisterConsumer()", "105": "ClientManageProcessorTest::::processRequest_UnRegisterConsumer()", "106": "ClientManageProcessorTest::::processRequest_UnRegisterConsumer()", "107": "ClientManageProcessorTest::::processRequest_UnRegisterConsumer()", "108": "ClientManageProcessorTest::::processRequest_UnRegisterConsumer()", "109": "ClientManageProcessorTest::::processRequest_UnRegisterConsumer()", "110": "ClientManageProcessorTest::::processRequest_UnRegisterConsumer()", "112": "ClientManageProcessorTest::::createUnRegisterProducerCommand()", "113": "ClientManageProcessorTest::::createUnRegisterProducerCommand()", "114": "ClientManageProcessorTest::::createUnRegisterProducerCommand()", "115": "ClientManageProcessorTest::::createUnRegisterProducerCommand()", "116": "ClientManageProcessorTest::::createUnRegisterProducerCommand()", "117": "ClientManageProcessorTest::::createUnRegisterProducerCommand()", "118": "ClientManageProcessorTest::::createUnRegisterProducerCommand()", "119": "ClientManageProcessorTest::::createUnRegisterProducerCommand()", "120": "ClientManageProcessorTest::::createUnRegisterProducerCommand()", "121": "ClientManageProcessorTest::::createUnRegisterProducerCommand()", "123": "ClientManageProcessorTest::::createUnRegisterConsumerCommand()", "124": "ClientManageProcessorTest::::createUnRegisterConsumerCommand()", "125": "ClientManageProcessorTest::::createUnRegisterConsumerCommand()", "126": "ClientManageProcessorTest::::createUnRegisterConsumerCommand()", "127": "ClientManageProcessorTest::::createUnRegisterConsumerCommand()", "128": "ClientManageProcessorTest::::createUnRegisterConsumerCommand()", "129": "ClientManageProcessorTest::::createUnRegisterConsumerCommand()", "130": "ClientManageProcessorTest::::createUnRegisterConsumerCommand()", "131": "ClientManageProcessorTest::::createUnRegisterConsumerCommand()", "132": "ClientManageProcessorTest::::createUnRegisterConsumerCommand()"}, "tests": [{"test_lines": [82, 96], "covered_lines": [47, 50, 51, 52, 57, 61, 132, 133, 134, 136, 138, 139, 140, 141, 142, 144, 145, 146, 151, 152, 163, 164, 165]}, {"test_lines": [98, 110], "covered_lines": [47, 50, 51, 52, 57, 61, 132, 133, 134, 136, 138, 139, 140, 141, 142, 144, 145, 151, 152, 153, 154, 155, 156, 157, 159, 163, 164, 165]}]}, "/bernard/dataset_construction/prep/repos/RocketMQC/broker/src/main/java/org/apache/rocketmq/broker/pagecache/ManyMessageTransfer.java": {"class_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "package org.apache.rocketmq.broker.pagecache;\n", "\n", "import io.netty.channel.FileRegion;\n", "import io.netty.util.AbstractReferenceCounted;\n", "import java.io.IOException;\n", "import java.nio.ByteBuffer;\n", "import java.nio.channels.WritableByteChannel;\n", "import java.util.List;\n", "import org.apache.rocketmq.store.GetMessageResult;\n", "\n", "public class ManyMessageTransfer extends AbstractReferenceCounted implements FileRegion {\n", "    private final ByteBuffer byteBufferHeader;\n", "    private final GetMessageResult getMessageResult;\n", "\n", "    /**\n", "     * Bytes which were transferred already.\n", "     */\n", "    private long transferred;\n", "\n", "    public ManyMessageTransfer(ByteBuffer byteBufferHeader, GetMessageResult getMessageResult) {\n", "        this.byteBufferHeader = byteBufferHeader;\n", "        this.getMessageResult = getMessageResult;\n", "    }\n", "\n", "    @Override\n", "    public long position() {\n", "        int pos = byteBufferHeader.position();\n", "        List<ByteBuffer> messageBufferList = this.getMessageResult.getMessageBufferList();\n", "        for (ByteBuffer bb : messageBufferList) {\n", "            pos += bb.position();\n", "        }\n", "        return pos;\n", "    }\n", "\n", "    @Override\n", "    public long transfered() {\n", "        return transferred;\n", "    }\n", "\n", "    @Override\n", "    public long count() {\n", "        return byteBufferHeader.limit() + this.getMessageResult.getBufferTotalSize();\n", "    }\n", "\n", "    @Override\n", "    public long transferTo(WritableByteChannel target, long position) throws IOException {\n", "        if (this.byteBufferHeader.hasRemaining()) {\n", "            transferred += target.write(this.byteBufferHeader);\n", "            return transferred;\n", "        } else {\n", "            List<ByteBuffer> messageBufferList = this.getMessageResult.getMessageBufferList();\n", "            for (ByteBuffer bb : messageBufferList) {\n", "                if (bb.hasRemaining()) {\n", "                    transferred += target.write(bb);\n", "                    return transferred;\n", "                }\n", "            }\n", "        }\n", "\n", "        return 0;\n", "    }\n", "\n", "    public void close() {\n", "        this.deallocate();\n", "    }\n", "\n", "    @Override\n", "    protected void deallocate() {\n", "        this.getMessageResult.release();\n", "    }\n", "}\n"], "test_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package org.apache.rocketmq.broker.pagecache;\n", "\n", "import java.nio.ByteBuffer;\n", "import org.apache.rocketmq.store.GetMessageResult;\n", "import org.junit.Assert;\n", "import org.junit.Test;\n", "\n", "public class ManyMessageTransferTest {\n", "\n", "    @Test\n", "    public void ManyMessageTransferBuilderTest(){\n", "        ByteBuffer byteBuffer = ByteBuffer.allocate(20);\n", "        byteBuffer.putInt(20);\n", "        GetMessageResult getMessageResult = new GetMessageResult();\n", "        ManyMessageTransfer manyMessageTransfer = new ManyMessageTransfer(byteBuffer,getMessageResult);\n", "    }\n", "\n", "    @Test\n", "    public void ManyMessageTransferPosTest(){\n", "        ByteBuffer byteBuffer = ByteBuffer.allocate(20);\n", "        byteBuffer.putInt(20);\n", "        GetMessageResult getMessageResult = new GetMessageResult();\n", "        ManyMessageTransfer manyMessageTransfer = new ManyMessageTransfer(byteBuffer,getMessageResult);\n", "        Assert.assertEquals(manyMessageTransfer.position(),4);\n", "    }\n", "\n", "    @Test\n", "    public void ManyMessageTransferCountTest(){\n", "        ByteBuffer byteBuffer = ByteBuffer.allocate(20);\n", "        byteBuffer.putInt(20);\n", "        GetMessageResult getMessageResult = new GetMessageResult();\n", "        ManyMessageTransfer manyMessageTransfer = new ManyMessageTransfer(byteBuffer,getMessageResult);\n", "\n", "        Assert.assertEquals(manyMessageTransfer.count(),20);\n", "\n", "    }\n", "\n", "    @Test\n", "    public void ManyMessageTransferCloseTest(){\n", "        ByteBuffer byteBuffer = ByteBuffer.allocate(20);\n", "        byteBuffer.putInt(20);\n", "        GetMessageResult getMessageResult = new GetMessageResult();\n", "        ManyMessageTransfer manyMessageTransfer = new ManyMessageTransfer(byteBuffer,getMessageResult);\n", "        manyMessageTransfer.close();\n", "        manyMessageTransfer.deallocate();\n", "    }\n", "}\n"], "method_lines_dic": {"ManyMessageTransfer::::position()": [41, 49], "ManyMessageTransfer::::transfered()": [51, 54], "ManyMessageTransfer::::count()": [56, 59], "ManyMessageTransfer::::transferTo(java.nio.channels.WritableByteChannel,long)": [61, 77], "ManyMessageTransfer::::close()": [79, 81], "ManyMessageTransfer::::deallocate()": [83, 86]}, "test_method_lines_dic": {"ManyMessageTransferTest::::ManyMessageTransferBuilderTest()": [27, 33], "ManyMessageTransferTest::::ManyMessageTransferPosTest()": [35, 42], "ManyMessageTransferTest::::ManyMessageTransferCountTest()": [44, 53], "ManyMessageTransferTest::::ManyMessageTransferCloseTest()": [55, 63]}, "reverse_method_lines_dic": {"41": "ManyMessageTransfer::::position()", "42": "ManyMessageTransfer::::position()", "43": "ManyMessageTransfer::::position()", "44": "ManyMessageTransfer::::position()", "45": "ManyMessageTransfer::::position()", "46": "ManyMessageTransfer::::position()", "47": "ManyMessageTransfer::::position()", "48": "ManyMessageTransfer::::position()", "49": "ManyMessageTransfer::::position()", "51": "ManyMessageTransfer::::transfered()", "52": "ManyMessageTransfer::::transfered()", "53": "ManyMessageTransfer::::transfered()", "54": "ManyMessageTransfer::::transfered()", "56": "ManyMessageTransfer::::count()", "57": "ManyMessageTransfer::::count()", "58": "ManyMessageTransfer::::count()", "59": "ManyMessageTransfer::::count()", "61": "ManyMessageTransfer::::transferTo(java.nio.channels.WritableByteChannel,long)", "62": "ManyMessageTransfer::::transferTo(java.nio.channels.WritableByteChannel,long)", "63": "ManyMessageTransfer::::transferTo(java.nio.channels.WritableByteChannel,long)", "64": "ManyMessageTransfer::::transferTo(java.nio.channels.WritableByteChannel,long)", "65": "ManyMessageTransfer::::transferTo(java.nio.channels.WritableByteChannel,long)", "66": "ManyMessageTransfer::::transferTo(java.nio.channels.WritableByteChannel,long)", "67": "ManyMessageTransfer::::transferTo(java.nio.channels.WritableByteChannel,long)", "68": "ManyMessageTransfer::::transferTo(java.nio.channels.WritableByteChannel,long)", "69": "ManyMessageTransfer::::transferTo(java.nio.channels.WritableByteChannel,long)", "70": "ManyMessageTransfer::::transferTo(java.nio.channels.WritableByteChannel,long)", "71": "ManyMessageTransfer::::transferTo(java.nio.channels.WritableByteChannel,long)", "72": "ManyMessageTransfer::::transferTo(java.nio.channels.WritableByteChannel,long)", "73": "ManyMessageTransfer::::transferTo(java.nio.channels.WritableByteChannel,long)", "74": "ManyMessageTransfer::::transferTo(java.nio.channels.WritableByteChannel,long)", "75": "ManyMessageTransfer::::transferTo(java.nio.channels.WritableByteChannel,long)", "76": "ManyMessageTransfer::::transferTo(java.nio.channels.WritableByteChannel,long)", "77": "ManyMessageTransfer::::transferTo(java.nio.channels.WritableByteChannel,long)", "79": "ManyMessageTransfer::::close()", "80": "ManyMessageTransfer::::close()", "81": "ManyMessageTransfer::::close()", "83": "ManyMessageTransfer::::deallocate()", "84": "ManyMessageTransfer::::deallocate()", "85": "ManyMessageTransfer::::deallocate()", "86": "ManyMessageTransfer::::deallocate()"}, "test_reverse_method_lines_dic": {"27": "ManyMessageTransferTest::::ManyMessageTransferBuilderTest()", "28": "ManyMessageTransferTest::::ManyMessageTransferBuilderTest()", "29": "ManyMessageTransferTest::::ManyMessageTransferBuilderTest()", "30": "ManyMessageTransferTest::::ManyMessageTransferBuilderTest()", "31": "ManyMessageTransferTest::::ManyMessageTransferBuilderTest()", "32": "ManyMessageTransferTest::::ManyMessageTransferBuilderTest()", "33": "ManyMessageTransferTest::::ManyMessageTransferBuilderTest()", "35": "ManyMessageTransferTest::::ManyMessageTransferPosTest()", "36": "ManyMessageTransferTest::::ManyMessageTransferPosTest()", "37": "ManyMessageTransferTest::::ManyMessageTransferPosTest()", "38": "ManyMessageTransferTest::::ManyMessageTransferPosTest()", "39": "ManyMessageTransferTest::::ManyMessageTransferPosTest()", "40": "ManyMessageTransferTest::::ManyMessageTransferPosTest()", "41": "ManyMessageTransferTest::::ManyMessageTransferPosTest()", "42": "ManyMessageTransferTest::::ManyMessageTransferPosTest()", "44": "ManyMessageTransferTest::::ManyMessageTransferCountTest()", "45": "ManyMessageTransferTest::::ManyMessageTransferCountTest()", "46": "ManyMessageTransferTest::::ManyMessageTransferCountTest()", "47": "ManyMessageTransferTest::::ManyMessageTransferCountTest()", "48": "ManyMessageTransferTest::::ManyMessageTransferCountTest()", "49": "ManyMessageTransferTest::::ManyMessageTransferCountTest()", "50": "ManyMessageTransferTest::::ManyMessageTransferCountTest()", "51": "ManyMessageTransferTest::::ManyMessageTransferCountTest()", "52": "ManyMessageTransferTest::::ManyMessageTransferCountTest()", "53": "ManyMessageTransferTest::::ManyMessageTransferCountTest()", "55": "ManyMessageTransferTest::::ManyMessageTransferCloseTest()", "56": "ManyMessageTransferTest::::ManyMessageTransferCloseTest()", "57": "ManyMessageTransferTest::::ManyMessageTransferCloseTest()", "58": "ManyMessageTransferTest::::ManyMessageTransferCloseTest()", "59": "ManyMessageTransferTest::::ManyMessageTransferCloseTest()", "60": "ManyMessageTransferTest::::ManyMessageTransferCloseTest()", "61": "ManyMessageTransferTest::::ManyMessageTransferCloseTest()", "62": "ManyMessageTransferTest::::ManyMessageTransferCloseTest()", "63": "ManyMessageTransferTest::::ManyMessageTransferCloseTest()"}, "tests": [{"test_lines": [27, 33], "covered_lines": [36, 37, 38, 39]}, {"test_lines": [35, 42], "covered_lines": [36, 37, 38, 39, 43, 44, 45, 48]}, {"test_lines": [44, 53], "covered_lines": [36, 37, 38, 39, 58]}, {"test_lines": [55, 63], "covered_lines": [36, 37, 38, 39, 80, 81, 85, 86]}]}, "/bernard/dataset_construction/prep/repos/RocketMQC/broker/src/main/java/org/apache/rocketmq/broker/pagecache/OneMessageTransfer.java": {"class_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "package org.apache.rocketmq.broker.pagecache;\n", "\n", "import io.netty.channel.FileRegion;\n", "import io.netty.util.AbstractReferenceCounted;\n", "import java.io.IOException;\n", "import java.nio.ByteBuffer;\n", "import java.nio.channels.WritableByteChannel;\n", "import org.apache.rocketmq.store.SelectMappedBufferResult;\n", "\n", "public class OneMessageTransfer extends AbstractReferenceCounted implements FileRegion {\n", "    private final ByteBuffer byteBufferHeader;\n", "    private final SelectMappedBufferResult selectMappedBufferResult;\n", "\n", "    /**\n", "     * Bytes which were transferred already.\n", "     */\n", "    private long transferred;\n", "\n", "    public OneMessageTransfer(ByteBuffer byteBufferHeader, SelectMappedBufferResult selectMappedBufferResult) {\n", "        this.byteBufferHeader = byteBufferHeader;\n", "        this.selectMappedBufferResult = selectMappedBufferResult;\n", "    }\n", "\n", "    @Override\n", "    public long position() {\n", "        return this.byteBufferHeader.position() + this.selectMappedBufferResult.getByteBuffer().position();\n", "    }\n", "\n", "    @Override\n", "    public long transfered() {\n", "        return transferred;\n", "    }\n", "\n", "    @Override\n", "    public long count() {\n", "        return this.byteBufferHeader.limit() + this.selectMappedBufferResult.getSize();\n", "    }\n", "\n", "    @Override\n", "    public long transferTo(WritableByteChannel target, long position) throws IOException {\n", "        if (this.byteBufferHeader.hasRemaining()) {\n", "            transferred += target.write(this.byteBufferHeader);\n", "            return transferred;\n", "        } else if (this.selectMappedBufferResult.getByteBuffer().hasRemaining()) {\n", "            transferred += target.write(this.selectMappedBufferResult.getByteBuffer());\n", "            return transferred;\n", "        }\n", "\n", "        return 0;\n", "    }\n", "\n", "    public void close() {\n", "        this.deallocate();\n", "    }\n", "\n", "    @Override\n", "    protected void deallocate() {\n", "        this.selectMappedBufferResult.release();\n", "    }\n", "}\n"], "test_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package org.apache.rocketmq.broker.pagecache;\n", "\n", "import java.nio.ByteBuffer;\n", "import org.apache.rocketmq.store.MappedFile;\n", "import org.apache.rocketmq.store.SelectMappedBufferResult;\n", "import org.junit.Assert;\n", "import org.junit.Test;\n", "\n", "public class OneMessageTransferTest {\n", "\n", "    @Test\n", "    public void OneMessageTransferTest(){\n", "        ByteBuffer byteBuffer = ByteBuffer.allocate(20);\n", "        byteBuffer.putInt(20);\n", "        SelectMappedBufferResult selectMappedBufferResult = new SelectMappedBufferResult(0,byteBuffer,20,new MappedFile());\n", "        OneMessageTransfer manyMessageTransfer = new OneMessageTransfer(byteBuffer,selectMappedBufferResult);\n", "    }\n", "\n", "    @Test\n", "    public void OneMessageTransferCountTest(){\n", "        ByteBuffer byteBuffer = ByteBuffer.allocate(20);\n", "        byteBuffer.putInt(20);\n", "        SelectMappedBufferResult selectMappedBufferResult = new SelectMappedBufferResult(0,byteBuffer,20,new MappedFile());\n", "        OneMessageTransfer manyMessageTransfer = new OneMessageTransfer(byteBuffer,selectMappedBufferResult);\n", "        Assert.assertEquals(manyMessageTransfer.count(),40);\n", "    }\n", "\n", "    @Test\n", "    public void OneMessageTransferPosTest(){\n", "        ByteBuffer byteBuffer = ByteBuffer.allocate(20);\n", "        byteBuffer.putInt(20);\n", "        SelectMappedBufferResult selectMappedBufferResult = new SelectMappedBufferResult(0,byteBuffer,20,new MappedFile());\n", "        OneMessageTransfer manyMessageTransfer = new OneMessageTransfer(byteBuffer,selectMappedBufferResult);\n", "        Assert.assertEquals(manyMessageTransfer.position(),8);\n", "    }\n", "}\n"], "method_lines_dic": {"OneMessageTransfer::::position()": [40, 43], "OneMessageTransfer::::transfered()": [45, 48], "OneMessageTransfer::::count()": [50, 53], "OneMessageTransfer::::transferTo(java.nio.channels.WritableByteChannel,long)": [55, 66], "OneMessageTransfer::::close()": [68, 70], "OneMessageTransfer::::deallocate()": [72, 75]}, "test_method_lines_dic": {"OneMessageTransferTest::::OneMessageTransferTest()": [28, 34], "OneMessageTransferTest::::OneMessageTransferCountTest()": [36, 43], "OneMessageTransferTest::::OneMessageTransferPosTest()": [45, 52]}, "reverse_method_lines_dic": {"40": "OneMessageTransfer::::position()", "41": "OneMessageTransfer::::position()", "42": "OneMessageTransfer::::position()", "43": "OneMessageTransfer::::position()", "45": "OneMessageTransfer::::transfered()", "46": "OneMessageTransfer::::transfered()", "47": "OneMessageTransfer::::transfered()", "48": "OneMessageTransfer::::transfered()", "50": "OneMessageTransfer::::count()", "51": "OneMessageTransfer::::count()", "52": "OneMessageTransfer::::count()", "53": "OneMessageTransfer::::count()", "55": "OneMessageTransfer::::transferTo(java.nio.channels.WritableByteChannel,long)", "56": "OneMessageTransfer::::transferTo(java.nio.channels.WritableByteChannel,long)", "57": "OneMessageTransfer::::transferTo(java.nio.channels.WritableByteChannel,long)", "58": "OneMessageTransfer::::transferTo(java.nio.channels.WritableByteChannel,long)", "59": "OneMessageTransfer::::transferTo(java.nio.channels.WritableByteChannel,long)", "60": "OneMessageTransfer::::transferTo(java.nio.channels.WritableByteChannel,long)", "61": "OneMessageTransfer::::transferTo(java.nio.channels.WritableByteChannel,long)", "62": "OneMessageTransfer::::transferTo(java.nio.channels.WritableByteChannel,long)", "63": "OneMessageTransfer::::transferTo(java.nio.channels.WritableByteChannel,long)", "64": "OneMessageTransfer::::transferTo(java.nio.channels.WritableByteChannel,long)", "65": "OneMessageTransfer::::transferTo(java.nio.channels.WritableByteChannel,long)", "66": "OneMessageTransfer::::transferTo(java.nio.channels.WritableByteChannel,long)", "68": "OneMessageTransfer::::close()", "69": "OneMessageTransfer::::close()", "70": "OneMessageTransfer::::close()", "72": "OneMessageTransfer::::deallocate()", "73": "OneMessageTransfer::::deallocate()", "74": "OneMessageTransfer::::deallocate()", "75": "OneMessageTransfer::::deallocate()"}, "test_reverse_method_lines_dic": {"28": "OneMessageTransferTest::::OneMessageTransferTest()", "29": "OneMessageTransferTest::::OneMessageTransferTest()", "30": "OneMessageTransferTest::::OneMessageTransferTest()", "31": "OneMessageTransferTest::::OneMessageTransferTest()", "32": "OneMessageTransferTest::::OneMessageTransferTest()", "33": "OneMessageTransferTest::::OneMessageTransferTest()", "34": "OneMessageTransferTest::::OneMessageTransferTest()", "36": "OneMessageTransferTest::::OneMessageTransferCountTest()", "37": "OneMessageTransferTest::::OneMessageTransferCountTest()", "38": "OneMessageTransferTest::::OneMessageTransferCountTest()", "39": "OneMessageTransferTest::::OneMessageTransferCountTest()", "40": "OneMessageTransferTest::::OneMessageTransferCountTest()", "41": "OneMessageTransferTest::::OneMessageTransferCountTest()", "42": "OneMessageTransferTest::::OneMessageTransferCountTest()", "43": "OneMessageTransferTest::::OneMessageTransferCountTest()", "45": "OneMessageTransferTest::::OneMessageTransferPosTest()", "46": "OneMessageTransferTest::::OneMessageTransferPosTest()", "47": "OneMessageTransferTest::::OneMessageTransferPosTest()", "48": "OneMessageTransferTest::::OneMessageTransferPosTest()", "49": "OneMessageTransferTest::::OneMessageTransferPosTest()", "50": "OneMessageTransferTest::::OneMessageTransferPosTest()", "51": "OneMessageTransferTest::::OneMessageTransferPosTest()", "52": "OneMessageTransferTest::::OneMessageTransferPosTest()"}, "tests": [{"test_lines": [28, 34], "covered_lines": [35, 36, 37, 38]}, {"test_lines": [36, 43], "covered_lines": [35, 36, 37, 38, 52]}, {"test_lines": [45, 52], "covered_lines": [35, 36, 37, 38, 42]}]}, "/bernard/dataset_construction/prep/repos/RocketMQC/broker/src/main/java/org/apache/rocketmq/broker/util/ServiceProvider.java": {"class_content": ["/**\n", " * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.  See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to\n", " * You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n", " * <p>\n", " * http://www.apache.org/licenses/LICENSE-2.0\n", " * <p>\n", " * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n", " * specific language governing permissions and limitations under the License.\n", " */\n", "package org.apache.rocketmq.broker.util;\n", "\n", "import org.slf4j.Logger;\n", "import org.slf4j.LoggerFactory;\n", "\n", "import java.io.BufferedReader;\n", "import java.io.InputStream;\n", "import java.io.InputStreamReader;\n", "import java.util.ArrayList;\n", "import java.util.List;\n", "\n", "public class ServiceProvider {\n", "\n", "    private final static Logger LOG = LoggerFactory\n", "        .getLogger(ServiceProvider.class);\n", "    /**\n", "     * A reference to the classloader that loaded this class. It's more efficient to compute it once and cache it here.\n", "     */\n", "    private static ClassLoader thisClassLoader;\n", "\n", "    /**\n", "     * JDK1.3+ <a href= \"http://java.sun.com/j2se/1.3/docs/guide/jar/jar.html#Service%20Provider\" > 'Service Provider' specification</a>.\n", "     */\n", "    public static final String TRANSACTION_SERVICE_ID = \"META-INF/service/org.apache.rocketmq.broker.transaction.TransactionalMessageService\";\n", "\n", "    public static final String TRANSACTION_LISTENER_ID = \"META-INF/service/org.apache.rocketmq.broker.transaction.AbstractTransactionalMessageCheckListener\";\n", "\n", "\n", "    public static final String RPC_HOOK_ID = \"META-INF/service/org.apache.rocketmq.remoting.RPCHook\";\n", "\n", "\n", "    public static final String ACL_VALIDATOR_ID = \"META-INF/service/org.apache.rocketmq.acl.AccessValidator\";\n", "\n", "\n", "\n", "    static {\n", "        thisClassLoader = getClassLoader(ServiceProvider.class);\n", "    }\n", "\n", "    /**\n", "     * Returns a string that uniquely identifies the specified object, including its class.\n", "     * <p>\n", "     * The returned string is of form \"classname@hashcode\", ie is the same as the return value of the Object.toString() method, but works even when the specified object's class has overidden the toString method.\n", "     *\n", "     * @param o may be null.\n", "     * @return a string of form classname@hashcode, or \"null\" if param o is null.\n", "     */\n", "    protected static String objectId(Object o) {\n", "        if (o == null) {\n", "            return \"null\";\n", "        } else {\n", "            return o.getClass().getName() + \"@\" + System.identityHashCode(o);\n", "        }\n", "    }\n", "\n", "    protected static ClassLoader getClassLoader(Class<?> clazz) {\n", "        try {\n", "            return clazz.getClassLoader();\n", "        } catch (SecurityException e) {\n", "            LOG.error(\"Unable to get classloader for class {} due to security restrictions !\",\n", "                clazz, e.getMessage());\n", "            throw e;\n", "        }\n", "    }\n", "\n", "    protected static ClassLoader getContextClassLoader() {\n", "        ClassLoader classLoader = null;\n", "        try {\n", "            classLoader = Thread.currentThread().getContextClassLoader();\n", "        } catch (SecurityException ex) {\n", "            /**\n", "             * The getContextClassLoader() method throws SecurityException when the context\n", "             * class loader isn't an ancestor of the calling class's class\n", "             * loader, or if security permissions are restricted.\n", "             */\n", "        }\n", "        return classLoader;\n", "    }\n", "\n", "    protected static InputStream getResourceAsStream(ClassLoader loader, String name) {\n", "        if (loader != null) {\n", "            return loader.getResourceAsStream(name);\n", "        } else {\n", "            return ClassLoader.getSystemResourceAsStream(name);\n", "        }\n", "    }\n", "\n", "    public static <T> List<T> load(String name, Class<?> clazz) {\n", "        LOG.info(\"Looking for a resource file of name [{}] ...\", name);\n", "        List<T> services = new ArrayList<T>();\n", "        try {\n", "            ArrayList<String> names = new ArrayList<String>();\n", "            final InputStream is = getResourceAsStream(getContextClassLoader(), name);\n", "            if (is != null) {\n", "                BufferedReader reader;\n", "                try {\n", "                    reader = new BufferedReader(new InputStreamReader(is, \"UTF-8\"));\n", "                } catch (java.io.UnsupportedEncodingException e) {\n", "                    reader = new BufferedReader(new InputStreamReader(is));\n", "                }\n", "                String serviceName = reader.readLine();\n", "                while (serviceName != null && !\"\".equals(serviceName)) {\n", "                    LOG.info(\n", "                        \"Creating an instance as specified by file {} which was present in the path of the context classloader.\",\n", "                        name);\n", "                    if (!names.contains(serviceName)) {\n", "                        names.add(serviceName);\n", "                    }\n", "\n", "                    services.add((T)initService(getContextClassLoader(), serviceName, clazz));\n", "\n", "                    serviceName = reader.readLine();\n", "                }\n", "                reader.close();\n", "            } else {\n", "                // is == null\n", "                LOG.warn(\"No resource file with name [{}] found.\", name);\n", "            }\n", "        } catch (Exception e) {\n", "            LOG.error(\"Error occured when looking for resource file \" + name, e);\n", "        }\n", "        return services;\n", "    }\n", "\n", "    public static <T> T loadClass(String name, Class<?> clazz) {\n", "        final InputStream is = getResourceAsStream(getContextClassLoader(), name);\n", "        if (is != null) {\n", "            BufferedReader reader;\n", "            try {\n", "                try {\n", "                    reader = new BufferedReader(new InputStreamReader(is, \"UTF-8\"));\n", "                } catch (java.io.UnsupportedEncodingException e) {\n", "                    reader = new BufferedReader(new InputStreamReader(is));\n", "                }\n", "                String serviceName = reader.readLine();\n", "                reader.close();\n", "                if (serviceName != null && !\"\".equals(serviceName)) {\n", "                    return initService(getContextClassLoader(), serviceName, clazz);\n", "                } else {\n", "                    LOG.warn(\"ServiceName is empty!\");\n", "                    return null;\n", "                }\n", "            } catch (Exception e) {\n", "                LOG.warn(\"Error occurred when looking for resource file \" + name, e);\n", "            }\n", "        }\n", "        return null;\n", "    }\n", "\n", "    protected static <T> T initService(ClassLoader classLoader, String serviceName, Class<?> clazz) {\n", "        Class<?> serviceClazz = null;\n", "        try {\n", "            if (classLoader != null) {\n", "                try {\n", "                    // Warning: must typecast here & allow exception to be generated/caught & recast properly\n", "                    serviceClazz = classLoader.loadClass(serviceName);\n", "                    if (clazz.isAssignableFrom(serviceClazz)) {\n", "                        LOG.info(\"Loaded class {} from classloader {}\", serviceClazz.getName(),\n", "                            objectId(classLoader));\n", "                    } else {\n", "                        // This indicates a problem with the ClassLoader tree. An incompatible ClassLoader was used to load the implementation.\n", "                        LOG.error(\n", "                            \"Class {} loaded from classloader {} does not extend {} as loaded by this classloader.\",\n", "                            new Object[] {serviceClazz.getName(),\n", "                                objectId(serviceClazz.getClassLoader()), clazz.getName()});\n", "                    }\n", "                    return (T)serviceClazz.newInstance();\n", "                } catch (ClassNotFoundException ex) {\n", "                    if (classLoader == thisClassLoader) {\n", "                        // Nothing more to try, onwards.\n", "                        LOG.warn(\"Unable to locate any class {} via classloader\", serviceName,\n", "                            objectId(classLoader));\n", "                        throw ex;\n", "                    }\n", "                    // Ignore exception, continue\n", "                } catch (NoClassDefFoundError e) {\n", "                    if (classLoader == thisClassLoader) {\n", "                        // Nothing more to try, onwards.\n", "                        LOG.warn(\n", "                            \"Class {} cannot be loaded via classloader {}.it depends on some other class that cannot be found.\",\n", "                            serviceClazz, objectId(classLoader));\n", "                        throw e;\n", "                    }\n", "                    // Ignore exception, continue\n", "                }\n", "            }\n", "        } catch (Exception e) {\n", "            LOG.error(\"Unable to init service.\", e);\n", "        }\n", "        return (T)serviceClazz;\n", "    }\n", "}\n"], "test_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package org.apache.rocketmq.broker.util;\n", "\n", "import org.apache.rocketmq.acl.AccessValidator;\n", "import org.apache.rocketmq.broker.transaction.AbstractTransactionalMessageCheckListener;\n", "import org.apache.rocketmq.broker.transaction.TransactionalMessageService;\n", "import org.junit.Test;\n", "\n", "import static org.assertj.core.api.Assertions.assertThat;\n", "\n", "import java.util.List;\n", "\n", "public class ServiceProviderTest {\n", "\n", "    @Test\n", "    public void loadTransactionMsgServiceTest() {\n", "        TransactionalMessageService transactionService = ServiceProvider.loadClass(ServiceProvider.TRANSACTION_SERVICE_ID,\n", "            TransactionalMessageService.class);\n", "        assertThat(transactionService).isNotNull();\n", "    }\n", "\n", "    @Test\n", "    public void loadAbstractTransactionListenerTest() {\n", "        AbstractTransactionalMessageCheckListener listener = ServiceProvider.loadClass(ServiceProvider.TRANSACTION_LISTENER_ID,\n", "            AbstractTransactionalMessageCheckListener.class);\n", "        assertThat(listener).isNotNull();\n", "    }\n", "    \n", "    @Test\n", "    public void loadAccessValidatorTest() {\n", "    \t List<AccessValidator> accessValidators = ServiceProvider.load(ServiceProvider.ACL_VALIDATOR_ID, AccessValidator.class);\n", "    \t assertThat(accessValidators).isNotNull();\n", "    }\n", "}\n"], "method_lines_dic": {"ServiceProvider::::objectId(java.lang.Object)": [57, 63], "ServiceProvider::::getClassLoader(java.lang.Class<?>)": [65, 73], "ServiceProvider::::getContextClassLoader()": [75, 87], "ServiceProvider::::getResourceAsStream(java.lang.ClassLoader,java.lang.String)": [89, 95], "ServiceProvider::::load(java.lang.String,java.lang.Class<?>)": [97, 132], "ServiceProvider::::loadClass(java.lang.String,java.lang.Class<?>)": [134, 157], "ServiceProvider::::initService(java.lang.ClassLoader,java.lang.String,java.lang.Class<?>)": [159, 200]}, "test_method_lines_dic": {"ServiceProviderTest::::loadTransactionMsgServiceTest()": [31, 36], "ServiceProviderTest::::loadAbstractTransactionListenerTest()": [38, 43], "ServiceProviderTest::::loadAccessValidatorTest()": [45, 49]}, "reverse_method_lines_dic": {"57": "ServiceProvider::::objectId(java.lang.Object)", "58": "ServiceProvider::::objectId(java.lang.Object)", "59": "ServiceProvider::::objectId(java.lang.Object)", "60": "ServiceProvider::::objectId(java.lang.Object)", "61": "ServiceProvider::::objectId(java.lang.Object)", "62": "ServiceProvider::::objectId(java.lang.Object)", "63": "ServiceProvider::::objectId(java.lang.Object)", "65": "ServiceProvider::::getClassLoader(java.lang.Class<?>)", "66": "ServiceProvider::::getClassLoader(java.lang.Class<?>)", "67": "ServiceProvider::::getClassLoader(java.lang.Class<?>)", "68": "ServiceProvider::::getClassLoader(java.lang.Class<?>)", "69": "ServiceProvider::::getClassLoader(java.lang.Class<?>)", "70": "ServiceProvider::::getClassLoader(java.lang.Class<?>)", "71": "ServiceProvider::::getClassLoader(java.lang.Class<?>)", "72": "ServiceProvider::::getClassLoader(java.lang.Class<?>)", "73": "ServiceProvider::::getClassLoader(java.lang.Class<?>)", "75": "ServiceProvider::::getContextClassLoader()", "76": "ServiceProvider::::getContextClassLoader()", "77": "ServiceProvider::::getContextClassLoader()", "78": "ServiceProvider::::getContextClassLoader()", "79": "ServiceProvider::::getContextClassLoader()", "80": "ServiceProvider::::getContextClassLoader()", "81": "ServiceProvider::::getContextClassLoader()", "82": "ServiceProvider::::getContextClassLoader()", "83": "ServiceProvider::::getContextClassLoader()", "84": "ServiceProvider::::getContextClassLoader()", "85": "ServiceProvider::::getContextClassLoader()", "86": "ServiceProvider::::getContextClassLoader()", "87": "ServiceProvider::::getContextClassLoader()", "89": "ServiceProvider::::getResourceAsStream(java.lang.ClassLoader,java.lang.String)", "90": "ServiceProvider::::getResourceAsStream(java.lang.ClassLoader,java.lang.String)", "91": "ServiceProvider::::getResourceAsStream(java.lang.ClassLoader,java.lang.String)", "92": "ServiceProvider::::getResourceAsStream(java.lang.ClassLoader,java.lang.String)", "93": "ServiceProvider::::getResourceAsStream(java.lang.ClassLoader,java.lang.String)", "94": "ServiceProvider::::getResourceAsStream(java.lang.ClassLoader,java.lang.String)", "95": "ServiceProvider::::getResourceAsStream(java.lang.ClassLoader,java.lang.String)", "97": "ServiceProvider::::load(java.lang.String,java.lang.Class<?>)", "98": "ServiceProvider::::load(java.lang.String,java.lang.Class<?>)", "99": "ServiceProvider::::load(java.lang.String,java.lang.Class<?>)", "100": "ServiceProvider::::load(java.lang.String,java.lang.Class<?>)", "101": "ServiceProvider::::load(java.lang.String,java.lang.Class<?>)", "102": "ServiceProvider::::load(java.lang.String,java.lang.Class<?>)", "103": "ServiceProvider::::load(java.lang.String,java.lang.Class<?>)", "104": "ServiceProvider::::load(java.lang.String,java.lang.Class<?>)", "105": "ServiceProvider::::load(java.lang.String,java.lang.Class<?>)", "106": "ServiceProvider::::load(java.lang.String,java.lang.Class<?>)", "107": "ServiceProvider::::load(java.lang.String,java.lang.Class<?>)", "108": "ServiceProvider::::load(java.lang.String,java.lang.Class<?>)", "109": "ServiceProvider::::load(java.lang.String,java.lang.Class<?>)", "110": "ServiceProvider::::load(java.lang.String,java.lang.Class<?>)", "111": "ServiceProvider::::load(java.lang.String,java.lang.Class<?>)", "112": "ServiceProvider::::load(java.lang.String,java.lang.Class<?>)", "113": "ServiceProvider::::load(java.lang.String,java.lang.Class<?>)", "114": "ServiceProvider::::load(java.lang.String,java.lang.Class<?>)", "115": "ServiceProvider::::load(java.lang.String,java.lang.Class<?>)", "116": "ServiceProvider::::load(java.lang.String,java.lang.Class<?>)", "117": "ServiceProvider::::load(java.lang.String,java.lang.Class<?>)", "118": "ServiceProvider::::load(java.lang.String,java.lang.Class<?>)", "119": "ServiceProvider::::load(java.lang.String,java.lang.Class<?>)", "120": "ServiceProvider::::load(java.lang.String,java.lang.Class<?>)", "121": "ServiceProvider::::load(java.lang.String,java.lang.Class<?>)", "122": "ServiceProvider::::load(java.lang.String,java.lang.Class<?>)", "123": "ServiceProvider::::load(java.lang.String,java.lang.Class<?>)", "124": "ServiceProvider::::load(java.lang.String,java.lang.Class<?>)", "125": "ServiceProvider::::load(java.lang.String,java.lang.Class<?>)", "126": "ServiceProvider::::load(java.lang.String,java.lang.Class<?>)", "127": "ServiceProvider::::load(java.lang.String,java.lang.Class<?>)", "128": "ServiceProvider::::load(java.lang.String,java.lang.Class<?>)", "129": "ServiceProvider::::load(java.lang.String,java.lang.Class<?>)", "130": "ServiceProvider::::load(java.lang.String,java.lang.Class<?>)", "131": "ServiceProvider::::load(java.lang.String,java.lang.Class<?>)", "132": "ServiceProvider::::load(java.lang.String,java.lang.Class<?>)", "134": "ServiceProvider::::loadClass(java.lang.String,java.lang.Class<?>)", "135": "ServiceProvider::::loadClass(java.lang.String,java.lang.Class<?>)", "136": "ServiceProvider::::loadClass(java.lang.String,java.lang.Class<?>)", "137": "ServiceProvider::::loadClass(java.lang.String,java.lang.Class<?>)", "138": "ServiceProvider::::loadClass(java.lang.String,java.lang.Class<?>)", "139": "ServiceProvider::::loadClass(java.lang.String,java.lang.Class<?>)", "140": "ServiceProvider::::loadClass(java.lang.String,java.lang.Class<?>)", "141": "ServiceProvider::::loadClass(java.lang.String,java.lang.Class<?>)", "142": "ServiceProvider::::loadClass(java.lang.String,java.lang.Class<?>)", "143": "ServiceProvider::::loadClass(java.lang.String,java.lang.Class<?>)", "144": "ServiceProvider::::loadClass(java.lang.String,java.lang.Class<?>)", "145": "ServiceProvider::::loadClass(java.lang.String,java.lang.Class<?>)", "146": "ServiceProvider::::loadClass(java.lang.String,java.lang.Class<?>)", "147": "ServiceProvider::::loadClass(java.lang.String,java.lang.Class<?>)", "148": "ServiceProvider::::loadClass(java.lang.String,java.lang.Class<?>)", "149": "ServiceProvider::::loadClass(java.lang.String,java.lang.Class<?>)", "150": "ServiceProvider::::loadClass(java.lang.String,java.lang.Class<?>)", "151": "ServiceProvider::::loadClass(java.lang.String,java.lang.Class<?>)", "152": "ServiceProvider::::loadClass(java.lang.String,java.lang.Class<?>)", "153": "ServiceProvider::::loadClass(java.lang.String,java.lang.Class<?>)", "154": "ServiceProvider::::loadClass(java.lang.String,java.lang.Class<?>)", "155": "ServiceProvider::::loadClass(java.lang.String,java.lang.Class<?>)", "156": "ServiceProvider::::loadClass(java.lang.String,java.lang.Class<?>)", "157": "ServiceProvider::::loadClass(java.lang.String,java.lang.Class<?>)", "159": "ServiceProvider::::initService(java.lang.ClassLoader,java.lang.String,java.lang.Class<?>)", "160": "ServiceProvider::::initService(java.lang.ClassLoader,java.lang.String,java.lang.Class<?>)", "161": "ServiceProvider::::initService(java.lang.ClassLoader,java.lang.String,java.lang.Class<?>)", "162": "ServiceProvider::::initService(java.lang.ClassLoader,java.lang.String,java.lang.Class<?>)", "163": "ServiceProvider::::initService(java.lang.ClassLoader,java.lang.String,java.lang.Class<?>)", "164": "ServiceProvider::::initService(java.lang.ClassLoader,java.lang.String,java.lang.Class<?>)", "165": "ServiceProvider::::initService(java.lang.ClassLoader,java.lang.String,java.lang.Class<?>)", "166": "ServiceProvider::::initService(java.lang.ClassLoader,java.lang.String,java.lang.Class<?>)", "167": "ServiceProvider::::initService(java.lang.ClassLoader,java.lang.String,java.lang.Class<?>)", "168": "ServiceProvider::::initService(java.lang.ClassLoader,java.lang.String,java.lang.Class<?>)", "169": "ServiceProvider::::initService(java.lang.ClassLoader,java.lang.String,java.lang.Class<?>)", "170": "ServiceProvider::::initService(java.lang.ClassLoader,java.lang.String,java.lang.Class<?>)", "171": "ServiceProvider::::initService(java.lang.ClassLoader,java.lang.String,java.lang.Class<?>)", "172": "ServiceProvider::::initService(java.lang.ClassLoader,java.lang.String,java.lang.Class<?>)", "173": "ServiceProvider::::initService(java.lang.ClassLoader,java.lang.String,java.lang.Class<?>)", "174": "ServiceProvider::::initService(java.lang.ClassLoader,java.lang.String,java.lang.Class<?>)", "175": "ServiceProvider::::initService(java.lang.ClassLoader,java.lang.String,java.lang.Class<?>)", "176": "ServiceProvider::::initService(java.lang.ClassLoader,java.lang.String,java.lang.Class<?>)", "177": "ServiceProvider::::initService(java.lang.ClassLoader,java.lang.String,java.lang.Class<?>)", "178": "ServiceProvider::::initService(java.lang.ClassLoader,java.lang.String,java.lang.Class<?>)", "179": "ServiceProvider::::initService(java.lang.ClassLoader,java.lang.String,java.lang.Class<?>)", "180": "ServiceProvider::::initService(java.lang.ClassLoader,java.lang.String,java.lang.Class<?>)", "181": "ServiceProvider::::initService(java.lang.ClassLoader,java.lang.String,java.lang.Class<?>)", "182": "ServiceProvider::::initService(java.lang.ClassLoader,java.lang.String,java.lang.Class<?>)", "183": "ServiceProvider::::initService(java.lang.ClassLoader,java.lang.String,java.lang.Class<?>)", "184": "ServiceProvider::::initService(java.lang.ClassLoader,java.lang.String,java.lang.Class<?>)", "185": "ServiceProvider::::initService(java.lang.ClassLoader,java.lang.String,java.lang.Class<?>)", "186": "ServiceProvider::::initService(java.lang.ClassLoader,java.lang.String,java.lang.Class<?>)", "187": "ServiceProvider::::initService(java.lang.ClassLoader,java.lang.String,java.lang.Class<?>)", "188": "ServiceProvider::::initService(java.lang.ClassLoader,java.lang.String,java.lang.Class<?>)", "189": "ServiceProvider::::initService(java.lang.ClassLoader,java.lang.String,java.lang.Class<?>)", "190": "ServiceProvider::::initService(java.lang.ClassLoader,java.lang.String,java.lang.Class<?>)", "191": "ServiceProvider::::initService(java.lang.ClassLoader,java.lang.String,java.lang.Class<?>)", "192": "ServiceProvider::::initService(java.lang.ClassLoader,java.lang.String,java.lang.Class<?>)", "193": "ServiceProvider::::initService(java.lang.ClassLoader,java.lang.String,java.lang.Class<?>)", "194": "ServiceProvider::::initService(java.lang.ClassLoader,java.lang.String,java.lang.Class<?>)", "195": "ServiceProvider::::initService(java.lang.ClassLoader,java.lang.String,java.lang.Class<?>)", "196": "ServiceProvider::::initService(java.lang.ClassLoader,java.lang.String,java.lang.Class<?>)", "197": "ServiceProvider::::initService(java.lang.ClassLoader,java.lang.String,java.lang.Class<?>)", "198": "ServiceProvider::::initService(java.lang.ClassLoader,java.lang.String,java.lang.Class<?>)", "199": "ServiceProvider::::initService(java.lang.ClassLoader,java.lang.String,java.lang.Class<?>)", "200": "ServiceProvider::::initService(java.lang.ClassLoader,java.lang.String,java.lang.Class<?>)"}, "test_reverse_method_lines_dic": {"31": "ServiceProviderTest::::loadTransactionMsgServiceTest()", "32": "ServiceProviderTest::::loadTransactionMsgServiceTest()", "33": "ServiceProviderTest::::loadTransactionMsgServiceTest()", "34": "ServiceProviderTest::::loadTransactionMsgServiceTest()", "35": "ServiceProviderTest::::loadTransactionMsgServiceTest()", "36": "ServiceProviderTest::::loadTransactionMsgServiceTest()", "38": "ServiceProviderTest::::loadAbstractTransactionListenerTest()", "39": "ServiceProviderTest::::loadAbstractTransactionListenerTest()", "40": "ServiceProviderTest::::loadAbstractTransactionListenerTest()", "41": "ServiceProviderTest::::loadAbstractTransactionListenerTest()", "42": "ServiceProviderTest::::loadAbstractTransactionListenerTest()", "43": "ServiceProviderTest::::loadAbstractTransactionListenerTest()", "45": "ServiceProviderTest::::loadAccessValidatorTest()", "46": "ServiceProviderTest::::loadAccessValidatorTest()", "47": "ServiceProviderTest::::loadAccessValidatorTest()", "48": "ServiceProviderTest::::loadAccessValidatorTest()", "49": "ServiceProviderTest::::loadAccessValidatorTest()"}, "tests": [{"test_lines": [31, 36], "covered_lines": [23, 24, 46, 47, 58, 61, 67, 76, 78, 85, 86, 90, 91, 135, 136, 140, 143, 144, 145, 146, 147, 160, 162, 165, 166, 167, 168, 176]}, {"test_lines": [38, 43], "covered_lines": [23, 24, 46, 47, 58, 61, 67, 76, 78, 85, 86, 90, 91, 135, 136, 140, 143, 144, 145, 146, 147, 160, 162, 165, 166, 167, 168, 176]}, {"test_lines": [45, 49], "covered_lines": [23, 24, 46, 47, 58, 61, 67, 76, 78, 85, 86, 90, 91, 98, 99, 101, 102, 103, 106, 109, 110, 111, 112, 115, 116, 119, 121, 123, 124, 130, 131, 160, 162, 165, 166, 167, 168, 196, 197, 199]}]}, "/bernard/dataset_construction/prep/repos/RocketMQC/broker/src/main/java/org/apache/rocketmq/broker/client/ProducerManager.java": {"class_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "package org.apache.rocketmq.broker.client;\n", "\n", "import io.netty.channel.Channel;\n", "import java.util.ArrayList;\n", "import java.util.Iterator;\n", "import java.util.List;\n", "import java.util.Map;\n", "import java.util.Map.Entry;\n", "import java.util.concurrent.ConcurrentHashMap;\n", "import org.apache.rocketmq.broker.util.PositiveAtomicCounter;\n", "import org.apache.rocketmq.common.constant.LoggerName;\n", "import org.apache.rocketmq.logging.InternalLogger;\n", "import org.apache.rocketmq.logging.InternalLoggerFactory;\n", "import org.apache.rocketmq.remoting.common.RemotingHelper;\n", "import org.apache.rocketmq.remoting.common.RemotingUtil;\n", "\n", "public class ProducerManager {\n", "    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);\n", "    private static final long CHANNEL_EXPIRED_TIMEOUT = 1000 * 120;\n", "    private static final int GET_AVAILABLE_CHANNEL_RETRY_COUNT = 3;\n", "    private final ConcurrentHashMap<String /* group name */, ConcurrentHashMap<Channel, ClientChannelInfo>> groupChannelTable =\n", "        new ConcurrentHashMap<>();\n", "    private final ConcurrentHashMap<String, Channel> clientChannelTable = new ConcurrentHashMap<>();\n", "    private PositiveAtomicCounter positiveAtomicCounter = new PositiveAtomicCounter();\n", "\n", "    public ProducerManager() {\n", "    }\n", "\n", "    public ConcurrentHashMap<String, ConcurrentHashMap<Channel, ClientChannelInfo>> getGroupChannelTable() {\n", "        return groupChannelTable;\n", "    }\n", "\n", "    public void scanNotActiveChannel() {\n", "        for (final Map.Entry<String, ConcurrentHashMap<Channel, ClientChannelInfo>> entry : this.groupChannelTable\n", "                .entrySet()) {\n", "            final String group = entry.getKey();\n", "            final ConcurrentHashMap<Channel, ClientChannelInfo> chlMap = entry.getValue();\n", "\n", "            Iterator<Entry<Channel, ClientChannelInfo>> it = chlMap.entrySet().iterator();\n", "            while (it.hasNext()) {\n", "                Entry<Channel, ClientChannelInfo> item = it.next();\n", "                // final Integer id = item.getKey();\n", "                final ClientChannelInfo info = item.getValue();\n", "\n", "                long diff = System.currentTimeMillis() - info.getLastUpdateTimestamp();\n", "                if (diff > CHANNEL_EXPIRED_TIMEOUT) {\n", "                    it.remove();\n", "                    clientChannelTable.remove(info.getClientId());\n", "                    log.warn(\n", "                            \"SCAN: remove expired channel[{}] from ProducerManager groupChannelTable, producer group name: {}\",\n", "                            RemotingHelper.parseChannelRemoteAddr(info.getChannel()), group);\n", "                    RemotingUtil.closeChannel(info.getChannel());\n", "                }\n", "            }\n", "        }\n", "    }\n", "\n", "    public synchronized void doChannelCloseEvent(final String remoteAddr, final Channel channel) {\n", "        if (channel != null) {\n", "            for (final Map.Entry<String, ConcurrentHashMap<Channel, ClientChannelInfo>> entry : this.groupChannelTable\n", "                    .entrySet()) {\n", "                final String group = entry.getKey();\n", "                final ConcurrentHashMap<Channel, ClientChannelInfo> clientChannelInfoTable =\n", "                        entry.getValue();\n", "                final ClientChannelInfo clientChannelInfo =\n", "                        clientChannelInfoTable.remove(channel);\n", "                if (clientChannelInfo != null) {\n", "                    clientChannelTable.remove(clientChannelInfo.getClientId());\n", "                    log.info(\n", "                            \"NETTY EVENT: remove channel[{}][{}] from ProducerManager groupChannelTable, producer group: {}\",\n", "                            clientChannelInfo.toString(), remoteAddr, group);\n", "                }\n", "\n", "            }\n", "        }\n", "    }\n", "\n", "    public synchronized void registerProducer(final String group, final ClientChannelInfo clientChannelInfo) {\n", "        ClientChannelInfo clientChannelInfoFound = null;\n", "\n", "        ConcurrentHashMap<Channel, ClientChannelInfo> channelTable = this.groupChannelTable.get(group);\n", "        if (null == channelTable) {\n", "            channelTable = new ConcurrentHashMap<>();\n", "            this.groupChannelTable.put(group, channelTable);\n", "        }\n", "\n", "        clientChannelInfoFound = channelTable.get(clientChannelInfo.getChannel());\n", "        if (null == clientChannelInfoFound) {\n", "            channelTable.put(clientChannelInfo.getChannel(), clientChannelInfo);\n", "            clientChannelTable.put(clientChannelInfo.getClientId(), clientChannelInfo.getChannel());\n", "            log.info(\"new producer connected, group: {} channel: {}\", group,\n", "                    clientChannelInfo.toString());\n", "        }\n", "\n", "\n", "        if (clientChannelInfoFound != null) {\n", "            clientChannelInfoFound.setLastUpdateTimestamp(System.currentTimeMillis());\n", "        }\n", "    }\n", "\n", "    public synchronized void unregisterProducer(final String group, final ClientChannelInfo clientChannelInfo) {\n", "        ConcurrentHashMap<Channel, ClientChannelInfo> channelTable = this.groupChannelTable.get(group);\n", "        if (null != channelTable && !channelTable.isEmpty()) {\n", "            ClientChannelInfo old = channelTable.remove(clientChannelInfo.getChannel());\n", "            clientChannelTable.remove(clientChannelInfo.getClientId());\n", "            if (old != null) {\n", "                log.info(\"unregister a producer[{}] from groupChannelTable {}\", group,\n", "                        clientChannelInfo.toString());\n", "            }\n", "\n", "            if (channelTable.isEmpty()) {\n", "                this.groupChannelTable.remove(group);\n", "                log.info(\"unregister a producer group[{}] from groupChannelTable\", group);\n", "            }\n", "        }\n", "    }\n", "\n", "    public Channel getAvailableChannel(String groupId) {\n", "        if (groupId == null) {\n", "            return null;\n", "        }\n", "        List<Channel> channelList;\n", "        ConcurrentHashMap<Channel, ClientChannelInfo> channelClientChannelInfoHashMap = groupChannelTable.get(groupId);\n", "        if (channelClientChannelInfoHashMap != null) {\n", "            channelList = new ArrayList<>(channelClientChannelInfoHashMap.keySet());\n", "        } else {\n", "            log.warn(\"Check transaction failed, channel table is empty. groupId={}\", groupId);\n", "            return null;\n", "        }\n", "\n", "        int size = channelList.size();\n", "        if (0 == size) {\n", "            log.warn(\"Channel list is empty. groupId={}\", groupId);\n", "            return null;\n", "        }\n", "\n", "        Channel lastActiveChannel = null;\n", "\n", "        int index = positiveAtomicCounter.incrementAndGet() % size;\n", "        Channel channel = channelList.get(index);\n", "        int count = 0;\n", "        boolean isOk = channel.isActive() && channel.isWritable();\n", "        while (count++ < GET_AVAILABLE_CHANNEL_RETRY_COUNT) {\n", "            if (isOk) {\n", "                return channel;\n", "            }\n", "            if (channel.isActive()) {\n", "                lastActiveChannel = channel;\n", "            }\n", "            index = (++index) % size;\n", "            channel = channelList.get(index);\n", "            isOk = channel.isActive() && channel.isWritable();\n", "        }\n", "\n", "        return lastActiveChannel;\n", "    }\n", "\n", "    public Channel findChannel(String clientId) {\n", "        return clientChannelTable.get(clientId);\n", "    }\n", "}\n"], "test_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "package org.apache.rocketmq.broker.client;\n", "\n", "import io.netty.channel.Channel;\n", "import io.netty.channel.ChannelFuture;\n", "import java.lang.reflect.Field;\n", "import java.util.Map;\n", "\n", "import org.apache.rocketmq.remoting.protocol.LanguageCode;\n", "import org.junit.Before;\n", "import org.junit.Test;\n", "import org.junit.runner.RunWith;\n", "import org.mockito.Mock;\n", "import org.mockito.junit.MockitoJUnitRunner;\n", "\n", "import static org.assertj.core.api.Assertions.assertThat;\n", "import static org.mockito.Mockito.mock;\n", "import static org.mockito.Mockito.when;\n", "\n", "@RunWith(MockitoJUnitRunner.class)\n", "public class ProducerManagerTest {\n", "    private ProducerManager producerManager;\n", "    private String group = \"FooBar\";\n", "    private ClientChannelInfo clientInfo;\n", "\n", "    @Mock\n", "    private Channel channel;\n", "\n", "    @Before\n", "    public void init() {\n", "        producerManager = new ProducerManager();\n", "        clientInfo = new ClientChannelInfo(channel, \"clientId\", LanguageCode.JAVA, 0);\n", "    }\n", "\n", "    @Test\n", "    public void scanNotActiveChannel() throws Exception {\n", "        producerManager.registerProducer(group, clientInfo);\n", "        assertThat(producerManager.getGroupChannelTable().get(group).get(channel)).isNotNull();\n", "        assertThat(producerManager.findChannel(\"clientId\")).isNotNull();\n", "        Field field = ProducerManager.class.getDeclaredField(\"CHANNEL_EXPIRED_TIMEOUT\");\n", "        field.setAccessible(true);\n", "        long CHANNEL_EXPIRED_TIMEOUT = field.getLong(producerManager);\n", "        clientInfo.setLastUpdateTimestamp(System.currentTimeMillis() - CHANNEL_EXPIRED_TIMEOUT - 10);\n", "        when(channel.close()).thenReturn(mock(ChannelFuture.class));\n", "        producerManager.scanNotActiveChannel();\n", "        assertThat(producerManager.getGroupChannelTable().get(group).get(channel)).isNull();\n", "        assertThat(producerManager.findChannel(\"clientId\")).isNull();\n", "    }\n", "\n", "    @Test\n", "    public void doChannelCloseEvent() throws Exception {\n", "        producerManager.registerProducer(group, clientInfo);\n", "        assertThat(producerManager.getGroupChannelTable().get(group).get(channel)).isNotNull();\n", "        assertThat(producerManager.findChannel(\"clientId\")).isNotNull();\n", "        producerManager.doChannelCloseEvent(\"127.0.0.1\", channel);\n", "        assertThat(producerManager.getGroupChannelTable().get(group).get(channel)).isNull();\n", "        assertThat(producerManager.findChannel(\"clientId\")).isNull();\n", "    }\n", "\n", "    @Test\n", "    public void testRegisterProducer() throws Exception {\n", "        producerManager.registerProducer(group, clientInfo);\n", "        Map<Channel, ClientChannelInfo> channelMap = producerManager.getGroupChannelTable().get(group);\n", "        Channel channel1 = producerManager.findChannel(\"clientId\");\n", "        assertThat(channelMap).isNotNull();\n", "        assertThat(channel1).isNotNull();\n", "        assertThat(channelMap.get(channel)).isEqualTo(clientInfo);\n", "        assertThat(channel1).isEqualTo(channel);\n", "    }\n", "\n", "    @Test\n", "    public void unregisterProducer() throws Exception {\n", "        producerManager.registerProducer(group, clientInfo);\n", "        Map<Channel, ClientChannelInfo> channelMap = producerManager.getGroupChannelTable().get(group);\n", "        assertThat(channelMap).isNotNull();\n", "        assertThat(channelMap.get(channel)).isEqualTo(clientInfo);\n", "        Channel channel1 = producerManager.findChannel(\"clientId\");\n", "        assertThat(channel1).isNotNull();\n", "        assertThat(channel1).isEqualTo(channel);\n", "        producerManager.unregisterProducer(group, clientInfo);\n", "        channelMap = producerManager.getGroupChannelTable().get(group);\n", "        channel1 = producerManager.findChannel(\"clientId\");\n", "        assertThat(channelMap).isNull();\n", "        assertThat(channel1).isNull();\n", "\n", "    }\n", "\n", "    @Test\n", "    public void testGetGroupChannelTable() throws Exception {\n", "        producerManager.registerProducer(group, clientInfo);\n", "        Map<Channel, ClientChannelInfo> oldMap = producerManager.getGroupChannelTable().get(group);\n", "        \n", "        producerManager.unregisterProducer(group, clientInfo);\n", "        assertThat(oldMap.size()).isEqualTo(0);\n", "    }\n", "\n", "    @Test\n", "    public void testGetAvailableChannel() {\n", "        producerManager.registerProducer(group, clientInfo);\n", "\n", "        when(channel.isActive()).thenReturn(true);\n", "        when(channel.isWritable()).thenReturn(true);\n", "        Channel c = producerManager.getAvailableChannel(group);\n", "        assertThat(c).isSameAs(channel);\n", "\n", "        when(channel.isWritable()).thenReturn(false);\n", "        c = producerManager.getAvailableChannel(group);\n", "        assertThat(c).isSameAs(channel);\n", "\n", "        when(channel.isActive()).thenReturn(false);\n", "        c = producerManager.getAvailableChannel(group);\n", "        assertThat(c).isNull();\n", "    }\n", "\n", "}"], "method_lines_dic": {"ProducerManager::::getGroupChannelTable()": [45, 47], "ProducerManager::::scanNotActiveChannel()": [49, 72], "ProducerManager::::registerProducer(java.lang.String,org.apache.rocketmq.broker.client.ClientChannelInfo)": [94, 115], "ProducerManager::::unregisterProducer(java.lang.String,org.apache.rocketmq.broker.client.ClientChannelInfo)": [117, 132], "ProducerManager::::getAvailableChannel(java.lang.String)": [134, 172], "ProducerManager::::findChannel(java.lang.String)": [174, 176]}, "test_method_lines_dic": {"ProducerManagerTest::::init()": [44, 48], "ProducerManagerTest::::scanNotActiveChannel()": [50, 63], "ProducerManagerTest::::doChannelCloseEvent()": [65, 73], "ProducerManagerTest::::testRegisterProducer()": [75, 84], "ProducerManagerTest::::unregisterProducer()": [86, 101], "ProducerManagerTest::::testGetGroupChannelTable()": [103, 110], "ProducerManagerTest::::testGetAvailableChannel()": [112, 128]}, "reverse_method_lines_dic": {"45": "ProducerManager::::getGroupChannelTable()", "46": "ProducerManager::::getGroupChannelTable()", "47": "ProducerManager::::getGroupChannelTable()", "49": "ProducerManager::::scanNotActiveChannel()", "50": "ProducerManager::::scanNotActiveChannel()", "51": "ProducerManager::::scanNotActiveChannel()", "52": "ProducerManager::::scanNotActiveChannel()", "53": "ProducerManager::::scanNotActiveChannel()", "54": "ProducerManager::::scanNotActiveChannel()", "55": "ProducerManager::::scanNotActiveChannel()", "56": "ProducerManager::::scanNotActiveChannel()", "57": "ProducerManager::::scanNotActiveChannel()", "58": "ProducerManager::::scanNotActiveChannel()", "59": "ProducerManager::::scanNotActiveChannel()", "60": "ProducerManager::::scanNotActiveChannel()", "61": "ProducerManager::::scanNotActiveChannel()", "62": "ProducerManager::::scanNotActiveChannel()", "63": "ProducerManager::::scanNotActiveChannel()", "64": "ProducerManager::::scanNotActiveChannel()", "65": "ProducerManager::::scanNotActiveChannel()", "66": "ProducerManager::::scanNotActiveChannel()", "67": "ProducerManager::::scanNotActiveChannel()", "68": "ProducerManager::::scanNotActiveChannel()", "69": "ProducerManager::::scanNotActiveChannel()", "70": "ProducerManager::::scanNotActiveChannel()", "71": "ProducerManager::::scanNotActiveChannel()", "72": "ProducerManager::::scanNotActiveChannel()", "94": "ProducerManager::::registerProducer(java.lang.String,org.apache.rocketmq.broker.client.ClientChannelInfo)", "95": "ProducerManager::::registerProducer(java.lang.String,org.apache.rocketmq.broker.client.ClientChannelInfo)", "96": "ProducerManager::::registerProducer(java.lang.String,org.apache.rocketmq.broker.client.ClientChannelInfo)", "97": "ProducerManager::::registerProducer(java.lang.String,org.apache.rocketmq.broker.client.ClientChannelInfo)", "98": "ProducerManager::::registerProducer(java.lang.String,org.apache.rocketmq.broker.client.ClientChannelInfo)", "99": "ProducerManager::::registerProducer(java.lang.String,org.apache.rocketmq.broker.client.ClientChannelInfo)", "100": "ProducerManager::::registerProducer(java.lang.String,org.apache.rocketmq.broker.client.ClientChannelInfo)", "101": "ProducerManager::::registerProducer(java.lang.String,org.apache.rocketmq.broker.client.ClientChannelInfo)", "102": "ProducerManager::::registerProducer(java.lang.String,org.apache.rocketmq.broker.client.ClientChannelInfo)", "103": "ProducerManager::::registerProducer(java.lang.String,org.apache.rocketmq.broker.client.ClientChannelInfo)", "104": "ProducerManager::::registerProducer(java.lang.String,org.apache.rocketmq.broker.client.ClientChannelInfo)", "105": "ProducerManager::::registerProducer(java.lang.String,org.apache.rocketmq.broker.client.ClientChannelInfo)", "106": "ProducerManager::::registerProducer(java.lang.String,org.apache.rocketmq.broker.client.ClientChannelInfo)", "107": "ProducerManager::::registerProducer(java.lang.String,org.apache.rocketmq.broker.client.ClientChannelInfo)", "108": "ProducerManager::::registerProducer(java.lang.String,org.apache.rocketmq.broker.client.ClientChannelInfo)", "109": "ProducerManager::::registerProducer(java.lang.String,org.apache.rocketmq.broker.client.ClientChannelInfo)", "110": "ProducerManager::::registerProducer(java.lang.String,org.apache.rocketmq.broker.client.ClientChannelInfo)", "111": "ProducerManager::::registerProducer(java.lang.String,org.apache.rocketmq.broker.client.ClientChannelInfo)", "112": "ProducerManager::::registerProducer(java.lang.String,org.apache.rocketmq.broker.client.ClientChannelInfo)", "113": "ProducerManager::::registerProducer(java.lang.String,org.apache.rocketmq.broker.client.ClientChannelInfo)", "114": "ProducerManager::::registerProducer(java.lang.String,org.apache.rocketmq.broker.client.ClientChannelInfo)", "115": "ProducerManager::::registerProducer(java.lang.String,org.apache.rocketmq.broker.client.ClientChannelInfo)", "117": "ProducerManager::::unregisterProducer(java.lang.String,org.apache.rocketmq.broker.client.ClientChannelInfo)", "118": "ProducerManager::::unregisterProducer(java.lang.String,org.apache.rocketmq.broker.client.ClientChannelInfo)", "119": "ProducerManager::::unregisterProducer(java.lang.String,org.apache.rocketmq.broker.client.ClientChannelInfo)", "120": "ProducerManager::::unregisterProducer(java.lang.String,org.apache.rocketmq.broker.client.ClientChannelInfo)", "121": "ProducerManager::::unregisterProducer(java.lang.String,org.apache.rocketmq.broker.client.ClientChannelInfo)", "122": "ProducerManager::::unregisterProducer(java.lang.String,org.apache.rocketmq.broker.client.ClientChannelInfo)", "123": "ProducerManager::::unregisterProducer(java.lang.String,org.apache.rocketmq.broker.client.ClientChannelInfo)", "124": "ProducerManager::::unregisterProducer(java.lang.String,org.apache.rocketmq.broker.client.ClientChannelInfo)", "125": "ProducerManager::::unregisterProducer(java.lang.String,org.apache.rocketmq.broker.client.ClientChannelInfo)", "126": "ProducerManager::::unregisterProducer(java.lang.String,org.apache.rocketmq.broker.client.ClientChannelInfo)", "127": "ProducerManager::::unregisterProducer(java.lang.String,org.apache.rocketmq.broker.client.ClientChannelInfo)", "128": "ProducerManager::::unregisterProducer(java.lang.String,org.apache.rocketmq.broker.client.ClientChannelInfo)", "129": "ProducerManager::::unregisterProducer(java.lang.String,org.apache.rocketmq.broker.client.ClientChannelInfo)", "130": "ProducerManager::::unregisterProducer(java.lang.String,org.apache.rocketmq.broker.client.ClientChannelInfo)", "131": "ProducerManager::::unregisterProducer(java.lang.String,org.apache.rocketmq.broker.client.ClientChannelInfo)", "132": "ProducerManager::::unregisterProducer(java.lang.String,org.apache.rocketmq.broker.client.ClientChannelInfo)", "134": "ProducerManager::::getAvailableChannel(java.lang.String)", "135": "ProducerManager::::getAvailableChannel(java.lang.String)", "136": "ProducerManager::::getAvailableChannel(java.lang.String)", "137": "ProducerManager::::getAvailableChannel(java.lang.String)", "138": "ProducerManager::::getAvailableChannel(java.lang.String)", "139": "ProducerManager::::getAvailableChannel(java.lang.String)", "140": "ProducerManager::::getAvailableChannel(java.lang.String)", "141": "ProducerManager::::getAvailableChannel(java.lang.String)", "142": "ProducerManager::::getAvailableChannel(java.lang.String)", "143": "ProducerManager::::getAvailableChannel(java.lang.String)", "144": "ProducerManager::::getAvailableChannel(java.lang.String)", "145": "ProducerManager::::getAvailableChannel(java.lang.String)", "146": "ProducerManager::::getAvailableChannel(java.lang.String)", "147": "ProducerManager::::getAvailableChannel(java.lang.String)", "148": "ProducerManager::::getAvailableChannel(java.lang.String)", "149": "ProducerManager::::getAvailableChannel(java.lang.String)", "150": "ProducerManager::::getAvailableChannel(java.lang.String)", "151": "ProducerManager::::getAvailableChannel(java.lang.String)", "152": "ProducerManager::::getAvailableChannel(java.lang.String)", "153": "ProducerManager::::getAvailableChannel(java.lang.String)", "154": "ProducerManager::::getAvailableChannel(java.lang.String)", "155": "ProducerManager::::getAvailableChannel(java.lang.String)", "156": "ProducerManager::::getAvailableChannel(java.lang.String)", "157": "ProducerManager::::getAvailableChannel(java.lang.String)", "158": "ProducerManager::::getAvailableChannel(java.lang.String)", "159": "ProducerManager::::getAvailableChannel(java.lang.String)", "160": "ProducerManager::::getAvailableChannel(java.lang.String)", "161": "ProducerManager::::getAvailableChannel(java.lang.String)", "162": "ProducerManager::::getAvailableChannel(java.lang.String)", "163": "ProducerManager::::getAvailableChannel(java.lang.String)", "164": "ProducerManager::::getAvailableChannel(java.lang.String)", "165": "ProducerManager::::getAvailableChannel(java.lang.String)", "166": "ProducerManager::::getAvailableChannel(java.lang.String)", "167": "ProducerManager::::getAvailableChannel(java.lang.String)", "168": "ProducerManager::::getAvailableChannel(java.lang.String)", "169": "ProducerManager::::getAvailableChannel(java.lang.String)", "170": "ProducerManager::::getAvailableChannel(java.lang.String)", "171": "ProducerManager::::getAvailableChannel(java.lang.String)", "172": "ProducerManager::::getAvailableChannel(java.lang.String)", "174": "ProducerManager::::findChannel(java.lang.String)", "175": "ProducerManager::::findChannel(java.lang.String)", "176": "ProducerManager::::findChannel(java.lang.String)"}, "test_reverse_method_lines_dic": {"44": "ProducerManagerTest::::init()", "45": "ProducerManagerTest::::init()", "46": "ProducerManagerTest::::init()", "47": "ProducerManagerTest::::init()", "48": "ProducerManagerTest::::init()", "50": "ProducerManagerTest::::scanNotActiveChannel()", "51": "ProducerManagerTest::::scanNotActiveChannel()", "52": "ProducerManagerTest::::scanNotActiveChannel()", "53": "ProducerManagerTest::::scanNotActiveChannel()", "54": "ProducerManagerTest::::scanNotActiveChannel()", "55": "ProducerManagerTest::::scanNotActiveChannel()", "56": "ProducerManagerTest::::scanNotActiveChannel()", "57": "ProducerManagerTest::::scanNotActiveChannel()", "58": "ProducerManagerTest::::scanNotActiveChannel()", "59": "ProducerManagerTest::::scanNotActiveChannel()", "60": "ProducerManagerTest::::scanNotActiveChannel()", "61": "ProducerManagerTest::::scanNotActiveChannel()", "62": "ProducerManagerTest::::scanNotActiveChannel()", "63": "ProducerManagerTest::::scanNotActiveChannel()", "65": "ProducerManagerTest::::doChannelCloseEvent()", "66": "ProducerManagerTest::::doChannelCloseEvent()", "67": "ProducerManagerTest::::doChannelCloseEvent()", "68": "ProducerManagerTest::::doChannelCloseEvent()", "69": "ProducerManagerTest::::doChannelCloseEvent()", "70": "ProducerManagerTest::::doChannelCloseEvent()", "71": "ProducerManagerTest::::doChannelCloseEvent()", "72": "ProducerManagerTest::::doChannelCloseEvent()", "73": "ProducerManagerTest::::doChannelCloseEvent()", "75": "ProducerManagerTest::::testRegisterProducer()", "76": "ProducerManagerTest::::testRegisterProducer()", "77": "ProducerManagerTest::::testRegisterProducer()", "78": "ProducerManagerTest::::testRegisterProducer()", "79": "ProducerManagerTest::::testRegisterProducer()", "80": "ProducerManagerTest::::testRegisterProducer()", "81": "ProducerManagerTest::::testRegisterProducer()", "82": "ProducerManagerTest::::testRegisterProducer()", "83": "ProducerManagerTest::::testRegisterProducer()", "84": "ProducerManagerTest::::testRegisterProducer()", "86": "ProducerManagerTest::::unregisterProducer()", "87": "ProducerManagerTest::::unregisterProducer()", "88": "ProducerManagerTest::::unregisterProducer()", "89": "ProducerManagerTest::::unregisterProducer()", "90": "ProducerManagerTest::::unregisterProducer()", "91": "ProducerManagerTest::::unregisterProducer()", "92": "ProducerManagerTest::::unregisterProducer()", "93": "ProducerManagerTest::::unregisterProducer()", "94": "ProducerManagerTest::::unregisterProducer()", "95": "ProducerManagerTest::::unregisterProducer()", "96": "ProducerManagerTest::::unregisterProducer()", "97": "ProducerManagerTest::::unregisterProducer()", "98": "ProducerManagerTest::::unregisterProducer()", "99": "ProducerManagerTest::::unregisterProducer()", "100": "ProducerManagerTest::::unregisterProducer()", "101": "ProducerManagerTest::::unregisterProducer()", "103": "ProducerManagerTest::::testGetGroupChannelTable()", "104": "ProducerManagerTest::::testGetGroupChannelTable()", "105": "ProducerManagerTest::::testGetGroupChannelTable()", "106": "ProducerManagerTest::::testGetGroupChannelTable()", "107": "ProducerManagerTest::::testGetGroupChannelTable()", "108": "ProducerManagerTest::::testGetGroupChannelTable()", "109": "ProducerManagerTest::::testGetGroupChannelTable()", "110": "ProducerManagerTest::::testGetGroupChannelTable()", "112": "ProducerManagerTest::::testGetAvailableChannel()", "113": "ProducerManagerTest::::testGetAvailableChannel()", "114": "ProducerManagerTest::::testGetAvailableChannel()", "115": "ProducerManagerTest::::testGetAvailableChannel()", "116": "ProducerManagerTest::::testGetAvailableChannel()", "117": "ProducerManagerTest::::testGetAvailableChannel()", "118": "ProducerManagerTest::::testGetAvailableChannel()", "119": "ProducerManagerTest::::testGetAvailableChannel()", "120": "ProducerManagerTest::::testGetAvailableChannel()", "121": "ProducerManagerTest::::testGetAvailableChannel()", "122": "ProducerManagerTest::::testGetAvailableChannel()", "123": "ProducerManagerTest::::testGetAvailableChannel()", "124": "ProducerManagerTest::::testGetAvailableChannel()", "125": "ProducerManagerTest::::testGetAvailableChannel()", "126": "ProducerManagerTest::::testGetAvailableChannel()", "127": "ProducerManagerTest::::testGetAvailableChannel()", "128": "ProducerManagerTest::::testGetAvailableChannel()"}, "tests": [{"test_lines": [50, 63], "covered_lines": [34, 37, 39, 40, 42, 43, 46, 50, 51, 52, 53, 55, 56, 57, 59, 61, 62, 63, 64, 65, 67, 68, 70, 71, 72, 95, 97, 98, 99, 100, 103, 104, 105, 106, 107, 108, 112, 115, 175]}, {"test_lines": [65, 73], "covered_lines": [34, 37, 39, 40, 42, 43, 46, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 90, 92, 95, 97, 98, 99, 100, 103, 104, 105, 106, 107, 108, 112, 115, 175]}, {"test_lines": [75, 84], "covered_lines": [34, 37, 39, 40, 42, 43, 46, 95, 97, 98, 99, 100, 103, 104, 105, 106, 107, 108, 112, 115, 175]}, {"test_lines": [86, 101], "covered_lines": [34, 37, 39, 40, 42, 43, 46, 95, 97, 98, 99, 100, 103, 104, 105, 106, 107, 108, 112, 115, 118, 119, 120, 121, 122, 123, 124, 127, 128, 129, 132, 175]}, {"test_lines": [103, 110], "covered_lines": [34, 37, 39, 40, 42, 43, 46, 95, 97, 98, 99, 100, 103, 104, 105, 106, 107, 108, 112, 115, 118, 119, 120, 121, 122, 123, 124, 127, 128, 129, 132]}, {"test_lines": [112, 128], "covered_lines": [34, 37, 39, 40, 42, 43, 95, 97, 98, 99, 100, 103, 104, 105, 106, 107, 108, 112, 115, 135, 139, 140, 141, 147, 148, 153, 155, 156, 157, 158, 159, 160, 161, 163, 164, 166, 167, 168, 171]}]}, "/bernard/dataset_construction/prep/repos/RocketMQC/broker/src/main/java/org/apache/rocketmq/broker/filter/ConsumerFilterManager.java": {"class_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package org.apache.rocketmq.broker.filter;\n", "\n", "import java.util.concurrent.ConcurrentMap;\n", "import org.apache.rocketmq.broker.BrokerController;\n", "import org.apache.rocketmq.broker.BrokerPathConfigHelper;\n", "import org.apache.rocketmq.common.ConfigManager;\n", "import org.apache.rocketmq.common.constant.LoggerName;\n", "import org.apache.rocketmq.logging.InternalLogger;\n", "import org.apache.rocketmq.logging.InternalLoggerFactory;\n", "import org.apache.rocketmq.common.protocol.heartbeat.SubscriptionData;\n", "import org.apache.rocketmq.filter.FilterFactory;\n", "import org.apache.rocketmq.common.filter.ExpressionType;\n", "import org.apache.rocketmq.filter.util.BloomFilter;\n", "import org.apache.rocketmq.filter.util.BloomFilterData;\n", "import org.apache.rocketmq.remoting.protocol.RemotingSerializable;\n", "\n", "import java.util.Collection;\n", "import java.util.HashSet;\n", "import java.util.Iterator;\n", "import java.util.Map;\n", "import java.util.concurrent.ConcurrentHashMap;\n", "\n", "/**\n", " * Consumer filter data manager.Just manage the consumers use expression filter.\n", " */\n", "public class ConsumerFilterManager extends ConfigManager {\n", "\n", "    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.FILTER_LOGGER_NAME);\n", "\n", "    private static final long MS_24_HOUR = 24 * 3600 * 1000;\n", "\n", "    private ConcurrentMap<String/*Topic*/, FilterDataMapByTopic>\n", "        filterDataByTopic = new ConcurrentHashMap<String/*Topic*/, FilterDataMapByTopic>(256);\n", "\n", "    private transient BrokerController brokerController;\n", "    private transient BloomFilter bloomFilter;\n", "\n", "    public ConsumerFilterManager() {\n", "        // just for test\n", "        this.bloomFilter = BloomFilter.createByFn(20, 64);\n", "    }\n", "\n", "    public ConsumerFilterManager(BrokerController brokerController) {\n", "        this.brokerController = brokerController;\n", "        this.bloomFilter = BloomFilter.createByFn(\n", "            brokerController.getBrokerConfig().getMaxErrorRateOfBloomFilter(),\n", "            brokerController.getBrokerConfig().getExpectConsumerNumUseFilter()\n", "        );\n", "        // then set bit map length of store config.\n", "        brokerController.getMessageStoreConfig().setBitMapLengthConsumeQueueExt(\n", "            this.bloomFilter.getM()\n", "        );\n", "    }\n", "\n", "    /**\n", "     * Build consumer filter data.Be care, bloom filter data is not included.\n", "     *\n", "     * @return maybe null\n", "     */\n", "    public static ConsumerFilterData build(final String topic, final String consumerGroup,\n", "        final String expression, final String type,\n", "        final long clientVersion) {\n", "        if (ExpressionType.isTagType(type)) {\n", "            return null;\n", "        }\n", "\n", "        ConsumerFilterData consumerFilterData = new ConsumerFilterData();\n", "        consumerFilterData.setTopic(topic);\n", "        consumerFilterData.setConsumerGroup(consumerGroup);\n", "        consumerFilterData.setBornTime(System.currentTimeMillis());\n", "        consumerFilterData.setDeadTime(0);\n", "        consumerFilterData.setExpression(expression);\n", "        consumerFilterData.setExpressionType(type);\n", "        consumerFilterData.setClientVersion(clientVersion);\n", "        try {\n", "            consumerFilterData.setCompiledExpression(\n", "                FilterFactory.INSTANCE.get(type).compile(expression)\n", "            );\n", "        } catch (Throwable e) {\n", "            log.error(\"parse error: expr={}, topic={}, group={}, error={}\", expression, topic, consumerGroup, e.getMessage());\n", "            return null;\n", "        }\n", "\n", "        return consumerFilterData;\n", "    }\n", "\n", "    public void register(final String consumerGroup, final Collection<SubscriptionData> subList) {\n", "        for (SubscriptionData subscriptionData : subList) {\n", "            register(\n", "                subscriptionData.getTopic(),\n", "                consumerGroup,\n", "                subscriptionData.getSubString(),\n", "                subscriptionData.getExpressionType(),\n", "                subscriptionData.getSubVersion()\n", "            );\n", "        }\n", "\n", "        // make illegal topic dead.\n", "        Collection<ConsumerFilterData> groupFilterData = getByGroup(consumerGroup);\n", "\n", "        Iterator<ConsumerFilterData> iterator = groupFilterData.iterator();\n", "        while (iterator.hasNext()) {\n", "            ConsumerFilterData filterData = iterator.next();\n", "\n", "            boolean exist = false;\n", "            for (SubscriptionData subscriptionData : subList) {\n", "                if (subscriptionData.getTopic().equals(filterData.getTopic())) {\n", "                    exist = true;\n", "                    break;\n", "                }\n", "            }\n", "\n", "            if (!exist && !filterData.isDead()) {\n", "                filterData.setDeadTime(System.currentTimeMillis());\n", "                log.info(\"Consumer filter changed: {}, make illegal topic dead:{}\", consumerGroup, filterData);\n", "            }\n", "        }\n", "    }\n", "\n", "    public boolean register(final String topic, final String consumerGroup, final String expression,\n", "        final String type, final long clientVersion) {\n", "        if (ExpressionType.isTagType(type)) {\n", "            return false;\n", "        }\n", "\n", "        if (expression == null || expression.length() == 0) {\n", "            return false;\n", "        }\n", "\n", "        FilterDataMapByTopic filterDataMapByTopic = this.filterDataByTopic.get(topic);\n", "\n", "        if (filterDataMapByTopic == null) {\n", "            FilterDataMapByTopic temp = new FilterDataMapByTopic(topic);\n", "            FilterDataMapByTopic prev = this.filterDataByTopic.putIfAbsent(topic, temp);\n", "            filterDataMapByTopic = prev != null ? prev : temp;\n", "        }\n", "\n", "        BloomFilterData bloomFilterData = bloomFilter.generate(consumerGroup + \"#\" + topic);\n", "\n", "        return filterDataMapByTopic.register(consumerGroup, expression, type, bloomFilterData, clientVersion);\n", "    }\n", "\n", "    public void unRegister(final String consumerGroup) {\n", "        for (String topic : filterDataByTopic.keySet()) {\n", "            this.filterDataByTopic.get(topic).unRegister(consumerGroup);\n", "        }\n", "    }\n", "\n", "    public ConsumerFilterData get(final String topic, final String consumerGroup) {\n", "        if (!this.filterDataByTopic.containsKey(topic)) {\n", "            return null;\n", "        }\n", "        if (this.filterDataByTopic.get(topic).getGroupFilterData().isEmpty()) {\n", "            return null;\n", "        }\n", "\n", "        return this.filterDataByTopic.get(topic).getGroupFilterData().get(consumerGroup);\n", "    }\n", "\n", "    public Collection<ConsumerFilterData> getByGroup(final String consumerGroup) {\n", "        Collection<ConsumerFilterData> ret = new HashSet<ConsumerFilterData>();\n", "\n", "        Iterator<FilterDataMapByTopic> topicIterator = this.filterDataByTopic.values().iterator();\n", "        while (topicIterator.hasNext()) {\n", "            FilterDataMapByTopic filterDataMapByTopic = topicIterator.next();\n", "\n", "            Iterator<ConsumerFilterData> filterDataIterator = filterDataMapByTopic.getGroupFilterData().values().iterator();\n", "\n", "            while (filterDataIterator.hasNext()) {\n", "                ConsumerFilterData filterData = filterDataIterator.next();\n", "\n", "                if (filterData.getConsumerGroup().equals(consumerGroup)) {\n", "                    ret.add(filterData);\n", "                }\n", "            }\n", "        }\n", "\n", "        return ret;\n", "    }\n", "\n", "    public final Collection<ConsumerFilterData> get(final String topic) {\n", "        if (!this.filterDataByTopic.containsKey(topic)) {\n", "            return null;\n", "        }\n", "        if (this.filterDataByTopic.get(topic).getGroupFilterData().isEmpty()) {\n", "            return null;\n", "        }\n", "\n", "        return this.filterDataByTopic.get(topic).getGroupFilterData().values();\n", "    }\n", "\n", "    public BloomFilter getBloomFilter() {\n", "        return bloomFilter;\n", "    }\n", "\n", "    @Override\n", "    public String encode() {\n", "        return encode(false);\n", "    }\n", "\n", "    @Override\n", "    public String configFilePath() {\n", "        if (this.brokerController != null) {\n", "            return BrokerPathConfigHelper.getConsumerFilterPath(\n", "                this.brokerController.getMessageStoreConfig().getStorePathRootDir()\n", "            );\n", "        }\n", "        return BrokerPathConfigHelper.getConsumerFilterPath(\"./unit_test\");\n", "    }\n", "\n", "    @Override\n", "    public void decode(final String jsonString) {\n", "        ConsumerFilterManager load = RemotingSerializable.fromJson(jsonString, ConsumerFilterManager.class);\n", "        if (load != null && load.filterDataByTopic != null) {\n", "            boolean bloomChanged = false;\n", "            for (String topic : load.filterDataByTopic.keySet()) {\n", "                FilterDataMapByTopic dataMapByTopic = load.filterDataByTopic.get(topic);\n", "                if (dataMapByTopic == null) {\n", "                    continue;\n", "                }\n", "\n", "                for (String group : dataMapByTopic.getGroupFilterData().keySet()) {\n", "\n", "                    ConsumerFilterData filterData = dataMapByTopic.getGroupFilterData().get(group);\n", "\n", "                    if (filterData == null) {\n", "                        continue;\n", "                    }\n", "\n", "                    try {\n", "                        filterData.setCompiledExpression(\n", "                            FilterFactory.INSTANCE.get(filterData.getExpressionType()).compile(filterData.getExpression())\n", "                        );\n", "                    } catch (Exception e) {\n", "                        log.error(\"load filter data error, \" + filterData, e);\n", "                    }\n", "\n", "                    // check whether bloom filter is changed\n", "                    // if changed, ignore the bit map calculated before.\n", "                    if (!this.bloomFilter.isValid(filterData.getBloomFilterData())) {\n", "                        bloomChanged = true;\n", "                        log.info(\"Bloom filter is changed!So ignore all filter data persisted! {}, {}\", this.bloomFilter, filterData.getBloomFilterData());\n", "                        break;\n", "                    }\n", "\n", "                    log.info(\"load exist consumer filter data: {}\", filterData);\n", "\n", "                    if (filterData.getDeadTime() == 0) {\n", "                        // we think all consumers are dead when load\n", "                        long deadTime = System.currentTimeMillis() - 30 * 1000;\n", "                        filterData.setDeadTime(\n", "                            deadTime <= filterData.getBornTime() ? filterData.getBornTime() : deadTime\n", "                        );\n", "                    }\n", "                }\n", "            }\n", "\n", "            if (!bloomChanged) {\n", "                this.filterDataByTopic = load.filterDataByTopic;\n", "            }\n", "        }\n", "    }\n", "\n", "    @Override\n", "    public String encode(final boolean prettyFormat) {\n", "        // clean\n", "        {\n", "            clean();\n", "        }\n", "        return RemotingSerializable.toJson(this, prettyFormat);\n", "    }\n", "\n", "    public void clean() {\n", "        Iterator<Map.Entry<String, FilterDataMapByTopic>> topicIterator = this.filterDataByTopic.entrySet().iterator();\n", "        while (topicIterator.hasNext()) {\n", "            Map.Entry<String, FilterDataMapByTopic> filterDataMapByTopic = topicIterator.next();\n", "\n", "            Iterator<Map.Entry<String, ConsumerFilterData>> filterDataIterator\n", "                = filterDataMapByTopic.getValue().getGroupFilterData().entrySet().iterator();\n", "\n", "            while (filterDataIterator.hasNext()) {\n", "                Map.Entry<String, ConsumerFilterData> filterDataByGroup = filterDataIterator.next();\n", "\n", "                ConsumerFilterData filterData = filterDataByGroup.getValue();\n", "                if (filterData.howLongAfterDeath() >= (this.brokerController == null ? MS_24_HOUR : this.brokerController.getBrokerConfig().getFilterDataCleanTimeSpan())) {\n", "                    log.info(\"Remove filter consumer {}, died too long!\", filterDataByGroup.getValue());\n", "                    filterDataIterator.remove();\n", "                }\n", "            }\n", "\n", "            if (filterDataMapByTopic.getValue().getGroupFilterData().isEmpty()) {\n", "                log.info(\"Topic has no consumer, remove it! {}\", filterDataMapByTopic.getKey());\n", "                topicIterator.remove();\n", "            }\n", "        }\n", "    }\n", "\n", "    public ConcurrentMap<String, FilterDataMapByTopic> getFilterDataByTopic() {\n", "        return filterDataByTopic;\n", "    }\n", "\n", "    public void setFilterDataByTopic(final ConcurrentHashMap<String, FilterDataMapByTopic> filterDataByTopic) {\n", "        this.filterDataByTopic = filterDataByTopic;\n", "    }\n", "\n", "    public static class FilterDataMapByTopic {\n", "\n", "        private ConcurrentMap<String/*consumer group*/, ConsumerFilterData>\n", "            groupFilterData = new ConcurrentHashMap<String, ConsumerFilterData>();\n", "\n", "        private String topic;\n", "\n", "        public FilterDataMapByTopic() {\n", "        }\n", "\n", "        public FilterDataMapByTopic(String topic) {\n", "            this.topic = topic;\n", "        }\n", "\n", "        public void unRegister(String consumerGroup) {\n", "            if (!this.groupFilterData.containsKey(consumerGroup)) {\n", "                return;\n", "            }\n", "\n", "            ConsumerFilterData data = this.groupFilterData.get(consumerGroup);\n", "\n", "            if (data == null || data.isDead()) {\n", "                return;\n", "            }\n", "\n", "            long now = System.currentTimeMillis();\n", "\n", "            log.info(\"Unregister consumer filter: {}, deadTime: {}\", data, now);\n", "\n", "            data.setDeadTime(now);\n", "        }\n", "\n", "        public boolean register(String consumerGroup, String expression, String type, BloomFilterData bloomFilterData,\n", "            long clientVersion) {\n", "            ConsumerFilterData old = this.groupFilterData.get(consumerGroup);\n", "\n", "            if (old == null) {\n", "                ConsumerFilterData consumerFilterData = build(topic, consumerGroup, expression, type, clientVersion);\n", "                if (consumerFilterData == null) {\n", "                    return false;\n", "                }\n", "                consumerFilterData.setBloomFilterData(bloomFilterData);\n", "\n", "                old = this.groupFilterData.putIfAbsent(consumerGroup, consumerFilterData);\n", "                if (old == null) {\n", "                    log.info(\"New consumer filter registered: {}\", consumerFilterData);\n", "                    return true;\n", "                } else {\n", "                    if (clientVersion <= old.getClientVersion()) {\n", "                        if (!type.equals(old.getExpressionType()) || !expression.equals(old.getExpression())) {\n", "                            log.warn(\"Ignore consumer({} : {}) filter(concurrent), because of version {} <= {}, but maybe info changed!old={}:{}, ignored={}:{}\",\n", "                                consumerGroup, topic,\n", "                                clientVersion, old.getClientVersion(),\n", "                                old.getExpressionType(), old.getExpression(),\n", "                                type, expression);\n", "                        }\n", "                        if (clientVersion == old.getClientVersion() && old.isDead()) {\n", "                            reAlive(old);\n", "                            return true;\n", "                        }\n", "\n", "                        return false;\n", "                    } else {\n", "                        this.groupFilterData.put(consumerGroup, consumerFilterData);\n", "                        log.info(\"New consumer filter registered(concurrent): {}, old: {}\", consumerFilterData, old);\n", "                        return true;\n", "                    }\n", "                }\n", "            } else {\n", "                if (clientVersion <= old.getClientVersion()) {\n", "                    if (!type.equals(old.getExpressionType()) || !expression.equals(old.getExpression())) {\n", "                        log.info(\"Ignore consumer({}:{}) filter, because of version {} <= {}, but maybe info changed!old={}:{}, ignored={}:{}\",\n", "                            consumerGroup, topic,\n", "                            clientVersion, old.getClientVersion(),\n", "                            old.getExpressionType(), old.getExpression(),\n", "                            type, expression);\n", "                    }\n", "                    if (clientVersion == old.getClientVersion() && old.isDead()) {\n", "                        reAlive(old);\n", "                        return true;\n", "                    }\n", "\n", "                    return false;\n", "                }\n", "\n", "                boolean change = !old.getExpression().equals(expression) || !old.getExpressionType().equals(type);\n", "                if (old.getBloomFilterData() == null && bloomFilterData != null) {\n", "                    change = true;\n", "                }\n", "                if (old.getBloomFilterData() != null && !old.getBloomFilterData().equals(bloomFilterData)) {\n", "                    change = true;\n", "                }\n", "\n", "                // if subscribe data is changed, or consumer is died too long.\n", "                if (change) {\n", "                    ConsumerFilterData consumerFilterData = build(topic, consumerGroup, expression, type, clientVersion);\n", "                    if (consumerFilterData == null) {\n", "                        // new expression compile error, remove old, let client report error.\n", "                        this.groupFilterData.remove(consumerGroup);\n", "                        return false;\n", "                    }\n", "                    consumerFilterData.setBloomFilterData(bloomFilterData);\n", "\n", "                    this.groupFilterData.put(consumerGroup, consumerFilterData);\n", "\n", "                    log.info(\"Consumer filter info change, old: {}, new: {}, change: {}\",\n", "                        old, consumerFilterData, change);\n", "\n", "                    return true;\n", "                } else {\n", "                    old.setClientVersion(clientVersion);\n", "                    if (old.isDead()) {\n", "                        reAlive(old);\n", "                    }\n", "                    return true;\n", "                }\n", "            }\n", "        }\n", "\n", "        protected void reAlive(ConsumerFilterData filterData) {\n", "            long oldDeadTime = filterData.getDeadTime();\n", "            filterData.setDeadTime(0);\n", "            log.info(\"Re alive consumer filter: {}, oldDeadTime: {}\", filterData, oldDeadTime);\n", "        }\n", "\n", "        public final ConsumerFilterData get(String consumerGroup) {\n", "            return this.groupFilterData.get(consumerGroup);\n", "        }\n", "\n", "        public final ConcurrentMap<String, ConsumerFilterData> getGroupFilterData() {\n", "            return this.groupFilterData;\n", "        }\n", "\n", "        public void setGroupFilterData(final ConcurrentHashMap<String, ConsumerFilterData> groupFilterData) {\n", "            this.groupFilterData = groupFilterData;\n", "        }\n", "\n", "        public String getTopic() {\n", "            return topic;\n", "        }\n", "\n", "        public void setTopic(final String topic) {\n", "            this.topic = topic;\n", "        }\n", "    }\n", "}\n"], "test_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package org.apache.rocketmq.broker.filter;\n", "\n", "import org.apache.rocketmq.common.UtilAll;\n", "import org.apache.rocketmq.common.filter.ExpressionType;\n", "import org.apache.rocketmq.common.filter.FilterAPI;\n", "import org.apache.rocketmq.common.protocol.heartbeat.SubscriptionData;\n", "import org.junit.Test;\n", "\n", "import java.io.File;\n", "import java.util.ArrayList;\n", "import java.util.Collection;\n", "import java.util.Iterator;\n", "import java.util.List;\n", "\n", "import static org.assertj.core.api.Assertions.assertThat;\n", "\n", "public class ConsumerFilterManagerTest {\n", "\n", "    public static ConsumerFilterManager gen(int topicCount, int consumerCount) {\n", "        ConsumerFilterManager filterManager = new ConsumerFilterManager();\n", "\n", "        for (int i = 0; i < topicCount; i++) {\n", "            String topic = \"topic\" + i;\n", "\n", "            for (int j = 0; j < consumerCount; j++) {\n", "\n", "                String consumer = \"CID_\" + j;\n", "\n", "                filterManager.register(topic, consumer, expr(j), ExpressionType.SQL92, System.currentTimeMillis());\n", "            }\n", "        }\n", "\n", "        return filterManager;\n", "    }\n", "\n", "    public static String expr(int i) {\n", "        return \"a is not null and a > \" + ((i - 1) * 10) + \" and a < \" + ((i + 1) * 10);\n", "    }\n", "\n", "    @Test\n", "    public void testRegister_newExpressionCompileErrorAndRemoveOld() {\n", "        ConsumerFilterManager filterManager = gen(10, 10);\n", "\n", "        assertThat(filterManager.get(\"topic9\", \"CID_9\")).isNotNull();\n", "\n", "        String newExpr = \"a between 10,20\";\n", "\n", "        assertThat(filterManager.register(\"topic9\", \"CID_9\", newExpr, ExpressionType.SQL92, System.currentTimeMillis() + 1))\n", "            .isFalse();\n", "        assertThat(filterManager.get(\"topic9\", \"CID_9\")).isNull();\n", "\n", "        newExpr = \"a between 10 AND 20\";\n", "\n", "        assertThat(filterManager.register(\"topic9\", \"CID_9\", newExpr, ExpressionType.SQL92, System.currentTimeMillis() + 1))\n", "            .isTrue();\n", "\n", "        ConsumerFilterData filterData = filterManager.get(\"topic9\", \"CID_9\");\n", "\n", "        assertThat(filterData).isNotNull();\n", "        assertThat(newExpr).isEqualTo(filterData.getExpression());\n", "    }\n", "\n", "    @Test\n", "    public void testRegister_change() {\n", "        ConsumerFilterManager filterManager = gen(10, 10);\n", "\n", "        ConsumerFilterData filterData = filterManager.get(\"topic9\", \"CID_9\");\n", "\n", "        System.out.println(filterData.getCompiledExpression());\n", "\n", "        String newExpr = \"a > 0 and a < 10\";\n", "\n", "        filterManager.register(\"topic9\", \"CID_9\", newExpr, ExpressionType.SQL92, System.currentTimeMillis() + 1);\n", "\n", "        filterData = filterManager.get(\"topic9\", \"CID_9\");\n", "\n", "        assertThat(newExpr).isEqualTo(filterData.getExpression());\n", "\n", "        System.out.println(filterData.toString());\n", "    }\n", "\n", "    @Test\n", "    public void testRegister() {\n", "        ConsumerFilterManager filterManager = gen(10, 10);\n", "\n", "        ConsumerFilterData filterData = filterManager.get(\"topic9\", \"CID_9\");\n", "\n", "        assertThat(filterData).isNotNull();\n", "        assertThat(filterData.isDead()).isFalse();\n", "\n", "        // new version\n", "        assertThat(filterManager.register(\n", "            \"topic9\", \"CID_9\", \"a is not null\", ExpressionType.SQL92, System.currentTimeMillis() + 1000\n", "        )).isTrue();\n", "\n", "        ConsumerFilterData newFilter = filterManager.get(\"topic9\", \"CID_9\");\n", "\n", "        assertThat(newFilter).isNotEqualTo(filterData);\n", "\n", "        // same version\n", "        assertThat(filterManager.register(\n", "            \"topic9\", \"CID_9\", \"a is null\", ExpressionType.SQL92, newFilter.getClientVersion()\n", "        )).isFalse();\n", "\n", "        ConsumerFilterData filterData1 = filterManager.get(\"topic9\", \"CID_9\");\n", "\n", "        assertThat(newFilter).isEqualTo(filterData1);\n", "    }\n", "\n", "    @Test\n", "    public void testRegister_reAlive() {\n", "        ConsumerFilterManager filterManager = gen(10, 10);\n", "\n", "        ConsumerFilterData filterData = filterManager.get(\"topic9\", \"CID_9\");\n", "\n", "        assertThat(filterData).isNotNull();\n", "        assertThat(filterData.isDead()).isFalse();\n", "\n", "        //make dead\n", "        filterManager.unRegister(\"CID_9\");\n", "\n", "        //reAlive\n", "        filterManager.register(\n", "            filterData.getTopic(),\n", "            filterData.getConsumerGroup(),\n", "            filterData.getExpression(),\n", "            filterData.getExpressionType(),\n", "            System.currentTimeMillis()\n", "        );\n", "\n", "        ConsumerFilterData newFilterData = filterManager.get(\"topic9\", \"CID_9\");\n", "\n", "        assertThat(newFilterData).isNotNull();\n", "        assertThat(newFilterData.isDead()).isFalse();\n", "    }\n", "\n", "    @Test\n", "    public void testRegister_bySubscriptionData() {\n", "        ConsumerFilterManager filterManager = new ConsumerFilterManager();\n", "        List<SubscriptionData> subscriptionDatas = new ArrayList<>();\n", "        for (int i = 0; i < 10; i++) {\n", "            try {\n", "                subscriptionDatas.add(\n", "                    FilterAPI.build(\n", "                        \"topic\" + i,\n", "                        \"a is not null and a > \" + i,\n", "                        ExpressionType.SQL92\n", "                    )\n", "                );\n", "            } catch (Exception e) {\n", "                e.printStackTrace();\n", "                assertThat(true).isFalse();\n", "            }\n", "        }\n", "\n", "        filterManager.register(\"CID_0\", subscriptionDatas);\n", "\n", "        Collection<ConsumerFilterData> filterDatas = filterManager.getByGroup(\"CID_0\");\n", "\n", "        assertThat(filterDatas).isNotNull();\n", "        assertThat(filterDatas.size()).isEqualTo(10);\n", "\n", "        Iterator<ConsumerFilterData> iterator = filterDatas.iterator();\n", "        while (iterator.hasNext()) {\n", "            ConsumerFilterData filterData = iterator.next();\n", "\n", "            assertThat(filterData).isNotNull();\n", "            assertThat(filterManager.getBloomFilter().isValid(filterData.getBloomFilterData())).isTrue();\n", "        }\n", "    }\n", "\n", "    @Test\n", "    public void testRegister_tag() {\n", "        ConsumerFilterManager filterManager = new ConsumerFilterManager();\n", "\n", "        assertThat(filterManager.register(\"topic0\", \"CID_0\", \"*\", null, System.currentTimeMillis())).isFalse();\n", "\n", "        Collection<ConsumerFilterData> filterDatas = filterManager.getByGroup(\"CID_0\");\n", "\n", "        assertThat(filterDatas).isNullOrEmpty();\n", "    }\n", "\n", "    @Test\n", "    public void testUnregister() {\n", "        ConsumerFilterManager filterManager = gen(10, 10);\n", "\n", "        ConsumerFilterData filterData = filterManager.get(\"topic9\", \"CID_9\");\n", "\n", "        assertThat(filterData).isNotNull();\n", "        assertThat(filterData.isDead()).isFalse();\n", "\n", "        filterManager.unRegister(\"CID_9\");\n", "\n", "        assertThat(filterData.isDead()).isTrue();\n", "    }\n", "\n", "    @Test\n", "    public void testPersist() {\n", "        ConsumerFilterManager filterManager = gen(10, 10);\n", "\n", "        try {\n", "            filterManager.persist();\n", "\n", "            ConsumerFilterData filterData = filterManager.get(\"topic9\", \"CID_9\");\n", "\n", "            assertThat(filterData).isNotNull();\n", "            assertThat(filterData.isDead()).isFalse();\n", "\n", "            ConsumerFilterManager loadFilter = new ConsumerFilterManager();\n", "\n", "            assertThat(loadFilter.load()).isTrue();\n", "\n", "            filterData = loadFilter.get(\"topic9\", \"CID_9\");\n", "\n", "            assertThat(filterData).isNotNull();\n", "            assertThat(filterData.isDead()).isTrue();\n", "            assertThat(filterData.getCompiledExpression()).isNotNull();\n", "        } finally {\n", "            UtilAll.deleteFile(new File(\"./unit_test\"));\n", "        }\n", "    }\n", "\n", "    @Test\n", "    public void testPersist_clean() {\n", "        ConsumerFilterManager filterManager = gen(10, 10);\n", "\n", "        String topic = \"topic9\";\n", "        for (int i = 0; i < 10; i++) {\n", "            String cid = \"CID_\" + i;\n", "\n", "            ConsumerFilterData filterData = filterManager.get(topic, cid);\n", "\n", "            assertThat(filterData).isNotNull();\n", "            assertThat(filterData.isDead()).isFalse();\n", "\n", "            //make dead more than 24h\n", "            filterData.setBornTime(System.currentTimeMillis() - 26 * 60 * 60 * 1000);\n", "            filterData.setDeadTime(System.currentTimeMillis() - 25 * 60 * 60 * 1000);\n", "        }\n", "\n", "        try {\n", "            filterManager.persist();\n", "\n", "            ConsumerFilterManager loadFilter = new ConsumerFilterManager();\n", "\n", "            assertThat(loadFilter.load()).isTrue();\n", "\n", "            ConsumerFilterData filterData = loadFilter.get(topic, \"CID_9\");\n", "\n", "            assertThat(filterData).isNull();\n", "\n", "            Collection<ConsumerFilterData> topicData = loadFilter.get(topic);\n", "\n", "            assertThat(topicData).isNullOrEmpty();\n", "        } finally {\n", "            UtilAll.deleteFile(new File(\"./unit_test\"));\n", "        }\n", "    }\n", "\n", "}\n"], "method_lines_dic": {"ConsumerFilterManager::::build(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)": [77, 102], "ConsumerFilterManager::::register(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)": [137, 158], "ConsumerFilterManager::::unRegister(java.lang.String)": [160, 164], "ConsumerFilterManager::::get(java.lang.String,java.lang.String)": [166, 175], "ConsumerFilterManager::::getByGroup(java.lang.String)": [177, 196], "ConsumerFilterManager::::get(java.lang.String)": [198, 207], "ConsumerFilterManager::::getBloomFilter()": [209, 211], "ConsumerFilterManager::::encode()": [213, 216], "ConsumerFilterManager::::configFilePath()": [218, 226], "ConsumerFilterManager::::decode(java.lang.String)": [228, 279], "ConsumerFilterManager::::encode(boolean)": [281, 288], "ConsumerFilterManager::::clean()": [290, 313], "ConsumerFilterManager::::getFilterDataByTopic()": [315, 317], "ConsumerFilterManager::::setFilterDataByTopic(java.util.concurrent.ConcurrentHashMap<java.lang.String, org.apache.rocketmq.broker.filter.ConsumerFilterManager.FilterDataMapByTopic>)": [319, 321], "ConsumerFilterManager.FilterDataMapByTopic::::unRegister(java.lang.String)": [337, 353], "ConsumerFilterManager.FilterDataMapByTopic::::reAlive(org.apache.rocketmq.broker.filter.ConsumerFilterData)": [442, 446], "ConsumerFilterManager.FilterDataMapByTopic::::get(java.lang.String)": [448, 450], "ConsumerFilterManager.FilterDataMapByTopic::::getGroupFilterData()": [452, 454], "ConsumerFilterManager.FilterDataMapByTopic::::setGroupFilterData(java.util.concurrent.ConcurrentHashMap<java.lang.String, org.apache.rocketmq.broker.filter.ConsumerFilterData>)": [456, 458], "ConsumerFilterManager.FilterDataMapByTopic::::getTopic()": [460, 462], "ConsumerFilterManager.FilterDataMapByTopic::::setTopic(java.lang.String)": [464, 466]}, "test_method_lines_dic": {"ConsumerFilterManagerTest::::gen(int,int)": [36, 51], "ConsumerFilterManagerTest::::expr(int)": [53, 55], "ConsumerFilterManagerTest::::testRegister_newExpressionCompileErrorAndRemoveOld()": [57, 78], "ConsumerFilterManagerTest::::testRegister_change()": [80, 97], "ConsumerFilterManagerTest::::testRegister()": [99, 125], "ConsumerFilterManagerTest::::testRegister_reAlive()": [127, 152], "ConsumerFilterManagerTest::::testRegister_bySubscriptionData()": [154, 187], "ConsumerFilterManagerTest::::testRegister_tag()": [189, 198], "ConsumerFilterManagerTest::::testUnregister()": [200, 212], "ConsumerFilterManagerTest::::testPersist()": [214, 238], "ConsumerFilterManagerTest::::testPersist_clean()": [240, 275]}, "reverse_method_lines_dic": {"77": "ConsumerFilterManager::::build(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)", "78": "ConsumerFilterManager::::build(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)", "79": "ConsumerFilterManager::::build(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)", "80": "ConsumerFilterManager::::build(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)", "81": "ConsumerFilterManager::::build(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)", "82": "ConsumerFilterManager::::build(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)", "83": "ConsumerFilterManager::::build(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)", "84": "ConsumerFilterManager::::build(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)", "85": "ConsumerFilterManager::::build(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)", "86": "ConsumerFilterManager::::build(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)", "87": "ConsumerFilterManager::::build(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)", "88": "ConsumerFilterManager::::build(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)", "89": "ConsumerFilterManager::::build(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)", "90": "ConsumerFilterManager::::build(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)", "91": "ConsumerFilterManager::::build(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)", "92": "ConsumerFilterManager::::build(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)", "93": "ConsumerFilterManager::::build(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)", "94": "ConsumerFilterManager::::build(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)", "95": "ConsumerFilterManager::::build(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)", "96": "ConsumerFilterManager::::build(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)", "97": "ConsumerFilterManager::::build(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)", "98": "ConsumerFilterManager::::build(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)", "99": "ConsumerFilterManager::::build(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)", "100": "ConsumerFilterManager::::build(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)", "101": "ConsumerFilterManager::::build(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)", "102": "ConsumerFilterManager::::build(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)", "137": "ConsumerFilterManager::::register(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)", "138": "ConsumerFilterManager::::register(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)", "139": "ConsumerFilterManager::::register(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)", "140": "ConsumerFilterManager::::register(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)", "141": "ConsumerFilterManager::::register(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)", "142": "ConsumerFilterManager::::register(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)", "143": "ConsumerFilterManager::::register(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)", "144": "ConsumerFilterManager::::register(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)", "145": "ConsumerFilterManager::::register(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)", "146": "ConsumerFilterManager::::register(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)", "147": "ConsumerFilterManager::::register(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)", "148": "ConsumerFilterManager::::register(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)", "149": "ConsumerFilterManager::::register(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)", "150": "ConsumerFilterManager::::register(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)", "151": "ConsumerFilterManager::::register(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)", "152": "ConsumerFilterManager::::register(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)", "153": "ConsumerFilterManager::::register(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)", "154": "ConsumerFilterManager::::register(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)", "155": "ConsumerFilterManager::::register(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)", "156": "ConsumerFilterManager::::register(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)", "157": "ConsumerFilterManager::::register(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)", "158": "ConsumerFilterManager::::register(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)", "160": "ConsumerFilterManager::::unRegister(java.lang.String)", "161": "ConsumerFilterManager::::unRegister(java.lang.String)", "162": "ConsumerFilterManager::::unRegister(java.lang.String)", "163": "ConsumerFilterManager::::unRegister(java.lang.String)", "164": "ConsumerFilterManager::::unRegister(java.lang.String)", "166": "ConsumerFilterManager::::get(java.lang.String,java.lang.String)", "167": "ConsumerFilterManager::::get(java.lang.String,java.lang.String)", "168": "ConsumerFilterManager::::get(java.lang.String,java.lang.String)", "169": "ConsumerFilterManager::::get(java.lang.String,java.lang.String)", "170": "ConsumerFilterManager::::get(java.lang.String,java.lang.String)", "171": "ConsumerFilterManager::::get(java.lang.String,java.lang.String)", "172": "ConsumerFilterManager::::get(java.lang.String,java.lang.String)", "173": "ConsumerFilterManager::::get(java.lang.String,java.lang.String)", "174": "ConsumerFilterManager::::get(java.lang.String,java.lang.String)", "175": "ConsumerFilterManager::::get(java.lang.String,java.lang.String)", "177": "ConsumerFilterManager::::getByGroup(java.lang.String)", "178": "ConsumerFilterManager::::getByGroup(java.lang.String)", "179": "ConsumerFilterManager::::getByGroup(java.lang.String)", "180": "ConsumerFilterManager::::getByGroup(java.lang.String)", "181": "ConsumerFilterManager::::getByGroup(java.lang.String)", "182": "ConsumerFilterManager::::getByGroup(java.lang.String)", "183": "ConsumerFilterManager::::getByGroup(java.lang.String)", "184": "ConsumerFilterManager::::getByGroup(java.lang.String)", "185": "ConsumerFilterManager::::getByGroup(java.lang.String)", "186": "ConsumerFilterManager::::getByGroup(java.lang.String)", "187": "ConsumerFilterManager::::getByGroup(java.lang.String)", "188": "ConsumerFilterManager::::getByGroup(java.lang.String)", "189": "ConsumerFilterManager::::getByGroup(java.lang.String)", "190": "ConsumerFilterManager::::getByGroup(java.lang.String)", "191": "ConsumerFilterManager::::getByGroup(java.lang.String)", "192": "ConsumerFilterManager::::getByGroup(java.lang.String)", "193": "ConsumerFilterManager::::getByGroup(java.lang.String)", "194": "ConsumerFilterManager::::getByGroup(java.lang.String)", "195": "ConsumerFilterManager::::getByGroup(java.lang.String)", "196": "ConsumerFilterManager::::getByGroup(java.lang.String)", "198": "ConsumerFilterManager::::get(java.lang.String)", "199": "ConsumerFilterManager::::get(java.lang.String)", "200": "ConsumerFilterManager::::get(java.lang.String)", "201": "ConsumerFilterManager::::get(java.lang.String)", "202": "ConsumerFilterManager::::get(java.lang.String)", "203": "ConsumerFilterManager::::get(java.lang.String)", "204": "ConsumerFilterManager::::get(java.lang.String)", "205": "ConsumerFilterManager::::get(java.lang.String)", "206": "ConsumerFilterManager::::get(java.lang.String)", "207": "ConsumerFilterManager::::get(java.lang.String)", "209": "ConsumerFilterManager::::getBloomFilter()", "210": "ConsumerFilterManager::::getBloomFilter()", "211": "ConsumerFilterManager::::getBloomFilter()", "213": "ConsumerFilterManager::::encode()", "214": "ConsumerFilterManager::::encode()", "215": "ConsumerFilterManager::::encode()", "216": "ConsumerFilterManager::::encode()", "218": "ConsumerFilterManager::::configFilePath()", "219": "ConsumerFilterManager::::configFilePath()", "220": "ConsumerFilterManager::::configFilePath()", "221": "ConsumerFilterManager::::configFilePath()", "222": "ConsumerFilterManager::::configFilePath()", "223": "ConsumerFilterManager::::configFilePath()", "224": "ConsumerFilterManager::::configFilePath()", "225": "ConsumerFilterManager::::configFilePath()", "226": "ConsumerFilterManager::::configFilePath()", "228": "ConsumerFilterManager::::decode(java.lang.String)", "229": "ConsumerFilterManager::::decode(java.lang.String)", "230": "ConsumerFilterManager::::decode(java.lang.String)", "231": "ConsumerFilterManager::::decode(java.lang.String)", "232": "ConsumerFilterManager::::decode(java.lang.String)", "233": "ConsumerFilterManager::::decode(java.lang.String)", "234": "ConsumerFilterManager::::decode(java.lang.String)", "235": "ConsumerFilterManager::::decode(java.lang.String)", "236": "ConsumerFilterManager::::decode(java.lang.String)", "237": "ConsumerFilterManager::::decode(java.lang.String)", "238": "ConsumerFilterManager::::decode(java.lang.String)", "239": "ConsumerFilterManager::::decode(java.lang.String)", "240": "ConsumerFilterManager::::decode(java.lang.String)", "241": "ConsumerFilterManager::::decode(java.lang.String)", "242": "ConsumerFilterManager::::decode(java.lang.String)", "243": "ConsumerFilterManager::::decode(java.lang.String)", "244": "ConsumerFilterManager::::decode(java.lang.String)", "245": "ConsumerFilterManager::::decode(java.lang.String)", "246": "ConsumerFilterManager::::decode(java.lang.String)", "247": "ConsumerFilterManager::::decode(java.lang.String)", "248": "ConsumerFilterManager::::decode(java.lang.String)", "249": "ConsumerFilterManager::::decode(java.lang.String)", "250": "ConsumerFilterManager::::decode(java.lang.String)", "251": "ConsumerFilterManager::::decode(java.lang.String)", "252": "ConsumerFilterManager::::decode(java.lang.String)", "253": "ConsumerFilterManager::::decode(java.lang.String)", "254": "ConsumerFilterManager::::decode(java.lang.String)", "255": "ConsumerFilterManager::::decode(java.lang.String)", "256": "ConsumerFilterManager::::decode(java.lang.String)", "257": "ConsumerFilterManager::::decode(java.lang.String)", "258": "ConsumerFilterManager::::decode(java.lang.String)", "259": "ConsumerFilterManager::::decode(java.lang.String)", "260": "ConsumerFilterManager::::decode(java.lang.String)", "261": "ConsumerFilterManager::::decode(java.lang.String)", "262": "ConsumerFilterManager::::decode(java.lang.String)", "263": "ConsumerFilterManager::::decode(java.lang.String)", "264": "ConsumerFilterManager::::decode(java.lang.String)", "265": "ConsumerFilterManager::::decode(java.lang.String)", "266": "ConsumerFilterManager::::decode(java.lang.String)", "267": "ConsumerFilterManager::::decode(java.lang.String)", "268": "ConsumerFilterManager::::decode(java.lang.String)", "269": "ConsumerFilterManager::::decode(java.lang.String)", "270": "ConsumerFilterManager::::decode(java.lang.String)", "271": "ConsumerFilterManager::::decode(java.lang.String)", "272": "ConsumerFilterManager::::decode(java.lang.String)", "273": "ConsumerFilterManager::::decode(java.lang.String)", "274": "ConsumerFilterManager::::decode(java.lang.String)", "275": "ConsumerFilterManager::::decode(java.lang.String)", "276": "ConsumerFilterManager::::decode(java.lang.String)", "277": "ConsumerFilterManager::::decode(java.lang.String)", "278": "ConsumerFilterManager::::decode(java.lang.String)", "279": "ConsumerFilterManager::::decode(java.lang.String)", "281": "ConsumerFilterManager::::encode(boolean)", "282": "ConsumerFilterManager::::encode(boolean)", "283": "ConsumerFilterManager::::encode(boolean)", "284": "ConsumerFilterManager::::encode(boolean)", "285": "ConsumerFilterManager::::encode(boolean)", "286": "ConsumerFilterManager::::encode(boolean)", "287": "ConsumerFilterManager::::encode(boolean)", "288": "ConsumerFilterManager::::encode(boolean)", "290": "ConsumerFilterManager::::clean()", "291": "ConsumerFilterManager::::clean()", "292": "ConsumerFilterManager::::clean()", "293": "ConsumerFilterManager::::clean()", "294": "ConsumerFilterManager::::clean()", "295": "ConsumerFilterManager::::clean()", "296": "ConsumerFilterManager::::clean()", "297": "ConsumerFilterManager::::clean()", "298": "ConsumerFilterManager::::clean()", "299": "ConsumerFilterManager::::clean()", "300": "ConsumerFilterManager::::clean()", "301": "ConsumerFilterManager::::clean()", "302": "ConsumerFilterManager::::clean()", "303": "ConsumerFilterManager::::clean()", "304": "ConsumerFilterManager::::clean()", "305": "ConsumerFilterManager::::clean()", "306": "ConsumerFilterManager::::clean()", "307": "ConsumerFilterManager::::clean()", "308": "ConsumerFilterManager::::clean()", "309": "ConsumerFilterManager::::clean()", "310": "ConsumerFilterManager::::clean()", "311": "ConsumerFilterManager::::clean()", "312": "ConsumerFilterManager::::clean()", "313": "ConsumerFilterManager::::clean()", "315": "ConsumerFilterManager::::getFilterDataByTopic()", "316": "ConsumerFilterManager::::getFilterDataByTopic()", "317": "ConsumerFilterManager::::getFilterDataByTopic()", "319": "ConsumerFilterManager::::setFilterDataByTopic(java.util.concurrent.ConcurrentHashMap<java.lang.String, org.apache.rocketmq.broker.filter.ConsumerFilterManager.FilterDataMapByTopic>)", "320": "ConsumerFilterManager::::setFilterDataByTopic(java.util.concurrent.ConcurrentHashMap<java.lang.String, org.apache.rocketmq.broker.filter.ConsumerFilterManager.FilterDataMapByTopic>)", "321": "ConsumerFilterManager::::setFilterDataByTopic(java.util.concurrent.ConcurrentHashMap<java.lang.String, org.apache.rocketmq.broker.filter.ConsumerFilterManager.FilterDataMapByTopic>)", "337": "ConsumerFilterManager.FilterDataMapByTopic::::unRegister(java.lang.String)", "338": "ConsumerFilterManager.FilterDataMapByTopic::::unRegister(java.lang.String)", "339": "ConsumerFilterManager.FilterDataMapByTopic::::unRegister(java.lang.String)", "340": "ConsumerFilterManager.FilterDataMapByTopic::::unRegister(java.lang.String)", "341": "ConsumerFilterManager.FilterDataMapByTopic::::unRegister(java.lang.String)", "342": "ConsumerFilterManager.FilterDataMapByTopic::::unRegister(java.lang.String)", "343": "ConsumerFilterManager.FilterDataMapByTopic::::unRegister(java.lang.String)", "344": "ConsumerFilterManager.FilterDataMapByTopic::::unRegister(java.lang.String)", "345": "ConsumerFilterManager.FilterDataMapByTopic::::unRegister(java.lang.String)", "346": "ConsumerFilterManager.FilterDataMapByTopic::::unRegister(java.lang.String)", "347": "ConsumerFilterManager.FilterDataMapByTopic::::unRegister(java.lang.String)", "348": "ConsumerFilterManager.FilterDataMapByTopic::::unRegister(java.lang.String)", "349": "ConsumerFilterManager.FilterDataMapByTopic::::unRegister(java.lang.String)", "350": "ConsumerFilterManager.FilterDataMapByTopic::::unRegister(java.lang.String)", "351": "ConsumerFilterManager.FilterDataMapByTopic::::unRegister(java.lang.String)", "352": "ConsumerFilterManager.FilterDataMapByTopic::::unRegister(java.lang.String)", "353": "ConsumerFilterManager.FilterDataMapByTopic::::unRegister(java.lang.String)", "442": "ConsumerFilterManager.FilterDataMapByTopic::::reAlive(org.apache.rocketmq.broker.filter.ConsumerFilterData)", "443": "ConsumerFilterManager.FilterDataMapByTopic::::reAlive(org.apache.rocketmq.broker.filter.ConsumerFilterData)", "444": "ConsumerFilterManager.FilterDataMapByTopic::::reAlive(org.apache.rocketmq.broker.filter.ConsumerFilterData)", "445": "ConsumerFilterManager.FilterDataMapByTopic::::reAlive(org.apache.rocketmq.broker.filter.ConsumerFilterData)", "446": "ConsumerFilterManager.FilterDataMapByTopic::::reAlive(org.apache.rocketmq.broker.filter.ConsumerFilterData)", "448": "ConsumerFilterManager.FilterDataMapByTopic::::get(java.lang.String)", "449": "ConsumerFilterManager.FilterDataMapByTopic::::get(java.lang.String)", "450": "ConsumerFilterManager.FilterDataMapByTopic::::get(java.lang.String)", "452": "ConsumerFilterManager.FilterDataMapByTopic::::getGroupFilterData()", "453": "ConsumerFilterManager.FilterDataMapByTopic::::getGroupFilterData()", "454": "ConsumerFilterManager.FilterDataMapByTopic::::getGroupFilterData()", "456": "ConsumerFilterManager.FilterDataMapByTopic::::setGroupFilterData(java.util.concurrent.ConcurrentHashMap<java.lang.String, org.apache.rocketmq.broker.filter.ConsumerFilterData>)", "457": "ConsumerFilterManager.FilterDataMapByTopic::::setGroupFilterData(java.util.concurrent.ConcurrentHashMap<java.lang.String, org.apache.rocketmq.broker.filter.ConsumerFilterData>)", "458": "ConsumerFilterManager.FilterDataMapByTopic::::setGroupFilterData(java.util.concurrent.ConcurrentHashMap<java.lang.String, org.apache.rocketmq.broker.filter.ConsumerFilterData>)", "460": "ConsumerFilterManager.FilterDataMapByTopic::::getTopic()", "461": "ConsumerFilterManager.FilterDataMapByTopic::::getTopic()", "462": "ConsumerFilterManager.FilterDataMapByTopic::::getTopic()", "464": "ConsumerFilterManager.FilterDataMapByTopic::::setTopic(java.lang.String)", "465": "ConsumerFilterManager.FilterDataMapByTopic::::setTopic(java.lang.String)", "466": "ConsumerFilterManager.FilterDataMapByTopic::::setTopic(java.lang.String)"}, "test_reverse_method_lines_dic": {"36": "ConsumerFilterManagerTest::::gen(int,int)", "37": "ConsumerFilterManagerTest::::gen(int,int)", "38": "ConsumerFilterManagerTest::::gen(int,int)", "39": "ConsumerFilterManagerTest::::gen(int,int)", "40": "ConsumerFilterManagerTest::::gen(int,int)", "41": "ConsumerFilterManagerTest::::gen(int,int)", "42": "ConsumerFilterManagerTest::::gen(int,int)", "43": "ConsumerFilterManagerTest::::gen(int,int)", "44": "ConsumerFilterManagerTest::::gen(int,int)", "45": "ConsumerFilterManagerTest::::gen(int,int)", "46": "ConsumerFilterManagerTest::::gen(int,int)", "47": "ConsumerFilterManagerTest::::gen(int,int)", "48": "ConsumerFilterManagerTest::::gen(int,int)", "49": "ConsumerFilterManagerTest::::gen(int,int)", "50": "ConsumerFilterManagerTest::::gen(int,int)", "51": "ConsumerFilterManagerTest::::gen(int,int)", "53": "ConsumerFilterManagerTest::::expr(int)", "54": "ConsumerFilterManagerTest::::expr(int)", "55": "ConsumerFilterManagerTest::::expr(int)", "57": "ConsumerFilterManagerTest::::testRegister_newExpressionCompileErrorAndRemoveOld()", "58": "ConsumerFilterManagerTest::::testRegister_newExpressionCompileErrorAndRemoveOld()", "59": "ConsumerFilterManagerTest::::testRegister_newExpressionCompileErrorAndRemoveOld()", "60": "ConsumerFilterManagerTest::::testRegister_newExpressionCompileErrorAndRemoveOld()", "61": "ConsumerFilterManagerTest::::testRegister_newExpressionCompileErrorAndRemoveOld()", "62": "ConsumerFilterManagerTest::::testRegister_newExpressionCompileErrorAndRemoveOld()", "63": "ConsumerFilterManagerTest::::testRegister_newExpressionCompileErrorAndRemoveOld()", "64": "ConsumerFilterManagerTest::::testRegister_newExpressionCompileErrorAndRemoveOld()", "65": "ConsumerFilterManagerTest::::testRegister_newExpressionCompileErrorAndRemoveOld()", "66": "ConsumerFilterManagerTest::::testRegister_newExpressionCompileErrorAndRemoveOld()", "67": "ConsumerFilterManagerTest::::testRegister_newExpressionCompileErrorAndRemoveOld()", "68": "ConsumerFilterManagerTest::::testRegister_newExpressionCompileErrorAndRemoveOld()", "69": "ConsumerFilterManagerTest::::testRegister_newExpressionCompileErrorAndRemoveOld()", "70": "ConsumerFilterManagerTest::::testRegister_newExpressionCompileErrorAndRemoveOld()", "71": "ConsumerFilterManagerTest::::testRegister_newExpressionCompileErrorAndRemoveOld()", "72": "ConsumerFilterManagerTest::::testRegister_newExpressionCompileErrorAndRemoveOld()", "73": "ConsumerFilterManagerTest::::testRegister_newExpressionCompileErrorAndRemoveOld()", "74": "ConsumerFilterManagerTest::::testRegister_newExpressionCompileErrorAndRemoveOld()", "75": "ConsumerFilterManagerTest::::testRegister_newExpressionCompileErrorAndRemoveOld()", "76": "ConsumerFilterManagerTest::::testRegister_newExpressionCompileErrorAndRemoveOld()", "77": "ConsumerFilterManagerTest::::testRegister_newExpressionCompileErrorAndRemoveOld()", "78": "ConsumerFilterManagerTest::::testRegister_newExpressionCompileErrorAndRemoveOld()", "80": "ConsumerFilterManagerTest::::testRegister_change()", "81": "ConsumerFilterManagerTest::::testRegister_change()", "82": "ConsumerFilterManagerTest::::testRegister_change()", "83": "ConsumerFilterManagerTest::::testRegister_change()", "84": "ConsumerFilterManagerTest::::testRegister_change()", "85": "ConsumerFilterManagerTest::::testRegister_change()", "86": "ConsumerFilterManagerTest::::testRegister_change()", "87": "ConsumerFilterManagerTest::::testRegister_change()", "88": "ConsumerFilterManagerTest::::testRegister_change()", "89": "ConsumerFilterManagerTest::::testRegister_change()", "90": "ConsumerFilterManagerTest::::testRegister_change()", "91": "ConsumerFilterManagerTest::::testRegister_change()", "92": "ConsumerFilterManagerTest::::testRegister_change()", "93": "ConsumerFilterManagerTest::::testRegister_change()", "94": "ConsumerFilterManagerTest::::testRegister_change()", "95": "ConsumerFilterManagerTest::::testRegister_change()", "96": "ConsumerFilterManagerTest::::testRegister_change()", "97": "ConsumerFilterManagerTest::::testRegister_change()", "99": "ConsumerFilterManagerTest::::testRegister()", "100": "ConsumerFilterManagerTest::::testRegister()", "101": "ConsumerFilterManagerTest::::testRegister()", "102": "ConsumerFilterManagerTest::::testRegister()", "103": "ConsumerFilterManagerTest::::testRegister()", "104": "ConsumerFilterManagerTest::::testRegister()", "105": "ConsumerFilterManagerTest::::testRegister()", "106": "ConsumerFilterManagerTest::::testRegister()", "107": "ConsumerFilterManagerTest::::testRegister()", "108": "ConsumerFilterManagerTest::::testRegister()", "109": "ConsumerFilterManagerTest::::testRegister()", "110": "ConsumerFilterManagerTest::::testRegister()", "111": "ConsumerFilterManagerTest::::testRegister()", "112": "ConsumerFilterManagerTest::::testRegister()", "113": "ConsumerFilterManagerTest::::testRegister()", "114": "ConsumerFilterManagerTest::::testRegister()", "115": "ConsumerFilterManagerTest::::testRegister()", "116": "ConsumerFilterManagerTest::::testRegister()", "117": "ConsumerFilterManagerTest::::testRegister()", "118": "ConsumerFilterManagerTest::::testRegister()", "119": "ConsumerFilterManagerTest::::testRegister()", "120": "ConsumerFilterManagerTest::::testRegister()", "121": "ConsumerFilterManagerTest::::testRegister()", "122": "ConsumerFilterManagerTest::::testRegister()", "123": "ConsumerFilterManagerTest::::testRegister()", "124": "ConsumerFilterManagerTest::::testRegister()", "125": "ConsumerFilterManagerTest::::testRegister()", "127": "ConsumerFilterManagerTest::::testRegister_reAlive()", "128": "ConsumerFilterManagerTest::::testRegister_reAlive()", "129": "ConsumerFilterManagerTest::::testRegister_reAlive()", "130": "ConsumerFilterManagerTest::::testRegister_reAlive()", "131": "ConsumerFilterManagerTest::::testRegister_reAlive()", "132": "ConsumerFilterManagerTest::::testRegister_reAlive()", "133": "ConsumerFilterManagerTest::::testRegister_reAlive()", "134": "ConsumerFilterManagerTest::::testRegister_reAlive()", "135": "ConsumerFilterManagerTest::::testRegister_reAlive()", "136": "ConsumerFilterManagerTest::::testRegister_reAlive()", "137": "ConsumerFilterManagerTest::::testRegister_reAlive()", "138": "ConsumerFilterManagerTest::::testRegister_reAlive()", "139": "ConsumerFilterManagerTest::::testRegister_reAlive()", "140": "ConsumerFilterManagerTest::::testRegister_reAlive()", "141": "ConsumerFilterManagerTest::::testRegister_reAlive()", "142": "ConsumerFilterManagerTest::::testRegister_reAlive()", "143": "ConsumerFilterManagerTest::::testRegister_reAlive()", "144": "ConsumerFilterManagerTest::::testRegister_reAlive()", "145": "ConsumerFilterManagerTest::::testRegister_reAlive()", "146": "ConsumerFilterManagerTest::::testRegister_reAlive()", "147": "ConsumerFilterManagerTest::::testRegister_reAlive()", "148": "ConsumerFilterManagerTest::::testRegister_reAlive()", "149": "ConsumerFilterManagerTest::::testRegister_reAlive()", "150": "ConsumerFilterManagerTest::::testRegister_reAlive()", "151": "ConsumerFilterManagerTest::::testRegister_reAlive()", "152": "ConsumerFilterManagerTest::::testRegister_reAlive()", "154": "ConsumerFilterManagerTest::::testRegister_bySubscriptionData()", "155": "ConsumerFilterManagerTest::::testRegister_bySubscriptionData()", "156": "ConsumerFilterManagerTest::::testRegister_bySubscriptionData()", "157": "ConsumerFilterManagerTest::::testRegister_bySubscriptionData()", "158": "ConsumerFilterManagerTest::::testRegister_bySubscriptionData()", "159": "ConsumerFilterManagerTest::::testRegister_bySubscriptionData()", "160": "ConsumerFilterManagerTest::::testRegister_bySubscriptionData()", "161": "ConsumerFilterManagerTest::::testRegister_bySubscriptionData()", "162": "ConsumerFilterManagerTest::::testRegister_bySubscriptionData()", "163": "ConsumerFilterManagerTest::::testRegister_bySubscriptionData()", "164": "ConsumerFilterManagerTest::::testRegister_bySubscriptionData()", "165": "ConsumerFilterManagerTest::::testRegister_bySubscriptionData()", "166": "ConsumerFilterManagerTest::::testRegister_bySubscriptionData()", "167": "ConsumerFilterManagerTest::::testRegister_bySubscriptionData()", "168": "ConsumerFilterManagerTest::::testRegister_bySubscriptionData()", "169": "ConsumerFilterManagerTest::::testRegister_bySubscriptionData()", "170": "ConsumerFilterManagerTest::::testRegister_bySubscriptionData()", "171": "ConsumerFilterManagerTest::::testRegister_bySubscriptionData()", "172": "ConsumerFilterManagerTest::::testRegister_bySubscriptionData()", "173": "ConsumerFilterManagerTest::::testRegister_bySubscriptionData()", "174": "ConsumerFilterManagerTest::::testRegister_bySubscriptionData()", "175": "ConsumerFilterManagerTest::::testRegister_bySubscriptionData()", "176": "ConsumerFilterManagerTest::::testRegister_bySubscriptionData()", "177": "ConsumerFilterManagerTest::::testRegister_bySubscriptionData()", "178": "ConsumerFilterManagerTest::::testRegister_bySubscriptionData()", "179": "ConsumerFilterManagerTest::::testRegister_bySubscriptionData()", "180": "ConsumerFilterManagerTest::::testRegister_bySubscriptionData()", "181": "ConsumerFilterManagerTest::::testRegister_bySubscriptionData()", "182": "ConsumerFilterManagerTest::::testRegister_bySubscriptionData()", "183": "ConsumerFilterManagerTest::::testRegister_bySubscriptionData()", "184": "ConsumerFilterManagerTest::::testRegister_bySubscriptionData()", "185": "ConsumerFilterManagerTest::::testRegister_bySubscriptionData()", "186": "ConsumerFilterManagerTest::::testRegister_bySubscriptionData()", "187": "ConsumerFilterManagerTest::::testRegister_bySubscriptionData()", "189": "ConsumerFilterManagerTest::::testRegister_tag()", "190": "ConsumerFilterManagerTest::::testRegister_tag()", "191": "ConsumerFilterManagerTest::::testRegister_tag()", "192": "ConsumerFilterManagerTest::::testRegister_tag()", "193": "ConsumerFilterManagerTest::::testRegister_tag()", "194": "ConsumerFilterManagerTest::::testRegister_tag()", "195": "ConsumerFilterManagerTest::::testRegister_tag()", "196": "ConsumerFilterManagerTest::::testRegister_tag()", "197": "ConsumerFilterManagerTest::::testRegister_tag()", "198": "ConsumerFilterManagerTest::::testRegister_tag()", "200": "ConsumerFilterManagerTest::::testUnregister()", "201": "ConsumerFilterManagerTest::::testUnregister()", "202": "ConsumerFilterManagerTest::::testUnregister()", "203": "ConsumerFilterManagerTest::::testUnregister()", "204": "ConsumerFilterManagerTest::::testUnregister()", "205": "ConsumerFilterManagerTest::::testUnregister()", "206": "ConsumerFilterManagerTest::::testUnregister()", "207": "ConsumerFilterManagerTest::::testUnregister()", "208": "ConsumerFilterManagerTest::::testUnregister()", "209": "ConsumerFilterManagerTest::::testUnregister()", "210": "ConsumerFilterManagerTest::::testUnregister()", "211": "ConsumerFilterManagerTest::::testUnregister()", "212": "ConsumerFilterManagerTest::::testUnregister()", "214": "ConsumerFilterManagerTest::::testPersist()", "215": "ConsumerFilterManagerTest::::testPersist()", "216": "ConsumerFilterManagerTest::::testPersist()", "217": "ConsumerFilterManagerTest::::testPersist()", "218": "ConsumerFilterManagerTest::::testPersist()", "219": "ConsumerFilterManagerTest::::testPersist()", "220": "ConsumerFilterManagerTest::::testPersist()", "221": "ConsumerFilterManagerTest::::testPersist()", "222": "ConsumerFilterManagerTest::::testPersist()", "223": "ConsumerFilterManagerTest::::testPersist()", "224": "ConsumerFilterManagerTest::::testPersist()", "225": "ConsumerFilterManagerTest::::testPersist()", "226": "ConsumerFilterManagerTest::::testPersist()", "227": "ConsumerFilterManagerTest::::testPersist()", "228": "ConsumerFilterManagerTest::::testPersist()", "229": "ConsumerFilterManagerTest::::testPersist()", "230": "ConsumerFilterManagerTest::::testPersist()", "231": "ConsumerFilterManagerTest::::testPersist()", "232": "ConsumerFilterManagerTest::::testPersist()", "233": "ConsumerFilterManagerTest::::testPersist()", "234": "ConsumerFilterManagerTest::::testPersist()", "235": "ConsumerFilterManagerTest::::testPersist()", "236": "ConsumerFilterManagerTest::::testPersist()", "237": "ConsumerFilterManagerTest::::testPersist()", "238": "ConsumerFilterManagerTest::::testPersist()", "240": "ConsumerFilterManagerTest::::testPersist_clean()", "241": "ConsumerFilterManagerTest::::testPersist_clean()", "242": "ConsumerFilterManagerTest::::testPersist_clean()", "243": "ConsumerFilterManagerTest::::testPersist_clean()", "244": "ConsumerFilterManagerTest::::testPersist_clean()", "245": "ConsumerFilterManagerTest::::testPersist_clean()", "246": "ConsumerFilterManagerTest::::testPersist_clean()", "247": "ConsumerFilterManagerTest::::testPersist_clean()", "248": "ConsumerFilterManagerTest::::testPersist_clean()", "249": "ConsumerFilterManagerTest::::testPersist_clean()", "250": "ConsumerFilterManagerTest::::testPersist_clean()", "251": "ConsumerFilterManagerTest::::testPersist_clean()", "252": "ConsumerFilterManagerTest::::testPersist_clean()", "253": "ConsumerFilterManagerTest::::testPersist_clean()", "254": "ConsumerFilterManagerTest::::testPersist_clean()", "255": "ConsumerFilterManagerTest::::testPersist_clean()", "256": "ConsumerFilterManagerTest::::testPersist_clean()", "257": "ConsumerFilterManagerTest::::testPersist_clean()", "258": "ConsumerFilterManagerTest::::testPersist_clean()", "259": "ConsumerFilterManagerTest::::testPersist_clean()", "260": "ConsumerFilterManagerTest::::testPersist_clean()", "261": "ConsumerFilterManagerTest::::testPersist_clean()", "262": "ConsumerFilterManagerTest::::testPersist_clean()", "263": "ConsumerFilterManagerTest::::testPersist_clean()", "264": "ConsumerFilterManagerTest::::testPersist_clean()", "265": "ConsumerFilterManagerTest::::testPersist_clean()", "266": "ConsumerFilterManagerTest::::testPersist_clean()", "267": "ConsumerFilterManagerTest::::testPersist_clean()", "268": "ConsumerFilterManagerTest::::testPersist_clean()", "269": "ConsumerFilterManagerTest::::testPersist_clean()", "270": "ConsumerFilterManagerTest::::testPersist_clean()", "271": "ConsumerFilterManagerTest::::testPersist_clean()", "272": "ConsumerFilterManagerTest::::testPersist_clean()", "273": "ConsumerFilterManagerTest::::testPersist_clean()", "274": "ConsumerFilterManagerTest::::testPersist_clean()", "275": "ConsumerFilterManagerTest::::testPersist_clean()"}, "tests": [{"test_lines": [57, 78], "covered_lines": [45, 49, 55, 57, 58, 80, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 96, 97, 98, 99, 101, 139, 143, 147, 149, 150, 151, 152, 155, 157, 167, 170, 174, 325, 333, 334, 335, 357, 359, 360, 361, 364, 366, 367, 368, 369, 392, 408, 409, 412, 417, 418, 419, 421, 422, 453]}, {"test_lines": [80, 97], "covered_lines": [45, 49, 55, 57, 58, 80, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 99, 101, 139, 143, 147, 149, 150, 151, 152, 155, 157, 167, 170, 174, 325, 333, 334, 335, 357, 359, 360, 361, 364, 366, 367, 368, 369, 392, 408, 409, 412, 417, 418, 419, 424, 426, 428, 429, 431, 453]}, {"test_lines": [99, 125], "covered_lines": [45, 49, 55, 57, 58, 80, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 99, 101, 139, 143, 147, 149, 150, 151, 152, 155, 157, 167, 170, 174, 325, 333, 334, 335, 357, 359, 360, 361, 364, 366, 367, 368, 369, 392, 393, 394, 396, 397, 400, 405, 408, 409, 412, 417, 418, 419, 424, 426, 428, 429, 431, 453]}, {"test_lines": [127, 152], "covered_lines": [45, 49, 55, 57, 58, 80, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 99, 101, 139, 143, 147, 149, 150, 151, 152, 155, 157, 161, 162, 163, 164, 167, 170, 174, 325, 333, 334, 335, 338, 342, 344, 348, 350, 352, 353, 357, 359, 360, 361, 364, 366, 367, 368, 369, 392, 408, 409, 412, 417, 433, 434, 435, 437, 443, 444, 445, 446, 453]}, {"test_lines": [154, 187], "covered_lines": [45, 49, 55, 57, 58, 80, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 99, 101, 105, 106, 107, 109, 110, 111, 113, 116, 118, 119, 120, 122, 123, 124, 125, 126, 128, 130, 134, 135, 139, 143, 147, 149, 150, 151, 152, 155, 157, 178, 180, 181, 182, 184, 186, 187, 189, 190, 192, 193, 195, 210, 325, 333, 334, 335, 357, 359, 360, 361, 364, 366, 367, 368, 369, 453]}, {"test_lines": [189, 198], "covered_lines": [45, 49, 55, 57, 58, 139, 140, 178, 180, 181, 195]}, {"test_lines": [200, 212], "covered_lines": [45, 49, 55, 57, 58, 80, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 99, 101, 139, 143, 147, 149, 150, 151, 152, 155, 157, 161, 162, 163, 164, 167, 170, 174, 325, 333, 334, 335, 338, 342, 344, 348, 350, 352, 353, 357, 359, 360, 361, 364, 366, 367, 368, 369, 453]}, {"test_lines": [214, 238], "covered_lines": [45, 49, 55, 57, 58, 80, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 99, 101, 139, 143, 147, 149, 150, 151, 152, 155, 157, 167, 170, 174, 220, 225, 230, 231, 232, 233, 234, 235, 239, 241, 243, 248, 249, 253, 257, 263, 265, 267, 268, 269, 272, 273, 275, 276, 279, 285, 287, 291, 292, 293, 295, 296, 298, 299, 301, 302, 306, 308, 312, 313, 316, 320, 321, 325, 330, 331, 333, 334, 335, 357, 359, 360, 361, 364, 366, 367, 368, 369, 453, 457, 458, 461, 465, 466]}, {"test_lines": [240, 275], "covered_lines": [45, 49, 55, 57, 58, 80, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 99, 101, 139, 143, 147, 149, 150, 151, 152, 155, 157, 167, 168, 170, 174, 199, 200, 220, 225, 230, 231, 232, 233, 234, 235, 239, 241, 243, 248, 249, 253, 257, 263, 265, 267, 268, 269, 272, 273, 275, 276, 279, 285, 287, 291, 292, 293, 295, 296, 298, 299, 301, 302, 303, 304, 306, 308, 309, 310, 312, 313, 316, 320, 321, 325, 330, 331, 333, 334, 335, 357, 359, 360, 361, 364, 366, 367, 368, 369, 453, 457, 458, 461, 465, 466]}]}, "/bernard/dataset_construction/prep/repos/RocketMQC/broker/src/main/java/org/apache/rocketmq/broker/filter/CommitLogDispatcherCalcBitMap.java": {"class_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package org.apache.rocketmq.broker.filter;\n", "\n", "import org.apache.rocketmq.common.BrokerConfig;\n", "import org.apache.rocketmq.common.UtilAll;\n", "import org.apache.rocketmq.common.constant.LoggerName;\n", "import org.apache.rocketmq.logging.InternalLogger;\n", "import org.apache.rocketmq.logging.InternalLoggerFactory;\n", "import org.apache.rocketmq.filter.util.BitsArray;\n", "import org.apache.rocketmq.store.CommitLogDispatcher;\n", "import org.apache.rocketmq.store.DispatchRequest;\n", "\n", "import java.util.Collection;\n", "import java.util.Iterator;\n", "\n", "/**\n", " * Calculate bit map of filter.\n", " */\n", "public class CommitLogDispatcherCalcBitMap implements CommitLogDispatcher {\n", "\n", "    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.FILTER_LOGGER_NAME);\n", "\n", "    protected final BrokerConfig brokerConfig;\n", "    protected final ConsumerFilterManager consumerFilterManager;\n", "\n", "    public CommitLogDispatcherCalcBitMap(BrokerConfig brokerConfig, ConsumerFilterManager consumerFilterManager) {\n", "        this.brokerConfig = brokerConfig;\n", "        this.consumerFilterManager = consumerFilterManager;\n", "    }\n", "\n", "    @Override\n", "    public void dispatch(DispatchRequest request) {\n", "        if (!this.brokerConfig.isEnableCalcFilterBitMap()) {\n", "            return;\n", "        }\n", "\n", "        try {\n", "\n", "            Collection<ConsumerFilterData> filterDatas = consumerFilterManager.get(request.getTopic());\n", "\n", "            if (filterDatas == null || filterDatas.isEmpty()) {\n", "                return;\n", "            }\n", "\n", "            Iterator<ConsumerFilterData> iterator = filterDatas.iterator();\n", "            BitsArray filterBitMap = BitsArray.create(\n", "                this.consumerFilterManager.getBloomFilter().getM()\n", "            );\n", "\n", "            long startTime = System.currentTimeMillis();\n", "            while (iterator.hasNext()) {\n", "                ConsumerFilterData filterData = iterator.next();\n", "\n", "                if (filterData.getCompiledExpression() == null) {\n", "                    log.error(\"[BUG] Consumer in filter manager has no compiled expression! {}\", filterData);\n", "                    continue;\n", "                }\n", "\n", "                if (filterData.getBloomFilterData() == null) {\n", "                    log.error(\"[BUG] Consumer in filter manager has no bloom data! {}\", filterData);\n", "                    continue;\n", "                }\n", "\n", "                Object ret = null;\n", "                try {\n", "                    MessageEvaluationContext context = new MessageEvaluationContext(request.getPropertiesMap());\n", "\n", "                    ret = filterData.getCompiledExpression().evaluate(context);\n", "                } catch (Throwable e) {\n", "                    log.error(\"Calc filter bit map error!commitLogOffset={}, consumer={}, {}\", request.getCommitLogOffset(), filterData, e);\n", "                }\n", "\n", "                log.debug(\"Result of Calc bit map:ret={}, data={}, props={}, offset={}\", ret, filterData, request.getPropertiesMap(), request.getCommitLogOffset());\n", "\n", "                // eval true\n", "                if (ret != null && ret instanceof Boolean && (Boolean) ret) {\n", "                    consumerFilterManager.getBloomFilter().hashTo(\n", "                        filterData.getBloomFilterData(),\n", "                        filterBitMap\n", "                    );\n", "                }\n", "            }\n", "\n", "            request.setBitMap(filterBitMap.bytes());\n", "\n", "            long elapsedTime = UtilAll.computeElapsedTimeMilliseconds(startTime);\n", "            // 1ms\n", "            if (elapsedTime >= 1) {\n", "                log.warn(\"Spend {} ms to calc bit map, consumerNum={}, topic={}\", elapsedTime, filterDatas.size(), request.getTopic());\n", "            }\n", "        } catch (Throwable e) {\n", "            log.error(\"Calc bit map error! topic={}, offset={}, queueId={}, {}\", request.getTopic(), request.getCommitLogOffset(), request.getQueueId(), e);\n", "        }\n", "    }\n", "}\n"], "test_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "\n", "package org.apache.rocketmq.broker.filter;\n", "\n", "import org.apache.rocketmq.common.BrokerConfig;\n", "import org.apache.rocketmq.common.filter.ExpressionType;\n", "import org.apache.rocketmq.filter.util.BitsArray;\n", "import org.apache.rocketmq.store.DispatchRequest;\n", "import org.junit.Test;\n", "\n", "import java.util.Collection;\n", "import java.util.HashMap;\n", "import java.util.Map;\n", "import java.util.UUID;\n", "\n", "import static org.assertj.core.api.Assertions.assertThat;\n", "\n", "public class CommitLogDispatcherCalcBitMapTest {\n", "\n", "    @Test\n", "    public void testDispatch_filterDataIllegal() {\n", "        BrokerConfig brokerConfig = new BrokerConfig();\n", "        brokerConfig.setEnableCalcFilterBitMap(true);\n", "\n", "        ConsumerFilterManager filterManager = new ConsumerFilterManager();\n", "\n", "        filterManager.register(\"topic0\", \"CID_0\", \"a is not null and a >= 5\",\n", "            ExpressionType.SQL92, System.currentTimeMillis());\n", "\n", "        filterManager.register(\"topic0\", \"CID_1\", \"a is not null and a >= 15\",\n", "            ExpressionType.SQL92, System.currentTimeMillis());\n", "\n", "        ConsumerFilterData nullExpression = filterManager.get(\"topic0\", \"CID_0\");\n", "        nullExpression.setExpression(null);\n", "        nullExpression.setCompiledExpression(null);\n", "        ConsumerFilterData nullBloomData = filterManager.get(\"topic0\", \"CID_1\");\n", "        nullBloomData.setBloomFilterData(null);\n", "\n", "        CommitLogDispatcherCalcBitMap calcBitMap = new CommitLogDispatcherCalcBitMap(brokerConfig,\n", "            filterManager);\n", "\n", "        for (int i = 0; i < 1; i++) {\n", "            Map<String, String> properties = new HashMap<String, String>(4);\n", "            properties.put(\"a\", String.valueOf(i * 10 + 5));\n", "\n", "            String topic = \"topic\" + i;\n", "\n", "            DispatchRequest dispatchRequest = new DispatchRequest(\n", "                topic,\n", "                0,\n", "                i * 100 + 123,\n", "                100,\n", "                (long) (\"tags\" + i).hashCode(),\n", "                System.currentTimeMillis(),\n", "                i,\n", "                null,\n", "                UUID.randomUUID().toString(),\n", "                0,\n", "                0,\n", "                properties\n", "            );\n", "\n", "            calcBitMap.dispatch(dispatchRequest);\n", "\n", "            assertThat(dispatchRequest.getBitMap()).isNotNull();\n", "\n", "            BitsArray bitsArray = BitsArray.create(dispatchRequest.getBitMap(),\n", "                filterManager.getBloomFilter().getM());\n", "\n", "            for (int j = 0; j < bitsArray.bitLength(); j++) {\n", "                assertThat(bitsArray.getBit(j)).isFalse();\n", "            }\n", "        }\n", "    }\n", "\n", "    @Test\n", "    public void testDispatch_blankFilterData() {\n", "        BrokerConfig brokerConfig = new BrokerConfig();\n", "        brokerConfig.setEnableCalcFilterBitMap(true);\n", "\n", "        ConsumerFilterManager filterManager = new ConsumerFilterManager();\n", "\n", "        CommitLogDispatcherCalcBitMap calcBitMap = new CommitLogDispatcherCalcBitMap(brokerConfig,\n", "            filterManager);\n", "\n", "        for (int i = 0; i < 10; i++) {\n", "            Map<String, String> properties = new HashMap<String, String>(4);\n", "            properties.put(\"a\", String.valueOf(i * 10 + 5));\n", "\n", "            String topic = \"topic\" + i;\n", "\n", "            DispatchRequest dispatchRequest = new DispatchRequest(\n", "                topic,\n", "                0,\n", "                i * 100 + 123,\n", "                100,\n", "                (long) (\"tags\" + i).hashCode(),\n", "                System.currentTimeMillis(),\n", "                i,\n", "                null,\n", "                UUID.randomUUID().toString(),\n", "                0,\n", "                0,\n", "                properties\n", "            );\n", "\n", "            calcBitMap.dispatch(dispatchRequest);\n", "\n", "            assertThat(dispatchRequest.getBitMap()).isNull();\n", "        }\n", "    }\n", "\n", "    @Test\n", "    public void testDispatch() {\n", "        BrokerConfig brokerConfig = new BrokerConfig();\n", "        brokerConfig.setEnableCalcFilterBitMap(true);\n", "\n", "        ConsumerFilterManager filterManager = ConsumerFilterManagerTest.gen(10, 10);\n", "\n", "        CommitLogDispatcherCalcBitMap calcBitMap = new CommitLogDispatcherCalcBitMap(brokerConfig,\n", "            filterManager);\n", "\n", "        for (int i = 0; i < 10; i++) {\n", "            Map<String, String> properties = new HashMap<String, String>(4);\n", "            properties.put(\"a\", String.valueOf(i * 10 + 5));\n", "\n", "            String topic = \"topic\" + i;\n", "\n", "            DispatchRequest dispatchRequest = new DispatchRequest(\n", "                topic,\n", "                0,\n", "                i * 100 + 123,\n", "                100,\n", "                (long) (\"tags\" + i).hashCode(),\n", "                System.currentTimeMillis(),\n", "                i,\n", "                null,\n", "                UUID.randomUUID().toString(),\n", "                0,\n", "                0,\n", "                properties\n", "            );\n", "\n", "            calcBitMap.dispatch(dispatchRequest);\n", "\n", "            assertThat(dispatchRequest.getBitMap()).isNotNull();\n", "\n", "            BitsArray bits = BitsArray.create(dispatchRequest.getBitMap());\n", "\n", "            Collection<ConsumerFilterData> filterDatas = filterManager.get(topic);\n", "\n", "            for (ConsumerFilterData filterData : filterDatas) {\n", "\n", "                if (filterManager.getBloomFilter().isHit(filterData.getBloomFilterData(), bits)) {\n", "                    try {\n", "                        assertThat((Boolean) filterData.getCompiledExpression().evaluate(\n", "                            new MessageEvaluationContext(properties)\n", "                        )).isTrue();\n", "                    } catch (Exception e) {\n", "                        e.printStackTrace();\n", "                        assertThat(true).isFalse();\n", "                    }\n", "                } else {\n", "                    try {\n", "                        assertThat((Boolean) filterData.getCompiledExpression().evaluate(\n", "                            new MessageEvaluationContext(properties)\n", "                        )).isFalse();\n", "                    } catch (Exception e) {\n", "                        e.printStackTrace();\n", "                        assertThat(true).isFalse();\n", "                    }\n", "                }\n", "            }\n", "        }\n", "    }\n", "}\n"], "method_lines_dic": {}, "test_method_lines_dic": {"CommitLogDispatcherCalcBitMapTest::::testDispatch_filterDataIllegal()": [35, 89], "CommitLogDispatcherCalcBitMapTest::::testDispatch_blankFilterData()": [91, 126], "CommitLogDispatcherCalcBitMapTest::::testDispatch()": [128, 190]}, "reverse_method_lines_dic": {}, "test_reverse_method_lines_dic": {"35": "CommitLogDispatcherCalcBitMapTest::::testDispatch_filterDataIllegal()", "36": "CommitLogDispatcherCalcBitMapTest::::testDispatch_filterDataIllegal()", "37": "CommitLogDispatcherCalcBitMapTest::::testDispatch_filterDataIllegal()", "38": "CommitLogDispatcherCalcBitMapTest::::testDispatch_filterDataIllegal()", "39": "CommitLogDispatcherCalcBitMapTest::::testDispatch_filterDataIllegal()", "40": "CommitLogDispatcherCalcBitMapTest::::testDispatch_filterDataIllegal()", "41": "CommitLogDispatcherCalcBitMapTest::::testDispatch_filterDataIllegal()", "42": "CommitLogDispatcherCalcBitMapTest::::testDispatch_filterDataIllegal()", "43": "CommitLogDispatcherCalcBitMapTest::::testDispatch_filterDataIllegal()", "44": "CommitLogDispatcherCalcBitMapTest::::testDispatch_filterDataIllegal()", "45": "CommitLogDispatcherCalcBitMapTest::::testDispatch_filterDataIllegal()", "46": "CommitLogDispatcherCalcBitMapTest::::testDispatch_filterDataIllegal()", "47": "CommitLogDispatcherCalcBitMapTest::::testDispatch_filterDataIllegal()", "48": "CommitLogDispatcherCalcBitMapTest::::testDispatch_filterDataIllegal()", "49": "CommitLogDispatcherCalcBitMapTest::::testDispatch_filterDataIllegal()", "50": "CommitLogDispatcherCalcBitMapTest::::testDispatch_filterDataIllegal()", "51": "CommitLogDispatcherCalcBitMapTest::::testDispatch_filterDataIllegal()", "52": "CommitLogDispatcherCalcBitMapTest::::testDispatch_filterDataIllegal()", "53": "CommitLogDispatcherCalcBitMapTest::::testDispatch_filterDataIllegal()", "54": "CommitLogDispatcherCalcBitMapTest::::testDispatch_filterDataIllegal()", "55": "CommitLogDispatcherCalcBitMapTest::::testDispatch_filterDataIllegal()", "56": "CommitLogDispatcherCalcBitMapTest::::testDispatch_filterDataIllegal()", "57": "CommitLogDispatcherCalcBitMapTest::::testDispatch_filterDataIllegal()", "58": "CommitLogDispatcherCalcBitMapTest::::testDispatch_filterDataIllegal()", "59": "CommitLogDispatcherCalcBitMapTest::::testDispatch_filterDataIllegal()", "60": "CommitLogDispatcherCalcBitMapTest::::testDispatch_filterDataIllegal()", "61": "CommitLogDispatcherCalcBitMapTest::::testDispatch_filterDataIllegal()", "62": "CommitLogDispatcherCalcBitMapTest::::testDispatch_filterDataIllegal()", "63": "CommitLogDispatcherCalcBitMapTest::::testDispatch_filterDataIllegal()", "64": "CommitLogDispatcherCalcBitMapTest::::testDispatch_filterDataIllegal()", "65": "CommitLogDispatcherCalcBitMapTest::::testDispatch_filterDataIllegal()", "66": "CommitLogDispatcherCalcBitMapTest::::testDispatch_filterDataIllegal()", "67": "CommitLogDispatcherCalcBitMapTest::::testDispatch_filterDataIllegal()", "68": "CommitLogDispatcherCalcBitMapTest::::testDispatch_filterDataIllegal()", "69": "CommitLogDispatcherCalcBitMapTest::::testDispatch_filterDataIllegal()", "70": "CommitLogDispatcherCalcBitMapTest::::testDispatch_filterDataIllegal()", "71": "CommitLogDispatcherCalcBitMapTest::::testDispatch_filterDataIllegal()", "72": "CommitLogDispatcherCalcBitMapTest::::testDispatch_filterDataIllegal()", "73": "CommitLogDispatcherCalcBitMapTest::::testDispatch_filterDataIllegal()", "74": "CommitLogDispatcherCalcBitMapTest::::testDispatch_filterDataIllegal()", "75": "CommitLogDispatcherCalcBitMapTest::::testDispatch_filterDataIllegal()", "76": "CommitLogDispatcherCalcBitMapTest::::testDispatch_filterDataIllegal()", "77": "CommitLogDispatcherCalcBitMapTest::::testDispatch_filterDataIllegal()", "78": "CommitLogDispatcherCalcBitMapTest::::testDispatch_filterDataIllegal()", "79": "CommitLogDispatcherCalcBitMapTest::::testDispatch_filterDataIllegal()", "80": "CommitLogDispatcherCalcBitMapTest::::testDispatch_filterDataIllegal()", "81": "CommitLogDispatcherCalcBitMapTest::::testDispatch_filterDataIllegal()", "82": "CommitLogDispatcherCalcBitMapTest::::testDispatch_filterDataIllegal()", "83": "CommitLogDispatcherCalcBitMapTest::::testDispatch_filterDataIllegal()", "84": "CommitLogDispatcherCalcBitMapTest::::testDispatch_filterDataIllegal()", "85": "CommitLogDispatcherCalcBitMapTest::::testDispatch_filterDataIllegal()", "86": "CommitLogDispatcherCalcBitMapTest::::testDispatch_filterDataIllegal()", "87": "CommitLogDispatcherCalcBitMapTest::::testDispatch_filterDataIllegal()", "88": "CommitLogDispatcherCalcBitMapTest::::testDispatch_filterDataIllegal()", "89": "CommitLogDispatcherCalcBitMapTest::::testDispatch_filterDataIllegal()", "91": "CommitLogDispatcherCalcBitMapTest::::testDispatch_blankFilterData()", "92": "CommitLogDispatcherCalcBitMapTest::::testDispatch_blankFilterData()", "93": "CommitLogDispatcherCalcBitMapTest::::testDispatch_blankFilterData()", "94": "CommitLogDispatcherCalcBitMapTest::::testDispatch_blankFilterData()", "95": "CommitLogDispatcherCalcBitMapTest::::testDispatch_blankFilterData()", "96": "CommitLogDispatcherCalcBitMapTest::::testDispatch_blankFilterData()", "97": "CommitLogDispatcherCalcBitMapTest::::testDispatch_blankFilterData()", "98": "CommitLogDispatcherCalcBitMapTest::::testDispatch_blankFilterData()", "99": "CommitLogDispatcherCalcBitMapTest::::testDispatch_blankFilterData()", "100": "CommitLogDispatcherCalcBitMapTest::::testDispatch_blankFilterData()", "101": "CommitLogDispatcherCalcBitMapTest::::testDispatch_blankFilterData()", "102": "CommitLogDispatcherCalcBitMapTest::::testDispatch_blankFilterData()", "103": "CommitLogDispatcherCalcBitMapTest::::testDispatch_blankFilterData()", "104": "CommitLogDispatcherCalcBitMapTest::::testDispatch_blankFilterData()", "105": "CommitLogDispatcherCalcBitMapTest::::testDispatch_blankFilterData()", "106": "CommitLogDispatcherCalcBitMapTest::::testDispatch_blankFilterData()", "107": "CommitLogDispatcherCalcBitMapTest::::testDispatch_blankFilterData()", "108": "CommitLogDispatcherCalcBitMapTest::::testDispatch_blankFilterData()", "109": "CommitLogDispatcherCalcBitMapTest::::testDispatch_blankFilterData()", "110": "CommitLogDispatcherCalcBitMapTest::::testDispatch_blankFilterData()", "111": "CommitLogDispatcherCalcBitMapTest::::testDispatch_blankFilterData()", "112": "CommitLogDispatcherCalcBitMapTest::::testDispatch_blankFilterData()", "113": "CommitLogDispatcherCalcBitMapTest::::testDispatch_blankFilterData()", "114": "CommitLogDispatcherCalcBitMapTest::::testDispatch_blankFilterData()", "115": "CommitLogDispatcherCalcBitMapTest::::testDispatch_blankFilterData()", "116": "CommitLogDispatcherCalcBitMapTest::::testDispatch_blankFilterData()", "117": "CommitLogDispatcherCalcBitMapTest::::testDispatch_blankFilterData()", "118": "CommitLogDispatcherCalcBitMapTest::::testDispatch_blankFilterData()", "119": "CommitLogDispatcherCalcBitMapTest::::testDispatch_blankFilterData()", "120": "CommitLogDispatcherCalcBitMapTest::::testDispatch_blankFilterData()", "121": "CommitLogDispatcherCalcBitMapTest::::testDispatch_blankFilterData()", "122": "CommitLogDispatcherCalcBitMapTest::::testDispatch_blankFilterData()", "123": "CommitLogDispatcherCalcBitMapTest::::testDispatch_blankFilterData()", "124": "CommitLogDispatcherCalcBitMapTest::::testDispatch_blankFilterData()", "125": "CommitLogDispatcherCalcBitMapTest::::testDispatch_blankFilterData()", "126": "CommitLogDispatcherCalcBitMapTest::::testDispatch_blankFilterData()", "128": "CommitLogDispatcherCalcBitMapTest::::testDispatch()", "129": "CommitLogDispatcherCalcBitMapTest::::testDispatch()", "130": "CommitLogDispatcherCalcBitMapTest::::testDispatch()", "131": "CommitLogDispatcherCalcBitMapTest::::testDispatch()", "132": "CommitLogDispatcherCalcBitMapTest::::testDispatch()", "133": "CommitLogDispatcherCalcBitMapTest::::testDispatch()", "134": "CommitLogDispatcherCalcBitMapTest::::testDispatch()", "135": "CommitLogDispatcherCalcBitMapTest::::testDispatch()", "136": "CommitLogDispatcherCalcBitMapTest::::testDispatch()", "137": "CommitLogDispatcherCalcBitMapTest::::testDispatch()", "138": "CommitLogDispatcherCalcBitMapTest::::testDispatch()", "139": "CommitLogDispatcherCalcBitMapTest::::testDispatch()", "140": "CommitLogDispatcherCalcBitMapTest::::testDispatch()", "141": "CommitLogDispatcherCalcBitMapTest::::testDispatch()", "142": "CommitLogDispatcherCalcBitMapTest::::testDispatch()", "143": "CommitLogDispatcherCalcBitMapTest::::testDispatch()", "144": "CommitLogDispatcherCalcBitMapTest::::testDispatch()", "145": "CommitLogDispatcherCalcBitMapTest::::testDispatch()", "146": "CommitLogDispatcherCalcBitMapTest::::testDispatch()", "147": "CommitLogDispatcherCalcBitMapTest::::testDispatch()", "148": "CommitLogDispatcherCalcBitMapTest::::testDispatch()", "149": "CommitLogDispatcherCalcBitMapTest::::testDispatch()", "150": "CommitLogDispatcherCalcBitMapTest::::testDispatch()", "151": "CommitLogDispatcherCalcBitMapTest::::testDispatch()", "152": "CommitLogDispatcherCalcBitMapTest::::testDispatch()", "153": "CommitLogDispatcherCalcBitMapTest::::testDispatch()", "154": "CommitLogDispatcherCalcBitMapTest::::testDispatch()", "155": "CommitLogDispatcherCalcBitMapTest::::testDispatch()", "156": "CommitLogDispatcherCalcBitMapTest::::testDispatch()", "157": "CommitLogDispatcherCalcBitMapTest::::testDispatch()", "158": "CommitLogDispatcherCalcBitMapTest::::testDispatch()", "159": "CommitLogDispatcherCalcBitMapTest::::testDispatch()", "160": "CommitLogDispatcherCalcBitMapTest::::testDispatch()", "161": "CommitLogDispatcherCalcBitMapTest::::testDispatch()", "162": "CommitLogDispatcherCalcBitMapTest::::testDispatch()", "163": "CommitLogDispatcherCalcBitMapTest::::testDispatch()", "164": "CommitLogDispatcherCalcBitMapTest::::testDispatch()", "165": "CommitLogDispatcherCalcBitMapTest::::testDispatch()", "166": "CommitLogDispatcherCalcBitMapTest::::testDispatch()", "167": "CommitLogDispatcherCalcBitMapTest::::testDispatch()", "168": "CommitLogDispatcherCalcBitMapTest::::testDispatch()", "169": "CommitLogDispatcherCalcBitMapTest::::testDispatch()", "170": "CommitLogDispatcherCalcBitMapTest::::testDispatch()", "171": "CommitLogDispatcherCalcBitMapTest::::testDispatch()", "172": "CommitLogDispatcherCalcBitMapTest::::testDispatch()", "173": "CommitLogDispatcherCalcBitMapTest::::testDispatch()", "174": "CommitLogDispatcherCalcBitMapTest::::testDispatch()", "175": "CommitLogDispatcherCalcBitMapTest::::testDispatch()", "176": "CommitLogDispatcherCalcBitMapTest::::testDispatch()", "177": "CommitLogDispatcherCalcBitMapTest::::testDispatch()", "178": "CommitLogDispatcherCalcBitMapTest::::testDispatch()", "179": "CommitLogDispatcherCalcBitMapTest::::testDispatch()", "180": "CommitLogDispatcherCalcBitMapTest::::testDispatch()", "181": "CommitLogDispatcherCalcBitMapTest::::testDispatch()", "182": "CommitLogDispatcherCalcBitMapTest::::testDispatch()", "183": "CommitLogDispatcherCalcBitMapTest::::testDispatch()", "184": "CommitLogDispatcherCalcBitMapTest::::testDispatch()", "185": "CommitLogDispatcherCalcBitMapTest::::testDispatch()", "186": "CommitLogDispatcherCalcBitMapTest::::testDispatch()", "187": "CommitLogDispatcherCalcBitMapTest::::testDispatch()", "188": "CommitLogDispatcherCalcBitMapTest::::testDispatch()", "189": "CommitLogDispatcherCalcBitMapTest::::testDispatch()", "190": "CommitLogDispatcherCalcBitMapTest::::testDispatch()"}, "tests": [{"test_lines": [35, 89], "covered_lines": [37, 42, 43, 44, 45, 49, 55, 57, 61, 62, 63, 66, 67, 68, 70, 71, 72, 75, 76, 77, 100, 102, 104, 105, 109, 110]}, {"test_lines": [91, 126], "covered_lines": [37, 42, 43, 44, 45, 49, 55, 57, 58]}, {"test_lines": [128, 190], "covered_lines": [37, 42, 43, 44, 45, 49, 55, 57, 61, 62, 63, 66, 67, 68, 70, 75, 80, 82, 84, 87, 89, 92, 93, 94, 98, 100, 102, 104, 105, 109, 110]}]}, "/bernard/dataset_construction/prep/repos/RocketMQC/broker/src/main/java/org/apache/rocketmq/broker/transaction/queue/DefaultTransactionalMessageCheckListener.java": {"class_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "package org.apache.rocketmq.broker.transaction.queue;\n", "\n", "import org.apache.rocketmq.broker.transaction.AbstractTransactionalMessageCheckListener;\n", "import org.apache.rocketmq.common.TopicConfig;\n", "import org.apache.rocketmq.common.constant.LoggerName;\n", "import org.apache.rocketmq.common.constant.PermName;\n", "import org.apache.rocketmq.common.message.MessageAccessor;\n", "import org.apache.rocketmq.common.message.MessageConst;\n", "import org.apache.rocketmq.common.message.MessageDecoder;\n", "import org.apache.rocketmq.common.message.MessageExt;\n", "import org.apache.rocketmq.logging.InternalLogger;\n", "import org.apache.rocketmq.logging.InternalLoggerFactory;\n", "import org.apache.rocketmq.store.MessageExtBrokerInner;\n", "import org.apache.rocketmq.store.PutMessageResult;\n", "import org.apache.rocketmq.store.PutMessageStatus;\n", "\n", "public class DefaultTransactionalMessageCheckListener extends AbstractTransactionalMessageCheckListener {\n", "    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.TRANSACTION_LOGGER_NAME);\n", "\n", "    public DefaultTransactionalMessageCheckListener() {\n", "        super();\n", "    }\n", "\n", "    @Override\n", "    public void resolveDiscardMsg(MessageExt msgExt) {\n", "        log.error(\"MsgExt:{} has been checked too many times, so discard it by moving it to system topic TRANS_CHECK_MAXTIME_TOPIC\", msgExt);\n", "\n", "        try {\n", "            MessageExtBrokerInner brokerInner = toMessageExtBrokerInner(msgExt);\n", "            PutMessageResult putMessageResult = this.getBrokerController().getMessageStore().putMessage(brokerInner);\n", "            if (putMessageResult != null && putMessageResult.getPutMessageStatus() == PutMessageStatus.PUT_OK) {\n", "                log.info(\"Put checked-too-many-time half message to TRANS_CHECK_MAXTIME_TOPIC OK. Restored in queueOffset={}, \" +\n", "                    \"commitLogOffset={}, real topic={}\", msgExt.getQueueOffset(), msgExt.getCommitLogOffset(), msgExt.getUserProperty(MessageConst.PROPERTY_REAL_TOPIC));\n", "            } else {\n", "                log.error(\"Put checked-too-many-time half message to TRANS_CHECK_MAXTIME_TOPIC failed, real topic={}, msgId={}\", msgExt.getTopic(), msgExt.getMsgId());\n", "            }\n", "        } catch (Exception e) {\n", "            log.warn(\"Put checked-too-many-time message to TRANS_CHECK_MAXTIME_TOPIC error. {}\", e);\n", "        }\n", "\n", "    }\n", "\n", "    private MessageExtBrokerInner toMessageExtBrokerInner(MessageExt msgExt) {\n", "        TopicConfig topicConfig = this.getBrokerController().getTopicConfigManager().createTopicOfTranCheckMaxTime(TCMT_QUEUE_NUMS, PermName.PERM_READ | PermName.PERM_WRITE);\n", "        int queueId = Math.abs(random.nextInt() % 99999999) % TCMT_QUEUE_NUMS;\n", "        MessageExtBrokerInner inner = new MessageExtBrokerInner();\n", "        inner.setTopic(topicConfig.getTopicName());\n", "        inner.setBody(msgExt.getBody());\n", "        inner.setFlag(msgExt.getFlag());\n", "        MessageAccessor.setProperties(inner, msgExt.getProperties());\n", "        inner.setPropertiesString(MessageDecoder.messageProperties2String(msgExt.getProperties()));\n", "        inner.setTagsCode(MessageExtBrokerInner.tagsString2tagsCode(msgExt.getTags()));\n", "        inner.setQueueId(queueId);\n", "        inner.setSysFlag(msgExt.getSysFlag());\n", "        inner.setBornHost(msgExt.getBornHost());\n", "        inner.setBornTimestamp(msgExt.getBornTimestamp());\n", "        inner.setStoreHost(msgExt.getStoreHost());\n", "        inner.setReconsumeTimes(msgExt.getReconsumeTimes());\n", "        inner.setMsgId(msgExt.getMsgId());\n", "        inner.setWaitStoreMsgOK(false);\n", "        return inner;\n", "    }\n", "}\n"], "test_content": ["/*\n", " * Licensed to the Apache Software Foundation (ASF) under one or more\n", " * contributor license agreements.  See the NOTICE file distributed with\n", " * this work for additional information regarding copyright ownership.\n", " * The ASF licenses this file to You under the Apache License, Version 2.0\n", " * (the \"License\"); you may not use this file except in compliance with\n", " * the License.  You may obtain a copy of the License at\n", " *\n", " *     http://www.apache.org/licenses/LICENSE-2.0\n", " *\n", " * Unless required by applicable law or agreed to in writing, software\n", " * distributed under the License is distributed on an \"AS IS\" BASIS,\n", " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n", " * See the License for the specific language governing permissions and\n", " * limitations under the License.\n", " */\n", "package org.apache.rocketmq.broker.transaction.queue;\n", "\n", "import java.net.InetSocketAddress;\n", "import org.apache.rocketmq.broker.BrokerController;\n", "import org.apache.rocketmq.common.BrokerConfig;\n", "import org.apache.rocketmq.common.message.MessageAccessor;\n", "import org.apache.rocketmq.common.message.MessageConst;\n", "import org.apache.rocketmq.common.message.MessageExt;\n", "import org.apache.rocketmq.common.topic.TopicValidator;\n", "import org.apache.rocketmq.remoting.netty.NettyClientConfig;\n", "import org.apache.rocketmq.remoting.netty.NettyServerConfig;\n", "import org.apache.rocketmq.store.MessageExtBrokerInner;\n", "import org.apache.rocketmq.store.MessageStore;\n", "import org.apache.rocketmq.store.config.MessageStoreConfig;\n", "import org.junit.After;\n", "import org.junit.Before;\n", "import org.junit.Test;\n", "import org.junit.runner.RunWith;\n", "import org.mockito.Mock;\n", "import org.mockito.Spy;\n", "import org.mockito.junit.MockitoJUnitRunner;\n", "\n", "@RunWith(MockitoJUnitRunner.class)\n", "public class DefaultTransactionalMessageCheckListenerTest {\n", "\n", "    private DefaultTransactionalMessageCheckListener listener;\n", "    @Mock\n", "    private MessageStore messageStore;\n", "\n", "    @Spy\n", "    private BrokerController brokerController = new BrokerController(new BrokerConfig(),\n", "        new NettyServerConfig(),\n", "        new NettyClientConfig(), new MessageStoreConfig());\n", "\n", "    @Before\n", "    public void init() throws Exception {\n", "        listener = new DefaultTransactionalMessageCheckListener();\n", "        listener.setBrokerController(brokerController);\n", "        brokerController.setMessageStore(messageStore);\n", "\n", "    }\n", "\n", "    @After\n", "    public void destroy() {\n", "//        brokerController.shutdown();\n", "    }\n", "\n", "    @Test\n", "    public void testResolveHalfMsg() {\n", "        listener.resolveHalfMsg(createMessageExt());\n", "    }\n", "\n", "    @Test\n", "    public void testSendCheckMessage() throws Exception {\n", "        MessageExt messageExt = createMessageExt();\n", "        listener.sendCheckMessage(messageExt);\n", "    }\n", "\n", "    @Test\n", "    public void sendCheckMessage() {\n", "        listener.resolveDiscardMsg(createMessageExt());\n", "    }\n", "\n", "    private MessageExtBrokerInner createMessageExt() {\n", "        MessageExtBrokerInner inner = new MessageExtBrokerInner();\n", "        MessageAccessor.putProperty(inner, MessageConst.PROPERTY_REAL_QUEUE_ID, \"1\");\n", "        MessageAccessor.putProperty(inner, MessageConst.PROPERTY_UNIQ_CLIENT_MESSAGE_ID_KEYIDX, \"1234255\");\n", "        MessageAccessor.putProperty(inner, MessageConst.PROPERTY_REAL_TOPIC, \"realTopic\");\n", "        inner.setTransactionId(inner.getProperty(MessageConst.PROPERTY_UNIQ_CLIENT_MESSAGE_ID_KEYIDX));\n", "        inner.setBody(\"check\".getBytes());\n", "        inner.setMsgId(\"12344567890\");\n", "        inner.setQueueId(0);\n", "        return inner;\n", "    }\n", "\n", "    @Test\n", "    public void testResolveDiscardMsg() {\n", "        MessageExt messageExt = new MessageExt();\n", "        messageExt.setTopic(TopicValidator.RMQ_SYS_TRANS_HALF_TOPIC);\n", "        messageExt.setQueueId(0);\n", "        messageExt.setBody(\"test resolve discard msg\".getBytes());\n", "        messageExt.setStoreHost(new InetSocketAddress(\"127.0.0.1\", 10911));\n", "        messageExt.setBornHost(new InetSocketAddress(\"127.0.0.1\", 54270));\n", "        MessageAccessor.putProperty(messageExt, MessageConst.PROPERTY_REAL_TOPIC, \"test_topic\");\n", "        MessageAccessor.putProperty(messageExt, MessageConst.PROPERTY_PRODUCER_GROUP, \"PID_TEST_DISCARD_MSG\");\n", "        MessageAccessor.putProperty(messageExt, MessageConst.PROPERTY_TRANSACTION_PREPARED, \"true\");\n", "        MessageAccessor.putProperty(messageExt, MessageConst.PROPERTY_TRANSACTION_CHECK_TIMES, \"15\");\n", "        MessageAccessor.putProperty(messageExt, MessageConst.PROPERTY_REAL_QUEUE_ID, \"2\");\n", "        MessageAccessor.putProperty(messageExt, MessageConst.PROPERTY_TAGS, \"test_discard_msg\");\n", "        MessageAccessor.putProperty(messageExt, MessageConst.PROPERTY_UNIQ_CLIENT_MESSAGE_ID_KEYIDX, \"AC14157E4F1C18B4AAC27EB1A0F30000\");\n", "        listener.resolveDiscardMsg(messageExt);\n", "    }\n", "\n", "}\n"], "method_lines_dic": {}, "test_method_lines_dic": {"DefaultTransactionalMessageCheckListenerTest::::init()": [51, 57], "DefaultTransactionalMessageCheckListenerTest::::destroy()": [59, 62], "DefaultTransactionalMessageCheckListenerTest::::testResolveHalfMsg()": [64, 67], "DefaultTransactionalMessageCheckListenerTest::::testSendCheckMessage()": [69, 73], "DefaultTransactionalMessageCheckListenerTest::::sendCheckMessage()": [75, 78], "DefaultTransactionalMessageCheckListenerTest::::createMessageExt()": [80, 90], "DefaultTransactionalMessageCheckListenerTest::::testResolveDiscardMsg()": [92, 108]}, "reverse_method_lines_dic": {}, "test_reverse_method_lines_dic": {"51": "DefaultTransactionalMessageCheckListenerTest::::init()", "52": "DefaultTransactionalMessageCheckListenerTest::::init()", "53": "DefaultTransactionalMessageCheckListenerTest::::init()", "54": "DefaultTransactionalMessageCheckListenerTest::::init()", "55": "DefaultTransactionalMessageCheckListenerTest::::init()", "56": "DefaultTransactionalMessageCheckListenerTest::::init()", "57": "DefaultTransactionalMessageCheckListenerTest::::init()", "59": "DefaultTransactionalMessageCheckListenerTest::::destroy()", "60": "DefaultTransactionalMessageCheckListenerTest::::destroy()", "61": "DefaultTransactionalMessageCheckListenerTest::::destroy()", "62": "DefaultTransactionalMessageCheckListenerTest::::destroy()", "64": "DefaultTransactionalMessageCheckListenerTest::::testResolveHalfMsg()", "65": "DefaultTransactionalMessageCheckListenerTest::::testResolveHalfMsg()", "66": "DefaultTransactionalMessageCheckListenerTest::::testResolveHalfMsg()", "67": "DefaultTransactionalMessageCheckListenerTest::::testResolveHalfMsg()", "69": "DefaultTransactionalMessageCheckListenerTest::::testSendCheckMessage()", "70": "DefaultTransactionalMessageCheckListenerTest::::testSendCheckMessage()", "71": "DefaultTransactionalMessageCheckListenerTest::::testSendCheckMessage()", "72": "DefaultTransactionalMessageCheckListenerTest::::testSendCheckMessage()", "73": "DefaultTransactionalMessageCheckListenerTest::::testSendCheckMessage()", "75": "DefaultTransactionalMessageCheckListenerTest::::sendCheckMessage()", "76": "DefaultTransactionalMessageCheckListenerTest::::sendCheckMessage()", "77": "DefaultTransactionalMessageCheckListenerTest::::sendCheckMessage()", "78": "DefaultTransactionalMessageCheckListenerTest::::sendCheckMessage()", "80": "DefaultTransactionalMessageCheckListenerTest::::createMessageExt()", "81": "DefaultTransactionalMessageCheckListenerTest::::createMessageExt()", "82": "DefaultTransactionalMessageCheckListenerTest::::createMessageExt()", "83": "DefaultTransactionalMessageCheckListenerTest::::createMessageExt()", "84": "DefaultTransactionalMessageCheckListenerTest::::createMessageExt()", "85": "DefaultTransactionalMessageCheckListenerTest::::createMessageExt()", "86": "DefaultTransactionalMessageCheckListenerTest::::createMessageExt()", "87": "DefaultTransactionalMessageCheckListenerTest::::createMessageExt()", "88": "DefaultTransactionalMessageCheckListenerTest::::createMessageExt()", "89": "DefaultTransactionalMessageCheckListenerTest::::createMessageExt()", "90": "DefaultTransactionalMessageCheckListenerTest::::createMessageExt()", "92": "DefaultTransactionalMessageCheckListenerTest::::testResolveDiscardMsg()", "93": "DefaultTransactionalMessageCheckListenerTest::::testResolveDiscardMsg()", "94": "DefaultTransactionalMessageCheckListenerTest::::testResolveDiscardMsg()", "95": "DefaultTransactionalMessageCheckListenerTest::::testResolveDiscardMsg()", "96": "DefaultTransactionalMessageCheckListenerTest::::testResolveDiscardMsg()", "97": "DefaultTransactionalMessageCheckListenerTest::::testResolveDiscardMsg()", "98": "DefaultTransactionalMessageCheckListenerTest::::testResolveDiscardMsg()", "99": "DefaultTransactionalMessageCheckListenerTest::::testResolveDiscardMsg()", "100": "DefaultTransactionalMessageCheckListenerTest::::testResolveDiscardMsg()", "101": "DefaultTransactionalMessageCheckListenerTest::::testResolveDiscardMsg()", "102": "DefaultTransactionalMessageCheckListenerTest::::testResolveDiscardMsg()", "103": "DefaultTransactionalMessageCheckListenerTest::::testResolveDiscardMsg()", "104": "DefaultTransactionalMessageCheckListenerTest::::testResolveDiscardMsg()", "105": "DefaultTransactionalMessageCheckListenerTest::::testResolveDiscardMsg()", "106": "DefaultTransactionalMessageCheckListenerTest::::testResolveDiscardMsg()", "107": "DefaultTransactionalMessageCheckListenerTest::::testResolveDiscardMsg()", "108": "DefaultTransactionalMessageCheckListenerTest::::testResolveDiscardMsg()"}, "tests": [{"test_lines": [64, 67], "covered_lines": [34, 37, 38]}, {"test_lines": [69, 73], "covered_lines": [34, 37, 38]}, {"test_lines": [75, 78], "covered_lines": [34, 37, 38, 42, 45, 46, 47, 51, 55, 57, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77]}, {"test_lines": [92, 108], "covered_lines": [34, 37, 38, 42, 45, 46, 47, 51, 55, 57, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77]}]}}